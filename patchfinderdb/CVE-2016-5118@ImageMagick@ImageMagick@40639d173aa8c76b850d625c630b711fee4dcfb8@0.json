{
  "cve_id": "CVE-2016-5118",
  "cve_desc": "The OpenBlob function in blob.c in GraphicsMagick before 1.3.24 and ImageMagick allows remote attackers to execute arbitrary code via a | (pipe) character at the start of a filename.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "40639d173aa8c76b850d625c630b711fee4dcfb8",
  "patch_info": {
    "commit_hash": "40639d173aa8c76b850d625c630b711fee4dcfb8",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/40639d173aa8c76b850d625c630b711fee4dcfb8",
    "files": [
      "MagickCore/blob.c",
      "MagickCore/delegate.c",
      "MagickCore/property.c",
      "MagickCore/string.c",
      "MagickCore/string_.h"
    ],
    "message": "Add support for SanitizeString() method",
    "before_after_code_files": [
      "MagickCore/blob.c||MagickCore/blob.c",
      "MagickCore/delegate.c||MagickCore/delegate.c",
      "MagickCore/property.c||MagickCore/property.c",
      "MagickCore/string.c||MagickCore/string.c",
      "MagickCore/string_.h||MagickCore/string_.h"
    ]
  },
  "patch_diff": {
    "MagickCore/blob.c||MagickCore/blob.c": [
      "File: MagickCore/blob.c -> MagickCore/blob.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2484:       errno=EPERM;",
      "2485:       (void) ThrowMagickException(exception,GetMagickModule(),PolicyError,",
      "2486:         \"NotAuthorized\",\"`%s'\",filename);",
      "2488:     }",
      "2489:   if ((LocaleCompare(filename,\"-\") == 0) ||",
      "2490:       ((*filename == '\\0') && (image_info->file == (FILE *) NULL)))",
      "",
      "[Removed Lines]",
      "2487:       return(MagickFalse);",
      "",
      "[Added Lines]",
      "2487:       return(MagickFalse);",
      "2488:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2495:         setmode(fileno(image->blob->file_info.file),_O_BINARY);",
      "2496: #endif",
      "2497:       image->blob->type=StandardStream;",
      "2499:       return(SetStreamBuffering(image_info,image));",
      "2500:     }",
      "2501:   if (LocaleNCompare(filename,\"fd:\",3) == 0)",
      "",
      "[Removed Lines]",
      "2498:       image->blob->exempt=MagickTrue;",
      "",
      "[Added Lines]",
      "2499:       return(SetStreamBuffering(image_info,image));",
      "2500:     }",
      "2501:   if (LocaleNCompare(filename,\"fd:\",3) == 0)",
      "2502:     {",
      "",
      "---------------"
    ],
    "MagickCore/delegate.c||MagickCore/delegate.c": [
      "File: MagickCore/delegate.c -> MagickCore/delegate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "324: %",
      "325: %    o verbose: a value other than 0 prints the executed command before it is",
      "326: %      invoked.",
      "327: %",
      "353:   sanitize_command=AcquireString(command);",
      "354:   p=sanitize_command;",
      "",
      "[Removed Lines]",
      "328: %    o command: this string is the command to execute.",
      "329: %",
      "330: %    o message: an option buffer to receive any message posted to stdout or",
      "331: %      stderr.",
      "332: %",
      "333: %    o exception: return any errors here.",
      "334: %",
      "337: static char *SanitizeDelegateCommand(const char *command)",
      "338: {",
      "339:   char",
      "342:   const char",
      "345:   register char",
      "348:   static char",
      "349:     whitelist[] =",
      "350:       \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_- \"",
      "351:       \".@&;<>()|/\\\\\\'\\\":%=~`\";",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "398:       (void) ThrowMagickException(exception,GetMagickModule(),PolicyError,",
      "399:         \"NotAuthorized\",\"`%s'\",arguments[1]);",
      "400:       for (i=0; i < (ssize_t) number_arguments; i++)",
      "402:       arguments=(char **) RelinquishMagickMemory(arguments);",
      "403:       return(-1);",
      "404:     }",
      "",
      "[Removed Lines]",
      "401:         arguments[i]=DestroyString(arguments[i]);",
      "",
      "[Added Lines]",
      "376:         arguments[i]=DestroyString(arguments[i]);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "553:       (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning, \\",
      "554:         \"NoImageForProperty\",format,letter); \\",
      "555:       break; \\",
      "556:     }",
      "557: #define WarnNoImageInfoReturn(format,letter) \\",
      "558:   if (image_info == (ImageInfo *) NULL) \\",
      "559:     { \\",
      "560:       (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning, \\",
      "561:         \"NoImageInfoForProperty\",format,letter); \\",
      "572:   register char",
      "",
      "[Removed Lines]",
      "562:       break; \\",
      "563:     }",
      "565:   char",
      "567:     value[MagickPathExtent];",
      "569:   const char",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "874:       break;",
      "875:     }",
      "876:     case '#':",
      "877:     {",
      "886:   }",
      "888:     Sanitize string.",
      "",
      "[Removed Lines]",
      "879:         Image signature.",
      "881:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
      "882:       (void) SignatureImage(image,exception);",
      "883:       string=GetImageProperty(image,\"signature\",exception);",
      "884:       break;",
      "885:     }",
      "",
      "[Added Lines]",
      "842:     {",
      "",
      "---------------"
    ],
    "MagickCore/property.c||MagickCore/property.c": [
      "File: MagickCore/property.c -> MagickCore/property.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2569:       string=CommandOptionToMnemonic(MagickCompressOptions,",
      "2570:         (ssize_t) image->compression);",
      "2571:       break;",
      "2596:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
      "2597:       (void) CopyMagickString(value,image->magick_filename,MagickPathExtent);",
      "2598:       p=value;",
      "",
      "[Removed Lines]",
      "2572:     }",
      "2574:     {",
      "2575:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
      "2576:       string=CommandOptionToMnemonic(MagickDisposeOptions,",
      "2577:         (ssize_t) image->dispose);",
      "2578:       break;",
      "2579:     }",
      "2580:     case 'F':",
      "2581:     {",
      "2582:       const char",
      "2585:       register char",
      "2588:       static char",
      "2589:         whitelist[] =",
      "2590:           \"^-ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"",
      "2591:           \"+&@#/%?=~_|!:,.;()\";",
      "2594:         Magick filename (sanitized) - filename given incl. coder & read mods.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MagickCore/string.c||MagickCore/string.c": [
      "File: MagickCore/string.c -> MagickCore/string.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1632: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "1633: %                                                                             %",
      "1634: %                                                                             %",
      "1635: %                                                                             %",
      "1636: %   R e s e t S t r i n g I n f o                                             %",
      "1637: %                                                                             %",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1632: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "1633: %                                                                             %",
      "1634: %                                                                             %",
      "1635: %                                                                             %",
      "1636: %   R e s e t S t r i n g I n f o                                             %",
      "1637: %                                                                             %",
      "1638: %                                                                             %",
      "1639: %                                                                             %",
      "1640: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "1641: %",
      "1642: %  ResetStringInfo() reset the string to all null bytes.",
      "1643: %",
      "1644: %  The format of the ResetStringInfo method is:",
      "1645: %",
      "1646: %      void ResetStringInfo(StringInfo *string_info)",
      "1647: %",
      "1648: %  A description of each parameter follows:",
      "1649: %",
      "1650: %    o string_info: the string info.",
      "1651: %",
      "1653: MagickExport void ResetStringInfo(StringInfo *string_info)",
      "1654: {",
      "1655:   assert(string_info != (StringInfo *) NULL);",
      "1656:   assert(string_info->signature == MagickCoreSignature);",
      "1657:   (void) ResetMagickMemory(string_info->datum,0,string_info->length);",
      "1658: }",
      "1662: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "1663: %                                                                             %",
      "1664: %                                                                             %",
      "1665: %                                                                             %",
      "1666: %   S a n t i z e S t r i n g                                                 %",
      "1667: %                                                                             %",
      "1668: %                                                                             %",
      "1669: %                                                                             %",
      "1670: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "1671: %",
      "1672: %  SanitizeString() returns an new string removes all characters except",
      "1673: %  letters, digits and !#$%&'*+-=?^_`{|}~@.[].",
      "1674: %",
      "1675: %  The returned string shoud be freed using DestoryString().",
      "1676: %",
      "1677: %  The format of the SanitizeString method is:",
      "1678: %",
      "1679: %      char *SanitizeString(const char *source)",
      "1680: %",
      "",
      "---------------"
    ],
    "MagickCore/string_.h||MagickCore/string_.h": [
      "File: MagickCore/string_.h -> MagickCore/string_.h"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8ef5a07cafe12742eccd02cb17dd522f763dd7c0",
      "candidate_info": {
        "commit_hash": "8ef5a07cafe12742eccd02cb17dd522f763dd7c0",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/8ef5a07cafe12742eccd02cb17dd522f763dd7c0",
        "files": [
          "MagickCore/delegate.c",
          "coders/pcl.c",
          "coders/pdf.c",
          "coders/xps.c",
          "config/delegates.xml.in"
        ],
        "message": "Strengthen security with sanitized delegate properties",
        "before_after_code_files": [
          "MagickCore/delegate.c||MagickCore/delegate.c",
          "coders/pcl.c||coders/pcl.c",
          "coders/pdf.c||coders/pdf.c",
          "coders/xps.c||coders/xps.c",
          "config/delegates.xml.in||config/delegates.xml.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/delegate.c||MagickCore/delegate.c"
          ],
          "candidate": [
            "MagickCore/delegate.c||MagickCore/delegate.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/delegate.c||MagickCore/delegate.c": [
          "File: MagickCore/delegate.c -> MagickCore/delegate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: #include \"MagickCore/delegate-private.h\"",
          "58: #include \"MagickCore/exception.h\"",
          "59: #include \"MagickCore/exception-private.h\"",
          "61: #include \"MagickCore/histogram.h\"",
          "62: #include \"MagickCore/image-private.h\"",
          "63: #include \"MagickCore/linked-list.h\"",
          "",
          "[Removed Lines]",
          "60: #include \"MagickCore/fx-private.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "535: %",
          "536: %    o image: the image.",
          "537: %",
          "540: %",
          "553:     (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning, \\",
          "554:       \"NoImageForProperty\",format,arg); \\",
          "555:     return((const char *) NULL); \\",
          "556:   }",
          "557: #define WarnNoImageInfoReturn(format,arg) \\",
          "558:   if (image_info == (ImageInfo *) NULL ) { \\",
          "559:     (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning, \\",
          "560:       \"NoImageInfoForProperty\",format,arg); \\",
          "561:     return((const char *) NULL); \\",
          "562:   }",
          "564:   char",
          "570:   if ((image != (Image *) NULL) && (image->debug != MagickFalse))",
          "571:     (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);",
          "572:   else",
          "573:     if ((image_info != (ImageInfo *) NULL) &&",
          "574:         (image_info->debug != MagickFalse))",
          "575:     (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\"no-images\");",
          "",
          "[Removed Lines]",
          "538: %    o decode: Specifies the decode delegate we are searching for as a",
          "539: %      character string.",
          "541: %    o encode: Specifies the encode delegate we are searching for as a",
          "542: %      character string.",
          "543: %",
          "544: %    o exception: return any errors or warnings in this structure.",
          "545: %",
          "548: static const char *GetMagickPropertyLetter(ImageInfo *image_info,",
          "549:   Image *image,const char letter,ExceptionInfo *exception)",
          "550: {",
          "551: #define WarnNoImageReturn(format,arg) \\",
          "552:   if (image == (Image *) NULL ) { \\",
          "567:   const char",
          "",
          "[Added Lines]",
          "537: %    o decode: Specifies the decode delegate we are searching for as a",
          "538: %      character string.",
          "540: %    o encode: Specifies the encode delegate we are searching for as a",
          "541: %      character string.",
          "542: %",
          "543: %    o exception: return any errors or warnings in this structure.",
          "544: %",
          "547: static char *GetMagickPropertyLetter(ImageInfo *image_info,Image *image,",
          "548:   const char letter,ExceptionInfo *exception)",
          "549: {",
          "550: #define WarnNoImageReturn(format,letter) \\",
          "551:   if (image == (Image *) NULL) \\",
          "552:     { \\",
          "553:       (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning, \\",
          "557: #define WarnNoImageInfoReturn(format,letter) \\",
          "562:       break; \\",
          "563:     }",
          "565:   char",
          "567:     value[MagickPathExtent];",
          "569:   const char",
          "576:   static char",
          "578:       \"^-ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"",
          "581:   if ((image != (Image *) NULL) && (image->debug != MagickFalse))",
          "585:         (image_info->debug != MagickFalse))",
          "586:       (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\"no-images\");",
          "588:     Get properties that are directly defined by images.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "581:   switch (letter)",
          "582:   {",
          "591:       break;",
          "592:     }",
          "594:     {",
          "596:       string=GetImageProperty(image,\"comment\",exception);",
          "597:       if ( string == (const char *) NULL )",
          "598:         string=\"\";",
          "599:       break;",
          "600:     }",
          "603:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "604:       GetPathComponent(image->magick_filename,HeadPath,value);",
          "605:       if (*value == '\\0') string=\"\";",
          "606:       break;",
          "607:     }",
          "610:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "611:       GetPathComponent(image->magick_filename,ExtensionPath,value);",
          "612:       if (*value == '\\0') string=\"\";",
          "",
          "[Removed Lines]",
          "584:     {",
          "585:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "586:       (void) FormatMagickSize(image->extent,MagickFalse,\"B\",MagickPathExtent,",
          "587:         value);",
          "588:       if (image->extent == 0)",
          "589:         (void) FormatMagickSize(GetBlobSize(image),MagickFalse,\"B\",",
          "590:           MagickPathExtent,value);",
          "595:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "602:     {",
          "609:     {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "631:     {",
          "632:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "633:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "651:       break;",
          "652:     }",
          "",
          "[Removed Lines]",
          "634:         (image->rows != 0 ? image->rows : image->magick_rows));",
          "635:       break;",
          "636:     }",
          "638:     {",
          "639:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "640:       string=image->filename;",
          "641:       break;",
          "642:     }",
          "644:     {",
          "646:         FUTURE: ensure this does not generate the formatted comment!",
          "648:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "649:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "650:         GetNumberColors(image,(FILE *) NULL,exception));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "656:       string=GetImageProperty(image,\"label\",exception);",
          "657:       if ( string == (const char *) NULL)",
          "658:         string=\"\";",
          "660:     }",
          "664:       string=image->magick;",
          "665:       break;",
          "666:     }",
          "668:     {",
          "669:       if ( image != (Image *) NULL )",
          "670:         (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "671:           GetImageListLength(image));",
          "672:       else",
          "",
          "[Removed Lines]",
          "659:       break;",
          "662:     {",
          "663:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "",
          "[Added Lines]",
          "647:       break;",
          "653:       break;",
          "657:       if (image != (Image *) NULL)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "699:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "700:       colorspace=image->colorspace;",
          "701:       if (SetImageGray(image,exception) != MagickFalse)",
          "713:       if (image_info->number_scenes != 0)",
          "716:       else if (image != (Image *) NULL)",
          "717:         (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "718:           image->scene);",
          "719:       else",
          "720:           string=\"0\";",
          "721: #else",
          "723:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "724:          image->scene);",
          "725: #endif",
          "726:       break;",
          "727:     }",
          "729:     {",
          "730:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "731:       GetPathComponent(image->magick_filename,BasePath,value);",
          "",
          "[Removed Lines]",
          "703:       (void) FormatLocaleString(value,MagickPathExtent,\"%s %s %s\",",
          "704:         CommandOptionToMnemonic(MagickClassOptions,(ssize_t)",
          "705:         image->storage_class),CommandOptionToMnemonic(MagickColorspaceOptions,",
          "706:         (ssize_t) colorspace),image->alpha_trait != UndefinedPixelTrait ?",
          "707:         \"Alpha\" : \"\");",
          "708:       break;",
          "709:     }",
          "711:     {",
          "714:         (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "715:           image_info->scene);",
          "722:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "",
          "[Added Lines]",
          "692:         CommandOptionToMnemonic(MagickClassOptions,(ssize_t)",
          "702:         image->scene);",
          "706:     {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "777:       string=CommandOptionToMnemonic(MagickCompressOptions,",
          "778:         (ssize_t) image->compression);",
          "779:       break;",
          "793:       register char",
          "802:         Magick filename (sanitized) - filename given incl. coder & read mods.",
          "804:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "805:       (void) CopyMagickString(value,image->magick_filename,MagickPathExtent);",
          "807:       q=value+strlen(value);",
          "808:       for (p+=strspn(p,whitelist); p != q; p+=strspn(p,whitelist))",
          "",
          "[Removed Lines]",
          "780:     }",
          "782:     {",
          "783:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "784:       string=CommandOptionToMnemonic(MagickDisposeOptions,",
          "785:         (ssize_t) image->dispose);",
          "786:       break;",
          "787:     }",
          "788:     case 'F':",
          "789:     {",
          "790:       const char",
          "796:       static char",
          "797:         whitelist[] =",
          "798:           \"^-ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"",
          "799:           \"+&@#/%?=~_|!:,.;()\";",
          "806:       p=value;",
          "",
          "[Added Lines]",
          "769:         Magick filename - filename given incl. coder & read mods.",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "843:         (double) image->page.width,(double) image->page.height);",
          "844:       break;",
          "845:     }",
          "855:       WarnNoImageInfoReturn(\"\\\"%%%c\\\"\",letter);",
          "857:       if (image_info->number_scenes == 0)",
          "859:       else if ( image != (Image *) NULL )",
          "860:         (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "861:                 image_info->scene+image_info->number_scenes);",
          "",
          "[Removed Lines]",
          "847:     {",
          "848:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "849:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "850:         (image->quality == 0 ? 92 : image->quality));",
          "851:       break;",
          "852:     }",
          "854:     {",
          "858:          string=\"2147483647\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "894:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "895:       (void) FormatLocaleString(value,MagickPathExtent,\"%+.20g\",(double)",
          "896:         image->page.x);",
          "897:       break;",
          "898:     }",
          "900:     {",
          "901:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "902:       (void) FormatLocaleString(value,MagickPathExtent,\"%+.20g\",(double)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "850:       break;",
          "853:     {",
          "854:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "905:     }",
          "907:       string=\"%\";",
          "910:     {",
          "911:       RectangleInfo",
          "",
          "[Removed Lines]",
          "908:       break;",
          "",
          "[Added Lines]",
          "863:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "919:       break;",
          "920:     }",
          "921:     case '#':",
          "941:           (void) SetImageArtifact(image,\"get-property\",value);",
          "942:           return(GetImageArtifact(image,\"get-property\"));",
          "943:         }",
          "",
          "[Removed Lines]",
          "922:     {",
          "924:         Image signature.",
          "926:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "927:       (void) SignatureImage(image,exception);",
          "928:       string=GetImageProperty(image,\"signature\",exception);",
          "929:       break;",
          "930:     }",
          "931:   }",
          "932:   if (string != (char *) NULL)",
          "933:     return(string);",
          "934:   if (*value != '\\0')",
          "935:     {",
          "937:         Create a cloned copy of result.",
          "939:       if (image != (Image *) NULL)",
          "940:         {",
          "",
          "[Added Lines]",
          "879:         Image signature.",
          "881:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "882:       (void) SignatureImage(image,exception);",
          "883:       string=GetImageProperty(image,\"signature\",exception);",
          "884:       break;",
          "885:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1023:   assert(image_info == NULL || image_info->signature == MagickCoreSignature);",
          "1024:   if ((image != (Image *) NULL) && (image->debug != MagickFalse))",
          "1025:     (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);",
          "1043:           errno=EPERM;",
          "1044:           (void) ThrowMagickException(exception,GetMagickModule(),PolicyError,",
          "1045:             \"NotAuthorized\",\"`%s'\",p);",
          "1046:           return(ConstantString(\"\"));",
          "1047:         }",
          "1048:       interpret_text=FileToString(p+1,~0UL,exception);",
          "1049:       if (interpret_text != (char *) NULL)",
          "1050:         return(interpret_text);",
          "1051:     }",
          "1054:     Translate any embedded format characters.",
          "",
          "[Removed Lines]",
          "1026:   else",
          "1027:    if ((image_info != (ImageInfo *) NULL) && (image_info->debug != MagickFalse))",
          "1028:      (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\"no-image\");",
          "1029:   if (embed_text == (const char *) NULL)",
          "1030:     return(ConstantString(\"\"));",
          "1031:   p=embed_text;",
          "1032:   while ((isspace((int) ((unsigned char) *p)) != 0) && (*p != '\\0'))",
          "1033:     p++;",
          "1034:   if (*p == '\\0')",
          "1035:     return(ConstantString(\"\"));",
          "1036:   if ((*p == '@') && (IsPathAccessible(p+1) != MagickFalse))",
          "1037:     {",
          "1039:         Handle a '@' replace string from file.",
          "1041:       if (IsRightsAuthorized(PathPolicyDomain,ReadPolicyRights,p) == MagickFalse)",
          "1042:         {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1140:       Doubled Percent - or percent at end of string.",
          "1143:       p--;",
          "1168:           {",
          "1169:             AppendString2Text(string);",
          "1213:             pattern[len++]=(*p++);",
          "1503:       if (len >= 64)",
          "1504:         {",
          "",
          "[Removed Lines]",
          "1142:     if ((*p == '\\0') || (*p == '\\'') || (*p == '\"'))",
          "1144:     if (*p == '%')",
          "1145:       {",
          "1147:         continue;",
          "1148:       }",
          "1150:       Single letter escapes %c.",
          "1152:     if (*p != '[')",
          "1153:       {",
          "1154:         const char",
          "1157:         if (number != MagickFalse)",
          "1158:           {",
          "1160:               But only if not preceeded by a number!",
          "1164:             continue;",
          "1165:           }",
          "1166:         string=GetMagickPropertyLetter(image_info,image,*p, exception);",
          "1167:         if (string != (char *) NULL)",
          "1170:             if (image != (Image *) NULL)",
          "1171:               (void) DeleteImageArtifact(image,\"get-property\");",
          "1172:             if (image_info != (ImageInfo *) NULL)",
          "1173:               (void) DeleteImageOption(image_info,\"get-property\");",
          "1174:             continue;",
          "1175:           }",
          "1176:         (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning,",
          "1177:           \"UnknownImageProperty\",\"\\\"%%%c\\\"\",*p);",
          "1178:         continue;",
          "1179:       }",
          "1180:     {",
          "1181:       char",
          "1182:         pattern[2*MagickPathExtent];",
          "1184:       const char",
          "1188:       register ssize_t",
          "1189:         len;",
          "1191:       ssize_t",
          "1192:         depth;",
          "1195:         Braced Percent Escape %[...].",
          "1198:       depth=1;",
          "1199:       if (*p == ']')",
          "1200:         {",
          "1201:           (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning,",
          "1202:             \"UnknownImageProperty\",\"\\\"%%[]\\\"\");",
          "1203:           break;",
          "1204:         }",
          "1205:       for (len=0; len<(MagickPathExtent-1L) && (*p != '\\0');)",
          "1206:       {",
          "1207:         if ((*p == '\\\\') && (*(p+1) != '\\0'))",
          "1208:           {",
          "1210:               Skip escaped braces within braced pattern.",
          "1212:             pattern[len++]=(*p++);",
          "1214:             continue;",
          "1215:           }",
          "1216:         if (*p == '[')",
          "1217:           depth++;",
          "1218:         if (*p == ']')",
          "1219:           depth--;",
          "1220:         if (depth <= 0)",
          "1221:           break;",
          "1222:         pattern[len++]=(*p++);",
          "1223:       }",
          "1224:       pattern[len]='\\0';",
          "1225:       if (depth != 0)",
          "1226:         {",
          "1228:             Check for unmatched final ']' for \"%[...]\".",
          "1230:           if (len >= 64)",
          "1231:             {",
          "1233:               pattern[62] = '.';",
          "1234:               pattern[63] = '.';",
          "1235:               pattern[64] = '\\0';",
          "1236:             }",
          "1237:           (void) ThrowMagickException(exception,GetMagickModule(),",
          "1238:             OptionError,\"UnbalancedBraces\",\"\\\"%%[%s\\\"\",pattern);",
          "1239:           interpret_text=DestroyString(interpret_text);",
          "1240:           return((char *) NULL);",
          "1241:         }",
          "1243:         Special Lookup Prefixes %[prefix:...].",
          "1245:       if (LocaleNCompare(\"fx:\",pattern,3) == 0)",
          "1246:         {",
          "1247:           FxInfo",
          "1250:           double",
          "1251:             value;",
          "1253:           MagickBooleanType",
          "1254:             status;",
          "1257:             FX - value calculator.",
          "1259:           if (image == (Image *) NULL )",
          "1260:             {",
          "1261:               (void) ThrowMagickException(exception,GetMagickModule(),",
          "1262:                 OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "1264:             }",
          "1265:           fx_info=AcquireFxInfo(image,pattern+3,exception);",
          "1266:           status=FxEvaluateChannelExpression(fx_info,IntensityPixelChannel,0,0,",
          "1267:             &value,exception);",
          "1268:           fx_info=DestroyFxInfo(fx_info);",
          "1269:           if (status != MagickFalse)",
          "1270:             {",
          "1271:               char",
          "1272:                 result[MagickPathExtent];",
          "1274:               (void) FormatLocaleString(result,MagickPathExtent,\"%.*g\",",
          "1275:                 GetMagickPrecision(),(double) value);",
          "1276:               AppendString2Text(result);",
          "1277:             }",
          "1278:           continue;",
          "1279:         }",
          "1280:       if (LocaleNCompare(\"pixel:\",pattern,6) == 0)",
          "1281:         {",
          "1282:           FxInfo",
          "1285:           double",
          "1286:             value;",
          "1288:           MagickStatusType",
          "1289:             status;",
          "1291:           PixelInfo",
          "1292:             pixel;",
          "1295:             Pixel - color value calculator.",
          "1297:           if (image == (Image *) NULL)",
          "1298:             {",
          "1299:               (void) ThrowMagickException(exception,GetMagickModule(),",
          "1300:                 OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "1302:             }",
          "1303:           GetPixelInfo(image,&pixel);",
          "1304:           fx_info=AcquireFxInfo(image,pattern+6,exception);",
          "1305:           status=FxEvaluateChannelExpression(fx_info,RedPixelChannel,0,0,",
          "1306:             &value,exception);",
          "1307:           pixel.red=(double) QuantumRange*value;",
          "1308:           status&=FxEvaluateChannelExpression(fx_info,GreenPixelChannel,0,0,",
          "1309:             &value,exception);",
          "1310:           pixel.green=(double) QuantumRange*value;",
          "1311:           status&=FxEvaluateChannelExpression(fx_info,BluePixelChannel,0,0,",
          "1312:             &value,exception);",
          "1313:           pixel.blue=(double) QuantumRange*value;",
          "1314:           if (image->colorspace == CMYKColorspace)",
          "1315:             {",
          "1316:               status&=FxEvaluateChannelExpression(fx_info,BlackPixelChannel,0,0,",
          "1317:                 &value,exception);",
          "1318:               pixel.black=(double) QuantumRange*value;",
          "1319:             }",
          "1320:           status&=FxEvaluateChannelExpression(fx_info,AlphaPixelChannel,0,0,",
          "1321:             &value,exception);",
          "1322:           pixel.alpha=(double) QuantumRange*value;",
          "1323:           fx_info=DestroyFxInfo(fx_info);",
          "1324:           if (status != MagickFalse)",
          "1325:             {",
          "1326:               char",
          "1327:                 name[MagickPathExtent];",
          "1329:               (void) QueryColorname(image,&pixel,SVGCompliance,name,",
          "1330:                 exception);",
          "1331:               AppendString2Text(name);",
          "1332:             }",
          "1333:           continue;",
          "1334:         }",
          "1335:       if (LocaleNCompare(\"option:\",pattern,7) == 0)",
          "1336:         {",
          "1338:             Option - direct global option lookup (with globbing).",
          "1340:           if (image_info == (ImageInfo *) NULL )",
          "1341:             {",
          "1342:               (void) ThrowMagickException(exception,GetMagickModule(),",
          "1343:                 OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "1345:             }",
          "1346:           if (IsGlob(pattern+7) != MagickFalse)",
          "1347:             {",
          "1348:               ResetImageOptionIterator(image_info);",
          "1349:               while ((key=GetNextImageOption(image_info)) != (const char *) NULL)",
          "1350:                 if (GlobExpression(key,pattern+7,MagickTrue) != MagickFalse)",
          "1351:                   {",
          "1352:                     string=GetImageOption(image_info,key);",
          "1353:                     if (string != (const char *) NULL)",
          "1354:                       AppendKeyValue2Text(key,string);",
          "1356:                   }",
          "1357:               continue;",
          "1358:             }",
          "1359:           string=GetImageOption(image_info,pattern+7);",
          "1360:           if (string == (char *) NULL)",
          "1362:           AppendString2Text(string);",
          "1363:           continue;",
          "1364:         }",
          "1365:       if (LocaleNCompare(\"artifact:\",pattern,9) == 0)",
          "1366:         {",
          "1368:             Artifact - direct image artifact lookup (with glob).",
          "1370:           if (image == (Image *) NULL)",
          "1371:             {",
          "1372:               (void) ThrowMagickException(exception,GetMagickModule(),",
          "1373:                 OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "1375:             }",
          "1376:           if (IsGlob(pattern+9) != MagickFalse)",
          "1377:             {",
          "1378:               ResetImageArtifactIterator(image);",
          "1379:               while ((key=GetNextImageArtifact(image)) != (const char *) NULL)",
          "1380:               if (GlobExpression(key,pattern+9,MagickTrue) != MagickFalse)",
          "1381:                 {",
          "1382:                   string=GetImageArtifact(image,key);",
          "1383:                   if (string != (const char *) NULL)",
          "1384:                     AppendKeyValue2Text(key,string);",
          "1386:                 }",
          "1387:               continue;",
          "1388:             }",
          "1389:           string=GetImageArtifact(image,pattern+9);",
          "1390:           if (string == (char *) NULL)",
          "1392:           AppendString2Text(string);",
          "1393:           continue;",
          "1394:         }",
          "1395:       if (LocaleNCompare(\"property:\",pattern,9) == 0)",
          "1396:         {",
          "1398:             Property - direct image property lookup (with glob).",
          "1400:           if (image == (Image *) NULL)",
          "1401:             {",
          "1402:               (void) ThrowMagickException(exception,GetMagickModule(),",
          "1403:                 OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "1405:             }",
          "1406:           if (IsGlob(pattern+9) != MagickFalse)",
          "1407:             {",
          "1408:               ResetImagePropertyIterator(image);",
          "1409:               while ((key=GetNextImageProperty(image)) != (const char *) NULL)",
          "1410:                 if (GlobExpression(key,pattern,MagickTrue) != MagickFalse)",
          "1411:                   {",
          "1412:                     string=GetImageProperty(image,key,exception);",
          "1413:                     if (string != (const char *) NULL)",
          "1414:                       AppendKeyValue2Text(key,string);",
          "1416:                   }",
          "1417:               continue;",
          "1418:             }",
          "1419:           string=GetImageProperty(image,pattern+9,exception);",
          "1420:           if (string == (char *) NULL)",
          "1422:           AppendString2Text(string);",
          "1423:           continue;",
          "1424:         }",
          "1425:       if (image != (Image *) NULL)",
          "1426:         {",
          "1428:             Properties without special prefix.  This handles attributes,",
          "1429:             properties, and profiles such as %[exif:...].  Note the profile",
          "1430:             properties may also include a glob expansion pattern.",
          "1432:           string=GetImageProperty(image,pattern,exception);",
          "1433:           if (string != (const char *) NULL)",
          "1434:             {",
          "1435:               AppendString2Text(string);",
          "1436:               if (image != (Image *) NULL)",
          "1437:                 (void)DeleteImageArtifact(image,\"get-property\");",
          "1438:               if (image_info != (ImageInfo *) NULL)",
          "1439:                 (void)DeleteImageOption(image_info,\"get-property\");",
          "1440:               continue;",
          "1441:             }",
          "1442:         }",
          "1443:       if (IsGlob(pattern) != MagickFalse)",
          "1444:         {",
          "1446:             Handle property 'glob' patterns such as:",
          "1447:             %[*] %[user:array_??] %[filename:e*]>",
          "1449:           if (image == (Image *) NULL)",
          "1451:           ResetImagePropertyIterator(image);",
          "1452:           while ((key=GetNextImageProperty(image)) != (const char *) NULL)",
          "1453:             if (GlobExpression(key,pattern,MagickTrue) != MagickFalse)",
          "1454:               {",
          "1455:                 string=GetImageProperty(image,key,exception);",
          "1456:                 if (string != (const char *) NULL)",
          "1457:                   AppendKeyValue2Text(key,string);",
          "1459:               }",
          "1460:           continue;",
          "1461:         }",
          "1463:         Look for a known property or image attribute such as",
          "1464:         %[basename] %[denisty] %[delay].  Also handles a braced single",
          "1465:         letter: %[b] %[G] %[g].",
          "1467:       string=GetMagickProperty(image_info,image,pattern,exception);",
          "1468:       if (string != (const char *) NULL)",
          "1469:         {",
          "1470:           AppendString2Text(string);",
          "1471:           continue;",
          "1472:         }",
          "1474:         Look for a per-image artifact. This includes option lookup",
          "1475:         (FUTURE: interpreted according to image).",
          "1477:       if (image != (Image *) NULL)",
          "1478:         {",
          "1479:           string=GetImageArtifact(image,pattern);",
          "1480:           if (string != (char *) NULL)",
          "1481:             {",
          "1482:               AppendString2Text(string);",
          "1483:               continue;",
          "1484:             }",
          "1485:         }",
          "1486:       else",
          "1487:         if (image_info != (ImageInfo *) NULL)",
          "1488:           {",
          "1490:               No image, so direct 'option' lookup (no delayed percent escapes).",
          "1492:             string=GetImageOption(image_info,pattern);",
          "1493:             if (string != (char *) NULL)",
          "1494:               {",
          "1495:                 AppendString2Text(string);",
          "1496:                 continue;",
          "1497:               }",
          "1498:           }",
          "1499: PropertyLookupFailure:",
          "1501:         Failed to find any match anywhere!",
          "",
          "[Added Lines]",
          "1071:     if ((*p == '\\0') || (*p == '\\'') || (*p == '\"'))",
          "1074:       {",
          "1076:         continue;",
          "1077:       }",
          "1081:     if (number != MagickFalse)",
          "1084:           But only if not preceeded by a number!",
          "1088:         continue;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2307:     if (LocaleCompare(decode,\"SCAN\") != 0)",
          "2308:       {",
          "2309:         if (CopyDelegateFile(image->filename,input_filename,MagickFalse) == MagickFalse)",
          "2311:       }",
          "2312:     if ((strcmp(input_filename,output_filename) != 0) &&",
          "2313:         (CopyDelegateFile(image_info->filename,output_filename,MagickTrue) == MagickFalse))",
          "",
          "[Removed Lines]",
          "2310:           (void) RelinquishUniqueFileResource(input_filename);",
          "",
          "[Added Lines]",
          "1896:           (void) RelinquishUniqueFileResource(input_filename);",
          "1897:       }",
          "",
          "---------------"
        ],
        "coders/pcl.c||coders/pcl.c": [
          "File: coders/pcl.c -> coders/pcl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:         (void) FormatLocaleString(options,MagickPathExtent,",
          "352:           \"-dFirstPage=%.20g -dLastPage=%.20g\",(double) read_info->scene+1,",
          "353:           (double) (read_info->scene+read_info->number_scenes));",
          "358:   option=GetImageOption(image_info,\"authenticate\");",
          "359:   if (option != (const char *) NULL)",
          "360:     (void) FormatLocaleString(options+strlen(options),MagickPathExtent,",
          "",
          "[Removed Lines]",
          "354:       read_info->number_scenes=0;",
          "355:       if (read_info->scenes != (char *) NULL)",
          "357:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "coders/pdf.c||coders/pdf.c": [
          "File: coders/pdf.c -> coders/pdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:       (void) FormatLocaleString(pages,MagickPathExtent,\"-dFirstPage=%.20g \"",
          "738:         \"-dLastPage=%.20g\",(double) read_info->scene+1,(double)",
          "744:     }",
          "745:   option=GetImageOption(image_info,\"authenticate\");",
          "",
          "[Removed Lines]",
          "739:         (read_info->scene+read_info->number_scenes));",
          "740:       (void) ConcatenateMagickString(options,pages,MagickPathExtent);",
          "741:       read_info->number_scenes=0;",
          "742:       if (read_info->scenes != (char *) NULL)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "coders/xps.c||coders/xps.c": [
          "File: coders/xps.c -> coders/xps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:           (double) (read_info->scene+read_info->number_scenes));",
          "306:       read_info->number_scenes=0;",
          "307:       if (read_info->scenes != (char *) NULL)",
          "312:     (void) FormatLocaleString(options+strlen(options),MagickPathExtent,",
          "313:       \" -sXPSPassword=\\'%s\\'\",option);",
          "314:   (void) CopyMagickString(filename,read_info->filename,MagickPathExtent);",
          "",
          "[Removed Lines]",
          "309:     }",
          "310:   option=GetImageOption(image_info,\"authenticate\");",
          "311:   if (option != (const char *) NULL)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "config/delegates.xml.in||config/delegates.xml.in": [
          "File: config/delegates.xml.in -> config/delegates.xml.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   For delegates other than ps:*, pcl:*, and mpeg:* the substitution rules are",
          "38:   as follows:",
          "45:     %g  image geometry",
          "46:     %h  image rows (height)",
          "48:     %m  input image format",
          "49:     %p  page number",
          "50:     %q  input image depth",
          "51:     %s  scene number",
          "52:     %w  image columns (width)",
          "53:     %x  input image x resolution",
          "54:     %y  input image y resolution",
          "57:   Set option delegate:bimodal=true to process bimodal delegates otherwise they",
          "58:   are ignored.",
          "",
          "[Removed Lines]",
          "40:     %i  input image filename",
          "41:     %o  output image filename",
          "42:     %u  unique temporary filename",
          "43:     %#  input image signature",
          "44:     %b  image file size",
          "47:     %k  input image number colors",
          "55:     %F  sanitized original input filename",
          "",
          "[Added Lines]",
          "40:     %a  authentication passphrase",
          "41:     %b  image file size in bytes",
          "44:     %i  input image filename",
          "45:     %#  input image signature",
          "47:     %o  output image filename",
          "51:     %u  unique temporary filename",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:   <delegate decode=\"browse\" stealth=\"True\" spawn=\"True\" command=\"&quot;@BrowseDelegate@&quot; http://www.imagemagick.org/; @RMDelegate@ &quot;%i&quot;\"/>",
          "71:   <delegate decode=\"cdr\" command=\"&quot;@UniconvertorDelegate@&quot; &quot;%i&quot; &quot;%o.svg&quot;; @MVDelegate@ &quot;%o.svg&quot; &quot;%o&quot;\"/>",
          "72:   <delegate decode=\"cgm\" command=\"&quot;@UniconvertorDelegate@&quot; &quot;%i&quot; &quot;%o.svg&quot;; @MVDelegate@ &quot;%o.svg&quot; &quot;%o&quot;\"/>",
          "76:   <delegate decode=\"doc\" command=\"&quot;@DOCDecodeDelegate@&quot; --convert-to pdf -outdir `dirname &quot;%i&quot;` &quot;%i&quot; 2&gt; &quot;%u&quot;; @MVDelegate@ &quot;%i.pdf&quot; &quot;%o&quot;\"/>",
          "77:   <delegate decode=\"docx\" command=\"&quot;@DOCDecodeDelegate@&quot; --convert-to pdf -outdir `dirname &quot;%i&quot;` &quot;%i&quot; 2&gt; &quot;%u&quot;; @MVDelegate@ &quot;%i.pdf&quot; &quot;%o&quot;\"/>",
          "78:   <delegate decode=\"dng:decode\" command=\"&quot;@DNGDecodeDelegate@&quot; --silent --create-id=also --out-type=png --out-depth=16 &quot;--output=%u.png&quot; &quot;%i&quot;\"/>",
          "",
          "[Removed Lines]",
          "73:   <!--",
          "74:     <delegate decode=\"https\" command=\"&quot;@WWWDecodeDelegate@&quot; -s -k -L -o &quot;%o&quot; &quot;https:%F&quot;\"/>",
          "75:   -->",
          "",
          "[Added Lines]",
          "72:   <delegate decode=\"https\" command=\"&quot;@WWWDecodeDelegate@&quot; -s -k -L -o &quot;%o&quot; &quot;https:%M&quot;\"/>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:   <delegate decode=\"html\" command=\"&quot;@HTMLDecodeDelegate@&quot; -U -o &quot;%o&quot; &quot;%i&quot;\"/>",
          "90:   <delegate decode=\"ilbm\" command=\"&quot;@ILBMDecodeDelegate@&quot; &quot;%i&quot; &gt; &quot;%o&quot;\"/>",
          "91:   <delegate decode=\"jxr\" command=\"@MVDelegate@ &quot;%i&quot; &quot;%i.jxr&quot;; &quot;@JXRDecodeDelegate@&quot; -i &quot;%i.jxr&quot; -o &quot;%o.pnm&quot;; @MVDelegate@ &quot;%i.jxr&quot; &quot;%i&quot;; @MVDelegate@ &quot;%o.pnm&quot; &quot;%o&quot;\"/>",
          "94:   <delegate decode=\"mpeg:decode\" command=\"&quot;@MPEGDecodeDelegate@&quot; -nostdin -v -1 -i &quot;%i&quot; -vframes %S -vcodec pam -an -f rawvideo -y &quot;%u.pam&quot; 2&gt; &quot;%u&quot;\"/>",
          "95:   <delegate decode=\"odt\" command=\"&quot;@DOCDecodeDelegate@&quot; --convert-to pdf -outdir `dirname &quot;%i&quot;` &quot;%i&quot; 2&gt; &quot;%u&quot;; @MVDelegate@ &quot;%i.pdf&quot; &quot;%o&quot;\"/>",
          "96:   <delegate decode=\"pcl:cmyk\" stealth=\"True\" command=\"&quot;@PCLDelegate@&quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &quot;-sDEVICE=@PCLCMYKDevice@&quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &quot;-r%s&quot; %s &quot;-sOutputFile=%s&quot; &quot;%s&quot;\"/>",
          "97:   <delegate decode=\"pcl:color\" stealth=\"True\" command=\"&quot;@PCLDelegate@&quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &quot;-sDEVICE=@PCLColorDevice@&quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &quot;-r%s&quot; %s &quot;-sOutputFile=%s&quot; &quot;%s&quot;\"/>",
          "98:   <delegate decode=\"pcl:mono\" stealth=\"True\" command=\"&quot;@PCLDelegate@&quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &quot;-sDEVICE=@PCLMonoDevice@&quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &quot;-r%s&quot; %s &quot;-sOutputFile=%s&quot; &quot;%s&quot;\"/>",
          "101:   <delegate decode=\"png\" encode=\"webp\" command=\"&quot;@WebPEncodeDelegate@&quot; -quiet -q %Q &quot;%i&quot; -o &quot;%o&quot;\"/>",
          "102:   <delegate decode=\"pnm\" encode=\"ilbm\" mode=\"encode\" command=\"&quot;@ILBMEncodeDelegate@&quot; -24if &quot;%i&quot; &gt; &quot;%o&quot;\"/>",
          "103:   <delegate decode=\"bmp\" encode=\"jxr\" command=\"@MVDelegate@ &quot;%i&quot; &quot;%i.bmp&quot;; &quot;@JXREncodeDelegate@&quot; -i &quot;%i.bmp&quot; -o &quot;%o.jxr&quot;; @MVDelegate@ &quot;%i.bmp&quot; &quot;%i&quot;; @MVDelegate@ &quot;%o.jxr&quot; &quot;%o&quot;\"/>",
          "",
          "[Removed Lines]",
          "92:   <delegate decode=\"miff\" encode=\"show\" spawn=\"True\" command=\"&quot;@DisplayDelegate@&quot; display -immutable -delay 0 -title &quot;%F&quot; &quot;%i&quot;\"/>",
          "93:   <delegate decode=\"miff\" encode=\"win\" stealth=\"True\" spawn=\"True\" command=\"&quot;@DisplayDelegate@&quot; display -immutable -delay 0 -title &quot;%F&quot; &quot;%i&quot;\"/>",
          "99:   <delegate decode=\"pdf\" encode=\"eps\" mode=\"bi\" command=\"&quot;@PSDelegate@&quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &quot;-sDEVICE=@GSEPSDevice@&quot; &quot;-sOutputFile=%o&quot; &quot;-f%i&quot;\"/>",
          "100:   <delegate decode=\"pdf\" encode=\"ps\" mode=\"bi\" command=\"&quot;@PSDelegate@&quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &quot;-sDEVICE=@GSPSDevice@&quot; &quot;-sOutputFile=%o&quot; &quot;-f%i&quot;\"/>",
          "",
          "[Added Lines]",
          "89:   <delegate decode=\"miff\" encode=\"show\" spawn=\"True\" command=\"&quot;@DisplayDelegate@&quot; display -immutable -delay 0 -title &quot;%M&quot; &quot;%i&quot;\"/>",
          "90:   <delegate decode=\"miff\" encode=\"win\" stealth=\"True\" spawn=\"True\" command=\"&quot;@DisplayDelegate@&quot; display -immutable -delay 0 -title &quot;%M&quot; &quot;%i&quot;\"/>",
          "96:   <delegate decode=\"pdf\" encode=\"eps\" mode=\"bi\" command=\"&quot;@PSDelegate@&quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 -sPDFPassword=&quot;%a&quot; &quot;-sDEVICE=@GSEPSDevice@&quot; &quot;-sOutputFile=%o&quot; &quot;-f%i&quot;\"/>",
          "97:   <delegate decode=\"pdf\" encode=\"ps\" mode=\"bi\" command=\"&quot;@PSDelegate@&quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &quot;-sDEVICE=@GSPSDevice@&quot; -sPDFPassword=&quot;%a&quot; &quot;-sOutputFile=%o&quot; &quot;-f%i&quot;\"/>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "123:   <delegate decode=\"xps:cmyk\" stealth=\"True\" command=\"&quot;@XPSDelegate@&quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &quot;-sDEVICE=@XPSCMYKDevice@&quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &quot;-r%s&quot; %s &quot;-sOutputFile=%s&quot; &quot;%s&quot;\"/>",
          "124:   <delegate decode=\"xps:color\" stealth=\"True\" command=\"&quot;@XPSDelegate@&quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &quot;-sDEVICE=@XPSColorDevice@&quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &quot;-r%s&quot; %s &quot;-sOutputFile=%s&quot; &quot;%s&quot;\"/>",
          "125:   <delegate decode=\"xps:mono\" stealth=\"True\" command=\"&quot;@XPSDelegate@&quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &quot;-sDEVICE=@XPSMonoDevice@&quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &quot;-r%s&quot; %s &quot;-sOutputFile=%s&quot; &quot;%s&quot;\"/>",
          "127: </delegatemap>",
          "",
          "[Removed Lines]",
          "126:   <delegate encode=\"mpeg:encode\" stealth=\"True\" command=\"&quot;@MPEGEncodeDelegate@&quot; -nostdin -v -1 -i &quot;%F%%d.jpg&quot; &quot;%u.%m&quot; 2&gt; &quot;%u&quot;\"/>",
          "",
          "[Added Lines]",
          "123:   <delegate encode=\"mpeg:encode\" stealth=\"True\" command=\"&quot;@MPEGEncodeDelegate@&quot; -nostdin -v -1 -i &quot;%M%%d.jpg&quot; &quot;%u.%m&quot; 2&gt; &quot;%u&quot;\"/>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa589d6096099562cbc2bc14e508931968a8c055",
      "candidate_info": {
        "commit_hash": "fa589d6096099562cbc2bc14e508931968a8c055",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/fa589d6096099562cbc2bc14e508931968a8c055",
        "files": [
          "Magick++/lib/Magick++/Include.h",
          "MagickCore/annotate.c",
          "MagickCore/attribute.c",
          "MagickCore/blob.c",
          "MagickCore/cache.c",
          "MagickCore/coder.c",
          "MagickCore/color.c",
          "MagickCore/compare.c",
          "MagickCore/composite.c",
          "MagickCore/configure.c",
          "MagickCore/constitute.c",
          "MagickCore/exception-private.h",
          "MagickWand/magick-wand-private.h",
          "coders/dpx.c",
          "coders/xtrn.c"
        ],
        "message": "Fixed various warnings reported by Visual Studio 2015",
        "before_after_code_files": [
          "Magick++/lib/Magick++/Include.h||Magick++/lib/Magick++/Include.h",
          "MagickCore/annotate.c||MagickCore/annotate.c",
          "MagickCore/attribute.c||MagickCore/attribute.c",
          "MagickCore/blob.c||MagickCore/blob.c",
          "MagickCore/cache.c||MagickCore/cache.c",
          "MagickCore/coder.c||MagickCore/coder.c",
          "MagickCore/color.c||MagickCore/color.c",
          "MagickCore/compare.c||MagickCore/compare.c",
          "MagickCore/composite.c||MagickCore/composite.c",
          "MagickCore/configure.c||MagickCore/configure.c",
          "MagickCore/constitute.c||MagickCore/constitute.c",
          "MagickCore/exception-private.h||MagickCore/exception-private.h",
          "MagickWand/magick-wand-private.h||MagickWand/magick-wand-private.h",
          "coders/dpx.c||coders/dpx.c",
          "coders/xtrn.c||coders/xtrn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/blob.c||MagickCore/blob.c"
          ],
          "candidate": [
            "MagickCore/blob.c||MagickCore/blob.c"
          ]
        }
      },
      "candidate_diff": {
        "Magick++/lib/Magick++/Include.h||Magick++/lib/Magick++/Include.h": [
          "File: Magick++/lib/Magick++/Include.h -> Magick++/lib/Magick++/Include.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: #    if defined(_VISUALC_)",
          "71: #      define MagickDLLExplicitTemplate",
          "73: #      pragma warning( disable: 4251 )",
          "74: #    endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: #      pragma warning( disable: 4275 )",
          "",
          "---------------"
        ],
        "MagickCore/annotate.c||MagickCore/annotate.c": [
          "File: MagickCore/annotate.c -> MagickCore/annotate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1236:           ThrowBinaryException(TypeError,\"UnrecognizedFontEncoding\",encoding);",
          "1237:         }",
          "1238:     }",
          "1240:     Set text size.",
          "1242:   resolution.x=DefaultResolution;",
          "1243:   resolution.y=DefaultResolution;",
          "1245:     {",
          "1246:       GeometryInfo",
          "1247:         geometry_info;",
          "",
          "[Removed Lines]",
          "1244:   if (draw_info->density != (char *) NULL)",
          "",
          "[Added Lines]",
          "1244:   if (draw_info->density != (char *) NULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1410:       (FT_Vector *) NULL,MagickTrue);",
          "1411:     if (ft_status != 0)",
          "1412:       continue;",
          "1413:     bitmap=(FT_BitmapGlyph) glyph.image;",
          "1414:     point.x=offset->x+bitmap->left;",
          "1415:     if (bitmap->bitmap.pixel_mode == ft_pixel_mode_mono)",
          "1416:       point.x=offset->x+(origin.x >> 6);",
          "1417:     point.y=offset->y-bitmap->top;",
          "1418:     if (draw_info->render != MagickFalse)",
          "1420:         CacheView",
          "",
          "[Removed Lines]",
          "1419:       {",
          "",
          "[Added Lines]",
          "1419:       {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1467:               active=q != (Quantum *) NULL ? MagickTrue : MagickFalse;",
          "1468:             }",
          "1469:           n=y*bitmap->bitmap.pitch-1;",
          "1471:           {",
          "1473:             x_offset++;",
          "1474:             if ((x_offset < 0) || (x_offset >= (ssize_t) image->columns))",
          "1475:               {",
          "",
          "[Removed Lines]",
          "1470:           for (x=0; x < (ssize_t) bitmap->bitmap.width; x++)",
          "1472:             n++;",
          "",
          "[Added Lines]",
          "1470:           for (x=0; x < (ssize_t) bitmap->bitmap.width; x++)",
          "1472:             n++;",
          "",
          "---------------"
        ],
        "MagickCore/attribute.c||MagickCore/attribute.c": [
          "File: MagickCore/attribute.c -> MagickCore/attribute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:       pixel;",
          "187:     RectangleInfo",
          "193:     register ssize_t",
          "",
          "[Removed Lines]",
          "188:       bounding_box;",
          "190:     register const Quantum",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MagickCore/blob.c||MagickCore/blob.c": [
          "File: MagickCore/blob.c -> MagickCore/blob.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2467:       if (*type == 'w')",
          "2468:         {",
          "2469:           image->blob->type=FifoStream;",
          "2471:         }",
          "2472:     }",
          "2477:   (void) CopyMagickString(filename,image->filename,MagickPathExtent);",
          "",
          "[Removed Lines]",
          "2470:           return(MagickTrue);",
          "2474:     Open image file.",
          "",
          "[Added Lines]",
          "2470:           return(MagickTrue);",
          "2474:     Open image file.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2484:       (void) ThrowMagickException(exception,GetMagickModule(),PolicyError,",
          "2485:         \"NotAuthorized\",\"`%s'\",filename);",
          "2486:       return(MagickFalse);",
          "2488:   if ((LocaleCompare(filename,\"-\") == 0) ||",
          "2489:       ((*filename == '\\0') && (image_info->file == (FILE *) NULL)))",
          "2490:     {",
          "",
          "[Removed Lines]",
          "2487:     }",
          "",
          "[Added Lines]",
          "2487:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2493:       if (strchr(type,'b') != (char *) NULL)",
          "2494:         setmode(_fileno(image->blob->file_info.file),_O_BINARY);",
          "2495: #endif",
          "2496:       image->blob->type=StandardStream;",
          "2499:     }",
          "2500:   if (LocaleNCompare(filename,\"fd:\",3) == 0)",
          "2501:     {",
          "",
          "[Removed Lines]",
          "2497:       image->blob->exempt=MagickTrue;",
          "2498:       return(SetStreamBuffering(image_info,image));",
          "",
          "[Added Lines]",
          "2497:       image->blob->exempt=MagickTrue;",
          "2498:       return(SetStreamBuffering(image_info,image));",
          "",
          "---------------"
        ],
        "MagickCore/cache.c||MagickCore/cache.c": [
          "File: MagickCore/cache.c -> MagickCore/cache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3696: MagickExport MagickBooleanType PersistPixelCache(Image *image,",
          "3697:   const char *filename,const MagickBooleanType attach,MagickOffsetType *offset,",
          "3698:   ExceptionInfo *exception)",
          "3704:   Image",
          "3707:   MagickBooleanType",
          "3708:     status;",
          "",
          "[Removed Lines]",
          "3699: {",
          "3700:   CacheInfo",
          "3705:     clone_image;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MagickCore/coder.c||MagickCore/coder.c": [
          "File: MagickCore/coder.c -> MagickCore/coder.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "885:               if (depth > 200)",
          "886:                 (void) ThrowMagickException(exception,GetMagickModule(),",
          "887:                   ConfigureError,\"IncludeNodeNestedTooDeeply\",\"`%s'\",token);",
          "890:                   char",
          "894:                   GetPathComponent(filename,HeadPath,path);",
          "895:                   if (*path != '\\0')",
          "896:                     (void) ConcatenateMagickString(path,DirectorySeparator,",
          "",
          "[Removed Lines]",
          "888:               else",
          "889:                 {",
          "891:                     path[MagickPathExtent],",
          "",
          "[Added Lines]",
          "888:               else",
          "889:                 {",
          "891:                     path[MagickPathExtent],",
          "",
          "---------------"
        ],
        "MagickCore/color.c||MagickCore/color.c": [
          "File: MagickCore/color.c -> MagickCore/color.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2059:           (void) CopyMagickString(keyword,token,MagickPathExtent);",
          "2060:           GetMagickToken(q,&q,token);",
          "2061:           if (*token != '=')",
          "2064:           if (LocaleCompare(keyword,\"file\") == 0)",
          "2066:               if (depth > 200)",
          "2068:                   ConfigureError,\"IncludeElementNestedTooDeeply\",\"`%s'\",token);",
          "2069:               else",
          "2070:                 {",
          "",
          "[Removed Lines]",
          "2062:             continue;",
          "2063:           GetMagickToken(q,&q,token);",
          "2065:             {",
          "2067:                 (void) ThrowMagickException(exception,GetMagickModule(),",
          "",
          "[Added Lines]",
          "2062:             continue;",
          "2063:           GetMagickToken(q,&q,token);",
          "2065:             {",
          "2067:                 (void) ThrowMagickException(exception,GetMagickModule(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2385:         {",
          "2386:           colorspace[i]='\\0';",
          "2387:           color->alpha_trait=BlendPixelTrait;",
          "2389:       type=ParseCommandOption(MagickColorspaceOptions,MagickFalse,colorspace);",
          "2391:         {",
          "2392:           (void) ThrowMagickException(exception,GetMagickModule(),",
          "2393:             OptionWarning,\"UnrecognizedColor\",\"`%s'\",name);",
          "2394:           return(MagickFalse);",
          "2396:       color->colorspace=(ColorspaceType) type;",
          "2397:       if (IfMagickFalse(icc_color) && (color->colorspace == RGBColorspace))",
          "2398:         {",
          "",
          "[Removed Lines]",
          "2388:         }",
          "2390:       if (type < 0)",
          "2395:         }",
          "",
          "[Added Lines]",
          "2388:         }",
          "2390:       if (type < 0)",
          "2395:         }",
          "",
          "---------------"
        ],
        "MagickCore/compare.c||MagickCore/compare.c": [
          "File: MagickCore/compare.c -> MagickCore/compare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:     register const Quantum",
          "402:     register ssize_t",
          "403:       i,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459:       p+=GetPixelChannels(image);",
          "460:       q+=GetPixelChannels(reconstruct_image);",
          "461:     }",
          "464: #endif",
          "465:     for (i=0; i <= MaxPixelChannels; i++)",
          "466:       distortion[i]+=channel_distortion[i];",
          "",
          "[Removed Lines]",
          "462: #if defined(MAGICKCORE_OPENMP_SUPPORT)",
          "463:     #pragma omp critical (MagickCore_GetAbsoluteError)",
          "",
          "[Added Lines]",
          "462: #if defined(MAGICKCORE_OPENMP_SUPPORT)",
          "463:     #pragma omp critical (MagickCore_GetAbsoluteError)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "480:   MagickBooleanType",
          "483:   register ssize_t",
          "484:     i;",
          "",
          "[Removed Lines]",
          "481:     status;",
          "",
          "[Added Lines]",
          "481:     status;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "507:     register const Quantum",
          "511:     register ssize_t",
          "512:       i,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "560:       p+=GetPixelChannels(image);",
          "561:       q+=GetPixelChannels(reconstruct_image);",
          "562:     }",
          "565: #endif",
          "566:     for (i=0; i <= MaxPixelChannels; i++)",
          "567:       distortion[i]+=channel_distortion[i];",
          "570:   image_view=DestroyCacheView(image_view);",
          "571:   for (i=0; i <= MaxPixelChannels; i++)",
          "572:     distortion[i]/=((double) columns*rows);",
          "",
          "[Removed Lines]",
          "563: #if defined(MAGICKCORE_OPENMP_SUPPORT)",
          "564:     #pragma omp critical (MagickCore_GetFuzzDistortion)",
          "568:   }",
          "569:   reconstruct_view=DestroyCacheView(reconstruct_view);",
          "",
          "[Added Lines]",
          "562: #if defined(MAGICKCORE_OPENMP_SUPPORT)",
          "563:     #pragma omp critical (MagickCore_GetFuzzDistortion)",
          "567:   }",
          "568:   reconstruct_view=DestroyCacheView(reconstruct_view);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "585:   MagickBooleanType",
          "588:   register ssize_t",
          "589:     i;",
          "",
          "[Removed Lines]",
          "586:     status;",
          "",
          "[Added Lines]",
          "585:     status;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "612:     register const Quantum",
          "616:     register ssize_t",
          "617:       i,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "665:       p+=GetPixelChannels(image);",
          "666:       q+=GetPixelChannels(reconstruct_image);",
          "667:     }",
          "670: #endif",
          "671:     for (i=0; i <= MaxPixelChannels; i++)",
          "672:       distortion[i]+=channel_distortion[i];",
          "675:   image_view=DestroyCacheView(image_view);",
          "676:   for (i=0; i <= MaxPixelChannels; i++)",
          "677:     distortion[i]/=((double) columns*rows);",
          "",
          "[Removed Lines]",
          "668: #if defined(MAGICKCORE_OPENMP_SUPPORT)",
          "669:     #pragma omp critical (MagickCore_GetMeanAbsoluteError)",
          "673:   }",
          "674:   reconstruct_view=DestroyCacheView(reconstruct_view);",
          "",
          "[Added Lines]",
          "666: #if defined(MAGICKCORE_OPENMP_SUPPORT)",
          "667:     #pragma omp critical (MagickCore_GetMeanAbsoluteError)",
          "671:   }",
          "672:   reconstruct_view=DestroyCacheView(reconstruct_view);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "785:   MagickBooleanType",
          "788:   register ssize_t",
          "789:     i;",
          "",
          "[Removed Lines]",
          "786:     status;",
          "",
          "[Added Lines]",
          "784:     status;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "812:     register const Quantum",
          "816:     register ssize_t",
          "817:       i,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "865:       p+=GetPixelChannels(image);",
          "866:       q+=GetPixelChannels(reconstruct_image);",
          "867:     }",
          "870: #endif",
          "871:     for (i=0; i <= MaxPixelChannels; i++)",
          "872:       distortion[i]+=channel_distortion[i];",
          "875:   image_view=DestroyCacheView(image_view);",
          "876:   for (i=0; i <= MaxPixelChannels; i++)",
          "877:     distortion[i]/=((double) columns*rows);",
          "",
          "[Removed Lines]",
          "868: #if defined(MAGICKCORE_OPENMP_SUPPORT)",
          "869:     #pragma omp critical (MagickCore_GetMeanSquaredError)",
          "873:   }",
          "874:   reconstruct_view=DestroyCacheView(reconstruct_view);",
          "",
          "[Added Lines]",
          "865: #if defined(MAGICKCORE_OPENMP_SUPPORT)",
          "866:     #pragma omp critical (MagickCore_GetMeanSquaredError)",
          "870:   }",
          "871:   reconstruct_view=DestroyCacheView(reconstruct_view);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1074:     register const Quantum",
          "1078:     register ssize_t",
          "1079:       i,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1129:       p+=GetPixelChannels(image);",
          "1130:       q+=GetPixelChannels(reconstruct_image);",
          "1131:     }",
          "1135:     for (i=0; i <= MaxPixelChannels; i++)",
          "1136:       if (channel_distortion[i] > distortion[i])",
          "1137:         distortion[i]=channel_distortion[i];",
          "",
          "[Removed Lines]",
          "1132: #if defined(MAGICKCORE_OPENMP_SUPPORT)",
          "1133:     #pragma omp critical (MagickCore_GetPeakAbsoluteError)",
          "1134: #endif",
          "",
          "[Added Lines]",
          "1129: #if defined(MAGICKCORE_OPENMP_SUPPORT)",
          "1130:     #pragma omp critical (MagickCore_GetPeakAbsoluteError)",
          "1131: #endif",
          "",
          "---------------"
        ],
        "MagickCore/composite.c||MagickCore/composite.c": [
          "File: MagickCore/composite.c -> MagickCore/composite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "770:       break;",
          "771:     }",
          "772:     case BlurCompositeOp:",
          "773:     {",
          "774:       CacheView",
          "778:       const char",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "946:     }",
          "947:     case DisplaceCompositeOp:",
          "948:     case DistortCompositeOp:",
          "949:     {",
          "950:       CacheView",
          "955:       const char",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1121:       source_image=canvas_image;",
          "1122:       break;",
          "1123:     }",
          "",
          "[Removed Lines]",
          "1124:     case DissolveCompositeOp:",
          "1125:     {",
          "1126:       const char",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1149:         }",
          "1150:       break;",
          "1151:     }",
          "1157:       value=GetImageArtifact(image,\"compose:args\");",
          "",
          "[Removed Lines]",
          "1152:     case BlendCompositeOp:",
          "1153:     {",
          "1154:       const char",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1165:         }",
          "1166:       break;",
          "1167:     }",
          "",
          "[Removed Lines]",
          "1168:     case MathematicsCompositeOp:",
          "1169:     {",
          "1170:       const char",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1184:         (void) ParseGeometry(value,&geometry_info);",
          "1185:       break;",
          "1186:     }",
          "",
          "[Removed Lines]",
          "1187:     case ModulateCompositeOp:",
          "1188:     {",
          "1189:       const char",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1202:         }",
          "1203:       break;",
          "1204:     }",
          "",
          "[Removed Lines]",
          "1205:     case ThresholdCompositeOp:",
          "1206:     {",
          "1207:       const char",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MagickCore/configure.c||MagickCore/configure.c": [
          "File: MagickCore/configure.c -> MagickCore/configure.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1203:           if (*token != '=')",
          "1204:             continue;",
          "1205:           GetMagickToken(q,&q,token);",
          "1208:               if (depth > 200)",
          "1210:                   ConfigureError,\"IncludeElementNestedTooDeeply\",\"`%s'\",token);",
          "1212:                 {",
          "1213:                   char",
          "1214:                     path[MagickPathExtent],",
          "",
          "[Removed Lines]",
          "1206:           if (LocaleCompare(keyword,\"file\") == 0)",
          "1207:             {",
          "1209:                 (void) ThrowMagickException(exception,GetMagickModule(),",
          "1211:               else",
          "",
          "[Added Lines]",
          "1206:           if (LocaleCompare(keyword,\"file\") == 0)",
          "1207:             {",
          "1209:                 (void) ThrowMagickException(exception,GetMagickModule(),",
          "1211:               else",
          "",
          "---------------"
        ],
        "MagickCore/constitute.c||MagickCore/constitute.c": [
          "File: MagickCore/constitute.c -> MagickCore/constitute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "722:       timestamp);",
          "723:     (void) SetImageProperty(next,\"date:modify\",timestamp,exception);",
          "724:     (void) FormatMagickTime(GetBlobProperties(next)->st_ctime,MagickPathExtent,",
          "728:     if (option != (const char *) NULL)",
          "729:       {",
          "730:         GeometryInfo",
          "",
          "[Removed Lines]",
          "725:       timestamp);",
          "726:     (void) SetImageProperty(next,\"date:create\",timestamp,exception);",
          "727:     option=GetImageOption(image_info,\"delay\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1062:           write_info=DestroyImageInfo(write_info);",
          "1063:           (void) CopyMagickString(image->filename,filename,MagickPathExtent);",
          "1064:           return(status);",
          "1066:     }",
          "1068:   temporary=MagickFalse;",
          "1070:       (GetMagickSeekableStream(magick_info) != MagickFalse))",
          "1071:     {",
          "1072:       char",
          "",
          "[Removed Lines]",
          "1065:         }",
          "1067:   status=MagickFalse;",
          "1069:   if ((magick_info != (const MagickInfo *) NULL) &&",
          "",
          "[Added Lines]",
          "1062:         }",
          "1064:   status=MagickFalse;",
          "1066:   if ((magick_info != (const MagickInfo *) NULL) &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1239: #define WriteImageTag  \"Write/Image\"",
          "1241:   ExceptionInfo",
          "1244:   ImageInfo",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1293:           Generate consistent scene numbers.",
          "1295:         i=(ssize_t) images->scene;",
          "1297:           p->scene=(size_t) i++;",
          "1298:         break;",
          "1299:       }",
          "",
          "[Removed Lines]",
          "1296:         for (p=images; p != (Image *) NULL; p=GetNextImageInList(p))",
          "",
          "[Added Lines]",
          "1293:         for (p=images; p != (Image *) NULL; p=GetNextImageInList(p))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1307:   for (p=images; p != (Image *) NULL; p=GetNextImageInList(p))",
          "1308:   {",
          "1309:     if (number_images != 1)",
          "1311:         p->client_data);",
          "1312:     status&=WriteImage(write_info,p,exception);",
          "1313:     if (number_images != 1)",
          "",
          "[Removed Lines]",
          "1310:       progress_monitor=SetImageProgressMonitor(p,(MagickProgressMonitor) NULL,",
          "",
          "[Added Lines]",
          "1307:       progress_monitor=SetImageProgressMonitor(p,(MagickProgressMonitor) NULL,",
          "",
          "---------------"
        ],
        "MagickCore/exception-private.h||MagickCore/exception-private.h": [
          "File: MagickCore/exception-private.h -> MagickCore/exception-private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #define ThrowFatalException(severity,tag) \\",
          "37: { \\",
          "38:   char \\",
          "40:  \\",
          "41:   ExceptionInfo \\",
          "43:  \\",
          "51:   MagickCoreTerminus(); \\",
          "52:   _exit((int) (severity-FatalErrorException)+1); \\",
          "53: }",
          "54: #define ThrowFileException(exception,severity,tag,context) \\",
          "55: { \\",
          "56:   char \\",
          "58:  \\",
          "60:   (void) ThrowMagickException(exception,GetMagickModule(),severity, \\",
          "63: }",
          "64: #define ThrowImageException(severity,tag) \\",
          "65: { \\",
          "",
          "[Removed Lines]",
          "44:   exception=AcquireExceptionInfo(); \\",
          "45:   message=GetExceptionMessage(errno); \\",
          "46:   (void) ThrowMagickException(exception,GetMagickModule(),severity, \\",
          "47:     tag == (const char *) NULL ? \"unknown\" : tag,\"`%s'\",message); \\",
          "48:   message=DestroyString(message); \\",
          "49:   CatchException(exception); \\",
          "50:   (void) DestroyExceptionInfo(exception); \\",
          "59:   message=GetExceptionMessage(errno); \\",
          "61:     tag == (const char *) NULL ? \"unknown\" : tag,\"'%s': %s\",context,message); \\",
          "62:   message=DestroyString(message); \\",
          "",
          "[Added Lines]",
          "44:   fatal_exception=AcquireExceptionInfo(); \\",
          "45:   fatal_message=GetExceptionMessage(errno); \\",
          "46:   (void) ThrowMagickException(fatal_exception,GetMagickModule(),severity, \\",
          "47:     tag == (const char *) NULL ? \"unknown\" : tag,\"`%s'\",fatal_message); \\",
          "48:   fatal_message=DestroyString(fatal_message); \\",
          "49:   CatchException(fatal_exception); \\",
          "50:   (void) DestroyExceptionInfo(fatal_exception); \\",
          "59:   file_message=GetExceptionMessage(errno); \\",
          "61:     tag == (const char *) NULL ? \"unknown\" : tag,\"'%s': %s\",context, \\",
          "62:     file_message); \\",
          "63:   file_message=DestroyString(file_message); \\",
          "",
          "---------------"
        ],
        "MagickWand/magick-wand-private.h||MagickWand/magick-wand-private.h": [
          "File: MagickWand/magick-wand-private.h -> MagickWand/magick-wand-private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #define ThrowWandFatalException(severity,tag,context) \\",
          "36: { \\",
          "37:   ExceptionInfo \\",
          "39:  \\",
          "42:     \"`%s'\",context); \\",
          "45:   MagickWandTerminus(); \\",
          "46:   _exit((int) (severity-FatalErrorException)+1); \\",
          "47: }",
          "",
          "[Removed Lines]",
          "40:   exception=AcquireExceptionInfo(); \\",
          "41:   (void) ThrowMagickException(exception,GetMagickModule(),severity,tag, \\",
          "43:   CatchException(exception); \\",
          "44:   (void) DestroyExceptionInfo(exception); \\",
          "",
          "[Added Lines]",
          "40:   fatal_exception=AcquireExceptionInfo(); \\",
          "41:   (void) ThrowMagickException(fatal_exception,GetMagickModule(),severity,tag, \\",
          "43:   CatchException(fatal_exception); \\",
          "44:   (void) DestroyExceptionInfo(fatal_exception); \\",
          "",
          "---------------"
        ],
        "coders/dpx.c||coders/dpx.c": [
          "File: coders/dpx.c -> coders/dpx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1502:     Open output image file.",
          "1504:   assert(image_info != (const ImageInfo *) NULL);",
          "1511:   vertical_factor=4;",
          "1512:   if (image_info->sampling_factor != (char *) NULL)",
          "1513:     {",
          "",
          "[Removed Lines]",
          "1505:   assert(image_info->signature == MagickCoreSignature);",
          "1506:   assert(image != (Image *) NULL);",
          "1507:   assert(image->signature == MagickCoreSignature);",
          "1508:   if (image->debug != MagickFalse)",
          "1509:     (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);",
          "1510:   horizontal_factor=4;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "coders/xtrn.c||coders/xtrn.c": [
          "File: coders/xtrn.c -> coders/xtrn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: %    o image_info: Specifies a pointer to an ImageInfo structure.",
          "111: %",
          "112: %    o exception: return any errors or warnings in this structure.",
          "113: %",
          "115: #if defined(_VISUALC_)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113: %",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:             }",
          "228:         }",
          "229:     }",
          "230:   clone_info=DestroyImageInfo(clone_info);",
          "231:   return(image);",
          "232: }",
          "233: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:   clone_info=DestroyImageInfo(clone_info);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "398:     {",
          "400:     }",
          "401:   }",
          "402:   return(tlen);",
          "403: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "532:           else",
          "533:             SafeArrayFifo(image,blob_data,blob_length);",
          "534:           if (status == MagickFalse)",
          "535:             CatchImageException(image);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538:             CatchImageException(image);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8be0b1e9ede4d9a12a43b14e37436f9e73af0335",
      "candidate_info": {
        "commit_hash": "8be0b1e9ede4d9a12a43b14e37436f9e73af0335",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/8be0b1e9ede4d9a12a43b14e37436f9e73af0335",
        "files": [
          "MagickCore/delegate.c",
          "MagickCore/property.c"
        ],
        "message": "Introduce InterpretDelegateProperties()",
        "before_after_code_files": [
          "MagickCore/delegate.c||MagickCore/delegate.c",
          "MagickCore/property.c||MagickCore/property.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/delegate.c||MagickCore/delegate.c",
            "MagickCore/property.c||MagickCore/property.c"
          ],
          "candidate": [
            "MagickCore/delegate.c||MagickCore/delegate.c",
            "MagickCore/property.c||MagickCore/property.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/delegate.c||MagickCore/delegate.c": [
          "File: MagickCore/delegate.c -> MagickCore/delegate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   Include declarations.",
          "50: #include \"MagickCore/property.h\"",
          "51: #include \"MagickCore/blob.h\"",
          "52: #include \"MagickCore/client.h\"",
          "",
          "[Removed Lines]",
          "49: #include \"MagickCore/studio.h\"",
          "",
          "[Added Lines]",
          "49: #include \"MagickCore/studio.h\"",
          "50: #include \"MagickCore/artifact.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: #include \"MagickCore/delegate.h\"",
          "56: #include \"MagickCore/delegate-private.h\"",
          "57: #include \"MagickCore/exception.h\"",
          "58: #include \"MagickCore/exception-private.h\"",
          "59: #include \"MagickCore/image-private.h\"",
          "60: #include \"MagickCore/linked-list.h\"",
          "61: #include \"MagickCore/list.h\"",
          "62: #include \"MagickCore/memory_.h\"",
          "63: #include \"MagickCore/nt-base-private.h\"",
          "64: #include \"MagickCore/policy.h\"",
          "65: #include \"MagickCore/resource_.h\"",
          "66: #include \"MagickCore/semaphore.h\"",
          "67: #include \"MagickCore/string_.h\"",
          "68: #include \"MagickCore/token.h\"",
          "69: #include \"MagickCore/utility.h\"",
          "70: #include \"MagickCore/utility-private.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: #include \"MagickCore/exception-private.h\"",
          "60: #include \"MagickCore/fx-private.h\"",
          "66: #include \"MagickCore/nt-base-private.h\"",
          "68: #include \"MagickCore/policy.h\"",
          "71: #include \"MagickCore/semaphore.h\"",
          "74: #include \"MagickCore/token.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "527: %    o image_info: the image info.",
          "528: %",
          "529: %    o image: the image.",
          "530: %",
          "531: %    o decode: Specifies the decode delegate we are searching for as a",
          "532: %      character string.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538: %    o decode: Specifies the decode delegate we are searching for as a",
          "539: %      character string.",
          "540: %",
          "541: %    o encode: Specifies the encode delegate we are searching for as a",
          "542: %      character string.",
          "543: %",
          "544: %    o exception: return any errors or warnings in this structure.",
          "545: %",
          "548: static const char *GetMagickPropertyLetter(ImageInfo *image_info,",
          "549:   Image *image,const char letter,ExceptionInfo *exception)",
          "550: {",
          "551: #define WarnNoImageReturn(format,arg) \\",
          "552:   if (image == (Image *) NULL ) { \\",
          "553:     (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning, \\",
          "554:       \"NoImageForProperty\",format,arg); \\",
          "555:     return((const char *) NULL); \\",
          "556:   }",
          "557: #define WarnNoImageInfoReturn(format,arg) \\",
          "558:   if (image_info == (ImageInfo *) NULL ) { \\",
          "559:     (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning, \\",
          "560:       \"NoImageInfoForProperty\",format,arg); \\",
          "561:     return((const char *) NULL); \\",
          "562:   }",
          "564:   char",
          "567:   const char",
          "570:   if ((image != (Image *) NULL) && (image->debug != MagickFalse))",
          "571:     (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);",
          "572:   else",
          "573:     if ((image_info != (ImageInfo *) NULL) &&",
          "574:         (image_info->debug != MagickFalse))",
          "575:     (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\"no-images\");",
          "579:     Get properities that are directly defined by images.",
          "581:   switch (letter)",
          "582:   {",
          "584:     {",
          "585:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "586:       (void) FormatMagickSize(image->extent,MagickFalse,\"B\",MagickPathExtent,",
          "587:         value);",
          "588:       if (image->extent == 0)",
          "589:         (void) FormatMagickSize(GetBlobSize(image),MagickFalse,\"B\",",
          "590:           MagickPathExtent,value);",
          "591:       break;",
          "592:     }",
          "594:     {",
          "595:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "596:       string=GetImageProperty(image,\"comment\",exception);",
          "597:       if ( string == (const char *) NULL )",
          "598:         string=\"\";",
          "599:       break;",
          "600:     }",
          "602:     {",
          "603:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "604:       GetPathComponent(image->magick_filename,HeadPath,value);",
          "605:       if (*value == '\\0') string=\"\";",
          "606:       break;",
          "607:     }",
          "609:     {",
          "610:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "611:       GetPathComponent(image->magick_filename,ExtensionPath,value);",
          "612:       if (*value == '\\0') string=\"\";",
          "613:       break;",
          "614:     }",
          "616:     {",
          "617:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "618:       GetPathComponent(image->magick_filename,TailPath,value);",
          "619:       if (*value == '\\0') string=\"\";",
          "620:       break;",
          "621:     }",
          "623:     {",
          "624:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "625:       (void) FormatLocaleString(value,MagickPathExtent,",
          "626:         \"%.20gx%.20g%+.20g%+.20g\",(double) image->page.width,(double)",
          "627:         image->page.height,(double) image->page.x,(double) image->page.y);",
          "628:       break;",
          "629:     }",
          "631:     {",
          "632:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "633:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "634:         (image->rows != 0 ? image->rows : image->magick_rows));",
          "635:       break;",
          "636:     }",
          "638:     {",
          "639:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "640:       string=image->filename;",
          "641:       break;",
          "642:     }",
          "644:     {",
          "646:         FUTURE: ensure this does not generate the formatted comment!",
          "648:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "649:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "650:         GetNumberColors(image,(FILE *) NULL,exception));",
          "651:       break;",
          "652:     }",
          "654:     {",
          "655:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "656:       string=GetImageProperty(image,\"label\",exception);",
          "657:       if ( string == (const char *) NULL)",
          "658:         string=\"\";",
          "659:       break;",
          "660:     }",
          "662:     {",
          "663:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "664:       string=image->magick;",
          "665:       break;",
          "666:     }",
          "668:     {",
          "669:       if ( image != (Image *) NULL )",
          "670:         (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "671:           GetImageListLength(image));",
          "672:       else",
          "674:       break;",
          "675:     }",
          "677:       WarnNoImageInfoReturn(\"\\\"%%%c\\\"\",letter);",
          "678:       string=image_info->filename;",
          "679:       break;",
          "681:     {",
          "682:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "683:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "684:         GetImageIndexInList(image));",
          "685:       break;",
          "686:     }",
          "688:     {",
          "689:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "690:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "691:         MAGICKCORE_QUANTUM_DEPTH);",
          "692:       break;",
          "693:     }",
          "695:     {",
          "696:       ColorspaceType",
          "697:         colorspace;",
          "699:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "700:       colorspace=image->colorspace;",
          "701:       if (SetImageGray(image,exception) != MagickFalse)",
          "703:       (void) FormatLocaleString(value,MagickPathExtent,\"%s %s %s\",",
          "704:         CommandOptionToMnemonic(MagickClassOptions,(ssize_t)",
          "705:         image->storage_class),CommandOptionToMnemonic(MagickColorspaceOptions,",
          "706:         (ssize_t) colorspace),image->alpha_trait != UndefinedPixelTrait ?",
          "707:         \"Alpha\" : \"\");",
          "708:       break;",
          "709:     }",
          "711:     {",
          "713:       if (image_info->number_scenes != 0)",
          "714:         (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "715:           image_info->scene);",
          "716:       else if (image != (Image *) NULL)",
          "717:         (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "718:           image->scene);",
          "719:       else",
          "720:           string=\"0\";",
          "721: #else",
          "722:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "723:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "724:          image->scene);",
          "725: #endif",
          "726:       break;",
          "727:     }",
          "729:     {",
          "730:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "731:       GetPathComponent(image->magick_filename,BasePath,value);",
          "732:       if (*value == '\\0') string=\"\";",
          "733:       break;",
          "734:     }",
          "736:       WarnNoImageInfoReturn(\"\\\"%%%c\\\"\",letter);",
          "737:       string=image_info->unique;",
          "738:       break;",
          "740:     {",
          "741:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "742:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "743:         (image->columns != 0 ? image->columns : image->magick_columns));",
          "744:       break;",
          "745:     }",
          "747:     {",
          "748:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "749:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",",
          "750:         fabs(image->resolution.x) > MagickEpsilon ? image->resolution.x : 72.0);",
          "751:       break;",
          "752:     }",
          "754:     {",
          "755:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "756:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",",
          "757:         fabs(image->resolution.y) > MagickEpsilon ? image->resolution.y : 72.0);",
          "758:       break;",
          "759:     }",
          "761:     {",
          "762:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "763:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",",
          "764:         (double) image->depth);",
          "765:       break;",
          "766:     }",
          "768:     {",
          "769:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "770:       string=CommandOptionToMnemonic(MagickPixelTraitOptions,(ssize_t)",
          "771:         image->alpha_trait);",
          "772:       break;",
          "773:     }",
          "775:     {",
          "776:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "777:       string=CommandOptionToMnemonic(MagickCompressOptions,",
          "778:         (ssize_t) image->compression);",
          "779:       break;",
          "780:     }",
          "782:     {",
          "783:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "784:       string=CommandOptionToMnemonic(MagickDisposeOptions,",
          "785:         (ssize_t) image->dispose);",
          "786:       break;",
          "787:     }",
          "788:     case 'F':",
          "789:     {",
          "790:       const char",
          "793:       register char",
          "796:       static char",
          "797:         whitelist[] =",
          "798:           \"^-ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"",
          "799:           \"+&@#/%?=~_|!:,.;()\";",
          "802:         Magick filename (sanitized) - filename given incl. coder & read mods.",
          "804:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "805:       (void) CopyMagickString(value,image->magick_filename,MagickPathExtent);",
          "806:       p=value;",
          "807:       q=value+strlen(value);",
          "808:       for (p+=strspn(p,whitelist); p != q; p+=strspn(p,whitelist))",
          "810:       break;",
          "811:     }",
          "813:     {",
          "814:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "815:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20gx%.20g\",",
          "816:         (double)image->magick_columns,(double) image->magick_rows);",
          "817:       break;",
          "818:     }",
          "820:     {",
          "821:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "822:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",",
          "823:         (double) image->page.height);",
          "824:       break;",
          "825:     }",
          "827:     {",
          "828:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "829:       string=image->magick_filename;",
          "830:       break;",
          "831:     }",
          "833:     {",
          "834:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "835:       (void) FormatLocaleString(value,MagickPathExtent,\"%+ld%+ld\",(long)",
          "836:         image->page.x,(long) image->page.y);",
          "837:       break;",
          "838:     }",
          "840:     {",
          "841:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "842:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20gx%.20g\",",
          "843:         (double) image->page.width,(double) image->page.height);",
          "844:       break;",
          "845:     }",
          "847:     {",
          "848:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "849:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "850:         (image->quality == 0 ? 92 : image->quality));",
          "851:       break;",
          "852:     }",
          "854:     {",
          "855:       WarnNoImageInfoReturn(\"\\\"%%%c\\\"\",letter);",
          "857:       if (image_info->number_scenes == 0)",
          "858:          string=\"2147483647\";",
          "859:       else if ( image != (Image *) NULL )",
          "860:         (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "861:                 image_info->scene+image_info->number_scenes);",
          "862:       else",
          "863:         string=\"0\";",
          "864: #else",
          "865:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "866:         (image_info->number_scenes == 0 ? 2147483647 :",
          "867:          image_info->number_scenes));",
          "868: #endif",
          "869:       break;",
          "870:     }",
          "872:     {",
          "873:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "874:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "875:         image->delay);",
          "876:       break;",
          "877:     }",
          "879:     {",
          "880:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "881:       string=CommandOptionToMnemonic(MagickResolutionOptions,",
          "882:         (ssize_t) image->units);",
          "883:       break;",
          "884:     }",
          "886:     {",
          "887:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "888:       (void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)",
          "889:         image->page.width);",
          "890:       break;",
          "891:     }",
          "893:     {",
          "894:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "895:       (void) FormatLocaleString(value,MagickPathExtent,\"%+.20g\",(double)",
          "896:         image->page.x);",
          "897:       break;",
          "898:     }",
          "900:     {",
          "901:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "902:       (void) FormatLocaleString(value,MagickPathExtent,\"%+.20g\",(double)",
          "903:         image->page.y);",
          "904:       break;",
          "905:     }",
          "907:       string=\"%\";",
          "908:       break;",
          "910:     {",
          "911:       RectangleInfo",
          "912:         page;",
          "914:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "915:       page=GetImageBoundingBox(image,exception);",
          "916:       (void) FormatLocaleString(value,MagickPathExtent,",
          "917:         \"%.20gx%.20g%+.20g%+.20g\",(double) page.width,(double) page.height,",
          "918:         (double) page.x,(double)page.y);",
          "919:       break;",
          "920:     }",
          "921:     case '#':",
          "922:     {",
          "924:         Image signature.",
          "926:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "927:       (void) SignatureImage(image,exception);",
          "928:       string=GetImageProperty(image,\"signature\",exception);",
          "929:       break;",
          "930:     }",
          "931:   }",
          "932:   if (string != (char *) NULL)",
          "933:     return(string);",
          "934:   if (*value != '\\0')",
          "935:     {",
          "937:         Create a cloned copy of result.",
          "939:       if (image != (Image *) NULL)",
          "940:         {",
          "941:           (void) SetImageArtifact(image,\"get-property\",value);",
          "942:           return(GetImageArtifact(image,\"get-property\"));",
          "943:         }",
          "944:       else",
          "945:         {",
          "946:           (void) SetImageOption(image_info,\"get-property\",value);",
          "947:           return(GetImageOption(image_info,\"get-property\"));",
          "948:         }",
          "949:     }",
          "950:   return((char *) NULL);",
          "951: }",
          "953: static char *InterpretDelegateProperties(ImageInfo *image_info,",
          "954:   Image *image,const char *embed_text,ExceptionInfo *exception)",
          "955: {",
          "956: #define ExtendInterpretText(string_length) \\",
          "957: DisableMSCWarning(4127) \\",
          "958: { \\",
          "959:   size_t length=(string_length); \\",
          "960:   if ((size_t) (q-interpret_text+length+1) >= extent) \\",
          "961:     { \\",
          "962:       extent+=length; \\",
          "963:       interpret_text=(char *) ResizeQuantumMemory(interpret_text,extent+ \\",
          "964:         MaxTextExtent,sizeof(*interpret_text)); \\",
          "965:       if (interpret_text == (char *) NULL) \\",
          "966:         return((char *) NULL); \\",
          "967:       q=interpret_text+strlen(interpret_text); \\",
          "968:    } \\",
          "969: } \\",
          "970: RestoreMSCWarning",
          "972: #define AppendKeyValue2Text(key,value)\\",
          "973: DisableMSCWarning(4127) \\",
          "974: { \\",
          "975:   size_t length=strlen(key)+strlen(value)+2; \\",
          "976:   if ((size_t) (q-interpret_text+length+1) >= extent) \\",
          "977:     { \\",
          "978:       extent+=length; \\",
          "979:       interpret_text=(char *) ResizeQuantumMemory(interpret_text,extent+ \\",
          "980:         MaxTextExtent,sizeof(*interpret_text)); \\",
          "981:       if (interpret_text == (char *) NULL) \\",
          "982:         return((char *) NULL); \\",
          "983:       q=interpret_text+strlen(interpret_text); \\",
          "984:      } \\",
          "985:    q+=FormatLocaleString(q,extent,\"%s=%s\\n\",(key),(value)); \\",
          "986: } \\",
          "987: RestoreMSCWarning",
          "989: #define AppendString2Text(string) \\",
          "990: DisableMSCWarning(4127) \\",
          "991: { \\",
          "992:   size_t length=strlen((string)); \\",
          "993:   if ((size_t) (q-interpret_text+length+1) >= extent) \\",
          "994:     { \\",
          "995:       extent+=length; \\",
          "996:       interpret_text=(char *) ResizeQuantumMemory(interpret_text,extent+ \\",
          "997:         MaxTextExtent,sizeof(*interpret_text)); \\",
          "998:       if (interpret_text == (char *) NULL) \\",
          "999:         return((char *) NULL); \\",
          "1000:       q=interpret_text+strlen(interpret_text); \\",
          "1001:     } \\",
          "1002:   (void) CopyMagickString(q,(string),extent); \\",
          "1003:   q+=length; \\",
          "1004: } \\",
          "1005: RestoreMSCWarning",
          "1007:   char",
          "1010:   register char",
          "1013:   register const char",
          "1016:   size_t",
          "1019:   MagickBooleanType",
          "1020:     number;",
          "1022:   assert(image == NULL || image->signature == MagickCoreSignature);",
          "1023:   assert(image_info == NULL || image_info->signature == MagickCoreSignature);",
          "1024:   if ((image != (Image *) NULL) && (image->debug != MagickFalse))",
          "1025:     (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);",
          "1026:   else",
          "1027:    if ((image_info != (ImageInfo *) NULL) && (image_info->debug != MagickFalse))",
          "1028:      (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\"no-image\");",
          "1029:   if (embed_text == (const char *) NULL)",
          "1030:     return(ConstantString(\"\"));",
          "1031:   p=embed_text;",
          "1032:   while ((isspace((int) ((unsigned char) *p)) != 0) && (*p != '\\0'))",
          "1033:     p++;",
          "1034:   if (*p == '\\0')",
          "1035:     return(ConstantString(\"\"));",
          "1036:   if ((*p == '@') && (IsPathAccessible(p+1) != MagickFalse))",
          "1037:     {",
          "1039:         Handle a '@' replace string from file.",
          "1041:       if (IsRightsAuthorized(PathPolicyDomain,ReadPolicyRights,p) == MagickFalse)",
          "1042:         {",
          "1043:           errno=EPERM;",
          "1044:           (void) ThrowMagickException(exception,GetMagickModule(),PolicyError,",
          "1045:             \"NotAuthorized\",\"`%s'\",p);",
          "1046:           return(ConstantString(\"\"));",
          "1047:         }",
          "1048:       interpret_text=FileToString(p+1,~0UL,exception);",
          "1049:       if (interpret_text != (char *) NULL)",
          "1050:         return(interpret_text);",
          "1051:     }",
          "1054:     Translate any embedded format characters.",
          "1059:   for (q=interpret_text; *p!='\\0';",
          "1060:     number=isdigit(*p) ? MagickTrue : MagickFalse,p++)",
          "1061:   {",
          "1063:       Look for the various escapes, (and handle other specials)",
          "1066:     ExtendInterpretText(MagickPathExtent);",
          "1067:     switch (*p)",
          "1068:     {",
          "1069:       case '\\\\':",
          "1070:       {",
          "1071:         switch (*(p+1))",
          "1072:         {",
          "1073:           case '\\0':",
          "1074:             continue;",
          "1076:           {",
          "1078:             p++;",
          "1079:             continue;",
          "1080:           }",
          "1082:           {",
          "1084:             p++;",
          "1085:             continue;",
          "1086:           }",
          "1088:           {",
          "1089:             p++;",
          "1090:             continue;",
          "1091:           }",
          "1093:           {",
          "1094:             p++;",
          "1096:               p++;",
          "1097:             continue;",
          "1098:           }",
          "1099:           default:",
          "1100:           {",
          "1101:             p++;",
          "1103:           }",
          "1104:         }",
          "1105:         continue;",
          "1106:       }",
          "1107:       case '&':",
          "1108:       {",
          "1109:         if (LocaleNCompare(\"&lt;\",p,4) == 0)",
          "1110:           {",
          "1112:             p+=3;",
          "1113:           }",
          "1114:         else",
          "1115:           if (LocaleNCompare(\"&gt;\",p,4) == 0)",
          "1116:             {",
          "1118:               p+=3;",
          "1119:             }",
          "1120:           else",
          "1121:             if (LocaleNCompare(\"&amp;\",p,5) == 0)",
          "1122:               {",
          "1124:                 p+=4;",
          "1125:               }",
          "1126:             else",
          "1128:         continue;",
          "1129:       }",
          "1130:       case '%':",
          "1132:       default:",
          "1133:       {",
          "1135:         continue;",
          "1136:       }",
          "1137:     }",
          "1140:       Doubled Percent - or percent at end of string.",
          "1142:     if ((*p == '\\0') || (*p == '\\'') || (*p == '\"'))",
          "1143:       p--;",
          "1144:     if (*p == '%')",
          "1145:       {",
          "1147:         continue;",
          "1148:       }",
          "1150:       Single letter escapes %c.",
          "1152:     if (*p != '[')",
          "1153:       {",
          "1154:         const char",
          "1157:         if (number != MagickFalse)",
          "1158:           {",
          "1160:               But only if not preceeded by a number!",
          "1164:             continue;",
          "1165:           }",
          "1166:         string=GetMagickPropertyLetter(image_info,image,*p, exception);",
          "1167:         if (string != (char *) NULL)",
          "1168:           {",
          "1169:             AppendString2Text(string);",
          "1170:             if (image != (Image *) NULL)",
          "1171:               (void) DeleteImageArtifact(image,\"get-property\");",
          "1172:             if (image_info != (ImageInfo *) NULL)",
          "1173:               (void) DeleteImageOption(image_info,\"get-property\");",
          "1174:             continue;",
          "1175:           }",
          "1176:         (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning,",
          "1177:           \"UnknownImageProperty\",\"\\\"%%%c\\\"\",*p);",
          "1178:         continue;",
          "1179:       }",
          "1180:     {",
          "1181:       char",
          "1182:         pattern[2*MagickPathExtent];",
          "1184:       const char",
          "1188:       register ssize_t",
          "1189:         len;",
          "1191:       ssize_t",
          "1192:         depth;",
          "1195:         Braced Percent Escape %[...].",
          "1198:       depth=1;",
          "1199:       if (*p == ']')",
          "1200:         {",
          "1201:           (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning,",
          "1202:             \"UnknownImageProperty\",\"\\\"%%[]\\\"\");",
          "1203:           break;",
          "1204:         }",
          "1205:       for (len=0; len<(MagickPathExtent-1L) && (*p != '\\0');)",
          "1206:       {",
          "1207:         if ((*p == '\\\\') && (*(p+1) != '\\0'))",
          "1208:           {",
          "1210:               Skip escaped braces within braced pattern.",
          "1212:             pattern[len++]=(*p++);",
          "1213:             pattern[len++]=(*p++);",
          "1214:             continue;",
          "1215:           }",
          "1216:         if (*p == '[')",
          "1217:           depth++;",
          "1218:         if (*p == ']')",
          "1219:           depth--;",
          "1220:         if (depth <= 0)",
          "1221:           break;",
          "1222:         pattern[len++]=(*p++);",
          "1223:       }",
          "1224:       pattern[len]='\\0';",
          "1225:       if (depth != 0)",
          "1226:         {",
          "1228:             Check for unmatched final ']' for \"%[...]\".",
          "1230:           if (len >= 64)",
          "1231:             {",
          "1233:               pattern[62] = '.';",
          "1234:               pattern[63] = '.';",
          "1235:               pattern[64] = '\\0';",
          "1236:             }",
          "1237:           (void) ThrowMagickException(exception,GetMagickModule(),",
          "1238:             OptionError,\"UnbalancedBraces\",\"\\\"%%[%s\\\"\",pattern);",
          "1239:           interpret_text=DestroyString(interpret_text);",
          "1240:           return((char *) NULL);",
          "1241:         }",
          "1243:         Special Lookup Prefixes %[prefix:...].",
          "1245:       if (LocaleNCompare(\"fx:\",pattern,3) == 0)",
          "1246:         {",
          "1247:           FxInfo",
          "1250:           double",
          "1251:             value;",
          "1253:           MagickBooleanType",
          "1254:             status;",
          "1257:             FX - value calculator.",
          "1259:           if (image == (Image *) NULL )",
          "1260:             {",
          "1261:               (void) ThrowMagickException(exception,GetMagickModule(),",
          "1262:                 OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "1264:             }",
          "1265:           fx_info=AcquireFxInfo(image,pattern+3,exception);",
          "1266:           status=FxEvaluateChannelExpression(fx_info,IntensityPixelChannel,0,0,",
          "1267:             &value,exception);",
          "1268:           fx_info=DestroyFxInfo(fx_info);",
          "1269:           if (status != MagickFalse)",
          "1270:             {",
          "1271:               char",
          "1272:                 result[MagickPathExtent];",
          "1274:               (void) FormatLocaleString(result,MagickPathExtent,\"%.*g\",",
          "1275:                 GetMagickPrecision(),(double) value);",
          "1276:               AppendString2Text(result);",
          "1277:             }",
          "1278:           continue;",
          "1279:         }",
          "1280:       if (LocaleNCompare(\"pixel:\",pattern,6) == 0)",
          "1281:         {",
          "1282:           FxInfo",
          "1285:           double",
          "1286:             value;",
          "1288:           MagickStatusType",
          "1289:             status;",
          "1291:           PixelInfo",
          "1292:             pixel;",
          "1295:             Pixel - color value calculator.",
          "1297:           if (image == (Image *) NULL)",
          "1298:             {",
          "1299:               (void) ThrowMagickException(exception,GetMagickModule(),",
          "1300:                 OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "1302:             }",
          "1303:           GetPixelInfo(image,&pixel);",
          "1304:           fx_info=AcquireFxInfo(image,pattern+6,exception);",
          "1305:           status=FxEvaluateChannelExpression(fx_info,RedPixelChannel,0,0,",
          "1306:             &value,exception);",
          "1307:           pixel.red=(double) QuantumRange*value;",
          "1308:           status&=FxEvaluateChannelExpression(fx_info,GreenPixelChannel,0,0,",
          "1309:             &value,exception);",
          "1310:           pixel.green=(double) QuantumRange*value;",
          "1311:           status&=FxEvaluateChannelExpression(fx_info,BluePixelChannel,0,0,",
          "1312:             &value,exception);",
          "1313:           pixel.blue=(double) QuantumRange*value;",
          "1314:           if (image->colorspace == CMYKColorspace)",
          "1315:             {",
          "1316:               status&=FxEvaluateChannelExpression(fx_info,BlackPixelChannel,0,0,",
          "1317:                 &value,exception);",
          "1318:               pixel.black=(double) QuantumRange*value;",
          "1319:             }",
          "1320:           status&=FxEvaluateChannelExpression(fx_info,AlphaPixelChannel,0,0,",
          "1321:             &value,exception);",
          "1322:           pixel.alpha=(double) QuantumRange*value;",
          "1323:           fx_info=DestroyFxInfo(fx_info);",
          "1324:           if (status != MagickFalse)",
          "1325:             {",
          "1326:               char",
          "1327:                 name[MagickPathExtent];",
          "1329:               (void) QueryColorname(image,&pixel,SVGCompliance,name,",
          "1330:                 exception);",
          "1331:               AppendString2Text(name);",
          "1332:             }",
          "1333:           continue;",
          "1334:         }",
          "1335:       if (LocaleNCompare(\"option:\",pattern,7) == 0)",
          "1336:         {",
          "1338:             Option - direct global option lookup (with globbing).",
          "1340:           if (image_info == (ImageInfo *) NULL )",
          "1341:             {",
          "1342:               (void) ThrowMagickException(exception,GetMagickModule(),",
          "1343:                 OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "1345:             }",
          "1346:           if (IsGlob(pattern+7) != MagickFalse)",
          "1347:             {",
          "1348:               ResetImageOptionIterator(image_info);",
          "1349:               while ((key=GetNextImageOption(image_info)) != (const char *) NULL)",
          "1350:                 if (GlobExpression(key,pattern+7,MagickTrue) != MagickFalse)",
          "1351:                   {",
          "1352:                     string=GetImageOption(image_info,key);",
          "1353:                     if (string != (const char *) NULL)",
          "1354:                       AppendKeyValue2Text(key,string);",
          "1356:                   }",
          "1357:               continue;",
          "1358:             }",
          "1359:           string=GetImageOption(image_info,pattern+7);",
          "1360:           if (string == (char *) NULL)",
          "1362:           AppendString2Text(string);",
          "1363:           continue;",
          "1364:         }",
          "1365:       if (LocaleNCompare(\"artifact:\",pattern,9) == 0)",
          "1366:         {",
          "1368:             Artifact - direct image artifact lookup (with glob).",
          "1370:           if (image == (Image *) NULL)",
          "1371:             {",
          "1372:               (void) ThrowMagickException(exception,GetMagickModule(),",
          "1373:                 OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "1375:             }",
          "1376:           if (IsGlob(pattern+9) != MagickFalse)",
          "1377:             {",
          "1378:               ResetImageArtifactIterator(image);",
          "1379:               while ((key=GetNextImageArtifact(image)) != (const char *) NULL)",
          "1380:               if (GlobExpression(key,pattern+9,MagickTrue) != MagickFalse)",
          "1381:                 {",
          "1382:                   string=GetImageArtifact(image,key);",
          "1383:                   if (string != (const char *) NULL)",
          "1384:                     AppendKeyValue2Text(key,string);",
          "1386:                 }",
          "1387:               continue;",
          "1388:             }",
          "1389:           string=GetImageArtifact(image,pattern+9);",
          "1390:           if (string == (char *) NULL)",
          "1392:           AppendString2Text(string);",
          "1393:           continue;",
          "1394:         }",
          "1395:       if (LocaleNCompare(\"property:\",pattern,9) == 0)",
          "1396:         {",
          "1398:             Property - direct image property lookup (with glob).",
          "1400:           if (image == (Image *) NULL)",
          "1401:             {",
          "1402:               (void) ThrowMagickException(exception,GetMagickModule(),",
          "1403:                 OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "1405:             }",
          "1406:           if (IsGlob(pattern+9) != MagickFalse)",
          "1407:             {",
          "1408:               ResetImagePropertyIterator(image);",
          "1409:               while ((key=GetNextImageProperty(image)) != (const char *) NULL)",
          "1410:                 if (GlobExpression(key,pattern,MagickTrue) != MagickFalse)",
          "1411:                   {",
          "1412:                     string=GetImageProperty(image,key,exception);",
          "1413:                     if (string != (const char *) NULL)",
          "1414:                       AppendKeyValue2Text(key,string);",
          "1416:                   }",
          "1417:               continue;",
          "1418:             }",
          "1419:           string=GetImageProperty(image,pattern+9,exception);",
          "1420:           if (string == (char *) NULL)",
          "1422:           AppendString2Text(string);",
          "1423:           continue;",
          "1424:         }",
          "1425:       if (image != (Image *) NULL)",
          "1426:         {",
          "1428:             Properties without special prefix.  This handles attributes,",
          "1429:             properties, and profiles such as %[exif:...].  Note the profile",
          "1430:             properties may also include a glob expansion pattern.",
          "1432:           string=GetImageProperty(image,pattern,exception);",
          "1433:           if (string != (const char *) NULL)",
          "1434:             {",
          "1435:               AppendString2Text(string);",
          "1436:               if (image != (Image *) NULL)",
          "1437:                 (void)DeleteImageArtifact(image,\"get-property\");",
          "1438:               if (image_info != (ImageInfo *) NULL)",
          "1439:                 (void)DeleteImageOption(image_info,\"get-property\");",
          "1440:               continue;",
          "1441:             }",
          "1442:         }",
          "1443:       if (IsGlob(pattern) != MagickFalse)",
          "1444:         {",
          "1446:             Handle property 'glob' patterns such as:",
          "1447:             %[*] %[user:array_??] %[filename:e*]>",
          "1449:           if (image == (Image *) NULL)",
          "1451:           ResetImagePropertyIterator(image);",
          "1452:           while ((key=GetNextImageProperty(image)) != (const char *) NULL)",
          "1453:             if (GlobExpression(key,pattern,MagickTrue) != MagickFalse)",
          "1454:               {",
          "1455:                 string=GetImageProperty(image,key,exception);",
          "1456:                 if (string != (const char *) NULL)",
          "1457:                   AppendKeyValue2Text(key,string);",
          "1459:               }",
          "1460:           continue;",
          "1461:         }",
          "1463:         Look for a known property or image attribute such as",
          "1464:         %[basename] %[denisty] %[delay].  Also handles a braced single",
          "1465:         letter: %[b] %[G] %[g].",
          "1467:       string=GetMagickProperty(image_info,image,pattern,exception);",
          "1468:       if (string != (const char *) NULL)",
          "1469:         {",
          "1470:           AppendString2Text(string);",
          "1471:           continue;",
          "1472:         }",
          "1474:         Look for a per-image artifact. This includes option lookup",
          "1475:         (FUTURE: interpreted according to image).",
          "1477:       if (image != (Image *) NULL)",
          "1478:         {",
          "1479:           string=GetImageArtifact(image,pattern);",
          "1480:           if (string != (char *) NULL)",
          "1481:             {",
          "1482:               AppendString2Text(string);",
          "1483:               continue;",
          "1484:             }",
          "1485:         }",
          "1486:       else",
          "1487:         if (image_info != (ImageInfo *) NULL)",
          "1488:           {",
          "1490:               No image, so direct 'option' lookup (no delayed percent escapes).",
          "1492:             string=GetImageOption(image_info,pattern);",
          "1493:             if (string != (char *) NULL)",
          "1494:               {",
          "1495:                 AppendString2Text(string);",
          "1496:                 continue;",
          "1497:               }",
          "1498:           }",
          "1499: PropertyLookupFailure:",
          "1501:         Failed to find any match anywhere!",
          "1503:       if (len >= 64)",
          "1504:         {",
          "1506:           pattern[62] = '.';",
          "1507:           pattern[63] = '.';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "562:     {",
          "563:       (void) ThrowMagickException(exception,GetMagickModule(),DelegateError,",
          "564:         \"NoTagFound\",\"`%s'\",decode ? decode : encode);",
          "567:   commands=StringToList(delegate_info->commands);",
          "568:   if (commands == (char **) NULL)",
          "569:     {",
          "",
          "[Removed Lines]",
          "565:       return((char *) NULL);",
          "566:     }",
          "",
          "[Added Lines]",
          "1543:       return((char *) NULL);",
          "1544:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1285:   (void) CopyMagickString(input_filename,image->filename,MagickPathExtent);",
          "1286:   for (i=0; commands[i] != (char *) NULL; i++)",
          "1287:   {",
          "1289:     if (AcquireUniqueFilename(image_info->unique) == MagickFalse)",
          "1290:       {",
          "1291:         ThrowFileException(exception,FileOpenError,",
          "",
          "[Removed Lines]",
          "1288:     (void) AcquireUniqueSymbolicLink(output_filename,image_info->filename);",
          "",
          "[Added Lines]",
          "2266:     (void) AcquireUniqueSymbolicLink(output_filename,image_info->filename);",
          "",
          "---------------"
        ],
        "MagickCore/property.c||MagickCore/property.c": [
          "File: MagickCore/property.c -> MagickCore/property.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2327: %  A description of each parameter follows:",
          "2328: %",
          "2329: %    o image_info: the image info (optional)",
          "2330: %",
          "2331: %    o image: the image (optional)",
          "2332: %",
          "2334: %",
          "2335: %    o exception: return any errors or warnings in this structure.",
          "2336: %",
          "2338: #define WarnNoImageReturn(format,arg) \\",
          "2340:     (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning, \\",
          "2341:         \"NoImageForProperty\",format,arg); \\",
          "2342:     return((const char *) NULL); \\",
          "2346:     (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning, \\",
          "2347:         \"NoImageInfoForProperty\",format,arg); \\",
          "2348:     return((const char *) NULL); \\",
          "2349:   }",
          "2351: static const char *GetMagickPropertyLetter(ImageInfo *image_info,",
          "2353: {",
          "2357:   const char",
          "2360:   if (image != (Image *) NULL && image->debug != MagickFalse)",
          "2361:     (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);",
          "2362:   else if( image_info != (ImageInfo *) NULL && image_info->debug != MagickFalse)",
          "2363:     (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\"no-images\");",
          "",
          "[Removed Lines]",
          "2333: %    o key: the key.",
          "2339:   if (image == (Image *) NULL ) { \\",
          "2343:   }",
          "2344: #define WarnNoImageInfoReturn(format,arg) \\",
          "2345:   if (image_info == (ImageInfo *) NULL ) { \\",
          "2352:   Image *image,const char letter,ExceptionInfo *exception)",
          "2354:   char",
          "",
          "[Added Lines]",
          "2330: %",
          "2331: %    o image: the image (optional)",
          "2332: %",
          "2336: %",
          "2342:   if (image == (Image *) NULL ) { \\",
          "2352:   }",
          "2354:   char",
          "2361:     (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);",
          "2362:   else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2481:     }",
          "2483:     {",
          "2487:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "2488:       colorspace=image->colorspace;",
          "2489:       if (SetImageGray(image,exception) != MagickFalse)",
          "",
          "[Removed Lines]",
          "2484:       ColorspaceType",
          "2485:         colorspace;",
          "",
          "[Added Lines]",
          "2486:       ColorspaceType",
          "2487:         colorspace;",
          "2489:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2564:       string=CommandOptionToMnemonic(MagickCompressOptions,",
          "2565:         (ssize_t) image->compression);",
          "2566:       break;",
          "2567:     }",
          "2569:     {",
          "2570:       WarnNoImageReturn(\"\\\"%%%c\\\"\",letter);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2570:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2577:       const char",
          "2580:       register char",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2689:     }",
          "2691:       string=\"%\";",
          "2695:       RectangleInfo",
          "2696:         page;",
          "",
          "[Removed Lines]",
          "2692:       break;",
          "2694:     {",
          "",
          "[Added Lines]",
          "2698:       break;",
          "2700:     {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3244: %",
          "3245: %  A description of each parameter follows:",
          "3246: %",
          "3247: %    o image_info: the image info. (required)",
          "3248: %",
          "3250: %",
          "3260: DisableMSCWarning(4127) \\",
          "3261:     size_t length=(string_length); \\",
          "3262:     if ((size_t) (q-interpret_text+length+1) >= extent) \\",
          "3264:        interpret_text=(char *) ResizeQuantumMemory(interpret_text, \\",
          "3277:      { extent+=length; \\",
          "3278:        interpret_text=(char *) ResizeQuantumMemory(interpret_text, \\",
          "3279:              extent+MagickPathExtent,sizeof(*interpret_text)); \\",
          "3281:          return((char *) NULL); \\",
          "3287: RestoreMSCWarning",
          "3293:     if ((size_t) (q-interpret_text+length+1) >= extent) \\",
          "3294:      { extent+=length; \\",
          "3298:         return((char *) NULL); \\",
          "3299:       q=interpret_text+strlen(interpret_text); \\",
          "3300:      } \\",
          "",
          "[Removed Lines]",
          "3249: %    o image: the image. (optional)",
          "3251: %    o embed_text: the address of a character string containing the embedded",
          "3252: %      formatting characters.",
          "3253: %",
          "3254: %    o exception: return any errors or warnings in this structure.",
          "3255: %",
          "3259: #define ExtendInterpretText(string_length)  do { \\",
          "3263:      { extent+=length; \\",
          "3265:              extent+MagickPathExtent,sizeof(*interpret_text)); \\",
          "3266:        if (interpret_text == (char *) NULL) \\",
          "3267:          return((char *) NULL); \\",
          "3268:        q=interpret_text+strlen(interpret_text); \\",
          "3269:    } } while (0)  /* no trailing ; */ \\",
          "3270: RestoreMSCWarning",
          "3273: #define AppendString2Text(string)  do { \\",
          "3274: DisableMSCWarning(4127) \\",
          "3275:     size_t length=strlen((string)); \\",
          "3276:     if ((size_t) (q-interpret_text+length+1) >= extent) \\",
          "3280:        if (interpret_text == (char *) NULL) \\",
          "3282:        q=interpret_text+strlen(interpret_text); \\",
          "3283:       } \\",
          "3284:      (void) CopyMagickString(q,(string),extent); \\",
          "3285:      q+=length; \\",
          "3286:    } while (0)  /* no trailing ; */ \\",
          "3290: #define AppendKeyValue2Text(key,string)  do { \\",
          "3291: DisableMSCWarning(4127) \\",
          "3292:     size_t length=strlen(key)+strlen(string)+2; \\",
          "3295:       interpret_text=(char *) ResizeQuantumMemory(interpret_text, \\",
          "3296:               extent+MagickPathExtent,sizeof(*interpret_text)); \\",
          "3297:       if (interpret_text == (char *) NULL) \\",
          "",
          "[Added Lines]",
          "3253: %    o image_info: the image info. (required)",
          "3254: %",
          "3255: %    o image: the image. (optional)",
          "3256: %",
          "3258: %      formatting characters.",
          "3259: %",
          "3260: %    o exception: return any errors or warnings in this structure.",
          "3261: %",
          "3263: MagickExport char *InterpretImageProperties(ImageInfo *image_info,",
          "3264:   Image *image,const char *embed_text,ExceptionInfo *exception)",
          "3265: {",
          "3266: #define ExtendInterpretText(string_length) \\",
          "3267: DisableMSCWarning(4127) \\",
          "3268: { \\",
          "3269:   size_t length=(string_length); \\",
          "3272:       extent+=length; \\",
          "3274:         MaxTextExtent,sizeof(*interpret_text)); \\",
          "3275:       if (interpret_text == (char *) NULL) \\",
          "3276:         return((char *) NULL); \\",
          "3277:       q=interpret_text+strlen(interpret_text); \\",
          "3278:    } \\",
          "3279: } \\",
          "3280: RestoreMSCWarning",
          "3282: #define AppendKeyValue2Text(key,value)\\",
          "3283: DisableMSCWarning(4127) \\",
          "3284: { \\",
          "3285:   size_t length=strlen(key)+strlen(value)+2; \\",
          "3286:   if ((size_t) (q-interpret_text+length+1) >= extent) \\",
          "3289:       interpret_text=(char *) ResizeQuantumMemory(interpret_text,extent+ \\",
          "3291:       if (interpret_text == (char *) NULL) \\",
          "3292:         return((char *) NULL); \\",
          "3293:       q=interpret_text+strlen(interpret_text); \\",
          "3294:      } \\",
          "3295:    q+=FormatLocaleString(q,extent,\"%s=%s\\n\",(key),(value)); \\",
          "3296: } \\",
          "3297: RestoreMSCWarning",
          "3301: { \\",
          "3302:   size_t length=strlen((string)); \\",
          "3303:   if ((size_t) (q-interpret_text+length+1) >= extent) \\",
          "3304:     { \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3314:   register const char",
          "3317:   size_t",
          "3321:     number;",
          "3323:   assert(image == NULL || image->signature == MagickCoreSignature);",
          "",
          "[Removed Lines]",
          "3320:   MagickBooleanType",
          "",
          "[Added Lines]",
          "3326:   size_t",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3326:   if (image != (Image *) NULL && image->debug != MagickFalse)",
          "3327:     (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);",
          "3328:   else if( image_info != (ImageInfo *) NULL && image_info->debug != MagickFalse)",
          "3329:     (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\"no-image\");",
          "3331:   if (embed_text == (const char *) NULL)",
          "3332:     return(ConstantString(\"\"));",
          "3333:   p=embed_text;",
          "3334:   while ((isspace((int) ((unsigned char) *p)) != 0) && (*p != '\\0'))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3339:   if (embed_text == (const char *) NULL)",
          "3340:     return(ConstantString(\"\"));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3347:           return(ConstantString(\"\"));",
          "3348:         }",
          "3349:       interpret_text=FileToString(p+1,~0UL,exception);",
          "3351:         return(interpret_text);",
          "3352:     }",
          "3355:     Translate any embedded format characters.",
          "3360:   for (q=interpret_text; *p!='\\0'; number=isdigit(*p) ? MagickTrue : MagickFalse,p++)",
          "3361:   {",
          "3363:     ExtendInterpretText(MagickPathExtent);",
          "3365:       Look for the various escapes, (and handle other specials)",
          "3367:     switch (*p) {",
          "3368:       case '\\\\':",
          "3369:         switch (*(p+1)) {",
          "3370:           case '\\0':",
          "3371:             continue;",
          "3374:             p++;",
          "3375:             continue;",
          "3378:             p++;",
          "3379:             continue;",
          "3381:             p++;",
          "3382:             continue;",
          "3384:             p++;",
          "3391:         }",
          "3392:         continue;",
          "3393:       case '&':",
          "3394:         if (LocaleNCompare(\"&lt;\",p,4) == 0)",
          "3396:         else if (LocaleNCompare(\"&gt;\",p,4) == 0)",
          "3398:         else if (LocaleNCompare(\"&amp;\",p,5) == 0)",
          "3400:         else",
          "3403:       case '%':",
          "3405:       default:",
          "3407:         continue;",
          "3408:     }",
          "3412:       Doubled Percent - or percent at end of string",
          "3416:     if (*p == '%') {",
          "3421:       Single letter escapes  %c",
          "3441:           continue;",
          "3442:         }",
          "3443:       (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning,",
          "",
          "[Removed Lines]",
          "3350:       if (interpret_text != (char *) NULL)",
          "3386:               p++;",
          "3387:             continue;",
          "3388:           default:",
          "3389:             p++;",
          "3402:         continue;",
          "3414:     if ((*p == '\\0') || (*p == '\\'') || (*p == '\"'))",
          "3415:       p--;",
          "3418:         continue;",
          "3419:       }",
          "3423:     if ( *p != '[' ) {",
          "3424:       const char",
          "3428:       if (number != MagickFalse) {",
          "3431:         continue;",
          "3432:       }",
          "3433:       string=GetMagickPropertyLetter(image_info,image,*p, exception);",
          "3434:       if (string != (char *) NULL)",
          "3435:         {",
          "3436:           AppendString2Text(string);",
          "3437:           if (image != (Image *) NULL)",
          "3438:             (void)DeleteImageArtifact(image,\"get-property\");",
          "3439:           if (image_info != (ImageInfo *) NULL)",
          "3440:             (void)DeleteImageOption(image_info,\"get-property\");",
          "",
          "[Added Lines]",
          "3359:       if (interpret_text != (char *) NULL)",
          "3360:         return(interpret_text);",
          "3370:     number=isdigit(*p) ? MagickTrue : MagickFalse,p++)",
          "3371:   {",
          "3376:     ExtendInterpretText(MagickPathExtent);",
          "3380:       {",
          "3381:         switch (*(p+1))",
          "3382:         {",
          "3386:           {",
          "3388:             p++;",
          "3392:           {",
          "3398:           {",
          "3400:             continue;",
          "3403:           {",
          "3406:               p++;",
          "3408:           }",
          "3410:           {",
          "3411:             p++;",
          "3413:           }",
          "3415:         continue;",
          "3416:       }",
          "3417:       case '&':",
          "3418:       {",
          "3419:         if (LocaleNCompare(\"&lt;\",p,4) == 0)",
          "3420:           {",
          "3422:             p+=3;",
          "3423:           }",
          "3424:         else",
          "3425:           if (LocaleNCompare(\"&gt;\",p,4) == 0)",
          "3426:             {",
          "3429:             }",
          "3436:             else",
          "3440:       case '%':",
          "3445:         continue;",
          "3450:       Doubled Percent - or percent at end of string.",
          "3452:     if ((*p == '\\0') || (*p == '\\'') || (*p == '\"'))",
          "3453:       p--;",
          "3454:     if (*p == '%')",
          "3455:       {",
          "3457:         continue;",
          "3458:       }",
          "3460:       Single letter escapes %c.",
          "3462:     if (*p != '[')",
          "3463:       {",
          "3464:         const char",
          "3467:         if (number != MagickFalse)",
          "3468:           {",
          "3470:               But only if not preceeded by a number!",
          "3474:             continue;",
          "3475:           }",
          "3476:         string=GetMagickPropertyLetter(image_info,image,*p, exception);",
          "3477:         if (string != (char *) NULL)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3452:       char",
          "3453:         pattern[2*MagickPathExtent];",
          "3455:       const char",
          "3463:         depth;",
          "3471:         break;",
          "3472:       }",
          "3473:       for (len=0; len<(MagickPathExtent-1L) && (*p != '\\0');)",
          "",
          "[Removed Lines]",
          "3459:       register ssize_t",
          "3460:         len;",
          "3462:       ssize_t",
          "3467:       depth=1;",
          "3468:       if ( *p == ']' ) {",
          "3469:         (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning,",
          "3470:           \"UnknownImageProperty\",\"\\\"%%[]\\\"\");",
          "",
          "[Added Lines]",
          "3499:         len;",
          "3501:       ssize_t",
          "3502:         depth;",
          "3508:       depth=1;",
          "3509:       if (*p == ']')",
          "3510:         {",
          "3511:           (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning,",
          "3512:             \"UnknownImageProperty\",\"\\\"%%[]\\\"\");",
          "3513:           break;",
          "3514:         }",
          "3515:       for (len=0; len<(MagickPathExtent-1L) && (*p != '\\0');)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3477:           pattern[len++]=(*p++);",
          "3478:           pattern[len++]=(*p++);",
          "3479:           continue;",
          "3480:         }",
          "3489:       pattern[len]='\\0';",
          "3494:           pattern[62] = '.';",
          "3496:           pattern[64] = '\\0';",
          "3497:         }",
          "3498:         (void) ThrowMagickException(exception,GetMagickModule(),",
          "3499:             OptionError,\"UnbalancedBraces\",\"\\\"%%[%s\\\"\",pattern);",
          "3500:         interpret_text=DestroyString(interpret_text);",
          "",
          "[Removed Lines]",
          "3481:         if (*p == '[')",
          "3482:           depth++;",
          "3483:         if (*p == ']')",
          "3484:           depth--;",
          "3485:         if (depth <= 0)",
          "3486:           break;",
          "3487:         pattern[len++]=(*p++);",
          "3488:       }",
          "3491:       if ( depth != 0 ) {",
          "3493:           pattern[61] = '.';",
          "3495:           pattern[63] = '.';",
          "",
          "[Added Lines]",
          "3525:           }",
          "3526:         if (*p == '[')",
          "3527:           depth++;",
          "3528:         if (*p == ']')",
          "3529:           depth--;",
          "3530:         if (depth <= 0)",
          "3531:           break;",
          "3532:         pattern[len++]=(*p++);",
          "3533:       }",
          "3534:       pattern[len]='\\0';",
          "3535:       if (depth != 0)",
          "3536:         {",
          "3540:           if (len >= 64)",
          "3541:             {",
          "3543:               pattern[62] = '.';",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3508:       if (LocaleNCompare(\"fx:\",pattern,3) == 0)",
          "3514:             value;",
          "3516:           MagickBooleanType",
          "",
          "[Removed Lines]",
          "3509:         {",
          "3510:           FxInfo",
          "3513:           double",
          "",
          "[Added Lines]",
          "3557:           FxInfo",
          "3560:           double",
          "3561:             value;",
          "3564:             status;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3541:         {",
          "3542:           FxInfo",
          "3546:             value;",
          "3549:             status;",
          "3551:           PixelInfo",
          "",
          "[Removed Lines]",
          "3545:           double",
          "3548:           MagickStatusType",
          "",
          "[Added Lines]",
          "3595:           double",
          "3596:             value;",
          "3598:           MagickStatusType",
          "3599:             status;",
          "3602:             pixel;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3578:           pixel.alpha=(double) QuantumRange*value;",
          "3579:           fx_info=DestroyFxInfo(fx_info);",
          "3580:           if (status != MagickFalse)",
          "3581:             {",
          "3582:               char",
          "3590:         }",
          "3600:         {",
          "3601:           ResetImageOptionIterator(image_info);",
          "3609:               }",
          "3617:       }",
          "3627:         {",
          "3628:           ResetImageArtifactIterator(image);",
          "3636:               }",
          "3644:       }",
          "3654:         {",
          "3655:           ResetImagePropertyIterator(image);",
          "3666:         string=GetImageProperty(image,pattern+9,exception);",
          "3667:         if (string == (char *) NULL)",
          "3669:         AppendString2Text(string);",
          "3670:         continue;",
          "",
          "[Removed Lines]",
          "3583:                 name[MagickPathExtent];",
          "3585:               (void) QueryColorname(image,&pixel,SVGCompliance,name,",
          "3586:                 exception);",
          "3587:               AppendString2Text(name);",
          "3588:             }",
          "3589:           continue;",
          "3592:       if (LocaleNCompare(\"option:\",pattern,7) == 0)",
          "3593:       {",
          "3594:         if (image_info == (ImageInfo *) NULL ) {",
          "3595:           (void) ThrowMagickException(exception,GetMagickModule(),",
          "3596:               OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "3598:         }",
          "3599:         if (IsGlob(pattern+7) != MagickFalse)",
          "3602:           while ((key=GetNextImageOption(image_info)) != (const char *) NULL)",
          "3603:             if (GlobExpression(key,pattern+7,MagickTrue) != MagickFalse)",
          "3604:               {",
          "3605:                 string=GetImageOption(image_info,key);",
          "3606:                 if (string != (const char *) NULL)",
          "3607:                   AppendKeyValue2Text(key,string);",
          "3610:           continue;",
          "3611:         }",
          "3612:         string=GetImageOption(image_info,pattern+7);",
          "3613:         if (string == (char *) NULL)",
          "3615:         AppendString2Text(string);",
          "3616:         continue;",
          "3619:       if (LocaleNCompare(\"artifact:\",pattern,9) == 0)",
          "3620:       {",
          "3621:         if (image == (Image *) NULL ) {",
          "3622:           (void) ThrowMagickException(exception,GetMagickModule(),",
          "3623:               OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "3625:         }",
          "3626:         if (IsGlob(pattern+9) != MagickFalse)",
          "3629:           while ((key=GetNextImageArtifact(image)) != (const char *) NULL)",
          "3630:             if (GlobExpression(key,pattern+9,MagickTrue) != MagickFalse)",
          "3631:               {",
          "3632:                 string=GetImageArtifact(image,key);",
          "3633:                 if (string != (const char *) NULL)",
          "3634:                   AppendKeyValue2Text(key,string);",
          "3637:           continue;",
          "3638:         }",
          "3639:         string=GetImageArtifact(image,pattern+9);",
          "3640:         if (string == (char *) NULL)",
          "3642:         AppendString2Text(string);",
          "3643:         continue;",
          "3646:       if (LocaleNCompare(\"property:\",pattern,9) == 0)",
          "3647:       {",
          "3648:         if (image == (Image *) NULL ) {",
          "3649:           (void) ThrowMagickException(exception,GetMagickModule(),",
          "3650:               OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "3652:         }",
          "3653:         if (IsGlob(pattern+9) != MagickFalse)",
          "3656:           while ((key=GetNextImageProperty(image)) != (const char *) NULL)",
          "3657:             if (GlobExpression(key,pattern,MagickTrue) != MagickFalse)",
          "3658:               {",
          "3659:                 string=GetImageProperty(image,key,exception);",
          "3660:                 if (string != (const char *) NULL)",
          "3661:                   AppendKeyValue2Text(key,string);",
          "3663:               }",
          "3664:           continue;",
          "3665:         }",
          "",
          "[Added Lines]",
          "3639:               (void) QueryColorname(image,&pixel,SVGCompliance,name,",
          "3640:                 exception);",
          "3641:               AppendString2Text(name);",
          "3642:             }",
          "3643:           continue;",
          "3644:         }",
          "3645:       if (LocaleNCompare(\"option:\",pattern,7) == 0)",
          "3646:         {",
          "3648:             Option - direct global option lookup (with globbing).",
          "3650:           if (image_info == (ImageInfo *) NULL )",
          "3651:             {",
          "3652:               (void) ThrowMagickException(exception,GetMagickModule(),",
          "3653:                 OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "3655:             }",
          "3656:           if (IsGlob(pattern+7) != MagickFalse)",
          "3657:             {",
          "3658:               ResetImageOptionIterator(image_info);",
          "3659:               while ((key=GetNextImageOption(image_info)) != (const char *) NULL)",
          "3660:                 if (GlobExpression(key,pattern+7,MagickTrue) != MagickFalse)",
          "3661:                   {",
          "3662:                     string=GetImageOption(image_info,key);",
          "3668:             }",
          "3669:           string=GetImageOption(image_info,pattern+7);",
          "3670:           if (string == (char *) NULL)",
          "3672:           AppendString2Text(string);",
          "3673:           continue;",
          "3674:         }",
          "3675:       if (LocaleNCompare(\"artifact:\",pattern,9) == 0)",
          "3676:         {",
          "3678:             Artifact - direct image artifact lookup (with glob).",
          "3680:           if (image == (Image *) NULL)",
          "3681:             {",
          "3682:               (void) ThrowMagickException(exception,GetMagickModule(),",
          "3683:                 OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "3685:             }",
          "3686:           if (IsGlob(pattern+9) != MagickFalse)",
          "3687:             {",
          "3688:               ResetImageArtifactIterator(image);",
          "3689:               while ((key=GetNextImageArtifact(image)) != (const char *) NULL)",
          "3690:               if (GlobExpression(key,pattern+9,MagickTrue) != MagickFalse)",
          "3691:                 {",
          "3692:                   string=GetImageArtifact(image,key);",
          "3698:             }",
          "3699:           string=GetImageArtifact(image,pattern+9);",
          "3700:           if (string == (char *) NULL)",
          "3702:           AppendString2Text(string);",
          "3703:           continue;",
          "3704:         }",
          "3705:       if (LocaleNCompare(\"property:\",pattern,9) == 0)",
          "3706:         {",
          "3708:             Property - direct image property lookup (with glob).",
          "3710:           if (image == (Image *) NULL)",
          "3711:             {",
          "3712:               (void) ThrowMagickException(exception,GetMagickModule(),",
          "3713:                 OptionWarning,\"NoImageForProperty\",\"\\\"%%[%s]\\\"\",pattern);",
          "3715:             }",
          "3716:           if (IsGlob(pattern+9) != MagickFalse)",
          "3717:             {",
          "3718:               ResetImagePropertyIterator(image);",
          "3719:               while ((key=GetNextImageProperty(image)) != (const char *) NULL)",
          "3720:                 if (GlobExpression(key,pattern,MagickTrue) != MagickFalse)",
          "3721:                   {",
          "3722:                     string=GetImageProperty(image,key,exception);",
          "3728:             }",
          "3729:           string=GetImageProperty(image,pattern+9,exception);",
          "3730:           if (string == (char *) NULL)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3676:       if (image != (Image *) NULL)",
          "3677:         {",
          "3678:           string=GetImageProperty(image,pattern,exception);",
          "3679:           if (string != (const char *) NULL)",
          "3683:                 (void)DeleteImageArtifact(image,\"get-property\");",
          "3684:               if (image_info != (ImageInfo *) NULL)",
          "3685:                 (void)DeleteImageOption(image_info,\"get-property\");",
          "3686:               continue;",
          "3687:             }",
          "",
          "[Removed Lines]",
          "3680:             {",
          "3681:               AppendString2Text(string);",
          "3682:               if (image != (Image *) NULL)",
          "",
          "[Added Lines]",
          "3746:               if (image != (Image *) NULL)",
          "3747:                 (void)DeleteImageArtifact(image,\"get-property\");",
          "3748:               if (image_info != (ImageInfo *) NULL)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3697:           ResetImagePropertyIterator(image);",
          "3698:           while ((key=GetNextImageProperty(image)) != (const char *) NULL)",
          "3702:                 if (string != (const char *) NULL)",
          "3703:                   AppendKeyValue2Text(key,string);",
          "",
          "[Removed Lines]",
          "3699:             if (GlobExpression(key,pattern,MagickTrue) != MagickFalse)",
          "3700:               {",
          "3701:                 string=GetImageProperty(image,key,exception);",
          "",
          "[Added Lines]",
          "3763:             if (GlobExpression(key,pattern,MagickTrue) != MagickFalse)",
          "3764:               {",
          "3765:                 string=GetImageProperty(image,key,exception);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3707:         }",
          "3709:         Look for a known property or image attribute",
          "3713:       string=GetMagickProperty(image_info,image,pattern,exception);",
          "3714:       if (string != (const char *) NULL)",
          "",
          "[Removed Lines]",
          "3710:         Such as  %[basename]  %[denisty]  %[delay]",
          "3711:         Also handles a braced single letter:  %[b] %[G] %[g]",
          "",
          "[Added Lines]",
          "3774:         %[basename] %[denisty] %[delay].  Also handles a braced single",
          "3775:         letter: %[b] %[G] %[g].",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3720:         Look for a per-image Artifact",
          "3721:         This includes option lookup (FUTURE: interpreted according to image)",
          "3723:       if (image != (Image *) NULL)",
          "3724:         {",
          "3725:           string=GetImageArtifact(image,pattern);",
          "3726:           if (string != (char *) NULL)",
          "3727:             {",
          "3728:               AppendString2Text(string);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3790:           if (string != (char *) NULL)",
          "3791:             {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3734:         if (image_info != (ImageInfo *) NULL)",
          "3735:           {",
          "3736:             string=GetImageOption(image_info,pattern);",
          "3737:             if (string != (char *) NULL)",
          "3749:         pattern[62] = '.';",
          "3750:         pattern[63] = '.';",
          "3751:         pattern[64] = '\\0';",
          "",
          "[Removed Lines]",
          "3738:               {",
          "3739:                 AppendString2Text(string);",
          "3740:                 continue;",
          "3741:               }",
          "3742:           }",
          "3743: PropertyLookupFailure:",
          "3745:         Failed to find any match anywhere!",
          "3748:         pattern[61] = '.';",
          "",
          "[Added Lines]",
          "3803:             if (string != (char *) NULL)",
          "3804:               {",
          "3805:                 AppendString2Text(string);",
          "3806:                 continue;",
          "3807:               }",
          "3808:           }",
          "3809: PropertyLookupFailure:",
          "3811:         Failed to find any match anywhere!",
          "3813:       if (len >= 64)",
          "",
          "---------------"
        ]
      }
    }
  ]
}