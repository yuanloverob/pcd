{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a556145a2c973303fd70315d9b77f126f43638f0",
      "candidate_info": {
        "commit_hash": "a556145a2c973303fd70315d9b77f126f43638f0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a556145a2c973303fd70315d9b77f126f43638f0",
        "files": [
          "ssl/ssl_sess.c"
        ],
        "message": "prevent undefined behavior when src and dst are equal\n\nCLA: trivial\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2750)\n\n(cherry picked from commit 6aad9393680ccde591905c8d71da92a241756394)",
        "before_after_code_files": [
          "ssl/ssl_sess.c||ssl/ssl_sess.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/ssl_sess.c||ssl/ssl_sess.c": [
          "File: ssl/ssl_sess.c -> ssl/ssl_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "814:       return 0;",
          "815:     }",
          "816:     s->session_id_length = sid_len;",
          "818:     return 1;",
          "819: }",
          "",
          "[Removed Lines]",
          "817:     memcpy(s->session_id, sid, sid_len);",
          "",
          "[Added Lines]",
          "817:     if (sid != s->session_id)",
          "818:         memcpy(s->session_id, sid, sid_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "895:         return 0;",
          "896:     }",
          "897:     s->sid_ctx_length = sid_ctx_len;",
          "900:     return 1;",
          "901: }",
          "",
          "[Removed Lines]",
          "898:     memcpy(s->sid_ctx, sid_ctx, sid_ctx_len);",
          "",
          "[Added Lines]",
          "899:     if (sid_ctx != s->sid_ctx)",
          "900:         memcpy(s->sid_ctx, sid_ctx, sid_ctx_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
      "candidate_info": {
        "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
        "files": [
          "ssl/statem/statem_clnt.c"
        ],
        "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2258:         return 0;",
          "2259:     }",
          "2260:     ckey = ssl_generate_pkey(skey);",
          "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
          "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2261:     if (ckey == NULL) {",
          "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
          "2263:         return 0;",
          "2264:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2296:     }",
          "2298:     ckey = ssl_generate_pkey(skey);",
          "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
          "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2304:     if (ckey == NULL) {",
          "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
          "2306:         goto err;",
          "2307:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c0ead5c68f2707f7158a251520dcd63d768a7f4",
      "candidate_info": {
        "commit_hash": "0c0ead5c68f2707f7158a251520dcd63d768a7f4",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0c0ead5c68f2707f7158a251520dcd63d768a7f4",
        "files": [
          "test/evp_test.c"
        ],
        "message": "Remove BIO_seek/BIO_tell from evp_test.c\n\nBIO_seek and BIO_tell can cause problems with evp_test.c on some platforms.\nAvoid them by using a temporary memory BIO to store key PEM data.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2183)\n(cherry picked from commit 71f60ef3376144885384f2b1b3f00c3d54806f38)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: struct evp_test {",
          "199:     BIO *in;",
          "201:     struct key_list *private;",
          "202:     struct key_list *public;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:     BIO *key;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459:     return 0;",
          "460: }",
          "462: static int process_test(struct evp_test *t, char *buf, int verbose)",
          "463: {",
          "464:     char *keyword = NULL, *value = NULL;",
          "465:     int rv = 0, add_key = 0;",
          "467:     struct key_list **lst = NULL, *key = NULL;",
          "468:     EVP_PKEY *pk = NULL;",
          "469:     const struct evp_test_method *tmeth = NULL;",
          "",
          "[Removed Lines]",
          "466:     long save_pos = 0;",
          "",
          "[Added Lines]",
          "465: static int read_key(struct evp_test *t)",
          "466: {",
          "467:     char tmpbuf[80];",
          "468:     if (t->key == NULL)",
          "469:         t->key = BIO_new(BIO_s_mem());",
          "470:     else if (BIO_reset(t->key) <= 0)",
          "471:         return 0;",
          "472:     if (t->key == NULL) {",
          "473:         fprintf(stderr, \"Error allocating key memory BIO\\n\");",
          "474:         return 0;",
          "475:     }",
          "477:     while (BIO_gets(t->in, tmpbuf, sizeof(tmpbuf))) {",
          "478:         t->line++;",
          "479:         if (BIO_puts(t->key, tmpbuf) <= 0) {",
          "480:             fprintf(stderr, \"Error writing to key memory BIO\\n\");",
          "481:             return 0;",
          "482:         }",
          "483:         if (strncmp(tmpbuf, \"-----END\", 8) == 0)",
          "484:             return 1;",
          "485:     }",
          "486:     fprintf(stderr, \"Can't find key end\\n\");",
          "487:     return 0;",
          "488: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "472:     if (!parse_line(&keyword, &value, buf))",
          "473:         return 1;",
          "474:     if (strcmp(keyword, \"PrivateKey\") == 0) {",
          "477:         if (pk == NULL && !check_unsupported()) {",
          "478:             fprintf(stderr, \"Error reading private key %s\\n\", value);",
          "479:             ERR_print_errors_fp(stderr);",
          "",
          "[Removed Lines]",
          "475:         save_pos = BIO_tell(t->in);",
          "476:         pk = PEM_read_bio_PrivateKey(t->in, NULL, 0, NULL);",
          "",
          "[Added Lines]",
          "502:         if (!read_key(t))",
          "503:             return 0;",
          "504:         pk = PEM_read_bio_PrivateKey(t->key, NULL, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "483:         add_key = 1;",
          "484:     }",
          "485:     if (strcmp(keyword, \"PublicKey\") == 0) {",
          "488:         if (pk == NULL && !check_unsupported()) {",
          "489:             fprintf(stderr, \"Error reading public key %s\\n\", value);",
          "490:             ERR_print_errors_fp(stderr);",
          "",
          "[Removed Lines]",
          "486:         save_pos = BIO_tell(t->in);",
          "487:         pk = PEM_read_bio_PUBKEY(t->in, NULL, 0, NULL);",
          "",
          "[Added Lines]",
          "514:         if (!read_key(t))",
          "515:             return 0;",
          "516:         pk = PEM_read_bio_PUBKEY(t->key, NULL, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "495:     }",
          "497:     if (add_key) {",
          "499:         if (find_key(NULL, value, *lst)) {",
          "500:             fprintf(stderr, \"Duplicate key %s\\n\", value);",
          "501:             return 0;",
          "",
          "[Removed Lines]",
          "498:         char tmpbuf[80];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "507:         key->key = pk;",
          "508:         key->next = *lst;",
          "519:     }",
          "",
          "[Removed Lines]",
          "511:         (void)BIO_seek(t->in, save_pos);",
          "512:         while (BIO_gets(t->in,tmpbuf, sizeof(tmpbuf))) {",
          "513:             t->line++;",
          "514:             if (strncmp(tmpbuf, \"-----END\", 8) == 0)",
          "515:                 return 1;",
          "516:         }",
          "517:         fprintf(stderr, \"Can't find key end\\n\");",
          "518:         return 0;",
          "",
          "[Added Lines]",
          "538:         return 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "639:             t.ntests, t.errors, t.nskip);",
          "640:     free_key_list(t.public);",
          "641:     free_key_list(t.private);",
          "642:     BIO_free(in);",
          "644: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:     BIO_free(t.key);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69bb97c6d65250324a65fbb6fcac3fefb59d242a",
      "candidate_info": {
        "commit_hash": "69bb97c6d65250324a65fbb6fcac3fefb59d242a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/69bb97c6d65250324a65fbb6fcac3fefb59d242a",
        "files": [
          "crypto/o_dir.c"
        ],
        "message": "Fix typo, missing ||\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2707)\n(cherry picked from commit 6eb837583758506607f538fe2a3dd87925e4e69d)",
        "before_after_code_files": [
          "crypto/o_dir.c||crypto/o_dir.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/o_dir.c||crypto/o_dir.c": [
          "File: crypto/o_dir.c -> crypto/o_dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define LPDIR_H",
          "26: #if defined OPENSSL_SYS_UNIX || defined DJGPP \\",
          "28: # include \"LPdir_unix.c\"",
          "29: #elif defined OPENSSL_SYS_VMS",
          "30: # include \"LPdir_vms.c\"",
          "",
          "[Removed Lines]",
          "27:     (defined __VMS_VER && __VMS_VER >= 70000000)",
          "",
          "[Added Lines]",
          "27:     || (defined __VMS_VER && __VMS_VER >= 70000000)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1163cc8b87547d4506de0b037fa1bd69781e818",
      "candidate_info": {
        "commit_hash": "b1163cc8b87547d4506de0b037fa1bd69781e818",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b1163cc8b87547d4506de0b037fa1bd69781e818",
        "files": [
          "apps/s_client.c"
        ],
        "message": "Fix a -Wsign-compare warning\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2940)\n(cherry picked from commit 96a5d7fdbaa7aea5e5090e0f7dc2973943986fc9)",
        "before_after_code_files": [
          "apps/s_client.c||apps/s_client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:                    psk_key);",
          "176:         return 0;",
          "177:     }",
          "179:         BIO_printf(bio_err,",
          "180:                    \"psk buffer of callback is too small (%d) for key (%ld)\\n\",",
          "181:                    max_psk_len, key_len);",
          "",
          "[Removed Lines]",
          "178:     if (key_len > max_psk_len) {",
          "",
          "[Added Lines]",
          "178:     if (max_psk_len > INT_MAX || key_len > (long)max_psk_len) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}