{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "10d98361eceff54e71f90a7b947bdd66bfe9f0b9",
      "candidate_info": {
        "commit_hash": "10d98361eceff54e71f90a7b947bdd66bfe9f0b9",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/10d98361eceff54e71f90a7b947bdd66bfe9f0b9",
        "files": [
          "run_sgx_sim/docker-compose.yml",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-2871-reduce-sgx-logs",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     enclave_init();",
          "94: }",
          "96: void free_function(void *ptr, size_t sz) {",
          "",
          "[Removed Lines]",
          "93:     LOG_DEBUG(\"SUCCESS\");",
          "",
          "[Added Lines]",
          "93:     LOG_INFO(\"Successfully inited enclave\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1035:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey);",
          "1036:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
          "1040:     if (status != 0) {",
          "1041:         snprintf(errString, BUF_LEN, \"AES_decrypt failed with status %d\", status);",
          "",
          "[Removed Lines]",
          "1037:     LOG_INFO(\"ENCRYPTED SKEY\");",
          "1038:     LOG_INFO(skey);",
          "",
          "[Added Lines]",
          "1037:     LOG_TRACE(\"ENCRYPTED SKEY\");",
          "1038:     LOG_TRACE(skey);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1060:         return;",
          "1061:     }",
          "1065:     point Pkey = point_init();",
          "1067:     signature_extract_public_key(Pkey, privateKeyMpz, curve);",
          "1070:     point Pkey_test = point_init();",
          "1071:     point_multiplication(Pkey_test, privateKeyMpz, curve->G, curve);",
          "1074:     if (!point_cmp(Pkey, Pkey_test)) {",
          "1075:         snprintf(errString, BUF_LEN, \"Points are not equal\");",
          "",
          "[Removed Lines]",
          "1062:     LOG_INFO(\"SET STR SUCCESS\");",
          "1068:     LOG_INFO(\"SIGNATURE EXTRACT PK SUCCESS\");",
          "1072:     LOG_INFO(\"POINT MULTIPLICATION SUCCESS\");",
          "",
          "[Added Lines]",
          "1062:     LOG_TRACE(\"SET STR SUCCESS\");",
          "1068:     LOG_TRACE(\"SIGNATURE EXTRACT PK SUCCESS\");",
          "1072:     LOG_TRACE(\"POINT MULTIPLICATION SUCCESS\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1083:         return;",
          "1084:     }",
          "1087:     int len = mpz_sizeinbase(Pkey->x, ECDSA_SKEY_BASE) + 2;",
          "1089:     char arr_x[len];",
          "1090:     mpz_get_str(arr_x, ECDSA_SKEY_BASE, Pkey->x);",
          "1094:     int n_zeroes = 64 - strlen(arr_x);",
          "1095:     for (int i = 0; i < n_zeroes; i++) {",
          "",
          "[Removed Lines]",
          "1085:     LOG_INFO(\"POINTS CMP SUCCESS\");",
          "1091:     LOG_INFO(\"GET STR X SUCCESS\");",
          "1092:     LOG_INFO(arr_x);",
          "",
          "[Added Lines]",
          "1085:     LOG_TRACE(\"POINTS CMP SUCCESS\");",
          "1091:     LOG_TRACE(\"GET STR X SUCCESS\");",
          "1092:     LOG_TRACE(arr_x);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1101:     char arr_y[mpz_sizeinbase(Pkey->y, ECDSA_SKEY_BASE) + 2];",
          "1102:     mpz_get_str(arr_y, ECDSA_SKEY_BASE, Pkey->y);",
          "1105:     n_zeroes = 64 - strlen(arr_y);",
          "1106:     for (int i = 0; i < n_zeroes; i++) {",
          "1107:         pub_key_y[i] = '0';",
          "",
          "[Removed Lines]",
          "1103:     LOG_INFO(\"GET STR Y SUCCESS\");",
          "1104:     LOG_INFO(arr_y);",
          "",
          "[Added Lines]",
          "1103:     LOG_TRACE(\"GET STR Y SUCCESS\");",
          "1104:     LOG_TRACE(arr_y);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d8a9bcf755d2733b56b888a404a094683b35430",
      "candidate_info": {
        "commit_hash": "6d8a9bcf755d2733b56b888a404a094683b35430",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/6d8a9bcf755d2733b56b888a404a094683b35430",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "986:     uint32_t len = key_len;",
          "",
          "[Removed Lines]",
          "984:     char skey_hex[ECDSA_SKEY_LEN];",
          "",
          "[Added Lines]",
          "984:     SAFE_CHAR_BUF(skey_hex,ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1145:     }",
          "1146:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "1150:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
          "1151:     n_zeroes = 64 - strlen(arr_skey_str);",
          "1152:     for (int i = 0; i < n_zeroes; i++) {",
          "",
          "[Removed Lines]",
          "1148:     char skey_str[ECDSA_SKEY_LEN];",
          "1149:     char arr_skey_str[mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2];",
          "",
          "[Added Lines]",
          "1149:     SAFE_CHAR_BUF(skey_str,ECDSA_SKEY_LEN);",
          "1150:     SAFE_CHAR_BUF(arr_skey_str,mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0aeee50215b44858d952d608cf56b29d046d5d23",
      "candidate_info": {
        "commit_hash": "0aeee50215b44858d952d608cf56b29d046d5d23",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/0aeee50215b44858d952d608cf56b29d046d5d23",
        "files": [
          "BLSCrypto.cpp",
          "BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "ECDSACrypto.cpp",
          "LevelDB.cpp",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "ServerDataChecker.cpp",
          "ServerDataChecker.h",
          "ServerInit.cpp",
          "abstractstubserver.h",
          "secure_enclave/DH_dkg.c",
          "secure_enclave/secure_enclave.c",
          "sgxwallet_common.h",
          "stubclient.h",
          "testw.cpp"
        ],
        "message": "SKALE-1795-Add-some-methods-to-DKG Make same order of parameters t,n in DKG",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "LevelDB.cpp||LevelDB.cpp",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "ServerDataChecker.cpp||ServerDataChecker.cpp",
          "ServerDataChecker.h||ServerDataChecker.h",
          "ServerInit.cpp||ServerInit.cpp",
          "abstractstubserver.h||abstractstubserver.h",
          "secure_enclave/DH_dkg.c||secure_enclave/DH_dkg.c",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "sgxwallet_common.h||sgxwallet_common.h",
          "stubclient.h||stubclient.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:   uint64_t binLen;",
          "128:   auto keyShare = std::make_shared<BLSPrivateKeyShareSGX>(keyStr, _t, _n);",
          "",
          "[Removed Lines]",
          "125:   hex2carray(_hashHex, &binLen, hash->data());",
          "",
          "[Added Lines]",
          "125:   if (!hex2carray(_hashHex, &binLen, hash->data())){",
          "126:       throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "127:   }",
          "",
          "---------------"
        ],
        "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp": [
          "File: BLSPrivateKeyShareSGX.cpp -> BLSPrivateKeyShareSGX.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:   int sigLen;",
          "184:   if ((sigLen = strnlen(signature, 10)) < 10) {",
          "186:   }",
          "",
          "[Removed Lines]",
          "185:       BOOST_THROW_EXCEPTION(runtime_error(\"Signature too short:\" + to_string(sigLen)));",
          "",
          "[Added Lines]",
          "185:      BOOST_THROW_EXCEPTION(runtime_error(\"Signature is too short:\" + to_string(sigLen)));",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     return result;",
          "70: }",
          "74:   char* errMsg1 = (char*) calloc(1024,1);",
          "75:   int err_status = 0;",
          "",
          "[Removed Lines]",
          "72: std::vector <std::vector<std::string>> get_verif_vect(const char* encryptedPolyHex, int n, int t){",
          "",
          "[Added Lines]",
          "72: std::vector <std::vector<std::string>> get_verif_vect(const char* encryptedPolyHex, int t, int n){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:   uint64_t enc_len = 0;",
          "83:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "85:   std::cerr << \"enc len \" << enc_len << std::endl;",
          "87:   for ( int i = 0 ; i < 3050; i++)",
          "",
          "[Removed Lines]",
          "84:   hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100);",
          "",
          "[Added Lines]",
          "84:   if (!hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100)){",
          "85:       throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "86:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:   return pub_shares_vect;",
          "114: }",
          "117:   char* errMsg1 = (char*) calloc(1024,1);",
          "118:   int err_status = 0;",
          "120:   uint64_t enc_len = 0;",
          "122:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "125:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg1, encr_dkg_poly);",
          "",
          "[Removed Lines]",
          "116: std::string get_secret_shares(const std::string& polyName, const char* encryptedPolyHex, const std::vector<std::string>& publicKeys, int n, int t){",
          "123:   hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100);",
          "",
          "[Added Lines]",
          "118: std::string get_secret_shares(const std::string& polyName, const char* encryptedPolyHex, const std::vector<std::string>& publicKeys, int t, int n){",
          "125:   if(!hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100)){",
          "126:       throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "127:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "147:     std::cerr << \"dec len is \" << dec_len << std::endl;",
          "148:     carray2Hex(encrypted_skey, dec_len, hexEncrKey);",
          "161:     std::cerr << errMsg1 << std::endl << std::endl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:     std::string DHKey_name = \"DKG_DH_KEY_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "155:     std::cerr << \"name to write to db is \" << DHKey_name << std::endl;",
          "157:     writeDataToDB(DHKey_name, hexEncrKey);",
          "159:     std::string shareG2_name = \"shareG2_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "160:     std::cerr << \"name to write to db is \" << shareG2_name << std::endl;",
          "161:     std::cerr << \"s_shareG2: \" << s_shareG2 << std::endl;",
          "162:     writeDataToDB(shareG2_name, s_shareG2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "179:     uint64_t dec_key_len ;",
          "180:     uint8_t encr_key[BUF_LEN];",
          "",
          "[Removed Lines]",
          "181:     hex2carray(encryptedKeyHex, &dec_key_len, encr_key);",
          "",
          "[Added Lines]",
          "184:     if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)){",
          "185:         throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "186:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "209:   uint64_t dec_key_len ;",
          "210:   uint8_t encr_bls_key[BUF_LEN];",
          "211:   uint8_t encr_key[BUF_LEN];",
          "214:   uint32_t enc_bls_len = 0;",
          "",
          "[Removed Lines]",
          "212:   hex2carray(encryptedKeyHex, &dec_key_len, encr_key);",
          "",
          "[Added Lines]",
          "217:   if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)){",
          "218:       throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "219:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "240:     uint64_t dec_key_len ;",
          "241:     uint8_t encr_bls_key[BUF_LEN];",
          "242:     uint8_t encr_key[BUF_LEN];",
          "",
          "[Removed Lines]",
          "243:     hex2carray(encryptedKeyHex, &dec_key_len, encr_key);",
          "",
          "[Added Lines]",
          "250:     if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)){",
          "251:         throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "252:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "269:   uint64_t DH_enc_len = 0;",
          "270:   uint8_t encrypted_DHkey[BUF_LEN];",
          "273:   char DHKey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "271:   hex2carray(hexEncrKey_ptr->c_str(), &DH_enc_len, encrypted_DHkey);",
          "",
          "[Added Lines]",
          "280:   if (!hex2carray(hexEncrKey_ptr->c_str(), &DH_enc_len, encrypted_DHkey)){",
          "281:      throw RPCException(INVALID_HEX, \"Invalid hexEncrKey\");",
          "282:   }",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: std::string gen_dkg_poly( int _t);",
          "15: std::vector<std::string> SplitString(const char* koefs, const char symbol);",
          "19: bool VerifyShares(const char* publicShares, const char* encr_sshare, const char * encryptedKeyHex,  int t, int n, int ind);",
          "",
          "[Removed Lines]",
          "13: std::vector <std::vector<std::string>> get_verif_vect(const char* encryptedPolyHex, int n, int t);",
          "17: std::string get_secret_shares(const std::string& polyName, const char* encryptedPolyHex, const std::vector<std::string>& publicKeys, int n, int t);",
          "",
          "[Added Lines]",
          "13: std::vector <std::vector<std::string>> get_verif_vect(const char* encryptedPolyHex, int t, int n);",
          "17: std::string get_secret_shares(const std::string& polyName, const char* encryptedPolyHex, const std::vector<std::string>& publicKeys, int t, int n);",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: static std::default_random_engine rand_gen((unsigned int) time(0));",
          "17: std::vector<std::string> gen_ecdsa_key(){",
          "18:   char *errMsg = (char *)calloc(1024, 1);",
          "19:   int err_status = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: std::string concatPubKeyWith0x(char* pub_key_x, char* pub_key_y){",
          "18:   std::string px = pub_key_x;",
          "19:   std::string py = pub_key_y;",
          "20:   std::string result = \"0x\" + px + py;// + std::to_string(pub_key_x) + std::to_string(pub_key_y);",
          "21:   return result;",
          "22: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:   char *hexEncrKey = (char *) calloc(2*BUF_LEN, 1);",
          "33:   carray2Hex(encr_pr_key, enc_len, hexEncrKey);",
          "34:   keys.at(0) = hexEncrKey;",
          "",
          "[Removed Lines]",
          "35:   keys.at(1) = std::string(pub_key_x) + std::string(pub_key_y);",
          "",
          "[Added Lines]",
          "42:   keys.at(1) = std::string(pub_key_x) + std::string(pub_key_y);//concatPubKeyWith0x(pub_key_x, pub_key_y);//",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:   uint64_t enc_len = 0;",
          "77:   uint8_t encr_pr_key[BUF_LEN];",
          "80:   status = get_public_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, enc_len, pub_key_x, pub_key_y );",
          "81:   if ( err_status != 0){",
          "82:     throw RPCException(-666, errMsg) ;",
          "83:   }",
          "85:   std::cerr << \"err str \" << errMsg << std::endl;",
          "87:   free(errMsg);",
          "",
          "[Removed Lines]",
          "78:   hex2carray(encryptedKeyHex, &enc_len, encr_pr_key);",
          "84:   std::string pubKey = std::string(pub_key_x) + std::string(pub_key_y);",
          "",
          "[Added Lines]",
          "85:   if (!hex2carray(encryptedKeyHex, &enc_len, encr_pr_key)){",
          "86:     throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "87:   }",
          "93:   std::string pubKey = std::string(pub_key_x) + std::string(pub_key_y);//concatPubKeyWith0x(pub_key_x, pub_key_y);//",
          "95:   std:: cerr << \"pubkey is \" << pubKey << std::endl;",
          "96:   std:: cerr << \"pubkey length is \" << pubKey.length() << std::endl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:   uint64_t dec_len = 0;",
          "104:   uint8_t encr_key[BUF_LEN];",
          "107:   std::cerr << \"encryptedKeyHex: \"<< encryptedKeyHex << std::endl;",
          "",
          "[Removed Lines]",
          "105:   hex2carray(encryptedKeyHex, &dec_len, encr_key);",
          "",
          "[Added Lines]",
          "118:   if (!hex2carray(encryptedKeyHex, &dec_len, encr_key)){",
          "119:       throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "120:   }",
          "",
          "---------------"
        ],
        "LevelDB.cpp||LevelDB.cpp": [
          "File: LevelDB.cpp -> LevelDB.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     throwExceptionOnError(status);",
          "77: }",
          "",
          "[Removed Lines]",
          "76:     std::cerr << \"written key \" << _key << \" value \" << _value <<std::endl;",
          "",
          "[Added Lines]",
          "76:     std::cerr << \"written key \" << _key << std::endl;//<< \" value \" << _value << std::endl;",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   HttpServer *hs = nullptr;",
          "59: int init_server() {",
          "80:   s = new SGXWalletServer(*hs,",
          "81:                       JSONRPC_SERVER_V2); // hybrid server (json-rpc 1.0 & 2.0)",
          "86:   }",
          "87:   return 0;",
          "88: }",
          "90: Json::Value",
          "92:     Json::Value result;",
          "94:     int errStatus = UNKNOWN_ERROR;",
          "",
          "[Removed Lines]",
          "61:   std::string certPath = \"cert/SGXServerCertificate.crt\";",
          "62:   std::string keyPath = \"cert/SGXServerCertificate.key\";",
          "64:   if (!boost::filesystem::exists(certPath) ){",
          "65:     std::cerr << \"NO!!! \" << std::endl;",
          "66:     std::cerr << \"CERTIFICATE IS GOING TO BE CREATED\" << std::endl;",
          "68:     std::string genCert = \"cd cert && ./self-signed-tls -c=US -s=California -l=San-Francisco -o=\\\"Skale Labs\\\" -u=\\\"Department of Software Engineering\\\" -n=\\\"SGXServerCertificate\\\" -e=info@skalelabs.com\";",
          "70:     if (system(genCert.c_str()) == 0){",
          "71:        std::cerr << \"CERTIFICATE IS SUCCESSFULLY GENERATED\" << std::endl;",
          "72:     }",
          "73:     else{",
          "74:       std::cerr << \"CERTIFICATE GENERATION FAILED\" << std::endl;",
          "75:       exit(-1);",
          "76:     }",
          "77:   }",
          "79:   hs = new HttpServer(1026, certPath, keyPath);",
          "83:     if (!s->StartListening()) {",
          "84:       cerr << \"Server could not start listening\" << endl;",
          "85:       exit(-1);",
          "91: importBLSKeyShareImpl(const std::string &_keyShare, const std::string &_keyShareName, int n, int t, int index) {",
          "",
          "[Added Lines]",
          "60:   std::string certPath =\"\";//\"cert/SGXServerCertificate.crt\";",
          "61:   std::string keyPath =\"\";//\"cert/SGXServerCertificate.key\";",
          "78:   hs = new HttpServer(1027, certPath, keyPath);",
          "82:   if (!s->StartListening()) {",
          "83:     cerr << \"Server could not start listening\" << endl;",
          "84:     exit(-1);",
          "90: importBLSKeyShareImpl(const std::string &_keyShare, const std::string &_keyShareName, int t, int n, int index) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:     return result;",
          "126: }",
          "129:     Json::Value result;",
          "130:     result[\"status\"] = -1;",
          "131:     result[\"errorMessage\"] = \"Unknown server error\";",
          "132:     result[\"signatureShare\"] = \"\";",
          "138:     char *signature = (char *) calloc(BUF_LEN, 1);",
          "141:     shared_ptr <std::string> value = nullptr;",
          "144:     try {",
          "145:       if ( !checkName(keyShareName, \"BLS_KEY\")){",
          "146:         throw RPCException(INVALID_POLY_NAME, \"Invalid BLSKey name\");",
          "",
          "[Removed Lines]",
          "128: Json::Value blsSignMessageHashImpl(const std::string &keyShareName, const std::string &messageHash,int n, int t, int signerIndex) {",
          "",
          "[Added Lines]",
          "127: Json::Value blsSignMessageHashImpl(const std::string &keyShareName, const std::string &messageHash,int t, int n, int signerIndex) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "330:          }",
          "331:          std::shared_ptr<std::string> key_ptr = readFromDb(keyName);",
          "332:          Pkey = get_ecdsa_pubkey( key_ptr->c_str());",
          "334:          result[\"PublicKey\"] = Pkey;",
          "336:     } catch (RPCException &_e) {",
          "",
          "[Removed Lines]",
          "333:          std::cerr << \"PublicKey\" << Pkey << std::endl;",
          "",
          "[Added Lines]",
          "328:          std::cerr << \"PublicKey \" << Pkey << std::endl;",
          "329:          std::cerr << \"PublicKey length\" << Pkey.length() << std::endl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "353:     std::string encrPolyHex;",
          "355:     try {",
          "357:         throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "358:       }",
          "359:       if ( t <= 0){",
          "",
          "[Removed Lines]",
          "356:       if ( !checkPolyName(polyName)){",
          "",
          "[Added Lines]",
          "352:       if ( !checkName(polyName, \"POLY\")){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "374:     return result;",
          "375: }",
          "379:   Json::Value result;",
          "380:   result[\"status\"] = 0;",
          "",
          "[Removed Lines]",
          "377: Json::Value getVerificationVectorImpl(const std::string& polyName, int n, int t) {",
          "",
          "[Added Lines]",
          "373: Json::Value getVerificationVectorImpl(const std::string& polyName, int t, int n) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "383:   std::vector <std::vector<std::string>> verifVector;",
          "384:   try {",
          "386:       throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "387:     }",
          "389:       throw RPCException(INVALID_DKG_PARAMS, \"Invalid parameters: n or t \");",
          "390:     }",
          "392:     std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName);",
          "397:     for ( int i = 0; i < t; i++){",
          "",
          "[Removed Lines]",
          "385:     if ( !checkPolyName(polyName)){",
          "388:     if( !check_n_t(n, t)){",
          "394:     verifVector = get_verif_vect(encr_poly_ptr->c_str(), n, t);",
          "",
          "[Added Lines]",
          "381:     if ( !checkName(polyName, \"POLY\")){",
          "384:     if( !check_n_t(t, n)){",
          "390:     verifVector = get_verif_vect(encr_poly_ptr->c_str(), t, n);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "411:   return result;",
          "412: }",
          "415:     std::cerr << \" enter getSecretShareImpl\" << std::endl;",
          "416:     Json::Value result;",
          "417:     result[\"status\"] = 0;",
          "",
          "[Removed Lines]",
          "414: Json::Value getSecretShareImpl(const std::string& polyName, const Json::Value& publicKeys, int n, int t){",
          "",
          "[Added Lines]",
          "410: Json::Value getSecretShareImpl(const std::string& polyName, const Json::Value& publicKeys, int t, int n){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "422:             result[\"errorMessage\"] = \"wrong number of public keys\";",
          "423:             return result;",
          "424:         }",
          "426:           throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "427:         }",
          "429:           throw RPCException(INVALID_DKG_PARAMS, \"Invalid DKG parameters: n or t \");",
          "430:         }",
          "",
          "[Removed Lines]",
          "425:         if ( !checkPolyName(polyName)){",
          "428:         if( !check_n_t(n, t)){",
          "",
          "[Added Lines]",
          "421:       if ( !checkName(polyName, \"POLY\")){",
          "424:         if( !check_n_t(t, n)){",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "439:             pubKeys_vect.push_back(publicKeys[i].asString());",
          "440:         }",
          "444:         result[\"SecretShare\"] = s;",
          "",
          "[Removed Lines]",
          "442:         std::string s = get_secret_shares(polyName, encr_poly_ptr->c_str(), pubKeys_vect, n, t);",
          "",
          "[Added Lines]",
          "438:         std::string s = get_secret_shares(polyName, encr_poly_ptr->c_str(), pubKeys_vect, t, n);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "468:     if ( !checkECDSAKeyName(EthKeyName)){",
          "469:       throw RPCException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "470:     }",
          "472:       throw RPCException(INVALID_DKG_PARAMS, \"Invalid DKG parameters: n or t \");",
          "473:     }",
          "",
          "[Removed Lines]",
          "471:     if( !check_n_t(n, t) || ind > n || ind < 0){",
          "",
          "[Added Lines]",
          "467:     if( !check_n_t(t, n) || ind > n || ind < 0){",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "506:   try {",
          "508:     if (SecretShare.length() != n * 192){",
          "509:       result[\"errorMessage\"] = \"wrong length of secret shares\";",
          "510:       return result;",
          "511:     }",
          "515:     if ( !checkName(polyName, \"POLY\")){",
          "516:       throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "517:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "505:       std::cerr << \"wrong length of secret shares - \" << SecretShare.length() << std::endl;",
          "509:     if ( !checkECDSAKeyName(EthKeyName)){",
          "510:       throw RPCException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "511:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "621:   return generateDKGPolyImpl(polyName, t);",
          "622: }",
          "625:   lock_guard<recursive_mutex> lock(m);",
          "627: }",
          "630:     lock_guard<recursive_mutex> lock(m);",
          "632: }",
          "634: Json::Value  SGXWalletServer::DKGVerification( const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index){",
          "",
          "[Removed Lines]",
          "624: Json::Value SGXWalletServer::getVerificationVector(const std::string& polyName, int n, int t){",
          "626:   return getVerificationVectorImpl(polyName, n, t);",
          "629: Json::Value SGXWalletServer::getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int n, int t){",
          "631:     return getSecretShareImpl(polyName, publicKeys, n, t);",
          "",
          "[Added Lines]",
          "621: Json::Value SGXWalletServer::getVerificationVector(const std::string& polyName, int t, int n){",
          "623:   return getVerificationVectorImpl(polyName, t, n);",
          "626: Json::Value SGXWalletServer::getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int t, int n){",
          "628:     return getSecretShareImpl(polyName, publicKeys, t, n);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "675: Json::Value",
          "678:     lock_guard<recursive_mutex> lock(m);",
          "680: }",
          "684:     lock_guard<recursive_mutex> lock(m);",
          "686: }",
          "688: Json::Value SGXWalletServer::importECDSAKey(const std::string &key, const std::string &keyName) {",
          "",
          "[Removed Lines]",
          "676: SGXWalletServer::importBLSKeyShare(const std::string &_keyShare, const std::string &_keyShareName, int n,",
          "677:                                    int t, int index) {",
          "679:     return importBLSKeyShareImpl(_keyShare, _keyShareName, n, t, index );",
          "682: Json::Value SGXWalletServer::blsSignMessageHash(const std::string &keyShareName, const std::string &messageHash,int n,",
          "683:                                        int t, int signerIndex) {",
          "685:     return blsSignMessageHashImpl(keyShareName, messageHash, n,t, signerIndex);",
          "",
          "[Added Lines]",
          "673: SGXWalletServer::importBLSKeyShare(const std::string &_keyShare, const std::string &_keyShareName, int t, int n,",
          "674:                                     int index) {",
          "676:     return importBLSKeyShareImpl(_keyShare, _keyShareName, t, n, index );",
          "679: Json::Value SGXWalletServer::blsSignMessageHash(const std::string &keyShareName, const std::string &messageHash, int t, int n,",
          "680:                                         int signerIndex) {",
          "682:     return blsSignMessageHashImpl(keyShareName, messageHash, t, n, signerIndex);",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: public:",
          "21:     SGXWalletServer(AbstractServerConnector &connector, serverVersion_t type);",
          "26:     virtual Json::Value importECDSAKey(const std::string& key, const std::string& keyName);",
          "27:     virtual Json::Value generateECDSAKey();",
          "",
          "[Removed Lines]",
          "23:     virtual Json::Value importBLSKeyShare(const std::string& keyShare, const std::string& keyShareName, int n, int t, int index);",
          "24:     virtual Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int n, int t, int signerIndex);",
          "",
          "[Added Lines]",
          "23:     virtual Json::Value importBLSKeyShare(const std::string& keyShare, const std::string& keyShareName, int t, int n, int index);",
          "24:     virtual Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int t, int n, int signerIndex);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:     virtual Json::Value getPublicECDSAKey(const std::string& keyName);",
          "32:     virtual Json::Value generateDKGPoly(const std::string& polyName, int t);",
          "35:     virtual Json::Value DKGVerification(const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index);",
          "36:     virtual Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "37:     virtual Json::Value GetBLSPublicKeyShare(const std::string & BLSKeyName);",
          "",
          "[Removed Lines]",
          "33:     virtual Json::Value getVerificationVector(const std::string& polyName, int n, int t);",
          "34:     virtual Json::Value getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int n, int t);",
          "",
          "[Added Lines]",
          "33:     virtual Json::Value getVerificationVector(const std::string& polyName, int t, int n);",
          "34:     virtual Json::Value getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int t, int n);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45: void writeKeyShare(const string &_keyShareName, const string &value, int index, int n, int t);",
          "46: shared_ptr<std::string> readKeyShare(const string& _keyShare);",
          "51: Json::Value importECDSAKeyImpl(const std::string& key, const std::string& keyName);",
          "52: Json::Value generateECDSAKeyImpl();",
          "",
          "[Removed Lines]",
          "48: Json::Value importBLSKeyShareImpl(const std::string& keyShare, const std::string& keyShareName, int n, int t, int index);",
          "49: Json::Value blsSignMessageHashImpl(const std::string& keyShareName, const std::string& messageHash, int n, int t, int signerIndex);",
          "",
          "[Added Lines]",
          "48: Json::Value importBLSKeyShareImpl(const std::string& keyShare, const std::string& keyShareName, int t, int n, int index);",
          "49: Json::Value blsSignMessageHashImpl(const std::string& keyShareName, const std::string& messageHash, int t, int n, int signerIndex);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "55: Json::Value getPublicECDSAKeyImpl(const std::string& keyName);",
          "57: Json::Value generateDKGPolyImpl(const std::string& polyName, int t);",
          "60: Json::Value DKGVerificationImpl(const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index);",
          "61: Json::Value CreateBLSPrivateKeyImpl(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "62: Json::Value GetBLSPublicKeyShareImpl(const std::string & BLSKeyName);",
          "",
          "[Removed Lines]",
          "58: Json::Value getVerificationVectorImpl(const std::string& polyName, int n, int t);",
          "59: Json::Value getSecretShareImpl(const std::string& polyName, const Json::Value& publicKeys, int n, int t);",
          "",
          "[Added Lines]",
          "58: Json::Value getVerificationVectorImpl(const std::string& polyName, int t, int n);",
          "59: Json::Value getSecretShareImpl(const std::string& polyName, const Json::Value& publicKeys, int t, int n);",
          "",
          "---------------"
        ],
        "ServerDataChecker.cpp||ServerDataChecker.cpp": [
          "File: ServerDataChecker.cpp -> ServerDataChecker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   return true;",
          "66: }",
          "122: bool checkName (const std::string& Name, const std::string& prefix){",
          "123:     std::vector<std::string> parts = SplitString(Name);",
          "124:     if ( parts.size() != 7) {",
          "125:         return false;",
          "126:     }",
          "127:     if ( parts.at(0) != prefix ) {",
          "128:         return false;",
          "129:     }",
          "130:     if ( parts.at(1) != \"SCHAIN_ID\"){",
          "131:         return false;",
          "132:     }",
          "133:     if ( parts.at(3) != \"NODE_ID\"){",
          "134:         return false;",
          "135:     }",
          "136:     if ( parts.at(5) != \"DKG_ID\"){",
          "137:         return false;",
          "138:     }",
          "140:     if ( parts.at(2).length() > 78 || parts.at(2).length() < 1){",
          "141:         return false;",
          "142:     }",
          "143:     if (parts.at(4).length() > 5 || parts.at(4).length() < 1){",
          "144:         return false;",
          "145:     }",
          "146:     if ( parts.at(6).length() > 78 || parts.at(6).length() < 1){",
          "147:         return false;",
          "148:     }",
          "",
          "[Removed Lines]",
          "68: bool checkPolyName (const std::string& polyName){",
          "69:   std::vector<std::string> parts = SplitString(polyName);",
          "70:   if ( parts.size() != 7) {",
          "71:     return false;",
          "72:   }",
          "73:   if ( parts.at(0) != \"POLY\") {",
          "74:     return false;",
          "75:   }",
          "76:   if ( parts.at(1) != \"SCHAIN_ID\"){",
          "77:     return false;",
          "78:   }",
          "79:   if ( parts.at(3) != \"NODE_ID\"){",
          "80:     return false;",
          "81:   }",
          "82:   if ( parts.at(5) != \"DKG_ID\"){",
          "83:     return false;",
          "84:   }",
          "86:   if ( parts.at(2).length() > 64 || parts.at(2).length() < 1){",
          "87:     return false;",
          "88:   }",
          "89:   if (parts.at(4).length() > 5 || parts.at(4).length() < 1){",
          "90:     return false;",
          "91:   }",
          "92:   if ( parts.at(6).length() > 64 || parts.at(6).length() < 1){",
          "93:     return false;",
          "94:   }",
          "96:   mpz_t num;",
          "97:   mpz_init(num);",
          "99:   if ( mpz_set_str(num, parts.at(2).c_str(), 16) == -1){",
          "100:     mpz_clear(num);",
          "101:     return false;",
          "102:   }",
          "103:   mpz_clear(num);",
          "104:   mpz_init(num);",
          "106:   if ( mpz_set_str(num, parts.at(4).c_str(), 10) == -1){",
          "107:     mpz_clear(num);",
          "108:     return false;",
          "109:   }",
          "110:   mpz_clear(num);",
          "111:   mpz_init(num);",
          "113:   if ( mpz_set_str(num, parts.at(6).c_str(),16) == -1){",
          "114:     mpz_clear(num);",
          "115:     return false;",
          "116:   }",
          "117:   mpz_clear(num);",
          "119:   return true;",
          "120: }",
          "",
          "[Added Lines]",
          "71:         std::cerr << \"parts.size() != 7\" << std::endl;",
          "75:         std::cerr << \"parts.at(0) != prefix\" << std::endl;",
          "79:         std::cerr << \"parts.at(1) != SCHAIN_ID\" << std::endl;",
          "83:         std::cerr << \"parts.at(3) != Node_ID\" << std::endl;",
          "87:         std::cerr << \"parts.at(1) != DKG_ID\" << std::endl;",
          "92:         std::cerr << \"parts.at(2).length() > 78\" << std::endl;",
          "96:         std::cerr << \"parts.at(4).length() > 5\" << std::endl;",
          "100:         std::cerr << \"parts.at(6).length() > 78\" << std::endl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:     if ( mpz_set_str(num, parts.at(2).c_str(), 10) == -1){",
          "154:         mpz_clear(num);",
          "155:         return false;",
          "156:     }",
          "157:     mpz_clear(num);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:         std::cerr << \"parts.at(2) not num\" << std::endl;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:     if ( mpz_set_str(num, parts.at(4).c_str(), 10) == -1){",
          "161:         mpz_clear(num);",
          "162:         return false;",
          "163:     }",
          "164:     mpz_clear(num);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:         std::cerr << \"parts.at(4) not num\" << std::endl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "167:     if ( mpz_set_str(num, parts.at(6).c_str(),10) == -1){",
          "168:         mpz_clear(num);",
          "169:         return false;",
          "170:     }",
          "171:     mpz_clear(num);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:         std::cerr << \"parts.at(6) not num\" << std::endl;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:     return true;",
          "174: }",
          "177:   if (t > n){",
          "178:     return false;",
          "179:   }",
          "",
          "[Removed Lines]",
          "176: bool check_n_t ( const int n, const int t){",
          "",
          "[Added Lines]",
          "133: bool check_n_t ( const int t, const int n){",
          "",
          "---------------"
        ],
        "ServerDataChecker.h||ServerDataChecker.h": [
          "File: ServerDataChecker.h -> ServerDataChecker.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: bool checkName (const std::string& Name, const std::string& prefix);",
          "20: #endif // SGXD_SERVERDATACHECKER_H",
          "",
          "[Removed Lines]",
          "18: bool check_n_t ( const int n, const int t);",
          "",
          "[Added Lines]",
          "18: bool check_n_t ( const int t, const int n);",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:     init_server();",
          "106:     init_enclave();",
          "107:     init_daemon();",
          "108: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:     std::cerr << \"enclave inited\" << std::endl;",
          "",
          "---------------"
        ],
        "abstractstubserver.h||abstractstubserver.h": [
          "File: abstractstubserver.h -> abstractstubserver.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     public:",
          "13:         AbstractStubServer(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<AbstractStubServer>(conn, type)",
          "14:         {",
          "18:           this->bindAndAddMethod(jsonrpc::Procedure(\"importECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"key\",jsonrpc::JSON_STRING,\"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::importECDSAKeyI);",
          "19:           this->bindAndAddMethod(jsonrpc::Procedure(\"generateECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,  NULL), &AbstractStubServer::generateECDSAKeyI);",
          "",
          "[Removed Lines]",
          "15:           this->bindAndAddMethod(jsonrpc::Procedure(\"importBLSKeyShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"keyShare\",jsonrpc::JSON_STRING,\"keyShareName\",jsonrpc::JSON_STRING,\"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, \"index\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::importBLSKeyShareI);",
          "16:           this->bindAndAddMethod(jsonrpc::Procedure(\"blsSignMessageHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyShareName\",jsonrpc::JSON_STRING,\"messageHash\",jsonrpc::JSON_STRING,\"n\",jsonrpc::JSON_INTEGER,\"signerIndex\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::blsSignMessageHashI);",
          "",
          "[Added Lines]",
          "15:           this->bindAndAddMethod(jsonrpc::Procedure(\"importBLSKeyShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"keyShare\",jsonrpc::JSON_STRING,\"keyShareName\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER,\"n\",jsonrpc::JSON_INTEGER, \"index\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::importBLSKeyShareI);",
          "16:           this->bindAndAddMethod(jsonrpc::Procedure(\"blsSignMessageHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyShareName\",jsonrpc::JSON_STRING,\"messageHash\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, \"n\",jsonrpc::JSON_INTEGER, \"signerIndex\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::blsSignMessageHashI);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:           this->bindAndAddMethod(jsonrpc::Procedure(\"ecdsaSignMessageHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"base\",jsonrpc::JSON_INTEGER,\"keyName\",jsonrpc::JSON_STRING,\"messageHash\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::ecdsaSignMessageHashI);",
          "24:           this->bindAndAddMethod(jsonrpc::Procedure(\"generateDKGPoly\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::generateDKGPolyI);",
          "26:           this->bindAndAddMethod(jsonrpc::Procedure(\"getSecretShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"publicKeys\",jsonrpc::JSON_ARRAY, \"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getSecretShareI);",
          "27:           this->bindAndAddMethod(jsonrpc::Procedure(\"DKGVerification\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"publicShares\",jsonrpc::JSON_STRING, \"EthKeyName\",jsonrpc::JSON_STRING, \"SecretShare\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, \"n\",jsonrpc::JSON_INTEGER, \"index\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::DKGVerificationI);",
          "28:           this->bindAndAddMethod(jsonrpc::Procedure(\"CreateBLSPrivateKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"BLSKeyName\",jsonrpc::JSON_STRING, \"EthKeyName\",jsonrpc::JSON_STRING, \"polyName\", jsonrpc::JSON_STRING, \"SecretShare\",jsonrpc::JSON_STRING,\"t\", jsonrpc::JSON_INTEGER,\"n\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::CreateBLSPrivateKeyI);",
          "",
          "[Removed Lines]",
          "25:           this->bindAndAddMethod(jsonrpc::Procedure(\"getVerificationVector\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"polyName\",jsonrpc::JSON_STRING, \"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getVerificationVectorI);",
          "",
          "[Added Lines]",
          "25:           this->bindAndAddMethod(jsonrpc::Procedure(\"getVerificationVector\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"polyName\",jsonrpc::JSON_STRING, \"t\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getVerificationVectorI);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34:         inline virtual void importBLSKeyShareI(const Json::Value &request, Json::Value &response)",
          "35:         {",
          "37:         }",
          "38:         inline virtual void blsSignMessageHashI(const Json::Value &request, Json::Value &response)",
          "39:         {",
          "41:         }",
          "42:         inline virtual void importECDSAKeyI(const Json::Value &request, Json::Value &response)",
          "43:         {",
          "",
          "[Removed Lines]",
          "36:             response = this->importBLSKeyShare( request[\"keyShare\"].asString(), request[\"keyShareName\"].asString(), request[\"n\"].asInt(), request[\"t\"].asInt(), request[\"index\"].asInt());",
          "40:             response = this->blsSignMessageHash(request[\"keyShareName\"].asString(), request[\"messageHash\"].asString(), request[\"n\"].asInt(), request[\"t\"].asInt(), request[\"signerIndex\"].asInt());",
          "",
          "[Added Lines]",
          "36:             response = this->importBLSKeyShare( request[\"keyShare\"].asString(), request[\"keyShareName\"].asString(), request[\"t\"].asInt(), request[\"n\"].asInt(), request[\"index\"].asInt());",
          "40:             response = this->blsSignMessageHash(request[\"keyShareName\"].asString(), request[\"messageHash\"].asString(), request[\"t\"].asInt(), request[\"n\"].asInt(), request[\"signerIndex\"].asInt());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66:         }",
          "67:         inline virtual void getVerificationVectorI(const Json::Value &request, Json::Value &response)",
          "68:         {",
          "70:         }",
          "71:         inline virtual void getSecretShareI(const Json::Value &request, Json::Value &response)",
          "72:         {",
          "74:         }",
          "75:         inline virtual void DKGVerificationI(const Json::Value &request, Json::Value &response)",
          "76:         {",
          "",
          "[Removed Lines]",
          "69:             response = this->getVerificationVector(request[\"polyName\"].asString(), request[\"n\"].asInt(), request[\"t\"].asInt());",
          "73:             response = this->getSecretShare(request[\"polyName\"].asString(), request[\"publicKeys\"], request[\"n\"].asInt(),request[\"t\"].asInt());",
          "",
          "[Added Lines]",
          "69:             response = this->getVerificationVector(request[\"polyName\"].asString(), request[\"t\"].asInt(), request[\"n\"].asInt());",
          "73:             response = this->getSecretShare(request[\"polyName\"].asString(), request[\"publicKeys\"], request[\"t\"].asInt(),request[\"n\"].asInt());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "89:           response = this->ComplaintResponse( request[\"polyName\"].asString(), request[\"ind\"].asInt());",
          "90:         }",
          "94:         virtual Json::Value importECDSAKey(const std::string& key, const std::string& keyName) = 0;",
          "95:         virtual Json::Value generateECDSAKey() = 0;",
          "96:         virtual Json::Value renameECDSAKey(const std::string& KeyName, const std::string& tempKeyName) = 0;",
          "",
          "[Removed Lines]",
          "92:         virtual Json::Value importBLSKeyShare(const std::string& keyShare, const std::string& keyShareName, int n, int t, int index) = 0;",
          "93:         virtual Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int n, int signerIndex, int t) = 0;",
          "",
          "[Added Lines]",
          "92:         virtual Json::Value importBLSKeyShare(const std::string& keyShare, const std::string& keyShareName, int t, int n, int index) = 0;",
          "93:         virtual Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int t, int n, int signerIndex ) = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "98:         virtual Json::Value ecdsaSignMessageHash(int base, const std::string& keyName, const std::string& messageHash) = 0;",
          "100:         virtual Json::Value generateDKGPoly(const std::string& polyName, int t) = 0;",
          "103:         virtual Json::Value DKGVerification( const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index) = 0;",
          "104:         virtual Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n) = 0;",
          "105:         virtual Json::Value GetBLSPublicKeyShare(const std::string & BLSKeyName) = 0;",
          "",
          "[Removed Lines]",
          "101:         virtual Json::Value getVerificationVector(const std::string& polyName, int n, int t) = 0;",
          "102:         virtual Json::Value getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int n, int t) = 0;",
          "",
          "[Added Lines]",
          "101:         virtual Json::Value getVerificationVector(const std::string& polyName, int t, int n) = 0;",
          "102:         virtual Json::Value getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int t, int n) = 0;",
          "",
          "---------------"
        ],
        "secure_enclave/DH_dkg.c||secure_enclave/DH_dkg.c": [
          "File: secure_enclave/DH_dkg.c -> secure_enclave/DH_dkg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:    uint8_t* key_bin = (uint8_t*)malloc(33);",
          "104:    uint64_t key_length;",
          "107:    uint64_t msg_length;",
          "108:    uint8_t msg_bin[33];//[ECDSA_BIN_LEN];",
          "112:    for (int i = 0; i < 32; i++){",
          "",
          "[Removed Lines]",
          "105:    hex2carray(key, &key_length, key_bin);",
          "109:    hex2carray(message, &msg_length, msg_bin);",
          "",
          "[Added Lines]",
          "105:    if (!hex2carray(key, &key_length, key_bin)){",
          "106:      cypher = NULL;",
          "107:      return;",
          "108:    }",
          "112:    if (!hex2carray(message, &msg_length, msg_bin)){",
          "113:      cypher = NULL;",
          "114:      return;",
          "115:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:     uint8_t* key_bin = (uint8_t*)malloc(33);",
          "127:     uint64_t key_length;",
          "130:     uint64_t cypher_length;",
          "131:     uint8_t cypher_bin[33];//[ECDSA_BIN_LEN];",
          "135:     for (int i = 0; i < 32; i++){",
          "",
          "[Removed Lines]",
          "128:     hex2carray(key, &key_length, key_bin);",
          "132:     hex2carray(cypher, &cypher_length, cypher_bin);",
          "",
          "[Added Lines]",
          "134:     if (!hex2carray(key, &key_length, key_bin)){",
          "135:       message = NULL;",
          "136:       return;",
          "137:     }",
          "141:     if (!hex2carray(cypher, &cypher_length, cypher_bin)){",
          "142:       message = NULL;",
          "143:       return;",
          "144:     }",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:   if (mpz_set_str(skey_mpz, skey, ECDSA_SKEY_BASE) == -1){",
          "223:     snprintf(err_string, BUF_LEN,\"wrong string to init private key\");",
          "225:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:     mpz_clear(skey_mpz);",
          "226:     return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "507:   snprintf(err_string, BUF_LEN,\"pr key is %s length %d \", skey, strlen(skey));",
          "508:   mpz_t skey_mpz;",
          "509:   mpz_init(skey_mpz);",
          "513:   mpz_init(test_skey);",
          "",
          "[Removed Lines]",
          "510:   mpz_set_str(skey_mpz, skey, ECDSA_SKEY_BASE);",
          "",
          "[Added Lines]",
          "512:   if (mpz_set_str(skey_mpz, skey, ECDSA_SKEY_BASE) == -1){",
          "514:       snprintf(err_string, BUF_LEN ,\"invalid secret key\");",
          "515:       mpz_clear(skey_mpz);",
          "516:       return;",
          "517:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "520:   mpz_t msg_mpz;",
          "521:   mpz_init(msg_mpz);",
          "525:   signature sign = signature_init();",
          "",
          "[Removed Lines]",
          "522:   mpz_set_str(msg_mpz, hash, 16);",
          "",
          "[Added Lines]",
          "529:   if (mpz_set_str(msg_mpz, hash, 16) == -1){",
          "531:       snprintf(err_string, BUF_LEN ,\"invalid message hash\");",
          "532:       mpz_clear(msg_mpz);",
          "533:       return;",
          "534:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "613:   char* cypher = (char *)malloc(65);",
          "614:   xor_encrypt(common_key, s_share, cypher);",
          "617:   strncpy(result_str, cypher, strlen(cypher));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "627:   if (cypher == NULL){",
          "629:       snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "630:       return;",
          "631:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "681:   common_key[64] = 0;",
          "683:   xor_decrypt(common_key, encr_sshare, decr_sshare);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "701:     if (decr_sshare == NULL){",
          "703:         snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "704:         return;",
          "705:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "694:   mpz_t s;",
          "695:   mpz_init(s);",
          "",
          "[Removed Lines]",
          "696:   mpz_set_str(s, decr_sshare, 16);",
          "",
          "[Added Lines]",
          "718:   if (mpz_set_str(s, decr_sshare, 16) == -1){",
          "720:       snprintf(err_string, BUF_LEN ,\"invalid decr secret share\");",
          "721:       mpz_clear(s);",
          "722:       return;",
          "723:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "756:     char decr_sshare[65];",
          "757:     xor_decrypt(common_key, encr_sshare, decr_sshare);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "785:       if (decr_sshare == NULL){",
          "787:           snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "788:           return;",
          "789:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "764:     mpz_t decr_secret_share;",
          "765:     mpz_init(decr_secret_share);",
          "768:     mpz_addmul_ui(sum, decr_secret_share, 1);",
          "769:     mpz_clear(decr_secret_share);",
          "",
          "[Removed Lines]",
          "766:     mpz_set_str(decr_secret_share, decr_sshare, 16);",
          "",
          "[Added Lines]",
          "798:     if (mpz_set_str(decr_secret_share, decr_sshare, 16) == -1){",
          "800:         snprintf(err_string, BUF_LEN ,\"invalid decrypted secret share\");",
          "801:         return;",
          "802:     }",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: #define SGX_ENCLAVE_ERROR -666;",
          "61: #define ENCLAVE_NAME \"secure_enclave.signed.so\"",
          "",
          "[Removed Lines]",
          "59: #define WALLETDB_NAME  \"test_sgxwallet.db\"//\"sgxwallet.db\" //",
          "",
          "[Added Lines]",
          "59: #define WALLETDB_NAME \"test_sgxwallet1.db\"//\"sgxwallet.db\"",
          "",
          "---------------"
        ],
        "stubclient.h||stubclient.h": [
          "File: stubclient.h -> stubclient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     public:",
          "13:         StubClient(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}",
          "16:         {",
          "17:             Json::Value p;",
          "18:             p[\"index\"] = index;",
          "",
          "[Removed Lines]",
          "15:         Json::Value importBLSKeyShare(const std::string& keyShare, const std::string& keyShareName, int n, int t, int index) throw (jsonrpc::JsonRpcException)",
          "",
          "[Added Lines]",
          "15:         Json::Value importBLSKeyShare(const std::string& keyShare, const std::string& keyShareName, int t, int n, int index) throw (jsonrpc::JsonRpcException)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:             else",
          "27:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "28:         }",
          "30:         {",
          "31:             Json::Value p;",
          "32:             p[\"keyShareName\"] = keyShareName;",
          "",
          "[Removed Lines]",
          "29:         Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int n, int t, int signerIndex) throw (jsonrpc::JsonRpcException)",
          "",
          "[Added Lines]",
          "29:         Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int t, int n, int signerIndex) throw (jsonrpc::JsonRpcException)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:             else",
          "106:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "107:         }",
          "109:     {",
          "110:         Json::Value p;",
          "111:         p[\"polyName\"] = polyName;",
          "",
          "[Removed Lines]",
          "108:     Json::Value getVerificationVector(const std::string& polyName, int n, int t) throw (jsonrpc::JsonRpcException)",
          "",
          "[Added Lines]",
          "108:     Json::Value getVerificationVector(const std::string& polyName, int t, int n) throw (jsonrpc::JsonRpcException)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:         else",
          "118:             throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "119:     }",
          "121:     {",
          "122:         Json::Value p;",
          "123:         p[\"polyName\"] = polyName;",
          "",
          "[Removed Lines]",
          "120:     Json::Value getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int n, int t) throw (jsonrpc::JsonRpcException)",
          "",
          "[Added Lines]",
          "120:     Json::Value getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int t, int n) throw (jsonrpc::JsonRpcException)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "145:         else",
          "146:           throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "147:     }",
          "149:     {",
          "150:       Json::Value p;",
          "151:       p[\"BLSKeyName\"] = BLSKeyName;",
          "",
          "[Removed Lines]",
          "148:     Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string& SecretShare, int n, int t) throw (jsonrpc::JsonRpcException)",
          "",
          "[Added Lines]",
          "148:     Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string& SecretShare, int t, int n) throw (jsonrpc::JsonRpcException)",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: #include \"stubclient.h\"",
          "76: std::string stringFromFr(libff::alt_bn128_Fr& el) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: #include \"BLSSigShare.h\"",
          "75: #include \"BLSSigShareSet.h\"",
          "76: #include \"BLSPublicKeyShare.h\"",
          "77: #include \"BLSPublicKey.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "718: using namespace jsonrpc;",
          "719: using namespace std;",
          "721: TEST_CASE(\"BLS_DKG test\", \"[bls_dkg]\") {",
          "722:   init_all();",
          "723:   cerr << \"Server inited\" << endl;",
          "725:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "726:   cerr << \"Client inited\" << endl;",
          "729:   Json::Value EthKeys[n];",
          "731:   Json::Value VerifVects[n];",
          "732:   Json::Value pubEthKeys;",
          "733:   for ( uint8_t i = 0; i < n; i++){",
          "734:     EthKeys[i] = c.generateECDSAKey();",
          "735:     std::string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:\" + std::to_string(i) + \":DKG_ID:0\";",
          "738:     pubEthKeys.append(EthKeys[i][\"PublicKey\"]);",
          "739:   }",
          "744: }",
          "746: TEST_CASE(\"API test\", \"[api_test]\") {",
          "748:   std::cerr << __GNUC__ << std::endl;",
          "",
          "[Removed Lines]",
          "724:   HttpClient client(\"http://localhost:1026\");",
          "728:   int n = 2, t = 2;",
          "730:   Json::Value Polys[n];",
          "736:     Polys[i] = c.generateDKGPoly(polyName, t);",
          "737:     VerifVects[i] = c.getVerificationVector(polyName, n, t);",
          "",
          "[Added Lines]",
          "724: std::string ConvertDecToHex(std::string dec, int numBytes = 32){",
          "725:   mpz_t num;",
          "726:   mpz_init(num);",
          "727:   mpz_set_str(num, dec.c_str(), 10);",
          "729:   char tmp[mpz_sizeinbase (num, 16) + 2];",
          "730:   char * hex = mpz_get_str(tmp, 16, num);",
          "732:   std::string result = hex;",
          "733:   int n_zeroes = numBytes * 2 - result.length();",
          "734:   result.insert(0, n_zeroes, '0');",
          "736:   return result;",
          "737: }",
          "740:   std::cerr<< \"test started\" << std::endl;",
          "743:   HttpClient client(\"http://localhost:1027\");",
          "747:   reset_db();",
          "749:   int n = 4, t = 2;",
          "753:   Json::Value secretShares[n];",
          "754:   Json::Value pubBLSKeys[n];",
          "755:   Json::Value BLSSigShares[n];",
          "756:   std::vector<std::string> pubShares(n);",
          "757:   std::vector<std::string> poly_names(n);",
          "762:     c.generateDKGPoly(polyName, t);",
          "763:     poly_names[i] = polyName;",
          "764:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "765:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << std::endl;",
          "770:   for ( uint8_t i = 0; i < n; i++){",
          "771:     secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "772:     for ( uint8_t k = 0; k < t; k++ ) {",
          "773:       for (uint8_t j = 0; j < 4; j++) {",
          "774:         std::string pubShare = VerifVects[i][\"Verification Vector\"][k][j].asString();",
          "775:         pubShares[i] += ConvertDecToHex(pubShare);",
          "776:       }",
          "777:     }",
          "778:     std::cerr << \"i is \" << i << \" pubShares[i] = \" << pubShares[i] << std::endl;",
          "779:     std::cerr << \"length is\" << pubShares[i].length() << std::endl;",
          "780:   }",
          "782:   Json::Value ComplaintResponse = c.ComplaintResponse(poly_names[1], 0);",
          "783:   std::cerr << \"share * G2 is \" << ComplaintResponse[\"share*G2\"].asString();",
          "784:   std::cerr << \"DHKey is \" << ComplaintResponse[\"DHKey\"].asString();",
          "786:   int k = 0;",
          "788:   for ( int i = 0; i < n; i++)",
          "789:     for ( int j = 0; j < n; j++){",
          "791:        std::cerr << \"SecretShare length is \" << secretShares[i][\"SecretShare\"].asString().length() << std::endl;",
          "792:        std::string secretShare = secretShares[i][\"SecretShare\"].asString().substr(192*j, 192 * (j+1));",
          "793:        bool res = c.DKGVerification(pubShares[i], EthKeys[j][\"KeyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "794:        k++;",
          "795:        std::cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << std::endl;",
          "796:        REQUIRE( res );",
          "798:     }",
          "800:   BLSSigShareSet sigShareSet(t, n);",
          "802:   std::string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "804:   auto hash_arr = std::make_shared<std::array<uint8_t, 32>>();",
          "805:   uint64_t binLen;",
          "806:   if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())){",
          "807:         throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "808:   }",
          "810:   std::map<size_t, std::shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "812:   for ( int i = 0; i < t; i++){",
          "813:     std::string endName = poly_names[i].substr(4);",
          "814:     std::string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "815:     std::string secretShare = secretShares[i][\"SecretShare\"].asString();",
          "816:     cout << c.CreateBLSPrivateKey(blsName, EthKeys[i][\"KeyName\"].asString(), poly_names[i], secretShare, t, n);",
          "817:     pubBLSKeys[i] = c.GetBLSPublicKeyShare(blsName);",
          "819:     BLSSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n, i + 1);",
          "820:     std::cerr << i << \" sig share is created \" << std::endl;",
          "821:     std::shared_ptr<std::string> sig_share_ptr = std::make_shared<std::string>(BLSSigShares[i][\"signatureShare\"].asString());",
          "822:     BLSSigShare sig(sig_share_ptr, i + 1, t, n);",
          "823:     sigShareSet.addSigShare(std::make_shared<BLSSigShare>(sig));",
          "825:     std::vector<std::string> pubKey_vect;",
          "826:     for ( uint8_t j = 0; j < 4; j++){",
          "827:         pubKey_vect.push_back(pubBLSKeys[i][\"BLSPublicKeyShare\"][j].asString());",
          "828:     }",
          "829:     BLSPublicKeyShare pubKey(std::make_shared<std::vector<std::string>>(pubKey_vect), t, n);",
          "830:     REQUIRE( pubKey.VerifySigWithHelper(hash_arr, std::make_shared<BLSSigShare>(sig) , t, n));",
          "832:     koefs_pkeys_map[i+1] = std::make_shared<BLSPublicKeyShare>(pubKey);",
          "834:   }",
          "836:   std::shared_ptr<BLSSignature> commonSig = sigShareSet.merge();",
          "837:   BLSPublicKey common_public(std::make_shared<std::map<size_t, std::shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "838:   REQUIRE( common_public.VerifySigWithHelper(hash_arr, commonSig, t, n) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "755:     cerr << \"Server inited\" << endl;",
          "757:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "759:     cerr << \"Client inited\" << endl;",
          "",
          "[Removed Lines]",
          "756:     HttpClient client(\"http://localhost:1026\");",
          "",
          "[Added Lines]",
          "858:     HttpClient client(\"http://localhost:1027\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "766:         for ( uint8_t i = 0; i < 2; i++) {",
          "767:         levelDb->deleteKey(\"POLY:SCHAIN_ID:0:NODE_ID:\" + std::to_string(i) +",
          "768:                              \":DKG_ID:0\");",
          "770:           levelDb->deleteKey(\" DKG_DH_KEY_POLY:SCHAIN_ID:0:NODE_ID:\" + std::to_string(i)+ \":DKG_ID:0_0\");",
          "771:           levelDb->deleteKey(\" DKG_DH_KEY_POLY:SCHAIN_ID:0:NODE_ID:\" + std::to_string(i)+ \":DKG_ID:0_1\");",
          "772:         }",
          "774:        cout << c.importBLSKeyShare(\"4160780231445160889237664391382223604184857153814275770598791864649971919844\",\"BLS_KEY:SCHAIN_ID:2660016693368503500803087136248943520694587309641817:NODE_ID:33909:DKG_ID:3522960548719023733985054069487289468077787284706573\", 4, 3,1);",
          "",
          "[Added Lines]",
          "886:       cout << c.generateDKGPoly(\"POLY:SCHAIN_ID:14225439306783892379384764908040542049263455631509697460847850632966314337557:NODE_ID:1:DKG_ID:71951190446274221430521459675625214118086594348715\", 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "659c830a96f93f7e9a9f3ad480c69a2a02bd63c5",
      "candidate_info": {
        "commit_hash": "659c830a96f93f7e9a9f3ad480c69a2a02bd63c5",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/659c830a96f93f7e9a9f3ad480c69a2a02bd63c5",
        "files": [
          "ECDSACrypto.cpp",
          "Makefile.am",
          "SEKManager.cpp",
          "SEKManager.h",
          "ServerInit.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "testw.cpp"
        ],
        "message": "SKALE-2003 Add setting encrypted backup key from db",
        "before_after_code_files": [
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "Makefile.am||Makefile.am",
          "SEKManager.cpp||SEKManager.cpp",
          "SEKManager.h||SEKManager.h",
          "ServerInit.cpp||ServerInit.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:   if ( !is_aes)",
          "55:      status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "61:   }",
          "62:   std::vector<std::string> keys(3);",
          "63:   if (DEBUG_PRINT) {",
          "",
          "[Removed Lines]",
          "56:   else status = generate_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "58:   if ( err_status != 0 ){",
          "59:     std::cerr << \"RPCException thrown\" << std::endl;",
          "60:     throw RPCException(-666, errMsg) ;",
          "",
          "[Added Lines]",
          "56:   else",
          "57:      status = generate_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "59:   if ( status != SGX_SUCCESS || err_status != 0 ){",
          "60:     std::cerr << \"RPCException thrown with status\" << status << std::endl;",
          "61:     throw RPCException(status, errMsg) ;",
          "",
          "---------------"
        ],
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: ## Use the variables, not the actual library names to ensure these",
          "93: ## targets work on simulation builds.",
          "96:    -LlibBLS/build/libff/libff \\",
          "97:    -l:libbls.a -l:libleveldb.a \\",
          "98:    -l:libff.a -lgmp -ldl -l:libsgx_capable.a -l:libsgx_tprotected_fs.a \\",
          "",
          "[Removed Lines]",
          "95: sgxwallet_LDADD=-l$(SGX_URTS_LIB) -LlibBLS/deps/deps_inst/x86_or_x64/lib -Lleveldb/build -LlibBLS/build \\",
          "",
          "[Added Lines]",
          "95: sgxwallet_LDADD=-l$(SGX_URTS_LIB) -l$(SGX_UAE_SERVICE_LIB) -LlibBLS/deps/deps_inst/x86_or_x64/lib -Lleveldb/build -LlibBLS/build \\",
          "",
          "---------------"
        ],
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"LevelDB.h\"",
          "29: #include <iostream>",
          "31: #include \"sgxwallet_common.h\"",
          "32: #include \"common.h\"",
          "33: #include \"sgxwallet.h\"",
          "35: void generate_SEK(){",
          "37:   vector<char> errMsg(1024,0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include <algorithm>",
          "36: bool case_insensitive_match(string s1, string s2) {",
          "38:   transform(s1.begin(), s1.end(), s1.begin(), ::tolower);",
          "39:   transform(s2.begin(), s2.end(), s2.begin(), ::tolower);",
          "40:   return s1.compare(s2);",
          "41: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   vector<uint8_t> encr_SEK(1024, 0);",
          "40:   uint32_t enc_len = 0;",
          "46:   }",
          "48:   vector<char> hexEncrKey(2*enc_len + 1, 0);",
          "50:   carray2Hex(encr_SEK.data(), enc_len, hexEncrKey.data());",
          "54:   LevelDB::getLevelDb()->writeDataUnique(\"SEK\", hexEncrKey.data());",
          "56: }",
          "59:   vector<char> errMsg(1024,0);",
          "60:   int err_status = 0;",
          "65:   uint64_t len;",
          "",
          "[Removed Lines]",
          "42:   status = generate_SEK(eid, &err_status, errMsg.data(), encr_SEK.data(), &enc_len);",
          "43:   if ( err_status != 0 ){",
          "44:     cerr << \"RPCException thrown\" << endl;",
          "45:     throw RPCException(-666, errMsg.data()) ;",
          "52:   cerr << \"key is \" << errMsg.data() << endl;",
          "58: void setSEK(std::shared_ptr<std::string> hex_encr_SEK){",
          "63:   uint8_t encr_SEK [BUF_LEN];",
          "",
          "[Added Lines]",
          "51:   char SEK[65];",
          "52:   memset(SEK, 0, 65);",
          "54:   status = generate_SEK(eid, &err_status, errMsg.data(), encr_SEK.data(), &enc_len, SEK);",
          "55:   if (status != SGX_SUCCESS ||  err_status != 0  ){",
          "56:     throw RPCException(status, errMsg.data()) ;",
          "63:   cout << \"ATTENTION! THIS IS YOUR KEY FOR BACK UP. PLEASE COPY IT TO THE SAFE PLACE\" << endl;",
          "64:   cout << \"key is \" << SEK << endl;",
          "66:   std::string confirm_str = \"I confirm\";",
          "67:   std::string buffer;",
          "68:   do{",
          "69:     std::cout << \" DO YOU CONFIRM THAT YOU COPIED THE KEY? (if you confirm type - I confirm)\" << std::endl;",
          "70:     std::getline(std::cin, buffer);",
          "71:   } while (case_insensitive_match(confirm_str, buffer)); //(strcmp(confirm_str.c_str(), buffer.c_str()) != 0);",
          "73:   system(\"reset\");",
          "78: void set_SEK(std::shared_ptr<std::string> hex_encr_SEK){",
          "83:   uint8_t encr_SEK[BUF_LEN];",
          "84:   memset(encr_SEK, 0, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:     throw RPCException(INVALID_HEX, \"Invalid encrypted SEK Hex\");",
          "69:   }",
          "73:     cerr << \"RPCException thrown\" << endl;",
          "75:   }",
          "77: }",
          "",
          "[Removed Lines]",
          "71:   status = set_SEK(eid, &err_status, errMsg.data(), encr_SEK );",
          "72:   if ( err_status != 0 ){",
          "74:     throw RPCException(-666, errMsg.data()) ;",
          "",
          "[Added Lines]",
          "93:   std::cerr << \"len is \" << len << std::endl;",
          "95:   status = set_SEK(eid, &err_status, errMsg.data(), encr_SEK, len );",
          "96:   if ( status != SGX_SUCCESS || err_status != 0 ){",
          "98:     throw RPCException(status, errMsg.data()) ;",
          "101:   std::cerr << \"status is \" << status << std::endl;",
          "102:   std::cerr << \" aes key is \" << errMsg.data() << std::endl;",
          "",
          "---------------"
        ],
        "SEKManager.h||SEKManager.h": [
          "File: SEKManager.h -> SEKManager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: void generate_SEK();",
          "34: #endif //SGXD_SEKMANAGER_H",
          "",
          "[Removed Lines]",
          "32: void setSEK(std::shared_ptr<std::string> hex_encr_SEK);",
          "",
          "[Added Lines]",
          "32: void set_SEK(std::shared_ptr<std::string> hex_encr_SEK);",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:       generate_SEK();",
          "80:     }",
          "81:     else{",
          "84:     }",
          "85: }",
          "",
          "[Removed Lines]",
          "82:       spdlog::info(\"SEK was created\");",
          "83:       setSEK(encr_SEK_ptr);",
          "",
          "[Added Lines]",
          "82:       std::cerr << \"going to set SEK from db\" << std::endl;",
          "83:       set_SEK(encr_SEK_ptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:     if (sgxServerInited == 1)",
          "143:         return;",
          "145:     init_daemon();",
          "147:     sgxServerInited = 1;",
          "149:     if (is_sgx_https) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:     init_enclave();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:     else {",
          "155:       init_http_server();",
          "156:     }",
          "160: }",
          "",
          "[Removed Lines]",
          "157:     init_enclave();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "907: }",
          "909: void generate_SEK(int *err_status, char *err_string,",
          "911:   uint8_t SEK_raw[SGX_AESGCM_KEY_SIZE];",
          "914:   uint32_t hex_aes_key_length = SGX_AESGCM_KEY_SIZE * 2;",
          "915:   uint8_t SEK[hex_aes_key_length];",
          "919:   uint32_t sealedLen = sgx_calc_sealed_data_size(0, hex_aes_key_length + 1);",
          "923:     AES_key[i] = SEK_raw[i];",
          "924:   }",
          "927:   if( status !=  SGX_SUCCESS) {",
          "928:     snprintf(err_string, BUF_LEN, \"seal SEK failed\");",
          "930:     return;",
          "931:   }",
          "935: }",
          "941:   sgx_status_t status = sgx_unseal_data(",
          "943:   if (status != SGX_SUCCESS) {",
          "945:     snprintf(err_string, BUF_LEN,\"sgx unseal SEK failed with status %d\", status);",
          "946:     return;",
          "947:   }",
          "948: }",
          "950: void generate_ecdsa_key_aes(int *err_status, char *err_string,",
          "",
          "[Removed Lines]",
          "910:                         uint8_t *encrypted_SEK, uint32_t *enc_len){",
          "913:   sgx_read_rand( SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "916:   carray2Hex(SEK_raw, SGX_AESGCM_KEY_SIZE, SEK);",
          "920:   memcpy(err_string, SEK, BUF_LEN);",
          "922:   for ( uint8_t i = 0; i < SGX_AESGCM_KEY_SIZE; i++){",
          "926:   sgx_status_t status = sgx_seal_data(0, NULL, hex_aes_key_length + 1, SEK, sealedLen,(sgx_sealed_data_t*)encrypted_SEK);",
          "937: void set_SEK(int *err_status, char *err_string, uint8_t *encrypted_SEK){",
          "939:   uint32_t len;",
          "942:       (const sgx_sealed_data_t *)encrypted_SEK, NULL, 0, (uint8_t *)AES_key, &len);",
          "",
          "[Added Lines]",
          "910:                         uint8_t *encrypted_SEK, uint32_t *enc_len, char* SEK_hex){",
          "913:   sgx_read_rand(SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "917:   carray2Hex(SEK_raw, SGX_AESGCM_KEY_SIZE, SEK_hex);",
          "921:   for ( uint8_t i = 0; i < 16; i++){",
          "925:   sgx_status_t status = sgx_seal_data(0, NULL, hex_aes_key_length + 1, SEK_hex, sealedLen,(sgx_sealed_data_t*)encrypted_SEK);",
          "938: void set_SEK(int *err_status, char *err_string, uint8_t *encrypted_SEK, uint64_t encr_len){",
          "942:   uint8_t aes_key_hex[SGX_AESGCM_KEY_SIZE * 2];",
          "943:   memset(aes_key_hex, 0, SGX_AESGCM_KEY_SIZE * 2);",
          "946:       (const sgx_sealed_data_t *)encrypted_SEK, NULL, 0, aes_key_hex, &encr_len);",
          "953:   uint64_t len;",
          "954:   hex2carray(aes_key_hex, &len, (uint8_t* )AES_key);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:                                 [user_check] int *err_status,",
          "170:                                 [out, count = 1024] char *err_string,",
          "171:                                 [out, count = 1024] uint8_t *encrypted_SEK,",
          "174:                 public void set_SEK(",
          "175:                                 [user_check] int *err_status,",
          "176:                                 [out, count = 1024] char *err_string,",
          "179:                 public void generate_ecdsa_key_aes (",
          "180:                                 [user_check] int *err_status,",
          "",
          "[Removed Lines]",
          "172:                                 [user_check] uint32_t *enc_len);",
          "177:                                 [in, count = 1024] uint8_t *encrypted_SEK);",
          "",
          "[Added Lines]",
          "172:                                 [user_check] uint32_t *enc_len,",
          "173:                                 [out, count = 65] char* hex_SEK);",
          "178:                                 [in, count = 1024] uint8_t *encrypted_SEK,",
          "179:                                 uint64_t encr_len);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1207:   DEBUG_PRINT = 1;",
          "1208:   is_aes = 1;",
          "1210:   std::cerr << \"test started\" << std::endl;",
          "1211:   init_all(false, false);",
          "1212:   cerr << \"Server inited\" << endl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1211:   reset_db();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1214:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "1215:   cerr << \"Client inited\" << endl;",
          "1220:   Json::Value EthKeys[n];",
          "1221:   Json::Value VerifVects[n];",
          "1222:   Json::Value pubEthKeys;",
          "",
          "[Removed Lines]",
          "1217:   reset_db();",
          "1219:   int n = 16, t = 16;",
          "",
          "[Added Lines]",
          "1220:   int n = 2, t = 2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1230:   int dkg_id = rand_gen();",
          "1231:   for ( uint8_t i = 0; i < n; i++){",
          "1232:     EthKeys[i] = c.generateECDSAKey();",
          "1233:     string polyName = \"POLY:SCHAIN_ID:\" + to_string(schain_id) + \":NODE_ID:\" + to_string(i) + \":DKG_ID:\" + to_string(dkg_id);",
          "1234:     REQUIRE(EthKeys[i][\"status\"] == 0);",
          "1235:     cout << c.generateDKGPoly(polyName, t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1234:     std::cerr << \"after gen key\" << std::endl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1276:     }",
          "1282:   Json::Value complaintResponse = c.complaintResponse(poly_names[1], 0);",
          "1283:   cout << complaintResponse << endl;",
          "",
          "[Removed Lines]",
          "1278:   std::cerr << \"before exit \" << std::endl;",
          "1279:   exit(0);",
          "1280:   std::cerr << \"after exit \" << std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da0c0687b58e9a4dca5b75d0325271f4c7f1534b",
      "candidate_info": {
        "commit_hash": "da0c0687b58e9a4dca5b75d0325271f4c7f1534b",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/da0c0687b58e9a4dca5b75d0325271f4c7f1534b",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKLAE-2794 fix memory leak",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:     signature_extract_public_key(Pkey, skey, curve);",
          "162:     char arr_x[len];",
          "164:     int n_zeroes = 64 - strlen(arr_x);",
          "165:     for (int i = 0; i < n_zeroes; i++) {",
          "166:         pub_key_x[i] = '0';",
          "",
          "[Removed Lines]",
          "159:     uint8_t base = 16;",
          "161:     int len = mpz_sizeinbase(Pkey->x, base) + 2;",
          "163:     mpz_get_str(arr_x, base, Pkey->x);",
          "",
          "[Added Lines]",
          "156:     int len = mpz_sizeinbase(Pkey->x, ECDSA_SKEY_BASE) + 2;",
          "158:     mpz_get_str(arr_x, ECDSA_SKEY_BASE, Pkey->x);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:     strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "173:     n_zeroes = 64 - strlen(arr_y);",
          "174:     for (int i = 0; i < n_zeroes; i++) {",
          "175:         pub_key_y[i] = '0';",
          "",
          "[Removed Lines]",
          "171:     char arr_y[mpz_sizeinbase(Pkey->y, base) + 2];",
          "172:     mpz_get_str(arr_y, base, Pkey->y);",
          "",
          "[Added Lines]",
          "166:     char arr_y[mpz_sizeinbase(Pkey->y, ECDSA_SKEY_BASE) + 2];",
          "167:     mpz_get_str(arr_y, ECDSA_SKEY_BASE, Pkey->y);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255:         return;",
          "256:     }",
          "261:     char arr_x[len];",
          "263:     int n_zeroes = 64 - strlen(arr_x);",
          "264:     for (int i = 0; i < n_zeroes; i++) {",
          "265:         pub_key_x[i] = '0';",
          "",
          "[Removed Lines]",
          "258:     int base = 16;",
          "260:     int len = mpz_sizeinbase(Pkey->x, base) + 2;",
          "262:     mpz_get_str(arr_x, base, Pkey->x);",
          "",
          "[Added Lines]",
          "252:     int len = mpz_sizeinbase(Pkey->x, ECDSA_SKEY_BASE) + 2;",
          "254:     mpz_get_str(arr_x, ECDSA_SKEY_BASE, Pkey->x);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268:     strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "272:     n_zeroes = 64 - strlen(arr_y);",
          "273:     for (int i = 0; i < n_zeroes; i++) {",
          "274:         pub_key_y[i] = '0';",
          "",
          "[Removed Lines]",
          "270:     char arr_y[mpz_sizeinbase(Pkey->y, base) + 2];",
          "271:     mpz_get_str(arr_y, base, Pkey->y);",
          "",
          "[Added Lines]",
          "262:     char arr_y[mpz_sizeinbase(Pkey->y, ECDSA_SKEY_BASE) + 2];",
          "263:     mpz_get_str(arr_y, ECDSA_SKEY_BASE, Pkey->y);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "465:     }",
          "467:     if (decLen > MAX_KEY_LENGTH) {",
          "469:         return;",
          "470:     }",
          "",
          "[Removed Lines]",
          "468:         snprintf(errString, BUF_LEN, \"wrong decLen\");//\"decLen != MAX_KEY_LENGTH\");",
          "",
          "[Added Lines]",
          "459:         snprintf(errString, BUF_LEN, \"wrong decLen\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "525:     snprintf(errString, BUF_LEN, \"poly is %s \", dkg_secret);",
          "530:     sgx_status_t status = sgx_seal_data(0, NULL, DKG_BUFER_LENGTH, (uint8_t *) dkg_secret, sealedLen,",
          "531:                                         (sgx_sealed_data_t *) encrypted_dkg_secret);",
          "",
          "[Removed Lines]",
          "527:     uint32_t sealedLen = sgx_calc_sealed_data_size(0,",
          "528:                                                    DKG_BUFER_LENGTH);//sizeof(sgx_sealed_data_t) +  sizeof(dkg_secret);",
          "",
          "[Added Lines]",
          "517:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "586:     trustedDecryptDkgSecret(errStatus, errString, (uint8_t *) encrypted_dkg_secret, (uint8_t *)decrypted_dkg_secret, &decr_len);",
          "587:     if (*errStatus != 0) {",
          "588:         snprintf(errString, BUF_LEN, \"trustedDecryptDkgSecret failed with status %d\", *errStatus);",
          "589:         return;",
          "590:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:         free(decrypted_dkg_secret);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "734:     }",
          "738:     snprintf(errString, BUF_LEN, \"common_key in verification is %s\", common_key);",
          "739: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725:     mpz_clear(s);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "945:     signature_extract_public_key(Pkey, skey, curve);",
          "950:     char arr_x[len];",
          "952:     int n_zeroes = 64 - strlen(arr_x);",
          "953:     for (int i = 0; i < n_zeroes; i++) {",
          "954:         pub_key_x[i] = '0';",
          "",
          "[Removed Lines]",
          "947:     uint8_t base = 16;",
          "949:     int len = mpz_sizeinbase(Pkey->x, base) + 2;",
          "951:     mpz_get_str(arr_x, base, Pkey->x);",
          "",
          "[Added Lines]",
          "936:     int len = mpz_sizeinbase(Pkey->x, ECDSA_SKEY_BASE) + 2;",
          "938:     mpz_get_str(arr_x, ECDSA_SKEY_BASE, Pkey->x);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "957:     strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "961:     n_zeroes = 64 - strlen(arr_y);",
          "962:     for (int i = 0; i < n_zeroes; i++) {",
          "963:         pub_key_y[i] = '0';",
          "964:     }",
          "965:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "966:     char skey_str[ECDSA_SKEY_LEN];",
          "968:     char arr_skey_str[mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2];",
          "969:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
          "970:     n_zeroes = 64 - strlen(arr_skey_str);",
          "",
          "[Removed Lines]",
          "959:     char arr_y[mpz_sizeinbase(Pkey->y, base) + 2];",
          "960:     mpz_get_str(arr_y, base, Pkey->y);",
          "",
          "[Added Lines]",
          "946:     char arr_y[mpz_sizeinbase(Pkey->y, ECDSA_SKEY_BASE) + 2];",
          "947:     mpz_get_str(arr_y, ECDSA_SKEY_BASE, Pkey->y);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "994:     if (stat != 0) {",
          "995:         snprintf(errString + 19 + strlen(skey_str), BUF_LEN, \"ecdsa private key decr failed with status %d\", stat);",
          "997:         return;",
          "998:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "984:         mpz_clear(skey);",
          "985:         domain_parameters_clear(curve);",
          "986:         point_clear(Pkey);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1053:         mpz_clear(privateKeyMpz);",
          "1054:         domain_parameters_clear(curve);",
          "1055:         point_clear(Pkey);",
          "1057:         return;",
          "1058:     }",
          "1064:     char arr_x[len];",
          "1067:     int n_zeroes = 64 - strlen(arr_x);",
          "1068:     for (int i = 0; i < n_zeroes; i++) {",
          "",
          "[Removed Lines]",
          "1060:     int base = 16;",
          "1062:     int len = mpz_sizeinbase(Pkey->x, base) + 2;",
          "1065:     mpz_get_str(arr_x, base, Pkey->x);",
          "",
          "[Added Lines]",
          "1047:         point_clear(Pkey_test);",
          "1052:     int len = mpz_sizeinbase(Pkey->x, ECDSA_SKEY_BASE) + 2;",
          "1055:     mpz_get_str(arr_x, ECDSA_SKEY_BASE, Pkey->x);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1072:     strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "1076:     n_zeroes = 64 - strlen(arr_y);",
          "1077:     for (int i = 0; i < n_zeroes; i++) {",
          "1078:         pub_key_y[i] = '0';",
          "",
          "[Removed Lines]",
          "1074:     char arr_y[mpz_sizeinbase(Pkey->y, base) + 2];",
          "1075:     mpz_get_str(arr_y, base, Pkey->y);",
          "",
          "[Added Lines]",
          "1064:     char arr_y[mpz_sizeinbase(Pkey->y, ECDSA_SKEY_BASE) + 2];",
          "1065:     mpz_get_str(arr_y, ECDSA_SKEY_BASE, Pkey->y);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1082:     mpz_clear(privateKeyMpz);",
          "1083:     domain_parameters_clear(curve);",
          "1084:     point_clear(Pkey);",
          "1085: }",
          "1087: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1075:     point_clear(Pkey_test);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1484:     }",
          "1488:     snprintf(errString, BUF_LEN, \"secret share dec %s\", public_shares);",
          "1489: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1477:     mpz_clear(s);",
          "",
          "---------------"
        ]
      }
    }
  ]
}