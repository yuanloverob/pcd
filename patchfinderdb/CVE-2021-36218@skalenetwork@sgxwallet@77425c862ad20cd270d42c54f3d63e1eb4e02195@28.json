{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "659946a2c362342842707dae1e78274b4c46905f",
      "candidate_info": {
        "commit_hash": "659946a2c362342842707dae1e78274b4c46905f",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/659946a2c362342842707dae1e78274b4c46905f",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-2879-fix-performance",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: void free_function(void *, size_t);",
          "75: void trustedEnclaveInit(uint32_t _logLevel) {",
          "78:     globalLogLevel_ = _logLevel;",
          "",
          "[Removed Lines]",
          "73: unsigned char* globalRandom;",
          "76:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "73: unsigned char *globalRandom;",
          "76:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     mp_set_memory_functions(NULL, oc_realloc_func, oc_free_func);",
          "89:     sgx_read_rand(globalRandom, 32);",
          "",
          "[Removed Lines]",
          "87:     globalRandom = (unsigned char *) calloc(32,1);",
          "",
          "[Added Lines]",
          "87:     globalRandom = (unsigned char *) calloc(32, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:     return (void *) nptr;",
          "130: }",
          "133:     assert(_size <= 32);",
          "134:     sgx_sha_state_handle_t shaStateHandle;",
          "135:     assert(sgx_sha256_init(&shaStateHandle) == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "132: void get_global_random(unsigned char* _randBuff, uint64_t _size) {",
          "",
          "[Added Lines]",
          "132: void get_global_random(unsigned char *_randBuff, uint64_t _size) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150: void trustedEMpfDiv(mpf_t *c_un, mpf_t *a_un, mpf_t *b_un) {}",
          "152: void trustedGenerateEcdsaKey(int *errStatus, char *errString,",
          "156:     domain_parameters curve = domain_parameters_init();",
          "157:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Removed Lines]",
          "153:                         uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "154:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "153:                              uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "154:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219: }",
          "221: void trustedGetPublicEcdsaKey(int *errStatus, char *errString,",
          "225:     domain_parameters curve = domain_parameters_init();",
          "226:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Removed Lines]",
          "222:                           uint8_t *encryptedPrivateKey, uint32_t dec_len, char *pub_key_x, char *pub_key_y) {",
          "223:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "222:                               uint8_t *encryptedPrivateKey, uint32_t dec_len, char *pub_key_x, char *pub_key_y) {",
          "223:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "296: }",
          "298: void trustedEcdsaSign(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t dec_len,",
          "307:     signature sign = signature_init();",
          "",
          "[Removed Lines]",
          "299:                  unsigned char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
          "300:     LOG_DEBUG (__FUNCTION__);",
          "302:     char* arrR = NULL;",
          "303:     char* arrS = NULL;",
          "305:     char* privateKey = calloc(ECDSA_SKEY_LEN,1);",
          "",
          "[Added Lines]",
          "299:                       unsigned char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
          "300:     LOG_DEBUG(__FUNCTION__);",
          "302:     char *arrR = NULL;",
          "303:     char *arrS = NULL;",
          "305:     char *privateKey = calloc(ECDSA_SKEY_LEN, 1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "313:     if (!hash) {",
          "316:         LOG_ERROR(msg);",
          "317:         snprintf(errString, BUF_LEN, msg);",
          "318:         goto clean;",
          "319:     }",
          "324:         LOG_ERROR(msg);",
          "325:         snprintf(errString, BUF_LEN, msg);",
          "326:         goto clean;",
          "",
          "[Removed Lines]",
          "315:         char* msg = \"NULL message hash\";",
          "321:     if (strnlen(hash, 64 ) > 64) {",
          "323:         char* msg = \"Hash too long\";",
          "",
          "[Added Lines]",
          "315:         char *msg = \"NULL message hash\";",
          "321:     if (strnlen(hash, 64) > 64) {",
          "323:         char *msg = \"Hash too long\";",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "343:     }",
          "345:     sgx_status_t status = sgx_unseal_data(",
          "348:     if (status != SGX_SUCCESS) {",
          "352:         LOG_ERROR(errString);",
          "353:         goto clean;",
          "354:     }",
          "356:     mpz_t privateKeyMpz;",
          "357:     mpz_init(privateKeyMpz);",
          "358:     if (mpz_set_str(privateKeyMpz, privateKey, ECDSA_SKEY_BASE) == -1) {",
          "",
          "[Removed Lines]",
          "346:             (const sgx_sealed_data_t *) encryptedPrivateKey, NULL, 0, (uint8_t *)privateKey, &dec_len);",
          "350:         snprintf(errString, BUF_LEN,",
          "351:                 \"sgx_unseal_data failed for encryptedPrivateKey:status %d\", status);",
          "",
          "[Added Lines]",
          "346:             (const sgx_sealed_data_t *) encryptedPrivateKey, NULL, 0, (uint8_t *) privateKey, &dec_len);",
          "350:         snprintf(errString, BUF_LEN,",
          "351:                  \"sgx_unseal_data failed for encryptedPrivateKey:status %d\", status);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "373:         goto clean;",
          "374:     }",
          "377:     mpz_get_str(arrR, base, sign->r);",
          "378:     strncpy(sigR, arrR, 1024);",
          "379:     arrS = calloc(mpz_sizeinbase(sign->s, base) + 2, 1);",
          "",
          "[Removed Lines]",
          "376:     arrR = calloc(mpz_sizeinbase(sign->r, base) + 2,1);",
          "",
          "[Added Lines]",
          "376:     arrR = calloc(mpz_sizeinbase(sign->r, base) + 2, 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "387:     mpz_clear(msgMpz);",
          "388:     domain_parameters_clear(curve);",
          "389:     point_clear(publicKey);",
          "391:     signature_free(sign);",
          "393:     if (privateKey) {",
          "394:         free(privateKey);",
          "397:     if (arrR) {",
          "398:         free(arrR);",
          "",
          "[Removed Lines]",
          "395:      }",
          "",
          "[Added Lines]",
          "395:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "406: }",
          "408: void trustedEncryptKey(int *errStatus, char *errString, const char *key,",
          "",
          "[Removed Lines]",
          "409:                  uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
          "410:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "409:                        uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
          "410:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "416:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, ECDSA_SKEY_LEN);",
          "424:     memset(encryptedPrivateKey, 0, BUF_LEN);",
          "",
          "[Removed Lines]",
          "418:      if (sealedLen > BUF_LEN) {",
          "420:          snprintf(errString, BUF_LEN, \"sealedLen > MAX_ENCRYPTED_KEY_LENGTH\");",
          "421:          return;",
          "422:      }",
          "",
          "[Added Lines]",
          "418:     if (sealedLen > BUF_LEN) {",
          "420:         snprintf(errString, BUF_LEN, \"sealedLen > MAX_ENCRYPTED_KEY_LENGTH\");",
          "421:         return;",
          "422:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "461: }",
          "463: void trustedDecryptKey(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "467:     uint32_t decLen;",
          "",
          "[Removed Lines]",
          "464:                  uint32_t enc_len, char *key) {",
          "465:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "464:                        uint32_t enc_len, char *key) {",
          "465:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "496: }",
          "498: void trustedBlsSignMessage(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "503:     char key[BUF_LEN];",
          "504:     char *sig = (char *) calloc(BUF_LEN, 1);",
          "",
          "[Removed Lines]",
          "499:                       uint32_t enc_len, char *_hashX,",
          "500:                       char *_hashY, char *signature) {",
          "501:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "499:                            uint32_t enc_len, char *_hashX,",
          "500:                            char *_hashY, char *signature) {",
          "501:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "525: }",
          "527: void trustedGenDkgSecret(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "530:     char dkg_secret[DKG_BUFER_LENGTH];",
          "",
          "[Removed Lines]",
          "528:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "528:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "551: }",
          "554:                         uint32_t *dec_len) {",
          "557:     uint32_t decr_len;",
          "558:     sgx_status_t status = sgx_unseal_data(",
          "",
          "[Removed Lines]",
          "553: void trustedDecryptDkgSecret(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "555:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "553: void",
          "554: trustedDecryptDkgSecret(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "556:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "568: }",
          "570: void trustedGetSecretShares(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *dec_len,",
          "575:     char decrypted_dkg_secret[DKG_BUFER_LENGTH];",
          "",
          "[Removed Lines]",
          "571:                        char *secret_shares,",
          "572:                        unsigned _t, unsigned _n) {",
          "573:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "572:                             char *secret_shares,",
          "573:                             unsigned _t, unsigned _n) {",
          "574:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "588: }",
          "590: void trustedGetPublicShares(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "595:     char *decrypted_dkg_secret = (char *) calloc(DKG_MAX_SEALED_LEN, 1);",
          "596:     uint32_t decr_len;",
          "598:     if (*errStatus != 0) {",
          "599:         snprintf(errString, BUF_LEN, \"trustedDecryptDkgSecret failed with status %d\", *errStatus);",
          "600:         free(decrypted_dkg_secret);",
          "",
          "[Removed Lines]",
          "591:                        char *public_shares,",
          "592:                        unsigned _t, unsigned _n) {",
          "593:     LOG_DEBUG (__FUNCTION__);",
          "597:     trustedDecryptDkgSecret(errStatus, errString, (uint8_t *) encrypted_dkg_secret, (uint8_t *)decrypted_dkg_secret, &decr_len);",
          "",
          "[Added Lines]",
          "592:                             char *public_shares,",
          "593:                             unsigned _t, unsigned _n) {",
          "594:     LOG_DEBUG(__FUNCTION__);",
          "598:     trustedDecryptDkgSecret(errStatus, errString, (uint8_t *) encrypted_dkg_secret, (uint8_t *) decrypted_dkg_secret,",
          "599:                             &decr_len);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "626: }",
          "628: void trustedGetEncryptedSecretShare(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "632:     char skey[ECDSA_SKEY_LEN];",
          "633:     char pub_key_x[BUF_LEN];",
          "",
          "[Removed Lines]",
          "629:                      char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind) {",
          "630:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "631:                                     char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
          "632:                                     uint8_t ind) {",
          "633:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "657:     char *common_key[ECDSA_SKEY_LEN];",
          "658:     gen_session_key(skey, pub_keyB, common_key);",
          "661:     if (calc_secret_share(decryptedDkgPoly, s_share, _t, _n, ind) != 0) {",
          "",
          "[Removed Lines]",
          "659:     char *s_share[ECDSA_SKEY_LEN]; ;",
          "",
          "[Added Lines]",
          "662:     char *s_share[ECDSA_SKEY_LEN];;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "685: }",
          "687: void trustedComplaintResponse(int *errStatus, char *errString, uint8_t *encryptedDHKey, uint8_t *encrypted_dkg_secret,",
          "692:     char decrypted_dkg_secret[DKG_BUFER_LENGTH];",
          "693:     uint32_t decr_len;",
          "",
          "[Removed Lines]",
          "688:                         uint32_t *dec_len,",
          "689:                         char *DH_key, char *s_shareG2, uint8_t _t, uint8_t _n, uint8_t ind1) {",
          "690:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "691:                               uint32_t *dec_len,",
          "692:                               char *DH_key, char *s_shareG2, uint8_t _t, uint8_t _n, uint8_t ind1) {",
          "693:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "703: void trustedDkgVerify(int *errStatus, char *errString, const char *public_shares, const char *s_share,",
          "704:                       uint8_t *encryptedPrivateKey, uint64_t key_len, unsigned _t, int _ind, int *result) {",
          "707:     char skey[ECDSA_SKEY_LEN];",
          "708:     sgx_status_t status = sgx_unseal_data(",
          "",
          "[Removed Lines]",
          "705:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "708:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "750: }",
          "752: void trustedCreateBlsKey(int *errStatus, char *errString, const char *s_shares,",
          "756:     char skey[ECDSA_SKEY_LEN];",
          "757:     sgx_status_t status = sgx_unseal_data(",
          "",
          "[Removed Lines]",
          "753:                     uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key, uint32_t *enc_bls_key_len) {",
          "754:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "756:                          uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
          "757:                          uint32_t *enc_bls_key_len) {",
          "758:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "842:     mpz_clear(q);",
          "843: }",
          "848:     char skey_hex[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "845: void trustedGetBlsPubKey(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t key_len, char *bls_pub_key) {",
          "846:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "849: void trustedGetBlsPubKey(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t key_len,",
          "850:                          char *bls_pub_key) {",
          "851:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "865: }",
          "867: void trustedGenerateSEK(int *errStatus, char *errString,",
          "871:     uint8_t SEK_raw[SGX_AESGCM_KEY_SIZE];",
          "872:     sgx_read_rand(SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "",
          "[Removed Lines]",
          "868:                   uint8_t *encrypted_SEK, uint32_t *enc_len, char *SEK_hex) {",
          "869:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "873:                         uint8_t *encrypted_SEK, uint32_t *enc_len, char *SEK_hex) {",
          "874:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "880:         AES_key[i] = SEK_raw[i];",
          "881:     }",
          "884:                                         (sgx_sealed_data_t *) encrypted_SEK);",
          "885:     if (status != SGX_SUCCESS) {",
          "886:         snprintf(errString, BUF_LEN, \"seal SEK failed\");",
          "",
          "[Removed Lines]",
          "883:     sgx_status_t status = sgx_seal_data(0, NULL, hex_aes_key_length + 1, (uint8_t *)SEK_hex, sealedLen,",
          "",
          "[Added Lines]",
          "888:     sgx_status_t status = sgx_seal_data(0, NULL, hex_aes_key_length + 1, (uint8_t *) SEK_hex, sealedLen,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "892: }",
          "894: void trustedSetSEK(int *errStatus, char *errString, uint8_t *encrypted_SEK, uint64_t encr_len) {",
          "897:     uint8_t aes_key_hex[SGX_AESGCM_KEY_SIZE * 2];",
          "898:     memset(aes_key_hex, 0, SGX_AESGCM_KEY_SIZE * 2);",
          "",
          "[Removed Lines]",
          "895:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "900:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "910: }",
          "912: void trustedSetSEK_backup(int *errStatus, char *errString,",
          "916:     uint64_t len;",
          "917:     hex2carray(SEK_hex, &len, (uint8_t *) AES_key);",
          "919:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, strlen(SEK_hex) + 1);",
          "922:                                         (sgx_sealed_data_t *) encrypted_SEK);",
          "923:     if (status != SGX_SUCCESS) {",
          "924:         snprintf(errString, BUF_LEN, \"seal SEK failed with status %d\", status);",
          "",
          "[Removed Lines]",
          "913:                     uint8_t *encrypted_SEK, uint32_t *enc_len, const char *SEK_hex) {",
          "914:     LOG_DEBUG (__FUNCTION__);",
          "921:     sgx_status_t status = sgx_seal_data(0, NULL, strlen(SEK_hex) + 1, (uint8_t *)SEK_hex, sealedLen,",
          "",
          "[Added Lines]",
          "918:                           uint8_t *encrypted_SEK, uint32_t *enc_len, const char *SEK_hex) {",
          "919:     LOG_DEBUG(__FUNCTION__);",
          "926:     sgx_status_t status = sgx_seal_data(0, NULL, strlen(SEK_hex) + 1, (uint8_t *) SEK_hex, sealedLen,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "930: }",
          "932: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
          "936:     domain_parameters curve = domain_parameters_init();",
          "937:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Removed Lines]",
          "933:                             uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "934:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "938:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "939:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1016: }",
          "1018: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
          "1022:     domain_parameters curve = domain_parameters_init();",
          "1023:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Removed Lines]",
          "1019:                               uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
          "1020:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "1027:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
          "1028:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1106:     point_clear(Pkey_test);",
          "1107: }",
          "1109: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
          "1116:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "1110:                     unsigned char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
          "1111:     LOG_DEBUG (__FUNCTION__);",
          "1113:     domain_parameters curve = domain_parameters_init();",
          "1114:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Added Lines]",
          "1117: static uint64_t sigCounter = 0;",
          "1118: static domain_parameters ecdsaCurve = NULL;",
          "1122:                          unsigned char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
          "1123:     LOG_DEBUG(__FUNCTION__);",
          "1125:     if (!ecdsaCurve) {",
          "1126:         ecdsaCurve = domain_parameters_init();",
          "1127:         domain_parameters_load_curve(ecdsaCurve, secp256k1);",
          "1128:     }",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1120:     if (status != 0) {",
          "1122:         snprintf(errString, BUF_LEN, \"aes decrypt failed with status %d\", status);",
          "1126:         return;",
          "1127:     }",
          "",
          "[Removed Lines]",
          "1124:         domain_parameters_clear(curve);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1137:         LOG_ERROR(skey);",
          "1139:         mpz_clear(privateKeyMpz);",
          "1142:         return;",
          "1143:     }",
          "",
          "[Removed Lines]",
          "1140:         domain_parameters_clear(curve);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1151:         mpz_clear(privateKeyMpz);",
          "1152:         mpz_clear(msgMpz);",
          "1155:         return;",
          "1156:     }",
          "1158:     signature sign = signature_init();",
          "1177:     }",
          "1179:     char arrM[mpz_sizeinbase(msgMpz, 16) + 2];",
          "",
          "[Removed Lines]",
          "1153:         domain_parameters_clear(curve);",
          "1160:     signature_sign(sign, msgMpz, privateKeyMpz, curve);",
          "1162:     point Pkey = point_init();",
          "1164:     signature_extract_public_key(Pkey, privateKeyMpz, curve);",
          "1166:     if (!signature_verify(msgMpz, sign, Pkey, curve)) {",
          "1168:         snprintf(errString, BUF_LEN, \"signature is not verified! \");",
          "1170:         mpz_clear(privateKeyMpz);",
          "1171:         mpz_clear(msgMpz);",
          "1172:         domain_parameters_clear(curve);",
          "1173:         signature_free(sign);",
          "1174:         point_clear(Pkey);",
          "1176:         return;",
          "",
          "[Added Lines]",
          "1169:     signature_sign(sign, msgMpz, privateKeyMpz, ecdsaCurve);",
          "1171:     sigCounter++;",
          "1173:     if (sigCounter % 1000 == 0) {",
          "1175:         point Pkey = point_init();",
          "1177:         signature_extract_public_key(Pkey, privateKeyMpz, ecdsaCurve);",
          "1179:         if (!signature_verify(msgMpz, sign, Pkey, ecdsaCurve)) {",
          "1181:             snprintf(errString, BUF_LEN, \"signature is not verified! \");",
          "1183:             mpz_clear(privateKeyMpz);",
          "1184:             mpz_clear(msgMpz);",
          "1185:             domain_parameters_clear(ecdsaCurve);",
          "1186:             signature_free(sign);",
          "1187:             point_clear(Pkey);",
          "1189:             return;",
          "1190:         }",
          "1192:         point_clear(Pkey);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1193:     mpz_clear(privateKeyMpz);",
          "1194:     mpz_clear(msgMpz);",
          "1196:     signature_free(sign);",
          "1198: }",
          "1200: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
          "",
          "[Removed Lines]",
          "1195:     domain_parameters_clear(curve);",
          "1197:     point_clear(Pkey);",
          "1201:                      uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
          "1202:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "1215:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
          "1216:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1245: }",
          "1247: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "1249:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "1248:                      uint32_t enc_len, char *key) {",
          "",
          "[Added Lines]",
          "1262:                           uint32_t enc_len, char *key) {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1272: }",
          "1274: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "1279:     char key[BUF_LEN];",
          "1280:     memset(key, 0, BUF_LEN);",
          "",
          "[Removed Lines]",
          "1275:                           uint32_t enc_len, char *_hashX,",
          "1276:                           char *_hashY, char *signature) {",
          "1277:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "1289:                               uint32_t enc_len, char *_hashX,",
          "1290:                               char *_hashY, char *signature) {",
          "1291:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1302: void",
          "1303: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "1306:     char dkg_secret[DKG_BUFER_LENGTH];",
          "1307:     memset(dkg_secret, 0, DKG_BUFER_LENGTH);",
          "",
          "[Removed Lines]",
          "1304:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "1318:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1342: }",
          "1344: void",
          "1351:     if (status != SGX_SUCCESS) {",
          "1352:         snprintf(errString, BUF_LEN, \"aes decrypt data - encrypted_dkg_secret failed with status %d\", status);",
          "",
          "[Removed Lines]",
          "1345: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "1346:                        uint32_t *dec_len) {",
          "1347:     LOG_DEBUG (__FUNCTION__);",
          "1349:     int status = AES_decrypt(encrypted_dkg_secret, *dec_len, (char *)decrypted_dkg_secret);",
          "",
          "[Added Lines]",
          "1359: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
          "1360:                            uint8_t *decrypted_dkg_secret,",
          "1361:                            uint32_t *dec_len) {",
          "1362:     LOG_DEBUG(__FUNCTION__);",
          "1364:     int status = AES_decrypt(encrypted_dkg_secret, *dec_len, (char *) decrypted_dkg_secret);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1356: }",
          "1358: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t *enc_len) {",
          "1361:     memset(decryptedDkgPoly, 0, DKG_BUFER_LENGTH);",
          "1364:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "1359:     LOG_DEBUG (__FUNCTION__);",
          "1362:     int status = AES_decrypt(encrypted_poly, *enc_len, (char *)decryptedDkgPoly);",
          "",
          "[Added Lines]",
          "1374:     LOG_DEBUG(__FUNCTION__);",
          "1377:     int status = AES_decrypt(encrypted_poly, *enc_len, (char *) decryptedDkgPoly);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1369: }",
          "1371: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "1373:     LOG_DEBUG(__FUNCTION__);",
          "1375:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "1372:                          char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind) {",
          "",
          "[Added Lines]",
          "1387:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
          "1388:                                        uint8_t ind) {",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1390:     skey[ECDSA_SKEY_LEN - 1] = 0;",
          "1392:     if (status != SGX_SUCCESS) {",
          "1395:         return;",
          "1396:     }",
          "",
          "[Removed Lines]",
          "1393:         snprintf(errString, BUF_LEN, \"AES_decrypt failed (in trustedGetEncryptedSecretShareAES)  with status %d\", status);",
          "",
          "[Added Lines]",
          "1409:         snprintf(errString, BUF_LEN, \"AES_decrypt failed (in trustedGetEncryptedSecretShareAES)  with status %d\",",
          "1410:                  status);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1431: }",
          "1433: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "1438:     char *decrypted_dkg_secret = (char *) calloc(DKG_MAX_SEALED_LEN, 1);",
          "1439:     memset(decrypted_dkg_secret, 0, DKG_MAX_SEALED_LEN);",
          "",
          "[Removed Lines]",
          "1434:                            char *public_shares,",
          "1435:                            unsigned _t, unsigned _n) {",
          "1436:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "1451:                                char *public_shares,",
          "1452:                                unsigned _t, unsigned _n) {",
          "1453:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1458: }",
          "1460: void trustedDkgVerifyAES(int *errStatus, char *errString, const char *public_shares, const char *s_share,",
          "1464:     char skey[ECDSA_SKEY_LEN];",
          "1465:     memset(skey, 0, ECDSA_SKEY_LEN);",
          "",
          "[Removed Lines]",
          "1461:                           uint8_t *encryptedPrivateKey, uint64_t enc_len, unsigned _t, int _ind, int *result) {",
          "1462:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "1478:                          uint8_t *encryptedPrivateKey, uint64_t enc_len, unsigned _t, int _ind, int *result) {",
          "1479:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1511: }",
          "1513: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
          "1517:     char skey[ECDSA_SKEY_LEN];",
          "1518:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey);",
          "",
          "[Removed Lines]",
          "1514:                         uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key, uint32_t *enc_bls_key_len) {",
          "1515:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "1531:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
          "1532:                             uint32_t *enc_bls_key_len) {",
          "1533:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1623: }",
          "1625: void",
          "1629:     char skey_hex[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "1626: trustedGetBlsPubKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t key_len, char *bls_pub_key) {",
          "1627:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "1644: trustedGetBlsPubKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t key_len,",
          "1645:                        char *bls_pub_key) {",
          "1646:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e69460f5493f417f6fbbf13c4805c3c4a2fc7e4b",
      "candidate_info": {
        "commit_hash": "e69460f5493f417f6fbbf13c4805c3c4a2fc7e4b",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/e69460f5493f417f6fbbf13c4805c3c4a2fc7e4b",
        "files": [
          "ECDSACrypto.cpp",
          "SGXWalletServer.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/signature.c",
          "sgxwallet_common.h",
          "testw.cpp"
        ],
        "message": "SKALE-1594 Fix wrong parameters while signing",
        "before_after_code_files": [
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/signature.c||secure_enclave/signature.c",
          "sgxwallet_common.h||sgxwallet_common.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "19:   std::vector<std::string> keys(2);",
          "22:   carray2Hex(encr_pr_key, enc_len, hexEncrKey);",
          "23:   keys.at(0) = hexEncrKey;",
          "24:   keys.at(1) = std::string(pub_key_x) + std::string(pub_key_y);",
          "27:   free(errMsg);",
          "28:   free(pub_key_x);",
          "",
          "[Removed Lines]",
          "21:   char *hexEncrKey = (char *) calloc(2 * BUF_LEN, 1);",
          "",
          "[Added Lines]",
          "21:   char *hexEncrKey = (char *) calloc(2*BUF_LEN, 1);",
          "26:   std::cerr << \"in ECDSACrypto encr_len %d \" << enc_len << std::endl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   uint8_t encr_key[BUF_LEN];",
          "68:   hex2carray(encryptedKeyHex, &dec_len, encr_key);",
          "71:   if ( status != SGX_SUCCESS){",
          "72:     std::cerr << \"failed to sign \" << std::endl;",
          "73:   }",
          "",
          "[Removed Lines]",
          "70:   status = ecdsa_sign1(eid, &err_status, errMsg, encr_key, dec_len, (unsigned char*)hashHex, signature_r, signature_s, signature_v, base );",
          "",
          "[Added Lines]",
          "71:   std::cerr << \"encryptedKeyHex: \"<< encryptedKeyHex << std::endl;",
          "73:   std::cerr << \"encrypted len\" << dec_len << std::endl;",
          "75:   status = ecdsa_sign1(eid, &err_status, errMsg, encr_key, 625, (unsigned char*)hashHex, signature_r, signature_s, signature_v, base );",
          "77:   std::cerr << \"signature r in  ecdsa_sign_hash \"<< signature_r << std::endl;",
          "78:   std::cerr << \"signature s in  ecdsa_sign_hash \"<< signature_s << std::endl;",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:     std::cerr << \"entered ecdsaSignMessageHashImpl\" << std::endl;",
          "189:     try {",
          "190:        std::shared_ptr<std::string> key_ptr = readECDSAKey(_keyName);",
          "192:        sign_vect = ecdsa_sign_hash(key_ptr->c_str(), messageHash.c_str(), base);",
          "193:     } catch (RPCException &_e) {",
          "194:         std::cerr << \"err str \" << _e.errString << std::endl;",
          "195:         result[\"status\"] = _e.status;",
          "196:         result[\"errorMessage\"] = _e.errString;",
          "197:     }",
          "199:     result[\"signature_v\"] = sign_vect.at(0);",
          "200:     result[\"signature_r\"] = sign_vect.at(1);",
          "201:     result[\"signature_s\"] = sign_vect.at(2);",
          "",
          "[Removed Lines]",
          "191:        std::cerr << \"read encr key\" << *key_ptr << std::endl;",
          "198:     std::cerr << \"got signature_r\" << sign_vect.at(1) << std::endl;",
          "",
          "[Added Lines]",
          "198:     std::cerr << \"got signature_s \" << sign_vect.at(2) << std::endl;",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:   char* py = mpz_get_str(arr_y, base, Pkey->y);",
          "171:   strncpy(pub_key_y, arr_y, 1024);",
          "176:    snprintf(err_string, BUF_LEN, \"skey is %s len %d\\n\", skey_str, strlen(skey_str));",
          "185:   if( status !=  SGX_SUCCESS) {",
          "186:     snprintf(err_string, BUF_LEN,\"seal ecsdsa private key failed\");",
          "187:     return;",
          "",
          "[Removed Lines]",
          "173:   int skey_base = 62;",
          "174:   char skey_str[mpz_sizeinbase (skey, skey_base) + 2];",
          "175:   char* s  = mpz_get_str(skey_str, skey_base, skey);",
          "178:   uint8_t LEN = 62;",
          "179:   uint8_t * test_buf = (uint8_t *)malloc(LEN);",
          "180:   memcpy(test_buf,skey_str,LEN);",
          "182:   uint32_t sealedLen = sgx_calc_sealed_data_size(0, 45);",
          "184:   sgx_status_t status = sgx_seal_data(0, NULL, 45, (uint8_t *)test_buf/*skey_str*/, sealedLen,(sgx_sealed_data_t*)encrypted_key);",
          "",
          "[Added Lines]",
          "175:   char skey_str[mpz_sizeinbase (skey, ECDSA_SKEY_BASE) + 2];",
          "176:   char* s  = mpz_get_str(skey_str, ECDSA_SKEY_BASE, skey);",
          "179:   uint32_t sealedLen = sgx_calc_sealed_data_size(0, ECDSA_SKEY_LEN);",
          "181:   sgx_status_t status = sgx_seal_data(0, NULL, ECDSA_SKEY_LEN, (uint8_t *)skey_str, sealedLen,(sgx_sealed_data_t*)encrypted_key);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:   domain_parameters curve = domain_parameters_init();",
          "204:   domain_parameters_load_curve(curve, secp256k1);",
          "209:   sgx_status_t status = sgx_unseal_data(",
          "210:       (const sgx_sealed_data_t *)encrypted_key, NULL, 0, (uint8_t *)skey, &dec_len);",
          "",
          "[Removed Lines]",
          "206:   char skey[SGX_ECP256_KEY_SIZE];",
          "",
          "[Added Lines]",
          "203:   char skey[ECDSA_SKEY_LEN];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219:   mpz_t skey_mpz;",
          "220:   mpz_init(skey_mpz);",
          "223:     snprintf(err_string, BUF_LEN,\"wrong string to init private key\");",
          "224:   }",
          "",
          "[Removed Lines]",
          "222:   if (mpz_set_str(skey_mpz, skey, 10) == -1){",
          "",
          "[Added Lines]",
          "218:   if (mpz_set_str(skey_mpz, skey, ECDSA_SKEY_BASE) == -1){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "451:   domain_parameters curve = domain_parameters_init();",
          "452:   domain_parameters_load_curve(curve, secp256k1);",
          "456:   sgx_status_t status = sgx_unseal_data(",
          "457:       (const sgx_sealed_data_t *)encrypted_key, NULL, 0, skey, &dec_len);",
          "",
          "[Removed Lines]",
          "454:   char skey[64];",
          "",
          "[Added Lines]",
          "450:   char skey[ECDSA_SKEY_LEN];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "464:   snprintf(err_string, BUF_LEN,\"pr key is %s length %d \", skey, strlen(skey));",
          "465:   mpz_t skey_mpz;",
          "466:   mpz_init(skey_mpz);",
          "470:   mpz_init(test_skey);",
          "",
          "[Removed Lines]",
          "467:   mpz_set_str(skey_mpz, skey, 62);",
          "",
          "[Added Lines]",
          "463:   mpz_set_str(skey_mpz, skey, ECDSA_SKEY_BASE);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "477:   mpz_t msg_mpz;",
          "478:   mpz_init(msg_mpz);",
          "481:   signature sign = signature_init();",
          "",
          "[Removed Lines]",
          "479:   mpz_set_str(msg_mpz, skey, base);",
          "",
          "[Added Lines]",
          "475:   mpz_set_str(msg_mpz, hash, 16);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "491:     return;",
          "492:   }",
          "494:   char arr_r[mpz_sizeinbase (sign->r, base) + 2];",
          "495:   char* r = mpz_get_str(arr_r, base, sign->r);",
          "496:   strncpy(sig_r, arr_r, 1024);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "495:   char arr_m[mpz_sizeinbase (msg_mpz, 16) + 2];",
          "496:   char* msg = mpz_get_str(arr_m, 16, msg_mpz);",
          "497:   snprintf(err_string, BUF_LEN,\"message is %s \", arr_m);",
          "",
          "---------------"
        ],
        "secure_enclave/signature.c||secure_enclave/signature.c": [
          "File: secure_enclave/signature.c -> secure_enclave/signature.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:  mpz_add(t3, message, t2); //t3 = e+t2",
          "122:  mpz_mod(t2, t3, curve->n); //t2 = t3 mod n",
          "123:  mpz_mul(t3, t2, t1);  //t3 = t2 * t1",
          "124:  mpz_mod(s, t3, curve->n); //s = t3 mod n",
          "125:  mpz_clear(t1);",
          "126:  mpz_clear(t2);",
          "127:  mpz_clear(t3);",
          "",
          "[Removed Lines]",
          "119:  number_theory_inverse(t1, k, curve->n);//t1 = k\u00af\u00b9 mod n",
          "120:  mpz_mul(t2, private_key, r);//t2 = d*r",
          "",
          "[Added Lines]",
          "124:  mpz_invert(t1, k, curve->n);",
          "125:  mpz_mul(t2, private_key, r);    //t2 = d*r",
          "127:  mpz_clear(t2);",
          "128:  mpz_init(t2);",
          "130:  mpz_clear(t3);",
          "131:         mpz_init(t3);",
          "135:  mpz_t n_div_2;",
          "136:  mpz_init(n_div_2);",
          "137:         mpz_cdiv_q_ui(n_div_2, curve->n + 1, 2);",
          "139:  if (mpz_cmp(s, n_div_2) > 0) {",
          "140:    mpz_t neg;",
          "141:    mpz_init(neg);",
          "142:    mpz_sub(neg, curve->n, s);",
          "144:    mpz_clear(s);",
          "145:    mpz_init(s);",
          "146:    mpz_set(s, neg);",
          "148:    mpz_clear(neg);",
          "149:  }",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define  DKG_BUFER_LENGTH 1250",
          "30: #define  DKG_MAX_SEALED_LEN 2000",
          "32: #define UNKNOWN_ERROR -1",
          "33: #define PLAINTEXT_KEY_TOO_LONG -2",
          "34: #define UNPADDED_KEY -3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #define ECDSA_SKEY_LEN 65",
          "33: #define ECDSA_SKEY_BASE 16",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "405:   for ( int i = 0; i < 1024 ; i++)",
          "409:   char* signature_r = (char *)calloc(1024, 1);",
          "410:   char* signature_s = (char *)calloc(1024, 1);",
          "411:   uint8_t signature_v = 0;",
          "414:   REQUIRE(status == SGX_SUCCESS);",
          "415:   printf(\"\\nsignature r : %s  \", signature_r);",
          "416:   printf(\"\\nsignature s: %s  \", signature_s);",
          "",
          "[Removed Lines]",
          "408:   char* hex = \"38433e5ce087dcc1be82fcc834eae83c256b3db87d34f84440d0b708daa0c6f7\";",
          "413:   status = ecdsa_sign1(eid, &err_status, errMsg, encr_pr_key, enc_len, (unsigned char*)hex, signature_r, signature_s, signature_v, 10);",
          "",
          "[Added Lines]",
          "409:   char* hex = \"3F891FDA3704F0368DAB65FA81EBE616F4AA2A0854995DA4DC0B59D2CADBD64F\";",
          "414:   status = ecdsa_sign1(eid, &err_status, errMsg, encr_pr_key, enc_len, (unsigned char*)hex, signature_r, signature_s, signature_v, 16);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "520:     cerr << \"Client inited\" << endl;",
          "522:     try {",
          "526:     } catch (JsonRpcException &e) {",
          "527:         cerr << e.what() << endl;",
          "528:     }",
          "531: }",
          "",
          "[Removed Lines]",
          "525:         cout << c.ecdsaSignMessageHash(16, \"new_key1\",\"38433e5ce087dcc1be82fcc834eae83c256b3db87d34f84440d0b708daa0c6f7\" );",
          "",
          "[Added Lines]",
          "526:         cout << c.ecdsaSignMessageHash(10, \"known_key1\",\"3F891FDA3704F0368DAB65FA81EBE616F4AA2A0854995DA4DC0B59D2CADBD64F\" );",
          "533: TEST_CASE(\"bytes to hex test\", \"[bytes_to_hex_test]\") {",
          "534:    char kavun[] = {'a','b','c','d'};",
          "535:    uint8_t raw_kavun[3];",
          "536:    uint64_t n = 0;",
          "537:    hex2carray(kavun, &n, raw_kavun);",
          "538:    char new_kavun[10];",
          "540:    carray2Hex(raw_kavun, 5, new_kavun);",
          "542:    std::cerr << \" got kavun \" << new_kavun << std::endl;",
          "543: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f3b685a3f692267040d24e68328d0877d6f3157",
      "candidate_info": {
        "commit_hash": "2f3b685a3f692267040d24e68328d0877d6f3157",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/2f3b685a3f692267040d24e68328d0877d6f3157",
        "files": [
          "LevelDB.cpp",
          "LevelDB.h",
          "SGXWalletServer.cpp",
          "ServerInit.cpp",
          "secure_enclave/Makefile.am",
          "secure_enclave/Makefile.in",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "secure_enclave/secure_enclave_private.pem",
          "testw.cpp"
        ],
        "message": "SKALE-2019 Rename enclave private key",
        "before_after_code_files": [
          "LevelDB.cpp||LevelDB.cpp",
          "LevelDB.h||LevelDB.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "ServerInit.cpp||ServerInit.cpp",
          "secure_enclave/Makefile.am||secure_enclave/Makefile.am",
          "secure_enclave/Makefile.in||secure_enclave/Makefile.in",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "secure_enclave/secure_enclave_private.pem||secure_enclave/secure_enclave_private.pem",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "LevelDB.cpp||LevelDB.cpp": [
          "File: LevelDB.cpp -> LevelDB.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:       spdlog::info(\"key deleted: {}\",full_key );",
          "109:     }",
          "126: }",
          "128: void LevelDB::deleteTempNEK(const std::string &_key){",
          "",
          "[Removed Lines]",
          "111: }",
          "113: void LevelDB::deleteOlegKey (const std::string &_key) {",
          "115:     std::lock_guard<std::recursive_mutex> lock(mutex);",
          "117:     std::string full_key = \"key\" + _key;",
          "119:     auto status = db->Delete(writeOptions, Slice(_key));",
          "121:     throwExceptionOnError(status);",
          "123:     if (DEBUG_PRINT) {",
          "124:       std::cerr << \"key deleted \" << full_key << std::endl;",
          "125:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "LevelDB.h||LevelDB.h": [
          "File: LevelDB.h -> LevelDB.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     void deleteDHDKGKey (const std::string &_key);",
          "66:     void deleteTempNEK (const std::string &_key);",
          "68:     void deleteKey(const std::string &_key);",
          "",
          "[Removed Lines]",
          "64:     void deleteOlegKey (const std::string &_key);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "602:     std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(EthKeyName);",
          "604:     bool res = CreateBLSShare(BLSKeyName, SecretShare.c_str(), encryptedKeyHex_ptr->c_str());",
          "606:          spdlog::info(\"BLS KEY SHARE CREATED \");",
          "607:      }",
          "608:      else {",
          "",
          "[Removed Lines]",
          "605:      if ( res){",
          "",
          "[Added Lines]",
          "605:      if (res){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "612:      for ( int i = 0; i < n; i++){",
          "613:        std::string name = polyName + \"_\" + std::to_string(i) + \":\";",
          "614:        levelDb -> deleteDHDKGKey(name);",
          "615:      }",
          "617:   } catch (RPCException &_e) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615:        std::string shareG2_name = \"shareG2_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "616:        levelDb -> deleteKey(shareG2_name);",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     static std::string csr_status_dbname = \"SGXData/CSR_STATUS_DB\";",
          "86:     csrStatusDb = new LevelDB(csr_status_dbname);",
          "88: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     std::shared_ptr<std::string> encr_SEK_ptr = levelDb->readString(\"SEK\");",
          "89:     if (encr_SEK_ptr == nullptr){",
          "90:       spdlog::info(\"SEK was not created yet\");",
          "91:     }",
          "",
          "---------------"
        ],
        "secure_enclave/Makefile.am||secure_enclave/Makefile.am": [
          "File: secure_enclave/Makefile.am -> secure_enclave/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: ENCLAVE=secure_enclave",
          "52: ENCLAVE_CONFIG=$(ENCLAVE).config.xml",
          "56: ## Provide additional flags to sgx_sign when signing the enclave.",
          "",
          "[Removed Lines]",
          "53: ENCLAVE_KEY=$(ENCLAVE)_private.pem",
          "",
          "[Added Lines]",
          "53: ENCLAVE_KEY=test_insecure_private_key.pem       #$(ENCLAVE)_private.pem",
          "",
          "---------------"
        ],
        "secure_enclave/Makefile.in||secure_enclave/Makefile.in": [
          "File: secure_enclave/Makefile.in -> secure_enclave/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "343: @ENCLAVE_RELEASE_SIGN_FALSE@nodist_signed_enclave_debug_SOURCES = signed_enclave_debug.c",
          "344: ENCLAVE = secure_enclave",
          "345: ENCLAVE_CONFIG = $(ENCLAVE).config.xml",
          "347: secure_enclave_SOURCES = secure_enclave_t.c secure_enclave_t.h \\",
          "348:  secure_enclave.c \\",
          "349:  curves.c domain_parameters.c numbertheory.c point.c signature.c DH_dkg.c \\",
          "",
          "[Removed Lines]",
          "346: ENCLAVE_KEY = $(ENCLAVE)_private.pem",
          "",
          "[Added Lines]",
          "346: ENCLAVE_KEY = test_insecure_private_key.pem       #$(ENCLAVE)_private.pem",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "894:   }",
          "895: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "897: void generate_SEK(int *err_status, char *err_string,",
          "898:                         uint8_t *encrypted_SEK, uint32_t *enc_len){",
          "900:   unsigned char* rand_char = (unsigned char*)malloc(16);",
          "901:   sgx_read_rand( rand_char, 16);",
          "903:   uint32_t sealedLen = sgx_calc_sealed_data_size(0, 32);",
          "905:   sgx_status_t status = sgx_seal_data(0, NULL, 32, (uint8_t *)rand_char, sealedLen,(sgx_sealed_data_t*)encrypted_SEK);",
          "906:   if( status !=  SGX_SUCCESS) {",
          "907:     snprintf(err_string, BUF_LEN,\"seal SEK failed\");",
          "909:     return;",
          "910:   }",
          "914:     free(rand_char);",
          "915: }",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:                                 uint8_t _t,",
          "158:                                 uint8_t _n,",
          "159:                                 uint8_t ind1);",
          "160:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:          public void generate_SEK(",
          "162:                                 [user_check] int *err_status,",
          "163:                                 [out, count = 1024] char *err_string,",
          "164:                                 [in, count = 1024] uint8_t *encrypted_SEK,",
          "165:                                 [user_check] uint32_t *enc_len);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave_private.pem||secure_enclave/secure_enclave_private.pem": [
          "File: secure_enclave/secure_enclave_private.pem -> secure_enclave/secure_enclave_private.pem",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp"
        ]
      }
    },
    {
      "candidate_hash": "1e52ad5f6ff1a5b03aa3e850918c67e92ce8d06e",
      "candidate_info": {
        "commit_hash": "1e52ad5f6ff1a5b03aa3e850918c67e92ce8d06e",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/1e52ad5f6ff1a5b03aa3e850918c67e92ce8d06e",
        "files": [
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "268:                                 uint64_t key_len,",
          "269:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
          "272:         public void trustedBlsSignMessageAES (",
          "273:                                 [out] int *errStatus,",
          "",
          "[Removed Lines]",
          "270:                                 [user_check] uint32_t *enc_bls_key_len);",
          "",
          "[Added Lines]",
          "270:                                 [out] uint32_t *enc_bls_key_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f709dcd20acf2ed736849109f253c93855170bf7",
      "candidate_info": {
        "commit_hash": "f709dcd20acf2ed736849109f253c93855170bf7",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/f709dcd20acf2ed736849109f253c93855170bf7",
        "files": [
          "common.h",
          "run_sgx_sim/docker-compose.yml",
          "sgxwall.cpp"
        ],
        "message": "SKALE-3205-restart",
        "before_after_code_files": [
          "common.h||common.h",
          "sgxwall.cpp||sgxwall.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.h||common.h": [
          "File: common.h -> common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #endif //SGXWALLET_COMMON_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #include <shared_mutex>",
          "63: extern std::shared_timed_mutex initMutex;",
          "64: extern uint64_t initTime;",
          "66: #if SGX_MODE == SIM",
          "67: #define ENCLAVE_RESTART_PERIOD_S 5",
          "68: #else",
          "69: #define ENCLAVE_RESTART_PERIOD_S 60 * 10",
          "70: #endif",
          "72: #define READ_LOCK(__X__) std::shared_lock<std::shared_timed_mutex> __LOCK__(__X__);",
          "73: #define WRITE_LOCK(__X__) std::unique_lock<std::shared_timed_mutex> __LOCK__(__X__);",
          "",
          "---------------"
        ],
        "sgxwall.cpp||sgxwall.cpp": [
          "File: sgxwall.cpp -> sgxwall.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"TestUtils.h\"",
          "37: #include \"testw.h\"",
          "38: #include \"sgxwall.h\"",
          "39: #include \"sgxwallet.h\"",
          "41: void SGXWallet::usage() {",
          "42:     cerr << \"usage: sgxwallet\\n\";",
          "43:     exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include \"common.h\"",
          "44: std::shared_timed_mutex initMutex;",
          "45: uint64_t initTime;",
          "",
          "---------------"
        ]
      }
    }
  ]
}