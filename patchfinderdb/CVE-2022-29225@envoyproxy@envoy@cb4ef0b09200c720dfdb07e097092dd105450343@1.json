{
  "cve_id": "CVE-2022-29225",
  "cve_desc": "Envoy is a cloud-native high-performance proxy. In versions prior to 1.22.1 secompressors accumulate decompressed data into an intermediate buffer before overwriting the body in the decode/encodeBody. This may allow an attacker to zip bomb the decompressor by sending a small highly compressed payload. Maliciously constructed zip files may exhaust system memory and cause a denial of service. Users are advised to upgrade. Users unable to upgrade may consider disabling decompression.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "cb4ef0b09200c720dfdb07e097092dd105450343",
  "patch_info": {
    "commit_hash": "cb4ef0b09200c720dfdb07e097092dd105450343",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/cb4ef0b09200c720dfdb07e097092dd105450343",
    "files": [
      "docs/root/version_history/current.rst",
      "source/common/runtime/runtime_features.cc",
      "source/extensions/compression/brotli/common/base.cc",
      "source/extensions/compression/brotli/common/base.h",
      "source/extensions/compression/brotli/decompressor/BUILD",
      "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
      "source/extensions/compression/gzip/common/base.h",
      "source/extensions/compression/gzip/decompressor/BUILD",
      "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
      "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc",
      "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h",
      "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
      "test/extensions/compression/gzip/compressor_fuzz_test.cc",
      "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc",
      "test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc"
    ],
    "message": "decompressors: stop decompressing upon excessive compression ratio (#733)\n\nSigned-off-by: Dmitry Rozhkov <dmitry.rozhkov@intel.com>\nCo-authored-by: Ryan Hamilton <rch@google.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
    "before_after_code_files": [
      "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
      "source/extensions/compression/brotli/common/base.cc||source/extensions/compression/brotli/common/base.cc",
      "source/extensions/compression/brotli/common/base.h||source/extensions/compression/brotli/common/base.h",
      "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc||source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
      "source/extensions/compression/gzip/common/base.h||source/extensions/compression/gzip/common/base.h",
      "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc||source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
      "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc||source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc",
      "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h||source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h",
      "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc||test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
      "test/extensions/compression/gzip/compressor_fuzz_test.cc||test/extensions/compression/gzip/compressor_fuzz_test.cc",
      "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc||test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc",
      "test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc||test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc"
    ]
  },
  "patch_diff": {
    "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc": [
      "File: source/common/runtime/runtime_features.cc -> source/common/runtime/runtime_features.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: RUNTIME_GUARD(envoy_reloadable_features_deprecate_global_ints);",
      "41: RUNTIME_GUARD(envoy_reloadable_features_disable_tls_inspector_injection);",
      "42: RUNTIME_GUARD(envoy_reloadable_features_do_not_await_headers_on_upstream_timeout_to_emit_stats);",
      "43: RUNTIME_GUARD(envoy_reloadable_features_enable_grpc_async_client_cache);",
      "44: RUNTIME_GUARD(envoy_reloadable_features_fix_added_trailers);",
      "45: RUNTIME_GUARD(envoy_reloadable_features_handle_stream_reset_during_hcm_encoding);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43: RUNTIME_GUARD(envoy_reloadable_features_enable_compression_bomb_protection);",
      "",
      "---------------"
    ],
    "source/extensions/compression/brotli/common/base.cc||source/extensions/compression/brotli/common/base.cc": [
      "File: source/extensions/compression/brotli/common/base.cc -> source/extensions/compression/brotli/common/base.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: namespace Brotli {",
      "7: namespace Common {",
      "13: void BrotliContext::updateOutput(Buffer::Instance& output_buffer) {",
      "14:   if (avail_out_ == 0) {",
      "",
      "[Removed Lines]",
      "9: BrotliContext::BrotliContext(const uint32_t chunk_size)",
      "10:     : chunk_size_{chunk_size}, chunk_ptr_{std::make_unique<uint8_t[]>(chunk_size)}, next_in_{},",
      "11:       next_out_{chunk_ptr_.get()}, avail_in_{0}, avail_out_{chunk_size} {}",
      "",
      "[Added Lines]",
      "9: BrotliContext::BrotliContext(uint32_t chunk_size, uint32_t max_output_size)",
      "10:     : max_output_size_{max_output_size}, chunk_size_{chunk_size},",
      "11:       chunk_ptr_{std::make_unique<uint8_t[]>(chunk_size)}, next_in_{}, next_out_{chunk_ptr_.get()},",
      "12:       avail_in_{0}, avail_out_{chunk_size} {}",
      "",
      "---------------"
    ],
    "source/extensions/compression/brotli/common/base.h||source/extensions/compression/brotli/common/base.h": [
      "File: source/extensions/compression/brotli/common/base.h -> source/extensions/compression/brotli/common/base.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: struct BrotliContext {",
      "17:   void updateOutput(Buffer::Instance& output_buffer);",
      "18:   void finalizeOutput(Buffer::Instance& output_buffer);",
      "20:   const uint32_t chunk_size_;",
      "21:   std::unique_ptr<uint8_t[]> chunk_ptr_;",
      "22:   const uint8_t* next_in_;",
      "",
      "[Removed Lines]",
      "15:   BrotliContext(const uint32_t chunk_size);",
      "",
      "[Added Lines]",
      "15:   BrotliContext(uint32_t chunk_size, uint32_t max_output_size = 0);",
      "20:   const uint32_t max_output_size_;",
      "",
      "---------------"
    ],
    "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc||source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc": [
      "File: source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc -> source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: #include <memory>",
      "5: namespace Envoy {",
      "6: namespace Extensions {",
      "7: namespace Compression {",
      "8: namespace Brotli {",
      "9: namespace Decompressor {",
      "11: BrotliDecompressorImpl::BrotliDecompressorImpl(Stats::Scope& scope, const std::string& stats_prefix,",
      "12:                                                const uint32_t chunk_size,",
      "13:                                                const bool disable_ring_buffer_reallocation)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: #include \"source/common/runtime/runtime_features.h\"",
      "13: namespace {",
      "19: constexpr uint32_t MaxInflateRatio = 100;",
      "21: } // namespace",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23: void BrotliDecompressorImpl::decompress(const Buffer::Instance& input_buffer,",
      "24:                                         Buffer::Instance& output_buffer) {",
      "27:   for (const Buffer::RawSlice& input_slice : input_buffer.getRawSlices()) {",
      "28:     ctx.avail_in_ = input_slice.len_;",
      "",
      "[Removed Lines]",
      "25:   Common::BrotliContext ctx(chunk_size_);",
      "",
      "[Added Lines]",
      "37:   Common::BrotliContext ctx(chunk_size_, MaxInflateRatio * input_buffer.length());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "58:     return false;",
      "59:   }",
      "61:   ctx.updateOutput(output_buffer);",
      "63:   return true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "73:   if (Runtime::runtimeFeatureEnabled(",
      "74:           \"envoy.reloadable_features.enable_compression_bomb_protection\") &&",
      "75:       (output_buffer.length() > ctx.max_output_size_)) {",
      "76:     stats_.brotli_error_.inc();",
      "77:     return false;",
      "78:   }",
      "",
      "---------------"
    ],
    "source/extensions/compression/gzip/common/base.h||source/extensions/compression/gzip/common/base.h": [
      "File: source/extensions/compression/gzip/common/base.h -> source/extensions/compression/gzip/common/base.h"
    ],
    "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc||source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc": [
      "File: source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc -> source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #include \"envoy/common/exception.h\"",
      "9: #include \"source/common/common/assert.h\"",
      "11: #include \"absl/container/fixed_array.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: #include \"source/common/runtime/runtime_features.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16: namespace Gzip {",
      "17: namespace Decompressor {",
      "19: ZlibDecompressorImpl::ZlibDecompressorImpl(Stats::Scope& scope, const std::string& stats_prefix)",
      "20:     : ZlibDecompressorImpl(scope, stats_prefix, 4096) {}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: namespace {",
      "26: constexpr uint64_t MaxInflateRatio = 100;",
      "28: } // namespace",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "44: void ZlibDecompressorImpl::decompress(const Buffer::Instance& input_buffer,",
      "45:                                       Buffer::Instance& output_buffer) {",
      "46:   for (const Buffer::RawSlice& input_slice : input_buffer.getRawSlices()) {",
      "47:     zstream_ptr_->avail_in = input_slice.len_;",
      "48:     zstream_ptr_->next_in = static_cast<Bytef*>(input_slice.mem_);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:   uint64_t limit = MaxInflateRatio * input_buffer.length();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "50:       if (zstream_ptr_->avail_out == 0) {",
      "51:         updateOutput(output_buffer);",
      "52:       }",
      "53:     }",
      "54:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:       if (Runtime::runtimeFeatureEnabled(",
      "68:               \"envoy.reloadable_features.enable_compression_bomb_protection\") &&",
      "69:           (output_buffer.length() > limit)) {",
      "70:         stats_.zlib_data_error_.inc();",
      "71:         ENVOY_LOG(trace,",
      "72:                   \"excessive decompression ratio detected: output \"",
      "73:                   \"size {} for input size {}\",",
      "74:                   output_buffer.length(), input_buffer.length());",
      "75:         return;",
      "76:       }",
      "",
      "---------------"
    ],
    "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc||source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc": [
      "File: source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc -> source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #include \"source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h\"",
      "3: namespace Envoy {",
      "4: namespace Extensions {",
      "5: namespace Compression {",
      "6: namespace Zstd {",
      "7: namespace Decompressor {",
      "9: ZstdDecompressorImpl::ZstdDecompressorImpl(Stats::Scope& scope, const std::string& stats_prefix,",
      "10:                                            const ZstdDDictManagerPtr& ddict_manager,",
      "11:                                            uint32_t chunk_size)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: #include \"source/common/runtime/runtime_features.h\"",
      "11: namespace {",
      "17: constexpr uint64_t MaxInflateRatio = 100;",
      "19: } // namespace",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "15: void ZstdDecompressorImpl::decompress(const Buffer::Instance& input_buffer,",
      "16:                                       Buffer::Instance& output_buffer) {",
      "17:   for (const Buffer::RawSlice& input_slice : input_buffer.getRawSlices()) {",
      "18:     if (input_slice.len_ > 0) {",
      "19:       if (ddict_manager_ && !is_dictionary_set_) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29:   uint64_t limit = MaxInflateRatio * input_buffer.length();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "38:       if (!process(output_buffer)) {",
      "39:         return;",
      "40:       }",
      "41:     }",
      "42:   }",
      "43: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "55:       if (Runtime::runtimeFeatureEnabled(",
      "56:               \"envoy.reloadable_features.enable_compression_bomb_protection\") &&",
      "57:           (output_buffer.length() > limit)) {",
      "58:         stats_.zstd_generic_error_.inc();",
      "59:         ENVOY_LOG(trace,",
      "60:                   \"excessive decompression ratio detected: output \"",
      "61:                   \"size {} for input size {}\",",
      "62:                   output_buffer.length(), input_buffer.length());",
      "63:         return;",
      "64:       }",
      "",
      "---------------"
    ],
    "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h||source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h": [
      "File: source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h -> source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"envoy/stats/scope.h\"",
      "5: #include \"envoy/stats/stats_macros.h\"",
      "7: #include \"source/extensions/compression/zstd/common/base.h\"",
      "8: #include \"source/extensions/compression/zstd/common/dictionary_manager.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #include \"source/common/common/logger.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41: class ZstdDecompressorImpl : public Common::Base,",
      "42:                              public Envoy::Compression::Decompressor::Decompressor,",
      "43:                              NonCopyable {",
      "44: public:",
      "45:   ZstdDecompressorImpl(Stats::Scope& scope, const std::string& stats_prefix,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:                              public Logger::Loggable<Logger::Id::decompression>,",
      "",
      "---------------"
    ],
    "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc||test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc": [
      "File: test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc -> test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:   static constexpr uint32_t default_input_size{796};",
      "26: };",
      "30: TEST_F(BrotliDecompressorImplTest, CompressAndDecompress) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: TEST_F(BrotliDecompressorImplTest, DetectExcessiveCompressionRatio) {",
      "31:   const absl::string_view ten_whitespaces = \"          \";",
      "32:   Brotli::Compressor::BrotliCompressorImpl compressor{",
      "33:       default_quality,",
      "34:       default_window_bits,",
      "35:       default_input_block_bits,",
      "36:       false,",
      "37:       Brotli::Compressor::BrotliCompressorImpl::EncoderMode::Default,",
      "38:       4096};",
      "39:   Buffer::OwnedImpl buffer;",
      "41:   for (int i = 0; i < 1000; i++) {",
      "42:     buffer.add(ten_whitespaces);",
      "43:   }",
      "45:   compressor.compress(buffer, Envoy::Compression::Compressor::State::Finish);",
      "47:   Buffer::OwnedImpl output_buffer;",
      "48:   Stats::IsolatedStoreImpl stats_store{};",
      "49:   BrotliDecompressorImpl decompressor{stats_store, \"test.\", 16, false};",
      "50:   decompressor.decompress(buffer, output_buffer);",
      "51:   EXPECT_EQ(1, stats_store.counterFromString(\"test.brotli_error\").value());",
      "52: }",
      "",
      "---------------"
    ],
    "test/extensions/compression/gzip/compressor_fuzz_test.cc||test/extensions/compression/gzip/compressor_fuzz_test.cc": [
      "File: test/extensions/compression/gzip/compressor_fuzz_test.cc -> test/extensions/compression/gzip/compressor_fuzz_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:                                                : Envoy::Compression::Compressor::State::Flush);",
      "72:     decompressor.decompress(buffer, full_output);",
      "73:   }",
      "76: }",
      "78: } // namespace Fuzz",
      "",
      "[Removed Lines]",
      "74:   RELEASE_ASSERT(full_input.toString() == full_output.toString(), \"\");",
      "75:   RELEASE_ASSERT(compressor.checksum() == decompressor.checksum(), \"\");",
      "",
      "[Added Lines]",
      "74:   if (stats_store.counterFromString(\"test.zlib_data_error\").value() == 0) {",
      "75:     RELEASE_ASSERT(full_input.toString() == full_output.toString(), \"\");",
      "76:     RELEASE_ASSERT(compressor.checksum() == decompressor.checksum(), \"\");",
      "77:   }",
      "",
      "---------------"
    ],
    "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc||test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc": [
      "File: test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc -> test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:   ASSERT_EQ(0, decompressor.decompression_error_);",
      "123: }",
      "127: TEST_F(ZlibDecompressorImplTest, CompressAndDecompress) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "127: TEST_F(ZlibDecompressorImplTest, DetectExcessiveCompressionRatio) {",
      "128:   const absl::string_view ten_whitespaces = \"          \";",
      "129:   Buffer::OwnedImpl buffer;",
      "130:   Extensions::Compression::Gzip::Compressor::ZlibCompressorImpl compressor;",
      "131:   compressor.init(",
      "132:       Extensions::Compression::Gzip::Compressor::ZlibCompressorImpl::CompressionLevel::Standard,",
      "133:       Extensions::Compression::Gzip::Compressor::ZlibCompressorImpl::CompressionStrategy::Standard,",
      "134:       gzip_window_bits, memory_level);",
      "136:   for (int i = 0; i < 1000; i++) {",
      "137:     buffer.add(ten_whitespaces);",
      "138:   }",
      "140:   compressor.compress(buffer, Envoy::Compression::Compressor::State::Finish);",
      "142:   Buffer::OwnedImpl output_buffer;",
      "143:   Stats::IsolatedStoreImpl stats_store{};",
      "144:   ZlibDecompressorImpl decompressor{stats_store, \"test.\"};",
      "145:   decompressor.init(gzip_window_bits);",
      "146:   decompressor.decompress(buffer, output_buffer);",
      "147:   ASSERT_EQ(stats_store.counterFromString(\"test.zlib_data_error\").value(), 1);",
      "148: }",
      "",
      "---------------"
    ],
    "test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc||test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc": [
      "File: test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc -> test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:                \"assert failure: id != 0. Details: Illegal Zstd dictionary\");",
      "150: }",
      "152: } // namespace",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "154: TEST_F(ZstdDecompressorImplTest, DetectExcessiveCompressionRatio) {",
      "155:   const absl::string_view ten_whitespaces = \"          \";",
      "156:   Buffer::OwnedImpl buffer;",
      "157:   for (int i = 0; i < 1000; i++) {",
      "158:     buffer.add(ten_whitespaces);",
      "159:   }",
      "161:   Zstd::Compressor::ZstdCompressorImpl compressor{default_compression_level_,",
      "162:                                                   default_enable_checksum_, default_strategy_,",
      "163:                                                   default_cdict_manager_, 4096};",
      "164:   compressor.compress(buffer, Envoy::Compression::Compressor::State::Finish);",
      "166:   Buffer::OwnedImpl output_buffer;",
      "167:   Stats::IsolatedStoreImpl stats_store{};",
      "168:   ZstdDecompressorImpl decompressor{stats_store, \"test.\", default_ddict_manager_, 16};",
      "169:   decompressor.decompress(buffer, output_buffer);",
      "170:   ASSERT_EQ(stats_store.counterFromString(\"test.zstd_generic_error\").value(), 1);",
      "171: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d4c39e635603e2f23e1e08ddecf5a5fb5a706338",
      "candidate_info": {
        "commit_hash": "d4c39e635603e2f23e1e08ddecf5a5fb5a706338",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338",
        "files": [
          "source/common/runtime/runtime_features.cc",
          "source/extensions/compression/brotli/common/base.cc",
          "source/extensions/compression/brotli/common/base.h",
          "source/extensions/compression/brotli/decompressor/BUILD",
          "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
          "source/extensions/compression/gzip/common/base.h",
          "source/extensions/compression/gzip/decompressor/BUILD",
          "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
          "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc",
          "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h",
          "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
          "test/extensions/compression/gzip/compressor_fuzz_test.cc",
          "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc",
          "test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc"
        ],
        "message": "decompressors: stop decompressing upon excessive compression ratio (#733)\n\nSigned-off-by: Dmitry Rozhkov <dmitry.rozhkov@intel.com>\nCo-authored-by: Ryan Hamilton <rch@google.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>",
        "before_after_code_files": [
          "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
          "source/extensions/compression/brotli/common/base.cc||source/extensions/compression/brotli/common/base.cc",
          "source/extensions/compression/brotli/common/base.h||source/extensions/compression/brotli/common/base.h",
          "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc||source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
          "source/extensions/compression/gzip/common/base.h||source/extensions/compression/gzip/common/base.h",
          "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc||source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
          "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc||source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc",
          "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h||source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h",
          "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc||test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
          "test/extensions/compression/gzip/compressor_fuzz_test.cc||test/extensions/compression/gzip/compressor_fuzz_test.cc",
          "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc||test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc",
          "test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc||test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
            "source/extensions/compression/brotli/common/base.cc||source/extensions/compression/brotli/common/base.cc",
            "source/extensions/compression/brotli/common/base.h||source/extensions/compression/brotli/common/base.h",
            "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc||source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
            "source/extensions/compression/gzip/common/base.h||source/extensions/compression/gzip/common/base.h",
            "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc||source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
            "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc||source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc",
            "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h||source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h",
            "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc||test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
            "test/extensions/compression/gzip/compressor_fuzz_test.cc||test/extensions/compression/gzip/compressor_fuzz_test.cc",
            "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc||test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc",
            "test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc||test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc"
          ],
          "candidate": [
            "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
            "source/extensions/compression/brotli/common/base.cc||source/extensions/compression/brotli/common/base.cc",
            "source/extensions/compression/brotli/common/base.h||source/extensions/compression/brotli/common/base.h",
            "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc||source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
            "source/extensions/compression/gzip/common/base.h||source/extensions/compression/gzip/common/base.h",
            "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc||source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
            "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc||source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc",
            "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h||source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h",
            "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc||test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
            "test/extensions/compression/gzip/compressor_fuzz_test.cc||test/extensions/compression/gzip/compressor_fuzz_test.cc",
            "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc||test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc",
            "test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc||test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc": [
          "File: source/common/runtime/runtime_features.cc -> source/common/runtime/runtime_features.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: RUNTIME_GUARD(envoy_reloadable_features_correctly_validate_alpn);",
          "43: RUNTIME_GUARD(envoy_reloadable_features_deprecate_global_ints);",
          "44: RUNTIME_GUARD(envoy_reloadable_features_do_not_await_headers_on_upstream_timeout_to_emit_stats);",
          "45: RUNTIME_GUARD(envoy_reloadable_features_enable_grpc_async_client_cache);",
          "46: RUNTIME_GUARD(envoy_reloadable_features_get_route_config_factory_by_type);",
          "47: RUNTIME_GUARD(envoy_reloadable_features_handle_stream_reset_during_hcm_encoding);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: RUNTIME_GUARD(envoy_reloadable_features_enable_compression_bomb_protection);",
          "",
          "---------------"
        ],
        "source/extensions/compression/brotli/common/base.cc||source/extensions/compression/brotli/common/base.cc": [
          "File: source/extensions/compression/brotli/common/base.cc -> source/extensions/compression/brotli/common/base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: namespace Brotli {",
          "7: namespace Common {",
          "13: void BrotliContext::updateOutput(Buffer::Instance& output_buffer) {",
          "14:   if (avail_out_ == 0) {",
          "",
          "[Removed Lines]",
          "9: BrotliContext::BrotliContext(const uint32_t chunk_size)",
          "10:     : chunk_size_{chunk_size}, chunk_ptr_{std::make_unique<uint8_t[]>(chunk_size)}, next_in_{},",
          "11:       next_out_{chunk_ptr_.get()}, avail_in_{0}, avail_out_{chunk_size} {}",
          "",
          "[Added Lines]",
          "9: BrotliContext::BrotliContext(uint32_t chunk_size, uint32_t max_output_size)",
          "10:     : max_output_size_{max_output_size}, chunk_size_{chunk_size},",
          "11:       chunk_ptr_{std::make_unique<uint8_t[]>(chunk_size)}, next_in_{}, next_out_{chunk_ptr_.get()},",
          "12:       avail_in_{0}, avail_out_{chunk_size} {}",
          "",
          "---------------"
        ],
        "source/extensions/compression/brotli/common/base.h||source/extensions/compression/brotli/common/base.h": [
          "File: source/extensions/compression/brotli/common/base.h -> source/extensions/compression/brotli/common/base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: struct BrotliContext {",
          "17:   void updateOutput(Buffer::Instance& output_buffer);",
          "18:   void finalizeOutput(Buffer::Instance& output_buffer);",
          "20:   const uint32_t chunk_size_;",
          "21:   std::unique_ptr<uint8_t[]> chunk_ptr_;",
          "22:   const uint8_t* next_in_;",
          "",
          "[Removed Lines]",
          "15:   BrotliContext(const uint32_t chunk_size);",
          "",
          "[Added Lines]",
          "15:   BrotliContext(uint32_t chunk_size, uint32_t max_output_size = 0);",
          "20:   const uint32_t max_output_size_;",
          "",
          "---------------"
        ],
        "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc||source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc": [
          "File: source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc -> source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <memory>",
          "5: namespace Envoy {",
          "6: namespace Extensions {",
          "7: namespace Compression {",
          "8: namespace Brotli {",
          "9: namespace Decompressor {",
          "11: BrotliDecompressorImpl::BrotliDecompressorImpl(Stats::Scope& scope, const std::string& stats_prefix,",
          "12:                                                const uint32_t chunk_size,",
          "13:                                                const bool disable_ring_buffer_reallocation)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"source/common/runtime/runtime_features.h\"",
          "13: namespace {",
          "19: constexpr uint32_t MaxInflateRatio = 100;",
          "21: } // namespace",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: void BrotliDecompressorImpl::decompress(const Buffer::Instance& input_buffer,",
          "24:                                         Buffer::Instance& output_buffer) {",
          "27:   for (const Buffer::RawSlice& input_slice : input_buffer.getRawSlices()) {",
          "28:     ctx.avail_in_ = input_slice.len_;",
          "",
          "[Removed Lines]",
          "25:   Common::BrotliContext ctx(chunk_size_);",
          "",
          "[Added Lines]",
          "37:   Common::BrotliContext ctx(chunk_size_, MaxInflateRatio * input_buffer.length());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:     return false;",
          "59:   }",
          "61:   ctx.updateOutput(output_buffer);",
          "63:   return true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   if (Runtime::runtimeFeatureEnabled(",
          "74:           \"envoy.reloadable_features.enable_compression_bomb_protection\") &&",
          "75:       (output_buffer.length() > ctx.max_output_size_)) {",
          "76:     stats_.brotli_error_.inc();",
          "77:     return false;",
          "78:   }",
          "",
          "---------------"
        ],
        "source/extensions/compression/gzip/common/base.h||source/extensions/compression/gzip/common/base.h": [
          "File: source/extensions/compression/gzip/common/base.h -> source/extensions/compression/gzip/common/base.h"
        ],
        "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc||source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc": [
          "File: source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc -> source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"envoy/common/exception.h\"",
          "9: #include \"source/common/common/assert.h\"",
          "11: #include \"absl/container/fixed_array.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"source/common/runtime/runtime_features.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: namespace Gzip {",
          "17: namespace Decompressor {",
          "19: ZlibDecompressorImpl::ZlibDecompressorImpl(Stats::Scope& scope, const std::string& stats_prefix)",
          "20:     : ZlibDecompressorImpl(scope, stats_prefix, 4096) {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: namespace {",
          "26: constexpr uint64_t MaxInflateRatio = 100;",
          "28: } // namespace",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44: void ZlibDecompressorImpl::decompress(const Buffer::Instance& input_buffer,",
          "45:                                       Buffer::Instance& output_buffer) {",
          "46:   for (const Buffer::RawSlice& input_slice : input_buffer.getRawSlices()) {",
          "47:     zstream_ptr_->avail_in = input_slice.len_;",
          "48:     zstream_ptr_->next_in = static_cast<Bytef*>(input_slice.mem_);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   uint64_t limit = MaxInflateRatio * input_buffer.length();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "50:       if (zstream_ptr_->avail_out == 0) {",
          "51:         updateOutput(output_buffer);",
          "52:       }",
          "53:     }",
          "54:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:       if (Runtime::runtimeFeatureEnabled(",
          "68:               \"envoy.reloadable_features.enable_compression_bomb_protection\") &&",
          "69:           (output_buffer.length() > limit)) {",
          "70:         stats_.zlib_data_error_.inc();",
          "71:         ENVOY_LOG(trace,",
          "72:                   \"excessive decompression ratio detected: output \"",
          "73:                   \"size {} for input size {}\",",
          "74:                   output_buffer.length(), input_buffer.length());",
          "75:         return;",
          "76:       }",
          "",
          "---------------"
        ],
        "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc||source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc": [
          "File: source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc -> source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h\"",
          "3: namespace Envoy {",
          "4: namespace Extensions {",
          "5: namespace Compression {",
          "6: namespace Zstd {",
          "7: namespace Decompressor {",
          "9: ZstdDecompressorImpl::ZstdDecompressorImpl(Stats::Scope& scope, const std::string& stats_prefix,",
          "10:                                            const ZstdDDictManagerPtr& ddict_manager,",
          "11:                                            uint32_t chunk_size)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #include \"source/common/runtime/runtime_features.h\"",
          "11: namespace {",
          "17: constexpr uint64_t MaxInflateRatio = 100;",
          "19: } // namespace",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: void ZstdDecompressorImpl::decompress(const Buffer::Instance& input_buffer,",
          "16:                                       Buffer::Instance& output_buffer) {",
          "17:   for (const Buffer::RawSlice& input_slice : input_buffer.getRawSlices()) {",
          "18:     if (input_slice.len_ > 0) {",
          "19:       if (ddict_manager_ && !is_dictionary_set_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:   uint64_t limit = MaxInflateRatio * input_buffer.length();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:       if (!process(output_buffer)) {",
          "39:         return;",
          "40:       }",
          "41:     }",
          "42:   }",
          "43: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:       if (Runtime::runtimeFeatureEnabled(",
          "56:               \"envoy.reloadable_features.enable_compression_bomb_protection\") &&",
          "57:           (output_buffer.length() > limit)) {",
          "58:         stats_.zstd_generic_error_.inc();",
          "59:         ENVOY_LOG(trace,",
          "60:                   \"excessive decompression ratio detected: output \"",
          "61:                   \"size {} for input size {}\",",
          "62:                   output_buffer.length(), input_buffer.length());",
          "63:         return;",
          "64:       }",
          "",
          "---------------"
        ],
        "source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h||source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h": [
          "File: source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h -> source/extensions/compression/zstd/decompressor/zstd_decompressor_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include \"envoy/stats/scope.h\"",
          "5: #include \"envoy/stats/stats_macros.h\"",
          "7: #include \"source/extensions/compression/zstd/common/base.h\"",
          "8: #include \"source/extensions/compression/zstd/common/dictionary_manager.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include \"source/common/common/logger.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: class ZstdDecompressorImpl : public Common::Base,",
          "42:                              public Envoy::Compression::Decompressor::Decompressor,",
          "43:                              NonCopyable {",
          "44: public:",
          "45:   ZstdDecompressorImpl(Stats::Scope& scope, const std::string& stats_prefix,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:                              public Logger::Loggable<Logger::Id::decompression>,",
          "",
          "---------------"
        ],
        "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc||test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc": [
          "File: test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc -> test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   static constexpr uint32_t default_input_size{796};",
          "26: };",
          "30: TEST_F(BrotliDecompressorImplTest, CompressAndDecompress) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: TEST_F(BrotliDecompressorImplTest, DetectExcessiveCompressionRatio) {",
          "31:   const absl::string_view ten_whitespaces = \"          \";",
          "32:   Brotli::Compressor::BrotliCompressorImpl compressor{",
          "33:       default_quality,",
          "34:       default_window_bits,",
          "35:       default_input_block_bits,",
          "36:       false,",
          "37:       Brotli::Compressor::BrotliCompressorImpl::EncoderMode::Default,",
          "38:       4096};",
          "39:   Buffer::OwnedImpl buffer;",
          "41:   for (int i = 0; i < 1000; i++) {",
          "42:     buffer.add(ten_whitespaces);",
          "43:   }",
          "45:   compressor.compress(buffer, Envoy::Compression::Compressor::State::Finish);",
          "47:   Buffer::OwnedImpl output_buffer;",
          "48:   Stats::IsolatedStoreImpl stats_store{};",
          "49:   BrotliDecompressorImpl decompressor{stats_store, \"test.\", 16, false};",
          "50:   decompressor.decompress(buffer, output_buffer);",
          "51:   EXPECT_EQ(1, stats_store.counterFromString(\"test.brotli_error\").value());",
          "52: }",
          "",
          "---------------"
        ],
        "test/extensions/compression/gzip/compressor_fuzz_test.cc||test/extensions/compression/gzip/compressor_fuzz_test.cc": [
          "File: test/extensions/compression/gzip/compressor_fuzz_test.cc -> test/extensions/compression/gzip/compressor_fuzz_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:                                                : Envoy::Compression::Compressor::State::Flush);",
          "72:     decompressor.decompress(buffer, full_output);",
          "73:   }",
          "76: }",
          "78: } // namespace Fuzz",
          "",
          "[Removed Lines]",
          "74:   RELEASE_ASSERT(full_input.toString() == full_output.toString(), \"\");",
          "75:   RELEASE_ASSERT(compressor.checksum() == decompressor.checksum(), \"\");",
          "",
          "[Added Lines]",
          "74:   if (stats_store.counterFromString(\"test.zlib_data_error\").value() == 0) {",
          "75:     RELEASE_ASSERT(full_input.toString() == full_output.toString(), \"\");",
          "76:     RELEASE_ASSERT(compressor.checksum() == decompressor.checksum(), \"\");",
          "77:   }",
          "",
          "---------------"
        ],
        "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc||test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc": [
          "File: test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc -> test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   ASSERT_EQ(0, decompressor.decompression_error_);",
          "123: }",
          "127: TEST_F(ZlibDecompressorImplTest, CompressAndDecompress) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: TEST_F(ZlibDecompressorImplTest, DetectExcessiveCompressionRatio) {",
          "128:   const absl::string_view ten_whitespaces = \"          \";",
          "129:   Buffer::OwnedImpl buffer;",
          "130:   Extensions::Compression::Gzip::Compressor::ZlibCompressorImpl compressor;",
          "131:   compressor.init(",
          "132:       Extensions::Compression::Gzip::Compressor::ZlibCompressorImpl::CompressionLevel::Standard,",
          "133:       Extensions::Compression::Gzip::Compressor::ZlibCompressorImpl::CompressionStrategy::Standard,",
          "134:       gzip_window_bits, memory_level);",
          "136:   for (int i = 0; i < 1000; i++) {",
          "137:     buffer.add(ten_whitespaces);",
          "138:   }",
          "140:   compressor.compress(buffer, Envoy::Compression::Compressor::State::Finish);",
          "142:   Buffer::OwnedImpl output_buffer;",
          "143:   Stats::IsolatedStoreImpl stats_store{};",
          "144:   ZlibDecompressorImpl decompressor{stats_store, \"test.\"};",
          "145:   decompressor.init(gzip_window_bits);",
          "146:   decompressor.decompress(buffer, output_buffer);",
          "147:   ASSERT_EQ(stats_store.counterFromString(\"test.zlib_data_error\").value(), 1);",
          "148: }",
          "",
          "---------------"
        ],
        "test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc||test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc": [
          "File: test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc -> test/extensions/compression/zstd/decompressor/zstd_decompressor_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:                \"assert failure: id != 0. Details: Illegal Zstd dictionary\");",
          "150: }",
          "152: } // namespace",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154: TEST_F(ZstdDecompressorImplTest, DetectExcessiveCompressionRatio) {",
          "155:   const absl::string_view ten_whitespaces = \"          \";",
          "156:   Buffer::OwnedImpl buffer;",
          "157:   for (int i = 0; i < 1000; i++) {",
          "158:     buffer.add(ten_whitespaces);",
          "159:   }",
          "161:   Zstd::Compressor::ZstdCompressorImpl compressor{default_compression_level_,",
          "162:                                                   default_enable_checksum_, default_strategy_,",
          "163:                                                   default_cdict_manager_, 4096};",
          "164:   compressor.compress(buffer, Envoy::Compression::Compressor::State::Finish);",
          "166:   Buffer::OwnedImpl output_buffer;",
          "167:   Stats::IsolatedStoreImpl stats_store{};",
          "168:   ZstdDecompressorImpl decompressor{stats_store, \"test.\", default_ddict_manager_, 16};",
          "169:   decompressor.decompress(buffer, output_buffer);",
          "170:   ASSERT_EQ(stats_store.counterFromString(\"test.zstd_generic_error\").value(), 1);",
          "171: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41c269252e64a8d380c81dcaabeca729115c0bc5",
      "candidate_info": {
        "commit_hash": "41c269252e64a8d380c81dcaabeca729115c0bc5",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/41c269252e64a8d380c81dcaabeca729115c0bc5",
        "files": [
          "docs/root/version_history/current.rst",
          "source/common/runtime/runtime_features.cc",
          "source/extensions/compression/brotli/common/base.cc",
          "source/extensions/compression/brotli/common/base.h",
          "source/extensions/compression/brotli/decompressor/BUILD",
          "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
          "source/extensions/compression/gzip/common/base.h",
          "source/extensions/compression/gzip/decompressor/BUILD",
          "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
          "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
          "test/extensions/compression/gzip/compressor_fuzz_test.cc",
          "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc"
        ],
        "message": "decompressors: stop decompressing upon excessive compression ratio (#733)\n\nSigned-off-by: Dmitry Rozhkov <dmitry.rozhkov@intel.com>\nCo-authored-by: Ryan Hamilton <rch@google.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
        "before_after_code_files": [
          "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
          "source/extensions/compression/brotli/common/base.cc||source/extensions/compression/brotli/common/base.cc",
          "source/extensions/compression/brotli/common/base.h||source/extensions/compression/brotli/common/base.h",
          "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc||source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
          "source/extensions/compression/gzip/common/base.h||source/extensions/compression/gzip/common/base.h",
          "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc||source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
          "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc||test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
          "test/extensions/compression/gzip/compressor_fuzz_test.cc||test/extensions/compression/gzip/compressor_fuzz_test.cc",
          "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc||test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
            "source/extensions/compression/brotli/common/base.cc||source/extensions/compression/brotli/common/base.cc",
            "source/extensions/compression/brotli/common/base.h||source/extensions/compression/brotli/common/base.h",
            "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc||source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
            "source/extensions/compression/gzip/common/base.h||source/extensions/compression/gzip/common/base.h",
            "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc||source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
            "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc||test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
            "test/extensions/compression/gzip/compressor_fuzz_test.cc||test/extensions/compression/gzip/compressor_fuzz_test.cc",
            "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc||test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc"
          ],
          "candidate": [
            "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
            "source/extensions/compression/brotli/common/base.cc||source/extensions/compression/brotli/common/base.cc",
            "source/extensions/compression/brotli/common/base.h||source/extensions/compression/brotli/common/base.h",
            "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc||source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
            "source/extensions/compression/gzip/common/base.h||source/extensions/compression/gzip/common/base.h",
            "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc||source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
            "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc||test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
            "test/extensions/compression/gzip/compressor_fuzz_test.cc||test/extensions/compression/gzip/compressor_fuzz_test.cc",
            "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc||test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc": [
          "File: source/common/runtime/runtime_features.cc -> source/common/runtime/runtime_features.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     \"envoy.reloadable_features.correct_scheme_and_xfp\",",
          "62:     \"envoy.reloadable_features.correctly_validate_alpn\",",
          "63:     \"envoy.reloadable_features.disable_tls_inspector_injection\",",
          "64:     \"envoy.reloadable_features.fix_added_trailers\",",
          "65:     \"envoy.reloadable_features.grpc_bridge_stats_disabled\",",
          "66:     \"envoy.reloadable_features.handle_stream_reset_during_hcm_encoding\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     \"envoy.reloadable_features.enable_compression_bomb_protection\",",
          "",
          "---------------"
        ],
        "source/extensions/compression/brotli/common/base.cc||source/extensions/compression/brotli/common/base.cc": [
          "File: source/extensions/compression/brotli/common/base.cc -> source/extensions/compression/brotli/common/base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: namespace Brotli {",
          "7: namespace Common {",
          "13: void BrotliContext::updateOutput(Buffer::Instance& output_buffer) {",
          "14:   if (avail_out_ == 0) {",
          "",
          "[Removed Lines]",
          "9: BrotliContext::BrotliContext(const uint32_t chunk_size)",
          "10:     : chunk_size_{chunk_size}, chunk_ptr_{std::make_unique<uint8_t[]>(chunk_size)}, next_in_{},",
          "11:       next_out_{chunk_ptr_.get()}, avail_in_{0}, avail_out_{chunk_size} {}",
          "",
          "[Added Lines]",
          "9: BrotliContext::BrotliContext(uint32_t chunk_size, uint32_t max_output_size)",
          "10:     : max_output_size_{max_output_size}, chunk_size_{chunk_size},",
          "11:       chunk_ptr_{std::make_unique<uint8_t[]>(chunk_size)}, next_in_{}, next_out_{chunk_ptr_.get()},",
          "12:       avail_in_{0}, avail_out_{chunk_size} {}",
          "",
          "---------------"
        ],
        "source/extensions/compression/brotli/common/base.h||source/extensions/compression/brotli/common/base.h": [
          "File: source/extensions/compression/brotli/common/base.h -> source/extensions/compression/brotli/common/base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: struct BrotliContext {",
          "17:   void updateOutput(Buffer::Instance& output_buffer);",
          "18:   void finalizeOutput(Buffer::Instance& output_buffer);",
          "20:   const uint32_t chunk_size_;",
          "21:   std::unique_ptr<uint8_t[]> chunk_ptr_;",
          "22:   const uint8_t* next_in_;",
          "",
          "[Removed Lines]",
          "15:   BrotliContext(const uint32_t chunk_size);",
          "",
          "[Added Lines]",
          "15:   BrotliContext(uint32_t chunk_size, uint32_t max_output_size = 0);",
          "20:   const uint32_t max_output_size_;",
          "",
          "---------------"
        ],
        "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc||source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc": [
          "File: source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc -> source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <memory>",
          "5: namespace Envoy {",
          "6: namespace Extensions {",
          "7: namespace Compression {",
          "8: namespace Brotli {",
          "9: namespace Decompressor {",
          "11: BrotliDecompressorImpl::BrotliDecompressorImpl(Stats::Scope& scope, const std::string& stats_prefix,",
          "12:                                                const uint32_t chunk_size,",
          "13:                                                const bool disable_ring_buffer_reallocation)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"source/common/runtime/runtime_features.h\"",
          "13: namespace {",
          "19: constexpr uint32_t MaxInflateRatio = 100;",
          "21: } // namespace",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: void BrotliDecompressorImpl::decompress(const Buffer::Instance& input_buffer,",
          "24:                                         Buffer::Instance& output_buffer) {",
          "27:   for (const Buffer::RawSlice& input_slice : input_buffer.getRawSlices()) {",
          "28:     ctx.avail_in_ = input_slice.len_;",
          "",
          "[Removed Lines]",
          "25:   Common::BrotliContext ctx(chunk_size_);",
          "",
          "[Added Lines]",
          "37:   Common::BrotliContext ctx(chunk_size_, MaxInflateRatio * input_buffer.length());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:     return false;",
          "59:   }",
          "61:   ctx.updateOutput(output_buffer);",
          "63:   return true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   if (Runtime::runtimeFeatureEnabled(",
          "74:           \"envoy.reloadable_features.enable_compression_bomb_protection\") &&",
          "75:       (output_buffer.length() > ctx.max_output_size_)) {",
          "76:     stats_.brotli_error_.inc();",
          "77:     return false;",
          "78:   }",
          "",
          "---------------"
        ],
        "source/extensions/compression/gzip/common/base.h||source/extensions/compression/gzip/common/base.h": [
          "File: source/extensions/compression/gzip/common/base.h -> source/extensions/compression/gzip/common/base.h"
        ],
        "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc||source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc": [
          "File: source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc -> source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"envoy/common/exception.h\"",
          "9: #include \"source/common/common/assert.h\"",
          "11: #include \"absl/container/fixed_array.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"source/common/runtime/runtime_features.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: namespace Gzip {",
          "17: namespace Decompressor {",
          "19: ZlibDecompressorImpl::ZlibDecompressorImpl(Stats::Scope& scope, const std::string& stats_prefix)",
          "20:     : ZlibDecompressorImpl(scope, stats_prefix, 4096) {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: namespace {",
          "26: constexpr uint64_t MaxInflateRatio = 100;",
          "28: } // namespace",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44: void ZlibDecompressorImpl::decompress(const Buffer::Instance& input_buffer,",
          "45:                                       Buffer::Instance& output_buffer) {",
          "46:   for (const Buffer::RawSlice& input_slice : input_buffer.getRawSlices()) {",
          "47:     zstream_ptr_->avail_in = input_slice.len_;",
          "48:     zstream_ptr_->next_in = static_cast<Bytef*>(input_slice.mem_);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   uint64_t limit = MaxInflateRatio * input_buffer.length();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "50:       if (zstream_ptr_->avail_out == 0) {",
          "51:         updateOutput(output_buffer);",
          "52:       }",
          "53:     }",
          "54:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:       if (Runtime::runtimeFeatureEnabled(",
          "68:               \"envoy.reloadable_features.enable_compression_bomb_protection\") &&",
          "69:           (output_buffer.length() > limit)) {",
          "70:         stats_.zlib_data_error_.inc();",
          "71:         ENVOY_LOG(trace,",
          "72:                   \"excessive decompression ratio detected: output \"",
          "73:                   \"size {} for input size {}\",",
          "74:                   output_buffer.length(), input_buffer.length());",
          "75:         return;",
          "76:       }",
          "",
          "---------------"
        ],
        "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc||test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc": [
          "File: test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc -> test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   static constexpr uint32_t default_input_size{796};",
          "26: };",
          "30: TEST_F(BrotliDecompressorImplTest, CompressAndDecompress) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: TEST_F(BrotliDecompressorImplTest, DetectExcessiveCompressionRatio) {",
          "31:   const absl::string_view ten_whitespaces = \"          \";",
          "32:   Brotli::Compressor::BrotliCompressorImpl compressor{",
          "33:       default_quality,",
          "34:       default_window_bits,",
          "35:       default_input_block_bits,",
          "36:       false,",
          "37:       Brotli::Compressor::BrotliCompressorImpl::EncoderMode::Default,",
          "38:       4096};",
          "39:   Buffer::OwnedImpl buffer;",
          "41:   for (int i = 0; i < 1000; i++) {",
          "42:     buffer.add(ten_whitespaces);",
          "43:   }",
          "45:   compressor.compress(buffer, Envoy::Compression::Compressor::State::Finish);",
          "47:   Buffer::OwnedImpl output_buffer;",
          "48:   Stats::IsolatedStoreImpl stats_store{};",
          "49:   BrotliDecompressorImpl decompressor{stats_store, \"test.\", 16, false};",
          "50:   decompressor.decompress(buffer, output_buffer);",
          "51:   EXPECT_EQ(1, stats_store.counterFromString(\"test.brotli_error\").value());",
          "52: }",
          "",
          "---------------"
        ],
        "test/extensions/compression/gzip/compressor_fuzz_test.cc||test/extensions/compression/gzip/compressor_fuzz_test.cc": [
          "File: test/extensions/compression/gzip/compressor_fuzz_test.cc -> test/extensions/compression/gzip/compressor_fuzz_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:                                                : Envoy::Compression::Compressor::State::Flush);",
          "72:     decompressor.decompress(buffer, full_output);",
          "73:   }",
          "76: }",
          "78: } // namespace Fuzz",
          "",
          "[Removed Lines]",
          "74:   RELEASE_ASSERT(full_input.toString() == full_output.toString(), \"\");",
          "75:   RELEASE_ASSERT(compressor.checksum() == decompressor.checksum(), \"\");",
          "",
          "[Added Lines]",
          "74:   if (stats_store.counterFromString(\"test.zlib_data_error\").value() == 0) {",
          "75:     RELEASE_ASSERT(full_input.toString() == full_output.toString(), \"\");",
          "76:     RELEASE_ASSERT(compressor.checksum() == decompressor.checksum(), \"\");",
          "77:   }",
          "",
          "---------------"
        ],
        "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc||test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc": [
          "File: test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc -> test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   ASSERT_EQ(0, decompressor.decompression_error_);",
          "123: }",
          "127: TEST_F(ZlibDecompressorImplTest, CompressAndDecompress) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: TEST_F(ZlibDecompressorImplTest, DetectExcessiveCompressionRatio) {",
          "128:   const absl::string_view ten_whitespaces = \"          \";",
          "129:   Buffer::OwnedImpl buffer;",
          "130:   Extensions::Compression::Gzip::Compressor::ZlibCompressorImpl compressor;",
          "131:   compressor.init(",
          "132:       Extensions::Compression::Gzip::Compressor::ZlibCompressorImpl::CompressionLevel::Standard,",
          "133:       Extensions::Compression::Gzip::Compressor::ZlibCompressorImpl::CompressionStrategy::Standard,",
          "134:       gzip_window_bits, memory_level);",
          "136:   for (int i = 0; i < 1000; i++) {",
          "137:     buffer.add(ten_whitespaces);",
          "138:   }",
          "140:   compressor.compress(buffer, Envoy::Compression::Compressor::State::Finish);",
          "142:   Buffer::OwnedImpl output_buffer;",
          "143:   Stats::IsolatedStoreImpl stats_store{};",
          "144:   ZlibDecompressorImpl decompressor{stats_store, \"test.\"};",
          "145:   decompressor.init(gzip_window_bits);",
          "146:   decompressor.decompress(buffer, output_buffer);",
          "147:   ASSERT_EQ(stats_store.counterFromString(\"test.zlib_data_error\").value(), 1);",
          "148: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "722da276c6ae8734a999c193cfa4170599d7a05b",
      "candidate_info": {
        "commit_hash": "722da276c6ae8734a999c193cfa4170599d7a05b",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/722da276c6ae8734a999c193cfa4170599d7a05b",
        "files": [
          "source/common/runtime/runtime_features.cc",
          "source/extensions/compression/brotli/common/base.cc",
          "source/extensions/compression/brotli/common/base.h",
          "source/extensions/compression/brotli/decompressor/BUILD",
          "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
          "source/extensions/compression/gzip/common/base.h",
          "source/extensions/compression/gzip/decompressor/BUILD",
          "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
          "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
          "test/extensions/compression/gzip/compressor_fuzz_test.cc",
          "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc"
        ],
        "message": "decompressors: stop decompressing upon excessive compression ratio (#733)\n\nSigned-off-by: Dmitry Rozhkov <dmitry.rozhkov@intel.com>\nCo-authored-by: Ryan Hamilton <rch@google.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>\n\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
          "source/extensions/compression/brotli/common/base.cc||source/extensions/compression/brotli/common/base.cc",
          "source/extensions/compression/brotli/common/base.h||source/extensions/compression/brotli/common/base.h",
          "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc||source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
          "source/extensions/compression/gzip/common/base.h||source/extensions/compression/gzip/common/base.h",
          "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc||source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
          "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc||test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
          "test/extensions/compression/gzip/compressor_fuzz_test.cc||test/extensions/compression/gzip/compressor_fuzz_test.cc",
          "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc||test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
            "source/extensions/compression/brotli/common/base.cc||source/extensions/compression/brotli/common/base.cc",
            "source/extensions/compression/brotli/common/base.h||source/extensions/compression/brotli/common/base.h",
            "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc||source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
            "source/extensions/compression/gzip/common/base.h||source/extensions/compression/gzip/common/base.h",
            "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc||source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
            "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc||test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
            "test/extensions/compression/gzip/compressor_fuzz_test.cc||test/extensions/compression/gzip/compressor_fuzz_test.cc",
            "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc||test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc"
          ],
          "candidate": [
            "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
            "source/extensions/compression/brotli/common/base.cc||source/extensions/compression/brotli/common/base.cc",
            "source/extensions/compression/brotli/common/base.h||source/extensions/compression/brotli/common/base.h",
            "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc||source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
            "source/extensions/compression/gzip/common/base.h||source/extensions/compression/gzip/common/base.h",
            "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc||source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
            "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc||test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
            "test/extensions/compression/gzip/compressor_fuzz_test.cc||test/extensions/compression/gzip/compressor_fuzz_test.cc",
            "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc||test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc": [
          "File: source/common/runtime/runtime_features.cc -> source/common/runtime/runtime_features.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     \"envoy.reloadable_features.correct_scheme_and_xfp\",",
          "63:     \"envoy.reloadable_features.disable_tls_inspector_injection\",",
          "64:     \"envoy.reloadable_features.dont_add_content_length_for_bodiless_requests\",",
          "65:     \"envoy.reloadable_features.enable_compression_without_content_length_header\",",
          "66:     \"envoy.reloadable_features.fix_added_trailers\",",
          "67:     \"envoy.reloadable_features.grpc_bridge_stats_disabled\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     \"envoy.reloadable_features.enable_compression_bomb_protection\",",
          "",
          "---------------"
        ],
        "source/extensions/compression/brotli/common/base.cc||source/extensions/compression/brotli/common/base.cc": [
          "File: source/extensions/compression/brotli/common/base.cc -> source/extensions/compression/brotli/common/base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: namespace Brotli {",
          "7: namespace Common {",
          "13: void BrotliContext::updateOutput(Buffer::Instance& output_buffer) {",
          "14:   if (avail_out_ == 0) {",
          "",
          "[Removed Lines]",
          "9: BrotliContext::BrotliContext(const uint32_t chunk_size)",
          "10:     : chunk_size_{chunk_size}, chunk_ptr_{std::make_unique<uint8_t[]>(chunk_size)}, next_in_{},",
          "11:       next_out_{chunk_ptr_.get()}, avail_in_{0}, avail_out_{chunk_size} {}",
          "",
          "[Added Lines]",
          "9: BrotliContext::BrotliContext(uint32_t chunk_size, uint32_t max_output_size)",
          "10:     : max_output_size_{max_output_size}, chunk_size_{chunk_size},",
          "11:       chunk_ptr_{std::make_unique<uint8_t[]>(chunk_size)}, next_in_{}, next_out_{chunk_ptr_.get()},",
          "12:       avail_in_{0}, avail_out_{chunk_size} {}",
          "",
          "---------------"
        ],
        "source/extensions/compression/brotli/common/base.h||source/extensions/compression/brotli/common/base.h": [
          "File: source/extensions/compression/brotli/common/base.h -> source/extensions/compression/brotli/common/base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: struct BrotliContext {",
          "17:   void updateOutput(Buffer::Instance& output_buffer);",
          "18:   void finalizeOutput(Buffer::Instance& output_buffer);",
          "20:   const uint32_t chunk_size_;",
          "21:   std::unique_ptr<uint8_t[]> chunk_ptr_;",
          "22:   const uint8_t* next_in_;",
          "",
          "[Removed Lines]",
          "15:   BrotliContext(const uint32_t chunk_size);",
          "",
          "[Added Lines]",
          "15:   BrotliContext(uint32_t chunk_size, uint32_t max_output_size = 0);",
          "20:   const uint32_t max_output_size_;",
          "",
          "---------------"
        ],
        "source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc||source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc": [
          "File: source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc -> source/extensions/compression/brotli/decompressor/brotli_decompressor_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <memory>",
          "5: namespace Envoy {",
          "6: namespace Extensions {",
          "7: namespace Compression {",
          "8: namespace Brotli {",
          "9: namespace Decompressor {",
          "11: BrotliDecompressorImpl::BrotliDecompressorImpl(Stats::Scope& scope, const std::string& stats_prefix,",
          "12:                                                const uint32_t chunk_size,",
          "13:                                                const bool disable_ring_buffer_reallocation)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"source/common/runtime/runtime_features.h\"",
          "13: namespace {",
          "19: constexpr uint32_t MaxInflateRatio = 100;",
          "21: } // namespace",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: void BrotliDecompressorImpl::decompress(const Buffer::Instance& input_buffer,",
          "24:                                         Buffer::Instance& output_buffer) {",
          "27:   for (const Buffer::RawSlice& input_slice : input_buffer.getRawSlices()) {",
          "28:     ctx.avail_in_ = input_slice.len_;",
          "",
          "[Removed Lines]",
          "25:   Common::BrotliContext ctx(chunk_size_);",
          "",
          "[Added Lines]",
          "37:   Common::BrotliContext ctx(chunk_size_, MaxInflateRatio * input_buffer.length());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:     return false;",
          "59:   }",
          "61:   ctx.updateOutput(output_buffer);",
          "63:   return true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   if (Runtime::runtimeFeatureEnabled(",
          "74:           \"envoy.reloadable_features.enable_compression_bomb_protection\") &&",
          "75:       (output_buffer.length() > ctx.max_output_size_)) {",
          "76:     stats_.brotli_error_.inc();",
          "77:     return false;",
          "78:   }",
          "",
          "---------------"
        ],
        "source/extensions/compression/gzip/common/base.h||source/extensions/compression/gzip/common/base.h": [
          "File: source/extensions/compression/gzip/common/base.h -> source/extensions/compression/gzip/common/base.h"
        ],
        "source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc||source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc": [
          "File: source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc -> source/extensions/compression/gzip/decompressor/zlib_decompressor_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"envoy/common/exception.h\"",
          "9: #include \"source/common/common/assert.h\"",
          "11: #include \"absl/container/fixed_array.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"source/common/runtime/runtime_features.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: namespace Gzip {",
          "17: namespace Decompressor {",
          "19: ZlibDecompressorImpl::ZlibDecompressorImpl(Stats::Scope& scope, const std::string& stats_prefix)",
          "20:     : ZlibDecompressorImpl(scope, stats_prefix, 4096) {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: namespace {",
          "26: constexpr uint64_t MaxInflateRatio = 100;",
          "28: } // namespace",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44: void ZlibDecompressorImpl::decompress(const Buffer::Instance& input_buffer,",
          "45:                                       Buffer::Instance& output_buffer) {",
          "46:   for (const Buffer::RawSlice& input_slice : input_buffer.getRawSlices()) {",
          "47:     zstream_ptr_->avail_in = input_slice.len_;",
          "48:     zstream_ptr_->next_in = static_cast<Bytef*>(input_slice.mem_);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   uint64_t limit = MaxInflateRatio * input_buffer.length();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "50:       if (zstream_ptr_->avail_out == 0) {",
          "51:         updateOutput(output_buffer);",
          "52:       }",
          "53:     }",
          "54:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:       if (Runtime::runtimeFeatureEnabled(",
          "68:               \"envoy.reloadable_features.enable_compression_bomb_protection\") &&",
          "69:           (output_buffer.length() > limit)) {",
          "70:         stats_.zlib_data_error_.inc();",
          "71:         ENVOY_LOG(trace,",
          "72:                   \"excessive decompression ratio detected: output \"",
          "73:                   \"size {} for input size {}\",",
          "74:                   output_buffer.length(), input_buffer.length());",
          "75:         return;",
          "76:       }",
          "",
          "---------------"
        ],
        "test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc||test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc": [
          "File: test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc -> test/extensions/compression/brotli/decompressor/brotli_decompressor_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   static constexpr uint32_t default_input_size{796};",
          "26: };",
          "30: TEST_F(BrotliDecompressorImplTest, CompressAndDecompress) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: TEST_F(BrotliDecompressorImplTest, DetectExcessiveCompressionRatio) {",
          "31:   const absl::string_view ten_whitespaces = \"          \";",
          "32:   Brotli::Compressor::BrotliCompressorImpl compressor{",
          "33:       default_quality,",
          "34:       default_window_bits,",
          "35:       default_input_block_bits,",
          "36:       false,",
          "37:       Brotli::Compressor::BrotliCompressorImpl::EncoderMode::Default,",
          "38:       4096};",
          "39:   Buffer::OwnedImpl buffer;",
          "41:   for (int i = 0; i < 1000; i++) {",
          "42:     buffer.add(ten_whitespaces);",
          "43:   }",
          "45:   compressor.compress(buffer, Envoy::Compression::Compressor::State::Finish);",
          "47:   Buffer::OwnedImpl output_buffer;",
          "48:   Stats::IsolatedStoreImpl stats_store{};",
          "49:   BrotliDecompressorImpl decompressor{stats_store, \"test.\", 16, false};",
          "50:   decompressor.decompress(buffer, output_buffer);",
          "51:   EXPECT_EQ(1, stats_store.counterFromString(\"test.brotli_error\").value());",
          "52: }",
          "",
          "---------------"
        ],
        "test/extensions/compression/gzip/compressor_fuzz_test.cc||test/extensions/compression/gzip/compressor_fuzz_test.cc": [
          "File: test/extensions/compression/gzip/compressor_fuzz_test.cc -> test/extensions/compression/gzip/compressor_fuzz_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:                                                : Envoy::Compression::Compressor::State::Flush);",
          "72:     decompressor.decompress(buffer, full_output);",
          "73:   }",
          "76: }",
          "78: } // namespace Fuzz",
          "",
          "[Removed Lines]",
          "74:   RELEASE_ASSERT(full_input.toString() == full_output.toString(), \"\");",
          "75:   RELEASE_ASSERT(compressor.checksum() == decompressor.checksum(), \"\");",
          "",
          "[Added Lines]",
          "74:   if (stats_store.counterFromString(\"test.zlib_data_error\").value() == 0) {",
          "75:     RELEASE_ASSERT(full_input.toString() == full_output.toString(), \"\");",
          "76:     RELEASE_ASSERT(compressor.checksum() == decompressor.checksum(), \"\");",
          "77:   }",
          "",
          "---------------"
        ],
        "test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc||test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc": [
          "File: test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc -> test/extensions/compression/gzip/decompressor/zlib_decompressor_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   ASSERT_EQ(0, decompressor.decompression_error_);",
          "123: }",
          "127: TEST_F(ZlibDecompressorImplTest, CompressAndDecompress) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: TEST_F(ZlibDecompressorImplTest, DetectExcessiveCompressionRatio) {",
          "128:   const absl::string_view ten_whitespaces = \"          \";",
          "129:   Buffer::OwnedImpl buffer;",
          "130:   Extensions::Compression::Gzip::Compressor::ZlibCompressorImpl compressor;",
          "131:   compressor.init(",
          "132:       Extensions::Compression::Gzip::Compressor::ZlibCompressorImpl::CompressionLevel::Standard,",
          "133:       Extensions::Compression::Gzip::Compressor::ZlibCompressorImpl::CompressionStrategy::Standard,",
          "134:       gzip_window_bits, memory_level);",
          "136:   for (int i = 0; i < 1000; i++) {",
          "137:     buffer.add(ten_whitespaces);",
          "138:   }",
          "140:   compressor.compress(buffer, Envoy::Compression::Compressor::State::Finish);",
          "142:   Buffer::OwnedImpl output_buffer;",
          "143:   Stats::IsolatedStoreImpl stats_store{};",
          "144:   ZlibDecompressorImpl decompressor{stats_store, \"test.\"};",
          "145:   decompressor.init(gzip_window_bits);",
          "146:   decompressor.decompress(buffer, output_buffer);",
          "147:   ASSERT_EQ(stats_store.counterFromString(\"test.zlib_data_error\").value(), 1);",
          "148: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}