{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "613cb65e9ef6881167a1dd2a299800959649eb24",
      "candidate_info": {
        "commit_hash": "613cb65e9ef6881167a1dd2a299800959649eb24",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/613cb65e9ef6881167a1dd2a299800959649eb24",
        "files": [
          "lib/hcrypto/evp-wincng.c"
        ],
        "message": "hcrypto WinCNG backend: don't leak handles on crypto reinit\n\nSimilar fix to a88d0066, but for the WinCNG EVP backend. However this\nis just a fix for leaking handles if the same EVP context is used with\na new key; there is no functionality issue as cipherstate is maintained\ndirectly in the EVP context, not internally by WinCNG.\n\n(cherry picked from commit 3224a282a65bfcabfb730112b53a89f95341f8b3)",
        "before_after_code_files": [
          "lib/hcrypto/evp-wincng.c||lib/hcrypto/evp-wincng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/hcrypto/evp-wincng.c||lib/hcrypto/evp-wincng.c": [
          "File: lib/hcrypto/evp-wincng.c -> lib/hcrypto/evp-wincng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:     if (ctx->cipher->app_data == NULL)",
          "197:  return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:     if (cng->hKey) {",
          "201:  cng->hKey = (BCRYPT_KEY_HANDLE)0;",
          "202:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccda072e9fd6c153e15a9bc007f76bcd2af20016",
      "candidate_info": {
        "commit_hash": "ccda072e9fd6c153e15a9bc007f76bcd2af20016",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/ccda072e9fd6c153e15a9bc007f76bcd2af20016",
        "files": [
          "lib/wind/gen-errorlist.py"
        ],
        "message": "PY3: iterkeys -> keys\n\nSigned-off-by: Noel Power <noel.power@suse.com>\nReviewed-by: Andrew Bartlett <abartlet@samba.org>\n(cherry picked from Samba commit d20e85d008e1b7badbea5ada8b22639f7767a097)\n(cherry picked from commit 965bb515ed54d768bf8b702e548ec8acfcd8c10b)",
        "before_after_code_files": [
          "lib/wind/gen-errorlist.py||lib/wind/gen-errorlist.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/wind/gen-errorlist.py||lib/wind/gen-errorlist.py": [
          "File: lib/wind/gen-errorlist.py -> lib/wind/gen-errorlist.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: tables = rfc3454.read(sys.argv[1])",
          "51: t2 = rfc4518.read()",
          "54:     tables[x] = t2[x]",
          "56: error_list = stringprep.get_errorlist()",
          "",
          "[Removed Lines]",
          "53: for x in t2.iterkeys():",
          "",
          "[Added Lines]",
          "53: for x in t2.keys():",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "937dfde2e21c0b5db7945dc718a1b0d91fe12274",
      "candidate_info": {
        "commit_hash": "937dfde2e21c0b5db7945dc718a1b0d91fe12274",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/937dfde2e21c0b5db7945dc718a1b0d91fe12274",
        "files": [
          "lib/roken/net_write.c"
        ],
        "message": "Handle partial writes on non-blocking sockets\n\nNow that we're using krb5_net_write() with non-blocking sockets in\nipropd_master, we MUST correctly account for partial writes.\n\nTherefore, roken net_write() called from krb5_net_write() now\nreturns the number of bytes written when the socket error was\nEWOULDBLOCK (or EAGAIN).\n\nAlso, fix potential issue on Windows, where errno was used instead\nof rk_SOCKET_ERRNO whether or not we used _write() or send().",
        "before_after_code_files": [
          "lib/roken/net_write.c||lib/roken/net_write.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/roken/net_write.c||lib/roken/net_write.c": [
          "File: lib/roken/net_write.c -> lib/roken/net_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     while (rem > 0) {",
          "52:  count = write (fd, cbuf, rem);",
          "53:  if (count < 0) {",
          "55:   continue;",
          "57:   return count;",
          "58:  }",
          "59:  cbuf += count;",
          "60:  rem -= count;",
          "",
          "[Removed Lines]",
          "54:      if (errno == EINTR)",
          "56:      else",
          "",
          "[Added Lines]",
          "56:             switch (errno) {",
          "57:             case EINTR:",
          "59: #if defined(EAGAIN) && EAGAIN != EWOULDBLOCK",
          "60:             case EAGAIN:",
          "61: #endif",
          "62:             case EWOULDBLOCK:",
          "63:                 return nbytes - rem;",
          "64:             default:",
          "66:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:  count = send (sock, cbuf, rem, 0);",
          "94: #endif",
          "95:  if (count < 0) {",
          "100:  }",
          "101:  cbuf += count;",
          "102:  rem -= count;",
          "",
          "[Removed Lines]",
          "96:      if (errno == EINTR)",
          "97:   continue;",
          "98:      else",
          "99:   return count;",
          "",
          "[Added Lines]",
          "105:             if (!use_write) {",
          "106:                 switch (rk_SOCK_ERRNO) {",
          "107:                 case WSAEINTR:",
          "108:                     continue;",
          "109:                 case WSAEWOULDBLOCK:",
          "110:                     return nbytes - rem;",
          "111:                 default:",
          "112:                     return count;",
          "113:                 }",
          "114:             } else {",
          "115:                 switch (errno) {",
          "116:                 case EINTR:",
          "117:                     continue;",
          "118:                 case EWOULDBLOCK:",
          "119:                     return nbytes - rem;",
          "120:                 default:",
          "121:                     return count;",
          "122:                 }",
          "123:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "224428452903b85781a1a49d89a5f00e279824ba",
      "candidate_info": {
        "commit_hash": "224428452903b85781a1a49d89a5f00e279824ba",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/224428452903b85781a1a49d89a5f00e279824ba",
        "files": [
          "kuser/kinit.c"
        ],
        "message": "kuser: use anon_pkinit_realm instead of anon-pkinit-realm\n\nMIT prefers underscores in ccache configuration file keys, so in the interest\nof future interoperability use anon_pkinit_realm instead of anon-pkinit-realm\nwhen storing the anonymous PKINIT TGS realm.\n\n(cherry picked from commit eacfcd5ce1a36087078d96dfe7070cd16e0938db)",
        "before_after_code_files": [
          "kuser/kinit.c||kuser/kinit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kuser/kinit.c||kuser/kinit.c": [
          "File: kuser/kinit.c -> kuser/kinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:       krb5_principal start_ticket_server)",
          "240: {",
          "241:     krb5_error_code ret;",
          "243:     const char *cfg_names_w_pname[] = {\"fast_avail\", NULL};",
          "244:     krb5_data cfg_data;",
          "245:     size_t i;",
          "",
          "[Removed Lines]",
          "242:     const char *cfg_names[] = {\"realm-config\", \"FriendlyName\", \"anon-pkinit-realm\", NULL};",
          "",
          "[Added Lines]",
          "242:     const char *cfg_names[] = {\"realm-config\", \"FriendlyName\", \"anon_pkinit_realm\", NULL};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "288:     krb5_data data;",
          "289:     char *realm;",
          "292:     if (ret == 0)",
          "293:  realm = strndup(data.data, data.length);",
          "294:     else",
          "",
          "[Removed Lines]",
          "291:     ret = krb5_cc_get_config(context, ccache, NULL, \"anon-pkinit-realm\", &data);",
          "",
          "[Added Lines]",
          "291:     ret = krb5_cc_get_config(context, ccache, NULL, \"anon_pkinit_realm\", &data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "819:  data.length = strlen(principal->realm);",
          "820:  data.data = principal->realm;",
          "823:     }",
          "825: out:",
          "",
          "[Removed Lines]",
          "822:  krb5_cc_set_config(context, ccache, NULL, \"anon-pkinit-realm\", &data);",
          "",
          "[Added Lines]",
          "822:  krb5_cc_set_config(context, ccache, NULL, \"anon_pkinit_realm\", &data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9793551bb919d0dc6b41d9d6b80356f44d82ac9e",
      "candidate_info": {
        "commit_hash": "9793551bb919d0dc6b41d9d6b80356f44d82ac9e",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/9793551bb919d0dc6b41d9d6b80356f44d82ac9e",
        "files": [
          "kdc/krb5tgs.c",
          "lib/krb5/libkrb5-exports.def.in",
          "lib/krb5/version-script.map",
          "tests/kdc/check-kdc.in"
        ],
        "message": "kdc: allow checksum of PA-FOR-USER to be HMAC_MD5\n\neven if tgt used an enctype with a different checksum.\n\nPer [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always\nHMAC_MD5, and that's what Windows and MIT clients send.\n\nIn heimdal both the client and kdc use instead the\nchecksum of the tgt, and therefore work with each other\nbut windows and MIT clients fail against heimdal KDC.\n\nBoth Windows and MIT KDC would allow any keyed checksum\nto be used so Heimdal client work fine against it.\n\nChange Heimdal KDC to allow HMAC_MD5 even for non RC4\nbased tgt in order to support per-spec clients.\n\nBack ported from master, commit:\nb7fe0fb85a780fed3c54ed2539fc974db1884dc2\n\nSigned-off-by: Isaac Boukris <iboukris@gmail.com>",
        "before_after_code_files": [
          "kdc/krb5tgs.c||kdc/krb5tgs.c",
          "lib/krb5/libkrb5-exports.def.in||lib/krb5/libkrb5-exports.def.in",
          "lib/krb5/version-script.map||lib/krb5/version-script.map",
          "tests/kdc/check-kdc.in||tests/kdc/check-kdc.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/krb5tgs.c||kdc/krb5tgs.c": [
          "File: kdc/krb5tgs.c -> kdc/krb5tgs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2046:   goto out;",
          "2047:      }",
          "2055:      krb5_data_free(&datack);",
          "2056:      krb5_crypto_destroy(context, crypto);",
          "2057:      if (ret) {",
          "",
          "[Removed Lines]",
          "2049:      ret = krb5_verify_checksum(context,",
          "2050:            crypto,",
          "2051:            KRB5_KU_OTHER_CKSUM,",
          "2052:            datack.data,",
          "2053:            datack.length,",
          "2054:            &self.cksum);",
          "",
          "[Added Lines]",
          "2050:      if (self.cksum.cksumtype == CKSUMTYPE_HMAC_MD5) {",
          "2051:   unsigned char csdata[16];",
          "2052:   Checksum cs;",
          "2054:   cs.checksum.length = sizeof(csdata);",
          "2055:   cs.checksum.data = &csdata;",
          "2057:   ret = _krb5_HMAC_MD5_checksum(context, &crypto->key,",
          "2058:            datack.data, datack.length,",
          "2059:            KRB5_KU_OTHER_CKSUM, &cs);",
          "2060:   if (ret == 0 &&",
          "2061:       krb5_data_ct_cmp(&cs.checksum, &self.cksum.checksum) != 0)",
          "2062:       ret = KRB5KRB_AP_ERR_BAD_INTEGRITY;",
          "2063:      }",
          "2064:      else {",
          "2065:   ret = krb5_verify_checksum(context,",
          "2066:         crypto,",
          "2067:         KRB5_KU_OTHER_CKSUM,",
          "2068:         datack.data,",
          "2069:         datack.length,",
          "2070:         &self.cksum);",
          "2071:      }",
          "",
          "---------------"
        ],
        "lib/krb5/libkrb5-exports.def.in||lib/krb5/libkrb5-exports.def.in": [
          "File: lib/krb5/libkrb5-exports.def.in -> lib/krb5/libkrb5-exports.def.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "767:  _krb5_principalname2krb5_principal",
          "768:  _krb5_put_int",
          "769:  _krb5_s4u2self_to_checksumdata",
          "770:  _krb5_expand_path_tokens ;!",
          "772:         ; kinit helper",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "770:  _krb5_HMAC_MD5_checksum",
          "",
          "---------------"
        ],
        "lib/krb5/version-script.map||lib/krb5/version-script.map": [
          "File: lib/krb5/version-script.map -> lib/krb5/version-script.map",
          "--- Hunk 1 ---",
          "[Context before]",
          "762:   _krb5_principalname2krb5_principal;",
          "763:   _krb5_put_int;",
          "764:   _krb5_s4u2self_to_checksumdata;",
          "766:   # kinit helper",
          "767:   krb5_get_init_creds_opt_set_pkinit_user_certs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "765:   _krb5_HMAC_MD5_checksum;",
          "",
          "---------------"
        ],
        "tests/kdc/check-kdc.in||tests/kdc/check-kdc.in": [
          "File: tests/kdc/check-kdc.in -> tests/kdc/check-kdc.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "785:  echo \"no pkinit (pkinit: $pkinit, rsa: $rsa)\"; > messages.log",
          "786: fi",
          "788: echo \"tickets for impersonate test case\"; > messages.log",
          "789: ${kinit} --forwardable --password-file=${objdir}/foopassword ${ps} || \\",
          "790:  { ec=1 ; eval \"${testfailed}\"; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "788: echo \"test impersonate using rc4 based tgt\"; > messages.log",
          "789: ${kinit} -e arcfour-hmac-md5 --forwardable --password-file=${objdir}/foopassword ${ps} || \\",
          "790:         { ec=1 ; eval \"${testfailed}\"; }",
          "791: ${kgetcred_imp} --impersonate=bar@${R} ${ps} || \\",
          "792:         { ec=1 ; eval \"${testfailed}\"; }",
          "793: ${test_ap_req} ${ps} ${keytab} ${ocache} || \\",
          "794:         { ec=1 ; eval \"${testfailed}\"; }",
          "",
          "---------------"
        ]
      }
    }
  ]
}