{
  "cve_id": "CVE-2011-4097",
  "cve_desc": "Integer overflow in the oom_badness function in mm/oom_kill.c in the Linux kernel before 3.1.8 on 64-bit platforms allows local users to cause a denial of service (memory consumption or process termination) by using a certain large amount of memory.",
  "repo": "torvalds/linux",
  "patch_hash": "56c6a8a4aadca809e04276eabe5552935c51387f",
  "patch_info": {
    "commit_hash": "56c6a8a4aadca809e04276eabe5552935c51387f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/56c6a8a4aadca809e04276eabe5552935c51387f",
    "files": [
      "mm/oom_kill.c"
    ],
    "message": "oom: fix integer overflow of points in oom_badness\n\ncommit ff05b6f7ae762b6eb464183eec994b28ea09f6dd upstream.\n\nAn integer overflow will happen on 64bit archs if task's sum of rss,\nswapents and nr_ptes exceeds (2^31)/1000 value.  This was introduced by\ncommit\n\nf755a04 oom: use pte pages in OOM score\n\nwhere the oom score computation was divided into several steps and it's no\nlonger computed as one expression in unsigned long(rss, swapents, nr_pte\nare unsigned long), where the result value assigned to points(int) is in\nrange(1..1000).  So there could be an int overflow while computing\n\n176          points *= 1000;\n\nand points may have negative value. Meaning the oom score for a mem hog task\nwill be one.\n\n196          if (points <= 0)\n197                  return 1;\n\nFor example:\n[ 3366]     0  3366 35390480 24303939   5       0             0 oom01\nOut of memory: Kill process 3366 (oom01) score 1 or sacrifice child\n\nHere the oom1 process consumes more than 24303939(rss)*4096~=92GB physical\nmemory, but it's oom score is one.\n\nIn this situation the mem hog task is skipped and oom killer kills another and\nmost probably innocent task with oom score greater than one.\n\nThe points variable should be of type long instead of int to prevent the\nint overflow.\n\nSigned-off-by: Frantisek Hrbata <fhrbata@redhat.com>\nAcked-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>\nAcked-by: Oleg Nesterov <oleg@redhat.com>\nAcked-by: David Rientjes <rientjes@google.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@suse.de>",
    "before_after_code_files": [
      "mm/oom_kill.c||mm/oom_kill.c"
    ]
  },
  "patch_diff": {
    "mm/oom_kill.c||mm/oom_kill.c": [
      "File: mm/oom_kill.c -> mm/oom_kill.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "162: unsigned int oom_badness(struct task_struct *p, struct mem_cgroup *mem,",
      "163:         const nodemask_t *nodemask, unsigned long totalpages)",
      "164: {",
      "167:  if (oom_unkillable_task(p, mem, nodemask))",
      "168:   return 0;",
      "",
      "[Removed Lines]",
      "165:  int points;",
      "",
      "[Added Lines]",
      "165:  long points;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ff05b6f7ae762b6eb464183eec994b28ea09f6dd",
      "candidate_info": {
        "commit_hash": "ff05b6f7ae762b6eb464183eec994b28ea09f6dd",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ff05b6f7ae762b6eb464183eec994b28ea09f6dd",
        "files": [
          "mm/oom_kill.c"
        ],
        "message": "oom: fix integer overflow of points in oom_badness\n\nAn integer overflow will happen on 64bit archs if task's sum of rss,\nswapents and nr_ptes exceeds (2^31)/1000 value.  This was introduced by\ncommit\n\nf755a04 oom: use pte pages in OOM score\n\nwhere the oom score computation was divided into several steps and it's no\nlonger computed as one expression in unsigned long(rss, swapents, nr_pte\nare unsigned long), where the result value assigned to points(int) is in\nrange(1..1000).  So there could be an int overflow while computing\n\n176          points *= 1000;\n\nand points may have negative value. Meaning the oom score for a mem hog task\nwill be one.\n\n196          if (points <= 0)\n197                  return 1;\n\nFor example:\n[ 3366]     0  3366 35390480 24303939   5       0             0 oom01\nOut of memory: Kill process 3366 (oom01) score 1 or sacrifice child\n\nHere the oom1 process consumes more than 24303939(rss)*4096~=92GB physical\nmemory, but it's oom score is one.\n\nIn this situation the mem hog task is skipped and oom killer kills another and\nmost probably innocent task with oom score greater than one.\n\nThe points variable should be of type long instead of int to prevent the\nint overflow.\n\nSigned-off-by: Frantisek Hrbata <fhrbata@redhat.com>\nAcked-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>\nAcked-by: Oleg Nesterov <oleg@redhat.com>\nAcked-by: David Rientjes <rientjes@google.com>\nCc: <stable@vger.kernel.org>\t\t[2.6.36+]\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "mm/oom_kill.c||mm/oom_kill.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "mm/oom_kill.c||mm/oom_kill.c"
          ],
          "candidate": [
            "mm/oom_kill.c||mm/oom_kill.c"
          ]
        }
      },
      "candidate_diff": {
        "mm/oom_kill.c||mm/oom_kill.c": [
          "File: mm/oom_kill.c -> mm/oom_kill.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176: unsigned int oom_badness(struct task_struct *p, struct mem_cgroup *mem,",
          "177:         const nodemask_t *nodemask, unsigned long totalpages)",
          "178: {",
          "181:  if (oom_unkillable_task(p, mem, nodemask))",
          "182:   return 0;",
          "",
          "[Removed Lines]",
          "179:  int points;",
          "",
          "[Added Lines]",
          "179:  long points;",
          "",
          "---------------"
        ]
      }
    }
  ]
}