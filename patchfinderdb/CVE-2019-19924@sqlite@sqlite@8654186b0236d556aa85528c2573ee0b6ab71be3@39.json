{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "56785a0a8048e1b7076fae06e7118c1e24633c81",
      "candidate_info": {
        "commit_hash": "56785a0a8048e1b7076fae06e7118c1e24633c81",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/56785a0a8048e1b7076fae06e7118c1e24633c81",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix an assert() that might be false for a corrupt database.\n\nFossilOrigin-Name: 0cfb888723fb8ff0763bbc23acb7d21a53f6d1c40661d8468248644281b29d85",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aa61435a4c3800f023788081c1342ad6a05a41449a424fa6c039d5ca46072256",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6730:     pPage->nCell++;",
          "6732:     if( (++data[pPage->hdrOffset+4])==0 ) data[pPage->hdrOffset+3]++;",
          "6734: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "6735:     if( pPage->pBt->autoVacuum ){",
          "",
          "[Removed Lines]",
          "6733:     assert( get2byte(&data[pPage->hdrOffset+3])==pPage->nCell );",
          "",
          "[Added Lines]",
          "6733:     assert( get2byte(&data[pPage->hdrOffset+3])==pPage->nCell || CORRUPT_DB );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0708054570e0cb484491cee24a2ff3a8d54fe4b1",
      "candidate_info": {
        "commit_hash": "0708054570e0cb484491cee24a2ff3a8d54fe4b1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0708054570e0cb484491cee24a2ff3a8d54fe4b1",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/windowfault.test"
        ],
        "message": "Add an extra IO-error test to windowfault.test.\n\nFossilOrigin-Name: 5b8c44cd39c529e8adbc51f67088409e963515b988868856120a59e6c7160210",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c2edbf3b8c643edcd5823eb907fd7531cf5be8a8b6a014fa1b123eb0ea3231cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:   faultsim_test_result {0 {1 2 5 6 9 10}}",
          "163: }",
          "165: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: #-------------------------------------------------------------------------",
          "166: # The following test causes a cursor in REQURESEEK state to be passed",
          "167: # to sqlite3BtreeDelete(). An error is simulated within the seek operation",
          "168: # to restore the cursors position.",
          "169: #",
          "170: reset_db",
          "171: set big [string repeat x 900]",
          "172: do_execsql_test 9.0 {",
          "173:   PRAGMA page_size = 512;",
          "174:   PRAGMA cache_size = 2;",
          "175:   CREATE TABLE t(x INTEGER PRIMARY KEY, y TEXT);",
          "176:   WITH s(i) AS (",
          "177:     VALUES(1) UNION ALL SELECT i+1 FROM s WHERE i<1900",
          "178:   )",
          "179:   INSERT INTO t(y) SELECT $big FROM s;",
          "180: }",
          "181: db close",
          "183: testvfs tvfs -default 1",
          "184: tvfs script vfs_callback",
          "185: tvfs filter xRead",
          "187: sqlite3 db test.db",
          "188: proc vfs_callback {method file args} {",
          "189:   if {$file==\"\" && [info exists ::tmp_read_fail]} {",
          "190:     incr ::tmp_read_fail -1",
          "191:     if {$::tmp_read_fail<=0} {",
          "192:       return \"SQLITE_IOERR\"",
          "193:     }",
          "194:   }",
          "195:   return \"SQLITE_OK\"",
          "196: }",
          "198: set FAULTSIM(tmpread) [list                \\",
          "199:   -injectstart   tmpread_injectstart       \\",
          "200:   -injectstop    tmpread_injectstop        \\",
          "201:   -injecterrlist {{1 {disk I/O error}}}    \\",
          "202: ]",
          "203: proc tmpread_injectstart {iFail} {",
          "204:   set ::tmp_read_fail $iFail",
          "205: }",
          "206: proc tmpread_injectstop {} {",
          "207:   set ret [expr $::tmp_read_fail<=0]",
          "208:   unset -nocomplain ::tmp_read_fail",
          "209:   return $ret",
          "210: }",
          "212: do_faultsim_test 9 -end 25 -faults tmpread -body {",
          "213:   execsql {",
          "214:     SELECT sum(y) OVER win FROM t",
          "215:     WINDOW win AS (",
          "216:       ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND 1800 FOLLOWING",
          "217:     )",
          "218:   }",
          "219: } -test {",
          "220:   faultsim_test_result {0 {}}",
          "221: }",
          "223: catch {db close}",
          "224: tvfs delete",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "427db2d2452d52075feb28f4ae33e65978dc0dc4",
      "candidate_info": {
        "commit_hash": "427db2d2452d52075feb28f4ae33e65978dc0dc4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/427db2d2452d52075feb28f4ae33e65978dc0dc4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Make the testcase() macro added in the previous check-in reachable for testing.\n\nFossilOrigin-Name: 80704a16f6dbbeacc65fa36a3623df10292a28aeacf9e2c1d2891258479e3b89",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: df58774e994bd306b1a2e1f259e7e4408f01c5b1dc104673698168bbf8a63ce5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:   int nByte;",
          "303:   assert( pMem->flags & MEM_Zero );",
          "304:   assert( (pMem->flags&MEM_Blob)!=0 || MemNullNochng(pMem) );",
          "306:   assert( !sqlite3VdbeMemIsRowSet(pMem) );",
          "307:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "",
          "[Removed Lines]",
          "305:   testcase( MemNullNochng(pMem) )",
          "",
          "[Added Lines]",
          "305:   testcase( sqlite3_value_nochange(pMem) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e0a75a2b8867e0597377d6a11b064b5d27b3a88",
      "candidate_info": {
        "commit_hash": "6e0a75a2b8867e0597377d6a11b064b5d27b3a88",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6e0a75a2b8867e0597377d6a11b064b5d27b3a88",
        "files": [
          "ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5vocab.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a crash in the fts5vocab module caused by including a \"term < NULL\" term in a WHERE clause.\n\nFossilOrigin-Name: 9e717c4377c0116a5d36815fbc30f8b8803f14770d30be361feb27cc5b5b537b",
        "before_after_code_files": [
          "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c": [
          "File: ext/fts5/fts5_vocab.c -> ext/fts5/fts5_vocab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:         if( rc==SQLITE_OK ){",
          "562:           zTerm = sqlite3Fts5IterTerm(pCsr->pIter, &nTerm);",
          "564:           if( nTerm!=pCsr->term.n",
          "565:           || (nTerm>0 && memcmp(zTerm, pCsr->term.p, nTerm))",
          "566:           ){",
          "",
          "[Removed Lines]",
          "563:           assert_nc( nTerm>0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "621:     }",
          "622:     if( pLe ){",
          "623:       const char *zCopy = (const char *)sqlite3_value_text(pLe);",
          "624:       pCsr->nLeTerm = sqlite3_value_bytes(pLe);",
          "625:       pCsr->zLeTerm = sqlite3_malloc(pCsr->nLeTerm+1);",
          "626:       if( pCsr->zLeTerm==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623:       if( zCopy==0 ) zCopy = \"\";",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test": [
          "File: ext/fts5/test/fts5vocab.test -> ext/fts5/test/fts5vocab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:   set res",
          "524: } {3 5 7}",
          "526: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526: do_execsql_test 10.6.1 {",
          "527:   SELECT * FROM t2 WHERE term<NULL;",
          "528: }",
          "529: do_execsql_test 10.6.2 {",
          "530:   SELECT * FROM t2 WHERE term>NULL;",
          "531: }",
          "532: do_execsql_test 10.6.3 {",
          "533:   SELECT * FROM t2 WHERE term=NULL;",
          "534: }",
          "535: do_execsql_test 10.7.1 {",
          "536:   SELECT * FROM t2 WHERE term<?;",
          "537: }",
          "538: do_execsql_test 10.7.2 {",
          "539:   SELECT * FROM t2 WHERE term>?;",
          "540: }",
          "541: do_execsql_test 10.7.3 {",
          "542:   SELECT * FROM t2 WHERE term=?;",
          "543: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 55c5d72af9510e2f27c33544d804a58d4282b0efb384ead38484129ce91b574f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bedf84c17bb5b5a811cd395892c1f89f5f458b70",
      "candidate_info": {
        "commit_hash": "bedf84c17bb5b5a811cd395892c1f89f5f458b70",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bedf84c17bb5b5a811cd395892c1f89f5f458b70",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fix an assert() that [28196d89] caused to fail.\n\nFossilOrigin-Name: 8fb0c6d5a38e77aa4c5f394fb8af1b0c7c6a4790e932aabc213a3078ee9acaf6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 28196d894ac9fad9d8f877c7bf17ec9d299d12acdcc942f9ea0783777b14fdc5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "619: #ifdef SQLITE_DEBUG",
          "623:   int nLookaside = 0;",
          "625:     nLookaside = sqlite3LookasideUsed(db, 0);",
          "626:   }",
          "627: #endif",
          "",
          "[Removed Lines]",
          "624:   if( db && (pTable->tabFlags & TF_Ephemeral)==0 ){",
          "",
          "[Added Lines]",
          "628:   if( db && !db->mallocFailed && (pTable->tabFlags & TF_Ephemeral)==0 ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}