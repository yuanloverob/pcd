{
  "cve_id": "CVE-2018-15594",
  "cve_desc": "arch/x86/kernel/paravirt.c in the Linux kernel before 4.18.1 mishandles certain indirect calls, which makes it easier for attackers to conduct Spectre-v2 attacks against paravirtual guests.",
  "repo": "torvalds/linux",
  "patch_hash": "5800dc5c19f34e6e03b5adab1282535cb102fafd",
  "patch_info": {
    "commit_hash": "5800dc5c19f34e6e03b5adab1282535cb102fafd",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/5800dc5c19f34e6e03b5adab1282535cb102fafd",
    "files": [
      "arch/x86/kernel/paravirt.c"
    ],
    "message": "x86/paravirt: Fix spectre-v2 mitigations for paravirt guests\n\nNadav reported that on guests we're failing to rewrite the indirect\ncalls to CALLEE_SAVE paravirt functions. In particular the\npv_queued_spin_unlock() call is left unpatched and that is all over the\nplace. This obviously wrecks Spectre-v2 mitigation (for paravirt\nguests) which relies on not actually having indirect calls around.\n\nThe reason is an incorrect clobber test in paravirt_patch_call(); this\nfunction rewrites an indirect call with a direct call to the _SAME_\nfunction, there is no possible way the clobbers can be different\nbecause of this.\n\nTherefore remove this clobber check. Also put WARNs on the other patch\nfailure case (not enough room for the instruction) which I've not seen\ntrigger in my (limited) testing.\n\nThree live kernel image disassemblies for lock_sock_nested (as a small\nfunction that illustrates the problem nicely). PRE is the current\nsituation for guests, POST is with this patch applied and NATIVE is with\nor without the patch for !guests.\n\nPRE:\n\n(gdb) disassemble lock_sock_nested\nDump of assembler code for function lock_sock_nested:\n   0xffffffff817be970 <+0>:     push   %rbp\n   0xffffffff817be971 <+1>:     mov    %rdi,%rbp\n   0xffffffff817be974 <+4>:     push   %rbx\n   0xffffffff817be975 <+5>:     lea    0x88(%rbp),%rbx\n   0xffffffff817be97c <+12>:    callq  0xffffffff819f7160 <_cond_resched>\n   0xffffffff817be981 <+17>:    mov    %rbx,%rdi\n   0xffffffff817be984 <+20>:    callq  0xffffffff819fbb00 <_raw_spin_lock_bh>\n   0xffffffff817be989 <+25>:    mov    0x8c(%rbp),%eax\n   0xffffffff817be98f <+31>:    test   %eax,%eax\n   0xffffffff817be991 <+33>:    jne    0xffffffff817be9ba <lock_sock_nested+74>\n   0xffffffff817be993 <+35>:    movl   $0x1,0x8c(%rbp)\n   0xffffffff817be99d <+45>:    mov    %rbx,%rdi\n   0xffffffff817be9a0 <+48>:    callq  *0xffffffff822299e8\n   0xffffffff817be9a7 <+55>:    pop    %rbx\n   0xffffffff817be9a8 <+56>:    pop    %rbp\n   0xffffffff817be9a9 <+57>:    mov    $0x200,%esi\n   0xffffffff817be9ae <+62>:    mov    $0xffffffff817be993,%rdi\n   0xffffffff817be9b5 <+69>:    jmpq   0xffffffff81063ae0 <__local_bh_enable_ip>\n   0xffffffff817be9ba <+74>:    mov    %rbp,%rdi\n   0xffffffff817be9bd <+77>:    callq  0xffffffff817be8c0 <__lock_sock>\n   0xffffffff817be9c2 <+82>:    jmp    0xffffffff817be993 <lock_sock_nested+35>\nEnd of assembler dump.\n\nPOST:\n\n(gdb) disassemble lock_sock_nested\nDump of assembler code for function lock_sock_nested:\n   0xffffffff817be970 <+0>:     push   %rbp\n   0xffffffff817be971 <+1>:     mov    %rdi,%rbp\n   0xffffffff817be974 <+4>:     push   %rbx\n   0xffffffff817be975 <+5>:     lea    0x88(%rbp),%rbx\n   0xffffffff817be97c <+12>:    callq  0xffffffff819f7160 <_cond_resched>\n   0xffffffff817be981 <+17>:    mov    %rbx,%rdi\n   0xffffffff817be984 <+20>:    callq  0xffffffff819fbb00 <_raw_spin_lock_bh>\n   0xffffffff817be989 <+25>:    mov    0x8c(%rbp),%eax\n   0xffffffff817be98f <+31>:    test   %eax,%eax\n   0xffffffff817be991 <+33>:    jne    0xffffffff817be9ba <lock_sock_nested+74>\n   0xffffffff817be993 <+35>:    movl   $0x1,0x8c(%rbp)\n   0xffffffff817be99d <+45>:    mov    %rbx,%rdi\n   0xffffffff817be9a0 <+48>:    callq  0xffffffff810a0c20 <__raw_callee_save___pv_queued_spin_unlock>\n   0xffffffff817be9a5 <+53>:    xchg   %ax,%ax\n   0xffffffff817be9a7 <+55>:    pop    %rbx\n   0xffffffff817be9a8 <+56>:    pop    %rbp\n   0xffffffff817be9a9 <+57>:    mov    $0x200,%esi\n   0xffffffff817be9ae <+62>:    mov    $0xffffffff817be993,%rdi\n   0xffffffff817be9b5 <+69>:    jmpq   0xffffffff81063aa0 <__local_bh_enable_ip>\n   0xffffffff817be9ba <+74>:    mov    %rbp,%rdi\n   0xffffffff817be9bd <+77>:    callq  0xffffffff817be8c0 <__lock_sock>\n   0xffffffff817be9c2 <+82>:    jmp    0xffffffff817be993 <lock_sock_nested+35>\nEnd of assembler dump.\n\nNATIVE:\n\n(gdb) disassemble lock_sock_nested\nDump of assembler code for function lock_sock_nested:\n   0xffffffff817be970 <+0>:     push   %rbp\n   0xffffffff817be971 <+1>:     mov    %rdi,%rbp\n   0xffffffff817be974 <+4>:     push   %rbx\n   0xffffffff817be975 <+5>:     lea    0x88(%rbp),%rbx\n   0xffffffff817be97c <+12>:    callq  0xffffffff819f7160 <_cond_resched>\n   0xffffffff817be981 <+17>:    mov    %rbx,%rdi\n   0xffffffff817be984 <+20>:    callq  0xffffffff819fbb00 <_raw_spin_lock_bh>\n   0xffffffff817be989 <+25>:    mov    0x8c(%rbp),%eax\n   0xffffffff817be98f <+31>:    test   %eax,%eax\n   0xffffffff817be991 <+33>:    jne    0xffffffff817be9ba <lock_sock_nested+74>\n   0xffffffff817be993 <+35>:    movl   $0x1,0x8c(%rbp)\n   0xffffffff817be99d <+45>:    mov    %rbx,%rdi\n   0xffffffff817be9a0 <+48>:    movb   $0x0,(%rdi)\n   0xffffffff817be9a3 <+51>:    nopl   0x0(%rax)\n   0xffffffff817be9a7 <+55>:    pop    %rbx\n   0xffffffff817be9a8 <+56>:    pop    %rbp\n   0xffffffff817be9a9 <+57>:    mov    $0x200,%esi\n   0xffffffff817be9ae <+62>:    mov    $0xffffffff817be993,%rdi\n   0xffffffff817be9b5 <+69>:    jmpq   0xffffffff81063ae0 <__local_bh_enable_ip>\n   0xffffffff817be9ba <+74>:    mov    %rbp,%rdi\n   0xffffffff817be9bd <+77>:    callq  0xffffffff817be8c0 <__lock_sock>\n   0xffffffff817be9c2 <+82>:    jmp    0xffffffff817be993 <lock_sock_nested+35>\nEnd of assembler dump.\n\n\nFixes: 63f70270ccd9 (\"[PATCH] i386: PARAVIRT: add common patching machinery\")\nFixes: 3010a0663fd9 (\"x86/paravirt, objtool: Annotate indirect calls\")\nReported-by: Nadav Amit <namit@vmware.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Juergen Gross <jgross@suse.com>\nCc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nCc: Boris Ostrovsky <boris.ostrovsky@oracle.com>\nCc: David Woodhouse <dwmw2@infradead.org>\nCc: stable@vger.kernel.org",
    "before_after_code_files": [
      "arch/x86/kernel/paravirt.c||arch/x86/kernel/paravirt.c"
    ]
  },
  "patch_diff": {
    "arch/x86/kernel/paravirt.c||arch/x86/kernel/paravirt.c": [
      "File: arch/x86/kernel/paravirt.c -> arch/x86/kernel/paravirt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "88:  struct branch *b = insnbuf;",
      "89:  unsigned long delta = (unsigned long)target - (addr+5);",
      "97:  b->delta = delta;",
      "",
      "[Removed Lines]",
      "91:  if (tgt_clobbers & ~site_clobbers)",
      "93:  if (len < 5)",
      "",
      "[Added Lines]",
      "91:  if (len < 5) {",
      "92: #ifdef CONFIG_RETPOLINE",
      "93:   WARN_ONCE(\"Failing to patch indirect CALL in %ps\\n\", (void *)addr);",
      "94: #endif",
      "96:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "106:  struct branch *b = insnbuf;",
      "107:  unsigned long delta = (unsigned long)target - (addr+5);",
      "113:  b->delta = delta;",
      "",
      "[Removed Lines]",
      "109:  if (len < 5)",
      "",
      "[Added Lines]",
      "111:  if (len < 5) {",
      "112: #ifdef CONFIG_RETPOLINE",
      "113:   WARN_ONCE(\"Failing to patch indirect JMP in %ps\\n\", (void *)addr);",
      "114: #endif",
      "116:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "11e86dc7f2746210f9c7dc10deaa7658f8dc8350",
      "candidate_info": {
        "commit_hash": "11e86dc7f2746210f9c7dc10deaa7658f8dc8350",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/11e86dc7f2746210f9c7dc10deaa7658f8dc8350",
        "files": [
          "arch/x86/kernel/paravirt.c"
        ],
        "message": "x86/paravirt: Detect over-sized patching bugs in paravirt_patch_call()\n\nparavirt_patch_call() currently handles patching failures inconsistently:\nwe generate a warning in the retpoline case, but don't in other cases where\nwe might end up with a non-working kernel as well.\n\nSo just convert it all to a BUG_ON(), these patching calls are *not* supposed\nto fail, and if they do we want to know it immediately.\n\nThis also makes the kernel smaller and removes an #ifdef ugly.\n\nI tried it with a richly paravirt-enabled kernel and no patching bugs\nwere detected.\n\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Juergen Gross <jgross@suse.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nLink: http://lkml.kernel.org/r/20190425095039.GC115378@gmail.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "before_after_code_files": [
          "arch/x86/kernel/paravirt.c||arch/x86/kernel/paravirt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/paravirt.c||arch/x86/kernel/paravirt.c"
          ],
          "candidate": [
            "arch/x86/kernel/paravirt.c||arch/x86/kernel/paravirt.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/paravirt.c||arch/x86/kernel/paravirt.c": [
          "File: arch/x86/kernel/paravirt.c -> arch/x86/kernel/paravirt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: static unsigned paravirt_patch_call(void *insnbuf, const void *target,",
          "74:         unsigned long addr, unsigned len)",
          "75: {",
          "76:  struct branch *b = insnbuf;",
          "84:  }",
          "87:  b->delta = delta;",
          "91: }",
          "93: #ifdef CONFIG_PARAVIRT_XXL",
          "",
          "[Removed Lines]",
          "77:  unsigned long delta = (unsigned long)target - (addr+5);",
          "79:  if (len < 5) {",
          "80: #ifdef CONFIG_RETPOLINE",
          "81:   WARN_ONCE(1, \"Failing to patch indirect CALL in %ps\\n\", (void *)addr);",
          "82: #endif",
          "88:  BUILD_BUG_ON(sizeof(*b) != 5);",
          "90:  return 5;",
          "",
          "[Added Lines]",
          "76:  const int call_len = 5;",
          "78:  unsigned long delta = (unsigned long)target - (addr+call_len);",
          "80:  if (len < call_len) {",
          "81:   pr_warn(\"paravirt: Failed to patch indirect CALL at %ps\\n\", (void *)addr);",
          "83:   BUG_ON(1);",
          "88:  BUILD_BUG_ON(sizeof(*b) != call_len);",
          "90:  return call_len;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "571d0563c8881595f4ab027aef9ed1c55e3e7b7c",
      "candidate_info": {
        "commit_hash": "571d0563c8881595f4ab027aef9ed1c55e3e7b7c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/571d0563c8881595f4ab027aef9ed1c55e3e7b7c",
        "files": [
          "arch/x86/kernel/paravirt.c"
        ],
        "message": "x86/paravirt: Fix some warning messages\n\nThe first argument to WARN_ONCE() is a condition.\n\nFixes: 5800dc5c19f3 (\"x86/paravirt: Fix spectre-v2 mitigations for paravirt guests\")\nSigned-off-by: Dan Carpenter <dan.carpenter@oracle.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Juergen Gross <jgross@suse.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Alok Kataria <akataria@vmware.com>\nCc: \"H. Peter Anvin\" <hpa@zytor.com>\nCc: virtualization@lists.linux-foundation.org\nCc: kernel-janitors@vger.kernel.org\nLink: https://lkml.kernel.org/r/20180919103553.GD9238@mwanda",
        "before_after_code_files": [
          "arch/x86/kernel/paravirt.c||arch/x86/kernel/paravirt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/paravirt.c||arch/x86/kernel/paravirt.c"
          ],
          "candidate": [
            "arch/x86/kernel/paravirt.c||arch/x86/kernel/paravirt.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/paravirt.c||arch/x86/kernel/paravirt.c": [
          "File: arch/x86/kernel/paravirt.c -> arch/x86/kernel/paravirt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:  if (len < 5) {",
          "93: #ifdef CONFIG_RETPOLINE",
          "95: #endif",
          "97:  }",
          "",
          "[Removed Lines]",
          "94:   WARN_ONCE(\"Failing to patch indirect CALL in %ps\\n\", (void *)addr);",
          "",
          "[Added Lines]",
          "94:   WARN_ONCE(1, \"Failing to patch indirect CALL in %ps\\n\", (void *)addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:  if (len < 5) {",
          "113: #ifdef CONFIG_RETPOLINE",
          "115: #endif",
          "117:  }",
          "",
          "[Removed Lines]",
          "114:   WARN_ONCE(\"Failing to patch indirect JMP in %ps\\n\", (void *)addr);",
          "",
          "[Added Lines]",
          "114:   WARN_ONCE(1, \"Failing to patch indirect JMP in %ps\\n\", (void *)addr);",
          "",
          "---------------"
        ]
      }
    }
  ]
}