{
  "cve_id": "CVE-2021-3984",
  "cve_desc": "vim is vulnerable to Heap-based Buffer Overflow",
  "repo": "vim/vim",
  "patch_hash": "2de9b7c7c8791da8853a9a7ca9c467867465b655",
  "patch_info": {
    "commit_hash": "2de9b7c7c8791da8853a9a7ca9c467867465b655",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/2de9b7c7c8791da8853a9a7ca9c467867465b655",
    "files": [
      "src/cindent.c",
      "src/testdir/test_cindent.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.3625: illegal memory access when C-indenting\n\nProblem:    Illegal memory access when C-indenting.\nSolution:   Also set the cursor column.",
    "before_after_code_files": [
      "src/cindent.c||src/cindent.c",
      "src/testdir/test_cindent.vim||src/testdir/test_cindent.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/cindent.c||src/cindent.c": [
      "File: src/cindent.c -> src/cindent.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1637:     static pos_T *",
      "1638: find_start_brace(void)     // XXX",
      "1639: {",
      "1645:     cursor_save = curwin->w_cursor;",
      "1646:     while ((trypos = findmatchlimit(NULL, '{', FM_BLOCKSTOP, 0)) != NULL)",
      "",
      "[Removed Lines]",
      "1640:     pos_T cursor_save;",
      "1641:     pos_T *trypos;",
      "1642:     pos_T *pos;",
      "1643:     static pos_T pos_copy;",
      "",
      "[Added Lines]",
      "1640:     pos_T     cursor_save;",
      "1641:     pos_T     *trypos;",
      "1642:     pos_T     *pos;",
      "1643:     static pos_T    pos_copy;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1654:          && (pos = ind_find_start_CORS(NULL)) == NULL) // XXX",
      "1655:      break;",
      "1656:  if (pos != NULL)",
      "1658:     }",
      "1659:     curwin->w_cursor = cursor_save;",
      "1660:     return trypos;",
      "",
      "[Removed Lines]",
      "1657:      curwin->w_cursor.lnum = pos->lnum;",
      "",
      "[Added Lines]",
      "1657:      curwin->w_cursor = *pos;",
      "",
      "---------------"
    ],
    "src/testdir/test_cindent.vim||src/testdir/test_cindent.vim": [
      "File: src/testdir/test_cindent.vim -> src/testdir/test_cindent.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "5314:   bwipe!",
      "5315: endfunc",
      "5317: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5317: func Test_find_brace_backwards()",
      "5318:   \" this was looking beyond the end of the line",
      "5319:   new",
      "5320:   norm R/*",
      "5321:   norm o0{",
      "5322:   norm o//",
      "5323:   norm V{=",
      "5324:   call assert_equal(['/*', '   0{', '//'], getline(1, 3))",
      "5325:   bwipe!",
      "5326: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "758: static int included_patches[] =",
      "761:     3624,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "761:     3625,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7e569d09d2ec4fa334a2d3d5b0b6dbca16d97133",
      "candidate_info": {
        "commit_hash": "7e569d09d2ec4fa334a2d3d5b0b6dbca16d97133",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/7e569d09d2ec4fa334a2d3d5b0b6dbca16d97133",
        "files": [
          "src/testdir/test_cindent.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.4994: tests are using legacy functions\n\nProblem:    Tests are using legacy functions.\nSolution:   Convert a few tests to use :def functions.",
        "before_after_code_files": [
          "src/testdir/test_cindent.vim||src/testdir/test_cindent.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_cindent.vim||src/testdir/test_cindent.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_cindent.vim||src/testdir/test_cindent.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_cindent.vim||src/testdir/test_cindent.vim": [
          "File: src/testdir/test_cindent.vim -> src/testdir/test_cindent.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \" Test for cinoptions and cindent",
          "5:   new",
          "6:   setlocal cindent cinoptions=#1",
          "7:   setlocal cinoptions=",
          "10:   norm! o#include",
          "13:   bwipe!",
          "20:     #ifdef __cplusplus",
          "21:     extern \"C\" {",
          "22:     #endif",
          "",
          "[Removed Lines]",
          "3: func Test_cino_hash()",
          "4:   \" Test that curbuf->b_ind_hash_comment is correctly reset",
          "8:   call setline(1, [\"#include <iostream>\"])",
          "9:   call cursor(1, 1)",
          "11:   \"call feedkeys(\"o#include\\<esc>\", 't')",
          "12:   call assert_equal([\"#include <iostream>\", \"#include\"], getline(1,2))",
          "14: endfunc",
          "16: func Test_cino_extern_c()",
          "17:   \" Test for cino-E",
          "19:   let without_ind =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3: def Test_cino_hash()",
          "4:   # Test that curbuf->b_ind_hash_comment is correctly reset",
          "8:   setline(1, [\"#include <iostream>\"])",
          "9:   cursor(1, 1)",
          "11:   assert_equal([\"#include <iostream>\", \"#include\"], getline(1, 2))",
          "14: enddef",
          "16: def Test_cino_extern_c()",
          "17:   # Test for cino-E",
          "19:   var without_ind =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     #endif",
          "27:   [CODE]",
          "30:     #ifdef __cplusplus",
          "31:     extern \"C\" {",
          "32:     #endif",
          "",
          "[Removed Lines]",
          "29:   let with_ind =<< trim [CODE]",
          "",
          "[Added Lines]",
          "29:   var with_ind =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:   [CODE]",
          "38:   new",
          "39:   setlocal cindent cinoptions=E0",
          "44:   setlocal cinoptions=E-s",
          "49:   setlocal cinoptions=Es",
          "51:         \\ ['recognized', ['extern \"C\" {'], \"\\t\\t;\"],",
          "52:         \\ ['recognized', ['extern \"C++\" {'], \"\\t\\t;\"],",
          "53:         \\ ['recognized', ['extern /* com */ \"C\"{'], \"\\t\\t;\"],",
          "",
          "[Removed Lines]",
          "40:   call setline(1, without_ind)",
          "41:   call feedkeys(\"gg=G\", 'tx')",
          "42:   call assert_equal(with_ind, getline(1, '$'))",
          "45:   call setline(1, with_ind)",
          "46:   call feedkeys(\"gg=G\", 'tx')",
          "47:   call assert_equal(without_ind, getline(1, '$'))",
          "50:   let tests = [",
          "",
          "[Added Lines]",
          "40:   setline(1, without_ind)",
          "41:   feedkeys(\"gg=G\", 'tx')",
          "42:   assert_equal(with_ind, getline(1, '$'))",
          "45:   setline(1, with_ind)",
          "46:   feedkeys(\"gg=G\", 'tx')",
          "47:   assert_equal(without_ind, getline(1, '$'))",
          "50:   var tests = [",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:         \\ ]",
          "62:   for pair in tests",
          "67:   endfor",
          "69:   bwipe!",
          "73:   new",
          "74:   setl cindent",
          "79:           \\ \"statement;\\<Esc>\", \"x\")",
          "85:   new",
          "87:     return v:lnum == 1 ? shiftwidth() : 0",
          "91:     var_a = something()",
          "92:     b = something()",
          "93:   [CODE]",
          "98:         var_a = something();",
          "99: b = something();",
          "100: [CODE]",
          "105:                 var_a = something()",
          "106:                 b = something()",
          "107: [CODE]",
          "112:         var_a = something();",
          "113:                 b = something()",
          "114: [CODE]",
          "120:   new",
          "121:   setlocal cindent",
          "126:   bwipe!",
          "130:   new",
          "131:   setl cindent ts=4 sw=4",
          "132:   setl cino& sts&",
          "136:   {",
          "137:    if (test)",
          "",
          "[Removed Lines]",
          "63:     let lines = pair[1]",
          "64:     call setline(1, lines)",
          "65:     call feedkeys(len(lines) . \"Go;\", 'tx')",
          "66:     call assert_equal(pair[2], getline(len(lines) + 1), 'Failed for \"' . string(lines) . '\"')",
          "70: endfunc",
          "72: func Test_cindent_rawstring()",
          "75:   call feedkeys(\"i\" .",
          "76:           \\ \"int main() {\\<CR>\" .",
          "77:           \\ \"R\\\"(\\<CR>\" .",
          "78:           \\ \")\\\";\\<CR>\" .",
          "80:   call assert_equal(\"\\tstatement;\", getline(line('.')))",
          "81:   bw!",
          "82: endfunc",
          "84: func Test_cindent_expr()",
          "86:   func! MyIndentFunction()",
          "88:   endfunc",
          "89:   setl expandtab sw=8 indentkeys+=; indentexpr=MyIndentFunction()",
          "90:   let testinput =<< trim [CODE]",
          "94:   call setline(1, testinput)",
          "95:   call cursor(1, 1)",
          "96:   call feedkeys(\"^\\<c-v>j$A;\\<esc>\", 'tnix')",
          "97:   let expected =<< [CODE]",
          "101:   call assert_equal(expected, getline(1, '$'))",
          "103:   %d",
          "104:   let testinput =<< [CODE]",
          "108:   call setline(1, testinput)",
          "109:   call cursor(1, 1)",
          "110:   call feedkeys(\"^\\<c-v>j$A;\\<esc>\", 'tnix')",
          "111:   let expected =<< [CODE]",
          "115:   call assert_equal(expected, getline(1, '$'))",
          "116:   bw!",
          "117: endfunc",
          "119: func Test_cindent_func()",
          "122:   call setline(1, ['int main(void)', '{', 'return 0;', '}'])",
          "123:   call assert_equal(-1, cindent(0))",
          "124:   call assert_equal(&sw, 3->cindent())",
          "125:   call assert_equal(-1, cindent(line('$')+1))",
          "127: endfunc",
          "129: func Test_cindent_1()",
          "134:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "63:     var lines = pair[1]",
          "64:     setline(1, lines)",
          "65:     feedkeys(len(lines) .. \"Go;\", 'tx')",
          "66:     assert_equal(pair[2], getline(len(lines) + 1),",
          "67:                     'Failed for \"' .. string(lines) .. '\"')",
          "71: enddef",
          "73: def Test_cindent_rawstring()",
          "76:   feedkeys(\"i\" ..",
          "77:           \\ \"int main() {\\<CR>\" ..",
          "78:           \\ \"R\\\"(\\<CR>\" ..",
          "79:           \\ \")\\\";\\<CR>\" ..",
          "81:   assert_equal(\"\\tstatement;\", getline(line('.')))",
          "83:   bwipe!",
          "84: enddef",
          "86: def Test_cindent_expr()",
          "88:   def g:MyIndentFunction(): number",
          "90:   enddef",
          "91:   setl expandtab sw=8 indentkeys+=; indentexpr=g:MyIndentFunction()",
          "92:   var testinput =<< trim [CODE]",
          "96:   setline(1, testinput)",
          "97:   cursor(1, 1)",
          "98:   feedkeys(\"^\\<c-v>j$A;\\<esc>\", 'tnix')",
          "99:   var expected =<< [CODE]",
          "103:   assert_equal(expected, getline(1, '$'))",
          "105:   :%d",
          "106:   testinput =<< [CODE]",
          "110:   setline(1, testinput)",
          "111:   cursor(1, 1)",
          "112:   feedkeys(\"^\\<c-v>j$A;\\<esc>\", 'tnix')",
          "113:   expected =<< [CODE]",
          "117:   assert_equal(expected, getline(1, '$'))",
          "119:   delfunc g:MyIndentFunction",
          "121:   bwipe!",
          "122: enddef",
          "124: def Test_cindent_func()",
          "127:   setline(1, ['int main(void)', '{', 'return 0;', '}'])",
          "128:   assert_equal(-1, cindent(0))",
          "129:   assert_equal(&sw, 3->cindent())",
          "130:   assert_equal(-1, cindent(line('$') + 1))",
          "133: enddef",
          "135: def Test_cindent_1()",
          "140:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1104:   [CODE]",
          "1107:   normal gg",
          "1109:   exe \"normal =/end of AUTO\\<CR>\"",
          "1113:   {",
          "1114:    if (test)",
          "",
          "[Removed Lines]",
          "1106:   call append(0, code)",
          "1108:   call search('start of AUTO')",
          "1111:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "1112:   append(0, code)",
          "1114:   search('start of AUTO')",
          "1117:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2082:   [CODE]",
          "2089:   new",
          "2090:   setl cindent ts=4 sw=4",
          "2091:   setl tw=0 noai fo=croq",
          "2095:     {",
          "",
          "[Removed Lines]",
          "2084:   call assert_equal(expected, getline(1, '$'))",
          "2085:   enew! | close",
          "2086: endfunc",
          "2088: func Test_cindent_2()",
          "2092:   let &wm = &columns - 20",
          "2094:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2090:   assert_equal(expected, getline(1, '$'))",
          "2092:   bwipe!",
          "2093: enddef",
          "2095: def Test_cindent_2()",
          "2099:   &wm = &columns - 20",
          "2101:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2102:     }",
          "2103:   [CODE]",
          "2106:   normal gg",
          "2108:   normal a about life, the universe, and the rest",
          "2111:   {",
          "",
          "[Removed Lines]",
          "2105:   call append(0, code)",
          "2107:   call search('serious', 'e')",
          "2110:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2112:   append(0, code)",
          "2114:   search('serious', 'e')",
          "2117:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2123:   [CODE]",
          "2126:   set wm&",
          "2131:   new",
          "2132:   setl nocindent ts=4 sw=4",
          "2135:   {",
          "",
          "[Removed Lines]",
          "2125:   call assert_equal(expected, getline(1, '$'))",
          "2127:   enew! | close",
          "2128: endfunc",
          "2130: func Test_cindent_3()",
          "2134:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2132:   assert_equal(expected, getline(1, '$'))",
          "2135:   bwipe!",
          "2136: enddef",
          "2138: def Test_cindent_3()",
          "2142:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2149:   }",
          "2150:   [CODE]",
          "2153:   normal gg",
          "2155:   normal joabout life",
          "2157:   normal jothere",
          "2159:   normal oline",
          "2161:   normal Ohello",
          "2164:   {",
          "",
          "[Removed Lines]",
          "2152:   call append(0, code)",
          "2154:   call search('comments')",
          "2156:   call search('happens')",
          "2158:   call search('below')",
          "2160:   call search('this')",
          "2163:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2160:   append(0, code)",
          "2162:   search('comments')",
          "2164:   search('happens')",
          "2166:   search('below')",
          "2168:   search('this')",
          "2171:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2184:   [CODE]",
          "2191:   new",
          "2192:   setl cindent ts=4 sw=4",
          "2195:   {",
          "2196:       var = this + that + vec[0] * vec[0]",
          "2197:             + vec[1] * vec[1]",
          "",
          "[Removed Lines]",
          "2186:   call assert_equal(expected, getline(1, '$'))",
          "2187:   enew! | close",
          "2188: endfunc",
          "2190: func Test_cindent_4()",
          "2194:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2194:   assert_equal(expected, getline(1, '$'))",
          "2196:   bwipe!",
          "2197: enddef",
          "2199: def Test_cindent_4()",
          "2203:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2199:   }",
          "2200:   [CODE]",
          "2203:   normal gg",
          "2205:   normal ==",
          "2208:   {",
          "2209:       var = this + that + vec[0] * vec[0]",
          "2210:             + vec[1] * vec[1]",
          "",
          "[Removed Lines]",
          "2202:   call append(0, code)",
          "2204:   call search('vec2')",
          "2207:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2211:   append(0, code)",
          "2213:   search('vec2')",
          "2216:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2214:   [CODE]",
          "2221:   new",
          "2222:   setl cindent ts=4 sw=4",
          "2223:   setl cino=}4",
          "2226:   {",
          "2227:     asdf asdflkajds f;",
          "2228:    if (tes & ting) {",
          "",
          "[Removed Lines]",
          "2216:   call assert_equal(expected, getline(1, '$'))",
          "2217:   enew! | close",
          "2218: endfunc",
          "2220: func Test_cindent_5()",
          "2225:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2225:   assert_equal(expected, getline(1, '$'))",
          "2227:   bwipe!",
          "2228: enddef",
          "2230: def Test_cindent_5()",
          "2235:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2239:   }",
          "2240:   [CODE]",
          "2243:   normal gg",
          "2245:   exe \"normal k2==/testing2\\<CR>\"",
          "2246:   normal k2==",
          "2249:   {",
          "2250:     asdf asdflkajds f;",
          "2251:    if (tes & ting) {",
          "",
          "[Removed Lines]",
          "2242:   call append(0, code)",
          "2244:   call search('testing1')",
          "2248:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2252:   append(0, code)",
          "2254:   search('testing1')",
          "2258:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2264:   [CODE]",
          "2271:   new",
          "2272:   setl cindent ts=4 sw=4",
          "2273:   setl cino=(0,)20",
          "2276:   main ( int first_par, /*",
          "",
          "[Removed Lines]",
          "2266:   call assert_equal(expected, getline(1, '$'))",
          "2267:   enew! | close",
          "2268: endfunc",
          "2270: func Test_cindent_6()",
          "2275:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2276:   assert_equal(expected, getline(1, '$'))",
          "2278:   bwipe!",
          "2279: enddef",
          "2281: def Test_cindent_6()",
          "2286:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2296:   }",
          "2297:   [CODE]",
          "2300:   normal gg",
          "2302:   normal =][",
          "2305:   main ( int first_par, /*",
          "",
          "[Removed Lines]",
          "2299:   call append(0, code)",
          "2301:   call search('main')",
          "2304:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2310:   append(0, code)",
          "2312:   search('main')",
          "2315:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2327:   [CODE]",
          "2334:   new",
          "2335:   setl cindent ts=4 sw=4",
          "2336:   setl cino=es,n0s",
          "2339:   main(void)",
          "2340:   {",
          "",
          "[Removed Lines]",
          "2329:   call assert_equal(expected, getline(1, '$'))",
          "2330:   enew! | close",
          "2331: endfunc",
          "2333: func Test_cindent_7()",
          "2338:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2340:   assert_equal(expected, getline(1, '$'))",
          "2342:   bwipe!",
          "2343: enddef",
          "2345: def Test_cindent_7()",
          "2350:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2348:   }",
          "2349:   [CODE]",
          "2352:   normal gg",
          "2354:   normal =][",
          "2357:   main(void)",
          "2358:   {",
          "",
          "[Removed Lines]",
          "2351:   call append(0, code)",
          "2353:   call search('main')",
          "2356:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2363:   append(0, code)",
          "2365:   search('main')",
          "2368:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2366:   }",
          "2368:   [CODE]",
          "2375:   new",
          "2376:   setl cindent ts=4 sw=4",
          "2377:   setl cino=",
          "2381:   {",
          "2382:    do",
          "",
          "[Removed Lines]",
          "2370:   call assert_equal(expected, getline(1, '$'))",
          "2371:   enew! | close",
          "2372: endfunc",
          "2374: func Test_cindent_8()",
          "2379:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2381:   assert_equal(expected, getline(1, '$'))",
          "2383:   bwipe!",
          "2384: enddef",
          "2386: def Test_cindent_8()",
          "2391:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2393:   }",
          "2394:   [CODE]",
          "2397:   normal gg",
          "2398:   normal ]]=][",
          "2402:   {",
          "2403:    do",
          "",
          "[Removed Lines]",
          "2396:   call append(0, code)",
          "2400:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2408:   append(0, code)",
          "2412:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2416:   [CODE]",
          "2423:   new",
          "2424:   setl cindent ts=4 sw=4",
          "2428:   void f()",
          "2429:   {",
          "",
          "[Removed Lines]",
          "2418:   call assert_equal(expected, getline(1, '$'))",
          "2419:   enew! | close",
          "2420: endfunc",
          "2422: func Test_cindent_9()",
          "2426:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2430:   assert_equal(expected, getline(1, '$'))",
          "2432:   bwipe!",
          "2433: enddef",
          "2435: def Test_cindent_9()",
          "2439:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2438:   }",
          "2439:   [CODE]",
          "2442:   normal gg",
          "2443:   normal ]]=][",
          "2447:   void f()",
          "2448:   {",
          "",
          "[Removed Lines]",
          "2441:   call append(0, code)",
          "2445:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2454:   append(0, code)",
          "2458:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2459:   [CODE]",
          "2466:   new",
          "2467:   setl cindent ts=4 sw=4",
          "2468:   setl cino={s,e-s",
          "2472:   void f()",
          "2473:   {",
          "",
          "[Removed Lines]",
          "2461:   call assert_equal(expected, getline(1, '$'))",
          "2462:   enew! | close",
          "2463: endfunc",
          "2465: func Test_cindent_10()",
          "2470:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2474:   assert_equal(expected, getline(1, '$'))",
          "2476:   bwipe!",
          "2477: enddef",
          "2479: def Test_cindent_10()",
          "2484:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2481:   }",
          "2482:   [CODE]",
          "2485:   normal gg",
          "2486:   normal ]]=][",
          "2490:   void f()",
          "2491:   {",
          "",
          "[Removed Lines]",
          "2484:   call append(0, code)",
          "2488:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2498:   append(0, code)",
          "2502:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2501:   [CODE]",
          "2508:   new",
          "2509:   setl cindent ts=4 sw=4",
          "2510:   setl cino={s,fs",
          "2513:   void bar(void)",
          "2514:   {",
          "2515:    static array[2][2] =",
          "",
          "[Removed Lines]",
          "2503:   call assert_equal(expected, getline(1, '$'))",
          "2504:   enew! | close",
          "2505: endfunc",
          "2507: func Test_cindent_11()",
          "2512:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2517:   assert_equal(expected, getline(1, '$'))",
          "2519:   bwipe!",
          "2520: enddef",
          "2522: def Test_cindent_11()",
          "2527:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2545:   [CODE]",
          "2548:   normal gg",
          "2549:   exe \"normal ]]=/ foo\\<CR>\"",
          "2552:   void bar(void)",
          "2553:    {",
          "2554:    static array[2][2] =",
          "",
          "[Removed Lines]",
          "2547:   call append(0, code)",
          "2551:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2562:   append(0, code)",
          "2566:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2585:   [CODE]",
          "2592:   new",
          "2593:   setl cindent ts=4 sw=4",
          "2594:   setl cino=",
          "2597:   a()",
          "2598:   {",
          "2599:     do {",
          "",
          "[Removed Lines]",
          "2587:   call assert_equal(expected, getline(1, '$'))",
          "2588:   enew! | close",
          "2589: endfunc",
          "2591: func Test_cindent_12()",
          "2596:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2601:   assert_equal(expected, getline(1, '$'))",
          "2603:   bwipe!",
          "2604: enddef",
          "2606: def Test_cindent_12()",
          "2611:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2605:   }",
          "2606:   [CODE]",
          "2609:   normal gg",
          "2611:   normal ohere",
          "2614:   a()",
          "2615:   {",
          "2616:     do {",
          "",
          "[Removed Lines]",
          "2608:   call append(0, code)",
          "2610:   call search('while')",
          "2613:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2623:   append(0, code)",
          "2625:   search('while')",
          "2628:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2623:   }",
          "2625:   [CODE]",
          "2632:   new",
          "2633:   setl cindent ts=4 sw=4",
          "2634:   setl cino= com=",
          "2637:   a()",
          "2638:   {",
          "2639:   label1:",
          "",
          "[Removed Lines]",
          "2627:   call assert_equal(expected, getline(1, '$'))",
          "2628:   enew! | close",
          "2629: endfunc",
          "2631: func Test_cindent_13()",
          "2636:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2641:   assert_equal(expected, getline(1, '$'))",
          "2643:   bwipe!",
          "2644: enddef",
          "2646: def Test_cindent_13()",
          "2651:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2642:   }",
          "2643:   [CODE]",
          "2646:   normal gg",
          "2652:   a()",
          "2653:   {",
          "2654:   label1:",
          "",
          "[Removed Lines]",
          "2645:   call append(0, code)",
          "2647:   call search('comment')",
          "2648:   exe \"normal olabel2: b();\\rlabel3 /* post */:\\r/* pre */ label4:\\r\" .",
          "2649:         \\ \"f(/*com*/);\\rif (/*com*/)\\rcmd();\"",
          "2651:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2660:   append(0, code)",
          "2662:   search('comment')",
          "2663:   exe \"normal olabel2: b();\\rlabel3 /* post */:\\r/* pre */ label4:\\r\"",
          "2664:         .. \"f(/*com*/);\\rif (/*com*/)\\rcmd();\"",
          "2666:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2663:   }",
          "2665:   [CODE]",
          "2672:   new",
          "2673:   setl cindent ts=4 sw=4",
          "",
          "[Removed Lines]",
          "2667:   call assert_equal(expected, getline(1, '$'))",
          "2668:   enew! | close",
          "2669: endfunc",
          "2671: func Test_cindent_14()",
          "2676:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2681:   assert_equal(expected, getline(1, '$'))",
          "2683:   bwipe!",
          "2684: enddef",
          "2686: def Test_cindent_14()",
          "2691:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2684:   [CODE]",
          "2687:   normal gg",
          "2689:   normal =5j",
          "",
          "[Removed Lines]",
          "2686:   call append(0, code)",
          "2688:   call search('simple')",
          "2691:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2701:   append(0, code)",
          "2703:   search('simple')",
          "2706:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2700:   [CODE]",
          "2707:   new",
          "2708:   setl cindent ts=4 sw=4",
          "2709:   setl cino=c0",
          "2710:   setl comments& comments-=s1:/* comments^=s0:/*",
          "2713:   void f()",
          "2714:   {",
          "",
          "[Removed Lines]",
          "2702:   call assert_equal(expected, getline(1, '$'))",
          "2703:   enew! | close",
          "2704: endfunc",
          "2706: func Test_cindent_15()",
          "2712:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2716:   assert_equal(expected, getline(1, '$'))",
          "2718:   bwipe!",
          "2719: enddef",
          "2721: def Test_cindent_15()",
          "2727:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2719:   }",
          "2720:   [CODE]",
          "2723:   normal gg",
          "2724:   normal ]]=][",
          "2727:   void f()",
          "2728:   {",
          "",
          "[Removed Lines]",
          "2722:   call append(0, code)",
          "2726:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2737:   append(0, code)",
          "2741:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2733:   }",
          "2735:   [CODE]",
          "2742:   new",
          "2743:   setl cindent ts=4 sw=4",
          "2744:   setl cino=c0,C1",
          "2745:   setl comments& comments-=s1:/* comments^=s0:/*",
          "2748:   void f()",
          "2749:   {",
          "",
          "[Removed Lines]",
          "2737:   call assert_equal(expected, getline(1, '$'))",
          "2738:   enew! | close",
          "2739: endfunc",
          "2741: func Test_cindent_16()",
          "2747:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2751:   assert_equal(expected, getline(1, '$'))",
          "2753:   bwipe!",
          "2754: enddef",
          "2756: def Test_cindent_16()",
          "2762:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2754:   }",
          "2755:   [CODE]",
          "2758:   normal gg",
          "2759:   normal ]]=][",
          "2762:   void f()",
          "2763:   {",
          "",
          "[Removed Lines]",
          "2757:   call append(0, code)",
          "2761:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2772:   append(0, code)",
          "2776:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2768:   }",
          "2770:   [CODE]",
          "2777:   new",
          "2778:   setl cindent ts=4 sw=4",
          "2779:   setl cino=",
          "2782:   void f()",
          "2783:   {",
          "2784:    c = c1 &&",
          "",
          "[Removed Lines]",
          "2772:   call assert_equal(expected, getline(1, '$'))",
          "2773:   enew! | close",
          "2774: endfunc",
          "2776: func Test_cindent_17()",
          "2781:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2786:   assert_equal(expected, getline(1, '$'))",
          "2788:   bwipe!",
          "2789: enddef",
          "2791: def Test_cindent_17()",
          "2796:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2789:   }",
          "2790:   [CODE]",
          "2793:   normal gg",
          "2794:   normal ]]=][",
          "2797:   void f()",
          "2798:   {",
          "2799:    c = c1 &&",
          "",
          "[Removed Lines]",
          "2792:   call append(0, code)",
          "2796:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2807:   append(0, code)",
          "2811:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2804:   }",
          "2806:   [CODE]",
          "2808:   call assert_equal(expected, getline(1, '$'))",
          "2813:   new",
          "2814:   setl cindent ts=4 sw=4",
          "2815:   setl cino=(s",
          "2818:   void f()",
          "2819:   {",
          "2820:    c = c1 &&",
          "",
          "[Removed Lines]",
          "2809:   enew! | close",
          "2810: endfunc",
          "2812: func Test_cindent_18()",
          "2817:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2824:   bwipe!",
          "2825: enddef",
          "2827: def Test_cindent_18()",
          "2832:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2825:   }",
          "2826:   [CODE]",
          "2829:   normal gg",
          "2830:   normal ]]=][",
          "2833:   void f()",
          "2834:   {",
          "2835:    c = c1 &&",
          "",
          "[Removed Lines]",
          "2828:   call append(0, code)",
          "2832:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2843:   append(0, code)",
          "2847:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2840:   }",
          "2842:   [CODE]",
          "2849:   new",
          "2850:   setl cindent ts=4 sw=4",
          "2851:   set cino=(s,U1",
          "2854:   void f()",
          "2855:   {",
          "2856:    c = c1 &&",
          "",
          "[Removed Lines]",
          "2844:   call assert_equal(expected, getline(1, '$'))",
          "2845:   enew! | close",
          "2846: endfunc",
          "2848: func Test_cindent_19()",
          "2853:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2858:   assert_equal(expected, getline(1, '$'))",
          "2860:   bwipe!",
          "2861: enddef",
          "2863: def Test_cindent_19()",
          "2868:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2861:   }",
          "2862:   [CODE]",
          "2865:   normal gg",
          "2866:   normal ]]=][",
          "2869:   void f()",
          "2870:   {",
          "2871:    c = c1 &&",
          "",
          "[Removed Lines]",
          "2864:   call append(0, code)",
          "2868:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2879:   append(0, code)",
          "2883:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2876:   }",
          "2878:   [CODE]",
          "2885:   new",
          "2886:   setl cindent ts=4 sw=4",
          "2887:   setl cino=(0",
          "2890:   void f()",
          "2891:   {",
          "2892:    if (   c1",
          "",
          "[Removed Lines]",
          "2880:   call assert_equal(expected, getline(1, '$'))",
          "2881:   enew! | close",
          "2882: endfunc",
          "2884: func Test_cindent_20()",
          "2889:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2894:   assert_equal(expected, getline(1, '$'))",
          "2896:   bwipe!",
          "2897: enddef",
          "2899: def Test_cindent_20()",
          "2904:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2896:   }",
          "2897:   [CODE]",
          "2900:   normal gg",
          "2901:   normal ]]=][",
          "2904:   void f()",
          "2905:   {",
          "2906:    if (   c1",
          "",
          "[Removed Lines]",
          "2899:   call append(0, code)",
          "2903:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2914:   append(0, code)",
          "2918:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2910:   }",
          "2912:   [CODE]",
          "2919:   new",
          "2920:   setl cindent ts=4 sw=4",
          "2921:   setl cino=(0,w1",
          "2924:   void f()",
          "2925:   {",
          "2926:    if (   c1",
          "",
          "[Removed Lines]",
          "2914:   call assert_equal(expected, getline(1, '$'))",
          "2915:   enew! | close",
          "2916: endfunc",
          "2918: func Test_cindent_21()",
          "2923:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2928:   assert_equal(expected, getline(1, '$'))",
          "2930:   bwipe!",
          "2931: enddef",
          "2933: def Test_cindent_21()",
          "2938:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2930:   }",
          "2931:   [CODE]",
          "2934:   normal gg",
          "2935:   normal ]]=][",
          "2938:   void f()",
          "2939:   {",
          "2940:    if (   c1",
          "",
          "[Removed Lines]",
          "2933:   call append(0, code)",
          "2937:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2948:   append(0, code)",
          "2952:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2944:   }",
          "2946:   [CODE]",
          "2953:   new",
          "2954:   setl cindent ts=4 sw=4",
          "2955:   setl cino=(s",
          "2958:   void f()",
          "2959:   {",
          "2960:    c = c1 && (",
          "",
          "[Removed Lines]",
          "2948:   call assert_equal(expected, getline(1, '$'))",
          "2949:   enew! | close",
          "2950: endfunc",
          "2952: func Test_cindent_22()",
          "2957:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2962:   assert_equal(expected, getline(1, '$'))",
          "2964:   bwipe!",
          "2965: enddef",
          "2967: def Test_cindent_22()",
          "2972:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2968:   }",
          "2969:   [CODE]",
          "2972:   normal gg",
          "2973:   normal ]]=][",
          "2976:   void f()",
          "2977:   {",
          "2978:    c = c1 && (",
          "",
          "[Removed Lines]",
          "2971:   call append(0, code)",
          "2975:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "2986:   append(0, code)",
          "2990:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2986:   }",
          "2988:   [CODE]",
          "2995:   new",
          "2996:   setl cindent ts=4 sw=4",
          "2997:   setl cino=(s,m1",
          "3000:   void f()",
          "3001:   {",
          "3002:    c = c1 && (",
          "",
          "[Removed Lines]",
          "2990:   call assert_equal(expected, getline(1, '$'))",
          "2991:   enew! | close",
          "2992: endfunc",
          "2994: func Test_cindent_23()",
          "2999:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3004:   assert_equal(expected, getline(1, '$'))",
          "3006:   bwipe!",
          "3007: enddef",
          "3009: def Test_cindent_23()",
          "3014:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3010:   }",
          "3011:   [CODE]",
          "3014:   normal gg",
          "3015:   normal ]]=][",
          "3018:   void f()",
          "3019:   {",
          "3020:    c = c1 && (",
          "",
          "[Removed Lines]",
          "3013:   call append(0, code)",
          "3017:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3028:   append(0, code)",
          "3032:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3028:   }",
          "3030:   [CODE]",
          "3037:   new",
          "3038:   setl cindent ts=4 sw=4",
          "3039:   setl cino=b1",
          "3042:   void f()",
          "3043:   {",
          "3044:    switch (x)",
          "",
          "[Removed Lines]",
          "3032:   call assert_equal(expected, getline(1, '$'))",
          "3033:   enew! | close",
          "3034: endfunc",
          "3036: func Test_cindent_24()",
          "3041:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3046:   assert_equal(expected, getline(1, '$'))",
          "3048:   bwipe!",
          "3049: enddef",
          "3051: def Test_cindent_24()",
          "3056:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3053:   }",
          "3054:   [CODE]",
          "3057:   normal gg",
          "3058:   normal ]]=][",
          "3061:   void f()",
          "3062:   {",
          "3063:    switch (x)",
          "",
          "[Removed Lines]",
          "3056:   call append(0, code)",
          "3060:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3071:   append(0, code)",
          "3075:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3072:   }",
          "3074:   [CODE]",
          "3081:   new",
          "3082:   setl cindent ts=4 sw=4",
          "3083:   setl cino=(0,W5",
          "3086:   void f()",
          "3087:   {",
          "3088:    invokeme(",
          "",
          "[Removed Lines]",
          "3076:   call assert_equal(expected, getline(1, '$'))",
          "3077:   enew! | close",
          "3078: endfunc",
          "3080: func Test_cindent_25()",
          "3085:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3090:   assert_equal(expected, getline(1, '$'))",
          "3092:   bwipe!",
          "3093: enddef",
          "3095: def Test_cindent_25()",
          "3100:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3098:   }",
          "3099:   [CODE]",
          "3102:   normal gg",
          "3103:   normal ]]=][",
          "3106:   void f()",
          "3107:   {",
          "3108:    invokeme(",
          "",
          "[Removed Lines]",
          "3101:   call append(0, code)",
          "3105:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3116:   append(0, code)",
          "3120:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3118:   }",
          "3120:   [CODE]",
          "3127:   new",
          "3128:   setl cindent ts=4 sw=4",
          "3129:   setl cino=/6",
          "3132:   void f()",
          "3133:   {",
          "3134:    statement;",
          "",
          "[Removed Lines]",
          "3122:   call assert_equal(expected, getline(1, '$'))",
          "3123:   enew! | close",
          "3124: endfunc",
          "3126: func Test_cindent_26()",
          "3131:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3136:   assert_equal(expected, getline(1, '$'))",
          "3138:   bwipe!",
          "3139: enddef",
          "3141: def Test_cindent_26()",
          "3146:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3137:   }",
          "3138:   [CODE]",
          "3141:   normal gg",
          "3142:   normal ]]=][",
          "3145:   void f()",
          "3146:   {",
          "3147:    statement;",
          "",
          "[Removed Lines]",
          "3140:   call append(0, code)",
          "3144:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3155:   append(0, code)",
          "3159:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3150:   }",
          "3152:   [CODE]",
          "3159:   new",
          "3160:   setl cindent ts=4 sw=4",
          "3161:   setl cino=",
          "3164:   void f()",
          "3165:   {",
          "3166:    statement;",
          "",
          "[Removed Lines]",
          "3154:   call assert_equal(expected, getline(1, '$'))",
          "3155:   enew! | close",
          "3156: endfunc",
          "3158: func Test_cindent_27()",
          "3163:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3168:   assert_equal(expected, getline(1, '$'))",
          "3170:   bwipe!",
          "3171: enddef",
          "3173: def Test_cindent_27()",
          "3178:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3169:   }",
          "3170:   [CODE]",
          "3173:   normal gg",
          "3174:   exe \"normal ]]/comment 1/+1\\<CR>==\"",
          "3177:   void f()",
          "3178:   {",
          "3179:    statement;",
          "",
          "[Removed Lines]",
          "3172:   call append(0, code)",
          "3176:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3187:   append(0, code)",
          "3191:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3182:   }",
          "3184:   [CODE]",
          "3191:   new",
          "3192:   setl cindent ts=4 sw=4",
          "3193:   setl cino=g0",
          "3196:   class CAbc",
          "3197:   {",
          "3198:      int Test() { return FALSE; }",
          "",
          "[Removed Lines]",
          "3186:   call assert_equal(expected, getline(1, '$'))",
          "3187:   enew! | close",
          "3188: endfunc",
          "3190: func Test_cindent_28()",
          "3195:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3200:   assert_equal(expected, getline(1, '$'))",
          "3202:   bwipe!",
          "3203: enddef",
          "3205: def Test_cindent_28()",
          "3210:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3204:   };",
          "3205:   [CODE]",
          "3208:   normal gg",
          "3209:   normal ]]=][",
          "3212:   class CAbc",
          "3213:   {",
          "3214:    int Test() { return FALSE; }",
          "",
          "[Removed Lines]",
          "3207:   call append(0, code)",
          "3211:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3222:   append(0, code)",
          "3226:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3220:   };",
          "3222:   [CODE]",
          "3229:   new",
          "3230:   setl cindent ts=4 sw=4",
          "3231:   setl cino=(0,gs,hs",
          "3234:   class Foo : public Bar",
          "3235:   {",
          "3236:   public:",
          "",
          "[Removed Lines]",
          "3224:   call assert_equal(expected, getline(1, '$'))",
          "3225:   enew! | close",
          "3226: endfunc",
          "3228: func Test_cindent_29()",
          "3233:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3238:   assert_equal(expected, getline(1, '$'))",
          "3240:   bwipe!",
          "3241: enddef",
          "3243: def Test_cindent_29()",
          "3248:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3241:   };",
          "3242:   [CODE]",
          "3245:   normal gg",
          "3246:   normal ]]=][",
          "3249:   class Foo : public Bar",
          "3250:   {",
          "3251:    public:",
          "",
          "[Removed Lines]",
          "3244:   call append(0, code)",
          "3248:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3259:   append(0, code)",
          "3263:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3256:   };",
          "3258:   [CODE]",
          "3265:   new",
          "3266:   setl cindent ts=4 sw=4",
          "3267:   setl cino=+20",
          "3270:  void",
          "3271: foo()",
          "3272: {",
          "",
          "[Removed Lines]",
          "3260:   call assert_equal(expected, getline(1, '$'))",
          "3261:   enew! | close",
          "3262: endfunc",
          "3264: func Test_cindent_30()",
          "3269:   let code =<< [CODE]",
          "",
          "[Added Lines]",
          "3274:   assert_equal(expected, getline(1, '$'))",
          "3276:   bwipe!",
          "3277: enddef",
          "3279: def Test_cindent_30()",
          "3284:   var code =<< [CODE]",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3277: }",
          "3278: [CODE]",
          "3281:   normal gg",
          "3282:   normal ]]=][",
          "3285:  void",
          "3286: foo()",
          "3287: {",
          "",
          "[Removed Lines]",
          "3280:   call append(0, code)",
          "3284:   let expected =<< [CODE]",
          "",
          "[Added Lines]",
          "3295:   append(0, code)",
          "3299:   var expected =<< [CODE]",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3292: }",
          "3294: [CODE]",
          "3301:   new",
          "3302:   setl cindent ts=4 sw=4",
          "3303:   setl cino=(0,W2s",
          "3307:   {",
          "3308:      averylongfunctionnamelongfunctionnameaverylongfunctionname()->asd(",
          "",
          "[Removed Lines]",
          "3296:   call assert_equal(expected, getline(1, '$'))",
          "3297:   enew! | close",
          "3298: endfunc",
          "3300: func Test_cindent_31()",
          "3305:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3310:   assert_equal(expected, getline(1, '$'))",
          "3312:   bwipe!",
          "3313: enddef",
          "3315: def Test_cindent_31()",
          "3320:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3342:   }",
          "3343:   [CODE]",
          "3346:   normal gg",
          "3347:   normal ]]=][",
          "3351:   {",
          "3352:    averylongfunctionnamelongfunctionnameaverylongfunctionname()->asd(",
          "",
          "[Removed Lines]",
          "3345:   call append(0, code)",
          "3349:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3360:   append(0, code)",
          "3364:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3386:   }",
          "3388:   [CODE]",
          "3395:   new",
          "3396:   setl cindent ts=4 sw=4",
          "3397:   setl cino=M1",
          "3400:   int main ()",
          "3401:   {",
          "3402:    if (cond1 &&",
          "",
          "[Removed Lines]",
          "3390:   call assert_equal(expected, getline(1, '$'))",
          "3391:   enew! | close",
          "3392: endfunc",
          "3394: func Test_cindent_32()",
          "3399:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3404:   assert_equal(expected, getline(1, '$'))",
          "3406:   bwipe!",
          "3407: enddef",
          "3409: def Test_cindent_32()",
          "3414:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3406:   }",
          "3407:   [CODE]",
          "3410:   normal gg",
          "3411:   normal ]]=][",
          "3414:   int main ()",
          "3415:   {",
          "3416:    if (cond1 &&",
          "",
          "[Removed Lines]",
          "3409:   call append(0, code)",
          "3413:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3424:   append(0, code)",
          "3428:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3420:   }",
          "3422:   [CODE]",
          "3429:   new",
          "3430:   setl cindent ts=4 sw=4",
          "3431:   setl cino=(0,ts",
          "3434:   void func(int a",
          "3435:   #if defined(FOO)",
          "3436:       , int b",
          "",
          "[Removed Lines]",
          "3424:   call assert_equal(expected, getline(1, '$'))",
          "3425:   enew! | close",
          "3426: endfunc",
          "3428: func Test_cindent_33()",
          "3433:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3438:   assert_equal(expected, getline(1, '$'))",
          "3440:   bwipe!",
          "3441: enddef",
          "3443: def Test_cindent_33()",
          "3448:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3441:   }",
          "3442:   [CODE]",
          "3445:   normal gg",
          "3446:   normal 2j=][",
          "3449:   void func(int a",
          "3450:   #if defined(FOO)",
          "3451:       , int b",
          "",
          "[Removed Lines]",
          "3444:   call append(0, code)",
          "3448:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3459:   append(0, code)",
          "3463:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3456:   }",
          "3458:   [CODE]",
          "3465:   new",
          "3466:   setl cindent ts=4 sw=4",
          "3467:   setl cino=(0",
          "3471:   void",
          "3472:   func(int a",
          "",
          "[Removed Lines]",
          "3460:   call assert_equal(expected, getline(1, '$'))",
          "3461:   enew! | close",
          "3462: endfunc",
          "3464: func Test_cindent_34()",
          "3469:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3474:   assert_equal(expected, getline(1, '$'))",
          "3476:   bwipe!",
          "3477: enddef",
          "3479: def Test_cindent_34()",
          "3484:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3479:   }",
          "3480:   [CODE]",
          "3483:   normal gg",
          "3484:   normal =][",
          "3488:    void",
          "3489:   func(int a",
          "",
          "[Removed Lines]",
          "3482:   call append(0, code)",
          "3486:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3497:   append(0, code)",
          "3501:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3496:   }",
          "3498:   [CODE]",
          "3505:   new",
          "3506:   setl cindent ts=4 sw=4",
          "3507:   setl cino&",
          "3510:   void func(void)",
          "3511:   {",
          "3512:    if(x==y)",
          "",
          "[Removed Lines]",
          "3500:   call assert_equal(expected, getline(1, '$'))",
          "3501:   enew! | close",
          "3502: endfunc",
          "3504: func Test_cindent_35()",
          "3509:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3514:   assert_equal(expected, getline(1, '$'))",
          "3516:   bwipe!",
          "3517: enddef",
          "3519: def Test_cindent_35()",
          "3524:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3579:   }",
          "3580:   [CODE]",
          "3583:   normal gg",
          "3584:   normal ]]=7][",
          "3587:   void func(void)",
          "3588:   {",
          "3589:    if(x==y)",
          "",
          "[Removed Lines]",
          "3582:   call append(0, code)",
          "3586:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3597:   append(0, code)",
          "3601:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3656:   }",
          "3658:   [CODE]",
          "3665:   new",
          "3666:   setl cindent ts=4 sw=4",
          "3667:   setl cino&",
          "3668:   setl cino+=l1",
          "3671:   void func(void)",
          "3672:   {",
          "3673:    int tab[] =",
          "",
          "[Removed Lines]",
          "3660:   call assert_equal(expected, getline(1, '$'))",
          "3661:   enew! | close",
          "3662: endfunc",
          "3664: func Test_cindent_36()",
          "3670:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3674:   assert_equal(expected, getline(1, '$'))",
          "3676:   bwipe!",
          "3677: enddef",
          "3679: def Test_cindent_36()",
          "3685:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3693:   }",
          "3694:   [CODE]",
          "3697:   normal gg",
          "3698:   normal ]]=][",
          "3701:   void func(void)",
          "3702:   {",
          "3703:    int tab[] =",
          "",
          "[Removed Lines]",
          "3696:   call append(0, code)",
          "3700:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3711:   append(0, code)",
          "3715:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3723:   }",
          "3725:   [CODE]",
          "3732:   new",
          "3733:   setl cindent ts=4 sw=4",
          "3734:   setl cino&",
          "3737:   void func(void)",
          "3738:   {",
          "3739:    cout << \"a\"",
          "",
          "[Removed Lines]",
          "3727:   call assert_equal(expected, getline(1, '$'))",
          "3728:   enew! | close",
          "3729: endfunc",
          "3731: func Test_cindent_37()",
          "3736:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3741:   assert_equal(expected, getline(1, '$'))",
          "3743:   bwipe!",
          "3744: enddef",
          "3746: def Test_cindent_37()",
          "3751:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3743:   }",
          "3744:   [CODE]",
          "3747:   normal gg",
          "3748:   normal ]]=][",
          "3751:   void func(void)",
          "3752:   {",
          "3753:    cout << \"a\"",
          "",
          "[Removed Lines]",
          "3746:   call append(0, code)",
          "3750:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3761:   append(0, code)",
          "3765:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3757:   }",
          "3759:   [CODE]",
          "3766:   new",
          "3767:   setl cindent ts=4 sw=4",
          "3771:   void func(void)",
          "3772:   {",
          "",
          "[Removed Lines]",
          "3761:   call assert_equal(expected, getline(1, '$'))",
          "3762:   enew! | close",
          "3763: endfunc",
          "3765: func Test_cindent_38()",
          "3770:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3775:   assert_equal(expected, getline(1, '$'))",
          "3777:   bwipe!",
          "3778: enddef",
          "3780: def Test_cindent_38()",
          "3785:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3776:   }",
          "3777:   [CODE]",
          "3780:   normal gg",
          "3781:   normal ]]3jofoo();",
          "3784:   void func(void)",
          "3785:   {",
          "",
          "[Removed Lines]",
          "3779:   call append(0, code)",
          "3783:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3794:   append(0, code)",
          "3798:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3790:   }",
          "3792:   [CODE]",
          "3799:   new",
          "3800:   setl cindent ts=4 sw=4",
          "3801:   setl cino&",
          "3804:   void func(void)",
          "3805:   {",
          "3806:    for (int i = 0; i < 10; ++i)",
          "",
          "[Removed Lines]",
          "3794:   call assert_equal(expected, getline(1, '$'))",
          "3795:   enew! | close",
          "3796: endfunc",
          "3798: func Test_cindent_39()",
          "3803:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3808:   assert_equal(expected, getline(1, '$'))",
          "3810:   bwipe!",
          "3811: enddef",
          "3813: def Test_cindent_39()",
          "3818:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3812:   }",
          "3813:   [CODE]",
          "3816:   normal gg",
          "3817:   normal ]]=][",
          "3820:   void func(void)",
          "3821:   {",
          "3822:    for (int i = 0; i < 10; ++i)",
          "",
          "[Removed Lines]",
          "3815:   call append(0, code)",
          "3819:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3830:   append(0, code)",
          "3834:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3828:   }",
          "3830:   [CODE]",
          "3837:   new",
          "3838:   setl cindent ts=4 sw=4",
          "3839:   setl cino=k2s,(0",
          "3842:   void func(void)",
          "3843:   {",
          "3844:    if (condition1",
          "",
          "[Removed Lines]",
          "3832:   call assert_equal(expected, getline(1, '$'))",
          "3833:   enew! | close",
          "3834: endfunc",
          "3836: func Test_cindent_40()",
          "3841:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3846:   assert_equal(expected, getline(1, '$'))",
          "3848:   bwipe!",
          "3849: enddef",
          "3851: def Test_cindent_40()",
          "3856:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3866:   }",
          "3867:   [CODE]",
          "3870:   normal gg",
          "3871:   normal ]]=][",
          "3874:   void func(void)",
          "3875:   {",
          "3876:    if (condition1",
          "",
          "[Removed Lines]",
          "3869:   call append(0, code)",
          "3873:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3884:   append(0, code)",
          "3888:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3898:   }",
          "3900:   [CODE]",
          "3907:   new",
          "3908:   setl cindent ts=4 sw=4",
          "3909:   setl cino=k2s,(s",
          "3912:   void func(void)",
          "3913:   {",
          "3914:    if (condition1",
          "",
          "[Removed Lines]",
          "3902:   call assert_equal(expected, getline(1, '$'))",
          "3903:   enew! | close",
          "3904: endfunc",
          "3906: func Test_cindent_41()",
          "3911:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3916:   assert_equal(expected, getline(1, '$'))",
          "3918:   bwipe!",
          "3919: enddef",
          "3921: def Test_cindent_41()",
          "3926:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3936:   }",
          "3937:   [CODE]",
          "3940:   normal gg",
          "3941:   normal ]]=][",
          "3944:   void func(void)",
          "3945:   {",
          "3946:    if (condition1",
          "",
          "[Removed Lines]",
          "3939:   call append(0, code)",
          "3943:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3954:   append(0, code)",
          "3958:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "3968:   }",
          "3970:   [CODE]",
          "3977:   new",
          "3978:   setl cindent ts=4 sw=4",
          "3979:   setl cino=k2s,(s,U1",
          "3982:   void func(void)",
          "3983:   {",
          "3984:    if (condition1",
          "",
          "[Removed Lines]",
          "3972:   call assert_equal(expected, getline(1, '$'))",
          "3973:   enew! | close",
          "3974: endfunc",
          "3976: func Test_cindent_42()",
          "3981:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "3986:   assert_equal(expected, getline(1, '$'))",
          "3988:   bwipe!",
          "3989: enddef",
          "3991: def Test_cindent_42()",
          "3996:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "4007:   }",
          "4008:   [CODE]",
          "4011:   normal gg",
          "4012:   normal ]]=][",
          "4015:   void func(void)",
          "4016:   {",
          "4017:    if (condition1",
          "",
          "[Removed Lines]",
          "4010:   call append(0, code)",
          "4014:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4025:   append(0, code)",
          "4029:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "4040:   }",
          "4042:   [CODE]",
          "4049:   new",
          "4050:   setl cindent ts=4 sw=4",
          "4051:   setl cino=k2s,(0,W4",
          "4054:   void func(void)",
          "4055:   {",
          "4056:    if (condition1",
          "",
          "[Removed Lines]",
          "4044:   call assert_equal(expected, getline(1, '$'))",
          "4045:   enew! | close",
          "4046: endfunc",
          "4048: func Test_cindent_43()",
          "4053:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4058:   assert_equal(expected, getline(1, '$'))",
          "4060:   bwipe!",
          "4061: enddef",
          "4063: def Test_cindent_43()",
          "4068:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "4084:   }",
          "4085:   [CODE]",
          "4088:   normal gg",
          "4089:   normal ]]=][",
          "4092:   void func(void)",
          "4093:   {",
          "4094:    if (condition1",
          "",
          "[Removed Lines]",
          "4087:   call append(0, code)",
          "4091:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4102:   append(0, code)",
          "4106:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "4122:   }",
          "4124:   [CODE]",
          "4131:   new",
          "4132:   setl cindent ts=4 sw=4",
          "4133:   setl cino=k2s,u2",
          "4136:   void func(void)",
          "4137:   {",
          "4138:    if (condition1",
          "",
          "[Removed Lines]",
          "4126:   call assert_equal(expected, getline(1, '$'))",
          "4127:   enew! | close",
          "4128: endfunc",
          "4130: func Test_cindent_44()",
          "4135:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4140:   assert_equal(expected, getline(1, '$'))",
          "4142:   bwipe!",
          "4143: enddef",
          "4145: def Test_cindent_44()",
          "4150:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "4155:   }",
          "4156:   [CODE]",
          "4159:   normal gg",
          "4160:   normal ]]=][",
          "4163:   void func(void)",
          "4164:   {",
          "4165:    if (condition1",
          "",
          "[Removed Lines]",
          "4158:   call append(0, code)",
          "4162:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4173:   append(0, code)",
          "4177:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "4182:   }",
          "4184:   [CODE]",
          "4191:   new",
          "4192:   setl cindent ts=4 sw=4",
          "4193:   setl cino=k2s,(0,w1",
          "4196:   void func(void)",
          "4197:   {",
          "4198:    if (condition1",
          "",
          "[Removed Lines]",
          "4186:   call assert_equal(expected, getline(1, '$'))",
          "4187:   enew! | close",
          "4188: endfunc",
          "4190: func Test_cindent_45()",
          "4195:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4200:   assert_equal(expected, getline(1, '$'))",
          "4202:   bwipe!",
          "4203: enddef",
          "4205: def Test_cindent_45()",
          "4210:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "4224:   }",
          "4225:   [CODE]",
          "4228:   normal gg",
          "4229:   normal ]]=][",
          "4232:   void func(void)",
          "4233:   {",
          "4234:    if (condition1",
          "",
          "[Removed Lines]",
          "4227:   call append(0, code)",
          "4231:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4242:   append(0, code)",
          "4246:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "4260:   }",
          "4262:   [CODE]",
          "4269:   new",
          "4270:   setl cindent ts=4 sw=4",
          "4271:   setl cino=k2,(s",
          "4274:   void func(void)",
          "4275:   {",
          "4276:    if (condition1",
          "",
          "[Removed Lines]",
          "4264:   call assert_equal(expected, getline(1, '$'))",
          "4265:   enew! | close",
          "4266: endfunc",
          "4268: func Test_cindent_46()",
          "4273:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4278:   assert_equal(expected, getline(1, '$'))",
          "4280:   bwipe!",
          "4281: enddef",
          "4283: def Test_cindent_46()",
          "4288:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "4289:   }",
          "4290:   [CODE]",
          "4293:   normal gg",
          "4294:   normal ]]=][",
          "4297:   void func(void)",
          "4298:   {",
          "4299:    if (condition1",
          "",
          "[Removed Lines]",
          "4292:   call append(0, code)",
          "4296:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4307:   append(0, code)",
          "4311:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "4312:   }",
          "4314:   [CODE]",
          "4321:   new",
          "4322:   setl cindent ts=4 sw=4",
          "4323:   setl cino=N-s",
          "4326:   NAMESPACESTART",
          "4328:   namespace",
          "",
          "[Removed Lines]",
          "4316:   call assert_equal(expected, getline(1, '$'))",
          "4317:   enew! | close",
          "4318: endfunc",
          "4320: func Test_cindent_47()",
          "4325:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4330:   assert_equal(expected, getline(1, '$'))",
          "4332:   bwipe!",
          "4333: enddef",
          "4335: def Test_cindent_47()",
          "4340:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "4420:   NAMESPACEEND",
          "4421:   [CODE]",
          "4424:   normal gg",
          "4425:   call search('^NAMESPACESTART')",
          "4426:   exe \"normal =/^NAMESPACEEND\\n\"",
          "4429:   NAMESPACESTART",
          "4431:   namespace",
          "",
          "[Removed Lines]",
          "4423:   call append(0, code)",
          "4428:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4438:   append(0, code)",
          "4443:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "4523:   NAMESPACEEND",
          "4525:   [CODE]",
          "4532:   new",
          "4533:   setl cindent ts=4 sw=4",
          "4534:   setl cino=j1,J1",
          "4537:   JSSTART",
          "4538:   var bar = {",
          "4539:   foo: {",
          "",
          "[Removed Lines]",
          "4527:   call assert_equal(expected, getline(1, '$'))",
          "4528:   enew! | close",
          "4529: endfunc",
          "4531: func Test_cindent_48()",
          "4536:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4541:   assert_equal(expected, getline(1, '$'))",
          "4543:   bwipe!",
          "4544: enddef",
          "4546: def Test_cindent_48()",
          "4551:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "4550:   JSEND",
          "4551:   [CODE]",
          "4554:   normal gg",
          "4556:   exe \"normal =/^JSEND\\n\"",
          "4559:   JSSTART",
          "4560:   var bar = {",
          "4561:    foo: {",
          "",
          "[Removed Lines]",
          "4553:   call append(0, code)",
          "4555:   call search('^JSSTART')",
          "4558:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4568:   append(0, code)",
          "4570:   search('^JSSTART')",
          "4573:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "4572:   JSEND",
          "4574:   [CODE]",
          "4581:   new",
          "4582:   setl cindent ts=4 sw=4",
          "4583:   setl cino=j1,J1",
          "4586:   JSSTART",
          "4587:   var foo = [",
          "4588:   1,",
          "",
          "[Removed Lines]",
          "4576:   call assert_equal(expected, getline(1, '$'))",
          "4577:   enew! | close",
          "4578: endfunc",
          "4580: func Test_cindent_49()",
          "4585:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4590:   assert_equal(expected, getline(1, '$'))",
          "4592:   bwipe!",
          "4593: enddef",
          "4595: def Test_cindent_49()",
          "4600:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "4592:   JSEND",
          "4593:   [CODE]",
          "4596:   normal gg",
          "4598:   exe \"normal =/^JSEND\\n\"",
          "4601:   JSSTART",
          "4602:   var foo = [",
          "4603:    1,",
          "",
          "[Removed Lines]",
          "4595:   call append(0, code)",
          "4597:   call search('^JSSTART')",
          "4600:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4610:   append(0, code)",
          "4612:   search('^JSSTART')",
          "4615:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "4607:   JSEND",
          "4609:   [CODE]",
          "4616:   new",
          "4617:   setl cindent ts=4 sw=4",
          "4618:   setl cino=j1,J1",
          "4621:   JSSTART",
          "4622:   function bar() {",
          "4623:   var foo = [",
          "",
          "[Removed Lines]",
          "4611:   call assert_equal(expected, getline(1, '$'))",
          "4612:   enew! | close",
          "4613: endfunc",
          "4615: func Test_cindent_50()",
          "4620:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4625:   assert_equal(expected, getline(1, '$'))",
          "4627:   bwipe!",
          "4628: enddef",
          "4630: def Test_cindent_50()",
          "4635:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "4629:   JSEND",
          "4630:   [CODE]",
          "4633:   normal gg",
          "4635:   exe \"normal =/^JSEND\\n\"",
          "4638:   JSSTART",
          "4639:   function bar() {",
          "4640:    var foo = [",
          "",
          "[Removed Lines]",
          "4632:   call append(0, code)",
          "4634:   call search('^JSSTART')",
          "4637:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4647:   append(0, code)",
          "4649:   search('^JSSTART')",
          "4652:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "4646:   JSEND",
          "4648:   [CODE]",
          "4655:   new",
          "4656:   setl cindent ts=4 sw=4",
          "4657:   setl cino=j1,J1",
          "4660:   JSSTART",
          "4661:   (function($){",
          "",
          "[Removed Lines]",
          "4650:   call assert_equal(expected, getline(1, '$'))",
          "4651:   enew! | close",
          "4652: endfunc",
          "4654: func Test_cindent_51()",
          "4659:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4664:   assert_equal(expected, getline(1, '$'))",
          "4666:   bwipe!",
          "4667: enddef",
          "4669: def Test_cindent_51()",
          "4674:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "4719:   JSEND",
          "4720:   [CODE]",
          "4723:   normal gg",
          "4725:   exe \"normal =/^JSEND\\n\"",
          "4728:   JSSTART",
          "4729:   (function($){",
          "",
          "[Removed Lines]",
          "4722:   call append(0, code)",
          "4724:   call search('^JSSTART')",
          "4727:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4737:   append(0, code)",
          "4739:   search('^JSSTART')",
          "4742:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "4787:   JSEND",
          "4789:   [CODE]",
          "4796:   new",
          "4797:   setl cindent ts=4 sw=4",
          "4798:   setl cino=j1,J1",
          "4801:   JSSTART",
          "4802:   function init(options) {",
          "4803:   $(this).data(class_name+'_public',$.extend({},{",
          "",
          "[Removed Lines]",
          "4791:   call assert_equal(expected, getline(1, '$'))",
          "4792:   enew! | close",
          "4793: endfunc",
          "4795: func Test_cindent_52()",
          "4800:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4805:   assert_equal(expected, getline(1, '$'))",
          "4807:   bwipe!",
          "4808: enddef",
          "4810: def Test_cindent_52()",
          "4815:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "4816:   JSEND",
          "4817:   [CODE]",
          "4820:   normal gg",
          "4822:   exe \"normal =/^JSEND\\n\"",
          "4825:   JSSTART",
          "4826:   function init(options) {",
          "4827:    $(this).data(class_name+'_public',$.extend({},{",
          "",
          "[Removed Lines]",
          "4819:   call append(0, code)",
          "4821:   call search('^JSSTART')",
          "4824:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4834:   append(0, code)",
          "4836:   search('^JSSTART')",
          "4839:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "4840:   JSEND",
          "4842:   [CODE]",
          "4849:   new",
          "4850:   setl cindent ts=4 sw=4",
          "4851:   setl cino=j1,J1",
          "4854:   JSSTART",
          "4855:   (function($){",
          "4856:   function init(options) {",
          "",
          "[Removed Lines]",
          "4844:   call assert_equal(expected, getline(1, '$'))",
          "4845:   enew! | close",
          "4846: endfunc",
          "4848: func Test_cindent_53()",
          "4853:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4858:   assert_equal(expected, getline(1, '$'))",
          "4860:   bwipe!",
          "4861: enddef",
          "4863: def Test_cindent_53()",
          "4868:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "4871:   JSEND",
          "4872:   [CODE]",
          "4875:   normal gg",
          "4877:   exe \"normal =/^JSEND\\n\"",
          "4880:   JSSTART",
          "4881:   (function($){",
          "4882:    function init(options) {",
          "",
          "[Removed Lines]",
          "4874:   call append(0, code)",
          "4876:   call search('^JSSTART')",
          "4879:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4889:   append(0, code)",
          "4891:   search('^JSSTART')",
          "4894:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "4897:   JSEND",
          "4899:   [CODE]",
          "4906:   new",
          "4907:   setl cindent ts=4 sw=4",
          "4908:   setl cino=j1,J1,+2",
          "4911:   JSSTART",
          "",
          "[Removed Lines]",
          "4901:   call assert_equal(expected, getline(1, '$'))",
          "4902:   enew! | close",
          "4903: endfunc",
          "4905: func Test_cindent_54()",
          "4910:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "4915:   assert_equal(expected, getline(1, '$'))",
          "4917:   bwipe!",
          "4918: enddef",
          "4920: def Test_cindent_54()",
          "4925:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "5061:   JSEND",
          "5062:   [CODE]",
          "5065:   normal gg",
          "5067:   exe \"normal =/^JSEND\\n\"",
          "5070:   JSSTART",
          "",
          "[Removed Lines]",
          "5064:   call append(0, code)",
          "5066:   call search('^JSSTART')",
          "5069:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "5079:   append(0, code)",
          "5081:   search('^JSSTART')",
          "5084:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "5220:   JSEND",
          "5222:   [CODE]",
          "5229:   new",
          "5230:   setl cindent ts=4 sw=4",
          "5231:   setl cino&",
          "5235:   {",
          "5236:   }",
          "",
          "[Removed Lines]",
          "5224:   call assert_equal(expected, getline(1, '$'))",
          "5225:   enew! | close",
          "5226: endfunc",
          "5228: func Test_cindent_55()",
          "5233:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "5238:   assert_equal(expected, getline(1, '$'))",
          "5240:   bwipe!",
          "5241: enddef",
          "5243: def Test_cindent_55()",
          "5248:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "5246:   [CODE]",
          "5249:   normal gg",
          "5251:   exe \"normal =/end of define\\n\"",
          "5255:   {",
          "5256:   }",
          "",
          "[Removed Lines]",
          "5248:   call append(0, code)",
          "5250:   call search('start of define')",
          "5253:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "5263:   append(0, code)",
          "5265:   search('start of define')",
          "5268:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "5267:   [CODE]",
          "5274:   new",
          "5275:   setl cindent ts=4 sw=4",
          "5276:   setl cino&",
          "5279:   {",
          "5280:    a = second/*bug*/*line;",
          "5281:   }",
          "5282:   [CODE]",
          "5285:   normal gg",
          "5287:   normal ox",
          "5290:   {",
          "5291:    a = second/*bug*/*line;",
          "5292:    x",
          "5293:   }",
          "5295:   [CODE]",
          "5301: \" this was going beyond the end of the line.",
          "5303:   new",
          "5305:   set cindent",
          "5306:   norm! f:a:",
          "5308:   set cindent&",
          "5309:   bwipe!",
          "5312: \" Test for changing multiple lines (using c) with cindent",
          "5314:   new",
          "5315:   setlocal cindent",
          "5317:   normal! jc3jm = 2;",
          "5322: \" This was reading past the end of the line",
          "5324:   new",
          "5325:   sil norm o0\u000f('\\0\u000f=L",
          "5326:   bwipe!",
          "5330:   new",
          "5331:   setl cindent ts=4 sw=4",
          "5332:   setl cino=g0",
          "5333:   setl cinsd+=public\\ slots,signals",
          "5336:   class Foo",
          "5337:   {",
          "5338:   public:",
          "",
          "[Removed Lines]",
          "5269:   call assert_equal(expected, getline(1, '$'))",
          "5270:   enew! | close",
          "5271: endfunc",
          "5273: func Test_cindent_56()",
          "5278:   let code =<< trim [CODE]",
          "5284:   call append(0, code)",
          "5286:   call search('a = second')",
          "5289:   let expected =<< trim [CODE]",
          "5297:   call assert_equal(expected, getline(1, '$'))",
          "5298:   enew! | close",
          "5299: endfunc",
          "5302: func Test_cindent_case()",
          "5304:   call setline(1, 'case x: // x')",
          "5307:   call assert_equal('case x:: // x', getline(1))",
          "5310: endfunc",
          "5313: func Test_cindent_change_multline()",
          "5316:   call setline(1, ['if (a)', '{', '    i = 1;', '}'])",
          "5318:   call assert_equal(\"\\tm = 2;\", getline(2))",
          "5319:   close!",
          "5320: endfunc",
          "5323: func Test_cindent_check_funcdecl()",
          "5327: endfunc",
          "5329: func Test_cindent_scopedecls()",
          "5335:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "5283:   assert_equal(expected, getline(1, '$'))",
          "5285:   bwipe!",
          "5286: enddef",
          "5288: def Test_cindent_56()",
          "5293:   var code =<< trim [CODE]",
          "5299:   append(0, code)",
          "5301:   search('a = second')",
          "5304:   var expected =<< trim [CODE]",
          "5311:   assert_equal(expected, getline(1, '$'))",
          "5313:   bwipe!",
          "5314: enddef",
          "5317: def Test_cindent_case()",
          "5319:   setline(1, 'case x: // x')",
          "5322:   assert_equal('case x:: // x', getline(1))",
          "5325: enddef",
          "5328: def Test_cindent_change_multline()",
          "5331:   setline(1, ['if (a)', '{', '    i = 1;', '}'])",
          "5333:   assert_equal(\"\\tm = 2;\", getline(2))",
          "5334:   bwipe!",
          "5335: enddef",
          "5338: def Test_cindent_check_funcdecl()",
          "5342: enddef",
          "5344: def Test_cindent_scopedecls()",
          "5350:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "5346:   };",
          "5347:   [CODE]",
          "5350:   normal gg",
          "5351:   normal ]]=][",
          "5354:   class Foo",
          "5355:   {",
          "5356:   public:",
          "",
          "[Removed Lines]",
          "5349:   call append(0, code)",
          "5353:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "5364:   append(0, code)",
          "5368:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "5364:   };",
          "5366:   [CODE]",
          "5373:   new",
          "5374:   setl cindent ts=4 sw=4",
          "5375:   setl cino=Ps",
          "5378:   {",
          "5379:   #pragma omp parallel",
          "5380:   {",
          "",
          "[Removed Lines]",
          "5368:   call assert_equal(expected, getline(1, '$'))",
          "5369:   enew! | close",
          "5370: endfunc",
          "5372: func Test_cindent_pragma()",
          "5377:   let code =<< trim [CODE]",
          "",
          "[Added Lines]",
          "5382:   assert_equal(expected, getline(1, '$'))",
          "5384:   bwipe!",
          "5385: enddef",
          "5387: def Test_cindent_pragma()",
          "5392:   var code =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "5385:   }",
          "5386:   [CODE]",
          "5389:   normal gg",
          "5390:   normal =G",
          "5393:   {",
          "5394:  #pragma omp parallel",
          "5395:  {",
          "",
          "[Removed Lines]",
          "5388:   call append(0, code)",
          "5392:   let expected =<< trim [CODE]",
          "",
          "[Added Lines]",
          "5403:   append(0, code)",
          "5407:   var expected =<< trim [CODE]",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "5400:   }",
          "5402:   [CODE]",
          "5409:   new",
          "5410:   exe \"norm v>O'\\\\\\<C-m>-\"",
          "5411:   exe \"norm \\<C-q>=\"",
          "5412:   bwipe!",
          "5417:   new",
          "5418:   norm R/*",
          "5419:   norm o0{",
          "5420:   norm o//",
          "5421:   norm V{=",
          "5423:   bwipe!",
          "5427: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "5404:   call assert_equal(expected, getline(1, '$'))",
          "5405:   enew! | close",
          "5406: endfunc",
          "5408: func Test_backslash_at_end_of_line()",
          "5413: endfunc",
          "5415: func Test_find_brace_backwards()",
          "5416:   \" this was looking beyond the end of the line",
          "5422:   call assert_equal(['/*', '   0{', '//'], getline(1, 3))",
          "5424: endfunc",
          "",
          "[Added Lines]",
          "5418:   assert_equal(expected, getline(1, '$'))",
          "5420:   bwipe!",
          "5421: enddef",
          "5423: def Test_backslash_at_end_of_line()",
          "5428: enddef",
          "5430: def Test_find_brace_backwards()",
          "5431:   # this was looking beyond the end of the line",
          "5437:   assert_equal(['/*', '   0{', '//'], getline(1, 3))",
          "5439: enddef",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735: static int included_patches[] =",
          "738:     4993,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:     4994,",
          "",
          "---------------"
        ]
      }
    }
  ]
}