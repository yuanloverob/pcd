{
  "cve_id": "CVE-2016-5358",
  "cve_desc": "epan/dissectors/packet-pktap.c in the Ethernet dissector in Wireshark 2.x before 2.0.4 mishandles the packet-header data type, which allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "2c13e97d656c1c0ac4d76eb9d307664aae0e0cf7",
  "patch_info": {
    "commit_hash": "2c13e97d656c1c0ac4d76eb9d307664aae0e0cf7",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/2c13e97d656c1c0ac4d76eb9d307664aae0e0cf7",
    "files": [
      "epan/dissectors/packet-pktap.c",
      "epan/dissectors/packet-ppi.c",
      "epan/dissectors/packet-rpcap.c"
    ],
    "message": "The WTAP_ENCAP_ETHERNET dissector needs to be passed a struct eth_phdr.\n\nWe now require that.  Make it so.\n\nBug: 12440\nChange-Id: Iffee520976b013800699bde3c6092a3e86be0d76\nReviewed-on: https://code.wireshark.org/review/15424\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "epan/dissectors/packet-pktap.c||epan/dissectors/packet-pktap.c",
      "epan/dissectors/packet-ppi.c||epan/dissectors/packet-ppi.c",
      "epan/dissectors/packet-rpcap.c||epan/dissectors/packet-rpcap.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-pktap.c||epan/dissectors/packet-pktap.c": [
      "File: epan/dissectors/packet-pktap.c -> epan/dissectors/packet-pktap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "135:  tvbuff_t *next_tvb;",
      "136:  int offset = 0;",
      "137:  guint32 pkt_len, rectype, dlt;",
      "139:  col_set_str(pinfo->cinfo, COL_PROTOCOL, \"PKTAP\");",
      "140:  col_clear(pinfo->cinfo, COL_INFO);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:  int wtap_encap;",
      "139:  struct eth_phdr eth;",
      "140:  void *phdr;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "203:  if (rectype == PKT_REC_PACKET) {",
      "204:   next_tvb = tvb_new_subset_remaining(tvb, pkt_len);",
      "207:  }",
      "208: }",
      "",
      "[Removed Lines]",
      "205:   dissector_try_uint(wtap_encap_dissector_table,",
      "206:       wtap_pcap_encap_to_wtap_encap(dlt), next_tvb, pinfo, tree);",
      "",
      "[Added Lines]",
      "208:   wtap_encap = wtap_pcap_encap_to_wtap_encap(dlt);",
      "209:   switch (wtap_encap) {",
      "211:   case WTAP_ENCAP_ETHERNET:",
      "213:    phdr = &eth;",
      "214:    break;",
      "216:   default:",
      "217:    phdr = NULL;",
      "218:    break;",
      "219:   }",
      "220:   dissector_try_uint_new(wtap_encap_dissector_table,",
      "221:       wtap_encap, next_tvb, pinfo, tree, TRUE, phdr);",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-ppi.c||epan/dissectors/packet-ppi.c": [
      "File: epan/dissectors/packet-ppi.c -> epan/dissectors/packet-ppi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "857:     guint          last_frame  = 0;",
      "858:     gint len_remain, /*pad_len = 0,*/ ampdu_len = 0;",
      "859:     struct ieee_802_11_phdr phdr;",
      "861:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"PPI\");",
      "862:     col_clear(pinfo->cinfo, COL_INFO);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "860:     int            wtap_encap;",
      "861:     struct eth_phdr eth;",
      "862:     void          *phdrp;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1137:         call_dissector_with_data(ieee80211_radio_handle, next_tvb, pinfo, tree, &phdr);",
      "1138:     } else {",
      "1142:     }",
      "1143: }",
      "",
      "[Removed Lines]",
      "1140:         dissector_try_uint(wtap_encap_dissector_table,",
      "1141:             wtap_pcap_encap_to_wtap_encap(dlt), next_tvb, pinfo, tree);",
      "",
      "[Added Lines]",
      "1143:         wtap_encap = wtap_pcap_encap_to_wtap_encap(dlt);",
      "1144:         switch (wtap_encap) {",
      "1146:         case WTAP_ENCAP_ETHERNET:",
      "1148:             phdrp = &eth;",
      "1149:             break;",
      "1151:         default:",
      "1152:             phdrp = NULL;",
      "1153:             break;",
      "1154:         }",
      "1155:         dissector_try_uint_new(wtap_encap_dissector_table,",
      "1156:             wtap_encap, next_tvb, pinfo, tree, TRUE, phdrp);",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-rpcap.c||epan/dissectors/packet-rpcap.c": [
      "File: epan/dissectors/packet-rpcap.c -> epan/dissectors/packet-rpcap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "838:   tvbuff_t *new_tvb;",
      "839:   guint caplen, len, frame_no;",
      "840:   gint reported_length_remaining;",
      "842:   ti = proto_tree_add_item (parent_tree, hf_packet, tvb, offset, 20, ENC_NA);",
      "843:   tree = proto_item_add_subtree (ti, ett_packet);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "841:   struct eth_phdr eth;",
      "842:   void *phdr;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "875:   new_tvb = tvb_new_subset (tvb, offset, caplen, len);",
      "876:   if (decode_content && linktype != WTAP_ENCAP_UNKNOWN) {",
      "879:     if (!info_added) {",
      "",
      "[Removed Lines]",
      "877:     dissector_try_uint(wtap_encap_dissector_table, linktype, new_tvb, pinfo, top_tree);",
      "",
      "[Added Lines]",
      "879:     switch (linktype) {",
      "881:     case WTAP_ENCAP_ETHERNET:",
      "883:       phdr = &eth;",
      "884:       break;",
      "886:     default:",
      "887:       phdr = NULL;",
      "888:       break;",
      "889:     }",
      "890:     dissector_try_uint_new(wtap_encap_dissector_table, linktype, new_tvb, pinfo, top_tree, TRUE, phdr);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2895d58dc38321a72c82e1bf77d165ef4acbc73a",
      "candidate_info": {
        "commit_hash": "2895d58dc38321a72c82e1bf77d165ef4acbc73a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/2895d58dc38321a72c82e1bf77d165ef4acbc73a",
        "files": [
          "epan/dissectors/packet-aruba-erm.c",
          "epan/dissectors/packet-cisco-wids.c",
          "epan/dissectors/packet-ieee80211-airopeek.c",
          "epan/dissectors/packet-ieee80211-netmon.c",
          "epan/dissectors/packet-ieee80211-radio.c",
          "epan/dissectors/packet-ieee80211-radiotap.c",
          "epan/dissectors/packet-ieee80211.c",
          "epan/dissectors/packet-ixveriwave.c",
          "epan/dissectors/packet-peekremote.c",
          "epan/dissectors/packet-ppi.c",
          "wiretap/commview.c",
          "wiretap/netmon.c",
          "wiretap/network_instruments.c",
          "wiretap/netxray.c",
          "wiretap/pcap-common.c",
          "wiretap/peekclassic.c",
          "wiretap/peektagged.c",
          "wiretap/snoop.c",
          "wiretap/wtap.h"
        ],
        "message": "Call the \"802.11 radio information\" dissector for radio headers.\n\nHave dissectors of various forms of radio information headers in the\npackets fill in a struct ieee_802_11_phdr with radio information as\nappropriate, and call the \"802.11 radio information\" dissector rather\nthan the raw 802.11 dissector.\n\nThis means that the radio information can be found in a\nprotocol-independent and encapsulation-independent form when you're\nlooking at the packet; that information can be presented in a form\nsomewhat easier to read than the raw metadata header format.\n\nIt also enables having a single \"radio information\" tap that allows\nstatistics to handle all different sorts of radio information\nencapsulation.\n\nIn addition, it lets us clean up some of the arguments passed to the\ncommon 802.11 dissector routine, by having it pull that information from\nthe struct ieee_802_11_phdr.\n\nEnsure that the right structure gets passed to that routine, and that\nall the appropriate parts of that structure are filled in.\n\nRename the 802.11 radio protocol to \"wlan_radio\", rather than just\n\"radio\", as it's 802.11-specific.  Give all its fields \"wlan_radio.\"\nnames rather than \"wlan.\" names.\n\nChange-Id: I78d79afece0ce0cf5fc17293c1e29596413b31c8\nReviewed-on: https://code.wireshark.org/review/8992\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-aruba-erm.c||epan/dissectors/packet-aruba-erm.c",
          "epan/dissectors/packet-cisco-wids.c||epan/dissectors/packet-cisco-wids.c",
          "epan/dissectors/packet-ieee80211-airopeek.c||epan/dissectors/packet-ieee80211-airopeek.c",
          "epan/dissectors/packet-ieee80211-netmon.c||epan/dissectors/packet-ieee80211-netmon.c",
          "epan/dissectors/packet-ieee80211-radio.c||epan/dissectors/packet-ieee80211-radio.c",
          "epan/dissectors/packet-ieee80211-radiotap.c||epan/dissectors/packet-ieee80211-radiotap.c",
          "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c",
          "epan/dissectors/packet-ixveriwave.c||epan/dissectors/packet-ixveriwave.c",
          "epan/dissectors/packet-peekremote.c||epan/dissectors/packet-peekremote.c",
          "epan/dissectors/packet-ppi.c||epan/dissectors/packet-ppi.c",
          "wiretap/commview.c||wiretap/commview.c",
          "wiretap/netmon.c||wiretap/netmon.c",
          "wiretap/network_instruments.c||wiretap/network_instruments.c",
          "wiretap/netxray.c||wiretap/netxray.c",
          "wiretap/pcap-common.c||wiretap/pcap-common.c",
          "wiretap/peekclassic.c||wiretap/peekclassic.c",
          "wiretap/peektagged.c||wiretap/peektagged.c",
          "wiretap/snoop.c||wiretap/snoop.c",
          "wiretap/wtap.h||wiretap/wtap.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ppi.c||epan/dissectors/packet-ppi.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ppi.c||epan/dissectors/packet-ppi.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-aruba-erm.c||epan/dissectors/packet-aruba-erm.c": [
          "File: epan/dissectors/packet-aruba-erm.c -> epan/dissectors/packet-aruba-erm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: #include \"config.h\"",
          "92: #include <epan/packet.h>",
          "93: #include <epan/expert.h>",
          "94: #include <epan/prefs.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: #include <wiretap/wtap.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151: static dissector_handle_t aruba_erm_handle_type2;",
          "152: static dissector_handle_t aruba_erm_handle_type3;",
          "153: static dissector_handle_t aruba_erm_handle_type4;",
          "156: static dissector_handle_t peek_handle;",
          "157: static dissector_handle_t ppi_handle;",
          "158: static dissector_handle_t data_handle;",
          "",
          "[Removed Lines]",
          "154: static dissector_handle_t wlan_withoutfcs;",
          "155: static dissector_handle_t wlan_withfcs;",
          "",
          "[Added Lines]",
          "156: static dissector_handle_t wlan_radio_handle;",
          "157: static dissector_handle_t wlan_withfcs_handle;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:     return offset;",
          "179: }",
          "205: static proto_tree *",
          "206: dissect_aruba_erm_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int *offset _U_)",
          "",
          "[Removed Lines]",
          "180: static int",
          "181: dissect_aruba_erm_pcap_radio(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *aruba_erm_tree, gint offset, guint32 *signal_strength)",
          "182: {",
          "183:     proto_item *ti_data_rate;",
          "184:     guint16 data_rate;",
          "186:     data_rate = tvb_get_ntohs(tvb, offset);",
          "187:     proto_tree_add_item(aruba_erm_tree, hf_aruba_erm_data_rate, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "188:     ti_data_rate = proto_tree_add_float_format(aruba_erm_tree, hf_aruba_erm_data_rate_gen,",
          "189:                                                 tvb, 16, 2,",
          "190:                                                 (float)data_rate / 2,",
          "191:                                                 \"Data Rate: %.1f Mb/s\",",
          "192:                                                 (float)data_rate / 2);",
          "193:     PROTO_ITEM_SET_GENERATED(ti_data_rate);",
          "194:     offset += 2;",
          "196:     proto_tree_add_item(aruba_erm_tree, hf_aruba_erm_channel, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "197:     offset += 1;",
          "199:     proto_tree_add_item_ret_uint(aruba_erm_tree, hf_aruba_erm_signal_strength, tvb, offset, 1, ENC_BIG_ENDIAN, signal_strength);",
          "200:     offset += 1;",
          "202:     return offset;",
          "203: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258:     next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "262: }",
          "",
          "[Removed Lines]",
          "260:     call_dissector(wlan_withfcs, next_tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "238:     call_dissector(wlan_withfcs_handle, next_tvb, pinfo, tree);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "292:     tvbuff_t * next_tvb;",
          "293:     int offset = 0;",
          "294:     proto_tree *aruba_erm_tree;",
          "295:     guint32 signal_strength;",
          "297:     aruba_erm_tree = dissect_aruba_erm_common(tvb, pinfo, tree, &offset);",
          "300:     offset = dissect_aruba_erm_pcap(tvb, pinfo, aruba_erm_tree, offset);",
          "302:     proto_item_set_len(aruba_erm_tree, offset);",
          "303:     next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "307:     } else {",
          "309:     }",
          "311: }",
          "313: static void",
          "",
          "[Removed Lines]",
          "301:     offset = dissect_aruba_erm_pcap_radio(tvb, pinfo, aruba_erm_tree, offset, &signal_strength);",
          "306:         call_dissector(wlan_withoutfcs, next_tvb, pinfo, tree);",
          "308:         call_dissector(wlan_withfcs, next_tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "273:     struct ieee_802_11_phdr phdr;",
          "275:     proto_item *ti_data_rate;",
          "276:     guint16 data_rate;",
          "277:     guint channel;",
          "283:     phdr.decrypted = FALSE;",
          "284:     phdr.presence_flags |=",
          "285:         PHDR_802_11_HAS_DATA_RATE|",
          "286:         PHDR_802_11_HAS_CHANNEL|",
          "287:         PHDR_802_11_HAS_SIGNAL_PERCENT;",
          "288:     data_rate = tvb_get_ntohs(tvb, offset);",
          "289:     phdr.data_rate = data_rate;",
          "290:     proto_tree_add_item(aruba_erm_tree, hf_aruba_erm_data_rate, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "291:     ti_data_rate = proto_tree_add_float_format(aruba_erm_tree, hf_aruba_erm_data_rate_gen,",
          "292:                                                 tvb, 16, 2,",
          "293:                                                 (float)data_rate / 2,",
          "294:                                                 \"Data Rate: %.1f Mb/s\",",
          "295:                                                 (float)data_rate / 2);",
          "296:     PROTO_ITEM_SET_GENERATED(ti_data_rate);",
          "297:     offset += 2;",
          "299:     proto_tree_add_item_ret_uint(aruba_erm_tree, hf_aruba_erm_channel, tvb, offset, 1, ENC_BIG_ENDIAN, &channel);",
          "300:     phdr.channel = channel;",
          "301:     offset += 1;",
          "303:     proto_tree_add_item_ret_uint(aruba_erm_tree, hf_aruba_erm_signal_strength, tvb, offset, 1, ENC_BIG_ENDIAN, &signal_strength);",
          "304:     phdr.signal_percent = signal_strength;",
          "305:     offset += 1;",
          "315:     phdr.decrypted = FALSE;",
          "316:     phdr.datapad = FALSE;",
          "317:     call_dissector_with_data(wlan_radio_handle, next_tvb, pinfo, tree, &phdr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "446:     static gboolean initialized = FALSE;",
          "448:     if (!initialized) {",
          "451:         ppi_handle = find_dissector(\"ppi\");",
          "452:         peek_handle = find_dissector(\"peekremote\");",
          "453:         data_handle = find_dissector(\"data\");",
          "",
          "[Removed Lines]",
          "449:         wlan_withoutfcs = find_dissector(\"wlan_withoutfcs\");",
          "450:         wlan_withfcs = find_dissector(\"wlan_withfcs\");",
          "",
          "[Added Lines]",
          "456:         wlan_radio_handle = find_dissector(\"wlan_radio\");",
          "457:         wlan_withfcs_handle = find_dissector(\"wlan_withfcs\");",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-cisco-wids.c||epan/dissectors/packet-cisco-wids.c": [
          "File: epan/dissectors/packet-cisco-wids.c -> epan/dissectors/packet-cisco-wids.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #include \"config.h\"",
          "48: #include <epan/packet.h>",
          "49: #include <epan/exceptions.h>",
          "50: #include <epan/expert.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: #include <wiretap/wtap.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: static expert_field ie_ieee80211_subpacket = EI_INIT;",
          "71: static void",
          "72: dissect_cwids(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "",
          "[Removed Lines]",
          "69: static dissector_handle_t ieee80211_handle;",
          "",
          "[Added Lines]",
          "71: static dissector_handle_t ieee80211_radio_handle;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:  cwids_tree = NULL;",
          "85:  while(tvb_reported_length_remaining(tvb, offset) > 0) {",
          "86:   ti = proto_tree_add_item(tree, proto_cwids, tvb, offset, 28, ENC_NA);",
          "87:   cwids_tree = proto_item_add_subtree(ti, ett_cwids);",
          "89:   proto_tree_add_item(cwids_tree, hf_cwids_version, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "90:   offset += 2;",
          "91:   proto_tree_add_item(cwids_tree, hf_cwids_unknown1, tvb, offset, 7, ENC_NA);",
          "92:   offset += 7;",
          "93:   proto_tree_add_item(cwids_tree, hf_cwids_channel, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "94:   offset += 1;",
          "95:   proto_tree_add_item(cwids_tree, hf_cwids_unknown2, tvb, offset, 6, ENC_NA);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:   struct ieee_802_11_phdr phdr;",
          "94:   phdr.decrypted = FALSE;",
          "95:   phdr.datapad = FALSE;",
          "96:   phdr.presence_flags = PHDR_802_11_HAS_CHANNEL;",
          "101:   phdr.channel = tvb_get_guint8(tvb, offset);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:   wlan_tvb = tvb_new_subset_length(tvb, offset, capturelen);",
          "107:   TRY {",
          "109:   } CATCH_BOUNDS_ERRORS {",
          "110:    show_exception(wlan_tvb, pinfo, tree, EXCEPT_CODE, GET_MESSAGE);",
          "",
          "[Removed Lines]",
          "108:    call_dissector(ieee80211_handle, wlan_tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "117:    call_dissector_with_data(ieee80211_radio_handle, wlan_tvb, pinfo, tree, &phdr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "187:  if (!initialized) {",
          "188:   cwids_handle = create_dissector_handle(dissect_cwids, proto_cwids);",
          "189:   dissector_add_for_decode_as(\"udp.port\", cwids_handle);",
          "191:   initialized = TRUE;",
          "192:  } else {",
          "193:   if (saved_udp_port != 0) {",
          "",
          "[Removed Lines]",
          "190:   ieee80211_handle = find_dissector(\"wlan_withoutfcs\");",
          "",
          "[Added Lines]",
          "199:   ieee80211_radio_handle = find_dissector(\"wlan_radio\");",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ieee80211-airopeek.c||epan/dissectors/packet-ieee80211-airopeek.c": [
          "File: epan/dissectors/packet-ieee80211-airopeek.c -> epan/dissectors/packet-ieee80211-airopeek.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: void proto_register_ieee80211_airopeek(void);",
          "30: void proto_reg_handoff_ieee80211_airopeek(void);",
          "34: static int proto_airopeek = -1;",
          "",
          "[Removed Lines]",
          "32: static dissector_handle_t ieee80211_handle;",
          "",
          "[Added Lines]",
          "32: static dissector_handle_t ieee80211_radio_handle;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   guint8 data_rate;",
          "48:   guint8 signal_level;",
          "49:   tvbuff_t *next_tvb;",
          "51:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"AiroPeek\");",
          "52:   col_clear(pinfo->cinfo, COL_INFO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:   struct ieee_802_11_phdr phdr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:     airopeek_tree = proto_item_add_subtree(ti, ett_airopeek);",
          "58:   }",
          "60:   data_rate = tvb_get_guint8(tvb, 0);",
          "62:   col_add_fstr(pinfo->cinfo, COL_TX_RATE, \"%u.%u\",",
          "63:                data_rate / 2,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:   phdr.fcs_len = 0;",
          "63:   phdr.decrypted = FALSE;",
          "64:   phdr.datapad = FALSE;",
          "65:   phdr.presence_flags =",
          "66:       PHDR_802_11_HAS_CHANNEL|",
          "67:       PHDR_802_11_HAS_DATA_RATE|",
          "68:       PHDR_802_11_HAS_SIGNAL_PERCENT;",
          "71:   phdr.data_rate = data_rate;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:                                  data_rate & 1 ? 5 : 0);",
          "71:   }",
          "73:   if (tree)",
          "74:     proto_tree_add_item(airopeek_tree, hf_channel, tvb, 1, 1, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:   phdr.channel = tvb_get_guint8(tvb, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "87:   col_add_fstr(pinfo->cinfo, COL_RSSI, \"%u%%\", signal_level);",
          "89:   proto_tree_add_uint_format_value(airopeek_tree, hf_signal_strength, tvb, 2, 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:   phdr.signal_percent = signal_level;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "95:   pinfo->current_proto = \"IEEE 802.11\";",
          "96:   next_tvb = tvb_new_subset_remaining(tvb, 4);",
          "98: }",
          "100: void proto_register_ieee80211_airopeek(void)",
          "",
          "[Removed Lines]",
          "97:   call_dissector(ieee80211_handle, next_tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "110:   call_dissector_with_data(ieee80211_radio_handle, next_tvb, pinfo, tree, &phdr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "132:   airopeek_handle = create_dissector_handle(dissect_airopeek, proto_airopeek);",
          "133:   dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_IEEE_802_11_AIROPEEK,",
          "134:                      airopeek_handle);",
          "136: }",
          "",
          "[Removed Lines]",
          "135:   ieee80211_handle = find_dissector(\"wlan\");",
          "",
          "[Added Lines]",
          "148:   ieee80211_radio_handle = find_dissector(\"wlan_radio\");",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ieee80211-netmon.c||epan/dissectors/packet-ieee80211-netmon.c": [
          "File: epan/dissectors/packet-ieee80211-netmon.c -> epan/dissectors/packet-ieee80211-netmon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: static gint ett_netmon_802_11 = -1;",
          "65: static gint ett_netmon_802_11_op_mode = -1;",
          "69: static int",
          "71: {",
          "73:   proto_item *ti;",
          "74:   tvbuff_t   *next_tvb;",
          "75:   int         offset;",
          "",
          "[Removed Lines]",
          "67: static dissector_handle_t ieee80211_handle;",
          "70: dissect_netmon_802_11(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "72:   proto_tree *wlan_tree, *opmode_tree;",
          "",
          "[Added Lines]",
          "67: static dissector_handle_t ieee80211_radio_handle;",
          "70: dissect_netmon_802_11(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "72:   struct ieee_802_11_phdr *phdr = (struct ieee_802_11_phdr *)data;",
          "73:   proto_tree *wlan_tree = NULL, *opmode_tree;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:   }",
          "106:                         ENC_LITTLE_ENDIAN);",
          "124:     offset += 4;",
          "131:         proto_tree_add_uint(wlan_tree, hf_netmon_802_11_channel,",
          "132:                             tvb, offset, 4, channel);",
          "137:       }",
          "140:       proto_tree_add_int_format_value(wlan_tree, hf_netmon_802_11_rssi,",
          "141:                                       tvb, offset, 4, rssi,",
          "142:                                       \"%d dBm\", rssi);",
          "165: skip:",
          "166:   offset = length;",
          "169:   next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "171:   return offset;",
          "172: }",
          "",
          "[Removed Lines]",
          "101:   if (tree) {",
          "102:     ti = proto_tree_add_item(tree, proto_netmon_802_11, tvb, 0, length,",
          "103:                              ENC_NA);",
          "104:     wlan_tree = proto_item_add_subtree(ti, ett_netmon_802_11);",
          "105:     proto_tree_add_item(wlan_tree, hf_netmon_802_11_version, tvb, offset, 1,",
          "107:     offset += 1;",
          "108:     proto_tree_add_item(wlan_tree, hf_netmon_802_11_length, tvb, offset, 2,",
          "109:                         ENC_LITTLE_ENDIAN);",
          "110:     offset += 2;",
          "111:     ti = proto_tree_add_item(wlan_tree, hf_netmon_802_11_op_mode, tvb, offset,",
          "112:                         4, ENC_LITTLE_ENDIAN);",
          "113:     opmode_tree = proto_item_add_subtree(ti, ett_netmon_802_11_op_mode);",
          "114:     proto_tree_add_item(opmode_tree, hf_netmon_802_11_op_mode_sta, tvb, offset,",
          "115:                         4, ENC_LITTLE_ENDIAN);",
          "116:     proto_tree_add_item(opmode_tree, hf_netmon_802_11_op_mode_ap, tvb, offset,",
          "117:                         4, ENC_LITTLE_ENDIAN);",
          "118:     proto_tree_add_item(opmode_tree, hf_netmon_802_11_op_mode_sta_ext, tvb,",
          "119:                         offset, 4, ENC_LITTLE_ENDIAN);",
          "120:     proto_tree_add_item(opmode_tree, hf_netmon_802_11_op_mode_mon, tvb, offset,",
          "121:                         4, ENC_LITTLE_ENDIAN);",
          "122:     offset += 4;",
          "123:     flags = tvb_get_letohl(tvb, offset);",
          "125:     if (flags != 0xffffffff) {",
          "126:       proto_tree_add_item(wlan_tree, hf_netmon_802_11_phy_type, tvb, offset, 4,",
          "127:                           ENC_LITTLE_ENDIAN);",
          "128:       offset += 4;",
          "129:       channel = tvb_get_letohl(tvb, offset);",
          "130:       if (channel < 1000) {",
          "133:       } else {",
          "134:         proto_tree_add_uint_format_value(wlan_tree, hf_netmon_802_11_frequency,",
          "135:                                          tvb, offset, 4, channel,",
          "136:                                          \"%u Mhz\", channel);",
          "138:       offset += 4;",
          "139:       rssi = tvb_get_letohl(tvb, offset);",
          "143:       offset += 4;",
          "144:       rate = tvb_get_guint8(tvb, offset);",
          "145:       if (rate == 0) {",
          "146:         proto_tree_add_uint_format_value(wlan_tree, hf_netmon_802_11_datarate,",
          "147:                                          tvb, offset, 1, rate,",
          "148:                                          \"Unknown\");",
          "149:       } else {",
          "150:         proto_tree_add_uint_format_value(wlan_tree, hf_netmon_802_11_datarate,",
          "151:                                          tvb, offset, 1, rate,",
          "152:                                          \"%f Mb/s\", rate*.5);",
          "153:       }",
          "154:       offset += 1;",
          "155:     } else",
          "156:       offset += 13;",
          "157:     proto_tree_add_item(wlan_tree, hf_netmon_802_11_timestamp, tvb, offset, 8,",
          "158:                         ENC_LITTLE_ENDIAN);",
          "161:   }",
          "170:   call_dissector(ieee80211_handle, next_tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "102:   ti = proto_tree_add_item(tree, proto_netmon_802_11, tvb, 0, length,",
          "103:                            ENC_NA);",
          "104:   wlan_tree = proto_item_add_subtree(ti, ett_netmon_802_11);",
          "105:   proto_tree_add_item(wlan_tree, hf_netmon_802_11_version, tvb, offset, 1,",
          "106:                       ENC_LITTLE_ENDIAN);",
          "107:   offset += 1;",
          "108:   proto_tree_add_item(wlan_tree, hf_netmon_802_11_length, tvb, offset, 2,",
          "109:                       ENC_LITTLE_ENDIAN);",
          "110:   offset += 2;",
          "111:   ti = proto_tree_add_item(wlan_tree, hf_netmon_802_11_op_mode, tvb, offset,",
          "112:                       4, ENC_LITTLE_ENDIAN);",
          "113:   opmode_tree = proto_item_add_subtree(ti, ett_netmon_802_11_op_mode);",
          "114:   proto_tree_add_item(opmode_tree, hf_netmon_802_11_op_mode_sta, tvb, offset,",
          "115:                       4, ENC_LITTLE_ENDIAN);",
          "116:   proto_tree_add_item(opmode_tree, hf_netmon_802_11_op_mode_ap, tvb, offset,",
          "117:                       4, ENC_LITTLE_ENDIAN);",
          "118:   proto_tree_add_item(opmode_tree, hf_netmon_802_11_op_mode_sta_ext, tvb,",
          "119:                       offset, 4, ENC_LITTLE_ENDIAN);",
          "120:   proto_tree_add_item(opmode_tree, hf_netmon_802_11_op_mode_mon, tvb, offset,",
          "121:                       4, ENC_LITTLE_ENDIAN);",
          "122:   offset += 4;",
          "123:   flags = tvb_get_letohl(tvb, offset);",
          "124:   offset += 4;",
          "125:   if (flags != 0xffffffff) {",
          "126:     proto_tree_add_item(wlan_tree, hf_netmon_802_11_phy_type, tvb, offset, 4,",
          "129:     channel = tvb_get_letohl(tvb, offset);",
          "130:     if (channel < 1000) {",
          "131:       if (channel == 0) {",
          "132:         proto_tree_add_uint_format_value(wlan_tree, hf_netmon_802_11_channel,",
          "133:                                          tvb, offset, 4, channel,",
          "134:                                          \"Unknown\");",
          "135:       } else {",
          "136:         phdr->presence_flags |= PHDR_802_11_HAS_CHANNEL;",
          "137:         phdr->channel = channel;",
          "141:     } else {",
          "142:       phdr->presence_flags |= PHDR_802_11_HAS_FREQUENCY;",
          "143:       phdr->frequency = channel;",
          "144:       proto_tree_add_uint_format_value(wlan_tree, hf_netmon_802_11_frequency,",
          "145:                                        tvb, offset, 4, channel,",
          "146:                                        \"%u Mhz\", channel);",
          "147:     }",
          "148:     offset += 4;",
          "149:     rssi = tvb_get_letohl(tvb, offset);",
          "150:     if (rssi == 0) {",
          "151:       proto_tree_add_int_format_value(wlan_tree, hf_netmon_802_11_rssi,",
          "152:                                       tvb, offset, 4, rssi,",
          "153:                                       \"Unknown\");",
          "154:     } else {",
          "155:       phdr->presence_flags |= PHDR_802_11_HAS_SIGNAL_DBM;",
          "156:       phdr->signal_dbm = rssi;",
          "160:     }",
          "161:     offset += 4;",
          "162:     rate = tvb_get_guint8(tvb, offset);",
          "163:     if (rate == 0) {",
          "164:       proto_tree_add_uint_format_value(wlan_tree, hf_netmon_802_11_datarate,",
          "165:                                        tvb, offset, 1, rate,",
          "166:                                        \"Unknown\");",
          "167:     } else {",
          "168:       phdr->presence_flags |= PHDR_802_11_HAS_DATA_RATE;",
          "169:       phdr->data_rate = rate;",
          "170:       proto_tree_add_uint_format_value(wlan_tree, hf_netmon_802_11_datarate,",
          "171:                                        tvb, offset, 1, rate,",
          "172:                                        \"%f Mb/s\", rate*.5);",
          "173:     }",
          "174:     offset += 1;",
          "175:   } else",
          "176:     offset += 13;",
          "177:   phdr->presence_flags |= PHDR_802_11_HAS_TSF_TIMESTAMP;",
          "178:   phdr->tsf_timestamp = tvb_get_letoh64(tvb, offset);",
          "179:   proto_tree_add_item(wlan_tree, hf_netmon_802_11_timestamp, tvb, offset, 8,",
          "180:                       ENC_LITTLE_ENDIAN);",
          "188:   call_dissector_with_data(ieee80211_radio_handle, next_tvb, pinfo, tree, phdr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235: {",
          "236:   dissector_handle_t netmon_802_11_handle;",
          "240:   netmon_802_11_handle = new_create_dissector_handle(dissect_netmon_802_11,",
          "241:                                                  proto_netmon_802_11);",
          "242:   dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_IEEE_802_11_NETMON, netmon_802_11_handle);",
          "",
          "[Removed Lines]",
          "239:   ieee80211_handle = find_dissector(\"wlan\");",
          "",
          "[Added Lines]",
          "257:   ieee80211_radio_handle = find_dissector(\"wlan_radio\");",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ieee80211-radio.c||epan/dissectors/packet-ieee80211-radio.c": [
          "File: epan/dissectors/packet-ieee80211-radio.c -> epan/dissectors/packet-ieee80211-radio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: void proto_register_ieee80211_radio(void);",
          "33: void proto_reg_handoff_ieee80211_radio(void);",
          "35: static dissector_handle_t ieee80211_handle;",
          "53: static const value_string bandwidth_vals[] = {",
          "54:     { PHDR_802_11_BANDWIDTH_20_MHZ, \"20 MHz\" },",
          "",
          "[Removed Lines]",
          "37: static int proto_radio = -1;",
          "42: static int hf_data_rate = -1;",
          "43: static int hf_mcs_index = -1;",
          "44: static int hf_bandwidth = -1;",
          "45: static int hf_short_gi = -1;",
          "46: static int hf_channel = -1;",
          "47: static int hf_frequency = -1;",
          "48: static int hf_signal_percent = -1;",
          "49: static int hf_signal_dbm = -1;",
          "50: static int hf_noise_percent = -1;",
          "51: static int hf_noise_dbm = -1;",
          "",
          "[Added Lines]",
          "35: static dissector_handle_t wlan_radio_handle;",
          "38: static int proto_wlan_radio = -1;",
          "43: static int hf_wlan_radio_data_rate = -1;",
          "44: static int hf_wlan_radio_mcs_index = -1;",
          "45: static int hf_wlan_radio_bandwidth = -1;",
          "46: static int hf_wlan_radio_short_gi = -1;",
          "47: static int hf_wlan_radio_channel = -1;",
          "48: static int hf_wlan_radio_frequency = -1;",
          "49: static int hf_wlan_radio_signal_percent = -1;",
          "50: static int hf_wlan_radio_signal_dbm = -1;",
          "51: static int hf_wlan_radio_noise_percent = -1;",
          "52: static int hf_wlan_radio_noise_dbm = -1;",
          "53: static int hf_wlan_radio_timestamp = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "458:   },",
          "459: };",
          "467: static int",
          "469: {",
          "470:   proto_item *ti = NULL;",
          "471:   proto_tree *radio_tree = NULL;",
          "472:   float data_rate = 0.0f;",
          "",
          "[Removed Lines]",
          "461: static gint ett_radio = -1;",
          "468: dissect_radio (tvbuff_t * tvb, packet_info * pinfo, proto_tree * tree, void *data)",
          "",
          "[Added Lines]",
          "463: static gint ett_wlan_radio = -1;",
          "470: dissect_wlan_radio (tvbuff_t * tvb, packet_info * pinfo, proto_tree * tree, void *data)",
          "472:   struct ieee_802_11_phdr *phdr = (struct ieee_802_11_phdr *)data;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "476:   col_clear(pinfo->cinfo, COL_INFO);",
          "481:     have_data_rate = TRUE;",
          "482:   } else {",
          "",
          "[Removed Lines]",
          "479:   if (pinfo->pseudo_header->ieee_802_11.presence_flags & PHDR_802_11_HAS_DATA_RATE) {",
          "480:     data_rate = pinfo->pseudo_header->ieee_802_11.data_rate * 0.5f;",
          "",
          "[Added Lines]",
          "482:   if (phdr->presence_flags & PHDR_802_11_HAS_DATA_RATE) {",
          "483:     data_rate = phdr->data_rate * 0.5f;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "489:     guint bandwidth_40;",
          "492:       bandwidth_40 =",
          "494:          1 : 0;",
          "497:         have_data_rate = TRUE;",
          "498:       }",
          "499:     }",
          "",
          "[Removed Lines]",
          "491:     if ((pinfo->pseudo_header->ieee_802_11.presence_flags & PHDR_802_11_ALL_MCS_FIELDS) == PHDR_802_11_ALL_MCS_FIELDS) {",
          "493:         (pinfo->pseudo_header->ieee_802_11.bandwidth == PHDR_802_11_BANDWIDTH_40_MHZ) ?",
          "495:       if (pinfo->pseudo_header->ieee_802_11.mcs_index < MAX_MCS_INDEX) {",
          "496:         data_rate = ieee80211_float_htrates[pinfo->pseudo_header->ieee_802_11.mcs_index][bandwidth_40][pinfo->pseudo_header->ieee_802_11.short_gi];",
          "",
          "[Added Lines]",
          "494:     if ((phdr->presence_flags & PHDR_802_11_ALL_MCS_FIELDS) == PHDR_802_11_ALL_MCS_FIELDS) {",
          "496:         (phdr->bandwidth == PHDR_802_11_BANDWIDTH_40_MHZ) ?",
          "498:       if (phdr->mcs_index < MAX_MCS_INDEX) {",
          "499:         data_rate = ieee80211_float_htrates[phdr->mcs_index][bandwidth_40][phdr->short_gi];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "503:   if (have_data_rate)",
          "504:     col_add_fstr(pinfo->cinfo, COL_TX_RATE, \"%.1f\", data_rate);",
          "",
          "[Removed Lines]",
          "506:   if (pinfo->pseudo_header->ieee_802_11.presence_flags & PHDR_802_11_HAS_SIGNAL_PERCENT) {",
          "",
          "[Added Lines]",
          "509:   if (phdr->presence_flags & PHDR_802_11_HAS_SIGNAL_PERCENT) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "520:     col_add_fstr(pinfo->cinfo, COL_RSSI, \"%u%%\",",
          "522:   }",
          "524:   if (tree) {",
          "531:     }",
          "536:     }",
          "541:     }",
          "543:     if (have_data_rate) {",
          "545:                data_rate,",
          "546:                \"%.1f Mb/s\",",
          "547:                data_rate);",
          "548:     }",
          "553:     }",
          "558:               \"%u MHz\",",
          "560:     }",
          "565:               \"%u%%\",",
          "567:     }",
          "572:               \"%d dBm\",",
          "574:     }",
          "579:               \"%u%%\",",
          "581:     }",
          "586:               \"%d dBm\",",
          "588:     }",
          "589:   }",
          "592:   pinfo->current_proto = \"IEEE 802.11\";",
          "593:   return call_dissector_with_data(ieee80211_handle, tvb, pinfo, tree, data);",
          "594: }",
          "599:       \"Data rate (bits/s)\", HFILL }},",
          "603:       NULL, HFILL }},",
          "607:       NULL, HFILL }},",
          "611:       NULL, HFILL }},",
          "615:       \"802.11 channel number that this frame was sent/received on\", HFILL }},",
          "619:       \"Center frequency of the 802.11 channel that this frame was sent/received on\", HFILL }},",
          "623:       \"Signal strength, as percentage of maximum RSSI\", HFILL }},",
          "627:       NULL, HFILL }},",
          "631:       NULL, HFILL }},",
          "635:       NULL, HFILL }},",
          "636: };",
          "638: static gint *tree_array[] = {",
          "640: };",
          "642: void proto_register_ieee80211_radio(void)",
          "643: {",
          "647:   proto_register_subtree_array(tree_array, array_length(tree_array));",
          "648: }",
          "650: void proto_reg_handoff_ieee80211_radio(void)",
          "651: {",
          "656:   dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_IEEE_802_11_WITH_RADIO,",
          "658:   ieee80211_handle = find_dissector(\"wlan\");",
          "659: }",
          "",
          "[Removed Lines]",
          "521:           pinfo->pseudo_header->ieee_802_11.signal_percent);",
          "525:     ti = proto_tree_add_item(tree, proto_radio, tvb, 0, 0, ENC_NA);",
          "526:     radio_tree = proto_item_add_subtree (ti, ett_radio);",
          "528:     if (pinfo->pseudo_header->ieee_802_11.presence_flags & PHDR_802_11_HAS_MCS_INDEX) {",
          "529:       proto_tree_add_uint(radio_tree, hf_mcs_index, tvb, 0, 0,",
          "530:                pinfo->pseudo_header->ieee_802_11.mcs_index);",
          "533:     if (pinfo->pseudo_header->ieee_802_11.presence_flags & PHDR_802_11_HAS_BANDWIDTH) {",
          "534:       proto_tree_add_uint(radio_tree, hf_bandwidth, tvb, 0, 0,",
          "535:                pinfo->pseudo_header->ieee_802_11.bandwidth);",
          "538:     if (pinfo->pseudo_header->ieee_802_11.presence_flags & PHDR_802_11_HAS_SHORT_GI) {",
          "539:       proto_tree_add_boolean(radio_tree, hf_short_gi, tvb, 0, 0,",
          "540:                pinfo->pseudo_header->ieee_802_11.short_gi);",
          "544:       proto_tree_add_float_format_value(radio_tree, hf_data_rate, tvb, 0, 0,",
          "550:     if (pinfo->pseudo_header->ieee_802_11.presence_flags & PHDR_802_11_HAS_CHANNEL) {",
          "551:       proto_tree_add_uint(radio_tree, hf_channel, tvb, 0, 0,",
          "552:               pinfo->pseudo_header->ieee_802_11.channel);",
          "555:     if (pinfo->pseudo_header->ieee_802_11.presence_flags & PHDR_802_11_HAS_FREQUENCY) {",
          "556:       proto_tree_add_uint_format_value(radio_tree, hf_frequency, tvb, 0, 0,",
          "557:               pinfo->pseudo_header->ieee_802_11.frequency,",
          "559:               pinfo->pseudo_header->ieee_802_11.frequency);",
          "562:     if (pinfo->pseudo_header->ieee_802_11.presence_flags & PHDR_802_11_HAS_SIGNAL_PERCENT) {",
          "563:       proto_tree_add_uint_format_value(radio_tree, hf_signal_percent, tvb, 0, 0,",
          "564:               pinfo->pseudo_header->ieee_802_11.signal_percent,",
          "566:               pinfo->pseudo_header->ieee_802_11.signal_percent);",
          "569:     if (pinfo->pseudo_header->ieee_802_11.presence_flags & PHDR_802_11_HAS_SIGNAL_DBM) {",
          "570:       proto_tree_add_int_format_value(radio_tree, hf_signal_dbm, tvb, 0, 0,",
          "571:               pinfo->pseudo_header->ieee_802_11.signal_dbm,",
          "573:               pinfo->pseudo_header->ieee_802_11.signal_dbm);",
          "576:     if (pinfo->pseudo_header->ieee_802_11.presence_flags & PHDR_802_11_HAS_NOISE_PERCENT) {",
          "577:       proto_tree_add_uint_format_value(radio_tree, hf_noise_percent, tvb, 0, 0,",
          "578:               pinfo->pseudo_header->ieee_802_11.noise_percent,",
          "580:               pinfo->pseudo_header->ieee_802_11.noise_percent);",
          "583:     if (pinfo->pseudo_header->ieee_802_11.presence_flags & PHDR_802_11_HAS_NOISE_DBM) {",
          "584:       proto_tree_add_int_format_value(radio_tree, hf_noise_dbm, tvb, 0, 0,",
          "585:               pinfo->pseudo_header->ieee_802_11.noise_dbm,",
          "587:               pinfo->pseudo_header->ieee_802_11.noise_dbm);",
          "596: static hf_register_info hf_radio[] = {",
          "597:     {&hf_data_rate,",
          "598:      {\"Data rate\", \"wlan.data_rate\", FT_FLOAT, BASE_NONE, NULL, 0,",
          "601:     {&hf_mcs_index,",
          "602:      {\"MCS index\", \"wlan.mcs_index\", FT_UINT32, BASE_DEC, NULL, 0,",
          "605:     {&hf_bandwidth,",
          "606:      {\"Bandwidth\", \"wlan.bandwidth\", FT_UINT32, BASE_DEC, VALS(bandwidth_vals), 0,",
          "609:     {&hf_short_gi,",
          "610:      {\"Short GI\", \"wlan.short_gi\", FT_BOOLEAN, 0, NULL, 0,",
          "613:     {&hf_channel,",
          "614:      {\"Channel\", \"wlan.channel\", FT_UINT8, BASE_DEC, NULL, 0,",
          "617:     {&hf_frequency,",
          "618:      {\"Frequency\", \"wlan.frequency\", FT_UINT16, BASE_DEC, NULL, 0,",
          "621:     {&hf_signal_percent,",
          "622:      {\"Signal strength (percentage)\", \"wlan.signal_dbm\", FT_UINT8, BASE_DEC, NULL, 0,",
          "625:     {&hf_signal_dbm,",
          "626:      {\"Signal strength (dBm)\", \"wlan.signal_dbm\", FT_INT8, BASE_DEC, NULL, 0,",
          "629:     {&hf_noise_percent,",
          "630:      {\"Noise level (percentage)\", \"wlan.noise_percentage\", FT_UINT8, BASE_DEC, NULL, 0,",
          "633:     {&hf_noise_dbm,",
          "634:      {\"Noise level (dBm)\", \"wlan.noise_dbm\", FT_INT8, BASE_DEC, NULL, 0,",
          "639:   &ett_radio",
          "644:   proto_radio = proto_register_protocol(\"802.11 radio information\", \"Radio\",",
          "645:                                         \"radio\");",
          "646:   proto_register_field_array(proto_radio, hf_radio, array_length(hf_radio));",
          "652:   dissector_handle_t radio_handle;",
          "655:   radio_handle = new_create_dissector_handle(dissect_radio, proto_radio);",
          "657:                      radio_handle);",
          "",
          "[Added Lines]",
          "524:           phdr->signal_percent);",
          "528:     ti = proto_tree_add_item(tree, proto_wlan_radio, tvb, 0, 0, ENC_NA);",
          "529:     radio_tree = proto_item_add_subtree (ti, ett_wlan_radio);",
          "531:     if (phdr->presence_flags & PHDR_802_11_HAS_MCS_INDEX) {",
          "532:       proto_tree_add_uint(radio_tree, hf_wlan_radio_mcs_index, tvb, 0, 0,",
          "533:                phdr->mcs_index);",
          "536:     if (phdr->presence_flags & PHDR_802_11_HAS_BANDWIDTH) {",
          "537:       proto_tree_add_uint(radio_tree, hf_wlan_radio_bandwidth, tvb, 0, 0,",
          "538:                phdr->bandwidth);",
          "541:     if (phdr->presence_flags & PHDR_802_11_HAS_SHORT_GI) {",
          "542:       proto_tree_add_boolean(radio_tree, hf_wlan_radio_short_gi, tvb, 0, 0,",
          "543:                phdr->short_gi);",
          "547:       proto_tree_add_float_format_value(radio_tree, hf_wlan_radio_data_rate, tvb, 0, 0,",
          "553:     if (phdr->presence_flags & PHDR_802_11_HAS_CHANNEL) {",
          "554:       proto_tree_add_uint(radio_tree, hf_wlan_radio_channel, tvb, 0, 0,",
          "555:               phdr->channel);",
          "558:     if (phdr->presence_flags & PHDR_802_11_HAS_FREQUENCY) {",
          "559:       proto_tree_add_uint_format_value(radio_tree, hf_wlan_radio_frequency, tvb, 0, 0,",
          "560:               phdr->frequency,",
          "562:               phdr->frequency);",
          "565:     if (phdr->presence_flags & PHDR_802_11_HAS_SIGNAL_PERCENT) {",
          "566:       proto_tree_add_uint_format_value(radio_tree, hf_wlan_radio_signal_percent, tvb, 0, 0,",
          "567:               phdr->signal_percent,",
          "569:               phdr->signal_percent);",
          "572:     if (phdr->presence_flags & PHDR_802_11_HAS_SIGNAL_DBM) {",
          "573:       proto_tree_add_int_format_value(radio_tree, hf_wlan_radio_signal_dbm, tvb, 0, 0,",
          "574:               phdr->signal_dbm,",
          "576:               phdr->signal_dbm);",
          "579:     if (phdr->presence_flags & PHDR_802_11_HAS_NOISE_PERCENT) {",
          "580:       proto_tree_add_uint_format_value(radio_tree, hf_wlan_radio_noise_percent, tvb, 0, 0,",
          "581:               phdr->noise_percent,",
          "583:               phdr->noise_percent);",
          "586:     if (phdr->presence_flags & PHDR_802_11_HAS_NOISE_DBM) {",
          "587:       proto_tree_add_int_format_value(radio_tree, hf_wlan_radio_noise_dbm, tvb, 0, 0,",
          "588:               phdr->noise_dbm,",
          "590:               phdr->noise_dbm);",
          "591:     }",
          "593:     if (phdr->presence_flags & PHDR_802_11_HAS_TSF_TIMESTAMP) {",
          "594:       proto_tree_add_uint64(radio_tree, hf_wlan_radio_timestamp, tvb, 0, 0,",
          "595:               phdr->tsf_timestamp);",
          "604: static hf_register_info hf_wlan_radio[] = {",
          "605:     {&hf_wlan_radio_data_rate,",
          "606:      {\"Data rate\", \"wlan_radio.data_rate\", FT_FLOAT, BASE_NONE, NULL, 0,",
          "609:     {&hf_wlan_radio_mcs_index,",
          "610:      {\"MCS index\", \"wlan_radio.mcs_index\", FT_UINT32, BASE_DEC, NULL, 0,",
          "613:     {&hf_wlan_radio_bandwidth,",
          "614:      {\"Bandwidth\", \"wlan_radio.bandwidth\", FT_UINT32, BASE_DEC, VALS(bandwidth_vals), 0,",
          "617:     {&hf_wlan_radio_short_gi,",
          "618:      {\"Short GI\", \"wlan_radio.short_gi\", FT_BOOLEAN, 0, NULL, 0,",
          "621:     {&hf_wlan_radio_channel,",
          "622:      {\"Channel\", \"wlan_radio.channel\", FT_UINT8, BASE_DEC, NULL, 0,",
          "625:     {&hf_wlan_radio_frequency,",
          "626:      {\"Frequency\", \"wlan_radio.frequency\", FT_UINT16, BASE_DEC, NULL, 0,",
          "629:     {&hf_wlan_radio_signal_percent,",
          "630:      {\"Signal strength (percentage)\", \"wlan_radio.signal_dbm\", FT_UINT8, BASE_DEC, NULL, 0,",
          "633:     {&hf_wlan_radio_signal_dbm,",
          "634:      {\"Signal strength (dBm)\", \"wlan_radio.signal_dbm\", FT_INT8, BASE_DEC, NULL, 0,",
          "635:       NULL, HFILL }},",
          "637:     {&hf_wlan_radio_noise_percent,",
          "638:      {\"Noise level (percentage)\", \"wlan_radio.noise_percentage\", FT_UINT8, BASE_DEC, NULL, 0,",
          "641:     {&hf_wlan_radio_noise_dbm,",
          "642:      {\"Noise level (dBm)\", \"wlan_radio.noise_dbm\", FT_INT8, BASE_DEC, NULL, 0,",
          "645:     {&hf_wlan_radio_timestamp,",
          "646:      {\"TSF timestamp\", \"wlan_radio.timestamp\", FT_UINT64, BASE_DEC, NULL, 0,",
          "651:   &ett_wlan_radio",
          "656:   proto_wlan_radio = proto_register_protocol(\"802.11 radio information\", \"802.11 Radio\",",
          "657:                                              \"wlan_radio\");",
          "658:   proto_register_field_array(proto_wlan_radio, hf_wlan_radio, array_length(hf_wlan_radio));",
          "661:   wlan_radio_handle = new_register_dissector(\"wlan_radio\", dissect_wlan_radio, proto_wlan_radio);",
          "668:                      wlan_radio_handle);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ieee80211-radiotap.c||epan/dissectors/packet-ieee80211-radiotap.c": [
          "File: epan/dissectors/packet-ieee80211-radiotap.c -> epan/dissectors/packet-ieee80211-radiotap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "215: static expert_field ei_radiotap_present_reserved = EI_INIT;",
          "216: static expert_field ei_radiotap_present = EI_INIT;",
          "221: static int radiotap_tap = -1;",
          "",
          "[Removed Lines]",
          "218: static dissector_handle_t ieee80211_handle;",
          "219: static dissector_handle_t ieee80211_datapad_handle;",
          "",
          "[Added Lines]",
          "218: static dissector_handle_t ieee80211_radio_handle;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "609:  phdr.fcs_len = -1;",
          "610:  phdr.decrypted = FALSE;",
          "611:  phdr.presence_flags = 0;",
          "613:  col_set_str(pinfo->cinfo, COL_PROTOCOL, \"WLAN\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610:  phdr.datapad = FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "827:   case IEEE80211_RADIOTAP_TSFT:",
          "828:    radiotap_info->tsft = tvb_get_letoh64(tvb, offset);",
          "829:    if (tree) {",
          "830:     proto_tree_add_uint64(radiotap_tree,",
          "831:             hf_radiotap_mactime, tvb,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "829:    phdr.tsf_timestamp = radiotap_info->tsft;",
          "830:    phdr.presence_flags |= PHDR_802_11_HAS_TSF_TIMESTAMP;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "837:   case IEEE80211_RADIOTAP_FLAGS: {",
          "838:    rflags = tvb_get_guint8(tvb, offset);",
          "839:    if (rflags & IEEE80211_RADIOTAP_F_FCS)",
          "840:     phdr.fcs_len = 4;",
          "841:    else",
          "842:     phdr.fcs_len = 0;",
          "844:    if (tree) {",
          "845:     proto_tree *flags_tree;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "841:    if (rflags & IEEE80211_RADIOTAP_F_DATAPAD)",
          "842:     phdr.datapad = TRUE;",
          "852:    phdr.presence_flags |= PHDR_802_11_HAS_SHORT_GI;",
          "853:    if (rflags & 0x80)",
          "854:     phdr.short_gi = 1;",
          "855:    else",
          "856:     phdr.short_gi = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "938:             (float)rate / 2);",
          "939:     }",
          "940:     radiotap_info->rate = rate;",
          "941:    }",
          "942:    break;",
          "943:   }",
          "945:   case IEEE80211_RADIOTAP_CHANNEL: {",
          "946:    if (tree) {",
          "947:     guint16     flags;",
          "948:     gchar    *chan_str;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "955:     phdr.presence_flags |= PHDR_802_11_HAS_DATA_RATE;",
          "956:     phdr.data_rate = rate;",
          "962:    freq  = tvb_get_letohs(tvb, offset);",
          "963:    if (freq != 0) {",
          "968:     phdr.presence_flags |= PHDR_802_11_HAS_FREQUENCY;",
          "969:     phdr.frequency = freq;",
          "970:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "962:      NULL",
          "963:     };",
          "966:     flags  = tvb_get_letohs(tvb, offset + 2);",
          "967:     chan_str = ieee80211_mhz_to_str(freq);",
          "968:     col_add_fstr(pinfo->cinfo,",
          "",
          "[Removed Lines]",
          "965:     freq  = tvb_get_letohs(tvb, offset);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1154:    mcs_known = tvb_get_guint8(tvb, offset);",
          "1155:    mcs_flags = tvb_get_guint8(tvb, offset + 1);",
          "1158:    if (tree) {",
          "1159:     proto_item *it;",
          "",
          "[Removed Lines]",
          "1156:    mcs = tvb_get_guint8(tvb, offset + 2);",
          "",
          "[Added Lines]",
          "1180:    if (mcs_known & IEEE80211_RADIOTAP_MCS_HAVE_MCS) {",
          "1181:     mcs = tvb_get_guint8(tvb, offset + 2);",
          "1182:     phdr.presence_flags |= PHDR_802_11_HAS_MCS_INDEX;",
          "1183:     phdr.mcs_index = mcs;",
          "1184:    } else {",
          "1185:     mcs = 0;",
          "1187:    }",
          "1188:    if (mcs_known & IEEE80211_RADIOTAP_MCS_HAVE_BW) {",
          "1189:     phdr.presence_flags |= PHDR_802_11_HAS_BANDWIDTH;",
          "1190:     phdr.bandwidth = (mcs_flags & IEEE80211_RADIOTAP_MCS_BW_MASK);",
          "1191:    }",
          "1192:    if (mcs_known & IEEE80211_RADIOTAP_MCS_HAVE_GI) {",
          "1193:     gi_length = (mcs_flags & IEEE80211_RADIOTAP_MCS_SGI) ?",
          "1194:         1 : 0;",
          "1195:     phdr.presence_flags |= PHDR_802_11_HAS_SHORT_GI;",
          "1196:     phdr.short_gi = (gi_length == 0);",
          "1197:    } else {",
          "1198:     gi_length = 0;",
          "1200:    }",
          "1201:    if (mcs_known & IEEE80211_RADIOTAP_MCS_HAVE_FMT) {",
          "1202:     phdr.presence_flags |= PHDR_802_11_HAS_GREENFIELD;",
          "1203:     phdr.greenfield = (mcs_flags & IEEE80211_RADIOTAP_MCS_FMT_GF) != 0;",
          "1204:    }",
          "1205:    if (mcs_known & IEEE80211_RADIOTAP_MCS_HAVE_FEC) {",
          "1206:     phdr.presence_flags |= PHDR_802_11_HAS_LDPC;",
          "1207:     phdr.ldpc = (mcs_flags & IEEE80211_RADIOTAP_MCS_FEC_LDPC) != 0;",
          "1208:    }",
          "1209:    if (mcs_known & IEEE80211_RADIOTAP_MCS_HAVE_STBC) {",
          "1210:     phdr.presence_flags |= PHDR_802_11_HAS_STBC_STREAMS;",
          "1211:     phdr.stbc_streams = (mcs_flags & IEEE80211_RADIOTAP_MCS_STBC_MASK) >> IEEE80211_RADIOTAP_MCS_STBC_SHIFT;",
          "1212:    }",
          "1213:    if (mcs_known & IEEE80211_RADIOTAP_MCS_HAVE_NESS) {",
          "1214:     phdr.presence_flags |= PHDR_802_11_HAS_NESS;",
          "1216:     phdr.ness =",
          "1217:         ((mcs_known & IEEE80211_RADIOTAP_MCS_NESS_BIT1) >> 6) |",
          "1218:         ((mcs_flags & IEEE80211_RADIOTAP_MCS_NESS_BIT0) >> 7);",
          "1219:    }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1199:    }",
          "1200:    if (mcs_known & IEEE80211_RADIOTAP_MCS_HAVE_GI) {",
          "1203:     proto_tree_add_uint(mcs_tree, hf_radiotap_mcs_gi,",
          "1204:            tvb, offset + 1, 1, mcs_flags);",
          "1208:    }",
          "1209:    if (mcs_known & IEEE80211_RADIOTAP_MCS_HAVE_FMT) {",
          "1210:     proto_tree_add_uint(mcs_tree, hf_radiotap_mcs_format,",
          "",
          "[Removed Lines]",
          "1201:     gi_length = (mcs_flags & IEEE80211_RADIOTAP_MCS_SGI) ?",
          "1202:         1 : 0;",
          "1205:    } else {",
          "1206:     gi_length = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1225:    if (mcs_known & IEEE80211_RADIOTAP_MCS_HAVE_MCS) {",
          "1226:     proto_tree_add_uint(mcs_tree, hf_radiotap_mcs_index,",
          "1227:            tvb, offset + 2, 1, mcs);",
          "",
          "[Removed Lines]",
          "1228:    } else",
          "",
          "[Added Lines]",
          "1286:    }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1516:  }",
          "1521:      tree, &phdr);",
          "1523:  tap_queue_packet(radiotap_tap, pinfo, radiotap_info);",
          "",
          "[Removed Lines]",
          "1519:  call_dissector_with_data((rflags & IEEE80211_RADIOTAP_F_DATAPAD) ?",
          "1520:      ieee80211_datapad_handle : ieee80211_handle, next_tvb, pinfo,",
          "",
          "[Added Lines]",
          "1576:  call_dissector_with_data(ieee80211_radio_handle, next_tvb, pinfo,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1991:     FT_BOOLEAN, 8, TFS(&tfs_present_absent), IEEE80211_RADIOTAP_MCS_HAVE_BW,",
          "1992:     \"Bandwidth information present\", HFILL}},",
          "1994:   {&hf_radiotap_mcs_have_gi,",
          "1995:    {\"Guard interval\", \"radiotap.mcs.have_gi\",",
          "1996:     FT_BOOLEAN, 8, TFS(&tfs_present_absent), IEEE80211_RADIOTAP_MCS_HAVE_GI,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2050:   {&hf_radiotap_mcs_have_index,",
          "2051:    {\"MCS index\", \"radiotap.mcs.have_index\",",
          "2052:     FT_BOOLEAN, 8, TFS(&tfs_present_absent), IEEE80211_RADIOTAP_MCS_HAVE_MCS,",
          "2053:     \"MCS index information present\", HFILL}},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2021:     FT_BOOLEAN, 8, TFS(&tfs_1_0), IEEE80211_RADIOTAP_MCS_NESS_BIT1,",
          "2022:     \"Bit 1 of number of extension spatial streams information\", HFILL}},",
          "2029:   {&hf_radiotap_mcs_bw,",
          "2030:    {\"Bandwidth\", \"radiotap.mcs.bw\",",
          "2031:     FT_UINT8, BASE_DEC, VALS(mcs_bandwidth),",
          "",
          "[Removed Lines]",
          "2024:   {&hf_radiotap_mcs_have_index,",
          "2025:    {\"MCS index\", \"radiotap.mcs.have_index\",",
          "2026:     FT_BOOLEAN, 8, TFS(&tfs_present_absent), IEEE80211_RADIOTAP_MCS_HAVE_MCS,",
          "2027:     \"MCS index information present\", HFILL}},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2391: {",
          "2392:  dissector_handle_t radiotap_handle;",
          "2398:  radiotap_handle = find_dissector(\"radiotap\");",
          "",
          "[Removed Lines]",
          "2395:  ieee80211_handle = find_dissector(\"wlan\");",
          "2396:  ieee80211_datapad_handle = find_dissector(\"wlan_datapad\");",
          "",
          "[Added Lines]",
          "2451:  ieee80211_radio_handle = find_dissector(\"wlan_radio\");",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c": [
          "File: epan/dissectors/packet-ieee80211.c -> epan/dissectors/packet-ieee80211.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16564: static int",
          "16565: dissect_ieee80211_common (tvbuff_t *tvb, packet_info *pinfo,",
          "16570: {",
          "16571:   guint16          fcf, flags, frame_type_subtype, ctrl_fcf, ctrl_type_subtype;",
          "16572:   guint16          seq_control;",
          "",
          "[Removed Lines]",
          "16566:                           proto_tree *tree, gboolean fixed_length_header, gint fcs_len,",
          "16567:                           gboolean wlan_broken_fc, gboolean datapad,",
          "16568:                           gboolean is_ht, gboolean is_centrino,",
          "16569:                           struct ieee_802_11_phdr *phdr)",
          "",
          "[Added Lines]",
          "16566:                           proto_tree *tree, gboolean fixed_length_header,",
          "16567:                           gboolean wlan_broken_fc, gboolean is_ht,",
          "16568:                           gboolean is_centrino, struct ieee_802_11_phdr *phdr)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16675:   ohdr_len = hdr_len;",
          "16677:     hdr_len = roundup2(hdr_len, 4);",
          "",
          "[Removed Lines]",
          "16676:   if (datapad)",
          "",
          "[Added Lines]",
          "16675:   if (phdr->datapad)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "16687:       dissect_durid(hdr_tree, tvb, frame_type_subtype, 2);",
          "16688:     }",
          "16691:     {",
          "16693:         has_fcs = FALSE;",
          "",
          "[Removed Lines]",
          "16690:   switch (fcs_len)",
          "",
          "[Added Lines]",
          "16689:   switch (phdr->fcs_len)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "17507:           guint32 sent_fcs = tvb_get_ntohl(tvb, hdr_len + len);",
          "17508:           guint32 fcs;",
          "17511:             fcs = crc32_802_tvb_padded(tvb, ohdr_len, hdr_len, len);",
          "17512:           else",
          "17513:             fcs = crc32_802_tvb(tvb, hdr_len + len);",
          "",
          "[Removed Lines]",
          "17510:           if (datapad)",
          "",
          "[Added Lines]",
          "17509:           if (phdr->datapad)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "17770:     }",
          "17772:   if (IS_PROTECTED(FCF_FLAGS(fcf))",
          "17774:       && (wlan_ignore_wep != WLAN_IGNORE_WEP_WO_IV)) {",
          "",
          "[Removed Lines]",
          "17773:       && (phdr == NULL || !phdr->decrypted)",
          "",
          "[Added Lines]",
          "17772:       && !phdr->decrypted",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "18277: static int",
          "18278: dissect_ieee80211 (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "18279: {",
          "18280:   struct ieee_802_11_phdr *phdr = (struct ieee_802_11_phdr *)data;",
          "18284: }",
          "18290: static void",
          "18291: dissect_ieee80211_withfcs (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18292: {",
          "18294: }",
          "18300: static void",
          "18301: dissect_ieee80211_withoutfcs (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18302: {",
          "18329: }",
          "18335: static void",
          "18337: {",
          "18349: }",
          "",
          "[Removed Lines]",
          "18282:   return dissect_ieee80211_common (tvb, pinfo, tree, FALSE,",
          "18283:                                    (phdr == NULL) ? -1 : phdr->fcs_len, FALSE, FALSE, FALSE, FALSE, phdr);",
          "18293:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 4, FALSE, FALSE, FALSE, FALSE, NULL);",
          "18303:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 0, FALSE, FALSE, FALSE, FALSE, NULL);",
          "18304: }",
          "18309: static int",
          "18310: dissect_ieee80211_centrino(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "18311: {",
          "18312:   struct ieee_802_11_phdr *phdr = (struct ieee_802_11_phdr *)data;",
          "18314:   return dissect_ieee80211_common (tvb, pinfo, tree, FALSE,",
          "18315:                                    (phdr == NULL) ? -1 : phdr->fcs_len, FALSE, FALSE, FALSE, TRUE, phdr);",
          "18316: }",
          "18322: static int",
          "18323: dissect_ieee80211_datapad (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "18324: {",
          "18325:   struct ieee_802_11_phdr *phdr = (struct ieee_802_11_phdr *)data;",
          "18327:   return dissect_ieee80211_common (tvb, pinfo, tree, FALSE,",
          "18328:                                    (phdr == NULL) ? -1 : phdr->fcs_len, FALSE, TRUE, FALSE, FALSE, phdr);",
          "18336: dissect_ieee80211_datapad_withfcs (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18338:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 4, FALSE, TRUE, FALSE, FALSE, NULL);",
          "18339: }",
          "18345: static void",
          "18346: dissect_ieee80211_datapad_withoutfcs (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18347: {",
          "18348:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 0, FALSE, TRUE, FALSE, FALSE, NULL);",
          "",
          "[Added Lines]",
          "18280:   struct ieee_802_11_phdr ourphdr;",
          "18282:   if (phdr == NULL) {",
          "18287:     ourphdr.fcs_len = -1;",
          "18288:     ourphdr.decrypted = FALSE;",
          "18289:     ourphdr.datapad = FALSE;",
          "18290:     ourphdr.presence_flags = 0;",
          "18291:     phdr = &ourphdr;",
          "18292:   }",
          "18293:   return dissect_ieee80211_common (tvb, pinfo, tree, FALSE, FALSE, FALSE, FALSE, phdr);",
          "18303:   struct ieee_802_11_phdr phdr;",
          "18306:   phdr.fcs_len = 4;",
          "18307:   phdr.decrypted = FALSE;",
          "18308:   phdr.datapad = FALSE;",
          "18309:   phdr.presence_flags = 0;",
          "18310:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, FALSE, FALSE, FALSE, &phdr);",
          "18320:   struct ieee_802_11_phdr phdr;",
          "18323:   phdr.fcs_len = 0;",
          "18324:   phdr.decrypted = FALSE;",
          "18325:   phdr.datapad = FALSE;",
          "18326:   phdr.presence_flags = 0;",
          "18327:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, FALSE, FALSE, FALSE, &phdr);",
          "18334: dissect_ieee80211_centrino(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18336:   struct ieee_802_11_phdr phdr;",
          "18339:   phdr.fcs_len = 0;",
          "18340:   phdr.decrypted = FALSE;",
          "18341:   phdr.datapad = FALSE;",
          "18342:   phdr.presence_flags = 0;",
          "18343:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, FALSE, FALSE, TRUE, &phdr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "18356: static void",
          "18357: dissect_ieee80211_bsfc (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18358: {",
          "18360: }",
          "",
          "[Removed Lines]",
          "18359:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 0, TRUE, FALSE, FALSE, FALSE, NULL);",
          "",
          "[Added Lines]",
          "18354:   struct ieee_802_11_phdr phdr;",
          "18357:   phdr.fcs_len = 0;",
          "18358:   phdr.decrypted = FALSE;",
          "18359:   phdr.datapad = FALSE;",
          "18360:   phdr.presence_flags = 0;",
          "18361:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, TRUE, FALSE, FALSE, &phdr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "18366: static void",
          "18367: dissect_ieee80211_fixed (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18368: {",
          "18370: }",
          "",
          "[Removed Lines]",
          "18369:   dissect_ieee80211_common (tvb, pinfo, tree, TRUE, 0, FALSE, FALSE, FALSE, FALSE, NULL);",
          "",
          "[Added Lines]",
          "18371:   struct ieee_802_11_phdr phdr;",
          "18374:   phdr.fcs_len = 0;",
          "18375:   phdr.decrypted = FALSE;",
          "18376:   phdr.datapad = FALSE;",
          "18377:   phdr.presence_flags = 0;",
          "18378:   dissect_ieee80211_common (tvb, pinfo, tree, TRUE, FALSE, FALSE, FALSE, &phdr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "18379: {",
          "18380:   struct ieee_802_11_phdr *phdr = (struct ieee_802_11_phdr *)data;",
          "18384: }",
          "18386: static void",
          "",
          "[Removed Lines]",
          "18382:   return dissect_ieee80211_common (tvb, pinfo, tree, FALSE,",
          "18383:                                    (phdr == NULL) ? -1 : phdr->fcs_len, FALSE, FALSE, TRUE, FALSE, phdr);",
          "",
          "[Added Lines]",
          "18391:   return dissect_ieee80211_common (tvb, pinfo, tree, FALSE, FALSE, TRUE, FALSE, phdr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "26932:   register_dissector(\"wlan_withoutfcs\",         dissect_ieee80211_withoutfcs,         proto_wlan);",
          "26933:   register_dissector(\"wlan_fixed\",              dissect_ieee80211_fixed,              proto_wlan);",
          "26934:   register_dissector(\"wlan_bsfc\",               dissect_ieee80211_bsfc,               proto_wlan);",
          "26938:   new_register_dissector(\"wlan_ht\",             dissect_ieee80211_ht,                 proto_wlan);",
          "26940:   register_init_routine(wlan_defragment_init);",
          "",
          "[Removed Lines]",
          "26935:   new_register_dissector(\"wlan_datapad\",        dissect_ieee80211_datapad,            proto_wlan);",
          "26936:   register_dissector(\"wlan_datapad_withfcs\",    dissect_ieee80211_datapad_withfcs,    proto_wlan);",
          "26937:   register_dissector(\"wlan_datapad_withoutfcs\", dissect_ieee80211_datapad_withoutfcs, proto_wlan);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "27159:   ieee80211_handle = find_dissector(\"wlan\");",
          "27160:   dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_IEEE_802_11, ieee80211_handle);",
          "27164:   dissector_add_uint(\"ethertype\", ETHERTYPE_CENTRINO_PROMISC, centrino_handle);",
          "",
          "[Removed Lines]",
          "27161:   dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_IEEE_802_11_WITH_RADIO, ieee80211_handle);",
          "27163:   centrino_handle = new_create_dissector_handle( dissect_ieee80211_centrino, proto_wlan );",
          "",
          "[Added Lines]",
          "27167:   centrino_handle = create_dissector_handle( dissect_ieee80211_centrino, proto_wlan );",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ixveriwave.c||epan/dissectors/packet-ixveriwave.c": [
          "File: epan/dissectors/packet-ixveriwave.c -> epan/dissectors/packet-ixveriwave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: static gint ett_radiotap_flags = -1;",
          "130: static int hf_ixveriwave_vw_info = -1;",
          "",
          "[Removed Lines]",
          "127: static dissector_handle_t ieee80211_handle;",
          "",
          "[Added Lines]",
          "127: static dissector_handle_t ieee80211_radio_handle;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "653:     guint       length;",
          "654:     gint8       dbm;",
          "655:     guint8      mcs_index;",
          "656:     float       phyRate;",
          "658:     proto_tree *vweft, *vw_errorFlags_tree = NULL, *vwift,*vw_infoFlags_tree = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656:     guint8      ness;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "662:     ifg_info   *p_ifg_info;",
          "663:     proto_item *ti;",
          "666:     vw_info = tvb_get_letohs(tvb, 20);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "665:     struct ieee_802_11_phdr phdr;",
          "669:     phdr.decrypted = FALSE;",
          "670:     phdr.datapad = FALSE;",
          "671:     phdr.presence_flags = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "679:     offset      += 2;",
          "681:     vw_rflags = tvb_get_letohs(tvb, offset);",
          "682:     if (tree) {",
          "683:         ft = proto_tree_add_uint(tap_tree, hf_radiotap_flags, tvb, offset, 2, vw_rflags);",
          "684:         flags_tree = proto_item_add_subtree(ft, ett_radiotap_flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "690:     if ((vw_rflags & FLAGS_CHAN_HT) || (vw_rflags & FLAGS_CHAN_VHT) ) {",
          "691:         phdr.presence_flags |= PHDR_802_11_HAS_SHORT_GI;",
          "692:         phdr.short_gi = ((vw_rflags & FLAGS_CHAN_SHORTGI) != 0);",
          "693:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "711:     offset      +=2;",
          "712:     phyRate = (float)tvb_get_letohs(tvb, offset) / 10;",
          "713:     offset      +=2;",
          "714:     offset++;",
          "715:     mcs_index = tvb_get_guint8(tvb, offset);",
          "716:     offset++;",
          "717:     offset++;",
          "719:     if ((vw_rflags & FLAGS_CHAN_HT) || (vw_rflags & FLAGS_CHAN_VHT) ) {",
          "720:         if (tree) {",
          "721:             proto_tree_add_item(tap_tree, hf_radiotap_mcsindex,",
          "722:                                 tvb, offset - 2, 1, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "726:     ness = tvb_get_guint8(tvb, offset);",
          "733:         phdr.presence_flags |= (PHDR_802_11_HAS_MCS_INDEX|PHDR_802_11_HAS_NESS);",
          "734:         phdr.mcs_index = mcs_index;",
          "735:         phdr.ness = ness;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "729:                                        \"%.1f (MCS %d)\", phyRate, mcs_index);",
          "730:         }",
          "731:     } else {",
          "732:         if (tree) {",
          "733:             proto_tree_add_uint_format_value(tap_tree, hf_radiotap_datarate,",
          "734:             tvb, offset - 5, 2, tvb_get_letohs(tvb, offset-5),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:         phdr.presence_flags |= PHDR_802_11_HAS_DATA_RATE;",
          "749:         phdr.data_rate = tvb_get_letohs(tvb, offset-5) / 5;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "738:     col_add_fstr(pinfo->cinfo, COL_TX_RATE, \"%.1f\", phyRate);",
          "740:     dbm = (gint8) tvb_get_guint8(tvb, offset);",
          "742:     col_add_fstr(pinfo->cinfo, COL_RSSI, \"%d dBm\", dbm);",
          "743:     if (tree) {",
          "744:         proto_tree_add_int_format_value(tap_tree,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759:     phdr.presence_flags |= PHDR_802_11_HAS_SIGNAL_DBM;",
          "760:     phdr.signal_dbm = dbm;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "905:     next_tvb = tvb_new_subset_remaining(tvb, length);",
          "909: }",
          "911: void proto_register_ixveriwave(void)",
          "",
          "[Removed Lines]",
          "908:     call_dissector(ieee80211_handle, next_tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "927:     call_dissector_with_data(ieee80211_radio_handle, next_tvb, pinfo, tree, &phdr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1350: {",
          "1352:     ethernet_handle          = find_dissector(\"eth_withoutfcs\");",
          "1356:     ixveriwave_handle           = create_dissector_handle(dissect_ixveriwave, proto_ixveriwave);",
          "1357:     dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_IXVERIWAVE, ixveriwave_handle);",
          "",
          "[Removed Lines]",
          "1354:     ieee80211_handle         = find_dissector(\"wlan_withoutfcs\");",
          "",
          "[Added Lines]",
          "1373:     ieee80211_radio_handle   = find_dissector(\"wlan_radio\");",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-peekremote.c||epan/dissectors/packet-peekremote.c": [
          "File: epan/dissectors/packet-peekremote.c -> epan/dissectors/packet-peekremote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #include \"config.h\"",
          "57: #include <epan/packet.h>",
          "58: #include <epan/expert.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #include <wiretap/wtap.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312: static gint ett_peekremote_status = -1;",
          "313: static gint ett_peekremote_extflags = -1;",
          "319: static int",
          "",
          "[Removed Lines]",
          "315: static dissector_handle_t wlan_withfcs;",
          "316: static dissector_handle_t wlan_withoutfcs;",
          "",
          "[Added Lines]",
          "317: static dissector_handle_t wlan_radio_handle;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "380:   proto_item *ti_header_version, *ti_header_size;",
          "381:   guint8 header_version;",
          "382:   guint header_size;",
          "383:   tvbuff_t *next_tvb;",
          "385:   if (tvb_memeql(tvb, 0, magic, 4) == -1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384:   struct ieee_802_11_phdr phdr;",
          "385:   guint16 frequency;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "390:     return FALSE;",
          "391:   }",
          "393:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"PEEKREMOTE\");",
          "394:   col_clear(pinfo->cinfo, COL_INFO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:   phdr.decrypted = FALSE;",
          "399:   phdr.datapad = FALSE;",
          "400:   phdr.presence_flags = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "412:       if (header_size > 9)",
          "413:         offset += (header_size - 9);",
          "414:     } else {",
          "415:       proto_tree_add_item(peekremote_tree, &hfi_peekremote_type, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "416:       offset += 4;",
          "417:       proto_tree_add_item(peekremote_tree, &hfi_peekremote_mcs_index, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "418:       offset += 2;",
          "419:       proto_tree_add_item(peekremote_tree, &hfi_peekremote_channel, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "420:       offset += 2;",
          "421:       proto_tree_add_item(peekremote_tree, &hfi_peekremote_frequency, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "422:       offset += 4;",
          "423:       proto_tree_add_item(peekremote_tree, &hfi_peekremote_band, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "424:       offset +=4;",
          "425:       offset += dissect_peekremote_extflags(tvb, pinfo, peekremote_tree, offset);",
          "426:       proto_tree_add_item(peekremote_tree, &hfi_peekremote_signal_percent, tvb, offset, 1, ENC_NA);",
          "427:       offset += 1;",
          "428:       proto_tree_add_item(peekremote_tree, &hfi_peekremote_noise_percent, tvb, offset, 1, ENC_NA);",
          "429:       offset += 1;",
          "430:       proto_tree_add_item(peekremote_tree, &hfi_peekremote_signal_dbm, tvb, offset, 1, ENC_NA);",
          "431:       offset += 1;",
          "432:       proto_tree_add_item(peekremote_tree, &hfi_peekremote_noise_dbm, tvb, offset, 1, ENC_NA);",
          "433:       offset += 1;",
          "434:       proto_tree_add_item(peekremote_tree, &hfi_peekremote_signal_1_dbm, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424:       phdr.presence_flags |=",
          "425:           PHDR_802_11_HAS_MCS_INDEX|",
          "426:           PHDR_802_11_HAS_CHANNEL|",
          "427:           PHDR_802_11_HAS_SIGNAL_PERCENT|",
          "428:           PHDR_802_11_HAS_NOISE_PERCENT|",
          "429:           PHDR_802_11_HAS_SIGNAL_DBM|",
          "430:           PHDR_802_11_HAS_NOISE_DBM|",
          "431:           PHDR_802_11_HAS_TSF_TIMESTAMP;",
          "434:       phdr.mcs_index = tvb_get_ntohs(tvb, offset);",
          "437:       phdr.channel = tvb_get_ntohs(tvb, offset);",
          "440:       frequency = tvb_get_ntohl(tvb, offset);",
          "441:       if (frequency != 0) {",
          "442:         phdr.presence_flags |= PHDR_802_11_HAS_FREQUENCY;",
          "443:         phdr.frequency = frequency;",
          "444:       }",
          "450:       phdr.signal_percent = tvb_get_guint8(tvb, offset);",
          "453:       phdr.noise_percent = tvb_get_guint8(tvb, offset);",
          "456:       phdr.signal_dbm = tvb_get_guint8(tvb, offset);",
          "459:       phdr.noise_dbm = tvb_get_guint8(tvb, offset);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "454:       offset += dissect_peekremote_flags(tvb, pinfo, peekremote_tree, offset);",
          "455:       offset += dissect_peekremote_status(tvb, pinfo, peekremote_tree, offset);",
          "456:       proto_tree_add_item(peekremote_tree, &hfi_peekremote_timestamp, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "457:       offset += 8;",
          "458:     }",
          "459:     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "485:       phdr.tsf_timestamp = tvb_get_ntoh64(tvb, offset);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "468:   proto_item_set_end(ti, tvb, offset);",
          "469:   next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "471:   return TRUE;",
          "472: }",
          "",
          "[Removed Lines]",
          "470:   call_dissector(wlan_withfcs, next_tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "499:   call_dissector_with_data(wlan_radio_handle, next_tvb, pinfo, tree, &phdr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "477:   tvbuff_t *next_tvb;",
          "478:   proto_tree *peekremote_tree = NULL;",
          "479:   proto_item *ti = NULL;",
          "480:   guint8 signal_percent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "509:   struct ieee_802_11_phdr phdr;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "511:   proto_item_set_end(ti, tvb, 20);",
          "512:   next_tvb = tvb_new_subset_remaining(tvb, 20);",
          "516:   } else {",
          "518:   }",
          "519: }",
          "521: void",
          "",
          "[Removed Lines]",
          "514:   if (GPOINTER_TO_INT(data) == IS_ARUBA && signal_percent == 100){",
          "515:     return 20 + call_dissector(wlan_withoutfcs, next_tvb, pinfo, tree);",
          "517:     return 20 + call_dissector(wlan_withfcs, next_tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "544:   if (GPOINTER_TO_INT(data) == IS_ARUBA && signal_percent == 100) {",
          "549:   phdr.decrypted = FALSE;",
          "550:   phdr.presence_flags =",
          "551:       PHDR_802_11_HAS_CHANNEL|",
          "552:       PHDR_802_11_HAS_DATA_RATE|",
          "553:       PHDR_802_11_HAS_SIGNAL_PERCENT|",
          "554:       PHDR_802_11_HAS_NOISE_PERCENT|",
          "555:       PHDR_802_11_HAS_SIGNAL_DBM|",
          "556:       PHDR_802_11_HAS_NOISE_DBM|",
          "557:       PHDR_802_11_HAS_TSF_TIMESTAMP;",
          "558:   phdr.channel = tvb_get_guint8(tvb, 17);",
          "559:   phdr.data_rate = tvb_get_guint8(tvb, 16);",
          "560:   phdr.signal_percent = tvb_get_guint8(tvb, 18);",
          "561:   phdr.noise_percent = tvb_get_guint8(tvb, 18);",
          "562:   phdr.signal_dbm = tvb_get_guint8(tvb, 0);",
          "563:   phdr.noise_dbm = tvb_get_guint8(tvb, 1);",
          "564:   phdr.tsf_timestamp = tvb_get_ntoh64(tvb, 8);",
          "566:   return 20 + call_dissector_with_data(wlan_radio_handle, next_tvb, pinfo, tree, &phdr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "598: {",
          "599:   dissector_handle_t peekremote_handle;",
          "604:   peekremote_handle = new_create_dissector_handle(dissect_peekremote_legacy, proto_peekremote);",
          "605:   dissector_add_uint(\"udp.port\", 5000, peekremote_handle);",
          "",
          "[Removed Lines]",
          "601:   wlan_withfcs = find_dissector(\"wlan_withfcs\");",
          "602:   wlan_withoutfcs = find_dissector(\"wlan_withoutfcs\");",
          "",
          "[Added Lines]",
          "649:   wlan_radio_handle = find_dissector(\"wlan_radio\");",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ppi.c||epan/dissectors/packet-ppi.c": [
          "File: epan/dissectors/packet-ppi.c -> epan/dissectors/packet-ppi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: #define PPI_FLAG_ALIGN 0x01",
          "116: #define IS_PPI_FLAG_ALIGN(x) ((x) & PPI_FLAG_ALIGN)",
          "121: #define DOT11N_FLAG_MORE_AGGREGATES 0x0020",
          "124: #define DOT11N_IS_AGGREGATE(flags)      (flags & DOT11N_FLAG_IS_AGGREGATE)",
          "125: #define DOT11N_MORE_AGGREGATES(flags)   ( \\",
          "",
          "[Removed Lines]",
          "118: #define DOT11_FLAG_HAVE_FCS 0x0001",
          "120: #define DOT11N_FLAG_IS_AGGREGATE 0x0010",
          "122: #define DOT11N_FLAG_AGG_CRC_ERROR 0x0040",
          "",
          "[Added Lines]",
          "118: #define DOT11_FLAG_HAVE_FCS     0x0001",
          "119: #define DOT11_FLAG_TSF_TIMER_MS 0x0002",
          "120: #define DOT11_FLAG_FCS_INVALID  0x0004",
          "121: #define DOT11_FLAG_PHY_ERROR    0x0008",
          "123: #define DOT11N_FLAG_GREENFIELD      0x0001",
          "124: #define DOT11N_FLAG_HT40            0x0002",
          "125: #define DOT11N_FLAG_SHORT_GI        0x0004",
          "126: #define DOT11N_FLAG_DUPLICATE_RX    0x0008",
          "127: #define DOT11N_FLAG_IS_AGGREGATE    0x0010",
          "129: #define DOT11N_FLAG_AGG_CRC_ERROR   0x0040",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333: static dissector_handle_t ppi_handle;",
          "335: static dissector_handle_t data_handle;",
          "337: static dissector_handle_t ieee80211_ht_handle;",
          "338: static dissector_handle_t ppi_gps_handle, ppi_vector_handle, ppi_sensor_handle, ppi_antenna_handle;",
          "339: static dissector_handle_t ppi_fnet_handle;",
          "",
          "[Removed Lines]",
          "336: static dissector_handle_t ieee80211_handle;",
          "",
          "[Added Lines]",
          "343: static dissector_handle_t ieee80211_radio_handle;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "482:     proto_tree  *ftree;",
          "483:     proto_item  *ti;",
          "484:     ptvcursor_t *csr;",
          "486:     guint32      common_flags;",
          "487:     guint16      common_frequency;",
          "488:     gchar       *chan_str;",
          "490:     ftree = proto_tree_add_subtree(tree, tvb, offset, data_len, ett_dot11_common, NULL, \"802.11-Common\");",
          "",
          "[Removed Lines]",
          "485:     gint         rate_kbps;",
          "",
          "[Added Lines]",
          "492:     guint64      tsft_raw;",
          "493:     guint        rate_raw;",
          "494:     guint        rate_kbps;",
          "497:     gint8        dbm_value;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "505:     csr = ptvcursor_new(ftree, tvb, offset);",
          "507:     ptvcursor_add_invalid_check(csr, hf_80211_common_tsft, 8, 0);",
          "509:     ptvcursor_add_with_subtree(csr, hf_80211_common_flags, 2, ENC_LITTLE_ENDIAN,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517:     tsft_raw = tvb_get_letoh64(tvb, offset);",
          "518:     if (tsft_raw != 0) {",
          "519:         phdr->presence_flags |= PHDR_802_11_HAS_TSF_TIMESTAMP;",
          "520:         if (common_flags & DOT11_FLAG_TSF_TIMER_MS)",
          "521:             phdr->tsf_timestamp = tsft_raw * 1000;",
          "522:         else",
          "523:             phdr->tsf_timestamp = tsft_raw;",
          "524:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "514:     ptvcursor_add(csr, hf_80211_common_flags_phy_err, 2, ENC_LITTLE_ENDIAN);",
          "515:     ptvcursor_pop_subtree(csr);",
          "518:     ti = proto_tree_add_uint_format(ftree, hf_80211_common_rate, tvb,",
          "519:                                     ptvcursor_current_offset(csr), 2, rate_kbps, \"Rate: %.1f Mbps\",",
          "520:                                     rate_kbps / 1000.0);",
          "",
          "[Removed Lines]",
          "517:     rate_kbps = tvb_get_letohs(tvb, ptvcursor_current_offset(csr)) * 500;",
          "",
          "[Added Lines]",
          "536:     rate_raw = tvb_get_letohs(tvb, ptvcursor_current_offset(csr));",
          "537:     if (rate_raw != 0) {",
          "538:         phdr->presence_flags |= PHDR_802_11_HAS_DATA_RATE;",
          "539:         phdr->data_rate = rate_raw;",
          "540:     }",
          "541:     rate_kbps = rate_raw * 500;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "524:     ptvcursor_advance(csr, 2);",
          "526:     common_frequency = tvb_get_letohs(ptvcursor_tvbuff(csr), ptvcursor_current_offset(csr));",
          "527:     chan_str = ieee80211_mhz_to_str(common_frequency);",
          "528:     proto_tree_add_uint_format_value(ptvcursor_tree(csr), hf_80211_common_chan_freq, ptvcursor_tvbuff(csr),",
          "529:                                ptvcursor_current_offset(csr), 2, common_frequency, \"%s\", chan_str);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551:     if (common_frequency != 0) {",
          "552:         phdr->presence_flags |= PHDR_802_11_HAS_FREQUENCY;",
          "553:         phdr->frequency = common_frequency;",
          "554:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "547:     ptvcursor_add(csr, hf_80211_common_fhss_hopset, 1, ENC_LITTLE_ENDIAN);",
          "548:     ptvcursor_add(csr, hf_80211_common_fhss_pattern, 1, ENC_LITTLE_ENDIAN);",
          "554:     ptvcursor_add_invalid_check(csr, hf_80211_common_dbm_antnoise, 1, 0x80);",
          "556:     ptvcursor_free(csr);",
          "557: }",
          "559: static void",
          "561: {",
          "562:     proto_tree  *ftree       = tree;",
          "563:     ptvcursor_t *csr;",
          "564:     int          subtree_off = add_subtree ? 4 : 0;",
          "",
          "[Removed Lines]",
          "550:     col_add_fstr(pinfo->cinfo, COL_RSSI, \"%d dBm\",",
          "551:             (gint8) tvb_get_guint8(tvb, ptvcursor_current_offset(csr)));",
          "560: dissect_80211n_mac(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset, int data_len, gboolean add_subtree, guint32 *n_mac_flags, guint32 *ampdu_id)",
          "",
          "[Added Lines]",
          "578:     dbm_value = (gint8) tvb_get_guint8(tvb, ptvcursor_current_offset(csr));",
          "579:     if (dbm_value != -128 && dbm_value != 0) {",
          "586:         col_add_fstr(pinfo->cinfo, COL_RSSI, \"%d dBm\", dbm_value);",
          "587:         phdr->presence_flags |= PHDR_802_11_HAS_SIGNAL_DBM;",
          "588:         phdr->signal_dbm = dbm_value;",
          "589:     }",
          "592:     dbm_value = (gint8) tvb_get_guint8(tvb, ptvcursor_current_offset(csr));",
          "593:     if (dbm_value != -128 && dbm_value != 0) {",
          "600:         phdr->presence_flags |= PHDR_802_11_HAS_NOISE_DBM;",
          "601:         phdr->noise_dbm = dbm_value;",
          "602:     }",
          "609: dissect_80211n_mac(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset, int data_len, gboolean add_subtree, guint32 *n_mac_flags, guint32 *ampdu_id, struct ieee_802_11_phdr *phdr)",
          "614:     guint32      flags;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "580:     csr = ptvcursor_new(ftree, tvb, offset);",
          "582:     ptvcursor_add_with_subtree(csr, hf_80211n_mac_flags, 4, ENC_LITTLE_ENDIAN,",
          "583:                                ett_dot11n_mac_flags);",
          "584:     ptvcursor_add_no_advance(csr, hf_80211n_mac_flags_greenfield, 4, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632:     flags = tvb_get_letohl(tvb, ptvcursor_current_offset(csr));",
          "633:     phdr->presence_flags |= PHDR_802_11_HAS_SHORT_GI|PHDR_802_11_HAS_GREENFIELD;",
          "634:     phdr->short_gi = ((flags & DOT11N_FLAG_SHORT_GI) != 0);",
          "635:     phdr->greenfield = ((flags & DOT11N_FLAG_GREENFIELD) != 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "601: }",
          "603: static void",
          "605: {",
          "606:     proto_tree  *ftree;",
          "607:     proto_item  *ti;",
          "608:     ptvcursor_t *csr;",
          "609:     guint16      ext_frequency;",
          "610:     gchar       *chan_str;",
          "",
          "[Removed Lines]",
          "604: dissect_80211n_mac_phy(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset, int data_len, guint32 *n_mac_flags, guint32 *ampdu_id)",
          "",
          "[Added Lines]",
          "658: dissect_80211n_mac_phy(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset, int data_len, guint32 *n_mac_flags, guint32 *ampdu_id, struct ieee_802_11_phdr *phdr)",
          "663:     guint8       mcs;",
          "664:     guint8       ness;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "619:     }",
          "621:     dissect_80211n_mac(tvb, pinfo, ftree, offset, PPI_80211N_MAC_LEN,",
          "623:     offset += PPI_80211N_MAC_PHY_OFF;",
          "625:     csr = ptvcursor_new(ftree, tvb, offset);",
          "627:     ptvcursor_add_invalid_check(csr, hf_80211n_mac_phy_mcs, 1, 255);",
          "628:     ti = ptvcursor_add(csr, hf_80211n_mac_phy_num_streams, 1, ENC_LITTLE_ENDIAN);",
          "629:     if (tvb_get_guint8(tvb, ptvcursor_current_offset(csr) - 1) == 0)",
          "630:         proto_item_append_text(ti, \" (unknown)\");",
          "",
          "[Removed Lines]",
          "622:                        FALSE, n_mac_flags, ampdu_id);",
          "",
          "[Added Lines]",
          "678:                        FALSE, n_mac_flags, ampdu_id, phdr);",
          "683:     mcs = tvb_get_guint8(tvb, ptvcursor_current_offset(csr));",
          "684:     if (mcs != 255) {",
          "685:         phdr->presence_flags |= PHDR_802_11_HAS_MCS_INDEX;",
          "686:         phdr->mcs_index = mcs;",
          "687:     }",
          "690:     ness = tvb_get_guint8(tvb, ptvcursor_current_offset(csr));",
          "691:     phdr->presence_flags |= PHDR_802_11_HAS_NESS;",
          "692:     phdr->ness = ness;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "796:     phdr.fcs_len = -1;",
          "797:     phdr.decrypted = FALSE;",
          "798:     phdr.presence_flags = 0;",
          "800:     while (tot_len > 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "863:     phdr.datapad = FALSE;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "811:             case PPI_80211N_MAC:",
          "812:                 dissect_80211n_mac(tvb, pinfo, ppi_tree, offset, data_len,",
          "814:                 is_ht = TRUE;",
          "815:                 break;",
          "817:             case PPI_80211N_MAC_PHY:",
          "818:                 dissect_80211n_mac_phy(tvb, pinfo, ppi_tree, offset,",
          "820:                 is_ht = TRUE;",
          "821:                 break;",
          "",
          "[Removed Lines]",
          "813:                     TRUE, &n_ext_flags, &ampdu_id);",
          "819:                     data_len, &n_ext_flags, &ampdu_id);",
          "",
          "[Added Lines]",
          "879:                     TRUE, &n_ext_flags, &ampdu_id, &phdr);",
          "885:                     data_len, &n_ext_flags, &ampdu_id, &phdr);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1029:             call_dissector_with_data(ieee80211_ht_handle, next_tvb, pinfo, tree, &phdr);",
          "1030:         } else {",
          "1032:         }",
          "1033:     } else {",
          "",
          "[Removed Lines]",
          "1031:             call_dissector_with_data(ieee80211_handle, next_tvb, pinfo, tree, &phdr);",
          "",
          "[Added Lines]",
          "1097:             call_dissector_with_data(ieee80211_radio_handle, next_tvb, pinfo, tree, &phdr);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1089:          FT_UINT16, BASE_HEX, NULL, 0x0, \"PPI 802.11-Common Flags\", HFILL } },",
          "1090:     { &hf_80211_common_flags_fcs,",
          "1091:        { \"FCS present flag\", \"ppi.80211-common.flags.fcs\",",
          "1093:     { &hf_80211_common_flags_tsft,",
          "1094:        { \"TSFT flag\", \"ppi.80211-common.flags.tsft\",",
          "1096:     { &hf_80211_common_flags_fcs_valid,",
          "1097:        { \"FCS validity\", \"ppi.80211-common.flags.fcs-invalid\",",
          "1099:     { &hf_80211_common_flags_phy_err,",
          "1100:        { \"PHY error flag\", \"ppi.80211-common.flags.phy-err\",",
          "1102:     { &hf_80211_common_rate,",
          "1103:        { \"Data rate\", \"ppi.80211-common.rate\",",
          "1104:          FT_UINT16, BASE_DEC, NULL, 0x0, \"PPI 802.11-Common Data Rate (x 500 Kbps)\", HFILL } },",
          "",
          "[Removed Lines]",
          "1092:          FT_BOOLEAN, 16, TFS(&tfs_present_absent), 0x0001, \"PPI 802.11-Common Frame Check Sequence (FCS) Present Flag\", HFILL } },",
          "1095:          FT_BOOLEAN, 16, TFS(&tfs_tsft_ms), 0x0002, \"PPI 802.11-Common Timing Synchronization Function Timer (TSFT) msec/usec flag\", HFILL } },",
          "1098:          FT_BOOLEAN, 16, TFS(&tfs_invalid_valid), 0x0004, \"PPI 802.11-Common Frame Check Sequence (FCS) Validity flag\", HFILL } },",
          "1101:          FT_BOOLEAN, 16, TFS(&tfs_phy_error), 0x0008, \"PPI 802.11-Common Physical level (PHY) Error\", HFILL } },",
          "",
          "[Added Lines]",
          "1158:          FT_BOOLEAN, 16, TFS(&tfs_present_absent), DOT11_FLAG_HAVE_FCS, \"PPI 802.11-Common Frame Check Sequence (FCS) Present Flag\", HFILL } },",
          "1161:          FT_BOOLEAN, 16, TFS(&tfs_tsft_ms), DOT11_FLAG_TSF_TIMER_MS, \"PPI 802.11-Common Timing Synchronization Function Timer (TSFT) msec/usec flag\", HFILL } },",
          "1164:          FT_BOOLEAN, 16, TFS(&tfs_invalid_valid), DOT11_FLAG_FCS_INVALID, \"PPI 802.11-Common Frame Check Sequence (FCS) Validity flag\", HFILL } },",
          "1167:          FT_BOOLEAN, 16, TFS(&tfs_phy_error), DOT11_FLAG_PHY_ERROR, \"PPI 802.11-Common Physical level (PHY) Error\", HFILL } },",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1154:          FT_UINT32, BASE_HEX, NULL, 0x0, \"PPI 802.11n MAC flags\", HFILL } },",
          "1155:     { &hf_80211n_mac_flags_greenfield,",
          "1156:        { \"Greenfield flag\", \"ppi.80211n-mac.flags.greenfield\",",
          "1158:     { &hf_80211n_mac_flags_ht20_40,",
          "1159:        { \"HT20/HT40 flag\", \"ppi.80211n-mac.flags.ht20_40\",",
          "1161:     { &hf_80211n_mac_flags_rx_guard_interval,",
          "1162:        { \"RX Short Guard Interval (SGI) flag\", \"ppi.80211n-mac.flags.rx.short_guard_interval\",",
          "1164:     { &hf_80211n_mac_flags_duplicate_rx,",
          "1165:        { \"Duplicate RX flag\", \"ppi.80211n-mac.flags.rx.duplicate\",",
          "1167:     { &hf_80211n_mac_flags_aggregate,",
          "1168:        { \"Aggregate flag\", \"ppi.80211n-mac.flags.agg\",",
          "1170:     { &hf_80211n_mac_flags_more_aggregates,",
          "1171:        { \"More aggregates flag\", \"ppi.80211n-mac.flags.more_agg\",",
          "1173:     { &hf_80211n_mac_flags_delimiter_crc_after,",
          "1174:        { \"A-MPDU Delimiter CRC error after this frame flag\", \"ppi.80211n-mac.flags.delim_crc_error_after\",",
          "1176:     { &hf_80211n_mac_ampdu_id,",
          "1177:        { \"AMPDU-ID\", \"ppi.80211n-mac.ampdu_id\",",
          "1178:          FT_UINT32, BASE_HEX, NULL, 0x0, \"PPI 802.11n MAC AMPDU-ID\", HFILL } },",
          "",
          "[Removed Lines]",
          "1157:          FT_BOOLEAN, 32, TFS(&tfs_true_false), 0x0001, \"PPI 802.11n MAC Greenfield Flag\", HFILL } },",
          "1160:          FT_BOOLEAN, 32, TFS(&tfs_ht20_40), 0x0002, \"PPI 802.11n MAC HT20/HT40 Flag\", HFILL } },",
          "1163:          FT_BOOLEAN, 32, TFS(&tfs_true_false), 0x0004, \"PPI 802.11n MAC RX Short Guard Interval (SGI) Flag\", HFILL } },",
          "1166:          FT_BOOLEAN, 32, TFS(&tfs_true_false), 0x0008, \"PPI 802.11n MAC Duplicate RX Flag\", HFILL } },",
          "1169:          FT_BOOLEAN, 32, TFS(&tfs_true_false), 0x0010, \"PPI 802.11 MAC Aggregate Flag\", HFILL } },",
          "1172:          FT_BOOLEAN, 32, TFS(&tfs_true_false), 0x0020, \"PPI 802.11n MAC More Aggregates Flag\", HFILL } },",
          "1175:          FT_BOOLEAN, 32, TFS(&tfs_true_false), 0x0040, \"PPI 802.11n MAC A-MPDU Delimiter CRC Error After This Frame Flag\", HFILL } },",
          "",
          "[Added Lines]",
          "1223:          FT_BOOLEAN, 32, TFS(&tfs_true_false), DOT11N_FLAG_GREENFIELD, \"PPI 802.11n MAC Greenfield Flag\", HFILL } },",
          "1226:          FT_BOOLEAN, 32, TFS(&tfs_ht20_40), DOT11N_FLAG_HT40, \"PPI 802.11n MAC HT20/HT40 Flag\", HFILL } },",
          "1229:          FT_BOOLEAN, 32, TFS(&tfs_true_false), DOT11N_FLAG_SHORT_GI, \"PPI 802.11n MAC RX Short Guard Interval (SGI) Flag\", HFILL } },",
          "1232:          FT_BOOLEAN, 32, TFS(&tfs_true_false), DOT11N_FLAG_DUPLICATE_RX, \"PPI 802.11n MAC Duplicate RX Flag\", HFILL } },",
          "1235:          FT_BOOLEAN, 32, TFS(&tfs_true_false), DOT11N_FLAG_IS_AGGREGATE, \"PPI 802.11 MAC Aggregate Flag\", HFILL } },",
          "1238:          FT_BOOLEAN, 32, TFS(&tfs_true_false), DOT11N_FLAG_MORE_AGGREGATES, \"PPI 802.11n MAC More Aggregates Flag\", HFILL } },",
          "1241:          FT_BOOLEAN, 32, TFS(&tfs_true_false), DOT11N_FLAG_AGG_CRC_ERROR, \"PPI 802.11n MAC A-MPDU Delimiter CRC Error After This Frame Flag\", HFILL } },",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1401: proto_reg_handoff_ppi(void)",
          "1402: {",
          "1403:     data_handle = find_dissector(\"data\");",
          "1405:     ieee80211_ht_handle = find_dissector(\"wlan_ht\");",
          "1406:     ppi_gps_handle = find_dissector(\"ppi_gps\");",
          "1407:     ppi_vector_handle = find_dissector(\"ppi_vector\");",
          "",
          "[Removed Lines]",
          "1404:     ieee80211_handle = find_dissector(\"wlan\");",
          "",
          "[Added Lines]",
          "1470:     ieee80211_radio_handle = find_dissector(\"wlan_radio\");",
          "",
          "---------------"
        ],
        "wiretap/commview.c||wiretap/commview.c": [
          "File: wiretap/commview.c -> wiretap/commview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:  case MEDIUM_WIFI :",
          "145:   phdr->pkt_encap = WTAP_ENCAP_IEEE_802_11_WITH_RADIO;",
          "146:   phdr->pseudo_header.ieee_802_11.presence_flags =",
          "147:       PHDR_802_11_HAS_CHANNEL |",
          "148:       PHDR_802_11_HAS_DATA_RATE |",
          "149:       PHDR_802_11_HAS_SIGNAL_PERCENT;",
          "151:   phdr->pseudo_header.ieee_802_11.channel = cv_hdr.channel;",
          "152:   phdr->pseudo_header.ieee_802_11.data_rate =",
          "153:       cv_hdr.rate | (cv_hdr.direction << 8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:   phdr->pseudo_header.ieee_802_11.decrypted = FALSE;",
          "148:   phdr->pseudo_header.ieee_802_11.datapad = FALSE;",
          "",
          "---------------"
        ],
        "wiretap/netmon.c||wiretap/netmon.c": [
          "File: wiretap/netmon.c -> wiretap/netmon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:   phdr->pseudo_header.ieee_802_11.fcs_len = -2;",
          "433:   phdr->pseudo_header.ieee_802_11.decrypted = FALSE;",
          "434:   break;",
          "435:  }",
          "436: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433:   phdr->pseudo_header.ieee_802_11.datapad = FALSE;",
          "",
          "---------------"
        ],
        "wiretap/network_instruments.c||wiretap/network_instruments.c": [
          "File: wiretap/network_instruments.c -> wiretap/network_instruments.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     gint64 *data_offset);",
          "98: static gboolean observer_seek_read(wtap *wth, gint64 seek_off,",
          "99:     struct wtap_pkthdr *phdr, Buffer *buf, int *err, gchar **err_info);",
          "101:     packet_entry_header *packet_header, int *err, gchar **err_info);",
          "102: static gboolean process_packet_header(wtap *wth,",
          "103:     packet_entry_header *packet_header, struct wtap_pkthdr *phdr, int *err,",
          "",
          "[Removed Lines]",
          "100: static int read_packet_header(FILE_T fh, union wtap_pseudo_header *pseudo_header,",
          "",
          "[Added Lines]",
          "100: static int read_packet_header(wtap *wth, FILE_T fh, union wtap_pseudo_header *pseudo_header,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:             err_info);",
          "259:         if (header_bytes_consumed <= 0)",
          "",
          "[Removed Lines]",
          "257:         header_bytes_consumed = read_packet_header(wth->fh, &wth->phdr.pseudo_header, &packet_header, err,",
          "",
          "[Added Lines]",
          "257:         header_bytes_consumed = read_packet_header(wth, wth->fh, &wth->phdr.pseudo_header, &packet_header, err,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "302:         return FALSE;",
          "306:         err_info);",
          "307:     if (offset <= 0)",
          "",
          "[Removed Lines]",
          "305:     offset = read_packet_header(wth->random_fh, pseudo_header, &packet_header, err,",
          "",
          "[Added Lines]",
          "305:     offset = read_packet_header(wth, wth->random_fh, pseudo_header, &packet_header, err,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "321: }",
          "323: static int",
          "325:     packet_entry_header *packet_header, int *err, gchar **err_info)",
          "326: {",
          "327:     int offset;",
          "",
          "[Removed Lines]",
          "324: read_packet_header(FILE_T fh, union wtap_pseudo_header *pseudo_header,",
          "",
          "[Added Lines]",
          "324: read_packet_header(wtap *wth, FILE_T fh, union wtap_pseudo_header *pseudo_header,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "367:         return -1;",
          "368:     }",
          "371:     for (i = 0; i < packet_header->number_of_information_elements; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:     switch (wth->file_encap) {",
          "372:     case WTAP_ENCAP_ETHERNET:",
          "374:         pseudo_header->eth.fcs_len = 0;",
          "375:         break;",
          "376:     case WTAP_ENCAP_IEEE_802_11_WITH_RADIO:",
          "377:         pseudo_header->ieee_802_11.fcs_len = 0;",
          "378:         pseudo_header->ieee_802_11.decrypted = FALSE;",
          "379:         pseudo_header->ieee_802_11.datapad = FALSE;",
          "380:         pseudo_header->ieee_802_11.presence_flags = 0;",
          "382:         break;",
          "383:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "389:                                  err, err_info))",
          "390:                 return -1;",
          "393:                 PHDR_802_11_HAS_CHANNEL |",
          "394:                 PHDR_802_11_HAS_DATA_RATE |",
          "395:                 PHDR_802_11_HAS_SIGNAL_PERCENT;",
          "398:             pseudo_header->ieee_802_11.decrypted = (wireless_header.conditions & WIRELESS_WEP_SUCCESS) != 0;",
          "399:             pseudo_header->ieee_802_11.channel = wireless_header.frequency;",
          "",
          "[Removed Lines]",
          "392:             pseudo_header->ieee_802_11.presence_flags =",
          "396:             pseudo_header->ieee_802_11.fcs_len = 0;",
          "",
          "[Added Lines]",
          "407:             pseudo_header->ieee_802_11.presence_flags |=",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "484:         }",
          "485:     }",
          "498:     return TRUE;",
          "499: }",
          "",
          "[Removed Lines]",
          "488:     switch (wth->file_encap) {",
          "489:     case WTAP_ENCAP_ETHERNET:",
          "491:         phdr->pseudo_header.eth.fcs_len = 0;",
          "492:         break;",
          "493:     case WTAP_ENCAP_IEEE_802_11_WITH_RADIO:",
          "495:         break;",
          "496:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "wiretap/netxray.c||wiretap/netxray.c": [
          "File: wiretap/netxray.c -> wiretap/netxray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1251:     phdr->pseudo_header.ieee_802_11.fcs_len = 0;",
          "1253:    phdr->pseudo_header.ieee_802_11.decrypted = FALSE;",
          "1255:    phdr->pseudo_header.ieee_802_11.channel =",
          "1256:        hdr.hdr_2_x.xxx[12];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1254:    phdr->pseudo_header.ieee_802_11.datapad = FALSE;",
          "",
          "---------------"
        ],
        "wiretap/pcap-common.c||wiretap/pcap-common.c": [
          "File: wiretap/pcap-common.c -> wiretap/pcap-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1608:   phdr->pseudo_header.ieee_802_11.fcs_len = -1;",
          "1609:   phdr->pseudo_header.ieee_802_11.decrypted = FALSE;",
          "1610:   break;",
          "1612:  case WTAP_ENCAP_IRDA:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1609:   phdr->pseudo_header.ieee_802_11.datapad = FALSE;",
          "",
          "---------------"
        ],
        "wiretap/peekclassic.c||wiretap/peekclassic.c": [
          "File: wiretap/peekclassic.c -> wiretap/peekclassic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:  switch (wth->file_encap) {",
          "447:  case WTAP_ENCAP_IEEE_802_11_AIROPEEK:",
          "450:   phdr->pseudo_header.ieee_802_11.decrypted = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450:   phdr->pseudo_header.ieee_802_11.datapad = FALSE;",
          "",
          "---------------"
        ],
        "wiretap/peektagged.c||wiretap/peektagged.c": [
          "File: wiretap/peektagged.c -> wiretap/peektagged.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751:             skip_len = 4;",
          "752:         }",
          "753:         phdr->pseudo_header.ieee_802_11.decrypted = FALSE;",
          "754:         break;",
          "756:     case WTAP_ENCAP_ETHERNET:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:         phdr->pseudo_header.ieee_802_11.datapad = FALSE;",
          "",
          "---------------"
        ],
        "wiretap/snoop.c||wiretap/snoop.c": [
          "File: wiretap/snoop.c -> wiretap/snoop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:  if (file_seek(fh, rsize, SEEK_CUR, err) == -1)",
          "739:   return FALSE;",
          "741:  pseudo_header->ieee_802_11.presence_flags =",
          "742:      PHDR_802_11_HAS_CHANNEL |",
          "743:      PHDR_802_11_HAS_DATA_RATE |",
          "744:      PHDR_802_11_HAS_SIGNAL_PERCENT;",
          "746:  pseudo_header->ieee_802_11.channel = whdr.channel;",
          "747:  pseudo_header->ieee_802_11.data_rate = whdr.rate;",
          "748:  pseudo_header->ieee_802_11.signal_percent = whdr.signal;",
          "",
          "[Removed Lines]",
          "745:  pseudo_header->ieee_802_11.fcs_len = 4;",
          "",
          "[Added Lines]",
          "741:  pseudo_header->ieee_802_11.fcs_len = 4;",
          "742:  pseudo_header->ieee_802_11.decrypted = FALSE;",
          "743:  pseudo_header->ieee_802_11.datapad = FALSE;",
          "",
          "---------------"
        ],
        "wiretap/wtap.h||wiretap/wtap.h": [
          "File: wiretap/wtap.h -> wiretap/wtap.h"
        ]
      }
    },
    {
      "candidate_hash": "d9b36c46d025519a309bf34c1255e1f9a2856a41",
      "candidate_info": {
        "commit_hash": "d9b36c46d025519a309bf34c1255e1f9a2856a41",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/d9b36c46d025519a309bf34c1255e1f9a2856a41",
        "files": [
          "epan/dissectors/packet-ieee80211-radio.c",
          "epan/dissectors/packet-ieee80211-radiotap.c",
          "epan/dissectors/packet-ieee80211.c",
          "epan/dissectors/packet-ppi.c"
        ],
        "message": "Pass the 802.11 pseudo-header as an argument.\n\nRather than accessing it through pinfo->pseudo_header, have it passed as\nan argument.\n\nThis means we no longer tweak the pseudo-header filled in by libwiretap,\nbut instead construct our own pseudo-header, which is a bit cleaner.\n\nIt also opens up the possibility of other dissectors passing radio\ninformation down to the 802.11 dissector, so it can display it in a\nbetter-organized format than the raw metadata headers for\nradiotap/PPI/Prism/AVS/etc., and having some of the options for 802.11\ndissection (Atheros padding, Centrino stuff, etc.) also passed in\nthrough that pseudo-header so we have fewer arguments to\ndissect_ieee80211_common().\n\nChange-Id: I470300a0407ebf029c542f7ca5878593563a70a9\nReviewed-on: https://code.wireshark.org/review/8980\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-ieee80211-radio.c||epan/dissectors/packet-ieee80211-radio.c",
          "epan/dissectors/packet-ieee80211-radiotap.c||epan/dissectors/packet-ieee80211-radiotap.c",
          "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c",
          "epan/dissectors/packet-ppi.c||epan/dissectors/packet-ppi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ppi.c||epan/dissectors/packet-ppi.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ppi.c||epan/dissectors/packet-ppi.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ieee80211-radio.c||epan/dissectors/packet-ieee80211-radio.c": [
          "File: epan/dissectors/packet-ieee80211-radio.c -> epan/dissectors/packet-ieee80211-radio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "469: {",
          "470:   proto_item *ti = NULL;",
          "471:   proto_tree *radio_tree = NULL;",
          "",
          "[Removed Lines]",
          "467: static void",
          "468: dissect_radio (tvbuff_t * tvb, packet_info * pinfo, proto_tree * tree)",
          "",
          "[Added Lines]",
          "467: static int",
          "468: dissect_radio (tvbuff_t * tvb, packet_info * pinfo, proto_tree * tree, void *data)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "592:   pinfo->current_proto = \"IEEE 802.11\";",
          "594: }",
          "596: static hf_register_info hf_radio[] = {",
          "",
          "[Removed Lines]",
          "593:   call_dissector(ieee80211_handle, tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "593:   return call_dissector_with_data(ieee80211_handle, tvb, pinfo, tree, data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "652:   dissector_handle_t radio_handle;",
          "656:   dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_IEEE_802_11_WITH_RADIO,",
          "657:                      radio_handle);",
          "658:   ieee80211_handle = find_dissector(\"wlan\");",
          "",
          "[Removed Lines]",
          "655:   radio_handle = create_dissector_handle(dissect_radio, proto_radio);",
          "",
          "[Added Lines]",
          "655:   radio_handle = new_create_dissector_handle(dissect_radio, proto_radio);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ieee80211-radiotap.c||epan/dissectors/packet-ieee80211-radiotap.c": [
          "File: epan/dissectors/packet-ieee80211-radiotap.c -> epan/dissectors/packet-ieee80211-radiotap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:  struct _radiotap_info              *radiotap_info;",
          "587:  static struct _radiotap_info        rtp_info_arr;",
          "588:  struct ieee80211_radiotap_iterator  iter;",
          "591:  static struct radiotap_override overrides[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589:  struct ieee_802_11_phdr phdr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:  radiotap_info = &rtp_info_arr;",
          "604:  col_set_str(pinfo->cinfo, COL_PROTOCOL, \"WLAN\");",
          "605:  col_clear(pinfo->cinfo, COL_INFO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "606:  phdr.fcs_len = -1;",
          "607:  phdr.decrypted = FALSE;",
          "608:  phdr.presence_flags = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "828:   case IEEE80211_RADIOTAP_FLAGS: {",
          "829:    rflags = tvb_get_guint8(tvb, offset);",
          "830:    if (tree) {",
          "831:     proto_tree *flags_tree;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "836:    if (rflags & IEEE80211_RADIOTAP_F_FCS)",
          "837:     phdr.fcs_len = 4;",
          "838:    else",
          "839:     phdr.fcs_len = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1438:   proto_item_append_text(ti, \" (malformed)\");",
          "1439:  }",
          "1447:  hand_off_to_80211:",
          "1449:  next_tvb = tvb_new_subset_remaining(tvb, length);",
          "",
          "[Removed Lines]",
          "1442:  if (rflags & IEEE80211_RADIOTAP_F_FCS)",
          "1443:   pinfo->pseudo_header->ieee_802_11.fcs_len = 4;",
          "1444:  else",
          "1445:   pinfo->pseudo_header->ieee_802_11.fcs_len = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1454:  if (hdr_fcs_ti) {",
          "1462:    calc_fcs =",
          "",
          "[Removed Lines]",
          "1460:   if (tvb_length(next_tvb) >",
          "1461:       (unsigned int)pinfo->pseudo_header->ieee_802_11.fcs_len) {",
          "1463:        crc32_802_tvb(next_tvb,",
          "1464:         tvb_length(next_tvb) -",
          "1465:         pinfo->pseudo_header->ieee_802_11.fcs_len);",
          "",
          "[Added Lines]",
          "1460:   guint captured_length = tvb_captured_length(next_tvb);",
          "1461:   guint reported_length = tvb_reported_length(next_tvb);",
          "1462:   guint fcs_len = (phdr.fcs_len > 0) ? phdr.fcs_len : 0;",
          "1469:   if (captured_length >= reported_length &&",
          "1470:       captured_length > fcs_len) {",
          "1472:        crc32_802_tvb(next_tvb, tvb_length(next_tvb) - fcs_len);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1486:   }",
          "1487:  }",
          "1494:  tap_queue_packet(radiotap_tap, pinfo, radiotap_info);",
          "1495: }",
          "",
          "[Removed Lines]",
          "1490:  call_dissector((rflags & IEEE80211_RADIOTAP_F_DATAPAD) ?",
          "1491:          ieee80211_datapad_handle : ieee80211_handle,",
          "1492:          next_tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "1497:  call_dissector_with_data((rflags & IEEE80211_RADIOTAP_F_DATAPAD) ?",
          "1498:      ieee80211_datapad_handle : ieee80211_handle, next_tvb, pinfo,",
          "1499:      tree, &phdr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c": [
          "File: epan/dissectors/packet-ieee80211.c -> epan/dissectors/packet-ieee80211.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16565: dissect_ieee80211_common (tvbuff_t *tvb, packet_info *pinfo,",
          "16566:                           proto_tree *tree, gboolean fixed_length_header, gint fcs_len,",
          "16567:                           gboolean wlan_broken_fc, gboolean datapad,",
          "16569: {",
          "16570:   guint16          fcf, flags, frame_type_subtype, ctrl_fcf, ctrl_type_subtype;",
          "16571:   guint16          seq_control;",
          "",
          "[Removed Lines]",
          "16564: static void",
          "16568:                           gboolean is_ht, gboolean is_centrino)",
          "",
          "[Added Lines]",
          "16564: static int",
          "16568:                           gboolean is_ht, gboolean is_centrino,",
          "16569:                           struct ieee_802_11_phdr *phdr)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17703:       if (DATA_FRAME_IS_NULL(frame_type_subtype))",
          "17706:       if (!wlan_subdissector) {",
          "17707:         guint fnum = 0;",
          "",
          "[Removed Lines]",
          "17704:         return;",
          "",
          "[Added Lines]",
          "17705:         return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "17759:       break;",
          "17761:     case CONTROL_FRAME:",
          "17764:       break;",
          "17765:     default:",
          "17767:     }",
          "17769:   if (IS_PROTECTED(FCF_FLAGS(fcf))",
          "17771:       && (wlan_ignore_wep != WLAN_IGNORE_WEP_WO_IV)) {",
          "",
          "[Removed Lines]",
          "17762:       return;",
          "17763:         case EXTENSION_FRAME:",
          "17766:       return;",
          "17770:       && !pinfo->pseudo_header->ieee_802_11.decrypted",
          "",
          "[Added Lines]",
          "17763:       return tvb_captured_length(tvb);",
          "17765:     case EXTENSION_FRAME:",
          "17769:       return tvb_captured_length(tvb);",
          "17773:       && (phdr == NULL || !phdr->decrypted)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "18263:   whdr->stats = wlan_stats;",
          "18264:   tap_queue_packet(wlan_tap, pinfo, whdr);",
          "18265:   memset (&wlan_stats, 0, sizeof wlan_stats);",
          "18266: }",
          "18274: {",
          "18277: }",
          "",
          "[Removed Lines]",
          "18272: static void",
          "18273: dissect_ieee80211 (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18275:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE,",
          "18276:                             pinfo->pseudo_header->ieee_802_11.fcs_len, FALSE, FALSE, FALSE, FALSE);",
          "",
          "[Added Lines]",
          "18270:   return tvb_captured_length(tvb);",
          "18277: static int",
          "18278: dissect_ieee80211 (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "18280:   struct ieee_802_11_phdr *phdr = (struct ieee_802_11_phdr *)data;",
          "18282:   return dissect_ieee80211_common (tvb, pinfo, tree, FALSE,",
          "18283:                                    (phdr == NULL) ? -1 : phdr->fcs_len, FALSE, FALSE, FALSE, FALSE, phdr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "18283: static void",
          "18284: dissect_ieee80211_withfcs (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18285: {",
          "18287: }",
          "",
          "[Removed Lines]",
          "18286:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 4, FALSE, FALSE, FALSE, FALSE);",
          "",
          "[Added Lines]",
          "18293:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 4, FALSE, FALSE, FALSE, FALSE, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "18293: static void",
          "18294: dissect_ieee80211_withoutfcs (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18295: {",
          "18297: }",
          "18304: {",
          "18307: }",
          "18315: {",
          "18318: }",
          "",
          "[Removed Lines]",
          "18296:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 0, FALSE, FALSE, FALSE, FALSE);",
          "18302: static void",
          "18303: dissect_ieee80211_centrino(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18305:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE,",
          "18306:                             pinfo->pseudo_header->ieee_802_11.fcs_len, FALSE, FALSE, FALSE, TRUE);",
          "18313: static void",
          "18314: dissect_ieee80211_datapad (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18316:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE,",
          "18317:                             pinfo->pseudo_header->ieee_802_11.fcs_len, FALSE, TRUE, FALSE, FALSE);",
          "",
          "[Added Lines]",
          "18303:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 0, FALSE, FALSE, FALSE, FALSE, NULL);",
          "18309: static int",
          "18310: dissect_ieee80211_centrino(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "18312:   struct ieee_802_11_phdr *phdr = (struct ieee_802_11_phdr *)data;",
          "18314:   return dissect_ieee80211_common (tvb, pinfo, tree, FALSE,",
          "18315:                                    (phdr == NULL) ? -1 : phdr->fcs_len, FALSE, FALSE, FALSE, TRUE, phdr);",
          "18322: static int",
          "18323: dissect_ieee80211_datapad (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "18325:   struct ieee_802_11_phdr *phdr = (struct ieee_802_11_phdr *)data;",
          "18327:   return dissect_ieee80211_common (tvb, pinfo, tree, FALSE,",
          "18328:                                    (phdr == NULL) ? -1 : phdr->fcs_len, FALSE, TRUE, FALSE, FALSE, phdr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "18324: static void",
          "18325: dissect_ieee80211_datapad_withfcs (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18326: {",
          "18328: }",
          "",
          "[Removed Lines]",
          "18327:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 4, FALSE, TRUE, FALSE, FALSE);",
          "",
          "[Added Lines]",
          "18338:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 4, FALSE, TRUE, FALSE, FALSE, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "18334: static void",
          "18335: dissect_ieee80211_datapad_withoutfcs (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18336: {",
          "18338: }",
          "",
          "[Removed Lines]",
          "18337:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 0, FALSE, TRUE, FALSE, FALSE);",
          "",
          "[Added Lines]",
          "18348:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 0, FALSE, TRUE, FALSE, FALSE, NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "18345: static void",
          "18346: dissect_ieee80211_bsfc (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18347: {",
          "18349: }",
          "",
          "[Removed Lines]",
          "18348:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 0, TRUE, FALSE, FALSE, FALSE);",
          "",
          "[Added Lines]",
          "18359:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, 0, TRUE, FALSE, FALSE, FALSE, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "18355: static void",
          "18356: dissect_ieee80211_fixed (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18357: {",
          "18359: }",
          "",
          "[Removed Lines]",
          "18358:   dissect_ieee80211_common (tvb, pinfo, tree, TRUE, 0, FALSE, FALSE, FALSE, FALSE);",
          "",
          "[Added Lines]",
          "18369:   dissect_ieee80211_common (tvb, pinfo, tree, TRUE, 0, FALSE, FALSE, FALSE, FALSE, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "18368: {",
          "18371: }",
          "18373: static void",
          "",
          "[Removed Lines]",
          "18366: static void",
          "18367: dissect_ieee80211_ht (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "18369:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE,",
          "18370:                             pinfo->pseudo_header->ieee_802_11.fcs_len, FALSE, FALSE, TRUE, FALSE);",
          "",
          "[Added Lines]",
          "18377: static int",
          "18378: dissect_ieee80211_ht (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "18380:   struct ieee_802_11_phdr *phdr = (struct ieee_802_11_phdr *)data;",
          "18382:   return dissect_ieee80211_common (tvb, pinfo, tree, FALSE,",
          "18383:                                    (phdr == NULL) ? -1 : phdr->fcs_len, FALSE, FALSE, TRUE, FALSE, phdr);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "26914:   expert_ieee80211 = expert_register_protocol(proto_wlan);",
          "26915:   expert_register_field_array(expert_ieee80211, ei, array_length(ei));",
          "26918:   register_dissector(\"wlan_withfcs\",            dissect_ieee80211_withfcs,            proto_wlan);",
          "26919:   register_dissector(\"wlan_withoutfcs\",         dissect_ieee80211_withoutfcs,         proto_wlan);",
          "26920:   register_dissector(\"wlan_fixed\",              dissect_ieee80211_fixed,              proto_wlan);",
          "26921:   register_dissector(\"wlan_bsfc\",               dissect_ieee80211_bsfc,               proto_wlan);",
          "26923:   register_dissector(\"wlan_datapad_withfcs\",    dissect_ieee80211_datapad_withfcs,    proto_wlan);",
          "26924:   register_dissector(\"wlan_datapad_withoutfcs\", dissect_ieee80211_datapad_withoutfcs, proto_wlan);",
          "26927:   register_init_routine(wlan_defragment_init);",
          "26928:   register_init_routine(wlan_retransmit_init);",
          "",
          "[Removed Lines]",
          "26917:   register_dissector(\"wlan\",                    dissect_ieee80211,                    proto_wlan);",
          "26922:   register_dissector(\"wlan_datapad\",            dissect_ieee80211_datapad,            proto_wlan);",
          "26925:   register_dissector(\"wlan_ht\",                 dissect_ieee80211_ht,                 proto_wlan);",
          "",
          "[Added Lines]",
          "26930:   new_register_dissector(\"wlan\",                dissect_ieee80211,                    proto_wlan);",
          "26935:   new_register_dissector(\"wlan_datapad\",        dissect_ieee80211_datapad,            proto_wlan);",
          "26938:   new_register_dissector(\"wlan_ht\",             dissect_ieee80211_ht,                 proto_wlan);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "27146:   ieee80211_handle = find_dissector(\"wlan\");",
          "27147:   dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_IEEE_802_11, ieee80211_handle);",
          "27150:   dissector_add_uint(\"ethertype\", ETHERTYPE_CENTRINO_PROMISC, centrino_handle);",
          "",
          "[Removed Lines]",
          "27149:   centrino_handle = create_dissector_handle( dissect_ieee80211_centrino, proto_wlan );",
          "",
          "[Added Lines]",
          "27161:   dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_IEEE_802_11_WITH_RADIO, ieee80211_handle);",
          "27163:   centrino_handle = new_create_dissector_handle( dissect_ieee80211_centrino, proto_wlan );",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ppi.c||epan/dissectors/packet-ppi.c": [
          "File: epan/dissectors/packet-ppi.c -> epan/dissectors/packet-ppi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "333: static dissector_handle_t ppi_handle;",
          "335: static dissector_handle_t data_handle;",
          "336: static dissector_handle_t ieee80211_ht_handle;",
          "337: static dissector_handle_t ppi_gps_handle, ppi_vector_handle, ppi_sensor_handle, ppi_antenna_handle;",
          "338: static dissector_handle_t ppi_fnet_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336: static dissector_handle_t ieee80211_handle;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "478: static void",
          "480: {",
          "481:     proto_tree  *ftree;",
          "482:     proto_item  *ti;",
          "",
          "[Removed Lines]",
          "479: dissect_80211_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset, int data_len)",
          "",
          "[Added Lines]",
          "480: dissect_80211_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset, int data_len, struct ieee_802_11_phdr *phdr)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "498:     common_flags = tvb_get_letohs(tvb, offset + 8);",
          "499:     if (common_flags & DOT11_FLAG_HAVE_FCS)",
          "501:     else",
          "504:     csr = ptvcursor_new(ftree, tvb, offset);",
          "",
          "[Removed Lines]",
          "500:         pinfo->pseudo_header->ieee_802_11.fcs_len = 4;",
          "502:         pinfo->pseudo_header->ieee_802_11.fcs_len = 0;",
          "",
          "[Added Lines]",
          "501:         phdr->fcs_len = 4;",
          "503:         phdr->fcs_len = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "752:     guint          last_frame  = 0;",
          "753:     gboolean       is_ht       = FALSE;",
          "754:     gint len_remain, /*pad_len = 0,*/ ampdu_len = 0;",
          "756:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"PPI\");",
          "757:     col_clear(pinfo->cinfo, COL_INFO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "756:     struct ieee_802_11_phdr phdr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "790:     tot_len -= PPI_V0_HEADER_LEN;",
          "791:     offset += 8;",
          "793:     while (tot_len > 0) {",
          "794:         data_type = tvb_get_letohs(tvb, offset);",
          "795:         data_len = tvb_get_letohs(tvb, offset + 2) + 4;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "796:     phdr.fcs_len = -1;",
          "797:     phdr.decrypted = FALSE;",
          "798:     phdr.presence_flags = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "798:         switch (data_type) {",
          "799:             case PPI_80211_COMMON:",
          "801:                 break;",
          "803:             case PPI_80211N_MAC:",
          "",
          "[Removed Lines]",
          "800:                 dissect_80211_common(tvb, pinfo, ppi_tree, offset, data_len);",
          "",
          "[Added Lines]",
          "807:                 dissect_80211_common(tvb, pinfo, ppi_tree, offset, data_len,",
          "808:                     &phdr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "988:                     add_new_data_source(pinfo, next_tvb, mpdu_str);",
          "990:                     ampdu_tree = proto_tree_add_subtree(agg_tree, next_tvb, 0, -1, ett_ampdu_segment, NULL, mpdu_str);",
          "992:                 }",
          "993:                 fd_head = fd_head->next;",
          "994:             }",
          "",
          "[Removed Lines]",
          "991:                     call_dissector(ieee80211_ht_handle, next_tvb, pinfo, ampdu_tree);",
          "",
          "[Added Lines]",
          "999:                     call_dissector_with_data(ieee80211_ht_handle, next_tvb, pinfo, ampdu_tree, &phdr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1004:     }",
          "1006:     next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "1009:     } else {",
          "1010:         dissector_try_uint(wtap_encap_dissector_table,",
          "1011:             wtap_pcap_encap_to_wtap_encap(dlt), next_tvb, pinfo, tree);",
          "1012:     }",
          "",
          "[Removed Lines]",
          "1008:         call_dissector(ieee80211_ht_handle, next_tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "1026:     if (dlt == 105) {",
          "1029:             call_dissector_with_data(ieee80211_ht_handle, next_tvb, pinfo, tree, &phdr);",
          "1030:         } else {",
          "1031:             call_dissector_with_data(ieee80211_handle, next_tvb, pinfo, tree, &phdr);",
          "1032:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1376: proto_reg_handoff_ppi(void)",
          "1377: {",
          "1378:     data_handle = find_dissector(\"data\");",
          "1379:     ieee80211_ht_handle = find_dissector(\"wlan_ht\");",
          "1380:     ppi_gps_handle = find_dissector(\"ppi_gps\");",
          "1381:     ppi_vector_handle = find_dissector(\"ppi_vector\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1404:     ieee80211_handle = find_dissector(\"wlan\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b401fb03806286596e2fd93be11128bcc163cac1",
      "candidate_info": {
        "commit_hash": "b401fb03806286596e2fd93be11128bcc163cac1",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/b401fb03806286596e2fd93be11128bcc163cac1",
        "files": [
          "epan/dissectors/packet-ieee80211.c",
          "epan/dissectors/packet-ppi.c"
        ],
        "message": "Use the PHY type in the radio information to recognize HT packets.\n\nRather than having a separate \"802.11 HT\" dissector, just look for the\n802.11n (HT) PHY.\n\n(As a side-effect, This also causes PPI HT frames to have the radio\ninformation dissected by the wlan_radio dissector, as is the case with\nother 802.11 frames accompanied by radio information.)\n\nChange-Id: I854c42e19481a17767e64a3b92222b09dbaa02dd\nReviewed-on: https://code.wireshark.org/review/9185\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c",
          "epan/dissectors/packet-ppi.c||epan/dissectors/packet-ppi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ppi.c||epan/dissectors/packet-ppi.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ppi.c||epan/dissectors/packet-ppi.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c": [
          "File: epan/dissectors/packet-ieee80211.c -> epan/dissectors/packet-ieee80211.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16571: static int",
          "16572: dissect_ieee80211_common (tvbuff_t *tvb, packet_info *pinfo,",
          "16573:                           proto_tree *tree, gboolean fixed_length_header,",
          "16576: {",
          "16577:   guint16          fcf, flags, frame_type_subtype, ctrl_fcf, ctrl_type_subtype;",
          "16578:   guint16          seq_control;",
          "16579:   guint32          seq_number, frag_number;",
          "16580:   gboolean         more_frags;",
          "",
          "[Removed Lines]",
          "16574:                           gboolean wlan_broken_fc, gboolean is_ht,",
          "16575:                           gboolean is_centrino, struct ieee_802_11_phdr *phdr)",
          "",
          "[Added Lines]",
          "16574:                           gboolean wlan_broken_fc, gboolean is_centrino,",
          "16575:                           struct ieee_802_11_phdr *phdr)",
          "16578:   gboolean         is_ht;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16631:   else",
          "16632:     ctrl_fcf = 0;",
          "16634:   if (fixed_length_header)",
          "16635:     hdr_len = DATA_LONG_HDR_LEN;",
          "16636:   else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16635:   switch (phdr->phy) {",
          "16637:   case PHDR_802_11_PHY_UNKNOWN:",
          "16639:     break;",
          "16641:   case PHDR_802_11_PHY_11_FHSS:",
          "16642:   case PHDR_802_11_PHY_11_IR:",
          "16643:   case PHDR_802_11_PHY_11_DSSS:",
          "16644:   case PHDR_802_11_PHY_11B:",
          "16645:   case PHDR_802_11_PHY_11A:",
          "16646:   case PHDR_802_11_PHY_11G:",
          "16648:     break;",
          "16650:   case PHDR_802_11_PHY_11N:",
          "16652:     break;",
          "16654:   case PHDR_802_11_PHY_11AC:",
          "16656:     break;",
          "16657:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "18297:     ourphdr.presence_flags = 0;",
          "18298:     phdr = &ourphdr;",
          "18299:   }",
          "18301: }",
          "",
          "[Removed Lines]",
          "18300:   return dissect_ieee80211_common (tvb, pinfo, tree, FALSE, FALSE, FALSE, FALSE, phdr);",
          "",
          "[Added Lines]",
          "18324:   return dissect_ieee80211_common (tvb, pinfo, tree, FALSE, FALSE, FALSE, phdr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "18314:   phdr.decrypted = FALSE;",
          "18315:   phdr.datapad = FALSE;",
          "18316:   phdr.presence_flags = 0;",
          "18318: }",
          "",
          "[Removed Lines]",
          "18317:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, FALSE, FALSE, FALSE, &phdr);",
          "",
          "[Added Lines]",
          "18341:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, FALSE, FALSE, &phdr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "18331:   phdr.decrypted = FALSE;",
          "18332:   phdr.datapad = FALSE;",
          "18333:   phdr.presence_flags = 0;",
          "18335: }",
          "",
          "[Removed Lines]",
          "18334:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, FALSE, FALSE, FALSE, &phdr);",
          "",
          "[Added Lines]",
          "18358:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, FALSE, FALSE, &phdr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "18347:   phdr.decrypted = FALSE;",
          "18348:   phdr.datapad = FALSE;",
          "18349:   phdr.presence_flags = 0;",
          "18351: }",
          "",
          "[Removed Lines]",
          "18350:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, FALSE, FALSE, TRUE, &phdr);",
          "",
          "[Added Lines]",
          "18374:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, FALSE, TRUE, &phdr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "18365:   phdr.decrypted = FALSE;",
          "18366:   phdr.datapad = FALSE;",
          "18367:   phdr.presence_flags = 0;",
          "18369: }",
          "",
          "[Removed Lines]",
          "18368:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, TRUE, FALSE, FALSE, &phdr);",
          "",
          "[Added Lines]",
          "18392:   dissect_ieee80211_common (tvb, pinfo, tree, FALSE, TRUE, FALSE, &phdr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "18382:   phdr.decrypted = FALSE;",
          "18383:   phdr.datapad = FALSE;",
          "18384:   phdr.presence_flags = 0;",
          "18399: }",
          "18401: static void",
          "",
          "[Removed Lines]",
          "18385:   dissect_ieee80211_common (tvb, pinfo, tree, TRUE, FALSE, FALSE, FALSE, &phdr);",
          "18386: }",
          "18393: static int",
          "18394: dissect_ieee80211_ht (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "18395: {",
          "18396:   struct ieee_802_11_phdr *phdr = (struct ieee_802_11_phdr *)data;",
          "18398:   return dissect_ieee80211_common (tvb, pinfo, tree, FALSE, FALSE, TRUE, FALSE, phdr);",
          "",
          "[Added Lines]",
          "18409:   dissect_ieee80211_common (tvb, pinfo, tree, TRUE, FALSE, FALSE, &phdr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "26948:   register_dissector(\"wlan_withoutfcs\",         dissect_ieee80211_withoutfcs,         proto_wlan);",
          "26949:   register_dissector(\"wlan_fixed\",              dissect_ieee80211_fixed,              proto_wlan);",
          "26950:   register_dissector(\"wlan_bsfc\",               dissect_ieee80211_bsfc,               proto_wlan);",
          "26953:   register_init_routine(wlan_defragment_init);",
          "26954:   register_init_routine(wlan_retransmit_init);",
          "",
          "[Removed Lines]",
          "26951:   new_register_dissector(\"wlan_ht\",             dissect_ieee80211_ht,                 proto_wlan);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ppi.c||epan/dissectors/packet-ppi.c": [
          "File: epan/dissectors/packet-ppi.c -> epan/dissectors/packet-ppi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350: static dissector_handle_t data_handle;",
          "351: static dissector_handle_t ieee80211_radio_handle;",
          "353: static dissector_handle_t ppi_gps_handle, ppi_vector_handle, ppi_sensor_handle, ppi_antenna_handle;",
          "354: static dissector_handle_t ppi_fnet_handle;",
          "",
          "[Removed Lines]",
          "352: static dissector_handle_t ieee80211_ht_handle;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "865:     gchar         *mpdu_str;",
          "866:     gboolean       first_mpdu  = TRUE;",
          "867:     guint          last_frame  = 0;",
          "869:     gint len_remain, /*pad_len = 0,*/ ampdu_len = 0;",
          "870:     struct ieee_802_11_phdr phdr;",
          "",
          "[Removed Lines]",
          "868:     gboolean       is_ht       = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "927:         case PPI_80211N_MAC:",
          "928:             dissect_80211n_mac(tvb, pinfo, ppi_tree, offset, data_len,",
          "929:                 TRUE, &n_ext_flags, &ampdu_id, &phdr);",
          "931:             break;",
          "933:         case PPI_80211N_MAC_PHY:",
          "934:             dissect_80211n_mac_phy(tvb, pinfo, ppi_tree, offset,",
          "935:                 data_len, &n_ext_flags, &ampdu_id, &phdr);",
          "937:             break;",
          "939:         case PPI_SPECTRUM_MAP:",
          "",
          "[Removed Lines]",
          "930:             is_ht = TRUE;",
          "936:             is_ht = TRUE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1117:                     add_new_data_source(pinfo, next_tvb, mpdu_str);",
          "1119:                     ampdu_tree = proto_tree_add_subtree(agg_tree, next_tvb, 0, -1, ett_ampdu_segment, NULL, mpdu_str);",
          "1121:                 }",
          "1122:                 fd_head = fd_head->next;",
          "1123:             }",
          "",
          "[Removed Lines]",
          "1120:                     call_dissector_with_data(ieee80211_ht_handle, next_tvb, pinfo, ampdu_tree, &phdr);",
          "",
          "[Added Lines]",
          "1116:                     call_dissector_with_data(ieee80211_radio_handle, next_tvb, pinfo, ampdu_tree, &phdr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1147:     if (dlt == 105) {",
          "1154:     } else {",
          "1156:         dissector_try_uint(wtap_encap_dissector_table,",
          "",
          "[Removed Lines]",
          "1150:             call_dissector_with_data(ieee80211_ht_handle, next_tvb, pinfo, tree, &phdr);",
          "1151:         } else {",
          "1152:             call_dissector_with_data(ieee80211_radio_handle, next_tvb, pinfo, tree, &phdr);",
          "1153:         }",
          "",
          "[Added Lines]",
          "1145:         call_dissector_with_data(ieee80211_radio_handle, next_tvb, pinfo, tree, &phdr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1523: {",
          "1524:     data_handle = find_dissector(\"data\");",
          "1525:     ieee80211_radio_handle = find_dissector(\"wlan_radio\");",
          "1527:     ppi_gps_handle = find_dissector(\"ppi_gps\");",
          "1528:     ppi_vector_handle = find_dissector(\"ppi_vector\");",
          "1529:     ppi_sensor_handle = find_dissector(\"ppi_sensor\");",
          "",
          "[Removed Lines]",
          "1526:     ieee80211_ht_handle = find_dissector(\"wlan_ht\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}