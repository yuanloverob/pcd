{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6f88359df642aea1224782bbe409c30bca902550",
      "candidate_info": {
        "commit_hash": "6f88359df642aea1224782bbe409c30bca902550",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6f88359df642aea1224782bbe409c30bca902550",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "src/window.c"
        ],
        "message": "Fix issues with the previous check-in and add more VDBE branch coverage testing macros.\n\nFossilOrigin-Name: b5f72f10f2dfdbee9fe98c63ffb933e841203790746a920b99df14ca5c14127c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f24066f8dd847dfb656f26c4a8142e7fb6a412ffe325aea6254cb122cfbb3e1c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2197:         u32 x = pLevel->iLikeRepCntr;",
          "2198:         if( x>0 ){",
          "2199:           skipLikeAddr = sqlite3VdbeAddOp1(v, (x&1)?OP_IfNot:OP_If,(int)(x>>1));",
          "2200:         }",
          "2202: #endif",
          "2203:       }",
          "",
          "[Removed Lines]",
          "2201:         VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2200:           VdbeCoverageIf(v, (x&1)==1);",
          "2201:           VdbeCoverageIf(v, (x&1)==0);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1310:     sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1311:     sqlite3VdbeAddOp3(v, OP_Ge, regString, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1312:     sqlite3VdbeChangeP5(v, SQLITE_AFF_NUMERIC);",
          "1313:   }else{",
          "1314:     sqlite3VdbeAddOp2(v, OP_MustBeInt, reg, sqlite3VdbeCurrentAddr(v)+2);",
          "1315:   }",
          "1321:   sqlite3VdbeAddOp3(v, aOp[eCond], regZero, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1322:   VdbeCoverageNeverNullIf(v, eCond==0);",
          "1323:   VdbeCoverageNeverNullIf(v, eCond==1);",
          "",
          "[Removed Lines]",
          "1316:   VdbeCoverageIf(v, eCond==0);",
          "1317:   VdbeCoverageIf(v, eCond==1);",
          "1318:   VdbeCoverageIf(v, eCond==2);",
          "1319:   VdbeCoverageIf(v, eCond==3);",
          "1320:   VdbeCoverageIf(v, eCond==4);",
          "",
          "[Added Lines]",
          "1313:     VdbeCoverage(v);",
          "1314:     assert( eCond==3 || eCond==4 );",
          "1315:     VdbeCoverageIf(v, eCond==3);",
          "1316:     VdbeCoverageIf(v, eCond==4);",
          "1319:     VdbeCoverage(v);",
          "1320:     assert( eCond==0 || eCond==1 || eCond==2 );",
          "1321:     VdbeCoverageIf(v, eCond==0);",
          "1322:     VdbeCoverageIf(v, eCond==1);",
          "1323:     VdbeCoverageIf(v, eCond==2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1833:   VdbeCoverage(v);",
          "1834:   sqlite3VdbeAddOp3(v, arith, regVal, reg1, reg1);",
          "1835:   sqlite3VdbeJumpHere(v, addrGe);",
          "1837:   sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "1843:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1844:   sqlite3ReleaseTempReg(pParse, reg2);",
          "",
          "[Removed Lines]",
          "1836:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1838:   assert( op==OP_Ge || op==OP_Gt || op==OP_Le );",
          "1839:   VdbeCoverageIf(v, op==OP_Ge);",
          "1840:   VdbeCoverageIf(v, op==OP_Gt);",
          "1841:   VdbeCoverageIf(v, op==OP_Le);",
          "",
          "[Added Lines]",
          "1840:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1); VdbeCoverage(v);",
          "1842:   assert( op==OP_Ge || op==OP_Gt || op==OP_Lt || op==OP_Le );",
          "1843:   testcase(op==OP_Ge); VdbeCoverageIf(v, op==OP_Ge);",
          "1844:   testcase(op==OP_Lt); VdbeCoverageIf(v, op==OP_Lt);",
          "1845:   testcase(op==OP_Le); VdbeCoverageIf(v, op==OP_Le);",
          "1846:   testcase(op==OP_Gt); VdbeCoverageIf(v, op==OP_Gt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2536:   if( pMWin->eStart==pMWin->eEnd && regStart ){",
          "2537:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2538:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2539:     VdbeCoverageIf(v, op==OP_Ge);",
          "2540:     VdbeCoverageIf(v, op==OP_Le);",
          "2541:     windowAggFinal(&s, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2544:     VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3196abb7cb7aec87656bb8e299319ba55e35a3a4",
      "candidate_info": {
        "commit_hash": "3196abb7cb7aec87656bb8e299319ba55e35a3a4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3196abb7cb7aec87656bb8e299319ba55e35a3a4",
        "files": [
          "ext/session/sqlite3session.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix harmless compiler warning in the session extension.\n\nFossilOrigin-Name: dff823ca8b5ca4a5611407b0231f89b2e8c981f50e85e361e76d3e4973cea8ca",
        "before_after_code_files": [
          "ext/session/sqlite3session.c||ext/session/sqlite3session.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sqlite3session.c||ext/session/sqlite3session.c": [
          "File: ext/session/sqlite3session.c -> ext/session/sqlite3session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1832: static int sessionBufferGrow(SessionBuffer *p, size_t nByte, int *pRc){",
          "1834:     u8 *aNew;",
          "1835:     i64 nNew = p->nAlloc ? p->nAlloc : 128;",
          "1836:     do {",
          "",
          "[Removed Lines]",
          "1833:   if( *pRc==SQLITE_OK && p->nAlloc-p->nBuf<nByte ){",
          "",
          "[Added Lines]",
          "1833:   if( *pRc==SQLITE_OK && (size_t)(p->nAlloc-p->nBuf)<nByte ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d612fb7873cf59dfda18cabe45f674c37aa78a4587de3378b1840c99465a0269",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "569b1d9119c0b05564236f1494c5c328e3fcc757",
      "candidate_info": {
        "commit_hash": "569b1d9119c0b05564236f1494c5c328e3fcc757",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/569b1d9119c0b05564236f1494c5c328e3fcc757",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Omit the \".progress\" command from the shell if it is compiled with the SQLITE_OMIT_PROGRESS_CALLBACK option.\n\nFossilOrigin-Name: 4d0a949fd92e19fbf243a2e3a1a7c2cdb111f9a6943949d2420dd846bc7d9285",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2f468da4e9fb3edb5e902fa5d3c528726d1fb64d749d29e558ba3243c76bcb95",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1792:   }",
          "1793: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1795: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3496:   \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",",
          "3497:   \"     If FILE begins with '|' then open it as a pipe.\",",
          "3498:   \".print STRING...         Print literal STRING\",",
          "3499:   \".progress N              Invoke progress handler after every N opcodes\",",
          "3500:   \"   --limit N                 Interrupt after N progress callbacks\",",
          "3501:   \"   --once                    Do no more than one progress interrupt\",",
          "3502:   \"   --quiet|-q                No output except at interrupts\",",
          "3503:   \"   --reset                   Reset the count for each input and interrupt\",",
          "3504:   \".prompt MAIN CONTINUE    Replace the standard prompts\",",
          "3505:   \".quit                    Exit this program\",",
          "3506:   \".read FILE               Read input from FILE\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3501: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "3507: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7033:     raw_printf(p->out, \"\\n\");",
          "7034:   }else",
          "7036:   if( c=='p' && n>=3 && strncmp(azArg[0], \"progress\", n)==0 ){",
          "7037:     int i;",
          "7038:     int nn = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7040: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2566c4132bc85ec7a11bd2ce0bf012e24817cee",
      "candidate_info": {
        "commit_hash": "f2566c4132bc85ec7a11bd2ce0bf012e24817cee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f2566c4132bc85ec7a11bd2ce0bf012e24817cee",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeapi.c"
        ],
        "message": "Improved comments on the elements of the array constant used to implement the sqlite3_value_type() interface.\n\nFossilOrigin-Name: f73a7de7a53f6aa6517221550a9c9882893206edfd7433e80e5fc0f441db9fc4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeapi.c||src/vdbeapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dba836e31cb29d339b4520acb06188a892a52e45c50aba9742966b01108e251a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c"
        ]
      }
    },
    {
      "candidate_hash": "804725a6b9ea8ba9ef507866b1d8d2628d1e4356",
      "candidate_info": {
        "commit_hash": "804725a6b9ea8ba9ef507866b1d8d2628d1e4356",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/804725a6b9ea8ba9ef507866b1d8d2628d1e4356",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "test/fts3auto.test"
        ],
        "message": "Improvements to detection of corruption in the %_stat shadow table of FTS4.\n\nFossilOrigin-Name: 6b67eba54e7b4887a8cdab7537b12a95e9f17bcdaa0b423af5ed5bd91f69f2c6",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3auto.test||test/fts3auto.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4895:     rc = sqlite3Fts3SelectDoctotal(p, &pStmt);",
          "4896:     if( rc!=SQLITE_OK ) return rc;",
          "4897:     a = sqlite3_column_blob(pStmt, 0);",
          "4904:     }",
          "4905:     if( nDoc==0 || nByte==0 ){",
          "4906:       sqlite3_reset(pStmt);",
          "",
          "[Removed Lines]",
          "4898:     assert( a );",
          "4900:     pEnd = &a[sqlite3_column_bytes(pStmt, 0)];",
          "4901:     a += sqlite3Fts3GetVarint(a, &nDoc);",
          "4902:     while( a<pEnd ){",
          "4903:       a += sqlite3Fts3GetVarint(a, &nByte);",
          "",
          "[Added Lines]",
          "4899:     if( a ){",
          "4900:       pEnd = &a[sqlite3_column_bytes(pStmt, 0)];",
          "4901:       a += sqlite3Fts3GetVarintBounded(a, pEnd, &nDoc);",
          "4902:       while( a<pEnd ){",
          "4903:         a += sqlite3Fts3GetVarintBounded(a, pEnd, &nByte);",
          "4904:       }",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1056:   assert( sqlite3_data_count(pStmt)==1 );",
          "1058:   n = sqlite3_column_bytes(pStmt, 0);",
          "1062:   a = sqlite3_column_blob(pStmt, 0);",
          "1063:   if( a==0 ){",
          "1065:   }",
          "1066:   pEnd = a + n;",
          "1067:   a += sqlite3Fts3GetVarintBounded(a, pEnd, &nDoc);",
          "",
          "[Removed Lines]",
          "1059:   if( n==0 ){",
          "1060:     return FTS_CORRUPT_VTAB;",
          "1061:   }",
          "1064:     return SQLITE_NOMEM;",
          "",
          "[Added Lines]",
          "1061:     return FTS_CORRUPT_VTAB;",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:   sqlite3_bind_text(pStmt, 1, zName, -1, SQLITE_STATIC);",
          "392:   if( SQLITE_ROW==sqlite3_step(pStmt) ){",
          "394:       memcpy((void *)pp, sqlite3_column_blob(pStmt, 0), sizeof(*pp));",
          "395:     }",
          "396:   }",
          "",
          "[Removed Lines]",
          "393:     if( sqlite3_column_type(pStmt, 0)==SQLITE_BLOB ){",
          "",
          "[Added Lines]",
          "393:     if( sqlite3_column_type(pStmt, 0)==SQLITE_BLOB",
          "394:      && sqlite3_column_bytes(pStmt, 0)==sizeof(*pp)",
          "395:     ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e35d8c76aae59f57cc5193f79b21b4298029bea78e1aab7af67432162ce63e00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3auto.test||test/fts3auto.test": [
          "File: test/fts3auto.test -> test/fts3auto.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:   do_fts3query_test 4.$tn.4.3 -deferred fi* t1 {on* NEAR/1 fi*}",
          "571:   do_fts3query_test 4.$tn.4.4 -deferred fi* t1 {on* NEAR/2 fi*}",
          "572:   do_fts3query_test 4.$tn.4.5 -deferred fi* t1 {on* NEAR/3 fi*}",
          "573: }",
          "575: #--------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:   db eval {UPDATE t1_stat SET value=x'' WHERE id=0}",
          "575:   do_catchsql_test 4.$tn.4.6 {",
          "576:     SELECT docid FROM t1 WHERE t1 MATCH 'on* NEAR/3 fi*'",
          "577:   } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}