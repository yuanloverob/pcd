{
  "cve_id": "CVE-2013-0855",
  "cve_desc": "Integer overflow in the alac_decode_close function in libavcodec/alac.c in FFmpeg before 1.1 allows remote attackers to have an unspecified impact via a large number of samples per frame in Apple Lossless Audio Codec (ALAC) data, which triggers an out-of-bounds array access.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "3920d1387834e2bc334aff9f518f4beb24e470bd",
  "patch_info": {
    "commit_hash": "3920d1387834e2bc334aff9f518f4beb24e470bd",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/3920d1387834e2bc334aff9f518f4beb24e470bd",
    "files": [
      "libavcodec/alac.c"
    ],
    "message": "alac: fix integer overflow leading to subsequent out of array accesses.\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/alac.c||libavcodec/alac.c"
    ]
  },
  "patch_diff": {
    "libavcodec/alac.c||libavcodec/alac.c": [
      "File: libavcodec/alac.c -> libavcodec/alac.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "542: static int allocate_buffers(ALACContext *alac)",
      "543: {",
      "544:     int ch;",
      "547:     for (ch = 0; ch < FFMIN(alac->channels, 2); ch++) {",
      "548:         FF_ALLOC_OR_GOTO(alac->avctx, alac->predict_error_buffer[ch],",
      "",
      "[Removed Lines]",
      "545:     int buf_size = alac->max_samples_per_frame * sizeof(int32_t);",
      "",
      "[Added Lines]",
      "545:     int buf_size;",
      "547:     if (alac->max_samples_per_frame > INT_MAX / sizeof(int32_t))",
      "548:         goto buf_alloc_fail;",
      "549:     buf_size = alac->max_samples_per_frame * sizeof(int32_t);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c8c9740ee1ea4a4f857a24b1ce05dcd07b72ec2d",
      "candidate_info": {
        "commit_hash": "c8c9740ee1ea4a4f857a24b1ce05dcd07b72ec2d",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/c8c9740ee1ea4a4f857a24b1ce05dcd07b72ec2d",
        "files": [
          "libavcodec/alac.c"
        ],
        "message": "alac: fix integer overflow leading to subsequent out of array accesses.\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 3920d1387834e2bc334aff9f518f4beb24e470bd)",
        "before_after_code_files": [
          "libavcodec/alac.c||libavcodec/alac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ],
          "candidate": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/alac.c||libavcodec/alac.c": [
          "File: libavcodec/alac.c -> libavcodec/alac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "542: static int allocate_buffers(ALACContext *alac)",
          "543: {",
          "544:     int ch;",
          "547:     for (ch = 0; ch < FFMIN(alac->channels, 2); ch++) {",
          "548:         FF_ALLOC_OR_GOTO(alac->avctx, alac->predict_error_buffer[ch],",
          "",
          "[Removed Lines]",
          "545:     int buf_size = alac->max_samples_per_frame * sizeof(int32_t);",
          "",
          "[Added Lines]",
          "545:     int buf_size;",
          "547:     if (alac->max_samples_per_frame > INT_MAX / sizeof(int32_t))",
          "548:         goto buf_alloc_fail;",
          "549:     buf_size = alac->max_samples_per_frame * sizeof(int32_t);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "836e8b9ba0d80ce03b0664f97245f8f3ac43d145",
      "candidate_info": {
        "commit_hash": "836e8b9ba0d80ce03b0664f97245f8f3ac43d145",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/836e8b9ba0d80ce03b0664f97245f8f3ac43d145",
        "files": [
          "libavcodec/alac.c"
        ],
        "message": "alac: cosmetics: rename some ALACContext parameters",
        "before_after_code_files": [
          "libavcodec/alac.c||libavcodec/alac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ],
          "candidate": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/alac.c||libavcodec/alac.c": [
          "File: libavcodec/alac.c -> libavcodec/alac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     AVFrame frame;",
          "62:     GetBitContext gb;",
          "71:     int32_t *extra_bits_buffer[MAX_CHANNELS];",
          "80: } ALACContext;",
          "",
          "[Removed Lines]",
          "64:     int numchannels;",
          "67:     int32_t *predicterror_buffer[MAX_CHANNELS];",
          "69:     int32_t *outputsamples_buffer[MAX_CHANNELS];",
          "73:     uint32_t setinfo_max_samples_per_frame;",
          "74:     uint8_t setinfo_sample_size;",
          "75:     uint8_t setinfo_rice_historymult;",
          "76:     uint8_t setinfo_rice_initialhistory;",
          "77:     uint8_t setinfo_rice_kmodifier;",
          "",
          "[Added Lines]",
          "64:     int channels;",
          "67:     int32_t *predict_error_buffer[MAX_CHANNELS];",
          "68:     int32_t *output_samples_buffer[MAX_CHANNELS];",
          "71:     uint32_t max_samples_per_frame;",
          "72:     uint8_t  sample_size;",
          "73:     uint8_t  rice_history_mult;",
          "74:     uint8_t  rice_initial_history;",
          "75:     uint8_t  rice_limit;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:                                         int32_t *output_buffer,",
          "110:                                         int output_size,",
          "111:                                         int readsamplesize,",
          "115:                                         int rice_kmodifier_mask)",
          "116: {",
          "117:     int output_count;",
          "119:     int sign_modifier = 0;",
          "121:     for (output_count = 0; output_count < output_size; output_count++) {",
          "",
          "[Removed Lines]",
          "112:                                         int rice_initialhistory,",
          "113:                                         int rice_kmodifier,",
          "114:                                         int rice_historymult,",
          "118:     unsigned int history = rice_initialhistory;",
          "",
          "[Added Lines]",
          "110:                                         int rice_initial_history,",
          "111:                                         int rice_limit,",
          "112:                                         int rice_history_mult,",
          "116:     unsigned int history = rice_initial_history;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:         k = av_log2((history >> 9) + 3);",
          "133:         x_modified = sign_modifier + x;",
          "134:         final_val = (x_modified + 1) / 2;",
          "",
          "[Removed Lines]",
          "131:         x= decode_scalar(&alac->gb, k, rice_kmodifier, readsamplesize);",
          "",
          "[Added Lines]",
          "129:         x= decode_scalar(&alac->gb, k, rice_limit, readsamplesize);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:         sign_modifier = 0;",
          "145:         if (x_modified > 0xffff)",
          "146:             history = 0xffff;",
          "",
          "[Removed Lines]",
          "142:         history += x_modified * rice_historymult",
          "143:                    - ((history * rice_historymult) >> 9);",
          "",
          "[Added Lines]",
          "140:         history += x_modified * rice_history_mult -",
          "141:                     ((history * rice_history_mult) >> 9);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:             k = 7 - av_log2(history) + ((history + 16) >> 6 /* / 64 */);",
          "159:             if (block_size > 0) {",
          "160:                 if(block_size >= output_size - output_count){",
          "",
          "[Removed Lines]",
          "157:             block_size= decode_scalar(&alac->gb, k, rice_kmodifier, 16);",
          "",
          "[Added Lines]",
          "155:             block_size = decode_scalar(&alac->gb, k, rice_limit, 16);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "377:     if (hassize) {",
          "379:         outputsamples = get_bits_long(&alac->gb, 32);",
          "382:             return -1;",
          "383:         }",
          "384:     } else",
          "388:     if (outputsamples > INT32_MAX) {",
          "",
          "[Removed Lines]",
          "380:         if(outputsamples > alac->setinfo_max_samples_per_frame){",
          "381:             av_log(avctx, AV_LOG_ERROR, \"outputsamples %d > %d\\n\", outputsamples, alac->setinfo_max_samples_per_frame);",
          "385:         outputsamples = alac->setinfo_max_samples_per_frame;",
          "",
          "[Added Lines]",
          "378:         if (outputsamples > alac->max_samples_per_frame) {",
          "379:             av_log(avctx, AV_LOG_ERROR, \"outputsamples %d > %d\\n\",",
          "380:                    outputsamples, alac->max_samples_per_frame);",
          "384:         outputsamples = alac->max_samples_per_frame;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "395:         return ret;",
          "396:     }",
          "399:     if (readsamplesize > MIN_CACHE_BITS) {",
          "400:         av_log(avctx, AV_LOG_ERROR, \"readsamplesize too big (%d)\\n\", readsamplesize);",
          "401:         return -1;",
          "",
          "[Removed Lines]",
          "398:     readsamplesize = alac->setinfo_sample_size - alac->extra_bits + channels - 1;",
          "",
          "[Added Lines]",
          "397:     readsamplesize = alac->sample_size - alac->extra_bits + channels - 1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "432:         }",
          "433:         for (ch = 0; ch < channels; ch++) {",
          "434:             bastardized_rice_decompress(alac,",
          "436:                                         outputsamples,",
          "437:                                         readsamplesize,",
          "444:             if (prediction_type[ch] == 15) {",
          "",
          "[Removed Lines]",
          "435:                                         alac->predicterror_buffer[ch],",
          "438:                                         alac->setinfo_rice_initialhistory,",
          "439:                                         alac->setinfo_rice_kmodifier,",
          "440:                                         ricemodifier[ch] * alac->setinfo_rice_historymult / 4,",
          "441:                                         (1 << alac->setinfo_rice_kmodifier) - 1);",
          "",
          "[Added Lines]",
          "434:                                         alac->predict_error_buffer[ch],",
          "437:                                         alac->rice_initial_history,",
          "438:                                         alac->rice_limit,",
          "439:                                         ricemodifier[ch] * alac->rice_history_mult / 4,",
          "440:                                         (1 << alac->rice_limit) - 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "454:                                                outputsamples, readsamplesize,",
          "455:                                                NULL, 31, 0);",
          "456:             } else if (prediction_type[ch] > 0) {",
          "457:                 av_log(avctx, AV_LOG_WARNING, \"unknown prediction type: %i\\n\",",
          "458:                        prediction_type[ch]);",
          "459:             }",
          "462:                                            outputsamples, readsamplesize,",
          "463:                                            predictor_coef_table[ch],",
          "464:                                            predictor_coef_num[ch],",
          "",
          "[Removed Lines]",
          "452:                 predictor_decompress_fir_adapt(alac->predicterror_buffer[ch],",
          "453:                                                alac->predicterror_buffer[ch],",
          "460:             predictor_decompress_fir_adapt(alac->predicterror_buffer[ch],",
          "461:                                            alac->outputsamples_buffer[ch],",
          "",
          "[Added Lines]",
          "451:                 predictor_decompress_fir_adapt(alac->predict_error_buffer[ch],",
          "452:                                                alac->predict_error_buffer[ch],",
          "459:             predictor_decompress_fir_adapt(alac->predict_error_buffer[ch],",
          "460:                                            alac->output_samples_buffer[ch],",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "469:         for (i = 0; i < outputsamples; i++) {",
          "470:             for (ch = 0; ch < channels; ch++) {",
          "473:             }",
          "474:         }",
          "475:         alac->extra_bits = 0;",
          "",
          "[Removed Lines]",
          "471:                 alac->outputsamples_buffer[ch][i] = get_sbits_long(&alac->gb,",
          "472:                                                                    alac->setinfo_sample_size);",
          "",
          "[Added Lines]",
          "470:                 alac->output_samples_buffer[ch][i] = get_sbits_long(&alac->gb,",
          "471:                                                                     alac->sample_size);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "480:         av_log(avctx, AV_LOG_ERROR, \"Error : Wrong End Of Frame\\n\");",
          "482:     if (channels == 2 && interlacing_leftweight) {",
          "484:                            interlacing_shift, interlacing_leftweight);",
          "485:     }",
          "487:     if (alac->extra_bits) {",
          "490:     }",
          "493:     case 16:",
          "494:         if (channels == 2) {",
          "496:                                  (int16_t *)alac->frame.data[0], outputsamples);",
          "497:         } else {",
          "498:             int16_t *outbuffer = (int16_t *)alac->frame.data[0];",
          "499:             for (i = 0; i < outputsamples; i++) {",
          "501:             }",
          "502:         }",
          "503:         break;",
          "504:     case 24:",
          "505:         if (channels == 2) {",
          "507:                                  (int32_t *)alac->frame.data[0], outputsamples);",
          "508:         } else {",
          "509:             int32_t *outbuffer = (int32_t *)alac->frame.data[0];",
          "510:             for (i = 0; i < outputsamples; i++)",
          "512:         }",
          "513:         break;",
          "514:     }",
          "",
          "[Removed Lines]",
          "483:         decorrelate_stereo(alac->outputsamples_buffer, outputsamples,",
          "488:         append_extra_bits(alac->outputsamples_buffer, alac->extra_bits_buffer,",
          "489:                           alac->extra_bits, alac->numchannels, outputsamples);",
          "492:     switch(alac->setinfo_sample_size) {",
          "495:             interleave_stereo_16(alac->outputsamples_buffer,",
          "500:                 outbuffer[i] = alac->outputsamples_buffer[0][i];",
          "506:             interleave_stereo_24(alac->outputsamples_buffer,",
          "511:                 outbuffer[i] = alac->outputsamples_buffer[0][i] << 8;",
          "",
          "[Added Lines]",
          "482:         decorrelate_stereo(alac->output_samples_buffer, outputsamples,",
          "487:         append_extra_bits(alac->output_samples_buffer, alac->extra_bits_buffer,",
          "488:                           alac->extra_bits, alac->channels, outputsamples);",
          "491:     switch(alac->sample_size) {",
          "494:             interleave_stereo_16(alac->output_samples_buffer,",
          "499:                 outbuffer[i] = alac->output_samples_buffer[0][i];",
          "505:             interleave_stereo_24(alac->output_samples_buffer,",
          "510:                 outbuffer[i] = alac->output_samples_buffer[0][i] << 8;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "527:     ALACContext *alac = avctx->priv_data;",
          "529:     int ch;",
          "533:         av_freep(&alac->extra_bits_buffer[ch]);",
          "534:     }",
          "",
          "[Removed Lines]",
          "530:     for (ch = 0; ch < alac->numchannels; ch++) {",
          "531:         av_freep(&alac->predicterror_buffer[ch]);",
          "532:         av_freep(&alac->outputsamples_buffer[ch]);",
          "",
          "[Added Lines]",
          "529:     for (ch = 0; ch < alac->channels; ch++) {",
          "530:         av_freep(&alac->predict_error_buffer[ch]);",
          "531:         av_freep(&alac->output_samples_buffer[ch]);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "539: static int allocate_buffers(ALACContext *alac)",
          "540: {",
          "541:     int ch;",
          "546:                          buf_size, buf_alloc_fail);",
          "549:                          buf_size, buf_alloc_fail);",
          "551:         FF_ALLOC_OR_GOTO(alac->avctx, alac->extra_bits_buffer[ch],",
          "",
          "[Removed Lines]",
          "542:     for (ch = 0; ch < alac->numchannels; ch++) {",
          "543:         int buf_size = alac->setinfo_max_samples_per_frame * sizeof(int32_t);",
          "545:         FF_ALLOC_OR_GOTO(alac->avctx, alac->predicterror_buffer[ch],",
          "548:         FF_ALLOC_OR_GOTO(alac->avctx, alac->outputsamples_buffer[ch],",
          "",
          "[Added Lines]",
          "541:     for (ch = 0; ch < alac->channels; ch++) {",
          "542:         int buf_size = alac->max_samples_per_frame * sizeof(int32_t);",
          "544:         FF_ALLOC_OR_GOTO(alac->avctx, alac->predict_error_buffer[ch],",
          "547:         FF_ALLOC_OR_GOTO(alac->avctx, alac->output_samples_buffer[ch],",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "567:     bytestream2_skipu(&gb, 12); // size:4, alac:4, version:4",
          "571:         av_log(alac->avctx, AV_LOG_ERROR,",
          "573:         return AVERROR_INVALIDDATA;",
          "574:     }",
          "575:     bytestream2_skipu(&gb, 1);  // compatible version",
          "581:     bytestream2_get_be16u(&gb); // maxRun",
          "582:     bytestream2_get_be32u(&gb); // max coded frame size",
          "583:     bytestream2_get_be32u(&gb); // average bitrate",
          "",
          "[Removed Lines]",
          "569:     alac->setinfo_max_samples_per_frame = bytestream2_get_be32u(&gb);",
          "570:     if (alac->setinfo_max_samples_per_frame >= UINT_MAX/4){",
          "572:                \"setinfo_max_samples_per_frame too large\\n\");",
          "576:     alac->setinfo_sample_size           = bytestream2_get_byteu(&gb);",
          "577:     alac->setinfo_rice_historymult      = bytestream2_get_byteu(&gb);",
          "578:     alac->setinfo_rice_initialhistory   = bytestream2_get_byteu(&gb);",
          "579:     alac->setinfo_rice_kmodifier        = bytestream2_get_byteu(&gb);",
          "580:     alac->numchannels                   = bytestream2_get_byteu(&gb);",
          "",
          "[Added Lines]",
          "568:     alac->max_samples_per_frame = bytestream2_get_be32u(&gb);",
          "569:     if (alac->max_samples_per_frame >= UINT_MAX/4){",
          "571:                \"max_samples_per_frame too large\\n\");",
          "575:     alac->sample_size          = bytestream2_get_byteu(&gb);",
          "576:     alac->rice_history_mult    = bytestream2_get_byteu(&gb);",
          "577:     alac->rice_initial_history = bytestream2_get_byteu(&gb);",
          "578:     alac->rice_limit           = bytestream2_get_byteu(&gb);",
          "579:     alac->channels             = bytestream2_get_byteu(&gb);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "603:         return -1;",
          "604:     }",
          "607:     case 16: avctx->sample_fmt    = AV_SAMPLE_FMT_S16;",
          "608:              break;",
          "609:     case 24: avctx->sample_fmt    = AV_SAMPLE_FMT_S32;",
          "610:              break;",
          "611:     default: av_log_ask_for_sample(avctx, \"Sample depth %d is not supported.\\n\",",
          "613:              return AVERROR_PATCHWELCOME;",
          "614:     }",
          "617:         av_log(avctx, AV_LOG_WARNING, \"Invalid channel count\\n\");",
          "619:     } else {",
          "622:         else",
          "624:     }",
          "625:     if (avctx->channels > MAX_CHANNELS) {",
          "626:         av_log(avctx, AV_LOG_ERROR, \"Unsupported channel count: %d\\n\",",
          "",
          "[Removed Lines]",
          "606:     switch (alac->setinfo_sample_size) {",
          "612:                                    alac->setinfo_sample_size);",
          "616:     if (alac->numchannels < 1) {",
          "618:         alac->numchannels = avctx->channels;",
          "620:         if (alac->numchannels > MAX_CHANNELS)",
          "621:             alac->numchannels = avctx->channels;",
          "623:             avctx->channels = alac->numchannels;",
          "",
          "[Added Lines]",
          "605:     switch (alac->sample_size) {",
          "611:                                    alac->sample_size);",
          "615:     if (alac->channels < 1) {",
          "617:         alac->channels = avctx->channels;",
          "619:         if (alac->channels > MAX_CHANNELS)",
          "620:             alac->channels = avctx->channels;",
          "622:             avctx->channels = alac->channels;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b3ef155d7033fcca4286d6e34a6c15214cb8bb0",
      "candidate_info": {
        "commit_hash": "1b3ef155d7033fcca4286d6e34a6c15214cb8bb0",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/1b3ef155d7033fcca4286d6e34a6c15214cb8bb0",
        "files": [
          "libavcodec/alac.c"
        ],
        "message": "alac: multi-channel decoding support\n\nSigned-off-by: Justin Ruggles <justin.ruggles@gmail.com>",
        "before_after_code_files": [
          "libavcodec/alac.c||libavcodec/alac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ],
          "candidate": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/alac.c||libavcodec/alac.c": [
          "File: libavcodec/alac.c -> libavcodec/alac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #include \"avcodec.h\"",
          "50: #include \"get_bits.h\"",
          "51: #include \"bytestream.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: #include \"libavutil/audioconvert.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: #include \"mathops.h\"",
          "55: #define ALAC_EXTRADATA_SIZE 36",
          "58: typedef struct {",
          "",
          "[Removed Lines]",
          "56: #define MAX_CHANNELS 2",
          "",
          "[Added Lines]",
          "56: #define MAX_CHANNELS 8",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:     int channels;",
          "71:     uint32_t max_samples_per_frame;",
          "72:     uint8_t  sample_size;",
          "",
          "[Removed Lines]",
          "67:     int32_t *predict_error_buffer[MAX_CHANNELS];",
          "68:     int32_t *output_samples_buffer[MAX_CHANNELS];",
          "69:     int32_t *extra_bits_buffer[MAX_CHANNELS];",
          "",
          "[Added Lines]",
          "67:     int32_t *predict_error_buffer[2];",
          "68:     int32_t *output_samples_buffer[2];",
          "69:     int32_t *extra_bits_buffer[2];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:     TYPE_END",
          "91: };",
          "93: static inline unsigned int decode_scalar(GetBitContext *gb, int k,",
          "94:                                          int readsamplesize)",
          "95: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: static const uint8_t alac_channel_layout_offsets[8][8] = {",
          "94:     { 0 },",
          "95:     { 0, 1 },",
          "96:     { 2, 0, 1 },",
          "97:     { 2, 0, 1, 3 },",
          "98:     { 2, 0, 1, 3, 4 },",
          "99:     { 2, 0, 1, 4, 5, 3 },",
          "100:     { 2, 0, 1, 4, 5, 6, 3 },",
          "101:     { 2, 6, 7, 0, 1, 4, 5, 3 }",
          "102: };",
          "104: static const uint16_t alac_channel_layouts[8] = {",
          "105:     AV_CH_LAYOUT_MONO,",
          "106:     AV_CH_LAYOUT_STEREO,",
          "107:     AV_CH_LAYOUT_SURROUND,",
          "108:     AV_CH_LAYOUT_4POINT0,",
          "109:     AV_CH_LAYOUT_5POINT0_BACK,",
          "110:     AV_CH_LAYOUT_5POINT1_BACK,",
          "111:     AV_CH_LAYOUT_6POINT1_BACK,",
          "112:     AV_CH_LAYOUT_7POINT1_WIDE_BACK",
          "113: };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "249:     }",
          "250: }",
          "253:                                int numsamples, uint8_t interlacing_shift,",
          "254:                                uint8_t interlacing_leftweight)",
          "255: {",
          "",
          "[Removed Lines]",
          "252: static void decorrelate_stereo(int32_t *buffer[MAX_CHANNELS],",
          "",
          "[Added Lines]",
          "274: static void decorrelate_stereo(int32_t *buffer[2],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "269:     }",
          "270: }",
          "274:                               int extra_bits, int numchannels, int numsamples)",
          "275: {",
          "276:     int i, ch;",
          "",
          "[Removed Lines]",
          "272: static void append_extra_bits(int32_t *buffer[MAX_CHANNELS],",
          "273:                               int32_t *extra_bits_buffer[MAX_CHANNELS],",
          "",
          "[Added Lines]",
          "294: static void append_extra_bits(int32_t *buffer[2],",
          "295:                               int32_t *extra_bits_buffer[2],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "326:         }",
          "327:         if (alac->sample_size > 16) {",
          "328:             for (ch = 0; ch < channels; ch++)",
          "330:         }",
          "331:     } else if (output_samples != alac->nb_samples) {",
          "332:         av_log(avctx, AV_LOG_ERROR, \"sample count mismatch: %u != %d\\n\",",
          "",
          "[Removed Lines]",
          "329:                 alac->output_samples_buffer[ch] = (int32_t *)alac->frame.data[ch_index + ch];",
          "",
          "[Added Lines]",
          "351:                 alac->output_samples_buffer[ch] = (int32_t *)alac->frame.extended_data[ch_index + ch];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "336:     alac->nb_samples = output_samples;",
          "338:     if (is_compressed) {",
          "345:         interlacing_shift = get_bits(&alac->gb, 8);",
          "346:         interlacing_leftweight = get_bits(&alac->gb, 8);",
          "",
          "[Removed Lines]",
          "339:         int16_t predictor_coef_table[MAX_CHANNELS][32];",
          "340:         int predictor_coef_num[MAX_CHANNELS];",
          "341:         int prediction_type[MAX_CHANNELS];",
          "342:         int prediction_quantitization[MAX_CHANNELS];",
          "343:         int ricemodifier[MAX_CHANNELS];",
          "",
          "[Added Lines]",
          "361:         int16_t predictor_coef_table[2][32];",
          "362:         int predictor_coef_num[2];",
          "363:         int prediction_type[2];",
          "364:         int prediction_quantitization[2];",
          "365:         int ricemodifier[2];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "419:     switch(alac->sample_size) {",
          "420:     case 16: {",
          "421:         for (ch = 0; ch < channels; ch++) {",
          "423:             for (i = 0; i < alac->nb_samples; i++)",
          "425:         }}",
          "",
          "[Removed Lines]",
          "422:             int16_t *outbuffer = (int16_t *)alac->frame.data[ch_index + ch];",
          "",
          "[Added Lines]",
          "444:             int16_t *outbuffer = (int16_t *)alac->frame.extended_data[ch_index + ch];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "462:             return AVERROR_INVALIDDATA;",
          "463:         }",
          "466:         if (ret < 0)",
          "467:             return ret;",
          "",
          "[Removed Lines]",
          "465:         ret = decode_element(avctx, data, ch, channels);",
          "",
          "[Added Lines]",
          "487:         ret = decode_element(avctx, data,",
          "488:                              alac_channel_layout_offsets[alac->channels - 1][ch],",
          "489:                              channels);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "484:     ALACContext *alac = avctx->priv_data;",
          "486:     int ch;",
          "488:         av_freep(&alac->predict_error_buffer[ch]);",
          "489:         if (alac->sample_size == 16)",
          "490:             av_freep(&alac->output_samples_buffer[ch]);",
          "",
          "[Removed Lines]",
          "487:     for (ch = 0; ch < alac->channels; ch++) {",
          "",
          "[Added Lines]",
          "511:     for (ch = 0; ch < FFMIN(alac->channels, 2); ch++) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "497: static int allocate_buffers(ALACContext *alac)",
          "498: {",
          "499:     int ch;",
          "501:         int buf_size = alac->max_samples_per_frame * sizeof(int32_t);",
          "503:         FF_ALLOC_OR_GOTO(alac->avctx, alac->predict_error_buffer[ch],",
          "",
          "[Removed Lines]",
          "500:     for (ch = 0; ch < alac->channels; ch++) {",
          "",
          "[Added Lines]",
          "524:     for (ch = 0; ch < FFMIN(alac->channels, 2); ch++) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "588:                avctx->channels);",
          "589:         return AVERROR_PATCHWELCOME;",
          "590:     }",
          "592:     if ((ret = allocate_buffers(alac)) < 0) {",
          "593:         av_log(avctx, AV_LOG_ERROR, \"Error allocating buffers\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615:     avctx->channel_layout = alac_channel_layouts[alac->channels - 1];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3e5a7844bbf13620ca4b6a5e19aa087c9141b15",
      "candidate_info": {
        "commit_hash": "f3e5a7844bbf13620ca4b6a5e19aa087c9141b15",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/f3e5a7844bbf13620ca4b6a5e19aa087c9141b15",
        "files": [
          "libavcodec/alac.c"
        ],
        "message": "alac: calculate buffer size outside the loop in allocate_buffers()",
        "before_after_code_files": [
          "libavcodec/alac.c||libavcodec/alac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ],
          "candidate": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/alac.c||libavcodec/alac.c": [
          "File: libavcodec/alac.c -> libavcodec/alac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "505: static int allocate_buffers(ALACContext *alac)",
          "506: {",
          "507:     int ch;",
          "511:         FF_ALLOC_OR_GOTO(alac->avctx, alac->predict_error_buffer[ch],",
          "512:                          buf_size, buf_alloc_fail);",
          "",
          "[Removed Lines]",
          "508:     for (ch = 0; ch < FFMIN(alac->channels, 2); ch++) {",
          "509:         int buf_size = alac->max_samples_per_frame * sizeof(int32_t);",
          "",
          "[Added Lines]",
          "508:     int buf_size = alac->max_samples_per_frame * sizeof(int32_t);",
          "510:     for (ch = 0; ch < FFMIN(alac->channels, 2); ch++) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}