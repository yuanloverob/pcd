{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "459aa0e728ab74960b1913370f6df0bf659f65df",
      "candidate_info": {
        "commit_hash": "459aa0e728ab74960b1913370f6df0bf659f65df",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/459aa0e728ab74960b1913370f6df0bf659f65df",
        "files": [
          "main/Scheduler.cpp"
        ],
        "message": "small code refactoring",
        "before_after_code_files": [
          "main/Scheduler.cpp||main/Scheduler.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/Scheduler.cpp||main/Scheduler.cpp": [
          "File: main/Scheduler.cpp -> main/Scheduler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     titem.bIsThermostat = false;",
          "93:     _eTimerType timerType = (_eTimerType)atoi(sd[2].c_str());",
          "102:     titem.startHour = (unsigned char)atoi(sd[1].substr(0, 2).c_str());",
          "103:     titem.startMin = (unsigned char)atoi(sd[1].substr(3, 2).c_str());",
          "104:     titem.startTime = 0;",
          "",
          "[Removed Lines]",
          "95:     {",
          "96:      std::stringstream s_str(sd[0]);",
          "97:      s_str >> titem.RowID; }",
          "98:     {",
          "99:      std::stringstream s_str(sd[14]);",
          "100:      s_str >> titem.TimerID; }",
          "",
          "[Added Lines]",
          "94:     titem.RowID = std::stoull(sd[0]);",
          "95:     titem.TimerID= std::stoull(sd[14]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45b61e73345c1f69bbc488119a6e7b7abcc9e71a",
      "candidate_info": {
        "commit_hash": "45b61e73345c1f69bbc488119a6e7b7abcc9e71a",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/45b61e73345c1f69bbc488119a6e7b7abcc9e71a",
        "files": [
          "msbuild/domoticz.vcxproj.filters"
        ],
        "message": "Cleaning visual studio project",
        "before_after_code_files": [
          "msbuild/domoticz.vcxproj.filters||msbuild/domoticz.vcxproj.filters"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "msbuild/domoticz.vcxproj.filters||msbuild/domoticz.vcxproj.filters": [
          "File: msbuild/domoticz.vcxproj.filters -> msbuild/domoticz.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "498:     <Filter Include=\"Devices\\The Things Network\\CayenneLPP\">",
          "499:       <UniqueIdentifier>{a5d41479-757d-4c56-bc6c-2943c4ada95a}</UniqueIdentifier>",
          "500:     </Filter>",
          "501:   </ItemGroup>",
          "502:   <ItemGroup>",
          "503:     <None Include=\"..\\CMakeLists.txt\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "501:     <Filter Include=\"Helpers\">",
          "502:       <UniqueIdentifier>{28b4175c-7997-44b0-8cf5-a27fe0b661cc}</UniqueIdentifier>",
          "503:     </Filter>",
          "504:     <Filter Include=\"Logger\">",
          "505:       <UniqueIdentifier>{00a6f809-e840-406e-bb5e-4796d71ed4a4}</UniqueIdentifier>",
          "506:     </Filter>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1405:     <ClInclude Include=\"..\\main\\appversion.h\">",
          "1406:       <Filter>Header Files</Filter>",
          "1407:     </ClInclude>",
          "1411:     <ClInclude Include=\"..\\main\\Helper.h\">",
          "1412:       <Filter>Header Files</Filter>",
          "1413:     </ClInclude>",
          "1417:     <ClInclude Include=\"..\\main\\mainworker.h\">",
          "1418:       <Filter>Header Files</Filter>",
          "1419:     </ClInclude>",
          "",
          "[Removed Lines]",
          "1408:     <ClInclude Include=\"..\\main\\CmdLine.h\">",
          "1409:       <Filter>Header Files</Filter>",
          "1410:     </ClInclude>",
          "1414:     <ClInclude Include=\"..\\main\\localtime_r.h\">",
          "1415:       <Filter>Header Files</Filter>",
          "1416:     </ClInclude>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1429:     <ClInclude Include=\"..\\main\\Scheduler.h\">",
          "1430:       <Filter>Header Files</Filter>",
          "1431:     </ClInclude>",
          "1435:     <ClInclude Include=\"..\\main\\SQLHelper.h\">",
          "1436:       <Filter>Header Files</Filter>",
          "1437:     </ClInclude>",
          "1438:     <ClInclude Include=\"..\\main\\stdafx.h\">",
          "1439:       <Filter>Header Files</Filter>",
          "1440:     </ClInclude>",
          "1444:     <ClInclude Include=\"..\\main\\WebServer.h\">",
          "1445:       <Filter>Header Files</Filter>",
          "1446:     </ClInclude>",
          "1447:     <ClInclude Include=\"WindowsHelper.h\">",
          "1448:       <Filter>Windows</Filter>",
          "1449:     </ClInclude>",
          "1453:     <ClInclude Include=\"..\\main\\Camera.h\">",
          "1454:       <Filter>Camera</Filter>",
          "1455:     </ClInclude>",
          "",
          "[Removed Lines]",
          "1432:     <ClInclude Include=\"..\\main\\SignalHandler.h\">",
          "1433:       <Filter>Header Files</Filter>",
          "1434:     </ClInclude>",
          "1441:     <ClInclude Include=\"..\\main\\SunRiseSet.h\">",
          "1442:       <Filter>Header Files</Filter>",
          "1443:     </ClInclude>",
          "1450:     <ClInclude Include=\"..\\main\\Logger.h\">",
          "1451:       <Filter>Header Files</Filter>",
          "1452:     </ClInclude>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1462:     <ClInclude Include=\"..\\hardware\\TE923.h\">",
          "1463:       <Filter>Devices\\TE923</Filter>",
          "1464:     </ClInclude>",
          "1468:     <ClInclude Include=\"..\\hardware\\Rego6XXSerial.h\">",
          "1469:       <Filter>Devices\\Rego6XX</Filter>",
          "1470:     </ClInclude>",
          "",
          "[Removed Lines]",
          "1465:     <ClInclude Include=\"..\\main\\WindCalculation.h\">",
          "1466:       <Filter>Header Files</Filter>",
          "1467:     </ClInclude>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1852:     <ClInclude Include=\"..\\hardware\\Nest.h\">",
          "1853:       <Filter>Devices\\Nest</Filter>",
          "1854:     </ClInclude>",
          "1858:     <ClInclude Include=\"..\\hardware\\Netatmo.h\">",
          "1859:       <Filter>Devices\\Netatmo</Filter>",
          "1860:     </ClInclude>",
          "",
          "[Removed Lines]",
          "1855:     <ClInclude Include=\"..\\main\\concurrent_queue.h\">",
          "1856:       <Filter>Header Files</Filter>",
          "1857:     </ClInclude>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2107:     <ClInclude Include=\"..\\zip\\minizip_crypt.h\">",
          "2108:       <Filter>zip\\Base</Filter>",
          "2109:     </ClInclude>",
          "2119:     <ClInclude Include=\"..\\hardware\\TTNMQTT.h\">",
          "2120:       <Filter>Devices\\The Things Network</Filter>",
          "2121:     </ClInclude>",
          "",
          "[Removed Lines]",
          "2110:     <ClInclude Include=\"..\\main\\Noncopyable.h\">",
          "2111:       <Filter>Header Files</Filter>",
          "2112:     </ClInclude>",
          "2113:     <ClInclude Include=\"..\\hardware\\DenkoviTCPDevices.h\">",
          "2114:       <Filter>Header Files</Filter>",
          "2115:     </ClInclude>",
          "2116:     <ClInclude Include=\"..\\hardware\\DenkoviUSBDevices.h\">",
          "2117:       <Filter>Header Files</Filter>",
          "2118:     </ClInclude>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2125:     <ClInclude Include=\"..\\hardware\\cayenne_lpp\\CayenneLPP.h\">",
          "2126:       <Filter>Devices\\The Things Network\\CayenneLPP</Filter>",
          "2127:     </ClInclude>",
          "2128:     <ClInclude Include=\"..\\main\\BaroForecastCalculator.h\">",
          "2130:     </ClInclude>",
          "2131:   </ItemGroup>",
          "2132:   <ItemGroup>",
          "",
          "[Removed Lines]",
          "2129:       <Filter>Header Files</Filter>",
          "",
          "[Added Lines]",
          "2104:     <ClInclude Include=\"..\\hardware\\DenkoviTCPDevices.h\">",
          "2105:       <Filter>Devices\\Denkovi</Filter>",
          "2106:     </ClInclude>",
          "2107:     <ClInclude Include=\"..\\hardware\\DenkoviUSBDevices.h\">",
          "2108:       <Filter>Devices\\Denkovi</Filter>",
          "2109:     </ClInclude>",
          "2111:       <Filter>Helpers</Filter>",
          "2112:     </ClInclude>",
          "2113:     <ClInclude Include=\"..\\main\\WindCalculation.h\">",
          "2114:       <Filter>Helpers</Filter>",
          "2115:     </ClInclude>",
          "2116:     <ClInclude Include=\"..\\main\\Noncopyable.h\">",
          "2117:       <Filter>Helpers</Filter>",
          "2118:     </ClInclude>",
          "2119:     <ClInclude Include=\"..\\main\\concurrent_queue.h\">",
          "2120:       <Filter>Helpers</Filter>",
          "2121:     </ClInclude>",
          "2122:     <ClInclude Include=\"..\\main\\CmdLine.h\">",
          "2123:       <Filter>Helpers</Filter>",
          "2124:     </ClInclude>",
          "2125:     <ClInclude Include=\"..\\main\\localtime_r.h\">",
          "2126:       <Filter>Helpers</Filter>",
          "2127:     </ClInclude>",
          "2128:     <ClInclude Include=\"..\\main\\SignalHandler.h\">",
          "2129:       <Filter>Helpers</Filter>",
          "2130:     </ClInclude>",
          "2131:     <ClInclude Include=\"..\\main\\SunRiseSet.h\">",
          "2132:       <Filter>Helpers</Filter>",
          "2133:     </ClInclude>",
          "2134:     <ClInclude Include=\"..\\main\\Logger.h\">",
          "2135:       <Filter>Logger</Filter>",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2190:     <ClCompile Include=\"..\\httpclient\\UrlEncode.cpp\">",
          "2191:       <Filter>HTTPClient</Filter>",
          "2192:     </ClCompile>",
          "2196:     <ClCompile Include=\"..\\main\\domoticz.cpp\">",
          "2197:       <Filter>Source Files</Filter>",
          "2198:     </ClCompile>",
          "2199:     <ClCompile Include=\"..\\main\\Helper.cpp\">",
          "2200:       <Filter>Source Files</Filter>",
          "2201:     </ClCompile>",
          "2205:     <ClCompile Include=\"..\\main\\mainworker.cpp\">",
          "2206:       <Filter>Source Files</Filter>",
          "2207:     </ClCompile>",
          "",
          "[Removed Lines]",
          "2193:     <ClCompile Include=\"..\\main\\CmdLine.cpp\">",
          "2194:       <Filter>Source Files</Filter>",
          "2195:     </ClCompile>",
          "2202:     <ClCompile Include=\"..\\main\\localtime_r.cpp\">",
          "2203:       <Filter>Source Files</Filter>",
          "2204:     </ClCompile>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2211:     <ClCompile Include=\"..\\main\\Scheduler.cpp\">",
          "2212:       <Filter>Source Files</Filter>",
          "2213:     </ClCompile>",
          "2217:     <ClCompile Include=\"..\\main\\SQLHelper.cpp\">",
          "2218:       <Filter>Source Files</Filter>",
          "2219:     </ClCompile>",
          "2220:     <ClCompile Include=\"..\\main\\stdafx.cpp\">",
          "2221:       <Filter>Source Files</Filter>",
          "2222:     </ClCompile>",
          "2226:     <ClCompile Include=\"..\\main\\WebServer.cpp\">",
          "2227:       <Filter>Source Files</Filter>",
          "2228:     </ClCompile>",
          "2229:     <ClCompile Include=\"WindowsHelper.cpp\">",
          "2230:       <Filter>Windows</Filter>",
          "2231:     </ClCompile>",
          "2235:     <ClCompile Include=\"..\\main\\Camera.cpp\">",
          "2236:       <Filter>Camera</Filter>",
          "2237:     </ClCompile>",
          "",
          "[Removed Lines]",
          "2214:     <ClCompile Include=\"..\\main\\SignalHandler.cpp\">",
          "2215:       <Filter>Source Files</Filter>",
          "2216:     </ClCompile>",
          "2223:     <ClCompile Include=\"..\\main\\SunRiseSet.cpp\">",
          "2224:       <Filter>Source Files</Filter>",
          "2225:     </ClCompile>",
          "2232:     <ClCompile Include=\"..\\main\\Logger.cpp\">",
          "2233:       <Filter>Source Files</Filter>",
          "2234:     </ClCompile>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2268:     <ClCompile Include=\"..\\hardware\\Dummy.cpp\">",
          "2269:       <Filter>Devices\\Dummy</Filter>",
          "2270:     </ClCompile>",
          "2274:     <ClCompile Include=\"..\\hardware\\S0MeterSerial.cpp\">",
          "2275:       <Filter>Devices\\S0 Meter</Filter>",
          "2276:     </ClCompile>",
          "",
          "[Removed Lines]",
          "2271:     <ClCompile Include=\"..\\main\\WindCalculation.cpp\">",
          "2272:       <Filter>Source Files</Filter>",
          "2273:     </ClCompile>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2886:     <ClCompile Include=\"..\\zip\\unzip.c\">",
          "2887:       <Filter>zip\\Base</Filter>",
          "2888:     </ClCompile>",
          "2895:     <ClCompile Include=\"..\\hardware\\TTNMQTT.cpp\">",
          "2896:       <Filter>Devices\\The Things Network</Filter>",
          "2897:     </ClCompile>",
          "2898:     <ClCompile Include=\"..\\hardware\\cayenne_lpp\\CayenneLPP_Dec.cpp\">",
          "2899:       <Filter>Devices\\The Things Network\\CayenneLPP</Filter>",
          "2900:     </ClCompile>",
          "2901:     <ClCompile Include=\"..\\main\\BaroForecastCalculator.cpp\">",
          "2903:     </ClCompile>",
          "2904:   </ItemGroup>",
          "2905:   <ItemGroup>",
          "",
          "[Removed Lines]",
          "2889:     <ClCompile Include=\"..\\hardware\\DenkoviTCPDevices.cpp\">",
          "2890:       <Filter>Source Files</Filter>",
          "2891:     </ClCompile>",
          "2892:     <ClCompile Include=\"..\\hardware\\DenkoviUSBDevices.cpp\">",
          "2893:       <Filter>Source Files</Filter>",
          "2894:     </ClCompile>",
          "2902:       <Filter>Source Files</Filter>",
          "",
          "[Added Lines]",
          "2883:     <ClCompile Include=\"..\\hardware\\DenkoviTCPDevices.cpp\">",
          "2884:       <Filter>Devices\\Denkovi</Filter>",
          "2885:     </ClCompile>",
          "2886:     <ClCompile Include=\"..\\hardware\\DenkoviUSBDevices.cpp\">",
          "2887:       <Filter>Devices\\Denkovi</Filter>",
          "2888:     </ClCompile>",
          "2890:       <Filter>Helpers</Filter>",
          "2891:     </ClCompile>",
          "2892:     <ClCompile Include=\"..\\main\\WindCalculation.cpp\">",
          "2893:       <Filter>Helpers</Filter>",
          "2894:     </ClCompile>",
          "2895:     <ClCompile Include=\"..\\main\\CmdLine.cpp\">",
          "2896:       <Filter>Helpers</Filter>",
          "2897:     </ClCompile>",
          "2898:     <ClCompile Include=\"..\\main\\localtime_r.cpp\">",
          "2899:       <Filter>Helpers</Filter>",
          "2900:     </ClCompile>",
          "2901:     <ClCompile Include=\"..\\main\\SignalHandler.cpp\">",
          "2902:       <Filter>Helpers</Filter>",
          "2903:     </ClCompile>",
          "2904:     <ClCompile Include=\"..\\main\\SunRiseSet.cpp\">",
          "2905:       <Filter>Helpers</Filter>",
          "2906:     </ClCompile>",
          "2907:     <ClCompile Include=\"..\\main\\Logger.cpp\">",
          "2908:       <Filter>Logger</Filter>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2379d4cd1a04dd6235093a22e1ccf8f1499c3090",
      "candidate_info": {
        "commit_hash": "2379d4cd1a04dd6235093a22e1ccf8f1499c3090",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/2379d4cd1a04dd6235093a22e1ccf8f1499c3090",
        "files": [
          "main/EventSystem.cpp"
        ],
        "message": "Fixed string format caused by previous cleanup",
        "before_after_code_files": [
          "main/EventSystem.cpp||main/EventSystem.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/EventSystem.cpp||main/EventSystem.cpp": [
          "File: main/EventSystem.cpp -> main/EventSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "897:       total_real = total_max - total_min;",
          "899:       char szTmp[100];",
          "902:       float musage = 0;",
          "903:       _eMeterType metertype = (_eMeterType)sitem.switchtype;",
          "",
          "[Removed Lines]",
          "900:       sprintf(szTmp, \"%llu\", total_real);",
          "",
          "[Added Lines]",
          "900:       sprintf(szTmp, \"%\" PRIu64, total_real);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "917:        sprintf(szTmp, \"%.02f m3\", musage);",
          "918:        break;",
          "919:       case MTYPE_COUNTER:",
          "921:        break;",
          "922:       default:",
          "923:        continue; //not handled",
          "",
          "[Removed Lines]",
          "920:        sprintf(szTmp, \"%llu\", total_real);",
          "",
          "[Added Lines]",
          "920:        sprintf(szTmp, \"%\" PRIu64, total_real);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1053:      total_real = total_max - total_min;",
          "1055:      char szTmp[100];",
          "1058:      float musage = 0;",
          "1059:      _eMeterType metertype = (_eMeterType)sitem.switchtype;",
          "",
          "[Removed Lines]",
          "1056:      sprintf(szTmp, \"%llu\", total_real);",
          "",
          "[Added Lines]",
          "1056:      sprintf(szTmp, \"%\" PRIu64, total_real);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1073:       sprintf(szTmp, \"%.02f m3\", musage);",
          "1074:       break;",
          "1075:      case MTYPE_COUNTER:",
          "1077:       break;",
          "1078:      default:",
          "1079:       continue; //not handled",
          "",
          "[Removed Lines]",
          "1076:       sprintf(szTmp, \"%llu\", total_real);",
          "",
          "[Added Lines]",
          "1076:       sprintf(szTmp, \"%\" PRIu64, total_real);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8dbafc30fc5ba7558fdb995951c7e426ac71ec2",
      "candidate_info": {
        "commit_hash": "b8dbafc30fc5ba7558fdb995951c7e426ac71ec2",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/b8dbafc30fc5ba7558fdb995951c7e426ac71ec2",
        "files": [
          "hardware/AccuWeather.cpp",
          "hardware/AnnaThermostat.cpp",
          "hardware/Arilux.cpp",
          "hardware/AtagOne.cpp",
          "hardware/BleBox.cpp",
          "hardware/Comm5SMTCP.cpp",
          "hardware/Comm5Serial.cpp",
          "hardware/Comm5TCP.cpp",
          "hardware/CurrentCostMeterSerial.cpp",
          "hardware/CurrentCostMeterTCP.cpp",
          "hardware/Daikin.cpp",
          "hardware/DarkSky.cpp",
          "hardware/DavisLoggerSerial.cpp",
          "hardware/DomoticzTCP.cpp",
          "hardware/Dummy.cpp"
        ],
        "message": "Simplified logging",
        "before_after_code_files": [
          "hardware/AccuWeather.cpp||hardware/AccuWeather.cpp",
          "hardware/AnnaThermostat.cpp||hardware/AnnaThermostat.cpp",
          "hardware/Arilux.cpp||hardware/Arilux.cpp",
          "hardware/AtagOne.cpp||hardware/AtagOne.cpp",
          "hardware/BleBox.cpp||hardware/BleBox.cpp",
          "hardware/Comm5SMTCP.cpp||hardware/Comm5SMTCP.cpp",
          "hardware/Comm5Serial.cpp||hardware/Comm5Serial.cpp",
          "hardware/Comm5TCP.cpp||hardware/Comm5TCP.cpp",
          "hardware/CurrentCostMeterSerial.cpp||hardware/CurrentCostMeterSerial.cpp",
          "hardware/CurrentCostMeterTCP.cpp||hardware/CurrentCostMeterTCP.cpp",
          "hardware/Daikin.cpp||hardware/Daikin.cpp",
          "hardware/DarkSky.cpp||hardware/DarkSky.cpp",
          "hardware/DavisLoggerSerial.cpp||hardware/DavisLoggerSerial.cpp",
          "hardware/DomoticzTCP.cpp||hardware/DomoticzTCP.cpp",
          "hardware/Dummy.cpp||hardware/Dummy.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/AccuWeather.cpp||hardware/AccuWeather.cpp": [
          "File: hardware/AccuWeather.cpp -> hardware/AccuWeather.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:    GetMeterDetails();",
          "112:   }",
          "113:  }",
          "115: }",
          "117: bool CAccuWeather::WriteToHardware(const char* /*pdata*/, const unsigned char /*length*/)",
          "",
          "[Removed Lines]",
          "114:  _log.Log(LOG_STATUS,\"AccuWeather Worker stopped...\");",
          "",
          "[Added Lines]",
          "114:  Log(LOG_STATUS,\"Worker stopped...\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:   bret = HTTPClient::GET(szURL, sResult);",
          "142:   if (!bret)",
          "143:   {",
          "145:    return \"\";",
          "146:   }",
          "147:  }",
          "148:  catch (...)",
          "149:  {",
          "151:   return \"\";",
          "152:  }",
          "153: #endif",
          "",
          "[Removed Lines]",
          "144:    _log.Log(LOG_ERROR, \"AccuWeather: Error getting http data!\");",
          "150:   _log.Log(LOG_ERROR, \"AccuWeather: Error getting http data!\");",
          "",
          "[Added Lines]",
          "144:    Log(LOG_ERROR, \"Error getting http data!\");",
          "150:   Log(LOG_ERROR, \"Error getting http data!\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:   bool ret = jReader.parse(sResult, root);",
          "162:   if (!ret)",
          "163:   {",
          "165:    return \"\";",
          "166:   }",
          "167:   if (!root.empty())",
          "",
          "[Removed Lines]",
          "164:    _log.Log(LOG_ERROR, \"AccuWeather: Invalid data received!\");",
          "",
          "[Added Lines]",
          "164:    Log(LOG_ERROR, \"Invalid data received!\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:     root = root[0];",
          "171:    if (!root.isObject())",
          "172:    {",
          "174:     return \"\";",
          "175:    }",
          "176:    if (root[\"Key\"].empty())",
          "177:    {",
          "179:     return \"\";",
          "180:    }",
          "181:    return root[\"Key\"].asString();",
          "182:   }",
          "183:   else",
          "184:   {",
          "186:    return \"\";",
          "187:   }",
          "188:  }",
          "189:  catch (...)",
          "190:  {",
          "192:  }",
          "193:  return \"\";",
          "194: }",
          "",
          "[Removed Lines]",
          "173:     _log.Log(LOG_ERROR, \"AccuWeather: Invalid data received, or unknown location!\");",
          "178:     _log.Log(LOG_ERROR, \"AccuWeather: Invalid data received, or unknown location!\");",
          "185:    _log.Log(LOG_ERROR, \"AccuWeather: Invalid data received, unknown location or API key!\");",
          "191:   _log.Log(LOG_ERROR, \"AccuWeather: Error parsing JSon data!\");",
          "",
          "[Added Lines]",
          "173:     Log(LOG_ERROR, \"Invalid data received, or unknown location!\");",
          "178:     Log(LOG_ERROR, \"Invalid data received, or unknown location!\");",
          "185:    Log(LOG_ERROR, \"Invalid data received, unknown location or API key!\");",
          "191:   Log(LOG_ERROR, \"Error parsing JSon data!\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "209:   bret = HTTPClient::GET(szURL, sResult);",
          "210:   if (!bret)",
          "211:   {",
          "213:    return;",
          "214:   }",
          "215:  }",
          "216:  catch (...)",
          "217:  {",
          "219:   return;",
          "220:  }",
          "221: #endif",
          "",
          "[Removed Lines]",
          "212:    _log.Log(LOG_ERROR, \"AccuWeather: Error getting http data!\");",
          "218:   _log.Log(LOG_ERROR, \"AccuWeather: Error getting http data!\");",
          "",
          "[Added Lines]",
          "212:    Log(LOG_ERROR, \"Error getting http data!\");",
          "218:   Log(LOG_ERROR, \"Error getting http data!\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "230:   bool ret = jReader.parse(sResult, root);",
          "231:   if (!ret)",
          "232:   {",
          "234:    return;",
          "235:   }",
          "237:   if (root.size() < 1)",
          "238:   {",
          "240:    return;",
          "241:   }",
          "242:   root = root[0];",
          "244:   if (root[\"LocalObservationDateTime\"].empty())",
          "245:   {",
          "247:    return;",
          "248:   }",
          "",
          "[Removed Lines]",
          "233:    _log.Log(LOG_ERROR, \"AccuWeather: Invalid data received!\");",
          "239:    _log.Log(LOG_ERROR, \"AccuWeather: Invalid data received!\");",
          "246:    _log.Log(LOG_ERROR, \"AccuWeather: Invalid data received, or unknown location!\");",
          "",
          "[Added Lines]",
          "233:    Log(LOG_ERROR, \"Invalid data received!\");",
          "239:    Log(LOG_ERROR, \"Invalid data received!\");",
          "246:    Log(LOG_ERROR, \"Invalid data received, or unknown location!\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "453:  }",
          "454:  catch (...)",
          "455:  {",
          "457:  }",
          "458: }",
          "",
          "[Removed Lines]",
          "456:   _log.Log(LOG_ERROR, \"AccuWeather: Error parsing JSon data!\");",
          "",
          "[Added Lines]",
          "456:   Log(LOG_ERROR, \"Error parsing JSon data!\");",
          "",
          "---------------"
        ],
        "hardware/AnnaThermostat.cpp||hardware/AnnaThermostat.cpp": [
          "File: hardware/AnnaThermostat.cpp -> hardware/AnnaThermostat.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "100: void CAnnaThermostat::Do_Work()",
          "101: {",
          "102:  bool bFirstTime = true;",
          "104:  int sec_counter = ANNA_POLL_INTERVAL-5;",
          "105:  while (!IsStopRequested(1000))",
          "106:  {",
          "",
          "[Removed Lines]",
          "103:  _log.Log(LOG_STATUS,\"AnnaThermostat: Worker started...\");",
          "",
          "[Added Lines]",
          "103:  Log(LOG_STATUS,\"Worker started...\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:   }",
          "120:  }",
          "122: }",
          "124: void CAnnaThermostat::SendSetPointSensor(const unsigned char Idx, const float Temp, const std::string &defaultname)",
          "",
          "[Removed Lines]",
          "121:  _log.Log(LOG_STATUS,\"AnnaThermostat: Worker stopped...\");",
          "",
          "[Added Lines]",
          "121:  Log(LOG_STATUS,\"Worker stopped...\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:  if (!HTTPClient::PUT(szURL.str(), sPostData.str(), ExtraHeaders, sResult))",
          "200:  {",
          "202:   return;",
          "203:  }",
          "",
          "[Removed Lines]",
          "201:   _log.Log(LOG_ERROR, \"AnnaThermostat: Error getting current state!\");",
          "",
          "[Added Lines]",
          "201:   Log(LOG_ERROR, \"Error getting current state!\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:  if (!HTTPClient::GET(szURL.str(), sResult))",
          "273:  {",
          "275:   return;",
          "276:  }",
          "277: #endif",
          "278:  if (sResult.empty())",
          "279:  {",
          "281:   return;",
          "282:  }",
          "",
          "[Removed Lines]",
          "274:   _log.Log(LOG_ERROR, \"AnnaThermostat: Error getting current state!\");",
          "280:   _log.Log(LOG_ERROR, \"AnnaThermostat: Invalid data received!\");",
          "",
          "[Added Lines]",
          "274:   Log(LOG_ERROR, \"Error getting current state!\");",
          "280:   Log(LOG_ERROR, \"Invalid data received!\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "286:  TiXmlDocument doc;",
          "287:  if (doc.Parse(sResult.c_str()))",
          "288:  {",
          "290:   return;",
          "291:  }",
          "",
          "[Removed Lines]",
          "289:   _log.Log(LOG_ERROR, \"AnnaThermostat: Invalid data received!\");",
          "",
          "[Added Lines]",
          "289:   Log(LOG_ERROR, \"Invalid data received!\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "298:  pRoot = doc.FirstChildElement(\"appliances\");",
          "299:  if (!pRoot)",
          "300:  {",
          "302:   return;",
          "303:  }",
          "304:  pAppliance = pRoot->FirstChildElement(\"appliance\");",
          "",
          "[Removed Lines]",
          "301:   _log.Log(LOG_ERROR, \"AnnaThermostat: Invalid data received!\");",
          "",
          "[Added Lines]",
          "301:   Log(LOG_ERROR, \"Invalid data received!\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "309:   pElem = pAppliance->FirstChildElement(\"name\");",
          "310:   if (pElem == NULL)",
          "311:   {",
          "313:    return;",
          "314:   }",
          "315:   std::string ApplianceName=pElem->GetText();",
          "",
          "[Removed Lines]",
          "312:    _log.Log(LOG_ERROR, \"AnnaThermostat: Invalid data received!\");",
          "",
          "[Added Lines]",
          "312:    Log(LOG_ERROR, \"Invalid data received!\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "331:   pElem = hAppliance.FirstChild(\"logs\").FirstChild().Element();",
          "332:   if (!pElem)",
          "333:   {",
          "335:    return;",
          "336:   }",
          "337:   TiXmlHandle hLogs = TiXmlHandle(pElem);",
          "338:   pElem = hAppliance.FirstChild(\"logs\").Child(\"point_log\", 0).ToElement();",
          "339:   if (!pElem)",
          "340:   {",
          "342:    return;",
          "343:   }",
          "344:   for (pElem; pElem; pElem = pElem->NextSiblingElement())",
          "",
          "[Removed Lines]",
          "334:    _log.Log(LOG_ERROR, \"AnnaThermostat: Invalid data received!\");",
          "341:    _log.Log(LOG_ERROR, \"AnnaThermostat: Invalid data received!\");",
          "",
          "[Added Lines]",
          "334:    Log(LOG_ERROR, \"Invalid data received!\");",
          "341:    Log(LOG_ERROR, \"Invalid data received!\");",
          "",
          "---------------"
        ],
        "hardware/Arilux.cpp||hardware/Arilux.cpp": [
          "File: hardware/Arilux.cpp -> hardware/Arilux.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: void Arilux::Do_Work()",
          "69: {",
          "72:  int sec_counter = Arilux_POLL_INTERVAL - 5;",
          "73:  while (!IsStopRequested(1000))",
          "",
          "[Removed Lines]",
          "70:  _log.Log(LOG_STATUS, \"Arilux Worker started...\");",
          "",
          "[Added Lines]",
          "70:  Log(LOG_STATUS, \"Worker started...\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:    m_LastHeartbeat = mytime(NULL);",
          "78:   }",
          "79:  }",
          "81: }",
          "",
          "[Removed Lines]",
          "80:  _log.Log(LOG_STATUS, \"Arilux stopped\");",
          "",
          "[Added Lines]",
          "80:  Log(LOG_STATUS, \"Worker stopped...\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:  StringSplit(Location, \".\", ipaddress);",
          "88:  if (ipaddress.size() != 4)",
          "89:  {",
          "91:   return;",
          "92:  }",
          "93:  uint32_t sID = (uint32_t)(atoi(ipaddress[0].c_str()) << 24) | (uint32_t)(atoi(ipaddress[1].c_str()) << 16) | (atoi(ipaddress[2].c_str()) << 8) | atoi(ipaddress[3].c_str());",
          "",
          "[Removed Lines]",
          "90:   _log.Log(LOG_ERROR, \"Arilux: Invalid location received! (No IP Address)\");",
          "",
          "[Added Lines]",
          "90:   Log(LOG_ERROR, \"Invalid location received! (No IP Address)\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:  result = m_sql.safe_query(\"SELECT nValue, LastLevel FROM DeviceStatus WHERE (HardwareID==%d) AND (DeviceID=='%q') AND (Type==%d) AND (SubType==%d)\", m_HwdID, szDeviceID, pTypeColorSwitch, YeeType);",
          "103:  if (result.empty())",
          "104:  {",
          "106:   int value = atoi(ariluxBright.c_str());",
          "107:   int cmd = Color_LedOn;",
          "",
          "[Removed Lines]",
          "105:   _log.Log(LOG_STATUS, \"Arilux: New controller added (%s/%s)\", Location.c_str(), lightName.c_str());",
          "",
          "[Added Lines]",
          "105:   Log(LOG_STATUS, \"New controller added (%s/%s)\", Location.c_str(), lightName.c_str());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148: bool Arilux::SendTCPCommand(char ip[50],std::vector<unsigned char> &command)",
          "149: {",
          "153:  int sum = std::accumulate(command.begin(), command.end(), 0);",
          "",
          "[Removed Lines]",
          "150:  _log.Log(LOG_STATUS, \"Arilux: Sending data to device\");",
          "",
          "[Added Lines]",
          "150:  Log(LOG_STATUS, \"Sending data to device\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "169:  }",
          "170:  catch (const std::exception &e)",
          "171:  {",
          "173:   return false;",
          "174:  }",
          "177:  sleep_milliseconds(50);",
          "179:  boost::asio::write(sendSocket, boost::asio::buffer(command, command.size()));",
          "181:  sleep_milliseconds(50);",
          "",
          "[Removed Lines]",
          "172:   _log.Log(LOG_ERROR, \"Arilux: Exception: %s\", e.what());",
          "",
          "[Added Lines]",
          "172:   Log(LOG_ERROR, \"Exception: %s\", e.what());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "192: bool Arilux::WriteToHardware(const char *pdata, const unsigned char /*length*/)",
          "193: {",
          "195:  const _tColorSwitch *pLed = reinterpret_cast<const _tColorSwitch*>(pdata);",
          "197:  std::vector<std::vector<std::string> > result;",
          "",
          "[Removed Lines]",
          "194:  _log.Debug(DEBUG_HARDWARE, \"Arilux: WriteToHardware...............................\");",
          "",
          "[Added Lines]",
          "194:  Debug(DEBUG_HARDWARE, \"WriteToHardware...............................\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "267:    m_color.b = pLed->color.b;",
          "268:   }",
          "269:   else {",
          "271:   }",
          "273:  case Color_SetBrightnessLevel: {",
          "",
          "[Removed Lines]",
          "270:    _log.Log(LOG_ERROR, \"Arilux: SetRGBColour - Color mode %d is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\", pLed->color.mode);",
          "",
          "[Added Lines]",
          "270:    Log(LOG_ERROR, \"SetRGBColour - Color mode %d is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\", pLed->color.mode);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "302:  }",
          "303:  break;",
          "304:  case Color_SetBrightUp:",
          "306:   break;",
          "307:  case Color_SetBrightDown:",
          "309:   break;",
          "310:  case Color_WarmWhiteIncrease:",
          "312:   break;",
          "313:  case Color_CoolWhiteIncrease:",
          "315:   break;",
          "316:  case Color_NightMode:",
          "318:   break;",
          "319:  case Color_FullBrightness:",
          "321:   break;",
          "322:  case Color_DiscoMode:",
          "324:   break;",
          "325:  case Color_DiscoSpeedFasterLong:",
          "327:   break;",
          "328:  default:",
          "",
          "[Removed Lines]",
          "305:   _log.Log(LOG_STATUS, \"Arilux: SetBrightUp - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "308:   _log.Log(LOG_STATUS, \"Arilux: SetBrightDown - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "311:   _log.Log(LOG_STATUS, \"Arilux: WarmWhiteIncrease - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "314:   _log.Log(LOG_STATUS, \"Arilux: CoolWhiteIncrease - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "317:   _log.Log(LOG_STATUS, \"Arilux: NightMode - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "320:   _log.Log(LOG_STATUS, \"Arilux: FullBrightness - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "323:   _log.Log(LOG_STATUS, \"Arilux: DiscoMode - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "326:   _log.Log(LOG_STATUS, \"Arilux: DiscoSpeedFasterLong - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "",
          "[Added Lines]",
          "305:   Log(LOG_STATUS, \"SetBrightUp - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "308:   Log(LOG_STATUS, \"SetBrightDown - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "311:   Log(LOG_STATUS, \"WarmWhiteIncrease - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "314:   Log(LOG_STATUS, \"CoolWhiteIncrease - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "317:   Log(LOG_STATUS, \"NightMode - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "320:   Log(LOG_STATUS, \"FullBrightness - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "323:   Log(LOG_STATUS, \"DiscoMode - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "326:   Log(LOG_STATUS, \"DiscoSpeedFasterLong - This command is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\");",
          "",
          "---------------"
        ],
        "hardware/AtagOne.cpp||hardware/AtagOne.cpp": [
          "File: hardware/AtagOne.cpp -> hardware/AtagOne.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"stdafx.h\"",
          "2: #include \"AtagOne.h\"",
          "3: #include \"../main/Helper.h\"",
          "5: #include \"hardwaretypes.h\"",
          "6: #include \"../main/localtime_r.h\"",
          "7: #include \"../main/WebServerHelper.h\"",
          "8: #include \"../main/RFXtrx.h\"",
          "9: #include \"../main/SQLHelper.h\"",
          "",
          "[Removed Lines]",
          "4: #include \"../main/Logger.h\"",
          "",
          "[Added Lines]",
          "6: #include \"../main/Logger.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:  if (!HTTPClient::GET(sURL, sResult))",
          "150:  {",
          "152:   return \"\";",
          "153:  }",
          "154: #ifdef DEBUG_AtagOneThermostat",
          "",
          "[Removed Lines]",
          "151:   _log.Log(LOG_ERROR, \"AtagOne: Error requesting token!\");",
          "",
          "[Added Lines]",
          "151:   Log(LOG_ERROR, \"Error requesting token!\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:    m_bDoLogin = false;",
          "200:    return true;",
          "201:   }",
          "203:   return false;",
          "204:  }",
          "",
          "[Removed Lines]",
          "202:   _log.Log(LOG_ERROR, \"AtagOne: Error login!\");",
          "",
          "[Added Lines]",
          "202:   Log(LOG_ERROR, \"Error login!\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "220:  sURL = ATAGONE_URL_LOGIN;",
          "221:  if (!HTTPClient::POST(sURL, szPostdata, ExtraHeaders, sResult))",
          "222:  {",
          "224:   return false;",
          "225:  }",
          "",
          "[Removed Lines]",
          "223:   _log.Log(LOG_ERROR, \"AtagOne: Error login!\");",
          "",
          "[Added Lines]",
          "223:   Log(LOG_ERROR, \"Error login!\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "233:  m_ThermostatID = GetFirstDeviceID(sResult);",
          "234:  if (m_ThermostatID.empty())",
          "235:  {",
          "237:   return false;",
          "238:  }",
          "239:  m_bDoLogin = false;",
          "",
          "[Removed Lines]",
          "236:   _log.Log(LOG_ERROR, \"AtagOne: Error getting device_id!\");",
          "",
          "[Added Lines]",
          "236:   Log(LOG_ERROR, \"Error getting device_id!\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "254: void CAtagOne::Do_Work()",
          "255: {",
          "257:  int sec_counter = AtagOne_POLL_INTERVAL-5;",
          "258:  while (!IsStopRequested(1000))",
          "259:  {",
          "",
          "[Removed Lines]",
          "256:  _log.Log(LOG_STATUS,\"AtagOne: Worker started...\");",
          "",
          "[Added Lines]",
          "256:  Log(LOG_STATUS,\"Worker started...\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "267:    GetMeterDetails();",
          "268:   }",
          "269:  }",
          "271: }",
          "273: bool CAtagOne::GetOutsideTemperatureFromDomoticz(float &tvalue)",
          "",
          "[Removed Lines]",
          "270:  _log.Log(LOG_STATUS,\"AtagOne: Worker stopped...\");",
          "",
          "[Added Lines]",
          "270:  Log(LOG_STATUS,\"Worker stopped...\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "373:  std::string sURL = std::string(ATAGONE_URL_DIAGNOSTICS) + \"?deviceId=\" + CURLEncode::URLEncode(m_ThermostatID);",
          "374:  if (!HTTPClient::GET(sURL, sResult))",
          "375:  {",
          "377:   m_bDoLogin = true;",
          "378:   return;",
          "379:  }",
          "",
          "[Removed Lines]",
          "376:   _log.Log(LOG_ERROR, \"AtagOne: Error getting thermostat data!\");",
          "",
          "[Added Lines]",
          "376:   Log(LOG_ERROR, \"Error getting thermostat data!\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "388:  sret = GetHTMLPageValue(sResult, \"Kamertemperatuur\", \"Room temperature\", true);",
          "389:  if (sret.empty())",
          "390:  {",
          "392:   return;",
          "393:  }",
          "394:  root[\"roomTemperature\"] = static_cast<float>(atof(sret.c_str()));",
          "",
          "[Removed Lines]",
          "391:   _log.Log(LOG_ERROR, \"AtagOne: Invalid/no data received...\");",
          "",
          "[Added Lines]",
          "391:   Log(LOG_ERROR, \"Invalid/no data received...\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "415:  stdreplace(sURL, \"{0}\", CURLEncode::URLEncode(m_ThermostatID));",
          "416:  if (!HTTPClient::GET(sURL, sResult))",
          "417:  {",
          "419:   m_bDoLogin = true;",
          "420:   return;",
          "421:  }",
          "",
          "[Removed Lines]",
          "418:   _log.Log(LOG_ERROR, \"AtagOne: Error getting target setpoint data!\");",
          "",
          "[Added Lines]",
          "418:   Log(LOG_ERROR, \"Error getting target setpoint data!\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "428:  bool ret = jReader.parse(sResult, root2);",
          "429:  if ((!ret) || (!root2.isObject()))",
          "430:  {",
          "432:   return;",
          "433:  }",
          "434:  if (root2[\"targetTemp\"].empty())",
          "435:  {",
          "437:   return;",
          "438:  }",
          "439:  root[\"targetTemperature\"] = static_cast<float>(atof(root2[\"targetTemp\"].asString().c_str()));",
          "",
          "[Removed Lines]",
          "431:   _log.Log(LOG_ERROR, \"AtagOne: Invalid/no data received...\");",
          "436:   _log.Log(LOG_ERROR, \"AtagOne: Invalid/no data received...\");",
          "",
          "[Added Lines]",
          "431:   Log(LOG_ERROR, \"Invalid/no data received...\");",
          "436:   Log(LOG_ERROR, \"Invalid/no data received...\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "504: {",
          "505:  if (idx != 1)",
          "506:  {",
          "508:   return;",
          "509:  }",
          "",
          "[Removed Lines]",
          "507:   _log.Log(LOG_ERROR, \"AtagOne: Currently only Room Temperature Setpoint allowed!\");",
          "",
          "[Added Lines]",
          "507:   Log(LOG_ERROR, \"Currently only Room Temperature Setpoint allowed!\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "515:   (dtemp>ATAGONE_TEMPERATURE_MAX)",
          "516:   )",
          "517:  {",
          "519:   return;",
          "520:  }",
          "521:  char szTemp[20];",
          "",
          "[Removed Lines]",
          "518:   _log.Log(LOG_ERROR, \"AtagOne: Temperature should be between %d and %d\", ATAGONE_TEMPERATURE_MIN, ATAGONE_TEMPERATURE_MAX);",
          "",
          "[Added Lines]",
          "518:   Log(LOG_ERROR, \"Temperature should be between %d and %d\", ATAGONE_TEMPERATURE_MIN, ATAGONE_TEMPERATURE_MAX);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "538:  std::string sResult;",
          "539:  if (!HTTPClient::POST(sURL, szPostdata, ExtraHeaders, sResult))",
          "540:  {",
          "542:   return;",
          "543:  }",
          "544: #ifdef DEBUG_AtagOneThermostat",
          "",
          "[Removed Lines]",
          "541:   _log.Log(LOG_ERROR, \"AtagOne: Error setting Setpoint!\");",
          "",
          "[Added Lines]",
          "541:   Log(LOG_ERROR, \"Error setting Setpoint!\");",
          "",
          "---------------"
        ],
        "hardware/BleBox.cpp||hardware/BleBox.cpp": [
          "File: hardware/BleBox.cpp -> hardware/BleBox.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include \"BleBox.h\"",
          "3: #include \"hardwaretypes.h\"",
          "4: #include \"../json/json.h\"",
          "5: #include \"../main/Logger.h\"",
          "6: #include \"../main/mainworker.h\"",
          "10: #include \"../main/SQLHelper.h\"",
          "11: #include \"../httpclient/HTTPClient.h\"",
          "13: struct STR_DEVICE {",
          "",
          "[Removed Lines]",
          "7: #include \"../main/localtime_r.h\"",
          "8: #include \"../main/Helper.h\"",
          "9: #include \"../main/WebServer.h\"",
          "",
          "[Added Lines]",
          "5: #include \"../main/Helper.h\"",
          "6: #include \"../main/localtime_r.h\"",
          "10: #include \"../main/WebServer.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: {",
          "76:  int sec_counter = m_PollInterval - 1;",
          "79:  while (!IsStopRequested(1000))",
          "80:  {",
          "81:   sec_counter++;",
          "",
          "[Removed Lines]",
          "78:  _log.Log(LOG_STATUS, \"BleBox: Worker started...\");",
          "",
          "[Added Lines]",
          "78:  Log(LOG_STATUS, \"Worker started...\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:    GetDevicesState();",
          "90:   }",
          "91:  }",
          "93: }",
          "95: void BleBox::GetDevicesState()",
          "",
          "[Removed Lines]",
          "92:  _log.Log(LOG_STATUS, \"BleBox: Worker started...\");",
          "",
          "[Added Lines]",
          "92:  Log(LOG_STATUS, \"Worker started...\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "249:    return DevicesType[i].unit;",
          "250:   }",
          "251:  }",
          "253:  return -1;",
          "254: }",
          "",
          "[Removed Lines]",
          "252:  _log.Log(LOG_ERROR, \"BleBox: unknown device api name(%s)\", apiName.c_str());",
          "",
          "[Added Lines]",
          "252:  Log(LOG_ERROR, \"unknown device api name(%s)\", apiName.c_str());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "310:     if (root[\"state\"].asString() != state)",
          "311:     {",
          "313:      return false;",
          "314:     }",
          "315:     break;",
          "",
          "[Removed Lines]",
          "312:      _log.Log(LOG_ERROR, \"BleBox: state not changed!\");",
          "",
          "[Added Lines]",
          "312:      Log(LOG_ERROR, \"state not changed!\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "379:     if (root[\"light\"][\"desiredColor\"].asString() != level)",
          "380:     {",
          "382:      return false;",
          "383:     }",
          "",
          "[Removed Lines]",
          "381:      _log.Log(LOG_ERROR, \"BleBox: light not changed!\");",
          "",
          "[Added Lines]",
          "381:      Log(LOG_ERROR, \"light not changed!\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "420:     if (state != level)",
          "421:     {",
          "423:      return false;",
          "424:     }",
          "",
          "[Removed Lines]",
          "422:      _log.Log(LOG_ERROR, \"BleBox: dimmer not changed!\");",
          "",
          "[Added Lines]",
          "422:      Log(LOG_ERROR, \"dimmer not changed!\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "575:     m_RGBWColorState = pLed->color;",
          "576:    }",
          "577:    else {",
          "579:    }",
          "581:   }",
          "",
          "[Removed Lines]",
          "578:     _log.Log(LOG_STATUS, \"Blebox: SetRGBColour - Color mode %d is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\", pLed->color.mode);",
          "",
          "[Added Lines]",
          "578:     Log(LOG_STATUS, \"SetRGBColour - Color mode %d is unhandled, if you have a suggestion for what it should do, please post on the Domoticz forum\", pLed->color.mode);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "623:   if (root[\"rgbw\"][\"desiredColor\"].asString() != state)",
          "624:   {",
          "626:    return false;",
          "627:   }",
          "628:   return true;",
          "",
          "[Removed Lines]",
          "625:    _log.Log(LOG_ERROR, \"BleBox: rgbw not changed!\");",
          "",
          "[Added Lines]",
          "625:    Log(LOG_ERROR, \"rgbw not changed!\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "635: {",
          "636:  if (root[node].empty() == true)",
          "637:  {",
          "639:   return false;",
          "640:  }",
          "641:  return true;",
          "",
          "[Removed Lines]",
          "638:   _log.Log(LOG_ERROR, \"BleBox: node '%s' missing!\", node.c_str());",
          "",
          "[Added Lines]",
          "638:   Log(LOG_ERROR, \"node '%s' missing!\", node.c_str());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "649:  if (root[node][value].empty() == true)",
          "650:  {",
          "652:   return false;",
          "653:  }",
          "654:  return true;",
          "",
          "[Removed Lines]",
          "651:   _log.Log(LOG_ERROR, \"BleBox: value '%s' missing!\", value.c_str());",
          "",
          "[Added Lines]",
          "651:   Log(LOG_ERROR, \"value '%s' missing!\", value.c_str());",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "955:  HTTPClient::SetTimeout(4);",
          "956:  if (!HTTPClient::GET(sURL, result))",
          "957:  {",
          "959:   return root;",
          "960:  }",
          "962:  Json::Reader jReader;",
          "963:  if (!jReader.parse(result, root))",
          "964:  {",
          "966:   return root;",
          "967:  }",
          "969:  if (root.size() == 0)",
          "970:  {",
          "972:   return root;",
          "973:  }",
          "",
          "[Removed Lines]",
          "958:   _log.Log(LOG_ERROR, \"BleBox: send '%s'command to %s failed!\", command.c_str(), IPAddress.c_str());",
          "965:   _log.Log(LOG_ERROR, \"BleBox: Invalid json received!\");",
          "971:   _log.Log(LOG_ERROR, \"BleBox: Json is empty!\");",
          "",
          "[Added Lines]",
          "958:   Log(LOG_ERROR, \"send '%s'command to %s failed!\", command.c_str(), IPAddress.c_str());",
          "965:   Log(LOG_ERROR, \"Invalid json received!\");",
          "971:   Log(LOG_ERROR, \"Json is empty!\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "997:  {",
          "998:   if (root[\"device\"][\"type\"].empty() == true)",
          "999:   {",
          "1001:    return \"\";",
          "1002:   }",
          "1003:   result = root[\"device\"][\"type\"].asString();",
          "",
          "[Removed Lines]",
          "1000:    _log.Log(LOG_ERROR, \"BleBox: Invalid device type received!\");",
          "",
          "[Added Lines]",
          "1000:    Log(LOG_ERROR, \"Invalid device type received!\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1050:  std::map<const std::string, const int>::const_iterator itt = m_devices.find(IPAddress);",
          "1051:  if (itt == m_devices.end())",
          "1052:  {",
          "1054:   return -1;",
          "1055:  }",
          "1056:  else",
          "",
          "[Removed Lines]",
          "1053:   _log.Log(LOG_ERROR, \"BleBox: unknown device (%s)\", IPAddress.c_str());",
          "",
          "[Added Lines]",
          "1053:   Log(LOG_ERROR, \"unknown device (%s)\", IPAddress.c_str());",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1140:  }",
          "1141:  else",
          "1142:  {",
          "1144:   return false;",
          "1145:  }",
          "1146: }",
          "",
          "[Removed Lines]",
          "1143:   _log.Log(LOG_ERROR, \"BleBox: Cannot find any devices...\");",
          "",
          "[Added Lines]",
          "1143:   Log(LOG_ERROR, \"Cannot find any devices...\");",
          "",
          "---------------"
        ],
        "hardware/Comm5SMTCP.cpp||hardware/Comm5SMTCP.cpp": [
          "File: hardware/Comm5SMTCP.cpp -> hardware/Comm5SMTCP.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"stdafx.h\"",
          "2: #include \"Comm5SMTCP.h\"",
          "4: #include \"../main/Helper.h\"",
          "5: #include \"../main/localtime_r.h\"",
          "6: #include \"../main/mainworker.h\"",
          "7: #include \"../httpclient/HTTPClient.h\"",
          "8: #include \"../httpclient/UrlEncode.h\"",
          "",
          "[Removed Lines]",
          "3: #include \"../main/Logger.h\"",
          "",
          "[Added Lines]",
          "5: #include \"../main/Logger.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:  m_thread = std::make_shared<std::thread>(&Comm5SMTCP::Do_Work, this);",
          "57:  SetThreadNameInt(m_thread->native_handle());",
          "61:  return (m_thread != nullptr);",
          "62: }",
          "",
          "[Removed Lines]",
          "59:  _log.Log(LOG_STATUS, \"Comm5 SM-XXXX: Started\");",
          "",
          "[Added Lines]",
          "59:  Log(LOG_STATUS, \"Started\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76: void Comm5SMTCP::OnConnect()",
          "77: {",
          "79:  m_bIsStarted = true;",
          "81:  sOnConnected(this);",
          "",
          "[Removed Lines]",
          "78:  _log.Log(LOG_STATUS, \"Comm5 SM-XXXX: connected to: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "",
          "[Added Lines]",
          "78:  Log(LOG_STATUS, \"connected to: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85: void Comm5SMTCP::OnDisconnect()",
          "86: {",
          "88: }",
          "90: void Comm5SMTCP::Do_Work()",
          "",
          "[Removed Lines]",
          "87:  _log.Log(LOG_ERROR, \"Comm5 SM-XXXX: disconected\");",
          "",
          "[Added Lines]",
          "87:  Log(LOG_ERROR, \"disconected\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104:  }",
          "105:  terminate();",
          "108: }",
          "110: void Comm5SMTCP::ParseData(const unsigned char* data, const size_t len)",
          "",
          "[Removed Lines]",
          "107:  _log.Log(LOG_STATUS, \"Comm5 SM-XXXX: TCP/IP Worker stopped...\");",
          "",
          "[Added Lines]",
          "107:  Log(LOG_STATUS, \"TCP/IP Worker stopped...\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "169: void Comm5SMTCP::OnError(const std::exception e)",
          "170: {",
          "172: }",
          "174: void Comm5SMTCP::OnError(const boost::system::error_code& error)",
          "",
          "[Removed Lines]",
          "171:  _log.Log(LOG_ERROR, \"Comm5 SM-XXXX: Error: %s\", e.what());",
          "",
          "[Added Lines]",
          "171:  Log(LOG_ERROR, \"Error: %s\", e.what());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "180:  case boost::asio::error::access_denied:",
          "181:  case boost::asio::error::host_unreachable:",
          "182:  case boost::asio::error::timed_out:",
          "184:   break;",
          "185:  case boost::asio::error::eof:",
          "186:  case boost::asio::error::connection_reset:",
          "188:   break;",
          "189:  default:",
          "191:  }",
          "192: }",
          "",
          "[Removed Lines]",
          "183:   _log.Log(LOG_ERROR, \"Comm5 SM-XXXX: Can not connect to: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "187:   _log.Log(LOG_ERROR, \"Comm5 SM-XXXX: Connection reset!\");",
          "190:   _log.Log(LOG_ERROR, \"Comm5 SM-XXXX: %s\", error.message().c_str());",
          "",
          "[Added Lines]",
          "183:   Log(LOG_ERROR, \"Can not connect to: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "187:   Log(LOG_ERROR, \"Connection reset!\");",
          "190:   Log(LOG_ERROR, \"%s\", error.message().c_str());",
          "",
          "---------------"
        ],
        "hardware/Comm5Serial.cpp||hardware/Comm5Serial.cpp": [
          "File: hardware/Comm5Serial.cpp -> hardware/Comm5Serial.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"stdafx.h\"",
          "2: #include \"Comm5Serial.h\"",
          "3: #include \"../main/localtime_r.h\"",
          "4: #include \"../main/Logger.h\"",
          "6: #include \"../main/RFXtrx.h\"",
          "",
          "[Removed Lines]",
          "5: #include \"../main/Helper.h\"",
          "",
          "[Added Lines]",
          "3: #include \"../main/Helper.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:  }",
          "79:  catch (boost::exception & e)",
          "80:  {",
          "82: #ifdef _DEBUG",
          "84: #else",
          "85:   (void)e;",
          "86: #endif",
          "",
          "[Removed Lines]",
          "81:   _log.Log(LOG_ERROR,\"Comm5 MA-4200: Error opening serial port!\");",
          "83:   _log.Log(LOG_ERROR,\"-----------------\\n%s\\n-----------------\",boost::diagnostic_information(e).c_str());",
          "",
          "[Added Lines]",
          "81:   Log(LOG_ERROR,\"Error opening serial port!\");",
          "83:   Log(LOG_ERROR,\"-----------------\\n%s\\n-----------------\",boost::diagnostic_information(e).c_str());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:  }",
          "89:  catch ( ... )",
          "90:  {",
          "92:   return false;",
          "93:  }",
          "94:  m_bIsStarted=true;",
          "",
          "[Removed Lines]",
          "91:   _log.Log(LOG_ERROR,\"Comm5 MA-4200: Error opening serial port!!!\");",
          "",
          "[Added Lines]",
          "91:   _log.Log(LOG_ERROR,\"Error opening serial port!!!\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:  querySensorState();",
          "120:  enableNotifications();",
          "125:  while (!IsStopRequested(100))",
          "",
          "[Removed Lines]",
          "122:  _log.Log(LOG_STATUS, \"Comm5 MA-42XX: Worker started...\");",
          "",
          "[Added Lines]",
          "122:  Log(LOG_STATUS, \"Worker started...\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:  }",
          "135:  terminate();",
          "138: }",
          "140: void Comm5Serial::requestDigitalInputResponseHandler(const std::string & mframe)",
          "",
          "[Removed Lines]",
          "137:  _log.Log(LOG_STATUS, \"Comm5 MA-42XX: Worker stopped...\");",
          "",
          "[Added Lines]",
          "137:  Log(LOG_STATUS, \"Worker stopped...\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "214:    }",
          "215:    else {",
          "217:     currentState = STSTART_OCTET1;",
          "218:    }",
          "219:    break;",
          "",
          "[Removed Lines]",
          "216:     _log.Log(LOG_ERROR, \"Comm5 MA-4200: Framing error\");",
          "",
          "[Added Lines]",
          "216:     Log(LOG_ERROR, \"Framing error\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "225:     currentState = STFRAME_SIZE;",
          "226:    }",
          "227:    else {",
          "229:     currentState = STSTART_OCTET1;",
          "230:    }",
          "231:    break;",
          "",
          "[Removed Lines]",
          "228:     _log.Log(LOG_ERROR, \"Comm5 MA-4200: Framing error\");",
          "",
          "[Added Lines]",
          "228:     Log(LOG_ERROR, \"Framing error\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "329: void Comm5Serial::OnError(const std::exception e)",
          "330: {",
          "332: }",
          "",
          "[Removed Lines]",
          "331:  _log.Log(LOG_ERROR, \"Comm5 MA-4200: Error: %s\", e.what());",
          "",
          "[Added Lines]",
          "331:  Log(LOG_ERROR, \"Error: %s\", e.what());",
          "",
          "---------------"
        ],
        "hardware/Comm5TCP.cpp||hardware/Comm5TCP.cpp": [
          "File: hardware/Comm5TCP.cpp -> hardware/Comm5TCP.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"stdafx.h\"",
          "2: #include \"Comm5TCP.h\"",
          "3: #include \"../main/localtime_r.h\"",
          "4: #include \"../main/Logger.h\"",
          "6: #include \"../main/RFXtrx.h\"",
          "8: #define RETRY_DELAY 30",
          "",
          "[Removed Lines]",
          "5: #include \"../main/Helper.h\"",
          "",
          "[Added Lines]",
          "3: #include \"../main/Helper.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:  m_thread = std::make_shared<std::thread>(&Comm5TCP::Do_Work, this);",
          "61:  SetThreadNameInt(m_thread->native_handle());",
          "65:  return (m_thread != nullptr);",
          "66: }",
          "",
          "[Removed Lines]",
          "63:  _log.Log(LOG_STATUS, \"Comm5 MA-5XXX: Started\");",
          "",
          "[Added Lines]",
          "63:  Log(LOG_STATUS, \"Started\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80: void Comm5TCP::OnConnect()",
          "81: {",
          "83:  m_bIsStarted = true;",
          "84:  notificationEnabled = false;",
          "",
          "[Removed Lines]",
          "82:  _log.Log(LOG_STATUS, \"Comm5 MA-5XXX: connected to: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "",
          "[Added Lines]",
          "82:  Log(LOG_STATUS, \"connected to: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92: void Comm5TCP::OnDisconnect()",
          "93: {",
          "95: }",
          "97: void Comm5TCP::Do_Work()",
          "",
          "[Removed Lines]",
          "94:  _log.Log(LOG_ERROR, \"Comm5 MA-5XXX: disconected\");",
          "",
          "[Added Lines]",
          "94:  Log(LOG_ERROR, \"disconected\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:  }",
          "112:  terminate();",
          "115: }",
          "117: void Comm5TCP::processSensorData(const std::string& line)",
          "",
          "[Removed Lines]",
          "114:  _log.Log(LOG_STATUS, \"Comm5 MA-5XXX: TCP/IP Worker stopped...\");",
          "",
          "[Added Lines]",
          "114:  Log(LOG_STATUS, \"TCP/IP Worker stopped...\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "212: void Comm5TCP::OnError(const std::exception e)",
          "213: {",
          "215: }",
          "217: void Comm5TCP::OnError(const boost::system::error_code& error)",
          "",
          "[Removed Lines]",
          "214:  _log.Log(LOG_ERROR, \"Comm5 MA-5XXX: Error: %s\", e.what());",
          "",
          "[Added Lines]",
          "214:  Log(LOG_ERROR, \"Error: %s\", e.what());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "223:  case boost::asio::error::access_denied:",
          "224:  case boost::asio::error::host_unreachable:",
          "225:  case boost::asio::error::timed_out:",
          "227:   break;",
          "228:  case boost::asio::error::eof:",
          "229:  case boost::asio::error::connection_reset:",
          "231:   break;",
          "232:  default:",
          "234:  }",
          "235: }",
          "",
          "[Removed Lines]",
          "226:   _log.Log(LOG_ERROR, \"Comm5 MA-5XXX: Can not connect to: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "230:   _log.Log(LOG_ERROR, \"Comm5 MA-5XXX: Connection reset!\");",
          "233:   _log.Log(LOG_ERROR, \"Comm5 MA-5XXX: %s\", error.message().c_str());",
          "",
          "[Added Lines]",
          "226:   Log(LOG_ERROR, \"Can not connect to: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "230:   Log(LOG_ERROR, \"Connection reset!\");",
          "233:   Log(LOG_ERROR, \"%s\", error.message().c_str());",
          "",
          "---------------"
        ],
        "hardware/CurrentCostMeterSerial.cpp||hardware/CurrentCostMeterSerial.cpp": [
          "File: hardware/CurrentCostMeterSerial.cpp -> hardware/CurrentCostMeterSerial.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  try",
          "41:  {",
          "43:   open(",
          "44:    m_szSerialPort,",
          "45:    m_baudRate,",
          "",
          "[Removed Lines]",
          "42:   _log.Log(LOG_STATUS,\"CurrentCost Smart Meter: Using serial port: %s\", m_szSerialPort.c_str());",
          "",
          "[Added Lines]",
          "42:   Log(LOG_STATUS,\"Using serial port: %s\", m_szSerialPort.c_str());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:  }",
          "51:  catch (boost::exception & e)",
          "52:  {",
          "54: #ifdef _DEBUG",
          "56: #else",
          "57:   (void)e;",
          "58: #endif",
          "",
          "[Removed Lines]",
          "53:   _log.Log(LOG_ERROR,\"CurrentCost Smart Meter: Error opening serial port!\");",
          "55:   _log.Log(LOG_ERROR,\"-----------------\\n%s\\n-----------------\",boost::diagnostic_information(e).c_str());",
          "",
          "[Added Lines]",
          "53:   Log(LOG_ERROR,\"Error opening serial port!\");",
          "55:   Log(LOG_ERROR,\"-----------------\\n%s\\n-----------------\",boost::diagnostic_information(e).c_str());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:  }",
          "61:  catch ( ... )",
          "62:  {",
          "64:   return false;",
          "65:  }",
          "66:  m_bIsStarted=true;",
          "",
          "[Removed Lines]",
          "63:   _log.Log(LOG_ERROR,\"CurrentCost Smart Meter: Error opening serial port!!!\");",
          "",
          "[Added Lines]",
          "63:   Log(LOG_ERROR,\"Error opening serial port!!!\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:  int sec_counter = 0;",
          "101:  int msec_counter = 0;",
          "105:  while (!IsStopRequested(200))",
          "106:  {",
          "",
          "[Removed Lines]",
          "103:  _log.Log(LOG_STATUS, \"CurrentCost: Worker started...\");",
          "",
          "[Added Lines]",
          "103:  Log(LOG_STATUS, \"Worker started...\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "117:  }",
          "118:  terminate();",
          "121: }",
          "",
          "[Removed Lines]",
          "120:  _log.Log(LOG_STATUS, \"CurrentCost: Worker stopped...\");",
          "",
          "[Added Lines]",
          "120:  Log(LOG_STATUS, \"Worker stopped...\");",
          "",
          "---------------"
        ],
        "hardware/CurrentCostMeterTCP.cpp||hardware/CurrentCostMeterTCP.cpp": [
          "File: hardware/CurrentCostMeterTCP.cpp -> hardware/CurrentCostMeterTCP.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:  m_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);",
          "84:  if (m_socket == INVALID_SOCKET)",
          "85:  {",
          "87:   return false;",
          "88:  }",
          "",
          "[Removed Lines]",
          "86:   _log.Log(LOG_ERROR,\"CurrentCost Smart Meter: could not create a TCP/IP socket!\");",
          "",
          "[Added Lines]",
          "86:   Log(LOG_ERROR,\"could not create a TCP/IP socket!\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:  {",
          "95:   closesocket(m_socket);",
          "96:   m_socket=INVALID_SOCKET;",
          "98:   return false;",
          "99:  }",
          "103:  Init();",
          "",
          "[Removed Lines]",
          "97:   _log.Log(LOG_ERROR,\"CurrentCost Smart Meter: could not connect to: %s:%d\",m_szIPAddress.c_str(),m_usIPPort);",
          "101:  _log.Log(LOG_STATUS,\"CurrentCost Smart Meter: connected to: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "",
          "[Added Lines]",
          "97:   Log(LOG_ERROR,\"could not connect to: %s:%d\",m_szIPAddress.c_str(),m_usIPPort);",
          "101:  Log(LOG_STATUS,\"connected to: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:      m_retrycntr = 0;",
          "137:      if (!ConnectInternal())",
          "138:      {",
          "140:       continue;",
          "141:      }",
          "142:     }",
          "",
          "[Removed Lines]",
          "139:       _log.Log(LOG_STATUS, \"CurrentCost Smart Meter: retrying in %d seconds...\", RETRY_DELAY);",
          "",
          "[Added Lines]",
          "139:       Log(LOG_STATUS, \"retrying in %d seconds...\", RETRY_DELAY);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152:    if ((bread==0)||(bread<0))",
          "153:    {",
          "154:     disconnect();",
          "156:     m_retrycntr = 0;",
          "157:     continue;",
          "158:    }",
          "159:    ParseData(data, bread);",
          "160:   }",
          "161:  }",
          "163: }",
          "165: void CurrentCostMeterTCP::write(const char* /*data*/, size_t /*size*/)",
          "",
          "[Removed Lines]",
          "155:     _log.Log(LOG_ERROR, \"CurrentCost Smart Meter: TCP/IP connection closed!, retrying in %d seconds...\", RETRY_DELAY);",
          "162:  _log.Log(LOG_STATUS,\"CurrentCost Smart Meter: TCP/IP Worker stopped...\");",
          "",
          "[Added Lines]",
          "155:     Log(LOG_ERROR, \"TCP/IP connection closed!, retrying in %d seconds...\", RETRY_DELAY);",
          "162:  Log(LOG_STATUS,\"TCP/IP Worker stopped...\");",
          "",
          "---------------"
        ],
        "hardware/Daikin.cpp||hardware/Daikin.cpp": [
          "File: hardware/Daikin.cpp -> hardware/Daikin.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: {",
          "128:  m_sec_counter = Daikin_POLL_INTERVAL - 2; // Trigger immediatly (in 2s) a POLL after startup.",
          "131:  while (!IsStopRequested(1000))",
          "132:  {",
          "133:   m_sec_counter++;",
          "",
          "[Removed Lines]",
          "130:  _log.Log(LOG_STATUS, \"Daikin: Worker started %s ...\", m_szIPAddress.c_str());",
          "",
          "[Added Lines]",
          "130:  Log(LOG_STATUS, \"Worker started %s ...\", m_szIPAddress.c_str());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:    GetMeterDetails();",
          "142:   }",
          "143:  }",
          "145: }",
          "149: bool CDaikin::WriteToHardware(const char *pdata, const unsigned char /*length*/)",
          "150: {",
          "152:  const tRBUF *pCmd = reinterpret_cast<const tRBUF *>(pdata);",
          "153:  unsigned char packettype = pCmd->ICMND.packettype;",
          "154:  unsigned char subtype = pCmd->ICMND.subtype;",
          "",
          "[Removed Lines]",
          "144:  _log.Log(LOG_STATUS, \"Daikin: Worker stopped %s ...\", m_szIPAddress.c_str());",
          "151:  _log.Debug(DEBUG_HARDWARE, \"Daikin: Worker %s, Write to Hardware...\", m_szIPAddress.c_str());",
          "",
          "[Added Lines]",
          "144:  Log(LOG_STATUS, \"Worker stopped %s ...\", m_szIPAddress.c_str());",
          "151:  Debug(DEBUG_HARDWARE, \"Worker %s, Write to Hardware...\", m_szIPAddress.c_str());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:   bool command = pSwitch->cmnd;",
          "185:   if (node_id == 1)",
          "",
          "[Removed Lines]",
          "182:   _log.Debug(DEBUG_HARDWARE, \"Daikin: Worker %s, Set General Switch ID %d, command : %d, value : %d\", m_szIPAddress.c_str(), node_id, command, pSwitch->level);",
          "",
          "[Added Lines]",
          "182:   Debug(DEBUG_HARDWARE, \"Worker %s, Set General Switch ID %d, command : %d, value : %d\", m_szIPAddress.c_str(), node_id, command, pSwitch->level);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221:   int node_id = pMeter->id2;",
          "226:   char szTmp[10];",
          "227:   sprintf(szTmp, \"%.1f\", pMeter->temp);",
          "",
          "[Removed Lines]",
          "224:   _log.Debug(DEBUG_HARDWARE, \"Daikin: Worker %s, Thermostat %.1f\", m_szIPAddress.c_str(), pMeter->temp);",
          "",
          "[Added Lines]",
          "224:   Debug(DEBUG_HARDWARE, \"Worker %s, Thermostat %.1f\", m_szIPAddress.c_str(), pMeter->temp);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "229:  }",
          "230:  else",
          "231:  {",
          "233:   return false;",
          "234:  }",
          "",
          "[Removed Lines]",
          "232:   _log.Log(LOG_ERROR, \"Daikin : Unknown action received\");",
          "",
          "[Added Lines]",
          "232:   Log(LOG_ERROR, \"Unknown action received\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "243: {",
          "244:  std::string sResult;",
          "248:  std::stringstream szURL;",
          "",
          "[Removed Lines]",
          "246:  _log.Debug(DEBUG_HARDWARE, \"Daikin: Set Point...\");",
          "",
          "[Added Lines]",
          "246:  Debug(DEBUG_HARDWARE, \"Set Point...\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "271:  if (!HTTPClient::GET(szURL.str(), sResult))",
          "272:  {",
          "274:   return;",
          "275:  }",
          "278:  if (sResult.find(\"ret=OK\") == std::string::npos)",
          "279:  {",
          "281:   return;",
          "282:  }",
          "",
          "[Removed Lines]",
          "273:   _log.Log(LOG_ERROR, \"Daikin: Error connecting to: %s\", m_szIPAddress.c_str());",
          "280:   _log.Log(LOG_ERROR, \"Daikin: Invalid response\");",
          "",
          "[Added Lines]",
          "273:   Log(LOG_ERROR, \"Error connecting to: %s\", m_szIPAddress.c_str());",
          "280:   Log(LOG_ERROR, \"Invalid response\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "336:  if (!HTTPClient::GET(szURL.str(), sResult))",
          "337:  {",
          "339:   return;",
          "340:  }",
          "",
          "[Removed Lines]",
          "338:   _log.Log(LOG_ERROR, \"Daikin: Error connecting to: %s\", m_szIPAddress.c_str());",
          "",
          "[Added Lines]",
          "338:   Log(LOG_ERROR, \"Error connecting to: %s\", m_szIPAddress.c_str());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "354:  if (sResult.find(\"ret=OK\") == std::string::npos)",
          "355:  {",
          "357:   return;",
          "358:  }",
          "359:  std::vector<std::string> results;",
          "360:  StringSplit(sResult, \",\", results);",
          "361:  if (results.size() < 8)",
          "362:  {",
          "364:   return;",
          "365:  }",
          "366:  for (const auto & itt : results)",
          "",
          "[Removed Lines]",
          "356:   _log.Log(LOG_ERROR, \"Daikin: Error getting data (check IP/Port)\");",
          "363:   _log.Log(LOG_ERROR, \"Daikin: Invalid data received\");",
          "",
          "[Added Lines]",
          "356:   Log(LOG_ERROR, \"Error getting data (check IP/Port)\");",
          "363:   Log(LOG_ERROR, \"Invalid data received\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "399:  if (!HTTPClient::GET(szURL.str(), sResult))",
          "400:  {",
          "402:   return;",
          "403:  }",
          "",
          "[Removed Lines]",
          "401:   _log.Log(LOG_ERROR, \"Daikin: Error connecting to: %s\", m_szIPAddress.c_str());",
          "",
          "[Added Lines]",
          "401:   Log(LOG_ERROR, \"Error connecting to: %s\", m_szIPAddress.c_str());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "424: #endif",
          "425:  if (sResult.find(\"ret=OK\") == std::string::npos)",
          "426:  {",
          "428:   return;",
          "429:  }",
          "430:  std::vector<std::string> results;",
          "431:  StringSplit(sResult, \",\", results);",
          "432:  if (results.size() < 8)",
          "433:  {",
          "435:   return;",
          "436:  }",
          "437:  for (const auto & itt : results)",
          "",
          "[Removed Lines]",
          "427:   _log.Log(LOG_ERROR, \"Daikin: Error getting data (check IP/Port)\");",
          "434:   _log.Log(LOG_ERROR, \"Daikin: Invalid data received\");",
          "",
          "[Added Lines]",
          "427:   Log(LOG_ERROR, \"Error getting data (check IP/Port)\");",
          "434:   Log(LOG_ERROR, \"Invalid data received\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "574:  if (!HTTPClient::GET(szURL.str(), sResult))",
          "575:  {",
          "577:   return;",
          "578:  }",
          "579: #ifdef DEBUG_DaikinW",
          "",
          "[Removed Lines]",
          "576:   _log.Log(LOG_ERROR, \"Daikin: Error connecting to: %s\", m_szIPAddress.c_str());",
          "",
          "[Added Lines]",
          "576:   Log(LOG_ERROR, \"Error connecting to: %s\", m_szIPAddress.c_str());",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "588:  if (sResult.find(\"ret=OK\") == std::string::npos)",
          "589:  {",
          "591:   return;",
          "592:  }",
          "593:  std::vector<std::string> results;",
          "594:  StringSplit(sResult, \",\", results);",
          "595:  if (results.size() < 6)",
          "596:  {",
          "598:   return;",
          "599:  }",
          "600:  float htemp = -1;",
          "",
          "[Removed Lines]",
          "590:   _log.Log(LOG_ERROR, \"Daikin: Error getting data (check IP/Port)\");",
          "597:   _log.Log(LOG_ERROR, \"Daikin: Invalid data received\");",
          "",
          "[Added Lines]",
          "590:   Log(LOG_ERROR, \"Error getting data (check IP/Port)\");",
          "597:   Log(LOG_ERROR, \"Invalid data received\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "635: {",
          "636:  std::string sResult;",
          "640:  std::stringstream szURL;",
          "",
          "[Removed Lines]",
          "638:  _log.Debug(DEBUG_HARDWARE, \"Daikin: Set Led ...\");",
          "",
          "[Added Lines]",
          "638:  Debug(DEBUG_HARDWARE, \"Set Led ...\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "658:  if (!HTTPClient::GET(szURL.str(), sResult))",
          "659:  {",
          "661:   return;",
          "662:  }",
          "664:  if (sResult.find(\"ret=OK\") == std::string::npos)",
          "665:  {",
          "667:   return;",
          "668:  }",
          "669: }",
          "",
          "[Removed Lines]",
          "660:   _log.Log(LOG_ERROR, \"Daikin: Error connecting to: %s\", m_szIPAddress.c_str());",
          "666:   _log.Log(LOG_ERROR, \"Daikin: Invalid response\");",
          "",
          "[Added Lines]",
          "660:   Log(LOG_ERROR, \"Error connecting to: %s\", m_szIPAddress.c_str());",
          "666:   Log(LOG_ERROR, \"Invalid response\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "672: {",
          "673:  std::string sResult;",
          "677:  std::stringstream szURL;",
          "",
          "[Removed Lines]",
          "675:  _log.Debug(DEBUG_HARDWARE, \"Daikin: Group On/Off...\");",
          "",
          "[Added Lines]",
          "675:  Debug(DEBUG_HARDWARE, \"Group On/Off...\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "704:  if (!HTTPClient::GET(szURL.str(), sResult))",
          "705:  {",
          "707:   return;",
          "708:  }",
          "711:  if (sResult.find(\"ret=OK\") == std::string::npos)",
          "712:  {",
          "714:   return;",
          "715:  }",
          "716:  if (OnOFF) m_sec_counter = Daikin_POLL_INTERVAL - 5; // Trigger a poll in the next 5s as we have Powe On",
          "",
          "[Removed Lines]",
          "706:   _log.Log(LOG_ERROR, \"Daikin: Error connecting to: %s\", m_szIPAddress.c_str());",
          "713:   _log.Log(LOG_ERROR, \"Daikin: Invalid response\");",
          "",
          "[Added Lines]",
          "706:   Log(LOG_ERROR, \"Error connecting to: %s\", m_szIPAddress.c_str());",
          "713:   Log(LOG_ERROR, \"Invalid response\");",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "803:  std::string sResult;",
          "807:  std::stringstream szURL;",
          "",
          "[Removed Lines]",
          "805:  _log.Debug(DEBUG_HARDWARE, \"Daikin: Mode Level...\");",
          "",
          "[Added Lines]",
          "805:  Debug(DEBUG_HARDWARE, \"Mode Level...\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "854:  if (!HTTPClient::GET(szURL.str(), sResult))",
          "855:  {",
          "857:   return;",
          "858:  }",
          "860:  if (sResult.find(\"ret=OK\") == std::string::npos)",
          "861:  {",
          "863:   return;",
          "864:  }",
          "865:  m_sec_counter = Daikin_POLL_INTERVAL - 5; // Trigger a poll in the next 5s",
          "",
          "[Removed Lines]",
          "856:   _log.Log(LOG_ERROR, \"Daikin: Error connecting to: %s\", m_szIPAddress.c_str());",
          "862:   _log.Log(LOG_ERROR, \"Daikin: Invalid response\");",
          "",
          "[Added Lines]",
          "856:   Log(LOG_ERROR, \"Error connecting to: %s\", m_szIPAddress.c_str());",
          "862:   Log(LOG_ERROR, \"Invalid response\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "871:  std::string sResult;",
          "875:  std::stringstream szURL;",
          "",
          "[Removed Lines]",
          "873:  _log.Debug(DEBUG_HARDWARE, \"Daikin: Rate ...\");",
          "",
          "[Added Lines]",
          "873:  Debug(DEBUG_HARDWARE, \"Rate ...\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "912:  if (!HTTPClient::GET(szURL.str(), sResult))",
          "913:  {",
          "915:   return;",
          "916:  }",
          "918:  if (sResult.find(\"ret=OK\") == std::string::npos)",
          "919:  {",
          "921:   return;",
          "922:  }",
          "923: }",
          "",
          "[Removed Lines]",
          "914:   _log.Log(LOG_ERROR, \"Daikin: Error connecting to: %s\", m_szIPAddress.c_str());",
          "920:   _log.Log(LOG_ERROR, \"Daikin: Invalid response\");",
          "",
          "[Added Lines]",
          "914:   Log(LOG_ERROR, \"Error connecting to: %s\", m_szIPAddress.c_str());",
          "920:   Log(LOG_ERROR, \"Invalid response\");",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "925: {",
          "926:  std::string sResult;",
          "930:  std::stringstream szURL;",
          "",
          "[Removed Lines]",
          "928:  _log.Debug(DEBUG_HARDWARE, \"Daikin: Dir Level ...\");",
          "",
          "[Added Lines]",
          "928:  Debug(DEBUG_HARDWARE, \"Dir Level ...\");",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "961:  if (!HTTPClient::GET(szURL.str(), sResult))",
          "962:  {",
          "964:   return;",
          "965:  }",
          "967:  if (sResult.find(\"ret=OK\") == std::string::npos)",
          "968:  {",
          "970:   return;",
          "971:  }",
          "972: }",
          "",
          "[Removed Lines]",
          "963:   _log.Log(LOG_ERROR, \"Daikin: Error connecting to: %s\", m_szIPAddress.c_str());",
          "969:   _log.Log(LOG_ERROR, \"Daikin: Invalid response\");",
          "",
          "[Added Lines]",
          "963:   Log(LOG_ERROR, \"Error connecting to: %s\", m_szIPAddress.c_str());",
          "969:   Log(LOG_ERROR, \"Invalid response\");",
          "",
          "---------------"
        ],
        "hardware/DarkSky.cpp||hardware/DarkSky.cpp": [
          "File: hardware/DarkSky.cpp -> hardware/DarkSky.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: void CDarkSky::Do_Work()",
          "92: {",
          "95:  int sec_counter = 290;",
          "96:  while (!IsStopRequested(1000))",
          "",
          "[Removed Lines]",
          "93:  _log.Log(LOG_STATUS, \"DarkSky: Started...\");",
          "",
          "[Added Lines]",
          "93:  Log(LOG_STATUS, \"Started...\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:    GetMeterDetails();",
          "105:   }",
          "106:  }",
          "108: }",
          "110: bool CDarkSky::WriteToHardware(const char* /*pdata*/, const unsigned char /*length*/)",
          "",
          "[Removed Lines]",
          "107:  _log.Log(LOG_STATUS,\"DarkSky: Worker stopped...\");",
          "",
          "[Added Lines]",
          "107:  Log(LOG_STATUS,\"Worker stopped...\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:   bret = HTTPClient::GET(szURL, sResult);",
          "138:   if (!bret)",
          "139:   {",
          "141:    return;",
          "142:   }",
          "143:  }",
          "144:  catch (...)",
          "145:  {",
          "147:   return;",
          "148:  }",
          "149: #ifdef DEBUG_DarkSkyW",
          "",
          "[Removed Lines]",
          "140:    _log.Log(LOG_ERROR, \"DarkSky: Error getting http data!.\");",
          "146:   _log.Log(LOG_ERROR, \"DarkSky: Error getting http data!\");",
          "",
          "[Added Lines]",
          "140:    Log(LOG_ERROR, \"Error getting http data!.\");",
          "146:   Log(LOG_ERROR, \"Error getting http data!\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:  bool ret=jReader.parse(sResult,root);",
          "158:  if ((!ret) || (!root.isObject()))",
          "159:  {",
          "161:   return;",
          "162:  }",
          "163:  if (root[\"currently\"].empty()==true)",
          "164:  {",
          "166:   return;",
          "167:  }",
          "",
          "[Removed Lines]",
          "160:   _log.Log(LOG_ERROR,\"DarkSky: Invalid data received! Check Location, use a City or GPS Coordinates (xx.yyyy,xx.yyyyy)\");",
          "165:   _log.Log(LOG_ERROR,\"DarkSky: Invalid data received, or unknown location!\");",
          "",
          "[Added Lines]",
          "160:   Log(LOG_ERROR,\"Invalid data received! Check Location, use a City or GPS Coordinates (xx.yyyy,xx.yyyyy)\");",
          "165:   Log(LOG_ERROR,\"Invalid data received, or unknown location!\");",
          "",
          "---------------"
        ],
        "hardware/DavisLoggerSerial.cpp||hardware/DavisLoggerSerial.cpp": [
          "File: hardware/DavisLoggerSerial.cpp -> hardware/DavisLoggerSerial.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  try",
          "72:  {",
          "73:   open(m_szSerialPort, m_iBaudRate);",
          "75:   m_statecounter = 0;",
          "76:   m_state = DSTATE_WAKEUP;",
          "77:  }",
          "78:  catch (boost::exception & e)",
          "79:  {",
          "81: #ifdef _DEBUG",
          "83: #else",
          "84:   (void)e;",
          "85: #endif",
          "",
          "[Removed Lines]",
          "74:   _log.Log(LOG_STATUS, \"Davis: Using serial port: %s\", m_szSerialPort.c_str());",
          "80:   _log.Log(LOG_ERROR, \"Davis: Error opening serial port!\");",
          "82:   _log.Log(LOG_ERROR, \"-----------------\\n%s\\n----------------\", boost::diagnostic_information(e).c_str());",
          "",
          "[Added Lines]",
          "74:   Log(LOG_STATUS, \"Using serial port: %s\", m_szSerialPort.c_str());",
          "80:   Log(LOG_ERROR, \"Error opening serial port!\");",
          "82:   Log(LOG_ERROR, \"-----------------\\n%s\\n----------------\", boost::diagnostic_information(e).c_str());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:  }",
          "88:  catch (...)",
          "89:  {",
          "91:   return false;",
          "92:  }",
          "93:  m_bIsStarted = true;",
          "",
          "[Removed Lines]",
          "90:   _log.Log(LOG_ERROR, \"Davis: Error opening serial port!!!\");",
          "",
          "[Added Lines]",
          "90:   Log(LOG_ERROR, \"Error opening serial port!!!\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104: void CDavisLoggerSerial::Do_Work()",
          "105: {",
          "108:  int sec_counter = 0;",
          "109:  while (!IsStopRequested(1000))",
          "",
          "[Removed Lines]",
          "106:  _log.Log(LOG_STATUS, \"Davis: Worker started...\");",
          "",
          "[Added Lines]",
          "106:  Log(LOG_STATUS, \"Worker started...\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:   {",
          "117:    if (m_retrycntr == 0)",
          "118:    {",
          "120:    }",
          "121:    m_retrycntr++;",
          "122:    if (m_retrycntr >= RETRY_DELAY)",
          "",
          "[Removed Lines]",
          "119:     _log.Log(LOG_STATUS, \"Davis: serial setup retry in %d seconds...\", RETRY_DELAY);",
          "",
          "[Added Lines]",
          "119:     Log(LOG_STATUS, \"serial setup retry in %d seconds...\", RETRY_DELAY);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:  }",
          "154:  terminate();",
          "157: }",
          "159: void CDavisLoggerSerial::readCallback(const char *data, size_t len)",
          "160: {",
          "161:  try",
          "162:  {",
          "165:   switch (m_state)",
          "166:   {",
          "167:   case DSTATE_WAKEUP:",
          "168:    if (len == 2) {",
          "170:     m_state = DSTATE_LOOP;",
          "171:     m_statecounter = DAVIS_READ_INTERVAL - 1;",
          "172:    }",
          "",
          "[Removed Lines]",
          "156:  _log.Log(LOG_STATUS, \"Davis: Worker stopped...\");",
          "169:     _log.Log(LOG_NORM, \"Davis: System is Awake...\");",
          "",
          "[Added Lines]",
          "156:  Log(LOG_STATUS, \"Worker stopped...\");",
          "169:     Log(LOG_NORM, \"System is Awake...\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "175:    if (len == 2)",
          "176:     break; //could be a left over from the awake",
          "177:    if (len != 100) {",
          "180:     terminate();",
          "181:    }",
          "",
          "[Removed Lines]",
          "178:     _log.Log(LOG_ERROR, \"Davis: Invalid bytes received!...\");",
          "",
          "[Added Lines]",
          "178:     Log(LOG_ERROR, \"Invalid bytes received!...\");",
          "",
          "---------------"
        ],
        "hardware/DomoticzTCP.cpp||hardware/DomoticzTCP.cpp": [
          "File: hardware/DomoticzTCP.cpp -> hardware/DomoticzTCP.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: void DomoticzTCP::OnConnect()",
          "82: {",
          "84:  if (!m_username.empty())",
          "85:  {",
          "86:   char szAuth[300];",
          "",
          "[Removed Lines]",
          "83:  _log.Log(LOG_STATUS, \"DomoticzTCP: connected to: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "",
          "[Added Lines]",
          "83:  Log(LOG_STATUS, \"connected to: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93: void DomoticzTCP::OnDisconnect()",
          "94: {",
          "96: }",
          "98: void DomoticzTCP::OnData(const unsigned char *pData, size_t length)",
          "99: {",
          "100:  if (length == 6 && strstr(reinterpret_cast<const char *>(pData), \"NOAUTH\") != 0)",
          "101:  {",
          "103:   return;",
          "104:  }",
          "105:  std::lock_guard<std::mutex> l(readQueueMutex);",
          "",
          "[Removed Lines]",
          "95:  _log.Log(LOG_STATUS, \"DomoticzTCP: disconnected from: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "102:   _log.Log(LOG_ERROR, \"DomoticzTCP: Authentication failed for user %s on %s:%d\", m_username.c_str(), m_szIPAddress.c_str(), m_usIPPort);",
          "",
          "[Added Lines]",
          "95:  Log(LOG_STATUS, \"disconnected from: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "102:   Log(LOG_ERROR, \"Authentication failed for user %s on %s:%d\", m_username.c_str(), m_szIPAddress.c_str(), m_usIPPort);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109: void DomoticzTCP::OnError(const std::exception e)",
          "110: {",
          "112: }",
          "114: void DomoticzTCP::OnError(const boost::system::error_code& error)",
          "",
          "[Removed Lines]",
          "111:  _log.Log(LOG_ERROR, \"DomoticzTCP: Error: %s\", e.what());",
          "",
          "[Added Lines]",
          "111:  Log(LOG_ERROR, \"Error: %s\", e.what());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122:   (error == boost::asio::error::host_not_found)",
          "123:   )",
          "124:  {",
          "126:  }",
          "127:  else if (error != boost::asio::error::eof)",
          "128:  {",
          "130:  }",
          "131: }",
          "",
          "[Removed Lines]",
          "125:   _log.Log(LOG_ERROR, \"DomoticzTCP: Can not connect to: %s:%d (%s)\", m_szIPAddress.c_str(), m_usIPPort, error.message().c_str());",
          "129:   _log.Log(LOG_ERROR, \"DomoticzTCP: %s\", error.message().c_str());",
          "",
          "[Added Lines]",
          "125:   Log(LOG_ERROR, \"Can not connect to: %s:%d (%s)\", m_szIPAddress.c_str(), m_usIPPort, error.message().c_str());",
          "129:   Log(LOG_ERROR, \"%s\", error.message().c_str());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "142:  }",
          "143:  terminate();",
          "146: }",
          "148: bool DomoticzTCP::WriteToHardware(const char *pdata, const unsigned char length)",
          "",
          "[Removed Lines]",
          "145:  _log.Log(LOG_STATUS, \"DomoticzTCP: Worker stopped...\");",
          "",
          "[Added Lines]",
          "145:  Log(LOG_STATUS, \"Worker stopped...\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "216:   sOnConnected(this); // we do need this?",
          "217:  }",
          "218:  else {",
          "220:  }",
          "221:  return true;",
          "222: }",
          "",
          "[Removed Lines]",
          "219:   _log.Log(LOG_STATUS, \"Delaying Domoticz master login\");",
          "",
          "[Added Lines]",
          "219:   Log(LOG_STATUS, \"Delaying Domoticz master login\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "274:  b_ProxyConnected = authenticated;",
          "275:  token = aToken;",
          "276:  if (authenticated) {",
          "278:  }",
          "279: }",
          "",
          "[Removed Lines]",
          "277:   _log.Log(LOG_STATUS, \"Domoticz TCP connected via Proxy.\");",
          "",
          "[Added Lines]",
          "277:   Log(LOG_STATUS, \"Domoticz TCP connected via Proxy.\");",
          "",
          "---------------"
        ],
        "hardware/Dummy.cpp||hardware/Dummy.cpp": [
          "File: hardware/Dummy.cpp -> hardware/Dummy.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:   const _tGeneralDevice *pMeter = reinterpret_cast<const _tGeneralDevice*>(pdata);",
          "55:   sdevicetype += \"/\" + std::string(RFX_Type_SubType_Desc(pMeter->type, pMeter->subtype));",
          "56:  }",
          "58: #endif",
          "59:  return true;",
          "60: }",
          "",
          "[Removed Lines]",
          "57:  _log.Log(LOG_STATUS, \"Dummy: Received null operation for %s\", sdevicetype.c_str());",
          "",
          "[Added Lines]",
          "57:  Log(LOG_STATUS, \"Received null operation for %s\", sdevicetype.c_str());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa011c15ba4f1ef000ef9ff75566eaa3a33da604",
      "candidate_info": {
        "commit_hash": "aa011c15ba4f1ef000ef9ff75566eaa3a33da604",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/aa011c15ba4f1ef000ef9ff75566eaa3a33da604",
        "files": [
          "hardware/TTNMQTT.cpp",
          "hardware/TTNMQTT.h"
        ],
        "message": "TTN, add GPS coordinate in Uservariable (3050)",
        "before_after_code_files": [
          "hardware/TTNMQTT.cpp||hardware/TTNMQTT.cpp",
          "hardware/TTNMQTT.h||hardware/TTNMQTT.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/TTNMQTT.cpp||hardware/TTNMQTT.cpp": [
          "File: hardware/TTNMQTT.cpp -> hardware/TTNMQTT.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include \"../json/json.h\"",
          "10: #include \"../webserver/Base64.h\"",
          "11: #include \"cayenne_lpp/CayenneLPP_Dec.h\"",
          "13: #define RETRY_DELAY 30",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #include <sstream>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:  }",
          "326: }",
          "329: void CTTNMQTT::on_message(const struct mosquitto_message *message)",
          "330: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: void CTTNMQTT::UpdateUserVariable(const std::string &varName, const std::string &varValue)",
          "330: {",
          "331:  std::string szLastUpdate = TimeToString(NULL, TF_DateTime);",
          "333:  int ID;",
          "335:  std::vector<std::vector<std::string> > result;",
          "336:  result = m_sql.safe_query(\"SELECT ID FROM UserVariables WHERE (Name=='%q')\", varName);",
          "337:  if (result.empty())",
          "338:  {",
          "339:   m_sql.safe_query(\"INSERT INTO UserVariables (Name, ValueType, Value) VALUES ('%q',%d,'%q')\", varName.c_str(), USERVARTYPE_STRING, varValue.c_str());",
          "340:   result = m_sql.safe_query(\"SELECT ID FROM UserVariables WHERE (Name=='%q')\", varName);",
          "341:   if (result.empty())",
          "342:    return;",
          "343:   ID = atoi(result[0][0].c_str());",
          "344:  }",
          "345:  else",
          "346:  {",
          "347:   ID = atoi(result[0][0].c_str());",
          "348:   m_sql.safe_query(\"UPDATE UserVariables SET Value='%q', LastUpdate='%q' WHERE (ID==%d)\", varValue.c_str(), szLastUpdate, ID);",
          "349:  }",
          "351:  m_mainworker.m_eventsystem.SetEventTrigger(ID, m_mainworker.m_eventsystem.REASON_USERVARIABLE, 0);",
          "352:  m_mainworker.m_eventsystem.UpdateUserVariable(ID, varValue, szLastUpdate);",
          "353: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "477:    }",
          "478:    else if (type == \"gps\")",
          "479:    {",
          "482:     float height = (*itt)[\"alt\"].asFloat();",
          "483:     SendPercentageSensor(DeviceID, 1, BatteryLevel, height, DeviceName + \" Altitude\");",
          "484:    }",
          "485:    else if ((type == \"digital_input\") || (type == \"digital_output\"))",
          "486:    {",
          "",
          "[Removed Lines]",
          "481:     _log.Log(LOG_STATUS, \"TTN_MQTT: GPS not implemented yet!\");",
          "",
          "[Added Lines]",
          "510:     std::stringstream sstr;",
          "511:     sstr << (*itt)[\"lat\"].asFloat() << \",\" << (*itt)[\"lon\"].asFloat() << \",\" << (*itt)[\"alt\"].asFloat();",
          "513:     UpdateUserVariable(DeviceName, sstr.str());",
          "",
          "---------------"
        ],
        "hardware/TTNMQTT.h||hardware/TTNMQTT.h": [
          "File: hardware/TTNMQTT.h -> hardware/TTNMQTT.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:  void SendMessage(const std::string &Topic, const std::string &Message);",
          "34: public:",
          "35:  bool m_bDoReconnect;",
          "36:  bool m_IsConnected;",
          "37:  boost::signals2::signal<void()> sDisconnected;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:  void UpdateUserVariable(const std::string &varName, const std::string &varValue);",
          "",
          "---------------"
        ]
      }
    }
  ]
}