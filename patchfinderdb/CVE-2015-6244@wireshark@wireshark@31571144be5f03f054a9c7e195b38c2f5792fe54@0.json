{
  "cve_id": "CVE-2015-6244",
  "cve_desc": "The dissect_zbee_secure function in epan/dissectors/packet-zbee-security.c in the ZigBee dissector in Wireshark 1.12.x before 1.12.7 improperly relies on length fields contained in packet data, which allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "31571144be5f03f054a9c7e195b38c2f5792fe54",
  "patch_info": {
    "commit_hash": "31571144be5f03f054a9c7e195b38c2f5792fe54",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/31571144be5f03f054a9c7e195b38c2f5792fe54",
    "files": [
      "epan/dissectors/packet-zbee-security.c"
    ],
    "message": "Use the reported length where appropriate.\n\nUse the captured length to know how much data to decrypt.  Use the\nreported length to determine whether we have a null payload and to se\nthe reported length of the decrypted payload and of tvbuffs for the\nun-decrypted payload.\n\nBug: 11389\nChange-Id: I4395c5a48c16110fcf31b611b99749c61000d489\nReviewed-on: https://code.wireshark.org/review/9953\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c": [
      "File: epan/dissectors/packet-zbee-security.c -> epan/dissectors/packet-zbee-security.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "465:     zbee_security_packet    packet;",
      "466:     guint           mic_len;",
      "468:     tvbuff_t       *payload_tvb;",
      "470: #ifdef HAVE_LIBGCRYPT",
      "471:     proto_item         *ti;",
      "472:     proto_item         *key_item;",
      "473:     guint8             *enc_buffer;",
      "",
      "[Removed Lines]",
      "467:     gint            payload_len;",
      "",
      "[Added Lines]",
      "467:     gint            payload_reported_len;",
      "471:     gint               payload_captured_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "636:     }",
      "641:         return NULL;",
      "",
      "[Removed Lines]",
      "639:     payload_len = tvb_captured_length_remaining(tvb, offset+mic_len);",
      "640:     if (payload_len == 0)",
      "",
      "[Added Lines]",
      "640:     payload_reported_len = tvb_reported_length_remaining(tvb, offset+mic_len);",
      "641:     if (payload_reported_len == 0)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "650:         (packet.level == ZBEE_SEC_MIC128)) {",
      "654:     }",
      "656: #ifdef HAVE_LIBGCRYPT",
      "660:     decrypted = FALSE;",
      "661:     if ( packet.src64 ) {",
      "",
      "[Removed Lines]",
      "653:         return tvb_new_subset_length(tvb, offset, payload_len);",
      "658:     dec_buffer = (guint8 *)g_malloc(payload_len);",
      "",
      "[Added Lines]",
      "654:         return tvb_new_subset_length(tvb, offset, payload_reported_len);",
      "659:     payload_captured_len = tvb_captured_length_remaining(tvb, offset+mic_len);",
      "662:     dec_buffer = (guint8 *)g_malloc(payload_captured_len);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "666:                     case ZBEE_SEC_KEY_NWK:",
      "667:                         if ( (key_rec = nwk_hints->nwk) ) {",
      "668:                             decrypted = zbee_sec_decrypt_payload( &packet, enc_buffer, offset, dec_buffer,",
      "670:                         }",
      "671:                         break;",
      "673:                     default:",
      "674:                         if ( (key_rec = nwk_hints->link) ) {",
      "675:                             decrypted = zbee_sec_decrypt_payload( &packet, enc_buffer, offset, dec_buffer,",
      "677:                         }",
      "678:                         break;",
      "679:                 }",
      "",
      "[Removed Lines]",
      "669:                                 payload_len, mic_len, nwk_hints->nwk->key);",
      "676:                                 payload_len, mic_len, nwk_hints->link->key);",
      "",
      "[Added Lines]",
      "673:                                 payload_captured_len, mic_len, nwk_hints->nwk->key);",
      "680:                                 payload_captured_len, mic_len, nwk_hints->link->key);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "695:                     GSList_i = *nwk_keyring;",
      "696:                     while ( GSList_i && !decrypted ) {",
      "697:                         decrypted = zbee_sec_decrypt_payload( &packet, enc_buffer, offset, dec_buffer,",
      "700:                         if (decrypted) {",
      "",
      "[Removed Lines]",
      "698:                                 payload_len, mic_len, ((key_record_t *)(GSList_i->data))->key);",
      "",
      "[Added Lines]",
      "702:                                 payload_captured_len, mic_len, ((key_record_t *)(GSList_i->data))->key);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "718:                 GSList_i = zbee_pc_keyring;",
      "719:                 while ( GSList_i && !decrypted ) {",
      "720:                     decrypted = zbee_sec_decrypt_payload( &packet, enc_buffer, offset, dec_buffer,",
      "723:                     if (decrypted) {",
      "",
      "[Removed Lines]",
      "721:                             payload_len, mic_len, ((key_record_t *)(GSList_i->data))->key);",
      "",
      "[Added Lines]",
      "725:                             payload_captured_len, mic_len, ((key_record_t *)(GSList_i->data))->key);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "754:         }",
      "759:         add_new_data_source(pinfo, payload_tvb, \"Decrypted ZigBee Payload\");",
      "",
      "[Removed Lines]",
      "757:         payload_tvb = tvb_new_child_real_data(tvb, dec_buffer, payload_len, payload_len);",
      "",
      "[Added Lines]",
      "761:         payload_tvb = tvb_new_child_real_data(tvb, dec_buffer, payload_captured_len, payload_reported_len);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "769:     expert_add_info(pinfo, sec_tree, &ei_zbee_sec_encrypted_payload);",
      "773:     call_dissector(data_handle, payload_tvb, pinfo, tree);",
      "",
      "[Removed Lines]",
      "771:     payload_tvb = tvb_new_subset(tvb, offset, payload_len, -1);",
      "",
      "[Added Lines]",
      "775:     payload_tvb = tvb_new_subset_length(tvb, offset, payload_reported_len);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "be1398c17ca1d5b203a930d9254125d602830aef",
      "candidate_info": {
        "commit_hash": "be1398c17ca1d5b203a930d9254125d602830aef",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/be1398c17ca1d5b203a930d9254125d602830aef",
        "files": [
          "docbook/wsdg_src/WSDG_chapter_dissection.asciidoc",
          "epan/dissectors/packet-dcp-etsi.c",
          "epan/dissectors/packet-dis.c",
          "epan/dissectors/packet-dvbci.c",
          "epan/dissectors/packet-icq.c",
          "epan/dissectors/packet-isakmp.c",
          "epan/dissectors/packet-osc.c",
          "epan/dissectors/packet-pdcp-lte.c",
          "epan/dissectors/packet-rlc-lte.c",
          "epan/dissectors/packet-selfm.c",
          "epan/dissectors/packet-sysex.c",
          "epan/dissectors/packet-telnet.c",
          "epan/dissectors/packet-zbee-nwk-gp.c",
          "epan/dissectors/packet-zbee-security.c"
        ],
        "message": "Convert uses of g_alloced data with tvb_new_child_real_data to use pinfo->pool instead.\n\nAldo update documentation to suggest using wmem pinfo->pool instead of glib memory\n\nChange-Id: I5d34cc6c1515aa9f0d57784b38da501ffcb95ccc\nReviewed-on: https://code.wireshark.org/review/16551\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Evan Huus <eapache@gmail.com>",
        "before_after_code_files": [
          "docbook/wsdg_src/WSDG_chapter_dissection.asciidoc||docbook/wsdg_src/WSDG_chapter_dissection.asciidoc",
          "epan/dissectors/packet-dcp-etsi.c||epan/dissectors/packet-dcp-etsi.c",
          "epan/dissectors/packet-dis.c||epan/dissectors/packet-dis.c",
          "epan/dissectors/packet-dvbci.c||epan/dissectors/packet-dvbci.c",
          "epan/dissectors/packet-icq.c||epan/dissectors/packet-icq.c",
          "epan/dissectors/packet-isakmp.c||epan/dissectors/packet-isakmp.c",
          "epan/dissectors/packet-osc.c||epan/dissectors/packet-osc.c",
          "epan/dissectors/packet-pdcp-lte.c||epan/dissectors/packet-pdcp-lte.c",
          "epan/dissectors/packet-rlc-lte.c||epan/dissectors/packet-rlc-lte.c",
          "epan/dissectors/packet-selfm.c||epan/dissectors/packet-selfm.c",
          "epan/dissectors/packet-sysex.c||epan/dissectors/packet-sysex.c",
          "epan/dissectors/packet-telnet.c||epan/dissectors/packet-telnet.c",
          "epan/dissectors/packet-zbee-nwk-gp.c||epan/dissectors/packet-zbee-nwk-gp.c",
          "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
          ],
          "candidate": [
            "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
          ]
        }
      },
      "candidate_diff": {
        "docbook/wsdg_src/WSDG_chapter_dissection.asciidoc||docbook/wsdg_src/WSDG_chapter_dissection.asciidoc": [
          "File: docbook/wsdg_src/WSDG_chapter_dissection.asciidoc -> docbook/wsdg_src/WSDG_chapter_dissection.asciidoc",
          "--- Hunk 1 ---",
          "[Context before]",
          "577:     offset ++;",
          "579:         guint16 orig_size = tvb_get_ntohs(tvb, offset);",
          "581:         offset += 2;",
          "582:         decompress_packet(tvb_get_ptr(tvb, offset, -1),",
          "583:                 tvb_captured_length_remaining(tvb, offset),",
          "584:                 decompressed_buffer, orig_size);",
          "586:         next_tvb = tvb_new_child_real_data(tvb, decompressed_buffer, orig_size, orig_size);",
          "588:         add_new_data_source(pinfo, next_tvb, \"Decompressed Data\");",
          "589:     } else {",
          "590:         next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "",
          "[Removed Lines]",
          "580:         guchar *decompressed_buffer = (guchar*)g_malloc(orig_size);",
          "587:         tvb_set_free_cb(next_tvb, g_free);",
          "",
          "[Added Lines]",
          "580:         guchar *decompressed_buffer = (guchar*)wmem_alloc(pinfo->pool, orig_size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "601: work it out for you, in which case the logic would be different.",
          "603: So armed with the size, a buffer is allocated to receive the uncompressed data",
          "609: Next we build a new tvb buffer from this data, using the",
          "610: +tvb_new_child_real_data()+ call. This data is a child of our original data, so",
          "618: After this has been set up the remainder of the dissector can dissect the buffer",
          "619: next_tvb, as it's a new buffer the offset needs to be 0 as we start again from",
          "",
          "[Removed Lines]",
          "604: using +g_malloc()+, and the packet is decompressed into it. The +tvb_get_ptr()+",
          "605: function is useful to get a pointer to the raw data of the packet from the",
          "606: offset onwards. In this case the decompression routine also needs to know the",
          "607: length, which is given by the +tvb_captured_length_remaining()+ function.",
          "611: calling this function also acknowledges that. One procedural step is to add a",
          "612: callback handler to free the data when it's no longer needed via a call to",
          "613: +tvb_set_free_cb()+. In this case +g_malloc()+ was used to allocate the memory,",
          "614: so +g_free()+ is the appropriate callback function. Finally we add this tvb as a",
          "615: new data source, so that the detailed display can show the decompressed bytes as",
          "616: well as the original.",
          "",
          "[Added Lines]",
          "603: using +wmem_alloc()+ in pinfo->pool memory, and the packet is decompressed into",
          "604: it. The +tvb_get_ptr()+ function is useful to get a pointer to the raw data of",
          "605: the packet from the offset onwards. In this case the decompression routine also",
          "606: needs to know the length, which is given by the",
          "607: +tvb_captured_length_remaining()+ function.",
          "611: calling this function also acknowledges that. No need to call",
          "612: +tvb_set_free_cb()+ as the pinfo->pool was used (the memory block will be",
          "613: automatically freed when the pinfo pool lifetime expires). Finally we add this",
          "614: tvb as a new data source, so that the detailed display can show the",
          "615: decompressed bytes as well as the original.",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-dcp-etsi.c||epan/dissectors/packet-dcp-etsi.c": [
          "File: epan/dissectors/packet-dcp-etsi.c -> epan/dissectors/packet-dcp-etsi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:     tvbuff_t *dtvb = NULL;",
          "344:     const guint8 *input = tvb_get_ptr(new_tvb, 0, -1);",
          "345:     guint32 reassembled_size = tvb_captured_length(new_tvb);",
          "348:     rs_deinterleave(input, deinterleaved, plen, fcount);",
          "350:     dtvb = tvb_new_child_real_data(tvb, deinterleaved, reassembled_size, reassembled_size);",
          "351:     add_new_data_source(pinfo, dtvb, \"Deinterleaved\");",
          "354:     decoded = rs_correct_data(deinterleaved, output, c_max, rsk, rsz);",
          "355:     if(tree)",
          "",
          "[Removed Lines]",
          "346:     guint8 *deinterleaved = (guint8*) g_malloc (reassembled_size);",
          "347:     guint8 *output = (guint8*) g_malloc (decoded_size);",
          "352:     tvb_set_free_cb(dtvb, g_free);",
          "",
          "[Added Lines]",
          "346:     guint8 *deinterleaved = (guint8*) wmem_alloc(pinfo->pool, reassembled_size);",
          "347:     guint8 *output = (guint8*) wmem_alloc(pinfo->pool, decoded_size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "358:     new_tvb = tvb_new_child_real_data(dtvb, output, decoded_size, decoded_size);",
          "359:     add_new_data_source(pinfo, new_tvb, \"RS Error Corrected Data\");",
          "361:   }",
          "362:   return new_tvb;",
          "363: }",
          "",
          "[Removed Lines]",
          "360:     tvb_set_free_cb(new_tvb, g_free);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-dis.c||epan/dissectors/packet-dis.c": [
          "File: epan/dissectors/packet-dis.c -> epan/dissectors/packet-dis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4388:         memset(&state, 0, sizeof(state));",
          "4390:         for (i = 0; i < (encodingScheme & 0x3FFF); i++) {",
          "4392:             if (!(i & 1)) {",
          "4393:                 word[0] = (cache >> 16) & 0xFF;",
          "4394:                 word[1] = (cache >> 24) & 0xFF;",
          "",
          "[Removed Lines]",
          "4391:             gint8 *word = (gint8 *)g_malloc(10);",
          "",
          "[Added Lines]",
          "4391:             gint8 *word = (gint8 *)wmem_alloc(pinfo->pool, 10);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4424:             }",
          "4426:             newtvb = tvb_new_child_real_data(tvb, word, 10, 10);",
          "4428:             add_new_data_source(pinfo, newtvb, \"Link 16 Word\");",
          "4429:             call_dissector_with_data(link16_handle, newtvb, pinfo, tree, &state);",
          "4430:         }",
          "",
          "[Removed Lines]",
          "4427:             tvb_set_free_cb(newtvb, g_free);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-dvbci.c||epan/dissectors/packet-dvbci.c": [
          "File: epan/dissectors/packet-dvbci.c -> epan/dissectors/packet-dvbci.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2393: static tvbuff_t *",
          "2395:         guint8 enc_cip, tvbuff_t *encrypted_tvb, gint offset, gint len)",
          "2396: {",
          "2397:     gboolean         opened = FALSE;",
          "",
          "[Removed Lines]",
          "2394: decrypt_sac_msg_body(",
          "",
          "[Added Lines]",
          "2394: decrypt_sac_msg_body(packet_info *pinfo,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2421:         goto end;",
          "2423:     clear_len = len;",
          "2426:     err = gcry_cipher_decrypt (cipher, clear_data, clear_len,",
          "2427:             tvb_memdup(wmem_packet_scope(), encrypted_tvb, offset, len), len);",
          "",
          "[Removed Lines]",
          "2424:     clear_data = (unsigned char *)g_malloc(clear_len);",
          "",
          "[Added Lines]",
          "2424:     clear_data = (unsigned char *)wmem_alloc(pinfo->pool, clear_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2431:     clear_tvb = tvb_new_child_real_data(encrypted_tvb,",
          "2432:                         (const guint8 *)clear_data, clear_len, clear_len);",
          "2435: end:",
          "2436:     if (opened)",
          "2437:         gcry_cipher_close (cipher);",
          "2440:     return clear_tvb;",
          "2441: }",
          "",
          "[Removed Lines]",
          "2433:     tvb_set_free_cb(clear_tvb, g_free);",
          "2438:     if (!clear_tvb && clear_data)",
          "2439:        g_free(clear_data);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2449: }",
          "2451: static tvbuff_t *",
          "2453:         tvbuff_t *encrypted_tvb _U_, gint offset _U_, gint len _U_)",
          "2454: {",
          "2455:     return NULL;",
          "",
          "[Removed Lines]",
          "2452: decrypt_sac_msg_body(guint8 enc_cip _U_,",
          "",
          "[Added Lines]",
          "2449: decrypt_sac_msg_body(packet_info *pinfo _U_, guint8 enc_cip _U_,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3408:     if (tvb_reported_length_remaining(tvb, offset) < 0)",
          "3409:         return;",
          "3410:     if (enc_flag) {",
          "3412:                 tvb, offset, tvb_reported_length_remaining(tvb, offset));",
          "3413:     }",
          "3414:     else {",
          "",
          "[Removed Lines]",
          "3411:         clear_sac_body_tvb = decrypt_sac_msg_body(enc_cip,",
          "",
          "[Added Lines]",
          "3408:         clear_sac_body_tvb = decrypt_sac_msg_body(pinfo, enc_cip,",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-icq.c||epan/dissectors/packet-icq.c": [
          "File: epan/dissectors/packet-icq.c -> epan/dissectors/packet-icq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1088:     rounded_size = ((((capturedsize - ICQ5_CL_SESSIONID) + 3)/4)*4) + ICQ5_CL_SESSIONID;",
          "1091:     tvb_memcpy(tvb, decr_pd, 0, capturedsize);",
          "1092:     decrypt_v5(decr_pd, rounded_size, key);",
          "1095:     decr_tvb = tvb_new_child_real_data(tvb, decr_pd, capturedsize, pktsize);",
          "1102:     add_new_data_source(pinfo, decr_tvb, \"Decrypted\");",
          "",
          "[Removed Lines]",
          "1090:     decr_pd = (guint8 *)g_malloc(rounded_size);",
          "1099:     tvb_set_free_cb(decr_tvb, g_free);",
          "",
          "[Added Lines]",
          "1090:     decr_pd = (guint8 *)wmem_alloc(pinfo->pool, rounded_size);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-isakmp.c||epan/dissectors/packet-isakmp.c": [
          "File: epan/dissectors/packet-isakmp.c -> epan/dissectors/packet-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1914:   if (gcry_cipher_setkey(decr_ctx, decr->secret, decr->secret_len))",
          "1915:     return NULL;",
          "1919:   if (gcry_cipher_decrypt(decr_ctx, decrypted_data, buf_len, buf, buf_len) != GPG_ERR_NO_ERROR) {",
          "1921:     return NULL;",
          "1922:   }",
          "1923:   gcry_cipher_close(decr_ctx);",
          "1925:   encr_tvb = tvb_new_child_real_data(tvb, decrypted_data, buf_len, buf_len);",
          "1929:   add_new_data_source(pinfo, encr_tvb, \"Decrypted IKE\");",
          "",
          "[Removed Lines]",
          "1917:   decrypted_data = (guint8 *)g_malloc(buf_len);",
          "1920:     g_free(decrypted_data);",
          "1926:   tvb_set_free_cb(encr_tvb, g_free);",
          "",
          "[Added Lines]",
          "1917:   decrypted_data = (guint8 *)wmem_alloc(pinfo->pool, buf_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5048:     decr_data_len = encr_data_len;",
          "",
          "[Removed Lines]",
          "5047:     decr_data = (guchar*)g_malloc(encr_data_len);",
          "",
          "[Added Lines]",
          "5045:     decr_data = (guchar*)wmem_alloc(pinfo->pool, encr_data_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5056:     } else {",
          "5057:       err = gcry_cipher_open(&cipher_hd, key_info->encr_spec->gcry_alg, key_info->encr_spec->gcry_mode, 0);",
          "5058:       if (err) {",
          "5060:         REPORT_DISSECTOR_BUG(wmem_strdup_printf(wmem_packet_scope(),",
          "5061:           \"IKEv2 decryption error: algorithm %d, mode %d: gcry_cipher_open failed: %s\",",
          "5062:           key_info->encr_spec->gcry_alg, key_info->encr_spec->gcry_mode, gcry_strerror(err)));",
          "5063:       }",
          "5064:       err = gcry_cipher_setkey(cipher_hd, key_info->encr_key, key_info->encr_spec->key_len);",
          "5065:       if (err) {",
          "5067:         REPORT_DISSECTOR_BUG(wmem_strdup_printf(wmem_packet_scope(),",
          "5068:           \"IKEv2 decryption error: algorithm %d, key length %d:  gcry_cipher_setkey failed: %s\",",
          "5069:           key_info->encr_spec->gcry_alg, key_info->encr_spec->key_len, gcry_strerror(err)));",
          "5070:       }",
          "5071:       err = gcry_cipher_setiv(cipher_hd, iv, iv_len);",
          "5072:       if (err) {",
          "5074:         REPORT_DISSECTOR_BUG(wmem_strdup_printf(wmem_packet_scope(),",
          "5075:           \"IKEv2 decryption error: algorithm %d, iv length %d:  gcry_cipher_setiv failed: %s\",",
          "5076:           key_info->encr_spec->gcry_alg, iv_len, gcry_strerror(err)));",
          "5077:       }",
          "5078:       err = gcry_cipher_decrypt(cipher_hd, decr_data, decr_data_len, encr_data, encr_data_len);",
          "5079:       if (err) {",
          "5081:         REPORT_DISSECTOR_BUG(wmem_strdup_printf(wmem_packet_scope(),",
          "5082:           \"IKEv2 decryption error: algorithm %d:  gcry_cipher_decrypt failed: %s\",",
          "5083:           key_info->encr_spec->gcry_alg, gcry_strerror(err)));",
          "",
          "[Removed Lines]",
          "5059:         g_free(decr_data);",
          "5066:         g_free(decr_data);",
          "5073:         g_free(decr_data);",
          "5080:         g_free(decr_data);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5086:     }",
          "5088:     decr_tvb = tvb_new_child_real_data(tvb, decr_data, decr_data_len, decr_data_len);",
          "5090:     add_new_data_source(pinfo, decr_tvb, \"Decrypted Data\");",
          "5091:     item = proto_tree_add_item(tree, hf_isakmp_enc_decrypted_data, decr_tvb, 0, decr_data_len, ENC_NA);",
          "5092:     proto_item_append_text(item, \" (%d byte%s)\", decr_data_len, plurality(decr_data_len, \"\", \"s\"));",
          "",
          "[Removed Lines]",
          "5089:     tvb_set_free_cb(decr_tvb, g_free);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-osc.c||epan/dissectors/packet-osc.c": [
          "File: epan/dissectors/packet-osc.c -> epan/dissectors/packet-osc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "979:             decoded_len = slip_decoded_len(encoded_buf, encoded_len);",
          "981:             {",
          "997:             }",
          "998:             else",
          "999:             {",
          "",
          "[Removed Lines]",
          "982:                 decoded_buf = (guint8 *)g_malloc(decoded_len);",
          "983:                 if(decoded_buf)",
          "984:                 {",
          "985:                     slip_decode(decoded_buf, encoded_buf, encoded_len);",
          "987:                     next_tvb = tvb_new_child_real_data(tvb, decoded_buf, decoded_len, decoded_len);",
          "988:                     tvb_set_free_cb(next_tvb, g_free);",
          "990:                     add_new_data_source(pinfo, next_tvb, \"SLIP-decoded Data\");",
          "991:                     dissect_osc_pdu_common(next_tvb, pinfo, tree, data, 0, decoded_len);",
          "992:                 }",
          "993:                 else",
          "994:                 {",
          "996:                 }",
          "",
          "[Added Lines]",
          "982:                 decoded_buf = (guint8 *)wmem_alloc(pinfo->pool, decoded_len);",
          "984:                 slip_decode(decoded_buf, encoded_buf, encoded_len);",
          "986:                 next_tvb = tvb_new_child_real_data(tvb, decoded_buf, decoded_len, decoded_len);",
          "988:                 add_new_data_source(pinfo, next_tvb, \"SLIP-decoded Data\");",
          "989:                 dissect_osc_pdu_common(next_tvb, pinfo, tree, data, 0, decoded_len);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-pdcp-lte.c||epan/dissectors/packet-pdcp-lte.c": [
          "File: epan/dissectors/packet-pdcp-lte.c -> epan/dissectors/packet-pdcp-lte.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1542:         payload_length = tvb_captured_length_remaining(tvb, *offset);",
          "1547:         gcrypt_err = gcry_cipher_decrypt(cypher_hd,",
          "",
          "[Removed Lines]",
          "1543:         decrypted_data = (guint8 *)g_malloc0(payload_length);",
          "1544:         tvb_memcpy(tvb, decrypted_data, *offset, payload_length);",
          "",
          "[Added Lines]",
          "1543:         decrypted_data = (guint8 *)tvb_memdup(pinfo->pool, tvb, *offset, payload_length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1549:                                          NULL, 0);",
          "1550:         if (gcrypt_err != 0) {",
          "1551:             gcry_cipher_close(cypher_hd);",
          "1553:             return tvb;",
          "1554:         }",
          "",
          "[Removed Lines]",
          "1552:             g_free(decrypted_data);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1563:     if (pdu_security_settings->ciphering == eea1) {",
          "1565:         payload_length = tvb_captured_length_remaining(tvb, *offset);",
          "1570:         snow3g_f8(pdu_security_settings->cipherKey,",
          "",
          "[Removed Lines]",
          "1566:         decrypted_data = (guint8 *)g_malloc0(payload_length+4);",
          "1567:         tvb_memcpy(tvb, decrypted_data, *offset, payload_length);",
          "",
          "[Added Lines]",
          "1564:         decrypted_data = (guint8 *)tvb_memdup(pinfo->pool, tvb, *offset, payload_length);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1579:     decrypted_tvb = tvb_new_child_real_data(tvb, decrypted_data, payload_length, payload_length);",
          "1581:     add_new_data_source(pinfo, decrypted_tvb, \"Deciphered Payload\");",
          "",
          "[Removed Lines]",
          "1580:     tvb_set_free_cb(decrypted_tvb, g_free);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-rlc-lte.c||epan/dissectors/packet-rlc-lte.c": [
          "File: epan/dissectors/packet-rlc-lte.c -> epan/dissectors/packet-rlc-lte.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:     for (n=0; n < reassembly_info->number_of_segments; n++) {",
          "525:         combined_length += reassembly_info->segments[n].length;",
          "526:     }",
          "530:     for (n=0; n < reassembly_info->number_of_segments; n++) {",
          "",
          "[Removed Lines]",
          "527:     combined_data = (guint8 *)g_malloc(combined_length);",
          "",
          "[Added Lines]",
          "527:     combined_data = (guint8 *)wmem_alloc(pinfo->pool, combined_length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "538:     reassembled_tvb = tvb_new_child_real_data(parent_tvb, combined_data, combined_offset, combined_offset);",
          "540:     add_new_data_source(pinfo, reassembled_tvb, \"Reassembled SDU\");",
          "541:     return reassembled_tvb;",
          "542: }",
          "",
          "[Removed Lines]",
          "539:     tvb_set_free_cb(reassembled_tvb, g_free);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-selfm.c||epan/dissectors/packet-selfm.c": [
          "File: epan/dissectors/packet-selfm.c -> epan/dissectors/packet-selfm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "834:     int           skip_byte, len_remaining;",
          "836:     spos=tvb_get_ptr(tvb, offset, len);",
          "838:     dpos=buf;",
          "839:     skip_byte = 0;",
          "840:     len_remaining = len;",
          "",
          "[Removed Lines]",
          "837:     buf=(guint8 *)g_malloc(len);",
          "",
          "[Added Lines]",
          "837:     buf=(guint8 *)wmem_alloc(pinfo->pool, len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "857:         len_remaining--;",
          "858:     }",
          "859:     telnet_tvb = tvb_new_child_real_data(tvb, buf, len-skip_byte, len-skip_byte);",
          "861:     add_new_data_source(pinfo, telnet_tvb, \"Processed Telnet Data\");",
          "863:     return telnet_tvb;",
          "",
          "[Removed Lines]",
          "860:     tvb_set_free_cb(telnet_tvb, g_free);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-sysex.c||epan/dissectors/packet-sysex.c": [
          "File: epan/dissectors/packet-sysex.c -> epan/dissectors/packet-sysex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "734:     VALUE_STRING_EXT_INIT(digitech_parameter_positions);",
          "736: static tvbuff_t *",
          "738: {",
          "739:     tvbuff_t *next_tvb;",
          "740:     gint length = tvb_reported_length(tvb);",
          "",
          "[Removed Lines]",
          "737: unpack_digitech_message(tvbuff_t *tvb, gint offset)",
          "",
          "[Added Lines]",
          "737: unpack_digitech_message(packet_info *pinfo, tvbuff_t *tvb, gint offset)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "754:     }",
          "756:     data_ptr = tvb_get_ptr(tvb, offset, data_len);",
          "758:     unpacked_ptr = unpacked;",
          "760:     while (remaining > 0)",
          "",
          "[Removed Lines]",
          "757:     unpacked = (guchar*)g_malloc(unpacked_size);",
          "",
          "[Added Lines]",
          "757:     unpacked = (guchar*)wmem_alloc(pinfo->pool, unpacked_size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "774:     next_tvb = tvb_new_child_real_data(tvb, unpacked, unpacked_size, unpacked_size);",
          "777:     return next_tvb;",
          "778: }",
          "",
          "[Removed Lines]",
          "775:     tvb_set_free_cb(next_tvb, g_free);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "979:         return;",
          "980:     }",
          "983:     add_new_data_source(pinfo, data_tvb, \"Unpacked Procedure Data\");",
          "985:     data_offset = 0;",
          "",
          "[Removed Lines]",
          "982:     data_tvb = unpack_digitech_message(tvb, offset);",
          "",
          "[Added Lines]",
          "981:     data_tvb = unpack_digitech_message(pinfo, tvb, offset);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-telnet.c||epan/dissectors/packet-telnet.c": [
          "File: epan/dissectors/packet-telnet.c -> epan/dissectors/packet-telnet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1050:     return NULL;",
          "1052:   spos=tvb_get_ptr(tvb, offset, len);",
          "1054:   dpos=buf;",
          "1055:   skip=0;",
          "1056:   l=len;",
          "",
          "[Removed Lines]",
          "1053:   buf=(guint8 *)g_malloc(len);",
          "",
          "[Added Lines]",
          "1053:   buf=(guint8 *)wmem_alloc(pinfo->pool, len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1066:     l--;",
          "1067:   }",
          "1068:   krb5_tvb = tvb_new_child_real_data(tvb, buf, len-skip, len-skip);",
          "1070:   add_new_data_source(pinfo, krb5_tvb, \"Unpacked Telnet Option\");",
          "1072:   return krb5_tvb;",
          "",
          "[Removed Lines]",
          "1069:   tvb_set_free_cb(krb5_tvb, g_free);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-zbee-nwk-gp.c||epan/dissectors/packet-zbee-nwk-gp.c": [
          "File: epan/dissectors/packet-zbee-nwk-gp.c -> epan/dissectors/packet-zbee-nwk-gp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1287:         THROW(BoundsError);",
          "1288:     }",
          "1289:     if (packet.security_level == ZBEE_NWK_GP_SECURITY_LEVEL_FULLENCR) {",
          "1291:         gp_decrypted = FALSE;",
          "1301:             }",
          "1302:         }",
          "1303:         if (gp_decrypted) {",
          "1304:             payload_tvb = tvb_new_child_real_data(tvb, dec_buffer, packet.payload_len, packet.payload_len);",
          "1305:             add_new_data_source(pinfo, payload_tvb, \"Decrypted GP Payload\");",
          "1306:             dissect_zbee_nwk_gp_cmd(payload_tvb, pinfo, nwk_tree, data);",
          "1308:         } else {",
          "1310:             payload_tvb = tvb_new_subset(tvb, offset - packet.payload_len - packet.mic_size, packet.payload_len, -1);",
          "1311:             call_data_dissector(payload_tvb, pinfo, tree);",
          "1312:         }",
          "",
          "[Removed Lines]",
          "1290:         dec_buffer = (guint8 *)g_malloc(packet.payload_len);",
          "1292:         if (packet.security_level == ZBEE_NWK_GP_SECURITY_LEVEL_FULLENCR) {",
          "1293:             GSList_i = zbee_gp_keyring;",
          "1294:             while (GSList_i && !gp_decrypted) {",
          "1295:                 gp_decrypted = zbee_gp_decrypt_payload(&packet, enc_buffer, offset - packet.payload_len -",
          "1296:                     packet.mic_size, dec_buffer, packet.payload_len, packet.mic_size,",
          "1297:                     ((key_record_t *)(GSList_i->data))->key);",
          "1298:                 if (!gp_decrypted) {",
          "1299:                     GSList_i = g_slist_next(GSList_i);",
          "1300:                 }",
          "1307:             g_free(dec_buffer);",
          "1309:             g_free(dec_buffer);",
          "",
          "[Added Lines]",
          "1290:         dec_buffer = (guint8 *)wmem_alloc(pinfo->pool, packet.payload_len);",
          "1292:         GSList_i = zbee_gp_keyring;",
          "1293:         while (GSList_i && !gp_decrypted) {",
          "1294:             gp_decrypted = zbee_gp_decrypt_payload(&packet, enc_buffer, offset - packet.payload_len -",
          "1295:                 packet.mic_size, dec_buffer, packet.payload_len, packet.mic_size,",
          "1296:                 ((key_record_t *)(GSList_i->data))->key);",
          "1297:             if (!gp_decrypted) {",
          "1298:                 GSList_i = g_slist_next(GSList_i);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c": [
          "File: epan/dissectors/packet-zbee-security.c -> epan/dissectors/packet-zbee-security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "648:     }",
          "653:     decrypted = FALSE;",
          "654:     if ( packet.src64 ) {",
          "",
          "[Removed Lines]",
          "651:     dec_buffer = (guint8 *)g_malloc(payload_len);",
          "",
          "[Added Lines]",
          "651:     dec_buffer = (guint8 *)wmem_alloc(pinfo->pool, payload_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "750:         payload_tvb = tvb_new_child_real_data(tvb, dec_buffer, payload_len, payload_len);",
          "752:         add_new_data_source(pinfo, payload_tvb, \"Decrypted ZigBee Payload\");",
          "755:         return payload_tvb;",
          "756:     }",
          "",
          "[Removed Lines]",
          "758:     g_free(dec_buffer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "655b0dc623e29da212be3e205314624fe3182562",
      "candidate_info": {
        "commit_hash": "655b0dc623e29da212be3e205314624fe3182562",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/655b0dc623e29da212be3e205314624fe3182562",
        "files": [
          "epan/dissectors/packet-zbee-security.c"
        ],
        "message": "use the captured length as payload length for zigbee decryption\n\nthis length is used for allocating a buffer and for crypto calculations\nwe should use the bytes that were actually captured, not the reported\nlength\n\nthe capture in https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=11389\nhas one packet with a stupidly large reported length and a reasonable\ncapture length (and one completely bogus packet) - this fix ensures that\nthe decryption does not break for the former packet\n\nalso, tvb_reported_length_remaining() does not return values < 0 any\nmore, remove the check for this\n\nBug: 11389\nChange-Id: I42cb4526483160416b51e3cb72442148b5fac4f3\nReviewed-on: https://code.wireshark.org/review/9950\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
          ],
          "candidate": [
            "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c": [
          "File: epan/dissectors/packet-zbee-security.c -> epan/dissectors/packet-zbee-security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "636:     }",
          "640:         return NULL;",
          "",
          "[Removed Lines]",
          "639:     if ( !(payload_len = tvb_reported_length_remaining(tvb, offset+mic_len)) ) {",
          "641:     } else if ( payload_len < 0 ) {",
          "642:         THROW(ReportedBoundsError);",
          "643:     }",
          "",
          "[Added Lines]",
          "639:     payload_len = tvb_captured_length_remaining(tvb, offset+mic_len);",
          "640:     if (payload_len == 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75d46fec3f32977de88c52b7b3f54bebca108cd5",
      "candidate_info": {
        "commit_hash": "75d46fec3f32977de88c52b7b3f54bebca108cd5",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/75d46fec3f32977de88c52b7b3f54bebca108cd5",
        "files": [
          "epan/dissectors/packet-zbee-security.c"
        ],
        "message": "Get rid of trailing white space.\n\nChange-Id: I3c0091612bdd518f749abbfbefbd0e2097b8c18b\nReviewed-on: https://code.wireshark.org/review/9958\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
          ],
          "candidate": [
            "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c": [
          "File: epan/dissectors/packet-zbee-security.c -> epan/dissectors/packet-zbee-security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "674:         call_dissector(data_handle, payload_tvb, pinfo, tree);",
          "676:         return NULL;",
          "680:     dec_buffer = (guint8 *)g_malloc(payload_len);",
          "",
          "[Removed Lines]",
          "677:     }",
          "",
          "[Added Lines]",
          "677:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43c2e5769a17f0945fdcdabe35204a13ca9bbc85",
      "candidate_info": {
        "commit_hash": "43c2e5769a17f0945fdcdabe35204a13ca9bbc85",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/43c2e5769a17f0945fdcdabe35204a13ca9bbc85",
        "files": [
          "epan/dissectors/packet-zbee-security.c"
        ],
        "message": "Don't try to decrypt the payload if it was cut short by the snapshot length.\n\nIt's not clear that the decryption code can handle an incomplete\npayload.  If it can, please fix this (bear in mind that you won't have\nall the MIC, and may not have *any* of the MIC, so...).\n\nBug: 11389\nChange-Id: Ie863ddc5c4aa7fbf6cde317823a413d226a41c0d\nReviewed-on: https://code.wireshark.org/review/9954\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
          ],
          "candidate": [
            "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c": [
          "File: epan/dissectors/packet-zbee-security.c -> epan/dissectors/packet-zbee-security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: static gint ett_zbee_sec_control = -1;",
          "73: static expert_field ei_zbee_sec_encrypted_payload = EI_INIT;",
          "74: static expert_field ei_zbee_sec_extended_source_unknown = EI_INIT;",
          "76: static dissector_handle_t   data_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: static expert_field ei_zbee_sec_encrypted_payload_sliced = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "285:     static ei_register_info ei[] = {",
          "286:         { &ei_zbee_sec_encrypted_payload, { \"zbee_sec.encrypted_payload\", PI_UNDECODED, PI_WARN, \"Encrypted Payload\", EXPFILL }},",
          "287:         { &ei_zbee_sec_extended_source_unknown, { \"zbee_sec.extended_source_unknown\", PI_PROTOCOL, PI_NOTE, \"Extended Source: Unknown\", EXPFILL }},",
          "288:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:         { &ei_zbee_sec_encrypted_payload_sliced, { \"zbee_sec.encrypted_payload_sliced\", PI_UNDECODED, PI_WARN, \"Encrypted payload, cut short when capturing - can't decrypt\", EXPFILL }},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "465:     zbee_security_packet    packet;",
          "466:     guint           mic_len;",
          "468:     tvbuff_t       *payload_tvb;",
          "470: #ifdef HAVE_LIBGCRYPT",
          "472:     proto_item         *ti;",
          "473:     proto_item         *key_item;",
          "474:     guint8             *enc_buffer;",
          "",
          "[Removed Lines]",
          "467:     gint            payload_reported_len;",
          "471:     gint               payload_captured_len;",
          "",
          "[Added Lines]",
          "469:     gint            payload_len;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "637:     }",
          "642:         return NULL;",
          "",
          "[Removed Lines]",
          "640:     payload_reported_len = tvb_reported_length_remaining(tvb, offset+mic_len);",
          "641:     if (payload_reported_len == 0)",
          "",
          "[Added Lines]",
          "641:     payload_len = tvb_reported_length_remaining(tvb, offset+mic_len);",
          "642:     if (payload_len == 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "651:         (packet.level == ZBEE_SEC_MIC128)) {",
          "655:     }",
          "657: #ifdef HAVE_LIBGCRYPT",
          "664:     decrypted = FALSE;",
          "665:     if ( packet.src64 ) {",
          "",
          "[Removed Lines]",
          "654:         return tvb_new_subset_length(tvb, offset, payload_reported_len);",
          "659:     payload_captured_len = tvb_captured_length_remaining(tvb, offset+mic_len);",
          "662:     dec_buffer = (guint8 *)g_malloc(payload_captured_len);",
          "",
          "[Added Lines]",
          "655:         return tvb_new_subset_length(tvb, offset, payload_len);",
          "660:     if (tvb_captured_length_remaining(tvb, offset+mic_len) < payload_len) {",
          "670:         expert_add_info(pinfo, sec_tree, &ei_zbee_sec_encrypted_payload_sliced);",
          "672:         payload_tvb = tvb_new_subset_length(tvb, offset, payload_len);",
          "674:         call_dissector(data_handle, payload_tvb, pinfo, tree);",
          "676:         return NULL;",
          "677:     }",
          "680:     dec_buffer = (guint8 *)g_malloc(payload_len);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "670:                     case ZBEE_SEC_KEY_NWK:",
          "671:                         if ( (key_rec = nwk_hints->nwk) ) {",
          "672:                             decrypted = zbee_sec_decrypt_payload( &packet, enc_buffer, offset, dec_buffer,",
          "674:                         }",
          "675:                         break;",
          "677:                     default:",
          "678:                         if ( (key_rec = nwk_hints->link) ) {",
          "679:                             decrypted = zbee_sec_decrypt_payload( &packet, enc_buffer, offset, dec_buffer,",
          "681:                         }",
          "682:                         break;",
          "683:                 }",
          "",
          "[Removed Lines]",
          "673:                                 payload_captured_len, mic_len, nwk_hints->nwk->key);",
          "680:                                 payload_captured_len, mic_len, nwk_hints->link->key);",
          "",
          "[Added Lines]",
          "691:                                 payload_len, mic_len, nwk_hints->nwk->key);",
          "698:                                 payload_len, mic_len, nwk_hints->link->key);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "699:                     GSList_i = *nwk_keyring;",
          "700:                     while ( GSList_i && !decrypted ) {",
          "701:                         decrypted = zbee_sec_decrypt_payload( &packet, enc_buffer, offset, dec_buffer,",
          "704:                         if (decrypted) {",
          "",
          "[Removed Lines]",
          "702:                                 payload_captured_len, mic_len, ((key_record_t *)(GSList_i->data))->key);",
          "",
          "[Added Lines]",
          "720:                                 payload_len, mic_len, ((key_record_t *)(GSList_i->data))->key);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "722:                 GSList_i = zbee_pc_keyring;",
          "723:                 while ( GSList_i && !decrypted ) {",
          "724:                     decrypted = zbee_sec_decrypt_payload( &packet, enc_buffer, offset, dec_buffer,",
          "727:                     if (decrypted) {",
          "",
          "[Removed Lines]",
          "725:                             payload_captured_len, mic_len, ((key_record_t *)(GSList_i->data))->key);",
          "",
          "[Added Lines]",
          "743:                             payload_len, mic_len, ((key_record_t *)(GSList_i->data))->key);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "758:         }",
          "763:         add_new_data_source(pinfo, payload_tvb, \"Decrypted ZigBee Payload\");",
          "",
          "[Removed Lines]",
          "761:         payload_tvb = tvb_new_child_real_data(tvb, dec_buffer, payload_captured_len, payload_reported_len);",
          "",
          "[Added Lines]",
          "779:         payload_tvb = tvb_new_child_real_data(tvb, dec_buffer, payload_len, payload_len);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "773:     expert_add_info(pinfo, sec_tree, &ei_zbee_sec_encrypted_payload);",
          "777:     call_dissector(data_handle, payload_tvb, pinfo, tree);",
          "",
          "[Removed Lines]",
          "775:     payload_tvb = tvb_new_subset_length(tvb, offset, payload_reported_len);",
          "",
          "[Added Lines]",
          "793:     payload_tvb = tvb_new_subset_length(tvb, offset, payload_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f21835ea605c68089e7066cf2956c166a2abbfc",
      "candidate_info": {
        "commit_hash": "1f21835ea605c68089e7066cf2956c166a2abbfc",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/1f21835ea605c68089e7066cf2956c166a2abbfc",
        "files": [
          "epan/dissectors/packet-zbee-security.c"
        ],
        "message": "Use the reported length where appropriate.\n\nUse the captured length to know how much data to decrypt.  Use the\nreported length to determine whether we have a null payload and to se\nthe reported length of the decrypted payload and of tvbuffs for the\nun-decrypted payload.\n\nBug: 11389\nChange-Id: I8670a5eb5f5a7df134c09ddb3c9dfd611ffa839e\nReviewed-on: https://code.wireshark.org/review/9956\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 76d50a7f46df6cd74c38f664e778d8563e4cab68)\nReviewed-on: https://code.wireshark.org/review/10616\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
          ],
          "candidate": [
            "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-zbee-security.c||epan/dissectors/packet-zbee-security.c": [
          "File: epan/dissectors/packet-zbee-security.c -> epan/dissectors/packet-zbee-security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:     zbee_security_packet    packet;",
          "431:     guint           mic_len;",
          "433:     tvbuff_t       *payload_tvb;",
          "435: #ifdef HAVE_LIBGCRYPT",
          "436:     guint8             *enc_buffer;",
          "437:     guint8             *dec_buffer;",
          "438:     gboolean            decrypted;",
          "",
          "[Removed Lines]",
          "432:     gint            payload_len;",
          "",
          "[Added Lines]",
          "432:     gint            payload_reported_len;",
          "436:     gint               payload_captured_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "603:     }",
          "608:         return NULL;",
          "",
          "[Removed Lines]",
          "606:     payload_len = tvb_captured_length_remaining(tvb, offset+mic_len);",
          "607:     if (payload_len == 0)",
          "",
          "[Added Lines]",
          "607:     payload_reported_len = tvb_reported_length_remaining(tvb, offset+mic_len);",
          "608:     if (payload_reported_len == 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "617:         (packet.level == ZBEE_SEC_MIC128)) {",
          "621:     }",
          "623: #ifdef HAVE_LIBGCRYPT",
          "627:     decrypted = FALSE;",
          "628:     if ( packet.src64 ) {",
          "",
          "[Removed Lines]",
          "620:         return tvb_new_subset(tvb, offset, payload_len, payload_len);",
          "625:     dec_buffer = (guint8 *)g_malloc(payload_len);",
          "",
          "[Added Lines]",
          "621:         return tvb_new_subset_length(tvb, offset, payload_reported_len);",
          "626:     payload_captured_len = tvb_captured_length_remaining(tvb, offset+mic_len);",
          "629:     dec_buffer = (guint8 *)g_malloc(payload_captured_len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "633:                     case ZBEE_SEC_KEY_NWK:",
          "634:                         if ( (key_rec = nwk_hints->nwk) ) {",
          "635:                             decrypted = zbee_sec_decrypt_payload( &packet, enc_buffer, offset, dec_buffer,",
          "637:                         }",
          "638:                         break;",
          "640:                     default:",
          "641:                         if ( (key_rec = nwk_hints->link) ) {",
          "642:                             decrypted = zbee_sec_decrypt_payload( &packet, enc_buffer, offset, dec_buffer,",
          "644:                         }",
          "645:                         break;",
          "646:                 }",
          "",
          "[Removed Lines]",
          "636:                                 payload_len, mic_len, nwk_hints->nwk->key);",
          "643:                                 payload_len, mic_len, nwk_hints->link->key);",
          "",
          "[Added Lines]",
          "640:                                 payload_captured_len, mic_len, nwk_hints->nwk->key);",
          "647:                                 payload_captured_len, mic_len, nwk_hints->link->key);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "662:                     GSList_i = *nwk_keyring;",
          "663:                     while ( GSList_i && !decrypted ) {",
          "664:                         decrypted = zbee_sec_decrypt_payload( &packet, enc_buffer, offset, dec_buffer,",
          "667:                         if (decrypted) {",
          "",
          "[Removed Lines]",
          "665:                                 payload_len, mic_len, ((key_record_t *)(GSList_i->data))->key);",
          "",
          "[Added Lines]",
          "669:                                 payload_captured_len, mic_len, ((key_record_t *)(GSList_i->data))->key);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "685:                 GSList_i = zbee_pc_keyring;",
          "686:                 while ( GSList_i && !decrypted ) {",
          "687:                     decrypted = zbee_sec_decrypt_payload( &packet, enc_buffer, offset, dec_buffer,",
          "690:                     if (decrypted) {",
          "",
          "[Removed Lines]",
          "688:                             payload_len, mic_len, ((key_record_t *)(GSList_i->data))->key);",
          "",
          "[Added Lines]",
          "692:                             payload_captured_len, mic_len, ((key_record_t *)(GSList_i->data))->key);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "718:         }",
          "723:         add_new_data_source(pinfo, payload_tvb, \"Decrypted ZigBee Payload\");",
          "",
          "[Removed Lines]",
          "721:         payload_tvb = tvb_new_child_real_data(tvb, dec_buffer, payload_len, payload_len);",
          "",
          "[Added Lines]",
          "725:         payload_tvb = tvb_new_child_real_data(tvb, dec_buffer, payload_captured_len, payload_reported_len);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "733:     expert_add_info(pinfo, sec_tree, &ei_zbee_sec_encrypted_payload);",
          "737:     call_dissector(data_handle, payload_tvb, pinfo, tree);",
          "",
          "[Removed Lines]",
          "735:     payload_tvb = tvb_new_subset(tvb, offset, payload_len, -1);",
          "",
          "[Added Lines]",
          "739:     payload_tvb = tvb_new_subset_length(tvb, offset, payload_reported_len);",
          "",
          "---------------"
        ]
      }
    }
  ]
}