{
  "cve_id": "CVE-2017-7863",
  "cve_desc": "FFmpeg before 2017-02-04 has an out-of-bounds write caused by a heap-based buffer overflow related to the decode_frame_common function in libavcodec/pngdec.c.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "e477f09d0b3619f3d29173b2cd593e17e2d1978e",
  "patch_info": {
    "commit_hash": "e477f09d0b3619f3d29173b2cd593e17e2d1978e",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/e477f09d0b3619f3d29173b2cd593e17e2d1978e",
    "files": [
      "libavcodec/pngdec.c"
    ],
    "message": "avcodec/pngdec: Check trns more completely\n\nFixes out of array access\nFixes: 546/clusterfuzz-testcase-4809433909559296\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/targets/ffmpeg\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "before_after_code_files": [
      "libavcodec/pngdec.c||libavcodec/pngdec.c"
    ]
  },
  "patch_diff": {
    "libavcodec/pngdec.c||libavcodec/pngdec.c": [
      "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "772: {",
      "773:     int v, i;",
      "775:     if (s->color_type == PNG_COLOR_TYPE_PALETTE) {",
      "776:         if (length > 256 || !(s->state & PNG_PLTE))",
      "777:             return AVERROR_INVALIDDATA;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "775:     if (!(s->state & PNG_IHDR)) {",
      "776:         av_log(avctx, AV_LOG_ERROR, \"trns before IHDR\\n\");",
      "777:         return AVERROR_INVALIDDATA;",
      "778:     }",
      "780:     if (s->state & PNG_IDAT) {",
      "781:         av_log(avctx, AV_LOG_ERROR, \"trns after IDAT\\n\");",
      "782:         return AVERROR_INVALIDDATA;",
      "783:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "782:         }",
      "783:     } else if (s->color_type == PNG_COLOR_TYPE_GRAY || s->color_type == PNG_COLOR_TYPE_RGB) {",
      "784:         if ((s->color_type == PNG_COLOR_TYPE_GRAY && length != 2) ||",
      "786:             return AVERROR_INVALIDDATA;",
      "788:         for (i = 0; i < length / 2; i++) {",
      "",
      "[Removed Lines]",
      "785:             (s->color_type == PNG_COLOR_TYPE_RGB && length != 6))",
      "",
      "[Added Lines]",
      "795:             (s->color_type == PNG_COLOR_TYPE_RGB && length != 6) ||",
      "796:             s->bit_depth == 1)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1242:         size_t raw_bpp = s->bpp - byte_depth;",
      "1243:         unsigned x, y;",
      "1245:         for (y = 0; y < s->height; ++y) {",
      "1246:             uint8_t *row = &s->image_buf[s->image_linesize * y];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1256:         av_assert0(s->bit_depth > 1);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7e1d9d25fe0494403f438c4487d5e2ab4a2bbac0",
      "candidate_info": {
        "commit_hash": "7e1d9d25fe0494403f438c4487d5e2ab4a2bbac0",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/7e1d9d25fe0494403f438c4487d5e2ab4a2bbac0",
        "files": [
          "libavcodec/pngdec.c"
        ],
        "message": "avcodec/pngdec: Check trns more completely\n\nFixes out of array access\nFixes: 546/clusterfuzz-testcase-4809433909559296\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/targets/ffmpeg\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit e477f09d0b3619f3d29173b2cd593e17e2d1978e)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/pngdec.c||libavcodec/pngdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ],
          "candidate": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/pngdec.c||libavcodec/pngdec.c": [
          "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "772: {",
          "773:     int v, i;",
          "775:     if (s->color_type == PNG_COLOR_TYPE_PALETTE) {",
          "776:         if (length > 256 || !(s->state & PNG_PLTE))",
          "777:             return AVERROR_INVALIDDATA;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:     if (!(s->state & PNG_IHDR)) {",
          "776:         av_log(avctx, AV_LOG_ERROR, \"trns before IHDR\\n\");",
          "777:         return AVERROR_INVALIDDATA;",
          "778:     }",
          "780:     if (s->state & PNG_IDAT) {",
          "781:         av_log(avctx, AV_LOG_ERROR, \"trns after IDAT\\n\");",
          "782:         return AVERROR_INVALIDDATA;",
          "783:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "782:         }",
          "783:     } else if (s->color_type == PNG_COLOR_TYPE_GRAY || s->color_type == PNG_COLOR_TYPE_RGB) {",
          "784:         if ((s->color_type == PNG_COLOR_TYPE_GRAY && length != 2) ||",
          "786:             return AVERROR_INVALIDDATA;",
          "788:         for (i = 0; i < length / 2; i++) {",
          "",
          "[Removed Lines]",
          "785:             (s->color_type == PNG_COLOR_TYPE_RGB && length != 6))",
          "",
          "[Added Lines]",
          "795:             (s->color_type == PNG_COLOR_TYPE_RGB && length != 6) ||",
          "796:             s->bit_depth == 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1241:         size_t raw_bpp = s->bpp - byte_depth;",
          "1242:         unsigned x, y;",
          "1244:         for (y = 0; y < s->height; ++y) {",
          "1245:             uint8_t *row = &s->image_buf[s->image_linesize * y];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1255:         av_assert0(s->bit_depth > 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9115acb32680e4298c516a16e9a4482debfb6a80",
      "candidate_info": {
        "commit_hash": "9115acb32680e4298c516a16e9a4482debfb6a80",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/9115acb32680e4298c516a16e9a4482debfb6a80",
        "files": [
          "libavcodec/pngdec.c"
        ],
        "message": "avcodec/pngdec: Check trns more completely\n\nFixes out of array access\nFixes: 546/clusterfuzz-testcase-4809433909559296\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/targets/ffmpeg\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit e477f09d0b3619f3d29173b2cd593e17e2d1978e)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/pngdec.c||libavcodec/pngdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ],
          "candidate": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/pngdec.c||libavcodec/pngdec.c": [
          "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "772: {",
          "773:     int v, i;",
          "775:     if (s->color_type == PNG_COLOR_TYPE_PALETTE) {",
          "776:         if (length > 256 || !(s->state & PNG_PLTE))",
          "777:             return AVERROR_INVALIDDATA;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:     if (!(s->state & PNG_IHDR)) {",
          "776:         av_log(avctx, AV_LOG_ERROR, \"trns before IHDR\\n\");",
          "777:         return AVERROR_INVALIDDATA;",
          "778:     }",
          "780:     if (s->state & PNG_IDAT) {",
          "781:         av_log(avctx, AV_LOG_ERROR, \"trns after IDAT\\n\");",
          "782:         return AVERROR_INVALIDDATA;",
          "783:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "782:         }",
          "783:     } else if (s->color_type == PNG_COLOR_TYPE_GRAY || s->color_type == PNG_COLOR_TYPE_RGB) {",
          "784:         if ((s->color_type == PNG_COLOR_TYPE_GRAY && length != 2) ||",
          "786:             return AVERROR_INVALIDDATA;",
          "788:         for (i = 0; i < length / 2; i++) {",
          "",
          "[Removed Lines]",
          "785:             (s->color_type == PNG_COLOR_TYPE_RGB && length != 6))",
          "",
          "[Added Lines]",
          "795:             (s->color_type == PNG_COLOR_TYPE_RGB && length != 6) ||",
          "796:             s->bit_depth == 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1241:         size_t raw_bpp = s->bpp - byte_depth;",
          "1242:         unsigned x, y;",
          "1244:         for (y = 0; y < s->height; ++y) {",
          "1245:             uint8_t *row = &s->image_buf[s->image_linesize * y];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1255:         av_assert0(s->bit_depth > 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9a96bac2804583b9eeba5561d331817609784b0",
      "candidate_info": {
        "commit_hash": "f9a96bac2804583b9eeba5561d331817609784b0",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/f9a96bac2804583b9eeba5561d331817609784b0",
        "files": [
          "libavcodec/pngdec.c"
        ],
        "message": "avcodec/pngdec: Check trns more completely\n\nFixes out of array access\nFixes: 546/clusterfuzz-testcase-4809433909559296\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/targets/ffmpeg\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit e477f09d0b3619f3d29173b2cd593e17e2d1978e)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/pngdec.c||libavcodec/pngdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ],
          "candidate": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/pngdec.c||libavcodec/pngdec.c": [
          "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "772: {",
          "773:     int v, i;",
          "775:     if (s->color_type == PNG_COLOR_TYPE_PALETTE) {",
          "776:         if (length > 256 || !(s->state & PNG_PLTE))",
          "777:             return AVERROR_INVALIDDATA;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:     if (!(s->state & PNG_IHDR)) {",
          "776:         av_log(avctx, AV_LOG_ERROR, \"trns before IHDR\\n\");",
          "777:         return AVERROR_INVALIDDATA;",
          "778:     }",
          "780:     if (s->state & PNG_IDAT) {",
          "781:         av_log(avctx, AV_LOG_ERROR, \"trns after IDAT\\n\");",
          "782:         return AVERROR_INVALIDDATA;",
          "783:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "782:         }",
          "783:     } else if (s->color_type == PNG_COLOR_TYPE_GRAY || s->color_type == PNG_COLOR_TYPE_RGB) {",
          "784:         if ((s->color_type == PNG_COLOR_TYPE_GRAY && length != 2) ||",
          "786:             return AVERROR_INVALIDDATA;",
          "788:         for (i = 0; i < length / 2; i++) {",
          "",
          "[Removed Lines]",
          "785:             (s->color_type == PNG_COLOR_TYPE_RGB && length != 6))",
          "",
          "[Added Lines]",
          "795:             (s->color_type == PNG_COLOR_TYPE_RGB && length != 6) ||",
          "796:             s->bit_depth == 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1241:         size_t raw_bpp = s->bpp - byte_depth;",
          "1242:         unsigned x, y;",
          "1244:         for (y = 0; y < s->height; ++y) {",
          "1245:             uint8_t *row = &s->image_buf[s->image_linesize * y];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1255:         av_assert0(s->bit_depth > 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3aa8440bafe3f793df116c035d6cd1ba4c404423",
      "candidate_info": {
        "commit_hash": "3aa8440bafe3f793df116c035d6cd1ba4c404423",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/3aa8440bafe3f793df116c035d6cd1ba4c404423",
        "files": [
          "libavcodec/pngdec.c"
        ],
        "message": "avcodec/pngdec: Check trns more completely\n\nFixes out of array access\nFixes: 546/clusterfuzz-testcase-4809433909559296\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/targets/ffmpeg\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit e477f09d0b3619f3d29173b2cd593e17e2d1978e)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/pngdec.c||libavcodec/pngdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ],
          "candidate": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/pngdec.c||libavcodec/pngdec.c": [
          "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "770: {",
          "771:     int v, i;",
          "773:     if (s->color_type == PNG_COLOR_TYPE_PALETTE) {",
          "774:         if (length > 256 || !(s->state & PNG_PLTE))",
          "775:             return AVERROR_INVALIDDATA;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "773:     if (!(s->state & PNG_IHDR)) {",
          "774:         av_log(avctx, AV_LOG_ERROR, \"trns before IHDR\\n\");",
          "775:         return AVERROR_INVALIDDATA;",
          "776:     }",
          "778:     if (s->state & PNG_IDAT) {",
          "779:         av_log(avctx, AV_LOG_ERROR, \"trns after IDAT\\n\");",
          "780:         return AVERROR_INVALIDDATA;",
          "781:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "780:         }",
          "781:     } else if (s->color_type == PNG_COLOR_TYPE_GRAY || s->color_type == PNG_COLOR_TYPE_RGB) {",
          "782:         if ((s->color_type == PNG_COLOR_TYPE_GRAY && length != 2) ||",
          "784:             return AVERROR_INVALIDDATA;",
          "786:         for (i = 0; i < length / 2; i++) {",
          "",
          "[Removed Lines]",
          "783:             (s->color_type == PNG_COLOR_TYPE_RGB && length != 6))",
          "",
          "[Added Lines]",
          "793:             (s->color_type == PNG_COLOR_TYPE_RGB && length != 6) ||",
          "794:             s->bit_depth == 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1194:         size_t raw_bpp = s->bpp - byte_depth;",
          "1195:         unsigned x, y;",
          "1197:         for (y = 0; y < s->height; ++y) {",
          "1198:             uint8_t *row = &s->image_buf[s->image_linesize * y];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1208:         av_assert0(s->bit_depth > 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "478f1c3d5e5463a284ea7efecfc62d47ba3be11a",
      "candidate_info": {
        "commit_hash": "478f1c3d5e5463a284ea7efecfc62d47ba3be11a",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/478f1c3d5e5463a284ea7efecfc62d47ba3be11a",
        "files": [
          "libavcodec/png.h",
          "libavcodec/pngdec.c"
        ],
        "message": "png: split header state and data state in two separate variables.\n\nFixes a reported (but false) race condition in tsan for fate-apng:\n\nWARNING: ThreadSanitizer: data race (pid=6274)\n  Read of size 4 at 0x7d680001ec78 by main thread (mutexes: write M1338):\n    #0 update_thread_context src/libavcodec/pngdec.c:1456 (ffmpeg+0x000000dacf0c)\n[..]\n  Previous write of size 4 at 0x7d680001ec78 by thread T1 (mutexes: write M1335):\n    #0 decode_idat_chunk src/libavcodec/pngdec.c:737 (ffmpeg+0x000000dae951)",
        "before_after_code_files": [
          "libavcodec/png.h||libavcodec/png.h",
          "libavcodec/pngdec.c||libavcodec/pngdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ],
          "candidate": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/png.h||libavcodec/png.h": [
          "File: libavcodec/png.h -> libavcodec/png.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #define PNG_FILTER_VALUE_PAETH 4",
          "43: #define PNG_FILTER_VALUE_MIXED 5",
          "50: #define NB_PASSES 7",
          "52: #define PNGSIG 0x89504e470d0a1a0a",
          "",
          "[Removed Lines]",
          "45: #define PNG_IHDR      0x0001",
          "46: #define PNG_IDAT      0x0002",
          "47: #define PNG_ALLIMAGE  0x0004",
          "48: #define PNG_PLTE      0x0008",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libavcodec/pngdec.c||libavcodec/pngdec.c": [
          "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <zlib.h>",
          "39: typedef struct PNGDecContext {",
          "40:     PNGDSPContext dsp;",
          "41:     AVCodecContext *avctx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: enum PNGHeaderState {",
          "40:     PNG_IHDR = 1 << 0,",
          "41:     PNG_PLTE = 1 << 1,",
          "42: };",
          "44: enum PNGImageState {",
          "45:     PNG_IDAT     = 1 << 0,",
          "46:     PNG_ALLIMAGE = 1 << 1,",
          "47: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     ThreadFrame last_picture;",
          "46:     ThreadFrame picture;",
          "49:     int width, height;",
          "50:     int cur_w, cur_h;",
          "51:     int last_w, last_h;",
          "",
          "[Removed Lines]",
          "48:     int state;",
          "",
          "[Added Lines]",
          "58:     enum PNGHeaderState hdr_state;",
          "59:     enum PNGImageState pic_state;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "334:         }",
          "335:         s->y++;",
          "336:         if (s->y == s->cur_h) {",
          "338:             if (s->filter_type == PNG_FILTER_TYPE_LOCO) {",
          "339:                 if (s->bit_depth == 16) {",
          "340:                     deloco_rgb16((uint16_t *)ptr, s->row_size / 2,",
          "",
          "[Removed Lines]",
          "337:             s->state |= PNG_ALLIMAGE;",
          "",
          "[Added Lines]",
          "348:             s->pic_state |= PNG_ALLIMAGE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "369:                 memset(s->last_row, 0, s->row_size);",
          "370:                 for (;;) {",
          "371:                     if (s->pass == NB_PASSES - 1) {",
          "373:                         goto the_end;",
          "374:                     } else {",
          "375:                         s->pass++;",
          "",
          "[Removed Lines]",
          "372:                         s->state |= PNG_ALLIMAGE;",
          "",
          "[Added Lines]",
          "383:                         s->pic_state |= PNG_ALLIMAGE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "404:             return AVERROR_EXTERNAL;",
          "405:         }",
          "406:         if (s->zstream.avail_out == 0) {",
          "408:                 png_handle_row(s);",
          "409:             }",
          "410:             s->zstream.avail_out = s->crow_size;",
          "",
          "[Removed Lines]",
          "407:             if (!(s->state & PNG_ALLIMAGE)) {",
          "",
          "[Added Lines]",
          "418:             if (!(s->pic_state & PNG_ALLIMAGE)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "541:     if (length != 13)",
          "542:         return AVERROR_INVALIDDATA;",
          "545:         av_log(avctx, AV_LOG_ERROR, \"IHDR after IDAT\\n\");",
          "546:         return AVERROR_INVALIDDATA;",
          "547:     }",
          "550:         av_log(avctx, AV_LOG_ERROR, \"Multiple IHDR\\n\");",
          "551:         return AVERROR_INVALIDDATA;",
          "552:     }",
          "",
          "[Removed Lines]",
          "544:     if (s->state & PNG_IDAT) {",
          "549:     if (s->state & PNG_IHDR) {",
          "",
          "[Added Lines]",
          "555:     if (s->pic_state & PNG_IDAT) {",
          "560:     if (s->hdr_state & PNG_IHDR) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "569:     s->filter_type      = bytestream2_get_byte(&s->gb);",
          "570:     s->interlace_type   = bytestream2_get_byte(&s->gb);",
          "573:     if (avctx->debug & FF_DEBUG_PICT_INFO)",
          "574:         av_log(avctx, AV_LOG_DEBUG, \"width=%d height=%d depth=%d color_type=%d \"",
          "575:                 \"compression_type=%d filter_type=%d interlace_type=%d\\n\",",
          "",
          "[Removed Lines]",
          "572:     s->state |= PNG_IHDR;",
          "",
          "[Added Lines]",
          "583:     s->hdr_state |= PNG_IHDR;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "586: static int decode_phys_chunk(AVCodecContext *avctx, PNGDecContext *s)",
          "587: {",
          "589:         av_log(avctx, AV_LOG_ERROR, \"pHYs after IDAT\\n\");",
          "590:         return AVERROR_INVALIDDATA;",
          "591:     }",
          "",
          "[Removed Lines]",
          "588:     if (s->state & PNG_IDAT) {",
          "",
          "[Added Lines]",
          "599:     if (s->pic_state & PNG_IDAT) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "605:     int ret;",
          "606:     size_t byte_depth = s->bit_depth > 8 ? 2 : 1;",
          "609:         av_log(avctx, AV_LOG_ERROR, \"IDAT without IHDR\\n\");",
          "610:         return AVERROR_INVALIDDATA;",
          "611:     }",
          "614:         avctx->width  = s->width;",
          "615:         avctx->height = s->height;",
          "",
          "[Removed Lines]",
          "608:     if (!(s->state & PNG_IHDR)) {",
          "612:     if (!(s->state & PNG_IDAT)) {",
          "",
          "[Added Lines]",
          "619:     if (!(s->hdr_state & PNG_IHDR)) {",
          "623:     if (!(s->pic_state & PNG_IDAT)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "734:         s->zstream.next_out  = s->crow_buf;",
          "735:     }",
          "740:     if (s->has_trns && s->color_type != PNG_COLOR_TYPE_PALETTE)",
          "",
          "[Removed Lines]",
          "737:     s->state |= PNG_IDAT;",
          "",
          "[Added Lines]",
          "748:     s->pic_state |= PNG_IDAT;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "770:     }",
          "771:     for (; i < 256; i++)",
          "772:         s->palette[i] = (0xFFU << 24);",
          "776:     return 0;",
          "",
          "[Removed Lines]",
          "773:     s->state |= PNG_PLTE;",
          "",
          "[Added Lines]",
          "784:     s->hdr_state |= PNG_PLTE;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "781: {",
          "782:     int v, i;",
          "785:         av_log(avctx, AV_LOG_ERROR, \"trns before IHDR\\n\");",
          "786:         return AVERROR_INVALIDDATA;",
          "787:     }",
          "790:         av_log(avctx, AV_LOG_ERROR, \"trns after IDAT\\n\");",
          "791:         return AVERROR_INVALIDDATA;",
          "792:     }",
          "794:     if (s->color_type == PNG_COLOR_TYPE_PALETTE) {",
          "796:             return AVERROR_INVALIDDATA;",
          "798:         for (i = 0; i < length; i++) {",
          "",
          "[Removed Lines]",
          "784:     if (!(s->state & PNG_IHDR)) {",
          "789:     if (s->state & PNG_IDAT) {",
          "795:         if (length > 256 || !(s->state & PNG_PLTE))",
          "",
          "[Added Lines]",
          "795:     if (!(s->hdr_state & PNG_IHDR)) {",
          "800:     if (s->pic_state & PNG_IDAT) {",
          "806:         if (length > 256 || !(s->hdr_state & PNG_PLTE))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "906:     if (length != 26)",
          "907:         return AVERROR_INVALIDDATA;",
          "910:         av_log(avctx, AV_LOG_ERROR, \"fctl before IHDR\\n\");",
          "911:         return AVERROR_INVALIDDATA;",
          "912:     }",
          "",
          "[Removed Lines]",
          "909:     if (!(s->state & PNG_IHDR)) {",
          "",
          "[Added Lines]",
          "920:     if (!(s->hdr_state & PNG_IHDR)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1122:             }",
          "1124:             if (CONFIG_APNG_DECODER && avctx->codec_id == AV_CODEC_ID_APNG && length == 0) {",
          "1126:                     return 0;",
          "1127:                 else",
          "1128:                     goto exit_loop;",
          "1129:             }",
          "1130:             av_log(avctx, AV_LOG_ERROR, \"%d bytes left\\n\", length);",
          "1132:                 && avctx->strict_std_compliance <= FF_COMPLIANCE_NORMAL)",
          "1133:                 goto exit_loop;",
          "1134:             ret = AVERROR_INVALIDDATA;",
          "",
          "[Removed Lines]",
          "1125:                 if (!(s->state & PNG_IDAT))",
          "1131:             if (   s->state & PNG_ALLIMAGE",
          "",
          "[Added Lines]",
          "1136:                 if (!(s->pic_state & PNG_IDAT))",
          "1142:             if (   s->pic_state & PNG_ALLIMAGE",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1228:             break;",
          "1229:         }",
          "1230:         case MKTAG('I', 'E', 'N', 'D'):",
          "1232:                 av_log(avctx, AV_LOG_ERROR, \"IEND without all image\\n\");",
          "1234:                 ret = AVERROR_INVALIDDATA;",
          "1235:                 goto fail;",
          "1236:             }",
          "",
          "[Removed Lines]",
          "1231:             if (!(s->state & PNG_ALLIMAGE))",
          "1233:             if (!(s->state & (PNG_ALLIMAGE|PNG_IDAT))) {",
          "",
          "[Added Lines]",
          "1242:             if (!(s->pic_state & PNG_ALLIMAGE))",
          "1244:             if (!(s->pic_state & (PNG_ALLIMAGE|PNG_IDAT))) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1330:         return AVERROR_INVALIDDATA;",
          "1331:     }",
          "1336:     s->zstream.zalloc = ff_png_zalloc;",
          "",
          "[Removed Lines]",
          "1333:     s->y = s->state = s->has_trns = 0;",
          "",
          "[Added Lines]",
          "1344:     s->y = s->has_trns = 0;",
          "1345:     s->hdr_state = 0;",
          "1346:     s->pic_state = 0;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1377:     FFSWAP(ThreadFrame, s->picture, s->last_picture);",
          "1378:     p = s->picture.f;",
          "1381:         if (!avctx->extradata_size)",
          "1382:             return AVERROR_INVALIDDATA;",
          "",
          "[Removed Lines]",
          "1380:     if (!(s->state & PNG_IHDR)) {",
          "",
          "[Added Lines]",
          "1393:     if (!(s->hdr_state & PNG_IHDR)) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1397:         goto end;",
          "1398:     }",
          "1399:     s->y = 0;",
          "1401:     bytestream2_init(&s->gb, avpkt->data, avpkt->size);",
          "1402:     if ((ret = decode_frame_common(avctx, s, p, avpkt)) < 0)",
          "1403:         goto end;",
          "1406:         av_log(avctx, AV_LOG_WARNING, \"Frame did not contain a complete image\\n\");",
          "1408:         ret = AVERROR_INVALIDDATA;",
          "1409:         goto end;",
          "1410:     }",
          "",
          "[Removed Lines]",
          "1400:     s->state &= ~(PNG_IDAT | PNG_ALLIMAGE);",
          "1405:     if (!(s->state & PNG_ALLIMAGE))",
          "1407:     if (!(s->state & (PNG_ALLIMAGE|PNG_IDAT))) {",
          "",
          "[Added Lines]",
          "1413:     s->pic_state = 0;",
          "1418:     if (!(s->pic_state & PNG_ALLIMAGE))",
          "1420:     if (!(s->pic_state & (PNG_ALLIMAGE|PNG_IDAT))) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1454:         memcpy(pdst->palette, psrc->palette, sizeof(pdst->palette));",
          "1458:         ff_thread_release_buffer(dst, &pdst->last_picture);",
          "1459:         if (psrc->last_picture.f->data[0] &&",
          "",
          "[Removed Lines]",
          "1456:         pdst->state |= psrc->state & (PNG_IHDR | PNG_PLTE);",
          "",
          "[Added Lines]",
          "1469:         pdst->hdr_state |= psrc->hdr_state;",
          "",
          "---------------"
        ]
      }
    }
  ]
}