{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c0f162020ec27bd7cc93c17f3f7e0e91c72f51e4",
      "candidate_info": {
        "commit_hash": "c0f162020ec27bd7cc93c17f3f7e0e91c72f51e4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c0f162020ec27bd7cc93c17f3f7e0e91c72f51e4",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a possible memory leak when trying to UPDATE a corrupt RTREE index.\n\nFossilOrigin-Name: 63eb803dbc27077007dbee8def659d1523724eb73f1def1cdb68027e5c20843a",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:       pNode->pNext = 0;",
          "718:       rc = sqlite3_blob_read(pRtree->pNodeBlob, pNode->zData,",
          "719:                              pRtree->iNodeSize, 0);",
          "721:     }",
          "722:   }",
          "",
          "[Removed Lines]",
          "720:       nodeReference(pParent);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "749:   if( rc==SQLITE_OK ){",
          "750:     if( pNode!=0 ){",
          "751:       nodeHashInsert(pRtree, pNode);",
          "752:     }else{",
          "753:       rc = SQLITE_CORRUPT_VTAB;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750:       nodeReference(pParent);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 673a7dd698eca05bb2909fa01f962a0667361732a6d0e61cf7780ead4a07c967",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9576802dbae4501cbec42947ce01286376d2fc10",
      "candidate_info": {
        "commit_hash": "9576802dbae4501cbec42947ce01286376d2fc10",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9576802dbae4501cbec42947ce01286376d2fc10",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Remove an incorrect ALWAYS() macro.\n\nFossilOrigin-Name: f7a74f89dbd58b47bbcb58ea2af71fbe1eb5ec2dbe36d90685c39cb28ecf5250",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 53847f5c28bdecfbc7b08685d4dcd0565526f6191491b4827c3c966a4b8d4a85",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:         Expr *pNext  = p->pRight;",
          "192:         assert( p->x.pList==0 || p->pRight==0 );",
          "196:         if( p->x.pList!=0",
          "197:          && !db->mallocFailed",
          "198:          && ALWAYS(!ExprHasProperty(p, EP_xIsSelect))",
          "199:         ){",
          "200:           int i;",
          "202:             if( ExprHasProperty(p->x.pList->a[i].pExpr, EP_Collate) ){",
          "203:               pNext = p->x.pList->a[i].pExpr;",
          "204:               break;",
          "",
          "[Removed Lines]",
          "201:           for(i=0; ALWAYS(i<p->x.pList->nExpr); i++){",
          "",
          "[Added Lines]",
          "198:           for(i=0; i<p->x.pList->nExpr; i++){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea7e83b7806773bf6a2c60786ff8f95b218d4622",
      "candidate_info": {
        "commit_hash": "ea7e83b7806773bf6a2c60786ff8f95b218d4622",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ea7e83b7806773bf6a2c60786ff8f95b218d4622",
        "files": [
          "manifest",
          "manifest.uuid"
        ],
        "message": "Version 3.29.0\n\nFossilOrigin-Name: fc82b73eaac8b36950e527f12c4b5dc1e147e6f4ad2217ae43ad82882a88bfa6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6f328c35947d6b3a0741514757b8944692203e89bdb2e7f9bbce8ad9288be344",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3967d946c7a1fe956e963b0a2e67a8353404a454",
      "candidate_info": {
        "commit_hash": "3967d946c7a1fe956e963b0a2e67a8353404a454",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3967d946c7a1fe956e963b0a2e67a8353404a454",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/indexexpr2.test"
        ],
        "message": "Fix the query planner so that it is able to use an index on a CAST expression.\n\nFossilOrigin-Name: 2c886f3d49c9569e9f6ee28b89b57e2d4004c8972d11da0c23f7b2d2e0c9900a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9faf9033910927c74553e66c474d84ed3386f263cef3eec299e25d8306f410d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   return 0;",
          "311: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319: static SQLITE_NOINLINE WhereTerm *whereScanInitIndexExpr(WhereScan *pScan){",
          "320:   pScan->idxaff = sqlite3ExprAffinity(pScan->pIdxExpr);",
          "321:   return whereScanNext(pScan);",
          "322: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:   pScan->pIdxExpr = 0;",
          "343:   pScan->idxaff = 0;",
          "344:   pScan->zCollName = 0;",
          "345:   if( pIdx ){",
          "346:     int j = iColumn;",
          "347:     iColumn = pIdx->aiColumn[j];",
          "348:     if( iColumn==XN_EXPR ){",
          "349:       pScan->pIdxExpr = pIdx->aColExpr->a[j].pExpr;",
          "350:       pScan->zCollName = pIdx->azColl[j];",
          "351:     }else if( iColumn==pIdx->pTable->iPKey ){",
          "352:       iColumn = XN_ROWID;",
          "353:     }else if( iColumn>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:   pScan->opMask = opMask;",
          "357:   pScan->k = 0;",
          "358:   pScan->aiCur[0] = iCur;",
          "359:   pScan->nEquiv = 1;",
          "360:   pScan->iEquiv = 1;",
          "367:       pScan->aiColumn[0] = XN_EXPR;",
          "368:       return whereScanInitIndexExpr(pScan);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "357:   }else if( iColumn==XN_EXPR ){",
          "358:     return 0;",
          "359:   }",
          "363:   pScan->aiColumn[0] = iColumn;",
          "366:   return whereScanNext(pScan);",
          "367: }",
          "",
          "[Removed Lines]",
          "360:   pScan->opMask = opMask;",
          "361:   pScan->k = 0;",
          "362:   pScan->aiCur[0] = iCur;",
          "364:   pScan->nEquiv = 1;",
          "365:   pScan->iEquiv = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "250: } {2 4 3 9}",
          "254: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: #-------------------------------------------------------------------------",
          "253: do_execsql_test 6.0 {",
          "254:   CREATE TABLE x1(a INTEGER PRIMARY KEY, b);",
          "255:   INSERT INTO x1 VALUES",
          "256:       (1, 123), (2, '123'), (3, '123abc'), (4, 123.0), (5, 1234);",
          "257: }",
          "259: do_execsql_test 6.1.1 {",
          "260:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "261: } {1 123   2 123   3 123abc  4 123.0}",
          "262: do_execsql_test 6.1.2 {",
          "263:   CREATE INDEX x1i ON x1( CAST(b AS INTEGER) );",
          "264:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "265: } {1 123   2 123   3 123abc  4 123.0}",
          "266: do_eqp_test 6.1.3 {",
          "267:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "268: } {SEARCH TABLE x1 USING INDEX x1i (<expr>=?)}",
          "270: do_execsql_test 6.2.1 {",
          "271:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "272: } {1 123   2 123}",
          "273: do_execsql_test 6.2.2 {",
          "274:   CREATE INDEX x1i2 ON x1( CAST(b AS TEXT) );",
          "275:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "276: } {1 123   2 123}",
          "277: do_eqp_test 6.2.3 {",
          "278:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "279: } {SEARCH TABLE x1 USING INDEX x1i2 (<expr>=?)}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9edd8c11ab5f04ad052413f1b1be712e45a2d650",
      "candidate_info": {
        "commit_hash": "9edd8c11ab5f04ad052413f1b1be712e45a2d650",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9edd8c11ab5f04ad052413f1b1be712e45a2d650",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/rowid.test"
        ],
        "message": "Fix VDBE opcodes OP_SeekLT and OP_SeekLE so that they work on intkey tables with non-numeric text values.\n\nFossilOrigin-Name: a870c196d78d8b72c7353fa0015e96b2abd4be154541d76328e3a4f9e5da5d04",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/rowid.test||test/rowid.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ad8fc5d8b440c49df95328df0408be699dde5a1dbd195b3f1f32e5f765578032",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4013:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4014:       if( (pIn3->flags & MEM_Real)==0 ){",
          "",
          "[Removed Lines]",
          "4017:         VdbeBranchTaken(1,2); goto jump_to_p2;",
          "4018:         break;",
          "4019:       }",
          "",
          "[Added Lines]",
          "4015:         if( (pIn3->flags & MEM_Null) || oc>=OP_SeekGE ){",
          "4016:           VdbeBranchTaken(1,2); goto jump_to_p2;",
          "4017:           break;",
          "4018:         }else{",
          "4019:           sqlite3BtreeLast(pC->uc.pCursor, &res);",
          "4020:           goto seek_not_found;",
          "4021:         }",
          "4022:       }else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4040:         assert( (OP_SeekLT & 0x0001)==(OP_SeekGE & 0x0001) );",
          "4041:         if( (oc & 0x0001)==(OP_SeekLT & 0x0001) ) oc++;",
          "4042:       }",
          "4044:     rc = sqlite3BtreeMovetoUnpacked(pC->uc.pCursor, 0, (u64)iKey, 0, &res);",
          "4046:     if( rc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "4043:     }",
          "",
          "[Added Lines]",
          "4046:     }",
          "",
          "---------------"
        ],
        "test/rowid.test||test/rowid.test": [
          "File: test/rowid.test -> test/rowid.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc'}",
          "660: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "662: # Test the automatic generation of rowids when the table already contains",
          "663: # a rowid with the maximum value.",
          "664: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662: do_test rowid-11.asc.1 {",
          "663:   execsql {SELECT rowid, a FROM t5 WHERE rowid>'abc' ORDER BY 1 ASC}",
          "664: } {}",
          "665: do_test rowid-11.asc.2 {",
          "666:   execsql {SELECT rowid, a FROM t5 WHERE rowid>='abc' ORDER BY 1 ASC}",
          "667: } {}",
          "668: do_test rowid-11.asc.3 {",
          "669:   execsql {SELECT rowid, a FROM t5 WHERE rowid<'abc' ORDER BY 1 ASC}",
          "670: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "671: do_test rowid-11.asc.4 {",
          "672:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc' ORDER BY 1 ASC}",
          "673: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "675: do_test rowid-11.desc.1 {",
          "676:   execsql {SELECT rowid, a FROM t5 WHERE rowid>'abc' ORDER BY 1 DESC}",
          "677: } {}",
          "678: do_test rowid-11.desc.2 {",
          "679:   execsql {SELECT rowid, a FROM t5 WHERE rowid>='abc' ORDER BY 1 DESC}",
          "680: } {}",
          "681: do_test rowid-11.desc.3 {",
          "682:   execsql {SELECT rowid, a FROM t5 WHERE rowid<'abc' ORDER BY 1 DESC}",
          "683: } {8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1}",
          "684: do_test rowid-11.desc.4 {",
          "685:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc' ORDER BY 1 DESC}",
          "686: } {8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "719:   SELECT last_insert_rowid();",
          "720: } {1234 5 2234 | 2234 4990756 3234 | 3234 10458756 4234 | 4234}",
          "722: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748: #-------------------------------------------------------------------------",
          "749: do_execsql_test rowid-14.0 {",
          "750:   CREATE TABLE t14(x INTEGER PRIMARY KEY);",
          "751:   INSERT INTO t14(x) VALUES (100);",
          "752: }",
          "753: do_execsql_test rowid-14.1 {",
          "754:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid ASC;",
          "755: } {100}",
          "756: do_execsql_test rowid-14.2 {",
          "757:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid DESC;",
          "758: } {100}",
          "760: do_execsql_test rowid-14.3 {",
          "761:   DELETE FROM t14;",
          "762:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid ASC;",
          "763: } {}",
          "764: do_execsql_test rowid-14.4 {",
          "765:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid DESC;",
          "766: } {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}