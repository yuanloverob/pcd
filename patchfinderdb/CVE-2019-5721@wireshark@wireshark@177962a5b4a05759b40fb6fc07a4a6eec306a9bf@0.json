{
  "cve_id": "CVE-2019-5721",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.11, the ENIP dissector could crash. This was addressed in epan/dissectors/packet-enip.c by changing the memory-management approach so that a use-after-free is avoided.",
  "repo": "wireshark/wireshark",
  "patch_hash": "177962a5b4a05759b40fb6fc07a4a6eec306a9bf",
  "patch_info": {
    "commit_hash": "177962a5b4a05759b40fb6fc07a4a6eec306a9bf",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/177962a5b4a05759b40fb6fc07a4a6eec306a9bf",
    "files": [
      "epan/dissectors/packet-enip.c"
    ],
    "message": "enip: use wmem for copied addresses\n\nWhen we copy an address from pinfo into connInfo->O2T.ipaddress, a\nshallow copy is not sufficient. connInfo->O2T.ipaddress is kept across\npackets whereas pinfo is valid only for the current packet.\n\nUse wmem with file scope for the copied address. This fixes a\nuse-after-free error when we access the address in a subsequent packet.\n\nBug: 14470\nChange-Id: I8b74037020189485485a506af6510cb45828e3c4\nReviewed-on: https://code.wireshark.org/review/26248\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\nPetri-Dish: Martin Kaiser <wireshark@kaiser.cx>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-enip.c||epan/dissectors/packet-enip.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-enip.c||epan/dissectors/packet-enip.c": [
      "File: epan/dissectors/packet-enip.c -> epan/dissectors/packet-enip.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1091:              ((connInfo->O2T.ipaddress.type == AT_IPv4) && ((*(const guint32*)connInfo->O2T.ipaddress.data)) == 0) ||",
      "1092:              ((connInfo->O2T.ipaddress.type == AT_IPv6) && (memcmp(connInfo->O2T.ipaddress.data, &ipv6_zero, sizeof(ipv6_zero)) == 0)) ||",
      "1093:              (connInfo->O2T.type != CONN_TYPE_MULTICAST))",
      "1095:          if ((connInfo->T2O.port == 0) || (connInfo->T2O.type == CONN_TYPE_MULTICAST))",
      "1096:             connInfo->T2O.port = ENIP_IO_PORT;",
      "1097:          if ((connInfo->T2O.ipaddress.type == AT_NONE) ||",
      "1098:              ((connInfo->T2O.ipaddress.type == AT_IPv4) && ((*(const guint32*)connInfo->T2O.ipaddress.data)) == 0) ||",
      "1099:              ((connInfo->T2O.ipaddress.type == AT_IPv6) && (memcmp(connInfo->T2O.ipaddress.data, &ipv6_zero, sizeof(ipv6_zero)) == 0)) ||",
      "1100:              (connInfo->T2O.type != CONN_TYPE_MULTICAST))",
      "1103:          if (connInfo->O2T.ipaddress.type == AT_IPv6)",
      "1104:          {",
      "",
      "[Removed Lines]",
      "1094:             copy_address_shallow(&connInfo->O2T.ipaddress, &pinfo->src);",
      "1101:             copy_address_shallow(&connInfo->T2O.ipaddress, &pinfo->dst);",
      "",
      "[Added Lines]",
      "1094:             copy_address_wmem(wmem_file_scope(), &connInfo->O2T.ipaddress, &pinfo->src);",
      "1101:             copy_address_wmem(wmem_file_scope(), &connInfo->T2O.ipaddress, &pinfo->dst);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1c66174ec7aa19e2ddc79178cf59f15a654fc4fe",
      "candidate_info": {
        "commit_hash": "1c66174ec7aa19e2ddc79178cf59f15a654fc4fe",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/1c66174ec7aa19e2ddc79178cf59f15a654fc4fe",
        "files": [
          "epan/dissectors/packet-enip.c"
        ],
        "message": "enip: use wmem for copied addresses\n\nWhen we copy an address from pinfo into connInfo->O2T.ipaddress, a\nshallow copy is not sufficient. connInfo->O2T.ipaddress is kept across\npackets whereas pinfo is valid only for the current packet.\n\nUse wmem with file scope for the copied address. This fixes a\nuse-after-free error when we access the address in a subsequent packet.\n\nBug: 14470\nChange-Id: I8b74037020189485485a506af6510cb45828e3c4\nReviewed-on: https://code.wireshark.org/review/26248\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\nPetri-Dish: Martin Kaiser <wireshark@kaiser.cx>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 177962a5b4a05759b40fb6fc07a4a6eec306a9bf)\nReviewed-on: https://code.wireshark.org/review/30941\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-enip.c||epan/dissectors/packet-enip.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-enip.c||epan/dissectors/packet-enip.c"
          ],
          "candidate": [
            "epan/dissectors/packet-enip.c||epan/dissectors/packet-enip.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-enip.c||epan/dissectors/packet-enip.c": [
          "File: epan/dissectors/packet-enip.c -> epan/dissectors/packet-enip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1085:              ((connInfo->O2T.ipaddress.type == AT_IPv4) && ((*(const guint32*)connInfo->O2T.ipaddress.data)) == 0) ||",
          "1086:              ((connInfo->O2T.ipaddress.type == AT_IPv6) && (memcmp(connInfo->O2T.ipaddress.data, &ipv6_zero, sizeof(ipv6_zero)) == 0)) ||",
          "1087:              (connInfo->O2T.type != CONN_TYPE_MULTICAST))",
          "1089:          if ((connInfo->T2O.port == 0) || (connInfo->T2O.type == CONN_TYPE_MULTICAST))",
          "1090:             connInfo->T2O.port = ENIP_IO_PORT;",
          "1091:          if ((connInfo->T2O.ipaddress.type == AT_NONE) ||",
          "1092:              ((connInfo->T2O.ipaddress.type == AT_IPv4) && ((*(const guint32*)connInfo->T2O.ipaddress.data)) == 0) ||",
          "1093:              ((connInfo->T2O.ipaddress.type == AT_IPv6) && (memcmp(connInfo->T2O.ipaddress.data, &ipv6_zero, sizeof(ipv6_zero)) == 0)) ||",
          "1094:              (connInfo->T2O.type != CONN_TYPE_MULTICAST))",
          "1097:          if (connInfo->O2T.ipaddress.type == AT_IPv6)",
          "1098:          {",
          "",
          "[Removed Lines]",
          "1088:             copy_address_shallow(&connInfo->O2T.ipaddress, &pinfo->src);",
          "1095:             copy_address_shallow(&connInfo->T2O.ipaddress, &pinfo->dst);",
          "",
          "[Added Lines]",
          "1088:             copy_address_wmem(wmem_file_scope(), &connInfo->O2T.ipaddress, &pinfo->src);",
          "1095:             copy_address_wmem(wmem_file_scope(), &connInfo->T2O.ipaddress, &pinfo->dst);",
          "",
          "---------------"
        ]
      }
    }
  ]
}