{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9a998d5e244dc58a1f7650e574371e0d4c75fcc1",
      "candidate_info": {
        "commit_hash": "9a998d5e244dc58a1f7650e574371e0d4c75fcc1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9a998d5e244dc58a1f7650e574371e0d4c75fcc1",
        "files": [
          "lib/http.js"
        ],
        "message": "http: don't lowercase http req header until later\n\nDon't lowercase the request header until we're in the _addHeaderLine method,\nmakes it easier to intercept the raw request headers.",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:   for (var i = 0; i < n; i += 2) {",
          "88:     var k = headers[i];",
          "89:     var v = headers[i + 1];",
          "91:   }",
          "",
          "[Removed Lines]",
          "90:     parser.incoming._addHeaderLine(k.toLowerCase(), v);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:     for (var i = 0, n = headers.length; i < n; i += 2) {",
          "135:       var k = headers[i];",
          "136:       var v = headers[i + 1];",
          "138:     }",
          "139:     parser._headers = [];",
          "140:     parser._url = '';",
          "",
          "[Removed Lines]",
          "137:       parser.incoming._addHeaderLine(k.toLowerCase(), v);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "380: IncomingMessage.prototype._addHeaderLine = function(field, value) {",
          "381:   var dest = this.complete ? this.trailers : this.headers;",
          "383:   switch (field) {",
          "385:     case 'set-cookie':",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "032fc42e64fdb5ab0b5182ea39a0487b40638c82",
      "candidate_info": {
        "commit_hash": "032fc42e64fdb5ab0b5182ea39a0487b40638c82",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/032fc42e64fdb5ab0b5182ea39a0487b40638c82",
        "files": [
          "lib/readline.js"
        ],
        "message": "readline: don't cache the \"keypress\" listeners\n\nit's not safe to since `removeAllListeners()` will detach the returned\nArray from the stream instance if that's ever called by the user.",
        "before_after_code_files": [
          "lib/readline.js||lireadline.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/readline.js||lireadline.js": [
          "File: lib/readline.js -> lireadline.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "786:   if (stream._emitKeypress) return;",
          "787:   stream._emitKeypress = true;",
          "791:   function onData(b) {",
          "793:       emitKey(stream, b);",
          "794:     } else {",
          "",
          "[Removed Lines]",
          "789:   var keypressListeners = stream.listeners('keypress');",
          "792:     if (keypressListeners.length) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "805:     }",
          "806:   }",
          "809:     stream.on('data', onData);",
          "810:   } else {",
          "811:     stream.on('newListener', onNewListener);",
          "",
          "[Removed Lines]",
          "808:   if (keypressListeners.length) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14a5b45c06c327c838d93130cdfeec03e8fad1fb",
      "candidate_info": {
        "commit_hash": "14a5b45c06c327c838d93130cdfeec03e8fad1fb",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/14a5b45c06c327c838d93130cdfeec03e8fad1fb",
        "files": [
          "lib/http.js"
        ],
        "message": "Guard against emitting 'end' twice on http responses",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:   if (!parser.incoming.upgrade) {",
          "127:     parser.incoming.readable = false;",
          "129:   }",
          "131:   if (parser.socket.readable) {",
          "",
          "[Removed Lines]",
          "128:     parser.incoming.emit('end');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1158:   if (req.res && req.res.readable) {",
          "1160:     req.res.emit('aborted');",
          "1162:     req.res.emit('close');",
          "1163:   } else if (!req.res && !req._hadError) {",
          "",
          "[Removed Lines]",
          "1161:     req.res.emit('end');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48c3d2004180dda8d0d32386299dd918a0804389",
      "candidate_info": {
        "commit_hash": "48c3d2004180dda8d0d32386299dd918a0804389",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/48c3d2004180dda8d0d32386299dd918a0804389",
        "files": [
          "src/ev-emul.h",
          "src/node.cc",
          "src/node_internals.h",
          "src/node_io_watcher.cc"
        ],
        "message": "Apply --no-deprecation to C++ warnings as well",
        "before_after_code_files": [
          "src/ev-emul.h||src/ev-emul.h",
          "src/node.cc||src/node.cc",
          "src/node_internals.h||src/node_internals.h",
          "src/node_io_watcher.cc||src/node_io_watcher.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/ev-emul.h||src/ev-emul.h": [
          "File: src/ev-emul.h -> src/ev-emul.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: #define __uv_warn_of(old_, new_)                                              \\",
          "90:   do {                                                                        \\",
          "92:     __uv_warn_##old_ = 1;                                                     \\",
          "93:     fputs(\"WARNING: \" #old_ \" is deprecated, use \" #new_ \"\\n\", stderr);       \\",
          "94:   }                                                                           \\",
          "",
          "[Removed Lines]",
          "91:     if (__uv_warn_##old_) break;                                              \\",
          "",
          "[Added Lines]",
          "91:     if (__uv_warn_##old_ || no_deprecation) break;                            \\",
          "",
          "---------------"
        ],
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "121: static bool print_eval = false;",
          "122: static bool force_repl = false;",
          "124: static bool trace_deprecation = false;",
          "125: static char *eval_string = NULL;",
          "126: static int option_end_index = 0;",
          "",
          "[Removed Lines]",
          "123: static bool no_deprecation = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129: static int debug_port=5858;",
          "130: static int max_stack_size = 0;",
          "132: static uv_check_t check_tick_watcher;",
          "133: static uv_prepare_t prepare_tick_watcher;",
          "134: static uv_idle_t tick_spinner;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: bool no_deprecation = false;",
          "",
          "---------------"
        ],
        "src/node_internals.h||src/node_internals.h": [
          "File: src/node_internals.h -> src/node_internals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: namespace node {",
          "31: #ifdef _WIN32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: extern bool no_deprecation;",
          "",
          "---------------"
        ],
        "src/node_io_watcher.cc||src/node_io_watcher.cc": [
          "File: src/node_io_watcher.cc -> src/node_io_watcher.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: Handle<Value> IOWatcher::New(const Arguments& args) {",
          "85:   if (!args.IsConstructCall()) {",
          "86:     return FromConstructorTemplate(constructor_template, args);",
          "87:   }",
          "89:   HandleScope scope;",
          "90:   IOWatcher *s = new IOWatcher();",
          "91:   s->Wrap(args.This());",
          "",
          "[Removed Lines]",
          "83:   fprintf(stderr, \"WARNING: don't use IOWatcher, it'll be removed in v0.9\\n\");",
          "",
          "[Added Lines]",
          "87:   if (!no_deprecation) {",
          "88:     fprintf(stderr, \"WARNING: don't use IOWatcher, it'll be removed in v0.9\\n\");",
          "89:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef1b7dd3d76d385c027909b7cc3c3e5093f30743",
      "candidate_info": {
        "commit_hash": "ef1b7dd3d76d385c027909b7cc3c3e5093f30743",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ef1b7dd3d76d385c027909b7cc3c3e5093f30743",
        "files": [
          "tools/installer.js"
        ],
        "message": "build: Move npm shebang logic into an npm script\n\nThis allows us to run npm's scripts/relocate.sh script whenever\nnecessary, if for example node has been 'make install'ed into one\nfolder, and then you wish to move it into another one.",
        "before_after_code_files": [
          "tools/installer.js||tools/installer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/installer.js||tools/installer.js": [
          "File: tools/installer.js -> tools/installer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   });",
          "49: }",
          "66: }",
          "",
          "[Removed Lines]",
          "52: function shebang(line, file) {",
          "53:   var content = fs.readFileSync(file, 'utf8');",
          "54:   var firstLine = content.split(/\\n/, 1)[0];",
          "55:   var newContent;",
          "56:   if (firstLine.slice(0, 2) === '#!') {",
          "57:     newContent = line + content.slice(firstLine.length);",
          "58:   } else {",
          "59:     newContent = line + '\\n' + content;",
          "60:   }",
          "61:   if (content !== newContent) {",
          "62:     fs.writeFileSync(file, newContent, 'utf8');",
          "63:   }",
          "64:   var mode = parseInt('0777', 8) & (~process.umask());",
          "65:   fs.chmodSync(file, mode);",
          "",
          "[Added Lines]",
          "53: function shebang(line, npmDir) {",
          "54:   var script = JSON.stringify(path.join(npmDir, 'scripts/relocate.sh'));",
          "55:   var bin = JSON.stringify(path.join(npmDir, 'bin/npm-cli.js'));",
          "56:   queue.push('bash ' + script + ' ' + line);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:     var isSymlink = false;",
          "141:     try {",
          "143:       isSymlink = st.isSymbolicLink();",
          "146:     if (!isSymlink) {",
          "147:       copy('deps/npm', 'lib/node_modules/npm');",
          "148:       queue.push('ln -sf ../lib/node_modules/npm/bin/npm-cli.js ' +",
          "149:                  path.join(dest_dir, node_prefix, 'bin/npm'));",
          "153:     }",
          "154:   }",
          "155: } else {",
          "",
          "[Removed Lines]",
          "142:       var st = fs.lstatSync(path.resolve(node_prefix, 'lib/node_modules/npm'));",
          "144:     } catch (e) {}",
          "150:       queue.push([shebang, '#!' + path.join(node_prefix, 'bin/node'),",
          "151:                  path.join(dest_dir, node_prefix,",
          "152:                            'lib/node_modules/npm/bin/npm-cli.js')]);",
          "",
          "[Added Lines]",
          "132:     var exists = true;",
          "133:     var npmDir = path.resolve(node_prefix, 'lib/node_modules/npm');",
          "135:       var st = fs.lstatSync(npmDir);",
          "137:     } catch (e) {",
          "138:       exists = true;",
          "139:     }",
          "142:       if (exists) queue.push('rm -rf ' + npmDir);",
          "146:       shebang(path.join(node_prefix, 'bin/node'),",
          "147:               path.join(dest_dir, node_prefix, 'lib/node_modules/npm'));",
          "",
          "---------------"
        ]
      }
    }
  ]
}