{
  "cve_id": "CVE-2019-10894",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.13, 2.6.0 to 2.6.7, and 3.0.0, the GSS-API dissector could crash. This was addressed in epan/dissectors/packet-gssapi.c by ensuring that a valid dissector is called.",
  "repo": "wireshark/wireshark",
  "patch_hash": "8cdc95842687feee32856afba8e7087396082158",
  "patch_info": {
    "commit_hash": "8cdc95842687feee32856afba8e7087396082158",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/8cdc95842687feee32856afba8e7087396082158",
    "files": [
      "epan/dissectors/packet-gssapi.c"
    ],
    "message": "GSS-API: Make sure we call a valid dissector.\n\nMake our unknown dissector handle logic conistent with other parts of\nthe code.\n\nBug: 15613\nChange-Id: Id0daf9bf0be14b99ec592f4f561cc8935d5cb4a6\nReviewed-on: https://code.wireshark.org/review/32576\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Dario Lombardo <lomato@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c": [
      "File: epan/dissectors/packet-gssapi.c -> epan/dissectors/packet-gssapi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368:    } else {",
      "369:     tvbuff_t *oid_tvb_local;",
      "373:      handle = oidvalue->wrap_handle;",
      "375:      handle = oidvalue->handle;",
      "382:    }",
      "383:   }",
      "",
      "[Removed Lines]",
      "371:     oid_tvb_local = tvb_new_subset_remaining(gss_tvb, start_offset);",
      "372:     if (is_verifier)",
      "374:     else",
      "376:     len = call_dissector_with_data(handle, oid_tvb_local, pinfo, subtree, encrypt_info);",
      "377:     if (len == 0)",
      "378:      return_offset = tvb_captured_length(gss_tvb);",
      "379:     else",
      "380:      return_offset = start_offset + len;",
      "",
      "[Added Lines]",
      "371:     if (is_verifier) {",
      "373:      if (handle != NULL) {",
      "374:       oid_tvb_local = tvb_new_subset_remaining(gss_tvb, start_offset);",
      "375:       len = call_dissector_with_data(handle, oid_tvb_local, pinfo, subtree, encrypt_info);",
      "376:       if (len == 0)",
      "377:        return_offset = tvb_captured_length(gss_tvb);",
      "378:       else",
      "379:        return_offset = start_offset + len;",
      "380:      } else {",
      "381:       proto_tree_add_item(subtree, hf_gssapi_auth_verifier, gss_tvb, offset, -1, ENC_NA);",
      "382:       return_offset = tvb_captured_length(gss_tvb);",
      "383:      }",
      "384:     } else {",
      "386:      if (handle != NULL) {",
      "387:       oid_tvb_local = tvb_new_subset_remaining(gss_tvb, start_offset);",
      "388:       len = call_dissector_with_data(handle, oid_tvb_local, pinfo, subtree, encrypt_info);",
      "389:       if (len == 0)",
      "390:        return_offset = tvb_captured_length(gss_tvb);",
      "391:       else",
      "392:        return_offset = start_offset + len;",
      "393:      } else {",
      "394:       proto_tree_add_item(subtree, hf_gssapi_auth_credentials, gss_tvb, offset, -1, ENC_NA);",
      "395:       return_offset = tvb_captured_length(gss_tvb);",
      "396:      }",
      "397:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a9c0287976e08eab0729bc1bb98a26755ae5938e",
      "candidate_info": {
        "commit_hash": "a9c0287976e08eab0729bc1bb98a26755ae5938e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a9c0287976e08eab0729bc1bb98a26755ae5938e",
        "files": [
          "epan/dissectors/packet-gssapi.c"
        ],
        "message": "GSS-API: Make sure we call a valid dissector.\n\nMake our unknown dissector handle logic conistent with other parts of\nthe code.\n\nConflicts:\n\tepan/dissectors/packet-gssapi.c\n\nBug: 15613\nChange-Id: Id0daf9bf0be14b99ec592f4f561cc8935d5cb4a6\nReviewed-on: https://code.wireshark.org/review/32576\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Dario Lombardo <lomato@gmail.com>\n(cherry picked from commit 8cdc95842687feee32856afba8e7087396082158)\nReviewed-on: https://code.wireshark.org/review/32586\n(cherry picked from commit 31a27b70179286d8b64ceba6e0b8abcff368f92c)\nReviewed-on: https://code.wireshark.org/review/32587",
        "before_after_code_files": [
          "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c": [
          "File: epan/dissectors/packet-gssapi.c -> epan/dissectors/packet-gssapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:       return_offset = tvb_captured_length(gss_tvb);",
          "369:       goto done;",
          "370:     } else {",
          "384:     }",
          "385:   }",
          "",
          "[Removed Lines]",
          "371:       tvbuff_t *oid_tvb_local;",
          "373:       oid_tvb_local = tvb_new_subset_remaining(gss_tvb, start_offset);",
          "374:       if (is_verifier)",
          "375:    handle = oidvalue->wrap_handle;",
          "376:       else",
          "377:    handle = oidvalue->handle;",
          "378:       len = call_dissector_with_data(handle, oid_tvb_local, pinfo, subtree, encrypt_info);",
          "379:       if (len == 0)",
          "380:    return_offset = tvb_captured_length(gss_tvb);",
          "381:       else",
          "382:    return_offset = start_offset + len;",
          "",
          "[Added Lines]",
          "371:    tvbuff_t *oid_tvb_local;",
          "373:    if (is_verifier) {",
          "374:     handle = oidvalue->wrap_handle;",
          "375:     if (handle != NULL) {",
          "376:      oid_tvb_local = tvb_new_subset_remaining(gss_tvb, start_offset);",
          "377:      len = call_dissector_with_data(handle, oid_tvb_local, pinfo, subtree, encrypt_info);",
          "378:      if (len == 0)",
          "379:       return_offset = tvb_captured_length(gss_tvb);",
          "380:      else",
          "381:       return_offset = start_offset + len;",
          "382:     } else {",
          "383:      proto_tree_add_item(subtree, hf_gssapi_auth_verifier, gss_tvb, offset, -1, ENC_NA);",
          "384:      return_offset = tvb_captured_length(gss_tvb);",
          "385:     }",
          "386:    } else {",
          "387:     handle = oidvalue->handle;",
          "388:     if (handle != NULL) {",
          "389:      oid_tvb_local = tvb_new_subset_remaining(gss_tvb, start_offset);",
          "390:      len = call_dissector_with_data(handle, oid_tvb_local, pinfo, subtree, encrypt_info);",
          "391:      if (len == 0)",
          "392:       return_offset = tvb_captured_length(gss_tvb);",
          "393:      else",
          "394:       return_offset = start_offset + len;",
          "395:     } else {",
          "396:      proto_tree_add_item(subtree, hf_gssapi_auth_credentials, gss_tvb, offset, -1, ENC_NA);",
          "397:      return_offset = tvb_captured_length(gss_tvb);",
          "398:     }",
          "399:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea75daa28bd6bd6911fd14a8b1734004269a18b8",
      "candidate_info": {
        "commit_hash": "ea75daa28bd6bd6911fd14a8b1734004269a18b8",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/ea75daa28bd6bd6911fd14a8b1734004269a18b8",
        "files": [
          "epan/dissectors/packet-gssapi.c"
        ],
        "message": "GSS-API: Make sure we call a valid dissector.\n\nMake our unknown dissector handle logic conistent with other parts of\nthe code.\n\nConflicts:\n\tepan/dissectors/packet-gssapi.c\n\nBug: 15613\nChange-Id: Id0daf9bf0be14b99ec592f4f561cc8935d5cb4a6\nReviewed-on: https://code.wireshark.org/review/32576\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Dario Lombardo <lomato@gmail.com>\n(cherry picked from commit 8cdc95842687feee32856afba8e7087396082158)\nReviewed-on: https://code.wireshark.org/review/32586",
        "before_after_code_files": [
          "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c": [
          "File: epan/dissectors/packet-gssapi.c -> epan/dissectors/packet-gssapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:       return_offset = tvb_captured_length(gss_tvb);",
          "369:       goto done;",
          "370:     } else {",
          "384:     }",
          "385:   }",
          "",
          "[Removed Lines]",
          "371:       tvbuff_t *oid_tvb_local;",
          "373:       oid_tvb_local = tvb_new_subset_remaining(gss_tvb, start_offset);",
          "374:       if (is_verifier)",
          "375:    handle = oidvalue->wrap_handle;",
          "376:       else",
          "377:    handle = oidvalue->handle;",
          "378:       len = call_dissector_with_data(handle, oid_tvb_local, pinfo, subtree, encrypt_info);",
          "379:       if (len == 0)",
          "380:    return_offset = tvb_captured_length(gss_tvb);",
          "381:       else",
          "382:    return_offset = start_offset + len;",
          "",
          "[Added Lines]",
          "371:    tvbuff_t *oid_tvb_local;",
          "373:    if (is_verifier) {",
          "374:     handle = oidvalue->wrap_handle;",
          "375:     if (handle != NULL) {",
          "376:      oid_tvb_local = tvb_new_subset_remaining(gss_tvb, start_offset);",
          "377:      len = call_dissector_with_data(handle, oid_tvb_local, pinfo, subtree, encrypt_info);",
          "378:      if (len == 0)",
          "379:       return_offset = tvb_captured_length(gss_tvb);",
          "380:      else",
          "381:       return_offset = start_offset + len;",
          "382:     } else {",
          "383:      proto_tree_add_item(subtree, hf_gssapi_auth_verifier, gss_tvb, offset, -1, ENC_NA);",
          "384:      return_offset = tvb_captured_length(gss_tvb);",
          "385:     }",
          "386:    } else {",
          "387:     handle = oidvalue->handle;",
          "388:     if (handle != NULL) {",
          "389:      oid_tvb_local = tvb_new_subset_remaining(gss_tvb, start_offset);",
          "390:      len = call_dissector_with_data(handle, oid_tvb_local, pinfo, subtree, encrypt_info);",
          "391:      if (len == 0)",
          "392:       return_offset = tvb_captured_length(gss_tvb);",
          "393:      else",
          "394:       return_offset = start_offset + len;",
          "395:     } else {",
          "396:      proto_tree_add_item(subtree, hf_gssapi_auth_credentials, gss_tvb, offset, -1, ENC_NA);",
          "397:      return_offset = tvb_captured_length(gss_tvb);",
          "398:     }",
          "399:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b20e5d8aae2580e29c83ddaf0b6b2e640603e4aa",
      "candidate_info": {
        "commit_hash": "b20e5d8aae2580e29c83ddaf0b6b2e640603e4aa",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/b20e5d8aae2580e29c83ddaf0b6b2e640603e4aa",
        "files": [
          "epan/dissectors/packet-gssapi.c"
        ],
        "message": "GSS-API: Make sure we call a valid dissector.\n\nMake our unknown dissector handle logic conistent with other parts of\nthe code.\n\nConflicts:\n\tepan/dissectors/packet-gssapi.c\n\nBug: 15613\nChange-Id: Id0daf9bf0be14b99ec592f4f561cc8935d5cb4a6\nReviewed-on: https://code.wireshark.org/review/32576\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Dario Lombardo <lomato@gmail.com>\n(cherry picked from commit 8cdc95842687feee32856afba8e7087396082158)\nReviewed-on: https://code.wireshark.org/review/32586\n(cherry picked from commit ea75daa28bd6bd6911fd14a8b1734004269a18b8)\nReviewed-on: https://code.wireshark.org/review/32588",
        "before_after_code_files": [
          "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c": [
          "File: epan/dissectors/packet-gssapi.c -> epan/dissectors/packet-gssapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:       return_offset = tvb_captured_length(gss_tvb);",
          "381:       goto done;",
          "382:     } else {",
          "396:     }",
          "397:   }",
          "",
          "[Removed Lines]",
          "383:       tvbuff_t *oid_tvb_local;",
          "385:       oid_tvb_local = tvb_new_subset_remaining(gss_tvb, start_offset);",
          "386:       if (is_verifier)",
          "387:    handle = oidvalue->wrap_handle;",
          "388:       else",
          "389:    handle = oidvalue->handle;",
          "390:       len = call_dissector_with_data(handle, oid_tvb_local, pinfo, subtree, encrypt_info);",
          "391:       if (len == 0)",
          "392:    return_offset = tvb_captured_length(gss_tvb);",
          "393:       else",
          "394:    return_offset = start_offset + len;",
          "",
          "[Added Lines]",
          "383:    tvbuff_t *oid_tvb_local;",
          "385:    if (is_verifier) {",
          "386:     handle = oidvalue->wrap_handle;",
          "387:     if (handle != NULL) {",
          "388:      oid_tvb_local = tvb_new_subset_remaining(gss_tvb, start_offset);",
          "389:      len = call_dissector_with_data(handle, oid_tvb_local, pinfo, subtree, encrypt_info);",
          "390:      if (len == 0)",
          "391:       return_offset = tvb_captured_length(gss_tvb);",
          "392:      else",
          "393:       return_offset = start_offset + len;",
          "394:     } else {",
          "395:      proto_tree_add_item(subtree, hf_gssapi_auth_verifier, gss_tvb, offset, -1, ENC_NA);",
          "396:      return_offset = tvb_captured_length(gss_tvb);",
          "397:     }",
          "398:    } else {",
          "399:     handle = oidvalue->handle;",
          "400:     if (handle != NULL) {",
          "401:      oid_tvb_local = tvb_new_subset_remaining(gss_tvb, start_offset);",
          "402:      len = call_dissector_with_data(handle, oid_tvb_local, pinfo, subtree, encrypt_info);",
          "403:      if (len == 0)",
          "404:       return_offset = tvb_captured_length(gss_tvb);",
          "405:      else",
          "406:       return_offset = start_offset + len;",
          "407:     } else {",
          "408:      proto_tree_add_item(subtree, hf_gssapi_auth_credentials, gss_tvb, offset, -1, ENC_NA);",
          "409:      return_offset = tvb_captured_length(gss_tvb);",
          "410:     }",
          "411:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67441248be9b0f08a5cfb6b5ca6f77f6284fa40d",
      "candidate_info": {
        "commit_hash": "67441248be9b0f08a5cfb6b5ca6f77f6284fa40d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/67441248be9b0f08a5cfb6b5ca6f77f6284fa40d",
        "files": [
          "epan/dissectors/packet-gssapi.c"
        ],
        "message": "gssapi: fix indentation in function dissect_gssapi_work().\n\nChange-Id: I48f331a0e572ce8b9b6b3fbe9eb45b7e2ba2b33a\nReviewed-on: https://code.wireshark.org/review/32572\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gssapi.c||epan/dissectors/packet-gssapi.c": [
          "File: epan/dissectors/packet-gssapi.c -> epan/dissectors/packet-gssapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:      pinfo, fi->first_frame, NULL);",
          "270:     if(fd_head && (fd_head->flags&FD_DEFRAGMENTED)){",
          "271:      if(pinfo->num==fi->reassembled_in){",
          "273:       gss_tvb=tvb_new_chain(tvb, fd_head->tvb_data);",
          "274:       add_new_data_source(pinfo, gss_tvb, \"Reassembled GSSAPI\");",
          "275:       show_fragment_tree(fd_head, &gssapi_frag_items, tree, pinfo, tvb, &frag_tree_item);",
          "",
          "[Removed Lines]",
          "272:              proto_item *frag_tree_item;",
          "",
          "[Added Lines]",
          "272:       proto_item *frag_tree_item;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:          pinfo, subtree, &encrypt_info->gssapi_decrypted_tvb);",
          "320:      encrypt_info->gssapi_data_encrypted = TRUE;",
          "321:     }",
          "385:   }",
          "",
          "[Removed Lines]",
          "322:        goto done;",
          "323:      }",
          "326:     if ((tvb_captured_length_remaining(gss_tvb, start_offset)>2) &&",
          "327:         ((tvb_memeql(gss_tvb, start_offset, \"\\04\\x04\", 2) == 0) ||",
          "328:          (tvb_memeql(gss_tvb, start_offset, \"\\05\\x04\", 2) == 0))) {",
          "329:       return_offset = call_dissector_with_data(spnego_krb5_wrap_handle,",
          "330:          tvb_new_subset_remaining(gss_tvb, start_offset),",
          "331:          pinfo, subtree, encrypt_info);",
          "332:       goto done;",
          "333:     }",
          "354:     oidvalue = (gssapi_oid_value *)p_get_proto_data(wmem_file_scope(), pinfo, proto_gssapi, 0);",
          "355:     if (!oidvalue && !pinfo->fd->visited)",
          "356:     {",
          "359:       oidvalue = gss_info->oid;",
          "360:       if (gss_info->oid)",
          "361:         p_add_proto_data(wmem_file_scope(), pinfo, proto_gssapi, 0, gss_info->oid);",
          "362:     }",
          "363:     if (!oidvalue)",
          "364:     {",
          "365:      proto_tree_add_expert_format(subtree, pinfo, &ei_gssapi_unknown_header, gss_tvb, start_offset, 0,",
          "366:            \"Unknown header (class=%d, pc=%d, tag=%d)\",",
          "367:            appclass, pc, tag);",
          "368:       return_offset = tvb_captured_length(gss_tvb);",
          "369:       goto done;",
          "370:     } else {",
          "371:       tvbuff_t *oid_tvb_local;",
          "373:       oid_tvb_local = tvb_new_subset_remaining(gss_tvb, start_offset);",
          "374:       if (is_verifier)",
          "375:    handle = oidvalue->wrap_handle;",
          "376:       else",
          "377:    handle = oidvalue->handle;",
          "378:       len = call_dissector_with_data(handle, oid_tvb_local, pinfo, subtree, encrypt_info);",
          "379:       if (len == 0)",
          "380:    return_offset = tvb_captured_length(gss_tvb);",
          "381:       else",
          "382:    return_offset = start_offset + len;",
          "384:     }",
          "",
          "[Added Lines]",
          "322:     goto done;",
          "323:    }",
          "326:    if ((tvb_captured_length_remaining(gss_tvb, start_offset)>2) &&",
          "327:       ((tvb_memeql(gss_tvb, start_offset, \"\\04\\x04\", 2) == 0) ||",
          "328:        (tvb_memeql(gss_tvb, start_offset, \"\\05\\x04\", 2) == 0))) {",
          "329:     return_offset = call_dissector_with_data(spnego_krb5_wrap_handle,",
          "330:        tvb_new_subset_remaining(gss_tvb, start_offset),",
          "331:        pinfo, subtree, encrypt_info);",
          "332:     goto done;",
          "333:    }",
          "354:    oidvalue = (gssapi_oid_value *)p_get_proto_data(wmem_file_scope(), pinfo, proto_gssapi, 0);",
          "355:    if (!oidvalue && !pinfo->fd->visited) {",
          "358:     oidvalue = gss_info->oid;",
          "359:     if (gss_info->oid)",
          "360:      p_add_proto_data(wmem_file_scope(), pinfo, proto_gssapi, 0, gss_info->oid);",
          "361:    }",
          "362:    if (!oidvalue) {",
          "363:     proto_tree_add_expert_format(subtree, pinfo, &ei_gssapi_unknown_header, gss_tvb, start_offset, 0,",
          "364:       \"Unknown header (class=%d, pc=%d, tag=%d)\",",
          "365:       appclass, pc, tag);",
          "366:     return_offset = tvb_captured_length(gss_tvb);",
          "367:     goto done;",
          "368:    } else {",
          "369:     tvbuff_t *oid_tvb_local;",
          "371:     oid_tvb_local = tvb_new_subset_remaining(gss_tvb, start_offset);",
          "372:     if (is_verifier)",
          "373:      handle = oidvalue->wrap_handle;",
          "374:     else",
          "375:      handle = oidvalue->handle;",
          "376:     len = call_dissector_with_data(handle, oid_tvb_local, pinfo, subtree, encrypt_info);",
          "377:     if (len == 0)",
          "378:      return_offset = tvb_captured_length(gss_tvb);",
          "379:     else",
          "380:      return_offset = start_offset + len;",
          "382:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "434:    proto_tree_add_item(subtree, hf_gssapi_token_object, gss_tvb, oid_start_offset, -1, ENC_NA);",
          "",
          "[Removed Lines]",
          "431:   if ((oidvalue == NULL) ||",
          "432:       !proto_is_protocol_enabled(oidvalue->proto)) {",
          "",
          "[Added Lines]",
          "429:   if ((oidvalue == NULL) || !proto_is_protocol_enabled(oidvalue->proto)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "449:     gss_info->oid=oidvalue;",
          "450:   }",
          "",
          "[Removed Lines]",
          "448:   if(!gss_info->oid){",
          "",
          "[Added Lines]",
          "445:   if(!gss_info->oid) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}