{
  "cve_id": "CVE-2017-14174",
  "cve_desc": "In coders/psd.c in ImageMagick 7.0.7-0 Q16, a DoS in ReadPSDLayersInternal() due to lack of an EOF (End of File) check might cause huge CPU consumption. When a crafted PSD file, which claims a large \"length\" field in the header but does not contain sufficient backing data, is provided, the loop over \"length\" would consume huge CPU resources, since there is no EOF check inside the loop.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "04a567494786d5bb50894fc8bb8fea0cf496bea8",
  "patch_info": {
    "commit_hash": "04a567494786d5bb50894fc8bb8fea0cf496bea8",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/04a567494786d5bb50894fc8bb8fea0cf496bea8",
    "files": [
      "coders/psd.c"
    ],
    "message": "Slightly different fix for #714",
    "before_after_code_files": [
      "coders/psd.c||coders/psd.c"
    ]
  },
  "patch_diff": {
    "coders/psd.c||coders/psd.c": [
      "File: coders/psd.c -> coders/psd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1324:         Ignore mask that is not a user supplied layer mask, if the mask is",
      "1325:         disabled or if the flags have unsupported values.",
      "1330:            (IsStringTrue(option) == MagickFalse)))",
      "1331:       {",
      "1332:         SeekBlob(image,layer_info->channel_info[channel].size-2,SEEK_CUR);",
      "",
      "[Removed Lines]",
      "1327:       option=GetImageOption(image_info,\"psd:preserve-opacity-mask\");",
      "1328:       if ((layer_info->channel_info[channel].type != -2) ||",
      "1329:           (layer_info->mask.flags > 2) || ((layer_info->mask.flags & 0x02) &&",
      "",
      "[Added Lines]",
      "1327:       option=GetImageOption(image_info,\"psd:preserve-opacity-mask\");",
      "1328:       if ((layer_info->channel_info[channel].type != -2) ||",
      "1329:           (layer_info->mask.flags > 2) || ((layer_info->mask.flags & 0x02) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1701:               {",
      "1703:                   Layer blending ranges info.",
      "1722:                   if (image->debug != MagickFalse)",
      "1723:                     (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
      "1724:                       \"        source(%x), dest(%x)\",(unsigned int)",
      "",
      "[Removed Lines]",
      "1705:                 if (image->debug != MagickFalse)",
      "1706:                   (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
      "1707:                     \"      layer blending ranges: length=%.20g\",(double)",
      "1708:                     ((MagickOffsetType) length));",
      "1710:                   We read it, but don't use it...",
      "1712:                 for (j=0; j < (ssize_t) length; j+=8)",
      "1713:                 {",
      "1714:                   size_t blend_source=ReadBlobLong(image);",
      "1715:                   size_t blend_dest=ReadBlobLong(image);",
      "1716:                   if (EOFBlob(image) != MagickFalse)",
      "1717:                     {",
      "1718:                       layer_info=DestroyLayerInfo(layer_info,number_layers);",
      "1719:                       ThrowBinaryException(CorruptImageError,",
      "1720:                         \"InsufficientImageDataInFile\",image->filename);",
      "1721:                     }",
      "",
      "[Added Lines]",
      "1705:                 if (image->debug != MagickFalse)",
      "1706:                   (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
      "1707:                     \"      layer blending ranges: length=%.20g\",(double)",
      "1708:                     ((MagickOffsetType) length));",
      "1709:                 if (DiscardBlobBytes(image,length) == MagickFalse)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c8c6a0f123d5e35c173125365c97e2c0fc7eca42",
      "candidate_info": {
        "commit_hash": "c8c6a0f123d5e35c173125365c97e2c0fc7eca42",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/c8c6a0f123d5e35c173125365c97e2c0fc7eca42",
        "files": [
          "coders/psd.c"
        ],
        "message": "Fix improper cast that could cause an overflow as demonstrated in #347.",
        "before_after_code_files": [
          "coders/psd.c||coders/psd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/psd.c||coders/psd.c"
          ],
          "candidate": [
            "coders/psd.c||coders/psd.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/psd.c||coders/psd.c": [
          "File: coders/psd.c -> coders/psd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1691:                     (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "1692:                       \"        source(%x), dest(%x)\",(unsigned int)",
          "1693:                       blend_source,(unsigned int) blend_dest);",
          "1695:               }",
          "1697:               Layer name.",
          "",
          "[Removed Lines]",
          "1694:                 }",
          "",
          "[Added Lines]",
          "1694:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13663fd5798bbad267eae51a08da2dc8d40ef62b",
      "candidate_info": {
        "commit_hash": "13663fd5798bbad267eae51a08da2dc8d40ef62b",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/13663fd5798bbad267eae51a08da2dc8d40ef62b",
        "files": [
          "coders/psd.c"
        ],
        "message": "https://github.com/ImageMagick/ImageMagick/issues/714",
        "before_after_code_files": [
          "coders/psd.c||coders/psd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/psd.c||coders/psd.c"
          ],
          "candidate": [
            "coders/psd.c||coders/psd.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/psd.c||coders/psd.c": [
          "File: coders/psd.c -> coders/psd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1708:                     ((MagickOffsetType) length));",
          "1710:                   We read it, but don't use it...",
          "1712:                 for (j=0; j < (ssize_t) length; j+=8)",
          "1713:                 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1712:                 for (j=0; j < (ssize_t) length; j+=8)",
          "1713:                 {",
          "1714:                   size_t blend_source=ReadBlobLong(image);",
          "1715:                   size_t blend_dest=ReadBlobLong(image);",
          "1716:                   if (EOFBlob(image) != MagickFalse)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1758:                 info=GetStringInfoDatum(layer_info[i].info);",
          "1759:                 (void) ReadBlob(image,(const size_t) length,info);",
          "1760:               }",
          "1764:       for (i=0; i < number_layers; i++)",
          "1765:       {",
          "",
          "[Removed Lines]",
          "1761:           }",
          "1762:       }",
          "",
          "[Added Lines]",
          "1767:           }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11c1fc31bb049473c074a7fdf6fa191fd82425fa",
      "candidate_info": {
        "commit_hash": "11c1fc31bb049473c074a7fdf6fa191fd82425fa",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/11c1fc31bb049473c074a7fdf6fa191fd82425fa",
        "files": [
          "coders/psd.c"
        ],
        "message": "Whitespace.",
        "before_after_code_files": [
          "coders/psd.c||coders/psd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/psd.c||coders/psd.c"
          ],
          "candidate": [
            "coders/psd.c||coders/psd.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/psd.c||coders/psd.c": [
          "File: coders/psd.c -> coders/psd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1206:   pixels=(unsigned char *) AcquireQuantumMemory(count,sizeof(*pixels));",
          "1207:   if (pixels == (unsigned char *) NULL)",
          "1208:     {",
          "1210:       ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",",
          "1211:         image->filename);",
          "1212:     }",
          "1215:   stream.data_type=Z_BINARY;",
          "1219:   stream.avail_in=(unsigned int) compact_size;",
          "1220:   stream.next_out=(Bytef *)pixels;",
          "1221:   stream.avail_out=(unsigned int) count;",
          "1223:   if(inflateInit(&stream) == Z_OK)",
          "1224:     {",
          "1233:           compact_pixels=(unsigned char *) RelinquishMagickMemory(",
          "1234:             compact_pixels);",
          "1235:           pixels=(unsigned char *) RelinquishMagickMemory(pixels);",
          "1236:           return(MagickFalse);",
          "1237:         }",
          "1238:       }",
          "1241:   if (compression == ZipWithPrediction)",
          "1243:      p=pixels;",
          "1244:      while(count > 0)",
          "1245:      {",
          "",
          "[Removed Lines]",
          "1209:       compact_pixels=(unsigned char *) RelinquishMagickMemory(compact_pixels);",
          "1214:   ResetMagickMemory(&stream, 0, sizeof(z_stream));",
          "1216:   (void) ReadBlob(image,compact_size,compact_pixels);",
          "1218:   stream.next_in=(Bytef *)compact_pixels;",
          "1225:       int",
          "1226:         ret;",
          "1228:       while (stream.avail_out > 0)",
          "1229:       {",
          "1230:         ret=inflate(&stream, Z_SYNC_FLUSH);",
          "1231:         if (ret != Z_OK && ret != Z_STREAM_END)",
          "1232:         {",
          "1239:     }",
          "1242:   {",
          "",
          "[Added Lines]",
          "1209:       compact_pixels=(unsigned char *) RelinquishMagickMemory(compact_pixels);",
          "1214:   ResetMagickMemory(&stream,0,sizeof(stream));",
          "1216:   (void) ReadBlob(image,compact_size,compact_pixels);",
          "1218:   stream.next_in=(Bytef *)compact_pixels;",
          "1225:       int",
          "1226:         ret;",
          "1228:       while (stream.avail_out > 0)",
          "1229:       {",
          "1230:         ret=inflate(&stream,Z_SYNC_FLUSH);",
          "1231:         if ((ret != Z_OK) && (ret != Z_STREAM_END))",
          "1232:           {",
          "1239:     }",
          "1242:   {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1290:     offset;",
          "1292:   MagickBooleanType",
          "1308:         (layer_info->mask.flags > 2) || ((layer_info->mask.flags & 0x02) &&",
          "1314:     mask=CloneImage(image,layer_info->mask.page.width,",
          "1315:       layer_info->mask.page.height,MagickFalse,exception);",
          "1316:     SetImageType(mask,GrayscaleType,exception);",
          "",
          "[Removed Lines]",
          "1293:     status;",
          "1295:   channel_image=image;",
          "1296:   mask=(Image *) NULL;",
          "1297:   if (layer_info->channel_info[channel].type < -1)",
          "1298:   {",
          "1299:     const char",
          "1303:       Ignore mask that is not a user supplied layer mask, if the mask is",
          "1304:       disabled or if the flags have unsupported values.",
          "1306:     option=GetImageOption(image_info,\"psd:preserve-opacity-mask\");",
          "1307:     if ((layer_info->channel_info[channel].type != -2) ||",
          "1309:          (IsStringTrue(option) == MagickFalse)))",
          "1310:     {",
          "1311:       SeekBlob(image,layer_info->channel_info[channel].size-2,SEEK_CUR);",
          "1312:       return(MagickTrue);",
          "1313:     }",
          "",
          "[Added Lines]",
          "1295:   channel_image=image;",
          "1296:   mask=(Image *) NULL;",
          "1297:   if (layer_info->channel_info[channel].type < -1)",
          "1298:     {",
          "1299:       const char",
          "1302:         Ignore mask that is not a user supplied layer mask, if the mask is",
          "1303:         disabled or if the flags have unsupported values.",
          "1305:       option=GetImageOption(image_info,\"psd:preserve-opacity-mask\");",
          "1306:       if ((layer_info->channel_info[channel].type != -2) ||",
          "1307:           (layer_info->mask.flags > 2) || ((layer_info->mask.flags & 0x02) &&",
          "1308:            (IsStringTrue(option) == MagickFalse)))",
          "1309:       {",
          "1310:         SeekBlob(image,layer_info->channel_info[channel].size-2,SEEK_CUR);",
          "1311:         return(MagickTrue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1361:   if (status == MagickFalse)",
          "1362:     {",
          "1363:       if (mask != (Image *) NULL)",
          "1370:     if (status != MagickFalse)",
          "1371:       layer_info->mask.image=mask;",
          "1372:     else",
          "",
          "[Removed Lines]",
          "1364:         DestroyImage(mask);",
          "1365:       ThrowBinaryException(CoderError,\"UnableToDecompressImage\",",
          "1366:         image->filename);",
          "1367:     }",
          "1368:   if (mask != (Image *) NULL)",
          "1369:   {",
          "",
          "[Added Lines]",
          "1363:         DestroyImage(mask);",
          "1364:       ThrowBinaryException(CoderError,\"UnableToDecompressImage\",",
          "1365:         image->filename);",
          "1366:     }",
          "1367:   if (mask != (Image *) NULL)",
          "1368:     {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1801:             status=SetImageProgress(image,LoadImagesTag,i,(MagickSizeType)",
          "1802:               number_layers);",
          "1803:             if (status == MagickFalse)",
          "1806:         }",
          "1808:       if (status != MagickFalse)",
          "1813:           {",
          "1815:               layer_info[j] = layer_info[j+1];",
          "1819:         }",
          "1825:               if (i > 0)",
          "1831:             image->next=layer_info[0].image;",
          "1832:             layer_info[0].image->previous=image;",
          "1833:           }",
          "",
          "[Removed Lines]",
          "1804:               break;",
          "1805:           }",
          "1809:       {",
          "1810:         for (i=0; i < number_layers; i++)",
          "1811:         {",
          "1812:           if (layer_info[i].image == (Image *) NULL)",
          "1814:             for (j=i; j < number_layers - 1; j++)",
          "1816:             number_layers--;",
          "1817:             i--;",
          "1818:           }",
          "1821:         if (number_layers > 0)",
          "1822:           {",
          "1823:             for (i=0; i < number_layers; i++)",
          "1824:             {",
          "1826:                 layer_info[i].image->previous=layer_info[i-1].image;",
          "1827:               if (i < (number_layers-1))",
          "1828:                 layer_info[i].image->next=layer_info[i+1].image;",
          "1829:               layer_info[i].image->page=layer_info[i].page;",
          "1830:             }",
          "",
          "[Added Lines]",
          "1804:           }",
          "1807:       if (status != MagickFalse)",
          "1808:         {",
          "1809:           for (i=0; i < number_layers; i++)",
          "1810:           {",
          "1811:             if (layer_info[i].image == (Image *) NULL)",
          "1812:               {",
          "1815:                 number_layers--;",
          "1817:               }",
          "1818:           }",
          "1820:           if (number_layers > 0)",
          "1821:             {",
          "1822:               for (i=0; i < number_layers; i++)",
          "1823:               {",
          "1824:                 if (i > 0)",
          "1825:                   layer_info[i].image->previous=layer_info[i-1].image;",
          "1826:                 if (i < (number_layers-1))",
          "1828:                 layer_info[i].image->page=layer_info[i].page;",
          "1829:               }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1862:     {",
          "1863:       (void) ThrowMagickException(exception,GetMagickModule(),",
          "1864:         TypeWarning,\"CompressionNotSupported\",\"'%.20g'\",(double) compression);",
          "1871:     sizes=ReadPSDRLESizes(image,psd_info,image->rows*psd_info->channels);",
          "1872:     if (sizes == (MagickOffsetType *) NULL)",
          "1873:       ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",",
          "",
          "[Removed Lines]",
          "1865:       return(MagickFalse);",
          "1866:     }",
          "1868:   sizes=(MagickOffsetType *) NULL;",
          "1869:   if (compression == RLE)",
          "1870:   {",
          "",
          "[Added Lines]",
          "1864:       return(MagickFalse);",
          "1865:     }",
          "1867:   sizes=(MagickOffsetType *) NULL;",
          "1868:   if (compression == RLE)",
          "1869:     {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1995:     SetImageColorspace(image,LabColorspace,exception);",
          "1996:   if (psd_info.mode == CMYKMode)",
          "1997:     {",
          "1999:       if (psd_info.channels > 4)",
          "2000:         SetImageAlphaChannel(image,ActivateAlphaChannel,exception);",
          "2001:     }",
          "",
          "[Removed Lines]",
          "1998:       SetImageColorspace(image,CMYKColorspace,exception);",
          "",
          "[Added Lines]",
          "1997:       SetImageColorspace(image,CMYKColorspace,exception);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2675:     {",
          "2676:       const char",
          "2684:           if (mask != (Image *) NULL)",
          "2685:             {",
          "2686:              if (mask->compression == RLECompression)",
          "",
          "[Removed Lines]",
          "2679:       property=GetImageArtifact(next_image,\"psd:opacity-mask\");",
          "2680:       if (property != (const char *) NULL)",
          "2681:         {",
          "2682:           mask=(Image *) GetImageRegistry(ImageRegistryType,property,",
          "2683:             exception);",
          "",
          "[Added Lines]",
          "2678:       property=GetImageArtifact(next_image,\"psd:opacity-mask\");",
          "2679:       if (property != (const char *) NULL)",
          "2680:         {",
          "2681:           mask=(Image *) GetImageRegistry(ImageRegistryType,property,",
          "2682:             exception);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2958:     found=MagickFalse;",
          "2959:     for (i=0; i < PSDAllowedLength; i++)",
          "2960:     {",
          "2966:     }",
          "2967:     remaining_length-=(size_t) size;",
          "2968:     if (found == MagickFalse)",
          "",
          "[Removed Lines]",
          "2961:       if (LocaleNCompare(key,allowed[i],PSDKeySize) != 0)",
          "2962:         continue;",
          "2964:       found=MagickTrue;",
          "2965:       break;",
          "",
          "[Added Lines]",
          "2960:       if (LocaleNCompare(key,allowed[i],PSDKeySize) != 0)",
          "2961:         continue;",
          "2963:       found=MagickTrue;",
          "2964:       break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "539052984c16e538c44919b82696ca4920994f46",
      "candidate_info": {
        "commit_hash": "539052984c16e538c44919b82696ca4920994f46",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/539052984c16e538c44919b82696ca4920994f46",
        "files": [
          "coders/psd.c"
        ],
        "message": "...",
        "before_after_code_files": [
          "coders/psd.c||coders/psd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/psd.c||coders/psd.c"
          ],
          "candidate": [
            "coders/psd.c||coders/psd.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/psd.c||coders/psd.c": [
          "File: coders/psd.c -> coders/psd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:   if (image->debug != MagickFalse)",
          "457:     (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "458:       \"  applying opacity mask\");",
          "461:     return(MagickFalse);",
          "462:   complete_mask->alpha_trait=BlendPixelTrait;",
          "463:   GetPixelInfo(complete_mask,&color);",
          "",
          "[Removed Lines]",
          "459:   complete_mask=CloneImage(image,0,0,MagickTrue,exception);",
          "460:   if (complete_mask == (Image *) NULL)",
          "",
          "[Added Lines]",
          "459:   complete_mask=CloneImage(image,0,0,MagickTrue,exception);",
          "460:   if (complete_mask == (Image *) NULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "496:         continue;",
          "497:       }",
          "498:     for (x=0; x < (ssize_t) image->columns; x++)",
          "500:       MagickRealType",
          "501:         alpha,",
          "502:         intensity;",
          "",
          "[Removed Lines]",
          "499:     {",
          "",
          "[Added Lines]",
          "499:     {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "532:   if (image->debug != MagickFalse)",
          "534:       \"  preserving opacity mask\");",
          "535:   random_info=AcquireRandomInfo();",
          "536:   key_info=GetRandomKey(random_info,2+1);",
          "",
          "[Removed Lines]",
          "533:     (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "",
          "[Added Lines]",
          "533:     (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "760: static StringInfo *ParseImageResourceBlocks(Image *image,",
          "761:   const unsigned char *blocks,size_t length,",
          "762:   MagickBooleanType *has_merged_image,ExceptionInfo *exception)",
          "763: {",
          "764:   const unsigned char",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "762:   MagickBooleanType *has_merged_image,ExceptionInfo *exception)",
          "763: {",
          "764:   const unsigned char",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "767:   StringInfo",
          "770:   unsigned char",
          "771:     name_length;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "789:     p+=4;",
          "790:     p=PushShortPixel(MSBEndian,p,&id);",
          "791:     p=PushCharPixel(p,&name_length);",
          "794:     p+=name_length;",
          "795:     if (p > (blocks+length-4))",
          "796:       break;",
          "",
          "[Removed Lines]",
          "792:     if ((name_length % 2) == 0)",
          "793:       name_length++;",
          "",
          "[Added Lines]",
          "795:     if ((name_length % 2) == 0)",
          "796:       name_length++;",
          "797:     p+=name_length;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "805:           value[MagickPathExtent];",
          "807:         unsigned short",
          "811:           Resolution info.",
          "",
          "[Removed Lines]",
          "808:           resolution;",
          "",
          "[Added Lines]",
          "812:           resolution;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "828:         p=PushShortPixel(MSBEndian,p,&short_sans);",
          "829:         p=PushShortPixel(MSBEndian,p,&short_sans);",
          "830:         p=PushShortPixel(MSBEndian,p,&short_sans);",
          "832:         break;",
          "834:       case 0x0421:",
          "835:       {",
          "836:         if ((count > 4) && (*(p+4) == 0))",
          "839:         break;",
          "840:       }",
          "841:       default:",
          "843:         p+=count;",
          "844:         break;",
          "845:       }",
          "",
          "[Removed Lines]",
          "831:         image->units=PixelsPerInchResolution;",
          "833:       }",
          "838:         p+=count;",
          "842:       {",
          "",
          "[Added Lines]",
          "835:         image->units=PixelsPerInchResolution;",
          "837:       }",
          "842:         p+=offset;",
          "846:       {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "932:       if (type == 0)",
          "933:         {",
          "934:           if (packet_size == 1)",
          "936:           else",
          "937:             SetPixelIndex(image,ScaleQuantumToShort(pixel),q);",
          "938:         }",
          "",
          "[Removed Lines]",
          "935:             SetPixelIndex(image,ScaleQuantumToChar(pixel),q);",
          "",
          "[Added Lines]",
          "939:             SetPixelIndex(image,ScaleQuantumToChar(pixel),q);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "987:       if (image->alpha_trait != UndefinedPixelTrait)",
          "988:         SetPixelAlpha(image,pixel,q);",
          "989:       break;",
          "991:   }",
          "992: }",
          "",
          "[Removed Lines]",
          "990:     }",
          "",
          "[Added Lines]",
          "994:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1038:     if (image->depth > 1)",
          "1039:       {",
          "1040:         SetPSDPixel(image,channels,type,packet_size,pixel,q,exception);",
          "1042:       }",
          "1043:     else",
          "1045:         ssize_t",
          "1046:           bit,",
          "1049:         number_bits=image->columns-x;",
          "1050:         if (number_bits > 8)",
          "",
          "[Removed Lines]",
          "1041:         q+=GetPixelChannels(image);",
          "1044:       {",
          "1047:           number_bits;",
          "",
          "[Added Lines]",
          "1045:         q+=GetPixelChannels(image);",
          "1046:       }",
          "1047:     else",
          "1050:           bit;",
          "1053:           number_bits;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1067: static MagickBooleanType ReadPSDChannelRaw(Image *image,const size_t channels,",
          "1068:   const ssize_t type,ExceptionInfo *exception)",
          "1070:   MagickBooleanType",
          "1071:     status;",
          "1073:   size_t",
          "1074:     count,",
          "1075:     row_size;",
          "",
          "[Removed Lines]",
          "1069: {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1091:       image->filename);",
          "1093:   status=MagickTrue;",
          "1095:   {",
          "1096:     status=MagickFalse;",
          "",
          "[Removed Lines]",
          "1094:   for (y=0; y < (ssize_t) image->rows; y++)",
          "",
          "[Added Lines]",
          "1100:   for (y=0; y < (ssize_t) image->rows; y++)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1368:         Ignore mask that is not a user supplied layer mask, if the mask is",
          "1369:         disabled or if the flags have unsupported values.",
          "1372:       if ((layer_info->channel_info[channel].type != -2) ||",
          "1373:           (layer_info->mask.flags > 2) || ((layer_info->mask.flags & 0x02) &&",
          "1374:            (IsStringTrue(option) == MagickFalse)))",
          "1375:         {",
          "1376:           SeekBlob(image,layer_info->channel_info[channel].size-2,SEEK_CUR);",
          "1377:           return(MagickTrue);",
          "1379:       mask=CloneImage(image,layer_info->mask.page.width,",
          "1380:         layer_info->mask.page.height,MagickFalse,exception);",
          "1381:       if (mask != (Image *) NULL)",
          "",
          "[Removed Lines]",
          "1371:       option=GetImageOption(image_info,\"psd:preserve-opacity-mask\");",
          "1378:         }",
          "",
          "[Added Lines]",
          "1377:       option=GetImageOption(image_info,\"psd:preserve-opacity-mask\");",
          "1378:       if ((layer_info->channel_info[channel].type != -2) ||",
          "1385:         }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1386:     }",
          "1388:   offset=TellBlob(image);",
          "1390:   switch(compression)",
          "1391:   {",
          "1392:     case Raw:",
          "",
          "[Removed Lines]",
          "1389:   status=MagickFalse;",
          "",
          "[Added Lines]",
          "1396:   status=MagickFalse;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1398:         MagickOffsetType",
          "1402:         if (sizes == (MagickOffsetType *) NULL)",
          "1403:           ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",",
          "1404:             image->filename);",
          "",
          "[Removed Lines]",
          "1401:         sizes=ReadPSDRLESizes(channel_image,psd_info,channel_image->rows);",
          "",
          "[Added Lines]",
          "1408:         sizes=ReadPSDRLESizes(channel_image,psd_info,channel_image->rows);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1406:           layer_info->channel_info[channel].type,sizes,exception);",
          "1407:         sizes=(MagickOffsetType *) RelinquishMagickMemory(sizes);",
          "1408:       }",
          "1410:     case ZipWithPrediction:",
          "1411:     case ZipWithoutPrediction:",
          "1412: #ifdef MAGICKCORE_ZLIB_DELEGATE",
          "",
          "[Removed Lines]",
          "1409:       break;",
          "",
          "[Added Lines]",
          "1416:       break;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1420: #endif",
          "1421:       break;",
          "1422:     default:",
          "1424:         \"CompressionNotSupported\",\"'%.20g'\",(double) compression);",
          "1425:       break;",
          "1426:   }",
          "1428:   SeekBlob(image,offset+layer_info->channel_info[channel].size-2,SEEK_SET);",
          "1429:   if (status == MagickFalse)",
          "1430:     {",
          "",
          "[Removed Lines]",
          "1423:       (void) ThrowMagickException(exception,GetMagickModule(),TypeWarning,",
          "",
          "[Added Lines]",
          "1430:       (void) ThrowMagickException(exception,GetMagickModule(),TypeWarning,",
          "1431:         \"CompressionNotSupported\",\"'%.20g'\",(double) compression);",
          "1435:   (void) SeekBlob(image,offset+layer_info->channel_info[channel].size-2,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1497:           TypeError,\"CompressionNotSupported\",\"ZipWithPrediction(32 bit)\");",
          "1498:         return(MagickFalse);",
          "1499:       }",
          "1502:     if (layer_info->channel_info[j].type == -1)",
          "1503:       layer_info->image->alpha_trait=BlendPixelTrait;",
          "",
          "[Removed Lines]",
          "1501:     layer_info->image->compression=ConvertPSDCompression(compression);",
          "",
          "[Added Lines]",
          "1509:     layer_info->image->compression=ConvertPSDCompression(compression);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1552:   if (layer_info->channels < psd_info->min_channels)",
          "1553:     return(MagickFalse);",
          "1555:   if (psd_info->min_channels >= 3)",
          "1556:     channel_type|=(GreenChannel | BlueChannel);",
          "1557:   if (psd_info->min_channels >= 4)",
          "",
          "[Removed Lines]",
          "1554:   channel_type=RedChannel;",
          "",
          "[Added Lines]",
          "1562:   channel_type=RedChannel;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1614:   if (size == 0)",
          "1615:     {",
          "1619:       (void) ReadBlobLong(image);",
          "1620:       count=ReadBlob(image,4,(unsigned char *) type);",
          "",
          "[Removed Lines]",
          "1617:         Skip layers & masks.",
          "",
          "[Added Lines]",
          "1625:         Skip layers & masks.",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1633:           else",
          "1634:             return(MagickTrue);",
          "1635:         }",
          "1637:   status=MagickTrue;",
          "1638:   if (size != 0)",
          "1639:     {",
          "",
          "[Removed Lines]",
          "1636:     }",
          "",
          "[Added Lines]",
          "1644:     }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1684:       {",
          "1685:         ssize_t",
          "1686:           x,",
          "1691:             \"  reading layer #%.20g\",(double) i+1);",
          "1692:         layer_info[i].page.y=ReadBlobSignedLong(image);",
          "1693:         layer_info[i].page.x=ReadBlobSignedLong(image);",
          "",
          "[Removed Lines]",
          "1687:           y;",
          "1689:         if (image->debug != MagickFalse)",
          "1690:           (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "",
          "[Added Lines]",
          "1695:           y;",
          "1697:         if (image->debug != MagickFalse)",
          "1698:           (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1777:                 \"    layer contains additional info\");",
          "1778:             length=ReadBlobLong(image);",
          "1779:             combined_length=length+4;",
          "1786:                 layer_info[i].mask.page.x=ReadBlobSignedLong(image);",
          "1787:                 layer_info[i].mask.page.height=(size_t) (ReadBlobSignedLong(image)-",
          "1788:                   layer_info[i].mask.page.y);",
          "",
          "[Removed Lines]",
          "1780:             if (length != 0)",
          "1781:               {",
          "1783:                   Layer mask info.",
          "1785:                 layer_info[i].mask.page.y=ReadBlobSignedLong(image);",
          "",
          "[Added Lines]",
          "1788:             if (length != 0)",
          "1789:               {",
          "1791:                   Layer mask info.",
          "1793:                 layer_info[i].mask.page.y=(ssize_t) ReadBlobSignedLong(image);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1911:       }",
          "1913:       if (image_info->ping == MagickFalse)",
          "1915:           for (i=0; i < number_layers; i++)",
          "1916:           {",
          "1917:             if (layer_info[i].image == (Image *) NULL)",
          "",
          "[Removed Lines]",
          "1914:         {",
          "",
          "[Added Lines]",
          "1922:         {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1933:               (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "1934:                 \"  reading data for layer %.20g\",(double) i);",
          "1938:             if (status == MagickFalse)",
          "1939:               break;",
          "",
          "[Removed Lines]",
          "1936:             status=ReadPSDLayer(image,image_info,psd_info,&layer_info[i],",
          "1937:               exception);",
          "",
          "[Added Lines]",
          "1944:             status=ReadPSDLayer(image,image_info,psd_info,&layer_info[i],",
          "1945:               exception);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2044:     if (compression == RLE)",
          "2045:       status=ReadPSDChannelRLE(image,psd_info,type,sizes+(i*image->rows),",
          "2047:     else",
          "2048:       status=ReadPSDChannelRaw(image,psd_info->channels,type,exception);",
          "",
          "[Removed Lines]",
          "2046:         exception);",
          "",
          "[Added Lines]",
          "2054:         exception);",
          "2055:     else",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2160:   status=SetImageExtent(image,image->columns,image->rows,exception);",
          "2161:   if (status == MagickFalse)",
          "2162:     return(DestroyImageList(image));",
          "2164:   if (status == MagickFalse)",
          "2165:     return(DestroyImageList(image));",
          "2166:   psd_info.min_channels=3;",
          "2168:     SetImageColorspace(image,LabColorspace,exception);",
          "2170:     {",
          "2171:       psd_info.min_channels=4;",
          "2172:       SetImageColorspace(image,CMYKColorspace,exception);",
          "2173:       if (psd_info.channels > 4)",
          "2174:         SetImageAlphaChannel(image,ActivateAlphaChannel,exception);",
          "2175:     }",
          "2178:     {",
          "2179:       if (psd_info.depth != 32)",
          "2180:         {",
          "",
          "[Removed Lines]",
          "2163:   status=ResetImagePixels(image,exception);",
          "2167:   if (psd_info.mode == LabMode)",
          "2169:   if (psd_info.mode == CMYKMode)",
          "2176:   else if ((psd_info.mode == BitmapMode) || (psd_info.mode == GrayscaleMode) ||",
          "2177:            (psd_info.mode == DuotoneMode))",
          "",
          "[Added Lines]",
          "2172:   status=ResetImagePixels(image,exception);",
          "2176:   if (psd_info.mode == LabMode)",
          "2178:   if (psd_info.mode == CMYKMode)",
          "2185:   else if ((psd_info.mode == BitmapMode) || (psd_info.mode == GrayscaleMode) ||",
          "2186:            (psd_info.mode == DuotoneMode))",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2182:             exception);",
          "2183:           if (status == MagickFalse)",
          "2184:             ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "2186:             (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "2188:         }",
          "2189:       psd_info.min_channels=1;",
          "2190:       SetImageColorspace(image,GRAYColorspace,exception);",
          "2192:         SetImageAlphaChannel(image,ActivateAlphaChannel,exception);",
          "2193:     }",
          "2194:   else",
          "",
          "[Removed Lines]",
          "2185:           if (image->debug != MagickFalse)",
          "2187:               \"  Image colormap allocated\");",
          "2191:       if (psd_info.channels > 1)",
          "",
          "[Added Lines]",
          "2194:           if (image->debug != MagickFalse)",
          "2196:               \"  Image colormap allocated\");",
          "2200:       if (psd_info.channels > 1)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2218:       else",
          "2219:         {",
          "2220:           size_t",
          "2224:             Read PSD raster colormap.",
          "2226:           number_colors=length/3;",
          "2229:           if (AcquireImageColormap(image,number_colors,exception) == MagickFalse)",
          "2232:             image->colormap[i].red=ScaleCharToQuantum((unsigned char)",
          "2235:             image->colormap[i].green=ScaleCharToQuantum((unsigned char)",
          "2236:               ReadBlobByte(image));",
          "2237:           for (i=0; i < (ssize_t) image->colors; i++)",
          "",
          "[Removed Lines]",
          "2221:             number_colors;",
          "2227:           if (number_colors > 65536)",
          "2228:             ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "2230:             ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "2231:           for (i=0; i < (ssize_t) image->colors; i++)",
          "2233:               ReadBlobByte(image));",
          "2234:           for (i=0; i < (ssize_t) image->colors; i++)",
          "",
          "[Added Lines]",
          "2230:             number_colors;",
          "2236:           if (number_colors > 65536)",
          "2237:             ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "2239:             ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "2240:           for (i=0; i < (ssize_t) image->colors; i++)",
          "2242:               (unsigned char) ReadBlobByte(image));",
          "2243:           for (i=0; i < (ssize_t) image->colors; i++)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2309:           (void) CloseBlob(image);",
          "2310:           image=DestroyImageList(image);",
          "2311:           return((Image *) NULL);",
          "2315:          Skip the rest of the layer and mask information.",
          "",
          "[Removed Lines]",
          "2312:         }",
          "",
          "[Added Lines]",
          "2321:         }",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2340:       \"  reading the precombined layer\");",
          "2341:   imageListLength=GetImageListLength(image);",
          "2342:   if ((has_merged_image != MagickFalse) || (imageListLength == 1))",
          "2344:       &psd_info,exception);",
          "2345:   if ((has_merged_image == MagickFalse) && (imageListLength == 1) &&",
          "2346:       (length != 0))",
          "",
          "[Removed Lines]",
          "2343:     has_merged_image=(MagickBooleanType) ReadPSDMergedImage(image_info,image,",
          "",
          "[Added Lines]",
          "2352:     has_merged_image=(MagickBooleanType) ReadPSDMergedImage(image_info,image,",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2365:       if (imageListLength == 1)",
          "2367:           if (profile != (StringInfo *) NULL)",
          "2368:             profile=DestroyStringInfo(profile);",
          "2369:           ThrowReaderException(CorruptImageError,\"InsufficientImageDataInFile\");",
          "",
          "[Removed Lines]",
          "2366:         {",
          "",
          "[Added Lines]",
          "2375:         {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2488: static inline ssize_t SetPSDOffset(const PSDInfo *psd_info,Image *image,",
          "2490: {",
          "2492:     return(WriteBlobMSBShort(image,(unsigned short) offset));",
          "2493:   return(WriteBlobMSBLong(image,(unsigned int) offset));",
          "2494: }",
          "2496: static inline ssize_t WritePSDOffset(const PSDInfo *psd_info,Image *image,",
          "2497:   const MagickSizeType size,const MagickSizeType offset)",
          "2499:   MagickSizeType",
          "2500:     current_offset;",
          "2502:   ssize_t",
          "2505:   current_offset=TellBlob(image);",
          "2506:   SeekBlob(image,offset,SEEK_SET);",
          "",
          "[Removed Lines]",
          "2489:   const size_t offset)",
          "2491:   if (psd_info->version == 1)",
          "2498: {",
          "2503:     result;",
          "",
          "[Added Lines]",
          "2498:   const size_t offset)",
          "2500:   if (psd_info->version == 1)",
          "2507: {",
          "2512:     result;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2513: }",
          "2515: static inline ssize_t SetPSDSize(const PSDInfo *psd_info,Image *image,",
          "2517: {",
          "2519:     return(WriteBlobLong(image,(unsigned int) size));",
          "2520:   return(WriteBlobLongLong(image,size));",
          "2521: }",
          "2523: static inline ssize_t WritePSDSize(const PSDInfo *psd_info,Image *image,",
          "2524:   const MagickSizeType size,const MagickSizeType offset)",
          "2529:   ssize_t",
          "2530:     result;",
          "",
          "[Removed Lines]",
          "2516:   const MagickSizeType size)",
          "2518:   if (psd_info->version == 1)",
          "2525: {",
          "2526:   MagickSizeType",
          "2527:     current_offset;",
          "",
          "[Added Lines]",
          "2525:   const MagickSizeType size)",
          "2527:   if (psd_info->version == 1)",
          "2534: {",
          "2535:   MagickOffsetType",
          "2536:     current_offset;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2652:   const ssize_t channels)",
          "2653: {",
          "2654:   size_t",
          "2657:   ssize_t",
          "2658:     i,",
          "2659:     y;",
          "2661:   if (compression == RLECompression)",
          "2663:       length=WriteBlobShort(image,RLE);",
          "2664:       for (i=0; i < channels; i++)",
          "2666:           length+=SetPSDOffset(psd_info,image,0);",
          "2667:     }",
          "2668: #ifdef MAGICKCORE_ZLIB_DELEGATE",
          "",
          "[Removed Lines]",
          "2655:     length;",
          "2662:     {",
          "2665:         for (y=0; y < (ssize_t) next_image->rows; y++)",
          "",
          "[Added Lines]",
          "2664:     length;",
          "2671:     {",
          "2674:         for (y=0; y < (ssize_t) next_image->rows; y++)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2672:   else",
          "2673:     length=WriteBlobShort(image,Raw);",
          "2674:   return(length);",
          "2678:   const ImageInfo *image_info,Image *image,Image *next_image,",
          "2679:   const QuantumType quantum_type, unsigned char *compact_pixels,",
          "2680:   MagickOffsetType size_offset,const MagickBooleanType separate,",
          "",
          "[Removed Lines]",
          "2675: }",
          "2677: static size_t WritePSDChannel(const PSDInfo *psd_info,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2692:   register const Quantum",
          "2695:   register ssize_t",
          "2696:     i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2701:   register ssize_t",
          "2702:     i;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2859:     {",
          "2860:       compact_pixels=AcquireCompactPixels(next_image,exception);",
          "2861:       if (compact_pixels == (unsigned char *) NULL)",
          "2863:     }",
          "2864:   channels=1;",
          "2865:   if (separate == MagickFalse)",
          "2866:     {",
          "2867:       if (next_image->storage_class != PseudoClass)",
          "2869:           if (IsImageGray(next_image) == MagickFalse)",
          "2870:             channels=next_image->colorspace == CMYKColorspace ? 4 : 3;",
          "2871:           if (next_image->alpha_trait != UndefinedPixelTrait)",
          "",
          "[Removed Lines]",
          "2862:         return(0);",
          "2868:         {",
          "",
          "[Added Lines]",
          "2871:         return(0);",
          "2872:     }",
          "2878:           if (IsImageGray(next_image) == MagickFalse)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3051:   (void) WriteBlobMSBLong(image,(unsigned int) (y_resolution+0.5));",
          "3056: static inline size_t WriteChannelSize(const PSDInfo *psd_info,Image *image,",
          "3057:   const signed short channel)",
          "",
          "[Removed Lines]",
          "3054: }",
          "",
          "[Added Lines]",
          "3064: }",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3225:       profile=RemoveImageProfile(image,\"psd:additional-info\");",
          "3226:       return(DestroyStringInfo(profile));",
          "3227:     }",
          "3232:   while (remaining_length >= 12)",
          "3233:   {",
          "",
          "[Removed Lines]",
          "3228:   length=GetStringInfoLength(info);",
          "3229:   p=GetStringInfoDatum(info);",
          "3230:   remaining_length=length;",
          "3231:   length=0;",
          "",
          "[Added Lines]",
          "3238:   length=GetStringInfoLength(info);",
          "3239:   p=GetStringInfoDatum(info);",
          "3240:   remaining_length=length;",
          "3241:   length=0;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3261:         if (remaining_length > 0)",
          "3262:           p=(unsigned char *) memmove(p-12,p+size,remaining_length);",
          "3263:         continue;",
          "3265:     length+=(size_t) size+12;",
          "3266:     p+=size;",
          "3267:   }",
          "",
          "[Removed Lines]",
          "3264:       }",
          "",
          "[Added Lines]",
          "3274:       }",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3306:     length,",
          "3307:     name_length,",
          "3308:     rounded_size,",
          "3311:   status=MagickTrue;",
          "3312:   base_image=GetNextImageInList(image);",
          "",
          "[Removed Lines]",
          "3309:     size;",
          "",
          "[Added Lines]",
          "3319:     size;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3341:     unsigned short",
          "3342:       channels,",
          "3345:     mask=(Image *) NULL;",
          "3346:     property=GetImageArtifact(next_image,\"psd:opacity-mask\");",
          "",
          "[Removed Lines]",
          "3343:       total_channels;",
          "",
          "[Added Lines]",
          "3353:       total_channels;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3348:     if (property != (const char *) NULL)",
          "3349:       {",
          "3350:         mask=(Image *) GetImageRegistry(ImageRegistryType,property,exception);",
          "3352:       }",
          "3353:     size+=WriteBlobSignedLong(image,(signed int) next_image->page.y);",
          "3355:     size+=WriteBlobSignedLong(image,(signed int) (next_image->page.y+",
          "3356:       next_image->rows));",
          "3357:     size+=WriteBlobSignedLong(image,(signed int) (next_image->page.x+",
          "",
          "[Removed Lines]",
          "3351:         default_color=strlen(property) == 9 ? 255 : 0;",
          "3354:     size+=WriteBlobSignedLong(image,(signed int) next_image->page.x);",
          "",
          "[Added Lines]",
          "3361:         default_color=(unsigned char) (strlen(property) == 9 ? 255 : 0);",
          "3364:     size+=WriteBlobSignedLong(image,(signed int) next_image->page.x);",
          "3365:     size+=WriteBlobSignedLong(image,(signed int) (next_image->page.y+",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3380:       {",
          "3381:         Quantum",
          "3382:           opacity;",
          "3385:         size+=WriteBlobByte(image,ScaleQuantumToChar(opacity));",
          "3386:         (void) ApplyPSDLayerOpacity(next_image,opacity,MagickTrue,exception);",
          "3387:       }",
          "",
          "[Removed Lines]",
          "3384:         opacity=(Quantum) StringToInteger(property);",
          "",
          "[Added Lines]",
          "3395:         opacity=(Quantum) StringToInteger(property);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3410:     size+=WriteBlobLong(image,(unsigned int) name_length);",
          "3411:     if (mask == (Image *) NULL)",
          "3412:       size+=WriteBlobLong(image,0);",
          "3419:         mask->page.x+=image->page.x;",
          "3421:         size+=WriteBlobSignedLong(image,mask->page.y);",
          "3422:         size+=WriteBlobSignedLong(image,mask->page.x);",
          "3423:         size+=WriteBlobSignedLong(image,(const signed int) mask->rows+",
          "",
          "[Removed Lines]",
          "3413:     else",
          "3414:       {",
          "3415:         if (mask->compose != NoCompositeOp)",
          "3416:           (void) ApplyPSDOpacityMask(next_image,mask,ScaleCharToQuantum(",
          "3417:             default_color),MagickTrue,exception);",
          "3418:         mask->page.y+=image->page.y;",
          "3420:         size+=WriteBlobLong(image,20);",
          "",
          "[Added Lines]",
          "3424:     else",
          "3425:       {",
          "3426:         if (mask->compose != NoCompositeOp)",
          "3427:           (void) ApplyPSDOpacityMask(next_image,mask,ScaleCharToQuantum(",
          "3428:             default_color),MagickTrue,exception);",
          "3429:         mask->page.y+=image->page.y;",
          "3431:         size+=WriteBlobLong(image,20);",
          "3432:         size+=WriteBlobSignedLong(image,(const signed int) mask->page.y);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3464:   (void) WritePSDSize(psd_info,image,rounded_size,size_offset);",
          "3465:   layer_size_offsets=(MagickOffsetType *) RelinquishMagickMemory(",
          "3466:     layer_size_offsets);",
          "3468:     Remove the opacity mask from the registry",
          "3470:   next_image=base_image;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3601:     }",
          "3602:   if ((IsImageGray(image) != MagickFalse) ||",
          "3603:       (image->storage_class == DirectClass) || (image->colors > 256))",
          "3605:   else",
          "3606:     {",
          "3610:       (void) WriteBlobMSBLong(image,768);",
          "3611:       for (i=0; i < (ssize_t) image->colors; i++)",
          "3612:         (void) WriteBlobByte(image,ScaleQuantumToChar(image->colormap[i].red));",
          "3614:         (void) WriteBlobByte(image,0);",
          "3615:       for (i=0; i < (ssize_t) image->colors; i++)",
          "3616:         (void) WriteBlobByte(image,ScaleQuantumToChar(",
          "",
          "[Removed Lines]",
          "3604:     (void) WriteBlobMSBLong(image,0);",
          "3608:         Write PSD raster colormap.",
          "3613:       for ( ; i < 256; i++)",
          "",
          "[Added Lines]",
          "3616:     (void) WriteBlobMSBLong(image,0);",
          "3617:   else",
          "3622:       (void) WriteBlobMSBLong(image,768);",
          "3626:       for ( ; i < 256; i++)",
          "3627:         (void) WriteBlobByte(image,0);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3647:       bim_profile=DestroyStringInfo(bim_profile);",
          "3648:     }",
          "3649:   if (icc_profile != (StringInfo *) NULL)",
          "3652:       (void) WriteBlobMSBShort(image,0x0000040F);",
          "3653:       (void) WriteBlobMSBShort(image,0);",
          "3654:       (void) WriteBlobMSBLong(image,(unsigned int) GetStringInfoLength(",
          "",
          "[Removed Lines]",
          "3650:     {",
          "3651:       (void) WriteBlob(image,4,(const unsigned char *) \"8BIM\");",
          "",
          "[Added Lines]",
          "3664:     {",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3660:         (void) WriteBlobByte(image,0);",
          "3661:     }",
          "3662:   if (status != MagickFalse)",
          "3664:       MagickOffsetType",
          "3665:         size_offset;",
          "",
          "[Removed Lines]",
          "3663:     {",
          "",
          "[Added Lines]",
          "3676:     {",
          "",
          "---------------"
        ]
      }
    }
  ]
}