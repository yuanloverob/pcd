{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cc3f3d1f055e5bce28d7c7fa122ac5f922a7706b",
      "candidate_info": {
        "commit_hash": "cc3f3d1f055e5bce28d7c7fa122ac5f922a7706b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cc3f3d1f055e5bce28d7c7fa122ac5f922a7706b",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "src/pragma.h",
          "src/shell.c.in",
          "test/pragma5.test",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Activate introspection pragmas by default.  The new option SQLITE_OMIT_INTROSPECTION_PRAGMAS must be provided to keep them out.\n\nFossilOrigin-Name: 9c4bca64fb5f635296a8d7d7c1bf2808e02ca734a9983e5cee9132f5352a9a6d",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "src/shell.c.in||src/shell.c.in",
          "test/pragma5.test||test/pragma5.test",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "609: SHELL_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "610: SHELL_OPT += -DSQLITE_ENABLE_OFFSET_SQL_FUNC",
          "611: SHELL_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "613: FUZZERSHELL_OPT = -DSQLITE_ENABLE_JSON1",
          "614: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ",
          "615: FUZZCHECK_OPT += -DSQLITE_MAX_MEMORY=50000000",
          "",
          "[Removed Lines]",
          "612: SHELL_OPT += -DSQLITE_INTROSPECTION_PRAGMAS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "351: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_STMTVTAB=1",
          "352: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBPAGE_VTAB=1",
          "353: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBSTAT_VTAB=1",
          "355: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DESERIALIZE=1",
          "356: !ENDIF",
          "357: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_COLUMN_METADATA=1",
          "",
          "[Removed Lines]",
          "354: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_INTROSPECTION_PRAGMAS=1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "527: SHELL_OPT += -DSQLITE_ENABLE_DBPAGE_VTAB",
          "528: SHELL_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "529: SHELL_OPT += -DSQLITE_ENABLE_OFFSET_SQL_FUNC",
          "531: FUZZERSHELL_OPT = -DSQLITE_ENABLE_JSON1",
          "532: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5",
          "533: FUZZCHECK_OPT += -DSQLITE_MAX_MEMORY=50000000",
          "",
          "[Removed Lines]",
          "530: SHELL_OPT += -DSQLITE_INTROSPECTION_PRAGMAS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: de767376987f7668b0770c4920f1532e341b5a27f797d69c0f5e92b87d036170",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1245:   }",
          "1246:   break;",
          "1249:   case PragTyp_FUNCTION_LIST: {",
          "1250:     int i;",
          "1251:     HashElem *j;",
          "",
          "[Removed Lines]",
          "1248: #ifdef SQLITE_INTROSPECTION_PRAGMAS",
          "",
          "[Added Lines]",
          "1248: #ifndef SQLITE_OMIT_INTROSPECTION_PRAGMAS",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "312: #endif",
          "313: #if !defined(SQLITE_OMIT_SCHEMA_PRAGMAS)",
          "315:  {/* zName:     */ \"function_list\",",
          "",
          "[Removed Lines]",
          "314: #if defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "",
          "[Added Lines]",
          "314: #if !defined(SQLITE_OMIT_INTROSPECTION_PRAGMAS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435: #endif",
          "436: #if !defined(SQLITE_OMIT_SCHEMA_PRAGMAS)",
          "437: #if !defined(SQLITE_OMIT_VIRTUALTABLE)",
          "439:  {/* zName:     */ \"module_list\",",
          "",
          "[Removed Lines]",
          "438: #if defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "",
          "[Added Lines]",
          "438: #if !defined(SQLITE_OMIT_INTROSPECTION_PRAGMAS)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "471: #endif",
          "472: #endif",
          "474:  {/* zName:     */ \"pragma_list\",",
          "",
          "[Removed Lines]",
          "473: #if defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "",
          "[Added Lines]",
          "473: #if !defined(SQLITE_OMIT_INTROSPECTION_PRAGMAS)",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8461:         appendText(&sSelect, \".sqlite_master\", 0);",
          "8462:       }",
          "8463:       sqlite3_finalize(pStmt);",
          "8465:       if( zName ){",
          "8466:         appendText(&sSelect,",
          "8467:            \" UNION ALL SELECT shell_module_schema(name),\"",
          "",
          "[Removed Lines]",
          "8464: #ifdef SQLITE_INTROSPECTION_PRAGMAS",
          "",
          "[Added Lines]",
          "8464: #ifndef SQLITE_OMIT_INTROSPECTION_PRAGMAS",
          "",
          "---------------"
        ],
        "test/pragma5.test||test/pragma5.test": [
          "File: test/pragma5.test -> test/pragma5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "13: # This file implements tests for the PRAGMA command. Specifically,",
          "15: #",
          "17: #",
          "19: set testdir [file dirname $argv0]",
          "",
          "[Removed Lines]",
          "14: # those pragmas enabled at build time by setting:",
          "16: #   -DSQLITE_INTROSPECTION_PRAGMAS",
          "",
          "[Added Lines]",
          "14: # those pragmas that are not disabled at build time by setting:",
          "16: #   -DSQLITE_OMIT_INTROSPECTION_PRAGMAS",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:   FLAG: Result0",
          "265:   COLS: name builtin",
          "266:   IF:   !defined(SQLITE_OMIT_SCHEMA_PRAGMAS)",
          "269:   NAME: module_list",
          "270:   FLAG: Result0",
          "271:   COLS: name",
          "272:   IF:   !defined(SQLITE_OMIT_SCHEMA_PRAGMAS)",
          "273:   IF:   !defined(SQLITE_OMIT_VIRTUALTABLE)",
          "276:   NAME: pragma_list",
          "277:   FLAG: Result0",
          "278:   COLS: name",
          "281:   NAME: collation_list",
          "282:   FLAG: Result0",
          "",
          "[Removed Lines]",
          "267:   IF:   defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "274:   IF:   defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "279:   IF:   defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "",
          "[Added Lines]",
          "267:   IF:   !defined(SQLITE_OMIT_INTROSPECTION_PRAGMAS)",
          "274:   IF:   !defined(SQLITE_OMIT_INTROSPECTION_PRAGMAS)",
          "279:   IF:   !defined(SQLITE_OMIT_INTROSPECTION_PRAGMAS)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "679c9613f61a9af9a2c6c5c9d8295ebe28b9d6c6",
      "candidate_info": {
        "commit_hash": "679c9613f61a9af9a2c6c5c9d8295ebe28b9d6c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/679c9613f61a9af9a2c6c5c9d8295ebe28b9d6c6",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/view.test"
        ],
        "message": "Remove use of the affinity() function from view.test, as it is only available in SQLITE_DEBUG builds.\n\nFossilOrigin-Name: 7f2246a17be9915b3492624a3d8deff56694bdc372f7627e3f16c1869415b1a3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/view.test||test/view.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f5d0436d8dc650cadb61a5fe76fd1a0d68dabba54ff0c2a8c138f9dfbdab1c3f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "733: }",
          "735: do_execsql_test view-27.1 {",
          "737: } {",
          "740: }",
          "742: do_execsql_test view-27.2 { SELECT c0<c1 FROM v0 } 1",
          "",
          "[Removed Lines]",
          "736:   SELECT c0, typeof(c0), affinity(c0), c1, typeof(c1), affinity(c1) FROM v0;",
          "738:   -1   text text",
          "739:    0.0 real none",
          "",
          "[Added Lines]",
          "736:   SELECT c0, typeof(c0), c1, typeof(c1) FROM v0;",
          "738:   -1   text",
          "739:    0.0 real",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1429eca9d44404ef4c051f4a47edbe0d1ef255a6",
      "candidate_info": {
        "commit_hash": "1429eca9d44404ef4c051f4a47edbe0d1ef255a6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1429eca9d44404ef4c051f4a47edbe0d1ef255a6",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtree6.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the RTree extension so that it correctly ignores constraints that it does not understand, even if they are against a dimension column.\n\nFossilOrigin-Name: ed8531e57596f0d5911a05a26d5ae61e1eccfaadee49219d7f6e212cac288238",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtree6.test||ext/rtree/rtree6.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1915:     ){",
          "1916:       u8 op;",
          "1917:       switch( p->op ){",
          "1927:       }",
          "1932:     }",
          "1933:   }",
          "",
          "[Removed Lines]",
          "1918:         case SQLITE_INDEX_CONSTRAINT_EQ: op = RTREE_EQ; break;",
          "1919:         case SQLITE_INDEX_CONSTRAINT_GT: op = RTREE_GT; break;",
          "1920:         case SQLITE_INDEX_CONSTRAINT_LE: op = RTREE_LE; break;",
          "1921:         case SQLITE_INDEX_CONSTRAINT_LT: op = RTREE_LT; break;",
          "1922:         case SQLITE_INDEX_CONSTRAINT_GE: op = RTREE_GE; break;",
          "1923:         default:",
          "1924:           assert( p->op==SQLITE_INDEX_CONSTRAINT_MATCH );",
          "1925:           op = RTREE_MATCH;",
          "1926:           break;",
          "1928:       zIdxStr[iIdx++] = op;",
          "1929:       zIdxStr[iIdx++] = (char)(p->iColumn - 1 + '0');",
          "1930:       pIdxInfo->aConstraintUsage[ii].argvIndex = (iIdx/2);",
          "1931:       pIdxInfo->aConstraintUsage[ii].omit = 1;",
          "",
          "[Added Lines]",
          "1918:         case SQLITE_INDEX_CONSTRAINT_EQ:    op = RTREE_EQ;    break;",
          "1919:         case SQLITE_INDEX_CONSTRAINT_GT:    op = RTREE_GT;    break;",
          "1920:         case SQLITE_INDEX_CONSTRAINT_LE:    op = RTREE_LE;    break;",
          "1921:         case SQLITE_INDEX_CONSTRAINT_LT:    op = RTREE_LT;    break;",
          "1922:         case SQLITE_INDEX_CONSTRAINT_GE:    op = RTREE_GE;    break;",
          "1923:         case SQLITE_INDEX_CONSTRAINT_MATCH: op = RTREE_MATCH; break;",
          "1924:         default:                            op = 0;           break;",
          "1925:       }",
          "1926:       if( op ){",
          "1927:         zIdxStr[iIdx++] = op;",
          "1928:         zIdxStr[iIdx++] = (char)(p->iColumn - 1 + '0');",
          "1929:         pIdxInfo->aConstraintUsage[ii].argvIndex = (iIdx/2);",
          "1930:         pIdxInfo->aConstraintUsage[ii].omit = 1;",
          "",
          "---------------"
        ],
        "ext/rtree/rtree6.test||ext/rtree/rtree6.test": [
          "File: ext/rtree/rtree6.test -> ext/rtree/rtree6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: do_test rtree6-1.2 {",
          "59:   rtree_strategy {SELECT * FROM t1 WHERE x1>10}",
          "60: } {E0}",
          "62: do_test rtree6-1.3 {",
          "63:   rtree_strategy {SELECT * FROM t1 WHERE x1<10}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: do_test rtree6-1.2.1 {",
          "62:   rtree_strategy {SELECT * FROM t1 WHERE x1>10 AND x2 LIKE '%x%'}",
          "63: } {E0}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 99bce4358beb5dbaba47048ee2eec5c376dcd86e5b1462238a37ea4c5f3d77db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ded26a53c4df312e9fd06facbbf70377e969983",
      "candidate_info": {
        "commit_hash": "4ded26a53c4df312e9fd06facbbf70377e969983",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4ded26a53c4df312e9fd06facbbf70377e969983",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h",
          "test/windowerr.tcl",
          "test/windowerr.test"
        ],
        "message": "Prevent aliases of window functions expressions from being used as arguments to aggregate or other window functions.\n\nFossilOrigin-Name: 1e16d3e8fc60d39ca3899759ff15d355fdd7d3e23b325d8d2b0f954e11ce8dce",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/windowerr.tcl||test/windowerr.tcl",
          "test/windowerr.test||test/windowerr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ae70ad2ffd36c27b154940126c5e3ed00c05c0d8761d9320a65a03b1b4e4dc6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "435:             sqlite3ErrorMsg(pParse, \"misuse of aliased aggregate %s\", zAs);",
          "436:             return WRC_Abort;",
          "437:           }",
          "438:           if( sqlite3ExprVectorSize(pOrig)!=1 ){",
          "439:             sqlite3ErrorMsg(pParse, \"row value misused\");",
          "440:             return WRC_Abort;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:           if( (pNC->ncFlags&NC_AllowWin)==0 && ExprHasProperty(pOrig, EP_Win) ){",
          "439:             sqlite3ErrorMsg(pParse, \"misuse of aliased window function %s\",zAs);",
          "440:             return WRC_Abort;",
          "441:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "729:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "730:       zId = pExpr->u.zToken;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "732:       int savedAllowFlags = (pNC->ncFlags & (NC_AllowAgg | NC_AllowWin));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "846:           pNC->nErr++;",
          "847:         }",
          "848:         if( is_agg ){",
          "849: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "851: #else",
          "852:           pNC->ncFlags &= ~NC_AllowAgg;",
          "853: #endif",
          "",
          "[Removed Lines]",
          "850:           pNC->ncFlags &= ~(pExpr->y.pWin ? NC_AllowWin : NC_AllowAgg);",
          "",
          "[Added Lines]",
          "858:           pNC->ncFlags &= ~(NC_AllowWin | (!pExpr->y.pWin ? NC_AllowAgg : 0));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "868:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "869:             pSel->pWin = pExpr->y.pWin;",
          "870:           }",
          "872:         }else",
          "874:         {",
          "",
          "[Removed Lines]",
          "871:           pNC->ncFlags |= NC_AllowWin;",
          "",
          "[Added Lines]",
          "879:           pNC->ncFlags |= NC_HasWin;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "886:             pNC2->ncFlags |= NC_HasAgg | (pDef->funcFlags & SQLITE_FUNC_MINMAX);",
          "888:           }",
          "890:         }",
          "891:       }",
          "",
          "[Removed Lines]",
          "889:           pNC->ncFlags |= NC_AllowAgg;",
          "",
          "[Added Lines]",
          "898:         pNC->ncFlags |= savedAllowFlags;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1648:   Walker w;",
          "1650:   if( pExpr==0 ) return SQLITE_OK;",
          "1653:   w.pParse = pNC->pParse;",
          "1654:   w.xExprCallback = resolveExprStep;",
          "1655:   w.xSelectCallback = resolveSelectStep;",
          "",
          "[Removed Lines]",
          "1651:   savedHasAgg = pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg);",
          "1652:   pNC->ncFlags &= ~(NC_HasAgg|NC_MinMaxAgg);",
          "",
          "[Added Lines]",
          "1659:   savedHasAgg = pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1660:   pNC->ncFlags &= ~(NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1668:   if( pNC->ncFlags & NC_HasAgg ){",
          "1669:     ExprSetProperty(pExpr, EP_Agg);",
          "1670:   }",
          "1671:   pNC->ncFlags |= savedHasAgg;",
          "1672:   return pNC->nErr>0 || w.pParse->nErr>0;",
          "1673: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1679:   if( pNC->ncFlags & NC_HasWin ){",
          "1680:     ExprSetProperty(pExpr, EP_Win);",
          "1681:   }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/windowerr.tcl||test/windowerr.tcl": [
          "File: test/windowerr.tcl -> test/windowerr.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   ) FROM t1 ORDER BY 1",
          "48:   \"",
          "49: }",
          "51: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: errorsql_test 2.1 {",
          "51:   SELECT sum( sum(a) OVER () ) FROM t1;",
          "52: }",
          "54: errorsql_test 2.2 {",
          "55:   SELECT sum(a) OVER () AS xyz FROM t1 ORDER BY sum(xyz);",
          "56: }",
          "",
          "---------------"
        ],
        "test/windowerr.test||test/windowerr.test": [
          "File: test/windowerr.test -> test/windowerr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   ) FROM t1 ORDER BY 1",
          "87: } } } 1",
          "89: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: # PG says ERROR:  aggregate function calls cannot contain window function calls",
          "90: do_test 2.1 { catch { execsql {",
          "91:   SELECT sum( sum(a) OVER () ) FROM t1;",
          "92: } } } 1",
          "94: # PG says ERROR:  column \"xyz\" does not exist",
          "95: do_test 2.2 { catch { execsql {",
          "96:   SELECT sum(a) OVER () AS xyz FROM t1 ORDER BY sum(xyz);",
          "97: } } } 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee751fab4c078ca21fe4821a433060efd585e5ce",
      "candidate_info": {
        "commit_hash": "ee751fab4c078ca21fe4821a433060efd585e5ce",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ee751fab4c078ca21fe4821a433060efd585e5ce",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h",
          "src/vacuum.c",
          "test/vacuum-into.test"
        ],
        "message": "Raise an error if the argument to VACUUM INTO is an identifier.\n\nFossilOrigin-Name: 6c6fb1c6ea452c70b56fd4ac796affebee21512adba0455ae81c291b715f544f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vacuum.c||src/vacuum.c",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 911342f7512145a8a189bb0ec59e70e4c9ddc9f20f3e84816ab25139ead5dc45",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1662: }",
          "1681: ){",
          "1686:   memset(&sNC, 0, sizeof(sNC));",
          "1687:   memset(&sSrc, 0, sizeof(sSrc));",
          "1692:   sNC.pParse = pParse;",
          "1693:   sNC.pSrcList = &sSrc;",
          "1694:   sNC.ncFlags = type;",
          "1697: }",
          "",
          "[Removed Lines]",
          "1675: void sqlite3ResolveSelfReference(",
          "1685:   assert( type==NC_IsCheck || type==NC_PartIdx || type==NC_IdxExpr );",
          "1688:   sSrc.nSrc = 1;",
          "1689:   sSrc.a[0].zName = pTab->zName;",
          "1690:   sSrc.a[0].pTab = pTab;",
          "1691:   sSrc.a[0].iCursor = -1;",
          "1695:   if( sqlite3ResolveExprNames(&sNC, pExpr) ) return;",
          "1696:   if( pList ) sqlite3ResolveExprListNames(&sNC, pList);",
          "",
          "[Added Lines]",
          "1679: int sqlite3ResolveSelfReference(",
          "1688:   int rc;",
          "1690:   assert( type==0 || pTab!=0 );",
          "1691:   assert( type==NC_IsCheck || type==NC_PartIdx || type==NC_IdxExpr || pTab==0 );",
          "1694:   if( pTab ){",
          "1695:     sSrc.nSrc = 1;",
          "1696:     sSrc.a[0].zName = pTab->zName;",
          "1697:     sSrc.a[0].pTab = pTab;",
          "1698:     sSrc.a[0].iCursor = -1;",
          "1699:   }",
          "1703:   if( (rc = sqlite3ResolveExprNames(&sNC, pExpr))!=SQLITE_OK ) return rc;",
          "1704:   if( pList ) rc = sqlite3ResolveExprListNames(&sNC, pList);",
          "1705:   return rc;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4271: int sqlite3ResolveExprNames(NameContext*, Expr*);",
          "4272: int sqlite3ResolveExprListNames(NameContext*, ExprList*);",
          "4273: void sqlite3ResolveSelectNames(Parse*, Select*, NameContext*);",
          "4275: int sqlite3ResolveOrderGroupBy(Parse*, Select*, ExprList*, const char*);",
          "4276: void sqlite3ColumnDefault(Vdbe *, Table *, int, int);",
          "4277: void sqlite3AlterFinishAddColumn(Parse *, Token *);",
          "",
          "[Removed Lines]",
          "4274: void sqlite3ResolveSelfReference(Parse*,Table*,int,Expr*,ExprList*);",
          "",
          "[Added Lines]",
          "4274: int sqlite3ResolveSelfReference(Parse*,Table*,int,Expr*,ExprList*);",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:   }",
          "125:   if( iDb!=1 ){",
          "126:     int iIntoReg = 0;",
          "128:       iIntoReg = ++pParse->nMem;",
          "129:       sqlite3ExprCode(pParse, pInto, iIntoReg);",
          "130:     }",
          "",
          "[Removed Lines]",
          "127:     if( pInto ){",
          "",
          "[Added Lines]",
          "127:     if( pInto && sqlite3ResolveSelfReference(pParse,0,0,pInto,0)==0 ){",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: do_catchsql_test vacuum-into-310 {",
          "66:   VACUUM INTO null;",
          "67: } {1 {non-text filename}}",
          "69: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: do_catchsql_test vacuum-into-320 {",
          "69:   VACUUM INTO x;",
          "70: } {1 {no such column: x}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}