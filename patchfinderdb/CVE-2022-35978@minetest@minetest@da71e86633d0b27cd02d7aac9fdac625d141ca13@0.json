{
  "cve_id": "CVE-2022-35978",
  "cve_desc": "Minetest is a free open-source voxel game engine with easy modding and game creation. In **single player**, a mod can set a global setting that controls the Lua script loaded to display the main menu. The script is then loaded as soon as the game session is exited. The Lua environment the menu runs in is not sandboxed and can directly interfere with the user's system. There are currently no known workarounds.",
  "repo": "minetest/minetest",
  "patch_hash": "da71e86633d0b27cd02d7aac9fdac625d141ca13",
  "patch_info": {
    "commit_hash": "da71e86633d0b27cd02d7aac9fdac625d141ca13",
    "repo": "minetest/minetest",
    "commit_url": "https://github.com/minetest/minetest/commit/da71e86633d0b27cd02d7aac9fdac625d141ca13",
    "files": [
      "src/script/lua_api/l_settings.cpp"
    ],
    "message": "Protect a few more settings from being set from mods\n\nOf those settings main_menu_script has concrete security impact, the rest are added out of abundance of caution.",
    "before_after_code_files": [
      "src/script/lua_api/l_settings.cpp||src/script/lua_api/l_settings.cpp"
    ]
  },
  "patch_diff": {
    "src/script/lua_api/l_settings.cpp||src/script/lua_api/l_settings.cpp": [
      "File: src/script/lua_api/l_settings.cpp -> src/script/lua_api/l_settings.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: static inline int checkSettingSecurity(lua_State* L, const std::string &name)",
      "42: {",
      "43:  if (ScriptApiSecurity::isSecure(L) && name.compare(0, 7, \"secure.\") == 0)",
      "46:  bool is_mainmenu = false;",
      "47: #ifndef SERVER",
      "",
      "[Removed Lines]",
      "44:   throw LuaError(\"Attempt to set secure setting.\");",
      "",
      "[Added Lines]",
      "46:   throw LuaError(\"Attempted to set secure setting.\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54:   return -1;",
      "55:  }",
      "57:  return 0;",
      "58: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59:  const char *disallowed[] = {",
      "60:   \"main_menu_script\", \"shader_path\", \"texture_path\", \"screenshot_path\",",
      "61:   \"serverlist_file\", \"serverlist_url\", \"map-dir\", \"contentdb_url\",",
      "62:  };",
      "63:  if (!is_mainmenu) {",
      "64:   for (const char *name2 : disallowed) {",
      "65:    if (name == name2)",
      "66:     throw LuaError(\"Attempted to set disallowed setting.\");",
      "67:   }",
      "68:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5cd7b0c6e4551fd53171fba8b30ac9f0a4e13a36",
      "candidate_info": {
        "commit_hash": "5cd7b0c6e4551fd53171fba8b30ac9f0a4e13a36",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/5cd7b0c6e4551fd53171fba8b30ac9f0a4e13a36",
        "files": [
          "doc/minetest.6",
          "src/client/renderingengine.cpp",
          "src/client/renderingengine.h"
        ],
        "message": "Remove remains of video mode querying",
        "before_after_code_files": [
          "src/client/renderingengine.cpp||src/client/renderingengine.cpp",
          "src/client/renderingengine.h||src/client/renderingengine.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/luanti-org/luanti/pull/12378"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/client/renderingengine.cpp||src/client/renderingengine.cpp": [
          "File: src/client/renderingengine.cpp -> src/client/renderingengine.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "639: #endif",
          "652: #else // __ANDROID__",
          "653: float RenderingEngine::getDisplayDensity()",
          "654: {",
          "655:  return porting::getDisplayDensity();",
          "656: }",
          "662: #endif // __ANDROID__",
          "",
          "[Removed Lines]",
          "641: v2u32 RenderingEngine::getDisplaySize()",
          "642: {",
          "643:  IrrlichtDevice *nulldevice = createDevice(video::EDT_NULL);",
          "645:  core::dimension2d<u32> deskres =",
          "646:    nulldevice->getVideoModeList()->getDesktopResolution();",
          "647:  nulldevice->drop();",
          "649:  return deskres;",
          "650: }",
          "658: v2u32 RenderingEngine::getDisplaySize()",
          "659: {",
          "660:  return porting::getDisplaySize();",
          "661: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/client/renderingengine.h||src/client/renderingengine.h": [
          "File: src/client/renderingengine.h -> src/client/renderingengine.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:  static const VideoDriverInfo &getVideoDriverInfo(irr::video::E_DRIVER_TYPE type);",
          "57:  static float getDisplayDensity();",
          "60:  bool setupTopLevelWindow(const std::string &name);",
          "61:  void setupTopLevelXorgWindow(const std::string &name);",
          "",
          "[Removed Lines]",
          "58:  static v2u32 getDisplaySize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9a207685a9d55e4fcdd97f5065383e2ec18e114",
      "candidate_info": {
        "commit_hash": "a9a207685a9d55e4fcdd97f5065383e2ec18e114",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/a9a207685a9d55e4fcdd97f5065383e2ec18e114",
        "files": [
          "src/script/lua_api/l_item.cpp"
        ],
        "message": "Reject registering node with empty name\n\nfixes #10769",
        "before_after_code_files": [
          "src/script/lua_api/l_item.cpp||src/script/lua_api/l_item.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/luanti-org/luanti/pull/12378"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/script/lua_api/l_item.cpp||src/script/lua_api/l_item.cpp": [
          "File: src/script/lua_api/l_item.cpp -> src/script/lua_api/l_item.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "595:   if (f.name == \"ignore\")",
          "596:    return 0;",
          "598:   content_t id = ndef->set(f.name, f);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598:   if (f.name.empty())",
          "599:    throw LuaError(\"Cannot register node with empty name\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "261a8db9dd0403f8d0a7d71f46d4cb272e217cd1",
      "candidate_info": {
        "commit_hash": "261a8db9dd0403f8d0a7d71f46d4cb272e217cd1",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/261a8db9dd0403f8d0a7d71f46d4cb272e217cd1",
        "files": [
          "src/server.cpp",
          "src/server.h"
        ],
        "message": "Optimize Server::sendMetadataChanged a bit\n\nThe distance check also never worked as intended, now fixed.",
        "before_after_code_files": [
          "src/server.cpp||src/server.cpp",
          "src/server.h||src/server.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/luanti-org/luanti/pull/12378"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/server.cpp||src/server.cpp": [
          "File: src/server.cpp -> src/server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:   Profiler prof;",
          "896:   while (!m_unsent_map_edit_queue.empty()) {",
          "897:    MapEditEvent* event = m_unsent_map_edit_queue.front();",
          "",
          "[Removed Lines]",
          "894:   std::list<v3s16> node_meta_updates;",
          "",
          "[Added Lines]",
          "894:   std::unordered_set<v3s16> node_meta_updates;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "918:    case MEET_BLOCK_NODE_METADATA_CHANGED: {",
          "919:     prof.add(\"MEET_BLOCK_NODE_METADATA_CHANGED\", 1);",
          "920:     if (!event->is_private_change) {",
          "924:     }",
          "926:     if (MapBlock *block = m_env->getMap().getBlockNoCreateNoEx(",
          "",
          "[Removed Lines]",
          "922:      node_meta_updates.remove(event->p);",
          "923:      node_meta_updates.push_back(event->p);",
          "",
          "[Added Lines]",
          "921:      node_meta_updates.emplace(event->p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "973:   }",
          "977:    sendMetadataChanged(node_meta_updates);",
          "978:  }",
          "",
          "[Removed Lines]",
          "976:   if (node_meta_updates.size())",
          "",
          "[Added Lines]",
          "974:   if (!node_meta_updates.empty())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2290:  }",
          "2291: }",
          "2294: {",
          "2296:  NodeMetadataList meta_updates_list(false);",
          "2299:  ClientInterface::AutoLock clientlock(m_clients);",
          "2301:  for (session_t i : clients) {",
          "",
          "[Removed Lines]",
          "2293: void Server::sendMetadataChanged(const std::list<v3s16> &meta_updates, float far_d_nodes)",
          "2295:  float maxd = far_d_nodes * BS;",
          "2297:  std::vector<session_t> clients = m_clients.getClientIDs();",
          "",
          "[Added Lines]",
          "2291: void Server::sendMetadataChanged(const std::unordered_set<v3s16> &positions, float far_d_nodes)",
          "2294:  std::ostringstream os(std::ios::binary);",
          "2296:  std::vector<session_t> clients = m_clients.getClientIDs();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2303:   if (!client)",
          "2304:    continue;",
          "2310:    NodeMetadata *meta = m_env->getMap().getNodeMetadata(pos);",
          "2312:    if (!meta)",
          "2313:     continue;",
          "2315:    v3s16 block_pos = getNodeBlockPos(pos);",
          "2318:     client->SetBlockNotSent(block_pos);",
          "2319:     continue;",
          "2320:    }",
          "",
          "[Removed Lines]",
          "2306:   ServerActiveObject *player = m_env->getActiveObject(i);",
          "2307:   v3f player_pos = player ? player->getBasePosition() : v3f();",
          "2309:   for (const v3s16 &pos : meta_updates) {",
          "2316:    if (!client->isBlockSent(block_pos) || (player &&",
          "2317:      player_pos.getDistanceFrom(intToFloat(pos, BS)) > maxd)) {",
          "",
          "[Added Lines]",
          "2304:   ServerActiveObject *player = getPlayerSAO(i);",
          "2305:   v3s16 player_pos;",
          "2306:   if (player)",
          "2307:    player_pos = floatToInt(player->getBasePosition(), BS);",
          "2309:   for (const v3s16 pos : positions) {",
          "2316:    if (!client->isBlockSent(block_pos) ||",
          "2317:      player_pos.getDistanceFrom(pos) > far_d_nodes) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2326:    continue;",
          "2330:   meta_updates_list.serialize(os, client->serialization_version, false, true, true);",
          "2338:   meta_updates_list.clear();",
          "2339:  }",
          "",
          "[Removed Lines]",
          "2329:   std::ostringstream os(std::ios::binary);",
          "2331:   std::ostringstream oss(std::ios::binary);",
          "2332:   compressZlib(os.str(), oss);",
          "2334:   NetworkPacket pkt(TOCLIENT_NODEMETA_CHANGED, 0);",
          "2335:   pkt.putLongString(oss.str());",
          "2336:   m_clients.send(i, 0, &pkt, true);",
          "",
          "[Added Lines]",
          "2329:   os.str(\"\");",
          "2331:   std::string raw = os.str();",
          "2332:   os.str(\"\");",
          "2333:   compressZlib(raw, os);",
          "2335:   NetworkPacket pkt(TOCLIENT_NODEMETA_CHANGED, 0, i);",
          "2336:   pkt.putLongString(os.str());",
          "2337:   Send(&pkt);",
          "",
          "---------------"
        ],
        "src/server.h||src/server.h": [
          "File: src/server.h -> src/server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "492:    std::unordered_set<u16> *far_players = nullptr,",
          "493:    float far_d_nodes = 100, bool remove_metadata = true);",
          "496:    float far_d_nodes = 100);",
          "",
          "[Removed Lines]",
          "495:  void sendMetadataChanged(const std::list<v3s16> &meta_updates,",
          "",
          "[Added Lines]",
          "495:  void sendMetadataChanged(const std::unordered_set<v3s16> &positions,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85c824ed136269ee3ee0b650406ce80c8a60c014",
      "candidate_info": {
        "commit_hash": "85c824ed136269ee3ee0b650406ce80c8a60c014",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/85c824ed136269ee3ee0b650406ce80c8a60c014",
        "files": [
          "src/client/client.cpp"
        ],
        "message": "Make sure real disconnect reason isn't overwritten\n\nbug introduced in 2f32044273d107e82fb1c35d4a0f616fa480cdf0",
        "before_after_code_files": [
          "src/client/client.cpp||src/client/client.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/luanti-org/luanti/pull/12378"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/client/client.cpp||src/client/client.cpp": [
          "File: src/client/client.cpp -> src/client/client.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "803:  m_access_denied = true;",
          "804:  if (timeout)",
          "805:   m_access_denied_reason = gettext(\"Connection timed out.\");",
          "807:   m_access_denied_reason = gettext(\"Connection aborted (protocol error?).\");",
          "808: }",
          "",
          "[Removed Lines]",
          "806:  else",
          "",
          "[Added Lines]",
          "806:  else if (m_access_denied_reason.empty())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c6a02941320cb089a5965857866ff064ba986b6",
      "candidate_info": {
        "commit_hash": "0c6a02941320cb089a5965857866ff064ba986b6",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/0c6a02941320cb089a5965857866ff064ba986b6",
        "files": [
          "src/gui/modalMenu.cpp"
        ],
        "message": "Improve a translation string\n\nfixes #11442",
        "before_after_code_files": [
          "src/gui/modalMenu.cpp||src/gui/modalMenu.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/luanti-org/luanti/pull/12378"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/gui/modalMenu.cpp||src/gui/modalMenu.cpp": [
          "File: src/gui/modalMenu.cpp -> src/gui/modalMenu.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:     return retval;",
          "254:    m_jni_field_name = field_name;",
          "258:    std::string label = wide_to_utf8(getLabelByID(hovered->getID()));",
          "259:    if (label.empty())",
          "260:     label = \"text\";",
          "264:    int type = 2;",
          "",
          "[Removed Lines]",
          "257:    std::string message = gettext(\"Enter \");",
          "261:    message += strgettext(label) + \":\";",
          "",
          "[Added Lines]",
          "259:    std::string message = fmtgettext(\"Enter %s:\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}