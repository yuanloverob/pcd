{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "54975cdff9d5e7e4490fbf6012d82143136b1e0b",
      "candidate_info": {
        "commit_hash": "54975cdff9d5e7e4490fbf6012d82143136b1e0b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/54975cdff9d5e7e4490fbf6012d82143136b1e0b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Fix other \"ROWS BETWEEN\" cases on this branch.\n\nFossilOrigin-Name: a5f68f66472610b5beb4fe28669fbbfe83a32742be73cecad9b2ae28f8a17b30",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 093d2b25f1b656bba57d665aac68109436861b157a5769432b612176dae3f6eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1542:   return regArg;",
          "1543: }",
          "",
          "[Removed Lines]",
          "1666: static void windowCodeRowExprStep(",
          "1667:   Parse *pParse,",
          "1668:   Select *p,",
          "1669:   WhereInfo *pWInfo,",
          "1670:   int regGosub,",
          "1671:   int addrGosub",
          "1672: ){",
          "1673:   Window *pMWin = p->pWin;",
          "1674:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1679:   int regArg;",
          "1680:   int addr;",
          "1681:   int csrStart = pParse->nTab++;",
          "1682:   int csrEnd = pParse->nTab++;",
          "1685:   int addrGoto;",
          "1686:   int addrTop;",
          "1687:   int addrIfPos1 = 0;",
          "1688:   int addrIfPos2 = 0;",
          "1689:   int regSize = 0;",
          "1691:   assert( pMWin->eStart==TK_PRECEDING",
          "1692:        || pMWin->eStart==TK_CURRENT",
          "1693:        || pMWin->eStart==TK_FOLLOWING",
          "1694:        || pMWin->eStart==TK_UNBOUNDED",
          "1695:   );",
          "1696:   assert( pMWin->eEnd==TK_FOLLOWING",
          "1697:        || pMWin->eEnd==TK_CURRENT",
          "1698:        || pMWin->eEnd==TK_UNBOUNDED",
          "1699:        || pMWin->eEnd==TK_PRECEDING",
          "1700:   );",
          "1703:   regFlushPart = ++pParse->nMem;",
          "1704:   lblFlushPart = sqlite3VdbeMakeLabel(pParse);",
          "1705:   lblFlushDone = sqlite3VdbeMakeLabel(pParse);",
          "1707:   regStart = ++pParse->nMem;",
          "1708:   regEnd = ++pParse->nMem;",
          "1710:   windowPartitionCache(pParse, p, pWInfo, regFlushPart, lblFlushPart, &regSize);",
          "1712:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1715:   sqlite3VdbeResolveLabel(v, lblFlushPart);",
          "1716:   sqlite3VdbeAddOp2(v, OP_Once, 0, sqlite3VdbeCurrentAddr(v)+3);",
          "1717:   VdbeCoverage(v);",
          "1718:   VdbeComment((v, \"Flush_partition subroutine\"));",
          "1719:   sqlite3VdbeAddOp2(v, OP_OpenDup, csrStart, pMWin->iEphCsr);",
          "1720:   sqlite3VdbeAddOp2(v, OP_OpenDup, csrEnd, pMWin->iEphCsr);",
          "1724:   if( pMWin->pStart ){",
          "1725:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "1726:     windowCheckIntValue(pParse, regStart, 0);",
          "1727:   }",
          "1728:   if( pMWin->pEnd ){",
          "1729:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "1730:     windowCheckIntValue(pParse, regEnd, 1);",
          "1731:   }",
          "1741:   if( pMWin->pEnd && pMWin->eStart==TK_FOLLOWING ){",
          "1742:     assert( pMWin->pStart!=0 );",
          "1743:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "1744:     sqlite3VdbeAddOp3(v, OP_Ge, regStart, sqlite3VdbeCurrentAddr(v)+2, regEnd);",
          "1745:     VdbeCoverageNeverNull(v);",
          "1746:     sqlite3VdbeAddOp2(v, OP_Copy, regSize, regStart);",
          "1747:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regEnd);",
          "1748:   }",
          "1750:   if( pMWin->pStart && pMWin->eEnd==TK_PRECEDING ){",
          "1751:     assert( pMWin->pEnd!=0 );",
          "1752:     assert( pMWin->eStart==TK_PRECEDING );",
          "1753:     sqlite3VdbeAddOp3(v, OP_Le, regStart, sqlite3VdbeCurrentAddr(v)+3, regEnd);",
          "1754:     VdbeCoverageNeverNull(v);",
          "1755:     sqlite3VdbeAddOp2(v, OP_Copy, regSize, regStart);",
          "1756:     sqlite3VdbeAddOp2(v, OP_Copy, regSize, regEnd);",
          "1757:   }",
          "1760:   regArg = windowInitAccum(pParse, pMWin);",
          "1762:   sqlite3VdbeAddOp2(v, OP_Rewind, pMWin->iEphCsr, lblFlushDone);",
          "1763:   VdbeCoverage(v);",
          "1764:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, lblFlushDone);",
          "1765:   VdbeCoverageNeverTaken(v);",
          "1766:   sqlite3VdbeChangeP5(v, 1);",
          "1767:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, lblFlushDone);",
          "1768:   VdbeCoverageNeverTaken(v);",
          "1769:   sqlite3VdbeChangeP5(v, 1);",
          "1774:   addrTop = sqlite3VdbeCurrentAddr(v);",
          "1775:   if( pMWin->eEnd==TK_PRECEDING ){",
          "1776:     addrIfPos1 = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0 , 1);",
          "1777:     VdbeCoverage(v);",
          "1778:   }",
          "1779:   sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+2);",
          "1780:   VdbeCoverage(v);",
          "1781:   addr = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1782:   windowAggStep(pParse, pMWin, csrEnd, 0, regArg, regSize);",
          "1783:   if( pMWin->eEnd==TK_UNBOUNDED ){",
          "1784:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrTop);",
          "1785:     sqlite3VdbeJumpHere(v, addr);",
          "1786:     addrTop = sqlite3VdbeCurrentAddr(v);",
          "1787:   }else{",
          "1788:     sqlite3VdbeJumpHere(v, addr);",
          "1789:     if( pMWin->eEnd==TK_PRECEDING ){",
          "1790:       sqlite3VdbeJumpHere(v, addrIfPos1);",
          "1791:     }",
          "1792:   }",
          "1794:   if( pMWin->eEnd==TK_FOLLOWING ){",
          "1795:     addrIfPos1 = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0 , 1);",
          "1796:     VdbeCoverage(v);",
          "1797:   }",
          "1798:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1799:     addrIfPos2 = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0 , 1);",
          "1800:     VdbeCoverage(v);",
          "1801:   }",
          "1802:   windowAggFinal(pParse, pMWin, 0);",
          "1803:   windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1804:   sqlite3VdbeAddOp2(v, OP_Next, pMWin->iEphCsr, sqlite3VdbeCurrentAddr(v)+2);",
          "1805:   VdbeCoverage(v);",
          "1806:   sqlite3VdbeAddOp2(v, OP_Goto, 0, lblFlushDone);",
          "1807:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1808:     sqlite3VdbeJumpHere(v, addrIfPos2);",
          "1809:   }",
          "1811:   if( pMWin->eStart==TK_CURRENT",
          "1812:    || pMWin->eStart==TK_PRECEDING",
          "1813:    || pMWin->eStart==TK_FOLLOWING",
          "1814:   ){",
          "1815:     int lblSkipInverse = sqlite3VdbeMakeLabel(pParse);;",
          "1816:     if( pMWin->eStart==TK_PRECEDING ){",
          "1817:       sqlite3VdbeAddOp3(v, OP_IfPos, regStart, lblSkipInverse, 1);",
          "1818:       VdbeCoverage(v);",
          "1819:     }",
          "1820:     if( pMWin->eStart==TK_FOLLOWING ){",
          "1821:       sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+2);",
          "1822:       VdbeCoverage(v);",
          "1823:       sqlite3VdbeAddOp2(v, OP_Goto, 0, lblSkipInverse);",
          "1824:     }else{",
          "1825:       sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1826:       VdbeCoverageAlwaysTaken(v);",
          "1827:     }",
          "1828:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, regSize);",
          "1829:     sqlite3VdbeResolveLabel(v, lblSkipInverse);",
          "1830:   }",
          "1831:   if( pMWin->eEnd==TK_FOLLOWING ){",
          "1832:     sqlite3VdbeJumpHere(v, addrIfPos1);",
          "1833:   }",
          "1834:   sqlite3VdbeAddOp2(v, OP_Goto, 0, addrTop);",
          "1837:   sqlite3VdbeResolveLabel(v, lblFlushDone);",
          "1838:   sqlite3VdbeAddOp1(v, OP_ResetSorter, pMWin->iEphCsr);",
          "1839:   sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "1840:   VdbeComment((v, \"end flush_partition subroutine\"));",
          "1843:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1844: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1884:  int regCountdown,",
          "1885:  int jumpOnEof",
          "1886: ){",
          "1887:   int ret = 0;",
          "1888:   Vdbe *v = p->pVdbe;",
          "1889:   int addrIf = 0;",
          "1891:   if( regCountdown>0 ){",
          "1892:     addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "1893:   }",
          "1895:   switch( op ){",
          "1896:     case WINDOW_RETURN_ROW:",
          "1899:       break;",
          "1901:     case WINDOW_AGGINVERSE:",
          "1903:       break;",
          "1905:     case WINDOW_AGGSTEP:",
          "1907:       break;",
          "1908:   }",
          "",
          "[Removed Lines]",
          "1897:       windowAggFinal(p->pParse, p->pMWin, 0);",
          "1898:       windowReturnOneRow(p->pParse, p->pMWin, p->regGosub, p->addrGosub);",
          "1902:       windowAggStep(p->pParse, p->pMWin, csr, 1, p->regArg, p->pMWin->regSize);",
          "1906:       windowAggStep(p->pParse, p->pMWin, csr, 0, p->regArg, p->pMWin->regSize);",
          "",
          "[Added Lines]",
          "1586:   Window *pMWin = p->pMWin;",
          "1593:   if( op==WINDOW_AGGINVERSE && pMWin->eStart==TK_UNBOUNDED ){",
          "1594:     assert( regCountdown==0 && jumpOnEof==0 );",
          "1595:     return 0;",
          "1596:   }",
          "1604:       windowAggFinal(p->pParse, pMWin, 0);",
          "1605:       windowReturnOneRow(p->pParse, pMWin, p->regGosub, p->addrGosub);",
          "1609:       windowAggStep(p->pParse, pMWin, csr, 1, p->regArg, pMWin->regSize);",
          "1613:       windowAggStep(p->pParse, pMWin, csr, 0, p->regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2040:   pParse->nMem += 1 + nSub + 1;",
          "2042:   regFlushPart = ++pParse->nMem;",
          "2046:   assert( pMWin->eStart==TK_PRECEDING",
          "2047:        || pMWin->eStart==TK_CURRENT",
          "",
          "[Removed Lines]",
          "2043:   regStart = ++pParse->nMem;",
          "2044:   regEnd = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "1752:   if( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING ){",
          "1753:     regStart = ++pParse->nMem;",
          "1754:   }",
          "1755:   if( pMWin->eEnd==TK_PRECEDING || pMWin->eEnd==TK_FOLLOWING ){",
          "1756:     regEnd = ++pParse->nMem;",
          "1757:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2108:   s.regArg = regArg = windowInitAccum(pParse, pMWin);",
          "2118:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2119:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2120:     windowAggFinal(pParse, pMWin, 0);",
          "",
          "[Removed Lines]",
          "2110:   sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "2111:   windowCheckIntValue(pParse, regStart, 0);",
          "2112:   sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "2113:   windowCheckIntValue(pParse, regEnd, 1);",
          "2115:   if( pMWin->eStart==pMWin->eEnd",
          "2116:    && pMWin->eStart!=TK_CURRENT && pMWin->eStart!=TK_UNBOUNDED",
          "2117:   ){",
          "",
          "[Added Lines]",
          "1823:   if( regStart ){",
          "1824:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "1825:     windowCheckIntValue(pParse, regStart, 0);",
          "1826:   }",
          "1827:   if( regEnd ){",
          "1828:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "1829:     windowCheckIntValue(pParse, regEnd, 1);",
          "1830:   }",
          "1832:   if( pMWin->eStart==pMWin->eEnd && regStart && regEnd ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2131:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2132:     sqlite3VdbeJumpHere(v, addrGe);",
          "2133:   }",
          "2135:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "2136:   }",
          "2139:   sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1);",
          "2140:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, 1);",
          "",
          "[Removed Lines]",
          "2134:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2138:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);",
          "",
          "[Added Lines]",
          "1849:   if( pMWin->eStart==TK_FOLLOWING && regEnd ){",
          "1850:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "1854:   if( pMWin->eStart!=TK_UNBOUNDED ){",
          "1855:     sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);",
          "1856:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2151:   }",
          "2152:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2153:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2156:   }else",
          "2157:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2158:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, regEnd, 0);",
          "",
          "[Removed Lines]",
          "2154:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 0);",
          "2155:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "",
          "[Added Lines]",
          "1872:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "1873:       windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 0);",
          "1874:       windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "1875:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2161:   }else{",
          "2162:     int addr;",
          "2163:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2168:   }",
          "2169:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep.SECOND_ROW_CODE\"));",
          "",
          "[Removed Lines]",
          "2164:     addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2165:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 0);",
          "2166:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2167:     sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "1884:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "1885:       if( regEnd ) addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1886:       windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 0);",
          "1887:       windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "1888:       if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "1889:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2195:     int addrBreak2;",
          "2196:     int addrBreak3;",
          "2197:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2201:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2202:     sqlite3VdbeJumpHere(v, addrBreak2);",
          "2203:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "",
          "[Removed Lines]",
          "2198:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2199:     addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 1);",
          "2200:     addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 1);",
          "",
          "[Added Lines]",
          "1920:     if( pMWin->eEnd==TK_UNBOUNDED ){",
          "1921:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "1922:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regStart, 1);",
          "1923:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, 0, 1);",
          "1924:     }else{",
          "1925:       assert( pMWin->eEnd==TK_FOLLOWING );",
          "1926:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "1927:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 1);",
          "1928:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 1);",
          "1929:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2706:   }else{",
          "2707:     Window *pWin;",
          "",
          "[Removed Lines]",
          "2691:   if( pMWin->eType==TK_ROWS",
          "2692:    && (pMWin->eStart!=TK_UNBOUNDED||pMWin->eEnd!=TK_CURRENT||!pMWin->pOrderBy)",
          "2693:   ){",
          "2694:     int bCache = windowCachePartition(pMWin);",
          "2695:     if( (pMWin->eEnd!=TK_FOLLOWING   && pMWin->eEnd!=TK_PRECEDING)",
          "2696:      || (pMWin->eStart!=TK_FOLLOWING && pMWin->eStart!=TK_PRECEDING)",
          "2697:     ){",
          "2698:       VdbeModuleComment((pParse->pVdbe, \"Begin RowExprStep()\"));",
          "2699:       windowCodeRowExprStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2700:       VdbeModuleComment((pParse->pVdbe, \"End RowExprStep()\"));",
          "2701:     }else{",
          "2702:       VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep()\"));",
          "2703:       windowCodeStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2704:       VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep()\"));",
          "2705:     }",
          "",
          "[Added Lines]",
          "2420:   if( pMWin->eType==TK_ROWS ){",
          "2421:     VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep()\"));",
          "2422:     windowCodeStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2423:     VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep()\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5be1b20aec9151af799d1294fc8328c8aaa17bd8",
      "candidate_info": {
        "commit_hash": "5be1b20aec9151af799d1294fc8328c8aaa17bd8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5be1b20aec9151af799d1294fc8328c8aaa17bd8",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix problems in fts3 with processing corrupt records and undefined integer overflows.\n\nFossilOrigin-Name: 3b873029ef1903f76442445343af3786cd59ee66b0e5e0e6b76a0b6b1b5eb88a",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:   SQLITE_EXTENSION_INIT1",
          "309: #endif",
          "323: static int fts3EvalNext(Fts3Cursor *pCsr);",
          "324: static int fts3EvalStart(Fts3Cursor *pCsr);",
          "325: static int fts3TermSegReaderCursor(",
          "",
          "[Removed Lines]",
          "318: #ifndef SQLITE_AMALGAMATION",
          "319: # define LARGEST_INT64  (0xffffffff|(((sqlite3_int64)0x7fffffff)<<32))",
          "320: # define SMALLEST_INT64 (((sqlite3_int64)-1) - LARGEST_INT64)",
          "321: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364:   v = (*ptr++);                                               \\",
          "365:   if( (v & mask2)==0 ){ var = v; return ret; }",
          "373:   const unsigned char *p = (const unsigned char*)pBuf;",
          "374:   const unsigned char *pStart = p;",
          "375:   u32 a;",
          "",
          "[Removed Lines]",
          "372: int sqlite3Fts3GetVarint(const char *pBuf, sqlite_int64 *v){",
          "",
          "[Added Lines]",
          "355: int sqlite3Fts3GetVarintU(const char *pBuf, sqlite_uint64 *v){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391:   return (int)(p - pStart);",
          "392: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382: int sqlite3Fts3GetVarint(const char *pBuf, sqlite_int64 *v){",
          "383:   return sqlite3Fts3GetVarintU(pBuf, (sqlite3_uint64*)v);",
          "384: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2496:   if( *pp>=pEnd ){",
          "2498:   }else{",
          "2501:     if( bDescIdx ){",
          "2503:     }else{",
          "2505:     }",
          "2506:   }",
          "2507: }",
          "",
          "[Removed Lines]",
          "2499:     sqlite3_int64 iVal;",
          "",
          "[Added Lines]",
          "2491:     u64 iVal;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2531:   sqlite3_uint64 iWrite;",
          "2532:   if( bDescIdx==0 || *pbFirst==0 ){",
          "2533:     assert_fts3_nc( *pbFirst==0 || iVal>=*piPrev );",
          "2535:   }else{",
          "2536:     assert_fts3_nc( *piPrev>=iVal );",
          "2538:   }",
          "2539:   assert( *pbFirst || *piPrev==0 );",
          "2540:   assert_fts3_nc( *pbFirst==0 || iWrite>0 );",
          "",
          "[Removed Lines]",
          "2534:     iWrite = iVal - *piPrev;",
          "2537:     iWrite = *piPrev - iVal;",
          "",
          "[Added Lines]",
          "2526:     iWrite = (u64)iVal - (u64)*piPrev;",
          "2529:     iWrite = (u64)*piPrev - (u64)iVal;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2556: #define DOCID_CMP(i1, i2) ((bDescDoclist?-1:1) * (i1-i2))",
          "",
          "[Added Lines]",
          "2549: #define DOCID_CMP(i1, i2) ((bDescDoclist?-1:1) * (i1>i2?1:((i1==i2)?0:-1)))",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "196: # define TESTONLY(X)",
          "197: #endif",
          "201: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199: #define LARGEST_INT64  (0xffffffff|(((i64)0x7fffffff)<<32))",
          "200: #define SMALLEST_INT64 (((i64)-1) - LARGEST_INT64)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "578: void sqlite3Fts3ErrMsg(char**,const char*,...);",
          "579: int sqlite3Fts3PutVarint(char *, sqlite3_int64);",
          "580: int sqlite3Fts3GetVarint(const char *, sqlite_int64 *);",
          "581: int sqlite3Fts3GetVarintBounded(const char*,const char*,sqlite3_int64*);",
          "582: int sqlite3Fts3GetVarint32(const char *, int *);",
          "583: int sqlite3Fts3VarintLen(sqlite3_uint64);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584: int sqlite3Fts3GetVarintU(const char *, sqlite_uint64 *);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "696:   assert( !p || p->iLastDocid<=iDocid );",
          "698:   if( !p || p->iLastDocid!=iDocid ){",
          "700:     if( p ){",
          "701:       assert( p->nData<p->nSpace );",
          "702:       assert( p->aData[p->nData]==0 );",
          "",
          "[Removed Lines]",
          "699:     sqlite3_int64 iDelta = iDocid - (p ? p->iLastDocid : 0);",
          "",
          "[Added Lines]",
          "699:     u64 iDelta = (u64)iDocid - (u64)(p ? p->iLastDocid : 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1531:     }else{",
          "1532:       rc = fts3SegReaderRequire(pReader, p, FTS3_VARINT_MAX);",
          "1533:       if( rc==SQLITE_OK ){",
          "1536:         if( pTab->bDescIdx ){",
          "1538:         }else{",
          "1540:         }",
          "1541:       }",
          "1542:     }",
          "1543:   }",
          "1546: }",
          "",
          "[Removed Lines]",
          "1534:         sqlite3_int64 iDelta;",
          "1535:         pReader->pOffsetList = p + sqlite3Fts3GetVarint(p, &iDelta);",
          "1537:           pReader->iDocid -= iDelta;",
          "1539:           pReader->iDocid += iDelta;",
          "1545:   return SQLITE_OK;",
          "",
          "[Added Lines]",
          "1534:         u64 iDelta;",
          "1535:         pReader->pOffsetList = p + sqlite3Fts3GetVarintU(p, &iDelta);",
          "1537:           pReader->iDocid = (i64)((u64)pReader->iDocid - iDelta);",
          "1539:           pReader->iDocid = (i64)((u64)pReader->iDocid + iDelta);",
          "1545:   return rc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2281:     int rc;",
          "2284:     rc = fts3WriteSegment(p, pWriter->iFree++, pWriter->aData, nData);",
          "2285:     if( rc!=SQLITE_OK ) return rc;",
          "2286:     p->nLeafAdd++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2284:     if( pWriter->iFree==LARGEST_INT64 ) return FTS_CORRUPT_VTAB;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2978:           sqlite3_int64 iDelta;",
          "2979:           if( p->bDescIdx && nDoclist>0 ){",
          "2980:             if( iPrev<=iDocid ) return FTS_CORRUPT_VTAB;",
          "2982:           }else{",
          "2983:             if( nDoclist>0 && iPrev>=iDocid ) return FTS_CORRUPT_VTAB;",
          "2985:           }",
          "2987:           nByte = sqlite3Fts3VarintLen(iDelta) + (isRequirePos?nList+1:0);",
          "",
          "[Removed Lines]",
          "2981:             iDelta = iPrev - iDocid;",
          "2984:             iDelta = iDocid - iPrev;",
          "",
          "[Added Lines]",
          "2982:             iDelta = (i64)((u64)iPrev - (u64)iDocid);",
          "2985:             iDelta = (i64)((u64)iDocid - (u64)iPrev);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3264:         csr.zTerm, csr.nTerm, csr.aDoclist, csr.nDoclist);",
          "3265:   }",
          "3266:   if( rc!=SQLITE_OK ) goto finished;",
          "3269:   if( iLevel!=FTS3_SEGCURSOR_PENDING ){",
          "3270:     rc = fts3DeleteSegdir(",
          "",
          "[Removed Lines]",
          "3267:   assert( pWriter || bIgnoreEmpty );",
          "",
          "[Added Lines]",
          "3268:   assert_fts3_nc( pWriter || bIgnoreEmpty );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5191:       i64 iDocid = 0;",
          "5192:       i64 iCol = 0;",
          "5195:       pCsr += sqlite3Fts3GetVarint(pCsr, &iDocid);",
          "5196:       while( pCsr<pEnd ){",
          "5199:         if( pCsr<pEnd ){",
          "5200:           if( iVal==0 || iVal==1 ){",
          "5201:             iCol = 0;",
          "",
          "[Removed Lines]",
          "5193:       i64 iPos = 0;",
          "5197:         i64 iVal = 0;",
          "5198:         pCsr += sqlite3Fts3GetVarint(pCsr, &iVal);",
          "",
          "[Added Lines]",
          "5194:       u64 iPos = 0;",
          "5198:         u64 iVal = 0;",
          "5199:         pCsr += sqlite3Fts3GetVarintU(pCsr, &iVal);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5203:             if( iVal ){",
          "5204:               pCsr += sqlite3Fts3GetVarint(pCsr, &iCol);",
          "5205:             }else{",
          "5207:               if( p->bDescIdx ){",
          "5209:               }else{",
          "5211:               }",
          "5212:             }",
          "5213:           }else{",
          "",
          "[Removed Lines]",
          "5206:               pCsr += sqlite3Fts3GetVarint(pCsr, &iVal);",
          "5208:                 iDocid -= iVal;",
          "5210:                 iDocid += iVal;",
          "",
          "[Added Lines]",
          "5207:               pCsr += sqlite3Fts3GetVarintU(pCsr, &iVal);",
          "5209:                 iDocid = (i64)((u64)iDocid - iVal);",
          "5211:                 iDocid = (i64)((u64)iDocid + iVal);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 052fdf5e58b41ccadaa5aac293ceb4d309ced661d46f3a52be9eb8d01d347a82",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5759: | end crash-74fdbc96edbc04.db",
          "5760: }]} {}",
          "5763:   UPDATE t1 SET b=quote(zeroblob(6.51158946e+5)) WHERE a MATCH '*t*';",
          "5768: } {1 {database disk image is malformed}}",
          "5770: #-------------------------------------------------------------------------",
          "5771: #",
          "5772: reset_db",
          "5774:   CREATE VIRTUAL TABLE f USING fts3(a,b,tokenize=icu);",
          "5775:   CREATE TABLE 'f_docsize'(docid INTEGER PRIMARY KEY, size BLOB);",
          "5776:   CREATE TABLE 'f_stat'(id INTEGER PRIMARY KEY, value BLOB);",
          "",
          "[Removed Lines]",
          "5762: do_execsql_test 32.1 {",
          "5764: } {}",
          "5766: do_catchsql_test 32.2 {",
          "5767:   UPDATE t1 SET b=((- '' )) WHERE a MATCH '0*t';",
          "5773: do_catchsql_test 32.0 {",
          "",
          "[Added Lines]",
          "5762: do_catchsql_test 32.1 {",
          "5766: #do_catchsql_test 32.2 {",
          "5767: #  UPDATE t1 SET b=((- '' )) WHERE a MATCH '0*t';",
          "5768: #} {1 {database disk image is malformed}}",
          "5773: do_catchsql_test 33.0 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5779:   INSERT INTO f(f) VALUES ('merge=198,49');",
          "5780: } {1 {database disk image is malformed}}",
          "5783: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5782: #-------------------------------------------------------------------------",
          "5783: #",
          "5784: reset_db",
          "5785: do_execsql_test 34.0 {",
          "5786:   CREATE VIRTUAL TABLE f USING fts3(a,b);",
          "5787:   INSERT INTO f VALUES (1, '1234');",
          "5788:   INSERT INTO f_segdir VALUES (1,255,0,0,'1 255',x'00');",
          "5789:   UPDATE f_segdir SET level = 0 WHERE level IN (",
          "5790:     SELECT level FROM f_segdir LIMIT 1 OFFSET 1",
          "5791:   );",
          "5792:   INSERT INTO f_segdir VALUES (255,249,0,121,'0 0',x'00');",
          "5793:   INSERT INTO f_content VALUES (255,0,x'ff');",
          "5794:   INSERT INTO f_segdir VALUES (1,255,16,0,'1 255',x'00');",
          "5795: }",
          "5797: do_catchsql_test 34.1 {",
          "5798:   UPDATE f SET b = x'00' WHERE b IN (SELECT b FROM f LIMIT 1 OFFSET 0);",
          "5799: } {1 {database disk image is malformed}}",
          "5801: #-------------------------------------------------------------------------",
          "5802: #",
          "5803: reset_db",
          "5804: do_execsql_test 35.0 {",
          "5805:   CREATE VIRTUAL TABLE f USING fts3(a,b);",
          "5806:   INSERT INTO f_segdir VALUES (1,255,0,0,'1 255',x'0001ff000001ff000001ff000001ff000001ff00c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5bec5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5');",
          "5807: }",
          "5809: do_catchsql_test 35.1 {",
          "5810:   INSERT INTO f(f) VALUES ('integrity-check');",
          "5811: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3722b3abf1da4e9bde859df68e679e00c6829f41",
      "candidate_info": {
        "commit_hash": "3722b3abf1da4e9bde859df68e679e00c6829f41",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3722b3abf1da4e9bde859df68e679e00c6829f41",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "src/vtab.c"
        ],
        "message": "Fix a typo and a harmless compiler warning.\n\nFossilOrigin-Name: ec4c63e00c957f98d61ddc1b9d20406c7e1072d6ab0c12ac6939db6c63d90cb8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e2c6fed8f84929ed51a4e876bb09c85ac4b86a2e4cf0832a7da724bb9f4df5bf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1125: ){",
          "1127:   sqlite3 *db;",
          "1129:   if( argc!=2 ){",
          "",
          "[Removed Lines]",
          "1126:   int rc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: int sqlite3_drop_modules(sqlite3 *db, const char** azNames){",
          "141:   HashElem *pThis, *pNext;",
          "142: #ifdef SQLITE_ENABLE_API_ARMOR",
          "144: #endif",
          "145:   for(pThis=sqliteHashFirst(&db->aModule); pThis; pThis=pNext){",
          "146:     Module *pMod = (Module*)sqliteHashData(pThis);",
          "",
          "[Removed Lines]",
          "143:   if( !sqlite3SafetyCheckOk(db) || zName==0 ) return SQLITE_MISUSE_BKPT;",
          "",
          "[Added Lines]",
          "143:   if( !sqlite3SafetyCheckOk(db) ) return SQLITE_MISUSE_BKPT;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c01f41cfa63e413767101a0e71f54f888e446ab4",
      "candidate_info": {
        "commit_hash": "c01f41cfa63e413767101a0e71f54f888e446ab4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c01f41cfa63e413767101a0e71f54f888e446ab4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Updates to a comment to keep it in alignment to the changes on this branch.\n\nFossilOrigin-Name: 7499f74351415e601eb48eff6b6fccd3a78d137f5ea9cd7cac46b904772966de",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9285899120dec24ff2944431ad455d7ae217ef408ae2f1a3e7bdfb897099028c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ]
      }
    },
    {
      "candidate_hash": "d5deb6b3c4faaf6b6c225f9dd5aa9ca2da81b06c",
      "candidate_info": {
        "commit_hash": "d5deb6b3c4faaf6b6c225f9dd5aa9ca2da81b06c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d5deb6b3c4faaf6b6c225f9dd5aa9ca2da81b06c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/tkt-a7debbe0.test"
        ],
        "message": "Ensure the columns of views and sub-selects in the FROM clause of a select are always assigned implicit collation sequences, just as table columns are. Fix for [a7debbe0].\n\nFossilOrigin-Name: b9ec72203c19c2b95e648ac1dfad74eec98d4ff82581cdc10dc4221ba551728f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb3e2be674316e1d39968eb6567f1fe1b72f9d89af49640a9e83f944979c4cf0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3478:         }",
          "3479:         sqlite3ExprDelete(db, pExpr);",
          "3480:         pExpr = pNew;",
          "3481:       }",
          "3482:     }",
          "3483:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3485:         if( pSubst->bFlattener && pExpr ){",
          "3486:           if( pExpr->op!=TK_COLUMN && pExpr->op!=TK_COLLATE ){",
          "3487:             CollSeq *pColl = sqlite3ExprCollSeq(pSubst->pParse, pExpr);",
          "3488:             pExpr = sqlite3ExprAddCollateString(pSubst->pParse, pExpr,",
          "3489:                 (pColl ? pColl->zName : \"BINARY\")",
          "3490:             );",
          "3491:           }",
          "3492:           ExprClearProperty(pExpr, EP_Collate);",
          "3493:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4043:       x.iNewTable = iNewParent;",
          "4044:       x.isLeftJoin = isLeftJoin;",
          "4045:       x.pEList = pSub->pEList;",
          "4046:       substSelect(&x, pParent, 0);",
          "4047:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4059:       x.bFlattener = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4368:       x.iNewTable = iCursor;",
          "4369:       x.isLeftJoin = 0;",
          "4370:       x.pEList = pSubq->pEList;",
          "4371:       pNew = substExpr(&x, pNew);",
          "4372:       if( pSubq->selFlags & SF_Aggregate ){",
          "4373:         pSubq->pHaving = sqlite3ExprAnd(pParse, pSubq->pHaving, pNew);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4385:       x.bFlattener = 0;",
          "",
          "---------------"
        ],
        "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test": [
          "File: test/tkt-a7debbe0.test -> test/tkt-a7debbe0.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library. In particular,",
          "12: # that problems related to ticket a7debbe0ad1 have been fixed.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix tkt-a7debbe0",
          "19: foreach tn {1 2} {",
          "20:   reset_db",
          "21:   if {$tn==1} {",
          "22:     # Disable the flattener",
          "23:     optimization_control db query-flattener 0",
          "24:   } else {",
          "25:     # Enable the flattener",
          "26:     optimization_control db query-flattener 1",
          "27:   }",
          "29:   do_execsql_test $tn.1.0 {",
          "30:     CREATE TABLE t0(xyz INTEGER);",
          "31:     INSERT INTO t0(xyz) VALUES(456);",
          "32:     CREATE VIEW v2(a, B) AS",
          "33:         SELECT 'a', 'B' COLLATE NOCASE FROM t0;",
          "34:     CREATE TABLE t2(a, B COLLATE NOCASE);",
          "35:     INSERT INTO t2 VALUES('a', 'B');",
          "36:     CREATE VIEW v3(a, B) AS",
          "37:         SELECT 'a' COLLATE BINARY, 'B' COLLATE NOCASE FROM t0;",
          "39:     CREATE VIEW v4(a, B) AS",
          "40:         SELECT 'a', +CAST('B' COLLATE NOCASE AS TEXT) FROM t0;",
          "42:     CREATE VIEW v5(a, B) AS",
          "43:         SELECT 'a', ('B' COLLATE NOCASE) || '' FROM t0;",
          "44:   }",
          "46:   # Table t2 and views v2 through v5 should all be equivalent.",
          "47:   do_execsql_test $tn.1.1.1 { SELECT a   >= B FROM t2;         } 1",
          "48:   do_execsql_test $tn.1.1.2 { SELECT 'a' >= 'B' COLLATE NOCASE } 0",
          "49:   do_execsql_test $tn.1.1.3 { SELECT a   >= B FROM v2          } 1",
          "50:   do_execsql_test $tn.1.1.4 { SELECT a   >= B FROM v3          } 1",
          "51:   do_execsql_test $tn.1.1.5 { SELECT a   >= B FROM v4          } 1",
          "52:   do_execsql_test $tn.1.1.6 { SELECT a   >= B FROM v5          } 1",
          "54:   do_execsql_test $tn.1.2.1 { SELECT B   < a FROM t2           } 0",
          "55:   do_execsql_test $tn.1.2.2 { SELECT 'B' COLLATE NOCASE < 'a'  } 0",
          "56:   do_execsql_test $tn.1.2.3 { SELECT B   < a FROM v2           } 0",
          "57:   do_execsql_test $tn.1.2.4 { SELECT B   < a FROM v3           } 0",
          "58:   do_execsql_test $tn.1.2.5 { SELECT a  < B FROM v4           } 0",
          "59:   do_execsql_test $tn.1.2.6 { SELECT a  < B FROM v5           } 0",
          "61:   #-------------------------------------------------------------------------",
          "62:   do_execsql_test $tn.2.0 {",
          "63:     CREATE TABLE t5(a, b COLLATE NOCASE);",
          "64:     INSERT INTO t5 VALUES(1, 'XYZ');",
          "65:   }",
          "67:   # Result should be 0, as column \"xyz\" from the sub-query has implicit",
          "68:   # collation sequence BINARY.",
          "69:   do_execsql_test $tn.2.1 {",
          "70:     SELECT xyz==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "71:   } {0}",
          "73:   # Result should be 1, as literal 'xyz' has no collation sequence, so",
          "74:   # the comparison uses the implicit collation sequence of the RHS - NOCASE.",
          "75:   do_execsql_test $tn.2.2 {",
          "76:     SELECT 'xyz'==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "77:   } {1}",
          "79:   #-----------------------------------------------------------------------",
          "80:   # The test case submitted with the ticket.",
          "81:   #",
          "82:   do_execsql_test $tn.3.0 {",
          "83:     DROP TABLE t0;",
          "84:     DROP VIEW v2;",
          "86:     CREATE TABLE t0(c0);",
          "87:     INSERT INTO t0(c0) VALUES('');",
          "88:     CREATE VIEW v2(c0, c1) AS",
          "89:         SELECT 'B' COLLATE NOCASE, 'a' FROM t0 ORDER BY t0.c0;",
          "90:     SELECT SUM(count) FROM (",
          "91:       SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2",
          "92:     );",
          "93:   } 1",
          "95:   # The result is 1, as the collation used is the implicit collation sequence",
          "96:   # of v2.c1 - BINARY.",
          "97:   do_execsql_test $tn.3.1 {",
          "98:     SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2;",
          "99:   } 1",
          "100: }",
          "102: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}