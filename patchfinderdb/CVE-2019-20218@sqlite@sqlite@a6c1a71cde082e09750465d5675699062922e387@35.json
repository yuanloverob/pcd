{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ebc64084847c7d3c96aa8aaaebbcd74f3472b1c4",
      "candidate_info": {
        "commit_hash": "ebc64084847c7d3c96aa8aaaebbcd74f3472b1c4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ebc64084847c7d3c96aa8aaaebbcd74f3472b1c4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Alternative implementation of the previous check-in which is testable.\n\nFossilOrigin-Name: 102ef64462cf0d78395ccc7ebb8e3bf6b7647c06b7657a037e051697bc08d6b7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6a204b192a6c6f21988cab217366f21b14c672b81ceadc43675761a6d8c4484f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4956:     ){",
          "4957:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "4958:       if( pA->op2!=pB->op2 ) return 2;",
          "4961:        && (pA->iTable!=iTab || NEVER(pB->iTable>=0)) ) return 2;",
          "4962:     }",
          "4963:   }",
          "",
          "[Removed Lines]",
          "4959:       if( pA->iTable!=pB->iTable",
          "4960:        && pA->op!=TK_IN",
          "",
          "[Added Lines]",
          "4959:       if( pA->op!=TK_IN",
          "4960:        && pA->iTable!=pB->iTable",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "554a19dbeef3c45d5f52c540a79920403c54170a",
      "candidate_info": {
        "commit_hash": "554a19dbeef3c45d5f52c540a79920403c54170a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/554a19dbeef3c45d5f52c540a79920403c54170a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/insert.test"
        ],
        "message": "Make sure the btree cursor overflow cache is cleared when overwriting a cell in sqlite3BtreeInsert().  Ticket [3cf9bb227e9a5d32]\n\nFossilOrigin-Name: 7dae7b969ed314605a3a2da2cfdce4d81152740f5d3bfbc2a6e311b13ee325a7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/insert.test||test/insert.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 636ca4472c9f41eb3989f28854d4968867837399a2092f389d1b814d98cccbae",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8716:       memcpy(newCell, oldCell, 4);",
          "8717:     }",
          "8718:     rc = clearCell(pPage, oldCell, &info);",
          "8719:     if( info.nSize==szNew && info.nLocal==info.nPayload",
          "8720:      && (!ISAUTOVACUUM || szNew<pPage->minLocal)",
          "8721:     ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8719:     testcase( pCur->curFlags & BTCF_ValidOvfl );",
          "8720:     invalidateOverflowCache(pCur);",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "461: integrity_check insert-99.0",
          "463: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463: # 2019-08-12.",
          "464: #",
          "465: do_execsql_test insert-15.1 {",
          "466:   DROP TABLE IF EXISTS t1;",
          "467:   DROP TABLE IF EXISTS t2;",
          "468:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b TEXT);",
          "469:   CREATE INDEX i1 ON t1(b);",
          "470:   CREATE TABLE t2(a, b);",
          "471:   INSERT INTO t2 VALUES(4, randomblob(31000));",
          "472:   INSERT INTO t2 VALUES(4, randomblob(32000));",
          "473:   INSERT INTO t2 VALUES(4, randomblob(33000));",
          "474:   REPLACE INTO t1 SELECT a, b FROM t2;",
          "475:   SELECT a, length(b) FROM t1;",
          "476: } {4 33000}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "451297752c90784f42e5d16b6ccd816fce4a3139",
      "candidate_info": {
        "commit_hash": "451297752c90784f42e5d16b6ccd816fce4a3139",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/451297752c90784f42e5d16b6ccd816fce4a3139",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "manifest",
          "manifest.uuid",
          "test/fts3snippet.test"
        ],
        "message": "Fix problems causing undefined left-shift operations in the fts3 snippet() function.\n\nFossilOrigin-Name: b90dbaed3092236e97f9796fa63989a3648060e16189e1267c430f4a7e799fac",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3snippet.test||test/fts3snippet.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:         int j;",
          "434:         u64 mPhrase = (u64)1 << i;",
          "435:         u64 mPos = (u64)1 << (iCsr - iStart);",
          "437:         if( (mCover|mCovered)&mPhrase ){",
          "438:           iScore++;",
          "439:         }else{",
          "",
          "[Removed Lines]",
          "436:         assert( iCsr>=iStart );",
          "",
          "[Added Lines]",
          "436:         assert( iCsr>=iStart && (iCsr - iStart)<=64 );",
          "437:         assert( i>=0 && i<=64 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "661:     for(nLeft=0; !(hlmask & ((u64)1 << nLeft)); nLeft++);",
          "662:     for(nRight=0; !(hlmask & ((u64)1 << (nSnippet-1-nRight))); nRight++);",
          "663:     nDesired = (nLeft-nRight)/2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "664:     assert( (nSnippet-1-nRight)<=63 && (nSnippet-1-nRight)>=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1433:     return;",
          "1434:   }",
          "1436:   for(nSnippet=1; 1; nSnippet++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1439:   if( nToken<-64 ) nToken = -64;",
          "1440:   if( nToken>+64 ) nToken = +64;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b352f1590d20a574b0681e011ececcf4f41fa5b157503d330e03939404aca0e9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3snippet.test||test/fts3snippet.test": [
          "File: test/fts3snippet.test -> test/fts3snippet.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "555:   }]",
          "556: } {64}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "558: do_test 4.3 {",
          "559:   llength [db one {",
          "560:     SELECT snippet(t4, '', '', '', 0, 150) FROM t4 WHERE t4 MATCH 'E'",
          "561:   }]",
          "562: } {64}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ecf928ea99e8a8d200e4409d5cf477652cd975f",
      "candidate_info": {
        "commit_hash": "2ecf928ea99e8a8d200e4409d5cf477652cd975f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2ecf928ea99e8a8d200e4409d5cf477652cd975f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "More details on the comment justifying the aleged data race in the WAL-mode checkpoint logic.\n\nFossilOrigin-Name: 0fab65c79f675c825ed7e85c82b65ce6f990c9d0796ebb3886942d241df7b268",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 08f09dc4f986a27f4e4e69f8226dbfaf0cfe1269cefc2830bf0fbef7b9bbda48",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c"
        ]
      }
    },
    {
      "candidate_hash": "9930cfe878dfedf36ff4010a3781ba1758308c28",
      "candidate_info": {
        "commit_hash": "9930cfe878dfedf36ff4010a3781ba1758308c28",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9930cfe878dfedf36ff4010a3781ba1758308c28",
        "files": [
          "ext/fts3/fts3_write.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid",
          "test/altertab3.test",
          "test/fts3misc.test"
        ],
        "message": "Fix a problem in fts3 causing it to report corruption if a doclist contains consectutive rowid entries that differ by more than 2^63.\n\nFossilOrigin-Name: 0b0a3048f9df88bbc8979f2ac5247bee7d7bc1e585faca252610d2fcbe36d51d",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid",
          "test/altertab3.test||test/altertab3.test",
          "test/fts3misc.test||test/fts3misc.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2967:           sqlite3_int64 iDelta;",
          "2968:           if( p->bDescIdx && nDoclist>0 ){",
          "2969:             iDelta = iPrev - iDocid;",
          "2970:           }else{",
          "2971:             iDelta = iDocid - iPrev;",
          "2972:           }",
          "2978:           nByte = sqlite3Fts3VarintLen(iDelta) + (isRequirePos?nList+1:0);",
          "2979:           if( nDoclist+nByte>pCsr->nBuffer ){",
          "",
          "[Removed Lines]",
          "2973:           if( iDelta<=0 && (nDoclist>0 || iDelta!=iDocid) ){",
          "2974:             return FTS_CORRUPT_VTAB;",
          "2975:           }",
          "2976:           assert( nDoclist>0 || iDelta==iDocid );",
          "",
          "[Added Lines]",
          "2969:             if( iPrev<=iDocid ) return FTS_CORRUPT_VTAB;",
          "2972:             if( nDoclist>0 && iPrev>=iDocid ) return FTS_CORRUPT_VTAB;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:   INSERT INTO vt0(c0) VALUES (x'd1');",
          "227: }",
          "230: do_execsql_test 8.1 {",
          "231:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "232: }",
          "235: finish_test",
          "",
          "[Removed Lines]",
          "229: breakpoint",
          "",
          "[Added Lines]",
          "233: #-------------------------------------------------------------------------",
          "234: #",
          "235: reset_db",
          "236: do_execsql_test 9.0 {",
          "237:   CREATE VIRTUAL TABLE t1 using FTS5(mailcontent);",
          "238:   insert into t1(rowid, mailcontent) values",
          "239:       (-4764623217061966105, 'we are going to upgrade'),",
          "240:       (8324454597464624651, 'we are going to upgrade');",
          "241: }",
          "243: do_execsql_test 9.1 {",
          "244:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "245: }",
          "247: do_execsql_test 9.2 {",
          "248:   SELECT rowid FROM t1('upgrade');",
          "249: } {",
          "250:   -4764623217061966105 8324454597464624651",
          "251: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f4285297e1e7ebef90bfc0f71402a4e1726d31bc15b69fec13a1f0d98fed1f08",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:   END}",
          "382: }",
          "385: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383: #-------------------------------------------------------------------------",
          "384: reset_db",
          "385: do_execsql_test 18.1 {",
          "386:   CREATE TABLE t1(a,b);",
          "387:   CREATE TRIGGER r1 AFTER INSERT ON t1 BEGIN",
          "388:     SELECT a, b FROM t1",
          "389:     INTERSECT SELECT b,a FROM t1",
          "390:     ORDER BY b IN (",
          "391:         SELECT a UNION SELECT b",
          "392:         FROM t1",
          "393:         ORDER BY b COLLATE nocase",
          "394:         )",
          "395:     ;",
          "396:   END;",
          "397: }",
          "399: do_catchsql_test 18.2 {",
          "400:     SELECT a, b FROM t1",
          "401:     INTERSECT",
          "402:     SELECT b,a FROM t1",
          "403:     ORDER BY b IN (",
          "404:         SELECT a UNION SELECT b",
          "405:         FROM t1",
          "406:         ORDER BY b COLLATE nocase",
          "407:         );",
          "408: } {1 {1st ORDER BY term does not match any column in the result set}}",
          "410: do_catchsql_test 18.3 {",
          "411:   ALTER TABLE t1 RENAME TO t1x;",
          "412: } {1 {error in trigger r1: 1st ORDER BY term does not match any column in the result set}}",
          "",
          "---------------"
        ],
        "test/fts3misc.test||test/fts3misc.test": [
          "File: test/fts3misc.test -> test/fts3misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "284: }",
          "286: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286: #-------------------------------------------------------------------------",
          "287: #",
          "288: reset_db",
          "289: do_execsql_test 9.0 {",
          "290:   CREATE VIRTUAL TABLE t1 using fts4(mailcontent);",
          "291:   insert into t1(rowid, mailcontent) values",
          "292:       (-4764623217061966105, 'we are going to upgrade'),",
          "293:       (8324454597464624651, 'we are going to upgrade');",
          "294: }",
          "296: do_execsql_test 9.1 {",
          "297:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "298: }",
          "300: do_execsql_test 9.2 {",
          "301:   SELECT rowid FROM t1 WHERE t1 MATCH 'upgrade';",
          "302: } {",
          "303:   -4764623217061966105 8324454597464624651",
          "304: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}