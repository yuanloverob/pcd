{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "31999c5cac3b01dc8a17a9148f8129d33109e240",
      "candidate_info": {
        "commit_hash": "31999c5cac3b01dc8a17a9148f8129d33109e240",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31999c5cac3b01dc8a17a9148f8129d33109e240",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/malloc.c",
          "src/pragma.c",
          "test/fuzzcheck.c",
          "test/ossfuzz.c",
          "test/tester.tcl"
        ],
        "message": "Fix a bug in the hard_heap_limit pragma so that it returns the new value of the hard_heap_limit, not the soft_heap_limit.  Change SQLITE_MAX_MEMORY so that it works by setting the default hard_heap_limit value.\n\nFossilOrigin-Name: 33fd0c3abcad5555a150990a22d9c1bab99e79be01143fccb9fafc9b52cf92c8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/malloc.c||src/malloc.c",
          "src/pragma.c||src/pragma.c",
          "test/fuzzcheck.c||test/fuzzcheck.c",
          "test/ossfuzz.c||test/ossfuzz.c",
          "test/tester.tcl||test/tester.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b8a631fd30d0732505679230684b3362c965438197a2b11518f01a77599c9202",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #endif",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #ifndef SQLITE_MAX_MEMORY",
          "39: # define SQLITE_MAX_MEMORY 0",
          "40: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   int nearlyFull;",
          "50: #define mem0 GLOBAL(struct Mem0Global, mem0)",
          "",
          "[Removed Lines]",
          "48: } mem0 = { 0, 0, 0 };",
          "",
          "[Added Lines]",
          "55: } mem0 = { 0, SQLITE_MAX_MEMORY, SQLITE_MAX_MEMORY, 0 };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "233:   nFull = sqlite3GlobalConfig.m.xRoundup(n);",
          "242:   sqlite3StatusHighwater(SQLITE_STATUS_MALLOC_SIZE, n);",
          "243:   if( mem0.alarmThreshold>0 ){",
          "244:     sqlite3_int64 nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "",
          "[Removed Lines]",
          "235: #ifdef SQLITE_MAX_MEMORY",
          "236:   if( sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED)+nFull>SQLITE_MAX_MEMORY ){",
          "238:     return;",
          "239:   }",
          "240: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2106:       sqlite3_int64 iPrior = sqlite3_hard_heap_limit64(-1);",
          "2107:       if( N>0 && (iPrior==0 || iPrior>N) ) sqlite3_hard_heap_limit64(N);",
          "2108:     }",
          "2110:     break;",
          "2111:   }",
          "",
          "[Removed Lines]",
          "2109:     returnSingleInt(v, sqlite3_soft_heap_limit64(-1));",
          "",
          "[Added Lines]",
          "2109:     returnSingleInt(v, sqlite3_hard_heap_limit64(-1));",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "454: static int lengthLimit = 1000000;",
          "457: static int vdbeOpLimit = 25000;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457: static sqlite3_int64 heapLimit = 1000000000;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "777:   if( lengthLimit>0 ){",
          "778:     sqlite3_limit(cx.db, SQLITE_LIMIT_LENGTH, lengthLimit);",
          "779:   }",
          "781:   if( nDb>=20 && aDb[18]==2 && aDb[19]==2 ){",
          "782:     aDb[18] = aDb[19] = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "783:   sqlite3_hard_heap_limit64(heapLimit);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1391:         infoFlag = 1;",
          "1392:       }else",
          "1393:       if( strcmp(z,\"limit-mem\")==0 ){",
          "1398:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1399:         nMem = integerValue(argv[++i]);",
          "1401:       }else",
          "1402:       if( strcmp(z,\"limit-vdbe\")==0 ){",
          "1403:         vdbeLimitFlag = 1;",
          "",
          "[Removed Lines]",
          "1394: #if !defined(SQLITE_ENABLE_MEMSYS3) && !defined(SQLITE_ENABLE_MEMSYS5)",
          "1395:         fatalError(\"the %s option requires -DSQLITE_ENABLE_MEMSYS5 or _MEMSYS3\",",
          "1396:                    argv[i]);",
          "1397: #else",
          "1400: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1586:           ossFuzzThisDb = sqlite3_column_int(pStmt,1);",
          "1587:           if( verboseFlag ) printf(\"Config: oss-fuzz=%d\\n\", ossFuzzThisDb);",
          "1588:         }",
          "1594:           nMemThisDb = sqlite3_column_int(pStmt,1);",
          "1595:           if( verboseFlag ) printf(\"Config: limit-mem=%d\\n\", nMemThisDb);",
          "1597:         }",
          "1598:       }",
          "1599:       sqlite3_finalize(pStmt);",
          "",
          "[Removed Lines]",
          "1589:         if( strcmp(zName, \"limit-mem\")==0 && !nativeMalloc ){",
          "1590: #if !defined(SQLITE_ENABLE_MEMSYS3) && !defined(SQLITE_ENABLE_MEMSYS5)",
          "1591:           fatalError(\"the limit-mem option requires -DSQLITE_ENABLE_MEMSYS5\"",
          "1592:                      \" or _MEMSYS3\");",
          "1593: #else",
          "1596: #endif",
          "",
          "[Added Lines]",
          "1588:         if( strcmp(zName, \"limit-mem\")==0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1722:     sqlite3_shutdown();",
          "1727:       }",
          "1729:     }",
          "",
          "[Removed Lines]",
          "1723:     if( nMemThisDb>0 && !nativeMalloc ){",
          "1724:       pHeap = realloc(pHeap, nMemThisDb);",
          "1725:       if( pHeap==0 ){",
          "1726:         fatalError(\"failed to allocate %d bytes of heap memory\", nMem);",
          "1728:       sqlite3_config(SQLITE_CONFIG_HEAP, pHeap, nMemThisDb, 128);",
          "",
          "[Added Lines]",
          "1717:     if( nMemThisDb>0 && nMem==0 ){",
          "1718:       if( !nativeMalloc ){",
          "1719:         pHeap = realloc(pHeap, nMemThisDb);",
          "1720:         if( pHeap==0 ){",
          "1721:           fatalError(\"failed to allocate %d bytes of heap memory\", nMem);",
          "1722:         }",
          "1723:         sqlite3_config(SQLITE_CONFIG_HEAP, pHeap, nMemThisDb, 128);",
          "1724:       }else{",
          "1725:         sqlite3_hard_heap_limit64((sqlite3_int64)nMemThisDb);",
          "1727:     }else{",
          "1728:       sqlite3_hard_heap_limit64(0);",
          "",
          "---------------"
        ],
        "test/ossfuzz.c||test/ossfuzz.c": [
          "File: test/ossfuzz.c -> test/ossfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:   sqlite3_limit(cx.db, SQLITE_LIMIT_VDBE_OP, 25000);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:   sqlite3_hard_heap_limit64(20000000);",
          "",
          "---------------"
        ],
        "test/tester.tcl||test/tester.tcl": [
          "File: test/tester.tcl -> test/tester.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:   puts {Options:",
          "389:   --pause                  Wait for user input before continuing",
          "390:   --soft-heap-limit=N      Set the soft-heap-limit to N",
          "391:   --maxerror=N             Quit after N errors",
          "392:   --verbose=(0|1)          Control the amount of output.  Default '1'",
          "393:   --output=FILE            set --verbose=2 and output to FILE.  Implies -q",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:   --hard-heap-limit=N      Set the hard-heap-limit to N",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "408:   #",
          "409:   #   --pause",
          "410:   #   --soft-heap-limit=NN",
          "411:   #   --maxerror=NN",
          "412:   #   --malloctrace=N",
          "413:   #   --backtrace=N",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412:   #   --hard-heap-limit=NN",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "424:   #   --help",
          "425:   #",
          "426:   set cmdlinearg(soft-heap-limit)    0",
          "427:   set cmdlinearg(maxerror)        1000",
          "428:   set cmdlinearg(malloctrace)        0",
          "429:   set cmdlinearg(backtrace)         10",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429:   set cmdlinearg(hard-heap-limit)    0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "450:       {^-+soft-heap-limit=.+$} {",
          "451:         foreach {dummy cmdlinearg(soft-heap-limit)} [split $a =] break",
          "452:       }",
          "453:       {^-+maxerror=.+$} {",
          "454:         foreach {dummy cmdlinearg(maxerror)} [split $a =] break",
          "455:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "456:       {^-+hard-heap-limit=.+$} {",
          "457:         foreach {dummy cmdlinearg(hard-heap-limit)} [split $a =] break",
          "458:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "586: # way if an individual test file changes the soft-heap-limit, it",
          "587: # will be reset at the start of the next test file.",
          "588: #",
          "591: # Create a test database",
          "592: #",
          "",
          "[Removed Lines]",
          "589: sqlite3_soft_heap_limit $cmdlinearg(soft-heap-limit)",
          "",
          "[Added Lines]",
          "595: sqlite3_soft_heap_limit64 $cmdlinearg(soft-heap-limit)",
          "596: sqlite3_hard_heap_limit64 $cmdlinearg(hard-heap-limit)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1207:   db close",
          "1208:   sqlite3_reset_auto_extension",
          "1211:   set nTest [incr_ntest]",
          "1212:   set nErr [set_test_counter errors]",
          "",
          "[Removed Lines]",
          "1210:   sqlite3_soft_heap_limit 0",
          "",
          "[Added Lines]",
          "1217:   sqlite3_soft_heap_limit64 0",
          "1218:   sqlite3_hard_heap_limit64 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1c993f681bd1dc4bc8682839c684e72e221167b",
      "candidate_info": {
        "commit_hash": "b1c993f681bd1dc4bc8682839c684e72e221167b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1c993f681bd1dc4bc8682839c684e72e221167b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Relax pointless restrictions on allowing tables in the FROM clause from crossing over LEFT JOINs, as long as the table being moved is not the right table of the LEFT JOIN.\n\nFossilOrigin-Name: c1ea064948ba08c4be209ad6efc2126a7367bcb06266ea35eb957bf2d4e2cb9f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 35cd87063d1933b87bc2176f957ecd758d7d167e9473fa615e33caec3be14783",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3610:   sqlite3 *db = pWInfo->pParse->db;",
          "3611:   int rc = SQLITE_OK;",
          "3612:   WhereLoop *pNew;",
          "3616:   pNew = pBuilder->pNew;",
          "",
          "[Removed Lines]",
          "3613:   u8 priorJointype = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3621:     pNew->iTab = iTab;",
          "3622:     pBuilder->iPlanLimit += SQLITE_QUERY_PLANNER_LIMIT_INCR;",
          "3623:     pNew->maskSelf = sqlite3WhereGetMask(&pWInfo->sMaskSet, pItem->iCursor);",
          "3627:       mPrereq = mPrior;",
          "3628:     }",
          "3630: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "3631:     if( IsVirtual(pItem->pTab) ){",
          "3632:       struct SrcList_item *p;",
          "",
          "[Removed Lines]",
          "3624:     if( ((pItem->fg.jointype|priorJointype) & (JT_LEFT|JT_CROSS))!=0 ){",
          "3629:     priorJointype = pItem->fg.jointype;",
          "",
          "[Added Lines]",
          "3623:     if( (pItem->fg.jointype & (JT_LEFT|JT_CROSS))!=0 ){",
          "3627:     }else{",
          "3628:       mPrereq = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e86f3402ac8a1fc965a57749467bc87e199aa793",
      "candidate_info": {
        "commit_hash": "e86f3402ac8a1fc965a57749467bc87e199aa793",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e86f3402ac8a1fc965a57749467bc87e199aa793",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Disables the optimization that tries to pull the value of an expression from an index on that expression if the expression is a constant.\n\nFossilOrigin-Name: e5fd8b50500f9225e435ef5afee98e3c2cccd22785f99c718d7e6c9b5b653c56",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fa58aad48a788802b13a819e49f9b8787f713bbe395c46c7295e821c52c81738",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1192:     if( iRef==XN_EXPR ){",
          "1193:       assert( aColExpr->a[iIdxCol].pExpr!=0 );",
          "1194:       x.pIdxExpr = aColExpr->a[iIdxCol].pExpr;",
          "1195:       w.xExprCallback = whereIndexExprTransNode;",
          "1196: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1197:     }else if( iRef>=0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1195:       if( sqlite3ExprIsConstant(x.pIdxExpr) ) continue;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d44390c8c54268e1651fafb9ee738574947aceba",
      "candidate_info": {
        "commit_hash": "d44390c8c54268e1651fafb9ee738574947aceba",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d44390c8c54268e1651fafb9ee738574947aceba",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/util.c"
        ],
        "message": "Performance improvement for column name lookup.\n\nFossilOrigin-Name: 1e4b6a93987cdfbf829e2ff35ef417c290625f2894ad11949e301af518f1fb44",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4cf8721f5ceb1fdaefdc355b3211f75c53c4cdf9d2582ca70fc96777a9b057c2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "469:   for(i=0; i<pNew->nCol; i++){",
          "470:     Column *pCol = &pNew->aCol[i];",
          "471:     pCol->zName = sqlite3DbStrDup(db, pCol->zName);",
          "472:     pCol->zColl = 0;",
          "473:     pCol->pDflt = 0;",
          "474:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:     pCol->hName = sqlite3StrIHash(pCol->zName);",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:   assert( pTable!=0 );",
          "591:   if( (pCol = pTable->aCol)!=0 ){",
          "592:     for(i=0; i<pTable->nCol; i++, pCol++){",
          "593:       sqlite3DbFree(db, pCol->zName);",
          "594:       sqlite3ExprDelete(db, pCol->pDflt);",
          "595:       sqlite3DbFree(db, pCol->zColl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:       assert( pCol->zName==0 || pCol->hName==sqlite3StrIHash(pCol->zName) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1238:   pCol = &p->aCol[p->nCol];",
          "1239:   memset(pCol, 0, sizeof(p->aCol[0]));",
          "1240:   pCol->zName = z;",
          "1241:   sqlite3ColumnPropertiesFromName(p, pCol);",
          "1243:   if( pType->n==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1242:   pCol->hName = sqlite3StrIHash(z);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:     if( pSrcList ){",
          "296:       for(i=0, pItem=pSrcList->a; i<pSrcList->nSrc; i++, pItem++){",
          "297:         pTab = pItem->pTab;",
          "298:         assert( pTab!=0 && pTab->zName!=0 );",
          "299:         assert( pTab->nCol>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:         u8 hCol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "327:         if( 0==(cntTab++) ){",
          "328:           pMatch = pItem;",
          "329:         }",
          "330:         for(j=0, pCol=pTab->aCol; j<pTab->nCol; j++, pCol++){",
          "",
          "[Removed Lines]",
          "331:           if( sqlite3StrICmp(pCol->zName, zCol)==0 ){",
          "",
          "[Added Lines]",
          "331:         hCol = sqlite3StrIHash(zCol);",
          "333:           if( pCol->hName==hCol && sqlite3StrICmp(pCol->zName, zCol)==0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "390:       if( pTab ){",
          "391:         int iCol;",
          "392:         pSchema = pTab->pSchema;",
          "393:         cntTab++;",
          "394:         for(iCol=0, pCol=pTab->aCol; iCol<pTab->nCol; iCol++, pCol++){",
          "396:             if( iCol==pTab->iPKey ){",
          "397:               iCol = -1;",
          "398:             }",
          "",
          "[Removed Lines]",
          "395:           if( sqlite3StrICmp(pCol->zName, zCol)==0 ){",
          "",
          "[Added Lines]",
          "394:         u8 hCol = sqlite3StrIHash(zCol);",
          "398:           if( pCol->hName==hCol && sqlite3StrICmp(pCol->zName, zCol)==0 ){",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2023:       if( cnt>3 ) sqlite3_randomness(sizeof(cnt), &cnt);",
          "2024:     }",
          "2025:     pCol->zName = zName;",
          "2026:     sqlite3ColumnPropertiesFromName(0, pCol);",
          "2027:     if( zName && sqlite3HashInsert(&ht, zName, pCol)==pCol ){",
          "2028:       sqlite3OomFault(db);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2026:     pCol->hName = sqlite3StrIHash(zName);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4567:   const char*",
          "4568: );",
          "4569: Bitmask sqlite3ExprColUsed(Expr*);",
          "4570: int sqlite3ResolveExprNames(NameContext*, Expr*);",
          "4571: int sqlite3ResolveExprListNames(NameContext*, ExprList*);",
          "4572: void sqlite3ResolveSelectNames(Parse*, Select*, NameContext*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4571: u8 sqlite3StrIHash(const char*);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:   return N<0 ? 0 : UpperToLower[*a] - UpperToLower[*b];",
          "318: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323: u8 sqlite3StrIHash(const char *z){",
          "324:   u8 h = 0;",
          "325:   if( z==0 ) return 0;",
          "326:   while( z[0] ){",
          "327:     h += UpperToLower[(unsigned char)z[0]];",
          "328:     z++;",
          "329:   }",
          "330:   return h;",
          "331: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73bacb7f93eab9f4bd5a65cbc4ae242acf63c9e3",
      "candidate_info": {
        "commit_hash": "73bacb7f93eab9f4bd5a65cbc4ae242acf63c9e3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/73bacb7f93eab9f4bd5a65cbc4ae242acf63c9e3",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata1.db"
        ],
        "message": "Add more test cases from Yongheng Chen and Rui Zhong.\n\nFossilOrigin-Name: f24e6ca4f23008212ec05cace9202dbeb37ee34530ead91fac2f5e3eac7f6347",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}