{
  "cve_id": "CVE-2021-22901",
  "cve_desc": "curl 7.75.0 through 7.76.1 suffers from a use-after-free vulnerability resulting in already freed memory being used when a TLS 1.3 session ticket arrives over a connection. A malicious server can use this in rare unfortunate circumstances to potentially reach remote code execution in the client. When libcurl at run-time sets up support for TLS 1.3 session tickets on a connection using OpenSSL, it stores pointers to the transfer in-memory object for later retrieval when a session ticket arrives. If the connection is used by multiple transfers (like with a reused HTTP/1.1 connection or multiplexed HTTP/2 connection) that first transfer object might be freed before the new session is established on that connection and then the function will access a memory buffer that might be freed. When using that memory, libcurl might even call a function pointer in the object, making it possible for a remote code execution if the server could somehow manage to get crafted memory content into the correct place in memory.",
  "repo": "curl/curl",
  "patch_hash": "7f4a9a9b2a49547eae24d2e19bc5c346e9026479",
  "patch_info": {
    "commit_hash": "7f4a9a9b2a49547eae24d2e19bc5c346e9026479",
    "repo": "curl/curl",
    "commit_url": "https://github.com/curl/curl/commit/7f4a9a9b2a49547eae24d2e19bc5c346e9026479",
    "files": [
      "lib/multi.c",
      "lib/vtls/gskit.c",
      "lib/vtls/gtls.c",
      "lib/vtls/mbedtls.c",
      "lib/vtls/mesalink.c",
      "lib/vtls/nss.c",
      "lib/vtls/openssl.c",
      "lib/vtls/rustls.c",
      "lib/vtls/schannel.c",
      "lib/vtls/sectransp.c",
      "lib/vtls/vtls.c",
      "lib/vtls/vtls.h",
      "lib/vtls/wolfssl.c"
    ],
    "message": "openssl: associate/detach the transfer from connection\n\nCVE-2021-22901\n\nBug: https://curl.se/docs/CVE-2021-22901.html",
    "before_after_code_files": [
      "lib/multi.c||lib/multi.c",
      "lib/vtls/gskit.c||lib/vtls/gskit.c",
      "lib/vtls/gtls.c||lib/vtls/gtls.c",
      "lib/vtls/mbedtls.c||lib/vtls/mbedtls.c",
      "lib/vtls/mesalink.c||lib/vtls/mesalink.c",
      "lib/vtls/nss.c||lib/vtls/nss.c",
      "lib/vtls/openssl.c||lib/vtls/openssl.c",
      "lib/vtls/rustls.c||lib/vtls/rustls.c",
      "lib/vtls/schannel.c||lib/vtls/schannel.c",
      "lib/vtls/sectransp.c||lib/vtls/sectransp.c",
      "lib/vtls/vtls.c||lib/vtls/vtls.c",
      "lib/vtls/vtls.h||lib/vtls/vtls.h",
      "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c"
    ]
  },
  "patch_diff": {
    "lib/multi.c||lib/multi.c": [
      "File: lib/multi.c -> lib/multi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "878: void Curl_detach_connnection(struct Curl_easy *data)",
      "879: {",
      "880:   struct connectdata *conn = data->conn;",
      "882:     Curl_llist_remove(&conn->easyq, &data->conn_queue, NULL);",
      "883:   data->conn = NULL;",
      "884: }",
      "",
      "[Removed Lines]",
      "881:   if(conn)",
      "",
      "[Added Lines]",
      "881:   if(conn) {",
      "883:     Curl_ssl_detach_conn(data, conn);",
      "884:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "898:                          &data->conn_queue);",
      "899:   if(conn->handler->attach)",
      "900:     conn->handler->attach(data, conn);",
      "901: }",
      "903: static int waitconnect_getsock(struct connectdata *conn,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "903:   Curl_ssl_associate_conn(data, conn);",
      "",
      "---------------"
    ],
    "lib/vtls/gskit.c||lib/vtls/gskit.c": [
      "File: lib/vtls/gskit.c -> lib/vtls/gskit.c"
    ],
    "lib/vtls/gtls.c||lib/vtls/gtls.c": [
      "File: lib/vtls/gtls.c -> lib/vtls/gtls.c"
    ],
    "lib/vtls/mbedtls.c||lib/vtls/mbedtls.c": [
      "File: lib/vtls/mbedtls.c -> lib/vtls/mbedtls.c"
    ],
    "lib/vtls/mesalink.c||lib/vtls/mesalink.c": [
      "File: lib/vtls/mesalink.c -> lib/vtls/mesalink.c"
    ],
    "lib/vtls/nss.c||lib/vtls/nss.c": [
      "File: lib/vtls/nss.c -> lib/vtls/nss.c"
    ],
    "lib/vtls/openssl.c||lib/vtls/openssl.c": [
      "File: lib/vtls/openssl.c -> lib/vtls/openssl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "240: #endif",
      "241: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "243: static void ossl_associate_connection(struct Curl_easy *data,",
      "244:                                       struct connectdata *conn,",
      "245:                                       int sockindex);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2581:   curl_socket_t sockfd = conn->sock[sockindex];",
      "2582:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
      "2583:   ctx_option_t ctx_options = 0;",
      "2585: #ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME",
      "2586:   bool sni;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2588:   void *ssl_sessionid = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3225:   }",
      "3226: #endif",
      "3265:     }",
      "3267:   }",
      "3269: #ifndef CURL_DISABLE_PROXY",
      "3270:   if(conn->proxy_ssl[sockindex].use) {",
      "",
      "[Removed Lines]",
      "3229:   if(SSL_SET_OPTION(primary.sessionid)) {",
      "3230:     void *ssl_sessionid = NULL;",
      "3231:     int data_idx = ossl_get_ssl_data_index();",
      "3232:     int connectdata_idx = ossl_get_ssl_conn_index();",
      "3233:     int sockindex_idx = ossl_get_ssl_sockindex_index();",
      "3234:     int proxy_idx = ossl_get_proxy_index();",
      "3236:     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&",
      "3237:        proxy_idx >= 0) {",
      "3240:       SSL_set_ex_data(backend->handle, data_idx, data);",
      "3241:       SSL_set_ex_data(backend->handle, connectdata_idx, conn);",
      "3242:       SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);",
      "3243: #ifndef CURL_DISABLE_PROXY",
      "3244:       SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:",
      "3245:                       NULL);",
      "3246: #else",
      "3247:       SSL_set_ex_data(backend->handle, proxy_idx, NULL);",
      "3248: #endif",
      "3250:     }",
      "3252:     Curl_ssl_sessionid_lock(data);",
      "3253:     if(!Curl_ssl_getsessionid(data, conn, SSL_IS_PROXY() ? TRUE : FALSE,",
      "3254:                               &ssl_sessionid, NULL, sockindex)) {",
      "3256:       if(!SSL_set_session(backend->handle, ssl_sessionid)) {",
      "3257:         Curl_ssl_sessionid_unlock(data);",
      "3258:         failf(data, \"SSL: SSL_set_session failed: %s\",",
      "3259:               ossl_strerror(ERR_get_error(), error_buffer,",
      "3260:                             sizeof(error_buffer)));",
      "3261:         return CURLE_SSL_CONNECT_ERROR;",
      "3262:       }",
      "3264:       infof(data, \"SSL re-using session ID\\n\");",
      "3266:     Curl_ssl_sessionid_unlock(data);",
      "",
      "[Added Lines]",
      "3233:   ossl_associate_connection(data, conn, sockindex);",
      "3235:   Curl_ssl_sessionid_lock(data);",
      "3236:   if(!Curl_ssl_getsessionid(data, conn, SSL_IS_PROXY() ? TRUE : FALSE,",
      "3237:                             &ssl_sessionid, NULL, sockindex)) {",
      "3239:     if(!SSL_set_session(backend->handle, ssl_sessionid)) {",
      "3240:       Curl_ssl_sessionid_unlock(data);",
      "3241:       failf(data, \"SSL: SSL_set_session failed: %s\",",
      "3242:             ossl_strerror(ERR_get_error(), error_buffer,",
      "3243:                           sizeof(error_buffer)));",
      "3244:       return CURLE_SSL_CONNECT_ERROR;",
      "3247:     infof(data, \"SSL re-using session ID\\n\");",
      "3249:   Curl_ssl_sessionid_unlock(data);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4498:          (void *)backend->ctx : (void *)backend->handle;",
      "4499: }",
      "4501: const struct Curl_ssl Curl_ssl_openssl = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4483: static void ossl_associate_connection(struct Curl_easy *data,",
      "4484:                                       struct connectdata *conn,",
      "4485:                                       int sockindex)",
      "4486: {",
      "4487:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
      "4488:   struct ssl_backend_data *backend = connssl->backend;",
      "4491:   if(!backend->handle)",
      "4492:     return;",
      "4494:   if(SSL_SET_OPTION(primary.sessionid)) {",
      "4495:     int data_idx = ossl_get_ssl_data_index();",
      "4496:     int connectdata_idx = ossl_get_ssl_conn_index();",
      "4497:     int sockindex_idx = ossl_get_ssl_sockindex_index();",
      "4498:     int proxy_idx = ossl_get_proxy_index();",
      "4500:     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&",
      "4501:        proxy_idx >= 0) {",
      "4504:       SSL_set_ex_data(backend->handle, data_idx, data);",
      "4505:       SSL_set_ex_data(backend->handle, connectdata_idx, conn);",
      "4506:       SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);",
      "4507: #ifndef CURL_DISABLE_PROXY",
      "4508:       SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:",
      "4509:                       NULL);",
      "4510: #else",
      "4511:       SSL_set_ex_data(backend->handle, proxy_idx, NULL);",
      "4512: #endif",
      "4513:     }",
      "4514:   }",
      "4515: }",
      "4525: static void ossl_disassociate_connection(struct Curl_easy *data,",
      "4526:                                          int sockindex)",
      "4527: {",
      "4528:   struct connectdata *conn = data->conn;",
      "4529:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
      "4530:   struct ssl_backend_data *backend = connssl->backend;",
      "4533:   if(!backend->handle)",
      "4534:     return;",
      "4536:   if(SSL_SET_OPTION(primary.sessionid)) {",
      "4537:     bool isproxy = FALSE;",
      "4538:     bool incache;",
      "4539:     void *old_ssl_sessionid = NULL;",
      "4540:     int data_idx = ossl_get_ssl_data_index();",
      "4541:     int connectdata_idx = ossl_get_ssl_conn_index();",
      "4542:     int sockindex_idx = ossl_get_ssl_sockindex_index();",
      "4543:     int proxy_idx = ossl_get_proxy_index();",
      "4545:     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&",
      "4546:        proxy_idx >= 0) {",
      "4548:       isproxy = SSL_get_ex_data(backend->handle, proxy_idx) ? TRUE : FALSE;",
      "4552:       SSL_set_ex_data(backend->handle, data_idx, NULL);",
      "4553:       SSL_set_ex_data(backend->handle, connectdata_idx, NULL);",
      "4554:       SSL_set_ex_data(backend->handle, sockindex_idx, NULL);",
      "4555:       SSL_set_ex_data(backend->handle, proxy_idx, NULL);",
      "4556:     }",
      "4558:     Curl_ssl_sessionid_lock(data);",
      "4559:     incache = !(Curl_ssl_getsessionid(data, conn, isproxy,",
      "4560:                                       &old_ssl_sessionid, NULL, sockindex));",
      "4561:     if(incache)",
      "4562:       Curl_ssl_delsessionid(data, old_ssl_sessionid);",
      "4563:     Curl_ssl_sessionid_unlock(data);",
      "4564:   }",
      "4565: }",
      "",
      "---------------"
    ],
    "lib/vtls/rustls.c||lib/vtls/rustls.c": [
      "File: lib/vtls/rustls.c -> lib/vtls/rustls.c"
    ],
    "lib/vtls/schannel.c||lib/vtls/schannel.c": [
      "File: lib/vtls/schannel.c -> lib/vtls/schannel.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330: static CURLcode",
      "331: set_ssl_ciphers(SCHANNEL_CRED *schannel_cred, char *ciphers,",
      "333: {",
      "334:   char *startCur = ciphers;",
      "335:   int algCount = 0;",
      "",
      "[Removed Lines]",
      "332:                 int *algIds)",
      "",
      "[Added Lines]",
      "332:                 ALG_ID *algIds)",
      "",
      "---------------"
    ],
    "lib/vtls/sectransp.c||lib/vtls/sectransp.c": [
      "File: lib/vtls/sectransp.c -> lib/vtls/sectransp.c"
    ],
    "lib/vtls/vtls.c||lib/vtls/vtls.c": [
      "File: lib/vtls/vtls.c -> lib/vtls/vtls.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "586:   return CURLE_OK;",
      "587: }",
      "590: void Curl_ssl_close_all(struct Curl_easy *data)",
      "591: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "589: void Curl_ssl_associate_conn(struct Curl_easy *data,",
      "590:                              struct connectdata *conn)",
      "591: {",
      "592:   if(Curl_ssl->associate_connection) {",
      "593:     Curl_ssl->associate_connection(data, conn, FIRSTSOCKET);",
      "594:     if(conn->sock[SECONDARYSOCKET] && conn->bits.sock_accepted)",
      "595:       Curl_ssl->associate_connection(data, conn, SECONDARYSOCKET);",
      "596:   }",
      "597: }",
      "599: void Curl_ssl_detach_conn(struct Curl_easy *data,",
      "600:                           struct connectdata *conn)",
      "601: {",
      "602:   if(Curl_ssl->disassociate_connection) {",
      "603:     Curl_ssl->disassociate_connection(data, FIRSTSOCKET);",
      "604:     if(conn->sock[SECONDARYSOCKET] && conn->bits.sock_accepted)",
      "605:       Curl_ssl->disassociate_connection(data, SECONDARYSOCKET);",
      "606:   }",
      "607: }",
      "",
      "---------------"
    ],
    "lib/vtls/vtls.h||lib/vtls/vtls.h": [
      "File: lib/vtls/vtls.h -> lib/vtls/vtls.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "84:   bool (*false_start)(void);",
      "85:   CURLcode (*sha256sum)(const unsigned char *input, size_t inputlen,",
      "86:                     unsigned char *sha256sum, size_t sha256sumlen);",
      "87: };",
      "89: #ifdef USE_SSL",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "88:   void (*associate_connection)(struct Curl_easy *data,",
      "89:                                struct connectdata *conn,",
      "90:                                int sockindex);",
      "91:   void (*disassociate_connection)(struct Curl_easy *data, int sockindex);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "284: bool Curl_ssl_false_start(void);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "291: void Curl_ssl_associate_conn(struct Curl_easy *data,",
      "292:                              struct connectdata *conn);",
      "293: void Curl_ssl_detach_conn(struct Curl_easy *data,",
      "294:                           struct connectdata *conn);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "309: #define Curl_ssl_cert_status_request() FALSE",
      "310: #define Curl_ssl_false_start() FALSE",
      "311: #define Curl_ssl_tls13_ciphersuites() FALSE",
      "312: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "322: #define Curl_ssl_associate_conn(a,b) Curl_nop_stmt",
      "323: #define Curl_ssl_detach_conn(a,b) Curl_nop_stmt",
      "",
      "---------------"
    ],
    "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c": [
      "File: lib/vtls/wolfssl.c -> lib/vtls/wolfssl.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f3d501dc678d80a93325bd93ab05c48855e1c0d1",
      "candidate_info": {
        "commit_hash": "f3d501dc678d80a93325bd93ab05c48855e1c0d1",
        "repo": "curl/curl",
        "commit_url": "https://github.com/curl/curl/commit/f3d501dc678d80a93325bd93ab05c48855e1c0d1",
        "files": [
          ".travis.yml",
          "lib/asyn-thread.c",
          "lib/conncache.c",
          "lib/connect.c",
          "lib/curl_ntlm_wb.c",
          "lib/curl_sasl.c",
          "lib/ftp.c",
          "lib/getinfo.c",
          "lib/http.c",
          "lib/http_digest.c",
          "lib/http_negotiate.c",
          "lib/http_ntlm.c",
          "lib/multi.c",
          "lib/setopt.c",
          "lib/url.c",
          "lib/url.h",
          "lib/urldata.h",
          "lib/vtls/openssl.c",
          "lib/vtls/vtls.c",
          "lib/vtls/vtls.h",
          "lib/vtls/wolfssl.c",
          "tests/data/test1097",
          "tests/data/test1244",
          "tests/data/test2047",
          "tests/data/test302",
          "tests/data/test552"
        ],
        "message": "build: disable more code/data when built without proxy support\n\nAdded build to travis to verify\n\nCloses #5466",
        "before_after_code_files": [
          "lib/asyn-thread.c||lib/asyn-thread.c",
          "lib/conncache.c||lib/conncache.c",
          "lib/connect.c||lib/connect.c",
          "lib/curl_ntlm_wb.c||lib/curl_ntlm_wb.c",
          "lib/curl_sasl.c||lib/curl_sasl.c",
          "lib/ftp.c||lib/ftp.c",
          "lib/getinfo.c||lib/getinfo.c",
          "lib/http.c||lib/http.c",
          "lib/http_digest.c||lib/http_digest.c",
          "lib/http_negotiate.c||lib/http_negotiate.c",
          "lib/http_ntlm.c||lib/http_ntlm.c",
          "lib/multi.c||lib/multi.c",
          "lib/setopt.c||lib/setopt.c",
          "lib/url.c||lib/url.c",
          "lib/url.h||lib/url.h",
          "lib/urldata.h||lib/urldata.h",
          "lib/vtls/openssl.c||lib/vtls/openssl.c",
          "lib/vtls/vtls.c||lib/vtls/vtls.c",
          "lib/vtls/vtls.h||lib/vtls/vtls.h",
          "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/multi.c||lib/multi.c",
            "lib/vtls/openssl.c||lib/vtls/openssl.c",
            "lib/vtls/vtls.c||lib/vtls/vtls.c",
            "lib/vtls/vtls.h||lib/vtls/vtls.h",
            "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c"
          ],
          "candidate": [
            "lib/multi.c||lib/multi.c",
            "lib/vtls/openssl.c||lib/vtls/openssl.c",
            "lib/vtls/vtls.c||lib/vtls/vtls.c",
            "lib/vtls/vtls.h||lib/vtls/vtls.h",
            "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/asyn-thread.c||lib/asyn-thread.c": [
          "File: lib/asyn-thread.c -> lib/asyn-thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:   const char *host_or_proxy;",
          "495:   CURLcode result;",
          "497:   if(conn->bits.httpproxy) {",
          "498:     host_or_proxy = \"proxy\";",
          "499:     result = CURLE_COULDNT_RESOLVE_PROXY;",
          "500:   }",
          "502:     host_or_proxy = \"host\";",
          "503:     result = CURLE_COULDNT_RESOLVE_HOST;",
          "504:   }",
          "",
          "[Removed Lines]",
          "501:   else {",
          "",
          "[Added Lines]",
          "497: #ifndef CURL_DISABLE_PROXY",
          "502:   else",
          "503: #endif",
          "504:   {",
          "",
          "---------------"
        ],
        "lib/conncache.c||lib/conncache.c": [
          "File: lib/conncache.c -> lib/conncache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:   const char *hostname;",
          "144:   long port = conn->remote_port;",
          "146:   if(conn->bits.httpproxy && !conn->bits.tunnel_proxy) {",
          "147:     hostname = conn->http_proxy.host.name;",
          "148:     port = conn->port;",
          "149:   }",
          "152:   else",
          "153:     hostname = conn->host.name;",
          "",
          "[Removed Lines]",
          "150:   else if(conn->bits.conn_to_host)",
          "151:     hostname = conn->conn_to_host.name;",
          "",
          "[Added Lines]",
          "146: #ifndef CURL_DISABLE_PROXY",
          "151:   else",
          "152: #endif",
          "153:     if(conn->bits.conn_to_host)",
          "154:       hostname = conn->conn_to_host.name;",
          "",
          "---------------"
        ],
        "lib/connect.c||lib/connect.c": [
          "File: lib/connect.c -> lib/connect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "747: {",
          "748:   CURLcode result = CURLE_OK;",
          "751: #ifndef CURL_DISABLE_PROXY",
          "",
          "[Removed Lines]",
          "750:   if(conn->bits.socksproxy) {",
          "",
          "[Added Lines]",
          "751:   if(conn->bits.socksproxy) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "781:       failf(conn->data, \"unknown proxytype option given\");",
          "782:       result = CURLE_COULDNT_CONNECT;",
          "787:   }",
          "788:   else",
          "791:   return result;",
          "",
          "[Removed Lines]",
          "784: #else",
          "785:   (void)sockindex;",
          "",
          "[Added Lines]",
          "786: #else",
          "787:     (void)conn;",
          "788:     (void)sockindex;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "995:     if(conn->bits.socksproxy)",
          "996:       hostname = conn->socks_proxy.host.name;",
          "997:     else if(conn->bits.httpproxy)",
          "998:       hostname = conn->http_proxy.host.name;",
          "1001:     else",
          "1002:       hostname = conn->host.name;",
          "",
          "[Removed Lines]",
          "989:     {",
          "990:       result = trynextip(conn, sockindex, 1);",
          "991:       if(!result)",
          "992:         return result;",
          "993:     }",
          "999:     else if(conn->bits.conn_to_host)",
          "1000:       hostname = conn->conn_to_host.name;",
          "",
          "[Added Lines]",
          "990:     result = trynextip(conn, sockindex, 1);",
          "991:     if(!result)",
          "992:       return result;",
          "994: #ifndef CURL_DISABLE_PROXY",
          "999:     else",
          "1000: #endif",
          "1001:       if(conn->bits.conn_to_host)",
          "1002:         hostname = conn->conn_to_host.name;",
          "",
          "---------------"
        ],
        "lib/curl_ntlm_wb.c||lib/curl_ntlm_wb.c": [
          "File: lib/curl_ntlm_wb.c -> lib/curl_ntlm_wb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:   DEBUGASSERT(conn->data);",
          "396:   if(proxy) {",
          "397:     allocuserpwd = &conn->allocptr.proxyuserpwd;",
          "398:     userp = conn->http_proxy.user;",
          "399:     ntlm = &conn->proxyntlm;",
          "400:     state = &conn->proxy_ntlm_state;",
          "401:     authp = &conn->data->state.authproxy;",
          "402:   }",
          "403:   else {",
          "404:     allocuserpwd = &conn->allocptr.userpwd;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397: #ifndef CURL_DISABLE_PROXY",
          "403: #else",
          "404:     return CURLE_NOT_BUILT_IN;",
          "405: #endif",
          "",
          "---------------"
        ],
        "lib/curl_sasl.c||lib/curl_sasl.c": [
          "File: lib/curl_sasl.c -> lib/curl_sasl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:   size_t len = 0;",
          "265:   saslstate state1 = SASL_STOP;",
          "266:   saslstate state2 = SASL_FINAL;",
          "267:   const char * const hostname = SSL_IS_PROXY() ? conn->http_proxy.host.name :",
          "268:     conn->host.name;",
          "269:   const long int port = SSL_IS_PROXY() ? conn->port : conn->remote_port;",
          "270: #if defined(USE_KERBEROS5) || defined(USE_NTLM)",
          "271:   const char *service = data->set.str[STRING_SERVICE_NAME] ?",
          "272:     data->set.str[STRING_SERVICE_NAME] :",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267: #ifndef CURL_DISABLE_PROXY",
          "271: #else",
          "272:   const char * const hostname = conn->host.name;",
          "273:   const long int port = conn->remote_port;",
          "274: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "417:   struct Curl_easy *data = conn->data;",
          "418:   saslstate newstate = SASL_FINAL;",
          "419:   char *resp = NULL;",
          "420:   const char * const hostname = SSL_IS_PROXY() ? conn->http_proxy.host.name :",
          "421:     conn->host.name;",
          "422:   const long int port = SSL_IS_PROXY() ? conn->port : conn->remote_port;",
          "423: #if !defined(CURL_DISABLE_CRYPTO_AUTH)",
          "424:   char *chlg = NULL;",
          "425:   size_t chlglen = 0;",
          "426: #endif",
          "429:   const char *service = data->set.str[STRING_SERVICE_NAME] ?",
          "432:   char *serverdata;",
          "433: #endif",
          "434:   size_t len = 0;",
          "",
          "[Removed Lines]",
          "427: #if !defined(CURL_DISABLE_CRYPTO_AUTH) || defined(USE_KERBEROS5) || \\",
          "428:     defined(USE_NTLM)",
          "430:                         data->set.str[STRING_SERVICE_NAME] :",
          "431:                         sasl->params->service;",
          "",
          "[Added Lines]",
          "425: #ifndef CURL_DISABLE_PROXY",
          "429: #else",
          "430:   const char * const hostname = conn->host.name;",
          "431:   const long int port = conn->remote_port;",
          "432: #endif",
          "437: #if !defined(CURL_DISABLE_CRYPTO_AUTH) || defined(USE_KERBEROS5) ||     \\",
          "438:   defined(USE_NTLM)",
          "440:     data->set.str[STRING_SERVICE_NAME] :",
          "441:     sasl->params->service;",
          "",
          "---------------"
        ],
        "lib/ftp.c||lib/ftp.c": [
          "File: lib/ftp.c -> lib/ftp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:     conn->sock[SECONDARYSOCKET] = CURL_SOCKET_BAD;",
          "222:   }",
          "223:   conn->bits.tcpconnect[SECONDARYSOCKET] = FALSE;",
          "224:   conn->bits.proxy_ssl_connected[SECONDARYSOCKET] = FALSE;",
          "225: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224: #ifndef CURL_DISABLE_PROXY",
          "226: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1762: {",
          "1763:   CURLcode result = CURLE_OK;",
          "1767:     failf(conn->data, \"Failed EPSV attempt, exiting\\n\");",
          "1768:     return CURLE_WEIRD_SERVER_REPLY;",
          "",
          "[Removed Lines]",
          "1765:   if(conn->bits.ipv6 && !(conn->bits.tunnel_proxy || conn->bits.socksproxy)) {",
          "",
          "[Added Lines]",
          "1767:   if(conn->bits.ipv6",
          "1768: #ifndef CURL_DISABLE_PROXY",
          "1769:      && !(conn->bits.tunnel_proxy || conn->bits.socksproxy)",
          "1770: #endif",
          "1771:     ) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1787:      If a proxy tunnel is used, returns the original host name instead, because",
          "1788:      the effective control connection address is the proxy address,",
          "1790:   if(conn->bits.tunnel_proxy || conn->bits.socksproxy)",
          "1791:     return conn->host.name;",
          "1793:   return conn->ip_addr_str;",
          "1794: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1796: #ifndef CURL_DISABLE_PROXY",
          "1799: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1906:     return CURLE_FTP_WEIRD_PASV_REPLY;",
          "1907:   }",
          "1909:   if(conn->bits.proxy) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1916: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1928:       return CURLE_COULDNT_RESOLVE_PROXY;",
          "1929:     }",
          "1930:   }",
          "1933:     rc = Curl_resolv(conn, ftpc->newhost, ftpc->newport, FALSE, &addr);",
          "1934:     if(rc == CURLRESOLV_PENDING)",
          "",
          "[Removed Lines]",
          "1931:   else {",
          "",
          "[Added Lines]",
          "1939:   else",
          "1940: #endif",
          "1941:   {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2637: #endif",
          "2639:       if(data->set.use_ssl &&",
          "",
          "[Removed Lines]",
          "2640:          (!conn->ssl[FIRSTSOCKET].use ||",
          "2641:           (conn->bits.proxy_ssl_connected[FIRSTSOCKET] &&",
          "2642:            !conn->proxy_ssl[FIRSTSOCKET].use))) {",
          "",
          "[Added Lines]",
          "2650:          (!conn->ssl[FIRSTSOCKET].use",
          "2651: #ifndef CURL_DISABLE_PROXY",
          "2652:           || (conn->bits.proxy_ssl_connected[FIRSTSOCKET] &&",
          "2653:               !conn->proxy_ssl[FIRSTSOCKET].use)",
          "2654: #endif",
          "2655:            )) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3503:     }",
          "3504:   }",
          "3506:   result = Curl_proxy_connect(conn, SECONDARYSOCKET);",
          "3507:   if(result)",
          "3508:     return result;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3519: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3513:   if(conn->bits.tunnel_proxy && conn->bits.httpproxy &&",
          "3514:      Curl_connect_ongoing(conn))",
          "3515:     return result;",
          "3518:   if(ftpc->state) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3530: #endif",
          "",
          "---------------"
        ],
        "lib/getinfo.c||lib/getinfo.c": [
          "File: lib/getinfo.c -> lib/getinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:   case CURLINFO_SSL_VERIFYRESULT:",
          "200:     break;",
          "201:   case CURLINFO_PROXY_SSL_VERIFYRESULT:",
          "203:     break;",
          "204:   case CURLINFO_REDIRECT_COUNT:",
          "206:     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201: #ifndef CURL_DISABLE_PROXY",
          "205: #endif",
          "",
          "---------------"
        ],
        "lib/http.c||lib/http.c": [
          "File: lib/http.c -> lib/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:   char *out;",
          "294:   if(proxy) {",
          "295:     userp = &conn->allocptr.proxyuserpwd;",
          "296:     user = conn->http_proxy.user;",
          "297:     pwd = conn->http_proxy.passwd;",
          "298:   }",
          "299:   else {",
          "300:     userp = &conn->allocptr.userpwd;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295: #ifndef CURL_DISABLE_PROXY",
          "299: #else",
          "300:     return CURLE_NOT_BUILT_IN;",
          "301: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "578:       conn->data->set.httpversion = CURL_HTTP_VERSION_1_1;",
          "579:     }",
          "580:   }",
          "581:   if(conn->bits.proxy_user_passwd &&",
          "582:      ((data->req.httpcode == 407) ||",
          "583:       (conn->bits.authneg && data->req.httpcode < 300))) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "585: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "586:     if(!pickproxy)",
          "587:       data->state.authproblem = TRUE;",
          "588:   }",
          "590:   if(pickhost || pickproxy) {",
          "591:     if((data->set.httpreq != HTTPREQ_GET) &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "689: #endif",
          "690:   if(authstatus->picked == CURLAUTH_BASIC) {",
          "696:       auth = \"Basic\";",
          "697:       result = http_output_basic(conn, proxy);",
          "698:       if(result)",
          "",
          "[Removed Lines]",
          "692:     if((proxy && conn->bits.proxy_user_passwd &&",
          "693:         !Curl_checkProxyheaders(conn, \"Proxy-authorization\")) ||",
          "694:        (!proxy && conn->bits.user_passwd &&",
          "695:         !Curl_checkheaders(conn, \"Authorization\"))) {",
          "",
          "[Added Lines]",
          "698:     if(",
          "699: #ifndef CURL_DISABLE_PROXY",
          "700:       (proxy && conn->bits.proxy_user_passwd &&",
          "701:        !Curl_checkProxyheaders(conn, \"Proxy-authorization\")) ||",
          "702: #endif",
          "703:       (!proxy && conn->bits.user_passwd &&",
          "704:        !Curl_checkheaders(conn, \"Authorization\"))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "719:   }",
          "721:   if(auth) {",
          "722:     infof(data, \"%s auth using %s with user '%s'\\n\",",
          "723:           proxy ? \"Proxy\" : \"Server\", auth,",
          "724:           proxy ? (conn->http_proxy.user ? conn->http_proxy.user : \"\") :",
          "726:     authstatus->multipass = (!authstatus->done) ? TRUE : FALSE;",
          "727:   }",
          "728:   else",
          "",
          "[Removed Lines]",
          "725:                   (conn->user ? conn->user : \"\"));",
          "",
          "[Added Lines]",
          "731: #ifndef CURL_DISABLE_PROXY",
          "735:           (conn->user ? conn->user : \"\"));",
          "736: #else",
          "737:     infof(data, \"Server auth using %s with user '%s'\\n\",",
          "738:           auth, conn->user ? conn->user : \"\");",
          "739: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "762:   authhost = &data->state.authhost;",
          "763:   authproxy = &data->state.authproxy;",
          "766:      conn->bits.user_passwd || data->set.str[STRING_BEARER])",
          "768:   else {",
          "",
          "[Removed Lines]",
          "765:   if((conn->bits.httpproxy && conn->bits.proxy_user_passwd) ||",
          "",
          "[Added Lines]",
          "779:   if(",
          "780: #ifndef CURL_DISABLE_PROXY",
          "781:     (conn->bits.httpproxy && conn->bits.proxy_user_passwd) ||",
          "782: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1068:   if((httpcode == 401) && !conn->bits.user_passwd)",
          "1069:     return TRUE;",
          "1070:   if((httpcode == 407) && !conn->bits.proxy_user_passwd)",
          "1071:     return TRUE;",
          "1073:   return data->state.authproblem;",
          "1074: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1087: #ifndef CURL_DISABLE_PROXY",
          "1090: #endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1173:     return result;",
          "1174:   }",
          "1178:      && conn->httpversion != 20) {",
          "1180:        when we speak HTTPS, as if only a fraction of it is sent now, this data",
          "",
          "[Removed Lines]",
          "1176:   if((conn->handler->flags & PROTOPT_SSL ||",
          "1177:      conn->http_proxy.proxytype == CURLPROXY_HTTPS)",
          "",
          "[Added Lines]",
          "1195:   if((conn->handler->flags & PROTOPT_SSL",
          "1196: #ifndef CURL_DISABLE_PROXY",
          "1197:       || conn->http_proxy.proxytype == CURLPROXY_HTTPS",
          "1198: #endif",
          "1199:        )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1368:   connkeep(conn, \"HTTP default\");",
          "1371:   result = Curl_proxy_connect(conn, FIRSTSOCKET);",
          "1372:   if(result)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1392: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1384:     return CURLE_OK;",
          "1387:   if(conn->data->set.haproxyprotocol) {",
          "1389:     result = add_haproxy_protocol_header(conn);",
          "",
          "[Removed Lines]",
          "1386: #ifndef CURL_DISABLE_PROXY",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1665:   struct Curl_easy *data = conn->data;",
          "1666:   int i;",
          "1668:   enum proxy_use proxy;",
          "1670:   if(is_connect)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1690: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1691:       h[0] = data->set.headers;",
          "1692:     break;",
          "1693:   }",
          "1696:   for(i = 0; i < numlists; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1717: #else",
          "1718:   (void)is_connect;",
          "1719:   h[0] = data->set.headers;",
          "1720: #endif",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1922: #ifdef USE_NGHTTP2",
          "1923:         if(conn->data->set.httpversion ==",
          "1924:            CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE) {",
          "1925:           if(conn->bits.httpproxy && !conn->bits.tunnel_proxy) {",
          "1928:             infof(data, \"Ignoring HTTP/2 prior knowledge due to proxy\\n\");",
          "1929:             break;",
          "1930:           }",
          "1932:           DEBUGF(infof(data, \"HTTP/2 over clean TCP\\n\"));",
          "1933:           conn->httpversion = 20;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1952: #ifndef CURL_DISABLE_PROXY",
          "1959: #endif",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2535:                   conn->allocptr.accept_encoding:\"\",",
          "2536:                   (data->change.referer && conn->allocptr.ref)?",
          "2537:                   conn->allocptr.ref:\"\" /* Referer: <data> */,",
          "2538:                   (conn->bits.httpproxy &&",
          "2539:                    !conn->bits.tunnel_proxy &&",
          "2540:                    !Curl_checkProxyheaders(conn, \"Proxy-Connection\"))?",
          "2541:                   \"Proxy-Connection: Keep-Alive\\r\\n\":\"\",",
          "2542:                   te,",
          "2543:                   altused ? altused : \"\"",
          "2544:       );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2566: #ifndef CURL_DISABLE_PROXY",
          "2571: #else",
          "2572:                   \"\",",
          "2573: #endif",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3647:         }",
          "3648:         else if(data->set.http_fail_on_error && (k->httpcode >= 400) &&",
          "3652:           print_http_error(data);",
          "3653:           return CURLE_HTTP_RETURNED_ERROR;",
          "",
          "[Removed Lines]",
          "3649:            ((k->httpcode != 401) || !conn->bits.user_passwd) &&",
          "3650:            ((k->httpcode != 407) || !conn->bits.proxy_user_passwd) ) {",
          "",
          "[Added Lines]",
          "3681:                 ((k->httpcode != 401) || !conn->bits.user_passwd)",
          "3682: #ifndef CURL_DISABLE_PROXY",
          "3683:                 && ((k->httpcode != 407) || !conn->bits.proxy_user_passwd)",
          "3684: #endif",
          "3685:           ) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3757:         data->info.contenttype = contenttype;",
          "3758:       }",
          "3759:     }",
          "3760:     else if((conn->httpversion == 10) &&",
          "3761:             conn->bits.httpproxy &&",
          "3762:             Curl_compareheader(headp, \"Proxy-Connection:\", \"keep-alive\")) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3795: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3779:       connclose(conn, \"Proxy-Connection: asked to close after done\");",
          "3780:       infof(data, \"HTTP/1.1 proxy connection set close!\\n\");",
          "3781:     }",
          "3782:     else if((conn->httpversion == 10) &&",
          "3783:             Curl_compareheader(headp, \"Connection:\", \"keep-alive\")) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3818: #endif",
          "",
          "---------------"
        ],
        "lib/http_digest.c||lib/http_digest.c": [
          "File: lib/http_digest.c -> lib/http_digest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:   struct auth *authp;",
          "96:   if(proxy) {",
          "97:     digest = &data->state.proxydigest;",
          "98:     allocuserpwd = &conn->allocptr.proxyuserpwd;",
          "99:     userp = conn->http_proxy.user;",
          "100:     passwdp = conn->http_proxy.passwd;",
          "101:     authp = &data->state.authproxy;",
          "102:   }",
          "103:   else {",
          "104:     digest = &data->state.digest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: #ifdef CURL_DISABLE_PROXY",
          "98:     return CURLE_NOT_BUILT_IN;",
          "99: #else",
          "105: #endif",
          "",
          "---------------"
        ],
        "lib/http_negotiate.c||lib/http_negotiate.c": [
          "File: lib/http_negotiate.c -> lib/http_negotiate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   curlnegotiate state;",
          "54:   if(proxy) {",
          "55:     userp = conn->http_proxy.user;",
          "56:     passwdp = conn->http_proxy.passwd;",
          "57:     service = data->set.str[STRING_PROXY_SERVICE_NAME] ?",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     host = conn->http_proxy.host.name;",
          "60:     neg_ctx = &conn->proxyneg;",
          "61:     state = conn->proxy_negotiate_state;",
          "62:   }",
          "63:   else {",
          "64:     userp = conn->user;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: #else",
          "64:     return CURLE_NOT_BUILT_IN;",
          "65: #endif",
          "",
          "---------------"
        ],
        "lib/http_ntlm.c||lib/http_ntlm.c": [
          "File: lib/http_ntlm.c -> lib/http_ntlm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   DEBUGASSERT(conn->data);",
          "138:   if(proxy) {",
          "139:     allocuserpwd = &conn->allocptr.proxyuserpwd;",
          "140:     userp = conn->http_proxy.user;",
          "141:     passwdp = conn->http_proxy.passwd;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:     ntlm = &conn->proxyntlm;",
          "146:     state = &conn->proxy_ntlm_state;",
          "147:     authp = &conn->data->state.authproxy;",
          "148:   }",
          "149:   else {",
          "150:     allocuserpwd = &conn->allocptr.userpwd;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: #else",
          "150:     return CURLE_NOT_BUILT_IN;",
          "151: #endif",
          "",
          "---------------"
        ],
        "lib/multi.c||lib/multi.c": [
          "File: lib/multi.c -> lib/multi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:   }",
          "660:   else {",
          "661:     char buffer[256];",
          "663:     msnprintf(buffer, sizeof(buffer),",
          "664:               \"Connection #%ld to host %s left intact\",",
          "671:     CONNCACHE_UNLOCK(data);",
          "672:     if(Curl_conncache_return_conn(data, conn)) {",
          "",
          "[Removed Lines]",
          "665:               conn->connection_id,",
          "666:               conn->bits.socksproxy ? conn->socks_proxy.host.dispname :",
          "667:               conn->bits.httpproxy ? conn->http_proxy.host.dispname :",
          "668:               conn->bits.conn_to_host ? conn->conn_to_host.dispname :",
          "669:               conn->host.dispname);",
          "",
          "[Added Lines]",
          "662:     const char *host =",
          "663: #ifndef CURL_DISABLE_PROXY",
          "664:       conn->bits.socksproxy ?",
          "665:       conn->socks_proxy.host.dispname :",
          "666:       conn->bits.httpproxy ? conn->http_proxy.host.dispname :",
          "667: #endif",
          "668:       conn->bits.conn_to_host ? conn->conn_to_host.dispname :",
          "669:       conn->host.dispname;",
          "673:               conn->connection_id, host);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "867:   int rc = 0;",
          "869: #ifdef USE_SSL",
          "870:   if(CONNECT_FIRSTSOCKET_PROXY_SSL())",
          "871:     return Curl_ssl_getsock(conn, sock);",
          "872: #endif",
          "874:   if(SOCKS_STATE(conn->cnnct.state))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "874: #ifndef CURL_DISABLE_PROXY",
          "877: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1490:   }",
          "1492:   if(!conn->bits.protoconnstart) {",
          "1494:     result = Curl_proxy_connect(conn, FIRSTSOCKET);",
          "1495:     if(result)",
          "1496:       return result;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1499: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1506:       return CURLE_OK;",
          "1508:     if(conn->handler->connect_it) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1513: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1706:       const char *hostname;",
          "1708:       DEBUGASSERT(conn);",
          "1709:       if(conn->bits.httpproxy)",
          "1710:         hostname = conn->http_proxy.host.name;",
          "1712:         hostname = conn->conn_to_host.name;",
          "1713:       else",
          "1714:         hostname = conn->host.name;",
          "",
          "[Removed Lines]",
          "1711:       else if(conn->bits.conn_to_host)",
          "",
          "[Added Lines]",
          "1715: #ifndef CURL_DISABLE_PROXY",
          "1718:       else",
          "1719: #endif",
          "1720:         if(conn->bits.conn_to_host)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1775:       DEBUGASSERT(data->conn);",
          "1776:       result = Curl_http_connect(data->conn, &protocol_connected);",
          "1778:       if(data->conn->bits.proxy_connect_closed) {",
          "1779:         rc = CURLM_CALL_MULTI_PERFORM;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1786: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1782:         multi_done(data, CURLE_OK, FALSE);",
          "1783:         multistate(data, CURLM_STATE_CONNECT);",
          "1784:       }",
          "1792:         }",
          "1794:       else if(result)",
          "1795:         stream_error = TRUE;",
          "1796:       break;",
          "",
          "[Removed Lines]",
          "1785:       else if(!result) {",
          "1786:         if((data->conn->http_proxy.proxytype != CURLPROXY_HTTPS ||",
          "1787:            data->conn->bits.proxy_ssl_connected[FIRSTSOCKET]) &&",
          "1788:            Curl_connect_complete(data->conn)) {",
          "1789:           rc = CURLM_CALL_MULTI_PERFORM;",
          "1791:           multistate(data, CURLM_STATE_SENDPROTOCONNECT);",
          "1793:       }",
          "",
          "[Added Lines]",
          "1794:       else",
          "1795: #endif",
          "1796:         if(!result) {",
          "1797:           if(",
          "1798: #ifndef CURL_DISABLE_PROXY",
          "1799:             (data->conn->http_proxy.proxytype != CURLPROXY_HTTPS ||",
          "1800:              data->conn->bits.proxy_ssl_connected[FIRSTSOCKET]) &&",
          "1801: #endif",
          "1802:             Curl_connect_complete(data->conn)) {",
          "1803:             rc = CURLM_CALL_MULTI_PERFORM;",
          "1805:             multistate(data, CURLM_STATE_SENDPROTOCONNECT);",
          "1806:           }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1802:       result = Curl_is_connected(data->conn, FIRSTSOCKET, &connected);",
          "1803:       if(connected && !result) {",
          "1804: #ifndef CURL_DISABLE_HTTP",
          "1808:           multistate(data, CURLM_STATE_WAITPROXYCONNECT);",
          "1809:           break;",
          "1810:         }",
          "1811: #endif",
          "1812:         rc = CURLM_CALL_MULTI_PERFORM;",
          "1814:                    CURLM_STATE_WAITPROXYCONNECT:",
          "1815:                    CURLM_STATE_SENDPROTOCONNECT);",
          "1816:       }",
          "1817:       else if(result) {",
          "",
          "[Removed Lines]",
          "1805:         if((data->conn->http_proxy.proxytype == CURLPROXY_HTTPS &&",
          "1806:             !data->conn->bits.proxy_ssl_connected[FIRSTSOCKET]) ||",
          "1807:            Curl_connect_ongoing(data->conn)) {",
          "1813:         multistate(data, data->conn->bits.tunnel_proxy?",
          "",
          "[Added Lines]",
          "1819:         if(",
          "1820: #ifndef CURL_DISABLE_PROXY",
          "1821:           (data->conn->http_proxy.proxytype == CURLPROXY_HTTPS &&",
          "1822:            !data->conn->bits.proxy_ssl_connected[FIRSTSOCKET]) ||",
          "1823: #endif",
          "1824:           Curl_connect_ongoing(data->conn)) {",
          "1830: #ifndef CURL_DISABLE_PROXY",
          "1831:         multistate(data,",
          "1832:                    data->conn->bits.tunnel_proxy?",
          "1835: #else",
          "1836:         multistate(data, CURLM_STATE_SENDPROTOCONNECT);",
          "1837: #endif",
          "",
          "---------------"
        ],
        "lib/setopt.c||lib/setopt.c": [
          "File: lib/setopt.c -> lib/setopt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:     break;",
          "396:   case CURLOPT_SSLVERSION:",
          "397:   case CURLOPT_PROXY_SSLVERSION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397: #ifndef CURL_DISABLE_PROXY",
          "399: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "402: #ifdef USE_SSL",
          "403:     {",
          "404:       long version, version_max;",
          "409:       arg = va_arg(param, long);",
          "",
          "[Removed Lines]",
          "405:       struct ssl_primary_config *primary = (option == CURLOPT_SSLVERSION ?",
          "406:                                             &data->set.ssl.primary :",
          "407:                                             &data->set.proxy_ssl.primary);",
          "",
          "[Added Lines]",
          "407:       struct ssl_primary_config *primary = &data->set.ssl.primary;",
          "408: #ifndef CURL_DISABLE_PROXY",
          "409:       if(option != CURLOPT_SSLVERSION)",
          "410:         primary = &data->set.proxy_ssl.primary;",
          "411: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2333:   case CURLOPT_SSL_SESSIONID_CACHE:",
          "2334:     data->set.ssl.primary.sessionid = (0 != va_arg(param, long)) ?",
          "2335:       TRUE : FALSE;",
          "2336:     data->set.proxy_ssl.primary.sessionid = data->set.ssl.primary.sessionid;",
          "2337:     break;",
          "2339: #ifdef USE_SSH",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2340: #ifndef CURL_DISABLE_PROXY",
          "2342: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2635:   case CURLOPT_PROXY_TLSAUTH_USERNAME:",
          "2636:     result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_USERNAME_PROXY],",
          "2637:                             va_arg(param, char *));",
          "2638:     if(data->set.str[STRING_TLSAUTH_USERNAME_PROXY] &&",
          "2639:        !data->set.proxy_ssl.authtype)",
          "2641:     break;",
          "2642:   case CURLOPT_TLSAUTH_PASSWORD:",
          "2643:     result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_PASSWORD_ORIG],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2644: #ifndef CURL_DISABLE_PROXY",
          "2648: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2648:   case CURLOPT_PROXY_TLSAUTH_PASSWORD:",
          "2649:     result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_PASSWORD_PROXY],",
          "2650:                             va_arg(param, char *));",
          "2651:     if(data->set.str[STRING_TLSAUTH_USERNAME_PROXY] &&",
          "2652:        !data->set.proxy_ssl.authtype)",
          "2654:     break;",
          "2655:   case CURLOPT_TLSAUTH_TYPE:",
          "2656:     argptr = va_arg(param, char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2659: #ifndef CURL_DISABLE_PROXY",
          "2663: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2660:     else",
          "2661:       data->set.ssl.authtype = CURL_TLSAUTH_NONE;",
          "2662:     break;",
          "2663:   case CURLOPT_PROXY_TLSAUTH_TYPE:",
          "2664:     argptr = va_arg(param, char *);",
          "2665:     if(!argptr ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2673: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2669:       data->set.proxy_ssl.authtype = CURL_TLSAUTH_NONE;",
          "2670:     break;",
          "2671: #endif",
          "2672: #ifdef USE_ARES",
          "2673:   case CURLOPT_DNS_SERVERS:",
          "2674:     result = Curl_setstropt(&data->set.str[STRING_DNS_SERVERS],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2683: #endif",
          "",
          "---------------"
        ],
        "lib/url.c||lib/url.c": [
          "File: lib/url.c -> lib/url.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "502:   set->ssl.primary.sessionid = TRUE; /* session ID caching enabled by",
          "504:   set->proxy_ssl = set->ssl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504: #ifndef CURL_DISABLE_PROXY",
          "506: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "707:   Curl_free_idnconverted_hostname(&conn->host);",
          "708:   Curl_free_idnconverted_hostname(&conn->conn_to_host);",
          "709:   Curl_free_idnconverted_hostname(&conn->http_proxy.host);",
          "710:   Curl_free_idnconverted_hostname(&conn->socks_proxy.host);",
          "716:   Curl_safefree(conn->http_proxy.user);",
          "717:   Curl_safefree(conn->socks_proxy.user);",
          "718:   Curl_safefree(conn->http_proxy.passwd);",
          "719:   Curl_safefree(conn->socks_proxy.passwd);",
          "720:   Curl_safefree(conn->allocptr.proxyuserpwd);",
          "721:   Curl_safefree(conn->allocptr.uagent);",
          "722:   Curl_safefree(conn->allocptr.userpwd);",
          "",
          "[Removed Lines]",
          "712:   Curl_safefree(conn->user);",
          "713:   Curl_safefree(conn->passwd);",
          "714:   Curl_safefree(conn->sasl_authzid);",
          "715:   Curl_safefree(conn->options);",
          "",
          "[Added Lines]",
          "711: #ifndef CURL_DISABLE_PROXY",
          "720:   Curl_free_primary_ssl_config(&conn->proxy_ssl_config);",
          "721: #endif",
          "722:   Curl_safefree(conn->user);",
          "723:   Curl_safefree(conn->passwd);",
          "724:   Curl_safefree(conn->sasl_authzid);",
          "725:   Curl_safefree(conn->options);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "733:   Curl_safefree(conn->hostname_resolve);",
          "734:   Curl_safefree(conn->secondaryhostname);",
          "737:   Curl_safefree(conn->connect_state);",
          "739:   conn_reset_all_postponed_data(conn);",
          "740:   Curl_llist_destroy(&conn->easyq, NULL);",
          "741:   Curl_safefree(conn->localdev);",
          "742:   Curl_free_primary_ssl_config(&conn->ssl_config);",
          "745: #ifdef USE_UNIX_SOCKETS",
          "746:   Curl_safefree(conn->unix_domain_socket);",
          "",
          "[Removed Lines]",
          "743:   Curl_free_primary_ssl_config(&conn->proxy_ssl_config);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1052:   bool wantNTLMhttp = ((data->state.authhost.want &",
          "1053:                       (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&",
          "1054:                       (needle->handler->protocol & PROTO_FAMILY_HTTP));",
          "1055:   bool wantProxyNTLMhttp = (needle->bits.proxy_user_passwd &&",
          "1056:                            ((data->state.authproxy.want &",
          "1057:                            (CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&",
          "1058:                            (needle->handler->protocol & PROTO_FAMILY_HTTP)));",
          "1059: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1058: #ifndef CURL_DISABLE_PROXY",
          "1063: #else",
          "1064:   bool wantProxyNTLMhttp = FALSE;",
          "1065: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1169:           continue;",
          "1171:       if(needle->bits.httpproxy != check->bits.httpproxy ||",
          "1172:          needle->bits.socksproxy != check->bits.socksproxy)",
          "1173:         continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1178: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1176:         !socks_proxy_info_matches(&needle->socks_proxy,",
          "1177:                                   &check->socks_proxy))",
          "1178:         continue;",
          "1180:       if(needle->bits.conn_to_host != check->bits.conn_to_host)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1187: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1188:         continue;",
          "1190:       if(needle->bits.httpproxy) {",
          "1191:         if(!proxy_info_matches(&needle->http_proxy, &check->http_proxy))",
          "1192:           continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1198: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1213:           }",
          "1214:         }",
          "1215:       }",
          "1217:       DEBUGASSERT(!check->data || GOOD_EASY_HANDLE(check->data));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1225: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1255:         }",
          "1256:       }",
          "1261:            it is a non-SSL protocol tunneled or it is a non-SSL protocol which",
          "",
          "[Removed Lines]",
          "1258:       if(!needle->bits.httpproxy || (needle->handler->flags&PROTOPT_SSL) ||",
          "1259:          needle->bits.tunnel_proxy) {",
          "",
          "[Added Lines]",
          "1268:       if((needle->handler->flags&PROTOPT_SSL)",
          "1269: #ifndef CURL_DISABLE_PROXY",
          "1270:          || !needle->bits.httpproxy || needle->bits.tunnel_proxy",
          "1271: #endif",
          "1272:         ) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1325:           continue;",
          "1326:         }",
          "1329:         if(wantProxyNTLMhttp) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1341: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1341:           continue;",
          "1342:         }",
          "1344:         if(wantNTLMhttp || wantProxyNTLMhttp) {",
          "1346:           chosen = check;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1357: #endif",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1428: {",
          "1429:   if(conn->data->set.verbose)",
          "1430:     infof(conn->data, \"Connected to %s (%s) port %ld (#%ld)\\n\",",
          "1431:           conn->bits.socksproxy ? conn->socks_proxy.host.dispname :",
          "1432:           conn->bits.httpproxy ? conn->http_proxy.host.dispname :",
          "1433:           conn->bits.conn_to_host ? conn->conn_to_host.dispname :",
          "1434:           conn->host.dispname,",
          "1435:           conn->ip_addr_str, conn->port, conn->connection_id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1445: #ifndef CURL_DISABLE_PROXY",
          "1448: #endif",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1576:     conn->ssl_extra = ssl;",
          "1577:     conn->ssl[0].backend = (void *)ssl;",
          "1578:     conn->ssl[1].backend = (void *)(ssl + sslsize);",
          "1579:     conn->proxy_ssl[0].backend = (void *)(ssl + 2 * sslsize);",
          "1580:     conn->proxy_ssl[1].backend = (void *)(ssl + 3 * sslsize);",
          "1581:   }",
          "1582: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1595: #ifndef CURL_DISABLE_PROXY",
          "1598: #endif",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1616:   conn->data = data; /* Setup the association between this connection",
          "1619:   conn->http_proxy.proxytype = data->set.proxytype;",
          "1620:   conn->socks_proxy.proxytype = CURLPROXY_SOCKS4;",
          "1625:   conn->bits.proxy = (data->set.str[STRING_PROXY] &&",
          "",
          "[Removed Lines]",
          "1622: #if !defined(CURL_DISABLE_PROXY)",
          "",
          "[Added Lines]",
          "1637: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1650:   conn->ssl_config.verifystatus = data->set.ssl.primary.verifystatus;",
          "1651:   conn->ssl_config.verifypeer = data->set.ssl.primary.verifypeer;",
          "1652:   conn->ssl_config.verifyhost = data->set.ssl.primary.verifyhost;",
          "1653:   conn->proxy_ssl_config.verifystatus =",
          "1654:     data->set.proxy_ssl.primary.verifystatus;",
          "1655:   conn->proxy_ssl_config.verifypeer = data->set.proxy_ssl.primary.verifypeer;",
          "1656:   conn->proxy_ssl_config.verifyhost = data->set.proxy_ssl.primary.verifyhost;",
          "1657:   conn->ip_version = data->set.ipver;",
          "1658:   conn->bits.connect_only = data->set.connect_only;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1671: #ifndef CURL_DISABLE_PROXY",
          "1676: #endif",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3206:       }",
          "3207:     }",
          "3208:     else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3229: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3231:       }",
          "3232:     }",
          "3233:     DEBUGASSERT(conn->dns_entry == NULL);",
          "3234:     conn->dns_entry = hostaddr;",
          "3235:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3255: #endif",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3245: static void reuse_conn(struct connectdata *old_conn,",
          "3246:                        struct connectdata *conn)",
          "3247: {",
          "3248:   Curl_free_idnconverted_hostname(&old_conn->http_proxy.host);",
          "3249:   Curl_free_idnconverted_hostname(&old_conn->socks_proxy.host);",
          "3251:   free(old_conn->http_proxy.host.rawalloc);",
          "3252:   free(old_conn->socks_proxy.host.rawalloc);",
          "3256:   Curl_free_primary_ssl_config(&old_conn->ssl_config);",
          "3259:   conn->data = old_conn->data;",
          "",
          "[Removed Lines]",
          "3257:   Curl_free_primary_ssl_config(&old_conn->proxy_ssl_config);",
          "",
          "[Added Lines]",
          "3271: #ifndef CURL_DISABLE_PROXY",
          "3277:   Curl_free_primary_ssl_config(&old_conn->proxy_ssl_config);",
          "3278: #endif",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3271:     old_conn->passwd = NULL;",
          "3272:   }",
          "3274:   conn->bits.proxy_user_passwd = old_conn->bits.proxy_user_passwd;",
          "3275:   if(conn->bits.proxy_user_passwd) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3298: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3287:     old_conn->http_proxy.passwd = NULL;",
          "3288:     old_conn->socks_proxy.passwd = NULL;",
          "3289:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3315:   Curl_safefree(old_conn->http_proxy.user);",
          "3316:   Curl_safefree(old_conn->socks_proxy.user);",
          "3317:   Curl_safefree(old_conn->http_proxy.passwd);",
          "3318:   Curl_safefree(old_conn->socks_proxy.passwd);",
          "3319: #endif",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3314:   Curl_safefree(old_conn->user);",
          "3315:   Curl_safefree(old_conn->passwd);",
          "3316:   Curl_safefree(old_conn->options);",
          "3321:   Curl_safefree(old_conn->localdev);",
          "3322:   Curl_llist_destroy(&old_conn->easyq, NULL);",
          "",
          "[Removed Lines]",
          "3317:   Curl_safefree(old_conn->http_proxy.user);",
          "3318:   Curl_safefree(old_conn->socks_proxy.user);",
          "3319:   Curl_safefree(old_conn->http_proxy.passwd);",
          "3320:   Curl_safefree(old_conn->socks_proxy.passwd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3412:   result = create_conn_helper_init_proxy(conn);",
          "3413:   if(result)",
          "3414:     goto out;",
          "",
          "[Removed Lines]",
          "3415: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3421:   if((conn->given->flags&PROTOPT_SSL) && conn->bits.httpproxy)",
          "3422:     conn->bits.tunnel_proxy = TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3448: #endif",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3458:     if(result)",
          "3459:       goto out;",
          "3460:   }",
          "3461:   if(conn->bits.httpproxy) {",
          "3462:     result = Curl_idnconvert_hostname(conn, &conn->http_proxy.host);",
          "3463:     if(result)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3487: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3468:     if(result)",
          "3469:       goto out;",
          "3470:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3498: #endif",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3486:     conn->bits.conn_to_port = FALSE;",
          "3487:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3517: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3493:   if((conn->bits.conn_to_host || conn->bits.conn_to_port) &&",
          "3494:       conn->bits.httpproxy)",
          "3495:     conn->bits.tunnel_proxy = TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3525: #endif",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3560:      copies will be separately allocated.",
          "3562:   data->set.ssl.primary.CApath = data->set.str[STRING_SSL_CAPATH_ORIG];",
          "3564:   data->set.ssl.primary.CAfile = data->set.str[STRING_SSL_CAFILE_ORIG];",
          "3566:   data->set.ssl.primary.random_file = data->set.str[STRING_SSL_RANDOM_FILE];",
          "3569:   data->set.ssl.primary.egdsocket = data->set.str[STRING_SSL_EGDSOCKET];",
          "3571:   data->set.ssl.primary.cipher_list =",
          "3572:     data->set.str[STRING_SSL_CIPHER_LIST_ORIG];",
          "3575:   data->set.ssl.primary.cipher_list13 =",
          "3576:     data->set.str[STRING_SSL_CIPHER13_LIST_ORIG];",
          "3579:   data->set.ssl.primary.pinned_key =",
          "3580:     data->set.str[STRING_SSL_PINNEDPUBLICKEY_ORIG];",
          "3581:   data->set.proxy_ssl.primary.pinned_key =",
          "3582:     data->set.str[STRING_SSL_PINNEDPUBLICKEY_PROXY];",
          "3585:   data->set.proxy_ssl.CRLfile = data->set.str[STRING_SSL_CRLFILE_PROXY];",
          "3587:   data->set.proxy_ssl.issuercert = data->set.str[STRING_SSL_ISSUERCERT_PROXY];",
          "3589:   data->set.proxy_ssl.cert = data->set.str[STRING_CERT_PROXY];",
          "3591:   data->set.proxy_ssl.cert_type = data->set.str[STRING_CERT_TYPE_PROXY];",
          "3593:   data->set.proxy_ssl.key = data->set.str[STRING_KEY_PROXY];",
          "3595:   data->set.proxy_ssl.key_type = data->set.str[STRING_KEY_TYPE_PROXY];",
          "3597:   data->set.proxy_ssl.key_passwd = data->set.str[STRING_KEY_PASSWD_PROXY];",
          "3599:   data->set.proxy_ssl.primary.clientcert = data->set.str[STRING_CERT_PROXY];",
          "3600: #ifdef USE_TLS_SRP",
          "3601:   data->set.ssl.username = data->set.str[STRING_TLSAUTH_USERNAME_ORIG];",
          "3603:   data->set.ssl.password = data->set.str[STRING_TLSAUTH_PASSWORD_ORIG];",
          "3604:   data->set.proxy_ssl.password = data->set.str[STRING_TLSAUTH_PASSWORD_PROXY];",
          "3605: #endif",
          "3607:   data->set.ssl.cert_blob = data->set.blobs[BLOB_CERT_ORIG];",
          "3609:   data->set.ssl.key_blob = data->set.blobs[BLOB_KEY_ORIG];",
          "3611:   data->set.ssl.issuercert_blob = data->set.blobs[BLOB_SSL_ISSUERCERT_ORIG];",
          "3613:   if(!Curl_clone_primary_ssl_config(&data->set.ssl.primary,",
          "",
          "[Removed Lines]",
          "3563:   data->set.proxy_ssl.primary.CApath = data->set.str[STRING_SSL_CAPATH_PROXY];",
          "3565:   data->set.proxy_ssl.primary.CAfile = data->set.str[STRING_SSL_CAFILE_PROXY];",
          "3567:   data->set.proxy_ssl.primary.random_file =",
          "3568:     data->set.str[STRING_SSL_RANDOM_FILE];",
          "3570:   data->set.proxy_ssl.primary.egdsocket = data->set.str[STRING_SSL_EGDSOCKET];",
          "3573:   data->set.proxy_ssl.primary.cipher_list =",
          "3574:     data->set.str[STRING_SSL_CIPHER_LIST_PROXY];",
          "3577:   data->set.proxy_ssl.primary.cipher_list13 =",
          "3578:     data->set.str[STRING_SSL_CIPHER13_LIST_PROXY];",
          "3584:   data->set.ssl.CRLfile = data->set.str[STRING_SSL_CRLFILE_ORIG];",
          "3586:   data->set.ssl.issuercert = data->set.str[STRING_SSL_ISSUERCERT_ORIG];",
          "3588:   data->set.ssl.cert = data->set.str[STRING_CERT_ORIG];",
          "3590:   data->set.ssl.cert_type = data->set.str[STRING_CERT_TYPE_ORIG];",
          "3592:   data->set.ssl.key = data->set.str[STRING_KEY_ORIG];",
          "3594:   data->set.ssl.key_type = data->set.str[STRING_KEY_TYPE_ORIG];",
          "3596:   data->set.ssl.key_passwd = data->set.str[STRING_KEY_PASSWD_ORIG];",
          "3598:   data->set.ssl.primary.clientcert = data->set.str[STRING_CERT_ORIG];",
          "3602:   data->set.proxy_ssl.username = data->set.str[STRING_TLSAUTH_USERNAME_PROXY];",
          "3608:   data->set.proxy_ssl.cert_blob = data->set.blobs[BLOB_CERT_PROXY];",
          "3610:   data->set.proxy_ssl.key_blob = data->set.blobs[BLOB_KEY_PROXY];",
          "",
          "[Added Lines]",
          "3603: #ifndef CURL_DISABLE_PROXY",
          "3604:   data->set.proxy_ssl.primary.CApath = data->set.str[STRING_SSL_CAPATH_PROXY];",
          "3605:   data->set.proxy_ssl.primary.CAfile = data->set.str[STRING_SSL_CAFILE_PROXY];",
          "3606:   data->set.proxy_ssl.primary.random_file =",
          "3607:     data->set.str[STRING_SSL_RANDOM_FILE];",
          "3608:   data->set.proxy_ssl.primary.egdsocket = data->set.str[STRING_SSL_EGDSOCKET];",
          "3609:   data->set.proxy_ssl.primary.cipher_list =",
          "3610:     data->set.str[STRING_SSL_CIPHER_LIST_PROXY];",
          "3611:   data->set.proxy_ssl.primary.cipher_list13 =",
          "3612:     data->set.str[STRING_SSL_CIPHER13_LIST_PROXY];",
          "3623:   data->set.proxy_ssl.cert_blob = data->set.blobs[BLOB_CERT_PROXY];",
          "3624:   data->set.proxy_ssl.key_blob = data->set.blobs[BLOB_KEY_PROXY];",
          "3625: #endif",
          "3626:   data->set.ssl.CRLfile = data->set.str[STRING_SSL_CRLFILE_ORIG];",
          "3627:   data->set.ssl.issuercert = data->set.str[STRING_SSL_ISSUERCERT_ORIG];",
          "3628:   data->set.ssl.cert = data->set.str[STRING_CERT_ORIG];",
          "3629:   data->set.ssl.cert_type = data->set.str[STRING_CERT_TYPE_ORIG];",
          "3630:   data->set.ssl.key = data->set.str[STRING_KEY_ORIG];",
          "3631:   data->set.ssl.key_type = data->set.str[STRING_KEY_TYPE_ORIG];",
          "3632:   data->set.ssl.key_passwd = data->set.str[STRING_KEY_PASSWD_ORIG];",
          "3633:   data->set.ssl.primary.clientcert = data->set.str[STRING_CERT_ORIG];",
          "3637: #ifndef CURL_DISABLE_PROXY",
          "3638:   data->set.proxy_ssl.username = data->set.str[STRING_TLSAUTH_USERNAME_PROXY];",
          "3640: #endif",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3616:     goto out;",
          "3617:   }",
          "3619:   if(!Curl_clone_primary_ssl_config(&data->set.proxy_ssl.primary,",
          "3620:                                     &conn->proxy_ssl_config)) {",
          "3621:     result = CURLE_OUT_OF_MEMORY;",
          "3622:     goto out;",
          "3623:   }",
          "3625:   prune_dead_connections(data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3653: #ifndef CURL_DISABLE_PROXY",
          "3659: #endif",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3658:     conn = conn_temp;",
          "3661:     infof(data, \"Re-using existing connection! (#%ld) with %s %s\\n\",",
          "3662:           conn->connection_id,",
          "3663:           conn->bits.proxy?\"proxy\":\"host\",",
          "3664:           conn->socks_proxy.host.name ? conn->socks_proxy.host.dispname :",
          "3665:           conn->http_proxy.host.name ? conn->http_proxy.host.dispname :",
          "3667:   }",
          "3668:   else {",
          "",
          "[Removed Lines]",
          "3666:                                        conn->host.dispname);",
          "",
          "[Added Lines]",
          "3697: #ifndef CURL_DISABLE_PROXY",
          "3703:           conn->host.dispname);",
          "3704: #else",
          "3705:     infof(data, \"Re-using existing connection! (#%ld) with host %s\\n\",",
          "3706:           conn->connection_id, conn->host.dispname);",
          "3707: #endif",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3796:   strip_trailing_dot(&conn->host);",
          "3797:   if(conn->bits.httpproxy)",
          "3798:     strip_trailing_dot(&conn->http_proxy.host);",
          "3799:   if(conn->bits.socksproxy)",
          "3800:     strip_trailing_dot(&conn->socks_proxy.host);",
          "3801:   if(conn->bits.conn_to_host)",
          "3802:     strip_trailing_dot(&conn->conn_to_host);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3838: #ifndef CURL_DISABLE_PROXY",
          "3843: #endif",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3828:   }",
          "3832:      is used strictly to provide extra information to a parent function in the",
          "3833:      case of proxy CONNECT failures and we must make sure we don't have it",
          "3835:   conn->bits.proxy_connect_closed = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3874: #ifndef CURL_DISABLE_PROXY",
          "3880: #endif",
          "",
          "---------------"
        ],
        "lib/url.h||lib/url.h": [
          "File: lib/url.h -> lib/url.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: void Curl_verboseconnect(struct connectdata *conn);",
          "78: #endif",
          "80: #define CONNECT_PROXY_SSL()\\",
          "81:   (conn->http_proxy.proxytype == CURLPROXY_HTTPS &&\\",
          "82:   !conn->bits.proxy_ssl_connected[sockindex])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: #ifdef CURL_DISABLE_PROXY",
          "81: #define CONNECT_PROXY_SSL() FALSE",
          "82: #else",
          "",
          "---------------"
        ],
        "lib/urldata.h||lib/urldata.h": [
          "File: lib/urldata.h -> lib/urldata.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "422: struct ConnectBits {",
          "426:   bool tcpconnect[2]; /* the TCP layer (or similar) is connected, this is set",
          "",
          "[Removed Lines]",
          "424:   bool proxy_ssl_connected[2]; /* TRUE when SSL initialization for HTTPS proxy",
          "",
          "[Added Lines]",
          "425: #ifndef CURL_DISABLE_PROXY",
          "426:   bool proxy_ssl_connected[2]; /* TRUE when SSL initialization for HTTPS proxy",
          "431:   BIT(tunnel_proxy);  /* if CONNECT is used to \"tunnel\" through the proxy.",
          "432:                          This is implicit when SSL-protocols are used through",
          "433:                          proxies, but can also be enabled explicitly by",
          "435:   BIT(proxy_connect_closed); /* TRUE if a proxy disconnected the connection",
          "436:                                 in a CONNECT request with auth, so that",
          "438: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:   BIT(retry);         /* this connection is about to get closed and then",
          "453:   BIT(authneg);       /* TRUE when the auth phase has started, which means",
          "454:                          that we are creating a request with an auth header,",
          "455:                          but it is not the final request in the auth",
          "",
          "[Removed Lines]",
          "449:   BIT(tunnel_proxy);  /* if CONNECT is used to \"tunnel\" through the proxy.",
          "450:                          This is implicit when SSL-protocols are used through",
          "451:                          proxies, but can also be enabled explicitly by",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "469: #endif",
          "474:   BIT(bound); /* set true if bind() has already been done on this socket/",
          "",
          "[Removed Lines]",
          "471:   BIT(proxy_connect_closed); /* TRUE if a proxy disconnected the connection",
          "472:                                 in a CONNECT request with auth, so that",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "911:   struct hostname conn_to_host; /* the host to connect to. valid only if",
          "914:   struct proxy_info socks_proxy;",
          "915:   struct proxy_info http_proxy;",
          "919:   int conn_to_port; /* the remote port to connect to. valid only if",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "915: #ifndef CURL_DISABLE_PROXY",
          "918: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "965: #ifdef USE_SSL",
          "967: #endif",
          "968:   struct ssl_primary_config ssl_config;",
          "969:   struct ssl_primary_config proxy_ssl_config;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "966: #ifndef CURL_DISABLE_PROXY",
          "968: #endif",
          "973: #ifndef CURL_DISABLE_PROXY",
          "975: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1676:   long httpversion; /* when non-zero, a specific HTTP version requested to",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1685: #ifndef CURL_DISABLE_PROXY",
          "1687: #endif",
          "",
          "---------------"
        ],
        "lib/vtls/openssl.c||lib/vtls/openssl.c": [
          "File: lib/vtls/openssl.c -> lib/vtls/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1339: static void Curl_ossl_close(struct connectdata *conn, int sockindex)",
          "1340: {",
          "1341:   ossl_close(&conn->ssl[sockindex]);",
          "1342:   ossl_close(&conn->proxy_ssl[sockindex]);",
          "1343: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1342: #ifndef CURL_DISABLE_PROXY",
          "1344: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1566:   CURLcode result = CURLE_OK;",
          "1571:   const char * const dispname = SSL_IS_PROXY() ?",
          "1572:     conn->http_proxy.host.dispname : conn->host.dispname;",
          "1574: #ifdef ENABLE_IPV6",
          "1575:   if(conn->bits.ipv6_ip &&",
          "",
          "[Removed Lines]",
          "1569:   const char * const hostname = SSL_IS_PROXY() ? conn->http_proxy.host.name :",
          "1570:     conn->host.name;",
          "",
          "[Added Lines]",
          "1571: #ifndef CURL_DISABLE_PROXY",
          "1572:   const char * const hostname = SSL_IS_PROXY() ?",
          "1573:     conn->http_proxy.host.name : conn->host.name;",
          "1576: #else",
          "1578:   const char * const hostname = conn->host.name;",
          "1579:   const char * const dispname = conn->host.dispname;",
          "1580: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2449: #ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME",
          "2450:   bool sni;",
          "2451:   const char * const hostname = SSL_IS_PROXY() ? conn->http_proxy.host.name :",
          "2452:     conn->host.name;",
          "2453: #ifdef ENABLE_IPV6",
          "2454:   struct in6_addr addr;",
          "2455: #else",
          "2456:   struct in_addr addr;",
          "2457: #endif",
          "2458: #endif",
          "2459:   long * const certverifyresult = SSL_IS_PROXY() ?",
          "2460:     &data->set.proxy_ssl.certverifyresult : &data->set.ssl.certverifyresult;",
          "2461:   const long int ssl_version = SSL_CONN_CONFIG(version);",
          "2462: #ifdef USE_TLS_SRP",
          "2463:   const enum CURL_TLSAUTH ssl_authtype = SSL_SET_OPTION(authtype);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2459: #ifndef CURL_DISABLE_PROXY",
          "2462: #else",
          "2463:   const char * const hostname = conn->host.name;",
          "2464: #endif",
          "2472: #ifndef CURL_DISABLE_PROXY",
          "2475: #else",
          "2476:   long * const certverifyresult = &data->set.ssl.certverifyresult;",
          "2477: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2685:     unsigned char protocols[128];",
          "2687: #ifdef USE_NGHTTP2",
          "2690:       protocols[cur++] = NGHTTP2_PROTO_VERSION_ID_LEN;",
          "2692:       memcpy(&protocols[cur], NGHTTP2_PROTO_VERSION_ID,",
          "",
          "[Removed Lines]",
          "2688:     if(data->set.httpversion >= CURL_HTTP_VERSION_2 &&",
          "2689:        (!SSL_IS_PROXY() || !conn->bits.tunnel_proxy)) {",
          "",
          "[Added Lines]",
          "2705:     if(data->set.httpversion >= CURL_HTTP_VERSION_2",
          "2706: #ifndef CURL_DISABLE_PROXY",
          "2707:        && (!SSL_IS_PROXY() || !conn->bits.tunnel_proxy)",
          "2708: #endif",
          "2709:       ) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3153:     Curl_ssl_sessionid_unlock(conn);",
          "3154:   }",
          "3156:   if(conn->proxy_ssl[sockindex].use) {",
          "3157:     BIO *const bio = BIO_new(BIO_f_ssl());",
          "3158:     SSL *handle = conn->proxy_ssl[sockindex].backend->handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3176: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3162:     BIO_set_ssl(bio, handle, FALSE);",
          "3163:     SSL_set_bio(backend->handle, bio, bio);",
          "3164:   }",
          "3167:     failf(data, \"SSL: SSL_set_fd failed: %s\",",
          "3168:           ossl_strerror(ERR_get_error(), error_buffer, sizeof(error_buffer)));",
          "",
          "[Removed Lines]",
          "3165:   else if(!SSL_set_fd(backend->handle, (int)sockfd)) {",
          "",
          "[Added Lines]",
          "3186:   else",
          "3187: #endif",
          "3188:     if(!SSL_set_fd(backend->handle, (int)sockfd)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3179:   struct Curl_easy *data = conn->data;",
          "3180:   int err;",
          "3181:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "3182:   long * const certverifyresult = SSL_IS_PROXY() ?",
          "3183:     &data->set.proxy_ssl.certverifyresult : &data->set.ssl.certverifyresult;",
          "3184:   struct ssl_backend_data *backend = connssl->backend;",
          "3185:   DEBUGASSERT(ssl_connect_2 == connssl->connecting_state",
          "3186:               || ssl_connect_2_reading == connssl->connecting_state",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3205: #ifndef CURL_DISABLE_PROXY",
          "3208: #else",
          "3209:   long * const certverifyresult = &data->set.ssl.certverifyresult;",
          "3210: #endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3268:       if(CURLE_SSL_CONNECT_ERROR == result && errdetail == 0) {",
          "3269:         const char * const hostname = SSL_IS_PROXY() ?",
          "3270:           conn->http_proxy.host.name : conn->host.name;",
          "3271:         const long int port = SSL_IS_PROXY() ? conn->port : conn->remote_port;",
          "3272:         char extramsg[80]=\"\";",
          "3273:         int sockerr = SOCKERRNO;",
          "3274:         if(sockerr && detail == SSL_ERROR_SYSCALL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3296: #ifndef CURL_DISABLE_PROXY",
          "3300: #else",
          "3301:         const char * const hostname = conn->host.name;",
          "3302:         const long int port = conn->remote_port;",
          "3303: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3721:   char error_buffer[256]=\"\";",
          "3722:   char buffer[2048];",
          "3723:   const char *ptr;",
          "3724:   long * const certverifyresult = SSL_IS_PROXY() ?",
          "3725:     &data->set.proxy_ssl.certverifyresult : &data->set.ssl.certverifyresult;",
          "3726:   BIO *mem = BIO_new(BIO_s_mem());",
          "3727:   struct ssl_backend_data *backend = connssl->backend;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3756: #ifndef CURL_DISABLE_PROXY",
          "3759: #else",
          "3760:   long * const certverifyresult = &data->set.ssl.certverifyresult;",
          "3761: #endif",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4054:                                    int connindex)",
          "4055: {",
          "4056:   const struct ssl_connect_data *connssl = &conn->ssl[connindex];",
          "4059:   if(connssl->backend->handle && SSL_pending(connssl->backend->handle))",
          "4060:     return TRUE;",
          "4065:   return FALSE;",
          "4066: }",
          "",
          "[Removed Lines]",
          "4057:   const struct ssl_connect_data *proxyssl = &conn->proxy_ssl[connindex];",
          "4062:   if(proxyssl->backend->handle && SSL_pending(proxyssl->backend->handle))",
          "4063:     return TRUE;",
          "",
          "[Added Lines]",
          "4095: #ifndef CURL_DISABLE_PROXY",
          "4096:   {",
          "4097:     const struct ssl_connect_data *proxyssl = &conn->proxy_ssl[connindex];",
          "4098:     if(proxyssl->backend->handle && SSL_pending(proxyssl->backend->handle))",
          "4099:       return TRUE;",
          "4100:   }",
          "4101: #endif",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4122:       sslerror = ERR_get_error();",
          "4123:       if(ERR_GET_LIB(sslerror) == ERR_LIB_SSL &&",
          "4124:          ERR_GET_REASON(sslerror) == SSL_R_BIO_NOT_SET &&",
          "4127:         char ver[120];",
          "4128:         Curl_ossl_version(ver, 120);",
          "4129:         failf(conn->data, \"Error: %s does not support double SSL tunneling.\",",
          "",
          "[Removed Lines]",
          "4125:          conn->ssl[sockindex].state == ssl_connection_complete &&",
          "4126:          conn->proxy_ssl[sockindex].state == ssl_connection_complete) {",
          "",
          "[Added Lines]",
          "4162:          conn->ssl[sockindex].state == ssl_connection_complete",
          "4163: #ifndef CURL_DISABLE_PROXY",
          "4164:          && conn->proxy_ssl[sockindex].state == ssl_connection_complete",
          "4165: #endif",
          "4166:         ) {",
          "",
          "---------------"
        ],
        "lib/vtls/vtls.c||lib/vtls/vtls.c": [
          "File: lib/vtls/vtls.c -> lib/vtls/vtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:   return TRUE;",
          "216: }",
          "218: static CURLcode",
          "219: ssl_connect_init_proxy(struct connectdata *conn, int sockindex)",
          "220: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218: #ifndef CURL_DISABLE_PROXY",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:   }",
          "239:   return CURLE_OK;",
          "240: }",
          "242: CURLcode",
          "243: Curl_ssl_connect(struct connectdata *conn, int sockindex)",
          "244: {",
          "245:   CURLcode result;",
          "247:   if(conn->bits.proxy_ssl_connected[sockindex]) {",
          "248:     result = ssl_connect_init_proxy(conn, sockindex);",
          "249:     if(result)",
          "250:       return result;",
          "251:   }",
          "253:   if(!ssl_prefs_check(conn->data))",
          "254:     return CURLE_SSL_CONNECT_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242: #endif",
          "249: #ifndef CURL_DISABLE_PROXY",
          "255: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "270:                              bool *done)",
          "271: {",
          "272:   CURLcode result;",
          "273:   if(conn->bits.proxy_ssl_connected[sockindex]) {",
          "274:     result = ssl_connect_init_proxy(conn, sockindex);",
          "275:     if(result)",
          "276:       return result;",
          "277:   }",
          "279:   if(!ssl_prefs_check(conn->data))",
          "280:     return CURLE_SSL_CONNECT_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: #ifndef CURL_DISABLE_PROXY",
          "283: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "321:   long *general_age;",
          "322:   bool no_match = TRUE;",
          "324:   const bool isProxy = CONNECT_PROXY_SSL();",
          "325:   struct ssl_primary_config * const ssl_config = isProxy ?",
          "326:     &conn->proxy_ssl_config :",
          "327:     &conn->ssl_config;",
          "330:   int port = isProxy ? (int)conn->port : conn->remote_port;",
          "333:   DEBUGASSERT(SSL_SET_OPTION(primary.sessionid));",
          "",
          "[Removed Lines]",
          "328:   const char * const name = isProxy ? conn->http_proxy.host.name :",
          "329:     conn->host.name;",
          "",
          "[Added Lines]",
          "329: #ifndef CURL_DISABLE_PROXY",
          "334:   const char * const name = isProxy ?",
          "335:     conn->http_proxy.host.name : conn->host.name;",
          "337: #else",
          "339:   struct ssl_primary_config * const ssl_config = &conn->ssl_config;",
          "340:   const char * const name = conn->host.name;",
          "341:   int port = conn->remote_port;",
          "342:   (void)sockindex;",
          "343: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "429:   char *clone_conn_to_host;",
          "430:   int conn_to_port;",
          "431:   long *general_age;",
          "432:   const bool isProxy = CONNECT_PROXY_SSL();",
          "433:   struct ssl_primary_config * const ssl_config = isProxy ?",
          "434:     &conn->proxy_ssl_config :",
          "435:     &conn->ssl_config;",
          "437:   DEBUGASSERT(SSL_SET_OPTION(primary.sessionid));",
          "440:   if(!clone_host)",
          "",
          "[Removed Lines]",
          "439:   clone_host = strdup(isProxy ? conn->http_proxy.host.name : conn->host.name);",
          "",
          "[Added Lines]",
          "445: #ifndef CURL_DISABLE_PROXY",
          "450:   const char *hostname = isProxy ? conn->http_proxy.host.name :",
          "451:     conn->host.name;",
          "452: #else",
          "454:   const bool isProxy = FALSE;",
          "455:   struct ssl_primary_config * const ssl_config = &conn->ssl_config;",
          "456:   const char *hostname = conn->host.name;",
          "457:   (void)sockindex;",
          "458: #endif",
          "461:   clone_host = strdup(hostname);",
          "",
          "---------------"
        ],
        "lib/vtls/vtls.h||lib/vtls/vtls.h": [
          "File: lib/vtls/vtls.h -> lib/vtls/vtls.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: bool Curl_ssl_config_matches(struct ssl_primary_config *data,",
          "142:                              struct ssl_primary_config *needle);",
          "",
          "[Removed Lines]",
          "133: #define SSL_IS_PROXY() (CURLPROXY_HTTPS == conn->http_proxy.proxytype && \\",
          "134:   ssl_connection_complete != conn->proxy_ssl[conn->sock[SECONDARYSOCKET] == \\",
          "135:   CURL_SOCKET_BAD ? FIRSTSOCKET : SECONDARYSOCKET].state)",
          "136: #define SSL_SET_OPTION(var) (SSL_IS_PROXY() ? data->set.proxy_ssl.var : \\",
          "137:                              data->set.ssl.var)",
          "138: #define SSL_CONN_CONFIG(var) (SSL_IS_PROXY() ?          \\",
          "139:   conn->proxy_ssl_config.var : conn->ssl_config.var)",
          "",
          "[Added Lines]",
          "132: #ifndef CURL_DISABLE_PROXY",
          "133: #define SSL_IS_PROXY()                                                  \\",
          "134:   (CURLPROXY_HTTPS == conn->http_proxy.proxytype &&                     \\",
          "135:    ssl_connection_complete !=                                           \\",
          "136:    conn->proxy_ssl[conn->sock[SECONDARYSOCKET] ==                       \\",
          "137:                    CURL_SOCKET_BAD ? FIRSTSOCKET : SECONDARYSOCKET].state)",
          "138: #define SSL_SET_OPTION(var)                                             \\",
          "139:   (SSL_IS_PROXY() ? data->set.proxy_ssl.var : data->set.ssl.var)",
          "140: #define SSL_CONN_CONFIG(var)                                            \\",
          "141:   (SSL_IS_PROXY() ? conn->proxy_ssl_config.var : conn->ssl_config.var)",
          "142: #else",
          "143: #define SSL_IS_PROXY() FALSE",
          "144: #define SSL_SET_OPTION(var) data->set.ssl.var",
          "145: #define SSL_CONN_CONFIG(var) conn->ssl_config.var",
          "146: #endif",
          "",
          "---------------"
        ],
        "lib/vtls/wolfssl.c||lib/vtls/wolfssl.c": [
          "File: lib/vtls/wolfssl.c -> lib/vtls/wolfssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416: #ifdef ENABLE_IPV6",
          "417:     struct in6_addr addr6;",
          "418: #endif",
          "419:     const char * const hostname = SSL_IS_PROXY() ? conn->http_proxy.host.name :",
          "420:       conn->host.name;",
          "421:     size_t hostname_len = strlen(hostname);",
          "422:     if((hostname_len < USHRT_MAX) &&",
          "423:        (0 == Curl_inet_pton(AF_INET, hostname, &addr4)) &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419: #ifndef CURL_DISABLE_PROXY",
          "422: #else",
          "423:     const char * const hostname = conn->host.name;",
          "424: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "538:   struct Curl_easy *data = conn->data;",
          "539:   struct ssl_connect_data *connssl = &conn->ssl[sockindex];",
          "540:   struct ssl_backend_data *backend = connssl->backend;",
          "541:   const char * const hostname = SSL_IS_PROXY() ? conn->http_proxy.host.name :",
          "542:     conn->host.name;",
          "543:   const char * const dispname = SSL_IS_PROXY() ?",
          "544:     conn->http_proxy.host.dispname : conn->host.dispname;",
          "545:   const char * const pinnedpubkey = SSL_IS_PROXY() ?",
          "549:   conn->recv[sockindex] = wolfssl_recv;",
          "550:   conn->send[sockindex] = wolfssl_send;",
          "",
          "[Removed Lines]",
          "546:                         data->set.str[STRING_SSL_PINNEDPUBLICKEY_PROXY] :",
          "547:                         data->set.str[STRING_SSL_PINNEDPUBLICKEY_ORIG];",
          "",
          "[Added Lines]",
          "545: #ifndef CURL_DISABLE_PROXY",
          "551:     data->set.str[STRING_SSL_PINNEDPUBLICKEY_PROXY] :",
          "552:     data->set.str[STRING_SSL_PINNEDPUBLICKEY_ORIG];",
          "553: #else",
          "554:   const char * const hostname = conn->host.name;",
          "555:   const char * const dispname = conn->host.dispname;",
          "556:   const char * const pinnedpubkey =",
          "557:     data->set.str[STRING_SSL_PINNEDPUBLICKEY_ORIG];",
          "558: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60de76e2ada650c5f87de3760771089f466a6b8a",
      "candidate_info": {
        "commit_hash": "60de76e2ada650c5f87de3760771089f466a6b8a",
        "repo": "curl/curl",
        "commit_url": "https://github.com/curl/curl/commit/60de76e2ada650c5f87de3760771089f466a6b8a",
        "files": [
          "lib/vtls/openssl.c"
        ],
        "message": "openssl: lowercase the hostname before using it for SNI\n\n... because it turns out several servers out there don't actually behave\ncorrectly otherwise in spite of the fact that the SNI field is\nspecifically said to be case insensitive in RFC 6066 section 3.\n\nReported-by: David Earl\nFixes #6540\nCloses #6543",
        "before_after_code_files": [
          "lib/vtls/openssl.c||lib/vtls/openssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/vtls/openssl.c||lib/vtls/openssl.c"
          ],
          "candidate": [
            "lib/vtls/openssl.c||lib/vtls/openssl.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/vtls/openssl.c||lib/vtls/openssl.c": [
          "File: lib/vtls/openssl.c -> lib/vtls/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3189: #ifdef ENABLE_IPV6",
          "3190:      (0 == Curl_inet_pton(AF_INET6, hostname, &addr)) &&",
          "3191: #endif",
          "3196: #endif",
          "",
          "[Removed Lines]",
          "3192:      sni &&",
          "3193:      !SSL_set_tlsext_host_name(backend->handle, hostname))",
          "3194:     infof(data, \"WARNING: failed to configure server name indication (SNI) \"",
          "3195:           \"TLS extension\\n\");",
          "",
          "[Added Lines]",
          "3192:      sni) {",
          "3193:     size_t nlen = strlen(hostname);",
          "3194:     if((long)nlen >= data->set.buffer_size)",
          "3196:       return CURLE_SSL_CONNECT_ERROR;",
          "3199:        send the data lowercase and subsequently there are now numerous servers",
          "3201:     Curl_strntolower(data->state.buffer, hostname, nlen);",
          "3202:     data->state.buffer[nlen] = 0;",
          "3203:     if(!SSL_set_tlsext_host_name(backend->handle, data->state.buffer))",
          "3204:       infof(data, \"WARNING: failed to configure server name indication (SNI) \"",
          "3205:             \"TLS extension\\n\");",
          "3206:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a97eb81d9480d345f894a82f7147be0238c15998",
      "candidate_info": {
        "commit_hash": "a97eb81d9480d345f894a82f7147be0238c15998",
        "repo": "curl/curl",
        "commit_url": "https://github.com/curl/curl/commit/a97eb81d9480d345f894a82f7147be0238c15998",
        "files": [
          "lib/vtls/openssl.c",
          "lib/vtls/vtls.h"
        ],
        "message": "openssl: check SSL_get_ex_data to prevent potential NULL dereference\n\nCloses #8268",
        "before_after_code_files": [
          "lib/vtls/openssl.c||lib/vtls/openssl.c",
          "lib/vtls/vtls.h||lib/vtls/vtls.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/vtls/openssl.c||lib/vtls/openssl.c",
            "lib/vtls/vtls.h||lib/vtls/vtls.h"
          ],
          "candidate": [
            "lib/vtls/openssl.c||lib/vtls/openssl.c",
            "lib/vtls/vtls.h||lib/vtls/vtls.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/vtls/openssl.c||lib/vtls/openssl.c": [
          "File: lib/vtls/openssl.c -> lib/vtls/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "266: #endif",
          "267: };",
          "270:                                       struct connectdata *conn,",
          "271:                                       int sockindex);",
          "",
          "[Removed Lines]",
          "269: static void ossl_associate_connection(struct Curl_easy *data,",
          "",
          "[Added Lines]",
          "269: static bool ossl_associate_connection(struct Curl_easy *data,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2523:     return 0;",
          "2525:   conn = (struct connectdata*) SSL_get_ex_data(ssl, connectdata_idx);",
          "2529:   data = (struct Curl_easy *) SSL_get_ex_data(ssl, data_idx);",
          "2532:   sockindex_ptr = (curl_socket_t*) SSL_get_ex_data(ssl, sockindex_idx);",
          "2533:   sockindex = (int)(sockindex_ptr - conn->sock);",
          "2535:   isproxy = SSL_get_ex_data(ssl, proxy_idx) ? TRUE : FALSE;",
          "",
          "[Removed Lines]",
          "2526:   if(!conn)",
          "2527:     return 0;",
          "",
          "[Added Lines]",
          "2529:   if(!conn || !data || !sockindex_ptr)",
          "2530:     return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3261:   }",
          "3262: #endif",
          "3266:   Curl_ssl_sessionid_lock(data);",
          "3267:   if(!Curl_ssl_getsessionid(data, conn, SSL_IS_PROXY() ? TRUE : FALSE,",
          "",
          "[Removed Lines]",
          "3264:   ossl_associate_connection(data, conn, sockindex);",
          "",
          "[Added Lines]",
          "3263:   if(!ossl_associate_connection(data, conn, sockindex)) {",
          "3265:     failf(data, \"SSL: ossl_associate_connection failed: %s\",",
          "3266:           ossl_strerror(ERR_get_error(), error_buffer,",
          "3267:                         sizeof(error_buffer)));",
          "3268:     return CURLE_SSL_CONNECT_ERROR;",
          "3269:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4548:          (void *)backend->ctx : (void *)backend->handle;",
          "4549: }",
          "4552:                                       struct connectdata *conn,",
          "4553:                                       int sockindex)",
          "4554: {",
          "",
          "[Removed Lines]",
          "4551: static void ossl_associate_connection(struct Curl_easy *data,",
          "",
          "[Added Lines]",
          "4556: static bool ossl_associate_connection(struct Curl_easy *data,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4559:   if(!backend->handle)",
          "4562:   if(SSL_SET_OPTION(primary.sessionid)) {",
          "4563:     int data_idx = ossl_get_ssl_data_index();",
          "",
          "[Removed Lines]",
          "4560:     return;",
          "",
          "[Added Lines]",
          "4565:     return FALSE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4568:     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&",
          "4569:        proxy_idx >= 0) {",
          "4575: #ifndef CURL_DISABLE_PROXY",
          "4578: #else",
          "4580: #endif",
          "4581:     }",
          "4582:   }",
          "4583: }",
          "",
          "[Removed Lines]",
          "4572:       SSL_set_ex_data(backend->handle, data_idx, data);",
          "4573:       SSL_set_ex_data(backend->handle, connectdata_idx, conn);",
          "4574:       SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);",
          "4576:       SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:",
          "4577:                       NULL);",
          "4579:       SSL_set_ex_data(backend->handle, proxy_idx, NULL);",
          "",
          "[Added Lines]",
          "4575:       int data_status, conn_status, sockindex_status, proxy_status;",
          "4579:       data_status = SSL_set_ex_data(backend->handle, data_idx, data);",
          "4580:       conn_status = SSL_set_ex_data(backend->handle, connectdata_idx, conn);",
          "4581:       sockindex_status = SSL_set_ex_data(backend->handle, sockindex_idx,",
          "4582:                                          conn->sock + sockindex);",
          "4584:       proxy_status = SSL_set_ex_data(backend->handle, proxy_idx,",
          "4585:                                      SSL_IS_PROXY() ? (void *) 1 : NULL);",
          "4587:       proxy_status = SSL_set_ex_data(backend->handle, proxy_idx, NULL);",
          "4589:       if(data_status && conn_status && sockindex_status && proxy_status)",
          "4590:         return TRUE;",
          "4592:     return FALSE;",
          "4594:   return TRUE;",
          "",
          "---------------"
        ],
        "lib/vtls/vtls.h||lib/vtls/vtls.h": [
          "File: lib/vtls/vtls.h -> lib/vtls/vtls.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   CURLcode (*sha256sum)(const unsigned char *input, size_t inputlen,",
          "86:                     unsigned char *sha256sum, size_t sha256sumlen);",
          "89:                                struct connectdata *conn,",
          "90:                                int sockindex);",
          "91:   void (*disassociate_connection)(struct Curl_easy *data, int sockindex);",
          "",
          "[Removed Lines]",
          "88:   void (*associate_connection)(struct Curl_easy *data,",
          "",
          "[Added Lines]",
          "88:   bool (*associate_connection)(struct Curl_easy *data,",
          "",
          "---------------"
        ]
      }
    }
  ]
}