{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "32266a1072dae25c0bb52dc3aa6853e861f5d779",
      "candidate_info": {
        "commit_hash": "32266a1072dae25c0bb52dc3aa6853e861f5d779",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/32266a1072dae25c0bb52dc3aa6853e861f5d779",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Simplified error message for the unsafe use of a virtual table.\n\nFossilOrigin-Name: d662129a601e05e8fca5717a890b5bc920b80a750d061f3c2494788d32b917a5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8878c40753566a8c4ccd1d413019cabde7569b947f730527d13bfc3db384e97d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4977:          && ALWAYS(pTab->pVTable!=0)",
          "4978:          && pTab->pVTable->eVtabRisk > ((db->flags & SQLITE_TrustedSchema)!=0)",
          "4979:         ){",
          "4982:         }",
          "4983:         pFrom->pSelect = sqlite3SelectDup(db, pTab->pSelect, 0);",
          "4984:         nCol = pTab->nCol;",
          "",
          "[Removed Lines]",
          "4980:           sqlite3ErrorMsg(pParse, \"cannot access \\\"%s\\\" from within a trigger\"",
          "4981:                                   \" or view\", pTab->zName);",
          "",
          "[Added Lines]",
          "4980:           sqlite3ErrorMsg(pParse, \"unsafe use of virtual table \\\"%s\\\"\",",
          "4981:                                   pTab->zName);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "594b124f216641e7d6df059cca84c45d4f0ab393",
      "candidate_info": {
        "commit_hash": "594b124f216641e7d6df059cca84c45d4f0ab393",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/594b124f216641e7d6df059cca84c45d4f0ab393",
        "files": [
          "ext/misc/sha1.c",
          "manifest",
          "manifest.uuid",
          "src/hwtime.h",
          "tool/dbhash.c"
        ],
        "message": "Changes to extensions and test logic so that the build works with gcc and with -std=iso9899:1999\n\nFossilOrigin-Name: 2575a68c3965e72f2ab211d933012442755afe6a9b7de9e9e50cdd2155fd1ec8",
        "before_after_code_files": [
          "ext/misc/sha1.c||ext/misc/sha1.c",
          "manifest.uuid||manifest.uuid",
          "src/hwtime.h||src/hwtime.h",
          "tool/dbhash.c||tool/dbhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/sha1.c||ext/misc/sha1.c": [
          "File: ext/misc/sha1.c -> ext/misc/sha1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   unsigned char buffer[64];",
          "40: };",
          "56: #define SHA_ROT(x,l,r) ((x) << (l) | (x) >> (r))",
          "57: #define rol(x,k) SHA_ROT(x,k,32-(k))",
          "58: #define ror(x,k) SHA_ROT(x,32-(k),k)",
          "62: #define blk0le(i) (block[i] = (ror(block[i],8)&0xFF00FF00) \\",
          "63:     |(rol(block[i],8)&0x00FF00FF))",
          "",
          "[Removed Lines]",
          "43: #if __GNUC__ && (defined(__i386__) || defined(__x86_64__))",
          "49: #define SHA_ROT(op, x, k) \\",
          "50:         ({ unsigned int y; asm(op \" %1,%0\" : \"=r\" (y) : \"I\" (k), \"0\" (x)); y; })",
          "51: #define rol(x,k) SHA_ROT(\"roll\", x, k)",
          "52: #define ror(x,k) SHA_ROT(\"rorl\", x, k)",
          "54: #else",
          "59: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a48f6e17599d7ec794cfcd60858d6a69cf05caaae9321048b111fedd86a3b5b2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/hwtime.h||src/hwtime.h": [
          "File: src/hwtime.h -> src/hwtime.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   #if defined(__GNUC__)",
          "",
          "[Removed Lines]",
          "25: #if (defined(__GNUC__) || defined(_MSC_VER)) && \\",
          "26:       (defined(i386) || defined(__i386__) || defined(_M_IX86))",
          "",
          "[Added Lines]",
          "25: #if !defined(__STRICT_ANSI__) && \\",
          "26:     (defined(__GNUC__) || defined(_MSC_VER)) && \\",
          "27:     (defined(i386) || defined(__i386__) || defined(_M_IX86))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   #endif",
          "49:   __inline__ sqlite_uint64 sqlite3Hwtime(void){",
          "50:       unsigned long val;",
          "",
          "[Removed Lines]",
          "47: #elif (defined(__GNUC__) && defined(__x86_64__))",
          "",
          "[Added Lines]",
          "48: #elif !defined(__STRICT_ANSI__) && (defined(__GNUC__) && defined(__x86_64__))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:       return val;",
          "53:   }",
          "57:   __inline__ sqlite_uint64 sqlite3Hwtime(void){",
          "58:       unsigned long long retval;",
          "",
          "[Removed Lines]",
          "55: #elif (defined(__GNUC__) && defined(__ppc__))",
          "",
          "[Added Lines]",
          "56: #elif !defined(__STRICT_ANSI__) && (defined(__GNUC__) && defined(__ppc__))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70: #else",
          "81:   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }",
          "",
          "[Removed Lines]",
          "72:   #error Need implementation of sqlite3Hwtime() for your platform.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/dbhash.c||tool/dbhash.c": [
          "File: tool/dbhash.c -> tool/dbhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: #define SHA_ROT(x,l,r) ((x) << (l) | (x) >> (r))",
          "79: #define rol(x,k) SHA_ROT(x,k,32-(k))",
          "80: #define ror(x,k) SHA_ROT(x,32-(k),k)",
          "84: #define blk0le(i) (block[i] = (ror(block[i],8)&0xFF00FF00) \\",
          "85:     |(rol(block[i],8)&0x00FF00FF))",
          "",
          "[Removed Lines]",
          "65: #if __GNUC__ && (defined(__i386__) || defined(__x86_64__))",
          "71: #define SHA_ROT(op, x, k) \\",
          "72:         ({ unsigned int y; asm(op \" %1,%0\" : \"=r\" (y) : \"I\" (k), \"0\" (x)); y; })",
          "73: #define rol(x,k) SHA_ROT(\"roll\", x, k)",
          "74: #define ror(x,k) SHA_ROT(\"rorl\", x, k)",
          "76: #else",
          "81: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41af5b34bb9102e8fc4e01734f88281d3ec27a69",
      "candidate_info": {
        "commit_hash": "41af5b34bb9102e8fc4e01734f88281d3ec27a69",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/41af5b34bb9102e8fc4e01734f88281d3ec27a69",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Remove an ALWAYS() that turns out to be reachable.\n\nFossilOrigin-Name: 12bb75d9edc4c11de58d8b1105b95366c58ac4daaa9ad659499dded89a0d7cb5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2032236cce2ea040dec4cb1c03284bf4882efc1e0158703ab93d8a3451c805a5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5948: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "5949:     if( eMode==BTALLOC_EXACT ){",
          "5951:         u8 eType;",
          "5952:         assert( nearby>0 );",
          "5953:         assert( pBt->autoVacuum );",
          "",
          "[Removed Lines]",
          "5950:       if( ALWAYS(nearby<=mxPage) ){",
          "",
          "[Added Lines]",
          "5950:       if( nearby<=mxPage ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3a4f2cf77e7608cf7ba746b2517559015dad9c0",
      "candidate_info": {
        "commit_hash": "e3a4f2cf77e7608cf7ba746b2517559015dad9c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e3a4f2cf77e7608cf7ba746b2517559015dad9c0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Fix an utterly harmless \"applying zero offset to null pointer\" UB warning in sqlite3AtoF():\n\nFossilOrigin-Name: 052fdf5e58b41ccadaa5aac293ceb4d309ced661d46f3a52be9eb8d01d347a82",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c29fc21288e37f81a1617c5e2961c575d3bca6a1d1b013b2e0a99774afb1dcdb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "389: int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){",
          "390: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "391:   int incr;",
          "",
          "[Removed Lines]",
          "392:   const char *zEnd = z + length;",
          "",
          "[Added Lines]",
          "392:   const char *zEnd;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404:   assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );",
          "407:   if( enc==SQLITE_UTF8 ){",
          "408:     incr = 1;",
          "409:   }else{",
          "410:     int i;",
          "411:     incr = 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406:   if( length==0 ) return 0;",
          "410:     zEnd = z + length;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0824d5b9a5a84bb5bd56dac23a48ba305077d268",
      "candidate_info": {
        "commit_hash": "0824d5b9a5a84bb5bd56dac23a48ba305077d268",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0824d5b9a5a84bb5bd56dac23a48ba305077d268",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/gencol1.test"
        ],
        "message": "The previous check-in was not quite correct, and introduced a new problem with the USING clause.  Use this version instead.\n\nFossilOrigin-Name: ed28aaa4851202111a502f883ca06359d89b25bba4055c29d7bce2b501cfcc68",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1923efb283e8840fa7436eb20b9d2174ef7cace1690d3b97b572a0db2048b8e3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:   if( pExpr->iColumn>=0 && pMatch!=0 ){",
          "567:     int n = pExpr->iColumn;",
          "568:     Table *pTab;",
          "573:     pTab = pExpr->y.pTab;",
          "574:     assert( pTab!=0 );",
          "575:     assert( pMatch->iCursor==pExpr->iTable );",
          "587:     }",
          "589:   }",
          "",
          "[Removed Lines]",
          "569:     testcase( n==BMS-1 );",
          "570:     if( n>=BMS ){",
          "571:       n = BMS-1;",
          "572:     }",
          "576:     if( pTab->tabFlags & TF_HasGenerated ){",
          "577:       Column *pColumn = pTab->aCol + pExpr->iColumn;",
          "578:       if( pColumn->colFlags & COLFLAG_GENERATED ){",
          "579:         testcase( pTab->nCol==63 );",
          "580:         testcase( pTab->nCol==64 );",
          "581:         if( pTab->nCol>=64 ){",
          "582:           pMatch->colUsed = ALLBITS;",
          "583:         }else{",
          "584:           pMatch->colUsed = MASKBIT(pTab->nCol)-1;",
          "585:         }",
          "586:       }",
          "588:     pMatch->colUsed |= ((Bitmask)1)<<n;",
          "",
          "[Added Lines]",
          "572:     if( (pTab->tabFlags & TF_HasGenerated)!=0",
          "573:      && (pTab->aCol[n].colFlags & COLFLAG_GENERATED)!=0",
          "574:     ){",
          "575:       testcase( pTab->nCol==BMS-1 );",
          "576:       testcase( pTab->nCol==BMS );",
          "577:       pMatch->colUsed = pTab->nCol>=BMS ? ALLBITS : MASKBIT(pTab->nCol)-1;",
          "578:     }else{",
          "579:       testcase( n==BMS-1 );",
          "580:       testcase( n==BMS );",
          "581:       if( n>=BMS ) n = BMS-1;",
          "582:       pMatch->colUsed |= ((Bitmask)1)<<n;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:       p->iColumn = -1;",
          "631:     }else{",
          "632:       p->iColumn = (ynVar)iCol;",
          "644:       }else{",
          "645:         testcase( iCol==BMS );",
          "646:         testcase( iCol==BMS-1 );",
          "",
          "[Removed Lines]",
          "633:       if( pTab->tabFlags & TF_HasGenerated ){",
          "634:         Column *pColumn = pTab->aCol + iCol;",
          "635:         if( pColumn->colFlags & COLFLAG_GENERATED ){",
          "636:           testcase( pTab->nCol==63 );",
          "637:           testcase( pTab->nCol==64 );",
          "638:           if( pTab->nCol>=64 ){",
          "639:             pItem->colUsed = ALLBITS;",
          "640:           }else{",
          "641:             pItem->colUsed = MASKBIT(pTab->nCol)-1;",
          "642:           }",
          "643:         }",
          "",
          "[Added Lines]",
          "628:       if( (pTab->tabFlags & TF_HasGenerated)!=0",
          "629:        && (pTab->aCol[iCol].colFlags & COLFLAG_GENERATED)!=0",
          "630:       ){",
          "631:         testcase( pTab->nCol==63 );",
          "632:         testcase( pTab->nCol==64 );",
          "633:         pItem->colUsed = pTab->nCol>=64 ? ALLBITS : MASKBIT(pTab->nCol)-1;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:   SELECT y FROM t1 JOIN t1 USING (y,y);",
          "353: } {11}",
          "354: do_execsql_test gencol1-13.11 {",
          "355:   CREATE INDEX t1y ON t1(y);",
          "356:   SELECT y FROM t1 JOIN t1 USING (y,y);",
          "357: } {11}",
          "360: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:   SELECT 123 FROM t1 JOIN t1 USING (x);",
          "356: } {123}",
          "357: do_execsql_test gencol1-13.11 {",
          "358:   SELECT 456 FROM t1 JOIN t1 USING (x,x);",
          "359: } {456}",
          "360: do_execsql_test gencol1-13.20 {",
          "364: do_execsql_test gencol1-13.21 {",
          "365:   CREATE INDEX t1x ON t1(x);",
          "366:   SELECT 123 FROM t1 JOIN t1 USING (x);",
          "367: } {123}",
          "368: do_execsql_test gencol1-13.22 {",
          "369:   SELECT 456 FROM t1 JOIN t1 USING (x,x);",
          "370: } {456}",
          "",
          "---------------"
        ]
      }
    }
  ]
}