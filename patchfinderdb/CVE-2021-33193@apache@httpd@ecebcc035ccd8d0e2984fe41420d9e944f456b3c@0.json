{
  "cve_id": "CVE-2021-33193",
  "cve_desc": "A crafted method sent through HTTP/2 will bypass validation and be forwarded by mod_proxy, which can lead to request splitting or cache poisoning. This issue affects Apache HTTP Server 2.4.17 to 2.4.48.",
  "repo": "apache/httpd",
  "patch_hash": "ecebcc035ccd8d0e2984fe41420d9e944f456b3c",
  "patch_info": {
    "commit_hash": "ecebcc035ccd8d0e2984fe41420d9e944f456b3c",
    "repo": "apache/httpd",
    "commit_url": "https://github.com/apache/httpd/commit/ecebcc035ccd8d0e2984fe41420d9e944f456b3c",
    "files": [
      "CHANGES",
      "docs/manual/mod/core.xml",
      "include/ap_mmn.h",
      "include/http_core.h",
      "include/http_protocol.h",
      "include/http_vhost.h",
      "modules/http2/h2_request.c",
      "server/core.c",
      "server/core_filters.c",
      "server/protocol.c",
      "server/vhost.c"
    ],
    "message": "Merged r1734009,r1734231,r1734281,r1838055,r1838079,r1840229,r1876664,r1876674,r1876784,r1879078,r1881620,r1887311,r1888871 from trunk:\n\n  *) core: Split ap_create_request() from ap_read_request(). [Graham Leggett]\n\n  *) core, h2: common ap_parse_request_line() and ap_check_request_header()\n     code. [Yann Ylavic]\n\n  *) core: Add StrictHostCheck to allow unconfigured hostnames to be\n     rejected. [Eric Covener]\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1890245 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "include/ap_mmn.h||include/ap_mmn.h",
      "include/http_core.h||include/http_core.h",
      "include/http_protocol.h||include/http_protocol.h",
      "include/http_vhost.h||include/http_vhost.h",
      "modules/http2/h2_request.c||modules/http2/h2_request.c",
      "server/core.c||server/core.c",
      "server/core_filters.c||server/core_filters.c",
      "server/protocol.c||server/protocol.c",
      "server/vhost.c||server/vhost.c"
    ]
  },
  "patch_diff": {
    "include/ap_mmn.h||include/ap_mmn.h": [
      "File: include/ap_mmn.h -> include/ap_mmn.h"
    ],
    "include/http_core.h||include/http_core.h": [
      "File: include/http_core.h -> include/http_core.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "755:     apr_size_t   flush_max_threshold;",
      "756:     apr_int32_t  flush_max_pipelined;",
      "757: } core_server_config;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "757:     unsigned int strict_host_check;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "782: typedef struct core_output_filter_ctx core_output_filter_ctx_t;",
      "783: typedef struct core_filter_ctx        core_ctx_t;",
      "785: typedef struct core_net_rec {",
      "787:     apr_socket_t *client_socket;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "786: struct core_filter_ctx {",
      "787:     apr_bucket_brigade *b;",
      "788:     apr_bucket_brigade *tmpbb;",
      "789: };",
      "",
      "---------------"
    ],
    "include/http_protocol.h||include/http_protocol.h": [
      "File: include/http_protocol.h -> include/http_protocol.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61: AP_DECLARE(request_rec *) ap_create_request(conn_rec *c);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61: request_rec *ap_read_request(conn_rec *c);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75: AP_DECLARE(int) ap_parse_request_line(request_rec *r);",
      "82: AP_DECLARE(int) ap_check_request_header(request_rec *r);",
      "",
      "---------------"
    ],
    "include/http_vhost.h||include/http_vhost.h": [
      "File: include/http_vhost.h -> include/http_vhost.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "100: AP_DECLARE(void) ap_update_vhost_from_headers(request_rec *r);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "112: AP_DECLARE(int) ap_update_vhost_from_headers_ex(request_rec *r, int require_match);",
      "",
      "---------------"
    ],
    "modules/http2/h2_request.c||modules/http2/h2_request.c": [
      "File: modules/http2/h2_request.c -> modules/http2/h2_request.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "210:     return dst;",
      "211: }",
      "271: request_rec *h2_request_create_rec(const h2_request *req, conn_rec *c)",
      "272: {",
      "276:     request_rec *r = ap_create_request(c);",
      "282:     ap_run_pre_read_request(r, c);",
      "",
      "[Removed Lines]",
      "213: #if !AP_MODULE_MAGIC_AT_LEAST(20150222, 13)",
      "214: static request_rec *my_ap_create_request(conn_rec *c)",
      "215: {",
      "216:     apr_pool_t *p;",
      "217:     request_rec *r;",
      "219:     apr_pool_create(&p, c->pool);",
      "220:     apr_pool_tag(p, \"request\");",
      "221:     r = apr_pcalloc(p, sizeof(request_rec));",
      "222:     AP_READ_REQUEST_ENTRY((intptr_t)r, (uintptr_t)c);",
      "223:     r->pool            = p;",
      "224:     r->connection      = c;",
      "225:     r->server          = c->base_server;",
      "227:     r->user            = NULL;",
      "228:     r->ap_auth_type    = NULL;",
      "230:     r->allowed_methods = ap_make_method_list(p, 2);",
      "232:     r->headers_in      = apr_table_make(r->pool, 5);",
      "233:     r->trailers_in     = apr_table_make(r->pool, 5);",
      "234:     r->subprocess_env  = apr_table_make(r->pool, 25);",
      "235:     r->headers_out     = apr_table_make(r->pool, 12);",
      "236:     r->err_headers_out = apr_table_make(r->pool, 5);",
      "237:     r->trailers_out    = apr_table_make(r->pool, 5);",
      "238:     r->notes           = apr_table_make(r->pool, 5);",
      "240:     r->request_config  = ap_create_request_config(r->pool);",
      "243:     r->proto_output_filters = c->output_filters;",
      "244:     r->output_filters  = r->proto_output_filters;",
      "245:     r->proto_input_filters = c->input_filters;",
      "246:     r->input_filters   = r->proto_input_filters;",
      "247:     ap_run_create_request(r);",
      "248:     r->per_dir_config  = r->server->lookup_defaults;",
      "252:     r->read_length     = 0;",
      "253:     r->read_body       = REQUEST_NO_BODY;",
      "256:     r->header_only     = 0;",
      "257:     r->the_request     = NULL;",
      "262:     r->used_path_info = AP_REQ_DEFAULT_PATH_INFO;",
      "264:     r->useragent_addr = c->client_addr;",
      "265:     r->useragent_ip = c->client_ip;",
      "267:     return r;",
      "268: }",
      "269: #endif",
      "273:     int access_status;",
      "275: #if AP_MODULE_MAGIC_AT_LEAST(20150222, 13)",
      "277: #else",
      "278:     request_rec *r = my_ap_create_request(c);",
      "279: #endif",
      "281: #if AP_MODULE_MAGIC_AT_LEAST(20200331, 3)",
      "",
      "[Added Lines]",
      "215:     int access_status = HTTP_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "307:         r->status = HTTP_OK;",
      "308:         goto die;",
      "309:     }",
      "355:     r->per_dir_config = r->server->lookup_defaults;",
      "",
      "[Removed Lines]",
      "310: #else",
      "311:     {",
      "312:         const char *s;",
      "314:         r->headers_in = apr_table_clone(r->pool, req->headers);",
      "315:         ap_run_pre_read_request(r, c);",
      "318:         r->request_time = req->request_time;",
      "319:         r->method = apr_pstrdup(r->pool, req->method);",
      "321:         r->method_number = ap_method_number_of(r->method);",
      "322:         if (r->method_number == M_GET && r->method[0] == 'H') {",
      "323:             r->header_only = 1;",
      "324:         }",
      "325:         ap_parse_uri(r, req->path ? req->path : \"\");",
      "326:         r->protocol = (char*)\"HTTP/2.0\";",
      "327:         r->proto_num = HTTP_VERSION(2, 0);",
      "328:         r->the_request = apr_psprintf(r->pool, \"%s %s HTTP/2.0\",",
      "329:                                       r->method, req->path ? req->path : \"\");",
      "334:         r->hostname = NULL;",
      "335:         ap_update_vhost_from_headers(r);",
      "338:          r->per_dir_config = r->server->lookup_defaults;",
      "340:          s = apr_table_get(r->headers_in, \"Expect\");",
      "341:          if (s && s[0]) {",
      "342:             if (ap_cstr_casecmp(s, \"100-continue\") == 0) {",
      "343:                 r->expecting_100 = 1;",
      "344:             }",
      "345:             else {",
      "346:                 r->status = HTTP_EXPECTATION_FAILED;",
      "347:                 access_status = r->status;",
      "348:                 goto die;",
      "349:             }",
      "350:          }",
      "351:     }",
      "352: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "server/core.c||server/core.c": [
      "File: server/core.c -> server/core.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "511:     conf->protocols_honor_order = -1;",
      "512:     conf->merge_slashes = AP_CORE_CONFIG_UNSET;",
      "514:     return (void *)conf;",
      "515: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "514:     conf->strict_host_check= AP_CORE_CONFIG_UNSET;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "585:                                   ? virt->flush_max_pipelined",
      "586:                                   : base->flush_max_pipelined;",
      "588:     return conf;",
      "589: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "590:     conf->strict_host_check = (virt->strict_host_check != AP_CORE_CONFIG_UNSET)",
      "591:                               ? virt->strict_host_check",
      "592:                               : base->strict_host_check;",
      "594:     AP_CORE_MERGE_FLAG(strict_host_check, conf, base, virt);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4623: AP_INIT_FLAG(\"QualifyRedirectURL\", set_qualify_redirect_url, NULL, OR_FILEINFO,",
      "4624:              \"Controls whether the REDIRECT_URL environment variable is fully \"",
      "4625:              \"qualified\"),",
      "4627: AP_INIT_TAKE1(\"ForceType\", ap_set_string_slot_lower,",
      "4628:        (void *)APR_OFFSETOF(core_dir_config, mime_type), OR_FILEINFO,",
      "4629:      \"a mime type that overrides other configured type\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4634: AP_INIT_FLAG(\"StrictHostCheck\", set_core_server_flag,",
      "4635:              (void *)APR_OFFSETOF(core_server_config, strict_host_check),",
      "4636:              RSRC_CONF,",
      "4637:              \"Controls whether a hostname match is required\"),",
      "",
      "---------------"
    ],
    "server/core_filters.c||server/core_filters.c": [
      "File: server/core_filters.c -> server/core_filters.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "85:     apr_size_t nvec;",
      "86: };",
      "94: apr_status_t ap_core_input_filter(ap_filter_t *f, apr_bucket_brigade *b,",
      "95:                                   ap_input_mode_t mode, apr_read_type_e block,",
      "",
      "[Removed Lines]",
      "88: struct core_filter_ctx {",
      "89:     apr_bucket_brigade *b;",
      "90:     apr_bucket_brigade *tmpbb;",
      "91: };",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "server/protocol.c||server/protocol.c": [
      "File: server/protocol.c -> server/protocol.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "609:         }",
      "611:         r->args = r->parsed_uri.query;",
      "615: #if defined(OS2) || defined(WIN32)",
      "",
      "[Removed Lines]",
      "612:         r->uri = r->parsed_uri.path ? r->parsed_uri.path",
      "613:                  : apr_pstrdup(r->pool, \"/\");",
      "",
      "[Added Lines]",
      "612:         if (r->parsed_uri.path) {",
      "613:             r->uri = r->parsed_uri.path;",
      "614:         }",
      "615:         else if (r->method_number == M_OPTIONS) {",
      "616:             r->uri = apr_pstrdup(r->pool, \"*\");",
      "617:         }",
      "618:         else {",
      "619:             r->uri = apr_pstrdup(r->pool, \"/\");",
      "620:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "646: static int read_request_line(request_rec *r, apr_bucket_brigade *bb)",
      "647: {",
      "655:     apr_size_t len;",
      "656:     int num_blank_lines = DEFAULT_LIMIT_BLANK_LINES;",
      "657:     core_server_config *conf = ap_get_core_module_config(r->server->module_config);",
      "",
      "[Removed Lines]",
      "648:     enum {",
      "649:         rrl_none, rrl_badmethod, rrl_badwhitespace, rrl_excesswhitespace,",
      "650:         rrl_missinguri, rrl_baduri, rrl_badprotocol, rrl_trailingtext,",
      "651:         rrl_badmethod09, rrl_reject09",
      "652:     } deferred_error = rrl_none;",
      "653:     char *ll;",
      "654:     char *uri;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "711:     }",
      "713:     r->request_time = apr_time_now();",
      "715:     r->method = r->the_request;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "714:     return 1;",
      "715: }",
      "717: AP_DECLARE(int) ap_parse_request_line(request_rec *r)",
      "718: {",
      "719:     core_server_config *conf = ap_get_core_module_config(r->server->module_config);",
      "720:     int strict = (conf->http_conformance != AP_HTTP_CONFORMANCE_UNSAFE);",
      "721:     enum {",
      "722:         rrl_none, rrl_badmethod, rrl_badwhitespace, rrl_excesswhitespace,",
      "723:         rrl_missinguri, rrl_baduri, rrl_badprotocol, rrl_trailingtext,",
      "724:         rrl_badmethod09, rrl_reject09",
      "725:     } deferred_error = rrl_none;",
      "726:     apr_size_t len = 0;",
      "727:     char *uri, *ll;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "742:         if (deferred_error == rrl_none)",
      "743:             deferred_error = rrl_missinguri;",
      "744:         r->protocol = uri = \"\";",
      "746:         goto rrl_done;",
      "747:     }",
      "748:     else if (strict && ll[0] && apr_isspace(ll[1])",
      "",
      "[Removed Lines]",
      "745:         len = 0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "774:     if (!ll) {",
      "775:         r->protocol = \"\";",
      "777:         goto rrl_done;",
      "778:     }",
      "779:     else if (strict && ll[0] && apr_isspace(ll[1])",
      "",
      "[Removed Lines]",
      "776:         len = 0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "866:         r->header_only = 1;",
      "868:     ap_parse_uri(r, uri);",
      "871:     if (r->proto_num == HTTP_VERSION(0, 9) && deferred_error == rrl_none) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "881:     if (r->status == HTTP_OK",
      "882:             && (r->parsed_uri.path != NULL)",
      "883:             && (r->parsed_uri.path[0] != '/')",
      "884:             && (r->method_number != M_OPTIONS",
      "885:                 || strcmp(r->parsed_uri.path, \"*\") != 0)) {",
      "887:         r->status = HTTP_BAD_REQUEST;",
      "888:     }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "973:     return 0;",
      "974: }",
      "976: static int table_do_fn_check_lengths(void *r_, const char *key,",
      "977:                                      const char *value)",
      "978: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "996: AP_DECLARE(int) ap_check_request_header(request_rec *r)",
      "997: {",
      "998:     core_server_config *conf;",
      "999:     int strict_host_check;",
      "1000:     const char *expect;",
      "1001:     int access_status;",
      "1003:     conf = ap_get_core_module_config(r->server->module_config);",
      "1008:     strict_host_check = (conf->strict_host_check == AP_CORE_CONFIG_ON);",
      "1009:     access_status = ap_update_vhost_from_headers_ex(r, strict_host_check);",
      "1010:     if (strict_host_check && access_status != HTTP_OK) {",
      "1011:         if (r->server == ap_server_conf) {",
      "1012:             ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r, APLOGNO(10156)",
      "1013:                           \"Requested hostname '%s' did not match any ServerName/ServerAlias \"",
      "1014:                           \"in the global server configuration \", r->hostname);",
      "1015:         }",
      "1016:         else {",
      "1017:             ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r, APLOGNO(10157)",
      "1018:                           \"Requested hostname '%s' did not match any ServerName/ServerAlias \"",
      "1019:                           \"in the matching virtual host (default vhost for \"",
      "1020:                           \"current connection is %s:%u)\",",
      "1021:                           r->hostname, r->server->defn_name, r->server->defn_line_number);",
      "1022:         }",
      "1023:         r->status = access_status;",
      "1024:     }",
      "1025:     if (r->status != HTTP_OK) {",
      "1026:         return 0;",
      "1027:     }",
      "1029:     if ((!r->hostname && (r->proto_num >= HTTP_VERSION(1, 1)))",
      "1030:         || ((r->proto_num == HTTP_VERSION(1, 1))",
      "1031:             && !apr_table_get(r->headers_in, \"Host\"))) {",
      "1039:         ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00569)",
      "1040:                       \"client sent HTTP/1.1 request without hostname \"",
      "1041:                       \"(see RFC2616 section 14.23): %s\", r->uri);",
      "1042:         r->status = HTTP_BAD_REQUEST;",
      "1043:         return 0;",
      "1044:     }",
      "1046:     if (((expect = apr_table_get(r->headers_in, \"Expect\")) != NULL)",
      "1047:         && (expect[0] != '\\0')) {",
      "1054:         if (ap_cstr_casecmp(expect, \"100-continue\") == 0) {",
      "1055:             r->expecting_100 = 1;",
      "1056:         }",
      "1057:         else {",
      "1058:             ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00570)",
      "1059:                           \"client sent an unrecognized expectation value \"",
      "1060:                           \"of Expect: %s\", expect);",
      "1061:             r->status = HTTP_EXPECTATION_FAILED;",
      "1062:             return 0;",
      "1063:         }",
      "1064:     }",
      "1066:     return 1;",
      "1067: }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1256:     apr_brigade_destroy(tmp_bb);",
      "1257: }",
      "1260: {",
      "1261:     request_rec *r;",
      "1262:     apr_pool_t *p;",
      "1270:     apr_pool_create(&p, conn->pool);",
      "1271:     apr_pool_tag(p, \"request\");",
      "",
      "[Removed Lines]",
      "1259: request_rec *ap_read_request(conn_rec *conn)",
      "1263:     const char *expect;",
      "1264:     int access_status;",
      "1265:     apr_bucket_brigade *tmp_bb;",
      "1266:     apr_socket_t *csd;",
      "1267:     apr_interval_time_t cur_timeout;",
      "",
      "[Added Lines]",
      "1352: AP_DECLARE(request_rec *) ap_create_request(conn_rec *conn)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1304:     r->read_body       = REQUEST_NO_BODY;",
      "1307:     r->the_request     = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1394:     r->header_only     = 0;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1314:     r->useragent_addr = conn->client_addr;",
      "1315:     r->useragent_ip = conn->client_ip;",
      "1317:     tmp_bb = apr_brigade_create(r->pool, r->connection->bucket_alloc);",
      "1318:     conn->keepalive = AP_CONN_UNKNOWN;",
      "1320:     ap_run_pre_read_request(r, conn);",
      "1324:         switch (r->status) {",
      "1325:         case HTTP_REQUEST_URI_TOO_LARGE:",
      "1326:         case HTTP_BAD_REQUEST:",
      "",
      "[Removed Lines]",
      "1323:     if (!read_request_line(r, tmp_bb)) {",
      "",
      "[Added Lines]",
      "1405:     return r;",
      "1406: }",
      "1409: static void apply_server_config(request_rec *r)",
      "1410: {",
      "1411:     apr_socket_t *csd;",
      "1413:     csd = ap_get_conn_socket(r->connection);",
      "1414:     apr_socket_timeout_set(csd, r->server->timeout);",
      "1416:     r->per_dir_config = r->server->lookup_defaults;",
      "1417: }",
      "1419: request_rec *ap_read_request(conn_rec *conn)",
      "1420: {",
      "1421:     int access_status;",
      "1422:     apr_bucket_brigade *tmp_bb;",
      "1424:     request_rec *r = ap_create_request(conn);",
      "1432:     if (!read_request_line(r, tmp_bb) || !ap_parse_request_line(r)) {",
      "1433:         apr_brigade_cleanup(tmp_bb);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1336:                               \"request failed: malformed request line\");",
      "1337:             }",
      "1338:             access_status = r->status;",
      "1346:         case HTTP_REQUEST_TIME_OUT:",
      "1347:             ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, NULL);",
      "1348:             if (!r->connection->keepalives)",
      "1349:                 ap_run_log_transaction(r);",
      "1356:         }",
      "1357:     }",
      "1370:     if (!r->assbackwards) {",
      "1371:         const char *tenc, *clen;",
      "1373:         ap_get_mime_headers_core(r, tmp_bb);",
      "1374:         if (r->status != HTTP_OK) {",
      "1375:             ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00567)",
      "1376:                           \"request failed: error reading the headers\");",
      "1382:         }",
      "1384:         clen = apr_table_get(r->headers_in, \"Content-Length\");",
      "",
      "[Removed Lines]",
      "1339:             r->status = HTTP_OK;",
      "1340:             ap_die(access_status, r);",
      "1341:             ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);",
      "1342:             ap_run_log_transaction(r);",
      "1343:             r = NULL;",
      "1344:             apr_brigade_destroy(tmp_bb);",
      "1345:             goto traceout;",
      "1350:             apr_brigade_destroy(tmp_bb);",
      "1351:             goto traceout;",
      "1352:         default:",
      "1353:             apr_brigade_destroy(tmp_bb);",
      "1354:             r = NULL;",
      "1355:             goto traceout;",
      "1363:     csd = ap_get_conn_socket(conn);",
      "1364:     apr_socket_timeout_get(csd, &cur_timeout);",
      "1365:     if (cur_timeout != conn->base_server->timeout) {",
      "1366:         apr_socket_timeout_set(csd, conn->base_server->timeout);",
      "1367:         cur_timeout = conn->base_server->timeout;",
      "1368:     }",
      "1377:             ap_send_error_response(r, 0);",
      "1378:             ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);",
      "1379:             ap_run_log_transaction(r);",
      "1380:             apr_brigade_destroy(tmp_bb);",
      "1381:             goto traceout;",
      "",
      "[Added Lines]",
      "1449:             goto die_unusable_input;",
      "1456:             break;",
      "1459:         conn->keepalive = AP_CONN_CLOSE;",
      "1460:         apr_pool_destroy(r->pool);",
      "1461:         goto ignore;",
      "1463:     apr_brigade_cleanup(tmp_bb);",
      "1469:     apply_server_config(r);",
      "1475:         apr_brigade_cleanup(tmp_bb);",
      "1479:             access_status = r->status;",
      "1480:             goto die_unusable_input;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1389:                 ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(10242)",
      "1390:                               \"client sent invalid Content-Length \"",
      "1391:                               \"(%s): %s\", clen, r->uri);",
      "1399:             }",
      "1400:         }",
      "",
      "[Removed Lines]",
      "1392:                 r->status = HTTP_BAD_REQUEST;",
      "1393:                 conn->keepalive = AP_CONN_CLOSE;",
      "1394:                 ap_send_error_response(r, 0);",
      "1395:                 ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);",
      "1396:                 ap_run_log_transaction(r);",
      "1397:                 apr_brigade_destroy(tmp_bb);",
      "1398:                 goto traceout;",
      "",
      "[Added Lines]",
      "1491:                 access_status = HTTP_BAD_REQUEST;",
      "1492:                 goto die_unusable_input;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "1411:                 ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02539)",
      "1412:                               \"client sent unknown Transfer-Encoding \"",
      "1413:                               \"(%s): %s\", tenc, r->uri);",
      "1421:             }",
      "",
      "[Removed Lines]",
      "1414:                 r->status = HTTP_BAD_REQUEST;",
      "1415:                 conn->keepalive = AP_CONN_CLOSE;",
      "1416:                 ap_send_error_response(r, 0);",
      "1417:                 ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);",
      "1418:                 ap_run_log_transaction(r);",
      "1419:                 apr_brigade_destroy(tmp_bb);",
      "1420:                 goto traceout;",
      "",
      "[Added Lines]",
      "1508:                 access_status = HTTP_BAD_REQUEST;",
      "1509:                 goto die_unusable_input;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1437:         }",
      "1438:     }",
      "1482:     ap_add_input_filter_handle(ap_http_input_filter_handle,",
      "1483:                                NULL, r, r->connection);",
      "1492:     }",
      "1515:     }",
      "1518:     return r;",
      "1520:     AP_READ_REQUEST_FAILURE((uintptr_t)r);",
      "1522: }",
      "",
      "[Removed Lines]",
      "1440:     apr_brigade_destroy(tmp_bb);",
      "1445:     ap_update_vhost_from_headers(r);",
      "1446:     access_status = r->status;",
      "1451:     if (cur_timeout != r->server->timeout) {",
      "1452:         apr_socket_timeout_set(csd, r->server->timeout);",
      "1453:         cur_timeout = r->server->timeout;",
      "1454:     }",
      "1457:     r->per_dir_config = r->server->lookup_defaults;",
      "1459:     if ((!r->hostname && (r->proto_num >= HTTP_VERSION(1, 1)))",
      "1460:         || ((r->proto_num == HTTP_VERSION(1, 1))",
      "1461:             && !apr_table_get(r->headers_in, \"Host\"))) {",
      "1469:         access_status = HTTP_BAD_REQUEST;",
      "1470:         ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00569)",
      "1471:                       \"client sent HTTP/1.1 request without hostname \"",
      "1472:                       \"(see RFC2616 section 14.23): %s\", r->uri);",
      "1473:     }",
      "1485:     if (access_status != HTTP_OK",
      "1486:         || (access_status = ap_run_post_read_request(r))) {",
      "1487:         ap_die(access_status, r);",
      "1488:         ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);",
      "1489:         ap_run_log_transaction(r);",
      "1490:         r = NULL;",
      "1491:         goto traceout;",
      "1494:     if (((expect = apr_table_get(r->headers_in, \"Expect\")) != NULL)",
      "1495:         && (expect[0] != '\\0')) {",
      "1502:         if (ap_cstr_casecmp(expect, \"100-continue\") == 0) {",
      "1503:             r->expecting_100 = 1;",
      "1504:         }",
      "1505:         else {",
      "1506:             r->status = HTTP_EXPECTATION_FAILED;",
      "1507:             ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00570)",
      "1508:                           \"client sent an unrecognized expectation value of \"",
      "1509:                           \"Expect: %s\", expect);",
      "1510:             ap_send_error_response(r, 0);",
      "1511:             ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);",
      "1512:             ap_run_log_transaction(r);",
      "1513:             goto traceout;",
      "1514:         }",
      "1517:     AP_READ_REQUEST_SUCCESS((uintptr_t)r, (char *)r->method, (char *)r->uri, (char *)r->server->defn_name, r->status);",
      "1519:     traceout:",
      "1521:     return r;",
      "",
      "[Added Lines]",
      "1539:     if (!ap_check_request_header(r)) {",
      "1541:         apply_server_config(r);",
      "1542:         access_status = r->status;",
      "1543:         goto die_before_hooks;",
      "1547:     apply_server_config(r);",
      "1549:     if ((access_status = ap_run_post_read_request(r))) {",
      "1550:         goto die;",
      "1553:     AP_READ_REQUEST_SUCCESS((uintptr_t)r, (char *)r->method,",
      "1554:                             (char *)r->uri, (char *)r->server->defn_name,",
      "1555:                             r->status);",
      "1560: die_unusable_input:",
      "1564:     {",
      "1565:         ap_filter_t *f = conn->input_filters;",
      "1566:         while (f) {",
      "1567:             if (f->frec == ap_core_input_filter_handle) {",
      "1568:                 core_net_rec *net = f->ctx;",
      "1569:                 apr_brigade_cleanup(net->in_ctx->b);",
      "1570:                 break;",
      "1571:             }",
      "1572:             ap_remove_input_filter(f);",
      "1573:             f = f->next;",
      "1574:         }",
      "1575:         conn->input_filters = r->input_filters = f;",
      "1576:         conn->keepalive = AP_CONN_CLOSE;",
      "1577:     }",
      "1579: die_before_hooks:",
      "1581:     r->status = HTTP_OK;",
      "1583: die:",
      "1584:     ap_die(access_status, r);",
      "1589:     {",
      "1590:         apr_bucket_brigade *eor_bb;",
      "1591:         eor_bb = apr_brigade_create(conn->pool, conn->bucket_alloc);",
      "1592:         APR_BRIGADE_INSERT_TAIL(eor_bb,",
      "1593:                                 ap_bucket_eor_create(conn->bucket_alloc, r));",
      "1594:         ap_pass_brigade(conn->output_filters, eor_bb);",
      "1595:         apr_brigade_cleanup(eor_bb);",
      "1596:     }",
      "1598: ignore:",
      "1599:     r = NULL;",
      "1601:     return NULL;",
      "",
      "---------------"
    ],
    "server/vhost.c||server/vhost.c": [
      "File: server/vhost.c -> server/vhost.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: #include \"http_vhost.h\"",
      "35: #include \"http_protocol.h\"",
      "36: #include \"http_core.h\"",
      "38: #if APR_HAVE_ARPA_INET_H",
      "39: #include <arpa/inet.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: #include \"http_main.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "973: }",
      "977: {",
      "",
      "[Removed Lines]",
      "976: static void check_hostalias(request_rec *r)",
      "",
      "[Added Lines]",
      "983: static int update_server_from_aliases(request_rec *r)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1051:         goto found;",
      "1052:     }",
      "1056: found:",
      "1058:     r->server = s;",
      "1059: }",
      "",
      "[Removed Lines]",
      "1054:     return;",
      "",
      "[Added Lines]",
      "1061:     if (!r->connection->vhost_lookup_data) {",
      "1062:         if (matches_aliases(r->server, host)) {",
      "1063:             s = r->server;",
      "1064:             goto found;",
      "1065:         }",
      "1066:     }",
      "1067:     return HTTP_BAD_REQUEST;",
      "1072:     return HTTP_OK;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1135: }",
      "1137: AP_DECLARE(void) ap_update_vhost_from_headers(request_rec *r)",
      "1138: {",
      "1139:     core_server_config *conf = ap_get_core_module_config(r->server->module_config);",
      "1140:     const char *host_header = apr_table_get(r->headers_in, \"Host\");",
      "1141:     int is_v6literal = 0;",
      "1142:     int have_hostname_from_url = 0;",
      "1144:     if (r->hostname) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1152: {",
      "1153:     ap_update_vhost_from_headers_ex(r, 0);",
      "1154: }",
      "1156: AP_DECLARE(int) ap_update_vhost_from_headers_ex(request_rec *r, int require_match)",
      "1162:     int rc = HTTP_OK;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1152:     else if (host_header != NULL) {",
      "1153:         is_v6literal = fix_hostname(r, host_header, conf->http_conformance);",
      "1154:     }",
      "1158:     if (conf->http_conformance != AP_HTTP_CONFORMANCE_UNSAFE) {",
      "",
      "[Removed Lines]",
      "1155:     if (r->status != HTTP_OK)",
      "1156:         return;",
      "",
      "[Added Lines]",
      "1175:     if (!require_match && r->status != HTTP_OK)",
      "1176:         return HTTP_OK;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1175:     if (r->connection->vhost_lookup_data) {",
      "1176:         if (r->hostname)",
      "1178:         else",
      "1179:             check_serverpath(r);",
      "1180:     }",
      "1181: }",
      "",
      "[Removed Lines]",
      "1177:             check_hostalias(r);",
      "",
      "[Added Lines]",
      "1197:             rc = update_server_from_aliases(r);",
      "1201:     else if (require_match && r->hostname) {",
      "1203:         rc = update_server_from_aliases(r);",
      "1204:     }",
      "1206:     return rc;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c0c8c96a8c6bb923589942d8b7754b81a0377cee",
      "candidate_info": {
        "commit_hash": "c0c8c96a8c6bb923589942d8b7754b81a0377cee",
        "repo": "apache/httpd",
        "commit_url": "https://github.com/apache/httpd/commit/c0c8c96a8c6bb923589942d8b7754b81a0377cee",
        "files": [
          "docs/manual/mod/mod_http2.xml",
          "modules/http2/h2_bucket_beam.c",
          "modules/http2/h2_config.c",
          "modules/http2/h2_config.h",
          "modules/http2/h2_h2.c",
          "modules/http2/h2_headers.c",
          "modules/http2/h2_headers.h",
          "modules/http2/h2_mplx.c",
          "modules/http2/h2_request.c",
          "modules/http2/h2_stream.h",
          "modules/http2/h2_task.c",
          "modules/http2/h2_task.h",
          "modules/http2/h2_version.h"
        ],
        "message": "*) mod_http2: sync with github standalone version 1.15.17      - Log requests and sent the configured error response in case of early detected        errors like too many or too long headers. [Ruediger Pluem]      - new option 'H2OutputBuffering on/off' which controls the buffering of stream output.        The default is on, which is the behaviour of older mod-h2 versions. When off, all        bytes are made available immediately to the main connection for sending them        out to the client. This fixes interop issues with certain flavours of gRPC, see        also <https://github.com/icing/mod_h2/issues/207>.\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1888011 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "modules/http2/h2_bucket_beam.c||modules/http2/h2_bucket_beam.c",
          "modules/http2/h2_config.c||modules/http2/h2_config.c",
          "modules/http2/h2_config.h||modules/http2/h2_config.h",
          "modules/http2/h2_h2.c||modules/http2/h2_h2.c",
          "modules/http2/h2_headers.c||modules/http2/h2_headers.c",
          "modules/http2/h2_headers.h||modules/http2/h2_headers.h",
          "modules/http2/h2_mplx.c||modules/http2/h2_mplx.c",
          "modules/http2/h2_request.c||modules/http2/h2_request.c",
          "modules/http2/h2_stream.h||modules/http2/h2_stream.h",
          "modules/http2/h2_task.c||modules/http2/h2_task.c",
          "modules/http2/h2_task.h||modules/http2/h2_task.h",
          "modules/http2/h2_version.h||modules/http2/h2_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "modules/http2/h2_request.c||modules/http2/h2_request.c"
          ],
          "candidate": [
            "modules/http2/h2_request.c||modules/http2/h2_request.c"
          ]
        }
      },
      "candidate_diff": {
        "modules/http2/h2_bucket_beam.c||modules/http2/h2_bucket_beam.c": [
          "File: modules/http2/h2_bucket_beam.c -> modules/http2/h2_bucket_beam.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1039:                 H2_BLIST_INSERT_TAIL(&beam->hold_list, bsender);",
          "1041:                 remain -= bsender->length;",
          "1042:                 ++transferred;",
          "1043:                 ++transferred_buckets;",
          "1044:                 continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1042:                 beam->received_bytes += bsender->length;",
          "",
          "---------------"
        ],
        "modules/http2/h2_config.c||modules/http2/h2_config.c": [
          "File: modules/http2/h2_config.c -> modules/http2/h2_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     int padding_bits;",
          "80:     int padding_always;",
          "81: } h2_config;",
          "83: typedef struct h2_dir_config {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     int output_buffered;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:     conf->early_hints          = DEF_VAL;",
          "160:     conf->padding_bits         = DEF_VAL;",
          "161:     conf->padding_always       = DEF_VAL;",
          "162:     return conf;",
          "163: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:     conf->output_buffered      = DEF_VAL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:     }",
          "194:     n->push_diary_size      = H2_CONFIG_GET(add, base, push_diary_size);",
          "195:     n->copy_files           = H2_CONFIG_GET(add, base, copy_files);",
          "196:     if (add->push_list && base->push_list) {",
          "197:         n->push_list        = apr_array_append(pool, base->push_list, add->push_list);",
          "198:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:     n->output_buffered      = H2_CONFIG_GET(add, base, output_buffered);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "286:             return H2_CONFIG_GET(conf, &defconf, padding_bits);",
          "287:         case H2_CONF_PADDING_ALWAYS:",
          "288:             return H2_CONFIG_GET(conf, &defconf, padding_always);",
          "289:         default:",
          "290:             return DEF_VAL;",
          "291:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:         case H2_CONF_OUTPUT_BUFFER:",
          "294:             return H2_CONFIG_GET(conf, &defconf, output_buffered);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "351:         case H2_CONF_PADDING_ALWAYS:",
          "352:             H2_CONFIG_SET(conf, padding_always, val);",
          "353:             break;",
          "354:         default:",
          "355:             break;",
          "356:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "360:         case H2_CONF_OUTPUT_BUFFER:",
          "361:             H2_CONFIG_SET(conf, output_buffered, val);",
          "362:             break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "904:     return NULL;",
          "905: }",
          "908: void h2_get_num_workers(server_rec *s, int *minw, int *maxw)",
          "909: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916: static const char *h2_conf_set_output_buffer(cmd_parms *cmd,",
          "917:                                       void *dirconf, const char *value)",
          "918: {",
          "919:     if (!strcasecmp(value, \"On\")) {",
          "920:         CONFIG_CMD_SET(cmd, dirconf, H2_CONF_OUTPUT_BUFFER, 1);",
          "921:         return NULL;",
          "922:     }",
          "923:     else if (!strcasecmp(value, \"Off\")) {",
          "924:         CONFIG_CMD_SET(cmd, dirconf, H2_CONF_OUTPUT_BUFFER, 0);",
          "925:         return NULL;",
          "926:     }",
          "927:     return \"value must be On or Off\";",
          "928: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "975:                   RSRC_CONF, \"on to enable interim status 103 responses\"),",
          "976:     AP_INIT_TAKE1(\"H2Padding\", h2_conf_set_padding, NULL,",
          "977:                   RSRC_CONF, \"set payload padding\"),",
          "978:     AP_END_CMD",
          "979: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1000:     AP_INIT_TAKE1(\"H2OutputBuffering\", h2_conf_set_output_buffer, NULL,",
          "1001:                   RSRC_CONF, \"set stream output buffer on/off\"),",
          "",
          "---------------"
        ],
        "modules/http2/h2_config.h||modules/http2/h2_config.h": [
          "File: modules/http2/h2_config.h -> modules/http2/h2_config.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     H2_CONF_EARLY_HINTS,",
          "45:     H2_CONF_PADDING_BITS,",
          "46:     H2_CONF_PADDING_ALWAYS,",
          "47: } h2_config_var_t;",
          "49: struct apr_hash_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     H2_CONF_OUTPUT_BUFFER,",
          "",
          "---------------"
        ],
        "modules/http2/h2_h2.c||modules/http2/h2_h2.c": [
          "File: modules/http2/h2_h2.c -> modules/http2/h2_h2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "749:         if (task) {",
          "751:             task->output.copy_files = h2_config_rgeti(r, H2_CONF_COPY_FILES);",
          "752:             if (task->output.copy_files) {",
          "753:                 ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, task->c,",
          "754:                               \"h2_secondary_out(%s): copy_files on\", task->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752:             task->output.buffered = h2_config_rgeti(r, H2_CONF_OUTPUT_BUFFER);",
          "",
          "---------------"
        ],
        "modules/http2/h2_headers.c||modules/http2/h2_headers.c": [
          "File: modules/http2/h2_headers.c -> modules/http2/h2_headers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     b = apr_bucket_shared_make(b, br, 0, 0);",
          "66:     b->type = &h2_bucket_type_headers;",
          "68:     return b;",
          "69: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     b->length = h2_headers_length(r);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:     return headers;",
          "126: }",
          "128: h2_headers *h2_headers_rcreate(request_rec *r, int status,",
          "129:                                  apr_table_t *header, apr_pool_t *pool)",
          "130: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: static int add_header_lengths(void *ctx, const char *name, const char *value)",
          "130: {",
          "131:     apr_size_t *plen = ctx;",
          "133:     return 1;",
          "134: }",
          "136: apr_size_t h2_headers_length(h2_headers *headers)",
          "137: {",
          "138:     apr_size_t len = 0;",
          "139:     apr_table_do(add_header_lengths, &len, headers->headers, NULL);",
          "140:     return len;",
          "141: }",
          "",
          "---------------"
        ],
        "modules/http2/h2_headers.h||modules/http2/h2_headers.h": [
          "File: modules/http2/h2_headers.h -> modules/http2/h2_headers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: int h2_headers_are_response(h2_headers *headers);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: apr_size_t h2_headers_length(h2_headers *headers);",
          "",
          "---------------"
        ],
        "modules/http2/h2_mplx.c||modules/http2/h2_mplx.c": [
          "File: modules/http2/h2_mplx.c -> modules/http2/h2_mplx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: static void mst_check_data_for(h2_mplx *m, h2_stream *stream, int mplx_is_locked);",
          "98: static void mst_stream_input_ev(void *ctx, h2_bucket_beam *beam)",
          "99: {",
          "100:     h2_stream *stream = ctx;",
          "",
          "[Removed Lines]",
          "94: static void mst_stream_output_consumed(void *ctx, h2_bucket_beam *beam, apr_off_t length)",
          "95: {",
          "96: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:         stream->task = NULL;",
          "300:         secondary = task->c;",
          "301:         if (secondary) {",
          "314:             if (m->s->keep_alive_max == 0 || secondary->keepalives < m->s->keep_alive_max) {",
          "315:                 reuse_secondary = ((m->spare_secondary->nelts < (m->limit_active * 3 / 2))",
          "316:                                    && !task->rst_error);",
          "",
          "[Removed Lines]",
          "307:             if (task->request && !task->request->serialize && h2_task_logio_add_bytes_out) {",
          "308:                 apr_off_t unaccounted = stream->out_frame_octets - stream->out_data_octets;",
          "309:                 if (unaccounted > 0) {",
          "310:                     h2_task_logio_add_bytes_out(secondary, unaccounted);",
          "311:                 }",
          "312:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "540:                       \"h2_mplx(%s): out open\", stream->task->id);",
          "541:     }",
          "544:     h2_beam_on_produced(stream->output, mst_output_produced, stream);",
          "545:     if (stream->task->output.copy_files) {",
          "546:         h2_beam_on_file_beam(stream->output, h2_beam_no_files, NULL);",
          "",
          "[Removed Lines]",
          "543:     h2_beam_on_consumed(stream->output, NULL, mst_stream_output_consumed, stream);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "modules/http2/h2_request.c||modules/http2/h2_request.c": [
          "File: modules/http2/h2_request.c -> modules/http2/h2_request.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "271: request_rec *h2_request_create_rec(const h2_request *req, conn_rec *c)",
          "272: {",
          "277: #if AP_MODULE_MAGIC_AT_LEAST(20150222, 13)",
          "278:     request_rec *r = ap_create_request(c);",
          "",
          "[Removed Lines]",
          "273:     int access_status = HTTP_OK;",
          "274:     const char *rpath;",
          "275:     const char *s;",
          "",
          "[Added Lines]",
          "273:     int access_status;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:     request_rec *r = my_ap_create_request(c);",
          "281: #endif",
          "285:     ap_run_pre_read_request(r, c);",
          "288:     r->request_time = req->request_time;",
          "296:                                   req->method, req->path ? req->path : \"\");",
          "297:     r->headers_in = apr_table_clone(r->pool, req->headers);",
          "312:     r->hostname = NULL;",
          "324:         }",
          "325:         else {",
          "328:         }",
          "329:     }",
          "331:     if (req->http_status != H2_HTTP_STATUS_UNSET) {",
          "332:         access_status = req->http_status;",
          "333:         r->status = HTTP_OK;",
          "335:         c->keepalive = AP_CONN_CLOSE;",
          "336:     }",
          "",
          "[Removed Lines]",
          "283:     r->headers_in = apr_table_clone(r->pool, req->headers);",
          "289:     r->method = apr_pstrdup(r->pool, req->method);",
          "291:     r->method_number = ap_method_number_of(r->method);",
          "292:     if (r->method_number == M_GET && r->method[0] == 'H') {",
          "293:         r->header_only = 1;",
          "294:     }",
          "295:     r->the_request = apr_psprintf(r->pool, \"%s %s HTTP/2.0\",",
          "299:     rpath = (req->path ? req->path : \"\");",
          "300:     ap_parse_uri(r, rpath);",
          "301:     r->protocol = (char*)\"HTTP/2.0\";",
          "302:     r->proto_num = HTTP_VERSION(2, 0);",
          "304:     r->the_request = apr_psprintf(r->pool, \"%s %s %s\",",
          "305:                                   r->method, rpath, r->protocol);",
          "313:     ap_update_vhost_from_headers(r);",
          "314:     r->protocol = \"HTTP/2.0\";",
          "315:     r->proto_num = HTTP_VERSION(2, 0);",
          "318:     r->per_dir_config = r->server->lookup_defaults;",
          "320:     s = apr_table_get(r->headers_in, \"Expect\");",
          "321:     if (s && s[0]) {",
          "322:         if (ap_cstr_casecmp(s, \"100-continue\") == 0) {",
          "323:             r->expecting_100 = 1;",
          "326:             r->status = HTTP_EXPECTATION_FAILED;",
          "327:             ap_send_error_response(r, 0);",
          "",
          "[Added Lines]",
          "281: #if AP_MODULE_MAGIC_AT_LEAST(20200331, 3)",
          "286:     r->the_request = apr_psprintf(r->pool, \"%s %s HTTP/2.0\",",
          "296:     if (!ap_parse_request_line(r) || !ap_check_request_header(r)) {",
          "298:         r->per_dir_config = r->server->lookup_defaults;",
          "299:         if (req->http_status != H2_HTTP_STATUS_UNSET) {",
          "300:             access_status = req->http_status;",
          "302:             c->keepalive = AP_CONN_CLOSE;",
          "305:             access_status = r->status;",
          "307:         r->status = HTTP_OK;",
          "308:         goto die;",
          "310: #else",
          "311:     {",
          "312:         const char *s;",
          "314:         r->headers_in = apr_table_clone(r->pool, req->headers);",
          "315:         ap_run_pre_read_request(r, c);",
          "318:         r->request_time = req->request_time;",
          "319:         r->method = apr_pstrdup(r->pool, req->method);",
          "321:         r->method_number = ap_method_number_of(r->method);",
          "322:         if (r->method_number == M_GET && r->method[0] == 'H') {",
          "323:             r->header_only = 1;",
          "324:         }",
          "325:         ap_parse_uri(r, req->path ? req->path : \"\");",
          "326:         r->protocol = (char*)\"HTTP/2.0\";",
          "327:         r->proto_num = HTTP_VERSION(2, 0);",
          "328:         r->the_request = apr_psprintf(r->pool, \"%s %s HTTP/2.0\",",
          "329:                                       r->method, req->path ? req->path : \"\");",
          "334:         r->hostname = NULL;",
          "335:         ap_update_vhost_from_headers(r);",
          "338:          r->per_dir_config = r->server->lookup_defaults;",
          "340:          s = apr_table_get(r->headers_in, \"Expect\");",
          "341:          if (s && s[0]) {",
          "342:             if (ap_cstr_casecmp(s, \"100-continue\") == 0) {",
          "343:                 r->expecting_100 = 1;",
          "344:             }",
          "345:             else {",
          "346:                 r->status = HTTP_EXPECTATION_FAILED;",
          "347:                 access_status = r->status;",
          "348:                 goto die;",
          "349:             }",
          "350:          }",
          "351:     }",
          "352: #endif",
          "355:     r->per_dir_config = r->server->lookup_defaults;",
          "362:         goto die;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "344:     ap_add_input_filter_handle(ap_http_input_filter_handle,",
          "345:                                NULL, r, r->connection);",
          "352:         ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, c, APLOGNO(03367)",
          "353:                       \"h2_request: access_status=%d, request_create failed\",",
          "354:                       access_status);",
          "360:     }",
          "362:     AP_READ_REQUEST_SUCCESS((uintptr_t)r, (char *)r->method,",
          "363:                             (char *)r->uri, (char *)r->server->defn_name,",
          "364:                             r->status);",
          "365:     return r;",
          "367:     AP_READ_REQUEST_FAILURE((uintptr_t)r);",
          "369: }",
          "",
          "[Removed Lines]",
          "347:     if (access_status != HTTP_OK",
          "348:         || (access_status = ap_run_post_read_request(r))) {",
          "355:         ap_die(access_status, r);",
          "356:         ap_update_child_status(c->sbh, SERVER_BUSY_LOG, r);",
          "357:         ap_run_log_transaction(r);",
          "358:         r = NULL;",
          "359:         goto traceout;",
          "366: traceout:",
          "368:     return r;",
          "",
          "[Added Lines]",
          "374:     if ((access_status = ap_run_post_read_request(r))) {",
          "381:         goto die;",
          "389: die:",
          "390:     ap_die(access_status, r);",
          "395:     {",
          "396:         apr_bucket_brigade *eor_bb;",
          "397: #if AP_MODULE_MAGIC_AT_LEAST(20180905, 1)",
          "398:         eor_bb = ap_acquire_brigade(c);",
          "399:         APR_BRIGADE_INSERT_TAIL(eor_bb,",
          "400:                                 ap_bucket_eor_create(c->bucket_alloc, r));",
          "401:         ap_pass_brigade(c->output_filters, eor_bb);",
          "402:         ap_release_brigade(c, eor_bb);",
          "403: #else",
          "404:         eor_bb = apr_brigade_create(c->pool, c->bucket_alloc);",
          "405:         APR_BRIGADE_INSERT_TAIL(eor_bb,",
          "406:                                 ap_bucket_eor_create(c->bucket_alloc, r));",
          "407:         ap_pass_brigade(c->output_filters, eor_bb);",
          "408:         apr_brigade_destroy(eor_bb);",
          "409: #endif",
          "410:     }",
          "412:     r = NULL;",
          "414:     return NULL;",
          "",
          "---------------"
        ],
        "modules/http2/h2_stream.h||modules/http2/h2_stream.h": [
          "File: modules/http2/h2_stream.h -> modules/http2/h2_stream.h"
        ],
        "modules/http2/h2_task.c||modules/http2/h2_task.c": [
          "File: modules/http2/h2_task.c -> modules/http2/h2_task.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:     return h2_mplx_t_out_open(task->mplx, task->stream_id, task->output.beam);",
          "90: }",
          "92: static apr_status_t send_out(h2_task *task, apr_bucket_brigade* bb, int block)",
          "93: {",
          "94:     apr_off_t written, left;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: static void output_consumed(void *ctx, h2_bucket_beam *beam, apr_off_t length)",
          "93: {",
          "94:     h2_task *task = ctx;",
          "95:     if (task && h2_task_logio_add_bytes_out) {",
          "96:         h2_task_logio_add_bytes_out(task->c, length);",
          "97:     }",
          "98: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:         status = APR_SUCCESS;",
          "109:     }",
          "110:     if (status == APR_SUCCESS) {",
          "114:         ap_log_cerror(APLOG_MARK, APLOG_TRACE2, 0, task->c,",
          "115:                       \"h2_task(%s): send_out done\", task->id);",
          "116:     }",
          "",
          "[Removed Lines]",
          "111:         if (h2_task_logio_add_bytes_out) {",
          "112:             h2_task_logio_add_bytes_out(task->c, written);",
          "113:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "183:         }",
          "184:     }",
          "188:         rv = open_output(task);",
          "189:     }",
          "",
          "[Removed Lines]",
          "186:     if (APR_SUCCESS == rv && !task->output.opened && flush) {",
          "",
          "[Added Lines]",
          "191:     ap_log_cerror(APLOG_MARK, APLOG_TRACE2, 0, task->c,",
          "192:                   \"h2_secondary_out(%s): buffered=%d\", task->id, task->output.buffered);",
          "193:     if (APR_SUCCESS == rv && !task->output.opened && (flush || !task->output.buffered)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "598:     h2_beam_buffer_size_set(task->output.beam, task->output.max_buffer);",
          "599:     h2_beam_send_from(task->output.beam, task->pool);",
          "601:     h2_ctx_create_for(c, task);",
          "602:     apr_table_setn(c->notes, H2_TASK_ID_NOTE, task->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "607:     h2_beam_on_consumed(task->output.beam, NULL, output_consumed, task);",
          "",
          "---------------"
        ],
        "modules/http2/h2_task.h||modules/http2/h2_task.h": [
          "File: modules/http2/h2_task.h -> modules/http2/h2_task.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:         unsigned int opened : 1;",
          "72:         unsigned int sent_response : 1;",
          "73:         unsigned int copy_files : 1;",
          "74:         struct h2_response_parser *rparser;",
          "75:         apr_bucket_brigade *bb;",
          "76:         apr_size_t max_buffer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:         unsigned int buffered : 1;",
          "",
          "---------------"
        ],
        "modules/http2/h2_version.h||modules/http2/h2_version.h": [
          "File: modules/http2/h2_version.h -> modules/http2/h2_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "30: #define MOD_HTTP2_VERSION \"1.15.14\"",
          "",
          "[Added Lines]",
          "30: #define MOD_HTTP2_VERSION \"1.15.17\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "38: #define MOD_HTTP2_VERSION_NUM 0x010f0e",
          "",
          "[Added Lines]",
          "38: #define MOD_HTTP2_VERSION_NUM 0x010f11",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63a0a87efa0925514d15c211b508f6594669888c",
      "candidate_info": {
        "commit_hash": "63a0a87efa0925514d15c211b508f6594669888c",
        "repo": "apache/httpd",
        "commit_url": "https://github.com/apache/httpd/commit/63a0a87efa0925514d15c211b508f6594669888c",
        "files": [
          "CHANGES",
          "STATUS",
          "modules/http2/h2_conn.c",
          "modules/http2/h2_conn.h",
          "modules/http2/h2_filter.c",
          "modules/http2/h2_h2.c",
          "modules/http2/h2_mplx.c",
          "modules/http2/h2_mplx.h",
          "modules/http2/h2_request.c",
          "modules/http2/h2_session.c",
          "modules/http2/h2_session.h",
          "modules/http2/h2_stream.c",
          "modules/http2/h2_task.c",
          "modules/http2/h2_task.h",
          "modules/http2/h2_workers.c",
          "modules/http2/mod_http2.c"
        ],
        "message": "*) mod_http2: connection terminology renamed to master/secondary.      trunk patch: http://svn.apache.org/r1878926                   http://svn.apache.org/r1879156      2.4.x patch: https://svn.apache.org/repos/asf/httpd/httpd/patches/2.4.x/h2-master-secondary.patch      +1: icing, ylavic, minfrin      ylavic: nitpicking, mixed \"H2_secondary_IN\" and \"H2_secondary_OUT\" case to              register the filters, but not for adding them. IIRC filters names              are case insentive so shouldn't matter, just popped at my eyes..      icing: updated patch and added r1879156 to fix the eye bleed.      jailletc36: CHANGES could also be looked at if it makes sense to update the terminology                  also here\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1879642 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "modules/http2/h2_conn.c||modules/http2/h2_conn.c",
          "modules/http2/h2_conn.h||modules/http2/h2_conn.h",
          "modules/http2/h2_filter.c||modules/http2/h2_filter.c",
          "modules/http2/h2_h2.c||modules/http2/h2_h2.c",
          "modules/http2/h2_mplx.c||modules/http2/h2_mplx.c",
          "modules/http2/h2_mplx.h||modules/http2/h2_mplx.h",
          "modules/http2/h2_request.c||modules/http2/h2_request.c",
          "modules/http2/h2_session.c||modules/http2/h2_session.c",
          "modules/http2/h2_session.h||modules/http2/h2_session.h",
          "modules/http2/h2_stream.c||modules/http2/h2_stream.c",
          "modules/http2/h2_task.c||modules/http2/h2_task.c",
          "modules/http2/h2_task.h||modules/http2/h2_task.h",
          "modules/http2/h2_workers.c||modules/http2/h2_workers.c",
          "modules/http2/mod_http2.c||modules/http2/mod_http2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "modules/http2/h2_request.c||modules/http2/h2_request.c"
          ],
          "candidate": [
            "modules/http2/h2_request.c||modules/http2/h2_request.c"
          ]
        }
      },
      "candidate_diff": {
        "modules/http2/h2_conn.c||modules/http2/h2_conn.c": [
          "File: modules/http2/h2_conn.c -> modules/http2/h2_conn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:     ap_register_input_filter(\"H2_IN\", h2_filter_core_input,",
          "139:                              NULL, AP_FTYPE_CONNECTION);",
          "143:     if (status == APR_SUCCESS) {",
          "144:         status = apr_socket_create(&dummy_socket, APR_INET, SOCK_STREAM,",
          "",
          "[Removed Lines]",
          "141:     status = h2_mplx_child_init(pool, s);",
          "",
          "[Added Lines]",
          "141:     status = h2_mplx_m_child_init(pool, s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:     return DONE;",
          "267: }",
          "270: {",
          "271:     apr_allocator_t *allocator;",
          "272:     apr_status_t status;",
          "",
          "[Removed Lines]",
          "269: conn_rec *h2_slave_create(conn_rec *master, int slave_id, apr_pool_t *parent)",
          "",
          "[Added Lines]",
          "269: conn_rec *h2_secondary_create(conn_rec *master, int sec_id, apr_pool_t *parent)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:     ap_assert(master);",
          "279:     ap_log_cerror(APLOG_MARK, APLOG_TRACE3, 0, master,",
          "",
          "[Removed Lines]",
          "280:                   \"h2_stream(%ld-%d): create slave\", master->id, slave_id);",
          "",
          "[Added Lines]",
          "280:                   \"h2_stream(%ld-%d): create secondary\", master->id, sec_id);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "290:     status = apr_pool_create_ex(&pool, parent, NULL, allocator);",
          "291:     if (status != APR_SUCCESS) {",
          "292:         ap_log_cerror(APLOG_MARK, APLOG_ERR, status, master,",
          "295:         return NULL;",
          "296:     }",
          "297:     apr_allocator_owner_set(allocator, pool);",
          "300:     c = (conn_rec *) apr_palloc(pool, sizeof(conn_rec));",
          "301:     if (c == NULL) {",
          "302:         ap_log_cerror(APLOG_MARK, APLOG_ERR, APR_ENOMEM, master,",
          "305:         apr_pool_destroy(pool);",
          "306:         return NULL;",
          "307:     }",
          "",
          "[Removed Lines]",
          "293:                       APLOGNO(10004) \"h2_session(%ld-%d): create slave pool\",",
          "294:                       master->id, slave_id);",
          "298:     apr_pool_tag(pool, \"h2_slave_conn\");",
          "303:                       APLOGNO(02913) \"h2_session(%ld-%d): create slave\",",
          "304:                       master->id, slave_id);",
          "",
          "[Added Lines]",
          "293:                       APLOGNO(10004) \"h2_session(%ld-%d): create secondary pool\",",
          "294:                       master->id, sec_id);",
          "298:     apr_pool_tag(pool, \"h2_secondary_conn\");",
          "303:                       APLOGNO(02913) \"h2_session(%ld-%d): create secondary\",",
          "304:                       master->id, sec_id);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "328:     c->clogging_input_filters = 1;",
          "329:     c->log                    = NULL;",
          "330:     c->log_id                 = apr_psprintf(pool, \"%ld-%d\",",
          "332:     c->aborted                = 0;",
          "339:     ap_set_module_config(c->conn_config, &core_module, dummy_socket);",
          "341:     c->sbh                    = master->sbh;",
          "345:     if ((mpm = h2_conn_mpm_module()) != NULL) {",
          "346:         cfg = ap_get_module_config(master->conn_config, mpm);",
          "",
          "[Removed Lines]",
          "331:                                              master->id, slave_id);",
          "",
          "[Added Lines]",
          "331:                                              master->id, sec_id);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "348:     }",
          "350:     ap_log_cerror(APLOG_MARK, APLOG_TRACE3, 0, c,",
          "352:     return c;",
          "353: }",
          "356: {",
          "361: }",
          "364: {",
          "381:     }",
          "383:     return APR_SUCCESS;",
          "384: }",
          "",
          "[Removed Lines]",
          "351:                   \"h2_slave(%s): created\", c->log_id);",
          "355: void h2_slave_destroy(conn_rec *slave)",
          "357:     ap_log_cerror(APLOG_MARK, APLOG_TRACE3, 0, slave,",
          "358:                   \"h2_slave(%s): destroy\", slave->log_id);",
          "359:     slave->sbh = NULL;",
          "360:     apr_pool_destroy(slave->pool);",
          "363: apr_status_t h2_slave_run_pre_connection(conn_rec *slave, apr_socket_t *csd)",
          "365:     if (slave->keepalives == 0) {",
          "370:         slave->keepalives = 1;",
          "379:         slave->keepalive = AP_CONN_CLOSE;",
          "380:         return ap_run_pre_connection(slave, csd);",
          "382:     ap_assert(slave->output_filters);",
          "",
          "[Added Lines]",
          "351:                   \"h2_secondary(%s): created\", c->log_id);",
          "355: void h2_secondary_destroy(conn_rec *secondary)",
          "357:     ap_log_cerror(APLOG_MARK, APLOG_TRACE3, 0, secondary,",
          "358:                   \"h2_secondary(%s): destroy\", secondary->log_id);",
          "359:     secondary->sbh = NULL;",
          "360:     apr_pool_destroy(secondary->pool);",
          "363: apr_status_t h2_secondary_run_pre_connection(conn_rec *secondary, apr_socket_t *csd)",
          "365:     if (secondary->keepalives == 0) {",
          "370:         secondary->keepalives = 1;",
          "379:         secondary->keepalive = AP_CONN_CLOSE;",
          "380:         return ap_run_pre_connection(secondary, csd);",
          "382:     ap_assert(secondary->output_filters);",
          "",
          "---------------"
        ],
        "modules/http2/h2_conn.h||modules/http2/h2_conn.h": [
          "File: modules/http2/h2_conn.h -> modules/http2/h2_conn.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: const char *h2_conn_mpm_name(void);",
          "69: int h2_mpm_supported(void);",
          "",
          "[Removed Lines]",
          "71: conn_rec *h2_slave_create(conn_rec *master, int slave_id, apr_pool_t *parent);",
          "72: void h2_slave_destroy(conn_rec *slave);",
          "74: apr_status_t h2_slave_run_pre_connection(conn_rec *slave, apr_socket_t *csd);",
          "75: void h2_slave_run_connection(conn_rec *slave);",
          "",
          "[Added Lines]",
          "71: conn_rec *h2_secondary_create(conn_rec *master, int sec_id, apr_pool_t *parent);",
          "72: void h2_secondary_destroy(conn_rec *secondary);",
          "74: apr_status_t h2_secondary_run_pre_connection(conn_rec *secondary, apr_socket_t *csd);",
          "75: void h2_secondary_run_connection(conn_rec *secondary);",
          "",
          "---------------"
        ],
        "modules/http2/h2_filter.c||modules/http2/h2_filter.c": [
          "File: modules/http2/h2_filter.c -> modules/http2/h2_filter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:     x.s = s;",
          "371:     x.idx = 0;",
          "372:     bbout(bb, \"  \\\"streams\\\": {\");",
          "374:     bbout(bb, \"\\n  }%s\\n\", last? \"\" : \",\");",
          "375: }",
          "",
          "[Removed Lines]",
          "373:     h2_mplx_stream_do(s->mplx, add_stream, &x);",
          "",
          "[Added Lines]",
          "373:     h2_mplx_m_stream_do(s->mplx, add_stream, &x);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "433: static apr_status_t h2_status_insert(h2_task *task, apr_bucket *b)",
          "434: {",
          "435:     h2_mplx *m = task->mplx;",
          "437:     h2_session *s;",
          "438:     conn_rec *c;",
          "",
          "[Removed Lines]",
          "436:     h2_stream *stream = h2_mplx_stream_get(m, task->stream_id);",
          "",
          "[Added Lines]",
          "436:     h2_stream *stream = h2_mplx_t_stream_get(m, task);",
          "",
          "---------------"
        ],
        "modules/http2/h2_h2.c||modules/http2/h2_h2.c": [
          "File: modules/http2/h2_h2.c -> modules/http2/h2_h2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "729:             ap_add_output_filter(\"H2_RESPONSE\", task, r, r->connection);",
          "731:             for (f = r->input_filters; f; f = f->next) {",
          "733:                     f->r = r;",
          "734:                     break;",
          "735:                 }",
          "",
          "[Removed Lines]",
          "732:                 if (!strcmp(\"H2_SLAVE_IN\", f->frec->name)) {",
          "",
          "[Added Lines]",
          "732:                 if (!strcmp(\"H2_SECONDARY_IN\", f->frec->name)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "751:             task->output.copy_files = h2_config_rgeti(r, H2_CONF_COPY_FILES);",
          "752:             if (task->output.copy_files) {",
          "753:                 ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, task->c,",
          "755:                 h2_beam_on_file_beam(task->output.beam, h2_beam_no_files, NULL);",
          "756:             }",
          "757:             check_push(r, \"late_fixup\");",
          "",
          "[Removed Lines]",
          "754:                               \"h2_slave_out(%s): copy_files on\", task->id);",
          "",
          "[Added Lines]",
          "754:                               \"h2_secondary_out(%s): copy_files on\", task->id);",
          "",
          "---------------"
        ],
        "modules/http2/h2_mplx.c||modules/http2/h2_mplx.c": [
          "File: modules/http2/h2_mplx.c -> modules/http2/h2_mplx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     apr_size_t count;",
          "57: } stream_iter_ctx;",
          "63: {",
          "64:     return APR_SUCCESS;",
          "65: }",
          "",
          "[Removed Lines]",
          "59: static apr_status_t mplx_be_happy(h2_mplx *m);",
          "60: static apr_status_t mplx_be_annoyed(h2_mplx *m);",
          "62: apr_status_t h2_mplx_child_init(apr_pool_t *pool, server_rec *s)",
          "",
          "[Added Lines]",
          "67: static apr_status_t s_mplx_be_happy(h2_mplx *m, h2_task *task);",
          "68: static apr_status_t m_be_annoyed(h2_mplx *m);",
          "70: apr_status_t h2_mplx_m_child_init(apr_pool_t *pool, server_rec *s)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: #define H2_MPLX_LEAVE_MAYBE(m, dolock)    \\",
          "82:     if (dolock) apr_thread_mutex_unlock(m->lock)",
          "88: {",
          "89: }",
          "92: {",
          "93:     h2_stream *stream = ctx;",
          "94:     h2_mplx *m = stream->session->mplx;",
          "95:     apr_atomic_set32(&m->event_pending, 1);",
          "96: }",
          "99: {",
          "100:     h2_stream_in_consumed(ctx, length);",
          "101: }",
          "104: {",
          "105:     ap_assert(!h2_task_has_started(stream->task) || stream->task->worker_done);",
          "",
          "[Removed Lines]",
          "84: static void check_data_for(h2_mplx *m, h2_stream *stream, int mplx_is_locked);",
          "86: static void stream_output_consumed(void *ctx,",
          "87:                                    h2_bucket_beam *beam, apr_off_t length)",
          "91: static void stream_input_ev(void *ctx, h2_bucket_beam *beam)",
          "98: static void stream_input_consumed(void *ctx, h2_bucket_beam *beam, apr_off_t length)",
          "103: static void stream_joined(h2_mplx *m, h2_stream *stream)",
          "",
          "[Added Lines]",
          "92: static void mst_check_data_for(h2_mplx *m, h2_stream *stream, int mplx_is_locked);",
          "94: static void mst_stream_output_consumed(void *ctx, h2_bucket_beam *beam, apr_off_t length)",
          "98: static void mst_stream_input_ev(void *ctx, h2_bucket_beam *beam)",
          "105: static void m_stream_input_consumed(void *ctx, h2_bucket_beam *beam, apr_off_t length)",
          "110: static void ms_stream_joined(h2_mplx *m, h2_stream *stream)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:     h2_ihash_add(m->spurge, stream);",
          "110: }",
          "113: {",
          "114:     ap_assert(stream->state == H2_SS_CLEANUP);",
          "",
          "[Removed Lines]",
          "112: static void stream_cleanup(h2_mplx *m, h2_stream *stream)",
          "",
          "[Added Lines]",
          "119: static void m_stream_cleanup(h2_mplx *m, h2_stream *stream)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:     h2_iq_remove(m->q, stream->id);",
          "130:     if (!h2_task_has_started(stream->task) || stream->task->done_done) {",
          "132:     }",
          "133:     else {",
          "134:         h2_ififo_remove(m->readyq, stream->id);",
          "",
          "[Removed Lines]",
          "131:         stream_joined(m, stream);",
          "",
          "[Added Lines]",
          "138:         ms_stream_joined(m, stream);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155: {",
          "156:     apr_status_t status = APR_SUCCESS;",
          "157:     apr_allocator_t *allocator;",
          "",
          "[Removed Lines]",
          "153: h2_mplx *h2_mplx_create(conn_rec *c, server_rec *s, apr_pool_t *parent,",
          "154:                         h2_workers *workers)",
          "",
          "[Added Lines]",
          "160: h2_mplx *h2_mplx_m_create(conn_rec *c, server_rec *s, apr_pool_t *parent,",
          "161:                           h2_workers *workers)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "217:         m->last_mood_change = apr_time_now();",
          "218:         m->mood_update_interval = apr_time_from_msec(100);",
          "221:     }",
          "222:     return m;",
          "223: }",
          "226: {",
          "227:     int max_stream_started = 0;",
          "",
          "[Removed Lines]",
          "220:         m->spare_slaves = apr_array_make(m->pool, 10, sizeof(conn_rec*));",
          "225: int h2_mplx_shutdown(h2_mplx *m)",
          "",
          "[Added Lines]",
          "227:         m->spare_secondary = apr_array_make(m->pool, 10, sizeof(conn_rec*));",
          "232: int h2_mplx_m_shutdown(h2_mplx *m)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "236:     return max_stream_started;",
          "237: }",
          "240: {",
          "241:     if (stream->input) {",
          "242:         return h2_beam_report_consumption(stream->input);",
          "",
          "[Removed Lines]",
          "239: static int input_consumed_signal(h2_mplx *m, h2_stream *stream)",
          "",
          "[Added Lines]",
          "246: static int m_input_consumed_signal(h2_mplx *m, h2_stream *stream)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "244:     return 0;",
          "245: }",
          "248: {",
          "249:     h2_stream *stream = val;",
          "250:     h2_mplx *m = ctx;",
          "253:     if (stream->state == H2_SS_CLOSED_L",
          "254:         && (!stream->task || stream->task->worker_done)) {",
          "255:         ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, m->c,",
          "",
          "[Removed Lines]",
          "247: static int report_consumption_iter(void *ctx, void *val)",
          "252:     input_consumed_signal(m, stream);",
          "",
          "[Added Lines]",
          "254: static int m_report_consumption_iter(void *ctx, void *val)",
          "259:     m_input_consumed_signal(m, stream);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "260:     return 1;",
          "261: }",
          "264: {",
          "265:     if (task->output.beam) {",
          "266:         return h2_beam_report_consumption(task->output.beam);",
          "",
          "[Removed Lines]",
          "263: static int output_consumed_signal(h2_mplx *m, h2_task *task)",
          "",
          "[Added Lines]",
          "270: static int s_output_consumed_signal(h2_mplx *m, h2_task *task)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "268:     return 0;",
          "269: }",
          "272: {",
          "273:     h2_mplx *m = ctx;",
          "274:     h2_stream *stream = val;",
          "",
          "[Removed Lines]",
          "271: static int stream_destroy_iter(void *ctx, void *val)",
          "",
          "[Added Lines]",
          "278: static int m_stream_destroy_iter(void *ctx, void *val)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "279:     if (stream->input) {",
          "282:         h2_beam_log(stream->input, m->c, APLOG_TRACE2, \"stream_destroy\");",
          "283:         h2_beam_destroy(stream->input);",
          "284:         stream->input = NULL;",
          "",
          "[Removed Lines]",
          "281:         input_consumed_signal(m, stream);",
          "",
          "[Added Lines]",
          "288:         m_input_consumed_signal(m, stream);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "287:     if (stream->task) {",
          "288:         h2_task *task = stream->task;",
          "292:         stream->task = NULL;",
          "",
          "[Removed Lines]",
          "289:         conn_rec *slave;",
          "290:         int reuse_slave = 0;",
          "293:         slave = task->c;",
          "294:         if (slave) {",
          "",
          "[Added Lines]",
          "296:         conn_rec *secondary;",
          "297:         int reuse_secondary = 0;",
          "300:         secondary = task->c;",
          "301:         if (secondary) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "300:             if (task->request && !task->request->serialize && h2_task_logio_add_bytes_out) {",
          "301:                 apr_off_t unaccounted = stream->out_frame_octets - stream->out_data_octets;",
          "302:                 if (unaccounted > 0) {",
          "304:                 }",
          "305:             }",
          "310:             }",
          "314:                 h2_beam_log(task->output.beam, m->c, APLOG_DEBUG,",
          "316:                 h2_task_destroy(task);",
          "318:             }",
          "319:             else {",
          "320:                 h2_beam_log(task->output.beam, m->c, APLOG_TRACE1,",
          "323:             }",
          "324:         }",
          "325:     }",
          "",
          "[Removed Lines]",
          "303:                     h2_task_logio_add_bytes_out(slave, unaccounted);",
          "307:             if (m->s->keep_alive_max == 0 || slave->keepalives < m->s->keep_alive_max) {",
          "308:                 reuse_slave = ((m->spare_slaves->nelts < (m->limit_active * 3 / 2))",
          "309:                                && !task->rst_error);",
          "312:             task->c = NULL;",
          "313:             if (reuse_slave) {",
          "315:                             APLOGNO(03385) \"h2_task_destroy, reuse slave\");",
          "317:                 APR_ARRAY_PUSH(m->spare_slaves, conn_rec*) = slave;",
          "321:                             \"h2_task_destroy, destroy slave\");",
          "322:                 h2_slave_destroy(slave);",
          "",
          "[Added Lines]",
          "310:                     h2_task_logio_add_bytes_out(secondary, unaccounted);",
          "314:             if (m->s->keep_alive_max == 0 || secondary->keepalives < m->s->keep_alive_max) {",
          "315:                 reuse_secondary = ((m->spare_secondary->nelts < (m->limit_active * 3 / 2))",
          "316:                                    && !task->rst_error);",
          "319:             if (reuse_secondary) {",
          "321:                             APLOGNO(03385) \"h2_task_destroy, reuse secondary\");",
          "323:                 APR_ARRAY_PUSH(m->spare_secondary, conn_rec*) = secondary;",
          "327:                             \"h2_task_destroy, destroy secondary\");",
          "328:                 h2_secondary_destroy(secondary);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "327:     return 0;",
          "328: }",
          "331: {",
          "332:     if (!h2_ihash_empty(m->spurge)) {",
          "333:         H2_MPLX_ENTER_MAYBE(m, lock);",
          "336:         }",
          "337:         H2_MPLX_LEAVE_MAYBE(m, lock);",
          "",
          "[Removed Lines]",
          "330: static void purge_streams(h2_mplx *m, int lock)",
          "334:         while (!h2_ihash_iter(m->spurge, stream_destroy_iter, m)) {",
          "",
          "[Added Lines]",
          "336: static void m_purge_streams(h2_mplx *m, int lock)",
          "340:         while (!h2_ihash_iter(m->spurge, m_stream_destroy_iter, m)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "343:     void *ctx;",
          "344: } stream_iter_ctx_t;",
          "347: {",
          "348:     stream_iter_ctx_t *x = ctx;",
          "349:     return x->cb(stream, x->ctx);",
          "350: }",
          "353: {",
          "354:     stream_iter_ctx_t x;",
          "",
          "[Removed Lines]",
          "346: static int stream_iter_wrap(void *ctx, void *stream)",
          "352: apr_status_t h2_mplx_stream_do(h2_mplx *m, h2_mplx_stream_cb *cb, void *ctx)",
          "",
          "[Added Lines]",
          "352: static int m_stream_iter_wrap(void *ctx, void *stream)",
          "358: apr_status_t h2_mplx_m_stream_do(h2_mplx *m, h2_mplx_stream_cb *cb, void *ctx)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "358:     x.cb = cb;",
          "359:     x.ctx = ctx;",
          "362:     H2_MPLX_LEAVE(m);",
          "363:     return APR_SUCCESS;",
          "364: }",
          "367:     h2_mplx *m = ctx;",
          "368:     h2_stream *stream = val;",
          "369:     h2_task *task = stream->task;",
          "",
          "[Removed Lines]",
          "360:     h2_ihash_iter(m->streams, stream_iter_wrap, &x);",
          "366: static int report_stream_iter(void *ctx, void *val) {",
          "",
          "[Added Lines]",
          "366:     h2_ihash_iter(m->streams, m_stream_iter_wrap, &x);",
          "372: static int m_report_stream_iter(void *ctx, void *val) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "388:     return 1;",
          "389: }",
          "392:     h2_mplx *m = ctx;",
          "393:     h2_stream *stream = val;",
          "",
          "[Removed Lines]",
          "391: static int unexpected_stream_iter(void *ctx, void *val) {",
          "",
          "[Added Lines]",
          "397: static int m_unexpected_stream_iter(void *ctx, void *val) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "397:     return 1;",
          "398: }",
          "401:     h2_mplx *m = ctx;",
          "402:     h2_stream *stream = val;",
          "",
          "[Removed Lines]",
          "400: static int stream_cancel_iter(void *ctx, void *val) {",
          "",
          "[Added Lines]",
          "406: static int m_stream_cancel_iter(void *ctx, void *val) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "411:     h2_stream_rst(stream, H2_ERR_NO_ERROR);",
          "413:     h2_stream_dispatch(stream, H2_SEV_EOS_SENT);",
          "415:     return 0;",
          "416: }",
          "419: {",
          "420:     apr_status_t status;",
          "421:     int i, wait_secs = 60, old_aborted;",
          "",
          "[Removed Lines]",
          "414:     stream_cleanup(m, stream);",
          "418: void h2_mplx_release_and_join(h2_mplx *m, apr_thread_cond_t *wait)",
          "",
          "[Added Lines]",
          "420:     m_stream_cleanup(m, stream);",
          "424: void h2_mplx_m_release_and_join(h2_mplx *m, apr_thread_cond_t *wait)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "441:                   \"h2_mplx(%ld): release, %d/%d/%d streams (total/hold/purge), %d active tasks\",",
          "442:                   m->id, (int)h2_ihash_count(m->streams),",
          "443:                   (int)h2_ihash_count(m->shold), (int)h2_ihash_count(m->spurge), m->tasks_active);",
          "446:     }",
          "",
          "[Removed Lines]",
          "444:     while (!h2_ihash_iter(m->streams, stream_cancel_iter, m)) {",
          "",
          "[Added Lines]",
          "450:     while (!h2_ihash_iter(m->streams, m_stream_cancel_iter, m)) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "463:             ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, m->c, APLOGNO(03198)",
          "464:                           \"h2_mplx(%ld): waited %d sec for %d tasks\",",
          "465:                           m->id, i*wait_secs, (int)h2_ihash_count(m->shold));",
          "467:         }",
          "468:     }",
          "469:     m->join_wait = NULL;",
          "",
          "[Removed Lines]",
          "466:             h2_ihash_iter(m->shold, report_stream_iter, m);",
          "",
          "[Added Lines]",
          "472:             h2_ihash_iter(m->shold, m_report_stream_iter, m);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "474:         ap_log_cerror(APLOG_MARK, APLOG_WARNING, 0, m->c, APLOGNO(03516)",
          "475:                       \"h2_mplx(%ld): unexpected %d streams in hold\",",
          "476:                       m->id, (int)h2_ihash_count(m->shold));",
          "478:     }",
          "480:     m->c->aborted = old_aborted;",
          "",
          "[Removed Lines]",
          "477:         h2_ihash_iter(m->shold, unexpected_stream_iter, m);",
          "",
          "[Added Lines]",
          "483:         h2_ihash_iter(m->shold, m_unexpected_stream_iter, m);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "483:     ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, m->c, \"h2_mplx(%ld): released\", m->id);",
          "484: }",
          "487: {",
          "488:     H2_MPLX_ENTER(m);",
          "490:     ap_log_cerror(APLOG_MARK, APLOG_TRACE2, 0, m->c,",
          "491:                   H2_STRM_MSG(stream, \"cleanup\"));",
          "494:     H2_MPLX_LEAVE(m);",
          "495:     return APR_SUCCESS;",
          "496: }",
          "499: {",
          "500:     h2_stream *s = NULL;",
          "502:     H2_MPLX_ENTER_ALWAYS(m);",
          "506:     H2_MPLX_LEAVE(m);",
          "507:     return s;",
          "508: }",
          "511: {",
          "512:     h2_stream *stream = ctx;",
          "513:     h2_mplx *m = stream->session->mplx;",
          "516: }",
          "519: {",
          "520:     h2_stream *stream = h2_ihash_get(m->streams, stream_id);",
          "",
          "[Removed Lines]",
          "486: apr_status_t h2_mplx_stream_cleanup(h2_mplx *m, h2_stream *stream)",
          "492:     stream_cleanup(m, stream);",
          "498: h2_stream *h2_mplx_stream_get(h2_mplx *m, int id)",
          "504:     s = h2_ihash_get(m->streams, id);",
          "510: static void output_produced(void *ctx, h2_bucket_beam *beam, apr_off_t bytes)",
          "515:     check_data_for(m, stream, 0);",
          "518: static apr_status_t out_open(h2_mplx *m, int stream_id, h2_bucket_beam *beam)",
          "",
          "[Added Lines]",
          "492: apr_status_t h2_mplx_m_stream_cleanup(h2_mplx *m, h2_stream *stream)",
          "498:     m_stream_cleanup(m, stream);",
          "504: h2_stream *h2_mplx_t_stream_get(h2_mplx *m, h2_task *task)",
          "510:     s = h2_ihash_get(m->streams, task->stream_id);",
          "516: static void mst_output_produced(void *ctx, h2_bucket_beam *beam, apr_off_t bytes)",
          "521:     mst_check_data_for(m, stream, 0);",
          "524: static apr_status_t t_out_open(h2_mplx *m, int stream_id, h2_bucket_beam *beam)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "527:     stream->output = beam;",
          "529:     if (APLOGctrace2(m->c)) {",
          "531:     }",
          "532:     else {",
          "534:                       \"h2_mplx(%s): out open\", stream->task->id);",
          "535:     }",
          "539:     if (stream->task->output.copy_files) {",
          "540:         h2_beam_on_file_beam(stream->output, h2_beam_no_files, NULL);",
          "541:     }",
          "546:     return APR_SUCCESS;",
          "547: }",
          "550: {",
          "551:     apr_status_t status;",
          "",
          "[Removed Lines]",
          "530:         h2_beam_log(beam, m->c, APLOG_TRACE2, \"out_open\");",
          "533:         ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, m->c,",
          "537:     h2_beam_on_consumed(stream->output, NULL, stream_output_consumed, stream);",
          "538:     h2_beam_on_produced(stream->output, output_produced, stream);",
          "545:     check_data_for(m, stream, 1);",
          "549: apr_status_t h2_mplx_out_open(h2_mplx *m, int stream_id, h2_bucket_beam *beam)",
          "",
          "[Added Lines]",
          "536:         h2_beam_log(beam, stream->task->c, APLOG_TRACE2, \"out_open\");",
          "539:         ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->task->c,",
          "543:     h2_beam_on_consumed(stream->output, NULL, mst_stream_output_consumed, stream);",
          "544:     h2_beam_on_produced(stream->output, mst_output_produced, stream);",
          "551:     mst_check_data_for(m, stream, 1);",
          "555: apr_status_t h2_mplx_t_out_open(h2_mplx *m, int stream_id, h2_bucket_beam *beam)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "556:         status = APR_ECONNABORTED;",
          "557:     }",
          "558:     else {",
          "560:     }",
          "562:     H2_MPLX_LEAVE(m);",
          "563:     return status;",
          "564: }",
          "567: {",
          "568:     apr_status_t status = APR_SUCCESS;",
          "569:     h2_stream *stream;",
          "",
          "[Removed Lines]",
          "559:         status = out_open(m, stream_id, beam);",
          "566: static apr_status_t out_close(h2_mplx *m, h2_task *task)",
          "",
          "[Added Lines]",
          "565:         status = t_out_open(m, stream_id, beam);",
          "572: static apr_status_t s_out_close(h2_mplx *m, h2_task *task)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "580:         return APR_ECONNABORTED;",
          "581:     }",
          "584:                   \"h2_mplx(%s): close\", task->id);",
          "585:     status = h2_beam_close(task->output.beam);",
          "589:     return status;",
          "590: }",
          "594: {",
          "595:     apr_status_t status;",
          "",
          "[Removed Lines]",
          "583:     ap_log_cerror(APLOG_MARK, APLOG_TRACE2, status, m->c,",
          "586:     h2_beam_log(task->output.beam, m->c, APLOG_TRACE2, \"out_close\");",
          "587:     output_consumed_signal(m, task);",
          "588:     check_data_for(m, stream, 1);",
          "592: apr_status_t h2_mplx_out_trywait(h2_mplx *m, apr_interval_time_t timeout,",
          "593:                                  apr_thread_cond_t *iowait)",
          "",
          "[Added Lines]",
          "589:     ap_log_cerror(APLOG_MARK, APLOG_TRACE2, status, task->c,",
          "592:     h2_beam_log(task->output.beam, task->c, APLOG_TRACE2, \"out_close\");",
          "593:     s_output_consumed_signal(m, task);",
          "594:     mst_check_data_for(m, stream, 1);",
          "598: apr_status_t h2_mplx_m_out_trywait(h2_mplx *m, apr_interval_time_t timeout,",
          "599:                                    apr_thread_cond_t *iowait)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "599:     if (m->aborted) {",
          "600:         status = APR_ECONNABORTED;",
          "601:     }",
          "603:         status = APR_SUCCESS;",
          "604:     }",
          "605:     else {",
          "608:         m->added_output = iowait;",
          "609:         status = apr_thread_cond_timedwait(m->added_output, m->lock, timeout);",
          "610:         if (APLOGctrace2(m->c)) {",
          "",
          "[Removed Lines]",
          "602:     else if (h2_mplx_has_master_events(m)) {",
          "606:         purge_streams(m, 0);",
          "607:         h2_ihash_iter(m->streams, report_consumption_iter, m);",
          "",
          "[Added Lines]",
          "608:     else if (h2_mplx_m_has_master_events(m)) {",
          "612:         m_purge_streams(m, 0);",
          "613:         h2_ihash_iter(m->streams, m_report_consumption_iter, m);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "619:     return status;",
          "620: }",
          "623: {",
          "",
          "[Removed Lines]",
          "622: static void check_data_for(h2_mplx *m, h2_stream *stream, int mplx_is_locked)",
          "",
          "[Added Lines]",
          "628: static void mst_check_data_for(h2_mplx *m, h2_stream *stream, int mplx_is_locked)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "639:     }",
          "640: }",
          "643: {",
          "644:     apr_status_t status;",
          "",
          "[Removed Lines]",
          "642: apr_status_t h2_mplx_reprioritize(h2_mplx *m, h2_stream_pri_cmp *cmp, void *ctx)",
          "",
          "[Added Lines]",
          "648: apr_status_t h2_mplx_m_reprioritize(h2_mplx *m, h2_stream_pri_cmp *cmp, void *ctx)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "659:     return status;",
          "660: }",
          "663: {",
          "664:     if (!m->aborted && !m->is_registered && !h2_iq_empty(m->q)) {",
          "665:         apr_status_t status = h2_workers_register(m->workers, m);",
          "666:         if (status == APR_SUCCESS) {",
          "667:             m->is_registered = 1;",
          "668:         }",
          "670:             ap_log_cerror(APLOG_MARK, APLOG_ERR, status, m->c, APLOGNO(10021)",
          "671:                           \"h2_mplx(%ld): register at workers\", m->id);",
          "672:         }",
          "673:     }",
          "674: }",
          "678: {",
          "679:     apr_status_t status;",
          "",
          "[Removed Lines]",
          "662: static void register_if_needed(h2_mplx *m)",
          "669:         else {",
          "676: apr_status_t h2_mplx_process(h2_mplx *m, struct h2_stream *stream,",
          "677:                              h2_stream_pri_cmp *cmp, void *ctx)",
          "",
          "[Added Lines]",
          "668: static void ms_register_if_needed(h2_mplx *m, int from_master)",
          "675:         else if (from_master) {",
          "682: apr_status_t h2_mplx_m_process(h2_mplx *m, struct h2_stream *stream,",
          "683:                                h2_stream_pri_cmp *cmp, void *ctx)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "688:         h2_ihash_add(m->streams, stream);",
          "689:         if (h2_stream_is_ready(stream)) {",
          "692:             ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, m->c,",
          "693:                           H2_STRM_MSG(stream, \"process, add to readyq\"));",
          "694:         }",
          "695:         else {",
          "696:             h2_iq_add(m->q, stream->id, cmp, ctx);",
          "698:             ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, m->c,",
          "699:                           H2_STRM_MSG(stream, \"process, added to q\"));",
          "700:         }",
          "",
          "[Removed Lines]",
          "691:             check_data_for(m, stream, 1);",
          "697:             register_if_needed(m);",
          "",
          "[Added Lines]",
          "697:             mst_check_data_for(m, stream, 1);",
          "703:             ms_register_if_needed(m, 1);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "704:     return status;",
          "705: }",
          "708: {",
          "709:     h2_stream *stream;",
          "710:     int sid;",
          "",
          "[Removed Lines]",
          "707: static h2_task *next_stream_task(h2_mplx *m)",
          "",
          "[Added Lines]",
          "713: static h2_task *s_next_stream_task(h2_mplx *m)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "714:         stream = h2_ihash_get(m->streams, sid);",
          "715:         if (stream) {",
          "722:             }",
          "723:             else {",
          "725:             }",
          "727:             if (!stream->task) {",
          "",
          "[Removed Lines]",
          "716:             conn_rec *slave, **pslave;",
          "718:             pslave = (conn_rec **)apr_array_pop(m->spare_slaves);",
          "719:             if (pslave) {",
          "720:                 slave = *pslave;",
          "721:                 slave->aborted = 0;",
          "724:                 slave = h2_slave_create(m->c, stream->id, m->pool);",
          "",
          "[Added Lines]",
          "722:             conn_rec *secondary, **psecondary;",
          "724:             psecondary = (conn_rec **)apr_array_pop(m->spare_secondary);",
          "725:             if (psecondary) {",
          "726:                 secondary = *psecondary;",
          "727:                 secondary->aborted = 0;",
          "730:                 secondary = h2_secondary_create(m->c, stream->id, m->pool);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "729:                     m->max_stream_started = sid;",
          "730:                 }",
          "731:                 if (stream->input) {",
          "734:                 }",
          "737:                                               stream->request, m, stream->input,",
          "738:                                               stream->session->s->timeout,",
          "739:                                               m->stream_max_mem);",
          "740:                 if (!stream->task) {",
          "742:                                   H2_STRM_LOG(APLOGNO(02941), stream,",
          "743:                                   \"create task\"));",
          "744:                     return NULL;",
          "",
          "[Removed Lines]",
          "732:                     h2_beam_on_consumed(stream->input, stream_input_ev,",
          "733:                                         stream_input_consumed, stream);",
          "736:                 stream->task = h2_task_create(slave, stream->id,",
          "741:                     ap_log_cerror(APLOG_MARK, APLOG_ERR, APR_ENOMEM, slave,",
          "",
          "[Added Lines]",
          "738:                     h2_beam_on_consumed(stream->input, mst_stream_input_ev,",
          "739:                                         m_stream_input_consumed, stream);",
          "742:                 stream->task = h2_task_create(secondary, stream->id,",
          "747:                     ap_log_cerror(APLOG_MARK, APLOG_ERR, APR_ENOMEM, secondary,",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "753:     return NULL;",
          "754: }",
          "757: {",
          "758:     apr_status_t rv = APR_EOF;",
          "",
          "[Removed Lines]",
          "756: apr_status_t h2_mplx_pop_task(h2_mplx *m, h2_task **ptask)",
          "",
          "[Added Lines]",
          "762: apr_status_t h2_mplx_s_pop_task(h2_mplx *m, h2_task **ptask)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "779:     return rv;",
          "780: }",
          "783: {",
          "784:     h2_stream *stream;",
          "787:                   \"h2_mplx(%ld): task(%s) done\", m->id, task->id);",
          "790:     task->worker_done = 1;",
          "791:     task->done_at = apr_time_now();",
          "793:                   \"h2_mplx(%s): request done, %f ms elapsed\", task->id,",
          "794:                   (task->done_at - task->started_at) / 1000.0);",
          "796:     if (task->c && !task->c->aborted && task->started_at > m->last_mood_change) {",
          "798:     }",
          "800:     ap_assert(task->done_done == 0);",
          "",
          "[Removed Lines]",
          "782: static void task_done(h2_mplx *m, h2_task *task)",
          "786:     ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, m->c,",
          "788:     out_close(m, task);",
          "792:     ap_log_cerror(APLOG_MARK, APLOG_TRACE2, 0, m->c,",
          "797:         mplx_be_happy(m);",
          "",
          "[Added Lines]",
          "788: static void s_task_done(h2_mplx *m, h2_task *task)",
          "792:     ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, task->c,",
          "794:     s_out_close(m, task);",
          "798:     ap_log_cerror(APLOG_MARK, APLOG_TRACE2, 0, task->c,",
          "803:         s_mplx_be_happy(m, task);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "807:             h2_task_redo(task);",
          "808:             h2_iq_add(m->q, stream->id, NULL, NULL);",
          "810:                           H2_STRM_MSG(stream, \"redo, added to q\"));",
          "811:         }",
          "812:         else {",
          "814:             task->done_done = 1;",
          "816:                           H2_STRM_MSG(stream, \"task_done, stream open\"));",
          "817:             if (stream->input) {",
          "818:                 h2_beam_leave(stream->input);",
          "819:             }",
          "823:         }",
          "824:     }",
          "825:     else if ((stream = h2_ihash_get(m->shold, task->stream_id)) != NULL) {",
          "827:         task->done_done = 1;",
          "829:                       H2_STRM_MSG(stream, \"task_done, in hold\"));",
          "830:         if (stream->input) {",
          "831:             h2_beam_leave(stream->input);",
          "832:         }",
          "834:     }",
          "835:     else if ((stream = h2_ihash_get(m->spurge, task->stream_id)) != NULL) {",
          "837:                       H2_STRM_LOG(APLOGNO(03517), stream, \"already in spurge\"));",
          "838:         ap_assert(\"stream should not be in spurge\" == NULL);",
          "839:     }",
          "840:     else {",
          "842:                       \"h2_mplx(%s): task_done, stream not found\",",
          "843:                       task->id);",
          "844:         ap_assert(\"stream should still be available\" == NULL);",
          "845:     }",
          "846: }",
          "849: {",
          "850:     H2_MPLX_ENTER_ALWAYS(m);",
          "852:     --m->tasks_active;",
          "855:     if (m->join_wait) {",
          "856:         apr_thread_cond_signal(m->join_wait);",
          "857:     }",
          "858:     if (ptask) {",
          "861:     }",
          "864:     H2_MPLX_LEAVE(m);",
          "865: }",
          "",
          "[Removed Lines]",
          "809:             ap_log_cerror(APLOG_MARK, APLOG_INFO, 0, m->c,",
          "815:             ap_log_cerror(APLOG_MARK, APLOG_TRACE2, 0, m->c,",
          "822:             check_data_for(m, stream, 1);",
          "828:         ap_log_cerror(APLOG_MARK, APLOG_TRACE2, 0, m->c,",
          "833:         stream_joined(m, stream);",
          "836:         ap_log_cerror(APLOG_MARK, APLOG_WARNING, 0, m->c,",
          "841:         ap_log_cerror(APLOG_MARK, APLOG_WARNING, 0, m->c, APLOGNO(03518)",
          "848: void h2_mplx_task_done(h2_mplx *m, h2_task *task, h2_task **ptask)",
          "853:     task_done(m, task);",
          "862:     register_if_needed(m);",
          "",
          "[Added Lines]",
          "815:             ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, task->c,",
          "821:             ap_log_cerror(APLOG_MARK, APLOG_TRACE2, 0, task->c,",
          "828:             mst_check_data_for(m, stream, 1);",
          "834:         ap_log_cerror(APLOG_MARK, APLOG_TRACE2, 0, task->c,",
          "839:         ms_stream_joined(m, stream);",
          "842:         ap_log_cerror(APLOG_MARK, APLOG_WARNING, 0, task->c,",
          "847:         ap_log_cerror(APLOG_MARK, APLOG_WARNING, 0, task->c, APLOGNO(03518)",
          "854: void h2_mplx_s_task_done(h2_mplx *m, h2_task *task, h2_task **ptask)",
          "859:     s_task_done(m, task);",
          "868:     ms_register_if_needed(m, 0);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "872: {",
          "873:     stream_iter_ctx *ctx = data;",
          "874:     h2_stream *stream = val;",
          "",
          "[Removed Lines]",
          "871: static int timed_out_busy_iter(void *data, void *val)",
          "",
          "[Added Lines]",
          "877: static int m_timed_out_busy_iter(void *data, void *val)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "881:     return 1;",
          "882: }",
          "885: {",
          "886:     stream_iter_ctx ctx;",
          "887:     ctx.m = m;",
          "888:     ctx.stream = NULL;",
          "889:     ctx.now = apr_time_now();",
          "891:     return ctx.stream;",
          "892: }",
          "895: {",
          "896:     stream_iter_ctx *ctx = data;",
          "897:     h2_stream *stream = val;",
          "",
          "[Removed Lines]",
          "884: static h2_stream *get_timed_out_busy_stream(h2_mplx *m)",
          "890:     h2_ihash_iter(m->streams, timed_out_busy_iter, &ctx);",
          "894: static int latest_repeatable_unsubmitted_iter(void *data, void *val)",
          "",
          "[Added Lines]",
          "890: static h2_stream *m_get_timed_out_busy_stream(h2_mplx *m)",
          "896:     h2_ihash_iter(m->streams, m_timed_out_busy_iter, &ctx);",
          "900: static int m_latest_repeatable_unsubmitted_iter(void *data, void *val)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "917:     return 1;",
          "918: }",
          "921: {",
          "922:     stream_iter_ctx ctx;",
          "",
          "[Removed Lines]",
          "920: static apr_status_t assess_task_to_throttle(h2_task **ptask, h2_mplx *m)",
          "",
          "[Added Lines]",
          "926: static apr_status_t m_assess_task_to_throttle(h2_task **ptask, h2_mplx *m)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "927:     ctx.m = m;",
          "928:     ctx.stream = NULL;",
          "929:     ctx.count = 0;",
          "931:     if (m->tasks_active - ctx.count > m->limit_active) {",
          "",
          "[Removed Lines]",
          "930:     h2_ihash_iter(m->streams, latest_repeatable_unsubmitted_iter, &ctx);",
          "",
          "[Added Lines]",
          "936:     h2_ihash_iter(m->streams, m_latest_repeatable_unsubmitted_iter, &ctx);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "936:             return APR_EAGAIN;",
          "937:         }",
          "",
          "[Removed Lines]",
          "939:         if (get_timed_out_busy_stream(m)) {",
          "",
          "[Added Lines]",
          "945:         if (m_get_timed_out_busy_stream(m)) {",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "946:     return APR_SUCCESS;",
          "947: }",
          "950: {",
          "951:     h2_task *task;",
          "952:     apr_status_t rv;",
          "",
          "[Removed Lines]",
          "949: static apr_status_t unschedule_slow_tasks(h2_mplx *m)",
          "",
          "[Added Lines]",
          "955: static apr_status_t m_unschedule_slow_tasks(h2_mplx *m)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "958:         ap_log_cerror(APLOG_MARK, APLOG_TRACE2, 0, m->c,",
          "959:                       \"h2_mplx(%s): unschedule, resetting task for redo later\",",
          "960:                       task->id);",
          "",
          "[Removed Lines]",
          "957:     while (APR_EAGAIN == (rv = assess_task_to_throttle(&task, m))) {",
          "",
          "[Added Lines]",
          "963:     while (APR_EAGAIN == (rv = m_assess_task_to_throttle(&task, m))) {",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "965:     return rv;",
          "966: }",
          "969: {",
          "970:     apr_time_t now;",
          "",
          "[Removed Lines]",
          "968: static apr_status_t mplx_be_happy(h2_mplx *m)",
          "",
          "[Added Lines]",
          "974: static apr_status_t s_mplx_be_happy(h2_mplx *m, h2_task *task)",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "977:         m->limit_active = H2MIN(m->limit_active * 2, m->max_active);",
          "978:         m->last_mood_change = now;",
          "979:         m->irritations_since = 0;",
          "981:                       \"h2_mplx(%ld): mood update, increasing worker limit to %d\",",
          "982:                       m->id, m->limit_active);",
          "983:     }",
          "984:     return APR_SUCCESS;",
          "985: }",
          "988: {",
          "989:     apr_status_t status = APR_SUCCESS;",
          "990:     apr_time_t now;",
          "",
          "[Removed Lines]",
          "980:         ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, m->c,",
          "987: static apr_status_t mplx_be_annoyed(h2_mplx *m)",
          "",
          "[Added Lines]",
          "986:         ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, task->c,",
          "993: static apr_status_t m_be_annoyed(h2_mplx *m)",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1015:     }",
          "1017:     if (m->tasks_active > m->limit_active) {",
          "1019:     }",
          "1020:     return status;",
          "1021: }",
          "1024: {",
          "1025:     apr_status_t status = APR_SUCCESS;",
          "1026:     apr_size_t scount;",
          "",
          "[Removed Lines]",
          "1018:         status = unschedule_slow_tasks(m);",
          "1023: apr_status_t h2_mplx_idle(h2_mplx *m)",
          "",
          "[Added Lines]",
          "1024:         status = m_unschedule_slow_tasks(m);",
          "1029: apr_status_t h2_mplx_m_idle(h2_mplx *m)",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1046:         }",
          "1047:         else if (!h2_iq_empty(m->q)) {",
          "1048:             ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, m->c,",
          "",
          "[Removed Lines]",
          "1045:             status = mplx_be_annoyed(m);",
          "",
          "[Added Lines]",
          "1051:             status = m_be_annoyed(m);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1072:                                   h2_beam_is_closed(stream->output),",
          "1073:                                   (long)h2_beam_get_buffered(stream->output));",
          "1074:                     h2_ihash_add(m->streams, stream);",
          "1076:                     stream->out_checked = 1;",
          "1077:                     status = APR_EAGAIN;",
          "1078:                 }",
          "1079:             }",
          "1080:         }",
          "1081:     }",
          "1084:     H2_MPLX_LEAVE(m);",
          "1085:     return status;",
          "",
          "[Removed Lines]",
          "1075:                     check_data_for(m, stream, 1);",
          "1082:     register_if_needed(m);",
          "",
          "[Added Lines]",
          "1081:                     mst_check_data_for(m, stream, 1);",
          "1088:     ms_register_if_needed(m, 1);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1093: {",
          "1094:     return apr_atomic_read32(&m->event_pending) > 0;",
          "1095: }",
          "1100: {",
          "1101:     h2_stream *stream;",
          "1102:     int n, id;",
          "",
          "[Removed Lines]",
          "1092: int h2_mplx_has_master_events(h2_mplx *m)",
          "1097: apr_status_t h2_mplx_dispatch_master_events(h2_mplx *m,",
          "1098:                                             stream_ev_callback *on_resume,",
          "1099:                                             void *on_ctx)",
          "",
          "[Added Lines]",
          "1098: int h2_mplx_m_has_master_events(h2_mplx *m)",
          "1103: apr_status_t h2_mplx_m_dispatch_master_events(h2_mplx *m, stream_ev_callback *on_resume,",
          "1104:                                               void *on_ctx)",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1106:     apr_atomic_set32(&m->event_pending, 0);",
          "1112:     n = h2_ififo_count(m->readyq);",
          "1113:     while (n > 0",
          "",
          "[Removed Lines]",
          "1109:     h2_ihash_iter(m->streams, report_consumption_iter, m);",
          "1110:     purge_streams(m, 1);",
          "",
          "[Added Lines]",
          "1114:     h2_ihash_iter(m->streams, m_report_consumption_iter, m);",
          "1115:     m_purge_streams(m, 1);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1122:     return APR_SUCCESS;",
          "1123: }",
          "1126: {",
          "1128:     return APR_SUCCESS;",
          "1129: }",
          "1132: {",
          "1133:     int waiting = 1;",
          "",
          "[Removed Lines]",
          "1125: apr_status_t h2_mplx_keep_active(h2_mplx *m, h2_stream *stream)",
          "1127:     check_data_for(m, stream, 0);",
          "1131: int h2_mplx_awaits_data(h2_mplx *m)",
          "",
          "[Added Lines]",
          "1130: apr_status_t h2_mplx_m_keep_active(h2_mplx *m, h2_stream *stream)",
          "1132:     mst_check_data_for(m, stream, 0);",
          "1136: int h2_mplx_m_awaits_data(h2_mplx *m)",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1145:     return waiting;",
          "1146: }",
          "1149: {",
          "1150:     h2_stream *stream;",
          "1151:     apr_status_t status = APR_SUCCESS;",
          "",
          "[Removed Lines]",
          "1148: apr_status_t h2_mplx_client_rst(h2_mplx *m, int stream_id)",
          "",
          "[Added Lines]",
          "1153: apr_status_t h2_mplx_m_client_rst(h2_mplx *m, int stream_id)",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1153:     H2_MPLX_ENTER_ALWAYS(m);",
          "1154:     stream = h2_ihash_get(m->streams, stream_id);",
          "1155:     if (stream && stream->task) {",
          "1157:     }",
          "1158:     H2_MPLX_LEAVE(m);",
          "1159:     return status;",
          "",
          "[Removed Lines]",
          "1156:         status = mplx_be_annoyed(m);",
          "",
          "[Added Lines]",
          "1161:         status = m_be_annoyed(m);",
          "",
          "---------------"
        ],
        "modules/http2/h2_mplx.h||modules/http2/h2_mplx.h": [
          "File: modules/http2/h2_mplx.h -> modules/http2/h2_mplx.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     apr_size_t stream_max_mem;",
          "90:     apr_pool_t *spare_io_pool;",
          "93:     struct h2_workers *workers;",
          "94: };",
          "",
          "[Removed Lines]",
          "102: apr_status_t h2_mplx_child_init(apr_pool_t *pool, server_rec *s);",
          "108: h2_mplx *h2_mplx_create(conn_rec *c, server_rec *s, apr_pool_t *master,",
          "109:                         struct h2_workers *workers);",
          "",
          "[Added Lines]",
          "102: apr_status_t h2_mplx_m_child_init(apr_pool_t *pool, server_rec *s);",
          "108: h2_mplx *h2_mplx_m_create(conn_rec *c, server_rec *s, apr_pool_t *master,",
          "109:                           struct h2_workers *workers);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "119: void h2_mplx_release_and_join(h2_mplx *m, struct apr_thread_cond_t *wait);",
          "121: apr_status_t h2_mplx_pop_task(h2_mplx *m, struct h2_task **ptask);",
          "123: void h2_mplx_task_done(h2_mplx *m, struct h2_task *task, struct h2_task **ptask);",
          "130: int h2_mplx_shutdown(h2_mplx *m);",
          "132: int h2_mplx_is_busy(h2_mplx *m);",
          "138: struct h2_stream *h2_mplx_stream_get(h2_mplx *m, int id);",
          "",
          "[Added Lines]",
          "119: void h2_mplx_m_release_and_join(h2_mplx *m, struct apr_thread_cond_t *wait);",
          "126: int h2_mplx_m_shutdown(h2_mplx *m);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "147: apr_status_t h2_mplx_stream_cleanup(h2_mplx *m, struct h2_stream *stream);",
          "153: apr_status_t h2_mplx_out_trywait(h2_mplx *m, apr_interval_time_t timeout,",
          "154:                                  struct apr_thread_cond_t *iowait);",
          "156: apr_status_t h2_mplx_keep_active(h2_mplx *m, struct h2_stream *stream);",
          "",
          "[Added Lines]",
          "135: apr_status_t h2_mplx_m_stream_cleanup(h2_mplx *m, struct h2_stream *stream);",
          "141: apr_status_t h2_mplx_m_out_trywait(h2_mplx *m, apr_interval_time_t timeout,",
          "142:                                    struct apr_thread_cond_t *iowait);",
          "144: apr_status_t h2_mplx_m_keep_active(h2_mplx *m, struct h2_stream *stream);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "171: apr_status_t h2_mplx_process(h2_mplx *m, struct h2_stream *stream,",
          "172:                              h2_stream_pri_cmp *cmp, void *ctx);",
          "",
          "[Added Lines]",
          "155: apr_status_t h2_mplx_m_process(h2_mplx *m, struct h2_stream *stream,",
          "156:                                h2_stream_pri_cmp *cmp, void *ctx);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "183: typedef apr_status_t stream_ev_callback(void *ctx, struct h2_stream *stream);",
          "",
          "[Removed Lines]",
          "181: apr_status_t h2_mplx_reprioritize(h2_mplx *m, h2_stream_pri_cmp *cmp, void *ctx);",
          "",
          "[Added Lines]",
          "165: apr_status_t h2_mplx_m_reprioritize(h2_mplx *m, h2_stream_pri_cmp *cmp, void *ctx);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "189: int h2_mplx_has_master_events(h2_mplx *m);",
          "",
          "[Added Lines]",
          "173: int h2_mplx_m_has_master_events(h2_mplx *m);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "203: typedef int h2_mplx_stream_cb(struct h2_stream *s, void *ctx);",
          "",
          "[Removed Lines]",
          "197: apr_status_t h2_mplx_dispatch_master_events(h2_mplx *m,",
          "198:                                             stream_ev_callback *on_resume,",
          "199:                                             void *ctx);",
          "201: int h2_mplx_awaits_data(h2_mplx *m);",
          "205: apr_status_t h2_mplx_stream_do(h2_mplx *m, h2_mplx_stream_cb *cb, void *ctx);",
          "207: apr_status_t h2_mplx_client_rst(h2_mplx *m, int stream_id);",
          "216: apr_status_t h2_mplx_out_open(h2_mplx *mplx, int stream_id,",
          "217:                               struct h2_bucket_beam *beam);",
          "228: #define H2_MPLX_LIST_SENTINEL(b) APR_RING_SENTINEL((b), h2_mplx, link)",
          "235: #define H2_MPLX_LIST_EMPTY(b) APR_RING_EMPTY((b), h2_mplx, link)",
          "242: #define H2_MPLX_LIST_FIRST(b) APR_RING_FIRST(b)",
          "249: #define H2_MPLX_LIST_LAST(b) APR_RING_LAST(b)",
          "256: #define H2_MPLX_LIST_INSERT_HEAD(b, e) do {    \\",
          "257: h2_mplx *ap__b = (e);                                        \\",
          "258: APR_RING_INSERT_HEAD((b), ap__b, h2_mplx, link); \\",
          "259: } while (0)",
          "266: #define H2_MPLX_LIST_INSERT_TAIL(b, e) do {    \\",
          "267: h2_mplx *ap__b = (e);     \\",
          "268: APR_RING_INSERT_TAIL((b), ap__b, h2_mplx, link); \\",
          "269: } while (0)",
          "276: #define H2_MPLX_NEXT(e) APR_RING_NEXT((e), link)",
          "282: #define H2_MPLX_PREV(e) APR_RING_PREV((e), link)",
          "288: #define H2_MPLX_REMOVE(e) APR_RING_REMOVE((e), link)",
          "299: apr_status_t h2_mplx_idle(h2_mplx *m);",
          "",
          "[Added Lines]",
          "181: apr_status_t h2_mplx_m_dispatch_master_events(h2_mplx *m, stream_ev_callback *on_resume,",
          "182:                                               void *ctx);",
          "184: int h2_mplx_m_awaits_data(h2_mplx *m);",
          "188: apr_status_t h2_mplx_m_stream_do(h2_mplx *m, h2_mplx_stream_cb *cb, void *ctx);",
          "190: apr_status_t h2_mplx_m_client_rst(h2_mplx *m, int stream_id);",
          "197: apr_status_t h2_mplx_m_idle(h2_mplx *m);",
          "202: apr_status_t h2_mplx_s_pop_task(h2_mplx *m, struct h2_task **ptask);",
          "203: void h2_mplx_s_task_done(h2_mplx *m, struct h2_task *task, struct h2_task **ptask);",
          "214: apr_status_t h2_mplx_t_out_open(h2_mplx *mplx, int stream_id,",
          "215:                                 struct h2_bucket_beam *beam);",
          "220: struct h2_stream *h2_mplx_t_stream_get(h2_mplx *m, struct h2_task *task);",
          "",
          "---------------"
        ],
        "modules/http2/h2_request.c||modules/http2/h2_request.c": [
          "File: modules/http2/h2_request.c -> modules/http2/h2_request.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:     if (r->method_number == M_GET && r->method[0] == 'H') {",
          "289:         r->header_only = 1;",
          "290:     }",
          "292:     rpath = (req->path ? req->path : \"\");",
          "293:     ap_parse_uri(r, rpath);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291:     r->the_request = apr_psprintf(r->pool, \"%s %s HTTP/2.0\",",
          "292:                                   req->method, req->path ? req->path : \"\");",
          "293:     r->headers_in = apr_table_clone(r->pool, req->headers);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "305:     r->hostname = NULL;",
          "306:     ap_update_vhost_from_headers(r);",
          "309:     r->per_dir_config = r->server->lookup_defaults;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310:     r->protocol = \"HTTP/2.0\";",
          "311:     r->proto_num = HTTP_VERSION(2, 0);",
          "",
          "---------------"
        ],
        "modules/http2/h2_session.c||modules/http2/h2_session.c": [
          "File: modules/http2/h2_session.c -> modules/http2/h2_session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: static void cleanup_unprocessed_streams(h2_session *session)",
          "108: {",
          "110: }",
          "112: static h2_stream *h2_session_open_stream(h2_session *session, int stream_id,",
          "",
          "[Removed Lines]",
          "109:     h2_mplx_stream_do(session->mplx, rst_unprocessed_stream, session);",
          "",
          "[Added Lines]",
          "109:     h2_mplx_m_stream_do(session->mplx, rst_unprocessed_stream, session);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "397:             else {",
          "401:                 ++session->streams_reset;",
          "402:             }",
          "403:             break;",
          "",
          "[Removed Lines]",
          "400:                 h2_mplx_client_rst(session->mplx, frame->hd.stream_id);",
          "",
          "[Added Lines]",
          "400:                 h2_mplx_m_client_rst(session->mplx, frame->hd.stream_id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "467: }",
          "469: static int h2_session_continue_data(h2_session *session) {",
          "471:         return 0;",
          "472:     }",
          "473:     if (h2_conn_io_needs_flush(&session->io)) {",
          "",
          "[Removed Lines]",
          "470:     if (h2_mplx_has_master_events(session->mplx)) {",
          "",
          "[Added Lines]",
          "470:     if (h2_mplx_m_has_master_events(session->mplx)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "733:         session->local.error = error;",
          "734:     }",
          "735:     else {",
          "",
          "[Removed Lines]",
          "732:         session->local.accepted_max = h2_mplx_shutdown(session->mplx);",
          "",
          "[Added Lines]",
          "732:         session->local.accepted_max = h2_mplx_m_shutdown(session->mplx);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "779:     }",
          "781:     transit(session, trigger, H2_SESSION_ST_CLEANUP);",
          "783:     session->mplx = NULL;",
          "785:     ap_assert(session->ngh2);",
          "",
          "[Removed Lines]",
          "782:     h2_mplx_release_and_join(session->mplx, session->iowait);",
          "",
          "[Added Lines]",
          "782:     h2_mplx_m_release_and_join(session->mplx, session->iowait);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "893:     session->monitor->on_state_event = on_stream_state_event;",
          "894:     session->monitor->on_event = on_stream_event;",
          "899:     session->cin = h2_filter_cin_create(session);",
          "",
          "[Removed Lines]",
          "896:     session->mplx = h2_mplx_create(c, s, session->pool, workers);",
          "",
          "[Added Lines]",
          "896:     session->mplx = h2_mplx_m_create(c, s, session->pool, workers);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1552:         if (stream) {",
          "1553:             ap_assert(!stream->scheduled);",
          "1554:             if (h2_stream_prep_processing(stream) == APR_SUCCESS) {",
          "1556:             }",
          "1557:             else {",
          "1558:                 h2_stream_rst(stream, H2_ERR_INTERNAL_ERROR);",
          "",
          "[Removed Lines]",
          "1555:                 h2_mplx_process(session->mplx, stream, stream_pri_cmp, session);",
          "",
          "[Added Lines]",
          "1555:                 h2_mplx_m_process(session->mplx, stream, stream_pri_cmp, session);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1824:                           session->open_streams);",
          "1825:             h2_conn_io_flush(&session->io);",
          "1826:             if (session->open_streams > 0) {",
          "1829:                     transit(session, \"no io\", H2_SESSION_ST_WAIT);",
          "1830:                 }",
          "",
          "[Removed Lines]",
          "1827:                 if (h2_mplx_awaits_data(session->mplx)) {",
          "",
          "[Added Lines]",
          "1827:                 if (h2_mplx_m_awaits_data(session->mplx)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1983:             break;",
          "1984:         case H2_SS_CLEANUP:",
          "1985:             nghttp2_session_set_stream_user_data(session->ngh2, stream->id, NULL);",
          "1987:             break;",
          "1988:         default:",
          "1989:             break;",
          "",
          "[Removed Lines]",
          "1986:             h2_mplx_stream_cleanup(session->mplx, stream);",
          "",
          "[Added Lines]",
          "1986:             h2_mplx_m_stream_cleanup(session->mplx, stream);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2073: static apr_status_t dispatch_master(h2_session *session) {",
          "2074:     apr_status_t status;",
          "2077:                                             on_stream_resume, session);",
          "2078:     if (status == APR_EAGAIN) {",
          "2079:         ap_log_cerror(APLOG_MARK, APLOG_TRACE3, status, session->c,",
          "",
          "[Removed Lines]",
          "2076:     status = h2_mplx_dispatch_master_events(session->mplx,",
          "",
          "[Added Lines]",
          "2076:     status = h2_mplx_m_dispatch_master_events(session->mplx,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2175:                         session->have_read = 1;",
          "2176:                     }",
          "2177:                     else if (APR_STATUS_IS_EAGAIN(status) || APR_STATUS_IS_TIMEUP(status)) {",
          "2179:                         if (status == APR_EAGAIN) {",
          "2180:                             break;",
          "2181:                         }",
          "",
          "[Removed Lines]",
          "2178:                         status = h2_mplx_idle(session->mplx);",
          "",
          "[Added Lines]",
          "2178:                         status = h2_mplx_m_idle(session->mplx);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2209:                     if (status == APR_EAGAIN) {",
          "2210:                         break;",
          "2211:                     }",
          "",
          "[Removed Lines]",
          "2208:                     status = h2_mplx_idle(session->mplx);",
          "",
          "[Added Lines]",
          "2208:                     status = h2_mplx_m_idle(session->mplx);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2319:                                   \"h2_session: wait for data, %ld micros\",",
          "2320:                                   (long)session->wait_us);",
          "2321:                 }",
          "2323:                                              session->iowait);",
          "2324:                 if (status == APR_SUCCESS) {",
          "2325:                     session->wait_us = 0;",
          "",
          "[Removed Lines]",
          "2322:                 status = h2_mplx_out_trywait(session->mplx, session->wait_us,",
          "",
          "[Added Lines]",
          "2322:                 status = h2_mplx_m_out_trywait(session->mplx, session->wait_us,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2356:             dispatch_event(session, H2_SESSION_EV_NGH2_DONE, 0, NULL);",
          "2357:         }",
          "2358:         if (session->reprioritize) {",
          "2360:             session->reprioritize = 0;",
          "2361:         }",
          "2362:     }",
          "",
          "[Removed Lines]",
          "2359:             h2_mplx_reprioritize(session->mplx, stream_pri_cmp, session);",
          "",
          "[Added Lines]",
          "2359:             h2_mplx_m_reprioritize(session->mplx, stream_pri_cmp, session);",
          "",
          "---------------"
        ],
        "modules/http2/h2_session.h||modules/http2/h2_session.h": [
          "File: modules/http2/h2_session.h -> modules/http2/h2_session.h"
        ],
        "modules/http2/h2_stream.c||modules/http2/h2_stream.c": [
          "File: modules/http2/h2_stream.c -> modules/http2/h2_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "912:     if (status == APR_EAGAIN) {",
          "915:         ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, c,",
          "916:                       H2_STRM_MSG(stream, \"prep, response eagain\"));",
          "917:         return status;",
          "",
          "[Removed Lines]",
          "914:         h2_mplx_keep_active(stream->session->mplx, stream);",
          "",
          "[Added Lines]",
          "914:         h2_mplx_m_keep_active(stream->session->mplx, stream);",
          "",
          "---------------"
        ],
        "modules/http2/h2_task.c||modules/http2/h2_task.c": [
          "File: modules/http2/h2_task.c -> modules/http2/h2_task.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:                   task->request->authority,",
          "87:                   task->request->path);",
          "88:     task->output.opened = 1;",
          "90: }",
          "92: static apr_status_t send_out(h2_task *task, apr_bucket_brigade* bb, int block)",
          "",
          "[Removed Lines]",
          "89:     return h2_mplx_out_open(task->mplx, task->stream_id, task->output.beam);",
          "",
          "[Added Lines]",
          "89:     return h2_mplx_t_out_open(task->mplx, task->stream_id, task->output.beam);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131: {",
          "132:     apr_bucket *b;",
          "133:     apr_status_t rv = APR_SUCCESS;",
          "",
          "[Removed Lines]",
          "129: static apr_status_t slave_out(h2_task *task, ap_filter_t* f,",
          "130:                               apr_bucket_brigade* bb)",
          "",
          "[Added Lines]",
          "129: static apr_status_t secondary_out(h2_task *task, ap_filter_t* f,",
          "130:                                   apr_bucket_brigade* bb)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:             if (APR_SUCCESS == rv) {",
          "177:                 ap_log_cerror(APLOG_MARK, APLOG_DEBUG, rv, task->c, APLOGNO(03405)",
          "179:                 ap_assert(NULL);",
          "180:                 rv = ap_save_brigade(f, &task->output.bb, &bb, task->pool);",
          "181:                 flush = 1;",
          "",
          "[Removed Lines]",
          "178:                               \"h2_slave_out(%s): saving brigade\", task->id);",
          "",
          "[Added Lines]",
          "178:                               \"h2_secondary_out(%s): saving brigade\", task->id);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189:     }",
          "190: out:",
          "191:     ap_log_cerror(APLOG_MARK, APLOG_TRACE2, rv, task->c,",
          "193:     return rv;",
          "194: }",
          "",
          "[Removed Lines]",
          "192:                   \"h2_slave_out(%s): slave_out leave\", task->id);",
          "",
          "[Added Lines]",
          "192:                   \"h2_secondary_out(%s): secondary_out leave\", task->id);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "202: }",
          "213: {",
          "214:     h2_task *task;",
          "215:     apr_status_t status = APR_SUCCESS;",
          "",
          "[Removed Lines]",
          "208: static apr_status_t h2_filter_slave_in(ap_filter_t* f,",
          "209:                                        apr_bucket_brigade* bb,",
          "210:                                        ap_input_mode_t mode,",
          "211:                                        apr_read_type_e block,",
          "212:                                        apr_off_t readbytes)",
          "",
          "[Added Lines]",
          "208: static apr_status_t h2_filter_secondary_in(ap_filter_t* f,",
          "209:                                            apr_bucket_brigade* bb,",
          "210:                                            ap_input_mode_t mode,",
          "211:                                            apr_read_type_e block,",
          "212:                                            apr_off_t readbytes)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "225:     if (trace1) {",
          "226:         ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, f->c,",
          "228:                       task->id, mode, block, (long)readbytes);",
          "229:     }",
          "",
          "[Removed Lines]",
          "227:                       \"h2_slave_in(%s): read, mode=%d, block=%d, readbytes=%ld\",",
          "",
          "[Added Lines]",
          "227:                       \"h2_secondary_in(%s): read, mode=%d, block=%d, readbytes=%ld\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "255:         if (trace1) {",
          "256:             ap_log_cerror(APLOG_MARK, APLOG_TRACE1, status, f->c,",
          "258:                           \"readbytes=%ld\", task->id, block, (long)readbytes);",
          "259:         }",
          "260:         if (task->input.beam) {",
          "",
          "[Removed Lines]",
          "257:                           \"h2_slave_in(%s): get more data from mplx, block=%d, \"",
          "",
          "[Added Lines]",
          "257:                           \"h2_secondary_in(%s): get more data from mplx, block=%d, \"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "268:         if (trace1) {",
          "269:             ap_log_cerror(APLOG_MARK, APLOG_TRACE2, status, f->c,",
          "271:         }",
          "272:         if (APR_STATUS_IS_EAGAIN(status)",
          "273:             && (mode == AP_MODE_GETLINE || block == APR_BLOCK_READ)) {",
          "",
          "[Removed Lines]",
          "270:                           \"h2_slave_in(%s): read returned\", task->id);",
          "",
          "[Added Lines]",
          "270:                           \"h2_secondary_in(%s): read returned\", task->id);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "306:     if (APR_BRIGADE_EMPTY(task->input.bb)) {",
          "307:         if (trace1) {",
          "308:             ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, f->c,",
          "310:         }",
          "311:         return (block == APR_NONBLOCK_READ)? APR_EAGAIN : APR_EOF;",
          "312:     }",
          "",
          "[Removed Lines]",
          "309:                           \"h2_slave_in(%s): no data\", task->id);",
          "",
          "[Added Lines]",
          "309:                           \"h2_secondary_in(%s): no data\", task->id);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "334:             buffer[len] = 0;",
          "335:             if (trace1) {",
          "336:                 ap_log_cerror(APLOG_MARK, APLOG_TRACE1, status, f->c,",
          "338:                               task->id, buffer);",
          "339:             }",
          "340:         }",
          "",
          "[Removed Lines]",
          "337:                               \"h2_slave_in(%s): getline: %s\",",
          "",
          "[Added Lines]",
          "337:                               \"h2_secondary_in(%s): getline: %s\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "345:         ap_log_cerror(APLOG_MARK, APLOG_ERR, APR_ENOTIMPL, f->c,",
          "346:                       APLOGNO(03472)",
          "348:                       task->id, mode);",
          "349:         status = APR_ENOTIMPL;",
          "350:     }",
          "",
          "[Removed Lines]",
          "347:                       \"h2_slave_in(%s), unsupported READ mode %d\",",
          "",
          "[Added Lines]",
          "347:                       \"h2_secondary_in(%s), unsupported READ mode %d\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "352:     if (trace1) {",
          "353:         apr_brigade_length(bb, 0, &bblen);",
          "354:         ap_log_cerror(APLOG_MARK, APLOG_TRACE1, status, f->c,",
          "356:     }",
          "357:     return status;",
          "358: }",
          "362: {",
          "363:     h2_task *task = h2_ctx_get_task(filter->c);",
          "364:     apr_status_t status;",
          "366:     ap_assert(task);",
          "368:     if (status != APR_SUCCESS) {",
          "369:         h2_task_rst(task, H2_ERR_INTERNAL_ERROR);",
          "370:     }",
          "",
          "[Removed Lines]",
          "355:                       \"h2_slave_in(%s): %ld data bytes\", task->id, (long)bblen);",
          "360: static apr_status_t h2_filter_slave_output(ap_filter_t* filter,",
          "361:                                            apr_bucket_brigade* brigade)",
          "367:     status = slave_out(task, filter, brigade);",
          "",
          "[Added Lines]",
          "355:                       \"h2_secondary_in(%s): %ld data bytes\", task->id, (long)bblen);",
          "360: static apr_status_t h2_filter_secondary_output(ap_filter_t* filter,",
          "361:                                                apr_bucket_brigade* brigade)",
          "367:     status = secondary_out(task, filter, brigade);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "456:     ap_hook_process_connection(h2_task_process_conn,",
          "457:                                NULL, NULL, APR_HOOK_FIRST);",
          "460:                              NULL, AP_FTYPE_NETWORK);",
          "462:                               NULL, AP_FTYPE_NETWORK);",
          "463:     ap_register_output_filter(\"H2_PARSE_H1\", h2_filter_parse_h1,",
          "464:                               NULL, AP_FTYPE_NETWORK);",
          "",
          "[Removed Lines]",
          "459:     ap_register_input_filter(\"H2_SLAVE_IN\", h2_filter_slave_in,",
          "461:     ap_register_output_filter(\"H2_SLAVE_OUT\", h2_filter_slave_output,",
          "",
          "[Added Lines]",
          "459:     ap_register_input_filter(\"H2_SECONDARY_IN\", h2_filter_secondary_in,",
          "461:     ap_register_output_filter(\"H2_SECONDARY_OUT\", h2_filter_secondary_output,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "492:     (void)arg;",
          "493:     if (ctx->task) {",
          "494:         ap_log_cerror(APLOG_MARK, APLOG_TRACE2, 0, c,",
          "497:         ap_add_output_filter(\"H2_PARSE_H1\", NULL, NULL, c);",
          "499:     }",
          "500:     return OK;",
          "501: }",
          "504:                         const h2_request *req, h2_mplx *m,",
          "505:                         h2_bucket_beam *input,",
          "506:                         apr_interval_time_t timeout,",
          "",
          "[Removed Lines]",
          "495:                       \"h2_slave(%s), pre_connection, adding filters\", c->log_id);",
          "496:         ap_add_input_filter(\"H2_SLAVE_IN\", NULL, NULL, c);",
          "498:         ap_add_output_filter(\"H2_SLAVE_OUT\", NULL, NULL, c);",
          "503: h2_task *h2_task_create(conn_rec *slave, int stream_id,",
          "",
          "[Added Lines]",
          "495:                       \"h2_secondary(%s), pre_connection, adding filters\", c->log_id);",
          "496:         ap_add_input_filter(\"H2_SECONDARY_IN\", NULL, NULL, c);",
          "498:         ap_add_output_filter(\"H2_SECONDARY_OUT\", NULL, NULL, c);",
          "503: h2_task *h2_task_create(conn_rec *secondary, int stream_id,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "509:     apr_pool_t *pool;",
          "510:     h2_task *task;",
          "513:     ap_assert(req);",
          "516:     apr_pool_tag(pool, \"h2_task\");",
          "517:     task = apr_pcalloc(pool, sizeof(h2_task));",
          "518:     if (task == NULL) {",
          "",
          "[Removed Lines]",
          "512:     ap_assert(slave);",
          "515:     apr_pool_create(&pool, slave->pool);",
          "",
          "[Added Lines]",
          "512:     ap_assert(secondary);",
          "515:     apr_pool_create(&pool, secondary->pool);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "520:     }",
          "521:     task->id          = \"000\";",
          "522:     task->stream_id   = stream_id;",
          "524:     task->mplx        = m;",
          "525:     task->pool        = pool;",
          "526:     task->request     = req;",
          "",
          "[Removed Lines]",
          "523:     task->c           = slave;",
          "",
          "[Added Lines]",
          "523:     task->c           = secondary;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "601:     h2_ctx_create_for(c, task);",
          "602:     apr_table_setn(c->notes, H2_TASK_ID_NOTE, task->id);",
          "606:     task->input.bb = apr_brigade_create(task->pool, c->bucket_alloc);",
          "607:     if (task->request->serialize) {",
          "",
          "[Removed Lines]",
          "604:     h2_slave_run_pre_connection(c, ap_get_conn_socket(c));",
          "",
          "[Added Lines]",
          "604:     h2_secondary_run_pre_connection(c, ap_get_conn_socket(c));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "709:     }",
          "710:     else {",
          "711:         ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, c,",
          "713:     }",
          "714:     return DECLINED;",
          "715: }",
          "",
          "[Removed Lines]",
          "712:                       \"slave_conn(%ld): has no task\", c->id);",
          "",
          "[Added Lines]",
          "712:                       \"secondary_conn(%ld): has no task\", c->id);",
          "",
          "---------------"
        ],
        "modules/http2/h2_task.h||modules/http2/h2_task.h": [
          "File: modules/http2/h2_task.h -> modules/http2/h2_task.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:     apr_bucket *eor;",
          "91: };",
          "94:                         const h2_request *req, struct h2_mplx *m,",
          "95:                         struct h2_bucket_beam *input,",
          "96:                         apr_interval_time_t timeout,",
          "",
          "[Removed Lines]",
          "93: h2_task *h2_task_create(conn_rec *slave, int stream_id,",
          "",
          "[Added Lines]",
          "93: h2_task *h2_task_create(conn_rec *secondary, int stream_id,",
          "",
          "---------------"
        ],
        "modules/http2/h2_workers.c||modules/http2/h2_workers.c": [
          "File: modules/http2/h2_workers.c -> modules/http2/h2_workers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: {",
          "156:     apr_status_t rv;",
          "159:     if (slot->task) {",
          "",
          "[Removed Lines]",
          "158:     rv = h2_mplx_pop_task(m, &slot->task);",
          "",
          "[Added Lines]",
          "158:     rv = h2_mplx_s_pop_task(m, &slot->task);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:             if (!slot->aborted && (--slot->sticks > 0)) {",
          "238:             }",
          "239:             else {",
          "241:                 slot->task = NULL;",
          "242:             }",
          "243:         }",
          "",
          "[Removed Lines]",
          "237:                 h2_mplx_task_done(slot->task->mplx, slot->task, &slot->task);",
          "240:                 h2_mplx_task_done(slot->task->mplx, slot->task, NULL);",
          "",
          "[Added Lines]",
          "237:                 h2_mplx_s_task_done(slot->task->mplx, slot->task, &slot->task);",
          "240:                 h2_mplx_s_task_done(slot->task->mplx, slot->task, NULL);",
          "",
          "---------------"
        ],
        "modules/http2/mod_http2.c||modules/http2/mod_http2.c": [
          "File: modules/http2/mod_http2.c -> modules/http2/mod_http2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:     if (ctx) {",
          "238:         if (r) {",
          "239:             if (ctx->task) {",
          "241:                 if (stream && stream->push_policy != H2_PUSH_NONE) {",
          "242:                     return \"on\";",
          "243:                 }",
          "",
          "[Removed Lines]",
          "240:                 h2_stream *stream = h2_mplx_stream_get(ctx->task->mplx, ctx->task->stream_id);",
          "",
          "[Added Lines]",
          "240:                 h2_stream *stream = h2_mplx_t_stream_get(ctx->task->mplx, ctx->task);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271: {",
          "272:     if (ctx) {",
          "273:         if (ctx->task && !H2_STREAM_CLIENT_INITIATED(ctx->task->stream_id)) {",
          "275:             if (stream) {",
          "276:                 return apr_itoa(p, stream->initiated_on);",
          "277:             }",
          "",
          "[Removed Lines]",
          "274:             h2_stream *stream = h2_mplx_stream_get(ctx->task->mplx, ctx->task->stream_id);",
          "",
          "[Added Lines]",
          "274:             h2_stream *stream = h2_mplx_t_stream_get(ctx->task->mplx, ctx->task);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3303dc4f7273e05ea9a80402b33f68cd155c146a",
      "candidate_info": {
        "commit_hash": "3303dc4f7273e05ea9a80402b33f68cd155c146a",
        "repo": "apache/httpd",
        "commit_url": "https://github.com/apache/httpd/commit/3303dc4f7273e05ea9a80402b33f68cd155c146a",
        "files": [
          "CHANGES",
          "STATUS",
          "include/ap_mmn.h",
          "include/httpd.h",
          "modules/cache/mod_cache.c",
          "modules/cache/mod_cache_disk.c",
          "modules/cache/mod_cache_socache.c",
          "modules/dav/main/mod_dav.c",
          "modules/filters/mod_data.c",
          "modules/filters/mod_reflector.c",
          "modules/filters/mod_request.c",
          "modules/http/byterange_filter.c",
          "modules/http/http_filters.c",
          "modules/mappers/mod_negotiation.c",
          "modules/proxy/mod_proxy.c",
          "modules/proxy/mod_proxy_ajp.c",
          "modules/proxy/mod_proxy_http.c",
          "server/protocol.c",
          "server/util.c"
        ],
        "message": "*) strict content-length parsing      trunk patch http://svn.apache.org/r1877954                  http://svn.apache.org/r1877955                  http://svn.apache.org/r1879369                  http://svn.apache.org/r1879373      2.4.x patch: http://people.apache.org/~ylavic/patches/httpd-2.4.x-ap_parse_strict_length.patch     +1: ylavic, minfrin, jim\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1879639 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "include/ap_mmn.h||include/ap_mmn.h",
          "include/httpd.h||include/httpd.h",
          "modules/cache/mod_cache.c||modules/cache/mod_cache.c",
          "modules/cache/mod_cache_disk.c||modules/cache/mod_cache_disk.c",
          "modules/cache/mod_cache_socache.c||modules/cache/mod_cache_socache.c",
          "modules/dav/main/mod_dav.c||modules/dav/main/mod_dav.c",
          "modules/filters/mod_data.c||modules/filters/mod_data.c",
          "modules/filters/mod_reflector.c||modules/filters/mod_reflector.c",
          "modules/filters/mod_request.c||modules/filters/mod_request.c",
          "modules/http/byterange_filter.c||modules/http/byterange_filter.c",
          "modules/http/http_filters.c||modules/http/http_filters.c",
          "modules/mappers/mod_negotiation.c||modules/mappers/mod_negotiation.c",
          "modules/proxy/mod_proxy.c||modules/proxy/mod_proxy.c",
          "modules/proxy/mod_proxy_ajp.c||modules/proxy/mod_proxy_ajp.c",
          "modules/proxy/mod_proxy_http.c||modules/proxy/mod_proxy_http.c",
          "server/protocol.c||server/protocol.c",
          "server/util.c||server/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/ap_mmn.h||include/ap_mmn.h",
            "server/protocol.c||server/protocol.c"
          ],
          "candidate": [
            "include/ap_mmn.h||include/ap_mmn.h",
            "server/protocol.c||server/protocol.c"
          ]
        }
      },
      "candidate_diff": {
        "include/ap_mmn.h||include/ap_mmn.h": [
          "File: include/ap_mmn.h -> include/ap_mmn.h"
        ],
        "include/httpd.h||include/httpd.h": [
          "File: include/httpd.h -> include/httpd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2052: AP_DECLARE(char *) ap_append_pid(apr_pool_t *p, const char *string,",
          "2053:                                  const char *delim);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2062: AP_DECLARE(int) ap_parse_strict_length(apr_off_t *len, const char *str);",
          "",
          "---------------"
        ],
        "modules/cache/mod_cache.c||modules/cache/mod_cache.c": [
          "File: modules/cache/mod_cache.c -> modules/cache/mod_cache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1229:         return APR_SUCCESS;",
          "1230:     }",
          "1232:     if (reason) {",
          "1233:         ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00768)",
          "1234:                 \"cache: %s not cached for request %s. Reason: %s\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1234:     cl = apr_table_get(r->err_headers_out, \"Content-Length\");",
          "1235:     if (cl == NULL) {",
          "1236:         cl = apr_table_get(r->headers_out, \"Content-Length\");",
          "1237:     }",
          "1238:     if (cl && !ap_parse_strict_length(&size, cl)) {",
          "1239:         reason = \"invalid content length\";",
          "1240:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1252:     cache->in_checked = 1;",
          "1267:     if (!cl) {",
          "",
          "[Removed Lines]",
          "1256:     cl = apr_table_get(r->err_headers_out, \"Content-Length\");",
          "1257:     if (cl == NULL) {",
          "1258:         cl = apr_table_get(r->headers_out, \"Content-Length\");",
          "1259:     }",
          "1260:     if (cl) {",
          "1261:         char *errp;",
          "1262:         if (apr_strtoff(&size, cl, &errp, 10) || *errp || size < 0) {",
          "1264:         }",
          "1265:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "modules/cache/mod_cache_disk.c||modules/cache/mod_cache_disk.c": [
          "File: modules/cache/mod_cache_disk.c -> modules/cache/mod_cache_disk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1278:     if (seen_eos) {",
          "1281:         if (!dobj->disk_info.header_only) {",
          "1283:             if (dobj->data.tempfd) {",
          "1284:                 rv = apr_file_close(dobj->data.tempfd);",
          "",
          "[Removed Lines]",
          "1279:         const char *cl_header = apr_table_get(r->headers_out, \"Content-Length\");",
          "",
          "[Added Lines]",
          "1280:             const char *cl_header;",
          "1281:             apr_off_t cl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1305:                 apr_pool_destroy(dobj->data.pool);",
          "1306:                 return APR_EGENERAL;",
          "1307:             }",
          "1319:         }",
          "",
          "[Removed Lines]",
          "1308:             if (cl_header) {",
          "1309:                 apr_int64_t cl = apr_atoi64(cl_header);",
          "1310:                 if ((errno == 0) && (dobj->file_size != cl)) {",
          "1311:                     ap_log_rerror(",
          "1312:                             APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00735) \"URL %s didn't receive complete response, not caching\", h->cache_obj->key);",
          "1314:                     apr_pool_destroy(dobj->data.pool);",
          "1315:                     return APR_EGENERAL;",
          "1316:                 }",
          "1317:             }",
          "",
          "[Added Lines]",
          "1310:             cl_header = apr_table_get(r->headers_out, \"Content-Length\");",
          "1311:             if (cl_header && (!ap_parse_strict_length(&cl, cl_header)",
          "1312:                               || cl != dobj->file_size)) {",
          "1313:                 ap_log_rerror(",
          "1314:                         APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00735) \"URL %s didn't receive complete response, not caching\", h->cache_obj->key);",
          "1316:                 apr_pool_destroy(dobj->data.pool);",
          "1317:                 return APR_EGENERAL;",
          "1318:             }",
          "",
          "---------------"
        ],
        "modules/cache/mod_cache_socache.c||modules/cache/mod_cache_socache.c": [
          "File: modules/cache/mod_cache_socache.c -> modules/cache/mod_cache_socache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1046:     if (seen_eos) {",
          "1049:         if (r->connection->aborted || r->no_cache) {",
          "1050:             ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(02380)",
          "",
          "[Removed Lines]",
          "1047:         const char *cl_header = apr_table_get(r->headers_out, \"Content-Length\");",
          "",
          "[Added Lines]",
          "1047:         const char *cl_header;",
          "1048:         apr_off_t cl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1055:             sobj->pool = NULL;",
          "1056:             return APR_EGENERAL;",
          "1057:         }",
          "1070:         }",
          "",
          "[Removed Lines]",
          "1058:         if (cl_header) {",
          "1059:             apr_off_t cl;",
          "1060:             char *cl_endp;",
          "1061:             if (apr_strtoff(&cl, cl_header, &cl_endp, 10) != APR_SUCCESS",
          "1062:                     || *cl_endp != '\\0' || cl != sobj->body_length) {",
          "1063:                 ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02381)",
          "1064:                         \"URL %s didn't receive complete response, not caching\",",
          "1065:                         h->cache_obj->key);",
          "1066:                 apr_pool_destroy(sobj->pool);",
          "1067:                 sobj->pool = NULL;",
          "1068:                 return APR_EGENERAL;",
          "1069:             }",
          "",
          "[Added Lines]",
          "1060:         cl_header = apr_table_get(r->headers_out, \"Content-Length\");",
          "1061:         if (cl_header && (!ap_parse_strict_length(&cl, cl_header)",
          "1062:                           || cl != sobj->body_length)) {",
          "1063:             ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02381)",
          "1064:                     \"URL %s didn't receive complete response, not caching\",",
          "1065:                     h->cache_obj->key);",
          "1066:             apr_pool_destroy(sobj->pool);",
          "1067:             sobj->pool = NULL;",
          "1068:             return APR_EGENERAL;",
          "",
          "---------------"
        ],
        "modules/dav/main/mod_dav.c||modules/dav/main/mod_dav.c": [
          "File: modules/dav/main/mod_dav.c -> modules/dav/main/mod_dav.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "800:     char *range;",
          "801:     char *dash;",
          "802:     char *slash;",
          "805:     range_c = apr_table_get(r->headers_in, \"content-range\");",
          "806:     if (range_c == NULL)",
          "",
          "[Removed Lines]",
          "803:     char *errp;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "822:         return -1;",
          "823:     }",
          "826:         return -1;",
          "827:     }",
          "829:     if (*slash != '*') {",
          "830:         apr_off_t dummy;",
          "834:             return -1;",
          "835:         }",
          "836:     }",
          "",
          "[Removed Lines]",
          "820:     if (apr_strtoff(range_start, range + 6, &errp, 10)",
          "821:         || *errp || *range_start < 0) {",
          "824:     if (apr_strtoff(range_end, dash, &errp, 10)",
          "825:         || *errp || *range_end < 0 || *range_end < *range_start) {",
          "832:         if (apr_strtoff(&dummy, slash, &errp, 10)",
          "833:             || *errp || dummy <= *range_end) {",
          "",
          "[Added Lines]",
          "819:     if (!ap_parse_strict_length(range_start, range + 6)) {",
          "822:     if (!ap_parse_strict_length(range_end, dash)",
          "823:             || *range_end < *range_start) {",
          "830:         if (!ap_parse_strict_length(&dummy, slash)",
          "831:                 || dummy <= *range_end) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2485:         r->read_chunked = 1;",
          "2486:     }",
          "2487:     else if (lenp) {",
          "2496:             ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00590)",
          "2497:                           \"Invalid Content-Length %s\", lenp);",
          "2498:             return HTTP_BAD_REQUEST;",
          "2499:         }",
          "2502:     }",
          "2504:     if (r->read_chunked || r->remaining > 0) {",
          "",
          "[Removed Lines]",
          "2488:         const char *pos = lenp;",
          "2490:         while (apr_isdigit(*pos) || apr_isspace(*pos)) {",
          "2491:             ++pos;",
          "2492:         }",
          "2494:         if (*pos != '\\0') {",
          "2501:         r->remaining = apr_atoi64(lenp);",
          "",
          "[Added Lines]",
          "2486:         if (!ap_parse_strict_length(&r->remaining, lenp)) {",
          "2487:             r->remaining = 0;",
          "",
          "---------------"
        ],
        "modules/filters/mod_data.c||modules/filters/mod_data.c": [
          "File: modules/filters/mod_data.c -> modules/filters/mod_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:         if (content_length) {",
          "108:             apr_off_t len, clen;",
          "109:             apr_brigade_length(ctx->bb, 1, &len);",
          "112:                 ap_set_content_length(r, len +",
          "113:                                       apr_base64_encode_len((int)clen) - 1);",
          "114:             }",
          "",
          "[Removed Lines]",
          "110:             clen = apr_atoi64(content_length);",
          "111:             if (clen >= 0 && clen < APR_INT32_MAX) {",
          "",
          "[Added Lines]",
          "110:             if (ap_parse_strict_length(&clen, content_length)",
          "111:                     && clen < APR_INT32_MAX) {",
          "",
          "---------------"
        ],
        "modules/filters/mod_reflector.c||modules/filters/mod_reflector.c": [
          "File: modules/filters/mod_reflector.c -> modules/filters/mod_reflector.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:         if ((content_length = apr_table_get(r->headers_in, \"Content-Length\"))) {",
          "99:         }",
          "",
          "[Removed Lines]",
          "94:             apr_off_t offset;",
          "96:             apr_strtoff(&offset, content_length, NULL, 10);",
          "97:             ap_set_content_length(r, offset);",
          "",
          "[Added Lines]",
          "94:             apr_off_t clen;",
          "96:             if (!ap_parse_strict_length(&clen, content_length)) {",
          "97:                 ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(10243)",
          "98:                               \"reflector_handler: invalid content-length '%s'\",",
          "99:                               content_length);",
          "100:                 return HTTP_BAD_REQUEST;",
          "101:             }",
          "103:             ap_set_content_length(r, clen);",
          "",
          "---------------"
        ],
        "modules/filters/mod_request.c||modules/filters/mod_request.c": [
          "File: modules/filters/mod_request.c -> modules/filters/mod_request.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     if (!ctx) {",
          "78:         const char *lenp;",
          "80:         request_dir_conf *dconf = ap_get_module_config(f->r->per_dir_config,",
          "81:                                                        &request_module);",
          "",
          "[Removed Lines]",
          "79:         char *endstr = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:         if (lenp) {",
          "101:                 ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, f->r, APLOGNO(01411)",
          "104:                 ap_remove_input_filter(f);",
          "105:                 return bail_out_on_error(b, f, HTTP_REQUEST_ENTITY_TOO_LARGE);",
          "",
          "[Removed Lines]",
          "98:             if (apr_strtoff(&ctx->remaining, lenp, &endstr, 10)",
          "99:                 || endstr == lenp || *endstr || ctx->remaining < 0) {",
          "102:                               \"Invalid Content-Length\");",
          "",
          "[Added Lines]",
          "98:             if (!ap_parse_strict_length(&ctx->remaining, lenp)) {",
          "100:                               \"Invalid Content-Length '%s'\", lenp);",
          "",
          "---------------"
        ],
        "modules/http/byterange_filter.c||modules/http/byterange_filter.c": [
          "File: modules/http/byterange_filter.c -> modules/http/byterange_filter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:     while ((cur = ap_getword(r->pool, &range, ','))) {",
          "154:         char *dash;",
          "156:         apr_off_t number, start, end;",
          "158:         if (!*cur)",
          "",
          "[Removed Lines]",
          "155:         char *errp;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:         if (dash == cur) {",
          "173:                 return 0;",
          "174:             }",
          "175:             if (number < 1) {",
          "",
          "[Removed Lines]",
          "172:             if (apr_strtoff(&number, dash+1, &errp, 10) || *errp) {",
          "",
          "[Added Lines]",
          "171:             if (!ap_parse_strict_length(&number, dash+1)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:         }",
          "181:         else {",
          "184:                 return 0;",
          "185:             }",
          "186:             start = number;",
          "187:             if (*dash) {",
          "189:                     return 0;",
          "190:                 }",
          "191:                 end = number;",
          "",
          "[Removed Lines]",
          "183:             if (apr_strtoff(&number, cur, &errp, 10) || *errp) {",
          "188:                 if (apr_strtoff(&number, dash, &errp, 10) || *errp) {",
          "",
          "[Added Lines]",
          "182:             if (!ap_parse_strict_length(&number, cur)) {",
          "187:                 if (!ap_parse_strict_length(&number, dash)) {",
          "",
          "---------------"
        ],
        "modules/http/http_filters.c||modules/http/http_filters.c": [
          "File: modules/http/http_filters.c -> modules/http/http_filters.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "405:             lenp = NULL;",
          "406:         }",
          "407:         if (lenp) {",
          "410:             ctx->state = BODY_LENGTH;",
          "418:                 ctx->remaining = 0;",
          "419:                 ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01587)",
          "420:                               \"Invalid Content-Length\");",
          "",
          "[Removed Lines]",
          "408:             char *endstr;",
          "415:             if (apr_strtoff(&ctx->remaining, lenp, &endstr, 10)",
          "416:                 || endstr == lenp || *endstr || ctx->remaining < 0) {",
          "",
          "[Added Lines]",
          "414:             if (!ap_parse_strict_length(&ctx->remaining, lenp)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1734:         r->read_chunked = 1;",
          "1735:     }",
          "1736:     else if (lenp) {",
          "1741:             r->remaining = 0;",
          "1742:             ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(01594)",
          "1744:             return HTTP_BAD_REQUEST;",
          "1745:         }",
          "1746:     }",
          "",
          "[Removed Lines]",
          "1737:         char *endstr;",
          "1739:         if (apr_strtoff(&r->remaining, lenp, &endstr, 10)",
          "1740:             || *endstr || r->remaining < 0) {",
          "1743:                           \"Invalid Content-Length\");",
          "",
          "[Added Lines]",
          "1734:         if (!ap_parse_strict_length(&r->remaining, lenp)) {",
          "1737:                           \"Invalid Content-Length '%s'\", lenp);",
          "",
          "---------------"
        ],
        "modules/mappers/mod_negotiation.c||modules/mappers/mod_negotiation.c": [
          "File: modules/mappers/mod_negotiation.c -> modules/mappers/mod_negotiation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "988:                 has_content = 1;",
          "989:             }",
          "990:             else if (!strncmp(buffer, \"content-length:\", 15)) {",
          "994:                 body1 = ap_get_token(neg->pool, &body, 0);",
          "997:                     ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00684)",
          "998:                                   \"Parse error in type map, Content-Length: \"",
          "999:                                   \"'%s' in %s is invalid.\",",
          "1000:                                   body1, r->filename);",
          "1001:                     break;",
          "1002:                 }",
          "1004:                 has_content = 1;",
          "1005:             }",
          "1006:             else if (!strncmp(buffer, \"content-language:\", 17)) {",
          "",
          "[Removed Lines]",
          "991:                 char *errp;",
          "992:                 apr_off_t number;",
          "995:                 if (apr_strtoff(&number, body1, &errp, 10) != APR_SUCCESS",
          "996:                     || *errp || number < 0) {",
          "1003:                 mime_info.bytes = number;",
          "",
          "[Added Lines]",
          "991:                 apr_off_t clen;",
          "994:                 if (!ap_parse_strict_length(&clen, body1)) {",
          "1001:                 mime_info.bytes = clen;",
          "",
          "---------------"
        ],
        "modules/proxy/mod_proxy.c||modules/proxy/mod_proxy.c": [
          "File: modules/proxy/mod_proxy.c -> modules/proxy/mod_proxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1209:                     if (access_status != DECLINED) {",
          "1210:                         const char *cl_a;",
          "1212:                         apr_off_t cl;",
          "",
          "[Removed Lines]",
          "1211:                         char *end;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1218:                         if (access_status != HTTP_BAD_GATEWAY) {",
          "1219:                             goto cleanup;",
          "1220:                         }",
          "1221:                         cl_a = apr_table_get(r->headers_in, \"Content-Length\");",
          "1233:                         }",
          "",
          "[Removed Lines]",
          "1222:                         if (cl_a) {",
          "1223:                             apr_strtoff(&cl, cl_a, &end, 10);",
          "1230:                             if (cl > 0) {",
          "1231:                                 goto cleanup;",
          "1232:                             }",
          "",
          "[Added Lines]",
          "1222:                         if (cl_a && (!ap_parse_strict_length(&cl, cl_a)",
          "1223:                                      || cl > 0)) {",
          "1230:                             goto cleanup;",
          "",
          "---------------"
        ],
        "modules/proxy/mod_proxy_ajp.c||modules/proxy/mod_proxy_ajp.c": [
          "File: modules/proxy/mod_proxy_ajp.c -> modules/proxy/mod_proxy_ajp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:     if (r->main == NULL) {",
          "127:         const char *clp = apr_table_get(r->headers_in, \"Content-Length\");",
          "134:         }",
          "135:     }",
          "",
          "[Removed Lines]",
          "129:         if (clp) {",
          "130:             char *errp;",
          "131:             if (apr_strtoff(&len, clp, &errp, 10) || *errp || len < 0) {",
          "133:             }",
          "",
          "[Added Lines]",
          "129:         if (clp && !ap_parse_strict_length(&len, clp)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:     } else {",
          "257:         content_length = get_content_length(r);",
          "262:         if (status != APR_SUCCESS) {",
          "264:             conn->close = 1;",
          "",
          "[Removed Lines]",
          "258:         status = ap_get_brigade(r->input_filters, input_brigade,",
          "259:                                 AP_MODE_READBYTES, APR_BLOCK_READ,",
          "260:                                 maxsize - AJP_HEADER_SZ);",
          "",
          "[Added Lines]",
          "255:         if (content_length < 0) {",
          "256:             status = APR_EINVAL;",
          "257:         }",
          "258:         else {",
          "259:             status = ap_get_brigade(r->input_filters, input_brigade,",
          "260:                                     AP_MODE_READBYTES, APR_BLOCK_READ,",
          "261:                                     maxsize - AJP_HEADER_SZ);",
          "262:         }",
          "",
          "---------------"
        ],
        "modules/proxy/mod_proxy_http.c||modules/proxy/mod_proxy_http.c": [
          "File: modules/proxy/mod_proxy_http.c -> modules/proxy/mod_proxy_http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "769:     }",
          "770:     else if (req->old_cl_val) {",
          "771:         if (r->input_filters == r->proto_input_filters) {",
          "775:                 ap_log_rerror(APLOG_MARK, APLOG_ERR, status, r, APLOGNO(01085)",
          "776:                               \"could not parse request Content-Length (%s)\",",
          "777:                               req->old_cl_val);",
          "",
          "[Removed Lines]",
          "772:             char *endstr;",
          "773:             status = apr_strtoff(&req->cl_val, req->old_cl_val, &endstr, 10);",
          "774:             if (status != APR_SUCCESS || *endstr || req->cl_val < 0) {",
          "",
          "[Added Lines]",
          "772:             if (!ap_parse_strict_length(&req->cl_val, req->old_cl_val)) {",
          "",
          "---------------"
        ],
        "server/protocol.c||server/protocol.c": [
          "File: server/protocol.c -> server/protocol.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1367:     }",
          "1369:     if (!r->assbackwards) {",
          "1372:         ap_get_mime_headers_core(r, tmp_bb);",
          "1373:         if (r->status != HTTP_OK) {",
          "",
          "[Removed Lines]",
          "1370:         const char *tenc;",
          "",
          "[Added Lines]",
          "1370:         const char *tenc, *clen;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1380:             goto traceout;",
          "1381:         }",
          "1383:         tenc = apr_table_get(r->headers_in, \"Transfer-Encoding\");",
          "1384:         if (tenc) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1383:         clen = apr_table_get(r->headers_in, \"Content-Length\");",
          "1384:         if (clen) {",
          "1385:             apr_off_t cl;",
          "1387:             if (!ap_parse_strict_length(&cl, clen)) {",
          "1388:                 ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(10242)",
          "1389:                               \"client sent invalid Content-Length \"",
          "1390:                               \"(%s): %s\", clen, r->uri);",
          "1391:                 r->status = HTTP_BAD_REQUEST;",
          "1392:                 conn->keepalive = AP_CONN_CLOSE;",
          "1393:                 ap_send_error_response(r, 0);",
          "1394:                 ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);",
          "1395:                 ap_run_log_transaction(r);",
          "1396:                 apr_brigade_destroy(tmp_bb);",
          "1397:                 goto traceout;",
          "1398:             }",
          "1399:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1401:                 goto traceout;",
          "1402:             }",
          "1411:         }",
          "1412:     }",
          "",
          "[Removed Lines]",
          "1410:             apr_table_unset(r->headers_in, \"Content-Length\");",
          "",
          "[Added Lines]",
          "1428:             if (clen) {",
          "1429:                 apr_table_unset(r->headers_in, \"Content-Length\");",
          "1434:                 conn->keepalive = AP_CONN_CLOSE;",
          "1435:             }",
          "",
          "---------------"
        ],
        "server/util.c||server/util.c": [
          "File: server/util.c -> server/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2589:     return APR_SUCCESS;",
          "2590: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2592: AP_DECLARE(int) ap_parse_strict_length(apr_off_t *len, const char *str)",
          "2593: {",
          "2594:     char *end;",
          "2596:     return (apr_isdigit(*str)",
          "2597:             && apr_strtoff(len, str, &end, 10) == APR_SUCCESS",
          "2598:             && *end == '\\0');",
          "2599: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2598: AP_DECLARE(int) ap_request_has_body(request_rec *r)",
          "2599: {",
          "2600:     apr_off_t cl;",
          "2602:     const char *cls;",
          "2615: }",
          "2617: AP_DECLARE_NONSTD(apr_status_t) ap_pool_cleanup_set_null(void *data_)",
          "",
          "[Removed Lines]",
          "2601:     char *estr;",
          "2603:     int has_body;",
          "2605:     has_body = (!r->header_only",
          "2606:                 && (r->kept_body",
          "2607:                     || apr_table_get(r->headers_in, \"Transfer-Encoding\")",
          "2608:                     || ( (cls = apr_table_get(r->headers_in, \"Content-Length\"))",
          "2609:                         && (apr_strtoff(&cl, cls, &estr, 10) == APR_SUCCESS)",
          "2610:                         && (!*estr)",
          "2611:                         && (cl > 0) )",
          "2612:                     )",
          "2613:                 );",
          "2614:     return has_body;",
          "",
          "[Added Lines]",
          "2612:     return (!r->header_only",
          "2613:             && (r->kept_body",
          "2614:                 || apr_table_get(r->headers_in, \"Transfer-Encoding\")",
          "2615:                 || ((cls = apr_table_get(r->headers_in, \"Content-Length\"))",
          "2616:                     && ap_parse_strict_length(&cl, cls) && cl > 0)));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7173e91099ce59dc1654e5a94b3cde7a892f7fa",
      "candidate_info": {
        "commit_hash": "f7173e91099ce59dc1654e5a94b3cde7a892f7fa",
        "repo": "apache/httpd",
        "commit_url": "https://github.com/apache/httpd/commit/f7173e91099ce59dc1654e5a94b3cde7a892f7fa",
        "files": [
          "CHANGES",
          "STATUS",
          "modules/http2/h2.h",
          "modules/http2/h2_request.c",
          "modules/http2/h2_session.c",
          "modules/http2/h2_stream.c"
        ],
        "message": "Merge r1881620, r1881635 from trunk:\n\nProcess early errors via a dummy HTTP/1.1 request as well\n\nProcess early errors via a dummy HTTP/1.1 request as well to ensure\nthat the request gets logged correctly and possible custom error\npages are considered. The previous way of directly sending a HTTP/2\nanswer with the HTTP status code appropriate for the error is more\nefficient, but does not log the request nor sents a possible custom\nerror page.\n\n* modules/http2/h2.h: Add http_status to h2_request struct and define\n  H2_HTTP_STATUS_UNSET.\n\n* modules/http2/h2_request.c(h2_request_create_rec): Check if\n  http_status is set for the request and die with the\n  status code it contains if set.\n\n* modules/http2/h2_session.c(on_header_cb): Adjust the error condition\n  now that we mark early errors via http_status: Only return an error\n  if the status is not success and http_status is not H2_HTTP_STATUS_UNSET.\n\n* modules/http2/h2_stream.c(set_error_response): Set http_status\n  on the request instead of creating headers for a response and a\n  respective brigade.\n\nGithub: closes #137\n\n\n* Changelog for r1881620\n\nSubmitted by: rpluem\nReviewed by: rpluem, giovanni, ylavic\n\nGithub: closes #142\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1883475 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "modules/http2/h2.h||modules/http2/h2.h",
          "modules/http2/h2_request.c||modules/http2/h2_request.c",
          "modules/http2/h2_session.c||modules/http2/h2_session.c",
          "modules/http2/h2_stream.c||modules/http2/h2_stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "modules/http2/h2_request.c||modules/http2/h2_request.c"
          ],
          "candidate": [
            "modules/http2/h2_request.c||modules/http2/h2_request.c"
          ]
        }
      },
      "candidate_diff": {
        "modules/http2/h2.h||modules/http2/h2.h": [
          "File: modules/http2/h2.h -> modules/http2/h2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "144: };",
          "146: typedef struct h2_headers h2_headers;",
          "148: struct h2_headers {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:     int http_status;            /* Store a possible HTTP status code that gets",
          "155: #define H2_HTTP_STATUS_UNSET (0)",
          "",
          "---------------"
        ],
        "modules/http2/h2_request.c||modules/http2/h2_request.c": [
          "File: modules/http2/h2_request.c -> modules/http2/h2_request.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     }",
          "81:     req = apr_pcalloc(pool, sizeof(*req));",
          "87:     if (r->server) {",
          "88:         req->serialize = h2_config_rgeti(r, H2_CONF_SER_HEADERS);",
          "89:     }",
          "",
          "[Removed Lines]",
          "82:     req->method    = apr_pstrdup(pool, r->method);",
          "83:     req->scheme    = scheme;",
          "84:     req->authority = authority;",
          "85:     req->path      = path;",
          "86:     req->headers   = apr_table_make(pool, 10);",
          "",
          "[Added Lines]",
          "82:     req->method      = apr_pstrdup(pool, r->method);",
          "83:     req->scheme      = scheme;",
          "84:     req->authority   = authority;",
          "85:     req->path        = path;",
          "86:     req->headers     = apr_table_make(pool, 10);",
          "87:     req->http_status = H2_HTTP_STATUS_UNSET;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "327:         }",
          "328:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:     if (req->http_status != H2_HTTP_STATUS_UNSET) {",
          "332:         access_status = req->http_status;",
          "333:         r->status = HTTP_OK;",
          "335:         c->keepalive = AP_CONN_CLOSE;",
          "336:     }",
          "",
          "---------------"
        ],
        "modules/http2/h2_session.c||modules/http2/h2_session.c": [
          "File: modules/http2/h2_session.c -> modules/http2/h2_session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:     status = h2_stream_add_header(stream, (const char *)name, namelen,",
          "313:                                   (const char *)value, valuelen);",
          "315:         return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;",
          "316:     }",
          "317:     return 0;",
          "",
          "[Removed Lines]",
          "314:     if (status != APR_SUCCESS && !h2_stream_is_ready(stream)) {",
          "",
          "[Added Lines]",
          "314:     if (status != APR_SUCCESS",
          "315:         && (!stream->rtmp",
          "316:             || stream->rtmp->http_status == H2_HTTP_STATUS_UNSET)) {",
          "",
          "---------------"
        ],
        "modules/http2/h2_stream.c||modules/http2/h2_stream.c": [
          "File: modules/http2/h2_stream.c -> modules/http2/h2_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "639: static void set_error_response(h2_stream *stream, int http_status)",
          "640: {",
          "641:     if (!h2_stream_is_ready(stream)) {",
          "652:     }",
          "653: }",
          "",
          "[Removed Lines]",
          "642:         conn_rec *c = stream->session->c;",
          "643:         apr_bucket *b;",
          "644:         h2_headers *response;",
          "646:         response = h2_headers_die(http_status, stream->request, stream->pool);",
          "647:         prep_output(stream);",
          "648:         b = apr_bucket_eos_create(c->bucket_alloc);",
          "649:         APR_BRIGADE_INSERT_HEAD(stream->out_buffer, b);",
          "650:         b = h2_bucket_headers_create(c->bucket_alloc, response);",
          "651:         APR_BRIGADE_INSERT_HEAD(stream->out_buffer, b);",
          "",
          "[Added Lines]",
          "642:         stream->rtmp->http_status = http_status;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a962ba73047b5478d702c8ad09fd1a167e1d3736",
      "candidate_info": {
        "commit_hash": "a962ba73047b5478d702c8ad09fd1a167e1d3736",
        "repo": "apache/httpd",
        "commit_url": "https://github.com/apache/httpd/commit/a962ba73047b5478d702c8ad09fd1a167e1d3736",
        "files": [
          "CHANGES",
          "include/ap_mmn.h",
          "include/http_protocol.h",
          "modules/http/http_request.c",
          "modules/http2/h2_request.c",
          "modules/proxy/mod_proxy.c",
          "modules/proxy/proxy_util.c",
          "server/protocol.c"
        ],
        "message": "Merge r1895914, r1895921 from trunk:\n\n  *) http: Enforce that fully qualified uri-paths not to be forward-proxied\n     have an http(s) scheme, and that the ones to be forward proxied have a\n     hostname, per HTTP specifications.\n     trunk patch: http://svn.apache.org/r1895914\n                  http://svn.apache.org/r1895921\n     2.4.x patch: https://patch-diff.githubusercontent.com/raw/apache/httpd/pull/286.patch\n     backport PR: https://github.com/apache/httpd/pull/286\n     +1: ylavic, minfrin, gbechis\n\n\nmod_proxy: Detect unix: scheme syntax errors at load time.\n\n* modules/proxy/mod_proxy.c(add_pass, add_member, set_proxy_param,\n                            proxysection):\n  Check return value of ap_proxy_de_socketfy().\n\n* modules/proxy/proxy_util.c(ap_proxy_get_worker_ex):\n  Check return value of ap_proxy_de_socketfy().\n\n\n\nhttp: Enforce that fully qualified uri-paths not to be forward-proxied\n      have an http(s) scheme, and that the ones to be forward proxied have a\n      hostname, per HTTP specifications.\n\nThe early checks avoid failing the request later on and thus save cycles\nfor those invalid cases.\n\n\nSubmitted by: ylavic\nReviewed by: ylavic, minfrin, gbechis\nCloses #286\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1895955 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "include/ap_mmn.h||include/ap_mmn.h",
          "include/http_protocol.h||include/http_protocol.h",
          "modules/http/http_request.c||modules/http/http_request.c",
          "modules/http2/h2_request.c||modules/http2/h2_request.c",
          "modules/proxy/mod_proxy.c||modules/proxy/mod_proxy.c",
          "modules/proxy/proxy_util.c||modules/proxy/proxy_util.c",
          "server/protocol.c||server/protocol.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/ap_mmn.h||include/ap_mmn.h",
            "include/http_protocol.h||include/http_protocol.h",
            "modules/http2/h2_request.c||modules/http2/h2_request.c",
            "server/protocol.c||server/protocol.c"
          ],
          "candidate": [
            "include/ap_mmn.h||include/ap_mmn.h",
            "include/http_protocol.h||include/http_protocol.h",
            "modules/http2/h2_request.c||modules/http2/h2_request.c",
            "server/protocol.c||server/protocol.c"
          ]
        }
      },
      "candidate_diff": {
        "include/ap_mmn.h||include/ap_mmn.h": [
          "File: include/ap_mmn.h -> include/ap_mmn.h"
        ],
        "include/http_protocol.h||include/http_protocol.h": [
          "File: include/http_protocol.h -> include/http_protocol.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "96: AP_DECLARE(void) ap_get_mime_headers_core(request_rec *r,",
          "97:                                           apr_bucket_brigade *bb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: AP_DECLARE(int) ap_post_read_request(request_rec *r);",
          "",
          "---------------"
        ],
        "modules/http/http_request.c||modules/http/http_request.c": [
          "File: modules/http/http_request.c -> modules/http/http_request.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "684:         ap_die(access_status, new);",
          "685:         return NULL;",
          "686:     }",
          "",
          "[Removed Lines]",
          "683:     if ((access_status = ap_run_post_read_request(new))) {",
          "",
          "[Added Lines]",
          "683:     if ((access_status = ap_post_read_request(new))) {",
          "",
          "---------------"
        ],
        "modules/http2/h2_request.c||modules/http2/h2_request.c": [
          "File: modules/http2/h2_request.c -> modules/http2/h2_request.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:     ap_add_input_filter_handle(ap_http_input_filter_handle,",
          "371:                                NULL, r, r->connection);",
          "",
          "[Removed Lines]",
          "373:     if ((access_status = ap_run_post_read_request(r))) {",
          "",
          "[Added Lines]",
          "373:     if ((access_status = ap_post_read_request(r))) {",
          "",
          "---------------"
        ],
        "modules/proxy/mod_proxy.c||modules/proxy/mod_proxy.c": [
          "File: modules/proxy/mod_proxy.c -> modules/proxy/mod_proxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "785:             r->proxyreq = PROXYREQ_PROXY;",
          "786:             r->uri = r->unparsed_uri;",
          "787:             r->filename = apr_pstrcat(r->pool, \"proxy:\", r->uri, NULL);",
          "",
          "[Removed Lines]",
          "778:     if (conf->req && r->parsed_uri.scheme) {",
          "780:         if (!(r->parsed_uri.hostname",
          "781:               && !ap_cstr_casecmp(r->parsed_uri.scheme, ap_http_scheme(r))",
          "782:               && ap_matches_request_vhost(r, r->parsed_uri.hostname,",
          "783:                                           (apr_port_t)(r->parsed_uri.port_str ? r->parsed_uri.port",
          "784:                                                        : ap_default_port(r))))) {",
          "",
          "[Added Lines]",
          "778:     if (conf->req && r->parsed_uri.scheme && r->parsed_uri.hostname) {",
          "780:         if (ap_cstr_casecmp(r->parsed_uri.scheme, ap_http_scheme(r)) != 0",
          "781:             || !ap_matches_request_vhost(r, r->parsed_uri.hostname,",
          "782:                                          (apr_port_t)(r->parsed_uri.port_str",
          "783:                                                       ? r->parsed_uri.port",
          "784:                                                       : ap_default_port(r)))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2007:     struct proxy_alias *new;",
          "2008:     char *f = cmd->path;",
          "2009:     char *r = NULL;",
          "2010:     char *word;",
          "2011:     apr_table_t *params = apr_table_make(cmd->pool, 5);",
          "2012:     const apr_array_header_t *arr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2010:     const char *real;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2093:     if (r == NULL) {",
          "2094:         return \"ProxyPass|ProxyPassMatch needs a path when not defined in a location\";",
          "2095:     }",
          "2098:     if (cmd->path) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2097:     if (!(real = ap_proxy_de_socketfy(cmd->temp_pool, r))) {",
          "2098:         return \"ProxyPass|ProxyPassMatch uses an invalid \\\"unix:\\\" URL\";",
          "2099:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2109:     }",
          "2111:     new->fake = apr_pstrdup(cmd->pool, f);",
          "2113:     new->flags = flags;",
          "2114:     if (worker_type & AP_PROXY_WORKER_IS_MATCH) {",
          "2115:         new->regex = ap_pregcomp(cmd->pool, f, AP_REG_EXTENDED);",
          "",
          "[Removed Lines]",
          "2112:     new->real = apr_pstrdup(cmd->pool, ap_proxy_de_socketfy(cmd->pool, r));",
          "",
          "[Added Lines]",
          "2117:     new->real = apr_pstrdup(cmd->pool, real);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2635:     proxy_worker *worker;",
          "2636:     char *path = cmd->path;",
          "2637:     char *name = NULL;",
          "2638:     char *word;",
          "2639:     apr_table_t *params = apr_table_make(cmd->pool, 5);",
          "2640:     const apr_array_header_t *arr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2643:     const char *real;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2675:         return \"BalancerMember must define balancer name when outside <Proxy > section\";",
          "2676:     if (!name)",
          "2677:         return \"BalancerMember must define remote proxy server\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2684:     if (!(real = ap_proxy_de_socketfy(cmd->temp_pool, name))) {",
          "2685:         return \"BalancerMember uses an invalid \\\"unix:\\\" URL\";",
          "2686:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2687:     }",
          "2692:     if (!worker) {",
          "2693:         ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, cmd->server, APLOGNO(01147)",
          "2694:                      \"Defining worker '%s' for balancer '%s'\",",
          "",
          "[Removed Lines]",
          "2690:     worker = ap_proxy_get_worker(cmd->temp_pool, balancer, conf,",
          "2691:                                  ap_proxy_de_socketfy(cmd->temp_pool, name));",
          "",
          "[Added Lines]",
          "2699:     worker = ap_proxy_get_worker(cmd->temp_pool, balancer, conf, real);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2785:         }",
          "2786:     }",
          "2787:     else {",
          "2788:         worker = ap_proxy_get_worker_ex(cmd->temp_pool, NULL, conf,",
          "2791:         if (!worker) {",
          "2792:             if (in_proxy_section) {",
          "2793:                 err = ap_proxy_define_worker_ex(cmd->pool, &worker, NULL,",
          "",
          "[Removed Lines]",
          "2789:                                         ap_proxy_de_socketfy(cmd->temp_pool, name),",
          "2790:                                         worker_type);",
          "",
          "[Added Lines]",
          "2796:         const char *real;",
          "2798:         if (!(real = ap_proxy_de_socketfy(cmd->temp_pool, name))) {",
          "2799:             return \"ProxySet uses an invalid \\\"unix:\\\" URL\";",
          "2800:         }",
          "2803:                                         real, worker_type);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2930:             }",
          "2931:         }",
          "2932:         else {",
          "2933:             worker = ap_proxy_get_worker_ex(cmd->temp_pool, NULL, sconf,",
          "2936:             if (!worker) {",
          "2937:                 err = ap_proxy_define_worker_ex(cmd->pool, &worker, NULL, sconf,",
          "2938:                                                 conf->p, worker_type);",
          "",
          "[Removed Lines]",
          "2934:                                             ap_proxy_de_socketfy(cmd->temp_pool, conf->p),",
          "2935:                                             worker_type);",
          "",
          "[Added Lines]",
          "2946:             const char *real;",
          "2948:             if (!(real = ap_proxy_de_socketfy(cmd->temp_pool, conf->p))) {",
          "2949:                 return \"<Proxy/ProxyMatch > uses an invalid \\\"unix:\\\" URL\";",
          "2950:             }",
          "2953:                                             real, worker_type);",
          "",
          "---------------"
        ],
        "modules/proxy/proxy_util.c||modules/proxy/proxy_util.c": [
          "File: modules/proxy/proxy_util.c -> modules/proxy/proxy_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1742:     }",
          "1744:     url = ap_proxy_de_socketfy(p, url);",
          "1746:     c = ap_strchr_c(url, ':');",
          "1747:     if (c == NULL || c[1] != '/' || c[2] != '/' || c[3] == '\\0') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1745:     if (!url) {",
          "1746:         return NULL;",
          "1747:     }",
          "",
          "---------------"
        ],
        "server/protocol.c||server/protocol.c": [
          "File: server/protocol.c -> server/protocol.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1549:     apply_server_config(r);",
          "1552:         goto die;",
          "1553:     }",
          "",
          "[Removed Lines]",
          "1551:     if ((access_status = ap_run_post_read_request(r))) {",
          "",
          "[Added Lines]",
          "1551:     if ((access_status = ap_post_read_request(r))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1603:     return NULL;",
          "1604: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1606: AP_DECLARE(int) ap_post_read_request(request_rec *r)",
          "1607: {",
          "1608:     int status;",
          "1610:     if ((status = ap_run_post_read_request(r))) {",
          "1611:         return status;",
          "1612:     }",
          "1615:     if (!r->proxyreq",
          "1616:             && r->parsed_uri.scheme",
          "1617:             && (ap_cstr_casecmpn(r->parsed_uri.scheme, \"http\", 4) != 0",
          "1618:                 || (r->parsed_uri.scheme[4] != '\\0'",
          "1619:                     && (apr_tolower(r->parsed_uri.scheme[4]) != 's'",
          "1620:                         || r->parsed_uri.scheme[5] != '\\0')))) {",
          "1621:         return HTTP_BAD_REQUEST;",
          "1622:     }",
          "1624:     return OK;",
          "1625: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}