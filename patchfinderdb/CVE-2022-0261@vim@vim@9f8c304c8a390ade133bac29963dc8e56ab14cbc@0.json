{
  "cve_id": "CVE-2022-0261",
  "cve_desc": "Heap-based Buffer Overflow in GitHub repository vim/vim prior to 8.2.",
  "repo": "vim/vim",
  "patch_hash": "9f8c304c8a390ade133bac29963dc8e56ab14cbc",
  "patch_info": {
    "commit_hash": "9f8c304c8a390ade133bac29963dc8e56ab14cbc",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/9f8c304c8a390ade133bac29963dc8e56ab14cbc",
    "files": [
      "src/ops.c",
      "src/testdir/test_visual.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4120: block insert goes over the end of the line\n\nProblem:    Block insert goes over the end of the line.\nSolution:   Handle invalid byte better.  Fix inserting the wrong text.",
    "before_after_code_files": [
      "src/ops.c||src/ops.c",
      "src/testdir/test_visual.vim||src/testdir/test_visual.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/ops.c||src/ops.c": [
      "File: src/ops.c -> src/ops.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "536:      if (b_insert)",
      "537:      {",
      "538:   off = (*mb_head_off)(oldp, oldp + offset + spaces);",
      "539:      }",
      "540:      else",
      "541:      {",
      "544:      }",
      "547:  }",
      "548:  if (spaces < 0)  // can happen when the cursor was moved",
      "549:      spaces = 0;",
      "552:  if (newp == NULL)",
      "553:      continue;",
      "557:  oldp += offset;",
      "",
      "[Removed Lines]",
      "542:   off = (*mb_off_next)(oldp, oldp + offset);",
      "543:   offset += off;",
      "545:      spaces -= off;",
      "546:      count -= off;",
      "551:  newp = alloc(STRLEN(oldp) + s_len + count + 1);",
      "556:  mch_memmove(newp, oldp, (size_t)(offset));",
      "",
      "[Added Lines]",
      "539:   spaces -= off;",
      "540:   count -= off;",
      "546:   off = (*mb_head_off)(oldp, oldp + offset);",
      "547:   offset -= off;",
      "554:  newp = alloc(STRLEN(oldp) + spaces + s_len",
      "555:       + (spaces > 0 && !bdp->is_short ? ts_val - spaces : 0)",
      "556:           + count + 1);",
      "561:  mch_memmove(newp, oldp, (size_t)offset);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "564:  mch_memmove(newp + startcol, s, (size_t)s_len);",
      "565:  offset += s_len;",
      "568:  {",
      "575:  }",
      "577:  if (spaces > 0)",
      "",
      "[Removed Lines]",
      "567:  if (spaces && !bdp->is_short)",
      "570:      vim_memset(newp + offset + spaces, ' ', (size_t)(ts_val - spaces));",
      "572:      oldp++;",
      "574:      count++;",
      "",
      "[Added Lines]",
      "572:  if (spaces > 0 && !bdp->is_short)",
      "574:      if (*oldp == TAB)",
      "575:      {",
      "577:   vim_memset(newp + offset + spaces, ' ',",
      "578:           (size_t)(ts_val - spaces));",
      "580:   oldp++;",
      "582:   count++;",
      "583:      }",
      "584:      else",
      "586:   count = spaces;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1598:       oap->start_vcol = t;",
      "1599:   }",
      "1600:   else if (oap->op_type == OP_APPEND",
      "1602:     >= curbuf->b_op_start_orig.col",
      "1603:            + curbuf->b_op_start_orig.coladd)",
      "1604:   {",
      "",
      "[Removed Lines]",
      "1601:    && oap->end.col + oap->end.coladd",
      "",
      "[Added Lines]",
      "1613:    && oap->start.col + oap->start.coladd",
      "",
      "---------------"
    ],
    "src/testdir/test_visual.vim||src/testdir/test_visual.vim": [
      "File: src/testdir/test_visual.vim -> src/testdir/test_visual.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1278:   au! BufNew",
      "1279: endfunc",
      "1281: func Test_visual_reselect_with_count()",
      "1282:   \" this was causing an illegal memory access",
      "1283:   let lines =<< trim END",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1281: func Test_visual_block_append_invalid_char()",
      "1282:   \" this was going over the end of the line",
      "1283:   new",
      "1284:   call setline(1, ['    let xxx', 'xxxxx\u0088', 'xxxxxxxxxxx'])",
      "1285:   exe \"normal 0\\<C-V>jjA-\\<Esc>\"",
      "1286:   call assert_equal([' -   let xxx', 'xxxxx   -\u0088', 'xxxxxxxx-xxx'], getline(1, 3))",
      "1287:   bwipe!",
      "1288: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: static int included_patches[] =",
      "754:     4119,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "754:     4120,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7745f14ef324a7134b2f26a47451cf5032f44b89",
      "candidate_info": {
        "commit_hash": "7745f14ef324a7134b2f26a47451cf5032f44b89",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/7745f14ef324a7134b2f26a47451cf5032f44b89",
        "files": [
          "src/ops.c",
          "src/version.c"
        ],
        "message": "patch 8.2.4388: dead code in op_insert()\n\nProblem:    Dead code in op_insert().\nSolution:   Remove condition and else block. (closes #9782)",
        "before_after_code_files": [
          "src/ops.c||src/ops.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ops.c||src/ops.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ops.c||src/ops.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ops.c||src/ops.c": [
          "File: src/ops.c -> src/ops.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1586:      int t = getviscol2(curbuf->b_op_start_orig.col,",
          "1587:             curbuf->b_op_start_orig.coladd);",
          "1594:            + curbuf->b_op_start_orig.coladd)",
          "1612:      }",
          "1614:      {",
          "1616:   pre_textlen += bd.textlen;",
          "1617:   pre_textlen -= t - oap->start_vcol;",
          "1618:      }",
          "1619:  }",
          "",
          "[Removed Lines]",
          "1589:      if (!bd.is_MAX)",
          "1590:      {",
          "1591:   if (oap->op_type == OP_INSERT",
          "1592:    && oap->start.col + oap->start.coladd",
          "1593:     != curbuf->b_op_start_orig.col",
          "1595:   {",
          "1596:       oap->start.col = curbuf->b_op_start_orig.col;",
          "1597:       pre_textlen -= t - oap->start_vcol;",
          "1598:       oap->start_vcol = t;",
          "1599:   }",
          "1600:   else if (oap->op_type == OP_APPEND",
          "1601:    && oap->start.col + oap->start.coladd",
          "1602:     >= curbuf->b_op_start_orig.col",
          "1603:            + curbuf->b_op_start_orig.coladd)",
          "1604:   {",
          "1605:       oap->start.col = curbuf->b_op_start_orig.col;",
          "1607:       pre_textlen += bd.textlen;",
          "1608:       pre_textlen -= t - oap->start_vcol;",
          "1609:       oap->start_vcol = t;",
          "1610:       oap->op_type = OP_INSERT;",
          "1611:   }",
          "1613:      else if (bd.is_MAX && oap->op_type == OP_APPEND)",
          "",
          "[Added Lines]",
          "1589:      if (oap->op_type == OP_INSERT",
          "1590:       && oap->start.col + oap->start.coladd",
          "1591:        != curbuf->b_op_start_orig.col",
          "1593:      {",
          "1594:   oap->start.col = curbuf->b_op_start_orig.col;",
          "1595:   pre_textlen -= t - oap->start_vcol;",
          "1596:   oap->start_vcol = t;",
          "1598:      else if (oap->op_type == OP_APPEND",
          "1599:       && oap->start.col + oap->start.coladd",
          "1600:        >= curbuf->b_op_start_orig.col",
          "1601:            + curbuf->b_op_start_orig.coladd)",
          "1603:   oap->start.col = curbuf->b_op_start_orig.col;",
          "1607:   oap->start_vcol = t;",
          "1608:   oap->op_type = OP_INSERT;",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4387,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4388,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4067bd3604215b48e4b4201e28f9e401b08418e4",
      "candidate_info": {
        "commit_hash": "4067bd3604215b48e4b4201e28f9e401b08418e4",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/4067bd3604215b48e4b4201e28f9e401b08418e4",
        "files": [
          "src/ops.c",
          "src/testdir/test_blockedit.vim",
          "src/testdir/test_visual.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.3073: when cursor is move for block append wrong text is inserted\n\nProblem:    When cursor is move for block append wrong text is inserted.\nSolution:   Calculate an offset. (Christian Brabandt, closes #8433,\n            closes #8288)",
        "before_after_code_files": [
          "src/ops.c||src/ops.c",
          "src/testdir/test_blockedit.vim||src/testdir/test_blockedit.vim",
          "src/testdir/test_visual.vim||src/testdir/test_visual.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ops.c||src/ops.c",
            "src/testdir/test_visual.vim||src/testdir/test_visual.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ops.c||src/ops.c",
            "src/testdir/test_visual.vim||src/testdir/test_visual.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ops.c||src/ops.c": [
          "File: src/ops.c -> src/ops.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:      spaces -= off;",
          "546:      count -= off;",
          "547:  }",
          "549:  newp = alloc(STRLEN(oldp) + s_len + count + 1);",
          "550:  if (newp == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548:  if (spaces < 0)  // can happen when the cursor was moved",
          "549:      spaces = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1455:     struct block_def bd;",
          "1456:     int   i;",
          "1457:     pos_T  t1;",
          "1460:     bd.is_MAX = (curwin->w_curswant == MAXCOL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1460:     pos_T  start_insert;",
          "1462:     int   offset = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1526:     }",
          "1528:     t1 = oap->start;",
          "1529:     (void)edit(NUL, FALSE, (linenr_T)count1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1534:     start_insert = curwin->w_cursor;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1564:  if (oap->start.lnum == curbuf->b_op_start_orig.lnum",
          "1565:         && !bd.is_MAX && !did_indent)",
          "1566:  {",
          "1571:      {",
          "1581:            + curbuf->b_op_start_orig.coladd)",
          "1582:      {",
          "1587:   pre_textlen += bd.textlen;",
          "1588:   pre_textlen -= t - oap->start_vcol;",
          "1591:      }",
          "1592:  }",
          "",
          "[Removed Lines]",
          "1567:      if (oap->op_type == OP_INSERT",
          "1568:       && oap->start.col + oap->start.coladd",
          "1569:    != curbuf->b_op_start_orig.col",
          "1570:            + curbuf->b_op_start_orig.coladd)",
          "1572:   int t = getviscol2(curbuf->b_op_start_orig.col,",
          "1573:            curbuf->b_op_start_orig.coladd);",
          "1574:   oap->start.col = curbuf->b_op_start_orig.col;",
          "1575:   pre_textlen -= t - oap->start_vcol;",
          "1576:   oap->start_vcol = t;",
          "1577:      }",
          "1578:      else if (oap->op_type == OP_APPEND",
          "1579:         && oap->end.col + oap->end.coladd",
          "1580:    >= curbuf->b_op_start_orig.col",
          "1583:   int t = getviscol2(curbuf->b_op_start_orig.col,",
          "1584:            curbuf->b_op_start_orig.coladd);",
          "1585:   oap->start.col = curbuf->b_op_start_orig.col;",
          "1589:   oap->start_vcol = t;",
          "1590:   oap->op_type = OP_INSERT;",
          "",
          "[Added Lines]",
          "1573:      int t = getviscol2(curbuf->b_op_start_orig.col,",
          "1574:             curbuf->b_op_start_orig.coladd);",
          "1576:      if (!bd.is_MAX)",
          "1578:   if (oap->op_type == OP_INSERT",
          "1579:    && oap->start.col + oap->start.coladd",
          "1580:     != curbuf->b_op_start_orig.col",
          "1582:   {",
          "1583:       oap->start.col = curbuf->b_op_start_orig.col;",
          "1584:       pre_textlen -= t - oap->start_vcol;",
          "1585:       oap->start_vcol = t;",
          "1586:   }",
          "1587:   else if (oap->op_type == OP_APPEND",
          "1588:    && oap->end.col + oap->end.coladd",
          "1589:     >= curbuf->b_op_start_orig.col",
          "1590:            + curbuf->b_op_start_orig.coladd)",
          "1591:   {",
          "1592:       oap->start.col = curbuf->b_op_start_orig.col;",
          "1594:       pre_textlen += bd.textlen;",
          "1595:       pre_textlen -= t - oap->start_vcol;",
          "1596:       oap->start_vcol = t;",
          "1597:       oap->op_type = OP_INSERT;",
          "1598:   }",
          "1599:      }",
          "1600:      else if (bd.is_MAX && oap->op_type == OP_APPEND)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1617:  len = STRLEN(firstline);",
          "1618:  add = bd.textcol;",
          "1619:  if (oap->op_type == OP_APPEND)",
          "1620:      add += bd.textlen;",
          "1621:  if ((size_t)add > len)",
          "1622:      firstline += len;  // short line, point to the NUL",
          "1623:  else",
          "1624:      firstline += add;",
          "1627:  {",
          "1628:      ins_text = vim_strnsave(firstline, ins_len);",
          "1629:      if (ins_text != NULL)",
          "",
          "[Removed Lines]",
          "1625:  if (pre_textlen >= 0",
          "1626:        && (ins_len = (long)STRLEN(firstline) - pre_textlen) > 0)",
          "",
          "[Added Lines]",
          "1634:  {",
          "1637:      if (bd.is_MAX",
          "1638:   && (start_insert.lnum == Insstart.lnum",
          "1639:         && start_insert.col > Insstart.col))",
          "1640:      {",
          "1641:   offset = (start_insert.col - Insstart.col);",
          "1642:   add -= offset;",
          "1643:   if (oap->end_vcol > offset)",
          "1644:       oap->end_vcol -= (offset + 1);",
          "1645:   else",
          "1647:       return;",
          "1648:      }",
          "1649:  }",
          "1654:  if (pre_textlen >= 0 && (ins_len =",
          "1655:       (long)STRLEN(firstline) - pre_textlen - offset) > 0)",
          "",
          "---------------"
        ],
        "src/testdir/test_blockedit.vim||src/testdir/test_blockedit.vim": [
          "File: src/testdir/test_blockedit.vim -> src/testdir/test_blockedit.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   bwipe!",
          "29: endfunc",
          "31: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: func Test_blockappend_eol_cursor()",
          "32:   new",
          "33:   \" Test 1 Move 1 char left",
          "34:   call setline(1, ['aaa', 'bbb', 'ccc'])",
          "35:   exe \"norm! gg$\\<c-v>2jA\\<left>x\\<esc>\"",
          "36:   call assert_equal(['aaxa', 'bbxb', 'ccxc'], getline(1, '$'))",
          "37:   \" Test 2 Move 2 chars left",
          "38:   sil %d",
          "39:   call setline(1, ['aaa', 'bbb', 'ccc'])",
          "40:   exe \"norm! gg$\\<c-v>2jA\\<left>\\<left>x\\<esc>\"",
          "41:   call assert_equal(['axaa', 'bxbb', 'cxcc'], getline(1, '$'))",
          "42:   \" Test 3 Move 3 chars left (outside of the visual selection)",
          "43:   sil %d",
          "44:   call setline(1, ['aaa', 'bbb', 'ccc'])",
          "45:   exe \"norm! ggl$\\<c-v>2jA\\<left>\\<left>\\<left>x\\<esc>\"",
          "46:   call assert_equal(['xaaa', 'bbb', 'ccc'], getline(1, '$'))",
          "47:   bw!",
          "48: endfunc",
          "50: func Test_blockappend_eol_cursor2()",
          "51:   new",
          "52:   \" Test 1 Move 1 char left",
          "53:   call setline(1, ['aaaaa', 'bbb', 'ccccc'])",
          "54:   exe \"norm! gg\\<c-v>$2jA\\<left>x\\<esc>\"",
          "55:   call assert_equal(['aaaaxa', 'bbbx', 'ccccxc'], getline(1, '$'))",
          "56:   \" Test 2 Move 2 chars left",
          "57:   sil %d",
          "58:   call setline(1, ['aaaaa', 'bbb', 'ccccc'])",
          "59:   exe \"norm! gg\\<c-v>$2jA\\<left>\\<left>x\\<esc>\"",
          "60:   call assert_equal(['aaaxaa', 'bbbx', 'cccxcc'], getline(1, '$'))",
          "61:   \" Test 3 Move 3 chars left (to the beginning of the visual selection)",
          "62:   sil %d",
          "63:   call setline(1, ['aaaaa', 'bbb', 'ccccc'])",
          "64:   exe \"norm! gg\\<c-v>$2jA\\<left>\\<left>\\<left>x\\<esc>\"",
          "65:   call assert_equal(['aaxaaa', 'bbxb', 'ccxccc'], getline(1, '$'))",
          "66:   \" Test 4 Move 3 chars left (outside of the visual selection)",
          "67:   sil %d",
          "68:   call setline(1, ['aaaaa', 'bbb', 'ccccc'])",
          "69:   exe \"norm! ggl\\<c-v>$2jA\\<left>\\<left>\\<left>x\\<esc>\"",
          "70:   call assert_equal(['aaxaaa', 'bbxb', 'ccxccc'], getline(1, '$'))",
          "71:   \" Test 5 Move 4 chars left (outside of the visual selection)",
          "72:   sil %d",
          "73:   call setline(1, ['aaaaa', 'bbb', 'ccccc'])",
          "74:   exe \"norm! ggl\\<c-v>$2jA\\<left>\\<left>\\<left>\\<left>x\\<esc>\"",
          "75:   call assert_equal(['axaaaa', 'bxbb', 'cxcccc'], getline(1, '$'))",
          "76:   bw!",
          "77: endfunc",
          "",
          "---------------"
        ],
        "src/testdir/test_visual.vim||src/testdir/test_visual.vim": [
          "File: src/testdir/test_visual.vim -> src/testdir/test_visual.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "807:   %d _",
          "808:   call setline(1, ['aaa', 'bbb', 'ccc'])",
          "809:   exe \"normal $\\<C-V>2jA\\<Left>x\"",
          "815:   \" Repeat the previous test but use 'l' to move the cursor instead of '$'",
          "816:   call setline(1, ['aaa', 'bbb', 'ccc'])",
          "817:   exe \"normal! gg2l\\<C-V>2jA\\<Left>x\"",
          "",
          "[Removed Lines]",
          "810:   \" BUG: Instead of adding x as the third character in all the three lines,",
          "811:   \" 'a' is added in the second and third lines at the end. This bug is not",
          "812:   \" reproducible if this operation is performed manually.",
          "813:   \"call assert_equal(['aaxa', 'bbxb', 'ccxc'], getline(1, '$'))",
          "814:   call assert_equal(['aaxa', 'bbba', 'ccca'], getline(1, '$'))",
          "",
          "[Added Lines]",
          "810:   call assert_equal(['aaxa', 'bbxb', 'ccxc'], getline(1, '$'))",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "756: static int included_patches[] =",
          "759:     3072,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759:     3073,",
          "",
          "---------------"
        ]
      }
    }
  ]
}