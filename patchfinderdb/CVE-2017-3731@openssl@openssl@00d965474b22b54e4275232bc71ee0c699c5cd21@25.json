{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "122580ef71e4e5f355a1a104c9bfb36feee43759",
      "candidate_info": {
        "commit_hash": "122580ef71e4e5f355a1a104c9bfb36feee43759",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/122580ef71e4e5f355a1a104c9bfb36feee43759",
        "files": [
          "ssl/record/rec_layer_s3.c"
        ],
        "message": "A zero return from BIO_read()/BIO_write() could be retryable\n\nA zero return from BIO_read()/BIO_write() could mean that an IO operation\nis retryable. A zero return from SSL_read()/SSL_write() means that the\nconnection has been closed down (either cleanly or not). Therefore we\nshould not propagate a zero return value from BIO_read()/BIO_write() back\nup the stack to SSL_read()/SSL_write(). This could result in a retryable\nfailure being treated as fatal.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit 4880672a9b41a09a0984b55e219f02a2de7ab75e)",
        "before_after_code_files": [
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:             if (s->mode & SSL_MODE_RELEASE_BUFFERS && !SSL_IS_DTLS(s))",
          "307:                 if (len + left == 0)",
          "308:                     ssl3_release_read_buffer(s);",
          "310:         }",
          "311:         left += i;",
          "",
          "[Removed Lines]",
          "309:             return (i);",
          "",
          "[Added Lines]",
          "315:             return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "925:                 SSL3_BUFFER_set_left(&wb[currbuf], 0);",
          "926:             }",
          "928:         }",
          "929:         SSL3_BUFFER_add_offset(&wb[currbuf], i);",
          "930:         SSL3_BUFFER_add_left(&wb[currbuf], -i);",
          "",
          "[Removed Lines]",
          "927:             return (i);",
          "",
          "[Added Lines]",
          "939:             return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fd7aa95f08f72fc3cd603fe009e0e74b2edb25d",
      "candidate_info": {
        "commit_hash": "6fd7aa95f08f72fc3cd603fe009e0e74b2edb25d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6fd7aa95f08f72fc3cd603fe009e0e74b2edb25d",
        "files": [
          "crypto/bn/asm/sparcv9-mont.pl"
        ],
        "message": "bn/asm/sparcv9-mont.pl: fix squaring code path.\n\nThis module is used only with odd input lengths, i.e. not used in normal\nPKI cases, on contemporary processors. The problem was \"illuminated\" by\nfuzzing tests.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit 120a9e1a825bd0407639bedb1e8e15823cf7a545)",
        "before_after_code_files": [
          "crypto/bn/asm/sparcv9-mont.pl||crypto/bn/asm/sparcv9-mont.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/asm/sparcv9-mont.pl||crypto/bn/asm/sparcv9-mont.pl": [
          "File: crypto/bn/asm/sparcv9-mont.pl -> crypto/bn/asm/sparcv9-mont.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "302: ########",
          "304: ######## code without following dedicated squaring procedure.",
          "305: ########",
          "306: $sbit=\"%i2\";  # re-use $bp!",
          "",
          "[Removed Lines]",
          "303: ######## .Lbn_sqr_mont gives up to 20% *overall* improvement over",
          "",
          "[Added Lines]",
          "303: ######## .Lbn_sqr_mont gives up to 20% *overall* improvement over",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413:  srlx $car1,32,$car1",
          "414:  add %sp,$bias+$frame+4,$tp",
          "417:  mulx $apj,$mul0,$acc0",
          "418:  mulx $npj,$mul1,$acc1",
          "419:  add $acc0,$car0,$car0",
          "",
          "[Removed Lines]",
          "416: .Lsqr_2nd:",
          "",
          "[Added Lines]",
          "416: .Lsqr_2nd:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "422:  and $car0,$mask,$acc0",
          "423:  ld [$np+$j],$npj   ! np[j]",
          "424:  srlx $car0,32,$car0",
          "426:  ld [$tp+8],$tpj   ! tp[j]",
          "427:  add $acc0,$acc0,$acc0",
          "428:  add $j,4,$j    ! j++",
          "",
          "[Removed Lines]",
          "425:  add $acc1,$car1,$car1",
          "",
          "[Added Lines]",
          "425:  add $acc1,$car1,$car1",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "436:  bl %icc,.Lsqr_2nd",
          "437:  add $tp,4,$tp   ! tp++",
          "438: !.Lsqr_2nd",
          "440:  mulx $apj,$mul0,$acc0",
          "441:  mulx $npj,$mul1,$acc1",
          "442:  add $acc0,$car0,$car0",
          "443:  add $tpj,$car1,$car1",
          "445:  srlx $car0,32,$car0",
          "446:  add $acc1,$car1,$car1",
          "447:  add $acc0,$acc0,$acc0",
          "",
          "[Removed Lines]",
          "444:  and $car0,$mask,$acc0",
          "",
          "[Added Lines]",
          "444:  and $car0,$mask,$acc0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "449:  srlx $acc0,32,$sbit",
          "450:  and $acc0,$mask,$acc0",
          "451:  add $acc0,$car1,$car1",
          "453:  srlx $car1,32,$car1",
          "455:  add $car0,$car0,$car0",
          "",
          "[Removed Lines]",
          "452:  st $car1,[$tp]   ! tp[j-1]",
          "",
          "[Added Lines]",
          "452:  st $car1,[$tp]   ! tp[j-1]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "509:  add $j,4,$j",
          "510:  cmp $j,$num",
          "511:  be,pn %icc,.Lsqr_no_inner2",
          "514: .Lsqr_inner2:",
          "515:  mulx $apj,$mul0,$acc0",
          "",
          "[Removed Lines]",
          "512:  add $tp,4,$tp",
          "",
          "[Added Lines]",
          "512:  add $tp,4,$tp",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "517:  add $tpj,$car1,$car1",
          "518:  add $acc0,$car0,$car0",
          "519:  ld [$ap+$j],$apj   ! ap[j]",
          "521:  ld [$np+$j],$npj   ! np[j]",
          "522:  srlx $car0,32,$car0",
          "523:  add $acc0,$acc0,$acc0",
          "",
          "[Removed Lines]",
          "520:  and $car0,$mask,$acc0",
          "",
          "[Added Lines]",
          "520:  and $car0,$mask,$acc0",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "532:  st $car1,[$tp]   ! tp[j-1]",
          "533:  srlx $car1,32,$car1",
          "534:  bl %icc,.Lsqr_inner2",
          "537: .Lsqr_no_inner2:",
          "538:  mulx $apj,$mul0,$acc0",
          "539:  mulx $npj,$mul1,$acc1",
          "541:  add $acc0,$car0,$car0",
          "542:  and $car0,$mask,$acc0",
          "543:  srlx $car0,32,$car0",
          "",
          "[Removed Lines]",
          "535:  add $tp,4,$tp   ! tp++",
          "540:  add $tpj,$car1,$car1",
          "",
          "[Added Lines]",
          "535:  add $tp,4,$tp   ! tp++",
          "540:  add $tpj,$sbit,$sbit",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "546:  srlx $acc0,32,$sbit",
          "547:  and $acc0,$mask,$acc0",
          "548:  add $acc0,$car1,$car1",
          "550:  st $car1,[$tp]   ! tp[j-1]",
          "551:  srlx $car1,32,$car1",
          "",
          "[Removed Lines]",
          "549:  add $acc1,$car1,$car1",
          "",
          "[Added Lines]",
          "549:  add $acc1,$car1,$car1",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "591:  cmp $j,$i",
          "592:  add $acc1,$car1,$car1",
          "593:  ld [$np+$j],$npj",
          "595:  srlx $car1,32,$car1",
          "596:  bl %icc,.Lsqr_last",
          "597:  add $tp,4,$tp",
          "598: !.Lsqr_last",
          "600:  mulx $npj,$mul1,$acc1",
          "602:  add $acc0,$car1,$car1",
          "603:  add $acc1,$car1,$car1",
          "604:  st $car1,[$tp]",
          "",
          "[Removed Lines]",
          "594:  st $car1,[$tp]",
          "601:  add $tpj,$car1,$car1",
          "",
          "[Added Lines]",
          "594:  st $car1,[$tp]",
          "595:  srlx $car1,32,$car1",
          "596:  bl %icc,.Lsqr_last",
          "597:  add $tp,4,$tp",
          "604:  add $tmp0,$sbit,$sbit",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "949bd8e45eb4d2697d20c2249fa42cba545da2ac",
      "candidate_info": {
        "commit_hash": "949bd8e45eb4d2697d20c2249fa42cba545da2ac",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/949bd8e45eb4d2697d20c2249fa42cba545da2ac",
        "files": [
          "test/recipes/60-test_x509_store.t"
        ],
        "message": "Add a test of the X509_STORE / X509_LOOKUP API\n\nFortunately, \"openssl verify\" makes good use of that API\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2652)\n(cherry picked from commit bb0f7eca75b8da1538c08c1f5be1bb7ea8f40638)",
        "before_after_code_files": [
          "test/recipes/60-test_x509_store.t||test/recipes/60-test_x509_store.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/60-test_x509_store.t||test/recipes/60-test_x509_store.t": [
          "File: test/recipes/60-test_x509_store.t -> test/recipes/60-test_x509_store.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /usr/bin/env perl",
          "2: # Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.",
          "3: #",
          "4: # Licensed under the OpenSSL license (the \"License\").  You may not use",
          "5: # this file except in compliance with the License.  You can obtain a copy",
          "6: # in the file LICENSE in the source distribution or at",
          "7: # https://www.openssl.org/source/license.html",
          "10: use strict;",
          "11: use warnings;",
          "13: use File::Copy;",
          "14: use File::Spec::Functions qw/:DEFAULT canonpath/;",
          "15: use OpenSSL::Test qw/:DEFAULT srctop_file/;",
          "17: setup(\"test_x509_store\");",
          "19: # We use 'openssl verify' for these tests, as it contains everything",
          "20: # we need to conduct these tests.  The tests here are a subset of the",
          "21: # ones found in 25-test_verify.t",
          "23: sub verify {",
          "24:     my ($cert, $purpose, $trustedpath, $untrusted, @opts) = @_;",
          "25:     my @args = qw(openssl verify -auth_level 1 -purpose);",
          "26:     my @path = qw(test certs);",
          "27:     push(@args, \"$purpose\", @opts);",
          "28:     push(@args, \"-CApath\", $trustedpath);",
          "29:     for (@$untrusted) { push(@args, \"-untrusted\", srctop_file(@path, \"$_.pem\")) }",
          "30:     push(@args, srctop_file(@path, \"$cert.pem\"));",
          "31:     run(app([@args]));",
          "32: }",
          "34: plan tests => 3;",
          "36: indir \"60-test_x509_store\" => sub {",
          "37:     for ((\"root-cert\")) {",
          "38:         copy(srctop_file(\"test\", \"certs\", \"$_.pem\"), curdir());",
          "39:     }",
          "40:     ok(run(app([qw(openssl rehash), curdir()])), \"Rehashing\");",
          "42:     # Canonical success",
          "43:     ok(verify(\"ee-cert\", \"sslserver\", curdir(), [\"ca-cert\"], \"-show_chain\"),",
          "44:        \"verify ee-cert\");",
          "46:     # Failure because root cert not present in CApath",
          "47:     ok(!verify(\"ca-root2\", \"any\", curdir(), [], \"-show_chain\"));",
          "48: }, create => 1, cleanup => 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d049ed24b06ada5bb8c50143c23c061647ca5d9",
      "candidate_info": {
        "commit_hash": "8d049ed24b06ada5bb8c50143c23c061647ca5d9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8d049ed24b06ada5bb8c50143c23c061647ca5d9",
        "files": [
          "crypto/evp/p5_crpt2.c",
          "test/evp_test.c",
          "test/evptests.txt"
        ],
        "message": "Fixed PKCS5_PBKDF2_HMAC() to adhere to the documentation.\n\nThe documentation of this function states that the password parameter\ncan be NULL. However, the implementation returns an error in this case\ndue to the inner workings of the HMAC_Init_ex() function.\nWith this change, NULL password will be treated as an empty string and\nPKCS5_PBKDF2_HMAC() no longer fails on this input.\n\nI have also added two new test cases that tests the handling of the\nspecial values NULL and -1 of the password and passlen parameters,\nrespectively.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1692)\n(cherry picked from commit fa013b65241dfed9b7d9e10e0adfedc9869c797e)",
        "before_after_code_files": [
          "crypto/evp/p5_crpt2.c||crypto/evp/p5_crpt2.c",
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/p5_crpt2.c||crypto/evp/p5_crpt2.c": [
          "File: crypto/evp/p5_crpt2.c -> crypto/evp/p5_crpt2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:                       const unsigned char *salt, int saltlen, int iter,",
          "34:                       const EVP_MD *digest, int keylen, unsigned char *out)",
          "35: {",
          "36:     unsigned char digtmp[EVP_MAX_MD_SIZE], *p, itmp[4];",
          "37:     int cplen, j, k, tkeylen, mdlen;",
          "38:     unsigned long i = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     const char *empty = \"\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         return 0;",
          "48:     p = out;",
          "49:     tkeylen = keylen;",
          "51:         passlen = 0;",
          "53:         passlen = strlen(pass);",
          "54:     if (!HMAC_Init_ex(hctx_tpl, pass, passlen, digest, NULL)) {",
          "55:         HMAC_CTX_free(hctx_tpl);",
          "56:         return 0;",
          "",
          "[Removed Lines]",
          "50:     if (!pass)",
          "52:     else if (passlen == -1)",
          "",
          "[Added Lines]",
          "51:     if (pass == NULL) {",
          "52:         pass = empty;",
          "54:     } else if (passlen == -1) {",
          "56:     }",
          "",
          "---------------"
        ],
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:         return 1;",
          "143:     }",
          "145:     if (value[0] == '\"') {",
          "146:         size_t vlen;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:     if (strcmp(value, \"NULL\") == 0) {",
          "151:         return 1;",
          "152:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "641:     memset(&t, 0, sizeof(t));",
          "642:     t.start_line = -1;",
          "644:     if (in == NULL) {",
          "645:         fprintf(stderr, \"Can't open %s for reading\\n\", argv[1]);",
          "646:         return 1;",
          "",
          "[Removed Lines]",
          "643:     in = BIO_new_file(argv[1], \"r\");",
          "",
          "[Added Lines]",
          "654:     in = BIO_new_file(argv[1], \"rb\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d52c9b58a6e6c6dba62221b469e1576fe26b3c20",
      "candidate_info": {
        "commit_hash": "d52c9b58a6e6c6dba62221b469e1576fe26b3c20",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d52c9b58a6e6c6dba62221b469e1576fe26b3c20",
        "files": [
          "test/ssl_test_ctx.c"
        ],
        "message": "Fix a mem leak in ssl_test_ctx.c\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2650)\n(cherry picked from commit d605fc3a0ce4103ca6660904795bf1209cdb55b7)",
        "before_after_code_files": [
          "test/ssl_test_ctx.c||test/ssl_test_ctx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/ssl_test_ctx.c||test/ssl_test_ctx.c": [
          "File: test/ssl_test_ctx.c -> test/ssl_test_ctx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "507:     OPENSSL_free(conf->client.alpn_protocols);",
          "508:     OPENSSL_free(conf->server.alpn_protocols);",
          "509:     OPENSSL_free(conf->server2.alpn_protocols);",
          "510: }",
          "512: static void ssl_test_ctx_free_extra_data(SSL_TEST_CTX *ctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510:     OPENSSL_free(conf->client.reneg_ciphers);",
          "",
          "---------------"
        ]
      }
    }
  ]
}