{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
      "candidate_info": {
        "commit_hash": "b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Avoid allocating excessive registers for the PARTITION BY expressions when processing window functions.\n\nFossilOrigin-Name: 180be266238e18c01f8bd52c75dd9aa3e26e553620258141cd95189a0ae59ddb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6ad553192051eaa0c6d929baacde2de07b93c6d09de861028bbce55a2c9bfdd3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3571:   int regResult;",
          "",
          "[Removed Lines]",
          "3574:   int regPart;            /* First in a set of registers holding PARTITION BY",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1118: void sqlite3WindowCodeInit(Parse *pParse, Window *pMWin){",
          "1119:   Window *pWin;",
          "1120:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1124:     pMWin->regPart = pParse->nMem+1;",
          "1127:   }",
          "1129:   pMWin->regFirst = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1121:   int nPart = (pMWin->pPartition ? pMWin->pPartition->nExpr : 0);",
          "1122:   nPart += (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "1123:   if( nPart ){",
          "1125:     pParse->nMem += nPart;",
          "1126:     sqlite3VdbeAddOp3(v, OP_Null, 0, pMWin->regPart, pMWin->regPart+nPart-1);",
          "",
          "[Added Lines]",
          "1124:   if( pMWin->pPartition ){",
          "1125:     int nExpr = pMWin->pPartition->nExpr;",
          "1127:     pParse->nMem += nExpr;",
          "1128:     sqlite3VdbeAddOp3(v, OP_Null, 0, pMWin->regPart, pMWin->regPart+nExpr-1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2302:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "2303:   sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2307:   sqlite3VdbeJumpHere(v, addrIfNot);",
          "2308:   if( regPeer ){",
          "2309:     windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer, lblWhereEnd);",
          "",
          "[Removed Lines]",
          "2306:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.SECOND_ROW\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2354:       }",
          "2355:     }",
          "2356:   }",
          "2360:   sqlite3VdbeResolveLabel(v, lblWhereEnd);",
          "",
          "[Removed Lines]",
          "2357:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.SECOND_ROW\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2366:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2367:   }",
          "2370:   addrEmpty = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2371:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2372:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "",
          "[Removed Lines]",
          "2369:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.FLUSH\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2414:   sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2415:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "2417:   if( pMWin->pPartition ){",
          "2418:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "2419:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "",
          "[Removed Lines]",
          "2416:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.FLUSH\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f134f0267e79a78c76a78a1e8c2a0370db28a0a",
      "candidate_info": {
        "commit_hash": "0f134f0267e79a78c76a78a1e8c2a0370db28a0a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f134f0267e79a78c76a78a1e8c2a0370db28a0a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "Small optimizations to the grammar for window functions save about 120 bytes of space in the parser tables.\n\nFossilOrigin-Name: bce01d9584e52b23d7c07c2e832d5fa5d6e6235711c856b903a296725f61ed6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc0fb1c324be2fd668bc4398c7d364b7e3c5a98537fe5fb58a125b66f3e6d041",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1694: frame_opt(A) ::= range_or_rows(X) frame_bound_s(Y) frame_exclude_opt(Z). {",
          "1695:   A = sqlite3WindowAlloc(pParse, X, Y.eType, Y.pExpr, TK_CURRENT, 0, Z);",
          "1696: }",
          "1698:   A = sqlite3WindowAlloc(pParse, X, Y.eType, Y.pExpr, Z.eType, Z.pExpr, W);",
          "1699: }",
          "1715: %type frame_exclude_opt {u8}",
          "1719: %type frame_exclude {u8}",
          "1726: %type window_clause {Window*}",
          "",
          "[Removed Lines]",
          "1697: frame_opt(A) ::= range_or_rows(X) BETWEEN frame_bound_s(Y) AND frame_bound_e(Z) frame_exclude_opt(W). {",
          "1701: range_or_rows(A) ::= RANGE.   { A = TK_RANGE; }",
          "1702: range_or_rows(A) ::= ROWS.    { A = TK_ROWS;  }",
          "1703: range_or_rows(A) ::= GROUPS.  { A = TK_GROUPS;}",
          "1706: frame_bound_s(A) ::= frame_bound(X). { A = X; }",
          "1707: frame_bound_s(A) ::= UNBOUNDED PRECEDING. {A.eType = TK_UNBOUNDED; A.pExpr = 0;}",
          "1708: frame_bound_e(A) ::= frame_bound(X). { A = X; }",
          "1709: frame_bound_e(A) ::= UNBOUNDED FOLLOWING. {A.eType = TK_UNBOUNDED; A.pExpr = 0;}",
          "1711: frame_bound(A) ::= expr(X) PRECEDING.   { A.eType = TK_PRECEDING; A.pExpr = X; }",
          "1712: frame_bound(A) ::= CURRENT ROW.         { A.eType = TK_CURRENT  ; A.pExpr = 0; }",
          "1713: frame_bound(A) ::= expr(X) FOLLOWING.   { A.eType = TK_FOLLOWING; A.pExpr = X; }",
          "1716: frame_exclude_opt(A) ::= . { A = 0; }",
          "1717: frame_exclude_opt(A) ::= EXCLUDE frame_exclude(X). { A = X; }",
          "1720: frame_exclude(A) ::= NO OTHERS.   { A = TK_NO; }",
          "1721: frame_exclude(A) ::= CURRENT ROW. { A = TK_CURRENT; }",
          "1722: frame_exclude(A) ::= GROUP.       { A = TK_GROUP; }",
          "1723: frame_exclude(A) ::= TIES.        { A = TK_TIES; }",
          "",
          "[Added Lines]",
          "1697: frame_opt(A) ::= range_or_rows(X) BETWEEN frame_bound_s(Y) AND",
          "1698:                           frame_bound_e(Z) frame_exclude_opt(W). {",
          "1702: range_or_rows(A) ::= RANGE|ROWS|GROUPS(X).   {A = @X; /*A-overwrites-X*/}",
          "1704: frame_bound_s(A) ::= frame_bound(X).         {A = X;}",
          "1705: frame_bound_s(A) ::= UNBOUNDED(X) PRECEDING. {A.eType = @X; A.pExpr = 0;}",
          "1706: frame_bound_e(A) ::= frame_bound(X).         {A = X;}",
          "1707: frame_bound_e(A) ::= UNBOUNDED(X) FOLLOWING. {A.eType = @X; A.pExpr = 0;}",
          "1709: frame_bound(A) ::= expr(X) PRECEDING|FOLLOWING(Y).",
          "1710:                                              {A.eType = @Y; A.pExpr = X;}",
          "1711: frame_bound(A) ::= CURRENT(X) ROW.           {A.eType = @X; A.pExpr = 0;}",
          "1714: frame_exclude_opt(A) ::= . {A = 0;}",
          "1715: frame_exclude_opt(A) ::= EXCLUDE frame_exclude(X). {A = X;}",
          "1718: frame_exclude(A) ::= NO(X) OTHERS.   {A = @X; /*A-overwrites-X*/}",
          "1719: frame_exclude(A) ::= CURRENT(X) ROW. {A = @X; /*A-overwrites-X*/}",
          "1720: frame_exclude(A) ::= GROUP|TIES(X).  {A = @X; /*A-overwrites-X*/}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d0a3fd340b3a74d3811ccd70d9df58b4f772aac",
      "candidate_info": {
        "commit_hash": "7d0a3fd340b3a74d3811ccd70d9df58b4f772aac",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7d0a3fd340b3a74d3811ccd70d9df58b4f772aac",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/index.test"
        ],
        "message": "Add a test case for ticket [ae0f637bddc5290b44669e066a].\n\nFossilOrigin-Name: ece481695fc3c959c3eba0fb485cdda43a10b06d17259b0121e15bfc5e8e8b9f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/index.test||test/index.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5997d075665faca6b70fa647e877ebc84c473b32887b96235865d59ce80247f8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/index.test||test/index.test": [
          "File: test/index.test -> test/index.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "747:   INSERT INTO t1(a,b) VALUES('a',1),('a',0);",
          "748:   SELECT a, b, '|' FROM t1;",
          "749: } {a 1 | a 0 |}",
          "752: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "751: # 2019-05-10 ticket https://www.sqlite.org/src/info/ae0f637bddc5290b",
          "752: do_execsql_test index-23.0 {",
          "753:   DROP TABLE t1;",
          "754:   CREATE TABLE t1(a TEXT, b REAL);",
          "755:   CREATE UNIQUE INDEX t1x1 ON t1(a GLOB b);",
          "756:   INSERT INTO t1(a,b) VALUES('0.0','1'),('1.0','1');",
          "757:   SELECT * FROM t1;",
          "758:   REINDEX;",
          "759: } {0.0 1.0 1.0 1.0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb224ab1394cc981cf85a9e5520714ca8221f38f",
      "candidate_info": {
        "commit_hash": "cb224ab1394cc981cf85a9e5520714ca8221f38f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cb224ab1394cc981cf85a9e5520714ca8221f38f",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtreeC.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Make sure the rowid of an RTREE virtual table has integer affinity. Ticket [9fe487ba3c064b4e]\n\nFossilOrigin-Name: 7ae8c0d52f6aa7f27537216f85456ef49dade040366cfb250c789206ecd4dc5a",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtreeC.test||ext/rtree/rtreeC.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3728:   pSql = sqlite3_str_new(db);",
          "3730:   for(ii=4; ii<argc; ii++){",
          "3731:     if( argv[ii][0]=='+' ){",
          "3732:       pRtree->nAux++;",
          "",
          "[Removed Lines]",
          "3729:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%s\", argv[3]);",
          "",
          "[Added Lines]",
          "3729:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%s INT\", argv[3]);",
          "",
          "---------------"
        ],
        "ext/rtree/rtreeC.test||ext/rtree/rtreeC.test": [
          "File: ext/rtree/rtreeC.test -> ext/rtree/rtreeC.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "177: #",
          "178: reset_db",
          "179: do_execsql_test 5.1 {",
          "181:   CREATE VIRTUAL TABLE rt USING rtree(id, x1, x2, +d1);",
          "183:   INSERT INTO t1(x) VALUES(1);",
          "",
          "[Removed Lines]",
          "180:   CREATE TABLE t1(x PRIMARY KEY, y);",
          "",
          "[Added Lines]",
          "180:   CREATE TABLE t1(x INT PRIMARY KEY, y);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7e5ad8e0ab7ee91a5ccb19a9654d6a036233f74d2fdc45f7315feb3d9d035fd4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
      "candidate_info": {
        "commit_hash": "8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c"
        ],
        "message": "Basic UPDATE functionality working for VIRTUAL tables.\n\nFossilOrigin-Name: c21959d4eb5d742a097a98e1874c0bf132dc962a97a65be1ab22d6ca3cf2b261",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7bfe0f679d8951b3e925bdf549efa0f8d6b514eddeaca69cbfddbd9476cfff5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:         }else if( pPk && (pTab->aCol[j].colFlags & COLFLAG_PRIMKEY)!=0 ){",
          "309:           chngPk = 1;",
          "310:         }",
          "311:         aXRef[j] = i;",
          "312:         break;",
          "313:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "312:         else if( pTab->aCol[j].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL) ){",
          "313:           sqlite3ErrorMsg(pParse,",
          "314:              \"cannot UPDATE generated column \\\"%s\\\"\",",
          "315:              pTab->aCol[j].zName);",
          "316:           goto update_cleanup;",
          "317:         }",
          "318: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "623:     oldmask |= sqlite3TriggerColmask(pParse,",
          "624:         pTrigger, pChanges, 0, TRIGGER_BEFORE|TRIGGER_AFTER, pTab, onError",
          "625:     );",
          "627:       if( oldmask==0xffffffff",
          "628:        || (i<32 && (oldmask & MASKBIT32(i))!=0)",
          "630:       ){",
          "631:         testcase(  oldmask!=0xffffffff && i==31 );",
          "633:       }else{",
          "635:       }",
          "636:     }",
          "637:     if( chngRowid==0 && pPk==0 ){",
          "",
          "[Removed Lines]",
          "626:     for(i=0; i<pTab->nCol; i++){",
          "629:        || (pTab->aCol[i].colFlags & COLFLAG_PRIMKEY)!=0",
          "632:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regOld+i);",
          "634:         sqlite3VdbeAddOp2(v, OP_Null, 0, regOld+i);",
          "",
          "[Added Lines]",
          "634:     for(i=0, k=regOld; i<pTab->nCol; i++, k++){",
          "635:       u32 colFlags = pTab->aCol[i].colFlags;",
          "636:       if( colFlags & COLFLAG_VIRTUAL ){",
          "637:         k--;",
          "638:         continue;",
          "639:       }",
          "642:        || (colFlags & COLFLAG_PRIMKEY)!=0",
          "645:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "647:         sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "655:   newmask = sqlite3TriggerColmask(",
          "656:       pParse, pTrigger, pChanges, 1, TRIGGER_BEFORE, pTab, onError",
          "657:   );",
          "659:     if( i==pTab->iPKey ){",
          "661:     }else{",
          "662:       j = aXRef[i];",
          "663:       if( j>=0 ){",
          "665:       }else if( 0==(tmask&TRIGGER_BEFORE) || i>31 || (newmask & MASKBIT32(i)) ){",
          "",
          "[Removed Lines]",
          "658:   for(i=0; i<pTab->nCol; i++){",
          "660:       sqlite3VdbeAddOp2(v, OP_Null, 0, regNew+i);",
          "664:         sqlite3ExprCode(pParse, pChanges->a[j].pExpr, regNew+i);",
          "",
          "[Added Lines]",
          "671:   for(i=0, k=regNew; i<pTab->nCol; i++, k++){",
          "673:       sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "674:     }else if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "675:       k--;",
          "679:         sqlite3ExprCode(pParse, pChanges->a[j].pExpr, k);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "671:         testcase( i==31 );",
          "672:         testcase( i==32 );",
          "674:       }else{",
          "676:       }",
          "677:     }",
          "678:   }",
          "",
          "[Removed Lines]",
          "673:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "675:         sqlite3VdbeAddOp2(v, OP_Null, 0, regNew+i);",
          "",
          "[Added Lines]",
          "688:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "690:         sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "714:       }",
          "715:     }",
          "716:   }",
          "",
          "[Removed Lines]",
          "711:     for(i=0; i<pTab->nCol; i++){",
          "712:       if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "713:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "",
          "[Added Lines]",
          "726:     for(i=0, k=regNew; i<pTab->nCol; i++, k++){",
          "727:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "728:         k--;",
          "729:       }else if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "730:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "",
          "---------------"
        ]
      }
    }
  ]
}