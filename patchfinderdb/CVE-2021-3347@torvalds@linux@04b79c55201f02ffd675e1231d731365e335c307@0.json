{
  "cve_id": "CVE-2021-3347",
  "cve_desc": "An issue was discovered in the Linux kernel through 5.10.11. PI futexes have a kernel stack use-after-free during fault handling, allowing local users to execute code in the kernel, aka CID-34b1a1ce1458.",
  "repo": "torvalds/linux",
  "patch_hash": "04b79c55201f02ffd675e1231d731365e335c307",
  "patch_info": {
    "commit_hash": "04b79c55201f02ffd675e1231d731365e335c307",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/04b79c55201f02ffd675e1231d731365e335c307",
    "files": [
      "kernel/futex.c"
    ],
    "message": "futex: Replace pointless printk in fixup_owner()\n\nIf that unexpected case of inconsistent arguments ever happens then the\nfutex state is left completely inconsistent and the printk is not really\nhelpful. Replace it with a warning and make the state consistent.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: stable@vger.kernel.org",
    "before_after_code_files": [
      "kernel/futex.c||kernel/futex.c"
    ]
  },
  "patch_diff": {
    "kernel/futex.c||kernel/futex.c": [
      "File: kernel/futex.c -> kernel/futex.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2562:  return 0;",
      "2563: }",
      "",
      "[Removed Lines]",
      "2555:  if (rt_mutex_owner(&q->pi_state->pi_mutex) == current) {",
      "2556:   printk(KERN_ERR \"fixup_owner: ret = %d pi-mutex: %p \"",
      "2557:     \"pi-state %p\\n\", ret,",
      "2558:     q->pi_state->pi_mutex.owner,",
      "2559:     q->pi_state->owner);",
      "2560:  }",
      "",
      "[Added Lines]",
      "2555:  if (WARN_ON_ONCE(rt_mutex_owner(&q->pi_state->pi_mutex) == current))",
      "2556:   return fixup_pi_state_owner(uaddr, q, current);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d7c5ed73b19c4640426d9c106f70ec2cb532034d",
      "candidate_info": {
        "commit_hash": "d7c5ed73b19c4640426d9c106f70ec2cb532034d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d7c5ed73b19c4640426d9c106f70ec2cb532034d",
        "files": [
          "kernel/futex.c"
        ],
        "message": "futex: Remove needless goto's\n\nAs stated in the coding style documentation, \"if there is no cleanup\nneeded then just return directly\", instead of jumping to a label and\nthen returning.\n\nRemove such goto's and replace with a return statement.  When there's a\nternary operator on the return value, replace it with the result of the\noperation when it is logically possible to determine it by the control\nflow.\n\nSigned-off-by: Andr\u00e9 Almeida <andrealmeid@collabora.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nLink: https://lkml.kernel.org/r/20200702202843.520764-3-andrealmeid@collabora.com",
        "before_after_code_files": [
          "kernel/futex.c||kernel/futex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/futex.c||kernel/futex.c"
          ],
          "candidate": [
            "kernel/futex.c||kernel/futex.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/futex.c||kernel/futex.c": [
          "File: kernel/futex.c -> kernel/futex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1608:  ret = get_futex_key(uaddr, flags & FLAGS_SHARED, &key, FUTEX_READ);",
          "1609:  if (unlikely(ret != 0))",
          "1612:  hb = hash_futex(&key);",
          "1615:  if (!hb_waiters_pending(hb))",
          "1618:  spin_lock(&hb->lock);",
          "",
          "[Removed Lines]",
          "1610:   goto out;",
          "1616:   goto out;",
          "",
          "[Added Lines]",
          "1610:   return ret;",
          "1616:   return ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1637:  spin_unlock(&hb->lock);",
          "1638:  wake_up_q(&wake_q);",
          "1640:  return ret;",
          "1641: }",
          "",
          "[Removed Lines]",
          "1639: out:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1703: retry:",
          "1704:  ret = get_futex_key(uaddr1, flags & FLAGS_SHARED, &key1, FUTEX_READ);",
          "1705:  if (unlikely(ret != 0))",
          "1707:  ret = get_futex_key(uaddr2, flags & FLAGS_SHARED, &key2, FUTEX_WRITE);",
          "1708:  if (unlikely(ret != 0))",
          "1711:  hb1 = hash_futex(&key1);",
          "1712:  hb2 = hash_futex(&key2);",
          "",
          "[Removed Lines]",
          "1706:   goto out;",
          "1709:   goto out;",
          "",
          "[Added Lines]",
          "1705:   return ret;",
          "1708:   return ret;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1726:    ret = op_ret;",
          "1728:   }",
          "1730:   if (op_ret == -EFAULT) {",
          "1731:    ret = fault_in_user_writeable(uaddr2);",
          "1732:    if (ret)",
          "1734:   }",
          "1736:   if (!(flags & FLAGS_SHARED)) {",
          "",
          "[Removed Lines]",
          "1727:    goto out;",
          "1733:     goto out;",
          "",
          "[Added Lines]",
          "1726:    return ret;",
          "1732:     return ret;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1773: out_unlock:",
          "1774:  double_unlock_hb(hb1, hb2);",
          "1775:  wake_up_q(&wake_q);",
          "1777:  return ret;",
          "1778: }",
          "",
          "[Removed Lines]",
          "1776: out:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1980: retry:",
          "1981:  ret = get_futex_key(uaddr1, flags & FLAGS_SHARED, &key1, FUTEX_READ);",
          "1982:  if (unlikely(ret != 0))",
          "1984:  ret = get_futex_key(uaddr2, flags & FLAGS_SHARED, &key2,",
          "1985:        requeue_pi ? FUTEX_WRITE : FUTEX_READ);",
          "1986:  if (unlikely(ret != 0))",
          "1998:  hb1 = hash_futex(&key1);",
          "1999:  hb2 = hash_futex(&key2);",
          "",
          "[Removed Lines]",
          "1983:   goto out;",
          "1987:   goto out;",
          "1993:  if (requeue_pi && match_futex(&key1, &key2)) {",
          "1994:   ret = -EINVAL;",
          "1995:   goto out;",
          "1996:  }",
          "",
          "[Added Lines]",
          "1981:   return ret;",
          "1985:   return ret;",
          "1991:  if (requeue_pi && match_futex(&key1, &key2))",
          "1992:   return -EINVAL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2014:    ret = get_user(curval, uaddr1);",
          "2015:    if (ret)",
          "2018:    if (!(flags & FLAGS_SHARED))",
          "2019:     goto retry_private;",
          "",
          "[Removed Lines]",
          "2016:     goto out;",
          "",
          "[Added Lines]",
          "2012:     return ret;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2079:    ret = fault_in_user_writeable(uaddr2);",
          "2080:    if (!ret)",
          "2081:     goto retry;",
          "2083:   case -EBUSY:",
          "2084:   case -EAGAIN:",
          "",
          "[Removed Lines]",
          "2082:    goto out;",
          "",
          "[Added Lines]",
          "2078:    return ret;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2198:  double_unlock_hb(hb1, hb2);",
          "2199:  wake_up_q(&wake_q);",
          "2200:  hb_waiters_dec(hb2);",
          "2203:  return ret ? ret : task_count;",
          "2204: }",
          "",
          "[Removed Lines]",
          "2202: out:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2546:   if (q->pi_state->owner != current)",
          "2547:    ret = fixup_pi_state_owner(uaddr, q, current);",
          "2549:  }",
          "",
          "[Removed Lines]",
          "2548:   goto out;",
          "",
          "[Added Lines]",
          "2542:   return ret ? ret : locked;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2559:  if (q->pi_state->owner == current) {",
          "2560:   ret = fixup_pi_state_owner(uaddr, q, NULL);",
          "2562:  }",
          "",
          "[Removed Lines]",
          "2561:   goto out;",
          "",
          "[Added Lines]",
          "2555:   return ret;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2572:     q->pi_state->owner);",
          "2573:  }",
          "2577: }",
          "",
          "[Removed Lines]",
          "2575: out:",
          "2576:  return ret ? ret : locked;",
          "",
          "[Added Lines]",
          "2569:  return ret;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2671:   ret = get_user(uval, uaddr);",
          "2672:   if (ret)",
          "2675:   if (!(flags & FLAGS_SHARED))",
          "2676:    goto retry_private;",
          "",
          "[Removed Lines]",
          "2673:    goto out;",
          "",
          "[Added Lines]",
          "2666:    return ret;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2683:   ret = -EWOULDBLOCK;",
          "2684:  }",
          "2687:  return ret;",
          "2688: }",
          "",
          "[Removed Lines]",
          "2686: out:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12bb3f7f1b03d5913b3f9d4236a488aa7774dfe9",
      "candidate_info": {
        "commit_hash": "12bb3f7f1b03d5913b3f9d4236a488aa7774dfe9",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/12bb3f7f1b03d5913b3f9d4236a488aa7774dfe9",
        "files": [
          "kernel/futex.c"
        ],
        "message": "futex: Ensure the correct return value from futex_lock_pi()\n\nIn case that futex_lock_pi() was aborted by a signal or a timeout and the\ntask returned without acquiring the rtmutex, but is the designated owner of\nthe futex due to a concurrent futex_unlock_pi() fixup_owner() is invoked to\nestablish consistent state. In that case it invokes fixup_pi_state_owner()\nwhich in turn tries to acquire the rtmutex again. If that succeeds then it\ndoes not propagate this success to fixup_owner() and futex_lock_pi()\nreturns -EINTR or -ETIMEOUT despite having the futex locked.\n\nReturn success from fixup_pi_state_owner() in all cases where the current\ntask owns the rtmutex and therefore the futex and propagate it correctly\nthrough fixup_owner(). Fixup the other callsite which does not expect a\npositive return value.\n\nFixes: c1e2f0eaf015 (\"futex: Avoid violating the 10th rule of futex\")\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: stable@vger.kernel.org",
        "before_after_code_files": [
          "kernel/futex.c||kernel/futex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/futex.c||kernel/futex.c"
          ],
          "candidate": [
            "kernel/futex.c||kernel/futex.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/futex.c||kernel/futex.c": [
          "File: kernel/futex.c -> kernel/futex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2373:   }",
          "2375:   if (__rt_mutex_futex_trylock(&pi_state->pi_mutex)) {",
          "2378:    goto out_unlock;",
          "2379:   }",
          "",
          "[Removed Lines]",
          "2377:    ret = 0;",
          "",
          "[Added Lines]",
          "2377:    ret = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2406:    goto out_unlock;",
          "2407:   }",
          "2408:   newowner = argowner;",
          "",
          "[Removed Lines]",
          "2405:    ret = 0;",
          "",
          "[Added Lines]",
          "2405:    ret = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2448:  raw_spin_unlock(&newowner->pi_lock);",
          "2449:  raw_spin_unlock_irq(&pi_state->pi_mutex.wait_lock);",
          "",
          "[Removed Lines]",
          "2451:  return 0;",
          "",
          "[Added Lines]",
          "2451:  return argowner == current;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2492:  if (pi_state->owner != oldowner) {",
          "2494:   goto out_unlock;",
          "2495:  }",
          "",
          "[Removed Lines]",
          "2493:   ret = 0;",
          "",
          "[Added Lines]",
          "2493:   ret = argowner == current;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2524: static int fixup_owner(u32 __user *uaddr, struct futex_q *q, int locked)",
          "2525: {",
          "2528:  if (locked) {",
          "",
          "[Removed Lines]",
          "2526:  int ret = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2537:   if (q->pi_state->owner != current)",
          "2540:  }",
          "",
          "[Removed Lines]",
          "2538:    ret = fixup_pi_state_owner(uaddr, q, current);",
          "2539:   return ret ? ret : locked;",
          "",
          "[Added Lines]",
          "2536:    return fixup_pi_state_owner(uaddr, q, current);",
          "2537:   return 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2550:  if (q->pi_state->owner == current) {",
          "2551:   ret = fixup_pi_state_owner(uaddr, q, NULL);",
          "2552:   return ret;",
          "2553:  }",
          "",
          "[Added Lines]",
          "2548:  if (q->pi_state->owner == current)",
          "2549:   return fixup_pi_state_owner(uaddr, q, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2563:     q->pi_state->owner);",
          "2564:  }",
          "2567: }",
          "",
          "[Removed Lines]",
          "2566:  return ret;",
          "",
          "[Added Lines]",
          "2562:  return 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3261:   if (q.pi_state && (q.pi_state->owner != current)) {",
          "3262:    spin_lock(q.lock_ptr);",
          "3263:    ret = fixup_pi_state_owner(uaddr2, &q, current);",
          "3265:     pi_state = q.pi_state;",
          "3266:     get_pi_state(pi_state);",
          "3267:    }",
          "",
          "[Removed Lines]",
          "3264:    if (ret && rt_mutex_owner(&q.pi_state->pi_mutex) == current) {",
          "",
          "[Added Lines]",
          "3260:    if (ret < 0 && rt_mutex_owner(&q.pi_state->pi_mutex) == current) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3272:    put_pi_state(q.pi_state);",
          "3273:    spin_unlock(q.lock_ptr);",
          "3274:   }",
          "3275:  } else {",
          "3276:   struct rt_mutex *pi_mutex;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3274:    ret = ret < 0 ? ret : 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}