{
  "cve_id": "CVE-2017-1000391",
  "cve_desc": "Jenkins versions 2.88 and earlier and 2.73.2 and earlier stores metadata related to 'people', which encompasses actual user accounts, as well as users appearing in SCM, in directories corresponding to the user ID on disk. These directories used the user ID for their name without additional escaping, potentially resulting in problems like overwriting of unrelated configuration files.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "566a8ddb885f0bef9bc848e60455c0aabbf0c1d3",
  "patch_info": {
    "commit_hash": "566a8ddb885f0bef9bc848e60455c0aabbf0c1d3",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/566a8ddb885f0bef9bc848e60455c0aabbf0c1d3",
    "files": [
      "core/pom.xml",
      "core/src/main/java/hudson/model/User.java",
      "core/src/main/java/jenkins/model/IdStrategy.java",
      "core/src/test/java/jenkins/model/IdStrategyTest.java",
      "test/src/test/java/hudson/model/UserTest.java",
      "test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/config.xml",
      "test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/users/admin/config.xml",
      "test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/users/config.xml",
      "test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/config.xml",
      "test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/admin/config.xml",
      "test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/config.xml",
      "test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/bar/baz/config.xml",
      "test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/bar/config.xml",
      "test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/baz/config.xml",
      "test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/config.xml"
    ],
    "message": "[SECURITY-499] Sanitize user id <-> filename conversion",
    "before_after_code_files": [
      "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java",
      "core/src/main/java/jenkins/model/IdStrategy.java||core/src/main/java/jenkins/model/IdStrategy.java",
      "core/src/test/java/jenkins/model/IdStrategyTest.java||core/src/test/java/jenkins/model/IdStrategyTest.java",
      "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java": [
      "File: core/src/main/java/hudson/model/User.java -> core/src/main/java/hudson/model/User.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "48: import java.io.File;",
      "49: import java.io.FileFilter;",
      "50: import java.io.IOException;",
      "51: import java.util.ArrayList;",
      "52: import java.util.Arrays;",
      "53: import java.util.Collection;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51: import java.nio.file.DirectoryStream;",
      "52: import java.nio.file.Files;",
      "53: import java.nio.file.InvalidPathException;",
      "54: import java.nio.file.Path;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "464:                 }",
      "465:             }",
      "466:         }",
      "467:         if (u==null && (create || configFile.exists())) {",
      "468:             User tmp = new User(id, fullName);",
      "469:             User prev;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "472:         File unsanitizedLegacyConfigFile = getUnsanitizedLegacyConfigFileFor(id);",
      "473:         if (unsanitizedLegacyConfigFile.exists() && !unsanitizedLegacyConfigFile.equals(configFile)) {",
      "474:             File ancestor = unsanitizedLegacyConfigFile.getParentFile();",
      "475:             if (!configFile.exists()) {",
      "476:                 try {",
      "477:                     Files.createDirectory(configFile.getParentFile().toPath());",
      "478:                     Files.move(unsanitizedLegacyConfigFile.toPath(), configFile.toPath());",
      "479:                 } catch (IOException | InvalidPathException e) {",
      "480:                     LOGGER.log(",
      "481:                             Level.WARNING,",
      "482:                             String.format(\"Failed to migrate user record from %s to %s, see SECURITY-499 for more information\", idStrategy().legacyFilenameOf(id), idStrategy().filenameOf(id)),",
      "483:                             e);",
      "484:                 }",
      "485:             }",
      "489:             File tmp = ancestor;",
      "490:             try {",
      "491:                 while (!ancestor.equals(getRootDir())) {",
      "492:                     try (DirectoryStream<Path> stream = Files.newDirectoryStream(ancestor.toPath())) {",
      "493:                         if (!stream.iterator().hasNext()) {",
      "494:                             tmp = ancestor;",
      "495:                             ancestor = tmp.getParentFile();",
      "496:                             Files.deleteIfExists(tmp.toPath());",
      "497:                         } else {",
      "498:                             break;",
      "499:                         }",
      "500:                     }",
      "501:                 }",
      "502:             } catch (IOException | InvalidPathException e) {",
      "503:                 if (LOGGER.isLoggable(Level.FINE)) {",
      "504:                     LOGGER.log(Level.FINE, \"Could not delete \" + tmp + \" when cleaning up legacy user directories\", e);",
      "505:                 }",
      "506:             }",
      "507:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "704:         });",
      "705:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "749:     private static File getUnsanitizedLegacyConfigFileFor(String id) {",
      "750:         return new File(getRootDir(), idStrategy().legacyFilenameOf(id) + \"/config.xml\");",
      "751:     }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/model/IdStrategy.java||core/src/main/java/jenkins/model/IdStrategy.java": [
      "File: core/src/main/java/jenkins/model/IdStrategy.java -> core/src/main/java/jenkins/model/IdStrategy.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: import hudson.util.CaseInsensitiveComparator;",
      "31: import org.apache.commons.lang.StringUtils;",
      "32: import org.jenkinsci.Symbol;",
      "33: import org.kohsuke.stapler.DataBoundConstructor;",
      "35: import javax.annotation.Nonnull;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: import org.kohsuke.accmod.Restricted;",
      "34: import org.kohsuke.accmod.restrictions.ProtectedExternally;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "50:     public static IdStrategy CASE_INSENSITIVE = new CaseInsensitive();",
      "58:     @Nonnull",
      "59:     public abstract String filenameOf(@Nonnull String id);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72:     @Nonnull",
      "73:     @Restricted(ProtectedExternally.class)",
      "74:     public String legacyFilenameOf(@Nonnull String id) {",
      "75:         return filenameOf(id);",
      "76:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "156:         @Override",
      "157:         @Nonnull",
      "158:         public String filenameOf(@Nonnull String id) {",
      "159:             return id.toLowerCase(Locale.ENGLISH);",
      "160:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "177:             if (id.isEmpty() || id.matches(\"[a-zA-Z0-9_. @-]+\")) {",
      "178:                 id = id.toLowerCase(Locale.ENGLISH);",
      "179:                 switch (id) {",
      "180:                     case \"\":",
      "181:                     case \".\":",
      "182:                         return \"$002f\";",
      "183:                     case \"..\":",
      "184:                         return \"$002e$002e\";",
      "185:                     case \"con\":",
      "186:                         return \"$0063on\";",
      "187:                     case \"prn\":",
      "188:                         return \"$0070rn\";",
      "189:                     case \"aux\":",
      "190:                         return \"$0061ux\";",
      "191:                     case \"nul\":",
      "192:                         return \"$006eul\";",
      "193:                     case \"com1\":",
      "194:                         return \"$0063om1\";",
      "195:                     case \"com2\":",
      "196:                         return \"$0063om2\";",
      "197:                     case \"com3\":",
      "198:                         return \"$0063om3\";",
      "199:                     case \"com4\":",
      "200:                         return \"$0063om4\";",
      "201:                     case \"com5\":",
      "202:                         return \"$0063om5\";",
      "203:                     case \"com6\":",
      "204:                         return \"$0063om6\";",
      "205:                     case \"com7\":",
      "206:                         return \"$0063om7\";",
      "207:                     case \"com8\":",
      "208:                         return \"$0063om8\";",
      "209:                     case \"com9\":",
      "210:                         return \"$0063om9\";",
      "211:                     case \"lpt1\":",
      "212:                         return \"$006cpt1\";",
      "213:                     case \"lpt2\":",
      "214:                         return \"$006cpt2\";",
      "215:                     case \"lpt3\":",
      "216:                         return \"$006cpt3\";",
      "217:                     case \"lpt4\":",
      "218:                         return \"$006cpt4\";",
      "219:                     case \"lpt5\":",
      "220:                         return \"$006cpt5\";",
      "221:                     case \"lpt6\":",
      "222:                         return \"$006cpt6\";",
      "223:                     case \"lpt7\":",
      "224:                         return \"$006cpt7\";",
      "225:                     case \"lpt8\":",
      "226:                         return \"$006cpt8\";",
      "227:                     case \"lpt9\":",
      "228:                         return \"$006cpt9\";",
      "229:                     default:",
      "230:                         if (id.endsWith(\".\")) {",
      "231:                             return id.substring(0,id.length()-1)+\"$002e\";",
      "232:                         } else if (id.startsWith(\"-\")) {",
      "233:                             return \"$002d\" + id.substring(1);",
      "234:                         }",
      "235:                         return id;",
      "236:                 }",
      "237:             } else {",
      "238:                 StringBuilder buf = new StringBuilder(id.length() + 16);",
      "239:                 for (char c : id.toCharArray()) {",
      "240:                     if ('a' <= c && c <= 'z') {",
      "241:                         buf.append(c);",
      "242:                     } else if ('A' <= c && c <= 'Z') {",
      "243:                         buf.append(Character.toLowerCase(c));",
      "244:                     } else if ('0' <= c && c <= '9') {",
      "245:                         buf.append(c);",
      "246:                     } else if ('_' == c || '-' == c || ' ' == c || '@' == c || '.' == c) {",
      "247:                         buf.append(c);",
      "248:                     } else {",
      "249:                         buf.append('$');",
      "250:                         buf.append(StringUtils.leftPad(Integer.toHexString(c & 0xffff), 4, '0'));",
      "251:                     }",
      "252:                 }",
      "253:                 return buf.toString();",
      "254:             }",
      "255:         }",
      "257:         @Nonnull",
      "258:         @Override",
      "259:         public String legacyFilenameOf(@Nonnull String id) {",
      "263:         @Override",
      "264:         public String idFromFilename(@Nonnull String filename) {",
      "265:             if (filename.matches(\"[A-Za-z0-9_. @-]+\")) {",
      "266:                 return filename.toLowerCase(Locale.ENGLISH);",
      "267:             } else {",
      "268:                 StringBuilder buf = new StringBuilder(filename.length());",
      "269:                 final char[] chars = filename.toCharArray();",
      "270:                 for (int i = 0; i < chars.length; i++) {",
      "271:                     char c = chars[i];",
      "272:                     if ('a' <= c && c <= 'z') {",
      "273:                         buf.append(c);",
      "274:                     } else if ('A' <= c && c <= 'a') {",
      "275:                         buf.append(Character.toLowerCase(c));",
      "276:                     } else if ('0' <= c && c <= '9') {",
      "277:                         buf.append(c);",
      "278:                     } else if ('_' == c || '.' == c || '-' == c || ' ' == c || '@' == c) {",
      "279:                         buf.append(c);",
      "280:                     } else if (c == '$') {",
      "281:                         StringBuilder hex = new StringBuilder(4);",
      "282:                         i++;",
      "283:                         if (i < chars.length) {",
      "284:                             hex.append(chars[i]);",
      "285:                         } else {",
      "286:                             break;",
      "287:                         }",
      "288:                         i++;",
      "289:                         if (i < chars.length) {",
      "290:                             hex.append(chars[i]);",
      "291:                         } else {",
      "292:                             break;",
      "293:                         }",
      "294:                         i++;",
      "295:                         if (i < chars.length) {",
      "296:                             hex.append(chars[i]);",
      "297:                         } else {",
      "298:                             break;",
      "299:                         }",
      "300:                         i++;",
      "301:                         if (i < chars.length) {",
      "302:                             hex.append(chars[i]);",
      "303:                         } else {",
      "304:                             break;",
      "305:                         }",
      "306:                         buf.append(Character.valueOf((char)Integer.parseInt(hex.toString(), 16)));",
      "307:                     }",
      "308:                 }",
      "309:                 return buf.toString();",
      "310:             }",
      "311:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "203:         @Override",
      "204:         @Nonnull",
      "205:         public String filenameOf(@Nonnull String id) {",
      "207:                 return id;",
      "208:             } else {",
      "209:                 StringBuilder buf = new StringBuilder(id.length() + 16);",
      "",
      "[Removed Lines]",
      "206:             if (id.matches(\"[a-z0-9_. -]+\")) {",
      "",
      "[Added Lines]",
      "357:             if (id.isEmpty() || id.matches(\"[a-z0-9_. @-]+\")) {",
      "358:                 switch (id) {",
      "359:                     case \"\":",
      "360:                     case \".\":",
      "361:                         return \"$002f\";",
      "362:                     case \"..\":",
      "363:                         return \"$002e$002e\";",
      "364:                     case \"con\":",
      "365:                         return \"$0063on\";",
      "366:                     case \"prn\":",
      "367:                         return \"$0070rn\";",
      "368:                     case \"aux\":",
      "369:                         return \"$0061ux\";",
      "370:                     case \"nul\":",
      "371:                         return \"$006eul\";",
      "372:                     case \"com1\":",
      "373:                         return \"$0063om1\";",
      "374:                     case \"com2\":",
      "375:                         return \"$0063om2\";",
      "376:                     case \"com3\":",
      "377:                         return \"$0063om3\";",
      "378:                     case \"com4\":",
      "379:                         return \"$0063om4\";",
      "380:                     case \"com5\":",
      "381:                         return \"$0063om5\";",
      "382:                     case \"com6\":",
      "383:                         return \"$0063om6\";",
      "384:                     case \"com7\":",
      "385:                         return \"$0063om7\";",
      "386:                     case \"com8\":",
      "387:                         return \"$0063om8\";",
      "388:                     case \"com9\":",
      "389:                         return \"$0063om9\";",
      "390:                     case \"lpt1\":",
      "391:                         return \"$006cpt1\";",
      "392:                     case \"lpt2\":",
      "393:                         return \"$006cpt2\";",
      "394:                     case \"lpt3\":",
      "395:                         return \"$006cpt3\";",
      "396:                     case \"lpt4\":",
      "397:                         return \"$006cpt4\";",
      "398:                     case \"lpt5\":",
      "399:                         return \"$006cpt5\";",
      "400:                     case \"lpt6\":",
      "401:                         return \"$006cpt6\";",
      "402:                     case \"lpt7\":",
      "403:                         return \"$006cpt7\";",
      "404:                     case \"lpt8\":",
      "405:                         return \"$006cpt8\";",
      "406:                     case \"lpt9\":",
      "407:                         return \"$006cpt9\";",
      "408:                     default:",
      "409:                         if (id.endsWith(\".\")) {",
      "410:                             return id.substring(0,id.length()-1)+\"$002e\";",
      "411:                         } else if (id.startsWith(\"-\")) {",
      "412:                             return \"$002d\" + id.substring(1);",
      "413:                         }",
      "414:                         return id;",
      "415:                 }",
      "416:             } else {",
      "417:                 StringBuilder buf = new StringBuilder(id.length() + 16);",
      "418:                 for (char c : id.toCharArray()) {",
      "419:                     if ('a' <= c && c <= 'z') {",
      "420:                         buf.append(c);",
      "421:                     } else if ('0' <= c && c <= '9') {",
      "422:                         buf.append(c);",
      "423:                     } else if ('_' == c || '-' == c || ' ' == c || '@' == c || '.' == c) {",
      "424:                         buf.append(c);",
      "425:                     } else if ('A' <= c && c <= 'Z') {",
      "426:                         buf.append('~');",
      "427:                         buf.append(Character.toLowerCase(c));",
      "428:                     } else {",
      "429:                         buf.append('$');",
      "430:                         buf.append(StringUtils.leftPad(Integer.toHexString(c & 0xffff), 4, '0'));",
      "431:                     }",
      "432:                 }",
      "433:                 return buf.toString();",
      "434:             }",
      "435:         }",
      "440:         @Nonnull",
      "441:         @Override",
      "442:         public String legacyFilenameOf(@Nonnull String id) {",
      "443:             if (id.matches(\"[a-z0-9_. @-]+\")) {",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/model/IdStrategyTest.java||core/src/test/java/jenkins/model/IdStrategyTest.java": [
      "File: core/src/test/java/jenkins/model/IdStrategyTest.java -> core/src/test/java/jenkins/model/IdStrategyTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.model;",
      "3: import org.junit.Test;",
      "5: import java.util.Locale;",
      "7: import static org.junit.Assert.assertEquals;",
      "8: import static org.junit.Assert.assertThat;",
      "10: public class IdStrategyTest {",
      "11:     private IdStrategy idStrategy;",
      "13:     @Test",
      "14:     public void caseInsensitive() {",
      "15:         idStrategy = new IdStrategy.CaseInsensitive();",
      "16:         assertRestrictedNames();",
      "18:         assertRoundTrip(\"foo\", \"foo\");",
      "19:         assertRoundTrip(\"foo/bar\", \"foo$002fbar\");",
      "20:         assertRoundTrip(\"../test\", \"..$002ftest\");",
      "21:         assertRoundTrip(\"0123 _-@~a\", \"0123 _-@$007ea\");",
      "22:         assertRoundTrip(\"foo.\", \"foo$002e\");",
      "23:         assertRoundTrip(\"-foo\", \"$002dfoo\");",
      "26:         assertCaseInsensitiveRoundTrip(\"Foo\", \"foo\");",
      "27:         assertCaseInsensitiveRoundTrip(\"Foo/Bar\", \"foo$002fbar\");",
      "28:         assertCaseInsensitiveRoundTrip(\"../Test\", \"..$002ftest\");",
      "29:         assertCaseInsensitiveRoundTrip(\"NUL\", \"$006eul\");",
      "30:         assertEquals(\"foo\", idStrategy.idFromFilename(\"~foo\"));",
      "31:         assertEquals(\"0123 _-@a\", idStrategy.idFromFilename(\"0123 _-@~a\"));",
      "32:     }",
      "34:     @Test",
      "35:     public void caseSensitive() {",
      "36:         idStrategy = new IdStrategy.CaseSensitive();",
      "37:         assertRestrictedNames();",
      "39:         assertRoundTrip(\"foo\", \"foo\");",
      "40:         assertRoundTrip(\"Foo\", \"~foo\");",
      "41:         assertRoundTrip(\"foo/bar\", \"foo$002fbar\");",
      "42:         assertRoundTrip(\"Foo/Bar\", \"~foo$002f~bar\");",
      "43:         assertRoundTrip(\"../test\", \"..$002ftest\");",
      "44:         assertRoundTrip(\"../Test\", \"..$002f~test\");",
      "45:         assertRoundTrip(\"0123 _-@~a\", \"0123 _-@$007ea\");",
      "46:         assertRoundTrip(\"0123 _-@A\", \"0123 _-@~a\");",
      "47:         assertRoundTrip(\"foo.\", \"foo$002e\");",
      "48:         assertRoundTrip(\"-foo\", \"$002dfoo\");",
      "49:         assertRoundTrip(\"Con\", \"~con\");",
      "50:         assertRoundTrip(\"Prn\", \"~prn\");",
      "51:         assertRoundTrip(\"Aux\", \"~aux\");",
      "52:         assertRoundTrip(\"Nul\", \"~nul\");",
      "53:         assertRoundTrip(\"Com1\", \"~com1\");",
      "54:         assertRoundTrip(\"Lpt1\", \"~lpt1\");",
      "55:     }",
      "57:     private void assertRestrictedNames() {",
      "58:         assertEquals(\"$002f\", idStrategy.filenameOf(\".\"));",
      "60:         assertEquals(\"/\", idStrategy.idFromFilename(idStrategy.filenameOf(\".\")));",
      "62:         assertEquals(\"$002f\", idStrategy.filenameOf(\"\"));",
      "64:         assertEquals(\"/\", idStrategy.idFromFilename(idStrategy.filenameOf(\"\")));",
      "66:         assertRoundTrip(\"/\", \"$002f\");",
      "67:         assertRoundTrip(\"..\", \"$002e$002e\");",
      "68:         assertRoundTrip(\"con\", \"$0063on\");",
      "69:         assertRoundTrip(\"prn\", \"$0070rn\");",
      "70:         assertRoundTrip(\"aux\", \"$0061ux\");",
      "71:         assertRoundTrip(\"nul\", \"$006eul\");",
      "72:         assertRoundTrip(\"com1\", \"$0063om1\");",
      "73:         assertRoundTrip(\"com2\", \"$0063om2\");",
      "74:         assertRoundTrip(\"com3\", \"$0063om3\");",
      "75:         assertRoundTrip(\"com4\", \"$0063om4\");",
      "76:         assertRoundTrip(\"com5\", \"$0063om5\");",
      "77:         assertRoundTrip(\"com6\", \"$0063om6\");",
      "78:         assertRoundTrip(\"com7\", \"$0063om7\");",
      "79:         assertRoundTrip(\"com8\", \"$0063om8\");",
      "80:         assertRoundTrip(\"com9\", \"$0063om9\");",
      "81:         assertRoundTrip(\"lpt1\", \"$006cpt1\");",
      "82:         assertRoundTrip(\"lpt2\", \"$006cpt2\");",
      "83:         assertRoundTrip(\"lpt3\", \"$006cpt3\");",
      "84:         assertRoundTrip(\"lpt4\", \"$006cpt4\");",
      "85:         assertRoundTrip(\"lpt5\", \"$006cpt5\");",
      "86:         assertRoundTrip(\"lpt6\", \"$006cpt6\");",
      "87:         assertRoundTrip(\"lpt7\", \"$006cpt7\");",
      "88:         assertRoundTrip(\"lpt8\", \"$006cpt8\");",
      "89:         assertRoundTrip(\"lpt9\", \"$006cpt9\");",
      "90:     }",
      "92:     private void assertRoundTrip(String username, String filename) {",
      "93:         assertEquals(filename, idStrategy.filenameOf(username));",
      "94:         assertEquals(username, idStrategy.idFromFilename(filename));",
      "95:     }",
      "97:     private void assertCaseInsensitiveRoundTrip(String username, String filename) {",
      "98:         assertEquals(filename, idStrategy.filenameOf(username));",
      "99:         assertEquals(username.toLowerCase(Locale.ENGLISH), idStrategy.idFromFilename(filename));",
      "100:     }",
      "101: }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java": [
      "File: test/src/test/java/hudson/model/UserTest.java -> test/src/test/java/hudson/model/UserTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
      "30: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "32: import hudson.security.ACL;",
      "33: import hudson.security.ACLContext;",
      "34: import hudson.security.AbstractPasswordBasedSecurityRealm;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: import hudson.Functions;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59: import org.acegisecurity.userdetails.UserDetails;",
      "60: import org.acegisecurity.userdetails.UsernameNotFoundException;",
      "62: import static org.hamcrest.Matchers.not;",
      "63: import static org.hamcrest.collection.IsEmptyCollection.empty;",
      "64: import static org.junit.Assert.*;",
      "65: import static org.junit.Assume.*;",
      "67: import org.hamcrest.collection.IsEmptyCollection;",
      "68: import org.junit.Assert;",
      "69: import org.junit.Rule;",
      "70: import org.junit.Test;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63: import static org.hamcrest.Matchers.equalTo;",
      "66: import static org.hamcrest.core.StringEndsWith.endsWith;",
      "70: import org.apache.commons.lang.StringUtils;",
      "72: import org.hamcrest.core.IsEqual;",
      "73: import org.hamcrest.core.StringEndsWith;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "714:         }",
      "715:     }",
      "717:      public static class SomeUserProperty extends UserProperty {",
      "719:         @TestExtension",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "723:     @Test",
      "724:     @Issue(\"SECURITY-499\")",
      "725:     public void createdUsersHaveCorrectConfigLocation() {",
      "726:         assertCorrectConfig(User.getById(\"admin\", true), \"users/admin/config.xml\");",
      "727:         assertCorrectConfig(User.getById(\"foo\", true), \"users/foo/config.xml\");",
      "728:         assertCorrectConfig(User.getById(\"foo/bar\", true), \"users/foo$002fbar/config.xml\");",
      "729:         assertCorrectConfig(User.getById(\"foo/bar/baz\", true), \"users/foo$002fbar$002fbaz/config.xml\");",
      "730:         assertCorrectConfig(User.getById(\"/\", true), \"users/$002f/config.xml\");",
      "731:         assertCorrectConfig(User.getById(\".\", true), \"users/$002f/config.xml\");",
      "732:         assertCorrectConfig(User.getById(\"..\", true), \"users/$002e$002e/config.xml\");",
      "733:         assertCorrectConfig(User.getById(\"../config.xml\", true), \"users/..$002fconfig.xml/config.xml\");",
      "734:     }",
      "736:     @Test",
      "737:     @Issue(\"SECURITY-499\")",
      "738:     @LocalData",
      "739:     public void legacyUserConfigDirsMigrated() {",
      "740:         File rootDir = new File(Jenkins.getInstance().getRootDir(), \"users\");",
      "742:         User admin = User.getById(\"admin\", false);",
      "743:         assertCorrectConfig(admin, \"users/admin/config.xml\");",
      "744:         assertTrue(admin.getConfigFile().getFile().exists());",
      "745:         assertThat(admin.getFullName(), equalTo(\"Admin\"));",
      "747:         User foo = User.getById(\"foo\", false);",
      "748:         File fooDir = new File(rootDir, \"foo\");",
      "749:         assertCorrectConfig(foo, \"users/foo/config.xml\");",
      "750:         assertTrue(foo.getConfigFile().getFile().exists());",
      "751:         assertTrue(fooDir.exists());",
      "752:         assertThat(foo.getFullName(), equalTo(\"Foo\"));",
      "754:         User fooBar = User.getById(\"foo/bar\", false);",
      "755:         File fooBarDir = new File(fooDir, \"bar\");",
      "756:         assertCorrectConfig(fooBar, \"users/foo$002fbar/config.xml\");",
      "757:         assertTrue(fooBar.getConfigFile().getFile().exists());",
      "758:         assertTrue(fooDir.exists());",
      "759:         assertTrue(fooBarDir.exists());",
      "760:         assertThat(fooBar.getFullName(), equalTo(\"Foo Bar\"));",
      "762:         User fooBaz = User.getById(\"foo/baz\", false);",
      "763:         File fooBazDir = new File(fooDir, \"baz\");",
      "764:         assertCorrectConfig(fooBaz, \"users/foo$002fbaz/config.xml\");",
      "765:         assertTrue(fooBaz.getConfigFile().getFile().exists());",
      "766:         assertTrue(fooDir.exists());",
      "767:         assertFalse(fooBazDir.exists());",
      "768:         assertThat(fooBaz.getFullName(), equalTo(\"Foo Baz\"));",
      "770:         User fooBarBaz = User.getById(\"foo/bar/baz\", false);",
      "771:         File fooBarBazDir = new File(fooBarDir, \"baz\");",
      "772:         assertCorrectConfig(fooBarBaz, \"users/foo$002fbar$002fbaz/config.xml\");",
      "773:         assertTrue(fooBarBaz.getConfigFile().getFile().exists());",
      "774:         assertTrue(fooDir.exists());",
      "775:         assertFalse(fooBarBazDir.exists());",
      "776:         assertFalse(fooBarDir.exists());",
      "777:         assertThat(fooBarBaz.getFullName(), equalTo(\"Foo Bar Baz\"));",
      "779:         User slash = User.getById(\"/\", false);",
      "780:         File slashDir = new File(rootDir, \"$002f\");",
      "781:         assertCorrectConfig(slash, \"users/$002f/config.xml\");",
      "782:         assertTrue(slash.getConfigFile().getFile().exists());",
      "783:         assertTrue(slashDir.exists());",
      "784:         assertFalse(new File(rootDir, \"config.xml\").exists());",
      "785:         assertThat(slash.getFullName(), equalTo(\"Slash\"));",
      "786:     }",
      "788:     @Test",
      "789:     @Issue(\"SECURITY-499\")",
      "790:     @LocalData",
      "791:     public void emptyUsernameConfigMigrated() {",
      "792:         File rootDir = new File(Jenkins.getInstance().getRootDir(), \"users\");",
      "794:         User admin = User.getById(\"admin\", false);",
      "795:         assertCorrectConfig(admin, \"users/admin/config.xml\");",
      "796:         assertTrue(admin.getConfigFile().getFile().exists());",
      "797:         assertThat(admin.getFullName(), equalTo(\"Admin\"));",
      "799:         User empty = User.getById(\"\", false);",
      "800:         File emptyDir = new File(rootDir, \"$002f\");",
      "801:         assertCorrectConfig(empty, \"users/$002f/config.xml\");",
      "802:         assertTrue(empty.getConfigFile().getFile().exists());",
      "803:         assertTrue(emptyDir.exists());",
      "804:         assertFalse(new File(rootDir, \"config.xml\").exists());",
      "805:         assertThat(empty.getFullName(), equalTo(\"Empty\"));",
      "806:     }",
      "808:     private static void assertCorrectConfig(User user, String unixPath) {",
      "809:         assertThat(user.getConfigFile().getFile().getPath(), endsWith(unixPath.replace('/', File.separatorChar)));",
      "810:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5f4d014b3b7f89e206c6c8509540ed559f604959",
      "candidate_info": {
        "commit_hash": "5f4d014b3b7f89e206c6c8509540ed559f604959",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/5f4d014b3b7f89e206c6c8509540ed559f604959",
        "files": [
          "core/src/main/java/hudson/model/User.java",
          "test/src/test/java/hudson/model/UserRestartTest_SEC897.java"
        ],
        "message": "[SECURITY-897]",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java",
          "test/src/test/java/hudson/model/UserRestartTest_SEC897.java||test/src/test/java/hudson/model/UserRestartTest_SEC897.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java": [
          "File: core/src/main/java/hudson/model/User.java -> core/src/main/java/hudson/model/User.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "472:         }",
          "474:         File unsanitizedLegacyConfigFile = getUnsanitizedLegacyConfigFileFor(id);",
          "476:             File ancestor = unsanitizedLegacyConfigFile.getParentFile();",
          "477:             if (!configFile.exists()) {",
          "478:                 try {",
          "",
          "[Removed Lines]",
          "475:         if (unsanitizedLegacyConfigFile.exists() && !unsanitizedLegacyConfigFile.equals(configFile)) {",
          "",
          "[Added Lines]",
          "475:         boolean mustMigrateLegacyConfig = isMigrationRequiredForLegacyConfigFile(unsanitizedLegacyConfigFile, configFile);",
          "476:         if (mustMigrateLegacyConfig) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "533:         }",
          "534:         return u;",
          "535:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538:     private static boolean isMigrationRequiredForLegacyConfigFile(@Nonnull File legacyConfigFile, @Nonnull File newConfigFile){",
          "539:         boolean mustMigrateLegacyConfig = legacyConfigFile.exists() && !legacyConfigFile.equals(newConfigFile);",
          "540:         if(mustMigrateLegacyConfig){",
          "541:             try{",
          "543:                 String canonicalLegacy = legacyConfigFile.getCanonicalPath();",
          "544:                 String canonicalUserDir = getRootDir().getCanonicalPath();",
          "545:                 if(!canonicalLegacy.startsWith(canonicalUserDir + File.separator)){",
          "547:                     mustMigrateLegacyConfig = false;",
          "548:                     LOGGER.log(Level.WARNING, String.format(",
          "549:                             \"Attempt to escape from users directory with %s, migration aborted, see SECURITY-897 for more information\",",
          "550:                             legacyConfigFile.getAbsolutePath()",
          "551:                     ));",
          "552:                 }",
          "553:             }",
          "554:             catch (IOException e){",
          "555:                 mustMigrateLegacyConfig = false;",
          "556:                 LOGGER.log(",
          "557:                         Level.WARNING,",
          "558:                         String.format(",
          "559:                                 \"Failed to determine the canonical path of %s, migration aborted, see SECURITY-897 for more information\",",
          "560:                                 legacyConfigFile.getAbsolutePath()",
          "561:                         ),",
          "562:                         e",
          "563:                 );",
          "564:             }",
          "565:         }",
          "566:         return mustMigrateLegacyConfig;",
          "567:     }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/UserRestartTest_SEC897.java||test/src/test/java/hudson/model/UserRestartTest_SEC897.java": [
          "File: test/src/test/java/hudson/model/UserRestartTest_SEC897.java -> test/src/test/java/hudson/model/UserRestartTest_SEC897.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package hudson.model;",
          "3: import com.gargoylesoftware.htmlunit.WebRequest;",
          "4: import hudson.FilePath;",
          "5: import org.junit.Rule;",
          "6: import org.junit.Test;",
          "7: import org.junit.runners.model.Statement;",
          "8: import org.jvnet.hudson.test.JenkinsRule;",
          "9: import org.jvnet.hudson.test.RestartableJenkinsRule;",
          "11: import java.net.URL;",
          "12: import java.nio.charset.StandardCharsets;",
          "13: import java.util.Base64;",
          "15: import static org.hamcrest.core.IsEqual.equalTo;",
          "16: import static org.junit.Assert.assertThat;",
          "19: public class UserRestartTest_SEC897 {",
          "21:     @Rule",
          "22:     public RestartableJenkinsRule rr = new RestartableJenkinsRule();",
          "24:     @Test public void legacyConfigMoveCannotEscapeUserFolder() {",
          "25:         rr.addStep(new Statement() {",
          "26:             @Override",
          "27:             public void evaluate() throws Throwable {",
          "28:                 rr.j.jenkins.setSecurityRealm(rr.j.createDummySecurityRealm());",
          "29:                 assertThat(rr.j.jenkins.isUseSecurity(), equalTo(true));",
          "32:                 User.getById(\"admin\", true).save();",
          "34:                 { // attempt with \"..\"",
          "35:                     JenkinsRule.WebClient wc = rr.j.createWebClient();",
          "36:                     wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "38:                     WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));",
          "39:                     request.setAdditionalHeader(\"Authorization\", base64(\"..\", \"any-password\"));",
          "40:                     wc.getPage(request);",
          "41:                 }",
          "42:                 { // attempt with \"../users/..\"",
          "43:                     JenkinsRule.WebClient wc = rr.j.createWebClient();",
          "44:                     wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "46:                     WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));",
          "47:                     request.setAdditionalHeader(\"Authorization\", base64(\"../users/..\", \"any-password\"));",
          "48:                     wc.getPage(request);",
          "49:                 }",
          "52:                 assertThat(rr.j.jenkins.isUseSecurity(), equalTo(true));",
          "54:                 FilePath rootPath = rr.j.jenkins.getRootPath();",
          "55:                 assertThat(rootPath.child(\"config.xml\").exists(), equalTo(true));",
          "56:             }",
          "57:         });",
          "58:         rr.addStep(new Statement() {",
          "59:             @Override",
          "60:             public void evaluate() throws Throwable {",
          "61:                 assertThat(rr.j.jenkins.isUseSecurity(), equalTo(true));",
          "62:                 FilePath rootPath = rr.j.jenkins.getRootPath();",
          "63:                 assertThat(rootPath.child(\"config.xml\").exists(), equalTo(true));",
          "64:             }",
          "65:         });",
          "66:     }",
          "68:     private String base64(String login, String password) {",
          "69:         return \"Basic \" + Base64.getEncoder().encodeToString((login + \":\" + password).getBytes(StandardCharsets.UTF_8));",
          "70:     }",
          "71: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6751222ba176b1aba396ea7dfffb977566b0d7b",
      "candidate_info": {
        "commit_hash": "b6751222ba176b1aba396ea7dfffb977566b0d7b",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/b6751222ba176b1aba396ea7dfffb977566b0d7b",
        "files": [
          "core/src/main/java/jenkins/model/IdStrategy.java",
          "core/src/test/java/jenkins/model/IdStrategyTest.java"
        ],
        "message": "[JENKINS-47909] Handle false hex escapes.",
        "before_after_code_files": [
          "core/src/main/java/jenkins/model/IdStrategy.java||core/src/main/java/jenkins/model/IdStrategy.java",
          "core/src/test/java/jenkins/model/IdStrategyTest.java||core/src/test/java/jenkins/model/IdStrategyTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/model/IdStrategy.java||core/src/main/java/jenkins/model/IdStrategy.java",
            "core/src/test/java/jenkins/model/IdStrategyTest.java||core/src/test/java/jenkins/model/IdStrategyTest.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/model/IdStrategy.java||core/src/main/java/jenkins/model/IdStrategy.java",
            "core/src/test/java/jenkins/model/IdStrategyTest.java||core/src/test/java/jenkins/model/IdStrategyTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/model/IdStrategy.java||core/src/main/java/jenkins/model/IdStrategy.java": [
          "File: core/src/main/java/jenkins/model/IdStrategy.java -> core/src/main/java/jenkins/model/IdStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:                         } else {",
          "304:                             break;",
          "305:                         }",
          "307:                     }",
          "308:                 }",
          "309:                 return buf.toString();",
          "",
          "[Removed Lines]",
          "306:                         buf.append(Character.valueOf((char)Integer.parseInt(hex.toString(), 16)));",
          "",
          "[Added Lines]",
          "306:                         try {",
          "307:                             buf.append(Character.valueOf((char)Integer.parseInt(hex.toString(), 16)));",
          "308:                         } catch (NumberFormatException x) {",
          "309:                             buf.append('$').append(hex);",
          "310:                         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "509:                         } else {",
          "510:                             break;",
          "511:                         }",
          "513:                     }",
          "514:                 }",
          "515:                 return buf.toString();",
          "",
          "[Removed Lines]",
          "512:                         buf.append(Character.valueOf((char)Integer.parseInt(hex.toString(), 16)));",
          "",
          "[Added Lines]",
          "516:                         try {",
          "517:                             buf.append(Character.valueOf((char)Integer.parseInt(hex.toString(), 16)));",
          "518:                         } catch (NumberFormatException x) {",
          "519:                             buf.append('$').append(hex);",
          "520:                         }",
          "",
          "---------------"
        ],
        "core/src/test/java/jenkins/model/IdStrategyTest.java||core/src/test/java/jenkins/model/IdStrategyTest.java": [
          "File: core/src/test/java/jenkins/model/IdStrategyTest.java -> core/src/test/java/jenkins/model/IdStrategyTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:         assertCaseInsensitiveRoundTrip(\"NUL\", \"$006eul\");",
          "30:         assertEquals(\"foo\", idStrategy.idFromFilename(\"~foo\"));",
          "31:         assertEquals(\"0123 _-@a\", idStrategy.idFromFilename(\"0123 _-@~a\"));",
          "32:     }",
          "34:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:         assertEquals(\"big$money\", idStrategy.idFromFilename(\"big$money\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8058675317d84b51a73e53a9167c6d1660b3314f",
      "candidate_info": {
        "commit_hash": "8058675317d84b51a73e53a9167c6d1660b3314f",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/8058675317d84b51a73e53a9167c6d1660b3314f",
        "files": [
          "core/src/main/java/hudson/model/User.java",
          "core/src/main/java/jenkins/model/IdStrategy.java",
          "core/src/test/java/jenkins/model/IdStrategyTest.java",
          "test/src/test/java/hudson/model/UserTest.java",
          "test/src/test/resources/hudson/model/UserTest/shellyUsernameMigrated.zip"
        ],
        "message": "Merge pull request #3134 from jglick/IdStrategy-NFE-JENKINS-47909\n\n[JENKINS-47909] Handle false hex escapes\n\n(cherry picked from commit 7c06a9ba946800151c5d9fc38793ac4bbd3fea5f)",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java",
          "core/src/main/java/jenkins/model/IdStrategy.java||core/src/main/java/jenkins/model/IdStrategy.java",
          "core/src/test/java/jenkins/model/IdStrategyTest.java||core/src/test/java/jenkins/model/IdStrategyTest.java",
          "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java",
            "core/src/main/java/jenkins/model/IdStrategy.java||core/src/main/java/jenkins/model/IdStrategy.java",
            "core/src/test/java/jenkins/model/IdStrategyTest.java||core/src/test/java/jenkins/model/IdStrategyTest.java",
            "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java",
            "core/src/main/java/jenkins/model/IdStrategy.java||core/src/main/java/jenkins/model/IdStrategy.java",
            "core/src/test/java/jenkins/model/IdStrategyTest.java||core/src/test/java/jenkins/model/IdStrategyTest.java",
            "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java": [
          "File: core/src/main/java/hudson/model/User.java -> core/src/main/java/hudson/model/User.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "453:                         if (o instanceof User) {",
          "454:                             if (idStrategy().equals(id, legacyUserDir.getName()) && !idStrategy().filenameOf(legacyUserDir.getName())",
          "455:                                     .equals(legacyUserDir.getName())) {",
          "457:                                     LOGGER.log(Level.WARNING, \"Failed to migrate user record from {0} to {1}\",",
          "458:                                             new Object[]{legacyUserDir, configFile.getParentFile()});",
          "459:                                 }",
          "",
          "[Removed Lines]",
          "456:                                 if (!legacyUserDir.renameTo(configFile.getParentFile())) {",
          "",
          "[Added Lines]",
          "456:                                 if (legacyUserDir.renameTo(configFile.getParentFile())) {",
          "457:                                     LOGGER.log(Level.INFO, \"Migrated user record from {0} to {1}\", new Object[] {legacyUserDir, configFile.getParentFile()});",
          "458:                                 } else {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "478:                 try {",
          "479:                     Files.createDirectory(configFile.getParentFile().toPath());",
          "480:                     Files.move(unsanitizedLegacyConfigFile.toPath(), configFile.toPath());",
          "481:                 } catch (IOException | InvalidPathException e) {",
          "482:                     LOGGER.log(",
          "483:                             Level.WARNING,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "483:                     LOGGER.log(Level.INFO, \"Migrated unsafe user record from {0} to {1}\", new Object[] {unsanitizedLegacyConfigFile, configFile});",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/model/IdStrategy.java||core/src/main/java/jenkins/model/IdStrategy.java": [
          "File: core/src/main/java/jenkins/model/IdStrategy.java -> core/src/main/java/jenkins/model/IdStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:                         } else {",
          "304:                             break;",
          "305:                         }",
          "307:                     }",
          "308:                 }",
          "309:                 return buf.toString();",
          "",
          "[Removed Lines]",
          "306:                         buf.append(Character.valueOf((char)Integer.parseInt(hex.toString(), 16)));",
          "",
          "[Added Lines]",
          "306:                         try {",
          "307:                             buf.append(Character.valueOf((char)Integer.parseInt(hex.toString(), 16)));",
          "308:                         } catch (NumberFormatException x) {",
          "309:                             buf.append('$').append(hex);",
          "310:                         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "509:                         } else {",
          "510:                             break;",
          "511:                         }",
          "513:                     }",
          "514:                 }",
          "515:                 return buf.toString();",
          "",
          "[Removed Lines]",
          "512:                         buf.append(Character.valueOf((char)Integer.parseInt(hex.toString(), 16)));",
          "",
          "[Added Lines]",
          "516:                         try {",
          "517:                             buf.append(Character.valueOf((char)Integer.parseInt(hex.toString(), 16)));",
          "518:                         } catch (NumberFormatException x) {",
          "519:                             buf.append('$').append(hex);",
          "520:                         }",
          "",
          "---------------"
        ],
        "core/src/test/java/jenkins/model/IdStrategyTest.java||core/src/test/java/jenkins/model/IdStrategyTest.java": [
          "File: core/src/test/java/jenkins/model/IdStrategyTest.java -> core/src/test/java/jenkins/model/IdStrategyTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:         assertCaseInsensitiveRoundTrip(\"NUL\", \"$006eul\");",
          "30:         assertEquals(\"foo\", idStrategy.idFromFilename(\"~foo\"));",
          "31:         assertEquals(\"0123 _-@a\", idStrategy.idFromFilename(\"0123 _-@~a\"));",
          "32:     }",
          "34:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:         assertEquals(\"big$money\", idStrategy.idFromFilename(\"big$money\"));",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java": [
          "File: test/src/test/java/hudson/model/UserTest.java -> test/src/test/java/hudson/model/UserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "813:         assertThat(empty.getFullName(), equalTo(\"Empty\"));",
          "814:     }",
          "816:     private static void assertCorrectConfig(User user, String unixPath) {",
          "817:         assertThat(user.getConfigFile().getFile().getPath(), endsWith(unixPath.replace('/', File.separatorChar)));",
          "818:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "816:     @Issue(\"JENKINS-47909\")",
          "817:     @LocalData",
          "818:     @Test",
          "819:     public void shellyUsernameMigrated() {",
          "820:         File rootDir = new File(Jenkins.getInstance().getRootDir(), \"users\");",
          "821:         User user = User.getById(\"bla$phem.us\", false);",
          "822:         assertCorrectConfig(user, \"users/bla$0024phem.us/config.xml\");",
          "823:         assertFalse(new File(rootDir, \"bla$phem.us\").exists());",
          "824:         assertTrue(user.getConfigFile().getFile().exists());",
          "825:         assertThat(user.getFullName(), equalTo(\"Weird Username\"));",
          "826:         user = User.getById(\"make\\u1000000\", false);",
          "827:         assertNotNull(\"we do not prevent accesses to the phony name, alas\", user);",
          "828:         user = User.getById(\"make$1000000\", false);",
          "829:         assertCorrectConfig(user, \"users/make$00241000000/config.xml\");",
          "830:         assertFalse(new File(rootDir, \"make$1000000\").exists());",
          "831:         assertTrue(\"but asking for the real name triggers migration\", user.getConfigFile().getFile().exists());",
          "832:         assertThat(user.getFullName(), equalTo(\"Greedy Fella\"));",
          "833:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3853b3813967bd3d46e4dde7741eb97fa628345c",
      "candidate_info": {
        "commit_hash": "3853b3813967bd3d46e4dde7741eb97fa628345c",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/3853b3813967bd3d46e4dde7741eb97fa628345c",
        "files": [
          "core/src/main/java/hudson/model/User.java"
        ],
        "message": "[JENKINS-47429] User.getLegacyConfigFilesFor no longer seems to be necessary.",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java": [
          "File: core/src/main/java/hudson/model/User.java -> core/src/main/java/hudson/model/User.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:     private static @Nullable User getOrCreate(@Nonnull String id, @Nonnull String fullName, boolean create) {",
          "435:         String idkey = idStrategy().keyFor(id);",
          "437:         byNameLock.readLock().lock();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:         return getOrCreate(id, fullName, create, getUnsanitizedLegacyConfigFileFor(id));",
          "436:     }",
          "438:     private static @Nullable User getOrCreate(@Nonnull String id, @Nonnull String fullName, boolean create, File unsanitizedLegacyConfigFile) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:             byNameLock.readLock().unlock();",
          "443:         }",
          "444:         final File configFile = getConfigFileFor(id);",
          "477:         if (unsanitizedLegacyConfigFile.exists() && !unsanitizedLegacyConfigFile.equals(configFile)) {",
          "478:             File ancestor = unsanitizedLegacyConfigFile.getParentFile();",
          "479:             if (!configFile.exists()) {",
          "480:                 try {",
          "481:                     Files.createDirectory(configFile.getParentFile().toPath());",
          "482:                     Files.move(unsanitizedLegacyConfigFile.toPath(), configFile.toPath());",
          "484:                 } catch (IOException | InvalidPathException e) {",
          "485:                     LOGGER.log(",
          "486:                             Level.WARNING,",
          "488:                             e);",
          "489:                 }",
          "490:             }",
          "",
          "[Removed Lines]",
          "445:         if (u == null && !configFile.isFile() && !configFile.getParentFile().isDirectory()) {",
          "447:             File[] legacy = getLegacyConfigFilesFor(id);",
          "448:             if (legacy != null && legacy.length > 0) {",
          "449:                 for (File legacyUserDir : legacy) {",
          "450:                     final XmlFile legacyXml = new XmlFile(XSTREAM, new File(legacyUserDir, \"config.xml\"));",
          "451:                     try {",
          "452:                         Object o = legacyXml.read();",
          "453:                         if (o instanceof User) {",
          "454:                             if (idStrategy().equals(id, legacyUserDir.getName()) && !idStrategy().filenameOf(legacyUserDir.getName())",
          "455:                                     .equals(legacyUserDir.getName())) {",
          "456:                                 if (legacyUserDir.renameTo(configFile.getParentFile())) {",
          "457:                                     LOGGER.log(Level.INFO, \"Migrated user record from {0} to {1}\", new Object[] {legacyUserDir, configFile.getParentFile()});",
          "458:                                 } else {",
          "459:                                     LOGGER.log(Level.WARNING, \"Failed to migrate user record from {0} to {1}\",",
          "460:                                             new Object[]{legacyUserDir, configFile.getParentFile()});",
          "461:                                 }",
          "462:                                 break;",
          "463:                             }",
          "464:                         } else {",
          "465:                             LOGGER.log(Level.FINE, \"Unexpected object loaded from {0}: {1}\",",
          "466:                                     new Object[]{ legacyUserDir, o });",
          "467:                         }",
          "468:                     } catch (IOException e) {",
          "469:                         LOGGER.log(Level.FINE, String.format(\"Exception trying to load user from %s: %s\",",
          "470:                                 new Object[]{ legacyUserDir, e.getMessage() }), e);",
          "471:                     }",
          "472:                 }",
          "473:             }",
          "474:         }",
          "476:         File unsanitizedLegacyConfigFile = getUnsanitizedLegacyConfigFileFor(id);",
          "483:                     LOGGER.log(Level.INFO, \"Migrated unsafe user record from {0} to {1}\", new Object[] {unsanitizedLegacyConfigFile, configFile});",
          "487:                             String.format(\"Failed to migrate user record from %s to %s, see SECURITY-499 for more information\", idStrategy().legacyFilenameOf(id), idStrategy().filenameOf(id)),",
          "",
          "[Added Lines]",
          "455:                     LOGGER.log(Level.INFO, \"Migrated user record from {0} to {1}\", new Object[] {unsanitizedLegacyConfigFile, configFile});",
          "459:                             String.format(\"Failed to migrate user record from %s to %s\", unsanitizedLegacyConfigFile, configFile),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "727:         return new File(getRootDir(), idStrategy().filenameOf(id) +\"/config.xml\");",
          "728:     }",
          "740:     private static File getUnsanitizedLegacyConfigFileFor(String id) {",
          "741:         return new File(getRootDir(), idStrategy().legacyFilenameOf(id) + \"/config.xml\");",
          "742:     }",
          "",
          "[Removed Lines]",
          "730:     private static final File[] getLegacyConfigFilesFor(final String id) {",
          "731:         return getRootDir().listFiles(new FileFilter() {",
          "732:             @Override",
          "733:             public boolean accept(File pathname) {",
          "734:                 return pathname.isDirectory() && new File(pathname, \"config.xml\").isFile() && idStrategy().equals(",
          "735:                         pathname.getName(), id);",
          "736:             }",
          "737:         });",
          "738:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1057:             File[] subdirs = getRootDir().listFiles((FileFilter) DirectoryFileFilter.INSTANCE);",
          "1058:             if (subdirs != null) {",
          "1059:                 for (File subdir : subdirs) {",
          "1061:                         String name = strategy.idFromFilename(subdir.getName());",
          "1063:                     }",
          "1064:                 }",
          "1065:             }",
          "",
          "[Removed Lines]",
          "1060:                     if (new File(subdir, \"config.xml\").exists()) {",
          "1062:                         getOrCreate(name, /* <init> calls load(), probably clobbering this anyway */name, true);",
          "",
          "[Added Lines]",
          "1022:                     File configFile = new File(subdir, \"config.xml\");",
          "1023:                     if (configFile.exists()) {",
          "1025:                         getOrCreate(name, /* <init> calls load(), probably clobbering this anyway */name, true, configFile);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b450e9bdb60f6b3a0d492219a026438bf7b3b9d6",
      "candidate_info": {
        "commit_hash": "b450e9bdb60f6b3a0d492219a026438bf7b3b9d6",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/b450e9bdb60f6b3a0d492219a026438bf7b3b9d6",
        "files": [
          "core/src/main/java/hudson/model/User.java"
        ],
        "message": "[JENKINS-47429] User.getLegacyConfigFilesFor no longer seems to be necessary.\n\n(cherry picked from commit 3853b3813967bd3d46e4dde7741eb97fa628345c)",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java": [
          "File: core/src/main/java/hudson/model/User.java -> core/src/main/java/hudson/model/User.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:     private static @Nullable User getOrCreate(@Nonnull String id, @Nonnull String fullName, boolean create) {",
          "435:         String idkey = idStrategy().keyFor(id);",
          "437:         byNameLock.readLock().lock();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:         return getOrCreate(id, fullName, create, getUnsanitizedLegacyConfigFileFor(id));",
          "436:     }",
          "438:     private static @Nullable User getOrCreate(@Nonnull String id, @Nonnull String fullName, boolean create, File unsanitizedLegacyConfigFile) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:             byNameLock.readLock().unlock();",
          "443:         }",
          "444:         final File configFile = getConfigFileFor(id);",
          "477:         if (unsanitizedLegacyConfigFile.exists() && !unsanitizedLegacyConfigFile.equals(configFile)) {",
          "478:             File ancestor = unsanitizedLegacyConfigFile.getParentFile();",
          "479:             if (!configFile.exists()) {",
          "480:                 try {",
          "481:                     Files.createDirectory(configFile.getParentFile().toPath());",
          "482:                     Files.move(unsanitizedLegacyConfigFile.toPath(), configFile.toPath());",
          "484:                 } catch (IOException | InvalidPathException e) {",
          "485:                     LOGGER.log(",
          "486:                             Level.WARNING,",
          "488:                             e);",
          "489:                 }",
          "490:             }",
          "",
          "[Removed Lines]",
          "445:         if (u == null && !configFile.isFile() && !configFile.getParentFile().isDirectory()) {",
          "447:             File[] legacy = getLegacyConfigFilesFor(id);",
          "448:             if (legacy != null && legacy.length > 0) {",
          "449:                 for (File legacyUserDir : legacy) {",
          "450:                     final XmlFile legacyXml = new XmlFile(XSTREAM, new File(legacyUserDir, \"config.xml\"));",
          "451:                     try {",
          "452:                         Object o = legacyXml.read();",
          "453:                         if (o instanceof User) {",
          "454:                             if (idStrategy().equals(id, legacyUserDir.getName()) && !idStrategy().filenameOf(legacyUserDir.getName())",
          "455:                                     .equals(legacyUserDir.getName())) {",
          "456:                                 if (legacyUserDir.renameTo(configFile.getParentFile())) {",
          "457:                                     LOGGER.log(Level.INFO, \"Migrated user record from {0} to {1}\", new Object[] {legacyUserDir, configFile.getParentFile()});",
          "458:                                 } else {",
          "459:                                     LOGGER.log(Level.WARNING, \"Failed to migrate user record from {0} to {1}\",",
          "460:                                             new Object[]{legacyUserDir, configFile.getParentFile()});",
          "461:                                 }",
          "462:                                 break;",
          "463:                             }",
          "464:                         } else {",
          "465:                             LOGGER.log(Level.FINE, \"Unexpected object loaded from {0}: {1}\",",
          "466:                                     new Object[]{ legacyUserDir, o });",
          "467:                         }",
          "468:                     } catch (IOException e) {",
          "469:                         LOGGER.log(Level.FINE, String.format(\"Exception trying to load user from %s: %s\",",
          "470:                                 new Object[]{ legacyUserDir, e.getMessage() }), e);",
          "471:                     }",
          "472:                 }",
          "473:             }",
          "474:         }",
          "476:         File unsanitizedLegacyConfigFile = getUnsanitizedLegacyConfigFileFor(id);",
          "483:                     LOGGER.log(Level.INFO, \"Migrated unsafe user record from {0} to {1}\", new Object[] {unsanitizedLegacyConfigFile, configFile});",
          "487:                             String.format(\"Failed to migrate user record from %s to %s, see SECURITY-499 for more information\", idStrategy().legacyFilenameOf(id), idStrategy().filenameOf(id)),",
          "",
          "[Added Lines]",
          "455:                     LOGGER.log(Level.INFO, \"Migrated user record from {0} to {1}\", new Object[] {unsanitizedLegacyConfigFile, configFile});",
          "459:                             String.format(\"Failed to migrate user record from %s to %s\", unsanitizedLegacyConfigFile, configFile),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "726:         return new File(getRootDir(), idStrategy().filenameOf(id) +\"/config.xml\");",
          "727:     }",
          "739:     private static File getUnsanitizedLegacyConfigFileFor(String id) {",
          "740:         return new File(getRootDir(), idStrategy().legacyFilenameOf(id) + \"/config.xml\");",
          "741:     }",
          "",
          "[Removed Lines]",
          "729:     private static final File[] getLegacyConfigFilesFor(final String id) {",
          "730:         return getRootDir().listFiles(new FileFilter() {",
          "731:             @Override",
          "732:             public boolean accept(File pathname) {",
          "733:                 return pathname.isDirectory() && new File(pathname, \"config.xml\").isFile() && idStrategy().equals(",
          "734:                         pathname.getName(), id);",
          "735:             }",
          "736:         });",
          "737:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1056:             File[] subdirs = getRootDir().listFiles((FileFilter) DirectoryFileFilter.INSTANCE);",
          "1057:             if (subdirs != null) {",
          "1058:                 for (File subdir : subdirs) {",
          "1060:                         String name = strategy.idFromFilename(subdir.getName());",
          "1062:                     }",
          "1063:                 }",
          "1064:             }",
          "",
          "[Removed Lines]",
          "1059:                     if (new File(subdir, \"config.xml\").exists()) {",
          "1061:                         getOrCreate(name, /* <init> calls load(), probably clobbering this anyway */name, true);",
          "",
          "[Added Lines]",
          "1021:                     File configFile = new File(subdir, \"config.xml\");",
          "1022:                     if (configFile.exists()) {",
          "1024:                         getOrCreate(name, /* <init> calls load(), probably clobbering this anyway */name, true, configFile);",
          "",
          "---------------"
        ]
      }
    }
  ]
}