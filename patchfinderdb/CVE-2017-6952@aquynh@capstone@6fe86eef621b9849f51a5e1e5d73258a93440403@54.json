{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7dc304f729a6e3987c82f5992a53457a9b0ec9dd",
      "candidate_info": {
        "commit_hash": "7dc304f729a6e3987c82f5992a53457a9b0ec9dd",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/7dc304f729a6e3987c82f5992a53457a9b0ec9dd",
        "files": [
          "bindings/python/capstone/m68k.py",
          "bindings/python/capstone/m68k_const.py"
        ],
        "message": "Fixed python bindings to align with struct changes",
        "before_after_code_files": [
          "bindings/python/capstone/m68k.py||bindings/python/capstone/m68k.py",
          "bindings/python/capstone/m68k_const.py||bindings/python/capstone/m68k_const.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/m68k.py||bindings/python/capstone/m68k.py": [
          "File: bindings/python/capstone/m68k.py -> bindings/python/capstone/m68k.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:         ('dimm', ctypes.c_double),",
          "26:         ('simm', ctypes.c_float),",
          "27:         ('reg', ctypes.c_uint),",
          "28:         ('mem', M68KOpMem),",
          "29:         ('register_bits', ctypes.c_uint),",
          "30:     )",
          "32: class M68KOp(ctypes.Structure):",
          "33:     _fields_ = (",
          "34:         ('value', M68KOpValue),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:         ('reg_pair', M68KOpRegPair),",
          "33: class M68KOpRegPair(ctypes.Structure):",
          "34:     _fields_ = (",
          "35:         ('reg_0', ctypes.c_uint),",
          "36:         ('reg_1', ctypes.c_uint),",
          "37:     )",
          "",
          "---------------"
        ],
        "bindings/python/capstone/m68k_const.py||bindings/python/capstone/m68k_const.py": [
          "File: bindings/python/capstone/m68k_const.py -> bindings/python/capstone/m68k_const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: M68K_OP_REG = 1",
          "81: M68K_OP_IMM = 2",
          "82: M68K_OP_MEM = 3",
          "87: M68K_CPU_SIZE_NONE = 0",
          "88: M68K_CPU_SIZE_BYTE = 1",
          "",
          "[Removed Lines]",
          "83: M68K_OP_FP = 4",
          "84: M68K_OP_REG_BITS = 5",
          "85: M68K_OP_REG_PAIR = 6",
          "",
          "[Added Lines]",
          "83: M68K_OP_FP_SINGLE = 4",
          "84: M68K_OP_FP_DOUBLE = 5",
          "85: M68K_OP_REG_BITS = 6",
          "86: M68K_OP_REG_PAIR = 7",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa07e1c7f3894f2d9299c3a52c67fcd941505e12",
      "candidate_info": {
        "commit_hash": "aa07e1c7f3894f2d9299c3a52c67fcd941505e12",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/aa07e1c7f3894f2d9299c3a52c67fcd941505e12",
        "files": [
          "bindings/python/setup.py",
          "bindings/python/setup_cython.py"
        ],
        "message": "Python: remove special case for cygwin build",
        "before_after_code_files": [
          "bindings/python/setup.py||bindings/python/setup.py",
          "bindings/python/setup_cython.py||bindings/python/setup_cython.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/setup.py||bindings/python/setup.py": [
          "File: bindings/python/setup.py -> bindings/python/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         # Do not build tests & static library",
          "100:         os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "101:         os.system(\"nmake\")",
          "108:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh\")",
          "110:     shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "",
          "[Removed Lines]",
          "102:     elif SYSTEM == \"cygwin\":",
          "103:         if IS_64BITS:",
          "104:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw64\")",
          "105:         else:",
          "106:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw32\")",
          "107:     else:   # Unix",
          "",
          "[Added Lines]",
          "102:     else:   # Unix incl. cygwin",
          "",
          "---------------"
        ],
        "bindings/python/setup_cython.py||bindings/python/setup_cython.py": [
          "File: bindings/python/setup_cython.py -> bindings/python/setup_cython.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:         # Do not build tests & static library",
          "91:         os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "92:         os.system(\"nmake\")",
          "100:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh\")",
          "102:     shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "",
          "[Removed Lines]",
          "93:     elif SYSTEM == \"cygwin\":",
          "94:         if IS_64BITS:",
          "95:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw64\")",
          "96:         else:",
          "97:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw32\")",
          "99:     else:   # Unix",
          "",
          "[Added Lines]",
          "93:     else:   # Unix incl. cygwin",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5441d5c0f5a31ba4b909701dc66d403c4d4cc51f",
      "candidate_info": {
        "commit_hash": "5441d5c0f5a31ba4b909701dc66d403c4d4cc51f",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/5441d5c0f5a31ba4b909701dc66d403c4d4cc51f",
        "files": [
          "arch/PowerPC/PPCInstPrinter.c"
        ],
        "message": "Do not truncate branch target address to 32 bit",
        "before_after_code_files": [
          "arch/PowerPC/PPCInstPrinter.c||arch/PowerPC/PPCInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/PowerPC/PPCInstPrinter.c||arch/PowerPC/PPCInstPrinter.c": [
          "File: arch/PowerPC/PPCInstPrinter.c -> arch/PowerPC/PPCInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "565: static void printAbsBranchOperand(MCInst *MI, unsigned OpNo, SStream *O)",
          "566: {",
          "569:  if (!MCOperand_isImm(MCInst_getOperand(MI, OpNo))) {",
          "570:   printOperand(MI, OpNo, O);",
          "571:   return;",
          "572:  }",
          "576:  if (!PPC_abs_branch(MI->csh, MCInst_getOpcode(MI))) {",
          "578:  }",
          "582:  if (MI->csh->detail) {",
          "583:   MI->flat_insn->detail->ppc.operands[MI->flat_insn->detail->ppc.op_count].type = PPC_OP_IMM;",
          "",
          "[Removed Lines]",
          "567:  int imm;",
          "574:  imm = ((int)MCOperand_getImm(MCInst_getOperand(MI, OpNo)) << 2);",
          "577:   imm = (int)MI->address + imm;",
          "580:  SStream_concat(O, \"0x%x\", imm);",
          "",
          "[Added Lines]",
          "567:  int64_t imm;",
          "574:  imm = MCOperand_getImm(MCInst_getOperand(MI, OpNo)) << 2;",
          "577:   imm = MI->address + imm;",
          "580:  SStream_concat(O, \"0x%\"PRIx64, imm);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75701e806a25714f762e2abc099fa5d55bf89295",
      "candidate_info": {
        "commit_hash": "75701e806a25714f762e2abc099fa5d55bf89295",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/75701e806a25714f762e2abc099fa5d55bf89295",
        "files": [
          "arch/X86/X86ATTInstPrinter.c",
          "arch/X86/X86IntelInstPrinter.c"
        ],
        "message": "x86: fix memory operand size of fnstenv/fldenv (issue #613)",
        "before_after_code_files": [
          "arch/X86/X86ATTInstPrinter.c||arch/X86/X86ATTInstPrinter.c",
          "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86ATTInstPrinter.c||arch/X86/X86ATTInstPrinter.c": [
          "File: arch/X86/X86ATTInstPrinter.c -> arch/X86/X86ATTInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:    MI->x86opsize = 10;",
          "176:    break;",
          "177:  }",
          "178:  printMemReference(MI, OpNo, O);",
          "179: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:   case X86_FSTENVm:",
          "178:   case X86_FLDENVm:",
          "180:    switch(MI->csh->mode) {",
          "181:     default:    // never reach",
          "182:      break;",
          "183:     case CS_MODE_16:",
          "184:      MI->x86opsize = 14;",
          "185:      break;",
          "186:     case CS_MODE_32:",
          "187:     case CS_MODE_64:",
          "188:      MI->x86opsize = 28;",
          "189:      break;",
          "190:    }",
          "191:    break;",
          "",
          "---------------"
        ],
        "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c": [
          "File: arch/X86/X86IntelInstPrinter.c -> arch/X86/X86IntelInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:    SStream_concat0(O, \"tbyte ptr \");",
          "195:    MI->x86opsize = 10;",
          "196:    break;",
          "197:  }",
          "199:  printMemReference(MI, OpNo, O);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:   case X86_FSTENVm:",
          "198:   case X86_FLDENVm:",
          "200:    switch(MI->csh->mode) {",
          "201:     default:    // never reach",
          "202:      break;",
          "203:     case CS_MODE_16:",
          "204:      MI->x86opsize = 14;",
          "205:      break;",
          "206:     case CS_MODE_32:",
          "207:     case CS_MODE_64:",
          "208:      MI->x86opsize = 28;",
          "209:      break;",
          "210:    }",
          "211:    break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e39d8284111e8d274853c7bd13a44d979867564",
      "candidate_info": {
        "commit_hash": "8e39d8284111e8d274853c7bd13a44d979867564",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/8e39d8284111e8d274853c7bd13a44d979867564",
        "files": [
          "arch/AArch64/AArch64AddressingModes.h"
        ],
        "message": "replace if-s in AArch64_AM_decodeAdvSIMDModImmType10 with lookup table (#552)\n\n* replace if-s in AArch64_AM_decodeAdvSIMDModImmType10 with lookup table\n\nLookup table is much faster than bunch of if-s. If you don't like lookup tables, I have another proposal. See http://goo.gl/RjW1lr and compare generated machine code\n\n* Smaller lookup table and shifting and bit mask used\n\n* Update AArch64AddressingModes.h",
        "before_after_code_files": [
          "arch/AArch64/AArch64AddressingModes.h||arch/AArch64/AArch64AddressingModes.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/AArch64/AArch64AddressingModes.h||arch/AArch64/AArch64AddressingModes.h": [
          "File: arch/AArch64/AArch64AddressingModes.h -> arch/AArch64/AArch64AddressingModes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "214: static inline uint64_t AArch64_AM_decodeAdvSIMDModImmType10(uint8_t Imm)",
          "215: {",
          "226: }",
          "228: #endif",
          "",
          "[Removed Lines]",
          "216:  uint64_t EncVal = 0;",
          "217:  if (Imm & 0x80) EncVal |= 0xff00000000000000ULL;",
          "218:  if (Imm & 0x40) EncVal |= 0x00ff000000000000ULL;",
          "219:  if (Imm & 0x20) EncVal |= 0x0000ff0000000000ULL;",
          "220:  if (Imm & 0x10) EncVal |= 0x000000ff00000000ULL;",
          "221:  if (Imm & 0x08) EncVal |= 0x00000000ff000000ULL;",
          "222:  if (Imm & 0x04) EncVal |= 0x0000000000ff0000ULL;",
          "223:  if (Imm & 0x02) EncVal |= 0x000000000000ff00ULL;",
          "224:  if (Imm & 0x01) EncVal |= 0x00000000000000ffULL;",
          "225:  return EncVal;",
          "",
          "[Added Lines]",
          "216:  static const uint32_t lookup[16] = {",
          "217:   0x00000000, 0x000000ff, 0x0000ff00, 0x0000ffff,",
          "218:   0x00ff0000, 0x00ff00ff, 0x00ffff00, 0x00ffffff,",
          "219:   0xff000000, 0xff0000ff, 0xff00ff00, 0xff00ffff,",
          "220:   0xffff0000, 0xffff00ff, 0xffffff00, 0xffffffff",
          "221:         };",
          "222:  return lookup[Imm & 0x0f] | ((uint64_t)lookup[Imm >> 4] << 32);",
          "",
          "---------------"
        ]
      }
    }
  ]
}