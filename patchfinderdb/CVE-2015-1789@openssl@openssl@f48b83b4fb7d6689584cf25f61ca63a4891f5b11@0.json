{
  "cve_id": "CVE-2015-1789",
  "cve_desc": "The X509_cmp_time function in crypto/x509/x509_vfy.c in OpenSSL before 0.9.8zg, 1.0.0 before 1.0.0s, 1.0.1 before 1.0.1n, and 1.0.2 before 1.0.2b allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted length field in ASN1_TIME data, as demonstrated by an attack against a server that supports client authentication with a custom verification callback.",
  "repo": "openssl/openssl",
  "patch_hash": "f48b83b4fb7d6689584cf25f61ca63a4891f5b11",
  "patch_info": {
    "commit_hash": "f48b83b4fb7d6689584cf25f61ca63a4891f5b11",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/f48b83b4fb7d6689584cf25f61ca63a4891f5b11",
    "files": [
      "crypto/x509/x509_vfy.c"
    ],
    "message": "Fix length checks in X509_cmp_time to avoid out-of-bounds reads.\n\nAlso tighten X509_cmp_time to reject more than three fractional\nseconds in the time; and to reject trailing garbage after the offset.\n\nCVE-2015-1789\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
    ]
  },
  "patch_diff": {
    "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c": [
      "File: crypto/x509/x509_vfy.c -> crypto/x509/x509_vfy.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1808:     ASN1_TIME atm;",
      "1809:     long offset;",
      "1810:     char buff1[24], buff2[24], *p;",
      "1813:     p = buff1;",
      "1815:     str = (char *)ctm->data;",
      "1816:     if (ctm->type == V_ASN1_UTCTIME) {",
      "1818:             return 0;",
      "1819:         memcpy(p, str, 10);",
      "1820:         p += 10;",
      "1821:         str += 10;",
      "1822:     } else {",
      "1824:             return 0;",
      "1825:         memcpy(p, str, 12);",
      "1826:         p += 12;",
      "1827:         str += 12;",
      "1828:     }",
      "1830:     if ((*str == 'Z') || (*str == '-') || (*str == '+')) {",
      "1833:     } else {",
      "1838:             str++;",
      "1841:         }",
      "1843:     }",
      "1848:         offset = 0;",
      "1850:         if ((*str != '+') && (*str != '-'))",
      "1851:             return 0;",
      "1852:         offset = ((str[1] - '0') * 10 + (str[2] - '0')) * 60;",
      "1853:         offset += (str[3] - '0') * 10 + (str[4] - '0');",
      "1854:         if (*str == '-')",
      "",
      "[Removed Lines]",
      "1811:     int i, j;",
      "1814:     i = ctm->length;",
      "1817:         if ((i < 11) || (i > 17))",
      "1823:         if (i < 13)",
      "1837:         if (*str == '.') {",
      "1839:             while ((*str >= '0') && (*str <= '9'))",
      "1840:                 str++;",
      "1847:     if (*str == 'Z')",
      "1849:     else {",
      "",
      "[Added Lines]",
      "1811:     int i, j, remaining;",
      "1814:     remaining = ctm->length;",
      "1824:         int min_length = sizeof(\"YYMMDDHHMMZ\") - 1;",
      "1825:         int max_length = sizeof(\"YYMMDDHHMMSS+hhmm\") - 1;",
      "1826:         if (remaining < min_length || remaining > max_length)",
      "1831:         remaining -= 10;",
      "1834:         int min_length = sizeof(\"YYYYMMDDHHMMZ\") - 1;",
      "1835:         int max_length = sizeof(\"YYYYMMDDHHMMSS.fff+hhmm\") - 1;",
      "1836:         if (remaining < min_length || remaining > max_length)",
      "1841:         remaining -= 12;",
      "1849:         if (remaining < 2)",
      "1850:             return 0;",
      "1853:         remaining -= 2;",
      "1859:         if (remaining && *str == '.') {",
      "1861:             remaining--;",
      "1862:             for (i = 0; i < 3 && remaining; i++, str++, remaining--) {",
      "1863:                 if (*str < '0' || *str > '9')",
      "1864:                     break;",
      "1865:             }",
      "1873:     if (!remaining)",
      "1874:         return 0;",
      "1875:     if (*str == 'Z') {",
      "1876:         if (remaining != 1)",
      "1877:             return 0;",
      "1879:     } else {",
      "1884:         if (remaining != 5)",
      "1885:             return 0;",
      "1886:         if (str[1] < '0' || str[1] > '9' || str[2] < '0' || str[2] > '9' ||",
      "1887:             str[3] < '0' || str[3] > '9' || str[4] < '0' || str[4] > '9')",
      "1888:             return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "370ac320301e28bb615cee80124c042649c95d14",
      "candidate_info": {
        "commit_hash": "370ac320301e28bb615cee80124c042649c95d14",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/370ac320301e28bb615cee80124c042649c95d14",
        "files": [
          "crypto/x509/x509_vfy.c"
        ],
        "message": "Fix length checks in X509_cmp_time to avoid out-of-bounds reads.\n\nAlso tighten X509_cmp_time to reject more than three fractional\nseconds in the time; and to reject trailing garbage after the offset.\n\nCVE-2015-1789\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ],
          "candidate": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c": [
          "File: crypto/x509/x509_vfy.c -> crypto/x509/x509_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1637:     ASN1_TIME atm;",
          "1638:     long offset;",
          "1639:     char buff1[24], buff2[24], *p;",
          "1642:     p = buff1;",
          "1644:     str = (char *)ctm->data;",
          "1645:     if (ctm->type == V_ASN1_UTCTIME) {",
          "1647:             return 0;",
          "1648:         memcpy(p, str, 10);",
          "1649:         p += 10;",
          "1650:         str += 10;",
          "1651:     } else {",
          "1653:             return 0;",
          "1654:         memcpy(p, str, 12);",
          "1655:         p += 12;",
          "1656:         str += 12;",
          "1657:     }",
          "1659:     if ((*str == 'Z') || (*str == '-') || (*str == '+')) {",
          "1662:     } else {",
          "1667:             str++;",
          "1670:         }",
          "1672:     }",
          "1677:         offset = 0;",
          "1679:         if ((*str != '+') && (*str != '-'))",
          "1680:             return 0;",
          "1681:         offset = ((str[1] - '0') * 10 + (str[2] - '0')) * 60;",
          "1682:         offset += (str[3] - '0') * 10 + (str[4] - '0');",
          "1683:         if (*str == '-')",
          "",
          "[Removed Lines]",
          "1640:     int i, j;",
          "1643:     i = ctm->length;",
          "1646:         if ((i < 11) || (i > 17))",
          "1652:         if (i < 13)",
          "1666:         if (*str == '.') {",
          "1668:             while ((*str >= '0') && (*str <= '9'))",
          "1669:                 str++;",
          "1676:     if (*str == 'Z')",
          "1678:     else {",
          "",
          "[Added Lines]",
          "1640:     int i, j, remaining;",
          "1643:     remaining = ctm->length;",
          "1653:         int min_length = sizeof(\"YYMMDDHHMMZ\") - 1;",
          "1654:         int max_length = sizeof(\"YYMMDDHHMMSS+hhmm\") - 1;",
          "1655:         if (remaining < min_length || remaining > max_length)",
          "1660:         remaining -= 10;",
          "1663:         int min_length = sizeof(\"YYYYMMDDHHMMZ\") - 1;",
          "1664:         int max_length = sizeof(\"YYYYMMDDHHMMSS.fff+hhmm\") - 1;",
          "1665:         if (remaining < min_length || remaining > max_length)",
          "1670:         remaining -= 12;",
          "1678:         if (remaining < 2)",
          "1679:             return 0;",
          "1682:         remaining -= 2;",
          "1688:         if (remaining && *str == '.') {",
          "1690:             remaining--;",
          "1691:             for (i = 0; i < 3 && remaining; i++, str++, remaining--) {",
          "1692:                 if (*str < '0' || *str > '9')",
          "1693:                     break;",
          "1694:             }",
          "1702:     if (!remaining)",
          "1703:         return 0;",
          "1704:     if (*str == 'Z') {",
          "1705:         if (remaining != 1)",
          "1706:             return 0;",
          "1708:     } else {",
          "1713:         if (remaining != 5)",
          "1714:             return 0;",
          "1715:         if (str[1] < '0' || str[1] > '9' || str[2] < '0' || str[2] > '9' ||",
          "1716:             str[3] < '0' || str[3] > '9' || str[4] < '0' || str[4] > '9')",
          "1717:             return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa57f74a3941db6b2efb2f43c6add914ec83db20",
      "candidate_info": {
        "commit_hash": "fa57f74a3941db6b2efb2f43c6add914ec83db20",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fa57f74a3941db6b2efb2f43c6add914ec83db20",
        "files": [
          "crypto/x509/x509_vfy.c"
        ],
        "message": "Fix length checks in X509_cmp_time to avoid out-of-bounds reads.\n\nAlso tighten X509_cmp_time to reject more than three fractional\nseconds in the time; and to reject trailing garbage after the offset.\n\nCVE-2015-1789\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ],
          "candidate": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c": [
          "File: crypto/x509/x509_vfy.c -> crypto/x509/x509_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1007:     ASN1_TIME atm;",
          "1008:     long offset;",
          "1009:     char buff1[24], buff2[24], *p;",
          "1012:     p = buff1;",
          "1014:     str = (char *)ctm->data;",
          "1015:     if (ctm->type == V_ASN1_UTCTIME) {",
          "1017:             return 0;",
          "1018:         memcpy(p, str, 10);",
          "1019:         p += 10;",
          "1020:         str += 10;",
          "1021:     } else {",
          "1023:             return 0;",
          "1024:         memcpy(p, str, 12);",
          "1025:         p += 12;",
          "1026:         str += 12;",
          "1027:     }",
          "1029:     if ((*str == 'Z') || (*str == '-') || (*str == '+')) {",
          "1032:     } else {",
          "1037:             str++;",
          "1040:         }",
          "1042:     }",
          "1047:         offset = 0;",
          "1049:         if ((*str != '+') && (*str != '-'))",
          "1050:             return 0;",
          "1051:         offset = ((str[1] - '0') * 10 + (str[2] - '0')) * 60;",
          "1052:         offset += (str[3] - '0') * 10 + (str[4] - '0');",
          "1053:         if (*str == '-')",
          "",
          "[Removed Lines]",
          "1010:     int i, j;",
          "1013:     i = ctm->length;",
          "1016:         if ((i < 11) || (i > 17))",
          "1022:         if (i < 13)",
          "1036:         if (*str == '.') {",
          "1038:             while ((*str >= '0') && (*str <= '9'))",
          "1039:                 str++;",
          "1046:     if (*str == 'Z')",
          "1048:     else {",
          "",
          "[Added Lines]",
          "1010:     int i, j, remaining;",
          "1013:     remaining = ctm->length;",
          "1023:         int min_length = sizeof(\"YYMMDDHHMMZ\") - 1;",
          "1024:         int max_length = sizeof(\"YYMMDDHHMMSS+hhmm\") - 1;",
          "1025:         if (remaining < min_length || remaining > max_length)",
          "1030:         remaining -= 10;",
          "1033:         int min_length = sizeof(\"YYYYMMDDHHMMZ\") - 1;",
          "1034:         int max_length = sizeof(\"YYYYMMDDHHMMSS.fff+hhmm\") - 1;",
          "1035:         if (remaining < min_length || remaining > max_length)",
          "1040:         remaining -= 12;",
          "1048:         if (remaining < 2)",
          "1049:             return 0;",
          "1052:         remaining -= 2;",
          "1058:         if (remaining && *str == '.') {",
          "1060:             remaining--;",
          "1061:             for (i = 0; i < 3 && remaining; i++, str++, remaining--) {",
          "1062:                 if (*str < '0' || *str > '9')",
          "1063:                     break;",
          "1064:             }",
          "1072:     if (!remaining)",
          "1073:         return 0;",
          "1074:     if (*str == 'Z') {",
          "1075:         if (remaining != 1)",
          "1076:             return 0;",
          "1078:     } else {",
          "1083:         if (remaining != 5)",
          "1084:             return 0;",
          "1085:         if (str[1] < '0' || str[1] > '9' || str[2] < '0' || str[2] > '9' ||",
          "1086:             str[3] < '0' || str[3] > '9' || str[4] < '0' || str[4] > '9')",
          "1087:             return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9bc3665ac9e3c36f7762acd3691e1115d250b030",
      "candidate_info": {
        "commit_hash": "9bc3665ac9e3c36f7762acd3691e1115d250b030",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9bc3665ac9e3c36f7762acd3691e1115d250b030",
        "files": [
          "crypto/x509/x509_vfy.c"
        ],
        "message": "Fix length checks in X509_cmp_time to avoid out-of-bounds reads.\n\nAlso tighten X509_cmp_time to reject more than three fractional\nseconds in the time; and to reject trailing garbage after the offset.\n\nCVE-2015-1789\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ],
          "candidate": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c": [
          "File: crypto/x509/x509_vfy.c -> crypto/x509/x509_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1788:     ASN1_TIME atm;",
          "1789:     long offset;",
          "1790:     char buff1[24], buff2[24], *p;",
          "1793:     p = buff1;",
          "1795:     str = (char *)ctm->data;",
          "1796:     if (ctm->type == V_ASN1_UTCTIME) {",
          "1798:             return 0;",
          "1799:         memcpy(p, str, 10);",
          "1800:         p += 10;",
          "1801:         str += 10;",
          "1802:     } else {",
          "1804:             return 0;",
          "1805:         memcpy(p, str, 12);",
          "1806:         p += 12;",
          "1807:         str += 12;",
          "1808:     }",
          "1810:     if ((*str == 'Z') || (*str == '-') || (*str == '+')) {",
          "1813:     } else {",
          "1818:             str++;",
          "1821:         }",
          "1823:     }",
          "1828:         offset = 0;",
          "1830:         if ((*str != '+') && (*str != '-'))",
          "1831:             return 0;",
          "1832:         offset = ((str[1] - '0') * 10 + (str[2] - '0')) * 60;",
          "1833:         offset += (str[3] - '0') * 10 + (str[4] - '0');",
          "1834:         if (*str == '-')",
          "",
          "[Removed Lines]",
          "1791:     int i, j;",
          "1794:     i = ctm->length;",
          "1797:         if ((i < 11) || (i > 17))",
          "1803:         if (i < 13)",
          "1817:         if (*str == '.') {",
          "1819:             while ((*str >= '0') && (*str <= '9'))",
          "1820:                 str++;",
          "1827:     if (*str == 'Z')",
          "1829:     else {",
          "",
          "[Added Lines]",
          "1791:     int i, j, remaining;",
          "1794:     remaining = ctm->length;",
          "1804:         int min_length = sizeof(\"YYMMDDHHMMZ\") - 1;",
          "1805:         int max_length = sizeof(\"YYMMDDHHMMSS+hhmm\") - 1;",
          "1806:         if (remaining < min_length || remaining > max_length)",
          "1811:         remaining -= 10;",
          "1814:         int min_length = sizeof(\"YYYYMMDDHHMMZ\") - 1;",
          "1815:         int max_length = sizeof(\"YYYYMMDDHHMMSS.fff+hhmm\") - 1;",
          "1816:         if (remaining < min_length || remaining > max_length)",
          "1821:         remaining -= 12;",
          "1829:         if (remaining < 2)",
          "1830:             return 0;",
          "1833:         remaining -= 2;",
          "1839:         if (remaining && *str == '.') {",
          "1841:             remaining--;",
          "1842:             for (i = 0; i < 3 && remaining; i++, str++, remaining--) {",
          "1843:                 if (*str < '0' || *str > '9')",
          "1844:                     break;",
          "1845:             }",
          "1853:     if (!remaining)",
          "1854:         return 0;",
          "1855:     if (*str == 'Z') {",
          "1856:         if (remaining != 1)",
          "1857:             return 0;",
          "1859:     } else {",
          "1864:         if (remaining != 5)",
          "1865:             return 0;",
          "1866:         if (str[1] < '0' || str[1] > '9' || str[2] < '0' || str[2] > '9' ||",
          "1867:             str[3] < '0' || str[3] > '9' || str[4] < '0' || str[4] > '9')",
          "1868:             return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57de3216e27c2e52bc3bc5bc7c94babdb7022179",
      "candidate_info": {
        "commit_hash": "57de3216e27c2e52bc3bc5bc7c94babdb7022179",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/57de3216e27c2e52bc3bc5bc7c94babdb7022179",
        "files": [
          "crypto/x509/x509_vfy.c"
        ],
        "message": "Fix length checks in X509_cmp_time to avoid out-of-bounds reads.\n\nAlso tighten X509_cmp_time to reject more than three fractional\nseconds in the time; and to reject trailing garbage after the offset.\n\nCVE-2015-1789\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ],
          "candidate": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c": [
          "File: crypto/x509/x509_vfy.c -> crypto/x509/x509_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1604:     ASN1_TIME atm;",
          "1605:     long offset;",
          "1606:     char buff1[24], buff2[24], *p;",
          "1609:     p = buff1;",
          "1611:     str = (char *)ctm->data;",
          "1612:     if (ctm->type == V_ASN1_UTCTIME) {",
          "1614:             return 0;",
          "1615:         memcpy(p, str, 10);",
          "1616:         p += 10;",
          "1617:         str += 10;",
          "1618:     } else {",
          "1620:             return 0;",
          "1621:         memcpy(p, str, 12);",
          "1622:         p += 12;",
          "1623:         str += 12;",
          "1624:     }",
          "1626:     if ((*str == 'Z') || (*str == '-') || (*str == '+')) {",
          "1629:     } else {",
          "1634:             str++;",
          "1637:         }",
          "1639:     }",
          "1644:         offset = 0;",
          "1646:         if ((*str != '+') && (*str != '-'))",
          "1647:             return 0;",
          "1648:         offset = ((str[1] - '0') * 10 + (str[2] - '0')) * 60;",
          "1649:         offset += (str[3] - '0') * 10 + (str[4] - '0');",
          "1650:         if (*str == '-')",
          "",
          "[Removed Lines]",
          "1607:     int i, j;",
          "1610:     i = ctm->length;",
          "1613:         if ((i < 11) || (i > 17))",
          "1619:         if (i < 13)",
          "1633:         if (*str == '.') {",
          "1635:             while ((*str >= '0') && (*str <= '9'))",
          "1636:                 str++;",
          "1643:     if (*str == 'Z')",
          "1645:     else {",
          "",
          "[Added Lines]",
          "1607:     int i, j, remaining;",
          "1610:     remaining = ctm->length;",
          "1620:         int min_length = sizeof(\"YYMMDDHHMMZ\") - 1;",
          "1621:         int max_length = sizeof(\"YYMMDDHHMMSS+hhmm\") - 1;",
          "1622:         if (remaining < min_length || remaining > max_length)",
          "1627:         remaining -= 10;",
          "1630:         int min_length = sizeof(\"YYYYMMDDHHMMZ\") - 1;",
          "1631:         int max_length = sizeof(\"YYYYMMDDHHMMSS.fff+hhmm\") - 1;",
          "1632:         if (remaining < min_length || remaining > max_length)",
          "1637:         remaining -= 12;",
          "1645:         if (remaining < 2)",
          "1646:             return 0;",
          "1649:         remaining -= 2;",
          "1655:         if (remaining && *str == '.') {",
          "1657:             remaining--;",
          "1658:             for (i = 0; i < 3 && remaining; i++, str++, remaining--) {",
          "1659:                 if (*str < '0' || *str > '9')",
          "1660:                     break;",
          "1661:             }",
          "1669:     if (!remaining)",
          "1670:         return 0;",
          "1671:     if (*str == 'Z') {",
          "1672:         if (remaining != 1)",
          "1673:             return 0;",
          "1675:     } else {",
          "1680:         if (remaining != 5)",
          "1681:             return 0;",
          "1682:         if (str[1] < '0' || str[1] > '9' || str[2] < '0' || str[2] > '9' ||",
          "1683:             str[3] < '0' || str[3] > '9' || str[4] < '0' || str[4] > '9')",
          "1684:             return 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}