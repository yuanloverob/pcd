{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ca423a693a619b38fb96d94b0385f8ce91a8e759",
      "candidate_info": {
        "commit_hash": "ca423a693a619b38fb96d94b0385f8ce91a8e759",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ca423a693a619b38fb96d94b0385f8ce91a8e759",
        "files": [
          "crypto/des/set_key.c",
          "doc/crypto/DES_random_key.pod"
        ],
        "message": "DES keys are not 7 days long.\n\nCLA: trivial\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2604)\n\n(cherry picked from commit 4fd7b54dc224930a0ce6dd67b35c598c5072857c)",
        "before_after_code_files": [
          "crypto/des/set_key.c||crypto/des/set_key.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/des/set_key.c||crypto/des/set_key.c": [
          "File: crypto/des/set_key.c -> crypto/des/set_key.c"
        ]
      }
    },
    {
      "candidate_hash": "1320d2501d0c9c6ad9ea0dc1f5115f4e6b3e0c3b",
      "candidate_info": {
        "commit_hash": "1320d2501d0c9c6ad9ea0dc1f5115f4e6b3e0c3b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1320d2501d0c9c6ad9ea0dc1f5115f4e6b3e0c3b",
        "files": [
          "test/recipes/60-test_x509_store.t"
        ],
        "message": "Fix test_x509_store\n\nDon't run this test unless 'openssl rehash' works properly.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2664)\n(cherry picked from commit 73540f4729bb856ab066c6e7a57513a97e3ca36f)",
        "before_after_code_files": [
          "test/recipes/60-test_x509_store.t||test/recipes/60-test_x509_store.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/60-test_x509_store.t||test/recipes/60-test_x509_store.t": [
          "File: test/recipes/60-test_x509_store.t -> test/recipes/60-test_x509_store.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: setup(\"test_x509_store\");",
          "19: # We use 'openssl verify' for these tests, as it contains everything",
          "20: # we need to conduct these tests.  The tests here are a subset of the",
          "21: # ones found in 25-test_verify.t",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #If \"openssl rehash -help\" fails it's most likely because we're on a platform",
          "20: #that doesn't support the rehash command (e.g. Windows)",
          "21: plan skip_all => \"test_rehash is not available on this platform\"",
          "22:     unless run(app([\"openssl\", \"rehash\", \"-help\"]));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb5b56af4c3b9e43a698f01b70732c62d3642583",
      "candidate_info": {
        "commit_hash": "bb5b56af4c3b9e43a698f01b70732c62d3642583",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/bb5b56af4c3b9e43a698f01b70732c62d3642583",
        "files": [
          "crypto/async/async_wait.c"
        ],
        "message": "Remove fd from the list when the engine clears the wait context before pause\n\nThis fixes the num of fds added/removed returned by ASYNC_WAIT_CTX_get_changed_fds\n\nPreviously, the numbers were not consistent with the fds actually written in\nthe buffers since the fds that have been both added and removed are explicitly\nignored in the loop.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2581)\n(cherry picked from commit f89dd6738a0ec2b6cfb05a3cc5fa38843dc27d2f)",
        "before_after_code_files": [
          "crypto/async/async_wait.c||crypto/async/async_wait.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/async/async_wait.c||crypto/async/async_wait.c": [
          "File: crypto/async/async_wait.c -> crypto/async/async_wait.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:             continue;",
          "149:         }",
          "150:         if (curr->key == key) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:             if (curr->add == 1) {",
          "153:                 if (ctx->fds == curr) {",
          "154:                     ctx->fds = curr->next;",
          "155:                 }",
          "156:                 else {",
          "157:                     struct fd_lookup_st *prev = ctx->fds;",
          "158:                     while (prev->next != curr && prev->next != NULL) {",
          "159:                         prev = prev->next;",
          "160:                     }",
          "161:                     if (prev->next == NULL) {",
          "162:                         return 1;",
          "163:                     }",
          "164:                     prev->next = curr->next;",
          "165:                 }",
          "171:                 if (curr->cleanup != NULL)",
          "172:                     curr->cleanup(ctx, curr->key, curr->fd, curr->custom_data);",
          "173:                 OPENSSL_free(curr);",
          "174:                 ctx->numadd--;",
          "175:                 return 1;",
          "176:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b649ffcaea38864270ad6c2362ed0ef639749707",
      "candidate_info": {
        "commit_hash": "b649ffcaea38864270ad6c2362ed0ef639749707",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b649ffcaea38864270ad6c2362ed0ef639749707",
        "files": [
          "test/recipes/25-test_crl.t"
        ],
        "message": "Add a couple of test to check CRL fingerprint\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2314)\n(cherry picked from commit 929860d0e6112f5c7766d9ea036c3f8bd8d3d719)",
        "before_after_code_files": [
          "test/recipes/25-test_crl.t||test/recipes/25-test_crl.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/25-test_crl.t||test/recipes/25-test_crl.t": [
          "File: test/recipes/25-test_crl.t -> test/recipes/25-test_crl.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: setup(\"test_crl\");",
          "20: require_ok(srctop_file('test','recipes','tconversion.pl'));",
          "",
          "[Removed Lines]",
          "18: plan tests => 3;",
          "",
          "[Added Lines]",
          "18: plan tests => 5;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: };",
          "26: ok(run(test(['crltest'])));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: ok(compare1stline([qw{openssl crl -noout -fingerprint -in},",
          "29:                    srctop_file('test', 'testcrl.pem')],",
          "30:                   'SHA1 Fingerprint=BA:F4:1B:AD:7A:9B:2F:09:16:BC:60:A7:0E:CE:79:2E:36:00:E7:B2'));",
          "31: ok(compare1stline([qw{openssl crl -noout -fingerprint -sha256 -in},",
          "32:                    srctop_file('test', 'testcrl.pem')],",
          "33:                   'SHA256 Fingerprint=B3:A9:FD:A7:2E:8C:3D:DF:D0:F1:C3:1A:96:60:B5:FD:B0:99:7C:7F:0E:E4:34:F5:DB:87:62:36:BC:F1:BC:1B'));",
          "35: sub compare1stline {",
          "36:     my ($cmdarray, $str) = @_;",
          "37:     my @lines = run(app($cmdarray), capture => 1);",
          "39:     return 1 if $lines[0] =~ m|^\\Q${str}\\E\\R$|;",
          "40:     note \"Got      \", $lines[0];",
          "41:     note \"Expected \", $str;",
          "42:     return 0;",
          "43: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c028052c4cfc39dc99f735f1743b18867547129f",
      "candidate_info": {
        "commit_hash": "c028052c4cfc39dc99f735f1743b18867547129f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c028052c4cfc39dc99f735f1743b18867547129f",
        "files": [
          "crypto/threads_win.c"
        ],
        "message": "Revert \"Fixed deadlock in CRYPTO_THREAD_run_once for Windows\"\n\nThis reverts commit edc18749bd5dfb7e12513d3978f78f9b56104fd6.\n\nThe proposed fix is incorrect. It marks the \"run_once\" code as having\nfinished before it has. The intended semantics of run_once is that no\nthreads should proceed until the code has run exactly once. With this\nchange the \"second\" thread will think the run_once code has already been\nrun and will continue, even though it is still in progress. This could\nresult in a crash or other incorrect behaviour.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "crypto/threads_win.c||crypto/threads_win.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/threads_win.c||crypto/threads_win.c": [
          "File: crypto/threads_win.c -> crypto/threads_win.c"
        ]
      }
    }
  ]
}