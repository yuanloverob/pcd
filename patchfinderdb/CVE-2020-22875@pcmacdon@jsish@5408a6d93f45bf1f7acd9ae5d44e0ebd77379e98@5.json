{
  "cve_id": "CVE-2020-22875",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjSetLength in jsish before 3.0.6, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
  "patch_info": {
    "commit_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCmds.c",
      "tests/locals.jsi",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.6\": Fix crashes in Array for \"integer overflow #10\"\n\nFossilOrigin-Name: 50642d64b8f0a4e62df68e59fcb2ef0923c3dbec8fc8a15d38b1ddbe655c38d6",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCmds.c||src/jsiCmds.c",
      "tests/locals.jsi||tests/locals.jsi",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 4",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #define NO_QSORT_R 1",
      "8: #endif",
      "10: static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "11:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "12: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {",
      "11:     if (!obj || !obj->arr)",
      "12:         return 0;",
      "13:     return obj->arrCnt;",
      "14: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:     obj = _this->d.obj;",
      "21:     int argc = Jsi_ValueGetLength(interp, args);",
      "27:     int i;",
      "28:     for (i = 0; i < argc; ++i) {",
      "29:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);",
      "",
      "[Removed Lines]",
      "22:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "23:     if (curlen < 0) {",
      "24:         Jsi_ObjSetLength(interp, obj, 0);",
      "25:     }",
      "",
      "[Added Lines]",
      "28:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "31:         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);",
      "32:     }",
      "35:     return JSI_OK;",
      "36: }",
      "",
      "[Removed Lines]",
      "34:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "36:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "45:     Jsi_Value *v;",
      "46:     Jsi_Obj *obj;",
      "47:     obj = _this->d.obj;",
      "50:     if (i < 0) {",
      "51:         Jsi_ValueMakeUndef(interp, ret);",
      "",
      "[Removed Lines]",
      "48:     int i = Jsi_ObjGetLength(interp, obj) - 1;",
      "",
      "[Added Lines]",
      "50:     int i = jsi_SizeOfArray(interp, obj) - 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "78:     int argc, curlen;",
      "79:     Jsi_DString dStr = {};",
      "82:     if (curlen == 0) {",
      "83:         goto bail;",
      "84:     }",
      "",
      "[Removed Lines]",
      "81:     curlen = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "89:             jstr = Jsi_ValueToString(interp, sc, NULL);",
      "90:     }",
      "93:         goto bail;",
      "94:     }",
      "95:     int i;",
      "",
      "[Removed Lines]",
      "92:     if (0 == (argc=Jsi_ObjGetLength(interp, _this->d.obj))) {",
      "",
      "[Added Lines]",
      "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "233:         return;",
      "234:     }",
      "237:     if (len <= 0) return;",
      "239:     Jsi_Value *v0 = Jsi_ValueArrayIndex(interp, v, 0);",
      "",
      "[Removed Lines]",
      "236:     int len = Jsi_ObjGetLength(interp, v->d.obj);",
      "",
      "[Added Lines]",
      "238:     int len = jsi_SizeOfArray(interp, v->d.obj);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "256: static Jsi_RC jsi_ArrayFlatSub(Jsi_Interp *interp, Jsi_Obj* nobj, Jsi_Value *arr, int depth) {",
      "259:     if (len <= 0) return JSI_OK;",
      "260:     Jsi_RC rc = JSI_OK;",
      "262:     for (i = 0; i < len && rc == JSI_OK; i++) {",
      "263:         Jsi_Value *t = Jsi_ValueArrayIndex(interp, arr, i);",
      "264:         if (t && depth>0 && Jsi_ValueIsArray(interp, t))",
      "",
      "[Removed Lines]",
      "258:     int i, n = 0, len = Jsi_ObjGetLength(interp, arr->d.obj);",
      "261:     int clen = Jsi_ObjGetLength(interp, nobj);",
      "",
      "[Added Lines]",
      "260:     int i, n = 0, len = jsi_SizeOfArray(interp, arr->d.obj);",
      "263:     int clen = jsi_SizeOfArray(interp, nobj);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "302:     obj = _this->d.obj;",
      "304:     argc = Jsi_ValueGetLength(interp, args);",
      "309:     Jsi_ObjListifyArray(interp, obj);",
      "311:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "",
      "[Removed Lines]",
      "305:     curlen = Jsi_ObjGetLength(interp, obj);",
      "306:     if (curlen < 0) {",
      "307:         Jsi_ObjSetLength(interp, obj, 0);",
      "308:     }",
      "",
      "[Added Lines]",
      "307:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "377:     if (!sthis)",
      "378:         sthis = nthis = Jsi_ValueNew1(interp);",
      "379:     obj = _this->d.obj;",
      "384:     Jsi_ObjListifyArray(interp, obj);",
      "385:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "386:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "380:     curlen = Jsi_ObjGetLength(interp, obj);",
      "381:     if (curlen < 0) {",
      "382:         Jsi_ObjSetLength(interp, obj, 0);",
      "383:     }",
      "",
      "[Added Lines]",
      "379:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "439:     if (!sthis)",
      "440:         sthis = nthis = Jsi_ValueNew1(interp);",
      "441:     obj = _this->d.obj;",
      "446:     Jsi_ObjListifyArray(interp, obj);",
      "447:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "448:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "442:     curlen = Jsi_ObjGetLength(interp, obj);",
      "443:     if (curlen < 0) {",
      "444:         Jsi_ObjSetLength(interp, obj, 0);",
      "445:     }",
      "",
      "[Added Lines]",
      "438:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "522:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "523:         return Jsi_LogError(\"expected array object\");",
      "524:     Jsi_Obj *obj;",
      "526:     uint i;",
      "527:     Jsi_Value *func, *vpargs;",
      "",
      "[Removed Lines]",
      "525:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "535:         sthis = nthis = Jsi_ValueNew1(interp);",
      "537:     obj = _this->d.obj;",
      "542:     Jsi_ObjListifyArray(interp, obj);",
      "543:     Jsi_RC rc = JSI_OK;",
      "",
      "[Removed Lines]",
      "538:     curlen = Jsi_ObjGetLength(interp, obj);",
      "539:     if (curlen < 0) {",
      "540:         Jsi_ObjSetLength(interp, obj, 0);",
      "541:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "566:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "567:         return Jsi_LogError(\"expected array\");",
      "568:     Jsi_Obj *obj;",
      "570:     uint i;",
      "571:     Jsi_RC rc = JSI_OK;",
      "572:     Jsi_Value *func, *vpargs, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "569:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "579:         sthis = nthis = Jsi_ValueNew1(interp);",
      "581:     obj = _this->d.obj;",
      "586:     Jsi_ObjListifyArray(interp, obj);",
      "587:     int fval = 0;",
      "588:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "",
      "[Removed Lines]",
      "582:     curlen = Jsi_ObjGetLength(interp, obj);",
      "583:     if (curlen < 0) {",
      "584:         Jsi_ObjSetLength(interp, obj, 0);",
      "585:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "628:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "629:         return Jsi_LogError(\"expected array\");",
      "630:     Jsi_RC rc = JSI_OK;",
      "632:     Jsi_Obj *obj;",
      "633:     Jsi_Value *func, *vpargs, *ini = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "631:     int curlen, i;",
      "",
      "[Added Lines]",
      "614:     int i;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "639:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "640:     obj = _this->d.obj;",
      "644:     Jsi_ObjListifyArray(interp, obj);",
      "645:     Jsi_Value *vobjs[4];",
      "646:     int n, rev = (op==2);",
      "",
      "[Removed Lines]",
      "641:     curlen = Jsi_ObjGetLength(interp, obj);",
      "642:     if (curlen < 0)",
      "643:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "717:         goto bail;",
      "718:     }",
      "721:     if (n == 0) {",
      "722:         goto bail;",
      "723:     }",
      "",
      "[Removed Lines]",
      "720:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "700:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "769: static Jsi_RC jsi_ArraySizeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,Jsi_Value **ret, Jsi_Func *funcPtr) {",
      "770:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "771:         return Jsi_LogError(\"expected array object\");",
      "773:     Jsi_ValueMakeNumber(interp, ret, i);",
      "774:     return JSI_OK;",
      "775: }",
      "",
      "[Removed Lines]",
      "772:     int i = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "752:     int i = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "780:     Jsi_Value *v;",
      "781:     Jsi_Obj *obj = _this->d.obj;",
      "782:     Jsi_ObjListifyArray(interp, obj);",
      "785:     if (n<=0) {",
      "786:         Jsi_ValueMakeUndef(interp, ret);",
      "787:     } else {",
      "",
      "[Removed Lines]",
      "783:     uint n = Jsi_ObjGetLength(interp, obj);",
      "784:     assert(n <= obj->arrCnt);",
      "",
      "[Added Lines]",
      "763:     uint n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "803:     Jsi_Obj *obj = _this->d.obj;",
      "804:     int argc = Jsi_ValueGetLength(interp, args);",
      "809:     if (argc <= 0) {",
      "810:         Jsi_ValueMakeNumber(interp, ret, 0);",
      "811:         return JSI_OK;",
      "",
      "[Removed Lines]",
      "805:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "806:     if (curlen < 0) {",
      "807:         Jsi_ObjSetLength(interp, obj, 0);",
      "808:     }",
      "",
      "[Added Lines]",
      "784:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "825:     }",
      "826:     Jsi_ObjSetLength(interp, obj, curlen+argc);",
      "829:     return JSI_OK;",
      "830: }",
      "",
      "[Removed Lines]",
      "828:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "804:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "841:     Jsi_Obj *obj = _this->d.obj;",
      "844:     if (start && Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
      "845:         istart = (int)nstart;",
      "",
      "[Removed Lines]",
      "842:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "818:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "902:         goto bail;",
      "903:     }",
      "904:     obj = _this->d.obj;",
      "906:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
      "907:         istart = (int)nstart;",
      "908:         if (istart > n)",
      "",
      "[Removed Lines]",
      "905:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "881:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1166:     argc = Jsi_ValueGetLength(interp, args);",
      "1167:     istart = 0;",
      "1168:     ilen = (argc>=2 ? argc - 2 : 0);",
      "1170:     curlen = n;",
      "1172:     if (!start) {",
      "",
      "[Removed Lines]",
      "1169:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "1145:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1202:     }",
      "1204:     if (curlen < 0) {",
      "1206:     }",
      "1207:     Jsi_ObjListifyArray(interp, obj);",
      "",
      "[Removed Lines]",
      "1205:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "1181:         Jsi_ObjSetLength(interp, obj, curlen=0);",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4509:     return rc;",
      "4510: }",
      "4512: static const char *jsi_FindHelpStr(const char *fstr, const char *key, Jsi_DString *dPtr) {",
      "4513:     if (!fstr) return \"\";",
      "4514:     Jsi_DSSetLength(dPtr, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4512: static Jsi_RC SysRunMainCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "4513:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "4514: {",
      "4515:     if (jsi_isMain(interp))",
      "4516:         return SysRunModuleCmd(interp, args, _this, ret, funcPtr);",
      "4517:     return JSI_OK;",
      "4518: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4762:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
      "4763:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
      "4764:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
      "4766:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
      "4767:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
      "4768:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
      "",
      "[Removed Lines]",
      "4765:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "[Added Lines]",
      "4773:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4863:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
      "4864:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
      "4865:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
      "4866:     { \"runModule\",  SysRunModuleCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "4867:     { \"sleep\",      SysSleepCmd,     0,  1, \"secs:number=1.0\",  .help=\"sleep for N milliseconds, minimum .001\", .retType=(uint)JSI_TT_VOID },",
      "4868: #ifndef JSI_OMIT_EVENT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4874:     { \"runMain\",    SysRunMainCmd,   0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"If isMain invokes runModule\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "",
      "---------------"
    ],
    "tests/locals.jsi||tests/locals.jsi": [
      "File: tests/locals.jsi -> tests/locals.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: function foo() {",
      "4:   function bar() { }",
      "5:   var x = 1;",
      "6: ;  Info.locals();",
      "7: ;  Info.locals(false);",
      "8: ;  Info.locals(true);",
      "9: }",
      "11: foo();",
      "14: =!EXPECTSTART!=",
      "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
      "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
      "17: Info.locals(true) ==> { x:1 }",
      "18: =!EXPECTEND!=",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "140: Info.prototype.isMain = function():boolean {};",
      "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
      "142: Info.prototype.level = function(level:number=void):number|array|object {};",
      "144: Info.prototype.lookup = function(name:string):any {};",
      "145: Info.prototype.methods = function(val:string|regexp):array|object {};",
      "146: Info.prototype.named = function(name:string=void):array|userobj {};",
      "",
      "[Removed Lines]",
      "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
      "",
      "[Added Lines]",
      "143: Info.prototype.locals = function(filter:boolean=void):object {};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303: System.prototype.puts = function(val, ...):void {};",
      "304: System.prototype.quote = function(val:string):string {};",
      "305: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "306: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "307: System.prototype.setInterval = function(callback:function, ms:number):number {};",
      "308: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: System.prototype.runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394: var puts = function(val, ...):void {};",
      "395: var quote = function(val:string):string {};",
      "396: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "397: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "398: var setInterval = function(callback:function, ms:number):number {};",
      "399: var setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398: var runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
      "553: Otherwise returns details on the specified level.",
      "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
      "556: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
      "557: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
      "558: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
      "",
      "[Removed Lines]",
      "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
      "",
      "[Added Lines]",
      "555: <tr><td>locals</td><td>locals(filter:boolean=void):object </td><td>Return locals; use filter=true/false just vars/functions.</td></tr>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361: With two arguments, returns object containing: version, loadFile, func.",
      "1362: A third argument sets options for package or module.",
      "1363: Note an error is thrown if requested version is greater than actual version.</td></tr>",
      "1364: <tr><td>runModule</td><td>runModule(cmd:string|null|function=void, conf:array=undefined) </td><td>Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args.</td></tr>",
      "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
      "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1364: <tr><td>runMain</td><td>runMain(cmd:string|null|function=void, conf:array=undefined) </td><td>If isMain invokes runModule.</td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "858da537bde4de9d8c92466d5a866505310bc328",
      "candidate_info": {
        "commit_hash": "858da537bde4de9d8c92466d5a866505310bc328",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/858da537bde4de9d8c92466d5a866505310bc328",
        "files": [
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiArray.c",
          "src/jsiCData.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiObj.c",
          "src/jsiValue.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.8\": Address Array alloc sizing issues from issue \"integer overflow and buffer overflow #5\".\n\nFossilOrigin-Name: 8c46a1d465b358110dcfb271721d35fe843a1b52f2fa24ccc10094eb8aaf6fe4",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiArray.c||src/jsiArray.c",
          "src/jsiCData.c||src/jsiCData.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiValue.c||src/jsiValue.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 7",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 8",
          "",
          "---------------"
        ],
        "src/jsiArray.c||src/jsiArray.c": [
          "File: src/jsiArray.c -> src/jsiArray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:             rc = jsi_ArrayFlatSub(interp, nobj, t , depth-1);",
          "268:         else if (!Jsi_ValueIsUndef(interp, t))",
          "269:             Jsi_ObjArrayAdd(interp, nobj, t);",
          "271:             return Jsi_LogError(\"array size exceeded\");",
          "272:     }",
          "273:     return rc;",
          "",
          "[Removed Lines]",
          "270:         if ((++n + clen)>interp->maxArrayList)",
          "",
          "[Added Lines]",
          "270:         if ((uint)(++n + clen)>interp->maxArrayList)",
          "",
          "---------------"
        ],
        "src/jsiCData.c||src/jsiCData.c": [
          "File: src/jsiCData.c -> src/jsiCData.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1276:             sf->flags |= JSI_OPT_BITSET_ENUM;",
          "1277:         }",
          "1278:         if (sf->arrSize) {",
          "1281:                 goto bail;",
          "1282:             }",
          "1283:             if (sf->bits || isEnum) {",
          "",
          "[Removed Lines]",
          "1279:             if (sf->arrSize>MAX_ARRAY_LIST) {",
          "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, MAX_ARRAY_LIST);",
          "",
          "[Added Lines]",
          "1279:             if (sf->arrSize>interp->maxArrayList) {",
          "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, interp->maxArrayList);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1259:     Jsi_Value *Top_object;",
          "1260:     Jsi_ScopeStrs *scopes[JSI_MAX_SCOPE];",
          "1261:     int cur_scope;",
          "1263:     int delRBCnt;",
          "1264:     Jsi_Func *activeFunc;  // Currently active function call.",
          "1265:     Jsi_Func *prevActiveFunc;  // Prev active function call.",
          "",
          "[Removed Lines]",
          "1262:     int maxArrayList;",
          "",
          "[Added Lines]",
          "1262:     uint maxArrayList;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     JSI_OPT(INT,   Jsi_Interp, lockTimeout, .help=\"Thread time-out for mutex lock acquires (milliseconds)\" ),",
          "101:     JSI_OPT(CUSTOM,Jsi_Interp, logOpts,     .help=\"Options for log output to add file/line/time\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=jsi_InterpLogOptions),",
          "102:     JSI_OPT(INT,   Jsi_Interp, maxDepth,    .help=\"Depth limit of recursive function calls (1000)\", .flags=JSI_OPT_LOCKSAFE),",
          "104:     JSI_OPT(INT,   Jsi_Interp, maxIncDepth, .help=\"Maximum allowed source/require nesting depth (50)\", .flags=JSI_OPT_LOCKSAFE),",
          "105:     JSI_OPT(INT,   Jsi_Interp, maxInterpDepth,.help=\"Maximum nested subinterp create depth (10)\", .flags=JSI_OPT_LOCKSAFE),",
          "106:     JSI_OPT(INT,   Jsi_Interp, maxUserObjs, .help=\"Maximum number of 'new' object calls, eg. File, RegExp, etc\", .flags=JSI_OPT_LOCKSAFE ),",
          "",
          "[Removed Lines]",
          "103:     JSI_OPT(INT,   Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "[Added Lines]",
          "103:     JSI_OPT(UINT,  Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1146:     }",
          "1147:     interp->maxDepth = JSI_MAX_EVAL_DEPTH;",
          "1148:     interp->maxIncDepth = JSI_MAX_INCLUDE_DEPTH;",
          "1149:     interp->typeWarnMax = 50;",
          "1150:     interp->subOpts.dblPrec = __DBL_DECIMAL_DIG__-1;",
          "1151:     interp->subOpts.prompt = \"$ \";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1149:     interp->maxArrayList = MAX_ARRAY_LIST;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1482: #endif",
          "1483:     if (interp->typeCheck.all|interp->typeCheck.parse|interp->typeCheck.funcsig)",
          "1484:         interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "1486:     if (!jsiIntData.isInit) {",
          "1487:         jsiIntData.isInit = 1;",
          "1488:         jsi_InitValue(interp, 0);",
          "",
          "[Removed Lines]",
          "1485:     interp->maxArrayList = MAX_ARRAY_LIST;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:         if (!cp || !isdigit(*cp))",
          "77:             return JSI_OK;",
          "78:         n = (int)strtol(cp, &ep, 0);",
          "80:             return JSI_OK;",
          "81:         hPtr->f.bits.isarrlist = 1;",
          "82:         if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
          "",
          "[Removed Lines]",
          "79:         if (n<0 || n >= interp->maxArrayList)",
          "",
          "[Added Lines]",
          "79:         if (n<0 || (uint)n >= interp->maxArrayList)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415: int Jsi_ObjArraySizer(Jsi_Interp *interp, Jsi_Obj *obj, uint len)",
          "416: {",
          "418:     assert(obj->isarrlist);",
          "419:     if (mod>1)",
          "420:         nsiz = nsiz + ((mod-1) - (nsiz + mod - 1)%mod);",
          "423:         return 0;",
          "424:     }",
          "425:     if (len >= obj->arrMaxSize) {",
          "",
          "[Removed Lines]",
          "417:     int nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
          "421:     if (nsiz > MAX_ARRAY_LIST) {",
          "422:         Jsi_LogError(\"array size too large\");",
          "",
          "[Added Lines]",
          "417:     uint nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
          "421:     if (len >= interp->maxArrayList || nsiz > interp->maxArrayList) {",
          "422:         Jsi_LogError(\"array size too big: %u >= %u\", len, interp->maxArrayList);",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1036:     }",
          "1040:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
          "1041:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
          "1042:     }",
          "",
          "[Removed Lines]",
          "1039:     if (arrayindex >= 0 && arrayindex < MAX_ARRAY_LIST &&",
          "",
          "[Added Lines]",
          "1039:     if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1373:     Jsi_Obj *obj = target->d.obj;",
          "1375:     if (obj->isarrlist) {",
          "1377:             Jsi_ObjArraySet(interp, obj, val, key);",
          "1378:             return JSI_OK;",
          "1379:         }",
          "",
          "[Removed Lines]",
          "1376:         if (key >= 0 && key < interp->maxArrayList) {",
          "",
          "[Added Lines]",
          "1376:         if (key >= 0 && (uint)key < interp->maxArrayList) {",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "633: <tr><td>lockTimeout</td><td><i>INT</i></td><td>Thread time-out for mutex lock acquires (milliseconds).</td><td><i></i></td></tr>",
          "634: <tr><td>logOpts</td><td><i><a href='#logOptsOptions'>options</a></i></td><td>Options for log output to add file/line/time.</td><td><i></i></td></tr>",
          "635: <tr><td>maxDepth</td><td><i>INT</i></td><td>Depth limit of recursive function calls (1000).</td><td><i></i></td></tr>",
          "637: <tr><td>maxIncDepth</td><td><i>INT</i></td><td>Maximum allowed source/require nesting depth (50).</td><td><i></i></td></tr>",
          "638: <tr><td>maxInterpDepth</td><td><i>INT</i></td><td>Maximum nested subinterp create depth (10).</td><td><i></i></td></tr>",
          "639: <tr><td>maxUserObjs</td><td><i>INT</i></td><td>Maximum number of 'new' object calls, eg. File, RegExp, etc.</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "636: <tr><td>maxArrayList</td><td><i>INT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "636: <tr><td>maxArrayList</td><td><i>UINT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "569037fbaee3fd29513bb9032a2594b8d007ddb5",
      "candidate_info": {
        "commit_hash": "569037fbaee3fd29513bb9032a2594b8d007ddb5",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/569037fbaee3fd29513bb9032a2594b8d007ddb5",
        "files": [
          "Makefile",
          "README.md",
          "c-demos/stubs/Makefile",
          "lib/Websrv.jsi",
          "lib/web/md/Builds.md",
          "lib/web/md/Misc.md",
          "lib/web/md/Reference.md",
          "lib/web/md/Using.md",
          "src/jsi.h",
          "src/jsiEval.c",
          "src/jsiFileCmds.c",
          "src/jsiFunc.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.2.1\": fixes and doc updates\n\nFossilOrigin-Name: 0871690a1be24808a31371f25ceb4afc9714fddd13d40f46dd9b20006b54cd4e",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     };",
          "18:     var options = { // Run a standalone web server, opening browser to serve out url.",
          "19:         anchor      :'',        // Anchor after url.",
          "20:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "21:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "23:         ignoreExit  :false,     // Ignore exit request.",
          "24:         initArg     :[],        // List of app modules to run.",
          "25:         isFile      :false,     // Url is a file, so throw if not exists.",
          "26:         local       :true,      // Accept only local connections.",
          "28:         mode        :'',        // Mode string: menu, admin",
          "29:         noCheck     :false,     // Disable function type-checking for .jsi files in browser.",
          "30:         noGui       :false,     // Disable starting local browser.",
          "",
          "[Removed Lines]",
          "22:         browser     :'',        // The browser to exec, eg. \"chrome-browser\"",
          "27:         maxPort     :1000,      // Max to add to above port.",
          "",
          "[Added Lines]",
          "20:         browser     :'',        // The browser to exec, eg. \"chrome-browser\"",
          "23:         docs        :'',        // Display markdown docs from this directory.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:         onRecv      :null,      // Callback command to handle websocket msgs.",
          "34:         pageStr     :'',        // String to serve out as url.",
          "35:         port        :0,         // Start search for port.",
          "36:         query       :'',        // Query to append to url.",
          "37:         rootdir     :null,      // Base directory.",
          "38:         server      :false,     // Server mode: same as noGui=true and closeTimout=0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:         portMax     :1000,      // Max times to increment-retry port if busy.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:         }",
          "219:         var i;",
          "221:             var err = null;",
          "222:             try {",
          "223:                 self.ws = new WebSocket(self.wsopts);",
          "",
          "[Removed Lines]",
          "220:         for (i=0; i<self.maxPort; i++) {",
          "",
          "[Added Lines]",
          "221:         for (i=0; i<self.portMax; i++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "232:             self.wsopts.port++;",
          "233:             LogTrace(\"ee:\", err);",
          "234:         }",
          "236:             console.log(\"Failed to get port\");",
          "237:             return false;",
          "238:         }",
          "",
          "[Removed Lines]",
          "235:         if (i>=self.maxPort) {",
          "",
          "[Added Lines]",
          "236:         if (i>=self.portMax) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "410:             }",
          "411:             self.url = urlarg;",
          "412:         }",
          "415:             self.mnt = Jsi_Archive([self.zip], {noRun:true, version:self.zipVer});",
          "416:             if (!self.rootdir)",
          "417:                 self.rootdir = self.mnt;",
          "",
          "[Removed Lines]",
          "414:         if (self.zip) {",
          "",
          "[Added Lines]",
          "414:         if (self.docs) {",
          "415:             if (self.rootdir || self.zip)",
          "416:                 throw('can not use both rootdir/zip with docs');",
          "417:             self.rootdir = '/zvfs/lib/web';",
          "418:             self.url = 'Docs/Docs.html';",
          "419:             if (self.timeout != options.timeout)",
          "420:                 self.timeout = 0;",
          "423:         } else if (self.zip) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "419:                 self.rootdir = self.mnt + '/' + self.rootdir;",
          "420:             if (!self.url)",
          "421:                 self.url = getUrlInDir(self.mnt);",
          "424:             if (!self.url.length)",
          "425:                 self.rootdir = Info.scriptDir();",
          "426:             else",
          "",
          "[Removed Lines]",
          "422:         }",
          "423:         else if (!self.rootdir) {",
          "",
          "[Added Lines]",
          "432:         } else if (!self.rootdir) {",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   2",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 0",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 1",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1912:                 break;",
          "1913:             }",
          "1914:             case OP_SCATCH: {",
          "1915:                 if (trylist == NULL || trylist->type != jsi_TL_TRY)",
          "1916:                     Jsi_LogBug(\"Unexpected SCATCH opcode??\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1915:                 interp->curIpLastError = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1933:                         Jsi_Value *ple = ps->last_exception;",
          "1934:                         Jsi_ValueCopy(interp, excpt, ple);",
          "1935:                         Jsi_ValueReset(interp, &ps->last_exception);",
          "1937:                         Jsi_ValueMakeStringDup(interp, &excpt, interp->errMsgBuf);",
          "1938:                         interp->errMsgBuf[0] = 0;",
          "1939:                     }",
          "",
          "[Removed Lines]",
          "1936:                     } else if (interp->errMsgBuf[0]) {",
          "",
          "[Added Lines]",
          "1937:                     } else {",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1157:         Jsi_DecrRefCount(interp, rpPath);",
          "1158:     if (namelist) {",
          "1159:         while (--n >= 0)",
          "1162:     }",
          "1163:     return rc;",
          "1164: }",
          "",
          "[Removed Lines]",
          "1160:             Jsi_Free(namelist[n]);",
          "1161:         Jsi_Free(namelist);",
          "",
          "[Added Lines]",
          "1160:             free(namelist[n]);",
          "1161:         free(namelist);",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:     Jsi_RC rc = JSI_OK;",
          "203:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
          "204:     idxBuf[0] = 0;",
          "205:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&(JSI_TT_UNDEFINED|JSI_TT_ANY))) {",
          "206:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
          "207:         jsi_TypeMismatch(interp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:     if (func && func->cmdSpec && func->cmdSpec->maxArgs==-1 && index>=func->cmdSpec->minArgs)",
          "206:         return JSI_OK;",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:     bool isBinary, isFinal;",
          "118: } jsi_wsStatData;",
          "121:     uint sig;",
          "122:     Jsi_Interp *interp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: static const char *wsIndexTypeStrs[] = { \"auto\", \"html\", \"json\", \"jsonp\", \"disabled\", NULL };",
          "122: typedef enum { ws_IndexAuto, ws_IndexHtml, ws_IndexJson, ws_IndexJsonp, ws_IndexDisabled } ws_IndexTypeE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     bool client, noUpdate, noWebsock, noWarn, ssl, local, extHandlers, handlersPkg, inUpdate, noCompress, noConfig, echo;",
          "129:     Jsi_Value* version;",
          "130:     int idx;",
          "131:     int port;",
          "132:     uint modifySecs;",
          "133:     int maxUpload;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     ws_IndexTypeE dirIndex;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "314:     JSI_OPT(STRKEY, jsi_wsCmdObj, clientHost, .help=\"Override host name for client\"),",
          "315:     JSI_OPT(STRKEY, jsi_wsCmdObj, clientOrigin,.help=\"Override client origin (origin)\"),",
          "316:     JSI_OPT(INT,    jsi_wsCmdObj, debug,      .help=\"Set debug level. Setting this to 512 will turn on max liblws log levels\"),",
          "317:     JSI_OPT(BOOL,   jsi_wsCmdObj, echo,       .help=\"LogInfo outputs all websock Send/Recv messages\"),",
          "318:     JSI_OPT(STRKEY, jsi_wsCmdObj, formParams, .help=\"Comma seperated list of upload form param names ('text,send,file,upload')\", jsi_IIRO),",
          "319:     JSI_OPT(BOOL,   jsi_wsCmdObj, extHandlers,.help=\"Setup builtin extension-handlers, ie: .htmli, .cssi, .jsi, .mdi\", jsi_IIOF),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:     JSI_OPT(CUSTOM, jsi_wsCmdObj, dirIndex,   .help=\"Enable listing directories\", .flags=0, .custom=Jsi_Opt_SwitchEnum, .data=(void*)wsIndexTypeStrs),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "347:     JSI_OPT(FUNC,   jsi_wsCmdObj, onUnknown,  .help=\"Function to call to server out content when no file exists\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, query:array\"),",
          "348:     JSI_OPT(FUNC,   jsi_wsCmdObj, onUpload,   .help=\"Function to call handle http-post\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, filename:string, data:string, startpos:number, complete:boolean\"),",
          "349:     JSI_OPT(FUNC,   jsi_wsCmdObj, onRecv,     .help=\"Function to call when websock data recieved\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, data:string\"),",
          "351:     JSI_OPT(INT,    jsi_wsCmdObj, port,       .help=\"Port for server to listen on (8080)\", jsi_IIOF),",
          "352:     JSI_OPT(STRING, jsi_wsCmdObj, post,       .help=\"Post string to serve\", jsi_IIOF),",
          "353:     JSI_OPT(STRKEY, jsi_wsCmdObj, protocol,   .help=\"Name of protocol (ws/wss)\"),",
          "",
          "[Removed Lines]",
          "350:     JSI_OPT(OBJ,    jsi_wsCmdObj, pathAliases,.help=\"Path alias lookups\", jsi_IIOF),",
          "",
          "[Added Lines]",
          "357:     JSI_OPT(OBJ,    jsi_wsCmdObj, pathAliases,.help=\"Path alias object: /jsi builtin\", jsi_IIOF),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "563:     return (rc>=0?1:0);",
          "564: }",
          "566: static const char*",
          "567: jsi_wsHeader(jsi_wsPss *pss, const char *name, int *lenPtr)",
          "568: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574: static int jsi_wsServeDir(jsi_wsPss *pss, struct lws *wsi, Jsi_Value *fname, const char* fn, const char *mime)",
          "575: {",
          "576:     jsi_wsCmdObj *cmdPtr = pss->cmdPtr;",
          "577:     Jsi_Interp *interp = cmdPtr->interp;",
          "578:     bool jsauto = cmdPtr->dirIndex==ws_IndexAuto;",
          "579:     const char *callback = NULL;",
          "580:     int n, i, cnt = 0;",
          "581:     Jsi_RC rc = JSI_OK;",
          "582:     struct dirent **namelist = NULL;",
          "583:     if (cmdPtr->dirIndex == ws_IndexDisabled || (n=Jsi_Scandir(interp, fname, &namelist, 0, 0)) < 0) {",
          "584:         if (cmdPtr->noWarn==0)",
          "585:             fprintf(stderr, \"can not serve directory: %s\\n\", fn);",
          "586:         return jsi_wsServeString(pss, wsi, \"<b style='color:red'>ERROR: can not serve directory!</b>\", 404, NULL, NULL);",
          "587:     }",
          "588:     bool jsonp = cmdPtr->dirIndex==ws_IndexJsonp, json=(jsonp||cmdPtr->dirIndex==ws_IndexJson);",
          "589:     if (jsonp || jsauto) {",
          "590:         Jsi_Value *val;",
          "591:         if (pss->queryObj && ((val = Jsi_ValueObjLookup(interp, pss->queryObj, \"callback\", 0))))",
          "592:             callback = Jsi_ValueToString(interp, val, NULL);",
          "593:         if (!callback)",
          "594:             jsonp = 0;",
          "595:         else if (!Jsi_Strcmp(callback,\"null\")) {",
          "596:             if (jsauto)",
          "597:                 json = 1;",
          "598:             else",
          "599:                 json = jsonp = 0;",
          "600:         } else if (jsauto)",
          "601:             json = jsonp = 1;",
          "602:     }",
          "603:     const char *fnb = Jsi_ValueToString(interp, fname, NULL);",
          "604:     Jsi_DString dStr = {}, tStr = {};",
          "605:     int fnlen = Jsi_Strlen(fn);",
          "606:     bool isroot = (fn[0]=='/'&&!fn[1]);",
          "607:     const char fne = (fnlen>=1?fn[fnlen-1]:0), *fns = (fne=='/' || isroot?\"\":\"/\");",
          "608:     if (jsonp)",
          "609:         Jsi_DSAppend(&dStr, \"/* callback */\\n\", callback, \"([\", NULL);",
          "610:     else if (json)",
          "611:         Jsi_DSAppend(&dStr, \"[\", NULL);",
          "612:     else {",
          "613:         Jsi_DSPrintf(&dStr, \"<html>\\n<head><title>Index of %s%s</title></head>\\n<body bgcolor=\\\"white\\\">\"",
          "614:             \"<h1>Index of %s%s</h1><hr><pre>%s\", fn, fns, fn, fns,",
          "615:                 (isroot?\"\":\"<a href=\\\"../\\\">../</a>\\n\"));",
          "616:     }",
          "618:     for (i=0; i<n && rc == JSI_OK; i++)",
          "619:     {",
          "620:         int ftyp;",
          "621:         const char *z = namelist[i]->d_name;",
          "622:         if (*z == '.') {",
          "623:             if (!(cmdPtr->flags&JSI_FILE_TYPE_HIDDEN)) // TODO: own flag",
          "624:                 continue;",
          "625:             else if ((z[1] == 0 || (z[1] == '.' && z[2] == 0)))",
          "626:                 continue;",
          "627:         }",
          "628: #ifdef __WIN32",
          "630:         ftyp = (namelist[i]->d_ino? DT_DIR : DT_REG);",
          "631: #else",
          "632:         ftyp = namelist[i]->d_type;",
          "633: #endif",
          "634:         uint sz = 0;",
          "635:         char pbuf[PATH_MAX];",
          "636:         snprintf(pbuf, sizeof(pbuf), \"%s%s%s\", fnb, (fne!='/' && fnb[0]?\"/\":\"\"),  z);",
          "637:         Jsi_StatBuf stat = {};",
          "638:         Jsi_Value *vpath = Jsi_ValueNewStringConst(interp, pbuf, -1);",
          "639:         Jsi_IncrRefCount(interp, vpath);",
          "640:         int sc = Jsi_Stat(interp, vpath, &stat);",
          "641:         Jsi_DecrRefCount(interp, vpath);",
          "642:         if (!sc) sz = stat.st_size;",
          "643:         Jsi_DSSetLength(&tStr, 0);",
          "644:         Jsi_DatetimeFormat(interp, stat.st_mtime, \"%a, %d %b %Y %T GMT\", 1, &tStr);",
          "645:         const char *t = (ftyp == DT_DIR ? \"/\" : \"\");",
          "646:         int lz = Jsi_Strlen(z), ln = 50-lz-(t[0]?1:0), ln2 = 30 ;",
          "648:         if (json)",
          "649:             Jsi_DSPrintf(&dStr, \"%s\\n{ \\\"name\\\":\\\"%s\\\", \\\"type\\\":\\\"%s\\\", \\\"mtime\\\":\\\"%s\\\", \\\"size\\\":%d }\",",
          "650:                 (cnt?\",\":\"\"), z, (t[0]?\"directory\":\"file\"), Jsi_DSValue(&tStr), (uint)sz);",
          "651:         else",
          "652:             Jsi_DSPrintf(&dStr, \"<a href=\\\"%s/%s%s\\\">%s%s</a>%*s %*u\\n\",",
          "653:                 (isroot?\"\":fn), z, t, z, t, ln, Jsi_DSValue(&tStr), ln2, (uint)sz);",
          "654:         cnt++;",
          "655:     }",
          "656:     if (jsonp)",
          "657:         Jsi_DSAppend(&dStr, \"\\n]);\\n\", NULL);",
          "658:     else if (json)",
          "659:         Jsi_DSAppend(&dStr, \"\\n]\\n\", NULL);",
          "660:     else",
          "661:         Jsi_DSAppend(&dStr, \"</pre><hr></body></html>\", NULL);",
          "662:     if (json)",
          "663:         mime = \"application/json\";",
          "664:     int nrc = jsi_wsServeString(pss, wsi, Jsi_DSValue(&dStr), 200, NULL, mime);",
          "665:     Jsi_DSFree(&dStr);",
          "666:     Jsi_DSFree(&tStr);",
          "667:     if (namelist) {",
          "668:         while (--n >= 0)",
          "669:             free(namelist[n]);",
          "670:         free(namelist);",
          "671:     }",
          "672:     return nrc;",
          "673: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1154: }",
          "1156: static void jsi_wsPathAlias(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, const char **inPtr, Jsi_DString *dStr) {",
          "1157:     const char *ce, *cp = NULL;",
          "1158:     char *lcp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1265: static const char* jsi_wsGetJsiPath(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr) {",
          "1266:     if (!cmdPtr->jsishPathCache) {",
          "1267:         Jsi_PkgRequire(interp, \"Jsish\", 0);",
          "1268:         Jsi_PkgVersion(interp, \"Jsish\", &cmdPtr->jsishPathCache);",
          "1269:     }",
          "1270:     return cmdPtr->jsishPathCache;",
          "1271: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1175:     }",
          "1176:     if (!Jsi_Strncmp(*inPtr, \"/jsi/\", 5)) {",
          "1183:         if (cp) {",
          "1184:             Jsi_DSSetLength(dStr, 0);",
          "1185:             Jsi_DSAppend(dStr, cp, NULL);",
          "",
          "[Removed Lines]",
          "1178:         if (!(cp = cmdPtr->jsishPathCache)) {",
          "1179:             Jsi_PkgRequire(interp, \"Jsish\", 0);",
          "1180:             if (Jsi_PkgVersion(interp, \"Jsish\", &cp)>=0)",
          "1181:                 cmdPtr->jsishPathCache = cp;",
          "1182:         }",
          "",
          "[Added Lines]",
          "1295:         cp = jsi_wsGetJsiPath(interp, cmdPtr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1204:     if (!nstr)",
          "1205:         return Jsi_LogErrorExt(\"arg 1: expected string\");",
          "1206:     Jsi_Value *v, *a = cmdPtr->pathAliases;",
          "1223:     }",
          "1225:     return JSI_OK;",
          "1226: }",
          "",
          "[Removed Lines]",
          "1207:     if (!a|| !Jsi_ValueIsObjType(interp, a, JSI_OT_OBJECT)) return JSI_OK;",
          "1208:     Jsi_IterObj *io = Jsi_IterObjNew(interp, NULL);",
          "1209:     Jsi_IterGetKeys(interp, cmdPtr->pathAliases, io, 0);",
          "1210:     uint i;",
          "1211:     for (i=0; i<io->count; i++) {",
          "1212:         kstr = io->keys[i];",
          "1213:         v = Jsi_ValueObjLookup(interp, a, kstr, 1);",
          "1214:         if (!v) continue;",
          "1215:         vstr = Jsi_ValueToString(interp, v, &vlen);",
          "1216:         if (!vstr) continue;",
          "1217:         if (nlen<=vlen) continue;",
          "1218:         if (Jsi_Strncmp(vstr, nstr, vlen)) continue;",
          "1219:         Jsi_DString dStr = {};",
          "1220:         Jsi_DSAppend(&dStr, \"/\", kstr, nstr+vlen, NULL);",
          "1221:         Jsi_ValueFromDS(interp, &dStr, ret);",
          "1222:         break;",
          "1224:     Jsi_IterObjFree(io);",
          "",
          "[Added Lines]",
          "1320:     uint i=0, cnt=0;",
          "1321:     if (a && Jsi_ValueIsObjType(interp, a, JSI_OT_OBJECT)) {",
          "1322:         Jsi_IterObj *io = Jsi_IterObjNew(interp, NULL);",
          "1323:         Jsi_IterGetKeys(interp, cmdPtr->pathAliases, io, 0);",
          "1324:         uint i, cnt = io->count;",
          "1325:         for (i=0; i<cnt; i++) {",
          "1326:             kstr = io->keys[i];",
          "1327:             v = Jsi_ValueObjLookup(interp, a, kstr, 1);",
          "1328:             if (!v) continue;",
          "1329:             vstr = Jsi_ValueToString(interp, v, &vlen);",
          "1330:             if (!vstr) continue;",
          "1331:             if (nlen<=vlen) continue;",
          "1332:             if (Jsi_Strncmp(vstr, nstr, vlen)) continue;",
          "1333:             Jsi_DString dStr = {};",
          "1334:             Jsi_DSAppend(&dStr, \"/\", kstr, nstr+vlen, NULL);",
          "1335:             Jsi_ValueFromDS(interp, &dStr, ret);",
          "1336:             break;",
          "1337:         }",
          "1338:         Jsi_IterObjFree(io);",
          "1340:     const char *cp;",
          "1341:     if (i>=cnt && !Jsi_Strcmp(\"zvfs\", nstr) && ((cp = jsi_wsGetJsiPath(interp, cmdPtr))))",
          "1342:         Jsi_ValueMakeStringDup(interp, ret, cp);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1652:         Jsi_DecrRefCount(interp, fname);",
          "1653:         goto done;",
          "1654:     }",
          "1657:     if (S_ISDIR(jsb.st_mode)) {",
          "1661:         Jsi_DecrRefCount(interp, fname);",
          "1662:         goto done;",
          "1663:     }",
          "1666:     n = 0;",
          "",
          "[Removed Lines]",
          "1655:     if (!ext || isSSI)",
          "1656:         goto serve;",
          "1658:         if (cmdPtr->noWarn==0)",
          "1659:             fprintf(stderr, \"can not serve directory: %s\\n\", buf);",
          "1660:         rc = jsi_wsServeString(pss, wsi, \"<b style='color:red'>ERROR: can not serve directory!</b>\", 404, NULL, NULL);",
          "1665: serve:",
          "",
          "[Added Lines]",
          "1775: serve:",
          "1777:         rc = jsi_wsServeDir(pss, wsi, fname, inPtr, mime);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2023:             fprintf(stderr, \"FILTER CONNECTION: %s\\n\", inPtr);",
          "2024:         pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 1);",
          "2025:         Jsi_DSSet(&pss->url, inPtr);",
          "2026:         jsi_wsgetUriArgValue(interp, wsi, &pss->query, &pss->queryObj);",
          "2028:         if (cmdPtr->instCtx == context && (cmdPtr->clientName[0] || cmdPtr->clientIP[0])) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2142:         if (pss->query)",
          "2143:             Jsi_DecrRefCount(interp, pss->query);",
          "2144:         pss->query = NULL;",
          "2145:         if (pss->queryObj)",
          "2146:             Jsi_DecrRefCount(interp, pss->queryObj);",
          "2147:         pss->queryObj = NULL;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3086:     { \"query\",      WebSocketQueryCmd,    1,  2, \"id:number, name:string=void\",.help=\"Get one or all query values for connect id\", .retType=(uint)JSI_TT_STRING|JSI_TT_OBJECT|JSI_TT_VOID },",
          "3087:     { \"send\",       WebSocketSendCmd,     2,  2, \"id:number, data:any\", .help=\"Send a websocket message to id\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_wssend },",
          "3088:     { \"status\",     WebSocketStatusCmd,   0,  0, \"\", .help=\"Return liblws server status\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_VOID},",
          "3090:     { \"update\",     WebSocketUpdateCmd,   0,  0, \"\", .help=\"Service events for just this websocket\", .retType=(uint)JSI_TT_VOID },",
          "3091:     { \"version\",    WebSocketVersionCmd,  0,  0, \"\", .help=\"Runtime library version string\", .retType=(uint)JSI_TT_STRING },",
          "3092:     { NULL, 0,0,0,0, .help=\"Commands for managing WebSocket server/client connections\"  }",
          "",
          "[Removed Lines]",
          "3089:     { \"unalias\",    WebSocketUnaliasCmd,  1,  1, \"path:string\", .help=\"Return alias reverse lookup\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID},",
          "",
          "[Added Lines]",
          "3211:     { \"unalias\",    WebSocketUnaliasCmd,  1,  1, \"path:string\", .help=\"Lookup name-key with the given path in pathAlias object\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3274:         if (NULL == lws_client_connect_via_info(&lci))",
          "3275:         {",
          "3276:             Jsi_LogErrorExt(\"websock connect failed\");",
          "3279:         }",
          "3280:     } else if (cmdPtr->port == 0) {",
          "",
          "[Removed Lines]",
          "3277:             jsi_wswebsocketObjFree(interp, cmdPtr);",
          "3278:             return JSI_ERROR;",
          "",
          "[Added Lines]",
          "3399:             goto fail;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "2b62d3be72c3b11ec5cc91cdcfb00973107f9807",
      "candidate_info": {
        "commit_hash": "2b62d3be72c3b11ec5cc91cdcfb00973107f9807",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/2b62d3be72c3b11ec5cc91cdcfb00973107f9807",
        "files": [
          "lib/DebugUI/html/main.htmli",
          "lib/SqliteUI/html/main.htmli",
          "lib/web/jsi.js",
          "src/jsi.h",
          "src/jsiFunc.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.38\": jsi.js fix array warning\n\nFossilOrigin-Name: caad90672ef0d161fccc72177578f9e6d5af37bee5e7133ef4470788fe5d2ad0",
        "before_after_code_files": [
          "lib/DebugUI/html/main.htmli||lib/DebugUI/html/main.htmli",
          "lib/SqliteUI/html/main.htmli||lib/SqliteUI/html/main.htmli",
          "lib/web/jsi.js||lib/web/jsi.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiFunc.c||src/jsiFunc.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/DebugUI/html/main.htmli||lib/DebugUI/html/main.htmli": [
          "File: lib/DebugUI/html/main.htmli -> lib/DebugUI/html/main.htmli",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: ?>",
          "14:   </head>",
          "15:   <body id=\"body\" onload=\"onload()\" style=\"display: flex; height: 97%; flex-direction: column; margin:3px\">",
          "16:     <div>",
          "17:       <button class=\"topmenu panel\" id=\"mainbut\" class=\"mainbuts\" onclick='TogglePanel(\"uibutton\",this)' title=\"Click to toggle menu visibility\">Jsi Debug-</button>",
          "18:       <div id=\"uibutton\" style=\"display: none;\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: <noscript>",
          "17: <h1>SORRY: THIS SITE REQUIRES JAVASCRIPT!!!</h1>",
          "18: </noscript>",
          "",
          "---------------"
        ],
        "lib/SqliteUI/html/main.htmli||lib/SqliteUI/html/main.htmli": [
          "File: lib/SqliteUI/html/main.htmli -> lib/SqliteUI/html/main.htmli",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: </head>",
          "18: <body id=body_main'>",
          "21: <div id=frame_main>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: <noscript>",
          "20: <h1>SORRY: THIS SITE REQUIRES JAVASCRIPT!!!</h1>",
          "21: </noscript>",
          "",
          "---------------"
        ],
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:                     case \"string\":  if (vtyp === 'string') return; break;",
          "306:                     case \"boolean\": if (vtyp === 'boolean') return; break;",
          "307:                     case \"function\":if (vtyp === 'function') return; break;",
          "309:                     case \"regexp\":  if (vtyp === 'object' && val && val.constructor === RegExp) return; break;",
          "310:                     case \"object\":  if (vtyp === 'object' && val && val.constructor !== Array) return; break;",
          "311:                     case \"any\":     return; break;",
          "",
          "[Removed Lines]",
          "308:                     case \"array\":   if (vtyp === 'object' && val && val.constructor === Array) return; break;",
          "",
          "[Added Lines]",
          "308:                     case \"array\":   if (vtyp === 'array') return; break;",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 37",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 38",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "807:         goto done;",
          "808:     }",
          "809:     if ((cp=Jsi_Strchr(argStr, '='))) {",
          "811:         goto done;",
          "812:     }",
          "813:     if (Jsi_Strstr(argStr, \"...\")) {",
          "815:         goto done;",
          "816:     }",
          "817:     if (argStr[0]) {",
          "",
          "[Removed Lines]",
          "810:         Jsi_LogWarn(\"may not have default value in option, expected: %s\", argStr);",
          "814:         Jsi_LogWarn(\"may not have ... in args, expected: %s\", argStr);",
          "",
          "[Added Lines]",
          "810:         Jsi_LogWarn(\"may not have default value in option, expected: (%s)\", argStr);",
          "814:         Jsi_LogWarn(\"may not have ... in args, expected: (%s)\", argStr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "821:     }",
          "822:     if (!f->argnames) {",
          "823:         if (argStr[0])",
          "825:         else",
          "826:             rc = 1;",
          "827:         goto done;",
          "828:     } else {",
          "829:         if (f->argnames->varargs) { // TODO: could allow varargs...",
          "830:             if (argc < f->argnames->argCnt) {",
          "832:                 goto done;",
          "833:             }",
          "834:         }",
          "835:         else if (f->argnames->argCnt != argc) {",
          "836:             if (argc)",
          "838:             else",
          "839:                 Jsi_LogWarn(\"function should have no arguments\");",
          "840:             goto done;",
          "",
          "[Removed Lines]",
          "824:             Jsi_LogWarn(\"function has no args, expected: %s\", argStr);",
          "831:                 Jsi_LogWarn(\"vararg argument mismatch, expected: %s\", argStr);",
          "837:                 Jsi_LogWarn(\"argument mismatch, expected: %s\", argStr);",
          "",
          "[Added Lines]",
          "824:             Jsi_LogWarn(\"function has no args, expected: (%s)\", argStr);",
          "831:                 Jsi_LogWarn(\"vararg argument mismatch, expected: (%s)\", argStr);",
          "837:                 Jsi_LogWarn(\"argument mismatch, expected: (%s)\", argStr);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "48a6f1ac3aeb66f7fd334e450b1d337977c4b855",
      "candidate_info": {
        "commit_hash": "48a6f1ac3aeb66f7fd334e450b1d337977c4b855",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/48a6f1ac3aeb66f7fd334e450b1d337977c4b855",
        "files": [
          "README.md",
          "src/jsi.h",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiMySql.c",
          "src/jsiSqlite.c",
          "src/jsiStubs.h",
          "src/jsiUtils.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.45\": cleanup\n\nFossilOrigin-Name: aebfb1551c6d83baa6c64be7c1bf0bb1142cc895869b50a77f2b75335370d2f3",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 44",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 45",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1252: #ifndef JSI_EXT_OPTS_OMIT",
          "1261: #else",
          "1262: #define Jsi_LogBugExt(fmt,...)",
          "1263: #define Jsi_LogErrorExt(fmt,...)",
          "",
          "[Removed Lines]",
          "1243: #define Jsi_LogBug(fmt,...)   Jsi_LogMsgExt(interp, NULL, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1244: #define Jsi_LogError(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1245: #define Jsi_LogParse(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1246: #define Jsi_LogWarn(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1247: #define Jsi_LogInfo(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1248: #define Jsi_LogDebug(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1249: #define Jsi_LogTrace(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1250: #define Jsi_LogTest(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1253: #define Jsi_LogBugExt(fmt,...)   Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1254: #define Jsi_LogErrorExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1255: #define Jsi_LogParseExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1256: #define Jsi_LogWarnExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1257: #define Jsi_LogInfoExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1258: #define Jsi_LogDebugExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1259: #define Jsi_LogTraceExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1260: #define Jsi_LogTestExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "",
          "[Added Lines]",
          "1243: #define Jsi_LogBug(fmt,...)   Jsi_LogMsg(interp, NULL, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1244: #define Jsi_LogError(fmt,...) Jsi_LogMsg(interp, NULL, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1245: #define Jsi_LogParse(fmt,...) Jsi_LogMsg(interp, NULL, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1246: #define Jsi_LogWarn(fmt,...)  Jsi_LogMsg(interp, NULL, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1247: #define Jsi_LogInfo(fmt,...)  Jsi_LogMsg(interp, NULL, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1248: #define Jsi_LogDebug(fmt,...) Jsi_LogMsg(interp, NULL, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1249: #define Jsi_LogTrace(fmt,...) Jsi_LogMsg(interp, NULL, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1250: #define Jsi_LogTest(fmt,...)  Jsi_LogMsg(interp, NULL, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1253: #define Jsi_LogBugExt(fmt,...)   Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1254: #define Jsi_LogErrorExt(fmt,...) Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1255: #define Jsi_LogParseExt(fmt,...) Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1256: #define Jsi_LogWarnExt(fmt,...)  Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1257: #define Jsi_LogInfoExt(fmt,...)  Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1258: #define Jsi_LogDebugExt(fmt,...) Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1259: #define Jsi_LogTraceExt(fmt,...) Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1260: #define Jsi_LogTestExt(fmt,...)  Jsi_LogMsg(interp, JSI_EXT_OPTS, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1269: #define Jsi_LogTestExt(fmt,...)",
          "1270: #endif",
          "1275: typedef struct {",
          "",
          "[Removed Lines]",
          "1272: JSI_EXTERN Jsi_RC Jsi_LogMsgExt(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint level, const char *format,...)  /*STUB = 348*/ __attribute__((format (printf,4, 5)));",
          "",
          "[Added Lines]",
          "1272: JSI_EXTERN Jsi_RC Jsi_LogMsg(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint level, const char *format,...)  /*STUB = 348*/ __attribute__((format (printf,4, 5)));",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "935: {",
          "936:     Jsi_RC rc = JSI_OK;",
          "937:     uint flags = (uintptr_t)ip->data, right_val = flags&1; // isident=flags&2;",
          "941:     jsiVarDeref(interp,2);",
          "1004:             goto done;",
          "1005:         }",
          "1008:         int bLen, cLen;",
          "1009:         char bbuf[10], *cp = Jsi_ValueString(interp, src, &bLen);",
          "1010:         int n = (int)idx->d.num;",
          "",
          "[Removed Lines]",
          "938:     Jsi_String *str = NULL;",
          "939:     Jsi_Obj *obj = NULL;",
          "940:     int bsc, arrayindex = -1;",
          "942:     if (idx->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(idx->d.num) && idx->d.num >= 0)",
          "943:         arrayindex = (int)idx->d.num;",
          "945:     switch (src->vt) {",
          "946:         case JSI_VT_NULL:",
          "947:             rc = Jsi_LogError(\"invalid null subscript\");",
          "948:             break;",
          "949:         case JSI_VT_UNDEF:",
          "950:             rc = Jsi_LogError(\"invalid undefined subscript\");",
          "951:             break;",
          "954:         case JSI_VT_STRING:",
          "955:             str = &src->d.s;",
          "956:             break;",
          "957:         case JSI_VT_OBJECT:",
          "958:             obj = src->d.obj;",
          "959:             switch (obj->ot) {",
          "960:                 case JSI_OT_STRING:",
          "961:                     str = &obj->d.s;",
          "962:                     break;",
          "963:                 case JSI_OT_OBJECT:",
          "964:                     if (obj->freeze && obj->freezeReadCheck) {",
          "965:                         Jsi_Value *v;",
          "966:                         char keyBuf[100], *keyStr = keyBuf;",
          "967:                         if (arrayindex>=0)",
          "968:                             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "969:                         else",
          "970:                             keyStr = Jsi_ValueString(interp, idx, NULL);",
          "971:                         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, src, keyStr, 0))) {",
          "972:                             rc = Jsi_LogError(\"frozen read undefined key: %s\", keyStr);",
          "973:                         }",
          "974:                     }",
          "975:                     break;",
          "976:                 default:",
          "977:                     break;",
          "978:             }",
          "979:             break;",
          "980:         default:",
          "981:             break;",
          "982:     }",
          "983:     if (rc != JSI_OK)",
          "984:         goto done;",
          "987:         const char *keyStr = Jsi_ValueString(interp, idx, NULL);",
          "988:         Jsi_Value *vp = Jsi_ValueObjLookup(interp, src, keyStr, 0);",
          "989:         if (vp) {",
          "992:             if (right_val || vp->f.bits.readonly) {",
          "993:                 if (vp->vt == JSI_VT_OBJECT || vp->vt == JSI_VT_STRING)  // TODO:*** Undo using ValueCopy. ***",
          "994:                     Jsi_ValueMove(interp, src, vp);",
          "995:                 else",
          "996:                     Jsi_ValueCopy(interp, src, vp);",
          "997:             } else {",
          "998:                 Jsi_Value res = VALINIT;",
          "999:                 res.vt = JSI_VT_VARIABLE;",
          "1000:                 res.d.lval = vp;",
          "1001:                 Jsi_ValueCopy(interp, src, &res);",
          "1002:             }",
          "1007:     if (str && Jsi_ValueIsNumber(interp, idx)) { // eg. \"abc\"[1]",
          "",
          "[Added Lines]",
          "939:     Jsi_String *str = jsi_ValueString(src);",
          "940:     Jsi_Obj *obj = (src->vt==JSI_VT_OBJECT && src->d.obj->ot == JSI_OT_OBJECT?src->d.obj:NULL);",
          "941:     int bsc, arrayindex = (idx->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(idx->d.num) && idx->d.num >= 0) ?  (int)idx->d.num : -1;",
          "943:     if (obj && obj->freeze && obj->freezeReadCheck) {",
          "944:         Jsi_Value *v;",
          "945:         char keyBuf[100], *keyStr = keyBuf;",
          "946:         if (arrayindex>=0)",
          "947:             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "948:         else",
          "949:             keyStr = Jsi_ValueString(interp, idx, NULL);",
          "950:         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, src, keyStr, 0))) {",
          "951:             rc = Jsi_LogError(\"frozen read undefined key: %s\", keyStr);",
          "954:     }",
          "956:     if (str && Jsi_ValueIsNumber(interp, idx)) { // String index, eg. \"abc\"[1]",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     JSI_SIG_NAMEDATA",
          "260: } jsi_Sig;",
          "263: extern const char *jsi_LogCodes[], *jsi_LogCodesU[];",
          "264: extern uint jsi_GetLogFlag(Jsi_Interp *interp, uint mask, Jsi_PkgOpts* popts);",
          "",
          "[Removed Lines]",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsgExt(interp, NULL, (interp->typeCheck.strict || interp->typeCheck.error)?JSI_LOG_ERROR:JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "",
          "[Added Lines]",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsg(interp, NULL, (interp->typeCheck.strict || interp->typeCheck.error)?JSI_LOG_ERROR:JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1042: errout:",
          "1043:                  {",
          "1044:                     int ltyp = (jdb->optPtr->typeCheck==mdbTypeCheck_Error?JSI_LOG_ERROR:JSI_LOG_WARN);",
          "1046:                     if (ltyp == JSI_LOG_ERROR)",
          "1047:                         return JSI_ERROR;",
          "1048:                 }",
          "",
          "[Removed Lines]",
          "1045:                     Jsi_LogMsgExt(interp, JSI_EXT_OPTS, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "[Added Lines]",
          "1045:                     Jsi_LogMsg(interp, JSI_EXT_OPTS, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "923:                 }",
          "924:                 if (cast == 0 && match == 0) {",
          "925:                     int ltyp = (db->optPtr->typeCheck==dbTypeCheck_Error?JSI_LOG_ERROR:JSI_LOG_WARN);",
          "927:                     if (ltyp == JSI_LOG_ERROR)",
          "928:                         return JSI_ERROR;",
          "929:                 }",
          "",
          "[Removed Lines]",
          "926:                     Jsi_LogMsgExt(interp, JSI_EXT_OPTS, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "[Added Lines]",
          "926:                     Jsi_LogMsg(interp, JSI_EXT_OPTS, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"b43953bc9ba7fc791f74958478337968\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"e35b4e29ea6f2aaf56ee9eb4618c25f2\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:     Jsi_Mutex*(*_Jsi_MutexNew)(Jsi_Interp *interp, int timeout, int flags);",
          "377:     void*(*_Jsi_CurrentThread)(void);",
          "378:     void*(*_Jsi_InterpThread)(Jsi_Interp *interp);",
          "380:     Jsi_Event*(*_Jsi_EventNew)(Jsi_Interp *interp, Jsi_EventHandlerProc *callback, void* data);",
          "381:     void(*_Jsi_EventFree)(Jsi_Interp *interp, Jsi_Event* event);",
          "382:     int(*_Jsi_EventProcess)(Jsi_Interp *interp, int maxEvents);",
          "",
          "[Removed Lines]",
          "379:     Jsi_RC(*_Jsi_LogMsgExt)(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint level, const char *format,...);",
          "",
          "[Added Lines]",
          "379:     Jsi_RC(*_Jsi_LogMsg)(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint level, const char *format,...);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "805:     Jsi_MutexNew,\\",
          "806:     Jsi_CurrentThread,\\",
          "807:     Jsi_InterpThread,\\",
          "809:     Jsi_EventNew,\\",
          "810:     Jsi_EventFree,\\",
          "811:     Jsi_EventProcess,\\",
          "",
          "[Removed Lines]",
          "808:     Jsi_LogMsgExt,\\",
          "",
          "[Added Lines]",
          "808:     Jsi_LogMsg,\\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1230: #define Jsi_MutexNew(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_MutexNew(n0,n1,n2))",
          "1231: #define Jsi_CurrentThread(n0) JSISTUBCALL(jsiStubsPtr, _Jsi_CurrentThread(n0))",
          "1232: #define Jsi_InterpThread(n0) JSISTUBCALL(jsiStubsPtr, _Jsi_InterpThread(n0))",
          "1234: #define Jsi_EventNew(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_EventNew(n0,n1,n2))",
          "1235: #define Jsi_EventFree(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_EventFree(n0,n1))",
          "1236: #define Jsi_EventProcess(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_EventProcess(n0,n1))",
          "",
          "[Removed Lines]",
          "1233: #define Jsi_LogMsgExt(n0,n1,n2,n3,...) JSISTUBCALL(jsiStubsPtr, _Jsi_LogMsgExt(n0,n1,n2,n3,##__VA_ARGS__))",
          "",
          "[Added Lines]",
          "1233: #define Jsi_LogMsg(n0,n1,n2,n3,...) JSISTUBCALL(jsiStubsPtr, _Jsi_LogMsg(n0,n1,n2,n3,##__VA_ARGS__))",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: jsi_IntData jsiIntData = {};",
          "75: #ifdef JSI_LITE_ONLY",
          "77:     va_list va;",
          "78:     va_start (va, format);",
          "79:     const char *mt = (code <= JSI__LOGLAST ? jsi_LogCodes[code] : \"\");",
          "",
          "[Removed Lines]",
          "76: Jsi_RC Jsi_LogMsgExt(Jsi_Interp *interp, Jsi_PkgOpts *popts, uint code, const char *format,...) {",
          "",
          "[Added Lines]",
          "76: Jsi_RC Jsi_LogMsg(Jsi_Interp *interp, Jsi_PkgOpts *popts, uint code, const char *format,...) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128: static void (*logHook)(const char *buf, va_list va) = NULL;",
          "132:     if (!interp || Jsi_InterpGone(interp))",
          "133:         return JSI_ERROR;",
          "134:     bool isExt = 0, ftail = interp->logOpts.ftail;",
          "",
          "[Removed Lines]",
          "131: Jsi_RC Jsi_LogMsgExt(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint code, const char *format,...) {",
          "",
          "[Added Lines]",
          "131: Jsi_RC Jsi_LogMsg(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint code, const char *format,...) {",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "20ff8e2f6f66493b65f20c00c53d4f1e9f426631",
      "candidate_info": {
        "commit_hash": "20ff8e2f6f66493b65f20c00c53d4f1e9f426631",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/20ff8e2f6f66493b65f20c00c53d4f1e9f426631",
        "files": [
          "lib/Jsish.jsi",
          "lib/autoload.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiArray.c",
          "src/jsiFunc.c",
          "src/jsiMySql.c",
          "src/jsiSqlite.c",
          "src/jsiString.c",
          "src/jsiStubs.h",
          "src/jsiUtils.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.10\": Fix issues #12, #13, and #14.\n\nFossilOrigin-Name: 70747c8d1c4e7bf176bec8cfb9d3cac3e64a696e7df0b1e3712d3f6b952164c3",
        "before_after_code_files": [
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiArray.c||src/jsiArray.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiString.c||src/jsiString.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:     return 'VALUES($'+name+'('+val.keys().join('),$'+name+'(')+'))';",
          "258: }",
          "262:     var self = {};",
          "263:     var options = {",
          "264:         objOpts     :{},        // Options for objOpts",
          "265:         verbose     :false",
          "266:     };",
          "267:     parseOpts(self, options, conf);",
          "268:     var cl = {}, cols = db.query('PRAGMA table_info(\"'+table+'\")');",
          "270:         return true;",
          "271:     for (var c=0; c<cols.length; c++)",
          "272:         cl[cols[c].name] = cols[c];",
          "273:     var oo = self.objOpts;",
          "274:     oo.getSql = true;",
          "276:     s = ','+s.substr( s.indexOf('(')+1);",
          "277:     s = s.substr(0, s.length-2);",
          "278:     s +=',';",
          "",
          "[Removed Lines]",
          "261: function Jsi_SchemaUpdate(db:userobj, table:string, data:object, conf:object=void) {",
          "269:     if (!cols.length)",
          "275:     var s = db.query('CREATE TABLE '+table+' %s', {objName:'data', objOpts:oo});",
          "",
          "[Added Lines]",
          "261: function Jsi_ObjToSchema(db:userobj, table:string, data:object, conf:object=void) {",
          "264:         noCreate    :false,     // Create table, if not exists.",
          "270:     if (!cols.length) {",
          "271:         if (!self.noCreate)",
          "272:             db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data'});",
          "274:     }",
          "280:     var fs = db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data', objOpts:oo});",
          "281:     var s = fs;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:         var rec = s.substr( s.indexOf(','+i+' '));",
          "282:         if (!rec) throw('failed to find schema: '+i);",
          "283:         rec = rec.substr(1);",
          "286:         if (self.verbose)",
          "287:             LogInfo('SCHEMA:',sql);",
          "288:         db.eval(sql);",
          "289:         cl[i] = rec;",
          "290:     }",
          "302:         return true;",
          "304:     return false;",
          "305: }",
          "",
          "[Removed Lines]",
          "284:         rec = rec.substr(0, rec.indexOf(','));",
          "285:         var sql = 'ALTER TABLE '+table+' ADD COLUMN '+rec;",
          "292:     var t = '';",
          "293:     for (i in cl) {",
          "294:         t += ',';",
          "295:         if (typeof(cl[i])==='string')",
          "296:             t += cl[i];",
          "297:         else",
          "298:             t += (i+' '+cl[i].type+' DEFAULT '+cl[i].dflt_value);",
          "299:     }",
          "300:     t += ',';",
          "301:     if (s === t)",
          "303:     LogWarn('Schema mismatch (possible downgrade?) in table \"'+table+'\":\\n\"'+s+'\" !=\\n\"'+t+'\"');",
          "",
          "[Added Lines]",
          "290:         var re = rec.indexOf(',');",
          "291:         if (rec[re+1] == ' ' && ((re = rec.indexOf(')', re))>=0))",
          "292:             re = rec.indexOf(',', re);",
          "293:         rec = rec.substr(0, re);",
          "294:         var sql = 'ALTER TABLE \"'+table+'\" ADD COLUMN '+rec;",
          "295:         puts(\"RR: \",sql);",
          "303:     if (fs === t)",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: Jsi_Auto.Jsi_LogFile    =",
          "16: Jsi_Auto.Jsi_Opts       =",
          "17: Jsi_Auto.Jsi_SqlValues  =",
          "19: Jsi_Auto.Jsi_Conf       = 'source(\"'+Info.scriptDir()+'/Jsish.jsi\")';",
          "20: Jsi_Auto.Htmlpp     = 'source(\"'+Info.scriptDir()+'/Htmlpp.jsi\")';",
          "21: Jsi_Auto.Csspp      = 'source(\"'+Info.scriptDir()+'/Csspp.jsi\")';",
          "",
          "[Removed Lines]",
          "18: Jsi_Auto.Jsi_SchemaUpdate =",
          "",
          "[Added Lines]",
          "18: Jsi_Auto.Jsi_ObjToSchema =",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 10",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 11",
          "",
          "---------------"
        ],
        "src/jsiArray.c||src/jsiArray.c": [
          "File: src/jsiArray.c -> src/jsiArray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "392:     fptr = func->d.obj->d.fobj->func;",
          "393:     maa = (fptr->argnames?fptr->argnames->argCnt:0);",
          "395:         maa = 3;",
          "396:     for (i = 0; i < curlen; i++) {",
          "397:         if (!obj->arr[i]) continue;",
          "398:         vobjs[0] = obj->arr[i];",
          "400:         vobjs[2] = _this;",
          "401:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vobjs, maa, 0));",
          "402:         Jsi_IncrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "394:     if (maa>3)",
          "399:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):NULL);",
          "",
          "[Added Lines]",
          "394:     if (maa>3 || fptr->type == FC_BUILDIN)",
          "399:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):interp->NullValue);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452:     fptr = func->d.obj->d.fobj->func;",
          "453:     maa = (fptr->argnames?fptr->argnames->argCnt:0);",
          "455:         maa = 3;",
          "456:     for (i = 0; i < curlen; i++) {",
          "457:         if (!obj->arr[i]) continue;",
          "458:         vobjs[0] = obj->arr[i];",
          "460:         vobjs[2] = _this;",
          "461:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vobjs, maa, 0));",
          "462:         Jsi_IncrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "454:     if (maa>3)",
          "459:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):NULL);",
          "",
          "[Added Lines]",
          "454:     if (maa>3 || fptr->type == FC_BUILDIN)",
          "459:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):interp->NullValue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "533:     Jsi_Value *vobjs[3];",
          "534:     Jsi_Func *fptr = func->d.obj->d.fobj->func;",
          "535:     int maa = (fptr->argnames?fptr->argnames->argCnt:0);",
          "537:         maa = 3;",
          "538:     for (i = 0; i < obj->arrCnt && rc == JSI_OK; i++) {",
          "539:         if (!obj->arr[i]) continue;",
          "540:         vobjs[0] = obj->arr[i];",
          "542:         vobjs[2] = _this;",
          "543:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vobjs, maa, 0));",
          "544:         Jsi_IncrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "536:     if (maa>3)",
          "541:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):NULL);",
          "",
          "[Added Lines]",
          "536:     if (maa>3 || fptr->type == FC_BUILDIN)",
          "541:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):interp->NullValue);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "572:     Jsi_Value *vobjs[3];",
          "573:     Jsi_Func *fptr = func->d.obj->d.fobj->func;",
          "574:     int maa = (fptr->argnames?fptr->argnames->argCnt:0);",
          "576:         maa = 3;",
          "577:     for (i = 0; i < obj->arrCnt && rc == JSI_OK; i++) {",
          "578:         if (!obj->arr[i]) continue;",
          "579:         vobjs[0] = obj->arr[i];",
          "581:         vobjs[2] = _this;",
          "582:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vobjs, maa, 0));",
          "583:         Jsi_IncrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "575:     if (maa>3)",
          "580:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):NULL);",
          "",
          "[Added Lines]",
          "575:     if (maa>3 || fptr->type == FC_BUILDIN)",
          "580:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):interp->NullValue);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "626:     int n, rev = (op==2);",
          "627:     Jsi_Func *fptr = func->d.obj->d.fobj->func;",
          "628:     int maa = (fptr->argnames?fptr->argnames->argCnt:0);",
          "630:         maa = 4;",
          "632:     for (n = 0, i = (rev?obj->arrCnt-1:0); (rev?i>=0:i < (int)obj->arrCnt) && rc == JSI_OK; n++, i = (rev?i-1:i+1)) {",
          "",
          "[Removed Lines]",
          "629:     if (maa>4)",
          "",
          "[Added Lines]",
          "629:     if (maa>4 || fptr->type == FC_BUILDIN)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "639:         vobjs[0] = ini;",
          "640:         vobjs[1] = obj->arr[i];",
          "642:         vobjs[3] = _this;",
          "643:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vobjs, maa, 0));",
          "644:         Jsi_IncrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "641:         vobjs[2] = (maa>2?Jsi_ValueNewNumber(interp, i):NULL);",
          "",
          "[Added Lines]",
          "641:         vobjs[2] = (maa>2?Jsi_ValueNewNumber(interp, i):interp->NullValue);",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "764:     Jsi_Func *funcPtr = tocall->d.obj->d.fobj->func;",
          "765:     SIGASSERT(funcPtr, FUNC);",
          "768:     if (args->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, args->d.obj))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "766:     if (funcPtr->type == FC_BUILDIN) {",
          "767:         Jsi_CmdSpec *cs  = funcPtr->cmdSpec;",
          "768:         int argc = (args ? Jsi_ValueGetLength(interp, args) : 0);",
          "769:         if (cs && cs->minArgs>=0 && argc<cs->minArgs)",
          "770:             return Jsi_LogError(\"too few args: expected %d\", cs->minArgs);",
          "771:     }",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: static const char *trcModeStrs[] = {\"eval\", \"delete\", \"prepare\", \"step\", NULL}; // Bit-set packed into an int.",
          "185: static const char *objSqlModeStrs[] = { \"getSql\", \"noTypes\", \"noDefaults\", \"nullDefaults\", NULL };",
          "186: enum {mdbTMODE_EVAL=0x1, mdbTMODE_DELETE=0x2, mdbTMODE_PREPARE=0x4, mdbTMODE_STEP=0x4};",
          "190: typedef struct MySqlObj {",
          "",
          "[Removed Lines]",
          "187: enum {OBJMODE_SQLONLY=0x1, OBJMODE_NOTYPES=0x2, OBJMODE_NODEFAULTS=0x4, OBJMODE_NULLDEFAULTS=0x8};",
          "",
          "[Added Lines]",
          "187: enum {OBJMODE_SQLONLY=0x1, OBJMODE_NOTYPES=0x2, OBJMODE_NODEFAULTS=0x4, OBJMODE_NULLDEFAULTS=0x8, OBJMODE_NOCHECKS=0x8};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1624:     if (opts.objName) {",
          "1625:         if (Jsi_SqlObjBinds(interp, &eStr, opts.objName,  !(opts.objOpts&OBJMODE_NOTYPES),",
          "1627:             goto bail;",
          "1628:         zSql = Jsi_DSValue(&eStr);",
          "1629:     }",
          "",
          "[Removed Lines]",
          "1626:         !(opts.objOpts&OBJMODE_NODEFAULTS), (opts.objOpts&OBJMODE_NULLDEFAULTS)!=0) != JSI_OK)",
          "",
          "[Added Lines]",
          "1626:         !(opts.objOpts&OBJMODE_NODEFAULTS), (opts.objOpts&OBJMODE_NULLDEFAULTS)!=0,",
          "1627:         !(opts.objOpts&OBJMODE_NOCHECKS)) != JSI_OK)",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173: static const char *mtxStrs[] = { \"default\", \"none\", \"full\", NULL };",
          "174: static const char *trcModeStrs[] = {\"eval\", \"delete\", \"prepare\", \"step\", NULL}; // Bit-set packed into an int.",
          "175: static const char *dbTypeChkStrs[] = { \"convert\", \"warn\", \"error\", \"disable\", NULL };",
          "177: #endif",
          "180: enum {TMODE_EVAL=0x1, TMODE_DELETE=0x2, TMODE_PREPARE=0x4, TMODE_STEP=0x4};",
          "181: typedef enum { MUTEX_DEFAULT, MUTEX_NONE, MUTEX_FULL } Mutex_Type;",
          "182: typedef enum { dbTypeCheck_Cast, dbTypeCheck_Warn, dbTypeCheck_Error, dbTypeCheck_None } dbTypeCheck_Mode;",
          "",
          "[Removed Lines]",
          "176: static const char *objSqlModeStrs[] = { \"getSql\", \"noTypes\", \"noDefaults\", \"nullDefaults\", NULL };",
          "179: enum {OBJMODE_SQLONLY=0x1, OBJMODE_NOTYPES=0x2, OBJMODE_NODEFAULTS=0x4, OBJMODE_NULLDEFAULTS=0x8};",
          "",
          "[Added Lines]",
          "176: static const char *objSqlModeStrs[] = { \"getSql\", \"noTypes\", \"noDefaults\", \"nullDefaults\", \"noChecks\", NULL };",
          "179: enum {OBJMODE_SQLONLY=0x1, OBJMODE_NOTYPES=0x2, OBJMODE_NODEFAULTS=0x4, OBJMODE_NULLDEFAULTS=0x8, OBJMODE_NOCHECKS=0x16};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2648:     }",
          "2649:     if (opts.objName) {",
          "2650:         if (Jsi_SqlObjBinds(interp, &eStr, opts.objName, !(opts.objOpts&OBJMODE_NOTYPES),",
          "2652:             goto bail;",
          "2653:         zSql = Jsi_DSValue(&eStr);",
          "2654:     }",
          "",
          "[Removed Lines]",
          "2651:             !(opts.objOpts&OBJMODE_NODEFAULTS), (opts.objOpts&OBJMODE_NULLDEFAULTS)!=0) != JSI_OK)",
          "",
          "[Added Lines]",
          "2651:             !(opts.objOpts&OBJMODE_NODEFAULTS), (opts.objOpts&OBJMODE_NULLDEFAULTS)!=0,",
          "2652:             !(opts.objOpts&OBJMODE_NOCHECKS)) != JSI_OK)",
          "",
          "---------------"
        ],
        "src/jsiString.c||src/jsiString.c": [
          "File: src/jsiString.c -> src/jsiString.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "652:     Jsi_Value *repVal = Jsi_ValueArrayIndex(interp, args, 1+skip);",
          "653:     if (!Jsi_ValueIsFunction(interp, repVal))",
          "654:         replace_str = Jsi_ValueToString(interp, repVal, &replace_len);",
          "657:     Jsi_DSInit(&dStr);",
          "659:     if (Jsi_ValueIsString(interp, seq)) {",
          "",
          "[Removed Lines]",
          "655:     else",
          "656:         maxArgs = repVal->d.obj->d.fobj->func->argnames->argCnt;",
          "",
          "[Added Lines]",
          "655:     else {",
          "656:         Jsi_Func *fptr = repVal->d.obj->d.fobj->func;",
          "657:         maxArgs = (fptr->argnames?fptr->argnames->argCnt:0);",
          "658:     }",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"d32d2f3a25ef2f1bb91a706989687883\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"245bfc701de9f6aaafbe9462645dc362\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "445:     void(*_Jsi_IterGetKeys)(Jsi_Interp *interp, Jsi_Value *target, Jsi_IterObj *iterobj, int depth);",
          "446:     bool(*_Jsi_IsReserved)(Jsi_Interp *interp, const char* str, bool sql);",
          "447:     bool(*_Jsi_StrIsAlnum)(const char *cp);",
          "449:     Jsi_RC(*_Jsi_UserObjName)(Jsi_Interp *interp, Jsi_Value *v, Jsi_DString *dStr);",
          "450:     void *endPtr;",
          "451: } Jsi_Stubs;",
          "",
          "[Removed Lines]",
          "448:     Jsi_RC(*_Jsi_SqlObjBinds)(Jsi_Interp* interp, Jsi_DString* zStr, const char *varName, bool addTypes, bool addDefaults, bool nullDefaults);",
          "",
          "[Added Lines]",
          "448:     Jsi_RC(*_Jsi_SqlObjBinds)(Jsi_Interp* interp, Jsi_DString* zStr, const char *varName, bool addTypes, bool addDefaults, bool nullDefaults, bool addCheck);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1293: #define Jsi_IterGetKeys(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_IterGetKeys(n0,n1,n2,n3))",
          "1294: #define Jsi_IsReserved(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_IsReserved(n0,n1,n2))",
          "1295: #define Jsi_StrIsAlnum(n0) JSISTUBCALL(jsiStubsPtr, _Jsi_StrIsAlnum(n0))",
          "1297: #define Jsi_UserObjName(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_UserObjName(n0,n1,n2))",
          "1299: #endif",
          "",
          "[Removed Lines]",
          "1296: #define Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5) JSISTUBCALL(jsiStubsPtr, _Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5))",
          "",
          "[Added Lines]",
          "1296: #define Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5,n6) JSISTUBCALL(jsiStubsPtr, _Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5,n6))",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "495: }",
          "499:     Jsi_Value *v, *vnPtr = Jsi_VarLookup(interp, varName);",
          "500:     if (!vnPtr || !Jsi_ValueIsObjType(interp, vnPtr, JSI_OT_OBJECT))",
          "501:         return Jsi_LogError(\"varName must be an Object: %s\", varName);",
          "",
          "[Removed Lines]",
          "498: Jsi_RC Jsi_SqlObjBinds(Jsi_Interp* interp, Jsi_DString* zStr, const char *varName, bool addTypes, bool addDefaults, bool nullDefaults) {",
          "",
          "[Added Lines]",
          "498: Jsi_RC Jsi_SqlObjBinds(Jsi_Interp* interp, Jsi_DString* zStr, const char *varName,",
          "499:     bool addTypes, bool addDefaults, bool nullDefaults, bool addCheck) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:     const char *pre = \"\", *kstr;",
          "518:     if (!create)",
          "519:         Jsi_DSAppend(&vStr, \" VALUES(\", NULL);",
          "520:     for (i=0; i<io->count; i++) {",
          "521:         kstr = io->keys[i];",
          "528:             const char *typ = NULL, *dflt=(nullDefaults?\"NULL\":NULL);",
          "529:             if (addTypes && ((v = Jsi_ValueObjLookup(interp, vnPtr, kstr, 1)))) {",
          "530:                 if (Jsi_ValueIsBoolean(interp, v)) {",
          "531:                     typ = \"BOOLEAN\";",
          "533:                         bool bv = 0;",
          "534:                         Jsi_ValueGetBoolean(interp, v, &bv);",
          "535:                         dflt = (bv?\"1\":\"0\");",
          "536:                     }",
          "537:                 } else if (Jsi_ValueIsNumber(interp, v)) {",
          "538:                     typ = \"NUMERIC\";",
          "539:                     if (!Jsi_Strcmp(kstr,\"rowid\"))",
          "540:                         typ = \"INTEGER PRIMARY KEY\";",
          "546:                     }",
          "547:                 } else if (Jsi_ValueIsArray(interp, v) || Jsi_ValueIsObjType(interp, v, JSI_OT_OBJECT)) {",
          "548:                     typ = \"CHARJSON\";",
          "550:                         Jsi_DSFree(&jStr);",
          "551:                         Jsi_DSAppend(&jStr, \"'\", NULL);",
          "552:                         Jsi_ValueGetDString(interp, v, &jStr, JSI_OUTPUT_JSON|JSI_JSON_STRICT);",
          "",
          "[Removed Lines]",
          "522:         const char *qs = \"\", *qe = \"\";",
          "523:         if (!Jsi_StrIsAlnum(kstr) || Jsi_IsReserved(interp, kstr, 1)) {",
          "524:             qe = qs = \"'\";",
          "525:         }",
          "526:         Jsi_DSAppend(&sStr, pre, qs, kstr, qe, NULL);",
          "527:         if (create) {",
          "532:                     if (!nullDefaults && addDefaults) {",
          "541:                     else if (!nullDefaults && addDefaults) {",
          "542:                         Jsi_Number nv = 0;",
          "543:                         Jsi_DSFree(&jStr);",
          "544:                         Jsi_ValueGetNumber(interp, v, &nv);",
          "545:                         dflt = Jsi_DSPrintf(&jStr, \"%\" JSI_NUMGFMT, nv);",
          "549:                     if (!nullDefaults && addDefaults) {",
          "",
          "[Added Lines]",
          "521:     if (nullDefaults)",
          "522:         addDefaults = 0;",
          "525:         const char *chk = NULL, *chk2 = NULL;",
          "526:         Jsi_DSAppend(&sStr, pre, \"[\", kstr, \"]\", NULL);",
          "527:         if (!create) {",
          "528:             Jsi_DSAppend(&vStr, pre, \"$\", varName, \"(\", kstr, \")\", NULL);",
          "529:         } else {",
          "534:                     if (addDefaults) {",
          "539:                     if (addCheck) {",
          "540:                         chk = \"== 'integer'\";",
          "541:                         chk2 = \"(0,1)\";",
          "542:                     }",
          "547:                     else {",
          "548:                         if (addDefaults) {",
          "549:                             Jsi_Number nv = 0;",
          "550:                             Jsi_DSFree(&jStr);",
          "551:                             Jsi_ValueGetNumber(interp, v, &nv);",
          "552:                             dflt = Jsi_DSPrintf(&jStr, \"%\" JSI_NUMGFMT, nv);",
          "553:                         }",
          "554:                         if (addCheck)",
          "555:                             chk = \"IN ('real','integer')\";",
          "559:                     if (addDefaults) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "555:                     }",
          "556:                 } else {",
          "557:                     typ = \"TEXT\";",
          "559:                         if ((cp=Jsi_ValueString(interp, v, NULL))) {",
          "560:                             Jsi_DSFree(&jStr);",
          "561:                             dflt = Jsi_DSAppend(&jStr, \"'\", cp, \"'\", NULL);",
          "562:                         } else",
          "564:                     }",
          "565:                 }",
          "566:             }",
          "567:             if (typ)",
          "571:         }",
          "572:         pre = \",\";",
          "573:     }",
          "",
          "[Removed Lines]",
          "558:                     if (!nullDefaults && addDefaults) {",
          "563:                         dflt = \"NULL\";",
          "568:                 Jsi_DSAppend(&sStr, \" \", typ, (dflt?\" DEFAULT \":\"\"), dflt, NULL);",
          "569:         } else {",
          "570:             Jsi_DSAppend(&vStr, pre, \"$\", varName, \"(\", kstr, \")\", NULL);",
          "",
          "[Added Lines]",
          "568:                     if (addDefaults) {",
          "573:                             dflt = \"NULL\";",
          "574:                     }",
          "575:                     if (addCheck) {",
          "576:                         if (dflt && !Jsi_Strcmp(dflt,\"NULL\"))",
          "577:                             chk = \"IN ('text','null')\";",
          "578:                         else",
          "579:                             chk = \"== 'text'\";",
          "584:                 Jsi_DSAppend(&sStr, \" \", typ, NULL);",
          "585:             if (dflt)",
          "586:                 Jsi_DSAppend(&sStr,\" DEFAULT \", dflt, NULL);",
          "587:             if (chk) {",
          "588:                 Jsi_DSPrintf(&sStr,\" CONSTRAINT '%s Invalid' CHECK(typeof(%s) %s\", kstr, kstr, chk);",
          "589:                 if (chk2)",
          "590:                     Jsi_DSPrintf(&sStr,\" AND %s IN %s\", kstr, chk2);",
          "591:                 Jsi_DSAppend(&sStr,\")\", NULL);",
          "592:             }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1229: <tr><td>nocache</td><td><i>BOOL</i></td><td>Disable query cache.</td><td><i></i></td></tr>",
          "1230: <tr><td>nullvalue</td><td><i>STRKEY</i></td><td>Null string output (for non js/json mode).</td><td><i></i></td></tr>",
          "1231: <tr><td>objName</td><td><i>STRKEY</i></td><td>Object var name for CREATE/INSERT: replaces %s with fields in query.</td><td><i></i></td></tr>",
          "1233: <tr><td>retChanged</td><td><i>BOOL</i></td><td>Query returns value of sqlite3_changed().</td><td><i></i></td></tr>",
          "1234: <tr><td>separator</td><td><i>STRKEY</i></td><td>Separator string (for csv and text mode).</td><td><i></i></td></tr>",
          "1235: <tr><td>typeCheck</td><td><i>STRKEY</i></td><td>Type check mode (warn). (one of: <b>convert</b>, <b>warn</b>, <b>error</b>, <b>disable</b>)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1232: <tr><td>objOpts</td><td><i>ARRAY</i></td><td>Options for objName. (zero or more of: <b>getSql</b>, <b>noTypes</b>, <b>noDefaults</b>, <b>nullDefaults</b>)</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1232: <tr><td>objOpts</td><td><i>ARRAY</i></td><td>Options for objName. (zero or more of: <b>getSql</b>, <b>noTypes</b>, <b>noDefaults</b>, <b>nullDefaults</b>, <b>noChecks</b>)</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1268: <tr><td>nocache</td><td><i>BOOL</i></td><td>Disable query cache.</td><td><i></i></td></tr>",
          "1269: <tr><td>nullvalue</td><td><i>STRKEY</i></td><td>Null string output (for non js/json mode).</td><td><i></i></td></tr>",
          "1270: <tr><td>objName</td><td><i>STRKEY</i></td><td>Object var name for CREATE/INSERT: replaces %s with fields in query.</td><td><i></i></td></tr>",
          "1272: <tr><td>retChanged</td><td><i>BOOL</i></td><td>Query returns value of sqlite3_changed().</td><td><i></i></td></tr>",
          "1273: <tr><td>separator</td><td><i>STRKEY</i></td><td>Separator string (for csv and text mode).</td><td><i></i></td></tr>",
          "1274: <tr><td>typeCheck</td><td><i>STRKEY</i></td><td>Type check mode (warn). (one of: <b>convert</b>, <b>warn</b>, <b>error</b>, <b>disable</b>)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1271: <tr><td>objOpts</td><td><i>ARRAY</i></td><td>Options for objName. (zero or more of: <b>getSql</b>, <b>noTypes</b>, <b>noDefaults</b>, <b>nullDefaults</b>)</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1271: <tr><td>objOpts</td><td><i>ARRAY</i></td><td>Options for objName. (zero or more of: <b>getSql</b>, <b>noTypes</b>, <b>noDefaults</b>, <b>nullDefaults</b>, <b>noChecks</b>)</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    }
  ]
}