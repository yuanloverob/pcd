{
  "cve_id": "CVE-2022-24883",
  "cve_desc": "FreeRDP is a free implementation of the Remote Desktop Protocol (RDP). Prior to version 2.7.0, server side authentication against a `SAM` file might be successful for invalid credentials if the server has configured an invalid `SAM` file path. FreeRDP based clients are not affected. RDP server implementations using FreeRDP to authenticate against a `SAM` file are affected. Version 2.7.0 contains a fix for this issue. As a workaround, use custom authentication via `HashCallback` and/or ensure the `SAM` database path configured is valid and the application has file handles left.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "6f473b273a4b6f0cb6aca32b95e22fd0de88e144",
  "patch_info": {
    "commit_hash": "6f473b273a4b6f0cb6aca32b95e22fd0de88e144",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6f473b273a4b6f0cb6aca32b95e22fd0de88e144",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ],
    "message": "Cleaned up ntlm_fetch_ntlm_v2_hash\n\n(cherry picked from commit 4661492e5a617199457c8074bad22f766a116cdc)",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "280:   ntlm_current_time(context->Timestamp);",
      "281: }",
      "284: {",
      "287:  SSPI_CREDENTIALS* credentials;",
      "289:  WINPR_ASSERT(context);",
      "",
      "[Removed Lines]",
      "283: static int ntlm_fetch_ntlm_v2_hash(NTLM_CONTEXT* context, BYTE* hash)",
      "285:  WINPR_SAM* sam;",
      "286:  WINPR_SAM_ENTRY* entry;",
      "",
      "[Added Lines]",
      "283: static BOOL ntlm_fetch_ntlm_v2_hash(NTLM_CONTEXT* context, BYTE* hash)",
      "285:  BOOL rc = FALSE;",
      "286:  WINPR_SAM* sam = NULL;",
      "287:  WINPR_SAM_ENTRY* entry = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "293:  sam = SamOpen(context->SamFile, TRUE);",
      "295:  if (!sam)",
      "298:  entry = SamLookupUserW(",
      "303:  {",
      "314:  }",
      "321: #ifdef WITH_DEBUG_NTLM",
      "322:   WLog_VRB(TAG, \"NTLM Hash:\");",
      "323:   winpr_HexDump(TAG, WLOG_DEBUG, entry->NtHash, 16);",
      "324: #endif",
      "335:   WLog_ERR(TAG, \"Error: Could not find user in SAM database\");",
      "338: }",
      "340: static int ntlm_convert_password_hash(NTLM_CONTEXT* context, BYTE* hash)",
      "",
      "[Removed Lines]",
      "296:   return -1;",
      "299:      sam, (LPWSTR)credentials->identity.User, credentials->identity.UserLength * 2,",
      "300:      (LPWSTR)credentials->identity.Domain, credentials->identity.DomainLength * 2);",
      "302:  if (entry)",
      "304: #ifdef WITH_DEBUG_NTLM",
      "305:   WLog_VRB(TAG, \"NTLM Hash:\");",
      "306:   winpr_HexDump(TAG, WLOG_DEBUG, entry->NtHash, 16);",
      "307: #endif",
      "308:   NTOWFv2FromHashW(entry->NtHash, (LPWSTR)credentials->identity.User,",
      "309:                    credentials->identity.UserLength * 2, (LPWSTR)credentials->identity.Domain,",
      "310:                    credentials->identity.DomainLength * 2, (BYTE*)hash);",
      "311:   SamFreeEntry(sam, entry);",
      "312:   SamClose(sam);",
      "313:   return 1;",
      "316:  entry = SamLookupUserW(sam, (LPWSTR)credentials->identity.User,",
      "317:                         credentials->identity.UserLength * 2, NULL, 0);",
      "319:  if (entry)",
      "320:  {",
      "325:   NTOWFv2FromHashW(entry->NtHash, (LPWSTR)credentials->identity.User,",
      "326:                    credentials->identity.UserLength * 2, (LPWSTR)credentials->identity.Domain,",
      "327:                    credentials->identity.DomainLength * 2, (BYTE*)hash);",
      "328:   SamFreeEntry(sam, entry);",
      "329:   SamClose(sam);",
      "330:   return 1;",
      "331:  }",
      "332:  else",
      "333:  {",
      "334:   SamClose(sam);",
      "336:   return 0;",
      "337:  }",
      "",
      "[Added Lines]",
      "297:   goto fail;",
      "300:      sam, (LPWSTR)credentials->identity.User, credentials->identity.UserLength * sizeof(WCHAR),",
      "301:      (LPWSTR)credentials->identity.Domain, credentials->identity.DomainLength * sizeof(WCHAR));",
      "303:  if (!entry)",
      "305:   entry = SamLookupUserW(sam, (LPWSTR)credentials->identity.User,",
      "306:                          credentials->identity.UserLength * sizeof(WCHAR), NULL, 0);",
      "309:  if (!entry)",
      "310:   goto fail;",
      "316:      NTOWFv2FromHashW(entry->NtHash, (LPWSTR)credentials->identity.User,",
      "317:                       credentials->identity.UserLength * sizeof(WCHAR),",
      "318:                       (LPWSTR)credentials->identity.Domain,",
      "319:                       credentials->identity.DomainLength * sizeof(WCHAR), (BYTE*)hash);",
      "321:      rc = TRUE;",
      "323: fail:",
      "324:  SamFreeEntry(sam, entry);",
      "325:  SamClose(sam);",
      "326:  if (!rc)",
      "329:  return rc;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "52f3e5139f7c75258b95ac49f53b8ca49e63f1e2",
      "candidate_info": {
        "commit_hash": "52f3e5139f7c75258b95ac49f53b8ca49e63f1e2",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/52f3e5139f7c75258b95ac49f53b8ca49e63f1e2",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
        ],
        "message": "Cleaned up ntlm_fetch_ntlm_v2_hash\n\n(cherry picked from commit 4661492e5a617199457c8074bad22f766a116cdc)",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
          ],
          "candidate": [
            "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
          ]
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:   ntlm_current_time(context->Timestamp);",
          "281: }",
          "284: {",
          "287:  SSPI_CREDENTIALS* credentials;",
          "289:  WINPR_ASSERT(context);",
          "",
          "[Removed Lines]",
          "283: static int ntlm_fetch_ntlm_v2_hash(NTLM_CONTEXT* context, BYTE* hash)",
          "285:  WINPR_SAM* sam;",
          "286:  WINPR_SAM_ENTRY* entry;",
          "",
          "[Added Lines]",
          "283: static BOOL ntlm_fetch_ntlm_v2_hash(NTLM_CONTEXT* context, BYTE* hash)",
          "285:  BOOL rc = FALSE;",
          "286:  WINPR_SAM* sam = NULL;",
          "287:  WINPR_SAM_ENTRY* entry = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:  sam = SamOpen(context->SamFile, TRUE);",
          "295:  if (!sam)",
          "298:  entry = SamLookupUserW(",
          "303:  {",
          "314:  }",
          "321: #ifdef WITH_DEBUG_NTLM",
          "322:   WLog_VRB(TAG, \"NTLM Hash:\");",
          "323:   winpr_HexDump(TAG, WLOG_DEBUG, entry->NtHash, 16);",
          "324: #endif",
          "335:   WLog_ERR(TAG, \"Error: Could not find user in SAM database\");",
          "338: }",
          "340: static int ntlm_convert_password_hash(NTLM_CONTEXT* context, BYTE* hash)",
          "",
          "[Removed Lines]",
          "296:   return -1;",
          "299:      sam, (LPWSTR)credentials->identity.User, credentials->identity.UserLength * 2,",
          "300:      (LPWSTR)credentials->identity.Domain, credentials->identity.DomainLength * 2);",
          "302:  if (entry)",
          "304: #ifdef WITH_DEBUG_NTLM",
          "305:   WLog_VRB(TAG, \"NTLM Hash:\");",
          "306:   winpr_HexDump(TAG, WLOG_DEBUG, entry->NtHash, 16);",
          "307: #endif",
          "308:   NTOWFv2FromHashW(entry->NtHash, (LPWSTR)credentials->identity.User,",
          "309:                    credentials->identity.UserLength * 2, (LPWSTR)credentials->identity.Domain,",
          "310:                    credentials->identity.DomainLength * 2, (BYTE*)hash);",
          "311:   SamFreeEntry(sam, entry);",
          "312:   SamClose(sam);",
          "313:   return 1;",
          "316:  entry = SamLookupUserW(sam, (LPWSTR)credentials->identity.User,",
          "317:                         credentials->identity.UserLength * 2, NULL, 0);",
          "319:  if (entry)",
          "320:  {",
          "325:   NTOWFv2FromHashW(entry->NtHash, (LPWSTR)credentials->identity.User,",
          "326:                    credentials->identity.UserLength * 2, (LPWSTR)credentials->identity.Domain,",
          "327:                    credentials->identity.DomainLength * 2, (BYTE*)hash);",
          "328:   SamFreeEntry(sam, entry);",
          "329:   SamClose(sam);",
          "330:   return 1;",
          "331:  }",
          "332:  else",
          "333:  {",
          "334:   SamClose(sam);",
          "336:   return 0;",
          "337:  }",
          "",
          "[Added Lines]",
          "297:   goto fail;",
          "300:      sam, (LPWSTR)credentials->identity.User, credentials->identity.UserLength * sizeof(WCHAR),",
          "301:      (LPWSTR)credentials->identity.Domain, credentials->identity.DomainLength * sizeof(WCHAR));",
          "303:  if (!entry)",
          "305:   entry = SamLookupUserW(sam, (LPWSTR)credentials->identity.User,",
          "306:                          credentials->identity.UserLength * sizeof(WCHAR), NULL, 0);",
          "309:  if (!entry)",
          "310:   goto fail;",
          "316:      NTOWFv2FromHashW(entry->NtHash, (LPWSTR)credentials->identity.User,",
          "317:                       credentials->identity.UserLength * sizeof(WCHAR),",
          "318:                       (LPWSTR)credentials->identity.Domain,",
          "319:                       credentials->identity.DomainLength * sizeof(WCHAR), (BYTE*)hash);",
          "321:      rc = TRUE;",
          "323: fail:",
          "324:  SamFreeEntry(sam, entry);",
          "325:  SamClose(sam);",
          "326:  if (!rc)",
          "329:  return rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19de452f9c9dbd46588b6f2718fd3e819dc2b6d1",
      "candidate_info": {
        "commit_hash": "19de452f9c9dbd46588b6f2718fd3e819dc2b6d1",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/19de452f9c9dbd46588b6f2718fd3e819dc2b6d1",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
        ],
        "message": "Cleaned up ntlm_fetch_ntlm_v2_hash",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
          ],
          "candidate": [
            "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
          ]
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:   ntlm_current_time(context->Timestamp);",
          "264: }",
          "267: {",
          "270:  SSPI_CREDENTIALS* credentials;",
          "272:  WINPR_ASSERT(context);",
          "",
          "[Removed Lines]",
          "266: static int ntlm_fetch_ntlm_v2_hash(NTLM_CONTEXT* context, BYTE* hash)",
          "268:  WINPR_SAM* sam;",
          "269:  WINPR_SAM_ENTRY* entry;",
          "",
          "[Added Lines]",
          "266: static BOOL ntlm_fetch_ntlm_v2_hash(NTLM_CONTEXT* context, BYTE* hash)",
          "268:  BOOL rc = FALSE;",
          "269:  WINPR_SAM* sam = NULL;",
          "270:  WINPR_SAM_ENTRY* entry = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:  sam = SamOpen(context->SamFile, TRUE);",
          "278:  if (!sam)",
          "281:  entry = SamLookupUserW(",
          "286:  {",
          "297:  }",
          "304: #ifdef WITH_DEBUG_NTLM",
          "305:   WLog_VRB(TAG, \"NTLM Hash:\");",
          "306:   winpr_HexDump(TAG, WLOG_DEBUG, entry->NtHash, 16);",
          "307: #endif",
          "318:   WLog_ERR(TAG, \"Error: Could not find user in SAM database\");",
          "321: }",
          "323: static int ntlm_convert_password_hash(NTLM_CONTEXT* context, BYTE* hash)",
          "",
          "[Removed Lines]",
          "279:   return -1;",
          "282:      sam, (LPWSTR)credentials->identity.User, credentials->identity.UserLength * 2,",
          "283:      (LPWSTR)credentials->identity.Domain, credentials->identity.DomainLength * 2);",
          "285:  if (entry)",
          "287: #ifdef WITH_DEBUG_NTLM",
          "288:   WLog_VRB(TAG, \"NTLM Hash:\");",
          "289:   winpr_HexDump(TAG, WLOG_DEBUG, entry->NtHash, 16);",
          "290: #endif",
          "291:   NTOWFv2FromHashW(entry->NtHash, (LPWSTR)credentials->identity.User,",
          "292:                    credentials->identity.UserLength * 2, (LPWSTR)credentials->identity.Domain,",
          "293:                    credentials->identity.DomainLength * 2, (BYTE*)hash);",
          "294:   SamFreeEntry(sam, entry);",
          "295:   SamClose(sam);",
          "296:   return 1;",
          "299:  entry = SamLookupUserW(sam, (LPWSTR)credentials->identity.User,",
          "300:                         credentials->identity.UserLength * 2, NULL, 0);",
          "302:  if (entry)",
          "303:  {",
          "308:   NTOWFv2FromHashW(entry->NtHash, (LPWSTR)credentials->identity.User,",
          "309:                    credentials->identity.UserLength * 2, (LPWSTR)credentials->identity.Domain,",
          "310:                    credentials->identity.DomainLength * 2, (BYTE*)hash);",
          "311:   SamFreeEntry(sam, entry);",
          "312:   SamClose(sam);",
          "313:   return 1;",
          "314:  }",
          "315:  else",
          "316:  {",
          "317:   SamClose(sam);",
          "319:   return 0;",
          "320:  }",
          "",
          "[Added Lines]",
          "280:   goto fail;",
          "283:      sam, (LPWSTR)credentials->identity.User, credentials->identity.UserLength * sizeof(WCHAR),",
          "284:      (LPWSTR)credentials->identity.Domain, credentials->identity.DomainLength * sizeof(WCHAR));",
          "286:  if (!entry)",
          "288:   entry = SamLookupUserW(sam, (LPWSTR)credentials->identity.User,",
          "289:                          credentials->identity.UserLength * sizeof(WCHAR), NULL, 0);",
          "292:  if (!entry)",
          "293:   goto fail;",
          "299:      NTOWFv2FromHashW(entry->NtHash, (LPWSTR)credentials->identity.User,",
          "300:                       credentials->identity.UserLength * sizeof(WCHAR),",
          "301:                       (LPWSTR)credentials->identity.Domain,",
          "302:                       credentials->identity.DomainLength * sizeof(WCHAR), (BYTE*)hash);",
          "304:      rc = TRUE;",
          "306: fail:",
          "307:  SamFreeEntry(sam, entry);",
          "308:  SamClose(sam);",
          "309:  if (!rc)",
          "312:  return rc;",
          "",
          "---------------"
        ]
      }
    }
  ]
}