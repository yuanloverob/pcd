{
  "cve_id": "CVE-2014-0236",
  "cve_desc": "file before 5.18, as used in the Fileinfo component in PHP before 5.6.0, allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a zero root_storage value in a CDF file, related to cdf.c and readcdf.c.",
  "repo": "php/php-src",
  "patch_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
  "patch_info": {
    "commit_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "files": [
      "NEWS",
      "ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c"
    ],
    "message": "Fixed bug #67329 fileinfo: NULL pointer deference flaw by processing certain CDF files",
    "before_after_code_files": [
      "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c"
    ]
  },
  "patch_diff": {
    "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c": [
      "File: ext/fileinfo/libmagic/cdf.c -> ext/fileinfo/libmagic/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "689: int",
      "690: cdf_read_short_stream(const cdf_info_t *info, const cdf_header_t *h,",
      "692: {",
      "693:  size_t i;",
      "694:  const cdf_directory_t *d;",
      "696:  for (i = 0; i < dir->dir_len; i++)",
      "697:   if (dir->dir_tab[i].d_type == CDF_DIR_TYPE_ROOT_STORAGE)",
      "698:    break;",
      "",
      "[Removed Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn)",
      "",
      "[Added Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn,",
      "692:     const cdf_directory_t **root)",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h": [
      "File: ext/fileinfo/libmagic/cdf.h -> ext/fileinfo/libmagic/cdf.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "300: int cdf_read_ssat(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
      "301:     cdf_sat_t *);",
      "302: int cdf_read_short_stream(const cdf_info_t *, const cdf_header_t *,",
      "304: int cdf_read_property_info(const cdf_stream_t *, const cdf_header_t *, uint32_t,",
      "305:     cdf_property_info_t **, size_t *, size_t *);",
      "306: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
      "",
      "[Removed Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *);",
      "",
      "[Added Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *,",
      "304:     const cdf_directory_t **);",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c": [
      "File: ext/fileinfo/libmagic/readcdf.c -> ext/fileinfo/libmagic/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <stdlib.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.37 2014/01/06 13:41:18 rrt Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: # define strcasestr strstr",
      "78: #endif",
      "80: private const char *",
      "81: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
      "82: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80: static const struct cv {",
      "81:  uint64_t clsid[2];",
      "82:  const char *mime;",
      "83: } clsid2mime[] = {",
      "84:  {",
      "85: #ifdef PHP_WIN32",
      "86:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "87: #else",
      "88:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "89: #endif",
      "90:   \"x-msi\",",
      "91:  }",
      "92: }, clsid2desc[] = {",
      "93:  {",
      "94: #ifdef PHP_WIN32",
      "95:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "96: #else",
      "97:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "98: #endif",
      "99:   \"MSI Installer\",",
      "100:  },",
      "101: };",
      "103: private const char *",
      "104: cdf_clsid_to_mime(const uint64_t clsid[2], const struct cv *cv)",
      "105: {",
      "106:  size_t i;",
      "107:  for (i = 0; cv[i].mime != NULL; i++) {",
      "108:   if (clsid[0] == cv[i].clsid[0] && clsid[1] == cv[i].clsid[1])",
      "109:    return cv[i].mime;",
      "110:  }",
      "111:  return NULL;",
      "112: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96: private int",
      "97: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "99: {",
      "100:         size_t i;",
      "101:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "98:     size_t count)",
      "",
      "[Added Lines]",
      "132:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:  memset(&ts, 0, sizeof(ts));",
      "110:         for (i = 0; i < count; i++) {",
      "111:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "112:                 switch (info[i].pi_type) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:         if (!NOTMIME(ms) && root_storage)",
      "145:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "163:                                                     buf, vbuf) == -1)",
      "164:                                                         return -1;",
      "165:                                         }",
      "167:         CDF_PROPERTY_NAME_OF_APPLICATION) {",
      "168:      str = cdf_app_to_mime(vbuf, app2mime);",
      "169:     }",
      "",
      "[Removed Lines]",
      "166:                                 } else if (info[i].pi_id ==",
      "",
      "[Added Lines]",
      "203:                                 } else if (str == NULL && info[i].pi_id ==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "218: private int",
      "219: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "221: {",
      "222:         cdf_summary_info_header_t si;",
      "223:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "220:     const cdf_stream_t *sst)",
      "",
      "[Added Lines]",
      "257:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "228:                 return -1;",
      "230:         if (NOTMIME(ms)) {",
      "231:                 if (file_printf(ms, \"Composite Document File V2 Document\")",
      "232:       == -1)",
      "233:                         return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "268:   const char *str;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "255:                                 return -2;",
      "256:                         break;",
      "257:                 }",
      "261:         free(info);",
      "263:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "258:         }",
      "260:         m = cdf_file_property_info(ms, info, count);",
      "",
      "[Added Lines]",
      "297:   if (root_storage) {",
      "298:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "299:    if (str)",
      "300:     if (file_printf(ms, \", %s\", str) == -1)",
      "301:      return -2;",
      "302:    }",
      "303:   }",
      "305:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "275:         int i;",
      "276:         const char *expn = \"\";",
      "277:         const char *corrupt = \"corrupt: \";",
      "279:         info.i_fd = fd;",
      "280:         info.i_buf = buf;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:         const cdf_directory_t *root_storage;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "308:                 goto out2;",
      "309:         }",
      "312:                 expn = \"Cannot read short stream\";",
      "313:                 goto out3;",
      "314:         }",
      "",
      "[Removed Lines]",
      "311:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst)) == -1) {",
      "",
      "[Added Lines]",
      "357:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,",
      "358:      &root_storage)) == -1) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "329: #ifdef CDF_DEBUG",
      "330:         cdf_dump_summary_info(&h, &scn);",
      "331: #endif",
      "334:  if (i == 0) {",
      "335:   const char *str = NULL;",
      "336:   cdf_directory_t *d;",
      "337:   char name[__arraycount(d->d_name)];",
      "338:   size_t j, k;",
      "340:    d = &dir.dir_tab[j];",
      "341:    for (k = 0; k < sizeof(name); k++)",
      "342:     name[k] = (char)cdf_tole2(d->d_name[k]);",
      "349:   }",
      "350:   if (NOTMIME(ms)) {",
      "351:    if (str != NULL) {",
      "",
      "[Removed Lines]",
      "332:         if ((i = cdf_file_summary_info(ms, &h, &scn)) < 0)",
      "333:                 expn = \"Can't expand summary_info\";",
      "339:   for (j = 0; j < dir.dir_len; j++) {",
      "343:    if (NOTMIME(ms))",
      "344:     str = cdf_app_to_mime(name, name2desc);",
      "345:    else",
      "346:     str = cdf_app_to_mime(name, name2mime);",
      "347:    if (str != NULL)",
      "348:     break;",
      "",
      "[Added Lines]",
      "379:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "380:             expn = \"Can't expand summary_info\";",
      "388:   for (j = 0; str == NULL && j < dir.dir_len; j++) {",
      "392:    str = cdf_app_to_mime(name,",
      "393:        NOTMIME(ms) ? name2desc : name2mime);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d337fb0b62cd8abbe74931d9bc22d4ae50509719",
      "candidate_info": {
        "commit_hash": "d337fb0b62cd8abbe74931d9bc22d4ae50509719",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/d337fb0b62cd8abbe74931d9bc22d4ae50509719",
        "files": [
          "tests/run-tests.php"
        ],
        "message": "Make run-tests.php PHP-5.4 compatible",
        "before_after_code_files": [
          "tests/run-tests.php||tests/run-tests.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/run-tests.php||tests/run-tests.php": [
          "File: tests/run-tests.php -> tests/run-tests.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:     $test = sprintf('%s/%s', $path, $file);",
          "269:     if (preg_match('~\\.test$~', $test)) {",
          "271:     }",
          "272:    }",
          "273:   }",
          "",
          "[Removed Lines]",
          "270:      yield new Test($this->config, $test);",
          "",
          "[Added Lines]",
          "270:      $tests[] = new Test($this->config, $test);",
          "274:    return $tests;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430:   public function getResult() {",
          "434:    if ($this->options) {",
          "435:     $options = sprintf(",
          "",
          "[Removed Lines]",
          "431:    $options = sprintf(",
          "432:     '-i%s -nqb', $this->file);",
          "",
          "[Added Lines]",
          "433:    $options = sprintf('-i%s -nqb', $this->file);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40bcd909d8948c53226accf9ceb11987b0f8e442",
      "candidate_info": {
        "commit_hash": "40bcd909d8948c53226accf9ceb11987b0f8e442",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/40bcd909d8948c53226accf9ceb11987b0f8e442",
        "files": [
          "ext/standard/php_fopen_wrapper.c",
          "main/php_memory_streams.h",
          "main/streams/memory.c"
        ],
        "message": "refactor php_stream_temp_create{,_ex} and use it for the php://input stream",
        "before_after_code_files": [
          "ext/standard/php_fopen_wrapper.c||ext/standard/php_fopen_wrapper.c",
          "main/php_memory_streams.h||main/php_memory_streams.h",
          "main/streams/memory.c||main/streams/memory.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/standard/php_fopen_wrapper.c||ext/standard/php_fopen_wrapper.c": [
          "File: ext/standard/php_fopen_wrapper.c -> ext/standard/php_fopen_wrapper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:   if ((input->body = SG(request_info).request_body)) {",
          "232:    php_stream_rewind(input->body);",
          "233:   } else {",
          "235:    SG(request_info).request_body = input->body;",
          "236:   }",
          "",
          "[Removed Lines]",
          "234:    input->body = php_stream_temp_create(TEMP_STREAM_DEFAULT, SAPI_POST_BLOCK_SIZE);",
          "",
          "[Added Lines]",
          "234:    input->body = php_stream_temp_create_ex(TEMP_STREAM_DEFAULT, SAPI_POST_BLOCK_SIZE, PG(upload_tmp_dir));",
          "",
          "---------------"
        ],
        "main/php_memory_streams.h||main/php_memory_streams.h": [
          "File: main/php_memory_streams.h -> main/php_memory_streams.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #define php_stream_memory_get_buffer(stream, length) _php_stream_memory_get_buffer((stream), (length) STREAMS_CC TSRMLS_CC)",
          "37: #define php_stream_temp_new() php_stream_temp_create(TEMP_STREAM_DEFAULT, PHP_STREAM_MAX_MEM)",
          "39: #define php_stream_temp_create_rel(mode, max_memory_usage) _php_stream_temp_create((mode), (max_memory_usage) STREAMS_REL_CC TSRMLS_CC)",
          "40: #define php_stream_temp_open(mode, max_memory_usage, buf, length) _php_stream_temp_open((mode), (max_memory_usage), (buf), (length) STREAMS_CC TSRMLS_CC)",
          "",
          "[Removed Lines]",
          "38: #define php_stream_temp_create(mode, max_memory_usage) _php_stream_temp_create((mode), (max_memory_usage) STREAMS_CC TSRMLS_CC)",
          "",
          "[Added Lines]",
          "38: #define php_stream_temp_create(mode, max_memory_usage) php_stream_temp_create_ex((mode), (max_memory_usage), NULL)",
          "39: #define php_stream_temp_create_ex(mode, max_memory_usage, tmpdir) _php_stream_temp_create_ex((mode), (max_memory_usage), (tmpdir) STREAMS_CC TSRMLS_CC)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: PHPAPI char *_php_stream_memory_get_buffer(php_stream *stream, size_t *length STREAMS_DC TSRMLS_DC);",
          "47: PHPAPI php_stream *_php_stream_temp_create(int mode, size_t max_memory_usage STREAMS_DC TSRMLS_DC);",
          "48: PHPAPI php_stream *_php_stream_temp_open(int mode, size_t max_memory_usage, char *buf, size_t length STREAMS_DC TSRMLS_DC);",
          "49: END_EXTERN_C()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: PHPAPI php_stream *_php_stream_temp_create_ex(int mode, size_t max_memory_usage, const char *tmpdir STREAMS_DC TSRMLS_DC);",
          "",
          "---------------"
        ],
        "main/streams/memory.c||main/streams/memory.c": [
          "File: main/streams/memory.c -> main/streams/memory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:  size_t      smax;",
          "353:  int   mode;",
          "354:  zval*       meta;",
          "355: } php_stream_temp_data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:  char*  tmpdir;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:   char *membuf = php_stream_memory_get_buffer(ts->innerstream, &memsize);",
          "371:   if (memsize + count >= ts->smax) {",
          "373:    php_stream_write(file, membuf, memsize);",
          "374:    php_stream_free_enclosed(ts->innerstream, PHP_STREAM_FREE_CLOSE);",
          "375:    ts->innerstream = file;",
          "",
          "[Removed Lines]",
          "372:    php_stream *file = php_stream_fopen_tmpfile();",
          "",
          "[Added Lines]",
          "373:    php_stream *file = php_stream_fopen_temporary_file(ts->tmpdir, \"php\", NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "420:   zval_ptr_dtor(&ts->meta);",
          "421:  }",
          "423:  efree(ts);",
          "425:  return ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424:  if (ts->tmpdir) {",
          "425:   efree(ts->tmpdir);",
          "426:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "552: {",
          "553:  php_stream_temp_data *self;",
          "554:  php_stream *stream;",
          "",
          "[Removed Lines]",
          "551: PHPAPI php_stream *_php_stream_temp_create(int mode, size_t max_memory_usage STREAMS_DC TSRMLS_DC)",
          "",
          "[Added Lines]",
          "556: PHPAPI php_stream *_php_stream_temp_create_ex(int mode, size_t max_memory_usage, const char *tmpdir STREAMS_DC TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "556:  self = ecalloc(1, sizeof(*self));",
          "557:  self->smax = max_memory_usage;",
          "558:  self->mode = mode;",
          "560:  stream = php_stream_alloc_rel(&php_stream_temp_ops, self, 0, mode & TEMP_STREAM_READONLY ? \"rb\" : \"w+b\");",
          "561:  stream->flags |= PHP_STREAM_FLAG_NO_BUFFER;",
          "562:  self->innerstream = php_stream_memory_create_rel(mode);",
          "",
          "[Removed Lines]",
          "559:  self->meta = NULL;",
          "",
          "[Added Lines]",
          "564:  if (tmpdir) {",
          "565:   self->tmpdir = estrdup(tmpdir);",
          "566:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1163a7ce24850af498dd8f344cfbf44b7a063829",
      "candidate_info": {
        "commit_hash": "1163a7ce24850af498dd8f344cfbf44b7a063829",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/1163a7ce24850af498dd8f344cfbf44b7a063829",
        "files": [
          "Zend/tests/constant_expressions_self_referencing_array.phpt"
        ],
        "message": "Mark test as XFAIL until fixed",
        "before_after_code_files": [
          "Zend/tests/constant_expressions_self_referencing_array.phpt||Zend/tests/constant_expressions_self_referencing_array.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Zend/tests/constant_expressions_self_referencing_array.phpt||Zend/tests/constant_expressions_self_referencing_array.phpt": [
          "File: Zend/tests/constant_expressions_self_referencing_array.phpt -> Zend/tests/constant_expressions_self_referencing_array.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: --TEST--",
          "2: Self-referencing constant expression (part of a constant AST)",
          "3: --FILE--",
          "4: <?php",
          "5: class A {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: --XFAIL--",
          "4: Not yet fixed, to be fixed for PHP 5.6",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0da5d94a6c840af835a5b5d8bc4284a588d727bf",
      "candidate_info": {
        "commit_hash": "0da5d94a6c840af835a5b5d8bc4284a588d727bf",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/0da5d94a6c840af835a5b5d8bc4284a588d727bf",
        "files": [
          "sapi/phpdbg/phpdbg.h",
          "sapi/phpdbg/phpdbg_utils.c"
        ],
        "message": "Better fix for phpdbg + libedit - fix include - disable coloured prompt only with libedit",
        "before_after_code_files": [
          "sapi/phpdbg/phpdbg.h||sapi/phpdbg/phpdbg.h",
          "sapi/phpdbg/phpdbg_utils.c||sapi/phpdbg/phpdbg_utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sapi/phpdbg/phpdbg.h||sapi/phpdbg/phpdbg.h": [
          "File: sapi/phpdbg/phpdbg.h -> sapi/phpdbg/phpdbg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: # include \"TSRM.h\"",
          "65: #endif",
          "68: #   include <readline/readline.h>",
          "69: #   include <readline/history.h>",
          "70: #endif",
          "72: #include \"phpdbg_lexer.h\"",
          "73: #include \"phpdbg_cmd.h\"",
          "",
          "[Removed Lines]",
          "67: #if defined(HAVE_LIBREADLINE) || defined(HAVE_LIBEDIT)",
          "",
          "[Added Lines]",
          "67: #ifdef LIBREADLINE",
          "71: #ifdef HAVE_LIBEDIT",
          "72: #   include <editline/readline.h>",
          "73: #endif",
          "",
          "---------------"
        ],
        "sapi/phpdbg/phpdbg_utils.c||sapi/phpdbg/phpdbg_utils.c": [
          "File: sapi/phpdbg/phpdbg_utils.c -> sapi/phpdbg/phpdbg_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:  }",
          "405:  if ((PHPDBG_G(flags) & PHPDBG_IS_COLOURED)) {",
          "406:   asprintf(",
          "",
          "[Removed Lines]",
          "403: #ifdef HAVE_LIBREADLINE",
          "",
          "[Added Lines]",
          "403: #ifndef HAVE_LIBEDIT",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea466a316ffc39c7d5733c5aa1c37ab604af6e57",
      "candidate_info": {
        "commit_hash": "ea466a316ffc39c7d5733c5aa1c37ab604af6e57",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/ea466a316ffc39c7d5733c5aa1c37ab604af6e57",
        "files": [
          "ext/spl/spl_array.c",
          "ext/spl/spl_dllist.c",
          "ext/spl/spl_observer.c",
          "ext/spl/tests/ArrayObject_unserialize_empty_string.phpt",
          "ext/spl/tests/SplObjectStorage_unserialize_invalid_parameter3.phpt"
        ],
        "message": "Fix Request #67453 Allow to unserialize empty data.\n\nSplDoublyLinkedList, SplObjectStorage and ArrayObject have empty\nconstructor (no arg), so it make sense to allow to unserialize empty\ndata.\n\nThis allow the hack (used in various place, including PHPUnit) to\ninstanciate class without call to constructor to work.",
        "before_after_code_files": [
          "ext/spl/spl_array.c||ext/spl/spl_array.c",
          "ext/spl/spl_dllist.c||ext/spl/spl_dllist.c",
          "ext/spl/spl_observer.c||ext/spl/spl_observer.c",
          "ext/spl/tests/ArrayObject_unserialize_empty_string.phpt||ext/spl/tests/ArrayObject_unserialize_empty_string.phpt",
          "ext/spl/tests/SplObjectStorage_unserialize_invalid_parameter3.phpt||ext/spl/tests/SplObjectStorage_unserialize_invalid_parameter3.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/spl/spl_array.c||ext/spl/spl_array.c": [
          "File: ext/spl/spl_array.c -> ext/spl/spl_array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1749:  }",
          "1751:  if (buf_len == 0) {",
          "1753:   return;",
          "1754:  }",
          "",
          "[Removed Lines]",
          "1752:   zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0 TSRMLS_CC, \"Empty serialized string cannot be empty\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/spl/spl_dllist.c||ext/spl/spl_dllist.c": [
          "File: ext/spl/spl_dllist.c -> ext/spl/spl_dllist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1192:  }",
          "1194:  if (buf_len == 0) {",
          "1196:   return;",
          "1197:  }",
          "",
          "[Removed Lines]",
          "1195:   zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0 TSRMLS_CC, \"Serialized string cannot be empty\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/spl/spl_observer.c||ext/spl/spl_observer.c": [
          "File: ext/spl/spl_observer.c -> ext/spl/spl_observer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "831:  }",
          "833:  if (buf_len == 0) {",
          "835:   return;",
          "836:  }",
          "",
          "[Removed Lines]",
          "834:   zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0 TSRMLS_CC, \"Empty serialized string cannot be empty\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/spl/tests/ArrayObject_unserialize_empty_string.phpt||ext/spl/tests/ArrayObject_unserialize_empty_string.phpt": [
          "File: ext/spl/tests/ArrayObject_unserialize_empty_string.phpt -> ext/spl/tests/ArrayObject_unserialize_empty_string.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: --TEST--",
          "3: --CREDITS--",
          "4: Havard Eide <nucleuz@gmail.com>",
          "5: #PHPTestFest2009 Norway 2009-06-09 \\o/",
          "",
          "[Removed Lines]",
          "2: ArrayObject: test that you cannot unserialize a empty string",
          "",
          "[Added Lines]",
          "2: ArrayObject: test that you can unserialize a empty string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8: $a = new ArrayObject(array());",
          "9: $a->unserialize(\"\");",
          "10: ?>",
          "11: --EXPECTF--",
          "",
          "[Removed Lines]",
          "12: Fatal error: Uncaught exception 'UnexpectedValueException' with message 'Empty serialized string cannot be empty' in %s.php:%d",
          "13: Stack trace:",
          "14: #0 %s(%d): ArrayObject->unserialize('')",
          "15: #1 {main}",
          "16:   thrown in %s.php on line %d",
          "",
          "[Added Lines]",
          "11: Done",
          "13: Done",
          "",
          "---------------"
        ],
        "ext/spl/tests/SplObjectStorage_unserialize_invalid_parameter3.phpt||ext/spl/tests/SplObjectStorage_unserialize_invalid_parameter3.phpt": [
          "File: ext/spl/tests/SplObjectStorage_unserialize_invalid_parameter3.phpt -> ext/spl/tests/SplObjectStorage_unserialize_invalid_parameter3.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: --TEST--",
          "3: --CREDITS--",
          "4: PHPNW Testfest 2009 - Simon Westcott (swestcott@gmail.com)",
          "5: --FILE--",
          "",
          "[Removed Lines]",
          "2: Check that SplObjectStorage::unserialize throws exception when NULL passed",
          "",
          "[Added Lines]",
          "2: Check that SplObjectStorage::unserialize doesn't throws exception when NULL passed",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: }",
          "16: ?>",
          "17: --EXPECTF--",
          "",
          "[Removed Lines]",
          "18: Empty serialized string cannot be empty",
          "",
          "[Added Lines]",
          "17: Done",
          "19: Done",
          "",
          "---------------"
        ]
      }
    }
  ]
}