{
  "cve_id": "CVE-2021-43860",
  "cve_desc": "Flatpak is a Linux application sandboxing and distribution framework. Prior to versions 1.12.3 and 1.10.6, Flatpak doesn't properly validate that the permissions displayed to the user for an app at install time match the actual permissions granted to the app at runtime, in the case that there's a null byte in the metadata file of an app. Therefore apps can grant themselves permissions without the consent of the user. Flatpak shows permissions to the user during install by reading them from the \"xa.metadata\" key in the commit metadata. This cannot contain a null terminator, because it is an untrusted GVariant. Flatpak compares these permissions to the *actual* metadata, from the \"metadata\" file to ensure it wasn't lied to. However, the actual metadata contents are loaded in several places where they are read as simple C-style strings. That means that, if the metadata file includes a null terminator, only the content of the file from *before* the terminator gets compared to xa.metadata. Thus, any permissions that appear in the metadata file after a null terminator are applied at runtime but not shown to the user. So maliciously crafted apps can give themselves hidden permissions. Users who have Flatpaks installed from untrusted sources are at risk in case the Flatpak has a maliciously crafted metadata file, either initially or in an update. This issue is patched in versions 1.12.3 and 1.10.6. As a workaround, users can manually check the permissions of installed apps by checking the metadata file or the xa.metadata key on the commit metadata.",
  "repo": "flatpak/flatpak",
  "patch_hash": "d9a8f9d8ccc0b7c1135d0ecde006a75d25f66aee",
  "patch_info": {
    "commit_hash": "d9a8f9d8ccc0b7c1135d0ecde006a75d25f66aee",
    "repo": "flatpak/flatpak",
    "commit_url": "https://github.com/flatpak/flatpak/commit/d9a8f9d8ccc0b7c1135d0ecde006a75d25f66aee",
    "files": [
      "common/flatpak-transaction.c"
    ],
    "message": "Transaction: Fail the resolve if xa.metadata invalid or missing\n\nIf we fail to parse xa.metadata from the summary cache or the commit\nxa.metadata we fail the resolve.\n\nIf xa.metadata is missing in the commit we fail the resolve (it is\nalways set in the summary cache, because summary update converts\nmissing xa.metadata to \"\", so we either get that, or cache miss which\nleads to resolving from the commit.\n\nThis means that op->resolved_metadata is always set during install and\nupdates, which means we will show the app permissions. The transaction\nwill also always make sure that this data actually matches what gets\ndeployed.\n\nBefore this change an invalid metadata in the summary cache could lead\nto a NULL resolved_metadata, which means we wouldn't print the app\npermissions, yet we would still deploy some metadata file that could\nhave permissions. (NOTE: It would fail to deploy unless the\nxa.metadata in the commit matched the metadata file, but in this\ncorner case we would't compare the summary and commit metadata, so\nthey may differ.)",
    "before_after_code_files": [
      "common/flatpak-transaction.c||common/flatpak-transaction.c"
    ]
  },
  "patch_diff": {
    "common/flatpak-transaction.c||common/flatpak-transaction.c": [
      "File: common/flatpak-transaction.c -> common/flatpak-transaction.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2970:   g_signal_emit (self, signals[END_OF_LIFED_WITH_REBASE], 0, op->remote, flatpak_decomposed_get_ref (op->ref), op->eol, op->eol_rebase, previous_ids, &op->skip);",
      "2971: }",
      "2974: mark_op_resolved (FlatpakTransactionOperation *op,",
      "2975:                   const char                  *commit,",
      "2976:                   GFile                       *sideload_path,",
      "2977:                   GBytes                      *metadata,",
      "2979: {",
      "2980:   g_debug (\"marking op %s:%s resolved to %s\", kind_to_str (op->kind), flatpak_decomposed_get_ref (op->ref), commit ? commit : \"-\");",
      "",
      "[Removed Lines]",
      "2973: static void",
      "2978:                   GBytes                      *old_metadata)",
      "",
      "[Added Lines]",
      "2973: static gboolean",
      "2978:                   GBytes                      *old_metadata,",
      "2979:                   GError                     **error)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2997:   if (metadata)",
      "2998:     {",
      "2999:       g_autoptr(GKeyFile) metakey = g_key_file_new ();",
      "3007:     }",
      "3008:   if (old_metadata)",
      "3009:     {",
      "",
      "[Removed Lines]",
      "3000:       if (g_key_file_load_from_bytes (metakey, metadata, G_KEY_FILE_NONE, NULL))",
      "3001:         {",
      "3002:           op->resolved_metadata = g_bytes_ref (metadata);",
      "3003:           op->resolved_metakey = g_steal_pointer (&metakey);",
      "3004:         }",
      "3005:       else",
      "3006:         g_message (\"Warning: Failed to parse metadata for %s\\n\", flatpak_decomposed_get_ref (op->ref));",
      "",
      "[Added Lines]",
      "3001:       if (!g_key_file_load_from_bytes (metakey, metadata, G_KEY_FILE_NONE, NULL))",
      "3002:         return flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA,",
      "3003:                                    \"Metadata for %s is invalid\", flatpak_decomposed_get_ref (op->ref));",
      "3005:       op->resolved_metadata = g_bytes_ref (metadata);",
      "3006:       op->resolved_metakey = g_steal_pointer (&metakey);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3014:           op->resolved_old_metakey = g_steal_pointer (&metakey);",
      "3015:         }",
      "3016:       else",
      "3018:     }",
      "3019: }",
      "3022: resolve_op_end (FlatpakTransaction *self,",
      "3023:                 FlatpakTransactionOperation *op,",
      "3024:                 const char *checksum,",
      "3025:                 GFile *sideload_path,",
      "3027: {",
      "3028:   g_autoptr(GBytes) old_metadata_bytes = NULL;",
      "3030:   old_metadata_bytes = load_deployed_metadata (self, op->ref, NULL, NULL);",
      "3032:   emit_eol_and_maybe_skip (self, op);",
      "3033:  }",
      "3037: resolve_op_from_commit (FlatpakTransaction *self,",
      "3038:                         FlatpakTransactionOperation *op,",
      "3039:                         const char *checksum,",
      "3040:                         GFile *sideload_path,",
      "3042: {",
      "3043:   g_autoptr(GBytes) metadata_bytes = NULL;",
      "3044:   g_autoptr(GVariant) commit_metadata = NULL;",
      "",
      "[Removed Lines]",
      "3017:         g_message (\"Warning: Failed to parse old metadata for %s\\n\", flatpak_decomposed_get_ref (op->ref));",
      "3021: static void",
      "3026:                 GBytes *metadata_bytes)",
      "3031:   mark_op_resolved (op, checksum, sideload_path, metadata_bytes, old_metadata_bytes);",
      "3036: static void",
      "3041:                         GVariant *commit_data)",
      "",
      "[Added Lines]",
      "3017:         {",
      "3019:           g_message (\"Warning: Failed to parse old metadata for %s\\n\", flatpak_decomposed_get_ref (op->ref));",
      "3020:         }",
      "3023:   return TRUE;",
      "3026: static gboolean",
      "3031:                 GBytes *metadata_bytes,",
      "3032:                 GError **error)",
      "3037:   if (!mark_op_resolved (op, checksum, sideload_path, metadata_bytes, old_metadata_bytes, error))",
      "3038:     return FALSE;",
      "3040:   return TRUE;",
      "3044: static gboolean",
      "3049:                         GVariant *commit_data,",
      "3050:                         GError **error)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3049:   commit_metadata = g_variant_get_child_value (commit_data, 0);",
      "3050:   g_variant_lookup (commit_metadata, \"xa.metadata\", \"&s\", &xa_metadata);",
      "3051:   if (xa_metadata == NULL)",
      "3056:   if (g_variant_lookup (commit_metadata, \"xa.download-size\", \"t\", &download_size))",
      "3057:     op->download_size = GUINT64_FROM_BE (download_size);",
      "",
      "[Removed Lines]",
      "3052:     g_message (\"Warning: No xa.metadata in local commit %s ref %s\", checksum, flatpak_decomposed_get_ref (op->ref));",
      "3053:   else",
      "3054:     metadata_bytes = g_bytes_new (xa_metadata, strlen (xa_metadata));",
      "",
      "[Added Lines]",
      "3061:     return flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA,",
      "3062:                                \"No xa.metadata in local commit %s ref %s\",",
      "3063:                                checksum, flatpak_decomposed_get_ref (op->ref));",
      "3065:   metadata_bytes = g_bytes_new (xa_metadata, strlen (xa_metadata));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3061:   g_variant_lookup (commit_metadata, OSTREE_COMMIT_META_KEY_ENDOFLIFE, \"s\", &op->eol);",
      "3062:   g_variant_lookup (commit_metadata, OSTREE_COMMIT_META_KEY_ENDOFLIFE_REBASE, \"s\", &op->eol_rebase);",
      "3065: }",
      "3067: static gboolean",
      "3068: try_resolve_op_from_metadata (FlatpakTransaction *self,",
      "3069:                               FlatpakTransactionOperation *op,",
      "3070:                               const char *checksum,",
      "3071:                               GFile *sideload_path,",
      "3073: {",
      "3074:   g_autoptr(GBytes) metadata_bytes = NULL;",
      "3075:   guint64 download_size = 0;",
      "",
      "[Removed Lines]",
      "3064:   resolve_op_end (self, op, checksum, sideload_path, metadata_bytes);",
      "3072:                               FlatpakRemoteState *state)",
      "",
      "[Added Lines]",
      "3075:   return resolve_op_end (self, op, checksum, sideload_path, metadata_bytes, error);",
      "3086:                               FlatpakRemoteState *state,",
      "3087:                               GError **error)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3109:       op->token_type = GINT32_FROM_LE (var_metadata_lookup_int32 (sparse_cache, FLATPAK_SPARSE_CACHE_KEY_TOKEN_TYPE, op->token_type));",
      "3110:     }",
      "3114: }",
      "3116: static gboolean",
      "",
      "[Removed Lines]",
      "3112:   resolve_op_end (self, op, checksum, sideload_path, metadata_bytes);",
      "3113:   return TRUE;",
      "",
      "[Added Lines]",
      "3127:   return resolve_op_end (self, op, checksum, sideload_path, metadata_bytes, error);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3155:           g_assert (op->resolved_commit != NULL);",
      "3157:           continue;",
      "3158:         }",
      "",
      "[Removed Lines]",
      "3156:           mark_op_resolved (op, op->resolved_commit, NULL, NULL, NULL);",
      "",
      "[Added Lines]",
      "3170:           if (!mark_op_resolved (op, op->resolved_commit, NULL, NULL, NULL, error))",
      "3171:             return FALSE;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3167:               op->skip = TRUE;",
      "3168:               continue;",
      "3169:             }",
      "3171:           continue;",
      "3172:         }",
      "3174:       if (op->kind == FLATPAK_TRANSACTION_OPERATION_INSTALL_BUNDLE)",
      "3175:         {",
      "3176:           g_assert (op->commit != NULL);",
      "3178:           continue;",
      "3179:         }",
      "",
      "[Removed Lines]",
      "3170:           mark_op_resolved (op, checksum, NULL, metadata_bytes, NULL);",
      "3177:           mark_op_resolved (op, op->commit, NULL, op->external_metadata, NULL);",
      "",
      "[Added Lines]",
      "3185:           if (!mark_op_resolved (op, checksum, NULL, metadata_bytes, NULL, error))",
      "3186:             return FALSE;",
      "3193:           if (!mark_op_resolved (op, op->commit, NULL, op->external_metadata, NULL, error))",
      "3194:             return FALSE;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "3205:           if (commit_data == NULL)",
      "3206:             return FALSE;",
      "3209:         }",
      "3210:       else",
      "3211:         {",
      "",
      "[Removed Lines]",
      "3208:           resolve_op_from_commit (self, op, checksum, NULL, commit_data);",
      "",
      "[Added Lines]",
      "3225:           if (!resolve_op_from_commit (self, op, checksum, NULL, commit_data, error))",
      "3226:             return FALSE;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "3264:             }",
      "3268:             {",
      "3272:               g_autoptr(GVariant) commit_data = NULL;",
      "",
      "[Removed Lines]",
      "3267:           if (!try_resolve_op_from_metadata (self, op, checksum, sideload_path, state))",
      "",
      "[Added Lines]",
      "3285:           if (!try_resolve_op_from_metadata (self, op, checksum, sideload_path, state, &local_error))",
      "3287:               if (local_error)",
      "3288:                 {",
      "3290:                   g_propagate_error (error, g_steal_pointer (&local_error));",
      "3291:                   return FALSE;",
      "3292:                 }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "3302:                   return FALSE;",
      "3303:                 }",
      "3306:             }",
      "3307:         }",
      "3308:     }",
      "",
      "[Removed Lines]",
      "3305:               resolve_op_from_commit (self, op, checksum, sideload_path, commit_data);",
      "",
      "[Added Lines]",
      "3330:               if (!resolve_op_from_commit (self, op, checksum, sideload_path, commit_data, error))",
      "3331:                 return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "927c2b031821d263182a6b77ff9d713e9c64695c",
      "candidate_info": {
        "commit_hash": "927c2b031821d263182a6b77ff9d713e9c64695c",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/927c2b031821d263182a6b77ff9d713e9c64695c",
        "files": [
          "common/flatpak-transaction.c"
        ],
        "message": "Transaction: Fail the resolve if xa.metadata invalid or missing\n\nIf we fail to parse xa.metadata from the summary cache or the commit\nxa.metadata we fail the resolve.\n\nIf xa.metadata is missing in the commit we fail the resolve (it is\nalways set in the summary cache, because summary update converts\nmissing xa.metadata to \"\", so we either get that, or cache miss which\nleads to resolving from the commit.\n\nThis means that op->resolved_metadata is always set during install and\nupdates, which means we will show the app permissions. The transaction\nwill also always make sure that this data actually matches what gets\ndeployed.\n\nBefore this change an invalid metadata in the summary cache could lead\nto a NULL resolved_metadata, which means we wouldn't print the app\npermissions, yet we would still deploy some metadata file that could\nhave permissions. (NOTE: It would fail to deploy unless the\nxa.metadata in the commit matched the metadata file, but in this\ncorner case we would't compare the summary and commit metadata, so\nthey may differ.)\n\n(cherry picked from commit 5036bca4214d5b77e884dec42e36496a06e74081)",
        "before_after_code_files": [
          "common/flatpak-transaction.c||common/flatpak-transaction.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "common/flatpak-transaction.c||common/flatpak-transaction.c"
          ],
          "candidate": [
            "common/flatpak-transaction.c||common/flatpak-transaction.c"
          ]
        }
      },
      "candidate_diff": {
        "common/flatpak-transaction.c||common/flatpak-transaction.c": [
          "File: common/flatpak-transaction.c -> common/flatpak-transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2970:   g_signal_emit (self, signals[END_OF_LIFED_WITH_REBASE], 0, op->remote, flatpak_decomposed_get_ref (op->ref), op->eol, op->eol_rebase, previous_ids, &op->skip);",
          "2971: }",
          "2974: mark_op_resolved (FlatpakTransactionOperation *op,",
          "2975:                   const char                  *commit,",
          "2976:                   GFile                       *sideload_path,",
          "2977:                   GBytes                      *metadata,",
          "2979: {",
          "2980:   g_debug (\"marking op %s:%s resolved to %s\", kind_to_str (op->kind), flatpak_decomposed_get_ref (op->ref), commit ? commit : \"-\");",
          "",
          "[Removed Lines]",
          "2973: static void",
          "2978:                   GBytes                      *old_metadata)",
          "",
          "[Added Lines]",
          "2973: static gboolean",
          "2978:                   GBytes                      *old_metadata,",
          "2979:                   GError                     **error)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2997:   if (metadata)",
          "2998:     {",
          "2999:       g_autoptr(GKeyFile) metakey = g_key_file_new ();",
          "3007:     }",
          "3008:   if (old_metadata)",
          "3009:     {",
          "",
          "[Removed Lines]",
          "3000:       if (g_key_file_load_from_bytes (metakey, metadata, G_KEY_FILE_NONE, NULL))",
          "3001:         {",
          "3002:           op->resolved_metadata = g_bytes_ref (metadata);",
          "3003:           op->resolved_metakey = g_steal_pointer (&metakey);",
          "3004:         }",
          "3005:       else",
          "3006:         g_message (\"Warning: Failed to parse metadata for %s\\n\", flatpak_decomposed_get_ref (op->ref));",
          "",
          "[Added Lines]",
          "3001:       if (!g_key_file_load_from_bytes (metakey, metadata, G_KEY_FILE_NONE, NULL))",
          "3002:         return flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA,",
          "3003:                                    \"Metadata for %s is invalid\", flatpak_decomposed_get_ref (op->ref));",
          "3005:       op->resolved_metadata = g_bytes_ref (metadata);",
          "3006:       op->resolved_metakey = g_steal_pointer (&metakey);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3014:           op->resolved_old_metakey = g_steal_pointer (&metakey);",
          "3015:         }",
          "3016:       else",
          "3018:     }",
          "3019: }",
          "3022: resolve_op_end (FlatpakTransaction *self,",
          "3023:                 FlatpakTransactionOperation *op,",
          "3024:                 const char *checksum,",
          "3025:                 GFile *sideload_path,",
          "3027: {",
          "3028:   g_autoptr(GBytes) old_metadata_bytes = NULL;",
          "3030:   old_metadata_bytes = load_deployed_metadata (self, op->ref, NULL, NULL);",
          "3032:   emit_eol_and_maybe_skip (self, op);",
          "3033:  }",
          "3037: resolve_op_from_commit (FlatpakTransaction *self,",
          "3038:                         FlatpakTransactionOperation *op,",
          "3039:                         const char *checksum,",
          "3040:                         GFile *sideload_path,",
          "3042: {",
          "3043:   g_autoptr(GBytes) metadata_bytes = NULL;",
          "3044:   g_autoptr(GVariant) commit_metadata = NULL;",
          "",
          "[Removed Lines]",
          "3017:         g_message (\"Warning: Failed to parse old metadata for %s\\n\", flatpak_decomposed_get_ref (op->ref));",
          "3021: static void",
          "3026:                 GBytes *metadata_bytes)",
          "3031:   mark_op_resolved (op, checksum, sideload_path, metadata_bytes, old_metadata_bytes);",
          "3036: static void",
          "3041:                         GVariant *commit_data)",
          "",
          "[Added Lines]",
          "3017:         {",
          "3019:           g_message (\"Warning: Failed to parse old metadata for %s\\n\", flatpak_decomposed_get_ref (op->ref));",
          "3020:         }",
          "3023:   return TRUE;",
          "3026: static gboolean",
          "3031:                 GBytes *metadata_bytes,",
          "3032:                 GError **error)",
          "3037:   if (!mark_op_resolved (op, checksum, sideload_path, metadata_bytes, old_metadata_bytes, error))",
          "3038:     return FALSE;",
          "3040:   return TRUE;",
          "3044: static gboolean",
          "3049:                         GVariant *commit_data,",
          "3050:                         GError **error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3049:   commit_metadata = g_variant_get_child_value (commit_data, 0);",
          "3050:   g_variant_lookup (commit_metadata, \"xa.metadata\", \"&s\", &xa_metadata);",
          "3051:   if (xa_metadata == NULL)",
          "3056:   if (g_variant_lookup (commit_metadata, \"xa.download-size\", \"t\", &download_size))",
          "3057:     op->download_size = GUINT64_FROM_BE (download_size);",
          "",
          "[Removed Lines]",
          "3052:     g_message (\"Warning: No xa.metadata in local commit %s ref %s\", checksum, flatpak_decomposed_get_ref (op->ref));",
          "3053:   else",
          "3054:     metadata_bytes = g_bytes_new (xa_metadata, strlen (xa_metadata));",
          "",
          "[Added Lines]",
          "3061:     return flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA,",
          "3062:                                \"No xa.metadata in local commit %s ref %s\",",
          "3063:                                checksum, flatpak_decomposed_get_ref (op->ref));",
          "3065:   metadata_bytes = g_bytes_new (xa_metadata, strlen (xa_metadata));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3061:   g_variant_lookup (commit_metadata, OSTREE_COMMIT_META_KEY_ENDOFLIFE, \"s\", &op->eol);",
          "3062:   g_variant_lookup (commit_metadata, OSTREE_COMMIT_META_KEY_ENDOFLIFE_REBASE, \"s\", &op->eol_rebase);",
          "3065: }",
          "3067: static gboolean",
          "3068: try_resolve_op_from_metadata (FlatpakTransaction *self,",
          "3069:                               FlatpakTransactionOperation *op,",
          "3070:                               const char *checksum,",
          "3071:                               GFile *sideload_path,",
          "3073: {",
          "3074:   g_autoptr(GBytes) metadata_bytes = NULL;",
          "3075:   guint64 download_size = 0;",
          "",
          "[Removed Lines]",
          "3064:   resolve_op_end (self, op, checksum, sideload_path, metadata_bytes);",
          "3072:                               FlatpakRemoteState *state)",
          "",
          "[Added Lines]",
          "3075:   return resolve_op_end (self, op, checksum, sideload_path, metadata_bytes, error);",
          "3086:                               FlatpakRemoteState *state,",
          "3087:                               GError **error)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3109:       op->token_type = GINT32_FROM_LE (var_metadata_lookup_int32 (sparse_cache, FLATPAK_SPARSE_CACHE_KEY_TOKEN_TYPE, op->token_type));",
          "3110:     }",
          "3114: }",
          "3116: static gboolean",
          "",
          "[Removed Lines]",
          "3112:   resolve_op_end (self, op, checksum, sideload_path, metadata_bytes);",
          "3113:   return TRUE;",
          "",
          "[Added Lines]",
          "3127:   return resolve_op_end (self, op, checksum, sideload_path, metadata_bytes, error);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3155:           g_assert (op->resolved_commit != NULL);",
          "3157:           continue;",
          "3158:         }",
          "",
          "[Removed Lines]",
          "3156:           mark_op_resolved (op, op->resolved_commit, NULL, NULL, NULL);",
          "",
          "[Added Lines]",
          "3170:           if (!mark_op_resolved (op, op->resolved_commit, NULL, NULL, NULL, error))",
          "3171:             return FALSE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3167:               op->skip = TRUE;",
          "3168:               continue;",
          "3169:             }",
          "3171:           continue;",
          "3172:         }",
          "3174:       if (op->kind == FLATPAK_TRANSACTION_OPERATION_INSTALL_BUNDLE)",
          "3175:         {",
          "3176:           g_assert (op->commit != NULL);",
          "3178:           continue;",
          "3179:         }",
          "",
          "[Removed Lines]",
          "3170:           mark_op_resolved (op, checksum, NULL, metadata_bytes, NULL);",
          "3177:           mark_op_resolved (op, op->commit, NULL, op->external_metadata, NULL);",
          "",
          "[Added Lines]",
          "3185:           if (!mark_op_resolved (op, checksum, NULL, metadata_bytes, NULL, error))",
          "3186:             return FALSE;",
          "3193:           if (!mark_op_resolved (op, op->commit, NULL, op->external_metadata, NULL, error))",
          "3194:             return FALSE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3205:           if (commit_data == NULL)",
          "3206:             return FALSE;",
          "3209:         }",
          "3210:       else",
          "3211:         {",
          "",
          "[Removed Lines]",
          "3208:           resolve_op_from_commit (self, op, checksum, NULL, commit_data);",
          "",
          "[Added Lines]",
          "3225:           if (!resolve_op_from_commit (self, op, checksum, NULL, commit_data, error))",
          "3226:             return FALSE;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3264:             }",
          "3268:             {",
          "3272:               g_autoptr(GVariant) commit_data = NULL;",
          "",
          "[Removed Lines]",
          "3267:           if (!try_resolve_op_from_metadata (self, op, checksum, sideload_path, state))",
          "",
          "[Added Lines]",
          "3285:           if (!try_resolve_op_from_metadata (self, op, checksum, sideload_path, state, &local_error))",
          "3287:               if (local_error)",
          "3288:                 {",
          "3290:                   g_propagate_error (error, g_steal_pointer (&local_error));",
          "3291:                   return FALSE;",
          "3292:                 }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3302:                   return FALSE;",
          "3303:                 }",
          "3306:             }",
          "3307:         }",
          "3308:     }",
          "",
          "[Removed Lines]",
          "3305:               resolve_op_from_commit (self, op, checksum, sideload_path, commit_data);",
          "",
          "[Added Lines]",
          "3330:               if (!resolve_op_from_commit (self, op, checksum, sideload_path, commit_data, error))",
          "3331:                 return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba818f504c926baaf6e362be8159cfacf994310e",
      "candidate_info": {
        "commit_hash": "ba818f504c926baaf6e362be8159cfacf994310e",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/ba818f504c926baaf6e362be8159cfacf994310e",
        "files": [
          "common/flatpak-dir.c",
          "common/flatpak-transaction.c",
          "common/flatpak-utils.c"
        ],
        "message": "Fix metadata file contents after null terminators being ignored\n\nIn particular, if a null terminator is placed inside the metadata file,\nFlatpak will only compare the text *before* it to the value of\nxa.metadata, but the full file will be parsed when permissions are set\nat runtime. This means that any app can include a null terminator in its\npermissions metadata, and Flatpak will only show the user the\npermissions *preceding* the terminator during install, but the\npermissions *after* the terminator are applied at runtime.\n\nFixes GHSA-qpjc-vq3c-572j / CVE-2021-43860\n\nSigned-off-by: Ryan Gonzalez <ryan.gonzalez@collabora.com>",
        "before_after_code_files": [
          "common/flatpak-dir.c||common/flatpak-dir.c",
          "common/flatpak-transaction.c||common/flatpak-transaction.c",
          "common/flatpak-utils.c||common/flatpak-utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/flatpak-transaction.c||common/flatpak-transaction.c"
          ],
          "candidate": [
            "common/flatpak-transaction.c||common/flatpak-transaction.c"
          ]
        }
      },
      "candidate_diff": {
        "common/flatpak-dir.c||common/flatpak-dir.c": [
          "File: common/flatpak-dir.c -> common/flatpak-dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1794: validate_commit_metadata (GVariant   *commit_data,",
          "1795:                           const char *ref,",
          "1796:                           const char *required_metadata,",
          "1797:                           gboolean   require_xa_metadata,",
          "1798:                           GError   **error)",
          "1799: {",
          "1800:   g_autoptr(GVariant) commit_metadata = NULL;",
          "1801:   const char *xa_metadata = NULL;",
          "1803:   commit_metadata = g_variant_get_child_value (commit_data, 0);",
          "1805:   if (commit_metadata != NULL)",
          "1808:   if ((xa_metadata == NULL && require_xa_metadata) ||",
          "1810:     {",
          "1811:       g_set_error (error, G_IO_ERROR, G_IO_ERROR_PERMISSION_DENIED,",
          "1812:                    _(\"Commit metadata for %s not matching expected metadata\"), ref);",
          "",
          "[Removed Lines]",
          "1806:     g_variant_lookup (commit_metadata, \"xa.metadata\", \"&s\", &xa_metadata);",
          "1809:       (xa_metadata != NULL && g_strcmp0 (required_metadata, xa_metadata) != 0))",
          "",
          "[Added Lines]",
          "1797:                           gsize       required_metadata_size,",
          "1802:   g_autoptr(GVariant) xa_metadata_v = NULL;",
          "1804:   gsize xa_metadata_size = 0;",
          "1809:     {",
          "1810:       xa_metadata_v = g_variant_lookup_value (commit_metadata,",
          "1811:                                               \"xa.metadata\",",
          "1812:                                               G_VARIANT_TYPE_STRING);",
          "1813:       if (xa_metadata_v)",
          "1814:         xa_metadata = g_variant_get_string (xa_metadata_v, &xa_metadata_size);",
          "1815:     }",
          "1818:       (xa_metadata != NULL && (xa_metadata_size != required_metadata_size ||",
          "1819:                                memcmp (xa_metadata, required_metadata, xa_metadata_size) != 0)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3515:       g_autoptr(GKeyFile) keyfile = NULL;",
          "3516:       g_autoptr(GFile) metadata_file = NULL;",
          "3517:       g_autofree char *metadata_contents = NULL;",
          "3518:       g_autofree char *id = flatpak_decomposed_dup_id (ref);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3528:       gsize metadata_size = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3528:       keyfile = g_key_file_new ();",
          "3529:       metadata_file = g_file_resolve_relative_path (deploy_dir, \"metadata\");",
          "3530:       if (!g_file_load_contents (metadata_file, cancellable,",
          "3532:         return NULL;",
          "3534:         return NULL;",
          "3535:       add_metadata_to_deploy_data (&metadata_dict, keyfile);",
          "",
          "[Removed Lines]",
          "3531:                                  &metadata_contents, NULL, NULL, error))",
          "3533:       if (!g_key_file_load_from_data (keyfile, metadata_contents, -1, 0, error))",
          "",
          "[Added Lines]",
          "3542:                                  &metadata_contents, &metadata_size, NULL, error))",
          "3544:       if (!g_key_file_load_from_data (keyfile, metadata_contents, metadata_size, 0, error))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5833:     {",
          "5834:       g_autoptr(GVariant) commit_data = NULL;",
          "5835:       if (!ostree_repo_load_commit (repo, rev, &commit_data, NULL, error) ||",
          "5838:     }",
          "5840:   if (!flatpak_dir_pull_extra_data (self, repo,",
          "",
          "[Removed Lines]",
          "5836:           !validate_commit_metadata (commit_data, ref, (const char *)g_bytes_get_data (require_metadata, NULL), TRUE, error))",
          "5837:         return FALSE;",
          "",
          "[Added Lines]",
          "5847:           !validate_commit_metadata (commit_data,",
          "5848:                                      ref,",
          "5849:                                      (const char *)g_bytes_get_data (require_metadata, NULL),",
          "5850:                                      g_bytes_get_size (require_metadata),",
          "5851:                                      TRUE,",
          "5852:                                      error))",
          "5853:         goto out;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8156:   g_auto(GLnxLockFile) lock = { 0, };",
          "8157:   g_autoptr(GFile) metadata_file = NULL;",
          "8158:   g_autofree char *metadata_contents = NULL;",
          "8159:   gboolean is_oci;",
          "8160:   const char *flatpak;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8175:   gsize metadata_size = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8366:   keyfile = g_key_file_new ();",
          "8367:   metadata_file = g_file_resolve_relative_path (checkoutdir, \"metadata\");",
          "8368:   if (g_file_load_contents (metadata_file, NULL,",
          "8370:     {",
          "8371:       if (!g_key_file_load_from_data (keyfile,",
          "8372:                                       metadata_contents,",
          "8374:                                       0, error))",
          "8375:         return FALSE;",
          "",
          "[Removed Lines]",
          "8369:                             &metadata_contents, NULL, NULL, NULL))",
          "8373:                                       -1,",
          "",
          "[Added Lines]",
          "8386:                             &metadata_contents,",
          "8387:                             &metadata_size, NULL, NULL))",
          "8391:                                       metadata_size,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8387:   is_oci = flatpak_dir_get_remote_oci (self, origin);",
          "8388:   if (!validate_commit_metadata (commit_data, flatpak_decomposed_get_ref (ref),",
          "8390:     return FALSE;",
          "8392:   dotref = g_file_resolve_relative_path (checkoutdir, \"files/.ref\");",
          "",
          "[Removed Lines]",
          "8389:                                  metadata_contents, !is_oci, error))",
          "",
          "[Added Lines]",
          "8407:                                  metadata_contents, metadata_size, !is_oci, error))",
          "",
          "---------------"
        ],
        "common/flatpak-transaction.c||common/flatpak-transaction.c": [
          "File: common/flatpak-transaction.c -> common/flatpak-transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2539:     return FALSE;",
          "2541:   if (external_metadata)",
          "2544:   return TRUE;",
          "2545: }",
          "",
          "[Removed Lines]",
          "2542:     op->external_metadata = g_bytes_new (external_metadata, strlen (external_metadata) + 1);",
          "",
          "[Added Lines]",
          "2542:     op->external_metadata = g_bytes_new (external_metadata, strlen (external_metadata));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2950:       return NULL;",
          "2951:     }",
          "2954: }",
          "2956: static void",
          "",
          "[Removed Lines]",
          "2953:   return g_bytes_new_take (g_steal_pointer (&metadata_contents), metadata_contents_length + 1);",
          "",
          "[Added Lines]",
          "2953:   return g_bytes_new_take (g_steal_pointer (&metadata_contents), metadata_contents_length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3051:   if (xa_metadata == NULL)",
          "3052:     g_message (\"Warning: No xa.metadata in local commit %s ref %s\", checksum, flatpak_decomposed_get_ref (op->ref));",
          "3053:   else",
          "3056:   if (g_variant_lookup (commit_metadata, \"xa.download-size\", \"t\", &download_size))",
          "3057:     op->download_size = GUINT64_FROM_BE (download_size);",
          "",
          "[Removed Lines]",
          "3054:     metadata_bytes = g_bytes_new (xa_metadata, strlen (xa_metadata) + 1);",
          "",
          "[Added Lines]",
          "3054:     metadata_bytes = g_bytes_new (xa_metadata, strlen (xa_metadata));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3091:                                           &download_size, &installed_size, &metadata, NULL))",
          "3092:       return FALSE;",
          "3096:   if (flatpak_remote_state_lookup_ref (state, flatpak_decomposed_get_ref (op->ref),",
          "3097:                                        NULL, NULL, &info, NULL, NULL))",
          "",
          "[Removed Lines]",
          "3094:   metadata_bytes = g_bytes_new (metadata, strlen (metadata) + 1);",
          "",
          "[Added Lines]",
          "3094:   metadata_bytes = g_bytes_new (metadata, strlen (metadata));",
          "",
          "---------------"
        ],
        "common/flatpak-utils.c||common/flatpak-utils.c": [
          "File: common/flatpak-utils.c -> common/flatpak-utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6667:                           GCancellable *cancellable,",
          "6668:                           GError      **error)",
          "6669: {",
          "6670:   g_autofree char *metadata_contents = NULL;",
          "6671:   g_autofree char *to_checksum = NULL;",
          "6672:   g_autoptr(GFile) root = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6670:   gsize metadata_size = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6683:   if (metadata == NULL)",
          "6684:     return FALSE;",
          "6686:   if (!ostree_repo_get_remote_option (repo, remote, \"collection-id\", NULL,",
          "6687:                                       &remote_collection_id, NULL))",
          "6688:     remote_collection_id = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6687:   metadata_size = strlen (metadata_contents);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6752:                                   cancellable, error) < 0)",
          "6753:         return FALSE;",
          "6758:       metadata_valid =",
          "6759:         metadata_contents != NULL &&",
          "6761:     }",
          "6762:   else",
          "6763:     {",
          "",
          "[Removed Lines]",
          "6756:       g_output_stream_write (G_OUTPUT_STREAM (data_stream), \"\\0\", 1, NULL, NULL);",
          "6760:         strcmp (metadata_contents, g_memory_output_stream_get_data (data_stream)) == 0;",
          "",
          "[Added Lines]",
          "6760:         metadata_size == g_memory_output_stream_get_data_size (data_stream) &&",
          "6761:         memcmp (metadata_contents, g_memory_output_stream_get_data (data_stream), metadata_size) == 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ee257cfac52c28c2752afd8873a61435e16e3fc",
      "candidate_info": {
        "commit_hash": "7ee257cfac52c28c2752afd8873a61435e16e3fc",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/7ee257cfac52c28c2752afd8873a61435e16e3fc",
        "files": [
          "common/flatpak-transaction.c"
        ],
        "message": "Transaction: Fail the resolve if xa.metadata invalid or missing\n\nIf we fail to parse xa.metadata from the summary cache or the commit\nxa.metadata we fail the resolve.\n\nIf xa.metadata is missing in the commit we fail the resolve (it is\nalways set in the summary cache, because summary update converts\nmissing xa.metadata to \"\", so we either get that, or cache miss which\nleads to resolving from the commit.\n\nThis means that op->resolved_metadata is always set during install and\nupdates, which means we will show the app permissions. The transaction\nwill also always make sure that this data actually matches what gets\ndeployed.\n\nBefore this change an invalid metadata in the summary cache could lead\nto a NULL resolved_metadata, which means we wouldn't print the app\npermissions, yet we would still deploy some metadata file that could\nhave permissions. (NOTE: It would fail to deploy unless the\nxa.metadata in the commit matched the metadata file, but in this\ncorner case we would't compare the summary and commit metadata, so\nthey may differ.)\n\n(cherry picked from commit 5036bca4214d5b77e884dec42e36496a06e74081)\n(backported from commit 10367bd7d2036d39bcd108d7ed81fee9c87685f3)",
        "before_after_code_files": [
          "common/flatpak-transaction.c||common/flatpak-transaction.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "common/flatpak-transaction.c||common/flatpak-transaction.c"
          ],
          "candidate": [
            "common/flatpak-transaction.c||common/flatpak-transaction.c"
          ]
        }
      },
      "candidate_diff": {
        "common/flatpak-transaction.c||common/flatpak-transaction.c": [
          "File: common/flatpak-transaction.c -> common/flatpak-transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2601:   g_signal_emit (self, signals[END_OF_LIFED_WITH_REBASE], 0, op->remote, op->ref, op->eol, op->eol_rebase, previous_ids, &op->skip);",
          "2602: }",
          "2605: mark_op_resolved (FlatpakTransactionOperation *op,",
          "2606:                   const char                  *commit,",
          "2607:                   GFile                       *sideload_path,",
          "2608:                   GBytes                      *metadata,",
          "2610: {",
          "2611:   g_debug (\"marking op %s:%s resolved to %s\", kind_to_str (op->kind), op->ref, commit ? commit : \"-\");",
          "",
          "[Removed Lines]",
          "2604: static void",
          "2609:                   GBytes                      *old_metadata)",
          "",
          "[Added Lines]",
          "2604: static gboolean",
          "2609:                   GBytes                      *old_metadata,",
          "2610:                   GError                     **error)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2624:   if (metadata)",
          "2625:     {",
          "2626:       g_autoptr(GKeyFile) metakey = g_key_file_new ();",
          "2634:     }",
          "2635:   if (old_metadata)",
          "2636:     {",
          "",
          "[Removed Lines]",
          "2627:       if (g_key_file_load_from_bytes (metakey, metadata, G_KEY_FILE_NONE, NULL))",
          "2628:         {",
          "2629:           op->resolved_metadata = g_bytes_ref (metadata);",
          "2630:           op->resolved_metakey = g_steal_pointer (&metakey);",
          "2631:         }",
          "2632:       else",
          "2633:         g_message (\"Warning: Failed to parse metadata for %s\\n\", op->ref);",
          "",
          "[Added Lines]",
          "2628:       if (!g_key_file_load_from_bytes (metakey, metadata, G_KEY_FILE_NONE, NULL))",
          "2629:         return flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA, \"Metadata for %s is invalid\", op->ref);",
          "2631:       op->resolved_metadata = g_bytes_ref (metadata);",
          "2632:       op->resolved_metakey = g_steal_pointer (&metakey);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2641:           op->resolved_old_metakey = g_steal_pointer (&metakey);",
          "2642:         }",
          "2643:       else",
          "2645:     }",
          "2646: }",
          "2649: resolve_op_end (FlatpakTransaction *self,",
          "2650:                 FlatpakTransactionOperation *op,",
          "2651:                 const char *checksum,",
          "2652:                 GFile *sideload_path,",
          "2654: {",
          "2655:   g_autoptr(GBytes) old_metadata_bytes = NULL;",
          "2657:   old_metadata_bytes = load_deployed_metadata (self, op->ref, NULL);",
          "2659:   emit_eol_and_maybe_skip (self, op);",
          "2660:  }",
          "2664: resolve_op_from_commit (FlatpakTransaction *self,",
          "2665:                         FlatpakTransactionOperation *op,",
          "2666:                         const char *checksum,",
          "2667:                         GFile *sideload_path,",
          "2669: {",
          "2670:   g_autoptr(GBytes) metadata_bytes = NULL;",
          "2671:   g_autoptr(GVariant) commit_metadata = NULL;",
          "",
          "[Removed Lines]",
          "2644:         g_message (\"Warning: Failed to parse old metadata for %s\\n\", op->ref);",
          "2648: static void",
          "2653:                 GBytes *metadata_bytes)",
          "2658:   mark_op_resolved (op, checksum, sideload_path, metadata_bytes, old_metadata_bytes);",
          "2663: static void",
          "2668:                         GVariant *commit_data)",
          "",
          "[Added Lines]",
          "2643:         {",
          "2645:           g_message (\"Warning: Failed to parse old metadata for %s\\n\", op->ref);",
          "2646:         }",
          "2649:   return TRUE;",
          "2652: static gboolean",
          "2657:                 GBytes *metadata_bytes,",
          "2658:                 GError **error)",
          "2663:   if (!mark_op_resolved (op, checksum, sideload_path, metadata_bytes, old_metadata_bytes, error))",
          "2664:     return FALSE;",
          "2666:   return TRUE;",
          "2670: static gboolean",
          "2675:                         GVariant *commit_data,",
          "2676:                         GError **error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2676:   commit_metadata = g_variant_get_child_value (commit_data, 0);",
          "2677:   g_variant_lookup (commit_metadata, \"xa.metadata\", \"&s\", &xa_metadata);",
          "2678:   if (xa_metadata == NULL)",
          "2683:   if (g_variant_lookup (commit_metadata, \"xa.download-size\", \"t\", &download_size))",
          "2684:     op->download_size = GUINT64_FROM_BE (download_size);",
          "",
          "[Removed Lines]",
          "2679:     g_message (\"Warning: No xa.metadata in local commit %s ref %s\", checksum, op->ref);",
          "2680:   else",
          "2681:     metadata_bytes = g_bytes_new (xa_metadata, strlen (xa_metadata));",
          "",
          "[Added Lines]",
          "2687:     return flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA,",
          "2688:                                \"No xa.metadata in local commit %s ref %s\", checksum, op->ref);",
          "2690:   metadata_bytes = g_bytes_new (xa_metadata, strlen (xa_metadata));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2688:   g_variant_lookup (commit_metadata, OSTREE_COMMIT_META_KEY_ENDOFLIFE, \"s\", &op->eol);",
          "2689:   g_variant_lookup (commit_metadata, OSTREE_COMMIT_META_KEY_ENDOFLIFE_REBASE, \"s\", &op->eol_rebase);",
          "2692: }",
          "2694: static gboolean",
          "2695: try_resolve_op_from_metadata (FlatpakTransaction *self,",
          "2696:                               FlatpakTransactionOperation *op,",
          "2697:                               const char *checksum,",
          "2698:                               GFile *sideload_path,",
          "2700: {",
          "2701:   g_autoptr(GBytes) metadata_bytes = NULL;",
          "2702:   guint64 download_size = 0;",
          "",
          "[Removed Lines]",
          "2691:   resolve_op_end (self, op, checksum, sideload_path, metadata_bytes);",
          "2699:                               FlatpakRemoteState *state)",
          "",
          "[Added Lines]",
          "2700:   return resolve_op_end (self, op, checksum, sideload_path, metadata_bytes, error);",
          "2711:                               FlatpakRemoteState *state,",
          "2712:                               GError **error)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2734:       op->token_type = GINT32_FROM_LE (var_metadata_lookup_int32 (sparse_cache, FLATPAK_SPARSE_CACHE_KEY_TOKEN_TYPE, op->token_type));",
          "2735:     }",
          "2739: }",
          "2741: static gboolean",
          "",
          "[Removed Lines]",
          "2737:   resolve_op_end (self, op, checksum, sideload_path, metadata_bytes);",
          "2738:   return TRUE;",
          "",
          "[Added Lines]",
          "2750:   return resolve_op_end (self, op, checksum, sideload_path, metadata_bytes, error);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2780:           g_assert (op->resolved_commit != NULL);",
          "2782:           continue;",
          "2783:         }",
          "",
          "[Removed Lines]",
          "2781:           mark_op_resolved (op, op->resolved_commit, NULL, NULL, NULL);",
          "",
          "[Added Lines]",
          "2793:           if (!mark_op_resolved (op, op->resolved_commit, NULL, NULL, NULL, error))",
          "2794:             return FALSE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2789:           metadata_bytes = load_deployed_metadata (self, op->ref, &checksum);",
          "2791:           continue;",
          "2792:         }",
          "2794:       if (op->kind == FLATPAK_TRANSACTION_OPERATION_INSTALL_BUNDLE)",
          "2795:         {",
          "2796:           g_assert (op->commit != NULL);",
          "2798:           continue;",
          "2799:         }",
          "",
          "[Removed Lines]",
          "2790:           mark_op_resolved (op, checksum, NULL, metadata_bytes, NULL);",
          "2797:           mark_op_resolved (op, op->commit, NULL, op->external_metadata, NULL);",
          "",
          "[Added Lines]",
          "2803:           if (!mark_op_resolved (op, checksum, NULL, metadata_bytes, NULL, error))",
          "2804:             return FALSE;",
          "2811:           if (!mark_op_resolved (op, op->commit, NULL, op->external_metadata, NULL, error))",
          "2812:             return FALSE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2824:           if (commit_data == NULL)",
          "2825:             return FALSE;",
          "2828:         }",
          "2829:       else",
          "2830:         {",
          "",
          "[Removed Lines]",
          "2827:           resolve_op_from_commit (self, op, checksum, NULL, commit_data);",
          "",
          "[Added Lines]",
          "2842:           if (!resolve_op_from_commit (self, op, checksum, NULL, commit_data, error))",
          "2843:             return FALSE;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2882:             }",
          "2886:             {",
          "2890:               g_autoptr(GVariant) commit_data = NULL;",
          "",
          "[Removed Lines]",
          "2885:           if (!try_resolve_op_from_metadata (self, op, checksum, sideload_path, state))",
          "",
          "[Added Lines]",
          "2901:           if (!try_resolve_op_from_metadata (self, op, checksum, sideload_path, state, &local_error))",
          "2903:               if (local_error)",
          "2904:                 {",
          "2906:                   g_propagate_error (error, g_steal_pointer (&local_error));",
          "2907:                   return FALSE;",
          "2908:                 }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2918:                   return FALSE;",
          "2919:                 }",
          "2922:             }",
          "2923:         }",
          "2924:     }",
          "",
          "[Removed Lines]",
          "2921:               resolve_op_from_commit (self, op, checksum, sideload_path, commit_data);",
          "",
          "[Added Lines]",
          "2944:               if (!resolve_op_from_commit (self, op, checksum, sideload_path, commit_data, error))",
          "2945:                 return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10367bd7d2036d39bcd108d7ed81fee9c87685f3",
      "candidate_info": {
        "commit_hash": "10367bd7d2036d39bcd108d7ed81fee9c87685f3",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/10367bd7d2036d39bcd108d7ed81fee9c87685f3",
        "files": [
          "common/flatpak-transaction.c"
        ],
        "message": "Transaction: Fail the resolve if xa.metadata invalid or missing\n\nIf we fail to parse xa.metadata from the summary cache or the commit\nxa.metadata we fail the resolve.\n\nIf xa.metadata is missing in the commit we fail the resolve (it is\nalways set in the summary cache, because summary update converts\nmissing xa.metadata to \"\", so we either get that, or cache miss which\nleads to resolving from the commit.\n\nThis means that op->resolved_metadata is always set during install and\nupdates, which means we will show the app permissions. The transaction\nwill also always make sure that this data actually matches what gets\ndeployed.\n\nBefore this change an invalid metadata in the summary cache could lead\nto a NULL resolved_metadata, which means we wouldn't print the app\npermissions, yet we would still deploy some metadata file that could\nhave permissions. (NOTE: It would fail to deploy unless the\nxa.metadata in the commit matched the metadata file, but in this\ncorner case we would't compare the summary and commit metadata, so\nthey may differ.)\n\n(cherry picked from commit 5036bca4214d5b77e884dec42e36496a06e74081)",
        "before_after_code_files": [
          "common/flatpak-transaction.c||common/flatpak-transaction.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "common/flatpak-transaction.c||common/flatpak-transaction.c"
          ],
          "candidate": [
            "common/flatpak-transaction.c||common/flatpak-transaction.c"
          ]
        }
      },
      "candidate_diff": {
        "common/flatpak-transaction.c||common/flatpak-transaction.c": [
          "File: common/flatpak-transaction.c -> common/flatpak-transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2957:   g_signal_emit (self, signals[END_OF_LIFED_WITH_REBASE], 0, op->remote, flatpak_decomposed_get_ref (op->ref), op->eol, op->eol_rebase, previous_ids, &op->skip);",
          "2958: }",
          "2961: mark_op_resolved (FlatpakTransactionOperation *op,",
          "2962:                   const char                  *commit,",
          "2963:                   GFile                       *sideload_path,",
          "2964:                   GBytes                      *metadata,",
          "2966: {",
          "2967:   g_debug (\"marking op %s:%s resolved to %s\", kind_to_str (op->kind), flatpak_decomposed_get_ref (op->ref), commit ? commit : \"-\");",
          "",
          "[Removed Lines]",
          "2960: static void",
          "2965:                   GBytes                      *old_metadata)",
          "",
          "[Added Lines]",
          "2960: static gboolean",
          "2965:                   GBytes                      *old_metadata,",
          "2966:                   GError                     **error)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2980:   if (metadata)",
          "2981:     {",
          "2982:       g_autoptr(GKeyFile) metakey = g_key_file_new ();",
          "2990:     }",
          "2991:   if (old_metadata)",
          "2992:     {",
          "",
          "[Removed Lines]",
          "2983:       if (g_key_file_load_from_bytes (metakey, metadata, G_KEY_FILE_NONE, NULL))",
          "2984:         {",
          "2985:           op->resolved_metadata = g_bytes_ref (metadata);",
          "2986:           op->resolved_metakey = g_steal_pointer (&metakey);",
          "2987:         }",
          "2988:       else",
          "2989:         g_message (\"Warning: Failed to parse metadata for %s\\n\", flatpak_decomposed_get_ref (op->ref));",
          "",
          "[Added Lines]",
          "2984:       if (!g_key_file_load_from_bytes (metakey, metadata, G_KEY_FILE_NONE, NULL))",
          "2985:         return flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA,",
          "2986:                                    \"Metadata for %s is invalid\", flatpak_decomposed_get_ref (op->ref));",
          "2988:       op->resolved_metadata = g_bytes_ref (metadata);",
          "2989:       op->resolved_metakey = g_steal_pointer (&metakey);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2997:           op->resolved_old_metakey = g_steal_pointer (&metakey);",
          "2998:         }",
          "2999:       else",
          "3001:     }",
          "3002: }",
          "3005: resolve_op_end (FlatpakTransaction *self,",
          "3006:                 FlatpakTransactionOperation *op,",
          "3007:                 const char *checksum,",
          "3008:                 GFile *sideload_path,",
          "3010: {",
          "3011:   g_autoptr(GBytes) old_metadata_bytes = NULL;",
          "3013:   old_metadata_bytes = load_deployed_metadata (self, op->ref, NULL, NULL);",
          "3015:   emit_eol_and_maybe_skip (self, op);",
          "3016:  }",
          "3020: resolve_op_from_commit (FlatpakTransaction *self,",
          "3021:                         FlatpakTransactionOperation *op,",
          "3022:                         const char *checksum,",
          "3023:                         GFile *sideload_path,",
          "3025: {",
          "3026:   g_autoptr(GBytes) metadata_bytes = NULL;",
          "3027:   g_autoptr(GVariant) commit_metadata = NULL;",
          "",
          "[Removed Lines]",
          "3000:         g_message (\"Warning: Failed to parse old metadata for %s\\n\", flatpak_decomposed_get_ref (op->ref));",
          "3004: static void",
          "3009:                 GBytes *metadata_bytes)",
          "3014:   mark_op_resolved (op, checksum, sideload_path, metadata_bytes, old_metadata_bytes);",
          "3019: static void",
          "3024:                         GVariant *commit_data)",
          "",
          "[Added Lines]",
          "3000:         {",
          "3002:           g_message (\"Warning: Failed to parse old metadata for %s\\n\", flatpak_decomposed_get_ref (op->ref));",
          "3003:         }",
          "3006:   return TRUE;",
          "3009: static gboolean",
          "3014:                 GBytes *metadata_bytes,",
          "3015:                 GError **error)",
          "3020:   if (!mark_op_resolved (op, checksum, sideload_path, metadata_bytes, old_metadata_bytes, error))",
          "3021:     return FALSE;",
          "3023:   return TRUE;",
          "3027: static gboolean",
          "3032:                         GVariant *commit_data,",
          "3033:                         GError **error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3032:   commit_metadata = g_variant_get_child_value (commit_data, 0);",
          "3033:   g_variant_lookup (commit_metadata, \"xa.metadata\", \"&s\", &xa_metadata);",
          "3034:   if (xa_metadata == NULL)",
          "3039:   if (g_variant_lookup (commit_metadata, \"xa.download-size\", \"t\", &download_size))",
          "3040:     op->download_size = GUINT64_FROM_BE (download_size);",
          "",
          "[Removed Lines]",
          "3035:     g_message (\"Warning: No xa.metadata in local commit %s ref %s\", checksum, flatpak_decomposed_get_ref (op->ref));",
          "3036:   else",
          "3037:     metadata_bytes = g_bytes_new (xa_metadata, strlen (xa_metadata));",
          "",
          "[Added Lines]",
          "3044:     return flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA,",
          "3045:                                \"No xa.metadata in local commit %s ref %s\",",
          "3046:                                checksum, flatpak_decomposed_get_ref (op->ref));",
          "3048:   metadata_bytes = g_bytes_new (xa_metadata, strlen (xa_metadata));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3044:   g_variant_lookup (commit_metadata, OSTREE_COMMIT_META_KEY_ENDOFLIFE, \"s\", &op->eol);",
          "3045:   g_variant_lookup (commit_metadata, OSTREE_COMMIT_META_KEY_ENDOFLIFE_REBASE, \"s\", &op->eol_rebase);",
          "3048: }",
          "3050: static gboolean",
          "3051: try_resolve_op_from_metadata (FlatpakTransaction *self,",
          "3052:                               FlatpakTransactionOperation *op,",
          "3053:                               const char *checksum,",
          "3054:                               GFile *sideload_path,",
          "3056: {",
          "3057:   g_autoptr(GBytes) metadata_bytes = NULL;",
          "3058:   guint64 download_size = 0;",
          "",
          "[Removed Lines]",
          "3047:   resolve_op_end (self, op, checksum, sideload_path, metadata_bytes);",
          "3055:                               FlatpakRemoteState *state)",
          "",
          "[Added Lines]",
          "3058:   return resolve_op_end (self, op, checksum, sideload_path, metadata_bytes, error);",
          "3069:                               FlatpakRemoteState *state,",
          "3070:                               GError **error)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3092:       op->token_type = GINT32_FROM_LE (var_metadata_lookup_int32 (sparse_cache, FLATPAK_SPARSE_CACHE_KEY_TOKEN_TYPE, op->token_type));",
          "3093:     }",
          "3097: }",
          "3099: static gboolean",
          "",
          "[Removed Lines]",
          "3095:   resolve_op_end (self, op, checksum, sideload_path, metadata_bytes);",
          "3096:   return TRUE;",
          "",
          "[Added Lines]",
          "3110:   return resolve_op_end (self, op, checksum, sideload_path, metadata_bytes, error);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3138:           g_assert (op->resolved_commit != NULL);",
          "3140:           continue;",
          "3141:         }",
          "",
          "[Removed Lines]",
          "3139:           mark_op_resolved (op, op->resolved_commit, NULL, NULL, NULL);",
          "",
          "[Added Lines]",
          "3153:           if (!mark_op_resolved (op, op->resolved_commit, NULL, NULL, NULL, error))",
          "3154:             return FALSE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3147:           metadata_bytes = load_deployed_metadata (self, op->ref, &checksum, NULL);",
          "3149:           continue;",
          "3150:         }",
          "3152:       if (op->kind == FLATPAK_TRANSACTION_OPERATION_INSTALL_BUNDLE)",
          "3153:         {",
          "3154:           g_assert (op->commit != NULL);",
          "3156:           continue;",
          "3157:         }",
          "",
          "[Removed Lines]",
          "3148:           mark_op_resolved (op, checksum, NULL, metadata_bytes, NULL);",
          "3155:           mark_op_resolved (op, op->commit, NULL, op->external_metadata, NULL);",
          "",
          "[Added Lines]",
          "3163:           if (!mark_op_resolved (op, checksum, NULL, metadata_bytes, NULL, error))",
          "3164:             return FALSE;",
          "3171:           if (!mark_op_resolved (op, op->commit, NULL, op->external_metadata, NULL, error))",
          "3172:             return FALSE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3183:           if (commit_data == NULL)",
          "3184:             return FALSE;",
          "3187:         }",
          "3188:       else",
          "3189:         {",
          "",
          "[Removed Lines]",
          "3186:           resolve_op_from_commit (self, op, checksum, NULL, commit_data);",
          "",
          "[Added Lines]",
          "3203:           if (!resolve_op_from_commit (self, op, checksum, NULL, commit_data, error))",
          "3204:             return FALSE;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3242:             }",
          "3246:             {",
          "3250:               g_autoptr(GVariant) commit_data = NULL;",
          "",
          "[Removed Lines]",
          "3245:           if (!try_resolve_op_from_metadata (self, op, checksum, sideload_path, state))",
          "",
          "[Added Lines]",
          "3263:           if (!try_resolve_op_from_metadata (self, op, checksum, sideload_path, state, &local_error))",
          "3265:               if (local_error)",
          "3266:                 {",
          "3268:                   g_propagate_error (error, g_steal_pointer (&local_error));",
          "3269:                   return FALSE;",
          "3270:                 }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3280:                   return FALSE;",
          "3281:                 }",
          "3284:             }",
          "3285:         }",
          "3286:     }",
          "",
          "[Removed Lines]",
          "3283:               resolve_op_from_commit (self, op, checksum, sideload_path, commit_data);",
          "",
          "[Added Lines]",
          "3308:               if (!resolve_op_from_commit (self, op, checksum, sideload_path, commit_data, error))",
          "3309:                 return FALSE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}