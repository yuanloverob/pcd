{
  "cve_id": "CVE-2014-0236",
  "cve_desc": "file before 5.18, as used in the Fileinfo component in PHP before 5.6.0, allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a zero root_storage value in a CDF file, related to cdf.c and readcdf.c.",
  "repo": "php/php-src",
  "patch_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
  "patch_info": {
    "commit_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "files": [
      "NEWS",
      "ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c"
    ],
    "message": "Fixed bug #67329 fileinfo: NULL pointer deference flaw by processing certain CDF files",
    "before_after_code_files": [
      "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c"
    ]
  },
  "patch_diff": {
    "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c": [
      "File: ext/fileinfo/libmagic/cdf.c -> ext/fileinfo/libmagic/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "689: int",
      "690: cdf_read_short_stream(const cdf_info_t *info, const cdf_header_t *h,",
      "692: {",
      "693:  size_t i;",
      "694:  const cdf_directory_t *d;",
      "696:  for (i = 0; i < dir->dir_len; i++)",
      "697:   if (dir->dir_tab[i].d_type == CDF_DIR_TYPE_ROOT_STORAGE)",
      "698:    break;",
      "",
      "[Removed Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn)",
      "",
      "[Added Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn,",
      "692:     const cdf_directory_t **root)",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h": [
      "File: ext/fileinfo/libmagic/cdf.h -> ext/fileinfo/libmagic/cdf.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "300: int cdf_read_ssat(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
      "301:     cdf_sat_t *);",
      "302: int cdf_read_short_stream(const cdf_info_t *, const cdf_header_t *,",
      "304: int cdf_read_property_info(const cdf_stream_t *, const cdf_header_t *, uint32_t,",
      "305:     cdf_property_info_t **, size_t *, size_t *);",
      "306: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
      "",
      "[Removed Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *);",
      "",
      "[Added Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *,",
      "304:     const cdf_directory_t **);",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c": [
      "File: ext/fileinfo/libmagic/readcdf.c -> ext/fileinfo/libmagic/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <stdlib.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.37 2014/01/06 13:41:18 rrt Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: # define strcasestr strstr",
      "78: #endif",
      "80: private const char *",
      "81: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
      "82: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80: static const struct cv {",
      "81:  uint64_t clsid[2];",
      "82:  const char *mime;",
      "83: } clsid2mime[] = {",
      "84:  {",
      "85: #ifdef PHP_WIN32",
      "86:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "87: #else",
      "88:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "89: #endif",
      "90:   \"x-msi\",",
      "91:  }",
      "92: }, clsid2desc[] = {",
      "93:  {",
      "94: #ifdef PHP_WIN32",
      "95:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "96: #else",
      "97:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "98: #endif",
      "99:   \"MSI Installer\",",
      "100:  },",
      "101: };",
      "103: private const char *",
      "104: cdf_clsid_to_mime(const uint64_t clsid[2], const struct cv *cv)",
      "105: {",
      "106:  size_t i;",
      "107:  for (i = 0; cv[i].mime != NULL; i++) {",
      "108:   if (clsid[0] == cv[i].clsid[0] && clsid[1] == cv[i].clsid[1])",
      "109:    return cv[i].mime;",
      "110:  }",
      "111:  return NULL;",
      "112: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96: private int",
      "97: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "99: {",
      "100:         size_t i;",
      "101:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "98:     size_t count)",
      "",
      "[Added Lines]",
      "132:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:  memset(&ts, 0, sizeof(ts));",
      "110:         for (i = 0; i < count; i++) {",
      "111:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "112:                 switch (info[i].pi_type) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:         if (!NOTMIME(ms) && root_storage)",
      "145:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "163:                                                     buf, vbuf) == -1)",
      "164:                                                         return -1;",
      "165:                                         }",
      "167:         CDF_PROPERTY_NAME_OF_APPLICATION) {",
      "168:      str = cdf_app_to_mime(vbuf, app2mime);",
      "169:     }",
      "",
      "[Removed Lines]",
      "166:                                 } else if (info[i].pi_id ==",
      "",
      "[Added Lines]",
      "203:                                 } else if (str == NULL && info[i].pi_id ==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "218: private int",
      "219: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "221: {",
      "222:         cdf_summary_info_header_t si;",
      "223:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "220:     const cdf_stream_t *sst)",
      "",
      "[Added Lines]",
      "257:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "228:                 return -1;",
      "230:         if (NOTMIME(ms)) {",
      "231:                 if (file_printf(ms, \"Composite Document File V2 Document\")",
      "232:       == -1)",
      "233:                         return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "268:   const char *str;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "255:                                 return -2;",
      "256:                         break;",
      "257:                 }",
      "261:         free(info);",
      "263:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "258:         }",
      "260:         m = cdf_file_property_info(ms, info, count);",
      "",
      "[Added Lines]",
      "297:   if (root_storage) {",
      "298:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "299:    if (str)",
      "300:     if (file_printf(ms, \", %s\", str) == -1)",
      "301:      return -2;",
      "302:    }",
      "303:   }",
      "305:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "275:         int i;",
      "276:         const char *expn = \"\";",
      "277:         const char *corrupt = \"corrupt: \";",
      "279:         info.i_fd = fd;",
      "280:         info.i_buf = buf;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:         const cdf_directory_t *root_storage;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "308:                 goto out2;",
      "309:         }",
      "312:                 expn = \"Cannot read short stream\";",
      "313:                 goto out3;",
      "314:         }",
      "",
      "[Removed Lines]",
      "311:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst)) == -1) {",
      "",
      "[Added Lines]",
      "357:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,",
      "358:      &root_storage)) == -1) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "329: #ifdef CDF_DEBUG",
      "330:         cdf_dump_summary_info(&h, &scn);",
      "331: #endif",
      "334:  if (i == 0) {",
      "335:   const char *str = NULL;",
      "336:   cdf_directory_t *d;",
      "337:   char name[__arraycount(d->d_name)];",
      "338:   size_t j, k;",
      "340:    d = &dir.dir_tab[j];",
      "341:    for (k = 0; k < sizeof(name); k++)",
      "342:     name[k] = (char)cdf_tole2(d->d_name[k]);",
      "349:   }",
      "350:   if (NOTMIME(ms)) {",
      "351:    if (str != NULL) {",
      "",
      "[Removed Lines]",
      "332:         if ((i = cdf_file_summary_info(ms, &h, &scn)) < 0)",
      "333:                 expn = \"Can't expand summary_info\";",
      "339:   for (j = 0; j < dir.dir_len; j++) {",
      "343:    if (NOTMIME(ms))",
      "344:     str = cdf_app_to_mime(name, name2desc);",
      "345:    else",
      "346:     str = cdf_app_to_mime(name, name2mime);",
      "347:    if (str != NULL)",
      "348:     break;",
      "",
      "[Added Lines]",
      "379:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "380:             expn = \"Can't expand summary_info\";",
      "388:   for (j = 0; str == NULL && j < dir.dir_len; j++) {",
      "392:    str = cdf_app_to_mime(name,",
      "393:        NOTMIME(ms) ? name2desc : name2mime);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "07d227229771015600789ae36e3b12ce29b1f339",
      "candidate_info": {
        "commit_hash": "07d227229771015600789ae36e3b12ce29b1f339",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/07d227229771015600789ae36e3b12ce29b1f339",
        "files": [
          "Makefile.frag"
        ],
        "message": "Fix phpdbg.1 man page installation when build != src directory",
        "before_after_code_files": [
          "Makefile.frag||Makefile.frag"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.frag||Makefile.frag": [
          "File: Makefile.frag -> Makefile.frag",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  @$(INSTALL) -m 0755 $(BUILD_BINARY) $(INSTALL_ROOT)$(bindir)/$(program_prefix)phpdbg$(program_suffix)$(EXEEXT)",
          "29:  @echo \"Installing phpdbg man page:       $(INSTALL_ROOT)$(mandir)/man1/\"",
          "30:  @$(mkinstalldirs) $(INSTALL_ROOT)$(mandir)/man1",
          "33: clean-phpdbg:",
          "34:  @echo \"Cleaning phpdbg object files ...\"",
          "",
          "[Removed Lines]",
          "31:  @$(INSTALL_DATA) sapi/phpdbg/phpdbg.1 $(INSTALL_ROOT)$(mandir)/man1/$(program_prefix)phpdbg$(program_suffix).1",
          "",
          "[Added Lines]",
          "31:  @$(INSTALL_DATA) $(srcdir)/phpdbg.1 $(INSTALL_ROOT)$(mandir)/man1/$(program_prefix)phpdbg$(program_suffix).1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33699a4dab2857a74e628d021f601ec0ae7f982c",
      "candidate_info": {
        "commit_hash": "33699a4dab2857a74e628d021f601ec0ae7f982c",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/33699a4dab2857a74e628d021f601ec0ae7f982c",
        "files": [
          "Zend/tests/constant_expressions_arrays.phpt",
          "Zend/tests/constant_expressions_self_referencing_array.phpt"
        ],
        "message": "Messed up syntax of tests",
        "before_after_code_files": [
          "Zend/tests/constant_expressions_arrays.phpt||Zend/tests/constant_expressions_arrays.phpt",
          "Zend/tests/constant_expressions_self_referencing_array.phpt||Zend/tests/constant_expressions_self_referencing_array.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Zend/tests/constant_expressions_arrays.phpt||Zend/tests/constant_expressions_arrays.phpt": [
          "File: Zend/tests/constant_expressions_arrays.phpt -> Zend/tests/constant_expressions_arrays.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: Constant expressions with arrays",
          "4: <?php",
          "5: const a = [1,2,[3,[4]]];",
          "6: const b = a[0];",
          "",
          "[Removed Lines]",
          "1: ---TEST---",
          "3: ---FILE---",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "3: --FILE--",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: var_dump(a); // Eventually allow that later with array dereferencing of constants",
          "27: ?>",
          "29: int(1)",
          "30: int(3)",
          "31: int(1)",
          "",
          "[Removed Lines]",
          "28: ---EXPECTF---",
          "",
          "[Added Lines]",
          "28: --EXPECTF--",
          "",
          "---------------"
        ],
        "Zend/tests/constant_expressions_self_referencing_array.phpt||Zend/tests/constant_expressions_self_referencing_array.phpt": [
          "File: Zend/tests/constant_expressions_self_referencing_array.phpt -> Zend/tests/constant_expressions_self_referencing_array.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: Self-referencing constant expression (part of a constant AST)",
          "4: <?php",
          "5: class A {",
          "6:    const FOO = [self::BAR];",
          "",
          "[Removed Lines]",
          "1: ---TEST---",
          "3: ---FILE---",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "3: --FILE--",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8: }",
          "9: var_dump(A::FOO);",
          "10: ?>",
          "12: Fatal error: Cannot declare self-referencing constant 'self::FOO' in %s on line %d",
          "",
          "[Removed Lines]",
          "11: ---EXPECTF---",
          "",
          "[Added Lines]",
          "11: --EXPECTF--",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a886a0cf930eeadcc9033355407e4a087ba0ebc9",
      "candidate_info": {
        "commit_hash": "a886a0cf930eeadcc9033355407e4a087ba0ebc9",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/a886a0cf930eeadcc9033355407e4a087ba0ebc9",
        "files": [
          "NEWS",
          "ext/mysqlnd/mysqlnd_charset.c"
        ],
        "message": "Add support for gb18030/MySQL 5.7",
        "before_after_code_files": [
          "ext/mysqlnd/mysqlnd_charset.c||ext/mysqlnd/mysqlnd_charset.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/mysqlnd/mysqlnd_charset.c||ext/mysqlnd/mysqlnd_charset.c": [
          "File: ext/mysqlnd/mysqlnd_charset.c -> ext/mysqlnd/mysqlnd_charset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "423: {",
          "424:  return 4;",
          "425: }",
          "430: {",
          "431:  return 4;",
          "432: }",
          "436:   The server compiles sometimes the full utf-8 (the mb4) as utf8m4, and the old as utf8,",
          "437:   for BC reasons. Sometimes, utf8mb4 is just utf8 but the old charsets are utf8mb3.",
          "",
          "[Removed Lines]",
          "421: static uint",
          "422: check_mb_utf32(const char *start __attribute((unused)), const char *end __attribute((unused)))",
          "428: static uint",
          "429: mysqlnd_mbcharlen_utf32(unsigned int utf32 __attribute((unused)))",
          "",
          "[Added Lines]",
          "421: static unsigned int check_mb_utf32(const char *start __attribute((unused)), const char *end __attribute((unused)))",
          "427: static unsigned int mysqlnd_mbcharlen_utf32(unsigned int utf32 __attribute((unused)))",
          "435: #define is_gb18030_odd(c)          (0x81 <= (zend_uchar) (c) && (zend_uchar) (c) <= 0xFE)",
          "436: #define is_gb18030_even_2(c)       ((0x40 <= (zend_uchar) (c) && (zend_uchar) (c) <= 0x7E) || (0x80 <= (zend_uchar) (c) && (zend_uchar) (c) <= 0xFE))",
          "437: #define is_gb18030_even_4(c)       (0x30 <= (zend_uchar) (c) && (zend_uchar) (c) <= 0x39)",
          "440: static unsigned int mysqlnd_mbcharlen_gb18030(unsigned int c)",
          "441: {",
          "442:  if (c <= 0xFF) {",
          "443:   return !is_gb18030_odd(c);",
          "444:  }",
          "445:  if (c > 0xFFFF || !is_gb18030_odd((c >> 8) & 0xFF)) {",
          "446:   return 0;",
          "447:  }",
          "448:  if (is_gb18030_even_2((c & 0xFF))) {",
          "449:      return 2;",
          "450:  }",
          "451:  if (is_gb18030_even_4((c & 0xFF))) {",
          "452:   return 4;",
          "453:  }",
          "455:  return 0;",
          "456: }",
          "459: static unsigned int my_ismbchar_gb18030(const char * start, const char * end)",
          "460: {",
          "461:  if (end - start <= 1 || !is_gb18030_odd(start[0])) {",
          "462:   return 0;",
          "463:  }",
          "465:  if (is_gb18030_even_2(start[1])) {",
          "466:   return 2;",
          "467:  } else if (end - start > 3 && is_gb18030_even_4(start[1]) && is_gb18030_odd(start[2]) && is_gb18030_even_4(start[3])) {",
          "468:   return 4;",
          "469:  }",
          "471:  return 0;",
          "472: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "643:  { 245, UTF8_MB4, UTF8_MB4\"_croatian_ci\", 1, 4, \"\", mysqlnd_mbcharlen_utf8, check_mb_utf8_valid},",
          "644:  { 246, UTF8_MB4, UTF8_MB4\"_unicode_520_ci\", 1, 4, \"\", mysqlnd_mbcharlen_utf8, check_mb_utf8_valid},",
          "645:  { 247, UTF8_MB4, UTF8_MB4\"_vietnamese_ci\", 1, 4, \"\", mysqlnd_mbcharlen_utf8, check_mb_utf8_valid},",
          "647:  { 254, UTF8_MB3, UTF8_MB3\"_general_cs\", 1, 3, \"\", mysqlnd_mbcharlen_utf8, check_mb_utf8_valid},",
          "648:  {   0, NULL, NULL, 0, 0, NULL, NULL, NULL}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "686:  { 248, \"gb18030\", \"gb18030_chinese_ci\", 1, 4, \"\", mysqlnd_mbcharlen_gb18030, my_ismbchar_gb18030},",
          "687:  { 249, \"gb18030\", \"gb18030_bin\", 1, 4, \"\", mysqlnd_mbcharlen_gb18030, my_ismbchar_gb18030},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11e401ab59b73b22dcd6ce91e250c82ca808cd4f",
      "candidate_info": {
        "commit_hash": "11e401ab59b73b22dcd6ce91e250c82ca808cd4f",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/11e401ab59b73b22dcd6ce91e250c82ca808cd4f",
        "files": [
          "main/streams/plain_wrapper.c"
        ],
        "message": "refactor _php_stream_fopen_{temporary_,tmp}file()",
        "before_after_code_files": [
          "main/streams/plain_wrapper.c||main/streams/plain_wrapper.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/streams/plain_wrapper.c||main/streams/plain_wrapper.c": [
          "File: main/streams/plain_wrapper.c -> main/streams/plain_wrapper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:  return php_stream_alloc_rel(&php_stream_stdio_ops, self, 0, mode);",
          "184: }",
          "187: {",
          "190:  if (fd != -1) {",
          "211:   if (stream) {",
          "212:    php_stdio_stream_data *self = (php_stdio_stream_data*)stream->abstract;",
          "213:    stream->wrapper = &php_plain_files_wrapper;",
          "",
          "[Removed Lines]",
          "186: PHPAPI php_stream *_php_stream_fopen_temporary_file(const char *dir, const char *pfx, char **opened_path STREAMS_DC TSRMLS_DC)",
          "188:  int fd = php_open_temporary_fd(dir, pfx, opened_path TSRMLS_CC);",
          "191:   php_stream *stream = php_stream_fopen_from_fd_int_rel(fd, \"r+b\", NULL);",
          "192:   if (stream) {",
          "193:    return stream;",
          "194:   }",
          "195:   close(fd);",
          "197:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"unable to allocate stream\");",
          "199:   return NULL;",
          "200:  }",
          "201:  return NULL;",
          "202: }",
          "204: PHPAPI php_stream *_php_stream_fopen_tmpfile(int dummy STREAMS_DC TSRMLS_DC)",
          "205: {",
          "206:  char *opened_path = NULL;",
          "207:  int fd = php_open_temporary_fd(NULL, \"php\", &opened_path TSRMLS_CC);",
          "209:  if (fd != -1) {",
          "210:   php_stream *stream = php_stream_fopen_from_fd_int_rel(fd, \"r+b\", NULL);",
          "",
          "[Added Lines]",
          "186: PHPAPI php_stream *_php_stream_fopen_temporary_file(const char *dir, const char *pfx, char **opened_path_ptr STREAMS_DC TSRMLS_DC)",
          "188:  char *opened_path = NULL;",
          "189:  int fd;",
          "191:  fd = php_open_temporary_fd(dir, pfx, opened_path TSRMLS_CC);",
          "193:   php_stream *stream;",
          "195:   if (opened_path_ptr) {",
          "197:   }",
          "199:   stream = php_stream_fopen_from_fd_int_rel(fd, \"r+b\", NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:  return NULL;",
          "228: }",
          "230: PHPAPI php_stream *_php_stream_fopen_from_fd(int fd, const char *mode, const char *persistent_id STREAMS_DC TSRMLS_DC)",
          "231: {",
          "232:  php_stream *stream = php_stream_fopen_from_fd_int_rel(fd, mode, persistent_id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219: PHPAPI php_stream *_php_stream_fopen_tmpfile(int dummy STREAMS_DC TSRMLS_DC)",
          "220: {",
          "221:  return php_stream_fopen_temporary_file(NULL, \"php\", NULL);",
          "222: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62b6cdbbd783040f43eb4479357a85491214cedd",
      "candidate_info": {
        "commit_hash": "62b6cdbbd783040f43eb4479357a85491214cedd",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/62b6cdbbd783040f43eb4479357a85491214cedd",
        "files": [
          "phpdbg.1"
        ],
        "message": "Add initial manual page for phpdbg.1",
        "before_after_code_files": [
          "phpdbg.1||phpdbg.1"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpdbg.1||phpdbg.1": [
          "File: phpdbg.1 -> phpdbg.1",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: .TH PHPDBG 1",
          "2: .SH NAME",
          "3: phpdbg \\- The interactive PHP debugger",
          "4: .SH SYNOPSIS",
          "5: .B phpdbg",
          "6: [OPTION]",
          "7: [\\fB\\-e\\fIFILE\\fR]",
          "8: .SH DESCRIPTION",
          "9: .B phpdbg",
          "10: a lightweight, powerful, easy to use debugging platform for PHP5.",
          "11: .SH OPTIONS",
          "12: The following switches are implemented (just like cli SAPI):",
          "13: .TP",
          "14: .BR \\-n",
          "15: No \\fBphp.ini\\fR file will be used",
          "16: .TP",
          "17: .BR \\-c \\fIpath\\fB|\\fIfile\\fR",
          "18: Look for \\fBphp.ini\\fR file in the directory \\fIpath\\fR or use the specified \\fIfile\\fR",
          "19: .TP",
          "20: .BR \\-z \\fIfile\\fR",
          "21: Load Zend extension \\fIfile\\fR",
          "22: .TP",
          "23: .BR \\-d \\fIfoo\\fB[=\\fIbar\\fB]\\fR",
          "24: Define INI entry \\fIfoo\\fR with value \\fIbar\\fR",
          "25: .PP The following switches change the default behaviour of phpdbg:",
          "26: .TP",
          "27: .BR \\-v",
          "28: Disables quietness",
          "29: .TP",
          "30: .BR \\-s",
          "31: Enabled stepping",
          "32: .TP",
          "33: .BR -e \\fIfile\\fR",
          "34: Sets execution context",
          "35: .TP",
          "36: .BR \\-b",
          "37: Disables use of colour on the console",
          "38: .TP",
          "39: .BR \\-I",
          "40: Ignore .phpdbginit (default init file)",
          "41: .TP",
          "42: .BR \\-i \\fIpath\\fB|\\ffile\\fR",
          "43: Override .phpgdbinit location (implies -I)",
          "44: .TP",
          "45: .BR \\-O \\fIfile\\fR",
          "46: Set oplog output to \\fIfile\\fR",
          "47: .TP",
          "48: .BR \\-q",
          "49: Do not print banner on startup",
          "50: .TP",
          "51: .BR \\-r",
          "52: Jump straight to run",
          "53: .TP",
          "54: .BR \\-E",
          "55: Enable step through eval()",
          "56: .SH NOTES",
          "57: Passing -rr will cause phpdbg to quit after execution, rather than returning to the console",
          "58: .SH AUTHOR",
          "59: Written by Ond\u0159ej Sur\u00fd for Debian project.",
          "",
          "---------------"
        ]
      }
    }
  ]
}