{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01e92df41ef05b7ec1807beccc697fd521abc584",
      "candidate_info": {
        "commit_hash": "01e92df41ef05b7ec1807beccc697fd521abc584",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01e92df41ef05b7ec1807beccc697fd521abc584",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/vdbeInt.h",
          "src/vdbeaux.c"
        ],
        "message": "Merge performance enhancements from trunk.\n\nFossilOrigin-Name: 0f1b9ff9e1e6f13e03045fcb7d0907227085054f9eb0b0b8471fb26b0094b13a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: da53f3d3ff26cc32d3a5ac788b6785baa3d1688e50d9354025a3130dc7e71a38",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   pParse->pVdbe = p;",
          "37:   assert( pParse->aLabel==0 );",
          "38:   assert( pParse->nLabel==0 );",
          "40:   assert( pParse->szOpAlloc==0 );",
          "41:   sqlite3VdbeAddOp2(p, OP_Init, 0, 1);",
          "42:   return p;",
          "",
          "[Removed Lines]",
          "39:   assert( pParse->nOpAlloc==0 );",
          "",
          "[Added Lines]",
          "39:   assert( p->nOpAlloc==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157: #ifdef SQLITE_TEST_REALLOC_STRESS",
          "159: #else",
          "161:   UNUSED_PARAMETER(nOp);",
          "162: #endif",
          "",
          "[Removed Lines]",
          "158:   int nNew = (p->nOpAlloc>=512 ? p->nOpAlloc*2 : p->nOpAlloc+nOp);",
          "160:   int nNew = (p->nOpAlloc ? p->nOpAlloc*2 : (int)(1024/sizeof(Op)));",
          "",
          "[Added Lines]",
          "158:   int nNew = (v->nOpAlloc>=512 ? v->nOpAlloc*2 : v->nOpAlloc+nOp);",
          "160:   int nNew = (v->nOpAlloc ? v->nOpAlloc*2 : (int)(1024/sizeof(Op)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:   }",
          "170:   assert( nOp<=(1024/sizeof(Op)) );",
          "172:   pNew = sqlite3DbRealloc(p->db, v->aOp, nNew*sizeof(Op));",
          "173:   if( pNew ){",
          "174:     p->szOpAlloc = sqlite3DbMallocSize(p->db, pNew);",
          "176:     v->aOp = pNew;",
          "177:   }",
          "178:   return (pNew ? SQLITE_OK : SQLITE_NOMEM_BKPT);",
          "",
          "[Removed Lines]",
          "171:   assert( nNew>=(p->nOpAlloc+nOp) );",
          "175:     p->nOpAlloc = p->szOpAlloc/sizeof(Op);",
          "",
          "[Added Lines]",
          "171:   assert( nNew>=(v->nOpAlloc+nOp) );",
          "175:     v->nOpAlloc = p->szOpAlloc/sizeof(Op);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208: static SQLITE_NOINLINE int growOp3(Vdbe *p, int op, int p1, int p2, int p3){",
          "210:   if( growOpArray(p, 1) ) return 1;",
          "212:   return sqlite3VdbeAddOp3(p, op, p1, p2, p3);",
          "213: }",
          "214: int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){",
          "",
          "[Removed Lines]",
          "209:   assert( p->pParse->nOpAlloc<=p->nOp );",
          "211:   assert( p->pParse->nOpAlloc>p->nOp );",
          "",
          "[Added Lines]",
          "209:   assert( p->nOpAlloc<=p->nOp );",
          "211:   assert( p->nOpAlloc>p->nOp );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "218:   i = p->nOp;",
          "219:   assert( p->magic==VDBE_MAGIC_INIT );",
          "220:   assert( op>=0 && op<0xff );",
          "222:     return growOp3(p, op, p1, p2, p3);",
          "223:   }",
          "224:   p->nOp++;",
          "",
          "[Removed Lines]",
          "221:   if( p->pParse->nOpAlloc<=i ){",
          "",
          "[Added Lines]",
          "221:   if( p->nOpAlloc<=i ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "809: #if defined(SQLITE_DEBUG) && !defined(SQLITE_TEST_REALLOC_STRESS)",
          "810: void sqlite3VdbeVerifyNoMallocRequired(Vdbe *p, int N){",
          "812: }",
          "813: #endif",
          "",
          "[Removed Lines]",
          "811:   assert( p->nOp + N <= p->pParse->nOpAlloc );",
          "",
          "[Added Lines]",
          "811:   assert( p->nOp + N <= p->nOpAlloc );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "880:   VdbeOp *pOut, *pFirst;",
          "881:   assert( nOp>0 );",
          "882:   assert( p->magic==VDBE_MAGIC_INIT );",
          "884:     return 0;",
          "885:   }",
          "886:   pFirst = pOut = &p->aOp[p->nOp];",
          "",
          "[Removed Lines]",
          "883:   if( p->nOp + nOp > p->pParse->nOpAlloc && growOpArray(p, nOp) ){",
          "",
          "[Added Lines]",
          "883:   if( p->nOp + nOp > p->nOpAlloc && growOpArray(p, nOp) ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2211: #ifdef SQLITE_ENABLE_STMT_SCANSTATUS",
          "2213: #endif",
          "2215:     x.pSpace = p->pFree = sqlite3DbMallocRawNN(db, x.nNeeded);",
          "2216:     x.nFree = x.nNeeded;",
          "2219:   p->pVList = pParse->pVList;",
          "2220:   pParse->pVList =  0;",
          "",
          "[Removed Lines]",
          "2205:   do {",
          "2206:     x.nNeeded = 0;",
          "2207:     p->aMem = allocSpace(&x, p->aMem, nMem*sizeof(Mem));",
          "2208:     p->aVar = allocSpace(&x, p->aVar, nVar*sizeof(Mem));",
          "2209:     p->apArg = allocSpace(&x, p->apArg, nArg*sizeof(Mem*));",
          "2210:     p->apCsr = allocSpace(&x, p->apCsr, nCursor*sizeof(VdbeCursor*));",
          "2212:     p->anExec = allocSpace(&x, p->anExec, p->nOp*sizeof(i64));",
          "2214:     if( x.nNeeded==0 ) break;",
          "2217:   }while( !db->mallocFailed );",
          "",
          "[Added Lines]",
          "2205:   x.nNeeded = 0;",
          "2206:   p->aMem = allocSpace(&x, 0, nMem*sizeof(Mem));",
          "2207:   p->aVar = allocSpace(&x, 0, nVar*sizeof(Mem));",
          "2208:   p->apArg = allocSpace(&x, 0, nArg*sizeof(Mem*));",
          "2209:   p->apCsr = allocSpace(&x, 0, nCursor*sizeof(VdbeCursor*));",
          "2211:   p->anExec = allocSpace(&x, 0, p->nOp*sizeof(i64));",
          "2213:   if( x.nNeeded ){",
          "2216:     if( !db->mallocFailed ){",
          "2217:       p->aMem = allocSpace(&x, p->aMem, nMem*sizeof(Mem));",
          "2218:       p->aVar = allocSpace(&x, p->aVar, nVar*sizeof(Mem));",
          "2219:       p->apArg = allocSpace(&x, p->apArg, nArg*sizeof(Mem*));",
          "2220:       p->apCsr = allocSpace(&x, p->apCsr, nCursor*sizeof(VdbeCursor*));",
          "2221: #ifdef SQLITE_ENABLE_STMT_SCANSTATUS",
          "2222:       p->anExec = allocSpace(&x, p->anExec, p->nOp*sizeof(i64));",
          "2223: #endif",
          "2224:     }",
          "2225:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba01634cd393040ade90cf5449e3642663e80699",
      "candidate_info": {
        "commit_hash": "ba01634cd393040ade90cf5449e3642663e80699",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ba01634cd393040ade90cf5449e3642663e80699",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Ensure that the same subquery does not go through the window-function rewrite more than once, even when that subquery is part of a virtual table constraint that lacks the omit flag.\n\nFossilOrigin-Name: d0bc7db6b0a53edc04815622c46250d26f526f56e59f14875f4e18c75b49000d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7e3151855fd4370fb7d4fff20516c2c2d1980134620df924106e6989bc130583",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "904: int sqlite3WindowRewrite(Parse *pParse, Select *p){",
          "905:   int rc = SQLITE_OK;",
          "907:     Vdbe *v = sqlite3GetVdbe(pParse);",
          "908:     sqlite3 *db = pParse->db;",
          "",
          "[Removed Lines]",
          "906:   if( p->pWin && p->pPrior==0 ){",
          "",
          "[Added Lines]",
          "906:   if( p->pWin && p->pPrior==0 && (p->selFlags & SF_WinRewrite)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "928:     p->pGroupBy = 0;",
          "929:     p->pHaving = 0;",
          "930:     p->selFlags &= ~SF_Aggregate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "931:     p->selFlags |= SF_WinRewrite;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b22c1b8168ce18d5582fc0004369ecef8f7d939",
      "candidate_info": {
        "commit_hash": "1b22c1b8168ce18d5582fc0004369ecef8f7d939",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1b22c1b8168ce18d5582fc0004369ecef8f7d939",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test",
          "ext/misc/uuid.c",
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/parse.y",
          "src/treeview.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "test/rowvalue.test",
          "test/trigger1.test"
        ],
        "message": "Merge fixes from trunk.\n\nFossilOrigin-Name: 4ec57d88415fa4ea2e99d4a5671074ec6829d6824bc8509d5ae9c978d47d1419",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "ext/misc/uuid.c||ext/misc/uuid.c",
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/parse.y||src/parse.y",
          "src/treeview.c||src/treeview.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/rowvalue.test||test/rowvalue.test",
          "test/trigger1.test||test/trigger1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5318:   for(i=0; i<nChar; i++){",
          "5320:     if( (unsigned char)p[n++]>=0xc0 ){",
          "5321:       while( (p[n] & 0xc0)==0x80 ){",
          "5322:         n++;",
          "5323:         if( n>=nByte ) break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5321:       if( n>=nByte ) break;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:   SELECT rowid FROM t1 WHERE rowid=2 AND t1 = 'hello';",
          "219: }",
          "222: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: #-------------------------------------------------------------------------",
          "222: #",
          "223: reset_db",
          "224: do_execsql_test 8.0 {",
          "225:   CREATE VIRTUAL TABLE vt0 USING fts5(c0, tokenize = \"ascii\", prefix = 1);",
          "226:   INSERT INTO vt0(c0) VALUES (x'd1');",
          "227: }",
          "229: breakpoint",
          "230: do_execsql_test 8.1 {",
          "231:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "232: }",
          "",
          "---------------"
        ],
        "ext/misc/uuid.c||ext/misc/uuid.c": [
          "File: ext/misc/uuid.c -> ext/misc/uuid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #include \"sqlite3ext.h\"",
          "62: SQLITE_EXTENSION_INIT1",
          "63: #include <assert.h>",
          "64: #include <string.h>",
          "65: #include <ctype.h>",
          "67: #if !defined(SQLITE_ASCII) && !defined(SQLITE_EBCDIC)",
          "68: # define SQLITE_ASCII 1",
          "69: #endif",
          "76: static unsigned char sqlite3UuidHexToInt(int h){",
          "77:   assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );",
          "78: #ifdef SQLITE_ASCII",
          "79:   h += 9*(1&(h>>6));",
          "80: #endif",
          "81: #ifdef SQLITE_EBCDIC",
          "82:   h += 9*(1&~(h>>4));",
          "83: #endif",
          "84:   return (unsigned char)(h & 0xf);",
          "85: }",
          "92: static void sqlite3UuidBlobToStr(",
          "95: ){",
          "96:   static const char zDigits[] = \"0123456789abcdef\";",
          "97:   int i, k;",
          "98:   unsigned char x;",
          "99:   k = 0;",
          "100:   for(i=0, k=0x550; i<16; i++, k=k>>1){",
          "101:     if( k&1 ){",
          "102:       zStr[0] = '-';",
          "103:       zStr++;",
          "104:     }",
          "105:     x = aBlob[i];",
          "106:     zStr[0] = zDigits[x>>4];",
          "107:     zStr[1] = zDigits[x&0xf];",
          "108:     zStr += 2;",
          "109:   }",
          "111: }",
          "118: static int sqlite3UuidStrToBlob(",
          "121: ){",
          "122:   int i;",
          "123:   if( zStr[0]=='{' ) zStr++;",
          "124:   for(i=0; i<16; i++){",
          "125:     if( zStr[0]=='-' ) zStr++;",
          "126:     if( isxdigit(zStr[0]) && isxdigit(zStr[1]) ){",
          "127:       aBlob[i] = (sqlite3UuidHexToInt(zStr[0])<<4)",
          "128:                       + sqlite3UuidHexToInt(zStr[1]);",
          "129:       zStr += 2;",
          "130:     }else{",
          "131:       return 1;",
          "132:     }",
          "133:   }",
          "134:   if( zStr[0]=='}' ) zStr++;",
          "135:   return zStr[0]!=0;",
          "136: }",
          "142: static const unsigned char *sqlite3UuidInputToBlob(",
          "145: ){",
          "146:   switch( sqlite3_value_type(pIn) ){",
          "147:     case SQLITE_TEXT: {",
          "148:       const unsigned char *z = sqlite3_value_text(pIn);",
          "149:       if( sqlite3UuidStrToBlob(z, pBuf) ) return 0;",
          "150:       return pBuf;",
          "151:     }",
          "152:     case SQLITE_BLOB: {",
          "153:       int n = sqlite3_value_bytes(pIn);",
          "154:       return n==16 ? sqlite3_value_blob(pIn) : 0;",
          "155:     }",
          "156:     default: {",
          "157:       return 0;",
          "158:     }",
          "159:   }",
          "160: }",
          "163: static void sqlite3UuidFunc(",
          "164:   sqlite3_context *context,",
          "165:   int argc,",
          "166:   sqlite3_value **argv",
          "167: ){",
          "168:   unsigned char aBlob[16];",
          "169:   unsigned char zStr[37];",
          "170:   (void)argc;",
          "171:   (void)argv;",
          "172:   sqlite3_randomness(16, aBlob);",
          "173:   aBlob[6] = (aBlob[6]&0x0f) + 0x40;",
          "174:   aBlob[8] = (aBlob[8]&0x3f) + 0x80;",
          "175:   sqlite3UuidBlobToStr(aBlob, zStr);",
          "176:   sqlite3_result_text(context, (char*)zStr, 36, SQLITE_TRANSIENT);",
          "177: }",
          "180: static void sqlite3UuidStrFunc(",
          "181:   sqlite3_context *context,",
          "182:   int argc,",
          "183:   sqlite3_value **argv",
          "184: ){",
          "185:   unsigned char aBlob[16];",
          "186:   unsigned char zStr[37];",
          "187:   const unsigned char *pBlob;",
          "188:   (void)argc;",
          "189:   pBlob = sqlite3UuidInputToBlob(argv[0], aBlob);",
          "190:   if( pBlob==0 ) return;",
          "191:   sqlite3UuidBlobToStr(pBlob, zStr);",
          "192:   sqlite3_result_text(context, (char*)zStr, 36, SQLITE_TRANSIENT);",
          "193: }",
          "196: static void sqlite3UuidBlobFunc(",
          "197:   sqlite3_context *context,",
          "198:   int argc,",
          "199:   sqlite3_value **argv",
          "200: ){",
          "201:   unsigned char aBlob[16];",
          "202:   const unsigned char *pBlob;",
          "203:   (void)argc;",
          "204:   pBlob = sqlite3UuidInputToBlob(argv[0], aBlob);",
          "205:   if( pBlob==0 ) return;",
          "206:   sqlite3_result_blob(context, pBlob, 16, SQLITE_TRANSIENT);",
          "207: }",
          "209: #ifdef _WIN32",
          "210: __declspec(dllexport)",
          "211: #endif",
          "212: int sqlite3_uuid_init(",
          "213:   sqlite3 *db,",
          "214:   char **pzErrMsg,",
          "215:   const sqlite3_api_routines *pApi",
          "216: ){",
          "217:   int rc = SQLITE_OK;",
          "218:   SQLITE_EXTENSION_INIT2(pApi);",
          "220:   rc = sqlite3_create_function(db, \"uuid\", 0, SQLITE_UTF8, 0,",
          "221:                                sqlite3UuidFunc, 0, 0);",
          "222:   if( rc==SQLITE_OK ){",
          "223:     rc = sqlite3_create_function(db, \"uuid_str\", 1, SQLITE_UTF8, 0,",
          "224:                                  sqlite3UuidStrFunc, 0, 0);",
          "225:   }",
          "226:   if( rc==SQLITE_OK ){",
          "227:     rc = sqlite3_create_function(db, \"uuid_blob\", 1, SQLITE_UTF8, 0,",
          "228:                                  sqlite3UuidBlobFunc, 0, 0);",
          "229:   }",
          "230:   return rc;",
          "231: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b99d5701312f7472e6b606bd824f9273617e2655920485bf50aa96d408064721",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:       p = p->pLeft;",
          "176:       continue;",
          "177:     }",
          "178:     if( op==TK_COLLATE ){",
          "179:       pColl = sqlite3GetCollSeq(pParse, ENC(db), 0, p->u.zToken);",
          "180:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:     if( op==TK_VECTOR ){",
          "179:       p = p->x.pList->a[0].pExpr;",
          "180:       continue;",
          "181:     }",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1197:       sqlite3CompleteInsertion(pParse, pTab, iDataCur, iIdxCur,",
          "1198:           regIns, aRegIdx, 0, appendFlag, bUseSeek",
          "1199:       );",
          "",
          "[Removed Lines]",
          "1194:       bUseSeek = (isReplace==0 || (pTrigger==0 &&",
          "1195:           ((db->flags & SQLITE_ForeignKeys)==0 || sqlite3FkReferences(pTab)==0)",
          "1196:       ));",
          "",
          "[Added Lines]",
          "1194:       bUseSeek = (isReplace==0 || !sqlite3VdbeHasSubProgram(v));",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:   A = sqlite3PExpr(pParse, TK_VECTOR, 0, 0);",
          "1076:   if( A ){",
          "1077:     A->x.pList = pList;",
          "1078:   }else{",
          "1079:     sqlite3ExprListDelete(pParse->db, pList);",
          "1080:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:     if( pList->nExpr ){",
          "1079:       A->flags |= pList->a[0].pExpr->flags & EP_Propagate;",
          "1080:     }",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:       break;",
          "662:     }",
          "663:     case TK_VECTOR: {",
          "665:       break;",
          "666:     }",
          "667:     case TK_SELECT_COLUMN: {",
          "",
          "[Removed Lines]",
          "664:       sqlite3TreeViewBareExprList(pView, pExpr->x.pList, \"VECTOR\");",
          "",
          "[Added Lines]",
          "664:       char *z = sqlite3_mprintf(\"VECTOR%s\",zFlgs);",
          "665:       sqlite3TreeViewBareExprList(pView, pExpr->x.pList, z);",
          "666:       sqlite3_free(z);",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "279: typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);",
          "280: RecordCompare sqlite3VdbeFindCompare(UnpackedRecord*);",
          "283: void sqlite3VdbeLinkSubProgram(Vdbe *, SubProgram *);",
          "286: int sqlite3NotPureFunc(sqlite3_context*);",
          "",
          "[Removed Lines]",
          "282: #ifndef SQLITE_OMIT_TRIGGER",
          "284: #endif",
          "",
          "[Added Lines]",
          "283: int sqlite3VdbeHasSubProgram(Vdbe*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1105:   pVdbe->pProgram = p;",
          "1106: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1111: int sqlite3VdbeHasSubProgram(Vdbe *pVdbe){",
          "1112:   return pVdbe->pProgram!=0;",
          "1113: }",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "595:   SELECT 2 FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE);",
          "596: } {1 2}",
          "598: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598: # 2019-10-23 Ticket 135c9da7513e5a97",
          "599: do_execsql_test 25.10 {",
          "600:   DROP TABLE t0;",
          "601:   CREATE TABLE t0(c0 UNIQUE);",
          "602:   INSERT INTO t0(c0) VALUES('a');",
          "603:   SELECT (t0.c0, 0) < ('B' COLLATE NOCASE, 0) FROM t0;",
          "604:   SELECT 2 FROM t0 WHERE (t0.c0, 0) < ('B' COLLATE NOCASE, 0);",
          "605: } {1 2}",
          "606: do_execsql_test 25.20 {",
          "607:   SELECT ('B' COLLATE NOCASE, 0)> (t0.c0, 0) FROM t0;",
          "608:   SELECT 2 FROM t0 WHERE ('B' COLLATE NOCASE, 0)> (t0.c0, 0);",
          "609: } {1 2}",
          "610: do_execsql_test 25.30 {",
          "611:   SELECT ('B', 0)> (t0.c0 COLLATE nocase, 0) FROM t0;",
          "612:   SELECT 2 FROM t0 WHERE ('B', 0)> (t0.c0 COLLATE nocase, 0);",
          "613: } {1 2}",
          "614: do_execsql_test 25.40 {",
          "615:   SELECT (t0.c0 COLLATE nocase, 0) < ('B', 0) FROM t0;",
          "616:   SELECT 2 FROM t0 WHERE (t0.c0 COLLATE nocase, 0) < ('B', 0);",
          "617: } {1 2}",
          "",
          "---------------"
        ],
        "test/trigger1.test||test/trigger1.test": [
          "File: test/trigger1.test -> test/trigger1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "782:   DROP TRIGGER r20_3;",
          "783: } {}",
          "785: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "785: # 2019-10-24 ticket 50c09fc2cf0d91ce",
          "786: #",
          "787: db close",
          "788: sqlite3 db :memory:",
          "789: do_execsql_test trigger1-21.1 {",
          "790:   PRAGMA recursive_triggers = true;",
          "791:   CREATE TABLE t0(a, b, c UNIQUE);",
          "792:   CREATE UNIQUE INDEX i0 ON t0(b) WHERE a;",
          "793:   CREATE TRIGGER tr0 AFTER DELETE ON t0 BEGIN",
          "794:     DELETE FROM t0;",
          "795:   END;",
          "796:   INSERT INTO t0(a,b,c) VALUES(0,0,9),(1,1,1);",
          "797:   REPLACE INTO t0(a,b,c) VALUES(2,0,9);",
          "798:   SELECT * FROM t0;",
          "799: } {2 0 9}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f95909c7648942e7157722c33b5e5f9293bf3436",
      "candidate_info": {
        "commit_hash": "f95909c7648942e7157722c33b5e5f9293bf3436",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f95909c7648942e7157722c33b5e5f9293bf3436",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fixes for WITHOUT ROWID tables with VIRTUAL columns and an INTEGER PRIMARY KEY.\n\nFossilOrigin-Name: 86074da0fd2949e231898ef0bc672d90fd89cefa49fb0eb50ff398fbdd91d1ad",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 85bc4524d76999080faa4474e8880d2b6a2ac3a7f6a76239af4de1a42f8138c8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1226:     pCol->colFlags |= COLFLAG_HASTYPE;",
          "1227:   }",
          "1228:   p->nCol++;",
          "1229:   pParse->constraintName.n = 0;",
          "1230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1229:   p->nNVCol++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1591:       goto generated_error;",
          "1592:     }",
          "1593:   }",
          "1594:   pCol->colFlags |= eType;",
          "1595:   assert( TF_HasVirtual==COLFLAG_VIRTUAL );",
          "1596:   assert( TF_HasStored==COLFLAG_STORED );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1595:   if( eType==COLFLAG_VIRTUAL ) pTab->nNVCol--;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2156:   assert( !db->mallocFailed );",
          "2157:   p = pParse->pNewTable;",
          "2158:   if( p==0 ) return;",
          "2161:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
          "2162:     p->tabFlags |= TF_Shadow;",
          "",
          "[Removed Lines]",
          "2159:   p->nNVCol = p->nCol;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2197:       return;",
          "2198:     }",
          "2199:     p->tabFlags |= TF_WithoutRowid | TF_NoVisibleRowid;",
          "2200:   }",
          "2202: #ifndef SQLITE_OMIT_CHECK",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2201:     convertToWithoutRowidTable(pParse, p);",
          "2203:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2212:     for(ii=0; ii<p->nCol; ii++){",
          "2213:       u32 colFlags = p->aCol[ii].colFlags;",
          "2214:       if( (colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "2219:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2220:                                     p->aCol[ii].pDflt, 0);",
          "2221:       }",
          "",
          "[Removed Lines]",
          "2215:         if( colFlags & COLFLAG_VIRTUAL ){",
          "2216:           p->nNVCol--;",
          "2217:           assert( p->nNVCol>=0 );",
          "2218:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2223:   }",
          "2224: #endif",
          "2235:   estimateTableWidth(p);",
          "2236:   for(pIdx=p->pIndex; pIdx; pIdx=pIdx->pNext){",
          "",
          "[Removed Lines]",
          "2227:   if( (tabOpts & TF_WithoutRowid)!=0 ){",
          "2228:     convertToWithoutRowidTable(pParse, p);",
          "2229:   }",
          "2231:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5978a7a525c58e1402b87ba957d287f650e0f9ab",
      "candidate_info": {
        "commit_hash": "5978a7a525c58e1402b87ba957d287f650e0f9ab",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5978a7a525c58e1402b87ba957d287f650e0f9ab",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c",
          "test/view.test",
          "test/window9.test"
        ],
        "message": "Ensure that columns of views and sub-queries that are expressions with no affinity are not assigned BLOB affinity. This matches the documentation. Fix for [61c853857f40da49].\n\nFossilOrigin-Name: e15a0977ddfad3d0f4c7654c5665ff10830c25b20ecf6ef500b1ba23fb89e31f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/view.test||test/view.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a29f2a7d07beff64e489e8f824babc6228c4a499fadc0ee701caa60a63baadcd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2160:       addrTop = sqlite3VdbeCurrentAddr(v) + 1;",
          "2161:       sqlite3VdbeAddOp3(v, OP_InitCoroutine, regYield, 0, addrTop);",
          "2162:       if( pParse->nErr ) return;",
          "2164:       if( pSelTab==0 ) return;",
          "2165:       assert( p->aCol==0 );",
          "2166:       p->nCol = pSelTab->nCol;",
          "",
          "[Removed Lines]",
          "2163:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect);",
          "",
          "[Added Lines]",
          "2163:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect, SQLITE_AFF_BLOB);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2424: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "2425:     xAuth = db->xAuth;",
          "2426:     db->xAuth = 0;",
          "2428:     db->xAuth = xAuth;",
          "2429: #else",
          "2431: #endif",
          "2432:     pParse->nTab = n;",
          "2433:     if( pTable->pCheck ){",
          "",
          "[Removed Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel);",
          "",
          "[Added Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, 0);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2443:        && pParse->nErr==0",
          "2444:        && pTable->nCol==pSel->pEList->nExpr",
          "2445:       ){",
          "2447:       }",
          "2448:     }else if( pSelTab ){",
          "",
          "[Removed Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel);",
          "",
          "[Added Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel, 0);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     }",
          "89:     for(n=0; n<pIdx->nColumn; n++){",
          "90:       i16 x = pIdx->aiColumn[n];",
          "91:       if( x>=0 ){",
          "93:       }else if( x==XN_ROWID ){",
          "95:       }else{",
          "97:         assert( x==XN_EXPR );",
          "98:         assert( pIdx->aColExpr!=0 );",
          "99:         aff = sqlite3ExprAffinity(pIdx->aColExpr->a[n].pExpr);",
          "102:       }",
          "103:     }",
          "104:     pIdx->zColAff[n] = 0;",
          "105:   }",
          "",
          "[Removed Lines]",
          "92:         pIdx->zColAff[n] = pTab->aCol[x].affinity;",
          "94:         pIdx->zColAff[n] = SQLITE_AFF_INTEGER;",
          "96:         char aff;",
          "100:         if( aff==0 ) aff = SQLITE_AFF_BLOB;",
          "101:         pIdx->zColAff[n] = aff;",
          "",
          "[Added Lines]",
          "91:       char aff;",
          "93:         aff = pTab->aCol[x].affinity;",
          "95:         aff = SQLITE_AFF_INTEGER;",
          "101:       if( aff==0 ) aff = SQLITE_AFF_BLOB;",
          "102:       pIdx->zColAff[n] = aff;",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2068:         pCol->colFlags |= COLFLAG_HASTYPE;",
          "2069:       }",
          "2070:     }",
          "2072:     pColl = sqlite3ExprCollSeq(pParse, p);",
          "2073:     if( pColl && pCol->zColl==0 ){",
          "2074:       pCol->zColl = sqlite3DbStrDup(db, pColl->zName);",
          "",
          "[Removed Lines]",
          "2071:     if( pCol->affinity==0 ) pCol->affinity = SQLITE_AFF_BLOB;",
          "",
          "[Added Lines]",
          "2072:     if( pCol->affinity==0 ) pCol->affinity = aff;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2085:   Table *pTab;",
          "2086:   sqlite3 *db = pParse->db;",
          "2087:   u64 savedFlags;",
          "",
          "[Removed Lines]",
          "2084: Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){",
          "",
          "[Added Lines]",
          "2085: Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect, char aff){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2101:   pTab->zName = 0;",
          "2102:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "2103:   sqlite3ColumnsFromExprList(pParse, pSelect->pEList, &pTab->nCol, &pTab->aCol);",
          "2105:   pTab->iPKey = -1;",
          "2106:   if( db->mallocFailed ){",
          "2107:     sqlite3DeleteTable(db, pTab);",
          "",
          "[Removed Lines]",
          "2104:   sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSelect);",
          "",
          "[Added Lines]",
          "2105:   sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSelect, aff);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5195:       Select *pSel = pFrom->pSelect;",
          "5196:       if( pSel ){",
          "5197:         while( pSel->pPrior ) pSel = pSel->pPrior;",
          "5199:       }",
          "5200:     }",
          "5201:   }",
          "",
          "[Removed Lines]",
          "5198:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSel);",
          "",
          "[Added Lines]",
          "5199:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSel, 0);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3911: void sqlite3CommitInternalChanges(sqlite3*);",
          "3912: void sqlite3DeleteColumnNames(sqlite3*,Table*);",
          "3913: int sqlite3ColumnsFromExprList(Parse*,ExprList*,i16*,Column**);",
          "3916: void sqlite3OpenMasterTable(Parse *, int);",
          "3917: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3918: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "",
          "[Removed Lines]",
          "3914: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*);",
          "3915: Table *sqlite3ResultSetOfSelect(Parse*,Select*);",
          "",
          "[Added Lines]",
          "3914: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*,char);",
          "3915: Table *sqlite3ResultSetOfSelect(Parse*,Select*,char);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "994:       p->pSrc->a[0].pSelect = pSub;",
          "995:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "996:       pSub->selFlags |= SF_Expanded;",
          "998:       if( pTab2==0 ){",
          "999:         rc = SQLITE_NOMEM;",
          "1000:       }else{",
          "",
          "[Removed Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub);",
          "",
          "[Added Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub, 0);",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "724:   1 1 3 3",
          "725: }",
          "727: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727: #-------------------------------------------------------------------------",
          "728: reset_db",
          "729: do_execsql_test view-27.0 {",
          "730:   CREATE TABLE t0(c0 TEXT, c1);",
          "731:   INSERT INTO t0(c0, c1) VALUES (-1, 0);",
          "732:   CREATE VIEW v0(c0, c1) AS SELECT t0.c0, AVG(t0.c1) FROM t0;",
          "733: }",
          "735: do_execsql_test view-27.1 {",
          "736:   SELECT c0, typeof(c0), affinity(c0), c1, typeof(c1), affinity(c1) FROM v0;",
          "737: } {",
          "738:   -1   text text",
          "739:    0.0 real none",
          "740: }",
          "742: do_execsql_test view-27.2 { SELECT c0<c1 FROM v0 } 1",
          "743: do_execsql_test view-27.3 { SELECT c1<c0 FROM v0 } 0",
          "744: do_execsql_test view-27.4 {",
          "745:   SELECT 1 FROM v0 WHERE c1<c0",
          "746: } {}",
          "747: do_execsql_test view-27.5 {",
          "748:   SELECT 1 FROM v0 WHERE c0<c1",
          "749: } {1}",
          "751: do_execsql_test view-27.6 {",
          "752:   SELECT c0<c1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "753: } 1",
          "754: do_execsql_test view-27.7 {",
          "755:   SELECT c1<c0 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "756: } 0",
          "757: do_execsql_test view-27.8 {",
          "758:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c1<c0",
          "759: } {}",
          "760: do_execsql_test view-27.9 {",
          "761:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c0<c1",
          "762: } {1}",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:       );",
          "132: } {1 {sub-select returns 3 columns - expected 1}}",
          "135: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: #-------------------------------------------------------------------------",
          "135: reset_db",
          "136: do_execsql_test 4.0 {",
          "137:   CREATE TABLE t1(a, b TEXT);",
          "138:   INSERT INTO t1 VALUES('A', 1), ('A', 2), ('2', 1), ('2', 2);",
          "139: }",
          "141: do_execsql_test 4.1.1 {",
          "142:   SELECT b, b=count(*), '1,2'                   FROM t1 GROUP BY b;",
          "143: } {1 0 1,2 2 1 1,2}",
          "144: do_execsql_test 4.1.2 {",
          "145:   SELECT b, b=count(*), group_concat(b) OVER () FROM t1 GROUP BY b;",
          "146: } {1 0 1,2 2 1 1,2}",
          "",
          "---------------"
        ]
      }
    }
  ]
}