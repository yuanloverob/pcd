{
  "cve_id": "CVE-2016-10161",
  "cve_desc": "The object_common1 function in ext/standard/var_unserializer.c in PHP before 5.6.30, 7.0.x before 7.0.15, and 7.1.x before 7.1.1 allows remote attackers to cause a denial of service (buffer over-read and application crash) via crafted serialized data that is mishandled in a finish_nested_data call.",
  "repo": "php/php-src",
  "patch_hash": "16b3003ffc6393e250f069aa28a78dc5a2c064b2",
  "patch_info": {
    "commit_hash": "16b3003ffc6393e250f069aa28a78dc5a2c064b2",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/16b3003ffc6393e250f069aa28a78dc5a2c064b2",
    "files": [
      "ext/standard/tests/serialize/bug73825.phpt",
      "ext/standard/var_unserializer.c",
      "ext/standard/var_unserializer.re"
    ],
    "message": "Fix bug #73825 - Heap out of bounds read on unserialize in finish_nested_data()",
    "before_after_code_files": [
      "ext/standard/tests/serialize/bug73825.phpt||ext/standard/tests/serialize/bug73825.phpt",
      "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
      "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
    ]
  },
  "patch_diff": {
    "ext/standard/tests/serialize/bug73825.phpt||ext/standard/tests/serialize/bug73825.phpt": [
      "File: ext/standard/tests/serialize/bug73825.phpt -> ext/standard/tests/serialize/bug73825.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: --TEST--",
      "2: Bug #73825 Heap out of bounds read on unserialize in finish_nested_data()",
      "3: --FILE--",
      "4: <?php",
      "5: $obj = unserialize('O:8:\"00000000\":');",
      "6: var_dump($obj);",
      "7: ?>",
      "8: --EXPECTF--",
      "9: Warning: Bad unserialize data in %sbug73825.php on line %d",
      "11: Notice: unserialize(): Error at offset 13 of 15 bytes in %sbug73825.php on line %d",
      "12: bool(false)",
      "",
      "---------------"
    ],
    "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
      "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "405: {",
      "406:  long elements;",
      "408:  elements = parse_iv2((*p) + 2, p);",
      "410:  (*p) += 2;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "408:  if( *p >= max - 2) {",
      "409:   zend_error(E_WARNING, \"Bad unserialize data\");",
      "410:   return -1;",
      "411:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "417:   zend_error(E_WARNING, \"Erroneous data format for unserializing '%s'\", ce->name);",
      "419:  }",
      "421:  return elements;",
      "",
      "[Removed Lines]",
      "418:   return 0;",
      "",
      "[Added Lines]",
      "423:   return -1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "496: {",
      "497:  YYCTYPE yych;",
      "498:  static const unsigned char yybm[] = {",
      "",
      "[Removed Lines]",
      "495: #line 496 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "500: #line 501 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "552:  yych = *(YYMARKER = ++YYCURSOR);",
      "553:  if (yych == ':') goto yy95;",
      "554: yy3:",
      "556:  { return 0; }",
      "558: yy4:",
      "559:  yych = *(YYMARKER = ++YYCURSOR);",
      "560:  if (yych == ':') goto yy89;",
      "",
      "[Removed Lines]",
      "555: #line 861 \"ext/standard/var_unserializer.re\"",
      "557: #line 558 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "560: #line 875 \"ext/standard/var_unserializer.re\"",
      "562: #line 563 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "597:  goto yy3;",
      "598: yy14:",
      "599:  ++YYCURSOR;",
      "601:  {",
      "603:  php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Unexpected end of serialized data\");",
      "605: }",
      "607: yy16:",
      "608:  yych = *++YYCURSOR;",
      "609:  goto yy3;",
      "",
      "[Removed Lines]",
      "600: #line 855 \"ext/standard/var_unserializer.re\"",
      "606: #line 607 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "605: #line 869 \"ext/standard/var_unserializer.re\"",
      "611: #line 612 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "634:  yych = *++YYCURSOR;",
      "635:  if (yych != '\"') goto yy18;",
      "636:  ++YYCURSOR;",
      "638:  {",
      "639:  size_t len, len2, len3, maxlen;",
      "640:  long elements;",
      "",
      "[Removed Lines]",
      "637: #line 708 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "642: #line 717 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "775:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
      "777:  if (incomplete_class) {",
      "778:   php_store_class_name(*rval, class_name, len2);",
      "779:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "782:  if (elements < 0) {",
      "783:     efree(class_name);",
      "784:     return 0;",
      "785:  }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "782:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
      "783: }",
      "785: yy25:",
      "786:  yych = *++YYCURSOR;",
      "787:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "784: #line 785 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "794: #line 795 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "806:  yych = *++YYCURSOR;",
      "807:  if (yych != '\"') goto yy18;",
      "808:  ++YYCURSOR;",
      "810:  {",
      "811:     if (!var_hash) return 0;",
      "813:  INIT_PZVAL(*rval);",
      "817: }",
      "819: yy32:",
      "820:  yych = *++YYCURSOR;",
      "821:  if (yych == '+') goto yy33;",
      "",
      "[Removed Lines]",
      "809: #line 699 \"ext/standard/var_unserializer.re\"",
      "815:  return object_common2(UNSERIALIZE_PASSTHRU,",
      "816:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
      "818: #line 819 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "819: #line 704 \"ext/standard/var_unserializer.re\"",
      "821:  long elements;",
      "826:  elements = object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR);",
      "827:  if (elements < 0) {",
      "828:   return 0;",
      "829:  }",
      "830:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
      "832: #line 833 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "836:  yych = *++YYCURSOR;",
      "837:  if (yych != '{') goto yy18;",
      "838:  ++YYCURSOR;",
      "840:  {",
      "841:  long elements = parse_iv(start + 2);",
      "",
      "[Removed Lines]",
      "839: #line 678 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "853: #line 683 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "858:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
      "859: }",
      "861: yy39:",
      "862:  yych = *++YYCURSOR;",
      "863:  if (yych == '+') goto yy40;",
      "",
      "[Removed Lines]",
      "860: #line 861 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "874: #line 875 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "878:  yych = *++YYCURSOR;",
      "879:  if (yych != '\"') goto yy18;",
      "880:  ++YYCURSOR;",
      "882:  {",
      "883:  size_t len, maxlen;",
      "884:  char *str;",
      "",
      "[Removed Lines]",
      "881: #line 643 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "895: #line 648 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "913:  ZVAL_STRINGL(*rval, str, len, 0);",
      "914:  return 1;",
      "915: }",
      "917: yy46:",
      "918:  yych = *++YYCURSOR;",
      "919:  if (yych == '+') goto yy47;",
      "",
      "[Removed Lines]",
      "916: #line 917 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "930: #line 931 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "934:  yych = *++YYCURSOR;",
      "935:  if (yych != '\"') goto yy18;",
      "936:  ++YYCURSOR;",
      "938:  {",
      "939:  size_t len, maxlen;",
      "940:  char *str;",
      "",
      "[Removed Lines]",
      "937: #line 610 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "951: #line 615 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "967:  ZVAL_STRINGL(*rval, str, len, 1);",
      "968:  return 1;",
      "969: }",
      "971: yy53:",
      "972:  yych = *++YYCURSOR;",
      "973:  if (yych <= '/') {",
      "",
      "[Removed Lines]",
      "970: #line 971 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "984: #line 985 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1055:  }",
      "1056: yy63:",
      "1057:  ++YYCURSOR;",
      "1059:  {",
      "1060: #if SIZEOF_LONG == 4",
      "1061: use_double:",
      "",
      "[Removed Lines]",
      "1058: #line 600 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1072: #line 605 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1065:  ZVAL_DOUBLE(*rval, zend_strtod((const char *)start + 2, NULL));",
      "1066:  return 1;",
      "1067: }",
      "1069: yy65:",
      "1070:  yych = *++YYCURSOR;",
      "1071:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "1068: #line 1069 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1082: #line 1083 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1124:  yych = *++YYCURSOR;",
      "1125:  if (yych != ';') goto yy18;",
      "1126:  ++YYCURSOR;",
      "1128:  {",
      "1130:  INIT_PZVAL(*rval);",
      "",
      "[Removed Lines]",
      "1127: #line 585 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1141: #line 590 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1140:  return 1;",
      "1141: }",
      "1143: yy76:",
      "1144:  yych = *++YYCURSOR;",
      "1145:  if (yych == 'N') goto yy73;",
      "",
      "[Removed Lines]",
      "1142: #line 1143 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1156: #line 1157 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "1166:  if (yych <= '9') goto yy79;",
      "1167:  if (yych != ';') goto yy18;",
      "1168:  ++YYCURSOR;",
      "1170:  {",
      "1171: #if SIZEOF_LONG == 4",
      "1172:  int digits = YYCURSOR - start - 3;",
      "",
      "[Removed Lines]",
      "1169: #line 558 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1183: #line 563 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "1193:  ZVAL_LONG(*rval, parse_iv(start + 2));",
      "1194:  return 1;",
      "1195: }",
      "1197: yy83:",
      "1198:  yych = *++YYCURSOR;",
      "1199:  if (yych <= '/') goto yy18;",
      "",
      "[Removed Lines]",
      "1196: #line 1197 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1210: #line 1211 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1201:  yych = *++YYCURSOR;",
      "1202:  if (yych != ';') goto yy18;",
      "1203:  ++YYCURSOR;",
      "1205:  {",
      "1207:  INIT_PZVAL(*rval);",
      "1208:  ZVAL_BOOL(*rval, parse_iv(start + 2));",
      "1209:  return 1;",
      "1210: }",
      "1212: yy87:",
      "1213:  ++YYCURSOR;",
      "1215:  {",
      "1217:  INIT_PZVAL(*rval);",
      "1218:  ZVAL_NULL(*rval);",
      "1219:  return 1;",
      "1220: }",
      "1222: yy89:",
      "1223:  yych = *++YYCURSOR;",
      "1224:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "1204: #line 551 \"ext/standard/var_unserializer.re\"",
      "1211: #line 1212 \"ext/standard/var_unserializer.c\"",
      "1214: #line 544 \"ext/standard/var_unserializer.re\"",
      "1221: #line 1222 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1218: #line 556 \"ext/standard/var_unserializer.re\"",
      "1225: #line 1226 \"ext/standard/var_unserializer.c\"",
      "1228: #line 549 \"ext/standard/var_unserializer.re\"",
      "1235: #line 1236 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1241:  if (yych <= '9') goto yy91;",
      "1242:  if (yych != ';') goto yy18;",
      "1243:  ++YYCURSOR;",
      "1245:  {",
      "1246:  long id;",
      "",
      "[Removed Lines]",
      "1244: #line 521 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1258: #line 526 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1265:  return 1;",
      "1266: }",
      "1268: yy95:",
      "1269:  yych = *++YYCURSOR;",
      "1270:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "1267: #line 1268 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1281: #line 1282 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1287:  if (yych <= '9') goto yy97;",
      "1288:  if (yych != ';') goto yy18;",
      "1289:  ++YYCURSOR;",
      "1291:  {",
      "1292:  long id;",
      "",
      "[Removed Lines]",
      "1290: #line 500 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1304: #line 505 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1309:  return 1;",
      "1310: }",
      "1312: }",
      "1316:  return 0;",
      "",
      "[Removed Lines]",
      "1311: #line 1312 \"ext/standard/var_unserializer.c\"",
      "1313: #line 863 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1325: #line 1326 \"ext/standard/var_unserializer.c\"",
      "1327: #line 877 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------"
    ],
    "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
      "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
      "--- Hunk 1 ---",
      "[Context before]",
      "409: {",
      "410:  long elements;",
      "412:  elements = parse_iv2((*p) + 2, p);",
      "414:  (*p) += 2;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "412:  if( *p >= max - 2) {",
      "413:   zend_error(E_WARNING, \"Bad unserialize data\");",
      "414:   return -1;",
      "415:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:   zend_error(E_WARNING, \"Erroneous data format for unserializing '%s'\", ce->name);",
      "423:  }",
      "425:  return elements;",
      "",
      "[Removed Lines]",
      "422:   return 0;",
      "",
      "[Added Lines]",
      "427:   return -1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "697: }",
      "699: \"o:\" iv \":\" [\"] {",
      "700:     if (!var_hash) return 0;",
      "702:  INIT_PZVAL(*rval);",
      "706: }",
      "708: object \":\" uiv \":\" [\"] {",
      "",
      "[Removed Lines]",
      "704:  return object_common2(UNSERIALIZE_PASSTHRU,",
      "705:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
      "",
      "[Added Lines]",
      "705:  long elements;",
      "710:  elements = object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR);",
      "711:  if (elements < 0) {",
      "712:   return 0;",
      "713:  }",
      "714:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "845:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
      "847:  if (incomplete_class) {",
      "848:   php_store_class_name(*rval, class_name, len2);",
      "849:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "856:  if (elements < 0) {",
      "857:     efree(class_name);",
      "858:     return 0;",
      "859:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3a25a56a92ac1d0d6028a8ecd32ccf03bcd71ade",
      "candidate_info": {
        "commit_hash": "3a25a56a92ac1d0d6028a8ecd32ccf03bcd71ade",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/3a25a56a92ac1d0d6028a8ecd32ccf03bcd71ade",
        "files": [
          "ext/standard/tests/serialize/bug25378.phpt",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re"
        ],
        "message": "Fixed bug #74111",
        "before_after_code_files": [
          "ext/standard/tests/serialize/bug25378.phpt||ext/standard/tests/serialize/bug25378.phpt",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/tests/serialize/bug25378.phpt||ext/standard/tests/serialize/bug25378.phpt": [
          "File: ext/standard/tests/serialize/bug25378.phpt -> ext/standard/tests/serialize/bug25378.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: Notice: unserialize(): Error at offset 17 of 33 bytes in %sbug25378.php on line %d",
          "43: bool(false)",
          "46: bool(false)",
          "48: Notice: unserialize(): Error at offset 2 of 13 bytes in %sbug25378.php on line %d",
          "",
          "[Removed Lines]",
          "45: Notice: unserialize(): Error at offset 33 of 32 bytes in %sbug25378.php on line %d",
          "",
          "[Added Lines]",
          "45: Notice: unserialize(): Error at offset 32 of 32 bytes in %sbug25378.php on line %d",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "429: static inline int finish_nested_data(UNSERIALIZE_PARAMETER)",
          "430: {",
          "438: }",
          "440: static inline int object_custom(UNSERIALIZE_PARAMETER, zend_class_entry *ce)",
          "",
          "[Removed Lines]",
          "431:  if (*((*p)++) == '}')",
          "432:   return 1;",
          "434: #if SOMETHING_NEW_MIGHT_LEAD_TO_CRASH_ENABLE_IF_YOU_ARE_BRAVE",
          "435:  zval_ptr_dtor(rval);",
          "436: #endif",
          "437:  return 0;",
          "",
          "[Added Lines]",
          "431:  if (*p >= max || **p != '}') {",
          "432:   return 0;",
          "433:  }",
          "435:  (*p)++;",
          "436:  return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "582:  start = cursor;",
          "586: {",
          "587:  YYCTYPE yych;",
          "588:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "585: #line 586 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "584: #line 585 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "623:  yych = *YYCURSOR;",
          "624:  switch (yych) {",
          "625:  case 'C':",
          "627:  case 'N': goto yy5;",
          "634:  case 'o': goto yy12;",
          "639:  }",
          "640: yy2:",
          "642: yy3:",
          "644:  { return 0; }",
          "645: #line 646 \"ext/standard/var_unserializer.c\"",
          "646: yy4:",
          "647:  yych = *(YYMARKER = ++YYCURSOR);",
          "649:  goto yy3;",
          "650: yy5:",
          "651:  yych = *++YYCURSOR;",
          "653:  goto yy3;",
          "654: yy6:",
          "655:  yych = *(YYMARKER = ++YYCURSOR);",
          "657:  goto yy3;",
          "658: yy7:",
          "659:  yych = *(YYMARKER = ++YYCURSOR);",
          "661:  goto yy3;",
          "662: yy8:",
          "663:  yych = *(YYMARKER = ++YYCURSOR);",
          "665:  goto yy3;",
          "666: yy9:",
          "667:  yych = *(YYMARKER = ++YYCURSOR);",
          "669:  goto yy3;",
          "670: yy10:",
          "671:  yych = *(YYMARKER = ++YYCURSOR);",
          "673:  goto yy3;",
          "674: yy11:",
          "675:  yych = *(YYMARKER = ++YYCURSOR);",
          "677:  goto yy3;",
          "678: yy12:",
          "679:  yych = *(YYMARKER = ++YYCURSOR);",
          "681:  goto yy3;",
          "682: yy13:",
          "683:  yych = *(YYMARKER = ++YYCURSOR);",
          "685:  goto yy3;",
          "686: yy14:",
          "691:  ++YYCURSOR;",
          "693:  {",
          "695:  php_error_docref(NULL, E_NOTICE, \"Unexpected end of serialized data\");",
          "697: }",
          "699: yy17:",
          "700:  yych = *++YYCURSOR;",
          "701:  if (yybm[0+yych] & 128) {",
          "703:  }",
          "705: yy18:",
          "706:  YYCURSOR = YYMARKER;",
          "707:  goto yy3;",
          "708: yy19:",
          "718:  yych = *++YYCURSOR;",
          "727:  }",
          "739:  goto yy18;",
          "742:  if (yych <= '/') goto yy18;",
          "746:  yych = *++YYCURSOR;",
          "755:   }",
          "764:   }",
          "765:  }",
          "776:  }",
          "787:  }",
          "789:  yych = *++YYCURSOR;",
          "790:  if (yych <= ',') {",
          "793:  } else {",
          "795:   if (yych <= '/') goto yy18;",
          "797:   goto yy18;",
          "798:  }",
          "800:  yych = *++YYCURSOR;",
          "802:  if (yych <= '/') goto yy18;",
          "812:  ++YYCURSOR;",
          "813:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "814:  yych = *YYCURSOR;",
          "818:  if (yych <= '/') goto yy18;",
          "822:  yych = *++YYCURSOR;",
          "826:  ++YYCURSOR;",
          "829:  if (yych <= '/') goto yy18;",
          "830:  if (yych <= '9') goto yy34;",
          "832:  goto yy18;",
          "834:  yych = *++YYCURSOR;",
          "835:  if (yych <= '/') goto yy18;",
          "836:  if (yych >= ':') goto yy18;",
          "838:  ++YYCURSOR;",
          "839:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "840:  yych = *YYCURSOR;",
          "841:  if (yych <= '/') goto yy18;",
          "846:  yych = *++YYCURSOR;",
          "850:  ++YYCURSOR;",
          "875:  }",
          "903:  }",
          "913:  yych = *++YYCURSOR;",
          "914:  if (yych <= '/') goto yy18;",
          "923:  goto yy18;",
          "925:  yych = *++YYCURSOR;",
          "926:  if (yych <= '/') goto yy18;",
          "927:  if (yych >= ':') goto yy18;",
          "929:  ++YYCURSOR;",
          "930:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "931:  yych = *YYCURSOR;",
          "932:  if (yych <= '/') goto yy18;",
          "937:  yych = *++YYCURSOR;",
          "941:  ++YYCURSOR;",
          "944:  if (yych <= '/') goto yy18;",
          "947:  goto yy18;",
          "949:  yych = *++YYCURSOR;",
          "950:  if (yych <= '/') goto yy18;",
          "951:  if (yych >= ':') goto yy18;",
          "953:  ++YYCURSOR;",
          "954:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "955:  yych = *YYCURSOR;",
          "956:  if (yych <= '/') goto yy18;",
          "961:  yych = *++YYCURSOR;",
          "965:  ++YYCURSOR;",
          "967:  {",
          "975:   return 0;",
          "976:  }",
          "982:  }",
          "988:  }",
          "990:  return 1;",
          "991: }",
          "994:  yych = *++YYCURSOR;",
          "996:  goto yy18;",
          "998:  yych = *++YYCURSOR;",
          "1000:  goto yy18;",
          "1002:  ++YYCURSOR;",
          "1011:  ++YYCURSOR;",
          "1012:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1013:  yych = *YYCURSOR;",
          "1014:  if (yych <= ';') {",
          "1015:   if (yych <= '/') goto yy18;",
          "1017:   if (yych <= ':') goto yy18;",
          "1018:  } else {",
          "1019:   if (yych <= 'E') {",
          "1020:    if (yych <= 'D') goto yy18;",
          "1022:   } else {",
          "1024:    goto yy18;",
          "1025:   }",
          "1026:  }",
          "1028:  ++YYCURSOR;",
          "1030:  {",
          "1031: #if SIZEOF_ZEND_LONG == 4",
          "1032: use_double:",
          "",
          "[Removed Lines]",
          "626:  case 'O': goto yy4;",
          "628:  case 'R': goto yy6;",
          "629:  case 'S': goto yy7;",
          "630:  case 'a': goto yy8;",
          "631:  case 'b': goto yy9;",
          "632:  case 'd': goto yy10;",
          "633:  case 'i': goto yy11;",
          "635:  case 'r': goto yy13;",
          "636:  case 's': goto yy14;",
          "637:  case '}': goto yy15;",
          "638:  default: goto yy2;",
          "641:  ++YYCURSOR;",
          "643: #line 963 \"ext/standard/var_unserializer.re\"",
          "648:  if (yych == ':') goto yy17;",
          "652:  if (yych == ';') goto yy19;",
          "656:  if (yych == ':') goto yy21;",
          "660:  if (yych == ':') goto yy22;",
          "664:  if (yych == ':') goto yy23;",
          "668:  if (yych == ':') goto yy24;",
          "672:  if (yych == ':') goto yy25;",
          "676:  if (yych == ':') goto yy26;",
          "680:  if (yych == ':') goto yy27;",
          "684:  if (yych == ':') goto yy28;",
          "687:  yych = *(YYMARKER = ++YYCURSOR);",
          "688:  if (yych == ':') goto yy29;",
          "689:  goto yy3;",
          "690: yy15:",
          "692: #line 957 \"ext/standard/var_unserializer.re\"",
          "698: #line 699 \"ext/standard/var_unserializer.c\"",
          "702:   goto yy31;",
          "704:  if (yych == '+') goto yy30;",
          "709:  ++YYCURSOR;",
          "710: #line 641 \"ext/standard/var_unserializer.re\"",
          "711:  {",
          "713:  ZVAL_NULL(rval);",
          "714:  return 1;",
          "715: }",
          "716: #line 717 \"ext/standard/var_unserializer.c\"",
          "717: yy21:",
          "719:  if (yych <= ',') {",
          "720:   if (yych == '+') goto yy33;",
          "721:   goto yy18;",
          "722:  } else {",
          "723:   if (yych <= '-') goto yy33;",
          "724:   if (yych <= '/') goto yy18;",
          "725:   if (yych <= '9') goto yy34;",
          "726:   goto yy18;",
          "728: yy22:",
          "729:  yych = *++YYCURSOR;",
          "730:  if (yych == '+') goto yy36;",
          "731:  if (yych <= '/') goto yy18;",
          "732:  if (yych <= '9') goto yy37;",
          "733:  goto yy18;",
          "734: yy23:",
          "735:  yych = *++YYCURSOR;",
          "736:  if (yych == '+') goto yy39;",
          "737:  if (yych <= '/') goto yy18;",
          "738:  if (yych <= '9') goto yy40;",
          "740: yy24:",
          "741:  yych = *++YYCURSOR;",
          "743:  if (yych <= '1') goto yy42;",
          "744:  goto yy18;",
          "745: yy25:",
          "747:  if (yych <= '/') {",
          "748:   if (yych <= ',') {",
          "749:    if (yych == '+') goto yy43;",
          "750:    goto yy18;",
          "751:   } else {",
          "752:    if (yych <= '-') goto yy44;",
          "753:    if (yych <= '.') goto yy45;",
          "754:    goto yy18;",
          "756:  } else {",
          "757:   if (yych <= 'I') {",
          "758:    if (yych <= '9') goto yy46;",
          "759:    if (yych <= 'H') goto yy18;",
          "760:    goto yy48;",
          "761:   } else {",
          "762:    if (yych == 'N') goto yy49;",
          "763:    goto yy18;",
          "766: yy26:",
          "767:  yych = *++YYCURSOR;",
          "768:  if (yych <= ',') {",
          "769:   if (yych == '+') goto yy50;",
          "770:   goto yy18;",
          "771:  } else {",
          "772:   if (yych <= '-') goto yy50;",
          "773:   if (yych <= '/') goto yy18;",
          "774:   if (yych <= '9') goto yy51;",
          "775:   goto yy18;",
          "777: yy27:",
          "778:  yych = *++YYCURSOR;",
          "779:  if (yych <= ',') {",
          "780:   if (yych == '+') goto yy53;",
          "781:   goto yy18;",
          "782:  } else {",
          "783:   if (yych <= '-') goto yy53;",
          "784:   if (yych <= '/') goto yy18;",
          "785:   if (yych <= '9') goto yy54;",
          "786:   goto yy18;",
          "788: yy28:",
          "791:   if (yych == '+') goto yy56;",
          "792:   goto yy18;",
          "794:   if (yych <= '-') goto yy56;",
          "796:   if (yych <= '9') goto yy57;",
          "799: yy29:",
          "801:  if (yych == '+') goto yy59;",
          "803:  if (yych <= '9') goto yy60;",
          "804:  goto yy18;",
          "805: yy30:",
          "806:  yych = *++YYCURSOR;",
          "807:  if (yybm[0+yych] & 128) {",
          "808:   goto yy31;",
          "809:  }",
          "810:  goto yy18;",
          "811: yy31:",
          "815:  if (yybm[0+yych] & 128) {",
          "816:   goto yy31;",
          "817:  }",
          "819:  if (yych <= ':') goto yy62;",
          "820:  goto yy18;",
          "821: yy33:",
          "823:  if (yych <= '/') goto yy18;",
          "824:  if (yych >= ':') goto yy18;",
          "825: yy34:",
          "827:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "828:  yych = *YYCURSOR;",
          "831:  if (yych == ';') goto yy63;",
          "833: yy36:",
          "837: yy37:",
          "842:  if (yych <= '9') goto yy37;",
          "843:  if (yych <= ':') goto yy65;",
          "844:  goto yy18;",
          "845: yy39:",
          "847:  if (yych <= '/') goto yy18;",
          "848:  if (yych >= ':') goto yy18;",
          "849: yy40:",
          "851:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "852:  yych = *YYCURSOR;",
          "853:  if (yych <= '/') goto yy18;",
          "854:  if (yych <= '9') goto yy40;",
          "855:  if (yych <= ':') goto yy66;",
          "856:  goto yy18;",
          "857: yy42:",
          "858:  yych = *++YYCURSOR;",
          "859:  if (yych == ';') goto yy67;",
          "860:  goto yy18;",
          "861: yy43:",
          "862:  yych = *++YYCURSOR;",
          "863:  if (yych == '.') goto yy45;",
          "864:  if (yych <= '/') goto yy18;",
          "865:  if (yych <= '9') goto yy46;",
          "866:  goto yy18;",
          "867: yy44:",
          "868:  yych = *++YYCURSOR;",
          "869:  if (yych <= '/') {",
          "870:   if (yych != '.') goto yy18;",
          "871:  } else {",
          "872:   if (yych <= '9') goto yy46;",
          "873:   if (yych == 'I') goto yy48;",
          "874:   goto yy18;",
          "876: yy45:",
          "877:  yych = *++YYCURSOR;",
          "878:  if (yych <= '/') goto yy18;",
          "879:  if (yych <= '9') goto yy69;",
          "880:  goto yy18;",
          "881: yy46:",
          "882:  ++YYCURSOR;",
          "883:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "884:  yych = *YYCURSOR;",
          "885:  if (yych <= ':') {",
          "886:   if (yych <= '.') {",
          "887:    if (yych <= '-') goto yy18;",
          "888:    goto yy69;",
          "889:   } else {",
          "890:    if (yych <= '/') goto yy18;",
          "891:    if (yych <= '9') goto yy46;",
          "892:    goto yy18;",
          "893:   }",
          "894:  } else {",
          "895:   if (yych <= 'E') {",
          "896:    if (yych <= ';') goto yy71;",
          "897:    if (yych <= 'D') goto yy18;",
          "898:    goto yy73;",
          "899:   } else {",
          "900:    if (yych == 'e') goto yy73;",
          "901:    goto yy18;",
          "902:   }",
          "904: yy48:",
          "905:  yych = *++YYCURSOR;",
          "906:  if (yych == 'N') goto yy74;",
          "907:  goto yy18;",
          "908: yy49:",
          "909:  yych = *++YYCURSOR;",
          "910:  if (yych == 'A') goto yy75;",
          "911:  goto yy18;",
          "912: yy50:",
          "915:  if (yych >= ':') goto yy18;",
          "916: yy51:",
          "917:  ++YYCURSOR;",
          "918:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "919:  yych = *YYCURSOR;",
          "920:  if (yych <= '/') goto yy18;",
          "921:  if (yych <= '9') goto yy51;",
          "922:  if (yych == ';') goto yy76;",
          "924: yy53:",
          "928: yy54:",
          "933:  if (yych <= '9') goto yy54;",
          "934:  if (yych <= ':') goto yy78;",
          "935:  goto yy18;",
          "936: yy56:",
          "938:  if (yych <= '/') goto yy18;",
          "939:  if (yych >= ':') goto yy18;",
          "940: yy57:",
          "942:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "943:  yych = *YYCURSOR;",
          "945:  if (yych <= '9') goto yy57;",
          "946:  if (yych == ';') goto yy79;",
          "948: yy59:",
          "952: yy60:",
          "957:  if (yych <= '9') goto yy60;",
          "958:  if (yych <= ':') goto yy81;",
          "959:  goto yy18;",
          "960: yy62:",
          "962:  if (yych == '\"') goto yy82;",
          "963:  goto yy18;",
          "964: yy63:",
          "966: #line 590 \"ext/standard/var_unserializer.re\"",
          "968:  zend_long id;",
          "971:  if (!var_hash) return 0;",
          "973:  id = parse_iv(start + 2) - 1;",
          "974:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "978:  zval_ptr_dtor(rval);",
          "979:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "980:   ZVAL_UNDEF(rval);",
          "981:   return 1;",
          "983:  if (Z_ISREF_P(rval_ref)) {",
          "984:   ZVAL_COPY(rval, rval_ref);",
          "985:  } else {",
          "986:   ZVAL_NEW_REF(rval_ref, rval_ref);",
          "987:   ZVAL_COPY(rval, rval_ref);",
          "992: #line 993 \"ext/standard/var_unserializer.c\"",
          "993: yy65:",
          "995:  if (yych == '\"') goto yy84;",
          "997: yy66:",
          "999:  if (yych == '{') goto yy86;",
          "1001: yy67:",
          "1003: #line 647 \"ext/standard/var_unserializer.re\"",
          "1004:  {",
          "1006:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1007:  return 1;",
          "1008: }",
          "1009: #line 1010 \"ext/standard/var_unserializer.c\"",
          "1010: yy69:",
          "1016:   if (yych <= '9') goto yy69;",
          "1021:    goto yy73;",
          "1023:    if (yych == 'e') goto yy73;",
          "1027: yy71:",
          "1029: #line 695 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "625:  case 'O': goto yy13;",
          "627:  case 'R': goto yy2;",
          "628:  case 'S': goto yy10;",
          "629:  case 'a': goto yy11;",
          "630:  case 'b': goto yy6;",
          "631:  case 'd': goto yy8;",
          "632:  case 'i': goto yy7;",
          "634:  case 'r': goto yy4;",
          "635:  case 's': goto yy9;",
          "636:  case '}': goto yy14;",
          "637:  default: goto yy16;",
          "640:  yych = *(YYMARKER = ++YYCURSOR);",
          "641:  if (yych == ':') goto yy95;",
          "643: #line 962 \"ext/standard/var_unserializer.re\"",
          "648:  if (yych == ':') goto yy89;",
          "652:  if (yych == ';') goto yy87;",
          "656:  if (yych == ':') goto yy83;",
          "660:  if (yych == ':') goto yy77;",
          "664:  if (yych == ':') goto yy53;",
          "668:  if (yych == ':') goto yy46;",
          "672:  if (yych == ':') goto yy39;",
          "676:  if (yych == ':') goto yy32;",
          "680:  if (yych == ':') goto yy25;",
          "684:  if (yych == ':') goto yy17;",
          "688: #line 956 \"ext/standard/var_unserializer.re\"",
          "694: #line 695 \"ext/standard/var_unserializer.c\"",
          "695: yy16:",
          "696:  yych = *++YYCURSOR;",
          "697:  goto yy3;",
          "701:   goto yy20;",
          "703:  if (yych == '+') goto yy19;",
          "709:  if (yybm[0+yych] & 128) {",
          "710:   goto yy20;",
          "713: yy20:",
          "714:  ++YYCURSOR;",
          "715:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "716:  yych = *YYCURSOR;",
          "717:  if (yybm[0+yych] & 128) {",
          "718:   goto yy20;",
          "719:  }",
          "721:  if (yych >= ';') goto yy18;",
          "723:  if (yych != '\"') goto yy18;",
          "724:  ++YYCURSOR;",
          "725: #line 804 \"ext/standard/var_unserializer.re\"",
          "726:  {",
          "727:  size_t len, len2, len3, maxlen;",
          "728:  zend_long elements;",
          "729:  char *str;",
          "730:  zend_string *class_name;",
          "731:  zend_class_entry *ce;",
          "732:  int incomplete_class = 0;",
          "734:  int custom_object = 0;",
          "736:  zval user_func;",
          "737:  zval retval;",
          "738:  zval args[1];",
          "740:     if (!var_hash) return 0;",
          "741:  if (*start == 'C') {",
          "742:   custom_object = 1;",
          "743:  }",
          "745:  len2 = len = parse_uiv(start + 2);",
          "746:  maxlen = max - YYCURSOR;",
          "747:  if (maxlen < len || len == 0) {",
          "749:   return 0;",
          "750:  }",
          "752:  str = (char*)YYCURSOR;",
          "754:  YYCURSOR += len;",
          "756:  if (*(YYCURSOR) != '\"') {",
          "758:   return 0;",
          "759:  }",
          "760:  if (*(YYCURSOR+1) != ':') {",
          "762:   return 0;",
          "763:  }",
          "765:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "766:  if (len3 != len)",
          "767:  {",
          "769:   return 0;",
          "770:  }",
          "772:  class_name = zend_string_init(str, len, 0);",
          "774:  do {",
          "775:   if(!unserialize_allowed_class(class_name, classes)) {",
          "776:    incomplete_class = 1;",
          "777:    ce = PHP_IC_ENTRY;",
          "778:    break;",
          "782:   BG(serialize_lock)++;",
          "783:   ce = zend_lookup_class(class_name);",
          "784:   if (ce) {",
          "785:    BG(serialize_lock)--;",
          "786:    if (EG(exception)) {",
          "787:     zend_string_release(class_name);",
          "788:     return 0;",
          "789:    }",
          "790:    break;",
          "791:   }",
          "792:   BG(serialize_lock)--;",
          "794:   if (EG(exception)) {",
          "795:    zend_string_release(class_name);",
          "796:    return 0;",
          "797:   }",
          "800:   if ((PG(unserialize_callback_func) == NULL) || (PG(unserialize_callback_func)[0] == '\\0')) {",
          "801:    incomplete_class = 1;",
          "802:    ce = PHP_IC_ENTRY;",
          "803:    break;",
          "804:   }",
          "807:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "809:   ZVAL_STR_COPY(&args[0], class_name);",
          "810:   BG(serialize_lock)++;",
          "811:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL) != SUCCESS) {",
          "812:    BG(serialize_lock)--;",
          "813:    if (EG(exception)) {",
          "814:     zend_string_release(class_name);",
          "815:     zval_ptr_dtor(&user_func);",
          "816:     zval_ptr_dtor(&args[0]);",
          "817:     return 0;",
          "818:    }",
          "819:    php_error_docref(NULL, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "820:    incomplete_class = 1;",
          "821:    ce = PHP_IC_ENTRY;",
          "822:    zval_ptr_dtor(&user_func);",
          "823:    zval_ptr_dtor(&args[0]);",
          "824:    break;",
          "825:   }",
          "826:   BG(serialize_lock)--;",
          "827:   zval_ptr_dtor(&retval);",
          "828:   if (EG(exception)) {",
          "829:    zend_string_release(class_name);",
          "830:    zval_ptr_dtor(&user_func);",
          "831:    zval_ptr_dtor(&args[0]);",
          "832:    return 0;",
          "833:   }",
          "836:   BG(serialize_lock)++;",
          "837:   if ((ce = zend_lookup_class(class_name)) == NULL) {",
          "838:    php_error_docref(NULL, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "839:    incomplete_class = 1;",
          "840:    ce = PHP_IC_ENTRY;",
          "841:   }",
          "842:   BG(serialize_lock)--;",
          "844:   zval_ptr_dtor(&user_func);",
          "845:   zval_ptr_dtor(&args[0]);",
          "846:   break;",
          "847:  } while (1);",
          "851:  if (custom_object) {",
          "852:   int ret;",
          "854:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "856:   if (ret && incomplete_class) {",
          "857:    php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "859:   zend_string_release(class_name);",
          "860:   return ret;",
          "863:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "865:  if (elements < 0) {",
          "866:     zend_string_release(class_name);",
          "867:     return 0;",
          "870:  if (incomplete_class) {",
          "871:   php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "873:  zend_string_release(class_name);",
          "875:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "876: }",
          "877: #line 878 \"ext/standard/var_unserializer.c\"",
          "878: yy25:",
          "881:   if (yych != '+') goto yy18;",
          "883:   if (yych <= '-') goto yy26;",
          "885:   if (yych <= '9') goto yy27;",
          "888: yy26:",
          "891:  if (yych >= ':') goto yy18;",
          "892: yy27:",
          "897:  if (yych <= '9') goto yy27;",
          "898:  if (yych >= ';') goto yy18;",
          "900:  if (yych != '\"') goto yy18;",
          "902: #line 793 \"ext/standard/var_unserializer.re\"",
          "903:  {",
          "904:  zend_long elements;",
          "905:     if (!var_hash) return 0;",
          "907:  elements = object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR);",
          "908:  if (elements < 0 || elements >= HT_MAX_SIZE) {",
          "909:   return 0;",
          "910:  }",
          "911:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "912: }",
          "913: #line 914 \"ext/standard/var_unserializer.c\"",
          "914: yy32:",
          "915:  yych = *++YYCURSOR;",
          "916:  if (yych == '+') goto yy33;",
          "920: yy33:",
          "924: yy34:",
          "929:  if (yych <= '9') goto yy34;",
          "930:  if (yych >= ';') goto yy18;",
          "932:  if (yych != '{') goto yy18;",
          "934: #line 769 \"ext/standard/var_unserializer.re\"",
          "935:  {",
          "936:  zend_long elements = parse_iv(start + 2);",
          "939:     if (!var_hash) return 0;",
          "941:  if (elements < 0 || elements >= HT_MAX_SIZE) {",
          "942:   return 0;",
          "945:  array_init_size(rval, elements);",
          "946:  if (elements) {",
          "949:   zend_hash_real_init(Z_ARRVAL_P(rval), 0);",
          "952:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "953:   return 0;",
          "954:  }",
          "956:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "957: }",
          "958: #line 959 \"ext/standard/var_unserializer.c\"",
          "959: yy39:",
          "961:  if (yych == '+') goto yy40;",
          "963:  if (yych <= '9') goto yy41;",
          "965: yy40:",
          "969: yy41:",
          "974:  if (yych <= '9') goto yy41;",
          "975:  if (yych >= ';') goto yy18;",
          "977:  if (yych != '\"') goto yy18;",
          "979: #line 735 \"ext/standard/var_unserializer.re\"",
          "980:  {",
          "981:  size_t len, maxlen;",
          "982:  zend_string *str;",
          "984:  len = parse_uiv(start + 2);",
          "985:  maxlen = max - YYCURSOR;",
          "986:  if (maxlen < len) {",
          "988:   return 0;",
          "989:  }",
          "991:  if ((str = unserialize_str(&YYCURSOR, len, maxlen)) == NULL) {",
          "992:   return 0;",
          "993:  }",
          "995:  if (*(YYCURSOR) != '\"') {",
          "996:   zend_string_free(str);",
          "998:   return 0;",
          "999:  }",
          "1001:  if (*(YYCURSOR + 1) != ';') {",
          "1002:   efree(str);",
          "1004:   return 0;",
          "1005:  }",
          "1007:  YYCURSOR += 2;",
          "1010:  ZVAL_STR(rval, str);",
          "1011:  return 1;",
          "1012: }",
          "1013: #line 1014 \"ext/standard/var_unserializer.c\"",
          "1014: yy46:",
          "1015:  yych = *++YYCURSOR;",
          "1016:  if (yych == '+') goto yy47;",
          "1018:  if (yych <= '9') goto yy48;",
          "1020: yy47:",
          "1024: yy48:",
          "1029:  if (yych <= '9') goto yy48;",
          "1030:  if (yych >= ';') goto yy18;",
          "1032:  if (yych != '\"') goto yy18;",
          "1034: #line 703 \"ext/standard/var_unserializer.re\"",
          "1036:  size_t len, maxlen;",
          "1037:  char *str;",
          "1039:  len = parse_uiv(start + 2);",
          "1040:  maxlen = max - YYCURSOR;",
          "1041:  if (maxlen < len) {",
          "1046:  str = (char*)YYCURSOR;",
          "1048:  YYCURSOR += len;",
          "1050:  if (*(YYCURSOR) != '\"') {",
          "1052:   return 0;",
          "1055:  if (*(YYCURSOR + 1) != ';') {",
          "1057:   return 0;",
          "1060:  YYCURSOR += 2;",
          "1063:  ZVAL_STRINGL(rval, str, len);",
          "1066: #line 1067 \"ext/standard/var_unserializer.c\"",
          "1067: yy53:",
          "1068:  yych = *++YYCURSOR;",
          "1069:  if (yych <= '/') {",
          "1070:   if (yych <= ',') {",
          "1071:    if (yych == '+') goto yy57;",
          "1072:    goto yy18;",
          "1073:   } else {",
          "1074:    if (yych <= '-') goto yy55;",
          "1075:    if (yych <= '.') goto yy60;",
          "1076:    goto yy18;",
          "1077:   }",
          "1078:  } else {",
          "1079:   if (yych <= 'I') {",
          "1080:    if (yych <= '9') goto yy58;",
          "1081:    if (yych <= 'H') goto yy18;",
          "1082:    goto yy56;",
          "1083:   } else {",
          "1084:    if (yych != 'N') goto yy18;",
          "1085:   }",
          "1086:  }",
          "1088:  if (yych == 'A') goto yy76;",
          "1090: yy55:",
          "1091:  yych = *++YYCURSOR;",
          "1092:  if (yych <= '/') {",
          "1093:   if (yych == '.') goto yy60;",
          "1094:   goto yy18;",
          "1095:  } else {",
          "1096:   if (yych <= '9') goto yy58;",
          "1097:   if (yych != 'I') goto yy18;",
          "1098:  }",
          "1099: yy56:",
          "1101:  if (yych == 'N') goto yy72;",
          "1103: yy57:",
          "1104:  yych = *++YYCURSOR;",
          "1105:  if (yych == '.') goto yy60;",
          "1106:  if (yych <= '/') goto yy18;",
          "1107:  if (yych >= ':') goto yy18;",
          "1108: yy58:",
          "1110:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1111:  yych = *YYCURSOR;",
          "1112:  if (yych <= ':') {",
          "1113:   if (yych <= '.') {",
          "1114:    if (yych <= '-') goto yy18;",
          "1115:    goto yy70;",
          "1116:   } else {",
          "1117:    if (yych <= '/') goto yy18;",
          "1118:    if (yych <= '9') goto yy58;",
          "1119:    goto yy18;",
          "1120:   }",
          "1121:  } else {",
          "1122:   if (yych <= 'E') {",
          "1123:    if (yych <= ';') goto yy63;",
          "1124:    if (yych <= 'D') goto yy18;",
          "1125:    goto yy65;",
          "1126:   } else {",
          "1127:    if (yych == 'e') goto yy65;",
          "1128:    goto yy18;",
          "1129:   }",
          "1130:  }",
          "1131: yy60:",
          "1132:  yych = *++YYCURSOR;",
          "1133:  if (yych <= '/') goto yy18;",
          "1134:  if (yych >= ':') goto yy18;",
          "1135: yy61:",
          "1141:   if (yych <= '9') goto yy61;",
          "1146:    goto yy65;",
          "1148:    if (yych == 'e') goto yy65;",
          "1152: yy63:",
          "1154: #line 694 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1035:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "1036:  return 1;",
          "1037: }",
          "1040:  yych = *++YYCURSOR;",
          "1041:  if (yych <= ',') {",
          "1044:  } else {",
          "1046:   if (yych <= '/') goto yy18;",
          "1048:   goto yy18;",
          "1049:  }",
          "1051:  yych = *++YYCURSOR;",
          "1053:  goto yy18;",
          "1055:  yych = *++YYCURSOR;",
          "1057:  goto yy18;",
          "1059:  ++YYCURSOR;",
          "1077:   } else {",
          "1079:   }",
          "1080:  }",
          "1088:  yych = *++YYCURSOR;",
          "1092:  ++YYCURSOR;",
          "1094:  {",
          "1112:  }",
          "1116:  return 1;",
          "1117: }",
          "1120:  yych = *++YYCURSOR;",
          "1122:  goto yy18;",
          "1124:  ++YYCURSOR;",
          "1126:  {",
          "1170:  }",
          "1218:    }",
          "1258:   }",
          "1268:  }",
          "1276: }",
          "1279:  ++YYCURSOR;",
          "1281:  {",
          "1312:  return 1;",
          "1313: }",
          "1316:  ++YYCURSOR;",
          "1318:  {",
          "1340: }",
          "1343:  yych = *++YYCURSOR;",
          "1344:  if (yych <= ',') {",
          "1347:  } else {",
          "1349:   if (yych <= '/') goto yy18;",
          "1351:  }",
          "1353:  ++YYCURSOR;",
          "1354:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1355:  yych = *YYCURSOR;",
          "1356:  if (yych <= '/') goto yy18;",
          "1365:  ++YYCURSOR;",
          "1367:  {",
          "1389:   return 0;",
          "1390:  }",
          "1398:   return 0;",
          "1399:  }",
          "1404:  }",
          "1410:  return 1;",
          "1411: }",
          "1413: yy96:",
          "1414:  yych = *++YYCURSOR;",
          "1415:  if (yych <= '/') goto yy18;",
          "1418: yy97:",
          "1419:  ++YYCURSOR;",
          "1421:  {",
          "1430:  } else {",
          "1432:  }",
          "1434:  return 1;",
          "1435: }",
          "1437: }",
          "1441:  return 0;",
          "",
          "[Removed Lines]",
          "1038: #line 1039 \"ext/standard/var_unserializer.c\"",
          "1039: yy73:",
          "1042:   if (yych == '+') goto yy88;",
          "1043:   goto yy18;",
          "1045:   if (yych <= '-') goto yy88;",
          "1047:   if (yych <= '9') goto yy89;",
          "1050: yy74:",
          "1052:  if (yych == 'F') goto yy91;",
          "1054: yy75:",
          "1056:  if (yych == 'N') goto yy91;",
          "1058: yy76:",
          "1060: #line 653 \"ext/standard/var_unserializer.re\"",
          "1061:  {",
          "1062: #if SIZEOF_ZEND_LONG == 4",
          "1063:  int digits = YYCURSOR - start - 3;",
          "1065:  if (start[2] == '-' || start[2] == '+') {",
          "1066:   digits--;",
          "1067:  }",
          "1070:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "1071:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "1072:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "1074:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "1075:     goto use_double;",
          "1076:    }",
          "1078:    goto use_double;",
          "1081: #endif",
          "1083:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1084:  return 1;",
          "1085: }",
          "1086: #line 1087 \"ext/standard/var_unserializer.c\"",
          "1087: yy78:",
          "1089:  if (yych == '\"') goto yy92;",
          "1090:  goto yy18;",
          "1091: yy79:",
          "1093: #line 616 \"ext/standard/var_unserializer.re\"",
          "1095:  zend_long id;",
          "1098:  if (!var_hash) return 0;",
          "1100:  id = parse_iv(start + 2) - 1;",
          "1101:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1102:   return 0;",
          "1103:  }",
          "1105:  if (rval_ref == rval) {",
          "1106:   return 0;",
          "1107:  }",
          "1109:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1110:   ZVAL_UNDEF(rval);",
          "1111:   return 1;",
          "1114:  ZVAL_COPY(rval, rval_ref);",
          "1118: #line 1119 \"ext/standard/var_unserializer.c\"",
          "1119: yy81:",
          "1121:  if (yych == '\"') goto yy94;",
          "1123: yy82:",
          "1125: #line 805 \"ext/standard/var_unserializer.re\"",
          "1127:  size_t len, len2, len3, maxlen;",
          "1128:  zend_long elements;",
          "1129:  char *str;",
          "1130:  zend_string *class_name;",
          "1131:  zend_class_entry *ce;",
          "1132:  int incomplete_class = 0;",
          "1134:  int custom_object = 0;",
          "1136:  zval user_func;",
          "1137:  zval retval;",
          "1138:  zval args[1];",
          "1140:     if (!var_hash) return 0;",
          "1141:  if (*start == 'C') {",
          "1142:   custom_object = 1;",
          "1143:  }",
          "1145:  len2 = len = parse_uiv(start + 2);",
          "1146:  maxlen = max - YYCURSOR;",
          "1147:  if (maxlen < len || len == 0) {",
          "1149:   return 0;",
          "1150:  }",
          "1152:  str = (char*)YYCURSOR;",
          "1154:  YYCURSOR += len;",
          "1156:  if (*(YYCURSOR) != '\"') {",
          "1158:   return 0;",
          "1159:  }",
          "1160:  if (*(YYCURSOR+1) != ':') {",
          "1162:   return 0;",
          "1163:  }",
          "1165:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "1166:  if (len3 != len)",
          "1167:  {",
          "1169:   return 0;",
          "1172:  class_name = zend_string_init(str, len, 0);",
          "1174:  do {",
          "1175:   if(!unserialize_allowed_class(class_name, classes)) {",
          "1176:    incomplete_class = 1;",
          "1177:    ce = PHP_IC_ENTRY;",
          "1178:    break;",
          "1179:   }",
          "1182:   BG(serialize_lock)++;",
          "1183:   ce = zend_lookup_class(class_name);",
          "1184:   if (ce) {",
          "1185:    BG(serialize_lock)--;",
          "1186:    if (EG(exception)) {",
          "1187:     zend_string_release(class_name);",
          "1188:     return 0;",
          "1189:    }",
          "1190:    break;",
          "1191:   }",
          "1192:   BG(serialize_lock)--;",
          "1194:   if (EG(exception)) {",
          "1195:    zend_string_release(class_name);",
          "1196:    return 0;",
          "1197:   }",
          "1200:   if ((PG(unserialize_callback_func) == NULL) || (PG(unserialize_callback_func)[0] == '\\0')) {",
          "1201:    incomplete_class = 1;",
          "1202:    ce = PHP_IC_ENTRY;",
          "1203:    break;",
          "1204:   }",
          "1207:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "1209:   ZVAL_STR_COPY(&args[0], class_name);",
          "1210:   BG(serialize_lock)++;",
          "1211:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL) != SUCCESS) {",
          "1212:    BG(serialize_lock)--;",
          "1213:    if (EG(exception)) {",
          "1214:     zend_string_release(class_name);",
          "1215:     zval_ptr_dtor(&user_func);",
          "1216:     zval_ptr_dtor(&args[0]);",
          "1217:     return 0;",
          "1219:    php_error_docref(NULL, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "1220:    incomplete_class = 1;",
          "1221:    ce = PHP_IC_ENTRY;",
          "1222:    zval_ptr_dtor(&user_func);",
          "1223:    zval_ptr_dtor(&args[0]);",
          "1224:    break;",
          "1225:   }",
          "1226:   BG(serialize_lock)--;",
          "1227:   zval_ptr_dtor(&retval);",
          "1228:   if (EG(exception)) {",
          "1229:    zend_string_release(class_name);",
          "1230:    zval_ptr_dtor(&user_func);",
          "1231:    zval_ptr_dtor(&args[0]);",
          "1232:    return 0;",
          "1233:   }",
          "1236:   BG(serialize_lock)++;",
          "1237:   if ((ce = zend_lookup_class(class_name)) == NULL) {",
          "1238:    php_error_docref(NULL, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "1239:    incomplete_class = 1;",
          "1240:    ce = PHP_IC_ENTRY;",
          "1241:   }",
          "1242:   BG(serialize_lock)--;",
          "1244:   zval_ptr_dtor(&user_func);",
          "1245:   zval_ptr_dtor(&args[0]);",
          "1246:   break;",
          "1247:  } while (1);",
          "1251:  if (custom_object) {",
          "1252:   int ret;",
          "1254:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "1256:   if (ret && incomplete_class) {",
          "1257:    php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "1259:   zend_string_release(class_name);",
          "1260:   return ret;",
          "1261:  }",
          "1263:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "1265:  if (elements < 0) {",
          "1266:     zend_string_release(class_name);",
          "1267:     return 0;",
          "1270:  if (incomplete_class) {",
          "1271:   php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "1272:  }",
          "1273:  zend_string_release(class_name);",
          "1275:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "1277: #line 1278 \"ext/standard/var_unserializer.c\"",
          "1278: yy84:",
          "1280: #line 736 \"ext/standard/var_unserializer.re\"",
          "1282:  size_t len, maxlen;",
          "1283:  zend_string *str;",
          "1285:  len = parse_uiv(start + 2);",
          "1286:  maxlen = max - YYCURSOR;",
          "1287:  if (maxlen < len) {",
          "1289:   return 0;",
          "1290:  }",
          "1292:  if ((str = unserialize_str(&YYCURSOR, len, maxlen)) == NULL) {",
          "1293:   return 0;",
          "1294:  }",
          "1296:  if (*(YYCURSOR) != '\"') {",
          "1297:   zend_string_free(str);",
          "1299:   return 0;",
          "1300:  }",
          "1302:  if (*(YYCURSOR + 1) != ';') {",
          "1303:   efree(str);",
          "1305:   return 0;",
          "1306:  }",
          "1308:  YYCURSOR += 2;",
          "1311:  ZVAL_STR(rval, str);",
          "1314: #line 1315 \"ext/standard/var_unserializer.c\"",
          "1315: yy86:",
          "1317: #line 770 \"ext/standard/var_unserializer.re\"",
          "1319:  zend_long elements = parse_iv(start + 2);",
          "1322:     if (!var_hash) return 0;",
          "1324:  if (elements < 0 || elements >= HT_MAX_SIZE) {",
          "1325:   return 0;",
          "1326:  }",
          "1328:  array_init_size(rval, elements);",
          "1329:  if (elements) {",
          "1332:   zend_hash_real_init(Z_ARRVAL_P(rval), 0);",
          "1333:  }",
          "1335:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "1336:   return 0;",
          "1337:  }",
          "1339:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "1341: #line 1342 \"ext/standard/var_unserializer.c\"",
          "1342: yy88:",
          "1345:   if (yych == '+') goto yy96;",
          "1346:   goto yy18;",
          "1348:   if (yych <= '-') goto yy96;",
          "1350:   if (yych >= ':') goto yy18;",
          "1352: yy89:",
          "1357:  if (yych <= '9') goto yy89;",
          "1358:  if (yych == ';') goto yy71;",
          "1359:  goto yy18;",
          "1360: yy91:",
          "1361:  yych = *++YYCURSOR;",
          "1362:  if (yych == ';') goto yy97;",
          "1363:  goto yy18;",
          "1364: yy92:",
          "1366: #line 794 \"ext/standard/var_unserializer.re\"",
          "1368:  zend_long elements;",
          "1369:     if (!var_hash) return 0;",
          "1371:  elements = object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR);",
          "1372:  if (elements < 0 || elements >= HT_MAX_SIZE) {",
          "1373:   return 0;",
          "1374:  }",
          "1375:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "1376: }",
          "1377: #line 1378 \"ext/standard/var_unserializer.c\"",
          "1378: yy94:",
          "1379:  ++YYCURSOR;",
          "1380: #line 704 \"ext/standard/var_unserializer.re\"",
          "1381:  {",
          "1382:  size_t len, maxlen;",
          "1383:  char *str;",
          "1385:  len = parse_uiv(start + 2);",
          "1386:  maxlen = max - YYCURSOR;",
          "1387:  if (maxlen < len) {",
          "1392:  str = (char*)YYCURSOR;",
          "1394:  YYCURSOR += len;",
          "1396:  if (*(YYCURSOR) != '\"') {",
          "1401:  if (*(YYCURSOR + 1) != ';') {",
          "1403:   return 0;",
          "1406:  YYCURSOR += 2;",
          "1409:  ZVAL_STRINGL(rval, str, len);",
          "1412: #line 1413 \"ext/standard/var_unserializer.c\"",
          "1416:  if (yych <= '9') goto yy89;",
          "1417:  goto yy18;",
          "1420: #line 679 \"ext/standard/var_unserializer.re\"",
          "1424:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "1425:   ZVAL_DOUBLE(rval, php_get_nan());",
          "1426:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "1427:   ZVAL_DOUBLE(rval, php_get_inf());",
          "1428:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "1429:   ZVAL_DOUBLE(rval, -php_get_inf());",
          "1431:   ZVAL_NULL(rval);",
          "1436: #line 1437 \"ext/standard/var_unserializer.c\"",
          "1438: #line 965 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1163: #line 1164 \"ext/standard/var_unserializer.c\"",
          "1164: yy65:",
          "1167:   if (yych != '+') goto yy18;",
          "1169:   if (yych <= '-') goto yy66;",
          "1171:   if (yych <= '9') goto yy67;",
          "1174: yy66:",
          "1176:  if (yych <= ',') {",
          "1177:   if (yych == '+') goto yy69;",
          "1178:   goto yy18;",
          "1179:  } else {",
          "1180:   if (yych <= '-') goto yy69;",
          "1181:   if (yych <= '/') goto yy18;",
          "1182:   if (yych >= ':') goto yy18;",
          "1183:  }",
          "1184: yy67:",
          "1185:  ++YYCURSOR;",
          "1186:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1187:  yych = *YYCURSOR;",
          "1188:  if (yych <= '/') goto yy18;",
          "1189:  if (yych <= '9') goto yy67;",
          "1190:  if (yych == ';') goto yy63;",
          "1192: yy69:",
          "1194:  if (yych <= '/') goto yy18;",
          "1195:  if (yych <= '9') goto yy67;",
          "1197: yy70:",
          "1199:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1200:  yych = *YYCURSOR;",
          "1201:  if (yych <= ';') {",
          "1202:   if (yych <= '/') goto yy18;",
          "1203:   if (yych <= '9') goto yy70;",
          "1204:   if (yych <= ':') goto yy18;",
          "1205:   goto yy63;",
          "1206:  } else {",
          "1207:   if (yych <= 'E') {",
          "1208:    if (yych <= 'D') goto yy18;",
          "1209:    goto yy65;",
          "1211:    if (yych == 'e') goto yy65;",
          "1212:    goto yy18;",
          "1215: yy72:",
          "1217:  if (yych != 'F') goto yy18;",
          "1218: yy73:",
          "1219:  yych = *++YYCURSOR;",
          "1220:  if (yych != ';') goto yy18;",
          "1222: #line 678 \"ext/standard/var_unserializer.re\"",
          "1226:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "1227:   ZVAL_DOUBLE(rval, php_get_nan());",
          "1228:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "1229:   ZVAL_DOUBLE(rval, php_get_inf());",
          "1230:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "1231:   ZVAL_DOUBLE(rval, -php_get_inf());",
          "1232:  } else {",
          "1233:   ZVAL_NULL(rval);",
          "1238: #line 1239 \"ext/standard/var_unserializer.c\"",
          "1239: yy76:",
          "1241:  if (yych == 'N') goto yy73;",
          "1243: yy77:",
          "1244:  yych = *++YYCURSOR;",
          "1245:  if (yych <= ',') {",
          "1246:   if (yych != '+') goto yy18;",
          "1247:  } else {",
          "1248:   if (yych <= '-') goto yy78;",
          "1249:   if (yych <= '/') goto yy18;",
          "1250:   if (yych <= '9') goto yy79;",
          "1251:   goto yy18;",
          "1252:  }",
          "1253: yy78:",
          "1254:  yych = *++YYCURSOR;",
          "1255:  if (yych <= '/') goto yy18;",
          "1256:  if (yych >= ':') goto yy18;",
          "1257: yy79:",
          "1259:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1260:  yych = *YYCURSOR;",
          "1261:  if (yych <= '/') goto yy18;",
          "1262:  if (yych <= '9') goto yy79;",
          "1263:  if (yych != ';') goto yy18;",
          "1264:  ++YYCURSOR;",
          "1265: #line 652 \"ext/standard/var_unserializer.re\"",
          "1267: #if SIZEOF_ZEND_LONG == 4",
          "1268:  int digits = YYCURSOR - start - 3;",
          "1270:  if (start[2] == '-' || start[2] == '+') {",
          "1271:   digits--;",
          "1275:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "1276:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "1277:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "1279:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "1280:     goto use_double;",
          "1282:   } else {",
          "1283:    goto use_double;",
          "1286: #endif",
          "1288:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1289:  return 1;",
          "1291: #line 1292 \"ext/standard/var_unserializer.c\"",
          "1292: yy83:",
          "1293:  yych = *++YYCURSOR;",
          "1294:  if (yych <= '/') goto yy18;",
          "1295:  if (yych >= '2') goto yy18;",
          "1296:  yych = *++YYCURSOR;",
          "1297:  if (yych != ';') goto yy18;",
          "1299: #line 646 \"ext/standard/var_unserializer.re\"",
          "1302:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1305: #line 1306 \"ext/standard/var_unserializer.c\"",
          "1306: yy87:",
          "1308: #line 640 \"ext/standard/var_unserializer.re\"",
          "1311:  ZVAL_NULL(rval);",
          "1312:  return 1;",
          "1314: #line 1315 \"ext/standard/var_unserializer.c\"",
          "1315: yy89:",
          "1318:   if (yych != '+') goto yy18;",
          "1320:   if (yych <= '-') goto yy90;",
          "1322:   if (yych <= '9') goto yy91;",
          "1323:   goto yy18;",
          "1325: yy90:",
          "1326:  yych = *++YYCURSOR;",
          "1327:  if (yych <= '/') goto yy18;",
          "1328:  if (yych >= ':') goto yy18;",
          "1329: yy91:",
          "1334:  if (yych <= '9') goto yy91;",
          "1335:  if (yych != ';') goto yy18;",
          "1337: #line 615 \"ext/standard/var_unserializer.re\"",
          "1339:  zend_long id;",
          "1342:  if (!var_hash) return 0;",
          "1344:  id = parse_iv(start + 2) - 1;",
          "1345:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1349:  if (rval_ref == rval) {",
          "1353:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1354:   ZVAL_UNDEF(rval);",
          "1355:   return 1;",
          "1358:  ZVAL_COPY(rval, rval_ref);",
          "1362: #line 1363 \"ext/standard/var_unserializer.c\"",
          "1363: yy95:",
          "1364:  yych = *++YYCURSOR;",
          "1365:  if (yych <= ',') {",
          "1366:   if (yych != '+') goto yy18;",
          "1367:  } else {",
          "1368:   if (yych <= '-') goto yy96;",
          "1369:   if (yych <= '/') goto yy18;",
          "1370:   if (yych <= '9') goto yy97;",
          "1371:   goto yy18;",
          "1372:  }",
          "1376:  if (yych >= ':') goto yy18;",
          "1379:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1380:  yych = *YYCURSOR;",
          "1381:  if (yych <= '/') goto yy18;",
          "1382:  if (yych <= '9') goto yy97;",
          "1383:  if (yych != ';') goto yy18;",
          "1384:  ++YYCURSOR;",
          "1385: #line 589 \"ext/standard/var_unserializer.re\"",
          "1387:  zend_long id;",
          "1390:  if (!var_hash) return 0;",
          "1392:  id = parse_iv(start + 2) - 1;",
          "1393:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1394:   return 0;",
          "1395:  }",
          "1397:  zval_ptr_dtor(rval);",
          "1398:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1399:   ZVAL_UNDEF(rval);",
          "1400:   return 1;",
          "1401:  }",
          "1402:  if (Z_ISREF_P(rval_ref)) {",
          "1403:   ZVAL_COPY(rval, rval_ref);",
          "1405:   ZVAL_NEW_REF(rval_ref, rval_ref);",
          "1406:   ZVAL_COPY(rval, rval_ref);",
          "1411: #line 1412 \"ext/standard/var_unserializer.c\"",
          "1413: #line 964 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "433: static inline int finish_nested_data(UNSERIALIZE_PARAMETER)",
          "434: {",
          "442: }",
          "444: static inline int object_custom(UNSERIALIZE_PARAMETER, zend_class_entry *ce)",
          "",
          "[Removed Lines]",
          "435:  if (*((*p)++) == '}')",
          "436:   return 1;",
          "438: #if SOMETHING_NEW_MIGHT_LEAD_TO_CRASH_ENABLE_IF_YOU_ARE_BRAVE",
          "439:  zval_ptr_dtor(rval);",
          "440: #endif",
          "441:  return 0;",
          "",
          "[Added Lines]",
          "435:  if (*p >= max || **p != '}') {",
          "436:   return 0;",
          "437:  }",
          "439:  (*p)++;",
          "440:  return 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f527d8047564ab2d36a3cdfd77c96c09a93c9e2",
      "candidate_info": {
        "commit_hash": "7f527d8047564ab2d36a3cdfd77c96c09a93c9e2",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/7f527d8047564ab2d36a3cdfd77c96c09a93c9e2",
        "files": [
          "ext/standard/var.c",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re"
        ],
        "message": "Fixed reference handling in serialize/unserialize",
        "before_after_code_files": [
          "ext/standard/var.c||ext/standard/var.c",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/var.c||ext/standard/var.c": [
          "File: ext/standard/var.c -> ext/standard/var.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "724:  }",
          "726:  ZVAL_UNDEF(&var_already);",
          "728:   if (Z_ISREF_P(struc)) {",
          "729:    smart_str_appendl(buf, \"R:\", 2);",
          "730:    smart_str_append_long(buf, Z_LVAL(var_already));",
          "",
          "[Removed Lines]",
          "727:  if (var_hash && php_add_var_hash(var_hash, struc, &var_already TSRMLS_CC) == FAILURE) {",
          "",
          "[Added Lines]",
          "728:  if (var_hash &&",
          "729:   php_add_var_hash(var_hash, Z_ISREF_P(struc)? Z_REFVAL_P(struc) : struc, &var_already TSRMLS_CC) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "738:   }",
          "739:  }",
          "741:  switch (Z_TYPE_P(struc)) {",
          "742:   case IS_BOOL:",
          "743:    smart_str_appendl(buf, \"b:\", 2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "743: again:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "899:    smart_str_appendc(buf, '}');",
          "900:    return;",
          "901:   }",
          "902:   default:",
          "903:    smart_str_appendl(buf, \"i:0;\", 4);",
          "904:    return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "905:   case IS_REFERENCE:",
          "906:    struc = Z_REFVAL_P(struc);",
          "907:    goto again;",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:    return 0;",
          "305:   }",
          "307:   if (!php_var_unserialize(&data, p, max, var_hash TSRMLS_CC)) {",
          "308:    zval_dtor(&key);",
          "309:    return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:   ZVAL_UNDEF(&data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "448: {",
          "449:  YYCTYPE yych;",
          "450:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "447: #line 448 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "448: #line 449 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "504:  yych = *(YYMARKER = ++YYCURSOR);",
          "505:  if (yych == ':') goto yy95;",
          "506: yy3:",
          "508:  { return 0; }",
          "510: yy4:",
          "511:  yych = *(YYMARKER = ++YYCURSOR);",
          "512:  if (yych == ':') goto yy89;",
          "",
          "[Removed Lines]",
          "507: #line 785 \"ext/standard/var_unserializer.re\"",
          "509: #line 510 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "508: #line 786 \"ext/standard/var_unserializer.re\"",
          "510: #line 511 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "549:  goto yy3;",
          "550: yy14:",
          "551:  ++YYCURSOR;",
          "553:  {",
          "555:  php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Unexpected end of serialized data\");",
          "557: }",
          "559: yy16:",
          "560:  yych = *++YYCURSOR;",
          "561:  goto yy3;",
          "",
          "[Removed Lines]",
          "552: #line 779 \"ext/standard/var_unserializer.re\"",
          "558: #line 559 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "553: #line 780 \"ext/standard/var_unserializer.re\"",
          "559: #line 560 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "585:  yych = *++YYCURSOR;",
          "586:  if (yych != '\"') goto yy18;",
          "587:  ++YYCURSOR;",
          "589:  {",
          "590:  size_t len, len2, len3, maxlen;",
          "591:  long elements;",
          "",
          "[Removed Lines]",
          "588: #line 640 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "589: #line 641 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "725:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "726: }",
          "728: yy25:",
          "729:  yych = *++YYCURSOR;",
          "730:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "727: #line 728 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "728: #line 729 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "749:  yych = *++YYCURSOR;",
          "750:  if (yych != '\"') goto yy18;",
          "751:  ++YYCURSOR;",
          "753:  {",
          "",
          "[Removed Lines]",
          "752: #line 632 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "753: #line 633 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "757:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "758:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "759: }",
          "761: yy32:",
          "762:  yych = *++YYCURSOR;",
          "763:  if (yych == '+') goto yy33;",
          "",
          "[Removed Lines]",
          "760: #line 761 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "761: #line 762 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "778:  yych = *++YYCURSOR;",
          "779:  if (yych != '{') goto yy18;",
          "780:  ++YYCURSOR;",
          "782:  {",
          "783:  long elements = parse_iv(start + 2);",
          "",
          "[Removed Lines]",
          "781: #line 614 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "782: #line 615 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "797:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "798: }",
          "800: yy39:",
          "801:  yych = *++YYCURSOR;",
          "802:  if (yych == '+') goto yy40;",
          "",
          "[Removed Lines]",
          "799: #line 800 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "800: #line 801 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "817:  yych = *++YYCURSOR;",
          "818:  if (yych != '\"') goto yy18;",
          "819:  ++YYCURSOR;",
          "821:  {",
          "822:  size_t len, maxlen;",
          "823:  char *str;",
          "",
          "[Removed Lines]",
          "820: #line 585 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "821: #line 586 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "846:  ZVAL_STRINGL(rval, str, len);",
          "847:  return 1;",
          "848: }",
          "850: yy46:",
          "851:  yych = *++YYCURSOR;",
          "852:  if (yych == '+') goto yy47;",
          "",
          "[Removed Lines]",
          "849: #line 850 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "850: #line 851 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "867:  yych = *++YYCURSOR;",
          "868:  if (yych != '\"') goto yy18;",
          "869:  ++YYCURSOR;",
          "871:  {",
          "872:  size_t len, maxlen;",
          "873:  char *str;",
          "",
          "[Removed Lines]",
          "870: #line 558 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "871: #line 559 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "894:  ZVAL_STRINGL(rval, str, len);",
          "895:  return 1;",
          "896: }",
          "898: yy53:",
          "899:  yych = *++YYCURSOR;",
          "900:  if (yych <= '/') {",
          "",
          "[Removed Lines]",
          "897: #line 898 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "898: #line 899 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "982:  }",
          "983: yy63:",
          "984:  ++YYCURSOR;",
          "986:  {",
          "987: #if SIZEOF_LONG == 4",
          "988: use_double:",
          "",
          "[Removed Lines]",
          "985: #line 549 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "986: #line 550 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "991:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "992:  return 1;",
          "993: }",
          "995: yy65:",
          "996:  yych = *++YYCURSOR;",
          "997:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "994: #line 995 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "995: #line 996 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1050:  yych = *++YYCURSOR;",
          "1051:  if (yych != ';') goto yy18;",
          "1052:  ++YYCURSOR;",
          "1054:  {",
          "",
          "[Removed Lines]",
          "1053: #line 533 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1054: #line 534 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1067:  return 1;",
          "1068: }",
          "1070: yy76:",
          "1071:  yych = *++YYCURSOR;",
          "1072:  if (yych == 'N') goto yy73;",
          "",
          "[Removed Lines]",
          "1069: #line 1070 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1070: #line 1071 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1093:  if (yych <= '9') goto yy79;",
          "1094:  if (yych != ';') goto yy18;",
          "1095:  ++YYCURSOR;",
          "1097:  {",
          "1098: #if SIZEOF_LONG == 4",
          "1099:  int digits = YYCURSOR - start - 3;",
          "",
          "[Removed Lines]",
          "1096: #line 507 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1097: #line 508 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1119:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1120:  return 1;",
          "1121: }",
          "1123: yy83:",
          "1124:  yych = *++YYCURSOR;",
          "1125:  if (yych <= '/') goto yy18;",
          "",
          "[Removed Lines]",
          "1122: #line 1123 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1123: #line 1124 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1127:  yych = *++YYCURSOR;",
          "1128:  if (yych != ';') goto yy18;",
          "1129:  ++YYCURSOR;",
          "1131:  {",
          "1133:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1134:  return 1;",
          "1135: }",
          "1137: yy87:",
          "1138:  ++YYCURSOR;",
          "1140:  {",
          "1142:  ZVAL_NULL(rval);",
          "1143:  return 1;",
          "1144: }",
          "1146: yy89:",
          "1147:  yych = *++YYCURSOR;",
          "1148:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1130: #line 501 \"ext/standard/var_unserializer.re\"",
          "1136: #line 1137 \"ext/standard/var_unserializer.c\"",
          "1139: #line 495 \"ext/standard/var_unserializer.re\"",
          "1145: #line 1146 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1131: #line 502 \"ext/standard/var_unserializer.re\"",
          "1137: #line 1138 \"ext/standard/var_unserializer.c\"",
          "1140: #line 496 \"ext/standard/var_unserializer.re\"",
          "1146: #line 1147 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1165:  if (yych <= '9') goto yy91;",
          "1166:  if (yych != ';') goto yy18;",
          "1167:  ++YYCURSOR;",
          "1169:  {",
          "1170:  long id;",
          "",
          "[Removed Lines]",
          "1168: #line 472 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1169: #line 473 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1181:  if (rval == rval_ref) return 0;",
          "1184:   var_push_dtor_no_addref(var_hash, rval);",
          "1185:  }",
          "1186:  ZVAL_COPY(rval, rval_ref);",
          "",
          "[Removed Lines]",
          "1183:  if (rval != NULL) {",
          "",
          "[Added Lines]",
          "1184:  if (!ZVAL_IS_UNDEF(rval)) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1189:  return 1;",
          "1190: }",
          "1192: yy95:",
          "1193:  yych = *++YYCURSOR;",
          "1194:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1191: #line 1192 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1192: #line 1193 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1211:  if (yych <= '9') goto yy97;",
          "1212:  if (yych != ';') goto yy18;",
          "1213:  ++YYCURSOR;",
          "1215:  {",
          "1216:  long id;",
          "",
          "[Removed Lines]",
          "1214: #line 452 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1215: #line 453 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1223:   return 0;",
          "1224:  }",
          "1227:   zval_ptr_dtor(rval);",
          "1228:  }",
          "1229:  ZVAL_COPY(rval, rval_ref);",
          "",
          "[Removed Lines]",
          "1226:  if (rval != NULL) {",
          "",
          "[Added Lines]",
          "1227:  if (!ZVAL_IS_UNDEF(rval)) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1232:  return 1;",
          "1233: }",
          "1235: }",
          "1239:  return 0;",
          "",
          "[Removed Lines]",
          "1234: #line 1235 \"ext/standard/var_unserializer.c\"",
          "1236: #line 787 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1235: #line 1236 \"ext/standard/var_unserializer.c\"",
          "1237: #line 788 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:    return 0;",
          "309:   }",
          "311:   if (!php_var_unserialize(&data, p, max, var_hash TSRMLS_CC)) {",
          "312:    zval_dtor(&key);",
          "313:    return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:   ZVAL_UNDEF(&data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "460:   return 0;",
          "461:  }",
          "464:   zval_ptr_dtor(rval);",
          "465:  }",
          "466:  ZVAL_COPY(rval, rval_ref);",
          "",
          "[Removed Lines]",
          "463:  if (rval != NULL) {",
          "",
          "[Added Lines]",
          "464:  if (!ZVAL_IS_UNDEF(rval)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "484:  if (rval == rval_ref) return 0;",
          "487:   var_push_dtor_no_addref(var_hash, rval);",
          "488:  }",
          "489:  ZVAL_COPY(rval, rval_ref);",
          "",
          "[Removed Lines]",
          "486:  if (rval != NULL) {",
          "",
          "[Added Lines]",
          "487:  if (!ZVAL_IS_UNDEF(rval)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b1a224d4e994219a6ef1d1d8fdcc1b0598ba3ab",
      "candidate_info": {
        "commit_hash": "9b1a224d4e994219a6ef1d1d8fdcc1b0598ba3ab",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/9b1a224d4e994219a6ef1d1d8fdcc1b0598ba3ab",
        "files": [
          "Zend/zend_API.c",
          "ext/exif/exif.c",
          "ext/gmp/gmp.c",
          "ext/gmp/tests/bug70284.phpt",
          "ext/hash/hash_haval.c",
          "ext/hash/tests/bug70312.phpt",
          "ext/hash/tests/hash_file_basic1.phpt",
          "ext/hash/tests/hash_hmac_basic.phpt",
          "ext/hash/tests/hash_hmac_file_basic.phpt",
          "ext/pcre/php_pcre.c",
          "ext/pcre/tests/bug70345.phpt",
          "ext/session/session.c",
          "ext/session/tests/session_decode_error2.phpt",
          "ext/soap/soap.c",
          "ext/soap/tests/bug70388.phpt",
          "ext/spl/spl_dllist.c",
          "ext/spl/tests/bug70155.phpt",
          "ext/spl/tests/bug70365.phpt",
          "ext/spl/tests/bug70366.phpt",
          "ext/standard/tests/serialize/bug70172.phpt",
          "ext/standard/tests/serialize/bug70172_2.phpt",
          "ext/standard/tests/serialize/bug70219.phpt",
          "ext/standard/var.c",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re",
          "ext/xsl/xsltprocessor.c",
          "ext/zip/php_zip.c",
          "ext/zip/tests/bug70350.phpt"
        ],
        "message": "Merge branch 'PHP-5.6'\n\n* PHP-5.6: (21 commits)\n  fix unit tests\n  update NEWS\n  add NEWS for fixes\n  Improve fix for #70172\n  Fix bug #70312 - HAVAL gives wrong hashes in specific cases\n  fix test\n  add test\n  Fix bug #70366 - use-after-free vulnerability in unserialize() with SplDoublyLinkedList\n  Fix bug #70365 - use-after-free vulnerability in unserialize() with SplObjectStorage\n  Fix bug #70172 - Use After Free Vulnerability in unserialize()\n  Fix bug #70388 - SOAP serialize_function_call() type confusion\n  Fixed bug #70350: ZipArchive::extractTo allows for directory traversal when creating directories\n  Improve fix for #70385\n  Fix bug #70345 (Multiple vulnerabilities related to PCRE functions)\n  Fix bug #70385 (Buffer over-read in exif_read_data with TIFF IFD tag byte value of 32 bytes)\n  Fix bug #70219 (Use after free vulnerability in session deserializer)\n  Fix bug ##70284 (Use after free vulnerability in unserialize() with GMP)\n  Fix for bug #69782\n  Add CVE IDs asigned (post release) to PHP 5.4.43\n  Add CVE IDs asigned to #69085 (PHP 5.4.39)\n  ...\n\nConflicts:\n\text/exif/exif.c\n\text/gmp/gmp.c\n\text/pcre/php_pcre.c\n\text/session/session.c\n\text/session/tests/session_decode_variation3.phpt\n\text/soap/soap.c\n\text/spl/spl_observer.c\n\text/standard/var.c\n\text/standard/var_unserializer.c\n\text/standard/var_unserializer.re\n\text/xsl/xsltprocessor.c",
        "before_after_code_files": [
          "Zend/zend_API.c||Zend/zend_API.c",
          "ext/exif/exif.c||ext/exif/exif.c",
          "ext/gmp/gmp.c||ext/gmp/gmp.c",
          "ext/gmp/tests/bug70284.phpt||ext/gmp/tests/bug70284.phpt",
          "ext/hash/hash_haval.c||ext/hash/hash_haval.c",
          "ext/hash/tests/bug70312.phpt||ext/hash/tests/bug70312.phpt",
          "ext/hash/tests/hash_file_basic1.phpt||ext/hash/tests/hash_file_basic1.phpt",
          "ext/hash/tests/hash_hmac_basic.phpt||ext/hash/tests/hash_hmac_basic.phpt",
          "ext/hash/tests/hash_hmac_file_basic.phpt||ext/hash/tests/hash_hmac_file_basic.phpt",
          "ext/pcre/php_pcre.c||ext/pcre/php_pcre.c",
          "ext/pcre/tests/bug70345.phpt||ext/pcre/tests/bug70345.phpt",
          "ext/session/session.c||ext/session/session.c",
          "ext/session/tests/session_decode_error2.phpt||ext/session/tests/session_decode_error2.phpt",
          "ext/soap/soap.c||ext/soap/soap.c",
          "ext/soap/tests/bug70388.phpt||ext/soap/tests/bug70388.phpt",
          "ext/spl/spl_dllist.c||ext/spl/spl_dllist.c",
          "ext/spl/tests/bug70155.phpt||ext/spl/tests/bug70155.phpt",
          "ext/spl/tests/bug70365.phpt||ext/spl/tests/bug70365.phpt",
          "ext/spl/tests/bug70366.phpt||ext/spl/tests/bug70366.phpt",
          "ext/standard/tests/serialize/bug70172.phpt||ext/standard/tests/serialize/bug70172.phpt",
          "ext/standard/tests/serialize/bug70172_2.phpt||ext/standard/tests/serialize/bug70172_2.phpt",
          "ext/standard/tests/serialize/bug70219.phpt||ext/standard/tests/serialize/bug70219.phpt",
          "ext/standard/var.c||ext/standard/var.c",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re",
          "ext/xsl/xsltprocessor.c||ext/xsl/xsltprocessor.c",
          "ext/zip/php_zip.c||ext/zip/php_zip.c",
          "ext/zip/tests/bug70350.phpt||ext/zip/tests/bug70350.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend_API.c||Zend/zend_API.c": [
          "File: Zend/zend_API.c -> Zend/zend_API.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1243: {",
          "1244:     zval *prop, tmp;",
          "1245:     zend_string *key;",
          "1246:     zend_property_info *property_info;",
          "1260:    }",
          "1261:   } else {",
          "1262:    if (!object->properties) {",
          "1263:     rebuild_object_properties(object);",
          "1264:    }",
          "1266:    zval_add_ref(prop);",
          "1267:   }",
          "1268:  } ZEND_HASH_FOREACH_END();",
          "",
          "[Removed Lines]",
          "1248:  ZEND_HASH_FOREACH_STR_KEY_VAL(properties, key, prop) {",
          "1249:   property_info = zend_get_property_info(object->ce, key, 1);",
          "1250:   if (property_info != ZEND_WRONG_PROPERTY_INFO &&",
          "1251:       property_info &&",
          "1252:       (property_info->flags & ZEND_ACC_STATIC) == 0) {",
          "1253:    zval *slot = OBJ_PROP(object, property_info->offset);",
          "1254:    zval_ptr_dtor(slot);",
          "1255:    ZVAL_COPY_VALUE(slot, prop);",
          "1256:    zval_add_ref(slot);",
          "1257:    if (object->properties) {",
          "1258:     ZVAL_INDIRECT(&tmp, slot);",
          "1259:     zend_hash_update(object->properties, key, &tmp);",
          "1265:    prop = zend_hash_update(object->properties, key, prop);",
          "",
          "[Added Lines]",
          "1246:     zend_long h;",
          "1249:     ZEND_HASH_FOREACH_KEY_VAL(properties, h, key, prop) {",
          "1250:   if(key) {",
          "1251:    property_info = zend_get_property_info(object->ce, key, 1);",
          "1252:    if (property_info != ZEND_WRONG_PROPERTY_INFO &&",
          "1253:     property_info &&",
          "1254:     (property_info->flags & ZEND_ACC_STATIC) == 0) {",
          "1255:     zval *slot = OBJ_PROP(object, property_info->offset);",
          "1256:     zval_ptr_dtor(slot);",
          "1257:     ZVAL_COPY_VALUE(slot, prop);",
          "1258:     zval_add_ref(slot);",
          "1259:     if (object->properties) {",
          "1260:      ZVAL_INDIRECT(&tmp, slot);",
          "1261:      zend_hash_update(object->properties, key, &tmp);",
          "1262:     }",
          "1263:    } else {",
          "1264:     if (!object->properties) {",
          "1265:      rebuild_object_properties(object);",
          "1266:     }",
          "1267:     prop = zend_hash_update(object->properties, key, prop);",
          "1268:     zval_add_ref(prop);",
          "1274:    prop = zend_hash_index_update(object->properties, h, prop);",
          "",
          "---------------"
        ],
        "ext/exif/exif.c||ext/exif/exif.c": [
          "File: ext/exif/exif.c -> ext/exif/exif.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2945:      if (length<byte_count-1) {",
          "2947:       ImageInfo->CopyrightPhotographer  = estrdup(value_ptr);",
          "2949:       spprintf(&ImageInfo->Copyright, 0, \"%s, %s\", value_ptr, value_ptr+length+1);",
          "2953:      } else {",
          "2955:      }",
          "2956:     }",
          "2957:     break;",
          "",
          "[Removed Lines]",
          "2948:       ImageInfo->CopyrightEditor        = estrdup(value_ptr+length+1);",
          "2954:       ImageInfo->Copyright = estrdup(value_ptr);",
          "",
          "[Added Lines]",
          "2948:       ImageInfo->CopyrightEditor        = estrndup(value_ptr+length+1, byte_count-length-1);",
          "2954:       ImageInfo->Copyright = estrndup(value_ptr, byte_count);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3042:     break;",
          "3044:    case TAG_MAKE:",
          "3046:     break;",
          "3047:    case TAG_MODEL:",
          "3049:     break;",
          "3051:    case TAG_MAKER_NOTE:",
          "",
          "[Removed Lines]",
          "3045:     ImageInfo->make = estrdup(value_ptr);",
          "3048:     ImageInfo->model = estrdup(value_ptr);",
          "",
          "[Added Lines]",
          "3045:     ImageInfo->make = estrndup(value_ptr, byte_count);",
          "3048:     ImageInfo->model = estrndup(value_ptr, byte_count);",
          "",
          "---------------"
        ],
        "ext/gmp/gmp.c||ext/gmp/gmp.c": [
          "File: ext/gmp/gmp.c -> ext/gmp/gmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "585: {",
          "586:  mpz_ptr gmpnum;",
          "587:  const unsigned char *p, *max;",
          "589:  int retval = FAILURE;",
          "590:  php_unserialize_data_t unserialize_data = (php_unserialize_data_t) data;",
          "593:  PHP_VAR_UNSERIALIZE_INIT(unserialize_data);",
          "594:  gmp_create(object, &gmpnum);",
          "596:  p = buf;",
          "597:  max = buf + buf_len;",
          "602:  ) {",
          "603:   zend_throw_exception(NULL, \"Could not unserialize number\", 0);",
          "604:   goto exit;",
          "605:  }",
          "611:  ) {",
          "612:   zend_throw_exception(NULL, \"Could not unserialize properties\", 0);",
          "613:   goto exit;",
          "614:  }",
          "617:   zend_hash_copy(",
          "619:    (copy_ctor_func_t) zval_add_ref",
          "620:   );",
          "621:  }",
          "623:  retval = SUCCESS;",
          "624: exit:",
          "626:  PHP_VAR_UNSERIALIZE_DESTROY(unserialize_data);",
          "627:  return retval;",
          "628: }",
          "",
          "[Removed Lines]",
          "588:  zval zv;",
          "592:  ZVAL_UNDEF(&zv);",
          "599:  if (!php_var_unserialize(&zv, &p, max, &unserialize_data)",
          "600:   || Z_TYPE(zv) != IS_STRING",
          "601:   || convert_to_gmp(gmpnum, &zv, 10) == FAILURE",
          "606:  zval_dtor(&zv);",
          "607:  ZVAL_UNDEF(&zv);",
          "609:  if (!php_var_unserialize(&zv, &p, max, &unserialize_data)",
          "610:   || Z_TYPE(zv) != IS_ARRAY",
          "616:  if (zend_hash_num_elements(Z_ARRVAL(zv)) != 0) {",
          "618:    zend_std_get_properties(object), Z_ARRVAL(zv),",
          "625:  zval_dtor(&zv);",
          "",
          "[Added Lines]",
          "588:  zval *zv;",
          "598:  zv = var_tmp_var(&unserialize_data);",
          "599:  if (!php_var_unserialize(zv, &p, max, &unserialize_data)",
          "600:   || Z_TYPE_P(zv) != IS_STRING",
          "601:   || convert_to_gmp(gmpnum, zv, 10) == FAILURE",
          "607:  zv = var_tmp_var(&unserialize_data);",
          "608:  if (!php_var_unserialize(zv, &p, max, &unserialize_data)",
          "609:   || Z_TYPE_P(zv) != IS_ARRAY",
          "615:  if (zend_hash_num_elements(Z_ARRVAL_P(zv)) != 0) {",
          "617:    zend_std_get_properties(object), Z_ARRVAL_P(zv),",
          "",
          "---------------"
        ],
        "ext/gmp/tests/bug70284.phpt||ext/gmp/tests/bug70284.phpt": [
          "File: ext/gmp/tests/bug70284.phpt -> ext/gmp/tests/bug70284.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70284 (Use after free vulnerability in unserialize() with GMP)",
          "3: --SKIPIF--",
          "4: <?php if (!extension_loaded(\"gmp\")) print \"skip\"; ?>",
          "5: --FILE--",
          "6: <?php",
          "8: $inner = 'r:2;a:1:{i:0;a:1:{i:0;r:4;}}';",
          "9: $exploit = 'a:2:{i:0;s:1:\"1\";i:1;C:3:\"GMP\":'.strlen($inner).':{'.$inner.'}}';",
          "11: $data = unserialize($exploit);",
          "13: $fakezval = ptr2str(1122334455);",
          "14: $fakezval .= ptr2str(0);",
          "15: $fakezval .= \"\\x00\\x00\\x00\\x00\";",
          "16: $fakezval .= \"\\x01\";",
          "17: $fakezval .= \"\\x00\";",
          "18: $fakezval .= \"\\x00\\x00\";",
          "20: for ($i = 0; $i < 5; $i++) {",
          "21:  $v[$i] = $fakezval.$i;",
          "22: }",
          "24: var_dump($data);",
          "26: function ptr2str($ptr)",
          "27: {",
          "28: $out = '';",
          "29:  for ($i = 0; $i < 8; $i++) {",
          "30:   $out .= chr($ptr & 0xff);",
          "31:   $ptr >>= 8;",
          "32:  }",
          "33:  return $out;",
          "34: }",
          "35: ?>",
          "36: --EXPECTF--",
          "37: array(2) {",
          "38:   [0]=>",
          "39:   string(1) \"1\"",
          "40:   [1]=>",
          "41:   object(GMP)#%d (2) {",
          "42:     [0]=>",
          "43:     array(1) {",
          "44:       [0]=>",
          "45:       string(1) \"1\"",
          "46:     }",
          "47:     [\"num\"]=>",
          "48:     string(1) \"1\"",
          "49:   }",
          "50: }",
          "",
          "---------------"
        ],
        "ext/hash/hash_haval.c||ext/hash/hash_haval.c": [
          "File: ext/hash/hash_haval.c -> ext/hash/hash_haval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:  padLen = (index < 118) ? (118 - index) : (246 - index);",
          "341:  PHP_HAVALUpdate(context, PADDING, padLen);",
          "",
          "[Removed Lines]",
          "339:  index = (unsigned int) ((context->count[0] >> 3) & 0x3f);",
          "",
          "[Added Lines]",
          "339:  index = (unsigned int) ((context->count[0] >> 3) & 0x7f);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:  padLen = (index < 118) ? (118 - index) : (246 - index);",
          "395:  PHP_HAVALUpdate(context, PADDING, padLen);",
          "",
          "[Removed Lines]",
          "393:  index = (unsigned int) ((context->count[0] >> 3) & 0x3f);",
          "",
          "[Added Lines]",
          "393:  index = (unsigned int) ((context->count[0] >> 3) & 0x7f);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "448:  padLen = (index < 118) ? (118 - index) : (246 - index);",
          "449:  PHP_HAVALUpdate(context, PADDING, padLen);",
          "",
          "[Removed Lines]",
          "447:  index = (unsigned int) ((context->count[0] >> 3) & 0x3f);",
          "",
          "[Added Lines]",
          "447:  index = (unsigned int) ((context->count[0] >> 3) & 0x7f);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "488:  padLen = (index < 118) ? (118 - index) : (246 - index);",
          "489:  PHP_HAVALUpdate(context, PADDING, padLen);",
          "",
          "[Removed Lines]",
          "487:  index = (unsigned int) ((context->count[0] >> 3) & 0x3f);",
          "",
          "[Added Lines]",
          "487:  index = (unsigned int) ((context->count[0] >> 3) & 0x7f);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "529:  padLen = (index < 118) ? (118 - index) : (246 - index);",
          "530:  PHP_HAVALUpdate(context, PADDING, padLen);",
          "",
          "[Removed Lines]",
          "528:  index = (unsigned int) ((context->count[0] >> 3) & 0x3f);",
          "",
          "[Added Lines]",
          "528:  index = (unsigned int) ((context->count[0] >> 3) & 0x7f);",
          "",
          "---------------"
        ],
        "ext/hash/tests/bug70312.phpt||ext/hash/tests/bug70312.phpt": [
          "File: ext/hash/tests/bug70312.phpt -> ext/hash/tests/bug70312.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70312 HAVAL gives wrong hashes in specific cases",
          "3: --SKIPIF--",
          "4: <?php if(!extension_loaded(\"hash\")) print \"skip\"; ?>",
          "5: --FILE--",
          "6: <?php",
          "7: var_dump(hash('haval128,5', '1234567890123456789012345678901234567890123456789012345678901234'));",
          "8: var_dump(hash('haval160,5', '1234567890123456789012345678901234567890123456789012345678901234'));",
          "9: var_dump(hash('haval192,5', '1234567890123456789012345678901234567890123456789012345678901234'));",
          "10: var_dump(hash('haval224,5', '1234567890123456789012345678901234567890123456789012345678901234'));",
          "11: var_dump(hash('haval256,5', '1234567890123456789012345678901234567890123456789012345678901234'));",
          "12: ?>",
          "13: --EXPECTF--",
          "14: string(32) \"f3f0d23819b87228b4b70ee350afaa9d\"",
          "15: string(40) \"aded6485e137f11d7292212ba3fa961714df0564\"",
          "16: string(48) \"e53da2b16269fe732e9a898a96707a9f28404d7333b02286\"",
          "17: string(56) \"c574fb307f0817b514b9bb2e7c4bfaffb7ad667aca3c8b523fefcf10\"",
          "18: string(64) \"fb73c19300b14d5cb393d929bf005e6c2d459a4c9c009e9813af1d2d3637ee8f\"",
          "",
          "---------------"
        ],
        "ext/hash/tests/hash_file_basic1.phpt||ext/hash/tests/hash_file_basic1.phpt": [
          "File: ext/hash/tests/hash_file_basic1.phpt -> ext/hash/tests/hash_file_basic1.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: adler32: ff87222e",
          "65: crc32: 61664d33",
          "66: gost: d9e65f0c0c2ef944e4f8a01f4a46365c4f33a2853756878182a7f03e1490a4cd",
          "68: md2: 70f791c0d8fa9edd7d08e32fcba8c354",
          "69: md4: a9d034b16bb290c57a645afd6f14cd3b",
          "70: md5: 704bf818448f5bbb94061332d2c889aa",
          "",
          "[Removed Lines]",
          "67: haval128,3: 8bb81269aca8b7f87829020d76a4e841",
          "",
          "[Added Lines]",
          "67: haval128,3: c25962b13383c3ed9f13817c8f2ae7d6",
          "",
          "---------------"
        ],
        "ext/hash/tests/hash_hmac_basic.phpt||ext/hash/tests/hash_hmac_basic.phpt": [
          "File: ext/hash/tests/hash_hmac_basic.phpt -> ext/hash/tests/hash_hmac_basic.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: adler32: 12c803f7",
          "46: crc32: 96859101",
          "47: gost: a4a3c80bdf3f8665bf07376a34dc9c1b11af7c813f4928f62e39f0c0dc564dad",
          "49: md2: 6d111dab563025e4cb5f4425c991fa12",
          "50: md4: 10cdbfe843000c623f8b8da0d5d20b0b",
          "51: md5: 2a632783e2812cf23de100d7d6a463ae",
          "",
          "[Removed Lines]",
          "48: haval128,3: 82cd0f4bd36729b5c80c33efa8c13ac5",
          "",
          "[Added Lines]",
          "48: haval128,3: 4d1318607f0406bd1b7bd50907772672",
          "",
          "---------------"
        ],
        "ext/hash/tests/hash_hmac_file_basic.phpt||ext/hash/tests/hash_hmac_file_basic.phpt": [
          "File: ext/hash/tests/hash_hmac_file_basic.phpt -> ext/hash/tests/hash_hmac_file_basic.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: adler32: 0f8c02f9",
          "74: crc32: f2a60b9c",
          "75: gost: 94c39a40d5db852a8dc3d24e37eebf2d53e3d711457c59cd02b614f792a9d918",
          "77: md2: a685475e600314bb549ab4f33c3b27cb",
          "78: md4: cbc6bff781f48f57378d3effa27553e4",
          "79: md5: 8bddf39dd1c566c27acc7fa85ec36acf",
          "",
          "[Removed Lines]",
          "76: haval128,3: e8fcff647f1a675acb429130fb94a17e",
          "",
          "[Added Lines]",
          "76: haval128,3: f1cea637451097d790354a86de3f54a3",
          "",
          "---------------"
        ],
        "ext/pcre/php_pcre.c||ext/pcre/php_pcre.c": [
          "File: ext/pcre/php_pcre.c -> ext/pcre/php_pcre.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "759:    if (subpats != NULL) {",
          "762:      if (subpat_names) {",
          "763:       efree(subpat_names);",
          "764:      }",
          "",
          "[Removed Lines]",
          "761:     if (pcre_get_substring_list(subject, offsets, count, &stringlist) < 0) {",
          "",
          "[Added Lines]",
          "761:     if ((offsets[1] - offsets[0] < 0) || pcre_get_substring_list(subject, offsets, count, &stringlist) < 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1177:   piece = subject + start_offset;",
          "1181:    if (UNEXPECTED(replace_count)) {",
          "1182:     ++*replace_count;",
          "1183:    }",
          "",
          "[Removed Lines]",
          "1180:   if (EXPECTED(count > 0 && limit)) {",
          "",
          "[Added Lines]",
          "1180:   if (EXPECTED(count > 0 && (offsets[1] - offsets[0] >= 0) && limit)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1799:   }",
          "1803:    if (!no_empty || &subject[offsets[0]] != last_match) {",
          "1805:     if (offset_capture) {",
          "",
          "[Removed Lines]",
          "1802:   if (count > 0) {",
          "",
          "[Added Lines]",
          "1802:   if (count > 0 && (offsets[1] - offsets[0] >= 0)) {",
          "",
          "---------------"
        ],
        "ext/pcre/tests/bug70345.phpt||ext/pcre/tests/bug70345.phpt": [
          "File: ext/pcre/tests/bug70345.phpt -> ext/pcre/tests/bug70345.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70345 (Multiple vulnerabilities related to PCRE functions)",
          "3: --FILE--",
          "4: <?php",
          "5: $regex = '/(?=xyz\\K)/';",
          "6: $subject = \"aaaaxyzaaaa\";",
          "8: $v = preg_split($regex, $subject);",
          "9: print_r($v);",
          "11: $regex = '/(a(?=xyz\\K))/';",
          "12: $subject = \"aaaaxyzaaaa\";",
          "13: preg_match($regex, $subject, $matches);",
          "15: var_dump($matches);",
          "16: --EXPECTF--",
          "17: Array",
          "18: (",
          "19:     [0] => aaaaxyzaaaa",
          "20: )",
          "22: Warning: preg_match(): Get subpatterns list failed in %s on line %d",
          "23: array(0) {",
          "24: }",
          "",
          "---------------"
        ],
        "ext/session/session.c||ext/session/session.c": [
          "File: ext/session/session.c -> ext/session/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: static int php_session_rfc1867_callback(unsigned int event, void *event_data, void **extra);",
          "66: static int (*php_session_rfc1867_orig_callback)(unsigned int event, void *event_data, void **extra);",
          "69: zend_class_entry *php_session_class_entry;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: static void php_session_track_init(void);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139: {",
          "140:  int retval = SUCCESS;",
          "142:  if (PS(session_status) != php_session_active) {",
          "143:   php_error_docref(NULL, E_WARNING, \"Trying to destroy uninitialized session\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:  zend_string *var_name;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:  }",
          "236:  if (PS(serializer)->decode(ZSTR_VAL(data), ZSTR_LEN(data)) == FAILURE) {",
          "237:   php_session_destroy();",
          "238:   php_error_docref(NULL, E_WARNING, \"Failed to decode session object. Session has been destroyed\");",
          "239:   return FAILURE;",
          "240:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:   php_session_track_init();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "952:     var_replace(&var_hash, &current, zv);",
          "953:    } else {",
          "954:     zval_ptr_dtor(&current);",
          "955:    }",
          "956:   }",
          "957:   PS_ADD_VARL(name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "958:     PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "959:     return FAILURE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1042:     var_replace(&var_hash, &current, zv);",
          "1043:    } else {",
          "1044:     zval_ptr_dtor(&current);",
          "1045:    }",
          "1046:   }",
          "1047:   PS_ADD_VARL(name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1050:     PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "1051:     return FAILURE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2169:  }",
          "2171:  if (php_session_decode(str) == FAILURE) {",
          "2174:  }",
          "2175:  RETURN_TRUE;",
          "2176: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2179:   RETURN_FALSE;",
          "",
          "---------------"
        ],
        "ext/session/tests/session_decode_error2.phpt||ext/session/tests/session_decode_error2.phpt": [
          "File: ext/session/tests/session_decode_error2.phpt -> ext/session/tests/session_decode_error2.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: var_dump(session_start());",
          "20: for($index = 0; $index < strlen($data); $index++) {",
          "21:     echo \"\\n-- Iteration $index --\\n\";",
          "22:     $encoded = substr($data, 0, $index);",
          "23:     var_dump(session_decode($encoded));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  if(session_status() != PHP_SESSION_ACTIVE) { session_start(); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: }",
          "55: -- Iteration 4 --",
          "60: }",
          "62: -- Iteration 5 --",
          "67: }",
          "69: -- Iteration 6 --",
          "74: }",
          "76: -- Iteration 7 --",
          "81: }",
          "83: -- Iteration 8 --",
          "88: }",
          "90: -- Iteration 9 --",
          "95: }",
          "97: -- Iteration 10 --",
          "102: }",
          "104: -- Iteration 11 --",
          "109: }",
          "111: -- Iteration 12 --",
          "116: }",
          "118: -- Iteration 13 --",
          "123: }",
          "125: -- Iteration 14 --",
          "130: }",
          "132: -- Iteration 15 --",
          "137: }",
          "139: -- Iteration 16 --",
          "144: }",
          "146: -- Iteration 17 --",
          "151: }",
          "153: -- Iteration 18 --",
          "158: }",
          "160: -- Iteration 19 --",
          "165: }",
          "167: -- Iteration 20 --",
          "172: }",
          "174: -- Iteration 21 --",
          "179: }",
          "181: -- Iteration 22 --",
          "186: }",
          "188: -- Iteration 23 --",
          "193: }",
          "195: -- Iteration 24 --",
          "200: }",
          "202: -- Iteration 25 --",
          "207: }",
          "209: -- Iteration 26 --",
          "214: }",
          "216: -- Iteration 27 --",
          "221: }",
          "223: -- Iteration 28 --",
          "228: }",
          "230: -- Iteration 29 --",
          "235: }",
          "237: -- Iteration 30 --",
          "242: }",
          "244: -- Iteration 31 --",
          "249: }",
          "251: -- Iteration 32 --",
          "256: }",
          "258: -- Iteration 33 --",
          "263: }",
          "265: -- Iteration 34 --",
          "",
          "[Removed Lines]",
          "56: bool(true)",
          "57: array(1) {",
          "58:   [\"foo\"]=>",
          "59:   NULL",
          "63: bool(true)",
          "64: array(1) {",
          "65:   [\"foo\"]=>",
          "66:   NULL",
          "70: bool(true)",
          "71: array(1) {",
          "72:   [\"foo\"]=>",
          "73:   NULL",
          "77: bool(true)",
          "78: array(1) {",
          "79:   [\"foo\"]=>",
          "80:   NULL",
          "84: bool(true)",
          "85: array(1) {",
          "86:   [\"foo\"]=>",
          "87:   NULL",
          "91: bool(true)",
          "92: array(1) {",
          "93:   [\"foo\"]=>",
          "94:   NULL",
          "98: bool(true)",
          "99: array(1) {",
          "100:   [\"foo\"]=>",
          "101:   NULL",
          "105: bool(true)",
          "106: array(1) {",
          "107:   [\"foo\"]=>",
          "108:   NULL",
          "112: bool(true)",
          "113: array(1) {",
          "114:   [\"foo\"]=>",
          "115:   NULL",
          "119: bool(true)",
          "120: array(1) {",
          "121:   [\"foo\"]=>",
          "122:   NULL",
          "126: bool(true)",
          "127: array(1) {",
          "128:   [\"foo\"]=>",
          "129:   NULL",
          "133: bool(true)",
          "134: array(1) {",
          "135:   [\"foo\"]=>",
          "136:   NULL",
          "140: bool(true)",
          "141: array(1) {",
          "142:   [\"foo\"]=>",
          "143:   NULL",
          "147: bool(true)",
          "148: array(1) {",
          "149:   [\"foo\"]=>",
          "150:   NULL",
          "154: bool(true)",
          "155: array(1) {",
          "156:   [\"foo\"]=>",
          "157:   NULL",
          "161: bool(true)",
          "162: array(1) {",
          "163:   [\"foo\"]=>",
          "164:   NULL",
          "168: bool(true)",
          "169: array(1) {",
          "170:   [\"foo\"]=>",
          "171:   NULL",
          "175: bool(true)",
          "176: array(1) {",
          "177:   [\"foo\"]=>",
          "178:   NULL",
          "182: bool(true)",
          "183: array(1) {",
          "184:   [\"foo\"]=>",
          "185:   NULL",
          "189: bool(true)",
          "190: array(1) {",
          "191:   [\"foo\"]=>",
          "192:   NULL",
          "196: bool(true)",
          "197: array(1) {",
          "198:   [\"foo\"]=>",
          "199:   NULL",
          "203: bool(true)",
          "204: array(1) {",
          "205:   [\"foo\"]=>",
          "206:   NULL",
          "210: bool(true)",
          "211: array(1) {",
          "212:   [\"foo\"]=>",
          "213:   NULL",
          "217: bool(true)",
          "218: array(1) {",
          "219:   [\"foo\"]=>",
          "220:   NULL",
          "224: bool(true)",
          "225: array(1) {",
          "226:   [\"foo\"]=>",
          "227:   NULL",
          "231: bool(true)",
          "232: array(1) {",
          "233:   [\"foo\"]=>",
          "234:   NULL",
          "238: bool(true)",
          "239: array(1) {",
          "240:   [\"foo\"]=>",
          "241:   NULL",
          "245: bool(true)",
          "246: array(1) {",
          "247:   [\"foo\"]=>",
          "248:   NULL",
          "252: bool(true)",
          "253: array(1) {",
          "254:   [\"foo\"]=>",
          "255:   NULL",
          "259: bool(true)",
          "260: array(1) {",
          "261:   [\"foo\"]=>",
          "262:   NULL",
          "",
          "[Added Lines]",
          "58: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "59: bool(false)",
          "60: array(0) {",
          "65: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "66: bool(false)",
          "67: array(0) {",
          "72: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "73: bool(false)",
          "74: array(0) {",
          "79: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "80: bool(false)",
          "81: array(0) {",
          "86: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "87: bool(false)",
          "88: array(0) {",
          "93: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "94: bool(false)",
          "95: array(0) {",
          "100: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "101: bool(false)",
          "102: array(0) {",
          "107: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "108: bool(false)",
          "109: array(0) {",
          "114: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "115: bool(false)",
          "116: array(0) {",
          "121: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "122: bool(false)",
          "123: array(0) {",
          "128: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "129: bool(false)",
          "130: array(0) {",
          "135: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "136: bool(false)",
          "137: array(0) {",
          "142: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "143: bool(false)",
          "144: array(0) {",
          "149: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "150: bool(false)",
          "151: array(0) {",
          "156: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "157: bool(false)",
          "158: array(0) {",
          "163: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "164: bool(false)",
          "165: array(0) {",
          "170: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "171: bool(false)",
          "172: array(0) {",
          "177: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "178: bool(false)",
          "179: array(0) {",
          "184: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "185: bool(false)",
          "186: array(0) {",
          "191: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "192: bool(false)",
          "193: array(0) {",
          "198: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "199: bool(false)",
          "200: array(0) {",
          "205: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "206: bool(false)",
          "207: array(0) {",
          "212: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "213: bool(false)",
          "214: array(0) {",
          "219: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "220: bool(false)",
          "221: array(0) {",
          "226: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "227: bool(false)",
          "228: array(0) {",
          "233: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "234: bool(false)",
          "235: array(0) {",
          "240: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "241: bool(false)",
          "242: array(0) {",
          "247: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "248: bool(false)",
          "249: array(0) {",
          "254: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "255: bool(false)",
          "256: array(0) {",
          "261: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "262: bool(false)",
          "263: array(0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "333: }",
          "335: -- Iteration 39 --",
          "349: }",
          "351: -- Iteration 40 --",
          "365: }",
          "367: -- Iteration 41 --",
          "381: }",
          "383: -- Iteration 42 --",
          "397: }",
          "399: -- Iteration 43 --",
          "",
          "[Removed Lines]",
          "336: bool(true)",
          "337: array(2) {",
          "338:   [\"foo\"]=>",
          "339:   array(3) {",
          "340:     [0]=>",
          "341:     int(1)",
          "342:     [1]=>",
          "343:     int(2)",
          "344:     [2]=>",
          "345:     int(3)",
          "346:   }",
          "347:   [\"guff\"]=>",
          "348:   NULL",
          "352: bool(true)",
          "353: array(2) {",
          "354:   [\"foo\"]=>",
          "355:   array(3) {",
          "356:     [0]=>",
          "357:     int(1)",
          "358:     [1]=>",
          "359:     int(2)",
          "360:     [2]=>",
          "361:     int(3)",
          "362:   }",
          "363:   [\"guff\"]=>",
          "364:   NULL",
          "368: bool(true)",
          "369: array(2) {",
          "370:   [\"foo\"]=>",
          "371:   array(3) {",
          "372:     [0]=>",
          "373:     int(1)",
          "374:     [1]=>",
          "375:     int(2)",
          "376:     [2]=>",
          "377:     int(3)",
          "378:   }",
          "379:   [\"guff\"]=>",
          "380:   NULL",
          "384: bool(true)",
          "385: array(2) {",
          "386:   [\"foo\"]=>",
          "387:   array(3) {",
          "388:     [0]=>",
          "389:     int(1)",
          "390:     [1]=>",
          "391:     int(2)",
          "392:     [2]=>",
          "393:     int(3)",
          "394:   }",
          "395:   [\"guff\"]=>",
          "396:   NULL",
          "",
          "[Added Lines]",
          "338: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "339: bool(false)",
          "340: array(0) {",
          "345: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "346: bool(false)",
          "347: array(0) {",
          "352: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "353: bool(false)",
          "354: array(0) {",
          "359: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "360: bool(false)",
          "361: array(0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "512: }",
          "514: -- Iteration 48 --",
          "537: }",
          "539: -- Iteration 49 --",
          "562: }",
          "564: -- Iteration 50 --",
          "587: }",
          "589: -- Iteration 51 --",
          "612: }",
          "",
          "[Removed Lines]",
          "515: bool(true)",
          "516: array(3) {",
          "517:   [\"foo\"]=>",
          "518:   &array(3) {",
          "519:     [0]=>",
          "520:     int(1)",
          "521:     [1]=>",
          "522:     int(2)",
          "523:     [2]=>",
          "524:     int(3)",
          "525:   }",
          "526:   [\"guff\"]=>",
          "527:   &array(3) {",
          "528:     [0]=>",
          "529:     int(1)",
          "530:     [1]=>",
          "531:     int(2)",
          "532:     [2]=>",
          "533:     int(3)",
          "534:   }",
          "535:   [\"blah\"]=>",
          "536:   NULL",
          "540: bool(true)",
          "541: array(3) {",
          "542:   [\"foo\"]=>",
          "543:   &array(3) {",
          "544:     [0]=>",
          "545:     int(1)",
          "546:     [1]=>",
          "547:     int(2)",
          "548:     [2]=>",
          "549:     int(3)",
          "550:   }",
          "551:   [\"guff\"]=>",
          "552:   &array(3) {",
          "553:     [0]=>",
          "554:     int(1)",
          "555:     [1]=>",
          "556:     int(2)",
          "557:     [2]=>",
          "558:     int(3)",
          "559:   }",
          "560:   [\"blah\"]=>",
          "561:   NULL",
          "565: bool(true)",
          "566: array(3) {",
          "567:   [\"foo\"]=>",
          "568:   &array(3) {",
          "569:     [0]=>",
          "570:     int(1)",
          "571:     [1]=>",
          "572:     int(2)",
          "573:     [2]=>",
          "574:     int(3)",
          "575:   }",
          "576:   [\"guff\"]=>",
          "577:   &array(3) {",
          "578:     [0]=>",
          "579:     int(1)",
          "580:     [1]=>",
          "581:     int(2)",
          "582:     [2]=>",
          "583:     int(3)",
          "584:   }",
          "585:   [\"blah\"]=>",
          "586:   NULL",
          "590: bool(true)",
          "591: array(3) {",
          "592:   [\"foo\"]=>",
          "593:   &array(3) {",
          "594:     [0]=>",
          "595:     int(1)",
          "596:     [1]=>",
          "597:     int(2)",
          "598:     [2]=>",
          "599:     int(3)",
          "600:   }",
          "601:   [\"guff\"]=>",
          "602:   &array(3) {",
          "603:     [0]=>",
          "604:     int(1)",
          "605:     [1]=>",
          "606:     int(2)",
          "607:     [2]=>",
          "608:     int(3)",
          "609:   }",
          "610:   [\"blah\"]=>",
          "611:   NULL",
          "613: bool(true)",
          "614: Done",
          "",
          "[Added Lines]",
          "481: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "482: bool(false)",
          "483: array(0) {",
          "488: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "489: bool(false)",
          "490: array(0) {",
          "495: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "496: bool(false)",
          "497: array(0) {",
          "502: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/session_decode_error2.php on line %d",
          "503: bool(false)",
          "504: array(0) {",
          "507: Warning: session_destroy(): Trying to destroy uninitialized session in %s/session_decode_error2.php on line %d",
          "508: bool(false)",
          "509: Done",
          "",
          "---------------"
        ],
        "ext/soap/soap.c||ext/soap/soap.c": [
          "File: ext/soap/soap.c -> ext/soap/soap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1505:    add_soap_fault_ex(&exception_object, this_ptr, \"Server\", \"Internal Error\", NULL, NULL);",
          "1506:   }",
          "1507:   soap_server_fault_ex(function, &exception_object, NULL);",
          "1509: }",
          "",
          "[Removed Lines]",
          "1508:  }",
          "",
          "[Added Lines]",
          "1508:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2924:     free_soap_headers = 1;",
          "2925:    }",
          "2926:    ZEND_HASH_FOREACH_VAL(default_headers, tmp) {",
          "2929:    } ZEND_HASH_FOREACH_END();",
          "2930:   } else {",
          "2931:    soap_headers = Z_ARRVAL_P(tmp);",
          "",
          "[Removed Lines]",
          "2927:     Z_ADDREF_P(tmp);",
          "2928:     zend_hash_next_index_insert(soap_headers, tmp);",
          "",
          "[Added Lines]",
          "2927:     if(Z_TYPE_P(tmp) == IS_OBJECT) {",
          "2928:      Z_ADDREF_P(tmp);",
          "2929:      zend_hash_next_index_insert(soap_headers, tmp);",
          "2930:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4332:   zval* header;",
          "4334:   ZEND_HASH_FOREACH_VAL(soap_headers, header) {",
          "4336:    zval *name, *ns, *tmp;",
          "4338:    if ((name = zend_hash_str_find(ht, \"name\", sizeof(\"name\")-1)) != NULL &&",
          "4339:        Z_TYPE_P(name) == IS_STRING &&",
          "4340:        (ns = zend_hash_str_find(ht, \"namespace\", sizeof(\"namespace\")-1)) != NULL &&",
          "",
          "[Removed Lines]",
          "4335:    HashTable *ht = Z_OBJPROP_P(header);",
          "",
          "[Added Lines]",
          "4337:    HashTable *ht;",
          "4340:    if (Z_TYPE_P(header) != IS_OBJECT) {",
          "4341:     continue;",
          "4342:    }",
          "4344:    ht = Z_OBJPROP_P(header);",
          "",
          "---------------"
        ],
        "ext/soap/tests/bug70388.phpt||ext/soap/tests/bug70388.phpt": [
          "File: ext/soap/tests/bug70388.phpt -> ext/soap/tests/bug70388.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70388 (SOAP serialize_function_call() type confusion / RCE)",
          "3: --SKIPIF--",
          "4: <?php require_once('skipif.inc'); ?>",
          "5: --FILE--",
          "6: <?php",
          "7: $dummy = unserialize('O:10:\"SoapClient\":3:{s:3:\"uri\";s:1:\"X\";s:8:\"location\";s:22:\"http://localhost/a.xml\";s:17:\"__default_headers\";a:1:{i:1;s:1337:\"'.str_repeat(\"X\", 1337).'\";}}');",
          "8: try {",
          "9:  var_dump($dummy->notexisting());",
          "10: } catch(Exception $e) {",
          "11:  var_dump($e->getMessage());",
          "12:  var_dump(get_class($e));",
          "13: }",
          "14: ?>",
          "15: --EXPECTF--",
          "16: string(%d) \"%s\"",
          "17: string(9) \"SoapFault\"",
          "",
          "---------------"
        ],
        "ext/spl/spl_dllist.c||ext/spl/spl_dllist.c": [
          "File: ext/spl/spl_dllist.c -> ext/spl/spl_dllist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1210:   if (!php_var_unserialize(elem, &p, s + buf_len, &var_hash)) {",
          "1211:    goto error;",
          "1212:   }",
          "1214:   spl_ptr_llist_push(intern->llist, elem);",
          "1215:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1213:   var_push_dtor(&var_hash, elem);",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70155.phpt||ext/spl/tests/bug70155.phpt": [
          "File: ext/spl/tests/bug70155.phpt -> ext/spl/tests/bug70155.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: SPL: Bug #70155 Use After Free Vulnerability in unserialize() with SPLArrayObject",
          "3: --FILE--",
          "4: <?php",
          "5: $inner = 'x:i:0;O:12:\"DateInterval\":1:{s:1:\"y\";i:3;};m:a:1:{i:0;R:2;}';",
          "6: $exploit = 'C:11:\"ArrayObject\":'.strlen($inner).':{'.$inner.'}';",
          "7: $data = unserialize($exploit);",
          "9: var_dump($data);",
          "10: ?>",
          "11: ===DONE===",
          "12: --EXPECTF--",
          "13: object(ArrayObject)#1 (2) {",
          "14:   [0]=>",
          "15:   int(0)",
          "16:   [\"storage\":\"ArrayObject\":private]=>",
          "17:   object(DateInterval)#2 (15) {",
          "18:     [\"y\"]=>",
          "19:     int(3)",
          "20:     [\"m\"]=>",
          "21:     int(-1)",
          "22:     [\"d\"]=>",
          "23:     int(-1)",
          "24:     [\"h\"]=>",
          "25:     int(-1)",
          "26:     [\"i\"]=>",
          "27:     int(-1)",
          "28:     [\"s\"]=>",
          "29:     int(-1)",
          "30:     [\"weekday\"]=>",
          "31:     int(-1)",
          "32:     [\"weekday_behavior\"]=>",
          "33:     int(-1)",
          "34:     [\"first_last_day_of\"]=>",
          "35:     int(-1)",
          "36:     [\"invert\"]=>",
          "37:     int(0)",
          "38:     [\"days\"]=>",
          "39:     int(-1)",
          "40:     [\"special_type\"]=>",
          "41:     int(0)",
          "42:     [\"special_amount\"]=>",
          "43:     int(-1)",
          "44:     [\"have_weekday_relative\"]=>",
          "45:     int(0)",
          "46:     [\"have_special_relative\"]=>",
          "47:     int(0)",
          "48:   }",
          "49: }",
          "50: ===DONE===",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70365.phpt||ext/spl/tests/bug70365.phpt": [
          "File: ext/spl/tests/bug70365.phpt -> ext/spl/tests/bug70365.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: SPL: Bug #70365 use-after-free vulnerability in unserialize() with SplObjectStorage",
          "3: --FILE--",
          "4: <?php",
          "5: class obj {",
          "6:  var $ryat;",
          "7:  function __wakeup() {",
          "8:   $this->ryat = 1;",
          "9:  }",
          "10: }",
          "12: $fakezval = ptr2str(1122334455);",
          "13: $fakezval .= ptr2str(0);",
          "14: $fakezval .= \"\\x00\\x00\\x00\\x00\";",
          "15: $fakezval .= \"\\x01\";",
          "16: $fakezval .= \"\\x00\";",
          "17: $fakezval .= \"\\x00\\x00\";",
          "19: $inner = 'x:i:1;O:8:\"stdClass\":0:{},i:1;;m:a:0:{}';",
          "20: $exploit = 'a:5:{i:0;i:1;i:1;C:16:\"SplObjectStorage\":'.strlen($inner).':{'.$inner.'}i:2;O:3:\"obj\":1:{s:4:\"ryat\";R:3;}i:3;R:6;i:4;s:'.strlen($fakezval).':\"'.$fakezval.'\";}';",
          "22: $data = unserialize($exploit);",
          "24: var_dump($data);",
          "26: function ptr2str($ptr)",
          "27: {",
          "28:  $out = '';",
          "29:  for ($i = 0; $i < 8; $i++) {",
          "30:   $out .= chr($ptr & 0xff);",
          "31:   $ptr >>= 8;",
          "32:  }",
          "33:  return $out;",
          "34: }",
          "35: --EXPECTF--",
          "36: array(5) {",
          "37:   [0]=>",
          "38:   int(1)",
          "39:   [1]=>",
          "40:   &int(1)",
          "41:   [2]=>",
          "42:   object(obj)#%d (1) {",
          "43:     [\"ryat\"]=>",
          "44:     &int(1)",
          "45:   }",
          "46:   [3]=>",
          "47:   int(1)",
          "48:   [4]=>",
          "49:   string(24) \"%s\"",
          "50: }",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70366.phpt||ext/spl/tests/bug70366.phpt": [
          "File: ext/spl/tests/bug70366.phpt -> ext/spl/tests/bug70366.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: SPL: Bug #70366 use-after-free vulnerability in unserialize() with SplDoublyLinkedList",
          "3: --FILE--",
          "4: <?php",
          "5: class obj {",
          "6:  var $ryat;",
          "7:  function __wakeup() {",
          "8:   $this->ryat = 1;",
          "9:  }",
          "10: }",
          "12: $fakezval = ptr2str(1122334455);",
          "13: $fakezval .= ptr2str(0);",
          "14: $fakezval .= \"\\x00\\x00\\x00\\x00\";",
          "15: $fakezval .= \"\\x01\";",
          "16: $fakezval .= \"\\x00\";",
          "17: $fakezval .= \"\\x00\\x00\";",
          "19: $inner = 'i:1234;:i:1;';",
          "20: $exploit = 'a:5:{i:0;i:1;i:1;C:19:\"SplDoublyLinkedList\":'.strlen($inner).':{'.$inner.'}i:2;O:3:\"obj\":1:{s:4:\"ryat\";R:3;}i:3;a:1:{i:0;R:5;}i:4;s:'.strlen($fakezval).':\"'.$fakezval.'\";}';",
          "22: $data = unserialize($exploit);",
          "24: var_dump($data);",
          "26: function ptr2str($ptr)",
          "27: {",
          "28:  $out = '';",
          "29:  for ($i = 0; $i < 8; $i++) {",
          "30:   $out .= chr($ptr & 0xff);",
          "31:   $ptr >>= 8;",
          "32:  }",
          "33:  return $out;",
          "34: }",
          "35: ?>",
          "36: --EXPECTF--",
          "37: array(5) {",
          "38:   [0]=>",
          "39:   int(1)",
          "40:   [1]=>",
          "41:   &int(1)",
          "42:   [2]=>",
          "43:   object(obj)#%d (1) {",
          "44:     [\"ryat\"]=>",
          "45:     &int(1)",
          "46:   }",
          "47:   [3]=>",
          "48:   array(1) {",
          "49:     [0]=>",
          "50:     int(1)",
          "51:   }",
          "52:   [4]=>",
          "53:   string(24) \"%s\"",
          "54: }",
          "",
          "---------------"
        ],
        "ext/standard/tests/serialize/bug70172.phpt||ext/standard/tests/serialize/bug70172.phpt": [
          "File: ext/standard/tests/serialize/bug70172.phpt -> ext/standard/tests/serialize/bug70172.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70172 - Use After Free Vulnerability in unserialize()",
          "3: --XFAIL--",
          "4: Memory leak on debug build, needs fix.",
          "5: --FILE--",
          "6: <?php",
          "7: class obj implements Serializable {",
          "8:  var $data;",
          "9:  function serialize() {",
          "10:   return serialize($this->data);",
          "11:  }",
          "12:  function unserialize($data) {",
          "13:   $this->data = unserialize($data);",
          "14:  }",
          "15: }",
          "17: $fakezval = ptr2str(1122334455);",
          "18: $fakezval .= ptr2str(0);",
          "19: $fakezval .= \"\\x00\\x00\\x00\\x00\";",
          "20: $fakezval .= \"\\x01\";",
          "21: $fakezval .= \"\\x00\";",
          "22: $fakezval .= \"\\x00\\x00\";",
          "24: $inner = 'r:2;';",
          "25: $exploit = 'a:2:{i:0;i:1;i:1;C:3:\"obj\":'.strlen($inner).':{'.$inner.'}}';",
          "27: $data = unserialize($exploit);",
          "29: for ($i = 0; $i < 5; $i++) {",
          "30:  $v[$i] = $fakezval.$i;",
          "31: }",
          "33: var_dump($data);",
          "35: function ptr2str($ptr)",
          "36: {",
          "37:  $out = '';",
          "38:  for ($i = 0; $i < 8; $i++) {",
          "39:   $out .= chr($ptr & 0xff);",
          "40:   $ptr >>= 8;",
          "41:  }",
          "42:  return $out;",
          "43: }",
          "44: ?>",
          "45: --EXPECTF--",
          "46: array(2) {",
          "47:   [0]=>",
          "48:   int(1)",
          "49:   [1]=>",
          "50:   object(obj)#%d (1) {",
          "51:     [\"data\"]=>",
          "52:     int(1)",
          "53:   }",
          "54: }",
          "",
          "---------------"
        ],
        "ext/standard/tests/serialize/bug70172_2.phpt||ext/standard/tests/serialize/bug70172_2.phpt": [
          "File: ext/standard/tests/serialize/bug70172_2.phpt -> ext/standard/tests/serialize/bug70172_2.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70172 - Use After Free Vulnerability in unserialize()",
          "3: --FILE--",
          "4: <?php",
          "5: class obj implements Serializable {",
          "6:  var $data;",
          "7:  function serialize() {",
          "8:   return serialize($this->data);",
          "9:  }",
          "10:  function unserialize($data) {",
          "11:   $this->data = unserialize($data);",
          "12:  }",
          "13: }",
          "15: class obj2 {",
          "16:  var $ryat;",
          "17:  function __wakeup() {",
          "18:   $this->ryat = 1;",
          "19:  }",
          "20: }",
          "22: $fakezval = ptr2str(1122334455);",
          "23: $fakezval .= ptr2str(0);",
          "24: $fakezval .= \"\\x00\\x00\\x00\\x00\";",
          "25: $fakezval .= \"\\x01\";",
          "26: $fakezval .= \"\\x00\";",
          "27: $fakezval .= \"\\x00\\x00\";",
          "29: $inner = 'r:2;';",
          "30: $exploit = 'a:2:{i:0;O:4:\"obj2\":1:{s:4:\"ryat\";C:3:\"obj\":'.strlen($inner).':{'.$inner.'}}i:1;a:1:{i:0;a:1:{i:0;R:4;}}}';",
          "32: $data = unserialize($exploit);",
          "34: for ($i = 0; $i < 5; $i++) {",
          "35:  $v[$i] = $fakezval.$i;",
          "36: }",
          "38: var_dump($data);",
          "40: function ptr2str($ptr)",
          "41: {",
          "42:  $out = '';",
          "43:  for ($i = 0; $i < 8; $i++) {",
          "44:   $out .= chr($ptr & 0xff);",
          "45:   $ptr >>= 8;",
          "46:  }",
          "47:  return $out;",
          "48: }",
          "49: ?>",
          "50: --EXPECTF--",
          "51: array(2) {",
          "52:   [0]=>",
          "53:   object(obj2)#%d (1) {",
          "54:     [\"ryat\"]=>",
          "55:     int(1)",
          "56:   }",
          "57:   [1]=>",
          "58:   array(1) {",
          "59:     [0]=>",
          "60:     array(1) {",
          "61:       [0]=>",
          "62:       &object(obj2)#%d (1) {",
          "63:         [\"ryat\"]=>",
          "64:         int(1)",
          "65:       }",
          "66:     }",
          "67:   }",
          "68: }",
          "",
          "---------------"
        ],
        "ext/standard/tests/serialize/bug70219.phpt||ext/standard/tests/serialize/bug70219.phpt": [
          "File: ext/standard/tests/serialize/bug70219.phpt -> ext/standard/tests/serialize/bug70219.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70219 Use after free vulnerability in session deserializer",
          "3: --FILE--",
          "4: <?php",
          "5: class obj implements Serializable {",
          "6:     var $data;",
          "7:     function serialize() {",
          "8:         return serialize($this->data);",
          "9:     }",
          "10:     function unserialize($data) {",
          "11:         session_start();",
          "12:         session_decode($data);",
          "13:     }",
          "14: }",
          "16: $inner = 'ryat|a:1:{i:0;a:1:{i:1;';",
          "17: $exploit = 'a:2:{i:0;C:3:\"obj\":'.strlen($inner).':{'.$inner.'}i:1;R:4;}';",
          "19: $data = unserialize($exploit);",
          "21: for ($i = 0; $i < 5; $i++) {",
          "22:     $v[$i] = 'hi'.$i;",
          "23: }",
          "25: var_dump($data);",
          "26: ?>",
          "27: --EXPECTF--",
          "28: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s on line %d",
          "29: array(2) {",
          "30:   [0]=>",
          "31:   object(obj)#%d (1) {",
          "32:     [\"data\"]=>",
          "33:     NULL",
          "34:   }",
          "35:   [1]=>",
          "36:   &array(1) {",
          "37:     [\"data\"]=>",
          "38:     NULL",
          "39:   }",
          "40: }",
          "",
          "---------------"
        ],
        "ext/standard/var.c||ext/standard/var.c": [
          "File: ext/standard/var.c -> ext/standard/var.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1045:  php_unserialize_data_t var_hash;",
          "1046:  zval *options = NULL, *classes = NULL;",
          "1047:  HashTable *class_hash = NULL;",
          "1049:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s|a\", &buf, &buf_len, &options) == FAILURE) {",
          "1050:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1048:  zval *old_rval = return_value;",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: #if 0",
          "104: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval *rval)",
          "105: {",
          "107: #if VAR_ENTRIES_DBG",
          "109: #endif",
          "111:  if (!var_hash || var_hash->used_slots == VAR_ENTRIES_MAX) {",
          "",
          "[Removed Lines]",
          "106:  var_dtor_entries *var_hash = (*var_hashx)->last_dtor;",
          "108:  fprintf(stderr, \"var_push_dtor_no_addref(%ld): %d (%d)\\n\", var_hash?var_hash->used_slots:-1L, Z_TYPE_PP(rval), Z_REFCOUNT_PP(rval));",
          "",
          "[Added Lines]",
          "106:  var_entries *var_hash;",
          "108:     if (!var_hashx || !*var_hashx) {",
          "109:         return;",
          "110:     }",
          "112:     var_hash = (*var_hashx)->last_dtor;",
          "114:  fprintf(stderr, \"var_push_dtor_no_addref(%p, %ld): %d (%d)\\n\", *rval, var_hash?var_hash->used_slots:-1L, Z_TYPE_PP(rval), Z_REFCOUNT_PP(rval));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:  while (var_dtor_hash) {",
          "185:   for (i = 0; i < var_dtor_hash->used_slots; i++) {",
          "186:    zval_ptr_dtor(&var_dtor_hash->data[i]);",
          "187:   }",
          "188:   next = var_dtor_hash->next;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192: #if VAR_ENTRIES_DBG",
          "193:    fprintf(stderr, \"var_destroy dtor(%p, %ld)\\n\", var_dtor_hash->data[i], Z_REFCOUNT_P(var_dtor_hash->data[i]));",
          "194: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263: #define YYMARKER marker",
          "",
          "[Removed Lines]",
          "266: #line 271 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "275: #line 280 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "530:  start = cursor;",
          "534: {",
          "535:  YYCTYPE yych;",
          "536:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "533: #line 534 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "542: #line 543 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "590:  yych = *(YYMARKER = ++YYCURSOR);",
          "591:  if (yych == ':') goto yy95;",
          "592: yy3:",
          "594:  { return 0; }",
          "596: yy4:",
          "597:  yych = *(YYMARKER = ++YYCURSOR);",
          "598:  if (yych == ':') goto yy89;",
          "",
          "[Removed Lines]",
          "593: #line 881 \"ext/standard/var_unserializer.re\"",
          "595: #line 596 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "602: #line 893 \"ext/standard/var_unserializer.re\"",
          "604: #line 605 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "635:  goto yy3;",
          "636: yy14:",
          "637:  ++YYCURSOR;",
          "639:  {",
          "641:  php_error_docref(NULL, E_NOTICE, \"Unexpected end of serialized data\");",
          "643: }",
          "645: yy16:",
          "646:  yych = *++YYCURSOR;",
          "647:  goto yy3;",
          "",
          "[Removed Lines]",
          "638: #line 875 \"ext/standard/var_unserializer.re\"",
          "644: #line 645 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "647: #line 887 \"ext/standard/var_unserializer.re\"",
          "653: #line 654 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "667:  if (yybm[0+yych] & 128) {",
          "668:   goto yy20;",
          "669:  }",
          "671:  yych = *++YYCURSOR;",
          "672:  if (yych != '\"') goto yy18;",
          "673:  ++YYCURSOR;",
          "675:  {",
          "676:  size_t len, len2, len3, maxlen;",
          "677:  zend_long elements;",
          "",
          "[Removed Lines]",
          "670:  if (yych != ':') goto yy18;",
          "674: #line 730 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "679:  if (yych <= '/') goto yy18;",
          "680:  if (yych >= ';') goto yy18;",
          "684: #line 741 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "686:  zval retval;",
          "687:  zval args[1];",
          "689:  if (*start == 'C') {",
          "690:   custom_object = 1;",
          "691:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699:     if (!var_hash) return 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "817:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "818: }",
          "820: yy25:",
          "821:  yych = *++YYCURSOR;",
          "822:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "819: #line 820 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "830: #line 831 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "841:  yych = *++YYCURSOR;",
          "842:  if (yych != '\"') goto yy18;",
          "843:  ++YYCURSOR;",
          "845:  {",
          "849:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "850:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "851: }",
          "853: yy32:",
          "854:  yych = *++YYCURSOR;",
          "855:  if (yych == '+') goto yy33;",
          "",
          "[Removed Lines]",
          "844: #line 722 \"ext/standard/var_unserializer.re\"",
          "852: #line 853 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "855: #line 732 \"ext/standard/var_unserializer.re\"",
          "857:     if (!var_hash) return 0;",
          "864: #line 865 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "870:  yych = *++YYCURSOR;",
          "871:  if (yych != '{') goto yy18;",
          "872:  ++YYCURSOR;",
          "874:  {",
          "875:  zend_long elements = parse_iv(start + 2);",
          "879:  if (elements < 0) {",
          "880:   return 0;",
          "",
          "[Removed Lines]",
          "873: #line 701 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "885: #line 710 \"ext/standard/var_unserializer.re\"",
          "890:     if (!var_hash) return 0;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "892:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "893: }",
          "895: yy39:",
          "896:  yych = *++YYCURSOR;",
          "897:  if (yych == '+') goto yy40;",
          "",
          "[Removed Lines]",
          "894: #line 895 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "907: #line 908 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "912:  yych = *++YYCURSOR;",
          "913:  if (yych != '\"') goto yy18;",
          "914:  ++YYCURSOR;",
          "916:  {",
          "917:  size_t len, maxlen;",
          "918:  zend_string *str;",
          "",
          "[Removed Lines]",
          "915: #line 673 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "928: #line 682 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "940:  ZVAL_STR(rval, str);",
          "941:  return 1;",
          "942: }",
          "944: yy46:",
          "945:  yych = *++YYCURSOR;",
          "946:  if (yych == '+') goto yy47;",
          "",
          "[Removed Lines]",
          "943: #line 944 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "956: #line 957 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "961:  yych = *++YYCURSOR;",
          "962:  if (yych != '\"') goto yy18;",
          "963:  ++YYCURSOR;",
          "965:  {",
          "966:  size_t len, maxlen;",
          "967:  char *str;",
          "",
          "[Removed Lines]",
          "964: #line 646 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "977: #line 655 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "988:  ZVAL_STRINGL(rval, str, len);",
          "989:  return 1;",
          "990: }",
          "992: yy53:",
          "993:  yych = *++YYCURSOR;",
          "994:  if (yych <= '/') {",
          "",
          "[Removed Lines]",
          "991: #line 992 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1004: #line 1005 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1076:  }",
          "1077: yy63:",
          "1078:  ++YYCURSOR;",
          "1080:  {",
          "1081: #if SIZEOF_ZEND_LONG == 4",
          "1082: use_double:",
          "",
          "[Removed Lines]",
          "1079: #line 637 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1092: #line 646 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1085:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "1086:  return 1;",
          "1087: }",
          "1089: yy65:",
          "1090:  yych = *++YYCURSOR;",
          "1091:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1088: #line 1089 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1101: #line 1102 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1144:  yych = *++YYCURSOR;",
          "1145:  if (yych != ';') goto yy18;",
          "1146:  ++YYCURSOR;",
          "1148:  {",
          "",
          "[Removed Lines]",
          "1147: #line 621 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1160: #line 630 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1161:  return 1;",
          "1162: }",
          "1164: yy76:",
          "1165:  yych = *++YYCURSOR;",
          "1166:  if (yych == 'N') goto yy73;",
          "",
          "[Removed Lines]",
          "1163: #line 1164 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1176: #line 1177 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1187:  if (yych <= '9') goto yy79;",
          "1188:  if (yych != ';') goto yy18;",
          "1189:  ++YYCURSOR;",
          "1191:  {",
          "1192: #if SIZEOF_ZEND_LONG == 4",
          "1193:  int digits = YYCURSOR - start - 3;",
          "",
          "[Removed Lines]",
          "1190: #line 595 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1203: #line 604 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1213:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1214:  return 1;",
          "1215: }",
          "1217: yy83:",
          "1218:  yych = *++YYCURSOR;",
          "1219:  if (yych <= '/') goto yy18;",
          "",
          "[Removed Lines]",
          "1216: #line 1217 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1229: #line 1230 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1221:  yych = *++YYCURSOR;",
          "1222:  if (yych != ';') goto yy18;",
          "1223:  ++YYCURSOR;",
          "1225:  {",
          "1227:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1228:  return 1;",
          "1229: }",
          "1231: yy87:",
          "1232:  ++YYCURSOR;",
          "1234:  {",
          "1236:  ZVAL_NULL(rval);",
          "1237:  return 1;",
          "1238: }",
          "1240: yy89:",
          "1241:  yych = *++YYCURSOR;",
          "1242:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1224: #line 589 \"ext/standard/var_unserializer.re\"",
          "1230: #line 1231 \"ext/standard/var_unserializer.c\"",
          "1233: #line 583 \"ext/standard/var_unserializer.re\"",
          "1239: #line 1240 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1237: #line 598 \"ext/standard/var_unserializer.re\"",
          "1243: #line 1244 \"ext/standard/var_unserializer.c\"",
          "1246: #line 592 \"ext/standard/var_unserializer.re\"",
          "1252: #line 1253 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1259:  if (yych <= '9') goto yy91;",
          "1260:  if (yych != ';') goto yy18;",
          "1261:  ++YYCURSOR;",
          "1263:  {",
          "1264:  zend_long id;",
          "",
          "[Removed Lines]",
          "1262: #line 560 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1275: #line 569 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1283:  return 1;",
          "1284: }",
          "1286: yy95:",
          "1287:  yych = *++YYCURSOR;",
          "1288:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1285: #line 1286 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1298: #line 1299 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1305:  if (yych <= '9') goto yy97;",
          "1306:  if (yych != ';') goto yy18;",
          "1307:  ++YYCURSOR;",
          "1309:  {",
          "1310:  zend_long id;",
          "",
          "[Removed Lines]",
          "1308: #line 538 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1321: #line 547 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1328:  return 1;",
          "1329: }",
          "1331: }",
          "1335:  return 0;",
          "",
          "[Removed Lines]",
          "1330: #line 1331 \"ext/standard/var_unserializer.c\"",
          "1332: #line 883 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1343: #line 1344 \"ext/standard/var_unserializer.c\"",
          "1345: #line 895 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: #if 0",
          "102: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval *rval)",
          "103: {",
          "105: #if VAR_ENTRIES_DBG",
          "107: #endif",
          "109:  if (!var_hash || var_hash->used_slots == VAR_ENTRIES_MAX) {",
          "",
          "[Removed Lines]",
          "104:  var_dtor_entries *var_hash = (*var_hashx)->last_dtor;",
          "106:  fprintf(stderr, \"var_push_dtor_no_addref(%ld): %d (%d)\\n\", var_hash?var_hash->used_slots:-1L, Z_TYPE_PP(rval), Z_REFCOUNT_PP(rval));",
          "",
          "[Added Lines]",
          "104:  var_entries *var_hash;",
          "106:     if (!var_hashx || !*var_hashx) {",
          "107:         return;",
          "108:     }",
          "110:     var_hash = (*var_hashx)->last_dtor;",
          "112:  fprintf(stderr, \"var_push_dtor_no_addref(%p, %ld): %d (%d)\\n\", *rval, var_hash?var_hash->used_slots:-1L, Z_TYPE_PP(rval), Z_REFCOUNT_PP(rval));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:  while (var_dtor_hash) {",
          "183:   for (i = 0; i < var_dtor_hash->used_slots; i++) {",
          "184:    zval_ptr_dtor(&var_dtor_hash->data[i]);",
          "185:   }",
          "186:   next = var_dtor_hash->next;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190: #if VAR_ENTRIES_DBG",
          "191:    fprintf(stderr, \"var_destroy dtor(%p, %ld)\\n\", var_dtor_hash->data[i], Z_REFCOUNT_P(var_dtor_hash->data[i]));",
          "192: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "702:  zend_long elements = parse_iv(start + 2);",
          "706:  if (elements < 0) {",
          "707:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "714:     if (!var_hash) return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "720: }",
          "722: \"o:\" iv \":\" [\"] {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "733:     if (!var_hash) return 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "741:  zval retval;",
          "742:  zval args[1];",
          "744:  if (*start == 'C') {",
          "745:   custom_object = 1;",
          "746:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "755:     if (!var_hash) return 0;",
          "",
          "---------------"
        ],
        "ext/xsl/xsltprocessor.c||ext/xsl/xsltprocessor.c": [
          "File: ext/xsl/xsltprocessor.c -> ext/xsl/xsltprocessor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:  if (error == 1) {",
          "219:   for (i = nargs - 1; i >= 0; i--) {",
          "220:    obj = valuePop(ctxt);",
          "222:   }",
          "223:   return;",
          "224:  }",
          "",
          "[Removed Lines]",
          "221:    xmlXPathFreeObject(obj);",
          "",
          "[Added Lines]",
          "221:    if (obj) {",
          "222:     xmlXPathFreeObject(obj);",
          "223:    }",
          "",
          "---------------"
        ],
        "ext/zip/php_zip.c||ext/zip/php_zip.c": [
          "File: ext/zip/php_zip.c -> ext/zip/php_zip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:  if (path_cleaned_len > 1 && IS_SLASH(path_cleaned[path_cleaned_len - 1])) {",
          "175:   is_dir_only = 1;",
          "176:  } else {",
          "177:   memcpy(file_dirname, path_cleaned, path_cleaned_len);",
          "",
          "[Removed Lines]",
          "174:   len = spprintf(&file_dirname_fullpath, 0, \"%s/%s\", dest, file);",
          "",
          "[Added Lines]",
          "174:   len = spprintf(&file_dirname_fullpath, 0, \"%s/%s\", dest, path_cleaned);",
          "",
          "---------------"
        ],
        "ext/zip/tests/bug70350.phpt||ext/zip/tests/bug70350.phpt": [
          "File: ext/zip/tests/bug70350.phpt -> ext/zip/tests/bug70350.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70350 (ZipArchive::extractTo allows for directory traversal when creating directories)",
          "3: --SKIPIF--",
          "4: <?php",
          "5: if(!extension_loaded('zip')) die('skip');",
          "6: ?>",
          "7: --FILE--",
          "8: <?php",
          "10: $dir = dirname(__FILE__).\"/bug70350\";",
          "11: mkdir($dir);",
          "12: $archive = new ZipArchive();",
          "13: $archive->open(\"$dir/a.zip\",ZipArchive::CREATE);",
          "14: $archive->addEmptyDir(\"../down2/\");",
          "15: $archive->close();",
          "17: $archive2 = new ZipArchive();",
          "18: $archive2->open(\"$dir/a.zip\");",
          "19: $archive2->extractTo($dir);",
          "20: $archive2->close();",
          "21: var_dump(file_exists(\"$dir/down2/\"));",
          "22: var_dump(file_exists(\"../down2/\"));",
          "23: ?>",
          "24: --CLEAN--",
          "25: <?php",
          "26: $dir = dirname(__FILE__).\"/bug70350\";",
          "27: rmdir(\"$dir/down2\");",
          "28: unlink(\"$dir/a.zip\");",
          "29: rmdir($dir);",
          "30: ?>",
          "31: --EXPECT--",
          "32: bool(true)",
          "33: bool(false)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d76b293ac71aa5bd4e9a433192afef6e0dd5a4ee",
      "candidate_info": {
        "commit_hash": "d76b293ac71aa5bd4e9a433192afef6e0dd5a4ee",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/d76b293ac71aa5bd4e9a433192afef6e0dd5a4ee",
        "files": [
          "ext/standard/var_unserializer.c"
        ],
        "message": "forgot to commit this one",
        "before_after_code_files": [
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "392:    return 0;",
          "393:   }",
          "395:   if (elements && *(*p-1) != ';' && *(*p-1) != '}') {",
          "396:    (*p)--;",
          "397:    return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395:   var_push_dtor(var_hash, data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "522:  start = cursor;",
          "526: {",
          "527:  YYCTYPE yych;",
          "528:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "525: #line 526 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "527: #line 528 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "582:  yych = *(YYMARKER = ++YYCURSOR);",
          "583:  if (yych == ':') goto yy95;",
          "584: yy3:",
          "586:  { return 0; }",
          "588: yy4:",
          "589:  yych = *(YYMARKER = ++YYCURSOR);",
          "590:  if (yych == ':') goto yy89;",
          "",
          "[Removed Lines]",
          "585: #line 873 \"ext/standard/var_unserializer.re\"",
          "587: #line 588 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "587: #line 875 \"ext/standard/var_unserializer.re\"",
          "589: #line 590 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "627:  goto yy3;",
          "628: yy14:",
          "629:  ++YYCURSOR;",
          "631:  {",
          "633:  php_error_docref(NULL, E_NOTICE, \"Unexpected end of serialized data\");",
          "635: }",
          "637: yy16:",
          "638:  yych = *++YYCURSOR;",
          "639:  goto yy3;",
          "",
          "[Removed Lines]",
          "630: #line 867 \"ext/standard/var_unserializer.re\"",
          "636: #line 637 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "632: #line 869 \"ext/standard/var_unserializer.re\"",
          "638: #line 639 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "659:  if (yybm[0+yych] & 128) {",
          "660:   goto yy20;",
          "661:  }",
          "663:  yych = *++YYCURSOR;",
          "664:  if (yych != '\"') goto yy18;",
          "665:  ++YYCURSOR;",
          "667:  {",
          "668:  size_t len, len2, len3, maxlen;",
          "669:  zend_long elements;",
          "",
          "[Removed Lines]",
          "662:  if (yych != ':') goto yy18;",
          "666: #line 722 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "664:  if (yych <= '/') goto yy18;",
          "665:  if (yych >= ';') goto yy18;",
          "669: #line 724 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "809:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "810: }",
          "812: yy25:",
          "813:  yych = *++YYCURSOR;",
          "814:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "811: #line 812 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "814: #line 815 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "833:  yych = *++YYCURSOR;",
          "834:  if (yych != '\"') goto yy18;",
          "835:  ++YYCURSOR;",
          "837:  {",
          "",
          "[Removed Lines]",
          "836: #line 714 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "839: #line 716 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "841:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "842:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "843: }",
          "845: yy32:",
          "846:  yych = *++YYCURSOR;",
          "847:  if (yych == '+') goto yy33;",
          "",
          "[Removed Lines]",
          "844: #line 845 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "847: #line 848 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "862:  yych = *++YYCURSOR;",
          "863:  if (yych != '{') goto yy18;",
          "864:  ++YYCURSOR;",
          "866:  {",
          "867:  zend_long elements = parse_iv(start + 2);",
          "",
          "[Removed Lines]",
          "865: #line 693 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "868: #line 695 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "884:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "885: }",
          "887: yy39:",
          "888:  yych = *++YYCURSOR;",
          "889:  if (yych == '+') goto yy40;",
          "",
          "[Removed Lines]",
          "886: #line 887 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "889: #line 890 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "904:  yych = *++YYCURSOR;",
          "905:  if (yych != '\"') goto yy18;",
          "906:  ++YYCURSOR;",
          "908:  {",
          "909:  size_t len, maxlen;",
          "910:  zend_string *str;",
          "",
          "[Removed Lines]",
          "907: #line 665 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "910: #line 667 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "932:  ZVAL_STR(rval, str);",
          "933:  return 1;",
          "934: }",
          "936: yy46:",
          "937:  yych = *++YYCURSOR;",
          "938:  if (yych == '+') goto yy47;",
          "",
          "[Removed Lines]",
          "935: #line 936 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "938: #line 939 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "953:  yych = *++YYCURSOR;",
          "954:  if (yych != '\"') goto yy18;",
          "955:  ++YYCURSOR;",
          "957:  {",
          "958:  size_t len, maxlen;",
          "959:  char *str;",
          "",
          "[Removed Lines]",
          "956: #line 638 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "959: #line 640 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "980:  ZVAL_STRINGL(rval, str, len);",
          "981:  return 1;",
          "982: }",
          "984: yy53:",
          "985:  yych = *++YYCURSOR;",
          "986:  if (yych <= '/') {",
          "",
          "[Removed Lines]",
          "983: #line 984 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "986: #line 987 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1068:  }",
          "1069: yy63:",
          "1070:  ++YYCURSOR;",
          "1072:  {",
          "1073: #if SIZEOF_ZEND_LONG == 4",
          "1074: use_double:",
          "",
          "[Removed Lines]",
          "1071: #line 629 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1074: #line 631 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1077:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "1078:  return 1;",
          "1079: }",
          "1081: yy65:",
          "1082:  yych = *++YYCURSOR;",
          "1083:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1080: #line 1081 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1083: #line 1084 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1136:  yych = *++YYCURSOR;",
          "1137:  if (yych != ';') goto yy18;",
          "1138:  ++YYCURSOR;",
          "1140:  {",
          "",
          "[Removed Lines]",
          "1139: #line 613 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1142: #line 615 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1153:  return 1;",
          "1154: }",
          "1156: yy76:",
          "1157:  yych = *++YYCURSOR;",
          "1158:  if (yych == 'N') goto yy73;",
          "",
          "[Removed Lines]",
          "1155: #line 1156 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1158: #line 1159 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1179:  if (yych <= '9') goto yy79;",
          "1180:  if (yych != ';') goto yy18;",
          "1181:  ++YYCURSOR;",
          "1183:  {",
          "1184: #if SIZEOF_ZEND_LONG == 4",
          "1185:  int digits = YYCURSOR - start - 3;",
          "",
          "[Removed Lines]",
          "1182: #line 587 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1185: #line 589 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1205:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1206:  return 1;",
          "1207: }",
          "1209: yy83:",
          "1210:  yych = *++YYCURSOR;",
          "1211:  if (yych <= '/') goto yy18;",
          "",
          "[Removed Lines]",
          "1208: #line 1209 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1211: #line 1212 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1213:  yych = *++YYCURSOR;",
          "1214:  if (yych != ';') goto yy18;",
          "1215:  ++YYCURSOR;",
          "1217:  {",
          "1219:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1220:  return 1;",
          "1221: }",
          "1223: yy87:",
          "1224:  ++YYCURSOR;",
          "1226:  {",
          "1228:  ZVAL_NULL(rval);",
          "1229:  return 1;",
          "1230: }",
          "1232: yy89:",
          "1233:  yych = *++YYCURSOR;",
          "1234:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1216: #line 581 \"ext/standard/var_unserializer.re\"",
          "1222: #line 1223 \"ext/standard/var_unserializer.c\"",
          "1225: #line 575 \"ext/standard/var_unserializer.re\"",
          "1231: #line 1232 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1219: #line 583 \"ext/standard/var_unserializer.re\"",
          "1225: #line 1226 \"ext/standard/var_unserializer.c\"",
          "1228: #line 577 \"ext/standard/var_unserializer.re\"",
          "1234: #line 1235 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1251:  if (yych <= '9') goto yy91;",
          "1252:  if (yych != ';') goto yy18;",
          "1253:  ++YYCURSOR;",
          "1255:  {",
          "1256:  zend_long id;",
          "",
          "[Removed Lines]",
          "1254: #line 552 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1257: #line 554 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1275:  return 1;",
          "1276: }",
          "1278: yy95:",
          "1279:  yych = *++YYCURSOR;",
          "1280:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1277: #line 1278 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1280: #line 1281 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1297:  if (yych <= '9') goto yy97;",
          "1298:  if (yych != ';') goto yy18;",
          "1299:  ++YYCURSOR;",
          "1301:  {",
          "1302:  zend_long id;",
          "",
          "[Removed Lines]",
          "1300: #line 530 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1303: #line 532 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1320:  return 1;",
          "1321: }",
          "1323: }",
          "1327:  return 0;",
          "",
          "[Removed Lines]",
          "1322: #line 1323 \"ext/standard/var_unserializer.c\"",
          "1324: #line 875 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1325: #line 1326 \"ext/standard/var_unserializer.c\"",
          "1327: #line 877 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "398256e5fe098bbc39579a2fd0b3782646cade0c",
      "candidate_info": {
        "commit_hash": "398256e5fe098bbc39579a2fd0b3782646cade0c",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/398256e5fe098bbc39579a2fd0b3782646cade0c",
        "files": [
          "Zend/zend_API.h",
          "ext/standard/filters.c",
          "ext/standard/http.c",
          "ext/standard/password.c",
          "ext/standard/php_var.h",
          "ext/standard/proc_open.c",
          "ext/standard/proc_open.h",
          "ext/standard/streamsfuncs.c",
          "ext/standard/user_filters.c",
          "ext/standard/uuencode.c",
          "ext/standard/var.c",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re",
          "main/streams/php_stream_context.h"
        ],
        "message": "Use better data structures (incomplete)",
        "before_after_code_files": [
          "Zend/zend_API.h||Zend/zend_API.h",
          "ext/standard/filters.c||ext/standard/filters.c",
          "ext/standard/http.c||ext/standard/http.c",
          "ext/standard/password.c||ext/standard/password.c",
          "ext/standard/php_var.h||ext/standard/php_var.h",
          "ext/standard/proc_open.c||ext/standard/proc_open.c",
          "ext/standard/proc_open.h||ext/standard/proc_open.h",
          "ext/standard/streamsfuncs.c||ext/standard/streamsfuncs.c",
          "ext/standard/user_filters.c||ext/standard/user_filters.c",
          "ext/standard/uuencode.c||ext/standard/uuencode.c",
          "ext/standard/var.c||ext/standard/var.c",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re",
          "main/streams/php_stream_context.h||main/streams/php_stream_context.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend_API.h||Zend/zend_API.h": [
          "File: Zend/zend_API.h -> Zend/zend_API.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "604: #define RETVAL_STRING(s)     ZVAL_STRING(return_value, s)",
          "605: #define RETVAL_STRINGL(s, l)    ZVAL_STRINGL(return_value, s, l)",
          "606: #define RETVAL_EMPTY_STRING()    ZVAL_EMPTY_STRING(return_value)",
          "607: #define RETVAL_ZVAL(zv, copy, dtor)  ZVAL_ZVAL(return_value, zv, copy, dtor)",
          "608: #define RETVAL_FALSE       ZVAL_BOOL(return_value, 0)",
          "609: #define RETVAL_TRUE        ZVAL_BOOL(return_value, 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "607: #define RETVAL_RES(r)      ZVAL_RES(return_value, r)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "616: #define RETURN_STRING(s)     { RETVAL_STRING(s); return; }",
          "617: #define RETURN_STRINGL(s, l)    { RETVAL_STRINGL(s, l); return; }",
          "618: #define RETURN_EMPTY_STRING()    { RETVAL_EMPTY_STRING(); return; }",
          "619: #define RETURN_ZVAL(zv, copy, dtor)  { RETVAL_ZVAL(zv, copy, dtor); return; }",
          "620: #define RETURN_FALSE       { RETVAL_FALSE; return; }",
          "621: #define RETURN_TRUE        { RETVAL_TRUE; return; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620: #define RETURN_RES(r)      { RETVAL_RES(r); return; }",
          "",
          "---------------"
        ],
        "ext/standard/filters.c||ext/standard/filters.c": [
          "File: ext/standard/filters.c -> ext/standard/filters.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:  if (filterparams != NULL) {",
          "260:   if (Z_TYPE_P(filterparams) == IS_ARRAY) {",
          "261:    HashPosition pos;",
          "264:    zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(filterparams), &pos);",
          "266:     convert_to_string_ex(tmp);",
          "267:     smart_str_appendc(&tags_ss, '<');",
          "269:     smart_str_appendc(&tags_ss, '>');",
          "270:     zend_hash_move_forward_ex(Z_ARRVAL_P(filterparams), &pos);",
          "271:    }",
          "272:    smart_str_0(&tags_ss);",
          "273:   } else {",
          "277:    tags_ss.c = Z_STRVAL_P(filterparams);",
          "278:    tags_ss.len = Z_STRLEN_P(filterparams);",
          "",
          "[Removed Lines]",
          "262:    zval **tmp;",
          "265:    while (zend_hash_get_current_data_ex(Z_ARRVAL_P(filterparams), (void **) &tmp, &pos) == SUCCESS) {",
          "268:     smart_str_appendl(&tags_ss, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "275:    convert_to_string_ex(&filterparams);",
          "",
          "[Added Lines]",
          "262:    zval *tmp;",
          "265:    while ((tmp = zend_hash_get_current_data_ex(Z_ARRVAL_P(filterparams), &pos)) != NULL) {",
          "268:     smart_str_appendl(&tags_ss, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "275:    convert_to_string_ex(filterparams);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:  if (php_strip_tags_filter_ctor(inst, tags_ss.c, tags_ss.len, persistent) != SUCCESS) {",
          "284:   if (tags_ss.a != 0) {",
          "286:   }",
          "287:   pefree(inst, persistent);",
          "288:   return NULL;",
          "289:  }",
          "291:  if (tags_ss.a != 0) {",
          "293:  }",
          "295:  return php_stream_filter_alloc(&strfilter_strip_tags_ops, inst, persistent);",
          "",
          "[Removed Lines]",
          "285:    STR_FREE(tags_ss.c);",
          "292:   STR_FREE(tags_ss.c);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1221: static php_conv_err_t php_conv_get_string_prop_ex(const HashTable *ht, char **pretval, size_t *pretval_len, char *field_name, size_t field_name_len, int persistent)",
          "1222: {",
          "1232:    convert_to_string(&zt);",
          "1234:    if (NULL == (*pretval = pemalloc(Z_STRLEN(zt) + 1, persistent))) {",
          "",
          "[Removed Lines]",
          "1223:  zval **tmpval;",
          "1228:  if (zend_hash_find((HashTable *)ht, field_name, field_name_len, (void **)&tmpval) == SUCCESS) {",
          "1229:   if (Z_TYPE_PP(tmpval) != IS_STRING) {",
          "1230:    zval zt = **tmpval;",
          "",
          "[Added Lines]",
          "1223:  zval *tmpval;",
          "1228:  if ((tmpval = zend_hash_str_find((HashTable *)ht, field_name, field_name_len-1)) != NULL) {",
          "1229:   if (Z_TYPE_P(tmpval) != IS_STRING) {",
          "1230:    zval zt;",
          "1232:    ZVAL_COPY_VALUE(&zt, tmpval);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1239:    memcpy(*pretval, Z_STRVAL(zt), Z_STRLEN(zt) + 1);",
          "1240:    zval_dtor(&zt);",
          "1241:   } else {",
          "1243:     return PHP_CONV_ERR_ALLOC;",
          "1244:    }",
          "1247:   }",
          "1248:  } else {",
          "1249:   return PHP_CONV_ERR_NOT_FOUND;",
          "",
          "[Removed Lines]",
          "1242:    if (NULL == (*pretval = pemalloc(Z_STRLEN_PP(tmpval) + 1, persistent))) {",
          "1246:    memcpy(*pretval, Z_STRVAL_PP(tmpval), Z_STRLEN_PP(tmpval) + 1);",
          "",
          "[Added Lines]",
          "1243:    if (NULL == (*pretval = pemalloc(Z_STRLEN_P(tmpval) + 1, persistent))) {",
          "1247:    memcpy(*pretval, Z_STRVAL_P(tmpval), Z_STRLEN_P(tmpval) + 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1278: static php_conv_err_t php_conv_get_ulong_prop_ex(const HashTable *ht, unsigned long *pretval, char *field_name, size_t field_name_len)",
          "1279: {",
          "1290:    convert_to_long(&tmp);",
          "1292:   }",
          "1295:   } else {",
          "1297:   }",
          "1298:  } else {",
          "1299:   return PHP_CONV_ERR_NOT_FOUND;",
          "",
          "[Removed Lines]",
          "1280:  zval **tmpval;",
          "1284:  if (zend_hash_find((HashTable *)ht, field_name, field_name_len, (void **)&tmpval) == SUCCESS) {",
          "1285:   zval tmp, *ztval = *tmpval;",
          "1287:   if (Z_TYPE_PP(tmpval) != IS_LONG) {",
          "1288:    tmp = *ztval;",
          "1289:    zval_copy_ctor(&tmp);",
          "1291:    ztval = &tmp;",
          "1293:   if (Z_LVAL_P(ztval) < 0) {",
          "",
          "[Added Lines]",
          "1281:  zval *tmpval;",
          "1285:  if ((tmpval = zend_hash_str_find((HashTable *)ht, field_name, field_name_len-1)) != NULL) {",
          "1286:   zval tmp;",
          "1288:   if (Z_TYPE_P(tmpval) != IS_LONG) {",
          "1289:    ZVAL_DUP(&tmp, tmpval);;",
          "1291:    tmpval = &tmp;",
          "1293:   if (Z_LVAL_P(tmpval) < 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1304: static php_conv_err_t php_conv_get_bool_prop_ex(const HashTable *ht, int *pretval, char *field_name, size_t field_name_len)",
          "1305: {",
          "1315:    zval_copy_ctor(&tmp);",
          "1316:    convert_to_boolean(&tmp);",
          "1318:   }",
          "1320:  } else {",
          "1321:   return PHP_CONV_ERR_NOT_FOUND;",
          "1322:  }",
          "",
          "[Removed Lines]",
          "1306:  zval **tmpval;",
          "1310:  if (zend_hash_find((HashTable *)ht, field_name, field_name_len, (void **)&tmpval) == SUCCESS) {",
          "1311:   zval tmp, *ztval = *tmpval;",
          "1313:   if (Z_TYPE_PP(tmpval) != IS_BOOL) {",
          "1314:    tmp = *ztval;",
          "1317:    ztval = &tmp;",
          "",
          "[Added Lines]",
          "1306:  zval *tmpval;",
          "1310:  if ((tmpval = zend_hash_str_find((HashTable *)ht, field_name, field_name_len-1)) != NULL) {",
          "1311:   zval tmp;",
          "1313:   if (Z_TYPE_P(tmpval) != IS_BOOL) {",
          "1314:    ZVAL_DUP(&tmp, tmpval);",
          "1317:    tmpval = &tmp;",
          "",
          "---------------"
        ],
        "ext/standard/http.c||ext/standard/http.c": [
          "File: ext/standard/http.c -> ext/standard/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     const char *key_suffix, int key_suffix_len,",
          "32:      zval *type, char *arg_sep, int enc_type TSRMLS_DC)",
          "33: {",
          "38:  ulong idx;",
          "41:  if (!ht) {",
          "42:   return FAILURE;",
          "",
          "[Removed Lines]",
          "34:  char *key = NULL;",
          "35:  char *ekey, *newprefix, *p;",
          "36:  int arg_sep_len, ekey_len, key_type, newprefix_len;",
          "37:  uint key_len;",
          "39:  zval **zdata = NULL, *copyzval;",
          "",
          "[Added Lines]",
          "34:  zend_string *key = NULL;",
          "35:  char *ekey, *newprefix, *p, *prop_name;",
          "36:  int arg_sep_len, ekey_len, key_type, newprefix_len, prop_len;",
          "38:  zval *zdata = NULL, copyzval;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:  arg_sep_len = strlen(arg_sep);",
          "58:  for (zend_hash_internal_pointer_reset(ht);",
          "60:   zend_hash_move_forward(ht)",
          "61:  ) {",
          "74:     continue;",
          "75:    }",
          "77:   }",
          "80:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Error traversing form data array\");",
          "81:    return FAILURE;",
          "82:   }",
          "84:    if (key_type == HASH_KEY_IS_STRING) {",
          "85:     if (enc_type == PHP_QUERY_RFC3986) {",
          "87:     } else {",
          "89:     }",
          "90:     newprefix_len = key_suffix_len + ekey_len + key_prefix_len + 3 /* %5B */;",
          "91:     newprefix = emalloc(newprefix_len + 1);",
          "",
          "[Removed Lines]",
          "59:   (key_type = zend_hash_get_current_key_ex(ht, &key, &key_len, &idx, 0, NULL)) != HASH_KEY_NON_EXISTENT;",
          "62:   if (key_type == HASH_KEY_IS_STRING && key_len && key[key_len-1] == '\\0') {",
          "64:    key_len -= 1;",
          "65:   }",
          "68:   if (key && *key == '\\0' && type != NULL) {",
          "69:    const char *tmp;",
          "71:    zend_object *zobj = zend_objects_get_address(type TSRMLS_CC);",
          "72:    if (zend_check_property_access(zobj, key, key_len TSRMLS_CC) != SUCCESS) {",
          "76:    zend_unmangle_property_name_ex(key, key_len, &tmp, (const char**)&key, &key_len);",
          "79:   if (zend_hash_get_current_data_ex(ht, (void **)&zdata, NULL) == FAILURE || !zdata || !(*zdata)) {",
          "83:   if (Z_TYPE_PP(zdata) == IS_ARRAY || Z_TYPE_PP(zdata) == IS_OBJECT) {",
          "86:      ekey = php_raw_url_encode(key, key_len, &ekey_len);",
          "88:      ekey = php_url_encode(key, key_len, &ekey_len);",
          "",
          "[Added Lines]",
          "58:   (key_type = zend_hash_get_current_key_ex(ht, &key, &idx, 0, NULL)) != HASH_KEY_NON_EXISTENT;",
          "62:   prop_name = key->val;",
          "63:   prop_len = key->len;",
          "64:   if (key && key->val[0] == '\\0' && type != NULL) {",
          "65:    const char *tmp, *prop_name;",
          "66:    int prop_len;",
          "68:    zend_object *zobj = Z_OBJ_P(type);",
          "69:    if (zend_check_property_access(zobj, key TSRMLS_CC) != SUCCESS) {",
          "73:    zend_unmangle_property_name_ex(key->val, key->len, &tmp, &prop_name, &prop_len);",
          "76:   if ((zdata = zend_hash_get_current_data_ex(ht, NULL)) == NULL) {",
          "80:   if (Z_TYPE_P(zdata) == IS_ARRAY || Z_TYPE_P(zdata) == IS_OBJECT) {",
          "83:      ekey = php_raw_url_encode(prop_name, prop_len, &ekey_len);",
          "85:      ekey = php_url_encode(prop_name, prop_len, &ekey_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:    }",
          "139:    ht->nApplyCount++;",
          "141:    ht->nApplyCount--;",
          "142:    efree(newprefix);",
          "145:    continue;",
          "146:   } else {",
          "",
          "[Removed Lines]",
          "140:    php_url_encode_hash_ex(HASH_OF(*zdata), formstr, NULL, 0, newprefix, newprefix_len, \"%5D\", 3, (Z_TYPE_PP(zdata) == IS_OBJECT ? *zdata : NULL), arg_sep, enc_type TSRMLS_CC);",
          "143:   } else if (Z_TYPE_PP(zdata) == IS_NULL || Z_TYPE_PP(zdata) == IS_RESOURCE) {",
          "",
          "[Added Lines]",
          "137:    php_url_encode_hash_ex(HASH_OF(zdata), formstr, NULL, 0, newprefix, newprefix_len, \"%5D\", 3, (Z_TYPE_P(zdata) == IS_OBJECT ? zdata : NULL), arg_sep, enc_type TSRMLS_CC);",
          "140:   } else if (Z_TYPE_P(zdata) == IS_NULL || Z_TYPE_P(zdata) == IS_RESOURCE) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "151:    smart_str_appendl(formstr, key_prefix, key_prefix_len);",
          "152:    if (key_type == HASH_KEY_IS_STRING) {",
          "153:     if (enc_type == PHP_QUERY_RFC3986) {",
          "155:     } else {",
          "157:     }",
          "158:     smart_str_appendl(formstr, ekey, ekey_len);",
          "159:     efree(ekey);",
          "",
          "[Removed Lines]",
          "154:      ekey = php_raw_url_encode(key, key_len, &ekey_len);",
          "156:      ekey = php_url_encode(key, key_len, &ekey_len);",
          "",
          "[Added Lines]",
          "151:      ekey = php_raw_url_encode(prop_name, prop_len, &ekey_len);",
          "153:      ekey = php_url_encode(prop_name, prop_len, &ekey_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "168:    }",
          "169:    smart_str_appendl(formstr, key_suffix, key_suffix_len);",
          "170:    smart_str_appendl(formstr, \"=\", 1);",
          "172:     case IS_STRING:",
          "173:      if (enc_type == PHP_QUERY_RFC3986) {",
          "175:      } else {",
          "177:      }",
          "178:      break;",
          "179:     case IS_LONG:",
          "180:     case IS_BOOL:",
          "182:      break;",
          "183:     case IS_DOUBLE:",
          "185:      break;",
          "186:     default:",
          "191:      convert_to_string_ex(&copyzval);",
          "192:      if (enc_type == PHP_QUERY_RFC3986) {",
          "194:      } else {",
          "196:      }",
          "197:      zval_ptr_dtor(&copyzval);",
          "198:    }",
          "",
          "[Removed Lines]",
          "171:    switch (Z_TYPE_PP(zdata)) {",
          "174:       ekey = php_raw_url_encode(Z_STRVAL_PP(zdata), Z_STRLEN_PP(zdata), &ekey_len);",
          "176:       ekey = php_url_encode(Z_STRVAL_PP(zdata), Z_STRLEN_PP(zdata), &ekey_len);",
          "181:      ekey_len = spprintf(&ekey, 0, \"%ld\", Z_LVAL_PP(zdata));",
          "184:      ekey_len = spprintf(&ekey, 0, \"%.*G\", (int) EG(precision), Z_DVAL_PP(zdata));",
          "188:      MAKE_STD_ZVAL(copyzval);",
          "190:      zval_copy_ctor(copyzval);",
          "193:       ekey = php_raw_url_encode(Z_STRVAL_P(copyzval), Z_STRLEN_P(copyzval), &ekey_len);",
          "195:       ekey = php_url_encode(Z_STRVAL_P(copyzval), Z_STRLEN_P(copyzval), &ekey_len);",
          "",
          "[Added Lines]",
          "168:    switch (Z_TYPE_P(zdata)) {",
          "171:       ekey = php_raw_url_encode(Z_STRVAL_P(zdata), Z_STRLEN_P(zdata), &ekey_len);",
          "173:       ekey = php_url_encode(Z_STRVAL_P(zdata), Z_STRLEN_P(zdata), &ekey_len);",
          "178:      ekey_len = spprintf(&ekey, 0, \"%ld\", Z_LVAL_P(zdata));",
          "181:      ekey_len = spprintf(&ekey, 0, \"%.*G\", (int) EG(precision), Z_DVAL_P(zdata));",
          "185:      ZVAL_DUP(&copyzval, zdata);",
          "188:       ekey = php_raw_url_encode(Z_STRVAL(copyzval), Z_STRLEN(copyzval), &ekey_len);",
          "190:       ekey = php_url_encode(Z_STRVAL(copyzval), Z_STRLEN(copyzval), &ekey_len);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "238:  smart_str_0(&formstr);",
          "241: }",
          "",
          "[Removed Lines]",
          "240:  RETURN_STRINGL(formstr.c, formstr.len, 0);",
          "",
          "[Added Lines]",
          "236:  RETURN_STRINGL(formstr.c, formstr.len);",
          "",
          "---------------"
        ],
        "ext/standard/password.c||ext/standard/password.c": [
          "File: ext/standard/password.c -> ext/standard/password.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:  php_password_algo algo;",
          "178:  int hash_len;",
          "179:  char *hash, *algo_name;",
          "182:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &hash, &hash_len) == FAILURE) {",
          "183:   return;",
          "",
          "[Removed Lines]",
          "180:  zval *options;",
          "",
          "[Added Lines]",
          "180:  zval options;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:   RETURN_FALSE;",
          "189:  }",
          "194:  algo = php_password_determine_algo(hash, (size_t) hash_len);",
          "195:  algo_name = php_password_get_algo_name(algo);",
          "",
          "[Removed Lines]",
          "191:  ALLOC_INIT_ZVAL(options);",
          "192:  array_init(options);",
          "",
          "[Added Lines]",
          "191:  array_init(&options);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:    {",
          "200:     long cost = PHP_PASSWORD_BCRYPT_COST;",
          "201:     sscanf(hash, \"$2y$%ld$\", &cost);",
          "203:    }",
          "204:    break;",
          "205:   case PHP_PASSWORD_UNKNOWN:",
          "",
          "[Removed Lines]",
          "202:     add_assoc_long(options, \"cost\", cost);",
          "",
          "[Added Lines]",
          "201:     add_assoc_long(&options, \"cost\", cost);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:  add_assoc_long(return_value, \"algo\", algo);",
          "213:  add_assoc_string(return_value, \"algoName\", algo_name, 1);",
          "215: }",
          "217: PHP_FUNCTION(password_needs_rehash)",
          "",
          "[Removed Lines]",
          "214:  add_assoc_zval(return_value, \"options\", options);",
          "",
          "[Added Lines]",
          "213:  add_assoc_zval(return_value, \"options\", &options);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "221:  int hash_len;",
          "222:  char *hash;",
          "223:  HashTable *options = 0;",
          "226:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sl|H\", &hash, &hash_len, &new_algo, &options) == FAILURE) {",
          "227:   return;",
          "",
          "[Removed Lines]",
          "224:  zval **option_buffer;",
          "",
          "[Added Lines]",
          "223:  zval *option_buffer;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "243:    {",
          "244:     long new_cost = PHP_PASSWORD_BCRYPT_COST, cost = 0;",
          "248:       zval cast_option_buffer;",
          "250:       convert_to_long(&cast_option_buffer);",
          "251:       new_cost = Z_LVAL(cast_option_buffer);",
          "252:       zval_dtor(&cast_option_buffer);",
          "253:      } else {",
          "255:      }",
          "256:     }",
          "",
          "[Removed Lines]",
          "246:     if (options && zend_symtable_find(options, \"cost\", sizeof(\"cost\"), (void **) &option_buffer) == SUCCESS) {",
          "247:      if (Z_TYPE_PP(option_buffer) != IS_LONG) {",
          "249:       MAKE_COPY_ZVAL(option_buffer, &cast_option_buffer);",
          "254:       new_cost = Z_LVAL_PP(option_buffer);",
          "",
          "[Added Lines]",
          "245:     if (options && (option_buffer = zend_symtable_str_find(options, \"cost\", sizeof(\"cost\")-1)) != NULL) {",
          "246:      if (Z_TYPE_P(option_buffer) != IS_LONG) {",
          "248:       ZVAL_DUP(&cast_option_buffer, option_buffer);",
          "253:       new_cost = Z_LVAL_P(option_buffer);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "312:  int password_len = 0, hash_len;",
          "313:  size_t salt_len = 0, required_salt_len = 0, hash_format_len;",
          "314:  HashTable *options = 0;",
          "317:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sl|H\", &password, &password_len, &algo, &options) == FAILURE) {",
          "318:   return;",
          "",
          "[Removed Lines]",
          "315:  zval **option_buffer;",
          "",
          "[Added Lines]",
          "314:  zval *option_buffer;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "323:   {",
          "324:    long cost = PHP_PASSWORD_BCRYPT_COST;",
          "328:      zval cast_option_buffer;",
          "330:      convert_to_long(&cast_option_buffer);",
          "331:      cost = Z_LVAL(cast_option_buffer);",
          "332:      zval_dtor(&cast_option_buffer);",
          "333:     } else {",
          "335:     }",
          "336:    }",
          "",
          "[Removed Lines]",
          "326:    if (options && zend_symtable_find(options, \"cost\", 5, (void **) &option_buffer) == SUCCESS) {",
          "327:     if (Z_TYPE_PP(option_buffer) != IS_LONG) {",
          "329:      MAKE_COPY_ZVAL(option_buffer, &cast_option_buffer);",
          "334:      cost = Z_LVAL_PP(option_buffer);",
          "",
          "[Added Lines]",
          "325:    if (options && (option_buffer = zend_symtable_str_find(options, \"cost\", sizeof(\"cost\")-1)) != NULL) {",
          "326:     if (Z_TYPE_P(option_buffer) != IS_LONG) {",
          "328:      ZVAL_DUP(&cast_option_buffer, option_buffer);",
          "333:      cost = Z_LVAL_P(option_buffer);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "352:    RETURN_NULL();",
          "353:  }",
          "356:   char *buffer;",
          "357:   int buffer_len_int = 0;",
          "358:   size_t buffer_len;",
          "360:    case IS_STRING:",
          "363:     break;",
          "364:    case IS_LONG:",
          "365:    case IS_DOUBLE:",
          "366:    case IS_OBJECT: {",
          "367:     zval cast_option_buffer;",
          "369:     convert_to_string(&cast_option_buffer);",
          "370:     if (Z_TYPE(cast_option_buffer) == IS_STRING) {",
          "371:      buffer = estrndup(Z_STRVAL(cast_option_buffer), Z_STRLEN(cast_option_buffer));",
          "",
          "[Removed Lines]",
          "355:  if (options && zend_symtable_find(options, \"salt\", 5, (void**) &option_buffer) == SUCCESS) {",
          "359:   switch (Z_TYPE_PP(option_buffer)) {",
          "361:     buffer = estrndup(Z_STRVAL_PP(option_buffer), Z_STRLEN_PP(option_buffer));",
          "362:     buffer_len_int = Z_STRLEN_PP(option_buffer);",
          "368:     MAKE_COPY_ZVAL(option_buffer, &cast_option_buffer);",
          "",
          "[Added Lines]",
          "354:  if (options && (option_buffer = zend_symtable_str_find(options, \"salt\", sizeof(\"salt\")-1)) != NULL) {",
          "358:   switch (Z_TYPE_P(option_buffer)) {",
          "360:     buffer = estrndup(Z_STRVAL_P(option_buffer), Z_STRLEN_P(option_buffer));",
          "361:     buffer_len_int = Z_STRLEN_P(option_buffer);",
          "368:     ZVAL_DUP(&cast_option_buffer, option_buffer);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "445:   RETURN_FALSE;",
          "446:  }",
          "449: }",
          "",
          "[Removed Lines]",
          "448:  RETURN_STRING(result, 0);",
          "",
          "[Added Lines]",
          "449:  RETURN_STRING(result);",
          "",
          "---------------"
        ],
        "ext/standard/php_var.h||ext/standard/php_var.h": [
          "File: ext/standard/php_var.h -> ext/standard/php_var.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: typedef struct php_unserialize_data* php_unserialize_data_t;",
          "55: #define PHP_VAR_SERIALIZE_INIT(var_hash_ptr) \\",
          "56: do  { \\",
          "",
          "[Removed Lines]",
          "52: PHPAPI void php_var_serialize(smart_str *buf, zval **struc, php_serialize_data_t *var_hash TSRMLS_DC);",
          "53: PHPAPI int php_var_unserialize(zval **rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash TSRMLS_DC);",
          "",
          "[Added Lines]",
          "52: PHPAPI void php_var_serialize(smart_str *buf, zval *struc, php_serialize_data_t *var_hash TSRMLS_DC);",
          "53: PHPAPI int php_var_unserialize(zval *rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash TSRMLS_DC);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:  } \\",
          "114: } while (0)",
          "119: PHPAPI void var_destroy(php_unserialize_data_t *var_hash);",
          "121: #define PHP_VAR_UNSERIALIZE_ZVAL_CHANGED(var_hash, ozval, nzval) \\",
          "",
          "[Removed Lines]",
          "116: PHPAPI void var_replace(php_unserialize_data_t *var_hash, zval *ozval, zval **nzval);",
          "117: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hash, zval **val);",
          "118: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval **rval);",
          "",
          "[Added Lines]",
          "116: PHPAPI void var_replace(php_unserialize_data_t *var_hash, zval *ozval, zval *nzval);",
          "117: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hash, zval *val);",
          "118: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval *rval);",
          "",
          "---------------"
        ],
        "ext/standard/proc_open.c||ext/standard/proc_open.c": [
          "File: ext/standard/proc_open.c -> ext/standard/proc_open.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: static php_process_env_t _php_array_to_envp(zval *environment, int is_persistent TSRMLS_DC)",
          "76: {",
          "78:  php_process_env_t env;",
          "80: #ifndef PHP_WIN32",
          "81:  char **ep;",
          "82: #endif",
          "83:  char *p;",
          "85:  ulong num_key;",
          "86:  HashTable *target_hash;",
          "87:  HashPosition pos;",
          "",
          "[Removed Lines]",
          "77:  zval **element;",
          "79:  char *string_key, *data;",
          "84:  uint string_length, cnt, l, sizeenv=0, el_len;",
          "",
          "[Added Lines]",
          "77:  zval *element;",
          "79:  zend_string *string_key;",
          "80:  char *data;",
          "85:  uint cnt, l, sizeenv=0, el_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:  for (zend_hash_internal_pointer_reset_ex(target_hash, &pos);",
          "113:    zend_hash_move_forward_ex(target_hash, &pos)) {",
          "115:   convert_to_string_ex(element);",
          "117:   if (el_len == 0) {",
          "118:    continue;",
          "119:   }",
          "121:   sizeenv += el_len+1;",
          "124:    case HASH_KEY_IS_STRING:",
          "126:      continue;",
          "127:     }",
          "129:     break;",
          "130:   }",
          "131:  }",
          "",
          "[Removed Lines]",
          "112:    zend_hash_get_current_data_ex(target_hash, (void **) &element, &pos) == SUCCESS;",
          "116:   el_len = Z_STRLEN_PP(element);",
          "123:   switch (zend_hash_get_current_key_ex(target_hash, &string_key, &string_length, &num_key, 0, &pos)) {",
          "125:     if (string_length == 0) {",
          "128:     sizeenv += string_length+1;",
          "",
          "[Added Lines]",
          "113:    (element = zend_hash_get_current_data_ex(target_hash, &pos)) != NULL;",
          "117:   el_len = Z_STRLEN_P(element);",
          "124:   switch (zend_hash_get_current_key_ex(target_hash, &string_key, &num_key, 0, &pos)) {",
          "126:     if (string_key->len == 0) {",
          "129:     sizeenv += string_key->len + 2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:  p = env.envp = (char *) pecalloc(sizeenv + 4, 1, is_persistent);",
          "138:  for (zend_hash_internal_pointer_reset_ex(target_hash, &pos);",
          "140:    zend_hash_move_forward_ex(target_hash, &pos)) {",
          "142:   convert_to_string_ex(element);",
          "145:   if (el_len == 0) {",
          "146:    continue;",
          "147:   }",
          "151:    case HASH_KEY_IS_STRING:",
          "153:      continue;",
          "154:     }",
          "158:     strncat(p, \"=\", 1);",
          "159:     strncat(p, data, el_len);",
          "",
          "[Removed Lines]",
          "139:    zend_hash_get_current_data_ex(target_hash, (void **) &element, &pos) == SUCCESS;",
          "143:   el_len = Z_STRLEN_PP(element);",
          "149:   data = Z_STRVAL_PP(element);",
          "150:   switch (zend_hash_get_current_key_ex(target_hash, &string_key, &string_length, &num_key, 0, &pos)) {",
          "152:     if (string_length == 0) {",
          "156:     l = string_length + el_len + 1;",
          "157:     memcpy(p, string_key, string_length);",
          "",
          "[Added Lines]",
          "140:    (element = zend_hash_get_current_data_ex(target_hash, &pos)) != NULL;",
          "144:   el_len = Z_STRLEN_P(element);",
          "150:   data = Z_STRVAL_P(element);",
          "151:   switch (zend_hash_get_current_key_ex(target_hash, &string_key, &num_key, 0, &pos)) {",
          "153:     if (string_key->len == 0) {",
          "157:     l = string_key->len + el_len + 2;",
          "158:     memcpy(p, string_key->val, string_key->len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "204: {",
          "205:  struct php_process_handle *proc = (struct php_process_handle*)rsrc->ptr;",
          "206:  int i;",
          "",
          "[Removed Lines]",
          "203: static void proc_open_rsrc_dtor(zend_rsrc_list_entry *rsrc TSRMLS_DC)",
          "",
          "[Added Lines]",
          "204: static void proc_open_rsrc_dtor(zend_resource *rsrc TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "279:   RETURN_FALSE;",
          "280:  }",
          "284: #ifdef PHP_WIN32",
          "285:  if (TerminateProcess(proc->childHandle, 255)) {",
          "",
          "[Removed Lines]",
          "282:  ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, &zproc, -1, \"process\", le_proc_open);",
          "",
          "[Added Lines]",
          "283:  ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, zproc, -1, \"process\", le_proc_open);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "308:   RETURN_FALSE;",
          "309:  }",
          "313:  FG(pclose_wait) = 1;",
          "315:  FG(pclose_wait) = 0;",
          "316:  RETURN_LONG(FG(pclose_ret));",
          "317: }",
          "",
          "[Removed Lines]",
          "311:  ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, &zproc, -1, \"process\", le_proc_open);",
          "314:  zend_list_delete(Z_LVAL_P(zproc));",
          "",
          "[Added Lines]",
          "312:  ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, zproc, -1, \"process\", le_proc_open);",
          "315:  zend_list_delete(Z_RES_P(zproc));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "336:   RETURN_FALSE;",
          "337:  }",
          "341:  array_init(return_value);",
          "",
          "[Removed Lines]",
          "339:  ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, &zproc, -1, \"process\", le_proc_open);",
          "",
          "[Added Lines]",
          "340:  ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, zproc, -1, \"process\", le_proc_open);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "438:  php_process_env_t env;",
          "439:  int ndesc = 0;",
          "440:  int i;",
          "442:  HashPosition pos;",
          "443:  struct php_proc_open_descriptor_item descriptors[PHP_PROC_OPEN_MAX_DESCRIPTORS];",
          "444: #ifdef PHP_WIN32",
          "",
          "[Removed Lines]",
          "441:  zval **descitem = NULL;",
          "",
          "[Added Lines]",
          "442:  zval *descitem = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "519:  zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(descriptorspec), &pos);",
          "522:   ulong nindex;",
          "525:   str_index = NULL;",
          "528:   if (str_index) {",
          "529:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"descriptor spec must be an integer indexed array\");",
          "",
          "[Removed Lines]",
          "520:  while (zend_hash_get_current_data_ex(Z_ARRVAL_P(descriptorspec), (void **)&descitem, &pos) == SUCCESS) {",
          "521:   char *str_index;",
          "523:   zval **ztype;",
          "526:   zend_hash_get_current_key_ex(Z_ARRVAL_P(descriptorspec), &str_index, NULL, &nindex, 0, &pos);",
          "",
          "[Added Lines]",
          "521:  while ((descitem = zend_hash_get_current_data_ex(Z_ARRVAL_P(descriptorspec), &pos)) != NULL) {",
          "522:   zend_string *str_index;",
          "524:   zval *ztype;",
          "527:   zend_hash_get_current_key_ex(Z_ARRVAL_P(descriptorspec), &str_index, &nindex, 0, &pos);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "533:   descriptors[ndesc].index = nindex;",
          "537:    php_stream *stream;",
          "538:    int fd;",
          "",
          "[Removed Lines]",
          "535:   if (Z_TYPE_PP(descitem) == IS_RESOURCE) {",
          "",
          "[Added Lines]",
          "536:   if (Z_TYPE_P(descitem) == IS_RESOURCE) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "558: #endif",
          "559:    descriptors[ndesc].mode = DESC_FILE;",
          "562:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Descriptor item must be either an array or a File-Handle\");",
          "563:    goto exit_fail;",
          "564:   } else {",
          "567:     convert_to_string_ex(ztype);",
          "568:    } else {",
          "569:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing handle qualifier in array\");",
          "570:     goto exit_fail;",
          "571:    }",
          "574:     php_file_descriptor_t newpipe[2];",
          "578:      convert_to_string_ex(zmode);",
          "579:     } else {",
          "580:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing mode parameter for 'pipe'\");",
          "",
          "[Removed Lines]",
          "561:   } else if (Z_TYPE_PP(descitem) != IS_ARRAY) {",
          "566:    if (zend_hash_index_find(Z_ARRVAL_PP(descitem), 0, (void **)&ztype) == SUCCESS) {",
          "573:    if (strcmp(Z_STRVAL_PP(ztype), \"pipe\") == 0) {",
          "575:     zval **zmode;",
          "577:     if (zend_hash_index_find(Z_ARRVAL_PP(descitem), 1, (void **)&zmode) == SUCCESS) {",
          "",
          "[Added Lines]",
          "562:   } else if (Z_TYPE_P(descitem) != IS_ARRAY) {",
          "567:    if ((ztype = zend_hash_index_find(Z_ARRVAL_P(descitem), 0)) != NULL) {",
          "574:    if (strcmp(Z_STRVAL_P(ztype), \"pipe\") == 0) {",
          "576:     zval *zmode;",
          "578:     if ((zmode = zend_hash_index_find(Z_ARRVAL_P(descitem), 1)) != NULL) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "588:      goto exit_fail;",
          "589:     }",
          "592:      descriptors[ndesc].parentend = newpipe[1];",
          "593:      descriptors[ndesc].childend = newpipe[0];",
          "594:      descriptors[ndesc].mode |= DESC_PARENT_MODE_WRITE;",
          "",
          "[Removed Lines]",
          "591:     if (strncmp(Z_STRVAL_PP(zmode), \"w\", 1) != 0) {",
          "",
          "[Added Lines]",
          "592:     if (strncmp(Z_STRVAL_P(zmode), \"w\", 1) != 0) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "602: #endif",
          "603:     descriptors[ndesc].mode_flags = descriptors[ndesc].mode & DESC_PARENT_MODE_WRITE ? O_WRONLY : O_RDONLY;",
          "604: #ifdef PHP_WIN32",
          "606:      descriptors[ndesc].mode_flags |= O_BINARY;",
          "607: #endif",
          "611:     int fd;",
          "612:     php_stream *stream;",
          "614:     descriptors[ndesc].mode = DESC_FILE;",
          "617:      convert_to_string_ex(zfile);",
          "618:     } else {",
          "619:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing file name parameter for 'file'\");",
          "620:      goto exit_fail;",
          "621:     }",
          "624:      convert_to_string_ex(zmode);",
          "625:     } else {",
          "626:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing mode parameter for 'file'\");",
          "",
          "[Removed Lines]",
          "605:     if (Z_STRLEN_PP(zmode) >= 2 && Z_STRVAL_PP(zmode)[1] == 'b')",
          "609:    } else if (strcmp(Z_STRVAL_PP(ztype), \"file\") == 0) {",
          "610:     zval **zfile, **zmode;",
          "616:     if (zend_hash_index_find(Z_ARRVAL_PP(descitem), 1, (void **)&zfile) == SUCCESS) {",
          "623:     if (zend_hash_index_find(Z_ARRVAL_PP(descitem), 2, (void **)&zmode) == SUCCESS) {",
          "",
          "[Added Lines]",
          "606:     if (Z_STRLEN_P(zmode) >= 2 && Z_STRVAL_P(zmode)[1] == 'b')",
          "610:    } else if (strcmp(Z_STRVAL_P(ztype), \"file\") == 0) {",
          "611:     zval *zfile, *zmode;",
          "617:     if ((zfile = zend_hash_index_find(Z_ARRVAL_P(descitem), 1)) != NULL) {",
          "624:     if ((zmode = zend_hash_index_find(Z_ARRVAL_P(descitem), 2)) != NULL) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "628:     }",
          "632:       REPORT_ERRORS|STREAM_WILL_CAST, NULL);",
          "",
          "[Removed Lines]",
          "631:     stream = php_stream_open_wrapper(Z_STRVAL_PP(zfile), Z_STRVAL_PP(zmode),",
          "",
          "[Added Lines]",
          "632:     stream = php_stream_open_wrapper(Z_STRVAL_P(zfile), Z_STRVAL_P(zmode),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "650: #else",
          "651:     descriptors[ndesc].childend = fd;",
          "652: #endif",
          "654: #if PHP_CAN_DO_PTS",
          "655:     if (dev_ptmx == -1) {",
          "",
          "[Removed Lines]",
          "653:    } else if (strcmp(Z_STRVAL_PP(ztype), \"pty\") == 0) {",
          "",
          "[Added Lines]",
          "654:    } else if (strcmp(Z_STRVAL_P(ztype), \"pty\") == 0) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "677:     goto exit_fail;",
          "678: #endif",
          "679:    } else {",
          "681:     goto exit_fail;",
          "682:    }",
          "683:   }",
          "",
          "[Removed Lines]",
          "680:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"%s is not a valid descriptor spec/mode\", Z_STRVAL_PP(ztype));",
          "",
          "[Added Lines]",
          "681:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"%s is not a valid descriptor spec/mode\", Z_STRVAL_P(ztype));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "947: # endif",
          "948: #endif",
          "949:     if (stream) {",
          "953:      stream->flags |= PHP_STREAM_FLAG_NO_SEEK;",
          "960:     }",
          "961:     break;",
          "962:    default:",
          "964:   }",
          "965:  }",
          "",
          "[Removed Lines]",
          "950:      zval *retfp;",
          "955:      MAKE_STD_ZVAL(retfp);",
          "956:      php_stream_to_zval(stream, retfp);",
          "957:      add_index_zval(pipes, descriptors[i].index, retfp);",
          "959:      proc->pipes[i] = Z_LVAL_P(retfp);",
          "963:     proc->pipes[i] = 0;",
          "",
          "[Added Lines]",
          "951:      zval retfp;",
          "956:      php_stream_to_zval(stream, &retfp);",
          "957:      add_index_zval(pipes, descriptors[i].index, &retfp);",
          "959:      proc->pipes[i] = Z_RES_P(&retfp);",
          "963:     proc->pipes[i] = NULL;",
          "",
          "---------------"
        ],
        "ext/standard/proc_open.h||ext/standard/proc_open.h": [
          "File: ext/standard/proc_open.h -> ext/standard/proc_open.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  HANDLE childHandle;",
          "45: #endif",
          "46:  int npipes;",
          "48:  char *command;",
          "49:  int is_persistent;",
          "50:  php_process_env_t env;",
          "",
          "[Removed Lines]",
          "47:  long pipes[PHP_PROC_OPEN_MAX_DESCRIPTORS];",
          "",
          "[Added Lines]",
          "47:  zend_resource *pipes[PHP_PROC_OPEN_MAX_DESCRIPTORS];",
          "",
          "---------------"
        ],
        "ext/standard/streamsfuncs.c||ext/standard/streamsfuncs.c": [
          "File: ext/standard/streamsfuncs.c -> ext/standard/streamsfuncs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:  php_stream_auto_cleanup(s1);",
          "76:  php_stream_auto_cleanup(s2);",
          "80: }",
          "82: #endif",
          "",
          "[Removed Lines]",
          "78:  add_next_index_resource(return_value, php_stream_get_resource_id(s1));",
          "79:  add_next_index_resource(return_value, php_stream_get_resource_id(s2));",
          "",
          "[Added Lines]",
          "78:  add_next_index_resource(return_value, s1->res);",
          "79:  add_next_index_resource(return_value, s2->res);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:  }",
          "126:  if (zerrstr) {",
          "127:   zval_dtor(zerrstr);",
          "129:  }",
          "131:  stream = php_stream_xport_create(host, host_len, REPORT_ERRORS,",
          "",
          "[Removed Lines]",
          "128:   ZVAL_STRING(zerrstr, \"\", 1);",
          "",
          "[Added Lines]",
          "128:   ZVAL_EMPTY_STRING(zerrstr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:   if (zerrstr && errstr) {",
          "156:    zval_dtor(zerrstr);",
          "158:   } else if (errstr) {",
          "159:    efree(errstr);",
          "160:   }",
          "",
          "[Removed Lines]",
          "157:    ZVAL_STRING(zerrstr, errstr, 0);",
          "",
          "[Added Lines]",
          "158:    ZVAL_STRING(zerrstr, errstr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "192:  context = php_stream_context_from_zval(zcontext, flags & PHP_FILE_NO_DEFAULT_CONTEXT);",
          "194:  if (context) {",
          "196:  }",
          "198:  if (zerrno) {",
          "",
          "[Removed Lines]",
          "195:   zend_list_addref(context->rsrc_id);",
          "",
          "[Added Lines]",
          "196:   context->res->gc.refcount++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "201:  }",
          "202:  if (zerrstr) {",
          "203:   zval_dtor(zerrstr);",
          "205:  }",
          "207:  stream = php_stream_xport_create(host, host_len, REPORT_ERRORS,",
          "",
          "[Removed Lines]",
          "204:   ZVAL_STRING(zerrstr, \"\", 1);",
          "",
          "[Added Lines]",
          "205:   ZVAL_EMPTY_STRING(zerrstr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "220:   if (zerrstr && errstr) {",
          "222:    zval_dtor(zerrstr);",
          "224:   } else if (errstr) {",
          "225:    efree(errstr);",
          "226:   }",
          "",
          "[Removed Lines]",
          "223:    ZVAL_STRING(zerrstr, errstr, 0);",
          "",
          "[Added Lines]",
          "225:    ZVAL_STRING(zerrstr, errstr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "254:   RETURN_FALSE;",
          "255:  }",
          "260:  conv = (php_timeout_ull) (timeout * 1000000.0);",
          "",
          "[Removed Lines]",
          "257:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "259:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "278:     TSRMLS_CC) && clistream) {",
          "280:   if (peername) {",
          "282:   }",
          "283:   php_stream_to_zval(clistream, return_value);",
          "284:  } else {",
          "",
          "[Removed Lines]",
          "281:    ZVAL_STRINGL(zpeername, peername, peername_len, 0);",
          "",
          "[Added Lines]",
          "284:    ZVAL_STRINGL(zpeername, peername, peername_len);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "306:   RETURN_FALSE;",
          "307:  }",
          "311:  if (0 != php_stream_xport_get_name(stream, want_peer,",
          "312:     &name,",
          "",
          "[Removed Lines]",
          "309:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "312:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "316:   RETURN_FALSE;",
          "317:  }",
          "320: }",
          "",
          "[Removed Lines]",
          "319:  RETURN_STRINGL(name, name_len, 0);",
          "",
          "[Added Lines]",
          "323:  RETURN_STRINGL(name, name_len);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "335:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"rs|ls\", &zstream, &data, &datalen, &flags, &target_addr, &target_addr_len) == FAILURE) {",
          "336:   RETURN_FALSE;",
          "337:  }",
          "340:  if (target_addr_len) {",
          "",
          "[Removed Lines]",
          "338:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "342:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "358:  char *remote_addr = NULL;",
          "359:  int remote_addr_len;",
          "360:  long to_read = 0;",
          "362:  long flags = 0;",
          "363:  int recvd;",
          "",
          "[Removed Lines]",
          "361:  char *read_buf;",
          "",
          "[Added Lines]",
          "365:  zend_string *read_buf;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "366:   RETURN_FALSE;",
          "367:  }",
          "371:  if (zremote) {",
          "372:   zval_dtor(zremote);",
          "",
          "[Removed Lines]",
          "369:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "373:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "378:   RETURN_FALSE;",
          "379:  }",
          "384:    zremote ? &remote_addr : NULL,",
          "385:    zremote ? &remote_addr_len : NULL",
          "386:    TSRMLS_CC);",
          "388:  if (recvd >= 0) {",
          "389:   if (zremote) {",
          "391:   }",
          "395:  }",
          "398:  RETURN_FALSE;",
          "399: }",
          "",
          "[Removed Lines]",
          "381:  read_buf = safe_emalloc(1, to_read, 1);",
          "383:  recvd = php_stream_xport_recvfrom(stream, read_buf, to_read, flags, NULL, NULL,",
          "390:    ZVAL_STRINGL(zremote, remote_addr, remote_addr_len, 0);",
          "392:   read_buf[recvd] = '\\0';",
          "394:   RETURN_STRINGL(read_buf, recvd, 0);",
          "397:  efree(read_buf);",
          "",
          "[Added Lines]",
          "385:  read_buf = STR_ALLOC(to_read, 0);",
          "387:  recvd = php_stream_xport_recvfrom(stream, read_buf->val, to_read, flags, NULL, NULL,",
          "395:    ZVAL_STRINGL(zremote, remote_addr, remote_addr_len);",
          "397:   read_buf->val[recvd] = '\\0';",
          "398:   read_buf->len = recvd;",
          "399:   RETURN_STR(read_buf);",
          "402:  STR_FREE(read_buf);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "414:   RETURN_FALSE;",
          "415:  }",
          "419:  if (desiredpos >= 0) {",
          "420:   int  seek_res = 0;",
          "",
          "[Removed Lines]",
          "417:  php_stream_from_zval(stream, &zsrc);",
          "",
          "[Added Lines]",
          "422:  php_stream_from_zval(stream, zsrc);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "439:  len = php_stream_copy_to_mem(stream, &contents, maxlen, 0);",
          "441:  if (contents) {",
          "443:  } else {",
          "444:   RETVAL_EMPTY_STRING();",
          "445:  }",
          "",
          "[Removed Lines]",
          "442:   RETVAL_STRINGL(contents, len, 0);",
          "",
          "[Added Lines]",
          "448:   RETVAL_STRINGL(contents, len);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "460:   RETURN_FALSE;",
          "461:  }",
          "466:  if (pos > 0 && php_stream_seek(src, pos, SEEK_SET) < 0) {",
          "467:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Failed to seek to position %ld in the stream\", pos);",
          "",
          "[Removed Lines]",
          "463:  php_stream_from_zval(src, &zsrc);",
          "464:  php_stream_from_zval(dest, &zdest);",
          "",
          "[Added Lines]",
          "469:  php_stream_from_zval(src, zsrc);",
          "470:  php_stream_from_zval(dest, zdest);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "483: {",
          "484:  zval *arg1;",
          "485:  php_stream *stream;",
          "488:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r\", &arg1) == FAILURE) {",
          "489:   return;",
          "490:  }",
          "493:  array_init(return_value);",
          "500:  }",
          "501:  if (stream->wrapper) {",
          "502:   add_assoc_string(return_value, \"wrapper_type\", (char *)stream->wrapper->wops->label, 1);",
          "",
          "[Removed Lines]",
          "486:  zval *newval;",
          "491:  php_stream_from_zval(stream, &arg1);",
          "495:  if (stream->wrapperdata) {",
          "496:   MAKE_STD_ZVAL(newval);",
          "497:   MAKE_COPY_ZVAL(&stream->wrapperdata, newval);",
          "499:   add_assoc_zval(return_value, \"wrapper_data\", newval);",
          "",
          "[Added Lines]",
          "496:  php_stream_from_zval(stream, arg1);",
          "500:  if (Z_TYPE(stream->wrapperdata) != IS_NULL) {",
          "501:   add_assoc_zval(return_value, \"wrapper_data\", &stream->wrapperdata);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "541: PHP_FUNCTION(stream_get_transports)",
          "542: {",
          "543:  HashTable *stream_xport_hash;",
          "546:  ulong num_key;",
          "548:  if (zend_parse_parameters_none() == FAILURE) {",
          "",
          "[Removed Lines]",
          "544:  char *stream_xport;",
          "545:  uint stream_xport_len;",
          "",
          "[Added Lines]",
          "546:  zend_string *stream_xport;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "554:   array_init(return_value);",
          "555:   zend_hash_internal_pointer_reset_ex(stream_xport_hash, &pos);",
          "556:   while (zend_hash_get_current_key_ex(stream_xport_hash,",
          "560:    zend_hash_move_forward_ex(stream_xport_hash, &pos);",
          "561:   }",
          "562:  } else {",
          "",
          "[Removed Lines]",
          "557:      &stream_xport, &stream_xport_len,",
          "558:      &num_key, 0, &pos) == HASH_KEY_IS_STRING) {",
          "559:    add_next_index_stringl(return_value, stream_xport, stream_xport_len - 1, 1);",
          "",
          "[Added Lines]",
          "558:      &stream_xport, &num_key, 0, &pos) == HASH_KEY_IS_STRING) {",
          "560:    add_next_index_stringl(return_value, stream_xport->val, stream_xport->len, 1);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "570: PHP_FUNCTION(stream_get_wrappers)",
          "571: {",
          "572:  HashTable *url_stream_wrappers_hash;",
          "574:  int key_flags;",
          "576:  ulong num_key;",
          "578:  if (zend_parse_parameters_none() == FAILURE) {",
          "",
          "[Removed Lines]",
          "573:  char *stream_protocol;",
          "575:  uint stream_protocol_len = 0;",
          "",
          "[Added Lines]",
          "574:  zend_string *stream_protocol;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "583:   HashPosition pos;",
          "584:   array_init(return_value);",
          "585:   for (zend_hash_internal_pointer_reset_ex(url_stream_wrappers_hash, &pos);",
          "587:    zend_hash_move_forward_ex(url_stream_wrappers_hash, &pos)) {",
          "588:     if (key_flags == HASH_KEY_IS_STRING) {",
          "590:     }",
          "591:   }",
          "592:  } else {",
          "",
          "[Removed Lines]",
          "586:    (key_flags = zend_hash_get_current_key_ex(url_stream_wrappers_hash, &stream_protocol, &stream_protocol_len, &num_key, 0, &pos)) != HASH_KEY_NON_EXISTENT;",
          "589:      add_next_index_stringl(return_value, stream_protocol, stream_protocol_len - 1, 1);",
          "",
          "[Added Lines]",
          "586:    (key_flags = zend_hash_get_current_key_ex(url_stream_wrappers_hash, &stream_protocol, &num_key, 0, &pos)) != HASH_KEY_NON_EXISTENT;",
          "590:      add_next_index_stringl(return_value, stream_protocol->val, stream_protocol->len, 1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "600: static int stream_array_to_fd_set(zval *stream_array, fd_set *fds, php_socket_t *max_fd TSRMLS_DC)",
          "601: {",
          "603:  php_stream *stream;",
          "604:  int cnt = 0;",
          "",
          "[Removed Lines]",
          "602:  zval **elem;",
          "",
          "[Added Lines]",
          "603:  zval *elem;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "607:   return 0;",
          "608:  }",
          "609:  for (zend_hash_internal_pointer_reset(Z_ARRVAL_P(stream_array));",
          "611:    zend_hash_move_forward(Z_ARRVAL_P(stream_array))) {",
          "",
          "[Removed Lines]",
          "610:    zend_hash_get_current_data(Z_ARRVAL_P(stream_array), (void **) &elem) == SUCCESS;",
          "",
          "[Added Lines]",
          "611:    (elem = zend_hash_get_current_data(Z_ARRVAL_P(stream_array))) != NULL;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "642: static int stream_array_from_fd_set(zval *stream_array, fd_set *fds TSRMLS_DC)",
          "643: {",
          "645:  php_stream *stream;",
          "647:  int ret = 0;",
          "649:  if (Z_TYPE_P(stream_array) != IS_ARRAY) {",
          "650:   return 0;",
          "651:  }",
          "655:  for (zend_hash_internal_pointer_reset(Z_ARRVAL_P(stream_array));",
          "656:    zend_hash_has_more_elements(Z_ARRVAL_P(stream_array)) == SUCCESS;",
          "657:    zend_hash_move_forward(Z_ARRVAL_P(stream_array))) {",
          "659:   int type;",
          "662:   ulong num_ind;",
          "664:    would eventually bring a wrong result on x64. php_stream_cast() casts to int internally, and this will leave",
          "",
          "[Removed Lines]",
          "644:  zval **elem, **dest_elem;",
          "646:  HashTable *new_hash;",
          "652:  ALLOC_HASHTABLE(new_hash);",
          "653:  zend_hash_init(new_hash, zend_hash_num_elements(Z_ARRVAL_P(stream_array)), NULL, ZVAL_PTR_DTOR, 0);",
          "660:   char *key;",
          "661:   uint key_len;",
          "",
          "[Added Lines]",
          "645:  zval *elem, *dest_elem, new_array;",
          "652:  ZVAL_NEW_ARR(&new_array);",
          "653:  zend_hash_init(Z_ARRVAL(new_array), zend_hash_num_elements(Z_ARRVAL_P(stream_array)), NULL, ZVAL_PTR_DTOR, 0);",
          "660:   zend_string *key;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "669:   type = zend_hash_get_current_key_ex(Z_ARRVAL_P(stream_array),",
          "671:   if (type == HASH_KEY_NON_EXISTENT ||",
          "674:   }",
          "",
          "[Removed Lines]",
          "670:     &key, &key_len, &num_ind, 0, NULL);",
          "672:    zend_hash_get_current_data(Z_ARRVAL_P(stream_array), (void **) &elem) == FAILURE) {",
          "",
          "[Added Lines]",
          "669:     &key, &num_ind, 0, NULL);",
          "671:    (elem = zend_hash_get_current_data(Z_ARRVAL_P(stream_array))) == NULL) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "689:    if (PHP_SAFE_FD_ISSET(this_fd, fds)) {",
          "690:     if (type == HASH_KEY_IS_LONG) {",
          "694:     }",
          "696:     if (dest_elem) {",
          "",
          "[Removed Lines]",
          "691:      zend_hash_index_update(new_hash, num_ind, (void *)elem, sizeof(zval *), (void **)&dest_elem);",
          "693:      zend_hash_update(new_hash, key, key_len, (void *)elem, sizeof(zval *), (void **)&dest_elem);",
          "",
          "[Added Lines]",
          "690:      dest_elem = zend_hash_index_update(Z_ARRVAL(new_array), num_ind, elem);",
          "692:      dest_elem = zend_hash_update(Z_ARRVAL(new_array), key, elem);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "706:  zend_hash_destroy(Z_ARRVAL_P(stream_array));",
          "712:  return ret;",
          "713: }",
          "715: static int stream_array_emulate_read_fd_set(zval *stream_array TSRMLS_DC)",
          "716: {",
          "718:  php_stream *stream;",
          "720:  int ret = 0;",
          "722:  if (Z_TYPE_P(stream_array) != IS_ARRAY) {",
          "723:   return 0;",
          "724:  }",
          "728:  for (zend_hash_internal_pointer_reset(Z_ARRVAL_P(stream_array));",
          "730:    zend_hash_move_forward(Z_ARRVAL_P(stream_array))) {",
          "732:   php_stream_from_zval_no_verify(stream, elem);",
          "",
          "[Removed Lines]",
          "707:  efree(Z_ARRVAL_P(stream_array));",
          "709:  zend_hash_internal_pointer_reset(new_hash);",
          "710:  Z_ARRVAL_P(stream_array) = new_hash;",
          "717:  zval **elem, **dest_elem;",
          "719:  HashTable *new_hash;",
          "725:  ALLOC_HASHTABLE(new_hash);",
          "726:  zend_hash_init(new_hash, zend_hash_num_elements(Z_ARRVAL_P(stream_array)), NULL, ZVAL_PTR_DTOR, 0);",
          "729:    zend_hash_get_current_data(Z_ARRVAL_P(stream_array), (void **) &elem) == SUCCESS;",
          "",
          "[Added Lines]",
          "706:  efree(Z_ARR_P(stream_array));",
          "708:  zend_hash_internal_pointer_reset(Z_ARRVAL(new_array));",
          "709:  Z_ARR_P(stream_array) = Z_ARR(new_array);",
          "716:  zval *elem, *dest_elem, new_array;",
          "723:  ZVAL_NEW_ARR(&new_array);",
          "724:  zend_hash_init(Z_ARRVAL(new_array), zend_hash_num_elements(Z_ARRVAL_P(stream_array)), NULL, ZVAL_PTR_DTOR, 0);",
          "727:    (elem = zend_hash_get_current_data(Z_ARRVAL_P(stream_array))) != NULL;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "744:    if (dest_elem) {",
          "745:     zval_add_ref(dest_elem);",
          "746:    }",
          "",
          "[Removed Lines]",
          "743:    zend_hash_next_index_insert(new_hash, (void *)elem, sizeof(zval *), (void **)&dest_elem);",
          "",
          "[Added Lines]",
          "741:    dest_elem = zend_hash_next_index_insert(Z_ARRVAL(new_array), elem);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "752:  if (ret > 0) {",
          "754:   zend_hash_destroy(Z_ARRVAL_P(stream_array));",
          "759:  } else {",
          "762:  }",
          "764:  return ret;",
          "",
          "[Removed Lines]",
          "755:   efree(Z_ARRVAL_P(stream_array));",
          "757:   zend_hash_internal_pointer_reset(new_hash);",
          "758:   Z_ARRVAL_P(stream_array) = new_hash;",
          "760:   zend_hash_destroy(new_hash);",
          "761:   FREE_HASHTABLE(new_hash);",
          "",
          "[Added Lines]",
          "753:   efree(Z_ARR_P(stream_array));",
          "755:   zend_hash_internal_pointer_reset(Z_ARRVAL(new_array));",
          "756:   Z_ARR_P(stream_array) = Z_ARR(new_array);",
          "758:   zend_hash_destroy(Z_ARRVAL(new_array));",
          "759:   efree(Z_ARR(new_array));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "770: PHP_FUNCTION(stream_select)",
          "771: {",
          "773:  struct timeval tv;",
          "774:  struct timeval *tv_p = NULL;",
          "775:  fd_set   rfds, wfds, efds;",
          "",
          "[Removed Lines]",
          "772:  zval   *r_array, *w_array, *e_array, **sec = NULL;",
          "",
          "[Added Lines]",
          "770:  zval   *r_array, *w_array, *e_array, *sec = NULL;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "778:  long   usec = 0;",
          "779:  int    set_count, max_set_count = 0;",
          "782:   return;",
          "784:  FD_ZERO(&rfds);",
          "",
          "[Removed Lines]",
          "781:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"a!a!a!Z!|l\", &r_array, &w_array, &e_array, &sec, &usec) == FAILURE)",
          "",
          "[Added Lines]",
          "779:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"a!a!a!z!|l\", &r_array, &w_array, &e_array, &sec, &usec) == FAILURE)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "817:  if (sec != NULL) {",
          "818:   convert_to_long_ex(sec);",
          "821:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"The seconds parameter must be greater than 0\");",
          "822:    RETURN_FALSE;",
          "823:   } else if (usec < 0) {",
          "",
          "[Removed Lines]",
          "820:   if (Z_LVAL_PP(sec) < 0) {",
          "",
          "[Added Lines]",
          "818:   if (Z_LVAL_P(sec) < 0) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "829:   if (usec > 999999) {",
          "831:    tv.tv_usec = usec % 1000000;",
          "832:   } else {",
          "834:    tv.tv_usec = usec;",
          "835:   }",
          "",
          "[Removed Lines]",
          "830:    tv.tv_sec = Z_LVAL_PP(sec) + (usec / 1000000);",
          "833:    tv.tv_sec = Z_LVAL_PP(sec);",
          "",
          "[Added Lines]",
          "828:    tv.tv_sec = Z_LVAL_P(sec) + (usec / 1000000);",
          "831:    tv.tv_sec = Z_LVAL_P(sec);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "875:   char *xmsg, int xcode, size_t bytes_sofar, size_t bytes_max, void * ptr TSRMLS_DC)",
          "876: {",
          "877:  zval *callback = (zval*)context->notifier->ptr;",
          "879:  zval zvs[6];",
          "882:  int i;",
          "893:  if (xmsg) {",
          "895:  } else {",
          "897:  }",
          "903:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"failed to call user notifier\");",
          "904:  }",
          "905:  for (i = 0; i < 6; i++) {",
          "910:  }",
          "911: }",
          "913: static void user_space_stream_notifier_dtor(php_stream_notifier *notifier)",
          "914: {",
          "915:  if (notifier && notifier->ptr) {",
          "917:   notifier->ptr = NULL;",
          "918:  }",
          "919: }",
          "",
          "[Removed Lines]",
          "878:  zval *retval = NULL;",
          "880:  zval *ps[6];",
          "881:  zval **ptps[6];",
          "884:  for (i = 0; i < 6; i++) {",
          "885:   INIT_ZVAL(zvs[i]);",
          "886:   ps[i] = &zvs[i];",
          "887:   ptps[i] = &ps[i];",
          "888:   MAKE_STD_ZVAL(ps[i]);",
          "889:  }",
          "891:  ZVAL_LONG(ps[0], notifycode);",
          "892:  ZVAL_LONG(ps[1], severity);",
          "894:   ZVAL_STRING(ps[2], xmsg, 1);",
          "896:   ZVAL_NULL(ps[2]);",
          "898:  ZVAL_LONG(ps[3], xcode);",
          "899:  ZVAL_LONG(ps[4], bytes_sofar);",
          "900:  ZVAL_LONG(ps[5], bytes_max);",
          "902:  if (FAILURE == call_user_function_ex(EG(function_table), NULL, callback, &retval, 6, ptps, 0, NULL TSRMLS_CC)) {",
          "906:   zval_ptr_dtor(&ps[i]);",
          "907:  }",
          "908:  if (retval) {",
          "909:   zval_ptr_dtor(&retval);",
          "916:   zval_ptr_dtor((zval **)&(notifier->ptr));",
          "",
          "[Added Lines]",
          "876:  zval retval;",
          "880:  ZVAL_LONG(&zvs[0], notifycode);",
          "881:  ZVAL_LONG(&zvs[1], severity);",
          "883:   ZVAL_STRING(&zvs[2], xmsg);",
          "885:   ZVAL_NULL(&zvs[2]);",
          "887:  ZVAL_LONG(&zvs[3], xcode);",
          "888:  ZVAL_LONG(&zvs[4], bytes_sofar);",
          "889:  ZVAL_LONG(&zvs[5], bytes_max);",
          "891:  if (FAILURE == call_user_function_ex(EG(function_table), NULL, callback, &retval, 6, zvs, 0, NULL TSRMLS_CC)) {",
          "895:   zval_ptr_dtor(&zvs[i]);",
          "897:  zval_ptr_dtor(&retval);",
          "903:   zval_ptr_dtor((zval*)(notifier->ptr));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "921: static int parse_context_options(php_stream_context *context, zval *options TSRMLS_DC)",
          "922: {",
          "923:  HashPosition pos, opos;",
          "927:  int ret = SUCCESS;",
          "928:  ulong num_key;",
          "930:  zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(options), &pos);",
          "940:     }",
          "942:    }",
          "944:   } else {",
          "",
          "[Removed Lines]",
          "924:  zval **wval, **oval;",
          "925:  char *wkey, *okey;",
          "926:  uint wkey_len, okey_len;",
          "931:  while (SUCCESS == zend_hash_get_current_data_ex(Z_ARRVAL_P(options), (void**)&wval, &pos)) {",
          "932:   if (HASH_KEY_IS_STRING == zend_hash_get_current_key_ex(Z_ARRVAL_P(options), &wkey, &wkey_len, &num_key, 0, &pos)",
          "933:     && Z_TYPE_PP(wval) == IS_ARRAY) {",
          "935:    zend_hash_internal_pointer_reset_ex(Z_ARRVAL_PP(wval), &opos);",
          "936:    while (SUCCESS == zend_hash_get_current_data_ex(Z_ARRVAL_PP(wval), (void**)&oval, &opos)) {",
          "938:     if (HASH_KEY_IS_STRING == zend_hash_get_current_key_ex(Z_ARRVAL_PP(wval), &okey, &okey_len, &num_key, 0, &opos)) {",
          "939:      php_stream_context_set_option(context, wkey, okey, *oval);",
          "941:     zend_hash_move_forward_ex(Z_ARRVAL_PP(wval), &opos);",
          "",
          "[Added Lines]",
          "911:  zval *wval, *oval;",
          "912:  zend_string *wkey, *okey;",
          "917:  while (NULL != (wval = zend_hash_get_current_data_ex(Z_ARRVAL_P(options), &pos))) {",
          "918:   if (HASH_KEY_IS_STRING == zend_hash_get_current_key_ex(Z_ARRVAL_P(options), &wkey, &num_key, 0, &pos)",
          "919:     && Z_TYPE_P(wval) == IS_ARRAY) {",
          "921:    zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(wval), &opos);",
          "922:    while (NULL != (oval = zend_hash_get_current_data_ex(Z_ARRVAL_P(wval), &opos))) {",
          "924:     if (HASH_KEY_IS_STRING == zend_hash_get_current_key_ex(Z_ARRVAL_P(wval), &okey, &num_key, 0, &opos)) {",
          "925:      php_stream_context_set_option(context, wkey->val, okey->val, oval);",
          "927:     zend_hash_move_forward_ex(Z_ARRVAL_P(wval), &opos);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "953: static int parse_context_params(php_stream_context *context, zval *params TSRMLS_DC)",
          "954: {",
          "955:  int ret = SUCCESS;",
          "960:   if (context->notifier) {",
          "961:    php_stream_notification_free(context->notifier);",
          "",
          "[Removed Lines]",
          "956:  zval **tmp;",
          "958:  if (SUCCESS == zend_hash_find(Z_ARRVAL_P(params), \"notification\", sizeof(\"notification\"), (void**)&tmp)) {",
          "",
          "[Added Lines]",
          "942:  zval *tmp;",
          "944:  if (NULL != (tmp = zend_hash_str_find(Z_ARRVAL_P(params), \"notification\", sizeof(\"notification\")-1))) {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "965:   context->notifier = php_stream_notification_alloc();",
          "966:   context->notifier->func = user_space_stream_notifier;",
          "969:   context->notifier->dtor = user_space_stream_notifier_dtor;",
          "970:  }",
          "974:   } else {",
          "975:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid stream/context parameter\");",
          "976:   }",
          "",
          "[Removed Lines]",
          "967:   context->notifier->ptr = *tmp;",
          "968:   Z_ADDREF_P(*tmp);",
          "971:  if (SUCCESS == zend_hash_find(Z_ARRVAL_P(params), \"options\", sizeof(\"options\"), (void**)&tmp)) {",
          "972:   if (Z_TYPE_PP(tmp) == IS_ARRAY) {",
          "973:    parse_context_options(context, *tmp TSRMLS_CC);",
          "",
          "[Added Lines]",
          "953:   context->notifier->ptr = tmp;",
          "954:   Z_ADDREF_P(tmp);",
          "957:  if (NULL != (tmp = zend_hash_str_find(Z_ARRVAL_P(params), \"options\", sizeof(\"options\")-1))) {",
          "958:   if (Z_TYPE_P(tmp) == IS_ARRAY) {",
          "959:    parse_context_options(context, tmp TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "986: {",
          "987:  php_stream_context *context = NULL;",
          "990:  if (context == NULL) {",
          "991:   php_stream *stream;",
          "995:   if (stream) {",
          "996:    context = stream->context;",
          "",
          "[Removed Lines]",
          "989:  context = zend_fetch_resource(&contextresource TSRMLS_CC, -1, NULL, NULL, 1, php_le_stream_context(TSRMLS_C));",
          "993:   stream = zend_fetch_resource(&contextresource TSRMLS_CC, -1, NULL, NULL, 2, php_file_le_stream(), php_file_le_pstream);",
          "",
          "[Added Lines]",
          "975:  context = zend_fetch_resource(contextresource TSRMLS_CC, -1, NULL, NULL, 1, php_le_stream_context(TSRMLS_C));",
          "979:   stream = zend_fetch_resource(contextresource TSRMLS_CC, -1, NULL, NULL, 2, php_file_le_stream(), php_file_le_pstream);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1024:   RETURN_FALSE;",
          "1025:  }",
          "1028: }",
          "",
          "[Removed Lines]",
          "1027:  RETURN_ZVAL(context->options, 1, 0);",
          "",
          "[Added Lines]",
          "1013:  RETURN_ZVAL(&context->options, 1, 0);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1090: PHP_FUNCTION(stream_context_get_params)",
          "1091: {",
          "1093:  php_stream_context *context;",
          "1095:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r\", &zcontext) == FAILURE) {",
          "",
          "[Removed Lines]",
          "1092:  zval *zcontext, *options;",
          "",
          "[Added Lines]",
          "1078:  zval *zcontext, options;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1107:   add_assoc_zval_ex(return_value, ZEND_STRS(\"notification\"), context->notifier->ptr);",
          "1108:   Z_ADDREF_P(context->notifier->ptr);",
          "1109:  }",
          "1113: }",
          "",
          "[Removed Lines]",
          "1110:  ALLOC_INIT_ZVAL(options);",
          "1111:  ZVAL_ZVAL(options, context->options, 1, 0);",
          "1112:  add_assoc_zval_ex(return_value, ZEND_STRS(\"options\"), options);",
          "",
          "[Added Lines]",
          "1096:  ZVAL_ZVAL(&options, &context->options, 1, 0);",
          "1097:  add_assoc_zval_ex(return_value, ZEND_STRS(\"options\"), &options);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1180:   parse_context_params(context, params TSRMLS_CC);",
          "1181:  }",
          "1184: }",
          "",
          "[Removed Lines]",
          "1183:  RETURN_RESOURCE(context->rsrc_id);",
          "",
          "[Added Lines]",
          "1168:  RETURN_RES(context->res);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1201:   RETURN_FALSE;",
          "1202:  }",
          "1206:  if ((read_write & PHP_STREAM_FILTER_ALL) == 0) {",
          "",
          "[Removed Lines]",
          "1204:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "1189:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1252:  }",
          "1254:  if (filter) {",
          "1256:  } else {",
          "1257:   RETURN_FALSE;",
          "1258:  }",
          "",
          "[Removed Lines]",
          "1255:   RETURN_RESOURCE(filter->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, filter, php_file_le_stream_filter()));",
          "",
          "[Added Lines]",
          "1240:   filter->res = ZEND_REGISTER_RESOURCE(NULL, filter, php_file_le_stream_filter());",
          "1241:   RETURN_RES(filter->res);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1286:   RETURN_FALSE;",
          "1287:  }",
          "1290:  if (!filter) {",
          "1291:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid resource given, not a stream filter\");",
          "1292:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "1289:  filter = zend_fetch_resource(&zfilter TSRMLS_CC, -1, NULL, NULL, 1, php_file_le_stream_filter());",
          "",
          "[Added Lines]",
          "1275:  filter = zend_fetch_resource(zfilter TSRMLS_CC, -1, NULL, NULL, 1, php_file_le_stream_filter());",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1297:   RETURN_FALSE;",
          "1298:  }",
          "1301:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Could not invalidate filter, not removing\");",
          "1302:   RETURN_FALSE;",
          "1303:  } else {",
          "",
          "[Removed Lines]",
          "1300:  if (zend_list_delete(Z_LVAL_P(zfilter)) == FAILURE) {",
          "",
          "[Added Lines]",
          "1286:  if (zend_list_delete(Z_RES_P(zfilter)) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1331:   max_length = PHP_SOCK_CHUNK_SIZE;",
          "1332:  }",
          "1336:  if ((buf = php_stream_get_record(stream, max_length, &buf_size, str, str_len TSRMLS_CC))) {",
          "1338:  } else {",
          "1339:   RETURN_FALSE;",
          "1340:  }",
          "",
          "[Removed Lines]",
          "1334:  php_stream_from_zval(stream, &zstream);",
          "1337:   RETURN_STRINGL(buf, buf_size, 0);",
          "",
          "[Added Lines]",
          "1320:  php_stream_from_zval(stream, zstream);",
          "1324:   RETURN_STRINGL(buf, buf_size);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1355:   return;",
          "1356:  }",
          "1360:  block = arg2;",
          "",
          "[Removed Lines]",
          "1358:  php_stream_from_zval(stream, &arg1);",
          "",
          "[Added Lines]",
          "1345:  php_stream_from_zval(stream, arg1);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1383:   return;",
          "1384:  }",
          "1388:  t.tv_sec = seconds;",
          "",
          "[Removed Lines]",
          "1386:  php_stream_from_zval(stream, &socket);",
          "",
          "[Added Lines]",
          "1373:  php_stream_from_zval(stream, socket);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1417:   RETURN_FALSE;",
          "1418:  }",
          "1422:  buff = arg2;",
          "",
          "[Removed Lines]",
          "1420:  php_stream_from_zval(stream, &arg1);",
          "",
          "[Added Lines]",
          "1407:  php_stream_from_zval(stream, arg1);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1458:   RETURN_FALSE;",
          "1459:  }",
          "1463:  ret = php_stream_set_option(stream, PHP_STREAM_OPTION_SET_CHUNK_SIZE, (int)csize, NULL);",
          "",
          "[Removed Lines]",
          "1461:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "1448:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1480:   RETURN_FALSE;",
          "1481:  }",
          "1485:  buff = arg2;",
          "",
          "[Removed Lines]",
          "1483:  php_stream_from_zval(stream, &arg1);",
          "",
          "[Added Lines]",
          "1470:  php_stream_from_zval(stream, arg1);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1509:   RETURN_FALSE;",
          "1510:  }",
          "1514:  if (ZEND_NUM_ARGS() >= 3) {",
          "1515:   if (zsessstream) {",
          "1517:   }",
          "1519:   if (php_stream_xport_crypto_setup(stream, cryptokind, sessstream TSRMLS_CC) < 0) {",
          "",
          "[Removed Lines]",
          "1512:  php_stream_from_zval(stream, &zstream);",
          "1516:    php_stream_from_zval(sessstream, &zsessstream);",
          "",
          "[Added Lines]",
          "1499:  php_stream_from_zval(stream, zstream);",
          "1503:    php_stream_from_zval(sessstream, zsessstream);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1552:  resolved_path = zend_resolve_path(filename, filename_len TSRMLS_CC);",
          "1554:  if (resolved_path) {",
          "1556:  }",
          "1557:  RETURN_FALSE;",
          "1558: }",
          "",
          "[Removed Lines]",
          "1555:   RETURN_STRING(resolved_path, 0);",
          "",
          "[Added Lines]",
          "1543:   RETURN_STRING(resolved_path);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1563: PHP_FUNCTION(stream_is_local)",
          "1564: {",
          "1566:  php_stream *stream = NULL;",
          "1567:  php_stream_wrapper *wrapper = NULL;",
          "1570:   RETURN_FALSE;",
          "1571:  }",
          "1574:   php_stream_from_zval(stream, zstream);",
          "1575:   if (stream == NULL) {",
          "1576:    RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "1565:  zval **zstream;",
          "1569:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Z\", &zstream) == FAILURE) {",
          "1573:  if (Z_TYPE_PP(zstream) == IS_RESOURCE) {",
          "",
          "[Added Lines]",
          "1553:  zval *zstream;",
          "1557:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"z\", &zstream) == FAILURE) {",
          "1561:  if (Z_TYPE_P(zstream) == IS_RESOURCE) {",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1579:  } else {",
          "1580:   convert_to_string_ex(zstream);",
          "1583:  }",
          "1585:  if (!wrapper) {",
          "",
          "[Removed Lines]",
          "1582:   wrapper = php_stream_locate_url_wrapper(Z_STRVAL_PP(zstream), NULL, 0 TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1570:   wrapper = php_stream_locate_url_wrapper(Z_STRVAL_P(zstream), NULL, 0 TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1601:   RETURN_FALSE;",
          "1602:  }",
          "1606:  if (!php_stream_supports_lock(stream)) {",
          "1607:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "1604:  php_stream_from_zval(stream, &zsrc);",
          "",
          "[Added Lines]",
          "1592:  php_stream_from_zval(stream, zsrc);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1633:   RETURN_FALSE;",
          "1634:  }",
          "1638:  RETURN_BOOL(php_stream_xport_shutdown(stream, (stream_shutdown_t)how TSRMLS_CC) == 0);",
          "1639: }",
          "",
          "[Removed Lines]",
          "1636:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "1624:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------"
        ],
        "ext/standard/user_filters.c||ext/standard/user_filters.c": [
          "File: ext/standard/user_filters.c -> ext/standard/user_filters.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: struct php_user_filter_data {",
          "33:  zend_class_entry *ce;",
          "36: };",
          "",
          "[Removed Lines]",
          "35:  char classname[1];",
          "",
          "[Added Lines]",
          "35:  zend_string *classname;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: static ZEND_RSRC_DTOR_FUNC(php_bucket_dtor)",
          "80: {",
          "82:  if (bucket) {",
          "83:   php_stream_bucket_delref(bucket TSRMLS_CC);",
          "84:   bucket = NULL;",
          "",
          "[Removed Lines]",
          "81:  php_stream_bucket *bucket = (php_stream_bucket *)rsrc->ptr;",
          "",
          "[Added Lines]",
          "81:  php_stream_bucket *bucket = (php_stream_bucket *)res->ptr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139: {",
          "140:  zval *obj = (zval*)thisfilter->abstract;",
          "141:  zval func_name;",
          "144:  if (obj == NULL) {",
          "146:   return;",
          "147:  }",
          "151:  call_user_function_ex(NULL,",
          "153:    &func_name,",
          "154:    &retval,",
          "155:    0, NULL,",
          "156:    0, NULL TSRMLS_CC);",
          "163: }",
          "165: php_stream_filter_status_t userfilter_filter(",
          "",
          "[Removed Lines]",
          "142:  zval *retval = NULL;",
          "149:  ZVAL_STRINGL(&func_name, \"onclose\", sizeof(\"onclose\")-1, 0);",
          "152:    &obj,",
          "158:  if (retval)",
          "159:   zval_ptr_dtor(&retval);",
          "162:  zval_ptr_dtor(&obj);",
          "",
          "[Added Lines]",
          "142:  zval retval;",
          "150:  ZVAL_STRINGL(&func_name, \"onclose\", sizeof(\"onclose\")-1);",
          "153:    obj,",
          "159:  zval_ptr_dtor(&retval);",
          "162:  zval_ptr_dtor(obj);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "174:  int ret = PSFS_ERR_FATAL;",
          "175:  zval *obj = (zval*)thisfilter->abstract;",
          "176:  zval func_name;",
          "180:  zval zpropname;",
          "181:  int call_result;",
          "191:  }",
          "205:  if (bytes_consumed) {",
          "207:  } else {",
          "209:  }",
          "216:  call_result = call_user_function_ex(NULL,",
          "218:    &func_name,",
          "219:    &retval,",
          "220:    4, args,",
          "221:    0, NULL TSRMLS_CC);",
          "226:  } else if (call_result == FAILURE) {",
          "227:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"failed to call filter function\");",
          "228:  }",
          "230:  if (bytes_consumed) {",
          "236:  }",
          "238:  if (buckets_in->head) {",
          "",
          "[Removed Lines]",
          "177:  zval *retval = NULL;",
          "178:  zval **args[4];",
          "179:  zval *zclosing, *zconsumed, *zin, *zout, *zstream;",
          "183:  if (FAILURE == zend_hash_find(Z_OBJPROP_P(obj), \"stream\", sizeof(\"stream\"), (void**)&zstream)) {",
          "185:   ALLOC_INIT_ZVAL(zstream);",
          "186:   php_stream_to_zval(stream, zstream);",
          "187:   zval_copy_ctor(zstream);",
          "188:   add_property_zval(obj, \"stream\", zstream);",
          "190:   zval_ptr_dtor(&zstream);",
          "193:  ZVAL_STRINGL(&func_name, \"filter\", sizeof(\"filter\")-1, 0);",
          "196:  ALLOC_INIT_ZVAL(zin);",
          "197:  ZEND_REGISTER_RESOURCE(zin, buckets_in, le_bucket_brigade);",
          "198:  args[0] = &zin;",
          "200:  ALLOC_INIT_ZVAL(zout);",
          "201:  ZEND_REGISTER_RESOURCE(zout, buckets_out, le_bucket_brigade);",
          "202:  args[1] = &zout;",
          "204:  ALLOC_INIT_ZVAL(zconsumed);",
          "206:   ZVAL_LONG(zconsumed, *bytes_consumed);",
          "208:   ZVAL_NULL(zconsumed);",
          "210:  args[2] = &zconsumed;",
          "212:  ALLOC_INIT_ZVAL(zclosing);",
          "213:  ZVAL_BOOL(zclosing, flags & PSFS_FLAG_FLUSH_CLOSE);",
          "214:  args[3] = &zclosing;",
          "217:    &obj,",
          "223:  if (call_result == SUCCESS && retval != NULL) {",
          "224:   convert_to_long(retval);",
          "225:   ret = Z_LVAL_P(retval);",
          "232:  }",
          "234:  if (retval) {",
          "235:   zval_ptr_dtor(&retval);",
          "",
          "[Added Lines]",
          "177:  zval retval;",
          "178:  zval args[4];",
          "182:  if (!zend_hash_str_exists(Z_OBJPROP_P(obj), \"stream\", sizeof(\"stream\")-1)) {",
          "183:   zval tmp;",
          "186:   php_stream_to_zval(stream, &tmp);",
          "187:   zval_copy_ctor(&tmp);",
          "188:   add_property_zval(obj, \"stream\", &tmp);",
          "190:   zval_ptr_dtor(&tmp);",
          "194:  ZVAL_STRINGL(&func_name, \"filter\", sizeof(\"filter\")-1);",
          "197:  ZEND_REGISTER_RESOURCE(&args[0], buckets_in, le_bucket_brigade);",
          "199:  ZEND_REGISTER_RESOURCE(&args[1], buckets_out, le_bucket_brigade);",
          "202:   ZVAL_LONG(&args[2], *bytes_consumed);",
          "204:   ZVAL_NULL(&args[2]);",
          "207:  ZVAL_BOOL(&args[3], flags & PSFS_FLAG_FLUSH_CLOSE);",
          "210:    obj,",
          "216:  if (call_result == SUCCESS && Z_TYPE(retval) != IS_UNDEF) {",
          "217:   convert_to_long(&retval);",
          "218:   ret = Z_LVAL(retval);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "262:  Z_OBJ_HANDLER_P(obj, unset_property)(obj, &zpropname, 0 TSRMLS_CC);",
          "269:  return ret;",
          "270: }",
          "",
          "[Removed Lines]",
          "260:  INIT_ZVAL(zpropname);",
          "261:  ZVAL_STRINGL(&zpropname, \"stream\", sizeof(\"stream\")-1, 0);",
          "264:  zval_ptr_dtor(&zclosing);",
          "265:  zval_ptr_dtor(&zconsumed);",
          "266:  zval_ptr_dtor(&zout);",
          "267:  zval_ptr_dtor(&zin);",
          "",
          "[Added Lines]",
          "250:  ZVAL_STRINGL(&zpropname, \"stream\", sizeof(\"stream\")-1);",
          "253:  zval_ptr_dtor(&args[3]);",
          "254:  zval_ptr_dtor(&args[2]);",
          "255:  zval_ptr_dtor(&args[1]);",
          "256:  zval_ptr_dtor(&args[0]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "280: {",
          "281:  struct php_user_filter_data *fdat = NULL;",
          "282:  php_stream_filter *filter;",
          "284:  zval func_name;",
          "286:  int len;",
          "",
          "[Removed Lines]",
          "283:  zval *obj, *zfilter;",
          "285:  zval *retval = NULL;",
          "",
          "[Added Lines]",
          "272:  zval obj, zfilter;",
          "274:  zval retval;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "295:  len = strlen(filtername);",
          "299:   char *period;",
          "",
          "[Removed Lines]",
          "298:  if (FAILURE == zend_hash_find(BG(user_filter_map), (char*)filtername, len + 1, (void**)&fdat)) {",
          "",
          "[Added Lines]",
          "287:  if (NULL == (fdat = zend_hash_str_find_ptr(BG(user_filter_map), (char*)filtername, len))) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "312:    while (period) {",
          "314:     strncat(wildcard, \".*\", 2);",
          "316:      period = NULL;",
          "317:     } else {",
          "",
          "[Removed Lines]",
          "315:     if (SUCCESS == zend_hash_find(BG(user_filter_map), wildcard, strlen(wildcard) + 1, (void**)&fdat)) {",
          "",
          "[Added Lines]",
          "304:     if (NULL != (fdat = zend_hash_str_find_ptr(BG(user_filter_map), wildcard, strlen(wildcard)))) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "332:  if (fdat->ce == NULL) {",
          "335:    php_error_docref(NULL TSRMLS_CC, E_WARNING,",
          "336:      \"user-filter \\\"%s\\\" requires class \\\"%s\\\", but that class is not defined\",",
          "338:    return NULL;",
          "339:   }",
          "342:  }",
          "344:  filter = php_stream_filter_alloc(&userfilter_ops, NULL, 0);",
          "",
          "[Removed Lines]",
          "333:   if (FAILURE == zend_lookup_class(fdat->classname, strlen(fdat->classname),",
          "334:      (zend_class_entry ***)&fdat->ce TSRMLS_CC)) {",
          "337:      filtername, fdat->classname);",
          "340:   fdat->ce = *(zend_class_entry**)fdat->ce;",
          "",
          "[Added Lines]",
          "322:   if (NULL == (fdat->ce = zend_lookup_class(fdat->classname TSRMLS_CC))) {",
          "325:      filtername, fdat->classname->val);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "347:  }",
          "359:  if (filterparams) {",
          "361:  } else {",
          "363:  }",
          "368:  call_user_function_ex(NULL,",
          "369:    &obj,",
          "",
          "[Removed Lines]",
          "350:  ALLOC_ZVAL(obj);",
          "351:  object_init_ex(obj, fdat->ce);",
          "352:  Z_SET_REFCOUNT_P(obj, 1);",
          "353:  Z_SET_ISREF_P(obj);",
          "356:  add_property_string(obj, \"filtername\", (char*)filtername, 1);",
          "360:   add_property_zval(obj, \"params\", filterparams);",
          "362:   add_property_null(obj, \"params\");",
          "366:  ZVAL_STRINGL(&func_name, \"oncreate\", sizeof(\"oncreate\")-1, 0);",
          "",
          "[Added Lines]",
          "336:  object_init_ex(&obj, fdat->ce);",
          "340:  add_property_string(&obj, \"filtername\", (char*)filtername, 1);",
          "344:   add_property_zval(&obj, \"params\", filterparams);",
          "346:   add_property_null(&obj, \"params\");",
          "351:  ZVAL_STRINGL(&func_name, \"oncreate\", sizeof(\"oncreate\")-1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "372:    0, NULL,",
          "373:    0, NULL TSRMLS_CC);",
          "378:    zval_ptr_dtor(&retval);",
          "",
          "[Removed Lines]",
          "375:  if (retval) {",
          "376:   if (Z_TYPE_P(retval) == IS_BOOL && Z_LVAL_P(retval) == 0) {",
          "",
          "[Added Lines]",
          "360:  if (Z_TYPE(retval) != IS_UNDEF) {",
          "361:   if (Z_TYPE(retval) == IS_BOOL && Z_LVAL(retval) == 0) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "391:  }",
          "399:  zval_ptr_dtor(&zfilter);",
          "",
          "[Removed Lines]",
          "394:  ALLOC_INIT_ZVAL(zfilter);",
          "395:  ZEND_REGISTER_RESOURCE(zfilter, filter, le_userfilters);",
          "396:  filter->abstract = obj;",
          "397:  add_property_zval(obj, \"filter\", zfilter);",
          "",
          "[Added Lines]",
          "379:  ZEND_REGISTER_RESOURCE(&zfilter, filter, le_userfilters);",
          "381:  filter->abstract = &obj;",
          "382:  add_property_zval(&obj, \"filter\", &zfilter);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "414: PHP_FUNCTION(stream_bucket_make_writeable)",
          "415: {",
          "417:  php_stream_bucket_brigade *brigade;",
          "418:  php_stream_bucket *bucket;",
          "",
          "[Removed Lines]",
          "416:  zval *zbrigade, *zbucket;",
          "",
          "[Added Lines]",
          "401:  zval *zbrigade, zbucket;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "421:   RETURN_FALSE;",
          "422:  }",
          "426:  ZVAL_NULL(return_value);",
          "428:  if (brigade->head && (bucket = php_stream_bucket_make_writeable(brigade->head TSRMLS_CC))) {",
          "431:   object_init(return_value);",
          "434:   zval_ptr_dtor(&zbucket);",
          "435:   add_property_stringl(return_value, \"data\", bucket->buf, bucket->buflen, 1);",
          "",
          "[Removed Lines]",
          "424:  ZEND_FETCH_RESOURCE(brigade, php_stream_bucket_brigade *, &zbrigade, -1, PHP_STREAM_BRIGADE_RES_NAME, le_bucket_brigade);",
          "429:   ALLOC_INIT_ZVAL(zbucket);",
          "430:   ZEND_REGISTER_RESOURCE(zbucket, bucket, le_bucket);",
          "432:   add_property_zval(return_value, \"bucket\", zbucket);",
          "",
          "[Added Lines]",
          "409:  ZEND_FETCH_RESOURCE(brigade, php_stream_bucket_brigade *, zbrigade, -1, PHP_STREAM_BRIGADE_RES_NAME, le_bucket_brigade);",
          "414:   ZEND_REGISTER_RESOURCE(&zbucket, bucket, le_bucket);",
          "416:   add_property_zval(return_value, \"bucket\", &zbucket);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "442: static void php_stream_bucket_attach(int append, INTERNAL_FUNCTION_PARAMETERS)",
          "443: {",
          "444:  zval *zbrigade, *zobject;",
          "446:  php_stream_bucket_brigade *brigade;",
          "447:  php_stream_bucket *bucket;",
          "",
          "[Removed Lines]",
          "445:  zval **pzbucket, **pzdata;",
          "",
          "[Added Lines]",
          "429:  zval *pzbucket, *pzdata;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "450:   RETURN_FALSE;",
          "451:  }",
          "454:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Object has no bucket property\");",
          "455:   RETURN_FALSE;",
          "456:  }",
          "459:  ZEND_FETCH_RESOURCE(bucket, php_stream_bucket *, pzbucket, -1, PHP_STREAM_BUCKET_RES_NAME, le_bucket);",
          "462:   if (!bucket->own_buf) {",
          "463:    bucket = php_stream_bucket_make_writeable(bucket TSRMLS_CC);",
          "464:   }",
          "468:   }",
          "470:  }",
          "472:  if (append) {",
          "",
          "[Removed Lines]",
          "453:  if (FAILURE == zend_hash_find(Z_OBJPROP_P(zobject), \"bucket\", 7, (void**)&pzbucket)) {",
          "458:  ZEND_FETCH_RESOURCE(brigade, php_stream_bucket_brigade *, &zbrigade, -1, PHP_STREAM_BRIGADE_RES_NAME, le_bucket_brigade);",
          "461:  if (SUCCESS == zend_hash_find(Z_OBJPROP_P(zobject), \"data\", 5, (void**)&pzdata) && (*pzdata)->type == IS_STRING) {",
          "465:   if ((int)bucket->buflen != Z_STRLEN_PP(pzdata)) {",
          "466:    bucket->buf = perealloc(bucket->buf, Z_STRLEN_PP(pzdata), bucket->is_persistent);",
          "467:    bucket->buflen = Z_STRLEN_PP(pzdata);",
          "469:   memcpy(bucket->buf, Z_STRVAL_PP(pzdata), bucket->buflen);",
          "",
          "[Added Lines]",
          "437:  if (NULL == (pzbucket = zend_hash_str_find(Z_OBJPROP_P(zobject), \"bucket\", sizeof(\"bucket\")-1))) {",
          "442:  ZEND_FETCH_RESOURCE(brigade, php_stream_bucket_brigade *, zbrigade, -1, PHP_STREAM_BRIGADE_RES_NAME, le_bucket_brigade);",
          "445:  if (NULL != (pzdata = zend_hash_str_find(Z_OBJPROP_P(zobject), \"data\", sizeof(\"data\")-1)) && Z_TYPE_P(pzdata) == IS_STRING) {",
          "449:   if ((int)bucket->buflen != Z_STRLEN_P(pzdata)) {",
          "450:    bucket->buf = perealloc(bucket->buf, Z_STRLEN_P(pzdata), bucket->is_persistent);",
          "451:    bucket->buflen = Z_STRLEN_P(pzdata);",
          "453:   memcpy(bucket->buf, Z_STRVAL_P(pzdata), bucket->buflen);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "504: PHP_FUNCTION(stream_bucket_new)",
          "505: {",
          "507:  php_stream *stream;",
          "508:  char *buffer;",
          "509:  char *pbuffer;",
          "",
          "[Removed Lines]",
          "506:  zval *zstream, *zbucket;",
          "",
          "[Added Lines]",
          "490:  zval *zstream, zbucket;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "514:   RETURN_FALSE;",
          "515:  }",
          "519:  if (!(pbuffer = pemalloc(buffer_len, php_stream_is_persistent(stream)))) {",
          "520:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "517:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "501:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "528:   RETURN_FALSE;",
          "529:  }",
          "533:  object_init(return_value);",
          "536:  zval_ptr_dtor(&zbucket);",
          "537:  add_property_stringl(return_value, \"data\", bucket->buf, bucket->buflen, 1);",
          "",
          "[Removed Lines]",
          "531:  ALLOC_INIT_ZVAL(zbucket);",
          "532:  ZEND_REGISTER_RESOURCE(zbucket, bucket, le_bucket);",
          "534:  add_property_zval(return_value, \"bucket\", zbucket);",
          "",
          "[Added Lines]",
          "515:  ZEND_REGISTER_RESOURCE(&zbucket, bucket, le_bucket);",
          "517:  add_property_zval(return_value, \"bucket\", &zbucket);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "544: PHP_FUNCTION(stream_get_filters)",
          "545: {",
          "547:  int key_flags;",
          "549:  HashTable *filters_hash;",
          "550:  ulong num_key;",
          "",
          "[Removed Lines]",
          "546:  char *filter_name;",
          "548:  uint filter_name_len = 0;",
          "",
          "[Added Lines]",
          "529:  zend_string *filter_name;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "560:  if (filters_hash) {",
          "561:   for(zend_hash_internal_pointer_reset(filters_hash);",
          "563:    zend_hash_move_forward(filters_hash))",
          "564:     if (key_flags == HASH_KEY_IS_STRING) {",
          "566:     }",
          "567:  }",
          "",
          "[Removed Lines]",
          "562:    (key_flags = zend_hash_get_current_key_ex(filters_hash, &filter_name, &filter_name_len, &num_key, 0, NULL)) != HASH_KEY_NON_EXISTENT;",
          "565:      add_next_index_stringl(return_value, filter_name, filter_name_len - 1, 1);",
          "",
          "[Added Lines]",
          "544:    (key_flags = zend_hash_get_current_key_ex(filters_hash, &filter_name, &num_key, 0, NULL)) != HASH_KEY_NON_EXISTENT;",
          "548:      add_next_index_stringl(return_value, filter_name->val, filter_name->len, 1);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "574: PHP_FUNCTION(stream_filter_register)",
          "575: {",
          "578:  struct php_user_filter_data *fdat;",
          "582:   RETURN_FALSE;",
          "583:  }",
          "585:  RETVAL_FALSE;",
          "588:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Filter name cannot be empty\");",
          "589:   return;",
          "590:  }",
          "593:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Class name cannot be empty\");",
          "594:   return;",
          "595:  }",
          "",
          "[Removed Lines]",
          "576:  char *filtername, *classname;",
          "577:  int filtername_len, classname_len;",
          "580:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ss\", &filtername, &filtername_len,",
          "581:     &classname, &classname_len) == FAILURE) {",
          "587:  if (!filtername_len) {",
          "592:  if (!classname_len) {",
          "",
          "[Added Lines]",
          "559:  zend_string *filtername, *classname;",
          "562:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"SS\", &filtername, &classname) == FAILURE) {",
          "568:  if (!filtername->len) {",
          "573:  if (!classname->len) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "599:   zend_hash_init(BG(user_filter_map), 5, NULL, (dtor_func_t) filter_item_dtor, 0);",
          "600:  }",
          "608:   RETVAL_TRUE;",
          "609:  }",
          "612: }",
          "",
          "[Removed Lines]",
          "602:  fdat = ecalloc(1, sizeof(struct php_user_filter_data) + classname_len);",
          "603:  memcpy(fdat->classname, classname, classname_len);",
          "605:  if (zend_hash_add(BG(user_filter_map), filtername, filtername_len + 1, (void*)fdat,",
          "606:     sizeof(*fdat) + classname_len, NULL) == SUCCESS &&",
          "607:    php_stream_filter_register_factory_volatile(filtername, &user_filter_factory TSRMLS_CC) == SUCCESS) {",
          "611:  efree(fdat);",
          "",
          "[Added Lines]",
          "583:  fdat = ecalloc(1, sizeof(struct php_user_filter_data));",
          "584:  fdat->classname = STR_COPY(classname);",
          "586:  if (zend_hash_add_ptr(BG(user_filter_map), filtername, fdat) != NULL &&",
          "587:    php_stream_filter_register_factory_volatile(filtername->val, &user_filter_factory TSRMLS_CC) == SUCCESS) {",
          "589:  } else {",
          "590:   STR_RELEASE(classname);",
          "591:   efree(fdat);",
          "",
          "---------------"
        ],
        "ext/standard/uuencode.c||ext/standard/uuencode.c": [
          "File: ext/standard/uuencode.c -> ext/standard/uuencode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:  dst_len = php_uuencode(src, src_len, &dst);",
          "202: }",
          "",
          "[Removed Lines]",
          "201:  RETURN_STRINGL(dst, dst_len, 0);",
          "",
          "[Added Lines]",
          "202:  RETURN_STRINGL(dst, dst_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:   RETURN_FALSE;",
          "220:  }",
          "223: }",
          "",
          "[Removed Lines]",
          "222:  RETURN_STRINGL(dst, dst_len, 0);",
          "",
          "[Added Lines]",
          "224:  RETURN_STRINGL(dst, dst_len);",
          "",
          "---------------"
        ],
        "ext/standard/var.c||ext/standard/var.c": [
          "File: ext/standard/var.c -> ext/standard/var.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "896: }",
          "900: {",
          "902:  smart_str_0(buf);",
          "903: }",
          "",
          "[Removed Lines]",
          "901:  php_var_serialize_intern(buf, *struc, *var_hash TSRMLS_CC);",
          "",
          "[Added Lines]",
          "901:  php_var_serialize_intern(buf, struc, *var_hash TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "908: PHP_FUNCTION(serialize)",
          "909: {",
          "911:  php_serialize_data_t var_hash;",
          "912:  smart_str buf = {0};",
          "915:   return;",
          "916:  }",
          "",
          "[Removed Lines]",
          "910:  zval **struc;",
          "914:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Z\", &struc) == FAILURE) {",
          "",
          "[Added Lines]",
          "910:  zval *struc;",
          "914:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"z\", &struc) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "954:  p = (const unsigned char*) buf;",
          "955:  PHP_VAR_UNSERIALIZE_INIT(var_hash);",
          "957:   PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "958:   zval_dtor(return_value);",
          "959:   if (!EG(exception)) {",
          "",
          "[Removed Lines]",
          "956:  if (!php_var_unserialize(&return_value, &p, p + buf_len, &var_hash TSRMLS_CC)) {",
          "",
          "[Added Lines]",
          "956:  if (!php_var_unserialize(return_value, &p, p + buf_len, &var_hash TSRMLS_CC)) {",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:   +----------------------------------------------------------------------+",
          "5:   | PHP Version 5                                                        |",
          "6:   +----------------------------------------------------------------------+",
          "8:   +----------------------------------------------------------------------+",
          "9:   | This source file is subject to version 3.01 of the PHP license,      |",
          "10:   | that is bundled with this package in the file LICENSE, and is        |",
          "",
          "[Removed Lines]",
          "7:   | Copyright (c) 1997-2014 The PHP Group                                |",
          "",
          "[Added Lines]",
          "7:   | Copyright (c) 1997-2013 The PHP Group                                |",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:  void *next;",
          "35: } var_entries;",
          "38: {",
          "39:  var_entries *var_hash = (*var_hashx)->last;",
          "40: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "37: static inline void var_push(php_unserialize_data_t *var_hashx, zval **rval)",
          "",
          "[Added Lines]",
          "37: static inline void var_push(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:   (*var_hashx)->last = var_hash;",
          "56:  }",
          "59: }",
          "62: {",
          "63:  var_entries *var_hash = (*var_hashx)->last_dtor;",
          "64: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "58:  var_hash->data[var_hash->used_slots++] = *rval;",
          "61: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval **rval)",
          "",
          "[Added Lines]",
          "58:  var_hash->data[var_hash->used_slots++] = rval;",
          "61: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79:   (*var_hashx)->last_dtor = var_hash;",
          "80:  }",
          "84: }",
          "87: {",
          "88:  var_entries *var_hash = (*var_hashx)->last_dtor;",
          "89: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "82:  Z_ADDREF_PP(rval);",
          "83:  var_hash->data[var_hash->used_slots++] = *rval;",
          "86: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval **rval)",
          "",
          "[Added Lines]",
          "82:  Z_ADDREF_P(rval);",
          "83:  var_hash->data[var_hash->used_slots++] = rval;",
          "86: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104:   (*var_hashx)->last_dtor = var_hash;",
          "105:  }",
          "108: }",
          "111: {",
          "112:  long i;",
          "113:  var_entries *var_hash = (*var_hashx)->first;",
          "",
          "[Removed Lines]",
          "107:  var_hash->data[var_hash->used_slots++] = *rval;",
          "110: PHPAPI void var_replace(php_unserialize_data_t *var_hashx, zval *ozval, zval **nzval)",
          "",
          "[Added Lines]",
          "107:  var_hash->data[var_hash->used_slots++] = rval;",
          "110: PHPAPI void var_replace(php_unserialize_data_t *var_hashx, zval *ozval, zval *nzval)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "118:  while (var_hash) {",
          "119:   for (i = 0; i < var_hash->used_slots; i++) {",
          "120:    if (var_hash->data[i] == ozval) {",
          "123:    }",
          "124:   }",
          "",
          "[Removed Lines]",
          "121:     var_hash->data[i] = *nzval;",
          "",
          "[Added Lines]",
          "121:     var_hash->data[i] = nzval;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "126:  }",
          "127: }",
          "130: {",
          "131:  var_entries *var_hash = (*var_hashx)->first;",
          "132: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "129: static int var_access(php_unserialize_data_t *var_hashx, long id, zval ***store)",
          "",
          "[Added Lines]",
          "129: static int var_access(php_unserialize_data_t *var_hashx, long id, zval **store)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "167:  while (var_hash) {",
          "168:   for (i = 0; i < var_hash->used_slots; i++) {",
          "170:   }",
          "171:   next = var_hash->next;",
          "172:   efree(var_hash);",
          "",
          "[Removed Lines]",
          "169:    zval_ptr_dtor(&var_hash->data[i]);",
          "",
          "[Added Lines]",
          "169:    zval_ptr_dtor(var_hash->data[i]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "286:  return result;",
          "287: }",
          "290: #define UNSERIALIZE_PASSTHRU rval, p, max, var_hash TSRMLS_CC",
          "292: static inline int process_nested_data(UNSERIALIZE_PARAMETER, HashTable *ht, long elements, int objprops)",
          "293: {",
          "294:  while (elements-- > 0) {",
          "299:   if (!php_var_unserialize(&key, p, max, NULL TSRMLS_CC)) {",
          "302:    return 0;",
          "303:   }",
          "308:    return 0;",
          "309:   }",
          "313:   if (!php_var_unserialize(&data, p, max, var_hash TSRMLS_CC)) {",
          "318:    return 0;",
          "319:   }",
          "321:   if (!objprops) {",
          "323:    case IS_LONG:",
          "325:      var_push_dtor(var_hash, old_data);",
          "326:     }",
          "328:     break;",
          "329:    case IS_STRING:",
          "331:      var_push_dtor(var_hash, old_data);",
          "332:     }",
          "334:     break;",
          "335:    }",
          "336:   } else {",
          "341:   }",
          "346:   if (elements && *(*p-1) != ';' && *(*p-1) != '}') {",
          "347:    (*p)--;",
          "",
          "[Removed Lines]",
          "289: #define UNSERIALIZE_PARAMETER zval **rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash TSRMLS_DC",
          "295:   zval *key, *data, **old_data;",
          "297:   ALLOC_INIT_ZVAL(key);",
          "300:    zval_dtor(key);",
          "301:    FREE_ZVAL(key);",
          "305:   if (Z_TYPE_P(key) != IS_LONG && Z_TYPE_P(key) != IS_STRING) {",
          "306:    zval_dtor(key);",
          "307:    FREE_ZVAL(key);",
          "311:   ALLOC_INIT_ZVAL(data);",
          "314:    zval_dtor(key);",
          "315:    FREE_ZVAL(key);",
          "316:    zval_dtor(data);",
          "317:    FREE_ZVAL(data);",
          "322:    switch (Z_TYPE_P(key)) {",
          "324:     if (zend_hash_index_find(ht, Z_LVAL_P(key), (void **)&old_data)==SUCCESS) {",
          "327:     zend_hash_index_update(ht, Z_LVAL_P(key), &data, sizeof(data), NULL);",
          "330:     if (zend_symtable_find(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, (void **)&old_data)==SUCCESS) {",
          "333:     zend_symtable_update(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, &data, sizeof(data), NULL);",
          "338:    convert_to_string(key);",
          "339:    zend_hash_update(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, &data,",
          "340:      sizeof data, NULL);",
          "343:   zval_dtor(key);",
          "344:   FREE_ZVAL(key);",
          "",
          "[Added Lines]",
          "289: #define UNSERIALIZE_PARAMETER zval *rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash TSRMLS_DC",
          "295:   zval key, data, *old_data;",
          "298:    zval_dtor(&key);",
          "302:   if (Z_TYPE(key) != IS_LONG && Z_TYPE(key) != IS_STRING) {",
          "303:    zval_dtor(&key);",
          "308:    zval_dtor(&key);",
          "309:    zval_dtor(&data);",
          "314:    switch (Z_TYPE(key)) {",
          "316:     if ((old_data = zend_hash_index_find(ht, Z_LVAL(key))) != NULL) {",
          "319:     zend_hash_index_update(ht, Z_LVAL(key), &data);",
          "322:     if ((old_data = zend_symtable_find(ht, Z_STR(key))) != NULL) {",
          "325:     zend_symtable_update(ht, Z_STR(key), &data);",
          "330:    convert_to_string(&key);",
          "331:    zend_hash_update(ht, Z_STR(key), &data);",
          "334:   zval_dtor(&key);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "377:  }",
          "379:  if (ce->unserialize == NULL) {",
          "382:  } else if (ce->unserialize(rval, ce, (const unsigned char*)*p, datalen, (zend_unserialize_data *)var_hash TSRMLS_CC) != SUCCESS) {",
          "383:   return 0;",
          "384:  }",
          "",
          "[Removed Lines]",
          "380:   zend_error(E_WARNING, \"Class %s has no unserializer\", ce->name);",
          "381:   object_init_ex(*rval, ce);",
          "",
          "[Added Lines]",
          "370:   zend_error(E_WARNING, \"Class %s has no unserializer\", ce->name->val);",
          "371:   object_init_ex(rval, ce);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "397:  (*p) += 2;",
          "400:  return elements;",
          "401: }",
          "",
          "[Removed Lines]",
          "399:  object_init_ex(*rval, ce);",
          "",
          "[Added Lines]",
          "389:  object_init_ex(rval, ce);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "405: #endif",
          "406: static inline int object_common2(UNSERIALIZE_PARAMETER, long elements)",
          "407: {",
          "409:  zval fname;",
          "412:   return 0;",
          "413:  }",
          "419:   BG(serialize_lock)++;",
          "421:   BG(serialize_lock)--;",
          "422:  }",
          "428:  if (EG(exception)) {",
          "429:   return 0;",
          "",
          "[Removed Lines]",
          "408:  zval *retval_ptr = NULL;",
          "411:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_OBJPROP_PP(rval), elements, 1)) {",
          "415:  if (Z_OBJCE_PP(rval) != PHP_IC_ENTRY &&",
          "416:   zend_hash_exists(&Z_OBJCE_PP(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\"))) {",
          "417:   INIT_PZVAL(&fname);",
          "418:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1, 0);",
          "420:   call_user_function_ex(CG(function_table), rval, &fname, &retval_ptr, 0, 0, 1, NULL TSRMLS_CC);",
          "424:  if (retval_ptr) {",
          "425:   zval_ptr_dtor(&retval_ptr);",
          "426:  }",
          "",
          "[Added Lines]",
          "398:  zval retval;",
          "401:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_OBJPROP_P(rval), elements, 1)) {",
          "405:  if (Z_OBJCE_P(rval) != PHP_IC_ENTRY &&",
          "406:   zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1)) {",
          "408:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1);",
          "410:   call_user_function_ex(CG(function_table), rval, &fname, &retval, 0, 0, 1, NULL TSRMLS_CC);",
          "414:  zval_ptr_dtor(&retval);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "439: PHPAPI int php_var_unserialize(UNSERIALIZE_PARAMETER)",
          "440: {",
          "441:  const unsigned char *cursor, *limit, *marker, *start;",
          "444:  limit = max;",
          "445:  cursor = *p;",
          "",
          "[Removed Lines]",
          "442:  zval **rval_ref;",
          "",
          "[Added Lines]",
          "430:  zval *rval_ref;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "461: {",
          "462:  YYCTYPE yych;",
          "463:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "460: #line 461 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "448: #line 449 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "517:  yych = *(YYMARKER = ++YYCURSOR);",
          "518:  if (yych == ':') goto yy95;",
          "519: yy3:",
          "521:  { return 0; }",
          "523: yy4:",
          "524:  yych = *(YYMARKER = ++YYCURSOR);",
          "525:  if (yych == ':') goto yy89;",
          "",
          "[Removed Lines]",
          "520: #line 812 \"ext/standard/var_unserializer.re\"",
          "522: #line 523 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "508: #line 785 \"ext/standard/var_unserializer.re\"",
          "510: #line 511 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "562:  goto yy3;",
          "563: yy14:",
          "564:  ++YYCURSOR;",
          "566:  {",
          "568:  php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Unexpected end of serialized data\");",
          "570: }",
          "572: yy16:",
          "573:  yych = *++YYCURSOR;",
          "574:  goto yy3;",
          "",
          "[Removed Lines]",
          "565: #line 806 \"ext/standard/var_unserializer.re\"",
          "571: #line 572 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "553: #line 779 \"ext/standard/var_unserializer.re\"",
          "559: #line 560 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "598:  yych = *++YYCURSOR;",
          "599:  if (yych != '\"') goto yy18;",
          "600:  ++YYCURSOR;",
          "602:  {",
          "603:  size_t len, len2, len3, maxlen;",
          "604:  long elements;",
          "606:  zend_class_entry *ce;",
          "608:  int incomplete_class = 0;",
          "610:  int custom_object = 0;",
          "617:  if (*start == 'C') {",
          "618:   custom_object = 1;",
          "619:  }",
          "622:  len2 = len = parse_uiv(start + 2);",
          "623:  maxlen = max - YYCURSOR;",
          "624:  if (maxlen < len || len == 0) {",
          "",
          "[Removed Lines]",
          "601: #line 660 \"ext/standard/var_unserializer.re\"",
          "605:  char *class_name;",
          "607:  zend_class_entry **pce;",
          "612:  zval *user_func;",
          "613:  zval *retval_ptr;",
          "614:  zval **args[1];",
          "615:  zval *arg_func_name;",
          "621:  INIT_PZVAL(*rval);",
          "",
          "[Added Lines]",
          "589: #line 641 \"ext/standard/var_unserializer.re\"",
          "593:  char *str;",
          "594:  zend_string *class_name;",
          "600:  zval user_func;",
          "601:  zval retval;",
          "602:  zval args[1];",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "626:   return 0;",
          "627:  }",
          "631:  YYCURSOR += len;",
          "",
          "[Removed Lines]",
          "629:  class_name = (char*)YYCURSOR;",
          "",
          "[Added Lines]",
          "616:  str = (char*)YYCURSOR;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "639:   return 0;",
          "640:  }",
          "643:  if (len3 != len)",
          "644:  {",
          "646:   return 0;",
          "647:  }",
          "651:  do {",
          "653:   BG(serialize_lock)++;",
          "655:    BG(serialize_lock)--;",
          "656:    if (EG(exception)) {",
          "658:     return 0;",
          "659:    }",
          "661:    break;",
          "662:   }",
          "663:   BG(serialize_lock)--;",
          "665:   if (EG(exception)) {",
          "667:    return 0;",
          "668:   }",
          "",
          "[Removed Lines]",
          "642:  len3 = strspn(class_name, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "649:  class_name = estrndup(class_name, len);",
          "654:   if (zend_lookup_class(class_name, len2, &pce TSRMLS_CC) == SUCCESS) {",
          "657:     efree(class_name);",
          "660:    ce = *pce;",
          "666:    efree(class_name);",
          "",
          "[Added Lines]",
          "629:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "636:  class_name = STR_INIT(str, len, 0);",
          "641:   ce = zend_lookup_class(class_name TSRMLS_CC);",
          "642:   if (ce) {",
          "645:     STR_RELEASE(class_name);",
          "653:    STR_RELEASE(class_name);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "675:   }",
          "683:   BG(serialize_lock)++;",
          "685:    BG(serialize_lock)--;",
          "686:    if (EG(exception)) {",
          "688:     zval_ptr_dtor(&user_func);",
          "690:     return 0;",
          "691:    }",
          "693:    incomplete_class = 1;",
          "694:    ce = PHP_IC_ENTRY;",
          "695:    zval_ptr_dtor(&user_func);",
          "697:    break;",
          "698:   }",
          "699:   BG(serialize_lock)--;",
          "703:   if (EG(exception)) {",
          "705:    zval_ptr_dtor(&user_func);",
          "707:    return 0;",
          "708:   }",
          "715:    incomplete_class = 1;",
          "716:    ce = PHP_IC_ENTRY;",
          "717:   }",
          "719:   zval_ptr_dtor(&user_func);",
          "721:   break;",
          "722:  } while (1);",
          "",
          "[Removed Lines]",
          "678:   MAKE_STD_ZVAL(user_func);",
          "679:   ZVAL_STRING(user_func, PG(unserialize_callback_func), 1);",
          "680:   args[0] = &arg_func_name;",
          "681:   MAKE_STD_ZVAL(arg_func_name);",
          "682:   ZVAL_STRING(arg_func_name, class_name, 1);",
          "684:   if (call_user_function_ex(CG(function_table), NULL, user_func, &retval_ptr, 1, args, 0, NULL TSRMLS_CC) != SUCCESS) {",
          "687:     efree(class_name);",
          "689:     zval_ptr_dtor(&arg_func_name);",
          "692:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"defined (%s) but not found\", user_func->value.str.val);",
          "696:    zval_ptr_dtor(&arg_func_name);",
          "700:   if (retval_ptr) {",
          "701:    zval_ptr_dtor(&retval_ptr);",
          "702:   }",
          "704:    efree(class_name);",
          "706:    zval_ptr_dtor(&arg_func_name);",
          "711:   if (zend_lookup_class(class_name, len2, &pce TSRMLS_CC) == SUCCESS) {",
          "712:    ce = *pce;",
          "713:   } else {",
          "714:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Function %s() hasn't defined the class it was called for\", user_func->value.str.val);",
          "720:   zval_ptr_dtor(&arg_func_name);",
          "",
          "[Added Lines]",
          "665:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "666:   ZVAL_STR(&args[0], class_name);",
          "668:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL TSRMLS_CC) != SUCCESS) {",
          "671:     STR_FREE(class_name);",
          "673:     zval_ptr_dtor(&args[0]);",
          "676:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "680:    zval_ptr_dtor(&args[0]);",
          "684:   zval_ptr_dtor(&retval);",
          "686:    STR_FREE(class_name);",
          "688:    zval_ptr_dtor(&args[0]);",
          "693:   if ((ce = zend_lookup_class(class_name TSRMLS_CC)) == NULL) {",
          "694:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "700:   zval_ptr_dtor(&args[0]);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "729:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "731:   if (ret && incomplete_class) {",
          "733:   }",
          "735:   return ret;",
          "736:  }",
          "738:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "740:  if (incomplete_class) {",
          "742:  }",
          "745:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "746: }",
          "748: yy25:",
          "749:  yych = *++YYCURSOR;",
          "750:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "732:    php_store_class_name(*rval, class_name, len2);",
          "734:   efree(class_name);",
          "741:   php_store_class_name(*rval, class_name, len2);",
          "743:  efree(class_name);",
          "747: #line 748 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "712:    php_store_class_name(rval, class_name->val, len2);",
          "714:   STR_FREE(class_name);",
          "721:   php_store_class_name(rval, class_name->val, len2);",
          "723:  STR_FREE(class_name);",
          "727: #line 728 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "769:  yych = *++YYCURSOR;",
          "770:  if (yych != '\"') goto yy18;",
          "771:  ++YYCURSOR;",
          "773:  {",
          "777:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "778:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "779: }",
          "781: yy32:",
          "782:  yych = *++YYCURSOR;",
          "783:  if (yych == '+') goto yy33;",
          "",
          "[Removed Lines]",
          "772: #line 652 \"ext/standard/var_unserializer.re\"",
          "775:  INIT_PZVAL(*rval);",
          "780: #line 781 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "752: #line 633 \"ext/standard/var_unserializer.re\"",
          "760: #line 761 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "798:  yych = *++YYCURSOR;",
          "799:  if (yych != '{') goto yy18;",
          "800:  ++YYCURSOR;",
          "802:  {",
          "803:  long elements = parse_iv(start + 2);",
          "",
          "[Removed Lines]",
          "801: #line 632 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "781: #line 615 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "808:   return 0;",
          "809:  }",
          "816:   return 0;",
          "817:  }",
          "819:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "820: }",
          "822: yy39:",
          "823:  yych = *++YYCURSOR;",
          "824:  if (yych == '+') goto yy40;",
          "",
          "[Removed Lines]",
          "811:  INIT_PZVAL(*rval);",
          "813:  array_init_size(*rval, elements);",
          "815:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_PP(rval), elements, 0)) {",
          "821: #line 822 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "791:  array_init_size(rval, elements);",
          "793:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "799: #line 800 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "839:  yych = *++YYCURSOR;",
          "840:  if (yych != '\"') goto yy18;",
          "841:  ++YYCURSOR;",
          "843:  {",
          "844:  size_t len, maxlen;",
          "845:  char *str;",
          "",
          "[Removed Lines]",
          "842: #line 603 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "820: #line 586 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "864:  YYCURSOR += 2;",
          "869:  return 1;",
          "870: }",
          "872: yy46:",
          "873:  yych = *++YYCURSOR;",
          "874:  if (yych == '+') goto yy47;",
          "",
          "[Removed Lines]",
          "867:  INIT_PZVAL(*rval);",
          "868:  ZVAL_STRINGL(*rval, str, len, 0);",
          "871: #line 872 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "846:  ZVAL_STRINGL(rval, str, len);",
          "849: #line 850 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "889:  yych = *++YYCURSOR;",
          "890:  if (yych != '\"') goto yy18;",
          "891:  ++YYCURSOR;",
          "893:  {",
          "894:  size_t len, maxlen;",
          "895:  char *str;",
          "",
          "[Removed Lines]",
          "892: #line 575 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "870: #line 559 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "913:  YYCURSOR += 2;",
          "918:  return 1;",
          "919: }",
          "921: yy53:",
          "922:  yych = *++YYCURSOR;",
          "923:  if (yych <= '/') {",
          "",
          "[Removed Lines]",
          "916:  INIT_PZVAL(*rval);",
          "917:  ZVAL_STRINGL(*rval, str, len, 1);",
          "920: #line 921 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "894:  ZVAL_STRINGL(rval, str, len);",
          "897: #line 898 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1005:  }",
          "1006: yy63:",
          "1007:  ++YYCURSOR;",
          "1009:  {",
          "1010: #if SIZEOF_LONG == 4",
          "1011: use_double:",
          "1012: #endif",
          "1016:  return 1;",
          "1017: }",
          "1019: yy65:",
          "1020:  yych = *++YYCURSOR;",
          "1021:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1008: #line 565 \"ext/standard/var_unserializer.re\"",
          "1014:  INIT_PZVAL(*rval);",
          "1015:  ZVAL_DOUBLE(*rval, zend_strtod((const char *)start + 2, NULL));",
          "1018: #line 1019 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "985: #line 550 \"ext/standard/var_unserializer.re\"",
          "991:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "994: #line 995 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1074:  yych = *++YYCURSOR;",
          "1075:  if (yych != ';') goto yy18;",
          "1076:  ++YYCURSOR;",
          "1078:  {",
          "1088:  }",
          "1090:  return 1;",
          "1091: }",
          "1093: yy76:",
          "1094:  yych = *++YYCURSOR;",
          "1095:  if (yych == 'N') goto yy73;",
          "",
          "[Removed Lines]",
          "1077: #line 550 \"ext/standard/var_unserializer.re\"",
          "1080:  INIT_PZVAL(*rval);",
          "1082:  if (!strncmp(start + 2, \"NAN\", 3)) {",
          "1083:   ZVAL_DOUBLE(*rval, php_get_nan());",
          "1084:  } else if (!strncmp(start + 2, \"INF\", 3)) {",
          "1085:   ZVAL_DOUBLE(*rval, php_get_inf());",
          "1086:  } else if (!strncmp(start + 2, \"-INF\", 4)) {",
          "1087:   ZVAL_DOUBLE(*rval, -php_get_inf());",
          "1092: #line 1093 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1053: #line 534 \"ext/standard/var_unserializer.re\"",
          "1057:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "1058:   ZVAL_DOUBLE(rval, php_get_nan());",
          "1059:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "1060:   ZVAL_DOUBLE(rval, php_get_inf());",
          "1061:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "1062:   ZVAL_DOUBLE(rval, -php_get_inf());",
          "1063:  } else {",
          "1064:   ZVAL_NULL(rval);",
          "1069: #line 1070 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1116:  if (yych <= '9') goto yy79;",
          "1117:  if (yych != ';') goto yy18;",
          "1118:  ++YYCURSOR;",
          "1120:  {",
          "1121: #if SIZEOF_LONG == 4",
          "1122:  int digits = YYCURSOR - start - 3;",
          "",
          "[Removed Lines]",
          "1119: #line 523 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1096: #line 508 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1129:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "1130:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "1133:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "1134:     goto use_double;",
          "",
          "[Removed Lines]",
          "1131:    int cmp = strncmp(YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "",
          "[Added Lines]",
          "1108:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1139:  }",
          "1140: #endif",
          "1144:  return 1;",
          "1145: }",
          "1147: yy83:",
          "1148:  yych = *++YYCURSOR;",
          "1149:  if (yych <= '/') goto yy18;",
          "",
          "[Removed Lines]",
          "1142:  INIT_PZVAL(*rval);",
          "1143:  ZVAL_LONG(*rval, parse_iv(start + 2));",
          "1146: #line 1147 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1119:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1122: #line 1123 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1151:  yych = *++YYCURSOR;",
          "1152:  if (yych != ';') goto yy18;",
          "1153:  ++YYCURSOR;",
          "1155:  {",
          "1159:  return 1;",
          "1160: }",
          "1162: yy87:",
          "1163:  ++YYCURSOR;",
          "1165:  {",
          "1169:  return 1;",
          "1170: }",
          "1172: yy89:",
          "1173:  yych = *++YYCURSOR;",
          "1174:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1154: #line 516 \"ext/standard/var_unserializer.re\"",
          "1157:  INIT_PZVAL(*rval);",
          "1158:  ZVAL_BOOL(*rval, parse_iv(start + 2));",
          "1161: #line 1162 \"ext/standard/var_unserializer.c\"",
          "1164: #line 509 \"ext/standard/var_unserializer.re\"",
          "1167:  INIT_PZVAL(*rval);",
          "1168:  ZVAL_NULL(*rval);",
          "1171: #line 1172 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1130: #line 502 \"ext/standard/var_unserializer.re\"",
          "1133:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1136: #line 1137 \"ext/standard/var_unserializer.c\"",
          "1139: #line 496 \"ext/standard/var_unserializer.re\"",
          "1142:  ZVAL_NULL(rval);",
          "1145: #line 1146 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1191:  if (yych <= '9') goto yy91;",
          "1192:  if (yych != ';') goto yy18;",
          "1193:  ++YYCURSOR;",
          "1195:  {",
          "1196:  long id;",
          "",
          "[Removed Lines]",
          "1194: #line 486 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1168: #line 473 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1203:   return 0;",
          "1204:  }",
          "1209:   var_push_dtor_no_addref(var_hash, rval);",
          "1210:  }",
          "1215:  return 1;",
          "1216: }",
          "1218: yy95:",
          "1219:  yych = *++YYCURSOR;",
          "1220:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1206:  if (*rval == *rval_ref) return 0;",
          "1208:  if (*rval != NULL) {",
          "1212:  Z_ADDREF_PP(rval);",
          "1213:  Z_UNSET_ISREF_PP(rval);",
          "1217: #line 1218 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1181:  if (rval == rval_ref) return 0;",
          "1183:  if (rval != NULL) {",
          "1186:  ZVAL_COPY(rval, rval_ref);",
          "1191: #line 1192 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1237:  if (yych <= '9') goto yy97;",
          "1238:  if (yych != ';') goto yy18;",
          "1239:  ++YYCURSOR;",
          "1241:  {",
          "1242:  long id;",
          "",
          "[Removed Lines]",
          "1240: #line 465 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1214: #line 453 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1249:   return 0;",
          "1250:  }",
          "1253:   zval_ptr_dtor(rval);",
          "1254:  }",
          "1259:  return 1;",
          "1260: }",
          "1262: }",
          "1266:  return 0;",
          "",
          "[Removed Lines]",
          "1252:  if (*rval != NULL) {",
          "1256:  Z_ADDREF_PP(rval);",
          "1257:  Z_SET_ISREF_PP(rval);",
          "1261: #line 1262 \"ext/standard/var_unserializer.c\"",
          "1263: #line 814 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1226:  if (rval != NULL) {",
          "1229:  ZVAL_COPY(rval, rval_ref);",
          "1234: #line 1235 \"ext/standard/var_unserializer.c\"",
          "1236: #line 787 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:  void *next;",
          "33: } var_entries;",
          "36: {",
          "37:  var_entries *var_hash = (*var_hashx)->last;",
          "38: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "35: static inline void var_push(php_unserialize_data_t *var_hashx, zval **rval)",
          "",
          "[Added Lines]",
          "35: static inline void var_push(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:   (*var_hashx)->last = var_hash;",
          "54:  }",
          "57: }",
          "60: {",
          "61:  var_entries *var_hash = (*var_hashx)->last_dtor;",
          "62: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "56:  var_hash->data[var_hash->used_slots++] = *rval;",
          "59: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval **rval)",
          "",
          "[Added Lines]",
          "56:  var_hash->data[var_hash->used_slots++] = rval;",
          "59: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:   (*var_hashx)->last_dtor = var_hash;",
          "78:  }",
          "82: }",
          "85: {",
          "86:  var_entries *var_hash = (*var_hashx)->last_dtor;",
          "87: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "80:  Z_ADDREF_PP(rval);",
          "81:  var_hash->data[var_hash->used_slots++] = *rval;",
          "84: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval **rval)",
          "",
          "[Added Lines]",
          "80:  Z_ADDREF_P(rval);",
          "81:  var_hash->data[var_hash->used_slots++] = rval;",
          "84: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:   (*var_hashx)->last_dtor = var_hash;",
          "103:  }",
          "106: }",
          "109: {",
          "110:  long i;",
          "111:  var_entries *var_hash = (*var_hashx)->first;",
          "",
          "[Removed Lines]",
          "105:  var_hash->data[var_hash->used_slots++] = *rval;",
          "108: PHPAPI void var_replace(php_unserialize_data_t *var_hashx, zval *ozval, zval **nzval)",
          "",
          "[Added Lines]",
          "105:  var_hash->data[var_hash->used_slots++] = rval;",
          "108: PHPAPI void var_replace(php_unserialize_data_t *var_hashx, zval *ozval, zval *nzval)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "116:  while (var_hash) {",
          "117:   for (i = 0; i < var_hash->used_slots; i++) {",
          "118:    if (var_hash->data[i] == ozval) {",
          "121:    }",
          "122:   }",
          "",
          "[Removed Lines]",
          "119:     var_hash->data[i] = *nzval;",
          "",
          "[Added Lines]",
          "119:     var_hash->data[i] = nzval;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "124:  }",
          "125: }",
          "128: {",
          "129:  var_entries *var_hash = (*var_hashx)->first;",
          "130: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "127: static int var_access(php_unserialize_data_t *var_hashx, long id, zval ***store)",
          "",
          "[Added Lines]",
          "127: static int var_access(php_unserialize_data_t *var_hashx, long id, zval **store)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "165:  while (var_hash) {",
          "166:   for (i = 0; i < var_hash->used_slots; i++) {",
          "168:   }",
          "169:   next = var_hash->next;",
          "170:   efree(var_hash);",
          "",
          "[Removed Lines]",
          "167:    zval_ptr_dtor(&var_hash->data[i]);",
          "",
          "[Added Lines]",
          "167:    zval_ptr_dtor(var_hash->data[i]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "290:  return result;",
          "291: }",
          "294: #define UNSERIALIZE_PASSTHRU rval, p, max, var_hash TSRMLS_CC",
          "296: static inline int process_nested_data(UNSERIALIZE_PARAMETER, HashTable *ht, long elements, int objprops)",
          "297: {",
          "298:  while (elements-- > 0) {",
          "303:   if (!php_var_unserialize(&key, p, max, NULL TSRMLS_CC)) {",
          "306:    return 0;",
          "307:   }",
          "312:    return 0;",
          "313:   }",
          "317:   if (!php_var_unserialize(&data, p, max, var_hash TSRMLS_CC)) {",
          "322:    return 0;",
          "323:   }",
          "325:   if (!objprops) {",
          "327:    case IS_LONG:",
          "329:      var_push_dtor(var_hash, old_data);",
          "330:     }",
          "332:     break;",
          "333:    case IS_STRING:",
          "335:      var_push_dtor(var_hash, old_data);",
          "336:     }",
          "338:     break;",
          "339:    }",
          "340:   } else {",
          "345:   }",
          "350:   if (elements && *(*p-1) != ';' && *(*p-1) != '}') {",
          "351:    (*p)--;",
          "",
          "[Removed Lines]",
          "293: #define UNSERIALIZE_PARAMETER zval **rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash TSRMLS_DC",
          "299:   zval *key, *data, **old_data;",
          "301:   ALLOC_INIT_ZVAL(key);",
          "304:    zval_dtor(key);",
          "305:    FREE_ZVAL(key);",
          "309:   if (Z_TYPE_P(key) != IS_LONG && Z_TYPE_P(key) != IS_STRING) {",
          "310:    zval_dtor(key);",
          "311:    FREE_ZVAL(key);",
          "315:   ALLOC_INIT_ZVAL(data);",
          "318:    zval_dtor(key);",
          "319:    FREE_ZVAL(key);",
          "320:    zval_dtor(data);",
          "321:    FREE_ZVAL(data);",
          "326:    switch (Z_TYPE_P(key)) {",
          "328:     if (zend_hash_index_find(ht, Z_LVAL_P(key), (void **)&old_data)==SUCCESS) {",
          "331:     zend_hash_index_update(ht, Z_LVAL_P(key), &data, sizeof(data), NULL);",
          "334:     if (zend_symtable_find(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, (void **)&old_data)==SUCCESS) {",
          "337:     zend_symtable_update(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, &data, sizeof(data), NULL);",
          "342:    convert_to_string(key);",
          "343:    zend_hash_update(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, &data,",
          "344:      sizeof data, NULL);",
          "347:   zval_dtor(key);",
          "348:   FREE_ZVAL(key);",
          "",
          "[Added Lines]",
          "293: #define UNSERIALIZE_PARAMETER zval *rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash TSRMLS_DC",
          "299:   zval key, data, *old_data;",
          "302:    zval_dtor(&key);",
          "306:   if (Z_TYPE(key) != IS_LONG && Z_TYPE(key) != IS_STRING) {",
          "307:    zval_dtor(&key);",
          "312:    zval_dtor(&key);",
          "313:    zval_dtor(&data);",
          "318:    switch (Z_TYPE(key)) {",
          "320:     if ((old_data = zend_hash_index_find(ht, Z_LVAL(key))) != NULL) {",
          "323:     zend_hash_index_update(ht, Z_LVAL(key), &data);",
          "326:     if ((old_data = zend_symtable_find(ht, Z_STR(key))) != NULL) {",
          "329:     zend_symtable_update(ht, Z_STR(key), &data);",
          "334:    convert_to_string(&key);",
          "335:    zend_hash_update(ht, Z_STR(key), &data);",
          "338:   zval_dtor(&key);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "381:  }",
          "383:  if (ce->unserialize == NULL) {",
          "386:  } else if (ce->unserialize(rval, ce, (const unsigned char*)*p, datalen, (zend_unserialize_data *)var_hash TSRMLS_CC) != SUCCESS) {",
          "387:   return 0;",
          "388:  }",
          "",
          "[Removed Lines]",
          "384:   zend_error(E_WARNING, \"Class %s has no unserializer\", ce->name);",
          "385:   object_init_ex(*rval, ce);",
          "",
          "[Added Lines]",
          "374:   zend_error(E_WARNING, \"Class %s has no unserializer\", ce->name->val);",
          "375:   object_init_ex(rval, ce);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "401:  (*p) += 2;",
          "404:  return elements;",
          "405: }",
          "",
          "[Removed Lines]",
          "403:  object_init_ex(*rval, ce);",
          "",
          "[Added Lines]",
          "393:  object_init_ex(rval, ce);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "409: #endif",
          "410: static inline int object_common2(UNSERIALIZE_PARAMETER, long elements)",
          "411: {",
          "413:  zval fname;",
          "416:   return 0;",
          "417:  }",
          "423:   BG(serialize_lock)++;",
          "425:   BG(serialize_lock)--;",
          "426:  }",
          "432:  if (EG(exception)) {",
          "433:   return 0;",
          "",
          "[Removed Lines]",
          "412:  zval *retval_ptr = NULL;",
          "415:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_OBJPROP_PP(rval), elements, 1)) {",
          "419:  if (Z_OBJCE_PP(rval) != PHP_IC_ENTRY &&",
          "420:   zend_hash_exists(&Z_OBJCE_PP(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\"))) {",
          "421:   INIT_PZVAL(&fname);",
          "422:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1, 0);",
          "424:   call_user_function_ex(CG(function_table), rval, &fname, &retval_ptr, 0, 0, 1, NULL TSRMLS_CC);",
          "428:  if (retval_ptr) {",
          "429:   zval_ptr_dtor(&retval_ptr);",
          "430:  }",
          "",
          "[Added Lines]",
          "402:  zval retval;",
          "405:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_OBJPROP_P(rval), elements, 1)) {",
          "409:  if (Z_OBJCE_P(rval) != PHP_IC_ENTRY &&",
          "410:   zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1)) {",
          "412:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1);",
          "414:   call_user_function_ex(CG(function_table), rval, &fname, &retval, 0, 0, 1, NULL TSRMLS_CC);",
          "418:  zval_ptr_dtor(&retval);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "443: PHPAPI int php_var_unserialize(UNSERIALIZE_PARAMETER)",
          "444: {",
          "445:  const unsigned char *cursor, *limit, *marker, *start;",
          "448:  limit = max;",
          "449:  cursor = *p;",
          "",
          "[Removed Lines]",
          "446:  zval **rval_ref;",
          "",
          "[Added Lines]",
          "434:  zval *rval_ref;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "473:   return 0;",
          "474:  }",
          "477:   zval_ptr_dtor(rval);",
          "478:  }",
          "483:  return 1;",
          "484: }",
          "",
          "[Removed Lines]",
          "476:  if (*rval != NULL) {",
          "480:  Z_ADDREF_PP(rval);",
          "481:  Z_SET_ISREF_PP(rval);",
          "",
          "[Added Lines]",
          "464:  if (rval != NULL) {",
          "467:  ZVAL_COPY(rval, rval_ref);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "494:   return 0;",
          "495:  }",
          "500:   var_push_dtor_no_addref(var_hash, rval);",
          "501:  }",
          "506:  return 1;",
          "507: }",
          "509: \"N;\" {",
          "513:  return 1;",
          "514: }",
          "516: \"b:\" [01] \";\" {",
          "520:  return 1;",
          "521: }",
          "",
          "[Removed Lines]",
          "497:  if (*rval == *rval_ref) return 0;",
          "499:  if (*rval != NULL) {",
          "503:  Z_ADDREF_PP(rval);",
          "504:  Z_UNSET_ISREF_PP(rval);",
          "511:  INIT_PZVAL(*rval);",
          "512:  ZVAL_NULL(*rval);",
          "518:  INIT_PZVAL(*rval);",
          "519:  ZVAL_BOOL(*rval, parse_iv(start + 2));",
          "",
          "[Added Lines]",
          "485:  if (rval == rval_ref) return 0;",
          "487:  if (rval != NULL) {",
          "490:  ZVAL_COPY(rval, rval_ref);",
          "498:  ZVAL_NULL(rval);",
          "504:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "532:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "533:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "536:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "537:     goto use_double;",
          "",
          "[Removed Lines]",
          "534:    int cmp = strncmp(YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "",
          "[Added Lines]",
          "519:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "542:  }",
          "543: #endif",
          "547:  return 1;",
          "548: }",
          "550: \"d:\" (\"NAN\" | \"-\"? \"INF\") \";\" {",
          "560:  }",
          "562:  return 1;",
          "",
          "[Removed Lines]",
          "545:  INIT_PZVAL(*rval);",
          "546:  ZVAL_LONG(*rval, parse_iv(start + 2));",
          "552:  INIT_PZVAL(*rval);",
          "554:  if (!strncmp(start + 2, \"NAN\", 3)) {",
          "555:   ZVAL_DOUBLE(*rval, php_get_nan());",
          "556:  } else if (!strncmp(start + 2, \"INF\", 3)) {",
          "557:   ZVAL_DOUBLE(*rval, php_get_inf());",
          "558:  } else if (!strncmp(start + 2, \"-INF\", 4)) {",
          "559:   ZVAL_DOUBLE(*rval, -php_get_inf());",
          "",
          "[Added Lines]",
          "530:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "537:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "538:   ZVAL_DOUBLE(rval, php_get_nan());",
          "539:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "540:   ZVAL_DOUBLE(rval, php_get_inf());",
          "541:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "542:   ZVAL_DOUBLE(rval, -php_get_inf());",
          "543:  } else {",
          "544:   ZVAL_NULL(rval);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "567: use_double:",
          "568: #endif",
          "572:  return 1;",
          "573: }",
          "",
          "[Removed Lines]",
          "570:  INIT_PZVAL(*rval);",
          "571:  ZVAL_DOUBLE(*rval, zend_strtod((const char *)start + 2, NULL));",
          "",
          "[Added Lines]",
          "555:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "595:  YYCURSOR += 2;",
          "600:  return 1;",
          "601: }",
          "",
          "[Removed Lines]",
          "598:  INIT_PZVAL(*rval);",
          "599:  ZVAL_STRINGL(*rval, str, len, 1);",
          "",
          "[Added Lines]",
          "582:  ZVAL_STRINGL(rval, str, len);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "624:  YYCURSOR += 2;",
          "629:  return 1;",
          "630: }",
          "",
          "[Removed Lines]",
          "627:  INIT_PZVAL(*rval);",
          "628:  ZVAL_STRINGL(*rval, str, len, 0);",
          "",
          "[Added Lines]",
          "611:  ZVAL_STRINGL(rval, str, len);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "638:   return 0;",
          "639:  }",
          "646:   return 0;",
          "647:  }",
          "",
          "[Removed Lines]",
          "641:  INIT_PZVAL(*rval);",
          "643:  array_init_size(*rval, elements);",
          "645:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_PP(rval), elements, 0)) {",
          "",
          "[Added Lines]",
          "624:  array_init_size(rval, elements);",
          "626:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "652: \"o:\" iv \":\" [\"] {",
          "656:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "657:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "",
          "[Removed Lines]",
          "654:  INIT_PZVAL(*rval);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "660: object \":\" uiv \":\" [\"] {",
          "661:  size_t len, len2, len3, maxlen;",
          "662:  long elements;",
          "664:  zend_class_entry *ce;",
          "666:  int incomplete_class = 0;",
          "668:  int custom_object = 0;",
          "675:  if (*start == 'C') {",
          "676:   custom_object = 1;",
          "677:  }",
          "680:  len2 = len = parse_uiv(start + 2);",
          "681:  maxlen = max - YYCURSOR;",
          "682:  if (maxlen < len || len == 0) {",
          "",
          "[Removed Lines]",
          "663:  char *class_name;",
          "665:  zend_class_entry **pce;",
          "670:  zval *user_func;",
          "671:  zval *retval_ptr;",
          "672:  zval **args[1];",
          "673:  zval *arg_func_name;",
          "679:  INIT_PZVAL(*rval);",
          "",
          "[Added Lines]",
          "644:  char *str;",
          "645:  zend_string *class_name;",
          "651:  zval user_func;",
          "652:  zval retval;",
          "653:  zval args[1];",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "684:   return 0;",
          "685:  }",
          "689:  YYCURSOR += len;",
          "",
          "[Removed Lines]",
          "687:  class_name = (char*)YYCURSOR;",
          "",
          "[Added Lines]",
          "667:  str = (char*)YYCURSOR;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "697:   return 0;",
          "698:  }",
          "701:  if (len3 != len)",
          "702:  {",
          "704:   return 0;",
          "705:  }",
          "709:  do {",
          "711:   BG(serialize_lock)++;",
          "713:    BG(serialize_lock)--;",
          "714:    if (EG(exception)) {",
          "716:     return 0;",
          "717:    }",
          "719:    break;",
          "720:   }",
          "721:   BG(serialize_lock)--;",
          "723:   if (EG(exception)) {",
          "725:    return 0;",
          "726:   }",
          "",
          "[Removed Lines]",
          "700:  len3 = strspn(class_name, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "707:  class_name = estrndup(class_name, len);",
          "712:   if (zend_lookup_class(class_name, len2, &pce TSRMLS_CC) == SUCCESS) {",
          "715:     efree(class_name);",
          "718:    ce = *pce;",
          "724:    efree(class_name);",
          "",
          "[Added Lines]",
          "680:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "687:  class_name = STR_INIT(str, len, 0);",
          "692:   ce = zend_lookup_class(class_name TSRMLS_CC);",
          "693:   if (ce) {",
          "696:     STR_RELEASE(class_name);",
          "704:    STR_RELEASE(class_name);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "733:   }",
          "741:   BG(serialize_lock)++;",
          "743:    BG(serialize_lock)--;",
          "744:    if (EG(exception)) {",
          "746:     zval_ptr_dtor(&user_func);",
          "748:     return 0;",
          "749:    }",
          "751:    incomplete_class = 1;",
          "752:    ce = PHP_IC_ENTRY;",
          "753:    zval_ptr_dtor(&user_func);",
          "755:    break;",
          "756:   }",
          "757:   BG(serialize_lock)--;",
          "761:   if (EG(exception)) {",
          "763:    zval_ptr_dtor(&user_func);",
          "765:    return 0;",
          "766:   }",
          "773:    incomplete_class = 1;",
          "774:    ce = PHP_IC_ENTRY;",
          "775:   }",
          "777:   zval_ptr_dtor(&user_func);",
          "779:   break;",
          "780:  } while (1);",
          "",
          "[Removed Lines]",
          "736:   MAKE_STD_ZVAL(user_func);",
          "737:   ZVAL_STRING(user_func, PG(unserialize_callback_func), 1);",
          "738:   args[0] = &arg_func_name;",
          "739:   MAKE_STD_ZVAL(arg_func_name);",
          "740:   ZVAL_STRING(arg_func_name, class_name, 1);",
          "742:   if (call_user_function_ex(CG(function_table), NULL, user_func, &retval_ptr, 1, args, 0, NULL TSRMLS_CC) != SUCCESS) {",
          "745:     efree(class_name);",
          "747:     zval_ptr_dtor(&arg_func_name);",
          "750:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"defined (%s) but not found\", user_func->value.str.val);",
          "754:    zval_ptr_dtor(&arg_func_name);",
          "758:   if (retval_ptr) {",
          "759:    zval_ptr_dtor(&retval_ptr);",
          "760:   }",
          "762:    efree(class_name);",
          "764:    zval_ptr_dtor(&arg_func_name);",
          "769:   if (zend_lookup_class(class_name, len2, &pce TSRMLS_CC) == SUCCESS) {",
          "770:    ce = *pce;",
          "771:   } else {",
          "772:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Function %s() hasn't defined the class it was called for\", user_func->value.str.val);",
          "778:   zval_ptr_dtor(&arg_func_name);",
          "",
          "[Added Lines]",
          "716:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "717:   ZVAL_STR(&args[0], class_name);",
          "719:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL TSRMLS_CC) != SUCCESS) {",
          "722:     STR_FREE(class_name);",
          "724:     zval_ptr_dtor(&args[0]);",
          "727:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "731:    zval_ptr_dtor(&args[0]);",
          "735:   zval_ptr_dtor(&retval);",
          "737:    STR_FREE(class_name);",
          "739:    zval_ptr_dtor(&args[0]);",
          "744:   if ((ce = zend_lookup_class(class_name TSRMLS_CC)) == NULL) {",
          "745:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "751:   zval_ptr_dtor(&args[0]);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "787:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "789:   if (ret && incomplete_class) {",
          "791:   }",
          "793:   return ret;",
          "794:  }",
          "796:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "798:  if (incomplete_class) {",
          "800:  }",
          "803:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "804: }",
          "",
          "[Removed Lines]",
          "790:    php_store_class_name(*rval, class_name, len2);",
          "792:   efree(class_name);",
          "799:   php_store_class_name(*rval, class_name, len2);",
          "801:  efree(class_name);",
          "",
          "[Added Lines]",
          "763:    php_store_class_name(rval, class_name->val, len2);",
          "765:   STR_FREE(class_name);",
          "772:   php_store_class_name(rval, class_name->val, len2);",
          "774:  STR_FREE(class_name);",
          "",
          "---------------"
        ],
        "main/streams/php_stream_context.h||main/streams/php_stream_context.h": [
          "File: main/streams/php_stream_context.h -> main/streams/php_stream_context.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   FG(default_context) ? FG(default_context) : \\",
          "39:   (FG(default_context) = php_stream_context_alloc(TSRMLS_C)) )",
          "43: typedef struct _php_stream_notifier php_stream_notifier;",
          "",
          "[Removed Lines]",
          "41: #define php_stream_context_to_zval(context, zval) { ZVAL_RESOURCE(zval, (context)->res); zend_list_addref((context)->res); }",
          "",
          "[Added Lines]",
          "41: #define php_stream_context_to_zval(context, zval) { ZVAL_RES(zval, (context)->res); (context)->res->gc.refcount++; }",
          "",
          "---------------"
        ]
      }
    }
  ]
}