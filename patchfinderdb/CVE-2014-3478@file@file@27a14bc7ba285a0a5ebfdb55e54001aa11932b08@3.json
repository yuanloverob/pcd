{
  "cve_id": "CVE-2014-3478",
  "cve_desc": "Buffer overflow in the mconvert function in softmagic.c in file before 5.19, as used in the Fileinfo component in PHP before 5.4.30 and 5.5.x before 5.5.14, allows remote attackers to cause a denial of service (application crash) via a crafted Pascal string in a FILE_PSTRING conversion.",
  "repo": "file/file",
  "patch_hash": "27a14bc7ba285a0a5ebfdb55e54001aa11932b08",
  "patch_info": {
    "commit_hash": "27a14bc7ba285a0a5ebfdb55e54001aa11932b08",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/27a14bc7ba285a0a5ebfdb55e54001aa11932b08",
    "files": [
      "src/softmagic.c"
    ],
    "message": "Correctly compute the truncated pascal string size (Francisco Alonso and Jan Kaluza at RedHat)",
    "before_after_code_files": [
      "src/softmagic.c||src/softmagic.c"
    ]
  },
  "patch_diff": {
    "src/softmagic.c||src/softmagic.c": [
      "File: src/softmagic.c -> src/softmagic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"file.h\"",
      "34: #ifndef lint",
      "38: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.189 2014/05/30 16:47:44 christos Exp $\")",
      "",
      "[Added Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.190 2014/06/03 19:01:34 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "940:   return 1;",
      "941:  }",
      "942:  case FILE_PSTRING: {",
      "944:   size_t len = file_pstring_get_length(m, ptr1);",
      "947:   while (len--)",
      "",
      "[Removed Lines]",
      "943:   char *ptr1 = p->s, *ptr2 = ptr1 + file_pstring_length_size(m);",
      "945:   if (len >= sizeof(p->s))",
      "946:    len = sizeof(p->s) - 1;",
      "",
      "[Added Lines]",
      "943:   size_t sz = file_pstring_length_size(m);",
      "944:   char *ptr1 = p->s, *ptr2 = ptr1 + sz;",
      "946:   if (len >= sizeof(p->s)) {",
      "953:    len = sizeof(p->s) - sz;",
      "954:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c0c0032b9e9eb57b91fefef905a3b018bab492d9",
      "candidate_info": {
        "commit_hash": "c0c0032b9e9eb57b91fefef905a3b018bab492d9",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/c0c0032b9e9eb57b91fefef905a3b018bab492d9",
        "files": [
          "src/softmagic.c"
        ],
        "message": "Fix memory leak (Anatol Belski)",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.175 2014/02/18 11:09:31 kim Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.176 2014/02/18 17:59:21 kim Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1762:   ms->offset = soffset;",
          "1763:   if (rv == 1) {",
          "1764:    if ((ms->flags & (MAGIC_MIME|MAGIC_APPLE)) == 0 &&",
          "1766:     return -1;",
          "1768:     return -1;",
          "1770:   }",
          "1771:   return rv;",
          "1773:  case FILE_USE:",
          "",
          "[Removed Lines]",
          "1765:        file_printf(ms, F(m->desc, \"%u\"), offset) == -1)",
          "1767:    if (file_printf(ms, \"%s\", rbuf) == -1)",
          "1769:    free(rbuf);",
          "",
          "[Added Lines]",
          "1765:        file_printf(ms, F(m->desc, \"%u\"), offset) == -1) {",
          "1766:     free(rbuf);",
          "1768:    }",
          "1769:    if (file_printf(ms, \"%s\", rbuf) == -1) {",
          "1770:     free(rbuf);",
          "1772:    }",
          "1774:   free(rbuf);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "defbf8856b8f519f5979f65623ec18266741de50",
      "candidate_info": {
        "commit_hash": "defbf8856b8f519f5979f65623ec18266741de50",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/defbf8856b8f519f5979f65623ec18266741de50",
        "files": [
          "src/softmagic.c"
        ],
        "message": "search and regex don't copy stuff to value.",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.206 2015/01/01 17:07:34 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.207 2015/01/02 21:29:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:   t = ms->offset + sizeof(uint64_t);",
          "590:   break;",
          "595:   vf = p->f;",
          "596:   switch (check_fmt(ms, m)) {",
          "597:   case -1:",
          "",
          "[Removed Lines]",
          "592:    case FILE_FLOAT:",
          "593:    case FILE_BEFLOAT:",
          "594:    case FILE_LEFLOAT:",
          "",
          "[Added Lines]",
          "592:  case FILE_FLOAT:",
          "593:  case FILE_BEFLOAT:",
          "594:  case FILE_LEFLOAT:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "609:   t = ms->offset + sizeof(float);",
          "610:     break;",
          "615:   vd = p->d;",
          "616:   switch (check_fmt(ms, m)) {",
          "617:   case -1:",
          "",
          "[Removed Lines]",
          "612:    case FILE_DOUBLE:",
          "613:    case FILE_BEDOUBLE:",
          "614:    case FILE_LEDOUBLE:",
          "",
          "[Added Lines]",
          "612:  case FILE_DOUBLE:",
          "613:  case FILE_BEDOUBLE:",
          "614:  case FILE_LEDOUBLE:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "629:   t = ms->offset + sizeof(double);",
          "630:     break;",
          "632:  case FILE_REGEX: {",
          "633:   char *cp;",
          "634:   int rval;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632:  case FILE_SEARCH:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "652:   break;",
          "653:  }",
          "665:  case FILE_DEFAULT:",
          "666:  case FILE_CLEAR:",
          "667:     if (file_printf(ms, \"%s\", m->desc) == -1)",
          "",
          "[Removed Lines]",
          "655:  case FILE_SEARCH:",
          "656:     if (file_printf(ms, F(ms, m, \"%s\"),",
          "657:       file_printable(sbuf, sizeof(sbuf), m->value.s)) == -1)",
          "658:    return -1;",
          "659:   if ((m->str_flags & REGEX_OFFSET_START))",
          "660:    t = ms->search.offset;",
          "661:   else",
          "662:    t = ms->search.offset + m->vallen;",
          "663:   break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1965:        m->str_flags);",
          "1967:     ms->search.offset += idx;",
          "1968:     break;",
          "1969:    }",
          "1970:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1959:     ms->search.rm_len = m->str_range - idx;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc9e74dfeca5265ad725acc926ef0b8d2a18ee70",
      "candidate_info": {
        "commit_hash": "cc9e74dfeca5265ad725acc926ef0b8d2a18ee70",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/cc9e74dfeca5265ad725acc926ef0b8d2a18ee70",
        "files": [
          "src/ascmagic.c",
          "src/file.h",
          "src/funcs.c",
          "src/softmagic.c"
        ],
        "message": "count indirect recursion as recursion.",
        "before_after_code_files": [
          "src/ascmagic.c||src/ascmagic.c",
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ascmagic.c||src/ascmagic.c": [
          "File: src/ascmagic.c -> src/ascmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.86 2013/06/08 14:13:12 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.87 2013/09/17 15:51:22 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:       == NULL)",
          "148:    goto done;",
          "149:   if ((rv = file_softmagic(ms, utf8_buf,",
          "151:    rv = -1;",
          "152:  }",
          "",
          "[Removed Lines]",
          "150:       (size_t)(utf8_end - utf8_buf), TEXTTEST, text)) == 0)",
          "",
          "[Added Lines]",
          "150:       (size_t)(utf8_end - utf8_buf), 0, TEXTTEST, text)) == 0)",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "439:     unichar **, size_t *, const char **, const char **, const char **);",
          "440: protected int file_is_tar(struct magic_set *, const unsigned char *, size_t);",
          "441: protected int file_softmagic(struct magic_set *, const unsigned char *, size_t,",
          "443: protected int file_apprentice(struct magic_set *, const char *, int);",
          "444: protected int file_magicfind(struct magic_set *, const char *, struct mlist *);",
          "445: protected uint64_t file_signextend(struct magic_set *, struct magic *,",
          "",
          "[Removed Lines]",
          "442:     int, int);",
          "",
          "[Added Lines]",
          "442:     size_t, int, int);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.65 2013/12/05 17:02:34 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.66 2014/01/07 03:15:09 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:  if ((ms->flags & MAGIC_NO_CHECK_SOFT) == 0)",
          "234:       looks_text)) != 0) {",
          "235:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "236:     (void)fprintf(stderr, \"softmagic %d\\n\", m);",
          "",
          "[Removed Lines]",
          "233:   if ((m = file_softmagic(ms, ubuf, nb, BINTEST,",
          "",
          "[Added Lines]",
          "233:   if ((m = file_softmagic(ms, ubuf, nb, 0, BINTEST,",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.172 2014/01/08 22:22:54 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.173 2014/02/11 15:41:25 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80: protected int",
          "81: file_softmagic(struct magic_set *ms, const unsigned char *buf, size_t nbytes,",
          "83: {",
          "84:  struct mlist *ml;",
          "85:  int rv, printed_something = 0, need_separator = 0;",
          "86:  for (ml = ms->mlist[0]->next; ml != ms->mlist[0]; ml = ml->next)",
          "87:   if ((rv = match(ms, ml->magic, ml->nmagic, buf, nbytes, 0, mode,",
          "89:       NULL)) != 0)",
          "90:    return rv;",
          "",
          "[Removed Lines]",
          "82:     int mode, int text)",
          "88:       text, 0, 0, &printed_something, &need_separator,",
          "",
          "[Added Lines]",
          "82:     size_t level, int mode, int text)",
          "88:       text, 0, level, &printed_something, &need_separator,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1747:   ms->o.buf = NULL;",
          "1748:   ms->offset = 0;",
          "1749:   rv = file_softmagic(ms, s + offset, nbytes - offset,",
          "1751:   if ((ms->flags & MAGIC_DEBUG) != 0)",
          "1752:    fprintf(stderr, \"indirect @offs=%u[%d]\\n\", offset, rv);",
          "1753:   rbuf = ms->o.buf;",
          "",
          "[Removed Lines]",
          "1750:       BINTEST, text);",
          "",
          "[Added Lines]",
          "1750:       recursion_level, BINTEST, text);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a284c89d6ef11aca34da65da7d673050a5ea320",
      "candidate_info": {
        "commit_hash": "4a284c89d6ef11aca34da65da7d673050a5ea320",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/4a284c89d6ef11aca34da65da7d673050a5ea320",
        "files": [
          "ChangeLog",
          "doc/magic.man",
          "magic/Magdir/android",
          "magic/Magdir/fortran",
          "magic/Magdir/graphviz",
          "magic/Magdir/marc21",
          "magic/Magdir/scientific",
          "magic/Magdir/troff",
          "src/apprentice.c",
          "src/file.h",
          "src/softmagic.c"
        ],
        "message": "* Enforce limit of 8K on regex searches that have no limits * Allow the l modifier for regex to mean line count. Default   to byte count. If line count is specified, assume a max   of 80 characters per line to limit the byte count. * Don't allow conversions to be used for dates, allowing   the mask field to be used as an offset. * Bump the version of the magic format so that regex changes   are visible.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/file.h||src/file.h",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.209 2014/05/13 16:42:17 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.210 2014/05/14 23:15:42 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1382:  if ((ms->flags & MAGIC_CHECK) == 0)",
          "1383:   return 0;",
          "1386:   file_magwarn(ms,",
          "1387:       \"'/BHhLl' modifiers are only allowed for pascal strings\\n\");",
          "1388:   return -1;",
          "",
          "[Removed Lines]",
          "1385:  if (m->type != FILE_PSTRING && (m->str_flags & PSTRING_LEN) != 0) {",
          "",
          "[Added Lines]",
          "1385:  if ((m->type != FILE_REGEX || (m->str_flags & REGEX_LINE_COUNT) == 0) &&",
          "1386:      (m->type != FILE_PSTRING && (m->str_flags & PSTRING_LEN) != 0)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1875:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_BE;",
          "1876:      break;",
          "1877:     case CHAR_PSTRING_4_LE:",
          "1879:       goto bad;",
          "1880:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_LE;",
          "1881:      break;",
          "1882:     case CHAR_PSTRING_LENGTH_INCLUDES_ITSELF:",
          "",
          "[Removed Lines]",
          "1878:      if (m->type != FILE_PSTRING)",
          "",
          "[Added Lines]",
          "1879:      switch (m->type) {",
          "1880:      case FILE_PSTRING:",
          "1881:      case FILE_REGEX:",
          "1882:       break;",
          "1883:      default:",
          "1885:      }",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: #define MAGICNO  0xF11E041C",
          "137: #define FILE_MAGICSIZE 248",
          "139: #define FILE_LOAD 0",
          "",
          "[Removed Lines]",
          "136: #define VERSIONNO 11",
          "",
          "[Added Lines]",
          "136: #define VERSIONNO 12",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "321: #define PSTRING_2_LE    BIT(9)",
          "322: #define PSTRING_4_BE    BIT(10)",
          "323: #define PSTRING_4_LE    BIT(11)",
          "324: #define PSTRING_LEN \\",
          "325:     (PSTRING_1_BE|PSTRING_2_LE|PSTRING_2_BE|PSTRING_4_LE|PSTRING_4_BE)",
          "326: #define PSTRING_LENGTH_INCLUDES_ITSELF  BIT(12)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324: #define REGEX_LINE_COUNT   BIT(11)",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.188 2014/05/14 23:15:42 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.189 2014/05/30 16:47:44 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: private int32_t moffset(struct magic_set *, struct magic *);",
          "58: private void mdebug(uint32_t, const char *, size_t);",
          "59: private int mcopy(struct magic_set *, union VALUETYPE *, int, int,",
          "61: private int mconvert(struct magic_set *, struct magic *, int);",
          "62: private int print_sep(struct magic_set *, int);",
          "63: private int handle_annotation(struct magic_set *, struct magic *);",
          "",
          "[Removed Lines]",
          "60:     const unsigned char *, uint32_t, size_t, size_t);",
          "",
          "[Added Lines]",
          "60:     const unsigned char *, uint32_t, size_t, struct magic *);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "540:  case FILE_LEDATE:",
          "541:  case FILE_MEDATE:",
          "542:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "544:    return -1;",
          "545:   t = ms->offset + sizeof(uint32_t);",
          "546:   break;",
          "",
          "[Removed Lines]",
          "543:       file_fmttime(p->l, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "543:       file_fmttime(p->l + m->num_mask, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "550:  case FILE_LELDATE:",
          "551:  case FILE_MELDATE:",
          "552:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "554:    return -1;",
          "555:   t = ms->offset + sizeof(uint32_t);",
          "556:   break;",
          "",
          "[Removed Lines]",
          "553:       file_fmttime(p->l, 0, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "553:       file_fmttime(p->l + m->num_mask, 0, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "559:  case FILE_BEQDATE:",
          "560:  case FILE_LEQDATE:",
          "561:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "563:    return -1;",
          "564:   t = ms->offset + sizeof(uint64_t);",
          "565:   break;",
          "",
          "[Removed Lines]",
          "562:       file_fmttime(p->q, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "562:       file_fmttime(p->q + m->num_mask, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "568:  case FILE_BEQLDATE:",
          "569:  case FILE_LEQLDATE:",
          "570:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "572:    return -1;",
          "573:   t = ms->offset + sizeof(uint64_t);",
          "574:   break;",
          "",
          "[Removed Lines]",
          "571:       file_fmttime(p->q, 0, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "571:       file_fmttime(p->q + m->num_mask, 0, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "577:  case FILE_BEQWDATE:",
          "578:  case FILE_LEQWDATE:",
          "579:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "581:    return -1;",
          "582:   t = ms->offset + sizeof(uint64_t);",
          "583:   break;",
          "",
          "[Removed Lines]",
          "580:       file_fmttime(p->q, FILE_T_WINDOWS, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "580:       file_fmttime(p->q + m->num_mask, FILE_T_WINDOWS, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "912: mconvert(struct magic_set *ms, struct magic *m, int flip)",
          "913: {",
          "914:  union VALUETYPE *p = &ms->ms_value;",
          "917:  case FILE_BYTE:",
          "918:   cvt_8(p, m);",
          "919:   return 1;",
          "",
          "[Removed Lines]",
          "916:  switch (cvt_flip(m->type, flip)) {",
          "",
          "[Added Lines]",
          "915:  uint8_t type;",
          "917:  switch (type = cvt_flip(m->type, flip)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "957:  case FILE_BELDATE:",
          "958:   p->l = (int32_t)",
          "959:       ((p->hl[0]<<24)|(p->hl[1]<<16)|(p->hl[2]<<8)|(p->hl[3]));",
          "961:   return 1;",
          "962:  case FILE_BEQUAD:",
          "963:  case FILE_BEQDATE:",
          "",
          "[Removed Lines]",
          "960:   cvt_32(p, m);",
          "",
          "[Added Lines]",
          "961:   if (type == FILE_BELONG)",
          "962:    cvt_32(p, m);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "968:        ((uint64_t)p->hq[2]<<40)|((uint64_t)p->hq[3]<<32)|",
          "969:        ((uint64_t)p->hq[4]<<24)|((uint64_t)p->hq[5]<<16)|",
          "970:        ((uint64_t)p->hq[6]<<8)|((uint64_t)p->hq[7]));",
          "972:   return 1;",
          "973:  case FILE_LESHORT:",
          "974:   p->h = (short)((p->hs[1]<<8)|(p->hs[0]));",
          "",
          "[Removed Lines]",
          "971:   cvt_64(p, m);",
          "",
          "[Added Lines]",
          "973:   if (type == FILE_BEQUAD)",
          "974:    cvt_64(p, m);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "979:  case FILE_LELDATE:",
          "980:   p->l = (int32_t)",
          "981:       ((p->hl[3]<<24)|(p->hl[2]<<16)|(p->hl[1]<<8)|(p->hl[0]));",
          "983:   return 1;",
          "984:  case FILE_LEQUAD:",
          "985:  case FILE_LEQDATE:",
          "",
          "[Removed Lines]",
          "982:   cvt_32(p, m);",
          "",
          "[Added Lines]",
          "985:   if (type == FILE_LELONG)",
          "986:    cvt_32(p, m);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "990:        ((uint64_t)p->hq[5]<<40)|((uint64_t)p->hq[4]<<32)|",
          "991:        ((uint64_t)p->hq[3]<<24)|((uint64_t)p->hq[2]<<16)|",
          "992:        ((uint64_t)p->hq[1]<<8)|((uint64_t)p->hq[0]));",
          "994:   return 1;",
          "995:  case FILE_MELONG:",
          "996:  case FILE_MEDATE:",
          "997:  case FILE_MELDATE:",
          "998:   p->l = (int32_t)",
          "999:       ((p->hl[1]<<24)|(p->hl[0]<<16)|(p->hl[3]<<8)|(p->hl[2]));",
          "1001:   return 1;",
          "1002:  case FILE_FLOAT:",
          "1003:   cvt_float(p, m);",
          "",
          "[Removed Lines]",
          "993:   cvt_64(p, m);",
          "1000:   cvt_32(p, m);",
          "",
          "[Added Lines]",
          "997:   if (type == FILE_LEQUAD)",
          "998:    cvt_64(p, m);",
          "1005:   if (type == FILE_MELONG)",
          "1006:    cvt_32(p, m);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1055: private int",
          "1056: mcopy(struct magic_set *ms, union VALUETYPE *p, int type, int indir,",
          "1058: {",
          "",
          "[Removed Lines]",
          "1057:     const unsigned char *s, uint32_t offset, size_t nbytes, size_t linecnt)",
          "",
          "[Added Lines]",
          "1063:     const unsigned char *s, uint32_t offset, size_t nbytes, struct magic *m)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1076:    const char *end;",
          "1079:    if (s == NULL) {",
          "1080:     ms->search.s_len = 0;",
          "1081:     ms->search.s = NULL;",
          "1082:     return 0;",
          "1083:    }",
          "1084:    buf = RCAST(const char *, s) + offset;",
          "1087:    for (lines = linecnt, b = buf; lines && b < end &&",
          "1088:         ((b = CAST(const char *,",
          "",
          "[Removed Lines]",
          "1077:    size_t lines;",
          "1085:    end = last = RCAST(const char *, s) + nbytes;",
          "",
          "[Added Lines]",
          "1083:    size_t lines, linecnt, bytecnt;",
          "1091:    if (m->str_flags & REGEX_LINE_COUNT) {",
          "1092:     linecnt = m->str_range;",
          "1093:     bytecnt = linecnt * 80;",
          "1094:    } else {",
          "1095:     linecnt = 0;",
          "1096:     bytecnt = m->str_range;",
          "1097:    }",
          "1099:    if (bytecnt == 0)",
          "1100:     bytecnt = 8192;",
          "1101:    if (bytecnt > nbytes)",
          "1102:     bytecnt = nbytes;",
          "1105:    end = last = RCAST(const char *, s) + bytecnt;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1095:      b++;",
          "1096:    }",
          "1097:    if (lines)",
          "1100:    ms->search.s = buf;",
          "1101:    ms->search.s_len = last - buf;",
          "",
          "[Removed Lines]",
          "1098:     last = RCAST(const char *, s) + nbytes;",
          "",
          "[Added Lines]",
          "1118:     last = RCAST(const char *, s) + bytecnt;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1166:     int *need_separator, int *returnval)",
          "1167: {",
          "1168:  uint32_t soffset, offset = ms->offset;",
          "1170:  uint32_t lhs;",
          "1171:  int rv, oneed_separator, in_type;",
          "1172:  char *sbuf, *rbuf;",
          "",
          "[Removed Lines]",
          "1169:  uint32_t count = m->str_range;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1179:  }",
          "1181:  if (mcopy(ms, p, m->type, m->flag & INDIR, s, (uint32_t)(offset + o),",
          "1183:   return -1;",
          "1185:  if ((ms->flags & MAGIC_DEBUG) != 0) {",
          "1186:   fprintf(stderr, \"mget(type=%d, flag=%x, offset=%u, o=%zu, \"",
          "1189:   mdebug(offset, (char *)(void *)p, sizeof(union VALUETYPE));",
          "1190: #ifndef COMPILE_ONLY",
          "1191:   file_mdump(m);",
          "",
          "[Removed Lines]",
          "1182:      (uint32_t)nbytes, count) == -1)",
          "1187:       \"nbytes=%zu, count=%u)\\n\", m->type, m->flag, offset, o,",
          "1188:       nbytes, count);",
          "",
          "[Added Lines]",
          "1201:      (uint32_t)nbytes, m) == -1)",
          "1206:       \"nbytes=%zu)\\n\", m->type, m->flag, offset, o, nbytes);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1550:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "1551:     fprintf(stderr, \"indirect +offs=%u\\n\", offset);",
          "1552:   }",
          "1554:    return -1;",
          "1555:   ms->offset = offset;",
          "",
          "[Removed Lines]",
          "1553:   if (mcopy(ms, p, m->type, 0, s, offset, nbytes, count) == -1)",
          "",
          "[Added Lines]",
          "1571:   if (mcopy(ms, p, m->type, 0, s, offset, nbytes, m) == -1)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1906:    if (slen + idx > ms->search.s_len)",
          "1907:     break;",
          "1911:     ms->search.offset += idx;",
          "1912:     break;",
          "",
          "[Removed Lines]",
          "1909:    v = file_strncmp(m->value.s, ms->search.s + idx, slen, m->str_flags);",
          "",
          "[Added Lines]",
          "1927:    v = file_strncmp(m->value.s, ms->search.s + idx, slen,",
          "1928:        m->str_flags);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1929:    file_regerror(&rx, rc, ms);",
          "1930:    v = (uint64_t)-1;",
          "1931:   } else {",
          "1935:    regmatch_t pmatch[1];",
          "1936:    size_t slen = ms->search.s_len;",
          "1940: #ifndef REG_STARTEND",
          "1941: #define REG_STARTEND 0",
          "1942:    if (slen != 0)",
          "1943:     slen--;",
          "1944:    c = ms->search.s[slen];",
          "",
          "[Removed Lines]",
          "1932: #ifndef REG_STARTEND",
          "1933:    char c;",
          "1934: #endif",
          "1938:    if (m->str_range > 0)",
          "1939:     slen = MIN(slen, m->str_range);",
          "",
          "[Added Lines]",
          "1955:    char c;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
      "candidate_info": {
        "commit_hash": "a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
        "files": [
          "ChangeLog",
          "src/file.h",
          "src/funcs.c",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "* change printable -> file_printable and use it in more places for safety * in ELF, instead of \"(uses dynamic libraries)\" when PT_INTERP   is present print the interpreter name.",
        "before_after_code_files": [
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:     size_t *);",
          "477: protected size_t file_pstring_length_size(const struct magic *);",
          "478: protected size_t file_pstring_get_length(const struct magic *, const char *);",
          "479: #ifdef __EMX__",
          "480: protected int file_os2_apptype(struct magic_set *, const char *, const void *,",
          "481:     size_t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479: protected char * file_printable(char *, size_t, const char *);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.76 2014/11/28 02:35:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.77 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531:  free(pb);",
          "532:  return rbuf;",
          "533: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538: protected char *",
          "539: file_printable(char *buf, size_t bufsiz, const char *str)",
          "540: {",
          "541:  char *ptr, *eptr;",
          "542:  const unsigned char *s = (const unsigned char *)str;",
          "544:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "545:   if (isprint(*s)) {",
          "547:    continue;",
          "548:   }",
          "549:   if (ptr >= eptr + 4)",
          "550:    break;",
          "555:  }",
          "557:  return buf;",
          "558: }",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.110 2014/12/09 02:47:07 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.111 2014/12/09 02:47:45 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "489: #endif",
          "490:  uint32_t namesz, descsz;",
          "491:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
          "493:  if (xnh_sizeof + offset > size) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:  char sbuf[512];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "740:    if (file_printf(ms, \", from '%.31s'\",",
          "742:     return size;",
          "",
          "[Removed Lines]",
          "741:        &nbuf[doff + 0x7c]) == -1)",
          "",
          "[Added Lines]",
          "742:        file_printable(sbuf, sizeof(sbuf),",
          "743:        (const char *)&nbuf[doff + 0x7c])) == -1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1163:  Elf32_Phdr ph32;",
          "1164:  Elf64_Phdr ph64;",
          "1165:  const char *linking_style = \"statically\";",
          "1167:  unsigned char nbuf[BUFSIZ];",
          "1168:  ssize_t bufsize;",
          "1169:  size_t offset, align, len;",
          "",
          "[Removed Lines]",
          "1166:  const char *shared_libraries = \"\";",
          "",
          "[Added Lines]",
          "1168:  const char *interp = \"\";",
          "1170:  char ibuf[BUFSIZ];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1181:   }",
          "1183:   off += size;",
          "1186:   switch (xph_type) {",
          "1187:   case PT_DYNAMIC:",
          "1188:    linking_style = \"dynamically\";",
          "1189:    break;",
          "1190:   case PT_INTERP:",
          "1192:    break;",
          "1193:   default:",
          "1194:    if (fsize != SIZE_UNKNOWN && xph_offset > fsize) {",
          "",
          "[Removed Lines]",
          "1191:    shared_libraries = \" (uses shared libs)\";",
          "",
          "[Added Lines]",
          "1187:   bufsize = 0;",
          "1188:   align = 4;",
          "1195:   case PT_NOTE:",
          "1197:     continue;",
          "1198:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1199:        align < 4) {",
          "1200:     if (file_printf(ms,",
          "1201:         \", invalid note alignment 0x%lx\",",
          "1202:         (unsigned long)align) == -1)",
          "1203:      return -1;",
          "1204:     align = 4;",
          "1205:    }",
          "1208:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1209:        : sizeof(nbuf);",
          "1210:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1211:    if (bufsize == -1) {",
          "1212:     file_badread(ms);",
          "1213:     return -1;",
          "1214:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1202:   switch (xph_type) {",
          "1211:    }",
          "1225:    offset = 0;",
          "1226:    for (;;) {",
          "1227:     if (offset >= (size_t)bufsize)",
          "",
          "[Removed Lines]",
          "1203:   case PT_NOTE:",
          "1204:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1205:        align < 4) {",
          "1206:     if (file_printf(ms,",
          "1207:         \", invalid note alignment 0x%lx\",",
          "1208:         (unsigned long)align) == -1)",
          "1209:      return -1;",
          "1210:     align = 4;",
          "1212:    if (sh_num)",
          "1213:     break;",
          "1218:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1219:        : sizeof(nbuf);",
          "1220:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1221:    if (bufsize == -1) {",
          "1222:     file_badread(ms);",
          "1223:     return -1;",
          "1224:    }",
          "",
          "[Added Lines]",
          "1226:   case PT_INTERP:",
          "1227:    if (bufsize) {",
          "1228:     nbuf[bufsize - 1] = '\\0';",
          "1229:     interp = (const char *)nbuf;",
          "1231:    break;",
          "1232:   case PT_NOTE:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1237:    break;",
          "1238:   }",
          "1239:  }",
          "1241:      == -1)",
          "1243:  return 0;",
          "1244: }",
          "",
          "[Removed Lines]",
          "1240:  if (file_printf(ms, \", %s linked%s\", linking_style, shared_libraries)",
          "1242:      return -1;",
          "",
          "[Added Lines]",
          "1252:  if (file_printf(ms, \", %s linked\", linking_style)",
          "1254:   return -1;",
          "1255:  if (interp[0])",
          "1256:   if (file_printf(ms, \", interpreter %s\",",
          "1257:       file_printable(ibuf, sizeof(ibuf), interp)) == -1)",
          "1258:    return -1;",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.202 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.203 2014/12/04 15:22:05 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404: }",
          "429: private int32_t",
          "430: mprint(struct magic_set *ms, struct magic *m)",
          "431: {",
          "",
          "[Removed Lines]",
          "407: static char *",
          "408: printable(char *buf, size_t bufsiz, const char *str)",
          "409: {",
          "410:  char *ptr, *eptr;",
          "411:  const unsigned char *s = (const unsigned char *)str;",
          "413:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "414:   if (isprint(*s)) {",
          "416:    continue;",
          "417:   }",
          "418:   if (ptr >= eptr + 4)",
          "419:    break;",
          "424:  }",
          "426:  return buf;",
          "427: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:  float vf;",
          "434:  double vd;",
          "435:  int64_t t = 0;",
          "437:  union VALUETYPE *p = &ms->ms_value;",
          "439:    switch (m->type) {",
          "",
          "[Removed Lines]",
          "436:   char buf[128], tbuf[26];",
          "",
          "[Added Lines]",
          "414:   char buf[128], tbuf[26], sbuf[512];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "527:    case FILE_BESTRING16:",
          "528:    case FILE_LESTRING16:",
          "529:   if (m->reln == '=' || m->reln == '!') {",
          "531:     return -1;",
          "532:    t = ms->offset + m->vallen;",
          "533:   }",
          "534:   else {",
          "536:    char *str = p->s;",
          "",
          "[Removed Lines]",
          "530:    if (file_printf(ms, F(ms, m, \"%s\"), m->value.s) == -1)",
          "535:    char sbuf[512];",
          "",
          "[Added Lines]",
          "508:    if (file_printf(ms, F(ms, m, \"%s\"),",
          "509:        file_printable(sbuf, sizeof(sbuf), m->value.s))",
          "510:        == -1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "555:    }",
          "557:    if (file_printf(ms, F(ms, m, \"%s\"),",
          "559:     return -1;",
          "561:    if (m->type == FILE_PSTRING)",
          "",
          "[Removed Lines]",
          "558:        printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "[Added Lines]",
          "537:        file_printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "659:    file_oomem(ms, ms->search.rm_len);",
          "660:    return -1;",
          "661:   }",
          "663:   free(cp);",
          "665:   if (rval == -1)",
          "",
          "[Removed Lines]",
          "662:   rval = file_printf(ms, F(ms, m, \"%s\"), cp);",
          "",
          "[Added Lines]",
          "641:   rval = file_printf(ms, F(ms, m, \"%s\"),",
          "642:       file_printable(sbuf, sizeof(sbuf), cp));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "673:  }",
          "675:  case FILE_SEARCH:",
          "677:    return -1;",
          "678:   if ((m->str_flags & REGEX_OFFSET_START))",
          "679:    t = ms->search.offset;",
          "",
          "[Removed Lines]",
          "676:     if (file_printf(ms, F(ms, m, \"%s\"), m->value.s) == -1)",
          "",
          "[Added Lines]",
          "656:     if (file_printf(ms, F(ms, m, \"%s\"),",
          "657:       file_printable(sbuf, sizeof(sbuf), m->value.s)) == -1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}