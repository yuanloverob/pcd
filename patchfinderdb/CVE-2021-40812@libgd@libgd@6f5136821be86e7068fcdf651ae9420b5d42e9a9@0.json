{
  "cve_id": "CVE-2021-40812",
  "cve_desc": "The GD Graphics Library (aka LibGD) through 2.3.2 has an out-of-bounds read because of the lack of certain gdGetBuf and gdPutBuf return value checks.",
  "repo": "libgd/libgd",
  "patch_hash": "6f5136821be86e7068fcdf651ae9420b5d42e9a9",
  "patch_info": {
    "commit_hash": "6f5136821be86e7068fcdf651ae9420b5d42e9a9",
    "repo": "libgd/libgd",
    "commit_url": "https://github.com/libgd/libgd/commit/6f5136821be86e7068fcdf651ae9420b5d42e9a9",
    "files": [
      "src/gd_bmp.c",
      "src/gd_webp.c",
      "README.md",
      "src/gd2topng.c",
      "tests/png/bug00338.c"
    ],
    "message": "Merge pull request #755 from libgd/bug/750\n\nPartial fix for #750, BMP and WebP. Gif's usage of PutBuf needs too much refactoring for the actual gain here.\"",
    "before_after_code_files": [
      "src/gd_bmp.c||src/gd_bmp.c",
      "src/gd_webp.c||src/gd_webp.c"
    ]
  },
  "patch_diff": {
    "src/gd_bmp.c||src/gd_bmp.c": [
      "File: src/gd_bmp.c -> src/gd_bmp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: #include <stdlib.h>",
      "31: #include \"gd.h\"",
      "32: #include \"gdhelpers.h\"",
      "33: #include \"bmp.h\"",
      "35: static int compress_row(unsigned char *uncompressed_row, int length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: #include \"gd_errors.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "266:     bitmap_size += compressed_size;",
      "270:     gdPutC(BMP_RLE_COMMAND, out);",
      "271:     gdPutC(BMP_RLE_ENDOFLINE, out);",
      "272:     bitmap_size += 2;",
      "",
      "[Removed Lines]",
      "269:     gdPutBuf(uncompressed_row, compressed_size, out);",
      "",
      "[Added Lines]",
      "270:     if (gdPutBuf(uncompressed_row, compressed_size, out) != compressed_size){",
      "271:      gd_error(\"gd-bmp write error\\n\");",
      "272:      error = 1;",
      "273:      break;",
      "274:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "325:    if (buffer_size == 0) {",
      "326:     break;",
      "327:    }",
      "329:   }",
      "330:   gdFree(copy_buffer);",
      "",
      "[Removed Lines]",
      "328:    gdPutBuf(copy_buffer , buffer_size, out_original);",
      "",
      "[Added Lines]",
      "333:    if (gdPutBuf(copy_buffer , buffer_size, out_original) != buffer_size) {",
      "334:     gd_error(\"gd-bmp write error\\n\");",
      "335:     error = 1;",
      "336:    }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "335:   out_original = NULL;",
      "336:  }",
      "339: cleanup:",
      "340:  if (tmpfile_for_compression) {",
      "341: #ifdef _WIN32",
      "",
      "[Removed Lines]",
      "338:  ret = 0;",
      "",
      "[Added Lines]",
      "346:  ret = error;",
      "",
      "---------------"
    ],
    "src/gd_webp.c||src/gd_webp.c": [
      "File: src/gd_webp.c -> src/gd_webp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "227:         ret = 1;",
      "228:   goto freeargb;",
      "229:  }",
      "231:  free(out);",
      "233: freeargb:",
      "234:  gdFree(argb);",
      "",
      "[Removed Lines]",
      "230:  gdPutBuf(out, out_size, outfile);",
      "",
      "[Added Lines]",
      "231:  int res = gdPutBuf(out, out_size, outfile);",
      "233:  if (res != out_size) {",
      "234:   gd_error(\"gd-webp write error\\n\");",
      "235:   ret = 1;",
      "236:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "75fecefe770a1672ff57064ca827d71e44244d66",
      "candidate_info": {
        "commit_hash": "75fecefe770a1672ff57064ca827d71e44244d66",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/75fecefe770a1672ff57064ca827d71e44244d66",
        "files": [
          "src/gd_bmp.c"
        ],
        "message": "<3 the CI, forgot header for gd_error and unused var, strict mode for the win :)",
        "before_after_code_files": [
          "src/gd_bmp.c||src/gd_bmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgd/libgd/pull/755"
        ],
        "olp_code_files": {
          "patch": [
            "src/gd_bmp.c||src/gd_bmp.c"
          ],
          "candidate": [
            "src/gd_bmp.c||src/gd_bmp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_bmp.c||src/gd_bmp.c": [
          "File: src/gd_bmp.c -> src/gd_bmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <stdlib.h>",
          "31: #include \"gd.h\"",
          "32: #include \"gdhelpers.h\"",
          "33: #include \"bmp.h\"",
          "35: static int compress_row(unsigned char *uncompressed_row, int length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"gd_errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:   }",
          "328:   while ((buffer_size = gdGetBuf(copy_buffer, 1024, out)) != EOF) {",
          "330:    if (buffer_size == 0) {",
          "331:     break;",
          "332:    }",
          "",
          "[Removed Lines]",
          "329:    int res;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5c84f0b7a2e2cef8d8630bd8c26a2f859e959ff",
      "candidate_info": {
        "commit_hash": "e5c84f0b7a2e2cef8d8630bd8c26a2f859e959ff",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/e5c84f0b7a2e2cef8d8630bd8c26a2f859e959ff",
        "files": [
          "src/gd_bmp.c",
          "src/gd_webp.c"
        ],
        "message": "Partial fix for #750",
        "before_after_code_files": [
          "src/gd_bmp.c||src/gd_bmp.c",
          "src/gd_webp.c||src/gd_webp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgd/libgd/pull/755"
        ],
        "olp_code_files": {
          "patch": [
            "src/gd_bmp.c||src/gd_bmp.c",
            "src/gd_webp.c||src/gd_webp.c"
          ],
          "candidate": [
            "src/gd_bmp.c||src/gd_bmp.c",
            "src/gd_webp.c||src/gd_webp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_bmp.c||src/gd_bmp.c": [
          "File: src/gd_bmp.c -> src/gd_bmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:     bitmap_size += compressed_size;",
          "270:     gdPutC(BMP_RLE_COMMAND, out);",
          "271:     gdPutC(BMP_RLE_ENDOFLINE, out);",
          "272:     bitmap_size += 2;",
          "",
          "[Removed Lines]",
          "269:     gdPutBuf(uncompressed_row, compressed_size, out);",
          "",
          "[Added Lines]",
          "269:     if (gdPutBuf(uncompressed_row, compressed_size, out) != compressed_size){",
          "270:      gd_error(\"gd-bmp write error\\n\");",
          "271:      error = 1;",
          "272:      break;",
          "273:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:   }",
          "324:   while ((buffer_size = gdGetBuf(copy_buffer, 1024, out)) != EOF) {",
          "325:    if (buffer_size == 0) {",
          "326:     break;",
          "327:    }",
          "329:   }",
          "330:   gdFree(copy_buffer);",
          "",
          "[Removed Lines]",
          "328:    gdPutBuf(copy_buffer , buffer_size, out_original);",
          "",
          "[Added Lines]",
          "329:    int res;",
          "333:    if (gdPutBuf(copy_buffer , buffer_size, out_original) != buffer_size) {",
          "334:     gd_error(\"gd-bmp write error\\n\");",
          "335:     error = 1;",
          "336:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "335:   out_original = NULL;",
          "336:  }",
          "339: cleanup:",
          "340:  if (tmpfile_for_compression) {",
          "341: #ifdef _WIN32",
          "",
          "[Removed Lines]",
          "338:  ret = 0;",
          "",
          "[Added Lines]",
          "346:  ret = error;",
          "",
          "---------------"
        ],
        "src/gd_webp.c||src/gd_webp.c": [
          "File: src/gd_webp.c -> src/gd_webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:         ret = 1;",
          "228:   goto freeargb;",
          "229:  }",
          "231:  free(out);",
          "233: freeargb:",
          "234:  gdFree(argb);",
          "",
          "[Removed Lines]",
          "230:  gdPutBuf(out, out_size, outfile);",
          "",
          "[Added Lines]",
          "231:  int res = gdPutBuf(out, out_size, outfile);",
          "233:  if (res != out_size) {",
          "234:   gd_error(\"gd-webp write error\\n\");",
          "235:   ret = 1;",
          "236:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}