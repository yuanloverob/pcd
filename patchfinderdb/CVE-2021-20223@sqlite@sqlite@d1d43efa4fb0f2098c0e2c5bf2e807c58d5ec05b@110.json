{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "10757ed0cae8a7b8b70e74bea2ba521008e0bc2a",
      "candidate_info": {
        "commit_hash": "10757ed0cae8a7b8b70e74bea2ba521008e0bc2a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/10757ed0cae8a7b8b70e74bea2ba521008e0bc2a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_win.c"
        ],
        "message": "In os_win.c, avoid calling sqlite3_uri_boolean() on anything other than a main-db filename.\n\nFossilOrigin-Name: cb0a18e64f8d81c2ada9f698faaf5ca68a0666687bf6f3abc860324cb1997463",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_win.c||src/os_win.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1d1293c25abdd4b0fca64e5b1d0a118e2f339635dbc89422c0c2463fbf9ee27f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5272:   if( isReadonly ){",
          "5273:     pFile->ctrlFlags |= WINFILE_RDONLY;",
          "5274:   }",
          "5276:     pFile->ctrlFlags |= WINFILE_PSOW;",
          "5277:   }",
          "5278:   pFile->lastErrno = NO_ERROR;",
          "",
          "[Removed Lines]",
          "5275:   if( sqlite3_uri_boolean(zName, \"psow\", SQLITE_POWERSAFE_OVERWRITE) ){",
          "",
          "[Added Lines]",
          "5275:   if( (flags & SQLITE_OPEN_MAIN_DB)",
          "5276:    && sqlite3_uri_boolean(zName, \"psow\", SQLITE_POWERSAFE_OVERWRITE)",
          "5277:   ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49d01abaac729f09a6babe1cb1a0f83d3ba462e3",
      "candidate_info": {
        "commit_hash": "49d01abaac729f09a6babe1cb1a0f83d3ba462e3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/49d01abaac729f09a6babe1cb1a0f83d3ba462e3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Fix a minor problem with EXPLAIN QUERY PLAN for triggers.\n\nFossilOrigin-Name: 6e11c03f84efa93b218b07e39b6b56b1d872639f39c18498ee54d8cd8364d4f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ae3ac297d2deee2a687ae2e9cf98aaf3e1b41196363238101a19d38092aebec6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2048:     {",
          "2049:       assert( eMode==1 );",
          "2050:       if( aOp[i].opcode==OP_Explain ) break;",
          "2052:     }",
          "2053:   }",
          "",
          "[Removed Lines]",
          "2051:       if( aOp[i].opcode==OP_Init && p->pc>1 ) break;",
          "",
          "[Added Lines]",
          "2051:       if( aOp[i].opcode==OP_Init && iPc>1 ) break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20d6c1fe1bafcef4b60656a4f2c6da03cc5b98ed",
      "candidate_info": {
        "commit_hash": "20d6c1fe1bafcef4b60656a4f2c6da03cc5b98ed",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/20d6c1fe1bafcef4b60656a4f2c6da03cc5b98ed",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Merge enhancements from trunk.\n\nFossilOrigin-Name: 6cb053f99b5be2ecc30e0733d8f1e4f2a89f642656d3883fc0c867b10a87ba6b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b02fdc09c838f355d9efce57f817d6a86153153b4a1f2b763914f4aaa34cb76e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "652: ){",
          "657: #ifndef SQLITE_OMIT_CHECK",
          "659: #endif",
          "660: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "662: #endif",
          "665: }",
          "",
          "[Removed Lines]",
          "647: static void notValid(",
          "653:   assert( (validMask&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol))==0 );",
          "654:   if( (pNC->ncFlags & validMask)!=0 ){",
          "655:     const char *zIn = \"partial index WHERE clauses\";",
          "656:     if( pNC->ncFlags & NC_IdxExpr )      zIn = \"index expressions\";",
          "658:     else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "661:     else if( pNC->ncFlags & NC_GenCol ) zIn = \"generated columns\";",
          "663:     sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "664:   }",
          "",
          "[Added Lines]",
          "659: static void notValidImpl(",
          "665:   const char *zIn = \"partial index WHERE clauses\";",
          "666:   if( pNC->ncFlags & NC_IdxExpr )      zIn = \"index expressions\";",
          "668:   else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "671:   else if( pNC->ncFlags & NC_GenCol ) zIn = \"generated columns\";",
          "673:   sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "674:   if( pExpr ) pExpr->op = TK_NULL;",
          "676: #define sqlite3ResolveNotValid(P,N,M,X,E) \\",
          "677:   assert( ((X)&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol))==0 ); \\",
          "678:   if( ((N)->ncFlags & (X))!=0 ) notValidImpl(P,N,M,E);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "751:         zColumn = pExpr->u.zToken;",
          "752:       }else{",
          "753:         Expr *pLeft = pExpr->pLeft;",
          "755:         pRight = pExpr->pRight;",
          "756:         if( pRight->op==TK_ID ){",
          "757:           zDb = 0;",
          "",
          "[Removed Lines]",
          "754:         notValid(pParse, pNC, \"the \\\".\\\" operator\", NC_IdxExpr|NC_GenCol);",
          "",
          "[Added Lines]",
          "767:         testcase( pNC->ncFlags & NC_IdxExpr );",
          "768:         testcase( pNC->ncFlags & NC_GenCol );",
          "769:         sqlite3ResolveNotValid(pParse, pNC, \"the \\\".\\\" operator\",",
          "770:                                NC_IdxExpr|NC_GenCol, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "852:         }else{",
          "854:           pExpr->op2 = pNC->ncFlags & NC_SelfRef;",
          "",
          "[Removed Lines]",
          "851:           notValid(pParse, pNC, \"non-deterministic functions\", NC_SelfRef);",
          "",
          "[Added Lines]",
          "867:           sqlite3ResolveNotValid(pParse, pNC, \"non-deterministic functions\",",
          "868:                                  NC_SelfRef, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "995:       testcase( pExpr->op==TK_IN );",
          "996:       if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "997:         int nRef = pNC->nRef;",
          "1000:         sqlite3WalkSelect(pWalker, pExpr->x.pSelect);",
          "1001:         assert( pNC->nRef>=nRef );",
          "1002:         if( nRef!=pNC->nRef ){",
          "",
          "[Removed Lines]",
          "998:         notValid(pParse, pNC, \"subqueries\",",
          "999:                  NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "[Added Lines]",
          "1015:         testcase( pNC->ncFlags & NC_IsCheck );",
          "1016:         testcase( pNC->ncFlags & NC_PartIdx );",
          "1017:         testcase( pNC->ncFlags & NC_IdxExpr );",
          "1018:         testcase( pNC->ncFlags & NC_GenCol );",
          "1019:         sqlite3ResolveNotValid(pParse, pNC, \"subqueries\",",
          "1020:                  NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol, pExpr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1007:       break;",
          "1008:     }",
          "1009:     case TK_VARIABLE: {",
          "1012:       break;",
          "1013:     }",
          "1014:     case TK_IS:",
          "",
          "[Removed Lines]",
          "1010:       notValid(pParse, pNC, \"parameters\",",
          "1011:                NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "[Added Lines]",
          "1031:       testcase( pNC->ncFlags & NC_IsCheck );",
          "1032:       testcase( pNC->ncFlags & NC_PartIdx );",
          "1033:       testcase( pNC->ncFlags & NC_IdxExpr );",
          "1034:       testcase( pNC->ncFlags & NC_GenCol );",
          "1035:       sqlite3ResolveNotValid(pParse, pNC, \"parameters\",",
          "1036:                NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol, pExpr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f287d0010880033a6b9745a351cac39c554fc591",
      "candidate_info": {
        "commit_hash": "f287d0010880033a6b9745a351cac39c554fc591",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f287d0010880033a6b9745a351cac39c554fc591",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "In the OP_SeekScan opcode, changes to pOp must occur after the call to VdbeBranchTaken() so that the VdbeBranchTaken() attributes the branch to the correct opcode.\n\nFossilOrigin-Name: 61fbe7aa7cc0e8fe3e6b1c5aec277183d8cd7c86b1e835c38e0b37a9b8063343",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4afc96b5fe80bd192a23e0230edc207e641931c3bf48296b1a385c786386f1b7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4481:         printf(\"... %d steps and then skip\\n\", pOp->p1 - n);",
          "4482:       }",
          "4483: #endif",
          "4485:       VdbeBranchTaken(1,3);",
          "4486:       goto jump_to_p2;",
          "4487:     }",
          "4488:     if( res==0 ){",
          "",
          "[Removed Lines]",
          "4484:       pOp++;",
          "",
          "[Added Lines]",
          "4485:       pOp++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4491:         printf(\"... %d steps and then success\\n\", pOp->p1 - n);",
          "4492:       }",
          "4493: #endif",
          "4495:       VdbeBranchTaken(2,3);",
          "4496:       break;",
          "4497:     }",
          "4498:     if( n<=0 ){",
          "",
          "[Removed Lines]",
          "4494:       pOp += 2;",
          "",
          "[Added Lines]",
          "4495:       pOp += 2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc2e95140b7ff79b26a9ff78cd089e63df7d0fef",
      "candidate_info": {
        "commit_hash": "bc2e95140b7ff79b26a9ff78cd089e63df7d0fef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bc2e95140b7ff79b26a9ff78cd089e63df7d0fef",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Prevent use-after-free of the u.vtab.idxStr string following an OOM while generating the OP_VFilter opcode.\n\nFossilOrigin-Name: 751fe4edb2d4602e652523c2759de3f4fffd29d5c66cae68caf45b30fd8b750a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7d2b590d3abd66a7e6ae9046198eb669e0fd2f223f7691281e9ad795a12b8903",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1397:                       pLoop->u.vtab.needFree ? P4_DYNAMIC : P4_STATIC);",
          "1398:     VdbeCoverage(v);",
          "1399:     pLoop->u.vtab.needFree = 0;",
          "1400:     pLevel->p1 = iCur;",
          "1401:     pLevel->op = pWInfo->eOnePass ? OP_Noop : OP_VNext;",
          "1402:     pLevel->p2 = sqlite3VdbeCurrentAddr(v);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1402:     if( db->mallocFailed ) pLoop->u.vtab.idxStr = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}