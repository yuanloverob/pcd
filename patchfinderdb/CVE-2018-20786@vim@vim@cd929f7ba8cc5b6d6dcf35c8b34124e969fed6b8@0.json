{
  "cve_id": "CVE-2018-20786",
  "cve_desc": "libvterm through 0+bzr726, as used in Vim and other products, mishandles certain out-of-memory conditions, leading to a denial of service (application crash), related to screen.c, state.c, and vterm.c.",
  "repo": "vim/vim",
  "patch_hash": "cd929f7ba8cc5b6d6dcf35c8b34124e969fed6b8",
  "patch_info": {
    "commit_hash": "cd929f7ba8cc5b6d6dcf35c8b34124e969fed6b8",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/cd929f7ba8cc5b6d6dcf35c8b34124e969fed6b8",
    "files": [
      "src/libvterm/src/state.c",
      "src/libvterm/src/termscreen.c",
      "src/libvterm/src/vterm.c",
      "src/terminal.c",
      "src/version.c"
    ],
    "message": "patch 8.1.0633: crash when out of memory while opening a terminal window\n\nProblem:    Crash when out of memory while opening a terminal window.\nSolution:   Handle out-of-memory more gracefully.",
    "before_after_code_files": [
      "src/libvterm/src/state.c||src/libvterm/src/state.c",
      "src/libvterm/src/termscreen.c||src/libvterm/src/termscreen.c",
      "src/libvterm/src/vterm.c||src/libvterm/src/vterm.c",
      "src/terminal.c||src/terminal.c",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/libvterm/src/state.c||src/libvterm/src/state.c": [
      "File: src/libvterm/src/state.c -> src/libvterm/src/state.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "53: {",
      "54:   VTermState *state = vterm_allocator_malloc(vt, sizeof(VTermState));",
      "56:   state->vt = vt;",
      "58:   state->rows = vt->rows;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56:   if (state == NULL)",
      "57:     return NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1700:     return vt->state;",
      "1702:   state = vterm_state_new(vt);",
      "1703:   vt->state = state;",
      "1705:   state->combine_chars_size = 16;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1709:   if (state == NULL)",
      "1710:     return NULL;",
      "",
      "---------------"
    ],
    "src/libvterm/src/termscreen.c||src/libvterm/src/termscreen.c": [
      "File: src/libvterm/src/termscreen.c -> src/libvterm/src/termscreen.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:     }",
      "96:   }",
      "101:   return new_buffer;",
      "102: }",
      "",
      "[Removed Lines]",
      "98:   if(buffer)",
      "99:     vterm_allocator_free(screen->vt, buffer);",
      "",
      "[Added Lines]",
      "99:   vterm_allocator_free(screen->vt, buffer);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "518:   screen->rows = new_rows;",
      "519:   screen->cols = new_cols;",
      "524:   screen->sb_buffer = vterm_allocator_malloc(screen->vt, sizeof(VTermScreenCell) * new_cols);",
      "",
      "[Removed Lines]",
      "521:   if(screen->sb_buffer)",
      "522:     vterm_allocator_free(screen->vt, screen->sb_buffer);",
      "",
      "[Added Lines]",
      "521:   vterm_allocator_free(screen->vt, screen->sb_buffer);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "620: };",
      "622: static VTermScreen *screen_new(VTerm *vt)",
      "623: {",
      "624:   VTermState *state = vterm_obtain_state(vt);",
      "625:   VTermScreen *screen;",
      "626:   int rows, cols;",
      "629:     return NULL;",
      "631:   screen = vterm_allocator_malloc(vt, sizeof(VTermScreen));",
      "633:   vterm_get_size(vt, &rows, &cols);",
      "",
      "[Removed Lines]",
      "628:   if(!state)",
      "",
      "[Added Lines]",
      "631:   if (state == NULL)",
      "634:   if (screen == NULL)",
      "635:     return NULL;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "646:   screen->cbdata    = NULL;",
      "648:   screen->buffers[0] = realloc_buffer(screen, NULL, rows, cols);",
      "650:   screen->buffer = screen->buffers[0];",
      "652:   screen->sb_buffer = vterm_allocator_malloc(screen->vt, sizeof(VTermScreenCell) * cols);",
      "654:   vterm_state_set_callbacks(screen->state, &state_cbs, screen);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "655:   if (screen->buffer == NULL || screen->sb_buffer == NULL)",
      "656:   {",
      "657:     vterm_screen_free(screen);",
      "658:     return NULL;",
      "659:   }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "659: INTERNAL void vterm_screen_free(VTermScreen *screen)",
      "660: {",
      "661:   vterm_allocator_free(screen->vt, screen->buffers[0]);",
      "665:   vterm_allocator_free(screen->vt, screen->sb_buffer);",
      "667:   vterm_allocator_free(screen->vt, screen);",
      "668: }",
      "",
      "[Removed Lines]",
      "662:   if(screen->buffers[1])",
      "663:     vterm_allocator_free(screen->vt, screen->buffers[1]);",
      "",
      "[Added Lines]",
      "669:   vterm_allocator_free(screen->vt, screen->buffers[1]);",
      "",
      "---------------"
    ],
    "src/libvterm/src/vterm.c||src/libvterm/src/vterm.c": [
      "File: src/libvterm/src/vterm.c -> src/libvterm/src/vterm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:   VTerm *vt = (*funcs->malloc)(sizeof(VTerm), allocdata);",
      "44:   vt->allocator = funcs;",
      "45:   vt->allocdata = allocdata;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:   if (vt == NULL)",
      "46:     return NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56:   vt->parser.strbuffer_cur = 0;",
      "57:   vt->parser.strbuffer = vterm_allocator_malloc(vt, vt->parser.strbuffer_len);",
      "59:   vt->outbuffer_len = 200;",
      "60:   vt->outbuffer_cur = 0;",
      "61:   vt->outbuffer = vterm_allocator_malloc(vt, vt->outbuffer_len);",
      "63:   return vt;",
      "64: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61:   if (vt->parser.strbuffer == NULL)",
      "62:   {",
      "63:     vterm_allocator_free(vt, vt);",
      "64:     return NULL;",
      "65:   }",
      "70:   if (vt->outbuffer == NULL)",
      "71:   {",
      "72:     vterm_allocator_free(vt, vt->parser.strbuffer);",
      "73:     vterm_allocator_free(vt, vt);",
      "74:     return NULL;",
      "75:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "82:   return (*vt->allocator->malloc)(size, vt->allocdata);",
      "83: }",
      "85: INTERNAL void vterm_allocator_free(VTerm *vt, void *ptr)",
      "86: {",
      "88: }",
      "90: void vterm_get_size(const VTerm *vt, int *rowsp, int *colsp)",
      "",
      "[Removed Lines]",
      "87:   (*vt->allocator->free)(ptr, vt->allocdata);",
      "",
      "[Added Lines]",
      "104:   if (ptr)",
      "105:     (*vt->allocator->free)(ptr, vt->allocdata);",
      "",
      "---------------"
    ],
    "src/terminal.c||src/terminal.c": [
      "File: src/terminal.c -> src/terminal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3708: create_vterm(term_T *term, int rows, int cols)",
      "3709: {",
      "3710:     VTerm     *vterm;",
      "",
      "[Removed Lines]",
      "3707:     static void",
      "",
      "[Added Lines]",
      "3709:     static int",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3715:     vterm = vterm_new_with_allocator(rows, cols, &vterm_allocator, NULL);",
      "3716:     term->tl_vterm = vterm;",
      "3717:     screen = vterm_obtain_screen(vterm);",
      "3718:     vterm_screen_set_callbacks(screen, &screen_callbacks, term);",
      "3720:     vterm_set_utf8(vterm, 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3719:     if (vterm == NULL)",
      "3720:  return FAIL;",
      "3723:     state = vterm_obtain_state(vterm);",
      "3725:     if (state == NULL || screen == NULL)",
      "3726:     {",
      "3727:  vterm_free(vterm);",
      "3728:  return FAIL;",
      "3729:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3722:     init_default_colors(term);",
      "3724:     vterm_state_set_default_colors(",
      "3726:      &term->tl_default_color.fg,",
      "3727:      &term->tl_default_color.bg);",
      "",
      "[Removed Lines]",
      "3725:      vterm_obtain_state(vterm),",
      "",
      "[Added Lines]",
      "3738:      state,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3746: #else",
      "3747:     value.boolean = 0;",
      "3748: #endif",
      "3750:     vterm_state_set_termprop(state, VTERM_PROP_CURSORBLINK, &value);",
      "3751:     vterm_state_set_unrecognised_fallbacks(state, &parser_fallbacks, term);",
      "3752: }",
      "",
      "[Removed Lines]",
      "3749:     state = vterm_obtain_state(vterm);",
      "",
      "[Added Lines]",
      "3765:     return OK;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5629:     vim_free(cwd_wchar);",
      "5630:     vim_free(env_wchar);",
      "5634: #if defined(FEAT_GUI) || defined(FEAT_TERMGUICOLORS)",
      "5635:     if (opt->jo_set2 & JO2_ANSI_COLORS)",
      "",
      "[Removed Lines]",
      "5632:     create_vterm(term, term->tl_rows, term->tl_cols);",
      "",
      "[Added Lines]",
      "5646:     if (create_vterm(term, term->tl_rows, term->tl_cols) == FAIL)",
      "5647:  goto failed;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "5710:     char     in_name[80], out_name[80];",
      "5711:     channel_T     *channel = NULL;",
      "5715:     vim_snprintf(in_name, sizeof(in_name), \"\\\\\\\\.\\\\pipe\\\\vim-%d-in-%d\",",
      "5716:      GetCurrentProcessId(),",
      "",
      "[Removed Lines]",
      "5713:     create_vterm(term, term->tl_rows, term->tl_cols);",
      "",
      "[Added Lines]",
      "5728:     if (create_vterm(term, term->tl_rows, term->tl_cols) == FAIL)",
      "5729:  return FAIL;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "5822:  jobopt_T    *opt,",
      "5823:  jobopt_T    *orig_opt UNUSED)",
      "5824: {",
      "5827: #if defined(FEAT_GUI) || defined(FEAT_TERMGUICOLORS)",
      "5828:     if (opt->jo_set2 & JO2_ANSI_COLORS)",
      "",
      "[Removed Lines]",
      "5825:     create_vterm(term, term->tl_rows, term->tl_cols);",
      "",
      "[Added Lines]",
      "5841:     if (create_vterm(term, term->tl_rows, term->tl_cols) == FAIL)",
      "5842:  return FAIL;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "5844:     static int",
      "5845: create_pty_only(term_T *term, jobopt_T *opt)",
      "5846: {",
      "5849:     term->tl_job = job_alloc();",
      "5850:     if (term->tl_job == NULL)",
      "",
      "[Removed Lines]",
      "5847:     create_vterm(term, term->tl_rows, term->tl_cols);",
      "",
      "[Added Lines]",
      "5864:     if (create_vterm(term, term->tl_rows, term->tl_cols) == FAIL)",
      "5865:  return FAIL;",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "800: static int included_patches[] =",
      "803:     632,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "803:     633,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f59c6e8cee092433d325ba21a107654a8d84f776",
      "candidate_info": {
        "commit_hash": "f59c6e8cee092433d325ba21a107654a8d84f776",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/f59c6e8cee092433d325ba21a107654a8d84f776",
        "files": [
          "runtime/doc/eval.txt",
          "runtime/doc/terminal.txt",
          "src/channel.c",
          "src/evalfunc.c",
          "src/proto/terminal.pro",
          "src/structs.h",
          "src/terminal.c",
          "src/testdir/test_terminal.vim",
          "src/version.c"
        ],
        "message": "patch 8.0.1685: can't set ANSI colors of a terminal window\n\nProblem:    Can't set ANSI colors of a terminal window.\nSolution:   Add term_setansicolors(), term_getansicolors() and\n            g:term_ansi_colors. (Andy Massimino, closes #2747)",
        "before_after_code_files": [
          "src/channel.c||src/channel.c",
          "src/evalfunc.c||src/evalfunc.c",
          "src/proto/terminal.pro||src/proto/terminal.pro",
          "src/structs.h||src/structs.h",
          "src/terminal.c||src/terminal.c",
          "src/testdir/test_terminal.vim||src/testdir/test_terminal.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/terminal.c||src/terminal.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/terminal.c||src/terminal.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/channel.c||src/channel.c": [
          "File: src/channel.c -> src/channel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4802:   opt->jo_set2 |= JO2_TERM_KILL;",
          "4803:   opt->jo_term_kill = get_tv_string_chk(item);",
          "4804:      }",
          "4805: #endif",
          "4806:      else if (STRCMP(hi->hi_key, \"env\") == 0)",
          "4807:      {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4805: # if defined(FEAT_GUI) || defined(FEAT_TERMGUICOLORS)",
          "4806:      else if (STRCMP(hi->hi_key, \"ansi_colors\") == 0)",
          "4807:      {",
          "4808:   int   n = 0;",
          "4809:   listitem_T *li;",
          "4810:   long_u  rgb[16];",
          "4812:   if (!(supported2 & JO2_ANSI_COLORS))",
          "4813:       break;",
          "4815:   if (item == NULL || item->v_type != VAR_LIST",
          "4816:    || item->vval.v_list == NULL)",
          "4817:   {",
          "4818:       EMSG2(_(e_invargval), \"ansi_colors\");",
          "4819:       return FAIL;",
          "4820:   }",
          "4822:   li = item->vval.v_list->lv_first;",
          "4823:   for (; li != NULL && n < 16; li = li->li_next, n++)",
          "4824:   {",
          "4825:       char_u *color_name;",
          "4826:       guicolor_T  guicolor;",
          "4828:       color_name = get_tv_string_chk(&li->li_tv);",
          "4829:       if (color_name == NULL)",
          "4830:    return FAIL;",
          "4832:       guicolor = GUI_GET_COLOR(color_name);",
          "4833:       if (guicolor == INVALCOLOR)",
          "4834:    return FAIL;",
          "4836:       rgb[n] = GUI_MCH_GET_RGB(guicolor);",
          "4837:   }",
          "4839:   if (n != 16 || li != NULL)",
          "4840:   {",
          "4841:       EMSG2(_(e_invargval), \"ansi_colors\");",
          "4842:       return FAIL;",
          "4843:   }",
          "4845:   opt->jo_set2 |= JO2_ANSI_COLORS;",
          "4846:   memcpy(opt->jo_ansi_colors, rgb, sizeof(rgb));",
          "4847:      }",
          "4848: # endif",
          "",
          "---------------"
        ],
        "src/evalfunc.c||src/evalfunc.c": [
          "File: src/evalfunc.c -> src/evalfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "856:     {\"term_dumpload\", 1, 2, f_term_dumpload},",
          "857:     {\"term_dumpwrite\", 2, 3, f_term_dumpwrite},",
          "858:     {\"term_getaltscreen\", 1, 1, f_term_getaltscreen},",
          "859:     {\"term_getattr\", 2, 2, f_term_getattr},",
          "860:     {\"term_getcursor\", 1, 1, f_term_getcursor},",
          "861:     {\"term_getjob\", 1, 1, f_term_getjob},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "859: # if defined(FEAT_GUI) || defined(FEAT_TERMGUICOLORS)",
          "860:     {\"term_getansicolors\", 1, 1, f_term_getansicolors},",
          "861: # endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "868:     {\"term_list\", 0, 0, f_term_list},",
          "869:     {\"term_scrape\", 2, 2, f_term_scrape},",
          "870:     {\"term_sendkeys\", 2, 2, f_term_sendkeys},",
          "871:     {\"term_setkill\", 2, 2, f_term_setkill},",
          "872:     {\"term_setrestore\", 2, 2, f_term_setrestore},",
          "873:     {\"term_start\", 1, 2, f_term_start},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "874: # if defined(FEAT_GUI) || defined(FEAT_TERMGUICOLORS)",
          "875:     {\"term_setansicolors\", 2, 2, f_term_setansicolors},",
          "876: # endif",
          "",
          "---------------"
        ],
        "src/proto/terminal.pro||src/proto/terminal.pro": [
          "File: src/proto/terminal.pro -> src/proto/terminal.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: void f_term_dumpdiff(typval_T *argvars, typval_T *rettv);",
          "33: void f_term_dumpload(typval_T *argvars, typval_T *rettv);",
          "34: void f_term_getaltscreen(typval_T *argvars, typval_T *rettv);",
          "35: void f_term_getattr(typval_T *argvars, typval_T *rettv);",
          "36: void f_term_getcursor(typval_T *argvars, typval_T *rettv);",
          "37: void f_term_getjob(typval_T *argvars, typval_T *rettv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: void f_term_getansicolors(typval_T *argvars, typval_T *rettv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: void f_term_list(typval_T *argvars, typval_T *rettv);",
          "45: void f_term_scrape(typval_T *argvars, typval_T *rettv);",
          "46: void f_term_sendkeys(typval_T *argvars, typval_T *rettv);",
          "47: void f_term_setrestore(typval_T *argvars, typval_T *rettv);",
          "48: void f_term_setkill(typval_T *argvars, typval_T *rettv);",
          "49: void f_term_start(typval_T *argvars, typval_T *rettv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: void f_term_setansicolors(typval_T *argvars, typval_T *rettv);",
          "",
          "---------------"
        ],
        "src/structs.h||src/structs.h": [
          "File: src/structs.h -> src/structs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1713: #define JO_MODE_ALL (JO_MODE + JO_IN_MODE + JO_OUT_MODE + JO_ERR_MODE)",
          "1714: #define JO_CB_ALL \\",
          "",
          "[Removed Lines]",
          "1711: #define JO2_ALL      0x7FFF",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1777:     int  jo_term_finish;",
          "1778:     char_u *jo_eof_chars;",
          "1779:     char_u *jo_term_kill;",
          "1780: #endif",
          "1781: } jobopt_T;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1780: # if defined(FEAT_GUI) || defined(FEAT_TERMGUICOLORS)",
          "1781:     long_u jo_ansi_colors[16];",
          "1782: # endif",
          "",
          "---------------"
        ],
        "src/terminal.c||src/terminal.c": [
          "File: src/terminal.c -> src/terminal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3141:     }",
          "3142: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3142: #if defined(FEAT_GUI) || defined(FEAT_TERMGUICOLORS)",
          "3146:     static void",
          "3147: set_vterm_palette(VTerm *vterm, long_u *rgb)",
          "3148: {",
          "3149:     int  index = 0;",
          "3150:     VTermState *state = vterm_obtain_state(vterm);",
          "3151:     for (; index < 16; index++)",
          "3152:     {",
          "3153:  VTermColor color;",
          "3154:  color.red = (unsigned)(rgb[index] >> 16);",
          "3155:  color.green = (unsigned)(rgb[index] >> 8) & 255;",
          "3156:  color.blue = (unsigned)rgb[index] & 255;",
          "3157:  vterm_state_set_palette_color(state, index, &color);",
          "3158:     }",
          "3159: }",
          "3164:     static int",
          "3165: set_ansi_colors_list(VTerm *vterm, list_T *list)",
          "3166: {",
          "3167:     int  n = 0;",
          "3168:     long_u rgb[16];",
          "3169:     listitem_T *li = list->lv_first;",
          "3171:     for (; li != NULL && n < 16; li = li->li_next, n++)",
          "3172:     {",
          "3173:  char_u  *color_name;",
          "3174:  guicolor_T guicolor;",
          "3176:  color_name = get_tv_string_chk(&li->li_tv);",
          "3177:  if (color_name == NULL)",
          "3178:      return FAIL;",
          "3180:  guicolor = GUI_GET_COLOR(color_name);",
          "3181:  if (guicolor == INVALCOLOR)",
          "3182:      return FAIL;",
          "3184:  rgb[n] = GUI_MCH_GET_RGB(guicolor);",
          "3185:     }",
          "3187:     if (n != 16 || li != NULL)",
          "3188:  return FAIL;",
          "3190:     set_vterm_palette(vterm, rgb);",
          "3192:     return OK;",
          "3193: }",
          "3198:     static void",
          "3199: init_vterm_ansi_colors(VTerm *vterm)",
          "3200: {",
          "3201:     dictitem_T *var = find_var((char_u *)\"g:terminal_ansi_colors\", NULL, TRUE);",
          "3203:     if (var != NULL",
          "3204:      && (var->di_tv.v_type != VAR_LIST",
          "3205:   || var->di_tv.vval.v_list == NULL",
          "3206:   || set_ansi_colors_list(vterm, var->di_tv.vval.v_list) == FAIL))",
          "3207:  EMSG2(_(e_invarg2), \"g:terminal_ansi_colors\");",
          "3208: }",
          "3209: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3372:      &term->tl_default_color.fg,",
          "3373:      &term->tl_default_color.bg);",
          "3376:     vterm_screen_reset(screen, 1 /* hard */);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3442:     if (t_colors >= 16)",
          "3443:  vterm_state_set_bold_highbright(vterm_obtain_state(vterm), 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4762:     }",
          "4763: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4835: #if defined(FEAT_GUI) || defined(FEAT_TERMGUICOLORS) || defined(PROTO)",
          "4839:     void",
          "4840: f_term_getansicolors(typval_T *argvars, typval_T *rettv)",
          "4841: {",
          "4842:     buf_T *buf = term_get_buf(argvars, \"term_getansicolors()\");",
          "4843:     term_T *term;",
          "4844:     VTermState *state;",
          "4845:     VTermColor  color;",
          "4846:     char_u hexbuf[10];",
          "4847:     int  index;",
          "4848:     list_T *list;",
          "4850:     if (rettv_list_alloc(rettv) == FAIL)",
          "4851:  return;",
          "4853:     if (buf == NULL)",
          "4854:  return;",
          "4855:     term = buf->b_term;",
          "4856:     if (term->tl_vterm == NULL)",
          "4857:  return;",
          "4859:     list = rettv->vval.v_list;",
          "4860:     state = vterm_obtain_state(term->tl_vterm);",
          "4861:     for (index = 0; index < 16; index++)",
          "4862:     {",
          "4863:  vterm_state_get_palette_color(state, index, &color);",
          "4864:  sprintf((char *)hexbuf, \"#%02x%02x%02x\",",
          "4865:   color.red, color.green, color.blue);",
          "4866:  if (list_append_string(list, hexbuf, 7) == FAIL)",
          "4867:      return;",
          "4868:     }",
          "4869: }",
          "4874:     void",
          "4875: f_term_setansicolors(typval_T *argvars, typval_T *rettv UNUSED)",
          "4876: {",
          "4877:     buf_T *buf = term_get_buf(argvars, \"term_setansicolors()\");",
          "4878:     term_T *term;",
          "4880:     if (buf == NULL)",
          "4881:  return;",
          "4882:     term = buf->b_term;",
          "4883:     if (term->tl_vterm == NULL)",
          "4884:  return;",
          "4886:     if (argvars[1].v_type != VAR_LIST || argvars[1].vval.v_list == NULL)",
          "4887:     {",
          "4888:  EMSG(_(e_listreq));",
          "4889:  return;",
          "4890:     }",
          "4892:     if (set_ansi_colors_list(term->tl_vterm, argvars[1].vval.v_list) == FAIL)",
          "4893:  EMSG(_(e_invarg));",
          "4894: }",
          "4895: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4824:   JO2_TERM_NAME + JO2_TERM_FINISH + JO2_HIDDEN + JO2_TERM_OPENCMD",
          "4825:       + JO2_TERM_COLS + JO2_TERM_ROWS + JO2_VERTICAL + JO2_CURWIN",
          "4826:       + JO2_CWD + JO2_ENV + JO2_EOF_CHARS",
          "4828:  return;",
          "4830:     buf = term_start(&argvars[0], NULL, &opt, 0);",
          "",
          "[Removed Lines]",
          "4827:       + JO2_NORESTORE + JO2_TERM_KILL) == FAIL)",
          "",
          "[Added Lines]",
          "4959:       + JO2_NORESTORE + JO2_TERM_KILL",
          "4960:       + JO2_ANSI_COLORS) == FAIL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5153:     create_vterm(term, term->tl_rows, term->tl_cols);",
          "5155:     channel_set_job(channel, job, opt);",
          "5156:     job_set_options(job, opt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5288: #if defined(FEAT_GUI) || defined(FEAT_TERMGUICOLORS)",
          "5289:     if (opt->jo_set2 & JO2_ANSI_COLORS)",
          "5290:  set_vterm_palette(term->tl_vterm, opt->jo_ansi_colors);",
          "5291:     else",
          "5292:  init_vterm_ansi_colors(term->tl_vterm);",
          "5293: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5324: {",
          "5325:     create_vterm(term, term->tl_rows, term->tl_cols);",
          "5328:     term->tl_job = job_start(argvar, argv, opt);",
          "5329:     if (term->tl_job != NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5467: #if defined(FEAT_GUI) || defined(FEAT_TERMGUICOLORS)",
          "5468:     if (opt->jo_set2 & JO2_ANSI_COLORS)",
          "5469:  set_vterm_palette(term->tl_vterm, opt->jo_ansi_colors);",
          "5470:     else",
          "5471:  init_vterm_ansi_colors(term->tl_vterm);",
          "5472: #endif",
          "",
          "---------------"
        ],
        "src/testdir/test_terminal.vim||src/testdir/test_terminal.vim": [
          "File: src/testdir/test_terminal.vim -> src/testdir/test_terminal.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1255:   call ch_logfile('', '')",
          "1256:   call delete('Xlog')",
          "1257: endfunc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1259: func Test_terminal_ansicolors_default()",
          "1260:   let colors = [",
          "1261:  \\ '#000000', '#e00000',",
          "1262:  \\ '#00e000', '#e0e000',",
          "1263:  \\ '#0000e0', '#e000e0',",
          "1264:  \\ '#00e0e0', '#e0e0e0',",
          "1265:  \\ '#808080', '#ff4040',",
          "1266:  \\ '#40ff40', '#ffff40',",
          "1267:  \\ '#4040ff', '#ff40ff',",
          "1268:  \\ '#40ffff', '#ffffff',",
          "1269:  \\]",
          "1271:   let buf = Run_shell_in_terminal({})",
          "1272:   call assert_equal(colors, term_getansicolors(buf))",
          "1273:   call Stop_shell_in_terminal(buf)",
          "1274:   call term_wait(buf)",
          "1276:   exe buf . 'bwipe'",
          "1277: endfunc",
          "1279: let s:test_colors = [",
          "1280:  \\ '#616e64', '#0d0a79',",
          "1281:  \\ '#6d610d', '#0a7373',",
          "1282:  \\ '#690d0a', '#6d696e',",
          "1283:  \\ '#0d0a6f', '#616e0d',",
          "1284:  \\ '#0a6479', '#6d0d0a',",
          "1285:  \\ '#617373', '#0d0a69',",
          "1286:  \\ '#6d690d', '#0a6e6f',",
          "1287:  \\ '#610d0a', '#6e6479',",
          "1288:  \\]",
          "1290: func Test_terminal_ansicolors_global()",
          "1291:   let g:terminal_ansi_colors = reverse(copy(s:test_colors))",
          "1292:   let buf = Run_shell_in_terminal({})",
          "1293:   call assert_equal(g:terminal_ansi_colors, term_getansicolors(buf))",
          "1294:   call Stop_shell_in_terminal(buf)",
          "1295:   call term_wait(buf)",
          "1297:   exe buf . 'bwipe'",
          "1298:   unlet g:terminal_ansi_colors",
          "1299: endfunc",
          "1301: func Test_terminal_ansicolors_func()",
          "1302:   let g:terminal_ansi_colors = reverse(copy(s:test_colors))",
          "1303:   let buf = Run_shell_in_terminal({'ansi_colors': s:test_colors})",
          "1304:   call assert_equal(s:test_colors, term_getansicolors(buf))",
          "1306:   call term_setansicolors(buf, g:terminal_ansi_colors)",
          "1307:   call assert_equal(g:terminal_ansi_colors, term_getansicolors(buf))",
          "1309:   let colors = [",
          "1310:  \\ 'ivory', 'AliceBlue',",
          "1311:  \\ 'grey67', 'dark goldenrod',",
          "1312:  \\ 'SteelBlue3', 'PaleVioletRed4',",
          "1313:  \\ 'MediumPurple2', 'yellow2',",
          "1314:  \\ 'RosyBrown3', 'OrangeRed2',",
          "1315:  \\ 'white smoke', 'navy blue',",
          "1316:  \\ 'grey47', 'gray97',",
          "1317:  \\ 'MistyRose2', 'DodgerBlue4',",
          "1318:  \\]",
          "1319:   call term_setansicolors(buf, colors)",
          "1321:   let colors[4] = 'Invalid'",
          "1322:   call assert_fails('call term_setansicolors(buf, colors)', 'E474:')",
          "1324:   call Stop_shell_in_terminal(buf)",
          "1325:   call term_wait(buf)",
          "1326:   exe buf . 'bwipe'",
          "1327: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "763: static int included_patches[] =",
          "766:     1684,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "766:     1685,",
          "",
          "---------------"
        ]
      }
    }
  ]
}