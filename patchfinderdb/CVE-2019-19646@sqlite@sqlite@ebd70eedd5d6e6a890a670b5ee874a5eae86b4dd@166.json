{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d00ad9a6561174ec7214af82e21b7a9a313ae156",
      "candidate_info": {
        "commit_hash": "d00ad9a6561174ec7214af82e21b7a9a313ae156",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d00ad9a6561174ec7214af82e21b7a9a313ae156",
        "files": [
          "ext/rtree/geopoly.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Typecasts added to the GeoPoly extension to avoid harmless UBSAN warnings.\n\nFossilOrigin-Name: a1f6a093ac4a2de8c5b02c30fe57e09770460fd5bdddfe9c7a9a24fb83a6b491",
        "before_after_code_files": [
          "ext/rtree/geopoly.c||ext/rtree/geopoly.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/geopoly.c||ext/rtree/geopoly.c": [
          "File: ext/rtree/geopoly.c -> ext/rtree/geopoly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: #define GEOPOLY_SZ(N)  (sizeof(GeoPoly) + sizeof(GeoCoord)*2*((N)-4))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: #define GeoX(P,I)  (((GeoCoord*)(P)->a)[(I)*2])",
          "132: #define GeoY(P,I)  (((GeoCoord*)(P)->a)[(I)*2+1])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:         memcpy(p->hdr, a, nByte);",
          "317:         if( a[0] != *(unsigned char*)&x ){",
          "318:           int ii;",
          "321:           }",
          "322:           p->hdr[0] ^= 1;",
          "323:         }",
          "",
          "[Removed Lines]",
          "319:           for(ii=0; ii<nVertex*2; ii++){",
          "320:             geopolySwab32((unsigned char*)&p->a[ii]);",
          "",
          "[Added Lines]",
          "327:           for(ii=0; ii<nVertex; ii++){",
          "328:             geopolySwab32((unsigned char*)&GeoX(p,ii));",
          "329:             geopolySwab32((unsigned char*)&GeoY(p,ii));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376:     int i;",
          "377:     sqlite3_str_append(x, \"[\", 1);",
          "378:     for(i=0; i<p->nVertex; i++){",
          "380:     }",
          "382:     sqlite3_result_text(context, sqlite3_str_finish(x), -1, sqlite3_free);",
          "383:     sqlite3_free(p);",
          "384:   }",
          "",
          "[Removed Lines]",
          "379:       sqlite3_str_appendf(x, \"[%!g,%!g],\", p->a[i*2], p->a[i*2+1]);",
          "381:     sqlite3_str_appendf(x, \"[%!g,%!g]]\", p->a[0], p->a[1]);",
          "",
          "[Added Lines]",
          "388:       sqlite3_str_appendf(x, \"[%!g,%!g],\", GeoX(p,i), GeoY(p,i));",
          "390:     sqlite3_str_appendf(x, \"[%!g,%!g]]\", GeoX(p,0), GeoY(p,0));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "405:     char cSep = '\\'';",
          "406:     sqlite3_str_appendf(x, \"<polyline points=\");",
          "407:     for(i=0; i<p->nVertex; i++){",
          "409:       cSep = ' ';",
          "410:     }",
          "412:     for(i=1; i<argc; i++){",
          "413:       const char *z = (const char*)sqlite3_value_text(argv[i]);",
          "414:       if( z && z[0] ){",
          "",
          "[Removed Lines]",
          "408:       sqlite3_str_appendf(x, \"%c%g,%g\", cSep, p->a[i*2], p->a[i*2+1]);",
          "411:     sqlite3_str_appendf(x, \" %g,%g'\", p->a[0], p->a[1]);",
          "",
          "[Added Lines]",
          "417:       sqlite3_str_appendf(x, \"%c%g,%g\", cSep, GeoX(p,i), GeoY(p,i));",
          "420:     sqlite3_str_appendf(x, \" %g,%g'\", GeoX(p,0), GeoY(p,0));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "453:   int ii;",
          "454:   if( p ){",
          "455:     for(ii=0; ii<p->nVertex; ii++){",
          "458:       x1 = (GeoCoord)(A*x0 + B*y0 + E);",
          "459:       y1 = (GeoCoord)(C*x0 + D*y0 + F);",
          "462:     }",
          "463:     sqlite3_result_blob(context, p->hdr,",
          "464:        4+8*p->nVertex, SQLITE_TRANSIENT);",
          "",
          "[Removed Lines]",
          "456:       x0 = p->a[ii*2];",
          "457:       y0 = p->a[ii*2+1];",
          "460:       p->a[ii*2] = x1;",
          "461:       p->a[ii*2+1] = y1;",
          "",
          "[Added Lines]",
          "465:       x0 = GeoX(p,ii);",
          "466:       y0 = GeoY(p,ii);",
          "469:       GeoX(p,ii) = x1;",
          "470:       GeoY(p,ii) = y1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "529:   if( p ){",
          "530:     if( geopolyArea(p)<0.0 ){",
          "531:       int ii, jj;",
          "539:       }",
          "540:     }",
          "541:     sqlite3_result_blob(context, p->hdr,",
          "",
          "[Removed Lines]",
          "532:       for(ii=2, jj=p->nVertex*2 - 2; ii<jj; ii+=2, jj-=2){",
          "533:         GeoCoord t = p->a[ii];",
          "534:         p->a[ii] = p->a[jj];",
          "535:         p->a[jj] = t;",
          "536:         t = p->a[ii+1];",
          "537:         p->a[ii+1] = p->a[jj+1];",
          "538:         p->a[jj+1] = t;",
          "",
          "[Added Lines]",
          "541:       for(ii=1, jj=p->nVertex-1; ii<jj; ii++, jj--){",
          "542:         GeoCoord t = GeoX(p,ii);",
          "543:         GeoX(p,ii) = GeoX(p,jj);",
          "544:         GeoX(p,jj) = t;",
          "545:         t = GeoY(p,ii);",
          "546:         GeoY(p,ii) = GeoY(p,jj);",
          "547:         GeoY(p,jj) = t;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "595:   p->hdr[3] = n&0xff;",
          "596:   for(i=0; i<n; i++){",
          "597:     double rAngle = 2.0*GEOPOLY_PI*i/n;",
          "600:   }",
          "601:   sqlite3_result_blob(context, p->hdr, 4+8*n, SQLITE_TRANSIENT);",
          "602:   sqlite3_free(p);",
          "",
          "[Removed Lines]",
          "598:     p->a[i*2] = x - r*geopolySine(rAngle-0.5*GEOPOLY_PI);",
          "599:     p->a[i*2+1] = y + r*geopolySine(rAngle);",
          "",
          "[Added Lines]",
          "607:     GeoX(p,i) = x - r*geopolySine(rAngle-0.5*GEOPOLY_PI);",
          "608:     GeoY(p,i) = y + r*geopolySine(rAngle);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "633:   }",
          "634:   if( p ){",
          "635:     int ii;",
          "638:     for(ii=1; ii<p->nVertex; ii++){",
          "640:       if( r<mnX ) mnX = (float)r;",
          "641:       else if( r>mxX ) mxX = (float)r;",
          "643:       if( r<mnY ) mnY = (float)r;",
          "644:       else if( r>mxY ) mxY = (float)r;",
          "645:     }",
          "",
          "[Removed Lines]",
          "636:     mnX = mxX = p->a[0];",
          "637:     mnY = mxY = p->a[1];",
          "639:       double r = p->a[ii*2];",
          "642:       r = p->a[ii*2+1];",
          "",
          "[Added Lines]",
          "645:     mnX = mxX = GeoX(p,0);",
          "646:     mnY = mxY = GeoY(p,0);",
          "648:       double r = GeoX(p,ii);",
          "651:       r = GeoY(p,ii);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "659:       pOut->hdr[1] = 0;",
          "660:       pOut->hdr[2] = 0;",
          "661:       pOut->hdr[3] = 4;",
          "670:     }else{",
          "671:       sqlite3_free(p);",
          "672:       aCoord[0].f = mnX;",
          "",
          "[Removed Lines]",
          "662:       pOut->a[0] = mnX;",
          "663:       pOut->a[1] = mnY;",
          "664:       pOut->a[2] = mxX;",
          "665:       pOut->a[3] = mnY;",
          "666:       pOut->a[4] = mxX;",
          "667:       pOut->a[5] = mxY;",
          "668:       pOut->a[6] = mnX;",
          "669:       pOut->a[7] = mxY;",
          "",
          "[Added Lines]",
          "671:       GeoX(pOut,0) = mnX;",
          "672:       GeoY(pOut,0) = mnY;",
          "673:       GeoX(pOut,1) = mxX;",
          "674:       GeoY(pOut,1) = mnY;",
          "675:       GeoX(pOut,2) = mxX;",
          "676:       GeoY(pOut,2) = mxY;",
          "677:       GeoX(pOut,3) = mnX;",
          "678:       GeoY(pOut,3) = mxY;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "804:   int ii;",
          "805:   if( p1==0 ) return;",
          "806:   for(ii=0; ii<p1->nVertex-1; ii++){",
          "809:     if( v==2 ) break;",
          "810:     cnt += v;",
          "811:   }",
          "812:   if( v!=2 ){",
          "815:   }",
          "816:   if( v==2 ){",
          "817:     sqlite3_result_int(context, 1);",
          "",
          "[Removed Lines]",
          "807:     v = pointBeneathLine(x0,y0,p1->a[ii*2],p1->a[ii*2+1],",
          "808:                                p1->a[ii*2+2],p1->a[ii*2+3]);",
          "813:     v = pointBeneathLine(x0,y0,p1->a[ii*2],p1->a[ii*2+1],",
          "814:                                p1->a[0],p1->a[1]);",
          "",
          "[Added Lines]",
          "816:     v = pointBeneathLine(x0,y0,GeoX(p1,ii), GeoY(p1,ii),",
          "817:                                GeoX(p1,ii+1),GeoY(p1,ii+1));",
          "822:     v = pointBeneathLine(x0,y0,GeoX(p1,ii), GeoY(p1,ii),",
          "823:                                GeoX(p1,0),  GeoY(p1,0));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "933:   unsigned int i;",
          "934:   GeoCoord *x;",
          "935:   for(i=0; i<(unsigned)pPoly->nVertex-1; i++){",
          "937:     geopolyAddOneSegment(p, x[0], x[1], x[2], x[3], side, i);",
          "938:   }",
          "940:   geopolyAddOneSegment(p, x[0], x[1], pPoly->a[0], pPoly->a[1], side, i);",
          "941: }",
          "",
          "[Removed Lines]",
          "936:     x = pPoly->a + (i*2);",
          "939:   x = pPoly->a + (i*2);",
          "",
          "[Added Lines]",
          "945:     x = &GeoX(pPoly,i);",
          "948:   x = &GeoX(pPoly,i);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b90dbaed3092236e97f9796fa63989a3648060e16189e1267c430f4a7e799fac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68feae52a9c5052b10e80a933b6c8998b3bb6715",
      "candidate_info": {
        "commit_hash": "68feae52a9c5052b10e80a933b6c8998b3bb6715",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/68feae52a9c5052b10e80a933b6c8998b3bb6715",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improved error handling for the \".open --hexdb\" command of the CLI.\n\nFossilOrigin-Name: 4fa831d5cd5861f6a0a8f08a738b2d4d371fb2a788178ce86482c5bba761f9de",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ebe4845cd0ffb96b30be3c69eb399d58e93149886bc2fa60a7ebd7b4fbe447a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3884:   if( fgets(zLine, sizeof(zLine), in)==0 ) goto readHexDb_error;",
          "3885:   rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);",
          "3886:   if( rc!=2 ) goto readHexDb_error;",
          "3889:   if( a==0 ){",
          "3890:     utf8_printf(stderr, \"Out of memory!\\n\");",
          "3891:     goto readHexDb_error;",
          "",
          "[Removed Lines]",
          "3887:   if( n<=0 ) goto readHexDb_error;",
          "3888:   a = sqlite3_malloc( n );",
          "",
          "[Added Lines]",
          "3887:   if( n<0 ) goto readHexDb_error;",
          "3888:   a = sqlite3_malloc( n ? n : 1 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3924:   return a;",
          "3926: readHexDb_error:",
          "3928:     fclose(in);",
          "3929:   }else{",
          "3930:     while( fgets(zLine, sizeof(zLine), p->in)!=0 ){",
          "",
          "[Removed Lines]",
          "3927:   if( in!=stdin ){",
          "",
          "[Added Lines]",
          "3927:   if( in!=p->in ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4166:       }else{",
          "4167:         aData = readHexDb(p, &nData);",
          "4168:         if( aData==0 ){",
          "4170:           return;",
          "4171:         }",
          "4172:       }",
          "",
          "[Removed Lines]",
          "4169:           utf8_printf(stderr, \"Error in hexdb input\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af5a2e166dfce85cfa195a9e48b2786b9a9e51b7",
      "candidate_info": {
        "commit_hash": "af5a2e166dfce85cfa195a9e48b2786b9a9e51b7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/af5a2e166dfce85cfa195a9e48b2786b9a9e51b7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improvements to the help text in the CLI.\n\nFossilOrigin-Name: 919fec91dac4cb0d5f67404d4f47a65f353d752f5da0aa7b071bf3caf19e0522",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f11c89595dc65f89be6df62830c8cddd3933acfd4baaecd348ecd99e71db5831",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3452:   \".archive ...             Manage SQL archives\",",
          "3453:   \"   Each command must have exactly one of the following options:\",",
          "3454:   \"     -c, --create               Create a new archive\",",
          "3456:   \"     -i, --insert               Like -u but always add even if mtime unchanged\",",
          "3457:   \"     -t, --list                 List contents of archive\",",
          "3458:   \"     -x, --extract              Extract files from archive\",",
          "",
          "[Removed Lines]",
          "3455:   \"     -u, --update               Add files or update files with newer mtime\",",
          "",
          "[Added Lines]",
          "3455:   \"     -u, --update               Add files or update files with changed mtime\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "725a9c7f6c0d406cac38d41d286c023dd5896417",
      "candidate_info": {
        "commit_hash": "725a9c7f6c0d406cac38d41d286c023dd5896417",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/725a9c7f6c0d406cac38d41d286c023dd5896417",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "In fuzzcheck, activate vdbe_debug for dbsqlfuzz cases when using the -vvvvv verbosity level or above.\n\nFossilOrigin-Name: 2e6f7c2aced49824a38b3494b796a8ec73aa7a90b51159f670596df15ed1c5ab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ef24e89c9630fd383ba32f5aefcf9c27907f27f5072f3537a1cfd75a093a8d7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "793:     sqlite3_file_control(cx.db, \"main\", SQLITE_FCNTL_SIZE_LIMIT, &x);",
          "794:   }",
          "798:   sqlite3_set_authorizer(cx.db, block_troublesome_sql, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "797:   if( eVerbosity>=5 ){",
          "798:     sqlite3_exec(cx.db, \"PRAGMA vdbe_debug=ON;\", 0, 0, 0);",
          "799:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1242:   return (int)(isNeg? -v : v);",
          "1243: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1254: static int numberOfVChar(const char *z){",
          "1255:   int N = 0;",
          "1256:   while( z[0] && z[0]=='v' ){",
          "1257:     z++;",
          "1258:     N++;",
          "1259:   }",
          "1260:   return z[0]==0 ? N : 0;",
          "1261: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1421:         fatalError(\"timeout is not available on non-unix systems\");",
          "1422: #endif",
          "1423:       }else",
          "1425:         quietFlag = 0;",
          "1426:         verboseFlag++;",
          "1427:         eVerbosity++;",
          "1428:         if( verboseFlag>1 ) runFlags |= SQL_TRACE;",
          "1429:       }else",
          "1430:       if( strcmp(z,\"version\")==0 ){",
          "1431:         int ii;",
          "1432:         const char *z;",
          "",
          "[Removed Lines]",
          "1424:       if( strcmp(z,\"verbose\")==0 || strcmp(z,\"v\")==0 ){",
          "",
          "[Added Lines]",
          "1443:       if( strcmp(z,\"verbose\")==0 ){",
          "1449:       if( (nV = numberOfVChar(z))>=1 ){",
          "1450:         quietFlag = 0;",
          "1451:         verboseFlag += nV;",
          "1452:         eVerbosity += nV;",
          "1453:         if( verboseFlag>1 ) runFlags |= SQL_TRACE;",
          "1454:       }else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c904885b1ab038346a6a47752c3b88deefba2b4",
      "candidate_info": {
        "commit_hash": "3c904885b1ab038346a6a47752c3b88deefba2b4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3c904885b1ab038346a6a47752c3b88deefba2b4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "In the SQLITE_OPEN_NOFOLLOW processing, distinguish between an I/O error on the xAccess() call and an actual symlink encounter.\n\nFossilOrigin-Name: 2e98b42fcb7bc38e22808a9dc1d7a4231ed08ffa97c9f08f33e6e8cd8726856c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb79c828496a703f1410f61458ebc1e15a92a63412b36f51945b2b5a32ec6e88",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4790:     const char *z;",
          "4791:     if( (vfsFlags & SQLITE_OPEN_NOFOLLOW)!=0 ){",
          "4792:       int isLink = 0;",
          "4798:     }",
          "4799:     nPathname = pVfs->mxPathname+1;",
          "4800:     zPathname = sqlite3DbMallocRaw(0, nPathname*2);",
          "",
          "[Removed Lines]",
          "4793:       if( sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink)==0",
          "4794:        && isLink",
          "4795:       ){",
          "4796:         return SQLITE_CANTOPEN_SYMLINK;",
          "4797:       }",
          "",
          "[Added Lines]",
          "4793:       int rc = sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink);",
          "4794:       if( rc==SQLITE_OK && isLink ) rc = SQLITE_CANTOPEN_SYMLINK;",
          "4795:       if( rc ) return rc;",
          "",
          "---------------"
        ]
      }
    }
  ]
}