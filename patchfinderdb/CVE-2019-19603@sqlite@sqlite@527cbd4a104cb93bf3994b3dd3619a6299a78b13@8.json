{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b0b7db91b8cc880ae7d5f3c334607fda17364d62",
      "candidate_info": {
        "commit_hash": "b0b7db91b8cc880ae7d5f3c334607fda17364d62",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b0b7db91b8cc880ae7d5f3c334607fda17364d62",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "src/sqliteInt.h",
          "src/vacuum.c",
          "src/vdbe.c"
        ],
        "message": "Prototype implementation for the VACUUM INTO command.\n\nFossilOrigin-Name: 036e3320a4af36c1311b25b2e504b0079c8b33df8ad7b7e5fddad07150e6f87d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vacuum.c||src/vacuum.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d8e150434bbd179696f1ffe71d1e06cb3d43e6468496c7e481fca8486387bad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1368: %ifndef SQLITE_OMIT_VACUUM",
          "1369: %ifndef SQLITE_OMIT_ATTACH",
          "1372: %endif  SQLITE_OMIT_ATTACH",
          "1373: %endif  SQLITE_OMIT_VACUUM",
          "",
          "[Removed Lines]",
          "1370: cmd ::= VACUUM.                {sqlite3Vacuum(pParse,0);}",
          "1371: cmd ::= VACUUM nm(X).          {sqlite3Vacuum(pParse,&X);}",
          "",
          "[Added Lines]",
          "1370: %type vinto {Token}",
          "1371: cmd ::= VACUUM vinto(Y).                {sqlite3Vacuum(pParse,0,&Y);}",
          "1372: cmd ::= VACUUM nm(X) vinto(Y).          {sqlite3Vacuum(pParse,&X,&Y);}",
          "1373: vinto(A) ::= INTO nm(X).                {A = X;}",
          "1374: vinto(A) ::= .                          {A.z = 0;}",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3985: Index *sqlite3FindIndex(sqlite3*,const char*, const char*);",
          "3986: void sqlite3UnlinkAndDeleteTable(sqlite3*,int,const char*);",
          "3987: void sqlite3UnlinkAndDeleteIndex(sqlite3*,int,const char*);",
          "3990: char *sqlite3NameFromToken(sqlite3*, Token*);",
          "3991: int sqlite3ExprCompare(Parse*,Expr*, Expr*, int);",
          "3992: int sqlite3ExprCompareSkip(Expr*, Expr*, int);",
          "",
          "[Removed Lines]",
          "3988: void sqlite3Vacuum(Parse*,Token*);",
          "3989: int sqlite3RunVacuum(char**, sqlite3*, int);",
          "",
          "[Added Lines]",
          "3988: void sqlite3Vacuum(Parse*,Token*,Token*);",
          "3989: int sqlite3RunVacuum(char**, sqlite3*, int, const char*);",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "107:   int iDb = 0;",
          "108:   if( v==0 ) return;",
          "109:   if( pNm ){",
          "110: #ifndef SQLITE_BUG_COMPATIBLE_20160819",
          "",
          "[Removed Lines]",
          "105: void sqlite3Vacuum(Parse *pParse, Token *pNm){",
          "",
          "[Added Lines]",
          "105: void sqlite3Vacuum(Parse *pParse, Token *pNm, Token *pInto){",
          "108:   assert( pInto!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:   if( iDb!=1 ){",
          "126:     sqlite3VdbeAddOp1(v, OP_Vacuum, iDb);",
          "127:     sqlite3VdbeUsesBtree(v, iDb);",
          "128:   }",
          "129:   return;",
          "130: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     if( pInto->z ){",
          "130:       char *zName = sqlite3NameFromToken(pParse->db, pInto);",
          "131:       sqlite3VdbeChangeP4(v, -1, zName, P4_DYNAMIC);",
          "132:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "135: int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db, int iDb){",
          "",
          "[Added Lines]",
          "140: int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db, int iDb, const char *zOut){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:   nDb = db->nDb;",
          "193:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "194:   assert( (db->nDb-1)==nDb );",
          "195:   pDb = &db->aDb[nDb];",
          "",
          "[Removed Lines]",
          "192:   rc = execSql(db, pzErrMsg, \"ATTACH''AS vacuum_db\");",
          "",
          "[Added Lines]",
          "197:   rc = execSqlF(db, pzErrMsg, \"ATTACH %Q AS vacuum_db\", zOut ? zOut : \"\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "226:   rc = execSql(db, pzErrMsg, \"BEGIN\");",
          "227:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "229:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "",
          "[Removed Lines]",
          "228:   rc = sqlite3BtreeBeginTrans(pMain, 2, 0);",
          "",
          "[Added Lines]",
          "233:   rc = sqlite3BtreeBeginTrans(pMain, zOut==0 ? 2 : 0, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "320:     };",
          "322:     assert( 1==sqlite3BtreeIsInTrans(pTemp) );",
          "326:     for(i=0; i<ArraySize(aCopy); i+=2){",
          "",
          "[Removed Lines]",
          "323:     assert( 1==sqlite3BtreeIsInTrans(pMain) );",
          "",
          "[Added Lines]",
          "328:     assert( zOut!=0 || 1==sqlite3BtreeIsInTrans(pMain) );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "331:       if( NEVER(rc!=SQLITE_OK) ) goto end_of_vacuum;",
          "332:     }",
          "335:     if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "336:     rc = sqlite3BtreeCommit(pTemp);",
          "337:     if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "338: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "340: #endif",
          "341:   }",
          "343:   assert( rc==SQLITE_OK );",
          "346: end_of_vacuum:",
          "",
          "[Removed Lines]",
          "334:     rc = sqlite3BtreeCopyFile(pMain, pTemp);",
          "339:     sqlite3BtreeSetAutoVacuum(pMain, sqlite3BtreeGetAutoVacuum(pTemp));",
          "344:   rc = sqlite3BtreeSetPageSize(pMain, sqlite3BtreeGetPageSize(pTemp), nRes,1);",
          "",
          "[Added Lines]",
          "339:     if( zOut==0 ){",
          "340:       rc = sqlite3BtreeCopyFile(pMain, pTemp);",
          "341:     }else{",
          "342:       rc = sqlite3BtreeCommit(pMain);",
          "343:     }",
          "348:     if( zOut==0 ){",
          "349:       sqlite3BtreeSetAutoVacuum(pMain, sqlite3BtreeGetAutoVacuum(pTemp));",
          "350:     }",
          "355:   if( zOut==0 ){",
          "356:     rc = sqlite3BtreeSetPageSize(pMain, sqlite3BtreeGetPageSize(pTemp), nRes,1);",
          "357:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "368:     pDb->pSchema = 0;",
          "369:   }",
          "375:   return rc;",
          "376: }",
          "",
          "[Removed Lines]",
          "373:   sqlite3ResetAllSchemasOfConnection(db);",
          "",
          "[Added Lines]",
          "384:   if( zOut==0 ){",
          "387:     sqlite3ResetAllSchemasOfConnection(db);",
          "388:   }",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6686: #if !defined(SQLITE_OMIT_VACUUM) && !defined(SQLITE_OMIT_ATTACH)",
          "6692: case OP_Vacuum: {",
          "6693:   assert( p->readOnly==0 );",
          "6695:   if( rc ) goto abort_due_to_error;",
          "6696:   break;",
          "6697: }",
          "",
          "[Removed Lines]",
          "6694:   rc = sqlite3RunVacuum(&p->zErrMsg, db, pOp->p1);",
          "",
          "[Added Lines]",
          "6698:   rc = sqlite3RunVacuum(&p->zErrMsg, db, pOp->p1, pOp->p4.z);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eea8eb6d04f5eb2528f21d0585d603e4c1abe2ae",
      "candidate_info": {
        "commit_hash": "eea8eb6d04f5eb2528f21d0585d603e4c1abe2ae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/eea8eb6d04f5eb2528f21d0585d603e4c1abe2ae",
        "files": [
          "Makefile.in",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/global.c",
          "src/main.c",
          "src/pragma.c",
          "src/resolve.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/test1.c",
          "test/alter.test",
          "test/altercol.test",
          "test/altertab.test",
          "test/fkey2.test",
          "test/without_rowid3.test"
        ],
        "message": "Do not allow direct access to internal-use SQL functions such as sqlite_rename_column() and sqlite3_rename_table() except when the new SQLITE_TESTCTRL_INTERNAL_FUNCTIONS flag is set.\n\nFossilOrigin-Name: 6e1330545e7b74fe5f1f20751a3425e2788441485fc07fcb7626e448c72027ce",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/global.c||src/global.c",
          "src/main.c||src/main.c",
          "src/pragma.c||src/pragma.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c",
          "test/alter.test||test/alter.test",
          "test/altercol.test||test/altercol.test",
          "test/altertab.test||test/altertab.test",
          "test/fkey2.test||test/fkey2.test",
          "test/without_rowid3.test||test/without_rowid3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h",
            "test/altertab.test||test/altertab.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h",
            "test/altertab.test||test/altertab.test"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:   $(TOP)/src/dbstat.c \\",
          "472:   $(TOP)/src/expr.c \\",
          "473:   $(TOP)/src/func.c \\",
          "474:   $(TOP)/src/insert.c \\",
          "475:   $(TOP)/src/wal.c \\",
          "476:   $(TOP)/src/main.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "474:   $(TOP)/src/global.c \\",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "396:   $(TOP)/src/dbstat.c \\",
          "397:   $(TOP)/src/expr.c \\",
          "398:   $(TOP)/src/func.c \\",
          "399:   $(TOP)/src/insert.c \\",
          "400:   $(TOP)/src/wal.c \\",
          "401:   $(TOP)/src/main.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "399:   $(TOP)/src/global.c \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 12920bcb99b25e147e1877ee001bc551a743e3530c954fe2b45a18a4eef9eeff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1605: void sqlite3AlterFunctions(void){",
          "1606:   static FuncDef aAlterTableFuncs[] = {",
          "1610:   };",
          "1611:   sqlite3InsertBuiltinFuncs(aAlterTableFuncs, ArraySize(aAlterTableFuncs));",
          "1612: }",
          "",
          "[Removed Lines]",
          "1607:     FUNCTION(sqlite_rename_column,  9, 0, 0, renameColumnFunc),",
          "1608:     FUNCTION(sqlite_rename_table,  7, 0, 0, renameTableFunc),",
          "1609:     FUNCTION(sqlite_rename_test,  5, 0, 0, renameTableTest),",
          "",
          "[Added Lines]",
          "1600:     INTERNAL_FUNCTION(sqlite_rename_column, 9, renameColumnFunc),",
          "1601:     INTERNAL_FUNCTION(sqlite_rename_table,  7, renameTableFunc),",
          "1602:     INTERNAL_FUNCTION(sqlite_rename_test,   5, renameTableTest),",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3960:     case SQLITE_TESTCTRL_LOCALTIME_FAULT: {",
          "3961:       sqlite3GlobalConfig.bLocaltimeFault = va_arg(ap, int);",
          "3962:       break;",
          "3963:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3971:     case SQLITE_TESTCTRL_INTERNAL_FUNCTIONS: {",
          "3972:       sqlite3GlobalConfig.bInternalFunctions = va_arg(ap, int);",
          "3973:       break;",
          "3974:     }",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1239:     pParse->nMem = 2;",
          "1240:     for(i=0; i<SQLITE_FUNC_HASH_SZ; i++){",
          "1241:       for(p=sqlite3BuiltinFunctions.a[i]; p; p=p->u.pHash ){",
          "1242:         sqlite3VdbeMultiLoad(v, 1, \"si\", p->zName, 1);",
          "1243:       }",
          "1244:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1242:         if( p->funcFlags & SQLITE_FUNC_INTERNAL ) continue;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "771:           notValid(pParse, pNC, \"non-deterministic functions\",",
          "772:                    NC_IdxExpr|NC_PartIdx);",
          "773:         }",
          "774:       }",
          "776:       if( 0==IN_RENAME_OBJECT ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "774:         if( (pDef->funcFlags & SQLITE_FUNC_INTERNAL)!=0",
          "775:          && pParse->nested==0",
          "776:          && sqlite3Config.bInternalFunctions==0",
          "777:         ){",
          "780:           no_such_func = 1;",
          "781:           pDef = 0;",
          "782:         }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7677:       { \"byteorder\",          SQLITE_TESTCTRL_BYTEORDER,     \"\"                   },",
          "7679:       { \"imposter\",           SQLITE_TESTCTRL_IMPOSTER,   \"SCHEMA ON/OFF ROOTPAGE\"},",
          "7680:       { \"localtime_fault\",    SQLITE_TESTCTRL_LOCALTIME_FAULT,\"BOOLEAN\"           },",
          "7681:       { \"never_corrupt\",      SQLITE_TESTCTRL_NEVER_CORRUPT, \"BOOLEAN\"            },",
          "7682:       { \"optimizations\",      SQLITE_TESTCTRL_OPTIMIZATIONS, \"DISABLE-MASK\"       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7680:       { \"internal_functions\", SQLITE_TESTCTRL_INTERNAL_FUNCTIONS, \"BOOLEAN\"       },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7772:         case SQLITE_TESTCTRL_ASSERT:",
          "7773:         case SQLITE_TESTCTRL_ALWAYS:",
          "7774:           if( nArg==3 ){",
          "7775:             int opt = booleanValue(azArg[2]);",
          "7776:             rc2 = sqlite3_test_control(testctrl, opt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7775:         case SQLITE_TESTCTRL_INTERNAL_FUNCTIONS:",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7242: #define SQLITE_TESTCTRL_OPTIMIZATIONS           15",
          "7245: #define SQLITE_TESTCTRL_LOCALTIME_FAULT         18",
          "7247: #define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD    19",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7245: #define SQLITE_TESTCTRL_INTERNAL_FUNCTIONS      17",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1760: #define AGGREGATE2(zName, nArg, arg, nc, xStep, xFinal, extraFlags) \\",
          "1761:   {nArg, SQLITE_UTF8|(nc*SQLITE_FUNC_NEEDCOLL)|extraFlags, \\",
          "1762:    SQLITE_INT_TO_PTR(arg), 0, xStep,xFinal,xFinal,0,#zName, {0}}",
          "1764: #define WAGGREGATE(zName, nArg, arg, nc, xStep, xFinal, xValue, xInverse, f) \\",
          "1765:   {nArg, SQLITE_UTF8|(nc*SQLITE_FUNC_NEEDCOLL)|f, \\",
          "1766:    SQLITE_INT_TO_PTR(arg), 0, xStep,xFinal,xValue,xInverse,#zName, {0}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1767: #define INTERNAL_FUNCTION(zName, nArg, xFunc) \\",
          "1768:   {nArg, SQLITE_FUNC_INTERNAL|SQLITE_UTF8|SQLITE_FUNC_CONSTANT, \\",
          "1769:    0, 0, xFunc, 0, 0, 0, #zName, {0} }",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6711:     const char *zName;",
          "6712:     int i;",
          "6713:   } aVerb[] = {",
          "6717:   };",
          "6718:   int iVerb;",
          "6719:   int iFlag;",
          "",
          "[Removed Lines]",
          "6714:     { \"SQLITE_TESTCTRL_LOCALTIME_FAULT\", SQLITE_TESTCTRL_LOCALTIME_FAULT },",
          "6715:     { \"SQLITE_TESTCTRL_SORTER_MMAP\",     SQLITE_TESTCTRL_SORTER_MMAP     },",
          "6716:     { \"SQLITE_TESTCTRL_IMPOSTER\",        SQLITE_TESTCTRL_IMPOSTER        },",
          "",
          "[Added Lines]",
          "6715:     { \"SQLITE_TESTCTRL_LOCALTIME_FAULT\",    SQLITE_TESTCTRL_LOCALTIME_FAULT },",
          "6716:     { \"SQLITE_TESTCTRL_SORTER_MMAP\",        SQLITE_TESTCTRL_SORTER_MMAP     },",
          "6717:     { \"SQLITE_TESTCTRL_IMPOSTER\",           SQLITE_TESTCTRL_IMPOSTER        },",
          "6718:     { \"SQLITE_TESTCTRL_INTERNAL_FUNCTIONS\", SQLITE_TESTCTRL_INTERNAL_FUNCTIONS},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6732:   iFlag = aVerb[iVerb].i;",
          "6733:   switch( iFlag ){",
          "6734:     case SQLITE_TESTCTRL_LOCALTIME_FAULT: {",
          "6735:       int val;",
          "6736:       if( objc!=3 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6736:     case SQLITE_TESTCTRL_INTERNAL_FUNCTIONS:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6738:         return TCL_ERROR;",
          "6739:       }",
          "6740:       if( Tcl_GetBooleanFromObj(interp, objv[2], &val) ) return TCL_ERROR;",
          "6742:       break;",
          "6743:     }",
          "",
          "[Removed Lines]",
          "6741:       sqlite3_test_control(SQLITE_TESTCTRL_LOCALTIME_FAULT, val);",
          "",
          "[Added Lines]",
          "6744:       sqlite3_test_control(iFlag, val);",
          "",
          "---------------"
        ],
        "test/alter.test||test/alter.test": [
          "File: test/alter.test -> test/alter.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "684: # alter-9.X - Special test: Make sure the sqlite_rename_column() and",
          "685: # rename_table() functions do not crash when handed bad input.",
          "686: #",
          "687: do_test alter-9.1 {",
          "688:   execsql {SELECT SQLITE_RENAME_COLUMN(0,0,0,0,0,0,0,0,0)}",
          "689: } {{}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "687: sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "696:     catch { execsql $sql }",
          "697:   } 1",
          "698: }",
          "700: #------------------------------------------------------------------------",
          "701: # alter-10.X - Make sure ALTER TABLE works with multi-byte UTF-8 characters",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "700: sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "702: # If the INTERNAL_FUNCTIONS test-control is disabled (which is the default),",
          "703: # then the sqlite_rename_table() SQL function is not accessible to ordinary SQL.",
          "704: #",
          "705: do_catchsql_test alter-9.3 {",
          "706:   SELECT sqlite_rename_table(0,0,0,0,0,0,0);",
          "707: } {1 {no such function: sqlite_rename_table}}",
          "",
          "---------------"
        ],
        "test/altercol.test||test/altercol.test": [
          "File: test/altercol.test -> test/altercol.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "618: #-------------------------------------------------------------------------",
          "619: # Passing invalid parameters directly to sqlite_rename_column().",
          "620: #",
          "621: do_execsql_test 14.1 {",
          "622:   CREATE TABLE ddd(sql, type, object, db, tbl, icol, znew, bquote);",
          "623:   INSERT INTO ddd VALUES(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "621: sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "640:   sqlite_rename_column(sql, type, object, db, tbl, icol, znew, bquote, 0)",
          "641:   FROM ddd;",
          "642: } {{} {} {} {}}",
          "644: #-------------------------------------------------------------------------",
          "645: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "644: sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "646: # If the INTERNAL_FUNCTIONS test-control is disabled (which is the default)",
          "647: # then the sqlite_rename_table() SQL function is not accessible to",
          "648: # ordinary SQL.",
          "649: #",
          "650: do_catchsql_test 14.3 {",
          "651:   SELECT sqlite_rename_column(0,0,0,0,0,0,0,0,0);",
          "652: } {1 {no such function: sqlite_rename_column}}",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:     );",
          "241:   } {}",
          "243:   do_execsql_test 7.2 {",
          "244:     SELECT",
          "245:     sqlite_rename_table(db, 0, 0, sql, zOld, zNew, bTemp)",
          "246:     FROM ddd;",
          "247:   } {{} {} {}}",
          "248: }",
          "250: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "249:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "---------------"
        ],
        "test/fkey2.test||test/fkey2.test": [
          "File: test/fkey2.test -> test/fkey2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "987:         'main', 'table', 't1', $zCreate, $zOld, $zNew, 0",
          "988:     )}",
          "989:   }",
          "990:   do_test fkey2-14.2.1.1 {",
          "991:     test_rename_parent {CREATE TABLE t1(a REFERENCES t2)} t2 t3",
          "992:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "990:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "996:   do_test fkey2-14.2.1.3 {",
          "997:     test_rename_parent {CREATE TABLE t1(a REFERENCES \"t2\")} t2 t3",
          "998:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "1000:   # Test ALTER TABLE RENAME TABLE a bit.",
          "1001:   #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1000:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1068:     }",
          "1069:   } {{CREATE TABLE t2(a, b, c REFERENCES t1, d DEFAULT NULL REFERENCES t1, e REFERENCES t1 DEFAULT NULL, h DEFAULT 'text' REFERENCES t1)}}",
          "1071:   do_test fkey2-14.2tmp.1.1 {",
          "1072:     test_rename_parent {CREATE TABLE t1(a REFERENCES t2)} t2 t3",
          "1073:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1073:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1077:   do_test fkey2-14.2tmp.1.3 {",
          "1078:     test_rename_parent {CREATE TABLE t1(a REFERENCES \"t2\")} t2 t3",
          "1079:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "1081:   # Test ALTER TABLE RENAME TABLE a bit.",
          "1082:   #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1083:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1150:     }",
          "1151:   } {{CREATE TABLE t2(a, b, c REFERENCES t1, d DEFAULT NULL REFERENCES t1, e REFERENCES t1 DEFAULT NULL, h DEFAULT 'text' REFERENCES t1)}}",
          "1153:   do_test fkey2-14.2aux.1.1 {",
          "1154:     test_rename_parent {CREATE TABLE t1(a REFERENCES t2)} t2 t3",
          "1155:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1157:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1159:   do_test fkey2-14.2aux.1.3 {",
          "1160:     test_rename_parent {CREATE TABLE t1(a REFERENCES \"t2\")} t2 t3",
          "1161:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "1163:   # Test ALTER TABLE RENAME TABLE a bit.",
          "1164:   #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1167:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "---------------"
        ],
        "test/without_rowid3.test||test/without_rowid3.test": [
          "File: test/without_rowid3.test -> test/without_rowid3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "953:         'main', 'table', 't1', $zCreate, $zOld, $zNew, 0",
          "954:     )}",
          "955:   }",
          "956:   do_test without_rowid3-14.2.1.1 {",
          "957:     test_rename_parent {CREATE TABLE t1(a REFERENCES t2)} t2 t3",
          "958:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "956:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "962:   do_test without_rowid3-14.2.1.3 {",
          "963:     test_rename_parent {CREATE TABLE t1(a REFERENCES \"t2\")} t2 t3",
          "964:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "966:   # Test ALTER TABLE RENAME TABLE a bit.",
          "967:   #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "966:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1037:     }",
          "1038:   } {{CREATE TABLE t2(a, b, c REFERENCES t1, d DEFAULT NULL REFERENCES t1, e REFERENCES t1 DEFAULT NULL, h DEFAULT 'text' REFERENCES t1)}}",
          "1040:   do_test without_rowid3-14.2tmp.1.1 {",
          "1041:     test_rename_parent {CREATE TABLE t1(a REFERENCES t2)} t2 t3",
          "1042:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1042:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1046:   do_test without_rowid3-14.2tmp.1.3 {",
          "1047:     test_rename_parent {CREATE TABLE t1(a REFERENCES \"t2\")} t2 t3",
          "1048:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "1050:   # Test ALTER TABLE RENAME TABLE a bit.",
          "1051:   #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1052:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1122:     }",
          "1123:   } {{CREATE TABLE t2(a, b, c REFERENCES t1, d DEFAULT NULL REFERENCES t1, e REFERENCES t1 DEFAULT NULL, h DEFAULT 'text' REFERENCES t1)}}",
          "1125:   do_test without_rowid3-14.2aux.1.1 {",
          "1126:     test_rename_parent {CREATE TABLE t1(a REFERENCES t2)} t2 t3",
          "1127:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1129:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1131:   do_test without_rowid3-14.2aux.1.3 {",
          "1132:     test_rename_parent {CREATE TABLE t1(a REFERENCES \"t2\")} t2 t3",
          "1133:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "1135:   # Test ALTER TABLE RENAME TABLE a bit.",
          "1136:   #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1139:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df21659a40e9dcaaeb4faecb0d13704e359296f2",
      "candidate_info": {
        "commit_hash": "df21659a40e9dcaaeb4faecb0d13704e359296f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/df21659a40e9dcaaeb4faecb0d13704e359296f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "Improved automatic detection of dbsqlfuzz cases in fuzzcheck.\n\nFossilOrigin-Name: 1ef24e89c9630fd383ba32f5aefcf9c27907f27f5072f3537a1cfd75a093a8d7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb9074ff450a67feaa62ca61d19154de26d5c8a8d147409ee6d1fbd667b2914f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "604:   if( iDiff > p->mxInterval ) p->mxInterval = iDiff;",
          "605:   p->nCb++;",
          "606:   if( rc==0 && p->mxCb>0 && p->mxCb<=p->nCb ) rc = 1;",
          "608:     printf(\"Timeout on progress callback %d\\n\", p->nCb);",
          "609:     fflush(stdout);",
          "610:     p->timeoutHit = 1;",
          "",
          "[Removed Lines]",
          "607:   if( rc && !p->timeoutHit && eVerbosity ){",
          "",
          "[Added Lines]",
          "607:   if( rc && !p->timeoutHit && eVerbosity>=2 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "653:   sqlite3_stmt *pStmt;",
          "654:   while( isspace(zSql[0]) ) zSql++;",
          "655:   if( zSql[0]==0 ) return SQLITE_OK;",
          "657:     printf(\"RUNNING-SQL: [%s]\\n\", zSql);",
          "658:     fflush(stdout);",
          "659:   }",
          "660:   rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, 0);",
          "661:   if( rc==SQLITE_OK ){",
          "662:     while( (rc = sqlite3_step(pStmt))==SQLITE_ROW ){",
          "664:         int j;",
          "665:         for(j=0; j<sqlite3_column_count(pStmt); j++){",
          "666:           if( j ) printf(\",\");",
          "",
          "[Removed Lines]",
          "656:   if( eVerbosity>=3 ){",
          "663:       if( eVerbosity>=4 ){",
          "",
          "[Added Lines]",
          "656:   if( eVerbosity>=4 ){",
          "663:       if( eVerbosity>=5 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "707:         printf(\"\\n\");",
          "708:         fflush(stdout);",
          "712:       printf(\"SQL-ERROR: (%d) %s\\n\", rc, sqlite3_errmsg(db));",
          "713:       fflush(stdout);",
          "714:     }",
          "716:     printf(\"SQL-ERROR (%d): %s\\n\", rc, sqlite3_errmsg(db));",
          "717:     fflush(stdout);",
          "",
          "[Removed Lines]",
          "711:     if( rc!=SQLITE_DONE && eVerbosity>=3 ){",
          "715:   }else if( eVerbosity>=3 ){",
          "",
          "[Added Lines]",
          "711:     if( rc!=SQLITE_DONE && eVerbosity>=4 ){",
          "715:   }else if( eVerbosity>=4 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "745:   iSql = decodeDatabase((unsigned char*)aData, (int)nByte, &aDb, &nDb);",
          "746:   if( iSql<0 ) return 0;",
          "747:   nSql = nByte - iSql;",
          "749:     printf(",
          "750:       \"****** %d-byte input, %d-byte database, %d-byte script \"",
          "751:       \"******\\n\", (int)nByte, nDb, nSql);",
          "",
          "[Removed Lines]",
          "748:   if( eVerbosity>=2 ){",
          "",
          "[Added Lines]",
          "748:   if( eVerbosity>=3 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "830:   if( rc!=SQLITE_OK ){",
          "831:     fprintf(stdout, \"sqlite3_close() returns %d\\n\", rc);",
          "832:   }",
          "834:     fprintf(stdout, \"Peak memory usages: %f MB\\n\",",
          "835:        sqlite3_memory_highwater(1) / 1000000.0);",
          "836:   }",
          "",
          "[Removed Lines]",
          "833:   if( eVerbosity ){",
          "",
          "[Added Lines]",
          "833:   if( eVerbosity>=2 ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "856: static int isDbSql(unsigned char *a, int n){",
          "857:   if( n>4 && memcmp(a,\"\\n--\\n\",4)==0 ) return 1;",
          "858:   while( n>0 && isspace(a[0]) ){ a++; n--; }",
          "860:   return 0;",
          "861: }",
          "",
          "[Removed Lines]",
          "859:   if( n>8 && memcmp(a,\"53514c69\",8)==0 ) return 1;",
          "",
          "[Added Lines]",
          "857:   unsigned char buf[12];",
          "858:   int i;",
          "861:   for(i=0; n>0 && i<8; n--, a++){",
          "862:     if( isxdigit(a[0]) ) buf[i++] = a[0];",
          "863:   }",
          "864:   if( i==8 && memcmp(buf,\"53514c69\",8)==0 ) return 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4cd292c2aa7e453ee3879d47df0c0503b47db75",
      "candidate_info": {
        "commit_hash": "d4cd292c2aa7e453ee3879d47df0c0503b47db75",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4cd292c2aa7e453ee3879d47df0c0503b47db75",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Bug fix with INSERT using an explicit column list on a table with a non-final STORED column.\n\nFossilOrigin-Name: 61b4459ae6a6cc182c11abbc8b1dd629f77beb088d7ccad5e563d8d4769056df",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fe7517bf4d360597576ab9aba29627d7926d23f2bbbfb3e7bf4d32761617574c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "698:   if( pColumn ){",
          "699:     for(i=0; i<pColumn->nId; i++){",
          "700:       pColumn->a[i].idx = -1;",
          "",
          "[Removed Lines]",
          "697:   bIdListInOrder = (pTab->tabFlags & TF_OOOHidden)==0;",
          "",
          "[Added Lines]",
          "697:   bIdListInOrder = (pTab->tabFlags & (TF_OOOHidden|TF_HasStored))==0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "112e174020809d0b91249716fb9de4aa3ee7437d",
      "candidate_info": {
        "commit_hash": "112e174020809d0b91249716fb9de4aa3ee7437d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/112e174020809d0b91249716fb9de4aa3ee7437d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "test/releasetest.tcl"
        ],
        "message": "Avoid a sanitizer error in test1.c. Have releasetest.tcl/wapptest.tcl create a file called \"makecommand.sh\" that can be used to rerun a test from the command line.\n\nFossilOrigin-Name: 4de4480ffdea1e923c4b964692ccde92d713c8b6c056bb04bddf1ff55ee891ec",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "test/releasetest.tcl||test/releasetest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee886600297c2a03d9d1d10db88d3d107b48e5d4de5e5d91b0ab16cc7c447ede",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4272:   }",
          "4273:   pzTail = objc>=5 ? &zTail : 0;",
          "4274:   rc = sqlite3_prepare_v2(db, zCopy, bytes, &pStmt, pzTail);",
          "4275:   free(zCopy);",
          "4278:   assert(rc==SQLITE_OK || pStmt==0);",
          "4279:   Tcl_ResetResult(interp);",
          "4280:   if( sqlite3TestErrCode(interp, db, rc) ) return TCL_ERROR;",
          "4282:     if( bytes>=0 ){",
          "4283:       bytes = bytes - (int)(zTail-zSql);",
          "4284:     }",
          "",
          "[Removed Lines]",
          "4276:   zTail = &zSql[(zTail - zCopy)];",
          "4281:   if( rc==SQLITE_OK && zTail && objc>=5 ){",
          "",
          "[Added Lines]",
          "4275:   if( objc>=5 ){",
          "4276:     zTail = &zSql[(zTail - zCopy)];",
          "4277:   }",
          "4283:   if( rc==SQLITE_OK && objc>=5 && zTail ){",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "501:       unset -nocomplain savedEnv(TCLSH_CMD)",
          "502:     }",
          "503:     set ::env(TCLSH_CMD) [file nativename [info nameofexecutable]]",
          "505:     if {[info exists savedEnv(TCLSH_CMD)]} {",
          "506:       set ::env(TCLSH_CMD) $savedEnv(TCLSH_CMD)",
          "507:     } else {",
          "",
          "[Removed Lines]",
          "504:     set rc [catch [makeCommand $testtarget $makeOpts $cflags $opts]]",
          "",
          "[Added Lines]",
          "505:     # Create a file called \"makecommand.sh\" containing the text of",
          "506:     # the make command line.",
          "507:     catch {",
          "508:       set cmd [makeCommand $testtarget $makeOpts $cflags $opts]",
          "509:       set fd [open makecommand.sh w]",
          "510:       foreach e $cmd {",
          "511:         if {[string first \" \" $e]>=0} {",
          "512:           puts -nonewline $fd \"\\\"$e\\\"\"",
          "513:         } else {",
          "514:           puts -nonewline $fd $e",
          "515:         }",
          "516:         puts -nonewline $fd \" \"",
          "517:       }",
          "518:       puts $fd \"\"",
          "519:       close $fd",
          "520:     } msg",
          "522:     # Run the make command.",
          "523:     set rc [catch {trace_cmd exec {*}$cmd >>& test.log} msg]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737: # specified targets, compiler flags, and options.",
          "738: #",
          "739: proc makeCommand { targets makeOpts cflags opts } {",
          "741:   if {$::MSVC} {",
          "742:     set nmakeDir [file nativename $::SRCDIR]",
          "743:     set nmakeFile [file nativename [file join $nmakeDir Makefile.msc]]",
          "",
          "[Removed Lines]",
          "740:   set result [list trace_cmd exec]",
          "",
          "[Added Lines]",
          "759:   set result [list]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "758:   foreach target $targets {",
          "759:     lappend result $target",
          "760:   }",
          "762: }",
          "764: # The following procedure prints its arguments if ::TRACE is true.",
          "",
          "[Removed Lines]",
          "761:   lappend result CFLAGS=$cflags OPTS=$opts >>& test.log",
          "",
          "[Added Lines]",
          "780:   lappend result CFLAGS=$cflags OPTS=$opts",
          "",
          "---------------"
        ]
      }
    }
  ]
}