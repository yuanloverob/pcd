{
  "cve_id": "CVE-2021-41133",
  "cve_desc": "Flatpak is a system for building, distributing, and running sandboxed desktop applications on Linux. In versions prior to 1.10.4 and 1.12.0, Flatpak apps with direct access to AF_UNIX sockets such as those used by Wayland, Pipewire or pipewire-pulse can trick portals and other host-OS services into treating the Flatpak app as though it was an ordinary, non-sandboxed host-OS process. They can do this by manipulating the VFS using recent mount-related syscalls that are not blocked by Flatpak's denylist seccomp filter, in order to substitute a crafted `/.flatpak-info` or make that file disappear entirely. Flatpak apps that act as clients for AF_UNIX sockets such as those used by Wayland, Pipewire or pipewire-pulse can escalate the privileges that the corresponding services will believe the Flatpak app has. Note that protocols that operate entirely over the D-Bus session bus (user bus), system bus or accessibility bus are not affected by this. This is due to the use of a proxy process `xdg-dbus-proxy`, whose VFS cannot be manipulated by the Flatpak app, when interacting with these buses. Patches exist for versions 1.10.4 and 1.12.0, and as of time of publication, a patch for version 1.8.2 is being planned. There are no workarounds aside from upgrading to a patched version.",
  "repo": "flatpak/flatpak",
  "patch_hash": "e26ac7586c392b5eb35ff4609fe232c52523b2cf",
  "patch_info": {
    "commit_hash": "e26ac7586c392b5eb35ff4609fe232c52523b2cf",
    "repo": "flatpak/flatpak",
    "commit_url": "https://github.com/flatpak/flatpak/commit/e26ac7586c392b5eb35ff4609fe232c52523b2cf",
    "files": [
      "common/flatpak-run.c"
    ],
    "message": "run: Add an errno value to seccomp filters\n\nAt the moment, if we block a syscall we always make it fail with EPERM,\nbut this is risky: user-space libraries can start to use new replacements\nfor old syscalls at any time, and will often treat EPERM as a fatal error.\nFor new syscalls, we should make the syscall fail with ENOSYS, which is\nindistinguishable from running on an older kernel and will cause fallback\nto an older implementation, for example clone3() to clone().\n\nIn future we should probably move from EPERM to ENOSYS for some of the\nsyscalls we already block, but for now keep the status quo.\n\nThis is a prerequisite for fixing the vulnerability tracked as\nGHSA-67h7-w3jq-vh4q.\n\nSigned-off-by: Simon McVittie <smcv@collabora.com>",
    "before_after_code_files": [
      "common/flatpak-run.c||common/flatpak-run.c"
    ]
  },
  "patch_diff": {
    "common/flatpak-run.c||common/flatpak-run.c": [
      "File: common/flatpak-run.c -> common/flatpak-run.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2897:   struct",
      "2898:   {",
      "2899:     int                  scall;",
      "2900:     struct scmp_arg_cmp *arg;",
      "2901:   } syscall_blocklist[] = {",
      "2930: #if defined(__s390__) || defined(__s390x__) || defined(__CRIS__)",
      "2934: #else",
      "2937: #endif",
      "2941:   };",
      "2943:   struct",
      "2944:   {",
      "2945:     int                  scall;",
      "2946:     struct scmp_arg_cmp *arg;",
      "2947:   } syscall_nondevel_blocklist[] = {",
      "2955:   };",
      "2957:   struct",
      "",
      "[Removed Lines]",
      "2903:     {SCMP_SYS (syslog)},",
      "2905:     {SCMP_SYS (uselib)},",
      "2907:     {SCMP_SYS (acct)},",
      "2910:     {SCMP_SYS (modify_ldt)},",
      "2912:     {SCMP_SYS (quotactl)},",
      "2915:     {SCMP_SYS (add_key)},",
      "2916:     {SCMP_SYS (keyctl)},",
      "2917:     {SCMP_SYS (request_key)},",
      "2920:     {SCMP_SYS (move_pages)},",
      "2921:     {SCMP_SYS (mbind)},",
      "2922:     {SCMP_SYS (get_mempolicy)},",
      "2923:     {SCMP_SYS (set_mempolicy)},",
      "2924:     {SCMP_SYS (migrate_pages)},",
      "2927:     {SCMP_SYS (unshare)},",
      "2928:     {SCMP_SYS (mount)},",
      "2929:     {SCMP_SYS (pivot_root)},",
      "2933:     {SCMP_SYS (clone), &SCMP_A1 (SCMP_CMP_MASKED_EQ, CLONE_NEWUSER, CLONE_NEWUSER)},",
      "2936:     {SCMP_SYS (clone), &SCMP_A0 (SCMP_CMP_MASKED_EQ, CLONE_NEWUSER, CLONE_NEWUSER)},",
      "2940:     {SCMP_SYS (ioctl), &SCMP_A1 (SCMP_CMP_MASKED_EQ, 0xFFFFFFFFu, (int) TIOCSTI)},",
      "2951:     {SCMP_SYS (perf_event_open)},",
      "2953:     {SCMP_SYS (personality), &SCMP_A0 (SCMP_CMP_NE, allowed_personality)},",
      "2954:     {SCMP_SYS (ptrace)}",
      "",
      "[Added Lines]",
      "2900:     int                  errnum;",
      "2904:     {SCMP_SYS (syslog), EPERM},",
      "2906:     {SCMP_SYS (uselib), EPERM},",
      "2908:     {SCMP_SYS (acct), EPERM},",
      "2911:     {SCMP_SYS (modify_ldt), EPERM},",
      "2913:     {SCMP_SYS (quotactl), EPERM},",
      "2916:     {SCMP_SYS (add_key), EPERM},",
      "2917:     {SCMP_SYS (keyctl), EPERM},",
      "2918:     {SCMP_SYS (request_key), EPERM},",
      "2921:     {SCMP_SYS (move_pages), EPERM},",
      "2922:     {SCMP_SYS (mbind), EPERM},",
      "2923:     {SCMP_SYS (get_mempolicy), EPERM},",
      "2924:     {SCMP_SYS (set_mempolicy), EPERM},",
      "2925:     {SCMP_SYS (migrate_pages), EPERM},",
      "2928:     {SCMP_SYS (unshare), EPERM},",
      "2929:     {SCMP_SYS (mount), EPERM},",
      "2930:     {SCMP_SYS (pivot_root), EPERM},",
      "2934:     {SCMP_SYS (clone), EPERM, &SCMP_A1 (SCMP_CMP_MASKED_EQ, CLONE_NEWUSER, CLONE_NEWUSER)},",
      "2937:     {SCMP_SYS (clone), EPERM, &SCMP_A0 (SCMP_CMP_MASKED_EQ, CLONE_NEWUSER, CLONE_NEWUSER)},",
      "2941:     {SCMP_SYS (ioctl), EPERM, &SCMP_A1 (SCMP_CMP_MASKED_EQ, 0xFFFFFFFFu, (int) TIOCSTI)},",
      "2947:     int                  errnum;",
      "2953:     {SCMP_SYS (perf_event_open), EPERM},",
      "2955:     {SCMP_SYS (personality), EPERM, &SCMP_A0 (SCMP_CMP_NE, allowed_personality)},",
      "2956:     {SCMP_SYS (ptrace), EPERM}",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3035:   for (i = 0; i < G_N_ELEMENTS (syscall_blocklist); i++)",
      "3036:     {",
      "3037:       int scall = syscall_blocklist[i].scall;",
      "3038:       if (syscall_blocklist[i].arg)",
      "3040:       else",
      "3042:       if (r < 0 && r == -EFAULT /* unknown syscall */)",
      "3043:         return flatpak_fail_error (error, FLATPAK_ERROR_SETUP_FAILED, _(\"Failed to block syscall %d\"), scall);",
      "3044:     }",
      "",
      "[Removed Lines]",
      "3039:         r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (EPERM), scall, 1, *syscall_blocklist[i].arg);",
      "3041:         r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (EPERM), scall, 0);",
      "",
      "[Added Lines]",
      "3040:       int errnum = syscall_blocklist[i].errnum;",
      "3042:       g_return_val_if_fail (errnum == EPERM || errnum == ENOSYS, FALSE);",
      "3045:         r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (errnum), scall, 1, *syscall_blocklist[i].arg);",
      "3047:         r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (errnum), scall, 0);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3048:       for (i = 0; i < G_N_ELEMENTS (syscall_nondevel_blocklist); i++)",
      "3049:         {",
      "3050:           int scall = syscall_nondevel_blocklist[i].scall;",
      "3051:           if (syscall_nondevel_blocklist[i].arg)",
      "3053:           else",
      "3056:           if (r < 0 && r == -EFAULT /* unknown syscall */)",
      "3057:             return flatpak_fail_error (error, FLATPAK_ERROR_SETUP_FAILED, _(\"Failed to block syscall %d\"), scall);",
      "",
      "[Removed Lines]",
      "3052:             r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (EPERM), scall, 1, *syscall_nondevel_blocklist[i].arg);",
      "3054:             r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (EPERM), scall, 0);",
      "",
      "[Added Lines]",
      "3057:           int errnum = syscall_nondevel_blocklist[i].errnum;",
      "3059:           g_return_val_if_fail (errnum == EPERM || errnum == ENOSYS, FALSE);",
      "3062:             r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (errnum), scall, 1, *syscall_nondevel_blocklist[i].arg);",
      "3064:             r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (errnum), scall, 0);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "89f9bb78a9d7daa4bdee954b35aa6b6376e6ac00",
      "candidate_info": {
        "commit_hash": "89f9bb78a9d7daa4bdee954b35aa6b6376e6ac00",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/89f9bb78a9d7daa4bdee954b35aa6b6376e6ac00",
        "files": [
          "common/flatpak-run.c"
        ],
        "message": "run: Add an errno value to seccomp filters\n\nAt the moment, if we block a syscall we always make it fail with EPERM,\nbut this is risky: user-space libraries can start to use new replacements\nfor old syscalls at any time, and will often treat EPERM as a fatal error.\nFor new syscalls, we should make the syscall fail with ENOSYS, which is\nindistinguishable from running on an older kernel and will cause fallback\nto an older implementation, for example clone3() to clone().\n\nIn future we should probably move from EPERM to ENOSYS for some of the\nsyscalls we already block, but for now keep the status quo.\n\nThis is a prerequisite for fixing the vulnerability tracked as\nGHSA-67h7-w3jq-vh4q.\n\nSigned-off-by: Simon McVittie <smcv@collabora.com>",
        "before_after_code_files": [
          "common/flatpak-run.c||common/flatpak-run.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "common/flatpak-run.c||common/flatpak-run.c"
          ],
          "candidate": [
            "common/flatpak-run.c||common/flatpak-run.c"
          ]
        }
      },
      "candidate_diff": {
        "common/flatpak-run.c||common/flatpak-run.c": [
          "File: common/flatpak-run.c -> common/flatpak-run.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2623:   struct",
          "2624:   {",
          "2625:     int                  scall;",
          "2626:     struct scmp_arg_cmp *arg;",
          "2627:   } syscall_blocklist[] = {",
          "2656: #if defined(__s390__) || defined(__s390x__) || defined(__CRIS__)",
          "2660: #else",
          "2663: #endif",
          "2667:   };",
          "2669:   struct",
          "2670:   {",
          "2671:     int                  scall;",
          "2672:     struct scmp_arg_cmp *arg;",
          "2673:   } syscall_nondevel_blocklist[] = {",
          "2681:   };",
          "2683:   struct",
          "",
          "[Removed Lines]",
          "2629:     {SCMP_SYS (syslog)},",
          "2631:     {SCMP_SYS (uselib)},",
          "2633:     {SCMP_SYS (acct)},",
          "2636:     {SCMP_SYS (modify_ldt)},",
          "2638:     {SCMP_SYS (quotactl)},",
          "2641:     {SCMP_SYS (add_key)},",
          "2642:     {SCMP_SYS (keyctl)},",
          "2643:     {SCMP_SYS (request_key)},",
          "2646:     {SCMP_SYS (move_pages)},",
          "2647:     {SCMP_SYS (mbind)},",
          "2648:     {SCMP_SYS (get_mempolicy)},",
          "2649:     {SCMP_SYS (set_mempolicy)},",
          "2650:     {SCMP_SYS (migrate_pages)},",
          "2653:     {SCMP_SYS (unshare)},",
          "2654:     {SCMP_SYS (mount)},",
          "2655:     {SCMP_SYS (pivot_root)},",
          "2659:     {SCMP_SYS (clone), &SCMP_A1 (SCMP_CMP_MASKED_EQ, CLONE_NEWUSER, CLONE_NEWUSER)},",
          "2662:     {SCMP_SYS (clone), &SCMP_A0 (SCMP_CMP_MASKED_EQ, CLONE_NEWUSER, CLONE_NEWUSER)},",
          "2666:     {SCMP_SYS (ioctl), &SCMP_A1 (SCMP_CMP_MASKED_EQ, 0xFFFFFFFFu, (int) TIOCSTI)},",
          "2677:     {SCMP_SYS (perf_event_open)},",
          "2679:     {SCMP_SYS (personality), &SCMP_A0 (SCMP_CMP_NE, allowed_personality)},",
          "2680:     {SCMP_SYS (ptrace)}",
          "",
          "[Added Lines]",
          "2626:     int                  errnum;",
          "2630:     {SCMP_SYS (syslog), EPERM},",
          "2632:     {SCMP_SYS (uselib), EPERM},",
          "2634:     {SCMP_SYS (acct), EPERM},",
          "2637:     {SCMP_SYS (modify_ldt), EPERM},",
          "2639:     {SCMP_SYS (quotactl), EPERM},",
          "2642:     {SCMP_SYS (add_key), EPERM},",
          "2643:     {SCMP_SYS (keyctl), EPERM},",
          "2644:     {SCMP_SYS (request_key), EPERM},",
          "2647:     {SCMP_SYS (move_pages), EPERM},",
          "2648:     {SCMP_SYS (mbind), EPERM},",
          "2649:     {SCMP_SYS (get_mempolicy), EPERM},",
          "2650:     {SCMP_SYS (set_mempolicy), EPERM},",
          "2651:     {SCMP_SYS (migrate_pages), EPERM},",
          "2654:     {SCMP_SYS (unshare), EPERM},",
          "2655:     {SCMP_SYS (mount), EPERM},",
          "2656:     {SCMP_SYS (pivot_root), EPERM},",
          "2660:     {SCMP_SYS (clone), EPERM, &SCMP_A1 (SCMP_CMP_MASKED_EQ, CLONE_NEWUSER, CLONE_NEWUSER)},",
          "2663:     {SCMP_SYS (clone), EPERM, &SCMP_A0 (SCMP_CMP_MASKED_EQ, CLONE_NEWUSER, CLONE_NEWUSER)},",
          "2667:     {SCMP_SYS (ioctl), EPERM, &SCMP_A1 (SCMP_CMP_MASKED_EQ, 0xFFFFFFFFu, (int) TIOCSTI)},",
          "2673:     int                  errnum;",
          "2679:     {SCMP_SYS (perf_event_open), EPERM},",
          "2681:     {SCMP_SYS (personality), EPERM, &SCMP_A0 (SCMP_CMP_NE, allowed_personality)},",
          "2682:     {SCMP_SYS (ptrace), EPERM}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2762:   for (i = 0; i < G_N_ELEMENTS (syscall_blocklist); i++)",
          "2763:     {",
          "2764:       int scall = syscall_blocklist[i].scall;",
          "2765:       if (syscall_blocklist[i].arg)",
          "2767:       else",
          "2769:       if (r < 0 && r == -EFAULT /* unknown syscall */)",
          "2770:         return flatpak_fail_error (error, FLATPAK_ERROR_SETUP_FAILED, _(\"Failed to block syscall %d\"), scall);",
          "2771:     }",
          "",
          "[Removed Lines]",
          "2766:         r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (EPERM), scall, 1, *syscall_blocklist[i].arg);",
          "2768:         r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (EPERM), scall, 0);",
          "",
          "[Added Lines]",
          "2767:       int errnum = syscall_blocklist[i].errnum;",
          "2769:       g_return_val_if_fail (errnum == EPERM || errnum == ENOSYS, FALSE);",
          "2772:         r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (errnum), scall, 1, *syscall_blocklist[i].arg);",
          "2774:         r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (errnum), scall, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2775:       for (i = 0; i < G_N_ELEMENTS (syscall_nondevel_blocklist); i++)",
          "2776:         {",
          "2777:           int scall = syscall_nondevel_blocklist[i].scall;",
          "2778:           if (syscall_nondevel_blocklist[i].arg)",
          "2780:           else",
          "2783:           if (r < 0 && r == -EFAULT /* unknown syscall */)",
          "2784:             return flatpak_fail_error (error, FLATPAK_ERROR_SETUP_FAILED, _(\"Failed to block syscall %d\"), scall);",
          "",
          "[Removed Lines]",
          "2779:             r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (EPERM), scall, 1, *syscall_nondevel_blocklist[i].arg);",
          "2781:             r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (EPERM), scall, 0);",
          "",
          "[Added Lines]",
          "2784:           int errnum = syscall_nondevel_blocklist[i].errnum;",
          "2786:           g_return_val_if_fail (errnum == EPERM || errnum == ENOSYS, FALSE);",
          "2789:             r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (errnum), scall, 1, *syscall_nondevel_blocklist[i].arg);",
          "2791:             r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (errnum), scall, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dce883e4c3b9078f222d2220acf805f49a27b41e",
      "candidate_info": {
        "commit_hash": "dce883e4c3b9078f222d2220acf805f49a27b41e",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/dce883e4c3b9078f222d2220acf805f49a27b41e",
        "files": [
          "common/flatpak-run.c"
        ],
        "message": "run: Add an errno value to seccomp filters\n\nAt the moment, if we block a syscall we always make it fail with EPERM,\nbut this is risky: user-space libraries can start to use new replacements\nfor old syscalls at any time, and will often treat EPERM as a fatal error.\nFor new syscalls, we should make the syscall fail with ENOSYS, which is\nindistinguishable from running on an older kernel and will cause fallback\nto an older implementation, for example clone3() to clone().\n\nIn future we should probably move from EPERM to ENOSYS for some of the\nsyscalls we already block, but for now keep the status quo.\n\nThis is a prerequisite for fixing the vulnerability tracked as\nGHSA-67h7-w3jq-vh4q.\n\nSigned-off-by: Simon McVittie <smcv@collabora.com>",
        "before_after_code_files": [
          "common/flatpak-run.c||common/flatpak-run.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "common/flatpak-run.c||common/flatpak-run.c"
          ],
          "candidate": [
            "common/flatpak-run.c||common/flatpak-run.c"
          ]
        }
      },
      "candidate_diff": {
        "common/flatpak-run.c||common/flatpak-run.c": [
          "File: common/flatpak-run.c -> common/flatpak-run.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2788:   struct",
          "2789:   {",
          "2790:     int                  scall;",
          "2791:     struct scmp_arg_cmp *arg;",
          "2792:   } syscall_blocklist[] = {",
          "2821: #if defined(__s390__) || defined(__s390x__) || defined(__CRIS__)",
          "2825: #else",
          "2828: #endif",
          "2832:   };",
          "2834:   struct",
          "2835:   {",
          "2836:     int                  scall;",
          "2837:     struct scmp_arg_cmp *arg;",
          "2838:   } syscall_nondevel_blocklist[] = {",
          "2846:   };",
          "2848:   struct",
          "",
          "[Removed Lines]",
          "2794:     {SCMP_SYS (syslog)},",
          "2796:     {SCMP_SYS (uselib)},",
          "2798:     {SCMP_SYS (acct)},",
          "2801:     {SCMP_SYS (modify_ldt)},",
          "2803:     {SCMP_SYS (quotactl)},",
          "2806:     {SCMP_SYS (add_key)},",
          "2807:     {SCMP_SYS (keyctl)},",
          "2808:     {SCMP_SYS (request_key)},",
          "2811:     {SCMP_SYS (move_pages)},",
          "2812:     {SCMP_SYS (mbind)},",
          "2813:     {SCMP_SYS (get_mempolicy)},",
          "2814:     {SCMP_SYS (set_mempolicy)},",
          "2815:     {SCMP_SYS (migrate_pages)},",
          "2818:     {SCMP_SYS (unshare)},",
          "2819:     {SCMP_SYS (mount)},",
          "2820:     {SCMP_SYS (pivot_root)},",
          "2824:     {SCMP_SYS (clone), &SCMP_A1 (SCMP_CMP_MASKED_EQ, CLONE_NEWUSER, CLONE_NEWUSER)},",
          "2827:     {SCMP_SYS (clone), &SCMP_A0 (SCMP_CMP_MASKED_EQ, CLONE_NEWUSER, CLONE_NEWUSER)},",
          "2831:     {SCMP_SYS (ioctl), &SCMP_A1 (SCMP_CMP_MASKED_EQ, 0xFFFFFFFFu, (int) TIOCSTI)},",
          "2842:     {SCMP_SYS (perf_event_open)},",
          "2844:     {SCMP_SYS (personality), &SCMP_A0 (SCMP_CMP_NE, allowed_personality)},",
          "2845:     {SCMP_SYS (ptrace)}",
          "",
          "[Added Lines]",
          "2791:     int                  errnum;",
          "2795:     {SCMP_SYS (syslog), EPERM},",
          "2797:     {SCMP_SYS (uselib), EPERM},",
          "2799:     {SCMP_SYS (acct), EPERM},",
          "2802:     {SCMP_SYS (modify_ldt), EPERM},",
          "2804:     {SCMP_SYS (quotactl), EPERM},",
          "2807:     {SCMP_SYS (add_key), EPERM},",
          "2808:     {SCMP_SYS (keyctl), EPERM},",
          "2809:     {SCMP_SYS (request_key), EPERM},",
          "2812:     {SCMP_SYS (move_pages), EPERM},",
          "2813:     {SCMP_SYS (mbind), EPERM},",
          "2814:     {SCMP_SYS (get_mempolicy), EPERM},",
          "2815:     {SCMP_SYS (set_mempolicy), EPERM},",
          "2816:     {SCMP_SYS (migrate_pages), EPERM},",
          "2819:     {SCMP_SYS (unshare), EPERM},",
          "2820:     {SCMP_SYS (mount), EPERM},",
          "2821:     {SCMP_SYS (pivot_root), EPERM},",
          "2825:     {SCMP_SYS (clone), EPERM, &SCMP_A1 (SCMP_CMP_MASKED_EQ, CLONE_NEWUSER, CLONE_NEWUSER)},",
          "2828:     {SCMP_SYS (clone), EPERM, &SCMP_A0 (SCMP_CMP_MASKED_EQ, CLONE_NEWUSER, CLONE_NEWUSER)},",
          "2832:     {SCMP_SYS (ioctl), EPERM, &SCMP_A1 (SCMP_CMP_MASKED_EQ, 0xFFFFFFFFu, (int) TIOCSTI)},",
          "2838:     int                  errnum;",
          "2844:     {SCMP_SYS (perf_event_open), EPERM},",
          "2846:     {SCMP_SYS (personality), EPERM, &SCMP_A0 (SCMP_CMP_NE, allowed_personality)},",
          "2847:     {SCMP_SYS (ptrace), EPERM}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2926:   for (i = 0; i < G_N_ELEMENTS (syscall_blocklist); i++)",
          "2927:     {",
          "2928:       int scall = syscall_blocklist[i].scall;",
          "2929:       if (syscall_blocklist[i].arg)",
          "2931:       else",
          "2933:       if (r < 0 && r == -EFAULT /* unknown syscall */)",
          "2934:         return flatpak_fail_error (error, FLATPAK_ERROR_SETUP_FAILED, _(\"Failed to block syscall %d\"), scall);",
          "2935:     }",
          "",
          "[Removed Lines]",
          "2930:         r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (EPERM), scall, 1, *syscall_blocklist[i].arg);",
          "2932:         r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (EPERM), scall, 0);",
          "",
          "[Added Lines]",
          "2931:       int errnum = syscall_blocklist[i].errnum;",
          "2933:       g_return_val_if_fail (errnum == EPERM || errnum == ENOSYS, FALSE);",
          "2936:         r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (errnum), scall, 1, *syscall_blocklist[i].arg);",
          "2938:         r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (errnum), scall, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2939:       for (i = 0; i < G_N_ELEMENTS (syscall_nondevel_blocklist); i++)",
          "2940:         {",
          "2941:           int scall = syscall_nondevel_blocklist[i].scall;",
          "2942:           if (syscall_nondevel_blocklist[i].arg)",
          "2944:           else",
          "2947:           if (r < 0 && r == -EFAULT /* unknown syscall */)",
          "2948:             return flatpak_fail_error (error, FLATPAK_ERROR_SETUP_FAILED, _(\"Failed to block syscall %d\"), scall);",
          "",
          "[Removed Lines]",
          "2943:             r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (EPERM), scall, 1, *syscall_nondevel_blocklist[i].arg);",
          "2945:             r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (EPERM), scall, 0);",
          "",
          "[Added Lines]",
          "2948:           int errnum = syscall_nondevel_blocklist[i].errnum;",
          "2950:           g_return_val_if_fail (errnum == EPERM || errnum == ENOSYS, FALSE);",
          "2953:             r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (errnum), scall, 1, *syscall_nondevel_blocklist[i].arg);",
          "2955:             r = seccomp_rule_add (seccomp, SCMP_ACT_ERRNO (errnum), scall, 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}