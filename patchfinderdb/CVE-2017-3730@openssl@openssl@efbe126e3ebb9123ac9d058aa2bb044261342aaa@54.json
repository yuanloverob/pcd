{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a68382de5e2e528d5026d29666f4abbc7c43743a",
      "candidate_info": {
        "commit_hash": "a68382de5e2e528d5026d29666f4abbc7c43743a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a68382de5e2e528d5026d29666f4abbc7c43743a",
        "files": [
          "Configurations/10-main.conf"
        ],
        "message": "Add a modern linux-x86 config target\n\n'linux-x86' is similar to 'linux-x86_64' but uses -m32 rather than -m64.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1924)\n(cherry picked from commit 7fbc0bfdd7a3c46bc7e36b191d11ab3853555a25)",
        "before_after_code_files": [
          "Configurations/10-main.conf||Configurations/10-main.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/10-main.conf||Configurations/10-main.conf": [
          "File: Configurations/10-main.conf -> Configurations/10-main.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:     },",
          "740:     #### IA-32 targets...",
          "741:     \"linux-elf\" => {",
          "742:         inherit_from     => [ \"linux-generic32\", asm(\"x86_elf_asm\") ],",
          "743:         cflags           => add(picker(default => \"-DL_ENDIAN\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "741:     #### These two targets are a bit aged and are to be used on older Linux",
          "742:     #### machines where gcc doesn't understand -m32 and -m64",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "755:         perlasm_scheme   => \"a.out\",",
          "756:     },",
          "758:     \"linux-x86_64\" => {",
          "759:         inherit_from     => [ \"linux-generic64\", asm(\"x86_64_asm\") ],",
          "760:         cflags           => add(\"-m64 -DL_ENDIAN\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760:     #### X86 / X86_64 targets",
          "761:     \"linux-x86\" => {",
          "762:         inherit_from     => [ \"linux-generic32\", asm(\"x86_asm\") ],",
          "763:         cflags           => add(picker(default => \"-m32 -DL_ENDIAN\",",
          "764:                                        release => \"-fomit-frame-pointer\")),",
          "765:         bn_ops           => \"BN_LLONG\",",
          "766:         perlasm_scheme   => \"elf\",",
          "767:         shared_ldflag    => add(\"-m32\"),",
          "768:     },",
          "769:     \"linux-x86-clang\" => {",
          "770:         inherit_from     => [ \"linux-x86\" ],",
          "771:         cc               => \"clang\",",
          "772:         cxx              => \"clang++\",",
          "773:         cflags           => add(\"-Wextra -Qunused-arguments\"),",
          "774:     },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4af9f7fe79ff82b90c16969b7e5871435056377b",
      "candidate_info": {
        "commit_hash": "4af9f7fe79ff82b90c16969b7e5871435056377b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4af9f7fe79ff82b90c16969b7e5871435056377b",
        "files": [
          "crypto/init.c"
        ],
        "message": "Ensure that libcrypto and libssl do not unload until the process exits\n\nBecause we use atexit() to cleanup after ourselves, this will cause a\nproblem if we have been dynamically loaded and then unloaded again: the\natexit() handler may no longer be there.\n\nMost modern atexit() implementations can handle this, however there are\nstill difficulties if libssl gets unloaded before libcrypto, because of\nthe atexit() callback that libcrypto makes to libssl.\n\nThe most robust solution seems to be to ensure that libcrypto and libssl\nnever unload. This is done by simply deliberately leaking a dlopen()\nreference to them.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(cherry picked from commit 5836780f436e03be231ff245f04f2f9f2f0ede91)",
        "before_after_code_files": [
          "crypto/init.c||crypto/init.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/init.c||crypto/init.c": [
          "File: crypto/init.c -> crypto/init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <stdlib.h>",
          "24: #include <assert.h>",
          "25: #include <internal/thread_once.h>",
          "27: static int stopped = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <internal/dso.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:         return 0;",
          "80:     OPENSSL_cpuid_setup();",
          "81:     base_inited = 1;",
          "82:     return 1;",
          "83: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     {",
          "89:         DSO *dso = NULL;",
          "91:         dso = DSO_dsobyaddr(&base_inited, DSO_FLAG_NO_UNLOAD_ON_FREE);",
          "92:         DSO_free(dso);",
          "93:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "575: {",
          "576:     OPENSSL_INIT_STOP *newhand;",
          "578:     newhand = OPENSSL_malloc(sizeof(*newhand));",
          "579:     if (newhand == NULL)",
          "580:         return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "596:     {",
          "597:         DSO *dso = NULL;",
          "598:         union {",
          "599:             void *sym;",
          "600:             void (*func)(void);",
          "601:         } handlersym;",
          "603:         handlersym.func = handler;",
          "605:         dso = DSO_dsobyaddr(handlersym.sym, DSO_FLAG_NO_UNLOAD_ON_FREE);",
          "606:         DSO_free(dso);",
          "607:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb3b70c0bdc676f857e438754345487d5da1c84e",
      "candidate_info": {
        "commit_hash": "fb3b70c0bdc676f857e438754345487d5da1c84e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fb3b70c0bdc676f857e438754345487d5da1c84e",
        "files": [
          "test/recipes/80-test_cms.t"
        ],
        "message": "add CMS SHA1 signing test\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit c6d67f09f34d8203c5bad7171ed45ec8771c9764)",
        "before_after_code_files": [
          "test/recipes/80-test_cms.t||test/recipes/80-test_cms.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/80-test_cms.t||test/recipes/80-test_cms.t": [
          "File: test/recipes/80-test_cms.t -> test/recipes/80-test_cms.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:  \"-CAfile\", catfile($smdir, \"smroot.pem\"), \"-out\", \"smtst.txt\" ]",
          "108:     ],",
          "110:     [ \"signed content test streaming S/MIME format, 2 DSA and 2 RSA keys\",",
          "111:       [ \"-sign\", \"-in\", $smcont, \"-nodetach\",",
          "112:  \"-signer\", catfile($smdir, \"smrsa1.pem\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     [ \"signed content S/MIME format, RSA key SHA1\",",
          "111:       [ \"-sign\", \"-in\", $smcont, \"-md\", \"sha1\",",
          "112:  \"-certfile\", catfile($smdir, \"smroot.pem\"),",
          "113:  \"-signer\", catfile($smdir, \"smrsa1.pem\"), \"-out\", \"test.cms\" ],",
          "114:       [ \"-verify\", \"-in\", \"test.cms\",",
          "115:  \"-CAfile\", catfile($smdir, \"smroot.pem\"), \"-out\", \"smtst.txt\" ]",
          "116:     ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1257342e7dfcdb9e80d199396c58286c9056c1c",
      "candidate_info": {
        "commit_hash": "d1257342e7dfcdb9e80d199396c58286c9056c1c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d1257342e7dfcdb9e80d199396c58286c9056c1c",
        "files": [
          "crypto/evp/e_aes.c"
        ],
        "message": "Don't use magic numbers in aes_ocb_cipher()\n\nLots of references to 16 replaced by AES_BLOCK_SIZE. Also a few other style\ntweaks in that function\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2275)\n(cherry picked from commit 0ba5a9eaa0a6ae7fc25ee70eefc1f4fbdaf09483)",
        "before_after_code_files": [
          "crypto/evp/e_aes.c||crypto/evp/e_aes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
          "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2536:     if (!octx->key_set)",
          "2537:         return -1;",
          "",
          "[Removed Lines]",
          "2539:     if (in) {",
          "",
          "[Added Lines]",
          "2539:     if (in != NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2561:             unsigned int remaining;",
          "2564:             if (remaining > len) {",
          "2565:                 memcpy(buf + (*buf_len), in, len);",
          "",
          "[Removed Lines]",
          "2560:         if (*buf_len) {",
          "2563:             remaining = 16 - (*buf_len);",
          "",
          "[Added Lines]",
          "2560:         if (*buf_len > 0) {",
          "2563:             remaining = AES_BLOCK_SIZE - (*buf_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2574:             len -= remaining;",
          "2575:             in += remaining;",
          "2576:             if (out == NULL) {",
          "2578:                     return -1;",
          "2579:             } else if (EVP_CIPHER_CTX_encrypting(ctx)) {",
          "2581:                     return -1;",
          "2582:             } else {",
          "2584:                     return -1;",
          "2585:             }",
          "2588:         }",
          "",
          "[Removed Lines]",
          "2577:                 if (!CRYPTO_ocb128_aad(&octx->ocb, buf, 16))",
          "2580:                 if (!CRYPTO_ocb128_encrypt(&octx->ocb, buf, out, 16))",
          "2583:                 if (!CRYPTO_ocb128_decrypt(&octx->ocb, buf, out, 16))",
          "2586:             written_len = 16;",
          "2591:         trailing_len = len % 16;",
          "",
          "[Added Lines]",
          "2577:                 if (!CRYPTO_ocb128_aad(&octx->ocb, buf, AES_BLOCK_SIZE))",
          "2580:                 if (!CRYPTO_ocb128_encrypt(&octx->ocb, buf, out,",
          "2581:                                            AES_BLOCK_SIZE))",
          "2584:                 if (!CRYPTO_ocb128_decrypt(&octx->ocb, buf, out,",
          "2585:                                            AES_BLOCK_SIZE))",
          "2588:             written_len = AES_BLOCK_SIZE;",
          "2593:         trailing_len = len % AES_BLOCK_SIZE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2611:         }",
          "2615:             memcpy(buf, in, trailing_len);",
          "2617:         }",
          "",
          "[Removed Lines]",
          "2614:         if (trailing_len) {",
          "",
          "[Added Lines]",
          "2616:         if (trailing_len > 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2626:             if (EVP_CIPHER_CTX_encrypting(ctx)) {",
          "2627:                 if (!CRYPTO_ocb128_encrypt(&octx->ocb, octx->data_buf, out,",
          "2628:                                            octx->data_buf_len))",
          "",
          "[Removed Lines]",
          "2625:         if (octx->data_buf_len) {",
          "",
          "[Added Lines]",
          "2627:         if (octx->data_buf_len > 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2635:             written_len = octx->data_buf_len;",
          "2636:             octx->data_buf_len = 0;",
          "2637:         }",
          "2639:             if (!CRYPTO_ocb128_aad",
          "2640:                 (&octx->ocb, octx->aad_buf, octx->aad_buf_len))",
          "2641:                 return -1;",
          "",
          "[Removed Lines]",
          "2638:         if (octx->aad_buf_len) {",
          "",
          "[Added Lines]",
          "2640:         if (octx->aad_buf_len > 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dafa1c85b9bbd8ed3ff1911d00ad7f4e890bafa3",
      "candidate_info": {
        "commit_hash": "dafa1c85b9bbd8ed3ff1911d00ad7f4e890bafa3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/dafa1c85b9bbd8ed3ff1911d00ad7f4e890bafa3",
        "files": [
          "test/asynciotest.c"
        ],
        "message": "Add a test for BIO_read() returning 0 in SSL_read() (and also for write)\n\nA BIO_read() 0 return indicates that a failure occurred that may be\nretryable. An SSL_read() 0 return indicates a non-retryable failure. Check\nthat if BIO_read() returns 0, SSL_read() returns <0. Same for SSL_write().\n\nThe asyncio test filter BIO already returns 0 on a retryable failure so we\nbuild on that.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit a34ac5b8b9c1a3281b4ee545c46177f485fb4949)",
        "before_after_code_files": [
          "test/asynciotest.c||test/asynciotest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/asynciotest.c||test/asynciotest.c": [
          "File: test/asynciotest.c -> test/asynciotest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     return async_write(bio, str, strlen(str));",
          "235: }",
          "237: int main(int argc, char *argv[])",
          "238: {",
          "239:     SSL_CTX *serverctx = NULL, *clientctx = NULL;",
          "240:     SSL *serverssl = NULL, *clientssl = NULL;",
          "241:     BIO *s_to_c_fbio = NULL, *c_to_s_fbio = NULL;",
          "244:     CRYPTO_set_mem_debug(1);",
          "245:     CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON);",
          "",
          "[Removed Lines]",
          "242:     int test, err = 1;",
          "",
          "[Added Lines]",
          "237: #define MAX_ATTEMPTS    100",
          "244:     int test, err = 1, ret;",
          "245:     size_t i, j;",
          "246:     const char testdata[] = \"Test data\";",
          "247:     char buf[sizeof(testdata)];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:             goto end;",
          "288:         }",
          "291:         SSL_free(clientssl);",
          "292:         SSL_free(serverssl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:         for (j = 0; j < 2; j++) {",
          "306:             for (ret = -1, i = 0; ret < 0 && i < 2 * sizeof(testdata); i++)",
          "307:                 ret = SSL_write(clientssl, testdata, sizeof(testdata));",
          "308:             if (ret <= 0) {",
          "309:                 printf(\"Test %d failed: Failed to write app data\\n\", test);",
          "310:                 goto end;",
          "311:             }",
          "318:             for (ret = -1, i = 0; ret < 0 && i < MAX_ATTEMPTS; i++)",
          "319:                 ret = SSL_read(serverssl, buf, sizeof(buf));",
          "320:             if (ret <= 0) {",
          "321:                 printf(\"Test %d failed: Failed to read app data\\n\", test);",
          "322:                 goto end;",
          "323:             }",
          "324:             if (ret != sizeof(testdata)",
          "325:                     || memcmp(buf, testdata, sizeof(testdata)) != 0) {",
          "326:                 printf(\"Test %d failed: Unexpected app data received\\n\", test);",
          "327:                 goto end;",
          "328:             }",
          "329:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}