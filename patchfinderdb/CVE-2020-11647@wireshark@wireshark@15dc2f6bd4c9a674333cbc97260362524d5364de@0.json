{
  "cve_id": "CVE-2020-11647",
  "cve_desc": "In Wireshark 3.2.0 to 3.2.2, 3.0.0 to 3.0.9, and 2.6.0 to 2.6.15, the BACapp dissector could crash. This was addressed in epan/dissectors/packet-bacapp.c by limiting the amount of recursion.",
  "repo": "wireshark/wireshark",
  "patch_hash": "15dc2f6bd4c9a674333cbc97260362524d5364de",
  "patch_info": {
    "commit_hash": "15dc2f6bd4c9a674333cbc97260362524d5364de",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/15dc2f6bd4c9a674333cbc97260362524d5364de",
    "files": [
      "epan/dissectors/packet-bacapp.c"
    ],
    "message": "BACapp: Add a nesting / recursion check.\n\nTrack our recursion depth in fAbstractSyntaxNType. It calls several\nfunctions which in turn call it, which makes it easy to overflow the\nstack.\n\nBug: 16474\nChange-Id: Ibad29272f99449bfa13b7422692e20ba8a79e19c\nReviewed-on: https://code.wireshark.org/review/36725\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c": [
      "File: epan/dissectors/packet-bacapp.c -> epan/dissectors/packet-bacapp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #include <epan/to_str.h>",
      "20: #include <epan/reassemble.h>",
      "21: #include <epan/expert.h>",
      "22: #include <epan/stats_tree.h>",
      "23: #include \"packet-bacapp.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #include <epan/proto_data.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43: #define BACAPP_SEGMENT_NAK 0x02",
      "44: #define BACAPP_SENT_BY 0x01",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: #define BACAPP_MAX_RECURSION_DEPTH 100 // Arbitrary",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "6231: static expert_field ei_bacapp_bad_length = EI_INIT;",
      "6232: static expert_field ei_bacapp_bad_tag = EI_INIT;",
      "6233: static expert_field ei_bacapp_opening_tag = EI_INIT;",
      "6235: static gint32 propertyIdentifier = -1;",
      "6236: static gint32 propertyArrayIndex = -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6236: static expert_field ei_bacapp_max_recursion_depth_reached = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "8494:     } else {",
      "8495:         g_snprintf(ar, sizeof(ar), \"Abstract Type: \");",
      "8496:     }",
      "8498:         lastoffset = offset;",
      "8499:         fTagHeader(tvb, pinfo, offset, &tag_no, &tag_info, &lvt);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8501:     unsigned recursion_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_bacapp, 0));",
      "8502:     if (++recursion_depth >= BACAPP_MAX_RECURSION_DEPTH) {",
      "8503:         proto_tree_add_expert(tree, pinfo, &ei_bacapp_max_recursion_depth_reached, tvb, 0, 0);",
      "8504:         return offset;",
      "8505:     }",
      "8506:     p_add_proto_data(pinfo->pool, pinfo, proto_bacapp, 0, GUINT_TO_POINTER(recursion_depth));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "9187:         }",
      "9189:     }",
      "9190:     return offset;",
      "9191: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9201:     recursion_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_bacapp, 0));",
      "9202:     recursion_depth--;",
      "9203:     p_add_proto_data(pinfo->pool, pinfo, proto_bacapp, 0, GUINT_TO_POINTER(recursion_depth));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "15345:     bacinfo.instance_ident = NULL;",
      "15346:     bacinfo.object_ident = NULL;",
      "15348:     switch (bacapp_type) {",
      "15349:     case BACAPP_TYPE_CONFIRMED_SERVICE_REQUEST:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15363:     p_add_proto_data(pinfo->pool, pinfo, proto_bacapp, 0, GUINT_TO_POINTER(0));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "15861:         { &ei_bacapp_bad_length, { \"bacapp.bad_length\", PI_MALFORMED, PI_ERROR, \"Wrong length indicated\", EXPFILL }},",
      "15862:         { &ei_bacapp_bad_tag, { \"bacapp.bad_tag\", PI_MALFORMED, PI_ERROR, \"Wrong tag found\", EXPFILL }},",
      "15863:         { &ei_bacapp_opening_tag, { \"bacapp.bad_opening_tag\", PI_MALFORMED, PI_ERROR, \"Expected Opening Tag!\", EXPFILL }},",
      "15864:     };",
      "15866:     expert_module_t* expert_bacapp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15881:         { &ei_bacapp_max_recursion_depth_reached, { \"bacapp.max_recursion_depth_reached\",",
      "15882:             PI_PROTOCOL, PI_WARN, \"Maximum allowed recursion depth reached. Dissection stopped.\", EXPFILL }}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6f56fc9496db158218243ea87e3660c874a0bab0",
      "candidate_info": {
        "commit_hash": "6f56fc9496db158218243ea87e3660c874a0bab0",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6f56fc9496db158218243ea87e3660c874a0bab0",
        "files": [
          "epan/dissectors/packet-bacapp.c"
        ],
        "message": "BACapp: Add a nesting / recursion check.\n\nTrack our recursion depth in fAbstractSyntaxNType. It calls several\nfunctions which in turn call it, which makes it easy to overflow the\nstack.\n\nBug: 16474\nChange-Id: Ibad29272f99449bfa13b7422692e20ba8a79e19c\nReviewed-on: https://code.wireshark.org/review/36725\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 15dc2f6bd4c9a674333cbc97260362524d5364de)\nReviewed-on: https://code.wireshark.org/review/36736",
        "before_after_code_files": [
          "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c": [
          "File: epan/dissectors/packet-bacapp.c -> epan/dissectors/packet-bacapp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <epan/to_str.h>",
          "20: #include <epan/reassemble.h>",
          "21: #include <epan/expert.h>",
          "22: #include <epan/stats_tree.h>",
          "23: #include \"packet-bacapp.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: #define BACAPP_SEGMENT_NAK 0x02",
          "44: #define BACAPP_SENT_BY 0x01",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #define BACAPP_MAX_RECURSION_DEPTH 100 // Arbitrary",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6000: static expert_field ei_bacapp_bad_length = EI_INIT;",
          "6001: static expert_field ei_bacapp_bad_tag = EI_INIT;",
          "6002: static expert_field ei_bacapp_opening_tag = EI_INIT;",
          "6004: static gint32 propertyIdentifier = -1;",
          "6005: static gint32 propertyArrayIndex = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6005: static expert_field ei_bacapp_max_recursion_depth_reached = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7987:     } else {",
          "7988:         g_snprintf(ar, sizeof(ar), \"Abstract Type: \");",
          "7989:     }",
          "7991:         lastoffset = offset;",
          "7992:         fTagHeader(tvb, pinfo, offset, &tag_no, &tag_info, &lvt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7994:     unsigned recursion_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_bacapp, 0));",
          "7995:     if (++recursion_depth >= BACAPP_MAX_RECURSION_DEPTH) {",
          "7996:         proto_tree_add_expert(tree, pinfo, &ei_bacapp_max_recursion_depth_reached, tvb, 0, 0);",
          "7997:         return offset;",
          "7998:     }",
          "7999:     p_add_proto_data(pinfo->pool, pinfo, proto_bacapp, 0, GUINT_TO_POINTER(recursion_depth));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8640:         }",
          "8642:     }",
          "8643:     return offset;",
          "8644: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8654:     recursion_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_bacapp, 0));",
          "8655:     recursion_depth--;",
          "8656:     p_add_proto_data(pinfo->pool, pinfo, proto_bacapp, 0, GUINT_TO_POINTER(recursion_depth));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "14112:     bacinfo.instance_ident = NULL;",
          "14113:     bacinfo.object_ident = NULL;",
          "14115:     switch (bacapp_type) {",
          "14116:     case BACAPP_TYPE_CONFIRMED_SERVICE_REQUEST:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14130:     p_add_proto_data(pinfo->pool, pinfo, proto_bacapp, 0, GUINT_TO_POINTER(0));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "14564:         { &ei_bacapp_bad_length, { \"bacapp.bad_length\", PI_MALFORMED, PI_ERROR, \"Wrong length indicated\", EXPFILL }},",
          "14565:         { &ei_bacapp_bad_tag, { \"bacapp.bad_tag\", PI_MALFORMED, PI_ERROR, \"Wrong tag found\", EXPFILL }},",
          "14566:         { &ei_bacapp_opening_tag, { \"bacapp.bad_opening_tag\", PI_MALFORMED, PI_ERROR, \"Expected Opening Tag!\", EXPFILL }},",
          "14567:     };",
          "14569:     expert_module_t* expert_bacapp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14584:         { &ei_bacapp_max_recursion_depth_reached, { \"bacapp.max_recursion_depth_reached\",",
          "14585:             PI_PROTOCOL, PI_WARN, \"Maximum allowed recursion depth reached. Dissection stopped.\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4738fec56ddc09db7807cbdd63118aad327a6f2f",
      "candidate_info": {
        "commit_hash": "4738fec56ddc09db7807cbdd63118aad327a6f2f",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4738fec56ddc09db7807cbdd63118aad327a6f2f",
        "files": [
          "epan/dissectors/packet-bacapp.c"
        ],
        "message": "BACapp: Add a nesting / recursion check.\n\nTrack our recursion depth in fAbstractSyntaxNType. It calls several\nfunctions which in turn call it, which makes it easy to overflow the\nstack.\n\nBug: 16474\nChange-Id: Ibad29272f99449bfa13b7422692e20ba8a79e19c\nReviewed-on: https://code.wireshark.org/review/36725\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 15dc2f6bd4c9a674333cbc97260362524d5364de)\nReviewed-on: https://code.wireshark.org/review/36734",
        "before_after_code_files": [
          "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c": [
          "File: epan/dissectors/packet-bacapp.c -> epan/dissectors/packet-bacapp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <epan/to_str.h>",
          "20: #include <epan/reassemble.h>",
          "21: #include <epan/expert.h>",
          "22: #include <epan/stats_tree.h>",
          "23: #include \"packet-bacapp.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: #define BACAPP_SEGMENT_NAK 0x02",
          "44: #define BACAPP_SENT_BY 0x01",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #define BACAPP_MAX_RECURSION_DEPTH 100 // Arbitrary",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6231: static expert_field ei_bacapp_bad_length = EI_INIT;",
          "6232: static expert_field ei_bacapp_bad_tag = EI_INIT;",
          "6233: static expert_field ei_bacapp_opening_tag = EI_INIT;",
          "6235: static gint32 propertyIdentifier = -1;",
          "6236: static gint32 propertyArrayIndex = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6236: static expert_field ei_bacapp_max_recursion_depth_reached = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8494:     } else {",
          "8495:         g_snprintf(ar, sizeof(ar), \"Abstract Type: \");",
          "8496:     }",
          "8498:         lastoffset = offset;",
          "8499:         fTagHeader(tvb, pinfo, offset, &tag_no, &tag_info, &lvt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8501:     unsigned recursion_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_bacapp, 0));",
          "8502:     if (++recursion_depth >= BACAPP_MAX_RECURSION_DEPTH) {",
          "8503:         proto_tree_add_expert(tree, pinfo, &ei_bacapp_max_recursion_depth_reached, tvb, 0, 0);",
          "8504:         return offset;",
          "8505:     }",
          "8506:     p_add_proto_data(pinfo->pool, pinfo, proto_bacapp, 0, GUINT_TO_POINTER(recursion_depth));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9187:         }",
          "9189:     }",
          "9190:     return offset;",
          "9191: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9201:     recursion_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_bacapp, 0));",
          "9202:     recursion_depth--;",
          "9203:     p_add_proto_data(pinfo->pool, pinfo, proto_bacapp, 0, GUINT_TO_POINTER(recursion_depth));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "15345:     bacinfo.instance_ident = NULL;",
          "15346:     bacinfo.object_ident = NULL;",
          "15348:     switch (bacapp_type) {",
          "15349:     case BACAPP_TYPE_CONFIRMED_SERVICE_REQUEST:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15363:     p_add_proto_data(pinfo->pool, pinfo, proto_bacapp, 0, GUINT_TO_POINTER(0));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "15861:         { &ei_bacapp_bad_length, { \"bacapp.bad_length\", PI_MALFORMED, PI_ERROR, \"Wrong length indicated\", EXPFILL }},",
          "15862:         { &ei_bacapp_bad_tag, { \"bacapp.bad_tag\", PI_MALFORMED, PI_ERROR, \"Wrong tag found\", EXPFILL }},",
          "15863:         { &ei_bacapp_opening_tag, { \"bacapp.bad_opening_tag\", PI_MALFORMED, PI_ERROR, \"Expected Opening Tag!\", EXPFILL }},",
          "15864:     };",
          "15866:     expert_module_t* expert_bacapp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15881:         { &ei_bacapp_max_recursion_depth_reached, { \"bacapp.max_recursion_depth_reached\",",
          "15882:             PI_PROTOCOL, PI_WARN, \"Maximum allowed recursion depth reached. Dissection stopped.\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c0466083587324b5d48cecf3975aead370c61fe",
      "candidate_info": {
        "commit_hash": "5c0466083587324b5d48cecf3975aead370c61fe",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/5c0466083587324b5d48cecf3975aead370c61fe",
        "files": [
          "epan/dissectors/packet-bacapp.c"
        ],
        "message": "BACapp: Add a nesting / recursion check.\n\nTrack our recursion depth in fAbstractSyntaxNType. It calls several\nfunctions which in turn call it, which makes it easy to overflow the\nstack.\n\nBug: 16474\nChange-Id: Ibad29272f99449bfa13b7422692e20ba8a79e19c\nReviewed-on: https://code.wireshark.org/review/36725\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 15dc2f6bd4c9a674333cbc97260362524d5364de)\nReviewed-on: https://code.wireshark.org/review/36735",
        "before_after_code_files": [
          "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c": [
          "File: epan/dissectors/packet-bacapp.c -> epan/dissectors/packet-bacapp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <epan/to_str.h>",
          "20: #include <epan/reassemble.h>",
          "21: #include <epan/expert.h>",
          "22: #include <epan/stats_tree.h>",
          "23: #include \"packet-bacapp.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: #define BACAPP_SEGMENT_NAK 0x02",
          "44: #define BACAPP_SENT_BY 0x01",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #define BACAPP_MAX_RECURSION_DEPTH 100 // Arbitrary",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6227: static expert_field ei_bacapp_bad_length = EI_INIT;",
          "6228: static expert_field ei_bacapp_bad_tag = EI_INIT;",
          "6229: static expert_field ei_bacapp_opening_tag = EI_INIT;",
          "6231: static gint32 propertyIdentifier = -1;",
          "6232: static gint32 propertyArrayIndex = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6232: static expert_field ei_bacapp_max_recursion_depth_reached = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8490:     } else {",
          "8491:         g_snprintf(ar, sizeof(ar), \"Abstract Type: \");",
          "8492:     }",
          "8494:         lastoffset = offset;",
          "8495:         fTagHeader(tvb, pinfo, offset, &tag_no, &tag_info, &lvt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8497:     unsigned recursion_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_bacapp, 0));",
          "8498:     if (++recursion_depth >= BACAPP_MAX_RECURSION_DEPTH) {",
          "8499:         proto_tree_add_expert(tree, pinfo, &ei_bacapp_max_recursion_depth_reached, tvb, 0, 0);",
          "8500:         return offset;",
          "8501:     }",
          "8502:     p_add_proto_data(pinfo->pool, pinfo, proto_bacapp, 0, GUINT_TO_POINTER(recursion_depth));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9183:         }",
          "9185:     }",
          "9186:     return offset;",
          "9187: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9197:     recursion_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_bacapp, 0));",
          "9198:     recursion_depth--;",
          "9199:     p_add_proto_data(pinfo->pool, pinfo, proto_bacapp, 0, GUINT_TO_POINTER(recursion_depth));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "15283:     bacinfo.instance_ident = NULL;",
          "15284:     bacinfo.object_ident = NULL;",
          "15286:     switch (bacapp_type) {",
          "15287:     case BACAPP_TYPE_CONFIRMED_SERVICE_REQUEST:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15301:     p_add_proto_data(pinfo->pool, pinfo, proto_bacapp, 0, GUINT_TO_POINTER(0));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "15799:         { &ei_bacapp_bad_length, { \"bacapp.bad_length\", PI_MALFORMED, PI_ERROR, \"Wrong length indicated\", EXPFILL }},",
          "15800:         { &ei_bacapp_bad_tag, { \"bacapp.bad_tag\", PI_MALFORMED, PI_ERROR, \"Wrong tag found\", EXPFILL }},",
          "15801:         { &ei_bacapp_opening_tag, { \"bacapp.bad_opening_tag\", PI_MALFORMED, PI_ERROR, \"Expected Opening Tag!\", EXPFILL }},",
          "15802:     };",
          "15804:     expert_module_t* expert_bacapp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15819:         { &ei_bacapp_max_recursion_depth_reached, { \"bacapp.max_recursion_depth_reached\",",
          "15820:             PI_PROTOCOL, PI_WARN, \"Maximum allowed recursion depth reached. Dissection stopped.\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a8c1b9b932d70428356ca35da653d943e799546",
      "candidate_info": {
        "commit_hash": "6a8c1b9b932d70428356ca35da653d943e799546",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6a8c1b9b932d70428356ca35da653d943e799546",
        "files": [
          "debian/libwireshark0.symbols",
          "epan/dissectors/packet-bacapp.c",
          "epan/dissectors/packet-daap.c",
          "epan/dissectors/packet-mongo.c",
          "epan/dissectors/packet-vlan.c",
          "epan/dissectors/packet-wbxml.c",
          "epan/proto_data.c",
          "epan/proto_data.h"
        ],
        "message": "epan: Add p_[gs]et_proto_depth.\n\nAdd convenience routines for getting and setting a per-protocol,\nper-packet depth value, which can be used to limit recursion, nesting,\ncycling, etc. Use them in the BACapp, DAAP, Mongo, VLAN, and WBXML\ndissectors.\n\nChange-Id: I172514828169253ae7fcf9162c9d7eeb3041ff9c\nReviewed-on: https://code.wireshark.org/review/36846\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "debian/libwireshark0.symbols||debian/libwireshark0.symbols",
          "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c",
          "epan/dissectors/packet-daap.c||epan/dissectors/packet-daap.c",
          "epan/dissectors/packet-mongo.c||epan/dissectors/packet-mongo.c",
          "epan/dissectors/packet-vlan.c||epan/dissectors/packet-vlan.c",
          "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c",
          "epan/proto_data.c||epan/proto_data.c",
          "epan/proto_data.h||epan/proto_data.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c"
          ]
        }
      },
      "candidate_diff": {
        "debian/libwireshark0.symbols||debian/libwireshark0.symbols": [
          "File: debian/libwireshark0.symbols -> debian/libwireshark0.symbols",
          "--- Hunk 1 ---",
          "[Context before]",
          "990:  output_fields_valid@Base 1.99.0",
          "991:  p_add_proto_data@Base 1.9.1",
          "992:  p_get_proto_data@Base 1.9.1",
          "993:  p_remove_proto_data@Base 1.12.0~rc1",
          "994:  parse_key_string@Base 1.9.1",
          "995:  plugin_if_apply_filter@Base 1.99.8",
          "996:  plugin_if_get_ws_info@Base 2.1.0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "993:  p_get_proto_depth@Base 3.3.0",
          "995:  p_set_proto_depth@Base 3.3.0",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-bacapp.c||epan/dissectors/packet-bacapp.c": [
          "File: epan/dissectors/packet-bacapp.c -> epan/dissectors/packet-bacapp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8498:         g_snprintf(ar, sizeof(ar), \"Abstract Type: \");",
          "8499:     }",
          "8502:     if (++recursion_depth >= BACAPP_MAX_RECURSION_DEPTH) {",
          "8503:         proto_tree_add_expert(tree, pinfo, &ei_bacapp_max_recursion_depth_reached, tvb, 0, 0);",
          "8504:         return offset;",
          "8505:     }",
          "8509:         lastoffset = offset;",
          "",
          "[Removed Lines]",
          "8501:     unsigned recursion_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_bacapp, 0));",
          "8506:     p_add_proto_data(pinfo->pool, pinfo, proto_bacapp, 0, GUINT_TO_POINTER(recursion_depth));",
          "",
          "[Added Lines]",
          "8501:     unsigned recursion_depth = p_get_proto_depth(pinfo, proto_bacapp);",
          "8506:     p_set_proto_depth(pinfo, proto_bacapp, recursion_depth);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9198:         }",
          "9200:     }",
          "9204:     return offset;",
          "9205: }",
          "",
          "[Removed Lines]",
          "9201:     recursion_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_bacapp, 0));",
          "9202:     recursion_depth--;",
          "9203:     p_add_proto_data(pinfo->pool, pinfo, proto_bacapp, 0, GUINT_TO_POINTER(recursion_depth));",
          "",
          "[Added Lines]",
          "9201:     recursion_depth = p_get_proto_depth(pinfo, proto_bacapp);",
          "9202:     p_set_proto_depth(pinfo, proto_bacapp, recursion_depth - 1);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-daap.c||epan/dissectors/packet-daap.c": [
          "File: epan/dissectors/packet-daap.c -> epan/dissectors/packet-daap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <epan/exceptions.h>",
          "16: #include <wsutil/str_util.h>",
          "17: #include <epan/expert.h>",
          "18: #include \"packet-http.h\"",
          "20: #define TCP_PORT_DAAP 3689",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386: static expert_field ei_daap_max_recursion_depth_reached = EI_INIT;",
          "391: static int",
          "392: dissect_daap(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "",
          "[Removed Lines]",
          "389: static void dissect_daap_one_tag(proto_tree *tree, packet_info *pinfo, tvbuff_t *tvb, int recursion_depth);",
          "",
          "[Added Lines]",
          "390: static void dissect_daap_one_tag(proto_tree *tree, packet_info *pinfo, tvbuff_t *tvb);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "420:    ti = proto_tree_add_item(tree, proto_daap, tvb, 0, -1, ENC_NA);",
          "421:    daap_tree = proto_item_add_subtree(ti, ett_daap);",
          "423:    return tvb_captured_length(tvb);",
          "424: }",
          "426: #define DAAP_MAX_RECURSION_DEPTH 100",
          "428: static void",
          "430: {",
          "431:    guint       offset = 0;",
          "432:    guint32     tagname, tagsize;",
          "433:    proto_item *tag_ti;",
          "434:    proto_tree *tag_tree;",
          "435:    tvbuff_t   *new_tvb;",
          "438:       proto_tree_add_expert(tree, pinfo, &ei_daap_max_recursion_depth_reached,",
          "439:                             tvb, 0, 0);",
          "440:       return;",
          "441:    }",
          "442:    while (offset < tvb_reported_length(tvb)) {",
          "443:       tagname = tvb_get_ntohl(tvb, offset);",
          "444:       tagsize = tvb_get_ntohl(tvb, offset+4);",
          "",
          "[Removed Lines]",
          "422:    dissect_daap_one_tag(daap_tree, pinfo, tvb, 0);",
          "429: dissect_daap_one_tag(proto_tree *tree, packet_info *pinfo, tvbuff_t *tvb, int recursion_depth)",
          "437:    if (recursion_depth >= DAAP_MAX_RECURSION_DEPTH) {",
          "",
          "[Added Lines]",
          "423:    dissect_daap_one_tag(daap_tree, pinfo, tvb);",
          "430: dissect_daap_one_tag(proto_tree *tree, packet_info *pinfo, tvbuff_t *tvb)",
          "437:    unsigned    recursion_depth = p_get_proto_depth(pinfo, proto_daap);",
          "439:    if (++recursion_depth >= DAAP_MAX_RECURSION_DEPTH) {",
          "444:    p_set_proto_depth(pinfo, proto_daap, recursion_depth);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "489:          case dacp_cmst:",
          "491:             new_tvb  = tvb_new_subset_length(tvb, offset, (gint)tagsize);",
          "493:             break;",
          "495:          case daap_minm:",
          "",
          "[Removed Lines]",
          "492:             dissect_daap_one_tag(tag_tree, pinfo, new_tvb, recursion_depth+1);",
          "",
          "[Added Lines]",
          "496:             dissect_daap_one_tag(tag_tree, pinfo, new_tvb);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-mongo.c||epan/dissectors/packet-mongo.c": [
          "File: epan/dissectors/packet-mongo.c -> epan/dissectors/packet-mongo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <epan/packet.h>",
          "23: #include <epan/exceptions.h>",
          "24: #include <epan/expert.h>",
          "25: #include \"packet-tcp.h\"",
          "26: #include \"packet-tls.h\"",
          "27: #ifdef HAVE_SNAPPY",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308: #define BSON_MAX_NESTING 100",
          "309: #define BSON_MAX_DOC_SIZE (16 * 1000 * 1000)",
          "310: static int",
          "312: {",
          "313:   gint32 document_length;",
          "314:   guint final_offset;",
          "",
          "[Removed Lines]",
          "311: dissect_bson_document(tvbuff_t *tvb, packet_info *pinfo, guint offset, proto_tree *tree, int hf_mongo_doc, int nest_level)",
          "",
          "[Added Lines]",
          "312: dissect_bson_document(tvbuff_t *tvb, packet_info *pinfo, guint offset, proto_tree *tree, int hf_mongo_doc)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "323:   proto_tree_add_item(doc_tree, hf_mongo_document_length, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "326:       expert_add_info_format(pinfo, ti, &ei_mongo_document_recursion_exceeded, \"BSON document recursion exceeds %u\", BSON_MAX_NESTING);",
          "328:       return MAX(4, document_length);",
          "329:   }",
          "331:   if (document_length < 5) {",
          "332:       expert_add_info_format(pinfo, ti, &ei_mongo_document_length_bad, \"BSON document length too short: %u\", document_length);",
          "",
          "[Removed Lines]",
          "325:   if (nest_level > BSON_MAX_NESTING) {",
          "",
          "[Added Lines]",
          "326:   unsigned nest_level = p_get_proto_depth(pinfo, proto_mongo);",
          "327:   if (++nest_level > BSON_MAX_NESTING) {",
          "332:   p_set_proto_depth(pinfo, proto_mongo, nest_level);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "382:         break;",
          "383:       case BSON_ELEMENT_TYPE_DOC:",
          "384:       case BSON_ELEMENT_TYPE_ARRAY:",
          "386:         break;",
          "387:       case BSON_ELEMENT_TYPE_BINARY:",
          "388:         e_len = tvb_get_letohl(tvb, offset);",
          "",
          "[Removed Lines]",
          "385:         offset += dissect_bson_document(tvb, pinfo, offset, element_sub_tree, hf_mongo_document, nest_level+1);",
          "",
          "[Added Lines]",
          "388:         offset += dissect_bson_document(tvb, pinfo, offset, element_sub_tree, hf_mongo_document);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "447:         doc_len = e_len - (str_len + 8);",
          "448:         js_scope = proto_tree_add_item(element_sub_tree, hf_mongo_element_value_js_scope, tvb, offset, doc_len, ENC_NA);",
          "449:         js_scope_sub_tree = proto_item_add_subtree(js_scope, ett_mongo_code);",
          "451:         break;",
          "452:       case BSON_ELEMENT_TYPE_INT32:",
          "453:         proto_tree_add_item(element_sub_tree, hf_mongo_element_value_int32, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "450:         offset += dissect_bson_document(tvb, pinfo, offset, js_scope_sub_tree, hf_mongo_document, nest_level+1);",
          "",
          "[Added Lines]",
          "453:         offset += dissect_bson_document(tvb, pinfo, offset, js_scope_sub_tree, hf_mongo_document);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "497:   for (i=0; i < number_returned; i++)",
          "498:   {",
          "500:   }",
          "501:   return offset;",
          "502: }",
          "",
          "[Removed Lines]",
          "499:     offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_document, 1);",
          "",
          "[Added Lines]",
          "502:     offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_document);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "527:   proto_tree_add_item(flags_tree, hf_mongo_update_flags_multiupdate, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "528:   offset += 4;",
          "534:   return offset;",
          "535: }",
          "",
          "[Removed Lines]",
          "530:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_selector, 1);",
          "532:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_update, 1);",
          "",
          "[Added Lines]",
          "533:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_selector);",
          "535:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_update);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "548:   offset += dissect_fullcollectionname(tvb, offset, tree);",
          "550:   while(offset < tvb_reported_length(tvb)) {",
          "552:   }",
          "554:   return offset;",
          "",
          "[Removed Lines]",
          "551:     offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_document, 1);",
          "",
          "[Added Lines]",
          "554:     offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_document);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "579:   proto_tree_add_item(tree, hf_mongo_number_to_return, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "580:   offset +=4;",
          "584:   while(offset < tvb_reported_length(tvb)) {",
          "586:   }",
          "587:   return offset;",
          "588: }",
          "",
          "[Removed Lines]",
          "582:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_query, 1);",
          "585:     offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_return_field_selector, 1);",
          "",
          "[Added Lines]",
          "585:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_query);",
          "588:     offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_return_field_selector);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "621:   proto_tree_add_item(flags_tree, hf_mongo_delete_flags_singleremove, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "622:   offset += 4;",
          "626:   return offset;",
          "627: }",
          "",
          "[Removed Lines]",
          "624:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_selector, 1);",
          "",
          "[Added Lines]",
          "627:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_selector);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "656:   proto_tree_add_item(tree, hf_mongo_commandname, tvb, offset, cmd_length, ENC_ASCII|ENC_NA);",
          "657:   offset += cmd_length;",
          "663:   return offset;",
          "664: }",
          "",
          "[Removed Lines]",
          "659:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_metadata, 1);",
          "661:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_commandargs, 1);",
          "",
          "[Added Lines]",
          "662:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_metadata);",
          "664:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_commandargs);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "667: dissect_mongo_op_commandreply(tvbuff_t *tvb, packet_info *pinfo, guint offset, proto_tree *tree)",
          "668: {",
          "674:   if (tvb_reported_length_remaining(tvb, offset) > 0){",
          "676:   }",
          "678:   return offset;",
          "",
          "[Removed Lines]",
          "670:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_metadata, 1);",
          "672:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_commandreply, 1);",
          "675:     offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_outputdocs, 1);",
          "",
          "[Added Lines]",
          "673:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_metadata);",
          "675:   offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_commandreply);",
          "678:     offset += dissect_bson_document(tvb, pinfo, offset, tree, hf_mongo_outputdocs);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "791:   switch (e_type) {",
          "792:     case KIND_BODY:",
          "794:       break;",
          "795:     case KIND_DOCUMENT_SEQUENCE: {",
          "796:       gint32 dsi_length;",
          "",
          "[Removed Lines]",
          "793:       dissect_bson_document(tvb, pinfo, offset, section_tree, hf_mongo_msg_sections_section_body, 1);",
          "",
          "[Added Lines]",
          "796:       dissect_bson_document(tvb, pinfo, offset, section_tree, hf_mongo_msg_sections_section_body);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "811:       documents_tree = proto_item_add_subtree(documents, ett_mongo_doc_sequence);",
          "813:       while (to_read > 0){",
          "815:         to_read -= doc_size;",
          "816:         offset += doc_size;",
          "817:       }",
          "",
          "[Removed Lines]",
          "814:         gint32 doc_size = dissect_bson_document(tvb, pinfo, offset, documents_tree, hf_mongo_document, 1);",
          "",
          "[Added Lines]",
          "817:         gint32 doc_size = dissect_bson_document(tvb, pinfo, offset, documents_tree, hf_mongo_document);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-vlan.c||epan/dissectors/packet-vlan.c": [
          "File: epan/dissectors/packet-vlan.c -> epan/dissectors/packet-vlan.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:   vlan_tree = NULL;",
          "264:   ti = proto_tree_add_item(tree, hfi_vlan, tvb, 0, 4, ENC_NA);",
          "266:   if (++vlan_nested_count > VLAN_MAX_NESTED_TAGS) {",
          "267:     expert_add_info(pinfo, ti, &ei_vlan_too_many_tags);",
          "268:     return tvb_captured_length(tvb);",
          "269:   }",
          "272:   if (tree) {",
          "",
          "[Removed Lines]",
          "265:   vlan_nested_count = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_vlan, 0));",
          "270:   p_add_proto_data(pinfo->pool, pinfo, proto_vlan, 0, GUINT_TO_POINTER(vlan_nested_count));",
          "",
          "[Added Lines]",
          "265:   vlan_nested_count = p_get_proto_depth(pinfo, proto_vlan);",
          "270:   p_set_proto_depth(pinfo, proto_vlan, vlan_nested_count);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
          "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <epan/exceptions.h>",
          "36: #include <epan/prefs.h>",
          "37: #include <epan/expert.h>",
          "38: #include <epan/strutil.h>",
          "39: #include <epan/iana_charsets.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7044: static guint32",
          "7045: parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo,",
          "7047:         const wbxml_decoding *map)",
          "7048: {",
          "7049:  guint32      tvb_len = tvb_reported_length (tvb);",
          "",
          "[Removed Lines]",
          "7046:         guint32 offset, guint32 str_tbl, guint8 level, guint8 *codepage_attr,",
          "",
          "[Added Lines]",
          "7047:         guint32 offset, guint32 str_tbl, guint8 *codepage_attr,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7058:  const gchar *str;",
          "7062:  while (off < tvb_len) {",
          "7063:   peek = tvb_get_guint8 (tvb, off);",
          "7064:   DebugLog((\"ATTR: (top of while) level = %3u, peek = 0x%02X, \"",
          "7066:   if ((peek & 0x3F) < 5) switch (peek) { /* Global tokens",
          "",
          "[Removed Lines]",
          "7060:  DebugLog((\"parse_wbxml_attr_defined (level = %u, offset = %u)\\n\", level, offset));",
          "7065:      \"off = %u, tvb_len = %u\\n\", level, peek, off, tvb_len));",
          "",
          "[Added Lines]",
          "7060:  unsigned     recursion_level = p_get_proto_depth(pinfo, proto_wbxml);",
          "7062:  DebugLog((\"parse_wbxml_attr_defined (level = %u, offset = %u)\\n\", recursion_level, offset));",
          "7067:      \"off = %u, tvb_len = %u\\n\", recursion_level, peek, off, tvb_len));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7081:    off++;",
          "7082:    DebugLog((\"ATTR: level = %u, Return: len = %u\\n\",",
          "7084:    return (off - offset);",
          "7086:    ent = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7087:    if (len <= tvb_len) {",
          "7088:     proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
          "7089:               \"  %3d |  Attr | A %3d    | ENTITY                          |     %s'&#%u;'\",",
          "7091:     off += 1+len;",
          "7092:    } else {",
          "",
          "[Removed Lines]",
          "7083:       level, off - offset));",
          "7090:               level, *codepage_attr, Indent (level), ent);",
          "",
          "[Added Lines]",
          "7085:       recursion_level, off - offset));",
          "7092:               recursion_level, *codepage_attr, Indent (recursion_level), ent);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7099:    str = tvb_format_text (tvb, off+1, len-1);",
          "7100:    proto_tree_add_string_format(tree, hf_wbxml_str_i, tvb, off, 1+len, str,",
          "7101:           \"  %3d |  Attr | A %3d    | STR_I (Inline string)           |     %s\\'%s\\'\",",
          "7103:    off += 1+len;",
          "7104:    break;",
          "",
          "[Removed Lines]",
          "7102:           level, *codepage_attr, Indent (level), str);",
          "",
          "[Added Lines]",
          "7104:           recursion_level, *codepage_attr, Indent (recursion_level), str);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7113:     attr_save_literal = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
          "7114:     proto_tree_add_string_format(tree, hf_wbxml_literal, tvb, off, 1+len, attr_save_literal,",
          "7115:               \"  %3d |  Attr | A %3d    | LITERAL (Literal Attribute)     |   %s<%s />\",",
          "7117:     off += 1+len;",
          "7118:    } else {",
          "",
          "[Removed Lines]",
          "7116:               level, *codepage_attr, Indent (level), attr_save_literal);",
          "",
          "[Added Lines]",
          "7118:               recursion_level, *codepage_attr, Indent (recursion_level), attr_save_literal);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7128:    str = tvb_format_text (tvb, off+1, len-1);",
          "7129:    proto_tree_add_string_format(tree, hf_wbxml_ext_i, tvb, off, 1+len, str,",
          "7130:           \"  %3d |  Attr | A %3d    | EXT_I_%1x    (Extension Token)    |     %s(%s: \\'%s\\')\",",
          "7132:           ((map != NULL) ? map_token (map->global, 0, peek) : \"Inline string extension\"), str);",
          "7133:    off += 1+len;",
          "7134:    break;",
          "",
          "[Removed Lines]",
          "7131:           level, *codepage_attr, peek & 0x0f, Indent (level),",
          "",
          "[Added Lines]",
          "7133:           recursion_level, *codepage_attr, peek & 0x0f, Indent (recursion_level),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7153:     }",
          "7154:     proto_tree_add_string_format(tree, hf_wbxml_ext_t, tvb, off, 1+len, s,",
          "7155:            \"  %3d | Tag   | T %3d    | EXT_T_%1x    (Extension Token)    | %s%s)\",",
          "7157:            s);",
          "7158:    }",
          "7159:    if (len <= tvb_len) {",
          "",
          "[Removed Lines]",
          "7156:            level, *codepage_attr, peek & 0x0f, Indent (level),",
          "",
          "[Added Lines]",
          "7158:            recursion_level, *codepage_attr, peek & 0x0f, Indent (recursion_level),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7170:     str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
          "7171:     proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
          "7172:               \"  %3d |  Attr | A %3d    | STR_T (Tableref string)         |     %s\\'%s\\'\",",
          "7174:     off += 1+len;",
          "7175:    } else {",
          "",
          "[Removed Lines]",
          "7173:               level, *codepage_attr, Indent (level), str);",
          "",
          "[Added Lines]",
          "7175:               recursion_level, *codepage_attr, Indent (recursion_level), str);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7185:    str = (map != NULL) ? map_token (map->global, 0, peek) : \"Single-byte extension\";",
          "7186:    proto_tree_add_string_format(tree, hf_wbxml_extension_token, tvb, off, 1, str,",
          "7187:           \"  %3d |  Attr | A %3d    | EXT_%1x      (Extension Token)    |     %s(%s)\",",
          "7189:    off++;",
          "7190:    break;",
          "",
          "[Removed Lines]",
          "7188:           level, *codepage_attr, peek & 0x0f, Indent (level), str);",
          "",
          "[Added Lines]",
          "7190:           recursion_level, *codepage_attr, peek & 0x0f, Indent (recursion_level), str);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "7213:      if (len <= tvb_len) {",
          "7214:       proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
          "7215:                 \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s%s\",",
          "7217:       off += 1 + len;",
          "7218:      } else {",
          "",
          "[Removed Lines]",
          "7216:                 level, *codepage_attr, Indent (level), tmp_str);",
          "",
          "[Added Lines]",
          "7218:                 recursion_level, *codepage_attr, Indent (recursion_level), tmp_str);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7224:      if ((len <= tvb_len) && (idx < tvb_len)) {",
          "7225:       proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7226:             \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s(%u bytes of opaque data)\",",
          "7228:       off += 1+len+idx;",
          "7229:      } else {",
          "",
          "[Removed Lines]",
          "7227:             level, *codepage_attr, Indent (level), idx);",
          "",
          "[Added Lines]",
          "7229:             recursion_level, *codepage_attr, Indent (recursion_level), idx);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7235:     proto_tree_add_none_format(tree, hf_wbxml_reserved_2, tvb, off, 1,",
          "7236:             \"  %3d |  Attr | A %3d    | RESERVED_2     (Invalid Token!) | WBXML 1.0 parsing stops here.\",",
          "7239:     off = tvb_len;",
          "7240:     DebugLog((\"ATTR: level = %u, Return: len = %u\\n\",",
          "7242:     return (off - offset);",
          "7243:    }",
          "7244:    break;",
          "",
          "[Removed Lines]",
          "7237:             level, *codepage_attr);",
          "7241:        level, off - offset));",
          "",
          "[Added Lines]",
          "7239:             recursion_level, *codepage_attr);",
          "7243:        recursion_level, off - offset));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7246:   default:",
          "7247:    proto_tree_add_none_format(tree, hf_wbxml_invalid_token, tvb, off, 1,",
          "7248:           \"  %3d |  Attr | A %3d    | %-10s     (Invalid Token!) | WBXML parsing stops here.\",",
          "7251:    off = tvb_len;",
          "7252:    break;",
          "",
          "[Removed Lines]",
          "7249:           level, *codepage_attr, val_to_str_ext (peek, &vals_wbxml1x_global_tokens_ext, \"(unknown 0x%x)\"));",
          "",
          "[Added Lines]",
          "7251:           recursion_level, *codepage_attr, val_to_str_ext (peek, &vals_wbxml1x_global_tokens_ext, \"(unknown 0x%x)\"));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "7260:     }",
          "7261:     proto_tree_add_string_format(tree, hf_wbxml_known_attrvalue, tvb, off, 1, s,",
          "7262:            \"  %3d |  Attr | A %3d    |   Known attrValue 0x%02X          |       %s%s\",",
          "7264:            s);",
          "7265:     off++;",
          "",
          "[Removed Lines]",
          "7263:            level, *codepage_attr, peek & 0x7f, Indent (level),",
          "",
          "[Added Lines]",
          "7265:            recursion_level, *codepage_attr, peek & 0x7f, Indent (recursion_level),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "7272:     }",
          "7273:     proto_tree_add_string_format(tree, hf_wbxml_known_attrstart, tvb, off, 1, s,",
          "7274:            \"  %3d |  Attr | A %3d    |   Known attrStart 0x%02X          |   %s%s\",",
          "7276:            s);",
          "7277:     off++;",
          "7278:    }",
          "7279:   }",
          "7281:  DebugLog((\"ATTR: level = %u, Return: len = %u (end of function body)\\n\",",
          "7283:  return (off - offset);",
          "7284: }",
          "",
          "[Removed Lines]",
          "7275:            level, *codepage_attr, attr_save_known, Indent (level),",
          "7282:     level, off - offset));",
          "",
          "[Added Lines]",
          "7277:            recursion_level, *codepage_attr, attr_save_known, Indent (recursion_level),",
          "7284:     recursion_level, off - offset));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "7310: static guint32",
          "7311: parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, guint32 offset,",
          "7313:     const wbxml_decoding *map)",
          "7314: {",
          "7315:  guint32      tvb_len  = tvb_reported_length (tvb);",
          "",
          "[Removed Lines]",
          "7312:     guint32 str_tbl, guint8 *level, guint8 *codepage_stag, guint8 *codepage_attr,",
          "",
          "[Added Lines]",
          "7312: #define WBXML_MAX_RECURSION_LEVEL 255",
          "7315:     guint32 str_tbl, guint8 *codepage_stag, guint8 *codepage_attr,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "7331:            The initial state is FALSE.",
          "7335:   proto_tree_add_expert(tree, pinfo, &ei_wbxml_too_much_recursion, tvb, offset, tvb_captured_length_remaining(tvb, offset));",
          "7336:   return tvb_len;",
          "7337:  }",
          "7339:  while (off < tvb_len) {",
          "7340:   peek = tvb_get_guint8 (tvb, off);",
          "7342:   if ((peek & 0x3F) < 4) switch (peek) { /* Global tokens in state = STAG",
          "",
          "[Removed Lines]",
          "7334:  if (*level == 255) {",
          "7338:  DebugLog((\"parse_wbxml_tag_defined (level = %u, offset = %u)\\n\", *level, offset));",
          "7341:   DebugLog((\"STAG: (top of while) level = %3u, peek = 0x%02X, off = %u, tvb_len = %u\\n\", *level, peek, off, tvb_len));",
          "",
          "[Added Lines]",
          "7337:  unsigned recursion_level = p_get_proto_depth(pinfo, proto_wbxml);",
          "7338:  if (++recursion_level >= WBXML_MAX_RECURSION_LEVEL) {",
          "7342:  DebugLog((\"parse_wbxml_tag_defined (level = %u, offset = %u)\\n\", recursion_level, offset));",
          "7345:   DebugLog((\"STAG: (top of while) level = %3u, peek = 0x%02X, off = %u, tvb_len = %u\\n\", recursion_level, peek, off, tvb_len));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "7353:     proto_tree_add_string_format(tree, hf_wbxml_end_known_tag, tvb, off, 1, tag_save_literal,",
          "7354:            \"  %3d | Tag   | T %3d    | END (Known Tag 0x%02X)            | %s</%s>\",",
          "7359:     proto_tree_add_string_format(tree, hf_wbxml_end_literal_tag, tvb, off, 1, tag_save_literal ? tag_save_literal : \"\",",
          "7360:            \"  %3d | Tag   | T %3d    | END (Literal Tag)               | %s</%s>\",",
          "7362:    }",
          "7364:    off++;",
          "7367:    return (off - offset);",
          "7369:    ent = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7370:    proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
          "7371:           \"  %3d | Tag   | T %3d    | ENTITY                          | %s'&#%u;'\",",
          "7373:    off += 1+len;",
          "7374:    break;",
          "",
          "[Removed Lines]",
          "7356:            tag_save_known, Indent (*level),",
          "7363:    (*level)--;",
          "7366:    DebugLog((\"STAG: level = %u, Return: len = %u\\n\", *level, off - offset));",
          "",
          "[Added Lines]",
          "7359:            recursion_level, *codepage_stag,",
          "7360:            tag_save_known, Indent (recursion_level),",
          "7365:            recursion_level, *codepage_stag, Indent (recursion_level), tag_save_literal ? tag_save_literal : \"\");",
          "7367:    recursion_level--;",
          "7368:    p_set_proto_depth(pinfo, proto_wbxml, recursion_level);",
          "7371:    DebugLog((\"STAG: level = %u, Return: len = %u\\n\", recursion_level, off - offset));",
          "7377:           recursion_level, *codepage_stag, Indent (recursion_level), ent);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "7377:    str = tvb_format_text (tvb, off+1, len-1);",
          "7378:    proto_tree_add_string_format(tree, hf_wbxml_str_i, tvb, off, 1+len, str,",
          "7379:           \"  %3d | Tag   | T %3d    | STR_I (Inline string)           | %s\\'%s\\'\",",
          "7381:           str);",
          "7382:    off += 1+len;",
          "7383:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7385:           recursion_level, *codepage_stag, Indent(recursion_level),",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "7389:    str = tvb_format_text (tvb, off+1, len-1);",
          "7390:    proto_tree_add_string_format(tree, hf_wbxml_ext_i, tvb, off, 1+len, str,",
          "7391:           \"  %3d | Tag   | T %3d    | EXT_I_%1x    (Extension Token)    | %s(%s: \\'%s\\')\",",
          "7394:           ((map != NULL) ? map_token (map->global, 0, peek) : \"Inline string extension\"),",
          "7395:           str);",
          "7396:    off += 1+len;",
          "",
          "[Removed Lines]",
          "7393:           peek & 0x0f, Indent (*level),",
          "",
          "[Added Lines]",
          "7397:           recursion_level, *codepage_stag,",
          "7398:           peek & 0x0f, Indent (recursion_level),",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "7399:    proto_tree_add_none_format(tree, hf_wbxml_pi_xml, tvb, off, 1,",
          "7400:           \"  %3d | Tag   | T %3d    | PI (XML Processing Instruction) | %s<?xml\",",
          "7402:    len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo, off,",
          "7405:    off += len;",
          "7406:    if (off >= tvb_len) {",
          "7407:     DebugLog((\"STAG: level = %u, ThrowException: len = %u (short frame)\\n\",",
          "7409:    }",
          "7411:    proto_tree_add_none_format(tree, hf_wbxml_end_pi, tvb, off-1, 1,",
          "7412:           \"  %3d | Tag   | T %3d    | END (PI)                        | %s?>\",",
          "7414:    break;",
          "",
          "[Removed Lines]",
          "7403:           str_tbl, *level, codepage_attr, map);",
          "",
          "[Added Lines]",
          "7406:           recursion_level, *codepage_stag, Indent (recursion_level));",
          "7408:           str_tbl, codepage_attr, map);",
          "7413:        recursion_level, off - offset));",
          "7418:           recursion_level, *codepage_stag, Indent (recursion_level));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "7433:     }",
          "7434:     proto_tree_add_string_format(tree, hf_wbxml_ext_t, tvb, off, 1+len, s,",
          "7435:            \"  %3d | Tag   | T %3d    | EXT_T_%1x    (Extension Token)    | %s%s\",",
          "7437:    }",
          "7438:    off += 1+len;",
          "7439:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7441:            recursion_level, *codepage_stag, peek & 0x0f, Indent (recursion_level), s);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7443:    str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
          "7444:    proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
          "7445:           \"  %3d | Tag   | T %3d    | STR_T (Tableref string)         | %s\\'%s\\'\",",
          "7447:    off += 1+len;",
          "7448:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7451:           recursion_level, *codepage_stag, Indent (recursion_level), str);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "7453:    str = (map != NULL) ? map_token (map->global, 0, peek) : \"Single-byte extension\";",
          "7454:    proto_tree_add_string_format(tree, hf_wbxml_extension_token, tvb, off, 1, str,",
          "7455:           \"  %3d | Tag   | T %3d    | EXT_%1x      (Extension Token)    | %s(%s)\",",
          "7457:    off++;",
          "7458:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7461:           recursion_level, *codepage_stag, peek & 0x0f, Indent (recursion_level), str);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "7480:      }",
          "7481:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
          "7482:            \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s%s\",",
          "7484:      off += 1 + len;",
          "7485:     } else {",
          "7486:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7488:            recursion_level, *codepage_stag, Indent (recursion_level), tmp_str);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "7488:      {",
          "7489:       proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7490:                \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%u bytes of opaque data)\",",
          "7492:       off += 1+len+idx;",
          "7493:      } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7496:                recursion_level, *codepage_stag, Indent (recursion_level), idx);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "7499:     proto_tree_add_none_format(tree, hf_wbxml_reserved_2, tvb, off, 1,",
          "7500:            \"  %3d | Tag   | T %3d    | RESERVED_2     (Invalid Token!) | WBXML 1.0 parsing stops here.\",",
          "7503:     off = tvb_len;",
          "7505:     return (off - offset);",
          "7506:    }",
          "7507:    break;",
          "",
          "[Removed Lines]",
          "7504:     DebugLog((\"STAG: level = %u, Return: len = %u\\n\", *level, off - offset));",
          "",
          "[Added Lines]",
          "7506:            recursion_level, *codepage_stag);",
          "7509:     DebugLog((\"STAG: level = %u, Return: len = %u\\n\", recursion_level, off - offset));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "7552:      DebugLog((\"STAG: Tag in Tag - RECURSE! (off = %u)\\n\", off));",
          "7556:      len = parse_wbxml_tag_defined (tree, tvb, pinfo, off, str_tbl,",
          "7558:      off += len;",
          "",
          "[Removed Lines]",
          "7555:      (*level)++;",
          "7557:                level, codepage_stag, codepage_attr, map);",
          "",
          "[Added Lines]",
          "7560:      recursion_level++;",
          "7561:      p_set_proto_depth(pinfo, proto_wbxml, recursion_level);",
          "7563:                codepage_stag, codepage_attr, map);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "7572:        proto_tree_add_string_format(tree, hf_wbxml_known_tag, tvb, off, 1, tag_new_literal,",
          "7573:               \"  %3d | Tag   | T %3d    |   Known Tag 0x%02X           (AC) | %s<%s\",",
          "7577:        off++;",
          "7579:        proto_tree_add_string_format(tree, hf_wbxml_literal_ac, tvb, off, 1, tag_new_literal,",
          "7580:               \"  %3d | Tag   | T %3d    | LITERAL_AC (Literal tag)   (AC) | %s<%s\",",
          "7582:        off += 1 + tag_len;",
          "7583:       }",
          "7584:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
          "7587:       off += len;",
          "7588:       if (off >= tvb_len) {",
          "7589:        DebugLog((\"STAG: level = %u, ThrowException: len = %u (short frame)\\n\",",
          "7591:       }",
          "7593:       proto_tree_add_none_format(tree, hf_wbxml_end_attribute_list, tvb, off-1, 1,",
          "7594:              \"  %3d | Tag   | T %3d    | END (attribute list)            | %s>\",",
          "7598:        proto_tree_add_string_format(tree, hf_wbxml_known_tag, tvb, off, 1, tag_new_literal,",
          "7599:               \"  %3d | Tag   | T %3d    |   Known Tag 0x%02X           (.C) | %s<%s>\",",
          "7603:        off++;",
          "7605:        proto_tree_add_string_format(tree, hf_wbxml_literal_c, tvb, off, 1, tag_new_literal,",
          "7606:               \"  %3d | Tag   | T %3d    | LITERAL_C  (Literal Tag)   (.C) | %s<%s>\",",
          "7608:        off += 1 + tag_len;",
          "7609:       }",
          "7610:      }",
          "",
          "[Removed Lines]",
          "7575:               Indent (*level), tag_new_literal);",
          "7585:              off, str_tbl, *level, codepage_attr, map);",
          "7601:               Indent (*level), tag_new_literal);",
          "",
          "[Added Lines]",
          "7580:               recursion_level, *codepage_stag, tag_new_known,",
          "7581:               Indent (recursion_level), tag_new_literal);",
          "7587:               recursion_level, *codepage_stag, Indent (recursion_level), tag_new_literal);",
          "7591:              off, str_tbl, codepage_attr, map);",
          "7596:           recursion_level, off - offset));",
          "7601:              recursion_level, *codepage_stag, Indent (recursion_level));",
          "7606:               recursion_level, *codepage_stag, tag_new_known,",
          "7607:               Indent (recursion_level), tag_new_literal);",
          "7613:               recursion_level, *codepage_stag, Indent (recursion_level), tag_new_literal);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "7618:     }",
          "7620:     DebugLog((\"<Tag/> in Tag - No recursion! (off = %u)\\n\", off));",
          "7624:       proto_tree_add_string_format(tree, hf_wbxml_known_tag, tvb, off, 1, tag_new_literal,",
          "7625:              \"  %3d | Tag   | T %3d    |   Known Tag 0x%02X           (A.) | %s<%s\",",
          "7629:       off++;",
          "7630:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
          "7633:       off += len;",
          "7634:       if (off > tvb_len) {",
          "7635:        DebugLog((\"STAG: level = %u, ThrowException: len = %u (short frame)\\n\",",
          "7637:       }",
          "7638:       proto_tree_add_uint_format(tree, hf_wbxml_end_known_tag_uint, tvb, off-1, 1, *codepage_stag,",
          "7639:              \"  %3d | Tag   | T %3d    | END (Known Tag)                 | %s/>\",",
          "7642:       proto_tree_add_string_format(tree, hf_wbxml_literal_a, tvb, off, 1, tag_new_literal,",
          "7643:              \"  %3d | Tag   | T %3d    | LITERAL_A  (Literal Tag)   (A.) | %s<%s\",",
          "7645:       off += 1 + tag_len;",
          "7646:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
          "7649:       off += len;",
          "7650:       if (off >= tvb_len) {",
          "7651:        DebugLog((\"STAG: level = %u, ThrowException: len = %u (short frame)\\n\",",
          "7653:       }",
          "7654:       proto_tree_add_string_format(tree, hf_wbxml_end_literal_tag, tvb, off-1, 1, \"\",",
          "7655:              \"  %3d | Tag   | T %3d    | END (Literal Tag)               | %s/>\",",
          "7657:      }",
          "7660:       proto_tree_add_string_format(tree, hf_wbxml_known_tag, tvb, off, 1, tag_new_literal,",
          "7661:              \"  %3d | Tag   | T %3d    |   Known Tag 0x%02x           (..) | %s<%s />\",",
          "7665:       off++;",
          "7667:       proto_tree_add_string_format(tree, hf_wbxml_literal, tvb, off, 1, tag_new_literal,",
          "7668:              \"  %3d | Tag   | T %3d    | LITERAL    (Literal Tag)   (..) | %s<%s />\",",
          "7670:              tag_new_literal);",
          "7671:       off += 1 + tag_len;",
          "7672:      }",
          "7673:     }",
          "7676:    }",
          "7680:  return (off - offset);",
          "7681: }",
          "",
          "[Removed Lines]",
          "7621:     (*level)++;",
          "7627:              Indent (*level), tag_new_literal);",
          "7631:              off, str_tbl, *level, codepage_attr, map);",
          "7636:           level, off - offset));",
          "7647:              off, str_tbl, *level, codepage_attr, map);",
          "7663:              Indent (*level), tag_new_literal);",
          "7674:     (*level)--;",
          "7679:  DebugLog((\"STAG: level = %u, Return: len = %u (end of function body)\\n\", *level, off - offset));",
          "",
          "[Added Lines]",
          "7627:     recursion_level++;",
          "7628:     p_set_proto_depth(pinfo, proto_wbxml, recursion_level);",
          "7633:              recursion_level, *codepage_stag, tag_new_known,",
          "7634:              Indent (recursion_level), tag_new_literal);",
          "7638:              off, str_tbl, codepage_attr, map);",
          "7643:           recursion_level, off - offset));",
          "7647:              recursion_level, *codepage_stag, Indent (recursion_level));",
          "7651:              recursion_level, *codepage_stag, Indent (recursion_level), tag_new_literal);",
          "7654:              off, str_tbl, codepage_attr, map);",
          "7659:           recursion_level, off - offset));",
          "7663:              recursion_level, *codepage_stag, Indent (recursion_level));",
          "7669:              recursion_level, *codepage_stag, tag_new_known,",
          "7670:              Indent (recursion_level), tag_new_literal);",
          "7676:              recursion_level, *codepage_stag, Indent (recursion_level),",
          "7681:     recursion_level--;",
          "7682:     p_set_proto_depth(pinfo, proto_wbxml, recursion_level);",
          "7687:  DebugLog((\"STAG: level = %u, Return: len = %u (end of function body)\\n\", recursion_level, off - offset));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "7880:  parse_wbxml_tag_defined (tag_tree,",
          "7882:        &codepage_attr, content_map);",
          "7883: }",
          "",
          "[Removed Lines]",
          "7881:        tvb, pinfo, offset, str_tbl, &level, &codepage_stag,",
          "",
          "[Added Lines]",
          "7888:        tvb, pinfo, offset, str_tbl, &codepage_stag,",
          "",
          "---------------"
        ],
        "epan/proto_data.c||epan/proto_data.c": [
          "File: epan/proto_data.c -> epan/proto_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:   return wmem_strdup_printf(wmem_packet_scope(),\"[%s, key %u]\",proto_get_protocol_name(temp->proto), temp->key);",
          "150: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152: #define PROTO_DEPTH_KEY 0x3c233fb5 // printf \"0x%02x%02x\\n\" ${RANDOM} ${RANDOM}",
          "154: void p_set_proto_depth(struct _packet_info *pinfo, int proto, unsigned depth) {",
          "155:   p_add_proto_data(pinfo->pool, pinfo, proto, PROTO_DEPTH_KEY, GUINT_TO_POINTER(depth));",
          "156: }",
          "158: unsigned p_get_proto_depth(struct _packet_info *pinfo, int proto) {",
          "159:   return GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto, PROTO_DEPTH_KEY));",
          "160: }",
          "",
          "---------------"
        ],
        "epan/proto_data.h||epan/proto_data.h": [
          "File: epan/proto_data.h -> epan/proto_data.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"ws_symbol_export.h\"",
          "21: WS_DLL_PUBLIC void p_add_proto_data(wmem_allocator_t *scope, struct _packet_info* pinfo, int proto, guint32 key, void *proto_data);",
          "22: WS_DLL_PUBLIC void *p_get_proto_data(wmem_allocator_t *scope, struct _packet_info* pinfo, int proto, guint32 key);",
          "23: WS_DLL_PUBLIC void p_remove_proto_data(wmem_allocator_t *scope, struct _packet_info* pinfo, int proto, guint32 key);",
          "24: gchar *p_get_proto_name_and_key(wmem_allocator_t *scope, struct _packet_info* pinfo, guint pfd_index);",
          "26: #ifdef __cplusplus",
          "27: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: WS_DLL_PUBLIC void p_set_proto_depth(struct _packet_info* pinfo, int proto, unsigned depth);",
          "50: WS_DLL_PUBLIC unsigned p_get_proto_depth(struct _packet_info* pinfo, int proto);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "acf9162225939373093c23b2682758f91653a631",
      "candidate_info": {
        "commit_hash": "acf9162225939373093c23b2682758f91653a631",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/acf9162225939373093c23b2682758f91653a631",
        "files": [
          "epan/dissectors/packet-quic.c"
        ],
        "message": "QUIC: add verification of Retry Integrity Tag (draft -25)\n\nThis could help diagnosing early implementation errors using\nhttps://github.com/marten-seemann/quic-interop-runner\n\nTested with capture files based on sample provided by Marten Seemann:\n1. Valid Retry packet should not add the \"quic.bad_retry\" field.\n2. Mutated, invalid tag: \"Retry Integrity Tag verification failure\"\n3. A missing Initial: \"Cannot verify Retry Packet due to unknown ODCID\"\n\nAs side-effect, the connection tracking code can now distinguish between\na connection where the server sent an empty SCID and a connection where\nthe server did not send an Initial.\n\nBug: 13881\nChange-Id: I972acd680b1becc9fb7b9e002b400886a06bc828\nReviewed-on: https://code.wireshark.org/review/35978\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\n(cherry picked from commit d24fbbc5a0cdfbeb0cb8d45d7e15f3139bbcb647)\nReviewed-on: https://code.wireshark.org/review/36109\nReviewed-by: Peter Wu <peter@lekensteyn.nl>",
        "before_after_code_files": [
          "epan/dissectors/packet-quic.c||epan/dissectors/packet-quic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-quic.c||epan/dissectors/packet-quic.c": [
          "File: epan/dissectors/packet-quic.c -> epan/dissectors/packet-quic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150: static expert_field ei_quic_ft_unknown = EI_INIT;",
          "151: static expert_field ei_quic_decryption_failed = EI_INIT;",
          "152: static expert_field ei_quic_protocol_violation = EI_INIT;",
          "154: static gint ett_quic = -1;",
          "155: static gint ett_quic_short_header = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153: static expert_field ei_quic_bad_retry = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:     quic_decrypt_result_t   decryption;",
          "290: };",
          "291: typedef struct quic_packet_info quic_packet_info_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292:     gboolean                retry_integrity_failure : 1;",
          "293:     gboolean                retry_integrity_success : 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "838:         memcpy(&conn->client_dcid_initial, dcid, sizeof(quic_cid_t));",
          "839:         wmem_map_insert(quic_initial_connections, &conn->client_dcid_initial, conn);",
          "840:     }",
          "841: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "844:         conn->client_dcid_set = 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "885:                 quic_connection_update_initial(*conn_p, scid, dcid);",
          "",
          "[Removed Lines]",
          "886:             } else if (conn->client_dcid_initial.len == 0 && dcid->len) {",
          "",
          "[Added Lines]",
          "891:             } else if (!conn->client_dcid_set && dcid->len) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "909:                 wmem_map_remove(quic_initial_connections, &conn->client_dcid_initial);",
          "910:                 memset(&conn->client_dcid_initial, 0, sizeof(quic_cid_t));",
          "911:             }",
          "912:             if (conn->server_cids.data.len == 0 && scid->len) {",
          "913:                 memcpy(&conn->server_cids.data, scid, sizeof(quic_cid_t));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916:                 conn->client_dcid_set = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1854: }",
          "1857: static void",
          "1858: quic_add_connection_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, quic_info_data_t *conn)",
          "1859: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1863: #ifdef HAVE_LIBGCRYPT_AEAD",
          "1864: static void",
          "1865: quic_verify_retry_token(tvbuff_t *tvb, quic_packet_info_t *quic_packet, const quic_cid_t *odcid)",
          "1866: {",
          "1871:     static const guint8 key[] = {",
          "1872:         0x4d, 0x32, 0xec, 0xdb, 0x2a, 0x21, 0x33, 0xc8,",
          "1873:         0x41, 0xe4, 0x04, 0x3d, 0xf2, 0x7d, 0x44, 0x30,",
          "1874:     };",
          "1875:     static const guint8 nonce[] = {",
          "1876:         0x4d, 0x16, 0x11, 0xd0, 0x55, 0x13, 0xa5, 0x52, 0xc5, 0x87, 0xd5, 0x75,",
          "1877:     };",
          "1878:     gcry_cipher_hd_t    h = NULL;",
          "1879:     gcry_error_t        err;",
          "1880:     gint                pseudo_packet_tail_length = tvb_reported_length(tvb) - 16;",
          "1882:     DISSECTOR_ASSERT(pseudo_packet_tail_length > 0);",
          "1884:     err = gcry_cipher_open(&h, GCRY_CIPHER_AES128, GCRY_CIPHER_MODE_GCM, 0);",
          "1885:     DISSECTOR_ASSERT_HINT(err == 0, \"create cipher\");",
          "1886:     err = gcry_cipher_setkey(h, key, sizeof(key));",
          "1887:     DISSECTOR_ASSERT_HINT(err == 0, \"set key\");",
          "1888:     err = gcry_cipher_setiv(h, nonce, sizeof(nonce));",
          "1889:     DISSECTOR_ASSERT_HINT(err == 0, \"set nonce\");",
          "1890:     G_STATIC_ASSERT(sizeof(odcid->len) == 1);",
          "1891:     err = gcry_cipher_authenticate(h, odcid, 1 + odcid->len);",
          "1892:     DISSECTOR_ASSERT_HINT(err == 0, \"aad1\");",
          "1893:     err = gcry_cipher_authenticate(h, tvb_get_ptr(tvb, 0, pseudo_packet_tail_length), pseudo_packet_tail_length);",
          "1894:     DISSECTOR_ASSERT_HINT(err == 0, \"aad2\");",
          "1896:     err = gcry_cipher_checktag(h, tvb_get_ptr(tvb, pseudo_packet_tail_length, 16), 16);",
          "1897:     if (err) {",
          "1898:         quic_packet->retry_integrity_failure = 1;",
          "1899:     } else {",
          "1900:         quic_packet->retry_integrity_success = 1;",
          "1901:     }",
          "1902:     gcry_cipher_close(h);",
          "1903: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1933: static int",
          "1934: dissect_quic_retry_packet(tvbuff_t *tvb, packet_info *pinfo, proto_tree *quic_tree,",
          "1936: {",
          "1937:     guint       offset = 0;",
          "1938:     guint32     version;",
          "1939:     quic_cid_t  dcid = {.len=0}, scid = {.len=0};",
          "1940:     guint32     odcil = 0;",
          "1941:     guint       retry_token_len;",
          "1943:     proto_tree_add_item(quic_tree, hf_quic_long_packet_type, tvb, offset, 1, ENC_NA);",
          "1944:     offset += 1;",
          "",
          "[Removed Lines]",
          "1935:                           quic_datagram *dgram_info _U_, quic_packet_info_t *quic_packet)",
          "",
          "[Added Lines]",
          "1985:                           quic_datagram *dgram_info _U_, quic_packet_info_t *quic_packet,",
          "1986:                           const quic_cid_t *odcid)",
          "1993:     proto_item *ti;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1956:     retry_token_len = tvb_reported_length_remaining(tvb, offset);",
          "1958:     if (!is_quic_draft_max(version, 24) && retry_token_len >= 16) {",
          "1960:     }",
          "1961:     proto_tree_add_item(quic_tree, hf_quic_retry_token, tvb, offset, retry_token_len, ENC_NA);",
          "1962:     offset += retry_token_len;",
          "1964:     if (!is_quic_draft_max(version, 24)) {",
          "1968:         offset += 16;",
          "1969:     }",
          "",
          "[Removed Lines]",
          "1959:         retry_token_len -=16;",
          "1967:         proto_tree_add_item(quic_tree, hf_quic_retry_integrity_tag, tvb, offset, 16, ENC_NA);",
          "",
          "[Added Lines]",
          "2011:         retry_token_len -= 16;",
          "2019:         ti = proto_tree_add_item(quic_tree, hf_quic_retry_integrity_tag, tvb, offset, 16, ENC_NA);",
          "2020: #ifdef HAVE_LIBGCRYPT_AEAD",
          "2021:         if (!PINFO_FD_VISITED(pinfo) && odcid) {",
          "2024:             quic_verify_retry_token(tvb, quic_packet, odcid);",
          "2025:         }",
          "2026: #else",
          "2027:         (void)odcid;",
          "2028: #endif",
          "2029:         if (quic_packet->retry_integrity_failure) {",
          "2030:             expert_add_info(pinfo, ti, &ei_quic_bad_retry);",
          "2031:         } else if (!quic_packet->retry_integrity_success) {",
          "2032:             expert_add_info_format(pinfo, ti, &ei_quic_bad_retry,",
          "2033:                     \"Cannot verify Retry Packet due to unknown ODCID\");",
          "2034:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2331:     guint       offset = 0;",
          "2332:     quic_datagram *dgram_info = NULL;",
          "2333:     quic_packet_info_t *quic_packet = NULL;",
          "2335:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"QUIC\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2401:     quic_cid_t  real_retry_odcid = {.len=0}, *retry_odcid = NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2355:         quic_extract_header(tvb, &long_packet_type, &version, &dcid, &scid);",
          "2356:         conn = quic_connection_find(pinfo, long_packet_type, &dcid, &from_server);",
          "2357:         quic_connection_create_or_update(&conn, pinfo, long_packet_type, version, &scid, &dcid, from_server);",
          "2358:         dgram_info->conn = conn;",
          "2359:         dgram_info->from_server = from_server;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2425:         if (conn && long_packet_type == QUIC_LPT_RETRY && conn->client_dcid_set) {",
          "2427:             real_retry_odcid = conn->client_dcid_initial;",
          "2428:             retry_odcid = &real_retry_odcid;",
          "2429:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2398:                 break;",
          "2399:             }",
          "2400:             if (long_packet_type == QUIC_LPT_RETRY) {",
          "2402:             } else {",
          "2403:                 new_offset = dissect_quic_long_header(next_tvb, pinfo, quic_tree, dgram_info, quic_packet);",
          "2404:             }",
          "",
          "[Removed Lines]",
          "2401:                 new_offset = dissect_quic_retry_packet(next_tvb, pinfo, quic_tree, dgram_info, quic_packet);",
          "",
          "[Added Lines]",
          "2474:                 new_offset = dissect_quic_retry_packet(next_tvb, pinfo, quic_tree, dgram_info, quic_packet, retry_odcid);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3037:           { \"quic.protocol_violation\", PI_PROTOCOL, PI_WARN,",
          "3038:             \"Invalid data according to the protocol\", EXPFILL }",
          "3039:         },",
          "3040:     };",
          "3042:     proto_quic = proto_register_protocol(\"QUIC IETF\", \"QUIC\", \"quic\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3113:         { &ei_quic_bad_retry,",
          "3114:           { \"quic.bad_retry\", PI_PROTOCOL, PI_WARN,",
          "3115:             \"Retry Integrity Tag verification failure\", EXPFILL }",
          "3116:         },",
          "",
          "---------------"
        ]
      }
    }
  ]
}