{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b2ab513b42690869c563fd577645d6dd4466fcd6",
      "candidate_info": {
        "commit_hash": "b2ab513b42690869c563fd577645d6dd4466fcd6",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/b2ab513b42690869c563fd577645d6dd4466fcd6",
        "files": [
          "main/SQLHelper.cpp"
        ],
        "message": "Removed incorrect comments",
        "before_after_code_files": [
          "main/SQLHelper.cpp||main/SQLHelper.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp"
        ]
      }
    },
    {
      "candidate_hash": "d9e6020d90b88b9e72a88b024e5b666a31c21f51",
      "candidate_info": {
        "commit_hash": "d9e6020d90b88b9e72a88b024e5b666a31c21f51",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/d9e6020d90b88b9e72a88b024e5b666a31c21f51",
        "files": [
          "main/Scheduler.cpp",
          "msbuild/domoticz.vcxproj"
        ],
        "message": "Fixed compile warning",
        "before_after_code_files": [
          "main/Scheduler.cpp||main/Scheduler.cpp",
          "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/Scheduler.cpp||main/Scheduler.cpp": [
          "File: main/Scheduler.cpp -> main/Scheduler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "930: void CScheduler::DeleteExpiredTimers()",
          "931: {",
          "934:  time_t now = mytime(NULL);",
          "935:  struct tm tmnow;",
          "936:  localtime_r(&now, &tmnow);",
          "",
          "[Removed Lines]",
          "932:  char szDate[20];",
          "933:  char szTime[20];",
          "",
          "[Added Lines]",
          "932:  char szDate[40];",
          "933:  char szTime[40];",
          "",
          "---------------"
        ],
        "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj": [
          "File: msbuild/domoticz.vcxproj -> msbuild/domoticz.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     <ProjectGuid>{6AD96441-5B2C-467B-AAB6-A1B8368D503A}</ProjectGuid>",
          "15:     <Keyword>Win32Proj</Keyword>",
          "16:     <RootNamespace>domoticz</RootNamespace>",
          "18:   </PropertyGroup>",
          "19:   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />",
          "20:   <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">",
          "21:     <ConfigurationType>Application</ConfigurationType>",
          "22:     <UseDebugLibraries>true</UseDebugLibraries>",
          "23:     <CharacterSet>MultiByte</CharacterSet>",
          "25:   </PropertyGroup>",
          "26:   <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">",
          "27:     <ConfigurationType>Application</ConfigurationType>",
          "28:     <UseDebugLibraries>false</UseDebugLibraries>",
          "29:     <WholeProgramOptimization>true</WholeProgramOptimization>",
          "30:     <CharacterSet>MultiByte</CharacterSet>",
          "32:   </PropertyGroup>",
          "33:   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />",
          "34:   <ImportGroup Label=\"ExtensionSettings\">",
          "",
          "[Removed Lines]",
          "17:     <WindowsTargetPlatformVersion>10.0.17763.0</WindowsTargetPlatformVersion>",
          "24:     <PlatformToolset>v141</PlatformToolset>",
          "31:     <PlatformToolset>v141</PlatformToolset>",
          "",
          "[Added Lines]",
          "17:     <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>",
          "24:     <PlatformToolset>v142</PlatformToolset>",
          "31:     <PlatformToolset>v142</PlatformToolset>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5188fbc0acfbe93075ee2e3279a5de0305423df5",
      "candidate_info": {
        "commit_hash": "5188fbc0acfbe93075ee2e3279a5de0305423df5",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/5188fbc0acfbe93075ee2e3279a5de0305423df5",
        "files": [
          "hardware/EnOceanESP3.cpp"
        ],
        "message": "Reordered ESP3_RORG, added some unknowns",
        "before_after_code_files": [
          "hardware/EnOceanESP3.cpp||hardware/EnOceanESP3.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/EnOceanESP3.cpp||hardware/EnOceanESP3.cpp": [
          "File: hardware/EnOceanESP3.cpp -> hardware/EnOceanESP3.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: } COMMON_COMMAND_TYPE;",
          "148: typedef enum {",
          "151:  RORG_4BS = 0xA5,",
          "154:  RORG_ADT = 0xA6,",
          "155:  RORG_SM_LRN_REQ = 0xC6,",
          "156:  RORG_SM_LRN_ANS = 0xC7,",
          "158:  RORG_SYS_EX = 0xC5,",
          "160: } ESP3_RORG;",
          "",
          "[Removed Lines]",
          "149:  RORG_RPS = 0xF6,",
          "150:  RORG_1BS = 0xD5,",
          "152:  RORG_VLD = 0xD2,",
          "153:  RORG_MSC = 0xD1,",
          "157:  RORG_SM_REC = 0xA7,",
          "159:  RORG_UTI = 0xD4",
          "",
          "[Added Lines]",
          "149:  RORG_ST = 0x30, //Secure telegram",
          "150:  RORG_ST_WE = 0x31, //Secure telegram with encapsulation",
          "151:  RORG_STT_FW = 0x35, //Secure Teach-In telegram for switch",
          "154:  RORG_SM_REC = 0xA7,",
          "155:  RORG_GP_SD = 0xB3, //Generic Profiles selective data",
          "158:  RORG_SM_ACK_SGNL = 0xD0, //Smart Acknowledge Signal telegram",
          "159:  RORG_MSC = 0xD1, // Manufacturer Specific Communicatio",
          "160:  RORG_VLD = 0xD2, // Variable length data telegram",
          "161:  RORG_UTI = 0xD4, //Universal Teach-In EEP based",
          "162:  RORG_1BS = 0xD5,",
          "163:  RORG_RPS = 0xF6,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf19d8bbb9fac08bc3ae93740cb46545d8e1826b",
      "candidate_info": {
        "commit_hash": "bf19d8bbb9fac08bc3ae93740cb46545d8e1826b",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/bf19d8bbb9fac08bc3ae93740cb46545d8e1826b",
        "files": [
          "hardware/MQTT.cpp",
          "hardware/XiaomiGateway.cpp",
          "main/EventSystem.cpp",
          "main/SQLHelper.cpp",
          "main/SQLHelper.h",
          "main/WebServer.cpp",
          "www/app/UserVariablesController.js"
        ],
        "message": "Corrected Add/Update/Check UserVariable code",
        "before_after_code_files": [
          "hardware/MQTT.cpp||hardware/MQTT.cpp",
          "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp",
          "main/EventSystem.cpp||main/EventSystem.cpp",
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/SQLHelper.h||main/SQLHelper.h",
          "main/WebServer.cpp||main/WebServer.cpp",
          "www/app/UserVariablesController.js||www/app/UserVariablesController.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hardware/MQTT.cpp||hardware/MQTT.cpp": [
          "File: hardware/MQTT.cpp -> hardware/MQTT.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:    std::string sVarName = result[0][0];",
          "395:    _eUsrVariableType varType = (_eUsrVariableType)atoi(result[0][1].c_str());",
          "398:   }",
          "399:   else if (szCommand == \"addlogmessage\")",
          "400:   {",
          "",
          "[Removed Lines]",
          "397:    m_sql.UpdateUserVariable(root[\"idx\"].asString(), sVarName, varType, varvalue, true);",
          "",
          "[Added Lines]",
          "397:    std::string errorMessage;",
          "398:    if (!m_sql.UpdateUserVariable(root[\"idx\"].asString(), sVarName, varType, varvalue, true, errorMessage))",
          "399:    {",
          "400:     _log.Log(LOG_ERROR, \"MQTT: Error setting uservariable (%s)\", errorMessage.c_str());",
          "401:    }",
          "",
          "---------------"
        ],
        "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp": [
          "File: hardware/XiaomiGateway.cpp -> hardware/XiaomiGateway.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "677:    }",
          "678:   }",
          "679:   else if (switchtype == STYPE_OnOff && Name == \"Xiaomi Gateway MP3\") {",
          "681:   }",
          "682:  }",
          "683:  else {",
          "",
          "[Removed Lines]",
          "680:    m_sql.AddUserVariable(\"XiaomiMP3\", USERVARTYPE_INTEGER, \"10001\");",
          "",
          "[Added Lines]",
          "680:    std::string errorMessage;",
          "681:    m_sql.AddUserVariable(\"XiaomiMP3\", USERVARTYPE_INTEGER, \"10001\", errorMessage);",
          "",
          "---------------"
        ],
        "main/EventSystem.cpp||main/EventSystem.cpp": [
          "File: main/EventSystem.cpp -> main/EventSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2308:     if (!result.empty())",
          "2309:     {",
          "2310:      std::vector<std::string> sd = result[0];",
          "2314:      }",
          "2315:     }",
          "2316:    }",
          "",
          "[Removed Lines]",
          "2311:      std::string updateResult = m_sql.UpdateUserVariable(variableNo, sd[0], (const _eUsrVariableType)atoi(sd[1].c_str()), doWhat, false);",
          "2312:      if (updateResult != \"OK\") {",
          "2313:       _log.Log(LOG_ERROR, \"EventSystem: Error updating variable %s: %s\", sd[0].c_str(), updateResult.c_str());",
          "",
          "[Added Lines]",
          "2311:      std::string errorMessage;",
          "2312:      if (!m_sql.UpdateUserVariable(variableNo, sd[0], (const _eUsrVariableType)atoi(sd[1].c_str()), doWhat, false, errorMessage))",
          "2313:      {",
          "2314:       _log.Log(LOG_ERROR, \"EventSystem: Error updating variable %s: %s\", sd[0].c_str(), errorMessage.c_str());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3560:    if (parseResult.fAfterSec < (1. / timer_resolution_hz / 2))",
          "3561:    {",
          "3565:     }",
          "3566:    }",
          "3567:    else",
          "",
          "[Removed Lines]",
          "3562:     std::string updateResult = m_sql.UpdateUserVariable(sd[0], variableName, (const _eUsrVariableType)atoi(sd[1].c_str()), variableValue, false);",
          "3563:     if (updateResult != \"OK\") {",
          "3564:      _log.Log(LOG_ERROR, \"EventSystem: Error updating variable %s: %s\", variableName.c_str(), updateResult.c_str());",
          "",
          "[Added Lines]",
          "3563:     std::string errorMessage;",
          "3564:     if (!m_sql.UpdateUserVariable(sd[0], variableName, (const _eUsrVariableType)atoi(sd[1].c_str()), variableValue, false, errorMessage))",
          "3565:     {",
          "3566:      _log.Log(LOG_ERROR, \"EventSystem: Error updating variable %s: %s\", variableName.c_str(), errorMessage.c_str());",
          "",
          "---------------"
        ],
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3356:      s_str.clear();",
          "3357:      s_str.str(\"\");",
          "3358:      s_str << itt->_idx;",
          "3362:      }",
          "3363:      else",
          "3364:      {",
          "",
          "[Removed Lines]",
          "3359:      std::string updateResult = UpdateUserVariable(s_str.str(), sd[0], (const _eUsrVariableType)atoi(sd[1].c_str()), itt->_sValue, (itt->_nValue == 0) ? false : true);",
          "3360:      if (updateResult != \"OK\") {",
          "3361:       _log.Log(LOG_ERROR, \"Error updating variable %s: %s\", sd[0].c_str(), updateResult.c_str());",
          "",
          "[Added Lines]",
          "3359:      std::string errorMessage;",
          "3360:      if (!UpdateUserVariable(s_str.str(), sd[0], (const _eUsrVariableType)atoi(sd[1].c_str()), itt->_sValue, (itt->_nValue == 0) ? false : true, errorMessage))",
          "3361:      {",
          "3362:       _log.Log(LOG_ERROR, \"Error updating variable %s: %s\", sd[0].c_str(), errorMessage.c_str());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7893: }",
          "7896: {",
          "7897:  safe_query(\"DELETE FROM UserVariables WHERE (ID=='%q')\", idx.c_str());",
          "7898:  if (m_bEnableEventSystem)",
          "7899:  {",
          "7900:   m_mainworker.m_eventsystem.GetCurrentUserVariables();",
          "7901:  }",
          "7903: }",
          "7906: {",
          "7915:  std::string szVarValue = CURLEncode::URLDecode(varvalue.c_str());",
          "7917:  safe_query(\"INSERT INTO UserVariables (Name, ValueType, Value) VALUES ('%q','%d','%q')\", varname.c_str(), eVartype, szVarValue.c_str());",
          "7919:  if (m_bEnableEventSystem)",
          "7920:   m_mainworker.m_eventsystem.GetCurrentUserVariables();",
          "7922: }",
          "7925: {",
          "7943:  std::string szLastUpdate = TimeToString(NULL, TF_DateTime);",
          "7944:  std::string szVarValue = CURLEncode::URLDecode(varvalue.c_str());",
          "7945:  safe_query(",
          "",
          "[Removed Lines]",
          "7895: std::string CSQLHelper::DeleteUserVariable(const std::string &idx)",
          "7902:  return \"OK\";",
          "7905: std::string CSQLHelper::AddUserVariable(const std::string &varname, const _eUsrVariableType eVartype, const std::string &varvalue)",
          "7907:  std::string dupeName = CheckUserVariableName(varname);",
          "7908:  if (dupeName != \"OK\")",
          "7909:   return dupeName;",
          "7911:  std::string formatError = CheckUserVariable(eVartype, varvalue);",
          "7912:  if (formatError != \"OK\")",
          "7913:   return formatError;",
          "7916:  std::vector<std::vector<std::string> > result;",
          "7921:  return \"OK\";",
          "7924: std::string CSQLHelper::UpdateUserVariable(const std::string &idx, const std::string &varname, const _eUsrVariableType eVartype, const std::string &varvalue, const bool eventtrigger)",
          "7926:  std::string formatError = CheckUserVariable(eVartype, varvalue);",
          "7927:  if (formatError != \"OK\")",
          "7928:   return formatError;",
          "7931:  std::vector<std::vector<std::string> > result;",
          "7932:  sprintf(szTmp, \"SELECT Value FROM UserVariables WHERE (Name == '%s')\",",
          "7933:   varname.c_str()",
          "7934:   );",
          "7935:  result = query(szTmp);",
          "7936:  if (!result.empty())",
          "7937:  {",
          "7938:   std::vector<std::string> sd = result[0];",
          "7939:   if (varvalue == sd[0])",
          "7940:    return \"New value same as current, not updating\";",
          "7941:  }",
          "",
          "[Added Lines]",
          "7896: void CSQLHelper::DeleteUserVariable(const std::string &idx)",
          "7905: bool CSQLHelper::AddUserVariable(const std::string &varname, const _eUsrVariableType eVartype, const std::string &varvalue, std::string &errorMessage)",
          "7907:  std::vector<std::vector<std::string> > result;",
          "7908:  result = safe_query(\"SELECT Name FROM UserVariables WHERE (Name=='%q')\", varname.c_str());",
          "7909:  if (!result.empty())",
          "7910:  {",
          "7911:   errorMessage = \"Variable with the same Name already exists!\";",
          "7912:   return false;",
          "7913:  }",
          "7915:  if (!CheckUserVariable(eVartype, varvalue, errorMessage))",
          "7916:   return false;",
          "7924:  return true;",
          "7927: bool CSQLHelper::UpdateUserVariable(const std::string &idx, const std::string &varname, const _eUsrVariableType eVartype, const std::string &varvalue, const bool eventtrigger, std::string &errorMessage)",
          "7929:  if (!CheckUserVariable(eVartype, varvalue, errorMessage))",
          "7930:   return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7957:    m_mainworker.m_eventsystem.SetEventTrigger(vId, m_mainworker.m_eventsystem.REASON_USERVARIABLE, 0);",
          "7958:   m_mainworker.m_eventsystem.UpdateUserVariable(vId, szVarValue, szLastUpdate);",
          "7959:  }",
          "7973: }",
          "7977: {",
          "7979:  if (varvalue.size() > 200) {",
          "7981:  }",
          "7982:  if (eVartype == USERVARTYPE_INTEGER) {",
          "",
          "[Removed Lines]",
          "7960:  return \"OK\";",
          "7961: }",
          "7963: std::string CSQLHelper::CheckUserVariableName(const std::string &varname)",
          "7964: {",
          "7965:  std::vector<std::vector<std::string> > result;",
          "7966:  result = safe_query(\"SELECT Name FROM UserVariables WHERE (Name=='%q')\",",
          "7967:   varname.c_str());",
          "7968:  if (!result.empty())",
          "7969:  {",
          "7970:   return \"Variable name already exists!\";",
          "7971:  }",
          "7972:  return \"OK\";",
          "7976: std::string CSQLHelper::CheckUserVariable(const _eUsrVariableType eVartype, const std::string &varvalue)",
          "7980:   return \"String exceeds maximum size\";",
          "",
          "[Added Lines]",
          "7949:  return true;",
          "7952: bool CSQLHelper::CheckUserVariable(const _eUsrVariableType eVartype, const std::string &varvalue, std::string &errorMessage)",
          "7956:   errorMessage = \"String exceeds maximum size\";",
          "7957:   return false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7986:   iss >> std::noskipws >> i;",
          "7987:   if (!(iss.eof() && !iss.fail()))",
          "7988:   {",
          "7990:   }",
          "7991:  }",
          "7992:  else if (eVartype == USERVARTYPE_FLOAT) {",
          "",
          "[Removed Lines]",
          "7989:    return \"Not a valid integer\";",
          "",
          "[Added Lines]",
          "7966:    errorMessage = \"Not a valid integer\";",
          "7967:    return false;",
          "7969:   return true;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7996:   iss >> std::noskipws >> f;",
          "7997:   if (!(iss.eof() && !iss.fail()))",
          "7998:   {",
          "8000:   }",
          "8001:  }",
          "8002:  else if (eVartype == USERVARTYPE_STRING) {",
          "8005:  }",
          "8006:  else if (eVartype == USERVARTYPE_DATE) {",
          "8008:   int d, m, y;",
          "8009:   if (!CheckDate(varvalue, d, m, y))",
          "8010:   {",
          "8012:   }",
          "8013:  }",
          "8014:  else if (eVartype == USERVARTYPE_TIME) {",
          "8016:   if (!CheckTime(varvalue))",
          "8018:  }",
          "8022: }",
          "8024: bool CSQLHelper::CheckDate(const std::string &sDate, int& d, int& m, int& y)",
          "",
          "[Removed Lines]",
          "7999:    return \"Not a valid float\";",
          "8004:   return \"OK\";",
          "8011:    return \"Not a valid date notation (DD/MM/YYYY)\";",
          "8017:    return \"Not a valid time notation (HH:MM)\";",
          "8021:  return \"OK\";",
          "",
          "[Added Lines]",
          "7978:    errorMessage = \"Not a valid float\";",
          "7979:    return false;",
          "7981:   return true;",
          "7985:   return true;",
          "7992:    errorMessage = \"Not a valid date notation (DD/MM/YYYY)\";",
          "7993:    return false;",
          "7995:   return true;",
          "8000:   {",
          "8001:    errorMessage = \"Not a valid time notation (HH:MM)\";",
          "8002:    return false;",
          "8003:   }",
          "8004:   return true;",
          "8007:  errorMessage = \"Unknown variable type!\";",
          "8008:  return false;",
          "",
          "---------------"
        ],
        "main/SQLHelper.h||main/SQLHelper.h": [
          "File: main/SQLHelper.h -> main/SQLHelper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:  bool safe_UpdateBlobInTableWithID(const std::string &Table, const std::string &Column, const std::string &sID, const std::string &BlobData);",
          "388:  bool DoesColumnExistsInTable(const std::string &columnname, const std::string &tablename);",
          "396:  uint64_t CreateDevice(const int HardwareID, const int SensorType, const int SensorSubType, std::string &devname, const unsigned long nid, const std::string &soptions);",
          "",
          "[Removed Lines]",
          "390:  std::string AddUserVariable(const std::string &varname, const _eUsrVariableType eVartype, const std::string &varvalue);",
          "391:  std::string UpdateUserVariable(const std::string &idx, const std::string &varname, const _eUsrVariableType eVartype, const std::string &varvalue, const bool eventtrigger);",
          "392:  std::string DeleteUserVariable(const std::string &idx);",
          "393:  std::string CheckUserVariable(const _eUsrVariableType eVartype, const std::string &varvalue);",
          "394:  std::string CheckUserVariableName(const std::string &varname);",
          "",
          "[Added Lines]",
          "390:  bool AddUserVariable(const std::string &varname, const _eUsrVariableType eVartype, const std::string &varvalue, std::string &errorMessage);",
          "391:  bool UpdateUserVariable(const std::string &idx, const std::string &varname, const _eUsrVariableType eVartype, const std::string &varvalue, const bool eventtrigger, std::string &errorMessage);",
          "392:  void DeleteUserVariable(const std::string &idx);",
          "393:  bool CheckUserVariable(const _eUsrVariableType eVartype, const std::string &varvalue, std::string &errorMessage);",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1872:    root[\"title\"] = \"GetDeviceValueOptions\";",
          "1873:   }",
          "1891:   void CWebServer::Cmd_AddUserVariable(WebEmSession & session, const request& req, Json::Value &root)",
          "1892:   {",
          "1893:    if (session.rights != 2)",
          "",
          "[Removed Lines]",
          "1876:   void CWebServer::Cmd_DeleteUserVariable(WebEmSession & session, const request& req, Json::Value &root)",
          "1877:   {",
          "1878:    if (session.rights != 2)",
          "1879:    {",
          "1880:     session.reply_status = reply::forbidden;",
          "1881:     return; //Only admin user allowed",
          "1882:    }",
          "1883:    std::string idx = request::findValue(&req, \"idx\");",
          "1884:    if (idx.empty())",
          "1885:     return;",
          "1887:    root[\"status\"] = m_sql.DeleteUserVariable(idx);",
          "1888:    root[\"title\"] = \"DeleteUserVariable\";",
          "1889:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1905:     )",
          "1906:     return;",
          "1909:    root[\"title\"] = \"AddUserVariable\";",
          "1910:   }",
          "1912:   void CWebServer::Cmd_UpdateUserVariable(WebEmSession & session, const request& req, Json::Value &root)",
          "",
          "[Removed Lines]",
          "1908:    root[\"status\"] = m_sql.AddUserVariable(variablename, (const _eUsrVariableType)atoi(variabletype.c_str()), variablevalue);",
          "",
          "[Added Lines]",
          "1894:    std::string errorMessage;",
          "1895:    if (!m_sql.AddUserVariable(variablename, (const _eUsrVariableType)atoi(variabletype.c_str()), variablevalue, errorMessage))",
          "1896:    {",
          "1897:     root[\"status\"] = \"ERR\";",
          "1898:     root[\"message\"] = errorMessage;",
          "1899:    }",
          "1900:    else {",
          "1901:     root[\"status\"] = \"OK\";",
          "1902:    }",
          "1903:   }",
          "1905:   void CWebServer::Cmd_DeleteUserVariable(WebEmSession & session, const request& req, Json::Value &root)",
          "1906:   {",
          "1907:    if (session.rights != 2)",
          "1908:    {",
          "1909:     session.reply_status = reply::forbidden;",
          "1910:     return; //Only admin user allowed",
          "1911:    }",
          "1912:    std::string idx = request::findValue(&req, \"idx\");",
          "1913:    if (idx.empty())",
          "1914:     return;",
          "1916:    m_sql.DeleteUserVariable(idx);",
          "1917:    root[\"status\"] = \"OK\";",
          "1918:    root[\"title\"] = \"DeleteUserVariable\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1948:    else if (variabletype != result[0][1])",
          "1949:     bTypeNameChanged = true; //new type",
          "1952:    root[\"title\"] = \"UpdateUserVariable\";",
          "1955:    {",
          "1958:    }",
          "1959:   }",
          "",
          "[Removed Lines]",
          "1951:    root[\"status\"] = m_sql.UpdateUserVariable(idx, variablename, (const _eUsrVariableType)atoi(variabletype.c_str()), variablevalue, !bTypeNameChanged);",
          "1954:    if (bTypeNameChanged)",
          "1956:     if (m_sql.m_bEnableEventSystem)",
          "1957:      m_mainworker.m_eventsystem.GetCurrentUserVariables();",
          "",
          "[Added Lines]",
          "1962:    std::string errorMessage;",
          "1963:    if (!m_sql.UpdateUserVariable(idx, variablename, (const _eUsrVariableType)atoi(variabletype.c_str()), variablevalue, !bTypeNameChanged, errorMessage))",
          "1965:     root[\"status\"] = \"ERR\";",
          "1966:     root[\"message\"] = errorMessage;",
          "1967:    }",
          "1968:    else {",
          "1969:     root[\"status\"] = \"OK\";",
          "1970:     if (bTypeNameChanged)",
          "1971:     {",
          "1972:      if (m_sql.m_bEnableEventSystem)",
          "1973:       m_mainworker.m_eventsystem.GetCurrentUserVariables();",
          "1974:     }",
          "",
          "---------------"
        ],
        "www/app/UserVariablesController.js||www/app/UserVariablesController.js": [
          "File: www/app/UserVariablesController.js -> www/app/UserVariablesController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         $('#uservariablesedittable #uservariabletype').val(\"0\");",
          "49:        }",
          "50:        else {",
          "52:        }",
          "53:       }",
          "54:      },",
          "",
          "[Removed Lines]",
          "51:         ShowNotify($.t(data.status), 2500, true);",
          "",
          "[Added Lines]",
          "51:         ShowNotify($.t(data.message), 2500, true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5487dcc518f1f3f5b9b5d250c527fc84fd967933",
      "candidate_info": {
        "commit_hash": "5487dcc518f1f3f5b9b5d250c527fc84fd967933",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/5487dcc518f1f3f5b9b5d250c527fc84fd967933",
        "files": [
          "webserver/WebsocketHandler.cpp",
          "webserver/cWebem.cpp"
        ],
        "message": "Renaming browser session and making sure it is found at the beginning of the header",
        "before_after_code_files": [
          "webserver/WebsocketHandler.cpp||webserver/WebsocketHandler.cpp",
          "webserver/cWebem.cpp||webserver/cWebem.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "webserver/WebsocketHandler.cpp||webserver/WebsocketHandler.cpp": [
          "File: webserver/WebsocketHandler.cpp -> webserver/WebsocketHandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     std::string scookie = cookie_header;",
          "99:     if (fpos != std::string::npos)",
          "100:     {",
          "101:      scookie = scookie.substr(fpos);",
          "",
          "[Removed Lines]",
          "98:     size_t fpos = scookie.find(\"SID=\");",
          "",
          "[Added Lines]",
          "98:     size_t fpos = scookie.find(\"DMZSID=\");",
          "",
          "---------------"
        ],
        "webserver/cWebem.cpp||webserver/cWebem.cpp": [
          "File: webserver/cWebem.cpp -> webserver/cWebem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1320:   void cWebemRequestHandler::send_remove_cookie(reply& rep)",
          "1321:   {",
          "1322:    std::stringstream sstr;",
          "1325:    sstr << \"; HttpOnly; Expires=\" << make_web_time(0);",
          "1326:    reply::add_header(&rep, \"Set-Cookie\", sstr.str(), false);",
          "",
          "[Removed Lines]",
          "1323:    sstr << \"SID=none\";",
          "",
          "[Added Lines]",
          "1323:    sstr << \"DMZSID=none\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1365:   void cWebemRequestHandler::send_cookie(reply& rep, const WebEmSession & session)",
          "1366:   {",
          "1367:    std::stringstream sstr;",
          "1369:    sstr << \"; HttpOnly; path=/; Expires=\" << make_web_time(session.expires);",
          "1370:    reply::add_header(&rep, \"Set-Cookie\", sstr.str(), false);",
          "1371:   }",
          "",
          "[Removed Lines]",
          "1368:    sstr << \"SID=\" << session.id << \"_\" << session.auth_token << \".\" << session.expires;",
          "",
          "[Added Lines]",
          "1368:    sstr << \"DMZSID=\" << session.id << \"_\" << session.auth_token << \".\" << session.expires;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1588:     std::string scookie = cookie_header;",
          "1591:     {",
          "1592:      scookie = scookie.substr(fpos);",
          "1593:      fpos = 0;",
          "",
          "[Removed Lines]",
          "1589:     size_t fpos = scookie.find(\"SID=\");",
          "1590:     if (fpos != std::string::npos)",
          "",
          "[Added Lines]",
          "1589:     size_t fpos = scookie.find(\"DMZSID=\");",
          "1590:     if (fpos == 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1931:     if (cookie != NULL)",
          "1932:     {",
          "1933:      std::string scookie = cookie;",
          "1935:      int upos = scookie.find(\"_\", fpos);",
          "1937:      {",
          "1938:       std::string sSID = scookie.substr(fpos + 4, upos - fpos - 4);",
          "1939:       _log.Debug(DEBUG_WEBSERVER, \"Web: Logout : remove session %s\", sSID.c_str());",
          "",
          "[Removed Lines]",
          "1934:      int fpos = scookie.find(\"SID=\");",
          "1936:      if ((fpos != std::string::npos) && (upos != std::string::npos))",
          "",
          "[Added Lines]",
          "1934:      int fpos = scookie.find(\"DMZSID=\");",
          "1936:      if ((fpos == 0) && (upos != std::string::npos))",
          "",
          "---------------"
        ]
      }
    }
  ]
}