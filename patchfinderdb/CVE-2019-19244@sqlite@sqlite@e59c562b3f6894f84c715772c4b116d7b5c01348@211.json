{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b008e4d744175052c219ab78db1ea3732682ceb3",
      "candidate_info": {
        "commit_hash": "b008e4d744175052c219ab78db1ea3732682ceb3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b008e4d744175052c219ab78db1ea3732682ceb3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/loadext.c",
          "test/without_rowid1.test",
          "test/without_rowid6.test",
          "test/without_rowid7.test"
        ],
        "message": "Fix some test script issues that come up with SQLITE_OMIT_VIRTUALTABLE builds.\n\nFossilOrigin-Name: 3934d2d08ee14d644dc01f967c10f219b76b172c963c90a7a8141f2b08a7d5bf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c",
          "test/without_rowid1.test||test/without_rowid1.test",
          "test/without_rowid6.test||test/without_rowid6.test",
          "test/without_rowid7.test||test/without_rowid7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e0d5d2640a92070967bc9fdf5c5b1653e41b9c04e04dcb70f18ead10f053aef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:   sqlite3_stmt_isexplain,",
          "464:   sqlite3_value_frombind,",
          "466:   sqlite3_drop_modules,",
          "467: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "468: #else",
          "469:   0,",
          "470: #endif",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: source $testdir/tester.tcl",
          "18: set testprefix without_rowid1",
          "20: # Create and query a WITHOUT ROWID table.",
          "21: #",
          "22: do_execsql_test without_rowid1-1.0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: proc do_execsql_test_if_vtab {tn sql {res {}}} {",
          "21:   ifcapable vtab { uplevel [list do_execsql_test $tn $sql $res] }",
          "22: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: integrity_check without_rowid1-1.0ic",
          "35:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "36: } {c 1 a 1 b 0 d 0}",
          "",
          "[Removed Lines]",
          "34: do_execsql_test without_rowid1-1.0ixi {",
          "",
          "[Added Lines]",
          "38: do_execsql_test_if_vtab without_rowid1-1.0ixi {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:   UPDATE t4 SET a = 'ABC';",
          "120:   SELECT * FROM t4;",
          "121: } {ABC def}",
          "123:   SELECT name, coll, key FROM pragma_index_xinfo('t4');",
          "124: } {a nocase 1 b BINARY 0}",
          "",
          "[Removed Lines]",
          "122: do_execsql_test 2.1.3 {",
          "",
          "[Added Lines]",
          "126: do_execsql_test_if_vtab 2.1.3 {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:   SELECT * FROM t4;",
          "136: } {xyz ABC}",
          "139:   SELECT name, coll, key FROM pragma_index_xinfo('t4');",
          "140: } {a nocase 1 b BINARY 0}",
          "",
          "[Removed Lines]",
          "138: do_execsql_test 2.2.3 {",
          "",
          "[Added Lines]",
          "142: do_execsql_test_if_vtab 2.2.3 {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "146:   UPDATE t5 SET a='abc', b='def';",
          "147: } {}",
          "150:   SELECT name, coll, key FROM pragma_index_xinfo('t5');",
          "151: } {b BINARY 1 a BINARY 1}",
          "",
          "[Removed Lines]",
          "149: do_execsql_test 2.3.2 {",
          "",
          "[Added Lines]",
          "153: do_execsql_test_if_vtab 2.3.2 {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "165:   SELECT * FROM t6 ORDER BY c;",
          "166: } {ABC def ghi ABC def ghi}",
          "169:   SELECT name, coll, key FROM pragma_index_xinfo('t6');",
          "170: } {b BINARY 1 a nocase 1 c BINARY 0}",
          "",
          "[Removed Lines]",
          "168: do_execsql_test 2.4.3 {",
          "",
          "[Added Lines]",
          "172: do_execsql_test_if_vtab 2.4.3 {",
          "",
          "---------------"
        ],
        "test/without_rowid6.test||test/without_rowid6.test": [
          "File: test/without_rowid6.test -> test/without_rowid6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "19: do_execsql_test without_rowid6-100 {",
          "20:   CREATE TABLE t1(a,b,c,d,e, PRIMARY KEY(a,b,c,a,b,c,d,a,b,c)) WITHOUT ROWID;",
          "21:   CREATE INDEX t1a ON t1(b, b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: proc do_execsql_test_if_vtab {tn sql {res {}}} {",
          "20:   ifcapable vtab { uplevel [list do_execsql_test $tn $sql $res] }",
          "21: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:   INSERT INTO t1(a,b,c,d,e) SELECT i, i+1000, printf('x%dy',i), 0, 0 FROM c;",
          "25:   ANALYZE;",
          "26: } {}",
          "28:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "29: } {a 1 b 1 c 1 d 1 e 0}",
          "30: do_execsql_test without_rowid6-110 {",
          "",
          "[Removed Lines]",
          "27: do_execsql_test without_rowid6-101 {",
          "",
          "[Added Lines]",
          "31: do_execsql_test_if_vtab without_rowid6-101 {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:   INSERT INTO t1(a,b,c) VALUES(1,8,3),(4,5,6),(7,2,9);",
          "55:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "56: } {4 1}",
          "58:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "59: } {b 1 a 0 c 0}",
          "60: do_execsql_test without_rowid6-210 {",
          "",
          "[Removed Lines]",
          "57: do_execsql_test without_rowid6-201 {",
          "",
          "[Added Lines]",
          "61: do_execsql_test_if_vtab without_rowid6-201 {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:   INSERT INTO t1(a,b,c) VALUES(1,8,3),(4,5,6),(7,2,9);",
          "112:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "113: } {4 1}",
          "115:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "116: } {b 1 c 1 a 0}",
          "117: do_execsql_test without_rowid6-510 {",
          "",
          "[Removed Lines]",
          "114: do_execsql_test without_rowid6-501 {",
          "",
          "[Added Lines]",
          "118: do_execsql_test_if_vtab without_rowid6-501 {",
          "",
          "---------------"
        ],
        "test/without_rowid7.test||test/without_rowid7.test": [
          "File: test/without_rowid7.test -> test/without_rowid7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix without_rowid7",
          "18: do_execsql_test 1.0 {",
          "19:   CREATE TABLE t1(a, b COLLATE nocase, PRIMARY KEY(a, a, b)) WITHOUT ROWID;",
          "20: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: proc do_execsql_test_if_vtab {tn sql {res {}}} {",
          "19:   ifcapable vtab { uplevel [list do_execsql_test $tn $sql $res] }",
          "20: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: do_execsql_test 2.2a {",
          "37:   PRAGMA index_info(t2);",
          "38: } {0 0 a 1 0 a}",
          "40:   SELECT *, '|' FROM pragma_index_info('t2');",
          "41: } {0 0 a | 1 0 a |}",
          "42: do_execsql_test 2.3a {",
          "43:   PRAGMA index_xinfo(t2);",
          "44: } {0 0 a 0 nocase 1 1 0 a 0 BINARY 1 2 1 b 0 BINARY 0}",
          "46:   SELECT *, '|' FROM pragma_index_xinfo('t2');",
          "47: } {0 0 a 0 nocase 1 | 1 0 a 0 BINARY 1 | 2 1 b 0 BINARY 0 |}",
          "",
          "[Removed Lines]",
          "39: do_execsql_test 2.2b {",
          "45: do_execsql_test 2.3b {",
          "",
          "[Added Lines]",
          "43: do_execsql_test_if_vtab 2.2b {",
          "49: do_execsql_test_if_vtab 2.3b {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c2321fdf38986cbf72e656aad204c2b10f5067d",
      "candidate_info": {
        "commit_hash": "7c2321fdf38986cbf72e656aad204c2b10f5067d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7c2321fdf38986cbf72e656aad204c2b10f5067d",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/vtab1.test",
          "test/vtabH.test"
        ],
        "message": "Update test cases so that they work with ICU enabled.\n\nFossilOrigin-Name: 408144a1832569ced8e04840f0dd36a3867405f36b13631b0f13c0f7b8a0fb01",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/vtab1.test||test/vtab1.test",
          "test/vtabH.test||test/vtabH.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 927cd7b4c52fae665e57fb6039c6829e339cff5ad5c405800cac3ee149ef5be1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/vtab1.test||test/vtab1.test": [
          "File: test/vtab1.test -> test/vtab1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1311:   CREATE VIRTUAL TABLE e6 USING echo(t6);",
          "1312: }",
          "1333: }",
          "1335: do_execsql_test 18.2.0 {  PRAGMA case_sensitive_like = ON }",
          "",
          "[Removed Lines]",
          "1314: foreach {tn sql res filter} {",
          "1315:   1.1 \"SELECT a FROM e6 WHERE b>'8James'\" {4 2 6 1 5}",
          "1316:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b > ?} 8James}",
          "1318:   1.2 \"SELECT a FROM e6 WHERE b>='8' AND b<'9'\" {3 4}",
          "1319:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ?} 8 9}",
          "1321:   1.3 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1322:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8J%}",
          "1324:   1.4 \"SELECT a FROM e6 WHERE b LIKE '8j%'\" {3 4}",
          "1325:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8j%}",
          "1327:   1.5 \"SELECT a FROM e6 WHERE b LIKE '8%'\" {3 4}",
          "1328:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8%}",
          "1329: } {",
          "1330:   set echo_module {}",
          "1331:   do_execsql_test 18.$tn.1 $sql $res",
          "1332:   do_test         18.$tn.2 { lrange $::echo_module 2 end } $filter",
          "",
          "[Added Lines]",
          "1314: ifcapable !icu {",
          "1315:   foreach {tn sql res filter} {",
          "1316:     1.1 \"SELECT a FROM e6 WHERE b>'8James'\" {4 2 6 1 5}",
          "1317:       {xFilter {SELECT rowid, a, b FROM 't6' WHERE b > ?} 8James}",
          "1319:     1.2 \"SELECT a FROM e6 WHERE b>='8' AND b<'9'\" {3 4}",
          "1320:       {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ?} 8 9}",
          "1322:     1.3 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1323:       {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8J%}",
          "1325:     1.4 \"SELECT a FROM e6 WHERE b LIKE '8j%'\" {3 4}",
          "1326:       {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8j%}",
          "1328:     1.5 \"SELECT a FROM e6 WHERE b LIKE '8%'\" {3 4}",
          "1329:       {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8%}",
          "1330:   } {",
          "1331:     set echo_module {}",
          "1332:     do_execsql_test 18.$tn.1 $sql $res",
          "1333:     do_test         18.$tn.2 { lrange $::echo_module 2 end } $filter",
          "1334:   }",
          "",
          "---------------"
        ],
        "test/vtabH.test||test/vtabH.test": [
          "File: test/vtabH.test -> test/vtabH.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   CREATE VIRTUAL TABLE e6 USING echo(t6);",
          "31: }",
          "56:   }",
          "63: }",
          "",
          "[Removed Lines]",
          "33: foreach {tn sql expect} {",
          "34:   1 \"SELECT * FROM e6 WHERE b LIKE '8abc'\" {",
          "35:     xBestIndex",
          "36:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "37:     xFilter",
          "38:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "39:        8ABC 8abd 8abc",
          "40:   }",
          "42:   2 \"SELECT * FROM e6 WHERE b GLOB '8abc'\" {",
          "43:      xBestIndex",
          "44:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "45:      xFilter",
          "46:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "47:        8abc 8abd 8abc",
          "48:   }",
          "49:   3 \"SELECT * FROM e6 WHERE b LIKE '8e/'\" {",
          "50:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b like ?}",
          "51:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8e/",
          "52:   }",
          "53:   4 \"SELECT * FROM e6 WHERE b GLOB '8e/'\" {",
          "54:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b glob ?}",
          "55:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b glob ?} 8e/",
          "57: } {",
          "58:   do_test 1.$tn {",
          "59:     set echo_module {}",
          "60:     execsql $sql",
          "61:     set ::echo_module",
          "62:   } [list {*}$expect]",
          "",
          "[Added Lines]",
          "33: ifcapable !icu {",
          "34:   foreach {tn sql expect} {",
          "35:     1 \"SELECT * FROM e6 WHERE b LIKE '8abc'\" {",
          "36:       xBestIndex",
          "37:          {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "38:       xFilter",
          "39:          {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "40:          8ABC 8abd 8abc",
          "41:     }",
          "43:     2 \"SELECT * FROM e6 WHERE b GLOB '8abc'\" {",
          "44:        xBestIndex",
          "45:          {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "46:        xFilter",
          "47:          {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "48:          8abc 8abd 8abc",
          "49:     }",
          "50:     3 \"SELECT * FROM e6 WHERE b LIKE '8e/'\" {",
          "51:       xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b like ?}",
          "52:       xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8e/",
          "53:     }",
          "54:     4 \"SELECT * FROM e6 WHERE b GLOB '8e/'\" {",
          "55:       xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b glob ?}",
          "56:       xFilter {SELECT rowid, a, b FROM 't6' WHERE b glob ?} 8e/",
          "57:     }",
          "58:   } {",
          "59:     do_test 1.$tn {",
          "60:       set echo_module {}",
          "61:       execsql $sql",
          "62:       set ::echo_module",
          "63:     } [list {*}$expect]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b25a214decbb2a4db02a99f0a5aa28e0350c3d8c",
      "candidate_info": {
        "commit_hash": "b25a214decbb2a4db02a99f0a5aa28e0350c3d8c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b25a214decbb2a4db02a99f0a5aa28e0350c3d8c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Extend windowCodeStep() to handle any ROWS PRECEDING/FOLLOWING frame specification.\n\nFossilOrigin-Name: af0ea1363548461b2aad8fd54ee3f2f616111dcae2d6480f5294da44c87a0a5d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9b4d561f68febdab6624d8c567fb4357bf67dda500664cf708d16a76f37b8ec1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1871:   int addrIfStart;",
          "1872:   int addrGosubFlush;",
          "1873:   int addrInteger;",
          "1876:   int reg = pParse->nMem+1;",
          "1877:   int regRecord = reg+nSub;",
          "",
          "[Removed Lines]",
          "1874:   int addrGoto2;",
          "",
          "[Added Lines]",
          "1875:   int addrShortcut = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1931:         reg+pMWin->nBufferCol, pMWin->regPart, pMWin->pPartition->nExpr-1",
          "1932:     );",
          "1933:   }",
          "1937:   regArg = windowInitAccum(pParse, pMWin);",
          "1940:   sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "1941:   windowCheckIntValue(pParse, regStart, 0);",
          "1942:   sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "1943:   windowCheckIntValue(pParse, regEnd, 1);",
          "1944:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1947:   sqlite3VdbeJumpHere(v, addrIf);",
          "1959:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1963:   sqlite3WhereEnd(pWInfo);",
          "1966:   if( pMWin->pPartition ){",
          "1967:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "1968:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "1969:   }",
          "1984:   sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "1985:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "",
          "[Removed Lines]",
          "1934:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);   sqlite3VdbeChangeP5(v, 1);",
          "1935:   sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1); sqlite3VdbeChangeP5(v, 1);",
          "1936:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, 1);",
          "1939:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "1948:   sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "1949:   addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1950:   windowAggFinal(pParse, pMWin, 0);",
          "1951:   sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+1);",
          "1952:   windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1953:   addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1954:   sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1955:   windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "1956:   sqlite3VdbeJumpHere(v, addrIfStart);",
          "1957:   sqlite3VdbeJumpHere(v, addrIfEnd);",
          "1960:   windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "1971:   sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+2);",
          "1972:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1973:   windowAggFinal(pParse, pMWin, 0);",
          "1974:   windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1975:   addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1976:   sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+2);",
          "1977:   addrGoto2 = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1978:   windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "1979:   sqlite3VdbeJumpHere(v, addrIfStart);",
          "1980:   sqlite3VdbeAddOp2(v, OP_Goto, 0, addrGoto-1);",
          "1981:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1982:   sqlite3VdbeJumpHere(v, addrGoto2);",
          "",
          "[Added Lines]",
          "1943:   if( pMWin->eStart==TK_FOLLOWING || pMWin->eEnd==TK_PRECEDING ){",
          "1944:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "1945:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "1946:     windowAggFinal(pParse, pMWin, 0);",
          "1947:     sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1);",
          "1948:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1949:     sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "1950:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1951:     sqlite3VdbeJumpHere(v, addrGe);",
          "1952:   }",
          "1953:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1954:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "1955:   }",
          "1957:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);   sqlite3VdbeChangeP5(v, 1);",
          "1958:   sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1); sqlite3VdbeChangeP5(v, 1);",
          "1959:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, 1); sqlite3VdbeChangeP5(v, 1);",
          "1961:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "1967:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1968:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1969:     windowAggFinal(pParse, pMWin, 0);",
          "1970:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+1);",
          "1971:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1972:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "1974:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1975:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1976:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "1977:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "1978:   }else",
          "1979:   if( pMWin->eEnd==TK_PRECEDING ){",
          "1980:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1981:     sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "1982:     windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "1983:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "1985:     windowAggFinal(pParse, pMWin, 0);",
          "1986:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+1);",
          "1987:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1989:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1990:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1991:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "1992:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "1993:   }else{",
          "1994:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1995:     windowAggFinal(pParse, pMWin, 0);",
          "1996:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+1);",
          "1997:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1998:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1999:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "2000:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "2001:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "2002:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2003:   }",
          "2006:   if( pMWin->eEnd!=TK_PRECEDING ){",
          "2007:     sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "2008:     windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "2009:   }",
          "2012:   if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2022:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2023:     int addrBreak;",
          "2024:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2025:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+2);",
          "2026:     addrBreak = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2027:     windowAggFinal(pParse, pMWin, 0);",
          "2028:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2029:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2031:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "2032:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+2);",
          "2033:     sqlite3VdbeAddOp0(v, OP_Goto);",
          "2034:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "2035:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "2036:     sqlite3VdbeJumpHere(v, addrIfStart+2);",
          "2038:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrIfEnd);",
          "2039:     sqlite3VdbeJumpHere(v, addrBreak);",
          "2040:   }else{",
          "2041:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+2);",
          "2042:     addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2043:     if( pMWin->eEnd==TK_PRECEDING ){",
          "2044:       addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2045:       sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "2046:       windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "2047:       sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2048:       windowAggFinal(pParse, pMWin, 0);",
          "2049:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2050:     }else{",
          "2051:       windowAggFinal(pParse, pMWin, 0);",
          "2052:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2053:       addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "2054:       sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "2055:       windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "2056:       sqlite3VdbeJumpHere(v, addrIfStart);",
          "2057:       sqlite3VdbeAddOp2(v, OP_Goto, 0, addrGoto-1);",
          "2058:     }",
          "2059:     sqlite3VdbeJumpHere(v, addrGoto);",
          "2060:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2465:         break;",
          "2466:       }",
          "2467:     }",
          "2469:       VdbeModuleComment((pParse->pVdbe, \"Begin RowExprStep()\"));",
          "2470:       windowCodeRowExprStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2471:       VdbeModuleComment((pParse->pVdbe, \"End RowExprStep()\"));",
          "",
          "[Removed Lines]",
          "2468:     if( bCache || pMWin->eStart!=TK_PRECEDING || pMWin->eEnd!=TK_FOLLOWING ){",
          "",
          "[Added Lines]",
          "2547:     if( bCache",
          "2548:     || (pMWin->eStart!=TK_PRECEDING && pMWin->eStart!=TK_FOLLOWING)",
          "2549:     || (pMWin->eEnd!=TK_FOLLOWING && pMWin->eEnd!=TK_PRECEDING)",
          "2550:     ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6712f363895e8634c396aae55a1257500337c34",
      "candidate_info": {
        "commit_hash": "d6712f363895e8634c396aae55a1257500337c34",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d6712f363895e8634c396aae55a1257500337c34",
        "files": [
          "ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix an assert() failure in fts5 that could occur when processing a corrupt database.\n\nFossilOrigin-Name: f158c048be1dc7c80d38787a20495caa55b86416967efd57f4888548d42b4819",
        "before_after_code_files": [
          "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c": [
          "File: ext/fts5/fts5_buffer.c -> ext/fts5/fts5_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:       fts5FastGetVarint32(a, i, iVal);",
          "187:       iOff = ((i64)iVal) << 32;",
          "188:       fts5FastGetVarint32(a, i, iVal);",
          "189:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189:       if( iVal<2 ){",
          "192:         return 1;",
          "193:       }",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4965:         fts5BufferSafeAppendBlob(&out, i1.aPoslist, i1.nPoslist+i1.nSize);",
          "4966:         fts5DoclistIterNext(&i1);",
          "4967:         if( i1.aPoslist==0 ) break;",
          "4968:       }",
          "4969:       else if( i2.iRowid!=i1.iRowid ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4968:         assert( out.n<=((i1.aPoslist - p1->p) + (i2.aPoslist - p2->p) + 9) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4972:         fts5BufferSafeAppendBlob(&out, i2.aPoslist, i2.nPoslist+i2.nSize);",
          "4973:         fts5DoclistIterNext(&i2);",
          "4974:         if( i2.aPoslist==0 ) break;",
          "4975:       }",
          "4976:       else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4976:         assert( out.n<=((i1.aPoslist - p1->p) + (i2.aPoslist - p2->p) + 9) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5045:         fts5DoclistIterNext(&i2);",
          "5046:         assert( out.n<=(p1->n+p2->n+9) );",
          "5047:         if( i1.aPoslist==0 || i2.aPoslist==0 ) break;",
          "5048:       }",
          "5049:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5050:         assert( out.n<=((i1.aPoslist - p1->p) + (i2.aPoslist - p2->p) + 9) );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: sqlite3_fts5_may_be_corrupt 1",
          "26: database_may_be_corrupt",
          "28: proc create_t1 {} {",
          "29:   expr srand(0)",
          "30:   db func rnddoc fts5_rnddoc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: if 0 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8338:   SELECT * FROM t1('t*');",
          "8339: } {{} {} {} {} {} {}}",
          "8341: sqlite3_fts5_may_be_corrupt 0",
          "8342: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8343: }",
          "8345: #-------------------------------------------------------------------------",
          "8346: do_test 59.0 {",
          "8347:   sqlite3 db {}",
          "8348:   db deserialize [decode_hexdb {",
          "8349: .open --hexdb",
          "8350: | size 32768 pagesize 4096 filename crash-96b136358d01ec.db",
          "8351: | page 1 offset 0",
          "8352: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "8353: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 00   .....@  ........",
          "8354: |     96: 00 00 00 00 0d 0f c7 00 07 0d 92 00 0f 8d 0f 36   ...............6",
          "8355: |    112: 0e cb 0e 6b 0e 0e 0d b6 0d 92 00 00 00 00 00 00   ...k............",
          "8356: |   3472: 00 00 22 08 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "8357: |   3488: 32 74 32 08 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "8358: |   3504: 20 74 32 28 78 29 56 07 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "8359: |   3520: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "8360: |   3536: 6f 6e 66 69 67 07 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "8361: |   3552: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "8362: |   3568: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "8363: |   3584: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 06    WITHOUT ROWID[.",
          "8364: |   3600: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "8365: |   3616: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "8366: |   3632: 06 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "8367: |   3648: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "8368: |   3664: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "8369: |   3680: 59 2c 20 73 7a 20 42 4c 4f 42 29 5e 05 07 17 21   Y, sz BLOB)^...!",
          "8370: |   3696: 21 01 81 07 74 61 62 6c 65 74 31 5f 63 6f 6e 74   !...tablet1_cont",
          "8371: |   3712: 65 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 05 43 52   entt1_content.CR",
          "8372: |   3728: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63   EATE TABLE 't1_c",
          "8373: |   3744: 6f 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47   ontent'(id INTEG",
          "8374: |   3760: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   ER PRIMARY KEY,",
          "8375: |   3776: 63 30 2c 20 63 31 2c d6 63 32 29 69 04 07 17 19   c0, c1,.c2)i....",
          "8376: |   3792: 19 01 81 2d 74 61 62 6c 65 74 31 5f 69 64 78 74   ...-tablet1_idxt",
          "8377: |   3808: 31 5f 69 64 78 04 43 52 45 41 54 45 20 54 41 42   1_idx.CREATE TAB",
          "8378: |   3824: 4c 45 20 27 74 31 5f 69 64 78 27 28 73 65 67 69   LE 't1_idx'(segi",
          "8379: |   3840: 64 2c 20 74 65 72 6d 2c 20 70 67 6e 6f 2c 20 50   d, term, pgno, P",
          "8380: |   3856: 52 49 4d 41 52 59 20 4b 45 59 28 73 65 67 69 64   RIMARY KEY(segid",
          "8381: |   3872: 2c 20 74 65 72 6d 29 29 20 57 49 54 48 4f 55 54   , term)) WITHOUT",
          "8382: |   3888: 20 52 4f 57 49 44 55 03 07 17 1b 1b 01 81 01 74    ROWIDU........t",
          "8383: |   3904: 61 62 6c 65 74 31 5f 64 61 74 61 74 31 5f 64 61   ablet1_datat1_da",
          "8384: |   3920: 74 61 03 43 52 45 41 54 45 20 54 41 42 4c 45 20   ta.CREATE TABLE",
          "8385: |   3936: 27 74 31 5f 64 61 74 61 27 28 69 64 20 49 4e 54   't1_data'(id INT",
          "8386: |   3952: 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59   EGER PRIMARY KEY",
          "8387: |   3968: 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42 29 38 02 06   , block BLOB)8..",
          "8388: |   3984: 17 11 11 08 5f 74 61 62 6c 65 74 31 74 31 43 52   ...._tablet1t1CR",
          "8389: |   4000: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "8390: |   4016: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 35   LE t1 USING fts5",
          "8391: |   4032: 28 61 2c 62 2c 63 29 00 00 00 00 00 00 00 00 00   (a,b,c).........",
          "8392: | page 3 offset 8192",
          "8393: |      0: 0d 00 00 00 03 0c 93 ff 0f e6 0f ef 0c 94 00 00   ................",
          "8394: |   3216: 00 00 00 00 86 4a 84 80 80 80 80 01 04 00 8d 18   .....J..........",
          "8395: |   3232: 00 00 03 2b 02 30 30 01 02 06 01 02 06 01 02 06   ...+.00.........",
          "8396: |   3248: 1f 02 03 01 02 03 01 02 03 01 08 32 31 31 36 30   ...........21160",
          "8397: |   3264: 36 30 39 01 02 07 01 02 07 01 02 07 01 01 33 f1   609...........3.",
          "8398: |   3280: 02 05 01 02 05 01 02 05 01 01 35 01 02 03 01 02   ..........5.....",
          "8399: |   3296: 04 01 02 04 02 07 30 30 30 30 30 30 30 1c 02 3d   ......0000000..=",
          "8400: |   3312: 01 02 04 01 02 04 01 06 62 69 6e 61 72 79 03 06   ........binary..",
          "8401: |   3328: 01 02 02 03 06 01 01 f2 03 06 4e 02 02 03 06 01   ..........N.....",
          "8402: |   3344: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "8403: |   3360: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "8404: |   3376: 03 06 01 02 02 03 06 01 02 02 01 08 63 6f 6d 70   ............comp",
          "8405: |   3392: 69 6c 65 72 01 02 02 01 02 02 01 02 02 01 06 64   iler...........d",
          "8406: |   3408: 62 73 74 61 74 07 02 03 01 02 13 01 02 03 02 04   bstat...........",
          "8407: |   3424: 65 62 75 67 04 02 02 01 02 02 01 02 02 01 07 65   ebug...........e",
          "8408: |   3440: 6e 61 62 6c 65 07 02 02 01 02 02 01 02 02 01 02   nable...........",
          "8409: |   3456: 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02 02   ................",
          "8410: |   3472: 01 02 02 01 02 02 01 02 01 f1 02 02 01 02 02 01   ................",
          "8411: |   3488: 02 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02   ................",
          "8412: |   3504: 02 01 02 02 02 08 78 74 65 6e 73 69 6f 6e 1f 02   ......xtension..",
          "8413: |   3520: 04 01 02 04 01 02 04 01 04 66 74 73 34 0a 02 03   .........fts4...",
          "8414: |   3536: 01 02 03 01 02 03 04 01 25 0d 02 03 01 02 03 01   ........%.......",
          "8415: |   3552: 02 03 01 03 67 63 63 01 02 03 01 02 03 01 02 03   ....gcc.........",
          "8416: |   3568: 02 06 65 6f 70 6f 6c 79 0f f2 03 01 02 03 01 02   ..eopoly........",
          "8417: |   3584: 03 01 05 6a 73 6f 6e 31 13 02 03 01 02 03 01 02   ...json1........",
          "8418: |   3600: 03 01 04 6c 6f 61 64 1f 02 03 01 02 03 01 02 03   ...load.........",
          "8419: |   3616: 00 03 6d 61 78 1c 02 02 01 02 02 01 02 02 02 05   ..max...........",
          "8420: |   3632: 65 6d 6f 72 79 1c 02 03 01 02 03 01 02 03 04 04   emory...........",
          "8421: |   3648: 73 79 73 35 16 02 03 01 02 03 01 02 03 01 06 6e   sys5...........n",
          "8422: |   3664: 6f 63 61 73 65 02 06 01 02 02 13 06 00 f2 02 03   ocase...........",
          "8423: |   3680: 06 01 02 02 13 06 01 02 02 03 06 01 02 02 03 06   ................",
          "8424: |   3696: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "8425: |   3712: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "8426: |   3728: 02 01 04 6f 6d 69 74 1f 02 02 01 02 02 01 02 02   ...omit.........",
          "8427: |   3744: 01 0a 22 74 72 65 65 19 02 03 01 02 03 01 02 03   ...tree.........",
          "8428: |   3760: 04 02 69 6d 01 06 01 02 02 03 06 01 02 02 03 06   ..im............",
          "8429: |   3776: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "8430: |   3792: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "8431: |   3808: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "8432: |   3824: 01 0a 74 68 72 65 61 64 73 61 66 65 22 02 02 01   ..threadsafe....",
          "8433: |   3840: 02 02 01 02 02 01 04 76 74 61 62 07 02 04 01 02   .......vtab.....",
          "8434: |   3856: 04 01 02 04 01 01 78 01 06 01 01 02 01 06 01 01   ......x.........",
          "8435: |   3872: 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02   ................",
          "8436: |   3888: 01 06 01 11 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "8437: |   3904: 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "8438: |   3920: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "8439: |   3936: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "8440: |   3952: 02 01 06 01 01 01 f1 06 01 01 02 ad 06 01 01 02   ................",
          "8441: |   3968: 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "8442: |   3984: 06 01 01 01 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "8443: |   4000: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "8444: |   4016: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "8445: |   4032: 02 01 06 01 01 02 01 06 01 01 02 04 15 13 0c 0c   ................",
          "8446: |   4048: 12 44 13 11 0f 47 13 0e fc 0e 11 10 0f 0e 10 0f   .D...G..........",
          "8447: |   4064: 44 0f 10 40 15 0f 07 01 03 00 14 24 5a 24 24 0f   D..@.......$Z$$.",
          "8448: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "8449: | page 4 offset 12288",
          "8450: |      0: 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "8451: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "8452: | page 5 offset 16384",
          "8453: |      0: 0d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "8454: |   3072: 00 00 00 00 00 00 00 00 00 00 18 24 05 00 25 0f   ...........$..%.",
          "8455: |   3088: 19 54 48 52 45 41 44 53 41 46 45 3d 30 58 42 49   .THREADSAFE=0XBI",
          "8456: |   3104: 4e 41 52 59 18 23 05 00 25 0f 19 54 48 52 45 41   NARY.#..%..THREA",
          "8457: |   3120: 44 53 41 46 45 3d 30 58 4e 4f 43 41 53 45 17 8f   DSAFE=0XNOCASE..",
          "8458: |   3136: 05 00 25 0f 17 54 48 52 45 41 44 53 41 46 45 3d   ..%..THREADSAFE=",
          "8459: |   3152: 30 58 52 54 52 49 4d 1f 21 05 00 33 0f 19 45 ed   0XRTRIM.!..3..E.",
          "8460: |   3168: 49 54 20 4c 4f 41 44 21 45 58 54 45 4e 53 49 4f   IT LOAD!EXTENSIO",
          "8461: |   3184: 4e 58 42 49 4e 41 52 59 1f 20 05 00 33 0f 19 4f   NXBINARY. ..3..O",
          "8462: |   3200: 4d 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 5a 29   MIT LOAD EXTENZ)",
          "8463: |   3216: 4f 4e 58 4e 4f 43 41 53 45 1e 1f 05 00 33 0f 17   ONXNOCASE....3..",
          "8464: |   3232: 4f 4d 59 54 20 4c 4f 41 44 20 45 58 54 45 4e 53   OMYT LOAD EXTENS",
          "8465: |   3248: 49 4f 4e 58 52 54 56 a9 4d 1f 1e 05 00 33 0f 19   IONXRTV.M....3..",
          "8466: |   3264: 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30 30 30   MAX MEMORY=50000",
          "8467: |   3280: 30 30 30 57 42 49 4e 31 52 59 1f 1d 05 00 33 0f   000WBIN1RY....3.",
          "8468: |   3296: 19 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30 30   .MAX MEMORY=5000",
          "8469: |   3312: 30 30 30 30 58 4e 4f 43 41 53 45 1e 1c 05 00 32   0000XNOCASE....2",
          "8470: |   3328: 0f 17 4e 41 58 20 4d 45 4d 4f 52 59 2d 35 30 30   ..NAX MEMORY-500",
          "8471: |   3344: 30 30 30 30 30 58 52 54 52 49 4d 18 1b 05 00 25   00000XRTRIM....%",
          "8472: |   3360: 0f 19 45 4e 41 42 4c 45 20 52 54 52 45 45 58 42   ..ENABLE RTREEXB",
          "8473: |   3376: 49 4e 41 52 59 18 1a 05 00 25 0f 19 45 4e 41 42   INARY....%..ENAB",
          "8474: |   3392: 4c 45 20 52 54 52 45 45 59 4e 4f 43 41 53 45 17   LE RTREEYNOCASE.",
          "8475: |   3408: 19 66 00 25 0f 17 45 4e 41 42 4c 45 20 52 54 52   .f.%..ENABLE RTR",
          "8476: |   3424: 45 45 58 52 54 52 49 4d 1a 18 05 00 29 0f 19 45   EEXRTRIM....)..E",
          "8477: |   3440: 4e 41 42 4c 45 20 4d 45 4d 53 59 53 35 58 42 49   NABLE MEMSYS5XBI",
          "8478: |   3456: 4e 41 52 59 1a 17 05 00 29 0f 19 45 4e 41 42 4c   NARY....)..ENABL",
          "8479: |   3472: 45 20 4d 45 4d 53 59 53 35 58 4e 4f 43 41 53 45   E MEMSYS5XNOCASE",
          "8480: |   3488: 19 16 05 00 29 0f 17 45 4e 41 42 4c 45 20 4d 45   ....)..ENABLE ME",
          "8481: |   3504: 4d 53 59 76 35 58 52 54 52 49 4d 18 15 05 10 25   MSYv5XRTRIM....%",
          "8482: |   3520: 0f 19 45 4e 40 42 4c 45 20 4a 53 4f 4e 31 58 42   ..EN@BLE JSON1XB",
          "8483: |   3536: 49 4e 41 52 59 18 14 05 00 25 0f 19 45 4e 41 42   INARY....%..ENAB",
          "8484: |   3552: 4c 45 20 4a 53 4f 4e 32 58 4e 4f 43 41 53 45 17   LE JSON2XNOCASE.",
          "8485: |   3568: 13 05 00 25 0f 17 45 4e 41 42 4c 45 20 4a 53 4f   ...%..ENABLE JSO",
          "8486: |   3584: 4e 31 58 52 54 52 49 4d 1a 12 05 00 29 0f 19 45   N1XRTRIM....)..E",
          "8487: |   3600: 4e 41 42 4c 45 20 47 45 4f 50 4f 4c 59 58 42 49   NABLE GEOPOLYXBI",
          "8488: |   3616: 4e 41 52 59 1a 11 05 00 29 0f 19 45 5f 81 42 4c   NARY....)..E_.BL",
          "8489: |   3632: 45 20 47 45 4f 50 4f 4c 59 58 4e 4f 43 51 53 45   E GEOPOLYXNOCQSE",
          "8490: |   3648: 19 10 05 00 29 0f 17 45 4e 41 42 4c 45 20 47 45   ....)..ENABLE GE",
          "8491: |   3664: 4f 50 4f 4c 59 58 52 54 52 49 4d 17 0f 05 00 23   OPOLYXRTRIM....#",
          "8492: |   3680: 0f 1a 45 4e 41 42 4c 45 20 56 54 43 35 58 42 49   ..ENABLE VTC5XBI",
          "8493: |   3696: 4e 41 52 59 17 0e 05 00 23 0f 19 45 4e 41 42 4c   NARY....#..ENABL",
          "8494: |   3712: 45 20 46 54 53 35 48 4e 4f 43 41 53 45 16 1d 05   E FTS5HNOCASE...",
          "8495: |   3728: 00 23 0f a4 45 4e 41 42 4c 45 20 46 54 53 35 58   .#..ENABLE FTS5X",
          "8496: |   3744: 52 54 52 49 4d 17 0c 05 00 23 0f 19 45 4e 41 42   RTRIM....#..ENAB",
          "8497: |   3760: 4c 45 20 46 55 53 34 58 42 49 4e 41 52 59 17 0b   LE FUS4XBINARY..",
          "8498: |   3776: 05 00 23 0f 19 45 4e 41 42 4c 45 20 46 54 53 34   ..#..ENABLE FTS4",
          "8499: |   3792: 57 4e 4f 43 41 53 45 16 0a 05 00 23 0f 17 45 4e   WNOCASE....#..EN",
          "8500: |   3808: 41 42 4c 45 20 46 54 53 34 05 52 54 52 49 4d 1e   ABLE FTS4.RTRIM.",
          "8501: |   3824: 09 05 00 31 0f 19 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "8502: |   3840: 54 41 54 20 56 54 41 42 58 42 49 4e 41 52 59 1e   TAT VTABXBINARY.",
          "8503: |   3856: 08 05 00 31 0f 19 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "8504: |   3872: 54 41 54 20 56 54 41 42 58 4e 4f 43 41 53 45 1d   TAT VTABXNOCASE.",
          "8505: |   3888: 07 05 00 31 0f 17 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "8506: |   3904: 54 41 54 20 56 54 41 42 58 52 54 52 49 4d 11 06   TAT VTABXRTRIM..",
          "8507: |   3920: 05 00 17 0f 19 44 45 42 55 47 58 42 49 4e 41 52   .....DEBUGXBINAR",
          "8508: |   3936: 59 11 05 05 00 17 0f 19 44 45 42 55 47 58 4e 4f   Y.......DEBUGXNO",
          "8509: |   3952: 43 41 53 45 10 04 05 00 17 0f 17 44 45 42 55 47   CASE.......DEBUG",
          "8510: |   3968: 58 52 54 52 49 4d 27 03 05 00 43 0f 19 43 4f 4d   XRTRIM'...C..COM",
          "8511: |   3984: 50 49 4c 45 52 3d 67 63 63 2d 35 2e 34 2e 30 20   PILER=gcc-5.4.0",
          "8512: |   4000: 32 30 31 36 30 36 30 39 58 42 49 4e 41 52 59 27   20160609XBINARY'",
          "8513: |   4016: 02 05 00 43 0f 19 43 4f 4d 50 49 4c 45 52 3f 87   ...C..COMPILER?.",
          "8514: |   4032: 63 63 2d 35 2e 34 2e 30 20 32 30 31 36 30 36 30   cc-5.4.0 2016060",
          "8515: |   4048: 39 58 4e 4f 43 41 53 45 26 01 05 00 43 0f 17 43   9XNOCASE&...C..C",
          "8516: |   4064: 45 0d 60 59 4c 45 52 3d 67 63 63 2d 35 2e 34 00   E.`YLER=gcc-5.4.",
          "8517: | page 6 offset 20480",
          "8518: |   3808: 06 24 03 00 12 02 01 01 06 23 03 00 12 02 01 01   .$.......#......",
          "8519: |   3824: 06 22 03 01 12 02 01 01 06 21 03 00 12 03 01 01   .........!......",
          "8520: |   3840: 06 20 03 00 12 03 01 01 06 1f 03 00 12 03 02 01   . ..............",
          "8521: |   3856: 06 1e 03 00 12 03 01 01 06 1d 03 00 12 03 01 01   ................",
          "8522: |   3872: 06 1c 03 00 12 03 01 01 06 1b 03 00 12 02 01 01   ................",
          "8523: |   3888: 06 1a 03 00 12 02 01 01 06 19 03 00 12 02 01 01   ................",
          "8524: |   3904: 06 18 03 00 12 02 01 01 06 17 03 00 12 02 01 01   ................",
          "8525: |   3920: 06 16 03 00 12 02 01 01 06 15 03 00 12 02 01 01   ................",
          "8526: |   3936: 06 14 03 00 12 02 01 01 06 13 03 00 12 02 01 01   ................",
          "8527: |   3952: 06 12 03 00 12 02 01 01 06 11 03 00 12 02 01 01   ................",
          "8528: |   3968: 06 00 03 00 12 02 01 01 06 0f 03 00 12 02 01 01   ................",
          "8529: |   3984: 06 0e 03 00 12 02 01 01 06 0d 03 00 12 02 01 01   ................",
          "8530: |   4000: 06 0c 03 00 12 02 01 01 06 0b 03 10 12 02 01 01   ................",
          "8531: |   4016: 06 0a 03 00 12 02 01 01 06 09 03 00 12 03 01 01   ................",
          "8532: |   4032: 06 08 03 00 12 03 01 01 06 07 03 00 12 03 01 01   ................",
          "8533: |   4048: 07 06 03 00 12 01 01 01 06 05 03 00 12 01 01 01   ................",
          "8534: |   4064: 06 04 03 00 12 01 01 01 06 03 03 00 12 06 01 01   ................",
          "8535: |   4080: 06 02 03 00 12 06 01 01 06 01 03 00 12 06 01 01   ................",
          "8536: | page 7 offset 24576",
          "8537: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "8538: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "8539: | page 8 offset 28672",
          "8540: |   4048: 00 00 00 00 00 00 5d 03 02 2b 69 6e 74 00 00 00   ......]..+int...",
          "8541: | end crash-96b136358d01ec.db",
          "8542: }]} {}",
          "8544: do_catchsql_test 59.1 {",
          "8545:   SELECT (matchinfo(591,t1)) FROM t1 WHERE t1 MATCH 'e*e\u009f'",
          "8546: } {0 {}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b3413197f57711f04102d8cc6ff1e8ddbe0f5f2bcb6e1989cf314fa97f0ff7f1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "deb201b8663ebf1793298ecdd8eb83fa1b407c6d",
      "candidate_info": {
        "commit_hash": "deb201b8663ebf1793298ecdd8eb83fa1b407c6d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/deb201b8663ebf1793298ecdd8eb83fa1b407c6d",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtreecirc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Use SQLITE_PREPARE_NO_VTAB in rtree as well.\n\nFossilOrigin-Name: 82a2ae7132964eab0dfad9a8314a399ffd3b72366b35e1767df6452125dd1d80",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtreecirc.test||ext/rtree/rtreecirc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3423:   };",
          "3424:   sqlite3_stmt **appStmt[N_STATEMENT];",
          "3425:   int i;",
          "3427:   pRtree->db = db;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3426:   const int f = SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_NO_VTAB;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3479:     }",
          "3480:     zSql = sqlite3_mprintf(zFormat, zDb, zPrefix);",
          "3481:     if( zSql ){",
          "3484:     }else{",
          "3485:       rc = SQLITE_NOMEM;",
          "3486:     }",
          "",
          "[Removed Lines]",
          "3482:       rc = sqlite3_prepare_v3(db, zSql, -1, SQLITE_PREPARE_PERSISTENT,",
          "3483:                               appStmt[i], 0);",
          "",
          "[Added Lines]",
          "3483:       rc = sqlite3_prepare_v3(db, zSql, -1, f, appStmt[i], 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3510:       if( zSql==0 ){",
          "3511:         rc = SQLITE_NOMEM;",
          "3512:       }else{",
          "3515:         sqlite3_free(zSql);",
          "3516:       }",
          "3517:     }",
          "",
          "[Removed Lines]",
          "3513:         rc = sqlite3_prepare_v3(db, zSql, -1, SQLITE_PREPARE_PERSISTENT,",
          "3514:                                 &pRtree->pWriteAux, 0);",
          "",
          "[Added Lines]",
          "3513:         rc = sqlite3_prepare_v3(db, zSql, -1, f, &pRtree->pWriteAux, 0);",
          "",
          "---------------"
        ],
        "ext/rtree/rtreecirc.test||ext/rtree/rtreecirc.test": [
          "File: ext/rtree/rtreecirc.test -> ext/rtree/rtreecirc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 Dec 22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: if {![info exists testdir]} {",
          "16:   set testdir [file join [file dirname [info script]] .. .. test]",
          "17: }",
          "18: source [file join [file dirname [info script]] rtree_util.tcl]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix rtreecirc",
          "22: ifcapable !rtree {",
          "23:   finish_test",
          "24:   return",
          "25: }",
          "27: do_execsql_test 1.0 {",
          "28:   CREATE VIRTUAL TABLE rt USING rtree(id, x1, x2, y1, y2);",
          "29:   SELECT name FROM sqlite_master ORDER BY 1;",
          "30: } {",
          "31:   rt rt_node rt_parent rt_rowid",
          "32: }",
          "33: db_save_and_close",
          "35: foreach {tn schema sql} {",
          "36:   1 {",
          "37:     CREATE TRIGGER tr1 AFTER INSERT ON rt_node BEGIN",
          "38:       SELECT * FROM rt;",
          "39:     END;",
          "40:   } {",
          "41:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "42:   }",
          "43:   2 {",
          "44:     CREATE TRIGGER tr1 AFTER INSERT ON rt_parent BEGIN",
          "45:       SELECT * FROM rt;",
          "46:     END;",
          "47:   } {",
          "48:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "49:   }",
          "50:   3 {",
          "51:     CREATE TRIGGER tr1 AFTER INSERT ON rt_rowid BEGIN",
          "52:       SELECT * FROM rt;",
          "53:     END;",
          "54:   } {",
          "55:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "56:   }",
          "57: } {",
          "58:   db_restore_and_reopen",
          "59:   do_execsql_test  1.1.$tn.1 $schema",
          "60:   do_catchsql_test 1.1.$tn.2 $sql {1 {no such table: main.rt}}",
          "61:   db close",
          "62: }",
          "65: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1999612010e310fc2430d1f00076f69fade0c66d202771dbb0f3d5597ac0a03c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}