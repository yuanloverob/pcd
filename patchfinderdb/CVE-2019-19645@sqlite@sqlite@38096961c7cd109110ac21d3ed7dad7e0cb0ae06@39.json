{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6fcb9f3ad96ea42eb46ff33b5fbd182f51d968b2",
      "candidate_info": {
        "commit_hash": "6fcb9f3ad96ea42eb46ff33b5fbd182f51d968b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6fcb9f3ad96ea42eb46ff33b5fbd182f51d968b2",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "manifest",
          "manifest.uuid",
          "test/fts3snippet.test"
        ],
        "message": "Fix a broken assert() in the fts3 snippet code that was failing for queries containging more than 64 phrases.\n\nFossilOrigin-Name: 4c01e0170e113ad052b6c3980beb4be9f1dc03fb3cf34132b90e8b82b23f654e",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3snippet.test||test/fts3snippet.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:       while( iCsr<(iStart+pIter->nSnippet) && iCsr>=iStart ){",
          "435:         int j;",
          "437:         u64 mPos = (u64)1 << (iCsr - iStart);",
          "438:         assert( iCsr>=iStart && (iCsr - iStart)<=64 );",
          "440:         if( (mCover|mCovered)&mPhrase ){",
          "441:           iScore++;",
          "442:         }else{",
          "",
          "[Removed Lines]",
          "436:         u64 mPhrase = (u64)1 << i;",
          "439:         assert( i>=0 && i<=64 );",
          "",
          "[Added Lines]",
          "436:         u64 mPhrase = (u64)1 << (i%64);",
          "439:         assert( i>=0 );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 00e9a8f2730eb7239bf7fd107c97c409e4f9fbd968510766373440a9079898eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3snippet.test||test/fts3snippet.test": [
          "File: test/fts3snippet.test -> test/fts3snippet.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:   }]",
          "562: } {64}",
          "566: set sqlite_fts3_enable_parentheses 0",
          "567: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564: #-------------------------------------------------------------------------",
          "565: # Request a snippet from a query with more than 64 phrases.",
          "566: #",
          "567: do_execsql_test 5.0 {",
          "568:   CREATE VIRTUAL TABLE t5 USING fts3(x);",
          "569:   INSERT INTO t5 VALUES('a1 a2 a3');",
          "570:   INSERT INTO t5 VALUES('a4 a5 a6');",
          "571:   INSERT INTO t5 VALUES('a70 a71 a72');",
          "572: }",
          "574: do_execsql_test 5.1 {",
          "575:   SELECT snippet(t5, '[', ']') FROM t5 WHERE t5 MATCH",
          "576:   'a1 OR a2 OR a3 OR a4 OR a5 OR a6 OR a7 OR a8 OR a9 OR a10 OR ' ||",
          "577:   'a11 OR a12 OR a13 OR a14 OR a15 OR a16 OR a17 OR a18 OR a19 OR a10 OR ' ||",
          "578:   'a21 OR a22 OR a23 OR a24 OR a25 OR a26 OR a27 OR a28 OR a29 OR a20 OR ' ||",
          "579:   'a31 OR a32 OR a33 OR a34 OR a35 OR a36 OR a37 OR a38 OR a39 OR a30 OR ' ||",
          "580:   'a41 OR a42 OR a43 OR a44 OR a45 OR a46 OR a47 OR a48 OR a49 OR a40 OR ' ||",
          "581:   'a51 OR a52 OR a53 OR a54 OR a55 OR a56 OR a57 OR a58 OR a59 OR a50 OR ' ||",
          "582:   'a61 OR a62 OR a63 OR a64 OR a65 OR a66 OR a67 OR a68 OR a69 OR a60 OR ' ||",
          "583:   'a71 OR a72 OR a73 OR a74 OR a75 OR a76 OR a77 OR a78 OR a79 OR a70'",
          "584: } {",
          "585:   {[a1] [a2] [a3]}",
          "586:   {[a4] [a5] [a6]}",
          "587:   {[a70] [a71] [a72]}",
          "588: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52d9a3c2137bac76a826a24d2c466d06f3ac49d4",
      "candidate_info": {
        "commit_hash": "52d9a3c2137bac76a826a24d2c466d06f3ac49d4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/52d9a3c2137bac76a826a24d2c466d06f3ac49d4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Minor performance improvement in vdbeRecordCompareString().\n\nFossilOrigin-Name: 777fec84a5db968e033883920586ec0afef65578be0c1eb3021fce525111edde",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: be01b801fbc258f0ab9542130cec12a5ea5e2d0bf087684a9eda909ad459c211",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4600:     nCmp = MIN( pPKey2->aMem[0].n, nStr );",
          "4601:     res = memcmp(&aKey1[szHdr], pPKey2->aMem[0].z, nCmp);",
          "4604:       res = nStr - pPKey2->aMem[0].n;",
          "4605:       if( res==0 ){",
          "4606:         if( pPKey2->nField>1 ){",
          "",
          "[Removed Lines]",
          "4603:     if( res==0 ){",
          "",
          "[Added Lines]",
          "4603:     if( res>0 ){",
          "4604:       res = pPKey2->r2;",
          "4605:     }else if( res<0 ){",
          "4606:       res = pPKey2->r1;",
          "4607:     }else{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4614:       }else{",
          "4615:         res = pPKey2->r1;",
          "4616:       }",
          "4621:     }",
          "4622:   }",
          "",
          "[Removed Lines]",
          "4617:     }else if( res>0 ){",
          "4618:       res = pPKey2->r2;",
          "4619:     }else{",
          "4620:       res = pPKey2->r1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56785a0a8048e1b7076fae06e7118c1e24633c81",
      "candidate_info": {
        "commit_hash": "56785a0a8048e1b7076fae06e7118c1e24633c81",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/56785a0a8048e1b7076fae06e7118c1e24633c81",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix an assert() that might be false for a corrupt database.\n\nFossilOrigin-Name: 0cfb888723fb8ff0763bbc23acb7d21a53f6d1c40661d8468248644281b29d85",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aa61435a4c3800f023788081c1342ad6a05a41449a424fa6c039d5ca46072256",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6730:     pPage->nCell++;",
          "6732:     if( (++data[pPage->hdrOffset+4])==0 ) data[pPage->hdrOffset+3]++;",
          "6734: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "6735:     if( pPage->pBt->autoVacuum ){",
          "",
          "[Removed Lines]",
          "6733:     assert( get2byte(&data[pPage->hdrOffset+3])==pPage->nCell );",
          "",
          "[Added Lines]",
          "6733:     assert( get2byte(&data[pPage->hdrOffset+3])==pPage->nCell || CORRUPT_DB );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0708054570e0cb484491cee24a2ff3a8d54fe4b1",
      "candidate_info": {
        "commit_hash": "0708054570e0cb484491cee24a2ff3a8d54fe4b1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0708054570e0cb484491cee24a2ff3a8d54fe4b1",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/windowfault.test"
        ],
        "message": "Add an extra IO-error test to windowfault.test.\n\nFossilOrigin-Name: 5b8c44cd39c529e8adbc51f67088409e963515b988868856120a59e6c7160210",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c2edbf3b8c643edcd5823eb907fd7531cf5be8a8b6a014fa1b123eb0ea3231cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:   faultsim_test_result {0 {1 2 5 6 9 10}}",
          "163: }",
          "165: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: #-------------------------------------------------------------------------",
          "166: # The following test causes a cursor in REQURESEEK state to be passed",
          "167: # to sqlite3BtreeDelete(). An error is simulated within the seek operation",
          "168: # to restore the cursors position.",
          "169: #",
          "170: reset_db",
          "171: set big [string repeat x 900]",
          "172: do_execsql_test 9.0 {",
          "173:   PRAGMA page_size = 512;",
          "174:   PRAGMA cache_size = 2;",
          "175:   CREATE TABLE t(x INTEGER PRIMARY KEY, y TEXT);",
          "176:   WITH s(i) AS (",
          "177:     VALUES(1) UNION ALL SELECT i+1 FROM s WHERE i<1900",
          "178:   )",
          "179:   INSERT INTO t(y) SELECT $big FROM s;",
          "180: }",
          "181: db close",
          "183: testvfs tvfs -default 1",
          "184: tvfs script vfs_callback",
          "185: tvfs filter xRead",
          "187: sqlite3 db test.db",
          "188: proc vfs_callback {method file args} {",
          "189:   if {$file==\"\" && [info exists ::tmp_read_fail]} {",
          "190:     incr ::tmp_read_fail -1",
          "191:     if {$::tmp_read_fail<=0} {",
          "192:       return \"SQLITE_IOERR\"",
          "193:     }",
          "194:   }",
          "195:   return \"SQLITE_OK\"",
          "196: }",
          "198: set FAULTSIM(tmpread) [list                \\",
          "199:   -injectstart   tmpread_injectstart       \\",
          "200:   -injectstop    tmpread_injectstop        \\",
          "201:   -injecterrlist {{1 {disk I/O error}}}    \\",
          "202: ]",
          "203: proc tmpread_injectstart {iFail} {",
          "204:   set ::tmp_read_fail $iFail",
          "205: }",
          "206: proc tmpread_injectstop {} {",
          "207:   set ret [expr $::tmp_read_fail<=0]",
          "208:   unset -nocomplain ::tmp_read_fail",
          "209:   return $ret",
          "210: }",
          "212: do_faultsim_test 9 -end 25 -faults tmpread -body {",
          "213:   execsql {",
          "214:     SELECT sum(y) OVER win FROM t",
          "215:     WINDOW win AS (",
          "216:       ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND 1800 FOLLOWING",
          "217:     )",
          "218:   }",
          "219: } -test {",
          "220:   faultsim_test_result {0 {}}",
          "221: }",
          "223: catch {db close}",
          "224: tvfs delete",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "427db2d2452d52075feb28f4ae33e65978dc0dc4",
      "candidate_info": {
        "commit_hash": "427db2d2452d52075feb28f4ae33e65978dc0dc4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/427db2d2452d52075feb28f4ae33e65978dc0dc4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Make the testcase() macro added in the previous check-in reachable for testing.\n\nFossilOrigin-Name: 80704a16f6dbbeacc65fa36a3623df10292a28aeacf9e2c1d2891258479e3b89",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: df58774e994bd306b1a2e1f259e7e4408f01c5b1dc104673698168bbf8a63ce5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:   int nByte;",
          "303:   assert( pMem->flags & MEM_Zero );",
          "304:   assert( (pMem->flags&MEM_Blob)!=0 || MemNullNochng(pMem) );",
          "306:   assert( !sqlite3VdbeMemIsRowSet(pMem) );",
          "307:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "",
          "[Removed Lines]",
          "305:   testcase( MemNullNochng(pMem) )",
          "",
          "[Added Lines]",
          "305:   testcase( sqlite3_value_nochange(pMem) );",
          "",
          "---------------"
        ]
      }
    }
  ]
}