{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4245e0456d8387d867a73ab3d986aabcf3725ff2",
      "candidate_info": {
        "commit_hash": "4245e0456d8387d867a73ab3d986aabcf3725ff2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4245e0456d8387d867a73ab3d986aabcf3725ff2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/altertab3.test"
        ],
        "message": "Fix a minor error in a test script, and harmless compiler warnings in the CLI code.\n\nFossilOrigin-Name: eaa34626e497d3af132dd8f13eddbbda89365d369ed43212a5f788175b3d6198",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ebb81dad1f43dac4636cd44d4055d1d4b198c675f73e23c5a2d8d992ae27fe1f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6562:     char *z = azArg[i];",
          "6563:     int n;",
          "6564:     if( z[0]=='-' && z[1]=='-' ) z++;",
          "6566:     if( n<=17 && memcmp(\"-freelist-corrupt\", z, n)==0 ){",
          "6567:       bFreelist = 0;",
          "6568:     }else",
          "",
          "[Removed Lines]",
          "6565:     n = strlen(z);",
          "",
          "[Added Lines]",
          "6565:     n = strlen30(z);",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:   db2 eval { INSERT INTO t2 VALUES (1), (2), (3) }",
          "205:   db close",
          "206: } {}",
          "208: #-------------------------------------------------------------------------",
          "209: reset_db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: db2 close",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e08c4a5e609ddae15f2d537a7c1820558dd4a86",
      "candidate_info": {
        "commit_hash": "6e08c4a5e609ddae15f2d537a7c1820558dd4a86",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6e08c4a5e609ddae15f2d537a7c1820558dd4a86",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz001.test"
        ],
        "message": "Update test file dbfuzz001.test so that it works with SQLITE_ENABLE_OVERSIZE_CELL_CHECK builds.\n\nFossilOrigin-Name: 4371a0c46ee7bfbc0a1507796bd9eefd3371adad81b8dda214d018854316727b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz001.test||test/dbfuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 433d6ef637a10ee017b5d8cadd125a162cfedc9895ae862b8dde6dddb7eda59b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     |    496: 01 0d 3f 00 00 48 01 54 00 01 f7 01 ec 01 c5 01   ..?..H.T........",
          "169:     | end c4.db",
          "170:   }]",
          "174: # The DELETE query below deletes the very last cell from page 8.",
          "175: # Prior to a certain fix to sqlite3BtreeDelete() and because of the",
          "",
          "[Removed Lines]",
          "171:   db eval {PRAGMA writable_schema=on; PRAGMA integrity_check}",
          "172: } {/Fragmentation of 384 bytes reported as 0 on page 8/}",
          "",
          "[Added Lines]",
          "171: } {}",
          "173: ifcapable !oversize_cell_check {",
          "174:   # Non SQLITE_ENABLE_OVERSIZE_CELL_CHECK builds:",
          "175:   do_test dbfuzz001-101a {",
          "176:     db eval {PRAGMA writable_schema=on; PRAGMA integrity_check}",
          "177:   } {/Fragmentation of 384 bytes reported as 0 on page 8/}",
          "178: } else {",
          "179:   # SQLITE_ENABLE_OVERSIZE_CELL_CHECK builds:",
          "180:   do_catchsql_test dbfuzz001-101b {",
          "181:     PRAGMA writable_schema=on;",
          "182:     PRAGMA integrity_check;",
          "183:   } {1 {database disk image is malformed}}",
          "184: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177: # cause a rebalance operation, which would leave the btree in a weird",
          "178: # state that would lead to segfaults and or assertion faults.",
          "179: #",
          "181:   DELETE FROM t3 WHERE x IS NOT NULL AND +rowid=6;",
          "184: # This is a dbfuzz2-generate test case that can cause a page with",
          "185: # pPage->nCell==0 to enter the balancer.",
          "",
          "[Removed Lines]",
          "180: do_execsql_test dbfuzz001-110 {",
          "182: } {}",
          "",
          "[Added Lines]",
          "192: set res {0 {}}",
          "193: ifcapable oversize_cell_check { set res {1 {database disk image is malformed}} }",
          "194: do_catchsql_test dbfuzz001-110 {",
          "196: } $res",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "270: } {1 {database disk image is malformed}}",
          "274:   sqlite3 db {}",
          "275:   db deserialize [decode_hexdb {",
          "276: | size 3584 pagesize 512 filename x/c02.db",
          "",
          "[Removed Lines]",
          "273: do_test dbfuzz001-110 {",
          "",
          "[Added Lines]",
          "287: do_test dbfuzz001-310 {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "349:   }]",
          "350: } {}",
          "353:   PRAGMA integrity_check;",
          "354: } {1 {database disk image is malformed}}",
          "357:   DELETE FROM t3 WHERE x IN (SELECT x FROM t4);",
          "358: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "352: do_catchsql_test dbfuzz001-120 {",
          "356: do_catchsql_test dbfuzz001-130 {",
          "",
          "[Added Lines]",
          "366: do_catchsql_test dbfuzz001-320 {",
          "370: do_catchsql_test dbfuzz001-330 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d331c7ab1fa42ab7bcd4e26cf8c60a9201621922",
      "candidate_info": {
        "commit_hash": "d331c7ab1fa42ab7bcd4e26cf8c60a9201621922",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d331c7ab1fa42ab7bcd4e26cf8c60a9201621922",
        "files": [
          "manifest",
          "manifest.uuid"
        ],
        "message": "Version 3.28.0\n\nFossilOrigin-Name: 884b4b7e502b4e991677b53971277adfaf0a04a284f8e483e2553d0f83156b50",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: af61a2fc45a0fa1277d7453779238b77de4c298a9f60714b7dc62ddca5874f80",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "178edcd774d21a1eab9e2b92d76c60950c4da894",
      "candidate_info": {
        "commit_hash": "178edcd774d21a1eab9e2b92d76c60950c4da894",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/178edcd774d21a1eab9e2b92d76c60950c4da894",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Update dbfuzz2 to set a maximum database size of 100MiB by default, but with the new --max-db-size N option to change that limit.\n\nFossilOrigin-Name: 21d6bb78ef2979d011b917d2d6519d7cd0009fcad83ed23ab2e9a5e02d8e51ab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 30f08d58882819a69e353bcc1b6b349664bbfbe00aa1c115ba44a9fd899fcc5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: static int bVdbeDebug = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: static sqlite3_int64 szMax = 104857600;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   sqlite3 *db;",
          "79:   int rc;",
          "80:   int i;",
          "82:   if( eVerbosity>=1 ){",
          "83:     printf(\"************** nByte=%d ***************\\n\", (int)nByte);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:   sqlite3_int64 x;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   sqlite3_deserialize(db, \"main\", a, nByte, nByte,",
          "93:         SQLITE_DESERIALIZE_RESIZEABLE |",
          "94:         SQLITE_DESERIALIZE_FREEONCLOSE);",
          "95:   if( bVdbeDebug ){",
          "96:     sqlite3_exec(db, \"PRAGMA vdbe_debug=ON\", 0, 0, 0);",
          "97:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:   x = szMax;",
          "100:   sqlite3_file_control(db, \"main\", SQLITE_FCNTL_SIZE_LIMIT, &x);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:         bVdbeDebug = 1;",
          "151:         continue;",
          "152:       }",
          "153:       if( strcmp(z,\"max-stack\")==0",
          "154:        || strcmp(z,\"max-data\")==0",
          "155:        || strcmp(z,\"max-as\")==0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:       if( strcmp(z,\"max-db-size\")==0 ){",
          "160:         if( i+1==argc ){",
          "161:           fprintf(stderr, \"missing argument to %s\\n\", argv[i]);",
          "162:           exit(1);",
          "163:         }",
          "164:         szMax = strtol(argv[++i], 0, 0);",
          "165:         continue;",
          "166:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0578084507ee2d5f951409b61029093e1408ec7b",
      "candidate_info": {
        "commit_hash": "0578084507ee2d5f951409b61029093e1408ec7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0578084507ee2d5f951409b61029093e1408ec7b",
        "files": [
          "ext/fts3/fts3Int.h",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the assert_fts3_nc() macro so that it works for test builds that omit SQLITE_DEBUG.\n\nFossilOrigin-Name: b10df2b569e356551cf51ca179f307e4f8827413ee9feb886db1f1e0650e6c5f",
        "before_after_code_files": [
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: extern int sqlite3_fts3_may_be_corrupt;",
          "139: # define assert_fts3_nc(x) assert(sqlite3_fts3_may_be_corrupt || (x))",
          "140: #else",
          "",
          "[Removed Lines]",
          "137: #ifdef SQLITE_DEBUG",
          "",
          "[Added Lines]",
          "137: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a82539665718c8183d9d0bb7bcb3adcb1a23294b8c30f364829a982dab89a332",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}