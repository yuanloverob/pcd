{
  "cve_id": "CVE-2014-3480",
  "cve_desc": "The cdf_count_chain function in cdf.c in file before 5.19, as used in the Fileinfo component in PHP before 5.4.30 and 5.5.x before 5.5.14, does not properly validate sector-count data, which allows remote attackers to cause a denial of service (application crash) via a crafted CDF file.",
  "repo": "file/file",
  "patch_hash": "40bade80cbe2af1d0b2cd0420cebd5d5905a2382",
  "patch_info": {
    "commit_hash": "40bade80cbe2af1d0b2cd0420cebd5d5905a2382",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/40bade80cbe2af1d0b2cd0420cebd5d5905a2382",
    "files": [
      "src/cdf.c"
    ],
    "message": "Fix incorrect bounds check for sector count. (Francisco Alonso and Jan Kaluza at RedHat)",
    "before_after_code_files": [
      "src/cdf.c||src/cdf.c"
    ]
  },
  "patch_diff": {
    "src/cdf.c||src/cdf.c": [
      "File: src/cdf.c -> src/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.59 2014/05/14 23:22:48 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.60 2014/05/21 13:04:38 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "455: cdf_count_chain(const cdf_sat_t *sat, cdf_secid_t sid, size_t size)",
      "456: {",
      "457:  size_t i, j;",
      "460:  DPRINTF((\"Chain:\"));",
      "461:  for (j = i = 0; sid >= 0; i++, j++) {",
      "",
      "[Removed Lines]",
      "458:  cdf_secid_t maxsector = (cdf_secid_t)(sat->sat_len * size);",
      "",
      "[Added Lines]",
      "458:  cdf_secid_t maxsector = (cdf_secid_t)((sat->sat_len * size)",
      "459:      / sizeof(maxsector));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "465:    errno = EFTYPE;",
      "466:    return (size_t)-1;",
      "467:   }",
      "470:    errno = EFTYPE;",
      "471:    return (size_t)-1;",
      "472:   }",
      "",
      "[Removed Lines]",
      "468:   if (sid > maxsector) {",
      "469:    DPRINTF((\"Sector %d > %d\\n\", sid, maxsector));",
      "",
      "[Added Lines]",
      "469:   if (sid >= maxsector) {",
      "470:    DPRINTF((\"Sector %d >= %d\\n\", sid, maxsector));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de589a5cee7e33c652ace8cc756b816698b5e564",
      "candidate_info": {
        "commit_hash": "de589a5cee7e33c652ace8cc756b816698b5e564",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/de589a5cee7e33c652ace8cc756b816698b5e564",
        "files": [
          "src/cdf.c",
          "src/cdf_time.c"
        ],
        "message": "Fix debugging build.",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/cdf_time.c||src/cdf_time.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.52 2013/02/18 15:40:59 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1138:      \"user stream\", \"lockbytes\", \"property\", \"root storage\" };",
          "1140:  for (i = 0; i < dir->dir_len; i++) {",
          "1141:   d = &dir->dir_tab[i];",
          "1142:   for (j = 0; j < sizeof(name); j++)",
          "1143:    name[j] = (char)CDF_TOLE2(d->d_name[j]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1141:   char buf[26];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1153:   (void)fprintf(stderr, \"Right child: %d\\n\", d->d_right_child);",
          "1154:   (void)fprintf(stderr, \"Flags: 0x%x\\n\", d->d_flags);",
          "1155:   cdf_timestamp_to_timespec(&ts, d->d_created);",
          "1157:   cdf_timestamp_to_timespec(&ts, d->d_modified);",
          "1159:   (void)fprintf(stderr, \"Stream %d\\n\", d->d_stream_first_sector);",
          "1160:   (void)fprintf(stderr, \"Size %d\\n\", d->d_size);",
          "1161:   switch (d->d_type) {",
          "",
          "[Removed Lines]",
          "1156:   (void)fprintf(stderr, \"Created %s\", cdf_ctime(&ts.tv_sec));",
          "1158:   (void)fprintf(stderr, \"Modified %s\", cdf_ctime(&ts.tv_sec));",
          "",
          "[Added Lines]",
          "1157:   (void)fprintf(stderr, \"Created %s\", cdf_ctime(&ts.tv_sec, buf));",
          "1159:   (void)fprintf(stderr, \"Modified %s\",",
          "1160:       cdf_ctime(&ts.tv_sec, buf));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1233:     cdf_print_elapsed_time(buf, sizeof(buf), tp);",
          "1234:     (void)fprintf(stderr, \"timestamp %s\\n\", buf);",
          "1235:    } else {",
          "1236:     cdf_timestamp_to_timespec(&ts, tp);",
          "1237:     (void)fprintf(stderr, \"timestamp %s\",",
          "1239:    }",
          "1240:    break;",
          "1241:   case CDF_CLIPBOARD:",
          "",
          "[Removed Lines]",
          "1238:         cdf_ctime(&ts.tv_sec));",
          "",
          "[Added Lines]",
          "1238:     char buf[26];",
          "1241:         cdf_ctime(&ts.tv_sec, buf));",
          "",
          "---------------"
        ],
        "src/cdf_time.c||src/cdf_time.c": [
          "File: src/cdf_time.c -> src/cdf_time.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #include <time.h>",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: cdf_time.c,v 1.11 2011/12/13 13:48:41 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: cdf_time.c,v 1.12 2012/05/15 17:14:36 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176: }",
          "180: int",
          "181: main(int argc, char *argv[])",
          "182: {",
          "",
          "[Removed Lines]",
          "179: #ifdef TEST",
          "",
          "[Added Lines]",
          "179: #ifdef TEST_TIME",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9979db029d671da36b9a6a7f375b487ea1ee9e65",
      "candidate_info": {
        "commit_hash": "9979db029d671da36b9a6a7f375b487ea1ee9e65",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/9979db029d671da36b9a6a7f375b487ea1ee9e65",
        "files": [
          "ChangeLog",
          "src/cdf.c",
          "src/cdf.h"
        ],
        "message": "PR/411: Fix memory corruption from corrupt? thumbs file",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/cdf.h||src/cdf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.69 2014/12/04 15:56:46 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.70 2015/01/02 21:29:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1004: #define extract_catalog_field(t, f, l) \\",
          "1008: int",
          "1009: cdf_unpack_catalog(const cdf_header_t *h, const cdf_stream_t *sst,",
          "",
          "[Removed Lines]",
          "1005:     memcpy(&ce[i].f, b + (l), sizeof(ce[i].f)); \\",
          "1006:     ce[i].f = CAST(t, CDF_TOLE(ce[i].f))",
          "",
          "[Added Lines]",
          "1005:     if (b + l + sizeof(cep->f) > eb) \\",
          "1006:  break; \\",
          "1007:     memcpy(&cep->f, b + (l), sizeof(cep->f)); \\",
          "1008:     ce[i].f = CAST(t, CDF_TOLE(cep->f))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1030:  (*cat)->cat_num = nr;",
          "1031:  ce = (*cat)->cat_e;",
          "1032:  b = CAST(const char *, sst->sst_tab);",
          "1034:   extract_catalog_field(uint16_t, ce_namlen, 0);",
          "1035:   extract_catalog_field(uint16_t, ce_num, 2);",
          "1036:   extract_catalog_field(uint64_t, ce_timestamp, 6);",
          "1045:   }",
          "1048:  }",
          "1049:  return 0;",
          "1050: }",
          "",
          "[Removed Lines]",
          "1033:  for (i = 0; i < nr; i++) {",
          "1037:   reclen = ce[i].ce_namlen;",
          "1038:   ce[i].ce_namlen =",
          "1039:       sizeof(ce[i].ce_name) / sizeof(ce[i].ce_name[0]) - 1;",
          "1040:   if (ce[i].ce_namlen > reclen - 14)",
          "1041:    ce[i].ce_namlen = reclen - 14;",
          "1042:   np = CAST(const uint16_t *, CAST(const void *, (b + 16)));",
          "1043:   for (k = 0; k < ce[i].ce_namlen; k++) {",
          "1046:   ce[i].ce_name[ce[i].ce_namlen] = 0;",
          "1047:   b += reclen;",
          "",
          "[Added Lines]",
          "1035:  for (i = 0; i < nr; i++, b += reclen) {",
          "1036:   cdf_catalog_entry_t *cep = &ce[i];",
          "1037:   uint16_t rlen;",
          "1042:   reclen = cep->ce_namlen;",
          "1044:   if (reclen < 14) {",
          "1045:    cep->ce_namlen = 0;",
          "1046:    cep->ce_name[0] = 0;",
          "1047:    continue;",
          "1050:   cep->ce_namlen = __arraycount(cep->ce_name) - 1;",
          "1051:   rlen = reclen - 14;",
          "1052:   if (cep->ce_namlen > rlen)",
          "1053:    cep->ce_namlen = rlen;",
          "1055:   np = CAST(const uint16_t *, CAST(const void *, (b + 16)));",
          "1056:   if (CAST(const char *, np + cep->ce_namlen) > eb)",
          "1057:    break;",
          "1059:   for (k = 0; k < cep->ce_namlen; k++)",
          "1061:   cep->ce_name[cep->ce_namlen] = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1190: }",
          "1192: void",
          "1194: {",
          "1195:  size_t i, j;",
          "1197:  char abuf[16];",
          "1198:  (void)fprintf(stderr, \"%.4x: \", 0);",
          "1199:  for (i = 0, j = 0; i < len; i++, p++) {",
          "",
          "[Removed Lines]",
          "1193: cdf_dump(void *v, size_t len)",
          "1196:  unsigned char *p = v;",
          "",
          "[Added Lines]",
          "1207: cdf_dump(const void *v, size_t len)",
          "1210:  const unsigned char *p = v;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1329:     cdf_print_elapsed_time(buf, sizeof(buf), tp);",
          "1330:     (void)fprintf(stderr, \"timestamp %s\\n\", buf);",
          "1331:    } else {",
          "1333:     cdf_timestamp_to_timespec(&ts, tp);",
          "1334:     (void)fprintf(stderr, \"timestamp %s\",",
          "1336:    }",
          "1337:    break;",
          "1338:   case CDF_CLIPBOARD:",
          "",
          "[Removed Lines]",
          "1332:     char buf[26];",
          "1335:         cdf_ctime(&ts.tv_sec, buf));",
          "",
          "[Added Lines]",
          "1346:     char tbuf[26];",
          "1349:         cdf_ctime(&ts.tv_sec, tbuf));",
          "",
          "---------------"
        ],
        "src/cdf.h||src/cdf.h": [
          "File: src/cdf.h -> src/cdf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: #ifdef CDF_DEBUG",
          "340: void cdf_dump_header(const cdf_header_t *);",
          "341: void cdf_dump_sat(const char *, const cdf_sat_t *, size_t);",
          "343: void cdf_dump_stream(const cdf_header_t *, const cdf_stream_t *);",
          "344: void cdf_dump_dir(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
          "345:     const cdf_sat_t *, const cdf_stream_t *, const cdf_dir_t *);",
          "",
          "[Removed Lines]",
          "342: void cdf_dump(void *, size_t);",
          "",
          "[Added Lines]",
          "342: void cdf_dump(const void *, size_t);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10b6b9c21bd4709350de184b981cdbf925fbf5d1",
      "candidate_info": {
        "commit_hash": "10b6b9c21bd4709350de184b981cdbf925fbf5d1",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/10b6b9c21bd4709350de184b981cdbf925fbf5d1",
        "files": [
          "src/cdf.c"
        ],
        "message": "Fix incorrect bounds check for sector count. (Francisco Alonso and Jan Kaluza at RedHat)",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.60 2014/05/21 13:04:38 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.61 2014/06/04 17:23:19 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "455: cdf_count_chain(const cdf_sat_t *sat, cdf_secid_t sid, size_t size)",
          "456: {",
          "457:  size_t i, j;",
          "460:  DPRINTF((\"Chain:\"));",
          "461:  for (j = i = 0; sid >= 0; i++, j++) {",
          "",
          "[Removed Lines]",
          "458:  cdf_secid_t maxsector = (cdf_secid_t)(sat->sat_len * size);",
          "",
          "[Added Lines]",
          "458:  cdf_secid_t maxsector = (cdf_secid_t)((sat->sat_len * size)",
          "459:      / sizeof(maxsector));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "465:    errno = EFTYPE;",
          "466:    return (size_t)-1;",
          "467:   }",
          "470:    errno = EFTYPE;",
          "471:    return (size_t)-1;",
          "472:   }",
          "",
          "[Removed Lines]",
          "468:   if (sid > maxsector) {",
          "469:    DPRINTF((\"Sector %d > %d\\n\", sid, maxsector));",
          "",
          "[Added Lines]",
          "469:   if (sid >= maxsector) {",
          "470:    DPRINTF((\"Sector %d >= %d\\n\", sid, maxsector));",
          "",
          "---------------"
        ]
      }
    }
  ]
}