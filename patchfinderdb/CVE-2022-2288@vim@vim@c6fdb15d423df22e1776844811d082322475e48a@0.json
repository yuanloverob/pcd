{
  "cve_id": "CVE-2022-2288",
  "cve_desc": "Out-of-bounds Write in GitHub repository vim/vim prior to 9.0.",
  "repo": "vim/vim",
  "patch_hash": "c6fdb15d423df22e1776844811d082322475e48a",
  "patch_info": {
    "commit_hash": "c6fdb15d423df22e1776844811d082322475e48a",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/c6fdb15d423df22e1776844811d082322475e48a",
    "files": [
      "src/ex_docmd.c",
      "src/testdir/test_cmdline.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.0025: accessing beyond allocated memory with the cmdline window\n\nProblem:    Accessing beyond allocated memory when using the cmdline window in\n            Ex mode.\nSolution:   Use \"*\" instead of \"'<,'>\" for Visual mode.",
    "before_after_code_files": [
      "src/ex_docmd.c||src/ex_docmd.c",
      "src/testdir/test_cmdline.vim||src/testdir/test_cmdline.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/ex_docmd.c||src/ex_docmd.c": [
      "File: src/ex_docmd.c -> src/ex_docmd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3118:   size_t len = STRLEN(cmd_start);",
      "3122:   mch_memmove(orig_cmd, cmd_start, len);",
      "3124:      }",
      "3125:      else",
      "3126:      {",
      "",
      "[Removed Lines]",
      "3123:   STRCPY(orig_cmd + len, \"'<,'>+\");",
      "",
      "[Added Lines]",
      "3125:   STRCPY(orig_cmd + len, \" *+\");",
      "",
      "---------------"
    ],
    "src/testdir/test_cmdline.vim||src/testdir/test_cmdline.vim": [
      "File: src/testdir/test_cmdline.vim -> src/testdir/test_cmdline.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "2103:   call assert_equal(1, winnr('$'))",
      "2104: endfunc",
      "2106: \" test that \";\" works to find a match at the start of the first line",
      "2107: func Test_zero_line_search()",
      "2108:   new",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2106: func Test_cmdwin_ex_mode_with_modifier()",
      "2107:   \" this was accessing memory after allocated text in Ex mode",
      "2108:   new",
      "2109:   call setline(1, ['some', 'text', 'lines'])",
      "2110:   silent! call feedkeys(\"gQnormal vq:atopleft\\<C-V>\\<CR>\\<CR>\", 'xt')",
      "2111:   bwipe!",
      "2112: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "736: static int included_patches[] =",
      "739:     24,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "739:     25,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1501b63f8dedbd15ee5bfd9a177e558ffdf0673a",
      "candidate_info": {
        "commit_hash": "1501b63f8dedbd15ee5bfd9a177e558ffdf0673a",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/1501b63f8dedbd15ee5bfd9a177e558ffdf0673a",
        "files": [
          "src/ex_docmd.c",
          "src/version.c"
        ],
        "message": "patch 8.2.4636: not using Visual range\n\nProblem:    Not using Visual range.\nSolution:   Put the command pointer back to the range.",
        "before_after_code_files": [
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3092:  break;",
          "3093:     }",
          "3096:     {",
          "3104:     }",
          "3106:     return OK;",
          "",
          "[Removed Lines]",
          "3095:     if (has_visual_range && eap->cmd > cmd_start)",
          "3101:  mch_memmove(cmd_start - 5, cmd_start, eap->cmd - cmd_start);",
          "3102:  eap->cmd -= 5;",
          "3103:  mch_memmove(eap->cmd - 1, \":'<,'>\", 6);",
          "",
          "[Added Lines]",
          "3095:     if (has_visual_range)",
          "3097:  if (eap->cmd > cmd_start)",
          "3098:  {",
          "3103:      mch_memmove(cmd_start - 5, cmd_start, eap->cmd - cmd_start);",
          "3104:      eap->cmd -= 5;",
          "3105:      mch_memmove(eap->cmd - 1, \":'<,'>\", 6);",
          "3106:  }",
          "3107:  else",
          "3109:      eap->cmd -= 5;",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4635,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4636,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f50808ed135ab973296bca515ae4029b321afe47",
      "candidate_info": {
        "commit_hash": "f50808ed135ab973296bca515ae4029b321afe47",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/f50808ed135ab973296bca515ae4029b321afe47",
        "files": [
          "src/ex_docmd.c",
          "src/testdir/test_ex_mode.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.4763: using invalid pointer with \"V:\" in Ex mode\n\nProblem:    Using invalid pointer with \"V:\" in Ex mode.\nSolution:   Correctly handle the command being changed to \"+\".",
        "before_after_code_files": [
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/testdir/test_ex_mode.vim||src/testdir/test_ex_mode.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2783:  cmdmod_T    *cmod,",
          "2784:  int     skip_only)",
          "2785: {",
          "2786:     char_u  *cmd_start = NULL;",
          "2787:     char_u  *p;",
          "2788:     int     starts_with_colon = FALSE;",
          "2789:     int     vim9script = in_vim9script();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2786:     char_u  *orig_cmd = eap->cmd;",
          "2788:     int     did_plus_cmd = FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2819:    && curwin->w_cursor.lnum < curbuf->b_ml.ml_line_count)",
          "2820:  {",
          "2821:      eap->cmd = (char_u *)\"+\";",
          "2822:      if (!skip_only)",
          "2823:   ex_pressedreturn = TRUE;",
          "2824:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2824:      did_plus_cmd = TRUE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3111:  }",
          "3112:  else",
          "3115:     }",
          "3117:     return OK;",
          "",
          "[Removed Lines]",
          "3108:      mch_memmove(cmd_start - 5, cmd_start, eap->cmd - cmd_start);",
          "3109:      eap->cmd -= 5;",
          "3110:      mch_memmove(eap->cmd - 1, \":'<,'>\", 6);",
          "3114:      eap->cmd -= 5;",
          "",
          "[Added Lines]",
          "3111:      if (did_plus_cmd)",
          "3112:      {",
          "3113:   size_t len = STRLEN(cmd_start);",
          "3117:   mch_memmove(orig_cmd, cmd_start, len);",
          "3118:   STRCPY(orig_cmd + len, \"'<,'>+\");",
          "3119:      }",
          "3120:      else",
          "3121:      {",
          "3122:   mch_memmove(cmd_start - 5, cmd_start, eap->cmd - cmd_start);",
          "3123:   eap->cmd -= 5;",
          "3124:   mch_memmove(eap->cmd - 1, \":'<,'>\", 6);",
          "3125:      }",
          "3130:      if (did_plus_cmd)",
          "3131:   eap->cmd = (char_u *)\"'<,'>+\";",
          "3132:      else",
          "3133:   eap->cmd = orig_cmd;",
          "",
          "---------------"
        ],
        "src/testdir/test_ex_mode.vim||src/testdir/test_ex_mode.vim": [
          "File: src/testdir/test_ex_mode.vim -> src/testdir/test_ex_mode.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:   bwipe!",
          "251: endfunc",
          "254: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: \" This was accessing illegal memory when using \"+\" for eap->cmd.",
          "254: func Test_empty_command_visual_mode()",
          "255:   let lines =<< trim END",
          "256:       r<sfile>",
          "257:       0norm0V:\u001b",
          "258:       :qall!",
          "259:   END",
          "260:   call writefile(lines, 'Xexmodescript')",
          "261:   call assert_equal(1, RunVim([], [], '-u NONE -e -s -S Xexmodescript'))",
          "263:   call delete('Xexmodescript')",
          "264: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "747: static int included_patches[] =",
          "750:     4762,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750:     4763,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48ce135e6d45e6c10ed0c0fc4cb8433bf647672a",
      "candidate_info": {
        "commit_hash": "48ce135e6d45e6c10ed0c0fc4cb8433bf647672a",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/48ce135e6d45e6c10ed0c0fc4cb8433bf647672a",
        "files": [
          "src/ex_docmd.c",
          "src/version.c"
        ],
        "message": "patch 8.2.5092: using \"'<,'>\" in Ex mode may compare unrelated pointers\n\nProblem:    Using \"'<,'>\" in Ex mode may compare unrelated pointers.\nSolution:   Set eap->cmd to \"+\" only later.",
        "before_after_code_files": [
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2786: {",
          "2787:     char_u  *orig_cmd = eap->cmd;",
          "2788:     char_u  *cmd_start = NULL;",
          "2791:     int     starts_with_colon = FALSE;",
          "2792:     int     vim9script = in_vim9script();",
          "2793:     int     has_visual_range = FALSE;",
          "",
          "[Removed Lines]",
          "2789:     int     did_plus_cmd = FALSE;",
          "2790:     char_u  *p;",
          "",
          "[Added Lines]",
          "2789:     int     use_plus_cmd = FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2809:     for (;;)",
          "2810:     {",
          "2811:  while (*eap->cmd == ' ' || *eap->cmd == '\\t' || *eap->cmd == ':')",
          "2812:  {",
          "2813:      if (*eap->cmd == ':')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2812:  char_u  *p;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2815:      ++eap->cmd;",
          "2816:  }",
          "2819:  if (*eap->cmd == NUL && exmode_active",
          "2820:      && (getline_equal(eap->getline, eap->cookie, getexmodeline)",
          "2821:          || getline_equal(eap->getline, eap->cookie, getexline))",
          "2822:    && curwin->w_cursor.lnum < curbuf->b_ml.ml_line_count)",
          "2823:  {",
          "2826:      if (!skip_only)",
          "2827:   ex_pressedreturn = TRUE;",
          "2828:  }",
          "",
          "[Removed Lines]",
          "2824:      eap->cmd = (char_u *)\"+\";",
          "2825:      did_plus_cmd = TRUE;",
          "",
          "[Added Lines]",
          "2827:      use_plus_cmd = TRUE;",
          "2830:      break;  // no modifiers following",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3112:      {",
          "3113:   size_t len = STRLEN(cmd_start);",
          "3117:   mch_memmove(orig_cmd, cmd_start, len);",
          "3118:   STRCPY(orig_cmd + len, \"'<,'>+\");",
          "3119:      }",
          "",
          "[Removed Lines]",
          "3111:      if (did_plus_cmd)",
          "",
          "[Added Lines]",
          "3114:      if (use_plus_cmd)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3126:  }",
          "3127:  else",
          "3131:   eap->cmd = (char_u *)\"'<,'>+\";",
          "3132:      else",
          "3133:   eap->cmd = orig_cmd;",
          "3134:     }",
          "3136:     return OK;",
          "3137: }",
          "",
          "[Removed Lines]",
          "3130:      if (did_plus_cmd)",
          "",
          "[Added Lines]",
          "3133:      if (use_plus_cmd)",
          "3138:     else if (use_plus_cmd)",
          "3139:  eap->cmd = (char_u *)\"+\";",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735: static int included_patches[] =",
          "738:     5091,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:     5092,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c75bca3ee955ff36ece99a42041733ddea5f45a7",
      "candidate_info": {
        "commit_hash": "c75bca3ee955ff36ece99a42041733ddea5f45a7",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/c75bca3ee955ff36ece99a42041733ddea5f45a7",
        "files": [
          "src/ex_docmd.c",
          "src/testdir/test_source.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.4633: Visual range does not work before command modifiers\n\nProblem:    Visual range does not work before command modifiers.\nSolution:   Move Visual range to after command modifiers.",
        "before_after_code_files": [
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/testdir/test_source.vim||src/testdir/test_source.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2782:  cmdmod_T    *cmod,",
          "2783:  int     skip_only)",
          "2784: {",
          "2785:     char_u  *p;",
          "2786:     int     starts_with_colon = FALSE;",
          "2787:     int     vim9script = in_vim9script();",
          "2789:     CLEAR_POINTER(cmod);",
          "2790:     cmod->cmod_flags = sticky_cmdmod_flags;",
          "2793:     for (;;)",
          "2794:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2785:     char_u  *cmd_start;",
          "2789:     int     has_visual_range = FALSE;",
          "2794:     if (STRNCMP(eap->cmd, \"'<,'>\", 5) == 0)",
          "2795:     {",
          "2799:  eap->cmd += 5;",
          "2800:  cmd_start = eap->cmd;",
          "2801:  has_visual_range = TRUE;",
          "2802:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2849:  {",
          "2850:      char_u *s, *n;",
          "2853:   ;",
          "2854:      n = skipwhite(s);",
          "2858:   break;",
          "2859:  }",
          "",
          "[Removed Lines]",
          "2852:      for (s = p; ASCII_ISALPHA(*s); ++s)",
          "2855:      if (vim_strchr((char_u *)\".=\", *n) != NULL",
          "2856:       || *s == '['",
          "2857:       || (*n != NUL && n[1] == '='))",
          "",
          "[Added Lines]",
          "2864:      for (s = eap->cmd; ASCII_ISALPHA(*s); ++s)",
          "2867:      if (*n == '.' || *n == '=' || (*n != NUL && n[1] == '=')",
          "2868:       || *s == '[')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3081:  break;",
          "3082:     }",
          "3084:     return OK;",
          "3085: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3095:     if (has_visual_range && eap->cmd > cmd_start)",
          "3096:     {",
          "3101:  mch_memmove(cmd_start - 5, cmd_start, eap->cmd - cmd_start);",
          "3102:  eap->cmd -= 5;",
          "3103:  mch_memmove(eap->cmd - 1, \":'<,'>\", 6);",
          "3104:     }",
          "",
          "---------------"
        ],
        "src/testdir/test_source.vim||src/testdir/test_source.vim": [
          "File: src/testdir/test_source.vim -> src/testdir/test_source.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "579:   call assert_equal(#{pi: 3.12, e: 2.71828}, g:Math)",
          "580:   call assert_equal(['vim', 'nano'], g:Editors)",
          "582:   \" test for using try/catch",
          "583:   %d _",
          "584:   let lines =<< trim END",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "582:   \" '<,'> range before the cmd modifier works",
          "583:   unlet g:Math",
          "584:   unlet g:Editors",
          "585:   exe \"normal 6GV4j:vim9cmd source\\<CR>\"",
          "586:   call assert_equal(['vim', 'nano'], g:Editors)",
          "587:   unlet g:Editors",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4632,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4633,",
          "",
          "---------------"
        ]
      }
    }
  ]
}