{
  "cve_id": "CVE-2019-11502",
  "cve_desc": "snap-confine in snapd before 2.38 incorrectly set the ownership of a snap application to the uid and gid of the first calling user. Consequently, that user had unintended access to a private /tmp directory.",
  "repo": "snapcore/snapd",
  "patch_hash": "bdbfeebef03245176ae0dc323392bb0522a339b1",
  "patch_info": {
    "commit_hash": "bdbfeebef03245176ae0dc323392bb0522a339b1",
    "repo": "snapcore/snapd",
    "commit_url": "https://github.com/snapcore/snapd/commit/bdbfeebef03245176ae0dc323392bb0522a339b1",
    "files": [
      "cmd/snap-confine/mount-support.c"
    ],
    "message": "cmd/snap-confine: chown private /tmp parent to root.root\n\nWhen snap-confine creates a private /tmp directory for a given snap it\nfirst creates a temporary directory in /tmp/ named after the snap, along\nwith a random name. Inside that directory it creates a /tmp directory\nwith permissions appropriate for a future /tmp, namely 1777.\n\nUp until recently the that directory was owned by the user who first\ninvoked snap-confine. Since the directory is reused by all the users on\nthe system this logic makes no sense.\n\nThis patch changes the related logic so that the private /tmp directory\nis owned by root, just like the real one.\n\nSigned-off-by: Zygmunt Krynicki <zygmunt.krynicki@canonical.com>",
    "before_after_code_files": [
      "cmd/snap-confine/mount-support.c||cmd/snap-confine/mount-support.c"
    ]
  },
  "patch_diff": {
    "cmd/snap-confine/mount-support.c||cmd/snap-confine/mount-support.c": [
      "File: cmd/snap-confine/mount-support.c -> cmd/snap-confine/mount-support.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "63: static void setup_private_mount(const char *snap_name)",
      "64: {",
      "67:  char tmpdir[MAX_BUF] = { 0 };",
      "",
      "[Removed Lines]",
      "65:  uid_t uid = getuid();",
      "66:  gid_t gid = getgid();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "99:  sc_do_mount(\"none\", \"/tmp\", NULL, MS_PRIVATE, NULL);",
      "102:   die(\"cannot change ownership of /tmp\");",
      "103:  }",
      "",
      "[Removed Lines]",
      "101:  if (chown(\"/tmp/\", uid, gid) < 0) {",
      "",
      "[Added Lines]",
      "99:  if (chown(\"/tmp/\", 0, 0) < 0) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8be9cc66f2f484cbf7428d47d5e0d9cab0f35faa",
      "candidate_info": {
        "commit_hash": "8be9cc66f2f484cbf7428d47d5e0d9cab0f35faa",
        "repo": "snapcore/snapd",
        "commit_url": "https://github.com/snapcore/snapd/commit/8be9cc66f2f484cbf7428d47d5e0d9cab0f35faa",
        "files": [
          "cmd/snap-confine/mount-support.c",
          "cmd/snap-confine/snap-confine.apparmor.in",
          "tests/main/stale-base-snap/task.yaml"
        ],
        "message": "cmd/snap-confine: use fixed private tmp directory\n\nWhen snap-confine prepares a fresh per-snap mount namespace\nit constructs a private /tmp directory that is not shared with other\nsnaps.\n\nAs a part of this work snap-confine would create a randomly named\ndirectory in /tmp/snap.$SNAP_NAME_xxxxx with the x characters replaced\nby random unique name.\n\nThose directories would never be recycled and would be re-created when\nthe mount namespace was to be discarded. This was accumulating data in\n/tmp that would not be normally removed unless the machine had rebooted.\nIn addition whenever multiple temporary directories existed for a single\nsnap the user would be unable to easily determine which one is the right\none, presenting usability issues for applications that use data in /tmp\nfor whatever reason (e.g. temporary log files).\n\nThis patch changes the path to be fixed, always\n/tmp/snap.$SNAP_INSTANCE_NAME/tmp. This opens the avenue towards snapd\nmanaging that directory (e.g. to remove it on snap removal).\n\nThere is only one user-visible consequence: discarding the mount\nnamespace and re-running a snap application no longer gives the\napplication fresh /tmp directory. It is unlikely anything apart from\nsnapd test suite will observe this change though.\n\nThe test that was checking if the base snap for a given snap has changed\nhas now been updated not to rely on the re-creation of /tmp.\n\nSigned-off-by: Zygmunt Krynicki <zygmunt.krynicki@canonical.com>\nRelated-To: https://bugzilla.suse.com/show_bug.cgi?id=1127368",
        "before_after_code_files": [
          "cmd/snap-confine/mount-support.c||cmd/snap-confine/mount-support.c",
          "cmd/snap-confine/snap-confine.apparmor.in||cmd/snap-confine/snap-confine.apparmor.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/snap-confine/mount-support.c||cmd/snap-confine/mount-support.c"
          ],
          "candidate": [
            "cmd/snap-confine/mount-support.c||cmd/snap-confine/mount-support.c"
          ]
        }
      },
      "candidate_diff": {
        "cmd/snap-confine/mount-support.c||cmd/snap-confine/mount-support.c": [
          "File: cmd/snap-confine/mount-support.c -> cmd/snap-confine/mount-support.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: static void setup_private_mount(const char *snap_name)",
          "64: {",
          "84:  }",
          "90:   die(\"cannot get current working directory\");",
          "97:  sc_do_mount(\"none\", \"/tmp\", NULL, MS_PRIVATE, NULL);",
          "101:  }",
          "106: }",
          "",
          "[Removed Lines]",
          "65:  char tmpdir[MAX_BUF] = { 0 };",
          "72:  sc_must_snprintf(tmpdir, sizeof(tmpdir), \"/tmp/snap.%s_XXXXXX\", snap_name);",
          "73:  if (mkdtemp(tmpdir) == NULL) {",
          "74:   die(\"cannot create temporary directory essential for private /tmp\");",
          "75:  }",
          "77:  mode_t old_mask = umask(0);",
          "78:  char *d = sc_strdup(tmpdir);",
          "79:  sc_must_snprintf(tmpdir, sizeof(tmpdir), \"%s/tmp\", d);",
          "80:  free(d);",
          "82:  if (mkdir(tmpdir, 01777) != 0) {",
          "83:   die(\"cannot create temporary directory for private /tmp\");",
          "85:  umask(old_mask);",
          "88:  char *pwd = get_current_dir_name();",
          "89:  if (pwd == NULL)",
          "91:  if (chdir(\"/\") != 0)",
          "92:   die(\"cannot change directory to '/'\");",
          "95:  sc_do_mount(tmpdir, \"/tmp\", NULL, MS_BIND, NULL);",
          "99:  if (chown(\"/tmp/\", 0, 0) < 0) {",
          "100:   die(\"cannot change ownership of /tmp\");",
          "103:  if (chdir(pwd) != 0)",
          "104:   die(\"cannot change current working directory to the original directory\");",
          "105:  free(pwd);",
          "",
          "[Added Lines]",
          "66:  mode_t old_mask = umask(0);",
          "82:  char base_dir[MAX_BUF] = { 0 };",
          "83:  char tmp_dir[MAX_BUF] = { 0 };",
          "84:  int base_dir_fd SC_CLEANUP(sc_cleanup_close) = -1;",
          "85:  int tmp_dir_fd SC_CLEANUP(sc_cleanup_close) = -1;",
          "86:  sc_must_snprintf(tmp_dir, sizeof(tmp_dir), \"/tmp/snap.%s/tmp\",",
          "87:     snap_name);",
          "88:  sc_must_snprintf(base_dir, sizeof(base_dir), \"/tmp/snap.%s\", snap_name);",
          "91:  if (mkdir(base_dir, 0700) < 0 && errno != EEXIST) {",
          "92:   die(\"cannot create base directory %s\", base_dir);",
          "94:  base_dir_fd = open(base_dir,",
          "95:       O_RDONLY | O_DIRECTORY | O_CLOEXEC | O_NOFOLLOW);",
          "96:  if (base_dir_fd < 0) {",
          "97:   die(\"cannot open base directory %s\", base_dir);",
          "98:  }",
          "99:  if (fchmod(base_dir_fd, 0700) < 0) {",
          "100:   die(\"cannot chmod base directory %s to 0700\", base_dir);",
          "101:  }",
          "102:  if (fchown(base_dir_fd, 0, 0) < 0) {",
          "103:   die(\"cannot chown base directory %s to root.root\", base_dir);",
          "104:  }",
          "106:  if (mkdirat(base_dir_fd, \"tmp\", 01777) < 0 && errno != EEXIST) {",
          "107:   die(\"cannot create private tmp directory %s/tmp\", base_dir);",
          "108:  }",
          "109:  tmp_dir_fd = openat(base_dir_fd, \"tmp\",",
          "110:        O_RDONLY | O_DIRECTORY | O_CLOEXEC | O_NOFOLLOW);",
          "111:  if (tmp_dir_fd < 0) {",
          "112:   die(\"cannot open private tmp directory %s/tmp\", base_dir);",
          "113:  }",
          "114:  if (fchmod(tmp_dir_fd, 01777) < 0) {",
          "115:   die(\"cannot chmod private tmp directory %s/tmp to 01777\",",
          "116:       base_dir);",
          "117:  }",
          "118:  if (fchown(tmp_dir_fd, 0, 0) < 0) {",
          "119:   die(\"cannot chown private tmp directory %s/tmp to root.root\",",
          "120:       base_dir);",
          "121:  }",
          "124:  char *pwd SC_CLEANUP(sc_cleanup_string) = NULL;",
          "125:  pwd = get_current_dir_name();",
          "126:  if (pwd == NULL) {",
          "128:  }",
          "129:  if (chdir(\"/\") < 0) {",
          "130:   die(\"cannot change directory to \\\"/\\\"\");",
          "131:  }",
          "132:  sc_do_mount(tmp_dir, \"/tmp\", NULL, MS_BIND, NULL);",
          "136:  if (chdir(pwd) < 0) {",
          "137:   die(\"cannot restore working directory to %s\", pwd);",
          "140:  umask(old_mask);",
          "",
          "---------------"
        ],
        "cmd/snap-confine/snap-confine.apparmor.in||cmd/snap-confine/snap-confine.apparmor.in": [
          "File: cmd/snap-confine/snap-confine.apparmor.in -> cmd/snap-confine/snap-confine.apparmor.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:     # set up snap-specific private /tmp dir",
          "249:     capability chown,",
          "250:     /tmp/ rw,",
          "253:     mount options=(rw private) ->  /tmp/,",
          "254:     mount options=(rw bind) /tmp/snap.*/tmp/ -> /tmp/,",
          "255:     mount fstype=devpts options=(rw) devpts -> /dev/pts/,",
          "",
          "[Removed Lines]",
          "251:     /tmp/snap.*/ w,",
          "252:     /tmp/snap.*/tmp/ w,",
          "",
          "[Added Lines]",
          "251:     /tmp/snap.*/ rw,",
          "252:     /tmp/snap.*/tmp/ rw,",
          "",
          "---------------"
        ]
      }
    }
  ]
}