{
  "cve_id": "CVE-2011-1768",
  "cve_desc": "The tunnels implementation in the Linux kernel before 2.6.34, when tunnel functionality is configured as a module, allows remote attackers to cause a denial of service (OOPS) by sending a packet during module loading.",
  "repo": "torvalds/linux",
  "patch_hash": "d5aa407f59f5b83d2c50ec88f5bf56d40f1f8978",
  "patch_info": {
    "commit_hash": "d5aa407f59f5b83d2c50ec88f5bf56d40f1f8978",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/d5aa407f59f5b83d2c50ec88f5bf56d40f1f8978",
    "files": [
      "net/ipv4/ipip.c",
      "net/ipv6/ip6_tunnel.c",
      "net/ipv6/sit.c",
      "net/ipv6/xfrm6_tunnel.c"
    ],
    "message": "tunnels: fix netns vs proto registration ordering\n\nSame stuff as in ip_gre patch: receive hook can be called before netns\nsetup is done, oopsing in net_generic().\n\nSigned-off-by: Alexey Dobriyan <adobriyan@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/ipv4/ipip.c||net/ipv4/ipip.c",
      "net/ipv6/ip6_tunnel.c||net/ipv6/ip6_tunnel.c",
      "net/ipv6/sit.c||net/ipv6/sit.c",
      "net/ipv6/xfrm6_tunnel.c||net/ipv6/xfrm6_tunnel.c"
    ]
  },
  "patch_diff": {
    "net/ipv4/ipip.c||net/ipv4/ipip.c": [
      "File: net/ipv4/ipip.c -> net/ipv4/ipip.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "831:  printk(banner);",
      "834:   printk(KERN_INFO \"ipip init: can't register tunnel\\n\");",
      "836:  }",
      "842:  return err;",
      "843: }",
      "",
      "[Removed Lines]",
      "833:  if (xfrm4_tunnel_register(&ipip_handler, AF_INET)) {",
      "835:   return -EAGAIN;",
      "838:  err = register_pernet_device(&ipip_net_ops);",
      "839:  if (err)",
      "840:   xfrm4_tunnel_deregister(&ipip_handler, AF_INET);",
      "",
      "[Added Lines]",
      "833:  err = register_pernet_device(&ipip_net_ops);",
      "834:  if (err < 0)",
      "835:   return err;",
      "836:  err = xfrm4_tunnel_register(&ipip_handler, AF_INET);",
      "837:  if (err < 0) {",
      "838:   unregister_pernet_device(&ipip_net_ops);",
      "",
      "---------------"
    ],
    "net/ipv6/ip6_tunnel.c||net/ipv6/ip6_tunnel.c": [
      "File: net/ipv6/ip6_tunnel.c -> net/ipv6/ip6_tunnel.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1461: {",
      "1462:  int  err;",
      "1465:   printk(KERN_ERR \"ip6_tunnel init: can't register ip4ip6\\n\");",
      "1468:  }",
      "1471:   printk(KERN_ERR \"ip6_tunnel init: can't register ip6ip6\\n\");",
      "1474:  }",
      "1479:  return 0;",
      "1483:  xfrm6_tunnel_deregister(&ip4ip6_handler, AF_INET);",
      "1485:  return err;",
      "1486: }",
      "",
      "[Removed Lines]",
      "1464:  if (xfrm6_tunnel_register(&ip4ip6_handler, AF_INET)) {",
      "1466:   err = -EAGAIN;",
      "1467:   goto out;",
      "1470:  if (xfrm6_tunnel_register(&ip6ip6_handler, AF_INET6)) {",
      "1472:   err = -EAGAIN;",
      "1473:   goto unreg_ip4ip6;",
      "1476:  err = register_pernet_device(&ip6_tnl_net_ops);",
      "1477:  if (err < 0)",
      "1478:   goto err_pernet;",
      "1480: err_pernet:",
      "1481:  xfrm6_tunnel_deregister(&ip6ip6_handler, AF_INET6);",
      "1482: unreg_ip4ip6:",
      "1484: out:",
      "",
      "[Added Lines]",
      "1464:  err = register_pernet_device(&ip6_tnl_net_ops);",
      "1465:  if (err < 0)",
      "1466:   goto out_pernet;",
      "1468:  err = xfrm6_tunnel_register(&ip4ip6_handler, AF_INET);",
      "1469:  if (err < 0) {",
      "1471:   goto out_ip4ip6;",
      "1474:  err = xfrm6_tunnel_register(&ip6ip6_handler, AF_INET6);",
      "1475:  if (err < 0) {",
      "1477:   goto out_ip6ip6;",
      "1482: out_ip6ip6:",
      "1484: out_ip4ip6:",
      "1485:  unregister_pernet_device(&ip6_tnl_net_ops);",
      "1486: out_pernet:",
      "",
      "---------------"
    ],
    "net/ipv6/sit.c||net/ipv6/sit.c": [
      "File: net/ipv6/sit.c -> net/ipv6/sit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1228:  printk(KERN_INFO \"IPv6 over IPv4 tunneling driver\\n\");",
      "1235:  err = register_pernet_device(&sit_net_ops);",
      "1236:  if (err < 0)",
      "1239:  return err;",
      "1240: }",
      "",
      "[Removed Lines]",
      "1230:  if (xfrm4_tunnel_register(&sit_handler, AF_INET6) < 0) {",
      "1231:   printk(KERN_INFO \"sit init: Can't add protocol\\n\");",
      "1232:   return -EAGAIN;",
      "1233:  }",
      "1237:   xfrm4_tunnel_deregister(&sit_handler, AF_INET6);",
      "",
      "[Added Lines]",
      "1232:   return err;",
      "1233:  err = xfrm4_tunnel_register(&sit_handler, AF_INET6);",
      "1234:  if (err < 0) {",
      "1235:   unregister_pernet_device(&sit_net_ops);",
      "1236:   printk(KERN_INFO \"sit init: Can't add protocol\\n\");",
      "1237:  }",
      "",
      "---------------"
    ],
    "net/ipv6/xfrm6_tunnel.c||net/ipv6/xfrm6_tunnel.c": [
      "File: net/ipv6/xfrm6_tunnel.c -> net/ipv6/xfrm6_tunnel.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "84:  return spi % XFRM6_TUNNEL_SPI_BYSPI_HSIZE;",
      "85: }",
      "104: static struct xfrm6_tunnel_spi *__xfrm6_tunnel_spi_lookup(struct net *net, xfrm_address_t *saddr)",
      "105: {",
      "106:  struct xfrm6_tunnel_net *xfrm6_tn = xfrm6_tunnel_pernet(net);",
      "",
      "[Removed Lines]",
      "88: static int __init xfrm6_tunnel_spi_init(void)",
      "89: {",
      "90:  xfrm6_tunnel_spi_kmem = kmem_cache_create(\"xfrm6_tunnel_spi\",",
      "91:         sizeof(struct xfrm6_tunnel_spi),",
      "92:         0, SLAB_HWCACHE_ALIGN,",
      "93:         NULL);",
      "94:  if (!xfrm6_tunnel_spi_kmem)",
      "95:   return -ENOMEM;",
      "96:  return 0;",
      "97: }",
      "99: static void xfrm6_tunnel_spi_fini(void)",
      "100: {",
      "101:  kmem_cache_destroy(xfrm6_tunnel_spi_kmem);",
      "102: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "375: {",
      "376:  int rv;",
      "378:  rv = xfrm_register_type(&xfrm6_tunnel_type, AF_INET6);",
      "379:  if (rv < 0)",
      "381:  rv = xfrm6_tunnel_register(&xfrm6_tunnel_handler, AF_INET6);",
      "382:  if (rv < 0)",
      "384:  rv = xfrm6_tunnel_register(&xfrm46_tunnel_handler, AF_INET);",
      "385:  if (rv < 0)",
      "393:  return 0;",
      "400:  xfrm6_tunnel_deregister(&xfrm6_tunnel_handler, AF_INET6);",
      "402:  xfrm_unregister_type(&xfrm6_tunnel_type, AF_INET6);",
      "404:  return rv;",
      "405: }",
      "407: static void __exit xfrm6_tunnel_fini(void)",
      "408: {",
      "411:  xfrm6_tunnel_deregister(&xfrm46_tunnel_handler, AF_INET);",
      "412:  xfrm6_tunnel_deregister(&xfrm6_tunnel_handler, AF_INET6);",
      "413:  xfrm_unregister_type(&xfrm6_tunnel_type, AF_INET6);",
      "414: }",
      "416: module_init(xfrm6_tunnel_init);",
      "",
      "[Removed Lines]",
      "380:   goto err;",
      "383:   goto unreg;",
      "386:   goto dereg6;",
      "387:  rv = xfrm6_tunnel_spi_init();",
      "388:  if (rv < 0)",
      "389:   goto dereg46;",
      "390:  rv = register_pernet_subsys(&xfrm6_tunnel_net_ops);",
      "391:  if (rv < 0)",
      "392:   goto deregspi;",
      "395: deregspi:",
      "396:  xfrm6_tunnel_spi_fini();",
      "397: dereg46:",
      "398:  xfrm6_tunnel_deregister(&xfrm46_tunnel_handler, AF_INET);",
      "399: dereg6:",
      "401: unreg:",
      "403: err:",
      "409:  unregister_pernet_subsys(&xfrm6_tunnel_net_ops);",
      "410:  xfrm6_tunnel_spi_fini();",
      "",
      "[Added Lines]",
      "361:  xfrm6_tunnel_spi_kmem = kmem_cache_create(\"xfrm6_tunnel_spi\",",
      "362:         sizeof(struct xfrm6_tunnel_spi),",
      "363:         0, SLAB_HWCACHE_ALIGN,",
      "364:         NULL);",
      "365:  if (!xfrm6_tunnel_spi_kmem)",
      "366:   return -ENOMEM;",
      "367:  rv = register_pernet_subsys(&xfrm6_tunnel_net_ops);",
      "368:  if (rv < 0)",
      "369:   goto out_pernet;",
      "372:   goto out_type;",
      "375:   goto out_xfrm6;",
      "378:   goto out_xfrm46;",
      "381: out_xfrm46:",
      "383: out_xfrm6:",
      "385: out_type:",
      "386:  unregister_pernet_subsys(&xfrm6_tunnel_net_ops);",
      "387: out_pernet:",
      "388:  kmem_cache_destroy(xfrm6_tunnel_spi_kmem);",
      "397:  unregister_pernet_subsys(&xfrm6_tunnel_net_ops);",
      "398:  kmem_cache_destroy(xfrm6_tunnel_spi_kmem);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e924960dacdf85d118a98c7262edf2f99c3015cf",
      "candidate_info": {
        "commit_hash": "e924960dacdf85d118a98c7262edf2f99c3015cf",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e924960dacdf85d118a98c7262edf2f99c3015cf",
        "files": [
          "net/ipv6/xfrm6_tunnel.c"
        ],
        "message": "netns xfrm: fixup xfrm6_tunnel error propagation\n\nSigned-off-by: Alexey Dobriyan <adobriyan@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv6/xfrm6_tunnel.c||net/ipv6/xfrm6_tunnel.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/xfrm6_tunnel.c||net/ipv6/xfrm6_tunnel.c"
          ],
          "candidate": [
            "net/ipv6/xfrm6_tunnel.c||net/ipv6/xfrm6_tunnel.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv6/xfrm6_tunnel.c||net/ipv6/xfrm6_tunnel.c": [
          "File: net/ipv6/xfrm6_tunnel.c -> net/ipv6/xfrm6_tunnel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "354: static int __init xfrm6_tunnel_init(void)",
          "355: {",
          "357:   goto err;",
          "359:   goto unreg;",
          "361:   goto dereg6;",
          "363:   goto dereg46;",
          "364:  return 0;",
          "",
          "[Removed Lines]",
          "356:  if (xfrm_register_type(&xfrm6_tunnel_type, AF_INET6) < 0)",
          "358:  if (xfrm6_tunnel_register(&xfrm6_tunnel_handler, AF_INET6))",
          "360:  if (xfrm6_tunnel_register(&xfrm46_tunnel_handler, AF_INET))",
          "362:  if (xfrm6_tunnel_spi_init() < 0)",
          "",
          "[Added Lines]",
          "356:  int rv;",
          "358:  rv = xfrm_register_type(&xfrm6_tunnel_type, AF_INET6);",
          "359:  if (rv < 0)",
          "361:  rv = xfrm6_tunnel_register(&xfrm6_tunnel_handler, AF_INET6);",
          "362:  if (rv < 0)",
          "364:  rv = xfrm6_tunnel_register(&xfrm46_tunnel_handler, AF_INET);",
          "365:  if (rv < 0)",
          "367:  rv = xfrm6_tunnel_spi_init();",
          "368:  if (rv < 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "370: unreg:",
          "371:  xfrm_unregister_type(&xfrm6_tunnel_type, AF_INET6);",
          "372: err:",
          "374: }",
          "376: static void __exit xfrm6_tunnel_fini(void)",
          "",
          "[Removed Lines]",
          "373:  return -EAGAIN;",
          "",
          "[Added Lines]",
          "379:  return rv;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1664773907a2b69e2a3019598dcbeffa6bc724b",
      "candidate_info": {
        "commit_hash": "a1664773907a2b69e2a3019598dcbeffa6bc724b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a1664773907a2b69e2a3019598dcbeffa6bc724b",
        "files": [
          "include/net/xfrm.h",
          "net/ipv6/ipcomp6.c",
          "net/ipv6/xfrm6_tunnel.c"
        ],
        "message": "netns xfrm: xfrm6_tunnel in netns\n\nI'm not sure about rcu stuff near kmem cache destruction:\n* checks for non-empty hashes look bogus, they're done _before_\n  rcu_berrier()\n* unregistering netns ops is done before kmem_cache destoy\n  (as it should), and unregistering involves rcu barriers by itself\n\nSo it looks nothing should be done.\n\nSigned-off-by: Alexey Dobriyan <adobriyan@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/xfrm.h||include/net/xfrm.h",
          "net/ipv6/ipcomp6.c||net/ipv6/ipcomp6.c",
          "net/ipv6/xfrm6_tunnel.c||net/ipv6/xfrm6_tunnel.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/xfrm6_tunnel.c||net/ipv6/xfrm6_tunnel.c"
          ],
          "candidate": [
            "net/ipv6/xfrm6_tunnel.c||net/ipv6/xfrm6_tunnel.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/xfrm.h||include/net/xfrm.h": [
          "File: include/net/xfrm.h -> include/net/xfrm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1408:        xfrm_address_t *saddr, u8 proto);",
          "1409: extern int xfrm6_tunnel_register(struct xfrm6_tunnel *handler, unsigned short family);",
          "1410: extern int xfrm6_tunnel_deregister(struct xfrm6_tunnel *handler, unsigned short family);",
          "1414: extern int xfrm6_extract_output(struct xfrm_state *x, struct sk_buff *skb);",
          "1415: extern int xfrm6_prepare_output(struct xfrm_state *x, struct sk_buff *skb);",
          "1416: extern int xfrm6_output(struct sk_buff *skb);",
          "",
          "[Removed Lines]",
          "1411: extern __be32 xfrm6_tunnel_alloc_spi(xfrm_address_t *saddr);",
          "1412: extern void xfrm6_tunnel_free_spi(xfrm_address_t *saddr);",
          "1413: extern __be32 xfrm6_tunnel_spi_lookup(xfrm_address_t *saddr);",
          "",
          "[Added Lines]",
          "1411: extern __be32 xfrm6_tunnel_alloc_spi(struct net *net, xfrm_address_t *saddr);",
          "1412: extern void xfrm6_tunnel_free_spi(struct net *net, xfrm_address_t *saddr);",
          "1413: extern __be32 xfrm6_tunnel_spi_lookup(struct net *net, xfrm_address_t *saddr);",
          "",
          "---------------"
        ],
        "net/ipv6/ipcomp6.c||net/ipv6/ipcomp6.c": [
          "File: net/ipv6/ipcomp6.c -> net/ipv6/ipcomp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   goto out;",
          "83:  t->id.proto = IPPROTO_IPV6;",
          "85:  if (!t->id.spi)",
          "86:   goto error;",
          "",
          "[Removed Lines]",
          "84:  t->id.spi = xfrm6_tunnel_alloc_spi((xfrm_address_t *)&x->props.saddr);",
          "",
          "[Added Lines]",
          "84:  t->id.spi = xfrm6_tunnel_alloc_spi(&init_net, (xfrm_address_t *)&x->props.saddr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:  struct xfrm_state *t = NULL;",
          "113:  __be32 spi;",
          "116:  if (spi)",
          "117:   t = xfrm_state_lookup(&init_net, (xfrm_address_t *)&x->id.daddr,",
          "118:            spi, IPPROTO_IPV6, AF_INET6);",
          "",
          "[Removed Lines]",
          "115:  spi = xfrm6_tunnel_spi_lookup((xfrm_address_t *)&x->props.saddr);",
          "",
          "[Added Lines]",
          "115:  spi = xfrm6_tunnel_spi_lookup(&init_net, (xfrm_address_t *)&x->props.saddr);",
          "",
          "---------------"
        ],
        "net/ipv6/xfrm6_tunnel.c||net/ipv6/xfrm6_tunnel.c": [
          "File: net/ipv6/xfrm6_tunnel.c -> net/ipv6/xfrm6_tunnel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <linux/ipv6.h>",
          "31: #include <linux/icmpv6.h>",
          "32: #include <linux/mutex.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <net/netns/generic.h>",
          "35: #define XFRM6_TUNNEL_SPI_BYADDR_HSIZE 256",
          "36: #define XFRM6_TUNNEL_SPI_BYSPI_HSIZE 256",
          "38: #define XFRM6_TUNNEL_SPI_MIN 1",
          "39: #define XFRM6_TUNNEL_SPI_MAX 0xffffffff",
          "41: struct xfrm6_tunnel_net {",
          "42:  struct hlist_head spi_byaddr[XFRM6_TUNNEL_SPI_BYADDR_HSIZE];",
          "43:  struct hlist_head spi_byspi[XFRM6_TUNNEL_SPI_BYSPI_HSIZE];",
          "44:  u32 spi;",
          "45: };",
          "47: static int xfrm6_tunnel_net_id __read_mostly;",
          "48: static inline struct xfrm6_tunnel_net *xfrm6_tunnel_pernet(struct net *net)",
          "49: {",
          "50:  return net_generic(net, xfrm6_tunnel_net_id);",
          "51: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: static DEFINE_SPINLOCK(xfrm6_tunnel_spi_lock);",
          "54: static struct kmem_cache *xfrm6_tunnel_spi_kmem __read_mostly;",
          "62: static inline unsigned xfrm6_tunnel_spi_hash_byaddr(xfrm_address_t *addr)",
          "63: {",
          "64:  unsigned h;",
          "",
          "[Removed Lines]",
          "49: static u32 xfrm6_tunnel_spi;",
          "51: #define XFRM6_TUNNEL_SPI_MIN 1",
          "52: #define XFRM6_TUNNEL_SPI_MAX 0xffffffff",
          "56: #define XFRM6_TUNNEL_SPI_BYADDR_HSIZE 256",
          "57: #define XFRM6_TUNNEL_SPI_BYSPI_HSIZE 256",
          "59: static struct hlist_head xfrm6_tunnel_spi_byaddr[XFRM6_TUNNEL_SPI_BYADDR_HSIZE];",
          "60: static struct hlist_head xfrm6_tunnel_spi_byspi[XFRM6_TUNNEL_SPI_BYSPI_HSIZE];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77: }",
          "81: {",
          "85:  xfrm6_tunnel_spi_kmem = kmem_cache_create(\"xfrm6_tunnel_spi\",",
          "86:         sizeof(struct xfrm6_tunnel_spi),",
          "87:         0, SLAB_HWCACHE_ALIGN,",
          "88:         NULL);",
          "89:  if (!xfrm6_tunnel_spi_kmem)",
          "90:   return -ENOMEM;",
          "96:  return 0;",
          "97: }",
          "99: static void xfrm6_tunnel_spi_fini(void)",
          "100: {",
          "112:  kmem_cache_destroy(xfrm6_tunnel_spi_kmem);",
          "114: }",
          "117: {",
          "118:  struct xfrm6_tunnel_spi *x6spi;",
          "119:  struct hlist_node *pos;",
          "121:  hlist_for_each_entry_rcu(x6spi, pos,",
          "123:         list_byaddr) {",
          "124:   if (memcmp(&x6spi->addr, saddr, sizeof(x6spi->addr)) == 0)",
          "125:    return x6spi;",
          "",
          "[Removed Lines]",
          "80: static int xfrm6_tunnel_spi_init(void)",
          "82:  int i;",
          "84:  xfrm6_tunnel_spi = 0;",
          "92:  for (i = 0; i < XFRM6_TUNNEL_SPI_BYADDR_HSIZE; i++)",
          "93:   INIT_HLIST_HEAD(&xfrm6_tunnel_spi_byaddr[i]);",
          "94:  for (i = 0; i < XFRM6_TUNNEL_SPI_BYSPI_HSIZE; i++)",
          "95:   INIT_HLIST_HEAD(&xfrm6_tunnel_spi_byspi[i]);",
          "101:  int i;",
          "103:  for (i = 0; i < XFRM6_TUNNEL_SPI_BYADDR_HSIZE; i++) {",
          "104:   if (!hlist_empty(&xfrm6_tunnel_spi_byaddr[i]))",
          "105:    return;",
          "106:  }",
          "107:  for (i = 0; i < XFRM6_TUNNEL_SPI_BYSPI_HSIZE; i++) {",
          "108:   if (!hlist_empty(&xfrm6_tunnel_spi_byspi[i]))",
          "109:    return;",
          "110:  }",
          "111:  rcu_barrier();",
          "113:  xfrm6_tunnel_spi_kmem = NULL;",
          "116: static struct xfrm6_tunnel_spi *__xfrm6_tunnel_spi_lookup(xfrm_address_t *saddr)",
          "122:         &xfrm6_tunnel_spi_byaddr[xfrm6_tunnel_spi_hash_byaddr(saddr)],",
          "",
          "[Added Lines]",
          "88: static int __init xfrm6_tunnel_spi_init(void)",
          "104: static struct xfrm6_tunnel_spi *__xfrm6_tunnel_spi_lookup(struct net *net, xfrm_address_t *saddr)",
          "106:  struct xfrm6_tunnel_net *xfrm6_tn = xfrm6_tunnel_pernet(net);",
          "111:         &xfrm6_tn->spi_byaddr[xfrm6_tunnel_spi_hash_byaddr(saddr)],",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:  return NULL;",
          "129: }",
          "132: {",
          "133:  struct xfrm6_tunnel_spi *x6spi;",
          "134:  u32 spi;",
          "136:  rcu_read_lock_bh();",
          "138:  spi = x6spi ? x6spi->spi : 0;",
          "139:  rcu_read_unlock_bh();",
          "140:  return htonl(spi);",
          "",
          "[Removed Lines]",
          "131: __be32 xfrm6_tunnel_spi_lookup(xfrm_address_t *saddr)",
          "137:  x6spi = __xfrm6_tunnel_spi_lookup(saddr);",
          "",
          "[Added Lines]",
          "120: __be32 xfrm6_tunnel_spi_lookup(struct net *net, xfrm_address_t *saddr)",
          "126:  x6spi = __xfrm6_tunnel_spi_lookup(net, saddr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143: EXPORT_SYMBOL(xfrm6_tunnel_spi_lookup);",
          "146: {",
          "147:  struct xfrm6_tunnel_spi *x6spi;",
          "148:  int index = xfrm6_tunnel_spi_hash_byspi(spi);",
          "149:  struct hlist_node *pos;",
          "151:  hlist_for_each_entry(x6spi, pos,",
          "153:         list_byspi) {",
          "154:   if (x6spi->spi == spi)",
          "155:    return -1;",
          "",
          "[Removed Lines]",
          "145: static int __xfrm6_tunnel_spi_check(u32 spi)",
          "152:         &xfrm6_tunnel_spi_byspi[index],",
          "",
          "[Added Lines]",
          "134: static int __xfrm6_tunnel_spi_check(struct net *net, u32 spi)",
          "136:  struct xfrm6_tunnel_net *xfrm6_tn = xfrm6_tunnel_pernet(net);",
          "142:         &xfrm6_tn->spi_byspi[index],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "157:  return index;",
          "158: }",
          "161: {",
          "162:  u32 spi;",
          "163:  struct xfrm6_tunnel_spi *x6spi;",
          "164:  int index;",
          "169:  else",
          "174:   if (index >= 0)",
          "175:    goto alloc_spi;",
          "176:  }",
          "179:   if (index >= 0)",
          "180:    goto alloc_spi;",
          "181:  }",
          "182:  spi = 0;",
          "183:  goto out;",
          "184: alloc_spi:",
          "186:  x6spi = kmem_cache_alloc(xfrm6_tunnel_spi_kmem, GFP_ATOMIC);",
          "187:  if (!x6spi)",
          "188:   goto out;",
          "",
          "[Removed Lines]",
          "160: static u32 __xfrm6_tunnel_alloc_spi(xfrm_address_t *saddr)",
          "166:  if (xfrm6_tunnel_spi < XFRM6_TUNNEL_SPI_MIN ||",
          "167:      xfrm6_tunnel_spi >= XFRM6_TUNNEL_SPI_MAX)",
          "168:   xfrm6_tunnel_spi = XFRM6_TUNNEL_SPI_MIN;",
          "170:   xfrm6_tunnel_spi++;",
          "172:  for (spi = xfrm6_tunnel_spi; spi <= XFRM6_TUNNEL_SPI_MAX; spi++) {",
          "173:   index = __xfrm6_tunnel_spi_check(spi);",
          "177:  for (spi = XFRM6_TUNNEL_SPI_MIN; spi < xfrm6_tunnel_spi; spi++) {",
          "178:   index = __xfrm6_tunnel_spi_check(spi);",
          "185:  xfrm6_tunnel_spi = spi;",
          "",
          "[Added Lines]",
          "150: static u32 __xfrm6_tunnel_alloc_spi(struct net *net, xfrm_address_t *saddr)",
          "152:  struct xfrm6_tunnel_net *xfrm6_tn = xfrm6_tunnel_pernet(net);",
          "157:  if (xfrm6_tn->spi < XFRM6_TUNNEL_SPI_MIN ||",
          "158:      xfrm6_tn->spi >= XFRM6_TUNNEL_SPI_MAX)",
          "159:   xfrm6_tn->spi = XFRM6_TUNNEL_SPI_MIN;",
          "161:   xfrm6_tn->spi++;",
          "163:  for (spi = xfrm6_tn->spi; spi <= XFRM6_TUNNEL_SPI_MAX; spi++) {",
          "164:   index = __xfrm6_tunnel_spi_check(net, spi);",
          "168:  for (spi = XFRM6_TUNNEL_SPI_MIN; spi < xfrm6_tn->spi; spi++) {",
          "169:   index = __xfrm6_tunnel_spi_check(net, spi);",
          "176:  xfrm6_tn->spi = spi;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "192:  x6spi->spi = spi;",
          "193:  atomic_set(&x6spi->refcnt, 1);",
          "197:  index = xfrm6_tunnel_spi_hash_byaddr(saddr);",
          "199: out:",
          "200:  return spi;",
          "201: }",
          "204: {",
          "205:  struct xfrm6_tunnel_spi *x6spi;",
          "206:  u32 spi;",
          "208:  spin_lock_bh(&xfrm6_tunnel_spi_lock);",
          "210:  if (x6spi) {",
          "211:   atomic_inc(&x6spi->refcnt);",
          "212:   spi = x6spi->spi;",
          "213:  } else",
          "215:  spin_unlock_bh(&xfrm6_tunnel_spi_lock);",
          "217:  return htonl(spi);",
          "",
          "[Removed Lines]",
          "195:  hlist_add_head_rcu(&x6spi->list_byspi, &xfrm6_tunnel_spi_byspi[index]);",
          "198:  hlist_add_head_rcu(&x6spi->list_byaddr, &xfrm6_tunnel_spi_byaddr[index]);",
          "203: __be32 xfrm6_tunnel_alloc_spi(xfrm_address_t *saddr)",
          "209:  x6spi = __xfrm6_tunnel_spi_lookup(saddr);",
          "214:   spi = __xfrm6_tunnel_alloc_spi(saddr);",
          "",
          "[Added Lines]",
          "186:  hlist_add_head_rcu(&x6spi->list_byspi, &xfrm6_tn->spi_byspi[index]);",
          "189:  hlist_add_head_rcu(&x6spi->list_byaddr, &xfrm6_tn->spi_byaddr[index]);",
          "194: __be32 xfrm6_tunnel_alloc_spi(struct net *net, xfrm_address_t *saddr)",
          "200:  x6spi = __xfrm6_tunnel_spi_lookup(net, saddr);",
          "205:   spi = __xfrm6_tunnel_alloc_spi(net, saddr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "225:    container_of(head, struct xfrm6_tunnel_spi, rcu_head));",
          "226: }",
          "229: {",
          "230:  struct xfrm6_tunnel_spi *x6spi;",
          "231:  struct hlist_node *pos, *n;",
          "233:  spin_lock_bh(&xfrm6_tunnel_spi_lock);",
          "235:  hlist_for_each_entry_safe(x6spi, pos, n,",
          "237:       list_byaddr)",
          "238:  {",
          "239:   if (memcmp(&x6spi->addr, saddr, sizeof(x6spi->addr)) == 0) {",
          "",
          "[Removed Lines]",
          "228: void xfrm6_tunnel_free_spi(xfrm_address_t *saddr)",
          "236:       &xfrm6_tunnel_spi_byaddr[xfrm6_tunnel_spi_hash_byaddr(saddr)],",
          "",
          "[Added Lines]",
          "219: void xfrm6_tunnel_free_spi(struct net *net, xfrm_address_t *saddr)",
          "221:  struct xfrm6_tunnel_net *xfrm6_tn = xfrm6_tunnel_pernet(net);",
          "228:       &xfrm6_tn->spi_byaddr[xfrm6_tunnel_spi_hash_byaddr(saddr)],",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "264: static int xfrm6_tunnel_rcv(struct sk_buff *skb)",
          "265: {",
          "266:  struct ipv6hdr *iph = ipv6_hdr(skb);",
          "267:  __be32 spi;",
          "270:  return xfrm6_rcv_spi(skb, IPPROTO_IPV6, spi) > 0 ? : 0;",
          "271: }",
          "",
          "[Removed Lines]",
          "269:  spi = xfrm6_tunnel_spi_lookup((xfrm_address_t *)&iph->saddr);",
          "",
          "[Added Lines]",
          "258:  struct net *net = dev_net(skb->dev);",
          "262:  spi = xfrm6_tunnel_spi_lookup(net, (xfrm_address_t *)&iph->saddr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "327: static void xfrm6_tunnel_destroy(struct xfrm_state *x)",
          "328: {",
          "330: }",
          "332: static const struct xfrm_type xfrm6_tunnel_type = {",
          "",
          "[Removed Lines]",
          "329:  xfrm6_tunnel_free_spi((xfrm_address_t *)&x->props.saddr);",
          "",
          "[Added Lines]",
          "322:  struct net *net = xs_net(x);",
          "324:  xfrm6_tunnel_free_spi(net, (xfrm_address_t *)&x->props.saddr);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "351:  .priority = 2,",
          "352: };",
          "354: static int __init xfrm6_tunnel_init(void)",
          "355: {",
          "356:  int rv;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349: static int __net_init xfrm6_tunnel_net_init(struct net *net)",
          "350: {",
          "351:  struct xfrm6_tunnel_net *xfrm6_tn = xfrm6_tunnel_pernet(net);",
          "352:  unsigned int i;",
          "354:  for (i = 0; i < XFRM6_TUNNEL_SPI_BYADDR_HSIZE; i++)",
          "355:   INIT_HLIST_HEAD(&xfrm6_tn->spi_byaddr[i]);",
          "356:  for (i = 0; i < XFRM6_TUNNEL_SPI_BYSPI_HSIZE; i++)",
          "357:   INIT_HLIST_HEAD(&xfrm6_tn->spi_byspi[i]);",
          "358:  xfrm6_tn->spi = 0;",
          "360:  return 0;",
          "361: }",
          "363: static void __net_exit xfrm6_tunnel_net_exit(struct net *net)",
          "364: {",
          "365: }",
          "367: static struct pernet_operations xfrm6_tunnel_net_ops = {",
          "368:  .init = xfrm6_tunnel_net_init,",
          "369:  .exit = xfrm6_tunnel_net_exit,",
          "370:  .id = &xfrm6_tunnel_net_id,",
          "371:  .size = sizeof(struct xfrm6_tunnel_net),",
          "372: };",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "367:  rv = xfrm6_tunnel_spi_init();",
          "368:  if (rv < 0)",
          "369:   goto dereg46;",
          "370:  return 0;",
          "372: dereg46:",
          "373:  xfrm6_tunnel_deregister(&xfrm46_tunnel_handler, AF_INET);",
          "374: dereg6:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:  rv = register_pernet_subsys(&xfrm6_tunnel_net_ops);",
          "391:  if (rv < 0)",
          "392:   goto deregspi;",
          "395: deregspi:",
          "396:  xfrm6_tunnel_spi_fini();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "382: static void __exit xfrm6_tunnel_fini(void)",
          "383: {",
          "384:  xfrm6_tunnel_spi_fini();",
          "385:  xfrm6_tunnel_deregister(&xfrm46_tunnel_handler, AF_INET);",
          "386:  xfrm6_tunnel_deregister(&xfrm6_tunnel_handler, AF_INET6);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409:  unregister_pernet_subsys(&xfrm6_tunnel_net_ops);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86de8a631e90a96d136ffd877719471a0b8d8b6d",
      "candidate_info": {
        "commit_hash": "86de8a631e90a96d136ffd877719471a0b8d8b6d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/86de8a631e90a96d136ffd877719471a0b8d8b6d",
        "files": [
          "net/ipv4/ipip.c"
        ],
        "message": "net: Simplify ipip pernet operations.\n\nTake advantage of the new pernet automatic storage management,\nand stop using compatibility network namespace functions.\n\nSigned-off-by: Eric W. Biederman <ebiederm@xmission.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv4/ipip.c||net/ipv4/ipip.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv4/ipip.c||net/ipv4/ipip.c"
          ],
          "candidate": [
            "net/ipv4/ipip.c||net/ipv4/ipip.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv4/ipip.c||net/ipv4/ipip.c": [
          "File: net/ipv4/ipip.c -> net/ipv4/ipip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "776: static int ipip_init_net(struct net *net)",
          "777: {",
          "778:  int err;",
          "790:  ipn->tunnels[0] = ipn->tunnels_wc;",
          "791:  ipn->tunnels[1] = ipn->tunnels_l;",
          "",
          "[Removed Lines]",
          "779:  struct ipip_net *ipn;",
          "781:  err = -ENOMEM;",
          "782:  ipn = kzalloc(sizeof(struct ipip_net), GFP_KERNEL);",
          "783:  if (ipn == NULL)",
          "784:   goto err_alloc;",
          "786:  err = net_assign_generic(net, ipip_net_id, ipn);",
          "787:  if (err < 0)",
          "788:   goto err_assign;",
          "",
          "[Added Lines]",
          "778:  struct ipip_net *ipn = net_generic(net, ipip_net_id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "812:  free_netdev(ipn->fb_tunnel_dev);",
          "813: err_alloc_dev:",
          "818:  return err;",
          "819: }",
          "821: static void ipip_exit_net(struct net *net)",
          "822: {",
          "824:  LIST_HEAD(list);",
          "827:  rtnl_lock();",
          "828:  ipip_destroy_tunnels(ipn, &list);",
          "829:  unregister_netdevice_queue(ipn->fb_tunnel_dev, &list);",
          "830:  unregister_netdevice_many(&list);",
          "831:  rtnl_unlock();",
          "833: }",
          "835: static struct pernet_operations ipip_net_ops = {",
          "836:  .init = ipip_init_net,",
          "837:  .exit = ipip_exit_net,",
          "838: };",
          "840: static int __init ipip_init(void)",
          "",
          "[Removed Lines]",
          "815: err_assign:",
          "816:  kfree(ipn);",
          "817: err_alloc:",
          "823:  struct ipip_net *ipn;",
          "826:  ipn = net_generic(net, ipip_net_id);",
          "832:  kfree(ipn);",
          "",
          "[Added Lines]",
          "811:  struct ipip_net *ipn = net_generic(net, ipip_net_id);",
          "824:  .id   = &ipip_net_id,",
          "825:  .size = sizeof(struct ipip_net),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "848:   return -EAGAIN;",
          "849:  }",
          "852:  if (err)",
          "853:   xfrm4_tunnel_deregister(&ipip_handler, AF_INET);",
          "",
          "[Removed Lines]",
          "851:  err = register_pernet_gen_device(&ipip_net_id, &ipip_net_ops);",
          "",
          "[Added Lines]",
          "839:  err = register_pernet_device(&ipip_net_ops);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "860:  if (xfrm4_tunnel_deregister(&ipip_handler, AF_INET))",
          "861:   printk(KERN_INFO \"ipip close: can't deregister tunnel\\n\");",
          "864: }",
          "866: module_init(ipip_init);",
          "",
          "[Removed Lines]",
          "863:  unregister_pernet_gen_device(ipip_net_id, &ipip_net_ops);",
          "",
          "[Added Lines]",
          "851:  unregister_pernet_device(&ipip_net_ops);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "671011720baa222b6de667cd688aed4dc8908924",
      "candidate_info": {
        "commit_hash": "671011720baa222b6de667cd688aed4dc8908924",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/671011720baa222b6de667cd688aed4dc8908924",
        "files": [
          "net/ipv6/sit.c"
        ],
        "message": "net: Simplify ipip6 aka sit pernet operations.\n\nTake advantage of the new pernet automatic storage management,\nand stop using compatibility network namespace functions.\n\nSigned-off-by: Eric W. Biederman <ebiederm@xmission.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv6/sit.c||net/ipv6/sit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/sit.c||net/ipv6/sit.c"
          ],
          "candidate": [
            "net/ipv6/sit.c||net/ipv6/sit.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv6/sit.c||net/ipv6/sit.c": [
          "File: net/ipv6/sit.c -> net/ipv6/sit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1165: static int sit_init_net(struct net *net)",
          "1166: {",
          "1167:  int err;",
          "1179:  sitn->tunnels[0] = sitn->tunnels_wc;",
          "1180:  sitn->tunnels[1] = sitn->tunnels_l;",
          "",
          "[Removed Lines]",
          "1168:  struct sit_net *sitn;",
          "1170:  err = -ENOMEM;",
          "1171:  sitn = kzalloc(sizeof(struct sit_net), GFP_KERNEL);",
          "1172:  if (sitn == NULL)",
          "1173:   goto err_alloc;",
          "1175:  err = net_assign_generic(net, sit_net_id, sitn);",
          "1176:  if (err < 0)",
          "1177:   goto err_assign;",
          "",
          "[Added Lines]",
          "1167:  struct sit_net *sitn = net_generic(net, sit_net_id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1201:  dev_put(sitn->fb_tunnel_dev);",
          "1202:  free_netdev(sitn->fb_tunnel_dev);",
          "1203: err_alloc_dev:",
          "1208:  return err;",
          "1209: }",
          "1211: static void sit_exit_net(struct net *net)",
          "1212: {",
          "1214:  LIST_HEAD(list);",
          "1217:  rtnl_lock();",
          "1218:  sit_destroy_tunnels(sitn, &list);",
          "1219:  unregister_netdevice_queue(sitn->fb_tunnel_dev, &list);",
          "1220:  unregister_netdevice_many(&list);",
          "1221:  rtnl_unlock();",
          "1223: }",
          "1225: static struct pernet_operations sit_net_ops = {",
          "1226:  .init = sit_init_net,",
          "1227:  .exit = sit_exit_net,",
          "1228: };",
          "1230: static void __exit sit_cleanup(void)",
          "1231: {",
          "1232:  xfrm4_tunnel_deregister(&sit_handler, AF_INET6);",
          "1236: }",
          "",
          "[Removed Lines]",
          "1205: err_assign:",
          "1206:  kfree(sitn);",
          "1207: err_alloc:",
          "1213:  struct sit_net *sitn;",
          "1216:  sitn = net_generic(net, sit_net_id);",
          "1222:  kfree(sitn);",
          "1234:  unregister_pernet_gen_device(sit_net_id, &sit_net_ops);",
          "",
          "[Added Lines]",
          "1200:  struct sit_net *sitn = net_generic(net, sit_net_id);",
          "1213:  .id   = &sit_net_id,",
          "1214:  .size = sizeof(struct sit_net),",
          "1221:  unregister_pernet_device(&sit_net_ops);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1246:   return -EAGAIN;",
          "1247:  }",
          "1250:  if (err < 0)",
          "1251:   xfrm4_tunnel_deregister(&sit_handler, AF_INET6);",
          "",
          "[Removed Lines]",
          "1249:  err = register_pernet_gen_device(&sit_net_id, &sit_net_ops);",
          "",
          "[Added Lines]",
          "1236:  err = register_pernet_device(&sit_net_ops);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91cc3bb0b04ffef49bb044e06b221ea5de053e91",
      "candidate_info": {
        "commit_hash": "91cc3bb0b04ffef49bb044e06b221ea5de053e91",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/91cc3bb0b04ffef49bb044e06b221ea5de053e91",
        "files": [
          "net/ipv6/xfrm6_tunnel.c"
        ],
        "message": "xfrm6_tunnel: RCU conversion\n\nxfrm6_tunnels use one rwlock to protect their hash tables.\n\nPlain and straightforward conversion to RCU locking to permit better SMP\nperformance.\n\nSigned-off-by: Eric Dumazet <eric.dumazet@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv6/xfrm6_tunnel.c||net/ipv6/xfrm6_tunnel.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/xfrm6_tunnel.c||net/ipv6/xfrm6_tunnel.c"
          ],
          "candidate": [
            "net/ipv6/xfrm6_tunnel.c||net/ipv6/xfrm6_tunnel.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv6/xfrm6_tunnel.c||net/ipv6/xfrm6_tunnel.c": [
          "File: net/ipv6/xfrm6_tunnel.c -> net/ipv6/xfrm6_tunnel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <linux/module.h>",
          "25: #include <linux/xfrm.h>",
          "27: #include <net/ip.h>",
          "28: #include <net/xfrm.h>",
          "29: #include <net/ipv6.h>",
          "",
          "[Removed Lines]",
          "26: #include <linux/list.h>",
          "",
          "[Added Lines]",
          "26: #include <linux/rculist.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: struct xfrm6_tunnel_spi {",
          "44: };",
          "48: static u32 xfrm6_tunnel_spi;",
          "",
          "[Removed Lines]",
          "39:  struct hlist_node list_byaddr;",
          "40:  struct hlist_node list_byspi;",
          "41:  xfrm_address_t addr;",
          "42:  u32 spi;",
          "43:  atomic_t refcnt;",
          "46: static DEFINE_RWLOCK(xfrm6_tunnel_spi_lock);",
          "",
          "[Added Lines]",
          "39:  struct hlist_node list_byaddr;",
          "40:  struct hlist_node list_byspi;",
          "41:  xfrm_address_t  addr;",
          "42:  u32   spi;",
          "43:  atomic_t  refcnt;",
          "44:  struct rcu_head  rcu_head;",
          "47: static DEFINE_SPINLOCK(xfrm6_tunnel_spi_lock);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:   if (!hlist_empty(&xfrm6_tunnel_spi_byspi[i]))",
          "108:    return;",
          "109:  }",
          "110:  kmem_cache_destroy(xfrm6_tunnel_spi_kmem);",
          "111:  xfrm6_tunnel_spi_kmem = NULL;",
          "112: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:  rcu_barrier();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:  struct xfrm6_tunnel_spi *x6spi;",
          "117:  struct hlist_node *pos;",
          "120:         &xfrm6_tunnel_spi_byaddr[xfrm6_tunnel_spi_hash_byaddr(saddr)],",
          "121:         list_byaddr) {",
          "122:   if (memcmp(&x6spi->addr, saddr, sizeof(x6spi->addr)) == 0)",
          "",
          "[Removed Lines]",
          "119:  hlist_for_each_entry(x6spi, pos,",
          "",
          "[Added Lines]",
          "121:  hlist_for_each_entry_rcu(x6spi, pos,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131:  struct xfrm6_tunnel_spi *x6spi;",
          "132:  u32 spi;",
          "135:  x6spi = __xfrm6_tunnel_spi_lookup(saddr);",
          "136:  spi = x6spi ? x6spi->spi : 0;",
          "138:  return htonl(spi);",
          "139: }",
          "",
          "[Removed Lines]",
          "134:  read_lock_bh(&xfrm6_tunnel_spi_lock);",
          "137:  read_unlock_bh(&xfrm6_tunnel_spi_lock);",
          "",
          "[Added Lines]",
          "136:  rcu_read_lock_bh();",
          "139:  rcu_read_unlock_bh();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "185:  if (!x6spi)",
          "186:   goto out;",
          "188:  memcpy(&x6spi->addr, saddr, sizeof(x6spi->addr));",
          "189:  x6spi->spi = spi;",
          "190:  atomic_set(&x6spi->refcnt, 1);",
          "194:  index = xfrm6_tunnel_spi_hash_byaddr(saddr);",
          "196: out:",
          "197:  return spi;",
          "198: }",
          "",
          "[Removed Lines]",
          "192:  hlist_add_head(&x6spi->list_byspi, &xfrm6_tunnel_spi_byspi[index]);",
          "195:  hlist_add_head(&x6spi->list_byaddr, &xfrm6_tunnel_spi_byaddr[index]);",
          "",
          "[Added Lines]",
          "190:  INIT_RCU_HEAD(&x6spi->rcu_head);",
          "195:  hlist_add_head_rcu(&x6spi->list_byspi, &xfrm6_tunnel_spi_byspi[index]);",
          "198:  hlist_add_head_rcu(&x6spi->list_byaddr, &xfrm6_tunnel_spi_byaddr[index]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "202:  struct xfrm6_tunnel_spi *x6spi;",
          "203:  u32 spi;",
          "206:  x6spi = __xfrm6_tunnel_spi_lookup(saddr);",
          "207:  if (x6spi) {",
          "208:   atomic_inc(&x6spi->refcnt);",
          "209:   spi = x6spi->spi;",
          "210:  } else",
          "211:   spi = __xfrm6_tunnel_alloc_spi(saddr);",
          "214:  return htonl(spi);",
          "215: }",
          "217: EXPORT_SYMBOL(xfrm6_tunnel_alloc_spi);",
          "219: void xfrm6_tunnel_free_spi(xfrm_address_t *saddr)",
          "220: {",
          "221:  struct xfrm6_tunnel_spi *x6spi;",
          "222:  struct hlist_node *pos, *n;",
          "226:  hlist_for_each_entry_safe(x6spi, pos, n,",
          "227:       &xfrm6_tunnel_spi_byaddr[xfrm6_tunnel_spi_hash_byaddr(saddr)],",
          "",
          "[Removed Lines]",
          "205:  write_lock_bh(&xfrm6_tunnel_spi_lock);",
          "212:  write_unlock_bh(&xfrm6_tunnel_spi_lock);",
          "224:  write_lock_bh(&xfrm6_tunnel_spi_lock);",
          "",
          "[Added Lines]",
          "208:  spin_lock_bh(&xfrm6_tunnel_spi_lock);",
          "215:  spin_unlock_bh(&xfrm6_tunnel_spi_lock);",
          "222: static void x6spi_destroy_rcu(struct rcu_head *head)",
          "223: {",
          "224:  kmem_cache_free(xfrm6_tunnel_spi_kmem,",
          "225:    container_of(head, struct xfrm6_tunnel_spi, rcu_head));",
          "226: }",
          "233:  spin_lock_bh(&xfrm6_tunnel_spi_lock);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "229:  {",
          "230:   if (memcmp(&x6spi->addr, saddr, sizeof(x6spi->addr)) == 0) {",
          "231:    if (atomic_dec_and_test(&x6spi->refcnt)) {",
          "235:     break;",
          "236:    }",
          "237:   }",
          "238:  }",
          "240: }",
          "242: EXPORT_SYMBOL(xfrm6_tunnel_free_spi);",
          "",
          "[Removed Lines]",
          "232:     hlist_del(&x6spi->list_byaddr);",
          "233:     hlist_del(&x6spi->list_byspi);",
          "234:     kmem_cache_free(xfrm6_tunnel_spi_kmem, x6spi);",
          "239:  write_unlock_bh(&xfrm6_tunnel_spi_lock);",
          "",
          "[Added Lines]",
          "241:     hlist_del_rcu(&x6spi->list_byaddr);",
          "242:     hlist_del_rcu(&x6spi->list_byspi);",
          "243:     call_rcu(&x6spi->rcu_head, x6spi_destroy_rcu);",
          "248:  spin_unlock_bh(&xfrm6_tunnel_spi_lock);",
          "",
          "---------------"
        ]
      }
    }
  ]
}