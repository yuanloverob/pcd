{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d18afb5bf29dc3b81b5f7a9eda2abde35041a441",
      "candidate_info": {
        "commit_hash": "d18afb5bf29dc3b81b5f7a9eda2abde35041a441",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d18afb5bf29dc3b81b5f7a9eda2abde35041a441",
        "files": [
          "crypto/bn/bn_exp.c",
          "crypto/bn/bn_mul.c",
          "crypto/bn/bn_prime.c",
          "crypto/bn/bn_sqr.c",
          "crypto/ec/ec2_mult.c",
          "crypto/rsa/rsa_gen.c"
        ],
        "message": "Check return value of some BN functions.\n\nFactorise multiple bn_get_top(group->field) calls\nAdd missing checks on some conditional BN_copy return value\nAdd missing checks on some BN_copy return value\nAdd missing checks on a few bn_wexpand return value\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1626)\n\n(cherry picked from commit 78e09b53a40729f5e99829ccc733b592bd22fea1)",
        "before_after_code_files": [
          "crypto/bn/bn_exp.c||crypto/bn/bn_exp.c",
          "crypto/bn/bn_mul.c||crypto/bn/bn_mul.c",
          "crypto/bn/bn_prime.c||crypto/bn/bn_prime.c",
          "crypto/bn/bn_sqr.c||crypto/bn/bn_sqr.c",
          "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c",
          "crypto/rsrsa_gen.c||crypto/rsa/rsa_gen.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_exp.c||crypto/bn/bn_exp.c": [
          "File: crypto/bn/bn_exp.c -> crypto/bn/bn_exp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:                 goto err;",
          "79:         }",
          "80:     }",
          "83:     ret = 1;",
          "84:  err:",
          "85:     BN_CTX_end(ctx);",
          "",
          "[Removed Lines]",
          "81:     if (r != rr)",
          "82:         BN_copy(r, rr);",
          "",
          "[Added Lines]",
          "81:     if (r != rr && BN_copy(r, rr) == NULL)",
          "82:         goto err;",
          "",
          "---------------"
        ],
        "crypto/bn/bn_mul.c||crypto/bn/bn_mul.c": [
          "File: crypto/bn/bn_mul.c -> crypto/bn/bn_mul.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "970:  end:",
          "971: #endif",
          "972:     bn_correct_top(rr);",
          "975:     ret = 1;",
          "976:  err:",
          "977:     bn_check_top(r);",
          "",
          "[Removed Lines]",
          "973:     if (r != rr)",
          "974:         BN_copy(r, rr);",
          "",
          "[Added Lines]",
          "973:     if (r != rr && BN_copy(r, rr) == NULL)",
          "974:         goto err;",
          "",
          "---------------"
        ],
        "crypto/bn/bn_prime.c||crypto/bn/bn_prime.c": [
          "File: crypto/bn/bn_prime.c -> crypto/bn/bn_prime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:         BIGNUM *t;",
          "241:         if ((t = BN_CTX_get(ctx)) == NULL)",
          "242:             goto err;",
          "244:         t->neg = 0;",
          "245:         A = t;",
          "246:     } else",
          "",
          "[Removed Lines]",
          "243:         BN_copy(t, a);",
          "",
          "[Added Lines]",
          "243:         if (BN_copy(t, a) == NULL)",
          "244:             goto err;",
          "",
          "---------------"
        ],
        "crypto/bn/bn_sqr.c||crypto/bn/bn_sqr.c": [
          "File: crypto/bn/bn_sqr.c -> crypto/bn/bn_sqr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:         rr->top = max - 1;",
          "91:     else",
          "92:         rr->top = max;",
          "95:     ret = 1;",
          "96:  err:",
          "97:     bn_check_top(rr);",
          "",
          "[Removed Lines]",
          "93:     if (rr != r)",
          "94:         BN_copy(r, rr);",
          "",
          "[Added Lines]",
          "93:     if (r != rr && BN_copy(r, rr) == NULL)",
          "94:         goto err;",
          "",
          "---------------"
        ],
        "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c": [
          "File: crypto/ec/ec2_mult.c -> crypto/ec/ec2_mult.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:                                              BN_CTX *ctx)",
          "224: {",
          "225:     BIGNUM *x1, *x2, *z1, *z2;",
          "227:     BN_ULONG mask, word;",
          "229:     if (r == point) {",
          "",
          "[Removed Lines]",
          "226:     int ret = 0, i;",
          "",
          "[Added Lines]",
          "226:     int ret = 0, i, group_top;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:     x2 = r->X;",
          "254:     z2 = r->Y;",
          "261:     if (!BN_GF2m_mod_arr(x1, point->X, group->poly))",
          "",
          "[Removed Lines]",
          "256:     bn_wexpand(x1, bn_get_top(group->field));",
          "257:     bn_wexpand(z1, bn_get_top(group->field));",
          "258:     bn_wexpand(x2, bn_get_top(group->field));",
          "259:     bn_wexpand(z2, bn_get_top(group->field));",
          "",
          "[Added Lines]",
          "256:     group_top = bn_get_top(group->field);",
          "257:     if (bn_wexpand(x1, group_top) == NULL",
          "258:         || bn_wexpand(z1, group_top) == NULL",
          "259:         || bn_wexpand(x2, group_top) == NULL",
          "260:         || bn_wexpand(z2, group_top) == NULL)",
          "261:         goto err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "285:     for (; i >= 0; i--) {",
          "286:         word = bn_get_words(scalar)[i];",
          "287:         while (mask) {",
          "290:             if (!gf2m_Madd(group, point->X, x2, z2, x1, z1, ctx))",
          "291:                 goto err;",
          "292:             if (!gf2m_Mdouble(group, x1, z1, ctx))",
          "293:                 goto err;",
          "296:             mask >>= 1;",
          "297:         }",
          "298:         mask = BN_TBIT;",
          "",
          "[Removed Lines]",
          "288:             BN_consttime_swap(word & mask, x1, x2, bn_get_top(group->field));",
          "289:             BN_consttime_swap(word & mask, z1, z2, bn_get_top(group->field));",
          "294:             BN_consttime_swap(word & mask, x1, x2, bn_get_top(group->field));",
          "295:             BN_consttime_swap(word & mask, z1, z2, bn_get_top(group->field));",
          "",
          "[Added Lines]",
          "290:             BN_consttime_swap(word & mask, x1, x2, group_top);",
          "291:             BN_consttime_swap(word & mask, z1, z2, group_top);",
          "296:             BN_consttime_swap(word & mask, x1, x2, group_top);",
          "297:             BN_consttime_swap(word & mask, z1, z2, group_top);",
          "",
          "---------------"
        ],
        "crypto/rsrsa_gen.c||crypto/rsa/rsa_gen.c": [
          "File: crypto/rsrsa_gen.c -> crypto/rsa/rsa_gen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     if (BN_copy(rsa->e, e_value) == NULL)",
          "79:         goto err;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dff827da751525b0e32ecb59a1d382b03f34a4de",
      "candidate_info": {
        "commit_hash": "dff827da751525b0e32ecb59a1d382b03f34a4de",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/dff827da751525b0e32ecb59a1d382b03f34a4de",
        "files": [
          "apps/s_cb.c"
        ],
        "message": "Make -xcert work again.\n\nWhen a certificate is prepended update the list pointer.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2628)\n(cherry picked from commit 52f4840cb237cc37cad5eac8328828cf3d3e1049)",
        "before_after_code_files": [
          "apps/s_cb.c||apps/s_cb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/s_cb.c||apps/s_cb.c": [
          "File: apps/s_cb.c -> apps/s_cb.c"
        ]
      }
    },
    {
      "candidate_hash": "92ed7fa575a80955f3bb6efefca9bf576a953586",
      "candidate_info": {
        "commit_hash": "92ed7fa575a80955f3bb6efefca9bf576a953586",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/92ed7fa575a80955f3bb6efefca9bf576a953586",
        "files": [
          "crypto/ec/ec_ameth.c"
        ],
        "message": "Avoid EVP_PKEY_cmp() crash on EC keys without public component\n\nSome hardware devices don't provide the public EC_POINT data. The only\nway for X509_check_private_key() to validate that the key matches a\ngiven certificate is to actually perform a sign operation and then\nverify it using the public key in the certificate.\n\nMaybe that can come later, as discussed in issue 1532. But for now let's\nat least make it fail gracefully and not crash.\n\nGH: 1532\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1547)",
        "before_after_code_files": [
          "crypto/ec/ec_ameth.c||crypto/ec/ec_ameth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ec/ec_ameth.c||crypto/ec/ec_ameth.c": [
          "File: crypto/ec/ec_ameth.c -> crypto/ec/ec_ameth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:     const EC_GROUP *group = EC_KEY_get0_group(b->pkey.ec);",
          "172:     const EC_POINT *pa = EC_KEY_get0_public_key(a->pkey.ec),",
          "174:     r = EC_POINT_cmp(group, pa, pb, NULL);",
          "175:     if (r == 0)",
          "176:         return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:     if (group == NULL || pa == NULL || pb == NULL)",
          "175:         return -2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "311: {",
          "312:     const EC_GROUP *group_a = EC_KEY_get0_group(a->pkey.ec),",
          "314:     if (EC_GROUP_cmp(group_a, group_b, NULL))",
          "315:         return 0;",
          "316:     else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316:     if (group_a == NULL || group_b == NULL)",
          "317:         return -2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c0c82c3f6e43b3c44d584f9c64cdc515fa30091",
      "candidate_info": {
        "commit_hash": "5c0c82c3f6e43b3c44d584f9c64cdc515fa30091",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5c0c82c3f6e43b3c44d584f9c64cdc515fa30091",
        "files": [
          "test/recipes/80-test_ca.t"
        ],
        "message": "Fix copy-paste test labels\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit 32804b04b8f3c889beebb6e63e14cc3ea4d8273c)",
        "before_after_code_files": [
          "test/recipes/80-test_ca.t||test/recipes/80-test_ca.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/80-test_ca.t||test/recipes/80-test_ca.t": [
          "File: test/recipes/80-test_ca.t -> test/recipes/80-test_ca.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:      $ENV{OPENSSL_CONFIG} = '-config \"'.srctop_file(\"test\", \"Uss.cnf\").'\"';",
          "33:      skip \"failed creating new certificate request\", 2",
          "34:   if !ok(run(perlapp([\"CA.pl\",\"-newreq\"])),",
          "37:      $ENV{OPENSSL_CONFIG} = '-config \"'.$std_openssl_cnf.'\"';",
          "38:      skip \"failed to sign certificate request\", 1",
          "",
          "[Removed Lines]",
          "35:   'creating CA structure');",
          "",
          "[Added Lines]",
          "35:   'creating certificate request');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   'signing certificate request');",
          "42:      ok(run(perlapp([\"CA.pl\", \"-verify\", \"newcert.pem\"])),",
          "44: }",
          "",
          "[Removed Lines]",
          "43:  'verifying new certificate');",
          "",
          "[Added Lines]",
          "43:         'verifying new certificate');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ec574ae25a754d88f810304be3bfcb7b23101a8",
      "candidate_info": {
        "commit_hash": "1ec574ae25a754d88f810304be3bfcb7b23101a8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1ec574ae25a754d88f810304be3bfcb7b23101a8",
        "files": [
          "CHANGES",
          "NEWS",
          "README",
          "include/openssl/opensslv.h"
        ],
        "message": "Prepare for 1.1.0d-dev\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/opensslv.h||include/openssl/opensslv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/opensslv.h||include/openssl/opensslv.h": [
          "File: include/openssl/opensslv.h -> include/openssl/opensslv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # ifdef OPENSSL_FIPS",
          "45: # else",
          "47: # endif",
          "",
          "[Removed Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x1010003fL",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0c-fips  10 Nov 2016\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0c  10 Nov 2016\"",
          "",
          "[Added Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x10100040L",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d-fips-dev  xx XXX xxxx\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d-dev  xx XXX xxxx\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}