{
  "cve_id": "CVE-2013-1959",
  "cve_desc": "kernel/user_namespace.c in the Linux kernel before 3.8.9 does not have appropriate capability requirements for the uid_map and gid_map files, which allows local users to gain privileges by opening a file within an unprivileged process and then modifying the file within a privileged process.",
  "repo": "torvalds/linux",
  "patch_hash": "e3211c120a85b792978bcb4be7b2886df18d27f0",
  "patch_info": {
    "commit_hash": "e3211c120a85b792978bcb4be7b2886df18d27f0",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/e3211c120a85b792978bcb4be7b2886df18d27f0",
    "files": [
      "kernel/user_namespace.c"
    ],
    "message": "userns: Check uid_map's opener's fsuid, not the current fsuid\n\nSigned-off-by: Andy Lutomirski <luto@amacapital.net>",
    "before_after_code_files": [
      "kernel/user_namespace.c||kernel/user_namespace.c"
    ]
  },
  "patch_diff": {
    "kernel/user_namespace.c||kernel/user_namespace.c": [
      "File: kernel/user_namespace.c -> kernel/user_namespace.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "797:   u32 id = new_map->extent[0].lower_first;",
      "798:   if (cap_setid == CAP_SETUID) {",
      "799:    kuid_t uid = make_kuid(ns->parent, id);",
      "801:     return true;",
      "802:   }",
      "803:   else if (cap_setid == CAP_SETGID) {",
      "804:    kgid_t gid = make_kgid(ns->parent, id);",
      "806:     return true;",
      "807:   }",
      "808:  }",
      "",
      "[Removed Lines]",
      "800:    if (uid_eq(uid, current_fsuid()))",
      "805:    if (gid_eq(gid, current_fsgid()))",
      "",
      "[Added Lines]",
      "800:    if (uid_eq(uid, file->f_cred->fsuid))",
      "805:    if (gid_eq(gid, file->f_cred->fsgid))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "37657da3c5d4a3bbbbb9d3b78f53a8134a0abae0",
      "candidate_info": {
        "commit_hash": "37657da3c5d4a3bbbbb9d3b78f53a8134a0abae0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/37657da3c5d4a3bbbbb9d3b78f53a8134a0abae0",
        "files": [
          "kernel/user_namespace.c"
        ],
        "message": "userns: Allow setting a userns mapping to your current uid.\n\nAcked-by: Serge Hallyn <serge.hallyn@canonical.com>\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>",
        "before_after_code_files": [
          "kernel/user_namespace.c||kernel/user_namespace.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/user_namespace.c||kernel/user_namespace.c"
          ],
          "candidate": [
            "kernel/user_namespace.c||kernel/user_namespace.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/user_namespace.c||kernel/user_namespace.c": [
          "File: kernel/user_namespace.c -> kernel/user_namespace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "709: static bool new_idmap_permitted(struct user_namespace *ns, int cap_setid,",
          "710:     struct uid_gid_map *new_map)",
          "711: {",
          "713:  if (!cap_valid(cap_setid))",
          "714:   return true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "713:  if ((new_map->nr_extents == 1) && (new_map->extent[0].count == 1)) {",
          "714:   u32 id = new_map->extent[0].lower_first;",
          "715:   if (cap_setid == CAP_SETUID) {",
          "716:    kuid_t uid = make_kuid(ns->parent, id);",
          "717:    if (uid_eq(uid, current_fsuid()))",
          "718:     return true;",
          "719:   }",
          "720:   else if (cap_setid == CAP_SETGID) {",
          "721:    kgid_t gid = make_kgid(ns->parent, id);",
          "722:    if (gid_eq(gid, current_fsgid()))",
          "723:     return true;",
          "724:   }",
          "725:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}