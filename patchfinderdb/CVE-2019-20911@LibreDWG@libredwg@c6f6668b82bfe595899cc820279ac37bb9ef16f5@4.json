{
  "cve_id": "CVE-2019-20911",
  "cve_desc": "An issue was discovered in GNU LibreDWG through 0.9.3. Crafted input will lead to denial of service in bit_calc_CRC in bits.c, related to a for loop.",
  "repo": "LibreDWG/libredwg",
  "patch_hash": "c6f6668b82bfe595899cc820279ac37bb9ef16f5",
  "patch_info": {
    "commit_hash": "c6f6668b82bfe595899cc820279ac37bb9ef16f5",
    "repo": "LibreDWG/libredwg",
    "commit_url": "https://github.com/LibreDWG/libredwg/commit/c6f6668b82bfe595899cc820279ac37bb9ef16f5",
    "files": [
      "include/dwg.h",
      "src/decode.c",
      "src/encode.c",
      "src/free.c"
    ],
    "message": "cleanup tio.unknown\n\nnot needed anymore, we only have UNKNOWN_OBJ or UNKNOWN_ENT with full common\nentity_data.\nFixes GH #178 heap_overflow2",
    "before_after_code_files": [
      "include/dwg.h||include/dwg.h",
      "src/decode.c||src/decode.c",
      "src/encode.c||src/encode.c",
      "src/free.c||src/free.c"
    ]
  },
  "patch_diff": {
    "include/dwg.h||include/dwg.h": [
      "File: include/dwg.h -> include/dwg.h"
    ],
    "src/decode.c||src/decode.c": [
      "File: src/decode.c -> src/decode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5013:           bit_set_position (dat, restartpos);",
      "5019:           if (i >= 0 && i < (int)dwg->num_classes)",
      "5020:             {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5014:           obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5032:                   LOG_ERROR (\"Invalid class index %d >%d\", i,",
      "5033:                              (int)dwg->num_classes);",
      "5034:                 }",
      "5036:               obj->type = 0;",
      "5038:               return error | DWG_ERR_VALUEOUTOFBOUNDS;",
      "5039:             }",
      "5096:         }",
      "5097:     }",
      "",
      "[Removed Lines]",
      "5035:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5041:           if (klass && !is_entity)",
      "5042:             {",
      "5043:               int err = dwg_decode_UNKNOWN_OBJ (dat, obj);",
      "5044:               error |= err;",
      "5045:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5046:               if (!dat)",
      "5047:                 return error;",
      "5048:               if (err >= DWG_ERR_CRITICAL)",
      "5050:             }",
      "5051:           else if (klass) // is_entity",
      "5052:             {",
      "5053:               int err;",
      "5054: #if 0 && !defined(IS_RELEASE)",
      "5055:               if (strEQc(klass->dxfname, \"MULTILEADER\")) { //debug CED",
      "5056:                 char *mleader = bit_read_TF(dat, obj->size);",
      "5057:                 LOG_INSANE_TF(mleader, (int)obj->size)",
      "5058:                 bit_set_position(dat, restartpos);",
      "5059:                 free (mleader);",
      "5060:               }",
      "5061: #endif",
      "5062:               err = dwg_decode_UNKNOWN_ENT (dat, obj);",
      "5063:               error |= err;",
      "5064:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5065:               if (!dat)",
      "5066:                 return error;",
      "5067:               if (err >= DWG_ERR_CRITICAL)",
      "5069:             }",
      "5070:           else // not a class",
      "5071:             {",
      "5072:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
      "5073:               SINCE (R_2000)",
      "5074:               {",
      "5075:                 obj->bitsize = bit_read_RL (dat);",
      "5076:                 LOG_TRACE (\"bitsize: \" FORMAT_RL \" [RL] @%lu.%u\\n\",",
      "5077:                            obj->bitsize, dat->byte-2, dat->bit);",
      "5078:                 if (obj->bitsize > obj->size * 8)",
      "5079:                   {",
      "5080:                     LOG_ERROR (\"Invalid bitsize \" FORMAT_RL \" => \" FORMAT_RL,",
      "5081:                                obj->bitsize, obj->size * 8);",
      "5082:                     obj->bitsize = obj->size * 8;",
      "5083:                     error |= DWG_ERR_VALUEOUTOFBOUNDS;",
      "5084:                   }",
      "5085:               }",
      "5086:               if (!bit_read_H (dat, &obj->handle))",
      "5087:                 {",
      "5088:                   LOG_TRACE (\"handle: \" FORMAT_H \" [H 5]\\n\",",
      "5089:                              ARGS_H (obj->handle));",
      "5090:                 }",
      "5091:               restartpos = dat->byte;",
      "5092:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5093:               obj->tio.unknown = bit_read_TF (dat, obj->size);",
      "5094:               dat->byte = restartpos;",
      "5095:             }",
      "",
      "[Added Lines]",
      "5037:           if (is_entity)",
      "5038:               error |= dwg_decode_UNKNOWN_ENT (dat, obj);",
      "5039:           else",
      "5040:               error |= dwg_decode_UNKNOWN_OBJ (dat, obj);",
      "5042:           if (!dat)",
      "5043:             return error;",
      "5044:           if (error >= DWG_ERR_CRITICAL)",
      "",
      "---------------"
    ],
    "src/encode.c||src/encode.c": [
      "File: src/encode.c -> src/encode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1970:           else",
      "1971:             is_entity = obj->supertype == DWG_SUPERTYPE_ENTITY;",
      "1976:             error = dwg_encode_UNKNOWN_ENT (dat, obj);",
      "1993:         }",
      "1994:     }",
      "",
      "[Removed Lines]",
      "1973:           if (klass && !is_entity)",
      "1974:             error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
      "1975:           else if (klass)",
      "1977:           else // not a class",
      "1978:             {",
      "1979:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
      "1980:               error = DWG_ERR_UNHANDLEDCLASS;",
      "1981:               SINCE (R_2000)",
      "1982:               {",
      "1983:                 bit_write_RL (dat, obj->bitsize);",
      "1984:                 LOG_INFO (\"bitsize: \" FORMAT_RL \" [RL] (@%lu.%u)\\n\", obj->bitsize,",
      "1985:                           dat->byte - 4, dat->bit);",
      "1986:               }",
      "1987:               bit_write_H (dat, &obj->handle);",
      "1988:               LOG_INFO (\"handle: \" FORMAT_H \" [H 5]\\n\", ARGS_H (obj->handle));",
      "1991:               bit_write_TF (dat, obj->tio.unknown, obj->size);",
      "1992:             }",
      "",
      "[Added Lines]",
      "1973:           if (is_entity)",
      "1975:           else",
      "1976:             error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
      "",
      "---------------"
    ],
    "src/free.c||src/free.c": [
      "File: src/free.c -> src/free.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "731:       else if ((error = dwg_free_variable_type (obj->parent, obj))",
      "732:                & DWG_ERR_UNHANDLEDCLASS)",
      "733:         {",
      "738:         unhandled:",
      "753:               dwg_free_UNKNOWN_ENT (dat, obj);",
      "761:               dwg_free_UNKNOWN_OBJ (dat, obj);",
      "771:         }",
      "772:     }",
      "",
      "[Removed Lines]",
      "734:           int is_entity;",
      "735:           int i;",
      "736:           Dwg_Class *klass;",
      "739:           is_entity = 0;",
      "740:           i = obj->type - 500;",
      "741:           klass = NULL;",
      "743:           dwg = obj->parent;",
      "744:           if (dwg->dwg_class && i >= 0 && i < (int)dwg->num_classes)",
      "745:             {",
      "746:               klass = &dwg->dwg_class[i];",
      "747:               is_entity = klass ? dwg_class_is_entity (klass) : 0;",
      "748:             }",
      "750:           if (obj->fixedtype == DWG_TYPE_TABLE)",
      "751:             {",
      "754:             }",
      "755:           else if (obj->fixedtype == DWG_TYPE_DATATABLE)",
      "756:             {",
      "757:               dwg_free_UNKNOWN_OBJ (dat, obj);",
      "758:             }",
      "759:           else if (klass && !is_entity)",
      "760:             {",
      "762:             }",
      "763:           else if (klass && is_entity)",
      "764:             {",
      "765:               dwg_free_UNKNOWN_ENT (dat, obj);",
      "766:             }",
      "767:           else // not a class",
      "768:             {",
      "769:               FREE_IF (obj->tio.unknown);",
      "770:             }",
      "",
      "[Added Lines]",
      "735:           if (obj->fixedtype == DWG_TYPE_UNKNOWN_ENT)",
      "737:           else if (obj->fixedtype == DWG_TYPE_UNKNOWN_OBJ)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "94c3b3a03f5ccf583bf727322377e1334d92dd9a",
      "candidate_info": {
        "commit_hash": "94c3b3a03f5ccf583bf727322377e1334d92dd9a",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/94c3b3a03f5ccf583bf727322377e1334d92dd9a",
        "files": [
          "src/dec_macros.h",
          "src/decode.c"
        ],
        "message": "unrestrict dat before the CRC calculation\n\nand fix it for the restricted range. The CRC exceeds it,\ndo it absolutely.\nWe unfortunately start our dat after the obj->size,\nnot before, at obj->adress.",
        "before_after_code_files": [
          "src/dec_macros.h||src/dec_macros.h",
          "src/decode.c||src/decode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/decode.c||src/decode.c"
          ],
          "candidate": [
            "src/decode.c||src/decode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/dec_macros.h||src/dec_macros.h": [
          "File: src/dec_macros.h -> src/dec_macros.h"
        ],
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1089:             dwg->object[dwg->num_objects - 1].handle.value = last_handle;",
          "1091: #endif",
          "1093:         }",
          "1094:       if (dat->byte == oldpos)",
          "1095:         break;",
          "",
          "[Removed Lines]",
          "1092:           LOG_HANDLE (\"dat: @%lu.%u\\n\", dat->byte, dat->bit);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3898: dwg_decode_add_object (Dwg_Data *restrict dwg, Bit_Chain *dat,",
          "3899:                        Bit_Chain *hdl_dat, long unsigned int address)",
          "3900: {",
          "3903:   Bit_Chain abs_dat = { NULL };",
          "3904:   unsigned char previous_bit;",
          "3905:   Dwg_Object *obj;",
          "",
          "[Removed Lines]",
          "3901:   long unsigned int oldpos;",
          "3902:   long unsigned int restartpos, end_address;",
          "",
          "[Added Lines]",
          "3901:   long unsigned int objpos, restartpos;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3941:       obj->bitsize = obj->size * 8 - obj->handlestream_size;",
          "3942:     }",
          "3944:   obj->address = dat->byte;",
          "3948:   bit_reset_chain (dat);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3943:   objpos = bit_position (dat); // absolute",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4369:                  8 * dat->size);",
          "4370:       return error | DWG_ERR_INVALIDDWG;",
          "4371:     }",
          "4373:   if (dat->bit)",
          "4374:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4374:   restartpos = bit_position (dat);",
          "4376:   bit_set_position (dat, objpos + restartpos);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4377:                   dat->chain[dat->byte] & ((1 << r) - 1), r);",
          "4378:       bit_advance_position (dat, r);",
          "4379:     }",
          "4380:   if (!bit_check_CRC (dat, address, 0xC0C1))",
          "4381:     error |= DWG_ERR_WRONGCRC;",
          "4385:   return realloced ? -1 : error; // re-alloced or not",
          "4386: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4386:   bit_set_position (dat, (obj->address + obj->size) * 8 - 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "233e51a73ce762f8cb4f19af01f2ef9f9fb74feb",
      "candidate_info": {
        "commit_hash": "233e51a73ce762f8cb4f19af01f2ef9f9fb74feb",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/233e51a73ce762f8cb4f19af01f2ef9f9fb74feb",
        "files": [
          "src/decode.c"
        ],
        "message": "Fix invalid free at decode.c:2289\n\npart 1 of GH #126. We forgot to reset dat to abs_dat in one branch\nThanks to @strongcourage",
        "before_after_code_files": [
          "src/decode.c||src/decode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/decode.c||src/decode.c"
          ],
          "candidate": [
            "src/decode.c||src/decode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4352:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
          "4353:               if (!dat)",
          "4354:                 return error;",
          "4358:             }",
          "4359:           else if (klass)",
          "4360:             {",
          "",
          "[Removed Lines]",
          "4355:               if (err >= DWG_ERR_CRITICAL) {",
          "4357:               }",
          "",
          "[Added Lines]",
          "4356:               if (err >= DWG_ERR_CRITICAL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4372:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
          "4373:               if (!dat)",
          "4374:                 return error;",
          "4378:             }",
          "4379:           else // not a class",
          "4380:             {",
          "",
          "[Removed Lines]",
          "4375:               if (err >= DWG_ERR_CRITICAL) {",
          "4377:               }",
          "",
          "[Added Lines]",
          "4375:               if (err >= DWG_ERR_CRITICAL)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e54d094e60c6ad519f21d9e3740bd53422122b1",
      "candidate_info": {
        "commit_hash": "8e54d094e60c6ad519f21d9e3740bd53422122b1",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/8e54d094e60c6ad519f21d9e3740bd53422122b1",
        "files": [
          "src/decode.c",
          "src/dwg.c",
          "src/encode.c",
          "src/in_dxf.c"
        ],
        "message": "log more types\n\neach read and write should be logged ideally.\nnot yet for eed, xdata, sentinels, class.",
        "before_after_code_files": [
          "src/decode.c||src/decode.c",
          "src/dwg.c||src/dwg.c",
          "src/encode.c||src/encode.c",
          "src/in_dxf.c||src/in_dxf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/decode.c||src/decode.c",
            "src/encode.c||src/encode.c"
          ],
          "candidate": [
            "src/decode.c||src/decode.c",
            "src/encode.c||src/encode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "879:   crc2 = bit_calc_CRC (0xC0C1, &dat->chain[0], dat->byte); // from 0 to now",
          "880:   crc = bit_read_RS (dat);",
          "882:   if (crc != crc2)",
          "883:     {",
          "884:       LOG_ERROR (\"Header CRC mismatch %04X <=> %04X\", crc, crc2);",
          "",
          "[Removed Lines]",
          "881:   LOG_TRACE (\"crc: %04X [RSx]\\n\", crc);",
          "",
          "[Added Lines]",
          "881:   LOG_TRACE (\"crc: %04X [RSx] from 0-%lu\\n\", crc, dat->byte - 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "905:       obj = NULL;",
          "906:       dat->byte = dwg->header.section[SECTION_AUXHEADER_R2000].address;",
          "908:       LOG_TRACE (\"         AuxHeader (end): %4u\\n\", (unsigned)end_address)",
          "909:       if (dat->size < end_address)",
          "910:         {",
          "",
          "[Removed Lines]",
          "907:       LOG_TRACE (\"\\n=======> AuxHeader:       %4u\\n\", (unsigned)dat->byte)",
          "",
          "[Added Lines]",
          "907:       LOG_TRACE (\"\\n\"",
          "908:                  \"=======> AuxHeader:       %4u\\n\", (unsigned)dat->byte)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1033:   size = bit_read_RL (dat);",
          "1034:   lasta = dat->byte + size;",
          "",
          "[Removed Lines]",
          "1035:   LOG_TRACE (\"         Length: %lu\\n\", size);",
          "",
          "[Added Lines]",
          "1036:   LOG_TRACE (\"         Length: %lu [RL]\\n\", size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1108:   dat->byte += 16; //sentinel",
          "1109:   pvz = bit_read_RL (dat); // Unknown bitlong inter class and object",
          "1111:   LOG_INFO (\"Number of classes read: %u\\n\", dwg->num_classes)",
          "",
          "[Removed Lines]",
          "1110:   LOG_TRACE (\"@ %lu RL: 0x%04lx\\n\", dat->byte - 4, pvz)",
          "",
          "[Added Lines]",
          "1111:   LOG_TRACE (\"unknown: 0x%04lx [RL] @%lu\\n\", pvz, dat->byte - 4)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1300:       bit_read_fixed (dat, _obj->version, 12);",
          "1302:       for (i = 0; i < 4; i++)",
          "1303:         FIELD_B (null_b[i], 0);",
          "",
          "[Removed Lines]",
          "1301:       LOG_TRACE (\"version: %s\\n\", _obj->version)",
          "",
          "[Added Lines]",
          "1302:       LOG_TRACE (\"version: %s [TFF 12]\\n\", _obj->version)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1354:         crc = bit_read_CRC (dat);",
          "1356:         VERSION (R_14)",
          "1357:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1356:         LOG_TRACE (\"crc: %04X\\n\", crc);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1381:       dat->byte = dwg->header.section[4].address;",
          "1382:       dat->bit = 0;",
          "1383:       dwg->header_vars.MEASUREMENT = (BITCODE_BS)bit_read_RL (dat);",
          "1385:                  dwg->header_vars.MEASUREMENT)",
          "",
          "[Removed Lines]",
          "1384:       LOG_TRACE (\"MEASUREMENT: \" FORMAT_BS \" (0 English/1 Metric)\\n\",",
          "",
          "[Added Lines]",
          "1386:       LOG_TRACE (\"MEASUREMENT: \" FORMAT_BS \" [RL] (0 English/1 Metric)\\n\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2199:           dwg->dwg_class[i].number = bit_read_BS (&sec_dat);",
          "2200:           dwg->dwg_class[i].proxyflag = bit_read_BS (&sec_dat);",
          "2201:           LOG_TRACE (\"-------------------\\n\")",
          "2204:           if (dwg->header.version >= R_2007)",
          "2205:             {",
          "2206:               dwg->dwg_class[i].appname = (char *)bit_read_TU (&str_dat);",
          "",
          "[Removed Lines]",
          "2202:           LOG_TRACE (\"Number:           %d\\n\", dwg->dwg_class[i].number)",
          "2203:           LOG_TRACE (\"Proxyflag:        %x\\n\", dwg->dwg_class[i].proxyflag)",
          "",
          "[Added Lines]",
          "2204:           LOG_TRACE (\"Number:           %d [BS]\\n\", dwg->dwg_class[i].number)",
          "2205:           LOG_TRACE (\"Proxyflag:        %x [BS]\\n\", dwg->dwg_class[i].proxyflag)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2217:               dwg->dwg_class[i].appname = bit_read_TV (&sec_dat);",
          "2218:               dwg->dwg_class[i].cppname = bit_read_TV (&sec_dat);",
          "2219:               dwg->dwg_class[i].dxfname = bit_read_TV (&sec_dat);",
          "2223:             }",
          "2224:           dwg->dwg_class[i].wasazombie = bit_read_B (&sec_dat);",
          "2225:           dwg->dwg_class[i].item_class_id = bit_read_BS (&sec_dat);",
          "2227:                      \"(0x1f3 for object, 0x1f2 for entity)\\n\",",
          "2228:                      dwg->dwg_class[i].item_class_id)",
          "",
          "[Removed Lines]",
          "2220:               LOG_TRACE (\"Application name: %s\\n\", dwg->dwg_class[i].appname)",
          "2221:               LOG_TRACE (\"C++ class name:   %s\\n\", dwg->dwg_class[i].cppname)",
          "2222:               LOG_TRACE (\"DXF record name:  %s\\n\", dwg->dwg_class[i].dxfname)",
          "2226:           LOG_TRACE (\"Class ID:         0x%x \"",
          "",
          "[Added Lines]",
          "2222:               LOG_TRACE (\"Application name: %s [TV]\\n\", dwg->dwg_class[i].appname)",
          "2223:               LOG_TRACE (\"C++ class name:   %s [TV]\\n\", dwg->dwg_class[i].cppname)",
          "2224:               LOG_TRACE (\"DXF record name:  %s [TV]\\n\", dwg->dwg_class[i].dxfname)",
          "2228:           LOG_TRACE (\"Class ID:         0x%x [BS] \"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2281:     {",
          "2282:       LOG_TRACE (\"\\nHeader\\n-------------------\\n\")",
          "2283:       dwg->header_vars.size = bit_read_RL (&sec_dat);",
          "2285:       PRE (R_2007)",
          "2286:       {",
          "2287:         error",
          "",
          "[Removed Lines]",
          "2284:       LOG_TRACE (\"size: \" FORMAT_RL \"\\n\", dwg->header_vars.size);",
          "",
          "[Added Lines]",
          "2286:       LOG_TRACE (\"size: \" FORMAT_RL \" [RL]\\n\", dwg->header_vars.size);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2356:       uint16_t crc1, crc2;",
          "2358:       section_size = bit_read_RS_LE (&hdl_dat);",
          "2363:       if (section_size > 2040)",
          "2364:         {",
          "2366:           free (hdl_dat.chain);",
          "2367:           free (obj_dat.chain);",
          "2368:           return DWG_ERR_VALUEOUTOFBOUNDS;",
          "",
          "[Removed Lines]",
          "2359:       LOG_TRACE (\"\\nSection size: %u\\n\", section_size);",
          "2365:           LOG_ERROR (\"Object-map/handles section size greater than 2040!\");",
          "",
          "[Added Lines]",
          "2361:       LOG_TRACE (\"\\nHandles page size: %u [RS_LE]\\n\", section_size);",
          "2367:           LOG_ERROR (\"Object-map/handles page size greater than 2040!\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2424:       crc1 = bit_calc_CRC (0xC0C1, &(hdl_dat.chain[startpos]),",
          "2425:                            hdl_dat.byte - startpos);",
          "2426:       crc2 = bit_read_RS_LE (&hdl_dat);",
          "2427:       if (crc1 == crc2)",
          "2428:         {",
          "2431:         }",
          "2432:       else",
          "2433:         {",
          "2434:           LOG_WARN (",
          "2437:           error |= DWG_ERR_WRONGCRC;",
          "2438:         }",
          "2439: #endif",
          "",
          "[Removed Lines]",
          "2429:           LOG_INSANE (\"Handles section page CRC: %04X from %lu-%lu\\n\", crc2,",
          "2430:                       startpos, hdl_dat.byte - 2);",
          "2435:               \"Handles section page CRC: %04X vs calc. %04X from %lu-%lu\\n\",",
          "2436:               crc2, crc1, startpos, hdl_dat.byte - 2);",
          "",
          "[Added Lines]",
          "2429:       LOG_TRACE (\"Handles page crc: %04X [RS_LE]\\n\", crc2);",
          "2432:           LOG_INSANE (\"Handles page CRC: %04X from %lu-%lu=%ld\\n\", crc2,",
          "2433:                       startpos, hdl_dat.byte - 2, hdl_dat.byte - startpos - 2);",
          "2438:               \"Handles page CRC: %04X vs calc. %04X from %lu-%lu=%ld\\n\",",
          "2439:               crc2, crc1, startpos, hdl_dat.byte - 2, hdl_dat.byte - startpos - 2);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2770:   BITCODE_RS lens;",
          "2772:   data->code = bit_read_RC (dat);",
          "2775:   switch (data->code)",
          "2776:     {",
          "",
          "[Removed Lines]",
          "2773:   LOG_TRACE (\"code: %d \", (int)data->code);",
          "",
          "[Added Lines]",
          "2776:   LOG_TRACE (\"code: %d [RC] \", (int)data->code);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2925:       long unsigned int end, offset;",
          "2926:       long unsigned int sav_byte;",
          "2929:       if (size > _obj->size)",
          "2930:         {",
          "2931:           LOG_ERROR (\"Invalid EED size \" FORMAT_BS \" > %u\", size, _obj->size)",
          "",
          "[Removed Lines]",
          "2928:       LOG_TRACE (\"EED[%u] size: \" FORMAT_BS \"\\n\", idx, size);",
          "",
          "[Added Lines]",
          "2931:       LOG_TRACE (\"EED[%u] size: \" FORMAT_BS \" [BS]\\n\", idx, size);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4752:               }",
          "4753:               if (!bit_read_H (dat, &obj->handle))",
          "4754:                 {",
          "4756:                              ARGS_H (obj->handle));",
          "4757:                 }",
          "4758:               restartpos = dat->byte;",
          "",
          "[Removed Lines]",
          "4755:                   LOG_TRACE (\"handle: \" FORMAT_H \" [5]\\n\",",
          "",
          "[Added Lines]",
          "4758:                   LOG_TRACE (\"handle: \" FORMAT_H \" [H 5]\\n\",",
          "",
          "---------------"
        ],
        "src/dwg.c||src/dwg.c": [
          "File: src/dwg.c -> src/dwg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:       return NULL;",
          "431:     }",
          "432:   num_pictures = bit_read_RC (dat);",
          "435:   found = 0;",
          "436:   header_size = 0;",
          "",
          "[Removed Lines]",
          "433:   LOG_INFO (\"num_pictures: %d\\n\", (int)num_pictures)",
          "",
          "[Added Lines]",
          "433:   LOG_INFO (\"num_pictures: %d [RC]\\n\", (int)num_pictures)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:           break;",
          "443:         }",
          "444:       code = bit_read_RC (dat);",
          "446:       address = bit_read_RL (dat);",
          "448:       if (code == 1)",
          "449:         {",
          "450:           header_size += bit_read_RL (dat);",
          "452:         }",
          "453:       else if (code == 2 && found == 0)",
          "454:         {",
          "456:           found = 1;",
          "458:         }",
          "459:       else if (code == 3)",
          "460:         {",
          "461:           osize = bit_read_RL (dat);",
          "463:         }",
          "464:       else",
          "465:         {",
          "466:           osize = bit_read_RL (dat);",
          "468:         }",
          "469:     }",
          "470:   dat->byte += header_size;",
          "",
          "[Removed Lines]",
          "445:       LOG_TRACE (\"\\t[%i] Code: %i\\n\", i, code)",
          "447:       LOG_TRACE (\"\\t\\tHeader data start: 0x%x\\n\", address)",
          "451:           LOG_TRACE (\"\\t\\tHeader data size: %i\\n\", header_size)",
          "457:           LOG_INFO (\"\\t\\tBMP size: %i\\n\", *size)",
          "462:           LOG_INFO (\"\\t\\tWMF size: %i\\n\", osize)",
          "467:           LOG_TRACE (\"\\t\\tSize of unknown code %i: %i\\n\", code, osize)",
          "",
          "[Added Lines]",
          "445:       LOG_TRACE (\"\\t[%i] Code: %i [RC]\\n\", i, code)",
          "447:       LOG_TRACE (\"\\t\\tHeader data start: 0x%x [RL]\\n\", address)",
          "451:           LOG_TRACE (\"\\t\\tHeader data size: %i [RL]\\n\", header_size)",
          "457:           LOG_INFO (\"\\t\\tBMP size: %i [RL]\\n\", *size)",
          "462:           LOG_INFO (\"\\t\\tWMF size: %i [RL]\\n\", osize)",
          "467:           LOG_TRACE (\"\\t\\tSize of unknown code %i: %i [RL]\\n\", code, osize)",
          "",
          "---------------"
        ],
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1017:       if (dwg->thumbnail.size == 0)",
          "1018:         {",
          "1019:           bit_write_RL (dat, 5); // overall size",
          "1020:           bit_write_RC (dat, 0); // num_pictures",
          "1021:         }",
          "1022:       else",
          "1023:         bit_write_TF (dat, (char *)dwg->thumbnail.chain, dwg->thumbnail.size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1020:           LOG_TRACE (\"Thumbnail size: 5 [RL]\\n\");",
          "1022:           LOG_TRACE (\"Thumbnail num_pictures: 0 [RC]\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1100:   LOG_TRACE (\"       Classes (end): %4u\\n\", (unsigned)dat->byte);",
          "1102:   bit_write_RL (dat, 0x0DCA); // 0xDCA Unknown bitlong inter class and objects",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1105:   LOG_TRACE (\"unknown: %04X [RL]\\n\", 0x0DCA);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1208:   bit_write_RS (dat, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1212:   LOG_TRACE (\"unknown crc?: %04X [RS]\\n\", 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1301:       dwg->header.section[SECTION_2NDHEADER_R13].address = _obj->address;",
          "1302:       dwg->header.section[SECTION_2NDHEADER_R13].size = _obj->size;",
          "1303:       LOG_INFO (\"\\n=======> Second Header: %4u\\n\", (unsigned)dat->byte);",
          "1307:       pvzadr = dat->byte; // Keep the first address of the section to write its",
          "",
          "[Removed Lines]",
          "1304:       bit_write_sentinel (dat,",
          "1305:                           dwg_sentinel (DWG_SENTINEL_SECOND_HEADER_BEGIN));",
          "",
          "[Added Lines]",
          "1308:       bit_write_sentinel (dat, dwg_sentinel (DWG_SENTINEL_SECOND_HEADER_BEGIN));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1348:       bit_write_TF (dat, (char *)_obj->version, 12);",
          "1351:       for (i = 0; i < 4; i++)",
          "1352:         FIELD_B (null_b[i], 0);",
          "",
          "[Removed Lines]",
          "1349:       LOG_TRACE (\"version: %s\\n\", _obj->version)",
          "",
          "[Added Lines]",
          "1352:       LOG_TRACE (\"version: %s [TFF 12]\\n\", _obj->version)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1410:       dwg->header.section[SECTION_MEASUREMENT_R13].size = 4;",
          "1412:       bit_write_RL (dat, (BITCODE_RL)dwg->header_vars.MEASUREMENT);",
          "1413:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1416:       LOG_TRACE (\"HEADER.MEASUREMENT: %d [RL]\\n\", dwg->header_vars.MEASUREMENT);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1918:               SINCE (R_2000)",
          "1919:               {",
          "1920:                 bit_write_RL (dat, obj->bitsize);",
          "1922:                           dat->byte - 4, dat->bit);",
          "1923:               }",
          "1924:               bit_write_H (dat, &obj->handle);",
          "",
          "[Removed Lines]",
          "1921:                 LOG_INFO (\"bitsize: \" FORMAT_RL \" (@%lu.%u)\\n\", obj->bitsize,",
          "",
          "[Added Lines]",
          "1925:                 LOG_INFO (\"bitsize: \" FORMAT_RL \" [RL] (@%lu.%u)\\n\", obj->bitsize,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1981:   while (dat->bit)",
          "1982:     bit_write_B (dat, 1);",
          "1983:   end_address = obj->address + obj->size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1985:   if (dat->bit)",
          "1986:     LOG_TRACE (\"padding: %d [*B]\\n\", dat->bit)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2092:       if (size && eed->data)",
          "2093:         {",
          "2094:           int code = (int)eed->data->code;",
          "2096:           bit_write_BS (dat, size);",
          "2097:           bit_write_H (dat, &eed->handle);",
          "2099:                      ARGS_H (eed->handle));",
          "2100:           if (eed->raw)",
          "2101:             bit_write_TF (dat, eed->raw, size);",
          "",
          "[Removed Lines]",
          "2095:           LOG_TRACE (\"EED[%u] size: %d, code: %d\\n\", i, (int)size, code);",
          "2098:           LOG_TRACE (\"EED[%u] handle: \" FORMAT_H \"\\n\", i,",
          "",
          "[Added Lines]",
          "2101:           LOG_TRACE (\"EED[%u] size: %d [BS], code: %d\\n\", i, (int)size, code);",
          "2104:           LOG_TRACE (\"EED[%u] handle: \" FORMAT_H \" [H]\\n\", i,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2104:         }",
          "2105:     }",
          "2106:   bit_write_BS (dat, 0);",
          "2107:   return 0;",
          "2108: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2113:   LOG_TRACE (\"EED[%u] size: 0 [BS]\\n\", i);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2287:   {",
          "2288:     obj->bitsize_pos = bit_position (dat);",
          "2289:     bit_write_RL (dat, obj->bitsize);",
          "2291:               dat->byte - 4, dat->bit);",
          "2292:   }",
          "2293:   SINCE (R_2010)",
          "",
          "[Removed Lines]",
          "2290:     LOG_INFO (\"bitsize: \" FORMAT_RL \" (@%lu.%u)\\n\", obj->bitsize,",
          "",
          "[Added Lines]",
          "2297:     LOG_INFO (\"bitsize: \" FORMAT_RL \" [RL] (@%lu.%u)\\n\", obj->bitsize,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2307:   {",
          "2308:     obj->bitsize_pos = bit_position (dat);",
          "2309:     bit_write_RL (dat, obj->bitsize);",
          "2311:               dat->byte - 4, dat->bit);",
          "2312:   }",
          "",
          "[Removed Lines]",
          "2310:     LOG_INFO (\"bitsize: \" FORMAT_RL \" (@%lu.%u)\\n\", obj->bitsize,",
          "",
          "[Added Lines]",
          "2317:     LOG_INFO (\"bitsize: \" FORMAT_RL \" [RL] (@%lu.%u)\\n\", obj->bitsize,",
          "",
          "---------------"
        ],
        "src/in_dxf.c||src/in_dxf.c": [
          "File: src/in_dxf.c -> src/in_dxf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5359:               entity_alias (name);",
          "5360:               pair = new_object (name, pair->value.s, dat, dwg, 0, i++);",
          "5361:               obj = &dwg->object[idx];",
          "5363:                 {",
          "5364:                   Dwg_Object_Entity *ent = obj->tio.entity;",
          "5365:                   Dwg_Entity_BLOCK *_obj = obj->tio.entity->tio.BLOCK;",
          "",
          "[Removed Lines]",
          "5362:               if (strEQc (obj->name, \"BLOCK\"))",
          "",
          "[Added Lines]",
          "5362:               if (obj->type == DWG_TYPE_BLOCK)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b7922f301de478eeea092eafa08941eb486e499",
      "candidate_info": {
        "commit_hash": "6b7922f301de478eeea092eafa08941eb486e499",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/6b7922f301de478eeea092eafa08941eb486e499",
        "files": [
          "src/decode.c",
          "src/dwg.c",
          "src/out_dxf.c"
        ],
        "message": "clang-format-all",
        "before_after_code_files": [
          "src/decode.c||src/decode.c",
          "src/dwg.c||src/dwg.c",
          "src/out_dxf.c||src/out_dxf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/decode.c||src/decode.c"
          ],
          "candidate": [
            "src/decode.c||src/decode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2480:     case 0:",
          "2481:       PRE (R_2007)",
          "2482:       {",
          "2484:         data->u.eed_0.length = lenc = bit_read_RC (dat);",
          "2485:         data->u.eed_0.codepage = bit_read_RS_LE (dat);",
          "2486:         if ((long)lenc > size - 4)",
          "",
          "[Removed Lines]",
          "2483:         if (eed_need_size (3, size)) return DWG_ERR_INVALIDEED;",
          "",
          "[Added Lines]",
          "2483:         if (eed_need_size (3, size))",
          "2484:           return DWG_ERR_INVALIDEED;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2501: #endif",
          "2502:           }",
          "2505:         bit_read_fixed (dat, (BITCODE_RC *)data->u.eed_0.string, lenc);",
          "2506:         data->u.eed_0.string[lenc] = '\\0';",
          "2507:         LOG_TRACE (\"string: \\\"%s\\\" len=%d cp=%d\\n\", data->u.eed_0.string,",
          "",
          "[Removed Lines]",
          "2504:         if (eed_need_size (lenc+3, size)) return DWG_ERR_INVALIDEED;",
          "",
          "[Added Lines]",
          "2505:         if (eed_need_size (lenc + 3, size))",
          "2506:           return DWG_ERR_INVALIDEED;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2509:       }",
          "2510:       LATER_VERSIONS",
          "2511:       {",
          "2513:         data->u.eed_0_r2007.length = lens = bit_read_RS (dat);",
          "2516:         for (j = 0; j < MIN (lens, (size - 3) / 2); j++)",
          "2517:           data->u.eed_0_r2007.string[j] = bit_read_RS_LE (dat);",
          "",
          "[Removed Lines]",
          "2512:         if (eed_need_size (2, size)) return DWG_ERR_INVALIDEED;",
          "2514:         if (eed_need_size ((lens*2)+2, size)) return DWG_ERR_INVALIDEED;",
          "",
          "[Added Lines]",
          "2514:         if (eed_need_size (2, size))",
          "2515:           return DWG_ERR_INVALIDEED;",
          "2517:         if (eed_need_size ((lens * 2) + 2, size))",
          "2518:           return DWG_ERR_INVALIDEED;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2525:       }",
          "2526:       break;",
          "2527:     case 2:",
          "2529:       data->u.eed_2.byte = bit_read_RC (dat);",
          "2530:       LOG_TRACE (\"byte: \" FORMAT_RC \"\\n\", data->u.eed_2.byte);",
          "2531:       break;",
          "2532:     case 3:",
          "2533:     case 5:",
          "2535:       data->u.eed_3.layer = bit_read_RL (dat);",
          "2536:       LOG_TRACE (\"layer/...: \" FORMAT_RL \"\\n\", data->u.eed_3.layer);",
          "2537:       break;",
          "2538:     case 4:",
          "2540:       data->u.eed_4.length = lenc = bit_read_RC (dat);",
          "2543:       for (j = 0; j < MIN (lenc, size - 2); j++)",
          "2544:         data->u.eed_4.data[j] = bit_read_RC (dat);",
          "",
          "[Removed Lines]",
          "2528:       if (eed_need_size (1, size)) return DWG_ERR_INVALIDEED;",
          "2534:       if (eed_need_size (4, size)) return DWG_ERR_INVALIDEED;",
          "2539:       if (eed_need_size (1, size)) return DWG_ERR_INVALIDEED;",
          "2541:       if (eed_need_size (lenc+1, size)) return DWG_ERR_INVALIDEED;",
          "",
          "[Added Lines]",
          "2532:       if (eed_need_size (1, size))",
          "2533:         return DWG_ERR_INVALIDEED;",
          "2539:       if (eed_need_size (4, size))",
          "2540:         return DWG_ERR_INVALIDEED;",
          "2545:       if (eed_need_size (1, size))",
          "2546:         return DWG_ERR_INVALIDEED;",
          "2548:       if (eed_need_size (lenc + 1, size))",
          "2549:         return DWG_ERR_INVALIDEED;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2548:     case 11:",
          "2549:     case 12:",
          "2552:       data->u.eed_10.point.x = bit_read_RD (dat);",
          "2553:       data->u.eed_10.point.y = bit_read_RD (dat);",
          "2554:       data->u.eed_10.point.z = bit_read_RD (dat);",
          "",
          "[Removed Lines]",
          "2551:       if (eed_need_size (3*8, size)) return DWG_ERR_INVALIDEED;",
          "",
          "[Added Lines]",
          "2559:       if (eed_need_size (3 * 8, size))",
          "2560:         return DWG_ERR_INVALIDEED;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2559:     case 41:",
          "2560:     case 42: /*case 43: case 44: case 45: case 46:",
          "2563:       data->u.eed_40.real = bit_read_RD (dat);",
          "2564:       LOG_TRACE (\"real: %f\\n\", data->u.eed_40.real);",
          "2565:       break;",
          "2566:     case 70:",
          "2568:       data->u.eed_70.rs = bit_read_RS (dat);",
          "2569:       LOG_TRACE (\"short: \" FORMAT_RS \"\\n\", data->u.eed_70.rs);",
          "2570:       break;",
          "2571:     case 71:",
          "2573:       data->u.eed_71.rl = bit_read_RL (dat);",
          "2574:       LOG_TRACE (\"long: \" FORMAT_RL \"\\n\", data->u.eed_71.rl);",
          "2575:       break;",
          "",
          "[Removed Lines]",
          "2562:       if (eed_need_size (8, size)) return DWG_ERR_INVALIDEED;",
          "2567:       if (eed_need_size (2, size)) return DWG_ERR_INVALIDEED;",
          "2572:       if (eed_need_size (4, size)) return DWG_ERR_INVALIDEED;",
          "",
          "[Added Lines]",
          "2571:       if (eed_need_size (8, size))",
          "2572:         return DWG_ERR_INVALIDEED;",
          "2577:       if (eed_need_size (2, size))",
          "2578:         return DWG_ERR_INVALIDEED;",
          "2583:       if (eed_need_size (4, size))",
          "2584:         return DWG_ERR_INVALIDEED;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2702:               obj->eed = (Dwg_Eed *)realloc (obj->eed,",
          "2703:                                              (idx + 1) * sizeof (Dwg_Eed));",
          "2705:               obj->eed[idx].size = 0;",
          "2706:               obj->eed[idx].raw = NULL;",
          "2707:             }",
          "",
          "[Removed Lines]",
          "2704:               obj->eed[idx].handle = obj->eed[idx-1].handle;",
          "",
          "[Added Lines]",
          "2716:               obj->eed[idx].handle = obj->eed[idx - 1].handle;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4310:   if (dat->byte > 8 * dat->size)",
          "4311:     {",
          "4313:       return error | DWG_ERR_INVALIDDWG;",
          "4314:     }",
          "",
          "[Removed Lines]",
          "4312:       LOG_ERROR (\"Invalid object_address: %lu > %lu\", dat->byte, 8 * dat->size);",
          "",
          "[Added Lines]",
          "4324:       LOG_ERROR (\"Invalid object_address: %lu > %lu\", dat->byte,",
          "4325:                  8 * dat->size);",
          "",
          "---------------"
        ],
        "src/dwg.c||src/dwg.c": [
          "File: src/dwg.c -> src/dwg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1041: get_last_owned_block (const Dwg_Object *restrict hdr)",
          "1042: {",
          "1043:   Dwg_Data *dwg = hdr->parent;",
          "1046:   unsigned int version = dwg->header.version;",
          "1047:   if (hdr->type != DWG_TYPE_BLOCK_HEADER)",
          "1048:     {",
          "",
          "[Removed Lines]",
          "1044:   Dwg_Object_BLOCK_HEADER *restrict _hdr",
          "1045:       = hdr->tio.object->tio.BLOCK_HEADER;",
          "",
          "[Added Lines]",
          "1044:   Dwg_Object_BLOCK_HEADER *restrict _hdr = hdr->tio.object->tio.BLOCK_HEADER;",
          "",
          "---------------"
        ],
        "src/out_dxf.c||src/out_dxf.c": [
          "File: src/out_dxf.c -> src/out_dxf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:       char *_s;                                                               \\",
          "215:       const char *_fmt = dxf_format (dxf);                                    \\",
          "216:       GROUP (dxf);                                                            \\",
          "218:       snprintf (buf, 255, _fmt, value);                                       \\",
          "219:       GCC_DIAG_RESTORE                                                        \\",
          "",
          "[Removed Lines]",
          "217:       GCC_DIAG_IGNORE (-Wformat-nonliteral)                                   \\",
          "",
          "[Added Lines]",
          "217:       GCC_DIAG_IGNORE (-Wformat-nonliteral)                                 \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9468f68df34923129ebb11759972525e9c4de405",
      "candidate_info": {
        "commit_hash": "9468f68df34923129ebb11759972525e9c4de405",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/9468f68df34923129ebb11759972525e9c4de405",
        "files": [
          "src/bits.c",
          "src/decode.c"
        ],
        "message": "fixup crc logging",
        "before_after_code_files": [
          "src/bits.c||src/bits.c",
          "src/decode.c||src/decode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/decode.c||src/decode.c"
          ],
          "candidate": [
            "src/decode.c||src/decode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/bits.c||src/bits.c": [
          "File: src/bits.c -> src/bits.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1180:     }",
          "1181:   start_address = dat->byte;",
          "1182:   result = bit_read_RS (dat);",
          "1185:   return result;",
          "1186: }",
          "",
          "[Removed Lines]",
          "1183:   LOG_TRACE (\"read CRC at %lx: 0x%x\\n\", start_address, result)",
          "",
          "[Added Lines]",
          "1183:   LOG_TRACE (\"read CRC at %lu: %04X\\n\", start_address, result)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1203:   calculated = bit_calc_CRC (seed, &(dat->chain[start_address]),",
          "1204:                              dat->byte - start_address);",
          "1205:   read = bit_read_RS (dat);",
          "1210: }",
          "",
          "[Removed Lines]",
          "1206:   LOG_TRACE (\"check CRC %lu - %lu: 0x%x <=> 0x%x\\n\", start_address,",
          "1207:              dat->byte, calculated, read)",
          "1209:   return (calculated == read);",
          "",
          "[Added Lines]",
          "1206:   LOG_HANDLE (\"crc: %04X [RSx]\\n\", read);",
          "1207:   if (calculated == read)",
          "1208:     {",
          "1209:       LOG_HANDLE (\" check_CRC %lu-%lu: %04X == %04X\\n\", start_address,",
          "1210:                   dat->byte-2, calculated, read);",
          "1211:       return 1;",
          "1212:     }",
          "1213:   else",
          "1214:     {",
          "1215:       LOG_WARN (\"check_CRC mismatch %lu-%lu: %04X <=> %04X\\n\", start_address,",
          "1216:                  dat->byte-2, calculated, read)",
          "1217:       return 0;",
          "1218:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1224:                       dat->byte - start_address);",
          "1226:   bit_write_RS (dat, crc);",
          "1228:   return (crc);",
          "1229: }",
          "",
          "[Removed Lines]",
          "1227:   LOG_TRACE (\"write CRC at %lx: %04X\\n\", start_address, crc)",
          "",
          "[Added Lines]",
          "1236:   LOG_TRACE (\"write CRC at %lu: %04X\\n\", start_address, crc)",
          "",
          "---------------"
        ],
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2246:         break;",
          "2247: #if 0",
          "2248:       if (!bit_check_CRC(&hdl_dat, startpos, 0xC0C1))",
          "2250: #else",
          "2251:       crc1 = bit_calc_CRC (0xC0C1, &(hdl_dat.chain[startpos]),",
          "2252:                            hdl_dat.byte - startpos);",
          "2253:       crc2 = bit_read_RS_LE (&hdl_dat);",
          "2254:       if (crc1 == crc2)",
          "2255:         {",
          "2257:                       startpos, hdl_dat.byte - 2);",
          "2258:         }",
          "2259:       else",
          "2260:         {",
          "2261:           LOG_WARN (",
          "2263:               crc2, crc1, startpos, hdl_dat.byte - 2);",
          "2264:           error |= DWG_ERR_WRONGCRC;",
          "2265:         }",
          "",
          "[Removed Lines]",
          "2249:         LOG_WARN(\"Handles section CRC mismatch at offset %lx\", startpos);",
          "2256:           LOG_INSANE (\"Handles section page CRC: %04X from %lx-%lx\\n\", crc2,",
          "2262:               \"Handles section page CRC: %04X vs calc. %04X from %lx-%lx\\n\",",
          "",
          "[Added Lines]",
          "2249:         error |= DWG_ERR_WRONGCRC;",
          "2257:           LOG_INSANE (\"Handles section page CRC: %04X from %lu-%lu\\n\", crc2,",
          "2263:               \"Handles section page CRC: %04X vs calc. %04X from %lu-%lu\\n\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4345:   if (obj->handle.value)",
          "4346:     { // empty only with UNKNOWN",
          "4348:                   (unsigned long)num);",
          "4349:       hash_set (dwg->object_map, obj->handle.value, (uint32_t)num);",
          "4350:     }",
          "",
          "[Removed Lines]",
          "4347:       LOG_HANDLE (\"object_map{%lX} = %lu\\n\", obj->handle.value,",
          "",
          "[Added Lines]",
          "4348:       LOG_HANDLE (\" object_map{%lX} = %lu\\n\", obj->handle.value,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4359:   if (dat->bit)",
          "4360:     {",
          "4361:       unsigned char r = 8 - dat->bit;",
          "4363:                   dat->chain[dat->byte] & ((1 << r) - 1), r);",
          "4364:       bit_advance_position (dat, r);",
          "4365:     }",
          "",
          "[Removed Lines]",
          "4362:       LOG_HANDLE (\"padding: %X/%X (%d bits)\\n\", dat->chain[dat->byte],",
          "4366:   bit_check_CRC (dat, address, 0xC0C1);",
          "",
          "[Added Lines]",
          "4363:       LOG_HANDLE (\" padding: %X/%X (%d bits)\\n\", dat->chain[dat->byte],",
          "4367:   if (!bit_check_CRC (dat, address, 0xC0C1))",
          "4368:     error |= DWG_ERR_WRONGCRC;",
          "",
          "---------------"
        ]
      }
    }
  ]
}