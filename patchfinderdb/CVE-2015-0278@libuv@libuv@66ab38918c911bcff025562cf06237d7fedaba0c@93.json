{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bfe645ed7e99ca5670d9279ad472b604c129d2e5",
      "candidate_info": {
        "commit_hash": "bfe645ed7e99ca5670d9279ad472b604c129d2e5",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/bfe645ed7e99ca5670d9279ad472b604c129d2e5",
        "files": [
          "ChangeLog",
          "src/version.c"
        ],
        "message": "2013.11.21, Version 0.11.15 (Unstable)\n\nChanges since version 0.11.14:\n\n* fsevents: report errors to user (Fedor Indutny)\n\n* include: UV_FS_EVENT_RECURSIVE is a flag (Fedor Indutny)\n\n* linux: use CLOCK_MONOTONIC_COARSE if available (Ben Noordhuis)\n\n* build: make systemtap probes work with gyp build (Ben Noordhuis)\n\n* unix: update events from pevents between polls (Fedor Indutny)\n\n* fsevents: support japaneese characters in path (Chris Bank)\n\n* linux: don't turn on SO_REUSEPORT socket option (Ben Noordhuis)\n\n* queue: strengthen type checks (Ben Noordhuis)\n\n* include: remove uv_strlcat() and uv_strlcpy() (Ben Noordhuis)\n\n* build: fix windows smp build with gyp (Geert Jansen)\n\n* unix: return exec errors from uv_spawn, not async (Alex Crichton)\n\n* fsevents: use native character encoding file paths (Ben Noordhuis)\n\n* linux: handle EPOLLHUP without EPOLLIN/EPOLLOUT (Ben Noordhuis)\n\n* windows: use _snwprintf(), not swprintf() (Ben Noordhuis)\n\n* fsevents: use FlagNoDefer for FSEventStreamCreate (Fedor Indutny)\n\n* unix: fix reopened fd bug (Fedor Indutny)\n\n* core: fix fake watcher list and count preservation (Fedor Indutny)\n\n* unix: set close-on-exec flag on received fds (Ben Noordhuis)\n\n* netbsd, openbsd: enable futimes() wrapper (Ben Noordhuis)\n\n* unix: nicer error message when kqueue() fails (Ben Noordhuis)\n\n* samples: add socks5 proxy sample application (Ben Noordhuis)",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "34: #define UV_VERSION_PATCH 15",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "386d2141e44a0d007e6d5a8535f82f9191dc9d47",
      "candidate_info": {
        "commit_hash": "386d2141e44a0d007e6d5a8535f82f9191dc9d47",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/386d2141e44a0d007e6d5a8535f82f9191dc9d47",
        "files": [
          "src/unix/udp.c",
          "src/win/udp.c",
          "test/test-list.h",
          "test/test-udp-options.c"
        ],
        "message": "unix, windows: be consistent when binding implictly in UDP\n\nOnly these functions will trigger an implicit binding of a UDP handle:\n- uv_udp_send\n- uv_udp_recv_start\n- uv_udp_set_membership\n\nAll other functions will return UV_EBADF in case the socket was not\nbound.\n\nNote: currently the socket is created and bound at the same time. This\nmay change in the future.",
        "before_after_code_files": [
          "src/unix/udp.c||src/unix/udp.c",
          "src/win/udp.c||src/win/udp.c",
          "test/test-list.h||test/test-list.h",
          "test/test-udp-options.c||test/test-udp-options.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/udp.c||src/unix/udp.c": [
          "File: src/unix/udp.c -> src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "629: }",
          "631: int uv_udp_set_multicast_interface(uv_udp_t* handle, const char* interface_addr) {",
          "633:   struct sockaddr_storage addr_st;",
          "634:   struct sockaddr_in* addr4;",
          "635:   struct sockaddr_in6* addr6;",
          "",
          "[Removed Lines]",
          "632:   int err;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "655:   }",
          "657:   if (addr_st.ss_family == AF_INET) {",
          "661:     if (setsockopt(handle->io_watcher.fd,",
          "662:                    IPPROTO_IP,",
          "663:                    IP_MULTICAST_IF,",
          "",
          "[Removed Lines]",
          "658:     err = uv__udp_maybe_deferred_bind(handle, AF_INET, UV_UDP_REUSEADDR);",
          "659:     if (err)",
          "660:       return err;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "666:       return -errno;",
          "667:     }",
          "668:   } else if (addr_st.ss_family == AF_INET6) {",
          "672:     if (setsockopt(handle->io_watcher.fd,",
          "673:                    IPPROTO_IPV6,",
          "674:                    IPV6_MULTICAST_IF,",
          "",
          "[Removed Lines]",
          "669:     err = uv__udp_maybe_deferred_bind(handle, AF_INET6, UV_UDP_REUSEADDR);",
          "670:     if (err)",
          "671:       return err;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/win/udp.c||src/win/udp.c": [
          "File: src/win/udp.c -> src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "664: int uv_udp_set_multicast_interface(uv_udp_t* handle, const char* interface_addr) {",
          "666:   struct sockaddr_storage addr_st;",
          "667:   struct sockaddr_in* addr4;",
          "668:   struct sockaddr_in6* addr6;",
          "",
          "[Removed Lines]",
          "665:   int err;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "687:     return UV_EINVAL;",
          "688:   }",
          "690:   if (addr_st.ss_family == AF_INET) {",
          "697:     if (setsockopt(handle->socket,",
          "698:                    IPPROTO_IP,",
          "699:                    IP_MULTICAST_IF,",
          "",
          "[Removed Lines]",
          "691:     err = uv_udp_maybe_bind(handle,",
          "692:                             (const struct sockaddr*) &uv_addr_ip4_any_,",
          "693:                             sizeof(uv_addr_ip4_any_),",
          "694:                             UV_UDP_REUSEADDR);",
          "695:     if (err)",
          "696:       return uv_translate_sys_error(err);",
          "",
          "[Added Lines]",
          "689:   if (!(handle->flags & UV_HANDLE_BOUND))",
          "690:     return UV_EBADF;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "702:       return uv_translate_sys_error(WSAGetLastError());",
          "703:     }",
          "704:   } else if (addr_st.ss_family == AF_INET6) {",
          "711:     if (setsockopt(handle->socket,",
          "712:                    IPPROTO_IPV6,",
          "713:                    IPV6_MULTICAST_IF,",
          "",
          "[Removed Lines]",
          "705:     err = uv_udp_maybe_bind(handle,",
          "706:                             (const struct sockaddr*) &uv_addr_ip6_any_,",
          "707:                             sizeof(uv_addr_ip6_any_),",
          "708:                             UV_UDP_REUSEADDR);",
          "709:     if (err)",
          "710:       return uv_translate_sys_error(err);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "727: int uv_udp_set_broadcast(uv_udp_t* handle, int value) {",
          "728:   BOOL optval = (BOOL) value;",
          "739:   if (setsockopt(handle->socket,",
          "740:                  SOL_SOCKET,",
          "",
          "[Removed Lines]",
          "729:   int err;",
          "732:   err = uv_udp_maybe_bind(handle,",
          "733:                           (const struct sockaddr*) &uv_addr_ip4_any_,",
          "734:                           sizeof(uv_addr_ip4_any_),",
          "735:                           0);",
          "736:   if (err)",
          "737:     return uv_translate_sys_error(err);",
          "",
          "[Added Lines]",
          "720:   if (!(handle->flags & UV_HANDLE_BOUND))",
          "721:     return UV_EBADF;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "774: #define SOCKOPT_SETTER(name, option4, option6, validate)                      \\",
          "775:   int uv_udp_set_##name(uv_udp_t* handle, int value) {                        \\",
          "776:     DWORD optval = (DWORD) value;                                             \\",
          "778:                                                                               \\",
          "779:     if (!(validate(value))) {                                                 \\",
          "780:       return UV_EINVAL;                                                       \\",
          "781:     }                                                                         \\",
          "782:                                                                               \\",
          "790:                                                                               \\",
          "791:     if (!(handle->flags & UV_HANDLE_IPV6)) {                                  \\",
          "",
          "[Removed Lines]",
          "777:     int err;                                                                  \\",
          "784:     err = uv_udp_maybe_bind(handle,                                           \\",
          "785:                             (const struct sockaddr*) &uv_addr_ip4_any_,       \\",
          "786:                             sizeof(uv_addr_ip4_any_),                         \\",
          "787:                             0);                                               \\",
          "788:     if (err)                                                                  \\",
          "789:       return uv_translate_sys_error(err);                                     \\",
          "",
          "[Added Lines]",
          "766:     if (!(handle->flags & UV_HANDLE_BOUND))                                   \\",
          "767:       return UV_EBADF;                                                        \\",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: TEST_DECLARE   (udp_dual_stack)",
          "94: TEST_DECLARE   (udp_ipv6_only)",
          "95: TEST_DECLARE   (udp_options)",
          "96: TEST_DECLARE   (udp_open)",
          "97: TEST_DECLARE   (pipe_bind_error_addrinuse)",
          "98: TEST_DECLARE   (pipe_bind_error_addrnotavail)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96: TEST_DECLARE   (udp_no_autobind)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "363:   TEST_ENTRY  (udp_dual_stack)",
          "364:   TEST_ENTRY  (udp_ipv6_only)",
          "365:   TEST_ENTRY  (udp_options)",
          "366:   TEST_ENTRY  (udp_multicast_interface)",
          "367:   TEST_ENTRY  (udp_multicast_interface6)",
          "368:   TEST_ENTRY  (udp_multicast_join)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:   TEST_ENTRY  (udp_no_autobind)",
          "",
          "---------------"
        ],
        "test/test-udp-options.c||test/test-udp-options.c": [
          "File: test/test-udp-options.c -> test/test-udp-options.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   MAKE_VALGRIND_HAPPY();",
          "87:   return 0;",
          "88: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: TEST_IMPL(udp_no_autobind) {",
          "92:   uv_loop_t* loop;",
          "93:   uv_udp_t h;",
          "95:   loop = uv_default_loop();",
          "97:   ASSERT(0 == uv_udp_init(loop, &h));",
          "98:   ASSERT(UV_EBADF == uv_udp_set_multicast_ttl(&h, 32));",
          "99:   ASSERT(UV_EBADF == uv_udp_set_broadcast(&h, 1));",
          "100:   ASSERT(UV_EBADF == uv_udp_set_ttl(&h, 1));",
          "101:   ASSERT(UV_EBADF == uv_udp_set_multicast_loop(&h, 1));",
          "102:   ASSERT(UV_EBADF == uv_udp_set_multicast_interface(&h, \"0.0.0.0\"));",
          "104:   uv_close((uv_handle_t*) &h, NULL);",
          "106:   ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));",
          "108:   MAKE_VALGRIND_HAPPY();",
          "109:   return 0;",
          "110: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38cc2e39d056d6bb9e22c329f436cfa75590bb5d",
      "candidate_info": {
        "commit_hash": "38cc2e39d056d6bb9e22c329f436cfa75590bb5d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/38cc2e39d056d6bb9e22c329f436cfa75590bb5d",
        "files": [
          "src/unix/process.c"
        ],
        "message": "unix: stop child process watcher after last one exits",
        "before_after_code_files": [
          "src/unix/process.c||src/unix/process.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [
            "src/unix/process.c||src/unix/process.c"
          ],
          "candidate": [
            "src/unix/process.c||src/unix/process.c"
          ]
        }
      },
      "candidate_diff": {
        "src/unix/process.c||src/unix/process.c": [
          "File: src/unix/process.c -> src/unix/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "514: void uv__process_close(uv_process_t* handle) {",
          "516:   QUEUE_REMOVE(&handle->queue);",
          "517:   uv__handle_stop(handle);",
          "518: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517:   if (QUEUE_EMPTY(&handle->loop->process_handles))",
          "518:     uv_signal_stop(&handle->loop->child_watcher);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "546fa7d508ba741c106d0161a31e9f8d257a5d56",
      "candidate_info": {
        "commit_hash": "546fa7d508ba741c106d0161a31e9f8d257a5d56",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/546fa7d508ba741c106d0161a31e9f8d257a5d56",
        "files": [
          "include/uv.h"
        ],
        "message": "doc: remove duplicate word",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ]
      }
    },
    {
      "candidate_hash": "0e4fa705f0e9f40d9d58e03e381f2605b7d7c223",
      "candidate_info": {
        "commit_hash": "0e4fa705f0e9f40d9d58e03e381f2605b7d7c223",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/0e4fa705f0e9f40d9d58e03e381f2605b7d7c223",
        "files": [
          "autogen.sh"
        ],
        "message": "build: fix string comparisons in autogen.sh\n\nCompare strings with '=', not '=='.  The second form doesn't work with\nall shells.\n\nFixes #876.",
        "before_after_code_files": [
          "autogen.sh||autogen.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "autogen.sh||autogen.sh": [
          "File: autogen.sh -> autogen.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",
          "15: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "18:   LIBTOOLIZE=glibtoolize",
          "19: fi",
          "",
          "[Removed Lines]",
          "17: if [ \"$LIBTOOLIZE\" == \"\" ] && [ \"`uname`\" == \"Darwin\" ]; then",
          "",
          "[Added Lines]",
          "17: if [ \"$LIBTOOLIZE\" = \"\" ] && [ \"`uname`\" = \"Darwin\" ]; then",
          "",
          "---------------"
        ]
      }
    }
  ]
}