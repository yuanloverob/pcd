{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ca8dea83a9e4cdb958e123edc7ff8f0d13599b03",
      "candidate_info": {
        "commit_hash": "ca8dea83a9e4cdb958e123edc7ff8f0d13599b03",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ca8dea83a9e4cdb958e123edc7ff8f0d13599b03",
        "files": [
          "lib/repl.js"
        ],
        "message": "repl: make the completer use newlines\n\nFixes the repl.complete() function when terminal is false, since it\nis now explicitly looking for a '\\n' char.",
        "before_after_code_files": [
          "lib/repl.js||lirepl.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/repl.js||lirepl.js": [
          "File: lib/repl.js -> lirepl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:   this.run = function(data) {",
          "372:     var self = this;",
          "373:     data.forEach(function(line) {",
          "375:     });",
          "376:   }",
          "377: }",
          "",
          "[Removed Lines]",
          "374:       self.emit('data', line);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d98a8578d62cd1b35574269dc028a0c8c34ef25b",
      "candidate_info": {
        "commit_hash": "d98a8578d62cd1b35574269dc028a0c8c34ef25b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d98a8578d62cd1b35574269dc028a0c8c34ef25b",
        "files": [
          "test/pummel/test-fs-watch-file-slow.js"
        ],
        "message": "test: add another fs.watchFile() test",
        "before_after_code_files": [
          "test/pummel/test-fs-watch-file-slow.js||test/pummel/test-fs-watch-file-slow.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/pummel/test-fs-watch-file-slow.js||test/pummel/test-fs-watch-file-slow.js": [
          "File: test/pummel/test-fs-watch-file-slow.js -> test/pummel/test-fs-watch-file-slow.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var path = require('path');",
          "25: var fs = require('fs');",
          "27: var FILENAME = path.join(common.tmpDir, 'watch-me');",
          "28: var TIMEOUT = 1300;",
          "30: var nevents = 0;",
          "32: try {",
          "33:   fs.unlinkSync(FILENAME);",
          "34: }",
          "35: catch (e) {",
          "37: }",
          "39: fs.watchFile(FILENAME, {interval:TIMEOUT - 250}, function(curr, prev) {",
          "40:   console.log([curr, prev]);",
          "41:   switch (++nevents) {",
          "42:   case 1:",
          "43:   case 2:",
          "44:     assert.equal(fs.existsSync(FILENAME), true);",
          "45:     break;",
          "46:   case 3:",
          "47:     assert.equal(fs.existsSync(FILENAME), false);",
          "48:     fs.unwatchFile(FILENAME);",
          "49:     break;",
          "50:   default:",
          "51:     assert(0);",
          "52:   }",
          "53: });",
          "55: process.on('exit', function() {",
          "56:   assert.equal(nevents, 3);",
          "57: });",
          "59: setTimeout(createFile, TIMEOUT);",
          "61: function createFile() {",
          "62:   fs.writeFileSync(FILENAME, \"test\");",
          "63:   setTimeout(touchFile, TIMEOUT);",
          "64: }",
          "66: function touchFile() {",
          "67:   fs.writeFileSync(FILENAME, \"test\");",
          "68:   setTimeout(removeFile, TIMEOUT);",
          "69: }",
          "71: function removeFile() {",
          "72:   fs.unlinkSync(FILENAME);",
          "73: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f60def5e9a72fbfe087c92ec5658d38481bd54ca",
      "candidate_info": {
        "commit_hash": "f60def5e9a72fbfe087c92ec5658d38481bd54ca",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f60def5e9a72fbfe087c92ec5658d38481bd54ca",
        "files": [
          "deps/v8/build/common.gypi"
        ],
        "message": "v8: reapply floating patches",
        "before_after_code_files": [
          "deps/v8/build/common.gypi||deps/v8/build/common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/build/common.gypi||deps/v8/build/common.gypi": [
          "File: deps/v8/build/common.gypi -> deps/v8/build/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:           'WIN32',",
          "240:         ],",
          "241:         'msvs_configuration_attributes': {",
          "243:           'IntermediateDirectory': '$(OutDir)\\\\obj\\\\$(ProjectName)',",
          "244:           'CharacterSet': '1',",
          "245:         },",
          "",
          "[Removed Lines]",
          "242:           'OutputDirectory': '<(DEPTH)\\\\build\\\\$(ConfigurationName)',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:         'target_conditions': [",
          "272:           ['_toolset==\"host\"', {",
          "273:             'variables': {",
          "275:             },",
          "276:             'cflags': [ '<(m32flag)' ],",
          "277:             'ldflags': [ '<(m32flag)' ],",
          "",
          "[Removed Lines]",
          "274:               'm32flag': '<!((echo | $(echo ${CXX_host:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo -n \"-m32\" || true)',",
          "",
          "[Added Lines]",
          "273:               'm32flag': '<!((echo | $(echo ${CXX_host:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo \"-m32\" || true)',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:           }],",
          "282:           ['_toolset==\"target\"', {",
          "283:             'variables': {",
          "285:             },",
          "286:             'cflags': [ '<(m32flag)' ],",
          "287:             'ldflags': [ '<(m32flag)' ],",
          "",
          "[Removed Lines]",
          "284:               'm32flag': '<!((echo | $(echo ${CXX_target:-${CXX:-$(which g++)}}) -m32 -E - > /dev/null 2>&1) && echo -n \"-m32\" || true)',",
          "",
          "[Added Lines]",
          "283:               'm32flag': '<!((echo | $(echo ${CXX_target:-${CXX:-$(which g++)}}) -m32 -E - > /dev/null 2>&1) && echo \"-m32\" || true)',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "324:         },",
          "325:         'conditions': [",
          "326:           ['OS==\"linux\" or OS==\"freebsd\" or OS==\"openbsd\" or OS==\"netbsd\"', {",
          "328:                         '-Wnon-virtual-dtor', '-Woverloaded-virtual' ],",
          "329:           }],",
          "330:         ],",
          "",
          "[Removed Lines]",
          "327:             'cflags': [ '-Wall', '<(werror)', '-W', '-Wno-unused-parameter',",
          "",
          "[Added Lines]",
          "326:             'cflags': [ '-Wno-unused-parameter',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23de33968f2b61a784b67308980e31a8d11bf094",
      "candidate_info": {
        "commit_hash": "23de33968f2b61a784b67308980e31a8d11bf094",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/23de33968f2b61a784b67308980e31a8d11bf094",
        "files": [
          "lib/querystring.js",
          "test/simple/test-querystring.js"
        ],
        "message": "querystring: fix maxKeys = 0 is ignored",
        "before_after_code_files": [
          "lib/querystring.js||liquerystring.js",
          "test/simple/test-querystring.js||test/simple/test-querystring.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/querystring.js||liquerystring.js": [
          "File: lib/querystring.js -> liquerystring.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   sep = sep || '&';",
          "165:   eq = eq || '=';",
          "166:   var obj = {},",
          "169:   if (typeof qs !== 'string' || qs.length === 0) {",
          "170:     return obj;",
          "",
          "[Removed Lines]",
          "167:       maxKeys = options && options.maxKeys || 1000;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-querystring.js||test/simple/test-querystring.js": [
          "File: test/simple/test-querystring.js -> test/simple/test-querystring.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:   1",
          "190: );",
          "193: var b = qs.unescapeBuffer('%d3%f2Ug%1f6v%24%5e%98%cb' +",
          "194:                           '%0d%ac%a2%2f%9d%eb%d8%a2%e6');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193: function testUnlimitedKeys() {",
          "194:   var query = {},",
          "195:       url;",
          "197:   for (var i = 0; i < 2000; i++) query[i] = i;",
          "199:   url = qs.stringify(query);",
          "201:   assert.equal(",
          "202:     Object.keys(qs.parse(url, null, null, { maxKeys: 0 })).length,",
          "203:     2000",
          "204:   );",
          "205: }",
          "206: testUnlimitedKeys();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "688859afc09307d358b3f160cdd9aff2d2ce6c6f",
      "candidate_info": {
        "commit_hash": "688859afc09307d358b3f160cdd9aff2d2ce6c6f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/688859afc09307d358b3f160cdd9aff2d2ce6c6f",
        "files": [
          "src/node.cc"
        ],
        "message": "debugger: wake up the event loop when a debugger command is dispatched\n\nWhen the event loop was blocked in epoll / kqueue or similar, debugger\ncommands wouldn't be processed. This patch fixes that by adding an\nuv_async handle which is triggered when a debugger command is\ndispatched. The async handle's callback makes sure that V8 is entered.\n\nCloses GH-3626\nCloses GH-3718",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2471: static Isolate* node_isolate = NULL;",
          "2472: static volatile bool debugger_running = false;",
          "2474: static void EnableDebug(bool wait_connect) {",
          "2477:   node_isolate->Enter();",
          "2480:   bool r = v8::Debug::EnableAgent(\"node \" NODE_VERSION,",
          "2481:                                   debug_port,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2475: static uv_async_t dispatch_debug_messages_async;",
          "2479: static void DispatchDebugMessagesAsyncCallback(uv_async_t* handle, int status) {",
          "2480:   v8::Debug::ProcessDebugMessages();",
          "2481: }",
          "2485: static void DispatchMessagesDebugAgentCallback() {",
          "2486:   uv_async_send(&dispatch_debug_messages_async);",
          "2487: }",
          "2495:   v8::Debug::SetDebugMessageDispatchHandler(DispatchMessagesDebugAgentCallback,",
          "2496:                                             false);",
          "2498:   uv_async_init(uv_default_loop(),",
          "2499:                 &dispatch_debug_messages_async,",
          "2500:                 DispatchDebugMessagesAsyncCallback);",
          "2501:   uv_unref((uv_handle_t*) &dispatch_debug_messages_async);",
          "",
          "---------------"
        ]
      }
    }
  ]
}