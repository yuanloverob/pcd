{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "21a3b3191eb0869448601b07123639eae1789f05",
      "candidate_info": {
        "commit_hash": "21a3b3191eb0869448601b07123639eae1789f05",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/21a3b3191eb0869448601b07123639eae1789f05",
        "files": [
          "Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Support Tcl libraries with a suffix.\n\nFossilOrigin-Name: 8d0153996a3685a9b109a01fea0cba76e4296b010e96fc0db43fa6fde54d1965",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "864: TCLVERSION = 86",
          "865: !ENDIF",
          "867: !IFNDEF TCLDIR",
          "868: TCLDIR = $(TOP)\\compat\\tcl",
          "869: !ENDIF",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867: !IFNDEF TCLSUFFIX",
          "868: TCLSUFFIX =",
          "869: !ENDIF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "877: !ENDIF",
          "879: !IFNDEF LIBTCL",
          "881: !ENDIF",
          "883: !IFNDEF LIBTCLSTUB",
          "885: !ENDIF",
          "887: !IFNDEF LIBTCLPATH",
          "",
          "[Removed Lines]",
          "880: LIBTCL = tcl$(TCLVERSION).lib",
          "884: LIBTCLSTUB = tclstub$(TCLVERSION).lib",
          "",
          "[Added Lines]",
          "884: LIBTCL = tcl$(TCLVERSION)$(TCLSUFFIX).lib",
          "888: LIBTCLSTUB = tclstub$(TCLVERSION)$(TCLSUFFIX).lib",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c9f1972e10b0cdb5e351a776a64c60acf404dcfbe2a8a28c0a273bbe851e677f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f55a571fcd028d57fcde0d25150aa3a933b2d8d",
      "candidate_info": {
        "commit_hash": "0f55a571fcd028d57fcde0d25150aa3a933b2d8d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f55a571fcd028d57fcde0d25150aa3a933b2d8d",
        "files": [
          "ext/fts5/fts5_index.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid an \"unitialized value read\" problem in fts5 that can occur with a corrupt database.\n\nFossilOrigin-Name: 6cae81cd1ffb0180e0260d5ba921502c7dee2f54637bff3558a4d1cb5dfd3f32",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "690:         pRet = 0;",
          "691:       }else{",
          "694:         pRet->p[nByte] = 0x00;",
          "695:       }",
          "696:     }",
          "697:     p->rc = rc;",
          "",
          "[Removed Lines]",
          "693:         pRet->szLeaf = fts5GetU16(&pRet->p[2]);",
          "",
          "[Added Lines]",
          "694:         pRet->szLeaf = fts5GetU16(&pRet->p[2]);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9bad745d373f4686a2726c3f77a2ccad60e7181645d7ed483a2e43075a4ef30c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1116b1785c018911c33c4148aee1987810b5670b",
      "candidate_info": {
        "commit_hash": "1116b1785c018911c33c4148aee1987810b5670b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1116b1785c018911c33c4148aee1987810b5670b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "In the unix VFS layer, do not attempt to chown() the journal to be the same as the database if running in 8+3 filename mode.  Also, update the comments on the chown() attempt to be more precise.\n\nFossilOrigin-Name: ab853724a7e01ca32167d294c3c80d6632e805bdf39b6d56db82226a00ad72dc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 489a1eb3aa2f1225b97b50a5f8688cf1a4ab0371973da1badc29616d70386c03",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6059:       goto open_finished;",
          "6060:     }",
          "6067:       robustFchown(fd, uid, gid);",
          "6068:     }",
          "6069:   }",
          "",
          "[Removed Lines]",
          "6066:     if( flags & (SQLITE_OPEN_WAL|SQLITE_OPEN_MAIN_JOURNAL) ){",
          "",
          "[Added Lines]",
          "6074:     if( openFlags && (flags & (SQLITE_OPEN_WAL|SQLITE_OPEN_MAIN_JOURNAL))!=0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6a9121bb383f37c78b8d8d99e6f1d8dd3b6b4e3",
      "candidate_info": {
        "commit_hash": "b6a9121bb383f37c78b8d8d99e6f1d8dd3b6b4e3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6a9121bb383f37c78b8d8d99e6f1d8dd3b6b4e3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join.test"
        ],
        "message": "Fix another case where SQLite assumes that if \"~(? AND FALSE)\" is true, \"?\" must be non-null.\n\nFossilOrigin-Name: 616f5663b3dbd0929128c0990fc6d8bba1513c7ae196b87c450ac0b3b3203ecd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 84ae41fd2f50cb7c0c3f6522d0f94817e1bbf96eae5316279e3e32cee4e46e91",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5103:   switch( pExpr->op ){",
          "5104:     case TK_ISNOT:",
          "5105:     case TK_NOT:",
          "5106:     case TK_ISNULL:",
          "5107:     case TK_NOTNULL:",
          "5108:     case TK_IS:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5106:     case TK_BITNOT:",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "812:     FROM t1 LEFT JOIN t2",
          "813:    WHERE a IN (1,3,x,y);",
          "814: } {1 2 {} {} x 3 4 {} {} x}",
          "816:   SELECT *, 'x'",
          "817:     FROM t1 LEFT JOIN t2",
          "818:    WHERE NOT ( 'x'='y' AND t2.y=1 );",
          "819: } {1 2 {} {} x 3 4 {} {} x}",
          "820: do_execsql_test join-15.107 {",
          "821:   SELECT *, 'x'",
          "822:     FROM t1 LEFT JOIN t2",
          "",
          "[Removed Lines]",
          "815: do_execsql_test join-15.106 {",
          "",
          "[Added Lines]",
          "815: do_execsql_test join-15.106a {",
          "820: do_execsql_test join-15.106b {",
          "821:   SELECT *, 'x'",
          "822:     FROM t1 LEFT JOIN t2",
          "823:    WHERE ~ ( 'x'='y' AND t2.y=1 );",
          "824: } {1 2 {} {} x 3 4 {} {} x}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b84b38fd899ec1e104c2937bfb4ed54ae08e792f",
      "candidate_info": {
        "commit_hash": "b84b38fd899ec1e104c2937bfb4ed54ae08e792f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b84b38fd899ec1e104c2937bfb4ed54ae08e792f",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/autoinc.test",
          "test/delete4.test",
          "test/insert4.test",
          "test/pragma.test",
          "test/triggerC.test",
          "test/without_rowid1.test"
        ],
        "message": "Add test cases to improve coverage of VDBE branches. Still some to go.\n\nFossilOrigin-Name: 4cef609d61de272cfdc2b39e1d49c7cd56ec834086bd63095116ff98f4d402bd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/autoinc.test||test/autoinc.test",
          "test/delete4.test||test/delete4.test",
          "test/insert4.test||test/insert4.test",
          "test/pragma.test||test/pragma.test",
          "test/triggerC.test||test/triggerC.test",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4fca46ded7873d4939d7c6bff363ded41667f2255a4ab624a1a24bebbae733eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/autoinc.test||test/autoinc.test": [
          "File: test/autoinc.test -> test/autoinc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "20: # If the library is not compiled with autoincrement support then",
          "21: # skip all tests in this file.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: set testprefix autoinc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "856:   lappend res $msg",
          "857: } {0 ok}",
          "859: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "860: #--------------------------------------------------------------------------",
          "861: reset_db",
          "862: do_execsql_test 13.0 {",
          "863:   CREATE TABLE t1(i INTEGER PRIMARY KEY AUTOINCREMENT, j);",
          "864:   CREATE TABLE t2(i INTEGER PRIMARY KEY AUTOINCREMENT, j);",
          "865:   CREATE TABLE t3(i INTEGER PRIMARY KEY AUTOINCREMENT, j);",
          "867:   INSERT INTO t1 VALUES(NULL, 1);",
          "868:   INSERT INTO t2 VALUES(NULL, 2);",
          "869:   INSERT INTO t3 VALUES(NULL, 3);",
          "871:   SELECT name FROM sqlite_sequence;",
          "872: } {t1 t2 t3}",
          "874: do_execsql_test 13.1 {",
          "875:   UPDATE sqlite_sequence SET name=NULL WHERE name='t2';",
          "876:   INSERT INTO t3 VALUES(NULL, 4);",
          "877:   DELETE FROM t3;",
          "878:   INSERT INTO t3 VALUES(NULL, 5);",
          "879:   SELECT * FROM t3;",
          "880: } {3 5}",
          "",
          "---------------"
        ],
        "test/delete4.test||test/delete4.test": [
          "File: test/delete4.test -> test/delete4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:   SELECT x FROM t2;",
          "184: } {5}",
          "187: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186: #-------------------------------------------------------------------------",
          "187: # Test the effect of failing to find a table row based on an index key",
          "188: # within a DELETE. Either because the db is corrupt, or a trigger on another",
          "189: # row already deleted the entry, or because a BEFORE trigger on the current",
          "190: # row has already deleted it.",
          "191: #",
          "192: do_execsql_test 7.1.0 {",
          "193:   CREATE TABLE t3(id INT PRIMARY KEY, a, b) WITHOUT ROWID;",
          "194:   CREATE INDEX t3a ON t3(a);",
          "195:   CREATE INDEX t3b ON t3(b);",
          "197:   INSERT INTO t3 VALUES(1, 1, 1);",
          "198:   INSERT INTO t3 VALUES(2, 2, 2);",
          "199:   INSERT INTO t3 VALUES(3, 3, 3);",
          "200:   INSERT INTO t3 VALUES(4, 4, 1);",
          "201: }",
          "202: do_execsql_test 7.1.1 {",
          "203:   DELETE FROM t3 WHERE a=4 OR b=1;",
          "204: }",
          "205: do_execsql_test 7.1.2 {",
          "206:   SELECT * FROM t3;",
          "207: } { 2 2 2   3 3 3 }",
          "209: do_execsql_test 7.2.0 {",
          "210:   CREATE TABLE t4(a PRIMARY KEY, b) WITHOUT ROWID;",
          "211:   CREATE INDEX t4i ON t4(b);",
          "212:   INSERT INTO t4 VALUES(1, 'hello');",
          "213:   INSERT INTO t4 VALUES(2, 'world');",
          "215:   CREATE TABLE t5(a PRIMARY KEY, b) WITHOUT ROWID;",
          "216:   CREATE INDEX t5i ON t5(b);",
          "217:   INSERT INTO t5 VALUES(1, 'hello');",
          "218:   INSERT INTO t5 VALUES(3, 'world');",
          "220:   PRAGMA writable_schema = 1;",
          "221:   UPDATE sqlite_master SET rootpage = (",
          "222:     SELECT rootpage FROM sqlite_master WHERE name = 't5'",
          "223:   ) WHERE name = 't4';",
          "224: }",
          "226: db close",
          "227: sqlite3 db test.db",
          "228: do_execsql_test 7.2.1 {",
          "229:   DELETE FROM t4 WHERE b='world'",
          "230: }",
          "231: reset_db",
          "233: do_execsql_test 7.3.0 {",
          "234:   CREATE TABLE t3(id INT PRIMARY KEY, a, b) WITHOUT ROWID;",
          "235:   INSERT INTO t3 VALUES(1, 2, 3);",
          "236:   INSERT INTO t3 VALUES(4, 5, 6);",
          "237:   INSERT INTO t3 VALUES(7, 8, 9);",
          "238:   CREATE TRIGGER t3t BEFORE DELETE ON t3 BEGIN",
          "239:     DELETE FROM t3 WHERE id=old.id+3;",
          "240:   END;",
          "241: }",
          "243: do_execsql_test 7.3.1 {",
          "244:   DELETE FROM t3 WHERE a IN(2, 5, 8);",
          "245:   SELECT * FROM t3;",
          "246: } {}",
          "248: do_execsql_test 7.3.2 {",
          "249:   DROP TRIGGER t3t;",
          "250:   INSERT INTO t3 VALUES(1, 2, 3);",
          "251:   INSERT INTO t3 VALUES(4, 5, 6);",
          "252:   INSERT INTO t3 VALUES(7, 8, 9);",
          "253:   CREATE TRIGGER t3t BEFORE DELETE ON t3 BEGIN",
          "254:     DELETE FROM t3 WHERE id=old.id;",
          "255:   END;",
          "256: }",
          "258: do_execsql_test 7.3.3 {",
          "259:   DELETE FROM t3 WHERE a IN(2, 5, 8);",
          "260:   SELECT * FROM t3;",
          "261: } {}",
          "",
          "---------------"
        ],
        "test/insert4.test||test/insert4.test": [
          "File: test/insert4.test -> test/insert4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:   set sqlite3_xferopt_count",
          "599: } {1}",
          "602: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "601: #-------------------------------------------------------------------------",
          "602: # xfer transfer between tables where the source has an empty partial index.",
          "603: #",
          "604: do_execsql_test 11.0 {",
          "605:   CREATE TABLE t9(a, b, c);",
          "606:   CREATE INDEX t9a ON t9(a);",
          "607:   CREATE INDEX t9b ON t9(b) WHERE c=0;",
          "609:   INSERT INTO t9 VALUES(1, 1, 1);",
          "610:   INSERT INTO t9 VALUES(2, 2, 2);",
          "611:   INSERT INTO t9 VALUES(3, 3, 3);",
          "613:   CREATE TABLE t10(a, b, c);",
          "614:   CREATE INDEX t10a ON t10(a);",
          "615:   CREATE INDEX t10b ON t10(b) WHERE c=0;",
          "617:   INSERT INTO t10 SELECT * FROM t9;",
          "618:   SELECT * FROM t10;",
          "619:   PRAGMA integrity_check;",
          "620: } {1 1 1  2 2 2  3 3 3  ok}",
          "",
          "---------------"
        ],
        "test/pragma.test||test/pragma.test": [
          "File: test/pragma.test -> test/pragma.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:     PRAGMA synchronous;",
          "252:   }",
          "253: } {2}",
          "254: } ;# ifcapable pager_pragmas",
          "256: # Test turning \"flag\" pragmas on and off.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255: do_execsql_test 1.15.1 {",
          "256:   PRAGMA default_cache_size = 0;",
          "257: }",
          "258: do_execsql_test 1.15.2 {",
          "259:   PRAGMA default_cache_size;",
          "260: } $DFLT_CACHE_SZ",
          "261: do_execsql_test 1.15.3 {",
          "262:   PRAGMA default_cache_size = -500;",
          "263: }",
          "264: do_execsql_test 1.15.4 {",
          "265:   PRAGMA default_cache_size;",
          "266: } 500",
          "267: do_execsql_test 1.15.3 {",
          "268:   PRAGMA default_cache_size = 500;",
          "269: }",
          "270: do_execsql_test 1.15.4 {",
          "271:   PRAGMA default_cache_size;",
          "272: } 500",
          "273: db close",
          "274: hexio_write test.db 48 FFFFFF00",
          "275: sqlite3 db test.db",
          "276: do_execsql_test 1.15.4 {",
          "277:   PRAGMA default_cache_size;",
          "278: } 256",
          "",
          "---------------"
        ],
        "test/triggerC.test||test/triggerC.test": [
          "File: test/triggerC.test -> test/triggerC.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1057:   HAVING raise(ABORT, 'msg');",
          "1058: } {1 {RAISE() may only be used within a trigger-program}}",
          "1060: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1060: #-------------------------------------------------------------------------",
          "1061: # Datatype mismatch on IPK when there are BEFORE triggers.",
          "1062: #",
          "1063: do_execsql_test 17.0 {",
          "1064:   CREATE TABLE xyz(x INTEGER PRIMARY KEY, y, z);",
          "1065:   CREATE TRIGGER xyz_tr BEFORE INSERT ON xyz BEGIN",
          "1066:     SELECT new.x;",
          "1067:   END;",
          "1068: }",
          "1069: do_catchsql_test 17.1 {",
          "1070:   INSERT INTO xyz VALUES('hello', 2, 3);",
          "1071: } {1 {datatype mismatch}}",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:   DELETE FROM t2 WHERE b=1",
          "356: }",
          "359: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358: #-------------------------------------------------------------------------",
          "359: # UNIQUE constraint violation in an UPDATE with a multi-column PK.",
          "360: #",
          "361: reset_db",
          "362: do_execsql_test 10.0 {",
          "363:   CREATE TABLE t1(a, b, c UNIQUE, PRIMARY KEY(a, b)) WITHOUT ROWID;",
          "364:   INSERT INTO t1 VALUES('a', 'a', 1);",
          "365:   INSERT INTO t1 VALUES('a', 'b', 2);",
          "366:   INSERT INTO t1 VALUES('b', 'a', 3);",
          "367:   INSERT INTO t1 VALUES('b', 'b', 4);",
          "368: }",
          "370: do_catchsql_test 10.1 {",
          "371:   UPDATE t1 SET c=1 WHERE (a, b) = ('a', 'a');",
          "372: } {0 {}}",
          "373: do_catchsql_test 10.2 {",
          "374:   UPDATE t1 SET c=1 WHERE (a, b) = ('a', 'b');",
          "375: } {1 {UNIQUE constraint failed: t1.c}}",
          "376: do_catchsql_test 10.3 {",
          "377:   UPDATE t1 SET c=1 WHERE (a, b) = ('b', 'a');",
          "378: } {1 {UNIQUE constraint failed: t1.c}}",
          "379: do_catchsql_test 10.4 {",
          "380:   UPDATE t1 SET c=1 WHERE (a, b) = ('b', 'b');",
          "381: } {1 {UNIQUE constraint failed: t1.c}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}