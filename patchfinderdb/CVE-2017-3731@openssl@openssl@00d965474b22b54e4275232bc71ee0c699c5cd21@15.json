{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d0634a93bdc18e753d641c4563cb18f685e148f",
      "candidate_info": {
        "commit_hash": "5d0634a93bdc18e753d641c4563cb18f685e148f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5d0634a93bdc18e753d641c4563cb18f685e148f",
        "files": [
          "crypto/asn1/a_digest.c",
          "crypto/asn1/tasn_new.c",
          "crypto/evp/pmeth_lib.c",
          "crypto/ex_data.c",
          "crypto/x509/x_name.c",
          "ssl/statem/statem_srvr.c"
        ],
        "message": "Combined patch against OpenSSL_1_1_0-stable branch for the following issues:\n\nFixed a memory leak in ASN1_digest and ASN1_item_digest.\nReworked error handling in asn1_item_embed_new.\nFixed error handling in int_ctx_new and EVP_PKEY_CTX_dup.\nFixed a memory leak in CRYPTO_free_ex_data.\nReworked error handing in x509_name_ex_d2i, x509_name_encode and x509_name_canon.\nCheck for null pointer in tls_process_cert_verify.\n\nFixes #2103 #2104 #2105 #2109 #2111 #2115\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2163)",
        "before_after_code_files": [
          "crypto/asn1/a_digest.c||crypto/asn1/a_digest.c",
          "crypto/asn1/tasn_new.c||crypto/asn1/tasn_new.c",
          "crypto/evp/pmeth_lib.c||crypto/evp/pmeth_lib.c",
          "crypto/ex_data.c||crypto/ex_data.c",
          "crypto/x509/x_name.c||crypto/x509/x_name.c",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_digest.c||crypto/asn1/a_digest.c": [
          "File: crypto/asn1/a_digest.c -> crypto/asn1/a_digest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     p = str;",
          "38:     i2d(data, &p);",
          "41:         return 0;",
          "42:     OPENSSL_free(str);",
          "43:     return (1);",
          "44: }",
          "",
          "[Removed Lines]",
          "40:     if (!EVP_Digest(str, i, md, len, type, NULL))",
          "",
          "[Added Lines]",
          "40:     if (!EVP_Digest(str, i, md, len, type, NULL)) {",
          "41:         OPENSSL_free(str);",
          "43:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     if (!str)",
          "56:         return (0);",
          "59:         return 0;",
          "60:     OPENSSL_free(str);",
          "61:     return (1);",
          "62: }",
          "",
          "[Removed Lines]",
          "58:     if (!EVP_Digest(str, i, md, len, type, NULL))",
          "",
          "[Added Lines]",
          "60:     if (!EVP_Digest(str, i, md, len, type, NULL)) {",
          "61:         OPENSSL_free(str);",
          "63:     }",
          "",
          "---------------"
        ],
        "crypto/asn1/tasn_new.c||crypto/asn1/tasn_new.c": [
          "File: crypto/asn1/tasn_new.c -> crypto/asn1/tasn_new.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:         }",
          "101:         asn1_set_choice_selector(pval, -1, it);",
          "102:         if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it, NULL))",
          "104:         break;",
          "106:     case ASN1_ITYPE_NDEF_SEQUENCE:",
          "",
          "[Removed Lines]",
          "103:             goto auxerr;",
          "",
          "[Added Lines]",
          "103:             goto auxerr2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:         }",
          "127:         if (asn1_do_lock(pval, 0, it) < 0)",
          "129:         asn1_enc_init(pval, it);",
          "130:         for (i = 0, tt = it->templates; i < it->tcount; tt++, i++) {",
          "131:             pseqval = asn1_get_field_ptr(pval, tt);",
          "132:             if (!asn1_template_new(pseqval, tt))",
          "134:         }",
          "135:         if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it, NULL))",
          "137:         break;",
          "138:     }",
          "139: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "",
          "[Removed Lines]",
          "128:             goto memerr;",
          "133:                 goto memerr;",
          "136:             goto auxerr;",
          "",
          "[Added Lines]",
          "128:             goto memerr2;",
          "133:                 goto memerr2;",
          "136:             goto auxerr2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141: #endif",
          "142:     return 1;",
          "144:  memerr:",
          "145:     ASN1err(ASN1_F_ASN1_ITEM_EMBED_NEW, ERR_R_MALLOC_FAILURE);",
          "146: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:  memerr2:",
          "145:     ASN1_item_ex_free(pval, it);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148: #endif",
          "149:     return 0;",
          "151:  auxerr:",
          "152:     ASN1err(ASN1_F_ASN1_ITEM_EMBED_NEW, ASN1_R_AUX_ERROR);",
          "154: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "155:     OPENSSL_mem_debug_pop();",
          "156: #endif",
          "",
          "[Removed Lines]",
          "153:     ASN1_item_ex_free(pval, it);",
          "",
          "[Added Lines]",
          "153:  auxerr2:",
          "154:     ASN1_item_ex_free(pval, it);",
          "",
          "---------------"
        ],
        "crypto/evp/pmeth_lib.c||crypto/evp/pmeth_lib.c": [
          "File: crypto/evp/pmeth_lib.c -> crypto/evp/pmeth_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     if (pmeth->init) {",
          "135:         if (pmeth->init(ret) <= 0) {",
          "136:             EVP_PKEY_CTX_free(ret);",
          "137:             return NULL;",
          "138:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:             ret->pmeth = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:     if (pctx->pmeth->copy(rctx, pctx) > 0)",
          "259:         return rctx;",
          "261:     EVP_PKEY_CTX_free(rctx);",
          "262:     return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:     rctx->pmeth = NULL;",
          "",
          "---------------"
        ],
        "crypto/ex_data.c||crypto/ex_data.c": [
          "File: crypto/ex_data.c -> crypto/ex_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:     int mx, i;",
          "308:     EX_CALLBACKS *ip;",
          "309:     void *ptr;",
          "310:     EX_CALLBACK *stack[10];",
          "311:     EX_CALLBACK **storage = NULL;",
          "313:     if ((ip = get_and_lock(class_index)) == NULL)",
          "316:     mx = sk_EX_CALLBACK_num(ip->meth);",
          "317:     if (mx > 0) {",
          "",
          "[Removed Lines]",
          "314:         return;",
          "",
          "[Added Lines]",
          "310:     EX_CALLBACK *f;",
          "315:         goto err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:     }",
          "326:     CRYPTO_THREAD_unlock(ex_data_lock);",
          "332:     for (i = 0; i < mx; i++) {",
          "334:             ptr = CRYPTO_get_ex_data(ad, i);",
          "337:         }",
          "338:     }",
          "340:     if (storage != stack)",
          "341:         OPENSSL_free(storage);",
          "342:     sk_void_free(ad->sk);",
          "343:     ad->sk = NULL;",
          "344: }",
          "",
          "[Removed Lines]",
          "328:     if (mx > 0 && storage == NULL) {",
          "329:         CRYPTOerr(CRYPTO_F_CRYPTO_FREE_EX_DATA, ERR_R_MALLOC_FAILURE);",
          "330:         return;",
          "331:     }",
          "333:         if (storage[i] && storage[i]->free_func) {",
          "335:             storage[i]->free_func(obj, ptr, ad, i,",
          "336:                                   storage[i]->argl, storage[i]->argp);",
          "",
          "[Added Lines]",
          "330:         if (storage != NULL)",
          "331:             f = storage[i];",
          "332:         else {",
          "333:             CRYPTO_THREAD_write_lock(ex_data_lock);",
          "334:             f = sk_EX_CALLBACK_value(ip->meth, i);",
          "335:             CRYPTO_THREAD_unlock(ex_data_lock);",
          "336:         }",
          "337:         if (f != NULL && f->free_func != NULL) {",
          "339:             f->free_func(obj, ptr, ad, i, f->argl, f->argp);",
          "345:  err:",
          "",
          "---------------"
        ],
        "crypto/x509/x_name.c||crypto/x509/x_name.c": [
          "File: crypto/x509/x_name.c -> crypto/x509/x_name.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: }",
          "129: {",
          "131: }",
          "133: static int x509_name_ex_d2i(ASN1_VALUE **val,",
          "",
          "[Removed Lines]",
          "128: static void name_entry_stack_free(STACK_OF(X509_NAME_ENTRY) *ents)",
          "130:     sk_X509_NAME_ENTRY_pop_free(ents, X509_NAME_ENTRY_free);",
          "",
          "[Added Lines]",
          "128: static void local_sk_X509_NAME_ENTRY_free(STACK_OF(X509_NAME_ENTRY) *ne)",
          "130:     sk_X509_NAME_ENTRY_free(ne);",
          "131: }",
          "133: static void local_sk_X509_NAME_ENTRY_pop_free(STACK_OF(X509_NAME_ENTRY) *ne)",
          "134: {",
          "135:     sk_X509_NAME_ENTRY_pop_free(ne, X509_NAME_ENTRY_free);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:             entry->set = i;",
          "181:             if (!sk_X509_NAME_ENTRY_push(nm.x->entries, entry))",
          "182:                 goto err;",
          "183:         }",
          "184:     }",
          "192:     ret = x509_name_canon(nm.x);",
          "193:     if (!ret)",
          "194:         goto err;",
          "195:     nm.x->modified = 0;",
          "198:     return ret;",
          "200:  err:",
          "210:     ASN1err(ASN1_F_X509_NAME_EX_D2I, ERR_R_NESTED_ASN1_ERROR);",
          "211:     return 0;",
          "212: }",
          "",
          "[Removed Lines]",
          "190:     sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname.s, sk_X509_NAME_ENTRY_free);",
          "191:     intname.s = NULL;",
          "205:     if (intname.s != NULL) {",
          "206:         sk_X509_NAME_ENTRY_zero(nm.x->entries);",
          "207:         sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname.s, name_entry_stack_free);",
          "208:     }",
          "209:     X509_NAME_free(nm.x);",
          "",
          "[Added Lines]",
          "188:             sk_X509_NAME_ENTRY_set(entries, j, NULL);",
          "194:     sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname.s,",
          "195:                                          local_sk_X509_NAME_ENTRY_free);",
          "202:     if (nm.x != NULL)",
          "203:         X509_NAME_free(nm.x);",
          "204:     sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname.s,",
          "205:                                          local_sk_X509_NAME_ENTRY_pop_free);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:     return ret;",
          "233: }",
          "245: static int x509_name_encode(X509_NAME *a)",
          "246: {",
          "247:     union {",
          "",
          "[Removed Lines]",
          "235: static void local_sk_X509_NAME_ENTRY_free(STACK_OF(X509_NAME_ENTRY) *ne)",
          "236: {",
          "237:     sk_X509_NAME_ENTRY_free(ne);",
          "238: }",
          "240: static void local_sk_X509_NAME_ENTRY_pop_free(STACK_OF(X509_NAME_ENTRY) *ne)",
          "241: {",
          "242:     sk_X509_NAME_ENTRY_pop_free(ne, X509_NAME_ENTRY_free);",
          "243: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:             entries = sk_X509_NAME_ENTRY_new_null();",
          "265:             if (!entries)",
          "266:                 goto memerr;",
          "268:                 goto memerr;",
          "269:             set = entry->set;",
          "270:         }",
          "271:         if (!sk_X509_NAME_ENTRY_push(entries, entry))",
          "",
          "[Removed Lines]",
          "267:             if (!sk_STACK_OF_X509_NAME_ENTRY_push(intname.s, entries))",
          "",
          "[Added Lines]",
          "253:             if (!sk_STACK_OF_X509_NAME_ENTRY_push(intname.s, entries)) {",
          "254:                 sk_X509_NAME_ENTRY_free(entries);",
          "256:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:             entries = sk_X509_NAME_ENTRY_new_null();",
          "334:             if (!entries)",
          "335:                 goto err;",
          "337:                 goto err;",
          "338:             set = entry->set;",
          "339:         }",
          "340:         tmpentry = X509_NAME_ENTRY_new();",
          "",
          "[Removed Lines]",
          "336:             if (!sk_STACK_OF_X509_NAME_ENTRY_push(intname, entries))",
          "",
          "[Added Lines]",
          "324:             if (!sk_STACK_OF_X509_NAME_ENTRY_push(intname, entries)) {",
          "325:                 sk_X509_NAME_ENTRY_free(entries);",
          "327:             }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2716:     peer = s->session->peer;",
          "2717:     pkey = X509_get0_pubkey(peer);",
          "2718:     type = X509_certificate_type(peer, pkey);",
          "2720:     if (!(type & EVP_PKT_SIGN)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2718:     if (pkey == NULL) {",
          "2719:         al = SSL_AD_INTERNAL_ERROR;",
          "2720:         goto f_err;",
          "2721:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07bc93f479bb73567b23ceb6c2d96e7cc511edd3",
      "candidate_info": {
        "commit_hash": "07bc93f479bb73567b23ceb6c2d96e7cc511edd3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/07bc93f479bb73567b23ceb6c2d96e7cc511edd3",
        "files": [
          "crypto/o_time.c"
        ],
        "message": "Remove obsolete comment\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1613)\n(cherry picked from commit 7c120357e5ef434c8a7d1d1c3ba4f2a33266374e)",
        "before_after_code_files": [
          "crypto/o_time.c||crypto/o_time.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/o_time.c||crypto/o_time.c": [
          "File: crypto/o_time.c -> crypto/o_time.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     struct tm *ts = NULL;",
          "54: #if defined(OPENSSL_THREADS) && !defined(OPENSSL_SYS_WIN32) && (!defined(OPENSSL_SYS_VMS) || defined(gmtime_r)) && !defined(OPENSSL_SYS_MACOSX)",
          "60:     ts = result;",
          "61: #elif !defined(OPENSSL_SYS_VMS) || defined(VMS_GMTIME_OK)",
          "62:     ts = gmtime(timer);",
          "",
          "[Removed Lines]",
          "59:     gmtime_r(timer, result);",
          "",
          "[Added Lines]",
          "55:     if (gmtime_r(timer, result) == NULL)",
          "56:         return NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5229bbe73909c1f62b8696f20d0a291f7afc767c",
      "candidate_info": {
        "commit_hash": "5229bbe73909c1f62b8696f20d0a291f7afc767c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5229bbe73909c1f62b8696f20d0a291f7afc767c",
        "files": [
          "test/ct_test.c"
        ],
        "message": "Add test for CT_POLICY_EVAL_CTX default time\n\nChecks that the epoch_time_in_ms field of CT_POLICY_EVAL_CTX is initialized\nto approximately the current time (as returned by time()) by default. This\nprevents the addition of this field, and its verification during SCT\nvalidation, from breaking existing code that calls SCT_validate directly.\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1554)\n(cherry picked from commit ebcb536858a271e8812fb9bbafbc0b825e5ece24)",
        "before_after_code_files": [
          "test/ct_test.c||test/ct_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/ct_test.c||test/ct_test.c": [
          "File: test/ct_test.c -> test/ct_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <ctype.h>",
          "11: #include <stdio.h>",
          "12: #include <stdlib.h>",
          "13: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include <math.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "548:     EXECUTE_CT_TEST();",
          "549: }",
          "551: int main(int argc, char *argv[])",
          "552: {",
          "553:     int result = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556: static int test_default_ct_policy_eval_ctx_time_is_now()",
          "557: {",
          "558:     int success = 0;",
          "559:     CT_POLICY_EVAL_CTX *ct_policy_ctx = CT_POLICY_EVAL_CTX_new();",
          "560:     const time_t default_time = CT_POLICY_EVAL_CTX_get_time(ct_policy_ctx) /",
          "561:             1000;",
          "564:     if (fabs(difftime(time(NULL), default_time)) > time_tolerance) {",
          "565:         fprintf(stderr,",
          "566:                 \"Default CT_POLICY_EVAL_CTX time is not approximately now.\\n\");",
          "567:         goto end;",
          "568:     }",
          "570:     success = 1;",
          "571: end:",
          "572:     CT_POLICY_EVAL_CTX_free(ct_policy_ctx);",
          "573:     return success;",
          "574: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "571:     ADD_TEST(test_verify_fails_for_future_sct);",
          "572:     ADD_TEST(test_decode_tls_sct);",
          "573:     ADD_TEST(test_encode_tls_sct);",
          "575:     result = run_tests(argv[0]);",
          "576:     ERR_print_errors_fp(stderr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "599:     ADD_TEST(test_default_ct_policy_eval_ctx_time_is_now);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c947fa492ea8d727929d02605a41979cfff7b261",
      "candidate_info": {
        "commit_hash": "c947fa492ea8d727929d02605a41979cfff7b261",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c947fa492ea8d727929d02605a41979cfff7b261",
        "files": [
          "test/asynciotest.c"
        ],
        "message": "Make async_read and async_write return -1 on failure.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n\nGH: #1966",
        "before_after_code_files": [
          "test/asynciotest.c||test/asynciotest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/asynciotest.c||test/asynciotest.c": [
          "File: test/asynciotest.c -> test/asynciotest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: static int async_read(BIO *bio, char *out, int outl)",
          "86: {",
          "87:     struct async_ctrs *ctrs;",
          "89:     BIO *next = BIO_next(bio);",
          "91:     if (outl <= 0)",
          "",
          "[Removed Lines]",
          "88:     int ret = 0;",
          "",
          "[Added Lines]",
          "88:     int ret = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120: static int async_write(BIO *bio, const char *in, int inl)",
          "121: {",
          "122:     struct async_ctrs *ctrs;",
          "124:     size_t written = 0;",
          "125:     BIO *next = BIO_next(bio);",
          "",
          "[Removed Lines]",
          "123:     int ret = 0;",
          "",
          "[Added Lines]",
          "123:     int ret = -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aaec49fae2c4605ec578ad77b14913852fe4acca",
      "candidate_info": {
        "commit_hash": "aaec49fae2c4605ec578ad77b14913852fe4acca",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/aaec49fae2c4605ec578ad77b14913852fe4acca",
        "files": [
          "crypto/dsa/dsa_pmeth.c"
        ],
        "message": "Fix DSA parameter generation control error\n\nWhen setting the digest parameter for DSA parameter generation, the\nsignature MD was set instead of the parameter generation one.\nFortunately, that's also the one that was used for parameter\ngeneration, but it ultimately meant the parameter generator MD and the\nsignature MD would always be the same.\n\nFixes github issue #2016\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2250)\n(cherry picked from commit 8a05c4d3b5a1bfb9193ea24e71735e11de7168d2)",
        "before_after_code_files": [
          "crypto/dsdsa_pmeth.c||crypto/dsa/dsa_pmeth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/dsdsa_pmeth.c||crypto/dsa/dsa_pmeth.c": [
          "File: crypto/dsdsa_pmeth.c -> crypto/dsa/dsa_pmeth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:         dctx->pmd = p2;",
          "",
          "---------------"
        ]
      }
    }
  ]
}