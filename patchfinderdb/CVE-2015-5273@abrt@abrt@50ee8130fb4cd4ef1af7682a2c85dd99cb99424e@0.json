{
  "cve_id": "CVE-2015-5273",
  "cve_desc": "The abrt-action-install-debuginfo-to-abrt-cache help program in Automatic Bug Reporting Tool (ABRT) before 2.7.1 allows local users to write to arbitrary files via a symlink attack on unpacked.cpio in a pre-created directory with a predictable name in /var/tmp.",
  "repo": "abrt/abrt",
  "patch_hash": "50ee8130fb4cd4ef1af7682a2c85dd99cb99424e",
  "patch_info": {
    "commit_hash": "50ee8130fb4cd4ef1af7682a2c85dd99cb99424e",
    "repo": "abrt/abrt",
    "commit_url": "https://github.com/abrt/abrt/commit/50ee8130fb4cd4ef1af7682a2c85dd99cb99424e",
    "files": [
      "src/plugins/Makefile.am",
      "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
    ],
    "message": "a-a-i-d-to-abrt-cache: make own random temporary directory\n\nThe set-user-ID wrapper must use own new temporary directory in order to\navoid security issues with unpacking specially crafted debuginfo\npackages that might be used to create files or symlinks anywhere on the\nfile system as the abrt user.\n\nWithot the forking code the temporary directory would remain on the\nfilesystem in the case where all debuginfo data are already available.\nThis is caused by the fact that the underlying libreport functionality\naccepts path to a desired temporary directory and creates it only if\nnecessary. Otherwise, the directory is not touched at all.\n\nThis commit addresses CVE-2015-5273\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
    "before_after_code_files": [
      "src/plugins/Makefile.am||src/plugins/Makefile.am",
      "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
    ]
  },
  "patch_diff": {
    "src/plugins/Makefile.am||src/plugins/Makefile.am": [
      "File: src/plugins/Makefile.am -> src/plugins/Makefile.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "371:     -D_GNU_SOURCE \\",
      "372:     -DBIN_DIR=\\\"$(bindir)\\\" \\",
      "373:     -DSBIN_DIR=\\\"$(sbindir)\\\" \\",
      "374:     $(LIBREPORT_CFLAGS) \\",
      "375:     -Wall -Wwrite-strings \\",
      "376:     -fPIE",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "374:     -DLARGE_DATA_TMP_DIR=\\\"$(LARGE_DATA_TMP_DIR)\\\" \\",
      "",
      "---------------"
    ],
    "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c": [
      "File: src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c -> src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "108:         build_ids_self_fd = xasprintf(\"/proc/self/fd/%d\", build_ids_fd);",
      "109:     }",
      "113:     {",
      "114:         const char *verbs[] = { \"\", \"-v\", \"-vv\", \"-vvv\" };",
      "115:         unsigned i = 0;",
      "",
      "[Removed Lines]",
      "112:     const char *args[11];",
      "",
      "[Added Lines]",
      "111:     char tmp_directory[] = LARGE_DATA_TMP_DIR\"/abrt-tmp-debuginfo.XXXXXX\";",
      "112:     if (mkdtemp(tmp_directory) == NULL)",
      "113:         perror_msg_and_die(\"Failed to create working directory\");",
      "115:     log_info(\"Created working directory: %s\", tmp_directory);",
      "118:     const char *args[13];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "130:             args[i++] = \"--repo\";",
      "131:             args[i++] = repo;",
      "132:         }",
      "133:         args[i++] = \"--\";",
      "134:         args[i] = NULL;",
      "135:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "139:         args[i++] = \"--tmpdir\";",
      "140:         args[i++] = tmp_directory;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "204:         umask(0022);",
      "205:     }",
      "209: }",
      "",
      "[Removed Lines]",
      "207:     execvp(EXECUTABLE, (char **)args);",
      "208:     error_msg_and_die(\"Can't execute %s\", EXECUTABLE);",
      "",
      "[Added Lines]",
      "215:     pid_t pid = fork();",
      "216:     if (pid < 0)",
      "217:         perror_msg_and_die(\"fork\");",
      "219:     if (pid == 0)",
      "220:     {",
      "221:         execvp(EXECUTABLE, (char **)args);",
      "222:         error_msg_and_die(\"Can't execute %s\", EXECUTABLE);",
      "223:     }",
      "225:     int status;",
      "226:     if (safe_waitpid(pid, &status, 0) < 0)",
      "227:         perror_msg_and_die(\"waitpid\");",
      "229:     if (rmdir(tmp_directory) >= 0)",
      "230:         log_info(\"Removed working directory: %s\", tmp_directory);",
      "231:     else if (errno != ENOENT)",
      "232:         perror_msg(\"Failed to remove working directory\");",
      "235:     if (WIFEXITED(status))",
      "236:         return WEXITSTATUS(status);",
      "238:     if (WIFSIGNALED(status))",
      "239:         error_msg_and_die(\"Child terminated with signal %d\", WTERMSIG(status));",
      "241:     error_msg_and_die(\"Child exit failed\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0cedaa9624bec0ff74ecd079062dc5cc7e6bd35b",
      "candidate_info": {
        "commit_hash": "0cedaa9624bec0ff74ecd079062dc5cc7e6bd35b",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/0cedaa9624bec0ff74ecd079062dc5cc7e6bd35b",
        "files": [
          "doc/abrt-action-install-debuginfo.txt",
          "src/plugins/abrt-action-analyze-ccpp-local.in",
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
          "src/plugins/abrt-action-install-debuginfo.in"
        ],
        "message": "ccpp: configure package repositories for correct OS\n\nIf we run ABRT in a container or if we catch a crash in a chroot, we\nneed to look for debuginfo packages relevant to the source of the crash.\nHence we need to tell package managers which version of OS we are\ninterested in.\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/plugins/abrt-action-analyze-ccpp-local.in||src/plugins/abrt-action-analyze-ccpp-local.in",
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
          "src/plugins/abrt-action-install-debuginfo.in||src/plugins/abrt-action-install-debuginfo.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
          ],
          "candidate": [
            "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/abrt-action-analyze-ccpp-local.in||src/plugins/abrt-action-analyze-ccpp-local.in": [
          "File: src/plugins/abrt-action-analyze-ccpp-local.in -> src/plugins/abrt-action-analyze-ccpp-local.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: done",
          "10: if $INSTALL_DI; then",
          "11:     # On some systems debuginfo install needs root privileges.",
          "12:     # Running a suided-to-abrt wrapper would make",
          "13:     # debuginfo install fail even for root.",
          "14:     # Therefore, if we are root, we don't use the wrapper.",
          "15:     if [ x\"`id -u`\" = x\"0\" ]; then",
          "19:     fi",
          "20: fi",
          "22: if [ $? = 0 ]; then",
          "",
          "[Removed Lines]",
          "16:         abrt-action-analyze-core --core=coredump -o build_ids && abrt-action-install-debuginfo --size_mb=4096",
          "17:     else",
          "18:         abrt-action-analyze-core --core=coredump -o build_ids && @LIBEXEC_DIR@/abrt-action-install-debuginfo-to-abrt-cache --size_mb=4096",
          "",
          "[Added Lines]",
          "11:     abrt-action-analyze-core --core=coredump -o build_ids || exit $?",
          "17:     EXECUTABLE=@LIBEXEC_DIR@/abrt-action-install-debuginfo-to-abrt-cache",
          "19:         EXECUTABLE=abrt-action-install-debuginfo",
          "22:     # Get VERSION_ID from crash's /etc/os-release (stored as os_info in a dump",
          "23:     # directory).",
          "24:     # We need this value for package managers to configure the correct",
          "25:     # repositories (i.e. '$releasever' for DNF/Yum).",
          "26:     EXTRA_ARGS=",
          "27:     for osrel in \"${DUMP_DIR:-.}/os_info_in_rootdir\" \"${DUMP_DIR:-.}/os_info\"",
          "28:     do",
          "29:         if [ -e $osrel ]; then",
          "30:             . $osrel",
          "31:             if [ -n \"$VERSION_ID\" ]; then",
          "32:                 EXTRA_ARGS=\"--releasever=$VERSION_ID\"",
          "33:                 break",
          "34:             fi",
          "35:         fi",
          "36:     done",
          "38:     ${EXECUTABLE} ${EXTRA_ARGS} --size_mb=4096",
          "",
          "---------------"
        ],
        "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c": [
          "File: src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c -> src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         OPT_e = 1 << 3,",
          "55:         OPT_r = 1 << 4,",
          "56:         OPT_s = 1 << 5,",
          "57:     };",
          "59:     const char *build_ids = \"build_ids\";",
          "60:     const char *exact = NULL;",
          "61:     const char *repo = NULL;",
          "62:     const char *size_mb = NULL;",
          "64:     struct options program_options[] = {",
          "65:         OPT__VERBOSE(&g_verbose),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:         OPT_R = 1 << 6,",
          "64:     const char *releasever = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         OPT_STRING('e', \"exact\",     &exact, \"EXACT\",          _(\"Download only specified files\")),",
          "69:         OPT_STRING('r', \"repo\",       &repo, \"REPO\",           _(\"Pattern to use when searching for repos, default: *debug*\")),",
          "70:         OPT_STRING('s', \"size_mb\", &size_mb, \"SIZE_MB\",        _(\"Ignored option\")),",
          "71:         OPT_END()",
          "72:     };",
          "73:     const unsigned opts = parse_opts(argc, argv, program_options, program_usage_string);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:         OPT_STRING('R', \"releasever\", &releasever, \"RELEASEVER\", _(\"OS release version\")),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:     log_info(\"Created working directory: %s\", tmp_directory);",
          "119:     {",
          "120:         const char *verbs[] = { \"\", \"-v\", \"-vv\", \"-vvv\" };",
          "121:         unsigned i = 0;",
          "",
          "[Removed Lines]",
          "118:     const char *args[13];",
          "",
          "[Added Lines]",
          "121:     const char *args[15];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:             args[i++] = \"--repo\";",
          "137:             args[i++] = repo;",
          "138:         }",
          "139:         args[i++] = \"--tmpdir\";",
          "140:         args[i++] = tmp_directory;",
          "141:         args[i++] = \"--\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:         if ((opts & OPT_R))",
          "143:         {",
          "144:             args[i++] = \"--releasever\";",
          "145:             args[i++] = releasever;",
          "146:         }",
          "",
          "---------------"
        ],
        "src/plugins/abrt-action-install-debuginfo.in||src/plugins/abrt-action-install-debuginfo.in": [
          "File: src/plugins/abrt-action-install-debuginfo.in -> src/plugins/abrt-action-install-debuginfo.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     missing = None",
          "72:     repo_pattern = \"*debug*\"",
          "73:     pkgmgr = None",
          "75:     # localization",
          "76:     init_gettext()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     releasever = None",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:             \"Usage: %s [-vy] [--ids=BUILD_IDS_FILE] [--pkgmgr=(yum|dnf)]\\n\"",
          "90:             \"       [--tmpdir=TMPDIR] [--cache=CACHEDIR[:DEBUGINFODIR1:DEBUGINFODIR2...]] [--size_mb=SIZE]\\n\"",
          "91:             \"       [-e, --exact=PATH[:PATH]...]\\n\"",
          "92:             \"\\n\"",
          "93:             \"Installs debuginfos for all build-ids listed in BUILD_IDS_FILE\\n\"",
          "94:             \"to CACHEDIR, using TMPDIR as temporary staging area.\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:             \"       [--releasever=RELEASEVER]\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:             \"    -e,--exact  Download only specified files\\n\"",
          "109:             \"    --repo      Pattern to use when searching for repos.\\n\"",
          "110:             \"                Default: *debug*\\n\"",
          "111:             # --keeprpms is not documented yet because it's a NOP so far",
          "112:     ) % PROGNAME",
          "114:     try:",
          "115:         opts, args = getopt.getopt(sys.argv[1:], \"vyhe\",",
          "116:                 [\"help\", \"ids=\", \"cache=\", \"size_mb=\", \"tmpdir=\", \"keeprpms\",",
          "118:     except getopt.GetoptError as err:",
          "119:         print(err) # prints something like \"option -a not recognized\"",
          "120:         exit(RETURN_FAILURE)",
          "",
          "[Removed Lines]",
          "117:                  \"exact=\", \"repo=\", \"pkgmgr=\"])",
          "",
          "[Added Lines]",
          "113:             \"    --releasever RELEASEVER\\n\"",
          "114:             \"                Pass this OS version to package managers.\\n\"",
          "121:                  \"exact=\", \"repo=\", \"pkgmgr=\", \"releasever=\"])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:             repo_pattern = arg",
          "149:         elif opt == \"--pkgmgr\":",
          "150:             pkgmgr = arg",
          "152:     set_verbosity(verbose)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:         elif opt == \"--releasever\":",
          "156:             releasever = arg",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "239:         try:",
          "240:             downloader = download_class(cache=cachedirs[0], tmp=TMPDIR,",
          "241:                                     noninteractive=noninteractive,",
          "243:             result = downloader.download(missing, download_exact_files=exact_fls)",
          "244:         except OSError as ex:",
          "245:             if ex.errno == errno.EPIPE:",
          "",
          "[Removed Lines]",
          "242:                                     repo_pattern=repo_pattern)",
          "",
          "[Added Lines]",
          "248:                                     repo_pattern=repo_pattern,",
          "249:                                     releasever=releasever)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d66c8a345b7650ce9994efe6bf07e53000442b0",
      "candidate_info": {
        "commit_hash": "1d66c8a345b7650ce9994efe6bf07e53000442b0",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/1d66c8a345b7650ce9994efe6bf07e53000442b0",
        "files": [
          "po/POTFILES.in",
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
        ],
        "message": "a-a-i-d-t-a-cache: sanitize arguments\n\nParse command lines arguments and use them to create new arguments for\nexec(). No black listing algorithm would be safe enough. The only\nallowed arguments are the following:\n* v - verbose\n* y - noninteractive\n* repo - enable only repositories whose names match the pattern\n* exact - download packages for the specified files\n* ids - passed as magic proc fd path to the wrapped executable\n\nThe wrapper opens the list of needed build ids passes /proc/self/fd/[fd]\nto the wrapped process. This allows us to open the file with caller's\nUID/GID in order to avoid information disclosures.\n\nForbidden arguments:\n* cache - allows regular users to create a user writable dump directory\n* tmpdir - the same as above\n* size_mb - no need to allow users to fiddle with the cache size\n\nRelated: #1216962\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "po/POTFILES.in||po/POTFILES.in",
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
          ],
          "candidate": [
            "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
          ]
        }
      },
      "candidate_diff": {
        "po/POTFILES.in||po/POTFILES.in": [
          "File: po/POTFILES.in -> po/POTFILES.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: src/plugins/abrt-action-generate-backtrace.c",
          "34: src/plugins/abrt-action-generate-core-backtrace.c",
          "35: src/plugins/abrt-action-install-debuginfo.in",
          "36: src/plugins/abrt-action-perform-ccpp-analysis.in",
          "37: src/plugins/abrt-action-trim-files.c",
          "38: src/plugins/abrt-action-ureport",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
          "",
          "---------------"
        ],
        "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c": [
          "File: src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c -> src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: int main(int argc, char **argv)",
          "31: {",
          "40:     {",
          "54:     }",
          "65:     {",
          "69: #if 1",
          "",
          "[Removed Lines]",
          "37:     char **pp = argv;",
          "38:     char *arg;",
          "39:     while ((arg = *++pp) != NULL)",
          "42:         if (strcmp(arg, \"--ids=-\") == 0)",
          "43:             continue;",
          "45:         if (strncmp(arg, \"--exact\", 7) == 0)",
          "46:             continue;",
          "48:         if (strncmp(arg, \"--cache\", 7) == 0)",
          "49:             error_msg_and_die(\"bad option %s\", arg);",
          "50:         if (strncmp(arg, \"--tmpdir\", 8) == 0)",
          "51:             error_msg_and_die(\"bad option %s\", arg);",
          "52:         if (strncmp(arg, \"--ids\", 5) == 0)",
          "53:             error_msg_and_die(\"bad option %s\", arg);",
          "59:     gid_t g = getegid();",
          "61:     if (g != getgid())",
          "62:         IGNORE_RESULT(setregid(g, g));",
          "63:     uid_t u = geteuid();",
          "64:     if (u != getuid())",
          "66:         IGNORE_RESULT(setreuid(u, u));",
          "",
          "[Added Lines]",
          "33:     setlocale(LC_ALL, \"\");",
          "34: #if ENABLE_NLS",
          "35:     bindtextdomain(PACKAGE, LOCALEDIR);",
          "36:     textdomain(PACKAGE);",
          "37: #endif",
          "39:     abrt_init(argv);",
          "42:     const char *program_usage_string = _(",
          "43:         \"& [-y] [-i BUILD_IDS_FILE|-i -] [-e PATH[:PATH]...]\\n\"",
          "44:         \"\\t[-r REPO]\\n\"",
          "45:         \"\\n\"",
          "46:         \"Installs debuginfo packages for all build-ids listed in BUILD_IDS_FILE to\\n\"",
          "47:         \"ABRT system cache.\"",
          "48:     );",
          "50:     enum {",
          "51:         OPT_v = 1 << 0,",
          "52:         OPT_y = 1 << 1,",
          "53:         OPT_i = 1 << 2,",
          "54:         OPT_e = 1 << 3,",
          "55:         OPT_r = 1 << 4,",
          "56:         OPT_s = 1 << 5,",
          "57:     };",
          "59:     const char *build_ids = \"build_ids\";",
          "60:     const char *exact = NULL;",
          "61:     const char *repo = NULL;",
          "62:     const char *size_mb = NULL;",
          "64:     struct options program_options[] = {",
          "65:         OPT__VERBOSE(&g_verbose),",
          "66:         OPT_BOOL  ('y', \"yes\",         NULL,                   _(\"Noninteractive, assume 'Yes' to all questions\")),",
          "67:         OPT_STRING('i', \"ids\",   &build_ids, \"BUILD_IDS_FILE\", _(\"- means STDIN, default: build_ids\")),",
          "68:         OPT_STRING('e', \"exact\",     &exact, \"EXACT\",          _(\"Download only specified files\")),",
          "69:         OPT_STRING('r', \"repo\",       &repo, \"REPO\",           _(\"Pattern to use when searching for repos, default: *debug*\")),",
          "70:         OPT_STRING('s', \"size_mb\", &size_mb, \"SIZE_MB\",        _(\"Ignored option\")),",
          "71:         OPT_END()",
          "72:     };",
          "73:     const unsigned opts = parse_opts(argc, argv, program_options, program_usage_string);",
          "75:     const gid_t egid = getegid();",
          "76:     const gid_t rgid = getgid();",
          "77:     const uid_t euid = geteuid();",
          "78:     const gid_t ruid = getuid();",
          "87:     char *build_ids_self_fd = NULL;",
          "88:     if (strcmp(\"-\", build_ids) != 0)",
          "89:     {",
          "90:         if (setregid(egid, rgid) < 0)",
          "91:             perror_msg_and_die(\"setregid(egid, rgid)\");",
          "93:         if (setreuid(euid, ruid) < 0)",
          "94:             perror_msg_and_die(\"setreuid(euid, ruid)\");",
          "96:         const int build_ids_fd = open(build_ids, O_RDONLY);",
          "98:         if (setregid(rgid, egid) < 0)",
          "99:             perror_msg_and_die(\"setregid(rgid, egid)\");",
          "101:         if (setreuid(ruid, euid) < 0 )",
          "102:             perror_msg_and_die(\"setreuid(ruid, euid)\");",
          "104:         if (build_ids_fd < 0)",
          "105:             perror_msg_and_die(\"Failed to open file '%s'\", build_ids);",
          "108:         build_ids_self_fd = xasprintf(\"/proc/self/fd/%d\", build_ids_fd);",
          "109:     }",
          "112:     const char *args[11];",
          "114:         const char *verbs[] = { \"\", \"-v\", \"-vv\", \"-vvv\" };",
          "115:         unsigned i = 0;",
          "116:         args[i++] = EXECUTABLE;",
          "117:         args[i++] = \"--ids\";",
          "118:         args[i++] = (build_ids_self_fd != NULL) ? build_ids_self_fd : \"-\";",
          "119:         if (g_verbose > 0)",
          "120:             args[i++] = verbs[g_verbose <= 3 ? g_verbose : 3];",
          "121:         if ((opts & OPT_y))",
          "122:             args[i++] = \"-y\";",
          "123:         if ((opts & OPT_e))",
          "124:         {",
          "125:             args[i++] = \"--exact\";",
          "126:             args[i++] = exact;",
          "127:         }",
          "128:         if ((opts & OPT_r))",
          "129:         {",
          "130:             args[i++] = \"--repo\";",
          "131:             args[i++] = repo;",
          "132:         }",
          "133:         args[i++] = \"--\";",
          "134:         args[i] = NULL;",
          "141:     if (egid != rgid)",
          "142:         IGNORE_RESULT(setregid(egid, egid));",
          "143:     if (euid != ruid)",
          "145:         IGNORE_RESULT(setreuid(euid, euid));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:         char path_env[] = \"PATH=/usr/sbin:/sbin:/usr/bin:/bin:\"BIN_DIR\":\"SBIN_DIR;",
          "121:             strcpy(path_env, \"PATH=/usr/bin:/bin:\"BIN_DIR);",
          "122:         putenv(path_env);",
          "123:     }",
          "126:     error_msg_and_die(\"Can't execute %s\", EXECUTABLE);",
          "127: }",
          "",
          "[Removed Lines]",
          "120:         if (u != 0)",
          "125:     execvp(EXECUTABLE, argv);",
          "",
          "[Added Lines]",
          "199:         if (euid != 0)",
          "204:     execvp(EXECUTABLE, (char **)args);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bd1ce6331d938b31407b5fb9b8e0609d043e204",
      "candidate_info": {
        "commit_hash": "6bd1ce6331d938b31407b5fb9b8e0609d043e204",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/6bd1ce6331d938b31407b5fb9b8e0609d043e204",
        "files": [
          "src/plugins/Makefile.am",
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
        ],
        "message": "a-a-i-d-to-abrt-cache: make own random temporary directory\n\nThe set-user-ID wrapper must use own new temporary directory in order to\navoid security issues with unpacking specially crafted debuginfo\npackages that might be used to create files or symlinks anywhere on the\nfile system as the abrt user.\n\nWithot the forking code the temporary directory would remain on the\nfilesystem in the case where all debuginfo data are already available.\nThis is caused by the fact that the underlying libreport functionality\naccepts path to a desired temporary directory and creates it only if\nnecessary. Otherwise, the directory is not touched at all.\n\nThis commit addresses CVE-2015-5273\nRelated: #1262252\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/plugins/Makefile.am||src/plugins/Makefile.am",
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/Makefile.am||src/plugins/Makefile.am",
            "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
          ],
          "candidate": [
            "src/plugins/Makefile.am||src/plugins/Makefile.am",
            "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/Makefile.am||src/plugins/Makefile.am": [
          "File: src/plugins/Makefile.am -> src/plugins/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:     -D_GNU_SOURCE \\",
          "262:     -DBIN_DIR=\\\"$(bindir)\\\" \\",
          "263:     -DSBIN_DIR=\\\"$(sbindir)\\\" \\",
          "264:     $(LIBREPORT_CFLAGS) \\",
          "265:     -Wall -Wwrite-strings \\",
          "266:     -fPIE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264:     -DLARGE_DATA_TMP_DIR=\\\"$(LARGE_DATA_TMP_DIR)\\\" \\",
          "",
          "---------------"
        ],
        "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c": [
          "File: src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c -> src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:         build_ids_self_fd = xasprintf(\"/proc/self/fd/%d\", build_ids_fd);",
          "109:     }",
          "113:     {",
          "114:         const char *verbs[] = { \"\", \"-v\", \"-vv\", \"-vvv\" };",
          "115:         unsigned i = 0;",
          "",
          "[Removed Lines]",
          "112:     const char *args[11];",
          "",
          "[Added Lines]",
          "111:     char tmp_directory[] = LARGE_DATA_TMP_DIR\"/abrt-tmp-debuginfo.XXXXXX\";",
          "112:     if (mkdtemp(tmp_directory) == NULL)",
          "113:         perror_msg_and_die(\"Failed to create working directory\");",
          "115:     log_info(\"Created working directory: %s\", tmp_directory);",
          "118:     const char *args[13];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:             args[i++] = \"--repo\";",
          "131:             args[i++] = repo;",
          "132:         }",
          "133:         args[i++] = \"--\";",
          "134:         args[i] = NULL;",
          "135:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:         args[i++] = \"--tmpdir\";",
          "140:         args[i++] = tmp_directory;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "204:         umask(0022);",
          "205:     }",
          "209: }",
          "",
          "[Removed Lines]",
          "207:     execvp(EXECUTABLE, (char **)args);",
          "208:     error_msg_and_die(\"Can't execute %s\", EXECUTABLE);",
          "",
          "[Added Lines]",
          "215:     pid_t pid = fork();",
          "216:     if (pid < 0)",
          "217:         perror_msg_and_die(\"fork\");",
          "219:     if (pid == 0)",
          "220:     {",
          "221:         execvp(EXECUTABLE, (char **)args);",
          "222:         error_msg_and_die(\"Can't execute %s\", EXECUTABLE);",
          "223:     }",
          "225:     int status;",
          "226:     if (safe_waitpid(pid, &status, 0) < 0)",
          "227:         perror_msg_and_die(\"waitpid\");",
          "229:     if (rmdir(tmp_directory) >= 0)",
          "230:         log_info(\"Removed working directory: %s\", tmp_directory);",
          "231:     else if (errno != ENOENT)",
          "232:         perror_msg(\"Failed to remove working directory\");",
          "235:     if (WIFEXITED(status))",
          "236:         return WEXITSTATUS(status);",
          "238:     if (WIFSIGNALED(status))",
          "239:         error_msg_and_die(\"Child terminated with signal %d\", WTERMSIG(status));",
          "241:     error_msg_and_die(\"Child exit failed\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}