{
  "cve_id": "CVE-2021-29616",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. The implementation of TrySimplify(https://github.com/tensorflow/tensorflow/blob/c22d88d6ff33031aa113e48aa3fc9aa74ed79595/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc#L390-L401) has undefined behavior due to dereferencing a null pointer in corner cases that result in optimizing a node with no inputs. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "e6340f0665d53716ef3197ada88936c2a5f7a2d3",
  "patch_info": {
    "commit_hash": "e6340f0665d53716ef3197ada88936c2a5f7a2d3",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/e6340f0665d53716ef3197ada88936c2a5f7a2d3",
    "files": [
      "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
      "tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
    ],
    "message": "Handle a special grappler case resulting in crash.\n\nIt might happen that a malformed input could be used to trick Grappler into trying to optimize a node with no inputs. This, in turn, would produce a null pointer dereference and a segfault.\n\nPiperOrigin-RevId: 369242852\nChange-Id: I2e5cbe7aec243d34a6d60220ac8ac9b16f136f6b",
    "before_after_code_files": [
      "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
      "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc": [
      "File: tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc -> tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "2048:   Status TrySimplify(NodeDef* consumer, string* simplified_node_name) override {",
      "2049:     NodeDef* producer;",
      "2050:     TF_RETURN_IF_ERROR(GetInputNode(consumer->input(0), &producer));",
      "2051:     const bool producer_is_cast = IsCastLike(*producer);",
      "2052:     const bool can_optimize =",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2051:     if (consumer->input_size() < 1) {",
      "2052:       return errors::FailedPrecondition(\"Node \", simplified_node_name,",
      "2053:                                         \" lacks inputs\");",
      "2054:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2538:   ~ReplaceMulWithSquare() override = default;",
      "2540:   bool IsSupported(const NodeDef* node) const override {",
      "2541:     return IsAnyMul(*node) && node->input(0) == node->input(1);",
      "2542:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2547:     if (!node || node->input_size() < 2) {",
      "2549:       return false;",
      "2550:     }",
      "",
      "---------------"
    ],
    "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc": [
      "File: tensorflow/core/grappler/optimizers/dependency_optimizer.cc -> tensorflow/core/grappler/optimizers/dependency_optimizer.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:     return false;",
      "70:   }",
      "71:   const NodeDef* input = node_map_->GetNode(NodeName(node.input(0)));",
      "72:   CHECK(input != nullptr) << \"node = \" << node.name()",
      "73:                           << \" input = \" << node.input(0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72:   if (node.input_size() < 1) {",
      "74:     return false;",
      "75:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01b62529099f03b60efb80c85f1f35b27e9fc624",
      "candidate_info": {
        "commit_hash": "01b62529099f03b60efb80c85f1f35b27e9fc624",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/01b62529099f03b60efb80c85f1f35b27e9fc624",
        "files": [
          "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
        ],
        "message": "Handle a special grappler case resulting in crash.\n\nIt might happen that a malformed input could be used to trick Grappler into trying to optimize a node with no inputs. This, in turn, would produce a null pointer dereference and a segfault.\n\nPiperOrigin-RevId: 369242852\nChange-Id: I2e5cbe7aec243d34a6d60220ac8ac9b16f136f6b",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
            "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
            "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc": [
          "File: tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc -> tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1995:   Status TrySimplify(NodeDef* consumer, string* simplified_node_name) override {",
          "1996:     NodeDef* producer;",
          "1997:     TF_RETURN_IF_ERROR(GetInputNode(consumer->input(0), &producer));",
          "1998:     const bool producer_is_cast = IsCastLike(*producer);",
          "1999:     const bool can_optimize =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1998:     if (consumer->input_size() < 1) {",
          "1999:       return errors::FailedPrecondition(\"Node \", simplified_node_name,",
          "2000:                                         \" lacks inputs\");",
          "2001:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2393:   ~ReplaceMulWithSquare() override = default;",
          "2395:   bool IsSupported(const NodeDef* node) const override {",
          "2396:     return IsAnyMul(*node) && node->input(0) == node->input(1);",
          "2397:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2402:     if (!node || node->input_size() < 2) {",
          "2404:       return false;",
          "2405:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc": [
          "File: tensorflow/core/grappler/optimizers/dependency_optimizer.cc -> tensorflow/core/grappler/optimizers/dependency_optimizer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     return false;",
          "70:   }",
          "71:   const NodeDef* input = node_map_->GetNode(NodeName(node.input(0)));",
          "72:   CHECK(input != nullptr) << \"node = \" << node.name()",
          "73:                           << \" input = \" << node.input(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   if (node.input_size() < 1) {",
          "74:     return false;",
          "75:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d911e80fafb03ac37713c0f68cb0290273ecbc4",
      "candidate_info": {
        "commit_hash": "8d911e80fafb03ac37713c0f68cb0290273ecbc4",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/8d911e80fafb03ac37713c0f68cb0290273ecbc4",
        "files": [
          "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
        ],
        "message": "Handle a special grappler case resulting in crash.\n\nIt might happen that a malformed input could be used to trick Grappler into trying to optimize a node with no inputs. This, in turn, would produce a null pointer dereference and a segfault.\n\nPiperOrigin-RevId: 369242852\nChange-Id: I2e5cbe7aec243d34a6d60220ac8ac9b16f136f6b",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
            "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
            "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc": [
          "File: tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc -> tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1971:   Status TrySimplify(NodeDef* consumer, string* simplified_node_name) override {",
          "1972:     NodeDef* producer;",
          "1973:     TF_RETURN_IF_ERROR(GetInputNode(consumer->input(0), &producer));",
          "1974:     const bool producer_is_cast = IsCastLike(*producer);",
          "1975:     const bool can_optimize =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1974:     if (consumer->input_size() < 1) {",
          "1975:       return errors::FailedPrecondition(\"Node \", simplified_node_name,",
          "1976:                                         \" lacks inputs\");",
          "1977:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2369:   ~ReplaceMulWithSquare() override = default;",
          "2371:   bool IsSupported(const NodeDef* node) const override {",
          "2372:     return IsAnyMul(*node) && node->input(0) == node->input(1);",
          "2373:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2378:     if (!node || node->input_size() < 2) {",
          "2380:       return false;",
          "2381:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc": [
          "File: tensorflow/core/grappler/optimizers/dependency_optimizer.cc -> tensorflow/core/grappler/optimizers/dependency_optimizer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     return false;",
          "69:   }",
          "70:   const NodeDef* input = node_map_->GetNode(NodeName(node.input(0)));",
          "71:   CHECK(input != nullptr) << \"node = \" << node.name()",
          "72:                           << \" input = \" << node.input(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   if (node.input_size() < 1) {",
          "73:     return false;",
          "74:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d389284c20ba82cc59697f075fc935272c5e5036",
      "candidate_info": {
        "commit_hash": "d389284c20ba82cc59697f075fc935272c5e5036",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/d389284c20ba82cc59697f075fc935272c5e5036",
        "files": [
          "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
        ],
        "message": "Handle a special grappler case resulting in crash.\n\nIt might happen that a malformed input could be used to trick Grappler into trying to optimize a node with no inputs. This, in turn, would produce a null pointer dereference and a segfault.\n\nPiperOrigin-RevId: 369242852\nChange-Id: I2e5cbe7aec243d34a6d60220ac8ac9b16f136f6b",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
            "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
            "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc": [
          "File: tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc -> tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2048:   Status TrySimplify(NodeDef* consumer, string* simplified_node_name) override {",
          "2049:     NodeDef* producer;",
          "2050:     TF_RETURN_IF_ERROR(GetInputNode(consumer->input(0), &producer));",
          "2051:     const bool producer_is_cast = IsCastLike(*producer);",
          "2052:     const bool can_optimize =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2051:     if (consumer->input_size() < 1) {",
          "2052:       return errors::FailedPrecondition(\"Node \", simplified_node_name,",
          "2053:                                         \" lacks inputs\");",
          "2054:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2538:   ~ReplaceMulWithSquare() override = default;",
          "2540:   bool IsSupported(const NodeDef* node) const override {",
          "2541:     return IsAnyMul(*node) && node->input(0) == node->input(1);",
          "2542:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2547:     if (!node || node->input_size() < 2) {",
          "2549:       return false;",
          "2550:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc": [
          "File: tensorflow/core/grappler/optimizers/dependency_optimizer.cc -> tensorflow/core/grappler/optimizers/dependency_optimizer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     return false;",
          "70:   }",
          "71:   const NodeDef* input = node_map_->GetNode(NodeName(node.input(0)));",
          "72:   CHECK(input != nullptr) << \"node = \" << node.name()",
          "73:                           << \" input = \" << node.input(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   if (node.input_size() < 1) {",
          "74:     return false;",
          "75:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26d49a02bf0ca62a78426624d594056c62845656",
      "candidate_info": {
        "commit_hash": "26d49a02bf0ca62a78426624d594056c62845656",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/26d49a02bf0ca62a78426624d594056c62845656",
        "files": [
          "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
        ],
        "message": "Handle a special grappler case resulting in crash.\n\nIt might happen that a malformed input could be used to trick Grappler into trying to optimize a node with no inputs. This, in turn, would produce a null pointer dereference and a segfault.\n\nPiperOrigin-RevId: 369242852\nChange-Id: I2e5cbe7aec243d34a6d60220ac8ac9b16f136f6b",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
            "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
            "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc": [
          "File: tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc -> tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2029:   Status TrySimplify(NodeDef* consumer, string* simplified_node_name) override {",
          "2030:     NodeDef* producer;",
          "2031:     TF_RETURN_IF_ERROR(GetInputNode(consumer->input(0), &producer));",
          "2032:     const bool producer_is_cast = IsCastLike(*producer);",
          "2033:     const bool can_optimize =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2032:     if (consumer->input_size() < 1) {",
          "2033:       return errors::FailedPrecondition(\"Node \", simplified_node_name,",
          "2034:                                         \" lacks inputs\");",
          "2035:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2430:   ~ReplaceMulWithSquare() override = default;",
          "2432:   bool IsSupported(const NodeDef* node) const override {",
          "2433:     return IsAnyMul(*node) && node->input(0) == node->input(1);",
          "2434:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2439:     if (!node || node->input_size() < 2) {",
          "2441:       return false;",
          "2442:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc": [
          "File: tensorflow/core/grappler/optimizers/dependency_optimizer.cc -> tensorflow/core/grappler/optimizers/dependency_optimizer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     return false;",
          "70:   }",
          "71:   const NodeDef* input = node_map_->GetNode(NodeName(node.input(0)));",
          "72:   CHECK(input != nullptr) << \"node = \" << node.name()",
          "73:                           << \" input = \" << node.input(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   if (node.input_size() < 1) {",
          "74:     return false;",
          "75:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "300d27b1a2a69e1b38b049a67f791d087972e9c3",
      "candidate_info": {
        "commit_hash": "300d27b1a2a69e1b38b049a67f791d087972e9c3",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/300d27b1a2a69e1b38b049a67f791d087972e9c3",
        "files": [
          "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
        ],
        "message": "Handle a special grappler case resulting in crash.\n\nIt might happen that a malformed input could be used to trick Grappler into trying to optimize a node with no inputs. This, in turn, would produce a null pointer dereference and a segfault.\n\nPiperOrigin-RevId: 369242852\nChange-Id: I2e5cbe7aec243d34a6d60220ac8ac9b16f136f6b",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
            "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
            "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc||tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc": [
          "File: tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc -> tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2001:   Status TrySimplify(NodeDef* consumer, string* simplified_node_name) override {",
          "2002:     NodeDef* producer;",
          "2003:     TF_RETURN_IF_ERROR(GetInputNode(consumer->input(0), &producer));",
          "2004:     const bool producer_is_cast = IsCastLike(*producer);",
          "2005:     const bool can_optimize =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2004:     if (consumer->input_size() < 1) {",
          "2005:       return errors::FailedPrecondition(\"Node \", simplified_node_name,",
          "2006:                                         \" lacks inputs\");",
          "2007:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2402:   ~ReplaceMulWithSquare() override = default;",
          "2404:   bool IsSupported(const NodeDef* node) const override {",
          "2405:     return IsAnyMul(*node) && node->input(0) == node->input(1);",
          "2406:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2411:     if (!node || node->input_size() < 2) {",
          "2413:       return false;",
          "2414:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/optimizers/dependency_optimizer.cc||tensorflow/core/grappler/optimizers/dependency_optimizer.cc": [
          "File: tensorflow/core/grappler/optimizers/dependency_optimizer.cc -> tensorflow/core/grappler/optimizers/dependency_optimizer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     return false;",
          "70:   }",
          "71:   const NodeDef* input = node_map_->GetNode(NodeName(node.input(0)));",
          "72:   CHECK(input != nullptr) << \"node = \" << node.name()",
          "73:                           << \" input = \" << node.input(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   if (node.input_size() < 1) {",
          "74:     return false;",
          "75:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}