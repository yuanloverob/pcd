{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c35b3065c509ec49a0ca40c85df2fdf3274306b",
      "candidate_info": {
        "commit_hash": "6c35b3065c509ec49a0ca40c85df2fdf3274306b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c35b3065c509ec49a0ca40c85df2fdf3274306b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "src/sqlite.h.in",
          "test/jrnlmode.test"
        ],
        "message": "Disable PRAGMA journal_mode=OFF when SQLITE_DBCONFIG_DEFENSIVE is turned on. Ticket [f4ec250930342e0c].\n\nFossilOrigin-Name: a0f5eb5c79cc33b7224f3421d2baa02a2a19eb9d6eaa8117dda4a1878b229cb5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "test/jrnlmode.test||test/jrnlmode.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14c00b1016ba53ab2dc177c59a27b6b9209202973685f0f274112d296ba7dfcb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "645:         eMode = PAGER_JOURNALMODE_QUERY;",
          "646:       }",
          "647:     }",
          "648:     if( eMode==PAGER_JOURNALMODE_QUERY && pId2->n==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "647:       if( eMode==PAGER_JOURNALMODE_OFF && (db->flags & SQLITE_Defensive)!=0 ){",
          "650:         eMode = PAGER_JOURNALMODE_QUERY;",
          "651:       }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "test/jrnlmode.test||test/jrnlmode.test": [
          "File: test/jrnlmode.test -> test/jrnlmode.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     PRAGMA temp.journal_mode;",
          "66:   }",
          "67: } [list persist persist [temp_journal_mode persist]]",
          "69:   execsql {",
          "70:     PRAGMA journal_mode = off;",
          "71:   }",
          "",
          "[Removed Lines]",
          "68: do_test jrnlmode-1.4 {",
          "",
          "[Added Lines]",
          "68: do_test jrnlmode-1.4a {",
          "69:   # When defensive is on, unable to set journal_mode to OFF",
          "70:   sqlite3_db_config db DEFENSIVE 1",
          "71:   execsql {",
          "72:     PRAGMA journal_mode = off;",
          "73:   }",
          "74: } {persist}",
          "75: do_test jrnlmode-1.4b {",
          "76:   # When defensive is on, unable to set journal_mode to OFF",
          "77:   sqlite3_db_config db DEFENSIVE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30842990b27387423009c9c96e34fd3e0d3c66de",
      "candidate_info": {
        "commit_hash": "30842990b27387423009c9c96e34fd3e0d3c66de",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/30842990b27387423009c9c96e34fd3e0d3c66de",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/global.c",
          "src/main.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h"
        ],
        "message": "Add a TESTCTRL that disables the verification of type, name, and tbl_name in the sqlite_master table.\n\nFossilOrigin-Name: 48d9b48ab4ace234eb1a055cf33cb533a1c3aa82d0a6e086d96226bd9474ceca",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/global.c||src/global.c",
          "src/main.c||src/main.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 724f4df9ccc2b683f7091a3f7a8c20ee210f44d7a610cd1b4c49da1c274add08",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "850:      || sqlite3_stricmp(zName, db->init.azInit[1])",
          "851:      || sqlite3_stricmp(zTblName, db->init.azInit[2])",
          "852:     ){",
          "855:     }",
          "856:   }else{",
          "857:     if( pParse->nested==0",
          "",
          "[Removed Lines]",
          "854:       return SQLITE_ERROR;",
          "",
          "[Added Lines]",
          "853:       if( sqlite3Config.bExtraSchemaChecks ){",
          "855:         return SQLITE_ERROR;",
          "856:       }",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4063:       break;",
          "4064:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4072:     case SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS: {",
          "4073:       sqlite3GlobalConfig.bExtraSchemaChecks = va_arg(ap, int);",
          "4074:       break;",
          "4075:     }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9167:       { \"byteorder\",          SQLITE_TESTCTRL_BYTEORDER,     \"\"                   },",
          "9169:       { \"imposter\",           SQLITE_TESTCTRL_IMPOSTER,   \"SCHEMA ON/OFF ROOTPAGE\"},",
          "9170:       { \"internal_functions\", SQLITE_TESTCTRL_INTERNAL_FUNCTIONS, \"BOOLEAN\"       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9168:       { \"extra_schema_checks\",SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS,\"BOOLEAN\"       },",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7359: #define SQLITE_TESTCTRL_PARSER_COVERAGE         26",
          "7360: #define SQLITE_TESTCTRL_RESULT_INTREAL          27",
          "7361: #define SQLITE_TESTCTRL_PRNG_SEED               28",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7362: #define SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS     29",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "0c873bf28a3cbc724c9ccea6c82e492d0275967e",
      "candidate_info": {
        "commit_hash": "0c873bf28a3cbc724c9ccea6c82e492d0275967e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0c873bf28a3cbc724c9ccea6c82e492d0275967e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btreeInt.h"
        ],
        "message": "Change the definition of the BtCursor.skipNext field so that it is undefined for states CURSOR_VALID and CURSOR_INVALID.\n\nFossilOrigin-Name: 6089d5dba73437d787259033e94a38cf1b0c87cac4a89c27e69d8239c22f496e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btreeInt.h||src/btreeInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 42687d45aa1a2b2a32ddfc5711b4ae9cf76b8cfbeb20b57d6705ecaf5824fcb6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "845:     sqlite3_free(pCur->pKey);",
          "846:     pCur->pKey = 0;",
          "847:     assert( pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_INVALID );",
          "849:     if( pCur->skipNext && pCur->eState==CURSOR_VALID ){",
          "850:       pCur->eState = CURSOR_SKIPNEXT;",
          "851:     }",
          "",
          "[Removed Lines]",
          "848:     pCur->skipNext |= skipNext;",
          "",
          "[Added Lines]",
          "848:     if( skipNext ) pCur->skipNext = skipNext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "915:   if( pCur->eState!=CURSOR_VALID ){",
          "917:   }else{",
          "920:   }",
          "921:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "918:     assert( pCur->skipNext==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5339:         rc = sqlite3BtreeNext(pCur, 0);",
          "5340:         if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "5337:       if( pCur->info.nKey+1==intKey && !pCur->skipNext ){",
          "",
          "[Added Lines]",
          "5336:       if( pCur->info.nKey+1==intKey ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5608:   MemPage *pPage;",
          "5610:   assert( cursorOwnsBtShared(pCur) );",
          "5612:   if( pCur->eState!=CURSOR_VALID ){",
          "5613:     assert( (pCur->curFlags & BTCF_ValidOvfl)==0 );",
          "5614:     rc = restoreCursorPosition(pCur);",
          "",
          "[Removed Lines]",
          "5611:   assert( pCur->skipNext==0 || pCur->eState!=CURSOR_VALID );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5618:     if( CURSOR_INVALID==pCur->eState ){",
          "5619:       return SQLITE_DONE;",
          "5620:     }",
          "5623:       pCur->eState = CURSOR_VALID;",
          "5629:     }",
          "5630:   }",
          "",
          "[Removed Lines]",
          "5621:     if( pCur->skipNext ){",
          "5622:       assert( pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_SKIPNEXT );",
          "5624:       if( pCur->skipNext>0 ){",
          "5625:         pCur->skipNext = 0;",
          "5626:         return SQLITE_OK;",
          "5627:       }",
          "5628:       pCur->skipNext = 0;",
          "",
          "[Added Lines]",
          "5619:     if( pCur->eState==CURSOR_SKIPNEXT ){",
          "5621:       if( pCur->skipNext>0 ) return SQLITE_OK;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5681:   assert( cursorOwnsBtShared(pCur) );",
          "5682:   assert( flags==0 || flags==1 );",
          "5684:   pCur->info.nSize = 0;",
          "5685:   pCur->curFlags &= ~(BTCF_ValidNKey|BTCF_ValidOvfl);",
          "5686:   if( pCur->eState!=CURSOR_VALID ) return btreeNext(pCur);",
          "",
          "[Removed Lines]",
          "5683:   assert( pCur->skipNext==0 || pCur->eState!=CURSOR_VALID );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5721:   MemPage *pPage;",
          "5723:   assert( cursorOwnsBtShared(pCur) );",
          "5725:   assert( (pCur->curFlags & (BTCF_AtLast|BTCF_ValidOvfl|BTCF_ValidNKey))==0 );",
          "5726:   assert( pCur->info.nSize==0 );",
          "5727:   if( pCur->eState!=CURSOR_VALID ){",
          "",
          "[Removed Lines]",
          "5724:   assert( pCur->skipNext==0 || pCur->eState!=CURSOR_VALID );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5732:     if( CURSOR_INVALID==pCur->eState ){",
          "5733:       return SQLITE_DONE;",
          "5734:     }",
          "5737:       pCur->eState = CURSOR_VALID;",
          "5743:     }",
          "5744:   }",
          "",
          "[Removed Lines]",
          "5735:     if( pCur->skipNext ){",
          "5736:       assert( pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_SKIPNEXT );",
          "5738:       if( pCur->skipNext<0 ){",
          "5739:         pCur->skipNext = 0;",
          "5740:         return SQLITE_OK;",
          "5741:       }",
          "5742:       pCur->skipNext = 0;",
          "",
          "[Added Lines]",
          "5726:     if( CURSOR_SKIPNEXT==pCur->eState ){",
          "5728:       if( pCur->skipNext<0 ) return SQLITE_OK;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5774: int sqlite3BtreePrevious(BtCursor *pCur, int flags){",
          "5775:   assert( cursorOwnsBtShared(pCur) );",
          "5776:   assert( flags==0 || flags==1 );",
          "5779:   pCur->curFlags &= ~(BTCF_AtLast|BTCF_ValidOvfl|BTCF_ValidNKey);",
          "5780:   pCur->info.nSize = 0;",
          "",
          "[Removed Lines]",
          "5777:   assert( pCur->skipNext==0 || pCur->eState!=CURSOR_VALID );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "8772:   if( !pPage->leaf ){",
          "8774:     rc = sqlite3BtreePrevious(pCur, 0);",
          "8775:     assert( rc!=SQLITE_DONE );",
          "8776:     if( rc ) return rc;",
          "",
          "[Removed Lines]",
          "8773:     pCur->skipNext = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h"
        ]
      }
    },
    {
      "candidate_hash": "4bdd26dfab8408645b1e32e657355e332b098350",
      "candidate_info": {
        "commit_hash": "4bdd26dfab8408645b1e32e657355e332b098350",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4bdd26dfab8408645b1e32e657355e332b098350",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Remove a testcase() macro which is now unreachable due to the contraction of the use of IN_INDEX_ROWID.\n\nFossilOrigin-Name: 90c5a17cd526b256753f876e575f3e731d5e8b9dd6e196cf8d8f7306e099b91c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c2d50df8fd1a1fdae6226a3e77296ded09b53a74540caedd4868e686a93cbc10",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c"
        ]
      }
    },
    {
      "candidate_hash": "6b86e51eea956e5b3532f4042d8a314556746bef",
      "candidate_info": {
        "commit_hash": "6b86e51eea956e5b3532f4042d8a314556746bef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6b86e51eea956e5b3532f4042d8a314556746bef",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "src/sqliteInt.h",
          "src/vdbe.c"
        ],
        "message": "If the OP_ParseSchema opcode with a non-NULL P4 operand does not parse any rows out of the sqlite_master table, that indicates that the sqlite_master table is corrupt, so raise an SQLITE_CORRUPT error.\n\nFossilOrigin-Name: 598d7358e7329f0de6e3defc217665909e46874258ac29592ee2fd53e6411cda",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 444c7c99beb9f8b82963e9784aa2be54124c7011f4771122b4f608c02aa26408",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   UNUSED_PARAMETER2(NotUsed, argc);",
          "66:   assert( sqlite3_mutex_held(db->mutex) );",
          "67:   DbClearProperty(db, iDb, DB_Empty);",
          "68:   if( db->mallocFailed ){",
          "69:     corruptSchema(pData, argv[0], 0);",
          "70:     return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:   pData->nInitRow++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:   initData.rc = SQLITE_OK;",
          "177:   initData.pzErrMsg = pzErrMsg;",
          "178:   initData.mInitFlags = mFlags;",
          "179:   sqlite3InitCallback(&initData, 3, (char **)azArg, 0);",
          "180:   if( initData.rc ){",
          "181:     rc = initData.rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:   initData.nInitRow = 0;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5799:       assert( db->init.busy==0 );",
          "5800:       db->init.busy = 1;",
          "5801:       initData.rc = SQLITE_OK;",
          "5802:       assert( !db->mallocFailed );",
          "5803:       rc = sqlite3_exec(db, zSql, sqlite3InitCallback, &initData, 0);",
          "5804:       if( rc==SQLITE_OK ) rc = initData.rc;",
          "5805:       sqlite3DbFreeNN(db, zSql);",
          "5806:       db->init.busy = 0;",
          "5807:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5802:       initData.nInitRow = 0;",
          "5806:       if( rc==SQLITE_OK && initData.nInitRow==0 ){",
          "5810:         rc = SQLITE_CORRUPT_BKPT;",
          "5811:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}