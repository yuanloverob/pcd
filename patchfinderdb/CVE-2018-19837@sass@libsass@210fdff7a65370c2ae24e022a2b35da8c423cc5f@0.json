{
  "cve_id": "CVE-2018-19837",
  "cve_desc": "In LibSass prior to 3.5.5, Sass::Eval::operator()(Sass::Binary_Expression*) inside eval.cpp allows attackers to cause a denial-of-service resulting from stack consumption via a crafted sass file, because of certain incorrect parsing of '%' as a modulo operator in parser.cpp.",
  "repo": "sass/libsass",
  "patch_hash": "210fdff7a65370c2ae24e022a2b35da8c423cc5f",
  "patch_info": {
    "commit_hash": "210fdff7a65370c2ae24e022a2b35da8c423cc5f",
    "repo": "sass/libsass",
    "commit_url": "https://github.com/sass/libsass/commit/210fdff7a65370c2ae24e022a2b35da8c423cc5f",
    "files": [
      "src/parser.cpp"
    ],
    "message": "Remove legacy workaround for parsing modulo operator\n\nFixes #2659",
    "before_after_code_files": [
      "src/parser.cpp||src/parser.cpp"
    ]
  },
  "patch_diff": {
    "src/parser.cpp||src/parser.cpp": [
      "File: src/parser.cpp -> src/parser.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1723:     if (lex< variable >())",
      "1724:     { return SASS_MEMORY_NEW(Variable, pstate, Util::normalize_underscores(lexed)); }",
      "1730:     css_error(\"Invalid CSS\", \" after \", \": expected expression (e.g. 1px, bold), was \");",
      "",
      "[Removed Lines]",
      "1727:     if (lex< sequence< exactly<'%'>, optional< percentage > > >())",
      "1728:     { return SASS_MEMORY_NEW(String_Constant, pstate, lexed); }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "df8152d11dca573798fa5a660838fb8fbfc9d00b",
      "candidate_info": {
        "commit_hash": "df8152d11dca573798fa5a660838fb8fbfc9d00b",
        "repo": "sass/libsass",
        "commit_url": "https://github.com/sass/libsass/commit/df8152d11dca573798fa5a660838fb8fbfc9d00b",
        "files": [
          "src/parser.cpp"
        ],
        "message": "Remove legacy workaround for parsing modulo operator\n\nFixes #2659",
        "before_after_code_files": [
          "src/parser.cpp||src/parser.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/parser.cpp||src/parser.cpp"
          ],
          "candidate": [
            "src/parser.cpp||src/parser.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/parser.cpp||src/parser.cpp": [
          "File: src/parser.cpp -> src/parser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1723:     if (lex< variable >())",
          "1724:     { return SASS_MEMORY_NEW(Variable, pstate, Util::normalize_underscores(lexed)); }",
          "1730:     css_error(\"Invalid CSS\", \" after \", \": expected expression (e.g. 1px, bold), was \");",
          "",
          "[Removed Lines]",
          "1727:     if (lex< sequence< exactly<'%'>, optional< percentage > > >())",
          "1728:     { return SASS_MEMORY_NEW(String_Constant, pstate, lexed); }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}