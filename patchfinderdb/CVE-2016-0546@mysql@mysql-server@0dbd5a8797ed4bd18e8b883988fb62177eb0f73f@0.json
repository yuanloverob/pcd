{
  "cve_id": "CVE-2016-0546",
  "cve_desc": "Unspecified vulnerability in Oracle MySQL 5.5.46 and earlier, 5.6.27 and earlier, and 5.7.9 and MariaDB before 5.5.47, 10.0.x before 10.0.23, and 10.1.x before 10.1.10 allows local users to affect confidentiality, integrity, and availability via unknown vectors related to Client.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that these are multiple buffer overflows in the mysqlshow tool that allow remote database servers to have unspecified impact via a long table or database name.",
  "repo": "mysql/mysql-server",
  "patch_hash": "0dbd5a8797ed4bd18e8b883988fb62177eb0f73f",
  "patch_info": {
    "commit_hash": "0dbd5a8797ed4bd18e8b883988fb62177eb0f73f",
    "repo": "mysql/mysql-server",
    "commit_url": "https://github.com/mysql/mysql-server/commit/0dbd5a8797ed4bd18e8b883988fb62177eb0f73f",
    "files": [
      "client/mysql_plugin.c",
      "client/mysqlshow.c",
      "libmysql/conf_to_src.c",
      "regex/main.c"
    ],
    "message": "Bug#21973610: BUFFER OVERFLOW ISSUES\n\nDescription : Incorrect usage of sprintf/strcpy caused\n              possible buffer overflow issues at various\n              places.\n\nSolution : - Fixed mysql_plugin and mysqlshow\n           - Fixed regex library issues\n\nReviewed-By : Georgi Kodinov <georgi.kodinov@oracle.com>\nReviewed-By : Venkata S Murthy Sidagam <venkata.sidagam@oracle.com>",
    "before_after_code_files": [
      "client/mysql_plugin.c||client/mysql_plugin.c",
      "client/mysqlshow.c||client/mysqlshow.c",
      "libmysql/conf_to_src.c||libmysql/conf_to_src.c",
      "regex/main.c||regex/main.c"
    ]
  },
  "patch_diff": {
    "client/mysql_plugin.c||client/mysql_plugin.c": [
      "File: client/mysql_plugin.c -> client/mysql_plugin.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:    This program is free software; you can redistribute it and/or modify",
      "5:    it under the terms of the GNU General Public License as published by",
      "",
      "[Removed Lines]",
      "2:    Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.",
      "",
      "[Added Lines]",
      "2:    Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "406: static void usage(void)",
      "407: {",
      "408:   PRINT_VERSION;",
      "410:        \"All rights reserved.\\n\");",
      "411:   puts(\"Enable or disable plugins.\");",
      "412:   printf(\"\\nUsage: %s [options] <plugin> ENABLE|DISABLE\\n\\nOptions:\\n\",",
      "",
      "[Removed Lines]",
      "409:   puts(\"Copyright (c) 2011, Oracle and/or its affiliates. \"",
      "",
      "[Added Lines]",
      "409:   puts(\"Copyright (c) 2011, 2015, Oracle and/or its affiliates. \"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "758:     else",
      "759:     {",
      "760:       strcpy(plugin_name, argv[i]);",
      "761:       strcpy(config_file, argv[i]);",
      "762:       strcat(config_file, \".ini\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "760:       if (strlen(argv[i]) + 4 + 1 > FN_REFLEN)",
      "761:       {",
      "762:         fprintf(stderr, \"ERROR: argument is too long.\\n\");",
      "763:         return 1;",
      "764:       }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "848:     if (opt_basedir[i-1] != FN_LIBCHAR || opt_basedir[i-1] != FN_LIBCHAR2)",
      "849:     {",
      "850:       char buff[FN_REFLEN];",
      "852:       strncpy(buff, opt_basedir, sizeof(buff) - 1);",
      "853: #ifdef __WIN__",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "856:       memset(buff, 0, sizeof(buff));",
      "",
      "---------------"
    ],
    "client/mysqlshow.c||client/mysqlshow.c": [
      "File: client/mysqlshow.c -> client/mysqlshow.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "377:   uint length, counter = 0;",
      "378:   ulong rowcount = 0L;",
      "379:   char tables[NAME_LEN+1], rows[NAME_LEN+1];",
      "381:   MYSQL_FIELD *field;",
      "382:   MYSQL_RES *result;",
      "383:   MYSQL_ROW row= NULL, rrow;",
      "",
      "[Removed Lines]",
      "380:   char query[255];",
      "",
      "[Added Lines]",
      "380:   char query[NAME_LEN + 100];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "444:             MYSQL_ROW trow;",
      "445:      while ((trow = mysql_fetch_row(tresult)))",
      "446:      {",
      "448:        if (!(mysql_query(mysql,query)))",
      "449:        {",
      "450:   MYSQL_RES *rresult;",
      "",
      "[Removed Lines]",
      "447:        sprintf(query,\"SELECT COUNT(*) FROM `%s`\",trow[0]);",
      "",
      "[Added Lines]",
      "447:               my_snprintf(query, sizeof(query),",
      "448:                           \"SELECT COUNT(*) FROM `%s`\", trow[0]);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "500: {",
      "501:   const char *header;",
      "502:   uint head_length, counter = 0;",
      "504:   MYSQL_FIELD *field;",
      "505:   MYSQL_RES *result;",
      "506:   MYSQL_ROW row, rrow;",
      "",
      "[Removed Lines]",
      "503:   char query[255], rows[NAME_LEN], fields[16];",
      "",
      "[Added Lines]",
      "504:   char query[NAME_LEN + 100], rows[NAME_LEN], fields[16];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "585:    if (opt_verbose > 1)",
      "586:    {",
      "589:      if (!(mysql_query(mysql,query)))",
      "590:      {",
      "591:        if ((rresult = mysql_store_result(mysql)))",
      "",
      "[Removed Lines]",
      "588:      sprintf(query,\"SELECT COUNT(*) FROM `%s`\",row[0]);",
      "",
      "[Added Lines]",
      "589:             my_snprintf(query, sizeof(query), \"SELECT COUNT(*) FROM `%s`\",",
      "590:                         row[0]);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "645: static int",
      "646: list_table_status(MYSQL *mysql,const char *db,const char *wild)",
      "647: {",
      "649:   MYSQL_RES *result;",
      "650:   MYSQL_ROW row;",
      "655:   if (mysql_query(mysql,query) || !(result=mysql_store_result(mysql)))",
      "656:   {",
      "657:     fprintf(stderr,\"%s: Cannot get status for db: %s, table: %s: %s\\n\",",
      "",
      "[Removed Lines]",
      "648:   char query[1024],*end;",
      "652:   end=strxmov(query,\"show table status from `\",db,\"`\",NullS);",
      "653:   if (wild && wild[0])",
      "654:     strxmov(end,\" like '\",wild,\"'\",NullS);",
      "",
      "[Added Lines]",
      "650:   char query[NAME_LEN + 100];",
      "651:   int len;",
      "655:   len= sizeof(query);",
      "656:   len-= my_snprintf(query, len, \"show table status from `%s`\", db);",
      "657:   if (wild && wild[0] && len)",
      "658:     strxnmov(query + strlen(query), len, \" like '\", wild, \"'\", NullS);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "683: list_fields(MYSQL *mysql,const char *db,const char *table,",
      "684:      const char *wild)",
      "685: {",
      "687:   MYSQL_RES *result;",
      "688:   MYSQL_ROW row;",
      "689:   ulong UNINIT_VAR(rows);",
      "",
      "[Removed Lines]",
      "686:   char query[1024],*end;",
      "",
      "[Added Lines]",
      "690:   char query[NAME_LEN + 100];",
      "691:   int len;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "698:   if (opt_count)",
      "699:   {",
      "701:     if (mysql_query(mysql,query) || !(result=mysql_store_result(mysql)))",
      "702:     {",
      "703:       fprintf(stderr,\"%s: Cannot get record count for db: %s, table: %s: %s\\n\",",
      "",
      "[Removed Lines]",
      "700:     sprintf(query,\"select count(*) from `%s`\", table);",
      "",
      "[Added Lines]",
      "705:     my_snprintf(query, sizeof(query), \"select count(*) from `%s`\", table);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "709:     mysql_free_result(result);",
      "710:   }",
      "715:   if (mysql_query(mysql,query) || !(result=mysql_store_result(mysql)))",
      "716:   {",
      "717:     fprintf(stderr,\"%s: Cannot list columns in db: %s, table: %s: %s\\n\",",
      "",
      "[Removed Lines]",
      "712:   end=strmov(strmov(strmov(query,\"show /*!32332 FULL */ columns from `\"),table),\"`\");",
      "713:   if (wild && wild[0])",
      "714:     strxmov(end,\" like '\",wild,\"'\",NullS);",
      "",
      "[Added Lines]",
      "717:   len= sizeof(query);",
      "718:   len-= my_snprintf(query, len, \"show /*!32332 FULL */ columns from `%s`\",",
      "719:                     table);",
      "720:   if (wild && wild[0] && len)",
      "721:     strxnmov(query + strlen(query), len, \" like '\", wild, \"'\", NullS);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "732:   print_res_top(result);",
      "733:   if (opt_show_keys)",
      "734:   {",
      "736:     if (mysql_query(mysql,query) || !(result=mysql_store_result(mysql)))",
      "737:     {",
      "738:       fprintf(stderr,\"%s: Cannot list keys in db: %s, table: %s: %s\\n\",",
      "",
      "[Removed Lines]",
      "735:     end=strmov(strmov(strmov(query,\"show keys from `\"),table),\"`\");",
      "",
      "[Added Lines]",
      "742:     my_snprintf(query, sizeof(query), \"show keys from `%s`\", table);",
      "",
      "---------------"
    ],
    "libmysql/conf_to_src.c||libmysql/conf_to_src.c": [
      "File: libmysql/conf_to_src.c -> libmysql/conf_to_src.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "118: {",
      "119:   FILE *f;",
      "123:   if ((f = fopen(buf, \"r\")) == NULL) {",
      "124:     fprintf(stderr, \"%s: can't read conf file for charset %s\\n\", prog, set);",
      "",
      "[Removed Lines]",
      "121:   sprintf(buf, \"%s.conf\", set);",
      "",
      "[Added Lines]",
      "121:   snprintf(buf, sizeof(buf), \"%s.conf\", set);",
      "",
      "---------------"
    ],
    "regex/main.c||regex/main.c": [
      "File: regex/main.c -> regex/main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "425:     (sub.rm_so != -1 && sub.rm_eo == -1) ||",
      "426:     (sub.rm_so != -1 && sub.rm_so < 0) ||",
      "427:     (sub.rm_eo != -1 && sub.rm_eo < 0) ) {",
      "429:        (long)sub.rm_eo);",
      "430:   return(grump);",
      "431:  }",
      "",
      "[Removed Lines]",
      "428:   sprintf(grump, \"start %ld end %ld\", (long)sub.rm_so,",
      "",
      "[Added Lines]",
      "428:   snprintf(grump, sizeof(grump),",
      "429:     \"start %ld end %ld\", (long)sub.rm_so,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "440:  if ((int) sub.rm_eo > (int) strlen(str)) {",
      "442:      (long)sub.rm_so, (long)sub.rm_eo);",
      "443:   return(grump);",
      "444:  }",
      "",
      "[Removed Lines]",
      "441:   sprintf(grump, \"start %ld end %ld, past end of string\",",
      "",
      "[Added Lines]",
      "442:   snprintf(grump, sizeof(grump),",
      "443:     \"start %ld end %ld, past end of string\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "451:  if (should == NULL) {",
      "453:   return(grump);",
      "454:  }",
      "457:  if (len != shlen || strncmp(p, should, (size_t)shlen) != 0) {",
      "459:   return(grump);",
      "460:  }",
      "461:  if (shlen > 0)",
      "",
      "[Removed Lines]",
      "452:   sprintf(grump, \"matched `%.*s'\", len, p);",
      "458:   sprintf(grump, \"matched `%.*s' instead\", len, p);",
      "",
      "[Added Lines]",
      "454:   snprintf(grump, sizeof(grump),",
      "455:     \"matched `%.*s'\", len, p);",
      "461:   snprintf(grump, sizeof(grump),",
      "462:     \"matched `%.*s' instead\", len, p);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "468:  if (shlen == 0)",
      "470:  if (strncmp(p, at, shlen) != 0) {",
      "472:   return(grump);",
      "473:  }",
      "474:  return(NULL);",
      "",
      "[Removed Lines]",
      "471:   sprintf(grump, \"matched null at `%.20s'\", p);",
      "",
      "[Added Lines]",
      "475:   snprintf(grump, sizeof(grump),",
      "476:     \"matched null at `%.20s'\", p);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "501:  static char efbuf[100];",
      "502:  my_regex_t re;",
      "505:  assert(strlen(efbuf) < sizeof(efbuf));",
      "506:  re.re_endp = efbuf;",
      "507:  (void) my_regerror(REG_ATOI, &re, efbuf, sizeof(efbuf));",
      "",
      "[Removed Lines]",
      "504:  sprintf(efbuf, \"REG_%s\", name);",
      "",
      "[Added Lines]",
      "509:  snprintf(efbuf, sizeof(efbuf), \"REG_%s\", name);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "40ae1b9b618fbbc3b494a896a9d074b74e414337",
      "candidate_info": {
        "commit_hash": "40ae1b9b618fbbc3b494a896a9d074b74e414337",
        "repo": "mysql/mysql-server",
        "commit_url": "https://github.com/mysql/mysql-server/commit/40ae1b9b618fbbc3b494a896a9d074b74e414337",
        "files": [
          "mysql-test/r/mysql_plugin.result"
        ],
        "message": "Bug#21973610: BUFFER OVERFLOW ISSUES\n\npost push fix : Fixing test failures",
        "before_after_code_files": [
          "mysql-test/r/mysql_plugin.result||mysql-test/r/mysql_plugin.result"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mysql-test/r/mysql_plugin.result||mysql-test/r/mysql_plugin.result": [
          "File: mysql-test/r/mysql_plugin.result -> mysql-test/r/mysql_plugin.result",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: # Show the help.",
          "103: #",
          "104: mysql_plugin  Ver V.V.VV Distrib XX.XX.XX",
          "107: Enable or disable plugins.",
          "",
          "[Removed Lines]",
          "105: Copyright (c) 2011, Oracle and/or its affiliates. All rights reserved.",
          "",
          "[Added Lines]",
          "105: Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6768f80c0b1f0b82c5addbe47ce712ded14d0d8c",
      "candidate_info": {
        "commit_hash": "6768f80c0b1f0b82c5addbe47ce712ded14d0d8c",
        "repo": "mysql/mysql-server",
        "commit_url": "https://github.com/mysql/mysql-server/commit/6768f80c0b1f0b82c5addbe47ce712ded14d0d8c",
        "files": [
          "client/mysqlshow.c"
        ],
        "message": "Bug#21973610\n\nPost push fix : Fixing i_main.mysqlshow failure.",
        "before_after_code_files": [
          "client/mysqlshow.c||client/mysqlshow.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "client/mysqlshow.c||client/mysqlshow.c"
          ],
          "candidate": [
            "client/mysqlshow.c||client/mysqlshow.c"
          ]
        }
      },
      "candidate_diff": {
        "client/mysqlshow.c||client/mysqlshow.c": [
          "File: client/mysqlshow.c -> client/mysqlshow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "655:   len= sizeof(query);",
          "656:   len-= my_snprintf(query, len, \"show table status from `%s`\", db);",
          "657:   if (wild && wild[0] && len)",
          "659:   if (mysql_query(mysql,query) || !(result=mysql_store_result(mysql)))",
          "660:   {",
          "661:     fprintf(stderr,\"%s: Cannot get status for db: %s, table: %s: %s\\n\",",
          "",
          "[Removed Lines]",
          "658:     strxnmov(query + strlen(query), len, \" like '\", wild, \"'\", NullS);",
          "",
          "[Added Lines]",
          "658:     strxnmov(query + strlen(query), len - 1, \" like '\", wild, \"'\", NullS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "688:      const char *wild)",
          "689: {",
          "690:   char query[NAME_LEN + 100];",
          "692:   MYSQL_RES *result;",
          "693:   MYSQL_ROW row;",
          "694:   ulong UNINIT_VAR(rows);",
          "",
          "[Removed Lines]",
          "691:   int len;",
          "",
          "[Added Lines]",
          "691:   size_t len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "718:   len-= my_snprintf(query, len, \"show /*!32332 FULL */ columns from `%s`\",",
          "719:                     table);",
          "720:   if (wild && wild[0] && len)",
          "722:   if (mysql_query(mysql,query) || !(result=mysql_store_result(mysql)))",
          "723:   {",
          "724:     fprintf(stderr,\"%s: Cannot list columns in db: %s, table: %s: %s\\n\",",
          "",
          "[Removed Lines]",
          "721:     strxnmov(query + strlen(query), len, \" like '\", wild, \"'\", NullS);",
          "",
          "[Added Lines]",
          "721:     strxnmov(query + strlen(query), len - 1, \" like '\", wild, \"'\", NullS);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51babb9eb7094ce61e2a8d19a57167f197f9485d",
      "candidate_info": {
        "commit_hash": "51babb9eb7094ce61e2a8d19a57167f197f9485d",
        "repo": "mysql/mysql-server",
        "commit_url": "https://github.com/mysql/mysql-server/commit/51babb9eb7094ce61e2a8d19a57167f197f9485d",
        "files": [
          "client/mysql_plugin.c",
          "client/mysqlshow.c",
          "libmysql/conf_to_src.c",
          "regex/main.c"
        ],
        "message": "Bug#21973610: BUFFER OVERFLOW ISSUES\n\nDescription : Incorrect usage of sprintf/strcpy caused\n              possible buffer overflow issues at various\n              places.\n\nSolution : - Fixed mysql_plugin and mysqlshow\n           - Fixed regex library issues\n\nReviewed-By : Georgi Kodinov <georgi.kodinov@oracle.com>\nReviewed-By : Venkata S Murthy Sidagam <venkata.sidagam@oracle.com>",
        "before_after_code_files": [
          "client/mysql_plugin.c||client/mysql_plugin.c",
          "client/mysqlshow.c||client/mysqlshow.c",
          "libmysql/conf_to_src.c||libmysql/conf_to_src.c",
          "regex/main.c||regex/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "client/mysql_plugin.c||client/mysql_plugin.c",
            "client/mysqlshow.c||client/mysqlshow.c",
            "libmysql/conf_to_src.c||libmysql/conf_to_src.c",
            "regex/main.c||regex/main.c"
          ],
          "candidate": [
            "client/mysql_plugin.c||client/mysql_plugin.c",
            "client/mysqlshow.c||client/mysqlshow.c",
            "libmysql/conf_to_src.c||libmysql/conf_to_src.c",
            "regex/main.c||regex/main.c"
          ]
        }
      },
      "candidate_diff": {
        "client/mysql_plugin.c||client/mysql_plugin.c": [
          "File: client/mysql_plugin.c -> client/mysql_plugin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    This program is free software; you can redistribute it and/or modify",
          "5:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "2:    Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.",
          "",
          "[Added Lines]",
          "2:    Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "406: static void usage(void)",
          "407: {",
          "408:   PRINT_VERSION;",
          "410:        \"All rights reserved.\\n\");",
          "411:   puts(\"Enable or disable plugins.\");",
          "412:   printf(\"\\nUsage: %s [options] <plugin> ENABLE|DISABLE\\n\\nOptions:\\n\",",
          "",
          "[Removed Lines]",
          "409:   puts(\"Copyright (c) 2011, Oracle and/or its affiliates. \"",
          "",
          "[Added Lines]",
          "409:   puts(\"Copyright (c) 2011, 2015, Oracle and/or its affiliates. \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "758:     else",
          "759:     {",
          "760:       strcpy(plugin_name, argv[i]);",
          "761:       strcpy(config_file, argv[i]);",
          "762:       strcat(config_file, \".ini\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760:       if (strlen(argv[i]) + 4 + 1 > FN_REFLEN)",
          "761:       {",
          "762:         fprintf(stderr, \"ERROR: argument is too long.\\n\");",
          "763:         return 1;",
          "764:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "848:     if (opt_basedir[i-1] != FN_LIBCHAR || opt_basedir[i-1] != FN_LIBCHAR2)",
          "849:     {",
          "850:       char buff[FN_REFLEN];",
          "852:       strncpy(buff, opt_basedir, sizeof(buff) - 1);",
          "853: #ifdef __WIN__",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "856:       memset(buff, 0, sizeof(buff));",
          "",
          "---------------"
        ],
        "client/mysqlshow.c||client/mysqlshow.c": [
          "File: client/mysqlshow.c -> client/mysqlshow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "377:   uint length, counter = 0;",
          "378:   ulong rowcount = 0L;",
          "379:   char tables[NAME_LEN+1], rows[NAME_LEN+1];",
          "381:   MYSQL_FIELD *field;",
          "382:   MYSQL_RES *result;",
          "383:   MYSQL_ROW row= NULL, rrow;",
          "",
          "[Removed Lines]",
          "380:   char query[255];",
          "",
          "[Added Lines]",
          "380:   char query[NAME_LEN + 100];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444:             MYSQL_ROW trow;",
          "445:      while ((trow = mysql_fetch_row(tresult)))",
          "446:      {",
          "448:        if (!(mysql_query(mysql,query)))",
          "449:        {",
          "450:   MYSQL_RES *rresult;",
          "",
          "[Removed Lines]",
          "447:        sprintf(query,\"SELECT COUNT(*) FROM `%s`\",trow[0]);",
          "",
          "[Added Lines]",
          "447:               my_snprintf(query, sizeof(query),",
          "448:                           \"SELECT COUNT(*) FROM `%s`\", trow[0]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "500: {",
          "501:   const char *header;",
          "502:   uint head_length, counter = 0;",
          "504:   MYSQL_FIELD *field;",
          "505:   MYSQL_RES *result;",
          "506:   MYSQL_ROW row, rrow;",
          "",
          "[Removed Lines]",
          "503:   char query[255], rows[NAME_LEN], fields[16];",
          "",
          "[Added Lines]",
          "504:   char query[NAME_LEN + 100], rows[NAME_LEN], fields[16];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "585:    if (opt_verbose > 1)",
          "586:    {",
          "589:      if (!(mysql_query(mysql,query)))",
          "590:      {",
          "591:        if ((rresult = mysql_store_result(mysql)))",
          "",
          "[Removed Lines]",
          "588:      sprintf(query,\"SELECT COUNT(*) FROM `%s`\",row[0]);",
          "",
          "[Added Lines]",
          "589:             my_snprintf(query, sizeof(query), \"SELECT COUNT(*) FROM `%s`\",",
          "590:                         row[0]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "645: static int",
          "646: list_table_status(MYSQL *mysql,const char *db,const char *wild)",
          "647: {",
          "649:   MYSQL_RES *result;",
          "650:   MYSQL_ROW row;",
          "655:   if (mysql_query(mysql,query) || !(result=mysql_store_result(mysql)))",
          "656:   {",
          "657:     fprintf(stderr,\"%s: Cannot get status for db: %s, table: %s: %s\\n\",",
          "",
          "[Removed Lines]",
          "648:   char query[1024],*end;",
          "652:   end=strxmov(query,\"show table status from `\",db,\"`\",NullS);",
          "653:   if (wild && wild[0])",
          "654:     strxmov(end,\" like '\",wild,\"'\",NullS);",
          "",
          "[Added Lines]",
          "650:   char query[NAME_LEN + 100];",
          "651:   int len;",
          "655:   len= sizeof(query);",
          "656:   len-= my_snprintf(query, len, \"show table status from `%s`\", db);",
          "657:   if (wild && wild[0] && len)",
          "658:     strxnmov(query + strlen(query), len, \" like '\", wild, \"'\", NullS);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "683: list_fields(MYSQL *mysql,const char *db,const char *table,",
          "684:      const char *wild)",
          "685: {",
          "687:   MYSQL_RES *result;",
          "688:   MYSQL_ROW row;",
          "689:   ulong UNINIT_VAR(rows);",
          "",
          "[Removed Lines]",
          "686:   char query[1024],*end;",
          "",
          "[Added Lines]",
          "690:   char query[NAME_LEN + 100];",
          "691:   int len;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "698:   if (opt_count)",
          "699:   {",
          "701:     if (mysql_query(mysql,query) || !(result=mysql_store_result(mysql)))",
          "702:     {",
          "703:       fprintf(stderr,\"%s: Cannot get record count for db: %s, table: %s: %s\\n\",",
          "",
          "[Removed Lines]",
          "700:     sprintf(query,\"select count(*) from `%s`\", table);",
          "",
          "[Added Lines]",
          "705:     my_snprintf(query, sizeof(query), \"select count(*) from `%s`\", table);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "709:     mysql_free_result(result);",
          "710:   }",
          "715:   if (mysql_query(mysql,query) || !(result=mysql_store_result(mysql)))",
          "716:   {",
          "717:     fprintf(stderr,\"%s: Cannot list columns in db: %s, table: %s: %s\\n\",",
          "",
          "[Removed Lines]",
          "712:   end=strmov(strmov(strmov(query,\"show /*!32332 FULL */ columns from `\"),table),\"`\");",
          "713:   if (wild && wild[0])",
          "714:     strxmov(end,\" like '\",wild,\"'\",NullS);",
          "",
          "[Added Lines]",
          "717:   len= sizeof(query);",
          "718:   len-= my_snprintf(query, len, \"show /*!32332 FULL */ columns from `%s`\",",
          "719:                     table);",
          "720:   if (wild && wild[0] && len)",
          "721:     strxnmov(query + strlen(query), len, \" like '\", wild, \"'\", NullS);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "732:   print_res_top(result);",
          "733:   if (opt_show_keys)",
          "734:   {",
          "736:     if (mysql_query(mysql,query) || !(result=mysql_store_result(mysql)))",
          "737:     {",
          "738:       fprintf(stderr,\"%s: Cannot list keys in db: %s, table: %s: %s\\n\",",
          "",
          "[Removed Lines]",
          "735:     end=strmov(strmov(strmov(query,\"show keys from `\"),table),\"`\");",
          "",
          "[Added Lines]",
          "742:     my_snprintf(query, sizeof(query), \"show keys from `%s`\", table);",
          "",
          "---------------"
        ],
        "libmysql/conf_to_src.c||libmysql/conf_to_src.c": [
          "File: libmysql/conf_to_src.c -> libmysql/conf_to_src.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: {",
          "119:   FILE *f;",
          "123:   if ((f = fopen(buf, \"r\")) == NULL) {",
          "124:     fprintf(stderr, \"%s: can't read conf file for charset %s\\n\", prog, set);",
          "",
          "[Removed Lines]",
          "121:   sprintf(buf, \"%s.conf\", set);",
          "",
          "[Added Lines]",
          "121:   snprintf(buf, sizeof(buf), \"%s.conf\", set);",
          "",
          "---------------"
        ],
        "regex/main.c||regex/main.c": [
          "File: regex/main.c -> regex/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:     (sub.rm_so != -1 && sub.rm_eo == -1) ||",
          "426:     (sub.rm_so != -1 && sub.rm_so < 0) ||",
          "427:     (sub.rm_eo != -1 && sub.rm_eo < 0) ) {",
          "429:        (long)sub.rm_eo);",
          "430:   return(grump);",
          "431:  }",
          "",
          "[Removed Lines]",
          "428:   sprintf(grump, \"start %ld end %ld\", (long)sub.rm_so,",
          "",
          "[Added Lines]",
          "428:   snprintf(grump, sizeof(grump),",
          "429:     \"start %ld end %ld\", (long)sub.rm_so,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "440:  if ((int) sub.rm_eo > (int) strlen(str)) {",
          "442:      (long)sub.rm_so, (long)sub.rm_eo);",
          "443:   return(grump);",
          "444:  }",
          "",
          "[Removed Lines]",
          "441:   sprintf(grump, \"start %ld end %ld, past end of string\",",
          "",
          "[Added Lines]",
          "442:   snprintf(grump, sizeof(grump),",
          "443:     \"start %ld end %ld, past end of string\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "451:  if (should == NULL) {",
          "453:   return(grump);",
          "454:  }",
          "457:  if (len != shlen || strncmp(p, should, (size_t)shlen) != 0) {",
          "459:   return(grump);",
          "460:  }",
          "461:  if (shlen > 0)",
          "",
          "[Removed Lines]",
          "452:   sprintf(grump, \"matched `%.*s'\", len, p);",
          "458:   sprintf(grump, \"matched `%.*s' instead\", len, p);",
          "",
          "[Added Lines]",
          "454:   snprintf(grump, sizeof(grump),",
          "455:     \"matched `%.*s'\", len, p);",
          "461:   snprintf(grump, sizeof(grump),",
          "462:     \"matched `%.*s' instead\", len, p);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "468:  if (shlen == 0)",
          "470:  if (strncmp(p, at, shlen) != 0) {",
          "472:   return(grump);",
          "473:  }",
          "474:  return(NULL);",
          "",
          "[Removed Lines]",
          "471:   sprintf(grump, \"matched null at `%.20s'\", p);",
          "",
          "[Added Lines]",
          "475:   snprintf(grump, sizeof(grump),",
          "476:     \"matched null at `%.20s'\", p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "501:  static char efbuf[100];",
          "502:  my_regex_t re;",
          "505:  assert(strlen(efbuf) < sizeof(efbuf));",
          "506:  re.re_endp = efbuf;",
          "507:  (void) my_regerror(REG_ATOI, &re, efbuf, sizeof(efbuf));",
          "",
          "[Removed Lines]",
          "504:  sprintf(efbuf, \"REG_%s\", name);",
          "",
          "[Added Lines]",
          "509:  snprintf(efbuf, sizeof(efbuf), \"REG_%s\", name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c20aed7f489ba44d6200e272399a20dedb2e7237",
      "candidate_info": {
        "commit_hash": "c20aed7f489ba44d6200e272399a20dedb2e7237",
        "repo": "mysql/mysql-server",
        "commit_url": "https://github.com/mysql/mysql-server/commit/c20aed7f489ba44d6200e272399a20dedb2e7237",
        "files": [
          "client/mysql_plugin.c"
        ],
        "message": "BUG#20376670: STACK-BUFFER-OVERFLOW IN MYSQL_PLUGIN WITH LONG PLUGIN NAMES\n\nProblem: mysql_plugin uses unsafe c string funtions without properly checking\ninputs.\nFix: Check input sizes and initialize buffers.",
        "before_after_code_files": [
          "client/mysql_plugin.c||client/mysql_plugin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "client/mysql_plugin.c||client/mysql_plugin.c"
          ],
          "candidate": [
            "client/mysql_plugin.c||client/mysql_plugin.c"
          ]
        }
      },
      "candidate_diff": {
        "client/mysql_plugin.c||client/mysql_plugin.c": [
          "File: client/mysql_plugin.c -> client/mysql_plugin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    This program is free software; you can redistribute it and/or modify",
          "5:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "2:    Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.",
          "",
          "[Added Lines]",
          "2:    Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "417: static void usage(void)",
          "418: {",
          "419:   PRINT_VERSION;",
          "421:        \"All rights reserved.\\n\");",
          "422:   puts(\"Enable or disable plugins.\");",
          "423:   printf(\"\\nUsage: %s [options] <plugin> ENABLE|DISABLE\\n\\nOptions:\\n\",",
          "",
          "[Removed Lines]",
          "420:   puts(\"Copyright (c) 2011, 2013, Oracle and/or its affiliates. \"",
          "",
          "[Added Lines]",
          "420:   puts(\"Copyright (c) 2011, 2015, Oracle and/or its affiliates. \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "818:     else",
          "819:     {",
          "820:       strcpy(plugin_name, argv[i]);",
          "821:       strcpy(config_file, argv[i]);",
          "822:       strcat(config_file, \".ini\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "820:       if (strlen(argv[i]) + 4 + 1 > FN_REFLEN)",
          "821:       {",
          "822:         fprintf(stderr, \"ERROR: argument is too long.\\n\");",
          "823:         return 1;",
          "824:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "908:     if (opt_basedir[i-1] != FN_LIBCHAR || opt_basedir[i-1] != FN_LIBCHAR2)",
          "909:     {",
          "910:       char buff[FN_REFLEN];",
          "912:       strncpy(buff, opt_basedir, sizeof(buff) - 1);",
          "913: #ifdef _WIN32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916:       memset(buff, 0, sizeof(buff));",
          "",
          "---------------"
        ]
      }
    }
  ]
}