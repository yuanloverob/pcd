{
  "cve_id": "CVE-2010-5331",
  "cve_desc": "In the Linux kernel before 2.6.34, a range check issue in drivers/gpu/drm/radeon/atombios.c could cause an off by one (buffer overflow) problem. NOTE: At least one Linux maintainer believes that this CVE is incorrectly assigned and should be rejected because the value is hard coded and are not user-controllable where it is used",
  "repo": "torvalds/linux",
  "patch_hash": "0031c41be5c529f8329e327b63cde92ba1284842",
  "patch_info": {
    "commit_hash": "0031c41be5c529f8329e327b63cde92ba1284842",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/0031c41be5c529f8329e327b63cde92ba1284842",
    "files": [
      "drivers/gpu/drm/radeon/atombios.h",
      "drivers/gpu/drm/radeon/radeon_atombios.c"
    ],
    "message": "drivers/gpu/drm/radeon/radeon_atombios.c: range check issues\n\nThis change makes the array larger, \"MAX_SUPPORTED_TV_TIMING_V1_2\" is 3\nand the original size \"MAX_SUPPORTED_TV_TIMING\" is 2.\n\nAlso there were checks that were off by one.\n\nSigned-off-by: Dan Carpenter <error27@gmail.com>\nAcked-by: Alex Deucher <alexdeucher@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Dave Airlie <airlied@redhat.com>",
    "before_after_code_files": [
      "drivers/gpu/drm/radeon/atombios.h||drivers/gpu/drm/radeon/atombios.h",
      "drivers/gpu/drm/radeon/radeon_atombios.c||drivers/gpu/drm/radeon/radeon_atombios.c"
    ]
  },
  "patch_diff": {
    "drivers/gpu/drm/radeon/atombios.h||drivers/gpu/drm/radeon/atombios.h": [
      "File: drivers/gpu/drm/radeon/atombios.h -> drivers/gpu/drm/radeon/atombios.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2912:   UCHAR                    ucTV_BootUpDefaultStandard;",
      "2913:   UCHAR                    ucExt_TV_ASIC_ID;",
      "2914:   UCHAR                    ucExt_TV_ASIC_SlaveAddr;",
      "2916: }ATOM_ANALOG_TV_INFO_V1_2;",
      "2918: typedef struct _ATOM_DPCD_INFO",
      "",
      "[Removed Lines]",
      "2915:   ATOM_DTD_FORMAT          aModeTimings[MAX_SUPPORTED_TV_TIMING];",
      "",
      "[Added Lines]",
      "2915:   ATOM_DTD_FORMAT          aModeTimings[MAX_SUPPORTED_TV_TIMING_V1_2];",
      "",
      "---------------"
    ],
    "drivers/gpu/drm/radeon/radeon_atombios.c||drivers/gpu/drm/radeon/radeon_atombios.c": [
      "File: drivers/gpu/drm/radeon/radeon_atombios.c -> drivers/gpu/drm/radeon/radeon_atombios.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1264:  switch (crev) {",
      "1265:  case 1:",
      "1266:   tv_info = (ATOM_ANALOG_TV_INFO *)(mode_info->atom_context->bios + data_offset);",
      "1268:    return false;",
      "1270:   mode->crtc_htotal = le16_to_cpu(tv_info->aModeTimings[index].usCRTC_H_Total);",
      "",
      "[Removed Lines]",
      "1267:   if (index > MAX_SUPPORTED_TV_TIMING)",
      "",
      "[Added Lines]",
      "1267:   if (index >= MAX_SUPPORTED_TV_TIMING)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1302:   break;",
      "1303:  case 2:",
      "1304:   tv_info_v1_2 = (ATOM_ANALOG_TV_INFO_V1_2 *)(mode_info->atom_context->bios + data_offset);",
      "1306:    return false;",
      "1308:   dtd_timings = &tv_info_v1_2->aModeTimings[index];",
      "",
      "[Removed Lines]",
      "1305:   if (index > MAX_SUPPORTED_TV_TIMING_V1_2)",
      "",
      "[Added Lines]",
      "1305:   if (index >= MAX_SUPPORTED_TV_TIMING_V1_2)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e97bd974448ce90f8e4720499d84580bcd6a2f7a",
      "candidate_info": {
        "commit_hash": "e97bd974448ce90f8e4720499d84580bcd6a2f7a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e97bd974448ce90f8e4720499d84580bcd6a2f7a",
        "files": [
          "drivers/gpu/drm/radeon/atombios.h"
        ],
        "message": "drm/radeon/kms: update atombios.h to latest upstream.\n\nThis merges ugly whitespace we want to keep for consistency\nalong with the latest upstream changes.\n\nSigned-off-by: Alex Deucher <alexdeucher@gmail.com>\nSigned-off-by: Dave Airlie <airlied@redhat.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/radeon/atombios.h||drivers/gpu/drm/radeon/atombios.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/gpu/drm/radeon/atombios.h||drivers/gpu/drm/radeon/atombios.h"
          ],
          "candidate": [
            "drivers/gpu/drm/radeon/atombios.h||drivers/gpu/drm/radeon/atombios.h"
          ]
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/radeon/atombios.h||drivers/gpu/drm/radeon/atombios.h": [
          "File: drivers/gpu/drm/radeon/atombios.h -> drivers/gpu/drm/radeon/atombios.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #endif",
          "42: #ifdef _H2INC",
          "54: #endif",
          "57: #define ATOM_DAC_B            1",
          "58: #define ATOM_EXT_DAC          2",
          "60: #define ATOM_CRTC1            0",
          "61: #define ATOM_CRTC2            1",
          "63: #define ATOM_DIGA             0",
          "64: #define ATOM_DIGB             1",
          "66: #define ATOM_PPLL1            0",
          "67: #define ATOM_PPLL2            1",
          "69: #define ATOM_SCALER1          0",
          "70: #define ATOM_SCALER2          1",
          "77: #define ATOM_DISABLE          0",
          "78: #define ATOM_ENABLE           1",
          "",
          "[Removed Lines]",
          "43: #ifndef ULONG",
          "44: typedef unsigned long ULONG;",
          "45: #endif",
          "47: #ifndef UCHAR",
          "48: typedef unsigned char UCHAR;",
          "49: #endif",
          "51: #ifndef USHORT",
          "52: typedef unsigned short USHORT;",
          "53: #endif",
          "56: #define ATOM_DAC_A            0",
          "72: #define ATOM_SCALER_DISABLE   0",
          "73: #define ATOM_SCALER_CENTER    1",
          "74: #define ATOM_SCALER_EXPANSION 2",
          "75: #define ATOM_SCALER_MULTI_EX  3",
          "",
          "[Added Lines]",
          "45:   #ifndef ULONG",
          "46:     typedef unsigned long ULONG;",
          "47:   #endif",
          "49:   #ifndef UCHAR",
          "50:     typedef unsigned char UCHAR;",
          "51:   #endif",
          "53:   #ifndef USHORT",
          "54:     typedef unsigned short USHORT;",
          "55:   #endif",
          "58: #define ATOM_DAC_A            0",
          "64: #define ATOM_CRTC3            2",
          "65: #define ATOM_CRTC4            3",
          "66: #define ATOM_CRTC5            4",
          "67: #define ATOM_CRTC6            5",
          "68: #define ATOM_CRTC_INVALID     0xFF",
          "75: #define ATOM_DCPLL            2",
          "76: #define ATOM_PPLL_INVALID     0xFF",
          "81: #define ATOM_SCALER_DISABLE   0",
          "82: #define ATOM_SCALER_CENTER    1",
          "83: #define ATOM_SCALER_EXPANSION 2",
          "84: #define ATOM_SCALER_MULTI_EX  3",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: #define ATOM_LCD_SELFTEST_START         (ATOM_DISABLE+5)",
          "83: #define ATOM_LCD_SELFTEST_STOP         (ATOM_ENABLE+5)",
          "84: #define ATOM_ENCODER_INIT                     (ATOM_DISABLE+7)",
          "86: #define ATOM_BLANKING         1",
          "87: #define ATOM_BLANKING_OFF     0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94: #define ATOM_GET_STATUS                         (ATOM_DISABLE+8)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157: #define HW_ASSISTED_I2C_STATUS_FAILURE          2",
          "158: #define HW_ASSISTED_I2C_STATUS_SUCCESS          1",
          "",
          "[Removed Lines]",
          "152: #define ATOM_MAX_SIZE_OF_FAKE_DESKTOP_STRING  ATOM_MAX_SIZE_OF_FIREGL_FLAG_STRING",
          "",
          "[Added Lines]",
          "159: #define ATOM_FIREGL_FLAG_STRING     \"FGL\"             //Flag used to enable FireGL Support",
          "160: #define ATOM_MAX_SIZE_OF_FIREGL_FLAG_STRING  3        //sizeof( ATOM_FIREGL_FLAG_STRING )",
          "162: #define ATOM_FAKE_DESKTOP_STRING    \"DSK\"             //Flag used to enable mobile ASIC on Desktop",
          "163: #define ATOM_MAX_SIZE_OF_FAKE_DESKTOP_STRING  ATOM_MAX_SIZE_OF_FIREGL_FLAG_STRING",
          "165: #define ATOM_M54T_FLAG_STRING       \"M54T\"            //Flag used to enable M54T Support",
          "166: #define ATOM_MAX_SIZE_OF_M54T_FLAG_STRING    4        //sizeof( ATOM_M54T_FLAG_STRING )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165: #define OFFSET_TO_ATOM_ROM_IMAGE_SIZE        0x00000002L",
          "167: #define OFFSET_TO_ATOMBIOS_ASIC_BUS_MEM_TYPE    0x94",
          "169: #define OFFSET_TO_GET_ATOMBIOS_STRINGS_NUMBER  0x002f",
          "170: #define OFFSET_TO_GET_ATOMBIOS_STRINGS_START  0x006e",
          "206: #ifdef UEFI_BUILD",
          "209: #endif",
          "295: #define ReadEDIDFromHWAssistedI2C                ProcessI2cChannelTransaction",
          "296: #define UNIPHYTransmitterControl           DIG1TransmitterControl",
          "297: #define LVTMATransmitterControl            DIG2TransmitterControl",
          "298: #define SetCRTC_DPM_State                        GetConditionalGoldenSetting",
          "299: #define SetUniphyInstance                        ASIC_StaticPwrMgtStatusChange",
          "310: #if ATOM_BIG_ENDIAN",
          "314: #else",
          "318: #endif",
          "339: #define COMPUTE_MEMORY_PLL_PARAM        1",
          "340: #define COMPUTE_ENGINE_PLL_PARAM        2",
          "356: #define COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_PS_ALLOCATION   COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS",
          "364: #define USE_SS_ENABLED_PIXEL_CLOCK  USE_NON_BUS_CLOCK_MASK",
          "373: #if ATOM_BIG_ENDIAN",
          "376: #else",
          "379: #endif",
          "399: #define ATOM_PLL_CNTL_FLAG_PLL_POST_DIV_EN          1",
          "400: #define ATOM_PLL_CNTL_FLAG_MPLL_VCO_MODE            2",
          "401: #define ATOM_PLL_CNTL_FLAG_FRACTION_DISABLE         4",
          "458: #define  DYNAMIC_CLOCK_GATING_PS_ALLOCATION  DYNAMIC_CLOCK_GATING_PARAMETERS",
          "467: #define ENABLE_ASIC_STATIC_PWR_MGT_PS_ALLOCATION  ENABLE_ASIC_STATIC_PWR_MGT_PARAMETERS",
          "479: #define DAC_LOAD_MISC_YPrPb      0x01",
          "497: #define DAC_ENCODER_CONTROL_PS_ALLOCATION  DAC_ENCODER_CONTROL_PARAMETERS",
          "525: #define DIG_ENCODER_CONTROL_PS_ALLOCATION     DIG_ENCODER_CONTROL_PARAMETERS",
          "526: #define EXTERNAL_ENCODER_CONTROL_PARAMETER   DIG_ENCODER_CONTROL_PARAMETERS",
          "529: #define ATOM_ENCODER_CONFIG_DPLINKRATE_MASK    0x01",
          "530: #define ATOM_ENCODER_CONFIG_DPLINKRATE_1_62GHZ  0x00",
          "531: #define ATOM_ENCODER_CONFIG_DPLINKRATE_2_70GHZ  0x01",
          "",
          "[Removed Lines]",
          "173:   Every table pointed  _ATOM_MASTER_DATA_TABLE has this common header.",
          "176: typedef struct _ATOM_COMMON_TABLE_HEADER {",
          "177:  USHORT usStructureSize;",
          "181: } ATOM_COMMON_TABLE_HEADER;",
          "183: typedef struct _ATOM_ROM_HEADER {",
          "184:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "185:  UCHAR uaFirmWareSignature[4]; /*Signature to distinguish between Atombios and non-atombios,",
          "187:  USHORT usBiosRuntimeSegmentAddress;",
          "188:  USHORT usProtectedModeInfoOffset;",
          "189:  USHORT usConfigFilenameOffset;",
          "190:  USHORT usCRC_BlockOffset;",
          "191:  USHORT usBIOS_BootupMessageOffset;",
          "192:  USHORT usInt10Offset;",
          "193:  USHORT usPciBusDevInitCode;",
          "194:  USHORT usIoBaseAddress;",
          "195:  USHORT usSubsystemVendorID;",
          "196:  USHORT usSubsystemID;",
          "197:  USHORT usPCI_InfoOffset;",
          "200:  UCHAR ucExtendedFunctionCode;",
          "201:  UCHAR ucReserved;",
          "202: } ATOM_ROM_HEADER;",
          "207: #define UTEMP USHORT",
          "208: #define USHORT void*",
          "211: typedef struct _ATOM_MASTER_LIST_OF_COMMAND_TABLES {",
          "228:  USHORT MemoryPLLInit;",
          "256:  USHORT UpdateCRTC_DoubleBufferRegisters;",
          "292: } ATOM_MASTER_LIST_OF_COMMAND_TABLES;",
          "301: typedef struct _ATOM_MASTER_COMMAND_TABLE {",
          "302:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "303:  ATOM_MASTER_LIST_OF_COMMAND_TABLES ListOfCommandTables;",
          "304: } ATOM_MASTER_COMMAND_TABLE;",
          "309: typedef struct _ATOM_TABLE_ATTRIBUTE {",
          "319: } ATOM_TABLE_ATTRIBUTE;",
          "321: typedef union _ATOM_TABLE_ATTRIBUTE_ACCESS {",
          "322:  ATOM_TABLE_ATTRIBUTE sbfAccess;",
          "323:  USHORT susAccess;",
          "324: } ATOM_TABLE_ATTRIBUTE_ACCESS;",
          "331: typedef struct _ATOM_COMMON_ROM_COMMAND_TABLE_HEADER {",
          "332:  ATOM_COMMON_TABLE_HEADER CommonHeader;",
          "333:  ATOM_TABLE_ATTRIBUTE TableAttribute;",
          "334: } ATOM_COMMON_ROM_COMMAND_TABLE_HEADER;",
          "342: typedef struct _COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS {",
          "348: } COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS;",
          "350: typedef struct _COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V2 {",
          "355: } COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V2;",
          "372: typedef struct _ATOM_COMPUTE_CLOCK_FREQ {",
          "380: } ATOM_COMPUTE_CLOCK_FREQ;",
          "382: typedef struct _ATOM_S_MPLL_FB_DIVIDER {",
          "383:  USHORT usFbDivFrac;",
          "384:  USHORT usFbDiv;",
          "385: } ATOM_S_MPLL_FB_DIVIDER;",
          "387: typedef struct _COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V3 {",
          "388:  union {",
          "391:  };",
          "395:  UCHAR ucReserved;",
          "396: } COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V3;",
          "403: typedef struct _DYNAMICE_MEMORY_SETTINGS_PARAMETER {",
          "404:  ATOM_COMPUTE_CLOCK_FREQ ulClock;",
          "405:  ULONG ulReserved[2];",
          "406: } DYNAMICE_MEMORY_SETTINGS_PARAMETER;",
          "408: typedef struct _DYNAMICE_ENGINE_SETTINGS_PARAMETER {",
          "409:  ATOM_COMPUTE_CLOCK_FREQ ulClock;",
          "410:  ULONG ulMemoryClock;",
          "411:  ULONG ulReserved;",
          "412: } DYNAMICE_ENGINE_SETTINGS_PARAMETER;",
          "417: typedef struct _SET_ENGINE_CLOCK_PARAMETERS {",
          "419: } SET_ENGINE_CLOCK_PARAMETERS;",
          "421: typedef struct _SET_ENGINE_CLOCK_PS_ALLOCATION {",
          "423:  COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_PS_ALLOCATION sReserved;",
          "424: } SET_ENGINE_CLOCK_PS_ALLOCATION;",
          "429: typedef struct _SET_MEMORY_CLOCK_PARAMETERS {",
          "431: } SET_MEMORY_CLOCK_PARAMETERS;",
          "433: typedef struct _SET_MEMORY_CLOCK_PS_ALLOCATION {",
          "435:  COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_PS_ALLOCATION sReserved;",
          "436: } SET_MEMORY_CLOCK_PS_ALLOCATION;",
          "441: typedef struct _ASIC_INIT_PARAMETERS {",
          "444: } ASIC_INIT_PARAMETERS;",
          "446: typedef struct _ASIC_INIT_PS_ALLOCATION {",
          "447:  ASIC_INIT_PARAMETERS sASICInitClocks;",
          "449: } ASIC_INIT_PS_ALLOCATION;",
          "454: typedef struct _DYNAMIC_CLOCK_GATING_PARAMETERS {",
          "456:  UCHAR ucPadding[3];",
          "457: } DYNAMIC_CLOCK_GATING_PARAMETERS;",
          "463: typedef struct _ENABLE_ASIC_STATIC_PWR_MGT_PARAMETERS {",
          "465:  UCHAR ucPadding[3];",
          "466: } ENABLE_ASIC_STATIC_PWR_MGT_PARAMETERS;",
          "472: typedef struct _DAC_LOAD_DETECTION_PARAMETERS {",
          "476: } DAC_LOAD_DETECTION_PARAMETERS;",
          "481: typedef struct _DAC_LOAD_DETECTION_PS_ALLOCATION {",
          "482:  DAC_LOAD_DETECTION_PARAMETERS sDacload;",
          "484: } DAC_LOAD_DETECTION_PS_ALLOCATION;",
          "489: typedef struct _DAC_ENCODER_CONTROL_PARAMETERS {",
          "495: } DAC_ENCODER_CONTROL_PARAMETERS;",
          "504: typedef struct _DIG_ENCODER_CONTROL_PARAMETERS {",
          "506:  UCHAR ucConfig;",
          "516:  UCHAR ucEncoderMode;",
          "523:  UCHAR ucReserved[2];",
          "524: } DIG_ENCODER_CONTROL_PARAMETERS;",
          "",
          "[Added Lines]",
          "184:   Every table pointed  _ATOM_MASTER_DATA_TABLE has this common header.",
          "187: typedef struct _ATOM_COMMON_TABLE_HEADER",
          "188: {",
          "189:   USHORT usStructureSize;",
          "193: }ATOM_COMMON_TABLE_HEADER;",
          "195: typedef struct _ATOM_ROM_HEADER",
          "196: {",
          "197:   ATOM_COMMON_TABLE_HEADER  sHeader;",
          "198:   UCHAR  uaFirmWareSignature[4];    /*Signature to distinguish between Atombios and non-atombios,",
          "200:   USHORT usBiosRuntimeSegmentAddress;",
          "201:   USHORT usProtectedModeInfoOffset;",
          "202:   USHORT usConfigFilenameOffset;",
          "203:   USHORT usCRC_BlockOffset;",
          "204:   USHORT usBIOS_BootupMessageOffset;",
          "205:   USHORT usInt10Offset;",
          "206:   USHORT usPciBusDevInitCode;",
          "207:   USHORT usIoBaseAddress;",
          "208:   USHORT usSubsystemVendorID;",
          "209:   USHORT usSubsystemID;",
          "210:   USHORT usPCI_InfoOffset;",
          "213:   UCHAR  ucExtendedFunctionCode;",
          "214:   UCHAR  ucReserved;",
          "215: }ATOM_ROM_HEADER;",
          "220:  #define UTEMP USHORT",
          "221:  #define USHORT void*",
          "224: typedef struct _ATOM_MASTER_LIST_OF_COMMAND_TABLES{",
          "225:   USHORT ASIC_Init;                              //Function Table, used by various SW components,latest version 1.1",
          "226:   USHORT GetDisplaySurfaceSize;                  //Atomic Table,  Used by Bios when enabling HW ICON",
          "227:   USHORT ASIC_RegistersInit;                     //Atomic Table,  indirectly used by various SW components,called from ASIC_Init",
          "228:   USHORT VRAM_BlockVenderDetection;              //Atomic Table,  used only by Bios",
          "229:   USHORT DIGxEncoderControl;           //Only used by Bios",
          "230:   USHORT MemoryControllerInit;                   //Atomic Table,  indirectly used by various SW components,called from ASIC_Init",
          "231:   USHORT EnableCRTCMemReq;                       //Function Table,directly used by various SW components,latest version 2.1",
          "232:   USHORT MemoryParamAdjust;            //Atomic Table,  indirectly used by various SW components,called from SetMemoryClock if needed",
          "233:   USHORT DVOEncoderControl;                      //Function Table,directly used by various SW components,latest version 1.2",
          "234:   USHORT GPIOPinControl;             //Atomic Table,  only used by Bios",
          "235:   USHORT SetEngineClock;                         //Function Table,directly used by various SW components,latest version 1.1",
          "236:   USHORT SetMemoryClock;                         //Function Table,directly used by various SW components,latest version 1.1",
          "237:   USHORT SetPixelClock;                          //Function Table,directly used by various SW components,latest version 1.2",
          "238:   USHORT DynamicClockGating;                     //Atomic Table,  indirectly used by various SW components,called from ASIC_Init",
          "239:   USHORT ResetMemoryDLL;                         //Atomic Table,  indirectly used by various SW components,called from SetMemoryClock",
          "240:   USHORT ResetMemoryDevice;                      //Atomic Table,  indirectly used by various SW components,called from SetMemoryClock",
          "241:   USHORT MemoryPLLInit;",
          "242:   USHORT AdjustDisplayPll;            //only used by Bios",
          "243:   USHORT AdjustMemoryController;                 //Atomic Table,  indirectly used by various SW components,called from SetMemoryClock",
          "244:   USHORT EnableASIC_StaticPwrMgt;                //Atomic Table,  only used by Bios",
          "245:   USHORT ASIC_StaticPwrMgtStatusChange;          //Obsolete ,     only used by Bios",
          "246:   USHORT DAC_LoadDetection;                      //Atomic Table,  directly used by various SW components,latest version 1.2",
          "247:   USHORT LVTMAEncoderControl;                    //Atomic Table,directly used by various SW components,latest version 1.3",
          "248:   USHORT LCD1OutputControl;                      //Atomic Table,  directly used by various SW components,latest version 1.1",
          "249:   USHORT DAC1EncoderControl;                     //Atomic Table,  directly used by various SW components,latest version 1.1",
          "250:   USHORT DAC2EncoderControl;                     //Atomic Table,  directly used by various SW components,latest version 1.1",
          "251:   USHORT DVOOutputControl;                       //Atomic Table,  directly used by various SW components,latest version 1.1",
          "252:   USHORT CV1OutputControl;                       //Atomic Table,  Atomic Table,  Obsolete from Ry6xx, use DAC2 Output instead",
          "253:   USHORT GetConditionalGoldenSetting;            //only used by Bios",
          "254:   USHORT TVEncoderControl;                       //Function Table,directly used by various SW components,latest version 1.1",
          "255:   USHORT TMDSAEncoderControl;                    //Atomic Table,  directly used by various SW components,latest version 1.3",
          "256:   USHORT LVDSEncoderControl;                     //Atomic Table,  directly used by various SW components,latest version 1.3",
          "257:   USHORT TV1OutputControl;                       //Atomic Table,  Obsolete from Ry6xx, use DAC2 Output instead",
          "258:   USHORT EnableScaler;                           //Atomic Table,  used only by Bios",
          "259:   USHORT BlankCRTC;                              //Atomic Table,  directly used by various SW components,latest version 1.1",
          "260:   USHORT EnableCRTC;                             //Atomic Table,  directly used by various SW components,latest version 1.1",
          "261:   USHORT GetPixelClock;                          //Atomic Table,  directly used by various SW components,latest version 1.1",
          "262:   USHORT EnableVGA_Render;                       //Function Table,directly used by various SW components,latest version 1.1",
          "263:   USHORT GetSCLKOverMCLKRatio;                   //Atomic Table,  only used by Bios",
          "264:   USHORT SetCRTC_Timing;                         //Atomic Table,  directly used by various SW components,latest version 1.1",
          "265:   USHORT SetCRTC_OverScan;                       //Atomic Table,  used by various SW components,latest version 1.1",
          "266:   USHORT SetCRTC_Replication;                    //Atomic Table,  used only by Bios",
          "267:   USHORT SelectCRTC_Source;                      //Atomic Table,  directly used by various SW components,latest version 1.1",
          "268:   USHORT EnableGraphSurfaces;                    //Atomic Table,  used only by Bios",
          "269:   USHORT UpdateCRTC_DoubleBufferRegisters;",
          "270:   USHORT LUT_AutoFill;                           //Atomic Table,  only used by Bios",
          "271:   USHORT EnableHW_IconCursor;                    //Atomic Table,  only used by Bios",
          "272:   USHORT GetMemoryClock;                         //Atomic Table,  directly used by various SW components,latest version 1.1",
          "273:   USHORT GetEngineClock;                         //Atomic Table,  directly used by various SW components,latest version 1.1",
          "274:   USHORT SetCRTC_UsingDTDTiming;                 //Atomic Table,  directly used by various SW components,latest version 1.1",
          "275:   USHORT ExternalEncoderControl;                 //Atomic Table,  directly used by various SW components,latest version 2.1",
          "276:   USHORT LVTMAOutputControl;                     //Atomic Table,  directly used by various SW components,latest version 1.1",
          "277:   USHORT VRAM_BlockDetectionByStrap;             //Atomic Table,  used only by Bios",
          "278:   USHORT MemoryCleanUp;                          //Atomic Table,  only used by Bios",
          "279:   USHORT ProcessI2cChannelTransaction;           //Function Table,only used by Bios",
          "280:   USHORT WriteOneByteToHWAssistedI2C;            //Function Table,indirectly used by various SW components",
          "281:   USHORT ReadHWAssistedI2CStatus;                //Atomic Table,  indirectly used by various SW components",
          "282:   USHORT SpeedFanControl;                        //Function Table,indirectly used by various SW components,called from ASIC_Init",
          "283:   USHORT PowerConnectorDetection;                //Atomic Table,  directly used by various SW components,latest version 1.1",
          "284:   USHORT MC_Synchronization;                     //Atomic Table,  indirectly used by various SW components,called from SetMemoryClock",
          "285:   USHORT ComputeMemoryEnginePLL;                 //Atomic Table,  indirectly used by various SW components,called from SetMemory/EngineClock",
          "286:   USHORT MemoryRefreshConversion;                //Atomic Table,  indirectly used by various SW components,called from SetMemory or SetEngineClock",
          "287:   USHORT VRAM_GetCurrentInfoBlock;               //Atomic Table,  used only by Bios",
          "288:   USHORT DynamicMemorySettings;                  //Atomic Table,  indirectly used by various SW components,called from SetMemoryClock",
          "289:   USHORT MemoryTraining;                         //Atomic Table,  used only by Bios",
          "290:   USHORT EnableSpreadSpectrumOnPPLL;             //Atomic Table,  directly used by various SW components,latest version 1.2",
          "291:   USHORT TMDSAOutputControl;                     //Atomic Table,  directly used by various SW components,latest version 1.1",
          "292:   USHORT SetVoltage;                             //Function Table,directly and/or indirectly used by various SW components,latest version 1.1",
          "293:   USHORT DAC1OutputControl;                      //Atomic Table,  directly used by various SW components,latest version 1.1",
          "294:   USHORT DAC2OutputControl;                      //Atomic Table,  directly used by various SW components,latest version 1.1",
          "295:   USHORT SetupHWAssistedI2CStatus;               //Function Table,only used by Bios, obsolete soon.Switch to use \"ReadEDIDFromHWAssistedI2C\"",
          "296:   USHORT ClockSource;                            //Atomic Table,  indirectly used by various SW components,called from ASIC_Init",
          "297:   USHORT MemoryDeviceInit;                       //Atomic Table,  indirectly used by various SW components,called from SetMemoryClock",
          "298:   USHORT EnableYUV;                              //Atomic Table,  indirectly used by various SW components,called from EnableVGARender",
          "299:   USHORT DIG1EncoderControl;                     //Atomic Table,directly used by various SW components,latest version 1.1",
          "300:   USHORT DIG2EncoderControl;                     //Atomic Table,directly used by various SW components,latest version 1.1",
          "301:   USHORT DIG1TransmitterControl;                 //Atomic Table,directly used by various SW components,latest version 1.1",
          "302:   USHORT DIG2TransmitterControl;                //Atomic Table,directly used by various SW components,latest version 1.1",
          "303:   USHORT ProcessAuxChannelTransaction;      //Function Table,only used by Bios",
          "304:   USHORT DPEncoderService;            //Function Table,only used by Bios",
          "305: }ATOM_MASTER_LIST_OF_COMMAND_TABLES;",
          "313: #define HPDInterruptService                      ReadHWAssistedI2CStatus",
          "314: #define EnableVGA_Access                         GetSCLKOverMCLKRatio",
          "316: typedef struct _ATOM_MASTER_COMMAND_TABLE",
          "317: {",
          "318:   ATOM_COMMON_TABLE_HEADER           sHeader;",
          "319:   ATOM_MASTER_LIST_OF_COMMAND_TABLES ListOfCommandTables;",
          "320: }ATOM_MASTER_COMMAND_TABLE;",
          "325: typedef struct _ATOM_TABLE_ATTRIBUTE",
          "326: {",
          "328:   USHORT  UpdatedByUtility:1;         //[15]=Table updated by utility flag",
          "329:   USHORT  PS_SizeInBytes:7;           //[14:8]=Size of parameter space in Bytes (multiple of a dword),",
          "330:   USHORT  WS_SizeInBytes:8;           //[7:0]=Size of workspace in Bytes (in multiple of a dword),",
          "332:   USHORT  WS_SizeInBytes:8;           //[7:0]=Size of workspace in Bytes (in multiple of a dword),",
          "333:   USHORT  PS_SizeInBytes:7;           //[14:8]=Size of parameter space in Bytes (multiple of a dword),",
          "334:   USHORT  UpdatedByUtility:1;         //[15]=Table updated by utility flag",
          "336: }ATOM_TABLE_ATTRIBUTE;",
          "338: typedef union _ATOM_TABLE_ATTRIBUTE_ACCESS",
          "339: {",
          "340:   ATOM_TABLE_ATTRIBUTE sbfAccess;",
          "341:   USHORT               susAccess;",
          "342: }ATOM_TABLE_ATTRIBUTE_ACCESS;",
          "349: typedef struct _ATOM_COMMON_ROM_COMMAND_TABLE_HEADER",
          "350: {",
          "351:   ATOM_COMMON_TABLE_HEADER CommonHeader;",
          "352:   ATOM_TABLE_ATTRIBUTE     TableAttribute;",
          "353: }ATOM_COMMON_ROM_COMMAND_TABLE_HEADER;",
          "361: typedef struct _COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS",
          "362: {",
          "363:   ULONG   ulClock;        //When returen, it's the re-calculated clock based on given Fb_div Post_Div and ref_div",
          "364:   UCHAR   ucAction;       //0:reserved //1:Memory //2:Engine",
          "365:   UCHAR   ucReserved;     //may expand to return larger Fbdiv later",
          "366:   UCHAR   ucFbDiv;        //return value",
          "367:   UCHAR   ucPostDiv;      //return value",
          "368: }COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS;",
          "370: typedef struct _COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V2",
          "371: {",
          "372:   ULONG   ulClock;        //When return, [23:0] return real clock",
          "373:   UCHAR   ucAction;       //0:reserved;COMPUTE_MEMORY_PLL_PARAM:Memory;COMPUTE_ENGINE_PLL_PARAM:Engine. it return ref_div to be written to register",
          "374:   USHORT  usFbDiv;      //return Feedback value to be written to register",
          "375:   UCHAR   ucPostDiv;      //return post div to be written to register",
          "376: }COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V2;",
          "380: #define SET_CLOCK_FREQ_MASK                     0x00FFFFFF  //Clock change tables only take bit [23:0] as the requested clock value",
          "381: #define USE_NON_BUS_CLOCK_MASK                  0x01000000  //Applicable to both memory and engine clock change, when set, it uses another clock as the temporary clock (engine uses memory and vice versa)",
          "382: #define USE_MEMORY_SELF_REFRESH_MASK            0x02000000 //Only applicable to memory clock change, when set, using memory self refresh during clock transition",
          "383: #define SKIP_INTERNAL_MEMORY_PARAMETER_CHANGE   0x04000000  //Only applicable to memory clock change, when set, the table will skip predefined internal memory parameter change",
          "384: #define FIRST_TIME_CHANGE_CLOCK         0x08000000 //Applicable to both memory and engine clock change,when set, it means this is 1st time to change clock after ASIC bootup",
          "385: #define SKIP_SW_PROGRAM_PLL           0x10000000 //Applicable to both memory and engine clock change, when set, it means the table will not program SPLL/MPLL",
          "388: #define b3USE_NON_BUS_CLOCK_MASK                  0x01       //Applicable to both memory and engine clock change, when set, it uses another clock as the temporary clock (engine uses memory and vice versa)",
          "389: #define b3USE_MEMORY_SELF_REFRESH                 0x02      //Only applicable to memory clock change, when set, using memory self refresh during clock transition",
          "390: #define b3SKIP_INTERNAL_MEMORY_PARAMETER_CHANGE   0x04       //Only applicable to memory clock change, when set, the table will skip predefined internal memory parameter change",
          "391: #define b3FIRST_TIME_CHANGE_CLOCK         0x08       //Applicable to both memory and engine clock change,when set, it means this is 1st time to change clock after ASIC bootup",
          "392: #define b3SKIP_SW_PROGRAM_PLL           0x10    //Applicable to both memory and engine clock change, when set, it means the table will not program SPLL/MPLL",
          "394: typedef struct _ATOM_COMPUTE_CLOCK_FREQ",
          "395: {",
          "397:   ULONG ulComputeClockFlag:8;                 // =1: COMPUTE_MEMORY_PLL_PARAM, =2: COMPUTE_ENGINE_PLL_PARAM",
          "398:   ULONG ulClockFreq:24;                       // in unit of 10kHz",
          "400:   ULONG ulClockFreq:24;                       // in unit of 10kHz",
          "401:   ULONG ulComputeClockFlag:8;                 // =1: COMPUTE_MEMORY_PLL_PARAM, =2: COMPUTE_ENGINE_PLL_PARAM",
          "403: }ATOM_COMPUTE_CLOCK_FREQ;",
          "405: typedef struct _ATOM_S_MPLL_FB_DIVIDER",
          "406: {",
          "407:   USHORT usFbDivFrac;",
          "408:   USHORT usFbDiv;",
          "409: }ATOM_S_MPLL_FB_DIVIDER;",
          "411: typedef struct _COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V3",
          "412: {",
          "413:   union",
          "414:   {",
          "415:     ATOM_COMPUTE_CLOCK_FREQ  ulClock;         //Input Parameter",
          "416:     ATOM_S_MPLL_FB_DIVIDER   ulFbDiv;         //Output Parameter",
          "417:   };",
          "418:   UCHAR   ucRefDiv;                           //Output Parameter",
          "419:   UCHAR   ucPostDiv;                          //Output Parameter",
          "420:   UCHAR   ucCntlFlag;                         //Output Parameter",
          "421:   UCHAR   ucReserved;",
          "422: }COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V3;",
          "428: #define ATOM_PLL_CNTL_FLAG_SPLL_ISPARE_9      8",
          "432: typedef struct _COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V4",
          "433: {",
          "434: #if ATOM_BIG_ENDIAN",
          "435:   ULONG  ucPostDiv;          //return parameter: post divider which is used to program to register directly",
          "436:   ULONG  ulClock:24;         //Input= target clock, output = actual clock",
          "437: #else",
          "438:   ULONG  ulClock:24;         //Input= target clock, output = actual clock",
          "439:   ULONG  ucPostDiv;          //return parameter: post divider which is used to program to register directly",
          "440: #endif",
          "441: }COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V4;",
          "443: typedef struct _DYNAMICE_MEMORY_SETTINGS_PARAMETER",
          "444: {",
          "445:   ATOM_COMPUTE_CLOCK_FREQ ulClock;",
          "446:   ULONG ulReserved[2];",
          "447: }DYNAMICE_MEMORY_SETTINGS_PARAMETER;",
          "449: typedef struct _DYNAMICE_ENGINE_SETTINGS_PARAMETER",
          "450: {",
          "451:   ATOM_COMPUTE_CLOCK_FREQ ulClock;",
          "452:   ULONG ulMemoryClock;",
          "453:   ULONG ulReserved;",
          "454: }DYNAMICE_ENGINE_SETTINGS_PARAMETER;",
          "459: typedef struct _SET_ENGINE_CLOCK_PARAMETERS",
          "460: {",
          "461:   ULONG ulTargetEngineClock;          //In 10Khz unit",
          "462: }SET_ENGINE_CLOCK_PARAMETERS;",
          "464: typedef struct _SET_ENGINE_CLOCK_PS_ALLOCATION",
          "465: {",
          "466:   ULONG ulTargetEngineClock;          //In 10Khz unit",
          "467:   COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_PS_ALLOCATION sReserved;",
          "468: }SET_ENGINE_CLOCK_PS_ALLOCATION;",
          "473: typedef struct _SET_MEMORY_CLOCK_PARAMETERS",
          "474: {",
          "475:   ULONG ulTargetMemoryClock;          //In 10Khz unit",
          "476: }SET_MEMORY_CLOCK_PARAMETERS;",
          "478: typedef struct _SET_MEMORY_CLOCK_PS_ALLOCATION",
          "479: {",
          "480:   ULONG ulTargetMemoryClock;          //In 10Khz unit",
          "481:   COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_PS_ALLOCATION sReserved;",
          "482: }SET_MEMORY_CLOCK_PS_ALLOCATION;",
          "487: typedef struct _ASIC_INIT_PARAMETERS",
          "488: {",
          "489:   ULONG ulDefaultEngineClock;         //In 10Khz unit",
          "490:   ULONG ulDefaultMemoryClock;         //In 10Khz unit",
          "491: }ASIC_INIT_PARAMETERS;",
          "493: typedef struct _ASIC_INIT_PS_ALLOCATION",
          "494: {",
          "495:   ASIC_INIT_PARAMETERS sASICInitClocks;",
          "496:   SET_ENGINE_CLOCK_PS_ALLOCATION sReserved; //Caller doesn't need to init this structure",
          "497: }ASIC_INIT_PS_ALLOCATION;",
          "502: typedef struct _DYNAMIC_CLOCK_GATING_PARAMETERS",
          "503: {",
          "504:   UCHAR ucEnable;                     // ATOM_ENABLE or ATOM_DISABLE",
          "505:   UCHAR ucPadding[3];",
          "506: }DYNAMIC_CLOCK_GATING_PARAMETERS;",
          "512: typedef struct _ENABLE_ASIC_STATIC_PWR_MGT_PARAMETERS",
          "513: {",
          "514:   UCHAR ucEnable;                     // ATOM_ENABLE or ATOM_DISABLE",
          "515:   UCHAR ucPadding[3];",
          "516: }ENABLE_ASIC_STATIC_PWR_MGT_PARAMETERS;",
          "522: typedef struct _DAC_LOAD_DETECTION_PARAMETERS",
          "523: {",
          "524:   USHORT usDeviceID;                  //{ATOM_DEVICE_CRTx_SUPPORT,ATOM_DEVICE_TVx_SUPPORT,ATOM_DEVICE_CVx_SUPPORT}",
          "525:   UCHAR  ucDacType;                   //{ATOM_DAC_A,ATOM_DAC_B, ATOM_EXT_DAC}",
          "526:   UCHAR  ucMisc;           //Valid only when table revision =1.3 and above",
          "527: }DAC_LOAD_DETECTION_PARAMETERS;",
          "532: typedef struct _DAC_LOAD_DETECTION_PS_ALLOCATION",
          "533: {",
          "534:   DAC_LOAD_DETECTION_PARAMETERS            sDacload;",
          "535:   ULONG                                    Reserved[2];// Don't set this one, allocation for EXT DAC",
          "536: }DAC_LOAD_DETECTION_PS_ALLOCATION;",
          "541: typedef struct _DAC_ENCODER_CONTROL_PARAMETERS",
          "542: {",
          "543:   USHORT usPixelClock;                // in 10KHz; for bios convenient",
          "544:   UCHAR  ucDacStandard;               // See definition of ATOM_DACx_xxx, For DEC3.0, bit 7 used as internal flag to indicate DAC2 (==1) or DAC1 (==0)",
          "545:   UCHAR  ucAction;                    // 0: turn off encoder",
          "548: }DAC_ENCODER_CONTROL_PARAMETERS;",
          "557: typedef struct _DIG_ENCODER_CONTROL_PARAMETERS",
          "558: {",
          "559:   USHORT usPixelClock;  // in 10KHz; for bios convenient",
          "560:   UCHAR  ucConfig;",
          "568:   UCHAR ucAction;           // =0: turn off encoder",
          "570:   UCHAR ucEncoderMode;",
          "576:   UCHAR ucLaneNum;          // how many lanes to enable",
          "577:   UCHAR ucReserved[2];",
          "578: }DIG_ENCODER_CONTROL_PARAMETERS;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "539: #define ATOM_ENCODER_CONFIG_LVTMA          0x08",
          "540: #define ATOM_ENCODER_CONFIG_TRANSMITTER1      0x00",
          "541: #define ATOM_ENCODER_CONFIG_TRANSMITTER2      0x08",
          "548: #define ATOM_ENCODER_MODE_DP           0",
          "549: #define ATOM_ENCODER_MODE_LVDS          1",
          "550: #define ATOM_ENCODER_MODE_DVI           2",
          "551: #define ATOM_ENCODER_MODE_HDMI          3",
          "552: #define ATOM_ENCODER_MODE_SDVO          4",
          "553: #define ATOM_ENCODER_MODE_TV           13",
          "554: #define ATOM_ENCODER_MODE_CV           14",
          "555: #define ATOM_ENCODER_MODE_CRT           15",
          "558: #if ATOM_BIG_ENDIAN",
          "564: #else",
          "570: #endif",
          "588: #define ATOM_ENCODER_CONFIG_V2_DPLINKRATE_MASK    0x01",
          "589: #define ATOM_ENCODER_CONFIG_V2_DPLINKRATE_1_62GHZ    0x00",
          "590: #define ATOM_ENCODER_CONFIG_V2_DPLINKRATE_2_70GHZ    0x01",
          "",
          "[Removed Lines]",
          "557: typedef struct _ATOM_DIG_ENCODER_CONFIG_V2 {",
          "559:  UCHAR ucReserved1:2;",
          "562:  UCHAR ucReserved:1;",
          "566:  UCHAR ucReserved:1;",
          "569:  UCHAR ucReserved1:2;",
          "571: } ATOM_DIG_ENCODER_CONFIG_V2;",
          "573: typedef struct _DIG_ENCODER_CONTROL_PARAMETERS_V2 {",
          "575:  ATOM_DIG_ENCODER_CONFIG_V2 acConfig;",
          "576:  UCHAR ucAction;",
          "577:  UCHAR ucEncoderMode;",
          "584:  UCHAR ucReserved[2];",
          "585: } DIG_ENCODER_CONTROL_PARAMETERS_V2;",
          "",
          "[Added Lines]",
          "596: #define ATOM_ENCODER_CONFIG_DIGB          0x80   // VBIOS Internal use, outside SW should set this bit=0",
          "607: #define ATOM_ENCODER_MODE_DP_AUDIO                5",
          "612: typedef struct _ATOM_DIG_ENCODER_CONFIG_V2",
          "613: {",
          "615:     UCHAR ucReserved1:2;",
          "616:     UCHAR ucTransmitterSel:2;     // =0: UniphyAB, =1: UniphyCD  =2: UniphyEF",
          "617:     UCHAR ucLinkSel:1;            // =0: linkA/C/E =1: linkB/D/F",
          "618:     UCHAR ucReserved:1;",
          "619:     UCHAR ucDPLinkRate:1;         // =0: 1.62Ghz, =1: 2.7Ghz",
          "621:     UCHAR ucDPLinkRate:1;         // =0: 1.62Ghz, =1: 2.7Ghz",
          "622:     UCHAR ucReserved:1;",
          "623:     UCHAR ucLinkSel:1;            // =0: linkA/C/E =1: linkB/D/F",
          "624:     UCHAR ucTransmitterSel:2;     // =0: UniphyAB, =1: UniphyCD  =2: UniphyEF",
          "625:     UCHAR ucReserved1:2;",
          "627: }ATOM_DIG_ENCODER_CONFIG_V2;",
          "630: typedef struct _DIG_ENCODER_CONTROL_PARAMETERS_V2",
          "631: {",
          "632:   USHORT usPixelClock;      // in 10KHz; for bios convenient",
          "633:   ATOM_DIG_ENCODER_CONFIG_V2 acConfig;",
          "634:   UCHAR ucAction;",
          "635:   UCHAR ucEncoderMode;",
          "641:   UCHAR ucLaneNum;          // how many lanes to enable",
          "642:   UCHAR ucStatus;           // = DP_LINK_TRAINING_COMPLETE or DP_LINK_TRAINING_INCOMPLETE, only used by VBIOS with command ATOM_ENCODER_CMD_QUERY_DP_LINK_TRAINING_STATUS",
          "643:   UCHAR ucReserved;",
          "644: }DIG_ENCODER_CONTROL_PARAMETERS_V2;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "596: #define ATOM_ENCODER_CONFIG_V2_TRANSMITTER2        0x08",
          "597: #define ATOM_ENCODER_CONFIG_V2_TRANSMITTER3        0x10",
          "614:  };",
          "640: #define ATOM_TRANSMITTER_CONFIG_8LANE_LINK   0x01",
          "641: #define ATOM_TRANSMITTER_CONFIG_COHERENT    0x02",
          "642: #define ATOM_TRANSMITTER_CONFIG_LINK_SEL_MASK  0x04",
          "643: #define ATOM_TRANSMITTER_CONFIG_LINKA      0x00",
          "644: #define ATOM_TRANSMITTER_CONFIG_LINKB      0x04",
          "646: #define ATOM_TRANSMITTER_CONFIG_LINKB_A     0x04",
          "652: #define ATOM_TRANSMITTER_CONFIG_CLKSRC_MASK   0x30",
          "653: #define ATOM_TRANSMITTER_CONFIG_CLKSRC_PPLL   0x00",
          "",
          "[Removed Lines]",
          "604: typedef struct _ATOM_DP_VS_MODE {",
          "605:  UCHAR ucLaneSel;",
          "606:  UCHAR ucLaneSet;",
          "607: } ATOM_DP_VS_MODE;",
          "609: typedef struct _DIG_TRANSMITTER_CONTROL_PARAMETERS {",
          "610:  union {",
          "615:  UCHAR ucConfig;",
          "631:  UCHAR ucReserved[4];",
          "632: } DIG_TRANSMITTER_CONTROL_PARAMETERS;",
          "634: #define DIG_TRANSMITTER_CONTROL_PS_ALLOCATION  DIG_TRANSMITTER_CONTROL_PARAMETERS",
          "637: #define ATOM_TRAMITTER_INITINFO_CONNECTOR_MASK 0x00ff",
          "645: #define ATOM_TRANSMITTER_CONFIG_LINKA_B     0x00",
          "",
          "[Added Lines]",
          "661: #define ATOM_ENCODER_CMD_DP_LINK_TRAINING_START       0x08",
          "662: #define ATOM_ENCODER_CMD_DP_LINK_TRAINING_PATTERN1    0x09",
          "663: #define ATOM_ENCODER_CMD_DP_LINK_TRAINING_PATTERN2    0x0a",
          "664: #define ATOM_ENCODER_CMD_DP_LINK_TRAINING_COMPLETE    0x0b",
          "665: #define ATOM_ENCODER_CMD_DP_VIDEO_OFF                 0x0c",
          "666: #define ATOM_ENCODER_CMD_DP_VIDEO_ON                  0x0d",
          "667: #define ATOM_ENCODER_CMD_QUERY_DP_LINK_TRAINING_STATUS    0x0e",
          "668: #define ATOM_ENCODER_CMD_SETUP                        0x0f",
          "671: #define ATOM_ENCODER_STATUS_LINK_TRAINING_COMPLETE    0x10",
          "672: #define ATOM_ENCODER_STATUS_LINK_TRAINING_INCOMPLETE  0x00",
          "675: typedef struct _ATOM_DIG_ENCODER_CONFIG_V3",
          "676: {",
          "677: #if ATOM_BIG_ENDIAN",
          "678:     UCHAR ucReserved1:1;",
          "679:     UCHAR ucDigSel:3;             // =0: DIGA/B/C/D/E/F",
          "680:     UCHAR ucReserved:3;",
          "681:     UCHAR ucDPLinkRate:1;         // =0: 1.62Ghz, =1: 2.7Ghz",
          "682: #else",
          "683:     UCHAR ucDPLinkRate:1;         // =0: 1.62Ghz, =1: 2.7Ghz",
          "684:     UCHAR ucReserved:3;",
          "685:     UCHAR ucDigSel:3;             // =0: DIGA/B/C/D/E/F",
          "686:     UCHAR ucReserved1:1;",
          "687: #endif",
          "688: }ATOM_DIG_ENCODER_CONFIG_V3;",
          "690: #define ATOM_ENCODER_CONFIG_V3_ENCODER_SEL       0x70",
          "693: typedef struct _DIG_ENCODER_CONTROL_PARAMETERS_V3",
          "694: {",
          "695:   USHORT usPixelClock;      // in 10KHz; for bios convenient",
          "696:   ATOM_DIG_ENCODER_CONFIG_V3 acConfig;",
          "697:   UCHAR ucAction;",
          "698:   UCHAR ucEncoderMode;",
          "705:   UCHAR ucLaneNum;          // how many lanes to enable",
          "706:   UCHAR ucBitPerColor;      // only valid for DP mode when ucAction = ATOM_ENCODER_CMD_SETUP",
          "707:   UCHAR ucReserved;",
          "708: }DIG_ENCODER_CONTROL_PARAMETERS_V3;",
          "712: #define PANEL_BPC_UNDEFINE                               0x00",
          "713: #define PANEL_6BIT_PER_COLOR                             0x01",
          "714: #define PANEL_8BIT_PER_COLOR                             0x02",
          "715: #define PANEL_10BIT_PER_COLOR                            0x03",
          "716: #define PANEL_12BIT_PER_COLOR                            0x04",
          "717: #define PANEL_16BIT_PER_COLOR                            0x05",
          "724: typedef struct _ATOM_DP_VS_MODE",
          "725: {",
          "726:   UCHAR ucLaneSel;",
          "727:   UCHAR ucLaneSet;",
          "728: }ATOM_DP_VS_MODE;",
          "730: typedef struct _DIG_TRANSMITTER_CONTROL_PARAMETERS",
          "731: {",
          "732:  union",
          "733:  {",
          "734:   USHORT usPixelClock;  // in 10KHz; for bios convenient",
          "735:  USHORT usInitInfo;   // when init uniphy,lower 8bit is used for connector type defined in objectid.h",
          "736:   ATOM_DP_VS_MODE asMode; // DP Voltage swing mode",
          "738:   UCHAR ucConfig;",
          "752:  UCHAR ucAction;      // =0: turn off encoder",
          "754:   UCHAR ucReserved[4];",
          "755: }DIG_TRANSMITTER_CONTROL_PARAMETERS;",
          "757: #define DIG_TRANSMITTER_CONTROL_PS_ALLOCATION  DIG_TRANSMITTER_CONTROL_PARAMETERS",
          "760: #define ATOM_TRAMITTER_INITINFO_CONNECTOR_MASK 0x00ff",
          "768: #define ATOM_TRANSMITTER_CONFIG_LINKA_B     0x00",
          "771: #define ATOM_TRANSMITTER_CONFIG_ENCODER_SEL_MASK 0x08   // only used when ATOM_TRANSMITTER_ACTION_ENABLE",
          "772: #define ATOM_TRANSMITTER_CONFIG_DIG1_ENCODER  0x00    // only used when ATOM_TRANSMITTER_ACTION_ENABLE",
          "773: #define ATOM_TRANSMITTER_CONFIG_DIG2_ENCODER  0x08    // only used when ATOM_TRANSMITTER_ACTION_ENABLE",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "674: #define ATOM_TRANSMITTER_ACTION_ENABLE_OUTPUT         9",
          "675: #define ATOM_TRANSMITTER_ACTION_SETUP             10",
          "676: #define ATOM_TRANSMITTER_ACTION_SETUP_VSEMPH           11",
          "680: #if ATOM_BIG_ENDIAN",
          "692: #else",
          "703: #endif",
          "708: #define ATOM_TRANSMITTER_CONFIG_V2_DUAL_LINK_CONNECTOR   0x01",
          "711: #define ATOM_TRANSMITTER_CONFIG_V2_COHERENT              0x02",
          "714: #define ATOM_TRANSMITTER_CONFIG_V2_LINK_SEL_MASK          0x04",
          "716: #define ATOM_TRANSMITTER_CONFIG_V2_LINKB                0x04",
          "719: #define ATOM_TRANSMITTER_CONFIG_V2_ENCODER_SEL_MASK         0x08",
          "724: #define ATOM_TRASMITTER_CONFIG_V2_DP_CONNECTOR           0x10",
          "727: #define ATOM_TRANSMITTER_CONFIG_V2_TRANSMITTER_SEL_MASK     0xC0",
          "737:  };",
          "758: #define DISPLAY_DEVICE_OUTPUT_CONTROL_PS_ALLOCATION DISPLAY_DEVICE_OUTPUT_CONTROL_PARAMETERS",
          "761: #define CRT1_OUTPUT_CONTROL_PS_ALLOCATION  DISPLAY_DEVICE_OUTPUT_CONTROL_PS_ALLOCATION",
          "764: #define CRT2_OUTPUT_CONTROL_PS_ALLOCATION  DISPLAY_DEVICE_OUTPUT_CONTROL_PS_ALLOCATION",
          "766: #define CV1_OUTPUT_CONTROL_PARAMETERS      DISPLAY_DEVICE_OUTPUT_CONTROL_PARAMETERS",
          "",
          "[Removed Lines]",
          "679: typedef struct _ATOM_DIG_TRANSMITTER_CONFIG_V2 {",
          "684:  UCHAR ucReserved:1;",
          "699:  UCHAR ucReserved:1;",
          "704: } ATOM_DIG_TRANSMITTER_CONFIG_V2;",
          "715: #define ATOM_TRANSMITTER_CONFIG_V2_LINKA               0x00",
          "732: typedef struct _DIG_TRANSMITTER_CONTROL_PARAMETERS_V2 {",
          "733:  union {",
          "738:  ATOM_DIG_TRANSMITTER_CONFIG_V2 acConfig;",
          "740:  UCHAR ucReserved[4];",
          "741: } DIG_TRANSMITTER_CONTROL_PARAMETERS_V2;",
          "749: typedef struct _DISPLAY_DEVICE_OUTPUT_CONTROL_PARAMETERS {",
          "756: } DISPLAY_DEVICE_OUTPUT_CONTROL_PARAMETERS;",
          "760: #define CRT1_OUTPUT_CONTROL_PARAMETERS     DISPLAY_DEVICE_OUTPUT_CONTROL_PARAMETERS",
          "763: #define CRT2_OUTPUT_CONTROL_PARAMETERS     DISPLAY_DEVICE_OUTPUT_CONTROL_PARAMETERS",
          "",
          "[Added Lines]",
          "800: #define ATOM_TRANSMITTER_ACTION_POWER_ON               12",
          "801: #define ATOM_TRANSMITTER_ACTION_POWER_OFF              13",
          "804: typedef struct _ATOM_DIG_TRANSMITTER_CONFIG_V2",
          "805: {",
          "807:   UCHAR ucTransmitterSel:2;         //bit7:6: =0 Dig Transmitter 1 ( Uniphy AB )",
          "810:   UCHAR ucReserved:1;",
          "811:   UCHAR fDPConnector:1;             //bit4=0: DP connector  =1: None DP connector",
          "812:   UCHAR ucEncoderSel:1;             //bit3=0: Data/Clk path source from DIGA( DIG inst0 ). =1: Data/clk path source from DIGB ( DIG inst1 )",
          "813:   UCHAR ucLinkSel:1;                //bit2=0: Uniphy LINKA or C or E when fDualLinkConnector=0. when fDualLinkConnector=1, it means master link of dual link is A or C or E",
          "816:   UCHAR fCoherentMode:1;            //bit1=1: Coherent Mode ( for DVI/HDMI mode )",
          "817:   UCHAR fDualLinkConnector:1;       //bit0=1: Dual Link DVI connector",
          "819:   UCHAR fDualLinkConnector:1;       //bit0=1: Dual Link DVI connector",
          "820:   UCHAR fCoherentMode:1;            //bit1=1: Coherent Mode ( for DVI/HDMI mode )",
          "821:   UCHAR ucLinkSel:1;                //bit2=0: Uniphy LINKA or C or E when fDualLinkConnector=0. when fDualLinkConnector=1, it means master link of dual link is A or C or E",
          "823:   UCHAR ucEncoderSel:1;             //bit3=0: Data/Clk path source from DIGA( DIG inst0 ). =1: Data/clk path source from DIGB ( DIG inst1 )",
          "824:   UCHAR fDPConnector:1;             //bit4=0: DP connector  =1: None DP connector",
          "825:   UCHAR ucReserved:1;",
          "826:   UCHAR ucTransmitterSel:2;         //bit7:6: =0 Dig Transmitter 1 ( Uniphy AB )",
          "830: }ATOM_DIG_TRANSMITTER_CONFIG_V2;",
          "841: #define ATOM_TRANSMITTER_CONFIG_V2_LINKA                 0x00",
          "846: #define ATOM_TRANSMITTER_CONFIG_V2_DIG1_ENCODER            0x00    // only used when ucAction == ATOM_TRANSMITTER_ACTION_ENABLE or ATOM_TRANSMITTER_ACTION_SETUP",
          "847: #define ATOM_TRANSMITTER_CONFIG_V2_DIG2_ENCODER            0x08    // only used when ucAction == ATOM_TRANSMITTER_ACTION_ENABLE or ATOM_TRANSMITTER_ACTION_SETUP",
          "854: #define ATOM_TRANSMITTER_CONFIG_V2_TRANSMITTER1            0x00 //AB",
          "855: #define ATOM_TRANSMITTER_CONFIG_V2_TRANSMITTER2            0x40 //CD",
          "856: #define ATOM_TRANSMITTER_CONFIG_V2_TRANSMITTER3            0x80 //EF",
          "858: typedef struct _DIG_TRANSMITTER_CONTROL_PARAMETERS_V2",
          "859: {",
          "860:  union",
          "861:  {",
          "862:   USHORT usPixelClock;  // in 10KHz; for bios convenient",
          "863:  USHORT usInitInfo;   // when init uniphy,lower 8bit is used for connector type defined in objectid.h",
          "864:   ATOM_DP_VS_MODE asMode; // DP Voltage swing mode",
          "866:   ATOM_DIG_TRANSMITTER_CONFIG_V2 acConfig;",
          "867:  UCHAR ucAction;      // define as ATOM_TRANSMITER_ACTION_XXX",
          "868:   UCHAR ucReserved[4];",
          "869: }DIG_TRANSMITTER_CONTROL_PARAMETERS_V2;",
          "871: typedef struct _ATOM_DIG_TRANSMITTER_CONFIG_V3",
          "872: {",
          "873: #if ATOM_BIG_ENDIAN",
          "874:   UCHAR ucTransmitterSel:2;         //bit7:6: =0 Dig Transmitter 1 ( Uniphy AB )",
          "877:   UCHAR ucRefClkSource:2;           //bit5:4: PPLL1 =0, PPLL2=1, EXT_CLK=2",
          "878:   UCHAR ucEncoderSel:1;             //bit3=0: Data/Clk path source from DIGA/C/E. =1: Data/clk path source from DIGB/D/F",
          "879:   UCHAR ucLinkSel:1;                //bit2=0: Uniphy LINKA or C or E when fDualLinkConnector=0. when fDualLinkConnector=1, it means master link of dual link is A or C or E",
          "881:   UCHAR fCoherentMode:1;            //bit1=1: Coherent Mode ( for DVI/HDMI mode )",
          "882:   UCHAR fDualLinkConnector:1;       //bit0=1: Dual Link DVI connector",
          "883: #else",
          "884:   UCHAR fDualLinkConnector:1;       //bit0=1: Dual Link DVI connector",
          "885:   UCHAR fCoherentMode:1;            //bit1=1: Coherent Mode ( for DVI/HDMI mode )",
          "886:   UCHAR ucLinkSel:1;                //bit2=0: Uniphy LINKA or C or E when fDualLinkConnector=0. when fDualLinkConnector=1, it means master link of dual link is A or C or E",
          "888:   UCHAR ucEncoderSel:1;             //bit3=0: Data/Clk path source from DIGA/C/E. =1: Data/clk path source from DIGB/D/F",
          "889:   UCHAR ucRefClkSource:2;           //bit5:4: PPLL1 =0, PPLL2=1, EXT_CLK=2",
          "890:   UCHAR ucTransmitterSel:2;         //bit7:6: =0 Dig Transmitter 1 ( Uniphy AB )",
          "893: #endif",
          "894: }ATOM_DIG_TRANSMITTER_CONFIG_V3;",
          "896: typedef struct _DIG_TRANSMITTER_CONTROL_PARAMETERS_V3",
          "897: {",
          "898:  union",
          "899:  {",
          "900:     USHORT usPixelClock;  // in 10KHz; for bios convenient",
          "901:    USHORT usInitInfo;   // when init uniphy,lower 8bit is used for connector type defined in objectid.h",
          "902:     ATOM_DP_VS_MODE asMode; // DP Voltage swing mode",
          "903:  };",
          "904:   ATOM_DIG_TRANSMITTER_CONFIG_V3 acConfig;",
          "905:  UCHAR ucAction;        // define as ATOM_TRANSMITER_ACTION_XXX",
          "906:   UCHAR ucLaneNum;",
          "907:   UCHAR ucReserved[3];",
          "908: }DIG_TRANSMITTER_CONTROL_PARAMETERS_V3;",
          "912: #define ATOM_TRANSMITTER_CONFIG_V3_DUAL_LINK_CONNECTOR   0x01",
          "915: #define ATOM_TRANSMITTER_CONFIG_V3_COHERENT              0x02",
          "918: #define ATOM_TRANSMITTER_CONFIG_V3_LINK_SEL_MASK          0x04",
          "919: #define ATOM_TRANSMITTER_CONFIG_V3_LINKA                 0x00",
          "920: #define ATOM_TRANSMITTER_CONFIG_V3_LINKB                0x04",
          "923: #define ATOM_TRANSMITTER_CONFIG_V3_ENCODER_SEL_MASK         0x08",
          "924: #define ATOM_TRANSMITTER_CONFIG_V3_DIG1_ENCODER            0x00",
          "925: #define ATOM_TRANSMITTER_CONFIG_V3_DIG2_ENCODER            0x08",
          "928: #define ATOM_TRASMITTER_CONFIG_V3_REFCLK_SEL_MASK          0x30",
          "929: #define ATOM_TRASMITTER_CONFIG_V3_P1PLL                    0x00",
          "930: #define ATOM_TRASMITTER_CONFIG_V3_P2PLL                    0x10",
          "931: #define ATOM_TRASMITTER_CONFIG_V3_REFCLK_SRC_EXT            0x20",
          "934: #define ATOM_TRANSMITTER_CONFIG_V3_TRANSMITTER_SEL_MASK     0xC0",
          "935: #define ATOM_TRANSMITTER_CONFIG_V3_TRANSMITTER1            0x00 //AB",
          "936: #define ATOM_TRANSMITTER_CONFIG_V3_TRANSMITTER2            0x40 //CD",
          "937: #define ATOM_TRANSMITTER_CONFIG_V3_TRANSMITTER3            0x80 //EF",
          "945: typedef struct _DISPLAY_DEVICE_OUTPUT_CONTROL_PARAMETERS",
          "946: {",
          "947:   UCHAR  ucAction;                    // Possible input:ATOM_ENABLE||ATOMDISABLE",
          "952:   UCHAR  aucPadding[3];               // padding to DWORD aligned",
          "953: }DISPLAY_DEVICE_OUTPUT_CONTROL_PARAMETERS;",
          "958: #define CRT1_OUTPUT_CONTROL_PARAMETERS     DISPLAY_DEVICE_OUTPUT_CONTROL_PARAMETERS",
          "961: #define CRT2_OUTPUT_CONTROL_PARAMETERS     DISPLAY_DEVICE_OUTPUT_CONTROL_PARAMETERS",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "782: #define DVO_OUTPUT_CONTROL_PS_ALLOCATION   DIG_TRANSMITTER_CONTROL_PS_ALLOCATION",
          "783: #define DVO_OUTPUT_CONTROL_PARAMETERS_V3  DIG_TRANSMITTER_CONTROL_PARAMETERS",
          "795: #define BLANK_CRTC_PS_ALLOCATION    BLANK_CRTC_PARAMETERS",
          "807: #define ENABLE_CRTC_PS_ALLOCATION   ENABLE_CRTC_PARAMETERS",
          "820: #define SET_CRTC_OVERSCAN_PS_ALLOCATION  SET_CRTC_OVERSCAN_PARAMETERS",
          "831: #define SET_CRTC_REPLICATION_PS_ALLOCATION  SET_CRTC_REPLICATION_PARAMETERS",
          "841: #define SELECT_CRTC_SOURCE_PS_ALLOCATION  SELECT_CRTC_SOURCE_PARAMETERS",
          "890: #define MISC_FORCE_REPROG_PIXEL_CLOCK 0x1",
          "891: #define MISC_DEVICE_INDEX_MASK        0xF0",
          "892: #define MISC_DEVICE_INDEX_SHIFT       4",
          "928: #define PIXEL_CLOCK_MISC_FORCE_PROG_PPLL      0x01",
          "929: #define PIXEL_CLOCK_MISC_VGA_MODE          0x02",
          "930: #define PIXEL_CLOCK_MISC_CRTC_SEL_MASK       0x04",
          "931: #define PIXEL_CLOCK_MISC_CRTC_SEL_CRTC1       0x00",
          "932: #define PIXEL_CLOCK_MISC_CRTC_SEL_CRTC2       0x04",
          "933: #define PIXEL_CLOCK_MISC_USE_ENGINE_FOR_DISPCLK   0x08",
          "947:  };",
          "952: #define PIXEL_CLOCK_PARAMETERS_LAST   PIXEL_CLOCK_PARAMETERS_V2",
          "953: #define GET_PIXEL_CLOCK_PS_ALLOCATION  PIXEL_CLOCK_PARAMETERS_LAST",
          "959:  USHORT usPixelClock;",
          "960:  UCHAR ucTransmitterID;",
          "961:  UCHAR ucEncodeMode;",
          "965:  };",
          "966:  UCHAR ucReserved[3];",
          "969: #define ADJUST_DISPLAY_CONFIG_SS_ENABLE       0x10",
          "971: #define ADJUST_DISPLAY_PLL_PS_ALLOCATION   ADJUST_DISPLAY_PLL_PARAMETERS",
          "981: #define ENABLE_YUV_PS_ALLOCATION ENABLE_YUV_PARAMETERS",
          "988: } GET_MEMORY_CLOCK_PARAMETERS;",
          "989: #define GET_MEMORY_CLOCK_PS_ALLOCATION  GET_MEMORY_CLOCK_PARAMETERS",
          "996: } GET_ENGINE_CLOCK_PARAMETERS;",
          "997: #define GET_ENGINE_CLOCK_PS_ALLOCATION  GET_ENGINE_CLOCK_PARAMETERS",
          "1012: #define READ_EDID_FROM_HW_I2C_DATA_PS_ALLOCATION  READ_EDID_FROM_HW_I2C_DATA_PARAMETERS",
          "1014: #define  ATOM_WRITE_I2C_FORMAT_PSOFFSET_PSDATABYTE                  0",
          "1015: #define  ATOM_WRITE_I2C_FORMAT_PSOFFSET_PSTWODATABYTES              1",
          "1016: #define  ATOM_WRITE_I2C_FORMAT_PSCOUNTER_PSOFFSET_IDDATABLOCK       2",
          "1017: #define  ATOM_WRITE_I2C_FORMAT_PSCOUNTER_IDOFFSET_PLUS_IDDATABLOCK  3",
          "1018: #define  ATOM_WRITE_I2C_FORMAT_IDCOUNTER_IDOFFSET_IDDATABLOCK       4",
          "1035: #define WRITE_ONE_BYTE_HW_I2C_DATA_PS_ALLOCATION  WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS",
          "1044: #define SPEED_FAN_CONTROL_PS_ALLOCATION   WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS",
          "1097: #define ENABLE_SPREAD_SPECTRUM_ON_PPLL_PS_ALLOCATION  ENABLE_SPREAD_SPECTRUM_ON_PPLL",
          "1106: #define ENABLE_VGA_RENDER_PS_ALLOCATION   SET_PIXEL_CLOCK_PS_ALLOCATION",
          "1114: #define MEMORY_TRAINING_PS_ALLOCATION MEMORY_TRAINING_PARAMETERS",
          "1135: #define TMDS1_ENCODER_CONTROL_PARAMETERS    LVDS_ENCODER_CONTROL_PARAMETERS",
          "1136: #define TMDS1_ENCODER_CONTROL_PS_ALLOCATION TMDS1_ENCODER_CONTROL_PARAMETERS",
          "1138: #define TMDS2_ENCODER_CONTROL_PARAMETERS    TMDS1_ENCODER_CONTROL_PARAMETERS",
          "1139: #define TMDS2_ENCODER_CONTROL_PS_ALLOCATION TMDS2_ENCODER_CONTROL_PARAMETERS",
          "1173: #define TMDS1_ENCODER_CONTROL_PARAMETERS_V2    LVDS_ENCODER_CONTROL_PARAMETERS_V2",
          "1174: #define TMDS1_ENCODER_CONTROL_PS_ALLOCATION_V2 TMDS1_ENCODER_CONTROL_PARAMETERS_V2",
          "1176: #define TMDS2_ENCODER_CONTROL_PARAMETERS_V2    TMDS1_ENCODER_CONTROL_PARAMETERS_V2",
          "1177: #define TMDS2_ENCODER_CONTROL_PS_ALLOCATION_V2 TMDS2_ENCODER_CONTROL_PARAMETERS_V2",
          "",
          "[Removed Lines]",
          "788: typedef struct _BLANK_CRTC_PARAMETERS {",
          "791:  USHORT usBlackColorRCr;",
          "792:  USHORT usBlackColorGY;",
          "793:  USHORT usBlackColorBCb;",
          "794: } BLANK_CRTC_PARAMETERS;",
          "802: typedef struct _ENABLE_CRTC_PARAMETERS {",
          "805:  UCHAR ucPadding[2];",
          "806: } ENABLE_CRTC_PARAMETERS;",
          "812: typedef struct _SET_CRTC_OVERSCAN_PARAMETERS {",
          "818:  UCHAR ucPadding[3];",
          "819: } SET_CRTC_OVERSCAN_PARAMETERS;",
          "825: typedef struct _SET_CRTC_REPLICATION_PARAMETERS {",
          "829:  UCHAR ucPadding;",
          "830: } SET_CRTC_REPLICATION_PARAMETERS;",
          "836: typedef struct _SELECT_CRTC_SOURCE_PARAMETERS {",
          "839:  UCHAR ucPadding[2];",
          "840: } SELECT_CRTC_SOURCE_PARAMETERS;",
          "843: typedef struct _SELECT_CRTC_SOURCE_PARAMETERS_V2 {",
          "847:  UCHAR ucPadding;",
          "848: } SELECT_CRTC_SOURCE_PARAMETERS_V2;",
          "875: typedef struct _PIXEL_CLOCK_PARAMETERS {",
          "885:  UCHAR ucPadding;",
          "886: } PIXEL_CLOCK_PARAMETERS;",
          "894: typedef struct _PIXEL_CLOCK_PARAMETERS_V2 {",
          "905: } PIXEL_CLOCK_PARAMETERS_V2;",
          "935: typedef struct _PIXEL_CLOCK_PARAMETERS_V3 {",
          "944:  union {",
          "950: } PIXEL_CLOCK_PARAMETERS_V3;",
          "958: typedef struct _ADJUST_DISPLAY_PLL_PARAMETERS {",
          "962:  union {",
          "967: } ADJUST_DISPLAY_PLL_PARAMETERS;",
          "976: typedef struct _ENABLE_YUV_PARAMETERS {",
          "979:  UCHAR ucPadding[2];",
          "980: } ENABLE_YUV_PARAMETERS;",
          "986: typedef struct _GET_MEMORY_CLOCK_PARAMETERS {",
          "994: typedef struct _GET_ENGINE_CLOCK_PARAMETERS {",
          "1004: typedef struct _READ_EDID_FROM_HW_I2C_DATA_PARAMETERS {",
          "1011: } READ_EDID_FROM_HW_I2C_DATA_PARAMETERS;",
          "1020: typedef struct _WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS {",
          "1033: } WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS;",
          "1037: typedef struct _SET_UP_HW_I2C_DATA_PARAMETERS {",
          "1041: } SET_UP_HW_I2C_DATA_PARAMETERS;",
          "1049: typedef struct _POWER_CONNECTOR_DETECTION_PARAMETERS {",
          "1051:  UCHAR ucPwrBehaviorId;",
          "1053: } POWER_CONNECTOR_DETECTION_PARAMETERS;",
          "1055: typedef struct POWER_CONNECTOR_DETECTION_PS_ALLOCATION {",
          "1057:  UCHAR ucReserved;",
          "1059:  WRITE_ONE_BYTE_HW_I2C_DATA_PS_ALLOCATION sReserved;",
          "1060: } POWER_CONNECTOR_DETECTION_PS_ALLOCATION;",
          "1067: typedef struct _ENABLE_LVDS_SS_PARAMETERS {",
          "1068:  USHORT usSpreadSpectrumPercentage;",
          "1072:  UCHAR ucPadding[3];",
          "1073: } ENABLE_LVDS_SS_PARAMETERS;",
          "1076: typedef struct _ENABLE_LVDS_SS_PARAMETERS_V2 {",
          "1077:  USHORT usSpreadSpectrumPercentage;",
          "1081:  UCHAR ucSpreadSpectrumDelay;",
          "1082:  UCHAR ucSpreadSpectrumRange;",
          "1083:  UCHAR ucPadding;",
          "1084: } ENABLE_LVDS_SS_PARAMETERS_V2;",
          "1087: typedef struct _ENABLE_SPREAD_SPECTRUM_ON_PPLL {",
          "1088:  USHORT usSpreadSpectrumPercentage;",
          "1092:  UCHAR ucSpreadSpectrumDelay;",
          "1093:  UCHAR ucSpreadSpectrumRange;",
          "1095: } ENABLE_SPREAD_SPECTRUM_ON_PPLL;",
          "1101: typedef struct _SET_PIXEL_CLOCK_PS_ALLOCATION {",
          "1102:  PIXEL_CLOCK_PARAMETERS sPCLKInput;",
          "1104: } SET_PIXEL_CLOCK_PS_ALLOCATION;",
          "1111: typedef struct _MEMORY_TRAINING_PARAMETERS {",
          "1113: } MEMORY_TRAINING_PARAMETERS;",
          "1123: typedef struct _LVDS_ENCODER_CONTROL_PARAMETERS {",
          "1131: } LVDS_ENCODER_CONTROL_PARAMETERS;",
          "1133: #define LVDS_ENCODER_CONTROL_PS_ALLOCATION  LVDS_ENCODER_CONTROL_PARAMETERS",
          "1142: typedef struct _LVDS_ENCODER_CONTROL_PARAMETERS_V2 {",
          "1169: } LVDS_ENCODER_CONTROL_PARAMETERS_V2;",
          "1171: #define LVDS_ENCODER_CONTROL_PS_ALLOCATION_V2  LVDS_ENCODER_CONTROL_PARAMETERS_V2",
          "",
          "[Added Lines]",
          "986: typedef struct _BLANK_CRTC_PARAMETERS",
          "987: {",
          "988:   UCHAR  ucCRTC;                     // ATOM_CRTC1 or ATOM_CRTC2",
          "989:   UCHAR  ucBlanking;                  // ATOM_BLANKING or ATOM_BLANKINGOFF",
          "990:   USHORT usBlackColorRCr;",
          "991:   USHORT usBlackColorGY;",
          "992:   USHORT usBlackColorBCb;",
          "993: }BLANK_CRTC_PARAMETERS;",
          "1001: typedef struct _ENABLE_CRTC_PARAMETERS",
          "1002: {",
          "1003:   UCHAR ucCRTC;                       // ATOM_CRTC1 or ATOM_CRTC2",
          "1004:   UCHAR ucEnable;                     // ATOM_ENABLE or ATOM_DISABLE",
          "1005:   UCHAR ucPadding[2];",
          "1006: }ENABLE_CRTC_PARAMETERS;",
          "1012: typedef struct _SET_CRTC_OVERSCAN_PARAMETERS",
          "1013: {",
          "1014:   USHORT usOverscanRight;             // right",
          "1015:   USHORT usOverscanLeft;              // left",
          "1016:   USHORT usOverscanBottom;            // bottom",
          "1017:   USHORT usOverscanTop;               // top",
          "1018:   UCHAR  ucCRTC;                      // ATOM_CRTC1 or ATOM_CRTC2",
          "1019:   UCHAR  ucPadding[3];",
          "1020: }SET_CRTC_OVERSCAN_PARAMETERS;",
          "1026: typedef struct _SET_CRTC_REPLICATION_PARAMETERS",
          "1027: {",
          "1028:   UCHAR ucH_Replication;              // horizontal replication",
          "1029:   UCHAR ucV_Replication;              // vertical replication",
          "1030:   UCHAR usCRTC;                       // ATOM_CRTC1 or ATOM_CRTC2",
          "1031:   UCHAR ucPadding;",
          "1032: }SET_CRTC_REPLICATION_PARAMETERS;",
          "1038: typedef struct _SELECT_CRTC_SOURCE_PARAMETERS",
          "1039: {",
          "1040:   UCHAR ucCRTC;                       // ATOM_CRTC1 or ATOM_CRTC2",
          "1041:   UCHAR ucDevice;                     // ATOM_DEVICE_CRT1|ATOM_DEVICE_CRT2|....",
          "1042:   UCHAR ucPadding[2];",
          "1043: }SELECT_CRTC_SOURCE_PARAMETERS;",
          "1046: typedef struct _SELECT_CRTC_SOURCE_PARAMETERS_V2",
          "1047: {",
          "1048:   UCHAR ucCRTC;                       // ATOM_CRTC1 or ATOM_CRTC2",
          "1049:   UCHAR ucEncoderID;                  // DAC1/DAC2/TVOUT/DIG1/DIG2/DVO",
          "1050:   UCHAR ucEncodeMode;         // Encoding mode, only valid when using DIG1/DIG2/DVO",
          "1051:   UCHAR ucPadding;",
          "1052: }SELECT_CRTC_SOURCE_PARAMETERS_V2;",
          "1079: typedef struct _PIXEL_CLOCK_PARAMETERS",
          "1080: {",
          "1081:   USHORT usPixelClock;                // in 10kHz unit; for bios convenient = (RefClk*FB_Div)/(Ref_Div*Post_Div)",
          "1083:   USHORT usRefDiv;                    // Reference divider",
          "1084:   USHORT usFbDiv;                     // feedback divider",
          "1085:   UCHAR  ucPostDiv;                   // post divider",
          "1086:   UCHAR  ucFracFbDiv;                 // fractional feedback divider",
          "1087:   UCHAR  ucPpll;                      // ATOM_PPLL1 or ATOM_PPL2",
          "1088:   UCHAR  ucRefDivSrc;                 // ATOM_PJITTER or ATO_NONPJITTER",
          "1089:   UCHAR  ucCRTC;                      // Which CRTC uses this Ppll",
          "1090:   UCHAR  ucPadding;",
          "1091: }PIXEL_CLOCK_PARAMETERS;",
          "1099: typedef struct _PIXEL_CLOCK_PARAMETERS_V2",
          "1100: {",
          "1101:   USHORT usPixelClock;                // in 10kHz unit; for bios convenient = (RefClk*FB_Div)/(Ref_Div*Post_Div)",
          "1103:   USHORT usRefDiv;                    // Reference divider",
          "1104:   USHORT usFbDiv;                     // feedback divider",
          "1105:   UCHAR  ucPostDiv;                   // post divider",
          "1106:   UCHAR  ucFracFbDiv;                 // fractional feedback divider",
          "1107:   UCHAR  ucPpll;                      // ATOM_PPLL1 or ATOM_PPL2",
          "1108:   UCHAR  ucRefDivSrc;                 // ATOM_PJITTER or ATO_NONPJITTER",
          "1109:   UCHAR  ucCRTC;                      // Which CRTC uses this Ppll",
          "1110:   UCHAR  ucMiscInfo;                  // Different bits for different purpose, bit [7:4] as device index, bit[0]=Force prog",
          "1111: }PIXEL_CLOCK_PARAMETERS_V2;",
          "1140: #define PIXEL_CLOCK_MISC_REF_DIV_SRC                    0x10",
          "1142: #define PIXEL_CLOCK_V4_MISC_SS_ENABLE               0x10",
          "1143: #define PIXEL_CLOCK_V4_MISC_COHERENT_MODE           0x20",
          "1145: typedef struct _PIXEL_CLOCK_PARAMETERS_V3",
          "1146: {",
          "1147:   USHORT usPixelClock;                // in 10kHz unit; for bios convenient = (RefClk*FB_Div)/(Ref_Div*Post_Div)",
          "1149:   USHORT usRefDiv;                    // Reference divider",
          "1150:   USHORT usFbDiv;                     // feedback divider",
          "1151:   UCHAR  ucPostDiv;                   // post divider",
          "1152:   UCHAR  ucFracFbDiv;                 // fractional feedback divider",
          "1153:   UCHAR  ucPpll;                      // ATOM_PPLL1 or ATOM_PPL2",
          "1154:   UCHAR  ucTransmitterId;             // graphic encoder id defined in objectId.h",
          "1155:  union",
          "1156:  {",
          "1157:   UCHAR  ucEncoderMode;               // encoder type defined as ATOM_ENCODER_MODE_DP/DVI/HDMI/",
          "1158:  UCHAR  ucDVOConfig;         // when use DVO, need to know SDR/DDR, 12bit or 24bit",
          "1160:   UCHAR  ucMiscInfo;                  // bit[0]=Force program, bit[1]= set pclk for VGA, b[2]= CRTC sel",
          "1163: }PIXEL_CLOCK_PARAMETERS_V3;",
          "1168: typedef struct _PIXEL_CLOCK_PARAMETERS_V5",
          "1169: {",
          "1170:   UCHAR  ucCRTC;             // ATOM_CRTC1~6, indicate the CRTC controller to",
          "1172:   union{",
          "1173:   UCHAR  ucReserved;",
          "1174:   UCHAR  ucFracFbDiv;        // [gphan] temporary to prevent build problem.  remove it after driver code is changed.",
          "1175:   };",
          "1176:   USHORT usPixelClock;       // target the pixel clock to drive the CRTC timing",
          "1178:   USHORT usFbDiv;            // feedback divider integer part.",
          "1179:   UCHAR  ucPostDiv;          // post divider.",
          "1180:   UCHAR  ucRefDiv;           // Reference divider",
          "1181:   UCHAR  ucPpll;             // ATOM_PPLL1/ATOM_PPLL2/ATOM_DCPLL",
          "1182:   UCHAR  ucTransmitterID;    // ASIC encoder id defined in objectId.h,",
          "1184:   UCHAR  ucEncoderMode;      // Encoder mode:",
          "1185:   UCHAR  ucMiscInfo;         // bit[0]= Force program PPLL",
          "1193:   ULONG  ulFbDivDecFrac;     // 20 bit feedback divider decimal fraction part, range from 1~999999 ( 0.000001 to 0.999999 )",
          "1195: }PIXEL_CLOCK_PARAMETERS_V5;",
          "1197: #define PIXEL_CLOCK_V5_MISC_FORCE_PROG_PPLL     0x01",
          "1198: #define PIXEL_CLOCK_V5_MISC_VGA_MODE        0x02",
          "1199: #define PIXEL_CLOCK_V5_MISC_HDMI_BPP_MASK           0x0c",
          "1200: #define PIXEL_CLOCK_V5_MISC_HDMI_24BPP              0x00",
          "1201: #define PIXEL_CLOCK_V5_MISC_HDMI_30BPP              0x04",
          "1202: #define PIXEL_CLOCK_V5_MISC_HDMI_32BPP              0x08",
          "1203: #define PIXEL_CLOCK_V5_MISC_REF_DIV_SRC             0x10",
          "1205: typedef struct _GET_DISP_PLL_STATUS_INPUT_PARAMETERS_V2",
          "1206: {",
          "1207:   PIXEL_CLOCK_PARAMETERS_V3 sDispClkInput;",
          "1208: }GET_DISP_PLL_STATUS_INPUT_PARAMETERS_V2;",
          "1210: typedef struct _GET_DISP_PLL_STATUS_OUTPUT_PARAMETERS_V2",
          "1211: {",
          "1212:   UCHAR  ucStatus;",
          "1213:   UCHAR  ucRefDivSrc;                 // =1: reference clock source from XTALIN, =0: source from PCIE ref clock",
          "1214:   UCHAR  ucReserved[2];",
          "1215: }GET_DISP_PLL_STATUS_OUTPUT_PARAMETERS_V2;",
          "1217: typedef struct _GET_DISP_PLL_STATUS_INPUT_PARAMETERS_V3",
          "1218: {",
          "1219:   PIXEL_CLOCK_PARAMETERS_V5 sDispClkInput;",
          "1220: }GET_DISP_PLL_STATUS_INPUT_PARAMETERS_V3;",
          "1225: typedef struct _ADJUST_DISPLAY_PLL_PARAMETERS",
          "1226: {",
          "1230:  union",
          "1231:  {",
          "1232:   UCHAR ucDVOConfig;         //if DVO, need passing link rate and output 12bitlow or 24bit",
          "1233:   UCHAR ucConfig;           //if none DVO, not defined yet",
          "1236: }ADJUST_DISPLAY_PLL_PARAMETERS;",
          "1241: typedef struct _ADJUST_DISPLAY_PLL_INPUT_PARAMETERS_V3",
          "1242: {",
          "1243:  USHORT usPixelClock;                    // target pixel clock",
          "1244:  UCHAR ucTransmitterID;                  // transmitter id defined in objectid.h",
          "1245:  UCHAR ucEncodeMode;                     // encoder mode: CRT, LVDS, DP, TMDS or HDMI",
          "1246:   UCHAR ucDispPllConfig;                 // display pll configure parameter defined as following DISPPLL_CONFIG_XXXX",
          "1247:  UCHAR ucReserved[3];",
          "1248: }ADJUST_DISPLAY_PLL_INPUT_PARAMETERS_V3;",
          "1251: #define DISPPLL_CONFIG_DVO_RATE_SEL                0x0001     // need only when ucTransmitterID = DVO",
          "1252: #define DISPPLL_CONFIG_DVO_DDR_SPEED               0x0000     // need only when ucTransmitterID = DVO",
          "1253: #define DISPPLL_CONFIG_DVO_SDR_SPEED               0x0001     // need only when ucTransmitterID = DVO",
          "1254: #define DISPPLL_CONFIG_DVO_OUTPUT_SEL              0x000c     // need only when ucTransmitterID = DVO",
          "1255: #define DISPPLL_CONFIG_DVO_LOW12BIT                0x0000     // need only when ucTransmitterID = DVO",
          "1256: #define DISPPLL_CONFIG_DVO_UPPER12BIT              0x0004     // need only when ucTransmitterID = DVO",
          "1257: #define DISPPLL_CONFIG_DVO_24BIT                   0x0008     // need only when ucTransmitterID = DVO",
          "1258: #define DISPPLL_CONFIG_SS_ENABLE                   0x0010     // Only used when ucEncoderMode = DP or LVDS",
          "1259: #define DISPPLL_CONFIG_COHERENT_MODE               0x0020     // Only used when ucEncoderMode = TMDS or HDMI",
          "1260: #define DISPPLL_CONFIG_DUAL_LINK                   0x0040     // Only used when ucEncoderMode = TMDS or LVDS",
          "1263: typedef struct _ADJUST_DISPLAY_PLL_OUTPUT_PARAMETERS_V3",
          "1264: {",
          "1265:   ULONG ulDispPllFreq;                 // return display PPLL freq which is used to generate the pixclock, and related idclk, symclk etc",
          "1266:   UCHAR ucRefDiv;                      // if it is none-zero, it is used to be calculated the other ppll parameter fb_divider and post_div ( if it is not given )",
          "1267:   UCHAR ucPostDiv;                     // if it is none-zero, it is used to be calculated the other ppll parameter fb_divider",
          "1268:   UCHAR ucReserved[2];",
          "1269: }ADJUST_DISPLAY_PLL_OUTPUT_PARAMETERS_V3;",
          "1271: typedef struct _ADJUST_DISPLAY_PLL_PS_ALLOCATION_V3",
          "1272: {",
          "1273:   union",
          "1274:   {",
          "1275:     ADJUST_DISPLAY_PLL_INPUT_PARAMETERS_V3  sInput;",
          "1276:     ADJUST_DISPLAY_PLL_OUTPUT_PARAMETERS_V3 sOutput;",
          "1277:   };",
          "1278: } ADJUST_DISPLAY_PLL_PS_ALLOCATION_V3;",
          "1283: typedef struct _ENABLE_YUV_PARAMETERS",
          "1284: {",
          "1285:   UCHAR ucEnable;                     // ATOM_ENABLE:Enable YUV or ATOM_DISABLE:Disable YUV (RGB)",
          "1286:   UCHAR ucCRTC;                       // Which CRTC needs this YUV or RGB format",
          "1287:   UCHAR ucPadding[2];",
          "1288: }ENABLE_YUV_PARAMETERS;",
          "1294: typedef struct _GET_MEMORY_CLOCK_PARAMETERS",
          "1295: {",
          "1296:   ULONG ulReturnMemoryClock;          // current memory speed in 10KHz unit",
          "1303: typedef struct _GET_ENGINE_CLOCK_PARAMETERS",
          "1304: {",
          "1305:   ULONG ulReturnEngineClock;          // current engine speed in 10KHz unit",
          "1314: typedef struct _READ_EDID_FROM_HW_I2C_DATA_PARAMETERS",
          "1315: {",
          "1316:   USHORT    usPrescale;         //Ratio between Engine clock and I2C clock",
          "1317:   USHORT    usVRAMAddress;      //Adress in Frame Buffer where to pace raw EDID",
          "1318:   USHORT    usStatus;           //When use output: lower byte EDID checksum, high byte hardware status",
          "1320:   UCHAR     ucSlaveAddr;        //Read from which slave",
          "1321:   UCHAR     ucLineNumber;       //Read from which HW assisted line",
          "1322: }READ_EDID_FROM_HW_I2C_DATA_PARAMETERS;",
          "1332: typedef struct _WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS",
          "1333: {",
          "1334:   USHORT    usPrescale;         //Ratio between Engine clock and I2C clock",
          "1335:   USHORT    usByteOffset;       //Write to which byte",
          "1342:   UCHAR     ucData;             //PS data1",
          "1343:   UCHAR     ucStatus;           //Status byte 1=success, 2=failure, Also is used as PS data2",
          "1344:   UCHAR     ucSlaveAddr;        //Write to which slave",
          "1345:   UCHAR     ucLineNumber;       //Write from which HW assisted line",
          "1346: }WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS;",
          "1350: typedef struct _SET_UP_HW_I2C_DATA_PARAMETERS",
          "1351: {",
          "1352:   USHORT    usPrescale;         //Ratio between Engine clock and I2C clock",
          "1353:   UCHAR     ucSlaveAddr;        //Write to which slave",
          "1354:   UCHAR     ucLineNumber;       //Write from which HW assisted line",
          "1355: }SET_UP_HW_I2C_DATA_PARAMETERS;",
          "1364: typedef struct _POWER_CONNECTOR_DETECTION_PARAMETERS",
          "1365: {",
          "1366:   UCHAR   ucPowerConnectorStatus;      //Used for return value 0: detected, 1:not detected",
          "1367:  UCHAR   ucPwrBehaviorId;",
          "1368:  USHORT usPwrBudget;         //how much power currently boot to in unit of watt",
          "1369: }POWER_CONNECTOR_DETECTION_PARAMETERS;",
          "1371: typedef struct POWER_CONNECTOR_DETECTION_PS_ALLOCATION",
          "1372: {",
          "1373:   UCHAR   ucPowerConnectorStatus;      //Used for return value 0: detected, 1:not detected",
          "1374:  UCHAR   ucReserved;",
          "1375:  USHORT usPwrBudget;         //how much power currently boot to in unit of watt",
          "1376:   WRITE_ONE_BYTE_HW_I2C_DATA_PS_ALLOCATION    sReserved;",
          "1377: }POWER_CONNECTOR_DETECTION_PS_ALLOCATION;",
          "1384: typedef struct _ENABLE_LVDS_SS_PARAMETERS",
          "1385: {",
          "1386:   USHORT  usSpreadSpectrumPercentage;",
          "1387:   UCHAR   ucSpreadSpectrumType;           //Bit1=0 Down Spread,=1 Center Spread. Bit1=1 Ext. =0 Int. Others:TBD",
          "1388:   UCHAR   ucSpreadSpectrumStepSize_Delay; //bits3:2 SS_STEP_SIZE; bit 6:4 SS_DELAY",
          "1389:   UCHAR   ucEnable;                       //ATOM_ENABLE or ATOM_DISABLE",
          "1390:   UCHAR   ucPadding[3];",
          "1391: }ENABLE_LVDS_SS_PARAMETERS;",
          "1394: typedef struct _ENABLE_LVDS_SS_PARAMETERS_V2",
          "1395: {",
          "1396:   USHORT  usSpreadSpectrumPercentage;",
          "1397:   UCHAR   ucSpreadSpectrumType;           //Bit1=0 Down Spread,=1 Center Spread. Bit1=1 Ext. =0 Int. Others:TBD",
          "1398:   UCHAR   ucSpreadSpectrumStep;           //",
          "1399:   UCHAR   ucEnable;                       //ATOM_ENABLE or ATOM_DISABLE",
          "1400:   UCHAR   ucSpreadSpectrumDelay;",
          "1401:   UCHAR   ucSpreadSpectrumRange;",
          "1402:   UCHAR   ucPadding;",
          "1403: }ENABLE_LVDS_SS_PARAMETERS_V2;",
          "1406: typedef struct _ENABLE_SPREAD_SPECTRUM_ON_PPLL",
          "1407: {",
          "1408:   USHORT  usSpreadSpectrumPercentage;",
          "1409:   UCHAR   ucSpreadSpectrumType;           // Bit1=0 Down Spread,=1 Center Spread. Bit1=1 Ext. =0 Int. Others:TBD",
          "1410:   UCHAR   ucSpreadSpectrumStep;           //",
          "1411:   UCHAR   ucEnable;                       // ATOM_ENABLE or ATOM_DISABLE",
          "1412:   UCHAR   ucSpreadSpectrumDelay;",
          "1413:   UCHAR   ucSpreadSpectrumRange;",
          "1414:   UCHAR   ucPpll;              // ATOM_PPLL1/ATOM_PPLL2",
          "1415: }ENABLE_SPREAD_SPECTRUM_ON_PPLL;",
          "1417: typedef struct _ENABLE_SPREAD_SPECTRUM_ON_PPLL_V2",
          "1418: {",
          "1419:   USHORT  usSpreadSpectrumPercentage;",
          "1420:   UCHAR   ucSpreadSpectrumType;         // Bit[0]: 0-Down Spread,1-Center Spread.",
          "1424:   UCHAR   ucEnable;                     // ATOM_ENABLE or ATOM_DISABLE",
          "1425:   USHORT  usSpreadSpectrumAmount;       // Includes SS_AMOUNT_FBDIV[7:0] and SS_AMOUNT_NFRAC_SLIP[11:8]",
          "1426:   USHORT  usSpreadSpectrumStep;         // SS_STEP_SIZE_DSFRAC",
          "1427: }ENABLE_SPREAD_SPECTRUM_ON_PPLL_V2;",
          "1429: #define ATOM_PPLL_SS_TYPE_V2_DOWN_SPREAD      0x00",
          "1430: #define ATOM_PPLL_SS_TYPE_V2_CENTRE_SPREAD    0x01",
          "1431: #define ATOM_PPLL_SS_TYPE_V2_EXT_SPREAD       0x02",
          "1432: #define ATOM_PPLL_SS_TYPE_V2_PPLL_SEL_MASK    0x0c",
          "1433: #define ATOM_PPLL_SS_TYPE_V2_P1PLL            0x00",
          "1434: #define ATOM_PPLL_SS_TYPE_V2_P2PLL            0x04",
          "1435: #define ATOM_PPLL_SS_TYPE_V2_DCPLL            0x08",
          "1436: #define ATOM_PPLL_SS_AMOUNT_V2_FBDIV_MASK     0x00FF",
          "1437: #define ATOM_PPLL_SS_AMOUNT_V2_FBDIV_SHIFT    0",
          "1438: #define ATOM_PPLL_SS_AMOUNT_V2_NFRAC_MASK     0x0F00",
          "1439: #define ATOM_PPLL_SS_AMOUNT_V2_NFRAC_SHIFT    8",
          "1445: typedef struct _SET_PIXEL_CLOCK_PS_ALLOCATION",
          "1446: {",
          "1447:   PIXEL_CLOCK_PARAMETERS sPCLKInput;",
          "1448:   ENABLE_SPREAD_SPECTRUM_ON_PPLL sReserved;//Caller doesn't need to init this portion",
          "1449: }SET_PIXEL_CLOCK_PS_ALLOCATION;",
          "1456: typedef struct _MEMORY_TRAINING_PARAMETERS",
          "1457: {",
          "1458:   ULONG ulTargetMemoryClock;          //In 10Khz unit",
          "1459: }MEMORY_TRAINING_PARAMETERS;",
          "1471: typedef struct _LVDS_ENCODER_CONTROL_PARAMETERS",
          "1472: {",
          "1473:   USHORT usPixelClock;  // in 10KHz; for bios convenient",
          "1474:   UCHAR  ucMisc;        // bit0=0: Enable single link",
          "1478:   UCHAR  ucAction;      // 0: turn off encoder",
          "1480: }LVDS_ENCODER_CONTROL_PARAMETERS;",
          "1482: #define LVDS_ENCODER_CONTROL_PS_ALLOCATION  LVDS_ENCODER_CONTROL_PARAMETERS",
          "1492: typedef struct _LVDS_ENCODER_CONTROL_PARAMETERS_V2",
          "1493: {",
          "1494:   USHORT usPixelClock;  // in 10KHz; for bios convenient",
          "1495:   UCHAR  ucMisc;        // see PANEL_ENCODER_MISC_xx defintions below",
          "1496:   UCHAR  ucAction;      // 0: turn off encoder",
          "1498:   UCHAR  ucTruncate;    // bit0=0: Disable truncate",
          "1502:   UCHAR  ucSpatial;     // bit0=0: Disable spatial dithering",
          "1506:   UCHAR  ucTemporal;    // bit0=0: Disable temporal dithering",
          "1512:   UCHAR  ucFRC;         // bit4=0: 25FRC_SEL pattern E",
          "1520: }LVDS_ENCODER_CONTROL_PARAMETERS_V2;",
          "1522: #define LVDS_ENCODER_CONTROL_PS_ALLOCATION_V2  LVDS_ENCODER_CONTROL_PARAMETERS_V2",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1185: #define TMDS2_ENCODER_CONTROL_PARAMETERS_V3    LVDS_ENCODER_CONTROL_PARAMETERS_V3",
          "1186: #define TMDS2_ENCODER_CONTROL_PS_ALLOCATION_V3 TMDS2_ENCODER_CONTROL_PARAMETERS_V3",
          "1202: #define ENABLE_EXTERNAL_TMDS_ENCODER_PARAMETERS_V2  LVDS_ENCODER_CONTROL_PARAMETERS_V2",
          "1220: #define DVO_ENCODER_CONFIG_RATE_SEL       0x01",
          "1221: #define DVO_ENCODER_CONFIG_DDR_SPEED      0x00",
          "1222: #define DVO_ENCODER_CONFIG_SDR_SPEED      0x01",
          "",
          "[Removed Lines]",
          "1191: typedef struct _ENABLE_EXTERNAL_TMDS_ENCODER_PARAMETERS {",
          "1194:  UCHAR ucPadding[2];",
          "1195: } ENABLE_EXTERNAL_TMDS_ENCODER_PARAMETERS;",
          "1197: typedef struct _ENABLE_EXTERNAL_TMDS_ENCODER_PS_ALLOCATION {",
          "1198:  ENABLE_EXTERNAL_TMDS_ENCODER_PARAMETERS sXTmdsEncoder;",
          "1200: } ENABLE_EXTERNAL_TMDS_ENCODER_PS_ALLOCATION;",
          "1204: typedef struct _ENABLE_EXTERNAL_TMDS_ENCODER_PS_ALLOCATION_V2 {",
          "1205:  ENABLE_EXTERNAL_TMDS_ENCODER_PARAMETERS_V2 sXTmdsEncoder;",
          "1207: } ENABLE_EXTERNAL_TMDS_ENCODER_PS_ALLOCATION_V2;",
          "1209: typedef struct _EXTERNAL_ENCODER_CONTROL_PS_ALLOCATION {",
          "1210:  DIG_ENCODER_CONTROL_PARAMETERS sDigEncoder;",
          "1211:  WRITE_ONE_BYTE_HW_I2C_DATA_PS_ALLOCATION sReserved;",
          "1212: } EXTERNAL_ENCODER_CONTROL_PS_ALLOCATION;",
          "",
          "[Added Lines]",
          "1542: typedef struct _ENABLE_EXTERNAL_TMDS_ENCODER_PARAMETERS",
          "1543: {",
          "1544:   UCHAR    ucEnable;            // Enable or Disable External TMDS encoder",
          "1545:   UCHAR    ucMisc;              // Bit0=0:Enable Single link;=1:Enable Dual link;Bit1 {=0:666RGB, =1:888RGB}",
          "1546:   UCHAR    ucPadding[2];",
          "1547: }ENABLE_EXTERNAL_TMDS_ENCODER_PARAMETERS;",
          "1549: typedef struct _ENABLE_EXTERNAL_TMDS_ENCODER_PS_ALLOCATION",
          "1550: {",
          "1551:   ENABLE_EXTERNAL_TMDS_ENCODER_PARAMETERS    sXTmdsEncoder;",
          "1552:   WRITE_ONE_BYTE_HW_I2C_DATA_PS_ALLOCATION   sReserved;     //Caller doesn't need to init this portion",
          "1553: }ENABLE_EXTERNAL_TMDS_ENCODER_PS_ALLOCATION;",
          "1557: typedef struct _ENABLE_EXTERNAL_TMDS_ENCODER_PS_ALLOCATION_V2",
          "1558: {",
          "1559:   ENABLE_EXTERNAL_TMDS_ENCODER_PARAMETERS_V2    sXTmdsEncoder;",
          "1560:   WRITE_ONE_BYTE_HW_I2C_DATA_PS_ALLOCATION      sReserved;     //Caller doesn't need to init this portion",
          "1561: }ENABLE_EXTERNAL_TMDS_ENCODER_PS_ALLOCATION_V2;",
          "1563: typedef struct _EXTERNAL_ENCODER_CONTROL_PS_ALLOCATION",
          "1564: {",
          "1565:   DIG_ENCODER_CONTROL_PARAMETERS            sDigEncoder;",
          "1566:   WRITE_ONE_BYTE_HW_I2C_DATA_PS_ALLOCATION sReserved;",
          "1567: }EXTERNAL_ENCODER_CONTROL_PS_ALLOCATION;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1225: #define DVO_ENCODER_CONFIG_UPPER12BIT      0x04",
          "1226: #define DVO_ENCODER_CONFIG_24BIT        0x08",
          "1234: #define DVO_ENCODER_CONTROL_PS_ALLOCATION_V3 DVO_ENCODER_CONTROL_PARAMETERS_V3",
          "1243: #define LVDS_ENCODER_CONTROL_PARAMETERS_LAST     LVDS_ENCODER_CONTROL_PARAMETERS_V3",
          "1244: #define LVDS_ENCODER_CONTROL_PS_ALLOCATION_LAST  LVDS_ENCODER_CONTROL_PARAMETERS_LAST",
          "",
          "[Removed Lines]",
          "1228: typedef struct _DVO_ENCODER_CONTROL_PARAMETERS_V3 {",
          "1229:  USHORT usPixelClock;",
          "1230:  UCHAR ucDVOConfig;",
          "1232:  UCHAR ucReseved[4];",
          "1233: } DVO_ENCODER_CONTROL_PARAMETERS_V3;",
          "",
          "[Added Lines]",
          "1583: typedef struct _DVO_ENCODER_CONTROL_PARAMETERS_V3",
          "1584: {",
          "1585:   USHORT usPixelClock;",
          "1586:   UCHAR  ucDVOConfig;",
          "1587:   UCHAR  ucAction;              //ATOM_ENABLE/ATOM_DISABLE/ATOM_HPD_INIT",
          "1588:   UCHAR  ucReseved[4];",
          "1589: }DVO_ENCODER_CONTROL_PARAMETERS_V3;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1281: #define PANEL_ENCODER_75FRC_E                  0x00",
          "1282: #define PANEL_ENCODER_75FRC_F                  0x80",
          "1287: #define SET_VOLTAGE_TYPE_ASIC_VDDC             1",
          "1288: #define SET_VOLTAGE_TYPE_ASIC_MVDDC            2",
          "1289: #define SET_VOLTAGE_TYPE_ASIC_MVDDQ            3",
          "1290: #define SET_VOLTAGE_TYPE_ASIC_VDDCI            4",
          "1291: #define SET_VOLTAGE_INIT_MODE                  5",
          "1294: #define SET_ASIC_VOLTAGE_MODE_ALL_SOURCE       0x1",
          "1295: #define SET_ASIC_VOLTAGE_MODE_SOURCE_A         0x2",
          "1296: #define SET_ASIC_VOLTAGE_MODE_SOURCE_B         0x4",
          "1298: #define SET_ASIC_VOLTAGE_MODE_SET_VOLTAGE      0x0",
          "1300: #define SET_ASIC_VOLTAGE_MODE_GET_GPIOMASK     0x2",
          "1432: #define ATOM_BIOS_INFO_ATOM_FIRMWARE_POSTED         0x0001",
          "1433: #define ATOM_BIOS_INFO_DUAL_CRTC_SUPPORT            0x0002",
          "1434: #define ATOM_BIOS_INFO_EXTENDED_DESKTOP_SUPPORT     0x0004",
          "1437: #define ATOM_BIOS_INFO_BL_CONTROLLED_BY_GPU         0x0020",
          "1438: #define ATOM_BIOS_INFO_WMI_SUPPORT                  0x0040",
          "1439: #define ATOM_BIOS_INFO_PPMODE_ASSIGNGED_BY_SYSTEM   0x0080",
          "",
          "[Removed Lines]",
          "1299: #define SET_ASIC_VOLTAGE_MODE_GET_GPIOVAL      0x1",
          "1302: typedef struct _SET_VOLTAGE_PARAMETERS {",
          "1306:  UCHAR ucReserved;",
          "1307: } SET_VOLTAGE_PARAMETERS;",
          "1309: typedef struct _SET_VOLTAGE_PARAMETERS_V2 {",
          "1313: } SET_VOLTAGE_PARAMETERS_V2;",
          "1315: typedef struct _SET_VOLTAGE_PS_ALLOCATION {",
          "1316:  SET_VOLTAGE_PARAMETERS sASICSetVoltage;",
          "1317:  WRITE_ONE_BYTE_HW_I2C_DATA_PS_ALLOCATION sReserved;",
          "1318: } SET_VOLTAGE_PS_ALLOCATION;",
          "1323: typedef struct _TV_ENCODER_CONTROL_PARAMETERS {",
          "1328: } TV_ENCODER_CONTROL_PARAMETERS;",
          "1330: typedef struct _TV_ENCODER_CONTROL_PS_ALLOCATION {",
          "1331:  TV_ENCODER_CONTROL_PARAMETERS sTVEncoder;",
          "1333: } TV_ENCODER_CONTROL_PS_ALLOCATION;",
          "1337: #ifdef UEFI_BUILD",
          "1338: #define UTEMP USHORT",
          "1339: #define USHORT void*",
          "1340: #endif",
          "1345: typedef struct _ATOM_MASTER_LIST_OF_DATA_TABLES {",
          "1380: } ATOM_MASTER_LIST_OF_DATA_TABLES;",
          "1382: #ifdef UEFI_BUILD",
          "1383: #define USHORT UTEMP",
          "1384: #endif",
          "1386: typedef struct _ATOM_MASTER_DATA_TABLE {",
          "1387:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "1388:  ATOM_MASTER_LIST_OF_DATA_TABLES ListOfDataTables;",
          "1389: } ATOM_MASTER_DATA_TABLE;",
          "1394: typedef struct _ATOM_MULTIMEDIA_CAPABILITY_INFO {",
          "1395:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "1401: } ATOM_MULTIMEDIA_CAPABILITY_INFO;",
          "1406: typedef struct _ATOM_MULTIMEDIA_CONFIG_INFO {",
          "1407:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "1421: } ATOM_MULTIMEDIA_CONFIG_INFO;",
          "1435: #define ATOM_BIOS_INFO_MEMORY_CLOCK_SS_SUPPORT      0x0008",
          "1436: #define ATOM_BIOS_INFO_ENGINE_CLOCK_SS_SUPPORT      0x0010",
          "",
          "[Added Lines]",
          "1648: #define SET_VOLTAGE_GET_MAX_VOLTAGE            6     //Gets the Max. voltage for the soldered Asic",
          "1655: #define SET_ASIC_VOLTAGE_MODE_GET_GPIOVAL      0x1",
          "1658: typedef struct _SET_VOLTAGE_PARAMETERS",
          "1659: {",
          "1660:   UCHAR    ucVoltageType;               // To tell which voltage to set up, VDDC/MVDDC/MVDDQ",
          "1661:   UCHAR    ucVoltageMode;               // To set all, to set source A or source B or ...",
          "1662:   UCHAR    ucVoltageIndex;              // An index to tell which voltage level",
          "1663:   UCHAR    ucReserved;",
          "1664: }SET_VOLTAGE_PARAMETERS;",
          "1666: typedef struct _SET_VOLTAGE_PARAMETERS_V2",
          "1667: {",
          "1668:   UCHAR    ucVoltageType;               // To tell which voltage to set up, VDDC/MVDDC/MVDDQ",
          "1669:   UCHAR    ucVoltageMode;               // Not used, maybe use for state machine for differen power mode",
          "1670:   USHORT   usVoltageLevel;              // real voltage level",
          "1671: }SET_VOLTAGE_PARAMETERS_V2;",
          "1673: typedef struct _SET_VOLTAGE_PS_ALLOCATION",
          "1674: {",
          "1675:   SET_VOLTAGE_PARAMETERS sASICSetVoltage;",
          "1676:   WRITE_ONE_BYTE_HW_I2C_DATA_PS_ALLOCATION sReserved;",
          "1677: }SET_VOLTAGE_PS_ALLOCATION;",
          "1682: typedef struct _TV_ENCODER_CONTROL_PARAMETERS",
          "1683: {",
          "1684:   USHORT usPixelClock;                // in 10KHz; for bios convenient",
          "1685:   UCHAR  ucTvStandard;                // See definition \"ATOM_TV_NTSC ...\"",
          "1686:   UCHAR  ucAction;                    // 0: turn off encoder",
          "1688: }TV_ENCODER_CONTROL_PARAMETERS;",
          "1690: typedef struct _TV_ENCODER_CONTROL_PS_ALLOCATION",
          "1691: {",
          "1692:   TV_ENCODER_CONTROL_PARAMETERS sTVEncoder;",
          "1693:   WRITE_ONE_BYTE_HW_I2C_DATA_PS_ALLOCATION    sReserved; // Don't set this one",
          "1694: }TV_ENCODER_CONTROL_PS_ALLOCATION;",
          "1701: typedef struct _ATOM_MASTER_LIST_OF_DATA_TABLES",
          "1702: {",
          "1703:   USHORT        UtilityPipeLine;         // Offest for the utility to get parser info,Don't change this position!",
          "1704:   USHORT        MultimediaCapabilityInfo; // Only used by MM Lib,latest version 1.1, not configuable from Bios, need to include the table to build Bios",
          "1705:   USHORT        MultimediaConfigInfo;     // Only used by MM Lib,latest version 2.1, not configuable from Bios, need to include the table to build Bios",
          "1706:   USHORT        StandardVESA_Timing;      // Only used by Bios",
          "1707:   USHORT        FirmwareInfo;             // Shared by various SW components,latest version 1.4",
          "1708:   USHORT        DAC_Info;                 // Will be obsolete from R600",
          "1709:   USHORT        LVDS_Info;                // Shared by various SW components,latest version 1.1",
          "1710:   USHORT        TMDS_Info;                // Will be obsolete from R600",
          "1711:   USHORT        AnalogTV_Info;            // Shared by various SW components,latest version 1.1",
          "1712:   USHORT        SupportedDevicesInfo;     // Will be obsolete from R600",
          "1713:   USHORT        GPIO_I2C_Info;            // Shared by various SW components,latest version 1.2 will be used from R600",
          "1714:   USHORT        VRAM_UsageByFirmware;     // Shared by various SW components,latest version 1.3 will be used from R600",
          "1715:   USHORT        GPIO_Pin_LUT;             // Shared by various SW components,latest version 1.1",
          "1716:   USHORT        VESA_ToInternalModeLUT;   // Only used by Bios",
          "1717:   USHORT        ComponentVideoInfo;       // Shared by various SW components,latest version 2.1 will be used from R600",
          "1718:   USHORT        PowerPlayInfo;            // Shared by various SW components,latest version 2.1,new design from R600",
          "1719:   USHORT        CompassionateData;        // Will be obsolete from R600",
          "1720:   USHORT        SaveRestoreInfo;          // Only used by Bios",
          "1721:   USHORT        PPLL_SS_Info;             // Shared by various SW components,latest version 1.2, used to call SS_Info, change to new name because of int ASIC SS info",
          "1722:   USHORT        OemInfo;                  // Defined and used by external SW, should be obsolete soon",
          "1723:   USHORT        XTMDS_Info;               // Will be obsolete from R600",
          "1724:   USHORT        MclkSS_Info;              // Shared by various SW components,latest version 1.1, only enabled when ext SS chip is used",
          "1725:   USHORT        Object_Header;            // Shared by various SW components,latest version 1.1",
          "1726:   USHORT        IndirectIOAccess;         // Only used by Bios,this table position can't change at all!!",
          "1727:   USHORT        MC_InitParameter;         // Only used by command table",
          "1728:   USHORT        ASIC_VDDC_Info;      // Will be obsolete from R600",
          "1729:   USHORT        ASIC_InternalSS_Info;   // New tabel name from R600, used to be called \"ASIC_MVDDC_Info\"",
          "1730:   USHORT        TV_VideoMode;       // Only used by command table",
          "1731:   USHORT        VRAM_Info;        // Only used by command table, latest version 1.3",
          "1732:   USHORT        MemoryTrainingInfo;    // Used for VBIOS and Diag utility for memory training purpose since R600. the new table rev start from 2.1",
          "1733:   USHORT        IntegratedSystemInfo;   // Shared by various SW components",
          "1734:   USHORT        ASIC_ProfilingInfo;    // New table name from R600, used to be called \"ASIC_VDDCI_Info\" for pre-R600",
          "1735:   USHORT        VoltageObjectInfo;    // Shared by various SW components, latest version 1.1",
          "1736:  USHORT    PowerSourceInfo;     // Shared by various SW components, latest versoin 1.1",
          "1737: }ATOM_MASTER_LIST_OF_DATA_TABLES;",
          "1739: typedef struct _ATOM_MASTER_DATA_TABLE",
          "1740: {",
          "1741:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "1742:   ATOM_MASTER_LIST_OF_DATA_TABLES   ListOfDataTables;",
          "1743: }ATOM_MASTER_DATA_TABLE;",
          "1748: typedef struct _ATOM_MULTIMEDIA_CAPABILITY_INFO",
          "1749: {",
          "1750:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "1751:   ULONG                    ulSignature;      // HW info table signature string \"$ATI\"",
          "1752:   UCHAR                    ucI2C_Type;       // I2C type (normal GP_IO, ImpactTV GP_IO, Dedicated I2C pin, etc)",
          "1753:   UCHAR                    ucTV_OutInfo;     // Type of TV out supported (3:0) and video out crystal frequency (6:4) and TV data port (7)",
          "1754:   UCHAR                    ucVideoPortInfo;  // Provides the video port capabilities",
          "1755:   UCHAR                    ucHostPortInfo;   // Provides host port configuration information",
          "1756: }ATOM_MULTIMEDIA_CAPABILITY_INFO;",
          "1761: typedef struct _ATOM_MULTIMEDIA_CONFIG_INFO",
          "1762: {",
          "1763:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "1764:   ULONG                    ulSignature;      // MM info table signature sting \"$MMT\"",
          "1765:   UCHAR                    ucTunerInfo;      // Type of tuner installed on the adapter (4:0) and video input for tuner (7:5)",
          "1766:   UCHAR                    ucAudioChipInfo;  // List the audio chip type (3:0) product type (4) and OEM revision (7:5)",
          "1767:   UCHAR                    ucProductID;      // Defines as OEM ID or ATI board ID dependent on product type setting",
          "1768:   UCHAR                    ucMiscInfo1;      // Tuner voltage (1:0) HW teletext support (3:2) FM audio decoder (5:4) reserved (6) audio scrambling (7)",
          "1769:   UCHAR                    ucMiscInfo2;      // I2S input config (0) I2S output config (1) I2S Audio Chip (4:2) SPDIF Output Config (5) reserved (7:6)",
          "1770:   UCHAR                    ucMiscInfo3;      // Video Decoder Type (3:0) Video In Standard/Crystal (7:4)",
          "1771:   UCHAR                    ucMiscInfo4;      // Video Decoder Host Config (2:0) reserved (7:3)",
          "1772:   UCHAR                    ucVideoInput0Info;// Video Input 0 Type (1:0) F/B setting (2) physical connector ID (5:3) reserved (7:6)",
          "1773:   UCHAR                    ucVideoInput1Info;// Video Input 1 Type (1:0) F/B setting (2) physical connector ID (5:3) reserved (7:6)",
          "1774:   UCHAR                    ucVideoInput2Info;// Video Input 2 Type (1:0) F/B setting (2) physical connector ID (5:3) reserved (7:6)",
          "1775:   UCHAR                    ucVideoInput3Info;// Video Input 3 Type (1:0) F/B setting (2) physical connector ID (5:3) reserved (7:6)",
          "1776:   UCHAR                    ucVideoInput4Info;// Video Input 4 Type (1:0) F/B setting (2) physical connector ID (5:3) reserved (7:6)",
          "1777: }ATOM_MULTIMEDIA_CONFIG_INFO;",
          "1791: #define ATOM_BIOS_INFO_MEMORY_CLOCK_SS_SUPPORT      0x0008  // (valid from v1.1 ~v1.4):=1: memclk SS enable, =0 memclk SS disable.",
          "1792: #define ATOM_BIOS_INFO_ENGINE_CLOCK_SS_SUPPORT      0x0010  // (valid from v1.1 ~v1.4):=1: engclk SS enable, =0 engclk SS disable.",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1441: #define ATOM_BIOS_INFO_HYPERMEMORY_SIZE_MASK        0x1E00",
          "1442: #define ATOM_BIOS_INFO_VPOST_WITHOUT_FIRST_MODE_SET 0x2000",
          "1443: #define ATOM_BIOS_INFO_BIOS_SCRATCH6_SCL2_REDEFINE  0x4000",
          "1445: #ifndef _H2INC",
          "1449: #if ATOM_BIG_ENDIAN",
          "1461: #else",
          "1473: #endif",
          "1481: #else",
          "1487: #endif",
          "1635: #define IGP_CAP_FLAG_DYNAMIC_CLOCK_EN      0x2",
          "1636: #define IGP_CAP_FLAG_AC_CARD               0x4",
          "1637: #define IGP_CAP_FLAG_SDVO_CARD             0x8",
          "1638: #define IGP_CAP_FLAG_POSTDIV_BY_2_MODE     0x10",
          "1673:                         For AMD IGP,it's 0 if no SidePort memory installed or it's the boot-up SidePort memory clock",
          "1674: ulMaxSystemMemoryClock: For Intel IGP,it's the Max freq from memory SPD if memory runs in ASYNC mode or otherwise (SYNC mode) it's 0",
          "1675:                         For AMD IGP,for now this can be 0",
          "1677:                         For AMD IGP,for now this can be 0",
          "1680:                         For AMD IGP,it's HT Link Speed",
          "1682: usK8MemoryClock:        For AMD IGP only. For RevF CPU, set it to 200",
          "",
          "[Removed Lines]",
          "1448: typedef struct _ATOM_FIRMWARE_CAPABILITY {",
          "1450:  USHORT Reserved:3;",
          "1451:  USHORT HyperMemory_Size:4;",
          "1452:  USHORT HyperMemory_Support:1;",
          "1453:  USHORT PPMode_Assigned:1;",
          "1454:  USHORT WMI_SUPPORT:1;",
          "1455:  USHORT GPUControlsBL:1;",
          "1456:  USHORT EngineClockSS_Support:1;",
          "1457:  USHORT MemoryClockSS_Support:1;",
          "1458:  USHORT ExtendedDesktopSupport:1;",
          "1459:  USHORT DualCRTC_Support:1;",
          "1460:  USHORT FirmwarePosted:1;",
          "1462:  USHORT FirmwarePosted:1;",
          "1463:  USHORT DualCRTC_Support:1;",
          "1464:  USHORT ExtendedDesktopSupport:1;",
          "1465:  USHORT MemoryClockSS_Support:1;",
          "1466:  USHORT EngineClockSS_Support:1;",
          "1467:  USHORT GPUControlsBL:1;",
          "1468:  USHORT WMI_SUPPORT:1;",
          "1469:  USHORT PPMode_Assigned:1;",
          "1470:  USHORT HyperMemory_Support:1;",
          "1471:  USHORT HyperMemory_Size:4;",
          "1472:  USHORT Reserved:3;",
          "1474: } ATOM_FIRMWARE_CAPABILITY;",
          "1476: typedef union _ATOM_FIRMWARE_CAPABILITY_ACCESS {",
          "1477:  ATOM_FIRMWARE_CAPABILITY sbfAccess;",
          "1478:  USHORT susAccess;",
          "1479: } ATOM_FIRMWARE_CAPABILITY_ACCESS;",
          "1483: typedef union _ATOM_FIRMWARE_CAPABILITY_ACCESS {",
          "1484:  USHORT susAccess;",
          "1485: } ATOM_FIRMWARE_CAPABILITY_ACCESS;",
          "1489: typedef struct _ATOM_FIRMWARE_INFO {",
          "1490:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "1491:  ULONG ulFirmwareRevision;",
          "1501:  UCHAR ucASICMaxTemperature;",
          "1514:  ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;",
          "1520: } ATOM_FIRMWARE_INFO;",
          "1522: typedef struct _ATOM_FIRMWARE_INFO_V1_2 {",
          "1523:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "1524:  ULONG ulFirmwareRevision;",
          "1534:  UCHAR ucASICMaxTemperature;",
          "1535:  UCHAR ucMinAllowedBL_Level;",
          "1549:  ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;",
          "1555: } ATOM_FIRMWARE_INFO_V1_2;",
          "1557: typedef struct _ATOM_FIRMWARE_INFO_V1_3 {",
          "1558:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "1559:  ULONG ulFirmwareRevision;",
          "1569:  UCHAR ucASICMaxTemperature;",
          "1570:  UCHAR ucMinAllowedBL_Level;",
          "1585:  ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;",
          "1591: } ATOM_FIRMWARE_INFO_V1_3;",
          "1593: typedef struct _ATOM_FIRMWARE_INFO_V1_4 {",
          "1594:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "1595:  ULONG ulFirmwareRevision;",
          "1605:  UCHAR ucASICMaxTemperature;",
          "1606:  UCHAR ucMinAllowedBL_Level;",
          "1622:  ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;",
          "1628: } ATOM_FIRMWARE_INFO_V1_4;",
          "1630: #define ATOM_FIRMWARE_INFO_LAST  ATOM_FIRMWARE_INFO_V1_4",
          "1640: typedef struct _ATOM_INTEGRATED_SYSTEM_INFO {",
          "1641:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "1646:  UCHAR ucNumberOfCyclesInPeriodHi;",
          "1648:  USHORT usReserved1;",
          "1651:  ULONG ulReserved[2];",
          "1661:  UCHAR ucMaxNBVoltage;",
          "1662:  UCHAR ucMinNBVoltage;",
          "1667:  UCHAR ucMaxNBVoltageHigh;",
          "1668:  UCHAR ucMinNBVoltageHigh;",
          "1669: } ATOM_INTEGRATED_SYSTEM_INFO;",
          "1672: ulBootUpMemoryClock:    For Intel IGP,it's the UMA system memory clock",
          "1676: ulMinSystemMemoryClock: For Intel IGP,it's 133MHz if memory runs in ASYNC mode or otherwise (SYNC mode) it's 0",
          "1679: usFSBClock:             For Intel IGP,it's FSB Freq",
          "",
          "[Added Lines]",
          "1800: #define ATOM_BIOS_INFO_MEMORY_CLOCK_EXT_SS_SUPPORT  0x0008  // (valid from v2.1 ): =1: memclk ss enable with external ss chip",
          "1801: #define ATOM_BIOS_INFO_ENGINE_CLOCK_EXT_SS_SUPPORT  0x0010  // (valid from v2.1 ): =1: engclk ss enable with external ss chip",
          "1806: typedef struct _ATOM_FIRMWARE_CAPABILITY",
          "1807: {",
          "1809:   USHORT Reserved:3;",
          "1810:   USHORT HyperMemory_Size:4;",
          "1811:   USHORT HyperMemory_Support:1;",
          "1812:   USHORT PPMode_Assigned:1;",
          "1813:   USHORT WMI_SUPPORT:1;",
          "1814:   USHORT GPUControlsBL:1;",
          "1815:   USHORT EngineClockSS_Support:1;",
          "1816:   USHORT MemoryClockSS_Support:1;",
          "1817:   USHORT ExtendedDesktopSupport:1;",
          "1818:   USHORT DualCRTC_Support:1;",
          "1819:   USHORT FirmwarePosted:1;",
          "1821:   USHORT FirmwarePosted:1;",
          "1822:   USHORT DualCRTC_Support:1;",
          "1823:   USHORT ExtendedDesktopSupport:1;",
          "1824:   USHORT MemoryClockSS_Support:1;",
          "1825:   USHORT EngineClockSS_Support:1;",
          "1826:   USHORT GPUControlsBL:1;",
          "1827:   USHORT WMI_SUPPORT:1;",
          "1828:   USHORT PPMode_Assigned:1;",
          "1829:   USHORT HyperMemory_Support:1;",
          "1830:   USHORT HyperMemory_Size:4;",
          "1831:   USHORT Reserved:3;",
          "1833: }ATOM_FIRMWARE_CAPABILITY;",
          "1835: typedef union _ATOM_FIRMWARE_CAPABILITY_ACCESS",
          "1836: {",
          "1837:   ATOM_FIRMWARE_CAPABILITY sbfAccess;",
          "1838:   USHORT                   susAccess;",
          "1839: }ATOM_FIRMWARE_CAPABILITY_ACCESS;",
          "1843: typedef union _ATOM_FIRMWARE_CAPABILITY_ACCESS",
          "1844: {",
          "1845:   USHORT                   susAccess;",
          "1846: }ATOM_FIRMWARE_CAPABILITY_ACCESS;",
          "1850: typedef struct _ATOM_FIRMWARE_INFO",
          "1851: {",
          "1852:   ATOM_COMMON_TABLE_HEADER        sHeader;",
          "1853:   ULONG                           ulFirmwareRevision;",
          "1854:   ULONG                           ulDefaultEngineClock;       //In 10Khz unit",
          "1855:   ULONG                           ulDefaultMemoryClock;       //In 10Khz unit",
          "1856:   ULONG                           ulDriverTargetEngineClock;  //In 10Khz unit",
          "1857:   ULONG                           ulDriverTargetMemoryClock;  //In 10Khz unit",
          "1858:   ULONG                           ulMaxEngineClockPLL_Output; //In 10Khz unit",
          "1859:   ULONG                           ulMaxMemoryClockPLL_Output; //In 10Khz unit",
          "1860:   ULONG                           ulMaxPixelClockPLL_Output;  //In 10Khz unit",
          "1861:   ULONG                           ulASICMaxEngineClock;       //In 10Khz unit",
          "1862:   ULONG                           ulASICMaxMemoryClock;       //In 10Khz unit",
          "1863:   UCHAR                           ucASICMaxTemperature;",
          "1864:   UCHAR                           ucPadding[3];               //Don't use them",
          "1865:   ULONG                           aulReservedForBIOS[3];      //Don't use them",
          "1866:   USHORT                          usMinEngineClockPLL_Input;  //In 10Khz unit",
          "1867:   USHORT                          usMaxEngineClockPLL_Input;  //In 10Khz unit",
          "1868:   USHORT                          usMinEngineClockPLL_Output; //In 10Khz unit",
          "1869:   USHORT                          usMinMemoryClockPLL_Input;  //In 10Khz unit",
          "1870:   USHORT                          usMaxMemoryClockPLL_Input;  //In 10Khz unit",
          "1871:   USHORT                          usMinMemoryClockPLL_Output; //In 10Khz unit",
          "1872:   USHORT                          usMaxPixelClock;            //In 10Khz unit, Max.  Pclk",
          "1873:   USHORT                          usMinPixelClockPLL_Input;   //In 10Khz unit",
          "1874:   USHORT                          usMaxPixelClockPLL_Input;   //In 10Khz unit",
          "1875:   USHORT                          usMinPixelClockPLL_Output;  //In 10Khz unit, the definitions above can't change!!!",
          "1876:   ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;",
          "1877:   USHORT                          usReferenceClock;           //In 10Khz unit",
          "1878:   USHORT                          usPM_RTS_Location;          //RTS PM4 starting location in ROM in 1Kb unit",
          "1879:   UCHAR                           ucPM_RTS_StreamSize;        //RTS PM4 packets in Kb unit",
          "1880:   UCHAR                           ucDesign_ID;                //Indicate what is the board design",
          "1881:   UCHAR                           ucMemoryModule_ID;          //Indicate what is the board design",
          "1882: }ATOM_FIRMWARE_INFO;",
          "1884: typedef struct _ATOM_FIRMWARE_INFO_V1_2",
          "1885: {",
          "1886:   ATOM_COMMON_TABLE_HEADER        sHeader;",
          "1887:   ULONG                           ulFirmwareRevision;",
          "1888:   ULONG                           ulDefaultEngineClock;       //In 10Khz unit",
          "1889:   ULONG                           ulDefaultMemoryClock;       //In 10Khz unit",
          "1890:   ULONG                           ulDriverTargetEngineClock;  //In 10Khz unit",
          "1891:   ULONG                           ulDriverTargetMemoryClock;  //In 10Khz unit",
          "1892:   ULONG                           ulMaxEngineClockPLL_Output; //In 10Khz unit",
          "1893:   ULONG                           ulMaxMemoryClockPLL_Output; //In 10Khz unit",
          "1894:   ULONG                           ulMaxPixelClockPLL_Output;  //In 10Khz unit",
          "1895:   ULONG                           ulASICMaxEngineClock;       //In 10Khz unit",
          "1896:   ULONG                           ulASICMaxMemoryClock;       //In 10Khz unit",
          "1897:   UCHAR                           ucASICMaxTemperature;",
          "1898:   UCHAR                           ucMinAllowedBL_Level;",
          "1899:   UCHAR                           ucPadding[2];               //Don't use them",
          "1900:   ULONG                           aulReservedForBIOS[2];      //Don't use them",
          "1901:   ULONG                           ulMinPixelClockPLL_Output;  //In 10Khz unit",
          "1902:   USHORT                          usMinEngineClockPLL_Input;  //In 10Khz unit",
          "1903:   USHORT                          usMaxEngineClockPLL_Input;  //In 10Khz unit",
          "1904:   USHORT                          usMinEngineClockPLL_Output; //In 10Khz unit",
          "1905:   USHORT                          usMinMemoryClockPLL_Input;  //In 10Khz unit",
          "1906:   USHORT                          usMaxMemoryClockPLL_Input;  //In 10Khz unit",
          "1907:   USHORT                          usMinMemoryClockPLL_Output; //In 10Khz unit",
          "1908:   USHORT                          usMaxPixelClock;            //In 10Khz unit, Max.  Pclk",
          "1909:   USHORT                          usMinPixelClockPLL_Input;   //In 10Khz unit",
          "1910:   USHORT                          usMaxPixelClockPLL_Input;   //In 10Khz unit",
          "1911:   USHORT                          usMinPixelClockPLL_Output;  //In 10Khz unit - lower 16bit of ulMinPixelClockPLL_Output",
          "1912:   ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;",
          "1913:   USHORT                          usReferenceClock;           //In 10Khz unit",
          "1914:   USHORT                          usPM_RTS_Location;          //RTS PM4 starting location in ROM in 1Kb unit",
          "1915:   UCHAR                           ucPM_RTS_StreamSize;        //RTS PM4 packets in Kb unit",
          "1916:   UCHAR                           ucDesign_ID;                //Indicate what is the board design",
          "1917:   UCHAR                           ucMemoryModule_ID;          //Indicate what is the board design",
          "1918: }ATOM_FIRMWARE_INFO_V1_2;",
          "1920: typedef struct _ATOM_FIRMWARE_INFO_V1_3",
          "1921: {",
          "1922:   ATOM_COMMON_TABLE_HEADER        sHeader;",
          "1923:   ULONG                           ulFirmwareRevision;",
          "1924:   ULONG                           ulDefaultEngineClock;       //In 10Khz unit",
          "1925:   ULONG                           ulDefaultMemoryClock;       //In 10Khz unit",
          "1926:   ULONG                           ulDriverTargetEngineClock;  //In 10Khz unit",
          "1927:   ULONG                           ulDriverTargetMemoryClock;  //In 10Khz unit",
          "1928:   ULONG                           ulMaxEngineClockPLL_Output; //In 10Khz unit",
          "1929:   ULONG                           ulMaxMemoryClockPLL_Output; //In 10Khz unit",
          "1930:   ULONG                           ulMaxPixelClockPLL_Output;  //In 10Khz unit",
          "1931:   ULONG                           ulASICMaxEngineClock;       //In 10Khz unit",
          "1932:   ULONG                           ulASICMaxMemoryClock;       //In 10Khz unit",
          "1933:   UCHAR                           ucASICMaxTemperature;",
          "1934:   UCHAR                           ucMinAllowedBL_Level;",
          "1935:   UCHAR                           ucPadding[2];               //Don't use them",
          "1936:   ULONG                           aulReservedForBIOS;         //Don't use them",
          "1937:   ULONG                           ul3DAccelerationEngineClock;//In 10Khz unit",
          "1938:   ULONG                           ulMinPixelClockPLL_Output;  //In 10Khz unit",
          "1939:   USHORT                          usMinEngineClockPLL_Input;  //In 10Khz unit",
          "1940:   USHORT                          usMaxEngineClockPLL_Input;  //In 10Khz unit",
          "1941:   USHORT                          usMinEngineClockPLL_Output; //In 10Khz unit",
          "1942:   USHORT                          usMinMemoryClockPLL_Input;  //In 10Khz unit",
          "1943:   USHORT                          usMaxMemoryClockPLL_Input;  //In 10Khz unit",
          "1944:   USHORT                          usMinMemoryClockPLL_Output; //In 10Khz unit",
          "1945:   USHORT                          usMaxPixelClock;            //In 10Khz unit, Max.  Pclk",
          "1946:   USHORT                          usMinPixelClockPLL_Input;   //In 10Khz unit",
          "1947:   USHORT                          usMaxPixelClockPLL_Input;   //In 10Khz unit",
          "1948:   USHORT                          usMinPixelClockPLL_Output;  //In 10Khz unit - lower 16bit of ulMinPixelClockPLL_Output",
          "1949:   ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;",
          "1950:   USHORT                          usReferenceClock;           //In 10Khz unit",
          "1951:   USHORT                          usPM_RTS_Location;          //RTS PM4 starting location in ROM in 1Kb unit",
          "1952:   UCHAR                           ucPM_RTS_StreamSize;        //RTS PM4 packets in Kb unit",
          "1953:   UCHAR                           ucDesign_ID;                //Indicate what is the board design",
          "1954:   UCHAR                           ucMemoryModule_ID;          //Indicate what is the board design",
          "1955: }ATOM_FIRMWARE_INFO_V1_3;",
          "1957: typedef struct _ATOM_FIRMWARE_INFO_V1_4",
          "1958: {",
          "1959:   ATOM_COMMON_TABLE_HEADER        sHeader;",
          "1960:   ULONG                           ulFirmwareRevision;",
          "1961:   ULONG                           ulDefaultEngineClock;       //In 10Khz unit",
          "1962:   ULONG                           ulDefaultMemoryClock;       //In 10Khz unit",
          "1963:   ULONG                           ulDriverTargetEngineClock;  //In 10Khz unit",
          "1964:   ULONG                           ulDriverTargetMemoryClock;  //In 10Khz unit",
          "1965:   ULONG                           ulMaxEngineClockPLL_Output; //In 10Khz unit",
          "1966:   ULONG                           ulMaxMemoryClockPLL_Output; //In 10Khz unit",
          "1967:   ULONG                           ulMaxPixelClockPLL_Output;  //In 10Khz unit",
          "1968:   ULONG                           ulASICMaxEngineClock;       //In 10Khz unit",
          "1969:   ULONG                           ulASICMaxMemoryClock;       //In 10Khz unit",
          "1970:   UCHAR                           ucASICMaxTemperature;",
          "1971:   UCHAR                           ucMinAllowedBL_Level;",
          "1972:   USHORT                          usBootUpVDDCVoltage;        //In MV unit",
          "1973:   USHORT                          usLcdMinPixelClockPLL_Output; // In MHz unit",
          "1974:   USHORT                          usLcdMaxPixelClockPLL_Output; // In MHz unit",
          "1975:   ULONG                           ul3DAccelerationEngineClock;//In 10Khz unit",
          "1976:   ULONG                           ulMinPixelClockPLL_Output;  //In 10Khz unit",
          "1977:   USHORT                          usMinEngineClockPLL_Input;  //In 10Khz unit",
          "1978:   USHORT                          usMaxEngineClockPLL_Input;  //In 10Khz unit",
          "1979:   USHORT                          usMinEngineClockPLL_Output; //In 10Khz unit",
          "1980:   USHORT                          usMinMemoryClockPLL_Input;  //In 10Khz unit",
          "1981:   USHORT                          usMaxMemoryClockPLL_Input;  //In 10Khz unit",
          "1982:   USHORT                          usMinMemoryClockPLL_Output; //In 10Khz unit",
          "1983:   USHORT                          usMaxPixelClock;            //In 10Khz unit, Max.  Pclk",
          "1984:   USHORT                          usMinPixelClockPLL_Input;   //In 10Khz unit",
          "1985:   USHORT                          usMaxPixelClockPLL_Input;   //In 10Khz unit",
          "1986:   USHORT                          usMinPixelClockPLL_Output;  //In 10Khz unit - lower 16bit of ulMinPixelClockPLL_Output",
          "1987:   ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;",
          "1988:   USHORT                          usReferenceClock;           //In 10Khz unit",
          "1989:   USHORT                          usPM_RTS_Location;          //RTS PM4 starting location in ROM in 1Kb unit",
          "1990:   UCHAR                           ucPM_RTS_StreamSize;        //RTS PM4 packets in Kb unit",
          "1991:   UCHAR                           ucDesign_ID;                //Indicate what is the board design",
          "1992:   UCHAR                           ucMemoryModule_ID;          //Indicate what is the board design",
          "1993: }ATOM_FIRMWARE_INFO_V1_4;",
          "1996: typedef struct _ATOM_FIRMWARE_INFO_V2_1",
          "1997: {",
          "1998:   ATOM_COMMON_TABLE_HEADER        sHeader;",
          "1999:   ULONG                           ulFirmwareRevision;",
          "2000:   ULONG                           ulDefaultEngineClock;       //In 10Khz unit",
          "2001:   ULONG                           ulDefaultMemoryClock;       //In 10Khz unit",
          "2002:   ULONG                           ulReserved1;",
          "2003:   ULONG                           ulReserved2;",
          "2004:   ULONG                           ulMaxEngineClockPLL_Output; //In 10Khz unit",
          "2005:   ULONG                           ulMaxMemoryClockPLL_Output; //In 10Khz unit",
          "2006:   ULONG                           ulMaxPixelClockPLL_Output;  //In 10Khz unit",
          "2007:   ULONG                           ulBinaryAlteredInfo;        //Was ulASICMaxEngineClock",
          "2008:   ULONG                           ulDefaultDispEngineClkFreq; //In 10Khz unit",
          "2009:   UCHAR                           ucReserved1;                //Was ucASICMaxTemperature;",
          "2010:   UCHAR                           ucMinAllowedBL_Level;",
          "2011:   USHORT                          usBootUpVDDCVoltage;        //In MV unit",
          "2012:   USHORT                          usLcdMinPixelClockPLL_Output; // In MHz unit",
          "2013:   USHORT                          usLcdMaxPixelClockPLL_Output; // In MHz unit",
          "2014:   ULONG                           ulReserved4;                //Was ulAsicMaximumVoltage",
          "2015:   ULONG                           ulMinPixelClockPLL_Output;  //In 10Khz unit",
          "2016:   USHORT                          usMinEngineClockPLL_Input;  //In 10Khz unit",
          "2017:   USHORT                          usMaxEngineClockPLL_Input;  //In 10Khz unit",
          "2018:   USHORT                          usMinEngineClockPLL_Output; //In 10Khz unit",
          "2019:   USHORT                          usMinMemoryClockPLL_Input;  //In 10Khz unit",
          "2020:   USHORT                          usMaxMemoryClockPLL_Input;  //In 10Khz unit",
          "2021:   USHORT                          usMinMemoryClockPLL_Output; //In 10Khz unit",
          "2022:   USHORT                          usMaxPixelClock;            //In 10Khz unit, Max.  Pclk",
          "2023:   USHORT                          usMinPixelClockPLL_Input;   //In 10Khz unit",
          "2024:   USHORT                          usMaxPixelClockPLL_Input;   //In 10Khz unit",
          "2025:   USHORT                          usMinPixelClockPLL_Output;  //In 10Khz unit - lower 16bit of ulMinPixelClockPLL_Output",
          "2026:   ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;",
          "2027:   USHORT                          usCoreReferenceClock;       //In 10Khz unit",
          "2028:   USHORT                          usMemoryReferenceClock;     //In 10Khz unit",
          "2029:   USHORT                          usUniphyDPModeExtClkFreq;   //In 10Khz unit, if it is 0, In DP Mode Uniphy Input clock from internal PPLL, otherwise Input clock from external Spread clock",
          "2030:   UCHAR                           ucMemoryModule_ID;          //Indicate what is the board design",
          "2031:   UCHAR                           ucReserved4[3];",
          "2032: }ATOM_FIRMWARE_INFO_V2_1;",
          "2035: #define ATOM_FIRMWARE_INFO_LAST  ATOM_FIRMWARE_INFO_V2_1",
          "2045: typedef struct _ATOM_INTEGRATED_SYSTEM_INFO",
          "2046: {",
          "2047:   ATOM_COMMON_TABLE_HEADER        sHeader;",
          "2048:   ULONG                           ulBootUpEngineClock;      //in 10kHz unit",
          "2049:   ULONG                           ulBootUpMemoryClock;      //in 10kHz unit",
          "2050:   ULONG                           ulMaxSystemMemoryClock;     //in 10kHz unit",
          "2051:   ULONG                           ulMinSystemMemoryClock;     //in 10kHz unit",
          "2052:   UCHAR                           ucNumberOfCyclesInPeriodHi;",
          "2053:   UCHAR                           ucLCDTimingSel;             //=0:not valid.!=0 sel this timing descriptor from LCD EDID.",
          "2054:   USHORT                          usReserved1;",
          "2055:   USHORT                          usInterNBVoltageLow;        //An intermidiate PMW value to set the voltage",
          "2056:   USHORT                          usInterNBVoltageHigh;       //Another intermidiate PMW value to set the voltage",
          "2057:   ULONG                           ulReserved[2];",
          "2059:   USHORT                         usFSBClock;               //In MHz unit",
          "2060:   USHORT                          usCapabilityFlag;          //Bit0=1 indicates the fake HDMI support,Bit1=0/1 for Dynamic clocking dis/enable",
          "2063:   USHORT                         usPCIENBCfgReg7;        //bit[7:0]=MUX_Sel, bit[9:8]=MUX_SEL_LEVEL2, bit[10]=Lane_Reversal",
          "2064:   USHORT                         usK8MemoryClock;            //in MHz unit",
          "2065:   USHORT                         usK8SyncStartDelay;         //in 0.01 us unit",
          "2066:   USHORT                         usK8DataReturnTime;         //in 0.01 us unit",
          "2067:   UCHAR                           ucMaxNBVoltage;",
          "2068:   UCHAR                           ucMinNBVoltage;",
          "2069:   UCHAR                           ucMemoryType;           //[7:4]=1:DDR1;=2:DDR2;=3:DDR3.[3:0] is reserved",
          "2070:   UCHAR                           ucNumberOfCyclesInPeriod;  //CG.FVTHROT_PWM_CTRL_REG0.NumberOfCyclesInPeriod",
          "2071:   UCHAR                           ucStartingPWM_HighTime;     //CG.FVTHROT_PWM_CTRL_REG0.StartingPWM_HighTime",
          "2072:   UCHAR                           ucHTLinkWidth;              //16 bit vs. 8 bit",
          "2073:   UCHAR                           ucMaxNBVoltageHigh;",
          "2074:   UCHAR                           ucMinNBVoltageHigh;",
          "2075: }ATOM_INTEGRATED_SYSTEM_INFO;",
          "2078: ulBootUpMemoryClock:    For Intel IGP,it's the UMA system memory clock",
          "2082: ulMinSystemMemoryClock: For Intel IGP,it's 133MHz if memory runs in ASYNC mode or otherwise (SYNC mode) it's 0",
          "2085: usFSBClock:             For Intel IGP,it's FSB Freq",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1687: ucMaxNBVoltage:         Voltage regulator dependent PWM value. Low 8 bits of the value for the max voltage.Set this one to 0xFF if VC without PWM. Set this to 0x0 if no VC at all.",
          "1688: ucMinNBVoltage:         Voltage regulator dependent PWM value. Low 8 bits of the value for the min voltage.Set this one to 0x00 if VC without PWM or no VC at all.",
          "1693: ucMaxNBVoltageHigh:     Voltage regulator dependent PWM value. High 8 bits of  the value for the max voltage.Set this one to 0xFF if VC without PWM. Set this to 0x0 if no VC at all.",
          "1694: ucMinNBVoltageHigh:     Voltage regulator dependent PWM value. High 8 bits of the value for the min voltage.Set this one to 0x00 if VC without PWM or no VC at all.",
          "1696: usInterNBVoltageLow:    Voltage regulator dependent PWM value. The value makes the the voltage >=Min NB voltage but <=InterNBVoltageHigh. Set this to 0x0000 if VC without PWM or no VC at all.",
          "1697: usInterNBVoltageHigh:   Voltage regulator dependent PWM value. The value makes the the voltage >=InterNBVoltageLow but <=Max NB voltage.Set this to 0x0000 if VC without PWM or no VC at all.",
          "1701: The following IGP table is introduced from RS780, which is supposed to be put by SBIOS in FB before IGP VBIOS starts VPOST;",
          "1703: The enough reservation should allow us to never change table revisions. Whenever needed, a GPU SW component can use reserved portion for new data entries.",
          "1705: SW components can access the IGP system infor structure in the same way as before",
          "1748: ulBootUpEngineClock:   Boot-up Engine Clock in 10Khz;",
          "1749: ulBootUpUMAClock:      Boot-up UMA Clock in 10Khz; it must be 0x0 when UMA is not present",
          "1750: ulBootUpSidePortClock: Boot-up SidePort Clock in 10Khz; it must be 0x0 when SidePort Memory is not present,this could be equal to or less than maximum supported Sideport memory clock",
          "1754: Bit[1]=1: system boots up at AMD overdrived state or user customized  mode. In this case, driver will just stick to this boot-up mode. No other PowerPlay state",
          "1755:       =0: system boots up at driver control state. Power state depends on PowerPlay table.",
          "1756: Bit[2]=1: PWM method is used on NB voltage control. =0: GPIO method is used.",
          "1757: Bit[3]=1: Only one power state(Performance) will be supported.",
          "1758:       =0: Multiple power states supported from PowerPlay table.",
          "1762:       =0: CDLW is disabled. If CLMC is enabled case, Min HT width will be set equal to Max HT width. If CLMC disabled case, Max HT width will be applied.",
          "1763: Bit[6]=1: High Voltage requested for all power states. In this case, voltage will be forced at 1.1v and powerplay table voltage drop/throttling request will be ignored.",
          "1764:       =0: Voltage settings is determined by powerplay table.",
          "1765: Bit[7]=1: Enable CLMC as hybrid Mode. CDLD and CILR will be disabled in this case and we're using legacy C1E. This is workaround for CPU(Griffin) performance issue.",
          "1766:       =0: Enable CLMC as regular mode, CDLD and CILR will be enabled.",
          "1768: ulBootUpReqDisplayVector: This dword is a bit vector indicates what display devices are requested during boot-up. Refer to ATOM_DEVICE_xxx_SUPPORT for the bit vector definitions.",
          "1770: ulOtherDisplayMisc: [15:8]- Bootup LCD Expansion selection; 0-center, 1-full panel size expansion;",
          "1773: ulDDISlot1Config: Describes the PCIE lane configuration on this DDI PCIE slot (ADD2 card) or connector (Mobile design).",
          "1774:       [3:0]  - Bit vector to indicate PCIE lane config of the DDI slot/connector on chassis (bit 0=1 lane 3:0; bit 1=1 lane 7:4; bit 2=1 lane 11:8; bit 3=1 lane 15:12)",
          "1777:       [23:16]- Connector type, possible value:",
          "1778:                CONNECTOR_OBJECT_ID_SINGLE_LINK_DVI_D",
          "1779:                CONNECTOR_OBJECT_ID_DUAL_LINK_DVI_D",
          "1780:                CONNECTOR_OBJECT_ID_HDMI_TYPE_A",
          "1781:                CONNECTOR_OBJECT_ID_DISPLAYPORT",
          "1782:    [31:24]- Reserved",
          "1784: ulDDISlot2Config: Same as Slot1.",
          "",
          "[Removed Lines]",
          "1690: ucNumberOfCyclesInPeriod:   Indicate how many cycles when PWM duty is 100%. low 8 bits of the value.",
          "1691: ucNumberOfCyclesInPeriodHi: Indicate how many cycles when PWM duty is 100%. high 8 bits of the value.If the PWM has an inverter,set bit [7]==1,otherwise set it 0",
          "1702: Then VBIOS will copy the whole structure to its image so all GPU SW components can access this data structure to get whatever they need.",
          "1708: typedef struct _ATOM_INTEGRATED_SYSTEM_INFO_V2 {",
          "1709:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "1717:  ULONG ulBootUpReqDisplayVector;",
          "1718:  ULONG ulOtherDisplayMisc;",
          "1719:  ULONG ulDDISlot1Config;",
          "1720:  ULONG ulDDISlot2Config;",
          "1722:  UCHAR ucUMAChannelNumber;",
          "1723:  UCHAR ucDockingPinBit;",
          "1724:  UCHAR ucDockingPinPolarity;",
          "1725:  ULONG ulDockingPinCFGInfo;",
          "1726:  ULONG ulCPUCapInfo;",
          "1727:  USHORT usNumberOfCyclesInPeriod;",
          "1728:  USHORT usMaxNBVoltage;",
          "1729:  USHORT usMinNBVoltage;",
          "1730:  USHORT usBootUpNBVoltage;",
          "1732:  USHORT usMinHTLinkWidth;",
          "1733:  USHORT usMaxHTLinkWidth;",
          "1734:  USHORT usUMASyncStartDelay;",
          "1735:  USHORT usUMADataReturnTime;",
          "1736:  USHORT usLinkStatusZeroTime;",
          "1737:  USHORT usReserved;",
          "1740:  USHORT usMaxUpStreamHTLinkWidth;",
          "1741:  USHORT usMaxDownStreamHTLinkWidth;",
          "1742:  USHORT usMinUpStreamHTLinkWidth;",
          "1743:  USHORT usMinDownStreamHTLinkWidth;",
          "1745: } ATOM_INTEGRATED_SYSTEM_INFO_V2;",
          "1752: ulSystemConfig:",
          "1753: Bit[0]=1: PowerExpress mode =0 Non-PowerExpress mode;",
          "1759: Bit[4]=1: CLMC is supported and enabled on current system.",
          "1760:       =0: CLMC is not supported or enabled on current system. SBIOS need to support HT link/freq change through ATIF interface.",
          "1761: Bit[5]=1: Enable CDLW for all driver control power states. Max HT width is from SBIOS, while Min HT width is determined by display requirement.",
          "1771:                  [7:0] - BootupTV standard selection; This is a bit vector to indicate what TV standards are supported by the system. Refer to ucTVSuppportedStd definition;",
          "1775:    [7:4]  - Bit vector to indicate PCIE lane config of the same DDI slot/connector on docking station (bit 0=1 lane 3:0; bit 1=1 lane 7:4; bit 2=1 lane 11:8; bit 3=1 lane 15:12)",
          "1776:    [15:8] - Lane configuration attribute;",
          "",
          "[Added Lines]",
          "2096: ucNumberOfCyclesInPeriod:   Indicate how many cycles when PWM duty is 100%. low 8 bits of the value.",
          "2097: ucNumberOfCyclesInPeriodHi: Indicate how many cycles when PWM duty is 100%. high 8 bits of the value.If the PWM has an inverter,set bit [7]==1,otherwise set it 0",
          "2110: Then VBIOS will copy the whole structure to its image so all GPU SW components can access this data structure to get whatever they need.",
          "2117: typedef struct _ATOM_INTEGRATED_SYSTEM_INFO_V2",
          "2118: {",
          "2119:   ATOM_COMMON_TABLE_HEADER   sHeader;",
          "2120:   ULONG                      ulBootUpEngineClock;       //in 10kHz unit",
          "2121:   ULONG        ulReserved1[2];            //must be 0x0 for the reserved",
          "2122:   ULONG                      ulBootUpUMAClock;          //in 10kHz unit",
          "2123:   ULONG                      ulBootUpSidePortClock;     //in 10kHz unit",
          "2124:   ULONG                      ulMinSidePortClock;        //in 10kHz unit",
          "2125:   ULONG        ulReserved2[6];            //must be 0x0 for the reserved",
          "2126:   ULONG                      ulSystemConfig;            //see explanation below",
          "2127:   ULONG                      ulBootUpReqDisplayVector;",
          "2128:   ULONG                      ulOtherDisplayMisc;",
          "2129:   ULONG                      ulDDISlot1Config;",
          "2130:   ULONG                      ulDDISlot2Config;",
          "2131:   UCHAR                      ucMemoryType;              //[3:0]=1:DDR1;=2:DDR2;=3:DDR3.[7:4] is reserved",
          "2132:   UCHAR                      ucUMAChannelNumber;",
          "2133:   UCHAR                      ucDockingPinBit;",
          "2134:   UCHAR                      ucDockingPinPolarity;",
          "2135:   ULONG                      ulDockingPinCFGInfo;",
          "2136:   ULONG                      ulCPUCapInfo;",
          "2137:   USHORT                     usNumberOfCyclesInPeriod;",
          "2138:   USHORT                     usMaxNBVoltage;",
          "2139:   USHORT                     usMinNBVoltage;",
          "2140:   USHORT                     usBootUpNBVoltage;",
          "2141:   ULONG                      ulHTLinkFreq;              //in 10Khz",
          "2142:   USHORT                     usMinHTLinkWidth;",
          "2143:   USHORT                     usMaxHTLinkWidth;",
          "2144:   USHORT                     usUMASyncStartDelay;",
          "2145:   USHORT                     usUMADataReturnTime;",
          "2146:   USHORT                     usLinkStatusZeroTime;",
          "2147:   USHORT                     usDACEfuse;    //for storing badgap value (for RS880 only)",
          "2148:   ULONG                      ulHighVoltageHTLinkFreq;     // in 10Khz",
          "2149:   ULONG                      ulLowVoltageHTLinkFreq;      // in 10Khz",
          "2150:   USHORT                     usMaxUpStreamHTLinkWidth;",
          "2151:   USHORT                     usMaxDownStreamHTLinkWidth;",
          "2152:   USHORT                     usMinUpStreamHTLinkWidth;",
          "2153:   USHORT                     usMinDownStreamHTLinkWidth;",
          "2154:   USHORT                     usFirmwareVersion;         //0 means FW is not supported. Otherwise it's the FW version loaded by SBIOS and driver should enable FW.",
          "2155:   USHORT                     usFullT0Time;             // Input to calculate minimum HT link change time required by NB P-State. Unit is 0.01us.",
          "2156:   ULONG                      ulReserved3[96];          //must be 0x0",
          "2157: }ATOM_INTEGRATED_SYSTEM_INFO_V2;",
          "2164: ulSystemConfig:",
          "2165: Bit[0]=1: PowerExpress mode =0 Non-PowerExpress mode;",
          "2171: Bit[4]=1: CLMC is supported and enabled on current system.",
          "2172:       =0: CLMC is not supported or enabled on current system. SBIOS need to support HT link/freq change through ATIF interface.",
          "2173: Bit[5]=1: Enable CDLW for all driver control power states. Max HT width is from SBIOS, while Min HT width is determined by display requirement.",
          "2179: Bit[8]=1: CDLF is supported and enabled on current system.",
          "2180:       =0: CDLF is not supported or enabled on current system.",
          "2181: Bit[9]=1: DLL Shut Down feature is enabled on current system.",
          "2182:       =0: DLL Shut Down feature is not enabled or supported on current system.",
          "2187:                  [7:0] - BootupTV standard selection; This is a bit vector to indicate what TV standards are supported by the system. Refer to ucTVSupportedStd definition;",
          "2191:    [7:4]  - Bit vector to indicate PCIE lane config of the same DDI slot/connector on docking station (bit 4=1 lane 3:0; bit 5=1 lane 7:4; bit 6=1 lane 11:8; bit 7=1 lane 15:12)",
          "2192:       When a DDI connector is not \"paired\" (meaming two connections mutualexclusive on chassis or docking, only one of them can be connected at one time.",
          "2193:       in both chassis and docking, SBIOS has to duplicate the same PCIE lane info from chassis to docking or vice versa. For example:",
          "2194:       one DDI connector is only populated in docking with PCIE lane 8-11, but there is no paired connection on chassis, SBIOS has to copy bit 6 to bit 2.",
          "2196:    [15:8] - Lane configuration attribute;",
          "2202:                CONNECTOR_OBJECT_ID_eDP",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1788: ucUMAChannelNumber:  how many channels for the UMA;",
          "1791: ucDockingPinBit:     which bit in this register to read the pin status;",
          "1792: ucDockingPinPolarity:Polarity of the pin when docked;",
          "1794: ulCPUCapInfo:        [7:0]=1:Griffin;[7:0]=2:Greyhound;[7:0]=3:K8, other bits reserved for now and must be 0x0",
          "1796: usNumberOfCyclesInPeriod:Indicate how many cycles when PWM duty is 100%.",
          "1798: usMinNBVoltage:Min. voltage control value in either PWM or GPIO mode.",
          "1799:                     GPIO mode: both usMaxNBVoltage & usMinNBVoltage have a valid value ulSystemConfig.SYSTEM_CONFIG_USE_PWM_ON_VOLTAGE=0",
          "1800:                     PWM mode: both usMaxNBVoltage & usMinNBVoltage have a valid value ulSystemConfig.SYSTEM_CONFIG_USE_PWM_ON_VOLTAGE=1",
          "1801:                     GPU SW don't control mode: usMaxNBVoltage & usMinNBVoltage=0 and no care about ulSystemConfig.SYSTEM_CONFIG_USE_PWM_ON_VOLTAGE",
          "1802: usBootUpNBVoltage:Boot-up voltage regulator dependent PWM value.",
          "1804: ulHTLinkFreq:       Bootup HT link Frequency in 10Khz.",
          "1808:                     If CDLW enabled, both upstream and downstream width should be the same during bootup.",
          "1811: usUMADataReturnTime: Memory access latency, required for watermark calculation",
          "1813: for Griffin or Greyhound. SBIOS needs to convert to actual time by:",
          "1814:                      if T0Ttime [5:4]=00b, then usLinkStatusZeroTime=T0Ttime [3:0]*0.1us (0.0 to 1.5us)",
          "1815:                      if T0Ttime [5:4]=01b, then usLinkStatusZeroTime=T0Ttime [3:0]*0.5us (0.0 to 7.5us)",
          "",
          "[Removed Lines]",
          "1790: ulDockingPinCFGInfo: [15:0]-Bus/Device/Function # to CFG to read this Docking Pin; [31:16]-reg offset in CFG to read this pin",
          "1797: usMaxNBVoltage:Max. voltage control value in either PWM or GPIO mode.",
          "1805: usMinHTLinkWidth:   Bootup minimum HT link width. If CDLW disabled, this is equal to usMaxHTLinkWidth.",
          "1806:                     If CDLW enabled, both upstream and downstream width should be the same during bootup.",
          "1807: usMaxHTLinkWidth:   Bootup maximum HT link width. If CDLW disabled, this is equal to usMinHTLinkWidth.",
          "1810: usUMASyncStartDelay: Memory access latency, required for watermark calculation",
          "1812: usLinkStatusZeroTime:Memory access latency required for watermark calculation, set this to 0x0 for K8 CPU, set a proper value in 0.01 the unit of us",
          "",
          "[Added Lines]",
          "2211: ulDockingPinCFGInfo: [15:0]-Bus/Device/Function # to CFG to read this Docking Pin; [31:16]-reg offset in CFG to read this pin",
          "2219: usMaxNBVoltage:Max. voltage control value in either PWM or GPIO mode.",
          "2228: usMinHTLinkWidth:   Bootup minimum HT link width. If CDLW disabled, this is equal to usMaxHTLinkWidth.",
          "2230: usMaxHTLinkWidth:   Bootup maximum HT link width. If CDLW disabled, this is equal to usMinHTLinkWidth.",
          "2231:                     If CDLW enabled, both upstream and downstream width should be the same during bootup.",
          "2233: usUMASyncStartDelay: Memory access latency, required for watermark calculation",
          "2235: usLinkStatusZeroTime:Memory access latency required for watermark calculation, set this to 0x0 for K8 CPU, set a proper value in 0.01 the unit of us",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1817:                      if T0Ttime [5:4]=11b, and T0Ttime [3:0]=0x0 to 0xa, then usLinkStatusZeroTime=T0Ttime [3:0]*20us (0.0 to 200us)",
          "1819: ulHighVoltageHTLinkFreq:     HT link frequency for power state with low voltage. If boot up runs in HT1, this must be 0.",
          "1821: ulLowVoltageHTLinkFreq:      HT link frequency for power state with low voltage or voltage scaling 1.0v~1.1v. If boot up runs in HT1, this must be 0.",
          "1822:                              This must be less than or equal to ulHighVoltageHTLinkFreq.",
          "",
          "[Removed Lines]",
          "1820:                              This must be less than or equal to ulHTLinkFreq(bootup frequency).",
          "",
          "[Added Lines]",
          "2243:                              This must be less than or equal to ulHTLinkFreq(bootup frequency).",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1827: usMinDownStreamHTLinkWidth:  same as above.",
          "1830: #define SYSTEM_CONFIG_POWEREXPRESS_ENABLE                 0x00000001",
          "1831: #define SYSTEM_CONFIG_RUN_AT_OVERDRIVE_ENGINE             0x00000002",
          "1833: #define SYSTEM_CONFIG_PERFORMANCE_POWERSTATE_ONLY         0x00000008",
          "1834: #define SYSTEM_CONFIG_CLMC_ENABLED                        0x00000010",
          "1835: #define SYSTEM_CONFIG_CDLW_ENABLED                        0x00000020",
          "1836: #define SYSTEM_CONFIG_HIGH_VOLTAGE_REQUESTED              0x00000040",
          "1837: #define SYSTEM_CONFIG_CLMC_HYBRID_MODE_ENABLED            0x00000080",
          "1839: #define IGP_DDI_SLOT_LANE_CONFIG_MASK                     0x000000FF",
          "",
          "[Removed Lines]",
          "1832: #define SYSTEM_CONFIG_USE_PWM_ON_VOLTAGE                  0x00000004",
          "",
          "[Added Lines]",
          "2256: #define SYSTEM_CONFIG_USE_PWM_ON_VOLTAGE                  0x00000004",
          "2262: #define SYSTEM_CONFIG_CDLF_ENABLED                        0x00000100",
          "2263: #define SYSTEM_CONFIG_DLL_SHUTDOWN_ENABLED                0x00000200",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1852: #define IGP_DDI_SLOT_CONNECTOR_TYPE_MASK                  0x00FF0000",
          "1854: #define ATOM_CRT_INT_ENCODER1_INDEX                       0x00000000",
          "1855: #define ATOM_LCD_INT_ENCODER1_INDEX                       0x00000001",
          "1856: #define ATOM_TV_INT_ENCODER1_INDEX                        0x00000002",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2281: typedef struct _ATOM_INTEGRATED_SYSTEM_INFO_V5",
          "2282: {",
          "2283:   ATOM_COMMON_TABLE_HEADER   sHeader;",
          "2284:   ULONG                      ulBootUpEngineClock;       //in 10kHz unit",
          "2285:   ULONG                      ulDentistVCOFreq;          //Dentist VCO clock in 10kHz unit, the source of GPU SCLK, LCLK, UCLK and VCLK.",
          "2286:   ULONG                      ulLClockFreq;              //GPU Lclk freq in 10kHz unit, have relationship with NCLK in NorthBridge",
          "2287:   ULONG                      ulBootUpUMAClock;          //in 10kHz unit",
          "2288:   ULONG                      ulReserved1[8];            //must be 0x0 for the reserved",
          "2289:   ULONG                      ulBootUpReqDisplayVector;",
          "2290:   ULONG                      ulOtherDisplayMisc;",
          "2291:   ULONG                      ulReserved2[4];            //must be 0x0 for the reserved",
          "2292:   ULONG                      ulSystemConfig;            //TBD",
          "2293:   ULONG                      ulCPUCapInfo;              //TBD",
          "2294:   USHORT                     usMaxNBVoltage;            //high NB voltage, calculated using current VDDNB (D24F2xDC) and VDDNB offset fuse;",
          "2295:   USHORT                     usMinNBVoltage;            //low NB voltage, calculated using current VDDNB (D24F2xDC) and VDDNB offset fuse;",
          "2296:   USHORT                     usBootUpNBVoltage;         //boot up NB voltage",
          "2297:   UCHAR                      ucHtcTmpLmt;               //bit [22:16] of D24F3x64 Hardware Thermal Control (HTC) Register, may not be needed, TBD",
          "2298:   UCHAR                      ucTjOffset;                //bit [28:22] of D24F3xE4 Thermtrip Status Register,may not be needed, TBD",
          "2299:   ULONG                      ulReserved3[4];            //must be 0x0 for the reserved",
          "2300:   ULONG                      ulDDISlot1Config;          //see above ulDDISlot1Config definition",
          "2301:   ULONG                      ulDDISlot2Config;",
          "2302:   ULONG                      ulDDISlot3Config;",
          "2303:   ULONG                      ulDDISlot4Config;",
          "2304:   ULONG                      ulReserved4[4];            //must be 0x0 for the reserved",
          "2305:   UCHAR                      ucMemoryType;              //[3:0]=1:DDR1;=2:DDR2;=3:DDR3.[7:4] is reserved",
          "2306:   UCHAR                      ucUMAChannelNumber;",
          "2307:   USHORT                     usReserved;",
          "2308:   ULONG                      ulReserved5[4];            //must be 0x0 for the reserved",
          "2309:   ULONG                      ulCSR_M3_ARB_CNTL_DEFAULT[10];//arrays with values for CSR M3 arbiter for default",
          "2310:   ULONG                      ulCSR_M3_ARB_CNTL_UVD[10]; //arrays with values for CSR M3 arbiter for UVD playback",
          "2311:   ULONG                      ulCSR_M3_ARB_CNTL_FS3D[10];//arrays with values for CSR M3 arbiter for Full Screen 3D applications",
          "2312:   ULONG                      ulReserved6[61];           //must be 0x0",
          "2313: }ATOM_INTEGRATED_SYSTEM_INFO_V5;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1866: #define ATOM_DFP_INT_ENCODER3_INDEX                       0x0000000C",
          "1867: #define ATOM_DFP_INT_ENCODER4_INDEX                       0x0000000D",
          "1871: #define ASIC_INT_TV_ENCODER_ID              0x02",
          "1872: #define ASIC_INT_DIG1_ENCODER_ID             0x03",
          "1873: #define ASIC_INT_DAC2_ENCODER_ID             0x04",
          "",
          "[Removed Lines]",
          "1870: #define ASIC_INT_DAC1_ENCODER_ID           0x00",
          "",
          "[Added Lines]",
          "2331: #define ASIC_INT_DAC1_ENCODER_ID               0x00",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1875: #define ASIC_INT_DVO_ENCODER_ID              0x07",
          "1876: #define ASIC_INT_DIG2_ENCODER_ID             0x09",
          "1877: #define ASIC_EXT_DIG_ENCODER_ID              0x05",
          "1880: #define ATOM_ANALOG_ENCODER                0",
          "1883: #define ATOM_DEVICE_CRT1_INDEX                            0x00000000",
          "1884: #define ATOM_DEVICE_LCD1_INDEX                            0x00000001",
          "",
          "[Removed Lines]",
          "1881: #define ATOM_DIGITAL_ENCODER               1",
          "",
          "[Added Lines]",
          "2339: #define ASIC_EXT_DIG2_ENCODER_ID             0x08",
          "2340: #define ASIC_INT_DIG3_ENCODER_ID             0x0a",
          "2341: #define ASIC_INT_DIG4_ENCODER_ID             0x0b",
          "2342: #define ASIC_INT_DIG5_ENCODER_ID             0x0c",
          "2343: #define ASIC_INT_DIG6_ENCODER_ID             0x0d",
          "2347: #define ATOM_DIGITAL_ENCODER               1",
          "2348: #define ATOM_DP_ENCODER                     2",
          "2350: #define ATOM_ENCODER_ENUM_MASK                            0x70",
          "2351: #define ATOM_ENCODER_ENUM_ID1                             0x00",
          "2352: #define ATOM_ENCODER_ENUM_ID2                             0x10",
          "2353: #define ATOM_ENCODER_ENUM_ID3                             0x20",
          "2354: #define ATOM_ENCODER_ENUM_ID4                             0x30",
          "2355: #define ATOM_ENCODER_ENUM_ID5                             0x40",
          "2356: #define ATOM_ENCODER_ENUM_ID6                             0x50",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1886: #define ATOM_DEVICE_DFP1_INDEX                            0x00000003",
          "1887: #define ATOM_DEVICE_CRT2_INDEX                            0x00000004",
          "1888: #define ATOM_DEVICE_LCD2_INDEX                            0x00000005",
          "1890: #define ATOM_DEVICE_DFP2_INDEX                            0x00000007",
          "1891: #define ATOM_DEVICE_CV_INDEX                              0x00000008",
          "1895: #define ATOM_DEVICE_RESERVEDC_INDEX                       0x0000000C",
          "1896: #define ATOM_DEVICE_RESERVEDD_INDEX                       0x0000000D",
          "1897: #define ATOM_DEVICE_RESERVEDE_INDEX                       0x0000000E",
          "1898: #define ATOM_DEVICE_RESERVEDF_INDEX                       0x0000000F",
          "1899: #define ATOM_MAX_SUPPORTED_DEVICE_INFO                    (ATOM_DEVICE_DFP3_INDEX+1)",
          "1900: #define ATOM_MAX_SUPPORTED_DEVICE_INFO_2                  ATOM_MAX_SUPPORTED_DEVICE_INFO",
          "1903: #define ATOM_MAX_SUPPORTED_DEVICE                         (ATOM_DEVICE_RESERVEDF_INDEX+1)",
          "1929: #define ATOM_DEVICE_CONNECTOR_TYPE_MASK                   0x000000F0",
          "1930: #define ATOM_DEVICE_CONNECTOR_TYPE_SHIFT                  0x00000004",
          "",
          "[Removed Lines]",
          "1889: #define ATOM_DEVICE_TV2_INDEX                             0x00000006",
          "1892: #define ATOM_DEVICE_DFP3_INDEX              0x00000009",
          "1893: #define ATOM_DEVICE_DFP4_INDEX              0x0000000A",
          "1894: #define ATOM_DEVICE_DFP5_INDEX              0x0000000B",
          "1901: #define ATOM_MAX_SUPPORTED_DEVICE_INFO_3                  (ATOM_DEVICE_DFP5_INDEX + 1)",
          "1905: #define ATOM_DEVICE_CRT1_SUPPORT                          (0x1L << ATOM_DEVICE_CRT1_INDEX)",
          "1906: #define ATOM_DEVICE_LCD1_SUPPORT                          (0x1L << ATOM_DEVICE_LCD1_INDEX)",
          "1907: #define ATOM_DEVICE_TV1_SUPPORT                           (0x1L << ATOM_DEVICE_TV1_INDEX)",
          "1908: #define ATOM_DEVICE_DFP1_SUPPORT                          (0x1L << ATOM_DEVICE_DFP1_INDEX)",
          "1909: #define ATOM_DEVICE_CRT2_SUPPORT                          (0x1L << ATOM_DEVICE_CRT2_INDEX)",
          "1910: #define ATOM_DEVICE_LCD2_SUPPORT                          (0x1L << ATOM_DEVICE_LCD2_INDEX)",
          "1911: #define ATOM_DEVICE_TV2_SUPPORT                           (0x1L << ATOM_DEVICE_TV2_INDEX)",
          "1912: #define ATOM_DEVICE_DFP2_SUPPORT                          (0x1L << ATOM_DEVICE_DFP2_INDEX)",
          "1913: #define ATOM_DEVICE_CV_SUPPORT                            (0x1L << ATOM_DEVICE_CV_INDEX)",
          "1914: #define ATOM_DEVICE_DFP3_SUPPORT             (0x1L << ATOM_DEVICE_DFP3_INDEX)",
          "1915: #define ATOM_DEVICE_DFP4_SUPPORT             (0x1L << ATOM_DEVICE_DFP4_INDEX )",
          "1916: #define ATOM_DEVICE_DFP5_SUPPORT             (0x1L << ATOM_DEVICE_DFP5_INDEX)",
          "1918: #define ATOM_DEVICE_CRT_SUPPORT \\",
          "1919:  (ATOM_DEVICE_CRT1_SUPPORT | ATOM_DEVICE_CRT2_SUPPORT)",
          "1920: #define ATOM_DEVICE_DFP_SUPPORT \\",
          "1921:  (ATOM_DEVICE_DFP1_SUPPORT | ATOM_DEVICE_DFP2_SUPPORT | \\",
          "1922:   ATOM_DEVICE_DFP3_SUPPORT | ATOM_DEVICE_DFP4_SUPPORT | \\",
          "1923:   ATOM_DEVICE_DFP5_SUPPORT)",
          "1924: #define ATOM_DEVICE_TV_SUPPORT \\",
          "1925:  (ATOM_DEVICE_TV1_SUPPORT  | ATOM_DEVICE_TV2_SUPPORT)",
          "1926: #define ATOM_DEVICE_LCD_SUPPORT \\",
          "1927:  (ATOM_DEVICE_LCD1_SUPPORT | ATOM_DEVICE_LCD2_SUPPORT)",
          "",
          "[Added Lines]",
          "2364: #define ATOM_DEVICE_DFP6_INDEX                            0x00000006",
          "2367: #define ATOM_DEVICE_DFP3_INDEX                            0x00000009",
          "2368: #define ATOM_DEVICE_DFP4_INDEX                            0x0000000A",
          "2369: #define ATOM_DEVICE_DFP5_INDEX                            0x0000000B",
          "2377: #define ATOM_MAX_SUPPORTED_DEVICE_INFO_3                  (ATOM_DEVICE_DFP5_INDEX + 1 )",
          "2381: #define ATOM_DEVICE_CRT1_SUPPORT                          (0x1L << ATOM_DEVICE_CRT1_INDEX )",
          "2382: #define ATOM_DEVICE_LCD1_SUPPORT                          (0x1L << ATOM_DEVICE_LCD1_INDEX )",
          "2383: #define ATOM_DEVICE_TV1_SUPPORT                           (0x1L << ATOM_DEVICE_TV1_INDEX  )",
          "2384: #define ATOM_DEVICE_DFP1_SUPPORT                          (0x1L << ATOM_DEVICE_DFP1_INDEX )",
          "2385: #define ATOM_DEVICE_CRT2_SUPPORT                          (0x1L << ATOM_DEVICE_CRT2_INDEX )",
          "2386: #define ATOM_DEVICE_LCD2_SUPPORT                          (0x1L << ATOM_DEVICE_LCD2_INDEX )",
          "2387: #define ATOM_DEVICE_DFP6_SUPPORT                          (0x1L << ATOM_DEVICE_DFP6_INDEX )",
          "2388: #define ATOM_DEVICE_DFP2_SUPPORT                          (0x1L << ATOM_DEVICE_DFP2_INDEX )",
          "2389: #define ATOM_DEVICE_CV_SUPPORT                            (0x1L << ATOM_DEVICE_CV_INDEX   )",
          "2390: #define ATOM_DEVICE_DFP3_SUPPORT                          (0x1L << ATOM_DEVICE_DFP3_INDEX )",
          "2391: #define ATOM_DEVICE_DFP4_SUPPORT                          (0x1L << ATOM_DEVICE_DFP4_INDEX )",
          "2392: #define ATOM_DEVICE_DFP5_SUPPORT                          (0x1L << ATOM_DEVICE_DFP5_INDEX )",
          "2394: #define ATOM_DEVICE_CRT_SUPPORT                           (ATOM_DEVICE_CRT1_SUPPORT | ATOM_DEVICE_CRT2_SUPPORT)",
          "2395: #define ATOM_DEVICE_DFP_SUPPORT                           (ATOM_DEVICE_DFP1_SUPPORT | ATOM_DEVICE_DFP2_SUPPORT |  ATOM_DEVICE_DFP3_SUPPORT | ATOM_DEVICE_DFP4_SUPPORT | ATOM_DEVICE_DFP5_SUPPORT | ATOM_DEVICE_DFP6_SUPPORT)",
          "2396: #define ATOM_DEVICE_TV_SUPPORT                            (ATOM_DEVICE_TV1_SUPPORT)",
          "2397: #define ATOM_DEVICE_LCD_SUPPORT                           (ATOM_DEVICE_LCD1_SUPPORT | ATOM_DEVICE_LCD2_SUPPORT)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1958: #define ATOM_DEVICE_I2C_ID_SHIFT                          0x00000004",
          "1959: #define ATOM_DEVICE_I2C_ID_IS_FOR_NON_MM_USE              0x00000001",
          "1960: #define ATOM_DEVICE_I2C_ID_IS_FOR_MM_USE                  0x00000002",
          "1964: #define ATOM_DEVICE_I2C_HARDWARE_CAP_MASK                 0x00000080",
          "1965: #define ATOM_DEVICE_I2C_HARDWARE_CAP_SHIFT                0x00000007",
          "1966: #define ATOM_DEVICE_USES_SOFTWARE_ASSISTED_I2C            0x00000000",
          "1967: #define ATOM_DEVICE_USES_HARDWARE_ASSISTED_I2C            0x00000001",
          "2046: #ifndef _H2INC",
          "2050: #if ATOM_BIG_ENDIAN",
          "2062: #else",
          "2074: #endif",
          "2082: #else",
          "2088: #endif",
          "2091: #define ATOM_H_CUTOFF           0x01",
          "2094: #define ATOM_V_CUTOFF           0x08",
          "2095: #define ATOM_H_REPLICATIONBY2   0x10",
          "2096: #define ATOM_V_REPLICATIONBY2   0x20",
          "",
          "[Removed Lines]",
          "1995: typedef struct _ATOM_I2C_ID_CONFIG {",
          "1996: #if ATOM_BIG_ENDIAN",
          "1997:  UCHAR bfHW_Capable:1;",
          "1998:  UCHAR bfHW_EngineID:3;",
          "1999:  UCHAR bfI2C_LineMux:4;",
          "2000: #else",
          "2001:  UCHAR bfI2C_LineMux:4;",
          "2002:  UCHAR bfHW_EngineID:3;",
          "2003:  UCHAR bfHW_Capable:1;",
          "2004: #endif",
          "2005: } ATOM_I2C_ID_CONFIG;",
          "2007: typedef union _ATOM_I2C_ID_CONFIG_ACCESS {",
          "2008:  ATOM_I2C_ID_CONFIG sbfAccess;",
          "2009:  UCHAR ucAccess;",
          "2010: } ATOM_I2C_ID_CONFIG_ACCESS;",
          "2015: typedef struct _ATOM_GPIO_I2C_ASSIGMENT {",
          "2016:  USHORT usClkMaskRegisterIndex;",
          "2017:  USHORT usClkEnRegisterIndex;",
          "2018:  USHORT usClkY_RegisterIndex;",
          "2019:  USHORT usClkA_RegisterIndex;",
          "2020:  USHORT usDataMaskRegisterIndex;",
          "2021:  USHORT usDataEnRegisterIndex;",
          "2022:  USHORT usDataY_RegisterIndex;",
          "2023:  USHORT usDataA_RegisterIndex;",
          "2024:  ATOM_I2C_ID_CONFIG_ACCESS sucI2cId;",
          "2025:  UCHAR ucClkMaskShift;",
          "2026:  UCHAR ucClkEnShift;",
          "2027:  UCHAR ucClkY_Shift;",
          "2028:  UCHAR ucClkA_Shift;",
          "2029:  UCHAR ucDataMaskShift;",
          "2030:  UCHAR ucDataEnShift;",
          "2031:  UCHAR ucDataY_Shift;",
          "2032:  UCHAR ucDataA_Shift;",
          "2033:  UCHAR ucReserved1;",
          "2034:  UCHAR ucReserved2;",
          "2035: } ATOM_GPIO_I2C_ASSIGMENT;",
          "2037: typedef struct _ATOM_GPIO_I2C_INFO {",
          "2038:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2039:  ATOM_GPIO_I2C_ASSIGMENT asGPIO_Info[ATOM_MAX_SUPPORTED_DEVICE];",
          "2040: } ATOM_GPIO_I2C_INFO;",
          "2049: typedef struct _ATOM_MODE_MISC_INFO {",
          "2051:  USHORT Reserved:6;",
          "2052:  USHORT RGB888:1;",
          "2053:  USHORT DoubleClock:1;",
          "2054:  USHORT Interlace:1;",
          "2055:  USHORT CompositeSync:1;",
          "2056:  USHORT V_ReplicationBy2:1;",
          "2057:  USHORT H_ReplicationBy2:1;",
          "2058:  USHORT VerticalCutOff:1;",
          "2061:  USHORT HorizontalCutOff:1;",
          "2063:  USHORT HorizontalCutOff:1;",
          "2066:  USHORT VerticalCutOff:1;",
          "2067:  USHORT H_ReplicationBy2:1;",
          "2068:  USHORT V_ReplicationBy2:1;",
          "2069:  USHORT CompositeSync:1;",
          "2070:  USHORT Interlace:1;",
          "2071:  USHORT DoubleClock:1;",
          "2072:  USHORT RGB888:1;",
          "2073:  USHORT Reserved:6;",
          "2075: } ATOM_MODE_MISC_INFO;",
          "2077: typedef union _ATOM_MODE_MISC_INFO_ACCESS {",
          "2078:  ATOM_MODE_MISC_INFO sbfAccess;",
          "2079:  USHORT usAccess;",
          "2080: } ATOM_MODE_MISC_INFO_ACCESS;",
          "2084: typedef union _ATOM_MODE_MISC_INFO_ACCESS {",
          "2085:  USHORT usAccess;",
          "2086: } ATOM_MODE_MISC_INFO_ACCESS;",
          "",
          "[Added Lines]",
          "2432: #define ATOM_DEVICE_I2C_ID_IS_FOR_SDVO_USE                0x00000003    //For IGP RS600",
          "2433: #define ATOM_DEVICE_I2C_ID_IS_FOR_DAC_SCL                 0x00000004    //For IGP RS690",
          "2469: typedef struct _ATOM_I2C_ID_CONFIG",
          "2470: {",
          "2471: #if ATOM_BIG_ENDIAN",
          "2472:   UCHAR   bfHW_Capable:1;",
          "2473:   UCHAR   bfHW_EngineID:3;",
          "2474:   UCHAR   bfI2C_LineMux:4;",
          "2475: #else",
          "2476:   UCHAR   bfI2C_LineMux:4;",
          "2477:   UCHAR   bfHW_EngineID:3;",
          "2478:   UCHAR   bfHW_Capable:1;",
          "2479: #endif",
          "2480: }ATOM_I2C_ID_CONFIG;",
          "2482: typedef union _ATOM_I2C_ID_CONFIG_ACCESS",
          "2483: {",
          "2484:   ATOM_I2C_ID_CONFIG sbfAccess;",
          "2485:   UCHAR              ucAccess;",
          "2486: }ATOM_I2C_ID_CONFIG_ACCESS;",
          "2492: typedef struct _ATOM_GPIO_I2C_ASSIGMENT",
          "2493: {",
          "2494:   USHORT                    usClkMaskRegisterIndex;",
          "2495:   USHORT                    usClkEnRegisterIndex;",
          "2496:   USHORT                    usClkY_RegisterIndex;",
          "2497:   USHORT                    usClkA_RegisterIndex;",
          "2498:   USHORT                    usDataMaskRegisterIndex;",
          "2499:   USHORT                    usDataEnRegisterIndex;",
          "2500:   USHORT                    usDataY_RegisterIndex;",
          "2501:   USHORT                    usDataA_RegisterIndex;",
          "2502:   ATOM_I2C_ID_CONFIG_ACCESS sucI2cId;",
          "2503:   UCHAR                     ucClkMaskShift;",
          "2504:   UCHAR                     ucClkEnShift;",
          "2505:   UCHAR                     ucClkY_Shift;",
          "2506:   UCHAR                     ucClkA_Shift;",
          "2507:   UCHAR                     ucDataMaskShift;",
          "2508:   UCHAR                     ucDataEnShift;",
          "2509:   UCHAR                     ucDataY_Shift;",
          "2510:   UCHAR                     ucDataA_Shift;",
          "2511:   UCHAR                     ucReserved1;",
          "2512:   UCHAR                     ucReserved2;",
          "2513: }ATOM_GPIO_I2C_ASSIGMENT;",
          "2515: typedef struct _ATOM_GPIO_I2C_INFO",
          "2516: {",
          "2517:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "2518:   ATOM_GPIO_I2C_ASSIGMENT   asGPIO_Info[ATOM_MAX_SUPPORTED_DEVICE];",
          "2519: }ATOM_GPIO_I2C_INFO;",
          "2528: typedef struct _ATOM_MODE_MISC_INFO",
          "2529: {",
          "2531:   USHORT Reserved:6;",
          "2532:   USHORT RGB888:1;",
          "2533:   USHORT DoubleClock:1;",
          "2534:   USHORT Interlace:1;",
          "2535:   USHORT CompositeSync:1;",
          "2536:   USHORT V_ReplicationBy2:1;",
          "2537:   USHORT H_ReplicationBy2:1;",
          "2538:   USHORT VerticalCutOff:1;",
          "2539:   USHORT VSyncPolarity:1;      //0=Active High, 1=Active Low",
          "2540:   USHORT HSyncPolarity:1;      //0=Active High, 1=Active Low",
          "2541:   USHORT HorizontalCutOff:1;",
          "2543:   USHORT HorizontalCutOff:1;",
          "2544:   USHORT HSyncPolarity:1;      //0=Active High, 1=Active Low",
          "2545:   USHORT VSyncPolarity:1;      //0=Active High, 1=Active Low",
          "2546:   USHORT VerticalCutOff:1;",
          "2547:   USHORT H_ReplicationBy2:1;",
          "2548:   USHORT V_ReplicationBy2:1;",
          "2549:   USHORT CompositeSync:1;",
          "2550:   USHORT Interlace:1;",
          "2551:   USHORT DoubleClock:1;",
          "2552:   USHORT RGB888:1;",
          "2553:   USHORT Reserved:6;",
          "2555: }ATOM_MODE_MISC_INFO;",
          "2557: typedef union _ATOM_MODE_MISC_INFO_ACCESS",
          "2558: {",
          "2559:   ATOM_MODE_MISC_INFO sbfAccess;",
          "2560:   USHORT              usAccess;",
          "2561: }ATOM_MODE_MISC_INFO_ACCESS;",
          "2565: typedef union _ATOM_MODE_MISC_INFO_ACCESS",
          "2566: {",
          "2567:   USHORT              usAccess;",
          "2568: }ATOM_MODE_MISC_INFO_ACCESS;",
          "2574: #define ATOM_HSYNC_POLARITY     0x02             //0=Active High, 1=Active Low",
          "2575: #define ATOM_VSYNC_POLARITY     0x04             //0=Active High, 1=Active Low",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2099: #define ATOM_DOUBLE_CLOCK_MODE  0x100",
          "2100: #define ATOM_RGB888_MODE        0x200",
          "2103: #define ATOM_REFRESH_43         43",
          "2104: #define ATOM_REFRESH_47         47",
          "2106: #define ATOM_REFRESH_60         60",
          "2107: #define ATOM_REFRESH_65         65",
          "2108: #define ATOM_REFRESH_70         70",
          "",
          "[Removed Lines]",
          "2105: #define ATOM_REFRESH_56         56",
          "",
          "[Added Lines]",
          "2587: #define ATOM_REFRESH_56         56",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2110: #define ATOM_REFRESH_75         75",
          "2111: #define ATOM_REFRESH_85         85",
          "2163: #define SET_CRTC_TIMING_PARAMETERS_PS_ALLOCATION SET_CRTC_TIMING_PARAMETERS",
          "2213: #define SUPPORTED_LCD_REFRESHRATE_30Hz          0x0004",
          "2214: #define SUPPORTED_LCD_REFRESHRATE_40Hz          0x0008",
          "2215: #define SUPPORTED_LCD_REFRESHRATE_50Hz          0x0010",
          "2216: #define SUPPORTED_LCD_REFRESHRATE_60Hz          0x0020",
          "2265: #define ATOM_LVDS_INFO_LAST  ATOM_LVDS_INFO_V12",
          "2284: #define LCD_MODE_CAP_BL_OFF                   1",
          "2285: #define LCD_MODE_CAP_CRTC_OFF                 2",
          "2286: #define LCD_MODE_CAP_PANEL_OFF                4",
          "2292: } ATOM_FAKE_EDID_PATCH_RECORD;",
          "2300: #define LCD_MODE_PATCH_RECORD_MODE_TYPE       1",
          "2301: #define LCD_RTS_RECORD_TYPE                   2",
          "",
          "[Removed Lines]",
          "2127: typedef struct _SET_CRTC_USING_DTD_TIMING_PARAMETERS {",
          "2128:  USHORT usH_Size;",
          "2129:  USHORT usH_Blanking_Time;",
          "2130:  USHORT usV_Size;",
          "2131:  USHORT usV_Blanking_Time;",
          "2132:  USHORT usH_SyncOffset;",
          "2133:  USHORT usH_SyncWidth;",
          "2134:  USHORT usV_SyncOffset;",
          "2135:  USHORT usV_SyncWidth;",
          "2136:  ATOM_MODE_MISC_INFO_ACCESS susModeMiscInfo;",
          "2138:  UCHAR ucV_Border;",
          "2140:  UCHAR ucPadding[3];",
          "2141: } SET_CRTC_USING_DTD_TIMING_PARAMETERS;",
          "2146: typedef struct _SET_CRTC_TIMING_PARAMETERS {",
          "2155:  ATOM_MODE_MISC_INFO_ACCESS susModeMiscInfo;",
          "2161:  UCHAR ucReserved;",
          "2162: } SET_CRTC_TIMING_PARAMETERS;",
          "2170: typedef struct _ATOM_MODE_TIMING {",
          "2171:  USHORT usCRTC_H_Total;",
          "2172:  USHORT usCRTC_H_Disp;",
          "2173:  USHORT usCRTC_H_SyncStart;",
          "2174:  USHORT usCRTC_H_SyncWidth;",
          "2175:  USHORT usCRTC_V_Total;",
          "2176:  USHORT usCRTC_V_Disp;",
          "2177:  USHORT usCRTC_V_SyncStart;",
          "2178:  USHORT usCRTC_V_SyncWidth;",
          "2180:  ATOM_MODE_MISC_INFO_ACCESS susModeMiscInfo;",
          "2181:  USHORT usCRTC_OverscanRight;",
          "2182:  USHORT usCRTC_OverscanLeft;",
          "2183:  USHORT usCRTC_OverscanBottom;",
          "2184:  USHORT usCRTC_OverscanTop;",
          "2185:  USHORT usReserve;",
          "2186:  UCHAR ucInternalModeNumber;",
          "2187:  UCHAR ucRefreshRate;",
          "2188: } ATOM_MODE_TIMING;",
          "2190: typedef struct _ATOM_DTD_FORMAT {",
          "2191:  USHORT usPixClk;",
          "2192:  USHORT usHActive;",
          "2193:  USHORT usHBlanking_Time;",
          "2194:  USHORT usVActive;",
          "2195:  USHORT usVBlanking_Time;",
          "2196:  USHORT usHSyncOffset;",
          "2197:  USHORT usHSyncWidth;",
          "2198:  USHORT usVSyncOffset;",
          "2199:  USHORT usVSyncWidth;",
          "2200:  USHORT usImageHSize;",
          "2201:  USHORT usImageVSize;",
          "2202:  UCHAR ucHBorder;",
          "2203:  UCHAR ucVBorder;",
          "2204:  ATOM_MODE_MISC_INFO_ACCESS susModeMiscInfo;",
          "2205:  UCHAR ucInternalModeNumber;",
          "2206:  UCHAR ucRefreshRate;",
          "2207: } ATOM_DTD_FORMAT;",
          "2220: #define LCDPANEL_CAP_READ_EDID         0x1",
          "2224: typedef struct _ATOM_LVDS_INFO {",
          "2225:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2226:  ATOM_DTD_FORMAT sLCDTiming;",
          "2227:  USHORT usModePatchTableOffset;",
          "2229:  USHORT usOffDelayInMs;",
          "2230:  UCHAR ucPowerSequenceDigOntoDEin10Ms;",
          "2231:  UCHAR ucPowerSequenceDEtoBLOnin10Ms;",
          "2236:  UCHAR ucPanelDefaultRefreshRate;",
          "2237:  UCHAR ucPanelIdentification;",
          "2238:  UCHAR ucSS_Id;",
          "2239: } ATOM_LVDS_INFO;",
          "2243: typedef struct _ATOM_LVDS_INFO_V12 {",
          "2244:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2245:  ATOM_DTD_FORMAT sLCDTiming;",
          "2246:  USHORT usExtInfoTableOffset;",
          "2248:  USHORT usOffDelayInMs;",
          "2249:  UCHAR ucPowerSequenceDigOntoDEin10Ms;",
          "2250:  UCHAR ucPowerSequenceDEtoBLOnin10Ms;",
          "2255:  UCHAR ucPanelDefaultRefreshRate;",
          "2256:  UCHAR ucPanelIdentification;",
          "2257:  UCHAR ucSS_Id;",
          "2258:  USHORT usLCDVenderID;",
          "2259:  USHORT usLCDProductID;",
          "2260:  UCHAR ucLCDPanel_SpecialHandlingCap;",
          "2262:  UCHAR ucReserved[2];",
          "2263: } ATOM_LVDS_INFO_V12;",
          "2267: typedef struct _ATOM_PATCH_RECORD_MODE {",
          "2268:  UCHAR ucRecordType;",
          "2269:  USHORT usHDisp;",
          "2270:  USHORT usVDisp;",
          "2271: } ATOM_PATCH_RECORD_MODE;",
          "2273: typedef struct _ATOM_LCD_RTS_RECORD {",
          "2274:  UCHAR ucRecordType;",
          "2275:  UCHAR ucRTSValue;",
          "2276: } ATOM_LCD_RTS_RECORD;",
          "2279: typedef struct _ATOM_LCD_MODE_CONTROL_CAP {",
          "2280:  UCHAR ucRecordType;",
          "2281:  USHORT usLCDCap;",
          "2282: } ATOM_LCD_MODE_CONTROL_CAP;",
          "2288: typedef struct _ATOM_FAKE_EDID_PATCH_RECORD {",
          "2289:  UCHAR ucRecordType;",
          "2290:  UCHAR ucFakeEDIDLength;",
          "2294: typedef struct _ATOM_PANEL_RESOLUTION_PATCH_RECORD {",
          "2295:  UCHAR ucRecordType;",
          "2296:  USHORT usHSize;",
          "2297:  USHORT usVSize;",
          "2298: } ATOM_PANEL_RESOLUTION_PATCH_RECORD;",
          "",
          "[Added Lines]",
          "2609: typedef struct _SET_CRTC_USING_DTD_TIMING_PARAMETERS",
          "2610: {",
          "2611:   USHORT  usH_Size;",
          "2612:   USHORT  usH_Blanking_Time;",
          "2613:   USHORT  usV_Size;",
          "2614:   USHORT  usV_Blanking_Time;",
          "2615:   USHORT  usH_SyncOffset;",
          "2616:   USHORT  usH_SyncWidth;",
          "2617:   USHORT  usV_SyncOffset;",
          "2618:   USHORT  usV_SyncWidth;",
          "2619:   ATOM_MODE_MISC_INFO_ACCESS  susModeMiscInfo;",
          "2620:   UCHAR   ucH_Border;         // From DFP EDID",
          "2621:   UCHAR   ucV_Border;",
          "2622:   UCHAR   ucCRTC;             // ATOM_CRTC1 or ATOM_CRTC2",
          "2623:   UCHAR   ucPadding[3];",
          "2624: }SET_CRTC_USING_DTD_TIMING_PARAMETERS;",
          "2629: typedef struct _SET_CRTC_TIMING_PARAMETERS",
          "2630: {",
          "2631:   USHORT                      usH_Total;        // horizontal total",
          "2632:   USHORT                      usH_Disp;         // horizontal display",
          "2633:   USHORT                      usH_SyncStart;    // horozontal Sync start",
          "2634:   USHORT                      usH_SyncWidth;    // horizontal Sync width",
          "2635:   USHORT                      usV_Total;        // vertical total",
          "2636:   USHORT                      usV_Disp;         // vertical display",
          "2637:   USHORT                      usV_SyncStart;    // vertical Sync start",
          "2638:   USHORT                      usV_SyncWidth;    // vertical Sync width",
          "2639:   ATOM_MODE_MISC_INFO_ACCESS  susModeMiscInfo;",
          "2640:   UCHAR                       ucCRTC;           // ATOM_CRTC1 or ATOM_CRTC2",
          "2641:   UCHAR                       ucOverscanRight;  // right",
          "2642:   UCHAR                       ucOverscanLeft;   // left",
          "2643:   UCHAR                       ucOverscanBottom; // bottom",
          "2644:   UCHAR                       ucOverscanTop;    // top",
          "2645:   UCHAR                       ucReserved;",
          "2646: }SET_CRTC_TIMING_PARAMETERS;",
          "2654: typedef struct _ATOM_MODE_TIMING",
          "2655: {",
          "2656:   USHORT  usCRTC_H_Total;",
          "2657:   USHORT  usCRTC_H_Disp;",
          "2658:   USHORT  usCRTC_H_SyncStart;",
          "2659:   USHORT  usCRTC_H_SyncWidth;",
          "2660:   USHORT  usCRTC_V_Total;",
          "2661:   USHORT  usCRTC_V_Disp;",
          "2662:   USHORT  usCRTC_V_SyncStart;",
          "2663:   USHORT  usCRTC_V_SyncWidth;",
          "2664:   USHORT  usPixelClock;                      //in 10Khz unit",
          "2665:   ATOM_MODE_MISC_INFO_ACCESS  susModeMiscInfo;",
          "2666:   USHORT  usCRTC_OverscanRight;",
          "2667:   USHORT  usCRTC_OverscanLeft;",
          "2668:   USHORT  usCRTC_OverscanBottom;",
          "2669:   USHORT  usCRTC_OverscanTop;",
          "2670:   USHORT  usReserve;",
          "2671:   UCHAR   ucInternalModeNumber;",
          "2672:   UCHAR   ucRefreshRate;",
          "2673: }ATOM_MODE_TIMING;",
          "2675: typedef struct _ATOM_DTD_FORMAT",
          "2676: {",
          "2677:   USHORT  usPixClk;",
          "2678:   USHORT  usHActive;",
          "2679:   USHORT  usHBlanking_Time;",
          "2680:   USHORT  usVActive;",
          "2681:   USHORT  usVBlanking_Time;",
          "2682:   USHORT  usHSyncOffset;",
          "2683:   USHORT  usHSyncWidth;",
          "2684:   USHORT  usVSyncOffset;",
          "2685:   USHORT  usVSyncWidth;",
          "2686:   USHORT  usImageHSize;",
          "2687:   USHORT  usImageVSize;",
          "2688:   UCHAR   ucHBorder;",
          "2689:   UCHAR   ucVBorder;",
          "2690:   ATOM_MODE_MISC_INFO_ACCESS susModeMiscInfo;",
          "2691:   UCHAR   ucInternalModeNumber;",
          "2692:   UCHAR   ucRefreshRate;",
          "2693: }ATOM_DTD_FORMAT;",
          "2706: typedef struct _ATOM_LVDS_INFO",
          "2707: {",
          "2708:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "2709:   ATOM_DTD_FORMAT     sLCDTiming;",
          "2710:   USHORT              usModePatchTableOffset;",
          "2711:   USHORT              usSupportedRefreshRate;     //Refer to panel info table in ATOMBIOS extension Spec.",
          "2712:   USHORT              usOffDelayInMs;",
          "2713:   UCHAR               ucPowerSequenceDigOntoDEin10Ms;",
          "2714:   UCHAR               ucPowerSequenceDEtoBLOnin10Ms;",
          "2715:   UCHAR               ucLVDS_Misc;               // Bit0:{=0:single, =1:dual},Bit1 {=0:666RGB, =1:888RGB},Bit2:3:{Grey level}",
          "2719:   UCHAR               ucPanelDefaultRefreshRate;",
          "2720:   UCHAR               ucPanelIdentification;",
          "2721:   UCHAR               ucSS_Id;",
          "2722: }ATOM_LVDS_INFO;",
          "2726: typedef struct _ATOM_LVDS_INFO_V12",
          "2727: {",
          "2728:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "2729:   ATOM_DTD_FORMAT     sLCDTiming;",
          "2730:   USHORT              usExtInfoTableOffset;",
          "2731:   USHORT              usSupportedRefreshRate;     //Refer to panel info table in ATOMBIOS extension Spec.",
          "2732:   USHORT              usOffDelayInMs;",
          "2733:   UCHAR               ucPowerSequenceDigOntoDEin10Ms;",
          "2734:   UCHAR               ucPowerSequenceDEtoBLOnin10Ms;",
          "2735:   UCHAR               ucLVDS_Misc;               // Bit0:{=0:single, =1:dual},Bit1 {=0:666RGB, =1:888RGB},Bit2:3:{Grey level}",
          "2739:   UCHAR               ucPanelDefaultRefreshRate;",
          "2740:   UCHAR               ucPanelIdentification;",
          "2741:   UCHAR               ucSS_Id;",
          "2742:   USHORT              usLCDVenderID;",
          "2743:   USHORT              usLCDProductID;",
          "2744:   UCHAR               ucLCDPanel_SpecialHandlingCap;",
          "2745:  UCHAR        ucPanelInfoSize;     //  start from ATOM_DTD_FORMAT to end of panel info, include ExtInfoTable",
          "2746:   UCHAR               ucReserved[2];",
          "2747: }ATOM_LVDS_INFO_V12;",
          "2753: #define LCDPANEL_CAP_READ_EDID                  0x1",
          "2758: #define LCDPANEL_CAP_DRR_SUPPORTED              0x2",
          "2761: #define LCDPANEL_CAP_eDP                        0x4",
          "2775: #define PANEL_COLOR_BIT_DEPTH_MASK    0x70",
          "2778: #define PANEL_RANDOM_DITHER   0x80",
          "2779: #define PANEL_RANDOM_DITHER_MASK   0x80",
          "2784: typedef struct  _ATOM_PATCH_RECORD_MODE",
          "2785: {",
          "2786:   UCHAR     ucRecordType;",
          "2787:   USHORT    usHDisp;",
          "2788:   USHORT    usVDisp;",
          "2789: }ATOM_PATCH_RECORD_MODE;",
          "2791: typedef struct  _ATOM_LCD_RTS_RECORD",
          "2792: {",
          "2793:   UCHAR     ucRecordType;",
          "2794:   UCHAR     ucRTSValue;",
          "2795: }ATOM_LCD_RTS_RECORD;",
          "2799: typedef struct  _ATOM_LCD_MODE_CONTROL_CAP",
          "2800: {",
          "2801:   UCHAR     ucRecordType;",
          "2802:   USHORT    usLCDCap;",
          "2803: }ATOM_LCD_MODE_CONTROL_CAP;",
          "2809: typedef struct _ATOM_FAKE_EDID_PATCH_RECORD",
          "2810: {",
          "2811:   UCHAR ucRecordType;",
          "2812:   UCHAR ucFakeEDIDLength;",
          "2813:   UCHAR ucFakeEDIDString[1];    // This actually has ucFakeEdidLength elements.",
          "2816: typedef struct  _ATOM_PANEL_RESOLUTION_PATCH_RECORD",
          "2817: {",
          "2818:    UCHAR    ucRecordType;",
          "2819:    USHORT  usHSize;",
          "2820:    USHORT  usVSize;",
          "2821: }ATOM_PANEL_RESOLUTION_PATCH_RECORD;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2321: #define ATOM_MAX_SS_ENTRY                      16",
          "2325: #define ATOM_SS_DOWN_SPREAD_MODE_MASK          0x00000000",
          "2326: #define ATOM_SS_DOWN_SPREAD_MODE               0x00000000",
          "",
          "[Removed Lines]",
          "2311: typedef struct _ATOM_SPREAD_SPECTRUM_ASSIGNMENT {",
          "2312:  USHORT usSpreadSpectrumPercentage;",
          "2314:  UCHAR ucSS_Step;",
          "2315:  UCHAR ucSS_Delay;",
          "2316:  UCHAR ucSS_Id;",
          "2317:  UCHAR ucRecommendedRef_Div;",
          "2319: } ATOM_SPREAD_SPECTRUM_ASSIGNMENT;",
          "",
          "[Added Lines]",
          "2834: typedef struct _ATOM_SPREAD_SPECTRUM_ASSIGNMENT",
          "2835: {",
          "2836:   USHORT              usSpreadSpectrumPercentage;",
          "2837:   UCHAR               ucSpreadSpectrumType;     //Bit1=0 Down Spread,=1 Center Spread. Bit1=1 Ext. =0 Int. Bit2=1: PCIE REFCLK SS =0 iternal PPLL SS  Others:TBD",
          "2838:   UCHAR               ucSS_Step;",
          "2839:   UCHAR               ucSS_Delay;",
          "2840:   UCHAR               ucSS_Id;",
          "2841:   UCHAR               ucRecommendedRef_Div;",
          "2842:   UCHAR               ucSS_Range;               //it was reserved for V11",
          "2843: }ATOM_SPREAD_SPECTRUM_ASSIGNMENT;",
          "2846: #define ATOM_DP_SS_ID1             0x0f1   // SS ID for internal DP stream at 2.7Ghz. if ATOM_DP_SS_ID2 does not exist in SS_InfoTable, it is used for internal DP stream at 1.62Ghz as well.",
          "2847: #define ATOM_DP_SS_ID2             0x0f2   // SS ID for internal DP stream at 1.62Ghz, if it exists in SS_InfoTable.",
          "2848: #define ATOM_LVLINK_2700MHz_SS_ID              0x0f3      // SS ID for LV link translator chip at 2.7Ghz",
          "2849: #define ATOM_LVLINK_1620MHz_SS_ID              0x0f4      // SS ID for LV link translator chip at 1.62Ghz",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2329: #define ATOM_INTERNAL_SS_MASK                  0x00000000",
          "2330: #define ATOM_EXTERNAL_SS_MASK                  0x00000002",
          "2331: #define EXEC_SS_STEP_SIZE_SHIFT                2",
          "2333: #define ACTIVEDATA_TO_BLON_DELAY_SHIFT         4",
          "2355: #define NTSC_SUPPORT          0x1",
          "2356: #define NTSCJ_SUPPORT         0x2",
          "",
          "[Removed Lines]",
          "2332: #define EXEC_SS_DELAY_SHIFT                    4",
          "2335: typedef struct _ATOM_SPREAD_SPECTRUM_INFO {",
          "2336:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2337:  ATOM_SPREAD_SPECTRUM_ASSIGNMENT asSS_Info[ATOM_MAX_SS_ENTRY];",
          "2338: } ATOM_SPREAD_SPECTRUM_INFO;",
          "",
          "[Added Lines]",
          "2859: #define EXEC_SS_DELAY_SHIFT                    4",
          "2862: typedef struct _ATOM_SPREAD_SPECTRUM_INFO",
          "2863: {",
          "2864:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "2865:   ATOM_SPREAD_SPECTRUM_ASSIGNMENT   asSS_Info[ATOM_MAX_SS_ENTRY];",
          "2866: }ATOM_SPREAD_SPECTRUM_INFO;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2365: #define MAX_SUPPORTED_TV_TIMING    2",
          "2377: #define MAX_SUPPORTED_TV_TIMING_V1_2    3",
          "2397: #ifndef VESA_MEMORY_IN_64K_BLOCK",
          "2399: #endif",
          "2403: #define ATOM_HWICON_INFOTABLE_SIZE      32",
          "2404: #define MAX_DTD_MODE_IN_VRAM            6",
          "2407: #define DFP_ENCODER_TYPE_OFFSET     0x80",
          "2408: #define DP_ENCODER_LANE_NUM_OFFSET   0x84",
          "2409: #define DP_ENCODER_LINK_RATE_OFFSET   0x88",
          "",
          "[Removed Lines]",
          "2367: typedef struct _ATOM_ANALOG_TV_INFO {",
          "2368:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2369:  UCHAR ucTV_SupportedStandard;",
          "2370:  UCHAR ucTV_BootUpDefaultStandard;",
          "2371:  UCHAR ucExt_TV_ASIC_ID;",
          "2372:  UCHAR ucExt_TV_ASIC_SlaveAddr;",
          "2374:  ATOM_MODE_TIMING aModeTimings[MAX_SUPPORTED_TV_TIMING];",
          "2375: } ATOM_ANALOG_TV_INFO;",
          "2379: typedef struct _ATOM_ANALOG_TV_INFO_V1_2 {",
          "2380:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2381:  UCHAR                    ucTV_SupportedStandard;",
          "2382:  UCHAR                    ucTV_BootUpDefaultStandard;",
          "2383:  UCHAR                    ucExt_TV_ASIC_ID;",
          "2384:  UCHAR                    ucExt_TV_ASIC_SlaveAddr;",
          "2385:  ATOM_DTD_FORMAT          aModeTimings[MAX_SUPPORTED_TV_TIMING];",
          "2386: } ATOM_ANALOG_TV_INFO_V1_2;",
          "",
          "[Added Lines]",
          "2895: typedef struct _ATOM_ANALOG_TV_INFO",
          "2896: {",
          "2897:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "2898:   UCHAR                    ucTV_SupportedStandard;",
          "2899:   UCHAR                    ucTV_BootUpDefaultStandard;",
          "2900:   UCHAR                    ucExt_TV_ASIC_ID;",
          "2901:   UCHAR                    ucExt_TV_ASIC_SlaveAddr;",
          "2903:   ATOM_MODE_TIMING         aModeTimings[MAX_SUPPORTED_TV_TIMING];",
          "2904: }ATOM_ANALOG_TV_INFO;",
          "2908: typedef struct _ATOM_ANALOG_TV_INFO_V1_2",
          "2909: {",
          "2910:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "2911:   UCHAR                    ucTV_SupportedStandard;",
          "2912:   UCHAR                    ucTV_BootUpDefaultStandard;",
          "2913:   UCHAR                    ucExt_TV_ASIC_ID;",
          "2914:   UCHAR                    ucExt_TV_ASIC_SlaveAddr;",
          "2915:   ATOM_DTD_FORMAT          aModeTimings[MAX_SUPPORTED_TV_TIMING];",
          "2916: }ATOM_ANALOG_TV_INFO_V1_2;",
          "2918: typedef struct _ATOM_DPCD_INFO",
          "2919: {",
          "2920:   UCHAR   ucRevisionNumber;        //10h : Revision 1.0; 11h : Revision 1.1",
          "2921:   UCHAR   ucMaxLinkRate;           //06h : 1.62Gbps per lane; 0Ah = 2.7Gbps per lane",
          "2922:   UCHAR   ucMaxLane;               //Bits 4:0 = MAX_LANE_COUNT (1/2/4). Bit 7 = ENHANCED_FRAME_CAP",
          "2923:   UCHAR   ucMaxDownSpread;         //Bit0 = 0: No Down spread; Bit0 = 1: 0.5% (Subject to change according to DP spec)",
          "2924: }ATOM_DPCD_INFO;",
          "2926: #define ATOM_DPCD_MAX_LANE_MASK    0x1F",
          "2938: #define VESA_MEMORY_IN_64K_BLOCK        0x100       //256*64K=16Mb (Max. VESA memory is 16Mb!)",
          "2941: #define ATOM_EDID_RAW_DATASIZE          256         //In Bytes",
          "2942: #define ATOM_HWICON_SURFACE_SIZE        4096        //In Bytes",
          "2945: #define ATOM_DTD_MODE_SUPPORT_TBL_SIZE  (MAX_DTD_MODE_IN_VRAM*28)    //28= (SIZEOF ATOM_DTD_FORMAT)",
          "2946: #define ATOM_STD_MODE_SUPPORT_TBL_SIZE  32*8                         //32 is a predefined number,8= (SIZEOF ATOM_STD_FORMAT)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2418: #define ATOM_LCD1_EDID_ADDR             (ATOM_CRT1_STD_MODE_TBL_ADDR + ATOM_STD_MODE_SUPPORT_TBL_SIZE)",
          "2419: #define ATOM_LCD1_DTD_MODE_TBL_ADDR     (ATOM_LCD1_EDID_ADDR + ATOM_EDID_RAW_DATASIZE)",
          "2422: #define ATOM_TV1_DTD_MODE_TBL_ADDR      (ATOM_LCD1_STD_MODE_TBL_ADDR + ATOM_STD_MODE_SUPPORT_TBL_SIZE)",
          "",
          "[Removed Lines]",
          "2420: #define ATOM_LCD1_STD_MODE_TBL_ADDR (ATOM_LCD1_DTD_MODE_TBL_ADDR + ATOM_DTD_MODE_SUPPORT_TBL_SIZE)",
          "",
          "[Added Lines]",
          "2960: #define ATOM_LCD1_STD_MODE_TBL_ADDR    (ATOM_LCD1_DTD_MODE_TBL_ADDR + ATOM_DTD_MODE_SUPPORT_TBL_SIZE)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2432: #define ATOM_LCD2_EDID_ADDR             (ATOM_CRT2_STD_MODE_TBL_ADDR + ATOM_STD_MODE_SUPPORT_TBL_SIZE)",
          "2433: #define ATOM_LCD2_DTD_MODE_TBL_ADDR     (ATOM_LCD2_EDID_ADDR + ATOM_EDID_RAW_DATASIZE)",
          "2441: #define ATOM_DFP2_DTD_MODE_TBL_ADDR     (ATOM_DFP2_EDID_ADDR + ATOM_EDID_RAW_DATASIZE)",
          "2442: #define ATOM_DFP2_STD_MODE_TBL_ADDR     (ATOM_DFP2_DTD_MODE_TBL_ADDR + ATOM_DTD_MODE_SUPPORT_TBL_SIZE)",
          "",
          "[Removed Lines]",
          "2434: #define ATOM_LCD2_STD_MODE_TBL_ADDR (ATOM_LCD2_DTD_MODE_TBL_ADDR + ATOM_DTD_MODE_SUPPORT_TBL_SIZE)",
          "2436: #define ATOM_TV2_EDID_ADDR              (ATOM_LCD2_STD_MODE_TBL_ADDR + ATOM_STD_MODE_SUPPORT_TBL_SIZE)",
          "2437: #define ATOM_TV2_DTD_MODE_TBL_ADDR      (ATOM_TV2_EDID_ADDR + ATOM_EDID_RAW_DATASIZE)",
          "2438: #define ATOM_TV2_STD_MODE_TBL_ADDR   (ATOM_TV2_DTD_MODE_TBL_ADDR + ATOM_DTD_MODE_SUPPORT_TBL_SIZE)",
          "2440: #define ATOM_DFP2_EDID_ADDR             (ATOM_TV2_STD_MODE_TBL_ADDR + ATOM_STD_MODE_SUPPORT_TBL_SIZE)",
          "",
          "[Added Lines]",
          "2974: #define ATOM_LCD2_STD_MODE_TBL_ADDR    (ATOM_LCD2_DTD_MODE_TBL_ADDR + ATOM_DTD_MODE_SUPPORT_TBL_SIZE)",
          "2976: #define ATOM_DFP6_EDID_ADDR             (ATOM_LCD2_STD_MODE_TBL_ADDR + ATOM_STD_MODE_SUPPORT_TBL_SIZE)",
          "2977: #define ATOM_DFP6_DTD_MODE_TBL_ADDR     (ATOM_DFP6_EDID_ADDR + ATOM_EDID_RAW_DATASIZE)",
          "2978: #define ATOM_DFP6_STD_MODE_TBL_ADDR     (ATOM_DFP6_DTD_MODE_TBL_ADDR + ATOM_DTD_MODE_SUPPORT_TBL_SIZE)",
          "2980: #define ATOM_DFP2_EDID_ADDR             (ATOM_DFP6_STD_MODE_TBL_ADDR + ATOM_STD_MODE_SUPPORT_TBL_SIZE)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2457: #define ATOM_DFP5_DTD_MODE_TBL_ADDR     (ATOM_DFP5_EDID_ADDR + ATOM_EDID_RAW_DATASIZE)",
          "2458: #define ATOM_DFP5_STD_MODE_TBL_ADDR     (ATOM_DFP5_DTD_MODE_TBL_ADDR + ATOM_DTD_MODE_SUPPORT_TBL_SIZE)",
          "2466: #define ATOM_VRAM_RESERVE_SIZE         ((((ATOM_STACK_STORAGE_END - ATOM_HWICON1_SURFACE_ADDR)>>10)+4)&0xFFFC)",
          "2468: #define ATOM_VRAM_OPERATION_FLAGS_MASK         0xC0000000L",
          "2469: #define ATOM_VRAM_OPERATION_FLAGS_SHIFT        30",
          "2470: #define ATOM_VRAM_BLOCK_NEEDS_NO_RESERVATION   0x1",
          "2471: #define ATOM_VRAM_BLOCK_NEEDS_RESERVATION      0x0",
          "2482: #define ATOM_MAX_FIRMWARE_VRAM_USAGE_INFO   1",
          "2513: #define GPIO_PIN_ACTIVE_HIGH          0x1",
          "2515: #define MAX_SUPPORTED_CV_STANDARDS    5",
          "2529: #define ATOM_CV_RESTRICT_FORMAT_SELECTION           0x2",
          "2596: #define ATOM_COMPONENT_VIDEO_INFO_LAST  ATOM_COMPONENT_VIDEO_INFO_V21",
          "2656: #define ATOM_HPD_INT_RECORD_TYPE                       2",
          "2657: #define ATOM_OUTPUT_PROTECTION_RECORD_TYPE             3",
          "2658: #define ATOM_CONNECTOR_DEVICE_TAG_RECORD_TYPE          4",
          "2661: #define ATOM_CONNECTOR_CVTV_SHARE_DIN_RECORD_TYPE      7",
          "2663: #define ATOM_OBJECT_GPIO_CNTL_RECORD_TYPE              9",
          "2664: #define ATOM_ENCODER_DVO_CF_RECORD_TYPE               10",
          "2665: #define ATOM_CONNECTOR_CF_RECORD_TYPE                 11",
          "2666: #define ATOM_CONNECTOR_HARDCODE_DTD_RECORD_TYPE       12",
          "2667: #define ATOM_CONNECTOR_PCIE_SUBCONNECTOR_RECORD_TYPE  13",
          "2758: #define GPIO_PIN_TYPE_INPUT             0x00",
          "2759: #define GPIO_PIN_TYPE_OUTPUT            0x10",
          "2760: #define GPIO_PIN_TYPE_HW_CONTROL        0x20",
          "2763: #define GPIO_PIN_OUTPUT_STATE_MASK      0x01",
          "2764: #define GPIO_PIN_OUTPUT_STATE_SHIFT     0",
          "2765: #define GPIO_PIN_STATE_ACTIVE_LOW       0x0",
          "2766: #define GPIO_PIN_STATE_ACTIVE_HIGH      0x1",
          "2775: #define ATOM_CONNECTOR_CF_RECORD_CONNECTED_UPPER12BITBUNDLEA   1",
          "2776: #define ATOM_CONNECTOR_CF_RECORD_CONNECTED_LOWER12BITBUNDLEB   2",
          "2813: #define ATOM_ROUTER_MUX_PIN_STATE_MASK        0x0f",
          "2814: #define ATOM_ROUTER_MUX_PIN_SINGLE_STATE_COMPLEMENT  0x01",
          "2858: #define VOLTAGE_CONTROLLED_BY_HW       0x00",
          "2859: #define VOLTAGE_CONTROLLED_BY_I2C_MASK    0x7F",
          "2860: #define VOLTAGE_CONTROLLED_BY_GPIO      0x80",
          "2895: #define ATOM_ASIC_PROFILE_ID_EFUSE_PERFORMANCE_VOLTAGE   1",
          "2896: #define ATOM_ASIC_PROFILE_ID_EFUSE_THERMAL_VOLTAGE     2",
          "2922: #define POWERSOURCE_PCIE_ID1      0x00",
          "2923: #define POWERSOURCE_6PIN_CONNECTOR_ID1 0x01",
          "2924: #define POWERSOURCE_8PIN_CONNECTOR_ID1 0x02",
          "2925: #define POWERSOURCE_6PIN_CONNECTOR_ID2 0x04",
          "2926: #define POWERSOURCE_8PIN_CONNECTOR_ID2 0x08",
          "2929: #define POWER_SENSOR_ALWAYS       0x00",
          "2930: #define POWER_SENSOR_GPIO        0x01",
          "2931: #define POWER_SENSOR_I2C        0x02",
          "2937: #define ICS91719  1",
          "2938: #define ICS91720  2",
          "2962: #define ATOM_MCLK_SS_INFO         ATOM_ASIC_MVDD_INFO",
          "2977: #define ASIC_INTERNAL_MEMORY_SS   1",
          "2978: #define ASIC_INTERNAL_ENGINE_SS   2",
          "2987: #define ATOM_DEVICE_CONNECT_INFO_DEF  0",
          "2988: #define ATOM_ROM_LOCATION_DEF         1",
          "2989: #define ATOM_TV_STANDARD_DEF          2",
          "",
          "[Removed Lines]",
          "2460: #define ATOM_DP_TRAINING_TBL_ADDR (ATOM_DFP5_STD_MODE_TBL_ADDR+ATOM_STD_MODE_SUPPORT_TBL_SIZE)",
          "2462: #define ATOM_STACK_STORAGE_START        (ATOM_DP_TRAINING_TBL_ADDR + 256)",
          "2463: #define ATOM_STACK_STORAGE_END          (ATOM_STACK_STORAGE_START + 512)",
          "2484: typedef struct _ATOM_FIRMWARE_VRAM_RESERVE_INFO {",
          "2485:  ULONG ulStartAddrUsedByFirmware;",
          "2486:  USHORT usFirmwareUseInKb;",
          "2487:  USHORT usReserved;",
          "2488: } ATOM_FIRMWARE_VRAM_RESERVE_INFO;",
          "2490: typedef struct _ATOM_VRAM_USAGE_BY_FIRMWARE {",
          "2491:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2492:  ATOM_FIRMWARE_VRAM_RESERVE_INFO",
          "2493:      asFirmwareVramReserveInfo[ATOM_MAX_FIRMWARE_VRAM_USAGE_INFO];",
          "2494: } ATOM_VRAM_USAGE_BY_FIRMWARE;",
          "2499: typedef struct _ATOM_GPIO_PIN_ASSIGNMENT {",
          "2500:  USHORT usGpioPin_AIndex;",
          "2501:  UCHAR ucGpioPinBitShift;",
          "2502:  UCHAR ucGPIO_ID;",
          "2503: } ATOM_GPIO_PIN_ASSIGNMENT;",
          "2505: typedef struct _ATOM_GPIO_PIN_LUT {",
          "2506:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2507:  ATOM_GPIO_PIN_ASSIGNMENT asGPIO_Pin[1];",
          "2508: } ATOM_GPIO_PIN_LUT;",
          "2522: typedef struct _ATOM_GPIO_INFO {",
          "2523:  USHORT usAOffset;",
          "2524:  UCHAR ucSettings;",
          "2525:  UCHAR ucReserved;",
          "2526: } ATOM_GPIO_INFO;",
          "2539: #define ATOM_CV_LINE3_ASPECTRATIO_16_9_GPIO_SHIFT   0x0",
          "2544: #define ATOM_CV_LINE3_ASPECTRATIO_4_3_LETBOX_GPIO_SHIFT 0x2",
          "2549: #define ATOM_CV_LINE3_ASPECTRATIO_4_3_GPIO_SHIFT    0x4",
          "2559: typedef struct _ATOM_COMPONENT_VIDEO_INFO {",
          "2560:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2561:  USHORT usMask_PinRegisterIndex;",
          "2562:  USHORT usEN_PinRegisterIndex;",
          "2563:  USHORT usY_PinRegisterIndex;",
          "2564:  USHORT usA_PinRegisterIndex;",
          "2565:  UCHAR ucBitShift;",
          "2568:  UCHAR ucMiscInfo;",
          "2569:  UCHAR uc480i;",
          "2570:  UCHAR uc480p;",
          "2571:  UCHAR uc720p;",
          "2572:  UCHAR uc1080i;",
          "2573:  UCHAR ucLetterBoxMode;",
          "2574:  UCHAR ucReserved[3];",
          "2576:  ATOM_GPIO_INFO aWbGpioStateBlock[MAX_SUPPORTED_CV_STANDARDS];",
          "2577:  ATOM_DTD_FORMAT aModeTimings[MAX_SUPPORTED_CV_STANDARDS];",
          "2578: } ATOM_COMPONENT_VIDEO_INFO;",
          "2582: typedef struct _ATOM_COMPONENT_VIDEO_INFO_V21 {",
          "2583:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2584:  UCHAR ucMiscInfo;",
          "2585:  UCHAR uc480i;",
          "2586:  UCHAR uc480p;",
          "2587:  UCHAR uc720p;",
          "2588:  UCHAR uc1080i;",
          "2589:  UCHAR ucReserved;",
          "2590:  UCHAR ucLetterBoxMode;",
          "2592:  ATOM_GPIO_INFO aWbGpioStateBlock[MAX_SUPPORTED_CV_STANDARDS];",
          "2593:  ATOM_DTD_FORMAT aModeTimings[MAX_SUPPORTED_CV_STANDARDS];",
          "2594: } ATOM_COMPONENT_VIDEO_INFO_V21;",
          "2601: typedef struct _ATOM_OBJECT_HEADER {",
          "2602:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2603:  USHORT usDeviceSupport;",
          "2604:  USHORT usConnectorObjectTableOffset;",
          "2605:  USHORT usRouterObjectTableOffset;",
          "2606:  USHORT usEncoderObjectTableOffset;",
          "2608:  USHORT usDisplayPathTableOffset;",
          "2609: } ATOM_OBJECT_HEADER;",
          "2611: typedef struct _ATOM_DISPLAY_OBJECT_PATH {",
          "2617: } ATOM_DISPLAY_OBJECT_PATH;",
          "2619: typedef struct _ATOM_DISPLAY_OBJECT_PATH_TABLE {",
          "2620:  UCHAR ucNumOfDispPath;",
          "2621:  UCHAR ucVersion;",
          "2622:  UCHAR ucPadding[2];",
          "2623:  ATOM_DISPLAY_OBJECT_PATH asDispPath[1];",
          "2624: } ATOM_DISPLAY_OBJECT_PATH_TABLE;",
          "2627: {",
          "2628:  USHORT usObjectID;",
          "2629:  USHORT usSrcDstTableOffset;",
          "2631:  USHORT usReserved;",
          "2632: } ATOM_OBJECT;",
          "2635: {",
          "2636:  UCHAR ucNumberOfObjects;",
          "2637:  UCHAR ucPadding[3];",
          "2638:  ATOM_OBJECT asObjects[1];",
          "2639: } ATOM_OBJECT_TABLE;",
          "2642: {",
          "2643:  UCHAR ucNumberOfSrc;",
          "2644:  USHORT usSrcObjectID[1];",
          "2645:  UCHAR ucNumberOfDst;",
          "2646:  USHORT usDstObjectID[1];",
          "2647: } ATOM_SRC_DST_TABLE_FOR_ONE_OBJECT;",
          "2650: typedef struct _ATOM_COMMON_RECORD_HEADER {",
          "2653: } ATOM_COMMON_RECORD_HEADER;",
          "2655: #define ATOM_I2C_RECORD_TYPE                           1",
          "2668: #define ATOM_ROUTER_DDC_PATH_SELECT_RECORD_TYPE    14",
          "2669: #define ATOM_ROUTER_DATA_CLOCK_PATH_SELECT_RECORD_TYPE     15",
          "2672: #define ATOM_MAX_OBJECT_RECORD_NUMBER             ATOM_CONNECTOR_CF_RECORD_TYPE",
          "2674: typedef struct _ATOM_I2C_RECORD {",
          "2675:  ATOM_COMMON_RECORD_HEADER sheader;",
          "2676:  ATOM_I2C_ID_CONFIG sucI2cId;",
          "2678: } ATOM_I2C_RECORD;",
          "2680: typedef struct _ATOM_HPD_INT_RECORD {",
          "2681:  ATOM_COMMON_RECORD_HEADER sheader;",
          "2683:  UCHAR ucPlugged_PinState;",
          "2684: } ATOM_HPD_INT_RECORD;",
          "2686: typedef struct _ATOM_OUTPUT_PROTECTION_RECORD {",
          "2687:  ATOM_COMMON_RECORD_HEADER sheader;",
          "2688:  UCHAR ucProtectionFlag;",
          "2689:  UCHAR ucReserved;",
          "2690: } ATOM_OUTPUT_PROTECTION_RECORD;",
          "2692: typedef struct _ATOM_CONNECTOR_DEVICE_TAG {",
          "2695:  USHORT usPadding;",
          "2696: } ATOM_CONNECTOR_DEVICE_TAG;",
          "2698: typedef struct _ATOM_CONNECTOR_DEVICE_TAG_RECORD {",
          "2699:  ATOM_COMMON_RECORD_HEADER sheader;",
          "2700:  UCHAR ucNumberOfDevice;",
          "2701:  UCHAR ucReserved;",
          "2703: } ATOM_CONNECTOR_DEVICE_TAG_RECORD;",
          "2705: typedef struct _ATOM_CONNECTOR_DVI_EXT_INPUT_RECORD {",
          "2706:  ATOM_COMMON_RECORD_HEADER sheader;",
          "2707:  UCHAR ucConfigGPIOID;",
          "2709:  UCHAR ucFlowinGPIPID;",
          "2710:  UCHAR ucExtInGPIPID;",
          "2711: } ATOM_CONNECTOR_DVI_EXT_INPUT_RECORD;",
          "2713: typedef struct _ATOM_ENCODER_FPGA_CONTROL_RECORD {",
          "2714:  ATOM_COMMON_RECORD_HEADER sheader;",
          "2715:  UCHAR ucCTL1GPIO_ID;",
          "2717:  UCHAR ucCTL2GPIO_ID;",
          "2719:  UCHAR ucCTL3GPIO_ID;",
          "2721:  UCHAR ucCTLFPGA_IN_ID;",
          "2722:  UCHAR ucPadding[3];",
          "2723: } ATOM_ENCODER_FPGA_CONTROL_RECORD;",
          "2725: typedef struct _ATOM_CONNECTOR_CVTV_SHARE_DIN_RECORD {",
          "2726:  ATOM_COMMON_RECORD_HEADER sheader;",
          "2729: } ATOM_CONNECTOR_CVTV_SHARE_DIN_RECORD;",
          "2731: typedef struct _ATOM_JTAG_RECORD {",
          "2732:  ATOM_COMMON_RECORD_HEADER sheader;",
          "2733:  UCHAR ucTMSGPIO_ID;",
          "2735:  UCHAR ucTCKGPIO_ID;",
          "2737:  UCHAR ucTDOGPIO_ID;",
          "2739:  UCHAR ucTDIGPIO_ID;",
          "2741:  UCHAR ucPadding[2];",
          "2742: } ATOM_JTAG_RECORD;",
          "2745: typedef struct _ATOM_GPIO_PIN_CONTROL_PAIR {",
          "2748: } ATOM_GPIO_PIN_CONTROL_PAIR;",
          "2750: typedef struct _ATOM_OBJECT_GPIO_CNTL_RECORD {",
          "2751:  ATOM_COMMON_RECORD_HEADER sheader;",
          "2755: } ATOM_OBJECT_GPIO_CNTL_RECORD;",
          "2768: typedef struct _ATOM_ENCODER_DVO_CF_RECORD {",
          "2769:  ATOM_COMMON_RECORD_HEADER sheader;",
          "2771:  UCHAR ucPadding[2];",
          "2772: } ATOM_ENCODER_DVO_CF_RECORD;",
          "2778: typedef struct _ATOM_CONNECTOR_CF_RECORD {",
          "2779:  ATOM_COMMON_RECORD_HEADER sheader;",
          "2780:  USHORT usMaxPixClk;",
          "2781:  UCHAR ucFlowCntlGpioId;",
          "2782:  UCHAR ucSwapCntlGpioId;",
          "2783:  UCHAR ucConnectedDvoBundle;",
          "2784:  UCHAR ucPadding;",
          "2785: } ATOM_CONNECTOR_CF_RECORD;",
          "2787: typedef struct _ATOM_CONNECTOR_HARDCODE_DTD_RECORD {",
          "2788:  ATOM_COMMON_RECORD_HEADER sheader;",
          "2789:  ATOM_DTD_FORMAT asTiming;",
          "2790: } ATOM_CONNECTOR_HARDCODE_DTD_RECORD;",
          "2792: typedef struct _ATOM_CONNECTOR_PCIE_SUBCONNECTOR_RECORD {",
          "2795:  UCHAR ucReserved;",
          "2796: } ATOM_CONNECTOR_PCIE_SUBCONNECTOR_RECORD;",
          "2798: typedef struct _ATOM_ROUTER_DDC_PATH_SELECT_RECORD {",
          "2799:  ATOM_COMMON_RECORD_HEADER sheader;",
          "2801:  UCHAR ucMuxControlPin;",
          "2803: } ATOM_ROUTER_DDC_PATH_SELECT_RECORD;",
          "2805: typedef struct _ATOM_ROUTER_DATA_CLOCK_PATH_SELECT_RECORD {",
          "2806:  ATOM_COMMON_RECORD_HEADER sheader;",
          "2807:  UCHAR ucMuxType;",
          "2808:  UCHAR ucMuxControlPin;",
          "2810: } ATOM_ROUTER_DATA_CLOCK_PATH_SELECT_RECORD;",
          "2819: typedef struct _ATOM_VOLTAGE_INFO_HEADER {",
          "2822:  UCHAR ucNumOfVoltageEntries;",
          "2823:  UCHAR ucBytesPerVoltageEntry;",
          "2825:  UCHAR ucDefaultVoltageEntry;",
          "2826:  UCHAR ucVoltageControlI2cLine;",
          "2827:  UCHAR ucVoltageControlAddress;",
          "2828:  UCHAR ucVoltageControlOffset;",
          "2829: } ATOM_VOLTAGE_INFO_HEADER;",
          "2831: typedef struct _ATOM_VOLTAGE_INFO {",
          "2832:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2833:  ATOM_VOLTAGE_INFO_HEADER viHeader;",
          "2835: } ATOM_VOLTAGE_INFO;",
          "2837: typedef struct _ATOM_VOLTAGE_FORMULA {",
          "2843:  UCHAR ucReserved;",
          "2845: } ATOM_VOLTAGE_FORMULA;",
          "2847: typedef struct _ATOM_VOLTAGE_CONTROL {",
          "2849:  UCHAR ucVoltageControlI2cLine;",
          "2850:  UCHAR ucVoltageControlAddress;",
          "2851:  UCHAR ucVoltageControlOffset;",
          "2854:  UCHAR ucReserved;",
          "2855: } ATOM_VOLTAGE_CONTROL;",
          "2864: #define VOLTAGE_CONTROL_ID_DS4402       0x04",
          "2866: typedef struct _ATOM_VOLTAGE_OBJECT {",
          "2871: } ATOM_VOLTAGE_OBJECT;",
          "2873: typedef struct _ATOM_VOLTAGE_OBJECT_INFO {",
          "2874:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2876: } ATOM_VOLTAGE_OBJECT_INFO;",
          "2878: typedef struct _ATOM_LEAKID_VOLTAGE {",
          "2879:  UCHAR ucLeakageId;",
          "2880:  UCHAR ucReserved;",
          "2881:  USHORT usVoltage;",
          "2882: } ATOM_LEAKID_VOLTAGE;",
          "2884: typedef struct _ATOM_ASIC_PROFILE_VOLTAGE {",
          "2885:  UCHAR ucProfileId;",
          "2886:  UCHAR ucReserved;",
          "2887:  USHORT usSize;",
          "2888:  USHORT usEfuseSpareStartAddr;",
          "2891: } ATOM_ASIC_PROFILE_VOLTAGE;",
          "2894: #define ATOM_ASIC_PROFILE_ID_EFUSE_VOLTAGE   1",
          "2898: typedef struct _ATOM_ASIC_PROFILING_INFO {",
          "2899:  ATOM_COMMON_TABLE_HEADER asHeader;",
          "2900:  ATOM_ASIC_PROFILE_VOLTAGE asVoltage;",
          "2901: } ATOM_ASIC_PROFILING_INFO;",
          "2903: typedef struct _ATOM_POWER_SOURCE_OBJECT {",
          "2913: } ATOM_POWER_SOURCE_OBJECT;",
          "2915: typedef struct _ATOM_POWER_SOURCE_INFO {",
          "2916:  ATOM_COMMON_TABLE_HEADER asHeader;",
          "2917:  UCHAR asPwrbehave[16];",
          "2918:  ATOM_POWER_SOURCE_OBJECT asPwrObj[1];",
          "2919: } ATOM_POWER_SOURCE_INFO;",
          "2941: typedef struct _ATOM_I2C_DATA_RECORD {",
          "2944: } ATOM_I2C_DATA_RECORD;",
          "2947: typedef struct _ATOM_I2C_DEVICE_SETUP_INFO {",
          "2952:  ATOM_I2C_DATA_RECORD asI2CData[1];",
          "2953: } ATOM_I2C_DEVICE_SETUP_INFO;",
          "2956: typedef struct _ATOM_ASIC_MVDD_INFO {",
          "2957:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2958:  ATOM_I2C_DEVICE_SETUP_INFO asI2CSetup[1];",
          "2959: } ATOM_ASIC_MVDD_INFO;",
          "2967: typedef struct _ATOM_ASIC_SS_ASSIGNMENT {",
          "2973:  UCHAR ucReserved[2];",
          "2974: } ATOM_ASIC_SS_ASSIGNMENT;",
          "2979: #define ASIC_INTERNAL_UVD_SS    3",
          "2981: typedef struct _ATOM_ASIC_INTERNAL_SS_INFO {",
          "2982:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2983:  ATOM_ASIC_SS_ASSIGNMENT asSpreadSpectrum[4];",
          "2984: } ATOM_ASIC_INTERNAL_SS_INFO;",
          "",
          "[Added Lines]",
          "3000: #define ATOM_DP_TRAINING_TBL_ADDR    (ATOM_DFP5_STD_MODE_TBL_ADDR+ATOM_STD_MODE_SUPPORT_TBL_SIZE)",
          "3002: #define ATOM_STACK_STORAGE_START        (ATOM_DP_TRAINING_TBL_ADDR+256)",
          "3003: #define ATOM_STACK_STORAGE_END          ATOM_STACK_STORAGE_START+512",
          "3024: for CAIL, The size of FB access area is known, only thing missing is the Offset of FB Access area, so we can  have:",
          "3026: If (ulStartAddrUsedByFirmware!=0)",
          "3027: FBAccessAreaOffset= ulStartAddrUsedByFirmware - usFBUsedbyDrvInKB;",
          "3028: Reserved area has been claimed by VBIOS including this FB access area; CAIL doesn't need to reserve any extra area for this purpose",
          "3029: else //Non VGA case",
          "3030:  if (FB_Size<=2Gb)",
          "3031:     FBAccessAreaOffset= FB_Size - usFBUsedbyDrvInKB;",
          "3032:  else",
          "3033:    FBAccessAreaOffset= Aper_Size - usFBUsedbyDrvInKB",
          "3039: typedef struct _ATOM_FIRMWARE_VRAM_RESERVE_INFO",
          "3040: {",
          "3041:   ULONG   ulStartAddrUsedByFirmware;",
          "3042:   USHORT  usFirmwareUseInKb;",
          "3043:   USHORT  usReserved;",
          "3044: }ATOM_FIRMWARE_VRAM_RESERVE_INFO;",
          "3046: typedef struct _ATOM_VRAM_USAGE_BY_FIRMWARE",
          "3047: {",
          "3048:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "3049:   ATOM_FIRMWARE_VRAM_RESERVE_INFO asFirmwareVramReserveInfo[ATOM_MAX_FIRMWARE_VRAM_USAGE_INFO];",
          "3050: }ATOM_VRAM_USAGE_BY_FIRMWARE;",
          "3053: typedef struct _ATOM_FIRMWARE_VRAM_RESERVE_INFO_V1_5",
          "3054: {",
          "3055:   ULONG   ulStartAddrUsedByFirmware;",
          "3056:   USHORT  usFirmwareUseInKb;",
          "3057:   USHORT  usFBUsedByDrvInKb;",
          "3058: }ATOM_FIRMWARE_VRAM_RESERVE_INFO_V1_5;",
          "3060: typedef struct _ATOM_VRAM_USAGE_BY_FIRMWARE_V1_5",
          "3061: {",
          "3062:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "3063:   ATOM_FIRMWARE_VRAM_RESERVE_INFO_V1_5 asFirmwareVramReserveInfo[ATOM_MAX_FIRMWARE_VRAM_USAGE_INFO];",
          "3064: }ATOM_VRAM_USAGE_BY_FIRMWARE_V1_5;",
          "3069: typedef struct _ATOM_GPIO_PIN_ASSIGNMENT",
          "3070: {",
          "3071:   USHORT                   usGpioPin_AIndex;",
          "3072:   UCHAR                    ucGpioPinBitShift;",
          "3073:   UCHAR                    ucGPIO_ID;",
          "3074: }ATOM_GPIO_PIN_ASSIGNMENT;",
          "3076: typedef struct _ATOM_GPIO_PIN_LUT",
          "3077: {",
          "3078:   ATOM_COMMON_TABLE_HEADER  sHeader;",
          "3079:   ATOM_GPIO_PIN_ASSIGNMENT asGPIO_Pin[1];",
          "3080: }ATOM_GPIO_PIN_LUT;",
          "3090: #define ATOM_GPIO_SETTINGS_BITSHIFT_MASK  0x1F    // [4:0]",
          "3091: #define ATOM_GPIO_SETTINGS_RESERVED_MASK  0x60    // [6:5] = must be zeroed out",
          "3092: #define ATOM_GPIO_SETTINGS_ACTIVE_MASK    0x80    // [7]",
          "3094: typedef struct _ATOM_GPIO_INFO",
          "3095: {",
          "3096:   USHORT  usAOffset;",
          "3097:   UCHAR   ucSettings;",
          "3098:   UCHAR   ucReserved;",
          "3099: }ATOM_GPIO_INFO;",
          "3105: #define ATOM_GPIO_DEFAULT_MODE_EN                   0x80 //[7];",
          "3106: #define ATOM_GPIO_SETTING_PERMODE_MASK              0x7F //[6:0]",
          "3110: #define ATOM_CV_LINE3_ASPECTRATIO_16_9_GPIO_A       0x01     //represent gpio 3 state for 16:9",
          "3111: #define ATOM_CV_LINE3_ASPECTRATIO_16_9_GPIO_B       0x02     //represent gpio 4 state for 16:9",
          "3112: #define ATOM_CV_LINE3_ASPECTRATIO_16_9_GPIO_SHIFT   0x0",
          "3115: #define ATOM_CV_LINE3_ASPECTRATIO_4_3_LETBOX_GPIO_A 0x04     //represent gpio 3 state for 4:3 Letter box",
          "3116: #define ATOM_CV_LINE3_ASPECTRATIO_4_3_LETBOX_GPIO_B 0x08     //represent gpio 4 state for 4:3 Letter box",
          "3117: #define ATOM_CV_LINE3_ASPECTRATIO_4_3_LETBOX_GPIO_SHIFT 0x2",
          "3120: #define ATOM_CV_LINE3_ASPECTRATIO_4_3_GPIO_A        0x10     //represent gpio 3 state for 4:3",
          "3121: #define ATOM_CV_LINE3_ASPECTRATIO_4_3_GPIO_B        0x20     //represent gpio 4 state for 4:3",
          "3122: #define ATOM_CV_LINE3_ASPECTRATIO_4_3_GPIO_SHIFT    0x4",
          "3124: #define ATOM_CV_LINE3_ASPECTRATIO_MASK              0x3F     // bit [5:0]",
          "3126: #define ATOM_CV_LINE3_ASPECTRATIO_EXIST             0x80     //bit 7",
          "3129: #define ATOM_GPIO_INDEX_LINE3_ASPECRATIO_GPIO_A   3   //bit 3 in uc480i/uc480p/uc720p/uc1080i, which represend the default gpio bit setting for the mode.",
          "3130: #define ATOM_GPIO_INDEX_LINE3_ASPECRATIO_GPIO_B   4   //bit 4 in uc480i/uc480p/uc720p/uc1080i, which represend the default gpio bit setting for the mode.",
          "3133: typedef struct _ATOM_COMPONENT_VIDEO_INFO",
          "3134: {",
          "3135:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "3136:   USHORT             usMask_PinRegisterIndex;",
          "3137:   USHORT             usEN_PinRegisterIndex;",
          "3138:   USHORT             usY_PinRegisterIndex;",
          "3139:   USHORT             usA_PinRegisterIndex;",
          "3140:   UCHAR              ucBitShift;",
          "3141:   UCHAR              ucPinActiveState;  //ucPinActiveState: Bit0=1 active high, =0 active low",
          "3142:   ATOM_DTD_FORMAT    sReserved;         // must be zeroed out",
          "3143:   UCHAR              ucMiscInfo;",
          "3144:   UCHAR              uc480i;",
          "3145:   UCHAR              uc480p;",
          "3146:   UCHAR              uc720p;",
          "3147:   UCHAR              uc1080i;",
          "3148:   UCHAR              ucLetterBoxMode;",
          "3149:   UCHAR              ucReserved[3];",
          "3150:   UCHAR              ucNumOfWbGpioBlocks; //For Component video D-Connector support. If zere, NTSC type connector",
          "3151:   ATOM_GPIO_INFO     aWbGpioStateBlock[MAX_SUPPORTED_CV_STANDARDS];",
          "3152:   ATOM_DTD_FORMAT    aModeTimings[MAX_SUPPORTED_CV_STANDARDS];",
          "3153: }ATOM_COMPONENT_VIDEO_INFO;",
          "3157: typedef struct _ATOM_COMPONENT_VIDEO_INFO_V21",
          "3158: {",
          "3159:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "3160:   UCHAR              ucMiscInfo;",
          "3161:   UCHAR              uc480i;",
          "3162:   UCHAR              uc480p;",
          "3163:   UCHAR              uc720p;",
          "3164:   UCHAR              uc1080i;",
          "3165:   UCHAR              ucReserved;",
          "3166:   UCHAR              ucLetterBoxMode;",
          "3167:   UCHAR              ucNumOfWbGpioBlocks; //For Component video D-Connector support. If zere, NTSC type connector",
          "3168:   ATOM_GPIO_INFO     aWbGpioStateBlock[MAX_SUPPORTED_CV_STANDARDS];",
          "3169:   ATOM_DTD_FORMAT    aModeTimings[MAX_SUPPORTED_CV_STANDARDS];",
          "3170: }ATOM_COMPONENT_VIDEO_INFO_V21;",
          "3177: typedef struct _ATOM_OBJECT_HEADER",
          "3178: {",
          "3179:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "3180:   USHORT                    usDeviceSupport;",
          "3181:   USHORT                    usConnectorObjectTableOffset;",
          "3182:   USHORT                    usRouterObjectTableOffset;",
          "3183:   USHORT                    usEncoderObjectTableOffset;",
          "3184:   USHORT                    usProtectionObjectTableOffset; //only available when Protection block is independent.",
          "3185:   USHORT                    usDisplayPathTableOffset;",
          "3186: }ATOM_OBJECT_HEADER;",
          "3188: typedef struct _ATOM_OBJECT_HEADER_V3",
          "3189: {",
          "3190:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "3191:   USHORT                    usDeviceSupport;",
          "3192:   USHORT                    usConnectorObjectTableOffset;",
          "3193:   USHORT                    usRouterObjectTableOffset;",
          "3194:   USHORT                    usEncoderObjectTableOffset;",
          "3195:   USHORT                    usProtectionObjectTableOffset; //only available when Protection block is independent.",
          "3196:   USHORT                    usDisplayPathTableOffset;",
          "3197:   USHORT                    usMiscObjectTableOffset;",
          "3198: }ATOM_OBJECT_HEADER_V3;",
          "3200: typedef struct  _ATOM_DISPLAY_OBJECT_PATH",
          "3201: {",
          "3202:   USHORT    usDeviceTag;                                   //supported device",
          "3203:   USHORT    usSize;                                        //the size of ATOM_DISPLAY_OBJECT_PATH",
          "3204:   USHORT    usConnObjectId;                                //Connector Object ID",
          "3205:   USHORT    usGPUObjectId;                                 //GPU ID",
          "3206:   USHORT    usGraphicObjIds[1];                             //1st Encoder Obj source from GPU to last Graphic Obj destinate to connector.",
          "3207: }ATOM_DISPLAY_OBJECT_PATH;",
          "3209: typedef struct _ATOM_DISPLAY_OBJECT_PATH_TABLE",
          "3210: {",
          "3211:   UCHAR                           ucNumOfDispPath;",
          "3212:   UCHAR                           ucVersion;",
          "3213:   UCHAR                           ucPadding[2];",
          "3214:   ATOM_DISPLAY_OBJECT_PATH        asDispPath[1];",
          "3215: }ATOM_DISPLAY_OBJECT_PATH_TABLE;",
          "3218: typedef struct _ATOM_OBJECT                                //each object has this structure",
          "3219: {",
          "3220:   USHORT              usObjectID;",
          "3221:   USHORT              usSrcDstTableOffset;",
          "3222:   USHORT              usRecordOffset;                     //this pointing to a bunch of records defined below",
          "3223:   USHORT              usReserved;",
          "3224: }ATOM_OBJECT;",
          "3226: typedef struct _ATOM_OBJECT_TABLE                         //Above 4 object table offset pointing to a bunch of objects all have this structure",
          "3227: {",
          "3228:   UCHAR               ucNumberOfObjects;",
          "3229:   UCHAR               ucPadding[3];",
          "3230:   ATOM_OBJECT         asObjects[1];",
          "3231: }ATOM_OBJECT_TABLE;",
          "3233: typedef struct _ATOM_SRC_DST_TABLE_FOR_ONE_OBJECT         //usSrcDstTableOffset pointing to this structure",
          "3234: {",
          "3235:   UCHAR               ucNumberOfSrc;",
          "3236:   USHORT              usSrcObjectID[1];",
          "3237:   UCHAR               ucNumberOfDst;",
          "3238:   USHORT              usDstObjectID[1];",
          "3239: }ATOM_SRC_DST_TABLE_FOR_ONE_OBJECT;",
          "3244: #define EXT_HPDPIN_LUTINDEX_0                   0",
          "3245: #define EXT_HPDPIN_LUTINDEX_1                   1",
          "3246: #define EXT_HPDPIN_LUTINDEX_2                   2",
          "3247: #define EXT_HPDPIN_LUTINDEX_3                   3",
          "3248: #define EXT_HPDPIN_LUTINDEX_4                   4",
          "3249: #define EXT_HPDPIN_LUTINDEX_5                   5",
          "3250: #define EXT_HPDPIN_LUTINDEX_6                   6",
          "3251: #define EXT_HPDPIN_LUTINDEX_7                   7",
          "3252: #define MAX_NUMBER_OF_EXT_HPDPIN_LUT_ENTRIES   (EXT_HPDPIN_LUTINDEX_7+1)",
          "3254: #define EXT_AUXDDC_LUTINDEX_0                   0",
          "3255: #define EXT_AUXDDC_LUTINDEX_1                   1",
          "3256: #define EXT_AUXDDC_LUTINDEX_2                   2",
          "3257: #define EXT_AUXDDC_LUTINDEX_3                   3",
          "3258: #define EXT_AUXDDC_LUTINDEX_4                   4",
          "3259: #define EXT_AUXDDC_LUTINDEX_5                   5",
          "3260: #define EXT_AUXDDC_LUTINDEX_6                   6",
          "3261: #define EXT_AUXDDC_LUTINDEX_7                   7",
          "3262: #define MAX_NUMBER_OF_EXT_AUXDDC_LUT_ENTRIES   (EXT_AUXDDC_LUTINDEX_7+1)",
          "3264: typedef struct _EXT_DISPLAY_PATH",
          "3265: {",
          "3266:   USHORT  usDeviceTag;                    //A bit vector to show what devices are supported",
          "3267:   USHORT  usDeviceACPIEnum;               //16bit device ACPI id.",
          "3268:   USHORT  usDeviceConnector;              //A physical connector for displays to plug in, using object connector definitions",
          "3269:   UCHAR   ucExtAUXDDCLutIndex;            //An index into external AUX/DDC channel LUT",
          "3270:   UCHAR   ucExtHPDPINLutIndex;            //An index into external HPD pin LUT",
          "3271:   USHORT  usExtEncoderObjId;              //external encoder object id",
          "3272:   USHORT  usReserved[3];",
          "3273: }EXT_DISPLAY_PATH;",
          "3275: #define NUMBER_OF_UCHAR_FOR_GUID          16",
          "3276: #define MAX_NUMBER_OF_EXT_DISPLAY_PATH    7",
          "3278: typedef  struct _ATOM_EXTERNAL_DISPLAY_CONNECTION_INFO",
          "3279: {",
          "3280:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "3281:   UCHAR                    ucGuid [NUMBER_OF_UCHAR_FOR_GUID];     // a GUID is a 16 byte long string",
          "3282:   EXT_DISPLAY_PATH         sPath[MAX_NUMBER_OF_EXT_DISPLAY_PATH]; // total of fixed 7 entries.",
          "3283:   UCHAR                    ucChecksum;                            // a  simple Checksum of the sum of whole structure equal to 0x0.",
          "3284:   UCHAR                    Reserved [7];                          // for potential expansion",
          "3285: }ATOM_EXTERNAL_DISPLAY_CONNECTION_INFO;",
          "3288: typedef struct _ATOM_COMMON_RECORD_HEADER",
          "3289: {",
          "3290:   UCHAR               ucRecordType;                      //An emun to indicate the record type",
          "3291:   UCHAR               ucRecordSize;                      //The size of the whole record in byte",
          "3292: }ATOM_COMMON_RECORD_HEADER;",
          "3295: #define ATOM_I2C_RECORD_TYPE                           1",
          "3299: #define ATOM_CONNECTOR_DVI_EXT_INPUT_RECORD_TYPE      5 //Obsolete, switch to use GPIO_CNTL_RECORD_TYPE",
          "3300: #define ATOM_ENCODER_FPGA_CONTROL_RECORD_TYPE          6 //Obsolete, switch to use GPIO_CNTL_RECORD_TYPE",
          "3302: #define ATOM_JTAG_RECORD_TYPE                          8 //Obsolete, switch to use GPIO_CNTL_RECORD_TYPE",
          "3308: #define ATOM_ROUTER_DDC_PATH_SELECT_RECORD_TYPE       14",
          "3309: #define ATOM_ROUTER_DATA_CLOCK_PATH_SELECT_RECORD_TYPE 15",
          "3310: #define ATOM_CONNECTOR_HPDPIN_LUT_RECORD_TYPE          16 //This is for the case when connectors are not known to object table",
          "3311: #define ATOM_CONNECTOR_AUXDDC_LUT_RECORD_TYPE          17 //This is for the case when connectors are not known to object table",
          "3312: #define ATOM_OBJECT_LINK_RECORD_TYPE                   18 //Once this record is present under one object, it indicats the oobject is linked to another obj described by the record",
          "3313: #define ATOM_CONNECTOR_REMOTE_CAP_RECORD_TYPE          19",
          "3317: #define ATOM_MAX_OBJECT_RECORD_NUMBER             ATOM_CONNECTOR_REMOTE_CAP_RECORD_TYPE",
          "3319: typedef struct  _ATOM_I2C_RECORD",
          "3320: {",
          "3321:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3322:   ATOM_I2C_ID_CONFIG          sucI2cId;",
          "3323:   UCHAR                       ucI2CAddr;              //The slave address, it's 0 when the record is attached to connector for DDC",
          "3324: }ATOM_I2C_RECORD;",
          "3326: typedef struct  _ATOM_HPD_INT_RECORD",
          "3327: {",
          "3328:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3329:   UCHAR                       ucHPDIntGPIOID;         //Corresponding block in GPIO_PIN_INFO table gives the pin info",
          "3330:   UCHAR                       ucPlugged_PinState;",
          "3331: }ATOM_HPD_INT_RECORD;",
          "3334: typedef struct  _ATOM_OUTPUT_PROTECTION_RECORD",
          "3335: {",
          "3336:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3337:   UCHAR                       ucProtectionFlag;",
          "3338:   UCHAR                       ucReserved;",
          "3339: }ATOM_OUTPUT_PROTECTION_RECORD;",
          "3341: typedef struct  _ATOM_CONNECTOR_DEVICE_TAG",
          "3342: {",
          "3343:   ULONG                       ulACPIDeviceEnum;       //Reserved for now",
          "3344:   USHORT                      usDeviceID;             //This Id is same as \"ATOM_DEVICE_XXX_SUPPORT\"",
          "3345:   USHORT                      usPadding;",
          "3346: }ATOM_CONNECTOR_DEVICE_TAG;",
          "3348: typedef struct  _ATOM_CONNECTOR_DEVICE_TAG_RECORD",
          "3349: {",
          "3350:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3351:   UCHAR                       ucNumberOfDevice;",
          "3352:   UCHAR                       ucReserved;",
          "3353:   ATOM_CONNECTOR_DEVICE_TAG   asDeviceTag[1];         //This Id is same as \"ATOM_DEVICE_XXX_SUPPORT\", 1 is only for allocation",
          "3354: }ATOM_CONNECTOR_DEVICE_TAG_RECORD;",
          "3357: typedef struct  _ATOM_CONNECTOR_DVI_EXT_INPUT_RECORD",
          "3358: {",
          "3359:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3360:   UCHAR                  ucConfigGPIOID;",
          "3361:   UCHAR                  ucConfigGPIOState;     //Set to 1 when it's active high to enable external flow in",
          "3362:   UCHAR                       ucFlowinGPIPID;",
          "3363:   UCHAR                       ucExtInGPIPID;",
          "3364: }ATOM_CONNECTOR_DVI_EXT_INPUT_RECORD;",
          "3366: typedef struct  _ATOM_ENCODER_FPGA_CONTROL_RECORD",
          "3367: {",
          "3368:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3369:   UCHAR                       ucCTL1GPIO_ID;",
          "3370:   UCHAR                       ucCTL1GPIOState;        //Set to 1 when it's active high",
          "3371:   UCHAR                       ucCTL2GPIO_ID;",
          "3372:   UCHAR                       ucCTL2GPIOState;        //Set to 1 when it's active high",
          "3373:   UCHAR                       ucCTL3GPIO_ID;",
          "3374:   UCHAR                       ucCTL3GPIOState;        //Set to 1 when it's active high",
          "3375:   UCHAR                       ucCTLFPGA_IN_ID;",
          "3376:   UCHAR                       ucPadding[3];",
          "3377: }ATOM_ENCODER_FPGA_CONTROL_RECORD;",
          "3379: typedef struct  _ATOM_CONNECTOR_CVTV_SHARE_DIN_RECORD",
          "3380: {",
          "3381:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3382:   UCHAR                       ucGPIOID;               //Corresponding block in GPIO_PIN_INFO table gives the pin info",
          "3383:   UCHAR                       ucTVActiveState;        //Indicating when the pin==0 or 1 when TV is connected",
          "3384: }ATOM_CONNECTOR_CVTV_SHARE_DIN_RECORD;",
          "3386: typedef struct  _ATOM_JTAG_RECORD",
          "3387: {",
          "3388:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3389:   UCHAR                       ucTMSGPIO_ID;",
          "3390:   UCHAR                       ucTMSGPIOState;         //Set to 1 when it's active high",
          "3391:   UCHAR                       ucTCKGPIO_ID;",
          "3392:   UCHAR                       ucTCKGPIOState;         //Set to 1 when it's active high",
          "3393:   UCHAR                       ucTDOGPIO_ID;",
          "3394:   UCHAR                       ucTDOGPIOState;         //Set to 1 when it's active high",
          "3395:   UCHAR                       ucTDIGPIO_ID;",
          "3396:   UCHAR                       ucTDIGPIOState;         //Set to 1 when it's active high",
          "3397:   UCHAR                       ucPadding[2];",
          "3398: }ATOM_JTAG_RECORD;",
          "3402: typedef struct _ATOM_GPIO_PIN_CONTROL_PAIR",
          "3403: {",
          "3404:   UCHAR                       ucGPIOID;               // GPIO_ID, find the corresponding ID in GPIO_LUT table",
          "3405:   UCHAR                       ucGPIO_PinState;        // Pin state showing how to set-up the pin",
          "3406: }ATOM_GPIO_PIN_CONTROL_PAIR;",
          "3408: typedef struct  _ATOM_OBJECT_GPIO_CNTL_RECORD",
          "3409: {",
          "3410:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3411:   UCHAR                       ucFlags;                // Future expnadibility",
          "3412:   UCHAR                       ucNumberOfPins;         // Number of GPIO pins used to control the object",
          "3413:   ATOM_GPIO_PIN_CONTROL_PAIR  asGpio[1];              // the real gpio pin pair determined by number of pins ucNumberOfPins",
          "3414: }ATOM_OBJECT_GPIO_CNTL_RECORD;",
          "3428: #define ATOM_GPIO_INDEX_GLSYNC_REFCLK    0",
          "3429: #define ATOM_GPIO_INDEX_GLSYNC_HSYNC     1",
          "3430: #define ATOM_GPIO_INDEX_GLSYNC_VSYNC     2",
          "3431: #define ATOM_GPIO_INDEX_GLSYNC_SWAP_REQ  3",
          "3432: #define ATOM_GPIO_INDEX_GLSYNC_SWAP_GNT  4",
          "3433: #define ATOM_GPIO_INDEX_GLSYNC_INTERRUPT 5",
          "3434: #define ATOM_GPIO_INDEX_GLSYNC_V_RESET   6",
          "3435: #define ATOM_GPIO_INDEX_GLSYNC_MAX       7",
          "3437: typedef struct  _ATOM_ENCODER_DVO_CF_RECORD",
          "3438: {",
          "3439:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3440:   ULONG                       ulStrengthControl;      // DVOA strength control for CF",
          "3441:   UCHAR                       ucPadding[2];",
          "3442: }ATOM_ENCODER_DVO_CF_RECORD;",
          "3448: typedef struct  _ATOM_CONNECTOR_CF_RECORD",
          "3449: {",
          "3450:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3451:   USHORT                      usMaxPixClk;",
          "3452:   UCHAR                       ucFlowCntlGpioId;",
          "3453:   UCHAR                       ucSwapCntlGpioId;",
          "3454:   UCHAR                       ucConnectedDvoBundle;",
          "3455:   UCHAR                       ucPadding;",
          "3456: }ATOM_CONNECTOR_CF_RECORD;",
          "3458: typedef struct  _ATOM_CONNECTOR_HARDCODE_DTD_RECORD",
          "3459: {",
          "3460:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3461:  ATOM_DTD_FORMAT       asTiming;",
          "3462: }ATOM_CONNECTOR_HARDCODE_DTD_RECORD;",
          "3464: typedef struct _ATOM_CONNECTOR_PCIE_SUBCONNECTOR_RECORD",
          "3465: {",
          "3466:   ATOM_COMMON_RECORD_HEADER   sheader;                //ATOM_CONNECTOR_PCIE_SUBCONNECTOR_RECORD_TYPE",
          "3467:   UCHAR                       ucSubConnectorType;     //CONNECTOR_OBJECT_ID_SINGLE_LINK_DVI_D|X_ID_DUAL_LINK_DVI_D|HDMI_TYPE_A",
          "3468:   UCHAR                       ucReserved;",
          "3469: }ATOM_CONNECTOR_PCIE_SUBCONNECTOR_RECORD;",
          "3472: typedef struct _ATOM_ROUTER_DDC_PATH_SELECT_RECORD",
          "3473: {",
          "3474:  ATOM_COMMON_RECORD_HEADER   sheader;",
          "3475:  UCHAR            ucMuxType;       //decide the number of ucMuxState, =0, no pin state, =1: single state with complement, >1: multiple state",
          "3476:  UCHAR            ucMuxControlPin;",
          "3477:  UCHAR            ucMuxState[2];     //for alligment purpose",
          "3478: }ATOM_ROUTER_DDC_PATH_SELECT_RECORD;",
          "3480: typedef struct _ATOM_ROUTER_DATA_CLOCK_PATH_SELECT_RECORD",
          "3481: {",
          "3482:  ATOM_COMMON_RECORD_HEADER   sheader;",
          "3483:  UCHAR            ucMuxType;",
          "3484:  UCHAR            ucMuxControlPin;",
          "3485:  UCHAR            ucMuxState[2];     //for alligment purpose",
          "3486: }ATOM_ROUTER_DATA_CLOCK_PATH_SELECT_RECORD;",
          "3492: typedef struct _ATOM_CONNECTOR_HPDPIN_LUT_RECORD     //record for ATOM_CONNECTOR_HPDPIN_LUT_RECORD_TYPE",
          "3493: {",
          "3494:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3495:   UCHAR                       ucHPDPINMap[MAX_NUMBER_OF_EXT_HPDPIN_LUT_ENTRIES];  //An fixed size array which maps external pins to internal GPIO_PIN_INFO table",
          "3496: }ATOM_CONNECTOR_HPDPIN_LUT_RECORD;",
          "3498: typedef struct _ATOM_CONNECTOR_AUXDDC_LUT_RECORD  //record for ATOM_CONNECTOR_AUXDDC_LUT_RECORD_TYPE",
          "3499: {",
          "3500:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3501:   ATOM_I2C_ID_CONFIG          ucAUXDDCMap[MAX_NUMBER_OF_EXT_AUXDDC_LUT_ENTRIES];  //An fixed size array which maps external pins to internal DDC ID",
          "3502: }ATOM_CONNECTOR_AUXDDC_LUT_RECORD;",
          "3504: typedef struct _ATOM_OBJECT_LINK_RECORD",
          "3505: {",
          "3506:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3507:   USHORT                      usObjectID;         //could be connector, encorder or other object in object.h",
          "3508: }ATOM_OBJECT_LINK_RECORD;",
          "3510: typedef struct _ATOM_CONNECTOR_REMOTE_CAP_RECORD",
          "3511: {",
          "3512:   ATOM_COMMON_RECORD_HEADER   sheader;",
          "3513:   USHORT                      usReserved;",
          "3514: }ATOM_CONNECTOR_REMOTE_CAP_RECORD;",
          "3519: typedef struct  _ATOM_VOLTAGE_INFO_HEADER",
          "3520: {",
          "3521:    USHORT   usVDDCBaseLevel;                //In number of 50mv unit",
          "3522:    USHORT   usReserved;                     //For possible extension table offset",
          "3523:    UCHAR    ucNumOfVoltageEntries;",
          "3524:    UCHAR    ucBytesPerVoltageEntry;",
          "3525:    UCHAR    ucVoltageStep;                  //Indicating in how many mv increament is one step, 0.5mv unit",
          "3526:    UCHAR    ucDefaultVoltageEntry;",
          "3527:    UCHAR    ucVoltageControlI2cLine;",
          "3528:    UCHAR    ucVoltageControlAddress;",
          "3529:    UCHAR    ucVoltageControlOffset;",
          "3530: }ATOM_VOLTAGE_INFO_HEADER;",
          "3532: typedef struct  _ATOM_VOLTAGE_INFO",
          "3533: {",
          "3534:    ATOM_COMMON_TABLE_HEADER sHeader;",
          "3535:    ATOM_VOLTAGE_INFO_HEADER viHeader;",
          "3536:    UCHAR    ucVoltageEntries[64];            //64 is for allocation, the actual number of entry is present at ucNumOfVoltageEntries*ucBytesPerVoltageEntry",
          "3537: }ATOM_VOLTAGE_INFO;",
          "3540: typedef struct  _ATOM_VOLTAGE_FORMULA",
          "3541: {",
          "3542:    USHORT   usVoltageBaseLevel;             // In number of 1mv unit",
          "3543:    USHORT   usVoltageStep;                  // Indicating in how many mv increament is one step, 1mv unit",
          "3544:   UCHAR  ucNumOfVoltageEntries;     // Number of Voltage Entry, which indicate max Voltage",
          "3545:   UCHAR  ucFlag;             // bit0=0 :step is 1mv =1 0.5mv",
          "3546:   UCHAR  ucBaseVID;           // if there is no lookup table, VID= BaseVID + ( Vol - BaseLevle ) /VoltageStep",
          "3547:   UCHAR  ucReserved;",
          "3548:   UCHAR  ucVIDAdjustEntries[32];     // 32 is for allocation, the actual number of entry is present at ucNumOfVoltageEntries",
          "3549: }ATOM_VOLTAGE_FORMULA;",
          "3551: typedef struct  _VOLTAGE_LUT_ENTRY",
          "3552: {",
          "3553:   USHORT  usVoltageCode;         // The Voltage ID, either GPIO or I2C code",
          "3554:   USHORT  usVoltageValue;         // The corresponding Voltage Value, in mV",
          "3555: }VOLTAGE_LUT_ENTRY;",
          "3557: typedef struct  _ATOM_VOLTAGE_FORMULA_V2",
          "3558: {",
          "3559:   UCHAR  ucNumOfVoltageEntries;     // Number of Voltage Entry, which indicate max Voltage",
          "3560:   UCHAR  ucReserved[3];",
          "3561:   VOLTAGE_LUT_ENTRY asVIDAdjustEntries[32];// 32 is for allocation, the actual number of entries is in ucNumOfVoltageEntries",
          "3562: }ATOM_VOLTAGE_FORMULA_V2;",
          "3564: typedef struct _ATOM_VOLTAGE_CONTROL",
          "3565: {",
          "3566:  UCHAR   ucVoltageControlId;       //Indicate it is controlled by I2C or GPIO or HW state machine",
          "3567:   UCHAR    ucVoltageControlI2cLine;",
          "3568:   UCHAR    ucVoltageControlAddress;",
          "3569:   UCHAR    ucVoltageControlOffset;",
          "3570:   USHORT   usGpioPin_AIndex;        //GPIO_PAD register index",
          "3571:   UCHAR    ucGpioPinBitShift[9];      //at most 8 pin support 255 VIDs, termintate with 0xff",
          "3572:  UCHAR   ucReserved;",
          "3573: }ATOM_VOLTAGE_CONTROL;",
          "3579: #define VOLTAGE_CONTROL_ID_LM64        0x01         //I2C control, used for R5xx Core Voltage",
          "3580: #define VOLTAGE_CONTROL_ID_DAC        0x02         //I2C control, used for R5xx/R6xx MVDDC,MVDDQ or VDDCI",
          "3581: #define VOLTAGE_CONTROL_ID_VT116xM      0x03         //I2C control, used for R6xx Core Voltage",
          "3582: #define VOLTAGE_CONTROL_ID_DS4402       0x04",
          "3584: typedef struct  _ATOM_VOLTAGE_OBJECT",
          "3585: {",
          "3586:    UCHAR  ucVoltageType;         //Indicate Voltage Source: VDDC, MVDDC, MVDDQ or MVDDCI",
          "3587:   UCHAR  ucSize;             //Size of Object",
          "3588:   ATOM_VOLTAGE_CONTROL   asControl;   //describ how to control",
          "3589:    ATOM_VOLTAGE_FORMULA   asFormula;   //Indicate How to convert real Voltage to VID",
          "3590: }ATOM_VOLTAGE_OBJECT;",
          "3592: typedef struct  _ATOM_VOLTAGE_OBJECT_V2",
          "3593: {",
          "3594:    UCHAR  ucVoltageType;         //Indicate Voltage Source: VDDC, MVDDC, MVDDQ or MVDDCI",
          "3595:   UCHAR  ucSize;             //Size of Object",
          "3596:   ATOM_VOLTAGE_CONTROL   asControl;   //describ how to control",
          "3597:    ATOM_VOLTAGE_FORMULA_V2 asFormula;   //Indicate How to convert real Voltage to VID",
          "3598: }ATOM_VOLTAGE_OBJECT_V2;",
          "3600: typedef struct  _ATOM_VOLTAGE_OBJECT_INFO",
          "3601: {",
          "3602:    ATOM_COMMON_TABLE_HEADER sHeader;",
          "3603:   ATOM_VOLTAGE_OBJECT   asVoltageObj[3]; //Info for Voltage control",
          "3604: }ATOM_VOLTAGE_OBJECT_INFO;",
          "3606: typedef struct  _ATOM_VOLTAGE_OBJECT_INFO_V2",
          "3607: {",
          "3608:    ATOM_COMMON_TABLE_HEADER sHeader;",
          "3609:   ATOM_VOLTAGE_OBJECT_V2   asVoltageObj[3]; //Info for Voltage control",
          "3610: }ATOM_VOLTAGE_OBJECT_INFO_V2;",
          "3612: typedef struct  _ATOM_LEAKID_VOLTAGE",
          "3613: {",
          "3614:  UCHAR  ucLeakageId;",
          "3615:  UCHAR  ucReserved;",
          "3616:  USHORT usVoltage;",
          "3617: }ATOM_LEAKID_VOLTAGE;",
          "3619: typedef struct  _ATOM_ASIC_PROFILE_VOLTAGE",
          "3620: {",
          "3621:  UCHAR  ucProfileId;",
          "3622:  UCHAR  ucReserved;",
          "3623:  USHORT usSize;",
          "3624:  USHORT usEfuseSpareStartAddr;",
          "3625:  USHORT usFuseIndex[8];            //from LSB to MSB, Max 8bit,end of 0xffff if less than 8 efuse id,",
          "3626:  ATOM_LEAKID_VOLTAGE     asLeakVol[2];   //Leakid and relatd voltage",
          "3627: }ATOM_ASIC_PROFILE_VOLTAGE;",
          "3630: #define ATOM_ASIC_PROFILE_ID_EFUSE_VOLTAGE   1",
          "3634: typedef struct  _ATOM_ASIC_PROFILING_INFO",
          "3635: {",
          "3636:   ATOM_COMMON_TABLE_HEADER   asHeader;",
          "3637:  ATOM_ASIC_PROFILE_VOLTAGE   asVoltage;",
          "3638: }ATOM_ASIC_PROFILING_INFO;",
          "3640: typedef struct _ATOM_POWER_SOURCE_OBJECT",
          "3641: {",
          "3642:  UCHAR ucPwrSrcId;             // Power source",
          "3643:  UCHAR ucPwrSensorType;          // GPIO, I2C or none",
          "3644:  UCHAR ucPwrSensId;             // if GPIO detect, it is GPIO id,  if I2C detect, it is I2C id",
          "3645:  UCHAR ucPwrSensSlaveAddr;         // Slave address if I2C detect",
          "3646:  UCHAR ucPwrSensRegIndex;         // I2C register Index if I2C detect",
          "3647:  UCHAR ucPwrSensRegBitMask;        // detect which bit is used if I2C detect",
          "3648:  UCHAR ucPwrSensActiveState;        // high active or low active",
          "3649:  UCHAR ucReserve[3];            // reserve",
          "3650:  USHORT usSensPwr;             // in unit of watt",
          "3651: }ATOM_POWER_SOURCE_OBJECT;",
          "3653: typedef struct _ATOM_POWER_SOURCE_INFO",
          "3654: {",
          "3655:   ATOM_COMMON_TABLE_HEADER  asHeader;",
          "3656:   UCHAR            asPwrbehave[16];",
          "3657:   ATOM_POWER_SOURCE_OBJECT  asPwrObj[1];",
          "3658: }ATOM_POWER_SOURCE_INFO;",
          "3673: typedef struct _ATOM_INTEGRATED_SYSTEM_INFO_V6",
          "3674: {",
          "3675:   ATOM_COMMON_TABLE_HEADER   sHeader;",
          "3676:   ULONG  ulBootUpEngineClock;",
          "3677:   ULONG  ulDentistVCOFreq;",
          "3678:   ULONG  ulBootUpUMAClock;",
          "3679:   ULONG  ulReserved1[8];",
          "3680:   ULONG  ulBootUpReqDisplayVector;",
          "3681:   ULONG  ulOtherDisplayMisc;",
          "3682:   ULONG  ulGPUCapInfo;",
          "3683:   ULONG  ulReserved2[3];",
          "3684:   ULONG  ulSystemConfig;",
          "3685:   ULONG  ulCPUCapInfo;",
          "3686:   USHORT usMaxNBVoltage;",
          "3687:   USHORT usMinNBVoltage;",
          "3688:   USHORT usBootUpNBVoltage;",
          "3689:   USHORT usExtDispConnInfoOffset;",
          "3690:   UCHAR  ucHtcTmpLmt;",
          "3691:   UCHAR  ucTjOffset;",
          "3692:   UCHAR  ucMemoryType;",
          "3693:   UCHAR  ucUMAChannelNumber;",
          "3694:   ULONG  ulCSR_M3_ARB_CNTL_DEFAULT[10];",
          "3695:   ULONG  ulCSR_M3_ARB_CNTL_UVD[10];",
          "3696:   ULONG  ulCSR_M3_ARB_CNTL_FS3D[10];",
          "3697:   ULONG  ulReserved3[42];",
          "3698:   ATOM_EXTERNAL_DISPLAY_CONNECTION_INFO sExtDispConnInfo;",
          "3699: }ATOM_INTEGRATED_SYSTEM_INFO_V6;",
          "3743: typedef struct _ATOM_I2C_DATA_RECORD",
          "3744: {",
          "3745:   UCHAR         ucNunberOfBytes;                                              //Indicates how many bytes SW needs to write to the external ASIC for one block, besides to \"Start\" and \"Stop\"",
          "3746:   UCHAR         ucI2CData[1];                                                 //I2C data in bytes, should be less than 16 bytes usually",
          "3747: }ATOM_I2C_DATA_RECORD;",
          "3751: typedef struct _ATOM_I2C_DEVICE_SETUP_INFO",
          "3752: {",
          "3753:   ATOM_I2C_ID_CONFIG_ACCESS       sucI2cId;               //I2C line and HW/SW assisted cap.",
          "3754:   UCHAR                          ucSSChipID;             //SS chip being used",
          "3755:   UCHAR                          ucSSChipSlaveAddr;      //Slave Address to set up this SS chip",
          "3756:   UCHAR                           ucNumOfI2CDataRecords;  //number of data block",
          "3757:   ATOM_I2C_DATA_RECORD            asI2CData[1];",
          "3758: }ATOM_I2C_DEVICE_SETUP_INFO;",
          "3761: typedef struct  _ATOM_ASIC_MVDD_INFO",
          "3762: {",
          "3763:   ATOM_COMMON_TABLE_HEADER       sHeader;",
          "3764:   ATOM_I2C_DEVICE_SETUP_INFO      asI2CSetup[1];",
          "3765: }ATOM_ASIC_MVDD_INFO;",
          "3773: typedef struct _ATOM_ASIC_SS_ASSIGNMENT",
          "3774: {",
          "3775:  ULONG        ulTargetClockRange;      //Clock Out frequence (VCO ), in unit of 10Khz",
          "3776:   USHORT              usSpreadSpectrumPercentage;  //in unit of 0.01%",
          "3777:  USHORT       usSpreadRateInKhz;      //in unit of kHz, modulation freq",
          "3778:   UCHAR               ucClockIndication;       //Indicate which clock source needs SS",
          "3779:  UCHAR        ucSpreadSpectrumMode;     //Bit1=0 Down Spread,=1 Center Spread.",
          "3780:  UCHAR        ucReserved[2];",
          "3781: }ATOM_ASIC_SS_ASSIGNMENT;",
          "3787: #define ASIC_INTERNAL_UVD_SS        3",
          "3788: #define ASIC_INTERNAL_SS_ON_TMDS    4",
          "3789: #define ASIC_INTERNAL_SS_ON_HDMI    5",
          "3790: #define ASIC_INTERNAL_SS_ON_LVDS    6",
          "3791: #define ASIC_INTERNAL_SS_ON_DP      7",
          "3792: #define ASIC_INTERNAL_SS_ON_DCPLL   8",
          "3794: typedef struct _ATOM_ASIC_SS_ASSIGNMENT_V2",
          "3795: {",
          "3796:  ULONG        ulTargetClockRange;      //For mem/engine/uvd, Clock Out frequence (VCO ), in unit of 10Khz",
          "3798:   USHORT              usSpreadSpectrumPercentage;  //in unit of 0.01%",
          "3799:  USHORT       usSpreadRateIn10Hz;      //in unit of 10Hz, modulation freq",
          "3800:   UCHAR               ucClockIndication;       //Indicate which clock source needs SS",
          "3801:  UCHAR        ucSpreadSpectrumMode;     //Bit0=0 Down Spread,=1 Center Spread, bit1=0: internal SS bit1=1: external SS",
          "3802:  UCHAR        ucReserved[2];",
          "3803: }ATOM_ASIC_SS_ASSIGNMENT_V2;",
          "3813: typedef struct _ATOM_ASIC_INTERNAL_SS_INFO",
          "3814: {",
          "3815:   ATOM_COMMON_TABLE_HEADER       sHeader;",
          "3816:   ATOM_ASIC_SS_ASSIGNMENT        asSpreadSpectrum[4];",
          "3817: }ATOM_ASIC_INTERNAL_SS_INFO;",
          "3819: typedef struct _ATOM_ASIC_INTERNAL_SS_INFO_V2",
          "3820: {",
          "3821:   ATOM_COMMON_TABLE_HEADER       sHeader;",
          "3822:   ATOM_ASIC_SS_ASSIGNMENT_V2    asSpreadSpectrum[1];      //this is point only.",
          "3823: }ATOM_ASIC_INTERNAL_SS_INFO_V2;",
          "3825: typedef struct _ATOM_ASIC_SS_ASSIGNMENT_V3",
          "3826: {",
          "3827:  ULONG        ulTargetClockRange;      //For mem/engine/uvd, Clock Out frequence (VCO ), in unit of 10Khz",
          "3829:   USHORT              usSpreadSpectrumPercentage;  //in unit of 0.01%",
          "3830:  USHORT       usSpreadRateIn10Hz;      //in unit of 10Hz, modulation freq",
          "3831:   UCHAR               ucClockIndication;       //Indicate which clock source needs SS",
          "3832:  UCHAR        ucSpreadSpectrumMode;     //Bit0=0 Down Spread,=1 Center Spread, bit1=0: internal SS bit1=1: external SS",
          "3833:  UCHAR        ucReserved[2];",
          "3834: }ATOM_ASIC_SS_ASSIGNMENT_V3;",
          "3836: typedef struct _ATOM_ASIC_INTERNAL_SS_INFO_V3",
          "3837: {",
          "3838:   ATOM_COMMON_TABLE_HEADER       sHeader;",
          "3839:   ATOM_ASIC_SS_ASSIGNMENT_V3    asSpreadSpectrum[1];      //this is pointer only.",
          "3840: }ATOM_ASIC_INTERNAL_SS_INFO_V3;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3025: #define ATOM_S0_DFP2                    0x00020000L",
          "3026: #define ATOM_S0_LCD1                    0x00040000L",
          "3027: #define ATOM_S0_LCD2                    0x00080000L",
          "3039: #define ATOM_S0_THERMAL_STATE_MASK      0x1C000000L",
          "3040: #define ATOM_S0_THERMAL_STATE_SHIFT     26",
          "3042: #define ATOM_S0_SYSTEM_POWER_STATE_MASK 0xE0000000L",
          "3045: #define ATOM_S0_SYSTEM_POWER_STATE_VALUE_AC     1",
          "3046: #define ATOM_S0_SYSTEM_POWER_STATE_VALUE_DC     2",
          "3047: #define ATOM_S0_SYSTEM_POWER_STATE_VALUE_LITEAC 3",
          "3050: #define ATOM_S0_CRT1_MONOb0             0x01",
          "3051: #define ATOM_S0_CRT1_COLORb0            0x02",
          "3052: #define ATOM_S0_CRT1_MASKb0             (ATOM_S0_CRT1_MONOb0+ATOM_S0_CRT1_COLORb0)",
          "",
          "[Removed Lines]",
          "3028: #define ATOM_S0_TV2                     0x00100000L",
          "3029: #define ATOM_S0_DFP3   0x00200000L",
          "3030: #define ATOM_S0_DFP4   0x00400000L",
          "3031: #define ATOM_S0_DFP5   0x00800000L",
          "3033: #define ATOM_S0_DFP_MASK \\",
          "3034:  (ATOM_S0_DFP1 | ATOM_S0_DFP2 | ATOM_S0_DFP3 | ATOM_S0_DFP4 | ATOM_S0_DFP5)",
          "3043: #define ATOM_S0_SYSTEM_POWER_STATE_SHIFT 29",
          "",
          "[Added Lines]",
          "3887: #define ATOM_S0_DFP6                    0x00100000L",
          "3888: #define ATOM_S0_DFP3                    0x00200000L",
          "3889: #define ATOM_S0_DFP4                    0x00400000L",
          "3890: #define ATOM_S0_DFP5                    0x00800000L",
          "3892: #define ATOM_S0_DFP_MASK                ATOM_S0_DFP1 | ATOM_S0_DFP2 | ATOM_S0_DFP3 | ATOM_S0_DFP4 | ATOM_S0_DFP5 | ATOM_S0_DFP6",
          "3894: #define ATOM_S0_FAD_REGISTER_BUG        0x02000000L // If set, indicates we are running a PCIE asic with",
          "3901: #define ATOM_S0_SYSTEM_POWER_STATE_SHIFT 29",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3076: #define ATOM_S0_DFP2b2                  0x02",
          "3077: #define ATOM_S0_LCD1b2                  0x04",
          "3078: #define ATOM_S0_LCD2b2                  0x08",
          "3082: #define ATOM_S0_THERMAL_STATE_MASKb3    0x1C",
          "3083: #define ATOM_S0_THERMAL_STATE_SHIFTb3   2",
          "",
          "[Removed Lines]",
          "3079: #define ATOM_S0_TV2b2                   0x10",
          "3080: #define ATOM_S0_DFP3b2         0x20",
          "",
          "[Added Lines]",
          "3937: #define ATOM_S0_DFP6b2                  0x10",
          "3938: #define ATOM_S0_DFP3b2                  0x20",
          "3939: #define ATOM_S0_DFP4b2                  0x40",
          "3940: #define ATOM_S0_DFP5b2                  0x80",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3085: #define ATOM_S0_SYSTEM_POWER_STATE_MASKb3 0xE0",
          "3086: #define ATOM_S0_LCD1_SHIFT              18",
          "3089: #define ATOM_S1_ROM_LOCATION_MASK       0x0000FFFFL",
          "3090: #define ATOM_S1_PCI_BUS_DEV_MASK        0xFFFF0000L",
          "3093: #define ATOM_S2_TV1_STANDARD_MASK       0x0000000FL",
          "3094: #define ATOM_S2_CURRENT_BL_LEVEL_MASK   0x0000FF00L",
          "3095: #define ATOM_S2_CURRENT_BL_LEVEL_SHIFT  8",
          "3121: #define ATOM_S2_FORCEDLOWPWRMODE_STATE_MASK       0x0C000000L",
          "3122: #define ATOM_S2_FORCEDLOWPWRMODE_STATE_MASK_SHIFT 26",
          "3123: #define ATOM_S2_FORCEDLOWPWRMODE_STATE_CHANGE     0x10000000L",
          "3125: #define ATOM_S2_VRI_BRIGHT_ENABLE       0x20000000L",
          "3127: #define ATOM_S2_DISPLAY_ROTATION_0_DEGREE     0x0",
          "",
          "[Removed Lines]",
          "3097: #define ATOM_S2_CRT1_DPMS_STATE         0x00010000L",
          "3098: #define ATOM_S2_LCD1_DPMS_STATE         0x00020000L",
          "3099: #define ATOM_S2_TV1_DPMS_STATE          0x00040000L",
          "3100: #define ATOM_S2_DFP1_DPMS_STATE         0x00080000L",
          "3101: #define ATOM_S2_CRT2_DPMS_STATE         0x00100000L",
          "3102: #define ATOM_S2_LCD2_DPMS_STATE         0x00200000L",
          "3103: #define ATOM_S2_TV2_DPMS_STATE          0x00400000L",
          "3104: #define ATOM_S2_DFP2_DPMS_STATE         0x00800000L",
          "3105: #define ATOM_S2_CV_DPMS_STATE           0x01000000L",
          "3106: #define ATOM_S2_DFP3_DPMS_STATE     0x02000000L",
          "3107: #define ATOM_S2_DFP4_DPMS_STATE     0x04000000L",
          "3108: #define ATOM_S2_DFP5_DPMS_STATE     0x08000000L",
          "3110: #define ATOM_S2_DFP_DPM_STATE \\",
          "3111:  (ATOM_S2_DFP1_DPMS_STATE | ATOM_S2_DFP2_DPMS_STATE | \\",
          "3112:   ATOM_S2_DFP3_DPMS_STATE | ATOM_S2_DFP4_DPMS_STATE | \\",
          "3113:   ATOM_S2_DFP5_DPMS_STATE)",
          "3115: #define ATOM_S2_DEVICE_DPMS_STATE \\",
          "3116:  (ATOM_S2_CRT1_DPMS_STATE + ATOM_S2_LCD1_DPMS_STATE + \\",
          "3117:   ATOM_S2_TV1_DPMS_STATE + ATOM_S2_DFP_DPMS_STATE + \\",
          "3118:   ATOM_S2_CRT2_DPMS_STATE + ATOM_S2_LCD2_DPMS_STATE + \\",
          "3119:   ATOM_S2_TV2_DPMS_STATE + ATOM_S2_CV_DPMS_STATE)",
          "",
          "[Added Lines]",
          "3962: #define ATOM_S2_DEVICE_DPMS_STATE       0x00010000L",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3131: #define ATOM_S2_DISPLAY_ROTATION_DEGREE_SHIFT 30",
          "3132: #define ATOM_S2_DISPLAY_ROTATION_ANGLE_MASK   0xC0000000L",
          "3135: #define ATOM_S2_TV1_STANDARD_MASKb0     0x0F",
          "3136: #define ATOM_S2_CURRENT_BL_LEVEL_MASKb1 0xFF",
          "3150: #define ATOM_S2_DEVICE_DPMS_MASKw1      0x3FF",
          "3151: #define ATOM_S2_FORCEDLOWPWRMODE_STATE_MASKb3     0x0C",
          "",
          "[Removed Lines]",
          "3137: #define ATOM_S2_CRT1_DPMS_STATEb2       0x01",
          "3138: #define ATOM_S2_LCD1_DPMS_STATEb2       0x02",
          "3139: #define ATOM_S2_TV1_DPMS_STATEb2        0x04",
          "3140: #define ATOM_S2_DFP1_DPMS_STATEb2       0x08",
          "3141: #define ATOM_S2_CRT2_DPMS_STATEb2       0x10",
          "3142: #define ATOM_S2_LCD2_DPMS_STATEb2       0x20",
          "3143: #define ATOM_S2_TV2_DPMS_STATEb2        0x40",
          "3144: #define ATOM_S2_DFP2_DPMS_STATEb2       0x80",
          "3145: #define ATOM_S2_CV_DPMS_STATEb3         0x01",
          "3146: #define ATOM_S2_DFP3_DPMS_STATEb3    0x02",
          "3147: #define ATOM_S2_DFP4_DPMS_STATEb3    0x04",
          "3148: #define ATOM_S2_DFP5_DPMS_STATEb3    0x08",
          "",
          "[Added Lines]",
          "3976: #define ATOM_S2_DEVICE_DPMS_STATEb2     0x01",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3153: #define ATOM_S2_VRI_BRIGHT_ENABLEb3     0x20",
          "3154: #define ATOM_S2_ROTATION_STATE_MASKb3   0xC0",
          "3157: #define ATOM_S3_CRT1_ACTIVE             0x00000001L",
          "3158: #define ATOM_S3_LCD1_ACTIVE             0x00000002L",
          "3159: #define ATOM_S3_TV1_ACTIVE              0x00000004L",
          "3160: #define ATOM_S3_DFP1_ACTIVE             0x00000008L",
          "3161: #define ATOM_S3_CRT2_ACTIVE             0x00000010L",
          "3162: #define ATOM_S3_LCD2_ACTIVE             0x00000020L",
          "3164: #define ATOM_S3_DFP2_ACTIVE             0x00000080L",
          "3165: #define ATOM_S3_CV_ACTIVE               0x00000100L",
          "3166: #define ATOM_S3_DFP3_ACTIVE       0x00000200L",
          "3167: #define ATOM_S3_DFP4_ACTIVE       0x00000400L",
          "3168: #define ATOM_S3_DFP5_ACTIVE       0x00000800L",
          "3172: #define ATOM_S3_LCD_FULLEXPANSION_ACTIVE         0x00001000L",
          "3173: #define ATOM_S3_LCD_EXPANSION_ASPEC_RATIO_ACTIVE 0x00002000L",
          "",
          "[Removed Lines]",
          "3163: #define ATOM_S3_TV2_ACTIVE              0x00000040L",
          "3170: #define ATOM_S3_DEVICE_ACTIVE_MASK      0x000003FFL",
          "",
          "[Added Lines]",
          "3992: #define ATOM_S3_DFP6_ACTIVE             0x00000040L",
          "3999: #define ATOM_S3_DEVICE_ACTIVE_MASK      0x00000FFFL",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "3178: #define ATOM_S3_DFP1_CRTC_ACTIVE        0x00080000L",
          "3179: #define ATOM_S3_CRT2_CRTC_ACTIVE        0x00100000L",
          "3180: #define ATOM_S3_LCD2_CRTC_ACTIVE        0x00200000L",
          "3182: #define ATOM_S3_DFP2_CRTC_ACTIVE        0x00800000L",
          "3183: #define ATOM_S3_CV_CRTC_ACTIVE          0x01000000L",
          "3184: #define ATOM_S3_DFP3_CRTC_ACTIVE    0x02000000L",
          "",
          "[Removed Lines]",
          "3181: #define ATOM_S3_TV2_CRTC_ACTIVE         0x00400000L",
          "",
          "[Added Lines]",
          "4010: #define ATOM_S3_DFP6_CRTC_ACTIVE        0x00400000L",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3188: #define ATOM_S3_DEVICE_CRTC_ACTIVE_MASK 0x0FFF0000L",
          "3189: #define ATOM_S3_ASIC_GUI_ENGINE_HUNG    0x20000000L",
          "3190: #define ATOM_S3_ALLOW_FAST_PWR_SWITCH   0x40000000L",
          "3191: #define ATOM_S3_RQST_GPU_USE_MIN_PWR    0x80000000L",
          "3194: #define ATOM_S3_CRT1_ACTIVEb0           0x01",
          "3195: #define ATOM_S3_LCD1_ACTIVEb0           0x02",
          "3196: #define ATOM_S3_TV1_ACTIVEb0            0x04",
          "3197: #define ATOM_S3_DFP1_ACTIVEb0           0x08",
          "3198: #define ATOM_S3_CRT2_ACTIVEb0           0x10",
          "3199: #define ATOM_S3_LCD2_ACTIVEb0           0x20",
          "3201: #define ATOM_S3_DFP2_ACTIVEb0           0x80",
          "3202: #define ATOM_S3_CV_ACTIVEb1             0x01",
          "3203: #define ATOM_S3_DFP3_ACTIVEb1      0x02",
          "",
          "[Removed Lines]",
          "3200: #define ATOM_S3_TV2_ACTIVEb0            0x40",
          "",
          "[Added Lines]",
          "4030: #define ATOM_S3_DFP6_ACTIVEb0           0x40",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3212: #define ATOM_S3_DFP1_CRTC_ACTIVEb2      0x08",
          "3213: #define ATOM_S3_CRT2_CRTC_ACTIVEb2      0x10",
          "3214: #define ATOM_S3_LCD2_CRTC_ACTIVEb2      0x20",
          "3216: #define ATOM_S3_DFP2_CRTC_ACTIVEb2      0x80",
          "3217: #define ATOM_S3_CV_CRTC_ACTIVEb3        0x01",
          "3218: #define ATOM_S3_DFP3_CRTC_ACTIVEb3   0x02",
          "",
          "[Removed Lines]",
          "3215: #define ATOM_S3_TV2_CRTC_ACTIVEb2       0x40",
          "",
          "[Added Lines]",
          "4045: #define ATOM_S3_DFP6_CRTC_ACTIVEb2      0x40",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3222: #define ATOM_S3_ACTIVE_CRTC2w1          0xFFF",
          "3229: #define ATOM_S4_LCD1_PANEL_ID_MASK      0x000000FFL",
          "3230: #define ATOM_S4_LCD1_REFRESH_MASK       0x0000FF00L",
          "3231: #define ATOM_S4_LCD1_REFRESH_SHIFT      8",
          "3234: #define ATOM_S4_LCD1_PANEL_ID_MASKb0   0x0FF",
          "3235: #define ATOM_S4_LCD1_REFRESH_MASKb1    ATOM_S4_LCD1_PANEL_ID_MASKb0",
          "3236: #define ATOM_S4_VRAM_INFO_MASKb2        ATOM_S4_LCD1_PANEL_ID_MASKb0",
          "3239: #define ATOM_S5_DOS_REQ_CRT1b0          0x01",
          "3240: #define ATOM_S5_DOS_REQ_LCD1b0          0x02",
          "3241: #define ATOM_S5_DOS_REQ_TV1b0           0x04",
          "3242: #define ATOM_S5_DOS_REQ_DFP1b0          0x08",
          "3243: #define ATOM_S5_DOS_REQ_CRT2b0          0x10",
          "3244: #define ATOM_S5_DOS_REQ_LCD2b0          0x20",
          "3246: #define ATOM_S5_DOS_REQ_DFP2b0          0x80",
          "3247: #define ATOM_S5_DOS_REQ_CVb1            0x01",
          "3248: #define ATOM_S5_DOS_REQ_DFP3b1     0x02",
          "3249: #define ATOM_S5_DOS_REQ_DFP4b1     0x04",
          "3250: #define ATOM_S5_DOS_REQ_DFP5b1     0x08",
          "3254: #define ATOM_S5_DOS_REQ_CRT1            0x0001",
          "3255: #define ATOM_S5_DOS_REQ_LCD1            0x0002",
          "",
          "[Removed Lines]",
          "3224: #define ATOM_S3_ASIC_GUI_ENGINE_HUNGb3 0x20",
          "3225: #define ATOM_S3_ALLOW_FAST_PWR_SWITCHb3 0x40",
          "3226: #define ATOM_S3_RQST_GPU_USE_MIN_PWRb3  0x80",
          "3245: #define ATOM_S5_DOS_REQ_TV2b0           0x40",
          "3252: #define ATOM_S5_DOS_REQ_DEVICEw0        0x03FF",
          "",
          "[Added Lines]",
          "4071: #define ATOM_S5_DOS_REQ_DFP6b0          0x40",
          "4078: #define ATOM_S5_DOS_REQ_DEVICEw0        0x0FFF",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "3257: #define ATOM_S5_DOS_REQ_DFP1            0x0008",
          "3258: #define ATOM_S5_DOS_REQ_CRT2            0x0010",
          "3259: #define ATOM_S5_DOS_REQ_LCD2            0x0020",
          "3261: #define ATOM_S5_DOS_REQ_DFP2            0x0080",
          "3262: #define ATOM_S5_DOS_REQ_CV              0x0100",
          "3267: #define ATOM_S5_DOS_FORCE_CRT1b2        ATOM_S5_DOS_REQ_CRT1b0",
          "3268: #define ATOM_S5_DOS_FORCE_TV1b2         ATOM_S5_DOS_REQ_TV1b0",
          "3269: #define ATOM_S5_DOS_FORCE_CRT2b2        ATOM_S5_DOS_REQ_CRT2b0",
          "3270: #define ATOM_S5_DOS_FORCE_CVb3          ATOM_S5_DOS_REQ_CVb1",
          "3276: #define ATOM_S6_DEVICE_CHANGE           0x00000001L",
          "3277: #define ATOM_S6_SCALER_CHANGE           0x00000002L",
          "3278: #define ATOM_S6_LID_CHANGE              0x00000004L",
          "",
          "[Removed Lines]",
          "3260: #define ATOM_S5_DOS_REQ_TV2             0x0040",
          "3263: #define ATOM_S5_DOS_REQ_DFP3      0x0200",
          "3264: #define ATOM_S5_DOS_REQ_DFP4      0x0400",
          "3265: #define ATOM_S5_DOS_REQ_DFP5      0x0800",
          "3271: #define ATOM_S5_DOS_FORCE_DEVICEw1 \\",
          "3272:  (ATOM_S5_DOS_FORCE_CRT1b2 + ATOM_S5_DOS_FORCE_TV1b2 + \\",
          "3273:   ATOM_S5_DOS_FORCE_CRT2b2 + (ATOM_S5_DOS_FORCE_CVb3 << 8))",
          "",
          "[Added Lines]",
          "4086: #define ATOM_S5_DOS_REQ_DFP6            0x0040",
          "4089: #define ATOM_S5_DOS_REQ_DFP3            0x0200",
          "4090: #define ATOM_S5_DOS_REQ_DFP4            0x0400",
          "4091: #define ATOM_S5_DOS_REQ_DFP5            0x0800",
          "4097: #define ATOM_S5_DOS_FORCE_DEVICEw1      (ATOM_S5_DOS_FORCE_CRT1b2+ATOM_S5_DOS_FORCE_TV1b2+ATOM_S5_DOS_FORCE_CRT2b2+\\",
          "4098:                                         (ATOM_S5_DOS_FORCE_CVb3<<8))",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3285: #define ATOM_S6_HW_I2C_BUSY_STATE       0x00000200L",
          "3286: #define ATOM_S6_THERMAL_STATE_CHANGE    0x00000400L",
          "3287: #define ATOM_S6_INTERRUPT_SET_BY_BIOS   0x00000800L",
          "3294: #define ATOM_S6_ACC_REQ_CRT1            0x00010000L",
          "3295: #define ATOM_S6_ACC_REQ_LCD1            0x00020000L",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4113: #define ATOM_S6_REQ_LCD_EXPANSION_FULL         0x00001000L //Normal expansion Request bit for LCD",
          "4114: #define ATOM_S6_REQ_LCD_EXPANSION_ASPEC_RATIO  0x00002000L //Aspect ratio expansion Request bit for LCD",
          "4116: #define ATOM_S6_DISPLAY_STATE_CHANGE    0x00004000L        //This bit is recycled when ATOM_BIOS_INFO_BIOS_SCRATCH6_SCL2_REDEFINE is set,previously it's SCL2_H_expansion",
          "4117: #define ATOM_S6_I2C_STATE_CHANGE        0x00008000L        //This bit is recycled,when ATOM_BIOS_INFO_BIOS_SCRATCH6_SCL2_REDEFINE is set,previously it's SCL2_V_expansion",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3297: #define ATOM_S6_ACC_REQ_DFP1            0x00080000L",
          "3298: #define ATOM_S6_ACC_REQ_CRT2            0x00100000L",
          "3299: #define ATOM_S6_ACC_REQ_LCD2            0x00200000L",
          "3301: #define ATOM_S6_ACC_REQ_DFP2            0x00800000L",
          "3302: #define ATOM_S6_ACC_REQ_CV              0x01000000L",
          "3303: #define ATOM_S6_ACC_REQ_DFP3      0x02000000L",
          "",
          "[Removed Lines]",
          "3300: #define ATOM_S6_ACC_REQ_TV2             0x00400000L",
          "",
          "[Added Lines]",
          "4125: #define ATOM_S6_ACC_REQ_DFP6            0x00400000L",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3320: #define ATOM_S6_LID_STATEb0             0x40",
          "3321: #define ATOM_S6_DOCK_STATEb0            0x80",
          "3322: #define ATOM_S6_CRITICAL_STATEb1        0x01",
          "3324: #define ATOM_S6_THERMAL_STATE_CHANGEb1  0x04",
          "3325: #define ATOM_S6_INTERRUPT_SET_BY_BIOSb1 0x08",
          "3329: #define ATOM_S6_ACC_REQ_CRT1b2          0x01",
          "3330: #define ATOM_S6_ACC_REQ_LCD1b2          0x02",
          "",
          "[Removed Lines]",
          "3323: #define ATOM_S6_HW_I2C_BUSY_STATEb1     0x02",
          "3326: #define ATOM_S6_REQ_LCD_EXPANSION_FULLb1        0x10",
          "3327: #define ATOM_S6_REQ_LCD_EXPANSION_ASPEC_RATIOb1 0x20",
          "",
          "[Added Lines]",
          "4148: #define ATOM_S6_HW_I2C_BUSY_STATEb1     0x02",
          "4151: #define ATOM_S6_REQ_LCD_EXPANSION_FULLb1        0x10",
          "4152: #define ATOM_S6_REQ_LCD_EXPANSION_ASPEC_RATIOb1 0x20",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3332: #define ATOM_S6_ACC_REQ_DFP1b2          0x08",
          "3333: #define ATOM_S6_ACC_REQ_CRT2b2          0x10",
          "3334: #define ATOM_S6_ACC_REQ_LCD2b2          0x20",
          "3336: #define ATOM_S6_ACC_REQ_DFP2b2          0x80",
          "3337: #define ATOM_S6_ACC_REQ_CVb3            0x01",
          "3342: #define ATOM_S6_ACC_REQ_DEVICEw1        ATOM_S5_DOS_REQ_DEVICEw0",
          "3343: #define ATOM_S6_SYSTEM_POWER_MODE_CHANGEb3 0x10",
          "",
          "[Removed Lines]",
          "3335: #define ATOM_S6_ACC_REQ_TV2b2           0x40",
          "3338: #define ATOM_S6_ACC_REQ_DFP3b3     0x02",
          "3339: #define ATOM_S6_ACC_REQ_DFP4b3     0x04",
          "3340: #define ATOM_S6_ACC_REQ_DFP5b3     0x08",
          "",
          "[Added Lines]",
          "4160: #define ATOM_S6_ACC_REQ_DFP6b2          0x40",
          "4163: #define ATOM_S6_ACC_REQ_DFP3b3          0x02",
          "4164: #define ATOM_S6_ACC_REQ_DFP4b3          0x04",
          "4165: #define ATOM_S6_ACC_REQ_DFP5b3          0x08",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3379: #define ATOM_S7_DOS_8BIT_DAC_EN_SHIFT       8",
          "3382: #define ATOM_S8_I2C_CHANNEL_BUSY_MASK       0x00000FFFF",
          "3385: #define ATOM_S8_I2C_CHANNEL_BUSY_SHIFT      0",
          "3386: #define ATOM_S8_I2C_ENGINE_BUSY_SHIFT       16",
          "3390: #define ATOM_S9_I2C_CHANNEL_COMPLETED_MASK  0x0000FFFF",
          "3391: #endif",
          "3393: #define ATOM_S9_I2C_CHANNEL_ABORTED_MASK    0xFFFF0000",
          "3394: #endif",
          "3396: #define ATOM_S9_I2C_CHANNEL_COMPLETED_SHIFT 0",
          "3397: #endif",
          "3399: #define ATOM_S9_I2C_CHANNEL_ABORTED_SHIFT   16",
          "3400: #endif",
          "3402: #define ATOM_FLAG_SET                         0x20",
          "3403: #define ATOM_FLAG_CLEAR                       0",
          "3497: #define GET_COMMAND_TABLE_COMMANDSET_REVISION(TABLE_HEADER_OFFSET) ((((ATOM_COMMON_TABLE_HEADER*)TABLE_HEADER_OFFSET)->ucTableFormatRevision)&0x3F)",
          "3498: #define GET_COMMAND_TABLE_PARAMETER_REVISION(TABLE_HEADER_OFFSET)  ((((ATOM_COMMON_TABLE_HEADER*)TABLE_HEADER_OFFSET)->ucTableContentRevision)&0x3F)",
          "3500: #define GET_DATA_TABLE_MAJOR_REVISION GET_COMMAND_TABLE_COMMANDSET_REVISION",
          "3501: #define GET_DATA_TABLE_MINOR_REVISION GET_COMMAND_TABLE_PARAMETER_REVISION",
          "3506: #define ATOM_DAC_SRC     0x80",
          "3507: #define ATOM_SRC_DAC1     0",
          "3508: #define ATOM_SRC_DAC2     0x80",
          "3522: #define MEMORY_PLLINIT_PS_ALLOCATION  MEMORY_PLLINIT_PARAMETERS",
          "3525: #define GPIO_PIN_READ              0x00",
          "3543: #define SCALER_BYPASS_AUTO_CENTER_NO_REPLICATION    0",
          "3544: #define SCALER_BYPASS_AUTO_CENTER_AUTO_REPLICATION  1",
          "3545: #define SCALER_ENABLE_2TAP_ALPHA_MODE               2",
          "3546: #define SCALER_ENABLE_MULTITAP_MODE                 3",
          "3585: #define MEMORY_CLEAN_UP_PS_ALLOCATION MEMORY_CLEAN_UP_PARAMETERS",
          "3595: } INDIRECT_IO_ACCESS;",
          "3597: #define INDIRECT_READ              0x00",
          "",
          "[Removed Lines]",
          "3383: #define ATOM_S8_I2C_HW_ENGINE_BUSY_MASK     0x0FFFF0000",
          "3389: #ifndef ATOM_S9_I2C_CHANNEL_COMPLETED_MASK",
          "3392: #ifndef ATOM_S9_I2C_CHANNEL_ABORTED_MASK",
          "3395: #ifndef ATOM_S9_I2C_CHANNEL_COMPLETED_SHIFT",
          "3398: #ifndef ATOM_S9_I2C_CHANNEL_ABORTED_SHIFT",
          "3404: #define CLEAR_ATOM_S6_ACC_MODE \\",
          "3405:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3406:   ATOM_S6_ACC_MODE_SHIFT | ATOM_FLAG_CLEAR)",
          "3407: #define SET_ATOM_S6_DEVICE_CHANGE \\",
          "3408:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3409:   ATOM_S6_DEVICE_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "3410: #define SET_ATOM_S6_VRI_BRIGHTNESS_CHANGE \\",
          "3411:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3412:   ATOM_S6_VRI_BRIGHTNESS_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "3413: #define SET_ATOM_S6_SCALER_CHANGE \\",
          "3414:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3415:   ATOM_S6_SCALER_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "3416: #define SET_ATOM_S6_LID_CHANGE \\",
          "3417:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3418:   ATOM_S6_LID_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "3420: #define SET_ATOM_S6_LID_STATE \\",
          "3421:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) |\\",
          "3422:   ATOM_S6_LID_STATE_SHIFT | ATOM_FLAG_SET)",
          "3423: #define CLEAR_ATOM_S6_LID_STATE \\",
          "3424:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3425:   ATOM_S6_LID_STATE_SHIFT | ATOM_FLAG_CLEAR)",
          "3427: #define SET_ATOM_S6_DOCK_CHANGE \\",
          "3428:  ((ATOM_ACC_CHANGE_INFO_DEF << 8)| \\",
          "3429:   ATOM_S6_DOCKING_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "3430: #define SET_ATOM_S6_DOCK_STATE \\",
          "3431:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3432:   ATOM_S6_DOCK_STATE_SHIFT | ATOM_FLAG_SET)",
          "3433: #define CLEAR_ATOM_S6_DOCK_STATE \\",
          "3434:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3435:   ATOM_S6_DOCK_STATE_SHIFT | ATOM_FLAG_CLEAR)",
          "3437: #define SET_ATOM_S6_THERMAL_STATE_CHANGE \\",
          "3438:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3439:   ATOM_S6_THERMAL_STATE_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "3440: #define SET_ATOM_S6_SYSTEM_POWER_MODE_CHANGE \\",
          "3441:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3442:   ATOM_S6_SYSTEM_POWER_MODE_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "3443: #define SET_ATOM_S6_INTERRUPT_SET_BY_BIOS \\",
          "3444:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3445:   ATOM_S6_INTERRUPT_SET_BY_BIOS_SHIFT | ATOM_FLAG_SET)",
          "3447: #define SET_ATOM_S6_CRITICAL_STATE \\",
          "3448:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3449:   ATOM_S6_CRITICAL_STATE_SHIFT | ATOM_FLAG_SET)",
          "3450: #define CLEAR_ATOM_S6_CRITICAL_STATE \\",
          "3451:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3452:   ATOM_S6_CRITICAL_STATE_SHIFT | ATOM_FLAG_CLEAR)",
          "3454: #define SET_ATOM_S6_REQ_SCALER \\",
          "3455:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3456:   ATOM_S6_REQ_SCALER_SHIFT | ATOM_FLAG_SET)",
          "3457: #define CLEAR_ATOM_S6_REQ_SCALER \\",
          "3458:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3459:   ATOM_S6_REQ_SCALER_SHIFT | ATOM_FLAG_CLEAR )",
          "3461: #define SET_ATOM_S6_REQ_SCALER_ARATIO \\",
          "3462:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3463:   ATOM_S6_REQ_SCALER_ARATIO_SHIFT | ATOM_FLAG_SET )",
          "3464: #define CLEAR_ATOM_S6_REQ_SCALER_ARATIO \\",
          "3465:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3466:   ATOM_S6_REQ_SCALER_ARATIO_SHIFT | ATOM_FLAG_CLEAR )",
          "3468: #define SET_ATOM_S6_I2C_STATE_CHANGE \\",
          "3469:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3470:   ATOM_S6_I2C_STATE_CHANGE_SHIFT | ATOM_FLAG_SET )",
          "3472: #define SET_ATOM_S6_DISPLAY_STATE_CHANGE \\",
          "3473:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3474:   ATOM_S6_DISPLAY_STATE_CHANGE_SHIFT | ATOM_FLAG_SET )",
          "3476: #define SET_ATOM_S6_DEVICE_RECONFIG \\",
          "3477:  ((ATOM_ACC_CHANGE_INFO_DEF << 8) | \\",
          "3478:   ATOM_S6_CONFIG_DISPLAY_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "3479: #define CLEAR_ATOM_S0_LCD1 \\",
          "3480:  ((ATOM_DEVICE_CONNECT_INFO_DEF << 8 ) | \\",
          "3481:   ATOM_S0_LCD1_SHIFT | ATOM_FLAG_CLEAR )",
          "3482: #define SET_ATOM_S7_DOS_8BIT_DAC_EN \\",
          "3483:  ((ATOM_DOS_MODE_INFO_DEF << 8) | \\",
          "3484:   ATOM_S7_DOS_8BIT_DAC_EN_SHIFT | ATOM_FLAG_SET )",
          "3485: #define CLEAR_ATOM_S7_DOS_8BIT_DAC_EN \\",
          "3486:  ((ATOM_DOS_MODE_INFO_DEF << 8) | \\",
          "3487:   ATOM_S7_DOS_8BIT_DAC_EN_SHIFT | ATOM_FLAG_CLEAR )",
          "3495: #define GetIndexIntoMasterTable(MasterOrData, FieldName) (((char *)(&((ATOM_MASTER_LIST_OF_##MasterOrData##_TABLES *)0)->FieldName)-(char *)0)/sizeof(USHORT))",
          "3510: #ifdef UEFI_BUILD",
          "3511: #define USHORT UTEMP",
          "3512: #endif",
          "3514: typedef struct _MEMORY_PLLINIT_PARAMETERS {",
          "3520: } MEMORY_PLLINIT_PARAMETERS;",
          "3524: #define GPIO_PIN_WRITE             0x01",
          "3527: typedef struct _GPIO_PIN_CONTROL_PARAMETERS {",
          "3532: } GPIO_PIN_CONTROL_PARAMETERS;",
          "3534: typedef struct _ENABLE_SCALER_PARAMETERS {",
          "3538:  UCHAR ucPadding[1];",
          "3539: } ENABLE_SCALER_PARAMETERS;",
          "3540: #define ENABLE_SCALER_PS_ALLOCATION ENABLE_SCALER_PARAMETERS",
          "3548: typedef struct _ENABLE_HARDWARE_ICON_CURSOR_PARAMETERS {",
          "3554: } ENABLE_HARDWARE_ICON_CURSOR_PARAMETERS;",
          "3556: typedef struct _ENABLE_HARDWARE_ICON_CURSOR_PS_ALLOCATION {",
          "3557:  ENABLE_HARDWARE_ICON_CURSOR_PARAMETERS sEnableIcon;",
          "3558:  ENABLE_CRTC_PARAMETERS sReserved;",
          "3559: } ENABLE_HARDWARE_ICON_CURSOR_PS_ALLOCATION;",
          "3561: typedef struct _ENABLE_GRAPH_SURFACE_PARAMETERS {",
          "3565:  UCHAR ucPadding[3];",
          "3566: } ENABLE_GRAPH_SURFACE_PARAMETERS;",
          "3568: typedef struct _ENABLE_GRAPH_SURFACE_PARAMETERS_V1_2 {",
          "3573:  UCHAR ucPadding[2];",
          "3574: } ENABLE_GRAPH_SURFACE_PARAMETERS_V1_2;",
          "3576: typedef struct _ENABLE_GRAPH_SURFACE_PS_ALLOCATION {",
          "3577:  ENABLE_GRAPH_SURFACE_PARAMETERS sSetSurface;",
          "3579: } ENABLE_GRAPH_SURFACE_PS_ALLOCATION;",
          "3581: typedef struct _MEMORY_CLEAN_UP_PARAMETERS {",
          "3584: } MEMORY_CLEAN_UP_PARAMETERS;",
          "3587: typedef struct _GET_DISPLAY_SURFACE_SIZE_PARAMETERS {",
          "3589:  USHORT usY_Size;",
          "3590: } GET_DISPLAY_SURFACE_SIZE_PARAMETERS;",
          "3592: typedef struct _INDIRECT_IO_ACCESS {",
          "3593:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "3594:  UCHAR IOAccessSequence[256];",
          "",
          "[Added Lines]",
          "4208: #define ATOM_S8_I2C_HW_ENGINE_BUSY_MASK     0x0FFFF0000",
          "4214: #ifndef ATOM_S9_I2C_CHANNEL_COMPLETED_MASK",
          "4217: #ifndef ATOM_S9_I2C_CHANNEL_ABORTED_MASK",
          "4220: #ifndef ATOM_S9_I2C_CHANNEL_COMPLETED_SHIFT",
          "4223: #ifndef ATOM_S9_I2C_CHANNEL_ABORTED_SHIFT",
          "4230: #define CLEAR_ATOM_S6_ACC_MODE                ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_ACC_MODE_SHIFT | ATOM_FLAG_CLEAR)",
          "4231: #define SET_ATOM_S6_DEVICE_CHANGE             ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_DEVICE_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "4232: #define SET_ATOM_S6_VRI_BRIGHTNESS_CHANGE     ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_VRI_BRIGHTNESS_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "4233: #define SET_ATOM_S6_SCALER_CHANGE             ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_SCALER_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "4234: #define SET_ATOM_S6_LID_CHANGE                ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_LID_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "4236: #define SET_ATOM_S6_LID_STATE                 ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_LID_STATE_SHIFT | ATOM_FLAG_SET)",
          "4237: #define CLEAR_ATOM_S6_LID_STATE               ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_LID_STATE_SHIFT | ATOM_FLAG_CLEAR)",
          "4239: #define SET_ATOM_S6_DOCK_CHANGE             ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_DOCKING_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "4240: #define SET_ATOM_S6_DOCK_STATE                ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_DOCK_STATE_SHIFT | ATOM_FLAG_SET)",
          "4241: #define CLEAR_ATOM_S6_DOCK_STATE              ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_DOCK_STATE_SHIFT | ATOM_FLAG_CLEAR)",
          "4243: #define SET_ATOM_S6_THERMAL_STATE_CHANGE      ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_THERMAL_STATE_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "4244: #define SET_ATOM_S6_SYSTEM_POWER_MODE_CHANGE  ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_SYSTEM_POWER_MODE_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "4245: #define SET_ATOM_S6_INTERRUPT_SET_BY_BIOS     ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_INTERRUPT_SET_BY_BIOS_SHIFT | ATOM_FLAG_SET)",
          "4247: #define SET_ATOM_S6_CRITICAL_STATE            ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_CRITICAL_STATE_SHIFT | ATOM_FLAG_SET)",
          "4248: #define CLEAR_ATOM_S6_CRITICAL_STATE          ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_CRITICAL_STATE_SHIFT | ATOM_FLAG_CLEAR)",
          "4250: #define SET_ATOM_S6_REQ_SCALER                ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_REQ_SCALER_SHIFT | ATOM_FLAG_SET)",
          "4251: #define CLEAR_ATOM_S6_REQ_SCALER              ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_REQ_SCALER_SHIFT | ATOM_FLAG_CLEAR )",
          "4253: #define SET_ATOM_S6_REQ_SCALER_ARATIO         ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_REQ_SCALER_ARATIO_SHIFT | ATOM_FLAG_SET )",
          "4254: #define CLEAR_ATOM_S6_REQ_SCALER_ARATIO       ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_REQ_SCALER_ARATIO_SHIFT | ATOM_FLAG_CLEAR )",
          "4256: #define SET_ATOM_S6_I2C_STATE_CHANGE          ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_I2C_STATE_CHANGE_SHIFT | ATOM_FLAG_SET )",
          "4258: #define SET_ATOM_S6_DISPLAY_STATE_CHANGE      ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_DISPLAY_STATE_CHANGE_SHIFT | ATOM_FLAG_SET )",
          "4260: #define SET_ATOM_S6_DEVICE_RECONFIG           ((ATOM_ACC_CHANGE_INFO_DEF << 8 )|ATOM_S6_CONFIG_DISPLAY_CHANGE_SHIFT | ATOM_FLAG_SET)",
          "4261: #define CLEAR_ATOM_S0_LCD1                    ((ATOM_DEVICE_CONNECT_INFO_DEF << 8 )|  ATOM_S0_LCD1_SHIFT | ATOM_FLAG_CLEAR )",
          "4262: #define SET_ATOM_S7_DOS_8BIT_DAC_EN           ((ATOM_DOS_MODE_INFO_DEF << 8 )|ATOM_S7_DOS_8BIT_DAC_EN_SHIFT | ATOM_FLAG_SET )",
          "4263: #define CLEAR_ATOM_S7_DOS_8BIT_DAC_EN         ((ATOM_DOS_MODE_INFO_DEF << 8 )|ATOM_S7_DOS_8BIT_DAC_EN_SHIFT | ATOM_FLAG_CLEAR )",
          "4270: #ifdef __cplusplus",
          "4271: #define GetIndexIntoMasterTable(MasterOrData, FieldName) ((reinterpret_cast<char*>(&(static_cast<ATOM_MASTER_LIST_OF_##MasterOrData##_TABLES*>(0))->FieldName)-static_cast<char*>(0))/sizeof(USHORT))",
          "4273: #define GET_COMMAND_TABLE_COMMANDSET_REVISION(TABLE_HEADER_OFFSET) (((static_cast<ATOM_COMMON_TABLE_HEADER*>(TABLE_HEADER_OFFSET))->ucTableFormatRevision )&0x3F)",
          "4274: #define GET_COMMAND_TABLE_PARAMETER_REVISION(TABLE_HEADER_OFFSET)  (((static_cast<ATOM_COMMON_TABLE_HEADER*>(TABLE_HEADER_OFFSET))->ucTableContentRevision)&0x3F)",
          "4275: #else // not __cplusplus",
          "4276: #define GetIndexIntoMasterTable(MasterOrData, FieldName) (((char*)(&((ATOM_MASTER_LIST_OF_##MasterOrData##_TABLES*)0)->FieldName)-(char*)0)/sizeof(USHORT))",
          "4280: #endif // __cplusplus",
          "4292: typedef struct _MEMORY_PLLINIT_PARAMETERS",
          "4293: {",
          "4294:   ULONG ulTargetMemoryClock; //In 10Khz unit",
          "4295:   UCHAR   ucAction;      //not define yet",
          "4296:   UCHAR   ucFbDiv_Hi;     //Fbdiv Hi byte",
          "4297:   UCHAR   ucFbDiv;      //FB value",
          "4298:   UCHAR   ucPostDiv;     //Post div",
          "4299: }MEMORY_PLLINIT_PARAMETERS;",
          "4304: #define GPIO_PIN_WRITE             0x01",
          "4307: typedef struct  _GPIO_PIN_CONTROL_PARAMETERS",
          "4308: {",
          "4309:   UCHAR ucGPIO_ID;           //return value, read from GPIO pins",
          "4310:   UCHAR ucGPIOBitShift;      //define which bit in uGPIOBitVal need to be update",
          "4311:  UCHAR ucGPIOBitVal;       //Set/Reset corresponding bit defined in ucGPIOBitMask",
          "4312:   UCHAR ucAction;         //=GPIO_PIN_WRITE: Read; =GPIO_PIN_READ: Write",
          "4313: }GPIO_PIN_CONTROL_PARAMETERS;",
          "4315: typedef struct _ENABLE_SCALER_PARAMETERS",
          "4316: {",
          "4317:   UCHAR ucScaler;            // ATOM_SCALER1, ATOM_SCALER2",
          "4318:   UCHAR ucEnable;            // ATOM_SCALER_DISABLE or ATOM_SCALER_CENTER or ATOM_SCALER_EXPANSION",
          "4319:   UCHAR ucTVStandard;        //",
          "4320:   UCHAR ucPadding[1];",
          "4321: }ENABLE_SCALER_PARAMETERS;",
          "4322: #define ENABLE_SCALER_PS_ALLOCATION ENABLE_SCALER_PARAMETERS",
          "4330: typedef struct _ENABLE_HARDWARE_ICON_CURSOR_PARAMETERS",
          "4331: {",
          "4332:   ULONG  usHWIconHorzVertPosn;        // Hardware Icon Vertical position",
          "4333:   UCHAR  ucHWIconVertOffset;          // Hardware Icon Vertical offset",
          "4334:   UCHAR  ucHWIconHorzOffset;          // Hardware Icon Horizontal offset",
          "4335:   UCHAR  ucSelection;                 // ATOM_CURSOR1 or ATOM_ICON1 or ATOM_CURSOR2 or ATOM_ICON2",
          "4336:   UCHAR  ucEnable;                    // ATOM_ENABLE or ATOM_DISABLE",
          "4337: }ENABLE_HARDWARE_ICON_CURSOR_PARAMETERS;",
          "4339: typedef struct _ENABLE_HARDWARE_ICON_CURSOR_PS_ALLOCATION",
          "4340: {",
          "4341:   ENABLE_HARDWARE_ICON_CURSOR_PARAMETERS  sEnableIcon;",
          "4342:   ENABLE_CRTC_PARAMETERS                  sReserved;",
          "4343: }ENABLE_HARDWARE_ICON_CURSOR_PS_ALLOCATION;",
          "4345: typedef struct _ENABLE_GRAPH_SURFACE_PARAMETERS",
          "4346: {",
          "4347:   USHORT usHight;                     // Image Hight",
          "4348:   USHORT usWidth;                     // Image Width",
          "4349:   UCHAR  ucSurface;                   // Surface 1 or 2",
          "4350:   UCHAR  ucPadding[3];",
          "4351: }ENABLE_GRAPH_SURFACE_PARAMETERS;",
          "4353: typedef struct _ENABLE_GRAPH_SURFACE_PARAMETERS_V1_2",
          "4354: {",
          "4355:   USHORT usHight;                     // Image Hight",
          "4356:   USHORT usWidth;                     // Image Width",
          "4357:   UCHAR  ucSurface;                   // Surface 1 or 2",
          "4358:   UCHAR  ucEnable;                    // ATOM_ENABLE or ATOM_DISABLE",
          "4359:   UCHAR  ucPadding[2];",
          "4360: }ENABLE_GRAPH_SURFACE_PARAMETERS_V1_2;",
          "4362: typedef struct _ENABLE_GRAPH_SURFACE_PARAMETERS_V1_3",
          "4363: {",
          "4364:   USHORT usHight;                     // Image Hight",
          "4365:   USHORT usWidth;                     // Image Width",
          "4366:   UCHAR  ucSurface;                   // Surface 1 or 2",
          "4367:   UCHAR  ucEnable;                    // ATOM_ENABLE or ATOM_DISABLE",
          "4368:   USHORT usDeviceId;                  // Active Device Id for this surface. If no device, set to 0.",
          "4369: }ENABLE_GRAPH_SURFACE_PARAMETERS_V1_3;",
          "4371: typedef struct _ENABLE_GRAPH_SURFACE_PS_ALLOCATION",
          "4372: {",
          "4373:   ENABLE_GRAPH_SURFACE_PARAMETERS sSetSurface;",
          "4374:   ENABLE_YUV_PS_ALLOCATION        sReserved; // Don't set this one",
          "4375: }ENABLE_GRAPH_SURFACE_PS_ALLOCATION;",
          "4377: typedef struct _MEMORY_CLEAN_UP_PARAMETERS",
          "4378: {",
          "4379:   USHORT  usMemoryStart;                //in 8Kb boundry, offset from memory base address",
          "4380:   USHORT  usMemorySize;                 //8Kb blocks aligned",
          "4381: }MEMORY_CLEAN_UP_PARAMETERS;",
          "4384: typedef struct  _GET_DISPLAY_SURFACE_SIZE_PARAMETERS",
          "4385: {",
          "4386:   USHORT  usX_Size;                     //When use as input parameter, usX_Size indicates which CRTC",
          "4387:   USHORT  usY_Size;",
          "4388: }GET_DISPLAY_SURFACE_SIZE_PARAMETERS;",
          "4390: typedef struct _INDIRECT_IO_ACCESS",
          "4391: {",
          "4392:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "4393:   UCHAR                    IOAccessSequence[256];",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3615: #define INDIRECT_IO_NBMISC_READ    INDIRECT_IO_NBMISC | INDIRECT_READ",
          "3616: #define INDIRECT_IO_NBMISC_WRITE   INDIRECT_IO_NBMISC | INDIRECT_WRITE",
          "3675: #if ATOM_BIG_ENDIAN",
          "3678: #else",
          "3681: #endif",
          "3706: #define END_OF_REG_INDEX_BLOCK  0x0ffff",
          "3707: #define END_OF_REG_DATA_BLOCK   0x00000000",
          "",
          "[Removed Lines]",
          "3618: typedef struct _ATOM_OEM_INFO {",
          "3619:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "3620:  ATOM_I2C_ID_CONFIG_ACCESS sucI2cId;",
          "3621: } ATOM_OEM_INFO;",
          "3623: typedef struct _ATOM_TV_MODE {",
          "3626: } ATOM_TV_MODE;",
          "3628: typedef struct _ATOM_BIOS_INT_TVSTD_MODE {",
          "3629:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "3635: } ATOM_BIOS_INT_TVSTD_MODE;",
          "3637: typedef struct _ATOM_TV_MODE_SCALER_PTR {",
          "3640:  UCHAR ucTV_Mode_Num;",
          "3641: } ATOM_TV_MODE_SCALER_PTR;",
          "3643: typedef struct _ATOM_STANDARD_VESA_TIMING {",
          "3644:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "3646: } ATOM_STANDARD_VESA_TIMING;",
          "3648: typedef struct _ATOM_STD_FORMAT {",
          "3649:  USHORT usSTD_HDisp;",
          "3650:  USHORT usSTD_VDisp;",
          "3651:  USHORT usSTD_RefreshRate;",
          "3652:  USHORT usReserved;",
          "3653: } ATOM_STD_FORMAT;",
          "3655: typedef struct _ATOM_VESA_TO_EXTENDED_MODE {",
          "3656:  USHORT usVESA_ModeNumber;",
          "3657:  USHORT usExtendedModeNumber;",
          "3658: } ATOM_VESA_TO_EXTENDED_MODE;",
          "3660: typedef struct _ATOM_VESA_TO_INTENAL_MODE_LUT {",
          "3661:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "3662:  ATOM_VESA_TO_EXTENDED_MODE asVESA_ToExtendedModeInfo[76];",
          "3663: } ATOM_VESA_TO_INTENAL_MODE_LUT;",
          "3666: typedef struct _ATOM_MEMORY_VENDOR_BLOCK {",
          "3667:  UCHAR ucMemoryType;",
          "3668:  UCHAR ucMemoryVendor;",
          "3669:  UCHAR ucAdjMCId;",
          "3670:  UCHAR ucDynClkId;",
          "3671:  ULONG ulDllResetClkRange;",
          "3672: } ATOM_MEMORY_VENDOR_BLOCK;",
          "3674: typedef struct _ATOM_MEMORY_SETTING_ID_CONFIG {",
          "3676:  ULONG ucMemBlkId:8;",
          "3677:  ULONG ulMemClockRange:24;",
          "3679:  ULONG ulMemClockRange:24;",
          "3680:  ULONG ucMemBlkId:8;",
          "3682: } ATOM_MEMORY_SETTING_ID_CONFIG;",
          "3684: typedef union _ATOM_MEMORY_SETTING_ID_CONFIG_ACCESS {",
          "3685:  ATOM_MEMORY_SETTING_ID_CONFIG slAccess;",
          "3686:  ULONG ulAccess;",
          "3687: } ATOM_MEMORY_SETTING_ID_CONFIG_ACCESS;",
          "3689: typedef struct _ATOM_MEMORY_SETTING_DATA_BLOCK {",
          "3690:  ATOM_MEMORY_SETTING_ID_CONFIG_ACCESS ulMemoryID;",
          "3691:  ULONG aulMemData[1];",
          "3692: } ATOM_MEMORY_SETTING_DATA_BLOCK;",
          "3694: typedef struct _ATOM_INIT_REG_INDEX_FORMAT {",
          "3697: } ATOM_INIT_REG_INDEX_FORMAT;",
          "3699: typedef struct _ATOM_INIT_REG_BLOCK {",
          "3702:  ATOM_INIT_REG_INDEX_FORMAT asRegIndexBuf[1];",
          "3703:  ATOM_MEMORY_SETTING_DATA_BLOCK asRegDataBuf[1];",
          "3704: } ATOM_INIT_REG_BLOCK;",
          "",
          "[Added Lines]",
          "4417: typedef struct _ATOM_OEM_INFO",
          "4418: {",
          "4419:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "4420:   ATOM_I2C_ID_CONFIG_ACCESS sucI2cId;",
          "4421: }ATOM_OEM_INFO;",
          "4423: typedef struct _ATOM_TV_MODE",
          "4424: {",
          "4425:    UCHAR ucVMode_Num;     //Video mode number",
          "4426:    UCHAR ucTV_Mode_Num;   //Internal TV mode number",
          "4427: }ATOM_TV_MODE;",
          "4429: typedef struct _ATOM_BIOS_INT_TVSTD_MODE",
          "4430: {",
          "4431:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "4432:    USHORT usTV_Mode_LUT_Offset; // Pointer to standard to internal number conversion table",
          "4433:    USHORT usTV_FIFO_Offset;    // Pointer to FIFO entry table",
          "4434:    USHORT usNTSC_Tbl_Offset;  // Pointer to SDTV_Mode_NTSC table",
          "4435:    USHORT usPAL_Tbl_Offset;    // Pointer to SDTV_Mode_PAL table",
          "4436:    USHORT usCV_Tbl_Offset;    // Pointer to SDTV_Mode_PAL table",
          "4437: }ATOM_BIOS_INT_TVSTD_MODE;",
          "4440: typedef struct _ATOM_TV_MODE_SCALER_PTR",
          "4441: {",
          "4442:    USHORT ucFilter0_Offset;  //Pointer to filter format 0 coefficients",
          "4443:    USHORT usFilter1_Offset;  //Pointer to filter format 0 coefficients",
          "4444:    UCHAR ucTV_Mode_Num;",
          "4445: }ATOM_TV_MODE_SCALER_PTR;",
          "4447: typedef struct _ATOM_STANDARD_VESA_TIMING",
          "4448: {",
          "4449:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "4450:   ATOM_DTD_FORMAT      aModeTimings[16];      // 16 is not the real array number, just for initial allocation",
          "4451: }ATOM_STANDARD_VESA_TIMING;",
          "4454: typedef struct _ATOM_STD_FORMAT",
          "4455: {",
          "4456:   USHORT    usSTD_HDisp;",
          "4457:   USHORT    usSTD_VDisp;",
          "4458:   USHORT    usSTD_RefreshRate;",
          "4459:   USHORT    usReserved;",
          "4460: }ATOM_STD_FORMAT;",
          "4462: typedef struct _ATOM_VESA_TO_EXTENDED_MODE",
          "4463: {",
          "4464:   USHORT  usVESA_ModeNumber;",
          "4465:   USHORT  usExtendedModeNumber;",
          "4466: }ATOM_VESA_TO_EXTENDED_MODE;",
          "4468: typedef struct _ATOM_VESA_TO_INTENAL_MODE_LUT",
          "4469: {",
          "4470:   ATOM_COMMON_TABLE_HEADER   sHeader;",
          "4471:   ATOM_VESA_TO_EXTENDED_MODE asVESA_ToExtendedModeInfo[76];",
          "4472: }ATOM_VESA_TO_INTENAL_MODE_LUT;",
          "4475: typedef struct _ATOM_MEMORY_VENDOR_BLOCK{",
          "4476:  UCHAR            ucMemoryType;",
          "4477:  UCHAR            ucMemoryVendor;",
          "4478:  UCHAR            ucAdjMCId;",
          "4479:  UCHAR            ucDynClkId;",
          "4480:  ULONG            ulDllResetClkRange;",
          "4481: }ATOM_MEMORY_VENDOR_BLOCK;",
          "4484: typedef struct _ATOM_MEMORY_SETTING_ID_CONFIG{",
          "4486:  ULONG            ucMemBlkId:8;",
          "4487:  ULONG            ulMemClockRange:24;",
          "4489:  ULONG            ulMemClockRange:24;",
          "4490:  ULONG            ucMemBlkId:8;",
          "4492: }ATOM_MEMORY_SETTING_ID_CONFIG;",
          "4494: typedef union _ATOM_MEMORY_SETTING_ID_CONFIG_ACCESS",
          "4495: {",
          "4496:   ATOM_MEMORY_SETTING_ID_CONFIG slAccess;",
          "4497:   ULONG                         ulAccess;",
          "4498: }ATOM_MEMORY_SETTING_ID_CONFIG_ACCESS;",
          "4501: typedef struct _ATOM_MEMORY_SETTING_DATA_BLOCK{",
          "4502:  ATOM_MEMORY_SETTING_ID_CONFIG_ACCESS   ulMemoryID;",
          "4503:  ULONG                       aulMemData[1];",
          "4504: }ATOM_MEMORY_SETTING_DATA_BLOCK;",
          "4507: typedef struct _ATOM_INIT_REG_INDEX_FORMAT{",
          "4508:   USHORT           usRegIndex;                                     // MC register index",
          "4509:   UCHAR           ucPreRegDataLength;                             // offset in ATOM_INIT_REG_DATA_BLOCK.saRegDataBuf",
          "4510: }ATOM_INIT_REG_INDEX_FORMAT;",
          "4513: typedef struct _ATOM_INIT_REG_BLOCK{",
          "4514:  USHORT             usRegIndexTblSize;             //size of asRegIndexBuf",
          "4515:  USHORT             usRegDataBlkSize;              //size of ATOM_MEMORY_SETTING_DATA_BLOCK",
          "4516:  ATOM_INIT_REG_INDEX_FORMAT   asRegIndexBuf[1];",
          "4517:  ATOM_MEMORY_SETTING_DATA_BLOCK asRegDataBuf[1];",
          "4518: }ATOM_INIT_REG_BLOCK;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3716: #define INDEX_ACCESS_RANGE_END      (INDEX_ACCESS_RANGE_BEGIN + 1)",
          "3717: #define VALUE_INDEX_ACCESS_SINGLE     (INDEX_ACCESS_RANGE_END + 1)",
          "3730: #define _4Mx16              0x2",
          "3731: #define _4Mx32              0x3",
          "",
          "[Removed Lines]",
          "3719: typedef struct _ATOM_MC_INIT_PARAM_TABLE {",
          "3720:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "3721:  USHORT usAdjustARB_SEQDataOffset;",
          "3722:  USHORT usMCInitMemTypeTblOffset;",
          "3723:  USHORT usMCInitCommonTblOffset;",
          "3724:  USHORT usMCInitPowerDownTblOffset;",
          "3725:  ULONG ulARB_SEQDataBuf[32];",
          "3726:  ATOM_INIT_REG_BLOCK asMCInitMemType;",
          "3727:  ATOM_INIT_REG_BLOCK asMCInitCommon;",
          "3728: } ATOM_MC_INIT_PARAM_TABLE;",
          "",
          "[Added Lines]",
          "4534: typedef struct _ATOM_MC_INIT_PARAM_TABLE",
          "4535: {",
          "4536:   ATOM_COMMON_TABLE_HEADER  sHeader;",
          "4537:   USHORT           usAdjustARB_SEQDataOffset;",
          "4538:   USHORT           usMCInitMemTypeTblOffset;",
          "4539:   USHORT           usMCInitCommonTblOffset;",
          "4540:   USHORT           usMCInitPowerDownTblOffset;",
          "4541:  ULONG            ulARB_SEQDataBuf[32];",
          "4542:  ATOM_INIT_REG_BLOCK     asMCInitMemType;",
          "4543:  ATOM_INIT_REG_BLOCK     asMCInitCommon;",
          "4544: }ATOM_MC_INIT_PARAM_TABLE;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3752: #define QIMONDA             INFINEON",
          "3753: #define PROMOS              MOSEL",
          "3757: #define UCODE_ROM_START_ADDRESS  0x1c000",
          "3772: } MCuCodeHeader;",
          "3776: #define ATOM_MAX_NUMBER_OF_VRAM_MODULE 16",
          "3778: #define ATOM_VRAM_MODULE_MEMORY_VENDOR_ID_MASK 0xF",
          "3930: #define NPL_RT_MASK               0x0f",
          "3931: #define BATTERY_ODT_MASK            0xc0",
          "3933: #define ATOM_VRAM_MODULE   ATOM_VRAM_MODULE_V3",
          "3970: #define VRAM_MODULE_V4_MISC_RANK_MASK       0x3",
          "3971: #define VRAM_MODULE_V4_MISC_DUAL_RANK       0x1",
          "",
          "[Removed Lines]",
          "3762: typedef struct _MCuCodeHeader {",
          "3763:  ULONG ulSignature;",
          "3764:  UCHAR ucRevision;",
          "3765:  UCHAR ucChecksum;",
          "3766:  UCHAR ucReserved1;",
          "3767:  UCHAR ucReserved2;",
          "3768:  USHORT usParametersLength;",
          "3769:  USHORT usUCodeLength;",
          "3770:  USHORT usReserved1;",
          "3771:  USHORT usReserved2;",
          "3779: typedef struct _ATOM_VRAM_MODULE_V1 {",
          "3780:  ULONG ulReserved;",
          "3781:  USHORT usEMRSValue;",
          "3782:  USHORT usMRSValue;",
          "3783:  USHORT usReserved;",
          "3796:  UCHAR ucReserved[2];",
          "3797: } ATOM_VRAM_MODULE_V1;",
          "3799: typedef struct _ATOM_VRAM_MODULE_V2 {",
          "3800:  ULONG ulReserved;",
          "3806:  USHORT usEMRSValue;",
          "3807:  USHORT usMRSValue;",
          "3808:  USHORT usReserved;",
          "3821:  UCHAR ucRefreshRateFactor;",
          "3822:  UCHAR ucReserved[3];",
          "3823: } ATOM_VRAM_MODULE_V2;",
          "3825: typedef struct _ATOM_MEMORY_TIMING_FORMAT {",
          "3827:  union {",
          "3829:   USHORT usDDR3_MR0;",
          "3830:  };",
          "3831:  union {",
          "3833:   USHORT usDDR3_MR1;",
          "3834:  };",
          "3849:  union {",
          "3850:   struct {",
          "3852:    UCHAR ucReserved;",
          "3853:   };",
          "3854:   USHORT usDDR3_MR2;",
          "3855:  };",
          "3856: } ATOM_MEMORY_TIMING_FORMAT;",
          "3858: typedef struct _ATOM_MEMORY_TIMING_FORMAT_V1 {",
          "3887:  UCHAR ucTerminator;",
          "3888: } ATOM_MEMORY_TIMING_FORMAT_V1;",
          "3890: typedef struct _ATOM_MEMORY_FORMAT {",
          "3892:  union {",
          "3895:  };",
          "3896:  union {",
          "3899:  };",
          "3913: } ATOM_MEMORY_FORMAT;",
          "3915: typedef struct _ATOM_VRAM_MODULE_V3 {",
          "3927: } ATOM_VRAM_MODULE_V3;",
          "3935: typedef struct _ATOM_VRAM_MODULE_V4 {",
          "3940:  USHORT usReserved;",
          "3953:  UCHAR ucReserved[3];",
          "3956:  union {",
          "3958:   USHORT usDDR3_Reserved;",
          "3959:  };",
          "3960:  union {",
          "3963:  };",
          "3966:  UCHAR ucReserved2[2];",
          "3968: } ATOM_VRAM_MODULE_V4;",
          "",
          "[Added Lines]",
          "4571: #define KRETON              INFINEON",
          "4576: #define UCODE_SIGNATURE   0x4375434d // 'MCuC' - MC uCode",
          "4580: typedef struct _MCuCodeHeader",
          "4581: {",
          "4582:   ULONG  ulSignature;",
          "4583:   UCHAR  ucRevision;",
          "4584:   UCHAR  ucChecksum;",
          "4585:   UCHAR  ucReserved1;",
          "4586:   UCHAR  ucReserved2;",
          "4587:   USHORT usParametersLength;",
          "4588:   USHORT usUCodeLength;",
          "4589:   USHORT usReserved1;",
          "4590:   USHORT usReserved2;",
          "4598: typedef struct _ATOM_VRAM_MODULE_V1",
          "4599: {",
          "4600:   ULONG                      ulReserved;",
          "4601:   USHORT                     usEMRSValue;",
          "4602:   USHORT                     usMRSValue;",
          "4603:   USHORT                     usReserved;",
          "4604:   UCHAR                      ucExtMemoryID;     // An external indicator (by hardcode, callback or pin) to tell what is the current memory module",
          "4605:   UCHAR                      ucMemoryType;      // [7:4]=0x1:DDR1;=0x2:DDR2;=0x3:DDR3;=0x4:DDR4;[3:0] reserved;",
          "4606:   UCHAR                      ucMemoryVenderID;  // Predefined,never change across designs or memory type/vender",
          "4607:   UCHAR                      ucMemoryDeviceCfg; // [7:4]=0x0:4M;=0x1:8M;=0x2:16M;0x3:32M....[3:0]=0x0:x4;=0x1:x8;=0x2:x16;=0x3:x32...",
          "4608:   UCHAR                      ucRow;             // Number of Row,in power of 2;",
          "4609:   UCHAR                      ucColumn;          // Number of Column,in power of 2;",
          "4610:   UCHAR                      ucBank;            // Nunber of Bank;",
          "4611:   UCHAR                      ucRank;            // Number of Rank, in power of 2",
          "4612:   UCHAR                      ucChannelNum;      // Number of channel;",
          "4613:   UCHAR                      ucChannelConfig;   // [3:0]=Indication of what channel combination;[4:7]=Channel bit width, in number of 2",
          "4614:   UCHAR                      ucDefaultMVDDQ_ID; // Default MVDDQ setting for this memory block, ID linking to MVDDQ info table to find real set-up data;",
          "4615:   UCHAR                      ucDefaultMVDDC_ID; // Default MVDDC setting for this memory block, ID linking to MVDDC info table to find real set-up data;",
          "4616:   UCHAR                      ucReserved[2];",
          "4617: }ATOM_VRAM_MODULE_V1;",
          "4620: typedef struct _ATOM_VRAM_MODULE_V2",
          "4621: {",
          "4622:   ULONG                      ulReserved;",
          "4623:   ULONG                      ulFlags;        // To enable/disable functionalities based on memory type",
          "4624:   ULONG                      ulEngineClock;     // Override of default engine clock for particular memory type",
          "4625:   ULONG                      ulMemoryClock;     // Override of default memory clock for particular memory type",
          "4626:   USHORT                     usEMRS2Value;      // EMRS2 Value is used for GDDR2 and GDDR4 memory type",
          "4627:   USHORT                     usEMRS3Value;      // EMRS3 Value is used for GDDR2 and GDDR4 memory type",
          "4628:   USHORT                     usEMRSValue;",
          "4629:   USHORT                     usMRSValue;",
          "4630:   USHORT                     usReserved;",
          "4631:   UCHAR                      ucExtMemoryID;     // An external indicator (by hardcode, callback or pin) to tell what is the current memory module",
          "4632:   UCHAR                      ucMemoryType;      // [7:4]=0x1:DDR1;=0x2:DDR2;=0x3:DDR3;=0x4:DDR4;[3:0] - must not be used for now;",
          "4633:   UCHAR                      ucMemoryVenderID;  // Predefined,never change across designs or memory type/vender. If not predefined, vendor detection table gets executed",
          "4634:   UCHAR                      ucMemoryDeviceCfg; // [7:4]=0x0:4M;=0x1:8M;=0x2:16M;0x3:32M....[3:0]=0x0:x4;=0x1:x8;=0x2:x16;=0x3:x32...",
          "4635:   UCHAR                      ucRow;             // Number of Row,in power of 2;",
          "4636:   UCHAR                      ucColumn;          // Number of Column,in power of 2;",
          "4637:   UCHAR                      ucBank;            // Nunber of Bank;",
          "4638:   UCHAR                      ucRank;            // Number of Rank, in power of 2",
          "4639:   UCHAR                      ucChannelNum;      // Number of channel;",
          "4640:   UCHAR                      ucChannelConfig;   // [3:0]=Indication of what channel combination;[4:7]=Channel bit width, in number of 2",
          "4641:   UCHAR                      ucDefaultMVDDQ_ID; // Default MVDDQ setting for this memory block, ID linking to MVDDQ info table to find real set-up data;",
          "4642:   UCHAR                      ucDefaultMVDDC_ID; // Default MVDDC setting for this memory block, ID linking to MVDDC info table to find real set-up data;",
          "4643:   UCHAR                      ucRefreshRateFactor;",
          "4644:   UCHAR                      ucReserved[3];",
          "4645: }ATOM_VRAM_MODULE_V2;",
          "4648: typedef struct _ATOM_MEMORY_TIMING_FORMAT",
          "4649: {",
          "4650:  ULONG            ulClkRange;    // memory clock in 10kHz unit, when target memory clock is below this clock, use this memory timing",
          "4651:   union{",
          "4652:    USHORT           usMRS;       // mode register",
          "4653:     USHORT                     usDDR3_MR0;",
          "4654:   };",
          "4655:   union{",
          "4656:    USHORT           usEMRS;      // extended mode register",
          "4657:     USHORT                     usDDR3_MR1;",
          "4658:   };",
          "4659:  UCHAR            ucCL;       // CAS latency",
          "4660:  UCHAR            ucWL;       // WRITE Latency",
          "4661:  UCHAR            uctRAS;      // tRAS",
          "4662:  UCHAR            uctRC;       // tRC",
          "4663:  UCHAR            uctRFC;      // tRFC",
          "4664:  UCHAR            uctRCDR;      // tRCDR",
          "4665:  UCHAR            uctRCDW;      // tRCDW",
          "4666:  UCHAR            uctRP;       // tRP",
          "4667:  UCHAR            uctRRD;      // tRRD",
          "4668:  UCHAR            uctWR;       // tWR",
          "4669:  UCHAR            uctWTR;      // tWTR",
          "4670:  UCHAR            uctPDIX;      // tPDIX",
          "4671:  UCHAR            uctFAW;      // tFAW",
          "4672:  UCHAR            uctAOND;      // tAOND",
          "4673:   union",
          "4674:   {",
          "4675:     struct {",
          "4676:      UCHAR            ucflag;      // flag to control memory timing calculation. bit0= control EMRS2 Infineon",
          "4677:      UCHAR            ucReserved;",
          "4678:     };",
          "4679:     USHORT                   usDDR3_MR2;",
          "4680:   };",
          "4681: }ATOM_MEMORY_TIMING_FORMAT;",
          "4684: typedef struct _ATOM_MEMORY_TIMING_FORMAT_V1",
          "4685: {",
          "4686:  ULONG            ulClkRange;    // memory clock in 10kHz unit, when target memory clock is below this clock, use this memory timing",
          "4687:  USHORT           usMRS;       // mode register",
          "4688:  USHORT           usEMRS;      // extended mode register",
          "4689:  UCHAR            ucCL;       // CAS latency",
          "4690:  UCHAR            ucWL;       // WRITE Latency",
          "4691:  UCHAR            uctRAS;      // tRAS",
          "4692:  UCHAR            uctRC;       // tRC",
          "4693:  UCHAR            uctRFC;      // tRFC",
          "4694:  UCHAR            uctRCDR;      // tRCDR",
          "4695:  UCHAR            uctRCDW;      // tRCDW",
          "4696:  UCHAR            uctRP;       // tRP",
          "4697:  UCHAR            uctRRD;      // tRRD",
          "4698:  UCHAR            uctWR;       // tWR",
          "4699:  UCHAR            uctWTR;      // tWTR",
          "4700:  UCHAR            uctPDIX;      // tPDIX",
          "4701:  UCHAR            uctFAW;      // tFAW",
          "4702:  UCHAR            uctAOND;      // tAOND",
          "4703:  UCHAR            ucflag;      // flag to control memory timing calculation. bit0= control EMRS2 Infineon",
          "4705:  UCHAR            uctCCDL;      //",
          "4706:  UCHAR            uctCRCRL;      //",
          "4707:  UCHAR            uctCRCWL;      //",
          "4708:  UCHAR            uctCKE;      //",
          "4709:  UCHAR            uctCKRSE;      //",
          "4710:  UCHAR            uctCKRSX;      //",
          "4711:  UCHAR            uctFAW32;      //",
          "4712:  UCHAR            ucMR5lo;     //",
          "4713:  UCHAR            ucMR5hi;     //",
          "4714:  UCHAR            ucTerminator;",
          "4715: }ATOM_MEMORY_TIMING_FORMAT_V1;",
          "4717: typedef struct _ATOM_MEMORY_TIMING_FORMAT_V2",
          "4718: {",
          "4719:  ULONG            ulClkRange;    // memory clock in 10kHz unit, when target memory clock is below this clock, use this memory timing",
          "4720:  USHORT           usMRS;       // mode register",
          "4721:  USHORT           usEMRS;      // extended mode register",
          "4722:  UCHAR            ucCL;       // CAS latency",
          "4723:  UCHAR            ucWL;       // WRITE Latency",
          "4724:  UCHAR            uctRAS;      // tRAS",
          "4725:  UCHAR            uctRC;       // tRC",
          "4726:  UCHAR            uctRFC;      // tRFC",
          "4727:  UCHAR            uctRCDR;      // tRCDR",
          "4728:  UCHAR            uctRCDW;      // tRCDW",
          "4729:  UCHAR            uctRP;       // tRP",
          "4730:  UCHAR            uctRRD;      // tRRD",
          "4731:  UCHAR            uctWR;       // tWR",
          "4732:  UCHAR            uctWTR;      // tWTR",
          "4733:  UCHAR            uctPDIX;      // tPDIX",
          "4734:  UCHAR            uctFAW;      // tFAW",
          "4735:  UCHAR            uctAOND;      // tAOND",
          "4736:  UCHAR            ucflag;      // flag to control memory timing calculation. bit0= control EMRS2 Infineon",
          "4738:  UCHAR            uctCCDL;      //",
          "4739:  UCHAR            uctCRCRL;      //",
          "4740:  UCHAR            uctCRCWL;      //",
          "4741:  UCHAR            uctCKE;      //",
          "4742:  UCHAR            uctCKRSE;      //",
          "4743:  UCHAR            uctCKRSX;      //",
          "4744:  UCHAR            uctFAW32;      //",
          "4745:  UCHAR            ucMR4lo;     //",
          "4746:  UCHAR            ucMR4hi;     //",
          "4747:  UCHAR            ucMR5lo;     //",
          "4748:  UCHAR            ucMR5hi;     //",
          "4749:  UCHAR            ucTerminator;",
          "4750:  UCHAR            ucReserved;",
          "4751: }ATOM_MEMORY_TIMING_FORMAT_V2;",
          "4753: typedef struct _ATOM_MEMORY_FORMAT",
          "4754: {",
          "4755:  ULONG            ulDllDisClock;   // memory DLL will be disable when target memory clock is below this clock",
          "4756:   union{",
          "4757:     USHORT                     usEMRS2Value;      // EMRS2 Value is used for GDDR2 and GDDR4 memory type",
          "4758:     USHORT                     usDDR3_Reserved;   // Not used for DDR3 memory",
          "4759:   };",
          "4760:   union{",
          "4761:     USHORT                     usEMRS3Value;      // EMRS3 Value is used for GDDR2 and GDDR4 memory type",
          "4762:     USHORT                     usDDR3_MR3;        // Used for DDR3 memory",
          "4763:   };",
          "4764:   UCHAR                      ucMemoryType;      // [7:4]=0x1:DDR1;=0x2:DDR2;=0x3:DDR3;=0x4:DDR4;[3:0] - must not be used for now;",
          "4765:   UCHAR                      ucMemoryVenderID;  // Predefined,never change across designs or memory type/vender. If not predefined, vendor detection table gets executed",
          "4766:   UCHAR                      ucRow;             // Number of Row,in power of 2;",
          "4767:   UCHAR                      ucColumn;          // Number of Column,in power of 2;",
          "4768:   UCHAR                      ucBank;            // Nunber of Bank;",
          "4769:   UCHAR                      ucRank;            // Number of Rank, in power of 2",
          "4770:  UCHAR            ucBurstSize;    // burst size, 0= burst size=4  1= burst size=8",
          "4771:   UCHAR                      ucDllDisBit;    // position of DLL Enable/Disable bit in EMRS ( Extended Mode Register )",
          "4772:   UCHAR                      ucRefreshRateFactor; // memory refresh rate in unit of ms",
          "4773:  UCHAR            ucDensity;     // _8Mx32, _16Mx32, _16Mx16, _32Mx16",
          "4774:  UCHAR            ucPreamble;    //[7:4] Write Preamble, [3:0] Read Preamble",
          "4775:   UCHAR            ucMemAttrib;    // Memory Device Addribute, like RDBI/WDBI etc",
          "4776:  ATOM_MEMORY_TIMING_FORMAT  asMemTiming[5];  //Memory Timing block sort from lower clock to higher clock",
          "4777: }ATOM_MEMORY_FORMAT;",
          "4780: typedef struct _ATOM_VRAM_MODULE_V3",
          "4781: {",
          "4782:  ULONG            ulChannelMapCfg;  // board dependent paramenter:Channel combination",
          "4783:  USHORT           usSize;      // size of ATOM_VRAM_MODULE_V3",
          "4784:   USHORT                     usDefaultMVDDQ;  // board dependent parameter:Default Memory Core Voltage",
          "4785:   USHORT                     usDefaultMVDDC;  // board dependent parameter:Default Memory IO Voltage",
          "4786:  UCHAR                      ucExtMemoryID;     // An external indicator (by hardcode, callback or pin) to tell what is the current memory module",
          "4787:   UCHAR                      ucChannelNum;      // board dependent parameter:Number of channel;",
          "4788:  UCHAR            ucChannelSize;   // board dependent parameter:32bit or 64bit",
          "4789:  UCHAR            ucVREFI;      // board dependnt parameter: EXT or INT +160mv to -140mv",
          "4790:  UCHAR            ucNPL_RT;     // board dependent parameter:NPL round trip delay, used for calculate memory timing parameters",
          "4791:  UCHAR            ucFlag;      // To enable/disable functionalities based on memory type",
          "4792:  ATOM_MEMORY_FORMAT     asMemory;     // describ all of video memory parameters from memory spec",
          "4793: }ATOM_VRAM_MODULE_V3;",
          "4802: typedef struct _ATOM_VRAM_MODULE_V4",
          "4803: {",
          "4804:   ULONG   ulChannelMapCfg;                 // board dependent parameter: Channel combination",
          "4805:   USHORT  usModuleSize;                     // size of ATOM_VRAM_MODULE_V4, make it easy for VBIOS to look for next entry of VRAM_MODULE",
          "4806:   USHORT  usPrivateReserved;                // BIOS internal reserved space to optimize code size, updated by the compiler, shouldn't be modified manually!!",
          "4808:   USHORT  usReserved;",
          "4809:   UCHAR   ucExtMemoryID;                  // An external indicator (by hardcode, callback or pin) to tell what is the current memory module",
          "4810:   UCHAR   ucMemoryType;                     // [7:4]=0x1:DDR1;=0x2:DDR2;=0x3:DDR3;=0x4:DDR4; 0x5:DDR5 [3:0] - Must be 0x0 for now;",
          "4811:   UCHAR   ucChannelNum;                     // Number of channels present in this module config",
          "4812:   UCHAR   ucChannelWidth;                   // 0 - 32 bits; 1 - 64 bits",
          "4813:  UCHAR   ucDensity;                        // _8Mx32, _16Mx32, _16Mx16, _32Mx16",
          "4814:  UCHAR   ucFlag;                      // To enable/disable functionalities based on memory type",
          "4815:  UCHAR   ucMisc;                      // bit0: 0 - single rank; 1 - dual rank;   bit2: 0 - burstlength 4, 1 - burstlength 8",
          "4816:   UCHAR  ucVREFI;                          // board dependent parameter",
          "4817:   UCHAR   ucNPL_RT;                         // board dependent parameter:NPL round trip delay, used for calculate memory timing parameters",
          "4818:   UCHAR  ucPreamble;                       // [7:4] Write Preamble, [3:0] Read Preamble",
          "4819:   UCHAR   ucMemorySize;                     // BIOS internal reserved space to optimize code size, updated by the compiler, shouldn't be modified manually!!",
          "4821:   UCHAR   ucReserved[3];",
          "4824:   union{",
          "4825:     USHORT usEMRS2Value;                   // EMRS2 Value is used for GDDR2 and GDDR4 memory type",
          "4826:     USHORT  usDDR3_Reserved;",
          "4827:   };",
          "4828:   union{",
          "4829:     USHORT usEMRS3Value;                   // EMRS3 Value is used for GDDR2 and GDDR4 memory type",
          "4830:     USHORT  usDDR3_MR3;                     // Used for DDR3 memory",
          "4831:   };",
          "4832:   UCHAR   ucMemoryVenderID;                // Predefined, If not predefined, vendor detection table gets executed",
          "4833:   UCHAR   ucRefreshRateFactor;              // [1:0]=RefreshFactor (00=8ms, 01=16ms, 10=32ms,11=64ms)",
          "4834:   UCHAR   ucReserved2[2];",
          "4835:   ATOM_MEMORY_TIMING_FORMAT  asMemTiming[5];//Memory Timing block sort from lower clock to higher clock",
          "4836: }ATOM_VRAM_MODULE_V4;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3973: #define VRAM_MODULE_V4_MISC_BL8             0x4",
          "3974: #define VRAM_MODULE_V4_MISC_DUAL_CS         0x10",
          "4024: #define ATOM_VRAM_INFO_LAST      ATOM_VRAM_INFO_V3",
          "4057: } SW_I2C_CNTL_DATA_PARAMETERS;",
          "4059: #define SW_I2C_CNTL_DATA_PS_ALLOCATION  SW_I2C_CNTL_DATA_PARAMETERS",
          "4067: #define SW_I2C_IO_DATA_PS_ALLOCATION  SW_I2C_IO_DATA_PARAMETERS",
          "",
          "[Removed Lines]",
          "3976: typedef struct _ATOM_VRAM_MODULE_V5 {",
          "3981:  USHORT usReserved;",
          "3994:  UCHAR ucReserved[3];",
          "4004: } ATOM_VRAM_MODULE_V5;",
          "4006: typedef struct _ATOM_VRAM_INFO_V2 {",
          "4007:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4008:  UCHAR ucNumOfVRAMModule;",
          "4010: } ATOM_VRAM_INFO_V2;",
          "4012: typedef struct _ATOM_VRAM_INFO_V3 {",
          "4013:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4016:  USHORT usRerseved;",
          "4018:  UCHAR ucNumOfVRAMModule;",
          "4022: } ATOM_VRAM_INFO_V3;",
          "4026: typedef struct _ATOM_VRAM_INFO_V4 {",
          "4027:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4030:  USHORT usRerseved;",
          "4033:  UCHAR ucReservde[4];",
          "4034:  UCHAR ucNumOfVRAMModule;",
          "4038: } ATOM_VRAM_INFO_V4;",
          "4040: typedef struct _ATOM_VRAM_GPIO_DETECTION_INFO {",
          "4041:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4043: } ATOM_VRAM_GPIO_DETECTION_INFO;",
          "4045: typedef struct _ATOM_MEMORY_TRAINING_INFO {",
          "4046:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4047:  UCHAR ucTrainingLoop;",
          "4048:  UCHAR ucReserved[3];",
          "4049:  ATOM_INIT_REG_BLOCK asMemTrainingSetting;",
          "4050: } ATOM_MEMORY_TRAINING_INFO;",
          "4052: typedef struct SW_I2C_CNTL_DATA_PARAMETERS {",
          "4053:  UCHAR ucControl;",
          "4054:  UCHAR ucData;",
          "4055:  UCHAR ucSatus;",
          "4056:  UCHAR ucTemp;",
          "4061: typedef struct _SW_I2C_IO_DATA_PARAMETERS {",
          "4062:  USHORT GPIO_Info;",
          "4063:  UCHAR ucAct;",
          "4064:  UCHAR ucData;",
          "4065: } SW_I2C_IO_DATA_PARAMETERS;",
          "",
          "[Added Lines]",
          "4844: typedef struct _ATOM_VRAM_MODULE_V5",
          "4845: {",
          "4846:   ULONG   ulChannelMapCfg;                 // board dependent parameter: Channel combination",
          "4847:   USHORT  usModuleSize;                     // size of ATOM_VRAM_MODULE_V4, make it easy for VBIOS to look for next entry of VRAM_MODULE",
          "4848:   USHORT  usPrivateReserved;                // BIOS internal reserved space to optimize code size, updated by the compiler, shouldn't be modified manually!!",
          "4850:   USHORT  usReserved;",
          "4851:   UCHAR   ucExtMemoryID;                  // An external indicator (by hardcode, callback or pin) to tell what is the current memory module",
          "4852:   UCHAR   ucMemoryType;                     // [7:4]=0x1:DDR1;=0x2:DDR2;=0x3:DDR3;=0x4:DDR4; 0x5:DDR5 [3:0] - Must be 0x0 for now;",
          "4853:   UCHAR   ucChannelNum;                     // Number of channels present in this module config",
          "4854:   UCHAR   ucChannelWidth;                   // 0 - 32 bits; 1 - 64 bits",
          "4855:  UCHAR   ucDensity;                        // _8Mx32, _16Mx32, _16Mx16, _32Mx16",
          "4856:  UCHAR   ucFlag;                      // To enable/disable functionalities based on memory type",
          "4857:  UCHAR   ucMisc;                      // bit0: 0 - single rank; 1 - dual rank;   bit2: 0 - burstlength 4, 1 - burstlength 8",
          "4858:   UCHAR  ucVREFI;                          // board dependent parameter",
          "4859:   UCHAR   ucNPL_RT;                         // board dependent parameter:NPL round trip delay, used for calculate memory timing parameters",
          "4860:   UCHAR  ucPreamble;                       // [7:4] Write Preamble, [3:0] Read Preamble",
          "4861:   UCHAR   ucMemorySize;                     // BIOS internal reserved space to optimize code size, updated by the compiler, shouldn't be modified manually!!",
          "4863:   UCHAR   ucReserved[3];",
          "4866:   USHORT usEMRS2Value;                    // EMRS2 Value is used for GDDR2 and GDDR4 memory type",
          "4867:   USHORT usEMRS3Value;                    // EMRS3 Value is used for GDDR2 and GDDR4 memory type",
          "4868:   UCHAR   ucMemoryVenderID;                // Predefined, If not predefined, vendor detection table gets executed",
          "4869:   UCHAR   ucRefreshRateFactor;              // [1:0]=RefreshFactor (00=8ms, 01=16ms, 10=32ms,11=64ms)",
          "4870:   UCHAR   ucFIFODepth;                   // FIFO depth supposes to be detected during vendor detection, but if we dont do vendor detection we have to hardcode FIFO Depth",
          "4871:   UCHAR   ucCDR_Bandwidth;     // [0:3]=Read CDR bandwidth, [4:7] - Write CDR Bandwidth",
          "4872:   ATOM_MEMORY_TIMING_FORMAT_V1  asMemTiming[5];//Memory Timing block sort from lower clock to higher clock",
          "4873: }ATOM_VRAM_MODULE_V5;",
          "4875: typedef struct _ATOM_VRAM_MODULE_V6",
          "4876: {",
          "4877:   ULONG   ulChannelMapCfg;                 // board dependent parameter: Channel combination",
          "4878:   USHORT  usModuleSize;                     // size of ATOM_VRAM_MODULE_V4, make it easy for VBIOS to look for next entry of VRAM_MODULE",
          "4879:   USHORT  usPrivateReserved;                // BIOS internal reserved space to optimize code size, updated by the compiler, shouldn't be modified manually!!",
          "4881:   USHORT  usReserved;",
          "4882:   UCHAR   ucExtMemoryID;                  // An external indicator (by hardcode, callback or pin) to tell what is the current memory module",
          "4883:   UCHAR   ucMemoryType;                     // [7:4]=0x1:DDR1;=0x2:DDR2;=0x3:DDR3;=0x4:DDR4; 0x5:DDR5 [3:0] - Must be 0x0 for now;",
          "4884:   UCHAR   ucChannelNum;                     // Number of channels present in this module config",
          "4885:   UCHAR   ucChannelWidth;                   // 0 - 32 bits; 1 - 64 bits",
          "4886:  UCHAR   ucDensity;                        // _8Mx32, _16Mx32, _16Mx16, _32Mx16",
          "4887:  UCHAR   ucFlag;                      // To enable/disable functionalities based on memory type",
          "4888:  UCHAR   ucMisc;                      // bit0: 0 - single rank; 1 - dual rank;   bit2: 0 - burstlength 4, 1 - burstlength 8",
          "4889:   UCHAR  ucVREFI;                          // board dependent parameter",
          "4890:   UCHAR   ucNPL_RT;                         // board dependent parameter:NPL round trip delay, used for calculate memory timing parameters",
          "4891:   UCHAR  ucPreamble;                       // [7:4] Write Preamble, [3:0] Read Preamble",
          "4892:   UCHAR   ucMemorySize;                     // BIOS internal reserved space to optimize code size, updated by the compiler, shouldn't be modified manually!!",
          "4894:   UCHAR   ucReserved[3];",
          "4897:   USHORT usEMRS2Value;                    // EMRS2 Value is used for GDDR2 and GDDR4 memory type",
          "4898:   USHORT usEMRS3Value;                    // EMRS3 Value is used for GDDR2 and GDDR4 memory type",
          "4899:   UCHAR   ucMemoryVenderID;                // Predefined, If not predefined, vendor detection table gets executed",
          "4900:   UCHAR   ucRefreshRateFactor;              // [1:0]=RefreshFactor (00=8ms, 01=16ms, 10=32ms,11=64ms)",
          "4901:   UCHAR   ucFIFODepth;                   // FIFO depth supposes to be detected during vendor detection, but if we dont do vendor detection we have to hardcode FIFO Depth",
          "4902:   UCHAR   ucCDR_Bandwidth;     // [0:3]=Read CDR bandwidth, [4:7] - Write CDR Bandwidth",
          "4903:   ATOM_MEMORY_TIMING_FORMAT_V2  asMemTiming[5];//Memory Timing block sort from lower clock to higher clock",
          "4904: }ATOM_VRAM_MODULE_V6;",
          "4908: typedef struct _ATOM_VRAM_INFO_V2",
          "4909: {",
          "4910:   ATOM_COMMON_TABLE_HEADER   sHeader;",
          "4911:   UCHAR                      ucNumOfVRAMModule;",
          "4912:   ATOM_VRAM_MODULE           aVramInfo[ATOM_MAX_NUMBER_OF_VRAM_MODULE];      // just for allocation, real number of blocks is in ucNumOfVRAMModule;",
          "4913: }ATOM_VRAM_INFO_V2;",
          "4915: typedef struct _ATOM_VRAM_INFO_V3",
          "4916: {",
          "4917:   ATOM_COMMON_TABLE_HEADER   sHeader;",
          "4918:  USHORT           usMemAdjustTblOffset;              // offset of ATOM_INIT_REG_BLOCK structure for memory vendor specific MC adjust setting",
          "4919:  USHORT           usMemClkPatchTblOffset;             // offset of ATOM_INIT_REG_BLOCK structure for memory clock specific MC setting",
          "4920:  USHORT           usRerseved;",
          "4921:  UCHAR                     aVID_PinsShift[9];                // 8 bit strap maximum+terminator",
          "4922:   UCHAR                      ucNumOfVRAMModule;",
          "4923:   ATOM_VRAM_MODULE         aVramInfo[ATOM_MAX_NUMBER_OF_VRAM_MODULE];      // just for allocation, real number of blocks is in ucNumOfVRAMModule;",
          "4924:  ATOM_INIT_REG_BLOCK     asMemPatch;                   // for allocation",
          "4926: }ATOM_VRAM_INFO_V3;",
          "4930: typedef struct _ATOM_VRAM_INFO_V4",
          "4931: {",
          "4932:   ATOM_COMMON_TABLE_HEADER   sHeader;",
          "4933:  USHORT           usMemAdjustTblOffset;              // offset of ATOM_INIT_REG_BLOCK structure for memory vendor specific MC adjust setting",
          "4934:  USHORT           usMemClkPatchTblOffset;             // offset of ATOM_INIT_REG_BLOCK structure for memory clock specific MC setting",
          "4935:  USHORT           usRerseved;",
          "4936:  UCHAR                     ucMemDQ7_0ByteRemap;                // DQ line byte remap, =0: Memory Data line BYTE0, =1: BYTE1, =2: BYTE2, =3: BYTE3",
          "4937:   ULONG                      ulMemDQ7_0BitRemap;                             // each DQ line ( 7~0) use 3bits, like: DQ0=Bit[2:0], DQ1:[5:3], ... DQ7:[23:21]",
          "4938:   UCHAR                      ucReservde[4];",
          "4939:   UCHAR                      ucNumOfVRAMModule;",
          "4940:   ATOM_VRAM_MODULE_V4       aVramInfo[ATOM_MAX_NUMBER_OF_VRAM_MODULE];      // just for allocation, real number of blocks is in ucNumOfVRAMModule;",
          "4941:  ATOM_INIT_REG_BLOCK     asMemPatch;                   // for allocation",
          "4943: }ATOM_VRAM_INFO_V4;",
          "4945: typedef struct _ATOM_VRAM_GPIO_DETECTION_INFO",
          "4946: {",
          "4947:   ATOM_COMMON_TABLE_HEADER   sHeader;",
          "4948:   UCHAR                     aVID_PinsShift[9];   //8 bit strap maximum+terminator",
          "4949: }ATOM_VRAM_GPIO_DETECTION_INFO;",
          "4952: typedef struct _ATOM_MEMORY_TRAINING_INFO",
          "4953: {",
          "4954:  ATOM_COMMON_TABLE_HEADER   sHeader;",
          "4955:  UCHAR            ucTrainingLoop;",
          "4956:  UCHAR            ucReserved[3];",
          "4957:  ATOM_INIT_REG_BLOCK     asMemTrainingSetting;",
          "4958: }ATOM_MEMORY_TRAINING_INFO;",
          "4961: typedef struct SW_I2C_CNTL_DATA_PARAMETERS",
          "4962: {",
          "4963:   UCHAR    ucControl;",
          "4964:   UCHAR    ucData;",
          "4965:   UCHAR    ucSatus;",
          "4966:   UCHAR    ucTemp;",
          "4971: typedef struct _SW_I2C_IO_DATA_PARAMETERS",
          "4972: {",
          "4973:   USHORT   GPIO_Info;",
          "4974:   UCHAR    ucAct;",
          "4975:   UCHAR    ucData;",
          "4976:  } SW_I2C_IO_DATA_PARAMETERS;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "4087: #define SW_I2C_CNTL_CLOSE     5",
          "4088: #define SW_I2C_CNTL_WRITE1BIT 6",
          "4091: #define VESA_OEM_PRODUCT_REV               '01.00'",
          "4093: #define VESA_MODE_WIN_ATTRIBUTE           7",
          "4094: #define VESA_WIN_SIZE                64",
          "4099: } PTR_32_BIT_STRUCTURE;",
          "4104: } PTR_32_BIT_UNION;",
          "4113: } VBE_1_2_INFO_BLOCK_UPDATABLE;",
          "4121: } VBE_2_0_INFO_BLOCK_UPDATABLE;",
          "4126: } VBE_VERSION_UNION;",
          "4132: } VBE_INFO_BLOCK;",
          "4145: } VBE_FP_INFO;",
          "4202: } VESA_MODE_INFO_BLOCK;",
          "4206: #define ATOM_BIOS_FUNCTION_COP_MODE             0x00",
          "4207: #define ATOM_BIOS_FUNCTION_SHORT_QUERY1         0x04",
          "4208: #define ATOM_BIOS_FUNCTION_SHORT_QUERY2         0x05",
          "4209: #define ATOM_BIOS_FUNCTION_SHORT_QUERY3         0x06",
          "4211: #define ATOM_BIOS_FUNCTION_ASIC_DSTATE          0x0E",
          "4212: #define ATOM_BIOS_FUNCTION_DEBUG_PLAY           0x0F",
          "4213: #define ATOM_BIOS_FUNCTION_STV_STD              0x16",
          "",
          "[Removed Lines]",
          "4096: typedef struct _PTR_32_BIT_STRUCTURE {",
          "4097:  USHORT Offset16;",
          "4098:  USHORT Segment16;",
          "4101: typedef union _PTR_32_BIT_UNION {",
          "4102:  PTR_32_BIT_STRUCTURE SegmentOffset;",
          "4103:  ULONG Ptr32_Bit;",
          "4106: typedef struct _VBE_1_2_INFO_BLOCK_UPDATABLE {",
          "4107:  UCHAR VbeSignature[4];",
          "4108:  USHORT VbeVersion;",
          "4109:  PTR_32_BIT_UNION OemStringPtr;",
          "4110:  UCHAR Capabilities[4];",
          "4111:  PTR_32_BIT_UNION VideoModePtr;",
          "4112:  USHORT TotalMemory;",
          "4115: typedef struct _VBE_2_0_INFO_BLOCK_UPDATABLE {",
          "4116:  VBE_1_2_INFO_BLOCK_UPDATABLE CommonBlock;",
          "4117:  USHORT OemSoftRev;",
          "4118:  PTR_32_BIT_UNION OemVendorNamePtr;",
          "4119:  PTR_32_BIT_UNION OemProductNamePtr;",
          "4120:  PTR_32_BIT_UNION OemProductRevPtr;",
          "4123: typedef union _VBE_VERSION_UNION {",
          "4124:  VBE_2_0_INFO_BLOCK_UPDATABLE VBE_2_0_InfoBlock;",
          "4125:  VBE_1_2_INFO_BLOCK_UPDATABLE VBE_1_2_InfoBlock;",
          "4128: typedef struct _VBE_INFO_BLOCK {",
          "4129:  VBE_VERSION_UNION UpdatableVBE_Info;",
          "4130:  UCHAR Reserved[222];",
          "4131:  UCHAR OemData[256];",
          "4134: typedef struct _VBE_FP_INFO {",
          "4135:  USHORT HSize;",
          "4136:  USHORT VSize;",
          "4137:  USHORT FPType;",
          "4138:  UCHAR RedBPP;",
          "4139:  UCHAR GreenBPP;",
          "4140:  UCHAR BlueBPP;",
          "4141:  UCHAR ReservedBPP;",
          "4142:  ULONG RsvdOffScrnMemSize;",
          "4143:  ULONG RsvdOffScrnMEmPtr;",
          "4144:  UCHAR Reserved[14];",
          "4147: typedef struct _VESA_MODE_INFO_BLOCK {",
          "4210: #define ATOM_BIOS_FUNCTION_GET_DDC              0x0B",
          "",
          "[Added Lines]",
          "5003: #define VESA_MODE_ATTRIBUTE_MODE_SUPPORT      0xBB //refer to VBE spec p.32, no TTY support",
          "5007: typedef struct _PTR_32_BIT_STRUCTURE",
          "5008: {",
          "5009:  USHORT Offset16;",
          "5010:  USHORT Segment16;",
          "5013: typedef union _PTR_32_BIT_UNION",
          "5014: {",
          "5015:  PTR_32_BIT_STRUCTURE SegmentOffset;",
          "5016:  ULONG             Ptr32_Bit;",
          "5019: typedef struct _VBE_1_2_INFO_BLOCK_UPDATABLE",
          "5020: {",
          "5021:  UCHAR          VbeSignature[4];",
          "5022:  USHORT        VbeVersion;",
          "5023:  PTR_32_BIT_UNION OemStringPtr;",
          "5024:  UCHAR          Capabilities[4];",
          "5025:  PTR_32_BIT_UNION VideoModePtr;",
          "5026:  USHORT        TotalMemory;",
          "5030: typedef struct _VBE_2_0_INFO_BLOCK_UPDATABLE",
          "5031: {",
          "5032:  VBE_1_2_INFO_BLOCK_UPDATABLE CommonBlock;",
          "5033:  USHORT           OemSoftRev;",
          "5034:  PTR_32_BIT_UNION    OemVendorNamePtr;",
          "5035:  PTR_32_BIT_UNION    OemProductNamePtr;",
          "5036:  PTR_32_BIT_UNION    OemProductRevPtr;",
          "5039: typedef union _VBE_VERSION_UNION",
          "5040: {",
          "5041:  VBE_2_0_INFO_BLOCK_UPDATABLE VBE_2_0_InfoBlock;",
          "5042:  VBE_1_2_INFO_BLOCK_UPDATABLE VBE_1_2_InfoBlock;",
          "5045: typedef struct _VBE_INFO_BLOCK",
          "5046: {",
          "5047:  VBE_VERSION_UNION   UpdatableVBE_Info;",
          "5048:  UCHAR            Reserved[222];",
          "5049:  UCHAR            OemData[256];",
          "5052: typedef struct _VBE_FP_INFO",
          "5053: {",
          "5054:   USHORT HSize;",
          "5055:  USHORT VSize;",
          "5056:  USHORT FPType;",
          "5057:  UCHAR  RedBPP;",
          "5058:  UCHAR  GreenBPP;",
          "5059:  UCHAR  BlueBPP;",
          "5060:  UCHAR  ReservedBPP;",
          "5061:  ULONG  RsvdOffScrnMemSize;",
          "5062:  ULONG  RsvdOffScrnMEmPtr;",
          "5063:  UCHAR  Reserved[14];",
          "5066: typedef struct _VESA_MODE_INFO_BLOCK",
          "5067: {",
          "5069:   USHORT    ModeAttributes;  //   dw ? ; mode attributes",
          "5070:  UCHAR     WinAAttributes;  //   db ? ; window A attributes",
          "5071:  UCHAR     WinBAttributes;  //   db ? ; window B attributes",
          "5072:  USHORT    WinGranularity;  //   dw ? ; window granularity",
          "5073:  USHORT    WinSize;         //   dw ? ; window size",
          "5074:  USHORT    WinASegment;     //   dw ? ; window A start segment",
          "5075:  USHORT    WinBSegment;     //   dw ? ; window B start segment",
          "5076:  ULONG     WinFuncPtr;      //   dd ? ; real mode pointer to window function",
          "5077:  USHORT    BytesPerScanLine;//   dw ? ; bytes per scan line",
          "5080:   USHORT    XResolution;      //   dw ? ; horizontal resolution in pixels or characters",
          "5081:  USHORT    YResolution;      //   dw ? ; vertical resolution in pixels or characters",
          "5082:  UCHAR     XCharSize;        //   db ? ; character cell width in pixels",
          "5083:  UCHAR     YCharSize;        //   db ? ; character cell height in pixels",
          "5084:  UCHAR     NumberOfPlanes;   //   db ? ; number of memory planes",
          "5085:  UCHAR     BitsPerPixel;     //   db ? ; bits per pixel",
          "5086:  UCHAR     NumberOfBanks;    //   db ? ; number of banks",
          "5087:  UCHAR     MemoryModel;      //   db ? ; memory model type",
          "5088:  UCHAR     BankSize;         //   db ? ; bank size in KB",
          "5089:  UCHAR     NumberOfImagePages;//    db ? ; number of images",
          "5090:  UCHAR     ReservedForPageFunction;//db 1 ; reserved for page function",
          "5093:  UCHAR   RedMaskSize;        //  db ? ; size of direct color red mask in bits",
          "5094:  UCHAR   RedFieldPosition;   //  db ? ; bit position of lsb of red mask",
          "5095:  UCHAR   GreenMaskSize;      //  db ? ; size of direct color green mask in bits",
          "5096:  UCHAR   GreenFieldPosition; //  db ? ; bit position of lsb of green mask",
          "5097:  UCHAR   BlueMaskSize;       //  db ? ; size of direct color blue mask in bits",
          "5098:  UCHAR   BlueFieldPosition;  //  db ? ; bit position of lsb of blue mask",
          "5099:  UCHAR   RsvdMaskSize;       //  db ? ; size of direct color reserved mask in bits",
          "5100:  UCHAR   RsvdFieldPosition;  //  db ? ; bit position of lsb of reserved mask",
          "5101:  UCHAR   DirectColorModeInfo;//  db ? ; direct color mode attributes",
          "5104:  ULONG   PhysBasePtr;        //  dd ? ; physical address for flat memory frame buffer",
          "5105:  ULONG   Reserved_1;         //  dd 0 ; reserved - always set to 0",
          "5106:  USHORT  Reserved_2;         //   dw 0 ; reserved - always set to 0",
          "5109:  USHORT  LinBytesPerScanLine;  // dw ? ; bytes per scan line for linear modes",
          "5110:  UCHAR   BnkNumberOfImagePages;// db ? ; number of images for banked modes",
          "5111:  UCHAR   LinNumberOfImagPages; // db ? ; number of images for linear modes",
          "5112:  UCHAR   LinRedMaskSize;       // db ? ; size of direct color red mask(linear modes)",
          "5113:  UCHAR   LinRedFieldPosition;  // db ? ; bit position of lsb of red mask(linear modes)",
          "5114:  UCHAR   LinGreenMaskSize;     // db ? ; size of direct color green mask(linear modes)",
          "5115:  UCHAR   LinGreenFieldPosition;// db ? ; bit position of lsb of green mask(linear modes)",
          "5116:  UCHAR   LinBlueMaskSize;      // db ? ; size of direct color blue mask(linear modes)",
          "5117:  UCHAR   LinBlueFieldPosition; // db ? ; bit position of lsb of blue mask(linear modes)",
          "5118:  UCHAR   LinRsvdMaskSize;      // db ? ; size of direct color reserved mask(linear modes)",
          "5119:  UCHAR   LinRsvdFieldPosition; // db ? ; bit position of lsb of reserved mask(linear modes)",
          "5120:  ULONG   MaxPixelClock;        // dd ? ; maximum pixel clock(in Hz) for graphics mode",
          "5121:  UCHAR   Reserved;             // db 190 dup (0)",
          "5125: #define ATOM_BIOS_EXTENDED_FUNCTION_CODE        0xA0         // ATI Extended Function code",
          "5130: #define ATOM_BIOS_FUNCTION_GET_DDC              0x0B",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "4217: #define ATOM_BIOS_FUNCTION_PANEL_CONTROL        0x82",
          "4218: #define ATOM_BIOS_FUNCTION_OLD_DEVICE_DET       0x83",
          "4219: #define ATOM_BIOS_FUNCTION_OLD_DEVICE_SWITCH    0x84",
          "4221: #define ATOM_BIOS_FUNCTION_SET_CMOS             0x8B",
          "4225: #define ATOM_BIOS_FUNCTION_DISPLAY_INFO         0x8D",
          "4226: #define ATOM_BIOS_FUNCTION_DEVICE_ON_OFF        0x8E",
          "4245: #define ATOM_BIOS_RETURN_CODE_MASK              0x0000FF00L",
          "4246: #define ATOM_BIOS_REG_HIGH_MASK                 0x0000FF00L",
          "4247: #define ATOM_BIOS_REG_LOW_MASK                  0x000000FFL",
          "4253:  USHORT usTransmitterObjId;",
          "4254:  USHORT usSupportDevice;",
          "4264:  UCHAR ucEncoderID;",
          "4265:  UCHAR ucEncoderConfig;",
          "4271:  USHORT ptrTransmitterInfo;",
          "4272:  USHORT ptrEncoderInfo;",
          "4280:  USHORT asDevicePriority[16];",
          "4291:  };",
          "4296: #define PROCESS_AUX_CHANNEL_TRANSACTION_PS_ALLOCATION   PROCESS_AUX_CHANNEL_TRANSACTION_PARAMETERS",
          "4301:  USHORT ucLinkClock;",
          "4305:  };",
          "4306:  UCHAR ucAction;",
          "4307:  UCHAR ucStatus;",
          "4308:  UCHAR ucLaneNum;",
          "4309:  UCHAR ucReserved[2];",
          "4313: #define ATOM_DP_ACTION_GET_SINK_TYPE       0x01",
          "4314: #define ATOM_DP_ACTION_TRAINING_START       0x02",
          "4315: #define ATOM_DP_ACTION_TRAINING_COMPLETE     0x03",
          "4316: #define ATOM_DP_ACTION_TRAINING_PATTERN_SEL    0x04",
          "",
          "[Removed Lines]",
          "4220: #define ATOM_BIOS_FUNCTION_HW_ICON              0x8A",
          "4227: #define ATOM_BIOS_FUNCTION_VIDEO_STATE          0x8F",
          "4252: typedef struct _ASIC_TRANSMITTER_INFO {",
          "4255:  UCHAR ucTransmitterCmdTblId;",
          "4256:  UCHAR ucConfig;",
          "4259:  UCHAR uc2ndEncoderID;",
          "4260:  UCHAR ucReserved;",
          "4261: } ASIC_TRANSMITTER_INFO;",
          "4263: typedef struct _ASIC_ENCODER_INFO {",
          "4266:  USHORT usEncoderCmdTblId;",
          "4267: } ASIC_ENCODER_INFO;",
          "4269: typedef struct _ATOM_DISP_OUT_INFO {",
          "4270:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4273:  ASIC_TRANSMITTER_INFO asTransmitterInfo[1];",
          "4274:  ASIC_ENCODER_INFO asEncoderInfo[1];",
          "4275: } ATOM_DISP_OUT_INFO;",
          "4278: typedef struct _ATOM_DISPLAY_DEVICE_PRIORITY_INFO {",
          "4279:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4281: } ATOM_DISPLAY_DEVICE_PRIORITY_INFO;",
          "4284: typedef struct _PROCESS_AUX_CHANNEL_TRANSACTION_PARAMETERS {",
          "4285:  USHORT lpAuxRequest;",
          "4286:  USHORT lpDataOut;",
          "4287:  UCHAR ucChannelID;",
          "4288:  union {",
          "4289:   UCHAR ucReplyStatus;",
          "4290:   UCHAR ucDelay;",
          "4292:  UCHAR ucDataOutLen;",
          "4293:  UCHAR ucReserved;",
          "4294: } PROCESS_AUX_CHANNEL_TRANSACTION_PARAMETERS;",
          "4300: typedef struct _DP_ENCODER_SERVICE_PARAMETERS {",
          "4302:  union {",
          "4310: } DP_ENCODER_SERVICE_PARAMETERS;",
          "",
          "[Added Lines]",
          "5140: #define ATOM_BIOS_FUNCTION_HW_ICON              0x8A",
          "5142: #define SUB_FUNCTION_UPDATE_DISPLAY_INFO        0x8000          // Sub function 80",
          "5143: #define SUB_FUNCTION_UPDATE_EXPANSION_INFO      0x8100          // Sub function 80",
          "5147: #define ATOM_BIOS_FUNCTION_VIDEO_STATE          0x8F",
          "5148: #define ATOM_SUB_FUNCTION_GET_CRITICAL_STATE    0x0300          // Sub function 03",
          "5149: #define ATOM_SUB_FUNCTION_GET_LIDSTATE          0x0700          // Sub function 7",
          "5150: #define ATOM_SUB_FUNCTION_THERMAL_STATE_NOTICE  0x1400          // Notify caller the current thermal state",
          "5151: #define ATOM_SUB_FUNCTION_CRITICAL_STATE_NOTICE 0x8300          // Notify caller the current critical state",
          "5152: #define ATOM_SUB_FUNCTION_SET_LIDSTATE          0x8500          // Sub function 85",
          "5153: #define ATOM_SUB_FUNCTION_GET_REQ_DISPLAY_FROM_SBIOS_MODE 0x8900// Sub function 89",
          "5154: #define ATOM_SUB_FUNCTION_INFORM_ADC_SUPPORT    0x9400          // Notify caller that ADC is supported",
          "5157: #define ATOM_BIOS_FUNCTION_VESA_DPMS            0x4F10          // Set DPMS",
          "5158: #define ATOM_SUB_FUNCTION_SET_DPMS              0x0001          // BL: Sub function 01",
          "5159: #define ATOM_SUB_FUNCTION_GET_DPMS              0x0002          // BL: Sub function 02",
          "5160: #define ATOM_PARAMETER_VESA_DPMS_ON             0x0000          // BH Parameter for DPMS ON.",
          "5161: #define ATOM_PARAMETER_VESA_DPMS_STANDBY        0x0100          // BH Parameter for DPMS STANDBY",
          "5162: #define ATOM_PARAMETER_VESA_DPMS_SUSPEND        0x0200          // BH Parameter for DPMS SUSPEND",
          "5163: #define ATOM_PARAMETER_VESA_DPMS_OFF            0x0400          // BH Parameter for DPMS OFF",
          "5164: #define ATOM_PARAMETER_VESA_DPMS_REDUCE_ON      0x0800          // BH Parameter for DPMS REDUCE ON (NOT SUPPORTED)",
          "5173: typedef struct _ASIC_TRANSMITTER_INFO",
          "5174: {",
          "5177:   UCHAR  ucTransmitterCmdTblId;",
          "5178:  UCHAR  ucConfig;",
          "5179:  UCHAR  ucEncoderID;      //available 1st encoder ( default )",
          "5180:  UCHAR  ucOptionEncoderID;    //available 2nd encoder ( optional )",
          "5181:  UCHAR  uc2ndEncoderID;",
          "5182:  UCHAR  ucReserved;",
          "5183: }ASIC_TRANSMITTER_INFO;",
          "5185: typedef struct _ASIC_ENCODER_INFO",
          "5186: {",
          "5189:   USHORT usEncoderCmdTblId;",
          "5190: }ASIC_ENCODER_INFO;",
          "5192: typedef struct _ATOM_DISP_OUT_INFO",
          "5193: {",
          "5194:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "5195:  USHORT ptrTransmitterInfo;",
          "5196:  USHORT ptrEncoderInfo;",
          "5197:  ASIC_TRANSMITTER_INFO  asTransmitterInfo[1];",
          "5198:  ASIC_ENCODER_INFO      asEncoderInfo[1];",
          "5199: }ATOM_DISP_OUT_INFO;",
          "5201: typedef struct _ATOM_DISP_OUT_INFO_V2",
          "5202: {",
          "5203:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "5206:   USHORT ptrMainCallParserFar;                  // direct address of main parser call in VBIOS binary.",
          "5207:  ASIC_TRANSMITTER_INFO  asTransmitterInfo[1];",
          "5208:  ASIC_ENCODER_INFO      asEncoderInfo[1];",
          "5209: }ATOM_DISP_OUT_INFO_V2;",
          "5212: typedef struct _ATOM_DISPLAY_DEVICE_PRIORITY_INFO",
          "5213: {",
          "5214:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "5216: }ATOM_DISPLAY_DEVICE_PRIORITY_INFO;",
          "5219: typedef struct _PROCESS_AUX_CHANNEL_TRANSACTION_PARAMETERS",
          "5220: {",
          "5221:  USHORT lpAuxRequest;",
          "5222:  USHORT  lpDataOut;",
          "5223:  UCHAR  ucChannelID;",
          "5224:  union",
          "5225:  {",
          "5226:   UCHAR   ucReplyStatus;",
          "5227:  UCHAR   ucDelay;",
          "5229:   UCHAR   ucDataOutLen;",
          "5230:  UCHAR   ucReserved;",
          "5231: }PROCESS_AUX_CHANNEL_TRANSACTION_PARAMETERS;",
          "5234: typedef struct _PROCESS_AUX_CHANNEL_TRANSACTION_PARAMETERS_V2",
          "5235: {",
          "5236:  USHORT lpAuxRequest;",
          "5237:  USHORT  lpDataOut;",
          "5238:  UCHAR  ucChannelID;",
          "5239:  union",
          "5240:  {",
          "5241:   UCHAR   ucReplyStatus;",
          "5242:  UCHAR   ucDelay;",
          "5243:  };",
          "5244:   UCHAR   ucDataOutLen;",
          "5245:  UCHAR   ucHPD_ID;                                       //=0: HPD1, =1: HPD2, =2: HPD3, =3: HPD4, =4: HPD5, =5: HPD6",
          "5246: }PROCESS_AUX_CHANNEL_TRANSACTION_PARAMETERS_V2;",
          "5252: typedef struct _DP_ENCODER_SERVICE_PARAMETERS",
          "5253: {",
          "5255:  union",
          "5256:  {",
          "5257:  UCHAR ucConfig;    // for DP training command",
          "5258:  UCHAR ucI2cId;    // use for GET_SINK_TYPE command",
          "5264: }DP_ENCODER_SERVICE_PARAMETERS;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "4326: #define ATOM_DP_CONFIG_LINK_SEL_MASK       0x04",
          "4327: #define ATOM_DP_CONFIG_LINK_A           0x00",
          "4328: #define ATOM_DP_CONFIG_LINK_B           0x04",
          "4330: #define DP_ENCODER_SERVICE_PS_ALLOCATION    WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS",
          "4334: #define DPCD_SET_SS_CNTL_TBL_ADDR             (ATOM_DP_TRAINING_TBL_ADDR + 8 )",
          "4337: #define DPCD_SET_TRAINING_PATTERN2_TBL_ADDR        (ATOM_DP_TRAINING_TBL_ADDR + 32)",
          "4338: #define DPCD_GET_LINKRATE_LANENUM_SS_TBL_ADDR       (ATOM_DP_TRAINING_TBL_ADDR + 40)",
          "4339: #define DPCD_GET_LANE_STATUS_ADJUST_TBL_ADDR       (ATOM_DP_TRAINING_TBL_ADDR + 48)",
          "",
          "[Removed Lines]",
          "4333: #define DPCD_SET_LINKRATE_LANENUM_PATTERN1_TBL_ADDR    ATOM_DP_TRAINING_TBL_ADDR",
          "4335: #define DPCD_SET_LANE_VSWING_PREEMP_TBL_ADDR       (ATOM_DP_TRAINING_TBL_ADDR + 16)",
          "4336: #define DPCD_SET_TRAINING_PATTERN0_TBL_ADDR        (ATOM_DP_TRAINING_TBL_ADDR + 24)",
          "",
          "[Added Lines]",
          "5288: #define DPCD_SET_LINKRATE_LANENUM_PATTERN1_TBL_ADDR    ATOM_DP_TRAINING_TBL_ADDR",
          "5290: #define DPCD_SET_LANE_VSWING_PREEMP_TBL_ADDR       (ATOM_DP_TRAINING_TBL_ADDR + 16 )",
          "5291: #define DPCD_SET_TRAINING_PATTERN0_TBL_ADDR        (ATOM_DP_TRAINING_TBL_ADDR + 24 )",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "4341: #define DP_I2C_AUX_DDC_WRITE_TBL_ADDR           (ATOM_DP_TRAINING_TBL_ADDR + 64)",
          "4342: #define DP_I2C_AUX_DDC_READ_START_TBL_ADDR        (ATOM_DP_TRAINING_TBL_ADDR + 72)",
          "4343: #define DP_I2C_AUX_DDC_READ_TBL_ADDR           (ATOM_DP_TRAINING_TBL_ADDR + 76)",
          "4351:  };",
          "4359: #define PROCESS_I2C_CHANNEL_TRANSACTION_PS_ALLOCATION       PROCESS_I2C_CHANNEL_TRANSACTION_PARAMETERS",
          "4362: #define HW_I2C_WRITE        1",
          "4363: #define HW_I2C_READ         0",
          "4430: #if ATOM_BIG_ENDIAN",
          "4433: #else",
          "4436: #endif",
          "4455: #define NO_INT_SRC_MAPPED       0xFF",
          "4476: #define ATOM_SUPPORTED_DEVICES_INFO_LAST ATOM_SUPPORTED_DEVICES_INFO_2d1",
          "4486: #define ATOM_MAX_MISC_INFO       4",
          "4522: #define ATOM_XTMDS_ASIC_SI164_ID        1",
          "4523: #define ATOM_XTMDS_ASIC_SI178_ID        2",
          "",
          "[Removed Lines]",
          "4344: #define DP_I2C_AUX_DDC_READ_END_TBL_ADDR         (ATOM_DP_TRAINING_TBL_ADDR + 80)",
          "4346: typedef struct _PROCESS_I2C_CHANNEL_TRANSACTION_PARAMETERS {",
          "4347:  UCHAR ucI2CSpeed;",
          "4348:  union {",
          "4349:   UCHAR ucRegIndex;",
          "4350:   UCHAR ucStatus;",
          "4352:  USHORT lpI2CDataOut;",
          "4353:  UCHAR ucFlag;",
          "4354:  UCHAR ucTransBytes;",
          "4355:  UCHAR ucSlaveAddr;",
          "4356:  UCHAR ucLineNumber;",
          "4357: } PROCESS_I2C_CHANNEL_TRANSACTION_PARAMETERS;",
          "4371: typedef struct _ATOM_DAC_INFO {",
          "4372:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4374:  USHORT usReserved;",
          "4375: } ATOM_DAC_INFO;",
          "4377: typedef struct _COMPASSIONATE_DATA {",
          "4378:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4381:  UCHAR ucDAC1_BG_Adjustment;",
          "4382:  UCHAR ucDAC1_DAC_Adjustment;",
          "4383:  USHORT usDAC1_FORCE_Data;",
          "4385:  UCHAR ucDAC2_CRT2_BG_Adjustment;",
          "4386:  UCHAR ucDAC2_CRT2_DAC_Adjustment;",
          "4387:  USHORT usDAC2_CRT2_FORCE_Data;",
          "4388:  USHORT usDAC2_CRT2_MUX_RegisterIndex;",
          "4390:  UCHAR ucDAC2_NTSC_BG_Adjustment;",
          "4391:  UCHAR ucDAC2_NTSC_DAC_Adjustment;",
          "4392:  USHORT usDAC2_TV1_FORCE_Data;",
          "4393:  USHORT usDAC2_TV1_MUX_RegisterIndex;",
          "4395:  UCHAR ucDAC2_CV_BG_Adjustment;",
          "4396:  UCHAR ucDAC2_CV_DAC_Adjustment;",
          "4397:  USHORT usDAC2_CV_FORCE_Data;",
          "4398:  USHORT usDAC2_CV_MUX_RegisterIndex;",
          "4400:  UCHAR ucDAC2_PAL_BG_Adjustment;",
          "4401:  UCHAR ucDAC2_PAL_DAC_Adjustment;",
          "4402:  USHORT usDAC2_TV2_FORCE_Data;",
          "4403: } COMPASSIONATE_DATA;",
          "4429: typedef struct _ATOM_CONNECTOR_INFO {",
          "4431:  UCHAR bfConnectorType:4;",
          "4432:  UCHAR bfAssociatedDAC:4;",
          "4434:  UCHAR bfAssociatedDAC:4;",
          "4435:  UCHAR bfConnectorType:4;",
          "4437: } ATOM_CONNECTOR_INFO;",
          "4439: typedef union _ATOM_CONNECTOR_INFO_ACCESS {",
          "4440:  ATOM_CONNECTOR_INFO sbfAccess;",
          "4441:  UCHAR ucAccess;",
          "4442: } ATOM_CONNECTOR_INFO_ACCESS;",
          "4444: typedef struct _ATOM_CONNECTOR_INFO_I2C {",
          "4445:  ATOM_CONNECTOR_INFO_ACCESS sucConnectorInfo;",
          "4446:  ATOM_I2C_ID_CONFIG_ACCESS sucI2cId;",
          "4447: } ATOM_CONNECTOR_INFO_I2C;",
          "4449: typedef struct _ATOM_SUPPORTED_DEVICES_INFO {",
          "4450:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4451:  USHORT usDeviceSupport;",
          "4452:  ATOM_CONNECTOR_INFO_I2C asConnInfo[ATOM_MAX_SUPPORTED_DEVICE_INFO];",
          "4453: } ATOM_SUPPORTED_DEVICES_INFO;",
          "4457: typedef struct _ATOM_CONNECTOR_INC_SRC_BITMAP {",
          "4458:  UCHAR ucIntSrcBitmap;",
          "4459: } ATOM_CONNECTOR_INC_SRC_BITMAP;",
          "4461: typedef struct _ATOM_SUPPORTED_DEVICES_INFO_2 {",
          "4462:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4463:  USHORT usDeviceSupport;",
          "4464:  ATOM_CONNECTOR_INFO_I2C asConnInfo[ATOM_MAX_SUPPORTED_DEVICE_INFO_2];",
          "4465:  ATOM_CONNECTOR_INC_SRC_BITMAP",
          "4466:      asIntSrcInfo[ATOM_MAX_SUPPORTED_DEVICE_INFO_2];",
          "4467: } ATOM_SUPPORTED_DEVICES_INFO_2;",
          "4469: typedef struct _ATOM_SUPPORTED_DEVICES_INFO_2d1 {",
          "4470:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4471:  USHORT usDeviceSupport;",
          "4472:  ATOM_CONNECTOR_INFO_I2C asConnInfo[ATOM_MAX_SUPPORTED_DEVICE];",
          "4473:  ATOM_CONNECTOR_INC_SRC_BITMAP asIntSrcInfo[ATOM_MAX_SUPPORTED_DEVICE];",
          "4474: } ATOM_SUPPORTED_DEVICES_INFO_2d1;",
          "4478: typedef struct _ATOM_MISC_CONTROL_INFO {",
          "4479:  USHORT usFrequency;",
          "4484: } ATOM_MISC_CONTROL_INFO;",
          "4488: typedef struct _ATOM_TMDS_INFO {",
          "4489:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4491:  ATOM_MISC_CONTROL_INFO asMiscInfo[ATOM_MAX_MISC_INFO];",
          "4492: } ATOM_TMDS_INFO;",
          "4494: typedef struct _ATOM_ENCODER_ANALOG_ATTRIBUTE {",
          "4496:  UCHAR ucPadding[1];",
          "4497: } ATOM_ENCODER_ANALOG_ATTRIBUTE;",
          "4499: typedef struct _ATOM_ENCODER_DIGITAL_ATTRIBUTE {",
          "4501:  UCHAR ucPadding[1];",
          "4502: } ATOM_ENCODER_DIGITAL_ATTRIBUTE;",
          "4504: typedef union _ATOM_ENCODER_ATTRIBUTE {",
          "4505:  ATOM_ENCODER_ANALOG_ATTRIBUTE sAlgAttrib;",
          "4506:  ATOM_ENCODER_DIGITAL_ATTRIBUTE sDigAttrib;",
          "4507: } ATOM_ENCODER_ATTRIBUTE;",
          "4509: typedef struct _DVO_ENCODER_CONTROL_PARAMETERS {",
          "4510:  USHORT usPixelClock;",
          "4511:  USHORT usEncoderID;",
          "4514:  ATOM_ENCODER_ATTRIBUTE usDevAttr;",
          "4515: } DVO_ENCODER_CONTROL_PARAMETERS;",
          "4517: typedef struct _DVO_ENCODER_CONTROL_PS_ALLOCATION {",
          "4518:  DVO_ENCODER_CONTROL_PARAMETERS sDVOEncoder;",
          "4520: } DVO_ENCODER_CONTROL_PS_ALLOCATION;",
          "",
          "[Added Lines]",
          "5299: #define DP_I2C_AUX_DDC_WRITE_END_TBL_ADDR                 (ATOM_DP_TRAINING_TBL_ADDR + 80)",
          "5300: #define DP_I2C_AUX_DDC_READ_END_TBL_ADDR         (ATOM_DP_TRAINING_TBL_ADDR + 84)",
          "5302: typedef struct _PROCESS_I2C_CHANNEL_TRANSACTION_PARAMETERS",
          "5303: {",
          "5304:  UCHAR   ucI2CSpeed;",
          "5305:   union",
          "5306:  {",
          "5307:    UCHAR ucRegIndex;",
          "5308:    UCHAR ucStatus;",
          "5310:  USHORT  lpI2CDataOut;",
          "5311:   UCHAR   ucFlag;",
          "5312:   UCHAR   ucTransBytes;",
          "5313:   UCHAR   ucSlaveAddr;",
          "5314:   UCHAR   ucLineNumber;",
          "5315: }PROCESS_I2C_CHANNEL_TRANSACTION_PARAMETERS;",
          "5322: #define I2C_2BYTE_ADDR      0x02",
          "5324: typedef struct _SET_HWBLOCK_INSTANCE_PARAMETER_V2",
          "5325: {",
          "5326:    UCHAR ucHWBlkInst;                // HW block instance, 0, 1, 2, ...",
          "5327:    UCHAR ucReserved[3];",
          "5328: }SET_HWBLOCK_INSTANCE_PARAMETER_V2;",
          "5330: #define HWBLKINST_INSTANCE_MASK       0x07",
          "5331: #define HWBLKINST_HWBLK_MASK          0xF0",
          "5332: #define HWBLKINST_HWBLK_SHIFT         0x04",
          "5335: #define SELECT_DISP_ENGINE            0",
          "5336: #define SELECT_DISP_PLL               1",
          "5337: #define SELECT_DCIO_UNIPHY_LINK0      2",
          "5338: #define SELECT_DCIO_UNIPHY_LINK1      3",
          "5339: #define SELECT_DCIO_IMPCAL            4",
          "5340: #define SELECT_DCIO_DIG               6",
          "5341: #define SELECT_CRTC_PIXEL_RATE        7",
          "5347: #define MC_MISC0__MEMORY_TYPE_MASK    0xF0000000",
          "5348: #define MC_MISC0__MEMORY_TYPE__GDDR1  0x10000000",
          "5349: #define MC_MISC0__MEMORY_TYPE__DDR2   0x20000000",
          "5350: #define MC_MISC0__MEMORY_TYPE__GDDR3  0x30000000",
          "5351: #define MC_MISC0__MEMORY_TYPE__GDDR4  0x40000000",
          "5352: #define MC_MISC0__MEMORY_TYPE__GDDR5  0x50000000",
          "5353: #define MC_MISC0__MEMORY_TYPE__DDR3   0xB0000000",
          "5361: typedef struct _ATOM_DAC_INFO",
          "5362: {",
          "5363:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "5364:   USHORT                   usMaxFrequency;      // in 10kHz unit",
          "5365:   USHORT                   usReserved;",
          "5366: }ATOM_DAC_INFO;",
          "5369: typedef struct  _COMPASSIONATE_DATA",
          "5370: {",
          "5371:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "5374:   UCHAR   ucDAC1_BG_Adjustment;",
          "5375:   UCHAR   ucDAC1_DAC_Adjustment;",
          "5376:   USHORT  usDAC1_FORCE_Data;",
          "5378:   UCHAR   ucDAC2_CRT2_BG_Adjustment;",
          "5379:   UCHAR   ucDAC2_CRT2_DAC_Adjustment;",
          "5380:   USHORT  usDAC2_CRT2_FORCE_Data;",
          "5381:   USHORT  usDAC2_CRT2_MUX_RegisterIndex;",
          "5382:   UCHAR   ucDAC2_CRT2_MUX_RegisterInfo;     //Bit[4:0]=Bit position,Bit[7]=1:Active High;=0 Active Low",
          "5383:   UCHAR   ucDAC2_NTSC_BG_Adjustment;",
          "5384:   UCHAR   ucDAC2_NTSC_DAC_Adjustment;",
          "5385:   USHORT  usDAC2_TV1_FORCE_Data;",
          "5386:   USHORT  usDAC2_TV1_MUX_RegisterIndex;",
          "5387:   UCHAR   ucDAC2_TV1_MUX_RegisterInfo;      //Bit[4:0]=Bit position,Bit[7]=1:Active High;=0 Active Low",
          "5388:   UCHAR   ucDAC2_CV_BG_Adjustment;",
          "5389:   UCHAR   ucDAC2_CV_DAC_Adjustment;",
          "5390:   USHORT  usDAC2_CV_FORCE_Data;",
          "5391:   USHORT  usDAC2_CV_MUX_RegisterIndex;",
          "5392:   UCHAR   ucDAC2_CV_MUX_RegisterInfo;       //Bit[4:0]=Bit position,Bit[7]=1:Active High;=0 Active Low",
          "5393:   UCHAR   ucDAC2_PAL_BG_Adjustment;",
          "5394:   UCHAR   ucDAC2_PAL_DAC_Adjustment;",
          "5395:   USHORT  usDAC2_TV2_FORCE_Data;",
          "5396: }COMPASSIONATE_DATA;",
          "5422: typedef struct _ATOM_CONNECTOR_INFO",
          "5423: {",
          "5425:   UCHAR   bfConnectorType:4;",
          "5426:   UCHAR   bfAssociatedDAC:4;",
          "5428:   UCHAR   bfAssociatedDAC:4;",
          "5429:   UCHAR   bfConnectorType:4;",
          "5431: }ATOM_CONNECTOR_INFO;",
          "5433: typedef union _ATOM_CONNECTOR_INFO_ACCESS",
          "5434: {",
          "5435:   ATOM_CONNECTOR_INFO sbfAccess;",
          "5436:   UCHAR               ucAccess;",
          "5437: }ATOM_CONNECTOR_INFO_ACCESS;",
          "5439: typedef struct _ATOM_CONNECTOR_INFO_I2C",
          "5440: {",
          "5441:   ATOM_CONNECTOR_INFO_ACCESS sucConnectorInfo;",
          "5442:   ATOM_I2C_ID_CONFIG_ACCESS  sucI2cId;",
          "5443: }ATOM_CONNECTOR_INFO_I2C;",
          "5446: typedef struct _ATOM_SUPPORTED_DEVICES_INFO",
          "5447: {",
          "5448:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "5449:   USHORT                    usDeviceSupport;",
          "5450:   ATOM_CONNECTOR_INFO_I2C   asConnInfo[ATOM_MAX_SUPPORTED_DEVICE_INFO];",
          "5451: }ATOM_SUPPORTED_DEVICES_INFO;",
          "5455: typedef struct _ATOM_CONNECTOR_INC_SRC_BITMAP",
          "5456: {",
          "5457:   UCHAR   ucIntSrcBitmap;",
          "5458: }ATOM_CONNECTOR_INC_SRC_BITMAP;",
          "5460: typedef struct _ATOM_SUPPORTED_DEVICES_INFO_2",
          "5461: {",
          "5462:   ATOM_COMMON_TABLE_HEADER      sHeader;",
          "5463:   USHORT                        usDeviceSupport;",
          "5464:   ATOM_CONNECTOR_INFO_I2C       asConnInfo[ATOM_MAX_SUPPORTED_DEVICE_INFO_2];",
          "5465:   ATOM_CONNECTOR_INC_SRC_BITMAP asIntSrcInfo[ATOM_MAX_SUPPORTED_DEVICE_INFO_2];",
          "5466: }ATOM_SUPPORTED_DEVICES_INFO_2;",
          "5468: typedef struct _ATOM_SUPPORTED_DEVICES_INFO_2d1",
          "5469: {",
          "5470:   ATOM_COMMON_TABLE_HEADER      sHeader;",
          "5471:   USHORT                        usDeviceSupport;",
          "5472:   ATOM_CONNECTOR_INFO_I2C       asConnInfo[ATOM_MAX_SUPPORTED_DEVICE];",
          "5473:   ATOM_CONNECTOR_INC_SRC_BITMAP asIntSrcInfo[ATOM_MAX_SUPPORTED_DEVICE];",
          "5474: }ATOM_SUPPORTED_DEVICES_INFO_2d1;",
          "5480: typedef struct _ATOM_MISC_CONTROL_INFO",
          "5481: {",
          "5482:    USHORT usFrequency;",
          "5483:    UCHAR  ucPLL_ChargePump;                    // PLL charge-pump gain control",
          "5484:    UCHAR  ucPLL_DutyCycle;                    // PLL duty cycle control",
          "5485:    UCHAR  ucPLL_VCO_Gain;                      // PLL VCO gain control",
          "5486:    UCHAR  ucPLL_VoltageSwing;                   // PLL driver voltage swing control",
          "5487: }ATOM_MISC_CONTROL_INFO;",
          "5492: typedef struct _ATOM_TMDS_INFO",
          "5493: {",
          "5494:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "5495:   USHORT       usMaxFrequency;             // in 10Khz",
          "5496:   ATOM_MISC_CONTROL_INFO    asMiscInfo[ATOM_MAX_MISC_INFO];",
          "5497: }ATOM_TMDS_INFO;",
          "5500: typedef struct _ATOM_ENCODER_ANALOG_ATTRIBUTE",
          "5501: {",
          "5502:   UCHAR ucTVStandard;     //Same as TV standards defined above,",
          "5503:   UCHAR ucPadding[1];",
          "5504: }ATOM_ENCODER_ANALOG_ATTRIBUTE;",
          "5506: typedef struct _ATOM_ENCODER_DIGITAL_ATTRIBUTE",
          "5507: {",
          "5508:   UCHAR ucAttribute;      //Same as other digital encoder attributes defined above",
          "5509:   UCHAR ucPadding[1];",
          "5510: }ATOM_ENCODER_DIGITAL_ATTRIBUTE;",
          "5512: typedef union _ATOM_ENCODER_ATTRIBUTE",
          "5513: {",
          "5514:   ATOM_ENCODER_ANALOG_ATTRIBUTE sAlgAttrib;",
          "5515:   ATOM_ENCODER_DIGITAL_ATTRIBUTE sDigAttrib;",
          "5516: }ATOM_ENCODER_ATTRIBUTE;",
          "5519: typedef struct _DVO_ENCODER_CONTROL_PARAMETERS",
          "5520: {",
          "5521:   USHORT usPixelClock;",
          "5522:   USHORT usEncoderID;",
          "5523:   UCHAR  ucDeviceType;            //Use ATOM_DEVICE_xxx1_Index to indicate device type only.",
          "5524:   UCHAR  ucAction;              //ATOM_ENABLE/ATOM_DISABLE/ATOM_HPD_INIT",
          "5525:   ATOM_ENCODER_ATTRIBUTE usDevAttr;",
          "5526: }DVO_ENCODER_CONTROL_PARAMETERS;",
          "5528: typedef struct _DVO_ENCODER_CONTROL_PS_ALLOCATION",
          "5529: {",
          "5530:   DVO_ENCODER_CONTROL_PARAMETERS    sDVOEncoder;",
          "5531:   WRITE_ONE_BYTE_HW_I2C_DATA_PS_ALLOCATION      sReserved;     //Caller doesn't need to init this portion",
          "5532: }DVO_ENCODER_CONTROL_PS_ALLOCATION;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "4526: #define ATOM_XTMDS_SUPPORTED_DUALLINK   0x00000002",
          "4527: #define ATOM_XTMDS_MVPU_FPGA            0x00000004",
          "4550: #define ATOM_PM_MISCINFO_SPLIT_CLOCK                     0x00000000L",
          "4551: #define ATOM_PM_MISCINFO_USING_MCLK_SRC                  0x00000001L",
          "4552: #define ATOM_PM_MISCINFO_USING_SCLK_SRC                  0x00000002L",
          "",
          "[Removed Lines]",
          "4529: typedef struct _ATOM_XTMDS_INFO {",
          "4530:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4531:  USHORT usSingleLinkMaxFrequency;",
          "4533:  UCHAR ucXtransimitterID;",
          "4539: } ATOM_XTMDS_INFO;",
          "4541: typedef struct _DFP_DPMS_STATUS_CHANGE_PARAMETERS {",
          "4544:  UCHAR ucPadding[2];",
          "4545: } DFP_DPMS_STATUS_CHANGE_PARAMETERS;",
          "",
          "[Added Lines]",
          "5543: typedef struct _ATOM_XTMDS_INFO",
          "5544: {",
          "5545:   ATOM_COMMON_TABLE_HEADER   sHeader;",
          "5546:   USHORT                     usSingleLinkMaxFrequency;",
          "5547:   ATOM_I2C_ID_CONFIG_ACCESS  sucI2cId;           //Point the ID on which I2C is used to control external chip",
          "5548:   UCHAR                      ucXtransimitterID;",
          "5549:   UCHAR                      ucSupportedLink;    // Bit field, bit0=1, single link supported;bit1=1,dual link supported",
          "5550:   UCHAR                      ucSequnceAlterID;   // Even with the same external TMDS asic, it's possible that the program seqence alters",
          "5552:   UCHAR                      ucMasterAddress;    // Address to control Master xTMDS Chip",
          "5553:   UCHAR                      ucSlaveAddress;     // Address to control Slave xTMDS Chip",
          "5554: }ATOM_XTMDS_INFO;",
          "5556: typedef struct _DFP_DPMS_STATUS_CHANGE_PARAMETERS",
          "5557: {",
          "5558:   UCHAR ucEnable;                     // ATOM_ENABLE=On or ATOM_DISABLE=Off",
          "5559:   UCHAR ucDevice;                     // ATOM_DEVICE_DFP1_INDEX....",
          "5560:   UCHAR ucPadding[2];",
          "5561: }DFP_DPMS_STATUS_CHANGE_PARAMETERS;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "4559: #define ATOM_PM_MISCINFO_ENGINE_CLOCK_CONTRL_EN          0x00000020L",
          "4560: #define ATOM_PM_MISCINFO_MEMORY_CLOCK_CONTRL_EN          0x00000040L",
          "4563: #define ATOM_PM_MISCINFO_ASIC_REDUCED_SPEED_SCLK_EN      0x00000100L",
          "4564: #define ATOM_PM_MISCINFO_ASIC_DYNAMIC_VOLTAGE_EN         0x00000200L",
          "4565: #define ATOM_PM_MISCINFO_ASIC_SLEEP_MODE_EN              0x00000400L",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5577: #define ATOM_PM_MISCINFO_PROGRAM_VOLTAGE                 0x00000080L  //When this bit set, ucVoltageDropIndex is not an index for GPIO pin, but a voltage ID that SW needs program",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "4569: #define ATOM_PM_MISCINFO_LOW_LCD_REFRESH_RATE            0x00004000L",
          "4571: #define ATOM_PM_MISCINFO_DRIVER_DEFAULT_MODE             0x00008000L",
          "4573: #define ATOM_PM_MISCINFO_OVER_DRIVE_MODE                 0x00020000L",
          "4574: #define ATOM_PM_MISCINFO_POWER_SAVING_MODE               0x00040000L",
          "4575: #define ATOM_PM_MISCINFO_THERMAL_DIODE_MODE              0x00080000L",
          "4580: #define ATOM_PM_MISCINFO_DYN_CLK_3D_IDLE                 0x00400000L",
          "4581: #define ATOM_PM_MISCINFO_DYNAMIC_CLOCK_DIVIDER_BY_2      0x00800000L",
          "4582: #define ATOM_PM_MISCINFO_DYNAMIC_CLOCK_DIVIDER_BY_4      0x01000000L",
          "4588: #define ATOM_PM_MISCINFO_POWERPLAY_SETTINGS_GROUP_SHIFT  28",
          "4589: #define ATOM_PM_MISCINFO_ENABLE_BACK_BIAS                0x80000000L",
          "",
          "[Removed Lines]",
          "4572: #define ATOM_PM_MISCINFO_OVER_CLOCK_MODE                 0x00010000L",
          "4578: #define ATOM_PM_MISCINFO_FRAME_MODULATION_SHIFT          20",
          "",
          "[Added Lines]",
          "5588: #define ATOM_PM_MISCINFO_OVER_CLOCK_MODE                 0x00010000L",
          "5593: #define ATOM_PM_MISCINFO_FRAME_MODULATION_MASK           0x00300000L  //0-FM Disable, 1-2 level FM, 2-4 level FM, 3-Reserved",
          "5594: #define ATOM_PM_MISCINFO_FRAME_MODULATION_SHIFT          20",
          "5599: #define ATOM_PM_MISCINFO_DYNAMIC_HDP_BLOCK_EN            0x02000000L  //When set, Dynamic",
          "5600: #define ATOM_PM_MISCINFO_DYNAMIC_MC_HOST_BLOCK_EN        0x04000000L  //When set, Dynamic",
          "5601: #define ATOM_PM_MISCINFO_3D_ACCELERATION_EN              0x08000000L  //When set, This mode is for acceleated 3D mode",
          "5603: #define ATOM_PM_MISCINFO_POWERPLAY_SETTINGS_GROUP_MASK   0x70000000L  //1-Optimal Battery Life Group, 2-High Battery, 3-Balanced, 4-High Performance, 5- Optimal Performance (Default state with Default clocks)",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "4594: #define ATOM_PM_MISCINFO2_FS3D_OVERDRIVE_INFO            0x00000008L",
          "4595: #define ATOM_PM_MISCINFO2_FORCEDLOWPWR_MODE              0x00000010L",
          "4596: #define ATOM_PM_MISCINFO2_VDDCI_DYNAMIC_VOLTAGE_EN       0x00000020L",
          "4599: #define ATOM_PM_MISCINFO2_NOT_VALID_ON_DC                0x00000080L",
          "4600: #define ATOM_PM_MISCINFO2_STUTTER_MODE_EN                0x00000100L",
          "4647: #define ATOM_MAX_NUMBEROF_POWER_BLOCK  8",
          "",
          "[Removed Lines]",
          "4601: #define ATOM_PM_MISCINFO2_UVD_SUPPORT_MODE               0x00000200L",
          "4605: typedef struct _ATOM_POWERMODE_INFO {",
          "4609:  USHORT usEngineClock;",
          "4610:  USHORT usMemoryClock;",
          "4613:  UCHAR ucMinTemperature;",
          "4614:  UCHAR ucMaxTemperature;",
          "4616: } ATOM_POWERMODE_INFO;",
          "4620: typedef struct _ATOM_POWERMODE_INFO_V2 {",
          "4622:  ULONG ulMiscInfo2;",
          "4623:  ULONG ulEngineClock;",
          "4624:  ULONG ulMemoryClock;",
          "4627:  UCHAR ucMinTemperature;",
          "4628:  UCHAR ucMaxTemperature;",
          "4630: } ATOM_POWERMODE_INFO_V2;",
          "4634: typedef struct _ATOM_POWERMODE_INFO_V3 {",
          "4636:  ULONG ulMiscInfo2;",
          "4637:  ULONG ulEngineClock;",
          "4638:  ULONG ulMemoryClock;",
          "4641:  UCHAR ucMinTemperature;",
          "4642:  UCHAR ucMaxTemperature;",
          "4645: } ATOM_POWERMODE_INFO_V3;",
          "",
          "[Added Lines]",
          "5613: #define ATOM_PM_MISCINFO2_VIDEO_PLAYBACK_CAPABLE         0x00000040L  //If this bit is set in multi-pp mode, then driver will pack up one with the minior power consumption.",
          "5617: #define ATOM_PM_MISCINFO2_UVD_SUPPORT_MODE               0x00000200L",
          "5621: typedef struct  _ATOM_POWERMODE_INFO",
          "5622: {",
          "5623:   ULONG     ulMiscInfo;                 //The power level should be arranged in ascending order",
          "5624:   ULONG     ulReserved1;                // must set to 0",
          "5625:   ULONG     ulReserved2;                // must set to 0",
          "5626:   USHORT    usEngineClock;",
          "5627:   USHORT    usMemoryClock;",
          "5628:   UCHAR     ucVoltageDropIndex;         // index to GPIO table",
          "5629:   UCHAR     ucSelectedPanel_RefreshRate;// panel refresh rate",
          "5630:   UCHAR     ucMinTemperature;",
          "5631:   UCHAR     ucMaxTemperature;",
          "5632:   UCHAR     ucNumPciELanes;             // number of PCIE lanes",
          "5633: }ATOM_POWERMODE_INFO;",
          "5637: typedef struct  _ATOM_POWERMODE_INFO_V2",
          "5638: {",
          "5639:   ULONG     ulMiscInfo;                 //The power level should be arranged in ascending order",
          "5640:   ULONG     ulMiscInfo2;",
          "5641:   ULONG     ulEngineClock;",
          "5642:   ULONG     ulMemoryClock;",
          "5643:   UCHAR     ucVoltageDropIndex;         // index to GPIO table",
          "5644:   UCHAR     ucSelectedPanel_RefreshRate;// panel refresh rate",
          "5645:   UCHAR     ucMinTemperature;",
          "5646:   UCHAR     ucMaxTemperature;",
          "5647:   UCHAR     ucNumPciELanes;             // number of PCIE lanes",
          "5648: }ATOM_POWERMODE_INFO_V2;",
          "5652: typedef struct  _ATOM_POWERMODE_INFO_V3",
          "5653: {",
          "5654:   ULONG     ulMiscInfo;                 //The power level should be arranged in ascending order",
          "5655:   ULONG     ulMiscInfo2;",
          "5656:   ULONG     ulEngineClock;",
          "5657:   ULONG     ulMemoryClock;",
          "5658:   UCHAR     ucVoltageDropIndex;         // index to Core (VDDC) votage table",
          "5659:   UCHAR     ucSelectedPanel_RefreshRate;// panel refresh rate",
          "5660:   UCHAR     ucMinTemperature;",
          "5661:   UCHAR     ucMaxTemperature;",
          "5662:   UCHAR     ucNumPciELanes;             // number of PCIE lanes",
          "5663:   UCHAR     ucVDDCI_VoltageDropIndex;   // index to VDDCI votage table",
          "5664: }ATOM_POWERMODE_INFO_V3;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "4655: #define ATOM_PP_OVERDRIVE_THERMALCONTROLLER_MUA6649   0x04",
          "4656: #define ATOM_PP_OVERDRIVE_THERMALCONTROLLER_LM64      0x05",
          "4657: #define ATOM_PP_OVERDRIVE_THERMALCONTROLLER_F75375    0x06",
          "",
          "[Removed Lines]",
          "4660: typedef struct _ATOM_POWERPLAY_INFO {",
          "4661:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4662:  UCHAR ucOverdriveThermalController;",
          "4663:  UCHAR ucOverdriveI2cLine;",
          "4664:  UCHAR ucOverdriveIntBitmap;",
          "4665:  UCHAR ucOverdriveControllerAddress;",
          "4666:  UCHAR ucSizeOfPowerModeEntry;",
          "4667:  UCHAR ucNumOfPowerModeEntries;",
          "4668:  ATOM_POWERMODE_INFO asPowerPlayInfo[ATOM_MAX_NUMBEROF_POWER_BLOCK];",
          "4669: } ATOM_POWERPLAY_INFO;",
          "4671: typedef struct _ATOM_POWERPLAY_INFO_V2 {",
          "4672:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4673:  UCHAR ucOverdriveThermalController;",
          "4674:  UCHAR ucOverdriveI2cLine;",
          "4675:  UCHAR ucOverdriveIntBitmap;",
          "4676:  UCHAR ucOverdriveControllerAddress;",
          "4677:  UCHAR ucSizeOfPowerModeEntry;",
          "4678:  UCHAR ucNumOfPowerModeEntries;",
          "4679:  ATOM_POWERMODE_INFO_V2 asPowerPlayInfo[ATOM_MAX_NUMBEROF_POWER_BLOCK];",
          "4680: } ATOM_POWERPLAY_INFO_V2;",
          "4682: typedef struct _ATOM_POWERPLAY_INFO_V3 {",
          "4683:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "4684:  UCHAR ucOverdriveThermalController;",
          "4685:  UCHAR ucOverdriveI2cLine;",
          "4686:  UCHAR ucOverdriveIntBitmap;",
          "4687:  UCHAR ucOverdriveControllerAddress;",
          "4688:  UCHAR ucSizeOfPowerModeEntry;",
          "4689:  UCHAR ucNumOfPowerModeEntries;",
          "4690:  ATOM_POWERMODE_INFO_V3 asPowerPlayInfo[ATOM_MAX_NUMBEROF_POWER_BLOCK];",
          "4691: } ATOM_POWERPLAY_INFO_V3;",
          "",
          "[Added Lines]",
          "5678: #define ATOM_PP_OVERDRIVE_THERMALCONTROLLER_ASC7512   0x07 // Andigilog",
          "5681: typedef struct  _ATOM_POWERPLAY_INFO",
          "5682: {",
          "5683:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "5684:   UCHAR    ucOverdriveThermalController;",
          "5685:   UCHAR    ucOverdriveI2cLine;",
          "5686:   UCHAR    ucOverdriveIntBitmap;",
          "5687:   UCHAR    ucOverdriveControllerAddress;",
          "5688:   UCHAR    ucSizeOfPowerModeEntry;",
          "5689:   UCHAR    ucNumOfPowerModeEntries;",
          "5690:   ATOM_POWERMODE_INFO asPowerPlayInfo[ATOM_MAX_NUMBEROF_POWER_BLOCK];",
          "5691: }ATOM_POWERPLAY_INFO;",
          "5693: typedef struct  _ATOM_POWERPLAY_INFO_V2",
          "5694: {",
          "5695:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "5696:   UCHAR    ucOverdriveThermalController;",
          "5697:   UCHAR    ucOverdriveI2cLine;",
          "5698:   UCHAR    ucOverdriveIntBitmap;",
          "5699:   UCHAR    ucOverdriveControllerAddress;",
          "5700:   UCHAR    ucSizeOfPowerModeEntry;",
          "5701:   UCHAR    ucNumOfPowerModeEntries;",
          "5702:   ATOM_POWERMODE_INFO_V2 asPowerPlayInfo[ATOM_MAX_NUMBEROF_POWER_BLOCK];",
          "5703: }ATOM_POWERPLAY_INFO_V2;",
          "5705: typedef struct  _ATOM_POWERPLAY_INFO_V3",
          "5706: {",
          "5707:   ATOM_COMMON_TABLE_HEADER sHeader;",
          "5708:   UCHAR    ucOverdriveThermalController;",
          "5709:   UCHAR    ucOverdriveI2cLine;",
          "5710:   UCHAR    ucOverdriveIntBitmap;",
          "5711:   UCHAR    ucOverdriveControllerAddress;",
          "5712:   UCHAR    ucSizeOfPowerModeEntry;",
          "5713:   UCHAR    ucNumOfPowerModeEntries;",
          "5714:   ATOM_POWERMODE_INFO_V3 asPowerPlayInfo[ATOM_MAX_NUMBEROF_POWER_BLOCK];",
          "5715: }ATOM_POWERPLAY_INFO_V3;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "4873:       UCHAR  ucMaxHTLinkWidth;            // From SBIOS - {2, 4, 8, 16}",
          "4874:       UCHAR  ucMinHTLinkWidth;            // From SBIOS - {2, 4, 8, 16}. Effective only if CDLW enabled. Minimum down stream width could be bigger as display BW requriement.",
          "4875:       USHORT usHTLinkFreq;                // See definition ATOM_PPLIB_RS780_HTLINKFREQ_xxx or in MHz(>=200).",
          "4877: } ATOM_PPLIB_RS780_CLOCK_INFO;",
          "4884: #define ATOM_PPLIB_RS780_SPMCLK_NONE        0   // We cannot change the side port memory clock, leave it as it is.",
          "4885: #define ATOM_PPLIB_RS780_SPMCLK_LOW         1",
          "4886: #define ATOM_PPLIB_RS780_SPMCLK_HIGH        2",
          "4895: #define ATOM_MASTER_DATA_TABLE_REVISION   0x01",
          "4897: #define AdjustARB_SEQ           MC_InitParameter",
          "4898: #define VRAM_GPIO_DetectionInfo      VoltageObjectInfo",
          "4900: #define ASIC_MVDDQ_Info          MemoryTrainingInfo",
          "4902: #define ASIC_MVDDC_Info                   ASIC_InternalSS_Info",
          "4903: #define DispDevicePriorityInfo      SaveRestoreInfo",
          "4904: #define DispOutInfo            TV_VideoMode",
          "4906: #define ATOM_ENCODER_OBJECT_TABLE         ATOM_OBJECT_TABLE",
          "4907: #define ATOM_CONNECTOR_OBJECT_TABLE       ATOM_OBJECT_TABLE",
          "4910: #define DFP2I_OUTPUT_CONTROL_PARAMETERS    CRT1_OUTPUT_CONTROL_PARAMETERS",
          "4911: #define DFP2I_OUTPUT_CONTROL_PS_ALLOCATION DFP2I_OUTPUT_CONTROL_PARAMETERS",
          "",
          "[Removed Lines]",
          "4876:       ULONG  ulFlags;",
          "4879: #define ATOM_PPLIB_RS780_VOLTAGE_NONE       0",
          "4880: #define ATOM_PPLIB_RS780_VOLTAGE_LOW        1",
          "4881: #define ATOM_PPLIB_RS780_VOLTAGE_HIGH       2",
          "4882: #define ATOM_PPLIB_RS780_VOLTAGE_VARIABLE   3",
          "4888: #define ATOM_PPLIB_RS780_HTLINKFREQ_NONE       0",
          "4889: #define ATOM_PPLIB_RS780_HTLINKFREQ_LOW        1",
          "4890: #define ATOM_PPLIB_RS780_HTLINKFREQ_HIGH       2",
          "4896: #define Object_Info            Object_Header",
          "4899: #define ASIC_VDDCI_Info                   ASIC_ProfilingInfo",
          "4901: #define SS_Info                           PPLL_SS_Info",
          "",
          "[Added Lines]",
          "5900:       ULONG  ulFlags;",
          "5903: #define ATOM_PPLIB_RS780_VOLTAGE_NONE       0",
          "5904: #define ATOM_PPLIB_RS780_VOLTAGE_LOW        1",
          "5905: #define ATOM_PPLIB_RS780_VOLTAGE_HIGH       2",
          "5906: #define ATOM_PPLIB_RS780_VOLTAGE_VARIABLE   3",
          "5912: #define ATOM_PPLIB_RS780_HTLINKFREQ_NONE       0",
          "5913: #define ATOM_PPLIB_RS780_HTLINKFREQ_LOW        1",
          "5914: #define ATOM_PPLIB_RS780_HTLINKFREQ_HIGH       2",
          "5921: #define Object_Info            Object_Header",
          "5924: #define ASIC_VDDCI_Info                   ASIC_ProfilingInfo",
          "5926: #define SS_Info                           PPLL_SS_Info",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "4940: #define ATOM_S3_DFP2I_ACTIVEb1             0x02",
          "4943: #define ATOM_S3_DFP1X_ACTIVE               ATOM_S3_DFP2_ACTIVE",
          "4945: #define ATOM_S3_DFP2I_ACTIVE               0x00000200L",
          "",
          "[Removed Lines]",
          "4942: #define ATOM_S3_DFP1I_ACTIVE               ATOM_S3_DFP1_ACTIVE",
          "",
          "[Added Lines]",
          "5968: #define ATOM_S3_DFP1I_ACTIVE               ATOM_S3_DFP1_ACTIVE",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "4958: #define ATOM_S6_ACC_REQ_DFP2Ib3            0x02",
          "4959: #define ATOM_S6_ACC_REQ_DFP2I              0x02000000L",
          "4962: #define DFP1XOutputControl                 DVOOutputControl",
          "4964: #define ExternalDFPOutputControl           DFP1XOutputControl",
          "4965: #define EnableExternalTMDS_Encoder         TMDS1XEncoderControl",
          "4967: #define DFP1IOutputControl                 TMDSAOutputControl",
          "4970: #define DAC1_ENCODER_CONTROL_PARAMETERS    DAC_ENCODER_CONTROL_PARAMETERS",
          "4971: #define DAC1_ENCODER_CONTROL_PS_ALLOCATION DAC_ENCODER_CONTROL_PS_ALLOCATION",
          "",
          "[Removed Lines]",
          "4961: #define TMDS1XEncoderControl               DVOEncoderControl",
          "4968: #define DFP2IOutputControl                 LVTMAOutputControl",
          "",
          "[Added Lines]",
          "5987: #define TMDS1XEncoderControl               DVOEncoderControl",
          "5994: #define DFP2IOutputControl                 LVTMAOutputControl",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "4974: #define DAC2_ENCODER_CONTROL_PS_ALLOCATION DAC_ENCODER_CONTROL_PS_ALLOCATION",
          "4976: #define ucDac1Standard  ucDacStandard",
          "4979: #define TMDS1EncoderControl TMDSAEncoderControl",
          "4980: #define TMDS2EncoderControl LVTMAEncoderControl",
          "",
          "[Removed Lines]",
          "4977: #define ucDac2Standard  ucDacStandard",
          "",
          "[Added Lines]",
          "6003: #define ucDac2Standard  ucDacStandard",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "4984: #define CRT1OutputControl   DAC1OutputControl",
          "4985: #define CRT2OutputControl   DAC2OutputControl",
          "4988: #define EnableLVDS_SS   EnableSpreadSpectrumOnPPLL",
          "",
          "[Removed Lines]",
          "4989: #define ENABLE_LVDS_SS_PARAMETERS_V3  ENABLE_SPREAD_SPECTRUM_ON_PPLL",
          "",
          "[Added Lines]",
          "6015: #define ENABLE_LVDS_SS_PARAMETERS_V3  ENABLE_SPREAD_SPECTRUM_ON_PPLL",
          "6023: #define ATOM_S6_ACC_REQ_TV2             0x00400000L",
          "6024: #define ATOM_DEVICE_TV2_INDEX           0x00000006",
          "6025: #define ATOM_DEVICE_TV2_SUPPORT         (0x1L << ATOM_DEVICE_TV2_INDEX)",
          "6026: #define ATOM_S0_TV2                     0x00100000L",
          "6027: #define ATOM_S3_TV2_ACTIVE              ATOM_S3_DFP6_ACTIVE",
          "6028: #define ATOM_S3_TV2_CRTC_ACTIVE         ATOM_S3_DFP6_CRTC_ACTIVE",
          "6031: #define ATOM_S2_CRT1_DPMS_STATE         0x00010000L",
          "6032: #define ATOM_S2_LCD1_DPMS_STATE         0x00020000L",
          "6033: #define ATOM_S2_TV1_DPMS_STATE          0x00040000L",
          "6034: #define ATOM_S2_DFP1_DPMS_STATE         0x00080000L",
          "6035: #define ATOM_S2_CRT2_DPMS_STATE         0x00100000L",
          "6036: #define ATOM_S2_LCD2_DPMS_STATE         0x00200000L",
          "6037: #define ATOM_S2_TV2_DPMS_STATE          0x00400000L",
          "6038: #define ATOM_S2_DFP2_DPMS_STATE         0x00800000L",
          "6039: #define ATOM_S2_CV_DPMS_STATE           0x01000000L",
          "6040: #define ATOM_S2_DFP3_DPMS_STATE     0x02000000L",
          "6041: #define ATOM_S2_DFP4_DPMS_STATE     0x04000000L",
          "6042: #define ATOM_S2_DFP5_DPMS_STATE     0x08000000L",
          "6044: #define ATOM_S2_CRT1_DPMS_STATEb2       0x01",
          "6045: #define ATOM_S2_LCD1_DPMS_STATEb2       0x02",
          "6046: #define ATOM_S2_TV1_DPMS_STATEb2        0x04",
          "6047: #define ATOM_S2_DFP1_DPMS_STATEb2       0x08",
          "6048: #define ATOM_S2_CRT2_DPMS_STATEb2       0x10",
          "6049: #define ATOM_S2_LCD2_DPMS_STATEb2       0x20",
          "6050: #define ATOM_S2_TV2_DPMS_STATEb2        0x40",
          "6051: #define ATOM_S2_DFP2_DPMS_STATEb2       0x80",
          "6052: #define ATOM_S2_CV_DPMS_STATEb3         0x01",
          "6053: #define ATOM_S2_DFP3_DPMS_STATEb3    0x02",
          "6054: #define ATOM_S2_DFP4_DPMS_STATEb3    0x04",
          "6055: #define ATOM_S2_DFP5_DPMS_STATEb3    0x08",
          "6057: #define ATOM_S3_ASIC_GUI_ENGINE_HUNGb3 0x20",
          "6058: #define ATOM_S3_ALLOW_FAST_PWR_SWITCHb3 0x40",
          "6059: #define ATOM_S3_RQST_GPU_USE_MIN_PWRb3  0x80",
          "6063: #pragma pack() // BIOS data must use byte aligment",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ce001abafafe77e5dd943d1480fc9f87894e96f",
      "candidate_info": {
        "commit_hash": "4ce001abafafe77e5dd943d1480fc9f87894e96f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/4ce001abafafe77e5dd943d1480fc9f87894e96f",
        "files": [
          "drivers/gpu/drm/radeon/Makefile",
          "drivers/gpu/drm/radeon/atombios.h",
          "drivers/gpu/drm/radeon/atombios_crtc.c",
          "drivers/gpu/drm/radeon/radeon.h",
          "drivers/gpu/drm/radeon/radeon_atombios.c",
          "drivers/gpu/drm/radeon/radeon_connectors.c",
          "drivers/gpu/drm/radeon/radeon_display.c",
          "drivers/gpu/drm/radeon/radeon_drv.c",
          "drivers/gpu/drm/radeon/radeon_encoders.c",
          "drivers/gpu/drm/radeon/radeon_legacy_crtc.c",
          "drivers/gpu/drm/radeon/radeon_legacy_encoders.c",
          "drivers/gpu/drm/radeon/radeon_legacy_tv.c",
          "drivers/gpu/drm/radeon/radeon_mode.h",
          "drivers/gpu/drm/radeon/radeon_reg.h",
          "drivers/gpu/drm/radeon/rv515.c"
        ],
        "message": "drm/radeon/kms: add initial radeon tv-out support.\n\nThis ports the tv-out code from the DDX to KMS.\n\nadds a radeon.tv module option, radeon.tv=0 to disable tv\n\nSigned-off-by: Dave Airlie <airlied@redhat.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/radeon/atombios.h||drivers/gpu/drm/radeon/atombios.h",
          "drivers/gpu/drm/radeon/atombios_crtc.c||drivers/gpu/drm/radeon/atombios_crtc.c",
          "drivers/gpu/drm/radeon/radeon.h||drivers/gpu/drm/radeon/radeon.h",
          "drivers/gpu/drm/radeon/radeon_atombios.c||drivers/gpu/drm/radeon/radeon_atombios.c",
          "drivers/gpu/drm/radeon/radeon_connectors.c||drivers/gpu/drm/radeon/radeon_connectors.c",
          "drivers/gpu/drm/radeon/radeon_display.c||drivers/gpu/drm/radeon/radeon_display.c",
          "drivers/gpu/drm/radeon/radeon_drv.c||drivers/gpu/drm/radeon/radeon_drv.c",
          "drivers/gpu/drm/radeon/radeon_encoders.c||drivers/gpu/drm/radeon/radeon_encoders.c",
          "drivers/gpu/drm/radeon/radeon_legacy_crtc.c||drivers/gpu/drm/radeon/radeon_legacy_crtc.c",
          "drivers/gpu/drm/radeon/radeon_legacy_encoders.c||drivers/gpu/drm/radeon/radeon_legacy_encoders.c",
          "drivers/gpu/drm/radeon/radeon_legacy_tv.c||drivers/gpu/drm/radeon/radeon_legacy_tv.c",
          "drivers/gpu/drm/radeon/radeon_mode.h||drivers/gpu/drm/radeon/radeon_mode.h",
          "drivers/gpu/drm/radeon/radeon_reg.h||drivers/gpu/drm/radeon/radeon_reg.h",
          "drivers/gpu/drm/radeon/rv515.c||drivers/gpu/drm/radeon/rv515.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/gpu/drm/radeon/atombios.h||drivers/gpu/drm/radeon/atombios.h",
            "drivers/gpu/drm/radeon/radeon_atombios.c||drivers/gpu/drm/radeon/radeon_atombios.c"
          ],
          "candidate": [
            "drivers/gpu/drm/radeon/atombios.h||drivers/gpu/drm/radeon/atombios.h",
            "drivers/gpu/drm/radeon/radeon_atombios.c||drivers/gpu/drm/radeon/radeon_atombios.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/radeon/atombios.h||drivers/gpu/drm/radeon/atombios.h": [
          "File: drivers/gpu/drm/radeon/atombios.h -> drivers/gpu/drm/radeon/atombios.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2374:  ATOM_MODE_TIMING aModeTimings[MAX_SUPPORTED_TV_TIMING];",
          "2375: } ATOM_ANALOG_TV_INFO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2377: #define MAX_SUPPORTED_TV_TIMING_V1_2    3",
          "2379: typedef struct _ATOM_ANALOG_TV_INFO_V1_2 {",
          "2380:  ATOM_COMMON_TABLE_HEADER sHeader;",
          "2381:  UCHAR                    ucTV_SupportedStandard;",
          "2382:  UCHAR                    ucTV_BootUpDefaultStandard;",
          "2383:  UCHAR                    ucExt_TV_ASIC_ID;",
          "2384:  UCHAR                    ucExt_TV_ASIC_SlaveAddr;",
          "2385:  ATOM_DTD_FORMAT          aModeTimings[MAX_SUPPORTED_TV_TIMING];",
          "2386: } ATOM_ANALOG_TV_INFO_V1_2;",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/radeon/atombios_crtc.c||drivers/gpu/drm/radeon/atombios_crtc.c": [
          "File: drivers/gpu/drm/radeon/atombios_crtc.c -> drivers/gpu/drm/radeon/atombios_crtc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"atom.h\"",
          "32: #include \"atom-bits.h\"",
          "34: static void atombios_overscan_setup(struct drm_crtc *crtc,",
          "35:         struct drm_display_mode *mode,",
          "36:         struct drm_display_mode *adjusted_mode)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: bool radeon_atom_get_tv_timings(struct radeon_device *rdev, int index,",
          "36:     SET_CRTC_TIMING_PARAMETERS_PS_ALLOCATION *crtc_timing,",
          "37:     int32_t *pixel_clock);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:  struct radeon_crtc *radeon_crtc = to_radeon_crtc(crtc);",
          "90:  ENABLE_SCALER_PS_ALLOCATION args;",
          "91:  int index = GetIndexIntoMasterTable(COMMAND, EnableScaler);",
          "93:  enum radeon_tv_std tv_std = TV_STD_NTSC;",
          "95:  if (!ASIC_IS_AVIVO(rdev) && radeon_crtc->crtc_id)",
          "96:   return;",
          "98:  memset(&args, 0, sizeof(args));",
          "100:  args.ucScaler = radeon_crtc->crtc_id;",
          "103:   switch (tv_std) {",
          "104:   case TV_STD_NTSC:",
          "105:   default:",
          "",
          "[Removed Lines]",
          "102:  if (radeon_crtc->devices & (ATOM_DEVICE_TV_SUPPORT)) {",
          "",
          "[Added Lines]",
          "99:  bool is_tv = false, is_cv = false;",
          "100:  struct drm_encoder *encoder;",
          "105:  list_for_each_entry(encoder, &dev->mode_config.encoder_list, head) {",
          "107:   if (encoder->crtc == crtc) {",
          "108:    struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "109:    if (radeon_encoder->active_device & ATOM_DEVICE_TV_SUPPORT) {",
          "110:     struct radeon_encoder_atom_dac *tv_dac = radeon_encoder->enc_priv;",
          "111:     tv_std = tv_dac->tv_std;",
          "112:     is_tv = true;",
          "113:    }",
          "114:   }",
          "115:  }",
          "121:  if (is_tv) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:    break;",
          "129:   }",
          "130:   args.ucEnable = SCALER_ENABLE_MULTITAP_MODE;",
          "132:   args.ucTVStandard = ATOM_TV_CV;",
          "133:   args.ucEnable = SCALER_ENABLE_MULTITAP_MODE;",
          "134:  } else {",
          "",
          "[Removed Lines]",
          "131:  } else if (radeon_crtc->devices & (ATOM_DEVICE_CV_SUPPORT)) {",
          "",
          "[Added Lines]",
          "150:  } else if (is_cv) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "151:   }",
          "152:  }",
          "153:  atom_execute_table(rdev->mode_info.atom_context, index, (uint32_t *)&args);",
          "157:  }",
          "158: }",
          "",
          "[Removed Lines]",
          "154:  if (radeon_crtc->devices & (ATOM_DEVICE_CV_SUPPORT | ATOM_DEVICE_TV_SUPPORT)",
          "155:      && rdev->family >= CHIP_RV515 && rdev->family <= CHIP_RV570) {",
          "156:   atom_rv515_force_tv_scaler(rdev);",
          "",
          "[Added Lines]",
          "173:  if ((is_tv || is_cv)",
          "174:      && rdev->family >= CHIP_RV515 && rdev->family <= CHIP_R580) {",
          "175:   atom_rv515_force_tv_scaler(rdev, radeon_crtc);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "551:  struct radeon_device *rdev = dev->dev_private;",
          "552:  struct drm_encoder *encoder;",
          "553:  SET_CRTC_TIMING_PARAMETERS_PS_ALLOCATION crtc_timing;",
          "556:  memset(&crtc_timing, 0, sizeof(crtc_timing));",
          "559:  list_for_each_entry(encoder, &dev->mode_config.encoder_list, head) {",
          "561:  }",
          "563:  crtc_timing.ucCRTC = radeon_crtc->crtc_id;",
          "591:  atombios_crtc_set_pll(crtc, adjusted_mode);",
          "592:  atombios_crtc_set_timing(crtc, &crtc_timing);",
          "",
          "[Removed Lines]",
          "564:  crtc_timing.usH_Total = adjusted_mode->crtc_htotal;",
          "565:  crtc_timing.usH_Disp = adjusted_mode->crtc_hdisplay;",
          "566:  crtc_timing.usH_SyncStart = adjusted_mode->crtc_hsync_start;",
          "567:  crtc_timing.usH_SyncWidth =",
          "568:      adjusted_mode->crtc_hsync_end - adjusted_mode->crtc_hsync_start;",
          "570:  crtc_timing.usV_Total = adjusted_mode->crtc_vtotal;",
          "571:  crtc_timing.usV_Disp = adjusted_mode->crtc_vdisplay;",
          "572:  crtc_timing.usV_SyncStart = adjusted_mode->crtc_vsync_start;",
          "573:  crtc_timing.usV_SyncWidth =",
          "574:      adjusted_mode->crtc_vsync_end - adjusted_mode->crtc_vsync_start;",
          "576:  if (adjusted_mode->flags & DRM_MODE_FLAG_NVSYNC)",
          "577:   crtc_timing.susModeMiscInfo.usAccess |= ATOM_VSYNC_POLARITY;",
          "579:  if (adjusted_mode->flags & DRM_MODE_FLAG_NHSYNC)",
          "580:   crtc_timing.susModeMiscInfo.usAccess |= ATOM_HSYNC_POLARITY;",
          "582:  if (adjusted_mode->flags & DRM_MODE_FLAG_CSYNC)",
          "583:   crtc_timing.susModeMiscInfo.usAccess |= ATOM_COMPOSITESYNC;",
          "585:  if (adjusted_mode->flags & DRM_MODE_FLAG_INTERLACE)",
          "586:   crtc_timing.susModeMiscInfo.usAccess |= ATOM_INTERLACE;",
          "588:  if (adjusted_mode->flags & DRM_MODE_FLAG_DBLSCAN)",
          "589:   crtc_timing.susModeMiscInfo.usAccess |= ATOM_DOUBLE_CLOCK_MODE;",
          "",
          "[Added Lines]",
          "573:  int need_tv_timings = 0;",
          "574:  bool ret;",
          "581:   if (encoder->crtc == crtc) {",
          "582:    struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "584:    if (radeon_encoder->active_device & ATOM_DEVICE_TV_SUPPORT) {",
          "585:     struct radeon_encoder_atom_dac *tv_dac = radeon_encoder->enc_priv;",
          "586:     if (tv_dac) {",
          "587:      if (tv_dac->tv_std == TV_STD_NTSC ||",
          "588:          tv_dac->tv_std == TV_STD_NTSC_J ||",
          "589:          tv_dac->tv_std == TV_STD_PAL_M)",
          "590:       need_tv_timings = 1;",
          "591:      else",
          "592:       need_tv_timings = 2;",
          "593:      break;",
          "594:     }",
          "595:    }",
          "596:   }",
          "600:  if (need_tv_timings) {",
          "601:   ret = radeon_atom_get_tv_timings(rdev, need_tv_timings - 1,",
          "602:        &crtc_timing, &adjusted_mode->clock);",
          "603:   if (ret == false)",
          "604:    need_tv_timings = 0;",
          "605:  }",
          "607:  if (!need_tv_timings) {",
          "608:   crtc_timing.usH_Total = adjusted_mode->crtc_htotal;",
          "609:   crtc_timing.usH_Disp = adjusted_mode->crtc_hdisplay;",
          "610:   crtc_timing.usH_SyncStart = adjusted_mode->crtc_hsync_start;",
          "611:   crtc_timing.usH_SyncWidth =",
          "612:    adjusted_mode->crtc_hsync_end - adjusted_mode->crtc_hsync_start;",
          "614:   crtc_timing.usV_Total = adjusted_mode->crtc_vtotal;",
          "615:   crtc_timing.usV_Disp = adjusted_mode->crtc_vdisplay;",
          "616:   crtc_timing.usV_SyncStart = adjusted_mode->crtc_vsync_start;",
          "617:   crtc_timing.usV_SyncWidth =",
          "618:    adjusted_mode->crtc_vsync_end - adjusted_mode->crtc_vsync_start;",
          "620:   if (adjusted_mode->flags & DRM_MODE_FLAG_NVSYNC)",
          "621:    crtc_timing.susModeMiscInfo.usAccess |= ATOM_VSYNC_POLARITY;",
          "623:   if (adjusted_mode->flags & DRM_MODE_FLAG_NHSYNC)",
          "624:    crtc_timing.susModeMiscInfo.usAccess |= ATOM_HSYNC_POLARITY;",
          "626:   if (adjusted_mode->flags & DRM_MODE_FLAG_CSYNC)",
          "627:    crtc_timing.susModeMiscInfo.usAccess |= ATOM_COMPOSITESYNC;",
          "629:   if (adjusted_mode->flags & DRM_MODE_FLAG_INTERLACE)",
          "630:    crtc_timing.susModeMiscInfo.usAccess |= ATOM_INTERLACE;",
          "632:   if (adjusted_mode->flags & DRM_MODE_FLAG_DBLSCAN)",
          "633:    crtc_timing.susModeMiscInfo.usAccess |= ATOM_DOUBLE_CLOCK_MODE;",
          "634:  }",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/radeon/radeon.h||drivers/gpu/drm/radeon/radeon.h": [
          "File: drivers/gpu/drm/radeon/radeon.h -> drivers/gpu/drm/radeon/radeon.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: extern int radeon_benchmarking;",
          "67: extern int radeon_testing;",
          "68: extern int radeon_connector_table;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: extern int radeon_tv;",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/radeon/radeon_atombios.c||drivers/gpu/drm/radeon/radeon_atombios.c": [
          "File: drivers/gpu/drm/radeon/radeon_atombios.c -> drivers/gpu/drm/radeon/radeon_atombios.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:    continue;",
          "472:   }",
          "479:   bios_connectors[i].connector_type =",
          "480:       supported_devices_connector_convert[ci.sucConnectorInfo.",
          "481:        sbfAccess.",
          "",
          "[Removed Lines]",
          "474:   if (i == ATOM_DEVICE_TV1_INDEX) {",
          "475:    DRM_DEBUG(\"Skipping TV Out\\n\");",
          "476:    continue;",
          "477:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "858:  return p_dac;",
          "859: }",
          "861: struct radeon_encoder_tv_dac *",
          "862: radeon_atombios_get_tv_dac_info(struct radeon_encoder *encoder)",
          "863: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "856: bool radeon_atom_get_tv_timings(struct radeon_device *rdev, int index,",
          "857:     SET_CRTC_TIMING_PARAMETERS_PS_ALLOCATION *crtc_timing,",
          "858:     int32_t *pixel_clock)",
          "859: {",
          "860:  struct radeon_mode_info *mode_info = &rdev->mode_info;",
          "861:  ATOM_ANALOG_TV_INFO *tv_info;",
          "862:  ATOM_ANALOG_TV_INFO_V1_2 *tv_info_v1_2;",
          "863:  ATOM_DTD_FORMAT *dtd_timings;",
          "864:  int data_index = GetIndexIntoMasterTable(DATA, AnalogTV_Info);",
          "865:  u8 frev, crev;",
          "866:  uint16_t data_offset;",
          "868:  atom_parse_data_header(mode_info->atom_context, data_index, NULL, &frev, &crev, &data_offset);",
          "870:  switch (crev) {",
          "871:  case 1:",
          "872:   tv_info = (ATOM_ANALOG_TV_INFO *)(mode_info->atom_context->bios + data_offset);",
          "873:   if (index > MAX_SUPPORTED_TV_TIMING)",
          "874:    return false;",
          "876:   crtc_timing->usH_Total = le16_to_cpu(tv_info->aModeTimings[index].usCRTC_H_Total);",
          "877:   crtc_timing->usH_Disp = le16_to_cpu(tv_info->aModeTimings[index].usCRTC_H_Disp);",
          "878:   crtc_timing->usH_SyncStart = le16_to_cpu(tv_info->aModeTimings[index].usCRTC_H_SyncStart);",
          "879:   crtc_timing->usH_SyncWidth = le16_to_cpu(tv_info->aModeTimings[index].usCRTC_H_SyncWidth);",
          "881:   crtc_timing->usV_Total = le16_to_cpu(tv_info->aModeTimings[index].usCRTC_V_Total);",
          "882:   crtc_timing->usV_Disp = le16_to_cpu(tv_info->aModeTimings[index].usCRTC_V_Disp);",
          "883:   crtc_timing->usV_SyncStart = le16_to_cpu(tv_info->aModeTimings[index].usCRTC_V_SyncStart);",
          "884:   crtc_timing->usV_SyncWidth = le16_to_cpu(tv_info->aModeTimings[index].usCRTC_V_SyncWidth);",
          "886:   crtc_timing->susModeMiscInfo = tv_info->aModeTimings[index].susModeMiscInfo;",
          "888:   crtc_timing->ucOverscanRight = le16_to_cpu(tv_info->aModeTimings[index].usCRTC_OverscanRight);",
          "889:   crtc_timing->ucOverscanLeft = le16_to_cpu(tv_info->aModeTimings[index].usCRTC_OverscanLeft);",
          "890:   crtc_timing->ucOverscanBottom = le16_to_cpu(tv_info->aModeTimings[index].usCRTC_OverscanBottom);",
          "891:   crtc_timing->ucOverscanTop = le16_to_cpu(tv_info->aModeTimings[index].usCRTC_OverscanTop);",
          "894:   if (index == 1) {",
          "896:    crtc_timing->usH_Total -= 1;",
          "897:    crtc_timing->usV_Total -= 1;",
          "898:   }",
          "899:   break;",
          "900:  case 2:",
          "901:   tv_info_v1_2 = (ATOM_ANALOG_TV_INFO_V1_2 *)(mode_info->atom_context->bios + data_offset);",
          "902:   if (index > MAX_SUPPORTED_TV_TIMING_V1_2)",
          "903:    return false;",
          "905:   dtd_timings = &tv_info_v1_2->aModeTimings[index];",
          "906:   crtc_timing->usH_Total = le16_to_cpu(dtd_timings->usHActive) + le16_to_cpu(dtd_timings->usHBlanking_Time);",
          "907:   crtc_timing->usH_Disp = le16_to_cpu(dtd_timings->usHActive);",
          "908:   crtc_timing->usH_SyncStart = le16_to_cpu(dtd_timings->usHActive) + le16_to_cpu(dtd_timings->usHSyncOffset);",
          "909:   crtc_timing->usH_SyncWidth = le16_to_cpu(dtd_timings->usHSyncWidth);",
          "910:   crtc_timing->usV_Total = le16_to_cpu(dtd_timings->usVActive) + le16_to_cpu(dtd_timings->usVBlanking_Time);",
          "911:   crtc_timing->usV_Disp = le16_to_cpu(dtd_timings->usVActive);",
          "912:   crtc_timing->usV_SyncStart = le16_to_cpu(dtd_timings->usVActive) + le16_to_cpu(dtd_timings->usVSyncOffset);",
          "913:   crtc_timing->usV_SyncWidth = le16_to_cpu(dtd_timings->usVSyncWidth);",
          "915:   crtc_timing->susModeMiscInfo.usAccess = le16_to_cpu(dtd_timings->susModeMiscInfo.usAccess);",
          "917:   break;",
          "918:  }",
          "919:  return true;",
          "920: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "948:  uint32_t bios_2_scratch, bios_6_scratch;",
          "950:  if (rdev->family >= CHIP_R600) {",
          "952:   bios_6_scratch = RREG32(R600_BIOS_6_SCRATCH);",
          "953:  } else {",
          "955:   bios_6_scratch = RREG32(RADEON_BIOS_6_SCRATCH);",
          "956:  }",
          "",
          "[Removed Lines]",
          "951:   bios_2_scratch = RREG32(R600_BIOS_0_SCRATCH);",
          "954:   bios_2_scratch = RREG32(RADEON_BIOS_0_SCRATCH);",
          "",
          "[Added Lines]",
          "1012:   bios_2_scratch = RREG32(R600_BIOS_2_SCRATCH);",
          "1015:   bios_2_scratch = RREG32(RADEON_BIOS_2_SCRATCH);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/radeon/radeon_connectors.c||drivers/gpu/drm/radeon/radeon_connectors.c": [
          "File: drivers/gpu/drm/radeon/radeon_connectors.c -> drivers/gpu/drm/radeon/radeon_connectors.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:  return NULL;",
          "95: }",
          "97: static struct drm_display_mode *radeon_fp_native_mode(struct drm_encoder *encoder)",
          "98: {",
          "99:  struct drm_device *dev = encoder->dev;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: static enum drm_connector_status",
          "105: radeon_connector_analog_encoder_conflict_solve(struct drm_connector *connector,",
          "106:             struct drm_encoder *encoder,",
          "107:             enum drm_connector_status current_status,",
          "108:             bool priority)",
          "109: {",
          "110:  struct drm_device *dev = connector->dev;",
          "111:  struct drm_connector *conflict;",
          "112:  int i;",
          "114:  list_for_each_entry(conflict, &dev->mode_config.connector_list, head) {",
          "115:   if (conflict == connector)",
          "116:    continue;",
          "118:   for (i = 0; i < DRM_CONNECTOR_MAX_ENCODER; i++) {",
          "119:    if (conflict->encoder_ids[i] == 0)",
          "120:     break;",
          "123:    if (conflict->encoder_ids[i] == encoder->base.id) {",
          "124:     if (conflict->status != connector_status_connected)",
          "125:      continue;",
          "127:     if (priority == true) {",
          "128:      DRM_INFO(\"1: conflicting encoders switching off %s\\n\", drm_get_connector_name(conflict));",
          "129:      DRM_INFO(\"in favor of %s\\n\", drm_get_connector_name(connector));",
          "130:      conflict->status = connector_status_disconnected;",
          "131:      radeon_connector_update_scratch_regs(conflict, connector_status_disconnected);",
          "132:     } else {",
          "133:      DRM_INFO(\"2: conflicting encoders switching off %s\\n\", drm_get_connector_name(connector));",
          "134:      DRM_INFO(\"in favor of %s\\n\", drm_get_connector_name(conflict));",
          "135:      current_status = connector_status_disconnected;",
          "136:     }",
          "137:     break;",
          "138:    }",
          "139:   }",
          "140:  }",
          "141:  return current_status;",
          "143: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225:  bool dret;",
          "226:  enum drm_connector_status ret = connector_status_disconnected;",
          "228:  radeon_i2c_do_lock(radeon_connector, 1);",
          "229:  dret = radeon_ddc_probe(radeon_connector);",
          "230:  radeon_i2c_do_lock(radeon_connector, 0);",
          "231:  if (dret)",
          "232:   ret = connector_status_connected;",
          "233:  else {",
          "242:  }",
          "244:  radeon_connector_update_scratch_regs(connector, ret);",
          "245:  return ret;",
          "246: }",
          "",
          "[Removed Lines]",
          "235:   encoder = radeon_best_single_encoder(connector);",
          "236:   if (!encoder)",
          "237:    ret = connector_status_disconnected;",
          "238:   else {",
          "239:    encoder_funcs = encoder->helper_private;",
          "240:    ret = encoder_funcs->detect(encoder, connector);",
          "241:   }",
          "",
          "[Added Lines]",
          "275:  encoder = radeon_best_single_encoder(connector);",
          "276:  if (!encoder)",
          "277:   ret = connector_status_disconnected;",
          "285:   encoder_funcs = encoder->helper_private;",
          "286:   ret = encoder_funcs->detect(encoder, connector);",
          "289:  if (ret == connector_status_connected)",
          "290:   ret = radeon_connector_analog_encoder_conflict_solve(connector, encoder, ret, true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "259:  .set_property = radeon_connector_set_property,",
          "260: };",
          "262: static int radeon_dvi_get_modes(struct drm_connector *connector)",
          "263: {",
          "264:  struct radeon_connector *radeon_connector = to_radeon_connector(connector);",
          "265:  int ret;",
          "267:  ret = radeon_ddc_get_modes(radeon_connector);",
          "270:  return ret;",
          "271: }",
          "273: static enum drm_connector_status radeon_dvi_detect(struct drm_connector *connector)",
          "274: {",
          "275:  struct radeon_connector *radeon_connector = to_radeon_connector(connector);",
          "277:  struct drm_encoder_helper_funcs *encoder_funcs;",
          "278:  struct drm_mode_object *obj;",
          "279:  int i;",
          "",
          "[Removed Lines]",
          "269:  radeon_connector_update_scratch_regs(connector, connector_status_connected);",
          "276:  struct drm_encoder *encoder;",
          "",
          "[Added Lines]",
          "309: static struct drm_display_mode tv_fixed_mode = {",
          "310:  DRM_MODE(\"800x600\", DRM_MODE_TYPE_DEFAULT, 38250, 800, 832,",
          "311:    912, 1024, 0, 600, 603, 607, 624, 0, DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_PVSYNC),",
          "312: };",
          "314: static int radeon_tv_get_modes(struct drm_connector *connector)",
          "315: {",
          "316:  struct drm_device *dev = connector->dev;",
          "317:  struct drm_display_mode *tv_mode;",
          "319:  tv_mode = drm_mode_duplicate(dev, &tv_fixed_mode);",
          "320:  tv_mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;",
          "322:  drm_mode_probed_add(connector, tv_mode);",
          "324:  return 1;",
          "325: }",
          "327: static int radeon_tv_mode_valid(struct drm_connector *connector,",
          "328:     struct drm_display_mode *mode)",
          "329: {",
          "330:  return MODE_OK;",
          "331: }",
          "333: static enum drm_connector_status radeon_tv_detect(struct drm_connector *connector)",
          "334: {",
          "335:  struct drm_encoder *encoder;",
          "336:  struct drm_encoder_helper_funcs *encoder_funcs;",
          "337:  int ret;",
          "339:  encoder = radeon_best_single_encoder(connector);",
          "340:  if (!encoder)",
          "341:   ret = connector_status_disconnected;",
          "342:  else {",
          "343:   encoder_funcs = encoder->helper_private;",
          "344:   ret = encoder_funcs->detect(encoder, connector);",
          "345:  }",
          "346:  if (ret == connector_status_connected)",
          "347:   ret = radeon_connector_analog_encoder_conflict_solve(connector, encoder, ret, false);",
          "348:  radeon_connector_update_scratch_regs(connector, ret);",
          "349:  return ret;",
          "350: }",
          "352: struct drm_connector_helper_funcs radeon_tv_connector_helper_funcs = {",
          "353:  .get_modes = radeon_tv_get_modes,",
          "354:  .mode_valid = radeon_tv_mode_valid,",
          "355:  .best_encoder = radeon_best_single_encoder,",
          "356: };",
          "358: struct drm_connector_funcs radeon_tv_connector_funcs = {",
          "359:  .dpms = drm_helper_connector_dpms,",
          "360:  .detect = radeon_tv_detect,",
          "361:  .fill_modes = drm_helper_probe_single_connector_modes,",
          "362:  .destroy = radeon_connector_destroy,",
          "363:  .set_property = radeon_connector_set_property,",
          "364: };",
          "389:  struct drm_encoder *encoder = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "283:  radeon_i2c_do_lock(radeon_connector, 1);",
          "284:  dret = radeon_ddc_probe(radeon_connector);",
          "285:  radeon_i2c_do_lock(radeon_connector, 0);",
          "303:     ret = encoder_funcs->detect(encoder, connector);",
          "304:     if (ret == connector_status_connected) {",
          "307:     }",
          "308:    }",
          "309:   }",
          "310:  }",
          "313:  radeon_connector_update_scratch_regs(connector, ret);",
          "314:  return ret;",
          "",
          "[Removed Lines]",
          "286:  if (dret)",
          "287:   ret = connector_status_connected;",
          "288:  else {",
          "289:   for (i = 0; i < DRM_CONNECTOR_MAX_ENCODER; i++) {",
          "290:    if (connector->encoder_ids[i] == 0)",
          "291:     break;",
          "293:    obj = drm_mode_object_find(connector->dev,",
          "294:          connector->encoder_ids[i],",
          "295:          DRM_MODE_OBJECT_ENCODER);",
          "296:    if (!obj)",
          "297:     continue;",
          "299:    encoder = obj_to_encoder(obj);",
          "301:    encoder_funcs = encoder->helper_private;",
          "302:    if (encoder_funcs->detect) {",
          "305:      radeon_connector->use_digital = 0;",
          "306:      break;",
          "",
          "[Added Lines]",
          "399:  if (dret) {",
          "400:   radeon_i2c_do_lock(radeon_connector, 1);",
          "401:   radeon_connector->edid = drm_get_edid(&radeon_connector->base, &radeon_connector->ddc_bus->adapter);",
          "402:   radeon_i2c_do_lock(radeon_connector, 0);",
          "404:   if (!radeon_connector->edid) {",
          "405:    DRM_ERROR(\"DDC responded but not EDID found for %s\\n\",",
          "406:       drm_get_connector_name(connector));",
          "407:   } else {",
          "408:    radeon_connector->use_digital = !!(radeon_connector->edid->input & DRM_EDID_INPUT_DIGITAL);",
          "411:       then we need to make sure we don't have any",
          "413:    ret = connector_status_connected;",
          "414:   }",
          "415:  }",
          "417:  if ((ret == connector_status_connected) && (radeon_connector->use_digital == true))",
          "418:   goto out;",
          "421:  for (i = 0; i < DRM_CONNECTOR_MAX_ENCODER; i++) {",
          "422:   if (connector->encoder_ids[i] == 0)",
          "423:    break;",
          "425:   obj = drm_mode_object_find(connector->dev,",
          "426:         connector->encoder_ids[i],",
          "427:         DRM_MODE_OBJECT_ENCODER);",
          "428:   if (!obj)",
          "429:    continue;",
          "431:   encoder = obj_to_encoder(obj);",
          "433:   encoder_funcs = encoder->helper_private;",
          "434:   if (encoder_funcs->detect) {",
          "435:    if (ret != connector_status_connected) {",
          "438:      radeon_connector->use_digital = false;",
          "441:    break;",
          "445:  if ((ret == connector_status_connected) && (radeon_connector->use_digital == false) &&",
          "446:      encoder) {",
          "447:   ret = radeon_connector_analog_encoder_conflict_solve(connector, encoder, ret, true);",
          "448:  }",
          "450: out:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:   encoder = obj_to_encoder(obj);",
          "336:    if (encoder->encoder_type == DRM_MODE_ENCODER_TMDS)",
          "337:     return encoder;",
          "338:   } else {",
          "",
          "[Removed Lines]",
          "335:   if (radeon_connector->use_digital) {",
          "",
          "[Added Lines]",
          "474:   if (radeon_connector->use_digital == true) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "385:  uint32_t subpixel_order = SubPixelNone;",
          "392:   return;",
          "",
          "[Removed Lines]",
          "388:  if ((connector_type == DRM_MODE_CONNECTOR_Unknown) ||",
          "389:      (connector_type == DRM_MODE_CONNECTOR_SVIDEO) ||",
          "390:      (connector_type == DRM_MODE_CONNECTOR_Composite) ||",
          "391:      (connector_type == DRM_MODE_CONNECTOR_9PinDIN))",
          "",
          "[Added Lines]",
          "527:  if (connector_type == DRM_MODE_CONNECTOR_Unknown)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "480:  case DRM_MODE_CONNECTOR_SVIDEO:",
          "481:  case DRM_MODE_CONNECTOR_Composite:",
          "482:  case DRM_MODE_CONNECTOR_9PinDIN:",
          "483:   break;",
          "484:  case DRM_MODE_CONNECTOR_LVDS:",
          "485:   radeon_dig_connector = kzalloc(sizeof(struct radeon_connector_atom_dig), GFP_KERNEL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619:   if (radeon_tv == 1) {",
          "620:    drm_connector_init(dev, &radeon_connector->base, &radeon_tv_connector_funcs, connector_type);",
          "621:    drm_connector_helper_add(&radeon_connector->base, &radeon_tv_connector_helper_funcs);",
          "622:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "522:  uint32_t subpixel_order = SubPixelNone;",
          "529:   return;",
          "",
          "[Removed Lines]",
          "525:  if ((connector_type == DRM_MODE_CONNECTOR_Unknown) ||",
          "526:      (connector_type == DRM_MODE_CONNECTOR_SVIDEO) ||",
          "527:      (connector_type == DRM_MODE_CONNECTOR_Composite) ||",
          "528:      (connector_type == DRM_MODE_CONNECTOR_9PinDIN))",
          "",
          "[Added Lines]",
          "665:  if (connector_type == DRM_MODE_CONNECTOR_Unknown)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "578:  case DRM_MODE_CONNECTOR_SVIDEO:",
          "579:  case DRM_MODE_CONNECTOR_Composite:",
          "580:  case DRM_MODE_CONNECTOR_9PinDIN:",
          "581:   break;",
          "582:  case DRM_MODE_CONNECTOR_LVDS:",
          "583:   drm_connector_init(dev, &radeon_connector->base, &radeon_lvds_connector_funcs, connector_type);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718:   if (radeon_tv == 1) {",
          "719:    drm_connector_init(dev, &radeon_connector->base, &radeon_tv_connector_funcs, connector_type);",
          "720:    drm_connector_helper_add(&radeon_connector->base, &radeon_tv_connector_helper_funcs);",
          "721:   }",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/radeon/radeon_display.c||drivers/gpu/drm/radeon/radeon_display.c": [
          "File: drivers/gpu/drm/radeon/radeon_display.c -> drivers/gpu/drm/radeon/radeon_display.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:  }",
          "313: }",
          "316: {",
          "317:  struct radeon_device *rdev = dev->dev_private;",
          "318:  struct drm_connector *drm_connector;",
          "",
          "[Removed Lines]",
          "315: bool radeon_setup_enc_conn(struct drm_device *dev)",
          "",
          "[Added Lines]",
          "315: static bool radeon_setup_enc_conn(struct drm_device *dev)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:  if (!radeon_connector->ddc_bus)",
          "348:   return -1;",
          "352:  if (edid) {",
          "354:   if (edid->input & DRM_EDID_INPUT_DIGITAL)",
          "",
          "[Removed Lines]",
          "349:  radeon_i2c_do_lock(radeon_connector, 1);",
          "350:  edid = drm_get_edid(&radeon_connector->base, &radeon_connector->ddc_bus->adapter);",
          "351:  radeon_i2c_do_lock(radeon_connector, 0);",
          "",
          "[Added Lines]",
          "349:  if (!radeon_connector->edid) {",
          "350:   radeon_i2c_do_lock(radeon_connector, 1);",
          "351:   edid = drm_get_edid(&radeon_connector->base, &radeon_connector->ddc_bus->adapter);",
          "352:   radeon_i2c_do_lock(radeon_connector, 0);",
          "353:  } else",
          "354:   edid = radeon_connector->edid;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "677:    continue;",
          "678:   if (first) {",
          "679:    radeon_crtc->rmx_type = radeon_encoder->rmx_type;",
          "681:    memcpy(&radeon_crtc->native_mode,",
          "682:     &radeon_encoder->native_mode,",
          "683:     sizeof(struct radeon_native_mode));",
          "",
          "[Removed Lines]",
          "680:    radeon_crtc->devices = radeon_encoder->devices;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/radeon/radeon_drv.c||drivers/gpu/drm/radeon/radeon_drv.c": [
          "File: drivers/gpu/drm/radeon/radeon_drv.c -> drivers/gpu/drm/radeon/radeon_drv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: int radeon_benchmarking = 0;",
          "92: int radeon_testing = 0;",
          "93: int radeon_connector_table = 0;",
          "94: #endif",
          "96: MODULE_PARM_DESC(no_wb, \"Disable AGP writeback for scratch registers\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94: int radeon_tv = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124: MODULE_PARM_DESC(connector_table, \"Force connector table\");",
          "125: module_param_named(connector_table, radeon_connector_table, int, 0444);",
          "126: #endif",
          "128: static int radeon_suspend(struct drm_device *dev, pm_message_t state)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: MODULE_PARM_DESC(tv, \"TV enable (0 = disable)\");",
          "129: module_param_named(tv, radeon_tv, int, 0444);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/radeon/radeon_encoders.c||drivers/gpu/drm/radeon/radeon_encoders.c": [
          "File: drivers/gpu/drm/radeon/radeon_encoders.c -> drivers/gpu/drm/radeon/radeon_encoders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:  }",
          "127: }",
          "129: static struct drm_connector *",
          "130: radeon_get_connector_for_encoder(struct drm_encoder *encoder)",
          "131: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: void radeon_encoder_set_active_device(struct drm_encoder *encoder)",
          "130: {",
          "131:  struct drm_device *dev = encoder->dev;",
          "132:  struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "133:  struct drm_connector *connector;",
          "135:  list_for_each_entry(connector, &dev->mode_config.connector_list, head) {",
          "136:   if (connector->encoder == encoder) {",
          "137:    struct radeon_connector *radeon_connector = to_radeon_connector(connector);",
          "138:    radeon_encoder->active_device = radeon_encoder->devices & radeon_connector->devices;",
          "139:    DRM_INFO(\"setting active device to %08x from %08x %08x for encoder %d\\n\",",
          "140:      radeon_encoder->active_device, radeon_encoder->devices,",
          "141:      radeon_connector->devices, encoder->encoder_type);",
          "142:   }",
          "143:  }",
          "144: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:  args.ucAction = action;",
          "248:   args.ucDacStandard = ATOM_DAC1_PS2;",
          "250:   args.ucDacStandard = ATOM_DAC1_CV;",
          "251:  else {",
          "252:   switch (tv_std) {",
          "",
          "[Removed Lines]",
          "247:  if (radeon_encoder->devices & (ATOM_DEVICE_CRT_SUPPORT))",
          "249:  else if (radeon_encoder->devices & (ATOM_DEVICE_CV_SUPPORT))",
          "",
          "[Added Lines]",
          "264:  if (radeon_encoder->active_device & (ATOM_DEVICE_CRT_SUPPORT))",
          "266:  else if (radeon_encoder->active_device & (ATOM_DEVICE_CV_SUPPORT))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289:  args.sTVEncoder.ucAction = action;",
          "292:   args.sTVEncoder.ucTvStandard = ATOM_TV_CV;",
          "293:  else {",
          "294:   switch (tv_std) {",
          "",
          "[Removed Lines]",
          "291:  if (radeon_encoder->devices & (ATOM_DEVICE_CV_SUPPORT))",
          "",
          "[Added Lines]",
          "308:  if (radeon_encoder->active_device & (ATOM_DEVICE_CV_SUPPORT))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "827:  temp = RREG32(reg);",
          "829:   WREG32(reg, (ATOM_S3_TV1_ACTIVE |",
          "830:         (radeon_crtc->crtc_id << 18)));",
          "832:   WREG32(reg, (ATOM_S3_CV_ACTIVE | (radeon_crtc->crtc_id << 24)));",
          "833:  else",
          "834:   WREG32(reg, 0);",
          "",
          "[Removed Lines]",
          "828:  if (radeon_encoder->devices & (ATOM_DEVICE_TV_SUPPORT))",
          "831:  else if (radeon_encoder->devices & (ATOM_DEVICE_CV_SUPPORT))",
          "",
          "[Added Lines]",
          "845:  if (radeon_encoder->active_device & (ATOM_DEVICE_TV_SUPPORT))",
          "848:  else if (radeon_encoder->active_device & (ATOM_DEVICE_CV_SUPPORT))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "851:  DISPLAY_DEVICE_OUTPUT_CONTROL_PS_ALLOCATION args;",
          "852:  int index = 0;",
          "853:  bool is_dig = false;",
          "855:  memset(&args, 0, sizeof(args));",
          "857:  switch (radeon_encoder->encoder_id) {",
          "858:  case ENCODER_OBJECT_ID_INTERNAL_TMDS1:",
          "859:  case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_TMDS1:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "871:  int devices;",
          "876:  if (mode != DRM_MODE_DPMS_ON && !radeon_encoder->active_device)",
          "877:   devices = radeon_encoder->devices;",
          "878:  else",
          "879:   devices = radeon_encoder->active_device;",
          "881:  DRM_INFO(\"encoder dpms %d to mode %d, devices %08x, active_devices %08x\\n\",",
          "882:    radeon_encoder->encoder_id, mode, radeon_encoder->devices,",
          "883:   radeon_encoder->active_device);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "881:   break;",
          "882:  case ENCODER_OBJECT_ID_INTERNAL_DAC1:",
          "883:  case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC1:",
          "885:    index = GetIndexIntoMasterTable(COMMAND, TV1OutputControl);",
          "887:    index = GetIndexIntoMasterTable(COMMAND, CV1OutputControl);",
          "888:   else",
          "889:    index = GetIndexIntoMasterTable(COMMAND, DAC1OutputControl);",
          "890:   break;",
          "891:  case ENCODER_OBJECT_ID_INTERNAL_DAC2:",
          "892:  case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC2:",
          "894:    index = GetIndexIntoMasterTable(COMMAND, TV1OutputControl);",
          "896:    index = GetIndexIntoMasterTable(COMMAND, CV1OutputControl);",
          "897:   else",
          "898:    index = GetIndexIntoMasterTable(COMMAND, DAC2OutputControl);",
          "",
          "[Removed Lines]",
          "884:   if (radeon_encoder->devices & (ATOM_DEVICE_TV_SUPPORT))",
          "886:   else if (radeon_encoder->devices & (ATOM_DEVICE_CV_SUPPORT))",
          "893:   if (radeon_encoder->devices & (ATOM_DEVICE_TV_SUPPORT))",
          "895:   else if (radeon_encoder->devices & (ATOM_DEVICE_CV_SUPPORT))",
          "",
          "[Added Lines]",
          "911:   if (devices & (ATOM_DEVICE_TV_SUPPORT))",
          "913:   else if (devices & (ATOM_DEVICE_CV_SUPPORT))",
          "920:   if (devices & (ATOM_DEVICE_TV_SUPPORT))",
          "922:   else if (devices & (ATOM_DEVICE_CV_SUPPORT))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "979:     break;",
          "980:    case ENCODER_OBJECT_ID_INTERNAL_DAC1:",
          "981:    case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC1:",
          "983:      args.v1.ucDevice = ATOM_DEVICE_TV1_INDEX;",
          "985:      args.v1.ucDevice = ATOM_DEVICE_CV_INDEX;",
          "986:     else",
          "987:      args.v1.ucDevice = ATOM_DEVICE_CRT1_INDEX;",
          "988:     break;",
          "989:    case ENCODER_OBJECT_ID_INTERNAL_DAC2:",
          "990:    case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC2:",
          "992:      args.v1.ucDevice = ATOM_DEVICE_TV1_INDEX;",
          "994:      args.v1.ucDevice = ATOM_DEVICE_CV_INDEX;",
          "995:     else",
          "996:      args.v1.ucDevice = ATOM_DEVICE_CRT2_INDEX;",
          "",
          "[Removed Lines]",
          "982:     if (radeon_encoder->devices & (ATOM_DEVICE_TV_SUPPORT))",
          "984:     else if (radeon_encoder->devices & (ATOM_DEVICE_CV_SUPPORT))",
          "991:     if (radeon_encoder->devices & (ATOM_DEVICE_TV_SUPPORT))",
          "993:     else if (radeon_encoder->devices & (ATOM_DEVICE_CV_SUPPORT))",
          "",
          "[Added Lines]",
          "1009:     if (radeon_encoder->active_device & (ATOM_DEVICE_TV_SUPPORT))",
          "1011:     else if (radeon_encoder->active_device & (ATOM_DEVICE_CV_SUPPORT))",
          "1018:     if (radeon_encoder->active_device & (ATOM_DEVICE_TV_SUPPORT))",
          "1020:     else if (radeon_encoder->active_device & (ATOM_DEVICE_CV_SUPPORT))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1019:     args.v2.ucEncoderID = ASIC_INT_DIG2_ENCODER_ID;",
          "1020:     break;",
          "1021:    case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC1:",
          "1023:      args.v2.ucEncoderID = ASIC_INT_TV_ENCODER_ID;",
          "1025:      args.v2.ucEncoderID = ASIC_INT_TV_ENCODER_ID;",
          "1026:     else",
          "1027:      args.v2.ucEncoderID = ASIC_INT_DAC1_ENCODER_ID;",
          "1028:     break;",
          "1029:    case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC2:",
          "1031:      args.v2.ucEncoderID = ASIC_INT_TV_ENCODER_ID;",
          "1033:      args.v2.ucEncoderID = ASIC_INT_TV_ENCODER_ID;",
          "1034:     else",
          "1035:      args.v2.ucEncoderID = ASIC_INT_DAC2_ENCODER_ID;",
          "",
          "[Removed Lines]",
          "1022:     if (radeon_encoder->devices & (ATOM_DEVICE_TV_SUPPORT))",
          "1024:     else if (radeon_encoder->devices & (ATOM_DEVICE_CV_SUPPORT))",
          "1030:     if (radeon_encoder->devices & (ATOM_DEVICE_TV_SUPPORT))",
          "1032:     else if (radeon_encoder->devices & (ATOM_DEVICE_CV_SUPPORT))",
          "",
          "[Added Lines]",
          "1049:     if (radeon_encoder->active_device & (ATOM_DEVICE_TV_SUPPORT))",
          "1051:     else if (radeon_encoder->active_device & (ATOM_DEVICE_CV_SUPPORT))",
          "1057:     if (radeon_encoder->active_device & (ATOM_DEVICE_TV_SUPPORT))",
          "1059:     else if (radeon_encoder->active_device & (ATOM_DEVICE_CV_SUPPORT))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1097:  atombios_set_encoder_crtc_source(encoder);",
          "1099:  if (ASIC_IS_AVIVO(rdev)) {",
          "1101:    atombios_yuv_setup(encoder, true);",
          "1102:   else",
          "1103:    atombios_yuv_setup(encoder, false);",
          "",
          "[Removed Lines]",
          "1100:   if (radeon_encoder->devices & (ATOM_DEVICE_CV_SUPPORT | ATOM_DEVICE_TV_SUPPORT))",
          "",
          "[Added Lines]",
          "1127:   if (radeon_encoder->active_device & (ATOM_DEVICE_CV_SUPPORT | ATOM_DEVICE_TV_SUPPORT))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1135:  case ENCODER_OBJECT_ID_INTERNAL_DAC2:",
          "1136:  case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC2:",
          "1137:   atombios_dac_setup(encoder, ATOM_ENABLE);",
          "1139:    atombios_tv_setup(encoder, ATOM_ENABLE);",
          "1140:   break;",
          "1141:  }",
          "",
          "[Removed Lines]",
          "1138:   if (radeon_encoder->devices & (ATOM_DEVICE_TV_SUPPORT | ATOM_DEVICE_CV_SUPPORT))",
          "",
          "[Added Lines]",
          "1165:   if (radeon_encoder->active_device & (ATOM_DEVICE_TV_SUPPORT | ATOM_DEVICE_CV_SUPPORT))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1143: }",
          "1145: static bool",
          "1147: {",
          "1148:  struct drm_device *dev = encoder->dev;",
          "1149:  struct radeon_device *rdev = dev->dev_private;",
          "1150:  struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "1152:  if (radeon_encoder->devices & (ATOM_DEVICE_TV_SUPPORT |",
          "1153:            ATOM_DEVICE_CV_SUPPORT |",
          "",
          "[Removed Lines]",
          "1146: atombios_dac_load_detect(struct drm_encoder *encoder)",
          "",
          "[Added Lines]",
          "1173: atombios_dac_load_detect(struct drm_encoder *encoder, struct drm_connector *connector)",
          "1178:  struct radeon_connector *radeon_connector = to_radeon_connector(connector);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1168:   else",
          "1169:    args.sDacload.ucDacType = ATOM_DAC_B;",
          "1172:    args.sDacload.usDeviceID = cpu_to_le16(ATOM_DEVICE_CRT1_SUPPORT);",
          "1174:    args.sDacload.usDeviceID = cpu_to_le16(ATOM_DEVICE_CRT2_SUPPORT);",
          "1176:    args.sDacload.usDeviceID = cpu_to_le16(ATOM_DEVICE_CV_SUPPORT);",
          "1177:    if (crev >= 3)",
          "1178:     args.sDacload.ucMisc = DAC_LOAD_MISC_YPrPb;",
          "1180:    args.sDacload.usDeviceID = cpu_to_le16(ATOM_DEVICE_TV1_SUPPORT);",
          "1181:    if (crev >= 3)",
          "1182:     args.sDacload.ucMisc = DAC_LOAD_MISC_YPrPb;",
          "",
          "[Removed Lines]",
          "1171:   if (radeon_encoder->devices & ATOM_DEVICE_CRT1_SUPPORT)",
          "1173:   else if (radeon_encoder->devices & ATOM_DEVICE_CRT2_SUPPORT)",
          "1175:   else if (radeon_encoder->devices & ATOM_DEVICE_CV_SUPPORT) {",
          "1179:   } else if (radeon_encoder->devices & ATOM_DEVICE_TV1_SUPPORT) {",
          "",
          "[Added Lines]",
          "1199:   if (radeon_connector->devices & ATOM_DEVICE_CRT1_SUPPORT)",
          "1201:   else if (radeon_connector->devices & ATOM_DEVICE_CRT2_SUPPORT)",
          "1203:   else if (radeon_connector->devices & ATOM_DEVICE_CV_SUPPORT) {",
          "1207:   } else if (radeon_connector->devices & ATOM_DEVICE_TV1_SUPPORT) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1195:  struct drm_device *dev = encoder->dev;",
          "1196:  struct radeon_device *rdev = dev->dev_private;",
          "1197:  struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "1198:  uint32_t bios_0_scratch;",
          "1201:   DRM_DEBUG(\"detect returned false \\n\");",
          "1202:   return connector_status_unknown;",
          "1203:  }",
          "",
          "[Removed Lines]",
          "1200:  if (!atombios_dac_load_detect(encoder)) {",
          "",
          "[Added Lines]",
          "1226:  struct radeon_connector *radeon_connector = to_radeon_connector(connector);",
          "1229:  if (!atombios_dac_load_detect(encoder, connector)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1207:  else",
          "1208:   bios_0_scratch = RREG32(RADEON_BIOS_0_SCRATCH);",
          "1212:   if (bios_0_scratch & ATOM_S0_CRT1_MASK)",
          "1213:    return connector_status_connected;",
          "1215:   if (bios_0_scratch & ATOM_S0_CRT2_MASK)",
          "1216:    return connector_status_connected;",
          "1218:   if (bios_0_scratch & (ATOM_S0_CV_MASK|ATOM_S0_CV_MASK_A))",
          "1219:    return connector_status_connected;",
          "1221:   if (bios_0_scratch & (ATOM_S0_TV1_COMPOSITE | ATOM_S0_TV1_COMPOSITE_A))",
          "1223:   else if (bios_0_scratch & (ATOM_S0_TV1_SVIDEO | ATOM_S0_TV1_SVIDEO_A))",
          "",
          "[Removed Lines]",
          "1210:  DRM_DEBUG(\"Bios 0 scratch %x\\n\", bios_0_scratch);",
          "1211:  if (radeon_encoder->devices & ATOM_DEVICE_CRT1_SUPPORT) {",
          "1214:  } else if (radeon_encoder->devices & ATOM_DEVICE_CRT2_SUPPORT) {",
          "1217:  } else if (radeon_encoder->devices & ATOM_DEVICE_CV_SUPPORT) {",
          "1220:  } else if (radeon_encoder->devices & ATOM_DEVICE_TV1_SUPPORT) {",
          "",
          "[Added Lines]",
          "1239:  DRM_DEBUG(\"Bios 0 scratch %x %08x\\n\", bios_0_scratch, radeon_encoder->devices);",
          "1240:  if (radeon_connector->devices & ATOM_DEVICE_CRT1_SUPPORT) {",
          "1243:  }",
          "1244:  if (radeon_connector->devices & ATOM_DEVICE_CRT2_SUPPORT) {",
          "1247:  }",
          "1248:  if (radeon_connector->devices & ATOM_DEVICE_CV_SUPPORT) {",
          "1251:  }",
          "1252:  if (radeon_connector->devices & ATOM_DEVICE_TV1_SUPPORT) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1230: {",
          "1231:  radeon_atom_output_lock(encoder, true);",
          "1232:  radeon_atom_encoder_dpms(encoder, DRM_MODE_DPMS_OFF);",
          "1233: }",
          "1235: static void radeon_atom_encoder_commit(struct drm_encoder *encoder)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1266:  radeon_encoder_set_active_device(encoder);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1238:  radeon_atom_output_lock(encoder, false);",
          "1239: }",
          "1241: static const struct drm_encoder_helper_funcs radeon_atom_dig_helper_funcs = {",
          "1242:  .dpms = radeon_atom_encoder_dpms,",
          "1243:  .mode_fixup = radeon_atom_mode_fixup,",
          "1244:  .prepare = radeon_atom_encoder_prepare,",
          "1245:  .mode_set = radeon_atom_encoder_mode_set,",
          "1246:  .commit = radeon_atom_encoder_commit,",
          "1248: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1275: static void radeon_atom_encoder_disable(struct drm_encoder *encoder)",
          "1276: {",
          "1277:  struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "1278:  radeon_atom_encoder_dpms(encoder, DRM_MODE_DPMS_OFF);",
          "1279:  DRM_INFO(\"setting active device to 0 for encoder %d\\n\", encoder->encoder_type);",
          "1280:  radeon_encoder->active_device = 0;",
          "1281: }",
          "1289:  .disable = radeon_atom_encoder_disable,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1268:  .destroy = radeon_enc_destroy,",
          "1269: };",
          "1271: struct radeon_encoder_atom_dig *",
          "1272: radeon_atombios_set_dig_info(struct radeon_encoder *radeon_encoder)",
          "1273: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1314: struct radeon_encoder_atom_dac *",
          "1315: radeon_atombios_set_dac_info(struct radeon_encoder *radeon_encoder)",
          "1316: {",
          "1317:  struct radeon_encoder_atom_dac *dac = kzalloc(sizeof(struct radeon_encoder_atom_dac), GFP_KERNEL);",
          "1319:  if (!dac)",
          "1320:   return NULL;",
          "1322:  dac->tv_std = TV_STD_NTSC;",
          "1323:  return dac;",
          "1324: }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1336:  case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC1:",
          "1337:  case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC2:",
          "1338:   drm_encoder_init(dev, encoder, &radeon_atom_enc_funcs, DRM_MODE_ENCODER_TVDAC);",
          "1339:   drm_encoder_helper_add(encoder, &radeon_atom_dac_helper_funcs);",
          "1340:   break;",
          "1341:  case ENCODER_OBJECT_ID_INTERNAL_DVO1:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1394:   radeon_encoder->enc_priv = radeon_atombios_set_dac_info(radeon_encoder);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/radeon/radeon_legacy_crtc.c||drivers/gpu/drm/radeon/radeon_legacy_crtc.c": [
          "File: drivers/gpu/drm/radeon/radeon_legacy_crtc.c -> drivers/gpu/drm/radeon/radeon_legacy_crtc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <drm/radeon_drm.h>",
          "29: #include \"radeon_fixed.h\"",
          "30: #include \"radeon.h\"",
          "32: static void radeon_legacy_rmx_mode_set(struct drm_crtc *crtc,",
          "33:            struct drm_display_mode *mode,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include \"atom.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "501:  struct drm_device *dev = crtc->dev;",
          "502:  struct radeon_device *rdev = dev->dev_private;",
          "503:  struct radeon_crtc *radeon_crtc = to_radeon_crtc(crtc);",
          "504:  int format;",
          "505:  int hsync_start;",
          "506:  int hsync_wid;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "505:  struct drm_encoder *encoder;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "509:  uint32_t crtc_h_sync_strt_wid;",
          "510:  uint32_t crtc_v_total_disp;",
          "511:  uint32_t crtc_v_sync_strt_wid;",
          "513:  DRM_DEBUG(\"\\n\");",
          "515:  switch (crtc->fb->bits_per_pixel) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514:  bool is_tv = false;",
          "517:  list_for_each_entry(encoder, &dev->mode_config.encoder_list, head) {",
          "518:   if (encoder->crtc == crtc) {",
          "519:    struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "520:    if (radeon_encoder->active_device & ATOM_DEVICE_TV_SUPPORT) {",
          "521:     is_tv = true;",
          "522:     DRM_INFO(\"crtc %d is connected to a TV\\n\", radeon_crtc->crtc_id);",
          "523:     break;",
          "524:    }",
          "525:   }",
          "526:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "642:   WREG32(RADEON_CRTC_EXT_CNTL, crtc_ext_cntl);",
          "643:  }",
          "645:  WREG32(RADEON_CRTC_H_TOTAL_DISP + radeon_crtc->crtc_offset, crtc_h_total_disp);",
          "646:  WREG32(RADEON_CRTC_H_SYNC_STRT_WID + radeon_crtc->crtc_offset, crtc_h_sync_strt_wid);",
          "647:  WREG32(RADEON_CRTC_V_TOTAL_DISP + radeon_crtc->crtc_offset, crtc_v_total_disp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "658:  if (is_tv)",
          "659:   radeon_legacy_tv_adjust_crtc_reg(encoder, &crtc_h_total_disp,",
          "660:        &crtc_h_sync_strt_wid, &crtc_v_total_disp,",
          "661:        &crtc_v_sync_strt_wid);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "668:  uint32_t pll_ref_div = 0;",
          "669:  uint32_t pll_fb_post_div = 0;",
          "670:  uint32_t htotal_cntl = 0;",
          "672:  struct radeon_pll *pll;",
          "674:  struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "689:  bool is_tv = false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "704:  list_for_each_entry(encoder, &dev->mode_config.encoder_list, head) {",
          "705:   if (encoder->crtc == crtc) {",
          "706:    if (encoder->encoder_type != DRM_MODE_ENCODER_DAC)",
          "707:     pll_flags |= RADEON_PLL_NO_ODD_POST_DIV;",
          "708:    if (encoder->encoder_type == DRM_MODE_ENCODER_LVDS) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "724:    struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "726:    if (radeon_encoder->active_device & ATOM_DEVICE_TV_SUPPORT) {",
          "727:     is_tv = true;",
          "728:     break;",
          "729:    }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "766:        ~(RADEON_PIX2CLK_SRC_SEL_MASK)) |",
          "767:       RADEON_PIX2CLK_SRC_SEL_P2PLLCLK);",
          "769:   WREG32_PLL_P(RADEON_PIXCLKS_CNTL,",
          "770:         RADEON_PIX2CLK_SRC_SEL_CPUCLK,",
          "771:         ~(RADEON_PIX2CLK_SRC_SEL_MASK));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "794:   if (is_tv) {",
          "795:    radeon_legacy_tv_adjust_pll2(encoder, &htotal_cntl,",
          "796:            &pll_ref_div, &pll_fb_post_div,",
          "797:            &pixclks_cntl);",
          "798:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "821:   WREG32_PLL(RADEON_PIXCLKS_CNTL, pixclks_cntl);",
          "822:  } else {",
          "823:   if (rdev->flags & RADEON_IS_MOBILITY) {",
          "825:       This appears to related to the PLL divider registers (fail to lock?).",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "854:   uint32_t pixclks_cntl;",
          "857:   if (is_tv) {",
          "858:    pixclks_cntl = RREG32_PLL(RADEON_PIXCLKS_CNTL);",
          "859:    radeon_legacy_tv_adjust_pll1(encoder, &htotal_cntl, &pll_ref_div,",
          "860:            &pll_fb_post_div, &pixclks_cntl);",
          "861:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "914:         RADEON_VCLK_SRC_SEL_PPLLCLK,",
          "915:         ~(RADEON_VCLK_SRC_SEL_MASK));",
          "917:  }",
          "918: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "957:   if (is_tv)",
          "958:    WREG32_PLL(RADEON_PIXCLKS_CNTL, pixclks_cntl);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/radeon/radeon_legacy_encoders.c||drivers/gpu/drm/radeon/radeon_legacy_encoders.c": [
          "File: drivers/gpu/drm/radeon/radeon_legacy_encoders.c -> drivers/gpu/drm/radeon/radeon_legacy_encoders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"radeon.h\"",
          "30: #include \"atom.h\"",
          "33: static void radeon_legacy_lvds_dpms(struct drm_encoder *encoder, int mode)",
          "34: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: static void radeon_legacy_encoder_disable(struct drm_encoder *encoder)",
          "33: {",
          "34:  struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "35:  struct drm_encoder_helper_funcs *encoder_funcs;",
          "37:  encoder_funcs = encoder->helper_private;",
          "38:  encoder_funcs->dpms(encoder, DRM_MODE_DPMS_OFF);",
          "39:  radeon_encoder->active_device = 0;",
          "40: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  else",
          "99:   radeon_combios_output_lock(encoder, true);",
          "100:  radeon_legacy_lvds_dpms(encoder, DRM_MODE_DPMS_OFF);",
          "101: }",
          "103: static void radeon_legacy_lvds_commit(struct drm_encoder *encoder)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:  radeon_encoder_set_active_device(encoder);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:  .prepare = radeon_legacy_lvds_prepare,",
          "196:  .mode_set = radeon_legacy_lvds_mode_set,",
          "197:  .commit = radeon_legacy_lvds_commit,",
          "198: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:  .disable = radeon_legacy_encoder_disable,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "260:  else",
          "261:   radeon_combios_output_lock(encoder, true);",
          "262:  radeon_legacy_primary_dac_dpms(encoder, DRM_MODE_DPMS_OFF);",
          "263: }",
          "265: static void radeon_legacy_primary_dac_commit(struct drm_encoder *encoder)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:  radeon_encoder_set_active_device(encoder);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "402:  .mode_set = radeon_legacy_primary_dac_mode_set,",
          "403:  .commit = radeon_legacy_primary_dac_commit,",
          "404:  .detect = radeon_legacy_primary_dac_detect,",
          "405: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:  .disable = radeon_legacy_encoder_disable,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "454:  else",
          "455:   radeon_combios_output_lock(encoder, true);",
          "456:  radeon_legacy_tmds_int_dpms(encoder, DRM_MODE_DPMS_OFF);",
          "457: }",
          "459: static void radeon_legacy_tmds_int_commit(struct drm_encoder *encoder)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471:  radeon_encoder_set_active_device(encoder);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "566:  .prepare = radeon_legacy_tmds_int_prepare,",
          "567:  .mode_set = radeon_legacy_tmds_int_mode_set,",
          "568:  .commit = radeon_legacy_tmds_int_commit,",
          "569: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584:  .disable = radeon_legacy_encoder_disable,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "620:  else",
          "621:   radeon_combios_output_lock(encoder, true);",
          "622:  radeon_legacy_tmds_ext_dpms(encoder, DRM_MODE_DPMS_OFF);",
          "623: }",
          "625: static void radeon_legacy_tmds_ext_commit(struct drm_encoder *encoder)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "639:  radeon_encoder_set_active_device(encoder);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "706:  .prepare = radeon_legacy_tmds_ext_prepare,",
          "707:  .mode_set = radeon_legacy_tmds_ext_mode_set,",
          "708:  .commit = radeon_legacy_tmds_ext_commit,",
          "709: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "726:  .disable = radeon_legacy_encoder_disable,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "727: {",
          "728:  struct drm_device *dev = encoder->dev;",
          "729:  struct radeon_device *rdev = dev->dev_private;",
          "730:  uint32_t fp2_gen_cntl = 0, crtc2_gen_cntl = 0, tv_dac_cntl = 0;",
          "733:  DRM_DEBUG(\"\\n\");",
          "735:  if (rdev->family == CHIP_R200)",
          "736:   fp2_gen_cntl = RREG32(RADEON_FP2_GEN_CNTL);",
          "737:  else {",
          "741:   tv_dac_cntl = RREG32(RADEON_TV_DAC_CNTL);",
          "742:  }",
          "",
          "[Removed Lines]",
          "738:   crtc2_gen_cntl = RREG32(RADEON_CRTC2_GEN_CNTL);",
          "",
          "[Added Lines]",
          "748:  struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "750:  uint32_t tv_master_cntl = 0;",
          "751:  bool is_tv;",
          "754:  is_tv = radeon_encoder->active_device & ATOM_DEVICE_TV_SUPPORT ? true : false;",
          "759:   if (is_tv)",
          "760:    tv_master_cntl = RREG32(RADEON_TV_MASTER_CNTL);",
          "761:   else",
          "762:    crtc2_gen_cntl = RREG32(RADEON_CRTC2_GEN_CNTL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "746:   if (rdev->family == CHIP_R200) {",
          "747:    fp2_gen_cntl |= (RADEON_FP2_ON | RADEON_FP2_DVO_EN);",
          "748:   } else {",
          "751:    if (rdev->family == CHIP_R420 ||",
          "754:     tv_dac_cntl &= ~(R420_TV_DAC_RDACPD |",
          "758:    else",
          "759:     tv_dac_cntl &= ~(RADEON_TV_DAC_RDACPD |",
          "763:   }",
          "764:   break;",
          "765:  case DRM_MODE_DPMS_STANDBY:",
          "",
          "[Removed Lines]",
          "749:    crtc2_gen_cntl |= RADEON_CRTC2_CRT2_ON;",
          "752:      rdev->family == CHIP_R423 ||",
          "753:      rdev->family == CHIP_RV410)",
          "755:       R420_TV_DAC_GDACPD |",
          "756:       R420_TV_DAC_BDACPD |",
          "757:       RADEON_TV_DAC_BGSLEEP);",
          "760:       RADEON_TV_DAC_GDACPD |",
          "761:       RADEON_TV_DAC_BDACPD |",
          "762:       RADEON_TV_DAC_BGSLEEP);",
          "",
          "[Added Lines]",
          "771:    if (is_tv)",
          "772:     tv_master_cntl |= RADEON_TV_ON;",
          "773:    else",
          "774:     crtc2_gen_cntl |= RADEON_CRTC2_CRT2_ON;",
          "777:        rdev->family == CHIP_R423 ||",
          "778:        rdev->family == CHIP_RV410)",
          "780:        R420_TV_DAC_GDACPD |",
          "781:        R420_TV_DAC_BDACPD |",
          "782:        RADEON_TV_DAC_BGSLEEP);",
          "785:        RADEON_TV_DAC_GDACPD |",
          "786:        RADEON_TV_DAC_BDACPD |",
          "787:        RADEON_TV_DAC_BGSLEEP);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "768:   if (rdev->family == CHIP_R200)",
          "769:    fp2_gen_cntl &= ~(RADEON_FP2_ON | RADEON_FP2_DVO_EN);",
          "770:   else {",
          "773:    if (rdev->family == CHIP_R420 ||",
          "774:      rdev->family == CHIP_R423 ||",
          "775:      rdev->family == CHIP_RV410)",
          "",
          "[Removed Lines]",
          "771:    crtc2_gen_cntl &= ~RADEON_CRTC2_CRT2_ON;",
          "",
          "[Added Lines]",
          "796:    if (is_tv)",
          "797:     tv_master_cntl &= ~RADEON_TV_ON;",
          "798:    else",
          "799:     crtc2_gen_cntl &= ~RADEON_CRTC2_CRT2_ON;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "789:  if (rdev->family == CHIP_R200) {",
          "790:   WREG32(RADEON_FP2_GEN_CNTL, fp2_gen_cntl);",
          "791:  } else {",
          "794:   WREG32(RADEON_TV_DAC_CNTL, tv_dac_cntl);",
          "795:  }",
          "",
          "[Removed Lines]",
          "792:   WREG32(RADEON_CRTC2_GEN_CNTL, crtc2_gen_cntl);",
          "",
          "[Added Lines]",
          "820:   if (is_tv)",
          "821:    WREG32(RADEON_TV_MASTER_CNTL, tv_master_cntl);",
          "822:   else",
          "823:    WREG32(RADEON_CRTC2_GEN_CNTL, crtc2_gen_cntl);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "809:  else",
          "810:   radeon_combios_output_lock(encoder, true);",
          "811:  radeon_legacy_tv_dac_dpms(encoder, DRM_MODE_DPMS_OFF);",
          "812: }",
          "814: static void radeon_legacy_tv_dac_commit(struct drm_encoder *encoder)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "842:  radeon_encoder_set_active_device(encoder);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "831:  struct radeon_device *rdev = dev->dev_private;",
          "832:  struct radeon_crtc *radeon_crtc = to_radeon_crtc(encoder->crtc);",
          "833:  struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "834:  uint32_t tv_dac_cntl, gpiopad_a = 0, dac2_cntl, disp_output_cntl = 0;",
          "837:  DRM_DEBUG(\"\\n\");",
          "839:  if (rdev->family != CHIP_R200) {",
          "840:   tv_dac_cntl = RREG32(RADEON_TV_DAC_CNTL);",
          "841:   if (rdev->family == CHIP_R420 ||",
          "",
          "[Removed Lines]",
          "835:  uint32_t disp_hw_debug = 0, fp2_gen_cntl = 0;",
          "",
          "[Added Lines]",
          "865:  struct radeon_encoder_tv_dac *tv_dac = radeon_encoder->enc_priv;",
          "867:  uint32_t disp_hw_debug = 0, fp2_gen_cntl = 0, disp_tv_out_cntl = 0;",
          "868:  bool is_tv = false;",
          "872:  is_tv = radeon_encoder->active_device & ATOM_DEVICE_TV_SUPPORT ? true : false;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "858:   }",
          "862:    struct radeon_encoder_tv_dac *tv_dac = radeon_encoder->enc_priv;",
          "863:    tv_dac_cntl |= (RADEON_TV_DAC_NBLANK |",
          "864:      RADEON_TV_DAC_NHOLD |",
          "",
          "[Removed Lines]",
          "861:   if (radeon_encoder->enc_priv) {",
          "",
          "[Added Lines]",
          "896:   if (tv_dac) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "875:  if (ASIC_IS_R300(rdev)) {",
          "876:   gpiopad_a = RREG32(RADEON_GPIOPAD_A) | 1;",
          "877:   disp_output_cntl = RREG32(RADEON_DISP_OUTPUT_CNTL);",
          "880:  else",
          "881:   disp_hw_debug = RREG32(RADEON_DISP_HW_DEBUG);",
          "894:  } else {",
          "908:  if (ASIC_IS_R300(rdev)) {",
          "909:   WREG32_P(RADEON_GPIOPAD_A, gpiopad_a, ~1);",
          "913:  else",
          "914:   WREG32(RADEON_DISP_HW_DEBUG, disp_hw_debug);",
          "916:  if (rdev->is_atom_bios)",
          "917:   radeon_atombios_encoder_crtc_scratch_regs(encoder, radeon_crtc->crtc_id);",
          "918:  else",
          "",
          "[Removed Lines]",
          "878:  } else if (rdev->family == CHIP_R200)",
          "879:   fp2_gen_cntl = RREG32(RADEON_FP2_GEN_CNTL);",
          "883:  dac2_cntl = RREG32(RADEON_DAC_CNTL2) | RADEON_DAC2_DAC2_CLK_SEL;",
          "885:  if (radeon_crtc->crtc_id == 0) {",
          "886:   if (ASIC_IS_R300(rdev)) {",
          "887:    disp_output_cntl &= ~RADEON_DISP_TVDAC_SOURCE_MASK;",
          "888:    disp_output_cntl |= RADEON_DISP_TVDAC_SOURCE_CRTC;",
          "889:   } else if (rdev->family == CHIP_R200) {",
          "890:    fp2_gen_cntl &= ~(R200_FP2_SOURCE_SEL_MASK |",
          "891:        RADEON_FP2_DVO_RATE_SEL_SDR);",
          "892:   } else",
          "893:    disp_hw_debug |= RADEON_CRT2_DISP1_SEL;",
          "895:   if (ASIC_IS_R300(rdev)) {",
          "896:    disp_output_cntl &= ~RADEON_DISP_TVDAC_SOURCE_MASK;",
          "897:    disp_output_cntl |= RADEON_DISP_TVDAC_SOURCE_CRTC2;",
          "898:   } else if (rdev->family == CHIP_R200) {",
          "899:    fp2_gen_cntl &= ~(R200_FP2_SOURCE_SEL_MASK |",
          "900:        RADEON_FP2_DVO_RATE_SEL_SDR);",
          "901:    fp2_gen_cntl |= R200_FP2_SOURCE_SEL_CRTC2;",
          "902:   } else",
          "903:    disp_hw_debug &= ~RADEON_CRT2_DISP1_SEL;",
          "904:  }",
          "906:  WREG32(RADEON_DAC_CNTL2, dac2_cntl);",
          "910:   WREG32(RADEON_DISP_TV_OUT_CNTL, disp_output_cntl);",
          "911:  } else if (rdev->family == CHIP_R200)",
          "912:   WREG32(RADEON_FP2_GEN_CNTL, fp2_gen_cntl);",
          "",
          "[Added Lines]",
          "913:  }",
          "915:  if (rdev->family == CHIP_R200 || ASIC_IS_R300(rdev))",
          "916:   disp_tv_out_cntl = RREG32(RADEON_DISP_TV_OUT_CNTL);",
          "920:  if (rdev->family == CHIP_R200)",
          "921:   fp2_gen_cntl = RREG32(RADEON_FP2_GEN_CNTL);",
          "923:  if (is_tv) {",
          "924:   uint32_t dac_cntl;",
          "926:   dac_cntl = RREG32(RADEON_DAC_CNTL);",
          "927:   dac_cntl &= ~RADEON_DAC_TVO_EN;",
          "928:   WREG32(RADEON_DAC_CNTL, dac_cntl);",
          "930:   if (ASIC_IS_R300(rdev))",
          "931:    gpiopad_a = RREG32(RADEON_GPIOPAD_A) & ~1;",
          "933:   dac2_cntl = RREG32(RADEON_DAC_CNTL2) & ~RADEON_DAC2_DAC2_CLK_SEL;",
          "934:   if (radeon_crtc->crtc_id == 0) {",
          "935:    if (ASIC_IS_R300(rdev)) {",
          "936:     disp_output_cntl &= ~RADEON_DISP_TVDAC_SOURCE_MASK;",
          "937:     disp_output_cntl |= (RADEON_DISP_TVDAC_SOURCE_CRTC |",
          "938:            RADEON_DISP_TV_SOURCE_CRTC);",
          "939:    }",
          "940:    if (rdev->family >= CHIP_R200) {",
          "941:     disp_tv_out_cntl &= ~RADEON_DISP_TV_PATH_SRC_CRTC2;",
          "942:    } else {",
          "943:     disp_hw_debug |= RADEON_CRT2_DISP1_SEL;",
          "944:    }",
          "945:   } else {",
          "946:    if (ASIC_IS_R300(rdev)) {",
          "947:     disp_output_cntl &= ~RADEON_DISP_TVDAC_SOURCE_MASK;",
          "948:     disp_output_cntl |= RADEON_DISP_TV_SOURCE_CRTC;",
          "949:    }",
          "950:    if (rdev->family >= CHIP_R200) {",
          "951:     disp_tv_out_cntl |= RADEON_DISP_TV_PATH_SRC_CRTC2;",
          "952:    } else {",
          "953:     disp_hw_debug &= ~RADEON_CRT2_DISP1_SEL;",
          "954:    }",
          "955:   }",
          "956:   WREG32(RADEON_DAC_CNTL2, dac2_cntl);",
          "959:   dac2_cntl = RREG32(RADEON_DAC_CNTL2) | RADEON_DAC2_DAC2_CLK_SEL;",
          "961:   if (radeon_crtc->crtc_id == 0) {",
          "962:    if (ASIC_IS_R300(rdev)) {",
          "963:     disp_output_cntl &= ~RADEON_DISP_TVDAC_SOURCE_MASK;",
          "964:     disp_output_cntl |= RADEON_DISP_TVDAC_SOURCE_CRTC;",
          "965:    } else if (rdev->family == CHIP_R200) {",
          "966:     fp2_gen_cntl &= ~(R200_FP2_SOURCE_SEL_MASK |",
          "967:         RADEON_FP2_DVO_RATE_SEL_SDR);",
          "968:    } else",
          "969:     disp_hw_debug |= RADEON_CRT2_DISP1_SEL;",
          "970:   } else {",
          "971:    if (ASIC_IS_R300(rdev)) {",
          "972:     disp_output_cntl &= ~RADEON_DISP_TVDAC_SOURCE_MASK;",
          "973:     disp_output_cntl |= RADEON_DISP_TVDAC_SOURCE_CRTC2;",
          "974:    } else if (rdev->family == CHIP_R200) {",
          "975:     fp2_gen_cntl &= ~(R200_FP2_SOURCE_SEL_MASK |",
          "976:         RADEON_FP2_DVO_RATE_SEL_SDR);",
          "977:     fp2_gen_cntl |= R200_FP2_SOURCE_SEL_CRTC2;",
          "978:    } else",
          "979:     disp_hw_debug &= ~RADEON_CRT2_DISP1_SEL;",
          "980:   }",
          "981:   WREG32(RADEON_DAC_CNTL2, dac2_cntl);",
          "982:  }",
          "986:   WREG32(RADEON_DISP_OUTPUT_CNTL, disp_output_cntl);",
          "987:  }",
          "989:  if (rdev->family >= CHIP_R200)",
          "990:   WREG32(RADEON_DISP_TV_OUT_CNTL, disp_tv_out_cntl);",
          "994:  if (rdev->family == CHIP_R200)",
          "995:   WREG32(RADEON_FP2_GEN_CNTL, fp2_gen_cntl);",
          "997:  if (is_tv)",
          "998:   radeon_legacy_tv_mode_set(encoder, mode, adjusted_mode);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "921: }",
          "923: static enum drm_connector_status radeon_legacy_tv_dac_detect(struct drm_encoder *encoder,",
          "924:             struct drm_connector *connector)",
          "925: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1007: static bool r300_legacy_tv_detect(struct drm_encoder *encoder,",
          "1008:       struct drm_connector *connector)",
          "1009: {",
          "1010:  struct drm_device *dev = encoder->dev;",
          "1011:  struct radeon_device *rdev = dev->dev_private;",
          "1012:  uint32_t crtc2_gen_cntl, tv_dac_cntl, dac_cntl2, dac_ext_cntl;",
          "1013:  uint32_t disp_output_cntl, gpiopad_a, tmp;",
          "1014:  bool found = false;",
          "1017:  gpiopad_a = RREG32(RADEON_GPIOPAD_A);",
          "1018:  dac_cntl2 = RREG32(RADEON_DAC_CNTL2);",
          "1019:  crtc2_gen_cntl = RREG32(RADEON_CRTC2_GEN_CNTL);",
          "1020:  dac_ext_cntl = RREG32(RADEON_DAC_EXT_CNTL);",
          "1021:  tv_dac_cntl = RREG32(RADEON_TV_DAC_CNTL);",
          "1022:  disp_output_cntl = RREG32(RADEON_DISP_OUTPUT_CNTL);",
          "1024:  WREG32_P(RADEON_GPIOPAD_A, 0, ~1);",
          "1026:  WREG32(RADEON_DAC_CNTL2, RADEON_DAC2_DAC2_CLK_SEL);",
          "1028:  WREG32(RADEON_CRTC2_GEN_CNTL,",
          "1029:         RADEON_CRTC2_CRT2_ON | RADEON_CRTC2_VSYNC_TRISTAT);",
          "1031:  tmp = disp_output_cntl & ~RADEON_DISP_TVDAC_SOURCE_MASK;",
          "1032:  tmp |= RADEON_DISP_TVDAC_SOURCE_CRTC2;",
          "1033:  WREG32(RADEON_DISP_OUTPUT_CNTL, tmp);",
          "1035:  WREG32(RADEON_DAC_EXT_CNTL,",
          "1036:         RADEON_DAC2_FORCE_BLANK_OFF_EN |",
          "1037:         RADEON_DAC2_FORCE_DATA_EN |",
          "1038:         RADEON_DAC_FORCE_DATA_SEL_RGB |",
          "1039:         (0xec << RADEON_DAC_FORCE_DATA_SHIFT));",
          "1041:  WREG32(RADEON_TV_DAC_CNTL,",
          "1042:         RADEON_TV_DAC_STD_NTSC |",
          "1043:         (8 << RADEON_TV_DAC_BGADJ_SHIFT) |",
          "1044:         (6 << RADEON_TV_DAC_DACADJ_SHIFT));",
          "1046:  RREG32(RADEON_TV_DAC_CNTL);",
          "1047:  mdelay(4);",
          "1049:  WREG32(RADEON_TV_DAC_CNTL,",
          "1050:         RADEON_TV_DAC_NBLANK |",
          "1051:         RADEON_TV_DAC_NHOLD |",
          "1052:         RADEON_TV_MONITOR_DETECT_EN |",
          "1053:         RADEON_TV_DAC_STD_NTSC |",
          "1054:         (8 << RADEON_TV_DAC_BGADJ_SHIFT) |",
          "1055:         (6 << RADEON_TV_DAC_DACADJ_SHIFT));",
          "1057:  RREG32(RADEON_TV_DAC_CNTL);",
          "1058:  mdelay(6);",
          "1060:  tmp = RREG32(RADEON_TV_DAC_CNTL);",
          "1061:  if ((tmp & RADEON_TV_DAC_GDACDET) != 0) {",
          "1062:   found = true;",
          "1063:   DRM_DEBUG(\"S-video TV connection detected\\n\");",
          "1064:  } else if ((tmp & RADEON_TV_DAC_BDACDET) != 0) {",
          "1065:   found = true;",
          "1066:   DRM_DEBUG(\"Composite TV connection detected\\n\");",
          "1067:  }",
          "1069:  WREG32(RADEON_TV_DAC_CNTL, tv_dac_cntl);",
          "1070:  WREG32(RADEON_DAC_EXT_CNTL, dac_ext_cntl);",
          "1071:  WREG32(RADEON_CRTC2_GEN_CNTL, crtc2_gen_cntl);",
          "1072:  WREG32(RADEON_DISP_OUTPUT_CNTL, disp_output_cntl);",
          "1073:  WREG32(RADEON_DAC_CNTL2, dac_cntl2);",
          "1074:  WREG32_P(RADEON_GPIOPAD_A, gpiopad_a, ~1);",
          "1075:  return found;",
          "1076: }",
          "1078: static bool radeon_legacy_tv_detect(struct drm_encoder *encoder,",
          "1079:         struct drm_connector *connector)",
          "1080: {",
          "1081:  struct drm_device *dev = encoder->dev;",
          "1082:  struct radeon_device *rdev = dev->dev_private;",
          "1083:  uint32_t tv_dac_cntl, dac_cntl2;",
          "1084:  uint32_t config_cntl, tv_pre_dac_mux_cntl, tv_master_cntl, tmp;",
          "1085:  bool found = false;",
          "1087:  if (ASIC_IS_R300(rdev))",
          "1088:   return r300_legacy_tv_detect(encoder, connector);",
          "1090:  dac_cntl2 = RREG32(RADEON_DAC_CNTL2);",
          "1091:  tv_master_cntl = RREG32(RADEON_TV_MASTER_CNTL);",
          "1092:  tv_dac_cntl = RREG32(RADEON_TV_DAC_CNTL);",
          "1093:  config_cntl = RREG32(RADEON_CONFIG_CNTL);",
          "1094:  tv_pre_dac_mux_cntl = RREG32(RADEON_TV_PRE_DAC_MUX_CNTL);",
          "1096:  tmp = dac_cntl2 & ~RADEON_DAC2_DAC2_CLK_SEL;",
          "1097:  WREG32(RADEON_DAC_CNTL2, tmp);",
          "1099:  tmp = tv_master_cntl | RADEON_TV_ON;",
          "1100:  tmp &= ~(RADEON_TV_ASYNC_RST |",
          "1101:    RADEON_RESTART_PHASE_FIX |",
          "1102:    RADEON_CRT_FIFO_CE_EN |",
          "1103:    RADEON_TV_FIFO_CE_EN |",
          "1104:    RADEON_RE_SYNC_NOW_SEL_MASK);",
          "1105:  tmp |= RADEON_TV_FIFO_ASYNC_RST | RADEON_CRT_ASYNC_RST;",
          "1106:  WREG32(RADEON_TV_MASTER_CNTL, tmp);",
          "1108:  tmp = RADEON_TV_DAC_NBLANK | RADEON_TV_DAC_NHOLD |",
          "1109:   RADEON_TV_MONITOR_DETECT_EN | RADEON_TV_DAC_STD_NTSC |",
          "1110:   (8 << RADEON_TV_DAC_BGADJ_SHIFT);",
          "1112:  if (config_cntl & RADEON_CFG_ATI_REV_ID_MASK)",
          "1113:   tmp |= (4 << RADEON_TV_DAC_DACADJ_SHIFT);",
          "1114:  else",
          "1115:   tmp |= (8 << RADEON_TV_DAC_DACADJ_SHIFT);",
          "1116:  WREG32(RADEON_TV_DAC_CNTL, tmp);",
          "1118:  tmp = RADEON_C_GRN_EN | RADEON_CMP_BLU_EN |",
          "1119:   RADEON_RED_MX_FORCE_DAC_DATA |",
          "1120:   RADEON_GRN_MX_FORCE_DAC_DATA |",
          "1121:   RADEON_BLU_MX_FORCE_DAC_DATA |",
          "1122:   (0x109 << RADEON_TV_FORCE_DAC_DATA_SHIFT);",
          "1123:  WREG32(RADEON_TV_PRE_DAC_MUX_CNTL, tmp);",
          "1125:  mdelay(3);",
          "1126:  tmp = RREG32(RADEON_TV_DAC_CNTL);",
          "1127:  if (tmp & RADEON_TV_DAC_GDACDET) {",
          "1128:   found = true;",
          "1129:   DRM_DEBUG(\"S-video TV connection detected\\n\");",
          "1130:  } else if ((tmp & RADEON_TV_DAC_BDACDET) != 0) {",
          "1131:   found = true;",
          "1132:   DRM_DEBUG(\"Composite TV connection detected\\n\");",
          "1133:  }",
          "1135:  WREG32(RADEON_TV_PRE_DAC_MUX_CNTL, tv_pre_dac_mux_cntl);",
          "1136:  WREG32(RADEON_TV_DAC_CNTL, tv_dac_cntl);",
          "1137:  WREG32(RADEON_TV_MASTER_CNTL, tv_master_cntl);",
          "1138:  WREG32(RADEON_DAC_CNTL2, dac_cntl2);",
          "1139:  return found;",
          "1140: }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "928:  uint32_t crtc2_gen_cntl, tv_dac_cntl, dac_cntl2, dac_ext_cntl;",
          "929:  uint32_t disp_hw_debug, disp_output_cntl, gpiopad_a, pixclks_cntl, tmp;",
          "930:  enum drm_connector_status found = connector_status_disconnected;",
          "931:  bool color = true;",
          "936:  pixclks_cntl = RREG32_PLL(RADEON_PIXCLKS_CNTL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1150:  struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "1151:  struct radeon_encoder_tv_dac *tv_dac = radeon_encoder->enc_priv;",
          "1154:  if (connector->connector_type == DRM_MODE_CONNECTOR_SVIDEO ||",
          "1155:      connector->connector_type == DRM_MODE_CONNECTOR_Composite ||",
          "1156:      connector->connector_type == DRM_MODE_CONNECTOR_9PinDIN) {",
          "1157:   bool tv_detect;",
          "1159:   if (radeon_encoder->active_device && !(radeon_encoder->active_device & ATOM_DEVICE_TV_SUPPORT))",
          "1160:    return connector_status_disconnected;",
          "1162:   tv_detect = radeon_legacy_tv_detect(encoder, connector);",
          "1163:   if (tv_detect && tv_dac)",
          "1164:    found = connector_status_connected;",
          "1165:   return found;",
          "1166:  }",
          "1169:  if (radeon_encoder->active_device && !(radeon_encoder->active_device & ATOM_DEVICE_CRT_SUPPORT)) {",
          "1170:   DRM_INFO(\"not detecting due to %08x\\n\", radeon_encoder->active_device);",
          "1171:   return connector_status_disconnected;",
          "1172:  }",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1013:  }",
          "1014:  WREG32_PLL(RADEON_PIXCLKS_CNTL, pixclks_cntl);",
          "1019: }",
          "",
          "[Removed Lines]",
          "1017:  return connector_status_disconnected;",
          "",
          "[Added Lines]",
          "1255:  return found;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1025:  .mode_set = radeon_legacy_tv_dac_mode_set,",
          "1026:  .commit = radeon_legacy_tv_dac_commit,",
          "1027:  .detect = radeon_legacy_tv_dac_detect,",
          "1028: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1266:  .disable = radeon_legacy_encoder_disable,",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/radeon/radeon_legacy_tv.c||drivers/gpu/drm/radeon/radeon_legacy_tv.c": [
          "File: drivers/gpu/drm/radeon/radeon_legacy_tv.c -> drivers/gpu/drm/radeon/radeon_legacy_tv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"drmP.h\"",
          "2: #include \"drm_crtc_helper.h\"",
          "3: #include \"radeon.h\"",
          "20: #define H_POS_UNIT 10",
          "25: #define H_TABLE_POS1 6",
          "26: #define H_TABLE_POS2 8",
          "34: #define NTSC_TV_CLOCK_T 233",
          "35: #define NTSC_TV_VFTOTAL 1",
          "36: #define NTSC_TV_LINES_PER_FRAME 525",
          "37: #define NTSC_TV_ZERO_H_SIZE 479166",
          "38: #define NTSC_TV_H_SIZE_UNIT 9478",
          "40: #define PAL_TV_CLOCK_T 188",
          "41: #define PAL_TV_VFTOTAL 3",
          "42: #define PAL_TV_LINES_PER_FRAME 625",
          "43: #define PAL_TV_ZERO_H_SIZE 473200",
          "44: #define PAL_TV_H_SIZE_UNIT 9360",
          "47: #define NTSC_TV_PLL_M_27 22",
          "48: #define NTSC_TV_PLL_N_27 175",
          "49: #define NTSC_TV_PLL_P_27 5",
          "51: #define PAL_TV_PLL_M_27 113",
          "52: #define PAL_TV_PLL_N_27 668",
          "53: #define PAL_TV_PLL_P_27 3",
          "56: #define NTSC_TV_PLL_M_14 33",
          "57: #define NTSC_TV_PLL_N_14 693",
          "58: #define NTSC_TV_PLL_P_14 7",
          "60: #define VERT_LEAD_IN_LINES 2",
          "61: #define FRAC_BITS 0xe",
          "62: #define FRAC_MASK 0x3fff",
          "64: struct radeon_tv_mode_constants {",
          "65:  uint16_t hor_resolution;",
          "66:  uint16_t ver_resolution;",
          "67:  enum radeon_tv_std standard;",
          "68:  uint16_t hor_total;",
          "69:  uint16_t ver_total;",
          "70:  uint16_t hor_start;",
          "71:  uint16_t hor_syncstart;",
          "72:  uint16_t ver_syncstart;",
          "73:  unsigned def_restart;",
          "74:  uint16_t crtcPLL_N;",
          "75:  uint8_t  crtcPLL_M;",
          "76:  uint8_t  crtcPLL_post_div;",
          "77:  unsigned pix_to_tv;",
          "78: };",
          "80: static const uint16_t hor_timing_NTSC[] = {",
          "81:  0x0007,",
          "82:  0x003f,",
          "83:  0x0263,",
          "84:  0x0a24,",
          "85:  0x2a6b,",
          "86:  0x0a36,",
          "88:  0x1bfe,",
          "90:  0x1ec7,",
          "91:  0x3863,",
          "92:  0x1bfe,",
          "93:  0x1bfe,",
          "94:  0x1a2a,",
          "95:  0x1e95,",
          "96:  0x0e31,",
          "97:  0x201b,",
          "98:  0",
          "99: };",
          "101: static const uint16_t vert_timing_NTSC[] = {",
          "102:  0x2001,",
          "103:  0x200d,",
          "104:  0x1006,",
          "105:  0x0c06,",
          "106:  0x1006,",
          "107:  0x1818,",
          "108:  0x21e3,",
          "109:  0x1006,",
          "110:  0x0c06,",
          "111:  0x1006,",
          "112:  0x1817,",
          "113:  0x21d4,",
          "114:  0x0002,",
          "115:  0",
          "116: };",
          "118: static const uint16_t hor_timing_PAL[] = {",
          "119:  0x0007,",
          "120:  0x0058,",
          "121:  0x027c,",
          "122:  0x0a31,",
          "123:  0x2a77,",
          "124:  0x0a95,",
          "126:  0x1bfe,",
          "128:  0x1ef9,",
          "129:  0x387c,",
          "130:  0x1bfe,",
          "131:  0x1bfe,",
          "132:  0x1b31,",
          "133:  0x1eb5,",
          "134:  0x0e43,",
          "135:  0x201b,",
          "136:  0",
          "137: };",
          "139: static const uint16_t vert_timing_PAL[] =  {",
          "140:  0x2001,",
          "141:  0x200c,",
          "142:  0x1005,",
          "143:  0x0c05,",
          "144:  0x1005,",
          "145:  0x1401,",
          "146:  0x1821,",
          "147:  0x2240,",
          "148:  0x1005,",
          "149:  0x0c05,",
          "150:  0x1005,",
          "151:  0x1401,",
          "152:  0x1822,",
          "153:  0x2230,",
          "154:  0x0002,",
          "155:  0",
          "156: };",
          "165: static const struct radeon_tv_mode_constants available_tv_modes[] = {",
          "180:  },",
          "195:  },",
          "210:  },",
          "211: };",
          "213: #define N_AVAILABLE_MODES ARRAY_SIZE(available_tv_modes)",
          "215: static const struct radeon_tv_mode_constants *radeon_legacy_tv_get_std_mode(struct radeon_encoder *radeon_encoder,",
          "216:              uint16_t *pll_ref_freq)",
          "217: {",
          "218:  struct drm_device *dev = radeon_encoder->base.dev;",
          "219:  struct radeon_device *rdev = dev->dev_private;",
          "220:  struct radeon_crtc *radeon_crtc;",
          "221:  struct radeon_encoder_tv_dac *tv_dac = radeon_encoder->enc_priv;",
          "222:  const struct radeon_tv_mode_constants *const_ptr;",
          "223:  struct radeon_pll *pll;",
          "225:  radeon_crtc = to_radeon_crtc(radeon_encoder->base.crtc);",
          "226:  if (radeon_crtc->crtc_id == 1)",
          "227:   pll = &rdev->clock.p2pll;",
          "228:  else",
          "229:   pll = &rdev->clock.p1pll;",
          "231:  if (pll_ref_freq)",
          "234:  if (tv_dac->tv_std == TV_STD_NTSC ||",
          "235:      tv_dac->tv_std == TV_STD_NTSC_J ||",
          "236:      tv_dac->tv_std == TV_STD_PAL_M) {",
          "237:   if (pll->reference_freq == 2700)",
          "238:    const_ptr = &available_tv_modes[0];",
          "239:   else",
          "240:    const_ptr = &available_tv_modes[2];",
          "241:  } else {",
          "242:   if (pll->reference_freq == 2700)",
          "243:    const_ptr = &available_tv_modes[1];",
          "244:   else",
          "246:  }",
          "247:  return const_ptr;",
          "248: }",
          "250: static long YCOEF_value[5] = { 2, 2, 0, 4, 0 };",
          "251: static long YCOEF_EN_value[5] = { 1, 1, 0, 1, 0 };",
          "252: static long SLOPE_value[5] = { 1, 2, 2, 4, 8 };",
          "253: static long SLOPE_limit[5] = { 6, 5, 4, 3, 2 };",
          "255: static void radeon_wait_pll_lock(struct drm_encoder *encoder, unsigned n_tests,",
          "256:      unsigned n_wait_loops, unsigned cnt_threshold)",
          "257: {",
          "258:  struct drm_device *dev = encoder->dev;",
          "259:  struct radeon_device *rdev = dev->dev_private;",
          "260:  uint32_t save_pll_test;",
          "261:  unsigned int i, j;",
          "263:  WREG32(RADEON_TEST_DEBUG_MUX, (RREG32(RADEON_TEST_DEBUG_MUX) & 0xffff60ff) | 0x100);",
          "264:  save_pll_test = RREG32_PLL(RADEON_PLL_TEST_CNTL);",
          "265:  WREG32_PLL(RADEON_PLL_TEST_CNTL, save_pll_test & ~RADEON_PLL_MASK_READ_B);",
          "267:  WREG8(RADEON_CLOCK_CNTL_INDEX, RADEON_PLL_TEST_CNTL);",
          "268:  for (i = 0; i < n_tests; i++) {",
          "269:   WREG8(RADEON_CLOCK_CNTL_DATA + 3, 0);",
          "270:   for (j = 0; j < n_wait_loops; j++)",
          "271:    if (RREG8(RADEON_CLOCK_CNTL_DATA + 3) >= cnt_threshold)",
          "272:     break;",
          "273:  }",
          "274:  WREG32_PLL(RADEON_PLL_TEST_CNTL, save_pll_test);",
          "275:  WREG32(RADEON_TEST_DEBUG_MUX, RREG32(RADEON_TEST_DEBUG_MUX) & 0xffffe0ff);",
          "276: }",
          "279: static void radeon_legacy_tv_write_fifo(struct radeon_encoder *radeon_encoder,",
          "280:      uint16_t addr, uint32_t value)",
          "281: {",
          "282:  struct drm_device *dev = radeon_encoder->base.dev;",
          "283:  struct radeon_device *rdev = dev->dev_private;",
          "284:  uint32_t tmp;",
          "285:  int i = 0;",
          "287:  WREG32(RADEON_TV_HOST_WRITE_DATA, value);",
          "289:  WREG32(RADEON_TV_HOST_RD_WT_CNTL, addr);",
          "290:  WREG32(RADEON_TV_HOST_RD_WT_CNTL, addr | RADEON_HOST_FIFO_WT);",
          "292:  do {",
          "293:   tmp = RREG32(RADEON_TV_HOST_RD_WT_CNTL);",
          "294:   if ((tmp & RADEON_HOST_FIFO_WT_ACK) == 0)",
          "295:    break;",
          "296:   i++;",
          "297:  } while (i < 10000);",
          "298:  WREG32(RADEON_TV_HOST_RD_WT_CNTL, 0);",
          "299: }",
          "302: static uint32_t radeon_legacy_tv_read_fifo(struct radeon_encoder *radeon_encoder, uint16_t addr)",
          "303: {",
          "304:  struct drm_device *dev = radeon_encoder->base.dev;",
          "305:  struct radeon_device *rdev = dev->dev_private;",
          "306:  uint32_t tmp;",
          "307:  int i = 0;",
          "309:  WREG32(RADEON_TV_HOST_RD_WT_CNTL, addr);",
          "310:  WREG32(RADEON_TV_HOST_RD_WT_CNTL, addr | RADEON_HOST_FIFO_RD);",
          "312:  do {",
          "313:   tmp = RREG32(RADEON_TV_HOST_RD_WT_CNTL);",
          "314:   if ((tmp & RADEON_HOST_FIFO_RD_ACK) == 0)",
          "315:    break;",
          "316:   i++;",
          "317:  } while (i < 10000);",
          "318:  WREG32(RADEON_TV_HOST_RD_WT_CNTL, 0);",
          "319:  return RREG32(RADEON_TV_HOST_READ_DATA);",
          "320: }",
          "321: #endif",
          "323: static uint16_t radeon_get_htiming_tables_addr(uint32_t tv_uv_adr)",
          "324: {",
          "325:  uint16_t h_table;",
          "327:  switch ((tv_uv_adr & RADEON_HCODE_TABLE_SEL_MASK) >> RADEON_HCODE_TABLE_SEL_SHIFT) {",
          "328:  case 0:",
          "329:   h_table = RADEON_TV_MAX_FIFO_ADDR_INTERNAL;",
          "330:   break;",
          "331:  case 1:",
          "332:   h_table = ((tv_uv_adr & RADEON_TABLE1_BOT_ADR_MASK) >> RADEON_TABLE1_BOT_ADR_SHIFT) * 2;",
          "333:   break;",
          "334:  case 2:",
          "335:   h_table = ((tv_uv_adr & RADEON_TABLE3_TOP_ADR_MASK) >> RADEON_TABLE3_TOP_ADR_SHIFT) * 2;",
          "336:   break;",
          "337:  default:",
          "338:   h_table = 0;",
          "339:   break;",
          "340:  }",
          "341:  return h_table;",
          "342: }",
          "344: static uint16_t radeon_get_vtiming_tables_addr(uint32_t tv_uv_adr)",
          "345: {",
          "346:  uint16_t v_table;",
          "348:  switch ((tv_uv_adr & RADEON_VCODE_TABLE_SEL_MASK) >> RADEON_VCODE_TABLE_SEL_SHIFT) {",
          "349:  case 0:",
          "350:   v_table = ((tv_uv_adr & RADEON_MAX_UV_ADR_MASK) >> RADEON_MAX_UV_ADR_SHIFT) * 2 + 1;",
          "351:   break;",
          "352:  case 1:",
          "353:   v_table = ((tv_uv_adr & RADEON_TABLE1_BOT_ADR_MASK) >> RADEON_TABLE1_BOT_ADR_SHIFT) * 2 + 1;",
          "354:   break;",
          "355:  case 2:",
          "356:   v_table = ((tv_uv_adr & RADEON_TABLE3_TOP_ADR_MASK) >> RADEON_TABLE3_TOP_ADR_SHIFT) * 2 + 1;",
          "357:   break;",
          "358:  default:",
          "359:   v_table = 0;",
          "360:   break;",
          "361:  }",
          "362:  return v_table;",
          "363: }",
          "365: static void radeon_restore_tv_timing_tables(struct radeon_encoder *radeon_encoder)",
          "366: {",
          "367:  struct drm_device *dev = radeon_encoder->base.dev;",
          "368:  struct radeon_device *rdev = dev->dev_private;",
          "369:  struct radeon_encoder_tv_dac *tv_dac = radeon_encoder->enc_priv;",
          "370:  uint16_t h_table, v_table;",
          "371:  uint32_t tmp;",
          "372:  int i;",
          "374:  WREG32(RADEON_TV_UV_ADR, tv_dac->tv.tv_uv_adr);",
          "375:  h_table = radeon_get_htiming_tables_addr(tv_dac->tv.tv_uv_adr);",
          "376:  v_table = radeon_get_vtiming_tables_addr(tv_dac->tv.tv_uv_adr);",
          "378:  for (i = 0; i < MAX_H_CODE_TIMING_LEN; i += 2, h_table--) {",
          "379:   tmp = ((uint32_t)tv_dac->tv.h_code_timing[i] << 14) | ((uint32_t)tv_dac->tv.h_code_timing[i+1]);",
          "380:   radeon_legacy_tv_write_fifo(radeon_encoder, h_table, tmp);",
          "381:   if (tv_dac->tv.h_code_timing[i] == 0 || tv_dac->tv.h_code_timing[i + 1] == 0)",
          "382:    break;",
          "383:  }",
          "384:  for (i = 0; i < MAX_V_CODE_TIMING_LEN; i += 2, v_table++) {",
          "385:   tmp = ((uint32_t)tv_dac->tv.v_code_timing[i+1] << 14) | ((uint32_t)tv_dac->tv.v_code_timing[i]);",
          "386:   radeon_legacy_tv_write_fifo(radeon_encoder, v_table, tmp);",
          "387:   if (tv_dac->tv.v_code_timing[i] == 0 || tv_dac->tv.v_code_timing[i + 1] == 0)",
          "388:    break;",
          "389:  }",
          "390: }",
          "392: static void radeon_legacy_write_tv_restarts(struct radeon_encoder *radeon_encoder)",
          "393: {",
          "394:  struct drm_device *dev = radeon_encoder->base.dev;",
          "395:  struct radeon_device *rdev = dev->dev_private;",
          "396:  struct radeon_encoder_tv_dac *tv_dac = radeon_encoder->enc_priv;",
          "397:  WREG32(RADEON_TV_FRESTART, tv_dac->tv.frestart);",
          "398:  WREG32(RADEON_TV_HRESTART, tv_dac->tv.hrestart);",
          "399:  WREG32(RADEON_TV_VRESTART, tv_dac->tv.vrestart);",
          "400: }",
          "402: static bool radeon_legacy_tv_init_restarts(struct drm_encoder *encoder)",
          "403: {",
          "404:  struct drm_device *dev = encoder->dev;",
          "405:  struct radeon_device *rdev = dev->dev_private;",
          "406:  struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "407:  struct radeon_encoder_tv_dac *tv_dac = radeon_encoder->enc_priv;",
          "408:  struct radeon_crtc *radeon_crtc;",
          "409:  int restart;",
          "410:  unsigned int h_total, v_total, f_total;",
          "411:  int v_offset, h_offset;",
          "412:  u16 p1, p2, h_inc;",
          "413:  bool h_changed;",
          "414:  const struct radeon_tv_mode_constants *const_ptr;",
          "415:  struct radeon_pll *pll;",
          "417:  radeon_crtc = to_radeon_crtc(radeon_encoder->base.crtc);",
          "418:  if (radeon_crtc->crtc_id == 1)",
          "419:   pll = &rdev->clock.p2pll;",
          "420:  else",
          "421:   pll = &rdev->clock.p1pll;",
          "423:  const_ptr = radeon_legacy_tv_get_std_mode(radeon_encoder, NULL);",
          "424:  if (!const_ptr)",
          "425:   return false;",
          "427:  h_total = const_ptr->hor_total;",
          "428:  v_total = const_ptr->ver_total;",
          "430:  if (tv_dac->tv_std == TV_STD_NTSC ||",
          "431:      tv_dac->tv_std == TV_STD_NTSC_J ||",
          "432:      tv_dac->tv_std == TV_STD_PAL_M ||",
          "433:      tv_dac->tv_std == TV_STD_PAL_60)",
          "434:   f_total = NTSC_TV_VFTOTAL + 1;",
          "435:  else",
          "436:   f_total = PAL_TV_VFTOTAL + 1;",
          "439:  h_offset = tv_dac->h_pos * H_POS_UNIT;",
          "441:  if (tv_dac->tv_std == TV_STD_NTSC ||",
          "442:      tv_dac->tv_std == TV_STD_NTSC_J ||",
          "443:      tv_dac->tv_std == TV_STD_PAL_M) {",
          "444:   h_offset -= 50;",
          "445:   p1 = hor_timing_NTSC[H_TABLE_POS1];",
          "446:   p2 = hor_timing_NTSC[H_TABLE_POS2];",
          "447:  } else {",
          "448:   p1 = hor_timing_PAL[H_TABLE_POS1];",
          "449:   p2 = hor_timing_PAL[H_TABLE_POS2];",
          "450:  }",
          "452:  p1 = (u16)((int)p1 + h_offset);",
          "453:  p2 = (u16)((int)p2 - h_offset);",
          "455:  h_changed = (p1 != tv_dac->tv.h_code_timing[H_TABLE_POS1] ||",
          "456:        p2 != tv_dac->tv.h_code_timing[H_TABLE_POS2]);",
          "458:  tv_dac->tv.h_code_timing[H_TABLE_POS1] = p1;",
          "459:  tv_dac->tv.h_code_timing[H_TABLE_POS2] = p2;",
          "462:  h_offset = (h_offset * (int)(const_ptr->pix_to_tv)) / 1000;",
          "465:  restart = const_ptr->def_restart;",
          "470:  if (tv_dac->tv_std == TV_STD_NTSC ||",
          "471:      tv_dac->tv_std == TV_STD_NTSC_J ||",
          "472:      tv_dac->tv_std == TV_STD_PAL_M ||",
          "473:      tv_dac->tv_std == TV_STD_PAL_60)",
          "474:   v_offset = ((int)(v_total * h_total) * 2 * tv_dac->v_pos) / (int)(NTSC_TV_LINES_PER_FRAME);",
          "475:  else",
          "476:   v_offset = ((int)(v_total * h_total) * 2 * tv_dac->v_pos) / (int)(PAL_TV_LINES_PER_FRAME);",
          "478:  restart -= v_offset + h_offset;",
          "480:  DRM_DEBUG(\"compute_restarts: def = %u h = %d v = %d, p1 = %04x, p2 = %04x, restart = %d\\n\",",
          "481:     const_ptr->def_restart, tv_dac->h_pos, tv_dac->v_pos, p1, p2, restart);",
          "483:  tv_dac->tv.hrestart = restart % h_total;",
          "484:  restart /= h_total;",
          "485:  tv_dac->tv.vrestart = restart % v_total;",
          "486:  restart /= v_total;",
          "487:  tv_dac->tv.frestart = restart % f_total;",
          "489:  DRM_DEBUG(\"compute_restart: F/H/V=%u,%u,%u\\n\",",
          "490:     (unsigned)tv_dac->tv.frestart,",
          "491:     (unsigned)tv_dac->tv.vrestart,",
          "492:     (unsigned)tv_dac->tv.hrestart);",
          "495:  if (tv_dac->tv_std == TV_STD_NTSC ||",
          "496:      tv_dac->tv_std == TV_STD_NTSC_J ||",
          "497:      tv_dac->tv_std == TV_STD_PAL_M)",
          "498:   h_inc = (u16)((int)(const_ptr->hor_resolution * 4096 * NTSC_TV_CLOCK_T) /",
          "499:          (tv_dac->h_size * (int)(NTSC_TV_H_SIZE_UNIT) + (int)(NTSC_TV_ZERO_H_SIZE)));",
          "500:  else",
          "501:   h_inc = (u16)((int)(const_ptr->hor_resolution * 4096 * PAL_TV_CLOCK_T) /",
          "502:          (tv_dac->h_size * (int)(PAL_TV_H_SIZE_UNIT) + (int)(PAL_TV_ZERO_H_SIZE)));",
          "504:  tv_dac->tv.timing_cntl = (tv_dac->tv.timing_cntl & ~RADEON_H_INC_MASK) |",
          "505:   ((u32)h_inc << RADEON_H_INC_SHIFT);",
          "507:  DRM_DEBUG(\"compute_restart: h_size = %d h_inc = %d\\n\", tv_dac->h_size, h_inc);",
          "509:  return h_changed;",
          "510: }",
          "512: void radeon_legacy_tv_mode_set(struct drm_encoder *encoder,",
          "513:           struct drm_display_mode *mode,",
          "514:           struct drm_display_mode *adjusted_mode)",
          "515: {",
          "516:  struct drm_device *dev = encoder->dev;",
          "517:  struct radeon_device *rdev = dev->dev_private;",
          "518:  struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "519:  struct radeon_encoder_tv_dac *tv_dac = radeon_encoder->enc_priv;",
          "520:  const struct radeon_tv_mode_constants *const_ptr;",
          "521:  struct radeon_crtc *radeon_crtc;",
          "522:  int i;",
          "523:  uint16_t pll_ref_freq;",
          "524:  uint32_t vert_space, flicker_removal, tmp;",
          "525:  uint32_t tv_master_cntl, tv_rgb_cntl, tv_dac_cntl;",
          "526:  uint32_t tv_modulator_cntl1, tv_modulator_cntl2;",
          "527:  uint32_t tv_vscaler_cntl1, tv_vscaler_cntl2;",
          "528:  uint32_t tv_pll_cntl, tv_pll_cntl1, tv_ftotal;",
          "529:  uint32_t tv_y_fall_cntl, tv_y_rise_cntl, tv_y_saw_tooth_cntl;",
          "530:  uint32_t m, n, p;",
          "531:  const uint16_t *hor_timing;",
          "532:  const uint16_t *vert_timing;",
          "534:  const_ptr = radeon_legacy_tv_get_std_mode(radeon_encoder, &pll_ref_freq);",
          "535:  if (!const_ptr)",
          "536:   return;",
          "538:  radeon_crtc = to_radeon_crtc(encoder->crtc);",
          "540:  tv_master_cntl = (RADEON_VIN_ASYNC_RST |",
          "541:      RADEON_CRT_FIFO_CE_EN |",
          "542:      RADEON_TV_FIFO_CE_EN |",
          "543:      RADEON_TV_ON);",
          "545:  if (!ASIC_IS_R300(rdev))",
          "546:   tv_master_cntl |= RADEON_TVCLK_ALWAYS_ONb;",
          "548:  if (tv_dac->tv_std == TV_STD_NTSC ||",
          "549:      tv_dac->tv_std == TV_STD_NTSC_J)",
          "550:   tv_master_cntl |= RADEON_RESTART_PHASE_FIX;",
          "552:  tv_modulator_cntl1 = (RADEON_SLEW_RATE_LIMIT |",
          "553:          RADEON_SYNC_TIP_LEVEL |",
          "554:          RADEON_YFLT_EN |",
          "555:          RADEON_UVFLT_EN |",
          "556:          (6 << RADEON_CY_FILT_BLEND_SHIFT));",
          "558:  if (tv_dac->tv_std == TV_STD_NTSC ||",
          "559:      tv_dac->tv_std == TV_STD_NTSC_J) {",
          "560:   tv_modulator_cntl1 |= (0x46 << RADEON_SET_UP_LEVEL_SHIFT) |",
          "561:    (0x3b << RADEON_BLANK_LEVEL_SHIFT);",
          "562:   tv_modulator_cntl2 = (-111 & RADEON_TV_U_BURST_LEVEL_MASK) |",
          "563:    ((0 & RADEON_TV_V_BURST_LEVEL_MASK) << RADEON_TV_V_BURST_LEVEL_SHIFT);",
          "564:  } else if (tv_dac->tv_std == TV_STD_SCART_PAL) {",
          "565:   tv_modulator_cntl1 |= RADEON_ALT_PHASE_EN;",
          "566:   tv_modulator_cntl2 = (0 & RADEON_TV_U_BURST_LEVEL_MASK) |",
          "567:    ((0 & RADEON_TV_V_BURST_LEVEL_MASK) << RADEON_TV_V_BURST_LEVEL_SHIFT);",
          "568:  } else {",
          "569:   tv_modulator_cntl1 |= RADEON_ALT_PHASE_EN |",
          "570:    (0x3b << RADEON_SET_UP_LEVEL_SHIFT) |",
          "571:    (0x3b << RADEON_BLANK_LEVEL_SHIFT);",
          "572:   tv_modulator_cntl2 = (-78 & RADEON_TV_U_BURST_LEVEL_MASK) |",
          "573:    ((62 & RADEON_TV_V_BURST_LEVEL_MASK) << RADEON_TV_V_BURST_LEVEL_SHIFT);",
          "574:  }",
          "577:  tv_rgb_cntl = (RADEON_RGB_DITHER_EN",
          "578:          | RADEON_TVOUT_SCALE_EN",
          "579:          | (0x0b << RADEON_UVRAM_READ_MARGIN_SHIFT)",
          "580:          | (0x07 << RADEON_FIFORAM_FFMACRO_READ_MARGIN_SHIFT)",
          "581:          | RADEON_RGB_ATTEN_SEL(0x3)",
          "582:          | RADEON_RGB_ATTEN_VAL(0xc));",
          "584:  if (radeon_crtc->crtc_id == 1)",
          "585:   tv_rgb_cntl |= RADEON_RGB_SRC_SEL_CRTC2;",
          "586:  else {",
          "587:   if (radeon_crtc->rmx_type != RMX_OFF)",
          "588:    tv_rgb_cntl |= RADEON_RGB_SRC_SEL_RMX;",
          "589:   else",
          "590:    tv_rgb_cntl |= RADEON_RGB_SRC_SEL_CRTC1;",
          "591:  }",
          "593:  if (tv_dac->tv_std == TV_STD_NTSC ||",
          "594:      tv_dac->tv_std == TV_STD_NTSC_J ||",
          "595:      tv_dac->tv_std == TV_STD_PAL_M ||",
          "596:      tv_dac->tv_std == TV_STD_PAL_60)",
          "597:   vert_space = const_ptr->ver_total * 2 * 10000 / NTSC_TV_LINES_PER_FRAME;",
          "598:  else",
          "599:   vert_space = const_ptr->ver_total * 2 * 10000 / PAL_TV_LINES_PER_FRAME;",
          "601:  tmp = RREG32(RADEON_TV_VSCALER_CNTL1);",
          "602:  tmp &= 0xe3ff0000;",
          "603:  tmp |= (vert_space * (1 << FRAC_BITS) / 10000);",
          "604:  tv_vscaler_cntl1 = tmp;",
          "606:  if (pll_ref_freq == 2700)",
          "607:   tv_vscaler_cntl1 |= RADEON_RESTART_FIELD;",
          "609:  if (const_ptr->hor_resolution == 1024)",
          "610:   tv_vscaler_cntl1 |= (4 << RADEON_Y_DEL_W_SIG_SHIFT);",
          "611:  else",
          "612:   tv_vscaler_cntl1 |= (2 << RADEON_Y_DEL_W_SIG_SHIFT);",
          "615:  tmp = const_ptr->ver_total * 2 * 1000;",
          "616:  if (tv_dac->tv_std == TV_STD_NTSC ||",
          "617:      tv_dac->tv_std == TV_STD_NTSC_J ||",
          "618:      tv_dac->tv_std == TV_STD_PAL_M ||",
          "619:      tv_dac->tv_std == TV_STD_PAL_60) {",
          "620:   tmp /= NTSC_TV_LINES_PER_FRAME;",
          "621:  } else {",
          "622:   tmp /= PAL_TV_LINES_PER_FRAME;",
          "623:  }",
          "624:  flicker_removal = (tmp + 500) / 1000;",
          "626:  if (flicker_removal < 3)",
          "627:   flicker_removal = 3;",
          "628:  for (i = 0; i < 6; ++i) {",
          "629:   if (flicker_removal == SLOPE_limit[i])",
          "630:    break;",
          "631:  }",
          "633:  tv_y_saw_tooth_cntl = (vert_space * SLOPE_value[i] * (1 << (FRAC_BITS - 1)) +",
          "634:     5001) / 10000 / 8 | ((SLOPE_value[i] *",
          "635:     (1 << (FRAC_BITS - 1)) / 8) << 16);",
          "636:  tv_y_fall_cntl =",
          "637:   (YCOEF_EN_value[i] << 17) | ((YCOEF_value[i] * (1 << 8) / 8) << 24) |",
          "638:   RADEON_Y_FALL_PING_PONG | (272 * SLOPE_value[i] / 8) * (1 << (FRAC_BITS - 1)) /",
          "639:   1024;",
          "640:  tv_y_rise_cntl = RADEON_Y_RISE_PING_PONG|",
          "641:   (flicker_removal * 1024 - 272) * SLOPE_value[i] / 8 * (1 << (FRAC_BITS - 1)) / 1024;",
          "643:  tv_vscaler_cntl2 = RREG32(RADEON_TV_VSCALER_CNTL2) & 0x00fffff0;",
          "644:  tv_vscaler_cntl2 |= (0x10 << 24) |",
          "645:   RADEON_DITHER_MODE |",
          "646:   RADEON_Y_OUTPUT_DITHER_EN |",
          "647:   RADEON_UV_OUTPUT_DITHER_EN |",
          "648:   RADEON_UV_TO_BUF_DITHER_EN;",
          "650:  tmp = (tv_vscaler_cntl1 >> RADEON_UV_INC_SHIFT) & RADEON_UV_INC_MASK;",
          "651:  tmp = ((16384 * 256 * 10) / tmp + 5) / 10;",
          "652:  tmp = (tmp << RADEON_UV_OUTPUT_POST_SCALE_SHIFT) | 0x000b0000;",
          "653:  tv_dac->tv.timing_cntl = tmp;",
          "655:  if (tv_dac->tv_std == TV_STD_NTSC ||",
          "656:      tv_dac->tv_std == TV_STD_NTSC_J ||",
          "657:      tv_dac->tv_std == TV_STD_PAL_M ||",
          "658:      tv_dac->tv_std == TV_STD_PAL_60)",
          "659:   tv_dac_cntl = tv_dac->ntsc_tvdac_adj;",
          "660:  else",
          "661:   tv_dac_cntl = tv_dac->pal_tvdac_adj;",
          "663:  tv_dac_cntl |= RADEON_TV_DAC_NBLANK | RADEON_TV_DAC_NHOLD;",
          "665:  if (tv_dac->tv_std == TV_STD_NTSC ||",
          "666:      tv_dac->tv_std == TV_STD_NTSC_J)",
          "667:   tv_dac_cntl |= RADEON_TV_DAC_STD_NTSC;",
          "668:  else",
          "669:   tv_dac_cntl |= RADEON_TV_DAC_STD_PAL;",
          "671:  if (tv_dac->tv_std == TV_STD_NTSC ||",
          "672:      tv_dac->tv_std == TV_STD_NTSC_J) {",
          "673:   if (pll_ref_freq == 2700) {",
          "674:    m = NTSC_TV_PLL_M_27;",
          "675:    n = NTSC_TV_PLL_N_27;",
          "676:    p = NTSC_TV_PLL_P_27;",
          "677:   } else {",
          "678:    m = NTSC_TV_PLL_M_14;",
          "679:    n = NTSC_TV_PLL_N_14;",
          "680:    p = NTSC_TV_PLL_P_14;",
          "681:   }",
          "682:  } else {",
          "683:   if (pll_ref_freq == 2700) {",
          "684:    m = PAL_TV_PLL_M_27;",
          "685:    n = PAL_TV_PLL_N_27;",
          "686:    p = PAL_TV_PLL_P_27;",
          "687:   } else {",
          "688:    m = PAL_TV_PLL_M_27;",
          "689:    n = PAL_TV_PLL_N_27;",
          "690:    p = PAL_TV_PLL_P_27;",
          "691:   }",
          "692:  }",
          "694:  tv_pll_cntl = (m & RADEON_TV_M0LO_MASK) |",
          "695:   (((m >> 8) & RADEON_TV_M0HI_MASK) << RADEON_TV_M0HI_SHIFT) |",
          "696:   ((n & RADEON_TV_N0LO_MASK) << RADEON_TV_N0LO_SHIFT) |",
          "697:   (((n >> 9) & RADEON_TV_N0HI_MASK) << RADEON_TV_N0HI_SHIFT) |",
          "698:   ((p & RADEON_TV_P_MASK) << RADEON_TV_P_SHIFT);",
          "700:  tv_pll_cntl1 = (((4 & RADEON_TVPCP_MASK) << RADEON_TVPCP_SHIFT) |",
          "701:    ((4 & RADEON_TVPVG_MASK) << RADEON_TVPVG_SHIFT) |",
          "702:    ((1 & RADEON_TVPDC_MASK) << RADEON_TVPDC_SHIFT) |",
          "703:    RADEON_TVCLK_SRC_SEL_TVPLL |",
          "704:    RADEON_TVPLL_TEST_DIS);",
          "706:  tv_dac->tv.tv_uv_adr = 0xc8;",
          "708:  if (tv_dac->tv_std == TV_STD_NTSC ||",
          "709:      tv_dac->tv_std == TV_STD_NTSC_J ||",
          "710:      tv_dac->tv_std == TV_STD_PAL_M ||",
          "711:      tv_dac->tv_std == TV_STD_PAL_60) {",
          "712:   tv_ftotal = NTSC_TV_VFTOTAL;",
          "713:   hor_timing = hor_timing_NTSC;",
          "714:   vert_timing = vert_timing_NTSC;",
          "715:  } else {",
          "716:   hor_timing = hor_timing_PAL;",
          "717:   vert_timing = vert_timing_PAL;",
          "718:   tv_ftotal = PAL_TV_VFTOTAL;",
          "719:  }",
          "721:  for (i = 0; i < MAX_H_CODE_TIMING_LEN; i++) {",
          "722:   if ((tv_dac->tv.h_code_timing[i] = hor_timing[i]) == 0)",
          "723:    break;",
          "724:  }",
          "726:  for (i = 0; i < MAX_V_CODE_TIMING_LEN; i++) {",
          "727:   if ((tv_dac->tv.v_code_timing[i] = vert_timing[i]) == 0)",
          "728:    break;",
          "729:  }",
          "731:  radeon_legacy_tv_init_restarts(encoder);",
          "739:  WREG32(RADEON_TV_MASTER_CNTL, (tv_master_cntl | RADEON_TV_ASYNC_RST |",
          "740:            RADEON_CRT_ASYNC_RST | RADEON_TV_FIFO_ASYNC_RST));",
          "742:  tmp = RREG32(RADEON_TV_DAC_CNTL);",
          "743:  tmp &= ~RADEON_TV_DAC_NBLANK;",
          "744:  tmp |= RADEON_TV_DAC_BGSLEEP |",
          "745:   RADEON_TV_DAC_RDACPD |",
          "746:   RADEON_TV_DAC_GDACPD |",
          "747:   RADEON_TV_DAC_BDACPD;",
          "748:  WREG32(RADEON_TV_DAC_CNTL, tmp);",
          "751:  WREG32_PLL_P(RADEON_TV_PLL_CNTL1, 0, ~RADEON_TVCLK_SRC_SEL_TVPLL);",
          "752:  WREG32_PLL(RADEON_TV_PLL_CNTL, tv_pll_cntl);",
          "753:  WREG32_PLL_P(RADEON_TV_PLL_CNTL1, RADEON_TVPLL_RESET, ~RADEON_TVPLL_RESET);",
          "755:  radeon_wait_pll_lock(encoder, 200, 800, 135);",
          "757:  WREG32_PLL_P(RADEON_TV_PLL_CNTL1, 0, ~RADEON_TVPLL_RESET);",
          "759:  radeon_wait_pll_lock(encoder, 300, 160, 27);",
          "760:  radeon_wait_pll_lock(encoder, 200, 800, 135);",
          "762:  WREG32_PLL_P(RADEON_TV_PLL_CNTL1, 0, ~0xf);",
          "763:  WREG32_PLL_P(RADEON_TV_PLL_CNTL1, RADEON_TVCLK_SRC_SEL_TVPLL, ~RADEON_TVCLK_SRC_SEL_TVPLL);",
          "765:  WREG32_PLL_P(RADEON_TV_PLL_CNTL1, (1 << RADEON_TVPDC_SHIFT), ~RADEON_TVPDC_MASK);",
          "766:  WREG32_PLL_P(RADEON_TV_PLL_CNTL1, 0, ~RADEON_TVPLL_SLEEP);",
          "769:  WREG32(RADEON_TV_RGB_CNTL, tv_rgb_cntl);",
          "770:  WREG32(RADEON_TV_HTOTAL, const_ptr->hor_total - 1);",
          "771:  WREG32(RADEON_TV_HDISP, const_ptr->hor_resolution - 1);",
          "772:  WREG32(RADEON_TV_HSTART, const_ptr->hor_start);",
          "774:  WREG32(RADEON_TV_VTOTAL, const_ptr->ver_total - 1);",
          "775:  WREG32(RADEON_TV_VDISP, const_ptr->ver_resolution - 1);",
          "776:  WREG32(RADEON_TV_FTOTAL, tv_ftotal);",
          "777:  WREG32(RADEON_TV_VSCALER_CNTL1, tv_vscaler_cntl1);",
          "778:  WREG32(RADEON_TV_VSCALER_CNTL2, tv_vscaler_cntl2);",
          "780:  WREG32(RADEON_TV_Y_FALL_CNTL, tv_y_fall_cntl);",
          "781:  WREG32(RADEON_TV_Y_RISE_CNTL, tv_y_rise_cntl);",
          "782:  WREG32(RADEON_TV_Y_SAW_TOOTH_CNTL, tv_y_saw_tooth_cntl);",
          "784:  WREG32(RADEON_TV_MASTER_CNTL, (tv_master_cntl | RADEON_TV_ASYNC_RST |",
          "785:            RADEON_CRT_ASYNC_RST));",
          "788:  radeon_legacy_write_tv_restarts(radeon_encoder);",
          "791:  radeon_restore_tv_timing_tables(radeon_encoder);",
          "793:  WREG32(RADEON_TV_MASTER_CNTL, (tv_master_cntl | RADEON_TV_ASYNC_RST));",
          "796:  WREG32(RADEON_TV_SYNC_CNTL, (RADEON_SYNC_PUB | RADEON_TV_SYNC_IO_DRIVE));",
          "797:  WREG32(RADEON_TV_TIMING_CNTL, tv_dac->tv.timing_cntl);",
          "798:  WREG32(RADEON_TV_MODULATOR_CNTL1, tv_modulator_cntl1);",
          "799:  WREG32(RADEON_TV_MODULATOR_CNTL2, tv_modulator_cntl2);",
          "800:  WREG32(RADEON_TV_PRE_DAC_MUX_CNTL, (RADEON_Y_RED_EN |",
          "801:          RADEON_C_GRN_EN |",
          "802:          RADEON_CMP_BLU_EN |",
          "803:          RADEON_DAC_DITHER_EN));",
          "805:  WREG32(RADEON_TV_CRC_CNTL, 0);",
          "807:  WREG32(RADEON_TV_MASTER_CNTL, tv_master_cntl);",
          "809:  WREG32(RADEON_TV_GAIN_LIMIT_SETTINGS, ((0x17f << RADEON_UV_GAIN_LIMIT_SHIFT) |",
          "810:             (0x5ff << RADEON_Y_GAIN_LIMIT_SHIFT)));",
          "811:  WREG32(RADEON_TV_LINEAR_GAIN_SETTINGS, ((0x100 << RADEON_UV_GAIN_SHIFT) |",
          "812:       (0x100 << RADEON_Y_GAIN_SHIFT)));",
          "814:  WREG32(RADEON_TV_DAC_CNTL, tv_dac_cntl);",
          "816: }",
          "818: void radeon_legacy_tv_adjust_crtc_reg(struct drm_encoder *encoder,",
          "819:           uint32_t *h_total_disp, uint32_t *h_sync_strt_wid,",
          "820:           uint32_t *v_total_disp, uint32_t *v_sync_strt_wid)",
          "821: {",
          "822:  struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "823:  const struct radeon_tv_mode_constants *const_ptr;",
          "824:  uint32_t tmp;",
          "826:  const_ptr = radeon_legacy_tv_get_std_mode(radeon_encoder, NULL);",
          "827:  if (!const_ptr)",
          "828:   return;",
          "831:   (((const_ptr->hor_total / 8) - 1) << RADEON_CRTC_H_TOTAL_SHIFT);",
          "833:  tmp = *h_sync_strt_wid;",
          "834:  tmp &= ~(RADEON_CRTC_H_SYNC_STRT_PIX | RADEON_CRTC_H_SYNC_STRT_CHAR);",
          "835:  tmp |= (((const_ptr->hor_syncstart / 8) - 1) << RADEON_CRTC_H_SYNC_STRT_CHAR_SHIFT) |",
          "836:   (const_ptr->hor_syncstart & 7);",
          "840:   ((const_ptr->ver_total - 1) << RADEON_CRTC_V_TOTAL_SHIFT);",
          "842:  tmp = *v_sync_strt_wid;",
          "843:  tmp &= ~RADEON_CRTC_V_SYNC_STRT;",
          "844:  tmp |= ((const_ptr->ver_syncstart - 1) << RADEON_CRTC_V_SYNC_STRT_SHIFT);",
          "846: }",
          "848: static inline int get_post_div(int value)",
          "849: {",
          "850:  int post_div;",
          "851:  switch (value) {",
          "852:  case 1: post_div = 0; break;",
          "853:  case 2: post_div = 1; break;",
          "854:  case 3: post_div = 4; break;",
          "855:  case 4: post_div = 2; break;",
          "856:  case 6: post_div = 6; break;",
          "857:  case 8: post_div = 3; break;",
          "858:  case 12: post_div = 7; break;",
          "859:  case 16:",
          "860:  default: post_div = 5; break;",
          "861:  }",
          "862:  return post_div;",
          "863: }",
          "865: void radeon_legacy_tv_adjust_pll1(struct drm_encoder *encoder,",
          "866:       uint32_t *htotal_cntl, uint32_t *ppll_ref_div,",
          "867:       uint32_t *ppll_div_3, uint32_t *pixclks_cntl)",
          "868: {",
          "869:  struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "870:  const struct radeon_tv_mode_constants *const_ptr;",
          "872:  const_ptr = radeon_legacy_tv_get_std_mode(radeon_encoder, NULL);",
          "873:  if (!const_ptr)",
          "874:   return;",
          "883: }",
          "885: void radeon_legacy_tv_adjust_pll2(struct drm_encoder *encoder,",
          "886:       uint32_t *htotal2_cntl, uint32_t *p2pll_ref_div,",
          "887:       uint32_t *p2pll_div_0, uint32_t *pixclks_cntl)",
          "888: {",
          "889:  struct radeon_encoder *radeon_encoder = to_radeon_encoder(encoder);",
          "890:  const struct radeon_tv_mode_constants *const_ptr;",
          "892:  const_ptr = radeon_legacy_tv_get_std_mode(radeon_encoder, NULL);",
          "893:  if (!const_ptr)",
          "894:   return;",
          "903: }",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/radeon/radeon_mode.h||drivers/gpu/drm/radeon/radeon_mode.h": [
          "File: drivers/gpu/drm/radeon/radeon_mode.h -> drivers/gpu/drm/radeon/radeon_mode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:  uint32_t flags;",
          "189: };",
          "191: struct radeon_crtc {",
          "192:  struct drm_crtc base;",
          "193:  int crtc_id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: #define MAX_H_CODE_TIMING_LEN 32",
          "192: #define MAX_V_CODE_TIMING_LEN 32",
          "196: struct radeon_tv_regs {",
          "197:  uint32_t tv_uv_adr;",
          "198:  uint32_t timing_cntl;",
          "199:  uint32_t hrestart;",
          "200:  uint32_t vrestart;",
          "201:  uint32_t frestart;",
          "202:  uint16_t h_code_timing[MAX_H_CODE_TIMING_LEN];",
          "203:  uint16_t v_code_timing[MAX_V_CODE_TIMING_LEN];",
          "204: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:  uint32_t legacy_display_base_addr;",
          "203:  uint32_t legacy_cursor_offset;",
          "204:  enum radeon_rmx_type rmx_type;",
          "206:  fixed20_12 vsc;",
          "207:  fixed20_12 hsc;",
          "208:  struct radeon_native_mode native_mode;",
          "",
          "[Removed Lines]",
          "205:  uint32_t devices;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "234:  uint32_t ntsc_tvdac_adj;",
          "235:  uint32_t pal_tvdac_adj;",
          "237:  enum radeon_tv_std tv_std;",
          "238: };",
          "240: struct radeon_encoder_int_tmds {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:  int               h_pos;",
          "252:  int               v_pos;",
          "253:  int               h_size;",
          "254:  int               supported_tv_stds;",
          "255:  bool              tv_on;",
          "257:  struct radeon_tv_regs tv;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "253:  struct radeon_native_mode native_mode;",
          "254: };",
          "256: struct radeon_encoder {",
          "257:  struct drm_encoder base;",
          "258:  uint32_t encoder_id;",
          "259:  uint32_t devices;",
          "260:  uint32_t flags;",
          "261:  uint32_t pixel_clock;",
          "262:  enum radeon_rmx_type rmx_type;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276: struct radeon_encoder_atom_dac {",
          "277:  enum radeon_tv_std tv_std;",
          "278: };",
          "284:  uint32_t active_device;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "274:  uint32_t connector_id;",
          "275:  uint32_t devices;",
          "276:  struct radeon_i2c_chan *ddc_bus;",
          "278:  void *con_priv;",
          "279: };",
          "",
          "[Removed Lines]",
          "277:  int use_digital;",
          "",
          "[Added Lines]",
          "302:  bool use_digital;",
          "305:  struct edid *edid;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "308: struct drm_encoder *radeon_encoder_legacy_tmds_ext_add(struct drm_device *dev, int bios_index);",
          "309: extern void atombios_external_tmds_setup(struct drm_encoder *encoder, int action);",
          "310: extern int atombios_get_encoder_mode(struct drm_encoder *encoder);",
          "312: extern void radeon_crtc_load_lut(struct drm_crtc *crtc);",
          "313: extern int atombios_crtc_set_base(struct drm_crtc *crtc, int x, int y,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "339: extern void radeon_encoder_set_active_device(struct drm_encoder *encoder);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "394: bool radeon_crtc_scaling_mode_fixup(struct drm_crtc *crtc,",
          "395:      struct drm_display_mode *mode,",
          "396:      struct drm_display_mode *adjusted_mode);",
          "399: #endif",
          "",
          "[Removed Lines]",
          "397: void atom_rv515_force_tv_scaler(struct radeon_device *rdev);",
          "",
          "[Added Lines]",
          "426: void atom_rv515_force_tv_scaler(struct radeon_device *rdev, struct radeon_crtc *radeon_crtc);",
          "429: void radeon_legacy_tv_adjust_crtc_reg(struct drm_encoder *encoder,",
          "430:           uint32_t *h_total_disp, uint32_t *h_sync_strt_wid,",
          "431:           uint32_t *v_total_disp, uint32_t *v_sync_strt_wid);",
          "432: void radeon_legacy_tv_adjust_pll1(struct drm_encoder *encoder,",
          "433:       uint32_t *htotal_cntl, uint32_t *ppll_ref_div,",
          "434:       uint32_t *ppll_div_3, uint32_t *pixclks_cntl);",
          "435: void radeon_legacy_tv_adjust_pll2(struct drm_encoder *encoder,",
          "436:       uint32_t *htotal2_cntl, uint32_t *p2pll_ref_div,",
          "437:       uint32_t *p2pll_div_0, uint32_t *pixclks_cntl);",
          "438: void radeon_legacy_tv_mode_set(struct drm_encoder *encoder,",
          "439:           struct drm_display_mode *mode,",
          "440:           struct drm_display_mode *adjusted_mode);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/radeon/radeon_reg.h||drivers/gpu/drm/radeon/radeon_reg.h": [
          "File: drivers/gpu/drm/radeon/radeon_reg.h -> drivers/gpu/drm/radeon/radeon_reg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3462: #       define RADEON_RGB_CONVERT_BY_PASS   (1 << 10)",
          "3463: #       define RADEON_UVRAM_READ_MARGIN_SHIFT   16",
          "3464: #       define RADEON_FIFORAM_FFMACRO_READ_MARGIN_SHIFT   20",
          "3466: #define RADEON_TV_SYNC_CNTL                          0x0808",
          "3467: #       define RADEON_SYNC_OE                     (1 <<  0)",
          "3468: #       define RADEON_SYNC_OUT                    (1 <<  1)",
          "",
          "[Removed Lines]",
          "3465: # define RADEON_TVOUT_SCALE_EN    (1 << 26)",
          "",
          "[Added Lines]",
          "3465: #       define RADEON_RGB_ATTEN_SEL(x)            ((x) << 24)",
          "3466: #       define RADEON_TVOUT_SCALE_EN              (1 << 26)",
          "3467: #       define RADEON_RGB_ATTEN_VAL(x)            ((x) << 28)",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/radeon/rv515.c||drivers/gpu/drm/radeon/rv515.c": [
          "File: drivers/gpu/drm/radeon/rv515.c -> drivers/gpu/drm/radeon/rv515.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:  return 0;",
          "476: }",
          "479: {",
          "704: }",
          "706: struct rv515_watermark {",
          "",
          "[Removed Lines]",
          "478: void atom_rv515_force_tv_scaler(struct radeon_device *rdev)",
          "481:  WREG32(0x659C, 0x0);",
          "482:  WREG32(0x6594, 0x705);",
          "483:  WREG32(0x65A4, 0x10001);",
          "484:  WREG32(0x65D8, 0x0);",
          "485:  WREG32(0x65B0, 0x0);",
          "486:  WREG32(0x65C0, 0x0);",
          "487:  WREG32(0x65D4, 0x0);",
          "488:  WREG32(0x6578, 0x0);",
          "489:  WREG32(0x657C, 0x841880A8);",
          "490:  WREG32(0x6578, 0x1);",
          "491:  WREG32(0x657C, 0x84208680);",
          "492:  WREG32(0x6578, 0x2);",
          "493:  WREG32(0x657C, 0xBFF880B0);",
          "494:  WREG32(0x6578, 0x100);",
          "495:  WREG32(0x657C, 0x83D88088);",
          "496:  WREG32(0x6578, 0x101);",
          "497:  WREG32(0x657C, 0x84608680);",
          "498:  WREG32(0x6578, 0x102);",
          "499:  WREG32(0x657C, 0xBFF080D0);",
          "500:  WREG32(0x6578, 0x200);",
          "501:  WREG32(0x657C, 0x83988068);",
          "502:  WREG32(0x6578, 0x201);",
          "503:  WREG32(0x657C, 0x84A08680);",
          "504:  WREG32(0x6578, 0x202);",
          "505:  WREG32(0x657C, 0xBFF080F8);",
          "506:  WREG32(0x6578, 0x300);",
          "507:  WREG32(0x657C, 0x83588058);",
          "508:  WREG32(0x6578, 0x301);",
          "509:  WREG32(0x657C, 0x84E08660);",
          "510:  WREG32(0x6578, 0x302);",
          "511:  WREG32(0x657C, 0xBFF88120);",
          "512:  WREG32(0x6578, 0x400);",
          "513:  WREG32(0x657C, 0x83188040);",
          "514:  WREG32(0x6578, 0x401);",
          "515:  WREG32(0x657C, 0x85008660);",
          "516:  WREG32(0x6578, 0x402);",
          "517:  WREG32(0x657C, 0xBFF88150);",
          "518:  WREG32(0x6578, 0x500);",
          "519:  WREG32(0x657C, 0x82D88030);",
          "520:  WREG32(0x6578, 0x501);",
          "521:  WREG32(0x657C, 0x85408640);",
          "522:  WREG32(0x6578, 0x502);",
          "523:  WREG32(0x657C, 0xBFF88180);",
          "524:  WREG32(0x6578, 0x600);",
          "525:  WREG32(0x657C, 0x82A08018);",
          "526:  WREG32(0x6578, 0x601);",
          "527:  WREG32(0x657C, 0x85808620);",
          "528:  WREG32(0x6578, 0x602);",
          "529:  WREG32(0x657C, 0xBFF081B8);",
          "530:  WREG32(0x6578, 0x700);",
          "531:  WREG32(0x657C, 0x82608010);",
          "532:  WREG32(0x6578, 0x701);",
          "533:  WREG32(0x657C, 0x85A08600);",
          "534:  WREG32(0x6578, 0x702);",
          "535:  WREG32(0x657C, 0x800081F0);",
          "536:  WREG32(0x6578, 0x800);",
          "537:  WREG32(0x657C, 0x8228BFF8);",
          "538:  WREG32(0x6578, 0x801);",
          "539:  WREG32(0x657C, 0x85E085E0);",
          "540:  WREG32(0x6578, 0x802);",
          "541:  WREG32(0x657C, 0xBFF88228);",
          "542:  WREG32(0x6578, 0x10000);",
          "543:  WREG32(0x657C, 0x82A8BF00);",
          "544:  WREG32(0x6578, 0x10001);",
          "545:  WREG32(0x657C, 0x82A08CC0);",
          "546:  WREG32(0x6578, 0x10002);",
          "547:  WREG32(0x657C, 0x8008BEF8);",
          "548:  WREG32(0x6578, 0x10100);",
          "549:  WREG32(0x657C, 0x81F0BF28);",
          "550:  WREG32(0x6578, 0x10101);",
          "551:  WREG32(0x657C, 0x83608CA0);",
          "552:  WREG32(0x6578, 0x10102);",
          "553:  WREG32(0x657C, 0x8018BED0);",
          "554:  WREG32(0x6578, 0x10200);",
          "555:  WREG32(0x657C, 0x8148BF38);",
          "556:  WREG32(0x6578, 0x10201);",
          "557:  WREG32(0x657C, 0x84408C80);",
          "558:  WREG32(0x6578, 0x10202);",
          "559:  WREG32(0x657C, 0x8008BEB8);",
          "560:  WREG32(0x6578, 0x10300);",
          "561:  WREG32(0x657C, 0x80B0BF78);",
          "562:  WREG32(0x6578, 0x10301);",
          "563:  WREG32(0x657C, 0x85008C20);",
          "564:  WREG32(0x6578, 0x10302);",
          "565:  WREG32(0x657C, 0x8020BEA0);",
          "566:  WREG32(0x6578, 0x10400);",
          "567:  WREG32(0x657C, 0x8028BF90);",
          "568:  WREG32(0x6578, 0x10401);",
          "569:  WREG32(0x657C, 0x85E08BC0);",
          "570:  WREG32(0x6578, 0x10402);",
          "571:  WREG32(0x657C, 0x8018BE90);",
          "572:  WREG32(0x6578, 0x10500);",
          "573:  WREG32(0x657C, 0xBFB8BFB0);",
          "574:  WREG32(0x6578, 0x10501);",
          "575:  WREG32(0x657C, 0x86C08B40);",
          "576:  WREG32(0x6578, 0x10502);",
          "577:  WREG32(0x657C, 0x8010BE90);",
          "578:  WREG32(0x6578, 0x10600);",
          "579:  WREG32(0x657C, 0xBF58BFC8);",
          "580:  WREG32(0x6578, 0x10601);",
          "581:  WREG32(0x657C, 0x87A08AA0);",
          "582:  WREG32(0x6578, 0x10602);",
          "583:  WREG32(0x657C, 0x8010BE98);",
          "584:  WREG32(0x6578, 0x10700);",
          "585:  WREG32(0x657C, 0xBF10BFF0);",
          "586:  WREG32(0x6578, 0x10701);",
          "587:  WREG32(0x657C, 0x886089E0);",
          "588:  WREG32(0x6578, 0x10702);",
          "589:  WREG32(0x657C, 0x8018BEB0);",
          "590:  WREG32(0x6578, 0x10800);",
          "591:  WREG32(0x657C, 0xBED8BFE8);",
          "592:  WREG32(0x6578, 0x10801);",
          "593:  WREG32(0x657C, 0x89408940);",
          "594:  WREG32(0x6578, 0x10802);",
          "595:  WREG32(0x657C, 0xBFE8BED8);",
          "596:  WREG32(0x6578, 0x20000);",
          "597:  WREG32(0x657C, 0x80008000);",
          "598:  WREG32(0x6578, 0x20001);",
          "599:  WREG32(0x657C, 0x90008000);",
          "600:  WREG32(0x6578, 0x20002);",
          "601:  WREG32(0x657C, 0x80008000);",
          "602:  WREG32(0x6578, 0x20003);",
          "603:  WREG32(0x657C, 0x80008000);",
          "604:  WREG32(0x6578, 0x20100);",
          "605:  WREG32(0x657C, 0x80108000);",
          "606:  WREG32(0x6578, 0x20101);",
          "607:  WREG32(0x657C, 0x8FE0BF70);",
          "608:  WREG32(0x6578, 0x20102);",
          "609:  WREG32(0x657C, 0xBFE880C0);",
          "610:  WREG32(0x6578, 0x20103);",
          "611:  WREG32(0x657C, 0x80008000);",
          "612:  WREG32(0x6578, 0x20200);",
          "613:  WREG32(0x657C, 0x8018BFF8);",
          "614:  WREG32(0x6578, 0x20201);",
          "615:  WREG32(0x657C, 0x8F80BF08);",
          "616:  WREG32(0x6578, 0x20202);",
          "617:  WREG32(0x657C, 0xBFD081A0);",
          "618:  WREG32(0x6578, 0x20203);",
          "619:  WREG32(0x657C, 0xBFF88000);",
          "620:  WREG32(0x6578, 0x20300);",
          "621:  WREG32(0x657C, 0x80188000);",
          "622:  WREG32(0x6578, 0x20301);",
          "623:  WREG32(0x657C, 0x8EE0BEC0);",
          "624:  WREG32(0x6578, 0x20302);",
          "625:  WREG32(0x657C, 0xBFB082A0);",
          "626:  WREG32(0x6578, 0x20303);",
          "627:  WREG32(0x657C, 0x80008000);",
          "628:  WREG32(0x6578, 0x20400);",
          "629:  WREG32(0x657C, 0x80188000);",
          "630:  WREG32(0x6578, 0x20401);",
          "631:  WREG32(0x657C, 0x8E00BEA0);",
          "632:  WREG32(0x6578, 0x20402);",
          "633:  WREG32(0x657C, 0xBF8883C0);",
          "634:  WREG32(0x6578, 0x20403);",
          "635:  WREG32(0x657C, 0x80008000);",
          "636:  WREG32(0x6578, 0x20500);",
          "637:  WREG32(0x657C, 0x80188000);",
          "638:  WREG32(0x6578, 0x20501);",
          "639:  WREG32(0x657C, 0x8D00BE90);",
          "640:  WREG32(0x6578, 0x20502);",
          "641:  WREG32(0x657C, 0xBF588500);",
          "642:  WREG32(0x6578, 0x20503);",
          "643:  WREG32(0x657C, 0x80008008);",
          "644:  WREG32(0x6578, 0x20600);",
          "645:  WREG32(0x657C, 0x80188000);",
          "646:  WREG32(0x6578, 0x20601);",
          "647:  WREG32(0x657C, 0x8BC0BE98);",
          "648:  WREG32(0x6578, 0x20602);",
          "649:  WREG32(0x657C, 0xBF308660);",
          "650:  WREG32(0x6578, 0x20603);",
          "651:  WREG32(0x657C, 0x80008008);",
          "652:  WREG32(0x6578, 0x20700);",
          "653:  WREG32(0x657C, 0x80108000);",
          "654:  WREG32(0x6578, 0x20701);",
          "655:  WREG32(0x657C, 0x8A80BEB0);",
          "656:  WREG32(0x6578, 0x20702);",
          "657:  WREG32(0x657C, 0xBF0087C0);",
          "658:  WREG32(0x6578, 0x20703);",
          "659:  WREG32(0x657C, 0x80008008);",
          "660:  WREG32(0x6578, 0x20800);",
          "661:  WREG32(0x657C, 0x80108000);",
          "662:  WREG32(0x6578, 0x20801);",
          "663:  WREG32(0x657C, 0x8920BED0);",
          "664:  WREG32(0x6578, 0x20802);",
          "665:  WREG32(0x657C, 0xBED08920);",
          "666:  WREG32(0x6578, 0x20803);",
          "667:  WREG32(0x657C, 0x80008010);",
          "668:  WREG32(0x6578, 0x30000);",
          "669:  WREG32(0x657C, 0x90008000);",
          "670:  WREG32(0x6578, 0x30001);",
          "671:  WREG32(0x657C, 0x80008000);",
          "672:  WREG32(0x6578, 0x30100);",
          "673:  WREG32(0x657C, 0x8FE0BF90);",
          "674:  WREG32(0x6578, 0x30101);",
          "675:  WREG32(0x657C, 0xBFF880A0);",
          "676:  WREG32(0x6578, 0x30200);",
          "677:  WREG32(0x657C, 0x8F60BF40);",
          "678:  WREG32(0x6578, 0x30201);",
          "679:  WREG32(0x657C, 0xBFE88180);",
          "680:  WREG32(0x6578, 0x30300);",
          "681:  WREG32(0x657C, 0x8EC0BF00);",
          "682:  WREG32(0x6578, 0x30301);",
          "683:  WREG32(0x657C, 0xBFC88280);",
          "684:  WREG32(0x6578, 0x30400);",
          "685:  WREG32(0x657C, 0x8DE0BEE0);",
          "686:  WREG32(0x6578, 0x30401);",
          "687:  WREG32(0x657C, 0xBFA083A0);",
          "688:  WREG32(0x6578, 0x30500);",
          "689:  WREG32(0x657C, 0x8CE0BED0);",
          "690:  WREG32(0x6578, 0x30501);",
          "691:  WREG32(0x657C, 0xBF7884E0);",
          "692:  WREG32(0x6578, 0x30600);",
          "693:  WREG32(0x657C, 0x8BA0BED8);",
          "694:  WREG32(0x6578, 0x30601);",
          "695:  WREG32(0x657C, 0xBF508640);",
          "696:  WREG32(0x6578, 0x30700);",
          "697:  WREG32(0x657C, 0x8A60BEE8);",
          "698:  WREG32(0x6578, 0x30701);",
          "699:  WREG32(0x657C, 0xBF2087A0);",
          "700:  WREG32(0x6578, 0x30800);",
          "701:  WREG32(0x657C, 0x8900BF00);",
          "702:  WREG32(0x6578, 0x30801);",
          "703:  WREG32(0x657C, 0xBF008900);",
          "",
          "[Added Lines]",
          "478: void atom_rv515_force_tv_scaler(struct radeon_device *rdev, struct radeon_crtc *crtc)",
          "480:  int index_reg = 0x6578 + crtc->crtc_offset;",
          "481:  int data_reg = 0x657c + crtc->crtc_offset;",
          "483:  WREG32(0x659C + crtc->crtc_offset, 0x0);",
          "484:  WREG32(0x6594 + crtc->crtc_offset, 0x705);",
          "485:  WREG32(0x65A4 + crtc->crtc_offset, 0x10001);",
          "486:  WREG32(0x65D8 + crtc->crtc_offset, 0x0);",
          "487:  WREG32(0x65B0 + crtc->crtc_offset, 0x0);",
          "488:  WREG32(0x65C0 + crtc->crtc_offset, 0x0);",
          "489:  WREG32(0x65D4 + crtc->crtc_offset, 0x0);",
          "490:  WREG32(index_reg, 0x0);",
          "491:  WREG32(data_reg, 0x841880A8);",
          "492:  WREG32(index_reg, 0x1);",
          "493:  WREG32(data_reg, 0x84208680);",
          "494:  WREG32(index_reg, 0x2);",
          "495:  WREG32(data_reg, 0xBFF880B0);",
          "496:  WREG32(index_reg, 0x100);",
          "497:  WREG32(data_reg, 0x83D88088);",
          "498:  WREG32(index_reg, 0x101);",
          "499:  WREG32(data_reg, 0x84608680);",
          "500:  WREG32(index_reg, 0x102);",
          "501:  WREG32(data_reg, 0xBFF080D0);",
          "502:  WREG32(index_reg, 0x200);",
          "503:  WREG32(data_reg, 0x83988068);",
          "504:  WREG32(index_reg, 0x201);",
          "505:  WREG32(data_reg, 0x84A08680);",
          "506:  WREG32(index_reg, 0x202);",
          "507:  WREG32(data_reg, 0xBFF080F8);",
          "508:  WREG32(index_reg, 0x300);",
          "509:  WREG32(data_reg, 0x83588058);",
          "510:  WREG32(index_reg, 0x301);",
          "511:  WREG32(data_reg, 0x84E08660);",
          "512:  WREG32(index_reg, 0x302);",
          "513:  WREG32(data_reg, 0xBFF88120);",
          "514:  WREG32(index_reg, 0x400);",
          "515:  WREG32(data_reg, 0x83188040);",
          "516:  WREG32(index_reg, 0x401);",
          "517:  WREG32(data_reg, 0x85008660);",
          "518:  WREG32(index_reg, 0x402);",
          "519:  WREG32(data_reg, 0xBFF88150);",
          "520:  WREG32(index_reg, 0x500);",
          "521:  WREG32(data_reg, 0x82D88030);",
          "522:  WREG32(index_reg, 0x501);",
          "523:  WREG32(data_reg, 0x85408640);",
          "524:  WREG32(index_reg, 0x502);",
          "525:  WREG32(data_reg, 0xBFF88180);",
          "526:  WREG32(index_reg, 0x600);",
          "527:  WREG32(data_reg, 0x82A08018);",
          "528:  WREG32(index_reg, 0x601);",
          "529:  WREG32(data_reg, 0x85808620);",
          "530:  WREG32(index_reg, 0x602);",
          "531:  WREG32(data_reg, 0xBFF081B8);",
          "532:  WREG32(index_reg, 0x700);",
          "533:  WREG32(data_reg, 0x82608010);",
          "534:  WREG32(index_reg, 0x701);",
          "535:  WREG32(data_reg, 0x85A08600);",
          "536:  WREG32(index_reg, 0x702);",
          "537:  WREG32(data_reg, 0x800081F0);",
          "538:  WREG32(index_reg, 0x800);",
          "539:  WREG32(data_reg, 0x8228BFF8);",
          "540:  WREG32(index_reg, 0x801);",
          "541:  WREG32(data_reg, 0x85E085E0);",
          "542:  WREG32(index_reg, 0x802);",
          "543:  WREG32(data_reg, 0xBFF88228);",
          "544:  WREG32(index_reg, 0x10000);",
          "545:  WREG32(data_reg, 0x82A8BF00);",
          "546:  WREG32(index_reg, 0x10001);",
          "547:  WREG32(data_reg, 0x82A08CC0);",
          "548:  WREG32(index_reg, 0x10002);",
          "549:  WREG32(data_reg, 0x8008BEF8);",
          "550:  WREG32(index_reg, 0x10100);",
          "551:  WREG32(data_reg, 0x81F0BF28);",
          "552:  WREG32(index_reg, 0x10101);",
          "553:  WREG32(data_reg, 0x83608CA0);",
          "554:  WREG32(index_reg, 0x10102);",
          "555:  WREG32(data_reg, 0x8018BED0);",
          "556:  WREG32(index_reg, 0x10200);",
          "557:  WREG32(data_reg, 0x8148BF38);",
          "558:  WREG32(index_reg, 0x10201);",
          "559:  WREG32(data_reg, 0x84408C80);",
          "560:  WREG32(index_reg, 0x10202);",
          "561:  WREG32(data_reg, 0x8008BEB8);",
          "562:  WREG32(index_reg, 0x10300);",
          "563:  WREG32(data_reg, 0x80B0BF78);",
          "564:  WREG32(index_reg, 0x10301);",
          "565:  WREG32(data_reg, 0x85008C20);",
          "566:  WREG32(index_reg, 0x10302);",
          "567:  WREG32(data_reg, 0x8020BEA0);",
          "568:  WREG32(index_reg, 0x10400);",
          "569:  WREG32(data_reg, 0x8028BF90);",
          "570:  WREG32(index_reg, 0x10401);",
          "571:  WREG32(data_reg, 0x85E08BC0);",
          "572:  WREG32(index_reg, 0x10402);",
          "573:  WREG32(data_reg, 0x8018BE90);",
          "574:  WREG32(index_reg, 0x10500);",
          "575:  WREG32(data_reg, 0xBFB8BFB0);",
          "576:  WREG32(index_reg, 0x10501);",
          "577:  WREG32(data_reg, 0x86C08B40);",
          "578:  WREG32(index_reg, 0x10502);",
          "579:  WREG32(data_reg, 0x8010BE90);",
          "580:  WREG32(index_reg, 0x10600);",
          "581:  WREG32(data_reg, 0xBF58BFC8);",
          "582:  WREG32(index_reg, 0x10601);",
          "583:  WREG32(data_reg, 0x87A08AA0);",
          "584:  WREG32(index_reg, 0x10602);",
          "585:  WREG32(data_reg, 0x8010BE98);",
          "586:  WREG32(index_reg, 0x10700);",
          "587:  WREG32(data_reg, 0xBF10BFF0);",
          "588:  WREG32(index_reg, 0x10701);",
          "589:  WREG32(data_reg, 0x886089E0);",
          "590:  WREG32(index_reg, 0x10702);",
          "591:  WREG32(data_reg, 0x8018BEB0);",
          "592:  WREG32(index_reg, 0x10800);",
          "593:  WREG32(data_reg, 0xBED8BFE8);",
          "594:  WREG32(index_reg, 0x10801);",
          "595:  WREG32(data_reg, 0x89408940);",
          "596:  WREG32(index_reg, 0x10802);",
          "597:  WREG32(data_reg, 0xBFE8BED8);",
          "598:  WREG32(index_reg, 0x20000);",
          "599:  WREG32(data_reg, 0x80008000);",
          "600:  WREG32(index_reg, 0x20001);",
          "601:  WREG32(data_reg, 0x90008000);",
          "602:  WREG32(index_reg, 0x20002);",
          "603:  WREG32(data_reg, 0x80008000);",
          "604:  WREG32(index_reg, 0x20003);",
          "605:  WREG32(data_reg, 0x80008000);",
          "606:  WREG32(index_reg, 0x20100);",
          "607:  WREG32(data_reg, 0x80108000);",
          "608:  WREG32(index_reg, 0x20101);",
          "609:  WREG32(data_reg, 0x8FE0BF70);",
          "610:  WREG32(index_reg, 0x20102);",
          "611:  WREG32(data_reg, 0xBFE880C0);",
          "612:  WREG32(index_reg, 0x20103);",
          "613:  WREG32(data_reg, 0x80008000);",
          "614:  WREG32(index_reg, 0x20200);",
          "615:  WREG32(data_reg, 0x8018BFF8);",
          "616:  WREG32(index_reg, 0x20201);",
          "617:  WREG32(data_reg, 0x8F80BF08);",
          "618:  WREG32(index_reg, 0x20202);",
          "619:  WREG32(data_reg, 0xBFD081A0);",
          "620:  WREG32(index_reg, 0x20203);",
          "621:  WREG32(data_reg, 0xBFF88000);",
          "622:  WREG32(index_reg, 0x20300);",
          "623:  WREG32(data_reg, 0x80188000);",
          "624:  WREG32(index_reg, 0x20301);",
          "625:  WREG32(data_reg, 0x8EE0BEC0);",
          "626:  WREG32(index_reg, 0x20302);",
          "627:  WREG32(data_reg, 0xBFB082A0);",
          "628:  WREG32(index_reg, 0x20303);",
          "629:  WREG32(data_reg, 0x80008000);",
          "630:  WREG32(index_reg, 0x20400);",
          "631:  WREG32(data_reg, 0x80188000);",
          "632:  WREG32(index_reg, 0x20401);",
          "633:  WREG32(data_reg, 0x8E00BEA0);",
          "634:  WREG32(index_reg, 0x20402);",
          "635:  WREG32(data_reg, 0xBF8883C0);",
          "636:  WREG32(index_reg, 0x20403);",
          "637:  WREG32(data_reg, 0x80008000);",
          "638:  WREG32(index_reg, 0x20500);",
          "639:  WREG32(data_reg, 0x80188000);",
          "640:  WREG32(index_reg, 0x20501);",
          "641:  WREG32(data_reg, 0x8D00BE90);",
          "642:  WREG32(index_reg, 0x20502);",
          "643:  WREG32(data_reg, 0xBF588500);",
          "644:  WREG32(index_reg, 0x20503);",
          "645:  WREG32(data_reg, 0x80008008);",
          "646:  WREG32(index_reg, 0x20600);",
          "647:  WREG32(data_reg, 0x80188000);",
          "648:  WREG32(index_reg, 0x20601);",
          "649:  WREG32(data_reg, 0x8BC0BE98);",
          "650:  WREG32(index_reg, 0x20602);",
          "651:  WREG32(data_reg, 0xBF308660);",
          "652:  WREG32(index_reg, 0x20603);",
          "653:  WREG32(data_reg, 0x80008008);",
          "654:  WREG32(index_reg, 0x20700);",
          "655:  WREG32(data_reg, 0x80108000);",
          "656:  WREG32(index_reg, 0x20701);",
          "657:  WREG32(data_reg, 0x8A80BEB0);",
          "658:  WREG32(index_reg, 0x20702);",
          "659:  WREG32(data_reg, 0xBF0087C0);",
          "660:  WREG32(index_reg, 0x20703);",
          "661:  WREG32(data_reg, 0x80008008);",
          "662:  WREG32(index_reg, 0x20800);",
          "663:  WREG32(data_reg, 0x80108000);",
          "664:  WREG32(index_reg, 0x20801);",
          "665:  WREG32(data_reg, 0x8920BED0);",
          "666:  WREG32(index_reg, 0x20802);",
          "667:  WREG32(data_reg, 0xBED08920);",
          "668:  WREG32(index_reg, 0x20803);",
          "669:  WREG32(data_reg, 0x80008010);",
          "670:  WREG32(index_reg, 0x30000);",
          "671:  WREG32(data_reg, 0x90008000);",
          "672:  WREG32(index_reg, 0x30001);",
          "673:  WREG32(data_reg, 0x80008000);",
          "674:  WREG32(index_reg, 0x30100);",
          "675:  WREG32(data_reg, 0x8FE0BF90);",
          "676:  WREG32(index_reg, 0x30101);",
          "677:  WREG32(data_reg, 0xBFF880A0);",
          "678:  WREG32(index_reg, 0x30200);",
          "679:  WREG32(data_reg, 0x8F60BF40);",
          "680:  WREG32(index_reg, 0x30201);",
          "681:  WREG32(data_reg, 0xBFE88180);",
          "682:  WREG32(index_reg, 0x30300);",
          "683:  WREG32(data_reg, 0x8EC0BF00);",
          "684:  WREG32(index_reg, 0x30301);",
          "685:  WREG32(data_reg, 0xBFC88280);",
          "686:  WREG32(index_reg, 0x30400);",
          "687:  WREG32(data_reg, 0x8DE0BEE0);",
          "688:  WREG32(index_reg, 0x30401);",
          "689:  WREG32(data_reg, 0xBFA083A0);",
          "690:  WREG32(index_reg, 0x30500);",
          "691:  WREG32(data_reg, 0x8CE0BED0);",
          "692:  WREG32(index_reg, 0x30501);",
          "693:  WREG32(data_reg, 0xBF7884E0);",
          "694:  WREG32(index_reg, 0x30600);",
          "695:  WREG32(data_reg, 0x8BA0BED8);",
          "696:  WREG32(index_reg, 0x30601);",
          "697:  WREG32(data_reg, 0xBF508640);",
          "698:  WREG32(index_reg, 0x30700);",
          "699:  WREG32(data_reg, 0x8A60BEE8);",
          "700:  WREG32(index_reg, 0x30701);",
          "701:  WREG32(data_reg, 0xBF2087A0);",
          "702:  WREG32(index_reg, 0x30800);",
          "703:  WREG32(data_reg, 0x8900BF00);",
          "704:  WREG32(index_reg, 0x30801);",
          "705:  WREG32(data_reg, 0xBF008900);",
          "",
          "---------------"
        ]
      }
    }
  ]
}