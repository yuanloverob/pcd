{
  "cve_id": "CVE-2022-3287",
  "cve_desc": "When creating an OPERATOR user account on the BMC, the redfish plugin saved the auto-generated password to /etc/fwupd/redfish.conf without proper restriction, allowing any user on the system to read the same configuration file.",
  "repo": "fwupd/fwupd",
  "patch_hash": "ea676855f2119e36d433fbd2ed604039f53b2091",
  "patch_info": {
    "commit_hash": "ea676855f2119e36d433fbd2ed604039f53b2091",
    "repo": "fwupd/fwupd",
    "commit_url": "https://github.com/fwupd/fwupd/commit/ea676855f2119e36d433fbd2ed604039f53b2091",
    "files": [
      "contrib/fwupd.spec.in",
      "libfwupdplugin/fu-plugin.c",
      "libfwupdplugin/fu-self-test.c"
    ],
    "message": "Never save the Redfish passwords to a file readable by users\n\nWhen the redfish plugin automatically creates an OPERATOR user account on the\nBMC we save the autogenerated password to /etc/fwupd/redfish.conf, ensuring it\nis chmod'ed to 0660 before writing the file with g_key_file_save_to_file().\n\nUnder the covers, g_key_file_save_to_file() calls g_file_set_contents() with\nthe keyfile string data.\nI was under the impression that G_FILE_CREATE_REPLACE_DESTINATION was being\nused to copy permissions, but alas not.\n\nGLib instead calls g_file_set_contents_full() with the mode hardcoded to 0666,\nwhich undoes the previous chmod().\n\nUse g_file_set_contents_full() with the correct mode for newer GLib versions,\nand provide a fallback with the same semantics for older versions.",
    "before_after_code_files": [
      "contrib/fwupd.spec.in||contrib/fwupd.spec.in",
      "libfwupdplugin/fu-plugin.c||libfwupdplugin/fu-plugin.c",
      "libfwupdplugin/fu-self-test.c||libfwupdplugin/fu-self-test.c"
    ]
  },
  "patch_diff": {
    "contrib/fwupd.spec.in||contrib/fwupd.spec.in": [
      "File: contrib/fwupd.spec.in -> contrib/fwupd.spec.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "326:     fi",
      "327: done",
      "329: %preun",
      "330: %systemd_preun fwupd.service",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "329: # ensure this is private",
      "330: chmod 0660 /etc/fwupd/redfish.conf",
      "",
      "---------------"
    ],
    "libfwupdplugin/fu-plugin.c||libfwupdplugin/fu-plugin.c": [
      "File: libfwupdplugin/fu-plugin.c -> libfwupdplugin/fu-plugin.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: #include \"config.h\"",
      "11: #include <errno.h>",
      "12: #include <fwupd.h>",
      "13: #include <glib/gstdio.h>",
      "14: #include <gmodule.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: #include <fcntl.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2417:  return g_key_file_save_to_file(keyfile, conf_path, error);",
      "2418: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2421: #if !GLIB_CHECK_VERSION(2, 66, 0)",
      "2423: #define G_FILE_SET_CONTENTS_CONSISTENT 0",
      "2424: typedef guint GFileSetContentsFlags;",
      "2425: static gboolean",
      "2426: g_file_set_contents_full(const gchar *filename,",
      "2427:     const gchar *contents,",
      "2428:     gssize length,",
      "2429:     GFileSetContentsFlags flags,",
      "2430:     int mode,",
      "2431:     GError **error)",
      "2432: {",
      "2433:  gint fd;",
      "2434:  gssize wrote;",
      "2436:  if (length < 0)",
      "2437:   length = strlen(contents);",
      "2438:  fd = g_open(filename, O_CREAT, mode);",
      "2439:  if (fd <= 0) {",
      "2440:   g_set_error(error,",
      "2441:        G_IO_ERROR,",
      "2442:        G_IO_ERROR_FAILED,",
      "2443:        \"could not open %s file\",",
      "2444:        filename);",
      "2445:   return FALSE;",
      "2446:  }",
      "2447:  wrote = write(fd, contents, length);",
      "2448:  if (wrote != length) {",
      "2449:   g_set_error(error,",
      "2450:        G_IO_ERROR,",
      "2451:        G_IO_ERROR_FAILED,",
      "2452:        \"did not write %s file\",",
      "2453:        filename);",
      "2454:   g_close(fd, NULL);",
      "2455:   return FALSE;",
      "2456:  }",
      "2457:  return g_close(fd, error);",
      "2458: }",
      "2459: #endif",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2438:       GError **error)",
      "2439: {",
      "2440:  g_autofree gchar *conf_path = fu_plugin_get_config_filename(self);",
      "2443:  g_return_val_if_fail(FU_IS_PLUGIN(self), FALSE);",
      "2444:  g_return_val_if_fail(error == NULL || *error == NULL, FALSE);",
      "",
      "[Removed Lines]",
      "2441:  gint ret;",
      "",
      "[Added Lines]",
      "2482:  g_autofree gchar *data = NULL;",
      "2483:  g_autoptr(GKeyFile) keyfile = g_key_file_new();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2447:   g_set_error(error, FWUPD_ERROR, FWUPD_ERROR_NOT_FOUND, \"%s is missing\", conf_path);",
      "2448:   return FALSE;",
      "2449:  }",
      "2457:   return FALSE;",
      "2461: }",
      "",
      "[Removed Lines]",
      "2450:  ret = g_chmod(conf_path, 0660);",
      "2451:  if (ret == -1) {",
      "2452:   g_set_error(error,",
      "2453:        FWUPD_ERROR,",
      "2454:        FWUPD_ERROR_INTERNAL,",
      "2455:        \"failed to set permissions on %s\",",
      "2456:        conf_path);",
      "2458:  }",
      "2460:  return fu_plugin_set_config_value(self, key, value, error);",
      "",
      "[Added Lines]",
      "2492:  if (!g_key_file_load_from_file(keyfile, conf_path, G_KEY_FILE_KEEP_COMMENTS, error))",
      "2494:  g_key_file_set_string(keyfile, fu_plugin_get_name(self), key, value);",
      "2495:  data = g_key_file_to_data(keyfile, NULL, error);",
      "2496:  if (data == NULL)",
      "2497:   return FALSE;",
      "2498:  return g_file_set_contents_full(conf_path,",
      "2499:      data,",
      "2500:      -1,",
      "2501:      G_FILE_SET_CONTENTS_CONSISTENT,",
      "2502:      0660,",
      "2503:      error);",
      "",
      "---------------"
    ],
    "libfwupdplugin/fu-self-test.c||libfwupdplugin/fu-self-test.c": [
      "File: libfwupdplugin/fu-self-test.c -> libfwupdplugin/fu-self-test.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "674:  fu_test_loop_quit();",
      "675: }",
      "677: static void",
      "678: fu_plugin_devices_func(void)",
      "679: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "677: static void",
      "678: fu_plugin_config_func(void)",
      "679: {",
      "680:  GStatBuf statbuf = {0};",
      "681:  gboolean ret;",
      "682:  gint rc;",
      "683:  g_autofree gchar *conf_dir = NULL;",
      "684:  g_autofree gchar *conf_file = NULL;",
      "685:  g_autofree gchar *fn = NULL;",
      "686:  g_autofree gchar *testdatadir = NULL;",
      "687:  g_autofree gchar *value = NULL;",
      "688:  g_autoptr(FuPlugin) plugin = fu_plugin_new(NULL);",
      "689:  g_autoptr(GError) error = NULL;",
      "692:  testdatadir = g_test_build_filename(G_TEST_BUILT, \"tests\", NULL);",
      "693:  (void)g_setenv(\"FWUPD_SYSCONFDIR\", testdatadir, TRUE);",
      "694:  conf_dir = fu_path_from_kind(FU_PATH_KIND_SYSCONFDIR_PKG);",
      "697:  fu_plugin_set_name(plugin, \"test\");",
      "698:  conf_file = g_strdup_printf(\"%s.conf\", fu_plugin_get_name(plugin));",
      "699:  fn = g_build_filename(conf_dir, conf_file, NULL);",
      "700:  ret = fu_path_mkdir_parent(fn, &error);",
      "701:  g_assert_no_error(error);",
      "702:  g_assert_true(ret);",
      "703:  g_remove(fn);",
      "704:  ret = g_file_set_contents(fn, \"\", -1, &error);",
      "705:  g_assert_no_error(error);",
      "706:  g_assert_true(ret);",
      "709:  ret = fu_plugin_set_config_value(plugin, \"Key\", \"True\", &error);",
      "710:  g_assert_no_error(error);",
      "711:  g_assert_true(ret);",
      "712:  g_assert_true(g_file_test(fn, G_FILE_TEST_EXISTS));",
      "715:  rc = g_stat(fn, &statbuf);",
      "716:  g_assert_cmpint(rc, ==, 0);",
      "717:  g_assert_cmpint(statbuf.st_mode & 0777, ==, 0644);",
      "720:  value = fu_plugin_get_config_value(plugin, \"Key\");",
      "721:  g_assert_cmpstr(value, ==, \"True\");",
      "722:  g_assert_true(fu_plugin_get_config_value_boolean(plugin, \"Key\"));",
      "725:  ret = fu_plugin_set_secure_config_value(plugin, \"Key\", \"False\", &error);",
      "726:  g_assert_no_error(error);",
      "727:  g_assert_true(ret);",
      "728:  rc = g_stat(fn, &statbuf);",
      "729:  g_assert_cmpint(rc, ==, 0);",
      "730:  g_assert_cmpint(statbuf.st_mode & 0777, ==, 0640);",
      "731: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3598:  g_test_add_func(\"/fwupd/progress{finish}\", fu_progress_finish_func);",
      "3599:  g_test_add_func(\"/fwupd/bios-attrs{load}\", fu_bios_settings_load_func);",
      "3600:  g_test_add_func(\"/fwupd/security-attrs{hsi}\", fu_security_attrs_hsi_func);",
      "3601:  g_test_add_func(\"/fwupd/plugin{devices}\", fu_plugin_devices_func);",
      "3602:  g_test_add_func(\"/fwupd/plugin{device-inhibit-children}\",",
      "3603:    fu_plugin_device_inhibit_children_func);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3657:  g_test_add_func(\"/fwupd/plugin{config}\", fu_plugin_config_func);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1304c8f8778efa13b3f93efd47cf66c659443acf",
      "candidate_info": {
        "commit_hash": "1304c8f8778efa13b3f93efd47cf66c659443acf",
        "repo": "fwupd/fwupd",
        "commit_url": "https://github.com/fwupd/fwupd/commit/1304c8f8778efa13b3f93efd47cf66c659443acf",
        "files": [
          "libfwupdplugin/README.md",
          "libfwupdplugin/fu-plugin.c",
          "libfwupdplugin/fu-plugin.h",
          "libfwupdplugin/fu-self-test.c",
          "plugins/msr/fu-msr-plugin.c",
          "plugins/redfish/fu-redfish-plugin.c",
          "plugins/thunderbolt/fu-thunderbolt-plugin.c",
          "plugins/uefi-capsule/fu-uefi-capsule-plugin.c",
          "src/fu-engine.c"
        ],
        "message": "Move the expected default plugin config value to the code\n\nThis means we can ship a fwupd without any config files at all, and reduces the\nmental gymnastics when reading empty integer values.",
        "before_after_code_files": [
          "libfwupdplugin/fu-plugin.c||libfwupdplugin/fu-plugin.c",
          "libfwupdplugin/fu-plugin.h||libfwupdplugin/fu-plugin.h",
          "libfwupdplugin/fu-self-test.c||libfwupdplugin/fu-self-test.c",
          "plugins/msr/fu-msr-plugin.c||plugins/msr/fu-msr-plugin.c",
          "plugins/redfish/fu-redfish-plugin.c||plugins/redfish/fu-redfish-plugin.c",
          "plugins/thunderbolt/fu-thunderbolt-plugin.c||plugins/thunderbolt/fu-thunderbolt-plugin.c",
          "plugins/uefi-capsule/fu-uefi-capsule-plugin.c||plugins/uefi-capsule/fu-uefi-capsule-plugin.c",
          "src/fu-engine.c||src/fu-engine.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfwupdplugin/fu-plugin.c||libfwupdplugin/fu-plugin.c",
            "libfwupdplugin/fu-self-test.c||libfwupdplugin/fu-self-test.c"
          ],
          "candidate": [
            "libfwupdplugin/fu-plugin.c||libfwupdplugin/fu-plugin.c",
            "libfwupdplugin/fu-self-test.c||libfwupdplugin/fu-self-test.c"
          ]
        }
      },
      "candidate_diff": {
        "libfwupdplugin/fu-plugin.c||libfwupdplugin/fu-plugin.c": [
          "File: libfwupdplugin/fu-plugin.c -> libfwupdplugin/fu-plugin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2419: gchar *",
          "2421: {",
          "2422:  g_autofree gchar *conf_path = fu_plugin_get_config_filename(self);",
          "2423:  g_autoptr(GKeyFile) keyfile = NULL;",
          "2424:  if (!g_file_test(conf_path, G_FILE_TEST_IS_REGULAR))",
          "2426:  keyfile = g_key_file_new();",
          "2427:  if (!g_key_file_load_from_file(keyfile, conf_path, G_KEY_FILE_NONE, NULL))",
          "2430: }",
          "",
          "[Removed Lines]",
          "2420: fu_plugin_get_config_value(FuPlugin *self, const gchar *key)",
          "2425:   return NULL;",
          "2428:   return NULL;",
          "2429:  return g_key_file_get_string(keyfile, fu_plugin_get_name(self), key, NULL);",
          "",
          "[Added Lines]",
          "2421: fu_plugin_get_config_value(FuPlugin *self, const gchar *key, const gchar *value_default)",
          "2424:  g_autofree gchar *value = NULL;",
          "2427:   return g_strdup(value_default);",
          "2430:   return g_strdup(value_default);",
          "2431:  value = g_key_file_get_string(keyfile, fu_plugin_get_name(self), key, NULL);",
          "2432:  if (value == NULL)",
          "2433:   return g_strdup(value_default);",
          "2434:  return g_steal_pointer(&value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2575: gboolean",
          "2577: {",
          "2579:  if (tmp == NULL)",
          "2581:  return g_ascii_strcasecmp(tmp, \"true\") == 0;",
          "2582: }",
          "",
          "[Removed Lines]",
          "2576: fu_plugin_get_config_value_boolean(FuPlugin *self, const gchar *key)",
          "2578:  g_autofree gchar *tmp = fu_plugin_get_config_value(self, key);",
          "2580:   return FALSE;",
          "",
          "[Added Lines]",
          "2582: fu_plugin_get_config_value_boolean(FuPlugin *self, const gchar *key, gboolean value_default)",
          "2584:  g_autofree gchar *tmp = fu_plugin_get_config_value(self, key, NULL);",
          "2586:   return value_default;",
          "",
          "---------------"
        ],
        "libfwupdplugin/fu-plugin.h||libfwupdplugin/fu-plugin.h": [
          "File: libfwupdplugin/fu-plugin.h -> libfwupdplugin/fu-plugin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "448: void",
          "449: fu_plugin_add_report_metadata(FuPlugin *self, const gchar *key, const gchar *value);",
          "450: gchar *",
          "452: gboolean",
          "454: gboolean",
          "455: fu_plugin_set_config_value(FuPlugin *self, const gchar *key, const gchar *value, GError **error);",
          "456: FwupdSecurityAttr *",
          "",
          "[Removed Lines]",
          "451: fu_plugin_get_config_value(FuPlugin *self, const gchar *key);",
          "453: fu_plugin_get_config_value_boolean(FuPlugin *self, const gchar *key);",
          "",
          "[Added Lines]",
          "451: fu_plugin_get_config_value(FuPlugin *self, const gchar *key, const gchar *value_default);",
          "453: fu_plugin_get_config_value_boolean(FuPlugin *self, const gchar *key, gboolean value_default);",
          "",
          "---------------"
        ],
        "libfwupdplugin/fu-self-test.c||libfwupdplugin/fu-self-test.c": [
          "File: libfwupdplugin/fu-self-test.c -> libfwupdplugin/fu-self-test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "649:  g_autofree gchar *fn = NULL;",
          "650:  g_autofree gchar *testdatadir = NULL;",
          "651:  g_autofree gchar *value = NULL;",
          "652:  g_autoptr(FuPlugin) plugin = fu_plugin_new(NULL);",
          "653:  g_autoptr(GError) error = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "652:  g_autofree gchar *value_missing = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "681:  g_assert_cmpint(statbuf.st_mode & 0777, ==, 0644);",
          "685:  g_assert_cmpstr(value, ==, \"True\");",
          "689:  fu_plugin_add_flag(plugin, FWUPD_PLUGIN_FLAG_SECURE_CONFIG);",
          "",
          "[Removed Lines]",
          "684:  value = fu_plugin_get_config_value(plugin, \"Key\");",
          "686:  g_assert_true(fu_plugin_get_config_value_boolean(plugin, \"Key\"));",
          "",
          "[Added Lines]",
          "685:  value_missing = fu_plugin_get_config_value(plugin, \"NotGoingToExist\", \"Foo\");",
          "686:  g_assert_cmpstr(value_missing, ==, \"Foo\");",
          "687:  value = fu_plugin_get_config_value(plugin, \"Key\", \"Foo\");",
          "689:  g_assert_true(fu_plugin_get_config_value_boolean(plugin, \"Key\", FALSE));",
          "",
          "---------------"
        ],
        "plugins/msr/fu-msr-plugin.c||plugins/msr/fu-msr-plugin.c": [
          "File: plugins/msr/fu-msr-plugin.c -> plugins/msr/fu-msr-plugin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "412: static gboolean",
          "413: fu_msr_plugin_safe_kernel_for_sme(FuPlugin *plugin, GError **error)",
          "414: {",
          "421:  return fu_kernel_check_version(min, error);",
          "422: }",
          "",
          "[Removed Lines]",
          "415:  g_autofree gchar *min = fu_plugin_get_config_value(plugin, \"MinimumSmeKernelVersion\");",
          "417:  if (min == NULL) {",
          "418:   g_debug(\"ignoring kernel safety checks\");",
          "419:   return TRUE;",
          "420:  }",
          "",
          "[Added Lines]",
          "415:  g_autofree gchar *min =",
          "416:      fu_plugin_get_config_value(plugin, \"MinimumSmeKernelVersion\", \"5.18.0\");",
          "",
          "---------------"
        ],
        "plugins/redfish/fu-redfish-plugin.c||plugins/redfish/fu-redfish-plugin.c": [
          "File: plugins/redfish/fu-redfish-plugin.c -> plugins/redfish/fu-redfish-plugin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:  g_autoptr(JsonBuilder) builder = json_builder_new();",
          "69:  if (uri == NULL) {",
          "70:   uri = g_strdup(\"/redfish/v1/AccountService/Accounts/2\");",
          "71:   if (!fu_plugin_set_config_value(plugin, \"UserUri\", uri, error))",
          "",
          "[Removed Lines]",
          "68:  uri = fu_plugin_get_config_value(plugin, \"UserUri\");",
          "",
          "[Added Lines]",
          "68:  uri = fu_plugin_get_config_value(plugin, \"UserUri\", NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383: fu_redfish_plugin_startup(FuPlugin *plugin, FuProgress *progress, GError **error)",
          "384: {",
          "385:  FuRedfishPlugin *self = FU_REDFISH_PLUGIN(plugin);",
          "387:  g_autofree gchar *password = NULL;",
          "388:  g_autofree gchar *redfish_uri = NULL;",
          "389:  g_autofree gchar *username = NULL;",
          "",
          "[Removed Lines]",
          "386:  g_autofree gchar *ca_check_str = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "400:  }",
          "404:  if (redfish_uri != NULL) {",
          "405:   const gchar *ip_str = NULL;",
          "406:   g_auto(GStrv) split = NULL;",
          "",
          "[Removed Lines]",
          "403:  redfish_uri = fu_plugin_get_config_value(plugin, \"Uri\");",
          "",
          "[Added Lines]",
          "402:  redfish_uri = fu_plugin_get_config_value(plugin, \"Uri\", NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "435:   }",
          "436:   fu_redfish_backend_set_port(self->backend, port);",
          "437:  }",
          "439:  if (username != NULL)",
          "440:   fu_redfish_backend_set_username(self->backend, username);",
          "442:  if (password != NULL)",
          "443:   fu_redfish_backend_set_password(self->backend, password);",
          "449:  if (fu_context_has_hwid_flag(fu_plugin_get_context(plugin), \"wildcard-targets\"))",
          "450:   fu_redfish_backend_set_wildcard_targets(self->backend, TRUE);",
          "",
          "[Removed Lines]",
          "438:  username = fu_plugin_get_config_value(plugin, \"Username\");",
          "441:  password = fu_plugin_get_config_value(plugin, \"Password\");",
          "444:  ca_check_str = fu_plugin_get_config_value(plugin, \"CACheck\");",
          "445:  if (ca_check_str != NULL) {",
          "446:   gboolean ca_check = fu_plugin_get_config_value_boolean(plugin, \"CACheck\");",
          "447:   fu_redfish_backend_set_cacheck(self->backend, ca_check);",
          "448:  }",
          "",
          "[Added Lines]",
          "437:  username = fu_plugin_get_config_value(plugin, \"Username\", NULL);",
          "440:  password = fu_plugin_get_config_value(plugin, \"Password\", NULL);",
          "443:  fu_redfish_backend_set_cacheck(",
          "444:      self->backend,",
          "445:      fu_plugin_get_config_value_boolean(plugin, \"CACheck\", FALSE));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "460:          \"and no vendor quirk for 'ipmi-create-user'\");",
          "461:    return FALSE;",
          "462:   }",
          "464:    g_info(\"attempting to create user using IPMI\");",
          "465:    if (!fu_redfish_plugin_ipmi_create_user(plugin, error))",
          "466:     return FALSE;",
          "",
          "[Removed Lines]",
          "463:   if (!fu_plugin_get_config_value_boolean(plugin, \"IpmiDisableCreateUser\")) {",
          "",
          "[Added Lines]",
          "460:   if (!fu_plugin_get_config_value_boolean(plugin, \"IpmiDisableCreateUser\", FALSE)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "550:  fu_progress_step_done(progress);",
          "562:  if (!fu_device_retry_full(device,",
          "",
          "[Removed Lines]",
          "553:  restart_timeout_str = fu_plugin_get_config_value(plugin, \"ManagerResetTimeout\");",
          "554:  if (restart_timeout_str != NULL)",
          "555:   fu_strtoull(restart_timeout_str, &reset_timeout, 1, 86400, NULL);",
          "556:  if (reset_timeout == 0) {",
          "557:   g_warning(\"no valid ManagerResetTimeout, falling back to default\");",
          "558:   reset_timeout = 1800;",
          "559:  }",
          "",
          "[Added Lines]",
          "550:  restart_timeout_str = fu_plugin_get_config_value(plugin, \"ManagerResetTimeout\", \"1800\");",
          "551:  if (!fu_strtoull(restart_timeout_str, &reset_timeout, 1, 86400, error))",
          "552:   return FALSE;",
          "",
          "---------------"
        ],
        "plugins/thunderbolt/fu-thunderbolt-plugin.c||plugins/thunderbolt/fu-thunderbolt-plugin.c": [
          "File: plugins/thunderbolt/fu-thunderbolt-plugin.c -> plugins/thunderbolt/fu-thunderbolt-plugin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: static gboolean",
          "25: fu_thunderbolt_plugin_safe_kernel(FuPlugin *plugin, GError **error)",
          "26: {",
          "35: }",
          "37: static gboolean",
          "",
          "[Removed Lines]",
          "27:  g_autofree gchar *minimum_kernel = NULL;",
          "29:  minimum_kernel = fu_plugin_get_config_value(plugin, \"MinimumKernelVersion\");",
          "30:  if (minimum_kernel == NULL) {",
          "31:   g_debug(\"ignoring kernel safety checks\");",
          "32:   return TRUE;",
          "33:  }",
          "34:  return fu_kernel_check_version(minimum_kernel, error);",
          "",
          "[Added Lines]",
          "27:  g_autofree gchar *min =",
          "28:      fu_plugin_get_config_value(plugin, \"MinimumKernelVersion\", \"4.13.0\");",
          "29:  return fu_kernel_check_version(min, error);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:  fu_plugin_add_rule(plugin,",
          "41:       FU_PLUGIN_RULE_INHIBITS_IDLE,",
          "42:       \"thunderbolt requires device wakeup\");",
          "44:   fu_device_add_private_flag(dev, FU_THUNDERBOLT_DEVICE_FLAG_FORCE_ENUMERATION);",
          "45:  return TRUE;",
          "46: }",
          "",
          "[Removed Lines]",
          "43:  if (fu_plugin_get_config_value_boolean(plugin, \"RetimerOfflineMode\"))",
          "",
          "[Added Lines]",
          "38:  if (fu_plugin_get_config_value_boolean(plugin, \"RetimerOfflineMode\", FALSE))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:   return;",
          "56:      !fu_device_has_flag(device, FWUPD_DEVICE_FLAG_USABLE_DURING_UPDATE)) {",
          "57:   g_info(\"turning on delayed activation for %s\", fu_device_get_name(device));",
          "58:   fu_device_add_flag(device, FWUPD_DEVICE_FLAG_USABLE_DURING_UPDATE);",
          "",
          "[Removed Lines]",
          "55:  if (fu_plugin_get_config_value_boolean(plugin, \"DelayedActivation\") &&",
          "",
          "[Added Lines]",
          "50:  if (fu_plugin_get_config_value_boolean(plugin, \"DelayedActivation\", FALSE) &&",
          "",
          "---------------"
        ],
        "plugins/uefi-capsule/fu-uefi-capsule-plugin.c||plugins/uefi-capsule/fu-uefi-capsule-plugin.c": [
          "File: plugins/uefi-capsule/fu-uefi-capsule-plugin.c -> plugins/uefi-capsule/fu-uefi-capsule-plugin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432: static void",
          "433: fu_uefi_capsule_plugin_load_config(FuPlugin *plugin, FuDevice *device)",
          "434: {",
          "437:  guint64 sz_reqd = 0;",
          "438:  g_autofree gchar *require_esp_free_space = NULL;",
          "439:  g_autoptr(GError) error_local = NULL;",
          "448:  fu_uefi_device_set_require_esp_free_space(FU_UEFI_DEVICE(device), sz_reqd);",
          "453:   fu_device_add_private_flag(device, FU_UEFI_DEVICE_FLAG_USE_SHIM_FOR_SB);",
          "458:   fu_device_add_private_flag(device, FU_UEFI_DEVICE_FLAG_ENABLE_EFI_DEBUGGING);",
          "459: }",
          "",
          "[Removed Lines]",
          "435:  gboolean disable_shim;",
          "436:  gboolean enable_efi_debugging;",
          "442:  require_esp_free_space = fu_plugin_get_config_value(plugin, \"RequireESPFreeSpace\");",
          "443:  if (require_esp_free_space != NULL) {",
          "444:   if (!fu_strtoull(require_esp_free_space, &sz_reqd, 0, G_MAXUINT64, &error_local)) {",
          "445:    g_warning(\"invalid ESP free space specified: %s\", error_local->message);",
          "446:   }",
          "447:  }",
          "451:  disable_shim = fu_plugin_get_config_value_boolean(plugin, \"DisableShimForSecureBoot\");",
          "452:  if (!disable_shim)",
          "456:  enable_efi_debugging = fu_plugin_get_config_value_boolean(plugin, \"EnableEfiDebugging\");",
          "457:  if (enable_efi_debugging)",
          "",
          "[Added Lines]",
          "440:  require_esp_free_space = fu_plugin_get_config_value(plugin, \"RequireESPFreeSpace\", \"0x0\");",
          "441:  if (!fu_strtoull(require_esp_free_space, &sz_reqd, 0, G_MAXUINT64, &error_local))",
          "442:   g_warning(\"invalid ESP free space specified: %s\", error_local->message);",
          "446:  if (!fu_plugin_get_config_value_boolean(plugin, \"DisableShimForSecureBoot\", FALSE))",
          "450:  if (fu_plugin_get_config_value_boolean(plugin, \"EnableEfiDebugging\", FALSE))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "702:   return TRUE;",
          "706:   fu_uefi_backend_set_device_gtype(FU_UEFI_BACKEND(self->backend),",
          "707:        FU_TYPE_UEFI_GRUB_DEVICE);",
          "708:  }",
          "",
          "[Removed Lines]",
          "705:  if (fu_plugin_get_config_value_boolean(plugin, \"EnableGrubChainLoad\")) {",
          "",
          "[Added Lines]",
          "698:  if (fu_plugin_get_config_value_boolean(plugin, \"EnableGrubChainLoad\", FALSE)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "728:  fu_plugin_add_report_metadata(plugin, \"EfivarNvramUsed\", nvram_total_str);",
          "732:  if (esp_path != NULL) {",
          "733:   self->esp = fu_volume_new_esp_for_path(esp_path, error);",
          "734:   if (self->esp == NULL) {",
          "",
          "[Removed Lines]",
          "731:  esp_path = fu_plugin_get_config_value(plugin, \"OverrideESPMountPoint\");",
          "",
          "[Added Lines]",
          "724:  esp_path = fu_plugin_get_config_value(plugin, \"OverrideESPMountPoint\", NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "919:  fu_progress_step_done(progress);",
          "923:   g_autoptr(GError) error_cod = NULL;",
          "924:   if (!fu_uefi_capsule_plugin_check_cod_support(plugin, &error_cod)) {",
          "925:    g_debug(\"not using CapsuleOnDisk support: %s\", error_cod->message);",
          "",
          "[Removed Lines]",
          "922:  if (!fu_plugin_get_config_value_boolean(plugin, \"DisableCapsuleUpdateOnDisk\")) {",
          "",
          "[Added Lines]",
          "915:  if (!fu_plugin_get_config_value_boolean(plugin, \"DisableCapsuleUpdateOnDisk\", FALSE)) {",
          "",
          "---------------"
        ],
        "src/fu-engine.c||src/fu-engine.c": [
          "File: src/fu-engine.c -> src/fu-engine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8356:  plugin_uefi = fu_plugin_list_find_by_name(self->plugin_list, \"uefi_capsule\", NULL);",
          "8357:  if (plugin_uefi != NULL) {",
          "8359:   if (tmp != NULL && g_strcmp0(tmp, fu_config_get_esp_location(self->config)) != 0) {",
          "8360:    g_info(\"migrating OverrideESPMountPoint=%s to EspLocation\", tmp);",
          "8361:    if (!fu_config_set_key_value(self->config, \"EspLocation\", tmp, error))",
          "",
          "[Removed Lines]",
          "8358:   const gchar *tmp = fu_plugin_get_config_value(plugin_uefi, \"OverrideESPMountPoint\");",
          "",
          "[Added Lines]",
          "8358:   const gchar *tmp =",
          "8359:       fu_plugin_get_config_value(plugin_uefi, \"OverrideESPMountPoint\", NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c73a55faa14f73fdf3c09a0ab0d3394a94325091",
      "candidate_info": {
        "commit_hash": "c73a55faa14f73fdf3c09a0ab0d3394a94325091",
        "repo": "fwupd/fwupd",
        "commit_url": "https://github.com/fwupd/fwupd/commit/c73a55faa14f73fdf3c09a0ab0d3394a94325091",
        "files": [
          "contrib/fwupd.spec.in",
          "libfwupd/fwupd-enums.c",
          "libfwupd/fwupd-enums.h",
          "libfwupd/fwupd-self-test.c",
          "libfwupdplugin/README.md",
          "libfwupdplugin/fu-plugin.c",
          "libfwupdplugin/fu-plugin.h",
          "libfwupdplugin/fu-self-test.c",
          "plugins/redfish/fu-plugin-redfish.c",
          "src/fu-util-common.c"
        ],
        "message": "Remove a potential foot-gun when saving config values\n\nIf a specific plugin calls fu_plugin_set_secure_config_value() and then\nfu_plugin_set_config_value() then we'll save the file with the world-readable\npermissions.\n\nSet a plugin flag to say that 'this plugin is storing sensitive details' which\nallows us to use the same entrypoint and also fix up any files at startup that\ndo not have the correct permissions.",
        "before_after_code_files": [
          "contrib/fwupd.spec.in||contrib/fwupd.spec.in",
          "libfwupd/fwupd-enums.c||libfwupd/fwupd-enums.c",
          "libfwupd/fwupd-enums.h||libfwupd/fwupd-enums.h",
          "libfwupd/fwupd-self-test.c||libfwupd/fwupd-self-test.c",
          "libfwupdplugin/fu-plugin.c||libfwupdplugin/fu-plugin.c",
          "libfwupdplugin/fu-plugin.h||libfwupdplugin/fu-plugin.h",
          "libfwupdplugin/fu-self-test.c||libfwupdplugin/fu-self-test.c",
          "plugins/redfish/fu-plugin-redfish.c||plugins/redfish/fu-plugin-redfish.c",
          "src/fu-util-common.c||src/fu-util-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "contrib/fwupd.spec.in||contrib/fwupd.spec.in",
            "libfwupdplugin/fu-plugin.c||libfwupdplugin/fu-plugin.c",
            "libfwupdplugin/fu-self-test.c||libfwupdplugin/fu-self-test.c"
          ],
          "candidate": [
            "contrib/fwupd.spec.in||contrib/fwupd.spec.in",
            "libfwupdplugin/fu-plugin.c||libfwupdplugin/fu-plugin.c",
            "libfwupdplugin/fu-self-test.c||libfwupdplugin/fu-self-test.c"
          ]
        }
      },
      "candidate_diff": {
        "contrib/fwupd.spec.in||contrib/fwupd.spec.in": [
          "File: contrib/fwupd.spec.in -> contrib/fwupd.spec.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:     fi",
          "327: done",
          "332: %preun",
          "333: %systemd_preun fwupd.service",
          "",
          "[Removed Lines]",
          "329: # ensure this is private",
          "330: chmod 0660 /etc/fwupd/redfish.conf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libfwupd/fwupd-enums.c||libfwupd/fwupd-enums.c": [
          "File: libfwupd/fwupd-enums.c -> libfwupd/fwupd-enums.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:   return \"unknown\";",
          "441:  if (plugin_flag == FWUPD_PLUGIN_FLAG_AUTH_REQUIRED)",
          "442:   return \"auth-required\";",
          "443:  return NULL;",
          "444: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:  if (plugin_flag == FWUPD_PLUGIN_FLAG_SECURE_CONFIG)",
          "444:   return \"secure-config\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "484:   return FWUPD_PLUGIN_FLAG_KERNEL_TOO_OLD;",
          "485:  if (g_strcmp0(plugin_flag, \"auth-required\") == 0)",
          "486:   return FWUPD_PLUGIN_FLAG_AUTH_REQUIRED;",
          "487:  return FWUPD_DEVICE_FLAG_UNKNOWN;",
          "488: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:  if (g_strcmp0(plugin_flag, \"secure-config\") == 0)",
          "490:   return FWUPD_PLUGIN_FLAG_SECURE_CONFIG;",
          "",
          "---------------"
        ],
        "libfwupd/fwupd-enums.h||libfwupd/fwupd-enums.h": [
          "File: libfwupd/fwupd-enums.h -> libfwupd/fwupd-enums.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "856: #define FWUPD_PLUGIN_FLAG_AUTH_REQUIRED (1u << 12)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "865: #define FWUPD_PLUGIN_FLAG_SECURE_CONFIG (1u << 13)",
          "",
          "---------------"
        ],
        "libfwupd/fwupd-self-test.c||libfwupd/fwupd-self-test.c": [
          "File: libfwupd/fwupd-self-test.c -> libfwupd/fwupd-self-test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:   g_assert_cmpstr(tmp, !=, NULL);",
          "171:   g_assert_cmpint(fwupd_device_problem_from_string(tmp), ==, i);",
          "172:  }",
          "174:   const gchar *tmp = fwupd_plugin_flag_to_string(i);",
          "175:   if (tmp == NULL)",
          "176:    g_warning(\"missing plugin flag 0x%x\", (guint)i);",
          "",
          "[Removed Lines]",
          "173:  for (guint64 i = 1; i <= FWUPD_PLUGIN_FLAG_AUTH_REQUIRED; i *= 2) {",
          "",
          "[Added Lines]",
          "173:  for (guint64 i = 1; i <= FWUPD_PLUGIN_FLAG_SECURE_CONFIG; i *= 2) {",
          "",
          "---------------"
        ],
        "libfwupdplugin/fu-plugin.c||libfwupdplugin/fu-plugin.c": [
          "File: libfwupdplugin/fu-plugin.c -> libfwupdplugin/fu-plugin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:            GError **error);",
          "85: typedef gboolean (*FuPluginDeviceArrayFunc)(FuPlugin *self, GPtrArray *devices, GError **error);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: #define FU_PLUGIN_FILE_MODE_NONSECURE 0644",
          "88: #define FU_PLUGIN_FILE_MODE_SECURE    0640",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:  return name;",
          "300: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305: static gchar *",
          "306: fu_plugin_get_config_filename(FuPlugin *self)",
          "307: {",
          "308:  g_autofree gchar *conf_dir = fu_path_from_kind(FU_PATH_KIND_SYSCONFDIR_PKG);",
          "309:  g_autofree gchar *conf_file = g_strdup_printf(\"%s.conf\", fu_plugin_get_name(self));",
          "310:  return g_build_filename(conf_dir, conf_file, NULL);",
          "311: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "355:   fu_plugin_set_name(self, str);",
          "356:  }",
          "359:  if (vfuncs->load != NULL) {",
          "360:   FuContext *ctx = fu_plugin_get_context(self);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:  if (fu_plugin_has_flag(self, FWUPD_PLUGIN_FLAG_SECURE_CONFIG)) {",
          "371:   g_autofree gchar *conf_path = fu_plugin_get_config_filename(self);",
          "372:   if (g_file_test(conf_path, G_FILE_TEST_EXISTS)) {",
          "373:    gint rc = g_chmod(conf_path, FU_PLUGIN_FILE_MODE_SECURE);",
          "374:    if (rc != 0) {",
          "375:     g_set_error(error,",
          "376:          G_IO_ERROR,",
          "377:          G_IO_ERROR_FAILED,",
          "378:          \"failed to change permission of %s\",",
          "379:          filename);",
          "380:     fu_plugin_add_flag(self, FWUPD_PLUGIN_FLAG_FAILED_OPEN);",
          "381:     return FALSE;",
          "382:    }",
          "383:   }",
          "384:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "502:  g_signal_emit(self, signals[SIGNAL_CONFIG_CHANGED], 0);",
          "503: }",
          "",
          "[Removed Lines]",
          "505: static gchar *",
          "506: fu_plugin_get_config_filename(FuPlugin *self)",
          "507: {",
          "508:  g_autofree gchar *conf_dir = fu_path_from_kind(FU_PATH_KIND_SYSCONFDIR_PKG);",
          "509:  g_autofree gchar *conf_file = g_strdup_printf(\"%s.conf\", fu_plugin_get_name(self));",
          "510:  return g_build_filename(conf_dir, conf_file, NULL);",
          "511: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2388:  return g_steal_pointer(&attr);",
          "2389: }",
          "2421: #if !GLIB_CHECK_VERSION(2, 66, 0)",
          "2423: #define G_FILE_SET_CONTENTS_CONSISTENT 0",
          "",
          "[Removed Lines]",
          "2404: gboolean",
          "2405: fu_plugin_set_config_value(FuPlugin *self, const gchar *key, const gchar *value, GError **error)",
          "2406: {",
          "2407:  g_autofree gchar *conf_path = fu_plugin_get_config_filename(self);",
          "2408:  g_autoptr(GKeyFile) keyfile = NULL;",
          "2410:  g_return_val_if_fail(FU_IS_PLUGIN(self), FALSE);",
          "2411:  g_return_val_if_fail(key != NULL, FALSE);",
          "2412:  g_return_val_if_fail(error == NULL || *error == NULL, FALSE);",
          "2414:  keyfile = g_key_file_new();",
          "2415:  if (!g_key_file_load_from_file(keyfile, conf_path, G_KEY_FILE_KEEP_COMMENTS, error))",
          "2416:   return FALSE;",
          "2417:  g_key_file_set_string(keyfile, fu_plugin_get_name(self), key, value);",
          "2418:  return g_key_file_save_to_file(keyfile, conf_path, error);",
          "2419: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2458: }",
          "2459: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2451: static gboolean",
          "2452: fu_plugin_set_config_value_internal(FuPlugin *self,",
          "2453:         const gchar *key,",
          "2454:         const gchar *value,",
          "2455:         guint32 mode,",
          "2456:         GError **error)",
          "2457: {",
          "2458:  g_autofree gchar *conf_path = fu_plugin_get_config_filename(self);",
          "2459:  g_autofree gchar *data = NULL;",
          "2460:  g_autoptr(GKeyFile) keyfile = g_key_file_new();",
          "2462:  g_return_val_if_fail(FU_IS_PLUGIN(self), FALSE);",
          "2463:  g_return_val_if_fail(error == NULL || *error == NULL, FALSE);",
          "2465:  if (!g_file_test(conf_path, G_FILE_TEST_EXISTS)) {",
          "2466:   g_set_error(error, FWUPD_ERROR, FWUPD_ERROR_NOT_FOUND, \"%s is missing\", conf_path);",
          "2467:   return FALSE;",
          "2468:  }",
          "2469:  if (!g_key_file_load_from_file(keyfile, conf_path, G_KEY_FILE_KEEP_COMMENTS, error))",
          "2470:   return FALSE;",
          "2471:  g_key_file_set_string(keyfile, fu_plugin_get_name(self), key, value);",
          "2472:  data = g_key_file_to_data(keyfile, NULL, error);",
          "2473:  if (data == NULL)",
          "2474:   return FALSE;",
          "2475:  return g_file_set_contents_full(conf_path,",
          "2476:      data,",
          "2477:      -1,",
          "2478:      G_FILE_SET_CONTENTS_CONSISTENT,",
          "2479:      mode,",
          "2480:      error);",
          "2481: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2478:       const gchar *value,",
          "2479:       GError **error)",
          "2480: {",
          "2485:  g_return_val_if_fail(FU_IS_PLUGIN(self), FALSE);",
          "2486:  g_return_val_if_fail(error == NULL || *error == NULL, FALSE);",
          "2491:  }",
          "2504: }",
          "",
          "[Removed Lines]",
          "2481:  g_autofree gchar *conf_path = fu_plugin_get_config_filename(self);",
          "2482:  g_autofree gchar *data = NULL;",
          "2483:  g_autoptr(GKeyFile) keyfile = g_key_file_new();",
          "2488:  if (!g_file_test(conf_path, G_FILE_TEST_EXISTS)) {",
          "2489:   g_set_error(error, FWUPD_ERROR, FWUPD_ERROR_NOT_FOUND, \"%s is missing\", conf_path);",
          "2490:   return FALSE;",
          "2492:  if (!g_key_file_load_from_file(keyfile, conf_path, G_KEY_FILE_KEEP_COMMENTS, error))",
          "2493:   return FALSE;",
          "2494:  g_key_file_set_string(keyfile, fu_plugin_get_name(self), key, value);",
          "2495:  data = g_key_file_to_data(keyfile, NULL, error);",
          "2496:  if (data == NULL)",
          "2497:   return FALSE;",
          "2498:  return g_file_set_contents_full(conf_path,",
          "2499:      data,",
          "2500:      -1,",
          "2501:      G_FILE_SET_CONTENTS_CONSISTENT,",
          "2502:      0660,",
          "2503:      error);",
          "",
          "[Added Lines]",
          "2506:  g_return_val_if_fail(FU_IS_PLUGIN(self), FALSE);",
          "2507:  g_return_val_if_fail(key != NULL, FALSE);",
          "2508:  g_return_val_if_fail(error == NULL || *error == NULL, FALSE);",
          "2509:  fu_plugin_add_flag(self, FWUPD_PLUGIN_FLAG_SECURE_CONFIG);",
          "2510:  return fu_plugin_set_config_value(self, key, value, error);",
          "2511: }",
          "2526: gboolean",
          "2527: fu_plugin_set_config_value(FuPlugin *self, const gchar *key, const gchar *value, GError **error)",
          "2528: {",
          "2530:  g_return_val_if_fail(key != NULL, FALSE);",
          "2534:  if (fu_plugin_has_flag(self, FWUPD_PLUGIN_FLAG_SECURE_CONFIG)) {",
          "2535:   return fu_plugin_set_config_value_internal(self,",
          "2536:           key,",
          "2537:           value,",
          "2538:           FU_PLUGIN_FILE_MODE_SECURE,",
          "2539:           error);",
          "2541:  return fu_plugin_set_config_value_internal(self,",
          "2542:          key,",
          "2543:          value,",
          "2544:          FU_PLUGIN_FILE_MODE_NONSECURE,",
          "2545:          error);",
          "",
          "---------------"
        ],
        "libfwupdplugin/fu-plugin.h||libfwupdplugin/fu-plugin.h": [
          "File: libfwupdplugin/fu-plugin.h -> libfwupdplugin/fu-plugin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "460: fu_plugin_add_report_metadata(FuPlugin *self, const gchar *key, const gchar *value);",
          "461: gchar *",
          "462: fu_plugin_get_config_value(FuPlugin *self, const gchar *key);",
          "463: gboolean",
          "464: fu_plugin_set_secure_config_value(FuPlugin *self,",
          "465:       const gchar *key,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463: G_DEPRECATED_FOR(fu_plugin_set_config_value)",
          "",
          "---------------"
        ],
        "libfwupdplugin/fu-self-test.c||libfwupdplugin/fu-self-test.c": [
          "File: libfwupdplugin/fu-self-test.c -> libfwupdplugin/fu-self-test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "721:  g_assert_cmpstr(value, ==, \"True\");",
          "722:  g_assert_true(fu_plugin_get_config_value_boolean(plugin, \"Key\"));",
          "726:  g_assert_no_error(error);",
          "727:  g_assert_true(ret);",
          "728:  rc = g_stat(fn, &statbuf);",
          "",
          "[Removed Lines]",
          "725:  ret = fu_plugin_set_secure_config_value(plugin, \"Key\", \"False\", &error);",
          "",
          "[Added Lines]",
          "725:  fu_plugin_add_flag(plugin, FWUPD_PLUGIN_FLAG_SECURE_CONFIG);",
          "726:  ret = fu_plugin_set_config_value(plugin, \"Key\", \"False\", &error);",
          "",
          "---------------"
        ],
        "plugins/redfish/fu-plugin-redfish.c||plugins/redfish/fu-plugin-redfish.c": [
          "File: plugins/redfish/fu-plugin-redfish.c -> plugins/redfish/fu-plugin-redfish.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:  uri = fu_plugin_get_config_value(plugin, \"UserUri\");",
          "64:  if (uri == NULL) {",
          "65:   uri = g_strdup(\"/redfish/v1/AccountService/Accounts/2\");",
          "67:    return FALSE;",
          "68:  }",
          "",
          "[Removed Lines]",
          "66:   if (!fu_plugin_set_secure_config_value(plugin, \"UserUri\", uri, error))",
          "",
          "[Added Lines]",
          "66:   if (!fu_plugin_set_config_value(plugin, \"UserUri\", uri, error))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:  fu_redfish_backend_set_password(priv->backend, password_new);",
          "87: }",
          "89: static gboolean",
          "",
          "[Removed Lines]",
          "86:  return fu_plugin_set_secure_config_value(plugin, \"Password\", password_new, error);",
          "",
          "[Added Lines]",
          "86:  return fu_plugin_set_config_value(plugin, \"Password\", password_new, error);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:  fu_redfish_backend_set_password(priv->backend, password_new);",
          "356:   return FALSE;",
          "358:   return FALSE;",
          "360:   return FALSE;",
          "362:  return TRUE;",
          "",
          "[Removed Lines]",
          "355:  if (!fu_plugin_set_secure_config_value(plugin, \"UserUri\", uri, error))",
          "357:  if (!fu_plugin_set_secure_config_value(plugin, \"Username\", username_fwupd, error))",
          "359:  if (!fu_plugin_set_secure_config_value(plugin, \"Password\", password_new, error))",
          "",
          "[Added Lines]",
          "355:  if (!fu_plugin_set_config_value(plugin, \"UserUri\", uri, error))",
          "357:  if (!fu_plugin_set_config_value(plugin, \"Username\", username_fwupd, error))",
          "359:  if (!fu_plugin_set_config_value(plugin, \"Password\", password_new, error))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "594:  FuPluginData *priv = fu_plugin_alloc_data(plugin, sizeof(FuPluginData));",
          "595:  priv->backend = fu_redfish_backend_new(ctx);",
          "596:  fu_plugin_add_firmware_gtype(plugin, NULL, FU_TYPE_REDFISH_SMBIOS);",
          "597: }",
          "599: static void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:  fu_plugin_add_flag(plugin, FWUPD_PLUGIN_FLAG_SECURE_CONFIG);",
          "",
          "---------------"
        ],
        "src/fu-util-common.c||src/fu-util-common.c": [
          "File: src/fu-util-common.c -> src/fu-util-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1691:   return _(\"Authentication details are required\");",
          "1692:  }",
          "1693:  if (plugin_flag == FWUPD_PLUGIN_FLAG_EFIVAR_NOT_MOUNTED) {",
          "1695:   return _(\"Required efivarfs filesystem was not found\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1693:  if (plugin_flag == FWUPD_PLUGIN_FLAG_SECURE_CONFIG) {",
          "1695:   return _(\"Configuration is only readable by the system administrator\");",
          "1696:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1731:  case FWUPD_PLUGIN_FLAG_CAPSULES_UNSUPPORTED:",
          "1732:  case FWUPD_PLUGIN_FLAG_UNLOCK_REQUIRED:",
          "1733:  case FWUPD_PLUGIN_FLAG_AUTH_REQUIRED:",
          "1734:  case FWUPD_PLUGIN_FLAG_EFIVAR_NOT_MOUNTED:",
          "1735:  case FWUPD_PLUGIN_FLAG_ESP_NOT_FOUND:",
          "1736:  case FWUPD_PLUGIN_FLAG_KERNEL_TOO_OLD:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1738:  case FWUPD_PLUGIN_FLAG_SECURE_CONFIG:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41575afd93ca0e68bced78ca43a4488f124906a1",
      "candidate_info": {
        "commit_hash": "41575afd93ca0e68bced78ca43a4488f124906a1",
        "repo": "fwupd/fwupd",
        "commit_url": "https://github.com/fwupd/fwupd/commit/41575afd93ca0e68bced78ca43a4488f124906a1",
        "files": [
          "contrib/fwupd.spec.in",
          "libfwupdplugin/fu-plugin.c",
          "libfwupdplugin/fu-self-test.c"
        ],
        "message": "Never save the Redfish passwords to a file readable by users\n\nWhen the redfish plugin automatically creates an OPERATOR user account on the\nBMC we save the autogenerated password to /etc/fwupd/redfish.conf, ensuring it\nis chmod'ed to 0660 before writing the file with g_key_file_save_to_file().\n\nUnder the covers, g_key_file_save_to_file() calls g_file_set_contents() with\nthe keyfile string data.\nI was under the impression that G_FILE_CREATE_REPLACE_DESTINATION was being\nused to copy permissions, but alas not.\n\nGLib instead calls g_file_set_contents_full() with the mode hardcoded to 0666,\nwhich undoes the previous chmod().\n\nUse g_file_set_contents_full() with the correct mode for newer GLib versions,\nand provide a fallback with the same semantics for older versions.",
        "before_after_code_files": [
          "contrib/fwupd.spec.in||contrib/fwupd.spec.in",
          "libfwupdplugin/fu-plugin.c||libfwupdplugin/fu-plugin.c",
          "libfwupdplugin/fu-self-test.c||libfwupdplugin/fu-self-test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "contrib/fwupd.spec.in||contrib/fwupd.spec.in",
            "libfwupdplugin/fu-plugin.c||libfwupdplugin/fu-plugin.c",
            "libfwupdplugin/fu-self-test.c||libfwupdplugin/fu-self-test.c"
          ],
          "candidate": [
            "contrib/fwupd.spec.in||contrib/fwupd.spec.in",
            "libfwupdplugin/fu-plugin.c||libfwupdplugin/fu-plugin.c",
            "libfwupdplugin/fu-self-test.c||libfwupdplugin/fu-self-test.c"
          ]
        }
      },
      "candidate_diff": {
        "contrib/fwupd.spec.in||contrib/fwupd.spec.in": [
          "File: contrib/fwupd.spec.in -> contrib/fwupd.spec.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:     fi",
          "314: done",
          "316: %preun",
          "317: %systemd_preun fwupd.service",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316: # ensure this is private",
          "317: chmod 0660 /etc/fwupd/redfish.conf",
          "",
          "---------------"
        ],
        "libfwupdplugin/fu-plugin.c||libfwupdplugin/fu-plugin.c": [
          "File: libfwupdplugin/fu-plugin.c -> libfwupdplugin/fu-plugin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include \"config.h\"",
          "11: #include <errno.h>",
          "12: #include <fwupd.h>",
          "13: #include <glib/gstdio.h>",
          "14: #include <gmodule.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #include <fcntl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2256:  return g_key_file_save_to_file(keyfile, conf_path, error);",
          "2257: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2260: #if !GLIB_CHECK_VERSION(2, 66, 0)",
          "2262: #define G_FILE_SET_CONTENTS_CONSISTENT 0",
          "2263: typedef guint GFileSetContentsFlags;",
          "2264: static gboolean",
          "2265: g_file_set_contents_full(const gchar *filename,",
          "2266:     const gchar *contents,",
          "2267:     gssize length,",
          "2268:     GFileSetContentsFlags flags,",
          "2269:     int mode,",
          "2270:     GError **error)",
          "2271: {",
          "2272:  gint fd;",
          "2273:  gssize wrote;",
          "2275:  if (length < 0)",
          "2276:   length = strlen(contents);",
          "2277:  fd = g_open(filename, O_CREAT, mode);",
          "2278:  if (fd <= 0) {",
          "2279:   g_set_error(error,",
          "2280:        G_IO_ERROR,",
          "2281:        G_IO_ERROR_FAILED,",
          "2282:        \"could not open %s file\",",
          "2283:        filename);",
          "2284:   return FALSE;",
          "2285:  }",
          "2286:  wrote = write(fd, contents, length);",
          "2287:  if (wrote != length) {",
          "2288:   g_set_error(error,",
          "2289:        G_IO_ERROR,",
          "2290:        G_IO_ERROR_FAILED,",
          "2291:        \"did not write %s file\",",
          "2292:        filename);",
          "2293:   g_close(fd, NULL);",
          "2294:   return FALSE;",
          "2295:  }",
          "2296:  return g_close(fd, error);",
          "2297: }",
          "2298: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2277:       GError **error)",
          "2278: {",
          "2279:  g_autofree gchar *conf_path = fu_plugin_get_config_filename(self);",
          "2282:  g_return_val_if_fail(FU_IS_PLUGIN(self), FALSE);",
          "2283:  g_return_val_if_fail(error == NULL || *error == NULL, FALSE);",
          "",
          "[Removed Lines]",
          "2280:  gint ret;",
          "",
          "[Added Lines]",
          "2321:  g_autofree gchar *data = NULL;",
          "2322:  g_autoptr(GKeyFile) keyfile = g_key_file_new();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2286:   g_set_error(error, FWUPD_ERROR, FWUPD_ERROR_NOT_FOUND, \"%s is missing\", conf_path);",
          "2287:   return FALSE;",
          "2288:  }",
          "2296:   return FALSE;",
          "2300: }",
          "",
          "[Removed Lines]",
          "2289:  ret = g_chmod(conf_path, 0660);",
          "2290:  if (ret == -1) {",
          "2291:   g_set_error(error,",
          "2292:        FWUPD_ERROR,",
          "2293:        FWUPD_ERROR_INTERNAL,",
          "2294:        \"failed to set permissions on %s\",",
          "2295:        conf_path);",
          "2297:  }",
          "2299:  return fu_plugin_set_config_value(self, key, value, error);",
          "",
          "[Added Lines]",
          "2331:  if (!g_key_file_load_from_file(keyfile, conf_path, G_KEY_FILE_KEEP_COMMENTS, error))",
          "2333:  g_key_file_set_string(keyfile, fu_plugin_get_name(self), key, value);",
          "2334:  data = g_key_file_to_data(keyfile, NULL, error);",
          "2335:  if (data == NULL)",
          "2336:   return FALSE;",
          "2337:  return g_file_set_contents_full(conf_path,",
          "2338:      data,",
          "2339:      -1,",
          "2340:      G_FILE_SET_CONTENTS_CONSISTENT,",
          "2341:      0660,",
          "2342:      error);",
          "",
          "---------------"
        ],
        "libfwupdplugin/fu-self-test.c||libfwupdplugin/fu-self-test.c": [
          "File: libfwupdplugin/fu-self-test.c -> libfwupdplugin/fu-self-test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "675:  fu_test_loop_quit();",
          "676: }",
          "678: static void",
          "679: fu_plugin_devices_func(void)",
          "680: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "678: static void",
          "679: fu_plugin_config_func(void)",
          "680: {",
          "681:  GStatBuf statbuf = {0};",
          "682:  gboolean ret;",
          "683:  gint rc;",
          "684:  g_autofree gchar *conf_dir = NULL;",
          "685:  g_autofree gchar *conf_file = NULL;",
          "686:  g_autofree gchar *fn = NULL;",
          "687:  g_autofree gchar *testdatadir = NULL;",
          "688:  g_autofree gchar *value = NULL;",
          "689:  g_autoptr(FuPlugin) plugin = fu_plugin_new(NULL);",
          "690:  g_autoptr(GError) error = NULL;",
          "693:  testdatadir = g_test_build_filename(G_TEST_BUILT, \"tests\", NULL);",
          "694:  (void)g_setenv(\"FWUPD_SYSCONFDIR\", testdatadir, TRUE);",
          "695:  conf_dir = fu_common_get_path(FU_PATH_KIND_SYSCONFDIR_PKG);",
          "698:  fu_plugin_set_name(plugin, \"test\");",
          "699:  conf_file = g_strdup_printf(\"%s.conf\", fu_plugin_get_name(plugin));",
          "700:  fn = g_build_filename(conf_dir, conf_file, NULL);",
          "701:  ret = fu_common_mkdir_parent(fn, &error);",
          "702:  g_assert_no_error(error);",
          "703:  g_assert_true(ret);",
          "704:  g_remove(fn);",
          "705:  ret = g_file_set_contents(fn, \"\", -1, &error);",
          "706:  g_assert_no_error(error);",
          "707:  g_assert_true(ret);",
          "710:  ret = fu_plugin_set_config_value(plugin, \"Key\", \"True\", &error);",
          "711:  g_assert_no_error(error);",
          "712:  g_assert_true(ret);",
          "713:  g_assert_true(g_file_test(fn, G_FILE_TEST_EXISTS));",
          "716:  rc = g_stat(fn, &statbuf);",
          "717:  g_assert_cmpint(rc, ==, 0);",
          "718:  g_assert_cmpint(statbuf.st_mode & 0777, ==, 0644);",
          "721:  value = fu_plugin_get_config_value(plugin, \"Key\");",
          "722:  g_assert_cmpstr(value, ==, \"True\");",
          "723:  g_assert_true(fu_plugin_get_config_value_boolean(plugin, \"Key\"));",
          "726:  ret = fu_plugin_set_secure_config_value(plugin, \"Key\", \"False\", &error);",
          "727:  g_assert_no_error(error);",
          "728:  g_assert_true(ret);",
          "729:  rc = g_stat(fn, &statbuf);",
          "730:  g_assert_cmpint(rc, ==, 0);",
          "731:  g_assert_cmpint(statbuf.st_mode & 0777, ==, 0640);",
          "732: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3950:  g_test_add_func(\"/fwupd/progress{no-equal}\", fu_progress_non_equal_steps_func);",
          "3951:  g_test_add_func(\"/fwupd/progress{finish}\", fu_progress_finish_func);",
          "3952:  g_test_add_func(\"/fwupd/security-attrs{hsi}\", fu_security_attrs_hsi_func);",
          "3953:  g_test_add_func(\"/fwupd/plugin{devices}\", fu_plugin_devices_func);",
          "3954:  g_test_add_func(\"/fwupd/plugin{device-inhibit-children}\",",
          "3955:    fu_plugin_device_inhibit_children_func);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4009:  g_test_add_func(\"/fwupd/plugin{config}\", fu_plugin_config_func);",
          "",
          "---------------"
        ]
      }
    }
  ]
}