{
  "cve_id": "CVE-2019-1010247",
  "cve_desc": "ZmartZone IAM mod_auth_openidc 2.3.10.1 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Redirecting the user to a phishing page or interacting with the application on behalf of the user. The component is: File: src/mod_auth_openidc.c, Line: 3109. The fixed version is: 2.3.10.2.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
  "patch_info": {
    "commit_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/132a4111bf3791e76437619a66336dce2ce4c79b",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "release 2.3.10.2: fix XSS vulnerability for poll parameter\n\nin OIDC Session Management RP iframe; CSNC-2019-001; thanks Mischa\nBachmann\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.1],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.2],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3106:    \"\\n\"",
      "3107:    \"      function setTimer() {\\n\"",
      "3108:    \"        checkSession();\\n\"",
      "3110:    \"      }\\n\"",
      "3111:    \"\\n\"",
      "3112:    \"      function receiveMessage(e) {\\n\"",
      "",
      "[Removed Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %s);\\n\"",
      "",
      "[Added Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %d);\\n\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3150:  char *s_poll_interval = NULL;",
      "3151:  oidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);",
      "3155:  const char *redirect_uri = oidc_get_redirect_uri(r, c);",
      "3156:  java_script = apr_psprintf(r->pool, java_script, origin, client_id,",
      "3158:    redirect_uri);",
      "3160:  return oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);",
      "",
      "[Removed Lines]",
      "3152:  if (s_poll_interval == NULL)",
      "3153:   s_poll_interval = \"3000\";",
      "3157:    session_state, op_iframe_id, s_poll_interval, redirect_uri,",
      "",
      "[Added Lines]",
      "3152:  int poll_interval = s_poll_interval ? strtol(s_poll_interval, NULL, 10) : 0;",
      "3153:  if ((poll_interval <= 0) || (poll_interval > 3600 * 24))",
      "3154:   poll_interval = 3000;",
      "3158:    session_state, op_iframe_id, poll_interval, redirect_uri,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "63b9b10a0b70b328b1acf68a2ecd0b58d8e2847e",
      "candidate_info": {
        "commit_hash": "63b9b10a0b70b328b1acf68a2ecd0b58d8e2847e",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/63b9b10a0b70b328b1acf68a2ecd0b58d8e2847e",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/metadata.c",
          "src/parse.c",
          "src/parse.h",
          "src/proto.c"
        ],
        "message": "be smart about picking the token endpoint auth method\n\nwhen not configured explicitly, don't choose the first one published by\nthe OP but prefer client_secret_basic if that is listed as well\nsee: panva/node-oidc-provider#514; thanks @richard-drummond and @panva\nbump to 2.4.0rc24\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/metadata.c||src/metadata.c",
          "src/parse.c||src/parse.c",
          "src/parse.h||src/parse.h",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc23],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc24],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/metadata.c||src/metadata.c": [
          "File: src/metadata.c -> src/metadata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:  if (oidc_valid_string_in_array(r->pool, j_provider,",
          "295:    OIDC_METADATA_RESPONSE_TYPES_SUPPORTED, oidc_valid_response_type, NULL,",
          "297:   if (json_object_get(j_provider,",
          "298:     OIDC_METADATA_RESPONSE_TYPES_SUPPORTED) != NULL) {",
          "299:    oidc_error(r,",
          "",
          "[Removed Lines]",
          "296:    FALSE) != NULL) {",
          "",
          "[Added Lines]",
          "296:    FALSE, NULL) != NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:  if (oidc_valid_string_in_array(r->pool, j_provider,",
          "311:    OIDC_METADATA_RESPONSE_MODES_SUPPORTED, oidc_valid_response_mode, NULL,",
          "313:   oidc_error(r,",
          "314:     \"could not find a supported response mode in provider metadata (%s) for entry \\\"\" OIDC_METADATA_RESPONSE_MODES_SUPPORTED \"\\\"\",",
          "315:     issuer);",
          "",
          "[Removed Lines]",
          "312:    TRUE) != NULL) {",
          "",
          "[Added Lines]",
          "312:    TRUE, NULL) != NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "344:  if (oidc_valid_string_in_array(r->pool, j_provider,",
          "345:    OIDC_METADATA_TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED,",
          "346:    oidc_cfg_get_valid_endpoint_auth_function(cfg), NULL,",
          "348:   oidc_error(r,",
          "349:     \"could not find a supported token endpoint authentication method in provider metadata (%s) for entry \\\"\" OIDC_METADATA_TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED \"\\\"\",",
          "350:     issuer);",
          "",
          "[Removed Lines]",
          "347:    TRUE) != NULL) {",
          "",
          "[Added Lines]",
          "347:    TRUE, NULL) != NULL) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1048:     OIDC_METADATA_TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED,",
          "1049:     oidc_cfg_get_valid_endpoint_auth_function(cfg),",
          "1050:     &provider->token_endpoint_auth,",
          "1052:    oidc_error(r,",
          "1053:      \"could not find a supported token endpoint authentication method in provider metadata (%s) for entry \\\"\" OIDC_METADATA_TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED \"\\\"\",",
          "1054:      provider->issuer);",
          "",
          "[Removed Lines]",
          "1051:     TRUE) != NULL) {",
          "",
          "[Added Lines]",
          "1051:     TRUE, OIDC_ENDPOINT_AUTH_CLIENT_SECRET_BASIC) != NULL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1085:    OIDC_METADATA_INTROSPECTON_ENDPOINT_AUTH_METHODS_SUPPORTED,",
          "1086:    oidc_cfg_get_valid_endpoint_auth_function(c),",
          "1087:    &c->oauth.introspection_endpoint_auth,",
          "1089:   oidc_error(r,",
          "1090:     \"could not find a supported token endpoint authentication method in provider metadata (%s) for entry \\\"\" OIDC_METADATA_INTROSPECTON_ENDPOINT_AUTH_METHODS_SUPPORTED \"\\\"\",",
          "1091:     issuer);",
          "",
          "[Removed Lines]",
          "1088:    TRUE) != NULL) {",
          "",
          "[Added Lines]",
          "1094:    TRUE, OIDC_ENDPOINT_AUTH_CLIENT_SECRET_BASIC) != NULL) {",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "380: }",
          "382: #define OIDC_ENDPOINT_AUTH_CLIENT_SECRET_POST  \"client_secret_post\"",
          "384: #define OIDC_ENDPOINT_AUTH_CLIENT_SECRET_JWT   \"client_secret_jwt\"",
          "385: #define OIDC_ENDPOINT_AUTH_PRIVATE_KEY_JWT     \"private_key_jwt\"",
          "386: #define OIDC_ENDPOINT_AUTH_BEARER_ACCESS_TOKEN \"bearer_access_token\"",
          "",
          "[Removed Lines]",
          "383: #define OIDC_ENDPOINT_AUTH_CLIENT_SECRET_BASIC \"client_secret_basic\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1045: }",
          "1050: const char *oidc_valid_string_in_array(apr_pool_t *pool, json_t *json,",
          "1051:   const char *key, oidc_valid_function_t valid_function, char **value,",
          "1053:  int i = 0;",
          "1054:  json_t *json_arr = json_object_get(json, key);",
          "1055:  if ((json_arr != NULL) && (json_is_array(json_arr))) {",
          "1056:   for (i = 0; i < json_array_size(json_arr); i++) {",
          "1057:    json_t *elem = json_array_get(json_arr, i);",
          "",
          "[Removed Lines]",
          "1052:   apr_byte_t optional) {",
          "",
          "[Added Lines]",
          "1051:   apr_byte_t optional, const char *preference) {",
          "1054:  apr_byte_t found = FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1062:     continue;",
          "1063:    }",
          "1064:    if (valid_function(pool, json_string_value(elem)) == NULL) {",
          "1068:    }",
          "1069:   }",
          "1071:    return apr_psprintf(pool,",
          "1072:      \"could not find a valid array string element for entry \\\"%s\\\"\",",
          "1073:      key);",
          "",
          "[Removed Lines]",
          "1065:     if (value != NULL)",
          "1067:     break;",
          "1070:   if (i == json_array_size(json_arr)) {",
          "",
          "[Added Lines]",
          "1065:     found = TRUE;",
          "1066:     if (value != NULL) {",
          "1067:      if ((preference != NULL)",
          "1068:        && (apr_strnatcmp(json_string_value(elem),",
          "1069:          preference) == 0)) {",
          "1071:       break;",
          "1072:      }",
          "1073:      if (*value == NULL) {",
          "1075:      }",
          "1076:     }",
          "1079:   if (found == FALSE) {",
          "",
          "---------------"
        ],
        "src/parse.h||src/parse.h": [
          "File: src/parse.h -> src/parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #define OIDC_PKCE_METHOD_S256         \"S256\"",
          "70: #define OIDC_PKCE_METHOD_REFERRED_TB  \"referred_tb\"",
          "72: const char *oidc_valid_url(apr_pool_t *pool, const char *arg, const char *scheme);",
          "73: const char *oidc_valid_http_url(apr_pool_t *pool, const char *arg);",
          "74: const char *oidc_valid_dir(apr_pool_t *pool, const char *arg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: #define OIDC_ENDPOINT_AUTH_CLIENT_SECRET_BASIC \"client_secret_basic\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124: typedef const char *(*oidc_valid_int_function_t)(apr_pool_t *, int);",
          "125: typedef const char *(*oidc_valid_function_t)(apr_pool_t *, const char *);",
          "",
          "[Removed Lines]",
          "126: const char *oidc_valid_string_in_array(apr_pool_t *pool, json_t *json, const char *key, oidc_valid_function_t valid_function, char **value, apr_byte_t optional);",
          "",
          "[Added Lines]",
          "128: const char *oidc_valid_string_in_array(apr_pool_t *pool, json_t *json, const char *key, oidc_valid_function_t valid_function, char **value, apr_byte_t optional, const char *preference);",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1706: static apr_byte_t oidc_proto_endpoint_auth_none(request_rec *r,",
          "1707:   const char *client_id, apr_table_t *params) {",
          "1710:  apr_table_set(params, OIDC_PROTO_CLIENT_ID, client_id);",
          "1711:  return TRUE;",
          "1712: }",
          "",
          "[Removed Lines]",
          "1708:  oidc_debug(r,",
          "1709:    \"no client secret is configured; calling the token endpoint without client authentication; only public clients are supported\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1910:   token_endpoint_auth = OIDC_PROTO_CLIENT_SECRET_BASIC;",
          "1912:  if ((token_endpoint_auth == NULL) || (apr_strnatcmp(token_endpoint_auth,",
          "1914:   return oidc_proto_endpoint_auth_none(r, client_id, params);",
          "",
          "[Removed Lines]",
          "1913:    OIDC_PROTO_ENDPOINT_AUTH_NONE) == 0))",
          "",
          "[Added Lines]",
          "1911:    OIDC_PROTO_ENDPOINT_AUTH_NONE) == 0)) {",
          "1912:   oidc_debug(r,",
          "1913:     \"no client secret is configured or the token endpoint auth method was set to \\\"%s\\\"; calling the token endpoint without client authentication; only public clients are supported\",",
          "1914:     OIDC_PROTO_ENDPOINT_AUTH_NONE);",
          "1916:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1e96093a3b6a36938d8afde5b26e3ba58635b67",
      "candidate_info": {
        "commit_hash": "f1e96093a3b6a36938d8afde5b26e3ba58635b67",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/f1e96093a3b6a36938d8afde5b26e3ba58635b67",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "fix missing \"return\" on protocol error message from OP; see #345\n\nthanks @gergan\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.6rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.6rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3231:  }",
          "3233:  oidc_error(r,",
          "",
          "[Removed Lines]",
          "3230:   oidc_handle_redirect_authorization_response(r, c, session);",
          "",
          "[Added Lines]",
          "3230:   return oidc_handle_redirect_authorization_response(r, c, session);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac35cda28ecc2151ffb9849bd375145622077739",
      "candidate_info": {
        "commit_hash": "ac35cda28ecc2151ffb9849bd375145622077739",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/ac35cda28ecc2151ffb9849bd375145622077739",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/jose.c"
        ],
        "message": "fix JWT decryption crash for non-null terminated input\n\nbump to 2.4.0rc23\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/jose.c||src/jose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc22],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc23],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/jose.c||src/jose.c": [
          "File: src/jose.c -> src/jose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:   uint8_t *decrypted = oidc_jwe_decrypt_impl(pool, jwe, keys,",
          "718:     &content_len, err);",
          "719:   if (decrypted != NULL) {",
          "722:    cjose_get_dealloc()(decrypted);",
          "723:   }",
          "724:   cjose_jwe_release(jwe);",
          "",
          "[Removed Lines]",
          "720:    decrypted[content_len] = '\\0';",
          "",
          "[Added Lines]",
          "721:    memcpy(*s_json, decrypted, content_len);",
          "722:    (*s_json)[content_len] = '\\0';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b08f733ffc33c794f03c43158ae7c1cf1e537c1",
      "candidate_info": {
        "commit_hash": "2b08f733ffc33c794f03c43158ae7c1cf1e537c1",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/2b08f733ffc33c794f03c43158ae7c1cf1e537c1",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/jose.c",
          "test/test-cmd.c"
        ],
        "message": "fix RSA JWK x5c parsing of kid\n\n- explicitly set the \"kid\" into to JWK when parsing \"x5c\"\n- useful e.g. when parsing \"n\" fails\n- bump to 2.4.0rc18\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/jose.c||src/jose.c",
          "test/test-cmd.c||test/test-cmd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc17],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc18],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/jose.c||src/jose.c": [
          "File: src/jose.c -> src/jose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1216:   cjose_jwk_t **jwk, oidc_jose_error_t *err) {",
          "1218:  apr_byte_t rv = FALSE;",
          "1221:  json_t *v = json_object_get(json, OIDC_JOSE_HDR_X5C);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1219:  const char *kid = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1249:  int i = 0;",
          "1250:  char *s = apr_psprintf(pool, \"%s\\n\", OIDC_JOSE_CERT_BEGIN);",
          "1251:  while (i < strlen(s_x5c)) {",
          "1253:   i += len;",
          "1254:  }",
          "1255:  s = apr_psprintf(pool, \"%s%s\\n\", s, OIDC_JOSE_CERT_END);",
          "",
          "[Removed Lines]",
          "1252:   s = apr_psprintf(pool, \"%s%s\\n\", s, apr_pstrmemdup(pool, s_x5c + i, len));",
          "",
          "[Added Lines]",
          "1253:   s = apr_psprintf(pool, \"%s%s\\n\", s,",
          "1254:     apr_pstrmemdup(pool, s_x5c + i, len));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1268:   return FALSE;",
          "1269:  }",
          "1274:  BIO_free(input);",
          "",
          "[Removed Lines]",
          "1272:  rv = oidc_jwk_rsa_bio_to_jwk(pool, input, NULL, jwk, FALSE, err);",
          "",
          "[Added Lines]",
          "1273:  v = json_object_get(json, CJOSE_HDR_KID);",
          "1274:  if ((v != NULL) && json_is_string(v)) {",
          "1275:   kid = json_string_value(v);",
          "1276:  }",
          "1279:  rv = oidc_jwk_rsa_bio_to_jwk(pool, input, kid, jwk, FALSE, err);",
          "",
          "---------------"
        ],
        "test/test-cmd.c||test/test-cmd.c": [
          "File: test/test-cmd.c -> test/test-cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:   return -1;",
          "187:  }",
          "190:  if (jwk == NULL) {",
          "191:   fprintf(stderr,",
          "195:   return -1;",
          "196:  }",
          "199:   fprintf(stderr,",
          "200:     \"could not verify JWS: %s [file: %s, function: %s, line: %ld]\\n\",",
          "201:     cjose_err.message, cjose_err.file, cjose_err.function,",
          "",
          "[Removed Lines]",
          "189:  cjose_jwk_t *jwk = cjose_jwk_import(s_jwk, strlen(s_jwk), &cjose_err);",
          "192:     \"could not import JWK: %s [file: %s, function: %s, line: %ld]\\n\",",
          "193:     cjose_err.message, cjose_err.file, cjose_err.function,",
          "194:     cjose_err.line);",
          "198:  if (cjose_jws_verify(jws, jwk, &cjose_err) == FALSE) {",
          "",
          "[Added Lines]",
          "189:  oidc_jose_error_t oidc_err;",
          "190:  oidc_jwk_t *jwk = oidc_jwk_parse(pool, s_jwk, &oidc_err);",
          "193:     \"could not import JWK: %s [file: %s, function: %s, line: %d]\\n\",",
          "194:     oidc_err.text, oidc_err.source, oidc_err.function,",
          "195:     oidc_err.line);",
          "199:  if (cjose_jws_verify(jws, jwk->cjose_jwk, &cjose_err) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:  fprintf(stdout, \"%s\", plaintext);",
          "219:  cjose_jws_release(jws);",
          "222:  return 0;",
          "223: }",
          "",
          "[Removed Lines]",
          "220:  cjose_jwk_release(jwk);",
          "",
          "[Added Lines]",
          "221:  oidc_jwk_destroy(jwk);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "325:  int is_private_key = (argc > 3);",
          "327:  if (is_private_key) {",
          "329:    fprintf(stderr, \"oidc_jwk_parse_rsa_private_key failed: %s\",",
          "330:      oidc_jose_e2s(pool, err));",
          "331:    return -1;",
          "332:   }",
          "333:  } else {",
          "335:    fprintf(stderr, \"oidc_jwk_parse_rsa_public_key failed: %s\",",
          "336:      oidc_jose_e2s(pool, err));",
          "337:    return -1;",
          "",
          "[Removed Lines]",
          "328:   if (oidc_jwk_parse_rsa_private_key(pool, NULL, argv[2], &jwk, &err) == FALSE) {",
          "334:   if (oidc_jwk_parse_rsa_public_key(pool, NULL, argv[2], &jwk, &err) == FALSE) {",
          "",
          "[Added Lines]",
          "329:   if (oidc_jwk_parse_rsa_private_key(pool, NULL, argv[2], &jwk,",
          "330:     &err) == FALSE) {",
          "336:   if (oidc_jwk_parse_rsa_public_key(pool, NULL, argv[2], &jwk,",
          "337:     &err) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "458: int hash_base64url(int argc, char **argv, apr_pool_t *pool) {",
          "459:  if (argc <= 2)",
          "462:  char *algo = argc > 3 ? argv[3] : \"sha256\";",
          "463:  int base64url_decode_first = argc > 4 ? (strcmp(argv[4], \"yes\") == 0) : 0;",
          "",
          "[Removed Lines]",
          "460:   return usage(argc, argv, \"hash_base64url <string> [algo] [base64url-decode-first]\");",
          "",
          "[Added Lines]",
          "463:   return usage(argc, argv,",
          "464:     \"hash_base64url <string> [algo] [base64url-decode-first]\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "470:   uint8_t *bytes = NULL;",
          "471:   size_t outlen = 0;",
          "472:   cjose_err err;",
          "474:    fprintf(stderr, \"cjose_base64_decode failed: %s\", err.message);",
          "475:    return -1;",
          "476:   }",
          "480:    fprintf(stderr, \"oidc_jose_hash_and_base64url_encode failed\");",
          "481:    return -1;",
          "482:   }",
          "483:  } else {",
          "484:   if (oidc_util_hash_string_and_base64url_encode(r, algo, argv[2],",
          "485:     &output) == FALSE) {",
          "487:    return -1;",
          "488:   }",
          "489:  }",
          "",
          "[Removed Lines]",
          "473:   if (cjose_base64url_decode(argv[2], strlen(argv[2]), &bytes, &outlen, &err) == FALSE) {",
          "477:   if (oidc_jose_hash_and_base64url_encode(r->pool,",
          "478:     algo, (const char *)bytes, outlen,",
          "479:     &output) == FALSE) {",
          "486:    fprintf(stderr, \"oidc_util_hash_string_and_base64url_encode failed\");",
          "",
          "[Added Lines]",
          "477:   if (cjose_base64url_decode(argv[2], strlen(argv[2]), &bytes, &outlen,",
          "478:     &err) == FALSE) {",
          "482:   if (oidc_jose_hash_and_base64url_encode(r->pool, algo,",
          "483:     (const char *) bytes, outlen, &output) == FALSE) {",
          "490:    fprintf(stderr,",
          "491:      \"oidc_util_hash_string_and_base64url_encode failed\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6493f9f72abcbdbfb2e701446190f34d3aa625df",
      "candidate_info": {
        "commit_hash": "6493f9f72abcbdbfb2e701446190f34d3aa625df",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/6493f9f72abcbdbfb2e701446190f34d3aa625df",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/shm.c"
        ],
        "message": "fix buffer overflow in shm cache key set strcpy; thanks @kyprizel\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/shm.c||src/cache/shm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.6rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.6rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/shm.c||src/cache/shm.c": [
          "File: src/cache/shm.c -> src/cache/shm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:  char *section_key = apr_psprintf(r->pool, \"%s:%s\", section, key);",
          "157:   oidc_error(r,",
          "160:   return NULL;",
          "161:  }",
          "",
          "[Removed Lines]",
          "156:  if (strlen(section_key) > OIDC_CACHE_SHM_KEY_MAX) {",
          "158:     \"could not construct cache key since size is too large (%s)\",",
          "159:     section_key);",
          "",
          "[Added Lines]",
          "156:  if (strlen(section_key) >= OIDC_CACHE_SHM_KEY_MAX) {",
          "158:     \"could not construct cache key since key size is too large (%d >= %d) (%s)\",",
          "159:     (int )strlen(section_key), OIDC_CACHE_SHM_KEY_MAX, section_key);",
          "",
          "---------------"
        ]
      }
    }
  ]
}