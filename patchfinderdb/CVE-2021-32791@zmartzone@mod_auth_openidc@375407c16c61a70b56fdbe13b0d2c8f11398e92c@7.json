{
  "cve_id": "CVE-2021-32791",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In mod_auth_openidc before version 2.4.9, the AES GCM encryption in mod_auth_openidc uses a static IV and AAD. It is important to fix because this creates a static nonce and since aes-gcm is a stream cipher, this can lead to known cryptographic issues, since the same key is being reused. From 2.4.9 onwards this has been patched to use dynamic values through usage of cjose AES encryption routines.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "375407c16c61a70b56fdbe13b0d2c8f11398e92c",
  "patch_info": {
    "commit_hash": "375407c16c61a70b56fdbe13b0d2c8f11398e92c",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/375407c16c61a70b56fdbe13b0d2c8f11398e92c",
    "files": [
      ".gitignore",
      "ChangeLog",
      "Dockerfile",
      "configure.ac",
      "openidc.conf",
      "src/cache/common.c",
      "test/mod_auth_openidc.jmx"
    ],
    "message": "use encrypted JWTs for storing encrypted cache contents\n\n- avoid using static AAD/IV; thanks @niebardzo\n- bump to 2.4.9-dev\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "openidc.conf||openidc.conf",
      "src/cache/common.c||src/cache/common.c",
      "test/mod_auth_openidc.jmx||test/mod_auth_openidc.jmx"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.8.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9-dev],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "openidc.conf||openidc.conf": [
      "File: openidc.conf -> openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: OIDCInfoHook iat access_token access_token_expires id_token userinfo refresh_token session",
      "27: <Location /protected>",
      "28:   AuthType openid-connect",
      "29:   Require valid-user",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: OIDCScope \"openid email profile\"",
      "",
      "---------------"
    ],
    "src/cache/common.c||src/cache/common.c": [
      "File: src/cache/common.c -> src/cache/common.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "244:  return rv;",
      "245: }",
      "477: }",
      "553: }",
      "560:  char *input = apr_psprintf(r->pool, \"%s:%s\", passphrase, key);",
      "561:  char *output = NULL;",
      "566:   return NULL;",
      "567:  }",
      "568:  return output;",
      "",
      "[Removed Lines]",
      "247: #define oidc_cache_crypto_openssl_error(r, fmt, ...) \\",
      "248:   oidc_error(r, \"%s: %s\", apr_psprintf(r->pool, fmt, ##__VA_ARGS__), ERR_error_string(ERR_get_error(), NULL))",
      "250: #define OIDC_CACHE_CIPHER       EVP_aes_256_gcm()",
      "251: #define OIDC_CACHE_TAG_LEN       16",
      "253: #if (OPENSSL_VERSION_NUMBER >= 0x10100005L && !defined(LIBRESSL_VERSION_NUMBER))",
      "254: #define OIDC_CACHE_CRYPTO_GET_TAG     EVP_CTRL_AEAD_GET_TAG",
      "255: #define OIDC_CACHE_CRYPTO_SET_TAG     EVP_CTRL_AEAD_SET_TAG",
      "256: #define OIDC_CACHE_CRYPTO_SET_IVLEN     EVP_CTRL_AEAD_SET_IVLEN",
      "257: #else",
      "258: #define OIDC_CACHE_CRYPTO_GET_TAG     EVP_CTRL_GCM_GET_TAG",
      "259: #define OIDC_CACHE_CRYPTO_SET_TAG     EVP_CTRL_GCM_SET_TAG",
      "260: #define OIDC_CACHE_CRYPTO_SET_IVLEN     EVP_CTRL_GCM_SET_IVLEN",
      "261: #endif",
      "266: static int oidc_cache_crypto_encrypt_impl(request_rec *r,",
      "267:   unsigned char *plaintext, int plaintext_len, const unsigned char *aad,",
      "268:   int aad_len, unsigned char *key, const unsigned char *iv, int iv_len,",
      "269:   unsigned char *ciphertext, const unsigned char *tag, int tag_len) {",
      "270:  EVP_CIPHER_CTX *ctx;",
      "272:  int len;",
      "274:  int ciphertext_len;",
      "277:  if (!(ctx = EVP_CIPHER_CTX_new())) {",
      "278:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_new\");",
      "279:   return -1;",
      "280:  }",
      "283:  if (!EVP_EncryptInit_ex(ctx, OIDC_CACHE_CIPHER, NULL, NULL, NULL)) {",
      "284:   oidc_cache_crypto_openssl_error(r, \"EVP_EncryptInit_ex\");",
      "285:   return -1;",
      "286:  }",
      "289:  if (!EVP_CIPHER_CTX_ctrl(ctx, OIDC_CACHE_CRYPTO_SET_IVLEN, iv_len, NULL)) {",
      "290:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_ctrl\");",
      "291:   return -1;",
      "292:  }",
      "295:  if (!EVP_EncryptInit_ex(ctx, NULL, NULL, key, iv)) {",
      "296:   oidc_cache_crypto_openssl_error(r, \"EVP_EncryptInit_ex\");",
      "297:   return -1;",
      "298:  }",
      "301:  if (!EVP_EncryptUpdate(ctx, NULL, &len, aad, aad_len)) {",
      "302:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptUpdate aad: aad_len=%d\",",
      "303:     aad_len);",
      "304:   return -1;",
      "305:  }",
      "308:  if (!EVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, plaintext_len)) {",
      "309:   oidc_cache_crypto_openssl_error(r, \"EVP_EncryptUpdate ciphertext\");",
      "310:   return -1;",
      "311:  }",
      "312:  ciphertext_len = len;",
      "318:  if (!EVP_EncryptFinal_ex(ctx, ciphertext + len, &len)) {",
      "319:   oidc_cache_crypto_openssl_error(r, \"EVP_EncryptFinal_ex\");",
      "320:   return -1;",
      "321:  }",
      "322:  ciphertext_len += len;",
      "325:  if (!EVP_CIPHER_CTX_ctrl(ctx, OIDC_CACHE_CRYPTO_GET_TAG, tag_len,",
      "326:    (void *) tag)) {",
      "327:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_ctrl\");",
      "328:   return -1;",
      "329:  }",
      "332:  EVP_CIPHER_CTX_free(ctx);",
      "334:  return ciphertext_len;",
      "335: }",
      "340: static int oidc_cache_crypto_decrypt_impl(request_rec *r,",
      "341:   unsigned char *ciphertext, int ciphertext_len, const unsigned char *aad,",
      "342:   int aad_len, const unsigned char *tag, int tag_len, unsigned char *key,",
      "343:   const unsigned char *iv, int iv_len, unsigned char *plaintext) {",
      "344:  EVP_CIPHER_CTX *ctx;",
      "345:  int len;",
      "346:  int plaintext_len;",
      "347:  int ret;",
      "350:  if (!(ctx = EVP_CIPHER_CTX_new())) {",
      "351:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_new\");",
      "352:   return -1;",
      "353:  }",
      "356:  if (!EVP_DecryptInit_ex(ctx, OIDC_CACHE_CIPHER, NULL, NULL, NULL)) {",
      "357:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptInit_ex\");",
      "358:   return -1;",
      "359:  }",
      "362:  if (!EVP_CIPHER_CTX_ctrl(ctx, OIDC_CACHE_CRYPTO_SET_IVLEN, iv_len, NULL)) {",
      "363:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_ctrl\");",
      "364:   return -1;",
      "365:  }",
      "368:  if (!EVP_DecryptInit_ex(ctx, NULL, NULL, key, iv)) {",
      "369:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptInit_ex\");",
      "370:   return -1;",
      "371:  }",
      "374:  if (!EVP_DecryptUpdate(ctx, NULL, &len, aad, aad_len)) {",
      "375:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptUpdate aad: aad_len=%d\",",
      "376:     aad_len);",
      "377:   return -1;",
      "378:  }",
      "381:  if (!EVP_DecryptUpdate(ctx, plaintext, &len, ciphertext, ciphertext_len)) {",
      "382:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptUpdate ciphertext\");",
      "383:   return -1;",
      "384:  }",
      "385:  plaintext_len = len;",
      "388:  if (!EVP_CIPHER_CTX_ctrl(ctx, OIDC_CACHE_CRYPTO_SET_TAG, tag_len,",
      "389:    (void *) tag)) {",
      "390:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_ctrl\");",
      "391:   return -1;",
      "392:  }",
      "398:  ret = EVP_DecryptFinal_ex(ctx, plaintext + len, &len);",
      "401:  EVP_CIPHER_CTX_free(ctx);",
      "403:  if (ret > 0) {",
      "405:   plaintext_len += len;",
      "406:   return plaintext_len;",
      "407:  } else {",
      "409:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptFinal_ex\");",
      "410:   return -1;",
      "411:  }",
      "412: }",
      "417: static const unsigned char OIDC_CACHE_CRYPTO_GCM_AAD[] = { 0x4d, 0x23, 0xc3,",
      "418:   0xce, 0xc3, 0x34, 0xb4, 0x9b, 0xdb, 0x37, 0x0c, 0x43, 0x7f, 0xec, 0x78,",
      "419:   0xde };",
      "424: static const unsigned char OIDC_CACHE_CRYPTO_GCM_IV[] = { 0x00, 0x01, 0x02,",
      "425:   0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,",
      "426:   0x0f };",
      "431: static int oidc_cache_crypto_encrypt(request_rec *r, const char *plaintext,",
      "432:   unsigned char *key, char **result) {",
      "433:  char *encoded = NULL, *p = NULL, *e_tag = NULL;",
      "434:  unsigned char *ciphertext = NULL;",
      "435:  int plaintext_len, ciphertext_len, encoded_len, e_tag_len;",
      "436:  unsigned char tag[OIDC_CACHE_TAG_LEN];",
      "439:  plaintext_len = strlen(plaintext) + 1;",
      "440:  ciphertext = apr_pcalloc(r->pool,",
      "441:    (plaintext_len + EVP_CIPHER_block_size(OIDC_CACHE_CIPHER)));",
      "443:  ciphertext_len = oidc_cache_crypto_encrypt_impl(r,",
      "444:    (unsigned char *) plaintext, plaintext_len,",
      "445:    OIDC_CACHE_CRYPTO_GCM_AAD, sizeof(OIDC_CACHE_CRYPTO_GCM_AAD), key,",
      "446:    OIDC_CACHE_CRYPTO_GCM_IV, sizeof(OIDC_CACHE_CRYPTO_GCM_IV),",
      "447:    ciphertext, tag, sizeof(tag));",
      "450:  encoded_len = oidc_base64url_encode(r, &encoded, (const char *) ciphertext,",
      "451:    ciphertext_len, 1);",
      "452:  if (encoded_len > 0) {",
      "453:   p = encoded;",
      "456:   e_tag_len = oidc_base64url_encode(r, &e_tag, (const char *) tag,",
      "457:     OIDC_CACHE_TAG_LEN, 1);",
      "460:   encoded = apr_pcalloc(r->pool, encoded_len + 1 + e_tag_len + 1);",
      "461:   memcpy(encoded, p, encoded_len);",
      "462:   p = encoded + encoded_len;",
      "464:   p++;",
      "467:   memcpy(p, e_tag, e_tag_len);",
      "468:   encoded_len += e_tag_len + 1;",
      "471:   encoded[encoded_len] = '\\0';",
      "474:  }",
      "476:  return encoded_len;",
      "482: static int oidc_cache_crypto_decrypt(request_rec *r, const char *cache_value,",
      "483:   unsigned char *key, unsigned char **plaintext) {",
      "485:  int len = -1;",
      "488:  char *encoded_tag = strstr(cache_value, \".\");",
      "489:  if (encoded_tag == NULL) {",
      "490:   oidc_error(r,",
      "491:     \"corrupted cache value: no tag separator found in encrypted value\");",
      "492:   return FALSE;",
      "493:  }",
      "496:  cache_value = apr_pstrmemdup(r->pool, cache_value,",
      "497:    strlen(cache_value) - strlen(encoded_tag));",
      "498:  encoded_tag++;",
      "501:  char *d_bytes = NULL;",
      "502:  int d_len = oidc_base64url_decode(r->pool, &d_bytes, cache_value);",
      "505:  char *t_bytes = NULL;",
      "506:  int t_len = oidc_base64url_decode(r->pool, &t_bytes, encoded_tag);",
      "509:  if ((d_len > 0) && (t_len > 0)) {",
      "513:     (d_len + EVP_CIPHER_block_size(OIDC_CACHE_CIPHER) - 1));",
      "517:   len = oidc_cache_crypto_decrypt_impl(r, (unsigned char *) d_bytes,",
      "518:     d_len, OIDC_CACHE_CRYPTO_GCM_AAD,",
      "519:     sizeof(OIDC_CACHE_CRYPTO_GCM_AAD), (unsigned char *) t_bytes,",
      "520:     t_len, key, OIDC_CACHE_CRYPTO_GCM_IV,",
      "521:     sizeof(OIDC_CACHE_CRYPTO_GCM_IV), *plaintext);",
      "524:   if (len > -1) {",
      "525:    (*plaintext)[len] = '\\0';",
      "526:   } else {",
      "528:   }",
      "530:  }",
      "532:  return len;",
      "533: }",
      "538: static unsigned char *oidc_cache_hash_passphrase(request_rec *r,",
      "539:   const char *passphrase) {",
      "541:  unsigned char *key = NULL;",
      "542:  unsigned int key_len = 0;",
      "543:  oidc_jose_error_t err;",
      "545:  if (oidc_jose_hash_bytes(r->pool, OIDC_JOSE_ALG_SHA256,",
      "546:    (const unsigned char *) passphrase, strlen(passphrase), &key,",
      "547:    &key_len, &err) == FALSE) {",
      "548:   oidc_error(r, \"oidc_jose_hash_bytes returned an error: %s\", err.text);",
      "549:   return NULL;",
      "550:  }",
      "552:  return key;",
      "558: static char *oidc_cache_get_hashed_key(request_rec *r, const char *passphrase,",
      "559:   const char *key) {",
      "562:  if (oidc_util_hash_string_and_base64url_encode(r, OIDC_JOSE_ALG_SHA256,",
      "563:    input, &output) == FALSE) {",
      "564:   oidc_error(r,",
      "565:     \"oidc_util_hash_string_and_base64url_encode returned an error\");",
      "",
      "[Added Lines]",
      "247: #define OIDC_CACHE_CRYPTO_JSON_KEY \"c\"",
      "252: static apr_byte_t oidc_cache_crypto_encrypt(request_rec *r, const char *plaintext, const char *key,",
      "253:   char **result) {",
      "254:  apr_byte_t rv = FALSE;",
      "255:  json_t *json = NULL;",
      "257:  json = json_object();",
      "258:  json_object_set_new(json, OIDC_CACHE_CRYPTO_JSON_KEY, json_string(plaintext));",
      "260:  rv = oidc_util_jwt_create(r, (const char*) key, json, result);",
      "262:  if (json)",
      "263:   json_decref(json);",
      "265:  return rv;",
      "271: static apr_byte_t oidc_cache_crypto_decrypt(request_rec *r, const char *cache_value,",
      "272:   const char *key, char **plaintext) {",
      "274:  apr_byte_t rv = FALSE;",
      "275:  json_t *json = NULL;",
      "277:  rv = oidc_util_jwt_verify(r, (const char*) key, cache_value, &json);",
      "278:  if (rv == FALSE)",
      "279:   goto end;",
      "281:  rv = oidc_json_object_get_string(r->pool, json, OIDC_CACHE_CRYPTO_JSON_KEY, plaintext, NULL);",
      "283:  end:",
      "285:  if (json)",
      "286:   json_decref(json);",
      "288:  return rv;",
      "294: static char* oidc_cache_get_hashed_key(request_rec *r, const char *passphrase, const char *key) {",
      "297:  if (oidc_util_hash_string_and_base64url_encode(r, OIDC_JOSE_ALG_SHA256, input, &output)",
      "298:    == FALSE) {",
      "299:   oidc_error(r, \"oidc_util_hash_string_and_base64url_encode returned an error\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "604:   goto out;",
      "605:  }",
      "611: out:",
      "",
      "[Removed Lines]",
      "607:  rc = (oidc_cache_crypto_decrypt(r, cache_value,",
      "608:    oidc_cache_hash_passphrase(r, cfg->crypto_passphrase),",
      "609:    (unsigned char **) value) > 0);",
      "",
      "[Added Lines]",
      "341:  rc = oidc_cache_crypto_decrypt(r, cache_value, cfg->crypto_passphrase, value);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "650:    goto out;",
      "652:   if (value != NULL) {",
      "656:     goto out;",
      "657:    value = encoded;",
      "658:   }",
      "",
      "[Removed Lines]",
      "653:    if (oidc_cache_crypto_encrypt(r, value,",
      "654:      oidc_cache_hash_passphrase(r, cfg->crypto_passphrase),",
      "655:      &encoded) <= 0)",
      "",
      "[Added Lines]",
      "385:    if (oidc_cache_crypto_encrypt(r, value, cfg->crypto_passphrase, &encoded) == FALSE)",
      "",
      "---------------"
    ],
    "test/mod_auth_openidc.jmx||test/mod_auth_openidc.jmx": [
      "File: test/mod_auth_openidc.jmx -> test/mod_auth_openidc.jmx",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "3:   <hashTree>",
      "4:     <TestPlan guiclass=\"TestPlanGui\" testclass=\"TestPlan\" testname=\"OpenID Connect Apache Module Test Plan\" enabled=\"true\">",
      "5:       <stringProp name=\"TestPlan.comments\"></stringProp>",
      "",
      "[Removed Lines]",
      "2: <jmeterTestPlan version=\"1.2\" properties=\"3.1\" jmeter=\"3.1.20170220\">",
      "",
      "[Added Lines]",
      "2: <jmeterTestPlan version=\"1.2\" properties=\"5.0\" jmeter=\"5.1.1.20190725\">",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7:       <boolProp name=\"TestPlan.serialize_threadgroups\">false</boolProp>",
      "8:       <elementProp name=\"TestPlan.user_defined_variables\" elementType=\"Arguments\" guiclass=\"ArgumentsPanel\" testclass=\"Arguments\" testname=\"User Defined Variables\" enabled=\"true\">",
      "9:         <collectionProp name=\"Arguments.arguments\">",
      "12:             <stringProp name=\"Argument.value\">localhost.zmartzone.eu</stringProp>",
      "13:             <stringProp name=\"Argument.metadata\">=</stringProp>",
      "14:           </elementProp>",
      "",
      "[Removed Lines]",
      "10:           <elementProp name=\"X_APP_SERVER\" elementType=\"Argument\">",
      "11:             <stringProp name=\"Argument.name\">X_APP_SERVER</stringProp>",
      "",
      "[Added Lines]",
      "10:           <elementProp name=\"APP_SERVER\" elementType=\"Argument\">",
      "11:             <stringProp name=\"Argument.name\">APP_SERVER</stringProp>",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "57:           </elementProp>",
      "58:           <elementProp name=\"APP_PATH_ACCESS\" elementType=\"Argument\">",
      "59:             <stringProp name=\"Argument.name\">APP_PATH_ACCESS</stringProp>",
      "61:             <stringProp name=\"Argument.metadata\">=</stringProp>",
      "62:           </elementProp>",
      "63:         </collectionProp>",
      "",
      "[Removed Lines]",
      "60:             <stringProp name=\"Argument.value\">/protected/api/index.php</stringProp>",
      "",
      "[Added Lines]",
      "60:             <stringProp name=\"Argument.value\">/api/index.php</stringProp>",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "94:           </elementProp>",
      "95:           <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "96:           <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "99:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "100:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "101:           <stringProp name=\"HTTPSampler.path\">${APP_PATH_USER}</stringProp>",
      "",
      "[Removed Lines]",
      "97:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "98:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "104:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "105:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "106:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "109:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "110:         </HTTPSamplerProxy>",
      "111:         <hashTree>",
      "112:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab AuthorizationRequestPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "107:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "108:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "106:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "107:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "108:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "125:           </elementProp>",
      "126:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "127:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "130:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "131:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "132:           <stringProp name=\"HTTPSampler.path\">/${AuthorizationRequestPath}</stringProp>",
      "",
      "[Removed Lines]",
      "128:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "129:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "135:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "136:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "137:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "140:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "141:         </HTTPSamplerProxy>",
      "142:         <hashTree>",
      "143:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab AuthzResumePath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "138:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "139:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "136:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "137:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "138:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "164:           </elementProp>",
      "165:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "166:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "169:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "170:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "171:           <stringProp name=\"HTTPSampler.path\">${AuthzResumePath}</stringProp>",
      "",
      "[Removed Lines]",
      "167:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "168:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "174:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "175:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "176:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "179:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "180:         </HTTPSamplerProxy>",
      "181:         <hashTree>",
      "182:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab ResumeParam\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "177:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "178:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "174:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "175:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "176:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "226:           </elementProp>",
      "227:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "228:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "231:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "232:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "233:           <stringProp name=\"HTTPSampler.path\">/IdpSample/MainPage?cmd=login</stringProp>",
      "",
      "[Removed Lines]",
      "229:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "230:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "236:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "237:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "238:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "241:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "242:         </HTTPSamplerProxy>",
      "243:         <hashTree>",
      "244:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab ResumePath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "239:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "240:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "235:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "236:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "237:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "257:           </elementProp>",
      "258:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "259:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "262:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "263:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "264:           <stringProp name=\"HTTPSampler.path\">${ResumePath}</stringProp>",
      "",
      "[Removed Lines]",
      "260:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "261:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "267:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "268:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "269:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "272:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "273:         </HTTPSamplerProxy>",
      "274:         <hashTree>",
      "275:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab RedirectURIPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "270:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "271:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "265:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "266:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "267:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "321:           </elementProp>",
      "322:           <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "323:           <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "326:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "327:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "328:           <stringProp name=\"HTTPSampler.path\">/${RedirectURIPath}</stringProp>",
      "",
      "[Removed Lines]",
      "324:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "325:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "331:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "332:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "333:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "336:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "337:         </HTTPSamplerProxy>",
      "338:         <hashTree>",
      "339:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab ApplicationPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "334:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "335:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "328:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "329:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "330:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "367:           </elementProp>",
      "368:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "369:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "372:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "373:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "374:           <stringProp name=\"HTTPSampler.path\">${AuthzResumePath}</stringProp>",
      "",
      "[Removed Lines]",
      "370:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "371:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "377:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "378:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "379:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "382:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "383:         </HTTPSamplerProxy>",
      "384:         <hashTree>",
      "385:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab cSRFToken Parameter\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "380:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "381:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "373:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "374:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "375:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "441:           </elementProp>",
      "442:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "443:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "446:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "447:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "448:           <stringProp name=\"HTTPSampler.path\">${AuthzResumePath}</stringProp>",
      "",
      "[Removed Lines]",
      "444:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "445:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "451:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "452:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "453:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "456:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "457:         </HTTPSamplerProxy>",
      "458:         <hashTree>",
      "459:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab LocationPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "454:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "455:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "446:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "447:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "448:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "472:           </elementProp>",
      "473:           <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "474:           <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "477:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "478:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "479:           <stringProp name=\"HTTPSampler.path\">/${LocationPath}</stringProp>",
      "",
      "[Removed Lines]",
      "475:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "476:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "482:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "483:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "484:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "487:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "488:         </HTTPSamplerProxy>",
      "489:         <hashTree>",
      "490:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab ApplicationPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "485:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "486:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "476:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "477:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "478:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "517:             </elementProp>",
      "518:             <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "519:             <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "522:             <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "523:             <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "524:             <stringProp name=\"HTTPSampler.path\">/${ApplicationPath}</stringProp>",
      "",
      "[Removed Lines]",
      "520:             <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "521:             <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "527:             <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "528:             <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "529:             <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "532:             <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "533:           </HTTPSamplerProxy>",
      "534:           <hashTree>",
      "535:             <ResponseAssertion guiclass=\"AssertionGui\" testclass=\"ResponseAssertion\" testname=\"Assert User Logged In\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "530:             <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "531:             <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "520:             <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "521:             <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "522:             <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "539:               <stringProp name=\"Assertion.test_field\">Assertion.response_data</stringProp>",
      "540:               <boolProp name=\"Assertion.assume_success\">false</boolProp>",
      "541:               <intProp name=\"Assertion.test_type\">2</intProp>",
      "542:             </ResponseAssertion>",
      "543:             <hashTree/>",
      "544:             <ResponseAssertion guiclass=\"AssertionGui\" testclass=\"ResponseAssertion\" testname=\"Assert Fake Header Removal\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "532:               <stringProp name=\"Assertion.custom_message\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "548:               <stringProp name=\"Assertion.test_field\">Assertion.response_data</stringProp>",
      "549:               <boolProp name=\"Assertion.assume_success\">false</boolProp>",
      "550:               <intProp name=\"Assertion.test_type\">6</intProp>",
      "551:             </ResponseAssertion>",
      "552:             <hashTree/>",
      "553:           </hashTree>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "542:               <stringProp name=\"Assertion.custom_message\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "567:           <stringProp name=\"shareMode\">shareMode.all</stringProp>",
      "568:           <boolProp name=\"stopThread\">false</boolProp>",
      "569:           <stringProp name=\"variableNames\">USERNAME,PASSWORD</stringProp>",
      "570:         </CSVDataSet>",
      "571:         <hashTree/>",
      "582:         <hashTree/>",
      "583:       </hashTree>",
      "584:       <ThreadGroup guiclass=\"ThreadGroupGui\" testclass=\"ThreadGroup\" testname=\"OAuth Resource Access\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "572:         <CSVDataSet guiclass=\"TestBeanGUI\" testclass=\"CSVDataSet\" testname=\"Hosts Data Set\" enabled=\"true\">",
      "573:           <stringProp name=\"filename\">hosts.txt</stringProp>",
      "574:           <stringProp name=\"fileEncoding\"></stringProp>",
      "575:           <stringProp name=\"variableNames\">APP_SERVER</stringProp>",
      "576:           <stringProp name=\"delimiter\">,</stringProp>",
      "577:           <boolProp name=\"quotedData\">false</boolProp>",
      "578:           <boolProp name=\"recycle\">true</boolProp>",
      "579:           <boolProp name=\"stopThread\">false</boolProp>",
      "580:           <stringProp name=\"shareMode\">shareMode.all</stringProp>",
      "581:         </CSVDataSet>",
      "",
      "[Added Lines]",
      "562:           <boolProp name=\"ignoreFirstLine\">false</boolProp>",
      "565:         <HeaderManager guiclass=\"HeaderPanel\" testclass=\"HeaderManager\" testname=\"HTTP Header Manager\" enabled=\"true\">",
      "566:           <collectionProp name=\"HeaderManager.headers\">",
      "567:             <elementProp name=\"\" elementType=\"Header\">",
      "568:               <stringProp name=\"Header.name\">Accept</stringProp>",
      "569:               <stringProp name=\"Header.value\">*/*</stringProp>",
      "570:             </elementProp>",
      "571:           </collectionProp>",
      "572:         </HeaderManager>",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "631:           </elementProp>",
      "632:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "633:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "636:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "637:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "638:           <stringProp name=\"HTTPSampler.path\">${AS_PATH_TOKEN}</stringProp>",
      "",
      "[Removed Lines]",
      "634:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "635:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "641:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "642:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "643:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "645:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "646:         </HTTPSamplerProxy>",
      "647:         <hashTree>",
      "648:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab AccessToken\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "644:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "634:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "635:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "661:               <stringProp name=\"Header.name\">Authorization</stringProp>",
      "662:               <stringProp name=\"Header.value\">bearer ${AccessToken}</stringProp>",
      "663:             </elementProp>",
      "664:           </collectionProp>",
      "665:         </HeaderManager>",
      "666:         <hashTree/>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "654:             <elementProp name=\"\" elementType=\"Header\">",
      "655:               <stringProp name=\"Header.name\">Accept</stringProp>",
      "656:               <stringProp name=\"Header.value\">application/json</stringProp>",
      "657:             </elementProp>",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "675:             </elementProp>",
      "676:             <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "677:             <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "680:             <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "681:             <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "682:             <stringProp name=\"HTTPSampler.path\">${APP_PATH_ACCESS}</stringProp>",
      "",
      "[Removed Lines]",
      "678:             <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "679:             <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "685:             <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "686:             <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "687:             <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "689:             <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "690:           </HTTPSamplerProxy>",
      "691:           <hashTree>",
      "692:             <ResponseAssertion guiclass=\"AssertionGui\" testclass=\"ResponseAssertion\" testname=\"Assert AS_USERNAME\" enabled=\"true\">",
      "693:               <collectionProp name=\"Asserion.test_strings\">",
      "694:                 <stringProp name=\"240033137\">\\[OIDC_CLAIM_Username\\] =&gt; ${AS_USERNAME}</stringProp>",
      "695:               </collectionProp>",
      "697:               <boolProp name=\"Assertion.assume_success\">false</boolProp>",
      "698:               <intProp name=\"Assertion.test_type\">2</intProp>",
      "699:             </ResponseAssertion>",
      "700:             <hashTree/>",
      "701:           </hashTree>",
      "702:         </hashTree>",
      "714:       </hashTree>",
      "715:       <ResultCollector guiclass=\"ViewResultsFullVisualizer\" testclass=\"ResultCollector\" testname=\"View Results Tree\" enabled=\"true\">",
      "716:         <boolProp name=\"ResultCollector.error_logging\">true</boolProp>",
      "",
      "[Removed Lines]",
      "688:             <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "696:               <stringProp name=\"Assertion.test_field\">Assertion.response_data_as_document</stringProp>",
      "703:         <CSVDataSet guiclass=\"TestBeanGUI\" testclass=\"CSVDataSet\" testname=\"Hosts Data Set\" enabled=\"true\">",
      "704:           <stringProp name=\"filename\">hosts.txt</stringProp>",
      "705:           <stringProp name=\"fileEncoding\"></stringProp>",
      "706:           <stringProp name=\"variableNames\">APP_SERVER</stringProp>",
      "707:           <stringProp name=\"delimiter\">,</stringProp>",
      "708:           <boolProp name=\"quotedData\">false</boolProp>",
      "709:           <boolProp name=\"recycle\">true</boolProp>",
      "710:           <boolProp name=\"stopThread\">false</boolProp>",
      "711:           <stringProp name=\"shareMode\">shareMode.all</stringProp>",
      "712:         </CSVDataSet>",
      "713:         <hashTree/>",
      "",
      "[Added Lines]",
      "681:             <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "682:             <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "689:               <stringProp name=\"Assertion.test_field\">Assertion.response_data</stringProp>",
      "692:               <stringProp name=\"Assertion.custom_message\"></stringProp>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8ea550f34ce51d8d41ba47843739c964407fa0ad",
      "candidate_info": {
        "commit_hash": "8ea550f34ce51d8d41ba47843739c964407fa0ad",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/8ea550f34ce51d8d41ba47843739c964407fa0ad",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/util.c"
        ],
        "message": "prevent open redirect on refresh token requests; release 2.4.3\n\nadd new OIDCRedirectURLsAllowed primitive to handle post logout and\nrefresh-return-to validation; addresses #453; closes #466\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "833: # for calculating the fingerprint of the state during authentication.",
          "834: # When not defined the default \"both\" is used.",
          "835: #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "837: # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and",
          "838: # other redirects such as the \"return_to\" value on refresh token requests, e.g.:",
          "839: #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app",
          "840: # or:",
          "841: #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$",
          "842: # When not defined, the default is to match the hostname in the URL redirected to against",
          "843: # the hostname in the current request.",
          "844: #OIDCRedirectURLsAllowed [<regexp>]+",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.3rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "273: #define OIDCOAuthAccessTokenBindingPolicy      \"OIDCOAuthAccessTokenBindingPolicy\"",
          "274: #define OIDCRefreshAccessTokenBeforeExpiry     \"OIDCRefreshAccessTokenBeforeExpiry\"",
          "275: #define OIDCStateInputHeaders                  \"OIDCStateInputHeaders\"",
          "277: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276: #define OIDCRedirectURLsAllowed                \"OIDCRedirectURLsAllowed\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1126:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "1127: }",
          "1129: int oidc_cfg_dir_refresh_access_token_before_expiry(request_rec *r) {",
          "1130:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "1131:    &auth_openidc_module);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1130: static const char * oidc_set_redirect_urls_allowed(cmd_parms *cmd, void *m,",
          "1131:   const char *arg) {",
          "1132:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(",
          "1133:    cmd->server->module_config, &auth_openidc_module);",
          "1134:  if (cfg->redirect_urls_allowed == NULL)",
          "1135:   cfg->redirect_urls_allowed = apr_hash_make(cmd->pool);",
          "1136:  apr_hash_set(cfg->redirect_urls_allowed, arg, APR_HASH_KEY_STRING, arg);",
          "1137:  return NULL;",
          "1138: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1305:  c->state_input_headers = OIDC_DEFAULT_STATE_INPUT_HEADERS;",
          "1307:  return c;",
          "1308: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1318:  c->redirect_urls_allowed = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1775:    add->state_input_headers != OIDC_DEFAULT_STATE_INPUT_HEADERS ?",
          "1776:      add->state_input_headers : base->state_input_headers;",
          "1778:  return c;",
          "1779: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1791:  c->redirect_urls_allowed =",
          "1792:    add->redirect_urls_allowed != NULL ?",
          "1793:      add->redirect_urls_allowed : base->redirect_urls_allowed;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3163:     RSRC_CONF,",
          "3164:     \"Specify header name which is used as the input for calculating the fingerprint of the state during authentication; must be one of \\\"none\\\", \\\"user-agent\\\", \\\"x-forwarded-for\\\" or \\\"both\\\" (default).\"),",
          "3166:   { NULL }",
          "3167: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3183:   AP_INIT_ITERATE(OIDCRedirectURLsAllowed,",
          "3184:     oidc_set_redirect_urls_allowed,",
          "3185:     (void *) APR_OFFSETOF(oidc_cfg, redirect_urls_allowed),",
          "3186:     RSRC_CONF|ACCESS_CONF|OR_AUTHCFG,",
          "3187:     \"Specify one or more regular expressions that define URLs allowed for post logout and other redirects.\"),",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:  oidc_debug(r, \"enter\");",
          "",
          "[Removed Lines]",
          "230: static char *oidc_get_browser_state_hash(request_rec *r, oidc_cfg *c, const char *nonce) {",
          "",
          "[Added Lines]",
          "230: static char *oidc_get_browser_state_hash(request_rec *r, oidc_cfg *c,",
          "231:   const char *nonce) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "544:  oidc_jose_error_t err;",
          "545:  oidc_jwk_t *jwk = NULL;",
          "546:  if (oidc_util_create_symmetric_key(r, c->provider.client_secret,",
          "549:   return FALSE;",
          "551:  oidc_jwt_t *jwt = NULL;",
          "552:  if (oidc_jwt_parse(r->pool, state, &jwt,",
          "555:   oidc_error(r,",
          "556:     \"could not parse JWT from state: invalid unsolicited response: %s\",",
          "557:     oidc_jose_e2s(r->pool, err));",
          "",
          "[Removed Lines]",
          "547:    oidc_alg2keysize(alg), OIDC_JOSE_ALG_SHA256,",
          "548:    TRUE, &jwk) == FALSE)",
          "553:    oidc_util_merge_symmetric_key(r->pool, c->private_keys, jwk),",
          "554:    &err) == FALSE) {",
          "",
          "[Added Lines]",
          "548:    oidc_alg2keysize(alg), OIDC_JOSE_ALG_SHA256, TRUE, &jwk) == FALSE)",
          "553:    oidc_util_merge_symmetric_key(r->pool, c->private_keys, jwk), &err)",
          "554:    == FALSE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "576:  }",
          "582:   oidc_jwt_destroy(jwt);",
          "583:   return FALSE;",
          "584:  }",
          "",
          "[Removed Lines]",
          "579:  if (oidc_proto_validate_jwt(r, jwt, provider->validate_issuer ? provider->issuer : NULL, FALSE, FALSE,",
          "580:    provider->idtoken_iat_slack,",
          "581:    OIDC_TOKEN_BINDING_POLICY_DISABLED) == FALSE) {",
          "",
          "[Added Lines]",
          "579:  if (oidc_proto_validate_jwt(r, jwt,",
          "580:    provider->validate_issuer ? provider->issuer : NULL, FALSE, FALSE,",
          "581:      provider->idtoken_iat_slack,",
          "582:      OIDC_TOKEN_BINDING_POLICY_DISABLED) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "603:  char *target_link_uri = NULL;",
          "604:  oidc_jose_get_string(r->pool, jwt->payload.value.json,",
          "607:  if (target_link_uri == NULL) {",
          "608:   if (c->default_sso_url == NULL) {",
          "609:    oidc_error(r,",
          "",
          "[Removed Lines]",
          "605:    OIDC_CLAIM_TARGET_LINK_URI,",
          "606:    FALSE, &target_link_uri, NULL);",
          "",
          "[Added Lines]",
          "606:    OIDC_CLAIM_TARGET_LINK_URI, FALSE, &target_link_uri, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1232:  if (oidc_proto_refresh_request(r, c, provider, refresh_token, &s_id_token,",
          "1235:   oidc_error(r, \"access_token could not be refreshed\");",
          "1236:   return FALSE;",
          "1237:  }",
          "",
          "[Removed Lines]",
          "1233:    &s_access_token, &s_token_type, &expires_in,",
          "1234:    &s_refresh_token) == FALSE) {",
          "",
          "[Added Lines]",
          "1233:    &s_access_token, &s_token_type, &expires_in, &s_refresh_token)",
          "1234:    == FALSE) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1312:     if (oidc_proto_resolve_userinfo(r, c, provider, id_token_sub,",
          "1315:      oidc_error(r,",
          "1316:        \"resolving user info claims with the refreshed access token failed, nothing will be stored in the session\");",
          "",
          "[Removed Lines]",
          "1313:       refreshed_access_token, &result, userinfo_jwt) == FALSE) {",
          "",
          "[Added Lines]",
          "1313:       refreshed_access_token, &result, userinfo_jwt)",
          "1314:       == FALSE) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1485: }",
          "1487: static apr_byte_t oidc_refresh_access_token_before_expiry(request_rec *r,",
          "1490:  const char *s_access_token_expires = NULL;",
          "1491:  apr_time_t t_expires = -1;",
          "",
          "[Removed Lines]",
          "1488:   oidc_cfg *cfg, oidc_session_t *session, int ttl_minimum, int logout_on_error) {",
          "",
          "[Added Lines]",
          "1489:   oidc_cfg *cfg, oidc_session_t *session, int ttl_minimum,",
          "1490:   int logout_on_error) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1529:  if (oidc_refresh_access_token(r, cfg, session, provider,",
          "1530:    NULL) == FALSE) {",
          "1532:   if (logout_on_error & OIDC_LOGOUT_ON_ERROR_REFRESH)",
          "1533:    return ERROR;",
          "1534:   else",
          "",
          "[Removed Lines]",
          "1531:   oidc_warn(r, \"access_token could not be refreshed, logout=%d\", logout_on_error & OIDC_LOGOUT_ON_ERROR_REFRESH);",
          "",
          "[Added Lines]",
          "1533:   oidc_warn(r, \"access_token could not be refreshed, logout=%d\",",
          "1534:     logout_on_error & OIDC_LOGOUT_ON_ERROR_REFRESH);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2373:  char *javascript = NULL, *javascript_method = NULL;",
          "2374:  char *html_head =",
          "2375:    \"<style type=\\\"text/css\\\">body {text-align: center}</style>\";",
          "2378:   html_head = apr_psprintf(r->pool, \"%s%s\", html_head, javascript);",
          "",
          "[Removed Lines]",
          "2376:  if (oidc_post_preserve_javascript(r, NULL, &javascript,",
          "2377:    &javascript_method) == TRUE)",
          "",
          "[Added Lines]",
          "2379:  if (oidc_post_preserve_javascript(r, NULL, &javascript, &javascript_method)",
          "2380:    == TRUE)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2617:  }",
          "2622:   return oidc_util_html_send_error(r, c->error_template,",
          "2623:     \"Invalid Request\",",
          "2624:     \"\\\"target_link_uri\\\" parameter does not match configuration settings, aborting to prevent an open redirect.\",",
          "",
          "[Removed Lines]",
          "2620:  if (oidc_target_link_uri_matches_configuration(r, c,",
          "2621:    target_link_uri) == FALSE) {",
          "",
          "[Added Lines]",
          "2623:  if (oidc_target_link_uri_matches_configuration(r, c, target_link_uri)",
          "2624:    == FALSE) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2673:   }",
          "2679:    return oidc_util_html_send_error(r, c->error_template,",
          "",
          "[Removed Lines]",
          "2676:   if (oidc_proto_account_based_discovery(r, c, issuer, &issuer) == FALSE) {",
          "",
          "[Added Lines]",
          "2679:   if (oidc_proto_account_based_discovery(r, c, issuer, &issuer)",
          "2680:     == FALSE) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2922:   goto out;",
          "2927:   goto out;",
          "2929:  json_t *events = json_object_get(jwt->payload.value.json,",
          "",
          "[Removed Lines]",
          "2919:  if (oidc_proto_validate_jwt(r, jwt, provider->validate_issuer ? provider->issuer : NULL, FALSE, FALSE,",
          "2920:    provider->idtoken_iat_slack,",
          "2921:    OIDC_TOKEN_BINDING_POLICY_DISABLED) == FALSE)",
          "2925:  if (oidc_proto_validate_aud_and_azp(r, cfg, provider,",
          "2926:    &jwt->payload) == FALSE)",
          "",
          "[Added Lines]",
          "2923:  if (oidc_proto_validate_jwt(r, jwt,",
          "2924:    provider->validate_issuer ? provider->issuer : NULL, FALSE, FALSE,",
          "2925:      provider->idtoken_iat_slack,",
          "2926:      OIDC_TOKEN_BINDING_POLICY_DISABLED) == FALSE)",
          "2930:  if (oidc_proto_validate_aud_and_azp(r, cfg, provider, &jwt->payload)",
          "2931:    == FALSE)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3040:  return rc;",
          "3041: }",
          "3045:  apr_uri_t uri;",
          "3046:  const char *c_host = NULL;",
          "3048:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
          "3051:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3052:   return FALSE;",
          "3053:  }",
          "3069:     apr_psprintf(r->pool,",
          "",
          "[Removed Lines]",
          "3043: static apr_byte_t oidc_validate_post_logout_url(request_rec *r, const char *url,",
          "3044:   char **err_str, char **err_desc) {",
          "3055:  c_host = oidc_get_current_url_host(r);",
          "3056:  if ((uri.hostname != NULL)",
          "3057:    && ((strstr(c_host, uri.hostname) == NULL)",
          "3058:      || (strstr(uri.hostname, c_host) == NULL))) {",
          "3061:     apr_psprintf(r->pool,",
          "3062:       \"logout value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
          "3063:       apr_uri_unparse(r->pool, &uri, 0), c_host);",
          "3064:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3065:   return FALSE;",
          "3066:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
          "",
          "[Added Lines]",
          "3048: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
          "3049:   const char *url, char **err_str, char **err_desc) {",
          "3052:  apr_hash_index_t *hi = NULL;",
          "3061:  if (c->redirect_urls_allowed != NULL) {",
          "3062:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
          "3063:     apr_hash_next(hi)) {",
          "3064:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
          "3065:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
          "3066:      NULL, err_str) == TRUE)",
          "3067:     break;",
          "3068:   }",
          "3069:   if (hi == NULL) {",
          "3072:      apr_psprintf(r->pool,",
          "3073:        \"value does not match the list of allowed redirect URLs: %s\",",
          "3074:        url);",
          "3075:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3076:    return FALSE;",
          "3077:   }",
          "3078:  } else if (uri.hostname != NULL) {",
          "3079:   c_host = oidc_get_current_url_host(r);",
          "3080:   if ((strstr(c_host, uri.hostname) == NULL)",
          "3081:     || (strstr(uri.hostname, c_host) == NULL)) {",
          "3084:      apr_psprintf(r->pool,",
          "3085:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
          "3086:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
          "3087:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3088:    return FALSE;",
          "3089:   }",
          "3090:  }",
          "3092:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3071:       url);",
          "3072:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3073:   return FALSE;",
          "3090:  }",
          "3093:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
          "3096:     apr_psprintf(r->pool,",
          "3098:       url);",
          "3099:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3100:   return FALSE;",
          "",
          "[Removed Lines]",
          "3074:         } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
          "3077:                                 apr_psprintf(r->pool,",
          "3078:                                                 \"No hostname was parsed and starting with '//': %s\",",
          "3079:                                                 url);",
          "3080:                 oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3081:                 return FALSE;",
          "3082:         } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
          "3085:                                 apr_psprintf(r->pool,",
          "3086:                                                 \"No hostname was parsed and starting with '/\\\\': %s\",",
          "3087:                                                 url);",
          "3088:                 oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3089:                 return FALSE;",
          "3097:       \"logout value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
          "",
          "[Added Lines]",
          "3100:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
          "3103:     \"No hostname was parsed and starting with '//': %s\", url);",
          "3104:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3105:   return FALSE;",
          "3106:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
          "3109:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
          "3110:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3111:   return FALSE;",
          "3119:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3132:  } else {",
          "3136:     &error_description) == FALSE) {",
          "3137:    return oidc_util_html_send_error(r, c->error_template, error_str,",
          "3138:      error_description,",
          "",
          "[Removed Lines]",
          "3135:   if (oidc_validate_post_logout_url(r, url, &error_str,",
          "",
          "[Added Lines]",
          "3157:   if (oidc_validate_redirect_url(r, c, url, &error_str,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3391:  char *return_to = NULL;",
          "3392:  char *r_access_token = NULL;",
          "3393:  char *error_code = NULL;",
          "3396:  oidc_util_get_request_parameter(r, OIDC_REDIRECT_URI_REQUEST_REFRESH,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3416:  char *error_str = NULL;",
          "3417:  char *error_description = NULL;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3405:   return HTTP_INTERNAL_SERVER_ERROR;",
          "3406:  }",
          "3408:  if (r_access_token == NULL) {",
          "3409:   oidc_error(r,",
          "3410:     \"refresh token request handler called with no access_token parameter\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3433:  if (oidc_validate_redirect_url(r, c, return_to, &error_str,",
          "3434:    &error_description) == FALSE) {",
          "3435:   oidc_error(r, \"return_to URL validation failed: %s: %s\", error_str,",
          "3436:     error_description);",
          "3437:   return HTTP_INTERNAL_SERVER_ERROR;",
          "3438:  }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3569:     oidc_provider_t *provider = NULL;",
          "3572:      return HTTP_INTERNAL_SERVER_ERROR;",
          "",
          "[Removed Lines]",
          "3570:     if (oidc_get_provider_from_session(r, c, session,",
          "3571:       &provider) == FALSE)",
          "",
          "[Added Lines]",
          "3602:     if (oidc_get_provider_from_session(r, c, session, &provider)",
          "3603:       == FALSE)",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:  apr_byte_t state_input_headers;",
          "426: } oidc_cfg;",
          "428: int oidc_check_user_id(request_rec *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:  apr_hash_t *redirect_urls_allowed;",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2267:   goto out;",
          "2268:  }",
          "2275:  }",
          "2278:  rv = TRUE;",
          "2280: out:",
          "",
          "[Removed Lines]",
          "2270:  if (pcre_get_substring(input, subStr, rc, OIDC_UTIL_REGEXP_MATCH_NR,",
          "2271:    &(psubStrMatchStr)) <= 0) {",
          "2273:     rc);",
          "2274:   goto out;",
          "",
          "[Added Lines]",
          "2270:  if (output) {",
          "2272:   if (pcre_get_substring(input, subStr, rc, OIDC_UTIL_REGEXP_MATCH_NR,",
          "2273:     &(psubStrMatchStr)) <= 0) {",
          "2275:      rc);",
          "2276:    goto out;",
          "2277:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3514bcd13e81b4aa4a71990ebb2ad892705453a",
      "candidate_info": {
        "commit_hash": "d3514bcd13e81b4aa4a71990ebb2ad892705453a",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/d3514bcd13e81b4aa4a71990ebb2ad892705453a",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "don't defer Discovery to the content handler\n\nto allow RequireAll and Require not directives; see #770\ncloses #775; bump to 2.4.11rc5; thanks@rajeevn1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2251:   if (c->metadata_dir != NULL) {",
          "2258:    oidc_request_state_set(r, OIDC_REQUEST_STATE_KEY_DISCOVERY, \"\");",
          "2259:    r->user = \"\";",
          "2261:   }",
          "",
          "[Removed Lines]",
          "2257:    oidc_debug(r, \"defer discovery to the content handler\");",
          "2260:    return OK;",
          "",
          "[Added Lines]",
          "2258:    oidc_discovery(r, c);",
          "2259:    return DONE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4073:   const void *parsed_require_args,",
          "4074:   oidc_authz_match_claim_fn_type match_claim_fn) {",
          "4080:   r->user = NULL;",
          "4090:  json_t *claims = NULL, *id_token = NULL;",
          "",
          "[Removed Lines]",
          "4076:  oidc_debug(r, \"enter: require_args=\\\"%s\\\"\", require_args);",
          "4079:  if (r->user != NULL && strlen(r->user) == 0) {",
          "4081:   if (oidc_dir_cfg_unauth_action(r) == OIDC_UNAUTH_PASS)",
          "4082:    return AUTHZ_GRANTED;",
          "4083:   if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL)",
          "4084:    return AUTHZ_GRANTED;",
          "4085:   if (r->method_number == M_OPTIONS)",
          "4086:    return AUTHZ_GRANTED;",
          "4087:  }",
          "",
          "[Added Lines]",
          "4075:  oidc_debug(r, \"enter: (r->user=%s) require_args=\\\"%s\\\"\", r->user, require_args);",
          "4078:  if ((r->user != NULL) && (strlen(r->user) == 0))",
          "4081:  if (oidc_dir_cfg_unauth_action(r) == OIDC_UNAUTH_PASS)",
          "4082:   return AUTHZ_GRANTED;",
          "4083:  if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL)",
          "4084:   return AUTHZ_GRANTED;",
          "4085:  if (r->method_number == M_OPTIONS)",
          "4086:   return AUTHZ_GRANTED;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4173: int oidc_auth_checker(request_rec *r) {",
          "4177:   r->user = NULL;",
          "4187:  json_t *claims = NULL, *id_token = NULL;",
          "",
          "[Removed Lines]",
          "4176:  if (r->user != NULL && strlen(r->user) == 0) {",
          "4178:   if (oidc_dir_cfg_unauth_action(r) == OIDC_UNAUTH_PASS)",
          "4179:    return OK;",
          "4180:   if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL)",
          "4181:    return OK;",
          "4182:   if (r->method_number == M_OPTIONS)",
          "4183:    return OK;",
          "4184:  }",
          "",
          "[Added Lines]",
          "4175:  if ((r->user != NULL) && (strlen(r->user) == 0))",
          "4178:  if (oidc_dir_cfg_unauth_action(r) == OIDC_UNAUTH_PASS)",
          "4179:   return OK;",
          "4180:  if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL)",
          "4181:   return OK;",
          "4182:  if (r->method_number == M_OPTIONS)",
          "4183:   return OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd3b646f29c10365d23476e822d065dbc66cc013",
      "candidate_info": {
        "commit_hash": "bd3b646f29c10365d23476e822d065dbc66cc013",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/bd3b646f29c10365d23476e822d065dbc66cc013",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "allow authorization on info requests, see #746\n\nbump to 2.4.10rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10.1rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10.1rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ece4e9fd96a62f4ee3db92e283869b55737c17f8",
      "candidate_info": {
        "commit_hash": "ece4e9fd96a62f4ee3db92e283869b55737c17f8",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/ece4e9fd96a62f4ee3db92e283869b55737c17f8",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c",
          "test/stub.c"
        ],
        "message": "hash define expression option to OIDCUnAuthAction; fixes 1461634\n\nso it compiles for Apache 2.2; bump to 2.4.5rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "test/stub.c||test/stub.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:  char *cookie;",
          "291:  char *authn_header;",
          "292:  int unauth_action;",
          "293:  ap_expr_info_t *unauth_expression;",
          "294:  int unautz_action;",
          "295:  apr_array_header_t *pass_cookies;",
          "296:  apr_array_header_t *strip_cookies;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "295: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "938: static const char * oidc_set_unauth_action(cmd_parms *cmd, void *m,",
          "939:   const char *arg1, const char *arg2) {",
          "940:  oidc_dir_cfg *dir_cfg = (oidc_dir_cfg *) m;",
          "942:  const char *rv = oidc_parse_unauth_action(cmd->pool, arg1,",
          "943:    &dir_cfg->unauth_action);",
          "944:  if ((rv == NULL) && (arg2 != NULL)) {",
          "945:   dir_cfg->unauth_expression = ap_expr_parse_cmd(cmd, arg2,",
          "946:     AP_EXPR_FLAG_DONT_VARY & AP_EXPR_FLAG_RESTRICTED, &expr_err,",
          "",
          "[Removed Lines]",
          "941:  const char *expr_err = NULL;",
          "",
          "[Added Lines]",
          "945: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "946:  const char *expr_err = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "950:      expr_err, NULL);",
          "951:   }",
          "952:  }",
          "953:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "954: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "956: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1864:  c->cookie_path = OIDC_CONFIG_STRING_UNSET;",
          "1865:  c->authn_header = OIDC_CONFIG_STRING_UNSET;",
          "1866:  c->unauth_action = OIDC_CONFIG_POS_INT_UNSET;",
          "1867:  c->unauth_expression = NULL;",
          "1868:  c->unautz_action = OIDC_CONFIG_POS_INT_UNSET;",
          "1869:  c->pass_cookies = NULL;",
          "1870:  c->strip_cookies = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1871: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1873: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1996:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "1997:    &auth_openidc_module);",
          "2001:  if (dir_cfg->unauth_action == OIDC_CONFIG_POS_INT_UNSET)",
          "2002:   return OIDC_DEFAULT_UNAUTH_ACTION;",
          "2004:  if (dir_cfg->unauth_expression == NULL)",
          "2005:   return dir_cfg->unauth_action;",
          "",
          "[Removed Lines]",
          "1999:  int rc = 0;",
          "2000:  const char *err_str = NULL;",
          "",
          "[Added Lines]",
          "2008: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "2009:  int rc = 0;",
          "2010:  const char *err_str = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2012:  }",
          "2014:  return (rc > 0) ? dir_cfg->unauth_action : OIDC_DEFAULT_UNAUTH_ACTION;",
          "2015: }",
          "2017: apr_byte_t oidc_dir_cfg_unauth_expr_is_set(request_rec *r) {",
          "2018:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "2019:    &auth_openidc_module);",
          "2020:  return (dir_cfg->unauth_expression != NULL) ? TRUE : FALSE;",
          "2021: }",
          "2023: int oidc_dir_cfg_unautz_action(request_rec *r) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2022: #else",
          "2023:  return dir_cfg->unauth_action;",
          "2024: #endif",
          "2028: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "2032: #else",
          "2033:  return FALSE;",
          "2034: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2062:  c->unauth_action =",
          "2063:    add->unauth_action != OIDC_CONFIG_POS_INT_UNSET ?",
          "2064:      add->unauth_action : base->unauth_action;",
          "2065:  c->unauth_expression =",
          "2066:    add->unauth_expression != NULL ?",
          "2067:      add->unauth_expression : base->unauth_expression;",
          "2068:  c->unautz_action =",
          "2069:    add->unautz_action != OIDC_CONFIG_POS_INT_UNSET ?",
          "2070:      add->unautz_action : base->unautz_action;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2079: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "2083: #endif",
          "",
          "---------------"
        ],
        "test/stub.c||test/stub.c": [
          "File: test/stub.c -> test/stub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:    return NULL;",
          "299:   }",
          "301:   AP_DECLARE(int) ap_expr_exec(request_rec *r, const ap_expr_info_t *expr,",
          "302:     const char **err) {",
          "303:    return 0;",
          "304:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "306: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d4bd852ac7c26b3310f8f76587354f4b59e0b06",
      "candidate_info": {
        "commit_hash": "9d4bd852ac7c26b3310f8f76587354f4b59e0b06",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/9d4bd852ac7c26b3310f8f76587354f4b59e0b06",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/jose.c"
        ],
        "message": "add AM_PROG_CC_C_O to configure.ac (at least for RHEL 7.7)\n\n- see #765; thanks @bitmagewb\n- include <openssl/bn.h> in jose.c to compile with OpenSSL 1.0.x\n- bump to 2.4.11rc2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/jose.c||src/jose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8: AC_CONFIG_MACRO_DIR([m4])",
          "10: AC_PROG_CC",
          "11: AM_PROG_AR",
          "12: LT_INIT([dlopen])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: AM_PROG_CC_C_O",
          "",
          "---------------"
        ],
        "src/jose.c||src/jose.c": [
          "File: src/jose.c -> src/jose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #include <openssl/err.h>",
          "54: #include <openssl/pem.h>",
          "55: #include <openssl/rsa.h>",
          "57: #ifdef WIN32",
          "58: #define snprintf _snprintf",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: #include <openssl/bn.h>",
          "",
          "---------------"
        ]
      }
    }
  ]
}