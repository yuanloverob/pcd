{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ea9b564d78a7f370ffee9bc7635a0f644da6b924",
      "candidate_info": {
        "commit_hash": "ea9b564d78a7f370ffee9bc7635a0f644da6b924",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ea9b564d78a7f370ffee9bc7635a0f644da6b924",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Add the \"LL\" suffix on a pair of larger integer literals, for compatibility with older C compilers.\n\nFossilOrigin-Name: 6f328c35947d6b3a0741514757b8944692203e89bdb2e7f9bbce8ad9288be344",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b6e17f0139482a22c2fc84552767bc9a293b282499e3a790de069e0e84455fb2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "703:   double r2 = (double)i;",
          "704:   return r1==0.0",
          "705:       || (memcmp(&r1, &r2, sizeof(r1))==0",
          "707: }",
          "",
          "[Removed Lines]",
          "706:           && i >= -2251799813685248 && i < 2251799813685248);",
          "",
          "[Added Lines]",
          "706:           && i >= -2251799813685248LL && i < 2251799813685248LL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad31727fc68e47612edcc1566ef88174da75f258",
      "candidate_info": {
        "commit_hash": "ad31727fc68e47612edcc1566ef88174da75f258",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ad31727fc68e47612edcc1566ef88174da75f258",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h"
        ],
        "message": "Use macros to determine if an expression is always true or always false.\n\nFossilOrigin-Name: 6de980a09c3a7adf71f2c9a63a242673b5e1f246e8ee071b26844275f0dad0fc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7713996aa99ce6dd35b5a2db74dd26658fb8d9817169b2a7531cdef6edb41403",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:     pNew->iAgg = -1;",
          "774:     if( pToken ){",
          "775:       if( nExtra==0 ){",
          "777:         pNew->u.iValue = iValue;",
          "778:       }else{",
          "779:         pNew->u.zToken = (char*)&pNew[1];",
          "",
          "[Removed Lines]",
          "776:         pNew->flags |= EP_IntValue|EP_Leaf;",
          "",
          "[Added Lines]",
          "776:         pNew->flags |= EP_IntValue|EP_Leaf|(iValue?EP_IsTrue:EP_IsFalse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "880: }",
          "",
          "[Removed Lines]",
          "897: static int exprAlwaysTrue(Expr *p){",
          "898:   int v = 0;",
          "899:   if( ExprHasProperty(p, EP_FromJoin) ) return 0;",
          "900:   if( !sqlite3ExprIsInteger(p, &v) ) return 0;",
          "901:   return v!=0;",
          "902: }",
          "903: static int exprAlwaysFalse(Expr *p){",
          "904:   int v = 0;",
          "905:   if( ExprHasProperty(p, EP_FromJoin) ) return 0;",
          "906:   if( !sqlite3ExprIsInteger(p, &v) ) return 0;",
          "907:   return v==0;",
          "908: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "923:     return pLeft;",
          "924:   }else if( pParse->nErr || IN_RENAME_OBJECT ){",
          "925:     return sqlite3PExpr(pParse, TK_AND, pLeft, pRight);",
          "927:     sqlite3ExprDelete(db, pLeft);",
          "928:     sqlite3ExprDelete(db, pRight);",
          "929:     return sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0);",
          "",
          "[Removed Lines]",
          "926:   }else if( exprAlwaysFalse(pLeft) || exprAlwaysFalse(pRight) ){",
          "",
          "[Added Lines]",
          "899:   }else if( ExprAlwaysFalse(pLeft) || ExprAlwaysFalse(pRight) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1818:        || sqlite3StrICmp(pExpr->u.zToken, \"false\")==0)",
          "1819:   ){",
          "1820:     pExpr->op = TK_TRUEFALSE;",
          "1821:     return 1;",
          "1822:   }",
          "1823:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1794:     ExprSetProperty(pExpr, pExpr->u.zToken[4]==0 ? EP_IsTrue : EP_IsFalse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4522: #endif",
          "4523:     default: {",
          "4524:     default_expr:",
          "4526:         sqlite3VdbeGoto(v, dest);",
          "4529:       }else{",
          "4530:         r1 = sqlite3ExprCodeTemp(pParse, pExpr, &regFree1);",
          "",
          "[Removed Lines]",
          "4525:       if( exprAlwaysTrue(pExpr) ){",
          "4527:       }else if( exprAlwaysFalse(pExpr) ){",
          "",
          "[Added Lines]",
          "4499:       if( ExprAlwaysTrue(pExpr) ){",
          "4501:       }else if( ExprAlwaysFalse(pExpr) ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4692: #endif",
          "4693:     default: {",
          "4694:     default_expr:",
          "4696:         sqlite3VdbeGoto(v, dest);",
          "4699:       }else{",
          "4700:         r1 = sqlite3ExprCodeTemp(pParse, pExpr, &regFree1);",
          "",
          "[Removed Lines]",
          "4695:       if( exprAlwaysFalse(pExpr) ){",
          "4697:       }else if( exprAlwaysTrue(pExpr) ){",
          "",
          "[Added Lines]",
          "4669:       if( ExprAlwaysFalse(pExpr) ){",
          "4671:       }else if( ExprAlwaysTrue(pExpr) ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2545: #define ExprHasAllProperty(E,P)  (((E)->flags&(P))==(P))",
          "2546: #define ExprSetProperty(E,P)     (E)->flags|=(P)",
          "2547: #define ExprClearProperty(E,P)   (E)->flags&=~(P)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2550: #define ExprAlwaysTrue(E)   (((E)->flags&(EP_FromJoin|EP_IsTrue))==EP_IsTrue)",
          "2551: #define ExprAlwaysFalse(E)  (((E)->flags&(EP_FromJoin|EP_IsFalse))==EP_IsFalse)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc96192eefed7a08931454035cb25210529cc46c",
      "candidate_info": {
        "commit_hash": "dc96192eefed7a08931454035cb25210529cc46c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dc96192eefed7a08931454035cb25210529cc46c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c",
          "src/vdbeaux.c"
        ],
        "message": "Ensure all file names passed to the VFS layer are double-zero terminated.\n\nFossilOrigin-Name: 251230cf43c591cf49cf9d2f392581c57d334b791bc3407814d216b5999c32f4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2e98b42fcb7bc38e22808a9dc1d7a4231ed08ffa97c9f08f33e6e8cd8726856c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1359:     len = 0;",
          "1360:   }",
          "1361:   zMaster[len] = '\\0';",
          "1363:   return SQLITE_OK;",
          "1364: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1362:   zMaster[len+1] = '\\0';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2595:   rc = sqlite3OsFileSize(pMaster, &nMasterJournal);",
          "2596:   if( rc!=SQLITE_OK ) goto delmaster_out;",
          "2597:   nMasterPtr = pVfs->mxPathname+1;",
          "2599:   if( !zMasterJournal ){",
          "2600:     rc = SQLITE_NOMEM_BKPT;",
          "2601:     goto delmaster_out;",
          "2602:   }",
          "2604:   rc = sqlite3OsRead(pMaster, zMasterJournal, (int)nMasterJournal, 0);",
          "2605:   if( rc!=SQLITE_OK ) goto delmaster_out;",
          "2606:   zMasterJournal[nMasterJournal] = 0;",
          "2608:   zJournal = zMasterJournal;",
          "2609:   while( (zJournal-zMasterJournal)<nMasterJournal ){",
          "",
          "[Removed Lines]",
          "2598:   zMasterJournal = sqlite3Malloc(nMasterJournal + nMasterPtr + 1);",
          "2603:   zMasterPtr = &zMasterJournal[nMasterJournal+1];",
          "",
          "[Added Lines]",
          "2599:   zMasterJournal = sqlite3Malloc(nMasterJournal + nMasterPtr + 2);",
          "2604:   zMasterPtr = &zMasterJournal[nMasterJournal+2];",
          "2608:   zMasterJournal[nMasterJournal+1] = 0;",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2651:     nMainFile = sqlite3Strlen30(zMainFile);",
          "2653:     if( zMaster==0 ) return SQLITE_NOMEM_BKPT;",
          "2654:     do {",
          "2655:       u32 iRandom;",
          "",
          "[Removed Lines]",
          "2652:     zMaster = sqlite3MPrintf(db, \"%s-mjXXXXXX9XXz\", zMainFile);",
          "",
          "[Added Lines]",
          "2652:     zMaster = sqlite3MPrintf(db, \"%s-mjXXXXXX9XXz%c%c\", zMainFile, 0, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6488271f055df2c2f403883cb8eb6ad459da2222",
      "candidate_info": {
        "commit_hash": "6488271f055df2c2f403883cb8eb6ad459da2222",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6488271f055df2c2f403883cb8eb6ad459da2222",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "Change the parser on this branch to more closely match trunk. This saves a few more cycles.\n\nFossilOrigin-Name: be01b801fbc258f0ab9542130cec12a5ea5e2d0bf087684a9eda909ad459c211",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bcc8b38ac75b731a4cd2873ab83f423be036467a511b617c779869de9bbb5383",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1036: %endif  SQLITE_OMIT_CAST",
          "1040: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP. {",
          "1041:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1042: }",
          "1043: expr(A) ::= id(X) LP STAR RP. {",
          "1044:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1045: }",
          "1048: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "1050:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1052: }",
          "1054:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1056: }",
          "1057: %endif",
          "",
          "[Removed Lines]",
          "1039: %ifdef SQLITE_OMIT_WINDOWFUNC",
          "1046: %endif",
          "1049: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_opt(F) over_opt(Z). {",
          "1051:   sqlite3WindowAttach(pParse, A, F, Z);",
          "1053: expr(A) ::= id(X) LP STAR RP filter_opt(F) over_opt(Z). {",
          "1055:   sqlite3WindowAttach(pParse, A, F, Z);",
          "",
          "[Added Lines]",
          "1047: %type filter_over {",
          "1048:   struct FunctionTail {",
          "1049:     Window *pWin;",
          "1050:     Expr *pFilter;",
          "1051:   }",
          "1052: }",
          "1053: %destructor filter_over {",
          "1054:   sqlite3WindowDelete(pParse->db, $$.pWin);",
          "1055:   sqlite3ExprDelete(pParse->db, $$.pFilter);",
          "1056: }",
          "1057: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_over(F). {",
          "1059:   sqlite3WindowAttach(pParse, A, F.pFilter, F.pWin);",
          "1061: expr(A) ::= id(X) LP STAR RP filter_over(F). {",
          "1063:   sqlite3WindowAttach(pParse, A, F.pFilter, F.pWin);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1659: %type part_opt {ExprList*}",
          "1660: %destructor part_opt {sqlite3ExprListDelete(pParse->db, $$);}",
          "1665: %type range_or_rows {int}",
          "",
          "[Removed Lines]",
          "1662: %type filter_opt {Expr*}",
          "1663: %destructor filter_opt {sqlite3ExprDelete(pParse->db, $$);}",
          "",
          "[Added Lines]",
          "1670: %type filter_clause {Expr*}",
          "1671: %destructor filter_clause {sqlite3ExprDelete(pParse->db, $$);}",
          "1673: %type over_clause {Window*}",
          "1674: %destructor over_clause {sqlite3WindowDelete(pParse->db, $$);}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1726: %destructor window_clause {sqlite3WindowListDelete(pParse->db, $$);}",
          "1727: window_clause(A) ::= WINDOW windowdefn_list(B). { A = B; }",
          "1733:   A = Z;",
          "1734:   assert( A!=0 );",
          "1735: }",
          "1737:   A = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1738:   if( A ){",
          "1739:     A->zName = sqlite3DbStrNDup(pParse->db, Z.z, Z.n);",
          "1740:   }",
          "1741: }",
          "",
          "[Removed Lines]",
          "1729: %type over_opt {Window*}",
          "1730: %destructor over_opt {sqlite3WindowDelete(pParse->db, $$);}",
          "1731: over_opt(A) ::= . { A=0; }",
          "1732: over_opt(A) ::= OVER LP window(Z) RP. {",
          "1736: over_opt(A) ::= OVER nm(Z). {",
          "1743: filter_opt(A) ::= .                            { A = 0; }",
          "1744: filter_opt(A) ::= FILTER LP WHERE expr(X) RP.  { A = X; }",
          "",
          "[Added Lines]",
          "1740: filter_over(F) ::= filter_clause(A) over_clause(B). {",
          "1741:   F.pFilter = A;",
          "1742:   F.pWin = B;",
          "1743: }",
          "1744: filter_over(F) ::= over_clause(B). {",
          "1745:   F.pFilter = 0;",
          "1746:   F.pWin = B;",
          "1747: }",
          "1748: filter_over(F) ::= filter_clause(A). {",
          "1749:   F.pFilter = A;",
          "1750:   F.pWin = 0;",
          "1751: }",
          "1753: over_clause(A) ::= OVER LP window(Z) RP. {",
          "1757: over_clause(A) ::= OVER nm(Z). {",
          "1764: filter_clause(A) ::= FILTER LP WHERE expr(X) RP.  { A = X; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5cb1ffc1bd1cae42c5846b10e6cb23c53290bdad",
      "candidate_info": {
        "commit_hash": "5cb1ffc1bd1cae42c5846b10e6cb23c53290bdad",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5cb1ffc1bd1cae42c5846b10e6cb23c53290bdad",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "Allocate a few extra bytes for the pager temp page as an overrun buffer while processing corrupt database files.\n\nFossilOrigin-Name: e7aca0714bc475e04b16e9db78722ce025d2a1382f80cfc0a49cff2af904eae5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 05b87e0755638d31f6d8918f8758362f8c3981661449b5171180a8498f66bd9d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3786:       rc = sqlite3OsFileSize(pPager->fd, &nByte);",
          "3787:     }",
          "3788:     if( rc==SQLITE_OK ){",
          "3791:     }",
          "3793:     if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "3789:       pNew = (char *)sqlite3PageMalloc(pageSize);",
          "3790:       if( !pNew ) rc = SQLITE_NOMEM_BKPT;",
          "",
          "[Added Lines]",
          "3791:       pNew = (char *)sqlite3PageMalloc(pageSize+8);",
          "3792:       if( !pNew ){",
          "3793:         rc = SQLITE_NOMEM_BKPT;",
          "3794:       }else{",
          "3795:         memset(pNew+pageSize, 0, 8);",
          "3796:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}