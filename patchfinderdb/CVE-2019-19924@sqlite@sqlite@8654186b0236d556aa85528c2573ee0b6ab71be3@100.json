{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "35fb866ea334beedadb258eaacb68b627a6b2554",
      "candidate_info": {
        "commit_hash": "35fb866ea334beedadb258eaacb68b627a6b2554",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/35fb866ea334beedadb258eaacb68b627a6b2554",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5rank.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem with fts5 \"ORDER BY rank\" queries when the fts5 table name requires quoting.\n\nFossilOrigin-Name: 00e9a8f2730eb7239bf7fd107c97c409e4f9fbd968510766373440a9079898eb",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5rank.test||ext/fts5/test/fts5rank.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:   rc = fts5PrepareStatement(&pSorter->pStmt, pConfig,",
          "936:       pConfig->zDb, pConfig->zName, zRank, pConfig->zName,",
          "937:       (zRankArgs ? \", \" : \"\"),",
          "938:       (zRankArgs ? zRankArgs : \"\"),",
          "",
          "[Removed Lines]",
          "935:       \"SELECT rowid, rank FROM %Q.%Q ORDER BY %s(%s%s%s) %s\",",
          "",
          "[Added Lines]",
          "935:       \"SELECT rowid, rank FROM %Q.%Q ORDER BY %s(\\\"%w\\\"%s%s) %s\",",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "768: do_catchsql_test 13.1 {",
          "769:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "772: #-------------------------------------------------------------------------",
          "773: reset_db",
          "",
          "[Removed Lines]",
          "770: } {1 {vtable constructor failed: t1}}",
          "",
          "[Added Lines]",
          "770: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "959: do_catchsql_test 15.1 {",
          "960:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "963: #---------------------------------------------------------------------------",
          "964: #",
          "",
          "[Removed Lines]",
          "961: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "961: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3903: | end crash-fed6e90021ba5d.db",
          "3904: }]} {}",
          "3907:   CREATE VIRTUAL TABLE t2 USING fts5vocab('t1','row');",
          "3908:   CREATE VIRTUAL TABLE t3 USING fts5vocab('t1','col');",
          "3909:   CREATE VIRTUAL TABLE t4 USING fts5vocab('t1','instance');",
          "3912: do_catchsql_test 33.2 {",
          "3913:   SELECT * FROM t2;",
          "3916: do_catchsql_test 33.3 {",
          "3917:   SELECT * FROM t2, t3, t4 WHERE t2.term=t3.term AND t3.term=t4.term;",
          "3920: #-------------------------------------------------------------------------",
          "3921: reset_db",
          "",
          "[Removed Lines]",
          "3906: do_execsql_test 33.1 {",
          "3910: }",
          "3914: } {1 {database disk image is malformed}}",
          "3918: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "3906: do_catchsql_test 33.1 {",
          "3910: } {/*malformed database schema*/}",
          "3914: } {/*malformed database schema*/}",
          "3918: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4638: do_catchsql_test 37.1 {",
          "4639:   SELECT * FROM t3;",
          "4642: #-------------------------------------------------------------------------",
          "4643: reset_db",
          "4645:   CREATE VIRTUAL TABLE t1 USING fts5(b, c);",
          "4646:   INSERT INTO t1 VALUES('a', 'b');",
          "4647:   SELECT quote(block) FROM t1_data WHERE rowid=10;",
          "4648: } {X'000000000101010001010101'}",
          "4651:   UPDATE t1_data SET block = X'FFFFFFFF0101010001010101' WHERE rowid = 10;",
          "4652:   SELECT rowid FROM t1('a');",
          "4653: } {1}",
          "",
          "[Removed Lines]",
          "4640: } {1 {database disk image is malformed}}",
          "4644: do_execsql_test 37.0 {",
          "4650: do_execsql_test 37.1 {",
          "",
          "[Added Lines]",
          "4640: } {/*malformed database schema*/}",
          "4644: do_execsql_test 37a.0 {",
          "4650: do_execsql_test 37a.1 {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4895: do_catchsql_test 38.1 {",
          "4896:   UPDATE t1 SET b=quote(zeroblob(200)) WHERE t1 MATCH 'thread*';",
          "4899: #-------------------------------------------------------------------------",
          "4900: reset_db",
          "",
          "[Removed Lines]",
          "4897: } {0 {}}",
          "",
          "[Added Lines]",
          "4897: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5326: | end crash2.txt.db",
          "5327: }]} {}",
          "5330:   BEGIN;",
          "5331:   INSERT INTO t1(b) VALUES(X'819192e578de3fa24af3733ca8769291a0fee3669f9fddefc5cba913e4225d4b6ce2b04f26b87fad3ee6f9b7d90a1ea62a169bf41e5d32707a6ca5c3d05e4bde05c9d89eaaa8c50e74333d2e9fcd7dfe95528a3a016aac1102d825c5cd70cf99d8a88e0ea7f798d4334386518b7ad359beb168b93aba059a2a3bd93112d65b44c12b9904ea786b204d80531cdf0504bf9b203dbe927061974caf7b9f30cbc3397b61f802e732012a6663d41c3607d6f1c0dbcfd489adac05ca500c0b04439d894cd93a840159225ef73b627e178b9f84b3ffe66cf22a963a8368813ff7961fc47f573211ccec95e0220dcbb3bf429f4a50ba54d7a53784ac51bf');",
          "5332:   INSERT INTO t1(b) VALUES(X'c8ae0d0e7c3175946e62ba2b449511d4eb504079984a20f77969f62206c9f3d7ea25358ab705e6978627290b6d48db9032f815a06a79a4f4b809841a0942eed12954ed166f666111812a508abc3bec87958846edaec0a6fe14564bc0a4b78f1c35ebcacca6bae29cc37ae9b59d8a2d7593af1e47dda0ece2268a98d20febafad037964f139851f9a57f48b3706b01721769071991412044cd6006f1d72eb6eb4aa5ad77e378176db8c15575fbeee47165e38a7c6c5a557ac2dfe11813976eaf6741cf593a9e457053a3c34cddfbe605a6e25419f993de8374fafcd3636509d8416a51dc7bcc14cfca322ae343078f47e23522431c17d0da0c033');",
          "5333:   INSERT INTO t1(b) VALUES(X'dc29a94e873a45a4243fce9b912aaefbadf1d0423e0345793874b356eeb500b92fb05284c1601fe9bad3143f72162f10242cec27c44ebf764c8fc9fb0824e32c4161472a4f914f579e0e8274f08ca1a02e59b9d8eec1f31061f9ccb9ed97a6f06534e991f7992c761489e6a7724f6e9c2b581e77487ded3a986d53c4419bbd3e9747cee300e670dd7294874c77e2ed48da68eaa6c3ec954a09ac410493d98e34d6686e54fbbe80696705f10e040c66093efb40746b33600685c94c664c7942835a9e954866121d5dcfb2cb12e92521ea3df175ee17072502dad9b9c1565f801b2179799011eb7418bfa00323e3157589e648ff7378be233c79b7');",
          "5336: do_catchsql_test 40.2 {",
          "5337:   INSERT INTO t1(a,b) VALUES(1,11),(2,22),(3, true ),(4,44);",
          "5340: #-------------------------------------------------------------------------",
          "5341: reset_db",
          "",
          "[Removed Lines]",
          "5329: do_execsql_test 40.1 {",
          "5334: }",
          "5338: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "5329: do_catchsql_test 40.1 {",
          "5334: } {/*malformed database schema*/}",
          "5338: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5790: do_catchsql_test 43.1 {",
          "5791:   INSERT INTO t1(t1) VALUES('optimize');",
          "5794: #-------------------------------------------------------------------------",
          "5795: reset_db",
          "",
          "[Removed Lines]",
          "5792: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "5792: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6047:   INSERT INTO t1(t1, rank) VALUES('merge', 5);",
          "6048:   INSERT INTO t1(t1, rank) VALUES('merge', 5);",
          "6049:   INSERT INTO t1(t1, rank) VALUES('merge', 5);",
          "6052: #--------------------------------------------------------------------------",
          "6053: reset_db",
          "",
          "[Removed Lines]",
          "6050: } {0 {}}",
          "",
          "[Added Lines]",
          "6050: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6266: do_catchsql_test 46.1 {",
          "6267:   SELECT snippet(t1,'[','', '--',-1,10) FROM t1('*');",
          "6270: #--------------------------------------------------------------------------",
          "6271: reset_db",
          "",
          "[Removed Lines]",
          "6268: } {0 {{}}}",
          "",
          "[Added Lines]",
          "6268: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6419: do_catchsql_test 47.1 {",
          "6420:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "6423: do_catchsql_test 47.2 {",
          "6424:   SELECT count(*) FROM (",
          "",
          "[Removed Lines]",
          "6421: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "6421: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6426:       highlight(t1, 2, '[', ']') FROM t1('g h')",
          "6427:       WHERE rank MATCH 'bm25(1.0, 1.0)' ORDER BY rank",
          "6428:   )",
          "6431: #--------------------------------------------------------------------------",
          "6432: reset_db",
          "",
          "[Removed Lines]",
          "6429: } {0 3}",
          "",
          "[Added Lines]",
          "6429: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7131: do_catchsql_test 52.1 {",
          "7132:   SELECT fts5_decode(id, block) FROM t1_data;",
          "7135: #-------------------------------------------------------------------------",
          "7136: reset_db",
          "",
          "[Removed Lines]",
          "7133: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "7133: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7346: do_catchsql_test 53.1 {",
          "7347:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x<>1 FROM c WHERE x<10)",
          "7348:     INSERT INTO t1(a) SELECT randomblob(3000) FROM c;",
          "7351: #-------------------------------------------------------------------------",
          "7352: reset_db",
          "",
          "[Removed Lines]",
          "7349: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "7349: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7563: do_catchsql_test 54.1 {",
          "7564:   SELECT rowid==-1 FROM t1('t*');",
          "7567: #-------------------------------------------------------------------------",
          "7568: reset_db",
          "",
          "[Removed Lines]",
          "7565: } {0 {0 0 0}}",
          "",
          "[Added Lines]",
          "7565: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "7777: | end crash-b366b5ac0d3887.db",
          "7778: }]} {}",
          "7781:   SAVEPOINT one;",
          "7782:   DELETE FROM t1 WHERE a MATCH 'ts';",
          "7785: do_execsql_test 55.2 {",
          "7786:   ROLLBACK TO one;",
          "",
          "[Removed Lines]",
          "7780: do_execsql_test 55.1 {",
          "7783: }",
          "",
          "[Added Lines]",
          "7780: do_catchsql_test 55.1 {",
          "7783: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8013:     set res \"1 {database disk image is malformed}\"",
          "8014:   }",
          "8015:   set res",
          "8018: #-------------------------------------------------------------------------",
          "8019: reset_db",
          "",
          "[Removed Lines]",
          "8016: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "8016: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8132: do_catchsql_test 57.1 {",
          "8133:   INSERT INTO t1(t1) VALUES('optimize')",
          "8136: #-------------------------------------------------------------------------",
          "8137: reset_db",
          "",
          "[Removed Lines]",
          "8134: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "8134: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "8339: | end crash-5a5acd0ab42d31.db",
          "8340: }]} {}",
          "8343:   SELECT * FROM t1('t*');",
          "8346: #-------------------------------------------------------------------------",
          "8347: do_test 59.0 {",
          "",
          "[Removed Lines]",
          "8342: do_execsql_test 58.1 {",
          "8344: } {{} {} {} {} {} {}}",
          "",
          "[Added Lines]",
          "8342: do_catchsql_test 58.1 {",
          "8344: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "8948: | end crash-e5fa281edabddf.db",
          "8949: }]} {}",
          "8952:   CREATE VIRTUAL TABLE t3 USING fts5vocab('t1'(),'col' );",
          "8955: do_catchsql_test 61.2 {",
          "8956:   SELECT * FROM t3 ORDER BY rowid;",
          "8959: breakpoint",
          "8960: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "8951: do_execsql_test 61.1 {",
          "8953: }",
          "8957: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "8951: do_catchsql_test 61.1 {",
          "8953: } {/*malformed database schema*/}",
          "8957: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "9159: do_catchsql_test 62.1 {",
          "9160:   WITH c(x) AS (VALUES(false) UNION ALL SELECT x+1 FROM c WHERE x<72)",
          "9161:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "9164: #---------------------------------------------------------------------------",
          "9165: do_test 63.0 {",
          "",
          "[Removed Lines]",
          "9162: } {0 {}}",
          "",
          "[Added Lines]",
          "9162: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "9358: do_catchsql_test 63.1 {",
          "9359:   SELECT * FROM t1 WHERE b MATCH 'thead*thead*theSt*';",
          "9362: do_catchsql_test 63.2 {",
          "9363:   INSERT INTO t1(t1) VALUES('optimize');",
          "9367: do_catchsql_test 63.3 {",
          "9368:   SELECT * FROM t1 WHERE b MATCH 'thead*thead*theSt*';",
          "9371: sqlite3_fts5_may_be_corrupt 0",
          "9372: finish_test",
          "",
          "[Removed Lines]",
          "9360: } {1 {database disk image is malformed}}",
          "9364: } {0 {}}",
          "9366: breakpoint",
          "9369: } {0 {}}",
          "",
          "[Added Lines]",
          "9360: } {/*malformed database schema*/}",
          "9364: } {/*malformed database schema*/}",
          "9368: } {/*malformed database schema*/}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5rank.test||ext/fts5/test/fts5rank.test": [
          "File: ext/fts5/test/fts5rank.test -> ext/fts5/test/fts5rank.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:   SELECT rowid FROM ttt('word') WHERE rowid BETWEEN 30 AND 40 ORDER BY rank;",
          "163: } {30 31 32 33 34 35 36 37 38 39 40}",
          "165: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: #-------------------------------------------------------------------------",
          "166: reset_db",
          "167: do_execsql_test 6.0 {",
          "168:   CREATE VIRTUAL TABLE \"My.Table\" USING fts5(Text);",
          "170:   INSERT INTO \"My.Table\" VALUES ('hello this is a test');",
          "171:   INSERT INTO \"My.Table\" VALUES ('of trying to order by');",
          "172:   INSERT INTO \"My.Table\" VALUES ('rank on an fts5 table');",
          "173:   INSERT INTO \"My.Table\" VALUES ('that have periods in');",
          "174:   INSERT INTO \"My.Table\" VALUES ('the table names.');",
          "175:   INSERT INTO \"My.Table\" VALUES ('table table table');",
          "176: }",
          "177: do_execsql_test 6.1 {",
          "178:   SELECT * FROM \"My.Table\" WHERE Text MATCH 'table' ORDER BY rank;",
          "179: } {",
          "180:   {table table table} {the table names.} {rank on an fts5 table}",
          "181: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75aec4fc886c04fe098828cc03bc72c197cbf40f0a1890fe5bbb98d4fd5c3c7e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac713403fdfa3b2c28aa9e1e0068baafdee7b2a5",
      "candidate_info": {
        "commit_hash": "ac713403fdfa3b2c28aa9e1e0068baafdee7b2a5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ac713403fdfa3b2c28aa9e1e0068baafdee7b2a5",
        "files": [
          "ext/session/sqlite3session.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix harmless compiler warning seen with MSVC for x64.\n\nFossilOrigin-Name: 857b2ba6d05d6f5a8cfdf269bae9005b25e1903ab9dc6b70546979d8c633f03b",
        "before_after_code_files": [
          "ext/session/sqlite3session.c||ext/session/sqlite3session.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sqlite3session.c||ext/session/sqlite3session.c": [
          "File: ext/session/sqlite3session.c -> ext/session/sqlite3session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1837:     i64 nNew = p->nAlloc ? p->nAlloc : 128;",
          "1838:     do {",
          "1839:       nNew = nNew*2;",
          "1842:     aNew = (u8 *)sqlite3_realloc64(p->aBuf, nNew);",
          "1843:     if( 0==aNew ){",
          "",
          "[Removed Lines]",
          "1840:     }while( (nNew-p->nBuf)<nByte );",
          "",
          "[Added Lines]",
          "1840:     }while( (size_t)(nNew-p->nBuf)<nByte );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6bfa44da226fd758a2ee924d1e8e3a742b0635b6d3f922a4a7919cb14b2418e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dee9be9b3b3b2ff760b6b9df20034fc1052e4c79",
      "candidate_info": {
        "commit_hash": "dee9be9b3b3b2ff760b6b9df20034fc1052e4c79",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dee9be9b3b3b2ff760b6b9df20034fc1052e4c79",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/tester.tcl"
        ],
        "message": "Update the tester.tcl --malloctrace option so that it uses eu-addr2line instead of addr2line.\n\nFossilOrigin-Name: 79c073878d56fc638b751b0e61295df182f7ee6f8ebd7319c1eeac1608abbac8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/tester.tcl||test/tester.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d840e9bb023a1e84a7739d764a0f6cf608fc3183ff8c366fcdb486ebd932f0c1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/tester.tcl||test/tester.tcl": [
          "File: test/tester.tcl -> test/tester.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2054:   set tbl2 \"CREATE TABLE ${database}.frame(frame INTEGER PRIMARY KEY, line);\\n\"",
          "2055:   set tbl3 \"CREATE TABLE ${database}.file(name PRIMARY KEY, content);\\n\"",
          "2057:   foreach f [array names frames] {",
          "2058:     set addr [format %x $f]",
          "2060:     set line [eval exec $cmd]",
          "2061:     append sql \"INSERT INTO ${database}.frame VALUES($f, '$line');\\n\"",
          "",
          "[Removed Lines]",
          "2059:     set cmd \"addr2line -e [info nameofexec] $addr\"",
          "",
          "[Added Lines]",
          "2057:   set pid [pid]",
          "2061:     set cmd \"eu-addr2line --pid=$pid $addr\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "108e6b2c875cd723626a5960cce4d492d6c59813",
      "candidate_info": {
        "commit_hash": "108e6b2c875cd723626a5960cce4d492d6c59813",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/108e6b2c875cd723626a5960cce4d492d6c59813",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/window.c",
          "test/permutations.test",
          "test/window4.test",
          "test/windowfault.test"
        ],
        "message": "Always evaluate window functions using the alternative path usually only used by EXCLUDE frames if the SQLITE_QueryFlattener test flag is set.\n\nFossilOrigin-Name: 2879a691aca9304aea5acb46bab8e82bb2e08eb54201f3679d60bfc0e8383845",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/window.c||src/window.c",
          "test/permutations.test||test/permutations.test",
          "test/window4.test||test/window4.test",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 723c84be3ec5ae941b7abd2442cdb76ca3bd76a5ce2d830b0e648c6e1424885a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6540:   assert( (pMem->flags & ~(MEM_Null|MEM_Agg))==0 );",
          "6541: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6542:   if( pOp->p3 ){",
          "6543:     rc = sqlite3VdbeMemAggValue(pMem, &aMem[pOp->p3], pOp->p4.pFunc);",
          "6544:     pMem = &aMem[pOp->p3];",
          "6545:   }else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6543:     memAboutToChange(p, &aMem[pOp->p3]);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:   struct NthValueCtx *p;",
          "216:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "217:   if( p ){",
          "219:     p->nStep++;",
          "220:     if( iVal==p->nStep ){",
          "221:       p->pValue = sqlite3_value_dup(apArg[0]);",
          "222:     }",
          "223:   }",
          "224:   UNUSED_PARAMETER(nArg);",
          "225:   UNUSED_PARAMETER(apArg);",
          "226: }",
          "227: static void nth_valueValueFunc(sqlite3_context *pCtx){",
          "228:   struct NthValueCtx *p;",
          "",
          "[Removed Lines]",
          "218:     i64 iVal = sqlite3_value_int64(apArg[1]);",
          "",
          "[Added Lines]",
          "218:     i64 iVal;",
          "219:     switch( sqlite3_value_numeric_type(apArg[1]) ){",
          "220:       case SQLITE_INTEGER:",
          "221:         iVal = sqlite3_value_int64(apArg[1]);",
          "222:         break;",
          "223:       case SQLITE_FLOAT: {",
          "224:         double fVal = sqlite3_value_double(apArg[1]);",
          "225:         if( ((i64)fVal)!=fVal ) goto error_out;",
          "226:         iVal = (i64)fVal;",
          "227:         break;",
          "228:       }",
          "229:       default:",
          "230:         goto error_out;",
          "231:     }",
          "232:     if( iVal<=0 ) goto error_out;",
          "237:       if( !p->pValue ){",
          "238:         sqlite3_result_error_nomem(pCtx);",
          "239:       }",
          "244:   return;",
          "246:  error_out:",
          "247:   sqlite3_result_error(",
          "248:       pCtx, \"second argument to nth_value must be a positive integer\", -1",
          "249:   );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "252:   if( p && p->pValue==0 ){",
          "253:     p->pValue = sqlite3_value_dup(apArg[0]);",
          "254:   }",
          "255:   UNUSED_PARAMETER(nArg);",
          "256:   UNUSED_PARAMETER(apArg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:     if( !p->pValue ){",
          "279:       sqlite3_result_error_nomem(pCtx);",
          "280:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1072:   pWin->eType = eType;",
          "1073:   pWin->eStart = eStart;",
          "1074:   pWin->eEnd = eEnd;",
          "1075:   pWin->eExclude = eExclude;",
          "1076:   pWin->bImplicitFrame = bImplicitFrame;",
          "1077:   pWin->pEnd = sqlite3WindowOffsetExpr(pParse, pEnd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1102:   if( eExclude==0 && OptimizationDisabled(pParse->db, SQLITE_QueryFlattener) ){",
          "1103:     eExclude = TK_NO;",
          "1104:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1536:   addrNext = sqlite3VdbeCurrentAddr(v);",
          "1537:   sqlite3VdbeAddOp2(v, OP_Rowid, csr, regRowid);",
          "1538:   sqlite3VdbeAddOp3(v, OP_Gt, pMWin->regEndRowid, lblBrk, regRowid);",
          "1539:   if( pMWin->eExclude==TK_CURRENT ){",
          "1540:     sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, lblNext, regRowid);",
          "1541:   }else if( pMWin->eExclude!=TK_NO ){",
          "1542:     int addr;",
          "1545:     if( pMWin->eExclude==TK_TIES ){",
          "1546:       addrEq = sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, lblNext, regRowid);",
          "1547:     }",
          "",
          "[Removed Lines]",
          "1543:     int addrEq = 0;;",
          "1544:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pMWin->pOrderBy,0,0);",
          "",
          "[Added Lines]",
          "1574:     int addrEq = 0;",
          "1575:     KeyInfo *pKeyInfo;",
          "1577:     pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pMWin->pOrderBy, 0, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1668:     FuncDef *pFunc = pWin->pFunc;",
          "1669:     sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1670:     nArg = MAX(nArg, windowArgCount(pWin));",
          "1672:       if( pFunc->zName==nth_valueName || pFunc->zName==first_valueName ){",
          "1673:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp);",
          "1674:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "",
          "[Removed Lines]",
          "1671:     if( pWin->eExclude==0 ){",
          "",
          "[Added Lines]",
          "1704:     if( pMWin->regStartRowid==0 ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1764:   int reg2 = sqlite3GetTempReg(pParse);",
          "1765:   int arith = OP_Add;",
          "1766:   int addrGe;",
          "1769:   int regString = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1767:   int addrNotNull;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2337:   assert( pMWin->eEnd==TK_FOLLOWING || pMWin->eEnd==TK_CURRENT",
          "2338:        || pMWin->eEnd==TK_UNBOUNDED || pMWin->eEnd==TK_PRECEDING",
          "2339:   );",
          "2341:   lblWhereEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2372:   assert( pMWin->eExclude==0 || pMWin->eExclude==TK_CURRENT",
          "2373:        || pMWin->eExclude==TK_GROUP || pMWin->eExclude==TK_TIES",
          "2374:        || pMWin->eExclude==TK_NO",
          "2375:   );",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1032: test_suite \"no_optimization\" -description {",
          "1033:   Run test scripts with optimizations disabled using the",
          "1034:   sqlite3_test_control(SQLITE_TESTCTRL_OPTIMIZATIONS) interface.",
          "1042:   optimization_control $::dbhandle all 0",
          "1043: }",
          "",
          "[Removed Lines]",
          "1035: } -files {",
          "1036:   where.test where2.test where3.test where4.test where5.test",
          "1037:   where6.test where7.test where8.test where9.test",
          "1038:   whereA.test whereB.test wherelimit.test",
          "1039:   select1.test select2.test select3.test select4.test select5.test",
          "1040:   select7.test select8.test selectA.test selectC.test",
          "1041: } -dbconfig {",
          "",
          "[Added Lines]",
          "1035: } -files [",
          "1036:   test_set \\",
          "1037:     [glob -nocomplain $::testdir/window*.test]                       \\",
          "1038:     where.test where2.test where3.test where4.test where5.test       \\",
          "1039:     where6.test where7.test where8.test where9.test                  \\",
          "1040:     whereA.test whereB.test wherelimit.test                          \\",
          "1041:     select1.test select2.test select3.test select4.test select5.test \\",
          "1042:     select7.test select8.test selectA.test selectC.test",
          "1043: ] -dbconfig {",
          "",
          "---------------"
        ],
        "test/window4.test||test/window4.test": [
          "File: test/window4.test -> test/window4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:   SELECT group_concat(b, '.') OVER (",
          "151:     ORDER BY a ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "152:   ) FROM t4",
          "155: do_execsql_test 3.0 {",
          "156:   DROP TABLE IF EXISTS t5;",
          "",
          "[Removed Lines]",
          "153: } {A.B.C.D.E.F.G.H.I.J   B.C.D.E.F.G.H.I.J   C.D.E.F.G.H.I.J   D.E.F.G.H.I.J   E.F.G.H.I.J   F.G.H.I.J   G.H.I.J   H.I.J   I.J   J}",
          "",
          "[Added Lines]",
          "153: } {A.B.C.D.E.F.G.H.I.J   B.C.D.E.F.G.H.I.J   C.D.E.F.G.H.I.J   D.E.F.G.H.I.J",
          "154:   E.F.G.H.I.J   F.G.H.I.J   G.H.I.J   H.I.J   I.J   J}",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: }",
          "29: faultsim_save_and_close",
          "32:   faultsim_restore_and_reopen",
          "33: } -body {",
          "34:   execsql {",
          "",
          "[Removed Lines]",
          "31: do_faultsim_test 1 -start 1 -faults oom-* -prep {",
          "",
          "[Added Lines]",
          "31: do_faultsim_test 1 -start 1 -faults oom-t* -prep {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd9cb85a414998d27bc7904842c69c76da240794",
      "candidate_info": {
        "commit_hash": "cd9cb85a414998d27bc7904842c69c76da240794",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cd9cb85a414998d27bc7904842c69c76da240794",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Add the SQLITE_SUBTYPE flag, which may be passed to sqlite3_create_window_function() to indicate that the window function uses sqlite3_value_subtype() to check the sub-type of its arguments.\n\nFossilOrigin-Name: ba2ebc3a348decc5cedaf14960e30e7ae26a26824cfa198727f2499162142ef3",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2504: #endif",
          "2505:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "2506:     rc = sqlite3_create_function(db, aFunc[i].zName, aFunc[i].nArg,",
          "2508:                                  (void*)&aFunc[i].flag,",
          "2509:                                  aFunc[i].xFunc, 0, 0);",
          "2510:   }",
          "2511: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "2512:   for(i=0; i<sizeof(aAgg)/sizeof(aAgg[0]) && rc==SQLITE_OK; i++){",
          "2513:     rc = sqlite3_create_window_function(db, aAgg[i].zName, aAgg[i].nArg,",
          "2515:                                  aAgg[i].xStep, aAgg[i].xFinal,",
          "2516:                                  aAgg[i].xValue, jsonGroupInverse, 0);",
          "2517:   }",
          "",
          "[Removed Lines]",
          "2507:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "2514:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "[Added Lines]",
          "2507:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "2514:                 SQLITE_SUBTYPE | SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 658a42d3633b31fda260f2c5a1a2c7dd8eb4eb0114d322369017c56faf5ecd42",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1720:   assert( SQLITE_FUNC_CONSTANT==SQLITE_DETERMINISTIC );",
          "1721:   assert( SQLITE_FUNC_DIRECT==SQLITE_DIRECTONLY );",
          "1723:   enc &= (SQLITE_FUNC_ENCMASK|SQLITE_ANY);",
          "1725: #ifndef SQLITE_OMIT_UTF16",
          "",
          "[Removed Lines]",
          "1722:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY);",
          "",
          "[Added Lines]",
          "1722:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY|SQLITE_SUBTYPE);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "4991: #define SQLITE_DETERMINISTIC    0x000000800",
          "4992: #define SQLITE_DIRECTONLY       0x000080000",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5001: #define SQLITE_SUBTYPE          0x000100000",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3612:   int regStartRowid;",
          "3613:   int regEndRowid;",
          "3614: };",
          "3616: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3615:   u8 bExprArgs;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "967:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "970:       if( pWin->pFilter ){",
          "971:         Expr *pFilter = sqlite3ExprDup(db, pWin->pFilter, 0);",
          "972:         pSublist = sqlite3ExprListAppend(pParse, pSublist, pFilter);",
          "",
          "[Removed Lines]",
          "968:       pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "969:       pSublist = exprListAppendList(pParse, pSublist, pWin->pOwner->x.pList, 0);",
          "",
          "[Added Lines]",
          "968:       ExprList *pArgs = pWin->pOwner->x.pList;",
          "969:       if( pWin->pFunc->funcFlags & SQLITE_FUNC_SUBTYPE ){",
          "970:         selectWindowRewriteEList(pParse, pMWin, pSrc, pArgs, pTab, &pSublist);",
          "971:         pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "972:         pWin->bExprArgs = 1;",
          "973:       }else{",
          "974:         pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "975:         pSublist = exprListAppendList(pParse, pSublist, pArgs, 0);",
          "976:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1432:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1433:     FuncDef *pFunc = pWin->pFunc;",
          "1434:     int regArg;",
          "1436:     int i;",
          "1438:     assert( bInverse==0 || pWin->eStart!=TK_UNBOUNDED );",
          "",
          "[Removed Lines]",
          "1435:     int nArg = windowArgCount(pWin);",
          "",
          "[Added Lines]",
          "1442:     int nArg = pWin->bExprArgs ? 0 : windowArgCount(pWin);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1482:         VdbeCoverage(v);",
          "1483:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1484:       }",
          "1485:       if( pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL ){",
          "1486:         CollSeq *pColl;",
          "1487:         assert( nArg>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1492:       if( pWin->bExprArgs ){",
          "1493:         nArg = pWin->pOwner->x.pList->nExpr;",
          "1494:         regArg = sqlite3GetTempRange(pParse, nArg);",
          "1495:         sqlite3ExprCodeExprList(pParse, pWin->pOwner->x.pList, regArg, 0, 0);",
          "1496:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1492:                         bInverse, regArg, pWin->regAccum);",
          "1493:       sqlite3VdbeAppendP4(v, pFunc, P4_FUNCDEF);",
          "1494:       sqlite3VdbeChangeP5(v, (u8)nArg);",
          "1495:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1496:     }",
          "1497:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1507:       if( pWin->bExprArgs ){",
          "1508:         sqlite3ReleaseTempRange(pParse, regArg, nArg);",
          "1509:       }",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-08-30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # Test cases for RANGE BETWEEN and especially with NULLS LAST",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix windowB",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a, b);",
          "25:   INSERT INTO t1 VALUES(NULL, 1);",
          "26:   INSERT INTO t1 VALUES(NULL, 2);",
          "27:   INSERT INTO t1 VALUES(NULL, 3);",
          "28: } {}",
          "30: foreach {tn win} {",
          "31:   1 { ORDER BY a RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "32:   2 { ORDER BY a NULLS LAST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "33:   3 { ORDER BY a DESC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "34:   4 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "36:   5 { ORDER BY a      NULLS LAST  RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING }",
          "37:   6 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING }",
          "39:   7 { ORDER BY a      NULLS LAST  RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING }",
          "40:   8 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING }",
          "41: } {",
          "42:   do_execsql_test 1.$tn \"",
          "43:     SELECT sum(b) OVER win FROM t1",
          "44:     WINDOW win AS ( $win )",
          "45:   \" {6 6 6}",
          "46: }",
          "48: do_execsql_test 1.2 {",
          "49:   SELECT sum(b) OVER win FROM t1",
          "50:   WINDOW win AS (",
          "51:     ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "52:   )",
          "53: } {6 6 6}",
          "55: #-------------------------------------------------------------------------",
          "56: reset_db",
          "57: do_execsql_test 2.0 {",
          "58:   CREATE TABLE t1(a, b);",
          "59:   INSERT INTO t1 VALUES(1, NULL);",
          "60:   INSERT INTO t1 VALUES(2, 45);",
          "61:   INSERT INTO t1 VALUES(3, 66.2);",
          "62:   INSERT INTO t1 VALUES(4, 'hello world');",
          "63:   INSERT INTO t1 VALUES(5, 'hello world');",
          "64:   INSERT INTO t1 VALUES(6, X'1234');",
          "65:   INSERT INTO t1 VALUES(7, X'1234');",
          "66:   INSERT INTO t1 VALUES(8, NULL);",
          "67: }",
          "69: foreach {tn win} {",
          "70:   1 \"ORDER BY b RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING\"",
          "71:   2 \"ORDER BY b RANGE BETWEEN 2 FOLLOWING AND 2 FOLLOWING\"",
          "72:   3 \"ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING\"",
          "73:   4 \"ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 2 FOLLOWING\"",
          "74: } {",
          "75:   do_execsql_test 2.1.$tn \"",
          "76:     SELECT a, sum(a) OVER win FROM t1",
          "77:     WINDOW win AS ( $win )",
          "78:     ORDER BY 1",
          "79:   \" {1 9   2 {}  3 {}  4 9  5 9  6 13  7 13  8 9}",
          "80: }",
          "82: #-------------------------------------------------------------------------",
          "83: reset_db",
          "84: do_execsql_test 3.0 {",
          "85:   CREATE TABLE testjson(id INTEGER PRIMARY KEY, j TEXT);",
          "86:   INSERT INTO testjson VALUES(1, '{\"a\":1}');",
          "87:   INSERT INTO testjson VALUES(2, '{\"b\":2}');",
          "88: }",
          "90: do_execsql_test 3.1 {",
          "91:   SELECT json_group_array(json(j)) FROM testjson;",
          "92: } {",
          "93:   {[{\"a\":1},{\"b\":2}]}",
          "94: }",
          "96: breakpoint",
          "97: do_execsql_test 3.2 {",
          "98:   SELECT json_group_array(json(j)) OVER (ORDER BY id) FROM testjson;",
          "99: } {",
          "100:   {[{\"a\":1}]}",
          "101:   {[{\"a\":1},{\"b\":2}]}",
          "102: }",
          "105: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}