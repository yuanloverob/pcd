{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "70a32703ac0ded74e7b8dae009510409c6c115ea",
      "candidate_info": {
        "commit_hash": "70a32703ac0ded74e7b8dae009510409c6c115ea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/70a32703ac0ded74e7b8dae009510409c6c115ea",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/with1.test"
        ],
        "message": "Fix an assert() that could fail in SQLITE_MUTATION_TEST builds following an error in a query that uses CTEs.\n\nFossilOrigin-Name: c7e29458a73bbe73a1429477d0c01d5a7b870ab75d3cb08a703be21714e439b7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3a62f64222ebd176c06e89b9fe5275b7b1f09df0afbae1c5c148a4e527e9d80b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4839:   if( OK_IF_ALWAYS_TRUE(pParse->pWith) && p->pPrior==0 ){",
          "4840:     With *pWith = findRightmost(p)->pWith;",
          "4841:     if( pWith!=0 ){",
          "4843:       pParse->pWith = pWith->pOuter;",
          "4844:     }",
          "4845:   }",
          "",
          "[Removed Lines]",
          "4842:       assert( pParse->pWith==pWith );",
          "",
          "[Added Lines]",
          "4842:       assert( pParse->pWith==pWith || pParse->nErr );",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1164:   SELECT (SELECT 1324 FROM cte1) FROM cte1;",
          "1165: } {1324}",
          "1167: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1167: do_catchsql_test 26.0 {",
          "1168:   WITH i(x) AS (",
          "1169:     VALUES(1) UNION ALL SELECT x+1 FRO, a.b,O. * ,I\u00aci O, a.b,O. * ORDER BY 1",
          "1170:   )",
          "1171:   SELECT x,O. * O FROM i \u00acI,I? 10;",
          "1172: } {1 {near \"O\": syntax error}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba25c7e29f4583cf1dc3cf777b5b3e30aadf74b8",
      "candidate_info": {
        "commit_hash": "ba25c7e29f4583cf1dc3cf777b5b3e30aadf74b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ba25c7e29f4583cf1dc3cf777b5b3e30aadf74b8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Remove stray comment characters at the end of an #ifdef that were accidently left in the previous check-in.\n\nFossilOrigin-Name: ea914bec81c49625072fc9d23faa048300f3a0421e069d303b7203edcdfb3743",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 231749213854756b599b33413b17b35186f17889b0c73f109fa9db726b415558",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5122:         sqlite3VdbeChangeP4(v, -1, SQLITE_INT_TO_PTR(n), P4_INT32);",
          "5123:         assert( n<=pTab->nCol );",
          "5124:       }",
          "5126:       if( pLoop->u.btree.pIndex!=0 ){",
          "5127:         sqlite3VdbeChangeP5(v, OPFLAG_SEEKEQ|bFordelete);",
          "5128:       }else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5125: #ifdef SQLITE_ENABLE_CURSOR_HINTS",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7d406e81cb9fa9bf78fa6f435646943a00bc612",
      "candidate_info": {
        "commit_hash": "d7d406e81cb9fa9bf78fa6f435646943a00bc612",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d7d406e81cb9fa9bf78fa6f435646943a00bc612",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/fts5_tokenize.c",
          "ext/fts5/test/fts5faultD.test",
          "ext/fts5/test/fts5faultE.test",
          "ext/fts5/test/fts5plan.test",
          "ext/fts5/test/fts5trigram.test",
          "ext/fts5/tool/fts5txt2db.tcl",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add experimental \"trigram\" tokenizer to fts5.\n\nFossilOrigin-Name: c4e8ec7907de7cb9e610ef9f4930caf5c046618151fb4f61d5716b9fa3f31423",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "ext/fts5/test/fts5faultD.test||ext/fts5/test/fts5faultD.test",
          "ext/fts5/test/fts5faultE.test||ext/fts5/test/fts5faultE.test",
          "ext/fts5/test/fts5plan.test||ext/fts5/test/fts5plan.test",
          "ext/fts5/test/fts5trigram.test||ext/fts5/test/fts5trigram.test",
          "ext/fts5/tool/fts5txt2db.tcl||ext/fts5/tool/fts5txt2db.tcl",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: };",
          "209: #define FTS5_CONTENT_NORMAL   0",
          "210: #define FTS5_CONTENT_NONE     1",
          "211: #define FTS5_CONTENT_EXTERNAL 2",
          "219: int sqlite3Fts5ConfigParse(",
          "220:     Fts5Global*, sqlite3*, int, const char **, Fts5Config**, char**",
          "",
          "[Removed Lines]",
          "207: #define FTS5_CURRENT_VERSION 4",
          "213: #define FTS5_DETAIL_FULL    0",
          "214: #define FTS5_DETAIL_NONE    1",
          "215: #define FTS5_DETAIL_COLUMNS 2",
          "",
          "[Added Lines]",
          "208: #define FTS5_CURRENT_VERSION  4",
          "214: #define FTS5_DETAIL_FULL      0",
          "215: #define FTS5_DETAIL_NONE      1",
          "216: #define FTS5_DETAIL_COLUMNS   2",
          "218: #define FTS5_PATTERN_NONE     0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "554:   Fts5Global*,",
          "555:   const char **azArg,",
          "556:   int nArg,",
          "559:   char **pzErr",
          "560: );",
          "",
          "[Removed Lines]",
          "557:   Fts5Tokenizer**,",
          "558:   fts5_tokenizer**,",
          "",
          "[Added Lines]",
          "560:   Fts5Config*,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "799: int sqlite3Fts5TokenizerInit(fts5_api*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802: int sqlite3Fts5TokenizerPattern(",
          "803:     int (*xCreate)(void*, const char**, int, Fts5Tokenizer**),",
          "804:     Fts5Tokenizer *pTok",
          "805: );",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:           rc = SQLITE_ERROR;",
          "326:         }else{",
          "327:           rc = sqlite3Fts5GetTokenizer(pGlobal,",
          "329:               pzErr",
          "330:           );",
          "331:         }",
          "",
          "[Removed Lines]",
          "328:               (const char**)azArg, (int)nArg, &pConfig->pTok, &pConfig->pTokApi,",
          "",
          "[Added Lines]",
          "328:               (const char**)azArg, (int)nArg, pConfig,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398: static int fts5ConfigDefaultTokenizer(Fts5Global *pGlobal, Fts5Config *pConfig){",
          "399:   assert( pConfig->pTok==0 && pConfig->pTokApi==0 );",
          "403: }",
          "",
          "[Removed Lines]",
          "400:   return sqlite3Fts5GetTokenizer(",
          "401:       pGlobal, 0, 0, &pConfig->pTok, &pConfig->pTokApi, 0",
          "402:   );",
          "",
          "[Added Lines]",
          "400:   return sqlite3Fts5GetTokenizer(pGlobal, 0, 0, pConfig, 0);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:   return sParse.rc;",
          "285: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295: int sqlite3Fts5ExprPattern(",
          "296:   Fts5Config *pConfig, int iCol, const char *zText, Fts5Expr **pp",
          "297: ){",
          "298:   i64 nText = strlen(zText);",
          "299:   char *zExpr = (char*)sqlite3_malloc64(nText*4 + 1);",
          "300:   int rc = SQLITE_OK;",
          "302:   if( zExpr==0 ){",
          "303:     rc = SQLITE_NOMEM;",
          "304:   }else{",
          "305:     char aSpec[3];",
          "306:     int iOut = 0;",
          "307:     int i = 0;",
          "308:     int iFirst = 0;",
          "310:     if( pConfig->ePattern==FTS5_PATTERN_LIKE ){",
          "311:       aSpec[0] = '_';",
          "312:       aSpec[1] = '%';",
          "313:       aSpec[2] = 0;",
          "314:     }else{",
          "315:       aSpec[0] = '*';",
          "316:       aSpec[1] = '?';",
          "317:       aSpec[2] = '[';",
          "318:     }",
          "320:     while( i<=nText ){",
          "321:       if( i==nText",
          "322:        || zText[i]==aSpec[0] || zText[i]==aSpec[1] || zText[i]==aSpec[2]",
          "323:       ){",
          "324:         if( i-iFirst>=3 ){",
          "325:           int jj;",
          "326:           zExpr[iOut++] = '\"';",
          "327:           for(jj=iFirst; jj<i; jj++){",
          "328:             zExpr[iOut++] = zText[jj];",
          "329:             if( zText[jj]=='\"' ) zExpr[iOut++] = '\"';",
          "330:           }",
          "331:           zExpr[iOut++] = '\"';",
          "332:           zExpr[iOut++] = ' ';",
          "333:         }",
          "334:         if( zText[i]==aSpec[2] ){",
          "335:           i += 2;",
          "336:           if( zText[i-1]=='^' ) i++;",
          "337:           while( i<nText && zText[i]!=']' ) i++;",
          "338:         }",
          "339:         iFirst = i+1;",
          "340:       }",
          "341:       i++;",
          "342:     }",
          "343:     if( iOut>0 ){",
          "344:       zExpr[iOut] = '\\0';",
          "345:       rc = sqlite3Fts5ExprNew(pConfig, iCol, zExpr, pp, pConfig->pzErrmsg);",
          "346:     }else{",
          "348:     }",
          "349:     sqlite3_free(zExpr);",
          "350:   }",
          "352:   return rc;",
          "353: }",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "554:     return SQLITE_ERROR;",
          "555:   }",
          "558:   if( idxStr==0 ) return SQLITE_NOMEM;",
          "559:   pInfo->idxStr = idxStr;",
          "560:   pInfo->needToFreeIdxStr = 1;",
          "",
          "[Removed Lines]",
          "557:   idxStr = (char*)sqlite3_malloc(pInfo->nConstraint * 6 + 1);",
          "",
          "[Added Lines]",
          "559:   idxStr = (char*)sqlite3_malloc(pInfo->nConstraint * 8 + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "578:           if( bSeenRank ) continue;",
          "579:           idxStr[iIdxStr++] = 'r';",
          "580:           bSeenRank = 1;",
          "582:           bSeenMatch = 1;",
          "589:         }",
          "590:         pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "591:         pInfo->aConstraintUsage[i].omit = 1;",
          "592:       }",
          "600:     }",
          "601:   }",
          "",
          "[Removed Lines]",
          "581:         }else{",
          "583:           idxStr[iIdxStr++] = 'm';",
          "584:           if( iCol<nCol ){",
          "585:             sqlite3_snprintf(6, &idxStr[iIdxStr], \"%d\", iCol);",
          "586:             idxStr += strlen(&idxStr[iIdxStr]);",
          "587:             assert( idxStr[iIdxStr]=='\\0' );",
          "588:           }",
          "593:     }",
          "594:     else if( p->usable && bSeenEq==0",
          "595:       && p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol<0",
          "596:     ){",
          "597:       idxStr[iIdxStr++] = '=';",
          "598:       bSeenEq = 1;",
          "599:       pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "",
          "[Added Lines]",
          "583:         }else if( iCol>=0 ){",
          "585:           idxStr[iIdxStr++] = 'M';",
          "586:           sqlite3_snprintf(6, &idxStr[iIdxStr], \"%d\", iCol);",
          "587:           idxStr += strlen(&idxStr[iIdxStr]);",
          "588:           assert( idxStr[iIdxStr]=='\\0' );",
          "593:     }else if( p->usable ){",
          "594:       if( iCol>=0 && iCol<nCol && pConfig->ePattern==p->op ){",
          "595:         assert( p->op==FTS5_PATTERN_LIKE || p->op==FTS5_PATTERN_GLOB );",
          "596:         idxStr[iIdxStr++] = p->op==FTS5_PATTERN_LIKE ? 'L' : 'G';",
          "597:         sqlite3_snprintf(6, &idxStr[iIdxStr], \"%d\", iCol);",
          "598:         idxStr += strlen(&idxStr[iIdxStr]);",
          "599:         pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "600:         assert( idxStr[iIdxStr]=='\\0' );",
          "601:       }else if( bSeenEq==0 && p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol<0 ){",
          "602:         idxStr[iIdxStr++] = '=';",
          "603:         bSeenEq = 1;",
          "604:         pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "605:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1229:       case 'r':",
          "1230:         pRank = apVal[i];",
          "1231:         break;",
          "1233:         const char *zText = (const char*)sqlite3_value_text(apVal[i]);",
          "1234:         if( zText==0 ) zText = \"\";",
          "1246:         if( zText[0]=='*' ){",
          "",
          "[Removed Lines]",
          "1232:       case 'm': {",
          "1236:         if( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' ){",
          "1237:           iCol = 0;",
          "1238:           do{",
          "1239:             iCol = iCol*10 + (idxStr[iIdxStr]-'0');",
          "1240:             iIdxStr++;",
          "1241:           }while( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' );",
          "1242:         }else{",
          "1243:           iCol = pConfig->nCol;",
          "1244:         }",
          "",
          "[Added Lines]",
          "1238:       case 'M': {",
          "1241:         iCol = 0;",
          "1242:         do{",
          "1243:           iCol = iCol*10 + (idxStr[iIdxStr]-'0');",
          "1244:           iIdxStr++;",
          "1245:         }while( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1262:         break;",
          "1263:       }",
          "1264:       case '=':",
          "1265:         pRowidEq = apVal[i];",
          "1266:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1265:       case 'L':",
          "1266:       case 'G': {",
          "1267:         const char *zText = (const char*)sqlite3_value_text(apVal[i]);",
          "1268:         iCol = 0;",
          "1269:         do{",
          "1270:           iCol = iCol*10 + (idxStr[iIdxStr]-'0');",
          "1271:           iIdxStr++;",
          "1272:         }while( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' );",
          "1273:         rc = sqlite3Fts5ExprPattern(pConfig, iCol, zText, &pExpr);",
          "1274:         if( rc==SQLITE_OK ){",
          "1275:           rc = sqlite3Fts5ExprAnd(&pCsr->pExpr, pExpr);",
          "1276:           pExpr = 0;",
          "1277:         }",
          "1278:         if( rc!=SQLITE_OK ) goto filter_out;",
          "1279:         break;",
          "1280:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2672:   Fts5Global *pGlobal,",
          "2673:   const char **azArg,",
          "2674:   int nArg,",
          "2677:   char **pzErr",
          "2678: ){",
          "2679:   Fts5TokenizerModule *pMod;",
          "",
          "[Removed Lines]",
          "2675:   Fts5Tokenizer **ppTok,",
          "2676:   fts5_tokenizer **ppTokApi,",
          "",
          "[Added Lines]",
          "2692:   Fts5Config *pConfig,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2685:     rc = SQLITE_ERROR;",
          "2687:   }else{",
          "2692:     }",
          "2693:   }",
          "2695:   if( rc!=SQLITE_OK ){",
          "2698:   }",
          "2700:   return rc;",
          "",
          "[Removed Lines]",
          "2688:     rc = pMod->x.xCreate(pMod->pUserData, &azArg[1], (nArg?nArg-1:0), ppTok);",
          "2690:     if( rc!=SQLITE_OK && pzErr ){",
          "",
          "[Added Lines]",
          "2704:     rc = pMod->x.xCreate(",
          "2705:         pMod->pUserData, &azArg[1], (nArg?nArg-1:0), &pConfig->pTok",
          "2706:     );",
          "2707:     pConfig->pTokApi = &pMod->x;",
          "2708:     if( rc!=SQLITE_OK ){",
          "2709:       if( pzErr ) *pzErr = sqlite3_mprintf(\"error in tokenizer constructor\");",
          "2710:     }else{",
          "2711:       pConfig->ePattern = sqlite3Fts5TokenizerPattern(",
          "2712:           pMod->x.xCreate, pConfig->pTok",
          "2713:       );",
          "2718:     pConfig->pTokApi = 0;",
          "2719:     pConfig->pTok = 0;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1258:   );",
          "1259: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1264: typedef struct TrigramTokenizer TrigramTokenizer;",
          "1265: struct TrigramTokenizer {",
          "1267: };",
          "1272: static void fts5TriDelete(Fts5Tokenizer *p){",
          "1273:   sqlite3_free(p);",
          "1274: }",
          "1279: static int fts5TriCreate(",
          "1280:   void *pCtx,",
          "1281:   const char **azArg,",
          "1282:   int nArg,",
          "1283:   Fts5Tokenizer **ppOut",
          "1284: ){",
          "1285:   int rc = SQLITE_OK;",
          "1286:   TrigramTokenizer *pNew = (TrigramTokenizer*)sqlite3_malloc(sizeof(*pNew));",
          "1287:   if( pNew==0 ){",
          "1288:     rc = SQLITE_NOMEM;",
          "1289:   }else{",
          "1290:     int i;",
          "1291:     pNew->bFold = 1;",
          "1292:     for(i=0; rc==SQLITE_OK && i<nArg; i+=2){",
          "1293:       const char *zArg = azArg[i+1];",
          "1294:       if( 0==sqlite3_stricmp(azArg[i], \"case_sensitive\") ){",
          "1295:         if( (zArg[0]!='0' && zArg[0]!='1') || zArg[1] ){",
          "1296:           rc = SQLITE_ERROR;",
          "1297:         }else{",
          "1298:           pNew->bFold = (zArg[0]=='0');",
          "1299:         }",
          "1300:       }else{",
          "1301:         rc = SQLITE_ERROR;",
          "1302:       }",
          "1303:     }",
          "1304:     if( rc!=SQLITE_OK ){",
          "1305:       fts5TriDelete((Fts5Tokenizer*)pNew);",
          "1306:       pNew = 0;",
          "1307:     }",
          "1308:   }",
          "1310:   return rc;",
          "1311: }",
          "1316: static int fts5TriTokenize(",
          "1317:   Fts5Tokenizer *pTok,",
          "1318:   void *pCtx,",
          "1319:   int flags,",
          "1320:   const char *pText, int nText,",
          "1321:   int (*xToken)(void*, int, const char*, int, int, int)",
          "1322: ){",
          "1323:   TrigramTokenizer *p = (TrigramTokenizer*)pTok;",
          "1324:   int rc = SQLITE_OK;",
          "1325:   char aBuf[32];",
          "1326:   const unsigned char *zIn = (const unsigned char*)pText;",
          "1327:   const unsigned char *zEof = &zIn[nText];",
          "1328:   u32 iCode;",
          "1330:   while( 1 ){",
          "1331:     char *zOut = aBuf;",
          "1332:     int iStart = zIn - (const unsigned char*)pText;",
          "1333:     const unsigned char *zNext;",
          "1335:     READ_UTF8(zIn, zEof, iCode);",
          "1336:     zNext = zIn;",
          "1337:     if( zIn<zEof ){",
          "1338:       if( p->bFold ) iCode = sqlite3Fts5UnicodeFold(iCode, 0);",
          "1339:       WRITE_UTF8(zOut, iCode);",
          "1340:       READ_UTF8(zIn, zEof, iCode);",
          "1341:     }else{",
          "1342:       break;",
          "1343:     }",
          "1344:     if( zIn<zEof ){",
          "1345:       if( p->bFold ) iCode = sqlite3Fts5UnicodeFold(iCode, 0);",
          "1346:       WRITE_UTF8(zOut, iCode);",
          "1347:       READ_UTF8(zIn, zEof, iCode);",
          "1348:       if( p->bFold ) iCode = sqlite3Fts5UnicodeFold(iCode, 0);",
          "1349:       WRITE_UTF8(zOut, iCode);",
          "1350:     }else{",
          "1351:       break;",
          "1352:     }",
          "1353:     rc = xToken(pCtx, 0, aBuf, zOut-aBuf, iStart, iStart + zOut-aBuf);",
          "1354:     if( rc!=SQLITE_OK ) break;",
          "1355:     zIn = zNext;",
          "1356:   }",
          "1358:   return rc;",
          "1359: }",
          "1372: int sqlite3Fts5TokenizerPattern(",
          "1373:     int (*xCreate)(void*, const char**, int, Fts5Tokenizer**),",
          "1374:     Fts5Tokenizer *pTok",
          "1375: ){",
          "1376:   if( xCreate==fts5TriCreate ){",
          "1377:     TrigramTokenizer *p = (TrigramTokenizer*)pTok;",
          "1378:     return p->bFold ? FTS5_PATTERN_LIKE : FTS5_PATTERN_GLOB;",
          "1379:   }",
          "1380:   return FTS5_PATTERN_NONE;",
          "1381: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1269:     { \"unicode61\", {fts5UnicodeCreate, fts5UnicodeDelete, fts5UnicodeTokenize}},",
          "1270:     { \"ascii\",     {fts5AsciiCreate, fts5AsciiDelete, fts5AsciiTokenize }},",
          "1271:     { \"porter\",    {fts5PorterCreate, fts5PorterDelete, fts5PorterTokenize }},",
          "1272:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1394:     { \"trigram\",   {fts5TriCreate, fts5TriDelete, fts5TriTokenize}},",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5faultD.test||ext/fts5/test/fts5faultD.test": [
          "File: ext/fts5/test/fts5faultD.test -> ext/fts5/test/fts5faultD.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: source $testdir/malloc_common.tcl",
          "19: # If SQLITE_ENABLE_FTS3 is defined, omit this file.",
          "20: ifcapable !fts5 {",
          "",
          "[Removed Lines]",
          "17: set testprefix fts5faultA",
          "",
          "[Added Lines]",
          "17: set testprefix fts5faultD",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5faultE.test||ext/fts5/test/fts5faultE.test": [
          "File: ext/fts5/test/fts5faultE.test -> ext/fts5/test/fts5faultE.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2016 February 2",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: #",
          "12: # This file is focused on OOM errors.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: source $testdir/malloc_common.tcl",
          "17: set testprefix fts5faultE",
          "19: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "20: ifcapable !fts5 {",
          "21:   finish_test",
          "22:   return",
          "23: }",
          "25: faultsim_save_and_close",
          "26: do_faultsim_test 1 -prep {",
          "27:   faultsim_restore_and_reopen",
          "28: } -body {",
          "29:   execsql { CREATE VIRTUAL TABLE t1 USING fts5(x, y, tokenize=trigram) }",
          "30: } -test {",
          "31:   faultsim_test_result {0 {}} {1 {vtable constructor failed: t1}}",
          "32: }",
          "34: reset_db",
          "35: do_execsql_test 2.0 {",
          "36:   CREATE VIRTUAL TABLE t1 USING fts5(x, y, tokenize=trigram);",
          "37: }",
          "39: faultsim_save_and_close",
          "40: do_faultsim_test 2 -faults ioerr-t* -prep {",
          "41:   faultsim_restore_and_reopen",
          "42: } -body {",
          "43:   execsql {",
          "44:     INSERT INTO t1 VALUES('abcdefghijklmnopqrstuvwxyz', NULL);",
          "45:     SELECT count(*) FROM t1 WHERE x LIKE '%mnop%' AND t1 MATCH 'jkl';",
          "46:   }",
          "47: } -test {",
          "48:   faultsim_test_result {0 1} {1 {vtable constructor failed: t1}}",
          "49: }",
          "52: finish_test",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5plan.test||ext/fts5/test/fts5plan.test": [
          "File: ext/fts5/test/fts5plan.test -> ext/fts5/test/fts5plan.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: } {",
          "32:   QUERY PLAN",
          "33:   |--SCAN TABLE t1",
          "35: }",
          "37: do_eqp_test 1.2 {",
          "",
          "[Removed Lines]",
          "34:   `--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:m",
          "",
          "[Added Lines]",
          "34:   `--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:M1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   SELECT * FROM f1 WHERE f1 MATCH ? ORDER BY ff",
          "47: } {",
          "48:   QUERY PLAN",
          "50:   `--USE TEMP B-TREE FOR ORDER BY",
          "51: }",
          "",
          "[Removed Lines]",
          "49:   |--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:m",
          "",
          "[Added Lines]",
          "49:   |--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:M1",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5trigram.test||ext/fts5/test/fts5trigram.test": [
          "File: ext/fts5/test/fts5trigram.test -> ext/fts5/test/fts5trigram.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020 September 30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: #",
          "12: # Tests for the fts5 \"trigram\" tokenizer.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: ifcapable !fts5 { finish_test ; return }",
          "17: set ::testprefix fts5trigram",
          "19: do_execsql_test 1.0 {",
          "20:   CREATE VIRTUAL TABLE t1 USING fts5(y, tokenize=trigram);",
          "21:   INSERT INTO t1 VALUES('abcdefghijklm');",
          "22:   INSERT INTO t1 VALUES('\u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23');",
          "23: }",
          "25: foreach {tn s res} {",
          "26:   1 abc           \"(abc)defghijklm\"",
          "27:   2 defgh         \"abc(defgh)ijklm\"",
          "28:   3 abcdefghijklm \"(abcdefghijklm)\"",
          "29:   4 \u0e01\u0e23\u0e38            \"(\u0e01\u0e23\u0e38)\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23\"",
          "30:   5 \u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b        \"\u0e01\u0e23\u0e38(\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b)\u0e32\u0e19\u0e04\u0e23\"",
          "31:   6 \u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23  \"(\u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23)\"",
          "32:   7 Abc           \"(abc)defghijklm\"",
          "33:   8 deFgh         \"abc(defgh)ijklm\"",
          "34:   9 aBcdefGhijKlm \"(abcdefghijklm)\"",
          "35: } {",
          "36:   do_execsql_test 1.1.$tn {",
          "37:     SELECT highlight(t1, 0, '(', ')') FROM t1($s)",
          "38:   } $res",
          "39: }",
          "41: do_execsql_test 1.2.0 {",
          "42:   SELECT fts5_expr('ABCD', 'tokenize=trigram')",
          "43: } {{\"abc\" + \"bcd\"}}",
          "45: do_execsql_test 1.2.1 {",
          "46:   SELECT * FROM t1 WHERE y LIKE ? ESCAPE 'a'",
          "47: }",
          "49: foreach {tn like res} {",
          "50:   1 {%cDef%}   1",
          "51:   2 {cDef%}    {}",
          "52:   3 {%f%}      1",
          "53:   4 {%f_h%}    1",
          "54:   5 {%f_g%}    {}",
          "55:   6 {abc%klm}  1",
          "56:   7 {ABCDEFG%} 1",
          "57:   8 {%\u0e23\u0e38\u0e07\u0e40%}    2",
          "58: } {",
          "59:   do_execsql_test 1.3.$tn {",
          "60:     SELECT rowid FROM t1 WHERE y LIKE $like",
          "61:   } $res",
          "62: }",
          "64: #-------------------------------------------------------------------------",
          "65: reset_db",
          "66: do_execsql_test 2.0 {",
          "67:   CREATE VIRTUAL TABLE t1 USING fts5(y, tokenize=\"trigram case_sensitive 1\");",
          "68:   INSERT INTO t1 VALUES('abcdefghijklm');",
          "69:   INSERT INTO t1 VALUES('\u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23');",
          "70: }",
          "72: foreach {tn s res} {",
          "73:   1 abc           \"(abc)defghijklm\"",
          "74:   2 defgh         \"abc(defgh)ijklm\"",
          "75:   3 abcdefghijklm \"(abcdefghijklm)\"",
          "76:   4 \u0e01\u0e23\u0e38            \"(\u0e01\u0e23\u0e38)\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23\"",
          "77:   5 \u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b        \"\u0e01\u0e23\u0e38(\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b)\u0e32\u0e19\u0e04\u0e23\"",
          "78:   6 \u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23  \"(\u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23)\"",
          "79:   7 Abc           \"\"",
          "80:   8 deFgh         \"\"",
          "81:   9 aBcdefGhijKlm \"\"",
          "82: } {",
          "83:   do_execsql_test 2.1.$tn {",
          "84:     SELECT highlight(t1, 0, '(', ')') FROM t1($s)",
          "85:   } $res",
          "86: }",
          "87: foreach {tn like res} {",
          "88:   1 {%cDef%}   1",
          "89:   2 {cDef%}    {}",
          "90:   3 {%f%}      1",
          "91:   4 {%f_h%}    1",
          "92:   5 {%f_g%}    {}",
          "93:   6 {abc%klm}  1",
          "94:   7 {ABCDEFG%} 1",
          "95:   8 {%\u0e23\u0e38\u0e07\u0e40%}    2",
          "96: } {",
          "97:   do_execsql_test 2.2.$tn {",
          "98:     SELECT rowid FROM t1 WHERE y LIKE $like",
          "99:   } $res",
          "100: }",
          "101: foreach {tn like res} {",
          "102:   1 {*cdef*}     1",
          "103:   2 {cdef*}      {}",
          "104:   3 {*f*}        1",
          "105:   4 {*f?h*}      1",
          "106:   5 {*f?g*}      {}",
          "107:   6 {abc*klm}    1",
          "108:   7 {abcdefg*}   1",
          "109:   8 {*\u0e23\u0e38\u0e07\u0e40*}      2",
          "110:   9 {abc[d]efg*} 1",
          "111:  10 {abc[]d]efg*} 1",
          "112:  11 {abc[^]d]efg*} {}",
          "113:  12 {abc[^]XYZ]efg*} 1",
          "114: } {",
          "115:   do_execsql_test 2.3.$tn {",
          "116:     SELECT rowid FROM t1 WHERE y GLOB $like",
          "117:   } $res",
          "118: }",
          "120: #-------------------------------------------------------------------------",
          "121: reset_db",
          "122: do_catchsql_test 3.1 {",
          "123:   CREATE VIRTUAL TABLE ttt USING fts5(c, tokenize=\"trigram case_sensitive 2\");",
          "124: } {1 {error in tokenizer constructor}}",
          "125: do_catchsql_test 3.2 {",
          "126:   CREATE VIRTUAL TABLE ttt USING fts5(c, tokenize=\"trigram case_sensitive 11\");",
          "127: } {1 {error in tokenizer constructor}}",
          "128: do_catchsql_test 3.3 {",
          "129:   CREATE VIRTUAL TABLE ttt USING fts5(c, \"tokenize=trigram case_sensitive 1\");",
          "130: } {0 {}}",
          "133: finish_test",
          "",
          "---------------"
        ],
        "ext/fts5/tool/fts5txt2db.tcl||ext/fts5/tool/fts5txt2db.tcl": [
          "File: ext/fts5/tool/fts5txt2db.tcl -> ext/fts5/tool/fts5txt2db.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:   cmdline::process ::A $::argv {",
          "13:     {fts5                 \"use fts5 (this is the default)\"}",
          "14:     {fts4                 \"use fts4\"}",
          "15:     {colsize   \"10 10 10\" \"list of column sizes\"}",
          "16:     {tblname   \"t1\"       \"table name to create\"}",
          "17:     {detail    \"full\"     \"Fts5 detail mode to use\"}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:     {trigram              \"Use tokenize=trigram\"}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:   set sql    \"CREATE VIRTUAL TABLE IF NOT EXISTS $A(tblname) USING $A(fts) (\"",
          "176:   append sql [join $cols ,]",
          "177:   if {$A(fts)==\"fts5\"} { append sql \",detail=$A(detail)\" }",
          "178:   append sql \", prefix='$A(prefix)');\"",
          "180:   db eval $sql",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:   if {$A(trigram)} { append sql \",tokenize=trigram\" }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7a78274a072324b94d6f79e5b7a198b2fa9321ff5d6a528b51f57d3ee95c765b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "46fe138d98664b30ada114b1f76b52e95d00575c",
      "candidate_info": {
        "commit_hash": "46fe138d98664b30ada114b1f76b52e95d00575c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/46fe138d98664b30ada114b1f76b52e95d00575c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/select.c",
          "src/sqliteInt.h",
          "test/join2.test"
        ],
        "message": "Do not skip over TK_IF_NULL_ROW operators when bypassing TK_COLLATE operators. Fix to check-in [ac31edd3eeafcef4] which was itself a fix for ticket [45f4bf4eb4ffd788].\n\nFossilOrigin-Name: 871f2ddcfbb9196dbd851a350e3471ee6d242d86bbd755201f7e2406fce3ac55",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/join2.test||test/join2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a0aa35aaa5694a96638a7c7b1cd69c7523750cbe95831a13c1ee5a6d48256b76",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: char sqlite3ExprAffinity(const Expr *pExpr){",
          "46:   int op;",
          "48:     assert( pExpr->op==TK_COLLATE || pExpr->op==TK_IF_NULL_ROW );",
          "49:     pExpr = pExpr->pLeft;",
          "50:     assert( pExpr!=0 );",
          "",
          "[Removed Lines]",
          "47:   while( ExprHasProperty(pExpr, EP_Skip) ){",
          "",
          "[Added Lines]",
          "47:   while( ExprHasProperty(pExpr, EP_Skip|EP_IfNullRow) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116: Expr *sqlite3ExprSkipCollate(Expr *pExpr){",
          "117:   while( pExpr && ExprHasProperty(pExpr, EP_Skip) ){",
          "119:     pExpr = pExpr->pLeft;",
          "120:   }",
          "121:   return pExpr;",
          "",
          "[Removed Lines]",
          "118:     assert( pExpr->op==TK_COLLATE || pExpr->op==TK_IF_NULL_ROW );",
          "",
          "[Added Lines]",
          "118:     assert( pExpr->op==TK_COLLATE );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:       assert( pExpr->op==TK_FUNCTION );",
          "135:       pExpr = pExpr->x.pList->a[0].pExpr;",
          "136:     }else{",
          "138:       pExpr = pExpr->pLeft;",
          "139:     }",
          "140:   }",
          "",
          "[Removed Lines]",
          "137:       assert( pExpr->op==TK_COLLATE || pExpr->op==TK_IF_NULL_ROW );",
          "",
          "[Added Lines]",
          "137:       assert( pExpr->op==TK_COLLATE );",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3506:           ifNullRow.op = TK_IF_NULL_ROW;",
          "3507:           ifNullRow.pLeft = pCopy;",
          "3508:           ifNullRow.iTable = pSubst->iNewTable;",
          "3510:           pCopy = &ifNullRow;",
          "3511:         }",
          "3512:         testcase( ExprHasProperty(pCopy, EP_Subquery) );",
          "",
          "[Removed Lines]",
          "3509:           ifNullRow.flags = EP_Skip;",
          "",
          "[Added Lines]",
          "3509:           ifNullRow.flags = EP_IfNullRow;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/join2.test||test/join2.test": [
          "File: test/join2.test -> test/join2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "294: }",
          "296: #-------------------------------------------------------------------------",
          "298: #",
          "299: reset_db",
          "300: do_execsql_test 9.0 {",
          "",
          "[Removed Lines]",
          "297: # Ticket [45f4bf4eb].",
          "",
          "[Added Lines]",
          "297: # Ticket [45f4bf4eb] reported by Manuel Rigger (2020-04-25)",
          "298: #",
          "299: # Follow up error reported by Eric Speckman on the SQLite forum",
          "300: # https://sqlite.org/forum/info/c49496d24d35bd7c (2020-08-19)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "324:   UNION SELECT 0,0 WHERE 0;",
          "325: } {0 0}",
          "328: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330: do_execsql_test 9.10 {",
          "331:   CREATE TABLE t1 (aaa);",
          "332:   INSERT INTO t1 VALUES(23456);",
          "333:   CREATE TABLE t2(bbb);",
          "334:   CREATE VIEW v2(ccc) AS SELECT bbb IS 1234 FROM t2;",
          "335:   SELECT ccc, ccc IS NULL AS ddd FROM t1 LEFT JOIN v2;",
          "336: } {{} 1}",
          "337: optimization_control db query-flattener 0",
          "338: do_execsql_test 9.11 {",
          "339:   SELECT ccc, ccc IS NULL AS ddd FROM t1 LEFT JOIN v2;",
          "340: } {{} 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8d335d737682456565942f5eb9a4cac9878eae1",
      "candidate_info": {
        "commit_hash": "d8d335d737682456565942f5eb9a4cac9878eae1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d8d335d737682456565942f5eb9a4cac9878eae1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/fuzzdata8.db"
        ],
        "message": "Fix a possible null pointer deref following OOM.  Discovered by dbsqlfuzz.\n\nFossilOrigin-Name: cc888878ea8d5bc754c69de523819d32d6d9853857e31d7287f9dbfd723428db",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: adb7484f93329c7a94cd84e30bc4a8dbf2d6e901eba17cc3454afb8ba346cbf4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4270:       int nCol;",
          "4271:       testcase( op==TK_EXISTS );",
          "4272:       testcase( op==TK_SELECT );",
          "4274:         sqlite3SubselectError(pParse, nCol, 1);",
          "4275:       }else{",
          "4276:         return sqlite3CodeSubselect(pParse, pExpr);",
          "",
          "[Removed Lines]",
          "4273:       if( op==TK_SELECT && (nCol = pExpr->x.pSelect->pEList->nExpr)!=1 ){",
          "",
          "[Added Lines]",
          "4273:       if( pParse->db->mallocFailed ){",
          "4274:         return 0;",
          "4275:       }else if( op==TK_SELECT && (nCol = pExpr->x.pSelect->pEList->nExpr)!=1 ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}