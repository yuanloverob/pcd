{
  "cve_id": "CVE-2014-3507",
  "cve_desc": "Memory leak in d1_both.c in the DTLS implementation in OpenSSL 0.9.8 before 0.9.8zb, 1.0.0 before 1.0.0n, and 1.0.1 before 1.0.1i allows remote attackers to cause a denial of service (memory consumption) via zero-length DTLS fragments that trigger improper handling of the return value of a certain insert function.",
  "repo": "openssl/openssl",
  "patch_hash": "d0a4b7d1a2948fce38515b8d862f43e7ba0ebf74",
  "patch_info": {
    "commit_hash": "d0a4b7d1a2948fce38515b8d862f43e7ba0ebf74",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/d0a4b7d1a2948fce38515b8d862f43e7ba0ebf74",
    "files": [
      "ssl/d1_both.c"
    ],
    "message": "Fix memory leak from zero-length DTLS fragments.\n\nThe |pqueue_insert| function can fail if one attempts to insert a\nduplicate sequence number. When handling a fragment of an out of\nsequence message, |dtls1_process_out_of_seq_message| would not call\n|dtls1_reassemble_fragment| if the fragment's length was zero. It would\nthen allocate a fresh fragment and attempt to insert it, but ignore the\nreturn value, leaking the fragment.\n\nThis allows an attacker to exhaust the memory of a DTLS peer.\n\nFixes CVE-2014-3507\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
    "before_after_code_files": [
      "ssl/d1_both.c||ssl/d1_both.c"
    ]
  },
  "patch_diff": {
    "ssl/d1_both.c||ssl/d1_both.c": [
      "File: ssl/d1_both.c -> ssl/d1_both.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "616:      msg_hdr->msg_len > dtls1_max_handshake_message_len(s))",
      "617:   goto err;",
      "620:  memset(seq64be,0,sizeof(seq64be));",
      "621:  seq64be[6] = (unsigned char) (msg_hdr->seq>>8);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "619:  if (frag_len == 0)",
      "620:   return DTLS1_HM_FRAGMENT_RETRY;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "693:    goto err;",
      "694:    }",
      "697:   }",
      "699:  return DTLS1_HM_FRAGMENT_RETRY;",
      "",
      "[Removed Lines]",
      "696:   pqueue_insert(s->d1->buffered_messages, item);",
      "",
      "[Added Lines]",
      "699:   item = pqueue_insert(s->d1->buffered_messages, item);",
      "704:   OPENSSL_assert(item != NULL);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "751:   }",
      "752:  else",
      "753:   {",
      "755:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
      "757:   if (frag_len > dtls1_max_handshake_message_len(s))",
      "",
      "[Removed Lines]",
      "754:   if (frag_len && frag_len < msg_hdr->msg_len)",
      "",
      "[Added Lines]",
      "762:   if (frag_len < msg_hdr->msg_len)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "780:   if ( item == NULL)",
      "781:    goto err;",
      "784:   }",
      "786:  return DTLS1_HM_FRAGMENT_RETRY;",
      "",
      "[Removed Lines]",
      "783:   pqueue_insert(s->d1->buffered_messages, item);",
      "",
      "[Added Lines]",
      "791:   item = pqueue_insert(s->d1->buffered_messages, item);",
      "799:   OPENSSL_assert(item != NULL);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8ca4c4b25e050b881f3aad7017052842b888722d",
      "candidate_info": {
        "commit_hash": "8ca4c4b25e050b881f3aad7017052842b888722d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8ca4c4b25e050b881f3aad7017052842b888722d",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix memory leak from zero-length DTLS fragments.\n\nThe |pqueue_insert| function can fail if one attempts to insert a\nduplicate sequence number. When handling a fragment of an out of\nsequence message, |dtls1_process_out_of_seq_message| would not call\n|dtls1_reassemble_fragment| if the fragment's length was zero. It would\nthen allocate a fresh fragment and attempt to insert it, but ignore the\nreturn value, leaking the fragment.\n\nThis allows an attacker to exhaust the memory of a DTLS peer.\n\nFixes CVE-2014-3507\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:      msg_hdr->msg_len > dtls1_max_handshake_message_len(s))",
          "617:   goto err;",
          "620:  memset(seq64be,0,sizeof(seq64be));",
          "621:  seq64be[6] = (unsigned char) (msg_hdr->seq>>8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619:  if (frag_len == 0)",
          "620:   return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "693:    goto err;",
          "694:    }",
          "697:   }",
          "699:  return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "[Removed Lines]",
          "696:   pqueue_insert(s->d1->buffered_messages, item);",
          "",
          "[Added Lines]",
          "699:   item = pqueue_insert(s->d1->buffered_messages, item);",
          "704:   OPENSSL_assert(item != NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "751:   }",
          "752:  else",
          "753:   {",
          "755:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
          "757:   if (frag_len > dtls1_max_handshake_message_len(s))",
          "",
          "[Removed Lines]",
          "754:   if (frag_len && frag_len < msg_hdr->msg_len)",
          "",
          "[Added Lines]",
          "762:   if (frag_len < msg_hdr->msg_len)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "780:   if ( item == NULL)",
          "781:    goto err;",
          "784:   }",
          "786:  return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "[Removed Lines]",
          "783:   pqueue_insert(s->d1->buffered_messages, item);",
          "",
          "[Added Lines]",
          "791:   item = pqueue_insert(s->d1->buffered_messages, item);",
          "799:   OPENSSL_assert(item != NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ee775a4a589419855426d91fdf68e8c880e91b8",
      "candidate_info": {
        "commit_hash": "5ee775a4a589419855426d91fdf68e8c880e91b8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5ee775a4a589419855426d91fdf68e8c880e91b8",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix memory leak from zero-length DTLS fragments.\n\nThe |pqueue_insert| function can fail if one attempts to insert a\nduplicate sequence number. When handling a fragment of an out of\nsequence message, |dtls1_process_out_of_seq_message| would not call\n|dtls1_reassemble_fragment| if the fragment's length was zero. It would\nthen allocate a fresh fragment and attempt to insert it, but ignore the\nreturn value, leaking the fragment.\n\nThis allows an attacker to exhaust the memory of a DTLS peer.\n\nFixes CVE-2014-3507\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:      msg_hdr->msg_len > dtls1_max_handshake_message_len(s))",
          "612:   goto err;",
          "615:  memset(seq64be,0,sizeof(seq64be));",
          "616:  seq64be[6] = (unsigned char) (msg_hdr->seq>>8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:  if (frag_len == 0)",
          "615:   return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "688:    goto err;",
          "689:    }",
          "692:   }",
          "694:  return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "[Removed Lines]",
          "691:   pqueue_insert(s->d1->buffered_messages, item);",
          "",
          "[Added Lines]",
          "694:   item = pqueue_insert(s->d1->buffered_messages, item);",
          "699:   OPENSSL_assert(item != NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "746:   }",
          "747:  else",
          "748:   {",
          "750:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
          "752:   if (frag_len > dtls1_max_handshake_message_len(s))",
          "",
          "[Removed Lines]",
          "749:   if (frag_len && frag_len < msg_hdr->msg_len)",
          "",
          "[Added Lines]",
          "757:   if (frag_len < msg_hdr->msg_len)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "775:   if ( item == NULL)",
          "776:    goto err;",
          "779:   }",
          "781:  return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "[Removed Lines]",
          "778:   pqueue_insert(s->d1->buffered_messages, item);",
          "",
          "[Added Lines]",
          "786:   item = pqueue_insert(s->d1->buffered_messages, item);",
          "794:   OPENSSL_assert(item != NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9871417fb74dca48ea1dc85ae666a6529d113ff8",
      "candidate_info": {
        "commit_hash": "9871417fb74dca48ea1dc85ae666a6529d113ff8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9871417fb74dca48ea1dc85ae666a6529d113ff8",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix memory leak from zero-length DTLS fragments.\n\nThe |pqueue_insert| function can fail if one attempts to insert a\nduplicate sequence number. When handling a fragment of an out of\nsequence message, |dtls1_process_out_of_seq_message| would not call\n|dtls1_reassemble_fragment| if the fragment's length was zero. It would\nthen allocate a fresh fragment and attempt to insert it, but ignore the\nreturn value, leaking the fragment.\n\nThis allows an attacker to exhaust the memory of a DTLS peer.\n\nFixes CVE-2014-3507\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:      msg_hdr->msg_len > dtls1_max_handshake_message_len(s))",
          "612:   goto err;",
          "615:  memset(seq64be,0,sizeof(seq64be));",
          "616:  seq64be[6] = (unsigned char) (msg_hdr->seq>>8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:  if (frag_len == 0)",
          "615:   return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "688:    goto err;",
          "689:    }",
          "692:   }",
          "694:  return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "[Removed Lines]",
          "691:   pqueue_insert(s->d1->buffered_messages, item);",
          "",
          "[Added Lines]",
          "694:   item = pqueue_insert(s->d1->buffered_messages, item);",
          "699:   OPENSSL_assert(item != NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "746:   }",
          "747:  else",
          "748:   {",
          "750:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
          "752:   if (frag_len > dtls1_max_handshake_message_len(s))",
          "",
          "[Removed Lines]",
          "749:   if (frag_len && frag_len < msg_hdr->msg_len)",
          "",
          "[Added Lines]",
          "757:   if (frag_len < msg_hdr->msg_len)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "775:   if ( item == NULL)",
          "776:    goto err;",
          "779:   }",
          "781:  return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "[Removed Lines]",
          "778:   pqueue_insert(s->d1->buffered_messages, item);",
          "",
          "[Added Lines]",
          "786:   item = pqueue_insert(s->d1->buffered_messages, item);",
          "794:   OPENSSL_assert(item != NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "445598b35e16090b676bb168807da06518658b34",
      "candidate_info": {
        "commit_hash": "445598b35e16090b676bb168807da06518658b34",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/445598b35e16090b676bb168807da06518658b34",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix memory leak from zero-length DTLS fragments.\n\nThe |pqueue_insert| function can fail if one attempts to insert a\nduplicate sequence number. When handling a fragment of an out of\nsequence message, |dtls1_process_out_of_seq_message| would not call\n|dtls1_reassemble_fragment| if the fragment's length was zero. It would\nthen allocate a fresh fragment and attempt to insert it, but ignore the\nreturn value, leaking the fragment.\n\nThis allows an attacker to exhaust the memory of a DTLS peer.\n\nFixes CVE-2014-3507\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "605:      msg_hdr->msg_len > dtls1_max_handshake_message_len(s))",
          "606:   goto err;",
          "609:  pq_64bit_init(&seq64);",
          "610:  pq_64bit_assign_word(&seq64, msg_hdr->seq);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "608:  if (frag_len == 0)",
          "609:   return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "682:    goto err;",
          "683:    }",
          "686:   }",
          "688:  return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "[Removed Lines]",
          "685:   pqueue_insert(s->d1->buffered_messages, item);",
          "",
          "[Added Lines]",
          "688:   item = pqueue_insert(s->d1->buffered_messages, item);",
          "693:   OPENSSL_assert(item != NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "740:   }",
          "741:  else",
          "742:   {",
          "744:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
          "746:   if (frag_len > dtls1_max_handshake_message_len(s))",
          "",
          "[Removed Lines]",
          "743:   if (frag_len && frag_len < msg_hdr->msg_len)",
          "",
          "[Added Lines]",
          "751:   if (frag_len < msg_hdr->msg_len)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "769:   if ( item == NULL)",
          "770:    goto err;",
          "773:   }",
          "775:  return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "[Removed Lines]",
          "772:   pqueue_insert(s->d1->buffered_messages, item);",
          "",
          "[Added Lines]",
          "780:   item = pqueue_insert(s->d1->buffered_messages, item);",
          "788:   OPENSSL_assert(item != NULL);",
          "",
          "---------------"
        ]
      }
    }
  ]
}