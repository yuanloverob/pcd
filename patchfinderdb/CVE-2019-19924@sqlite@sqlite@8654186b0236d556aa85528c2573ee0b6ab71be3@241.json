{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4245e0456d8387d867a73ab3d986aabcf3725ff2",
      "candidate_info": {
        "commit_hash": "4245e0456d8387d867a73ab3d986aabcf3725ff2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4245e0456d8387d867a73ab3d986aabcf3725ff2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/altertab3.test"
        ],
        "message": "Fix a minor error in a test script, and harmless compiler warnings in the CLI code.\n\nFossilOrigin-Name: eaa34626e497d3af132dd8f13eddbbda89365d369ed43212a5f788175b3d6198",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ebb81dad1f43dac4636cd44d4055d1d4b198c675f73e23c5a2d8d992ae27fe1f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6562:     char *z = azArg[i];",
          "6563:     int n;",
          "6564:     if( z[0]=='-' && z[1]=='-' ) z++;",
          "6566:     if( n<=17 && memcmp(\"-freelist-corrupt\", z, n)==0 ){",
          "6567:       bFreelist = 0;",
          "6568:     }else",
          "",
          "[Removed Lines]",
          "6565:     n = strlen(z);",
          "",
          "[Added Lines]",
          "6565:     n = strlen30(z);",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:   db2 eval { INSERT INTO t2 VALUES (1), (2), (3) }",
          "205:   db close",
          "206: } {}",
          "208: #-------------------------------------------------------------------------",
          "209: reset_db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: db2 close",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb80863cbf3709ade2c0d309935610adc413227b",
      "candidate_info": {
        "commit_hash": "eb80863cbf3709ade2c0d309935610adc413227b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/eb80863cbf3709ade2c0d309935610adc413227b",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/e_vacuum.test"
        ],
        "message": "Fix an incorrect comment on a test case for rowid renumbering in VACUUM.\n\nFossilOrigin-Name: 0d293fb43f2eb64026ac1e0422f54d4839b101898cc9913fc7746760c08ed41f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/e_vacuum.test||test/e_vacuum.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 13a0ea6466b051ea5281865ed5285b8b5a99ec4307f400c5f7b03692723f1cd1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/e_vacuum.test||test/e_vacuum.test": [
          "File: test/e_vacuum.test -> test/e_vacuum.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   DETACH aux1;",
          "267: } {1 x 3 z}",
          "270: # has indexes.",
          "271: do_execsql_test e_vacuum-3.1.7 {",
          "272:   DROP TABLE t5;",
          "",
          "[Removed Lines]",
          "269: # Rowids are renumbered even if the table being vacuumed",
          "",
          "[Added Lines]",
          "269: # Rowids are not renumbered if the table being vacuumed",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83c5bb997a496d00f50b63a9af8feccb33a2b138",
      "candidate_info": {
        "commit_hash": "83c5bb997a496d00f50b63a9af8feccb33a2b138",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/83c5bb997a496d00f50b63a9af8feccb33a2b138",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Mark rowid-comparison opcodes as never-null for VDBE coverage tracking purposes.\n\nFossilOrigin-Name: a69bb4f257500e40ef4056d5628ef25266def5bcef07eebdb471a79fffe80237",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f56d305a7bad6608d51d8c8cef417ddb66cff50f0a75d28554ea669e47f3d90d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1578:   if( pMWin->eExclude==TK_CURRENT ){",
          "1579:     sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, lblNext, regRowid);",
          "1581:   }else if( pMWin->eExclude!=TK_NO ){",
          "1582:     int addr;",
          "1583:     int addrEq = 0;",
          "",
          "[Removed Lines]",
          "1580:     VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1580:     VdbeCoverageNeverNull(v);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1588:     }",
          "1589:     if( pMWin->eExclude==TK_TIES ){",
          "1590:       addrEq = sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, 0, regRowid);",
          "1592:     }",
          "1593:     if( pKeyInfo ){",
          "1594:       windowReadPeerValues(p, csr, regPeer);",
          "",
          "[Removed Lines]",
          "1591:       VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1591:       VdbeCoverageNeverNull(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2526:   sqlite3VdbeAddOp2(v, OP_NewRowid, csrWrite, regRowid);",
          "2527:   sqlite3VdbeAddOp3(v, OP_Insert, csrWrite, regRecord, regRowid);",
          "2528:   addrNe = sqlite3VdbeAddOp3(v, OP_Ne, pMWin->regOne, 0, regRowid);",
          "2532:   s.regArg = windowInitAccum(pParse, pMWin);",
          "",
          "[Removed Lines]",
          "2529:   VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2529:   VdbeCoverageNeverNull(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8cf92890f28ace3c510c448b5be6de2ca96016c2",
      "candidate_info": {
        "commit_hash": "8cf92890f28ace3c510c448b5be6de2ca96016c2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8cf92890f28ace3c510c448b5be6de2ca96016c2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeapi.c"
        ],
        "message": "Avoid the use of function pointers in columnName(), as function pointers appear to be a source of consternation to LLVM.\n\nFossilOrigin-Name: c48f6f39c5f89a338fed7153553a27a5d882d4d8db8221e911b96e0dd57c53d9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeapi.c||src/vdbeapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0c5db18d79366d9c23925ce3ed835500311f32a10aa7dbfdd09148b1e8a2507b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1122: static const void *columnName(",
          "1127: ){",
          "1128:   const void *ret;",
          "1129:   Vdbe *p;",
          "",
          "[Removed Lines]",
          "1123:   sqlite3_stmt *pStmt,",
          "1124:   int N,",
          "1125:   const void *(*xFunc)(Mem*),",
          "1126:   int useType",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1144:     N += useType*n;",
          "1145:     sqlite3_mutex_enter(db->mutex);",
          "1146:     assert( db->mallocFailed==0 );",
          "1151:     if( db->mallocFailed ){",
          "",
          "[Removed Lines]",
          "1147:     ret = xFunc(&p->aColName[N]);",
          "",
          "[Added Lines]",
          "1147:     if( useUtf16 ){",
          "1148:       ret = sqlite3_value_text16((sqlite3_value*)&p->aColName[N]);",
          "1149:     }else{",
          "1150:       ret = sqlite3_value_text((sqlite3_value*)&p->aColName[N]);",
          "1151:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1164: const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){",
          "1167: }",
          "1168: #ifndef SQLITE_OMIT_UTF16",
          "1169: const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){",
          "1172: }",
          "1173: #endif",
          "",
          "[Removed Lines]",
          "1165:   return columnName(",
          "1166:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text, COLNAME_NAME);",
          "1170:   return columnName(",
          "1171:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text16, COLNAME_NAME);",
          "",
          "[Added Lines]",
          "1169:   return columnName(pStmt, N, 0, COLNAME_NAME);",
          "1173:   return columnName(pStmt, N, 1, COLNAME_NAME);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1189: const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){",
          "1192: }",
          "1193: #ifndef SQLITE_OMIT_UTF16",
          "1194: const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){",
          "1197: }",
          "",
          "[Removed Lines]",
          "1190:   return columnName(",
          "1191:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text, COLNAME_DECLTYPE);",
          "1195:   return columnName(",
          "1196:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text16, COLNAME_DECLTYPE);",
          "",
          "[Added Lines]",
          "1192:   return columnName(pStmt, N, 0, COLNAME_DECLTYPE);",
          "1196:   return columnName(pStmt, N, 1, COLNAME_DECLTYPE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1207: const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){",
          "1210: }",
          "1211: #ifndef SQLITE_OMIT_UTF16",
          "1212: const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){",
          "1215: }",
          "",
          "[Removed Lines]",
          "1208:   return columnName(",
          "1209:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text, COLNAME_DATABASE);",
          "1213:   return columnName(",
          "1214:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text16, COLNAME_DATABASE);",
          "",
          "[Added Lines]",
          "1208:   return columnName(pStmt, N, 0, COLNAME_DATABASE);",
          "1212:   return columnName(pStmt, N, 1, COLNAME_DATABASE);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1223: const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){",
          "1226: }",
          "1227: #ifndef SQLITE_OMIT_UTF16",
          "1228: const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){",
          "1231: }",
          "",
          "[Removed Lines]",
          "1224:   return columnName(",
          "1225:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text, COLNAME_TABLE);",
          "1229:   return columnName(",
          "1230:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text16, COLNAME_TABLE);",
          "",
          "[Added Lines]",
          "1222:   return columnName(pStmt, N, 0, COLNAME_TABLE);",
          "1226:   return columnName(pStmt, N, 1, COLNAME_TABLE);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1239: const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){",
          "1242: }",
          "1243: #ifndef SQLITE_OMIT_UTF16",
          "1244: const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){",
          "1247: }",
          "",
          "[Removed Lines]",
          "1240:   return columnName(",
          "1241:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text, COLNAME_COLUMN);",
          "1245:   return columnName(",
          "1246:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text16, COLNAME_COLUMN);",
          "",
          "[Added Lines]",
          "1236:   return columnName(pStmt, N, 0, COLNAME_COLUMN);",
          "1240:   return columnName(pStmt, N, 1, COLNAME_COLUMN);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7e48dc629f2703f1130ee792705374f8b72622c",
      "candidate_info": {
        "commit_hash": "e7e48dc629f2703f1130ee792705374f8b72622c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7e48dc629f2703f1130ee792705374f8b72622c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest_data.tcl"
        ],
        "message": "Add \"set TMP=%CD%\" to the start of each msvc script output by releasetest_data.tcl. Otherwise, since binaries compiled with SQLITE_TEST all choose the same sequence of pseudo-random numbers, collisions between temp file names cause errors when running multiple tests in parallel.\n\nFossilOrigin-Name: f5d0436d8dc650cadb61a5fe76fd1a0d68dabba54ff0c2a8c138f9dfbdab1c3f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest_data.tcl||test/releasetest_data.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8158d2aca68c5a253054376fdf1b8eaab2db874f4b93524742be7340e9c50dd5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "546:     set makecmd    \"nmake /f %SRCDIR%\\\\Makefile.msc TOP=%SRCDIR% $target \"",
          "547:     append makecmd \"\\\"CFLAGS=$cflags\\\" \\\"OPTS=$opts\\\" $makeOpts\"",
          "549:     puts $makecmd",
          "550:   }",
          "551: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "549:     puts \"set TMP=%CD%\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}