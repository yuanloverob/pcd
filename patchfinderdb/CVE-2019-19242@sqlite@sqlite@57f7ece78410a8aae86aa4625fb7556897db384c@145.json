{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9d30c8ff8fe09e4564fa8b7dd1c7fc9badd5cd2c",
      "candidate_info": {
        "commit_hash": "9d30c8ff8fe09e4564fa8b7dd1c7fc9badd5cd2c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9d30c8ff8fe09e4564fa8b7dd1c7fc9badd5cd2c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/indexexpr1.test"
        ],
        "message": "Minor fix for test file indexexpr1.test.\n\nFossilOrigin-Name: 0ceab26f15c4c7039647cbccf8939dd5c36a60b70ffeefcd3b415c8d4d8351cd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/indexexpr1.test||test/indexexpr1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 49073b7003330027303c4c776e9f85112f8b99b89f848fec3f953eba501d7505",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/indexexpr1.test||test/indexexpr1.test": [
          "File: test/indexexpr1.test -> test/indexexpr1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "463: # value, be sure to use the REAL value and not the INT value when",
          "464: # computing the expression.",
          "465: #",
          "484: finish_test",
          "",
          "[Removed Lines]",
          "466: do_execsql_test indexexpr-1800 {",
          "467:   DROP TABLE IF EXISTS t0;",
          "468:   CREATE TABLE t0(c0 REAL, c1 TEXT);",
          "469:   CREATE INDEX i0 ON t0(+c0, c0);",
          "470:   INSERT INTO t0(c0) VALUES(0);",
          "471:   SELECT CAST(+ t0.c0 AS BLOB) LIKE 0 FROM t0;",
          "472: } {0}",
          "473: do_execsql_test indexexpr-1810 {",
          "474:   SELECT CAST(+ t0.c0 AS BLOB) LIKE '0.0' FROM t0;",
          "475: } {1}",
          "476: do_execsql_test indexexpr-1820 {",
          "477:   DROP TABLE IF EXISTS t1;",
          "478:   CREATE TABLE t1(x REAL);",
          "479:   CREATE INDEX t1x ON t1(x, +x);",
          "480:   INSERT INTO t1(x) VALUES(2);",
          "481:   SELECT +x FROM t1 WHERE x=2;",
          "482: } {2.0}",
          "",
          "[Added Lines]",
          "466: ifcapable like_match_blobs {",
          "467:   do_execsql_test indexexpr-1800 {",
          "468:     DROP TABLE IF EXISTS t0;",
          "469:     CREATE TABLE t0(c0 REAL, c1 TEXT);",
          "470:     CREATE INDEX i0 ON t0(+c0, c0);",
          "471:     INSERT INTO t0(c0) VALUES(0);",
          "472:     SELECT CAST(+ t0.c0 AS BLOB) LIKE 0 FROM t0;",
          "473:   } {0}",
          "474:   do_execsql_test indexexpr-1810 {",
          "475:     SELECT CAST(+ t0.c0 AS BLOB) LIKE '0.0' FROM t0;",
          "476:   } {1}",
          "477:   do_execsql_test indexexpr-1820 {",
          "478:     DROP TABLE IF EXISTS t1;",
          "479:     CREATE TABLE t1(x REAL);",
          "480:     CREATE INDEX t1x ON t1(x, +x);",
          "481:     INSERT INTO t1(x) VALUES(2);",
          "482:     SELECT +x FROM t1 WHERE x=2;",
          "483:   } {2.0}",
          "484: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfe33f80dd58c6dfe7da2c7218253c34ebd05a0d",
      "candidate_info": {
        "commit_hash": "bfe33f80dd58c6dfe7da2c7218253c34ebd05a0d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bfe33f80dd58c6dfe7da2c7218253c34ebd05a0d",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a potential buffer overread in fts5 triggered by a corrupt database record.\n\nFossilOrigin-Name: 16472112b6886ada18d45cfb409cca2e83dde5a8ba8a36d481e87b61100b0186",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "690:       }else{",
          "692:         pRet->p[nByte] = 0x00;",
          "693:         pRet->szLeaf = fts5GetU16(&pRet->p[2]);",
          "694:       }",
          "695:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "693:         pRet->p[nByte+1] = 0x00;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "9161:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "9162: } {0 {}}",
          "9164: sqlite3_fts5_may_be_corrupt 0",
          "9165: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9164: #---------------------------------------------------------------------------",
          "9165: do_test 63.0 {",
          "9166:   sqlite3 db {}",
          "9167:   db deserialize [decode_hexdb {",
          "9168: .open --hexdb",
          "9169: | size 24576 pagesize 4096 filename crash-8230e6c3b368f5.db",
          "9170: | page 1 offset 0",
          "9171: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "9172: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 00   .....@  ........",
          "9173: |     96: 00 00 00 00 0d 00 00 00 06 0e 0f 00 0f aa 0f 53   ...............S",
          "9174: |    112: 0e e8 0e 8b 0e 33 0e 0f 00 00 00 00 00 00 00 00   .....3..........",
          "9175: |   3584: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 22   ................",
          "9176: |   3600: 06 06 17 11 11 01 31 74 61 62 7c 65 62 63 62 62   ......1tab|ebcbb",
          "9177: |   3616: 06 43 52 45 41 54 45 20 54 41 42 4c 45 20 62 62   .CREATE TABLE bb",
          "9178: |   3632: 28 61 29 56 05 06 17 1f 1f 01 7d 74 61 62 6c 65   (a)V.......table",
          "9179: |   3648: 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63 6f 6e 66   t1_configt1_conf",
          "9180: |   3664: 69 67 05 43 52 45 41 54 45 20 54 41 42 4c 45 20   ig.CREATE TABLE",
          "9181: |   3680: 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b 20 50 52   't1_config'(k PR",
          "9182: |   3696: 49 4d 41 52 59 20 4b 45 59 2c 20 76 29 20 57 49   IMARY KEY, v) WI",
          "9183: |   3712: 54 48 4f 55 54 20 52 4f 57 49 44 5b 04 07 17 21   THOUT ROWID[...!",
          "9184: |   3728: 21 01 81 01 74 61 62 6c 65 74 31 5f 64 6f 63 73   !...tablet1_docs",
          "9185: |   3744: 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65 04 43 52   izet1_docsize.CR",
          "9186: |   3760: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 9d   EATE TABLE 't1_.",
          "9187: |   3776: 6f 63 73 69 7a 65 27 28 69 64 20 49 4e 54 45 47   ocsize'(id INTEG",
          "9188: |   3792: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   ER PRIMARY KEY,",
          "9189: |   3808: 73 7a 20 42 4c 4f 42 29 69 03 07 17 19 19 01 81   sz BLOB)i.......",
          "9190: |   3824: 2d 74 61 62 6c 65 74 31 5f 69 64 78 74 31 5f 69   -tablet1_idxt1_i",
          "9191: |   3840: 64 78 03 43 52 45 41 54 45 20 54 41 42 4c 45 20   dx.CREATE TABLE",
          "9192: |   3856: 27 74 31 5f 69 64 78 27 28 73 65 67 69 64 2c 20   't1_idx'(segid,",
          "9193: |   3872: 74 65 72 6d 2c 20 70 67 6e 6f 2c 20 50 52 49 4d   term, pgno, PRIM",
          "9194: |   3888: 41 52 59 20 4b 45 59 28 73 65 67 69 64 2c 20 74   ARY KEY(segid, t",
          "9195: |   3904: 65 72 6d 29 29 20 57 49 54 48 4f 55 54 20 52 4f   erm)) WITHOUT RO",
          "9196: |   3920: 57 49 44 55 02 07 17 1b 1b 01 81 01 74 61 62 6c   WIDU........tabl",
          "9197: |   3936: 65 64 31 5f 64 61 74 61 74 31 5f 64 61 74 61 02   ed1_datat1_data.",
          "9198: |   3952: 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74 31   CREATE TABLE 't1",
          "9199: |   3968: 5f 64 61 74 61 27 28 69 64 20 49 4e 54 45 47 45   _data'(id INTEGE",
          "9200: |   3984: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 62   R PRIMARY KEY, b",
          "9201: |   4000: 6c 6f 63 6b 20 42 4c 4f 42 29 54 01 07 17 10 11   lock BLOB)T.....",
          "9202: |   4016: 08 81 15 74 61 62 6c 65 74 31 74 31 43 52 45 41   ...tablet1t1CREA",
          "9203: |   4032: 54 45 20 56 49 52 54 55 41 4c 20 54 41 42 4c 45   TE VIRTUAL TABLE",
          "9204: |   4048: 20 74 31 20 55 53 49 4e 47 20 66 74 73 35 28 61    t1 USING fts5(a",
          "9205: |   4064: 2c 62 2c 70 72 65 66 69 78 3d 22 31 2c 32 2c 33   ,b,prefix=.1,2,3",
          "9206: |   4080: 2c 34 22 2c 20 63 6f 6e 74 65 6e 74 3d 22 22 29   ,4., content=..)",
          "9207: | page 2 offset 4096",
          "9208: |      0: 0d 0b 6a 00 37 09 4c 02 0f e7 09 4c 0f c6 0f a4   ..j.7.L....L....",
          "9209: |     16: 0f 88 0f 6d 0f 4b 0f 2c 0f 0e 0e ec 0e cd 0e ad   ...m.K.,........",
          "9210: |     32: 0e 8e 0e 6c 0e 4b 0e 29 0e 08 0d e6 0d c4 0d b5   ...l.K.)........",
          "9211: |     48: 0d 97 0d 76 0d 54 0d 31 0d 15 0c f3 0c d3 0c b5   ...v.T.1........",
          "9212: |     64: 0c 95 0c 73 0c 54 0c 32 0c 10 0b ee 0b cc 0b b0   ...s.T.2........",
          "9213: |     80: 0b 8d 0b 7e 0b 48 0b 2e 0b 0b 0a ef 0a cc 0a ad   ...~.H..........",
          "9214: |     96: 0a 8c 0a 6d 0a 4d 0a 2b 0a 0c 09 ec 09 ca 09 a8   ...m.M.+........",
          "9215: |    112: 09 86 09 63 0f f1 00 00 00 00 00 00 00 00 00 00   ...c............",
          "9216: |   2368: 00 00 00 00 00 00 00 00 00 00 00 00 15 0a 03 00   ................",
          "9217: |   2384: 30 00 00 00 01 01 03 35 00 03 01 01 12 02 01 12   0......5........",
          "9218: |   2400: 03 01 11 1c 8c 80 80 80 80 10 03 00 3e 00 00 00   ............>...",
          "9219: |   2416: 17 01 05 05 34 74 61 62 6c 03 02 03 01 04 77 68   ....4tabl.....wh",
          "9220: |   2432: 65 72 03 02 06 09 1b 8c 80 80 80 80 0f 03 00 3c   er.............<",
          "9221: |   2448: 00 00 00 16 05 34 66 74 73 34 03 02 02 01 04 6e   .....4fts4.....n",
          "9222: |   2464: 75 6d 62 03 06 01 04 09 1b 8c 80 80 80 80 0e 03   umb.............",
          "9223: |   2480: 00 3c 00 00 00 16 04 33 74 68 65 13 06 01 01 04   .<.....3the.....",
          "9224: |   2496: 01 03 77 68 65 03 02 04 04 0a 1b 8c 80 80 80 80   ..whe...........",
          "9225: |   2512: 0d 03 00 3c 00 00 00 16 04 33 6e 75 6d 03 06 01   ...<.....3num...",
          "9226: |   2528: 01 05 01 03 75 61 62 03 02 03 04 0a 19 8c 80 80   ....uab.........",
          "9227: |   2544: 80 80 0c 03 00 38 00 00 00 14 03 32 ec 68 03 02   .....8.....2.h..",
          "9228: |   2560: 04 00 04 33 66 74 73 03 02 02 04 07 18 8c 80 80   ...3fts.........",
          "9229: |   2576: 80 80 0b 03 00 36 00 00 00 13 03 32 74 61 03 02   .....6.....2ta..",
          "9230: |   2592: 03 02 01 68 03 06 01 01 04 04 17 1b 8c 80 80 80   ...h............",
          "9231: |   2608: 80 0a 03 00 3c 00 00 00 16 03 32 6e 75 03 06 01   ....<.....2nu...",
          "9232: |   2624: 01 05 01 02 6f 66 03 06 01 01 06 04 09 19 8c 80   ....of..........",
          "9233: |   2640: 80 80 80 09 03 00 38 00 00 00 14 03 32 66 74 03   ......8.....2ft.",
          "9234: |   2656: 02 02 01 02 69 73 03 06 01 01 03 04 07 18 8c 80   ....is..........",
          "9235: |   2672: 80 80 80 08 03 00 36 00 00 00 13 02 31 74 03 08   ......6.....1t..",
          "9236: |   2688: 03 01 01 04 01 01 77 03 02 04 04 09 1a 8c 80 80   ......w.........",
          "9237: |   2704: 80 80 07 03 00 3a 00 00 00 15 02 31 6e 03 08 01   .....:.....1n...",
          "9238: |   2720: 01 02 05 01 01 6f 03 06 01 01 06 04 09 18 8c 80   .....o..........",
          "9239: |   2736: 80 80 80 06 03 00 36 00 00 00 13 04 02 31 66 03   ......6......1f.",
          "9240: |   2752: 02 02 01 01 69 03 06 01 01 03 05 06 1c 8c 80 80   ....i...........",
          "9241: |   2768: 80 80 05 03 00 3e 00 00 00 17 04 30 74 68 65 03   .....>.....0the.",
          "9242: |   2784: 06 01 01 04 01 05 77 68 65 72 65 03 02 04 0a 15   ......where.....",
          "9243: |   2800: 8c 80 80 80 80 04 03 00 30 00 00 00 11 01 01 06   ........0.......",
          "9244: |   2816: 06 30 74 61 62 6c 65 03 02 03 07 1c 8c 80 80 80   .0table.........",
          "9245: |   2832: 80 03 03 00 3e 00 00 00 17 07 30 6e 75 6d 62 65   ....>.....0numbe",
          "9246: |   2848: 72 03 06 01 01 05 01 02 6f 66 03 06 04 0d 13 8c   r.......of......",
          "9247: |   2864: 80 80 80 80 02 03 00 2c 00 00 00 0f 01 01 03 02   .......,........",
          "9248: |   2880: 30 6e 03 06 01 01 02 07 1b 8c 80 80 80 80 01 03   0n..............",
          "9249: |   2896: 00 3c 00 00 00 16 08 30 66 74 73 34 61 75 78 03   .<.....0fts4aux.",
          "9250: |   2912: 02 02 01 02 69 73 03 06 04 0c 00 00 00 14 2a 00   ....is........*.",
          "9251: |   2928: 00 00 01 01 02 24 00 02 01 01 12 02 01 12 08 88   .....$..........",
          "9252: |   2944: 80 80 80 80 12 03 00 16 00 00 00 05 02 1c 88 80   ................",
          "9253: |   2960: 80 80 80 11 03 00 3e 00 00 00 17 05 34 72 6f 77   ......>.....4row",
          "9254: |   2976: 73 02 06 01 01 05 01 04 74 68 65 72 02 02 04 0b   s.......ther....",
          "9255: |   2992: 15 88 80 80 80 80 10 03 00 30 00 00 00 11 02 01   .........0......",
          "9256: |   3008: 01 07 05 34 62 65 74 77 02 02 04 08 1b 88 80 80   ...4betw........",
          "9257: |   3024: 80 80 0f 03 00 3c 00 00 00 16 04 04 33 72 6f 77   .....<......3row",
          "9258: |   3040: 02 06 01 01 05 01 03 74 68 64 02 08 05 0a 1b 88   .......thd......",
          "9259: |   3056: 80 80 80 80 0e 03 00 3c 00 00 00 16 01 01 02 04   .......<........",
          "9260: |   3072: 33 61 72 65 02 02 03 01 03 62 65 74 02 02 07 08   3are.....bet....",
          "9261: |   3088: 1b 88 80 80 80 80 0d 03 00 3c 00 00 00 16 03 32   .........<.....2",
          "9262: |   3104: 74 68 02 08 02 01 01 07 00 04 33 61 6e 64 02 06   th........3and..",
          "9263: |   3120: 04 0a 1b 88 80 80 80 80 0c 03 00 3c 00 00 00 16   ...........<....",
          "9264: |   3136: 03 32 69 6e 02 06 01 01 06 01 02 72 6f 02 06 01   .2in.......ro...",
          "9265: |   3152: 01 43 04 09 18 88 80 80 80 80 0b 03 00 36 00 00   .C...........6..",
          "9266: |   3168: 00 13 02 03 32 61 72 02 02 03 01 02 62 65 02 02   ....2ar.....be..",
          "9267: |   3184: 04 05 07 1b 88 80 80 80 80 0a 03 00 3c 00 00 00   ............<...",
          "9268: |   3200: 16 02 31 74 02 08 02 01 01 07 00 03 32 61 6e 02   ..1t........2an.",
          "9269: |   3216: 06 01 01 04 09 19 88 80 80 80 80 09 03 00 38 00   ..............8.",
          "9270: |   3232: 00 00 14 02 31 6e 02 06 01 01 03 01 01 72 02 06   ....1n.......r..",
          "9271: |   3248: 01 01 05 04 08 17 88 80 80 80 80 08 03 00 34 00   ..............4.",
          "9272: |   3264: 00 00 12 02 31 62 02 02 04 01 01 69 02 06 01 01   ....1b.....i....",
          "9273: |   3280: 06 04 06 19 88 80 80 80 80 07 03 00 38 00 00 00   ............8...",
          "9274: |   3296: 14 04 02 31 32 02 02 05 01 01 61 02 08 03 01 01   ...12.....a.....",
          "9275: |   3312: 02 05 06 1b 88 80 80 80 80 06 03 00 3c 00 00 00   ............<...",
          "9276: |   3328: 16 06 30 74 68 65 72 65 02 02 01 00 02 30 21 02   ..0there.....0!.",
          "9277: |   3344: 06 01 01 04 0a 15 88 80 80 80 80 05 03 00 30 00   ..............0.",
          "9278: |   3360: 00 00 11 01 01 05 04 30 74 68 65 02 06 01 01 07   .......0the.....",
          "9279: |   3376: 07 1c 88 80 80 80 80 04 03 00 3e 00 00 00 17 01   ..........>.....",
          "9280: |   3392: 01 06 02 30 6e 02 06 01 01 03 01 04 72 6f 77 73   ...0n.......rows",
          "9281: |   3408: 02 06 07 08 1b 88 80 80 80 80 03 03 00 3c 00 51   .............<.Q",
          "9282: |   3424: 00 16 08 30 62 65 74 77 65 65 6e 02 02 04 01 02   ...0between.....",
          "9283: |   3440: 69 6e 02 06 04 0c 1a 88 80 80 80 80 02 03 00 3a   in.............:",
          "9284: |   3456: 00 00 00 15 04 30 61 6e 64 02 06 01 01 02 02 02   .....0and.......",
          "9285: |   3472: 72 65 02 02 03 04 0a 17 88 80 80 80 80 01 03 00   re..............",
          "9286: |   3488: 34 00 00 00 12 02 30 31 02 06 01 01 04 01 01 32   4.....01.......2",
          "9287: |   3504: 02 02 05 04 08 08 84 80 80 80 80 12 03 00 16 00   ................",
          "9288: |   3520: 00 00 05 04 1b 84 80 80 80 80 11 03 00 3c 00 00   .............<..",
          "9289: |   3536: 00 16 05 34 74 51 62 6c 01 06 01 01 05 02 03 65   ...4tQbl.......e",
          "9290: |   3552: 72 6d 01 02 04 0b 1b 84 80 80 80 80 10 03 00 3c   rm.............<",
          "9291: |   3568: 00 00 00 16 05 34 65 17 63 68 01 02 03 01 04 70   .....4e.ch.....p",
          "9292: |   3584: 72 65 73 01 02 05 04 09 1a 84 80 80 80 80 0f 03   res.............",
          "9293: |   3600: 00 3a 00 00 00 15 04 33 74 65 72 01 02 04 02 02   .:.....3ter.....",
          "9294: |   3616: 68 65 01 06 01 01 03 04 08 1b 84 80 80 80 80 0e   he..............",
          "9295: |   3632: 03 00 3c 00 00 00 16 04 33 70 72 65 01 02 05 01   ..<.....3pre....",
          "9296: |   3648: 03 74 61 62 01 06 01 01 05 04 08 1a 84 80 80 80   .tab............",
          "9297: |   3664: 80 0d 03 00 3a 00 00 00 15 04 33 66 6f 72 01 03   ....:.....3for..",
          "9298: |   3680: 02 02 02 74 73 01 06 01 01 04 04 08 1b 84 80 80   ...ts...........",
          "9299: |   3696: 80 80 0c 03 00 3c 00 00 00 16 03 32 74 68 01 06   .....<.....2th..",
          "9300: |   3712: 01 01 03 00 04 33 65 61 63 01 02 03 04 09 18 84   .....3eac.......",
          "9301: |   3728: 80 80 80 80 0b 03 00 36 00 00 00 13 03 32 74 61   .......6.....2ta",
          "9302: |   3744: 01 06 01 01 05 02 01 65 01 02 04 04 09 19 84 80   .......e........",
          "9303: |   3760: 80 80 80 0a 03 00 38 00 00 00 14 03 32 69 6e 01   ......8.....2in.",
          "9304: |   3776: 06 01 01 02 01 02 70 72 01 02 05 04 09 18 84 80   ......pr........",
          "9305: |   3792: 80 80 80 09 03 00 36 00 00 00 13 03 32 66 6f 01   ......6.....2fo.",
          "9306: |   3808: 02 02 02 01 74 01 06 01 01 04 04 07 1b 84 80 80   ....t...........",
          "9307: |   3824: 80 80 08 03 00 3c 00 00 00 16 02 31 74 01 0a 04   .....<.....1t...",
          "9308: |   3840: 01 01 03 04 00 03 32 65 61 01 02 03 04 0a 17 84   ......2ea.......",
          "9309: |   3856: 80 80 80 80 07 03 00 34 00 00 00 12 02 31 69 01   .......4.....1i.",
          "9310: |   3872: 06 01 01 02 01 01 70 01 02 05 04 08 18 84 80 80   ......p.........",
          "9311: |   3888: 80 80 06 03 00 36 00 00 00 12 02 31 65 01 02 02   .....6.....1e...",
          "9312: |   3904: 01 01 66 01 08 02 01 01 04 04 06 1b 84 80 80 80   ..f.............",
          "9313: |   3920: 80 05 03 00 3c 00 00 00 16 05 30 74 65 72 6d 01   ....<.....0term.",
          "9314: |   3936: 02 04 02 02 68 65 01 06 01 01 03 04 09 14 84 80   ....he..........",
          "9315: |   3952: 80 80 80 04 03 00 2e 00 00 00 10 06 30 74 61 62   ............0tab",
          "9316: |   3968: 6c 65 01 06 01 01 05 04 15 84 80 80 80 80 03 03   le..............",
          "9317: |   3984: 00 30 00 00 00 11 02 08 30 70 72 65 73 65 6e 74   .0......0present",
          "9318: |   4000: 01 02 05 05 1b 84 80 80 80 80 02 03 00 3c 00 00   .............<..",
          "9319: |   4016: 00 16 04 30 66 74 73 01 06 01 01 04 01 02 69 6e   ...0fts.......in",
          "9320: |   4032: 01 06 01 01 04 0a 1a 84 80 80 80 80 01 03 00 3a   ...............:",
          "9321: |   4048: 00 00 00 15 05 30 65 61 63 68 01 02 03 01 03 66   .....0each.....f",
          "9322: |   4064: 6f 72 01 02 01 f4 09 06 01 03 00 12 03 0b 0f 00   or..............",
          "9323: |   4080: 00 08 8c 80 80 80 80 11 03 00 16 00 00 00 05 04   ................",
          "9324: | page 3 offset 8192",
          "9325: |      0: 0a 00 00 00 32 0e 4f 00 0f fa 0f f1 0f e9 0f e1   ....2.O.........",
          "9326: |     16: 0f d8 0f d1 0f c9 0f c1 0f b9 0f b1 0f a9 0f a0   ................",
          "9327: |     32: 0f 98 0f 90 0f 87 0f 80 0f 78 0f 71 0f 68 0f 5f   .........x.q.h._",
          "9328: |     48: 0f 56 0f 4d 0f 41 0f 38 0f 2f 0f 26 0f 1d 0f 13   .V.M.A.8./.&....",
          "9329: |     64: 0f 0a 0f 01 0e f7 0e ee 0e e6 0e dd 0e d6 0e cd   ................",
          "9330: |     80: 0e c3 0e ba 0e b0 0e a8 0e 9f 0e 00 00 00 00 00   ................",
          "9331: |   3648: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08   ................",
          "9332: |   3664: 04 01 10 01 03 34 74 20 07 04 01 0e 01 03 34 1e   .....4t ......4.",
          "9333: |   3680: 09 04 01 12 01 03 33 74 68 1c 08 04 01 10 01 03   ......3th.......",
          "9334: |   3696: 33 6e 1a 08 04 01 10 01 03 32 77 18 08 04 01 10   3n.......2w.....",
          "9335: |   3712: 01 03 32 74 16 08 04 01 10 01 03 32 6e 14 07 04   ..2t.......2n...",
          "9336: |   3728: 01 0e 01 03 32 12 08 04 01 10 01 03 31 74 10 07   ....2.......1t..",
          "9337: |   3744: f4 01 10 01 03 31 6e 0e 07 04 01 0e 01 03 31 0c   .....1n.......1.",
          "9338: |   3760: 09 04 01 12 01 03 30 74 68 0a 08 04 01 10 01 03   ......0th.......",
          "9339: |   3776: 30 74 08 09 04 01 12 01 03 30 6e 75 06 08 04 01   0t.......0nu....",
          "9340: |   3792: 10 01 03 30 6e 04 06 04 01 0c 01 03 02 08 04 01   ...0n...........",
          "9341: |   3808: 10 01 02 34 73 22 07 04 01 0e 01 02 34 20 08 04   ...4s.......4 ..",
          "9342: |   3824: 01 10 01 02 33 72 1e 09 04 01 12 01 02 33 61 72   ....3r.......3ar",
          "9343: |   3840: 1c 08 04 01 10 01 02 32 74 1a 08 04 01 10 01 02   .......2t.......",
          "9344: |   3856: 32 69 18 09 04 01 12 01 02 32 61 72 16 08 04 01   2i.......2ar....",
          "9345: |   3872: 10 01 02 31 74 14 08 04 01 10 01 02 31 6e 12 08   ...1t.......1n..",
          "9346: |   3888: 04 01 10 01 02 31 62 10 08 04 01 10 01 02 31 32   .....1b.......12",
          "9347: |   3904: 0e 0b 04 01 16 01 02 30 74 00 00 00 00 00 00 00   .......0t.......",
          "9348: | page 4 offset 12288",
          "9349: |   4064: 00 00 00 00 00 00 00 00 00 00 00 05 02 03 00 10   ................",
          "9350: |   4080: 03 05 05 02 03 00 10 04 06 05 01 03 00 10 04 04   ................",
          "9351: | page 5 offset 16384",
          "9352: |      0: 0a 00 00 00 02 0f eb 00 0f eb 0f f4 00 00 00 00   ................",
          "9353: |   4064: 00 00 00 00 00 00 00 00 00 00 00 08 03 15 01 70   ...............p",
          "9354: |   4080: 67 73 7a 08 0b 03 1b 01 76 65 72 73 69 6f 6e 04   gsz.....version.",
          "9355: | end crash-8230e6c3b368f5.db",
          "9356: }]} {}",
          "9358: do_catchsql_test 63.1 {",
          "9359:   SELECT * FROM t1 WHERE b MATCH 'thead*thead*theSt*';",
          "9360: } {1 {database disk image is malformed}}",
          "9362: do_catchsql_test 63.2 {",
          "9363:   INSERT INTO t1(t1) VALUES('optimize');",
          "9364: } {0 {}}",
          "9366: breakpoint",
          "9367: do_catchsql_test 63.3 {",
          "9368:   SELECT * FROM t1 WHERE b MATCH 'thead*thead*theSt*';",
          "9369: } {0 {}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 01cdc590f7894ea23ee0d674747d7ebf8196efbef3c87d47e72dbc1ab6ae2883",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de21ad704a15098f33b213ce37680f975eea67d5",
      "candidate_info": {
        "commit_hash": "de21ad704a15098f33b213ce37680f975eea67d5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/de21ad704a15098f33b213ce37680f975eea67d5",
        "files": [
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a test script problem in fts5corrupt3.test.\n\nFossilOrigin-Name: 858f62274eb727109d0452ad2d80c0e0acab0f569494b1218c404501e103ed39",
        "before_after_code_files": [
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "7994: | end crash-2acc487d09f033.db",
          "7995: }]} {}",
          "8000: } {1 {database disk image is malformed}}",
          "8002: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "7997: do_catchsql_test 56.1 {",
          "7998:   INSERT INTO t1(b) VALUES(randomblob(250));",
          "7999:   INSERT INTO t1(b) VALUES(randomblob(250));",
          "",
          "[Added Lines]",
          "7997: do_test 56.1 {",
          "7998:   set res [catchsql {",
          "7999:     INSERT INTO t1(b) VALUES(randomblob(250));",
          "8000:     INSERT INTO t1(b) VALUES(randomblob(250));",
          "8001:   }]",
          "8003:   # For some permutations - those that use the page-cache - this test",
          "8004:   # may return SQLITE_CONSTRAINT instead of SQLITE_CORRUPT. This is because",
          "8005:   # the corrupt db in the test over-reads the page buffer slightly, with",
          "8006:   # different results depending on whether or not the page-cache is in use.",
          "8007:   if {$res==\"1 {constraint failed}\"} {",
          "8008:     set res \"1 {database disk image is malformed}\"",
          "8009:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 593a7e6e20a2f91fe3497edd7effad50ac876f7f03c9222e332dfeb43d26882e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8616cff6c8541e2837ccb7a2bc5792de5aba962f",
      "candidate_info": {
        "commit_hash": "8616cff6c8541e2837ccb7a2bc5792de5aba962f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8616cff6c8541e2837ccb7a2bc5792de5aba962f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c",
          "src/vdbe.c"
        ],
        "message": "Remove unreachable \"break\" statements to silence harmless compiler warnings from ICC.\n\nFossilOrigin-Name: 0d7287e1bfdd5a392bf2fb17699e7cfd0b08bf61fab6cbf4b4bb347b3c4b4610",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 18bfb2179ce2c60cec8f5859a84b737731a5e53b28e35072cbb249f18b94262b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3376:     rc = SQLITE_ERROR;",
          "3377:     goto abort_due_to_error;",
          "3378:   }",
          "3380: }",
          "",
          "[Removed Lines]",
          "3379:   break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4132:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4133:       if( (pIn3->flags & MEM_Real)==0 ){",
          "4134:         if( (pIn3->flags & MEM_Null) || oc>=OP_SeekGE ){",
          "4137:         }else{",
          "4138:           rc = sqlite3BtreeLast(pC->uc.pCursor, &res);",
          "4139:           if( rc!=SQLITE_OK ) goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "4135:           VdbeBranchTaken(1,2); goto jump_to_p2;",
          "4136:           break;",
          "",
          "[Added Lines]",
          "4135:           VdbeBranchTaken(1,2);",
          "4136:           goto jump_to_p2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98c5ad309fce1eeea6cfe624e1dfd341abca947a",
      "candidate_info": {
        "commit_hash": "98c5ad309fce1eeea6cfe624e1dfd341abca947a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/98c5ad309fce1eeea6cfe624e1dfd341abca947a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Have .recover store all orphaned rows in a single table, with extra columns to indicate the orphaned page and sub-tree they were discovered within.\n\nFossilOrigin-Name: 7221f6e33ed6a5a96ec61e25f2a1f70b84aae66e503d897eb7b7ff1aec42355d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bee2652ac26370e612a8c81dd7554befc2d523442a2fbbc77dc73479e6a0d7fd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6226:     sqlite3_free(pTab->zQuoted);",
          "6227:     if( pTab->azlCol ){",
          "6228:       int i;",
          "6230:         sqlite3_free(pTab->azlCol[i]);",
          "6231:       }",
          "6232:       sqlite3_free(pTab->azlCol);",
          "",
          "[Removed Lines]",
          "6229:       for(i=0; i<pTab->nCol; i++){",
          "",
          "[Added Lines]",
          "6229:       for(i=0; i<=pTab->nCol; i++){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6235:   }",
          "6236: }",
          "6243:   int bIntkey,",
          "",
          "[Removed Lines]",
          "6238: static void recoverOldTable(",
          "6240:   RecoverTable *pTab,",
          "",
          "[Added Lines]",
          "6238: static RecoverTable *recoverOldTable(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6245: ){",
          "6247:   int rc = *pRc;",
          "6249:   if( rc==SQLITE_OK ){",
          "6250:     int nSqlCol = 0;",
          "6251:     int bSqlIntkey = 0;",
          "6252:     sqlite3_stmt *pStmt = 0;",
          "6254:     rc = sqlite3_open(\"\", &dbtmp);",
          "6255:     if( rc==SQLITE_OK ){",
          "6256:       rc = sqlite3_exec(dbtmp, \"PRAGMA writable_schema = on\", 0, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6247:   RecoverTable *pTab = 0;",
          "6249:   pTab = (RecoverTable*)shellMalloc(&rc, sizeof(RecoverTable));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6285:     shellFinalize(&rc, pStmt);",
          "6287:     if( bIntkey==bSqlIntkey ){",
          "6288:       const char *zPk = \"_rowid_\";",
          "6289:       sqlite3_stmt *pPkFinder = 0;",
          "6292:           \"SELECT cid, name FROM pragma_table_info(%Q) \"",
          "6293:           \"  WHERE pk=1 AND type='integer' COLLATE nocase\"",
          "6300:       }",
          "6302:       pTab->zName = shellMPrintf(&rc, \"%s\", zName);",
          "6303:       pTab->zQuoted = shellMPrintf(&rc, \"%Q\", pTab->zName);",
          "6305:       pTab->nCol = nSqlCol;",
          "6308:         pTab->azlCol[0] = shellMPrintf(&rc, \"%Q\", zPk);",
          "6309:       }else{",
          "6314:           \"FROM pragma_table_info(%Q)\",",
          "6324:       }",
          "6325:       shellFinalize(&rc, pPkFinder);",
          "6326:     }",
          "6327:   }",
          "",
          "[Removed Lines]",
          "6291:       shellPreparePrintf(dbtmp, &rc, &pPkFinder,",
          "6294:           \"  AND NOT EXISTS (SELECT cid FROM pragma_table_info(%Q) WHERE pk=2)\",",
          "6295:           zName, zName",
          "6296:       );",
          "6297:       if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPkFinder) ){",
          "6298:         pTab->iPk = sqlite3_column_int(pPkFinder, 0);",
          "6299:         zPk = (const char*)sqlite3_column_text(pPkFinder, 1);",
          "6304:       pTab->azlCol = (char**)shellMalloc(&rc, sizeof(char*) * nSqlCol);",
          "6307:       if( nSqlCol==1 && pTab->iPk==0 ){",
          "6310:         shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6311:           \"SELECT -1+row_number()          OVER (ORDER BY cid),\"",
          "6312:           \"    %Q||%Q||group_concat(name, ', ') FILTER (WHERE cid!=%d) \"",
          "6313:           \"           OVER (ORDER BY cid) \"",
          "6315:           (bIntkey ? zPk : \"\"), (bIntkey ? \", \" : \"\"),",
          "6316:           pTab->iPk, zName",
          "6317:         );",
          "6318:         while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6319:           int idx = sqlite3_column_int(pStmt, 0);",
          "6320:           const char *zText = (const char*)sqlite3_column_text(pStmt, 1);",
          "6321:           pTab->azlCol[idx] = shellMPrintf(&rc, \"%s\", zText);",
          "6322:         }",
          "6323:         shellFinalize(&rc, pStmt);",
          "",
          "[Added Lines]",
          "6289:       int i;",
          "6293:       pTab->iPk = -2;",
          "6294:       if( bIntkey ){",
          "6295:         shellPreparePrintf(dbtmp, &rc, &pPkFinder,",
          "6298:           \"  AND NOT EXISTS (SELECT cid FROM pragma_table_info(%Q) WHERE pk=2)\"",
          "6299:           , zName, zName",
          "6300:         );",
          "6301:         if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPkFinder) ){",
          "6302:           pTab->iPk = sqlite3_column_int(pPkFinder, 0);",
          "6303:           zPk = (const char*)sqlite3_column_text(pPkFinder, 1);",
          "6304:         }",
          "6309:       pTab->azlCol = (char**)shellMalloc(&rc, sizeof(char*) * (nSqlCol+1));",
          "6312:       if( bIntkey ){",
          "6315:         pTab->azlCol[0] = shellMPrintf(&rc, \"\");",
          "6316:       }",
          "6317:       i = 1;",
          "6318:       shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6319:           \"SELECT %Q || group_concat(name, ', ') \"",
          "6320:           \"  FILTER (WHERE cid!=%d) OVER (ORDER BY cid) \"",
          "6322:           bIntkey ? \", \" : \"\", pTab->iPk, zName",
          "6323:       );",
          "6324:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6325:         const char *zText = (const char*)sqlite3_column_text(pStmt, 0);",
          "6326:         pTab->azlCol[i] = shellMPrintf(&rc, \"%s%s\", pTab->azlCol[0], zText);",
          "6327:         i++;",
          "6329:       shellFinalize(&rc, pStmt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6329:  finished:",
          "6330:   sqlite3_close(dbtmp);",
          "6332: }",
          "6334: static RecoverTable *recoverNewTable(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6338:   if( rc!=SQLITE_OK ){",
          "6339:     recoverFreeTable(pTab);",
          "6340:     pTab = 0;",
          "6341:   }",
          "6342:   return pTab;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6336:   int *pRc,",
          "6337:   int iRoot,",
          "6338:   int bIntkey,",
          "6340: ){",
          "6341:   sqlite3_stmt *pStmt = 0;",
          "6342:   RecoverTable *pRet = 0;",
          "",
          "[Removed Lines]",
          "6339:   int nCol",
          "",
          "[Added Lines]",
          "6350:   int nCol,",
          "6351:   int *pbNoop",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6344:   const char *zSql = 0;",
          "6345:   const char *zName = 0;",
          "6351:   shellPreparePrintf(pState->db, pRc, &pStmt,",
          "",
          "[Removed Lines]",
          "6347:   pRet = (RecoverTable*)shellMalloc(pRc, sizeof(RecoverTable));",
          "6348:   if( pRet ) pRet->iPk = -2;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6360:     if( sqlite3_stricmp(zType, \"table\")==0 ){",
          "6361:       zName = (const char*)sqlite3_column_text(pStmt, 1);",
          "6362:       zSql = (const char*)sqlite3_column_text(pStmt, 2);",
          "6364:       break;",
          "6365:     }",
          "6366:   }",
          "6387:     );",
          "6392:     }",
          "6402:       }",
          "6403:     }",
          "6409:   }",
          "6412: }",
          "",
          "[Removed Lines]",
          "6363:       recoverOldTable(pRc, pRet, zName, zSql, bIntkey, nCol);",
          "6367:   shellFinalize(pRc, pStmt);",
          "6368:   if( bNoop ){",
          "6369:     sqlite3_free(pRet);",
          "6370:     return 0;",
          "6371:   }",
          "6373:   if( pRet && pRet->zName==0 ){",
          "6374:     sqlite3_stmt *pStmt = 0;",
          "6376:     pRet->zName = shellMPrintf(pRc, \"orphan_%d_%d\", nCol, iRoot);",
          "6377:     pRet->zQuoted = shellMPrintf(pRc, \"%Q\", pRet->zName);",
          "6378:     pRet->azlCol = (char**)shellMalloc(pRc, sizeof(char*) * nCol);",
          "6379:     pRet->nCol = nCol;",
          "6381:     shellPreparePrintf(pState->db, pRc, &pStmt,",
          "6382:       \"WITH s(i) AS (\"",
          "6383:       \"  SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<%d\"",
          "6384:       \")\"",
          "6385:       \"SELECT i-1, %Q || group_concat('c' || i, ', ') OVER (ORDER BY i) FROM s\",",
          "6386:       nCol, (bIntkey ? \"id, \" : \"\")",
          "6388:     while( *pRc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6389:       int idx = sqlite3_column_int(pStmt, 0);",
          "6390:       const char *zText = (const char*)sqlite3_column_text(pStmt, 1);",
          "6391:       pRet->azlCol[idx] = shellMPrintf(pRc, \"%s\", zText);",
          "6393:     shellFinalize(pRc, pStmt);",
          "6395:     if( *pRc==SQLITE_OK ){",
          "6396:       char *zCreate = shellMPrintf(pRc, \"CREATE TABLE %Q (%s)\",",
          "6397:         pRet->zName, pRet->azlCol[nCol-1]",
          "6398:       );",
          "6399:       if( zCreate ){",
          "6400:         raw_printf(pState->out, \"%s;\\n\", zCreate);",
          "6401:         sqlite3_free(zCreate);",
          "6404:   }",
          "6406:   if( *pRc!=SQLITE_OK ){",
          "6407:     recoverFreeTable(pRet);",
          "6408:     pRet = 0;",
          "6411:   return pRet;",
          "",
          "[Added Lines]",
          "6373:       pRet = recoverOldTable(pRc, zName, zSql, bIntkey, nCol);",
          "6378:   shellFinalize(pRc, pStmt);",
          "6380:   return pRet;",
          "6381: }",
          "6383: static RecoverTable *recoverOrphanTable(",
          "6384:   ShellState *pState,",
          "6385:   int *pRc,",
          "6386:   int nCol",
          "6387: ){",
          "6388:   RecoverTable *pTab = 0;",
          "6389:   if( nCol>=0 && *pRc==SQLITE_OK ){",
          "6390:     int i;",
          "6391:     raw_printf(pState->out,",
          "6392:         \"CREATE TABLE recover_orphan(rootpgno INTEGER, \"",
          "6393:         \"pgno INTEGER, nfield INTEGER, id INTEGER\"",
          "6395:     for(i=0; i<nCol; i++){",
          "6396:       raw_printf(pState->out, \", c%d\", i);",
          "6398:     raw_printf(pState->out, \");\\n\");",
          "6400:     pTab = (RecoverTable*)shellMalloc(pRc, sizeof(RecoverTable));",
          "6401:     if( pTab ){",
          "6402:       pTab->zName = shellMPrintf(pRc, \"%s\", \"recover_orphan\");",
          "6403:       pTab->zQuoted = shellMPrintf(pRc, \"%Q\", pTab->zName);",
          "6404:       pTab->nCol = nCol;",
          "6405:       pTab->iPk = -2;",
          "6406:       if( nCol>0 ){",
          "6407:         pTab->azlCol = (char**)shellMalloc(pRc, sizeof(char*) * (nCol+1));",
          "6408:         if( pTab->azlCol ){",
          "6409:           pTab->azlCol[nCol] = shellMPrintf(pRc, \"\");",
          "6410:           for(i=nCol-1; i>=0; i--){",
          "6411:             pTab->azlCol[i] = shellMPrintf(pRc, \"%s, NULL\", pTab->azlCol[i+1]);",
          "6412:           }",
          "6413:         }",
          "6417:     if( *pRc!=SQLITE_OK ){",
          "6418:       recoverFreeTable(pTab);",
          "6419:       pTab = 0;",
          "6420:     }",
          "6422:   return pTab;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6425:   int i;",
          "6428:   for(i=1; i<nArg; i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6437:   int nOrphan = -1;",
          "6438:   RecoverTable *pOrphan = 0;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6545:     \"  SELECT pgno FROM recovery.map WHERE root=1\"",
          "6546:     \")\"",
          "6547:     \"GROUP BY pgno, cell;\"",
          "6548:   );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6561:     \"CREATE INDEX recovery.schema_rootpage ON schema(rootpage);\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6566:     shellFinalize(&rc, pStmt);",
          "6567:   }",
          "6569:   shellPrepare(pState->db, &rc,",
          "6570:       \"SELECT pgno FROM recovery.map WHERE root=?\", &pPages",
          "6571:   );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6585:   shellPrepare(pState->db, &rc,",
          "6586:       \"SELECT coalesce(max(maxlen), -2) FROM recovery.map\"",
          "6587:       \"  WHERE root>1 AND root NOT IN (SELECT rootpage FROM recovery.schema)\"",
          "6588:       , &pLoop",
          "6589:   );",
          "6590:   if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "6591:     nOrphan = sqlite3_column_int(pLoop, 0);",
          "6592:   }",
          "6593:   shellFinalize(&rc, pLoop);",
          "6594:   pLoop = 0;",
          "6595:   pOrphan = recoverOrphanTable(pState, &rc, nOrphan);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6586:     int iRoot = sqlite3_column_int(pLoop, 0);",
          "6587:     int bIntkey = sqlite3_column_int(pLoop, 1);",
          "6588:     int nCol = sqlite3_column_int(pLoop, 2);",
          "6589:     RecoverTable *pTab;",
          "6603:           raw_printf(pState->out, \"INSERT INTO %s(%s) VALUES( %s );\\n\",",
          "6605:           );",
          "6606:         }",
          "6608:       }",
          "6610:     }",
          "6612:   }",
          "6613:   shellFinalize(&rc, pLoop);",
          "6614:   shellFinalize(&rc, pPages);",
          "6615:   shellFinalize(&rc, pCells);",
          "6618:   if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "6591:     pTab = recoverNewTable(pState, &rc, iRoot, bIntkey, nCol);",
          "6592:     if( pTab ){",
          "6593:       if( 0==sqlite3_stricmp(pTab->zName, \"sqlite_sequence\") ){",
          "6594:         raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6595:       }",
          "6596:       sqlite3_bind_int(pPages, 1, iRoot);",
          "6597:       sqlite3_bind_int(pCells, 2, pTab->iPk);",
          "6598:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPages) ){",
          "6599:         sqlite3_bind_int(pCells, 1, sqlite3_column_int(pPages, 0));",
          "6600:         while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pCells) ){",
          "6601:           int iMax = sqlite3_column_int(pCells, 0);",
          "6602:           const char *zVal = (const char*)sqlite3_column_text(pCells, 1);",
          "6604:               pTab->zQuoted, pTab->azlCol[iMax>0?iMax:0], zVal",
          "6607:         shellReset(&rc, pCells);",
          "6609:       shellReset(&rc, pPages);",
          "6611:     recoverFreeTable(pTab);",
          "",
          "[Added Lines]",
          "6617:     int bNoop = 0;",
          "6620:     pTab = recoverNewTable(pState, &rc, iRoot, bIntkey, nCol, &bNoop);",
          "6621:     if( bNoop || rc ) continue;",
          "6622:     if( pTab==0 ) pTab = pOrphan;",
          "6624:     if( 0==sqlite3_stricmp(pTab->zName, \"sqlite_sequence\") ){",
          "6625:       raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6626:     }",
          "6627:     sqlite3_bind_int(pPages, 1, iRoot);",
          "6628:     sqlite3_bind_int(pCells, 2, pTab->iPk);",
          "6630:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPages) ){",
          "6631:       int iPgno = sqlite3_column_int(pPages, 0);",
          "6632:       sqlite3_bind_int(pCells, 1, iPgno);",
          "6633:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pCells) ){",
          "6634:         int nField = sqlite3_column_int(pCells, 0);",
          "6635:         const char *zVal = (const char*)sqlite3_column_text(pCells, 1);",
          "6637:         nField = nField+1;",
          "6638:         if( pTab==pOrphan ){",
          "6639:           raw_printf(pState->out,",
          "6640:               \"INSERT INTO %s VALUES(%d, %d, %d, %s%s%s);\\n\",",
          "6641:               pTab->zQuoted, iRoot, iPgno, nField,",
          "6642:               bIntkey ? \"\" : \"NULL, \", zVal, pTab->azlCol[nField]",
          "6643:           );",
          "6644:         }else{",
          "6646:               pTab->zQuoted, pTab->azlCol[nField], zVal",
          "6650:       shellReset(&rc, pCells);",
          "6652:     shellReset(&rc, pPages);",
          "6653:     if( pTab!=pOrphan ) recoverFreeTable(pTab);",
          "6658:   recoverFreeTable(pOrphan);",
          "",
          "---------------"
        ]
      }
    }
  ]
}