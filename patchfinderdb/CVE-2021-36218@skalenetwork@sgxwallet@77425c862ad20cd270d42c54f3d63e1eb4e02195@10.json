{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a3130c56f4cacf3fb263ca18565d5eb2cb85918c",
      "candidate_info": {
        "commit_hash": "a3130c56f4cacf3fb263ca18565d5eb2cb85918c",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/a3130c56f4cacf3fb263ca18565d5eb2cb85918c",
        "files": [
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "SGXWalletServer.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "secure_enclave/secure_enclave.i",
          "testw.cpp"
        ],
        "message": "SKALE-2454-add-logs-to-enclave",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "secure_enclave/secure_enclave.i||secure_enclave/secure_enclave.i",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     uint32_t enc_len = 0;",
          "86:     if (!encryptKeys)",
          "88:     else",
          "90:     if (err_status != 0) {",
          "91:         throw SGXException(-666, errMsg.data());",
          "92:     }",
          "95:     spdlog::debug(\"in DKGCrypto encr len is {}\", enc_len);",
          "97:     uint64_t length = DKG_MAX_SEALED_LEN;",
          "",
          "[Removed Lines]",
          "87:         status = gen_dkg_secret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "89:         status = gen_dkg_secret_aes(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "94:     spdlog::debug(\"gen_dkg_secret, status {}\", err_status, \" err msg \", errMsg.data());",
          "",
          "[Added Lines]",
          "87:         status = trustedGenDkgSecret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "89:         status = trustedGenDkgSecret_aes(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "94:     spdlog::debug(\"trustedGenDkgSecret, status {}\", err_status, \" err msg \", errMsg.data());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:     uint32_t len = 0;",
          "140:     if (!encryptKeys)",
          "142:     else {",
          "145:     }",
          "146:     if (errStatus != 0) {",
          "147:         throw SGXException(-666, errMsg1.data());",
          "",
          "[Removed Lines]",
          "141:         status = get_public_shares(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), len, pubShares.data(), t, n);",
          "144:         status = get_public_shares_aes(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), encLen, pubShares.data(), t, n);",
          "",
          "[Added Lines]",
          "141:         status = trustedGetPublicShares(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), len, pubShares.data(), t, n);",
          "144:         status = trustedGetPublicShares_aes(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), encLen, pubShares.data(), t, n);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "153:     spdlog::debug(\"public_shares:\");",
          "154:     spdlog::debug(\"{}\", pubShares.data());;",
          "157:     vector<string> g2Strings = splitString(pubShares.data(), ',');",
          "158:     vector<vector<string>> pubSharesVect;",
          "",
          "[Removed Lines]",
          "155:     spdlog::debug(\"get_public_shares status: {}\", errStatus);",
          "",
          "[Added Lines]",
          "155:     spdlog::debug(\"trustedGetPublicShares status: {}\", errStatus);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:     return pubSharesVect;",
          "165: }",
          "168:                          int _n) {",
          "170:     vector<char> errMsg1(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "167: string get_secret_shares(const string &_polyName, const char *_encryptedPolyHex, const vector<string> &_publicKeys, int _t,",
          "",
          "[Added Lines]",
          "167: string trustedGetSecretShares(const string &_polyName, const char *_encryptedPolyHex, const vector<string> &_publicKeys, int _t,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "184:     if (!encryptKeys)",
          "186:     else",
          "189:     if (status != SGX_SUCCESS || errStatus != 0) {",
          "190:         throw SGXException(-666, errMsg1.data());",
          "",
          "[Removed Lines]",
          "185:         status = set_encrypted_dkg_poly(eid, &errStatus, errMsg1.data(), encrDKGPoly.data());",
          "187:         status = set_encrypted_dkg_poly_aes(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), &encLen);",
          "",
          "[Added Lines]",
          "185:         status = trustedSetEncryptedDkgPoly(eid, &errStatus, errMsg1.data(), encrDKGPoly.data());",
          "187:         status = trustedSetEncryptedDkgPoly_aes(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), &encLen);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "211:         if (!encryptKeys)",
          "213:                             currentShare.data(), sShareG2.data(), pubKeyB.data(), _t, _n, i + 1);",
          "214:         else",
          "216:                                 currentShare.data(), sShareG2.data(), pubKeyB.data(), _t, _n, i + 1);",
          "217:         if (errStatus != 0) {",
          "218:             throw SGXException(-666, errMsg1.data());",
          "",
          "[Removed Lines]",
          "212:             get_encr_sshare(eid, &errStatus, errMsg1.data(), encryptedSkey.data(), &decLen,",
          "215:             get_encr_sshare_aes(eid, &errStatus, errMsg1.data(), encryptedSkey.data(), &decLen,",
          "",
          "[Added Lines]",
          "212:             trustedGetEncryptedSecretShare(eid, &errStatus, errMsg1.data(), encryptedSkey.data(), &decLen,",
          "215:             trustedGetEncryptedSecretShare_aes(eid, &errStatus, errMsg1.data(), encryptedSkey.data(), &decLen,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "267:     if (!encryptKeys)",
          "269:     else",
          "272:     if (result == 2) {",
          "273:         throw SGXException(INVALID_HEX, \"Invalid public shares\");",
          "",
          "[Removed Lines]",
          "268:         dkg_verification(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "270:         dkg_verification_aes(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "",
          "[Added Lines]",
          "268:         trustedDkgVerify(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "270:         trustedDkgVerify_aes(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "304:     if (!encryptKeys)",
          "306:     else",
          "309:     if (err_status != 0) {",
          "",
          "[Removed Lines]",
          "305:         create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "307:         create_bls_key_aes(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "",
          "[Added Lines]",
          "305:         trustedCreateBlsKey(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "307:         trustedCreateBlsKey_aes(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "341:     spdlog::debug(\"dec_key_len is {}\", dec_key_len);",
          "343:     if (!encryptKeys)",
          "345:     else",
          "347:     if (err_status != 0) {",
          "348:         spdlog::error(string(errMsg1) + \" . Status is  {}\", err_status);",
          "349:         throw SGXException(ERROR_IN_ENCLAVE, \"Failed to get BLS public key in enclave\");",
          "",
          "[Removed Lines]",
          "344:         get_bls_pub_key(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "346:         get_bls_pub_key_aes(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "",
          "[Added Lines]",
          "344:         trustedGetBlsPubKey(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "346:         trustedGetBlsPubKey_aes(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: std::vector<std::string> splitString(const char* koefs, const char symbol);",
          "38: bool verifyShares(const char* publicShares, const char* encr_sshare, const char * encryptedKeyHex, int t, int n, int ind);",
          "",
          "[Removed Lines]",
          "36: std::string get_secret_shares(const std::string& _polyName, const char* _encryptedPolyHex, const std::vector<std::string>& _publicKeys, int _t, int _n);",
          "",
          "[Added Lines]",
          "36: std::string trustedGetSecretShares(const std::string& _polyName, const char* _encryptedPolyHex, const std::vector<std::string>& _publicKeys, int _t, int _n);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "517:             pubKeysStrs.push_back(_pubKeys[i].asString());",
          "518:         }",
          "522:         result[\"secretShare\"] = s;",
          "",
          "[Removed Lines]",
          "520:         string s = get_secret_shares(_polyName, encr_poly_ptr->c_str(), pubKeysStrs, _t, _n);",
          "",
          "[Added Lines]",
          "520:         string s = trustedGetSecretShares(_polyName, encr_poly_ptr->c_str(), pubKeysStrs, _t, _n);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "521:     free(sig);",
          "522: }",
          "526:     char dkg_secret[DKG_BUFER_LENGTH]; //= (char*)malloc(DKG_BUFER_LENGTH);",
          "",
          "[Removed Lines]",
          "524: void gen_dkg_secret(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "",
          "[Added Lines]",
          "524: void trustedGenDkgSecret(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "549: }",
          "552:                         uint32_t *dec_len) {",
          "",
          "[Removed Lines]",
          "551: void decrypt_dkg_secret(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "",
          "[Added Lines]",
          "551: void trustedDecryptDkgSecret(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "566: }",
          "569:                        char *secret_shares,",
          "570:                        unsigned _t, unsigned _n) {",
          "",
          "[Removed Lines]",
          "568: void get_secret_shares(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *dec_len,",
          "",
          "[Added Lines]",
          "568: void trustedGetSecretShares(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *dec_len,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "575:     uint32_t decr_len;",
          "",
          "[Removed Lines]",
          "577:     decrypt_dkg_secret(err_status, err_string, encrypted_dkg_secret, (uint8_t *) decrypted_dkg_secret, &decr_len);",
          "",
          "[Added Lines]",
          "577:     trustedDecryptDkgSecret(err_status, err_string, encrypted_dkg_secret, (uint8_t *) decrypted_dkg_secret, &decr_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "591: }",
          "594:                        char *public_shares,",
          "595:                        unsigned _t, unsigned _n) {",
          "598:     char *decrypted_dkg_secret = (char *) malloc(DKG_MAX_SEALED_LEN);",
          "599:     uint32_t decr_len;",
          "601:     if (*err_status != 0) {",
          "603:         return;",
          "604:     }",
          "",
          "[Removed Lines]",
          "593: void get_public_shares(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "600:     decrypt_dkg_secret(err_status, err_string, (uint8_t *) encrypted_dkg_secret, decrypted_dkg_secret, &decr_len);",
          "602:         snprintf(err_string, BUF_LEN, \"decrypt_dkg_secret failed with status %d\", *err_status);",
          "",
          "[Added Lines]",
          "593: void trustedGetPublicShares(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "600:     trustedDecryptDkgSecret(err_status, err_string, (uint8_t *) encrypted_dkg_secret, decrypted_dkg_secret, &decr_len);",
          "602:         snprintf(err_string, BUF_LEN, \"trustedDecryptDkgSecret failed with status %d\", *err_status);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "613: }",
          "617:     memset(decryptedDkgPoly, 0, DKG_BUFER_LENGTH);",
          "618:     uint32_t decr_len;",
          "619:     sgx_status_t status = sgx_unseal_data(",
          "",
          "[Removed Lines]",
          "616: void set_encrypted_dkg_poly(int *err_status, char *err_string, uint8_t *encrypted_poly) {",
          "",
          "[Added Lines]",
          "616: void trustedSetEncryptedDkgPoly(int *err_status, char *err_string, uint8_t *encrypted_poly) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "628: }",
          "631:                      char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind) {",
          "633:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "630: void get_encr_sshare(int *err_status, char *err_string, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "",
          "[Added Lines]",
          "630: void trustedGetEncryptedSecretShare(int *err_status, char *err_string, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "719:     char decrypted_dkg_secret[DKG_BUFER_LENGTH]; //= (char*)malloc(DKG_BUFER_LENGTH);",
          "720:     uint32_t decr_len;",
          "722:     if (*err_status != 0) {",
          "723:         snprintf(err_string, BUF_LEN, \"sgx_unseal_data - encrypted_dkg_secret failed with status %d\", *err_status);",
          "724:         return;",
          "",
          "[Removed Lines]",
          "721:     decrypt_dkg_secret(err_status, err_string, encrypted_dkg_secret, (uint8_t *) decrypted_dkg_secret, &decr_len);",
          "",
          "[Added Lines]",
          "721:     trustedDecryptDkgSecret(err_status, err_string, encrypted_dkg_secret, (uint8_t *) decrypted_dkg_secret, &decr_len);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "734: }",
          "737:                       uint8_t *encrypted_key, uint64_t key_len, unsigned _t, int _ind, int *result) {",
          "",
          "[Removed Lines]",
          "736: void dkg_verification(int *err_status, char *err_string, const char *public_shares, const char *s_share,",
          "",
          "[Added Lines]",
          "736: void trustedDkgVerify(int *err_status, char *err_string, const char *public_shares, const char *s_share,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "792: }",
          "795:                     uint8_t *encrypted_key, uint64_t key_len, uint8_t *encr_bls_key, uint32_t *enc_bls_key_len) {",
          "797:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "794: void create_bls_key(int *err_status, char *err_string, const char *s_shares,",
          "",
          "[Added Lines]",
          "794: void trustedCreateBlsKey(int *err_status, char *err_string, const char *s_shares,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "905:     mpz_clear(q);",
          "906: }",
          "910:     char skey_hex[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "908: void get_bls_pub_key(int *err_status, char *err_string, uint8_t *encrypted_key, uint64_t key_len, char *bls_pub_key) {",
          "",
          "[Added Lines]",
          "908: void trustedGetBlsPubKey(int *err_status, char *err_string, uint8_t *encrypted_key, uint64_t key_len, char *bls_pub_key) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1348: }",
          "1350: void",
          "1353:     char dkg_secret[DKG_BUFER_LENGTH];// = (char*)calloc(DKG_BUFER_LENGTH, 1);",
          "1354:     memset(dkg_secret, 0, DKG_BUFER_LENGTH);",
          "",
          "[Removed Lines]",
          "1351: gen_dkg_secret_aes(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "",
          "[Added Lines]",
          "1351: trustedGenDkgSecret_aes(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1392: }",
          "1394: void",
          "1396:                        uint32_t *dec_len) {",
          "1398:     int status = AES_decrypt(encrypted_dkg_secret, dec_len, decrypted_dkg_secret);",
          "",
          "[Removed Lines]",
          "1395: decrypt_dkg_secret_aes(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "",
          "[Added Lines]",
          "1395: trustedDecryptDkgSecret_aes(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1406: }",
          "1409:     memset(decryptedDkgPoly, 0, DKG_BUFER_LENGTH);",
          "1410:     int status = AES_decrypt(encrypted_poly, *enc_len, decryptedDkgPoly);",
          "",
          "[Removed Lines]",
          "1408: void set_encrypted_dkg_poly_aes(int *err_status, char *err_string, uint8_t *encrypted_poly, uint64_t *enc_len) {",
          "",
          "[Added Lines]",
          "1408: void trustedSetEncryptedDkgPoly_aes(int *err_status, char *err_string, uint8_t *encrypted_poly, uint64_t *enc_len) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1416:     }",
          "1417: }",
          "1420:                          char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind) {",
          "1422:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "1419: void get_encr_sshare_aes(int *err_status, char *err_string, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "",
          "[Added Lines]",
          "1419: void trustedGetEncryptedSecretShare_aes(int *err_status, char *err_string, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1440:     skey[ECDSA_SKEY_LEN - 1] = 0;",
          "1442:     if (status != SGX_SUCCESS) {",
          "1445:         return;",
          "1446:     }",
          "",
          "[Removed Lines]",
          "1443:         snprintf(err_string, BUF_LEN, \"AES_decrypt failed (in get_encr_sshare_aes)  with status %d\", status);",
          "",
          "[Added Lines]",
          "1443:         snprintf(err_string, BUF_LEN, \"AES_decrypt failed (in trustedGetEncryptedSecretShare_aes)  with status %d\", status);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1496: }",
          "1499:                            char *public_shares,",
          "1500:                            unsigned _t, unsigned _n) {",
          "",
          "[Removed Lines]",
          "1498: void get_public_shares_aes(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "",
          "[Added Lines]",
          "1498: void trustedGetPublicShares_aes(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1524: }",
          "1527:                           uint8_t *encrypted_key, uint64_t enc_len, unsigned _t, int _ind, int *result) {",
          "",
          "[Removed Lines]",
          "1526: void dkg_verification_aes(int *err_status, char *err_string, const char *public_shares, const char *s_share,",
          "",
          "[Added Lines]",
          "1526: void trustedDkgVerify_aes(int *err_status, char *err_string, const char *public_shares, const char *s_share,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1535:     if (status != SGX_SUCCESS) {",
          "1538:         return;",
          "1539:     }",
          "",
          "[Removed Lines]",
          "1536:         snprintf(err_string, BUF_LEN, \"AES_decrypt failed (in dkg_verification_aes)  with status %d\", status);",
          "",
          "[Added Lines]",
          "1536:         snprintf(err_string, BUF_LEN, \"AES_decrypt failed (in trustedDkgVerify_aes)  with status %d\", status);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1588: }",
          "1591:                         uint8_t *encrypted_key, uint64_t key_len, uint8_t *encr_bls_key, uint32_t *enc_bls_key_len) {",
          "1593:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "1590: void create_bls_key_aes(int *err_status, char *err_string, const char *s_shares,",
          "",
          "[Added Lines]",
          "1590: void trustedCreateBlsKey_aes(int *err_status, char *err_string, const char *s_shares,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1694: }",
          "1696: void",
          "1699:     char skey_hex[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "1697: get_bls_pub_key_aes(int *err_status, char *err_string, uint8_t *encrypted_key, uint64_t key_len, char *bls_pub_key) {",
          "",
          "[Added Lines]",
          "1697: trustedGetBlsPubKey_aes(int *err_status, char *err_string, uint8_t *encrypted_key, uint64_t key_len, char *bls_pub_key) {",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:                                 [in, count = 1024] char* hashY ,",
          "68:                                 [out, count = 1024] char* signature);",
          "71:                                 [user_check] int *err_status,",
          "72:                                 [out, count = 1024] char* err_string,",
          "73:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "74:                                 [user_check] uint32_t * enc_len,",
          "75:                                 size_t _t);",
          "78:                              [user_check] int *err_status,",
          "79:                              [out, count = 1024] char* err_string,",
          "80:                              [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "81:                              [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "82:                              [user_check] uint32_t* dec_len);",
          "85:                                 [user_check] int *err_status,",
          "86:                                 [out, count = 1024] char* err_string,",
          "87:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "70:                 public void gen_dkg_secret (",
          "77:                 public void decrypt_dkg_secret (",
          "84:                 public void get_secret_shares (",
          "",
          "[Added Lines]",
          "70:                 public void trustedGenDkgSecret (",
          "77:                 public void trustedDecryptDkgSecret (",
          "84:                 public void trustedGetSecretShares (",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:                                 unsigned _t,",
          "91:                                 unsigned _n);",
          "94:                                 [user_check] int *err_status,",
          "95:                                 [out, count = 1024] char* err_string,",
          "96:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "93:                 public void get_public_shares (",
          "",
          "[Added Lines]",
          "93:                 public void trustedGetPublicShares (",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:                                  [user_check] uint8_t* sig_v,",
          "111:                                  int base);",
          "114:                                  [out, count = 1024] char* err_string,",
          "115:                                  [in, count = 3050] uint8_t* encrypted_poly);",
          "118:                                 [user_check]int *err_status,",
          "119:                                 [out, count = 1024] char *err_string,",
          "120:                                 [out, count = 1024] uint8_t *encrypted_skey,",
          "",
          "[Removed Lines]",
          "113:                 public void set_encrypted_dkg_poly( [user_check] int *err_status,",
          "117:                 public void get_encr_sshare(",
          "",
          "[Added Lines]",
          "113:                 public void trustedSetEncryptedDkgPoly( [user_check] int *err_status,",
          "117:                 public void trustedGetEncryptedSecretShare(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:                                 uint8_t _n,",
          "127:                                 uint8_t ind);",
          "130:                                 [user_check] int *err_status,",
          "131:                                 [out, count = 1024] char* err_string,",
          "132:                                 [in, count = 8193] const char* public_shares,",
          "",
          "[Removed Lines]",
          "129:                 public void dkg_verification(",
          "",
          "[Added Lines]",
          "129:                 public void trustedDkgVerify(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:                                 int _ind,",
          "138:                                 [user_check] int* result);",
          "141:                                 [user_check]int *err_status,",
          "142:                                 [out, count = 1024] char* err_string,",
          "143:                                 [in, count = 6145] const char* s_shares,",
          "",
          "[Removed Lines]",
          "140:                 public void create_bls_key(",
          "",
          "[Added Lines]",
          "140:                 public void trustedCreateBlsKey(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "146:                                 [out, count = 1024] uint8_t * encr_bls_key,",
          "147:                                 [user_check] uint32_t *enc_bls_key_len);",
          "150:                                 [user_check]int *err_status,",
          "151:                                 [out, count = 1024]  char* err_string,",
          "152:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "149:                 public void get_bls_pub_key(",
          "",
          "[Added Lines]",
          "149:                 public void trustedGetBlsPubKey(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "227:                                 [out, count = 1024] char* key );",
          "231:                                 [user_check] int *err_status,",
          "232:                                 [out, count = 1024] char* err_string,",
          "233:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "234:                                 [user_check] uint32_t * enc_len,",
          "235:                                         size_t _t);",
          "238:                                 [user_check] int *err_status,",
          "239:                                 [out, count = 1024] char* err_string,",
          "240:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "241:                                 [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "242:                                 [user_check] uint32_t* dec_len);",
          "245:                                [user_check] int *err_status,",
          "246:                                [out, count = 1024] char* err_string,",
          "247:                                [in, count = 3050] uint8_t* encrypted_poly,",
          "248:                                [user_check] uint64_t* enc_len);",
          "251:                               [user_check]int *err_status,",
          "252:                               [out, count = 1024] char *err_string,",
          "253:                               [out, count = 1024] uint8_t *encrypted_skey,",
          "",
          "[Removed Lines]",
          "230:                 public void gen_dkg_secret_aes (",
          "237:                 public void decrypt_dkg_secret_aes (",
          "244:                 public void set_encrypted_dkg_poly_aes(",
          "250:                 public void get_encr_sshare_aes(",
          "",
          "[Added Lines]",
          "230:                 public void trustedGenDkgSecret_aes (",
          "237:                 public void trustedDecryptDkgSecret_aes (",
          "244:                 public void trustedSetEncryptedDkgPoly_aes(",
          "250:                 public void trustedGetEncryptedSecretShare_aes(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "259:                               uint8_t _n,",
          "260:                               uint8_t ind);",
          "263:                             [user_check] int *err_status,",
          "264:                             [out, count = 1024] char* err_string,",
          "265:                             [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "262:                 public void get_public_shares_aes (",
          "",
          "[Added Lines]",
          "262:                 public void trustedGetPublicShares_aes (",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "268:                             unsigned _t,",
          "269:                             unsigned _n);",
          "272:                           [user_check] int *err_status,",
          "273:                           [out, count = 1024] char* err_string,",
          "274:                           [in, count = 8193] const char* public_shares,",
          "",
          "[Removed Lines]",
          "271:                 public void dkg_verification_aes(",
          "",
          "[Added Lines]",
          "271:                 public void trustedDkgVerify_aes(",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "280:                           [user_check] int* result);",
          "284:                         [user_check]int *err_status,",
          "285:                         [out, count = 1024] char* err_string,",
          "286:                         [in, count = 6145] const char* s_shares,",
          "",
          "[Removed Lines]",
          "283:                 public void create_bls_key_aes(",
          "",
          "[Added Lines]",
          "283:                 public void trustedCreateBlsKey_aes(",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "298:                         [in, count = 1024] char* hashY ,",
          "299:                         [out, count = 1024] char* signature);",
          "302:                         [user_check]int *err_status,",
          "303:                         [out, count = 1024]  char* err_string,",
          "304:                         [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "301:                 public void get_bls_pub_key_aes(",
          "",
          "[Added Lines]",
          "301:                 public void trustedGetBlsPubKey_aes(",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.i||secure_enclave/secure_enclave.i": [
          "File: secure_enclave/secure_enclave.i -> secure_enclave/secure_enclave.i",
          "--- Hunk 1 ---",
          "[Context before]",
          "5472: void encrypt_key(int* err_status, char* err_string, char* key, uint8_t* encrypted_key, uint32_t* enc_len);",
          "5473: void decrypt_key(int* err_status, char* err_string, uint8_t* encrypted_key, uint32_t enc_len, char* key);",
          "5474: void trustedBlsSignMessage(int* err_status, char* err_string, uint8_t* encrypted_key, uint32_t enc_len, char* hashX, char* hashY, char* signature);",
          "5479: void ecdsa_sign1(int* err_status, char* err_string, uint8_t* encrypted_key, uint32_t dec_len, unsigned char* hash, char* signature, int test_len);",
          "5481: sgx_status_t oc_realloc(uint64_t* retval, void* optr, size_t osz, size_t nsz);",
          "",
          "[Removed Lines]",
          "5475: void gen_dkg_secret(int* err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t* enc_len, size_t _t);",
          "5476: void decrypt_dkg_secret(int* err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint8_t* decrypted_dkg_secret, uint32_t enc_len);",
          "5477: void get_secret_shares(int* err_status, char* err_string, uint8_t* decrypted_dkg_secret, uint32_t enc_len, char* secret_shares, unsigned int _t, unsigned int _n);",
          "5478: void get_public_shares(int* err_status, char* err_string, uint8_t* decrypted_dkg_secret, uint32_t enc_len, char* public_shares, unsigned int _t, unsigned int _n);",
          "",
          "[Added Lines]",
          "5475: void trustedGenDkgSecret(int* err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t* enc_len, size_t _t);",
          "5476: void trustedDecryptDkgSecret(int* err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint8_t* decrypted_dkg_secret, uint32_t enc_len);",
          "5477: void trustedGetSecretShares(int* err_status, char* err_string, uint8_t* decrypted_dkg_secret, uint32_t enc_len, char* secret_shares, unsigned int _t, unsigned int _n);",
          "5478: void trustedGetPublicShares(int* err_status, char* err_string, uint8_t* decrypted_dkg_secret, uint32_t enc_len, char* public_shares, unsigned int _t, unsigned int _n);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6888: }",
          "6892:   char* dkg_secret = (char*)malloc(1250);",
          "",
          "[Removed Lines]",
          "6890: void gen_dkg_secret (int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t* enc_len, size_t _t){",
          "",
          "[Added Lines]",
          "6890: void trustedGenDkgSecret (int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t* enc_len, size_t _t){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6905:   free(dkg_secret);",
          "6906: }",
          "",
          "[Removed Lines]",
          "6908: void decrypt_dkg_secret (int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint8_t* decrypted_dkg_secret, uint32_t enc_len){",
          "",
          "[Added Lines]",
          "6908: void trustedDecryptDkgSecret (int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint8_t* decrypted_dkg_secret, uint32_t enc_len){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6918:   }",
          "6919: }",
          "6922:     unsigned _t, unsigned _n){",
          "6923:   char* decrypted_dkg_secret = (char*)malloc(2000);",
          "6925:   calc_secret_shares(decrypted_dkg_secret, secret_shares, _t, _n);",
          "6926: }",
          "6929:                        unsigned _t, unsigned _n){",
          "6930:     char* decrypted_dkg_secret = (char*)malloc(2000);",
          "6932:     calc_public_shares(decrypted_dkg_secret, public_shares, _t);",
          "6933: }",
          "",
          "[Removed Lines]",
          "6921: void get_secret_shares(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t enc_len, char* secret_shares,",
          "6924:   decrypt_dkg_secret(err_status, err_string, (uint8_t*)encrypted_dkg_secret, decrypted_dkg_secret, enc_len);",
          "6928: void get_public_shares(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t enc_len, char* public_shares,",
          "6931:     decrypt_dkg_secret(err_status, err_string, (uint8_t*)encrypted_dkg_secret, decrypted_dkg_secret, enc_len);",
          "",
          "[Added Lines]",
          "6921: void trustedGetSecretShares(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t enc_len, char* secret_shares,",
          "6924:   trustedDecryptDkgSecret(err_status, err_string, (uint8_t*)encrypted_dkg_secret, decrypted_dkg_secret, enc_len);",
          "6928: void trustedGetPublicShares(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t enc_len, char* public_shares,",
          "6931:     trustedDecryptDkgSecret(err_status, err_string, (uint8_t*)encrypted_dkg_secret, decrypted_dkg_secret, enc_len);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:     int err_status = 0;",
          "186:     uint32_t enc_len = 0;",
          "189:     REQUIRE(status == SGX_SUCCESS);",
          "193:     vector<char> secret(BUF_LEN, 0);",
          "194:     vector<char> errMsg1(BUF_LEN, 0);",
          "196:     uint32_t dec_len;",
          "198:                                 (uint8_t *) secret.data(), &dec_len);",
          "200:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "188:     status = gen_dkg_secret(eid, &err_status, errMsg.data(), encryptedDKGSecret.data(), &enc_len, 32);",
          "197:     status = decrypt_dkg_secret(eid, &err_status, errMsg1.data(), encryptedDKGSecret.data(),",
          "",
          "[Added Lines]",
          "188:     status = trustedGenDkgSecret(eid, &err_status, errMsg.data(), encryptedDKGSecret.data(), &enc_len, 32);",
          "197:     status = trustedDecryptDkgSecret(eid, &err_status, errMsg1.data(), encryptedDKGSecret.data(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278:     unsigned t = 32, n = 32;",
          "281:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "280:     status = gen_dkg_secret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, n);",
          "",
          "[Added Lines]",
          "280:     status = trustedGenDkgSecret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, n);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "287:     char colon = ':';",
          "288:     vector<char> public_shares(10000, 0);",
          "291:                                encrypted_dkg_secret.data(), enc_len, public_shares.data(), t, n);",
          "292:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "290:     status = get_public_shares(eid, &err_status, errMsg1.data(),",
          "",
          "[Added Lines]",
          "290:     status = trustedGetPublicShares(eid, &err_status, errMsg1.data(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "307:     vector<char> secret(BUF_LEN, 0);",
          "310:                                 (uint8_t *) secret.data(), &enc_len);",
          "311:     REQUIRE(status == SGX_SUCCESS);",
          "314:     signatures::Dkg dkg_obj(t, n);",
          "",
          "[Removed Lines]",
          "309:     status = decrypt_dkg_secret(eid, &err_status, errMsg1.data(), encrypted_dkg_secret.data(),",
          "",
          "[Added Lines]",
          "309:     status = trustedDecryptDkgSecret(eid, &err_status, errMsg1.data(), encrypted_dkg_secret.data(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "349:     uint32_t enc_len = 0;",
          "351:     vector<uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
          "353:     REQUIRE(status == SGX_SUCCESS);",
          "357:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "352:     status = gen_dkg_secret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, 2);",
          "356:     status = set_encrypted_dkg_poly(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data());",
          "",
          "[Added Lines]",
          "352:     status = trustedGenDkgSecret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, 2);",
          "356:     status = trustedSetEncryptedDkgPoly(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "362:     string pub_keyB = \"c0152c48bf640449236036075d65898fded1e242c00acb45519ad5f788ea7cbf9a5df1559e7fc87932eee5478b1b9023de19df654395574a690843988c3ff475\";",
          "364:     vector<char> s_shareG2(BUF_LEN, 0);",
          "366:                              s_shareG2.data(),",
          "367:                              (char *) pub_keyB.data(), 2, 2, 1);",
          "",
          "[Removed Lines]",
          "365:     status = get_encr_sshare(eid, &err_status, errMsg.data(), encrPRDHKey.data(), &enc_len, result.data(),",
          "",
          "[Added Lines]",
          "365:     status = trustedGetEncryptedSecretShare(eid, &err_status, errMsg.data(), encrPRDHKey.data(), &enc_len, result.data(),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "388:     vector<uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
          "391:     REQUIRE(status == SGX_SUCCESS);",
          "395:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "390:     status = gen_dkg_secret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, 2);",
          "394:     status = set_encrypted_dkg_poly(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data());",
          "",
          "[Added Lines]",
          "390:     status = trustedGenDkgSecret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, 2);",
          "394:     status = trustedSetEncryptedDkgPoly(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "402:     vector<char> s_shareG2(BUF_LEN, 0);",
          "405:                              s_shareG2.data(),",
          "406:                              (char *) pub_keyB.data(), 2, 2, 1);",
          "407:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "404:     status = get_encr_sshare(eid, &err_status, errMsg.data(), encrPrDHKey.data(), &enc_len, result.data(),",
          "",
          "[Added Lines]",
          "404:     status = trustedGetEncryptedSecretShare(eid, &err_status, errMsg.data(), encrPrDHKey.data(), &enc_len, result.data(),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dcb025dbe3686170f9455062cd9bb106c443a2e1",
      "candidate_info": {
        "commit_hash": "dcb025dbe3686170f9455062cd9bb106c443a2e1",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/dcb025dbe3686170f9455062cd9bb106c443a2e1",
        "files": [
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:                                 [out]int *errStatus,",
          "233:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "234:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "236:                                 [out, count = 193] char* result_str,",
          "237:                                 [out, count = 320] char* s_shareG2,",
          "238:                                 [in, string] char* pub_keyB,",
          "",
          "[Removed Lines]",
          "235:                                 [user_check] uint32_t* dec_len,",
          "",
          "[Added Lines]",
          "235:                                 [out] uint32_t* dec_len,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:                                 [out] int *errStatus,",
          "254:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "255:                                 [in, string] const char* public_shares,",
          "257:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "258:                                 uint64_t key_len,",
          "259:                                 unsigned _t,",
          "",
          "[Removed Lines]",
          "256:                                 [in, count = 193] const char* s_share,",
          "",
          "[Added Lines]",
          "256:                                 [in, string] const char* s_share,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13298a9c04113001b81c910cec18f4a07416ffd2",
      "candidate_info": {
        "commit_hash": "13298a9c04113001b81c910cec18f4a07416ffd2",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/13298a9c04113001b81c910cec18f4a07416ffd2",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-2956 clean up logs",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1030:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey);",
          "1031:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
          "1035:     if (status != 0) {",
          "1036:         snprintf(errString, BUF_LEN, \"AES_decrypt failed with status %d\", status);",
          "",
          "[Removed Lines]",
          "1032:     LOG_TRACE(\"ENCRYPTED SKEY\");",
          "1033:     LOG_TRACE(skey);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1055:         return;",
          "1056:     }",
          "1060:     point Pkey = point_init();",
          "1062:     signature_extract_public_key(Pkey, privateKeyMpz, curve);",
          "1065:     point Pkey_test = point_init();",
          "1066:     point_multiplication(Pkey_test, privateKeyMpz, curve->G, curve);",
          "1069:     if (!point_cmp(Pkey, Pkey_test)) {",
          "1070:         snprintf(errString, BUF_LEN, \"Points are not equal\");",
          "",
          "[Removed Lines]",
          "1057:     LOG_TRACE(\"SET STR SUCCESS\");",
          "1063:     LOG_TRACE(\"SIGNATURE EXTRACT PK SUCCESS\");",
          "1067:     LOG_TRACE(\"POINT MULTIPLICATION SUCCESS\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1078:         return;",
          "1079:     }",
          "1082:     int len = mpz_sizeinbase(Pkey->x, ECDSA_SKEY_BASE) + 2;",
          "1084:     char arr_x[len];",
          "1085:     mpz_get_str(arr_x, ECDSA_SKEY_BASE, Pkey->x);",
          "1089:     int n_zeroes = 64 - strlen(arr_x);",
          "1090:     for (int i = 0; i < n_zeroes; i++) {",
          "",
          "[Removed Lines]",
          "1080:     LOG_TRACE(\"POINTS CMP SUCCESS\");",
          "1086:     LOG_TRACE(\"GET STR X SUCCESS\");",
          "1087:     LOG_TRACE(arr_x);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1096:     char arr_y[mpz_sizeinbase(Pkey->y, ECDSA_SKEY_BASE) + 2];",
          "1097:     mpz_get_str(arr_y, ECDSA_SKEY_BASE, Pkey->y);",
          "1100:     n_zeroes = 64 - strlen(arr_y);",
          "1101:     for (int i = 0; i < n_zeroes; i++) {",
          "1102:         pub_key_y[i] = '0';",
          "",
          "[Removed Lines]",
          "1098:     LOG_TRACE(\"GET STR Y SUCCESS\");",
          "1099:     LOG_TRACE(arr_y);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41244ce86983423407d6d8572c79962a99d1cf6b",
      "candidate_info": {
        "commit_hash": "41244ce86983423407d6d8572c79962a99d1cf6b",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/41244ce86983423407d6d8572c79962a99d1cf6b",
        "files": [
          "secure_enclave/AESUtils.c"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c"
          ],
          "candidate": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
          "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
          "67:   if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
          "68:       LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     if (!message) {",
          "67:         LOG_ERROR(\"Null message in AES_encrypt\");",
          "68:         return -1;",
          "69:     }",
          "71:     if (!encr_message) {",
          "72:         LOG_ERROR(\"Null encr message in AES_encrypt\");",
          "73:         return -2;",
          "74:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e67868fb66205caa72fff7980067978efdfb2c0",
      "candidate_info": {
        "commit_hash": "3e67868fb66205caa72fff7980067978efdfb2c0",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/3e67868fb66205caa72fff7980067978efdfb2c0",
        "files": [
          "BLSCrypto.cpp",
          "BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp",
          "ECDSACrypto.cpp",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "VERSION",
          "common.h",
          "sgxwallet_common.h"
        ],
        "message": "SKALE-3636-sgx-server-anti-dos-protections",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "common.h||common.h",
          "sgxwallet_common.h||sgxwallet_common.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:     sgx_status_t status = SGX_SUCCESS;",
          "218:             status = trustedBlsSignMessage(eid, &errStatus, errMsg.data(), encryptedKey,",
          "219:                                               sz, xStrArg, yStrArg, signature);",
          "223:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "217:     RESTART_BEGIN",
          "220:     RESTART_END",
          "",
          "[Added Lines]",
          "217:     SEMAPHORE_BEGIN",
          "220:     SEMAPHORE_END",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:     sgx_status_t status = SGX_SUCCESS;",
          "260:         status = trustedEncryptKey(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(),",
          "261:                                       &encryptedLen);",
          "264:     HANDLE_TRUSTED_FUNCTION_ERROR(status, *errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "259:     RESTART_BEGIN",
          "262:     RESTART_END_POINTER",
          "",
          "[Added Lines]",
          "259:     SEMAPHORE_BEGIN",
          "262:     SEMAPHORE_END",
          "",
          "---------------"
        ],
        "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp": [
          "File: BLSPrivateKeyShareSGX.cpp -> BLSPrivateKeyShareSGX.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     sgx_status_t status = SGX_SUCCESS;",
          "153:         status = trustedBlsSignMessage(eid, &errStatus, errMsg.data(), encryptedKey,",
          "154:                                           encryptedKeyHex->size() / 2, xStrArg, yStrArg, signature);",
          "157:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "152:     RESTART_BEGIN",
          "155:     RESTART_END",
          "",
          "[Added Lines]",
          "152:     SEMAPHORE_BEGIN",
          "155:     SEMAPHORE_END",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     sgx_status_t status = SGX_SUCCESS;",
          "141:         status = trustedGenDkgSecret(",
          "142:                 eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "140:     RESTART_BEGIN",
          "143:     RESTART_END",
          "",
          "[Added Lines]",
          "140:     SEMAPHORE_BEGIN",
          "143:     SEMAPHORE_END",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:     sgx_status_t status = SGX_SUCCESS;",
          "181:         status = trustedGetPublicShares(eid, &errStatus, errMsg.data(), encrDKGPoly.data(), encLen,",
          "182:                                            pubShares.data(), t, n);",
          "185:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "180:     RESTART_BEGIN",
          "183:     RESTART_END",
          "",
          "[Added Lines]",
          "180:     SEMAPHORE_BEGIN",
          "183:     SEMAPHORE_END",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "369:     sgx_status_t status = SGX_SUCCESS;",
          "372:         status = trustedDkgVerify(eid, &errStatus, errMsg.data(), pshares, encr_sshare, encr_key, decKeyLen, t,",
          "373:                                      ind, &result);",
          "376:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "371:     RESTART_BEGIN",
          "374:     RESTART_END",
          "",
          "[Added Lines]",
          "371:     SEMAPHORE_BEGIN",
          "374:     SEMAPHORE_END",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "405:     sgx_status_t status = SGX_SUCCESS;",
          "408:         status = trustedDkgVerifyV2(eid, &errStatus, errMsg.data(), pshares, encr_sshare, encr_key, decKeyLen, t,",
          "409:                                      ind, &result);",
          "412:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "407:     RESTART_BEGIN",
          "410:     RESTART_END",
          "",
          "[Added Lines]",
          "407:     SEMAPHORE_BEGIN",
          "410:     SEMAPHORE_END",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "436:     sgx_status_t status = SGX_SUCCESS;",
          "439:         status = trustedCreateBlsKey(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
          "440:                                         &enc_bls_len);",
          "443:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "438:     RESTART_BEGIN",
          "441:     RESTART_END",
          "",
          "[Added Lines]",
          "438:     SEMAPHORE_BEGIN",
          "441:     SEMAPHORE_END",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "470:     sgx_status_t status = SGX_SUCCESS;",
          "473:         status = trustedGetBlsPubKey(eid, &errStatus, errMsg1.data(), encrKey, decKeyLen, pubKey);",
          "476:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg1.data());",
          "",
          "[Removed Lines]",
          "472:     RESTART_BEGIN",
          "474:     RESTART_END",
          "",
          "[Added Lines]",
          "472:     SEMAPHORE_BEGIN",
          "474:     SEMAPHORE_END",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "557:     sgx_status_t status = SGX_SUCCESS;",
          "560:         status = trustedDecryptKey(eid, &errStatus, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "562:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg1.data())",
          "564:     return DHKey;",
          "",
          "[Removed Lines]",
          "559:     RESTART_BEGIN",
          "561:     RESTART_END",
          "",
          "[Added Lines]",
          "559:     SEMAPHORE_BEGIN",
          "561:     SEMAPHORE_END",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     sgx_status_t status = SGX_SUCCESS;",
          "63:         status = trustedGenerateEcdsaKey(eid, &errStatus,",
          "64:                                    errMsg.data(), encr_pr_key.data(), &enc_len,",
          "65:                                    pub_key_x.data(), pub_key_y.data());",
          "68:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus,errMsg.data());",
          "",
          "[Removed Lines]",
          "62:     RESTART_BEGIN",
          "66:     RESTART_END",
          "",
          "[Added Lines]",
          "62:     SEMAPHORE_BEGIN",
          "66:     SEMAPHORE_END",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     sgx_status_t status = SGX_SUCCESS;",
          "105:         status = trustedGetPublicEcdsaKey(eid, &errStatus,",
          "106:                                              errMsg.data(), encrPrKey.data(), enc_len, pubKeyX.data(), pubKeyY.data());",
          "109:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data())",
          "",
          "[Removed Lines]",
          "104:     RESTART_BEGIN",
          "107:     RESTART_END",
          "",
          "[Added Lines]",
          "104:     SEMAPHORE_BEGIN",
          "107:     SEMAPHORE_END",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:     sgx_status_t status = SGX_SUCCESS;",
          "194:         status = trustedEcdsaSign(eid, &errStatus,",
          "195:                             errMsg.data(), encryptedKey.data(), decLen, hashHex,",
          "196:                             signatureR.data(),",
          "197:                             signatureS.data(), &signatureV, base);",
          "200:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "193:     RESTART_BEGIN",
          "198:     RESTART_END",
          "",
          "[Added Lines]",
          "193:     SEMAPHORE_BEGIN",
          "198:     SEMAPHORE_END",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:     uint64_t enc_len = 0;",
          "244:     sgx_status_t status = SGX_SUCCESS;",
          "246:         status = trustedEncryptKey(eid, &errStatus, errString.data(), key.data(),",
          "247:                                    encryptedKey.data(), &enc_len);",
          "250:     if (status != 0) {",
          "251:         throw SGXException(status, string(\"Could not encrypt ECDSA key: \" + string(errString.begin(), errString.end())).c_str());",
          "",
          "[Removed Lines]",
          "245:     RESTART_BEGIN",
          "248:     RESTART_END",
          "",
          "[Added Lines]",
          "245:     SEMAPHORE_BEGIN",
          "248:     SEMAPHORE_END",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: using namespace std;",
          "57: std::shared_timed_mutex sgxInitMutex;",
          "58: uint64_t initTime;",
          "60: void setFullOptions(uint64_t _logLevel, int _useHTTPS, int _autoconfirm, int _enterBackupKey) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: boost::interprocess::interprocess_semaphore enclaveSemaphore(200);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117: #ifdef SGX_HW_SIM",
          "118: #define NUM_THREADS 16",
          "119: #else",
          "121: #endif",
          "",
          "[Removed Lines]",
          "120: #define NUM_THREADS 200",
          "",
          "[Added Lines]",
          "126: #define NUM_THREADS 1024",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242: void SGXWalletServer::checkForDuplicate(map <string, string> &_map, recursive_mutex &_m,",
          "243:                                         const string &_key,",
          "246:     LOCK(_m);",
          "247:     if (_map.count(_key) && _map.at(_key) == _value) {",
          "248:         usleep(100 * 1000);",
          "249:         spdlog::warn(string(\"Received an identical request from the client:\") + __FUNCTION__);",
          "250:     }",
          "252: }",
          "",
          "[Removed Lines]",
          "244:                        const string &_value) {",
          "251:     _map[_key] =  _value;",
          "",
          "[Added Lines]",
          "250:                                         const string &_value) {",
          "257:     _map[_key] = _value;",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp"
        ],
        "common.h||common.h": [
          "File: common.h -> common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: extern std::shared_timed_mutex sgxInitMutex;",
          "102: extern uint64_t initTime;",
          "110: #define LOCK(__X__) std::lock_guard<std::recursive_mutex> __LOCK__(__X__);",
          "111: #define READ_LOCK(__X__) std::shared_lock<std::shared_timed_mutex> __LOCK__(__X__);",
          "112: #define WRITE_LOCK(__X__) std::unique_lock<std::shared_timed_mutex> __LOCK__(__X__);",
          "116: #endif //SGXWALLET_COMMON_H",
          "",
          "[Removed Lines]",
          "104: #ifdef SGX_HW_SIM",
          "105: #define ENCLAVE_RESTART_PERIOD_S 5",
          "106: #else",
          "107: #define ENCLAVE_RESTART_PERIOD_S 60 * 10",
          "108: #endif",
          "",
          "[Added Lines]",
          "109: #include <boost/interprocess/sync/interprocess_semaphore.hpp>",
          "112: extern boost::interprocess::interprocess_semaphore enclaveSemaphore;",
          "114: class semaphore_guard {",
          "115:     boost::interprocess::interprocess_semaphore &sem;",
          "116: public:",
          "117:     semaphore_guard(boost::interprocess::interprocess_semaphore &_semaphore) : sem(_semaphore) {",
          "118:         sem.wait();",
          "119:     }",
          "121:     ~semaphore_guard() {",
          "122:         sem.post();",
          "123:     }",
          "124: };",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: #define TEST_VALUE \"1234567890\"",
          "141: #endif //SGXWALLET_SGXWALLET_COMMON_H",
          "",
          "[Removed Lines]",
          "113: #define RESTART_BEGIN \\",
          "114: int __ATTEMPTS__ = 0; \\",
          "115: do {\\",
          "116: __ATTEMPTS__++; \\",
          "117: {\\",
          "118: READ_LOCK(sgxInitMutex);",
          "120: #define RESTART_END \\",
          "121: } \\",
          "122: if (status != SGX_SUCCESS || errStatus == 3) { \\",
          "123: spdlog::error(__FUNCTION__);                   \\",
          "124: spdlog::error(\"Exiting sgx on status errStatus... {} {}\", status, errStatus);                    \\",
          "125: safeExit(); \\",
          "126: } \\",
          "127: } while ((status != SGX_SUCCESS || errStatus == 3) && __ATTEMPTS__ < 2);",
          "131: #define RESTART_END_POINTER \\",
          "132: } \\",
          "133: if (status != SGX_SUCCESS || *errStatus == 3) { \\",
          "134: spdlog::error(__FUNCTION__);\\",
          "135: spdlog::error(\"Restarting sgx on status errStatus... {} {}\", status, *errStatus);                            \\",
          "136: safeExit(); \\",
          "137: } \\",
          "138: } while ((status != SGX_SUCCESS || *errStatus == 3) && __ATTEMPTS__ < 2);",
          "",
          "[Added Lines]",
          "113: #define SEMAPHORE_BEGIN { semaphore_guard __ENCLAVE__GUARD__(enclaveSemaphore) ;",
          "115: #define SEMAPHORE_END }",
          "",
          "---------------"
        ]
      }
    }
  ]
}