{
  "cve_id": "CVE-2019-18276",
  "cve_desc": "An issue was discovered in disable_priv_mode in shell.c in GNU Bash through 5.0 patch 11. By default, if Bash is run with its effective UID not equal to its real UID, it will drop privileges by setting its effective UID to its real UID. However, it does so incorrectly. On Linux and other systems that support \"saved UID\" functionality, the saved UID is not dropped. An attacker with command execution in the shell can use \"enable -f\" for runtime loading of a new builtin, which can be a shared object that calls setuid() and therefore regains privileges. However, binaries running with an effective UID of 0 are unaffected.",
  "repo": "bminor/bash",
  "patch_hash": "951bdaad7a18cc0dc1036bba86b18b90874d39ff",
  "patch_info": {
    "commit_hash": "951bdaad7a18cc0dc1036bba86b18b90874d39ff",
    "repo": "bminor/bash",
    "commit_url": "https://github.com/bminor/bash/commit/951bdaad7a18cc0dc1036bba86b18b90874d39ff",
    "files": [
      "CWRU/CWRU.chlog",
      "MANIFEST",
      "bashline.c",
      "builtins/help.def",
      "config.h.in",
      "configure",
      "configure.ac",
      "doc/bash.1",
      "doc/bashref.texi",
      "lib/glob/glob.c",
      "pathexp.c",
      "shell.c",
      "tests/glob.tests",
      "tests/glob6.sub",
      "tests/glob7.sub"
    ],
    "message": "commit bash-20190628 snapshot",
    "before_after_code_files": [
      "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
      "bashline.c||bashline.c",
      "builtins/help.def||builtins/help.def",
      "config.h.in||config.h.in",
      "configure.ac||configure.ac",
      "lib/glob/glob.c||lib/glob/glob.c",
      "pathexp.c||pathexp.c",
      "shell.c||shell.c",
      "tests/glob.tests||tests/glob.tests",
      "tests/glob6.sub||tests/glob6.sub",
      "tests/glob7.sub||tests/glob7.sub"
    ]
  },
  "patch_diff": {
    "CWRU/CWRU.chlog||CWRU/CWRU.chlog": [
      "File: CWRU/CWRU.chlog -> CWRU/CWRU.chlog",
      "--- Hunk 1 ---",
      "[Context before]",
      "6167:  - pathname expansion: note that under some circumstances the shell",
      "6168:    will invoke the matching engine for words with unquoted backslashes",
      "6169:  - posixglob: document the new shell option and its effects",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6171:        6/27",
      "6172:        ----",
      "6173: {config.h.in,configure.ac}",
      "6174:  - setresuid,setresgid: check and set HAVE_{DECL,}_SETRES[UG]ID as",
      "6175:    appropriate",
      "6177: shell.c",
      "6178:  - disable_priv_mode: if we have setres[ug]id, use them over",
      "6179:    set[ug]id, which only set the save user-id and group-id if the",
      "6180:    process is running as root. From Ian Eldred Pudney",
      "6181:    in https://savannah.gnu.org/patch/?9822",
      "6183:        6/28",
      "6184:        ----",
      "6185: lib/glob/glob.c",
      "6186:  - glob_vector: don't bother trying to read the directory if the filename",
      "6187:    pattern doesn't have any globbing characters except backslash; just",
      "6188:    dequote the pattern and try to lstat(2) it as if there were no",
      "6189:    globbing characters at all. From an austingroup-bugs discussion",
      "6190:    message from Stephane Chazelas <stephane.chazelas@gmail.com>",
      "6192: bashline.c",
      "6193:  - completion_glob_pattern: just call glob_pattern_p and make sure it",
      "6194:    returns 1 (non-backslash globbing characters)",
      "6196: builtins/help.def",
      "6197:  - help_builtin: don't try pattern matching the help topic argument",
      "6198:    unless glob_pattern_p returns 1",
      "6200: pathexp.c",
      "6201:  - unquoted_glob_pattern_p: when in a bracket expression (open > 0),",
      "6202:    don't allow an unquoted slash as part of the bracket expression.",
      "6203:    Report from Stephane Chazelas <stephane.chazelas@gmail.com>",
      "",
      "---------------"
    ],
    "bashline.c||bashline.c": [
      "File: bashline.c -> bashline.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3846: completion_glob_pattern (string)",
      "3847:      char *string;",
      "3848: {",
      "3898: }",
      "3900: static char *globtext;",
      "",
      "[Removed Lines]",
      "3849:   register int c;",
      "3850:   char *send;",
      "3851:   int open;",
      "3853:   DECLARE_MBSTATE;",
      "3855:   open = 0;",
      "3856:   send = string + strlen (string);",
      "3858:   while (c = *string++)",
      "3859:     {",
      "3860:       switch (c)",
      "3861:  {",
      "3862:  case '?':",
      "3863:  case '*':",
      "3864:    return (1);",
      "3866:  case '[':",
      "3867:    open++;",
      "3868:    continue;",
      "3870:  case ']':",
      "3871:    if (open)",
      "3872:      return (1);",
      "3873:    continue;",
      "3875:  case '+':",
      "3876:  case '@':",
      "3877:  case '!':",
      "3879:      return (1);",
      "3880:    continue;",
      "3882:  case '\\\\':",
      "3883:    if (*string++ == 0)",
      "3884:      return (0);",
      "3885:  }",
      "3889: #ifdef HANDLE_MULTIBYTE",
      "3890:       string--;",
      "3891:       ADVANCE_CHAR_P (string, send - string);",
      "3892:       string++;",
      "3893: #else",
      "3894:       ADVANCE_CHAR_P (string, send - string);",
      "3895: #endif",
      "3896:     }",
      "3897:   return (0);",
      "",
      "[Added Lines]",
      "3849:   return (glob_pattern_p (string) == 1);",
      "",
      "---------------"
    ],
    "builtins/help.def||builtins/help.def": [
      "File: builtins/help.def -> builtins/help.def",
      "--- Hunk 1 ---",
      "[Context before]",
      "132:     {",
      "133:       printf (\"%s\", ngettext (\"Shell commands matching keyword `\", \"Shell commands matching keywords `\", (list->next ? 2 : 1)));",
      "134:       print_word_list (list, \", \");",
      "",
      "[Removed Lines]",
      "131:   if (glob_pattern_p (list->word->word))",
      "",
      "[Added Lines]",
      "131:   if (glob_pattern_p (list->word->word) == 1)",
      "",
      "---------------"
    ],
    "config.h.in||config.h.in": [
      "File: config.h.in -> config.h.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "813: #undef HAVE_SETREGID",
      "814: #undef HAVE_DECL_SETREGID",
      "817: #undef HAVE_SETVBUF",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "817: #undef HAVE_SETRESGID",
      "818: #undef HAVE_DECL_SETRESGID",
      "821: #undef HAVE_SETRESUID",
      "822: #undef HAVE_DECL_SETRESUID",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: #   You should have received a copy of the GNU General Public License",
      "22: #   along with this program.  If not, see <http://www.gnu.org/licenses/>.",
      "26: define(bashvers, 5.0)",
      "27: define(relstatus, maint)",
      "",
      "[Removed Lines]",
      "24: AC_REVISION([for Bash 5.0, version 5.010])dnl",
      "",
      "[Added Lines]",
      "24: AC_REVISION([for Bash 5.0, version 5.011])dnl",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "850: AC_CHECK_DECLS([printf])",
      "851: AC_CHECK_DECLS([sbrk])",
      "852: AC_CHECK_DECLS([setregid])",
      "853: AC_CHECK_DECLS([strcpy])",
      "854: AC_CHECK_DECLS([strsignal])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "853: AC_CHECK_DECLS[(setresuid, setresgid])",
      "",
      "---------------"
    ],
    "lib/glob/glob.c||lib/glob/glob.c": [
      "File: lib/glob/glob.c -> lib/glob/glob.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "675:   patlen = (pat && *pat) ? strlen (pat) : 0;",
      "678:      we can dispense with reading the directory, and just see if there is",
      "679:      a filename `DIR/PAT'.  If there is, and we can access it, just make the",
      "682:     {",
      "683:       int dirlen;",
      "684:       struct stat finfo;",
      "",
      "[Removed Lines]",
      "681:   if (skip == 0 && glob_pattern_p (pat) == 0)",
      "",
      "[Added Lines]",
      "679:      or contains a pattern with only backslash escapes (hasglob == 2),",
      "683:   hasglob = 0;",
      "684:   if (skip == 0 && (hasglob = glob_pattern_p (pat)) == 0 || hasglob == 2)",
      "",
      "---------------"
    ],
    "pathexp.c||pathexp.c": [
      "File: pathexp.c -> pathexp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "62: int posix_glob_backslash = 1;",
      "65: int",
      "66: unquoted_glob_pattern_p (string)",
      "67:      register char *string;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65:    This is supposed to be called when pathname expansion is performed, so",
      "66:    it implements the rules in Posix 2.13.3, specifically that an unquoted",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "88:    continue;",
      "90:  case ']':",
      "92:      return (1);",
      "93:    continue;",
      "95:  case '+':",
      "96:  case '@':",
      "97:  case '!':",
      "",
      "[Removed Lines]",
      "91:    if (open)",
      "",
      "[Added Lines]",
      "98:  case '/':",
      "99:    if (open)",
      "100:      open = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "109:        string++;",
      "110:        continue;",
      "111:      }",
      "112:    else if (*string == 0)",
      "113:      return (0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "119:    else if (open && *string == '/')",
      "120:      {",
      "122:        continue;",
      "123:      }",
      "",
      "---------------"
    ],
    "shell.c||shell.c": [
      "File: shell.c -> shell.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1293: {",
      "1294:   int e;",
      "1296:   if (setuid (current_user.uid) < 0)",
      "1297:     {",
      "1298:       e = errno;",
      "1299:       sys_error (_(\"cannot set uid to %d: effective uid %d\"), current_user.uid, current_user.euid);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1296: #if HAVE_DECL_SETRESUID",
      "1297:   if (setresuid (current_user.uid, current_user.uid, current_user.uid) < 0)",
      "1298: #else",
      "1300: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1302:  exit (e);",
      "1303: #endif",
      "1304:     }",
      "1305:   if (setgid (current_user.gid) < 0)",
      "1306:     sys_error (_(\"cannot set gid to %d: effective gid %d\"), current_user.gid, current_user.egid);",
      "1308:   current_user.euid = current_user.uid;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1309: #if HAVE_DECL_SETRESGID",
      "1310:   if (setresgid (current_user.gid, current_user.gid, current_user.gid) < 0)",
      "1311: #else",
      "1313: #endif",
      "",
      "---------------"
    ],
    "tests/glob.tests||tests/glob.tests": [
      "File: tests/glob.tests -> tests/glob.tests",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: ${THIS_SH} ./glob3.sub",
      "14: ${THIS_SH} ./glob4.sub",
      "15: ${THIS_SH} ./glob5.sub",
      "17: MYDIR=$PWD # save where we are",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: ${THIS_SH} ./glob6.sub",
      "17: ${THIS_SH} ./glob7.sub",
      "",
      "---------------"
    ],
    "tests/glob6.sub||tests/glob6.sub": [
      "File: tests/glob6.sub -> tests/glob6.sub",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # tests of the backslash-in-glob-patterns discussion on the austin-group ML",
      "3: : ${TMPDIR:=/var/tmp}",
      "5: ORIG=$PWD",
      "6: GLOBDIR=$TMPDIR/bash-glob-$$",
      "7: mkdir $GLOBDIR && cd $GLOBDIR",
      "9: # does the pattern matcher allow backslashes as escape characters and remove",
      "10: # them as part of matching?",
      "11: touch abcdefg",
      "12: pat='ab\\cd*'",
      "13: printf '<%s>\\n' $pat",
      "14: pat='\\.'",
      "15: printf '<%s>\\n' $pat",
      "16: rm abcdefg",
      "18: # how about when escaping pattern characters?",
      "19: touch '*abc.c'",
      "20: a='\\**.c'",
      "21: printf '%s\\n' $a",
      "22: rm -f '*abc.c'",
      "24: # how about when making the distinction between readable and searchable path",
      "25: # components?",
      "26: mkdir -m a=x searchable",
      "27: mkdir -m a=r readable",
      "29: p='searchable/\\.'",
      "30: printf \"%s\\n\" $p",
      "32: p='searchable/\\./.'",
      "33: printf \"%s\\n\" $p",
      "35: p='readable/\\.'",
      "36: printf \"%s\\n\" $p",
      "38: p='readable/\\./.'",
      "39: printf \"%s\\n\" $p",
      "41: printf \"%s\\n\" 'searchable/\\.'",
      "42: printf \"%s\\n\" 'readable/\\.'",
      "44: echo */.",
      "46: p='*/\\.'",
      "47: echo $p",
      "49: echo */'.'",
      "51: rmdir searchable readable",
      "53: cd $ORIG",
      "54: rmdir $GLOBDIR",
      "",
      "---------------"
    ],
    "tests/glob7.sub||tests/glob7.sub": [
      "File: tests/glob7.sub -> tests/glob7.sub",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # according to Posix 2.13.3, a slash in a bracket expression renders that",
      "2: # bracket expression invalid",
      "3: shopt -s nullglob",
      "5: echo 1: [qwe/qwe]",
      "6: echo 2: [qwe/",
      "7: echo 3: [qwe/]",
      "9: echo 4: [qwe\\/qwe]",
      "10: echo 5: [qwe\\/",
      "11: echo 6: [qwe\\/]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9e48f856544da2d2cc95600f487e5b5bcefa0d85",
      "candidate_info": {
        "commit_hash": "9e48f856544da2d2cc95600f487e5b5bcefa0d85",
        "repo": "bminor/bash",
        "commit_url": "https://github.com/bminor/bash/commit/9e48f856544da2d2cc95600f487e5b5bcefa0d85",
        "files": [
          "CWRU/CWRU.chlog",
          "MANIFEST",
          "bashhist.c",
          "builtins/cd.def",
          "command.h",
          "configure",
          "configure.ac",
          "doc/bashref.texi",
          "jobs.c",
          "m4/pthread_rwlock_rdlock.m4",
          "subst.c",
          "tests/dollar.right",
          "tests/quote.right"
        ],
        "message": "commit bash-20190220 snapshot",
        "before_after_code_files": [
          "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
          "bashhist.c||bashhist.c",
          "builtins/cd.def||builtins/cd.def",
          "command.h||command.h",
          "configure.ac||configure.ac",
          "jobs.c||jobs.c",
          "m4/pthread_rwlock_rdlock.m4||m4/pthread_rwlock_rdlock.m4",
          "subst.c||subst.c",
          "tests/dollar.right||tests/dollar.right",
          "tests/quote.right||tests/quote.right"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "CWRU/CWRU.chlog||CWRU/CWRU.chlog": [
          "File: CWRU/CWRU.chlog -> CWRU/CWRU.chlog",
          "--- Hunk 1 ---",
          "[Context before]",
          "5317:    an interactive shell reported by Grisha Levit",
          "5318:    <grishalevit@gmail.com>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5320:        2/19",
          "5321:        ----",
          "5323: jobs.c",
          "5324:  - end_job_control: if the setpgid(0, ...) succeeds, reset the value of",
          "5325:    shell_pgrp. Fixes pgrp mismatch after failed exec in an interactive",
          "5326:    login shell reported by Grisha Levit <grishalevit@gmail.com>",
          "5328:        2/20",
          "5329:        ----",
          "5330: bashhist.c",
          "5331:  - pre_process_line: save history_length before calling history_expand,",
          "5332:    and after possibly decrementing history_length, just restore the old",
          "5333:    value instead of incrementing it.  Fixes bug reported by",
          "5334:    Michael Albinus <michael.albinus@gmx.de>",
          "5335:  - bash_add_history: don't bother calling really_add_history if the",
          "5336:    history is stifled and the max number of entries is 0",
          "5338: aclocal.m4,configure.ac,m4/*.m4",
          "5339:  - replace the old set of gettext m4 macros with the latest m4 files",
          "5340:    from the gnulib and gettext distributions",
          "5342:        2/21",
          "5343:        ----",
          "5344: builtins/cd.def",
          "5345:  - bindpwd: initialize canon_failed to 0 to prevent `cd -e' from always",
          "5346:    failing",
          "5348: command.h",
          "5349:  - W_EXPANDRHS: new flag, set when expanding WORD in ${paramOPword}",
          "5351: subst.c",
          "5352:  - expand_string_for_rhs: set W_EXPANDRHS in word to be expanded",
          "5354: subst.c",
          "5355:  - expand_word_internal: when encountering a single or double quoted",
          "5356:    string that expands to nothing, add a CTLNUL if the W_EXPANDRHS",
          "5357:    flag is set and the word isn't quoted, indicating that the word",
          "5358:    will eventually be split and we need to preserve the null to",
          "5359:    produce an empty word. From a discussion on bug-bash started by",
          "5360:    sunnycemetery@gmail.com",
          "",
          "---------------"
        ],
        "bashhist.c||bashhist.c": [
          "File: bashhist.c -> bashhist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:   if (!history_expansion_inhibited && history_expansion && history_expansion_p (line))",
          "562:     {",
          "564:   command, decrease history_length so references to history expansions",
          "565:   in these lines refer to the previous history entry and not the",
          "567:       if (history_length > 0 && command_oriented_history && current_command_first_line_saved && current_command_line_count > 1)",
          "568:         history_length--;",
          "569:       expanded = history_expand (line, &history_value);",
          "570:       if (history_length >= 0 && command_oriented_history && current_command_first_line_saved && current_command_line_count > 1)",
          "573:       if (expanded)",
          "574:  {",
          "",
          "[Removed Lines]",
          "571:         history_length++;",
          "",
          "[Added Lines]",
          "563:       int old_len;",
          "569:       old_len = history_length;",
          "574:         history_length = old_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "908:  }",
          "909:     }",
          "911:   if (add_it)",
          "912:     really_add_history (line);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "914:   if (add_it && history_is_stifled() && history_length == 0 && history_length == history_max_entries)",
          "915:     add_it = 0;",
          "",
          "---------------"
        ],
        "builtins/cd.def||builtins/cd.def": [
          "File: builtins/cd.def -> builtins/cd.def",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: #undef tcwd",
          "152:   if (dirname == 0)",
          "153:     {",
          "154:       canon_failed = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:   canon_failed = 0;",
          "",
          "---------------"
        ],
        "command.h||command.h": [
          "File: command.h -> command.h"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #   You should have received a copy of the GNU General Public License",
          "22: #   along with this program.  If not, see <http://www.gnu.org/licenses/>.",
          "26: define(bashvers, 5.0)",
          "27: define(relstatus, maint)",
          "",
          "[Removed Lines]",
          "24: AC_REVISION([for Bash 5.0, version 5.007])dnl",
          "",
          "[Added Lines]",
          "24: AC_REVISION([for Bash 5.0, version 5.008])dnl",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "712: m4_include([m4/po.m4])",
          "713: m4_include([m4/printf-posix.m4])",
          "714: m4_include([m4/progtest.m4])",
          "715: m4_include([m4/size_max.m4])",
          "716: m4_include([m4/stdint_h.m4])",
          "717: m4_include([m4/threadlib.m4])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "715: m4_include([m4/pthread_rwlock_rdlock.m4])",
          "",
          "---------------"
        ],
        "jobs.c||jobs.c": [
          "File: jobs.c -> jobs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4844:   if (original_pgrp >= 0 && terminal_pgrp != original_pgrp)",
          "4845:     give_terminal_to (original_pgrp, 1);",
          "4849: }",
          "",
          "[Removed Lines]",
          "4847:   if (original_pgrp >= 0)",
          "4848:     setpgid (0, original_pgrp);",
          "",
          "[Added Lines]",
          "4847:   if (original_pgrp >= 0 && setpgid (0, original_pgrp) == 0)",
          "4848:     shell_pgrp = original_pgrp;",
          "",
          "---------------"
        ],
        "m4/pthread_rwlock_rdlock.m4||m4/pthread_rwlock_rdlock.m4": [
          "File: m4/pthread_rwlock_rdlock.m4 -> m4/pthread_rwlock_rdlock.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # pthread_rwlock_rdlock.m4 serial 2",
          "2: dnl Copyright (C) 2017-2019 Free Software Foundation, Inc.",
          "3: dnl This file is free software; the Free Software Foundation",
          "4: dnl gives unlimited permission to copy and/or distribute it,",
          "5: dnl with or without modifications, as long as this notice is preserved.",
          "7: dnl From Bruno Haible.",
          "8: dnl Inspired by",
          "9: dnl https://github.com/linux-test-project/ltp/blob/master/testcases/open_posix_testsuite/conformance/interfaces/pthread_rwlock_rdlock/2-2.c",
          "10: dnl by Intel Corporation.",
          "12: dnl Test whether in a situation where",
          "13: dnl   - an rwlock is taken by a reader and has a writer waiting,",
          "14: dnl   - an additional reader requests the lock,",
          "15: dnl   - the waiting writer and the requesting reader threads have the same",
          "16: dnl     priority,",
          "17: dnl the requesting reader thread gets blocked, so that at some point the",
          "18: dnl waiting writer can acquire the lock.",
          "19: dnl Without such a guarantee, when there a N readers and each of the readers",
          "20: dnl spends more than 1/Nth of the time with the lock held, there is a high",
          "21: dnl probability that the waiting writer will not get the lock in a given finite",
          "22: dnl time, a phenomenon called \"writer starvation\".",
          "23: dnl Without such a guarantee, applications have a hard time avoiding writer",
          "24: dnl starvation.",
          "25: dnl",
          "26: dnl POSIX:2017 makes this requirement only for implementations that support TPS",
          "27: dnl (Thread Priority Scheduling) and only for the scheduling policies SCHED_FIFO",
          "28: dnl and SCHED_RR, see",
          "29: dnl http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_rwlock_rdlock.html",
          "30: dnl but this test verifies the guarantee regardless of TPS and regardless of",
          "31: dnl scheduling policy.",
          "32: dnl Glibc currently does not provide this guarantee, see",
          "33: dnl https://sourceware.org/bugzilla/show_bug.cgi?id=13701",
          "34: AC_DEFUN([gl_PTHREAD_RWLOCK_RDLOCK_PREFER_WRITER],",
          "35: [",
          "36:   AC_REQUIRE([gl_THREADLIB_EARLY])",
          "37:   AC_CACHE_CHECK([whether pthread_rwlock_rdlock prefers a writer to a reader],",
          "38:     [gl_cv_pthread_rwlock_rdlock_prefer_writer],",
          "39:     [save_LIBS=\"$LIBS\"",
          "40:      LIBS=\"$LIBS $LIBMULTITHREAD\"",
          "41:      AC_RUN_IFELSE(",
          "42:        [AC_LANG_SOURCE([[",
          "43: #include <errno.h>",
          "44: #include <pthread.h>",
          "45: #include <stdlib.h>",
          "46: #include <unistd.h>",
          "48: #define SUCCEED() exit (0)",
          "49: #define FAILURE() exit (1)",
          "50: #define UNEXPECTED(n) (exit (10 + (n)))",
          "53:    in the default way; this guarantees that they have the same priority.",
          "56: static pthread_rwlock_t lock;",
          "57: static pthread_t reader1;",
          "58: static pthread_t writer;",
          "59: static pthread_t reader2;",
          "60: static pthread_t timer;",
          "62:    as in a relay race.",
          "63:    Passing control from one running thread to another running thread",
          "65: static pthread_mutex_t baton;",
          "67: static void *",
          "68: timer_func (void *ignored)",
          "69: {",
          "71:      The timer thread takes the baton, then waits a moment to make sure",
          "73:   if (pthread_mutex_lock (&baton))",
          "74:     UNEXPECTED (13);",
          "75:   usleep (100000);",
          "78:   SUCCEED ();",
          "79: }",
          "81: static void *",
          "82: reader2_func (void *ignored)",
          "83: {",
          "84:   int err;",
          "87:      The second reader thread takes the baton, then waits a moment to make sure",
          "89:   if (pthread_mutex_lock (&baton))",
          "90:     UNEXPECTED (8);",
          "91:   usleep (100000);",
          "93:   err = pthread_rwlock_tryrdlock (&lock);",
          "94:   if (err == 0)",
          "95:     FAILURE ();",
          "96:   else if (err != EBUSY)",
          "97:     UNEXPECTED (9);",
          "99:   if (pthread_create (&timer, NULL, timer_func, NULL))",
          "100:     UNEXPECTED (10);",
          "102:   if (pthread_mutex_unlock (&baton))",
          "103:     UNEXPECTED (11);",
          "105:   err = pthread_rwlock_rdlock (&lock);",
          "106:   if (err == 0)",
          "107:     FAILURE ();",
          "108:   else",
          "109:     UNEXPECTED (12);",
          "110: }",
          "112: static void *",
          "113: writer_func (void *ignored)",
          "114: {",
          "117:   if (pthread_mutex_lock (&baton))",
          "118:     UNEXPECTED (4);",
          "120:   if (pthread_create (&reader2, NULL, reader2_func, NULL))",
          "121:     UNEXPECTED (5);",
          "123:   if (pthread_mutex_unlock (&baton))",
          "124:     UNEXPECTED (6);",
          "126:   if (pthread_rwlock_wrlock (&lock))",
          "127:     UNEXPECTED (7);",
          "128:   return NULL;",
          "129: }",
          "131: int",
          "132: main ()",
          "133: {",
          "134:   reader1 = pthread_self ();",
          "137:   if (pthread_rwlock_init (&lock, NULL))",
          "138:     UNEXPECTED (1);",
          "139:   if (pthread_mutex_init (&baton, NULL))",
          "140:     UNEXPECTED (1);",
          "142:   if (pthread_rwlock_rdlock (&lock))",
          "143:     UNEXPECTED (2);",
          "145:   if (pthread_create (&writer, NULL, writer_func, NULL))",
          "146:     UNEXPECTED (3);",
          "148:   for (;;)",
          "149:     {",
          "150:       sleep (1);",
          "151:     }",
          "152: }",
          "153: ]])],",
          "154:        [gl_cv_pthread_rwlock_rdlock_prefer_writer=yes],",
          "155:        [gl_cv_pthread_rwlock_rdlock_prefer_writer=no],",
          "156:        [gl_cv_pthread_rwlock_rdlock_prefer_writer=\"guessing yes\"])",
          "157:      LIBS=\"$save_LIBS\"",
          "158:     ])",
          "159:   case \"$gl_cv_pthread_rwlock_rdlock_prefer_writer\" in",
          "161:       AC_DEFINE([HAVE_PTHREAD_RWLOCK_RDLOCK_PREFER_WRITER], [1],",
          "162:         [Define if the 'pthread_rwlock_rdlock' function prefers a writer to a reader.])",
          "163:       ;;",
          "164:   esac",
          "165: ])",
          "",
          "---------------"
        ],
        "subst.c||subst.c": [
          "File: subst.c -> subst.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "428:       f &= ~W_COMPASSIGN;",
          "429:       fprintf (stderr, \"W_COMPASSIGN%s\", f ? \"|\" : \"\");",
          "430:     }",
          "432:     {",
          "435:     }",
          "436:   if (f & W_ITILDE)",
          "437:     {",
          "",
          "[Removed Lines]",
          "431:   if (f & W_NOEXPAND)",
          "433:       f &= ~W_NOEXPAND;",
          "434:       fprintf (stderr, \"W_NOEXPAND%s\", f ? \"|\" : \"\");",
          "",
          "[Added Lines]",
          "431:   if (f & W_EXPANDRHS)",
          "433:       f &= ~W_EXPANDRHS;",
          "434:       fprintf (stderr, \"W_EXPANDRHS%s\", f ? \"|\" : \"\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10296:       this is when we are going to be performing word splitting,",
          "10297:       since we have to preserve a null argument if the next character",
          "10299:    if (temp == 0 && quoted_state == PARTIALLY_QUOTED && (word->flags & (W_NOSPLIT|W_NOSPLIT2)))",
          "10300:      continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10300:    if (temp == 0 && quoted_state == PARTIALLY_QUOTED && quoted == 0 && (word->flags & W_NOSPLIT) == 0 && (word->flags & W_EXPANDRHS))",
          "10301:      {",
          "10302:        c = CTLNUL;",
          "10303:        sindex--;",
          "10304:        had_quoted_null = 1;",
          "10305:        goto add_character;",
          "10306:      }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10348:       partially quoted; such nulls are discarded.  See above for the",
          "10349:       exception, which is when the string is going to be split.",
          "10351:    if (temp == 0 && (quoted_state == PARTIALLY_QUOTED) && (word->flags & (W_NOSPLIT|W_NOSPLIT2)))",
          "10352:      continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10359:    if (temp == 0 && quoted_state == PARTIALLY_QUOTED && quoted == 0 && (word->flags & W_NOSPLIT) == 0 && (word->flags & W_EXPANDRHS))",
          "10360:      {",
          "10361:        c = CTLNUL;",
          "10362:        sindex--;",
          "10363:        goto add_character;",
          "10364:      }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10479:       if (word->flags & W_NOBRACE)",
          "10483:       if (quoted & (Q_HERE_DOCUMENT|Q_DOUBLE_QUOTES))",
          "10484:  tword->flags |= W_QUOTED;",
          "10485:       list = make_word_list (tword, (WORD_LIST *)NULL);",
          "",
          "[Removed Lines]",
          "10481:       if (word->flags & W_NOEXPAND)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "10577:      tword->flags |= W_NOGLOB;",
          "10578:    if (word->flags & W_NOBRACE)",
          "10579:      tword->flags |= W_NOBRACE;",
          "10582:    list = make_word_list (tword, (WORD_LIST *)NULL);",
          "10583:  }",
          "10584:     }",
          "",
          "[Removed Lines]",
          "10580:    if (word->flags & W_NOEXPAND)",
          "10581:      tword->flags |= W_NOEXPAND;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/dollar.right||tests/dollar.right": [
          "File: tests/dollar.right -> tests/dollar.right",
          "--- Hunk 1 ---",
          "[Context before]",
          "226: null string with unquoted $@",
          "227: argv[1] = <>",
          "228: null string with quoted $@",
          "229: assignment",
          "230: argv[1] = <>",
          "231: variable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: argv[1] = <>",
          "",
          "---------------"
        ],
        "tests/quote.right||tests/quote.right": [
          "File: tests/quote.right -> tests/quote.right",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: argv[1] = <>",
          "95: argv[1] = <>",
          "96: argv[1] = <>",
          "97: argv[1] = <>",
          "98: argv[1] = <>",
          "99: =====",
          "100: argv[1] = <>",
          "101: argv[1] = <>",
          "102: argv[1] = <>",
          "103: argv[1] = <>",
          "104: argv[1] = <>",
          "105: argv[1] = <>",
          "106: argv[1] = <>",
          "107: =====",
          "108: argv[1] = <>",
          "109: argv[1] = <>",
          "110: argv[1] = <>",
          "111: argv[1] = <>",
          "112: argv[1] = <>",
          "113: argv[1] = <>",
          "114: argv[1] = <>",
          "115: =====",
          "116: argv[1] = <>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: argv[2] = <>",
          "99: argv[2] = <>",
          "106: argv[2] = <>",
          "110: argv[2] = <>",
          "117: argv[2] = <>",
          "119: argv[2] = <>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118: argv[1] = <>",
          "119: argv[1] = <>",
          "120: argv[1] = <>",
          "121: argv[1] = <>",
          "122: argv[1] = <>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: argv[2] = <>",
          "129: argv[2] = <>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9282e182d874a98a25a35cb7b1682b6e45e5af50",
      "candidate_info": {
        "commit_hash": "9282e182d874a98a25a35cb7b1682b6e45e5af50",
        "repo": "bminor/bash",
        "commit_url": "https://github.com/bminor/bash/commit/9282e182d874a98a25a35cb7b1682b6e45e5af50",
        "files": [
          "CHANGES",
          "CHANGES-5.0",
          "CWRU/CWRU.chlog",
          "builtins/exec.def",
          "configure",
          "configure.ac",
          "execute_cmd.c",
          "expr.c",
          "jobs.c",
          "jobs.h",
          "lib/readline/histexpand.c",
          "lib/readline/undo.c",
          "tests/RUN-ONE-TEST",
          "tests/glob.tests",
          "tests/histexp.right",
          "tests/histexp6.sub",
          "tests/procsub.tests",
          "tests/run-glob-test",
          "tests/run-nquote4"
        ],
        "message": "commit bash-20180914 snapshot",
        "before_after_code_files": [
          "CHANGES-5.0||CHANGES-5.0",
          "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
          "builtins/exec.def||builtins/exec.def",
          "configure.ac||configure.ac",
          "execute_cmd.c||execute_cmd.c",
          "expr.c||expr.c",
          "jobs.c||jobs.c",
          "jobs.h||jobs.h",
          "lib/readline/histexpand.c||lib/readline/histexpand.c",
          "lib/readline/undo.c||lib/readline/undo.c",
          "tests/glob.tests||tests/glob.tests",
          "tests/histexp.right||tests/histexp.right",
          "tests/histexp6.sub||tests/histexp6.sub",
          "tests/procsub.tests||tests/procsub.tests"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "configure.ac||configure.ac",
            "tests/glob.tests||tests/glob.tests"
          ],
          "candidate": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "configure.ac||configure.ac",
            "tests/glob.tests||tests/glob.tests"
          ]
        }
      },
      "candidate_diff": {
        "CHANGES-5.0||CHANGES-5.0": [
          "File: CHANGES-5.0 -> CHANGES-5.0",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:    handle multibyte characters.",
          "81: f. Fixed a redisplay problem that caused an extra newline to be generated on",
          "84: 3.  New Features in Bash",
          "",
          "[Removed Lines]",
          "82:    accept-line when the line is exactly the screenwidth.",
          "",
          "[Added Lines]",
          "82:    accept-line when the line length is exactly the screenwidth.",
          "",
          "---------------"
        ],
        "CWRU/CWRU.chlog||CWRU/CWRU.chlog": [
          "File: CWRU/CWRU.chlog -> CWRU/CWRU.chlog",
          "--- Hunk 1 ---",
          "[Context before]",
          "4303:  - openbsd needs DEV_FD_STAT_BROKEN defined",
          "4305: [bash-5.0-beta frozen]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4307:        9/11",
          "4308:        ----",
          "4309: builtins/exec.def",
          "4310:  - exec_builtin: make sure to sync the buffered stream where bash is",
          "4311:    reading input (especially if it's fd 0) so a command exec'd by the",
          "4312:    script can read the rest of stdin after the exec",
          "4314:        9/15",
          "4315:        ----",
          "4316: lib/readline/histexpand.c",
          "4317:  - history_tokenize_internal: if the event contains embedded newlines",
          "4318:    (e.g., bash with command-oriented history and lithist), use them as",
          "4319:    word delimiters, equivalent to space and tab, so they don't end up",
          "4320:    as separate words. Fixes issue pointed out by Viktor Dukhovni",
          "4321:    <ietf-dane@dukhovni.org>",
          "4322:  - history_tokenize_word: don't break if we get a newline (though we",
          "4323:    shouldn't get one due to the loop in history_tokenize_internal",
          "4324:  - history_expand_internal: use newline as a whitespace character when",
          "4325:    expanding by words, as we do with history_tokenize_internal",
          "4327: jobs.h",
          "4328:  - J_PIPEFAIL: new flag for `flags' element of job struct",
          "4330: jobs.c",
          "4331:  - stop_pipeline: if pipefail_opt set, newjob gets J_PIPEFAIL in its",
          "4332:    flags word",
          "4333:  - raw_job_exit_status: use J_PIPEFAIL (setting of pipefail when job",
          "4334:    created) instead of current setting of pipefail status to determine",
          "4335:    how to compute exit status of pipeline. Tentative implementation of",
          "4336:    Posix proposal",
          "4338: expr.c",
          "4339:  - exp0: don't call expr_bind_variable with a NULL string.  Fixes",
          "4340:    fuzzing bug reported by Eduardo Bustamante <dualbus@gmail.com>",
          "4341:  - expr_bind_variable: don't try to do anything with a NULL or empty",
          "4342:    LHS",
          "4344:        9/16",
          "4345:        ----",
          "4346: lib/readline/undo.c",
          "4347:  - rl_do_undo: before we release the undo list entry we've just",
          "4348:    processed, make sure we avoid any pointer aliasing issues caused",
          "4349:    by having the entry being removed as part of the undo list in",
          "4350:    _rl_saved_line_for_history. Fixes fuzzing bug reported by",
          "4351:    Eduardo Bustamante <dualbus@gmail.com>",
          "",
          "---------------"
        ],
        "builtins/exec.def||builtins/exec.def": [
          "File: builtins/exec.def -> builtins/exec.def",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: #endif",
          "69: #include \"common.h\"",
          "70: #include \"bashgetopt.h\"",
          "73: #if !defined (errno)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: #include \"input.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:   exit_value = shell_execve (command, args, env);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225: #if defined (BUFFERED_INPUT)",
          "226:   if (default_buffered_input >= 0)",
          "227:     sync_buffered_stream (default_buffered_input);",
          "228: #endif",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #   You should have received a copy of the GNU General Public License",
          "22: #   along with this program.  If not, see <http://www.gnu.org/licenses/>.",
          "26: define(bashvers, 5.0)",
          "27: define(relstatus, beta)",
          "",
          "[Removed Lines]",
          "24: AC_REVISION([for Bash 5.0, version 5.002])dnl",
          "",
          "[Added Lines]",
          "24: AC_REVISION([for Bash 5.0, version 5.003])dnl",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1116:   1.*|2.[[0123]]*) : ;;",
          "1118:   esac ;;",
          "1122: powerux*) LOCAL_LIBS=\"-lgen\" ;;",
          "",
          "[Removed Lines]",
          "1119: openbsd*) LOCAL_CFLAGS=\"-DDEV_FD_STAT_BROKEN\" ;;",
          "",
          "[Added Lines]",
          "1119: netbsd*|openbsd*) LOCAL_CFLAGS=\"-DDEV_FD_STAT_BROKEN\" ;;",
          "",
          "---------------"
        ],
        "execute_cmd.c||execute_cmd.c": [
          "File: execute_cmd.c -> execute_cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "748:   reap_procsubs ();",
          "749: #  endif",
          "752:     {",
          "753:       ofifo = num_fifos ();",
          "754:       ofifo_list = copy_fifo_list ((int *)&osize);",
          "",
          "[Removed Lines]",
          "751:   if (variable_context != 0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "expr.c||expr.c": [
          "File: expr.c -> expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:   SHELL_VAR *v;",
          "326:   int aflags;",
          "328: #if defined (ARRAY_VARS)",
          "329:   aflags = (assoc_expand_once && already_expanded) ? ASS_NOEXPAND : 0;",
          "330: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:   if (lhs == 0 || *lhs == 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1012:      expr_bind_array_element (curlval.tokstr, curlval.ind, vincdec);",
          "1013:    else",
          "1014: #endif",
          "1016:  }",
          "1017:       free (vincdec);",
          "1018:       val = v2;",
          "",
          "[Removed Lines]",
          "1015:      expr_bind_variable (tokstr, vincdec);",
          "",
          "[Added Lines]",
          "1018:      if (tokstr)",
          "1019:        expr_bind_variable (tokstr, vincdec);",
          "",
          "---------------"
        ],
        "jobs.c||jobs.c": [
          "File: jobs.c -> jobs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "630:       pipeline_pgrp = 0;",
          "632:       newjob->flags = 0;",
          "635:       if (job_control)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "633:       if (pipefail_opt)",
          "634:  newjob->flags |= J_PIPEFAIL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2639:   int fail;",
          "2640:   WAIT ret;",
          "2642:   if (pipefail_opt)",
          "2643:     {",
          "2644:       fail = 0;",
          "2645:       p = jobs[job]->pipe;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2644: #if 0",
          "2646: #else",
          "2647:   if (jobs[job]->flags & J_PIPEFAIL)",
          "2648: #endif",
          "",
          "---------------"
        ],
        "jobs.h||jobs.h": [
          "File: jobs.h -> jobs.h"
        ],
        "lib/readline/histexpand.c||lib/readline/histexpand.c": [
          "File: lib/readline/histexpand.c -> lib/readline/histexpand.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define slashify_in_quotes \"\\\\`\\\"$\"",
          "58: typedef int _hist_search_func_t PARAMS((const char *, int));",
          "60: static char error_pointer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: #define fielddelim(c) (whitespace(c) || (c) == '\\n')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "770:   if (subst_bywords && si > we)",
          "771:     {",
          "773:         ;",
          "774:       ws = si;",
          "775:       we = history_tokenize_word (temp, si);",
          "",
          "[Removed Lines]",
          "772:       for (; temp[si] && whitespace (temp[si]); si++)",
          "",
          "[Added Lines]",
          "774:       for (; temp[si] && fielddelim (temp[si]); si++)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1446:   i = ind;",
          "1447:   delimiter = nestdelim = 0;",
          "1450:     {",
          "1451:       i++;",
          "1452:       return i;",
          "",
          "[Removed Lines]",
          "1449:   if (member (string[i], \"()\\n\"))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1604:   for (i = result_index = size = 0, result = (char **)NULL; string[i]; )",
          "1605:     {",
          "1608:  ;",
          "1609:       if (string[i] == 0 || string[i] == history_comment_char)",
          "1610:  return (result);",
          "",
          "[Removed Lines]",
          "1607:       for (; string[i] && whitespace (string[i]); i++)",
          "",
          "[Added Lines]",
          "1609:       for (; string[i] && fielddelim (string[i]); i++)",
          "",
          "---------------"
        ],
        "lib/readline/undo.c||lib/readline/undo.c": [
          "File: lib/readline/undo.c -> lib/readline/undo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: extern void _hs_replace_history_data PARAMS((int, histdata_t *, histdata_t *));",
          "56: int _rl_doing_an_undo = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: extern HIST_ENTRY *_rl_saved_line_for_history;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166: int",
          "167: rl_do_undo (void)",
          "168: {",
          "170:   int waiting_for_begin, start, end;",
          "171:   HIST_ENTRY *cur, *temp;",
          "",
          "[Removed Lines]",
          "169:   UNDO_LIST *release;",
          "",
          "[Added Lines]",
          "171:   UNDO_LIST *release, *search;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:    xfree (temp);",
          "236:  }",
          "238:       _hs_replace_history_data (-1, (histdata_t *)release, (histdata_t *)rl_undo_list);",
          "240:       xfree (release);",
          "241:     }",
          "242:   while (waiting_for_begin);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:       if (_rl_saved_line_for_history && _rl_saved_line_for_history->data)",
          "246:  {",
          "248:    search = (UNDO_LIST *)_rl_saved_line_for_history->data;",
          "249:    if (search == release)",
          "250:      _rl_saved_line_for_history->data = rl_undo_list;",
          "251:    else",
          "252:      {",
          "253:        while (search->next)",
          "254:   {",
          "255:     if (search->next == release)",
          "256:       {",
          "257:         search->next = rl_undo_list;",
          "258:         break;",
          "259:       }",
          "260:     search = search->next;",
          "261:   }",
          "262:      }",
          "263:  }",
          "",
          "---------------"
        ],
        "tests/glob.tests||tests/glob.tests": [
          "File: tests/glob.tests -> tests/glob.tests",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #",
          "5: expect()",
          "6: {",
          "8: }",
          "10: # First, a test that bash-2.01.1 fails",
          "",
          "[Removed Lines]",
          "7:  echo expect \"$@\"",
          "",
          "[Added Lines]",
          "7: : # if needed, change me to echo expect \"$@\"",
          "",
          "---------------"
        ],
        "tests/histexp.right||tests/histexp.right": [
          "File: tests/histexp.right -> tests/histexp.right",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:     1  set -o histexpand",
          "232:     2  echo one",
          "233:     3  for f in a b c; do  echo echo one; done",
          "234: two",
          "235:  echo echo two",
          "236: echo two",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:     4  history",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238: echo two",
          "239:     1  echo two",
          "240:     2  for f in a b c; do  echo echo two; done",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     3  history",
          "",
          "---------------"
        ],
        "tests/histexp6.sub||tests/histexp6.sub": [
          "File: tests/histexp6.sub -> tests/histexp6.sub",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: HISTFILE=$TMPDIR/bashhist-$$",
          "3: set -o history",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: unset HISTIGNORE",
          "",
          "---------------"
        ],
        "tests/procsub.tests||tests/procsub.tests": [
          "File: tests/procsub.tests -> tests/procsub.tests",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: count_lines()",
          "69: {",
          "70:     wc -l < $1",
          "71:     wc -l < $1",
          "72:     wc -l < $1",
          "73:     true | wc -l < $1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: #    case \"$1\" in",
          "73: #    *sh-np*) [ -e \"$1\" ] || { echo 0; echo 0; echo 0; echo 0; return; } ;;",
          "74: #    *) ;;",
          "75: #    esac",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: echo extern",
          "82: FN=$TMPDIR/bashtest-$$",
          "89: EOF",
          "91: ${THIS_SH} -c \"source $FN <(date)\" | _cut_leading_spaces",
          "",
          "[Removed Lines]",
          "83: cat >$FN <<EOF",
          "84: wc -l < \\$1",
          "85: wc -l < \\$1",
          "86: wc -l < \\$1",
          "87: true | wc -l < \\$1",
          "88: wc -l < \\$1",
          "",
          "[Added Lines]",
          "89: cat >$FN << \\EOF",
          "90: wc -l < $1",
          "91: wc -l < $1",
          "92: wc -l < $1",
          "93: true | wc -l < $1",
          "94: wc -l < $1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e76c732799615a5c51c64605454aaf492ebdd83d",
      "candidate_info": {
        "commit_hash": "e76c732799615a5c51c64605454aaf492ebdd83d",
        "repo": "bminor/bash",
        "commit_url": "https://github.com/bminor/bash/commit/e76c732799615a5c51c64605454aaf492ebdd83d",
        "files": [
          "CHANGES",
          "CWRU/CWRU.chlog",
          "array.h",
          "config.h.in",
          "configure",
          "configure.ac",
          "doc/bash.1",
          "doc/bashref.texi",
          "examples/loadables/TODO",
          "general.h",
          "lib/readline/readline.h",
          "unwind_prot.c",
          "unwind_prot.h",
          "variables.c",
          "xmalloc.h"
        ],
        "message": "commit bash-20200518 snapshot",
        "before_after_code_files": [
          "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
          "array.h||array.h",
          "config.h.in||config.h.in",
          "configure.ac||configure.ac",
          "general.h||general.h",
          "lib/readline/readline.h||lib/readline/readline.h",
          "unwind_prot.c||unwind_prot.c",
          "unwind_prot.h||unwind_prot.h",
          "variables.c||variables.c",
          "xmalloc.h||xmalloc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "config.h.in||config.h.in",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "config.h.in||config.h.in",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "CWRU/CWRU.chlog||CWRU/CWRU.chlog": [
          "File: CWRU/CWRU.chlog -> CWRU/CWRU.chlog",
          "--- Hunk 1 ---",
          "[Context before]",
          "8360:  - test_command: if there are unconsumed arguments, call test_syntax_error",
          "8361:    with a `syntax error' argument if the first remaining argument starts",
          "8362:    with a `-'. Better than a generic `too many arguments' error",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8364:        5/19",
          "8365:        ----",
          "8366: configure.ac,config.h.in",
          "8367:  - getrandom: add test, define HAVE_GETRANDOM",
          "8368:  - getentropy: add test, define HAVE_GETENTROPY",
          "8370: variables.c",
          "8371:  - get_urand32: use getrandom; provide imperfect emulation that uses",
          "8372:    getentropy if available, and falls back to reading /dev/urandom if",
          "8373:    that's not available. The idea is to use /dev/urandom as little as",
          "8374:    possible",
          "8376:        5/20",
          "8377:        ----",
          "8378: configure.ac",
          "8379:  - updated version to 5.1-alpha",
          "8381: lib/readline/readline.h",
          "8382:  - updated defines to readline version 8.1",
          "",
          "---------------"
        ],
        "array.h||array.h": [
          "File: array.h -> array.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:  struct array_element *next, *prev;",
          "44: } ARRAY_ELEMENT;",
          "95: #define AS_DISPOSE 0x01",
          "",
          "[Removed Lines]",
          "46: typedef int sh_ae_map_func_t PARAMS((ARRAY_ELEMENT *, void *));",
          "49: extern ARRAY *array_create PARAMS((void));",
          "50: extern void array_flush PARAMS((ARRAY *));",
          "51: extern void array_dispose PARAMS((ARRAY *));",
          "52: extern ARRAY *array_copy PARAMS((ARRAY *));",
          "53: extern ARRAY *array_slice PARAMS((ARRAY *, ARRAY_ELEMENT *, ARRAY_ELEMENT *));",
          "54: extern void array_walk PARAMS((ARRAY   *, sh_ae_map_func_t *, void *));",
          "56: extern ARRAY_ELEMENT *array_shift PARAMS((ARRAY *, int, int));",
          "57: extern int array_rshift PARAMS((ARRAY *, int, char *));",
          "58: extern ARRAY_ELEMENT *array_unshift_element PARAMS((ARRAY *));",
          "59: extern int array_shift_element PARAMS((ARRAY *, char *));",
          "61: extern ARRAY *array_quote PARAMS((ARRAY *));",
          "62: extern ARRAY *array_quote_escapes PARAMS((ARRAY *));",
          "63: extern ARRAY *array_dequote PARAMS((ARRAY *));",
          "64: extern ARRAY *array_dequote_escapes PARAMS((ARRAY *));",
          "65: extern ARRAY *array_remove_quoted_nulls PARAMS((ARRAY *));",
          "67: extern char *array_subrange PARAMS((ARRAY *, arrayind_t, arrayind_t, int, int, int));",
          "68: extern char *array_patsub PARAMS((ARRAY *, char *, char *, int));",
          "69: extern char *array_modcase PARAMS((ARRAY *, char *, int, int));",
          "72: extern ARRAY_ELEMENT *array_create_element PARAMS((arrayind_t, char *));",
          "73: extern ARRAY_ELEMENT *array_copy_element PARAMS((ARRAY_ELEMENT *));",
          "74: extern void array_dispose_element PARAMS((ARRAY_ELEMENT *));",
          "76: extern int array_insert PARAMS((ARRAY *, arrayind_t, char *));",
          "77: extern ARRAY_ELEMENT *array_remove PARAMS((ARRAY *, arrayind_t));",
          "78: extern char *array_reference PARAMS((ARRAY *, arrayind_t));",
          "81: extern WORD_LIST *array_to_word_list PARAMS((ARRAY *));",
          "82: extern ARRAY *array_from_word_list PARAMS((WORD_LIST *));",
          "83: extern WORD_LIST *array_keys_to_word_list PARAMS((ARRAY *));",
          "85: extern ARRAY *array_assign_list PARAMS((ARRAY *, WORD_LIST *));",
          "87: extern char **array_to_argv PARAMS((ARRAY *));",
          "89: extern char *array_to_kvpair PARAMS((ARRAY *, int));",
          "90: extern char *array_to_assign PARAMS((ARRAY *, int));",
          "91: extern char *array_to_string PARAMS((ARRAY *, char *, int));",
          "92: extern ARRAY *array_from_string PARAMS((char *, char *));",
          "",
          "[Added Lines]",
          "46: typedef int sh_ae_map_func_t __P((ARRAY_ELEMENT *, void *));",
          "49: extern ARRAY *array_create __P((void));",
          "50: extern void array_flush __P((ARRAY *));",
          "51: extern void array_dispose __P((ARRAY *));",
          "52: extern ARRAY *array_copy __P((ARRAY *));",
          "53: extern ARRAY *array_slice __P((ARRAY *, ARRAY_ELEMENT *, ARRAY_ELEMENT *));",
          "54: extern void array_walk __P((ARRAY   *, sh_ae_map_func_t *, void *));",
          "56: extern ARRAY_ELEMENT *array_shift __P((ARRAY *, int, int));",
          "57: extern int array_rshift __P((ARRAY *, int, char *));",
          "58: extern ARRAY_ELEMENT *array_unshift_element __P((ARRAY *));",
          "59: extern int array_shift_element __P((ARRAY *, char *));",
          "61: extern ARRAY *array_quote __P((ARRAY *));",
          "62: extern ARRAY *array_quote_escapes __P((ARRAY *));",
          "63: extern ARRAY *array_dequote __P((ARRAY *));",
          "64: extern ARRAY *array_dequote_escapes __P((ARRAY *));",
          "65: extern ARRAY *array_remove_quoted_nulls __P((ARRAY *));",
          "67: extern char *array_subrange __P((ARRAY *, arrayind_t, arrayind_t, int, int, int));",
          "68: extern char *array_patsub __P((ARRAY *, char *, char *, int));",
          "69: extern char *array_modcase __P((ARRAY *, char *, int, int));",
          "72: extern ARRAY_ELEMENT *array_create_element __P((arrayind_t, char *));",
          "73: extern ARRAY_ELEMENT *array_copy_element __P((ARRAY_ELEMENT *));",
          "74: extern void array_dispose_element __P((ARRAY_ELEMENT *));",
          "76: extern int array_insert __P((ARRAY *, arrayind_t, char *));",
          "77: extern ARRAY_ELEMENT *array_remove __P((ARRAY *, arrayind_t));",
          "78: extern char *array_reference __P((ARRAY *, arrayind_t));",
          "81: extern WORD_LIST *array_to_word_list __P((ARRAY *));",
          "82: extern ARRAY *array_from_word_list __P((WORD_LIST *));",
          "83: extern WORD_LIST *array_keys_to_word_list __P((ARRAY *));",
          "85: extern ARRAY *array_assign_list __P((ARRAY *, WORD_LIST *));",
          "87: extern char **array_to_argv __P((ARRAY *));",
          "89: extern char *array_to_kvpair __P((ARRAY *, int));",
          "90: extern char *array_to_assign __P((ARRAY *, int));",
          "91: extern char *array_to_string __P((ARRAY *, char *, int));",
          "92: extern ARRAY *array_from_string __P((char *, char *));",
          "",
          "---------------"
        ],
        "config.h.in||config.h.in": [
          "File: config.h.in -> config.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "635: #undef HAVE_GETCWD",
          "638: #undef HAVE_GETDTABLESIZE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638: #undef HAVE_GETENTROPY",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "662: #undef HAVE_GETPWUID",
          "665: #undef HAVE_GETRLIMIT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "668: #undef HAVE_GETRANDOM",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1066: #undef HAVE_SYS_PTEM_H",
          "1069: #undef HAVE_SYS_RESOURCE_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1075: #undef HAVE_SYS_RANDOM_H",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: dnl",
          "3: dnl",
          "4: dnl report bugs to chet@po.cwru.edu",
          "5: dnl",
          "",
          "[Removed Lines]",
          "2: dnl Configure script for bash-5.0",
          "",
          "[Added Lines]",
          "2: dnl Configure script for bash-5.1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: #   You should have received a copy of the GNU General Public License",
          "22: #   along with this program.  If not, see <http://www.gnu.org/licenses/>.",
          "29: AC_INIT([bash], bashvers-relstatus, [bug-bash@gnu.org])",
          "",
          "[Removed Lines]",
          "24: AC_REVISION([for Bash 5.0, version 5.015])dnl",
          "26: define(bashvers, 5.0)",
          "27: define(relstatus, maint)",
          "",
          "[Added Lines]",
          "24: AC_REVISION([for Bash 5.1, version 5.017])dnl",
          "26: define(bashvers, 5.1)",
          "27: define(relstatus, alpha)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "753:    stdbool.h stddef.h stdint.h netdb.h pwd.h grp.h strings.h \\",
          "754:    regex.h syslog.h ulimit.h)",
          "755: AC_CHECK_HEADERS(sys/pte.h sys/stream.h sys/select.h sys/file.h sys/ioctl.h \\",
          "757:    sys/time.h sys/times.h sys/types.h sys/wait.h)",
          "758: AC_CHECK_HEADERS(netinet/in.h arpa/inet.h)",
          "",
          "[Removed Lines]",
          "756:    sys/mman.h sys/param.h sys/socket.h sys/stat.h \\",
          "",
          "[Added Lines]",
          "756:    sys/mman.h sys/param.h sys/random.h sys/socket.h sys/stat.h \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "819: AC_CHECK_FUNC(mkfifo,AC_DEFINE(HAVE_MKFIFO),AC_DEFINE(MKFIFO_MISSING))",
          "821: dnl checks for system calls",
          "826: AC_REPLACE_FUNCS(rename)",
          "828: dnl checks for c library functions",
          "",
          "[Removed Lines]",
          "822: AC_CHECK_FUNCS(dup2 eaccess fcntl getdtablesize getgroups gethostname \\",
          "823:   getpagesize getpeername getrlimit getrusage gettimeofday \\",
          "824:   kill killpg lstat pselect readlink select setdtablesize \\",
          "825:   setitimer tcgetpgrp uname ulimit waitpid)",
          "",
          "[Added Lines]",
          "822: AC_CHECK_FUNCS(dup2 eaccess fcntl getdtablesize getentropy getgroups \\",
          "823:   gethostname getpagesize getpeername getrandom getrlimit \\",
          "824:   getrusage gettimeofday kill killpg lstat pselect readlink \\",
          "825:   select setdtablesize setitimer tcgetpgrp uname ulimit waitpid)",
          "",
          "---------------"
        ],
        "general.h||general.h": [
          "File: general.h -> general.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: #endif",
          "64: #if !defined (strcpy) && (defined (HAVE_DECL_STRCPY) && !HAVE_DECL_STRCPY)",
          "66: #endif",
          "68: #if !defined (savestring)",
          "",
          "[Removed Lines]",
          "65: extern char *strcpy PARAMS((char *, const char *));",
          "",
          "[Added Lines]",
          "65: extern char *strcpy __P((char *, const char *));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "208: typedef int sh_intfunc_t PARAMS((int));",
          "209: typedef int sh_ivoidfunc_t PARAMS((void));",
          "210: typedef int sh_icpfunc_t PARAMS((char *));",
          "211: typedef int sh_icppfunc_t PARAMS((char **));",
          "212: typedef int sh_iptrfunc_t PARAMS((PTR_T));",
          "214: typedef void sh_voidfunc_t PARAMS((void));",
          "215: typedef void sh_vintfunc_t PARAMS((int));",
          "216: typedef void sh_vcpfunc_t PARAMS((char *));",
          "217: typedef void sh_vcppfunc_t PARAMS((char **));",
          "218: typedef void sh_vptrfunc_t PARAMS((PTR_T));",
          "220: typedef int sh_wdesc_func_t PARAMS((WORD_DESC *));",
          "221: typedef int sh_wlist_func_t PARAMS((WORD_LIST *));",
          "223: typedef int sh_glist_func_t PARAMS((GENERIC_LIST *));",
          "238: typedef int sh_assign_func_t PARAMS((const char *));",
          "239: typedef int sh_wassign_func_t PARAMS((WORD_DESC *, int));",
          "241: typedef int sh_load_func_t PARAMS((char *));",
          "242: typedef void sh_unload_func_t PARAMS((char *));",
          "",
          "[Added Lines]",
          "208: typedef int sh_intfunc_t __P((int));",
          "209: typedef int sh_ivoidfunc_t __P((void));",
          "210: typedef int sh_icpfunc_t __P((char *));",
          "211: typedef int sh_icppfunc_t __P((char **));",
          "212: typedef int sh_iptrfunc_t __P((PTR_T));",
          "214: typedef void sh_voidfunc_t __P((void));",
          "215: typedef void sh_vintfunc_t __P((int));",
          "216: typedef void sh_vcpfunc_t __P((char *));",
          "217: typedef void sh_vcppfunc_t __P((char **));",
          "218: typedef void sh_vptrfunc_t __P((PTR_T));",
          "220: typedef int sh_wdesc_func_t __P((WORD_DESC *));",
          "221: typedef int sh_wlist_func_t __P((WORD_LIST *));",
          "223: typedef int sh_glist_func_t __P((GENERIC_LIST *));",
          "238: typedef int sh_assign_func_t __P((const char *));",
          "239: typedef int sh_wassign_func_t __P((WORD_DESC *, int));",
          "241: typedef int sh_load_func_t __P((char *));",
          "242: typedef void sh_unload_func_t __P((char *));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "296: #if 0",
          "301: #endif",
          "312: #if defined (RLIMTYPE)",
          "315: #endif",
          "337: #ifdef _POSIXSTAT_H_",
          "339: #endif",
          "",
          "[Removed Lines]",
          "298: extern PTR_T xmalloc PARAMS((size_t));",
          "299: extern PTR_T xrealloc PARAMS((void *, size_t));",
          "300: extern void xfree PARAMS((void *));",
          "304: extern void posix_initialize PARAMS((int));",
          "306: extern int num_posix_options PARAMS((void));",
          "307: extern char *get_posix_options PARAMS((char *));",
          "308: extern void set_posix_options PARAMS((const char *));",
          "310: extern void save_posix_options PARAMS((void));",
          "313: extern RLIMTYPE string_to_rlimtype PARAMS((char *));",
          "314: extern void print_rlimtype PARAMS((RLIMTYPE, int));",
          "317: extern int all_digits PARAMS((const char *));",
          "318: extern int legal_number PARAMS((const char *, intmax_t *));",
          "319: extern int legal_identifier PARAMS((const char *));",
          "320: extern int importable_function_name PARAMS((const char *, size_t));",
          "321: extern int exportable_function_name PARAMS((const char *));",
          "322: extern int check_identifier PARAMS((WORD_DESC *, int));",
          "323: extern int valid_nameref_value PARAMS((const char *, int));",
          "324: extern int check_selfref PARAMS((const char *, char *, int));",
          "325: extern int legal_alias_name PARAMS((const char *, int));",
          "326: extern int line_isblank PARAMS((const char *));",
          "327: extern int assignment PARAMS((const char *, int));",
          "329: extern int sh_unset_nodelay_mode PARAMS((int));",
          "330: extern int sh_setclexec PARAMS((int));",
          "331: extern int sh_validfd PARAMS((int));",
          "332: extern int fd_ispipe PARAMS((int));",
          "333: extern void check_dev_tty PARAMS((void));",
          "334: extern int move_to_high_fd PARAMS((int, int, int));",
          "335: extern int check_binary_file PARAMS((const char *, int));",
          "338: extern int same_file PARAMS((const char *, const char *, struct stat *, struct stat *));",
          "341: extern int sh_openpipe PARAMS((int *));",
          "342: extern int sh_closepipe PARAMS((int *));",
          "344: extern int file_exists PARAMS((const char *));",
          "345: extern int file_isdir PARAMS((const char  *));",
          "346: extern int file_iswdir PARAMS((const char  *));",
          "347: extern int path_dot_or_dotdot PARAMS((const char *));",
          "348: extern int absolute_pathname PARAMS((const char *));",
          "349: extern int absolute_program PARAMS((const char *));",
          "351: extern char *make_absolute PARAMS((const char *, const char *));",
          "352: extern char *base_pathname PARAMS((char *));",
          "353: extern char *full_pathname PARAMS((char *));",
          "354: extern char *polite_directory_format PARAMS((char *));",
          "355: extern char *trim_pathname PARAMS((char *, int));",
          "356: extern char *printable_filename PARAMS((char *, int));",
          "358: extern char *extract_colon_unit PARAMS((char *, int *));",
          "360: extern void tilde_initialize PARAMS((void));",
          "361: extern char *bash_tilde_find_word PARAMS((const char *, int, int *));",
          "362: extern char *bash_tilde_expand PARAMS((const char *, int));",
          "364: extern int group_member PARAMS((gid_t));",
          "365: extern char **get_group_list PARAMS((int *));",
          "366: extern int *get_group_array PARAMS((int *));",
          "368: extern char *conf_standard_path PARAMS((void));",
          "369: extern int default_columns PARAMS((void));",
          "",
          "[Added Lines]",
          "298: extern PTR_T xmalloc __P((size_t));",
          "299: extern PTR_T xrealloc __P((void *, size_t));",
          "300: extern void xfree __P((void *));",
          "304: extern void posix_initialize __P((int));",
          "306: extern int num_posix_options __P((void));",
          "307: extern char *get_posix_options __P((char *));",
          "308: extern void set_posix_options __P((const char *));",
          "310: extern void save_posix_options __P((void));",
          "313: extern RLIMTYPE string_to_rlimtype __P((char *));",
          "314: extern void print_rlimtype __P((RLIMTYPE, int));",
          "317: extern int all_digits __P((const char *));",
          "318: extern int legal_number __P((const char *, intmax_t *));",
          "319: extern int legal_identifier __P((const char *));",
          "320: extern int importable_function_name __P((const char *, size_t));",
          "321: extern int exportable_function_name __P((const char *));",
          "322: extern int check_identifier __P((WORD_DESC *, int));",
          "323: extern int valid_nameref_value __P((const char *, int));",
          "324: extern int check_selfref __P((const char *, char *, int));",
          "325: extern int legal_alias_name __P((const char *, int));",
          "326: extern int line_isblank __P((const char *));",
          "327: extern int assignment __P((const char *, int));",
          "329: extern int sh_unset_nodelay_mode __P((int));",
          "330: extern int sh_setclexec __P((int));",
          "331: extern int sh_validfd __P((int));",
          "332: extern int fd_ispipe __P((int));",
          "333: extern void check_dev_tty __P((void));",
          "334: extern int move_to_high_fd __P((int, int, int));",
          "335: extern int check_binary_file __P((const char *, int));",
          "338: extern int same_file __P((const char *, const char *, struct stat *, struct stat *));",
          "341: extern int sh_openpipe __P((int *));",
          "342: extern int sh_closepipe __P((int *));",
          "344: extern int file_exists __P((const char *));",
          "345: extern int file_isdir __P((const char  *));",
          "346: extern int file_iswdir __P((const char  *));",
          "347: extern int path_dot_or_dotdot __P((const char *));",
          "348: extern int absolute_pathname __P((const char *));",
          "349: extern int absolute_program __P((const char *));",
          "351: extern char *make_absolute __P((const char *, const char *));",
          "352: extern char *base_pathname __P((char *));",
          "353: extern char *full_pathname __P((char *));",
          "354: extern char *polite_directory_format __P((char *));",
          "355: extern char *trim_pathname __P((char *, int));",
          "356: extern char *printable_filename __P((char *, int));",
          "358: extern char *extract_colon_unit __P((char *, int *));",
          "360: extern void tilde_initialize __P((void));",
          "361: extern char *bash_tilde_find_word __P((const char *, int, int *));",
          "362: extern char *bash_tilde_expand __P((const char *, int));",
          "364: extern int group_member __P((gid_t));",
          "365: extern char **get_group_list __P((int *));",
          "366: extern int *get_group_array __P((int *));",
          "368: extern char *conf_standard_path __P((void));",
          "369: extern int default_columns __P((void));",
          "",
          "---------------"
        ],
        "lib/readline/readline.h||lib/readline/readline.h": [
          "File: lib/readline/readline.h -> lib/readline/readline.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #endif",
          "43: #define RL_VERSION_MAJOR 8",
          "",
          "[Removed Lines]",
          "44: #define RL_VERSION_MINOR 0",
          "",
          "[Added Lines]",
          "44: #define RL_VERSION_MINOR 1",
          "",
          "---------------"
        ],
        "unwind_prot.c||unwind_prot.c": [
          "File: unwind_prot.c -> unwind_prot.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:   } sv;",
          "77: } UNWIND_ELT;",
          "89: static UNWIND_ELT *unwind_protect_list = (UNWIND_ELT *)NULL;",
          "",
          "[Removed Lines]",
          "79: static void without_interrupts PARAMS((VFunction *, char *, char *));",
          "80: static void unwind_frame_discard_internal PARAMS((char *, char *));",
          "81: static void unwind_frame_run_internal PARAMS((char *, char *));",
          "82: static void add_unwind_protect_internal PARAMS((Function *, char *));",
          "83: static void remove_unwind_protect_internal PARAMS((char *, char *));",
          "84: static void run_unwind_protects_internal PARAMS((char *, char *));",
          "85: static void clear_unwind_protects_internal PARAMS((char *, char *));",
          "86: static inline void restore_variable PARAMS((SAVED_VAR *));",
          "87: static void unwind_protect_mem_internal PARAMS((char *, char *));",
          "",
          "[Added Lines]",
          "79: static void without_interrupts __P((VFunction *, char *, char *));",
          "80: static void unwind_frame_discard_internal __P((char *, char *));",
          "81: static void unwind_frame_run_internal __P((char *, char *));",
          "82: static void add_unwind_protect_internal __P((Function *, char *));",
          "83: static void remove_unwind_protect_internal __P((char *, char *));",
          "84: static void run_unwind_protects_internal __P((char *, char *));",
          "85: static void clear_unwind_protects_internal __P((char *, char *));",
          "86: static inline void restore_variable __P((SAVED_VAR *));",
          "87: static void unwind_protect_mem_internal __P((char *, char *));",
          "",
          "---------------"
        ],
        "unwind_prot.h||unwind_prot.h": [
          "File: unwind_prot.h -> unwind_prot.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #if !defined (_UNWIND_PROT_H)",
          "22: #define _UNWIND_PROT_H",
          "39: #define end_unwind_frame()",
          "42: #define unwind_protect_var(X) unwind_protect_mem ((char *)&(X), sizeof (X))",
          "46: #define unwind_protect_int unwind_protect_var",
          "",
          "[Removed Lines]",
          "24: extern void uwp_init PARAMS((void));",
          "27: extern void begin_unwind_frame PARAMS((char *));",
          "28: extern void discard_unwind_frame PARAMS((char *));",
          "29: extern void run_unwind_frame PARAMS((char *));",
          "31: extern void remove_unwind_protect PARAMS((void));",
          "32: extern void run_unwind_protects PARAMS((void));",
          "33: extern void clear_unwind_protect_list PARAMS((int));",
          "34: extern int have_unwind_protects PARAMS((void));",
          "35: extern int unwind_protect_tag_on_stack PARAMS((const char *));",
          "36: extern void uwp_init PARAMS((void));",
          "43: extern void unwind_protect_mem PARAMS((char *, int));",
          "",
          "[Added Lines]",
          "24: extern void uwp_init __P((void));",
          "27: extern void begin_unwind_frame __P((char *));",
          "28: extern void discard_unwind_frame __P((char *));",
          "29: extern void run_unwind_frame __P((char *));",
          "31: extern void remove_unwind_protect __P((void));",
          "32: extern void run_unwind_protects __P((void));",
          "33: extern void clear_unwind_protect_list __P((int));",
          "34: extern int have_unwind_protects __P((void));",
          "35: extern int unwind_protect_tag_on_stack __P((const char *));",
          "36: extern void uwp_init __P((void));",
          "43: extern void unwind_protect_mem __P((char *, int));",
          "",
          "---------------"
        ],
        "variables.c||variables.c": [
          "File: variables.c -> variables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #if defined (HAVE_UNISTD_H)",
          "36: #  include <unistd.h>",
          "37: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #if defined (HAVE_SYS_RANDOM_H)",
          "36: #  include <sys/random.h>",
          "37: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1474:   urandfd = -1;",
          "1475: }",
          "1479: {",
          "1482:   static int urand_unavail = 0;",
          "1484:   if (urandfd == -1 && urand_unavail == 0)",
          "1485:     {",
          "1487:       if (urandfd >= 0)",
          "1488:  SET_CLOSE_ON_EXEC (urandfd);",
          "1489:       else",
          "1491:     }",
          "1493:     return (last_rand32 = ret);",
          "1494: #if defined (HAVE_ARC4RANDOM)",
          "1495:   ret = arc4random ();",
          "1496: #else",
          "",
          "[Removed Lines]",
          "1477: static u_bits32_t",
          "1478: get_urandom32 ()",
          "1480:   u_bits32_t ret;",
          "1481:   int n;",
          "1486:       urandfd = open (\"/dev/urandom\", O_RDONLY, 0);",
          "1490:  urand_unavail = 1;",
          "1492:   if (urandfd >= 0 && (n = read (urandfd, (char *)&ret, sizeof (ret))) == sizeof (ret))",
          "",
          "[Added Lines]",
          "1481: #if !defined (HAVE_GETRANDOM)",
          "1483: #ifndef GRND_NONBLOCK",
          "1484: #  define GRND_NONBLOCK 1",
          "1485: #  define GRND_RANDOM 2",
          "1486: #endif",
          "1488: static ssize_t",
          "1489: getrandom (buf, len, flags)",
          "1490:      void *buf;",
          "1491:      size_t len;",
          "1492:      unsigned int flags;",
          "1494:   int oflags;",
          "1495:   ssize_t r;",
          "1498: #if HAVE_GETENTROPY",
          "1499:   r = getentropy (buf, len);",
          "1500:   return (r == 0) ? len : -1;",
          "1501: #endif",
          "1505:       oflags = O_RDONLY;",
          "1506:       if (flags & GRND_NONBLOCK)",
          "1507:  oflags |= O_NONBLOCK;",
          "1508:       urandfd = open (\"/dev/urandom\", oflags, 0);",
          "1512:  {",
          "1513:    urand_unavail = 1;",
          "1514:    return -1;",
          "1515:  }",
          "1517:   if (urandfd >= 0 && (r = read (urandfd, buf, len)) == len)",
          "1518:     return (r);",
          "1519:   return -1;",
          "1520: }",
          "1521: #endif",
          "1523: static u_bits32_t",
          "1524: get_urandom32 ()",
          "1525: {",
          "1526:   u_bits32_t ret;",
          "1528:   if (getrandom ((void *)&ret, sizeof (ret), GRND_NONBLOCK) == sizeof (ret))",
          "",
          "---------------"
        ],
        "xmalloc.h||xmalloc.h": [
          "File: xmalloc.h -> xmalloc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #if defined(USING_BASH_MALLOC) && !defined (DISABLE_MALLOC_WRAPPERS)",
          "48: #define xmalloc(x) sh_xmalloc((x), __FILE__, __LINE__)",
          "49: #define xrealloc(x, n) sh_xrealloc((x), (n), __FILE__, __LINE__)",
          "",
          "[Removed Lines]",
          "39: extern PTR_T xmalloc PARAMS((size_t));",
          "40: extern PTR_T xrealloc PARAMS((void *, size_t));",
          "41: extern void xfree PARAMS((void *));",
          "44: extern PTR_T sh_xmalloc PARAMS((size_t, const char *, int));",
          "45: extern PTR_T sh_xrealloc PARAMS((void *, size_t, const char *, int));",
          "46: extern void sh_xfree PARAMS((void *, const char *, int));",
          "",
          "[Added Lines]",
          "39: extern PTR_T xmalloc __P((size_t));",
          "40: extern PTR_T xrealloc __P((void *, size_t));",
          "41: extern void xfree __P((void *));",
          "44: extern PTR_T sh_xmalloc __P((size_t, const char *, int));",
          "45: extern PTR_T sh_xrealloc __P((void *, size_t, const char *, int));",
          "46: extern void sh_xfree __P((void *, const char *, int));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: #endif",
          "55: #define free(x)  sh_xfree((x), __FILE__, __LINE__)",
          "59: #ifdef malloc",
          "60: #undef malloc",
          "",
          "[Removed Lines]",
          "57: extern PTR_T sh_malloc PARAMS((size_t, const char *, int));",
          "",
          "[Added Lines]",
          "57: extern PTR_T sh_malloc __P((size_t, const char *, int));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07f38782cdee9e9bb1c976fe35a1ff4613812495",
      "candidate_info": {
        "commit_hash": "07f38782cdee9e9bb1c976fe35a1ff4613812495",
        "repo": "bminor/bash",
        "commit_url": "https://github.com/bminor/bash/commit/07f38782cdee9e9bb1c976fe35a1ff4613812495",
        "files": [
          "CWRU/CWRU.chlog",
          "MANIFEST",
          "array.c",
          "assoc.c",
          "builtins/declare.def",
          "configure",
          "configure.ac",
          "doc/bash.1",
          "doc/bashref.texi",
          "doc/version.texi",
          "lib/readline/doc/rluser.texi",
          "subst.c",
          "tests/array.right",
          "tests/array.tests",
          "tests/array26.sub",
          "tests/array6.sub",
          "tests/nameref.right",
          "tests/nameref20.sub",
          "tests/nameref21.sub",
          "tests/shopt.right"
        ],
        "message": "commit bash-20180809 snapshot",
        "before_after_code_files": [
          "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
          "array.c||array.c",
          "assoc.c||assoc.c",
          "builtins/declare.def||builtins/declare.def",
          "configure.ac||configure.ac",
          "subst.c||subst.c",
          "tests/array.right||tests/array.right",
          "tests/array.tests||tests/array.tests",
          "tests/array26.sub||tests/array26.sub",
          "tests/array6.sub||tests/array6.sub",
          "tests/nameref.right||tests/nameref.right",
          "tests/nameref20.sub||tests/nameref20.sub",
          "tests/nameref21.sub||tests/nameref21.sub",
          "tests/shopt.right||tests/shopt.right"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "CWRU/CWRU.chlog||CWRU/CWRU.chlog": [
          "File: CWRU/CWRU.chlog -> CWRU/CWRU.chlog",
          "--- Hunk 1 ---",
          "[Context before]",
          "4153:  - expand_string_for_pat: make sure we preserve the value of",
          "4154:    expand_no_split_dollar_star instead of just unconditionally setting",
          "4155:    it back to 0 in case it was 1 before this function was called",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4157:         8/6",
          "4158:         ---",
          "4159: array.c",
          "4160:  - array_modcase: rewrite to work in terms of a WORD_LIST * and call",
          "4161:    string_list_pos_params on the result to be consistent with the",
          "4162:    expansions of ${@,,} and ${*,,}",
          "4164: assoc.c",
          "4165:  - assoc_modcase: rewrite to work in terms of a WORD_LIST * and call",
          "4166:    string_list_pos_params on the result to be consistent with the",
          "4167:    expansions of ${@,,} and ${*,,}",
          "4169: subst.c",
          "4170:  - parameter_brace_casemod: change how return value of {array,assoc}_modcase",
          "4171:    is treated to make it identical to pos_params_modcase, since they",
          "4172:    all call string_list_pos_params now",
          "4174:         8/8",
          "4175:         ---",
          "4176: builtins/declare.def",
          "4177:  - declare_internal: if we are making local variables, and not dealing",
          "4178:    with the nameref attribute, make sure that any nameref variable we",
          "4179:    followed when resolving the name given was at the same variable",
          "4180:    context. If not, we just want to make or use a local variable with",
          "4181:    the name passed; if so, we want to use the nameref value as the",
          "4182:    variable name. Report from Grisha Levit <grishalevit@gmail.com>",
          "4184:         8/9",
          "4185:         ---",
          "4186: configure.ac",
          "4187:  - globasciiranges: RRI now on by default, must be turned off explicitly",
          "4188:    at configure time or runtime with `shopt -u globasciiranges'",
          "",
          "---------------"
        ],
        "array.c||array.c": [
          "File: array.c -> array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "481: int modop;",
          "482: int mflags;",
          "483: {",
          "489:  if (a == 0 || array_head(a) == 0 || array_empty(a))",
          "490:   return ((char *)NULL);",
          "497:  }",
          "529:  return t;",
          "530: }",
          "",
          "[Removed Lines]",
          "484:  ARRAY  *a2;",
          "485:  ARRAY_ELEMENT *e;",
          "486:  char *t, *sifs, *ifs;",
          "487:  int slen;",
          "492:  a2 = array_copy(a);",
          "493:  for (e = element_forw(a2->head); e != a2->head; e = element_forw(e)) {",
          "494:   t = sh_modcase(element_value(e), pat, modop);",
          "495:   FREE(element_value(e));",
          "496:   e->value = t;",
          "499:  if (mflags & MATCH_QUOTED)",
          "500:   array_quote(a2);",
          "501:  else",
          "502:   array_quote_escapes(a2);",
          "504:  if (mflags & MATCH_STARSUB) {",
          "505:   array_remove_quoted_nulls (a2);",
          "506:   if ((mflags & MATCH_QUOTED) == 0 && ifs_is_null)",
          "507:    sifs = spacesep;",
          "508:   else",
          "509:    sifs = ifs_firstchar((int *)NULL);",
          "510:   t = array_to_string (a2, sifs, 0);",
          "511:   if (sifs != spacesep)",
          "512:    free(sifs);",
          "513:  } else if (mflags & MATCH_QUOTED) {",
          "515:   sifs = ifs_firstchar (&slen);",
          "516:   ifs = getifs ();",
          "517:   if (ifs == 0 || *ifs == 0) {",
          "518:    if (slen < 2)",
          "519:     sifs = xrealloc (sifs, 2);",
          "520:    sifs[0] = ' ';",
          "521:    sifs[1] = '\\0';",
          "522:   }",
          "523:   t = array_to_string (a2, sifs, 0);",
          "524:   free(sifs);",
          "525:  } else",
          "526:   t = array_to_string (a2, \" \", 0);",
          "527:  array_dispose (a2);",
          "",
          "[Added Lines]",
          "484:  char *t;",
          "485:  int pchar, qflags;",
          "486:  WORD_LIST *wl, *save;",
          "491:  wl = array_to_word_list(a);",
          "492:  if (wl == 0)",
          "493:   return ((char *)NULL);",
          "495:  for (save = wl; wl; wl = wl->next) {",
          "496:   t = sh_modcase(wl->word->word, pat, modop);",
          "497:   FREE(wl->word->word);",
          "498:   wl->word->word = t;",
          "501:  pchar = (mflags & MATCH_STARSUB) == MATCH_STARSUB ? '*' : '@';",
          "502:  qflags = (mflags & MATCH_QUOTED) == MATCH_QUOTED ? Q_DOUBLE_QUOTES : 0;",
          "504:  t = string_list_pos_params (pchar, save, qflags);",
          "505:  dispose_words(save);",
          "",
          "---------------"
        ],
        "assoc.c||assoc.c": [
          "File: assoc.c -> assoc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:      int modop;",
          "340:      int mflags;",
          "341: {",
          "347:   if (h == 0 || assoc_empty (h))",
          "348:     return ((char *)NULL);",
          "372:     {",
          "385:     }",
          "391:   return t;",
          "392: }",
          "",
          "[Removed Lines]",
          "342:   BUCKET_CONTENTS *tlist;",
          "343:   int i, slen;",
          "344:   HASH_TABLE *h2;",
          "345:   char *t, *sifs, *ifs;",
          "350:   h2 = assoc_copy (h);",
          "351:   for (i = 0; i < h2->nbuckets; i++)",
          "352:     for (tlist = hash_items (i, h2); tlist; tlist = tlist->next)",
          "353:       {",
          "354:  t = sh_modcase ((char *)tlist->data, pat, modop);",
          "355:  FREE (tlist->data);",
          "356:  tlist->data = t;",
          "357:       }",
          "359:   if (mflags & MATCH_QUOTED)",
          "360:     assoc_quote (h2);",
          "361:   else",
          "362:     assoc_quote_escapes (h2);",
          "364:   if (mflags & MATCH_STARSUB)",
          "365:     {",
          "366:       assoc_remove_quoted_nulls (h2);",
          "367:       sifs = ifs_firstchar ((int *)NULL);",
          "368:       t = assoc_to_string (h2, sifs, 0);",
          "369:       free (sifs);",
          "370:     }",
          "371:   else if (mflags & MATCH_QUOTED)",
          "374:       sifs = ifs_firstchar (&slen);",
          "375:       ifs = getifs ();",
          "376:       if (ifs == 0 || *ifs == 0)",
          "377:  {",
          "378:    if (slen < 2)",
          "379:      sifs = xrealloc (sifs, 2);",
          "380:    sifs[0] = ' ';",
          "381:    sifs[1] = '\\0';",
          "382:  }",
          "383:       t = assoc_to_string (h2, sifs, 0);",
          "384:       free(sifs);",
          "386:   else",
          "387:     t = assoc_to_string (h2, \" \", 0);",
          "389:   assoc_dispose (h2);",
          "",
          "[Added Lines]",
          "342:   char *t;",
          "343:   int pchar, qflags;",
          "344:   WORD_LIST *wl, *save;",
          "349:   wl = assoc_to_word_list (h);",
          "350:   if (wl == 0)",
          "351:     return ((char *)NULL);",
          "353:   for (save = wl; wl; wl = wl->next)",
          "355:       t = sh_modcase (wl->word->word, pat, modop);",
          "356:       FREE (wl->word->word);",
          "357:       wl->word->word = t;",
          "360:   pchar = (mflags & MATCH_STARSUB) == MATCH_STARSUB ? '*' : '@';",
          "361:   qflags = (mflags & MATCH_QUOTED) == MATCH_QUOTED ? Q_DOUBLE_QUOTES : 0;",
          "363:   t = string_list_pos_params (pchar, save, qflags);",
          "364:   dispose_words (save);",
          "",
          "---------------"
        ],
        "builtins/declare.def||builtins/declare.def": [
          "File: builtins/declare.def -> builtins/declare.def",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:    var = find_variable (name);",
          "448: #if defined (ARRAY_VARS)",
          "450:       return an existing {array,assoc} variable to be flagged as an",
          "",
          "[Removed Lines]",
          "447:    newname = (var == 0) ? nameref_transform_name (name, ASS_MKLOCAL) : name;",
          "",
          "[Added Lines]",
          "447:    if (var == 0)",
          "448:      newname = nameref_transform_name (name, ASS_MKLOCAL);",
          "449:    else if ((flags_on & att_nameref) == 0 && (flags_off & att_nameref) == 0)",
          "450:      {",
          "452:    we followed one, it was at the same context (see below for",
          "454:        refvar = find_variable_last_nameref (name, 1);",
          "455:        newname = (refvar && refvar->context != variable_context) ? name : var->name;",
          "456:        refvar = (SHELL_VAR *)NULL;",
          "457:      }",
          "458:    else",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #   You should have received a copy of the GNU General Public License",
          "22: #   along with this program.  If not, see <http://www.gnu.org/licenses/>.",
          "26: define(bashvers, 5.0)",
          "27: define(relstatus, alpha)",
          "",
          "[Removed Lines]",
          "24: AC_REVISION([for Bash 5.0, version 4.094])dnl",
          "",
          "[Added Lines]",
          "24: AC_REVISION([for Bash 5.0, version 4.095])dnl",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182: opt_casemod_expansions=yes",
          "183: opt_extglob_default=no",
          "184: opt_dircomplete_expand_default=no",
          "186: opt_function_import=yes",
          "187: opt_dev_fd_stat_broken=no",
          "",
          "[Removed Lines]",
          "185: opt_globascii_default=no",
          "",
          "[Added Lines]",
          "185: opt_globascii_default=yes",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:  opt_net_redirs=no opt_progcomp=no opt_separate_help=no",
          "206:  opt_multibyte=yes opt_cond_regexp=no opt_coproc=no",
          "207:  opt_casemod_attrs=no opt_casemod_expansions=no opt_extglob_default=no",
          "209: fi",
          "211: AC_ARG_ENABLE(alias, AC_HELP_STRING([--enable-alias], [enable shell aliases]), opt_alias=$enableval)",
          "",
          "[Removed Lines]",
          "208:  opt_globascii_default=no",
          "",
          "[Added Lines]",
          "208:  opt_globascii_default=yes",
          "",
          "---------------"
        ],
        "subst.c||subst.c": [
          "File: subst.c -> subst.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7829:   int rptr, mtype, rxpand, mlen;",
          "7830:   size_t rsize, l, replen, rslen;",
          "7833:     return (savestring (\"\"));",
          "7835:   mtype = mflags & MATCH_TYPEMASK;",
          "",
          "[Removed Lines]",
          "7832:   if (string  == 0)",
          "",
          "[Added Lines]",
          "7832:   if (string == 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8309:  {",
          "8311:  }",
          "8313:  {",
          "8314:    tt = quote_escapes (temp);",
          "8315:    free (temp);",
          "",
          "[Removed Lines]",
          "8312:       else if (temp && (mflags & MATCH_QUOTED)  == 0)",
          "",
          "[Added Lines]",
          "8312:       else if (temp && (mflags & MATCH_QUOTED) == 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8328:       temp = assoc_p (v) ? assoc_modcase (assoc_cell (v), pat, modop, mflags)",
          "8329:     : array_modcase (array_cell (v), pat, modop, mflags);",
          "8333:       break;",
          "8334: #endif",
          "8335:     }",
          "",
          "[Removed Lines]",
          "8331:   as appropriate before adding the space separators; ditto for",
          "",
          "[Added Lines]",
          "8331:       if (temp && quoted == 0 && ifs_is_null)",
          "8332:  {",
          "8334:  }",
          "8335:       else if (temp && (mflags & MATCH_QUOTED) == 0)",
          "8336:  {",
          "8337:    tt = quote_escapes (temp);",
          "8338:    free (temp);",
          "8339:    temp = tt;",
          "8340:  }",
          "",
          "---------------"
        ],
        "tests/array.right||tests/array.right": [
          "File: tests/array.right -> tests/array.right",
          "--- Hunk 1 ---",
          "[Context before]",
          "270: argv[2] = <element2 with spaces>",
          "271: argv[1] = <element1 with spaces>",
          "272: argv[2] = <element2 with spaces>",
          "341: nord!olz",
          "343: rdholz",
          "",
          "[Removed Lines]",
          "273: argv[1] = <aa>",
          "274: argv[2] = <bb>",
          "275: argv[1] = <aa>",
          "276: argv[2] = <bb>",
          "277: argv[1] = <aa>",
          "278: argv[2] = <bb>",
          "279: argv[1] = <aa>",
          "280: argv[2] = <bb>",
          "281: argv[1] = <aa>",
          "282: argv[2] = <bb>",
          "283: argv[3] = <aa>",
          "284: argv[4] = <bb>",
          "285: argv[1] = <aa>",
          "286: argv[2] = <bb>",
          "287: argv[3] = <aa>",
          "288: argv[4] = <bb>",
          "289: argv[1] = <aa+bb>",
          "290: argv[2] = <aa+bb>",
          "291: argv[1] = <aa>",
          "292: argv[2] = <bb>",
          "293: argv[3] = <aa>",
          "294: argv[4] = <bb>",
          "295: argv[1] = <xa>",
          "296: argv[2] = <bb>",
          "297: argv[1] = <xa>",
          "298: argv[2] = <bb>",
          "299: argv[1] = <xa>",
          "300: argv[2] = <bb>",
          "301: argv[1] = <xa>",
          "302: argv[2] = <bb>",
          "303: argv[1] = <xa>",
          "304: argv[2] = <bb>",
          "305: argv[1] = <xa>",
          "306: argv[2] = <bb>",
          "307: argv[1] = <xa+bb>",
          "308: argv[1] = <xa+bb>",
          "309: argv[1] = <xa+bb>",
          "310: argv[2] = <xa+bb>",
          "311: argv[1] = <xa>",
          "312: argv[2] = <bb>",
          "313: argv[1] = <xa>",
          "314: argv[2] = <bb>",
          "315: argv[1] = <xa>",
          "316: argv[2] = <bb>",
          "317: argv[1] = <xa+bb>",
          "318: argv[1] = <xa>",
          "319: argv[2] = <bb>",
          "320: argv[1] = <xa>",
          "321: argv[2] = <bb>",
          "322: argv[1] = <xa>",
          "323: argv[2] = <bb>",
          "324: argv[1] = <xa>",
          "325: argv[2] = <bb>",
          "326: argv[1] = <xa>",
          "327: argv[2] = <bb>",
          "328: argv[1] = <xa>",
          "329: argv[2] = <bb>",
          "330: argv[1] = <xabb>",
          "331: argv[1] = <xabb>",
          "332: argv[1] = <xabb>",
          "333: argv[2] = <xabb>",
          "334: argv[1] = <xa>",
          "335: argv[2] = <bb>",
          "336: argv[1] = <xa>",
          "337: argv[2] = <bb>",
          "338: argv[1] = <xa>",
          "339: argv[2] = <bb>",
          "340: argv[1] = <xabb>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "689: 6.declare -A a=([\" \"]=\"13\" [0]=\"0\" [1]=\"1\" [\"\\\" \\\"\"]=\"11\" )",
          "690: 7.declare -A a=([\" \"]=\"13\" [0]=\"0\" [1]=\"1\" [\"\\\" \\\"\"]=\"11\" )",
          "691: 8.declare -A a=([\" \"]=\"13\" [0]=\"0\" [1]=\"1\" [\"\\\" \\\"\"]=\"13\" )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "624: argv[1] = <aa>",
          "625: argv[2] = <bb>",
          "626: argv[1] = <aa>",
          "627: argv[2] = <bb>",
          "628: argv[1] = <aa>",
          "629: argv[2] = <bb>",
          "630: argv[1] = <aa>",
          "631: argv[2] = <bb>",
          "632: argv[1] = <aa>",
          "633: argv[2] = <bb>",
          "634: argv[3] = <aa>",
          "635: argv[4] = <bb>",
          "636: argv[1] = <aa>",
          "637: argv[2] = <bb>",
          "638: argv[3] = <aa>",
          "639: argv[4] = <bb>",
          "640: argv[1] = <aa+bb>",
          "641: argv[2] = <aa+bb>",
          "642: argv[1] = <aa>",
          "643: argv[2] = <bb>",
          "644: argv[3] = <aa>",
          "645: argv[4] = <bb>",
          "646: argv[1] = <xa>",
          "647: argv[2] = <bb>",
          "648: argv[1] = <xa>",
          "649: argv[2] = <bb>",
          "650: argv[1] = <xa>",
          "651: argv[2] = <bb>",
          "652: argv[1] = <xa>",
          "653: argv[2] = <bb>",
          "654: argv[1] = <xa>",
          "655: argv[2] = <bb>",
          "656: argv[1] = <xa>",
          "657: argv[2] = <bb>",
          "658: argv[1] = <xa+bb>",
          "659: argv[1] = <xa+bb>",
          "660: argv[1] = <xa+bb>",
          "661: argv[2] = <xa+bb>",
          "662: argv[1] = <xa>",
          "663: argv[2] = <bb>",
          "664: argv[1] = <xa>",
          "665: argv[2] = <bb>",
          "666: argv[1] = <xa>",
          "667: argv[2] = <bb>",
          "668: argv[1] = <xa+bb>",
          "669: argv[1] = <xa>",
          "670: argv[2] = <bb>",
          "671: argv[1] = <xa>",
          "672: argv[2] = <bb>",
          "673: argv[1] = <xa>",
          "674: argv[2] = <bb>",
          "675: argv[1] = <xa>",
          "676: argv[2] = <bb>",
          "677: argv[1] = <xa>",
          "678: argv[2] = <bb>",
          "679: argv[1] = <xa>",
          "680: argv[2] = <bb>",
          "681: argv[1] = <xabb>",
          "682: argv[1] = <xabb>",
          "683: argv[1] = <xabb>",
          "684: argv[2] = <xabb>",
          "685: argv[1] = <xa>",
          "686: argv[2] = <bb>",
          "687: argv[1] = <xa>",
          "688: argv[2] = <bb>",
          "689: argv[1] = <xa>",
          "690: argv[2] = <bb>",
          "691: argv[1] = <xabb>",
          "692: argv[1] = <aa>",
          "693: argv[2] = <bb>",
          "694: argv[1] = <aa>",
          "695: argv[2] = <bb>",
          "696: argv[1] = <aa>",
          "697: argv[2] = <bb>",
          "698: argv[1] = <aa>",
          "699: argv[2] = <bb>",
          "700: argv[1] = <aa>",
          "701: argv[2] = <bb>",
          "702: argv[3] = <aa>",
          "703: argv[4] = <bb>",
          "704: argv[1] = <aa>",
          "705: argv[2] = <bb>",
          "706: argv[3] = <aa>",
          "707: argv[4] = <bb>",
          "708: argv[1] = <aa+bb>",
          "709: argv[2] = <aa+bb>",
          "710: argv[1] = <aa+bb>",
          "711: argv[2] = <aa+bb>",
          "712: argv[1] = <aa>",
          "713: argv[2] = <bb>",
          "714: argv[3] = <aa>",
          "715: argv[4] = <bb>",
          "716: argv[1] = <aa>",
          "717: argv[2] = <bb>",
          "718: argv[1] = <aa>",
          "719: argv[2] = <bb>",
          "720: argv[1] = <aa>",
          "721: argv[2] = <bb>",
          "722: argv[1] = <aa+bb>",
          "723: argv[1] = <a>",
          "724: argv[2] = <b>",
          "725: argv[1] = <a>",
          "726: argv[2] = <b>",
          "727: argv[1] = <a>",
          "728: argv[2] = <b>",
          "729: argv[3] = <a>",
          "730: argv[4] = <b>",
          "731: argv[1] = <a+b>",
          "732: argv[2] = <a+b>",
          "733: argv[1] = <a>",
          "734: argv[2] = <b>",
          "735: argv[3] = <a>",
          "736: argv[4] = <b>",
          "737: argv[1] = <a>",
          "738: argv[2] = <b>",
          "739: argv[1] = <a>",
          "740: argv[2] = <b>",
          "741: argv[1] = <a>",
          "742: argv[2] = <b>",
          "743: argv[1] = <a+b>",
          "",
          "---------------"
        ],
        "tests/array.tests||tests/array.tests": [
          "File: tests/array.tests -> tests/array.tests",
          "--- Hunk 1 ---",
          "[Context before]",
          "404: ${THIS_SH} ./array23.sub",
          "405: ${THIS_SH} ./array24.sub",
          "406: ${THIS_SH} ./array25.sub",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407: ${THIS_SH} ./array26.sub",
          "",
          "---------------"
        ],
        "tests/array26.sub||tests/array26.sub": [
          "File: tests/array26.sub -> tests/array26.sub",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # these should produce the same results",
          "2: a=(aa bb)",
          "3: set -- aa bb",
          "5: IFS=+",
          "7: recho ${a[@]}",
          "8: recho ${a[@]:0}",
          "10: recho $@",
          "11: recho ${@:1}",
          "13: A=${a[*]} B=${a[*]:0}",
          "14: recho $* ${*:1}",
          "15: recho ${a[*]} ${a[*]:0}",
          "16: recho \"$A\" \"$B\"",
          "17: recho $A $B",
          "19: unset A B",
          "21: recho ${@/a/x}",
          "22: recho ${a[@]/a/x}",
          "23: recho \"${@/a/x}\"",
          "24: recho \"${a[@]/a/x}\"",
          "26: recho ${*/a/x}",
          "27: recho ${a[*]/a/x}",
          "28: recho \"${*/a/x}\"",
          "29: recho \"${a[*]/a/x}\"",
          "31: A=${*/a/x}",
          "32: B=${a[*]/a/x}",
          "34: recho \"$A\" \"$B\"",
          "36: unset A B",
          "37: declare -A A",
          "38: A[0]=aa",
          "39: A[1]=bb",
          "41: recho ${A[@]/a/x}",
          "42: recho \"${A[@]/a/x}\"",
          "43: recho ${A[*]/a/x}",
          "44: recho \"${A[*]/a/x}\"",
          "46: unset A",
          "47: IFS=",
          "49: recho ${@/a/x}",
          "50: recho ${a[@]/a/x}",
          "51: recho \"${@/a/x}\"",
          "52: recho \"${a[@]/a/x}\"",
          "54: recho ${*/a/x}",
          "55: recho ${a[*]/a/x}",
          "56: recho \"${*/a/x}\"",
          "57: recho \"${a[*]/a/x}\"",
          "59: A=${*/a/x}",
          "60: B=${a[*]/a/x}",
          "62: recho \"$A\" \"$B\"",
          "64: unset A B",
          "65: declare -A A",
          "66: A[0]=aa",
          "67: A[1]=bb",
          "69: recho ${A[@]/a/x}",
          "70: recho \"${A[@]/a/x}\"",
          "71: recho ${A[*]/a/x}",
          "72: recho \"${A[*]/a/x}\"",
          "74: unset A",
          "76: IFS=+",
          "78: recho ${a[@]}",
          "79: recho ${a[@],,}",
          "80: recho \"${a[@]}\"",
          "81: recho \"${a[@],,}\"",
          "83: A=${a[*]} B=${a[*],,}",
          "84: recho $* ${*,,}",
          "85: recho ${a[*]} ${a[*],,}",
          "86: recho \"${a[*]}\" \"${a[*],,}\"",
          "87: recho \"$A\" \"$B\"",
          "88: recho $A $B",
          "90: unset A B",
          "91: declare -A A",
          "92: A[0]=aa",
          "93: A[1]=bb",
          "95: recho ${A[@],,}",
          "96: recho \"${A[@],,}\"",
          "97: recho ${A[*],,}",
          "98: recho \"${A[*],,}\"",
          "100: unset A",
          "102: recho ${a[@]#?}",
          "103: recho ${@#?}",
          "105: A=${a[*]#?} B=${a[*]#?}",
          "106: recho ${*#?} ${a[*]#?}",
          "107: recho \"$A\" \"$B\"",
          "108: recho $A $B",
          "110: unset A B",
          "111: declare -A A",
          "112: A[0]=aa",
          "113: A[1]=bb",
          "115: recho ${A[@]#?}",
          "116: recho \"${A[@]#?}\"",
          "117: recho ${A[*]#?}",
          "118: recho \"${A[*]#?}\"",
          "",
          "---------------"
        ],
        "tests/array6.sub||tests/array6.sub": [
          "File: tests/array6.sub -> tests/array6.sub",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: IFS=\"$oIFS\"",
          "115: unset a a2 array foo",
          "",
          "[Removed Lines]",
          "117: # these should produce the same results",
          "118: a=(aa bb)",
          "119: set -- aa bb",
          "121: IFS=+",
          "123: recho ${a[@]}",
          "124: recho ${a[@]:0}",
          "126: recho $@",
          "127: recho ${@:1}",
          "129: A=${a[*]} B=${a[*]:0}",
          "130: recho $* ${*:1}",
          "131: recho ${a[*]} ${a[*]:0}",
          "132: recho \"$A\" \"$B\"",
          "133: recho $A $B",
          "135: unset A B",
          "137: recho ${@/a/x}",
          "138: recho ${a[@]/a/x}",
          "139: recho \"${@/a/x}\"",
          "140: recho \"${a[@]/a/x}\"",
          "142: recho ${*/a/x}",
          "143: recho ${a[*]/a/x}",
          "144: recho \"${*/a/x}\"",
          "145: recho \"${a[*]/a/x}\"",
          "147: A=${*/a/x}",
          "148: B=${a[*]/a/x}",
          "150: recho \"$A\" \"$B\"",
          "152: unset A B",
          "153: declare -A A",
          "154: A[0]=aa",
          "155: A[1]=bb",
          "157: recho ${A[@]/a/x}",
          "158: recho \"${A[@]/a/x}\"",
          "159: recho ${A[*]/a/x}",
          "160: recho \"${A[*]/a/x}\"",
          "162: unset A",
          "163: IFS=",
          "165: recho ${@/a/x}",
          "166: recho ${a[@]/a/x}",
          "167: recho \"${@/a/x}\"",
          "168: recho \"${a[@]/a/x}\"",
          "170: recho ${*/a/x}",
          "171: recho ${a[*]/a/x}",
          "172: recho \"${*/a/x}\"",
          "173: recho \"${a[*]/a/x}\"",
          "175: A=${*/a/x}",
          "176: B=${a[*]/a/x}",
          "178: recho \"$A\" \"$B\"",
          "180: unset A B",
          "181: declare -A A",
          "182: A[0]=aa",
          "183: A[1]=bb",
          "185: recho ${A[@]/a/x}",
          "186: recho \"${A[@]/a/x}\"",
          "187: recho ${A[*]/a/x}",
          "188: recho \"${A[*]/a/x}\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/nameref.right||tests/nameref.right": [
          "File: tests/nameref.right -> tests/nameref.right",
          "--- Hunk 1 ---",
          "[Context before]",
          "469: declare -- ref=\"Y\"",
          "470: ./nameref20.sub: line 61: declare: var: not found",
          "471: ref=Y",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472: declare -n ref=\"var\"",
          "473: declare -A var=([2]=\"\" )",
          "474: declare -n ref=\"var\"",
          "475: declare -A var=([2]=\"\" )",
          "476: declare -n ref=\"var\"",
          "477: declare -a var=([2]=\"\")",
          "478: declare -n ref=\"var\"",
          "479: declare -a var=([2]=\"\")",
          "480: declare -n ref=\"var\"",
          "481: declare -ai var=([1]=\"0\")",
          "482: declare -n ref=\"var\"",
          "483: declare -ai var=([1]=\"0\")",
          "484: declare -n ref=\"var\"",
          "485: declare -- var=\"1\"",
          "",
          "---------------"
        ],
        "tests/nameref20.sub||tests/nameref20.sub": [
          "File: tests/nameref20.sub -> tests/nameref20.sub",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: f",
          "69: unset -n ref",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: unset -f f",
          "",
          "---------------"
        ],
        "tests/nameref21.sub||tests/nameref21.sub": [
          "File: tests/nameref21.sub -> tests/nameref21.sub",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # issues with local variables and local namerefs post-bash-4.4",
          "3: f()",
          "4: {",
          "5:  local -n ref=var",
          "6:  local -A ref=([1]=)",
          "7: # declare -p ref var",
          "8:  ref=([2]=)",
          "9:  declare -p ref var",
          "10: }",
          "12: unset ref  var",
          "13: f",
          "15: unset ref; var=0",
          "16: f",
          "18: unset var",
          "19: unset -f f",
          "21: f()",
          "22: {",
          "23:  local -n ref=var",
          "24:  local -a ref=([1]=)",
          "25:  ref=([2]=)",
          "26:  declare -p ref var",
          "27: }",
          "29: unset ref var",
          "30: f",
          "32: unset ref; var=0",
          "33: f",
          "35: unset var",
          "36: unset -f f",
          "38: f() { local -n ref=var; local -i ref=([1]=); declare -p ref var; }",
          "40: unset var",
          "41: f",
          "43: var=0",
          "44: f",
          "46: unset var",
          "47: unset -f f",
          "49: f() { local -n ref=var; local ref=1; declare -p ref var; }",
          "51: var=0",
          "52: f",
          "54: unset var",
          "55: unset -f f",
          "",
          "---------------"
        ],
        "tests/shopt.right||tests/shopt.right": [
          "File: tests/shopt.right -> tests/shopt.right",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: shopt -s extquote",
          "28: shopt -u failglob",
          "29: shopt -s force_fignore",
          "31: shopt -u globstar",
          "32: shopt -u gnu_errfmt",
          "33: shopt -u histappend",
          "",
          "[Removed Lines]",
          "30: shopt -u globasciiranges",
          "",
          "[Added Lines]",
          "30: shopt -s globasciiranges",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: shopt -s expand_aliases",
          "64: shopt -s extquote",
          "65: shopt -s force_fignore",
          "66: shopt -s hostcomplete",
          "67: shopt -s interactive_comments",
          "68: shopt -s progcomp",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: shopt -s globasciiranges",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89: shopt -u extdebug",
          "90: shopt -u extglob",
          "91: shopt -u failglob",
          "93: shopt -u globstar",
          "94: shopt -u gnu_errfmt",
          "95: shopt -u histappend",
          "",
          "[Removed Lines]",
          "92: shopt -u globasciiranges",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130: extdebug        off",
          "131: extglob         off",
          "132: failglob        off",
          "134: globstar        off",
          "135: gnu_errfmt      off",
          "136: histappend      off",
          "",
          "[Removed Lines]",
          "133: globasciiranges off",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a078e04c3d9163541cce590c3fd00f243fe77613",
      "candidate_info": {
        "commit_hash": "a078e04c3d9163541cce590c3fd00f243fe77613",
        "repo": "bminor/bash",
        "commit_url": "https://github.com/bminor/bash/commit/a078e04c3d9163541cce590c3fd00f243fe77613",
        "files": [
          "CWRU/CWRU.chlog",
          "MANIFEST",
          "bashhist.c",
          "configure",
          "configure.ac",
          "general.h",
          "lib/readline/doc/hstech.texi",
          "lib/readline/doc/hsuser.texi",
          "lib/readline/doc/version.texi",
          "lib/readline/histexpand.c",
          "lib/readline/history.h",
          "parse.y",
          "tests/histexp.right",
          "tests/histexp.tests",
          "tests/histexp6.sub"
        ],
        "message": "commit bash-20180628 snapshot",
        "before_after_code_files": [
          "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
          "bashhist.c||bashhist.c",
          "configure.ac||configure.ac",
          "general.h||general.h",
          "lib/readline/histexpand.c||lib/readline/histexpand.c",
          "lib/readline/history.h||lib/readline/history.h",
          "parse.y||parse.y",
          "tests/histexp.right||tests/histexp.right",
          "tests/histexp.tests||tests/histexp.tests",
          "tests/histexp6.sub||tests/histexp6.sub"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "CWRU/CWRU.chlog||CWRU/CWRU.chlog": [
          "File: CWRU/CWRU.chlog -> CWRU/CWRU.chlog",
          "--- Hunk 1 ---",
          "[Context before]",
          "3424:    takes a length parameter; otherwise equivalent to rl_function_of_keyseq.",
          "3426: lib/readline/readline.h",
          "3429: lib/readline/doc/rltech.texi",
          "3430:  - rl_function_of_keyseq_len: document new function interface",
          "",
          "[Removed Lines]",
          "3427:  - rl_function_of_keyseq_len: add extern declration for new function",
          "",
          "[Added Lines]",
          "3427:  - rl_function_of_keyseq_len: add extern declaration for new function",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3873:    function) without enabling debugging mode and not having initialized",
          "3874:    the variable previously (using a simple semaphore), create the",
          "3875:    variables",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3877:        6/25",
          "3878:        ----",
          "3879: configure.ac",
          "3880:  - opt_bash_malloc: bash malloc no longer disabled for systems that",
          "3881:    require eight-bit alignment; the bash malloc has had this for a",
          "3882:    long time",
          "3884:         7/4",
          "3885:         ---",
          "3886: bashline.c",
          "3887:  - pre_process_line: if command-oriented history is enabled, and the",
          "3888:    line being expanded is the second or later in a multi-line command,",
          "3889:    and we know the command is being saved as the current history entry,",
          "3890:    decrease history_length before calling history_expand so references",
          "3891:    like !! refer to the previous history entry as usual",
          "3893: lib/readline/histexpand.c",
          "3894:  - history_quoting_state: new variable, can be set by calling",
          "3895:    application before calling history_expand to note that the string",
          "3896:    being expanded is part of a quoted string. Can be set to a single",
          "3897:    quote, a double quote, or 0 (no quoting)",
          "3898:  - history_expand: look at history_quoting_state and honor the",
          "3899:    single-quote setting by not expanding any initial portion of the",
          "3900:    line before the closing single quote. This allows history expansions",
          "3901:    to be performed on a line containing a closing single quote if they",
          "3902:    appear after the single quote",
          "3904: lib/readline/history.h",
          "3905:  - history_quoting_state: extern declaration",
          "3907: bashhist.c",
          "3908:  - bash_history_inhibit_expansion: if history_quoting_state indicates",
          "3909:    that this string is single-quoted, skip over the single-quoted",
          "3910:    portion and determine whether or not the portion after the",
          "3911:    quoted string needs to be inhibited from history expansion",
          "3913: parse.y",
          "3914:  - shell_getc: set history_quoting_state based on the contents of the",
          "3915:    current delimiter before calling pre_process_line",
          "3917:         7/6",
          "3918:         ---",
          "3919: lib/readline/doc/hsuser.texi",
          "3920:  - describe the default behavior of backslash and single and double",
          "3921:    quotes",
          "3923: lib/readline/doc/hstech.texi",
          "3924:  - history_quoting_state: describe effect of setting this variable",
          "3925:  - history_quotes_inihibit_expansion: expand the description to include",
          "3926:    the default quoting behavior that setting this variable enables",
          "",
          "---------------"
        ],
        "bashhist.c||bashhist.c": [
          "File: bashhist.c -> bashhist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:      char *string;",
          "214:      int i;",
          "215: {",
          "217:   char hx[2];",
          "219:   hx[0] = history_expansion_char;",
          "",
          "[Removed Lines]",
          "216:   int t;",
          "",
          "[Added Lines]",
          "216:   int t, si;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:     return (1);",
          "237: #endif",
          "242:     {",
          "",
          "[Removed Lines]",
          "241:   else if ((t = skip_to_histexp (string, 0, hx, SD_NOJMP|SD_HISTEXP)) > 0)",
          "",
          "[Added Lines]",
          "239:   si = 0;",
          "242:   if (history_quoting_state == '\\'')",
          "243:     {",
          "244:       si = skip_to_delim (string, 0, \"'\", SD_NOJMP|SD_HISTEXP);",
          "245:       if (string[si] == 0 || si >= i)",
          "246:  return (1);",
          "247:       si++;",
          "248:     }",
          "252:   if ((t = skip_to_histexp (string, si, hx, SD_NOJMP|SD_HISTEXP)) > 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "550:   if (!history_expansion_inhibited && history_expansion && history_expansion_p (line))",
          "551:     {",
          "552:       expanded = history_expand (line, &history_value);",
          "554:       if (expanded)",
          "555:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564:   command, decrease history_length so references to history expansions",
          "565:   in these lines refer to the previous history entry and not the",
          "567:       if (history_length > 0 && command_oriented_history && current_command_first_line_saved && current_command_line_count > 1)",
          "568:         history_length--;",
          "570:       if (history_length >= 0 && command_oriented_history && current_command_first_line_saved && current_command_line_count > 1)",
          "571:         history_length++;",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: dnl",
          "6: dnl Process this file with autoconf to produce a configure script.",
          "10: #",
          "11: #   This program is free software: you can redistribute it and/or modify",
          "",
          "[Removed Lines]",
          "8: # Copyright (C) 1987-2016 Free Software Foundation, Inc.",
          "",
          "[Added Lines]",
          "8: # Copyright (C) 1987-2018 Free Software Foundation, Inc.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: #   You should have received a copy of the GNU General Public License",
          "22: #   along with this program.  If not, see <http://www.gnu.org/licenses/>.",
          "26: define(bashvers, 5.0)",
          "27: define(relstatus, alpha)",
          "",
          "[Removed Lines]",
          "24: AC_REVISION([for Bash 5.0, version 4.092])dnl",
          "",
          "[Added Lines]",
          "24: AC_REVISION([for Bash 5.0, version 4.094])dnl",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: dnl and some need a special compiler or loader",
          "64: dnl look in the NOTES file for more",
          "65: case \"${host_cpu}-${host_os}\" in",
          "66: alpha*-*) opt_bash_malloc=no ;; # alpha running osf/1 or linux",
          "69: sparc-svr4*) opt_bash_malloc=no ;; # sparc SVR4, SVR4.2",
          "72: m68k-sysv) opt_bash_malloc=no ;; # fixes file descriptor leak in closedir",
          "73: sparc-linux*) opt_bash_malloc=no ;; # sparc running linux; requires ELF",
          "93: esac",
          "95: # memory scrambling on free()",
          "",
          "[Removed Lines]",
          "70: sparc-netbsd*) opt_bash_malloc=no ;; # needs 8-byte alignment",
          "71: mips-irix6*) opt_bash_malloc=no ;; # needs 8-byte alignment",
          "74: #*-freebsd*-gnu) opt_bash_malloc=no ;; # there's some undetermined problem here",
          "75: #*-freebsd*) opt_bash_malloc=no ;; # they claim it's better; I disagree",
          "",
          "[Added Lines]",
          "66: # mostly obsolete platforms",
          "76: # These need additional investigation",
          "80: # Mach-derived systems have a ton of extra malloc functions and lack sbrk(2)",
          "87: # Niche or non-mainstream-shell-user systems",
          "91: # Deprecated -- bash malloc is suitable",
          "92: #sparc-netbsd*) opt_bash_malloc=no ;; # needs 8-byte alignment",
          "93: #mips-irix6*) opt_bash_malloc=no ;; # needs 8-byte alignment",
          "94: #*-freebsd*-gnu) opt_bash_malloc=no ;; # there's some undetermined problem here",
          "95: #*-freebsd*) opt_bash_malloc=no ;; # they claim it's better; I disagree",
          "96: #*-openbsd*) opt_bash_malloc=no ;; # they claim it needs eight-bit alignment",
          "97: #*-mirbsd*) opt_bash_malloc=no ;; # they claim it needs eight-bit alignment",
          "",
          "---------------"
        ],
        "general.h||general.h": [
          "File: general.h -> general.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   ((TYPE_WIDTH (t) - TYPE_SIGNED (t)) * 302 / 1000 \\",
          "111:    + 1 + TYPE_SIGNED (t))",
          "115: #define INT_BUFSIZE_BOUND(t) (INT_STRLEN_BOUND (t) + 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: #if 0",
          "116: #define INT_STRLEN_BOUND(t) \\",
          "117:   (INT_BITS_STRLEN_BOUND (TYPE_WIDTH (t) - TYPE_SIGNED (t)) + TYPE_SIGNED(t))",
          "118: #endif",
          "",
          "---------------"
        ],
        "lib/readline/histexpand.c||lib/readline/histexpand.c": [
          "File: lib/readline/histexpand.c -> lib/readline/histexpand.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: rl_linebuf_func_t *history_inhibit_expansion_function;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: int history_quoting_state = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "965:  {",
          "966: #if defined (HANDLE_MULTIBYTE)",
          "967:    if (MB_CUR_MAX > 1 && rl_byte_oriented == 0)",
          "",
          "[Removed Lines]",
          "964:       for (i = dquote = squote = 0; string[i]; i++)",
          "",
          "[Added Lines]",
          "966:       dquote = history_quoting_state == '\"';",
          "967:       squote = history_quoting_state == '\\'';",
          "970:   single-quoted string, consume the rest of the string right now",
          "972:       i = 0;",
          "973:       if (squote && history_quotes_inhibit_expansion)",
          "974:  {",
          "975:    hist_string_extract_single_quoted (string, &i, 0);",
          "976:    squote = 0;",
          "977:    if (string[i])",
          "978:      i++;",
          "979:  }",
          "981:       for ( ; string[i]; i++)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1049:     }",
          "1053:     {",
          "1054:       int qc, tchar = string[i];",
          "",
          "[Removed Lines]",
          "1052:   for (passc = dquote = squote = i = j = 0; i < l; i++)",
          "",
          "[Added Lines]",
          "1069:   dquote = history_quoting_state == '\"';",
          "1070:   squote = history_quoting_state == '\\'';",
          "1073:      single-quoted string, consume the rest of the string right now",
          "1075:   i = j = 0;",
          "1076:   if (squote && history_quotes_inhibit_expansion)",
          "1077:     {",
          "1078:       int c;",
          "1080:       hist_string_extract_single_quoted (string, &i, 0);",
          "1081:       squote = 0;",
          "1082:       for (c = 0; c < i; c++)",
          "1083:  ADD_CHAR (string[c]);",
          "1084:       if (string[i])",
          "1085:  {",
          "1086:    ADD_CHAR (string[i]);",
          "1087:    i++;",
          "1088:  }",
          "1089:     }",
          "1091:   for (passc = 0; i < l; i++)",
          "",
          "---------------"
        ],
        "lib/readline/history.h||lib/readline/history.h": [
          "File: lib/readline/history.h -> lib/readline/history.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "261: extern char history_comment_char;",
          "262: extern char *history_no_expand_chars;",
          "263: extern char *history_search_delimiter_chars;",
          "264: extern int history_quotes_inhibit_expansion;",
          "266: extern int history_write_timestamps;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266: extern int history_quoting_state;",
          "",
          "---------------"
        ],
        "parse.y||parse.y": [
          "File: parse.y -> parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "2414:  {",
          "2415:    char *expansions;",
          "2416: #  if defined (BANG_HISTORY)",
          "2420:       performing history expansion, even if we're on a different",
          "2423:    if (current_delimiter (dstack) == '\\'')",
          "2425: #  endif",
          "2428:    expansions = pre_process_line (shell_input_line, 1, 1);",
          "2429: #  if defined (BANG_HISTORY)",
          "2431: #  endif",
          "2432:    if (expansions != shell_input_line)",
          "2433:      {",
          "",
          "[Removed Lines]",
          "2417:    int old_hist;",
          "2422:    old_hist = history_expansion_inhibited;",
          "2424:      history_expansion_inhibited = 1;",
          "2430:    history_expansion_inhibited = old_hist;",
          "",
          "[Added Lines]",
          "2421:      history_quoting_state = '\\'';",
          "2422:    else if (current_delimiter (dstack) == '\"')",
          "2423:      history_quoting_state = '\"';",
          "2424:    else",
          "2425:      history_quoting_state = 0;",
          "2431:    history_quoting_state = 0;",
          "",
          "---------------"
        ],
        "tests/histexp.right||tests/histexp.right": [
          "File: tests/histexp.right -> tests/histexp.right",
          "--- Hunk 1 ---",
          "[Context before]",
          "224: echo *(/tmp|/dev|/usr)/Step1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226: one",
          "227:  echo echo one",
          "228: echo one",
          "229: echo one",
          "230: echo one",
          "231:     1  set -o histexpand",
          "232:     2  echo one",
          "233:     3  for f in a b c; do  echo echo one; done",
          "234: two",
          "235:  echo echo two",
          "236: echo two",
          "237: echo two",
          "238: echo two",
          "239:     1  echo two",
          "240:     2  for f in a b c; do  echo echo two; done",
          "",
          "---------------"
        ],
        "tests/histexp.tests||tests/histexp.tests": [
          "File: tests/histexp.tests -> tests/histexp.tests",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: ${THIS_SH} ./histexp3.sub",
          "142: ${THIS_SH} ./histexp4.sub",
          "143: ${THIS_SH} ./histexp5.sub",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144: ${THIS_SH} ./histexp6.sub",
          "",
          "---------------"
        ],
        "tests/histexp6.sub||tests/histexp6.sub": [
          "File: tests/histexp6.sub -> tests/histexp6.sub",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: HISTFILE=$TMPDIR/bashhist-$$",
          "3: set -o history",
          "4: set -o histexpand",
          "6: echo one",
          "8: for f in a b c; do",
          "9:  echo !!",
          "10: done",
          "12: history",
          "13: history -c",
          "15: echo two",
          "16: for f in a b c; do",
          "17:  echo !-1",
          "18: done",
          "20: history",
          "22: set +o history",
          "23: rm -f $HISTFILE",
          "",
          "---------------"
        ]
      }
    }
  ]
}