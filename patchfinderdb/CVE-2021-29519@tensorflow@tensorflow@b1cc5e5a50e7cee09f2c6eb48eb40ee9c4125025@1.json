{
  "cve_id": "CVE-2021-29519",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. The API of `tf.raw_ops.SparseCross` allows combinations which would result in a `CHECK`-failure and denial of service. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/3d782b7d47b1bf2ed32bd4a246d6d6cadc4c903d/tensorflow/core/kernels/sparse_cross_op.cc#L114-L116) is tricked to consider a tensor of type `tstring` which in fact contains integral elements. Fixing the type confusion by preventing mixing `DT_STRING` and `DT_INT64` types solves this issue. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "b1cc5e5a50e7cee09f2c6eb48eb40ee9c4125025",
  "patch_info": {
    "commit_hash": "b1cc5e5a50e7cee09f2c6eb48eb40ee9c4125025",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/b1cc5e5a50e7cee09f2c6eb48eb40ee9c4125025",
    "files": [
      "tensorflow/core/kernels/sparse_cross_op.cc"
    ],
    "message": "Fix `tf.raw_ops.SparseCross` failing CHECK.\n\nPiperOrigin-RevId: 368701671\nChange-Id: Id805729dd9ba0bda36e4bb309408129b55fb649d",
    "before_after_code_files": [
      "tensorflow/core/kernels/sparse_cross_op.cc||tensorflow/core/kernels/sparse_cross_op.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/sparse_cross_op.cc||tensorflow/core/kernels/sparse_cross_op.cc": [
      "File: tensorflow/core/kernels/sparse_cross_op.cc -> tensorflow/core/kernels/sparse_cross_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"tensorflow/core/framework/tensor.h\"",
      "28: #include \"tensorflow/core/framework/tensor_shape.h\"",
      "29: #include \"tensorflow/core/framework/types.h\"",
      "30: #include \"tensorflow/core/lib/core/stringpiece.h\"",
      "31: #include \"tensorflow/core/lib/strings/str_util.h\"",
      "32: #include \"tensorflow/core/platform/fingerprint.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: #include \"tensorflow/core/framework/types.pb.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "460: Status ValidateInput(const OpInputList& indices_list_in,",
      "461:                      const OpInputList& values_list_in,",
      "462:                      const OpInputList& shapes_list_in,",
      "464:   const auto size = indices_list_in.size();",
      "466:   for (int i = 0; i < size; i++) {",
      "467:     if (!TensorShapeUtils::IsMatrix(indices_list_in[i].shape())) {",
      "468:       return errors::InvalidArgument(",
      "469:           \"Input indices should be a matrix but received shape \",",
      "",
      "[Removed Lines]",
      "463:                      const OpInputList& dense_list_in) {",
      "",
      "[Added Lines]",
      "464:                      const OpInputList& dense_list_in,",
      "465:                      const DataType& internal_type) {",
      "469:   bool check_type = internal_type != DT_INVALID;",
      "472:     if (check_type && indices_list_in[i].dtype() != DT_INT64) {",
      "473:       return errors::InvalidArgument(\"Input indices should be of type \",",
      "474:                                      DT_INT64, \" but received \",",
      "475:                                      indices_list_in[i].dtype());",
      "476:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "482:                                    values_list_in.size());",
      "483:   }",
      "484:   for (int i = 0; i < size; i++) {",
      "485:     if (!TensorShapeUtils::IsVector(values_list_in[i].shape())) {",
      "486:       return errors::InvalidArgument(",
      "487:           \"Input values should be a vector but received shape \",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "497:     if (check_type && internal_type == DT_STRING &&",
      "498:         values_list_in[i].dtype() == DT_INT64) {",
      "499:       return errors::InvalidArgument(\"Input values should be of internal type \",",
      "500:                                      internal_type, \" but received \",",
      "501:                                      values_list_in[i].dtype());",
      "502:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "502:                                    shapes_list_in.size());",
      "503:   }",
      "504:   for (int i = 0; i < size; i++) {",
      "505:     if (!TensorShapeUtils::IsVector(shapes_list_in[i].shape())) {",
      "506:       return errors::InvalidArgument(",
      "507:           \"Input shapes should be a vector but received shape \",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "523:     if (check_type && shapes_list_in[i].dtype() != DT_INT64) {",
      "524:       return errors::InvalidArgument(\"Input shape should be of type \", DT_INT64,",
      "525:                                      \" but received \",",
      "526:                                      shapes_list_in[i].dtype());",
      "527:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "519:   for (int i = 0; i < dense_list_in.size(); ++i) {",
      "520:     if (!TensorShapeUtils::IsMatrix(dense_list_in[i].shape())) {",
      "521:       return errors::InvalidArgument(",
      "522:           \"Dense inputs should be a matrix but received shape \",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "545:     if (check_type && internal_type == DT_STRING &&",
      "546:         dense_list_in[i].dtype() == DT_INT64) {",
      "547:       return errors::InvalidArgument(\"Dense inputs should be of internal type \",",
      "548:                                      internal_type, \" but received \",",
      "549:                                      dense_list_in[i].dtype());",
      "550:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "698:     int64 signed_hash_key_;",
      "699:     OP_REQUIRES_OK(context, context->GetAttr(\"hash_key\", &signed_hash_key_));",
      "700:     hash_key_ = static_cast<uint64>(signed_hash_key_);",
      "701:   }",
      "703:   void Compute(OpKernelContext* context) override {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "732:     OP_REQUIRES_OK(context, context->GetAttr(\"internal_type\", &internal_type_));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "711:     OP_REQUIRES_OK(context,",
      "712:                    context->input_list(\"dense_inputs\", &dense_list_in));",
      "717:     std::vector<std::unique_ptr<ColumnInterface<InternalType>>> columns =",
      "718:         GenerateColumnsFromInput<InternalType>(indices_list_in, values_list_in,",
      "",
      "[Removed Lines]",
      "714:     OP_REQUIRES_OK(context, ValidateInput(indices_list_in, values_list_in,",
      "715:                                           shapes_list_in, dense_list_in));",
      "",
      "[Added Lines]",
      "746:     DataType internal_type = internal_type_;",
      "747:     OP_REQUIRES_OK(",
      "748:         context, ValidateInput(indices_list_in, values_list_in, shapes_list_in,",
      "749:                                dense_list_in, internal_type));",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "756:  private:",
      "757:   int64 num_buckets_;",
      "758:   uint64 hash_key_;",
      "759: };",
      "761: class SparseCrossV2Op : public OpKernel {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "793:   DataType internal_type_;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "773:     OP_REQUIRES_OK(context,",
      "774:                    context->input_list(\"dense_inputs\", &dense_list_in));",
      "779:     const Tensor* sep_t;",
      "780:     OP_REQUIRES_OK(context, context->input(\"sep\", &sep_t));",
      "",
      "[Removed Lines]",
      "776:     OP_REQUIRES_OK(context, ValidateInput(indices_list_in, values_list_in,",
      "777:                                           shapes_list_in, dense_list_in));",
      "",
      "[Added Lines]",
      "812:     DataType internal_type = DT_INVALID;",
      "813:     OP_REQUIRES_OK(",
      "814:         context, ValidateInput(indices_list_in, values_list_in, shapes_list_in,",
      "815:                                dense_list_in, internal_type));",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "832:     OP_REQUIRES_OK(context,",
      "833:                    context->input_list(\"dense_inputs\", &dense_list_in));",
      "838:     const Tensor* num_buckets_t;",
      "839:     OP_REQUIRES_OK(context, context->input(\"num_buckets\", &num_buckets_t));",
      "",
      "[Removed Lines]",
      "835:     OP_REQUIRES_OK(context, ValidateInput(indices_list_in, values_list_in,",
      "836:                                           shapes_list_in, dense_list_in));",
      "",
      "[Added Lines]",
      "874:     DataType internal_type = DT_INVALID;",
      "875:     OP_REQUIRES_OK(",
      "876:         context, ValidateInput(indices_list_in, values_list_in, shapes_list_in,",
      "877:                                dense_list_in, internal_type));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a6eaf1d55a93dac21709b12248b9f920e5ee36f3",
      "candidate_info": {
        "commit_hash": "a6eaf1d55a93dac21709b12248b9f920e5ee36f3",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a6eaf1d55a93dac21709b12248b9f920e5ee36f3",
        "files": [
          "tensorflow/core/kernels/sparse_cross_op.cc"
        ],
        "message": "Fix tf.raw_ops.SparseCross failing CHECK.",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_cross_op.cc||tensorflow/core/kernels/sparse_cross_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_cross_op.cc||tensorflow/core/kernels/sparse_cross_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_cross_op.cc||tensorflow/core/kernels/sparse_cross_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_cross_op.cc||tensorflow/core/kernels/sparse_cross_op.cc": [
          "File: tensorflow/core/kernels/sparse_cross_op.cc -> tensorflow/core/kernels/sparse_cross_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"tensorflow/core/framework/tensor.h\"",
          "27: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "28: #include \"tensorflow/core/framework/types.h\"",
          "29: #include \"tensorflow/core/lib/core/stringpiece.h\"",
          "30: #include \"tensorflow/core/lib/strings/str_util.h\"",
          "31: #include \"tensorflow/core/platform/fingerprint.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include \"tensorflow/core/framework/types.pb.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:     int64 signed_hash_key_;",
          "296:     OP_REQUIRES_OK(context, context->GetAttr(\"hash_key\", &signed_hash_key_));",
          "297:     hash_key_ = static_cast<uint64>(signed_hash_key_);",
          "298:   }",
          "300:   void Compute(OpKernelContext* context) override {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:     OP_REQUIRES_OK(context, context->GetAttr(\"internal_type\", &internal_type_));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "308:     OP_REQUIRES_OK(context,",
          "309:                    context->input_list(\"dense_inputs\", &dense_list_in));",
          "314:     std::vector<std::unique_ptr<ColumnInterface<InternalType>>> columns =",
          "315:         GenerateColumnsFromInput(indices_list_in, values_list_in,",
          "",
          "[Removed Lines]",
          "311:     OP_REQUIRES_OK(context, ValidateInput(indices_list_in, values_list_in,",
          "312:                                           shapes_list_in, dense_list_in));",
          "",
          "[Added Lines]",
          "313:     DataType internal_type = internal_type_;",
          "314:     OP_REQUIRES_OK(",
          "315:         context, ValidateInput(indices_list_in, values_list_in, shapes_list_in,",
          "316:                                dense_list_in, internal_type));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "353:   Status ValidateInput(const OpInputList& indices_list_in,",
          "354:                        const OpInputList& values_list_in,",
          "355:                        const OpInputList& shapes_list_in,",
          "357:     const auto size = indices_list_in.size();",
          "359:     for (int i = 0; i < size; i++) {",
          "360:       if (!TensorShapeUtils::IsMatrix(indices_list_in[i].shape())) {",
          "361:         return errors::InvalidArgument(",
          "362:             \"Input indices should be a matrix but received shape \",",
          "",
          "[Removed Lines]",
          "356:                        const OpInputList& dense_list_in) {",
          "",
          "[Added Lines]",
          "360:                        const OpInputList& dense_list_in,",
          "361:                        const DataType& internal_type) {",
          "365:     bool check_type = internal_type != DT_INVALID;",
          "368:       if (check_type && indices_list_in[i].dtype() != DT_INT64) {",
          "369:         return errors::InvalidArgument(\"Input indices should be of type \",",
          "370:                                        DT_INT64, \" but received \",",
          "371:                                        indices_list_in[i].dtype());",
          "372:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "375:                                      values_list_in.size());",
          "376:     }",
          "377:     for (int i = 0; i < size; i++) {",
          "378:       if (!TensorShapeUtils::IsVector(values_list_in[i].shape())) {",
          "379:         return errors::InvalidArgument(",
          "380:             \"Input values should be a vector but received shape \",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393:       if (check_type && internal_type == DT_STRING &&",
          "394:           values_list_in[i].dtype() == DT_INT64) {",
          "395:         return errors::InvalidArgument(\"Input values should be of internal type \",",
          "396:                                        internal_type, \" but received \",",
          "397:                                        values_list_in[i].dtype());",
          "398:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "395:                                      shapes_list_in.size());",
          "396:     }",
          "397:     for (int i = 0; i < size; i++) {",
          "398:       if (!TensorShapeUtils::IsVector(shapes_list_in[i].shape())) {",
          "399:         return errors::InvalidArgument(",
          "400:             \"Input shapes should be a vector but received shape \",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419:       if (check_type && shapes_list_in[i].dtype() != DT_INT64) {",
          "420:         return errors::InvalidArgument(\"Input shape should be of type \", DT_INT64,",
          "421:                                        \" but received \",",
          "422:                                        shapes_list_in[i].dtype());",
          "423:       }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "412:     for (int i = 0; i < dense_list_in.size(); ++i) {",
          "413:       if (!TensorShapeUtils::IsMatrix(dense_list_in[i].shape())) {",
          "414:         return errors::InvalidArgument(",
          "415:             \"Dense inputs should be a matrix but received shape \",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:       if (check_type && internal_type == DT_STRING &&",
          "442:           dense_list_in[i].dtype() == DT_INT64) {",
          "443:         return errors::InvalidArgument(\"Dense inputs should be of internal type \",",
          "444:                                        internal_type, \" but received \",",
          "445:                                        dense_list_in[i].dtype());",
          "446:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}