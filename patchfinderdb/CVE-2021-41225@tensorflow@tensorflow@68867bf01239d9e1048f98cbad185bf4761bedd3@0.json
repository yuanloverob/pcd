{
  "cve_id": "CVE-2021-41225",
  "cve_desc": "TensorFlow is an open source platform for machine learning. In affected versions TensorFlow's Grappler optimizer has a use of unitialized variable. If the `train_nodes` vector (obtained from the saved model that gets optimized) does not contain a `Dequeue` node, then `dequeue_node` is left unitialized. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "68867bf01239d9e1048f98cbad185bf4761bedd3",
  "patch_info": {
    "commit_hash": "68867bf01239d9e1048f98cbad185bf4761bedd3",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/68867bf01239d9e1048f98cbad185bf4761bedd3",
    "files": [
      "tensorflow/core/grappler/optimizers/auto_parallel.cc",
      "tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
    ],
    "message": "Prevent unitialized variable use in grappler.\n\nPiperOrigin-RevId: 399702928\nChange-Id: Id7e75451fbff297692dfb687f60ea04b25c96b24",
    "before_after_code_files": [
      "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc",
      "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc": [
      "File: tensorflow/core/grappler/optimizers/auto_parallel.cc -> tensorflow/core/grappler/optimizers/auto_parallel.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "152:   TF_RETURN_IF_ERROR(ComputeTransitiveFanin(graph_, item.fetch, &train_nodes));",
      "153:   LOG(INFO) << \"Number of training nodes: \" << train_nodes.size();",
      "156:   for (const auto& train_node : train_nodes) {",
      "157:     if (IsDequeueOp(*train_node)) {",
      "158:       dequeue_node = train_node;",
      "",
      "[Removed Lines]",
      "155:   const NodeDef* dequeue_node;",
      "",
      "[Added Lines]",
      "155:   const NodeDef* dequeue_node = nullptr;",
      "",
      "---------------"
    ],
    "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc": [
      "File: tensorflow/core/grappler/optimizers/auto_parallel_test.cc -> tensorflow/core/grappler/optimizers/auto_parallel_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "126:   EXPECT_EQ(\"^AutoParallel-Control-Fetch\", node_gradient.input(0));",
      "127: }",
      "129: }  // namespace",
      "130: }  // namespace grappler",
      "131: }  // namespace tensorflow",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129: TEST_F(AutoParallelTest, SimpleParallelNoDequeue) {",
      "130:   tensorflow::Scope s = tensorflow::Scope::DisabledShapeInferenceScope();",
      "131:   Output constant_a = ops::Const(s.WithOpName(\"constant_a\"), 1.0f, {1});",
      "132:   Output constant_c = ops::Const(s.WithOpName(\"constant_c\"), 1.0f, {1});",
      "133:   Output constant_b = ops::Const(s.WithOpName(\"constant_b\"), 1, {1});",
      "134:   Output var = ops::Variable(s.WithOpName(\"var\"), {1}, DT_FLOAT);",
      "135:   Output assign = ops::Assign(s.WithOpName(\"assign\"), {var}, {constant_a});",
      "136:   Output add = ops::AddN(s.WithOpName(\"add\"), {constant_a, constant_c});",
      "137:   Output learning_rate = ops::Const(s.WithOpName(\"learning_rate\"), 0.01f, {1});",
      "138:   Output apply_gradient = ops::ApplyGradientDescent(",
      "139:       s.WithOpName(\"apply_gradient\"), {var}, {learning_rate}, {add});",
      "141:   GrapplerItem item;",
      "142:   item.init_ops.push_back(\"assign\");",
      "143:   item.fetch.push_back(\"apply_gradient\");",
      "144:   item.init_ops.push_back(\"assign\");",
      "145:   TF_CHECK_OK(s.ToGraphDef(&item.graph));",
      "147:   AutoParallel parallel(2);",
      "148:   GraphDef output;",
      "149:   Status status = parallel.Optimize(nullptr, item, &output);",
      "150:   TF_EXPECT_OK(status);",
      "151: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d06ed1707c01002bbd002bd8ce1e86fdb699f086",
      "candidate_info": {
        "commit_hash": "d06ed1707c01002bbd002bd8ce1e86fdb699f086",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/d06ed1707c01002bbd002bd8ce1e86fdb699f086",
        "files": [
          "tensorflow/core/grappler/optimizers/auto_parallel.cc",
          "tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
        ],
        "message": "Prevent unitialized variable use in grappler.\n\nPiperOrigin-RevId: 399702928\nChange-Id: Id7e75451fbff297692dfb687f60ea04b25c96b24",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc",
          "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc",
            "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc",
            "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc": [
          "File: tensorflow/core/grappler/optimizers/auto_parallel.cc -> tensorflow/core/grappler/optimizers/auto_parallel.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:   TF_RETURN_IF_ERROR(ComputeTransitiveFanin(graph_, item.fetch, &train_nodes));",
          "153:   LOG(INFO) << \"Number of training nodes: \" << train_nodes.size();",
          "156:   for (const auto& train_node : train_nodes) {",
          "157:     if (IsDequeueOp(*train_node)) {",
          "158:       dequeue_node = train_node;",
          "",
          "[Removed Lines]",
          "155:   const NodeDef* dequeue_node;",
          "",
          "[Added Lines]",
          "155:   const NodeDef* dequeue_node = nullptr;",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc": [
          "File: tensorflow/core/grappler/optimizers/auto_parallel_test.cc -> tensorflow/core/grappler/optimizers/auto_parallel_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   EXPECT_EQ(\"^AutoParallel-Control-Fetch\", node_gradient.input(0));",
          "127: }",
          "129: }  // namespace",
          "130: }  // namespace grappler",
          "131: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: TEST_F(AutoParallelTest, SimpleParallelNoDequeue) {",
          "130:   tensorflow::Scope s = tensorflow::Scope::DisabledShapeInferenceScope();",
          "131:   Output constant_a = ops::Const(s.WithOpName(\"constant_a\"), 1.0f, {1});",
          "132:   Output constant_c = ops::Const(s.WithOpName(\"constant_c\"), 1.0f, {1});",
          "133:   Output constant_b = ops::Const(s.WithOpName(\"constant_b\"), 1, {1});",
          "134:   Output var = ops::Variable(s.WithOpName(\"var\"), {1}, DT_FLOAT);",
          "135:   Output assign = ops::Assign(s.WithOpName(\"assign\"), {var}, {constant_a});",
          "136:   Output add = ops::AddN(s.WithOpName(\"add\"), {constant_a, constant_c});",
          "137:   Output learning_rate = ops::Const(s.WithOpName(\"learning_rate\"), 0.01f, {1});",
          "138:   Output apply_gradient = ops::ApplyGradientDescent(",
          "139:       s.WithOpName(\"apply_gradient\"), {var}, {learning_rate}, {add});",
          "141:   GrapplerItem item;",
          "142:   item.init_ops.push_back(\"assign\");",
          "143:   item.fetch.push_back(\"apply_gradient\");",
          "144:   item.init_ops.push_back(\"assign\");",
          "145:   TF_CHECK_OK(s.ToGraphDef(&item.graph));",
          "147:   AutoParallel parallel(2);",
          "148:   GraphDef output;",
          "149:   Status status = parallel.Optimize(nullptr, item, &output);",
          "150:   TF_EXPECT_OK(status);",
          "151: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09e872e27692ab54327de640ef1e80be9d5ed13b",
      "candidate_info": {
        "commit_hash": "09e872e27692ab54327de640ef1e80be9d5ed13b",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/09e872e27692ab54327de640ef1e80be9d5ed13b",
        "files": [
          "tensorflow/core/grappler/optimizers/auto_parallel.cc",
          "tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
        ],
        "message": "Prevent unitialized variable use in grappler.\n\nPiperOrigin-RevId: 399702928\nChange-Id: Id7e75451fbff297692dfb687f60ea04b25c96b24",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc",
          "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc",
            "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc",
            "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc": [
          "File: tensorflow/core/grappler/optimizers/auto_parallel.cc -> tensorflow/core/grappler/optimizers/auto_parallel.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:   TF_RETURN_IF_ERROR(ComputeTransitiveFanin(graph_, item.fetch, &train_nodes));",
          "153:   LOG(INFO) << \"Number of training nodes: \" << train_nodes.size();",
          "156:   for (const auto& train_node : train_nodes) {",
          "157:     if (IsDequeueOp(*train_node)) {",
          "158:       dequeue_node = train_node;",
          "",
          "[Removed Lines]",
          "155:   const NodeDef* dequeue_node;",
          "",
          "[Added Lines]",
          "155:   const NodeDef* dequeue_node = nullptr;",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc": [
          "File: tensorflow/core/grappler/optimizers/auto_parallel_test.cc -> tensorflow/core/grappler/optimizers/auto_parallel_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   EXPECT_EQ(\"^AutoParallel-Control-Fetch\", node_gradient.input(0));",
          "127: }",
          "129: }  // namespace",
          "130: }  // namespace grappler",
          "131: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: TEST_F(AutoParallelTest, SimpleParallelNoDequeue) {",
          "130:   tensorflow::Scope s = tensorflow::Scope::DisabledShapeInferenceScope();",
          "131:   Output constant_a = ops::Const(s.WithOpName(\"constant_a\"), 1.0f, {1});",
          "132:   Output constant_c = ops::Const(s.WithOpName(\"constant_c\"), 1.0f, {1});",
          "133:   Output constant_b = ops::Const(s.WithOpName(\"constant_b\"), 1, {1});",
          "134:   Output var = ops::Variable(s.WithOpName(\"var\"), {1}, DT_FLOAT);",
          "135:   Output assign = ops::Assign(s.WithOpName(\"assign\"), {var}, {constant_a});",
          "136:   Output add = ops::AddN(s.WithOpName(\"add\"), {constant_a, constant_c});",
          "137:   Output learning_rate = ops::Const(s.WithOpName(\"learning_rate\"), 0.01f, {1});",
          "138:   Output apply_gradient = ops::ApplyGradientDescent(",
          "139:       s.WithOpName(\"apply_gradient\"), {var}, {learning_rate}, {add});",
          "141:   GrapplerItem item;",
          "142:   item.init_ops.push_back(\"assign\");",
          "143:   item.fetch.push_back(\"apply_gradient\");",
          "144:   item.init_ops.push_back(\"assign\");",
          "145:   TF_CHECK_OK(s.ToGraphDef(&item.graph));",
          "147:   AutoParallel parallel(2);",
          "148:   GraphDef output;",
          "149:   Status status = parallel.Optimize(nullptr, item, &output);",
          "150:   TF_EXPECT_OK(status);",
          "151: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "342da98b5d2b677ca3649b2299df76484b100607",
      "candidate_info": {
        "commit_hash": "342da98b5d2b677ca3649b2299df76484b100607",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/342da98b5d2b677ca3649b2299df76484b100607",
        "files": [
          "tensorflow/core/grappler/optimizers/auto_parallel.cc",
          "tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
        ],
        "message": "Prevent unitialized variable use in grappler.\n\nPiperOrigin-RevId: 399702928\nChange-Id: Id7e75451fbff297692dfb687f60ea04b25c96b24",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc",
          "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc",
            "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc",
            "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc": [
          "File: tensorflow/core/grappler/optimizers/auto_parallel.cc -> tensorflow/core/grappler/optimizers/auto_parallel.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:   TF_RETURN_IF_ERROR(ComputeTransitiveFanin(graph_, item.fetch, &train_nodes));",
          "153:   LOG(INFO) << \"Number of training nodes: \" << train_nodes.size();",
          "156:   for (const auto& train_node : train_nodes) {",
          "157:     if (IsDequeueOp(*train_node)) {",
          "158:       dequeue_node = train_node;",
          "",
          "[Removed Lines]",
          "155:   const NodeDef* dequeue_node;",
          "",
          "[Added Lines]",
          "155:   const NodeDef* dequeue_node = nullptr;",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc": [
          "File: tensorflow/core/grappler/optimizers/auto_parallel_test.cc -> tensorflow/core/grappler/optimizers/auto_parallel_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   EXPECT_EQ(\"^AutoParallel-Control-Fetch\", node_gradient.input(0));",
          "127: }",
          "129: }  // namespace",
          "130: }  // namespace grappler",
          "131: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: TEST_F(AutoParallelTest, SimpleParallelNoDequeue) {",
          "130:   tensorflow::Scope s = tensorflow::Scope::DisabledShapeInferenceScope();",
          "131:   Output constant_a = ops::Const(s.WithOpName(\"constant_a\"), 1.0f, {1});",
          "132:   Output constant_c = ops::Const(s.WithOpName(\"constant_c\"), 1.0f, {1});",
          "133:   Output constant_b = ops::Const(s.WithOpName(\"constant_b\"), 1, {1});",
          "134:   Output var = ops::Variable(s.WithOpName(\"var\"), {1}, DT_FLOAT);",
          "135:   Output assign = ops::Assign(s.WithOpName(\"assign\"), {var}, {constant_a});",
          "136:   Output add = ops::AddN(s.WithOpName(\"add\"), {constant_a, constant_c});",
          "137:   Output learning_rate = ops::Const(s.WithOpName(\"learning_rate\"), 0.01f, {1});",
          "138:   Output apply_gradient = ops::ApplyGradientDescent(",
          "139:       s.WithOpName(\"apply_gradient\"), {var}, {learning_rate}, {add});",
          "141:   GrapplerItem item;",
          "142:   item.init_ops.push_back(\"assign\");",
          "143:   item.fetch.push_back(\"apply_gradient\");",
          "144:   item.init_ops.push_back(\"assign\");",
          "145:   TF_CHECK_OK(s.ToGraphDef(&item.graph));",
          "147:   AutoParallel parallel(2);",
          "148:   GraphDef output;",
          "149:   Status status = parallel.Optimize(nullptr, item, &output);",
          "150:   TF_EXPECT_OK(status);",
          "151: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11f56fdb9125d1ad650a1b703d7336ef24e1efdd",
      "candidate_info": {
        "commit_hash": "11f56fdb9125d1ad650a1b703d7336ef24e1efdd",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/11f56fdb9125d1ad650a1b703d7336ef24e1efdd",
        "files": [
          "tensorflow/core/grappler/optimizers/auto_parallel.cc",
          "tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
        ],
        "message": "Prevent unitialized variable use in grappler.\n\nPiperOrigin-RevId: 399702928\nChange-Id: Id7e75451fbff297692dfb687f60ea04b25c96b24",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc",
          "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc",
            "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc",
            "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/auto_parallel.cc||tensorflow/core/grappler/optimizers/auto_parallel.cc": [
          "File: tensorflow/core/grappler/optimizers/auto_parallel.cc -> tensorflow/core/grappler/optimizers/auto_parallel.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:   TF_RETURN_IF_ERROR(ComputeTransitiveFanin(graph_, item.fetch, &train_nodes));",
          "153:   LOG(INFO) << \"Number of training nodes: \" << train_nodes.size();",
          "156:   for (const auto& train_node : train_nodes) {",
          "157:     if (IsDequeueOp(*train_node)) {",
          "158:       dequeue_node = train_node;",
          "",
          "[Removed Lines]",
          "155:   const NodeDef* dequeue_node;",
          "",
          "[Added Lines]",
          "155:   const NodeDef* dequeue_node = nullptr;",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/optimizers/auto_parallel_test.cc||tensorflow/core/grappler/optimizers/auto_parallel_test.cc": [
          "File: tensorflow/core/grappler/optimizers/auto_parallel_test.cc -> tensorflow/core/grappler/optimizers/auto_parallel_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   EXPECT_EQ(\"^AutoParallel-Control-Fetch\", node_gradient.input(0));",
          "127: }",
          "129: }  // namespace",
          "130: }  // namespace grappler",
          "131: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: TEST_F(AutoParallelTest, SimpleParallelNoDequeue) {",
          "130:   tensorflow::Scope s = tensorflow::Scope::DisabledShapeInferenceScope();",
          "131:   Output constant_a = ops::Const(s.WithOpName(\"constant_a\"), 1.0f, {1});",
          "132:   Output constant_c = ops::Const(s.WithOpName(\"constant_c\"), 1.0f, {1});",
          "133:   Output constant_b = ops::Const(s.WithOpName(\"constant_b\"), 1, {1});",
          "134:   Output var = ops::Variable(s.WithOpName(\"var\"), {1}, DT_FLOAT);",
          "135:   Output assign = ops::Assign(s.WithOpName(\"assign\"), {var}, {constant_a});",
          "136:   Output add = ops::AddN(s.WithOpName(\"add\"), {constant_a, constant_c});",
          "137:   Output learning_rate = ops::Const(s.WithOpName(\"learning_rate\"), 0.01f, {1});",
          "138:   Output apply_gradient = ops::ApplyGradientDescent(",
          "139:       s.WithOpName(\"apply_gradient\"), {var}, {learning_rate}, {add});",
          "141:   GrapplerItem item;",
          "142:   item.init_ops.push_back(\"assign\");",
          "143:   item.fetch.push_back(\"apply_gradient\");",
          "144:   item.init_ops.push_back(\"assign\");",
          "145:   TF_CHECK_OK(s.ToGraphDef(&item.graph));",
          "147:   AutoParallel parallel(2);",
          "148:   GraphDef output;",
          "149:   Status status = parallel.Optimize(nullptr, item, &output);",
          "150:   TF_EXPECT_OK(status);",
          "151: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}