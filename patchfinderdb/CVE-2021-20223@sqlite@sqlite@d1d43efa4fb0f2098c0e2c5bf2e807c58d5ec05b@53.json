{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "38f0ccc070d50ff693f62ee9dc8e508db18a62c4",
      "candidate_info": {
        "commit_hash": "38f0ccc070d50ff693f62ee9dc8e508db18a62c4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38f0ccc070d50ff693f62ee9dc8e508db18a62c4",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/sessionfuzz.c"
        ],
        "message": "Add the OMIT_ZLIB compile-time option to sessionfuzz.c.  (Originally checked into the wrong branch.)\n\nFossilOrigin-Name: 6019bf8a2db548fea4be4f49961937d5b12eba9e42c7c7a58babfaf3288cb0cd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/sessionfuzz.c||test/sessionfuzz.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6a3111cd0693bb51191d55a32ecd436341638d54ecb2df0778de681b4969241b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/sessionfuzz.c||test/sessionfuzz.c": [
          "File: test/sessionfuzz.c -> test/sessionfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "698: #include <stdio.h>",
          "699: #include <string.h>",
          "700: #include <assert.h>",
          "701: #include \"zlib.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "701: #ifndef OMIT_ZLIB",
          "703: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "715:   int argc,",
          "716:   sqlite3_value **argv",
          "717: ){",
          "718:   uLong nData;",
          "719:   uLongf sz;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "720: #ifdef OMIT_ZLIB",
          "721:   sqlite3_result_value(context, argv[0]);",
          "722: #else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "733:     }",
          "734:     sqlite3_free(pOut);",
          "735:   }",
          "736: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "741: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c683573fd4530567b11f224fad7b209349d9e84e",
      "candidate_info": {
        "commit_hash": "c683573fd4530567b11f224fad7b209349d9e84e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c683573fd4530567b11f224fad7b209349d9e84e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Enhance the \".quote\" mode in the shell so that it honors .separator.\n\nFossilOrigin-Name: b5e33ed537e7d7dcabc9f6dc91d6838e0d1657f323440e09e2e24ffa2ba6141a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98d4262018a81a9a36dd8beb4b02ff0e75cdcbb8a121d143157ffb37b228d60d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2205:       if( azArg==0 ) break;",
          "2206:       if( p->cnt==0 && p->showHeader ){",
          "2207:         for(i=0; i<nArg; i++){",
          "2209:           output_quoted_string(p->out, azCol[i]);",
          "2210:         }",
          "2212:       }",
          "2213:       p->cnt++;",
          "2214:       for(i=0; i<nArg; i++){",
          "2216:         if( (azArg[i]==0) || (aiType && aiType[i]==SQLITE_NULL) ){",
          "2217:           utf8_printf(p->out,\"NULL\");",
          "2218:         }else if( aiType && aiType[i]==SQLITE_TEXT ){",
          "",
          "[Removed Lines]",
          "2208:           if( i>0 ) raw_printf(p->out, \",\");",
          "2211:         raw_printf(p->out,\"\\n\");",
          "2215:         if( i>0 ) raw_printf(p->out, \",\");",
          "",
          "[Added Lines]",
          "2208:           if( i>0 ) fputs(p->colSeparator, p->out);",
          "2211:         fputs(p->rowSeparator, p->out);",
          "2215:         if( i>0 ) fputs(p->colSeparator, p->out);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2234:           output_quoted_string(p->out, azArg[i]);",
          "2235:         }",
          "2236:       }",
          "2238:       break;",
          "2239:     }",
          "2240:     case MODE_Ascii: {",
          "",
          "[Removed Lines]",
          "2237:       raw_printf(p->out,\"\\n\");",
          "",
          "[Added Lines]",
          "2237:       fputs(p->rowSeparator, p->out);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8218:       set_table_name(p, nArg>=3 ? azArg[2] : \"table\");",
          "8219:     }else if( c2=='q' && strncmp(azArg[1],\"quote\",n2)==0 ){",
          "8220:       p->mode = MODE_Quote;",
          "8221:     }else if( c2=='a' && strncmp(azArg[1],\"ascii\",n2)==0 ){",
          "8222:       p->mode = MODE_Ascii;",
          "8223:       sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Unit);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8221:       sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Comma);",
          "8222:       sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2826918d10e7c391a2ddf28bdec057e524731cb4",
      "candidate_info": {
        "commit_hash": "2826918d10e7c391a2ddf28bdec057e524731cb4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2826918d10e7c391a2ddf28bdec057e524731cb4",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtree1.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "The RTREE extension behaves has if data columns have type REAL, so we should actually declare them as REAL so that automatic indexes handle them correctly.  Ticket [e63b4d1a65546532]\n\nFossilOrigin-Name: 85a9b6a92fd5805d5936f02d555af395441607b9eb5f4dae63560b5e65663b00",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtree1.test||ext/rtree/rtree1.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3746:     }else if( pRtree->nAux>0 ){",
          "3747:       break;",
          "3748:     }else{",
          "3749:       pRtree->nDim2++;",
          "3751:     }",
          "3752:   }",
          "3753:   sqlite3_str_appendf(pSql, \");\");",
          "",
          "[Removed Lines]",
          "3750:       sqlite3_str_appendf(pSql, \",%.*s NUM\", rtreeTokenLength(zArg), zArg);",
          "",
          "[Added Lines]",
          "3749:       static const char *azFormat[] = {\",%.*s REAL\", \",%.*s INT\"};",
          "3751:       sqlite3_str_appendf(pSql, azFormat[eCoordType],",
          "3752:                           rtreeTokenLength(zArg), zArg);",
          "",
          "---------------"
        ],
        "ext/rtree/rtree1.test||ext/rtree/rtree1.test": [
          "File: ext/rtree/rtree1.test -> ext/rtree/rtree1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "716:   SELECT rt0.c1 > '-1' FROM rt0;",
          "717: } {9 1}",
          "720: expand_all_sql db",
          "721: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "721: # 2020-02-28 ticket e63b4d1a65546532",
          "722: reset_db",
          "723: do_execsql_test 19.0 {",
          "724:   CREATE VIRTUAL TABLE rt0 USING rtree(a,b,c);",
          "725:   INSERT INTO rt0(a,b,c) VALUES(0,0.0,0.0);",
          "726:   CREATE VIEW v0(x) AS SELECT DISTINCT rt0.b FROM rt0;",
          "727:   SELECT v0.x FROM v0, rt0;",
          "728: } {0.0}",
          "729: do_execsql_test 19.1 {",
          "730:   SELECT v0.x FROM v0, rt0 WHERE v0.x = rt0.b;",
          "731: } {0.0}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f71a13d072398c9fc3556f42d75159cc2d0edc2c42f6c47f64503a7fbbca6e37",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78d1d225d87af40f5bdca57fa72f00b6ffaffa21",
      "candidate_info": {
        "commit_hash": "78d1d225d87af40f5bdca57fa72f00b6ffaffa21",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/78d1d225d87af40f5bdca57fa72f00b6ffaffa21",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "src/whereexpr.c"
        ],
        "message": "A better (smaller and faster) solution to ticket [4374860b29383380].\n\nFossilOrigin-Name: abc473fb8fb999005dc79a360e34f97b3b25429decf1820dd2afa5c19577753d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/whereexpr.c||src/whereexpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9d0d4ab95dc0c56e053c2924ed322a9ea7b25439e6f74599f706905a1994e454",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2244:   return rc;",
          "2245: }",
          "",
          "[Removed Lines]",
          "2250: int sqlite3ExprIsVtabRef(Expr *p){",
          "2251:   if( p->op!=TK_COLUMN ) return 0;",
          "2252:   if( p->y.pTab==0 ) return 0;",
          "2253:   return IsVirtual(p->y.pTab);",
          "2254: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5481:     case TK_LT:",
          "5482:     case TK_LE:",
          "5483:     case TK_GT:",
          "5485:       testcase( pExpr->op==TK_EQ );",
          "5486:       testcase( pExpr->op==TK_NE );",
          "5487:       testcase( pExpr->op==TK_LT );",
          "5488:       testcase( pExpr->op==TK_LE );",
          "5489:       testcase( pExpr->op==TK_GT );",
          "5490:       testcase( pExpr->op==TK_GE );",
          "5493:       ){",
          "5495:       }",
          "5497:     default:",
          "5498:       return WRC_Continue;",
          "5499:   }",
          "",
          "[Removed Lines]",
          "5484:     case TK_GE:",
          "5491:       if( sqlite3ExprIsVtabRef(pExpr->pLeft)",
          "5492:        || sqlite3ExprIsVtabRef(pExpr->pRight)",
          "5494:        return WRC_Prune;",
          "",
          "[Added Lines]",
          "5475:     case TK_GE: {",
          "5476:       Expr *pLeft = pExpr->pLeft;",
          "5477:       Expr *pRight = pExpr->pRight;",
          "5486:       if( (pLeft->op==TK_COLUMN && ALWAYS(pLeft->y.pTab!=0)",
          "5487:                                && IsVirtual(pLeft->y.pTab))",
          "5488:        || (pRight->op==TK_COLUMN && ALWAYS(pRight->y.pTab!=0)",
          "5489:                                && IsVirtual(pRight->y.pTab))",
          "5491:         return WRC_Prune;",
          "5493:     }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2154: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "2155: #  define IsVirtual(X)      ((X)->nModuleArg)",
          "2156: #else",
          "2157: #  define IsVirtual(X)      0",
          "2158: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2156: #  define ExprIsVtab(X)  \\",
          "2157:               ((X)->op==TK_COLUMN && (X)->y.pTab!=0 && (X)->y.pTab->nModuleArg)",
          "2160: #  define ExprIsVtab(X)     0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4278: int sqlite3ExprContainsSubquery(Expr*);",
          "4279: #endif",
          "4280: int sqlite3ExprIsInteger(Expr*, int*);",
          "4282: int sqlite3ExprCanBeNull(const Expr*);",
          "4283: int sqlite3ExprNeedsNoAffinityChange(const Expr*, char);",
          "4284: int sqlite3IsRowid(const char*);",
          "",
          "[Removed Lines]",
          "4281: int sqlite3ExprIsVtabRef(Expr*);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:     pCol = pList->a[1].pExpr;",
          "381:       for(i=0; i<ArraySize(aOp); i++){",
          "382:         if( sqlite3StrICmp(pExpr->u.zToken, aOp[i].zOp)==0 ){",
          "",
          "[Removed Lines]",
          "380:     if( sqlite3ExprIsVtabRef(pCol) ){",
          "",
          "[Added Lines]",
          "380:     testcase( pCol->op==TK_COLUMN && pCol->y.pTab==0 );",
          "381:     if( ExprIsVtab(pCol) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "401:     pCol = pList->a[0].pExpr;",
          "403:       sqlite3_vtab *pVtab;",
          "404:       sqlite3_module *pMod;",
          "405:       void (*xNotUsed)(sqlite3_context*,int,sqlite3_value**);",
          "",
          "[Removed Lines]",
          "402:     if( sqlite3ExprIsVtabRef(pCol) ){",
          "",
          "[Added Lines]",
          "403:     testcase( pCol->op==TK_COLUMN && pCol->y.pTab==0 );",
          "404:     if( ExprIsVtab(pCol) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "422:     int res = 0;",
          "423:     Expr *pLeft = pExpr->pLeft;",
          "424:     Expr *pRight = pExpr->pRight;",
          "426:       res++;",
          "427:     }",
          "429:       res++;",
          "430:       SWAP(Expr*, pLeft, pRight);",
          "431:     }",
          "",
          "[Removed Lines]",
          "425:     if( sqlite3ExprIsVtabRef(pLeft) ){",
          "428:     if( pRight && sqlite3ExprIsVtabRef(pRight) ){",
          "",
          "[Added Lines]",
          "427:     testcase( pLeft->op==TK_COLUMN && pLeft->y.pTab==0 );",
          "428:     if( ExprIsVtab(pLeft) ){",
          "431:     testcase( pRight && pRight->op==TK_COLUMN && pRight->y.pTab==0 );",
          "432:     if( pRight && ExprIsVtab(pRight) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ee00200efb5377910cf47bb994c1d47ea125170",
      "candidate_info": {
        "commit_hash": "9ee00200efb5377910cf47bb994c1d47ea125170",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9ee00200efb5377910cf47bb994c1d47ea125170",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/treeview.c",
          "test/collate1.test",
          "test/orderby1.test",
          "test/select1.test",
          "test/window1.test",
          "test/with1.test"
        ],
        "message": "Merge fixes from trunk.\n\nFossilOrigin-Name: 002406df22995880d002be2e4cebb4d560283d4e0d7a4b5a34edcb110802b543",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/treeview.c||src/treeview.c",
          "test/collate1.test||test/collate1.test",
          "test/orderby1.test||test/orderby1.test",
          "test/select1.test||test/select1.test",
          "test/window1.test||test/window1.test",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 091403a6705f5f1352c76eacbfdca75fe0bab12ab9b156842641de07c38d3f66",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2638:       sqlite3ColumnsFromExprList(pParse, pTable->pCheck,",
          "2639:                                  &pTable->nCol, &pTable->aCol);",
          "2640:       if( db->mallocFailed==0",
          "2642:        && pTable->nCol==pSel->pEList->nExpr",
          "2643:       ){",
          "2644:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel,",
          "",
          "[Removed Lines]",
          "2641:        && ALWAYS(pParse->nErr==0)",
          "",
          "[Added Lines]",
          "2641:        && pParse->nErr==0",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1848:   return WRC_Abort;",
          "1849: }",
          "1856: int sqlite3ExprIdToTrueFalse(Expr *pExpr){",
          "1857:   assert( pExpr->op==TK_ID || pExpr->op==TK_STRING );",
          "1858:   if( !ExprHasProperty(pExpr, EP_Quoted)",
          "1861:   ){",
          "1862:     pExpr->op = TK_TRUEFALSE;",
          "1864:     return 1;",
          "1865:   }",
          "1866:   return 0;",
          "",
          "[Removed Lines]",
          "1859:    && (sqlite3StrICmp(pExpr->u.zToken, \"true\")==0",
          "1860:        || sqlite3StrICmp(pExpr->u.zToken, \"false\")==0)",
          "1863:     ExprSetProperty(pExpr, pExpr->u.zToken[4]==0 ? EP_IsTrue : EP_IsFalse);",
          "",
          "[Added Lines]",
          "1859: u32 sqlite3IsTrueOrFalse(const char *zIn){",
          "1860:   if( sqlite3StrICmp(zIn, \"true\")==0  ) return EP_IsTrue;",
          "1861:   if( sqlite3StrICmp(zIn, \"false\")==0 ) return EP_IsFalse;",
          "1862:   return 0;",
          "1863: }",
          "1872:   u32 v;",
          "1875:    && (v = sqlite3IsTrueOrFalse(pExpr->u.zToken))!=0",
          "1878:     ExprSetProperty(pExpr, v);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3605:         VdbeCoverage(v);",
          "3606:         sqlite3ExprCode(pParse, pFarg->a[i].pExpr, target);",
          "3607:       }",
          "3608:       sqlite3VdbeResolveLabel(v, endCoalesce);",
          "3609:       break;",
          "3610:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3623:       if( sqlite3VdbeGetOp(v, -1)->opcode==OP_Copy ){",
          "3625:       }",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "453:       for(j=0; j<pEList->nExpr; j++){",
          "454:         char *zAs = pEList->a[j].zEName;",
          "455:         if( pEList->a[j].eEName==ENAME_NAME",
          "458:         ){",
          "459:           Expr *pOrig;",
          "460:           assert( pExpr->pLeft==0 && pExpr->pRight==0 );",
          "",
          "[Removed Lines]",
          "456:          && ALWAYS(zAs!=0)",
          "457:          && sqlite3StrICmp(zAs, zCol)==0",
          "",
          "[Added Lines]",
          "456:          && sqlite3_stricmp(zAs, zCol)==0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1133:   if( pE->op==TK_ID ){",
          "1134:     char *zCol = pE->u.zToken;",
          "1135:     for(i=0; i<pEList->nExpr; i++){",
          "1137:       if( pEList->a[i].eEName==ENAME_NAME",
          "1140:       ){",
          "1141:         return i+1;",
          "1142:       }",
          "",
          "[Removed Lines]",
          "1136:       char *zAs = pEList->a[i].zEName;",
          "1138:        && ALWAYS(zAs!=0)",
          "1139:        && sqlite3StrICmp(zAs, zCol)==0",
          "",
          "[Added Lines]",
          "1136:        && sqlite3_stricmp(pEList->a[i].zEName, zCol)==0",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:     memset(&p->iLimit, 0, sizeof(Select) - offsetof(Select,iLimit));",
          "203:     p->pEList = sqlite3ExprListAppend(pParse, 0,",
          "204:                      sqlite3ExprAlloc(pParse->db,TK_NULL,0,0));",
          "205:   }",
          "206: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:     p->pSrc = sqlite3DbMallocZero(pParse->db, sizeof(SrcList));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2003:         zName = pEList->a[i].zEName;",
          "2004:       }",
          "2005:     }",
          "2007:       zName = sqlite3DbStrDup(db, zName);",
          "2008:     }else{",
          "2009:       zName = sqlite3MPrintf(db,\"column%d\",i+1);",
          "",
          "[Removed Lines]",
          "2006:     if( zName ){",
          "",
          "[Added Lines]",
          "2007:     if( zName && !sqlite3IsTrueOrFalse(zName) ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4260: void sqlite3Savepoint(Parse*, int, Token*);",
          "4261: void sqlite3CloseSavepoints(sqlite3 *);",
          "4262: void sqlite3LeaveMutexAndCloseZombie(sqlite3*);",
          "4263: int sqlite3ExprIdToTrueFalse(Expr*);",
          "4264: int sqlite3ExprTruthValue(const Expr*);",
          "4265: int sqlite3ExprIsConstant(Expr*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4263: u32 sqlite3IsTrueOrFalse(const char*);",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "730:       int j = pList->a[i].u.x.iOrderByCol;",
          "731:       char *zName = pList->a[i].zEName;",
          "732:       int moreToFollow = i<pList->nExpr - 1;",
          "733:       if( j || zName ){",
          "734:         sqlite3TreeViewPush(pView, moreToFollow);",
          "735:         moreToFollow = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "733:       if( pList->a[i].eEName!=ENAME_NAME ) zName = 0;",
          "",
          "---------------"
        ],
        "test/collate1.test||test/collate1.test": [
          "File: test/collate1.test -> test/collate1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:   faultsim_test_result {0 {}}",
          "437: }",
          "439: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439: # 2020-01-03 dbsqlfuzz find",
          "440: #",
          "441: reset_db",
          "442: do_catchsql_test 10.0 {",
          "443:   CREATE TABLE t1(a INTEGER PRIMARY KEY,b);",
          "444:   INSERT INTO t1 VALUES(0,NULL);",
          "445:   CREATE TABLE t2(x UNIQUE);",
          "446:   CREATE VIEW v1a(z,y) AS SELECT x COLLATE x FROM t2;",
          "447:   SELECT a,b,z,y,'' FROM t1 JOIN v1a ON b IS NOT FALSE;",
          "448: } {1 {no such collation sequence: x}}",
          "",
          "---------------"
        ],
        "test/orderby1.test||test/orderby1.test": [
          "File: test/orderby1.test -> test/orderby1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "558:   SELECT b, rowid, '^' FROM t10 ORDER BY b, a LIMIT 4;",
          "559: } {2 1 ^ 4 3 ^ 4 4 ^ 7 5 ^}",
          "562: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561: do_catchsql_test 11.0 {",
          "562:   VALUES(2) EXCEPT SELECT '' ORDER BY abc",
          "563: } {1 {1st ORDER BY term does not match any column in the result set}}",
          "",
          "---------------"
        ],
        "test/select1.test||test/select1.test": [
          "File: test/select1.test -> test/select1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1197:    WHERE ((SELECT t1.a FROM t1 AS x GROUP BY b) AND b=0)",
          "1198:       OR a = 10;",
          "1199: } {10 Y}",
          "1201: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1200: do_execsql_test select-20.20 {",
          "1201:   SELECT ifnull(a, max((SELECT 123))), count(a) FROM t1 ;",
          "1202: } {10 1}",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1554:     OR ((SELECT sum(a)OVER(ORDER BY a)) AND a<=10)",
          "1555: } 10",
          "1557: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1557: #-------------------------------------------------------------------------",
          "1558: reset_db",
          "1559: do_execsql_test 47.0 {",
          "1560:   CREATE TABLE t1(",
          "1561:       a,",
          "1562:       e,",
          "1563:       f,",
          "1564:       g UNIQUE,",
          "1565:       h UNIQUE",
          "1566:   );",
          "1567: }",
          "1569: do_execsql_test 47.1 {",
          "1570:   CREATE VIEW t2(k) AS",
          "1571:      SELECT e FROM t1 WHERE g = 'abc' OR h BETWEEN 10 AND f;",
          "1572: }",
          "1574: do_catchsql_test 47.2 {",
          "1575:   SELECT 234 FROM t2",
          "1576:     WHERE k=1",
          "1577:     OR (SELECT k FROM t2 WHERE (SELECT sum(a) OVER() FROM t1 GROUP BY 1));",
          "1578: } {1 {misuse of window function sum()}}",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1140:   3 1 1 3",
          "1141: }",
          "1143: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1143: # 2020-01-02 chromium ticket 1033461",
          "1144: # Do not allow the generated name of a CTE be \"true\" or \"false\" as",
          "1145: # such a label might be later confused for the boolean literals of",
          "1146: # the same name, causing inconsistencies in the abstract syntax",
          "1147: # tree.  This problem first arose in version 3.23.0 when SQLite",
          "1148: # began recognizing \"true\" and \"false\" as boolean literals, but also",
          "1149: # had to continue to recognize \"true\" and \"false\" as identifiers for",
          "1150: # backwards compatibility.",
          "1151: #",
          "1152: reset_db",
          "1153: do_execsql_test 25.1 {",
          "1154:   CREATE TABLE dual(dummy);",
          "1155:   INSERT INTO dual(dummy) VALUES('X');",
          "1156:   WITH cte1 AS (",
          "1157:     SELECT TRUE, (",
          "1158:       WITH cte2 AS (SELECT avg(DISTINCT TRUE) FROM dual)",
          "1159:       SELECT 2571 FROM cte2",
          "1160:     ) AS subquery1",
          "1161:     FROM dual",
          "1162:     GROUP BY 1",
          "1163:   )",
          "1164:   SELECT (SELECT 1324 FROM cte1) FROM cte1;",
          "1165: } {1324}",
          "",
          "---------------"
        ]
      }
    }
  ]
}