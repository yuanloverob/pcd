{
  "cve_id": "CVE-2017-13686",
  "cve_desc": "net/ipv4/route.c in the Linux kernel 4.13-rc1 through 4.13-rc6 is too late to check for a NULL fi field when RTM_F_FIB_MATCH is set, which allows local users to cause a denial of service (NULL pointer dereference) or possibly have unspecified other impact via crafted system calls. NOTE: this does not affect any stable release.",
  "repo": "torvalds/linux",
  "patch_hash": "bc3aae2bbac46dd894c89db5d5e98f7f0ef9e205",
  "patch_info": {
    "commit_hash": "bc3aae2bbac46dd894c89db5d5e98f7f0ef9e205",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/bc3aae2bbac46dd894c89db5d5e98f7f0ef9e205",
    "files": [
      "net/ipv4/route.c"
    ],
    "message": "net: check and errout if res->fi is NULL when RTM_F_FIB_MATCH is set\n\nSyzkaller hit 'general protection fault in fib_dump_info' bug on\ncommit 4.13-rc5..\n\nGuilty file: net/ipv4/fib_semantics.c\n\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN\nModules linked in:\nCPU: 0 PID: 2808 Comm: syz-executor0 Not tainted 4.13.0-rc5 #1\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS\nUbuntu-1.8.2-1ubuntu1 04/01/2014\ntask: ffff880078562700 task.stack: ffff880078110000\nRIP: 0010:fib_dump_info+0x388/0x1170 net/ipv4/fib_semantics.c:1314\nRSP: 0018:ffff880078117010 EFLAGS: 00010206\nRAX: dffffc0000000000 RBX: 00000000000000fe RCX: 0000000000000002\nRDX: 0000000000000006 RSI: ffff880078117084 RDI: 0000000000000030\nRBP: ffff880078117268 R08: 000000000000000c R09: ffff8800780d80c8\nR10: 0000000058d629b4 R11: 0000000067fce681 R12: 0000000000000000\nR13: ffff8800784bd540 R14: ffff8800780d80b5 R15: ffff8800780d80a4\nFS:  00000000022fa940(0000) GS:ffff88007fc00000(0000)\nknlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00000000004387d0 CR3: 0000000079135000 CR4: 00000000000006f0\nCall Trace:\n  inet_rtm_getroute+0xc89/0x1f50 net/ipv4/route.c:2766\n  rtnetlink_rcv_msg+0x288/0x680 net/core/rtnetlink.c:4217\n  netlink_rcv_skb+0x340/0x470 net/netlink/af_netlink.c:2397\n  rtnetlink_rcv+0x28/0x30 net/core/rtnetlink.c:4223\n  netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]\n  netlink_unicast+0x4c4/0x6e0 net/netlink/af_netlink.c:1291\n  netlink_sendmsg+0x8c4/0xca0 net/netlink/af_netlink.c:1854\n  sock_sendmsg_nosec net/socket.c:633 [inline]\n  sock_sendmsg+0xca/0x110 net/socket.c:643\n  ___sys_sendmsg+0x779/0x8d0 net/socket.c:2035\n  __sys_sendmsg+0xd1/0x170 net/socket.c:2069\n  SYSC_sendmsg net/socket.c:2080 [inline]\n  SyS_sendmsg+0x2d/0x50 net/socket.c:2076\n  entry_SYSCALL_64_fastpath+0x1a/0xa5\n  RIP: 0033:0x4512e9\n  RSP: 002b:00007ffc75584cc8 EFLAGS: 00000216 ORIG_RAX:\n  000000000000002e\n  RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00000000004512e9\n  RDX: 0000000000000000 RSI: 0000000020f2cfc8 RDI: 0000000000000003\n  RBP: 000000000000000e R08: 0000000000000000 R09: 0000000000000000\n  R10: 0000000000000000 R11: 0000000000000216 R12: fffffffffffffffe\n  R13: 0000000000718000 R14: 0000000020c44ff0 R15: 0000000000000000\n  Code: 00 0f b6 8d ec fd ff ff 48 8b 85 f0 fd ff ff 88 48 17 48 8b 45\n  28 48 8d 78 30 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03\n  <0f>\n  b6 04 02 84 c0 74 08 3c 03 0f 8e cb 0c 00 00 48 8b 45 28 44\n  RIP: fib_dump_info+0x388/0x1170 net/ipv4/fib_semantics.c:1314 RSP:\n  ffff880078117010\n---[ end trace 254a7af28348f88b ]---\n\nThis patch adds a res->fi NULL check.\n\nexample run:\n$ip route get 0.0.0.0 iif virt1-0\nbroadcast 0.0.0.0 dev lo\n    cache <local,brd> iif virt1-0\n\n$ip route get 0.0.0.0 iif virt1-0 fibmatch\nRTNETLINK answers: No route to host\n\nReported-by: idaifish <idaifish@gmail.com>\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nFixes: b61798130f1b (\"net: ipv4: RTM_GETROUTE: return matched fib result when requested\")\nSigned-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/ipv4/route.c||net/ipv4/route.c"
    ]
  },
  "patch_diff": {
    "net/ipv4/route.c||net/ipv4/route.c": [
      "File: net/ipv4/route.c -> net/ipv4/route.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2763:  if (rtm->rtm_flags & RTM_F_LOOKUP_TABLE)",
      "2764:   table_id = rt->rt_table_id;",
      "2767:   err = fib_dump_info(skb, NETLINK_CB(in_skb).portid,",
      "2768:         nlh->nlmsg_seq, RTM_NEWROUTE, table_id,",
      "2769:         rt->rt_type, res.prefix, res.prefixlen,",
      "2770:         fl4.flowi4_tos, res.fi, 0);",
      "2772:   err = rt_fill_info(net, dst, src, table_id, &fl4, skb,",
      "2773:        NETLINK_CB(in_skb).portid, nlh->nlmsg_seq);",
      "2774:  if (err < 0)",
      "2775:   goto errout_free;",
      "",
      "[Removed Lines]",
      "2766:  if (rtm->rtm_flags & RTM_F_FIB_MATCH)",
      "2771:  else",
      "",
      "[Added Lines]",
      "2766:  if (rtm->rtm_flags & RTM_F_FIB_MATCH) {",
      "2767:   if (!res.fi) {",
      "2768:    err = fib_props[res.type].error;",
      "2769:    if (!err)",
      "2770:     err = -EHOSTUNREACH;",
      "2771:    goto errout_free;",
      "2772:   }",
      "2777:  } else {",
      "2780:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3765d35ed8b9363cbf72ffe2282002d717a40843",
      "candidate_info": {
        "commit_hash": "3765d35ed8b9363cbf72ffe2282002d717a40843",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3765d35ed8b9363cbf72ffe2282002d717a40843",
        "files": [
          "net/ipv4/route.c"
        ],
        "message": "net: ipv4: Convert inet_rtm_getroute to rcu versions of route lookup\n\nConvert inet_rtm_getroute to use ip_route_input_rcu and\nip_route_output_key_hash_rcu passing the fib_result arg to both.\nThe rcu lock is held through the creation of the response, so the\nrtable/dst does not need to be attached to the skb and is passed\nto rt_fill_info directly.\n\nIn converting from ip_route_output_key to ip_route_output_key_hash_rcu\nthe xfrm_lookup_route in ip_route_output_flow is dropped since\nflowi4_proto is not set for a route get request.\n\nSigned-off-by: David Ahern <dsahern@gmail.com>\nSigned-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv4/route.c||net/ipv4/route.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv4/route.c||net/ipv4/route.c"
          ],
          "candidate": [
            "net/ipv4/route.c||net/ipv4/route.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv4/route.c||net/ipv4/route.c": [
          "File: net/ipv4/route.c -> net/ipv4/route.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2534: }",
          "2535: EXPORT_SYMBOL_GPL(ip_route_output_flow);",
          "2537: static int rt_fill_info(struct net *net,  __be32 dst, __be32 src, u32 table_id,",
          "2538:    struct flowi4 *fl4, struct sk_buff *skb, u32 portid,",
          "2540: {",
          "2542:  struct rtmsg *r;",
          "2543:  struct nlmsghdr *nlh;",
          "2544:  unsigned long expires = 0;",
          "",
          "[Removed Lines]",
          "2539:    u32 seq)",
          "2541:  struct rtable *rt = skb_rtable(skb);",
          "",
          "[Added Lines]",
          "2540:    u32 seq, struct rtable *rt)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2653:  struct net *net = sock_net(in_skb->sk);",
          "2654:  struct rtmsg *rtm;",
          "2655:  struct nlattr *tb[RTA_MAX+1];",
          "2656:  struct rtable *rt = NULL;",
          "2657:  struct flowi4 fl4;",
          "2658:  __be32 dst = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2656:  struct fib_result res = {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2709:  fl4.flowi4_mark = mark;",
          "2710:  fl4.flowi4_uid = uid;",
          "2712:  if (iif) {",
          "2713:   struct net_device *dev;",
          "2716:   if (!dev) {",
          "2717:    err = -ENODEV;",
          "2718:    goto errout_free;",
          "",
          "[Removed Lines]",
          "2715:   dev = __dev_get_by_index(net, iif);",
          "",
          "[Added Lines]",
          "2713:  rcu_read_lock();",
          "2718:   dev = dev_get_by_index_rcu(net, iif);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2721:   skb->protocol = htons(ETH_P_IP);",
          "2722:   skb->dev = dev;",
          "2723:   skb->mark = mark;",
          "2726:   rt = skb_rtable(skb);",
          "2727:   if (err == 0 && rt->dst.error)",
          "2728:    err = -rt->dst.error;",
          "2729:  } else {",
          "2732:   err = 0;",
          "2733:   if (IS_ERR(rt))",
          "2734:    err = PTR_ERR(rt);",
          "",
          "[Removed Lines]",
          "2724:   err = ip_route_input(skb, dst, src, rtm->rtm_tos, dev);",
          "2730:   rt = ip_route_output_key(net, &fl4);",
          "",
          "[Added Lines]",
          "2727:   err = ip_route_input_rcu(skb, dst, src, rtm->rtm_tos,",
          "2728:       dev, &res);",
          "2734:   rt = ip_route_output_key_hash_rcu(net, &fl4, &res, skb);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2737:  if (err)",
          "2738:   goto errout_free;",
          "2741:  if (rtm->rtm_flags & RTM_F_NOTIFY)",
          "2742:   rt->rt_flags |= RTCF_NOTIFY;",
          "",
          "[Removed Lines]",
          "2740:  skb_dst_set(skb, &rt->dst);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2745:   table_id = rt->rt_table_id;",
          "2747:  err = rt_fill_info(net, dst, src, table_id, &fl4, skb,",
          "2749:  if (err < 0)",
          "2750:   goto errout_free;",
          "2752:  err = rtnl_unicast(skb, net, NETLINK_CB(in_skb).portid);",
          "2753: errout:",
          "2754:  return err;",
          "2756: errout_free:",
          "2757:  kfree_skb(skb);",
          "2758:  goto errout;",
          "2759: }",
          "",
          "[Removed Lines]",
          "2748:       NETLINK_CB(in_skb).portid, nlh->nlmsg_seq);",
          "",
          "[Added Lines]",
          "2750:       NETLINK_CB(in_skb).portid, nlh->nlmsg_seq, rt);",
          "2754:  rcu_read_unlock();",
          "2761:  rcu_read_unlock();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b61798130f1be5bff08712308126c2d7ebe390ef",
      "candidate_info": {
        "commit_hash": "b61798130f1be5bff08712308126c2d7ebe390ef",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b61798130f1be5bff08712308126c2d7ebe390ef",
        "files": [
          "net/ipv4/route.c"
        ],
        "message": "net: ipv4: RTM_GETROUTE: return matched fib result when requested\n\nThis patch adds support to return matched fib result when RTM_F_FIB_MATCH\nflag is specified in RTM_GETROUTE request. This is useful for user-space\napplications/controllers wanting to query a matching route.\n\nSigned-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv4/route.c||net/ipv4/route.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv4/route.c||net/ipv4/route.c"
          ],
          "candidate": [
            "net/ipv4/route.c||net/ipv4/route.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv4/route.c||net/ipv4/route.c": [
          "File: net/ipv4/route.c -> net/ipv4/route.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: #include <net/ip_tunnels.h>",
          "115: #include <net/l3mdev.h>",
          "117: #define RT_FL_TOS(oldflp4) \\",
          "118:  ((oldflp4)->flowi4_tos & (IPTOS_RT_MASK | RTO_ONLINK))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117: #include \"fib_lookup.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2746:  if (rtm->rtm_flags & RTM_F_LOOKUP_TABLE)",
          "2747:   table_id = rt->rt_table_id;",
          "2751:  if (err < 0)",
          "2752:   goto errout_free;",
          "",
          "[Removed Lines]",
          "2749:  err = rt_fill_info(net, dst, src, table_id, &fl4, skb,",
          "2750:       NETLINK_CB(in_skb).portid, nlh->nlmsg_seq, rt);",
          "",
          "[Added Lines]",
          "2751:  if (rtm->rtm_flags & RTM_F_FIB_MATCH)",
          "2752:   err = fib_dump_info(skb, NETLINK_CB(in_skb).portid,",
          "2753:         nlh->nlmsg_seq, RTM_NEWROUTE, table_id,",
          "2754:         rt->rt_type, res.prefix, res.prefixlen,",
          "2755:         fl4.flowi4_tos, res.fi, 0);",
          "2756:  else",
          "2757:   err = rt_fill_info(net, dst, src, table_id, &fl4, skb,",
          "2758:        NETLINK_CB(in_skb).portid, nlh->nlmsg_seq,",
          "2759:        rt);",
          "",
          "---------------"
        ]
      }
    }
  ]
}