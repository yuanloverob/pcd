{
  "cve_id": "CVE-2019-20808",
  "cve_desc": "In QEMU 4.1.0, an out-of-bounds read flaw was found in the ATI VGA implementation. It occurs in the ati_cursor_define() routine while handling MMIO write operations through the ati_mm_write() callback. A malicious guest could abuse this flaw to crash the QEMU process, resulting in a denial of service.",
  "repo": "qemu/qemu",
  "patch_hash": "aab0e2a661b2b6bf7915c0aefe807fb60d6d9d13",
  "patch_info": {
    "commit_hash": "aab0e2a661b2b6bf7915c0aefe807fb60d6d9d13",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/aab0e2a661b2b6bf7915c0aefe807fb60d6d9d13",
    "files": [
      "hw/display/ati.c"
    ],
    "message": "ati: use vga_read_byte in ati_cursor_define\n\nThis makes sure reads are confined to vga video memory.\n\nv3: use uint32_t, fix cut+paste bug.\nv2: fix ati_cursor_draw_line too.\n\nReported-by: xu hang <flier_m@outlook.com>\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>\nReviewed-by: BALATON Zoltan <balaton@eik.bme.hu>\nReviewed-by: Philippe Mathieu-Daud\u00e9 <philmd@redhat.com>\nMessage-id: 20190917111441.27405-3-kraxel@redhat.com",
    "before_after_code_files": [
      "hw/display/ati.c||hw/display/ati.c"
    ]
  },
  "patch_diff": {
    "hw/display/ati.c||hw/display/ati.c": [
      "File: hw/display/ati.c -> hw/display/ati.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #include \"qemu/osdep.h\"",
      "20: #include \"ati_int.h\"",
      "21: #include \"ati_regs.h\"",
      "22: #include \"hw/qdev-properties.h\"",
      "23: #include \"vga_regs.h\"",
      "24: #include \"qemu/log.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #include \"vga-access.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "135: static void ati_cursor_define(ATIVGAState *s)",
      "136: {",
      "137:     uint8_t data[1024];",
      "139:     int i, j, idx = 0;",
      "141:     if ((s->regs.cur_offset & BIT(31)) || s->cursor_guest_mode) {",
      "143:     }",
      "147:     for (i = 0; i < 64; i++) {",
      "148:         for (j = 0; j < 8; j++, idx++) {",
      "151:         }",
      "152:     }",
      "153:     if (!s->cursor) {",
      "",
      "[Removed Lines]",
      "138:     uint8_t *src;",
      "145:     src = s->vga.vram_ptr + s->regs.cur_offset -",
      "146:           (s->regs.cur_hv_offs >> 16) - (s->regs.cur_hv_offs & 0xffff) * 16;",
      "149:             data[idx] = src[i * 16 + j];",
      "150:             data[512 + idx] = src[i * 16 + j + 8];",
      "",
      "[Added Lines]",
      "139:     uint32_t srcoff;",
      "146:     srcoff = s->regs.cur_offset -",
      "147:         (s->regs.cur_hv_offs >> 16) - (s->regs.cur_hv_offs & 0xffff) * 16;",
      "150:             data[idx] = vga_read_byte(&s->vga, srcoff + i * 16 + j);",
      "151:             data[512 + idx] = vga_read_byte(&s->vga, srcoff + i * 16 + j + 8);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "189: static void ati_cursor_draw_line(VGACommonState *vga, uint8_t *d, int scr_y)",
      "190: {",
      "191:     ATIVGAState *s = container_of(vga, ATIVGAState, vga);",
      "193:     uint32_t *dp = (uint32_t *)d;",
      "194:     int i, j, h;",
      "",
      "[Removed Lines]",
      "192:     uint8_t *src;",
      "",
      "[Added Lines]",
      "193:     uint32_t srcoff;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "199:         return;",
      "200:     }",
      "203:     dp = &dp[vga->hw_cursor_x];",
      "204:     h = ((s->regs.crtc_h_total_disp >> 16) + 1) * 8;",
      "205:     for (i = 0; i < 8; i++) {",
      "206:         uint32_t color;",
      "209:         for (j = 0; j < 8; j++, abits <<= 1, xbits <<= 1) {",
      "210:             if (abits & BIT(7)) {",
      "211:                 if (xbits & BIT(7)) {",
      "",
      "[Removed Lines]",
      "202:     src = s->vga.vram_ptr + s->cursor_offset + (scr_y - vga->hw_cursor_y) * 16;",
      "207:         uint8_t abits = src[i];",
      "208:         uint8_t xbits = src[i + 8];",
      "",
      "[Added Lines]",
      "203:     srcoff = s->cursor_offset + (scr_y - vga->hw_cursor_y) * 16;",
      "208:         uint8_t abits = vga_read_byte(vga, srcoff + i);",
      "209:         uint8_t xbits = vga_read_byte(vga, srcoff + i + 8);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "862b4a291dcf143fdb227e97feb7fd45e6466aca",
      "candidate_info": {
        "commit_hash": "862b4a291dcf143fdb227e97feb7fd45e6466aca",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/862b4a291dcf143fdb227e97feb7fd45e6466aca",
        "files": [
          "hw/display/Kconfig",
          "hw/display/Makefile.objs",
          "hw/display/ati.c",
          "hw/display/ati_2d.c",
          "hw/display/ati_dbg.c",
          "hw/display/ati_int.h",
          "hw/display/ati_regs.h",
          "hw/display/trace-events",
          "vl.c"
        ],
        "message": "hw/display: Add basic ATI VGA emulation\n\nAt least two machines, the PPC mac99 and MIPS fulong2e, have an ATI\ngfx chip by default (Rage 128 Pro and M6/RV100 respectively) and\nguests running on these and the PMON2000 firmware of the fulong2e\nexpect this to be available. Fortunately these are very similar chips\nso they can be mostly emulated in the same device model. This patch\nadds basic emulation of these ATI VGA chips.\n\nWhile this is incomplete and currently only enough to run the MIPS\nfirmware and get framebuffer output with Linux, it allows the fulong2e\nboard to work more like the real hardware and having it in QEMU in\nthis state provides a way to experiment with it and allows others to\ncontribute to improve it. It is compiled for all archs but only the\nfulong2e (which currently has no display output at all) is set to use\nit by default (in a separate patch).\n\nSigned-off-by: BALATON Zoltan <balaton@eik.bme.hu>\nAcked-by: Aleksandar Markovic <amarkovic@wavecomp.com>\nTested-by: Andrew Randrianasulu <randrianasulu@gmail.com>\nTested-by: Howard Spoelstra <hsp.cat7@gmail.com>\nMessage-id: 0b1b7c22873a6e37627261b04fb687412b25ff4f.1552152100.git.balaton@eik.bme.hu\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
        "before_after_code_files": [
          "hw/display/Makefile.objs||hw/display/Makefile.objs",
          "hw/display/ati.c||hw/display/ati.c",
          "hw/display/ati_2d.c||hw/display/ati_2d.c",
          "hw/display/ati_dbg.c||hw/display/ati_dbg.c",
          "hw/display/ati_int.h||hw/display/ati_int.h",
          "hw/display/ati_regs.h||hw/display/ati_regs.h",
          "vl.c||vl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/display/ati.c||hw/display/ati.c"
          ],
          "candidate": [
            "hw/display/ati.c||hw/display/ati.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/display/Makefile.objs||hw/display/Makefile.objs": [
          "File: hw/display/Makefile.objs -> hw/display/Makefile.objs",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: virtio-gpu-3d.o-libs += $(VIRGL_LIBS)",
          "52: obj-$(CONFIG_DPCD) += dpcd.o",
          "53: obj-$(CONFIG_XLNX_ZYNQMP_ARM) += xlnx_dp.o",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: obj-$(CONFIG_ATI_VGA) += ati.o ati_2d.o ati_dbg.o",
          "",
          "---------------"
        ],
        "hw/display/ati.c||hw/display/ati.c": [
          "File: hw/display/ati.c -> hw/display/ati.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include \"ati_int.h\"",
          "20: #include \"ati_regs.h\"",
          "21: #include \"vga_regs.h\"",
          "22: #include \"qemu/log.h\"",
          "23: #include \"qemu/error-report.h\"",
          "24: #include \"qapi/error.h\"",
          "25: #include \"hw/hw.h\"",
          "26: #include \"ui/console.h\"",
          "27: #include \"trace.h\"",
          "29: #define ATI_DEBUG_HW_CURSOR 0",
          "31: static const struct {",
          "32:     const char *name;",
          "33:     uint16_t dev_id;",
          "34: } ati_model_aliases[] = {",
          "35:     { \"rage128p\", PCI_DEVICE_ID_ATI_RAGE128_PF },",
          "36:     { \"rv100\", PCI_DEVICE_ID_ATI_RADEON_QY },",
          "37: };",
          "39: enum { VGA_MODE, EXT_MODE };",
          "41: static void ati_vga_switch_mode(ATIVGAState *s)",
          "42: {",
          "43:     DPRINTF(\"%d -> %d\\n\",",
          "44:             s->mode, !!(s->regs.crtc_gen_cntl & CRTC2_EXT_DISP_EN));",
          "45:     if (s->regs.crtc_gen_cntl & CRTC2_EXT_DISP_EN) {",
          "47:         s->mode = EXT_MODE;",
          "48:         if (s->regs.crtc_gen_cntl & CRTC2_EN) {",
          "50:             uint32_t offs = s->regs.crtc_offset & 0x07ffffff;",
          "51:             int stride = (s->regs.crtc_pitch & 0x7ff) * 8;",
          "52:             int bpp = 0;",
          "53:             int h, v;",
          "55:             if (s->regs.crtc_h_total_disp == 0) {",
          "56:                 s->regs.crtc_h_total_disp = ((640 / 8) - 1) << 16;",
          "57:             }",
          "58:             if (s->regs.crtc_v_total_disp == 0) {",
          "59:                 s->regs.crtc_v_total_disp = (480 - 1) << 16;",
          "60:             }",
          "61:             h = ((s->regs.crtc_h_total_disp >> 16) + 1) * 8;",
          "62:             v = (s->regs.crtc_v_total_disp >> 16) + 1;",
          "63:             switch (s->regs.crtc_gen_cntl & CRTC_PIX_WIDTH_MASK) {",
          "64:             case CRTC_PIX_WIDTH_4BPP:",
          "65:                 bpp = 4;",
          "66:                 break;",
          "67:             case CRTC_PIX_WIDTH_8BPP:",
          "68:                 bpp = 8;",
          "69:                 break;",
          "70:             case CRTC_PIX_WIDTH_15BPP:",
          "71:                 bpp = 15;",
          "72:                 break;",
          "73:             case CRTC_PIX_WIDTH_16BPP:",
          "74:                 bpp = 16;",
          "75:                 break;",
          "76:             case CRTC_PIX_WIDTH_24BPP:",
          "77:                 bpp = 24;",
          "78:                 break;",
          "79:             case CRTC_PIX_WIDTH_32BPP:",
          "80:                 bpp = 32;",
          "81:                 break;",
          "82:             default:",
          "83:                 qemu_log_mask(LOG_UNIMP, \"Unsupported bpp value\\n\");",
          "84:             }",
          "85:             assert(bpp != 0);",
          "86:             DPRINTF(\"Switching to %dx%d %d %d @ %x\\n\", h, v, stride, bpp, offs);",
          "87:             vbe_ioport_write_index(&s->vga, 0, VBE_DISPI_INDEX_ENABLE);",
          "88:             vbe_ioport_write_data(&s->vga, 0, VBE_DISPI_DISABLED);",
          "90:             s->vga.vbe_regs[VBE_DISPI_INDEX_XRES] = h;",
          "91:             s->vga.vbe_regs[VBE_DISPI_INDEX_YRES] = v;",
          "92:             s->vga.vbe_regs[VBE_DISPI_INDEX_BPP] = bpp;",
          "94:             vbe_ioport_write_index(&s->vga, 0, VBE_DISPI_INDEX_ENABLE);",
          "95:             vbe_ioport_write_data(&s->vga, 0, VBE_DISPI_ENABLED |",
          "96:                 VBE_DISPI_LFB_ENABLED | VBE_DISPI_NOCLEARMEM |",
          "97:                 (s->regs.dac_cntl & DAC_8BIT_EN ? VBE_DISPI_8BIT_DAC : 0));",
          "99:             if (stride) {",
          "100:                 vbe_ioport_write_index(&s->vga, 0, VBE_DISPI_INDEX_VIRT_WIDTH);",
          "101:                 vbe_ioport_write_data(&s->vga, 0, stride);",
          "102:                 if (offs % stride == 0) {",
          "103:                     vbe_ioport_write_index(&s->vga, 0, VBE_DISPI_INDEX_Y_OFFSET);",
          "104:                     vbe_ioport_write_data(&s->vga, 0, offs / stride);",
          "105:                 } else {",
          "107:                     error_report(\"VGA offset is not multiple of pitch, \"",
          "108:                                  \"expect bad picture\");",
          "109:                 }",
          "110:             }",
          "111:         }",
          "112:     } else {",
          "114:         s->mode = VGA_MODE;",
          "115:         vbe_ioport_write_index(&s->vga, 0, VBE_DISPI_INDEX_ENABLE);",
          "116:         vbe_ioport_write_data(&s->vga, 0, VBE_DISPI_DISABLED);",
          "117:     }",
          "118: }",
          "121: static void ati_cursor_define(ATIVGAState *s)",
          "122: {",
          "123:     uint8_t data[1024];",
          "124:     uint8_t *src;",
          "125:     int i, j, idx = 0;",
          "127:     if ((s->regs.cur_offset & BIT(31)) || s->cursor_guest_mode) {",
          "129:     }",
          "131:     src = s->vga.vram_ptr + (s->regs.crtc_offset & 0x07ffffff) +",
          "132:           s->regs.cur_offset - (s->regs.cur_hv_offs >> 16) -",
          "133:           (s->regs.cur_hv_offs & 0xffff) * 16;",
          "134:     for (i = 0; i < 64; i++) {",
          "135:         for (j = 0; j < 8; j++, idx++) {",
          "136:             data[idx] = src[i * 16 + j];",
          "137:             data[512 + idx] = src[i * 16 + j + 8];",
          "138:         }",
          "139:     }",
          "140:     if (!s->cursor) {",
          "141:         s->cursor = cursor_alloc(64, 64);",
          "142:     }",
          "143:     cursor_set_mono(s->cursor, s->regs.cur_color1, s->regs.cur_color0,",
          "144:                     &data[512], 1, &data[0]);",
          "145:     dpy_cursor_define(s->vga.con, s->cursor);",
          "146: }",
          "149: static void ati_cursor_invalidate(VGACommonState *vga)",
          "150: {",
          "151:     ATIVGAState *s = container_of(vga, ATIVGAState, vga);",
          "152:     int size = (s->regs.crtc_gen_cntl & CRTC2_CUR_EN) ? 64 : 0;",
          "154:     if (s->regs.cur_offset & BIT(31)) {",
          "156:     }",
          "157:     if (s->cursor_size != size ||",
          "158:         vga->hw_cursor_x != s->regs.cur_hv_pos >> 16 ||",
          "159:         vga->hw_cursor_y != (s->regs.cur_hv_pos & 0xffff) ||",
          "160:         s->cursor_offset != s->regs.cur_offset - (s->regs.cur_hv_offs >> 16) -",
          "161:         (s->regs.cur_hv_offs & 0xffff) * 16) {",
          "163:         vga_invalidate_scanlines(vga, vga->hw_cursor_y, vga->hw_cursor_y + 63);",
          "164:         vga->hw_cursor_x = s->regs.cur_hv_pos >> 16;",
          "165:         vga->hw_cursor_y = s->regs.cur_hv_pos & 0xffff;",
          "166:         s->cursor_offset = s->regs.cur_offset - (s->regs.cur_hv_offs >> 16) -",
          "167:                            (s->regs.cur_hv_offs & 0xffff) * 16;",
          "168:         s->cursor_size = size;",
          "169:         if (size) {",
          "170:             vga_invalidate_scanlines(vga,",
          "171:                                      vga->hw_cursor_y, vga->hw_cursor_y + 63);",
          "172:         }",
          "173:     }",
          "174: }",
          "176: static void ati_cursor_draw_line(VGACommonState *vga, uint8_t *d, int scr_y)",
          "177: {",
          "178:     ATIVGAState *s = container_of(vga, ATIVGAState, vga);",
          "179:     uint8_t *src;",
          "180:     uint32_t *dp = (uint32_t *)d;",
          "181:     int i, j, h;",
          "183:     if (!(s->regs.crtc_gen_cntl & CRTC2_CUR_EN) ||",
          "184:         scr_y < vga->hw_cursor_y || scr_y >= vga->hw_cursor_y + 64 ||",
          "185:         scr_y > s->regs.crtc_v_total_disp >> 16) {",
          "186:         return;",
          "187:     }",
          "189:     src = s->vga.vram_ptr + (s->regs.crtc_offset & 0x07ffffff) +",
          "190:           s->cursor_offset + (scr_y - vga->hw_cursor_y) * 16;",
          "191:     dp = &dp[vga->hw_cursor_x];",
          "192:     h = ((s->regs.crtc_h_total_disp >> 16) + 1) * 8;",
          "193:     for (i = 0; i < 8; i++) {",
          "194:         uint32_t color;",
          "195:         uint8_t abits = src[i];",
          "196:         uint8_t xbits = src[i + 8];",
          "197:         for (j = 0; j < 8; j++, abits <<= 1, xbits <<= 1) {",
          "198:             if (abits & BIT(7)) {",
          "199:                 if (xbits & BIT(7)) {",
          "201:                 } else {",
          "203:                 }",
          "204:             } else {",
          "205:                 color = (xbits & BIT(7) ? s->regs.cur_color1 :",
          "206:                                           s->regs.cur_color0) << 8 | 0xff;",
          "207:             }",
          "208:             if (vga->hw_cursor_x + i * 8 + j >= h) {",
          "210:             }",
          "211:             dp[i * 8 + j] = color;",
          "212:         }",
          "213:     }",
          "214: }",
          "216: static inline uint64_t ati_reg_read_offs(uint32_t reg, int offs,",
          "217:                                          unsigned int size)",
          "218: {",
          "219:     if (offs == 0 && size == 4) {",
          "220:         return reg;",
          "221:     } else {",
          "222:         return extract32(reg, offs * BITS_PER_BYTE, size * BITS_PER_BYTE);",
          "223:     }",
          "224: }",
          "226: static uint64_t ati_mm_read(void *opaque, hwaddr addr, unsigned int size)",
          "227: {",
          "228:     ATIVGAState *s = opaque;",
          "229:     uint64_t val = 0;",
          "231:     switch (addr) {",
          "232:     case MM_INDEX:",
          "233:         val = s->regs.mm_index;",
          "234:         break;",
          "235:     case MM_DATA ... MM_DATA + 3:",
          "237:         if (s->regs.mm_index & BIT(31)) {",
          "238:             if (s->regs.mm_index <= s->vga.vram_size - size) {",
          "239:                 int i = size - 1;",
          "240:                 while (i >= 0) {",
          "241:                     val <<= 8;",
          "242:                     val |= s->vga.vram_ptr[s->regs.mm_index + i--];",
          "243:                 }",
          "244:             }",
          "245:         } else {",
          "246:             val = ati_mm_read(s, s->regs.mm_index + addr - MM_DATA, size);",
          "247:         }",
          "248:         break;",
          "249:     case BIOS_0_SCRATCH ... BUS_CNTL - 1:",
          "250:     {",
          "251:         int i = (addr - BIOS_0_SCRATCH) / 4;",
          "252:         if (s->dev_id == PCI_DEVICE_ID_ATI_RAGE128_PF && i > 3) {",
          "253:             break;",
          "254:         }",
          "255:         val = ati_reg_read_offs(s->regs.bios_scratch[i],",
          "256:                                 addr - (BIOS_0_SCRATCH + i * 4), size);",
          "257:         break;",
          "258:     }",
          "259:     case CRTC_GEN_CNTL ... CRTC_GEN_CNTL + 3:",
          "260:         val = ati_reg_read_offs(s->regs.crtc_gen_cntl,",
          "261:                                 addr - CRTC_GEN_CNTL, size);",
          "262:         break;",
          "263:     case CRTC_EXT_CNTL ... CRTC_EXT_CNTL + 3:",
          "264:         val = ati_reg_read_offs(s->regs.crtc_ext_cntl,",
          "265:                                 addr - CRTC_EXT_CNTL, size);",
          "266:         break;",
          "267:     case DAC_CNTL:",
          "268:         val = s->regs.dac_cntl;",
          "269:         break;",
          "271:     case PALETTE_INDEX:",
          "273:         val = vga_ioport_read(&s->vga, VGA_PEL_IR) << 16;",
          "274:         val |= vga_ioport_read(&s->vga, VGA_PEL_IW) & 0xff;",
          "275:         break;",
          "276:     case PALETTE_DATA:",
          "277:         val = vga_ioport_read(&s->vga, VGA_PEL_D);",
          "278:         break;",
          "279:     case CNFG_MEMSIZE:",
          "280:         val = s->vga.vram_size;",
          "281:         break;",
          "282:     case MC_STATUS:",
          "283:         val = 5;",
          "284:         break;",
          "285:     case RBBM_STATUS:",
          "286:     case GUI_STAT:",
          "288:         break;",
          "289:     case CRTC_H_TOTAL_DISP:",
          "290:         val = s->regs.crtc_h_total_disp;",
          "291:         break;",
          "292:     case CRTC_H_SYNC_STRT_WID:",
          "293:         val = s->regs.crtc_h_sync_strt_wid;",
          "294:         break;",
          "295:     case CRTC_V_TOTAL_DISP:",
          "296:         val = s->regs.crtc_v_total_disp;",
          "297:         break;",
          "298:     case CRTC_V_SYNC_STRT_WID:",
          "299:         val = s->regs.crtc_v_sync_strt_wid;",
          "300:         break;",
          "301:     case CRTC_OFFSET:",
          "302:         val = s->regs.crtc_offset;",
          "303:         break;",
          "304:     case CRTC_OFFSET_CNTL:",
          "305:         val = s->regs.crtc_offset_cntl;",
          "306:         break;",
          "307:     case CRTC_PITCH:",
          "308:         val = s->regs.crtc_pitch;",
          "309:         break;",
          "310:     case 0xf00 ... 0xfff:",
          "311:         val = pci_default_read_config(&s->dev, addr - 0xf00, size);",
          "312:         break;",
          "313:     case CUR_OFFSET:",
          "314:         val = s->regs.cur_offset;",
          "315:         break;",
          "316:     case CUR_HORZ_VERT_POSN:",
          "317:         val = s->regs.cur_hv_pos;",
          "318:         val |= s->regs.cur_offset & BIT(31);",
          "319:         break;",
          "320:     case CUR_HORZ_VERT_OFF:",
          "321:         val = s->regs.cur_hv_offs;",
          "322:         val |= s->regs.cur_offset & BIT(31);",
          "323:         break;",
          "324:     case CUR_CLR0:",
          "325:         val = s->regs.cur_color0;",
          "326:         break;",
          "327:     case CUR_CLR1:",
          "328:         val = s->regs.cur_color1;",
          "329:         break;",
          "330:     case DST_OFFSET:",
          "331:         val = s->regs.dst_offset;",
          "332:         break;",
          "333:     case DST_PITCH:",
          "334:         val = s->regs.dst_pitch;",
          "335:         if (s->dev_id == PCI_DEVICE_ID_ATI_RAGE128_PF) {",
          "336:             val &= s->regs.dst_tile << 16;",
          "337:         }",
          "338:         break;",
          "339:     case DST_WIDTH:",
          "340:         val = s->regs.dst_width;",
          "341:         break;",
          "342:     case DST_HEIGHT:",
          "343:         val = s->regs.dst_height;",
          "344:         break;",
          "345:     case SRC_X:",
          "346:         val = s->regs.src_x;",
          "347:         break;",
          "348:     case SRC_Y:",
          "349:         val = s->regs.src_y;",
          "350:         break;",
          "351:     case DST_X:",
          "352:         val = s->regs.dst_x;",
          "353:         break;",
          "354:     case DST_Y:",
          "355:         val = s->regs.dst_y;",
          "356:         break;",
          "357:     case DP_GUI_MASTER_CNTL:",
          "358:         val = s->regs.dp_gui_master_cntl;",
          "359:         break;",
          "360:     case SRC_OFFSET:",
          "361:         val = s->regs.src_offset;",
          "362:         break;",
          "363:     case SRC_PITCH:",
          "364:         val = s->regs.src_pitch;",
          "365:         if (s->dev_id == PCI_DEVICE_ID_ATI_RAGE128_PF) {",
          "366:             val &= s->regs.src_tile << 16;",
          "367:         }",
          "368:         break;",
          "369:     case DP_BRUSH_BKGD_CLR:",
          "370:         val = s->regs.dp_brush_bkgd_clr;",
          "371:         break;",
          "372:     case DP_BRUSH_FRGD_CLR:",
          "373:         val = s->regs.dp_brush_frgd_clr;",
          "374:         break;",
          "375:     case DP_SRC_FRGD_CLR:",
          "376:         val = s->regs.dp_src_frgd_clr;",
          "377:         break;",
          "378:     case DP_SRC_BKGD_CLR:",
          "379:         val = s->regs.dp_src_bkgd_clr;",
          "380:         break;",
          "381:     case DP_CNTL:",
          "382:         val = s->regs.dp_cntl;",
          "383:         break;",
          "384:     case DP_DATATYPE:",
          "385:         val = s->regs.dp_datatype;",
          "386:         break;",
          "387:     case DP_MIX:",
          "388:         val = s->regs.dp_mix;",
          "389:         break;",
          "390:     case DP_WRITE_MASK:",
          "391:         val = s->regs.dp_write_mask;",
          "392:         break;",
          "393:     case DEFAULT_OFFSET:",
          "394:         val = s->regs.default_offset;",
          "395:         break;",
          "396:     case DEFAULT_PITCH:",
          "397:         val = s->regs.default_pitch;",
          "398:         break;",
          "399:     case DEFAULT_SC_BOTTOM_RIGHT:",
          "400:         val = s->regs.default_sc_bottom_right;",
          "401:         break;",
          "402:     default:",
          "403:         break;",
          "404:     }",
          "405:     if (addr < CUR_OFFSET || addr > CUR_CLR1 || ATI_DEBUG_HW_CURSOR) {",
          "406:         trace_ati_mm_read(size, addr, ati_reg_name(addr & ~3ULL), val);",
          "407:     }",
          "408:     return val;",
          "409: }",
          "411: static inline void ati_reg_write_offs(uint32_t *reg, int offs,",
          "412:                                       uint64_t data, unsigned int size)",
          "413: {",
          "414:     if (offs == 0 && size == 4) {",
          "416:     } else {",
          "418:                          data);",
          "419:     }",
          "420: }",
          "422: static void ati_mm_write(void *opaque, hwaddr addr,",
          "423:                            uint64_t data, unsigned int size)",
          "424: {",
          "425:     ATIVGAState *s = opaque;",
          "427:     if (addr < CUR_OFFSET || addr > CUR_CLR1 || ATI_DEBUG_HW_CURSOR) {",
          "428:         trace_ati_mm_write(size, addr, ati_reg_name(addr & ~3ULL), data);",
          "429:     }",
          "430:     switch (addr) {",
          "431:     case MM_INDEX:",
          "432:         s->regs.mm_index = data;",
          "433:         break;",
          "434:     case MM_DATA ... MM_DATA + 3:",
          "436:         if (s->regs.mm_index & BIT(31)) {",
          "437:             if (s->regs.mm_index <= s->vga.vram_size - size) {",
          "438:                 int i = 0;",
          "439:                 while (i < size) {",
          "440:                     s->vga.vram_ptr[s->regs.mm_index + i] = data & 0xff;",
          "441:                     data >>= 8;",
          "442:                 }",
          "443:             }",
          "444:         } else {",
          "445:             ati_mm_write(s, s->regs.mm_index + addr - MM_DATA, data, size);",
          "446:         }",
          "447:         break;",
          "448:     case BIOS_0_SCRATCH ... BUS_CNTL - 1:",
          "449:     {",
          "450:         int i = (addr - BIOS_0_SCRATCH) / 4;",
          "451:         if (s->dev_id == PCI_DEVICE_ID_ATI_RAGE128_PF && i > 3) {",
          "452:             break;",
          "453:         }",
          "454:         ati_reg_write_offs(&s->regs.bios_scratch[i],",
          "455:                            addr - (BIOS_0_SCRATCH + i * 4), data, size);",
          "456:         break;",
          "457:     }",
          "458:     case CRTC_GEN_CNTL ... CRTC_GEN_CNTL + 3:",
          "459:     {",
          "460:         uint32_t val = s->regs.crtc_gen_cntl;",
          "461:         ati_reg_write_offs(&s->regs.crtc_gen_cntl,",
          "462:                            addr - CRTC_GEN_CNTL, data, size);",
          "463:         if ((val & CRTC2_CUR_EN) != (s->regs.crtc_gen_cntl & CRTC2_CUR_EN)) {",
          "464:             if (s->cursor_guest_mode) {",
          "465:                 s->vga.force_shadow = !!(s->regs.crtc_gen_cntl & CRTC2_CUR_EN);",
          "466:             } else {",
          "467:                 if (s->regs.crtc_gen_cntl & CRTC2_CUR_EN) {",
          "468:                     ati_cursor_define(s);",
          "469:                 }",
          "470:                 dpy_mouse_set(s->vga.con, s->regs.cur_hv_pos >> 16,",
          "471:                               s->regs.cur_hv_pos & 0xffff,",
          "472:                               (s->regs.crtc_gen_cntl & CRTC2_CUR_EN) != 0);",
          "473:             }",
          "474:         }",
          "475:         if ((val & (CRTC2_EXT_DISP_EN | CRTC2_EN)) !=",
          "476:             (s->regs.crtc_gen_cntl & (CRTC2_EXT_DISP_EN | CRTC2_EN))) {",
          "477:             ati_vga_switch_mode(s);",
          "478:         }",
          "479:         break;",
          "480:     }",
          "481:     case CRTC_EXT_CNTL ... CRTC_EXT_CNTL + 3:",
          "482:     {",
          "483:         uint32_t val = s->regs.crtc_ext_cntl;",
          "484:         ati_reg_write_offs(&s->regs.crtc_ext_cntl,",
          "485:                            addr - CRTC_EXT_CNTL, data, size);",
          "486:         if (s->regs.crtc_ext_cntl & CRT_CRTC_DISPLAY_DIS) {",
          "487:             DPRINTF(\"Display disabled\\n\");",
          "488:             s->vga.ar_index &= ~BIT(5);",
          "489:         } else {",
          "490:             DPRINTF(\"Display enabled\\n\");",
          "491:             s->vga.ar_index |= BIT(5);",
          "492:             ati_vga_switch_mode(s);",
          "493:         }",
          "494:         if ((val & CRT_CRTC_DISPLAY_DIS) !=",
          "495:             (s->regs.crtc_ext_cntl & CRT_CRTC_DISPLAY_DIS)) {",
          "496:             ati_vga_switch_mode(s);",
          "497:         }",
          "498:         break;",
          "499:     }",
          "500:     case DAC_CNTL:",
          "501:         s->regs.dac_cntl = data & 0xffffe3ff;",
          "502:         s->vga.dac_8bit = !!(data & DAC_8BIT_EN);",
          "503:         break;",
          "505:     case PALETTE_INDEX ... PALETTE_INDEX + 3:",
          "506:         if (size == 4) {",
          "507:             vga_ioport_write(&s->vga, VGA_PEL_IR, (data >> 16) & 0xff);",
          "508:             vga_ioport_write(&s->vga, VGA_PEL_IW, data & 0xff);",
          "509:         } else {",
          "510:             if (addr == PALETTE_INDEX) {",
          "511:                 vga_ioport_write(&s->vga, VGA_PEL_IW, data & 0xff);",
          "512:             } else {",
          "513:                 vga_ioport_write(&s->vga, VGA_PEL_IR, data & 0xff);",
          "514:             }",
          "515:         }",
          "516:         break;",
          "517:     case PALETTE_DATA ... PALETTE_DATA + 3:",
          "518:         data <<= addr - PALETTE_DATA;",
          "519:         data = bswap32(data) >> 8;",
          "520:         vga_ioport_write(&s->vga, VGA_PEL_D, data & 0xff);",
          "521:         data >>= 8;",
          "522:         vga_ioport_write(&s->vga, VGA_PEL_D, data & 0xff);",
          "523:         data >>= 8;",
          "524:         vga_ioport_write(&s->vga, VGA_PEL_D, data & 0xff);",
          "525:         break;",
          "526:     case CRTC_H_TOTAL_DISP:",
          "527:         s->regs.crtc_h_total_disp = data & 0x07ff07ff;",
          "528:         break;",
          "529:     case CRTC_H_SYNC_STRT_WID:",
          "530:         s->regs.crtc_h_sync_strt_wid = data & 0x17bf1fff;",
          "531:         break;",
          "532:     case CRTC_V_TOTAL_DISP:",
          "533:         s->regs.crtc_v_total_disp = data & 0x0fff0fff;",
          "534:         break;",
          "535:     case CRTC_V_SYNC_STRT_WID:",
          "536:         s->regs.crtc_v_sync_strt_wid = data & 0x9f0fff;",
          "537:         break;",
          "538:     case CRTC_OFFSET:",
          "539:         s->regs.crtc_offset = data & 0xc7ffffff;",
          "540:         break;",
          "541:     case CRTC_OFFSET_CNTL:",
          "543:         break;",
          "544:     case CRTC_PITCH:",
          "545:         s->regs.crtc_pitch = data & 0x07ff07ff;",
          "546:         break;",
          "547:     case 0xf00 ... 0xfff:",
          "549:         break;",
          "550:     case CUR_OFFSET:",
          "551:         if (s->regs.cur_offset != (data & 0x87fffff0)) {",
          "552:             s->regs.cur_offset = data & 0x87fffff0;",
          "553:             ati_cursor_define(s);",
          "554:         }",
          "555:         break;",
          "556:     case CUR_HORZ_VERT_POSN:",
          "557:         s->regs.cur_hv_pos = data & 0x3fff0fff;",
          "558:         if (data & BIT(31)) {",
          "559:             s->regs.cur_offset |= data & BIT(31);",
          "560:         } else if (s->regs.cur_offset & BIT(31)) {",
          "561:             s->regs.cur_offset &= ~BIT(31);",
          "562:             ati_cursor_define(s);",
          "563:         }",
          "564:         if (!s->cursor_guest_mode &&",
          "565:             (s->regs.crtc_gen_cntl & CRTC2_CUR_EN) && !(data & BIT(31))) {",
          "566:             dpy_mouse_set(s->vga.con, s->regs.cur_hv_pos >> 16,",
          "567:                           s->regs.cur_hv_pos & 0xffff, 1);",
          "568:         }",
          "569:         break;",
          "570:     case CUR_HORZ_VERT_OFF:",
          "571:         s->regs.cur_hv_offs = data & 0x3f003f;",
          "572:         if (data & BIT(31)) {",
          "573:             s->regs.cur_offset |= data & BIT(31);",
          "574:         } else if (s->regs.cur_offset & BIT(31)) {",
          "575:             s->regs.cur_offset &= ~BIT(31);",
          "576:             ati_cursor_define(s);",
          "577:         }",
          "578:         break;",
          "579:     case CUR_CLR0:",
          "580:         if (s->regs.cur_color0 != (data & 0xffffff)) {",
          "581:             s->regs.cur_color0 = data & 0xffffff;",
          "582:             ati_cursor_define(s);",
          "583:         }",
          "584:         break;",
          "585:     case CUR_CLR1:",
          "591:         s->regs.cur_color1 = data & 0xffffff;",
          "592:         ati_cursor_define(s);",
          "593:         break;",
          "594:     case DST_OFFSET:",
          "595:         if (s->dev_id == PCI_DEVICE_ID_ATI_RAGE128_PF) {",
          "596:             s->regs.dst_offset = data & 0xfffffff0;",
          "597:         } else {",
          "598:             s->regs.dst_offset = data & 0xfffffc00;",
          "599:         }",
          "600:         break;",
          "601:     case DST_PITCH:",
          "602:         if (s->dev_id == PCI_DEVICE_ID_ATI_RAGE128_PF) {",
          "603:             s->regs.dst_pitch = data & 0x3fff;",
          "604:             s->regs.dst_tile = (data >> 16) & 1;",
          "605:         } else {",
          "606:             s->regs.dst_pitch = data & 0x3ff0;",
          "607:         }",
          "608:         break;",
          "609:     case DST_TILE:",
          "610:         if (s->dev_id == PCI_DEVICE_ID_ATI_RADEON_QY) {",
          "611:             s->regs.dst_tile = data & 3;",
          "612:         }",
          "613:         break;",
          "614:     case DST_WIDTH:",
          "615:         s->regs.dst_width = data & 0x3fff;",
          "616:         ati_2d_blt(s);",
          "617:         break;",
          "618:     case DST_HEIGHT:",
          "619:         s->regs.dst_height = data & 0x3fff;",
          "620:         break;",
          "621:     case SRC_X:",
          "622:         s->regs.src_x = data & 0x3fff;",
          "623:         break;",
          "624:     case SRC_Y:",
          "625:         s->regs.src_y = data & 0x3fff;",
          "626:         break;",
          "627:     case DST_X:",
          "628:         s->regs.dst_x = data & 0x3fff;",
          "629:         break;",
          "630:     case DST_Y:",
          "631:         s->regs.dst_y = data & 0x3fff;",
          "632:         break;",
          "633:     case SRC_PITCH_OFFSET:",
          "634:         if (s->dev_id == PCI_DEVICE_ID_ATI_RAGE128_PF) {",
          "635:             s->regs.src_offset = (data & 0x1fffff) << 5;",
          "636:             s->regs.src_pitch = (data >> 21) & 0x3ff;",
          "637:             s->regs.src_tile = data >> 31;",
          "638:         } else {",
          "639:             s->regs.src_offset = (data & 0x3fffff) << 11;",
          "640:             s->regs.src_pitch = (data & 0x3fc00000) >> 16;",
          "641:             s->regs.src_tile = (data >> 30) & 1;",
          "642:         }",
          "643:         break;",
          "644:     case DST_PITCH_OFFSET:",
          "645:         if (s->dev_id == PCI_DEVICE_ID_ATI_RAGE128_PF) {",
          "646:             s->regs.dst_offset = (data & 0x1fffff) << 5;",
          "647:             s->regs.dst_pitch = (data >> 21) & 0x3ff;",
          "648:             s->regs.dst_tile = data >> 31;",
          "649:         } else {",
          "650:             s->regs.dst_offset = (data & 0x3fffff) << 11;",
          "651:             s->regs.dst_pitch = (data & 0x3fc00000) >> 16;",
          "652:             s->regs.dst_tile = data >> 30;",
          "653:         }",
          "654:         break;",
          "655:     case SRC_Y_X:",
          "656:         s->regs.src_x = data & 0x3fff;",
          "657:         s->regs.src_y = (data >> 16) & 0x3fff;",
          "658:         break;",
          "659:     case DST_Y_X:",
          "660:         s->regs.dst_x = data & 0x3fff;",
          "661:         s->regs.dst_y = (data >> 16) & 0x3fff;",
          "662:         break;",
          "663:     case DST_HEIGHT_WIDTH:",
          "664:         s->regs.dst_width = data & 0x3fff;",
          "665:         s->regs.dst_height = (data >> 16) & 0x3fff;",
          "666:         ati_2d_blt(s);",
          "667:         break;",
          "668:     case DP_GUI_MASTER_CNTL:",
          "669:         s->regs.dp_gui_master_cntl = data & 0xf800000f;",
          "670:         s->regs.dp_datatype = (data & 0x0f00) >> 8 | (data & 0x30f0) << 4 |",
          "671:                               (data & 0x4000) << 16;",
          "672:         s->regs.dp_mix = (data & GMC_ROP3_MASK) | (data & 0x7000000) >> 16;",
          "673:         break;",
          "674:     case DST_WIDTH_X:",
          "675:         s->regs.dst_x = data & 0x3fff;",
          "676:         s->regs.dst_width = (data >> 16) & 0x3fff;",
          "677:         ati_2d_blt(s);",
          "678:         break;",
          "679:     case SRC_X_Y:",
          "680:         s->regs.src_y = data & 0x3fff;",
          "681:         s->regs.src_x = (data >> 16) & 0x3fff;",
          "682:         break;",
          "683:     case DST_X_Y:",
          "684:         s->regs.dst_y = data & 0x3fff;",
          "685:         s->regs.dst_x = (data >> 16) & 0x3fff;",
          "686:         break;",
          "687:     case DST_WIDTH_HEIGHT:",
          "688:         s->regs.dst_height = data & 0x3fff;",
          "689:         s->regs.dst_width = (data >> 16) & 0x3fff;",
          "690:         ati_2d_blt(s);",
          "691:         break;",
          "692:     case DST_HEIGHT_Y:",
          "693:         s->regs.dst_y = data & 0x3fff;",
          "694:         s->regs.dst_height = (data >> 16) & 0x3fff;",
          "695:         break;",
          "696:     case SRC_OFFSET:",
          "697:         if (s->dev_id == PCI_DEVICE_ID_ATI_RAGE128_PF) {",
          "698:             s->regs.src_offset = data & 0xfffffff0;",
          "699:         } else {",
          "700:             s->regs.src_offset = data & 0xfffffc00;",
          "701:         }",
          "702:         break;",
          "703:     case SRC_PITCH:",
          "704:         if (s->dev_id == PCI_DEVICE_ID_ATI_RAGE128_PF) {",
          "705:             s->regs.src_pitch = data & 0x3fff;",
          "706:             s->regs.src_tile = (data >> 16) & 1;",
          "707:         } else {",
          "708:             s->regs.src_pitch = data & 0x3ff0;",
          "709:         }",
          "710:         break;",
          "711:     case DP_BRUSH_BKGD_CLR:",
          "712:         s->regs.dp_brush_bkgd_clr = data;",
          "713:         break;",
          "714:     case DP_BRUSH_FRGD_CLR:",
          "715:         s->regs.dp_brush_frgd_clr = data;",
          "716:         break;",
          "717:     case DP_CNTL:",
          "718:         s->regs.dp_cntl = data;",
          "719:         break;",
          "720:     case DP_DATATYPE:",
          "721:         s->regs.dp_datatype = data & 0xe0070f0f;",
          "722:         break;",
          "723:     case DP_MIX:",
          "724:         s->regs.dp_mix = data & 0x00ff0700;",
          "725:         break;",
          "726:     case DP_WRITE_MASK:",
          "727:         s->regs.dp_write_mask = data;",
          "728:         break;",
          "729:     case DEFAULT_OFFSET:",
          "730:         data &= (s->dev_id == PCI_DEVICE_ID_ATI_RAGE128_PF ?",
          "731:                  0x03fffc00 : 0xfffffc00);",
          "732:         s->regs.default_offset = data;",
          "733:         break;",
          "734:     case DEFAULT_PITCH:",
          "735:         if (s->dev_id == PCI_DEVICE_ID_ATI_RAGE128_PF) {",
          "736:             s->regs.default_pitch = data & 0x103ff;",
          "737:         }",
          "738:         break;",
          "739:     case DEFAULT_SC_BOTTOM_RIGHT:",
          "740:         s->regs.default_sc_bottom_right = data & 0x3fff3fff;",
          "741:         break;",
          "742:     default:",
          "743:         break;",
          "744:     }",
          "745: }",
          "747: static const MemoryRegionOps ati_mm_ops = {",
          "748:     .read = ati_mm_read,",
          "749:     .write = ati_mm_write,",
          "750:     .endianness = DEVICE_LITTLE_ENDIAN,",
          "751: };",
          "753: static void ati_vga_realize(PCIDevice *dev, Error **errp)",
          "754: {",
          "755:     ATIVGAState *s = ATI_VGA(dev);",
          "756:     VGACommonState *vga = &s->vga;",
          "758:     if (s->model) {",
          "759:         int i;",
          "760:         for (i = 0; i < ARRAY_SIZE(ati_model_aliases); i++) {",
          "761:             if (!strcmp(s->model, ati_model_aliases[i].name)) {",
          "762:                 s->dev_id = ati_model_aliases[i].dev_id;",
          "763:                 break;",
          "764:             }",
          "765:         }",
          "766:         if (i >= ARRAY_SIZE(ati_model_aliases)) {",
          "767:             warn_report(\"Unknown ATI VGA model name, \"",
          "768:                         \"using default rage128p\");",
          "769:         }",
          "770:     }",
          "771:     if (s->dev_id != PCI_DEVICE_ID_ATI_RAGE128_PF &&",
          "772:         s->dev_id != PCI_DEVICE_ID_ATI_RADEON_QY) {",
          "773:         error_setg(errp, \"Unknown ATI VGA device id, \"",
          "774:                    \"only 0x5046 and 0x5159 are supported\");",
          "775:         return;",
          "776:     }",
          "777:     pci_set_word(dev->config + PCI_DEVICE_ID, s->dev_id);",
          "779:     if (s->dev_id == PCI_DEVICE_ID_ATI_RADEON_QY &&",
          "780:         s->vga.vram_size_mb < 16) {",
          "781:         warn_report(\"Too small video memory for device id\");",
          "782:         s->vga.vram_size_mb = 16;",
          "783:     }",
          "786:     vga_common_init(vga, OBJECT(s));",
          "787:     vga_init(vga, OBJECT(s), pci_address_space(dev),",
          "788:              pci_address_space_io(dev), true);",
          "789:     vga->con = graphic_console_init(DEVICE(s), 0, s->vga.hw_ops, &s->vga);",
          "790:     if (s->cursor_guest_mode) {",
          "791:         vga->cursor_invalidate = ati_cursor_invalidate;",
          "792:         vga->cursor_draw_line = ati_cursor_draw_line;",
          "793:     }",
          "796:     memory_region_init_io(&s->mm, OBJECT(s), &ati_mm_ops, s,",
          "797:                           \"ati.mmregs\", 0x4000);",
          "799:     memory_region_init_alias(&s->io, OBJECT(s), \"ati.io\", &s->mm, 0, 0x100);",
          "801:     pci_register_bar(dev, 0, PCI_BASE_ADDRESS_MEM_PREFETCH, &vga->vram);",
          "802:     pci_register_bar(dev, 1, PCI_BASE_ADDRESS_SPACE_IO, &s->io);",
          "803:     pci_register_bar(dev, 2, PCI_BASE_ADDRESS_SPACE_MEMORY, &s->mm);",
          "804: }",
          "806: static void ati_vga_reset(DeviceState *dev)",
          "807: {",
          "808:     ATIVGAState *s = ATI_VGA(dev);",
          "811:     vga_common_reset(&s->vga);",
          "812:     s->mode = VGA_MODE;",
          "813: }",
          "815: static void ati_vga_exit(PCIDevice *dev)",
          "816: {",
          "817:     ATIVGAState *s = ATI_VGA(dev);",
          "819:     graphic_console_close(s->vga.con);",
          "820: }",
          "822: static Property ati_vga_properties[] = {",
          "823:     DEFINE_PROP_UINT32(\"vgamem_mb\", ATIVGAState, vga.vram_size_mb, 16),",
          "824:     DEFINE_PROP_STRING(\"model\", ATIVGAState, model),",
          "825:     DEFINE_PROP_UINT16(\"x-device-id\", ATIVGAState, dev_id,",
          "826:                        PCI_DEVICE_ID_ATI_RAGE128_PF),",
          "827:     DEFINE_PROP_BOOL(\"guest_hwcursor\", ATIVGAState, cursor_guest_mode, false),",
          "828:     DEFINE_PROP_END_OF_LIST()",
          "829: };",
          "831: static void ati_vga_class_init(ObjectClass *klass, void *data)",
          "832: {",
          "833:     DeviceClass *dc = DEVICE_CLASS(klass);",
          "834:     PCIDeviceClass *k = PCI_DEVICE_CLASS(klass);",
          "836:     dc->reset = ati_vga_reset;",
          "837:     dc->props = ati_vga_properties;",
          "838:     dc->hotpluggable = false;",
          "839:     set_bit(DEVICE_CATEGORY_DISPLAY, dc->categories);",
          "841:     k->class_id = PCI_CLASS_DISPLAY_VGA;",
          "842:     k->vendor_id = PCI_VENDOR_ID_ATI;",
          "843:     k->device_id = PCI_DEVICE_ID_ATI_RAGE128_PF;",
          "844:     k->romfile = \"vgabios-stdvga.bin\";",
          "845:     k->realize = ati_vga_realize;",
          "846:     k->exit = ati_vga_exit;",
          "847: }",
          "849: static const TypeInfo ati_vga_info = {",
          "850:     .name = TYPE_ATI_VGA,",
          "851:     .parent = TYPE_PCI_DEVICE,",
          "852:     .instance_size = sizeof(ATIVGAState),",
          "853:     .class_init = ati_vga_class_init,",
          "854:     .interfaces = (InterfaceInfo[]) {",
          "855:           { INTERFACE_CONVENTIONAL_PCI_DEVICE },",
          "856:           { },",
          "857:     },",
          "858: };",
          "860: static void ati_vga_register_types(void)",
          "861: {",
          "862:     type_register_static(&ati_vga_info);",
          "863: }",
          "865: type_init(ati_vga_register_types)",
          "",
          "---------------"
        ],
        "hw/display/ati_2d.c||hw/display/ati_2d.c": [
          "File: hw/display/ati_2d.c -> hw/display/ati_2d.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"ati_int.h\"",
          "11: #include \"ati_regs.h\"",
          "12: #include \"qemu/log.h\"",
          "13: #include \"ui/pixel_ops.h\"",
          "25: static int ati_bpp_from_datatype(ATIVGAState *s)",
          "26: {",
          "27:     switch (s->regs.dp_datatype & 0xf) {",
          "28:     case 2:",
          "29:         return 8;",
          "30:     case 3:",
          "31:     case 4:",
          "32:         return 16;",
          "33:     case 5:",
          "34:         return 24;",
          "35:     case 6:",
          "36:         return 32;",
          "37:     default:",
          "38:         qemu_log_mask(LOG_UNIMP, \"Unknown dst datatype %d\\n\",",
          "39:                       s->regs.dp_datatype & 0xf);",
          "40:         return 0;",
          "41:     }",
          "42: }",
          "44: void ati_2d_blt(ATIVGAState *s)",
          "45: {",
          "48:     DisplaySurface *ds = qemu_console_surface(s->vga.con);",
          "49:     DPRINTF(\"%p %u ds: %p %d %d rop: %x\\n\", s->vga.vram_ptr,",
          "50:             s->vga.vbe_start_addr, surface_data(ds), surface_stride(ds),",
          "51:             surface_bits_per_pixel(ds),",
          "52:             (s->regs.dp_mix & GMC_ROP3_MASK) >> 16);",
          "53:     DPRINTF(\"%d %d, %d %d, (%d,%d) -> (%d,%d) %dx%d\\n\", s->regs.src_offset,",
          "54:             s->regs.dst_offset, s->regs.src_pitch, s->regs.dst_pitch,",
          "55:             s->regs.src_x, s->regs.src_y, s->regs.dst_x, s->regs.dst_y,",
          "56:             s->regs.dst_width, s->regs.dst_height);",
          "57:     switch (s->regs.dp_mix & GMC_ROP3_MASK) {",
          "58:     case ROP3_SRCCOPY:",
          "59:     {",
          "60:         uint8_t *src_bits, *dst_bits, *end;",
          "61:         int src_stride, dst_stride, bpp = ati_bpp_from_datatype(s);",
          "62:         src_bits = s->vga.vram_ptr + s->regs.src_offset;",
          "63:         dst_bits = s->vga.vram_ptr + s->regs.dst_offset;",
          "64:         src_stride = s->regs.src_pitch;",
          "65:         dst_stride = s->regs.dst_pitch;",
          "67:         if (s->dev_id == PCI_DEVICE_ID_ATI_RAGE128_PF) {",
          "68:             src_bits += s->regs.crtc_offset & 0x07ffffff;",
          "69:             dst_bits += s->regs.crtc_offset & 0x07ffffff;",
          "70:             src_stride *= bpp;",
          "71:             dst_stride *= bpp;",
          "72:         }",
          "73:         src_stride /= sizeof(uint32_t);",
          "74:         dst_stride /= sizeof(uint32_t);",
          "76:         DPRINTF(\"pixman_blt(%p, %p, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d)\\n\",",
          "77:                 src_bits, dst_bits, src_stride, dst_stride, bpp, bpp,",
          "78:                 s->regs.src_x, s->regs.src_y, s->regs.dst_x, s->regs.dst_y,",
          "79:                 s->regs.dst_width, s->regs.dst_height);",
          "80:         end = s->vga.vram_ptr + s->vga.vram_size;",
          "81:         if (src_bits >= end || dst_bits >= end ||",
          "82:             src_bits + (s->regs.src_y + s->regs.dst_height) * src_stride +",
          "83:             s->regs.src_x >= end ||",
          "84:             dst_bits + (s->regs.dst_y + s->regs.dst_height) * dst_stride +",
          "85:             s->regs.dst_x >= end) {",
          "86:             qemu_log_mask(LOG_UNIMP, \"blt outside vram not implemented\\n\");",
          "87:             return;",
          "88:         }",
          "89:         pixman_blt((uint32_t *)src_bits, (uint32_t *)dst_bits,",
          "90:                    src_stride, dst_stride, bpp, bpp,",
          "91:                    s->regs.src_x, s->regs.src_y,",
          "92:                    s->regs.dst_x, s->regs.dst_y,",
          "93:                    s->regs.dst_width, s->regs.dst_height);",
          "94:         if (dst_bits >= s->vga.vram_ptr + s->vga.vbe_start_addr &&",
          "95:             dst_bits < s->vga.vram_ptr + s->vga.vbe_start_addr +",
          "96:             s->vga.vbe_regs[VBE_DISPI_INDEX_YRES] * s->vga.vbe_line_offset) {",
          "97:             memory_region_set_dirty(&s->vga.vram, s->vga.vbe_start_addr +",
          "98:                                     s->regs.dst_offset +",
          "99:                                     s->regs.dst_y * surface_stride(ds),",
          "100:                                     s->regs.dst_height * surface_stride(ds));",
          "101:         }",
          "102:         s->regs.dst_x += s->regs.dst_width;",
          "103:         s->regs.dst_y += s->regs.dst_height;",
          "104:         break;",
          "105:     }",
          "106:     case ROP3_PATCOPY:",
          "107:     case ROP3_BLACKNESS:",
          "108:     case ROP3_WHITENESS:",
          "109:     {",
          "110:         uint8_t *dst_bits, *end;",
          "111:         int dst_stride, bpp = ati_bpp_from_datatype(s);",
          "112:         uint32_t filler = 0;",
          "113:         dst_bits = s->vga.vram_ptr + s->regs.dst_offset;",
          "114:         dst_stride = s->regs.dst_pitch;",
          "116:         if (s->dev_id == PCI_DEVICE_ID_ATI_RAGE128_PF) {",
          "117:             dst_bits += s->regs.crtc_offset & 0x07ffffff;",
          "118:             dst_stride *= bpp;",
          "119:         }",
          "120:         dst_stride /= sizeof(uint32_t);",
          "122:         switch (s->regs.dp_mix & GMC_ROP3_MASK) {",
          "123:         case ROP3_PATCOPY:",
          "124:             filler = bswap32(s->regs.dp_brush_frgd_clr);",
          "125:             break;",
          "126:         case ROP3_BLACKNESS:",
          "127:             filler = rgb_to_pixel32(s->vga.palette[0], s->vga.palette[1],",
          "128:                                     s->vga.palette[2]) << 8 | 0xff;",
          "129:             break;",
          "130:         case ROP3_WHITENESS:",
          "131:             filler = rgb_to_pixel32(s->vga.palette[3], s->vga.palette[4],",
          "132:                                     s->vga.palette[5]) << 8 | 0xff;",
          "133:             break;",
          "134:         }",
          "136:         DPRINTF(\"pixman_fill(%p, %d, %d, %d, %d, %d, %d, %x)\\n\",",
          "137:                 dst_bits, dst_stride, bpp,",
          "138:                 s->regs.dst_x, s->regs.dst_y,",
          "139:                 s->regs.dst_width, s->regs.dst_height,",
          "140:                 filler);",
          "141:         end = s->vga.vram_ptr + s->vga.vram_size;",
          "142:         if (dst_bits >= end ||",
          "143:             dst_bits + (s->regs.dst_y + s->regs.dst_height) * dst_stride +",
          "144:             s->regs.dst_x >= end) {",
          "145:             qemu_log_mask(LOG_UNIMP, \"blt outside vram not implemented\\n\");",
          "146:             return;",
          "147:         }",
          "148:         pixman_fill((uint32_t *)dst_bits, dst_stride, bpp,",
          "149:                    s->regs.dst_x, s->regs.dst_y,",
          "150:                    s->regs.dst_width, s->regs.dst_height,",
          "151:                    filler);",
          "152:         if (dst_bits >= s->vga.vram_ptr + s->vga.vbe_start_addr &&",
          "153:             dst_bits < s->vga.vram_ptr + s->vga.vbe_start_addr +",
          "154:             s->vga.vbe_regs[VBE_DISPI_INDEX_YRES] * s->vga.vbe_line_offset) {",
          "155:             memory_region_set_dirty(&s->vga.vram, s->vga.vbe_start_addr +",
          "156:                                     s->regs.dst_offset +",
          "157:                                     s->regs.dst_y * surface_stride(ds),",
          "158:                                     s->regs.dst_height * surface_stride(ds));",
          "159:         }",
          "160:         s->regs.dst_y += s->regs.dst_height;",
          "161:         break;",
          "162:     }",
          "163:     default:",
          "164:         qemu_log_mask(LOG_UNIMP, \"Unimplemented ati_2d blt op %x\\n\",",
          "165:                       (s->regs.dp_mix & GMC_ROP3_MASK) >> 16);",
          "166:     }",
          "167: }",
          "",
          "---------------"
        ],
        "hw/display/ati_dbg.c||hw/display/ati_dbg.c": [
          "File: hw/display/ati_dbg.c -> hw/display/ati_dbg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"ati_int.h\"",
          "3: #ifdef DEBUG_ATI",
          "4: struct ati_regdesc {",
          "5:     const char *name;",
          "6:     int num;",
          "7: };",
          "9: static struct ati_regdesc ati_reg_names[] = {",
          "10:     {\"MM_INDEX\", 0x0000},",
          "11:     {\"MM_DATA\", 0x0004},",
          "12:     {\"CLOCK_CNTL_INDEX\", 0x0008},",
          "13:     {\"CLOCK_CNTL_DATA\", 0x000c},",
          "14:     {\"BIOS_0_SCRATCH\", 0x0010},",
          "15:     {\"BUS_CNTL\", 0x0030},",
          "16:     {\"BUS_CNTL1\", 0x0034},",
          "17:     {\"GEN_INT_CNTL\", 0x0040},",
          "18:     {\"CRTC_GEN_CNTL\", 0x0050},",
          "19:     {\"CRTC_EXT_CNTL\", 0x0054},",
          "20:     {\"DAC_CNTL\", 0x0058},",
          "21:     {\"GPIO_MONID\", 0x0068},",
          "22:     {\"I2C_CNTL_1\", 0x0094},",
          "23:     {\"PALETTE_INDEX\", 0x00b0},",
          "24:     {\"PALETTE_DATA\", 0x00b4},",
          "25:     {\"CNFG_CNTL\", 0x00e0},",
          "26:     {\"GEN_RESET_CNTL\", 0x00f0},",
          "27:     {\"CNFG_MEMSIZE\", 0x00f8},",
          "28:     {\"MEM_CNTL\", 0x0140},",
          "29:     {\"MC_FB_LOCATION\", 0x0148},",
          "30:     {\"MC_AGP_LOCATION\", 0x014C},",
          "31:     {\"MC_STATUS\", 0x0150},",
          "32:     {\"MEM_POWER_MISC\", 0x015c},",
          "33:     {\"AGP_BASE\", 0x0170},",
          "34:     {\"AGP_CNTL\", 0x0174},",
          "35:     {\"AGP_APER_OFFSET\", 0x0178},",
          "36:     {\"PCI_GART_PAGE\", 0x017c},",
          "37:     {\"PC_NGUI_MODE\", 0x0180},",
          "38:     {\"PC_NGUI_CTLSTAT\", 0x0184},",
          "39:     {\"MPP_TB_CONFIG\", 0x01C0},",
          "40:     {\"MPP_GP_CONFIG\", 0x01C8},",
          "41:     {\"VIPH_CONTROL\", 0x01D0},",
          "42:     {\"CRTC_H_TOTAL_DISP\", 0x0200},",
          "43:     {\"CRTC_H_SYNC_STRT_WID\", 0x0204},",
          "44:     {\"CRTC_V_TOTAL_DISP\", 0x0208},",
          "45:     {\"CRTC_V_SYNC_STRT_WID\", 0x020c},",
          "46:     {\"CRTC_VLINE_CRNT_VLINE\", 0x0210},",
          "47:     {\"CRTC_CRNT_FRAME\", 0x0214},",
          "48:     {\"CRTC_GUI_TRIG_VLINE\", 0x0218},",
          "49:     {\"CRTC_OFFSET\", 0x0224},",
          "50:     {\"CRTC_OFFSET_CNTL\", 0x0228},",
          "51:     {\"CRTC_PITCH\", 0x022c},",
          "52:     {\"OVR_CLR\", 0x0230},",
          "53:     {\"OVR_WID_LEFT_RIGHT\", 0x0234},",
          "54:     {\"OVR_WID_TOP_BOTTOM\", 0x0238},",
          "55:     {\"CUR_OFFSET\", 0x0260},",
          "56:     {\"CUR_HORZ_VERT_POSN\", 0x0264},",
          "57:     {\"CUR_HORZ_VERT_OFF\", 0x0268},",
          "58:     {\"CUR_CLR0\", 0x026c},",
          "59:     {\"CUR_CLR1\", 0x0270},",
          "60:     {\"LVDS_GEN_CNTL\", 0x02d0},",
          "61:     {\"DDA_CONFIG\", 0x02e0},",
          "62:     {\"DDA_ON_OFF\", 0x02e4},",
          "63:     {\"VGA_DDA_CONFIG\", 0x02e8},",
          "64:     {\"VGA_DDA_ON_OFF\", 0x02ec},",
          "65:     {\"CRTC2_H_TOTAL_DISP\", 0x0300},",
          "66:     {\"CRTC2_H_SYNC_STRT_WID\", 0x0304},",
          "67:     {\"CRTC2_V_TOTAL_DISP\", 0x0308},",
          "68:     {\"CRTC2_V_SYNC_STRT_WID\", 0x030c},",
          "69:     {\"CRTC2_VLINE_CRNT_VLINE\", 0x0310},",
          "70:     {\"CRTC2_CRNT_FRAME\", 0x0314},",
          "71:     {\"CRTC2_GUI_TRIG_VLINE\", 0x0318},",
          "72:     {\"CRTC2_OFFSET\", 0x0324},",
          "73:     {\"CRTC2_OFFSET_CNTL\", 0x0328},",
          "74:     {\"CRTC2_PITCH\", 0x032c},",
          "75:     {\"DDA2_CONFIG\", 0x03e0},",
          "76:     {\"DDA2_ON_OFF\", 0x03e4},",
          "77:     {\"CRTC2_GEN_CNTL\", 0x03f8},",
          "78:     {\"CRTC2_STATUS\", 0x03fc},",
          "79:     {\"OV0_SCALE_CNTL\", 0x0420},",
          "80:     {\"SUBPIC_CNTL\", 0x0540},",
          "81:     {\"PM4_BUFFER_OFFSET\", 0x0700},",
          "82:     {\"PM4_BUFFER_CNTL\", 0x0704},",
          "83:     {\"PM4_BUFFER_WM_CNTL\", 0x0708},",
          "84:     {\"PM4_BUFFER_DL_RPTR_ADDR\", 0x070c},",
          "85:     {\"PM4_BUFFER_DL_RPTR\", 0x0710},",
          "86:     {\"PM4_BUFFER_DL_WPTR\", 0x0714},",
          "87:     {\"PM4_VC_FPU_SETUP\", 0x071c},",
          "88:     {\"PM4_FPU_CNTL\", 0x0720},",
          "89:     {\"PM4_VC_FORMAT\", 0x0724},",
          "90:     {\"PM4_VC_CNTL\", 0x0728},",
          "91:     {\"PM4_VC_I01\", 0x072c},",
          "92:     {\"PM4_VC_VLOFF\", 0x0730},",
          "93:     {\"PM4_VC_VLSIZE\", 0x0734},",
          "94:     {\"PM4_IW_INDOFF\", 0x0738},",
          "95:     {\"PM4_IW_INDSIZE\", 0x073c},",
          "96:     {\"PM4_FPU_FPX0\", 0x0740},",
          "97:     {\"PM4_FPU_FPY0\", 0x0744},",
          "98:     {\"PM4_FPU_FPX1\", 0x0748},",
          "99:     {\"PM4_FPU_FPY1\", 0x074c},",
          "100:     {\"PM4_FPU_FPX2\", 0x0750},",
          "101:     {\"PM4_FPU_FPY2\", 0x0754},",
          "102:     {\"PM4_FPU_FPY3\", 0x0758},",
          "103:     {\"PM4_FPU_FPY4\", 0x075c},",
          "104:     {\"PM4_FPU_FPY5\", 0x0760},",
          "105:     {\"PM4_FPU_FPY6\", 0x0764},",
          "106:     {\"PM4_FPU_FPR\", 0x0768},",
          "107:     {\"PM4_FPU_FPG\", 0x076c},",
          "108:     {\"PM4_FPU_FPB\", 0x0770},",
          "109:     {\"PM4_FPU_FPA\", 0x0774},",
          "110:     {\"PM4_FPU_INTXY0\", 0x0780},",
          "111:     {\"PM4_FPU_INTXY1\", 0x0784},",
          "112:     {\"PM4_FPU_INTXY2\", 0x0788},",
          "113:     {\"PM4_FPU_INTARGB\", 0x078c},",
          "114:     {\"PM4_FPU_FPTWICEAREA\", 0x0790},",
          "115:     {\"PM4_FPU_DMAJOR01\", 0x0794},",
          "116:     {\"PM4_FPU_DMAJOR12\", 0x0798},",
          "117:     {\"PM4_FPU_DMAJOR02\", 0x079c},",
          "118:     {\"PM4_FPU_STAT\", 0x07a0},",
          "119:     {\"PM4_STAT\", 0x07b8},",
          "120:     {\"PM4_TEST_CNTL\", 0x07d0},",
          "121:     {\"PM4_MICROCODE_ADDR\", 0x07d4},",
          "122:     {\"PM4_MICROCODE_RADDR\", 0x07d8},",
          "123:     {\"PM4_MICROCODE_DATAH\", 0x07dc},",
          "124:     {\"PM4_MICROCODE_DATAL\", 0x07e0},",
          "125:     {\"PM4_CMDFIFO_ADDR\", 0x07e4},",
          "126:     {\"PM4_CMDFIFO_DATAH\", 0x07e8},",
          "127:     {\"PM4_CMDFIFO_DATAL\", 0x07ec},",
          "128:     {\"PM4_BUFFER_ADDR\", 0x07f0},",
          "129:     {\"PM4_BUFFER_DATAH\", 0x07f4},",
          "130:     {\"PM4_BUFFER_DATAL\", 0x07f8},",
          "131:     {\"PM4_MICRO_CNTL\", 0x07fc},",
          "132:     {\"CAP0_TRIG_CNTL\", 0x0950},",
          "133:     {\"CAP1_TRIG_CNTL\", 0x09c0},",
          "134:     {\"RBBM_STATUS\", 0x0e40},",
          "135:     {\"PM4_FIFO_DATA_EVEN\", 0x1000},",
          "136:     {\"PM4_FIFO_DATA_ODD\", 0x1004},",
          "137:     {\"DST_OFFSET\", 0x1404},",
          "138:     {\"DST_PITCH\", 0x1408},",
          "139:     {\"DST_WIDTH\", 0x140c},",
          "140:     {\"DST_HEIGHT\", 0x1410},",
          "141:     {\"SRC_X\", 0x1414},",
          "142:     {\"SRC_Y\", 0x1418},",
          "143:     {\"DST_X\", 0x141c},",
          "144:     {\"DST_Y\", 0x1420},",
          "145:     {\"SRC_PITCH_OFFSET\", 0x1428},",
          "146:     {\"DST_PITCH_OFFSET\", 0x142c},",
          "147:     {\"SRC_Y_X\", 0x1434},",
          "148:     {\"DST_Y_X\", 0x1438},",
          "149:     {\"DST_HEIGHT_WIDTH\", 0x143c},",
          "150:     {\"DP_GUI_MASTER_CNTL\", 0x146c},",
          "151:     {\"BRUSH_SCALE\", 0x1470},",
          "152:     {\"BRUSH_Y_X\", 0x1474},",
          "153:     {\"DP_BRUSH_BKGD_CLR\", 0x1478},",
          "154:     {\"DP_BRUSH_FRGD_CLR\", 0x147c},",
          "155:     {\"DST_WIDTH_X\", 0x1588},",
          "156:     {\"DST_HEIGHT_WIDTH_8\", 0x158c},",
          "157:     {\"SRC_X_Y\", 0x1590},",
          "158:     {\"DST_X_Y\", 0x1594},",
          "159:     {\"DST_WIDTH_HEIGHT\", 0x1598},",
          "160:     {\"DST_WIDTH_X_INCY\", 0x159c},",
          "161:     {\"DST_HEIGHT_Y\", 0x15a0},",
          "162:     {\"DST_X_SUB\", 0x15a4},",
          "163:     {\"DST_Y_SUB\", 0x15a8},",
          "164:     {\"SRC_OFFSET\", 0x15ac},",
          "165:     {\"SRC_PITCH\", 0x15b0},",
          "166:     {\"DST_HEIGHT_WIDTH_BW\", 0x15b4},",
          "167:     {\"CLR_CMP_CNTL\", 0x15c0},",
          "168:     {\"CLR_CMP_CLR_SRC\", 0x15c4},",
          "169:     {\"CLR_CMP_CLR_DST\", 0x15c8},",
          "170:     {\"CLR_CMP_MASK\", 0x15cc},",
          "171:     {\"DP_SRC_FRGD_CLR\", 0x15d8},",
          "172:     {\"DP_SRC_BKGD_CLR\", 0x15dc},",
          "173:     {\"DST_BRES_ERR\", 0x1628},",
          "174:     {\"DST_BRES_INC\", 0x162c},",
          "175:     {\"DST_BRES_DEC\", 0x1630},",
          "176:     {\"DST_BRES_LNTH\", 0x1634},",
          "177:     {\"DST_BRES_LNTH_SUB\", 0x1638},",
          "178:     {\"SC_LEFT\", 0x1640},",
          "179:     {\"SC_RIGHT\", 0x1644},",
          "180:     {\"SC_TOP\", 0x1648},",
          "181:     {\"SC_BOTTOM\", 0x164c},",
          "182:     {\"SRC_SC_RIGHT\", 0x1654},",
          "183:     {\"SRC_SC_BOTTOM\", 0x165c},",
          "184:     {\"GUI_DEBUG0\", 0x16a0},",
          "185:     {\"GUI_DEBUG1\", 0x16a4},",
          "186:     {\"GUI_TIMEOUT\", 0x16b0},",
          "187:     {\"GUI_TIMEOUT0\", 0x16b4},",
          "188:     {\"GUI_TIMEOUT1\", 0x16b8},",
          "189:     {\"GUI_PROBE\", 0x16bc},",
          "190:     {\"DP_CNTL\", 0x16c0},",
          "191:     {\"DP_DATATYPE\", 0x16c4},",
          "192:     {\"DP_MIX\", 0x16c8},",
          "193:     {\"DP_WRITE_MASK\", 0x16cc},",
          "194:     {\"DP_CNTL_XDIR_YDIR_YMAJOR\", 0x16d0},",
          "195:     {\"DEFAULT_OFFSET\", 0x16e0},",
          "196:     {\"DEFAULT_PITCH\", 0x16e4},",
          "197:     {\"DEFAULT_SC_BOTTOM_RIGHT\", 0x16e8},",
          "198:     {\"SC_TOP_LEFT\", 0x16ec},",
          "199:     {\"SC_BOTTOM_RIGHT\", 0x16f0},",
          "200:     {\"SRC_SC_BOTTOM_RIGHT\", 0x16f4},",
          "201:     {\"DST_TILE\", 0x1700},",
          "202:     {\"WAIT_UNTIL\", 0x1720},",
          "203:     {\"CACHE_CNTL\", 0x1724},",
          "204:     {\"GUI_STAT\", 0x1740},",
          "205:     {\"PC_GUI_MODE\", 0x1744},",
          "206:     {\"PC_GUI_CTLSTAT\", 0x1748},",
          "207:     {\"PC_DEBUG_MODE\", 0x1760},",
          "208:     {\"BRES_DST_ERR_DEC\", 0x1780},",
          "209:     {\"TRAIL_BRES_T12_ERR_DEC\", 0x1784},",
          "210:     {\"TRAIL_BRES_T12_INC\", 0x1788},",
          "211:     {\"DP_T12_CNTL\", 0x178c},",
          "212:     {\"DST_BRES_T1_LNTH\", 0x1790},",
          "213:     {\"DST_BRES_T2_LNTH\", 0x1794},",
          "214:     {\"SCALE_SRC_HEIGHT_WIDTH\", 0x1994},",
          "215:     {\"SCALE_OFFSET_0\", 0x1998},",
          "216:     {\"SCALE_PITCH\", 0x199c},",
          "217:     {\"SCALE_X_INC\", 0x19a0},",
          "218:     {\"SCALE_Y_INC\", 0x19a4},",
          "219:     {\"SCALE_HACC\", 0x19a8},",
          "220:     {\"SCALE_VACC\", 0x19ac},",
          "221:     {\"SCALE_DST_X_Y\", 0x19b0},",
          "222:     {\"SCALE_DST_HEIGHT_WIDTH\", 0x19b4},",
          "223:     {\"SCALE_3D_CNTL\", 0x1a00},",
          "224:     {\"SCALE_3D_DATATYPE\", 0x1a20},",
          "225:     {\"SETUP_CNTL\", 0x1bc4},",
          "226:     {\"SOLID_COLOR\", 0x1bc8},",
          "227:     {\"WINDOW_XY_OFFSET\", 0x1bcc},",
          "228:     {\"DRAW_LINE_POINT\", 0x1bd0},",
          "229:     {\"SETUP_CNTL_PM4\", 0x1bd4},",
          "230:     {\"DST_PITCH_OFFSET_C\", 0x1c80},",
          "231:     {\"DP_GUI_MASTER_CNTL_C\", 0x1c84},",
          "232:     {\"SC_TOP_LEFT_C\", 0x1c88},",
          "233:     {\"SC_BOTTOM_RIGHT_C\", 0x1c8c},",
          "234:     {\"CLR_CMP_MASK_3D\", 0x1A28},",
          "235:     {\"MISC_3D_STATE_CNTL_REG\", 0x1CA0},",
          "236:     {\"MC_SRC1_CNTL\", 0x19D8},",
          "237:     {\"TEX_CNTL\", 0x1800},",
          "238:     {\"RAGE128_MPP_TB_CONFIG\", 0x01c0},",
          "239:     {NULL, -1}",
          "240: };",
          "242: const char *ati_reg_name(int num)",
          "243: {",
          "244:     int i;",
          "246:     num &= ~3;",
          "247:     for (i = 0; ati_reg_names[i].name; i++) {",
          "248:         if (ati_reg_names[i].num == num) {",
          "249:             return ati_reg_names[i].name;",
          "250:         }",
          "251:     }",
          "252:     return \"unknown\";",
          "253: }",
          "254: #else",
          "255: const char *ati_reg_name(int num)",
          "256: {",
          "257:     return \"\";",
          "258: }",
          "259: #endif",
          "",
          "---------------"
        ],
        "hw/display/ati_int.h||hw/display/ati_int.h": [
          "File: hw/display/ati_int.h -> hw/display/ati_int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #ifndef ATI_INT_H",
          "10: #define ATI_INT_H",
          "12: #include \"qemu/osdep.h\"",
          "13: #include \"hw/pci/pci.h\"",
          "14: #include \"vga_int.h\"",
          "18: #ifdef DEBUG_ATI",
          "19: #define DPRINTF(fmt, ...) printf(\"%s: \" fmt, __func__, ## __VA_ARGS__)",
          "20: #else",
          "21: #define DPRINTF(fmt, ...) do {} while (0)",
          "22: #endif",
          "24: #define PCI_VENDOR_ID_ATI 0x1002",
          "26: #define PCI_DEVICE_ID_ATI_RAGE128_PF 0x5046",
          "28: #define PCI_DEVICE_ID_ATI_RADEON_QY 0x5159",
          "30: #define TYPE_ATI_VGA \"ati-vga\"",
          "31: #define ATI_VGA(obj) OBJECT_CHECK(ATIVGAState, (obj), TYPE_ATI_VGA)",
          "33: typedef struct ATIVGARegs {",
          "34:     uint32_t mm_index;",
          "35:     uint32_t bios_scratch[8];",
          "36:     uint32_t crtc_gen_cntl;",
          "37:     uint32_t crtc_ext_cntl;",
          "38:     uint32_t dac_cntl;",
          "39:     uint32_t crtc_h_total_disp;",
          "40:     uint32_t crtc_h_sync_strt_wid;",
          "41:     uint32_t crtc_v_total_disp;",
          "42:     uint32_t crtc_v_sync_strt_wid;",
          "43:     uint32_t crtc_offset;",
          "44:     uint32_t crtc_offset_cntl;",
          "45:     uint32_t crtc_pitch;",
          "46:     uint32_t cur_offset;",
          "47:     uint32_t cur_hv_pos;",
          "48:     uint32_t cur_hv_offs;",
          "49:     uint32_t cur_color0;",
          "50:     uint32_t cur_color1;",
          "51:     uint32_t dst_offset;",
          "52:     uint32_t dst_pitch;",
          "53:     uint32_t dst_tile;",
          "54:     uint32_t dst_width;",
          "55:     uint32_t dst_height;",
          "56:     uint32_t src_offset;",
          "57:     uint32_t src_pitch;",
          "58:     uint32_t src_tile;",
          "59:     uint32_t src_x;",
          "60:     uint32_t src_y;",
          "61:     uint32_t dst_x;",
          "62:     uint32_t dst_y;",
          "63:     uint32_t dp_gui_master_cntl;",
          "64:     uint32_t dp_brush_bkgd_clr;",
          "65:     uint32_t dp_brush_frgd_clr;",
          "66:     uint32_t dp_src_frgd_clr;",
          "67:     uint32_t dp_src_bkgd_clr;",
          "68:     uint32_t dp_cntl;",
          "69:     uint32_t dp_datatype;",
          "70:     uint32_t dp_mix;",
          "71:     uint32_t dp_write_mask;",
          "72:     uint32_t default_offset;",
          "73:     uint32_t default_pitch;",
          "74:     uint32_t default_sc_bottom_right;",
          "75: } ATIVGARegs;",
          "77: typedef struct ATIVGAState {",
          "78:     PCIDevice dev;",
          "79:     VGACommonState vga;",
          "80:     char *model;",
          "81:     uint16_t dev_id;",
          "82:     uint8_t mode;",
          "83:     bool cursor_guest_mode;",
          "84:     uint16_t cursor_size;",
          "85:     uint32_t cursor_offset;",
          "86:     QEMUCursor *cursor;",
          "87:     MemoryRegion io;",
          "88:     MemoryRegion mm;",
          "89:     ATIVGARegs regs;",
          "90: } ATIVGAState;",
          "92: const char *ati_reg_name(int num);",
          "94: void ati_2d_blt(ATIVGAState *s);",
          "",
          "---------------"
        ],
        "hw/display/ati_regs.h||hw/display/ati_regs.h": [
          "File: hw/display/ati_regs.h -> hw/display/ati_regs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #ifndef ATI_REGS_H",
          "25: #define ATI_REGS_H",
          "29: #define MM_INDEX                                0x0000",
          "30: #define MM_DATA                                 0x0004",
          "31: #define CLOCK_CNTL_INDEX                        0x0008",
          "32: #define CLOCK_CNTL_DATA                         0x000c",
          "33: #define BIOS_0_SCRATCH                          0x0010",
          "34: #define BUS_CNTL                                0x0030",
          "35: #define BUS_CNTL1                               0x0034",
          "36: #define GEN_INT_CNTL                            0x0040",
          "37: #define CRTC_GEN_CNTL                           0x0050",
          "38: #define CRTC_EXT_CNTL                           0x0054",
          "39: #define DAC_CNTL                                0x0058",
          "40: #define GPIO_MONID                              0x0068",
          "41: #define I2C_CNTL_1                              0x0094",
          "42: #define PALETTE_INDEX                           0x00b0",
          "43: #define PALETTE_DATA                            0x00b4",
          "44: #define CNFG_CNTL                               0x00e0",
          "45: #define GEN_RESET_CNTL                          0x00f0",
          "46: #define CNFG_MEMSIZE                            0x00f8",
          "47: #define MEM_CNTL                                0x0140",
          "48: #define MC_FB_LOCATION                          0x0148",
          "49: #define MC_AGP_LOCATION                         0x014C",
          "50: #define MC_STATUS                               0x0150",
          "51: #define MEM_POWER_MISC                          0x015c",
          "52: #define AGP_BASE                                0x0170",
          "53: #define AGP_CNTL                                0x0174",
          "54: #define AGP_APER_OFFSET                         0x0178",
          "55: #define PCI_GART_PAGE                           0x017c",
          "56: #define PC_NGUI_MODE                            0x0180",
          "57: #define PC_NGUI_CTLSTAT                         0x0184",
          "58: #define MPP_TB_CONFIG                           0x01C0",
          "59: #define MPP_GP_CONFIG                           0x01C8",
          "60: #define VIPH_CONTROL                            0x01D0",
          "61: #define CRTC_H_TOTAL_DISP                       0x0200",
          "62: #define CRTC_H_SYNC_STRT_WID                    0x0204",
          "63: #define CRTC_V_TOTAL_DISP                       0x0208",
          "64: #define CRTC_V_SYNC_STRT_WID                    0x020c",
          "65: #define CRTC_VLINE_CRNT_VLINE                   0x0210",
          "66: #define CRTC_CRNT_FRAME                         0x0214",
          "67: #define CRTC_GUI_TRIG_VLINE                     0x0218",
          "68: #define CRTC_OFFSET                             0x0224",
          "69: #define CRTC_OFFSET_CNTL                        0x0228",
          "70: #define CRTC_PITCH                              0x022c",
          "71: #define OVR_CLR                                 0x0230",
          "72: #define OVR_WID_LEFT_RIGHT                      0x0234",
          "73: #define OVR_WID_TOP_BOTTOM                      0x0238",
          "74: #define CUR_OFFSET                              0x0260",
          "75: #define CUR_HORZ_VERT_POSN                      0x0264",
          "76: #define CUR_HORZ_VERT_OFF                       0x0268",
          "77: #define CUR_CLR0                                0x026c",
          "78: #define CUR_CLR1                                0x0270",
          "79: #define LVDS_GEN_CNTL                           0x02d0",
          "80: #define DDA_CONFIG                              0x02e0",
          "81: #define DDA_ON_OFF                              0x02e4",
          "82: #define VGA_DDA_CONFIG                          0x02e8",
          "83: #define VGA_DDA_ON_OFF                          0x02ec",
          "84: #define CRTC2_H_TOTAL_DISP                      0x0300",
          "85: #define CRTC2_H_SYNC_STRT_WID                   0x0304",
          "86: #define CRTC2_V_TOTAL_DISP                      0x0308",
          "87: #define CRTC2_V_SYNC_STRT_WID                   0x030c",
          "88: #define CRTC2_VLINE_CRNT_VLINE                  0x0310",
          "89: #define CRTC2_CRNT_FRAME                        0x0314",
          "90: #define CRTC2_GUI_TRIG_VLINE                    0x0318",
          "91: #define CRTC2_OFFSET                            0x0324",
          "92: #define CRTC2_OFFSET_CNTL                       0x0328",
          "93: #define CRTC2_PITCH                             0x032c",
          "94: #define DDA2_CONFIG                             0x03e0",
          "95: #define DDA2_ON_OFF                             0x03e4",
          "96: #define CRTC2_GEN_CNTL                          0x03f8",
          "97: #define CRTC2_STATUS                            0x03fc",
          "98: #define OV0_SCALE_CNTL                          0x0420",
          "99: #define SUBPIC_CNTL                             0x0540",
          "100: #define PM4_BUFFER_OFFSET                       0x0700",
          "101: #define PM4_BUFFER_CNTL                         0x0704",
          "102: #define PM4_BUFFER_WM_CNTL                      0x0708",
          "103: #define PM4_BUFFER_DL_RPTR_ADDR                 0x070c",
          "104: #define PM4_BUFFER_DL_RPTR                      0x0710",
          "105: #define PM4_BUFFER_DL_WPTR                      0x0714",
          "106: #define PM4_VC_FPU_SETUP                        0x071c",
          "107: #define PM4_FPU_CNTL                            0x0720",
          "108: #define PM4_VC_FORMAT                           0x0724",
          "109: #define PM4_VC_CNTL                             0x0728",
          "110: #define PM4_VC_I01                              0x072c",
          "111: #define PM4_VC_VLOFF                            0x0730",
          "112: #define PM4_VC_VLSIZE                           0x0734",
          "113: #define PM4_IW_INDOFF                           0x0738",
          "114: #define PM4_IW_INDSIZE                          0x073c",
          "115: #define PM4_FPU_FPX0                            0x0740",
          "116: #define PM4_FPU_FPY0                            0x0744",
          "117: #define PM4_FPU_FPX1                            0x0748",
          "118: #define PM4_FPU_FPY1                            0x074c",
          "119: #define PM4_FPU_FPX2                            0x0750",
          "120: #define PM4_FPU_FPY2                            0x0754",
          "121: #define PM4_FPU_FPY3                            0x0758",
          "122: #define PM4_FPU_FPY4                            0x075c",
          "123: #define PM4_FPU_FPY5                            0x0760",
          "124: #define PM4_FPU_FPY6                            0x0764",
          "125: #define PM4_FPU_FPR                             0x0768",
          "126: #define PM4_FPU_FPG                             0x076c",
          "127: #define PM4_FPU_FPB                             0x0770",
          "128: #define PM4_FPU_FPA                             0x0774",
          "129: #define PM4_FPU_INTXY0                          0x0780",
          "130: #define PM4_FPU_INTXY1                          0x0784",
          "131: #define PM4_FPU_INTXY2                          0x0788",
          "132: #define PM4_FPU_INTARGB                         0x078c",
          "133: #define PM4_FPU_FPTWICEAREA                     0x0790",
          "134: #define PM4_FPU_DMAJOR01                        0x0794",
          "135: #define PM4_FPU_DMAJOR12                        0x0798",
          "136: #define PM4_FPU_DMAJOR02                        0x079c",
          "137: #define PM4_FPU_STAT                            0x07a0",
          "138: #define PM4_STAT                                0x07b8",
          "139: #define PM4_TEST_CNTL                           0x07d0",
          "140: #define PM4_MICROCODE_ADDR                      0x07d4",
          "141: #define PM4_MICROCODE_RADDR                     0x07d8",
          "142: #define PM4_MICROCODE_DATAH                     0x07dc",
          "143: #define PM4_MICROCODE_DATAL                     0x07e0",
          "144: #define PM4_CMDFIFO_ADDR                        0x07e4",
          "145: #define PM4_CMDFIFO_DATAH                       0x07e8",
          "146: #define PM4_CMDFIFO_DATAL                       0x07ec",
          "147: #define PM4_BUFFER_ADDR                         0x07f0",
          "148: #define PM4_BUFFER_DATAH                        0x07f4",
          "149: #define PM4_BUFFER_DATAL                        0x07f8",
          "150: #define PM4_MICRO_CNTL                          0x07fc",
          "151: #define CAP0_TRIG_CNTL                          0x0950",
          "152: #define CAP1_TRIG_CNTL                          0x09c0",
          "154: #define RBBM_STATUS                             0x0e40",
          "160: #define PM4_FIFO_DATA_EVEN                      0x1000",
          "161: #define PM4_FIFO_DATA_ODD                       0x1004",
          "163: #define DST_OFFSET                              0x1404",
          "164: #define DST_PITCH                               0x1408",
          "165: #define DST_WIDTH                               0x140c",
          "166: #define DST_HEIGHT                              0x1410",
          "167: #define SRC_X                                   0x1414",
          "168: #define SRC_Y                                   0x1418",
          "169: #define DST_X                                   0x141c",
          "170: #define DST_Y                                   0x1420",
          "171: #define SRC_PITCH_OFFSET                        0x1428",
          "172: #define DST_PITCH_OFFSET                        0x142c",
          "173: #define SRC_Y_X                                 0x1434",
          "174: #define DST_Y_X                                 0x1438",
          "175: #define DST_HEIGHT_WIDTH                        0x143c",
          "176: #define DP_GUI_MASTER_CNTL                      0x146c",
          "177: #define BRUSH_SCALE                             0x1470",
          "178: #define BRUSH_Y_X                               0x1474",
          "179: #define DP_BRUSH_BKGD_CLR                       0x1478",
          "180: #define DP_BRUSH_FRGD_CLR                       0x147c",
          "181: #define DST_WIDTH_X                             0x1588",
          "182: #define DST_HEIGHT_WIDTH_8                      0x158c",
          "183: #define SRC_X_Y                                 0x1590",
          "184: #define DST_X_Y                                 0x1594",
          "185: #define DST_WIDTH_HEIGHT                        0x1598",
          "186: #define DST_WIDTH_X_INCY                        0x159c",
          "187: #define DST_HEIGHT_Y                            0x15a0",
          "188: #define DST_X_SUB                               0x15a4",
          "189: #define DST_Y_SUB                               0x15a8",
          "190: #define SRC_OFFSET                              0x15ac",
          "191: #define SRC_PITCH                               0x15b0",
          "192: #define DST_HEIGHT_WIDTH_BW                     0x15b4",
          "193: #define CLR_CMP_CNTL                            0x15c0",
          "194: #define CLR_CMP_CLR_SRC                         0x15c4",
          "195: #define CLR_CMP_CLR_DST                         0x15c8",
          "196: #define CLR_CMP_MASK                            0x15cc",
          "197: #define DP_SRC_FRGD_CLR                         0x15d8",
          "198: #define DP_SRC_BKGD_CLR                         0x15dc",
          "199: #define DST_BRES_ERR                            0x1628",
          "200: #define DST_BRES_INC                            0x162c",
          "201: #define DST_BRES_DEC                            0x1630",
          "202: #define DST_BRES_LNTH                           0x1634",
          "203: #define DST_BRES_LNTH_SUB                       0x1638",
          "204: #define SC_LEFT                                 0x1640",
          "205: #define SC_RIGHT                                0x1644",
          "206: #define SC_TOP                                  0x1648",
          "207: #define SC_BOTTOM                               0x164c",
          "208: #define SRC_SC_RIGHT                            0x1654",
          "209: #define SRC_SC_BOTTOM                           0x165c",
          "210: #define GUI_DEBUG0                              0x16a0",
          "211: #define GUI_DEBUG1                              0x16a4",
          "212: #define GUI_TIMEOUT                             0x16b0",
          "213: #define GUI_TIMEOUT0                            0x16b4",
          "214: #define GUI_TIMEOUT1                            0x16b8",
          "215: #define GUI_PROBE                               0x16bc",
          "216: #define DP_CNTL                                 0x16c0",
          "217: #define DP_DATATYPE                             0x16c4",
          "218: #define DP_MIX                                  0x16c8",
          "219: #define DP_WRITE_MASK                           0x16cc",
          "220: #define DP_CNTL_XDIR_YDIR_YMAJOR                0x16d0",
          "221: #define DEFAULT_OFFSET                          0x16e0",
          "222: #define DEFAULT_PITCH                           0x16e4",
          "223: #define DEFAULT_SC_BOTTOM_RIGHT                 0x16e8",
          "224: #define SC_TOP_LEFT                             0x16ec",
          "225: #define SC_BOTTOM_RIGHT                         0x16f0",
          "226: #define SRC_SC_BOTTOM_RIGHT                     0x16f4",
          "227: #define DST_TILE                                0x1700",
          "228: #define WAIT_UNTIL                              0x1720",
          "229: #define CACHE_CNTL                              0x1724",
          "230: #define GUI_STAT                                0x1740",
          "231: #define PC_GUI_MODE                             0x1744",
          "232: #define PC_GUI_CTLSTAT                          0x1748",
          "233: #define PC_DEBUG_MODE                           0x1760",
          "234: #define BRES_DST_ERR_DEC                        0x1780",
          "235: #define TRAIL_BRES_T12_ERR_DEC                  0x1784",
          "236: #define TRAIL_BRES_T12_INC                      0x1788",
          "237: #define DP_T12_CNTL                             0x178c",
          "238: #define DST_BRES_T1_LNTH                        0x1790",
          "239: #define DST_BRES_T2_LNTH                        0x1794",
          "240: #define SCALE_SRC_HEIGHT_WIDTH                  0x1994",
          "241: #define SCALE_OFFSET_0                          0x1998",
          "242: #define SCALE_PITCH                             0x199c",
          "243: #define SCALE_X_INC                             0x19a0",
          "244: #define SCALE_Y_INC                             0x19a4",
          "245: #define SCALE_HACC                              0x19a8",
          "246: #define SCALE_VACC                              0x19ac",
          "247: #define SCALE_DST_X_Y                           0x19b0",
          "248: #define SCALE_DST_HEIGHT_WIDTH                  0x19b4",
          "249: #define SCALE_3D_CNTL                           0x1a00",
          "250: #define SCALE_3D_DATATYPE                       0x1a20",
          "251: #define SETUP_CNTL                              0x1bc4",
          "252: #define SOLID_COLOR                             0x1bc8",
          "253: #define WINDOW_XY_OFFSET                        0x1bcc",
          "254: #define DRAW_LINE_POINT                         0x1bd0",
          "255: #define SETUP_CNTL_PM4                          0x1bd4",
          "256: #define DST_PITCH_OFFSET_C                      0x1c80",
          "257: #define DP_GUI_MASTER_CNTL_C                    0x1c84",
          "258: #define SC_TOP_LEFT_C                           0x1c88",
          "259: #define SC_BOTTOM_RIGHT_C                       0x1c8c",
          "261: #define CLR_CMP_MASK_3D                         0x1A28",
          "262: #define MISC_3D_STATE_CNTL_REG                  0x1CA0",
          "263: #define MC_SRC1_CNTL                            0x19D8",
          "264: #define TEX_CNTL                                0x1800",
          "267: #define GUI_ACTIVE                              0x80000000",
          "268: #define ENGINE_IDLE                             0x0",
          "270: #define PLL_WR_EN                               0x00000080",
          "272: #define CLK_PIN_CNTL                            0x01",
          "273: #define PPLL_CNTL                               0x02",
          "274: #define PPLL_REF_DIV                            0x03",
          "275: #define PPLL_DIV_0                              0x04",
          "276: #define PPLL_DIV_1                              0x05",
          "277: #define PPLL_DIV_2                              0x06",
          "278: #define PPLL_DIV_3                              0x07",
          "279: #define VCLK_ECP_CNTL                           0x08",
          "280: #define HTOTAL_CNTL                             0x09",
          "281: #define X_MPLL_REF_FB_DIV                       0x0a",
          "282: #define XPLL_CNTL                               0x0b",
          "283: #define XDLL_CNTL                               0x0c",
          "284: #define XCLK_CNTL                               0x0d",
          "285: #define MPLL_CNTL                               0x0e",
          "286: #define MCLK_CNTL                               0x0f",
          "287: #define AGP_PLL_CNTL                            0x10",
          "288: #define FCP_CNTL                                0x12",
          "289: #define PLL_TEST_CNTL                           0x13",
          "290: #define P2PLL_CNTL                              0x2a",
          "291: #define P2PLL_REF_DIV                           0x2b",
          "292: #define P2PLL_DIV_0                             0x2b",
          "293: #define POWER_MANAGEMENT                        0x2f",
          "295: #define PPLL_RESET                              0x00000001",
          "296: #define PPLL_ATOMIC_UPDATE_EN                   0x00010000",
          "297: #define PPLL_VGA_ATOMIC_UPDATE_EN               0x00020000",
          "298: #define PPLL_REF_DIV_MASK                       0x000003FF",
          "299: #define PPLL_FB3_DIV_MASK                       0x000007FF",
          "300: #define PPLL_POST3_DIV_MASK                     0x00070000",
          "301: #define PPLL_ATOMIC_UPDATE_R                    0x00008000",
          "302: #define PPLL_ATOMIC_UPDATE_W                    0x00008000",
          "303: #define MEM_CFG_TYPE_MASK                       0x00000003",
          "304: #define XCLK_SRC_SEL_MASK                       0x00000007",
          "305: #define XPLL_FB_DIV_MASK                        0x0000FF00",
          "306: #define X_MPLL_REF_DIV_MASK                     0x000000FF",
          "309: #define CFG_VGA_IO_DIS                          0x00000400",
          "312: #define CRTC_CSYNC_EN                           0x00000010",
          "314: #define CRTC2_DBL_SCAN_EN                       0x00000001",
          "315: #define CRTC2_DISPLAY_DIS                       0x00800000",
          "316: #define CRTC2_FIFO_EXTSENSE                     0x00200000",
          "317: #define CRTC2_ICON_EN                           0x00100000",
          "318: #define CRTC2_CUR_EN                            0x00010000",
          "319: #define CRTC2_EXT_DISP_EN                       0x01000000",
          "320: #define CRTC2_EN                                0x02000000",
          "321: #define CRTC2_DISP_REQ_EN_B                     0x04000000",
          "323: #define CRTC_PIX_WIDTH_MASK                     0x00000700",
          "324: #define CRTC_PIX_WIDTH_4BPP                     0x00000100",
          "325: #define CRTC_PIX_WIDTH_8BPP                     0x00000200",
          "326: #define CRTC_PIX_WIDTH_15BPP                    0x00000300",
          "327: #define CRTC_PIX_WIDTH_16BPP                    0x00000400",
          "328: #define CRTC_PIX_WIDTH_24BPP                    0x00000500",
          "329: #define CRTC_PIX_WIDTH_32BPP                    0x00000600",
          "332: #define DAC_8BIT_EN                             0x00000100",
          "333: #define DAC_MASK                                0xFF000000",
          "334: #define DAC_BLANKING                            0x00000004",
          "335: #define DAC_RANGE_CNTL                          0x00000003",
          "336: #define DAC_CLK_SEL                             0x00000010",
          "337: #define DAC_PALETTE_ACCESS_CNTL                 0x00000020",
          "338: #define DAC_PALETTE2_SNOOP_EN                   0x00000040",
          "339: #define DAC_PDWN                                0x00008000",
          "342: #define CRT_CRTC_DISPLAY_DIS                    0x00000400",
          "343: #define CRT_CRTC_ON                             0x00008000",
          "346: #define SOFT_RESET_GUI                          0x00000001",
          "347: #define SOFT_RESET_VCLK                         0x00000100",
          "348: #define SOFT_RESET_PCLK                         0x00000200",
          "349: #define SOFT_RESET_ECP                          0x00000400",
          "350: #define SOFT_RESET_DISPENG_XCLK                 0x00000800",
          "353: #define PC_BUSY_INIT                            0x10000000",
          "354: #define PC_BUSY_GUI                             0x20000000",
          "355: #define PC_BUSY_NGUI                            0x40000000",
          "356: #define PC_BUSY                                 0x80000000",
          "358: #define BUS_MASTER_DIS                          0x00000040",
          "359: #define PM4_BUFFER_CNTL_NONPM4                  0x00000000",
          "362: #define DST_8BPP                                0x00000002",
          "363: #define DST_15BPP                               0x00000003",
          "364: #define DST_16BPP                               0x00000004",
          "365: #define DST_24BPP                               0x00000005",
          "366: #define DST_32BPP                               0x00000006",
          "368: #define BRUSH_SOLIDCOLOR                        0x00000d00",
          "371: #define GMC_SRC_PITCH_OFFSET_DEFAULT            0x00000000",
          "372: #define GMC_DST_PITCH_OFFSET_DEFAULT            0x00000000",
          "373: #define GMC_SRC_CLIP_DEFAULT                    0x00000000",
          "374: #define GMC_DST_CLIP_DEFAULT                    0x00000000",
          "375: #define GMC_BRUSH_SOLIDCOLOR                    0x000000d0",
          "376: #define GMC_SRC_DSTCOLOR                        0x00003000",
          "377: #define GMC_BYTE_ORDER_MSB_TO_LSB               0x00000000",
          "378: #define GMC_DP_SRC_RECT                         0x02000000",
          "379: #define GMC_3D_FCN_EN_CLR                       0x00000000",
          "380: #define GMC_AUX_CLIP_CLEAR                      0x20000000",
          "381: #define GMC_DST_CLR_CMP_FCN_CLEAR               0x10000000",
          "382: #define GMC_WRITE_MASK_SET                      0x40000000",
          "383: #define GMC_DP_CONVERSION_TEMP_6500             0x00000000",
          "386: #define GMC_ROP3_MASK                           0x00ff0000",
          "387: #define ROP3_BLACKNESS                          0x00000000",
          "388: #define ROP3_SRCCOPY                            0x00cc0000",
          "389: #define ROP3_PATCOPY                            0x00f00000",
          "390: #define ROP3_WHITENESS                          0x00ff0000",
          "392: #define SRC_DSTCOLOR                            0x00030000",
          "395: #define DST_X_RIGHT_TO_LEFT                     0x00000000",
          "396: #define DST_X_LEFT_TO_RIGHT                     0x00000001",
          "397: #define DST_Y_BOTTOM_TO_TOP                     0x00000000",
          "398: #define DST_Y_TOP_TO_BOTTOM                     0x00000002",
          "399: #define DST_X_MAJOR                             0x00000000",
          "400: #define DST_Y_MAJOR                             0x00000004",
          "401: #define DST_X_TILE                              0x00000008",
          "402: #define DST_Y_TILE                              0x00000010",
          "403: #define DST_LAST_PEL                            0x00000020",
          "404: #define DST_TRAIL_X_RIGHT_TO_LEFT               0x00000000",
          "405: #define DST_TRAIL_X_LEFT_TO_RIGHT               0x00000040",
          "406: #define DST_TRAP_FILL_RIGHT_TO_LEFT             0x00000000",
          "407: #define DST_TRAP_FILL_LEFT_TO_RIGHT             0x00000080",
          "408: #define DST_BRES_SIGN                           0x00000100",
          "409: #define DST_HOST_BIG_ENDIAN_EN                  0x00000200",
          "410: #define DST_POLYLINE_NONLAST                    0x00008000",
          "411: #define DST_RASTER_STALL                        0x00010000",
          "412: #define DST_POLY_EDGE                           0x00040000",
          "415: #define DP_SRC_RECT                             0x00000200",
          "416: #define DP_SRC_HOST                             0x00000300",
          "417: #define DP_SRC_HOST_BYTEALIGN                   0x00000400",
          "420: #define LVDS_BL_MOD_LEVEL_MASK                  0x0000ff00",
          "421: #define LVDS_BL_MOD_LEVEL_SHIFT                 8",
          "422: #define LVDS_BL_MOD_EN                          0x00010000",
          "423: #define LVDS_DIGION                             0x00040000",
          "424: #define LVDS_BLON                               0x00080000",
          "425: #define LVDS_ON                                 0x00000001",
          "426: #define LVDS_DISPLAY_DIS                        0x00000002",
          "427: #define LVDS_PANEL_TYPE_2PIX_PER_CLK            0x00000004",
          "428: #define LVDS_PANEL_24BITS_TFT                   0x00000008",
          "429: #define LVDS_FRAME_MOD_NO                       0x00000000",
          "430: #define LVDS_FRAME_MOD_2_LEVELS                 0x00000010",
          "431: #define LVDS_FRAME_MOD_4_LEVELS                 0x00000020",
          "432: #define LVDS_RST_FM                             0x00000040",
          "433: #define LVDS_EN                                 0x00000080",
          "436: #define CRTC2_EN                                0x02000000",
          "439: #define PWR_MGT_ON                              0x00000001",
          "440: #define PWR_MGT_MODE_MASK                       0x00000006",
          "441: #define PWR_MGT_MODE_PIN                        0x00000000",
          "442: #define PWR_MGT_MODE_REGISTER                   0x00000002",
          "443: #define PWR_MGT_MODE_TIMER                      0x00000004",
          "444: #define PWR_MGT_MODE_PCI                        0x00000006",
          "445: #define PWR_MGT_AUTO_PWR_UP_EN                  0x00000008",
          "446: #define PWR_MGT_ACTIVITY_PIN_ON                 0x00000010",
          "447: #define PWR_MGT_STANDBY_POL                     0x00000020",
          "448: #define PWR_MGT_SUSPEND_POL                     0x00000040",
          "449: #define PWR_MGT_SELF_REFRESH                    0x00000080",
          "450: #define PWR_MGT_ACTIVITY_PIN_EN                 0x00000100",
          "451: #define PWR_MGT_KEYBD_SNOOP                     0x00000200",
          "452: #define PWR_MGT_TRISTATE_MEM_EN                 0x00000800",
          "453: #define PWR_MGT_SELW4MS                         0x00001000",
          "454: #define PWR_MGT_SLOWDOWN_MCLK                   0x00002000",
          "456: #define PMI_PMSCR_REG                           0x60",
          "459: #define RAGE128_MPP_TB_CONFIG                   0x01c0",
          "",
          "---------------"
        ],
        "vl.c||vl.c": [
          "File: vl.c -> vl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:     { .driver = \"vmware-svga\",          .flag = &default_vga       },",
          "238:     { .driver = \"qxl-vga\",              .flag = &default_vga       },",
          "239:     { .driver = \"virtio-vga\",           .flag = &default_vga       },",
          "240: };",
          "242: static QemuOptsList qemu_rtc_opts = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:     { .driver = \"ati-vga\",              .flag = &default_vga       },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "747d7ad231a0955991e179deb482ce94376f1e17",
      "candidate_info": {
        "commit_hash": "747d7ad231a0955991e179deb482ce94376f1e17",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/747d7ad231a0955991e179deb482ce94376f1e17",
        "files": [
          "hw/display/ati.c"
        ],
        "message": "ati-vga: Fix hardware cursor image offset\n\nThe crtc_offset is not needed, cur_offset is relative to the start of\nvram not the start of displayed area. This fixes broken pointer image\nwith MacOS that uses non-0 crtc_offset.\n\nSigned-off-by: BALATON Zoltan <balaton@eik.bme.hu>\nMessage-id: e6acb1fa3ca980dc948045443e5986e2aa79bf7c.1565558093.git.balaton@eik.bme.hu\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
        "before_after_code_files": [
          "hw/display/ati.c||hw/display/ati.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/display/ati.c||hw/display/ati.c"
          ],
          "candidate": [
            "hw/display/ati.c||hw/display/ati.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/display/ati.c||hw/display/ati.c": [
          "File: hw/display/ati.c -> hw/display/ati.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     }",
          "138:     for (i = 0; i < 64; i++) {",
          "139:         for (j = 0; j < 8; j++, idx++) {",
          "140:             data[idx] = src[i * 16 + j];",
          "",
          "[Removed Lines]",
          "135:     src = s->vga.vram_ptr + (s->regs.crtc_offset & 0x07ffffff) +",
          "136:           s->regs.cur_offset - (s->regs.cur_hv_offs >> 16) -",
          "137:           (s->regs.cur_hv_offs & 0xffff) * 16;",
          "",
          "[Added Lines]",
          "135:     src = s->vga.vram_ptr + s->regs.cur_offset -",
          "136:           (s->regs.cur_hv_offs >> 16) - (s->regs.cur_hv_offs & 0xffff) * 16;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:         return;",
          "191:     }",
          "195:     dp = &dp[vga->hw_cursor_x];",
          "196:     h = ((s->regs.crtc_h_total_disp >> 16) + 1) * 8;",
          "197:     for (i = 0; i < 8; i++) {",
          "",
          "[Removed Lines]",
          "193:     src = s->vga.vram_ptr + (s->regs.crtc_offset & 0x07ffffff) +",
          "194:           s->cursor_offset + (scr_y - vga->hw_cursor_y) * 16;",
          "",
          "[Added Lines]",
          "192:     src = s->vga.vram_ptr + s->cursor_offset + (scr_y - vga->hw_cursor_y) * 16;",
          "",
          "---------------"
        ]
      }
    }
  ]
}