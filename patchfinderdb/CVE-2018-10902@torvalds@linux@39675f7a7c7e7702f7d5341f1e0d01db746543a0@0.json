{
  "cve_id": "CVE-2018-10902",
  "cve_desc": "It was found that the raw midi kernel driver does not protect against concurrent access which leads to a double realloc (double free) in snd_rawmidi_input_params() and snd_rawmidi_output_status() which are part of snd_rawmidi_ioctl() handler in rawmidi.c file. A malicious local attacker could possibly use this for privilege escalation.",
  "repo": "torvalds/linux",
  "patch_hash": "39675f7a7c7e7702f7d5341f1e0d01db746543a0",
  "patch_info": {
    "commit_hash": "39675f7a7c7e7702f7d5341f1e0d01db746543a0",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/39675f7a7c7e7702f7d5341f1e0d01db746543a0",
    "files": [
      "sound/core/rawmidi.c"
    ],
    "message": "ALSA: rawmidi: Change resized buffers atomically\n\nThe SNDRV_RAWMIDI_IOCTL_PARAMS ioctl may resize the buffers and the\ncurrent code is racy.  For example, the sequencer client may write to\nbuffer while it being resized.\n\nAs a simple workaround, let's switch to the resized buffer inside the\nstream runtime lock.\n\nReported-by: syzbot+52f83f0ea8df16932f7f@syzkaller.appspotmail.com\nCc: <stable@vger.kernel.org>\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
    "before_after_code_files": [
      "sound/core/rawmidi.c||sound/core/rawmidi.c"
    ]
  },
  "patch_diff": {
    "sound/core/rawmidi.c||sound/core/rawmidi.c": [
      "File: sound/core/rawmidi.c -> sound/core/rawmidi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "635: int snd_rawmidi_output_params(struct snd_rawmidi_substream *substream,",
      "636:          struct snd_rawmidi_params * params)",
      "637: {",
      "639:  struct snd_rawmidi_runtime *runtime = substream->runtime;",
      "641:  if (substream->append && substream->use_count > 1)",
      "",
      "[Removed Lines]",
      "638:  char *newbuf;",
      "",
      "[Added Lines]",
      "638:  char *newbuf, *oldbuf;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "648:   return -EINVAL;",
      "649:  }",
      "650:  if (params->buffer_size != runtime->buffer_size) {",
      "653:   if (!newbuf)",
      "654:    return -ENOMEM;",
      "655:   runtime->buffer = newbuf;",
      "656:   runtime->buffer_size = params->buffer_size;",
      "657:   runtime->avail = runtime->buffer_size;",
      "658:  }",
      "659:  runtime->avail_min = params->avail_min;",
      "660:  substream->active_sensing = !params->no_active_sensing;",
      "",
      "[Removed Lines]",
      "651:   newbuf = krealloc(runtime->buffer, params->buffer_size,",
      "652:       GFP_KERNEL);",
      "",
      "[Added Lines]",
      "651:   newbuf = kmalloc(params->buffer_size, GFP_KERNEL);",
      "654:   spin_lock_irq(&runtime->lock);",
      "655:   oldbuf = runtime->buffer;",
      "659:   runtime->appl_ptr = runtime->hw_ptr = 0;",
      "660:   spin_unlock_irq(&runtime->lock);",
      "661:   kfree(oldbuf);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "665: int snd_rawmidi_input_params(struct snd_rawmidi_substream *substream,",
      "666:         struct snd_rawmidi_params * params)",
      "667: {",
      "669:  struct snd_rawmidi_runtime *runtime = substream->runtime;",
      "671:  snd_rawmidi_drain_input(substream);",
      "",
      "[Removed Lines]",
      "668:  char *newbuf;",
      "",
      "[Added Lines]",
      "672:  char *newbuf, *oldbuf;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "676:   return -EINVAL;",
      "677:  }",
      "678:  if (params->buffer_size != runtime->buffer_size) {",
      "681:   if (!newbuf)",
      "682:    return -ENOMEM;",
      "683:   runtime->buffer = newbuf;",
      "684:   runtime->buffer_size = params->buffer_size;",
      "685:  }",
      "686:  runtime->avail_min = params->avail_min;",
      "687:  return 0;",
      "",
      "[Removed Lines]",
      "679:   newbuf = krealloc(runtime->buffer, params->buffer_size,",
      "680:       GFP_KERNEL);",
      "",
      "[Added Lines]",
      "683:   newbuf = kmalloc(params->buffer_size, GFP_KERNEL);",
      "686:   spin_lock_irq(&runtime->lock);",
      "687:   oldbuf = runtime->buffer;",
      "690:   runtime->appl_ptr = runtime->hw_ptr = 0;",
      "691:   spin_unlock_irq(&runtime->lock);",
      "692:   kfree(oldbuf);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5a7b44a8df822e0667fc76ed7130252523993bda",
      "candidate_info": {
        "commit_hash": "5a7b44a8df822e0667fc76ed7130252523993bda",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5a7b44a8df822e0667fc76ed7130252523993bda",
        "files": [
          "sound/core/rawmidi.c"
        ],
        "message": "ALSA: rawmidi: Initialize allocated buffers\n\nsyzbot reported the uninitialized value exposure in certain situations\nusing virmidi loop.  It's likely a very small race at writing and\nreading, and the influence is almost negligible.  But it's safer to\npaper over this just by replacing the existing kvmalloc() with\nkvzalloc().\n\nReported-by: syzbot+194dffdb8b22fc5d207a@syzkaller.appspotmail.com\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
        "before_after_code_files": [
          "sound/core/rawmidi.c||sound/core/rawmidi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sound/core/rawmidi.c||sound/core/rawmidi.c"
          ],
          "candidate": [
            "sound/core/rawmidi.c||sound/core/rawmidi.c"
          ]
        }
      },
      "candidate_diff": {
        "sound/core/rawmidi.c||sound/core/rawmidi.c": [
          "File: sound/core/rawmidi.c -> sound/core/rawmidi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:   runtime->avail = 0;",
          "130:  else",
          "131:   runtime->avail = runtime->buffer_size;",
          "133:  if (!runtime->buffer) {",
          "134:   kfree(runtime);",
          "135:   return -ENOMEM;",
          "",
          "[Removed Lines]",
          "132:  runtime->buffer = kvmalloc(runtime->buffer_size, GFP_KERNEL);",
          "",
          "[Added Lines]",
          "132:  runtime->buffer = kvzalloc(runtime->buffer_size, GFP_KERNEL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "655:  if (params->avail_min < 1 || params->avail_min > params->buffer_size)",
          "656:   return -EINVAL;",
          "657:  if (params->buffer_size != runtime->buffer_size) {",
          "659:   if (!newbuf)",
          "660:    return -ENOMEM;",
          "661:   spin_lock_irq(&runtime->lock);",
          "",
          "[Removed Lines]",
          "658:   newbuf = kvmalloc(params->buffer_size, GFP_KERNEL);",
          "",
          "[Added Lines]",
          "658:   newbuf = kvzalloc(params->buffer_size, GFP_KERNEL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5bed9139727f3bad06c9444bd092336a59397e9d",
      "candidate_info": {
        "commit_hash": "5bed9139727f3bad06c9444bd092336a59397e9d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5bed9139727f3bad06c9444bd092336a59397e9d",
        "files": [
          "sound/core/rawmidi.c"
        ],
        "message": "ALSA: rawmidi: Tidy up coding styles\n\nJust minor coding style fixes like removal of superfluous white space,\nadding missing blank lines, etc.  No actual code changes at all.\n\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
        "before_after_code_files": [
          "sound/core/rawmidi.c||sound/core/rawmidi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sound/core/rawmidi.c||sound/core/rawmidi.c"
          ],
          "candidate": [
            "sound/core/rawmidi.c||sound/core/rawmidi.c"
          ]
        }
      },
      "candidate_diff": {
        "sound/core/rawmidi.c||sound/core/rawmidi.c": [
          "File: sound/core/rawmidi.c -> sound/core/rawmidi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: {",
          "112:  struct snd_rawmidi_runtime *runtime;",
          "115:   return -ENOMEM;",
          "116:  runtime->substream = substream;",
          "117:  spin_lock_init(&runtime->lock);",
          "",
          "[Removed Lines]",
          "114:  if ((runtime = kzalloc(sizeof(*runtime), GFP_KERNEL)) == NULL)",
          "",
          "[Added Lines]",
          "117:  runtime = kzalloc(sizeof(*runtime), GFP_KERNEL);",
          "118:  if (!runtime)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:   runtime->avail = 0;",
          "125:  else",
          "126:   runtime->avail = runtime->buffer_size;",
          "128:   kfree(runtime);",
          "129:   return -ENOMEM;",
          "130:  }",
          "",
          "[Removed Lines]",
          "127:  if ((runtime->buffer = kmalloc(runtime->buffer_size, GFP_KERNEL)) == NULL) {",
          "",
          "[Added Lines]",
          "131:  runtime->buffer = kmalloc(runtime->buffer_size, GFP_KERNEL);",
          "132:  if (!runtime->buffer) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:  return 0;",
          "144: }",
          "147: {",
          "148:  if (!substream->opened)",
          "149:   return;",
          "",
          "[Removed Lines]",
          "146: static inline void snd_rawmidi_output_trigger(struct snd_rawmidi_substream *substream,int up)",
          "",
          "[Added Lines]",
          "151: static inline void snd_rawmidi_output_trigger(struct snd_rawmidi_substream *substream, int up)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "332: int snd_rawmidi_kernel_open(struct snd_card *card, int device, int subdevice,",
          "334: {",
          "335:  struct snd_rawmidi *rmidi;",
          "336:  int err;",
          "",
          "[Removed Lines]",
          "333:        int mode, struct snd_rawmidi_file * rfile)",
          "",
          "[Added Lines]",
          "338:        int mode, struct snd_rawmidi_file *rfile)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "370:  struct snd_rawmidi_file *rawmidi_file = NULL;",
          "371:  wait_queue_entry_t wait;",
          "376:  err = nonseekable_open(inode, file);",
          "",
          "[Removed Lines]",
          "373:  if ((file->f_flags & O_APPEND) && !(file->f_flags & O_NONBLOCK))",
          "",
          "[Added Lines]",
          "378:  if ((file->f_flags & O_APPEND) && !(file->f_flags & O_NONBLOCK))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "568: }",
          "570: static int snd_rawmidi_info_user(struct snd_rawmidi_substream *substream,",
          "572: {",
          "573:  struct snd_rawmidi_info info;",
          "574:  int err;",
          "576:   return err;",
          "577:  if (copy_to_user(_info, &info, sizeof(struct snd_rawmidi_info)))",
          "578:   return -EFAULT;",
          "",
          "[Removed Lines]",
          "571:      struct snd_rawmidi_info __user * _info)",
          "575:  if ((err = snd_rawmidi_info(substream, &info)) < 0)",
          "",
          "[Added Lines]",
          "576:      struct snd_rawmidi_info __user *_info)",
          "581:  err = snd_rawmidi_info(substream, &info);",
          "582:  if (err < 0)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "619: {",
          "620:  int err;",
          "621:  struct snd_rawmidi_info info;",
          "622:  if (get_user(info.device, &_info->device))",
          "623:   return -EFAULT;",
          "624:  if (get_user(info.stream, &_info->stream))",
          "625:   return -EFAULT;",
          "626:  if (get_user(info.subdevice, &_info->subdevice))",
          "627:   return -EFAULT;",
          "629:   return err;",
          "630:  if (copy_to_user(_info, &info, sizeof(struct snd_rawmidi_info)))",
          "631:   return -EFAULT;",
          "",
          "[Removed Lines]",
          "628:  if ((err = snd_rawmidi_info_select(card, &info)) < 0)",
          "",
          "[Added Lines]",
          "636:  err = snd_rawmidi_info_select(card, &info);",
          "637:  if (err < 0)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "633: }",
          "635: int snd_rawmidi_output_params(struct snd_rawmidi_substream *substream,",
          "637: {",
          "638:  char *newbuf, *oldbuf;",
          "639:  struct snd_rawmidi_runtime *runtime = substream->runtime;",
          "641:  if (substream->append && substream->use_count > 1)",
          "642:   return -EBUSY;",
          "643:  snd_rawmidi_drain_output(substream);",
          "645:   return -EINVAL;",
          "648:   return -EINVAL;",
          "650:  if (params->buffer_size != runtime->buffer_size) {",
          "651:   newbuf = kmalloc(params->buffer_size, GFP_KERNEL);",
          "652:   if (!newbuf)",
          "",
          "[Removed Lines]",
          "636:          struct snd_rawmidi_params * params)",
          "644:  if (params->buffer_size < 32 || params->buffer_size > 1024L * 1024L) {",
          "646:  }",
          "647:  if (params->avail_min < 1 || params->avail_min > params->buffer_size) {",
          "649:  }",
          "",
          "[Added Lines]",
          "645:          struct snd_rawmidi_params *params)",
          "653:  if (params->buffer_size < 32 || params->buffer_size > 1024L * 1024L)",
          "655:  if (params->avail_min < 1 || params->avail_min > params->buffer_size)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "667: EXPORT_SYMBOL(snd_rawmidi_output_params);",
          "669: int snd_rawmidi_input_params(struct snd_rawmidi_substream *substream,",
          "671: {",
          "672:  char *newbuf, *oldbuf;",
          "673:  struct snd_rawmidi_runtime *runtime = substream->runtime;",
          "675:  snd_rawmidi_drain_input(substream);",
          "677:   return -EINVAL;",
          "680:   return -EINVAL;",
          "682:  if (params->buffer_size != runtime->buffer_size) {",
          "683:   newbuf = kmalloc(params->buffer_size, GFP_KERNEL);",
          "684:   if (!newbuf)",
          "",
          "[Removed Lines]",
          "670:         struct snd_rawmidi_params * params)",
          "676:  if (params->buffer_size < 32 || params->buffer_size > 1024L * 1024L) {",
          "678:  }",
          "679:  if (params->avail_min < 1 || params->avail_min > params->buffer_size) {",
          "681:  }",
          "",
          "[Added Lines]",
          "677:         struct snd_rawmidi_params *params)",
          "683:  if (params->buffer_size < 32 || params->buffer_size > 1024L * 1024L)",
          "685:  if (params->avail_min < 1 || params->avail_min > params->buffer_size)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "697: EXPORT_SYMBOL(snd_rawmidi_input_params);",
          "699: static int snd_rawmidi_output_status(struct snd_rawmidi_substream *substream,",
          "701: {",
          "702:  struct snd_rawmidi_runtime *runtime = substream->runtime;",
          "",
          "[Removed Lines]",
          "700:          struct snd_rawmidi_status * status)",
          "",
          "[Added Lines]",
          "705:          struct snd_rawmidi_status *status)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "710: }",
          "712: static int snd_rawmidi_input_status(struct snd_rawmidi_substream *substream,",
          "714: {",
          "715:  struct snd_rawmidi_runtime *runtime = substream->runtime;",
          "",
          "[Removed Lines]",
          "713:         struct snd_rawmidi_status * status)",
          "",
          "[Added Lines]",
          "718:         struct snd_rawmidi_status *status)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1072:  spin_lock_irqsave(&runtime->lock, flags);",
          "1073:  result = runtime->avail >= runtime->buffer_size;",
          "1074:  spin_unlock_irqrestore(&runtime->lock, flags);",
          "1076: }",
          "1077: EXPORT_SYMBOL(snd_rawmidi_transmit_empty);",
          "",
          "[Removed Lines]",
          "1075:  return result;",
          "",
          "[Added Lines]",
          "1086:  return result;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1374:  return result;",
          "1375: }",
          "1378: {",
          "1379:  struct snd_rawmidi_file *rfile;",
          "1380:  struct snd_rawmidi_runtime *runtime;",
          "",
          "[Removed Lines]",
          "1377: static __poll_t snd_rawmidi_poll(struct file *file, poll_table * wait)",
          "",
          "[Added Lines]",
          "1390: static __poll_t snd_rawmidi_poll(struct file *file, poll_table *wait)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1484:  .owner = THIS_MODULE,",
          "1485:  .read =  snd_rawmidi_read,",
          "1486:  .write = snd_rawmidi_write,",
          "",
          "[Removed Lines]",
          "1482: static const struct file_operations snd_rawmidi_f_ops =",
          "1483: {",
          "",
          "[Added Lines]",
          "1494: static const struct file_operations snd_rawmidi_f_ops = {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1536: int snd_rawmidi_new(struct snd_card *card, char *id, int device,",
          "1537:       int output_count, int input_count,",
          "1539: {",
          "1540:  struct snd_rawmidi *rmidi;",
          "1541:  int err;",
          "",
          "[Removed Lines]",
          "1538:       struct snd_rawmidi ** rrawmidi)",
          "",
          "[Added Lines]",
          "1549:       struct snd_rawmidi **rrawmidi)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1566:  rmidi->dev.release = release_rawmidi_device;",
          "1567:  dev_set_name(&rmidi->dev, \"midiC%iD%i\", card->number, device);",
          "1573:   snd_rawmidi_free(rmidi);",
          "1574:   return err;",
          "1575:  }",
          "1580:   snd_rawmidi_free(rmidi);",
          "1581:   return err;",
          "1582:  }",
          "1584:   snd_rawmidi_free(rmidi);",
          "1585:   return err;",
          "1586:  }",
          "",
          "[Removed Lines]",
          "1569:  if ((err = snd_rawmidi_alloc_substreams(rmidi,",
          "1570:       &rmidi->streams[SNDRV_RAWMIDI_STREAM_INPUT],",
          "1571:       SNDRV_RAWMIDI_STREAM_INPUT,",
          "1572:       input_count)) < 0) {",
          "1576:  if ((err = snd_rawmidi_alloc_substreams(rmidi,",
          "1577:       &rmidi->streams[SNDRV_RAWMIDI_STREAM_OUTPUT],",
          "1578:       SNDRV_RAWMIDI_STREAM_OUTPUT,",
          "1579:       output_count)) < 0) {",
          "1583:  if ((err = snd_device_new(card, SNDRV_DEV_RAWMIDI, rmidi, &ops)) < 0) {",
          "",
          "[Added Lines]",
          "1580:  err = snd_rawmidi_alloc_substreams(rmidi,",
          "1581:         &rmidi->streams[SNDRV_RAWMIDI_STREAM_INPUT],",
          "1582:         SNDRV_RAWMIDI_STREAM_INPUT,",
          "1583:         input_count);",
          "1584:  if (err < 0) {",
          "1588:  err = snd_rawmidi_alloc_substreams(rmidi,",
          "1589:         &rmidi->streams[SNDRV_RAWMIDI_STREAM_OUTPUT],",
          "1590:         SNDRV_RAWMIDI_STREAM_OUTPUT,",
          "1591:         output_count);",
          "1592:  if (err < 0) {",
          "1596:  err = snd_device_new(card, SNDRV_DEV_RAWMIDI, rmidi, &ops);",
          "1597:  if (err < 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5beb598b0c4dd023833ae1a7c188ecd987b7125",
      "candidate_info": {
        "commit_hash": "f5beb598b0c4dd023833ae1a7c188ecd987b7125",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f5beb598b0c4dd023833ae1a7c188ecd987b7125",
        "files": [
          "sound/core/rawmidi.c"
        ],
        "message": "ALSA: rawmidi: Minor code refactoring\n\nUnify a few open codes with helper functions to improve the\nreadability.  Minor behavior changes (rather fixes) are:\n- runtime->drain clearance is done within lock\n- active_sensing is updated before resizing buffer in\n  SNDRV_RAWMIDI_IOCTL_PARAMS ioctl.\nOther than that, simply code cleanups.\n\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
        "before_after_code_files": [
          "sound/core/rawmidi.c||sound/core/rawmidi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sound/core/rawmidi.c||sound/core/rawmidi.c"
          ],
          "candidate": [
            "sound/core/rawmidi.c||sound/core/rawmidi.c"
          ]
        }
      },
      "candidate_diff": {
        "sound/core/rawmidi.c||sound/core/rawmidi.c": [
          "File: sound/core/rawmidi.c -> sound/core/rawmidi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   cancel_work_sync(&substream->runtime->event_work);",
          "165: }",
          "168: {",
          "169:  unsigned long flags;",
          "174:  spin_lock_irqsave(&runtime->lock, flags);",
          "177:  spin_unlock_irqrestore(&runtime->lock, flags);",
          "178:  return 0;",
          "179: }",
          "180: EXPORT_SYMBOL(snd_rawmidi_drop_output);",
          "",
          "[Removed Lines]",
          "167: int snd_rawmidi_drop_output(struct snd_rawmidi_substream *substream)",
          "170:  struct snd_rawmidi_runtime *runtime = substream->runtime;",
          "172:  snd_rawmidi_output_trigger(substream, 0);",
          "173:  runtime->drain = 0;",
          "175:  runtime->appl_ptr = runtime->hw_ptr = 0;",
          "176:  runtime->avail = runtime->buffer_size;",
          "",
          "[Added Lines]",
          "167: static void __reset_runtime_ptrs(struct snd_rawmidi_runtime *runtime,",
          "168:      bool is_input)",
          "169: {",
          "170:  runtime->drain = 0;",
          "171:  runtime->appl_ptr = runtime->hw_ptr = 0;",
          "172:  runtime->avail = is_input ? 0 : runtime->buffer_size;",
          "173: }",
          "175: static void reset_runtime_ptrs(struct snd_rawmidi_runtime *runtime,",
          "176:           bool is_input)",
          "181:  __reset_runtime_ptrs(runtime, is_input);",
          "183: }",
          "185: int snd_rawmidi_drop_output(struct snd_rawmidi_substream *substream)",
          "186: {",
          "187:  snd_rawmidi_output_trigger(substream, 0);",
          "188:  reset_runtime_ptrs(substream->runtime, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214: int snd_rawmidi_drain_input(struct snd_rawmidi_substream *substream)",
          "215: {",
          "219:  snd_rawmidi_input_trigger(substream, 0);",
          "225:  return 0;",
          "226: }",
          "227: EXPORT_SYMBOL(snd_rawmidi_drain_input);",
          "",
          "[Removed Lines]",
          "216:  unsigned long flags;",
          "217:  struct snd_rawmidi_runtime *runtime = substream->runtime;",
          "220:  runtime->drain = 0;",
          "221:  spin_lock_irqsave(&runtime->lock, flags);",
          "222:  runtime->appl_ptr = runtime->hw_ptr = 0;",
          "223:  runtime->avail = 0;",
          "224:  spin_unlock_irqrestore(&runtime->lock, flags);",
          "",
          "[Added Lines]",
          "228:  reset_runtime_ptrs(substream->runtime, true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "639:  return 0;",
          "640: }",
          "644: {",
          "645:  char *newbuf, *oldbuf;",
          "651:  if (params->buffer_size < 32 || params->buffer_size > 1024L * 1024L)",
          "652:   return -EINVAL;",
          "653:  if (params->avail_min < 1 || params->avail_min > params->buffer_size)",
          "",
          "[Removed Lines]",
          "642: int snd_rawmidi_output_params(struct snd_rawmidi_substream *substream,",
          "643:          struct snd_rawmidi_params *params)",
          "646:  struct snd_rawmidi_runtime *runtime = substream->runtime;",
          "648:  if (substream->append && substream->use_count > 1)",
          "649:   return -EBUSY;",
          "650:  snd_rawmidi_drain_output(substream);",
          "",
          "[Added Lines]",
          "646: static int resize_runtime_buffer(struct snd_rawmidi_runtime *runtime,",
          "647:      struct snd_rawmidi_params *params,",
          "648:      bool is_input)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "660:   oldbuf = runtime->buffer;",
          "661:   runtime->buffer = newbuf;",
          "662:   runtime->buffer_size = params->buffer_size;",
          "665:   spin_unlock_irq(&runtime->lock);",
          "666:   kfree(oldbuf);",
          "667:  }",
          "668:  runtime->avail_min = params->avail_min;",
          "670:  return 0;",
          "671: }",
          "672: EXPORT_SYMBOL(snd_rawmidi_output_params);",
          "674: int snd_rawmidi_input_params(struct snd_rawmidi_substream *substream,",
          "675:         struct snd_rawmidi_params *params)",
          "676: {",
          "680:  snd_rawmidi_drain_input(substream);",
          "699: }",
          "700: EXPORT_SYMBOL(snd_rawmidi_input_params);",
          "",
          "[Removed Lines]",
          "663:   runtime->avail = runtime->buffer_size;",
          "664:   runtime->appl_ptr = runtime->hw_ptr = 0;",
          "669:  substream->active_sensing = !params->no_active_sensing;",
          "677:  char *newbuf, *oldbuf;",
          "678:  struct snd_rawmidi_runtime *runtime = substream->runtime;",
          "681:  if (params->buffer_size < 32 || params->buffer_size > 1024L * 1024L)",
          "682:   return -EINVAL;",
          "683:  if (params->avail_min < 1 || params->avail_min > params->buffer_size)",
          "684:   return -EINVAL;",
          "685:  if (params->buffer_size != runtime->buffer_size) {",
          "686:   newbuf = kmalloc(params->buffer_size, GFP_KERNEL);",
          "687:   if (!newbuf)",
          "688:    return -ENOMEM;",
          "689:   spin_lock_irq(&runtime->lock);",
          "690:   oldbuf = runtime->buffer;",
          "691:   runtime->buffer = newbuf;",
          "692:   runtime->buffer_size = params->buffer_size;",
          "693:   runtime->appl_ptr = runtime->hw_ptr = 0;",
          "694:   spin_unlock_irq(&runtime->lock);",
          "695:   kfree(oldbuf);",
          "696:  }",
          "697:  runtime->avail_min = params->avail_min;",
          "698:  return 0;",
          "",
          "[Added Lines]",
          "664:   __reset_runtime_ptrs(runtime, is_input);",
          "672: int snd_rawmidi_output_params(struct snd_rawmidi_substream *substream,",
          "673:          struct snd_rawmidi_params *params)",
          "674: {",
          "675:  if (substream->append && substream->use_count > 1)",
          "676:   return -EBUSY;",
          "677:  snd_rawmidi_drain_output(substream);",
          "678:  substream->active_sensing = !params->no_active_sensing;",
          "679:  return resize_runtime_buffer(substream->runtime, params, false);",
          "680: }",
          "687:  return resize_runtime_buffer(substream->runtime, params, true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef4db239cda2d74f53120e223643b0f5bbf947c1",
      "candidate_info": {
        "commit_hash": "ef4db239cda2d74f53120e223643b0f5bbf947c1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ef4db239cda2d74f53120e223643b0f5bbf947c1",
        "files": [
          "sound/core/rawmidi.c"
        ],
        "message": "ALSA: rawmidi: Use kvmalloc() for buffers\n\nThe size of in-kernel rawmidi buffers may be big up to 1MB, and it can\nbe specified freely by user-space; which implies that user-space may\ntrigger kmalloc() errors frequently.\n\nThis patch replaces the buffer allocation via kvmalloc() for dealing\nwith bigger buffers gracefully.\n\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
        "before_after_code_files": [
          "sound/core/rawmidi.c||sound/core/rawmidi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sound/core/rawmidi.c||sound/core/rawmidi.c"
          ],
          "candidate": [
            "sound/core/rawmidi.c||sound/core/rawmidi.c"
          ]
        }
      },
      "candidate_diff": {
        "sound/core/rawmidi.c||sound/core/rawmidi.c": [
          "File: sound/core/rawmidi.c -> sound/core/rawmidi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include <linux/mutex.h>",
          "30: #include <linux/module.h>",
          "31: #include <linux/delay.h>",
          "32: #include <sound/rawmidi.h>",
          "33: #include <sound/info.h>",
          "34: #include <sound/control.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include <linux/mm.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:   runtime->avail = 0;",
          "129:  else",
          "130:   runtime->avail = runtime->buffer_size;",
          "132:  if (!runtime->buffer) {",
          "133:   kfree(runtime);",
          "134:   return -ENOMEM;",
          "",
          "[Removed Lines]",
          "131:  runtime->buffer = kmalloc(runtime->buffer_size, GFP_KERNEL);",
          "",
          "[Added Lines]",
          "132:  runtime->buffer = kvmalloc(runtime->buffer_size, GFP_KERNEL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142: {",
          "143:  struct snd_rawmidi_runtime *runtime = substream->runtime;",
          "146:  kfree(runtime);",
          "147:  substream->runtime = NULL;",
          "148:  return 0;",
          "",
          "[Removed Lines]",
          "145:  kfree(runtime->buffer);",
          "",
          "[Added Lines]",
          "146:  kvfree(runtime->buffer);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "654:  if (params->avail_min < 1 || params->avail_min > params->buffer_size)",
          "655:   return -EINVAL;",
          "656:  if (params->buffer_size != runtime->buffer_size) {",
          "658:   if (!newbuf)",
          "659:    return -ENOMEM;",
          "660:   spin_lock_irq(&runtime->lock);",
          "",
          "[Removed Lines]",
          "657:   newbuf = kmalloc(params->buffer_size, GFP_KERNEL);",
          "",
          "[Added Lines]",
          "658:   newbuf = kvmalloc(params->buffer_size, GFP_KERNEL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "663:   runtime->buffer_size = params->buffer_size;",
          "664:   __reset_runtime_ptrs(runtime, is_input);",
          "665:   spin_unlock_irq(&runtime->lock);",
          "667:  }",
          "668:  runtime->avail_min = params->avail_min;",
          "669:  return 0;",
          "",
          "[Removed Lines]",
          "666:   kfree(oldbuf);",
          "",
          "[Added Lines]",
          "667:   kvfree(oldbuf);",
          "",
          "---------------"
        ]
      }
    }
  ]
}