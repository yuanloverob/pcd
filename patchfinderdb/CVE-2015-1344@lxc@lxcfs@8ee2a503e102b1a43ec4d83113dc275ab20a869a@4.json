{
  "cve_id": "CVE-2015-1344",
  "cve_desc": "The do_write_pids function in lxcfs.c in LXCFS before 0.12 does not properly check permissions, which allows local users to gain privileges by writing a pid to the tasks file.",
  "repo": "lxc/lxcfs",
  "patch_hash": "8ee2a503e102b1a43ec4d83113dc275ab20a869a",
  "patch_info": {
    "commit_hash": "8ee2a503e102b1a43ec4d83113dc275ab20a869a",
    "repo": "lxc/lxcfs",
    "commit_url": "https://github.com/lxc/lxcfs/commit/8ee2a503e102b1a43ec4d83113dc275ab20a869a",
    "files": [
      "lxcfs.c"
    ],
    "message": "Implement privilege check when moving tasks\n\nWhen writing pids to a tasks file in lxcfs, lxcfs was checking\nfor privilege over the tasks file but not over the pid being\nmoved.  Since the cgm_movepid request is done as root on the host,\nnot with the requestor's credentials, we must copy the check which\ncgmanager was doing to ensure that the requesting task is allowed\nto change the victim task's cgroup membership.\n\nThis is CVE-2015-1344\nhttps://bugs.launchpad.net/ubuntu/+source/lxcfs/+bug/1512854\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
    "before_after_code_files": [
      "lxcfs.c||lxcfs.c"
    ]
  },
  "patch_diff": {
    "lxcfs.c||lxcfs.c": [
      "File: lxcfs.c -> lxcfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1336:  goto loop;",
      "1337: }",
      "1340: {",
      "1341:  int sock[2] = {-1, -1};",
      "1342:  pid_t qpid, cpid = -1;",
      "",
      "[Removed Lines]",
      "1339: static bool do_write_pids(pid_t tpid, const char *contrl, const char *cg, const char *file, const char *buf)",
      "",
      "[Added Lines]",
      "1343: bool hostuid_to_ns(uid_t uid, pid_t pid, uid_t *answer)",
      "1344: {",
      "1345:  FILE *f;",
      "1346:  char line[400];",
      "1348:  sprintf(line, \"/proc/%d/uid_map\", pid);",
      "1349:  if ((f = fopen(line, \"r\")) == NULL) {",
      "1350:   return false;",
      "1351:  }",
      "1354:  fclose(f);",
      "1356:  if (*answer == -1)",
      "1357:   return false;",
      "1358:  return true;",
      "1359: }",
      "1366: void get_pid_creds(pid_t pid, uid_t *uid, gid_t *gid)",
      "1367: {",
      "1368:  char line[400];",
      "1369:  uid_t u;",
      "1370:  gid_t g;",
      "1371:  FILE *f;",
      "1375:  sprintf(line, \"/proc/%d/status\", pid);",
      "1376:  if ((f = fopen(line, \"r\")) == NULL) {",
      "1377:   fprintf(stderr, \"Error opening %s: %s\\n\", line, strerror(errno));",
      "1378:   return;",
      "1379:  }",
      "1380:  while (fgets(line, 400, f)) {",
      "1381:   if (strncmp(line, \"Uid:\", 4) == 0) {",
      "1382:    if (sscanf(line+4, \"%u\", &u) != 1) {",
      "1383:     fprintf(stderr, \"bad uid line for pid %u\\n\", pid);",
      "1384:     fclose(f);",
      "1385:     return;",
      "1386:    }",
      "1388:   } else if (strncmp(line, \"Gid:\", 4) == 0) {",
      "1389:    if (sscanf(line+4, \"%u\", &g) != 1) {",
      "1390:     fprintf(stderr, \"bad gid line for pid %u\\n\", pid);",
      "1391:     fclose(f);",
      "1392:     return;",
      "1393:    }",
      "1395:   }",
      "1396:  }",
      "1397:  fclose(f);",
      "1398: }",
      "1408: bool may_move_pid(pid_t r, uid_t r_uid, pid_t v)",
      "1409: {",
      "1410:  uid_t v_uid, tmpuid;",
      "1411:  gid_t v_gid;",
      "1413:  if (r == v)",
      "1414:   return true;",
      "1415:  if (r_uid == 0)",
      "1416:   return true;",
      "1417:  get_pid_creds(v, &v_uid, &v_gid);",
      "1418:  if (r_uid == v_uid)",
      "1419:   return true;",
      "1420:  if (hostuid_to_ns(r_uid, r, &tmpuid) && tmpuid == 0",
      "1421:    && hostuid_to_ns(v_uid, r, &tmpuid))",
      "1422:   return true;",
      "1423:  return false;",
      "1424: }",
      "1426: static bool do_write_pids(pid_t tpid, uid_t tuid, const char *contrl, const char *cg,",
      "1427:   const char *file, const char *buf)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1379:   if (recv_creds(sock[0], &cred, &v)) {",
      "1380:    if (v == '0') {",
      "1381:     if (fprintf(pids_file, \"%d\", (int) cred.pid) < 0)",
      "1382:      fail = true;",
      "1383:    }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1469:     if (!may_move_pid(tpid, tuid, cred.pid)) {",
      "1470:      fail = true;",
      "1471:      break;",
      "1472:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1450:    strcmp(f->file, \"/cgroup.procs\") == 0 ||",
      "1451:    strcmp(f->file, \"cgroup.procs\") == 0)",
      "1454:  else",
      "1455:   r = cgfs_set_value(f->controller, f->cgroup, f->file, localbuf);",
      "",
      "[Removed Lines]",
      "1453:   r = do_write_pids(fc->pid, f->controller, f->cgroup, f->file, localbuf);",
      "",
      "[Added Lines]",
      "1545:   r = do_write_pids(fc->pid, fc->uid, f->controller, f->cgroup, f->file, localbuf);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8e547050578cd1c6b99697abef1738254b326984",
      "candidate_info": {
        "commit_hash": "8e547050578cd1c6b99697abef1738254b326984",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/8e547050578cd1c6b99697abef1738254b326984",
        "files": [
          "lxcfs.c"
        ],
        "message": "prune unused init pid store entries\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:  pid_t initpid;      // the pid of nit in that ns",
          "81:  long int ctime;     // the time at which /proc/$initpid was created",
          "82:  struct pidns_init_store *next;",
          "83: };",
          "85: struct pidns_init_store *pidns_inits;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:  long int lastcheck;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:  }",
          "158: }",
          "161: static void save_initpid(struct stat *sb, pid_t pid)",
          "162: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: #define PURGE_SECS 5",
          "163: static void prune_initpid_store(void)",
          "164: {",
          "165:  static long int last_prune = 0;",
          "166:  struct pidns_init_store *e, *prev, *delme;",
          "167:  long int now, threshold;",
          "169:  if (!last_prune) {",
          "170:   last_prune = time(NULL);",
          "171:   return;",
          "172:  }",
          "173:  now = time(NULL);",
          "174:  if (now < last_prune + PURGE_SECS)",
          "175:   return;",
          "176: #if DEBUG",
          "177:  fprintf(stderr, \"pruning\\n\");",
          "178: #endif",
          "179:  last_prune = now;",
          "180:  threshold = now - 2 * PURGE_SECS;",
          "182:  for (prev = NULL, e = pidns_inits; e; ) {",
          "183:   if (e->lastcheck < threshold) {",
          "184: #if DEBUG",
          "185:    fprintf(stderr, \"Removing cached entry for %d\\n\", e->initpid);",
          "186: #endif",
          "187:    delme = e;",
          "188:    if (prev)",
          "189:     prev->next = e->next;",
          "190:    else",
          "191:     pidns_inits = e->next;",
          "192:    e = e->next;",
          "193:    free(delme);",
          "194:   } else {",
          "195:    prev = e;",
          "196:    e = e->next;",
          "197:   }",
          "198:  }",
          "199: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:  e->initpid = pid;",
          "178:  e->ctime = procsb.st_ctime;",
          "179:  e->next = pidns_inits;",
          "180:  pidns_inits = e;",
          "181: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:  e->lastcheck = time(NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "192:  struct pidns_init_store *e = pidns_inits;",
          "193:  while (e) {",
          "194:   if (e->ino == sb->st_ino) {",
          "196:     return e;",
          "197:    remove_initpid(e);",
          "198:    return NULL;",
          "199:   }",
          "",
          "[Removed Lines]",
          "195:    if (initpid_still_valid(e, sb))",
          "",
          "[Added Lines]",
          "237:    if (initpid_still_valid(e, sb)) {",
          "238:     e->lastcheck = time(NULL);",
          "240:    }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "311:   save_initpid(&sb, answer);",
          "313: out:",
          "314:  store_unlock();",
          "315:  return answer;",
          "316: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "360:  prune_initpid_store();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e76ce87a2df6d284d0b838dc85396a78e4470101",
      "candidate_info": {
        "commit_hash": "e76ce87a2df6d284d0b838dc85396a78e4470101",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/e76ce87a2df6d284d0b838dc85396a78e4470101",
        "files": [
          "lxcfs.c"
        ],
        "message": "do not dereference char* for realloc\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  } else if (tmplen + *sz + 1 >= *asz) {",
          "89:   do {",
          "91:   } while (!d);",
          "",
          "[Removed Lines]",
          "90:    d = realloc(*src, *asz + BUF_RESERVE_SIZE);",
          "",
          "[Added Lines]",
          "90:    d = realloc(src, *asz + BUF_RESERVE_SIZE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec3b236fe4fba6084b3a7f0b3f66428ca96718f9",
      "candidate_info": {
        "commit_hash": "ec3b236fe4fba6084b3a7f0b3f66428ca96718f9",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/ec3b236fe4fba6084b3a7f0b3f66428ca96718f9",
        "files": [
          "lxcfs.c"
        ],
        "message": "caller_may_see_dir: prune init slice\n\nOtherwise systemd is denied permission to see cgroups in\nname=systemd in the container.\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:   return true;",
          "425:  c2 = get_pid_cgroup(pid, contrl);",
          "427:  if (!c2)",
          "428:   return false;",
          "430:  task_cg = c2 + 1;",
          "431:  target_len = strlen(cg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428:  prune_init_slice(c2);",
          "",
          "---------------"
        ]
      }
    }
  ]
}