{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "76ff5e1537b39d6e27a0fc79d1a91f2ad3e11d07",
      "candidate_info": {
        "commit_hash": "76ff5e1537b39d6e27a0fc79d1a91f2ad3e11d07",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/76ff5e1537b39d6e27a0fc79d1a91f2ad3e11d07",
        "files": [
          "www/app/DashboardController.js",
          "www/app/LightsController.js",
          "www/css/style.css"
        ],
        "message": "Selector selected color now more inline with rest of Gui",
        "before_after_code_files": [
          "www/app/DashboardController.js||www/app/DashboardController.js",
          "www/app/LightsController.js||www/app/LightsController.js",
          "www/css/style.css||www/css/style.css"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/DashboardController.js||www/app/DashboardController.js": [
          "File: www/app/DashboardController.js -> www/app/DashboardController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "481:               }",
          "482:               xhtm += '<button type=\"button\" class=\"btn btn-small ';",
          "483:               if ((index * 10) == item.LevelInt) {",
          "485:               }",
          "486:               else {",
          "487:                xhtm += 'btn-default\"';",
          "",
          "[Removed Lines]",
          "484:                xhtm += 'btn-danger\"';",
          "",
          "[Added Lines]",
          "484:                xhtm += 'btn-selected\"';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "937:               }",
          "938:               xhtm += '<button type=\"button\" class=\"btn btn-small ';",
          "939:               if ((index * 10) == item.LevelInt) {",
          "941:               }",
          "942:               else {",
          "943:                xhtm += 'btn-default\"';",
          "",
          "[Removed Lines]",
          "940:                xhtm += 'btn-danger\"';",
          "",
          "[Added Lines]",
          "940:                xhtm += 'btn-selected\"';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2364:             }",
          "2365:             xhtm += '<button type=\"button\" class=\"btn btn-small ';",
          "2366:             if ((index * 10) == item.LevelInt) {",
          "2368:             }",
          "2369:             else {",
          "2370:              xhtm += 'btn-default\"';",
          "",
          "[Removed Lines]",
          "2367:              xhtm += 'btn-danger\"';",
          "",
          "[Added Lines]",
          "2367:              xhtm += 'btn-selected\"';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2752:             }",
          "2753:             xhtm += '<button type=\"button\" class=\"btn btn-small ';",
          "2754:             if ((index * 10) == item.LevelInt) {",
          "2756:             }",
          "2757:             else {",
          "2758:              xhtm += 'btn-default\"';",
          "",
          "[Removed Lines]",
          "2755:              xhtm += 'btn-danger\"';",
          "",
          "[Added Lines]",
          "2755:              xhtm += 'btn-selected\"';",
          "",
          "---------------"
        ],
        "www/app/LightsController.js||www/app/LightsController.js": [
          "File: www/app/LightsController.js -> www/app/LightsController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "740:             }",
          "741:             xhtm += '<button type=\"button\" class=\"btn btn-small ';",
          "742:             if ((index * 10) == item.LevelInt) {",
          "744:             }",
          "745:             else {",
          "746:              xhtm += 'btn-default\"';",
          "",
          "[Removed Lines]",
          "743:              xhtm += 'btn-danger\"';",
          "",
          "[Added Lines]",
          "743:              xhtm += 'btn-selected\"';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1317:           }",
          "1318:           xhtm += '<button type=\"button\" class=\"btn btn-small ';",
          "1319:           if ((index * 10) == item.LevelInt) {",
          "1321:           }",
          "1322:           else {",
          "1323:            xhtm += 'btn-default\"';",
          "",
          "[Removed Lines]",
          "1320:            xhtm += 'btn-danger\"';",
          "",
          "[Added Lines]",
          "1320:            xhtm += 'btn-selected\"';",
          "",
          "---------------"
        ],
        "www/css/style.css||www/css/style.css": [
          "File: www/css/style.css -> www/css/style.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "2037: .jQWCP-wWidget {",
          "2038:  touch-action: none;",
          "2039: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2041: .btn-selected {",
          "2042:   color: #ffffff;",
          "2043:   text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);",
          "2044:   background-color: #826db1;",
          "2046:   background-image: -moz-linear-gradient(top, #826db1, #695499);",
          "2047:   background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#826db1), to(#695499));",
          "2048:   background-image: -webkit-linear-gradient(top, #826db1, #695499);",
          "2049:   background-image: -o-linear-gradient(top, #826db1, #695499);",
          "2050:   background-image: linear-gradient(to bottom, #826db1, #695499);",
          "2051:   background-repeat: repeat-x;",
          "2052:   border-color: #695499 #695499 #ad6704;",
          "2053:   border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);",
          "2054:   filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff826db1', endColorstr='#ff695499', GradientType=0);",
          "2055:   filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);",
          "2056: }",
          "2058: .btn-selected:hover,",
          "2059: .btn-selected:focus,",
          "2060: .btn-selected:active,",
          "2061: .btn-selected.active,",
          "2062: .btn-selected.disabled,",
          "2063: .btn-selected[disabled] {",
          "2064:   color: #ffffff;",
          "2065:   background-color: #826db1;",
          "2067: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07f95646f02d347e8e743879638373b6ab2a38a0",
      "candidate_info": {
        "commit_hash": "07f95646f02d347e8e743879638373b6ab2a38a0",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/07f95646f02d347e8e743879638373b6ab2a38a0",
        "files": [
          "main/EventSystem.cpp"
        ],
        "message": "EventSystem logging name when issuing thermostat SetPoint/Mode/Fan command (solved issue #3009)",
        "before_after_code_files": [
          "main/EventSystem.cpp||main/EventSystem.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/EventSystem.cpp||main/EventSystem.cpp": [
          "File: main/EventSystem.cpp -> main/EventSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3744:    (devType == pTypeRadiator1 && !sValue.empty())",
          "3745:    )",
          "3746:   {",
          "3748:    m_mainworker.SetSetPoint(std::to_string(idx), static_cast<float>(atof(sValue.c_str())));",
          "3749:   }",
          "3750:   else if ((devType == pTypeGeneral) && (subType == sTypeZWaveThermostatMode) && nValue != -1)",
          "3751:   {",
          "3753:    m_mainworker.SetZWaveThermostatMode(std::to_string(idx), nValue);",
          "3754:   }",
          "3755:   else if ((devType == pTypeGeneral) && (subType == sTypeZWaveThermostatFanMode) && nValue != -1)",
          "3756:   {",
          "3758:    m_mainworker.SetZWaveThermostatFanMode(std::to_string(idx), nValue);",
          "3759:   }",
          "3760:   else if ((devType == pTypeGeneral) && (subType == sTypeTextStatus))",
          "",
          "[Removed Lines]",
          "3747:    _log.Log(LOG_NORM, \"EventSystem: Sending SetPoint to device....\");",
          "3752:    _log.Log(LOG_NORM, \"EventSystem: Sending Thermostat Mode to device....\");",
          "3757:    _log.Log(LOG_NORM, \"EventSystem: Sending Thermostat Fan Mode to device....\");",
          "",
          "[Added Lines]",
          "3747:    _log.Log(LOG_NORM, \"EventSystem: Sending SetPoint to device '%s' ....\", dname.c_str());",
          "3752:    _log.Log(LOG_NORM, \"EventSystem: Sending Thermostat Mode to device '%s' ....\", dname.c_str());",
          "3757:    _log.Log(LOG_NORM, \"EventSystem: Sending Thermostat Fan Mode to device '%s' ....\", dname.c_str());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4948b112eaf463dc42e41f9c401a2abc131ea5f",
      "candidate_info": {
        "commit_hash": "e4948b112eaf463dc42e41f9c401a2abc131ea5f",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/e4948b112eaf463dc42e41f9c401a2abc131ea5f",
        "files": [
          "www/app/ForecastController.js"
        ],
        "message": "Getting forecast in gui language again",
        "before_after_code_files": [
          "www/app/ForecastController.js||www/app/ForecastController.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/ForecastController.js||www/app/ForecastController.js": [
          "File: www/app/ForecastController.js -> www/app/ForecastController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:   function init() {",
          "6:    $scope.MakeGlobalConfig();",
          "7:    var htmlcontent = '';",
          "9:    $('#maincontent').html(htmlcontent);",
          "10:    $('#maincontent').i18n();",
          "11:   };",
          "",
          "[Removed Lines]",
          "8:    htmlcontent += '<iframe class=\"cIFrameLarge\" id=\"IMain\" src=\"//darksky.net/forecast/' + $scope.config.Latitude + ',' + $scope.config.Longitude + '?lang=' + $rootScope.config.language + '\"></iframe>';",
          "",
          "[Added Lines]",
          "8:    htmlcontent += '<iframe class=\"cIFrameLarge\" id=\"IMain\" src=\"//darksky.net/forecast/' + $scope.config.Latitude + ',' + $scope.config.Longitude + '/ca12/' + $rootScope.config.language + '\"></iframe>';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf5341f133c554561b813f4095ca5c063e612409",
      "candidate_info": {
        "commit_hash": "cf5341f133c554561b813f4095ca5c063e612409",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/cf5341f133c554561b813f4095ca5c063e612409",
        "files": [
          "hardware/plugins/PluginTransports.cpp"
        ],
        "message": "Bug Fix: Moved PyType_Ready for TCP & UDP listeners to prevent crash",
        "before_after_code_files": [
          "hardware/plugins/PluginTransports.cpp||hardware/plugins/PluginTransports.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/PluginTransports.cpp||hardware/plugins/PluginTransports.cpp": [
          "File: hardware/plugins/PluginTransports.cpp -> hardware/plugins/PluginTransports.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:  {",
          "129:   try",
          "130:   {",
          "131:    if (!m_Socket)",
          "132:    {",
          "133:     if (!m_Acceptor)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:    PyType_Ready(&CConnectionType);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:    std::string sAddress = remote_ep.address().to_string();",
          "166:    std::string sPort = std::to_string(remote_ep.port());",
          "169:    CConnection* pConnection = (CConnection*)CConnection_new(&CConnectionType, (PyObject*)NULL, (PyObject*)NULL);",
          "170:    CPluginTransportTCP* pTcpTransport = new CPluginTransportTCP(m_HwdID, (PyObject*)pConnection, sAddress, sPort);",
          "171:    Py_DECREF(pConnection);",
          "",
          "[Removed Lines]",
          "168:    PyType_Ready(&CConnectionType);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "482:  {",
          "483:   try",
          "484:   {",
          "485:    if (!m_Socket)",
          "486:    {",
          "487:     boost::system::error_code ec;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "486:    PyType_Ready(&CConnectionType);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "525:    std::string sAddress = m_remote_endpoint.address().to_string();",
          "526:    std::string sPort = std::to_string(m_remote_endpoint.port());",
          "529:    CConnection* pConnection = (CConnection*)CConnection_new(&CConnectionType, (PyObject*)NULL, (PyObject*)NULL);",
          "",
          "[Removed Lines]",
          "528:    PyType_Ready(&CConnectionType);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e5241001a72c3d463bd265a5c779ebe72e9f831",
      "candidate_info": {
        "commit_hash": "6e5241001a72c3d463bd265a5c779ebe72e9f831",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/6e5241001a72c3d463bd265a5c779ebe72e9f831",
        "files": [
          "hardware/DenkoviUSBDevices.cpp"
        ],
        "message": "Removed unnecessary includes",
        "before_after_code_files": [
          "hardware/DenkoviUSBDevices.cpp||hardware/DenkoviUSBDevices.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/DenkoviUSBDevices.cpp||hardware/DenkoviUSBDevices.cpp": [
          "File: hardware/DenkoviUSBDevices.cpp -> hardware/DenkoviUSBDevices.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"../main/localtime_r.h\"",
          "6: #include \"../main/mainworker.h\"",
          "11: #define MAX_POLL_INTERVAL 3600*1000",
          "13: enum _edaeUsbState",
          "",
          "[Removed Lines]",
          "8: #include <iostream>",
          "9: #include <boost/lexical_cast.hpp>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}