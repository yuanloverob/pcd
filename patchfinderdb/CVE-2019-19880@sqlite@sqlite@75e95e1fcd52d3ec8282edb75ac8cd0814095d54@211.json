{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af9b58b335308ea31f088fbd9283714f58d406d0",
      "candidate_info": {
        "commit_hash": "af9b58b335308ea31f088fbd9283714f58d406d0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/af9b58b335308ea31f088fbd9283714f58d406d0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Simplify the fix in the previous commit.\n\nFossilOrigin-Name: 5ef64b0f55d952c7b0016055eaf6bbc1b5b7afc09a62ee8e5e694ffa9863ac7c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b1d7e104e034655fe41bc55c562d91e8074a2973d538b8b29301458db45afc57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5343:   int i;",
          "5344:   int regHit = 0;",
          "5345:   int addrHitTest = 0;",
          "5347:   struct AggInfo_func *pF;",
          "5348:   struct AggInfo_col *pC;",
          "",
          "[Removed Lines]",
          "5346:   int bFilterMinMax = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5360:       if( pAggInfo->nAccumulator",
          "5361:        && (pF->pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL)",
          "5362:       ){",
          "5364:         if( regHit==0 ) regHit = ++pParse->nMem;",
          "5369:         sqlite3VdbeAddOp2(v, OP_Copy, regAcc, regHit);",
          "5370:       }",
          "5371:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "5363:         bFilterMinMax = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5418:   for(i=0, pC=pAggInfo->aCol; i<pAggInfo->nAccumulator; i++, pC++){",
          "5419:     sqlite3ExprCode(pParse, pC->pExpr, pC->iMem);",
          "5420:   }",
          "5428:   pAggInfo->directMode = 0;",
          "5429:   if( addrHitTest ){",
          "",
          "[Removed Lines]",
          "5421:   if( bFilterMinMax ){",
          "5425:     sqlite3VdbeAddOp2(v, OP_Integer, 1, regHit);",
          "5426:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20c00823713980df47f51413c22e54294d0a5382",
      "candidate_info": {
        "commit_hash": "20c00823713980df47f51413c22e54294d0a5382",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/20c00823713980df47f51413c22e54294d0a5382",
        "files": [
          "ext/misc/csv.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a harmless compiler warning in the CSV extension.\n\nFossilOrigin-Name: fbcd72565f4425016cebbbf5dfd6aa510234cfb31c785cf364f04fff444aacae",
        "before_after_code_files": [
          "ext/misc/csv.c||ext/misc/csv.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/csv.c||ext/misc/csv.c": [
          "File: ext/misc/csv.c -> ext/misc/csv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:   }else if( pNew->zData ){",
          "622:     pNew->iStart = (int)sRdr.iIn;",
          "623:   }else{",
          "625:   }",
          "626:   csv_reader_reset(&sRdr);",
          "627:   rc = sqlite3_declare_vtab(db, CSV_SCHEMA);",
          "",
          "[Removed Lines]",
          "624:     pNew->iStart = ftell(sRdr.in) - sRdr.nIn + sRdr.iIn;",
          "",
          "[Added Lines]",
          "624:     pNew->iStart = (int)(ftell(sRdr.in) - sRdr.nIn + sRdr.iIn);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bef216dfa1456a787e3d9c74936ee1c6600827d4e252bd13e7a93046ce07469f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b008e4d744175052c219ab78db1ea3732682ceb3",
      "candidate_info": {
        "commit_hash": "b008e4d744175052c219ab78db1ea3732682ceb3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b008e4d744175052c219ab78db1ea3732682ceb3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/loadext.c",
          "test/without_rowid1.test",
          "test/without_rowid6.test",
          "test/without_rowid7.test"
        ],
        "message": "Fix some test script issues that come up with SQLITE_OMIT_VIRTUALTABLE builds.\n\nFossilOrigin-Name: 3934d2d08ee14d644dc01f967c10f219b76b172c963c90a7a8141f2b08a7d5bf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c",
          "test/without_rowid1.test||test/without_rowid1.test",
          "test/without_rowid6.test||test/without_rowid6.test",
          "test/without_rowid7.test||test/without_rowid7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e0d5d2640a92070967bc9fdf5c5b1653e41b9c04e04dcb70f18ead10f053aef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:   sqlite3_stmt_isexplain,",
          "464:   sqlite3_value_frombind,",
          "466:   sqlite3_drop_modules,",
          "467: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "468: #else",
          "469:   0,",
          "470: #endif",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: source $testdir/tester.tcl",
          "18: set testprefix without_rowid1",
          "20: # Create and query a WITHOUT ROWID table.",
          "21: #",
          "22: do_execsql_test without_rowid1-1.0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: proc do_execsql_test_if_vtab {tn sql {res {}}} {",
          "21:   ifcapable vtab { uplevel [list do_execsql_test $tn $sql $res] }",
          "22: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: integrity_check without_rowid1-1.0ic",
          "35:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "36: } {c 1 a 1 b 0 d 0}",
          "",
          "[Removed Lines]",
          "34: do_execsql_test without_rowid1-1.0ixi {",
          "",
          "[Added Lines]",
          "38: do_execsql_test_if_vtab without_rowid1-1.0ixi {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:   UPDATE t4 SET a = 'ABC';",
          "120:   SELECT * FROM t4;",
          "121: } {ABC def}",
          "123:   SELECT name, coll, key FROM pragma_index_xinfo('t4');",
          "124: } {a nocase 1 b BINARY 0}",
          "",
          "[Removed Lines]",
          "122: do_execsql_test 2.1.3 {",
          "",
          "[Added Lines]",
          "126: do_execsql_test_if_vtab 2.1.3 {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:   SELECT * FROM t4;",
          "136: } {xyz ABC}",
          "139:   SELECT name, coll, key FROM pragma_index_xinfo('t4');",
          "140: } {a nocase 1 b BINARY 0}",
          "",
          "[Removed Lines]",
          "138: do_execsql_test 2.2.3 {",
          "",
          "[Added Lines]",
          "142: do_execsql_test_if_vtab 2.2.3 {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "146:   UPDATE t5 SET a='abc', b='def';",
          "147: } {}",
          "150:   SELECT name, coll, key FROM pragma_index_xinfo('t5');",
          "151: } {b BINARY 1 a BINARY 1}",
          "",
          "[Removed Lines]",
          "149: do_execsql_test 2.3.2 {",
          "",
          "[Added Lines]",
          "153: do_execsql_test_if_vtab 2.3.2 {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "165:   SELECT * FROM t6 ORDER BY c;",
          "166: } {ABC def ghi ABC def ghi}",
          "169:   SELECT name, coll, key FROM pragma_index_xinfo('t6');",
          "170: } {b BINARY 1 a nocase 1 c BINARY 0}",
          "",
          "[Removed Lines]",
          "168: do_execsql_test 2.4.3 {",
          "",
          "[Added Lines]",
          "172: do_execsql_test_if_vtab 2.4.3 {",
          "",
          "---------------"
        ],
        "test/without_rowid6.test||test/without_rowid6.test": [
          "File: test/without_rowid6.test -> test/without_rowid6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "19: do_execsql_test without_rowid6-100 {",
          "20:   CREATE TABLE t1(a,b,c,d,e, PRIMARY KEY(a,b,c,a,b,c,d,a,b,c)) WITHOUT ROWID;",
          "21:   CREATE INDEX t1a ON t1(b, b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: proc do_execsql_test_if_vtab {tn sql {res {}}} {",
          "20:   ifcapable vtab { uplevel [list do_execsql_test $tn $sql $res] }",
          "21: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:   INSERT INTO t1(a,b,c,d,e) SELECT i, i+1000, printf('x%dy',i), 0, 0 FROM c;",
          "25:   ANALYZE;",
          "26: } {}",
          "28:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "29: } {a 1 b 1 c 1 d 1 e 0}",
          "30: do_execsql_test without_rowid6-110 {",
          "",
          "[Removed Lines]",
          "27: do_execsql_test without_rowid6-101 {",
          "",
          "[Added Lines]",
          "31: do_execsql_test_if_vtab without_rowid6-101 {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:   INSERT INTO t1(a,b,c) VALUES(1,8,3),(4,5,6),(7,2,9);",
          "55:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "56: } {4 1}",
          "58:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "59: } {b 1 a 0 c 0}",
          "60: do_execsql_test without_rowid6-210 {",
          "",
          "[Removed Lines]",
          "57: do_execsql_test without_rowid6-201 {",
          "",
          "[Added Lines]",
          "61: do_execsql_test_if_vtab without_rowid6-201 {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:   INSERT INTO t1(a,b,c) VALUES(1,8,3),(4,5,6),(7,2,9);",
          "112:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "113: } {4 1}",
          "115:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "116: } {b 1 c 1 a 0}",
          "117: do_execsql_test without_rowid6-510 {",
          "",
          "[Removed Lines]",
          "114: do_execsql_test without_rowid6-501 {",
          "",
          "[Added Lines]",
          "118: do_execsql_test_if_vtab without_rowid6-501 {",
          "",
          "---------------"
        ],
        "test/without_rowid7.test||test/without_rowid7.test": [
          "File: test/without_rowid7.test -> test/without_rowid7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix without_rowid7",
          "18: do_execsql_test 1.0 {",
          "19:   CREATE TABLE t1(a, b COLLATE nocase, PRIMARY KEY(a, a, b)) WITHOUT ROWID;",
          "20: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: proc do_execsql_test_if_vtab {tn sql {res {}}} {",
          "19:   ifcapable vtab { uplevel [list do_execsql_test $tn $sql $res] }",
          "20: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: do_execsql_test 2.2a {",
          "37:   PRAGMA index_info(t2);",
          "38: } {0 0 a 1 0 a}",
          "40:   SELECT *, '|' FROM pragma_index_info('t2');",
          "41: } {0 0 a | 1 0 a |}",
          "42: do_execsql_test 2.3a {",
          "43:   PRAGMA index_xinfo(t2);",
          "44: } {0 0 a 0 nocase 1 1 0 a 0 BINARY 1 2 1 b 0 BINARY 0}",
          "46:   SELECT *, '|' FROM pragma_index_xinfo('t2');",
          "47: } {0 0 a 0 nocase 1 | 1 0 a 0 BINARY 1 | 2 1 b 0 BINARY 0 |}",
          "",
          "[Removed Lines]",
          "39: do_execsql_test 2.2b {",
          "45: do_execsql_test 2.3b {",
          "",
          "[Added Lines]",
          "43: do_execsql_test_if_vtab 2.2b {",
          "49: do_execsql_test_if_vtab 2.3b {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c2321fdf38986cbf72e656aad204c2b10f5067d",
      "candidate_info": {
        "commit_hash": "7c2321fdf38986cbf72e656aad204c2b10f5067d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7c2321fdf38986cbf72e656aad204c2b10f5067d",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/vtab1.test",
          "test/vtabH.test"
        ],
        "message": "Update test cases so that they work with ICU enabled.\n\nFossilOrigin-Name: 408144a1832569ced8e04840f0dd36a3867405f36b13631b0f13c0f7b8a0fb01",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/vtab1.test||test/vtab1.test",
          "test/vtabH.test||test/vtabH.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 927cd7b4c52fae665e57fb6039c6829e339cff5ad5c405800cac3ee149ef5be1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/vtab1.test||test/vtab1.test": [
          "File: test/vtab1.test -> test/vtab1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1311:   CREATE VIRTUAL TABLE e6 USING echo(t6);",
          "1312: }",
          "1333: }",
          "1335: do_execsql_test 18.2.0 {  PRAGMA case_sensitive_like = ON }",
          "",
          "[Removed Lines]",
          "1314: foreach {tn sql res filter} {",
          "1315:   1.1 \"SELECT a FROM e6 WHERE b>'8James'\" {4 2 6 1 5}",
          "1316:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b > ?} 8James}",
          "1318:   1.2 \"SELECT a FROM e6 WHERE b>='8' AND b<'9'\" {3 4}",
          "1319:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ?} 8 9}",
          "1321:   1.3 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1322:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8J%}",
          "1324:   1.4 \"SELECT a FROM e6 WHERE b LIKE '8j%'\" {3 4}",
          "1325:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8j%}",
          "1327:   1.5 \"SELECT a FROM e6 WHERE b LIKE '8%'\" {3 4}",
          "1328:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8%}",
          "1329: } {",
          "1330:   set echo_module {}",
          "1331:   do_execsql_test 18.$tn.1 $sql $res",
          "1332:   do_test         18.$tn.2 { lrange $::echo_module 2 end } $filter",
          "",
          "[Added Lines]",
          "1314: ifcapable !icu {",
          "1315:   foreach {tn sql res filter} {",
          "1316:     1.1 \"SELECT a FROM e6 WHERE b>'8James'\" {4 2 6 1 5}",
          "1317:       {xFilter {SELECT rowid, a, b FROM 't6' WHERE b > ?} 8James}",
          "1319:     1.2 \"SELECT a FROM e6 WHERE b>='8' AND b<'9'\" {3 4}",
          "1320:       {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ?} 8 9}",
          "1322:     1.3 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1323:       {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8J%}",
          "1325:     1.4 \"SELECT a FROM e6 WHERE b LIKE '8j%'\" {3 4}",
          "1326:       {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8j%}",
          "1328:     1.5 \"SELECT a FROM e6 WHERE b LIKE '8%'\" {3 4}",
          "1329:       {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8%}",
          "1330:   } {",
          "1331:     set echo_module {}",
          "1332:     do_execsql_test 18.$tn.1 $sql $res",
          "1333:     do_test         18.$tn.2 { lrange $::echo_module 2 end } $filter",
          "1334:   }",
          "",
          "---------------"
        ],
        "test/vtabH.test||test/vtabH.test": [
          "File: test/vtabH.test -> test/vtabH.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   CREATE VIRTUAL TABLE e6 USING echo(t6);",
          "31: }",
          "56:   }",
          "63: }",
          "",
          "[Removed Lines]",
          "33: foreach {tn sql expect} {",
          "34:   1 \"SELECT * FROM e6 WHERE b LIKE '8abc'\" {",
          "35:     xBestIndex",
          "36:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "37:     xFilter",
          "38:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "39:        8ABC 8abd 8abc",
          "40:   }",
          "42:   2 \"SELECT * FROM e6 WHERE b GLOB '8abc'\" {",
          "43:      xBestIndex",
          "44:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "45:      xFilter",
          "46:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "47:        8abc 8abd 8abc",
          "48:   }",
          "49:   3 \"SELECT * FROM e6 WHERE b LIKE '8e/'\" {",
          "50:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b like ?}",
          "51:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8e/",
          "52:   }",
          "53:   4 \"SELECT * FROM e6 WHERE b GLOB '8e/'\" {",
          "54:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b glob ?}",
          "55:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b glob ?} 8e/",
          "57: } {",
          "58:   do_test 1.$tn {",
          "59:     set echo_module {}",
          "60:     execsql $sql",
          "61:     set ::echo_module",
          "62:   } [list {*}$expect]",
          "",
          "[Added Lines]",
          "33: ifcapable !icu {",
          "34:   foreach {tn sql expect} {",
          "35:     1 \"SELECT * FROM e6 WHERE b LIKE '8abc'\" {",
          "36:       xBestIndex",
          "37:          {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "38:       xFilter",
          "39:          {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "40:          8ABC 8abd 8abc",
          "41:     }",
          "43:     2 \"SELECT * FROM e6 WHERE b GLOB '8abc'\" {",
          "44:        xBestIndex",
          "45:          {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "46:        xFilter",
          "47:          {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "48:          8abc 8abd 8abc",
          "49:     }",
          "50:     3 \"SELECT * FROM e6 WHERE b LIKE '8e/'\" {",
          "51:       xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b like ?}",
          "52:       xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8e/",
          "53:     }",
          "54:     4 \"SELECT * FROM e6 WHERE b GLOB '8e/'\" {",
          "55:       xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b glob ?}",
          "56:       xFilter {SELECT rowid, a, b FROM 't6' WHERE b glob ?} 8e/",
          "57:     }",
          "58:   } {",
          "59:     do_test 1.$tn {",
          "60:       set echo_module {}",
          "61:       execsql $sql",
          "62:       set ::echo_module",
          "63:     } [list {*}$expect]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b25a214decbb2a4db02a99f0a5aa28e0350c3d8c",
      "candidate_info": {
        "commit_hash": "b25a214decbb2a4db02a99f0a5aa28e0350c3d8c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b25a214decbb2a4db02a99f0a5aa28e0350c3d8c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Extend windowCodeStep() to handle any ROWS PRECEDING/FOLLOWING frame specification.\n\nFossilOrigin-Name: af0ea1363548461b2aad8fd54ee3f2f616111dcae2d6480f5294da44c87a0a5d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9b4d561f68febdab6624d8c567fb4357bf67dda500664cf708d16a76f37b8ec1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1871:   int addrIfStart;",
          "1872:   int addrGosubFlush;",
          "1873:   int addrInteger;",
          "1876:   int reg = pParse->nMem+1;",
          "1877:   int regRecord = reg+nSub;",
          "",
          "[Removed Lines]",
          "1874:   int addrGoto2;",
          "",
          "[Added Lines]",
          "1875:   int addrShortcut = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1931:         reg+pMWin->nBufferCol, pMWin->regPart, pMWin->pPartition->nExpr-1",
          "1932:     );",
          "1933:   }",
          "1937:   regArg = windowInitAccum(pParse, pMWin);",
          "1940:   sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "1941:   windowCheckIntValue(pParse, regStart, 0);",
          "1942:   sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "1943:   windowCheckIntValue(pParse, regEnd, 1);",
          "1944:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1947:   sqlite3VdbeJumpHere(v, addrIf);",
          "1959:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1963:   sqlite3WhereEnd(pWInfo);",
          "1966:   if( pMWin->pPartition ){",
          "1967:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "1968:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "1969:   }",
          "1984:   sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "1985:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "",
          "[Removed Lines]",
          "1934:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);   sqlite3VdbeChangeP5(v, 1);",
          "1935:   sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1); sqlite3VdbeChangeP5(v, 1);",
          "1936:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, 1);",
          "1939:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "1948:   sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "1949:   addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1950:   windowAggFinal(pParse, pMWin, 0);",
          "1951:   sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+1);",
          "1952:   windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1953:   addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1954:   sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1955:   windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "1956:   sqlite3VdbeJumpHere(v, addrIfStart);",
          "1957:   sqlite3VdbeJumpHere(v, addrIfEnd);",
          "1960:   windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "1971:   sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+2);",
          "1972:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1973:   windowAggFinal(pParse, pMWin, 0);",
          "1974:   windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1975:   addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1976:   sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+2);",
          "1977:   addrGoto2 = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1978:   windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "1979:   sqlite3VdbeJumpHere(v, addrIfStart);",
          "1980:   sqlite3VdbeAddOp2(v, OP_Goto, 0, addrGoto-1);",
          "1981:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1982:   sqlite3VdbeJumpHere(v, addrGoto2);",
          "",
          "[Added Lines]",
          "1943:   if( pMWin->eStart==TK_FOLLOWING || pMWin->eEnd==TK_PRECEDING ){",
          "1944:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "1945:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "1946:     windowAggFinal(pParse, pMWin, 0);",
          "1947:     sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1);",
          "1948:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1949:     sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "1950:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1951:     sqlite3VdbeJumpHere(v, addrGe);",
          "1952:   }",
          "1953:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1954:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "1955:   }",
          "1957:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);   sqlite3VdbeChangeP5(v, 1);",
          "1958:   sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1); sqlite3VdbeChangeP5(v, 1);",
          "1959:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, 1); sqlite3VdbeChangeP5(v, 1);",
          "1961:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "1967:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1968:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1969:     windowAggFinal(pParse, pMWin, 0);",
          "1970:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+1);",
          "1971:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1972:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "1974:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1975:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1976:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "1977:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "1978:   }else",
          "1979:   if( pMWin->eEnd==TK_PRECEDING ){",
          "1980:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1981:     sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "1982:     windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "1983:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "1985:     windowAggFinal(pParse, pMWin, 0);",
          "1986:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+1);",
          "1987:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1989:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1990:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1991:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "1992:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "1993:   }else{",
          "1994:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1995:     windowAggFinal(pParse, pMWin, 0);",
          "1996:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+1);",
          "1997:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1998:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1999:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "2000:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "2001:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "2002:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2003:   }",
          "2006:   if( pMWin->eEnd!=TK_PRECEDING ){",
          "2007:     sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "2008:     windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "2009:   }",
          "2012:   if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2022:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2023:     int addrBreak;",
          "2024:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2025:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+2);",
          "2026:     addrBreak = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2027:     windowAggFinal(pParse, pMWin, 0);",
          "2028:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2029:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2031:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "2032:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+2);",
          "2033:     sqlite3VdbeAddOp0(v, OP_Goto);",
          "2034:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "2035:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "2036:     sqlite3VdbeJumpHere(v, addrIfStart+2);",
          "2038:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrIfEnd);",
          "2039:     sqlite3VdbeJumpHere(v, addrBreak);",
          "2040:   }else{",
          "2041:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+2);",
          "2042:     addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2043:     if( pMWin->eEnd==TK_PRECEDING ){",
          "2044:       addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2045:       sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "2046:       windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "2047:       sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2048:       windowAggFinal(pParse, pMWin, 0);",
          "2049:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2050:     }else{",
          "2051:       windowAggFinal(pParse, pMWin, 0);",
          "2052:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2053:       addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "2054:       sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "2055:       windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "2056:       sqlite3VdbeJumpHere(v, addrIfStart);",
          "2057:       sqlite3VdbeAddOp2(v, OP_Goto, 0, addrGoto-1);",
          "2058:     }",
          "2059:     sqlite3VdbeJumpHere(v, addrGoto);",
          "2060:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2465:         break;",
          "2466:       }",
          "2467:     }",
          "2469:       VdbeModuleComment((pParse->pVdbe, \"Begin RowExprStep()\"));",
          "2470:       windowCodeRowExprStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2471:       VdbeModuleComment((pParse->pVdbe, \"End RowExprStep()\"));",
          "",
          "[Removed Lines]",
          "2468:     if( bCache || pMWin->eStart!=TK_PRECEDING || pMWin->eEnd!=TK_FOLLOWING ){",
          "",
          "[Added Lines]",
          "2547:     if( bCache",
          "2548:     || (pMWin->eStart!=TK_PRECEDING && pMWin->eStart!=TK_FOLLOWING)",
          "2549:     || (pMWin->eEnd!=TK_FOLLOWING && pMWin->eEnd!=TK_PRECEDING)",
          "2550:     ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}