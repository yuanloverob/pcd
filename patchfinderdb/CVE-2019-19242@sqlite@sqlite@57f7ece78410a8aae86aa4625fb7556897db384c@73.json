{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b531aa8fd9ca317c1ce586d1156c6c084a734264",
      "candidate_info": {
        "commit_hash": "b531aa8fd9ca317c1ce586d1156c6c084a734264",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b531aa8fd9ca317c1ce586d1156c6c084a734264",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "In a query that uses a partial index, the expression that is the WHERE clause of the partial index must always be true.  Use this fact to avoid evaluating identical terms in the WHERE clause of the query.\n\nFossilOrigin-Name: 9b2879629c34fc0a8e99d94648903eb93aabbc7a3682c80cb7382f9a9ca5ffb7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/wherecode.c||src/wherecode.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/wherecode.c||src/wherecode.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1f9fa58541dc974989eee9c9a5d453956f7dbcf42965ece2db2cb5dee3f3f5e2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1159:   }",
          "1160: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1169: static void whereApplyPartialIndexConstraints(",
          "1170:   Expr *pTruth,",
          "1171:   int iTabCur,",
          "1172:   WhereClause *pWC",
          "1173: ){",
          "1174:   int i;",
          "1175:   WhereTerm *pTerm;",
          "1176:   while( pTruth->op==TK_AND ){",
          "1177:     whereApplyPartialIndexConstraints(pTruth->pLeft, iTabCur, pWC);",
          "1178:     pTruth = pTruth->pRight;",
          "1179:   }",
          "1180:   for(i=0, pTerm=pWC->a; i<pWC->nTerm; i++, pTerm++){",
          "1181:     Expr *pExpr;",
          "1182:     if( pTerm->wtFlags & TERM_CODED ) continue;",
          "1183:     pExpr = pTerm->pExpr;",
          "1184:     if( sqlite3ExprCompare(0, pExpr, pTruth, iTabCur)==0 ){",
          "1185:       pTerm->wtFlags |= TERM_CODED;",
          "1186:     }",
          "1187:   }",
          "1188: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1768:       whereIndexExprTrans(pIdx, iCur, iIdxCur, pWInfo);",
          "1769:     }",
          "1772:     if( pLoop->wsFlags & WHERE_ONEROW ){",
          "1773:       pLevel->op = OP_Noop;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1803:     if( pIdx->pPartIdxWhere ){",
          "1804:       whereApplyPartialIndexConstraints(pIdx->pPartIdxWhere, iCur, pWC);",
          "1805:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9613c9f4a614e9e6c3144f8242c868aba8c32c06",
      "candidate_info": {
        "commit_hash": "9613c9f4a614e9e6c3144f8242c868aba8c32c06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9613c9f4a614e9e6c3144f8242c868aba8c32c06",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3misc.test"
        ],
        "message": "Fix the fts3/4 integrity-check command so that it works with \"ORDER=DESC\" tables. Fix for [8a6fa2bb].\n\nFossilOrigin-Name: 5863546df99abd1ad4ebcaba18dec647be4368e2c13ce0b28e48c8608d3e87ef",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3misc.test||test/fts3misc.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5171:               pCsr += sqlite3Fts3GetVarint(pCsr, &iCol);",
          "5172:             }else{",
          "5173:               pCsr += sqlite3Fts3GetVarint(pCsr, &iVal);",
          "5175:             }",
          "5176:           }else{",
          "5177:             iPos += (iVal - 2);",
          "",
          "[Removed Lines]",
          "5174:               iDocid += iVal;",
          "",
          "[Added Lines]",
          "5174:               if( p->bDescIdx ){",
          "5175:                 iDocid -= iVal;",
          "5176:               }else{",
          "5177:                 iDocid += iVal;",
          "5178:               }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ffd4c30620abe6ba38d82f3db934d18cc8468aaac4cd50a4e01be8910854d3f0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3misc.test||test/fts3misc.test": [
          "File: test/fts3misc.test -> test/fts3misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "238: }",
          "241: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: #-------------------------------------------------------------------------",
          "241: #",
          "242: reset_db",
          "243: do_execsql_test 7.0.1 {",
          "244:   CREATE VIRTUAL TABLE vt0 USING fts4(c0, order=DESC);",
          "245:   INSERT INTO vt0(c0) VALUES (0), (0);",
          "246: }",
          "247: do_execsql_test 7.0.2 {",
          "248:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "249: }",
          "250: reset_db",
          "251: do_execsql_test 7.1.1 {",
          "252:   CREATE VIRTUAL TABLE vt0 USING fts4(c0, order=ASC);",
          "253:   INSERT INTO vt0(c0) VALUES (0), (0);",
          "254: }",
          "255: do_execsql_test 7.1.2 {",
          "256:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "257: }",
          "259: do_execsql_test 7.2.1 {",
          "260:   CREATE VIRTUAL TABLE ft USING fts4(c0, c1, order=DESC, prefix=1);",
          "261:   INSERT INTO ft VALUES('a b c d', 'hello world');",
          "262:   INSERT INTO ft VALUES('negative', 'positive');",
          "263:   INSERT INTO ft VALUES('hello world', 'a b c d');",
          "264: }",
          "265: do_execsql_test 7.2.2 {",
          "266:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "267: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d4b25fa50f1109faefc756621584e234d2e92d7",
      "candidate_info": {
        "commit_hash": "1d4b25fa50f1109faefc756621584e234d2e92d7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1d4b25fa50f1109faefc756621584e234d2e92d7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Add missing VdbeCoverage() macros to new code in window.c.\n\nFossilOrigin-Name: 4f9b93e6cfa0b3b6ab8a126299c2b2a242f840453dc450e84d3df87576cf6cf8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c02f77b1b4d025d4243f883d6f3a2b3abcaf4944e0209f641b62c576415343dc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1313:   VdbeCoverageIf(v, eCond==0);",
          "1314:   VdbeCoverageIf(v, eCond==1);",
          "1315:   VdbeCoverageIf(v, eCond==2);",
          "1316:   sqlite3VdbeAddOp3(v, aOp[eCond], regZero, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1317:   VdbeCoverageNeverNullIf(v, eCond==0);",
          "1318:   VdbeCoverageNeverNullIf(v, eCond==1);",
          "1319:   VdbeCoverageNeverNullIf(v, eCond==2);",
          "1320:   sqlite3MayAbort(pParse);",
          "1321:   sqlite3VdbeAddOp2(v, OP_Halt, SQLITE_ERROR, OE_Abort);",
          "1322:   sqlite3VdbeAppendP4(v, (void*)azErr[eCond], P4_STATIC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1316:   VdbeCoverageIf(v, eCond==3);",
          "1317:   VdbeCoverageIf(v, eCond==4);",
          "1322:   VdbeCoverageNeverNullIf(v, eCond==3);",
          "1323:   VdbeCoverageNeverNullIf(v, eCond==4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1558:   }",
          "1560:   sqlite3VdbeAddOp3(v, OP_SeekGE, csr, lblBrk, pMWin->regStartRowid);",
          "1561:   addrNext = sqlite3VdbeCurrentAddr(v);",
          "1562:   sqlite3VdbeAddOp2(v, OP_Rowid, csr, regRowid);",
          "1563:   sqlite3VdbeAddOp3(v, OP_Gt, pMWin->regEndRowid, lblBrk, regRowid);",
          "1565:   if( pMWin->eExclude==TK_CURRENT ){",
          "1566:     sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, lblNext, regRowid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1565:   VdbeCoverage(v);",
          "1569:   VdbeCoverageNeverNull(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1587:   sqlite3VdbeResolveLabel(v, lblNext);",
          "1588:   sqlite3VdbeAddOp2(v, OP_Next, csr, addrNext);",
          "1589:   sqlite3VdbeJumpHere(v, addrNext-1);",
          "1590:   sqlite3VdbeJumpHere(v, addrNext+1);",
          "1591:   sqlite3ReleaseTempReg(pParse, regRowid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1595:   VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1815:   sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1816:   addrGe = sqlite3VdbeAddOp3(v, OP_Ge, regString, 0, reg1);",
          "1817:   sqlite3VdbeAddOp3(v, arith, regVal, reg1, reg1);",
          "1818:   sqlite3VdbeJumpHere(v, addrGe);",
          "1819:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1820:   sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "1822:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1823:   sqlite3ReleaseTempReg(pParse, reg2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1824:   VdbeCoverage(v);",
          "1829:   VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1876:       }",
          "1877:     }else{",
          "1878:       addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "1879:     }",
          "1880:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1888:       VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1922:   if( jumpOnEof ){",
          "1923:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+2);",
          "1924:     ret = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1925:   }else{",
          "1926:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+1+bPeer);",
          "1927:     if( bPeer ){",
          "1928:       addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1929:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1934:     VdbeCoverage(v);",
          "1938:     VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2476:   sqlite3VdbeAddOp2(v, OP_NewRowid, csrWrite, regRowid);",
          "2477:   sqlite3VdbeAddOp3(v, OP_Insert, csrWrite, regRecord, regRowid);",
          "2478:   addrNe = sqlite3VdbeAddOp3(v, OP_Ne, pMWin->regOne, 0, regRowid);",
          "2481:   s.regArg = windowInitAccum(pParse, pMWin);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2491:   VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2492:   if( pMWin->eStart==pMWin->eEnd && regStart ){",
          "2493:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2494:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2495:     windowAggFinal(&s, 0);",
          "2496:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2497:     windowReturnOneRow(&s);",
          "2498:     sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2499:     sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2508:     VdbeCoverage(v);",
          "2511:     VdbeCoverageNeverTaken(v);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2507:   if( pMWin->eStart!=TK_UNBOUNDED ){",
          "2508:     sqlite3VdbeAddOp2(v, OP_Rewind, s.start.csr, 1);",
          "2509:   }",
          "2510:   sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2511:   sqlite3VdbeAddOp2(v, OP_Rewind, s.end.csr, 1);",
          "2512:   if( regPeer && pOrderBy ){",
          "2513:     sqlite3VdbeAddOp3(v, OP_Copy, regNewPeer, regPeer, pOrderBy->nExpr-1);",
          "2514:     sqlite3VdbeAddOp3(v, OP_Copy, regPeer, s.start.reg, pOrderBy->nExpr-1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2524:     VdbeCoverageNeverTaken(v);",
          "2527:   VdbeCoverageNeverTaken(v);",
          "2529:   VdbeCoverageNeverTaken(v);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2561:           sqlite3VdbeResolveLabel(v, lbl);",
          "2562:         }",
          "2563:       }else{",
          "2565:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2566:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2567:         if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Removed Lines]",
          "2564:         if( regEnd ) addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "",
          "[Added Lines]",
          "2582:         if( regEnd ){",
          "2583:           addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2584:           VdbeCoverage(v);",
          "2585:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2580:   }",
          "2582:   addrEmpty = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2583:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2584:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2585:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2604:   VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b0b3a95d025430c83563ee390656901734f9988",
      "candidate_info": {
        "commit_hash": "0b0b3a95d025430c83563ee390656901734f9988",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0b0b3a95d025430c83563ee390656901734f9988",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/pragma.c",
          "src/sqliteInt.h"
        ],
        "message": "In the Table object, change the nVCol field to nNVCol - the number of non-virtual columns, as that is the quantity that we need most.\n\nFossilOrigin-Name: 4ad66af04a654d92711d2d056ce8f35cd21eac4b99fb8d78be1a314620b6d29e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/pragma.c||src/pragma.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 61b4459ae6a6cc182c11abbc8b1dd629f77beb088d7ccad5e563d8d4769056df",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "901:   int i;",
          "902:   i16 n;",
          "903:   assert( iCol<pTab->nCol );",
          "905:   for(i=0, n=0; i<iCol; i++){",
          "906:     if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) n++;",
          "907:   }",
          "",
          "[Removed Lines]",
          "904:   if( pTab->nVCol==0 ) return iCol;",
          "",
          "[Added Lines]",
          "904:   if( (pTab->tabFlags & TF_HasVirtual)==0 ) return iCol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1564:       goto generated_error;",
          "1565:     }",
          "1566:   }",
          "1568:   pCol->colFlags |= eType;",
          "1569:   assert( TF_HasVirtual==COLFLAG_VIRTUAL );",
          "1570:   assert( TF_HasStored==COLFLAG_STORED );",
          "",
          "[Removed Lines]",
          "1567:   if( eType==COLFLAG_VIRTUAL ) pTab->nVCol++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2127:   assert( !db->mallocFailed );",
          "2128:   p = pParse->pNewTable;",
          "2129:   if( p==0 ) return;",
          "2131:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
          "2132:     p->tabFlags |= TF_Shadow;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2129:   p->nNVCol = p->nCol;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2183:   if( p->tabFlags & (TF_HasVirtual|TF_HasStored) ){",
          "2184:     int ii;",
          "2185:     for(ii=0; ii<p->nCol; ii++){",
          "2187:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2188:                                     p->aCol[ii].pDflt, 0);",
          "2189:       }",
          "",
          "[Removed Lines]",
          "2186:       if( (p->aCol[ii].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "",
          "[Added Lines]",
          "2186:       u32 colFlags = p->aCol[ii].colFlags;",
          "2187:       if( (colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "2188:         if( colFlags & COLFLAG_VIRTUAL ){",
          "2189:           p->nNVCol--;",
          "2190:           assert( p->nNVCol>=0 );",
          "2191:         }",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   sqlite3TableLock(pParse, iDb, pTab->tnum,",
          "38:                    (opcode==OP_OpenWrite)?1:0, pTab->zName);",
          "39:   if( HasRowid(pTab) ){",
          "42:     VdbeComment((v, \"%s\", pTab->zName));",
          "43:   }else{",
          "44:     Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "",
          "[Removed Lines]",
          "40:     sqlite3VdbeAddOp4Int(v, opcode, iCur, pTab->tnum, iDb,",
          "41:                          pTab->nCol - pTab->nVCol);",
          "",
          "[Added Lines]",
          "40:     sqlite3VdbeAddOp4Int(v, opcode, iCur, pTab->tnum, iDb, pTab->nNVCol);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1934:   if( HasRowid(pTab) ){",
          "1935:     int regRec = aRegIdx[ix];",
          "1938:     sqlite3SetMakeRecordP5(v, pTab);",
          "1939:     if( !bAffinityDone ){",
          "1940:       sqlite3TableAffinity(v, pTab, 0);",
          "",
          "[Removed Lines]",
          "1936:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regNewData+1,",
          "1937:                       pTab->nCol-pTab->nVCol, regRec);",
          "",
          "[Added Lines]",
          "1935:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regNewData+1, pTab->nNVCol, regRec);",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1586:         loopTop = sqlite3VdbeAddOp2(v, OP_AddImm, 7, 1);",
          "1587:         if( !isQuick ){",
          "1590:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "1591:         }",
          "",
          "[Removed Lines]",
          "1589:           sqlite3VdbeAddOp3(v, OP_Column, iDataCur, pTab->nCol-pTab->nVCol-1,3);",
          "",
          "[Added Lines]",
          "1589:           sqlite3VdbeAddOp3(v, OP_Column, iDataCur, pTab->nNVCol-1,3);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "94ec92a1f7c3aef3be16e00d53c1b876e1cd832c",
      "candidate_info": {
        "commit_hash": "94ec92a1f7c3aef3be16e00d53c1b876e1cd832c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94ec92a1f7c3aef3be16e00d53c1b876e1cd832c",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix a problem with querying a corrupt fts3 database.\n\nFossilOrigin-Name: 65e50706a017751d72d0f9c7f575955194977decd0acf13aaca90c3cb925f20e",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2961:           }else{",
          "2962:             iDelta = iDocid - iPrev;",
          "2963:           }",
          "2965:           assert( nDoclist>0 || iDelta==iDocid );",
          "2967:           nByte = sqlite3Fts3VarintLen(iDelta) + (isRequirePos?nList+1:0);",
          "",
          "[Removed Lines]",
          "2964:           assert( iDelta>0 || (nDoclist==0 && iDelta==iDocid) );",
          "",
          "[Added Lines]",
          "2964:           if( iDelta<=0 && (nDoclist>0 || iDelta!=iDocid) ){",
          "2965:             return FTS_CORRUPT_VTAB;",
          "2966:           }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ddc3697efd61830fad55c6bf7f9115f4a7f53e08838eba5a82e1406c7a721665",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "557:   SELECT matchinfo(t1,'y') FROM t1 WHERE t1 MATCH 'e*';",
          "558: } {1 {database disk image is malformed}}",
          "560: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560: #-------------------------------------------------------------------------",
          "561: reset_db",
          "562: do_test 8.0 {",
          "563:   sqlite3 db {}",
          "564:   db deserialize [decode_hexdb {",
          "565: | size 28672 pagesize 4096 filename crash-7948058d822acb.db",
          "566: | page 1 offset 0",
          "567: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "568: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "569: |     32: 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 04   ................",
          "570: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "571: |     96: 00 00 00 00 0d 0e ef 00 07 0d 4d 00 0f bd 0f 5f   ..........M...._",
          "572: |    112: 0e f7 0e 06 0e bc 0d a4 0d 4d 00 00 00 00 00 00   .........M......",
          "573: |   3392: 00 00 00 00 00 00 00 00 00 00 00 00 00 55 07 07   .............U..",
          "574: |   3408: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 73 74   ......tablet1_st",
          "575: |   3424: 61 74 74 31 5f 73 74 61 74 07 43 52 45 41 54 45   att1_stat.CREATE",
          "576: |   3440: 20 54 41 42 4c 45 20 27 74 31 5f 73 74 61 74 27    TABLE 't1_stat'",
          "577: |   3456: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "578: |   3472: 41 52 59 20 4b 45 59 2c 20 76 61 6c 75 65 20 42   ARY KEY, value B",
          "579: |   3488: 4c 4f 42 29 60 06 07 17 21 21 01 81 0b 74 61 62   LOB)`...!!...tab",
          "580: |   3504: 6c 65 74 31 5f 64 6f 63 73 69 7a 65 74 31 5f 64   let1_docsizet1_d",
          "581: |   3520: 6f 63 73 69 7a 65 06 43 52 45 41 54 45 20 54 41   ocsize.CREATE TA",
          "582: |   3536: 42 4c 45 20 27 74 31 5f 64 6f 63 73 69 7a 65 27   BLE 't1_docsize'",
          "583: |   3552: 28 64 6f 63 69 64 20 49 4e 54 45 47 45 52 20 50   (docid INTEGER P",
          "584: |   3568: 52 49 4d 41 52 59 20 4b 45 59 2c 20 73 69 7a 65   RIMARY KEY, size",
          "585: |   3584: 20 42 4c 4f 42 29 81 33 04 07 17 1f 1f 01 82 35    BLOB).3.......5",
          "586: |   3600: 74 61 62 6c 65 74 31 5f 73 65 67 64 69 72 74 31   tablet1_segdirt1",
          "587: |   3616: 5f 73 65 67 64 69 72 04 43 52 45 41 54 45 20 54   _segdir.CREATE T",
          "588: |   3632: 41 42 4c 45 20 27 74 31 5f 73 65 67 64 69 72 27   ABLE 't1_segdir'",
          "589: |   3648: 28 6c 65 76 65 6c 20 49 4e 54 45 47 45 52 2c 69   (level INTEGER,i",
          "590: |   3664: 64 78 20 49 4e 54 45 47 45 52 2c 73 74 61 72 74   dx INTEGER,start",
          "591: |   3680: 5f 62 6c 6f 63 6b 20 49 4e 54 45 47 45 52 2c 6c   _block INTEGER,l",
          "592: |   3696: 65 61 76 65 73 5f 65 6e 64 5f 62 6c 6f 63 6b 20   eaves_end_block",
          "593: |   3712: 49 4e 54 45 47 45 52 2c 65 6e 64 5f 62 6c 6f 63   INTEGER,end_bloc",
          "594: |   3728: 6b 20 49 4e 54 45 47 45 52 2c 72 6f 6f 74 20 42   k INTEGER,root B",
          "595: |   3744: 4c 4f 42 2c 50 52 49 4d 41 52 59 20 4b 45 59 28   LOB,PRIMARY KEY(",
          "596: |   3760: 6c 65 76 65 6c 2c 20 69 64 78 29 29 31 05 06 17   level, idx))1...",
          "597: |   3776: 45 1f 01 00 69 6e 64 65 78 73 71 6c 69 74 65 5f   E...indexsqlite_",
          "598: |   3792: 61 75 74 6f 69 6e 64 65 78 5f 74 31 5f 73 65 67   autoindex_t1_seg",
          "599: |   3808: 64 69 72 5f 31 74 31 5f 73 65 67 64 69 72 05 00   dir_1t1_segdir..",
          "600: |   3824: 00 00 08 00 00 00 00 66 03 07 17 23 23 01 81 13   .......f...##...",
          "601: |   3840: 74 61 62 6c 65 74 31 5f 73 65 67 6d 65 6e 74 73   tablet1_segments",
          "602: |   3856: 74 31 5f 73 65 67 6d 65 6e 74 73 03 43 52 45 41   t1_segments.CREA",
          "603: |   3872: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 73 65 67   TE TABLE 't1_seg",
          "604: |   3888: 6d 65 6e 74 73 27 28 62 6c 6f 63 6b 69 64 20 49   ments'(blockid I",
          "605: |   3904: 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b   NTEGER PRIMARY K",
          "606: |   3920: 45 59 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42 29 5c   EY, block BLOB).",
          "607: |   3936: 02 07 17 21 21 01 81 03 74 61 62 6c 65 74 31 5f   ...!!...tablet1_",
          "608: |   3952: 63 6f 6e 74 65 6e 74 74 31 5f 63 6f 6e 74 65 6e   contentt1_conten",
          "609: |   3968: 74 02 43 52 45 41 54 45 20 54 41 42 4c 45 20 27   t.CREATE TABLE '",
          "610: |   3984: 74 31 5f 63 6f 6e 74 65 6e 74 27 28 64 6f 63 69   t1_content'(doci",
          "611: |   4000: 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52   d INTEGER PRIMAR",
          "612: |   4016: 59 20 4b 45 59 2c 20 27 63 30 61 27 29 41 01 06   Y KEY, 'c0a')A..",
          "613: |   4032: 17 11 11 08 71 74 61 62 6c 65 74 31 74 31 43 52   ....qtablet1t1CR",
          "614: |   4048: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "615: |   4064: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 34   LE t1 USING fts4",
          "616: |   4080: 28 61 2c 70 72 65 66 69 78 3d 27 31 2c 32 27 29   (a,prefix='1,2')",
          "617: | page 2 offset 4096",
          "618: |      0: 0d 00 00 00 08 0e 1f 00 0f c4 0f 7c 0f 34 0f 07   ...........|.4..",
          "619: |     16: 0e c3 0e 97 0e 63 0e 1f 00 00 00 00 00 00 00 00   .....c..........",
          "620: |   3600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42   ...............B",
          "621: |   3616: 08 04 00 81 09 73 75 6e 74 20 69 6e 20 63 75 6c   .....sunt in cul",
          "622: |   3632: 70 61 20 71 75 69 20 6f 66 66 69 63 69 61 20 64   pa qui officia d",
          "623: |   3648: 65 73 65 72 75 6e 74 20 6d 6f 6c 6c 69 74 20 61   eserunt mollit a",
          "624: |   3664: 6e 69 6d 20 69 64 20 65 73 74 20 6c 61 62 6f 72   nim id est labor",
          "625: |   3680: 75 6d 2e 32 07 03 00 6b 45 78 63 65 70 74 65 75   um.2...kExcepteu",
          "626: |   3696: 72 20 73 69 6e 74 20 6f 63 63 61 65 63 67 42 06   r sint occaecgB.",
          "627: |   3712: 37 57 06 96 46 17 46 17 42 06 e6 f6 e2 07 07 26   7W..F.F.B......&",
          "628: |   3728: f6 96 46 56 e7 42 c2 a0 60 30 05 b6 36 96 c6 c7   ..FV.B..`0..6...",
          "629: |   3744: 56 d2 06 46 f6 c6 f7 26 52 06 57 52 06 67 56 7c   V..F...&R.WR.gV|",
          "630: |   3760: 65 3f 04 20 6e 75 6c 6c 61 20 70 61 72 69 61 74   e?. nulla pariat",
          "631: |   3776: 75 72 2e 42 05 04 00 81 09 44 75 69 73 20 61 75   ur.B.....Duis au",
          "632: |   3792: 74 65 20 69 72 75 72 65 20 64 6f 6c 6f 72 20 69   te irure dolor i",
          "633: |   3808: 6e 20 72 65 70 72 65 68 65 6e 64 65 72 69 74 20   n reprehenderit",
          "634: |   3824: 69 6e 20 76 6f 6c 75 70 74 61 74 65 20 76 65 6c   in voluptate vel",
          "635: |   3840: 69 74 20 65 73 73 65 2b 04 03 00 5d 6e 69 73 69   it esse+...]nisi",
          "636: |   3856: 20 75 74 20 61 7c 69 71 75 69 70 20 65 78 20 65    ut a|iquip ex e",
          "637: |   3872: 61 20 63 6f 6d 6d 6f 64 6f 20 63 6f 6e 73 65 71   a commodo conseq",
          "638: |   3888: 75 61 74 2e 46 03 04 00 81 11 55 74 20 65 6e 69   uat.F.....Ut eni",
          "639: |   3904: 6d 20 61 64 20 6d 69 6e 69 6d 20 76 65 6e 69 61   m ad minim venia",
          "640: |   3920: 6d 2c 20 71 75 69 73 20 6e 6f 73 74 72 75 64 20   m, quis nostrud",
          "641: |   3936: 65 78 65 72 63 69 74 61 74 69 6f 6e 20 75 6c 6c   exercitation ull",
          "642: |   3952: 61 6d 63 6f 20 6c 61 62 6f 72 69 73 46 02 04 00   amco laborisF...",
          "643: |   3968: 81 11 73 65 64 20 64 6f 20 65 69 75 73 6d 6f 64   ..sed do eiusmod",
          "644: |   3984: 20 74 65 6d 70 6f 72 20 69 6e 63 69 64 69 64 75    tempor incididu",
          "645: |   4000: 6e 74 20 75 74 20 6c 61 62 6f 72 65 20 65 74 20   nt ut labore et",
          "646: |   4016: 64 6f 6c 6f 72 65 20 6d 61 67 6e 61 20 61 6c 69   dolore magna ali",
          "647: |   4032: 71 75 61 2e 3a 01 03 00 7b 4c 6f 72 65 6d 20 69   qua.:....Lorem i",
          "648: |   4048: 70 73 75 6d 20 64 6f 6c 6f 72 20 73 69 74 20 61   psum dolor sit a",
          "649: |   4064: 6d 65 74 2c 20 63 6f 6e 73 65 63 74 65 74 75 72   met, consectetur",
          "650: |   4080: 20 61 64 69 70 69 73 63 69 6e 67 20 65 6c 69 74    adipiscing elit",
          "651: | page 3 offset 8192",
          "652: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "653: | page 4 offset 12288",
          "654: |      0: 0d 00 00 00 03 0a a6 00 0d 57 0c 4a 0a a6 00 00   .........W.J....",
          "655: |   2720: 00 00 00 00 00 00 83 21 03 08 02 08 08 08 17 86   .......!........",
          "656: |   2736: 30 08 00 30 20 34 30 32 00 02 61 64 06 01 08 00   0..0 402..ad....",
          "657: |   2752: 02 04 00 01 01 6c 06 02 0c 00 02 04 00 01 01 6d   .....l.........m",
          "658: |   2768: 03 01 06 00 01 01 6e 03 08 00 00 91 01 75 03 05   ......n......u..",
          "659: |   2784: 03 00 00 02 63 69 03 06 02 00 01 01 6f 07 01 07   ....ci......o...",
          "660: |   2800: 00 03 07 03 00 01 01 75 06 07 05 00 01 04 00 00   .......u........",
          "661: |   2816: 02 64 65 03 08 07 00 01 01 6f 0d 01 04 00 01 03   .de......o......",
          "662: |   2832: 09 00 03 05 00 01 03 00 01 01 75 03 05 02 00 00   ..........u.....",
          "663: |   2848: 02 65 61 03 04 06 00 01 01 69 03 02 04 00 01 01   .ea......i......",
          "664: |   2864: 6c 03 01 09 00 01 01 6e 30 03 03 00 01 01 73 06   l......n0.....s.",
          "665: |   2880: 05 0b 00 03 0b 00 01 01 74 03 02 09 00 01 01 75   ........t......u",
          "666: |   2896: 03 06 04 00 01 01 78 09 03 09 00 01 05 00 03 02   ......x.........",
          "667: |   2912: 00 00 02 66 75 03 06 05 00 00 02 69 64 03 08 0a   ...fu......id...",
          "668: |   2928: 00 01 01 6e 0a 02 06 00 03 06 04 00 03 03 00 01   ...n............",
          "669: |   2944: 01 70 03 01 03 00 01 01 72 03 05 04 00 00 02 6c   .p......r......l",
          "670: |   2960: 61 09 02 08 00 01 0b 00 05 0c 00 01 01 6f 03 01   a............o..",
          "671: |   2976: 02 00 00 02 6d 61 03 02 0b 00 01 01 69 03 03 05   ....ma......i...",
          "672: |   2992: 00 01 01 6f 03 08 08 00 00 02 6e 69 03 04 02 00   ...o......ni....",
          "673: |   3008: 01 01 6f 06 03 08 00 04 06 00 01 01 75 03 06 06   ..o.........u...",
          "674: |   3024: 00 00 02 6f 63 03 07 04 00 01 01 66 03 08 06 00   ...oc......f....",
          "675: |   3040: 00 02 70 61 03 06 07 00 01 01 72 03 07 07 00 00   ..pa......r.....",
          "676: |   3056: 02 71 75 06 03 07 00 05 05 00 00 02 72 65 03 05   .qu.........re..",
          "677: |   3072: 07 00 00 02 73 65 03 02 02 00 01 01 69 06 01 05   ....se......i...",
          "678: |   3088: 00 06 03 00 01 01 75 03 08 02 00 00 02 74 65 03   ......u......te.",
          "679: |   3104: 02 05 00 00 02 75 6c 03 03 0a 00 01 01 74 09 02   .....ul......t..",
          "680: |   3120: 07 00 01 02 00 01 03 00 00 02 76 65 06 03 06 00   ..........ve....",
          "681: |   3136: 02 0a 00 01 01 6f 03 05 09 00 82 0a 02 08 02 08   .....o..........",
          "682: |   3152: 08 08 17 84 02 04 00 30 20 32 35 31 00 01 61 13   .......0 251..a.",
          "683: |   3168: 01 06 04 00 01 0c 00 01 04 00 01 04 00 01 03 00   ................",
          "684: |   3184: 03 09 00 00 01 63 10 01 07 00 03 07 03 00 02 02   .....c..........",
          "685: |   3200: 00 01 05 00 01 04 00 00 01 64 11 01 04 00 01 03   .........d......",
          "686: |   3216: 09 00 03 02 05 00 01 03 00 02 07 00 00 01 65 1b   ..............e.",
          "687: |   3232: 01 09 00 01 04 07 00 01 03 00 80 00 15 03 00 01   ................",
          "688: |   3248: 0b 00 01 04 00 01 02 00 01 0b 00 00 01 66 03 06   .............f..",
          "689: |   3264: 05 00 00 01 69 0f 01 03 00 01 06 00 03 04 04 04   ....i...........",
          "690: |   3280: 00 03 03 09 00 00 01 6c 0c 01 02 00 01 08 00 01   .......l........",
          "691: |   3296: 0b 00 05 0c 00 00 01 6d 09 02 0b 00 01 05 00 05   .......m........",
          "692: |   3312: 08 00 00 01 6e 0c 03 08 00 01 02 00 02 06 00 01   ....n...........",
          "693: |   3328: 06 00 00 01 6f 06 07 04 00 01 06 00 00 01 70 06   ....o.........p.",
          "694: |   3344: 06 07 00 01 07 00 00 01 71 06 03 07 00 05 05 00   ........q.......",
          "695: |   3360: 00 01 72 03 05 07 00 00 01 73 0c 01 05 00 01 02   ..r......s......",
          "696: |   3376: 00 05 03 00 01 02 00 00 01 74 03 02 05 00 00 01   .........t......",
          "697: |   3392: 75 0a 02 07 00 01 02 0a 00 01 03 00 00 01 76 07   u.............v.",
          "698: |   3408: 03 06 00 02 09 03 00 85 26 01 08 08 08 08 08 17   ........&.......",
          "699: |   3424: 8a 3e 30 20 36 36 35 00 02 61 64 03 03 04 00 02   .>0 665..ad.....",
          "700: |   3440: 08 69 70 69 73 63 69 6e 67 03 01 08 00 01 05 6c   .ipiscing......l",
          "701: |   3456: 69 71 75 61 03 02 0c 00 05 02 69 70 03 04 04 00   iqua......ip....",
          "702: |   3472: 01 03 6d 65 74 03 01 06 00 01 03 6e 69 6d 03 08   ..met......nim..",
          "703: |   3488: 09 00 01 03 75 74 65 03 05 03 00 00 06 63 69 6c   ....ute......cil",
          "704: |   3504: 6c 75 6d 03 06 02 00 01 06 6f 6d 6d 6f 64 6f 03   lum......ommodo.",
          "705: |   3520: 04 07 00 02 09 6e 73 65 63 74 65 74 75 72 03 01   .....nsectetur..",
          "706: |   3536: 07 00 05 04 71 75 61 74 03 04 08 00 01 04 75 6c   ....quat......ul",
          "707: |   3552: 70 61 03 08 04 00 02 07 70 69 64 61 74 61 74 03   pa......pidatat.",
          "708: |   3568: 07 05 00 00 08 64 65 73 65 72 75 6e 74 03 08 07   .....deserunt...",
          "709: |   3584: 00 01 01 6f 03 02 03 00 02 03 6c 6f 72 06 01 04   ...o......lor...",
          "710: |   3600: 00 40 05 00 05 01 65 06 02 0a 00 04 03 00 01 03   .@....e.........",
          "711: |   3616: 75 69 73 03 05 02 00 00 02 65 61 03 04 06 00 01   uis......ea.....",
          "712: |   3632: 06 69 75 73 6d 6f 64 03 02 04 00 01 03 6c 69 74   .iusmod......lit",
          "713: |   3648: 03 01 09 00 01 03 6e 69 6d 03 03 03 00 01 03 73   ......nim......s",
          "714: |   3664: 73 65 03 05 0b 00 02 01 74 03 08 0b 00 01 01 74   se......t......t",
          "715: |   3680: 03 02 09 00 01 01 75 03 06 04 00 01 01 78 03 04   ......u......x..",
          "716: |   3696: 05 00 02 07 63 65 70 74 65 75 72 03 07 02 00 02   ....cepteur.....",
          "717: |   3712: 0a 65 72 63 69 74 61 74 69 6f 6e 03 03 09 00 00   .ercitation.....",
          "718: |   3728: 06 66 75 67 69 61 74 03 06 05 00 00 02 69 64 03   .fugiat......id.",
          "719: |   3744: 08 0a 00 01 01 6e 07 05 06 04 00 03 03 00 02 08   .....n..........",
          "720: |   3760: 63 69 64 69 64 75 6e 74 03 02 06 00 01 04 70 73   cididunt......ps",
          "721: |   3776: 75 6d 03 01 03 00 01 04 72 75 72 65 03 05 04 00   um......rure....",
          "722: |   3792: 00 06 6c 61 62 6f 72 65 03 02 08 00 05 02 69 73   ..labore......is",
          "723: |   3808: 03 03 0b 00 05 02 75 6d 03 08 0c 00 01 04 6f 72   ......um......or",
          "724: |   3824: 65 6d 03 01 02 00 00 05 6d 61 67 6e 61 03 02 0b   em......magna...",
          "725: |   3840: 00 01 04 69 6e 69 6d 03 03 05 00 01 05 6f 6c 6c   ...inim......oll",
          "726: |   3856: 69 74 03 08 08 00 00 04 6e 69 73 69 03 04 02 00   it......nisi....",
          "727: |   3872: 01 02 6f 6e 03 07 06 00 02 05 73 74 72 75 64 03   ..on......strud.",
          "728: |   3888: 03 08 00 01 04 75 6c 6c 61 03 06 06 00 00 08 6f   .....ulla......o",
          "729: |   3904: 63 63 61 65 63 61 74 03 07 04 00 01 06 66 66 69   ccaecat......ffi",
          "730: |   3920: 63 69 61 03 08 06 00 00 08 70 61 72 69 61 74 75   cia......pariatu",
          "731: |   3936: 72 03 06 07 00 01 07 72 6f 69 64 65 6e 74 03 07   r......roident..",
          "732: |   3952: 07 00 00 03 71 75 69 03 08 05 00 03 01 73 03 03   ....qui......s..",
          "733: |   3968: 07 00 00 0d 72 65 70 72 65 68 65 6e 64 65 72 69   ....reprehenderi",
          "734: |   3984: 74 03 05 07 00 00 03 73 65 64 03 02 02 00 01 03   t......sed......",
          "735: |   4000: 69 6e 74 03 07 03 00 02 01 74 03 01 05 00 01 03   int......t......",
          "736: |   4016: 75 6e 74 03 08 02 00 00 06 74 65 6d 70 6f 72 03   unt......tempor.",
          "737: |   4032: 02 05 00 00 07 75 6c 6c 61 6d 63 6f 03 03 0a 00   .....ullamco....",
          "738: |   4048: 01 01 74 09 02 07 00 01 02 00 01 03 00 00 05 76   ..t............v",
          "739: |   4064: 65 6c 69 74 03 05 0a 00 02 04 6e 69 61 6d 03 03   elit......niam..",
          "740: |   4080: 06 00 01 08 6f 6c 75 70 74 61 74 65 03 05 09 00   ....oluptate....",
          "741: | page 5 offset 16384",
          "742: |      0: 0a 00 00 00 03 0f eb 00 0f fb 0f f3 0f eb 00 00   ................",
          "743: |   4064: 00 00 00 00 00 00 00 00 00 00 00 07 04 02 08 01   ................",
          "744: |   4080: 08 00 03 07 04 02 08 01 04 00 02 04 04 08 08 09   ................",
          "745: | page 6 offset 20480",
          "746: |      0: 0d 00 00 00 08 0f d0 00 0f fa 0f f4 0f ee 0f e8   ................",
          "747: |     16: 0f e2 0f dc 0f d6 0f d0 00 00 00 00 00 00 00 00   ................",
          "748: |   4048: 04 08 03 00 0e 0b 04 07 03 00 0e 06 04 06 03 00   ................",
          "749: |   4064: 0e 06 04 05 03 00 0e 0a 04 04 03 00 0e 07 04 03   ................",
          "750: |   4080: 03 00 0e 0a 04 02 03 00 0e 0b 04 01 03 00 0e 08   ................",
          "751: | page 7 offset 24576",
          "752: |      0: 0d 00 00 00 01 0f f7 00 0f f7 00 00 00 00 00 00   ................",
          "753: |   4080: 00 00 00 00 00 00 00 07 00 03 00 14 08 45 b5 03   .............E..",
          "754: | end crash-7948058d822acb.db",
          "755: }]} {}",
          "757: do_catchsql_test 8.1 {",
          "758:   SELECT matchinfo(t1,'x') FROM t1 WHERE t1 MATCH 'e*';",
          "759: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}