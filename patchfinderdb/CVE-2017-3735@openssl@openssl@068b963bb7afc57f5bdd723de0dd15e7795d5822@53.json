{
  "cve_id": "CVE-2017-3735",
  "cve_desc": "While parsing an IPAddressFamily extension in an X.509 certificate, it is possible to do a one-byte overread. This would result in an incorrect text display of the certificate. This bug has been present since 2006 and is present in all versions of OpenSSL before 1.0.2m and 1.1.0g.",
  "repo": "openssl/openssl",
  "patch_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
  "patch_info": {
    "commit_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "files": [
      "crypto/x509v3/v3_addr.c"
    ],
    "message": "Avoid out-of-bounds read\n\nFixes CVE 2017-3735\n\nReviewed-by: Kurt Roeckx <kurt@roeckx.be>\n(Merged from https://github.com/openssl/openssl/pull/4276)\n\n(cherry picked from commit b23171744b01e473ebbfd6edad70c1c3825ffbcd)",
    "before_after_code_files": [
      "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c"
    ]
  },
  "patch_diff": {
    "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c": [
      "File: crypto/x509v3/v3_addr.c -> crypto/x509v3/v3_addr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: unsigned int X509v3_addr_get_afi(const IPAddressFamily *f)",
      "86: {",
      "91: }",
      "",
      "[Removed Lines]",
      "87:     return ((f != NULL &&",
      "88:              f->addressFamily != NULL && f->addressFamily->data != NULL)",
      "89:             ? ((f->addressFamily->data[0] << 8) | (f->addressFamily->data[1]))",
      "90:             : 0);",
      "",
      "[Added Lines]",
      "87:     if (f == NULL",
      "88:             || f->addressFamily == NULL",
      "89:             || f->addressFamily->data == NULL",
      "90:             || f->addressFamily->length < 2)",
      "91:         return 0;",
      "92:     return (f->addressFamily->data[0] << 8) | f->addressFamily->data[1];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d25cb36b6213d9058e9acdb24a84331b93111125",
      "candidate_info": {
        "commit_hash": "d25cb36b6213d9058e9acdb24a84331b93111125",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d25cb36b6213d9058e9acdb24a84331b93111125",
        "files": [
          "apps/CA.pl.in"
        ],
        "message": "Adjusted Argument Indices CLA: trivial\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4835)\n\n(cherry picked from commit 1e2804f25c80136c33f3508adb54b24106b6b6f6)",
        "before_after_code_files": [
          "apps/CA.pl.in||apps/CA.pl.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/CA.pl.in||apps/CA.pl.in": [
          "File: apps/CA.pl.in -> apps/CA.pl.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:         print \"CA certificate is in ${CATOP}/$CACERT\\n\" if $RET == 0;",
          "146:     }",
          "147: } elsif ($WHAT eq '-pkcs12' ) {",
          "149:     $cname = \"My Certificate\" unless defined $cname;",
          "150:     $RET = run(\"$PKCS12 -in $NEWCERT -inkey $NEWKEY\"",
          "151:             . \" -certfile ${CATOP}/$CACERT\"",
          "",
          "[Removed Lines]",
          "148:     my $cname = $ARGV[1];",
          "",
          "[Added Lines]",
          "148:     my $cname = $ARGV[0];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:     $RET = run(\"$CA -gencrl -out ${CATOP}/crl/$CACRL\");",
          "179:     print \"Generated CRL is in ${CATOP}/crl/$CACRL\\n\" if $RET == 0;",
          "180: } elsif ($WHAT eq '-revoke' ) {",
          "182:     if (!defined $cname) {",
          "183:         print \"Certificate filename is required; reason optional.\\n\";",
          "184:         exit 1;",
          "185:     }",
          "187:     $reason = \" -crl_reason $reason\"",
          "188:         if defined $reason && crl_reason_ok($reason);",
          "189:     $RET = run(\"$CA -revoke \\\"$cname\\\"\" . $reason);",
          "",
          "[Removed Lines]",
          "181:     my $cname = $ARGV[1];",
          "186:     my $reason = $ARGV[2];",
          "",
          "[Added Lines]",
          "181:     my $cname = $ARGV[0];",
          "186:     my $reason = $ARGV[1];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0c262644eab897b51faf1fa013008052c3754c2",
      "candidate_info": {
        "commit_hash": "a0c262644eab897b51faf1fa013008052c3754c2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a0c262644eab897b51faf1fa013008052c3754c2",
        "files": [
          "engines/afalg/e_afalg.c"
        ],
        "message": "afalg: Use eventfd2 syscall instead of eventfd\n\nThe eventfd syscall is deprecated and is not available on aarch64, causing\nbuild to fail:\n\n    engines/e_afalg.c: In function 'eventfd':\n    engines/e_afalg.c:108:20: error: '__NR_eventfd' undeclared (first use in this function)\n         return syscall(__NR_eventfd, n);\n                        ^\n\nInstead, switch to the newer eventfd2 syscall, which is supposed to be\nsupported by all architectures.\n\nThis kind of issues would be avoided by simply using the eventfd(2)\nwrapper from the libc, but there must be subtle reasons not to...\n\nTested on a aarch64 system running OpenSUSE Leap 42.1 (gcc118 from\nhttps://cfarm.tetaneutral.net/machines/list/ ) and also cross-compiling\nfor aarch64 with LEDE (kernel 4.9).\n\nThis properly fixes #1685.\n\nCLA: trivial\nFixes: 7f458a48 (\"ALG: Add AFALG engine\")\nSigned-off-by: Baptiste Jonglez <git@bitsofnetworks.org>\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4618)",
        "before_after_code_files": [
          "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c": [
          "File: engines/afalg/e_afalg.c -> engines/afalg/e_afalg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: static ossl_inline int eventfd(int n)",
          "109: {",
          "111: }",
          "113: static ossl_inline int io_destroy(aio_context_t ctx)",
          "",
          "[Removed Lines]",
          "110:     return syscall(__NR_eventfd, n);",
          "",
          "[Added Lines]",
          "110:     return syscall(__NR_eventfd2, n, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab6abae63c701d6d3a5760d881b9bee235620e4b",
      "candidate_info": {
        "commit_hash": "ab6abae63c701d6d3a5760d881b9bee235620e4b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ab6abae63c701d6d3a5760d881b9bee235620e4b",
        "files": [
          "crypto/modes/ocb128.c"
        ],
        "message": "modes/ocb128.c: address undefined behaviour warning.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3526)\n\n(cherry picked from commit 14bb100b6cc4c875473af6659c8368198e898050)",
        "before_after_code_files": [
          "crypto/modes/ocb128.c||crypto/modes/ocb128.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/modes/ocb128.c||crypto/modes/ocb128.c": [
          "File: crypto/modes/ocb128.c -> crypto/modes/ocb128.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "274: {",
          "275:     u64 i, all_num_blocks;",
          "276:     size_t num_blocks, last_len;",
          "281:     num_blocks = len / 16;",
          "",
          "[Removed Lines]",
          "277:     OCB_BLOCK tmp1;",
          "278:     OCB_BLOCK tmp2;",
          "",
          "[Added Lines]",
          "277:     OCB_BLOCK tmp;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "285:     for (i = ctx->blocks_hashed + 1; i <= all_num_blocks; i++) {",
          "286:         OCB_BLOCK *lookup;",
          "290:         lookup = ocb_lookup_l(ctx, ocb_ntz(i));",
          "",
          "[Removed Lines]",
          "287:         OCB_BLOCK *aad_block;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "292:             return 0;",
          "293:         ocb_block16_xor(&ctx->offset_aad, lookup, &ctx->offset_aad);",
          "300:     }",
          "",
          "[Removed Lines]",
          "296:         aad_block = (OCB_BLOCK *)(aad + ((i - ctx->blocks_hashed - 1) * 16));",
          "297:         ocb_block16_xor_misaligned(&ctx->offset_aad, aad_block, &tmp1);",
          "298:         ctx->encrypt(tmp1.c, tmp2.c, ctx->keyenc);",
          "299:         ocb_block16_xor(&ctx->sum, &tmp2, &ctx->sum);",
          "",
          "[Added Lines]",
          "293:         memcpy(tmp.c, aad, 16);",
          "294:         aad += 16;",
          "297:         ocb_block16_xor(&ctx->offset_aad, &tmp, &tmp);",
          "298:         ctx->encrypt(tmp.c, tmp.c, ctx->keyenc);",
          "299:         ocb_block16_xor(&tmp, &ctx->sum, &ctx->sum);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "310:         ocb_block16_xor(&ctx->offset_aad, &ctx->l_star, &ctx->offset_aad);",
          "321:     }",
          "323:     ctx->blocks_hashed = all_num_blocks;",
          "",
          "[Removed Lines]",
          "313:         memset(&tmp1, 0, 16);",
          "314:         memcpy(&tmp1, aad + (num_blocks * 16), last_len);",
          "315:         ((unsigned char *)&tmp1)[last_len] = 0x80;",
          "316:         ocb_block16_xor(&ctx->offset_aad, &tmp1, &tmp2);",
          "319:         ctx->encrypt(tmp2.c, tmp1.c, ctx->keyenc);",
          "320:         ocb_block16_xor(&ctx->sum, &tmp1, &ctx->sum);",
          "",
          "[Added Lines]",
          "313:         memset(tmp.c, 0, 16);",
          "314:         memcpy(tmp.c, aad, last_len);",
          "315:         tmp.c[last_len] = 0x80;",
          "316:         ocb_block16_xor(&ctx->offset_aad, &tmp, &tmp);",
          "319:         ctx->encrypt(tmp.c, tmp.c, ctx->keyenc);",
          "320:         ocb_block16_xor(&tmp, &ctx->sum, &ctx->sum);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "335: {",
          "336:     u64 i, all_num_blocks;",
          "337:     size_t num_blocks, last_len;",
          "",
          "[Removed Lines]",
          "338:     OCB_BLOCK tmp1;",
          "339:     OCB_BLOCK tmp2;",
          "340:     OCB_BLOCK pad;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "367:         for (i = ctx->blocks_processed + 1; i <= all_num_blocks; i++) {",
          "368:             OCB_BLOCK *lookup;",
          "373:             lookup = ocb_lookup_l(ctx, ocb_ntz(i));",
          "",
          "[Removed Lines]",
          "369:             OCB_BLOCK *inblock;",
          "370:             OCB_BLOCK *outblock;",
          "",
          "[Added Lines]",
          "366:             OCB_BLOCK tmp;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "375:                 return 0;",
          "376:             ocb_block16_xor(&ctx->offset, lookup, &ctx->offset);",
          "388:         }",
          "389:     }",
          "",
          "[Removed Lines]",
          "379:             inblock =",
          "380:                 (OCB_BLOCK *)(in + ((i - ctx->blocks_processed - 1) * 16));",
          "381:             ocb_block16_xor_misaligned(&ctx->offset, inblock, &tmp1);",
          "383:             ocb_block16_xor_misaligned(&ctx->checksum, inblock, &ctx->checksum);",
          "384:             ctx->encrypt(tmp1.c, tmp2.c, ctx->keyenc);",
          "385:             outblock =",
          "386:                 (OCB_BLOCK *)(out + ((i - ctx->blocks_processed - 1) * 16));",
          "387:             ocb_block16_xor_misaligned(&ctx->offset, &tmp2, outblock);",
          "",
          "[Added Lines]",
          "374:             memcpy(tmp.c, in, 16);",
          "375:             in += 16;",
          "378:             ocb_block16_xor(&tmp, &ctx->checksum, &ctx->checksum);",
          "381:             ocb_block16_xor(&ctx->offset, &tmp, &tmp);",
          "382:             ctx->encrypt(tmp.c, tmp.c, ctx->keyenc);",
          "383:             ocb_block16_xor(&ctx->offset, &tmp, &tmp);",
          "385:             memcpy(out, tmp.c, 16);",
          "386:             out += 16;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "395:     last_len = len % 16;",
          "397:     if (last_len > 0) {",
          "399:         ocb_block16_xor(&ctx->offset, &ctx->l_star, &ctx->offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:         OCB_BLOCK pad;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "402:         ctx->encrypt(ctx->offset.c, pad.c, ctx->keyenc);",
          "413:     }",
          "415:     ctx->blocks_processed = all_num_blocks;",
          "",
          "[Removed Lines]",
          "405:         ocb_block_xor(in + (len / 16) * 16, (unsigned char *)&pad, last_len,",
          "406:                       out + (num_blocks * 16));",
          "409:         memset(&tmp1, 0, 16);",
          "410:         memcpy(&tmp1, in + (len / 16) * 16, last_len);",
          "411:         ((unsigned char *)(&tmp1))[last_len] = 0x80;",
          "412:         ocb_block16_xor(&ctx->checksum, &tmp1, &ctx->checksum);",
          "",
          "[Added Lines]",
          "406:         ocb_block_xor(in, pad.c, last_len, out);",
          "410:         memcpy(pad.c, in, last_len);",
          "411:         pad.c[last_len] = 0x80;",
          "412:         ocb_block16_xor(&pad, &ctx->checksum, &ctx->checksum);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "427: {",
          "428:     u64 i, all_num_blocks;",
          "429:     size_t num_blocks, last_len;",
          "",
          "[Removed Lines]",
          "430:     OCB_BLOCK tmp1;",
          "431:     OCB_BLOCK tmp2;",
          "432:     OCB_BLOCK pad;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "455:                     (size_t)ctx->blocks_processed + 1, ctx->offset.c,",
          "456:                     (const unsigned char (*)[16])ctx->l, ctx->checksum.c);",
          "457:     } else {",
          "459:         for (i = ctx->blocks_processed + 1; i <= all_num_blocks; i++) {",
          "464:             OCB_BLOCK *lookup = ocb_lookup_l(ctx, ocb_ntz(i));",
          "",
          "[Removed Lines]",
          "460:             OCB_BLOCK *inblock;",
          "461:             OCB_BLOCK *outblock;",
          "",
          "[Added Lines]",
          "455:         OCB_BLOCK tmp;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "466:                 return 0;",
          "467:             ocb_block16_xor(&ctx->offset, lookup, &ctx->offset);",
          "480:         }",
          "481:     }",
          "",
          "[Removed Lines]",
          "470:             inblock =",
          "471:                 (OCB_BLOCK *)(in + ((i - ctx->blocks_processed - 1) * 16));",
          "472:             ocb_block16_xor_misaligned(&ctx->offset, inblock, &tmp1);",
          "473:             ctx->decrypt(tmp1.c, tmp2.c, ctx->keydec);",
          "474:             outblock =",
          "475:                 (OCB_BLOCK *)(out + ((i - ctx->blocks_processed - 1) * 16));",
          "476:             ocb_block16_xor_misaligned(&ctx->offset, &tmp2, outblock);",
          "479:             ocb_block16_xor_misaligned(&ctx->checksum, outblock, &ctx->checksum);",
          "",
          "[Added Lines]",
          "466:             memcpy(tmp.c, in, 16);",
          "467:             in += 16;",
          "470:             ocb_block16_xor(&ctx->offset, &tmp, &tmp);",
          "471:             ctx->decrypt(tmp.c, tmp.c, ctx->keydec);",
          "472:             ocb_block16_xor(&ctx->offset, &tmp, &tmp);",
          "475:             ocb_block16_xor(&tmp, &ctx->checksum, &ctx->checksum);",
          "477:             memcpy(out, tmp.c, 16);",
          "478:             out += 16;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "487:     last_len = len % 16;",
          "489:     if (last_len > 0) {",
          "491:         ocb_block16_xor(&ctx->offset, &ctx->l_star, &ctx->offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:         OCB_BLOCK pad;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "494:         ctx->encrypt(ctx->offset.c, pad.c, ctx->keyenc);",
          "505:     }",
          "507:     ctx->blocks_processed = all_num_blocks;",
          "",
          "[Removed Lines]",
          "497:         ocb_block_xor(in + (len / 16) * 16, (unsigned char *)&pad, last_len,",
          "498:                       out + (num_blocks * 16));",
          "501:         memset(&tmp1, 0, 16);",
          "502:         memcpy(&tmp1, out + (len / 16) * 16, last_len);",
          "503:         ((unsigned char *)(&tmp1))[last_len] = 0x80;",
          "504:         ocb_block16_xor(&ctx->checksum, &tmp1, &ctx->checksum);",
          "",
          "[Added Lines]",
          "498:         ocb_block_xor(in, pad.c, last_len, out);",
          "502:         memcpy(pad.c, out, last_len);",
          "503:         pad.c[last_len] = 0x80;",
          "504:         ocb_block16_xor(&pad, &ctx->checksum, &ctx->checksum);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "515: int CRYPTO_ocb128_finish(OCB128_CONTEXT *ctx, const unsigned char *tag,",
          "516:                          size_t len)",
          "517: {",
          "528:     if (len > 16 || len < 1) {",
          "529:         return -1;",
          "",
          "[Removed Lines]",
          "518:     OCB_BLOCK tmp1, tmp2;",
          "523:     ocb_block16_xor(&ctx->checksum, &ctx->offset, &tmp1);",
          "524:     ocb_block16_xor(&tmp1, &ctx->l_dollar, &tmp2);",
          "525:     ctx->encrypt(tmp2.c, tmp1.c, ctx->keyenc);",
          "526:     ocb_block16_xor(&tmp1, &ctx->sum, &ctx->tag);",
          "",
          "[Added Lines]",
          "518:     OCB_BLOCK tmp;",
          "523:     ocb_block16_xor(&ctx->checksum, &ctx->offset, &tmp);",
          "524:     ocb_block16_xor(&ctx->l_dollar, &tmp, &tmp);",
          "525:     ctx->encrypt(tmp.c, tmp.c, ctx->keyenc);",
          "526:     ocb_block16_xor(&tmp, &ctx->sum, &ctx->tag);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "549:     CRYPTO_ocb128_finish(ctx, NULL, 0);",
          "554:     return 1;",
          "555: }",
          "",
          "[Removed Lines]",
          "552:     memcpy(tag, &ctx->tag, len);",
          "",
          "[Added Lines]",
          "552:     memcpy(tag, ctx->tag.c, len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0401110073cd392602855f9b72af2ebec7909625",
      "candidate_info": {
        "commit_hash": "0401110073cd392602855f9b72af2ebec7909625",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0401110073cd392602855f9b72af2ebec7909625",
        "files": [
          "Configure",
          "test/build.info",
          "test/recipes/40-test_rehash.t",
          "test/recipes/80-test_ssl_new.t",
          "test/run_tests.pl",
          "util/process_docs.pl"
        ],
        "message": "Perl: Use File::Glob::bsd_glob rather than File::Glob::glob\n\nFile::Glob::glob is deprecated, it's use generates this kind of\nmessage:\n\n    File::Glob::glob() will disappear in perl 5.30. Use File::Glob::bsd_glob() instead. at ../master/Configure line 277.\n\nSo instead, use a construction that makes the caller glob() use\nFile::Glob::bsd_glob().\n\nNote that we're still excluding VMS, as it's directory specs use '['\nand ']', which have a different meaning with bsd_glob and would need\nsome extra quoting.  This might change, but later.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4040)\n\n(cherry picked from commit 102c9e1296b656c4049c1110abc8a52b43bd0dcf)",
        "before_after_code_files": [
          "test/build.info||test/build.info",
          "test/recipes/40-test_rehash.t||test/recipes/40-test_rehash.t",
          "test/recipes/80-test_ssl_new.t||test/recipes/80-test_ssl_new.t",
          "test/run_tests.pl||test/run_tests.pl",
          "util/process_docs.pl||util/process_docs.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/build.info||test/build.info": [
          "File: test/build.info -> test/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "293: {-",
          "294:    use File::Spec::Functions;",
          "295:    use File::Basename;",
          "298:    my @nogo_headers = ( \"asn1_mac.h\",",
          "299:                         \"__decc_include_prologue.h\",",
          "",
          "[Removed Lines]",
          "296:    use if $^O ne \"VMS\", 'File::Glob' => qw/glob/;",
          "",
          "[Added Lines]",
          "296:    use if $^O ne \"VMS\", 'File::Glob' => qw/:bsd_glob/;",
          "",
          "---------------"
        ],
        "test/recipes/40-test_rehash.t||test/recipes/40-test_rehash.t": [
          "File: test/recipes/40-test_rehash.t -> test/recipes/40-test_rehash.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: use File::Spec::Functions;",
          "14: use File::Copy;",
          "15: use File::Basename;",
          "17: use OpenSSL::Test qw/:DEFAULT srctop_file/;",
          "19: setup(\"test_rehash\");",
          "",
          "[Removed Lines]",
          "16: use if $^O ne \"VMS\", 'File::Glob' => qw/glob/;",
          "",
          "[Added Lines]",
          "16: use if $^O ne \"VMS\", 'File::Glob' => qw/:bsd_glob/;",
          "",
          "---------------"
        ],
        "test/recipes/80-test_ssl_new.t||test/recipes/80-test_ssl_new.t": [
          "File: test/recipes/80-test_ssl_new.t -> test/recipes/80-test_ssl_new.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: use File::Basename;",
          "14: use File::Compare qw/compare_text/;",
          "17: use OpenSSL::Test qw/:DEFAULT srctop_dir srctop_file/;",
          "18: use OpenSSL::Test::Utils qw/disabled alldisabled available_protocols/;",
          "",
          "[Removed Lines]",
          "15: use if $^O ne \"VMS\", 'File::Glob' => qw/glob/;",
          "",
          "[Added Lines]",
          "15: use if $^O ne \"VMS\", 'File::Glob' => qw/:bsd_glob/;",
          "",
          "---------------"
        ],
        "test/run_tests.pl||test/run_tests.pl": [
          "File: test/run_tests.pl -> test/run_tests.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: use File::Spec::Functions qw/catdir catfile curdir abs2rel rel2abs/;",
          "18: use File::Basename;",
          "20: use Module::Load::Conditional qw(can_load);",
          "22: my $TAP_Harness = can_load(modules => { 'TAP::Harness' => undef })",
          "",
          "[Removed Lines]",
          "19: use if $^O ne \"VMS\", 'File::Glob' => qw/glob/;",
          "",
          "[Added Lines]",
          "19: use if $^O ne \"VMS\", 'File::Glob' => qw/:bsd_glob/;",
          "",
          "---------------"
        ],
        "util/process_docs.pl||util/process_docs.pl": [
          "File: util/process_docs.pl -> util/process_docs.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: use File::Basename;",
          "14: use File::Copy;",
          "15: use File::Path;",
          "17: use Getopt::Long;",
          "18: use Pod::Usage;",
          "",
          "[Removed Lines]",
          "16: use if $^O ne \"VMS\", 'File::Glob' => qw/glob/;",
          "",
          "[Added Lines]",
          "16: use if $^O ne \"VMS\", 'File::Glob' => qw/:bsd_glob/;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b571802dfaa265082c27f690ead0b4e4b8e2b14c",
      "candidate_info": {
        "commit_hash": "b571802dfaa265082c27f690ead0b4e4b8e2b14c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b571802dfaa265082c27f690ead0b4e4b8e2b14c",
        "files": [
          "crypto/lhash/lhash.c"
        ],
        "message": "lhash.c: Replace Unicode EN DASH with the ASCII char '-'.\n\n * addressing\", Proc. 6th Conference on Very Large Databases: 212\u2013223\n                                                                 ^\nThe EN DASH ('\u2013') in this line is one UTF-8 character (hex: e2 80 93).\nUnder some code page setting (e.g. 936), Visual Studio may report C4819\nwarning: The file contains a character that cannot be represented in the\ncurrent code page.\n\nReplace this character with the ASCII char '-' (Hex Code: 2D).\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4691)\n\n(cherry picked from commit b4d0fa49d9d1a43792e58b0c8066bb23b9e53ef4)",
        "before_after_code_files": [
          "crypto/lhash/lhash.c||crypto/lhash/lhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/lhash/lhash.c||crypto/lhash/lhash.c": [
          "File: crypto/lhash/lhash.c -> crypto/lhash/lhash.c"
        ]
      }
    }
  ]
}