{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3254caceefda268247826cd9bb8178725a9f0b08",
      "candidate_info": {
        "commit_hash": "3254caceefda268247826cd9bb8178725a9f0b08",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3254caceefda268247826cd9bb8178725a9f0b08",
        "files": [
          "tools/install.py"
        ],
        "message": "install: use os.path.join() to create the npm shebang\n\nPrettier formatting for the shebang if the \"prefix\" ends with a /",
        "before_after_code_files": [
          "tools/install.py||tools/install.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/install.py||tools/install.py": [
          "File: tools/install.py -> tools/install.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:           'lib/node/wafadmin/')",
          "130: def update_shebang(path, shebang):",
          "132:   s = open(path, 'r').read()",
          "133:   s = re.sub(r'#!.*\\n', '#!' + shebang + '\\n', s)",
          "134:   open(path, 'w').write(s)",
          "",
          "[Removed Lines]",
          "131:   print 'updating shebang of %s' % path",
          "",
          "[Added Lines]",
          "131:   print 'updating shebang of %s to %s' % (path, shebang)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:     action([link_path], 'bin/npm')",
          "154:   elif action == install:",
          "155:     try_symlink('../lib/node_modules/npm/bin/npm-cli.js', link_path)",
          "157:   else:",
          "158:     assert(0) # unhandled action type",
          "",
          "[Removed Lines]",
          "156:     update_shebang(link_path, node_prefix + '/bin/node')",
          "",
          "[Added Lines]",
          "156:     shebang = os.path.join(node_prefix, 'bin/node')",
          "157:     update_shebang(link_path, shebang)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f43b1c039727e12c7a27fb31010aa309a4a35d8",
      "candidate_info": {
        "commit_hash": "3f43b1c039727e12c7a27fb31010aa309a4a35d8",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3f43b1c039727e12c7a27fb31010aa309a4a35d8",
        "files": [
          "lib/_debugger.js",
          "src/node.cc",
          "test/simple/test-debugger-repl-utf8.js",
          "test/simple/test-debugger-repl.js"
        ],
        "message": "debugger: export `debug_port` to `process`\n\n`process.debug_port` is useful for changing debugger port in runtime,\nbefore starting it (via SIGUSR1).\n\nUsing `--port=` argument for debugger repl, tests will run debugger\nserver on a `common.PORT` (as it usually does for any other servers).\n\n`process._debugEnd()` stops debugger and its server.\n\n* debugger: implemented process._debugEnd(), `node debug --port=5858 app.js`\n* test: start debugger repl on common.PORT\n* fixes #2613\n* fixes #2614",
        "before_after_code_files": [
          "lib/_debugger.js||li_debugger.js",
          "src/node.cc||src/node.cc",
          "test/simple/test-debugger-repl-utf8.js||test/simple/test-debugger-repl-utf8.js",
          "test/simple/test-debugger-repl.js||test/simple/test-debugger-repl.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/_debugger.js||li_debugger.js": [
          "File: lib/_debugger.js -> li_debugger.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1592:         }",
          "1593:       };",
          "1594:       process._debugProcess(parseInt(this.args[2], 10));",
          "1595:     }",
          "1596:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1996: }",
          "1999: static Handle<Value> DebugProcess(const Arguments& args);",
          "2000: static Handle<Value> DebugPause(const Arguments& args);",
          "2002: Handle<Object> SetupProcessObject(int argc, char *argv[]) {",
          "2003:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1999: static Handle<Value> DebugPortGetter(Local<String> property,",
          "2000:                                      const AccessorInfo& info) {",
          "2001:   HandleScope scope;",
          "2002:   return scope.Close(Integer::NewFromUnsigned(debug_port));",
          "2003: }",
          "2006: static void DebugPortSetter(Local<String> property,",
          "2007:                             Local<Value> value,",
          "2008:                             const AccessorInfo& info) {",
          "2009:   HandleScope scope;",
          "2010:   debug_port = value->NumberValue();",
          "2011: }",
          "2016: static Handle<Value> DebugEnd(const Arguments& args);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2099:   }",
          "2100:   delete [] execPath;",
          "2104:   NODE_SET_METHOD(process, \"_needTickCallback\", NeedTickCallback);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2118:   process->SetAccessor(String::New(\"debug_port\"),",
          "2119:                        DebugPortGetter,",
          "2120:                        DebugPortSetter);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2126:   NODE_SET_METHOD(process, \"_debugProcess\", DebugProcess);",
          "2127:   NODE_SET_METHOD(process, \"_debugPause\", DebugPause);",
          "2129:   NODE_SET_METHOD(process, \"dlopen\", DLOpen);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2148:   NODE_SET_METHOD(process, \"_debugEnd\", DebugEnd);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2537: }",
          "2540: char** Init(int argc, char *argv[]) {",
          "2542:   uv_uptime(&prog_start_time);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2561: static Handle<Value> DebugEnd(const Arguments& args) {",
          "2562:   if (debugger_running) {",
          "2563:     v8::Debug::DisableAgent();",
          "2564:     debugger_running = false;",
          "2565:   }",
          "2567:   return Undefined();",
          "2568: }",
          "",
          "---------------"
        ],
        "test/simple/test-debugger-repl-utf8.js||test/simple/test-debugger-repl-utf8.js": [
          "File: test/simple/test-debugger-repl-utf8.js -> test/simple/test-debugger-repl-utf8.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: var script = common.fixturesDir + '/breakpoints_utf8.js';",
          "32: var buffer = '';",
          "33: child.stdout.setEncoding('utf-8');",
          "",
          "[Removed Lines]",
          "30: var child = spawn(process.execPath, ['debug', script]);",
          "",
          "[Added Lines]",
          "30: var child = spawn(process.execPath, ['debug', '--port=' + common.PORT, script]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: addTest(null, [",
          "81:   /connecting... ok/,",
          "82:   /break in .*:1/,",
          "83:   /1/, /2/, /3/",
          "",
          "[Removed Lines]",
          "80:   /listening on port 5858/,",
          "",
          "[Added Lines]",
          "80:   /listening on port \\d+/,",
          "",
          "---------------"
        ],
        "test/simple/test-debugger-repl.js||test/simple/test-debugger-repl.js": [
          "File: test/simple/test-debugger-repl.js -> test/simple/test-debugger-repl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: var script = common.fixturesDir + '/breakpoints.js';",
          "32: var buffer = '';",
          "33: child.stdout.setEncoding('utf-8');",
          "",
          "[Removed Lines]",
          "30: var child = spawn(process.execPath, ['debug', script]);",
          "",
          "[Added Lines]",
          "30: var child = spawn(process.execPath, ['debug', '--port=' + common.PORT, script]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: addTest(null, [",
          "86:   /connecting... ok/,",
          "87:   /break in .*:1/,",
          "88:   /1/, /2/, /3/",
          "",
          "[Removed Lines]",
          "85:   /listening on port 5858/,",
          "",
          "[Added Lines]",
          "85:   /listening on port \\d+/,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d84c3db257dfa1b92476cc6a50abf9c6e4b0583",
      "candidate_info": {
        "commit_hash": "3d84c3db257dfa1b92476cc6a50abf9c6e4b0583",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3d84c3db257dfa1b92476cc6a50abf9c6e4b0583",
        "files": [
          "doc/api/cluster.markdown",
          "lib/cluster.js",
          "test/simple/test-cluster-basic.js"
        ],
        "message": "More cluster event consistency\n\nRegarding discussion in #3198.  Passing the worker as an argument\nto an event emitted on the worker is redundant, and an unnecessary\nbreak in consistency vs the events on the ChildProcess objects.\n\nIt was removed from 'exit', but 'listening' and others were\noverlooked.  This corrects that oversight.",
        "before_after_code_files": [
          "lib/cluster.js||licluster.js",
          "test/simple/test-cluster-basic.js||test/simple/test-cluster-basic.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/cluster.js||licluster.js": [
          "File: lib/cluster.js -> licluster.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:   messageHandler.online = function(message, worker) {",
          "185:     worker.state = 'online';",
          "186:     debug('Worker ' + worker.process.pid + ' online');",
          "188:     cluster.emit('online', worker);",
          "189:   };",
          "",
          "[Removed Lines]",
          "187:     worker.emit('online', worker);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:     worker.state = 'listening';",
          "217:       address: message.address,",
          "218:       port: message.port,",
          "219:       addressType: message.addressType",
          "",
          "[Removed Lines]",
          "216:     worker.emit('listening', worker, {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297:   this.process.once('exit', function(exitCode, signalCode) {",
          "298:     prepareExit(self, 'dead');",
          "299:     self.emit('exit', exitCode, signalCode);",
          "301:   });",
          "302:   this.process.once('disconnect', function() {",
          "303:     prepareExit(self, 'disconnected');",
          "",
          "[Removed Lines]",
          "300:     cluster.emit('exit', self);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-basic.js||test/simple/test-cluster-basic.js": [
          "File: test/simple/test-cluster-basic.js -> test/simple/test-cluster-basic.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:       checks.worker.events[name] = true;",
          "133:       }",
          "134:     });",
          "135:   });",
          "",
          "[Removed Lines]",
          "125:       if (name == 'exit') {",
          "126:         checks.worker.equal[name] = (",
          "127:           worker.process.exitCode === arguments[0] &&",
          "128:           worker.process.signalCode === arguments[1] &&",
          "129:           worker === this",
          "130:         );",
          "131:       } else {",
          "132:         checks.worker.equal[name] = worker === arguments[0];",
          "",
          "[Added Lines]",
          "125:       checks.worker.equal[name] = (worker === this);",
          "127:       switch (name) {",
          "128:         case 'exit':",
          "129:           assert.equal(arguments[0], worker.process.exitCode);",
          "130:           assert.equal(arguments[1], worker.process.signalCode);",
          "131:           assert.equal(arguments.length, 2);",
          "132:           break;",
          "134:         case 'listening':",
          "135:           assert.equal(arguments.length, 1);",
          "136:           var expect = { address: '127.0.0.1',",
          "137:                          port: common.PORT,",
          "138:                          addressType: 4 };",
          "139:           assert.deepEqual(arguments[0], expect);",
          "140:           break;",
          "142:         default:",
          "143:           assert.equal(arguments.length, 0);",
          "144:           break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:     forEach(checks.cluster.equal, function(check, name) {",
          "147:       assert.ok(check, 'The cluster event \"' + name + '\" did not emit ' +",
          "149:     });",
          "",
          "[Removed Lines]",
          "148:                 'with corrent argument');",
          "",
          "[Added Lines]",
          "160:                 'with correct argument');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d9766a9dfb1eea901219d2a865ce9300fe4d68e",
      "candidate_info": {
        "commit_hash": "8d9766a9dfb1eea901219d2a865ce9300fe4d68e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8d9766a9dfb1eea901219d2a865ce9300fe4d68e",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "src/node_version.h"
        ],
        "message": "2012.06.11, Version 0.7.10 (unstable)\n\n* Roll V8 back to 3.9.24.31\n\n* build: x64 target should always pass -m64 (Robert Mustacchi)\n\n* add NODE_EXTERN to node::Start (Joel Brandt)\n\n* repl: Warn about running npm commands (isaacs)\n\n* slab_allocator: fix crash in dtor if V8 is dead (Ben Noordhuis)\n\n* slab_allocator: fix leak of Persistent handles (Shigeki Ohtsu)\n\n* windows/msi: add node.js prompt to startmenu (Jeroen Janssen)\n\n* windows/msi: fix adding node to PATH (Jeroen Janssen)\n\n* windows/msi: add start menu links when installing (Jeroen Janssen)\n\n* windows: don't install x64 version into the 'program files (x86)' folder (Matt Gollob)\n\n* domain: Fix #3379 domain.intercept no longer passes error arg to cb (Marc Harter)\n\n* fs: make callbacks run in global context (Ben Noordhuis)\n\n* fs: enable fs.realpath on windows (isaacs)\n\n* child_process: expose UV_PROCESS_DETACHED as options.detached (Charlie McConnell)\n\n* child_process: new stdio API for .spawn() method (Fedor Indutny)\n\n* child_process: spawn().ref() and spawn().unref() (Fedor Indutny)\n\n* Upgrade npm to 1.1.25\n- Enable npm link on windows\n- Properly remove sh-shim on Windows\n- Abstract out registry client and logger",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 7",
          "31: #define NODE_PATCH_VERSION 10",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6cbed959e6dc61991e50bb95b3a9b1f530a50c0d",
      "candidate_info": {
        "commit_hash": "6cbed959e6dc61991e50bb95b3a9b1f530a50c0d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6cbed959e6dc61991e50bb95b3a9b1f530a50c0d",
        "files": [
          "test/simple/test-tls-ext-key-usage.js",
          "test/simple/test-tls-securepair-client.js"
        ],
        "message": "test: fix openssl tests\n\nDon't assume that the libcrypto and libssl that we're linked against is the same\nversion as the openssl command line tool. This is important because the tool has\na bug in all pre-1.0.0 versions that makes it unusable for these tests.",
        "before_after_code_files": [
          "test/simple/test-tls-ext-key-usage.js||test/simple/test-tls-ext-key-usage.js",
          "test/simple/test-tls-securepair-client.js||test/simple/test-tls-securepair-client.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-tls-ext-key-usage.js||test/simple/test-tls-ext-key-usage.js": [
          "File: test/simple/test-tls-ext-key-usage.js -> test/simple/test-tls-ext-key-usage.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   process.exit(0);",
          "32: }",
          "35: var common = require('../common');",
          "36: var join = require('path').join;",
          "37: var net = require('net');",
          "",
          "[Removed Lines]",
          "28: if (!process.versions.openssl ||",
          "29:     parseInt(process.versions.openssl[0]) < 1) {",
          "30:   console.error('Skipping due to old OpenSSL version.');",
          "",
          "[Added Lines]",
          "22: if (!process.versions.openssl) {",
          "23:   console.error('Skipping because node compiled without OpenSSL.');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: var fs = require('fs');",
          "40: var crypto = require('crypto');",
          "41: var tls = require('tls');",
          "42: var spawn = require('child_process').spawn;",
          "",
          "[Removed Lines]",
          "48: var PORT = common.PORT + 5;",
          "50: var connections = 0;",
          "52: var keyfn = join(common.fixturesDir, 'keys', 'agent4-key.pem');",
          "53: var key = fs.readFileSync(keyfn).toString();",
          "55: var certfn = join(common.fixturesDir, 'keys', 'agent4-cert.pem');",
          "56: var cert = fs.readFileSync(certfn).toString();",
          "58: var server = spawn('openssl', ['s_server',",
          "59:                                '-accept', PORT,",
          "60:                                '-cert', certfn,",
          "61:                                '-key', keyfn]);",
          "62: server.stdout.pipe(process.stdout);",
          "63: server.stderr.pipe(process.stdout);",
          "66: var state = 'WAIT-ACCEPT';",
          "68: var serverStdoutBuffer = '';",
          "69: server.stdout.setEncoding('utf8');",
          "70: server.stdout.on('data', function(s) {",
          "71:   serverStdoutBuffer += s;",
          "72:   console.error(state);",
          "73:   switch (state) {",
          "74:     case 'WAIT-ACCEPT':",
          "75:       if (/ACCEPT/g.test(serverStdoutBuffer)) {",
          "77:         setTimeout(startClient, 500);",
          "78:         state = 'WAIT-HELLO';",
          "79:       }",
          "80:       break;",
          "82:     case 'WAIT-HELLO':",
          "83:       if (/hello/g.test(serverStdoutBuffer)) {",
          "87:         server.stdin.write('Q');",
          "89:         state = 'WAIT-SERVER-CLOSE';",
          "90:       }",
          "91:       break;",
          "93:     default:",
          "94:       break;",
          "95:   }",
          "96: });",
          "99: var timeout = setTimeout(function() {",
          "100:   server.kill();",
          "101:   process.exit(1);",
          "102: }, 5000);",
          "104: var gotWriteCallback = false;",
          "105: var serverExitCode = -1;",
          "107: server.on('exit', function(code) {",
          "108:   serverExitCode = code;",
          "109:   clearTimeout(timeout);",
          "110: });",
          "113: function startClient() {",
          "114:   var s = new net.Stream();",
          "116:   var sslcontext = crypto.createCredentials({key: key, cert: cert});",
          "117:   sslcontext.context.setCiphers('RC4-SHA:AES128-SHA:AES256-SHA');",
          "119:   var pair = tls.createSecurePair(sslcontext, false);",
          "121:   assert.ok(pair.encrypted.writable);",
          "122:   assert.ok(pair.cleartext.writable);",
          "124:   pair.encrypted.pipe(s);",
          "125:   s.pipe(pair.encrypted);",
          "127:   s.connect(PORT);",
          "129:   s.on('connect', function() {",
          "130:     console.log('client connected');",
          "131:   });",
          "133:   pair.on('secure', function() {",
          "134:     console.log('client: connected+secure!');",
          "135:     console.log('client pair.cleartext.getPeerCertificate(): %j',",
          "136:                 pair.cleartext.getPeerCertificate());",
          "139:     assert.equal(pair.cleartext.getPeerCertificate().ext_key_usage.length, 1);",
          "140:     assert.equal(pair.cleartext.getPeerCertificate().ext_key_usage[0],",
          "141:                  '1.3.6.1.5.5.7.3.2');",
          "143:     console.log('client pair.cleartext.getCipher(): %j',",
          "144:                 pair.cleartext.getCipher());",
          "145:     setTimeout(function() {",
          "146:       pair.cleartext.write('hello\\r\\n', function() {",
          "147:         gotWriteCallback = true;",
          "148:       });",
          "149:     }, 500);",
          "150:   });",
          "152:   pair.cleartext.on('data', function(d) {",
          "153:     console.log('cleartext: %s', d.toString());",
          "154:   });",
          "156:   s.on('close', function() {",
          "157:     console.log('client close');",
          "158:   });",
          "160:   pair.encrypted.on('error', function(err) {",
          "161:     console.log('encrypted error: ' + err);",
          "162:   });",
          "164:   s.on('error', function(err) {",
          "165:     console.log('socket error: ' + err);",
          "166:   });",
          "168:   pair.on('error', function(err) {",
          "169:     console.log('secure error: ' + err);",
          "170:   });",
          "171: }",
          "174: process.on('exit', function() {",
          "175:   assert.equal(0, serverExitCode);",
          "176:   assert.equal('WAIT-SERVER-CLOSE', state);",
          "177:   assert.ok(gotWriteCallback);",
          "178: });",
          "",
          "[Added Lines]",
          "34: var exec = require('child_process').exec;",
          "37: maybe(test);",
          "42: function maybe(cb) {",
          "43:   exec('openssl version', function(err, data) {",
          "44:     if (err) throw err;",
          "45:     if (/OpenSSL 0\\./.test(data)) {",
          "46:       console.error('Skipping due to old OpenSSL version.');",
          "47:       return;",
          "48:     }",
          "49:     cb();",
          "50:   });",
          "51: }",
          "53: function test() {",
          "58:   var PORT = common.PORT + 5;",
          "60:   var connections = 0;",
          "62:   var keyfn = join(common.fixturesDir, 'keys', 'agent4-key.pem');",
          "63:   var key = fs.readFileSync(keyfn).toString();",
          "65:   var certfn = join(common.fixturesDir, 'keys', 'agent4-cert.pem');",
          "66:   var cert = fs.readFileSync(certfn).toString();",
          "68:   var server = spawn('openssl', ['s_server',",
          "69:                                  '-accept', PORT,",
          "70:                                  '-cert', certfn,",
          "71:                                  '-key', keyfn]);",
          "72:   server.stdout.pipe(process.stdout);",
          "73:   server.stderr.pipe(process.stdout);",
          "76:   var state = 'WAIT-ACCEPT';",
          "78:   var serverStdoutBuffer = '';",
          "79:   server.stdout.setEncoding('utf8');",
          "80:   server.stdout.on('data', function(s) {",
          "81:     serverStdoutBuffer += s;",
          "82:     console.error(state);",
          "83:     switch (state) {",
          "84:       case 'WAIT-ACCEPT':",
          "85:         if (/ACCEPT/g.test(serverStdoutBuffer)) {",
          "87:           setTimeout(startClient, 500);",
          "88:           state = 'WAIT-HELLO';",
          "89:         }",
          "90:         break;",
          "92:       case 'WAIT-HELLO':",
          "93:         if (/hello/g.test(serverStdoutBuffer)) {",
          "97:           server.stdin.write('Q');",
          "99:           state = 'WAIT-SERVER-CLOSE';",
          "100:         }",
          "101:         break;",
          "103:       default:",
          "104:         break;",
          "105:     }",
          "106:   });",
          "109:   var timeout = setTimeout(function() {",
          "110:     server.kill();",
          "111:     process.exit(1);",
          "112:   }, 5000);",
          "114:   var gotWriteCallback = false;",
          "115:   var serverExitCode = -1;",
          "117:   server.on('exit', function(code) {",
          "118:     serverExitCode = code;",
          "119:     clearTimeout(timeout);",
          "120:   });",
          "123:   function startClient() {",
          "124:     var s = new net.Stream();",
          "126:     var sslcontext = crypto.createCredentials({key: key, cert: cert});",
          "127:     sslcontext.context.setCiphers('RC4-SHA:AES128-SHA:AES256-SHA');",
          "129:     var pair = tls.createSecurePair(sslcontext, false);",
          "131:     assert.ok(pair.encrypted.writable);",
          "132:     assert.ok(pair.cleartext.writable);",
          "134:     pair.encrypted.pipe(s);",
          "135:     s.pipe(pair.encrypted);",
          "137:     s.connect(PORT);",
          "139:     s.on('connect', function() {",
          "140:       console.log('client connected');",
          "141:     });",
          "143:     pair.on('secure', function() {",
          "144:       console.log('client: connected+secure!');",
          "145:       console.log('client pair.cleartext.getPeerCertificate(): %j',",
          "146:                   pair.cleartext.getPeerCertificate());",
          "149:       assert.equal(pair.cleartext.getPeerCertificate().ext_key_usage.length, 1);",
          "150:       assert.equal(pair.cleartext.getPeerCertificate().ext_key_usage[0],",
          "151:                    '1.3.6.1.5.5.7.3.2');",
          "153:       console.log('client pair.cleartext.getCipher(): %j',",
          "154:                   pair.cleartext.getCipher());",
          "155:       setTimeout(function() {",
          "156:         pair.cleartext.write('hello\\r\\n', function() {",
          "157:           gotWriteCallback = true;",
          "158:         });",
          "159:       }, 500);",
          "160:     });",
          "162:     pair.cleartext.on('data', function(d) {",
          "163:       console.log('cleartext: %s', d.toString());",
          "164:     });",
          "166:     s.on('close', function() {",
          "167:       console.log('client close');",
          "168:     });",
          "170:     pair.encrypted.on('error', function(err) {",
          "171:       console.log('encrypted error: ' + err);",
          "172:     });",
          "174:     s.on('error', function(err) {",
          "175:       console.log('socket error: ' + err);",
          "176:     });",
          "178:     pair.on('error', function(err) {",
          "179:       console.log('secure error: ' + err);",
          "180:     });",
          "181:   }",
          "184:   process.on('exit', function() {",
          "185:     assert.equal(0, serverExitCode);",
          "186:     assert.equal('WAIT-SERVER-CLOSE', state);",
          "187:     assert.ok(gotWriteCallback);",
          "188:   });",
          "189: }",
          "",
          "---------------"
        ],
        "test/simple/test-tls-securepair-client.js||test/simple/test-tls-securepair-client.js": [
          "File: test/simple/test-tls-securepair-client.js -> test/simple/test-tls-securepair-client.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   process.exit(0);",
          "32: }",
          "35: var common = require('../common');",
          "36: var join = require('path').join;",
          "37: var net = require('net');",
          "",
          "[Removed Lines]",
          "28: if (!process.versions.openssl ||",
          "29:     parseInt(process.versions.openssl[0]) < 1) {",
          "30:   console.error('Skipping due to old OpenSSL version.');",
          "",
          "[Added Lines]",
          "22: if (!process.versions.openssl) {",
          "23:   console.error('Skipping because node compiled without OpenSSL.');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: var fs = require('fs');",
          "40: var crypto = require('crypto');",
          "41: var tls = require('tls');",
          "42: var spawn = require('child_process').spawn;",
          "",
          "[Removed Lines]",
          "48: var PORT = common.PORT + 5;",
          "50: var connections = 0;",
          "52: var keyfn = join(common.fixturesDir, 'agent.key');",
          "53: var key = fs.readFileSync(keyfn).toString();",
          "55: var certfn = join(common.fixturesDir, 'agent.crt');",
          "56: var cert = fs.readFileSync(certfn).toString();",
          "58: var server = spawn('openssl', ['s_server',",
          "59:                                '-accept', PORT,",
          "60:                                '-cert', certfn,",
          "61:                                '-key', keyfn]);",
          "62: server.stdout.pipe(process.stdout);",
          "63: server.stderr.pipe(process.stdout);",
          "66: var state = 'WAIT-ACCEPT';",
          "68: var serverStdoutBuffer = '';",
          "69: server.stdout.setEncoding('utf8');",
          "70: server.stdout.on('data', function(s) {",
          "71:   serverStdoutBuffer += s;",
          "72:   console.error(state);",
          "73:   switch (state) {",
          "74:     case 'WAIT-ACCEPT':",
          "75:       if (/ACCEPT/g.test(serverStdoutBuffer)) {",
          "77:         setTimeout(startClient, 500);",
          "78:         state = 'WAIT-HELLO';",
          "79:       }",
          "80:       break;",
          "82:     case 'WAIT-HELLO':",
          "83:       if (/hello/g.test(serverStdoutBuffer)) {",
          "87:         server.stdin.write('Q');",
          "89:         state = 'WAIT-SERVER-CLOSE';",
          "90:       }",
          "91:       break;",
          "93:     default:",
          "94:       break;",
          "95:   }",
          "96: });",
          "99: var timeout = setTimeout(function() {",
          "100:   server.kill();",
          "101:   process.exit(1);",
          "102: }, 5000);",
          "104: var gotWriteCallback = false;",
          "105: var serverExitCode = -1;",
          "107: server.on('exit', function(code) {",
          "108:   serverExitCode = code;",
          "109:   clearTimeout(timeout);",
          "110: });",
          "113: function startClient() {",
          "114:   var s = new net.Stream();",
          "116:   var sslcontext = crypto.createCredentials({key: key, cert: cert});",
          "117:   sslcontext.context.setCiphers('RC4-SHA:AES128-SHA:AES256-SHA');",
          "119:   var pair = tls.createSecurePair(sslcontext, false);",
          "121:   assert.ok(pair.encrypted.writable);",
          "122:   assert.ok(pair.cleartext.writable);",
          "124:   pair.encrypted.pipe(s);",
          "125:   s.pipe(pair.encrypted);",
          "127:   s.connect(PORT);",
          "129:   s.on('connect', function() {",
          "130:     console.log('client connected');",
          "131:   });",
          "133:   pair.on('secure', function() {",
          "134:     console.log('client: connected+secure!');",
          "135:     console.log('client pair.cleartext.getPeerCertificate(): %j',",
          "136:                 pair.cleartext.getPeerCertificate());",
          "137:     console.log('client pair.cleartext.getCipher(): %j',",
          "138:                 pair.cleartext.getCipher());",
          "139:     setTimeout(function() {",
          "140:       pair.cleartext.write('hello\\r\\n', function() {",
          "141:         gotWriteCallback = true;",
          "142:       });",
          "143:     }, 500);",
          "144:   });",
          "146:   pair.cleartext.on('data', function(d) {",
          "147:     console.log('cleartext: %s', d.toString());",
          "148:   });",
          "150:   s.on('close', function() {",
          "151:     console.log('client close');",
          "152:   });",
          "154:   pair.encrypted.on('error', function(err) {",
          "155:     console.log('encrypted error: ' + err);",
          "156:   });",
          "158:   s.on('error', function(err) {",
          "159:     console.log('socket error: ' + err);",
          "160:   });",
          "162:   pair.on('error', function(err) {",
          "163:     console.log('secure error: ' + err);",
          "164:   });",
          "165: }",
          "168: process.on('exit', function() {",
          "169:   assert.equal(0, serverExitCode);",
          "170:   assert.equal('WAIT-SERVER-CLOSE', state);",
          "171:   assert.ok(gotWriteCallback);",
          "172: });",
          "",
          "[Added Lines]",
          "34: var exec = require('child_process').exec;",
          "37: maybe(test);",
          "42: function maybe(cb) {",
          "43:   exec('openssl version', function(err, data) {",
          "44:     if (err) throw err;",
          "45:     if (/OpenSSL 0\\./.test(data)) {",
          "46:       console.error('Skipping due to old OpenSSL version.');",
          "47:       return;",
          "48:     }",
          "49:     cb();",
          "50:   });",
          "51: }",
          "53: function test() {",
          "58:   var PORT = common.PORT + 5;",
          "60:   var connections = 0;",
          "62:   var keyfn = join(common.fixturesDir, 'agent.key');",
          "63:   var key = fs.readFileSync(keyfn).toString();",
          "65:   var certfn = join(common.fixturesDir, 'agent.crt');",
          "66:   var cert = fs.readFileSync(certfn).toString();",
          "68:   var server = spawn('openssl', ['s_server',",
          "69:                                  '-accept', PORT,",
          "70:                                  '-cert', certfn,",
          "71:                                  '-key', keyfn]);",
          "72:   server.stdout.pipe(process.stdout);",
          "73:   server.stderr.pipe(process.stdout);",
          "76:   var state = 'WAIT-ACCEPT';",
          "78:   var serverStdoutBuffer = '';",
          "79:   server.stdout.setEncoding('utf8');",
          "80:   server.stdout.on('data', function(s) {",
          "81:     serverStdoutBuffer += s;",
          "82:     console.error(state);",
          "83:     switch (state) {",
          "84:       case 'WAIT-ACCEPT':",
          "85:         if (/ACCEPT/g.test(serverStdoutBuffer)) {",
          "87:           setTimeout(startClient, 500);",
          "88:           state = 'WAIT-HELLO';",
          "89:         }",
          "90:         break;",
          "92:       case 'WAIT-HELLO':",
          "93:         if (/hello/g.test(serverStdoutBuffer)) {",
          "97:           server.stdin.write('Q');",
          "99:           state = 'WAIT-SERVER-CLOSE';",
          "100:         }",
          "101:         break;",
          "103:       default:",
          "104:         break;",
          "105:     }",
          "106:   });",
          "109:   var timeout = setTimeout(function() {",
          "110:     server.kill();",
          "111:     process.exit(1);",
          "112:   }, 5000);",
          "114:   var gotWriteCallback = false;",
          "115:   var serverExitCode = -1;",
          "117:   server.on('exit', function(code) {",
          "118:     serverExitCode = code;",
          "119:     clearTimeout(timeout);",
          "120:   });",
          "123:   function startClient() {",
          "124:     var s = new net.Stream();",
          "126:     var sslcontext = crypto.createCredentials({key: key, cert: cert});",
          "127:     sslcontext.context.setCiphers('RC4-SHA:AES128-SHA:AES256-SHA');",
          "129:     var pair = tls.createSecurePair(sslcontext, false);",
          "131:     assert.ok(pair.encrypted.writable);",
          "132:     assert.ok(pair.cleartext.writable);",
          "134:     pair.encrypted.pipe(s);",
          "135:     s.pipe(pair.encrypted);",
          "137:     s.connect(PORT);",
          "139:     s.on('connect', function() {",
          "140:       console.log('client connected');",
          "141:     });",
          "143:     pair.on('secure', function() {",
          "144:       console.log('client: connected+secure!');",
          "145:       console.log('client pair.cleartext.getPeerCertificate(): %j',",
          "146:                   pair.cleartext.getPeerCertificate());",
          "147:       console.log('client pair.cleartext.getCipher(): %j',",
          "148:                   pair.cleartext.getCipher());",
          "149:       setTimeout(function() {",
          "150:         pair.cleartext.write('hello\\r\\n', function() {",
          "151:           gotWriteCallback = true;",
          "152:         });",
          "153:       }, 500);",
          "154:     });",
          "156:     pair.cleartext.on('data', function(d) {",
          "157:       console.log('cleartext: %s', d.toString());",
          "158:     });",
          "160:     s.on('close', function() {",
          "161:       console.log('client close');",
          "162:     });",
          "164:     pair.encrypted.on('error', function(err) {",
          "165:       console.log('encrypted error: ' + err);",
          "166:     });",
          "168:     s.on('error', function(err) {",
          "169:       console.log('socket error: ' + err);",
          "170:     });",
          "172:     pair.on('error', function(err) {",
          "173:       console.log('secure error: ' + err);",
          "174:     });",
          "175:   }",
          "178:   process.on('exit', function() {",
          "179:     assert.equal(0, serverExitCode);",
          "180:     assert.equal('WAIT-SERVER-CLOSE', state);",
          "181:     assert.ok(gotWriteCallback);",
          "182:   });",
          "183: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}