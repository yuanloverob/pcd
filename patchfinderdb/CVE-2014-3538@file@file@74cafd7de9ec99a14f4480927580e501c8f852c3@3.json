{
  "cve_id": "CVE-2014-3538",
  "cve_desc": "file before 5.19 does not properly restrict the amount of data read during a regex search, which allows remote attackers to cause a denial of service (CPU consumption) via a crafted file that triggers backtracking during processing of an awk rule.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-7345.",
  "repo": "file/file",
  "patch_hash": "74cafd7de9ec99a14f4480927580e501c8f852c3",
  "patch_info": {
    "commit_hash": "74cafd7de9ec99a14f4480927580e501c8f852c3",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/74cafd7de9ec99a14f4480927580e501c8f852c3",
    "files": [
      "src/softmagic.c"
    ],
    "message": "If requested, limit search length.",
    "before_after_code_files": [
      "src/softmagic.c||src/softmagic.c"
    ]
  },
  "patch_diff": {
    "src/softmagic.c||src/softmagic.c": [
      "File: src/softmagic.c -> src/softmagic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"file.h\"",
      "34: #ifndef lint",
      "38: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.187 2014/05/13 16:42:17 christos Exp $\")",
      "",
      "[Added Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.188 2014/05/14 23:15:42 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1929:    file_regerror(&rx, rc, ms);",
      "1930:    v = (uint64_t)-1;",
      "1931:   } else {",
      "1932:    regmatch_t pmatch[1];",
      "1933: #ifndef REG_STARTEND",
      "1934: #define REG_STARTEND 0",
      "1938: #else",
      "1939:    pmatch[0].rm_so = 0;",
      "1941: #endif",
      "1942:    rc = file_regexec(&rx, (const char *)ms->search.s,",
      "1943:        1, pmatch, REG_STARTEND);",
      "",
      "[Removed Lines]",
      "1935:    size_t l = ms->search.s_len - 1;",
      "1936:    char c = ms->search.s[l];",
      "1937:    ((char *)(intptr_t)ms->search.s)[l] = '\\0';",
      "1940:    pmatch[0].rm_eo = ms->search.s_len;",
      "",
      "[Added Lines]",
      "1932: #ifndef REG_STARTEND",
      "1933:    char c;",
      "1934: #endif",
      "1936:    size_t slen = ms->search.s_len;",
      "1938:    if (m->str_range > 0)",
      "1939:     slen = MIN(slen, m->str_range);",
      "1942:    if (slen != 0)",
      "1943:     slen--;",
      "1944:    c = ms->search.s[slen];",
      "1945:    ((char *)(intptr_t)ms->search.s)[slen] = '\\0';",
      "1948:    pmatch[0].rm_eo = slen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1878ee9dfefa4adddd15822ade56228b4469228f",
      "candidate_info": {
        "commit_hash": "1878ee9dfefa4adddd15822ade56228b4469228f",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/1878ee9dfefa4adddd15822ade56228b4469228f",
        "files": [
          "src/softmagic.c"
        ],
        "message": "PR/337: Fix incorrect handling of offsets (wrong sign) Test: $ perl -e 'print \"ABC\", \"\\xff\\xff\", \"\\x00\"x70000, \"DEF\"' > abc.data $ cat abc.magic 0\tstring\t\tABC\tABC test file format >(3.s)\tsearch/0x3000\tDEF\t\\b, DEF sub type $ file -m abc.magic abc.data abc.data: ABC test file format, DEF sub type",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.182 2014/03/28 19:07:08 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.183 2014/04/01 15:44:26 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1179: {",
          "1180:  uint32_t soffset, offset = ms->offset;",
          "1181:  uint32_t count = m->str_range;",
          "1182:  int rv, oneed_separator, in_type;",
          "1183:  char *sbuf, *rbuf;",
          "1184:  union VALUETYPE *p = &ms->ms_value;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1182:  uint32_t lhs;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1281:   case FILE_BESHORT:",
          "1282:    if (OFFSET_OOB(nbytes, offset, 2))",
          "1283:     return 0;",
          "1284:    if (off) {",
          "1285:     switch (m->in_op & FILE_OPS_MASK) {",
          "1286:     case FILE_OPAND:",
          "1290:      break;",
          "1291:     case FILE_OPOR:",
          "1295:      break;",
          "1296:     case FILE_OPXOR:",
          "1300:      break;",
          "1301:     case FILE_OPADD:",
          "1305:      break;",
          "1306:     case FILE_OPMINUS:",
          "1310:      break;",
          "1311:     case FILE_OPMULTIPLY:",
          "1315:      break;",
          "1316:     case FILE_OPDIVIDE:",
          "1320:      break;",
          "1321:     case FILE_OPMODULO:",
          "1325:      break;",
          "1326:     }",
          "1327:    } else",
          "1330:    if (m->in_op & FILE_OPINVERSE)",
          "1331:     offset = ~offset;",
          "1332:    break;",
          "1333:   case FILE_LESHORT:",
          "1334:    if (OFFSET_OOB(nbytes, offset, 2))",
          "1335:     return 0;",
          "1336:    if (off) {",
          "1337:     switch (m->in_op & FILE_OPS_MASK) {",
          "1338:     case FILE_OPAND:",
          "1342:      break;",
          "1343:     case FILE_OPOR:",
          "1347:      break;",
          "1348:     case FILE_OPXOR:",
          "1352:      break;",
          "1353:     case FILE_OPADD:",
          "1357:      break;",
          "1358:     case FILE_OPMINUS:",
          "1362:      break;",
          "1363:     case FILE_OPMULTIPLY:",
          "1367:      break;",
          "1368:     case FILE_OPDIVIDE:",
          "1372:      break;",
          "1373:     case FILE_OPMODULO:",
          "1377:      break;",
          "1378:     }",
          "1379:    } else",
          "1382:    if (m->in_op & FILE_OPINVERSE)",
          "1383:     offset = ~offset;",
          "1384:    break;",
          "",
          "[Removed Lines]",
          "1287:      offset = (short)((p->hs[0]<<8)|",
          "1288:         (p->hs[1])) &",
          "1289:        off;",
          "1292:      offset = (short)((p->hs[0]<<8)|",
          "1293:         (p->hs[1])) |",
          "1294:        off;",
          "1297:      offset = (short)((p->hs[0]<<8)|",
          "1298:         (p->hs[1])) ^",
          "1299:        off;",
          "1302:      offset = (short)((p->hs[0]<<8)|",
          "1303:         (p->hs[1])) +",
          "1304:        off;",
          "1307:      offset = (short)((p->hs[0]<<8)|",
          "1308:         (p->hs[1])) -",
          "1309:        off;",
          "1312:      offset = (short)((p->hs[0]<<8)|",
          "1313:         (p->hs[1])) *",
          "1314:        off;",
          "1317:      offset = (short)((p->hs[0]<<8)|",
          "1318:         (p->hs[1])) /",
          "1319:        off;",
          "1322:      offset = (short)((p->hs[0]<<8)|",
          "1323:         (p->hs[1])) %",
          "1324:        off;",
          "1328:     offset = (short)((p->hs[0]<<8)|",
          "1329:        (p->hs[1]));",
          "1339:      offset = (short)((p->hs[1]<<8)|",
          "1340:         (p->hs[0])) &",
          "1341:        off;",
          "1344:      offset = (short)((p->hs[1]<<8)|",
          "1345:         (p->hs[0])) |",
          "1346:        off;",
          "1349:      offset = (short)((p->hs[1]<<8)|",
          "1350:         (p->hs[0])) ^",
          "1351:        off;",
          "1354:      offset = (short)((p->hs[1]<<8)|",
          "1355:         (p->hs[0])) +",
          "1356:        off;",
          "1359:      offset = (short)((p->hs[1]<<8)|",
          "1360:         (p->hs[0])) -",
          "1361:        off;",
          "1364:      offset = (short)((p->hs[1]<<8)|",
          "1365:         (p->hs[0])) *",
          "1366:        off;",
          "1369:      offset = (short)((p->hs[1]<<8)|",
          "1370:         (p->hs[0])) /",
          "1371:        off;",
          "1374:      offset = (short)((p->hs[1]<<8)|",
          "1375:         (p->hs[0])) %",
          "1376:        off;",
          "1380:     offset = (short)((p->hs[1]<<8)|",
          "1381:        (p->hs[0]));",
          "",
          "[Added Lines]",
          "1285:    lhs = (p->hs[0] << 8) | p->hs[1];",
          "1289:      offset = lhs & off;",
          "1292:      offset = lhs | off;",
          "1295:      offset = lhs ^ off;",
          "1298:      offset = lhs + off;",
          "1301:      offset = lhs - off;",
          "1304:      offset = lhs * off;",
          "1307:      offset = lhs / off;",
          "1310:      offset = lhs % off;",
          "1314:     offset = lhs;",
          "1321:    lhs = (p->hs[1] << 8) | p->hs[0];",
          "1325:      offset = lhs & off;",
          "1328:      offset = lhs | off;",
          "1331:      offset = lhs ^ off;",
          "1334:      offset = lhs + off;",
          "1337:      offset = lhs - off;",
          "1340:      offset = lhs * off;",
          "1343:      offset = lhs / off;",
          "1346:      offset = lhs % off;",
          "1350:     offset = lhs;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1422:   case FILE_BEID3:",
          "1423:    if (OFFSET_OOB(nbytes, offset, 4))",
          "1424:     return 0;",
          "1425:    if (off) {",
          "1426:     switch (m->in_op & FILE_OPS_MASK) {",
          "1427:     case FILE_OPAND:",
          "1433:      break;",
          "1434:     case FILE_OPOR:",
          "1440:      break;",
          "1441:     case FILE_OPXOR:",
          "1447:      break;",
          "1448:     case FILE_OPADD:",
          "1454:      break;",
          "1455:     case FILE_OPMINUS:",
          "1461:      break;",
          "1462:     case FILE_OPMULTIPLY:",
          "1468:      break;",
          "1469:     case FILE_OPDIVIDE:",
          "1475:      break;",
          "1476:     case FILE_OPMODULO:",
          "1482:      break;",
          "1483:     }",
          "1484:    } else",
          "1489:    if (m->in_op & FILE_OPINVERSE)",
          "1490:     offset = ~offset;",
          "1491:    break;",
          "",
          "[Removed Lines]",
          "1428:      offset = (int32_t)((p->hl[0]<<24)|",
          "1429:         (p->hl[1]<<16)|",
          "1430:         (p->hl[2]<<8)|",
          "1431:         (p->hl[3])) &",
          "1432:        off;",
          "1435:      offset = (int32_t)((p->hl[0]<<24)|",
          "1436:         (p->hl[1]<<16)|",
          "1437:         (p->hl[2]<<8)|",
          "1438:         (p->hl[3])) |",
          "1439:        off;",
          "1442:      offset = (int32_t)((p->hl[0]<<24)|",
          "1443:         (p->hl[1]<<16)|",
          "1444:         (p->hl[2]<<8)|",
          "1445:         (p->hl[3])) ^",
          "1446:        off;",
          "1449:      offset = (int32_t)((p->hl[0]<<24)|",
          "1450:         (p->hl[1]<<16)|",
          "1451:         (p->hl[2]<<8)|",
          "1452:         (p->hl[3])) +",
          "1453:        off;",
          "1456:      offset = (int32_t)((p->hl[0]<<24)|",
          "1457:         (p->hl[1]<<16)|",
          "1458:         (p->hl[2]<<8)|",
          "1459:         (p->hl[3])) -",
          "1460:        off;",
          "1463:      offset = (int32_t)((p->hl[0]<<24)|",
          "1464:         (p->hl[1]<<16)|",
          "1465:         (p->hl[2]<<8)|",
          "1466:         (p->hl[3])) *",
          "1467:        off;",
          "1470:      offset = (int32_t)((p->hl[0]<<24)|",
          "1471:         (p->hl[1]<<16)|",
          "1472:         (p->hl[2]<<8)|",
          "1473:         (p->hl[3])) /",
          "1474:        off;",
          "1477:      offset = (int32_t)((p->hl[0]<<24)|",
          "1478:         (p->hl[1]<<16)|",
          "1479:         (p->hl[2]<<8)|",
          "1480:         (p->hl[3])) %",
          "1481:        off;",
          "1485:     offset = (int32_t)((p->hl[0]<<24)|",
          "1486:        (p->hl[1]<<16)|",
          "1487:        (p->hl[2]<<8)|",
          "1488:        (p->hl[3]));",
          "",
          "[Added Lines]",
          "1394:    lhs = (p->hl[0] << 24) | (p->hl[1] << 16) |",
          "1395:        (p->hl[2] << 8) | p->hl[3];",
          "1399:      offset = lhs & off;",
          "1402:      offset = lhs | off;",
          "1405:      offset = lhs ^ off;",
          "1408:      offset = lhs + off;",
          "1411:      offset = lhs - off;",
          "1414:      offset = lhs * off;",
          "1417:      offset = lhs / off;",
          "1420:      offset = lhs % off;",
          "1424:     offset = lhs;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1493:   case FILE_LEID3:",
          "1494:    if (OFFSET_OOB(nbytes, offset, 4))",
          "1495:     return 0;",
          "1496:    if (off) {",
          "1497:     switch (m->in_op & FILE_OPS_MASK) {",
          "1498:     case FILE_OPAND:",
          "1504:      break;",
          "1505:     case FILE_OPOR:",
          "1511:      break;",
          "1512:     case FILE_OPXOR:",
          "1518:      break;",
          "1519:     case FILE_OPADD:",
          "1525:      break;",
          "1526:     case FILE_OPMINUS:",
          "1532:      break;",
          "1533:     case FILE_OPMULTIPLY:",
          "1539:      break;",
          "1540:     case FILE_OPDIVIDE:",
          "1546:      break;",
          "1547:     case FILE_OPMODULO:",
          "1553:      break;",
          "1554:     }",
          "1555:    } else",
          "1560:    if (m->in_op & FILE_OPINVERSE)",
          "1561:     offset = ~offset;",
          "1562:    break;",
          "1563:   case FILE_MELONG:",
          "1564:    if (OFFSET_OOB(nbytes, offset, 4))",
          "1565:     return 0;",
          "1566:    if (off) {",
          "1567:     switch (m->in_op & FILE_OPS_MASK) {",
          "1568:     case FILE_OPAND:",
          "1574:      break;",
          "1575:     case FILE_OPOR:",
          "1581:      break;",
          "1582:     case FILE_OPXOR:",
          "1588:      break;",
          "1589:     case FILE_OPADD:",
          "1595:      break;",
          "1596:     case FILE_OPMINUS:",
          "1602:      break;",
          "1603:     case FILE_OPMULTIPLY:",
          "1609:      break;",
          "1610:     case FILE_OPDIVIDE:",
          "1616:      break;",
          "1617:     case FILE_OPMODULO:",
          "1623:      break;",
          "1624:     }",
          "1625:    } else",
          "1630:    if (m->in_op & FILE_OPINVERSE)",
          "1631:     offset = ~offset;",
          "1632:    break;",
          "",
          "[Removed Lines]",
          "1499:      offset = (int32_t)((p->hl[3]<<24)|",
          "1500:         (p->hl[2]<<16)|",
          "1501:         (p->hl[1]<<8)|",
          "1502:         (p->hl[0])) &",
          "1503:        off;",
          "1506:      offset = (int32_t)((p->hl[3]<<24)|",
          "1507:         (p->hl[2]<<16)|",
          "1508:         (p->hl[1]<<8)|",
          "1509:         (p->hl[0])) |",
          "1510:        off;",
          "1513:      offset = (int32_t)((p->hl[3]<<24)|",
          "1514:         (p->hl[2]<<16)|",
          "1515:         (p->hl[1]<<8)|",
          "1516:         (p->hl[0])) ^",
          "1517:        off;",
          "1520:      offset = (int32_t)((p->hl[3]<<24)|",
          "1521:         (p->hl[2]<<16)|",
          "1522:         (p->hl[1]<<8)|",
          "1523:         (p->hl[0])) +",
          "1524:        off;",
          "1527:      offset = (int32_t)((p->hl[3]<<24)|",
          "1528:         (p->hl[2]<<16)|",
          "1529:         (p->hl[1]<<8)|",
          "1530:         (p->hl[0])) -",
          "1531:        off;",
          "1534:      offset = (int32_t)((p->hl[3]<<24)|",
          "1535:         (p->hl[2]<<16)|",
          "1536:         (p->hl[1]<<8)|",
          "1537:         (p->hl[0])) *",
          "1538:        off;",
          "1541:      offset = (int32_t)((p->hl[3]<<24)|",
          "1542:         (p->hl[2]<<16)|",
          "1543:         (p->hl[1]<<8)|",
          "1544:         (p->hl[0])) /",
          "1545:        off;",
          "1548:      offset = (int32_t)((p->hl[3]<<24)|",
          "1549:         (p->hl[2]<<16)|",
          "1550:         (p->hl[1]<<8)|",
          "1551:         (p->hl[0])) %",
          "1552:        off;",
          "1556:     offset = (int32_t)((p->hl[3]<<24)|",
          "1557:        (p->hl[2]<<16)|",
          "1558:        (p->hl[1]<<8)|",
          "1559:        (p->hl[0]));",
          "1569:      offset = (int32_t)((p->hl[1]<<24)|",
          "1570:         (p->hl[0]<<16)|",
          "1571:         (p->hl[3]<<8)|",
          "1572:         (p->hl[2])) &",
          "1573:        off;",
          "1576:      offset = (int32_t)((p->hl[1]<<24)|",
          "1577:         (p->hl[0]<<16)|",
          "1578:         (p->hl[3]<<8)|",
          "1579:         (p->hl[2])) |",
          "1580:        off;",
          "1583:      offset = (int32_t)((p->hl[1]<<24)|",
          "1584:         (p->hl[0]<<16)|",
          "1585:         (p->hl[3]<<8)|",
          "1586:         (p->hl[2])) ^",
          "1587:        off;",
          "1590:      offset = (int32_t)((p->hl[1]<<24)|",
          "1591:         (p->hl[0]<<16)|",
          "1592:         (p->hl[3]<<8)|",
          "1593:         (p->hl[2])) +",
          "1594:        off;",
          "1597:      offset = (int32_t)((p->hl[1]<<24)|",
          "1598:         (p->hl[0]<<16)|",
          "1599:         (p->hl[3]<<8)|",
          "1600:         (p->hl[2])) -",
          "1601:        off;",
          "1604:      offset = (int32_t)((p->hl[1]<<24)|",
          "1605:         (p->hl[0]<<16)|",
          "1606:         (p->hl[3]<<8)|",
          "1607:         (p->hl[2])) *",
          "1608:        off;",
          "1611:      offset = (int32_t)((p->hl[1]<<24)|",
          "1612:         (p->hl[0]<<16)|",
          "1613:         (p->hl[3]<<8)|",
          "1614:         (p->hl[2])) /",
          "1615:        off;",
          "1618:      offset = (int32_t)((p->hl[1]<<24)|",
          "1619:         (p->hl[0]<<16)|",
          "1620:         (p->hl[3]<<8)|",
          "1621:         (p->hl[2])) %",
          "1622:        off;",
          "1626:     offset = (int32_t)((p->hl[1]<<24)|",
          "1627:        (p->hl[0]<<16)|",
          "1628:        (p->hl[3]<<8)|",
          "1629:        (p->hl[2]));",
          "",
          "[Added Lines]",
          "1432:    lhs = (p->hl[3] << 24) | (p->hl[2] << 16) |",
          "1433:        (p->hl[1] << 8) | p->hl[0];",
          "1437:      offset = lhs & off;",
          "1440:      offset = lhs | off;",
          "1443:      offset = lhs ^ off;",
          "1446:      offset = lhs + off;",
          "1449:      offset = lhs - off;",
          "1452:      offset = lhs * off;",
          "1455:      offset = lhs / off;",
          "1458:      offset = lhs % off;",
          "1462:     offset = lhs;",
          "1469:    lhs = (p->hl[1] << 24) | (p->hl[0] << 16) |",
          "1470:        (p->hl[3] << 8) | p->hl[2];",
          "1474:      offset = lhs & off;",
          "1477:      offset = lhs | off;",
          "1480:      offset = lhs ^ off;",
          "1483:      offset = lhs + off;",
          "1486:      offset = lhs - off;",
          "1489:      offset = lhs * off;",
          "1492:      offset = lhs / off;",
          "1495:      offset = lhs % off;",
          "1499:     offset = lhs;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0c0032b9e9eb57b91fefef905a3b018bab492d9",
      "candidate_info": {
        "commit_hash": "c0c0032b9e9eb57b91fefef905a3b018bab492d9",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/c0c0032b9e9eb57b91fefef905a3b018bab492d9",
        "files": [
          "src/softmagic.c"
        ],
        "message": "Fix memory leak (Anatol Belski)",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.175 2014/02/18 11:09:31 kim Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.176 2014/02/18 17:59:21 kim Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1762:   ms->offset = soffset;",
          "1763:   if (rv == 1) {",
          "1764:    if ((ms->flags & (MAGIC_MIME|MAGIC_APPLE)) == 0 &&",
          "1766:     return -1;",
          "1768:     return -1;",
          "1770:   }",
          "1771:   return rv;",
          "1773:  case FILE_USE:",
          "",
          "[Removed Lines]",
          "1765:        file_printf(ms, F(m->desc, \"%u\"), offset) == -1)",
          "1767:    if (file_printf(ms, \"%s\", rbuf) == -1)",
          "1769:    free(rbuf);",
          "",
          "[Added Lines]",
          "1765:        file_printf(ms, F(m->desc, \"%u\"), offset) == -1) {",
          "1766:     free(rbuf);",
          "1768:    }",
          "1769:    if (file_printf(ms, \"%s\", rbuf) == -1) {",
          "1770:     free(rbuf);",
          "1772:    }",
          "1774:   free(rbuf);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "defbf8856b8f519f5979f65623ec18266741de50",
      "candidate_info": {
        "commit_hash": "defbf8856b8f519f5979f65623ec18266741de50",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/defbf8856b8f519f5979f65623ec18266741de50",
        "files": [
          "src/softmagic.c"
        ],
        "message": "search and regex don't copy stuff to value.",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.206 2015/01/01 17:07:34 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.207 2015/01/02 21:29:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:   t = ms->offset + sizeof(uint64_t);",
          "590:   break;",
          "595:   vf = p->f;",
          "596:   switch (check_fmt(ms, m)) {",
          "597:   case -1:",
          "",
          "[Removed Lines]",
          "592:    case FILE_FLOAT:",
          "593:    case FILE_BEFLOAT:",
          "594:    case FILE_LEFLOAT:",
          "",
          "[Added Lines]",
          "592:  case FILE_FLOAT:",
          "593:  case FILE_BEFLOAT:",
          "594:  case FILE_LEFLOAT:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "609:   t = ms->offset + sizeof(float);",
          "610:     break;",
          "615:   vd = p->d;",
          "616:   switch (check_fmt(ms, m)) {",
          "617:   case -1:",
          "",
          "[Removed Lines]",
          "612:    case FILE_DOUBLE:",
          "613:    case FILE_BEDOUBLE:",
          "614:    case FILE_LEDOUBLE:",
          "",
          "[Added Lines]",
          "612:  case FILE_DOUBLE:",
          "613:  case FILE_BEDOUBLE:",
          "614:  case FILE_LEDOUBLE:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "629:   t = ms->offset + sizeof(double);",
          "630:     break;",
          "632:  case FILE_REGEX: {",
          "633:   char *cp;",
          "634:   int rval;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632:  case FILE_SEARCH:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "652:   break;",
          "653:  }",
          "665:  case FILE_DEFAULT:",
          "666:  case FILE_CLEAR:",
          "667:     if (file_printf(ms, \"%s\", m->desc) == -1)",
          "",
          "[Removed Lines]",
          "655:  case FILE_SEARCH:",
          "656:     if (file_printf(ms, F(ms, m, \"%s\"),",
          "657:       file_printable(sbuf, sizeof(sbuf), m->value.s)) == -1)",
          "658:    return -1;",
          "659:   if ((m->str_flags & REGEX_OFFSET_START))",
          "660:    t = ms->search.offset;",
          "661:   else",
          "662:    t = ms->search.offset + m->vallen;",
          "663:   break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1965:        m->str_flags);",
          "1967:     ms->search.offset += idx;",
          "1968:     break;",
          "1969:    }",
          "1970:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1959:     ms->search.rm_len = m->str_range - idx;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc9e74dfeca5265ad725acc926ef0b8d2a18ee70",
      "candidate_info": {
        "commit_hash": "cc9e74dfeca5265ad725acc926ef0b8d2a18ee70",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/cc9e74dfeca5265ad725acc926ef0b8d2a18ee70",
        "files": [
          "src/ascmagic.c",
          "src/file.h",
          "src/funcs.c",
          "src/softmagic.c"
        ],
        "message": "count indirect recursion as recursion.",
        "before_after_code_files": [
          "src/ascmagic.c||src/ascmagic.c",
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ascmagic.c||src/ascmagic.c": [
          "File: src/ascmagic.c -> src/ascmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.86 2013/06/08 14:13:12 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.87 2013/09/17 15:51:22 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:       == NULL)",
          "148:    goto done;",
          "149:   if ((rv = file_softmagic(ms, utf8_buf,",
          "151:    rv = -1;",
          "152:  }",
          "",
          "[Removed Lines]",
          "150:       (size_t)(utf8_end - utf8_buf), TEXTTEST, text)) == 0)",
          "",
          "[Added Lines]",
          "150:       (size_t)(utf8_end - utf8_buf), 0, TEXTTEST, text)) == 0)",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "439:     unichar **, size_t *, const char **, const char **, const char **);",
          "440: protected int file_is_tar(struct magic_set *, const unsigned char *, size_t);",
          "441: protected int file_softmagic(struct magic_set *, const unsigned char *, size_t,",
          "443: protected int file_apprentice(struct magic_set *, const char *, int);",
          "444: protected int file_magicfind(struct magic_set *, const char *, struct mlist *);",
          "445: protected uint64_t file_signextend(struct magic_set *, struct magic *,",
          "",
          "[Removed Lines]",
          "442:     int, int);",
          "",
          "[Added Lines]",
          "442:     size_t, int, int);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.65 2013/12/05 17:02:34 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.66 2014/01/07 03:15:09 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:  if ((ms->flags & MAGIC_NO_CHECK_SOFT) == 0)",
          "234:       looks_text)) != 0) {",
          "235:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "236:     (void)fprintf(stderr, \"softmagic %d\\n\", m);",
          "",
          "[Removed Lines]",
          "233:   if ((m = file_softmagic(ms, ubuf, nb, BINTEST,",
          "",
          "[Added Lines]",
          "233:   if ((m = file_softmagic(ms, ubuf, nb, 0, BINTEST,",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.172 2014/01/08 22:22:54 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.173 2014/02/11 15:41:25 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80: protected int",
          "81: file_softmagic(struct magic_set *ms, const unsigned char *buf, size_t nbytes,",
          "83: {",
          "84:  struct mlist *ml;",
          "85:  int rv, printed_something = 0, need_separator = 0;",
          "86:  for (ml = ms->mlist[0]->next; ml != ms->mlist[0]; ml = ml->next)",
          "87:   if ((rv = match(ms, ml->magic, ml->nmagic, buf, nbytes, 0, mode,",
          "89:       NULL)) != 0)",
          "90:    return rv;",
          "",
          "[Removed Lines]",
          "82:     int mode, int text)",
          "88:       text, 0, 0, &printed_something, &need_separator,",
          "",
          "[Added Lines]",
          "82:     size_t level, int mode, int text)",
          "88:       text, 0, level, &printed_something, &need_separator,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1747:   ms->o.buf = NULL;",
          "1748:   ms->offset = 0;",
          "1749:   rv = file_softmagic(ms, s + offset, nbytes - offset,",
          "1751:   if ((ms->flags & MAGIC_DEBUG) != 0)",
          "1752:    fprintf(stderr, \"indirect @offs=%u[%d]\\n\", offset, rv);",
          "1753:   rbuf = ms->o.buf;",
          "",
          "[Removed Lines]",
          "1750:       BINTEST, text);",
          "",
          "[Added Lines]",
          "1750:       recursion_level, BINTEST, text);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a284c89d6ef11aca34da65da7d673050a5ea320",
      "candidate_info": {
        "commit_hash": "4a284c89d6ef11aca34da65da7d673050a5ea320",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/4a284c89d6ef11aca34da65da7d673050a5ea320",
        "files": [
          "ChangeLog",
          "doc/magic.man",
          "magic/Magdir/android",
          "magic/Magdir/fortran",
          "magic/Magdir/graphviz",
          "magic/Magdir/marc21",
          "magic/Magdir/scientific",
          "magic/Magdir/troff",
          "src/apprentice.c",
          "src/file.h",
          "src/softmagic.c"
        ],
        "message": "* Enforce limit of 8K on regex searches that have no limits * Allow the l modifier for regex to mean line count. Default   to byte count. If line count is specified, assume a max   of 80 characters per line to limit the byte count. * Don't allow conversions to be used for dates, allowing   the mask field to be used as an offset. * Bump the version of the magic format so that regex changes   are visible.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/file.h||src/file.h",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.209 2014/05/13 16:42:17 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.210 2014/05/14 23:15:42 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1382:  if ((ms->flags & MAGIC_CHECK) == 0)",
          "1383:   return 0;",
          "1386:   file_magwarn(ms,",
          "1387:       \"'/BHhLl' modifiers are only allowed for pascal strings\\n\");",
          "1388:   return -1;",
          "",
          "[Removed Lines]",
          "1385:  if (m->type != FILE_PSTRING && (m->str_flags & PSTRING_LEN) != 0) {",
          "",
          "[Added Lines]",
          "1385:  if ((m->type != FILE_REGEX || (m->str_flags & REGEX_LINE_COUNT) == 0) &&",
          "1386:      (m->type != FILE_PSTRING && (m->str_flags & PSTRING_LEN) != 0)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1875:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_BE;",
          "1876:      break;",
          "1877:     case CHAR_PSTRING_4_LE:",
          "1879:       goto bad;",
          "1880:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_LE;",
          "1881:      break;",
          "1882:     case CHAR_PSTRING_LENGTH_INCLUDES_ITSELF:",
          "",
          "[Removed Lines]",
          "1878:      if (m->type != FILE_PSTRING)",
          "",
          "[Added Lines]",
          "1879:      switch (m->type) {",
          "1880:      case FILE_PSTRING:",
          "1881:      case FILE_REGEX:",
          "1882:       break;",
          "1883:      default:",
          "1885:      }",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: #define MAGICNO  0xF11E041C",
          "137: #define FILE_MAGICSIZE 248",
          "139: #define FILE_LOAD 0",
          "",
          "[Removed Lines]",
          "136: #define VERSIONNO 11",
          "",
          "[Added Lines]",
          "136: #define VERSIONNO 12",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "321: #define PSTRING_2_LE    BIT(9)",
          "322: #define PSTRING_4_BE    BIT(10)",
          "323: #define PSTRING_4_LE    BIT(11)",
          "324: #define PSTRING_LEN \\",
          "325:     (PSTRING_1_BE|PSTRING_2_LE|PSTRING_2_BE|PSTRING_4_LE|PSTRING_4_BE)",
          "326: #define PSTRING_LENGTH_INCLUDES_ITSELF  BIT(12)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324: #define REGEX_LINE_COUNT   BIT(11)",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.188 2014/05/14 23:15:42 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.189 2014/05/30 16:47:44 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: private int32_t moffset(struct magic_set *, struct magic *);",
          "58: private void mdebug(uint32_t, const char *, size_t);",
          "59: private int mcopy(struct magic_set *, union VALUETYPE *, int, int,",
          "61: private int mconvert(struct magic_set *, struct magic *, int);",
          "62: private int print_sep(struct magic_set *, int);",
          "63: private int handle_annotation(struct magic_set *, struct magic *);",
          "",
          "[Removed Lines]",
          "60:     const unsigned char *, uint32_t, size_t, size_t);",
          "",
          "[Added Lines]",
          "60:     const unsigned char *, uint32_t, size_t, struct magic *);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "540:  case FILE_LEDATE:",
          "541:  case FILE_MEDATE:",
          "542:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "544:    return -1;",
          "545:   t = ms->offset + sizeof(uint32_t);",
          "546:   break;",
          "",
          "[Removed Lines]",
          "543:       file_fmttime(p->l, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "543:       file_fmttime(p->l + m->num_mask, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "550:  case FILE_LELDATE:",
          "551:  case FILE_MELDATE:",
          "552:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "554:    return -1;",
          "555:   t = ms->offset + sizeof(uint32_t);",
          "556:   break;",
          "",
          "[Removed Lines]",
          "553:       file_fmttime(p->l, 0, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "553:       file_fmttime(p->l + m->num_mask, 0, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "559:  case FILE_BEQDATE:",
          "560:  case FILE_LEQDATE:",
          "561:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "563:    return -1;",
          "564:   t = ms->offset + sizeof(uint64_t);",
          "565:   break;",
          "",
          "[Removed Lines]",
          "562:       file_fmttime(p->q, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "562:       file_fmttime(p->q + m->num_mask, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "568:  case FILE_BEQLDATE:",
          "569:  case FILE_LEQLDATE:",
          "570:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "572:    return -1;",
          "573:   t = ms->offset + sizeof(uint64_t);",
          "574:   break;",
          "",
          "[Removed Lines]",
          "571:       file_fmttime(p->q, 0, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "571:       file_fmttime(p->q + m->num_mask, 0, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "577:  case FILE_BEQWDATE:",
          "578:  case FILE_LEQWDATE:",
          "579:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "581:    return -1;",
          "582:   t = ms->offset + sizeof(uint64_t);",
          "583:   break;",
          "",
          "[Removed Lines]",
          "580:       file_fmttime(p->q, FILE_T_WINDOWS, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "580:       file_fmttime(p->q + m->num_mask, FILE_T_WINDOWS, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "912: mconvert(struct magic_set *ms, struct magic *m, int flip)",
          "913: {",
          "914:  union VALUETYPE *p = &ms->ms_value;",
          "917:  case FILE_BYTE:",
          "918:   cvt_8(p, m);",
          "919:   return 1;",
          "",
          "[Removed Lines]",
          "916:  switch (cvt_flip(m->type, flip)) {",
          "",
          "[Added Lines]",
          "915:  uint8_t type;",
          "917:  switch (type = cvt_flip(m->type, flip)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "957:  case FILE_BELDATE:",
          "958:   p->l = (int32_t)",
          "959:       ((p->hl[0]<<24)|(p->hl[1]<<16)|(p->hl[2]<<8)|(p->hl[3]));",
          "961:   return 1;",
          "962:  case FILE_BEQUAD:",
          "963:  case FILE_BEQDATE:",
          "",
          "[Removed Lines]",
          "960:   cvt_32(p, m);",
          "",
          "[Added Lines]",
          "961:   if (type == FILE_BELONG)",
          "962:    cvt_32(p, m);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "968:        ((uint64_t)p->hq[2]<<40)|((uint64_t)p->hq[3]<<32)|",
          "969:        ((uint64_t)p->hq[4]<<24)|((uint64_t)p->hq[5]<<16)|",
          "970:        ((uint64_t)p->hq[6]<<8)|((uint64_t)p->hq[7]));",
          "972:   return 1;",
          "973:  case FILE_LESHORT:",
          "974:   p->h = (short)((p->hs[1]<<8)|(p->hs[0]));",
          "",
          "[Removed Lines]",
          "971:   cvt_64(p, m);",
          "",
          "[Added Lines]",
          "973:   if (type == FILE_BEQUAD)",
          "974:    cvt_64(p, m);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "979:  case FILE_LELDATE:",
          "980:   p->l = (int32_t)",
          "981:       ((p->hl[3]<<24)|(p->hl[2]<<16)|(p->hl[1]<<8)|(p->hl[0]));",
          "983:   return 1;",
          "984:  case FILE_LEQUAD:",
          "985:  case FILE_LEQDATE:",
          "",
          "[Removed Lines]",
          "982:   cvt_32(p, m);",
          "",
          "[Added Lines]",
          "985:   if (type == FILE_LELONG)",
          "986:    cvt_32(p, m);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "990:        ((uint64_t)p->hq[5]<<40)|((uint64_t)p->hq[4]<<32)|",
          "991:        ((uint64_t)p->hq[3]<<24)|((uint64_t)p->hq[2]<<16)|",
          "992:        ((uint64_t)p->hq[1]<<8)|((uint64_t)p->hq[0]));",
          "994:   return 1;",
          "995:  case FILE_MELONG:",
          "996:  case FILE_MEDATE:",
          "997:  case FILE_MELDATE:",
          "998:   p->l = (int32_t)",
          "999:       ((p->hl[1]<<24)|(p->hl[0]<<16)|(p->hl[3]<<8)|(p->hl[2]));",
          "1001:   return 1;",
          "1002:  case FILE_FLOAT:",
          "1003:   cvt_float(p, m);",
          "",
          "[Removed Lines]",
          "993:   cvt_64(p, m);",
          "1000:   cvt_32(p, m);",
          "",
          "[Added Lines]",
          "997:   if (type == FILE_LEQUAD)",
          "998:    cvt_64(p, m);",
          "1005:   if (type == FILE_MELONG)",
          "1006:    cvt_32(p, m);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1055: private int",
          "1056: mcopy(struct magic_set *ms, union VALUETYPE *p, int type, int indir,",
          "1058: {",
          "",
          "[Removed Lines]",
          "1057:     const unsigned char *s, uint32_t offset, size_t nbytes, size_t linecnt)",
          "",
          "[Added Lines]",
          "1063:     const unsigned char *s, uint32_t offset, size_t nbytes, struct magic *m)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1076:    const char *end;",
          "1079:    if (s == NULL) {",
          "1080:     ms->search.s_len = 0;",
          "1081:     ms->search.s = NULL;",
          "1082:     return 0;",
          "1083:    }",
          "1084:    buf = RCAST(const char *, s) + offset;",
          "1087:    for (lines = linecnt, b = buf; lines && b < end &&",
          "1088:         ((b = CAST(const char *,",
          "",
          "[Removed Lines]",
          "1077:    size_t lines;",
          "1085:    end = last = RCAST(const char *, s) + nbytes;",
          "",
          "[Added Lines]",
          "1083:    size_t lines, linecnt, bytecnt;",
          "1091:    if (m->str_flags & REGEX_LINE_COUNT) {",
          "1092:     linecnt = m->str_range;",
          "1093:     bytecnt = linecnt * 80;",
          "1094:    } else {",
          "1095:     linecnt = 0;",
          "1096:     bytecnt = m->str_range;",
          "1097:    }",
          "1099:    if (bytecnt == 0)",
          "1100:     bytecnt = 8192;",
          "1101:    if (bytecnt > nbytes)",
          "1102:     bytecnt = nbytes;",
          "1105:    end = last = RCAST(const char *, s) + bytecnt;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1095:      b++;",
          "1096:    }",
          "1097:    if (lines)",
          "1100:    ms->search.s = buf;",
          "1101:    ms->search.s_len = last - buf;",
          "",
          "[Removed Lines]",
          "1098:     last = RCAST(const char *, s) + nbytes;",
          "",
          "[Added Lines]",
          "1118:     last = RCAST(const char *, s) + bytecnt;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1166:     int *need_separator, int *returnval)",
          "1167: {",
          "1168:  uint32_t soffset, offset = ms->offset;",
          "1170:  uint32_t lhs;",
          "1171:  int rv, oneed_separator, in_type;",
          "1172:  char *sbuf, *rbuf;",
          "",
          "[Removed Lines]",
          "1169:  uint32_t count = m->str_range;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1179:  }",
          "1181:  if (mcopy(ms, p, m->type, m->flag & INDIR, s, (uint32_t)(offset + o),",
          "1183:   return -1;",
          "1185:  if ((ms->flags & MAGIC_DEBUG) != 0) {",
          "1186:   fprintf(stderr, \"mget(type=%d, flag=%x, offset=%u, o=%zu, \"",
          "1189:   mdebug(offset, (char *)(void *)p, sizeof(union VALUETYPE));",
          "1190: #ifndef COMPILE_ONLY",
          "1191:   file_mdump(m);",
          "",
          "[Removed Lines]",
          "1182:      (uint32_t)nbytes, count) == -1)",
          "1187:       \"nbytes=%zu, count=%u)\\n\", m->type, m->flag, offset, o,",
          "1188:       nbytes, count);",
          "",
          "[Added Lines]",
          "1201:      (uint32_t)nbytes, m) == -1)",
          "1206:       \"nbytes=%zu)\\n\", m->type, m->flag, offset, o, nbytes);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1550:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "1551:     fprintf(stderr, \"indirect +offs=%u\\n\", offset);",
          "1552:   }",
          "1554:    return -1;",
          "1555:   ms->offset = offset;",
          "",
          "[Removed Lines]",
          "1553:   if (mcopy(ms, p, m->type, 0, s, offset, nbytes, count) == -1)",
          "",
          "[Added Lines]",
          "1571:   if (mcopy(ms, p, m->type, 0, s, offset, nbytes, m) == -1)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1906:    if (slen + idx > ms->search.s_len)",
          "1907:     break;",
          "1911:     ms->search.offset += idx;",
          "1912:     break;",
          "",
          "[Removed Lines]",
          "1909:    v = file_strncmp(m->value.s, ms->search.s + idx, slen, m->str_flags);",
          "",
          "[Added Lines]",
          "1927:    v = file_strncmp(m->value.s, ms->search.s + idx, slen,",
          "1928:        m->str_flags);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1929:    file_regerror(&rx, rc, ms);",
          "1930:    v = (uint64_t)-1;",
          "1931:   } else {",
          "1935:    regmatch_t pmatch[1];",
          "1936:    size_t slen = ms->search.s_len;",
          "1940: #ifndef REG_STARTEND",
          "1941: #define REG_STARTEND 0",
          "1942:    if (slen != 0)",
          "1943:     slen--;",
          "1944:    c = ms->search.s[slen];",
          "",
          "[Removed Lines]",
          "1932: #ifndef REG_STARTEND",
          "1933:    char c;",
          "1934: #endif",
          "1938:    if (m->str_range > 0)",
          "1939:     slen = MIN(slen, m->str_range);",
          "",
          "[Added Lines]",
          "1955:    char c;",
          "",
          "---------------"
        ]
      }
    }
  ]
}