{
  "cve_id": "CVE-2017-15088",
  "cve_desc": "plugins/preauth/pkinit/pkinit_crypto_openssl.c in MIT Kerberos 5 (aka krb5) through 1.15.2 mishandles Distinguished Name (DN) fields, which allows remote attackers to execute arbitrary code or cause a denial of service (buffer overflow and application crash) in situations involving untrusted X.509 data, related to the get_matching_data and X509_NAME_oneline_ex functions. NOTE: this has security relevance only in use cases outside of the MIT Kerberos distribution, e.g., the use of get_matching_data in KDC certauth plugin code that is specific to Red Hat.",
  "repo": "krb5/krb5",
  "patch_hash": "fbb687db1088ddd894d975996e5f6a4252b9a2b4",
  "patch_info": {
    "commit_hash": "fbb687db1088ddd894d975996e5f6a4252b9a2b4",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/fbb687db1088ddd894d975996e5f6a4252b9a2b4",
    "files": [
      "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
    ],
    "message": "Fix PKINIT cert matching data construction\n\nRewrite X509_NAME_oneline_ex() and its call sites to use dynamic\nallocation and to perform proper error checking.\n\nticket: 8617\ntarget_version: 1.16\ntarget_version: 1.15-next\ntarget_version: 1.14-next\ntags: pullup",
    "before_after_code_files": [
      "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
    ]
  },
  "patch_diff": {
    "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c": [
      "File: src/plugins/preauth/pkinit/pkinit_crypto_openssl.c -> src/plugins/preauth/pkinit/pkinit_crypto_openssl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5002:     return retval;",
      "5003: }",
      "5017: {",
      "5032: }",
      "",
      "[Removed Lines]",
      "5012: static char *",
      "5013: X509_NAME_oneline_ex(X509_NAME * a,",
      "5014:                      char *buf,",
      "5015:                      unsigned int *size,",
      "5016:                      unsigned long flag)",
      "5018:     BIO *out = NULL;",
      "5020:     out = BIO_new(BIO_s_mem ());",
      "5021:     if (X509_NAME_print_ex(out, a, 0, flag) > 0) {",
      "5022:         if (buf != NULL && (*size) >  (unsigned int) BIO_number_written(out)) {",
      "5023:             memset(buf, 0, *size);",
      "5024:             BIO_read(out, buf, (int) BIO_number_written(out));",
      "5025:         }",
      "5026:         else {",
      "5028:         }",
      "5029:     }",
      "5030:     BIO_free(out);",
      "5031:     return (buf);",
      "",
      "[Added Lines]",
      "5005: static krb5_error_code",
      "5006: rfc2253_name(X509_NAME *name, char **str_out)",
      "5008:     BIO *b = NULL;",
      "5009:     char *str;",
      "5012:     b = BIO_new(BIO_s_mem());",
      "5013:     if (b == NULL)",
      "5014:         return ENOMEM;",
      "5015:     if (X509_NAME_print_ex(b, name, 0, XN_FLAG_SEP_COMMA_PLUS) < 0)",
      "5016:         goto error;",
      "5017:     str = calloc(BIO_number_written(b) + 1, 1);",
      "5018:     if (str == NULL)",
      "5019:         goto error;",
      "5020:     BIO_read(b, str, BIO_number_written(b));",
      "5021:     BIO_free(b);",
      "5023:     return 0;",
      "5025: error:",
      "5026:     BIO_free(b);",
      "5027:     return ENOMEM;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5094:     pkinit_cert_matching_data *md = NULL;",
      "5095:     krb5_principal *pkinit_sans = NULL, *upn_sans = NULL;",
      "5096:     size_t i, j;",
      "",
      "[Removed Lines]",
      "5097:     char buf[DN_BUF_LEN];",
      "5098:     unsigned int bufsize = sizeof(buf);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5103:     if (md == NULL)",
      "5104:         goto cleanup;",
      "5112:         goto cleanup;",
      "5121:         goto cleanup;",
      "5125:     ret = crypto_retrieve_X509_sans(context, plg_cryptoctx, req_cryptoctx,",
      "",
      "[Removed Lines]",
      "5107:     X509_NAME_oneline_ex(X509_get_subject_name(cert), buf, &bufsize,",
      "5108:                          XN_FLAG_SEP_COMMA_PLUS);",
      "5109:     md->subject_dn = strdup(buf);",
      "5110:     if (md->subject_dn == NULL) {",
      "5111:         ret = ENOMEM;",
      "5113:     }",
      "5116:     X509_NAME_oneline_ex(X509_get_issuer_name(cert), buf, &bufsize,",
      "5117:                          XN_FLAG_SEP_COMMA_PLUS);",
      "5118:     md->issuer_dn = strdup(buf);",
      "5119:     if (md->issuer_dn == NULL) {",
      "5120:         ret = ENOMEM;",
      "5122:     }",
      "",
      "[Added Lines]",
      "5100:     ret = rfc2253_name(X509_get_subject_name(cert), &md->subject_dn);",
      "5101:     if (ret)",
      "5103:     ret = rfc2253_name(X509_get_issuer_name(cert), &md->issuer_dn);",
      "5104:     if (ret)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ee6402efe38cbdf8b858d8f6a528e44c63b2c4dc",
      "candidate_info": {
        "commit_hash": "ee6402efe38cbdf8b858d8f6a528e44c63b2c4dc",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/ee6402efe38cbdf8b858d8f6a528e44c63b2c4dc",
        "files": [
          "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
        ],
        "message": "Fix PKINIT cert matching data construction\n\nRewrite X509_NAME_oneline_ex() and its call sites to use dynamic\nallocation and to perform proper error checking.\n\nticket: 8617\ntarget_version: 1.16\ntarget_version: 1.15-next\ntarget_version: 1.14-next\ntags: pullup\n(cherry picked from commit fbb687db1088ddd894d975996e5f6a4252b9a2b4)",
        "before_after_code_files": [
          "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
          ],
          "candidate": [
            "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c": [
          "File: src/plugins/preauth/pkinit/pkinit_crypto_openssl.c -> src/plugins/preauth/pkinit/pkinit_crypto_openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5002:     return retval;",
          "5003: }",
          "5017: {",
          "5032: }",
          "",
          "[Removed Lines]",
          "5012: static char *",
          "5013: X509_NAME_oneline_ex(X509_NAME * a,",
          "5014:                      char *buf,",
          "5015:                      unsigned int *size,",
          "5016:                      unsigned long flag)",
          "5018:     BIO *out = NULL;",
          "5020:     out = BIO_new(BIO_s_mem ());",
          "5021:     if (X509_NAME_print_ex(out, a, 0, flag) > 0) {",
          "5022:         if (buf != NULL && (*size) >  (unsigned int) BIO_number_written(out)) {",
          "5023:             memset(buf, 0, *size);",
          "5024:             BIO_read(out, buf, (int) BIO_number_written(out));",
          "5025:         }",
          "5026:         else {",
          "5028:         }",
          "5029:     }",
          "5030:     BIO_free(out);",
          "5031:     return (buf);",
          "",
          "[Added Lines]",
          "5005: static krb5_error_code",
          "5006: rfc2253_name(X509_NAME *name, char **str_out)",
          "5008:     BIO *b = NULL;",
          "5009:     char *str;",
          "5012:     b = BIO_new(BIO_s_mem());",
          "5013:     if (b == NULL)",
          "5014:         return ENOMEM;",
          "5015:     if (X509_NAME_print_ex(b, name, 0, XN_FLAG_SEP_COMMA_PLUS) < 0)",
          "5016:         goto error;",
          "5017:     str = calloc(BIO_number_written(b) + 1, 1);",
          "5018:     if (str == NULL)",
          "5019:         goto error;",
          "5020:     BIO_read(b, str, BIO_number_written(b));",
          "5021:     BIO_free(b);",
          "5023:     return 0;",
          "5025: error:",
          "5026:     BIO_free(b);",
          "5027:     return ENOMEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5094:     pkinit_cert_matching_data *md = NULL;",
          "5095:     krb5_principal *pkinit_sans = NULL, *upn_sans = NULL;",
          "5096:     size_t i, j;",
          "",
          "[Removed Lines]",
          "5097:     char buf[DN_BUF_LEN];",
          "5098:     unsigned int bufsize = sizeof(buf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5103:     if (md == NULL)",
          "5104:         goto cleanup;",
          "5112:         goto cleanup;",
          "5121:         goto cleanup;",
          "5125:     ret = crypto_retrieve_X509_sans(context, plg_cryptoctx, req_cryptoctx,",
          "",
          "[Removed Lines]",
          "5107:     X509_NAME_oneline_ex(X509_get_subject_name(cert), buf, &bufsize,",
          "5108:                          XN_FLAG_SEP_COMMA_PLUS);",
          "5109:     md->subject_dn = strdup(buf);",
          "5110:     if (md->subject_dn == NULL) {",
          "5111:         ret = ENOMEM;",
          "5113:     }",
          "5116:     X509_NAME_oneline_ex(X509_get_issuer_name(cert), buf, &bufsize,",
          "5117:                          XN_FLAG_SEP_COMMA_PLUS);",
          "5118:     md->issuer_dn = strdup(buf);",
          "5119:     if (md->issuer_dn == NULL) {",
          "5120:         ret = ENOMEM;",
          "5122:     }",
          "",
          "[Added Lines]",
          "5100:     ret = rfc2253_name(X509_get_subject_name(cert), &md->subject_dn);",
          "5101:     if (ret)",
          "5103:     ret = rfc2253_name(X509_get_issuer_name(cert), &md->issuer_dn);",
          "5104:     if (ret)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f36ae41714f669e971e9334fe471f8a924386cc6",
      "candidate_info": {
        "commit_hash": "f36ae41714f669e971e9334fe471f8a924386cc6",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/f36ae41714f669e971e9334fe471f8a924386cc6",
        "files": [
          "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
        ],
        "message": "Fix PKINIT cert matching data construction\n\nRewrite X509_NAME_oneline_ex() and its call sites to use dynamic\nallocation and to perform proper error checking.\n\n(cherry picked from commit fbb687db1088ddd894d975996e5f6a4252b9a2b4)\n\nticket: 8617\nversion_fixed: 1.15.3",
        "before_after_code_files": [
          "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
          ],
          "candidate": [
            "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c": [
          "File: src/plugins/preauth/pkinit/pkinit_crypto_openssl.c -> src/plugins/preauth/pkinit/pkinit_crypto_openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5145:     return retval;",
          "5146: }",
          "5160: {",
          "5175: }",
          "",
          "[Removed Lines]",
          "5155: static char *",
          "5156: X509_NAME_oneline_ex(X509_NAME * a,",
          "5157:                      char *buf,",
          "5158:                      unsigned int *size,",
          "5159:                      unsigned long flag)",
          "5161:     BIO *out = NULL;",
          "5163:     out = BIO_new(BIO_s_mem ());",
          "5164:     if (X509_NAME_print_ex(out, a, 0, flag) > 0) {",
          "5165:         if (buf != NULL && (*size) >  (unsigned int) BIO_number_written(out)) {",
          "5166:             memset(buf, 0, *size);",
          "5167:             BIO_read(out, buf, (int) BIO_number_written(out));",
          "5168:         }",
          "5169:         else {",
          "5171:         }",
          "5172:     }",
          "5173:     BIO_free(out);",
          "5174:     return (buf);",
          "",
          "[Added Lines]",
          "5148: static krb5_error_code",
          "5149: rfc2253_name(X509_NAME *name, char **str_out)",
          "5151:     BIO *b = NULL;",
          "5152:     char *str;",
          "5155:     b = BIO_new(BIO_s_mem());",
          "5156:     if (b == NULL)",
          "5157:         return ENOMEM;",
          "5158:     if (X509_NAME_print_ex(b, name, 0, XN_FLAG_SEP_COMMA_PLUS) < 0)",
          "5159:         goto error;",
          "5160:     str = calloc(BIO_number_written(b) + 1, 1);",
          "5161:     if (str == NULL)",
          "5162:         goto error;",
          "5163:     BIO_read(b, str, BIO_number_written(b));",
          "5164:     BIO_free(b);",
          "5166:     return 0;",
          "5168: error:",
          "5169:     BIO_free(b);",
          "5170:     return ENOMEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5187:     krb5_principal *pkinit_sans =NULL, *upn_sans = NULL;",
          "5188:     struct _pkinit_cert_data *cd = (struct _pkinit_cert_data *)ch;",
          "5189:     unsigned int i, j;",
          "5193:     if (cd == NULL || cd->magic != CERT_MAGIC)",
          "5194:         return EINVAL;",
          "",
          "[Removed Lines]",
          "5190:     char buf[DN_BUF_LEN];",
          "5191:     unsigned int bufsize = sizeof(buf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5202:     md->ch = ch;",
          "5210:         goto cleanup;",
          "5219:         goto cleanup;",
          "5223:     retval = crypto_retrieve_X509_sans(context, cd->plgctx, cd->reqctx,",
          "",
          "[Removed Lines]",
          "5205:     X509_NAME_oneline_ex(X509_get_subject_name(cd->cred->cert),",
          "5206:                          buf, &bufsize, XN_FLAG_SEP_COMMA_PLUS);",
          "5207:     md->subject_dn = strdup(buf);",
          "5208:     if (md->subject_dn == NULL) {",
          "5209:         retval = ENOMEM;",
          "5211:     }",
          "5214:     X509_NAME_oneline_ex(X509_get_issuer_name(cd->cred->cert),",
          "5215:                          buf, &bufsize, XN_FLAG_SEP_COMMA_PLUS);",
          "5216:     md->issuer_dn = strdup(buf);",
          "5217:     if (md->issuer_dn == NULL) {",
          "5218:         retval = ENOMEM;",
          "5220:     }",
          "",
          "[Added Lines]",
          "5198:     retval = rfc2253_name(X509_get_subject_name(cd->cred->cert),",
          "5199:                           &md->subject_dn);",
          "5200:     if (retval)",
          "5202:     retval = rfc2253_name(X509_get_issuer_name(cd->cred->cert),",
          "5203:                           &md->issuer_dn);",
          "5204:     if (retval)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5bae4fe119e22accab3d9045a9524530995596e9",
      "candidate_info": {
        "commit_hash": "5bae4fe119e22accab3d9045a9524530995596e9",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/5bae4fe119e22accab3d9045a9524530995596e9",
        "files": [
          "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
        ],
        "message": "Fix PKINIT cert matching data construction\n\nRewrite X509_NAME_oneline_ex() and its call sites to use dynamic\nallocation and to perform proper error checking.\n\n(cherry picked from commit fbb687db1088ddd894d975996e5f6a4252b9a2b4)\n\nticket: 8617\nversion_fixed: 1.14.7",
        "before_after_code_files": [
          "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
          ],
          "candidate": [
            "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c": [
          "File: src/plugins/preauth/pkinit/pkinit_crypto_openssl.c -> src/plugins/preauth/pkinit/pkinit_crypto_openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4982:     return retval;",
          "4983: }",
          "4997: {",
          "5012: }",
          "",
          "[Removed Lines]",
          "4992: static char *",
          "4993: X509_NAME_oneline_ex(X509_NAME * a,",
          "4994:                      char *buf,",
          "4995:                      unsigned int *size,",
          "4996:                      unsigned long flag)",
          "4998:     BIO *out = NULL;",
          "5000:     out = BIO_new(BIO_s_mem ());",
          "5001:     if (X509_NAME_print_ex(out, a, 0, flag) > 0) {",
          "5002:         if (buf != NULL && (*size) >  (unsigned int) BIO_number_written(out)) {",
          "5003:             memset(buf, 0, *size);",
          "5004:             BIO_read(out, buf, (int) BIO_number_written(out));",
          "5005:         }",
          "5006:         else {",
          "5008:         }",
          "5009:     }",
          "5010:     BIO_free(out);",
          "5011:     return (buf);",
          "",
          "[Added Lines]",
          "4985: static krb5_error_code",
          "4986: rfc2253_name(X509_NAME *name, char **str_out)",
          "4988:     BIO *b = NULL;",
          "4989:     char *str;",
          "4992:     b = BIO_new(BIO_s_mem());",
          "4993:     if (b == NULL)",
          "4994:         return ENOMEM;",
          "4995:     if (X509_NAME_print_ex(b, name, 0, XN_FLAG_SEP_COMMA_PLUS) < 0)",
          "4996:         goto error;",
          "4997:     str = calloc(BIO_number_written(b) + 1, 1);",
          "4998:     if (str == NULL)",
          "4999:         goto error;",
          "5000:     BIO_read(b, str, BIO_number_written(b));",
          "5001:     BIO_free(b);",
          "5003:     return 0;",
          "5005: error:",
          "5006:     BIO_free(b);",
          "5007:     return ENOMEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5024:     krb5_principal *pkinit_sans =NULL, *upn_sans = NULL;",
          "5025:     struct _pkinit_cert_data *cd = (struct _pkinit_cert_data *)ch;",
          "5026:     unsigned int i, j;",
          "5030:     if (cd == NULL || cd->magic != CERT_MAGIC)",
          "5031:         return EINVAL;",
          "",
          "[Removed Lines]",
          "5027:     char buf[DN_BUF_LEN];",
          "5028:     unsigned int bufsize = sizeof(buf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5039:     md->ch = ch;",
          "5047:         goto cleanup;",
          "5056:         goto cleanup;",
          "5060:     retval = crypto_retrieve_X509_sans(context, cd->plgctx, cd->reqctx,",
          "",
          "[Removed Lines]",
          "5042:     X509_NAME_oneline_ex(X509_get_subject_name(cd->cred->cert),",
          "5043:                          buf, &bufsize, XN_FLAG_SEP_COMMA_PLUS);",
          "5044:     md->subject_dn = strdup(buf);",
          "5045:     if (md->subject_dn == NULL) {",
          "5046:         retval = ENOMEM;",
          "5048:     }",
          "5051:     X509_NAME_oneline_ex(X509_get_issuer_name(cd->cred->cert),",
          "5052:                          buf, &bufsize, XN_FLAG_SEP_COMMA_PLUS);",
          "5053:     md->issuer_dn = strdup(buf);",
          "5054:     if (md->issuer_dn == NULL) {",
          "5055:         retval = ENOMEM;",
          "5057:     }",
          "",
          "[Added Lines]",
          "5035:     retval = rfc2253_name(X509_get_subject_name(cd->cred->cert),",
          "5036:                           &md->subject_dn);",
          "5037:     if (retval)",
          "5039:     retval = rfc2253_name(X509_get_issuer_name(cd->cred->cert),",
          "5040:                           &md->issuer_dn);",
          "5041:     if (retval)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01b1c0e26252a00f2215408b0e473b84aa0f6a87",
      "candidate_info": {
        "commit_hash": "01b1c0e26252a00f2215408b0e473b84aa0f6a87",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/01b1c0e26252a00f2215408b0e473b84aa0f6a87",
        "files": [
          "src/plugins/preauth/pkinit/pkinit_crypto.h",
          "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c",
          "src/plugins/preauth/pkinit/pkinit_crypto_openssl.h",
          "src/plugins/preauth/pkinit/pkinit_matching.c"
        ],
        "message": "Simplify PKINIT cert iteration and selection\n\nRemove the pkinit_cert_handle structures and iteration functions used\nduring certificate matching.  Instead, make pkinit_matching.c obtain a\nlist of matching data objects from the crypto code, and then select a\ncert based on the index into that list.\n\nAlso fix a typo in the name of crypto_retrieve_X509_key_usage().\n\n[ghudson@mit.edu: simplified code]",
        "before_after_code_files": [
          "src/plugins/preauth/pkinit/pkinit_crypto.h||src/plugins/preauth/pkinit/pkinit_crypto.h",
          "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c",
          "src/plugins/preauth/pkinit/pkinit_crypto_openssl.h||src/plugins/preauth/pkinit/pkinit_crypto_openssl.h",
          "src/plugins/preauth/pkinit/pkinit_matching.c||src/plugins/preauth/pkinit/pkinit_matching.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
          ],
          "candidate": [
            "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/preauth/pkinit/pkinit_crypto.h||src/plugins/preauth/pkinit/pkinit_crypto.h": [
          "File: src/plugins/preauth/pkinit/pkinit_crypto.h -> src/plugins/preauth/pkinit/pkinit_crypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "463: krb5_error_code crypto_cert_get_count",
          "473: krb5_error_code crypto_cert_iteration_begin",
          "483: krb5_error_code crypto_cert_iteration_end",
          "490: krb5_error_code crypto_cert_iteration_next",
          "498: krb5_error_code crypto_cert_release",
          "505: krb5_error_code crypto_cert_get_matching_data",
          "513: krb5_error_code crypto_cert_free_matching_data",
          "520: krb5_error_code crypto_cert_select",
          "",
          "[Added Lines]",
          "463: krb5_error_code",
          "464: crypto_cert_get_matching_data(krb5_context context,",
          "465:          pkinit_plg_crypto_context plg_cryptoctx,",
          "466:          pkinit_req_crypto_context req_cryptoctx,",
          "467:          pkinit_identity_crypto_context id_cryptoctx,",
          "468:          pkinit_cert_matching_data ***md_out);",
          "473: void",
          "474: crypto_cert_free_matching_data(krb5_context context,",
          "475:           pkinit_cert_matching_data *md);",
          "480: void",
          "481: crypto_cert_free_matching_data_list(krb5_context context,",
          "482:         pkinit_cert_matching_data **matchdata);",
          "489: krb5_error_code",
          "490: crypto_cert_select(krb5_context context, pkinit_identity_crypto_context idctx,",
          "491:      size_t cred_index);",
          "",
          "---------------"
        ],
        "src/plugins/preauth/pkinit/pkinit_crypto_openssl.c||src/plugins/preauth/pkinit/pkinit_crypto_openssl.c": [
          "File: src/plugins/preauth/pkinit/pkinit_crypto_openssl.c -> src/plugins/preauth/pkinit/pkinit_crypto_openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4943:     return retval;",
          "4944: }",
          "5069: static krb5_error_code",
          "5076: {",
          "5077:     krb5_error_code retval = 0;",
          "5078:     int i;",
          "",
          "[Removed Lines]",
          "4949: krb5_error_code",
          "4950: crypto_cert_get_count(krb5_context context,",
          "4951:                       pkinit_plg_crypto_context plg_cryptoctx,",
          "4952:                       pkinit_req_crypto_context req_cryptoctx,",
          "4953:                       pkinit_identity_crypto_context id_cryptoctx,",
          "4954:                       int *cert_count)",
          "4955: {",
          "4956:     int count;",
          "4958:     if (id_cryptoctx == NULL || id_cryptoctx->creds[0] == NULL)",
          "4959:         return EINVAL;",
          "4961:     for (count = 0;",
          "4962:          count <= MAX_CREDS_ALLOWED && id_cryptoctx->creds[count] != NULL;",
          "4963:          count++);",
          "4965:     return 0;",
          "4966: }",
          "4972: krb5_error_code",
          "4973: crypto_cert_iteration_begin(krb5_context context,",
          "4974:                             pkinit_plg_crypto_context plg_cryptoctx,",
          "4975:                             pkinit_req_crypto_context req_cryptoctx,",
          "4976:                             pkinit_identity_crypto_context id_cryptoctx,",
          "4977:                             pkinit_cert_iter_handle *ih_ret)",
          "4978: {",
          "4979:     struct _pkinit_cert_iter_data *id;",
          "4981:     if (id_cryptoctx == NULL || ih_ret == NULL)",
          "4982:         return EINVAL;",
          "4984:         return ENOENT;",
          "4986:     id = calloc(1, sizeof(*id));",
          "4987:     if (id == NULL)",
          "4988:         return ENOMEM;",
          "4989:     id->magic = ITER_MAGIC;",
          "4990:     id->plgctx = plg_cryptoctx,",
          "4991:         id->reqctx = req_cryptoctx,",
          "4992:         id->idctx = id_cryptoctx;",
          "4993:     id->index = 0;",
          "4995:     return 0;",
          "4996: }",
          "5001: krb5_error_code",
          "5002: crypto_cert_iteration_end(krb5_context context,",
          "5003:                           pkinit_cert_iter_handle ih)",
          "5004: {",
          "5005:     struct _pkinit_cert_iter_data *id = (struct _pkinit_cert_iter_data *)ih;",
          "5007:     if (id == NULL || id->magic != ITER_MAGIC)",
          "5008:         return EINVAL;",
          "5009:     free(ih);",
          "5010:     return 0;",
          "5011: }",
          "5016: krb5_error_code",
          "5017: crypto_cert_iteration_next(krb5_context context,",
          "5018:                            pkinit_cert_iter_handle ih,",
          "5019:                            pkinit_cert_handle *ch_ret)",
          "5020: {",
          "5021:     struct _pkinit_cert_iter_data *id = (struct _pkinit_cert_iter_data *)ih;",
          "5022:     struct _pkinit_cert_data *cd;",
          "5023:     pkinit_identity_crypto_context id_cryptoctx;",
          "5025:     if (id == NULL || id->magic != ITER_MAGIC)",
          "5026:         return EINVAL;",
          "5028:     if (ch_ret == NULL)",
          "5029:         return EINVAL;",
          "5031:     id_cryptoctx = id->idctx;",
          "5032:     if (id_cryptoctx == NULL)",
          "5033:         return EINVAL;",
          "5035:     if (id_cryptoctx->creds[id->index] == NULL)",
          "5036:         return PKINIT_ITER_NO_MORE;",
          "5038:     cd = calloc(1, sizeof(*cd));",
          "5039:     if (cd == NULL)",
          "5040:         return ENOMEM;",
          "5042:     cd->magic = CERT_MAGIC;",
          "5043:     cd->plgctx = id->plgctx;",
          "5044:     cd->reqctx = id->reqctx;",
          "5045:     cd->idctx = id->idctx;",
          "5046:     cd->index = id->index;",
          "5047:     cd->cred = id_cryptoctx->creds[id->index++];",
          "5049:     return 0;",
          "5050: }",
          "5055: krb5_error_code",
          "5056: crypto_cert_release(krb5_context context,",
          "5057:                     pkinit_cert_handle ch)",
          "5058: {",
          "5059:     struct _pkinit_cert_data *cd = (struct _pkinit_cert_data *)ch;",
          "5060:     if (cd == NULL || cd->magic != CERT_MAGIC)",
          "5061:         return EINVAL;",
          "5062:     free(cd);",
          "5063:     return 0;",
          "5064: }",
          "5070: crypto_retieve_X509_key_usage(krb5_context context,",
          "5071:                               pkinit_plg_crypto_context plgcctx,",
          "5072:                               pkinit_req_crypto_context reqcctx,",
          "5073:                               X509 *x,",
          "5074:                               unsigned int *ret_ku_bits,",
          "5075:                               unsigned int *ret_eku_bits)",
          "",
          "[Added Lines]",
          "4950: crypto_retrieve_X509_key_usage(krb5_context context,",
          "4951:                                pkinit_plg_crypto_context plgcctx,",
          "4952:                                pkinit_req_crypto_context reqcctx,",
          "4953:                                X509 *x,",
          "4954:                                unsigned int *ret_ku_bits,",
          "4955:                                unsigned int *ret_eku_bits)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5171: }",
          "5180: {",
          "5186:     char buf[DN_BUF_LEN];",
          "5187:     unsigned int bufsize = sizeof(buf);",
          "5194:     md = calloc(1, sizeof(*md));",
          "5195:     if (md == NULL)",
          "5203:     md->subject_dn = strdup(buf);",
          "5204:     if (md->subject_dn == NULL) {",
          "5206:         goto cleanup;",
          "5207:     }",
          "5212:     md->issuer_dn = strdup(buf);",
          "5213:     if (md->issuer_dn == NULL) {",
          "5215:         goto cleanup;",
          "5216:     }",
          "5223:         goto cleanup;",
          "5225:     j = 0;",
          "",
          "[Removed Lines]",
          "5176: krb5_error_code",
          "5177: crypto_cert_get_matching_data(krb5_context context,",
          "5178:                               pkinit_cert_handle ch,",
          "5179:                               pkinit_cert_matching_data **ret_md)",
          "5181:     krb5_error_code retval;",
          "5182:     pkinit_cert_matching_data *md;",
          "5183:     krb5_principal *pkinit_sans =NULL, *upn_sans = NULL;",
          "5184:     struct _pkinit_cert_data *cd = (struct _pkinit_cert_data *)ch;",
          "5185:     unsigned int i, j;",
          "5189:     if (cd == NULL || cd->magic != CERT_MAGIC)",
          "5190:         return EINVAL;",
          "5191:     if (ret_md == NULL)",
          "5192:         return EINVAL;",
          "5196:         return ENOMEM;",
          "5198:     md->ch = ch;",
          "5201:     X509_NAME_oneline_ex(X509_get_subject_name(cd->cred->cert),",
          "5202:                          buf, &bufsize, XN_FLAG_SEP_COMMA_PLUS);",
          "5205:         retval = ENOMEM;",
          "5210:     X509_NAME_oneline_ex(X509_get_issuer_name(cd->cred->cert),",
          "5211:                          buf, &bufsize, XN_FLAG_SEP_COMMA_PLUS);",
          "5214:         retval = ENOMEM;",
          "5219:     retval = crypto_retrieve_X509_sans(context, cd->plgctx, cd->reqctx,",
          "5220:                                        cd->cred->cert, &pkinit_sans,",
          "5221:                                        &upn_sans, NULL);",
          "5222:     if (retval)",
          "",
          "[Added Lines]",
          "5056: static krb5_error_code",
          "5057: crypto_cert_get_count(pkinit_identity_crypto_context id_cryptoctx,",
          "5058:                       int *cert_count)",
          "5060:     int count;",
          "5063:     if (id_cryptoctx == NULL || id_cryptoctx->creds[0] == NULL)",
          "5064:         return EINVAL;",
          "5066:     for (count = 0;",
          "5067:          count <= MAX_CREDS_ALLOWED && id_cryptoctx->creds[count] != NULL;",
          "5068:          count++);",
          "5070:     return 0;",
          "5071: }",
          "5073: void",
          "5074: crypto_cert_free_matching_data(krb5_context context,",
          "5075:                                pkinit_cert_matching_data *md)",
          "5076: {",
          "5077:     int i;",
          "5079:     if (md == NULL)",
          "5080:         return;",
          "5081:     free(md->subject_dn);",
          "5082:     free(md->issuer_dn);",
          "5083:     for (i = 0; md->sans != NULL && md->sans[i] != NULL; i++)",
          "5084:         krb5_free_principal(context, md->sans[i]);",
          "5085:     free(md->sans);",
          "5086:     free(md);",
          "5087: }",
          "5092: void",
          "5093: crypto_cert_free_matching_data_list(krb5_context context,",
          "5094:                                     pkinit_cert_matching_data **list)",
          "5095: {",
          "5096:     int i;",
          "5098:     for (i = 0; list != NULL && list[i] != NULL; i++)",
          "5099:         crypto_cert_free_matching_data(context, list[i]);",
          "5100:     free(list);",
          "5101: }",
          "5106: static krb5_error_code",
          "5107: get_matching_data(krb5_context context,",
          "5108:                   pkinit_plg_crypto_context plg_cryptoctx,",
          "5109:                   pkinit_req_crypto_context req_cryptoctx, X509 *cert,",
          "5110:                   pkinit_cert_matching_data **md_out)",
          "5111: {",
          "5112:     krb5_error_code ret = ENOMEM;",
          "5113:     pkinit_cert_matching_data *md = NULL;",
          "5114:     krb5_principal *pkinit_sans = NULL, *upn_sans = NULL;",
          "5115:     size_t i, j;",
          "5123:         goto cleanup;",
          "5126:     X509_NAME_oneline_ex(X509_get_subject_name(cert), buf, &bufsize,",
          "5127:                          XN_FLAG_SEP_COMMA_PLUS);",
          "5130:         ret = ENOMEM;",
          "5135:     X509_NAME_oneline_ex(X509_get_issuer_name(cert), buf, &bufsize,",
          "5136:                          XN_FLAG_SEP_COMMA_PLUS);",
          "5139:         ret = ENOMEM;",
          "5144:     ret = crypto_retrieve_X509_sans(context, plg_cryptoctx, req_cryptoctx,",
          "5145:                                     cert, &pkinit_sans, &upn_sans, NULL);",
          "5146:     if (ret)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5234:     if (j != 0) {",
          "5235:         md->sans = calloc((size_t)j+1, sizeof(*md->sans));",
          "5236:         if (md->sans == NULL) {",
          "5238:             goto cleanup;",
          "5239:         }",
          "5240:         j = 0;",
          "",
          "[Removed Lines]",
          "5237:             retval = ENOMEM;",
          "",
          "[Added Lines]",
          "5161:             ret = ENOMEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5252:     } else",
          "5253:         md->sans = NULL;",
          "5261:         goto cleanup;",
          "5265: cleanup:",
          "5271: }",
          "5276: krb5_error_code",
          "5279: {",
          "5293:     }",
          "5296: }",
          "5301: krb5_error_code",
          "5304: {",
          "5323:     else",
          "5331:     }",
          "5332: #ifndef WITHOUT_PKCS11",
          "5333:     else {",
          "5337:     }",
          "5338: #endif",
          "5339:     return 0;",
          "",
          "[Removed Lines]",
          "5257:     retval = crypto_retieve_X509_key_usage(context, cd->plgctx, cd->reqctx,",
          "5258:                                            cd->cred->cert,",
          "5259:                                            &md->ku_bits, &md->eku_bits);",
          "5260:     if (retval)",
          "5264:     retval = 0;",
          "5266:     if (retval) {",
          "5267:         if (md)",
          "5268:             crypto_cert_free_matching_data(context, md);",
          "5269:     }",
          "5270:     return retval;",
          "5277: crypto_cert_free_matching_data(krb5_context context,",
          "5278:                                pkinit_cert_matching_data *md)",
          "5280:     krb5_principal p;",
          "5281:     int i;",
          "5283:     if (md == NULL)",
          "5284:         return EINVAL;",
          "5285:     if (md->subject_dn)",
          "5286:         free(md->subject_dn);",
          "5287:     if (md->issuer_dn)",
          "5288:         free(md->issuer_dn);",
          "5289:     if (md->sans) {",
          "5290:         for (i = 0, p = md->sans[i]; p != NULL; p = md->sans[++i])",
          "5291:             krb5_free_principal(context, p);",
          "5292:         free(md->sans);",
          "5294:     free(md);",
          "5295:     return 0;",
          "5302: crypto_cert_select(krb5_context context,",
          "5303:                    pkinit_cert_matching_data *md)",
          "5305:     struct _pkinit_cert_data *cd;",
          "5306:     if (md == NULL)",
          "5307:         return EINVAL;",
          "5309:     cd = (struct _pkinit_cert_data *)md->ch;",
          "5310:     if (cd == NULL || cd->magic != CERT_MAGIC)",
          "5311:         return EINVAL;",
          "5314:     if (cd->idctx->my_certs != NULL) {",
          "5315:         sk_X509_pop_free(cd->idctx->my_certs, X509_free);",
          "5316:     }",
          "5317:     cd->idctx->my_certs = sk_X509_new_null();",
          "5318:     sk_X509_push(cd->idctx->my_certs, cd->cred->cert);",
          "5319:     free(cd->idctx->identity);",
          "5321:     if (cd->idctx->creds[cd->index]->name != NULL)",
          "5322:         cd->idctx->identity = strdup(cd->idctx->creds[cd->index]->name);",
          "5324:         cd->idctx->identity = NULL;",
          "5326:     cd->idctx->cert_index = 0;",
          "5328:     if (cd->idctx->pkcs11_method != 1) {",
          "5329:         cd->idctx->my_key = cd->cred->key;",
          "5334:         cd->idctx->cert_id = cd->cred->cert_id;",
          "5336:         cd->idctx->cert_id_len = cd->cred->cert_id_len;",
          "",
          "[Added Lines]",
          "5180:     ret = crypto_retrieve_X509_key_usage(context, plg_cryptoctx,",
          "5181:                                          req_cryptoctx, cert, &md->ku_bits,",
          "5182:                                          &md->eku_bits);",
          "5183:     if (ret)",
          "5187:     md = NULL;",
          "5190:     crypto_cert_free_matching_data(context, md);",
          "5191:     return ret;",
          "5195: crypto_cert_get_matching_data(krb5_context context,",
          "5196:                               pkinit_plg_crypto_context plg_cryptoctx,",
          "5197:                               pkinit_req_crypto_context req_cryptoctx,",
          "5198:                               pkinit_identity_crypto_context id_cryptoctx,",
          "5199:                               pkinit_cert_matching_data ***md_out)",
          "5201:     krb5_error_code ret;",
          "5202:     pkinit_cert_matching_data **md_list = NULL;",
          "5203:     int count, i;",
          "5205:     ret = crypto_cert_get_count(id_cryptoctx, &count);",
          "5206:     if (ret)",
          "5207:         goto cleanup;",
          "5209:     md_list = calloc(count + 1, sizeof(*md_list));",
          "5210:     if (md_list == NULL) {",
          "5211:         ret = ENOMEM;",
          "5212:         goto cleanup;",
          "5215:     for (i = 0; i < count; i++) {",
          "5216:         ret = get_matching_data(context, plg_cryptoctx, req_cryptoctx,",
          "5217:                                 id_cryptoctx->creds[i]->cert, &md_list[i]);",
          "5218:         if (ret) {",
          "5219:             pkiDebug(\"%s: crypto_cert_get_matching_data error %d, %s\\n\",",
          "5220:                      __FUNCTION__, ret, error_message(ret));",
          "5221:             goto cleanup;",
          "5222:         }",
          "5223:     }",
          "5226:     md_list = NULL;",
          "5228: cleanup:",
          "5229:     crypto_cert_free_matching_data_list(context, md_list);",
          "5230:     return ret;",
          "5237: crypto_cert_select(krb5_context context, pkinit_identity_crypto_context idctx,",
          "5238:                    size_t cred_index)",
          "5240:     pkinit_cred_info ci = NULL;",
          "5242:     if (cred_index >= MAX_CREDS_ALLOWED || idctx->creds[cred_index] == NULL)",
          "5243:         return ENOENT;",
          "5245:     ci = idctx->creds[cred_index];",
          "5247:     if (idctx->my_certs != NULL)",
          "5248:         sk_X509_pop_free(idctx->my_certs, X509_free);",
          "5249:     idctx->my_certs = sk_X509_new_null();",
          "5250:     sk_X509_push(idctx->my_certs, ci->cert);",
          "5251:     free(idctx->identity);",
          "5253:     if (ci->name != NULL)",
          "5254:         idctx->identity = strdup(ci->name);",
          "5256:         idctx->identity = NULL;",
          "5259:     idctx->cert_index = 0;",
          "5260:     if (idctx->pkcs11_method != 1) {",
          "5261:         idctx->my_key = ci->key;",
          "5266:         idctx->cert_id = ci->cert_id;",
          "5268:         idctx->cert_id_len = ci->cert_id_len;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5349:                            pkinit_identity_crypto_context id_cryptoctx)",
          "5350: {",
          "5351:     krb5_error_code retval;",
          "5359:         goto errout;",
          "5361:     if (cert_count != 1) {",
          "5362:         pkiDebug(\"%s: ERROR: There are %d certs to choose from, \"",
          "5363:                  \"but there must be exactly one.\\n\",",
          "",
          "[Removed Lines]",
          "5352:     int cert_count = 0;",
          "5354:     retval = crypto_cert_get_count(context, plg_cryptoctx, req_cryptoctx,",
          "5355:                                    id_cryptoctx, &cert_count);",
          "5356:     if (retval) {",
          "5357:         pkiDebug(\"%s: crypto_cert_get_count error %d, %s\\n\",",
          "5358:                  __FUNCTION__, retval, error_message(retval));",
          "5360:     }",
          "",
          "[Added Lines]",
          "5284:     int cert_count;",
          "5286:     retval = crypto_cert_get_count(id_cryptoctx, &cert_count);",
          "5287:     if (retval)",
          "",
          "---------------"
        ],
        "src/plugins/preauth/pkinit/pkinit_crypto_openssl.h||src/plugins/preauth/pkinit/pkinit_crypto_openssl.h": [
          "File: src/plugins/preauth/pkinit/pkinit_crypto_openssl.h -> src/plugins/preauth/pkinit/pkinit_crypto_openssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:     DH *dh;",
          "116: };",
          "",
          "[Removed Lines]",
          "118: #define CERT_MAGIC 0x53534c43",
          "119: struct _pkinit_cert_data {",
          "120:     unsigned int magic;",
          "121:     pkinit_plg_crypto_context plgctx;",
          "122:     pkinit_req_crypto_context reqctx;",
          "123:     pkinit_identity_crypto_context idctx;",
          "124:     pkinit_cred_info cred;",
          "126: };",
          "128: #define ITER_MAGIC 0x53534c49",
          "129: struct _pkinit_cert_iter_data {",
          "130:     unsigned int magic;",
          "131:     pkinit_plg_crypto_context plgctx;",
          "132:     pkinit_req_crypto_context reqctx;",
          "133:     pkinit_identity_crypto_context idctx;",
          "134:     unsigned int index;",
          "135: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/plugins/preauth/pkinit/pkinit_matching.c||src/plugins/preauth/pkinit/pkinit_matching.c": [
          "File: src/plugins/preauth/pkinit/pkinit_matching.c -> src/plugins/preauth/pkinit/pkinit_matching.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:                 pkinit_cert_matching_data **matchdata,",
          "546:                 int *match_found,",
          "548: {",
          "549:     krb5_error_code retval;",
          "550:     pkinit_cert_matching_data *md;",
          "",
          "[Removed Lines]",
          "547:                 pkinit_cert_matching_data **matching_cert)",
          "",
          "[Added Lines]",
          "547:                 size_t *match_index)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "553:     int total_cert_matches = 0;",
          "554:     rule_component *rc;",
          "555:     int certs_checked = 0;",
          "559:         return EINVAL;",
          "564:     pkiDebug(\"%s: matching rule relation is %s with %d components\\n\",",
          "",
          "[Removed Lines]",
          "556:     pkinit_cert_matching_data *save_match = NULL;",
          "558:     if (match_found == NULL || matching_cert == NULL)",
          "",
          "[Added Lines]",
          "556:     size_t save_index = 0;",
          "558:     if (match_found == NULL || match_index == NULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "590:                 pkiDebug(\"%s: cert matches rule (OR relation)\\n\",",
          "591:                          __FUNCTION__);",
          "592:                 total_cert_matches++;",
          "594:                 goto nextcert;",
          "595:             }",
          "596:             if (!comp_match && rs->relation == relation_and) {",
          "",
          "[Removed Lines]",
          "593:                 save_match = md;",
          "",
          "[Added Lines]",
          "593:                 save_index = i;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "602:         if (rc == NULL && comp_match) {",
          "603:             pkiDebug(\"%s: cert matches rule (AND relation)\\n\", __FUNCTION__);",
          "604:             total_cert_matches++;",
          "606:         }",
          "607:     nextcert:",
          "608:         continue;",
          "",
          "[Removed Lines]",
          "605:             save_match = md;",
          "",
          "[Added Lines]",
          "605:             save_index = i;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "621:     return retval;",
          "622: }",
          "729: krb5_error_code",
          "730: pkinit_cert_matching(krb5_context context,",
          "731:                      pkinit_plg_crypto_context plg_cryptoctx,",
          "",
          "[Removed Lines]",
          "624: static krb5_error_code",
          "625: free_all_cert_matching_data(krb5_context context,",
          "626:                             pkinit_cert_matching_data **matchdata)",
          "627: {",
          "628:     krb5_error_code retval;",
          "629:     pkinit_cert_matching_data *md;",
          "630:     int i;",
          "632:     if (matchdata == NULL)",
          "633:         return EINVAL;",
          "635:     for (i = 0, md = matchdata[i]; md != NULL; md = matchdata[++i]) {",
          "636:         pkinit_cert_handle ch = md->ch;",
          "637:         retval = crypto_cert_free_matching_data(context, md);",
          "638:         if (retval) {",
          "639:             pkiDebug(\"%s: crypto_cert_free_matching_data error %d, %s\\n\",",
          "640:                      __FUNCTION__, retval, error_message(retval));",
          "641:             goto cleanup;",
          "642:         }",
          "643:         retval = crypto_cert_release(context, ch);",
          "644:         if (retval) {",
          "645:             pkiDebug(\"%s: crypto_cert_release error %d, %s\\n\",",
          "646:                      __FUNCTION__, retval, error_message(retval));",
          "647:             goto cleanup;",
          "648:         }",
          "649:     }",
          "650:     free(matchdata);",
          "651:     retval = 0;",
          "653: cleanup:",
          "654:     return retval;",
          "655: }",
          "657: static krb5_error_code",
          "658: obtain_all_cert_matching_data(krb5_context context,",
          "659:                               pkinit_plg_crypto_context plg_cryptoctx,",
          "660:                               pkinit_req_crypto_context req_cryptoctx,",
          "661:                               pkinit_identity_crypto_context id_cryptoctx,",
          "662:                               pkinit_cert_matching_data ***all_matching_data)",
          "663: {",
          "664:     krb5_error_code retval;",
          "665:     int i, cert_count;",
          "666:     pkinit_cert_iter_handle ih = NULL;",
          "667:     pkinit_cert_handle ch;",
          "668:     pkinit_cert_matching_data **matchdata = NULL;",
          "670:     retval = crypto_cert_get_count(context, plg_cryptoctx, req_cryptoctx,",
          "671:                                    id_cryptoctx, &cert_count);",
          "672:     if (retval) {",
          "673:         pkiDebug(\"%s: crypto_cert_get_count error %d, %s\\n\",",
          "674:                  __FUNCTION__, retval, error_message(retval));",
          "675:         goto cleanup;",
          "676:     }",
          "678:     pkiDebug(\"%s: crypto_cert_get_count says there are %d certs\\n\",",
          "679:              __FUNCTION__, cert_count);",
          "681:     matchdata = calloc((size_t)cert_count + 1, sizeof(*matchdata));",
          "682:     if (matchdata == NULL)",
          "683:         return ENOMEM;",
          "685:     retval = crypto_cert_iteration_begin(context, plg_cryptoctx, req_cryptoctx,",
          "686:                                          id_cryptoctx, &ih);",
          "687:     if (retval) {",
          "688:         pkiDebug(\"%s: crypto_cert_iteration_begin returned %d, %s\\n\",",
          "689:                  __FUNCTION__, retval, error_message(retval));",
          "690:         goto cleanup;",
          "691:     }",
          "693:     for (i = 0; i < cert_count; i++) {",
          "694:         retval = crypto_cert_iteration_next(context, ih, &ch);",
          "695:         if (retval) {",
          "696:             if (retval == PKINIT_ITER_NO_MORE)",
          "697:                 pkiDebug(\"%s: We thought there were %d certs, but \"",
          "698:                          \"crypto_cert_iteration_next stopped after %d?\\n\",",
          "699:                          __FUNCTION__, cert_count, i);",
          "700:             else",
          "701:                 pkiDebug(\"%s: crypto_cert_iteration_next error %d, %s\\n\",",
          "702:                          __FUNCTION__, retval, error_message(retval));",
          "703:             goto cleanup;",
          "704:         }",
          "706:         retval = crypto_cert_get_matching_data(context, ch, &matchdata[i]);",
          "707:         if (retval) {",
          "708:             pkiDebug(\"%s: crypto_cert_get_matching_data error %d, %s\\n\",",
          "709:                      __FUNCTION__, retval, error_message(retval));",
          "710:             goto cleanup;",
          "711:         }",
          "713:     }",
          "716:     retval = 0;",
          "717: cleanup:",
          "718:     if (ih != NULL)",
          "719:         crypto_cert_iteration_end(context, ih);",
          "720:     if (retval) {",
          "721:         if (matchdata != NULL)",
          "722:             free_all_cert_matching_data(context, matchdata);",
          "723:     }",
          "724:     pkiDebug(\"%s: returning %d, certinfo %p\\n\",",
          "725:              __FUNCTION__, retval, *all_matching_data);",
          "726:     return retval;",
          "727: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "740:     rule_set *rs = NULL;",
          "741:     int match_found = 0;",
          "742:     pkinit_cert_matching_data **matchdata = NULL;",
          "746:     pkinit_libdefault_strings(context, krb5_princ_realm(context, princ),",
          "",
          "[Removed Lines]",
          "743:     pkinit_cert_matching_data *the_matching_cert = NULL;",
          "",
          "[Added Lines]",
          "638:     size_t match_index = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "779:         if (matchdata == NULL) {",
          "781:                                                    req_cryptoctx, id_cryptoctx,",
          "782:                                                    &matchdata);",
          "783:             if (retval || matchdata == NULL) {",
          "",
          "[Removed Lines]",
          "780:             retval = obtain_all_cert_matching_data(context, plg_cryptoctx,",
          "",
          "[Added Lines]",
          "675:             retval = crypto_cert_get_matching_data(context, plg_cryptoctx,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "791:         retval = check_all_certs(context, plg_cryptoctx, req_cryptoctx,",
          "792:                                  id_cryptoctx, princ, rs, matchdata,",
          "794:         if (retval) {",
          "795:             pkiDebug(\"%s: Error %d, checking certs against rule '%s'\\n\",",
          "796:                      __FUNCTION__, retval, rules[x]);",
          "",
          "[Removed Lines]",
          "793:                                  &match_found, &the_matching_cert);",
          "",
          "[Added Lines]",
          "688:                                  &match_found, &match_index);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "803:         }",
          "804:     }",
          "807:         pkiDebug(\"%s: Selecting the matching cert!\\n\", __FUNCTION__);",
          "809:         if (retval) {",
          "810:             pkiDebug(\"%s: crypto_cert_select error %d, %s\\n\",",
          "811:                      __FUNCTION__, retval, error_message(retval));",
          "",
          "[Removed Lines]",
          "806:     if (match_found && the_matching_cert != NULL) {",
          "808:         retval = crypto_cert_select(context, the_matching_cert);",
          "",
          "[Added Lines]",
          "701:     if (match_found) {",
          "703:         retval = crypto_cert_select(context, id_cryptoctx, match_index);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "817:     }",
          "819:     retval = 0;",
          "820: cleanup:",
          "827:     return retval;",
          "828: }",
          "",
          "[Removed Lines]",
          "821:     if (rules != NULL)",
          "822:         profile_free_list(rules);",
          "823:     if (rs != NULL)",
          "824:         free_rule_set(context, rs);",
          "825:     if (matchdata != NULL)",
          "826:         free_all_cert_matching_data(context, matchdata);",
          "",
          "[Added Lines]",
          "717:     profile_free_list(rules);",
          "718:     free_rule_set(context, rs);",
          "719:     crypto_cert_free_matching_data_list(context, matchdata);",
          "",
          "---------------"
        ]
      }
    }
  ]
}