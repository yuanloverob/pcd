{
  "cve_id": "CVE-2021-32439",
  "cve_desc": "Buffer overflow in the stbl_AppendSize function in MP4Box in GPAC 1.0.1 allows attackers to cause a denial of service or execute arbitrary code via a crafted file.",
  "repo": "gpac/gpac",
  "patch_hash": "77ed81c069e10b3861d88f72e1c6be1277ee7eae",
  "patch_info": {
    "commit_hash": "77ed81c069e10b3861d88f72e1c6be1277ee7eae",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/77ed81c069e10b3861d88f72e1c6be1277ee7eae",
    "files": [
      "src/isomedia/stbl_write.c"
    ],
    "message": "fixed #1774 (fuzz)",
    "before_after_code_files": [
      "src/isomedia/stbl_write.c||src/isomedia/stbl_write.c"
    ]
  },
  "patch_diff": {
    "src/isomedia/stbl_write.c||src/isomedia/stbl_write.c": [
      "File: src/isomedia/stbl_write.c -> src/isomedia/stbl_write.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: #ifndef GPAC_DISABLE_ISOM_WRITE",
      "45: {",
      "46:  u32 i, j, sampNum;",
      "47:  u64 *DTSs, curDTS;",
      "",
      "[Removed Lines]",
      "44: GF_Err stbl_AddDTS(GF_SampleTableBox *stbl, u64 DTS, u32 *sampleNumber, u32 LastAUDefDuration, u32 nb_packed_samples)",
      "",
      "[Added Lines]",
      "41: #define CHECK_PACK(_e) \\",
      "42:  if (!nb_pack) nb_pack = 1; \\",
      "43:  else if ((s32) nb_pack < 0) { \\",
      "44:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Too many samples %u in packed sample\\n\", nb_pack)); \\",
      "45:   return _e; \\",
      "46:  }",
      "53: GF_Err stbl_AddDTS(GF_SampleTableBox *stbl, u64 DTS, u32 *sampleNumber, u32 LastAUDefDuration, u32 nb_pack)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54:  stts->r_FirstSampleInEntry = 0;",
      "61:  if (!stts->nb_entries) {",
      "",
      "[Removed Lines]",
      "57:  if (!nb_packed_samples)",
      "58:   nb_packed_samples=1;",
      "",
      "[Added Lines]",
      "67:  CHECK_PACK(GF_BAD_PARAM)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "65:   stts->nb_entries = 1;",
      "66:   stts->entries = gf_malloc(sizeof(GF_SttsEntry));",
      "67:   if (!stts->entries) return GF_OUT_OF_MEM;",
      "70:   (*sampleNumber) = 1;",
      "72:   return GF_OK;",
      "73:  }",
      "",
      "[Removed Lines]",
      "68:   stts->entries[0].sampleCount = nb_packed_samples;",
      "69:   stts->entries[0].sampleDelta = (nb_packed_samples>1) ? 0 : LastAUDefDuration;",
      "71:   stts->w_currentSampleNum = nb_packed_samples;",
      "",
      "[Added Lines]",
      "78:   stts->entries[0].sampleCount = nb_pack;",
      "79:   stts->entries[0].sampleDelta = (nb_pack>1) ? 0 : LastAUDefDuration;",
      "81:   stts->w_currentSampleNum = nb_pack;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "83:   if ((DTS == stts->w_LastDTS + ent->sampleDelta)",
      "87:   ) {",
      "88:    (*sampleNumber) = stts->w_currentSampleNum + 1;",
      "92:    return GF_OK;",
      "93:   }",
      "",
      "[Removed Lines]",
      "86:    || ((nb_packed_samples>1) && ((DTS == stts->w_LastDTS) || (DTS == stts->w_LastDTS + 2*ent->sampleDelta) ))",
      "89:    ent->sampleCount += nb_packed_samples;",
      "90:    stts->w_currentSampleNum += nb_packed_samples;",
      "91:    stts->w_LastDTS = DTS + ent->sampleDelta * (nb_packed_samples-1);",
      "",
      "[Added Lines]",
      "96:    || ((nb_pack>1) && ((DTS == stts->w_LastDTS) || (DTS == stts->w_LastDTS + 2*ent->sampleDelta) ))",
      "99:    ent->sampleCount += nb_pack;",
      "100:    stts->w_currentSampleNum += nb_pack;",
      "101:    stts->w_LastDTS = DTS + ent->sampleDelta * (nb_pack-1);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "119:   ent->sampleCount --;",
      "122:    nb_extra = 1;",
      "124:   if (stts->alloc_size <= stts->nb_entries + nb_extra) {",
      "",
      "[Removed Lines]",
      "121:   if (nb_packed_samples>1)",
      "",
      "[Added Lines]",
      "131:   if (nb_pack>1)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "134:   ent = &stts->entries[stts->nb_entries];",
      "135:   stts->nb_entries++;",
      "138:    ent->sampleCount = 2;",
      "139:    ent->sampleDelta = (u32) (DTS - stts->w_LastDTS);",
      "140:    stts->w_LastDTS = DTS;",
      "",
      "[Removed Lines]",
      "137:   if (nb_packed_samples==1) {",
      "",
      "[Added Lines]",
      "147:   if (nb_pack==1) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "149:   ent = &stts->entries[stts->nb_entries];",
      "150:   stts->nb_entries++;",
      "153:   ent->sampleDelta = nb_extra;",
      "154:   stts->w_LastDTS = DTS;",
      "155:   (*sampleNumber) = stts->w_currentSampleNum + 1;",
      "157:   return GF_OK;",
      "158:  }",
      "",
      "[Removed Lines]",
      "152:   ent->sampleCount = nb_packed_samples;",
      "156:   stts->w_currentSampleNum += nb_packed_samples;",
      "",
      "[Added Lines]",
      "162:   ent->sampleCount = nb_pack;",
      "166:   stts->w_currentSampleNum += nb_pack;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "393: }",
      "397: {",
      "398:  u32 i, k;",
      "399:  u32 *newSizes;",
      "",
      "[Removed Lines]",
      "396: GF_Err stbl_AddSize(GF_SampleSizeBox *stsz, u32 sampleNumber, u32 size, u32 nb_pack_samples)",
      "",
      "[Added Lines]",
      "406: GF_Err stbl_AddSize(GF_SampleSizeBox *stsz, u32 sampleNumber, u32 size, u32 nb_pack)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "402:  if (sampleNumber > stsz->sampleCount + 1) return GF_BAD_PARAM;",
      "409:  if (stsz->sizes == NULL) {",
      "411:   if (! stsz->sampleCount && (stsz->type != GF_ISOM_BOX_TYPE_STZ2) ) {",
      "413:    stsz->sampleSize = size;",
      "414:    return GF_OK;",
      "415:   }",
      "417:   if (stsz->sampleSize == size) {",
      "419:    return GF_OK;",
      "420:   }",
      "422:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Inserting packed samples with different sizes is not yet supported\\n\" ));",
      "423:    return GF_NOT_SUPPORTED;",
      "424:   }",
      "",
      "[Removed Lines]",
      "404:  if (!nb_pack_samples) nb_pack_samples = 1;",
      "405:  else if (nb_pack_samples>1)",
      "406:   size /= nb_pack_samples;",
      "412:    stsz->sampleCount = nb_pack_samples;",
      "418:    stsz->sampleCount += nb_pack_samples;",
      "421:   if (nb_pack_samples>1) {",
      "",
      "[Added Lines]",
      "414:  CHECK_PACK(GF_BAD_PARAM)",
      "416:  if (nb_pack>1)",
      "417:   size /= nb_pack;",
      "424:    stsz->sampleCount = nb_pack;",
      "430:    stsz->sampleCount += nb_pack;",
      "433:   if (nb_pack>1) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "698: }",
      "702: {",
      "703:  GF_SampleTableBox *stbl;",
      "704:  GF_ChunkOffsetBox *stco;",
      "",
      "[Removed Lines]",
      "701: GF_Err stbl_AddChunkOffset(GF_MediaBox *mdia, u32 sampleNumber, u32 StreamDescIndex, u64 offset, u32 nb_pack_samples)",
      "",
      "[Added Lines]",
      "713: GF_Err stbl_AddChunkOffset(GF_MediaBox *mdia, u32 sampleNumber, u32 StreamDescIndex, u64 offset, u32 nb_pack)",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "713:  stsc = stbl->SampleToChunk;",
      "719:  if (!stsc->nb_entries || (stsc->nb_entries + 2 >= stsc->alloc_size)) {",
      "720:   if (!stsc->alloc_size) stsc->alloc_size = 1;",
      "",
      "[Removed Lines]",
      "716:  if (!nb_pack_samples)",
      "717:   nb_pack_samples = 1;",
      "",
      "[Added Lines]",
      "728:  CHECK_PACK(GF_BAD_PARAM)",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "730:   if (stsc->nb_entries) stsc->entries[stsc->nb_entries-1].nextChunk = stsc->w_lastChunkNumber;",
      "732:   new_chunk_idx = stsc->w_lastChunkNumber;",
      "734:   stsc->nb_entries += 1;",
      "735:  } else {",
      "736:   u32 cur_samp = 1;",
      "",
      "[Removed Lines]",
      "733:   stsc->w_lastSampleNumber = sampleNumber + nb_pack_samples-1;",
      "",
      "[Added Lines]",
      "744:   stsc->w_lastSampleNumber = sampleNumber + nb_pack-1;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "785:  }",
      "786:  ent->isEdited = (Media_IsSelfContained(mdia, StreamDescIndex)) ? 1 : 0;",
      "787:  ent->sampleDescriptionIndex = StreamDescIndex;",
      "789:  ent->nextChunk = ent->firstChunk+1;",
      "793:   if (stsc->nb_entries)",
      "794:    stsc->entries[stsc->nb_entries-1].nextChunk = ent->firstChunk;",
      "",
      "[Removed Lines]",
      "788:  ent->samplesPerChunk = nb_pack_samples;",
      "792:  if (sampleNumber + nb_pack_samples - 1 == stsc->w_lastSampleNumber) {",
      "",
      "[Added Lines]",
      "799:  ent->samplesPerChunk = nb_pack;",
      "803:  if (sampleNumber + nb_pack - 1 == stsc->w_lastSampleNumber) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1596: {",
      "1597:  GF_TimeToSampleBox *stts = stbl->TimeToSample;",
      "1600:  if (stts->nb_entries) {",
      "1601:   if (stts->entries[stts->nb_entries-1].sampleDelta == duration) {",
      "1602:    stts->entries[stts->nb_entries-1].sampleCount += nb_pack;",
      "",
      "[Removed Lines]",
      "1599:  if (!nb_pack) nb_pack = 1;",
      "",
      "[Added Lines]",
      "1610:  CHECK_PACK(GF_ISOM_INVALID_FILE)",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1619: GF_Err stbl_AppendSize(GF_SampleTableBox *stbl, u32 size, u32 nb_pack)",
      "1620: {",
      "1621:  u32 i;",
      "1624:  if (!stbl->SampleSize->sampleCount) {",
      "1625:   stbl->SampleSize->sampleSize = size;",
      "",
      "[Removed Lines]",
      "1622:  if (!nb_pack) nb_pack = 1;",
      "",
      "[Added Lines]",
      "1634:  CHECK_PACK(GF_ISOM_INVALID_FILE)",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1630:   stbl->SampleSize->sampleCount += nb_pack;",
      "1631:   return GF_OK;",
      "1632:  }",
      "1633:  if (!stbl->SampleSize->sizes || (stbl->SampleSize->sampleCount+nb_pack > stbl->SampleSize->alloc_size)) {",
      "1634:   Bool init_table = (stbl->SampleSize->sizes==NULL) ? 1 : 0;",
      "1635:   ALLOC_INC(stbl->SampleSize->alloc_size);",
      "1637:    stbl->SampleSize->alloc_size = stbl->SampleSize->sampleCount+nb_pack;",
      "1639:   stbl->SampleSize->sizes = (u32 *)gf_realloc(stbl->SampleSize->sizes, sizeof(u32)*stbl->SampleSize->alloc_size);",
      "1640:   if (!stbl->SampleSize->sizes) return GF_OUT_OF_MEM;",
      "",
      "[Removed Lines]",
      "1636:   if (stbl->SampleSize->sampleCount+nb_pack > stbl->SampleSize->alloc_size)",
      "",
      "[Added Lines]",
      "1649:   if (stbl->SampleSize->sampleCount+nb_pack > stbl->SampleSize->alloc_size) {",
      "1651:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "52f084398374073e2ba5277468442e4ea7a91da5",
      "candidate_info": {
        "commit_hash": "52f084398374073e2ba5277468442e4ea7a91da5",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/52f084398374073e2ba5277468442e4ea7a91da5",
        "files": [
          "src/isomedia/stbl_write.c"
        ],
        "message": "fixed bug in stts append with packed audio samples",
        "before_after_code_files": [
          "src/isomedia/stbl_write.c||src/isomedia/stbl_write.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/stbl_write.c||src/isomedia/stbl_write.c"
          ],
          "candidate": [
            "src/isomedia/stbl_write.c||src/isomedia/stbl_write.c"
          ]
        }
      },
      "candidate_diff": {
        "src/isomedia/stbl_write.c||src/isomedia/stbl_write.c": [
          "File: src/isomedia/stbl_write.c -> src/isomedia/stbl_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:   ent = &stts->entries[stts->nb_entries];",
          "122:   stts->nb_entries++;",
          "125:   ent->sampleDelta = (u32) (DTS - stts->w_LastDTS);",
          "126:   stts->w_LastDTS = DTS;",
          "128:   (*sampleNumber) = stts->w_currentSampleNum;",
          "129:   return GF_OK;",
          "130:  }",
          "",
          "[Removed Lines]",
          "124:   ent->sampleCount = 2;",
          "127:   stts->w_currentSampleNum ++;",
          "",
          "[Added Lines]",
          "124:   ent->sampleCount = 1 + nb_packed_samples;",
          "127:   stts->w_currentSampleNum += nb_packed_samples;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "144793e9dd9f2203e48608dbb6c96de7a0ef8da7",
      "candidate_info": {
        "commit_hash": "144793e9dd9f2203e48608dbb6c96de7a0ef8da7",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/144793e9dd9f2203e48608dbb6c96de7a0ef8da7",
        "files": [
          "src/filters/mux_isom.c",
          "src/isomedia/stbl_write.c"
        ],
        "message": "fixed raw audio isobmf muxing issues when timescale differs from samplerate",
        "before_after_code_files": [
          "src/filters/mux_isom.c||src/filters/mux_isom.c",
          "src/isomedia/stbl_write.c||src/isomedia/stbl_write.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/stbl_write.c||src/isomedia/stbl_write.c"
          ],
          "candidate": [
            "src/isomedia/stbl_write.c||src/isomedia/stbl_write.c"
          ]
        }
      },
      "candidate_diff": {
        "src/filters/mux_isom.c||src/filters/mux_isom.c": [
          "File: src/filters/mux_isom.c -> src/filters/mux_isom.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1724:    tkw->raw_audio_bytes_per_sample /= 8;",
          "1725:    p = gf_filter_pid_get_property(pid, GF_PROP_PID_SAMPLE_RATE);",
          "1726:    tkw->raw_samplerate = p ? p->value.uint : 0;",
          "1727:   }",
          "1728:   else if (tkw->stream_type == GF_STREAM_VISUAL) {",
          "1729:    p = gf_filter_pid_get_property(pid, GF_PROP_PID_PIXFMT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1728:    if (ctx->mediats==0)",
          "1729:     tkw->tk_timescale = tkw->raw_samplerate;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3490:  tkw->sample.IsRAP = 0;",
          "3492:  if (sap_type==GF_FILTER_SAP_1)",
          "3493:   tkw->sample.IsRAP = SAP_TYPE_1;",
          "3494:  else if ( (sap_type == GF_FILTER_SAP_4) && (tkw->stream_type != GF_STREAM_VISUAL) )",
          "",
          "[Removed Lines]",
          "3491:  sap_type = mp4_mux_get_sap(ctx, pck);",
          "",
          "[Added Lines]",
          "3494:  if (tkw->codecid==GF_CODECID_RAW) {",
          "3495:   sap_type = GF_FILTER_SAP_1;",
          "3496:  } else {",
          "3497:   sap_type = mp4_mux_get_sap(ctx, pck);",
          "3498:  }",
          "",
          "---------------"
        ],
        "src/isomedia/stbl_write.c||src/isomedia/stbl_write.c": [
          "File: src/isomedia/stbl_write.c -> src/isomedia/stbl_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:  }",
          "75:  if (DTS >= stts->w_LastDTS) {",
          "76:   ent = &stts->entries[stts->nb_entries-1];",
          "77:   if (!ent->sampleDelta && (ent->sampleCount>1)) {",
          "78:    ent->sampleDelta = (u32) ( DTS / ent->sampleCount);",
          "79:    stts->w_LastDTS = DTS - ent->sampleDelta;",
          "80:   }",
          "83:    (*sampleNumber) = stts->w_currentSampleNum + 1;",
          "84:    ent->sampleCount += nb_packed_samples;",
          "85:    stts->w_currentSampleNum += nb_packed_samples;",
          "",
          "[Removed Lines]",
          "82:   if (DTS == stts->w_LastDTS + ent->sampleDelta) {",
          "",
          "[Added Lines]",
          "76:   u32 nb_extra = 0;",
          "83:   if ((DTS == stts->w_LastDTS + ent->sampleDelta)",
          "86:    || ((nb_packed_samples>1) && ((DTS == stts->w_LastDTS) || (DTS == stts->w_LastDTS + 2*ent->sampleDelta) ))",
          "87:   ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:   }",
          "114:   ent->sampleCount --;",
          "116:    ALLOC_INC(stts->alloc_size);",
          "117:    stts->entries = gf_realloc(stts->entries, sizeof(GF_SttsEntry)*stts->alloc_size);",
          "118:    if (!stts->entries) return GF_OUT_OF_MEM;",
          "119:    memset(&stts->entries[stts->nb_entries], 0, sizeof(GF_SttsEntry)*(stts->alloc_size-stts->nb_entries) );",
          "120:   }",
          "121:   ent = &stts->entries[stts->nb_entries];",
          "122:   stts->nb_entries++;",
          "125:   ent->sampleDelta = (u32) (DTS - stts->w_LastDTS);",
          "126:   stts->w_LastDTS = DTS;",
          "127:   stts->w_currentSampleNum += nb_packed_samples;",
          "129:   return GF_OK;",
          "130:  }",
          "",
          "[Removed Lines]",
          "115:   if (stts->alloc_size==stts->nb_entries) {",
          "124:   ent->sampleCount = 1 + nb_packed_samples;",
          "128:   (*sampleNumber) = stts->w_currentSampleNum;",
          "",
          "[Added Lines]",
          "121:   if (nb_packed_samples>1)",
          "122:    nb_extra = 1;",
          "124:   if (stts->alloc_size <= stts->nb_entries + nb_extra) {",
          "131:   if (nb_extra)",
          "132:    nb_extra = stts->entries[stts->nb_entries-1].sampleDelta;",
          "137:   if (nb_packed_samples==1) {",
          "138:    ent->sampleCount = 2;",
          "139:    ent->sampleDelta = (u32) (DTS - stts->w_LastDTS);",
          "140:    stts->w_LastDTS = DTS;",
          "141:    (*sampleNumber) = stts->w_currentSampleNum+1;",
          "142:    stts->w_currentSampleNum += 1;",
          "143:    return GF_OK;",
          "144:   }",
          "146:   ent->sampleCount = 1;",
          "149:   ent = &stts->entries[stts->nb_entries];",
          "150:   stts->nb_entries++;",
          "152:   ent->sampleCount = nb_packed_samples;",
          "153:   ent->sampleDelta = nb_extra;",
          "155:   (*sampleNumber) = stts->w_currentSampleNum + 1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}