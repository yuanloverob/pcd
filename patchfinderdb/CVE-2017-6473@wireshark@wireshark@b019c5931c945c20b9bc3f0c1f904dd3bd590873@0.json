{
  "cve_id": "CVE-2017-6473",
  "cve_desc": "In Wireshark 2.2.0 to 2.2.4 and 2.0.0 to 2.0.10, there is a K12 file parser crash, triggered by a malformed capture file. This was addressed in wiretap/k12.c by validating the relationships between lengths and offsets.",
  "repo": "wireshark/wireshark",
  "patch_hash": "b019c5931c945c20b9bc3f0c1f904dd3bd590873",
  "patch_info": {
    "commit_hash": "b019c5931c945c20b9bc3f0c1f904dd3bd590873",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/b019c5931c945c20b9bc3f0c1f904dd3bd590873",
    "files": [
      "wiretap/k12.c"
    ],
    "message": "Add more sanity checks.\n\nBug: 13431\nChange-Id: I330cb087c6e89277120057019cb5155f005ed269\nReviewed-on: https://code.wireshark.org/review/20337\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "wiretap/k12.c||wiretap/k12.c"
    ]
  },
  "patch_diff": {
    "wiretap/k12.c||wiretap/k12.c": [
      "File: wiretap/k12.c -> wiretap/k12.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "573:     return TRUE;",
      "574: }",
      "577: process_packet_data(struct wtap_pkthdr *phdr, Buffer *target, guint8 *buffer,",
      "579: {",
      "580:     guint32 type;",
      "581:     guint   buffer_offset;",
      "",
      "[Removed Lines]",
      "576: static void",
      "578:                     gint len, k12_t *k12)",
      "",
      "[Added Lines]",
      "576: static gboolean",
      "578:                     guint record_len, k12_t *k12, int *err, gchar **err_info)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "585:     guint32 src_id;",
      "586:     k12_src_desc_t* src_desc;",
      "588:     phdr->rec_type = REC_TYPE_PACKET;",
      "589:     phdr->presence_flags = WTAP_HAS_TS;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "588:     type = pntoh32(buffer + K12_RECORD_TYPE);",
      "589:     buffer_offset = (type == K12_REC_D0020) ? K12_PACKET_FRAME_D0020 : K12_PACKET_FRAME;",
      "590:     if (buffer_offset > record_len) {",
      "593:                                     buffer_offset, record_len);",
      "594:         return FALSE;",
      "595:     }",
      "597:     length = pntoh32(buffer + K12_RECORD_FRAME_LEN) & 0x00001FFF;",
      "598:     if (length > record_len - buffer_offset) {",
      "601:                                     length, record_len - buffer_offset);",
      "602:         return FALSE;",
      "603:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "593:     phdr->ts.secs = (guint32) ((ts / 2000000) + 631152000);",
      "594:     phdr->ts.nsecs = (guint32) ( (ts % 2000000) * 500 );",
      "597:     phdr->len = phdr->caplen = length;",
      "602:     ws_buffer_assure_space(target, length);",
      "603:     memcpy(ws_buffer_start_ptr(target), buffer + buffer_offset, length);",
      "607:     ws_buffer_assure_space(&(k12->extra_info), extra_len);",
      "608:     memcpy(ws_buffer_start_ptr(&(k12->extra_info)),",
      "609:            buffer + buffer_offset + length, extra_len);",
      "",
      "[Removed Lines]",
      "596:     length = pntoh32(buffer + K12_RECORD_FRAME_LEN) & 0x00001FFF;",
      "599:     type = pntoh32(buffer + K12_RECORD_TYPE);",
      "600:     buffer_offset = (type == K12_REC_D0020) ? K12_PACKET_FRAME_D0020 : K12_PACKET_FRAME;",
      "606:     extra_len = len - buffer_offset - length;",
      "",
      "[Added Lines]",
      "619:     extra_len = record_len - buffer_offset - length;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "634:         switch(src_desc->input_type) {",
      "635:             case K12_PORT_ATMPVC:",
      "637:                     phdr->pseudo_header.k12.input_info.atm.vp =  pntoh16(buffer + buffer_offset + length + K12_PACKET_OFFSET_VP);",
      "638:                     phdr->pseudo_header.k12.input_info.atm.vc =  pntoh16(buffer + buffer_offset + length + K12_PACKET_OFFSET_VC);",
      "639:                     phdr->pseudo_header.k12.input_info.atm.cid =  *((unsigned char*)(buffer + buffer_offset + length + K12_PACKET_OFFSET_CID));",
      "",
      "[Removed Lines]",
      "636:                 if ((long)(buffer_offset + length + K12_PACKET_OFFSET_CID) < len) {",
      "",
      "[Added Lines]",
      "649:                 if ((long)(buffer_offset + length + K12_PACKET_OFFSET_CID) < record_len) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "655:     phdr->pseudo_header.k12.input = src_id;",
      "656:     phdr->pseudo_header.k12.stuff = k12;",
      "657: }",
      "659: static gboolean k12_read(wtap *wth, int *err, gchar **err_info, gint64 *data_offset) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "670:     return TRUE;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "720:     } while ( ((type & K12_MASK_PACKET) != K12_REC_PACKET && (type & K12_MASK_PACKET) != K12_REC_D0020) || !src_id || !src_desc );",
      "725: }",
      "",
      "[Removed Lines]",
      "722:     process_packet_data(&wth->phdr, wth->frame_buffer, buffer, len, k12);",
      "724:     return TRUE;",
      "",
      "[Added Lines]",
      "736:     return process_packet_data(&wth->phdr, wth->frame_buffer, buffer, (guint)len, k12, err, err_info);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "729:     k12_t *k12 = (k12_t *)wth->priv;",
      "730:     guint8* buffer;",
      "731:     gint len;",
      "733:     K12_DBG(5,(\"k12_seek_read: ENTER\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "744:     gboolean status;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "751:     buffer = k12->rand_read_buff;",
      "755:     K12_DBG(5,(\"k12_seek_read: DONE OK\"));",
      "758: }",
      "",
      "[Removed Lines]",
      "753:     process_packet_data(phdr, buf, buffer, len, k12);",
      "757:     return TRUE;",
      "",
      "[Added Lines]",
      "766:     status = process_packet_data(phdr, buf, buffer, (guint)len, k12, err, err_info);",
      "770:     return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7edc761a01cda8e1b37677f673985582330317d2",
      "candidate_info": {
        "commit_hash": "7edc761a01cda8e1b37677f673985582330317d2",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/7edc761a01cda8e1b37677f673985582330317d2",
        "files": [
          "wiretap/k12.c"
        ],
        "message": "Add more sanity checks.\n\nBug: 13431\nChange-Id: I330cb087c6e89277120057019cb5155f005ed269\nReviewed-on: https://code.wireshark.org/review/20337\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit b019c5931c945c20b9bc3f0c1f904dd3bd590873)\nReviewed-on: https://code.wireshark.org/review/20339",
        "before_after_code_files": [
          "wiretap/k12.c||wiretap/k12.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/k12.c||wiretap/k12.c"
          ],
          "candidate": [
            "wiretap/k12.c||wiretap/k12.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/k12.c||wiretap/k12.c": [
          "File: wiretap/k12.c -> wiretap/k12.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "573:     return TRUE;",
          "574: }",
          "577: process_packet_data(struct wtap_pkthdr *phdr, Buffer *target, guint8 *buffer,",
          "579: {",
          "580:     guint32 type;",
          "581:     guint   buffer_offset;",
          "",
          "[Removed Lines]",
          "576: static void",
          "578:                     gint len, k12_t *k12)",
          "",
          "[Added Lines]",
          "576: static gboolean",
          "578:                     guint record_len, k12_t *k12, int *err, gchar **err_info)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "585:     guint32 src_id;",
          "586:     k12_src_desc_t* src_desc;",
          "588:     phdr->rec_type = REC_TYPE_PACKET;",
          "589:     phdr->presence_flags = WTAP_HAS_TS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "588:     type = pntoh32(buffer + K12_RECORD_TYPE);",
          "589:     buffer_offset = (type == K12_REC_D0020) ? K12_PACKET_FRAME_D0020 : K12_PACKET_FRAME;",
          "590:     if (buffer_offset > record_len) {",
          "593:                                     buffer_offset, record_len);",
          "594:         return FALSE;",
          "595:     }",
          "597:     length = pntoh32(buffer + K12_RECORD_FRAME_LEN) & 0x00001FFF;",
          "598:     if (length > record_len - buffer_offset) {",
          "601:                                     length, record_len - buffer_offset);",
          "602:         return FALSE;",
          "603:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "593:     phdr->ts.secs = (guint32) ((ts / 2000000) + 631152000);",
          "594:     phdr->ts.nsecs = (guint32) ( (ts % 2000000) * 500 );",
          "597:     phdr->len = phdr->caplen = length;",
          "602:     ws_buffer_assure_space(target, length);",
          "603:     memcpy(ws_buffer_start_ptr(target), buffer + buffer_offset, length);",
          "607:     ws_buffer_assure_space(&(k12->extra_info), extra_len);",
          "608:     memcpy(ws_buffer_start_ptr(&(k12->extra_info)),",
          "609:            buffer + buffer_offset + length, extra_len);",
          "",
          "[Removed Lines]",
          "596:     length = pntoh32(buffer + K12_RECORD_FRAME_LEN) & 0x00001FFF;",
          "599:     type = pntoh32(buffer + K12_RECORD_TYPE);",
          "600:     buffer_offset = (type == K12_REC_D0020) ? K12_PACKET_FRAME_D0020 : K12_PACKET_FRAME;",
          "606:     extra_len = len - buffer_offset - length;",
          "",
          "[Added Lines]",
          "619:     extra_len = record_len - buffer_offset - length;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "634:         switch(src_desc->input_type) {",
          "635:             case K12_PORT_ATMPVC:",
          "637:                     phdr->pseudo_header.k12.input_info.atm.vp =  pntoh16(buffer + buffer_offset + length + K12_PACKET_OFFSET_VP);",
          "638:                     phdr->pseudo_header.k12.input_info.atm.vc =  pntoh16(buffer + buffer_offset + length + K12_PACKET_OFFSET_VC);",
          "639:                     phdr->pseudo_header.k12.input_info.atm.cid =  *((unsigned char*)(buffer + buffer_offset + length + K12_PACKET_OFFSET_CID));",
          "",
          "[Removed Lines]",
          "636:                 if ((long)(buffer_offset + length + K12_PACKET_OFFSET_CID) < len) {",
          "",
          "[Added Lines]",
          "649:                 if ((long)(buffer_offset + length + K12_PACKET_OFFSET_CID) < record_len) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "655:     phdr->pseudo_header.k12.input = src_id;",
          "656:     phdr->pseudo_header.k12.stuff = k12;",
          "657: }",
          "659: static gboolean k12_read(wtap *wth, int *err, gchar **err_info, gint64 *data_offset) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "670:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "720:     } while ( ((type & K12_MASK_PACKET) != K12_REC_PACKET && (type & K12_MASK_PACKET) != K12_REC_D0020) || !src_id || !src_desc );",
          "725: }",
          "",
          "[Removed Lines]",
          "722:     process_packet_data(&wth->phdr, wth->frame_buffer, buffer, len, k12);",
          "724:     return TRUE;",
          "",
          "[Added Lines]",
          "736:     return process_packet_data(&wth->phdr, wth->frame_buffer, buffer, (guint)len, k12, err, err_info);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "729:     k12_t *k12 = (k12_t *)wth->priv;",
          "730:     guint8* buffer;",
          "731:     gint len;",
          "733:     K12_DBG(5,(\"k12_seek_read: ENTER\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "744:     gboolean status;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "751:     buffer = k12->rand_read_buff;",
          "755:     K12_DBG(5,(\"k12_seek_read: DONE OK\"));",
          "758: }",
          "",
          "[Removed Lines]",
          "753:     process_packet_data(phdr, buf, buffer, len, k12);",
          "757:     return TRUE;",
          "",
          "[Added Lines]",
          "766:     status = process_packet_data(phdr, buf, buffer, (guint)len, k12, err, err_info);",
          "770:     return status;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37bbc14b050185a4e37f03c4a64e92e080644c59",
      "candidate_info": {
        "commit_hash": "37bbc14b050185a4e37f03c4a64e92e080644c59",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/37bbc14b050185a4e37f03c4a64e92e080644c59",
        "files": [
          "wiretap/k12.c"
        ],
        "message": "Add more sanity checks.\n\nBug: 13431\nChange-Id: I330cb087c6e89277120057019cb5155f005ed269\nReviewed-on: https://code.wireshark.org/review/20337\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit b019c5931c945c20b9bc3f0c1f904dd3bd590873)\nReviewed-on: https://code.wireshark.org/review/20338",
        "before_after_code_files": [
          "wiretap/k12.c||wiretap/k12.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/k12.c||wiretap/k12.c"
          ],
          "candidate": [
            "wiretap/k12.c||wiretap/k12.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/k12.c||wiretap/k12.c": [
          "File: wiretap/k12.c -> wiretap/k12.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "573:     return TRUE;",
          "574: }",
          "577: process_packet_data(struct wtap_pkthdr *phdr, Buffer *target, guint8 *buffer,",
          "579: {",
          "580:     guint32 type;",
          "581:     guint   buffer_offset;",
          "",
          "[Removed Lines]",
          "576: static void",
          "578:                     gint len, k12_t *k12)",
          "",
          "[Added Lines]",
          "576: static gboolean",
          "578:                     guint record_len, k12_t *k12, int *err, gchar **err_info)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "585:     guint32 src_id;",
          "586:     k12_src_desc_t* src_desc;",
          "588:     phdr->rec_type = REC_TYPE_PACKET;",
          "589:     phdr->presence_flags = WTAP_HAS_TS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "588:     type = pntoh32(buffer + K12_RECORD_TYPE);",
          "589:     buffer_offset = (type == K12_REC_D0020) ? K12_PACKET_FRAME_D0020 : K12_PACKET_FRAME;",
          "590:     if (buffer_offset > record_len) {",
          "593:                                     buffer_offset, record_len);",
          "594:         return FALSE;",
          "595:     }",
          "597:     length = pntoh32(buffer + K12_RECORD_FRAME_LEN) & 0x00001FFF;",
          "598:     if (length > record_len - buffer_offset) {",
          "601:                                     length, record_len - buffer_offset);",
          "602:         return FALSE;",
          "603:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "593:     phdr->ts.secs = (guint32) ((ts / 2000000) + 631152000);",
          "594:     phdr->ts.nsecs = (guint32) ( (ts % 2000000) * 500 );",
          "597:     phdr->len = phdr->caplen = length;",
          "602:     ws_buffer_assure_space(target, length);",
          "603:     memcpy(ws_buffer_start_ptr(target), buffer + buffer_offset, length);",
          "607:     ws_buffer_assure_space(&(k12->extra_info), extra_len);",
          "608:     memcpy(ws_buffer_start_ptr(&(k12->extra_info)),",
          "609:            buffer + buffer_offset + length, extra_len);",
          "",
          "[Removed Lines]",
          "596:     length = pntoh32(buffer + K12_RECORD_FRAME_LEN) & 0x00001FFF;",
          "599:     type = pntoh32(buffer + K12_RECORD_TYPE);",
          "600:     buffer_offset = (type == K12_REC_D0020) ? K12_PACKET_FRAME_D0020 : K12_PACKET_FRAME;",
          "606:     extra_len = len - buffer_offset - length;",
          "",
          "[Added Lines]",
          "619:     extra_len = record_len - buffer_offset - length;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "634:         switch(src_desc->input_type) {",
          "635:             case K12_PORT_ATMPVC:",
          "637:                     phdr->pseudo_header.k12.input_info.atm.vp =  pntoh16(buffer + buffer_offset + length + K12_PACKET_OFFSET_VP);",
          "638:                     phdr->pseudo_header.k12.input_info.atm.vc =  pntoh16(buffer + buffer_offset + length + K12_PACKET_OFFSET_VC);",
          "639:                     phdr->pseudo_header.k12.input_info.atm.cid =  *((unsigned char*)(buffer + buffer_offset + length + K12_PACKET_OFFSET_CID));",
          "",
          "[Removed Lines]",
          "636:                 if ((long)(buffer_offset + length + K12_PACKET_OFFSET_CID) < len) {",
          "",
          "[Added Lines]",
          "649:                 if ((long)(buffer_offset + length + K12_PACKET_OFFSET_CID) < record_len) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "655:     phdr->pseudo_header.k12.input = src_id;",
          "656:     phdr->pseudo_header.k12.stuff = k12;",
          "657: }",
          "659: static gboolean k12_read(wtap *wth, int *err, gchar **err_info, gint64 *data_offset) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "670:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "720:     } while ( ((type & K12_MASK_PACKET) != K12_REC_PACKET && (type & K12_MASK_PACKET) != K12_REC_D0020) || !src_id || !src_desc );",
          "725: }",
          "",
          "[Removed Lines]",
          "722:     process_packet_data(&wth->phdr, wth->frame_buffer, buffer, len, k12);",
          "724:     return TRUE;",
          "",
          "[Added Lines]",
          "736:     return process_packet_data(&wth->phdr, wth->frame_buffer, buffer, (guint)len, k12, err, err_info);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "729:     k12_t *k12 = (k12_t *)wth->priv;",
          "730:     guint8* buffer;",
          "731:     gint len;",
          "733:     K12_DBG(5,(\"k12_seek_read: ENTER\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "744:     gboolean status;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "751:     buffer = k12->rand_read_buff;",
          "755:     K12_DBG(5,(\"k12_seek_read: DONE OK\"));",
          "758: }",
          "",
          "[Removed Lines]",
          "753:     process_packet_data(phdr, buf, buffer, len, k12);",
          "757:     return TRUE;",
          "",
          "[Added Lines]",
          "766:     status = process_packet_data(phdr, buf, buffer, (guint)len, k12, err, err_info);",
          "770:     return status;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36bce0d763e21000bbda5fec55def4cccf4df5aa",
      "candidate_info": {
        "commit_hash": "36bce0d763e21000bbda5fec55def4cccf4df5aa",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/36bce0d763e21000bbda5fec55def4cccf4df5aa",
        "files": [
          "wiretap/k12.c"
        ],
        "message": "Add more sanity checks.\n\nConflicts:\n\twiretap/k12.c\n\nBug: 13431\nChange-Id: I330cb087c6e89277120057019cb5155f005ed269\nReviewed-on: https://code.wireshark.org/review/20337\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit b019c5931c945c20b9bc3f0c1f904dd3bd590873)\nReviewed-on: https://code.wireshark.org/review/20339\nReviewed-on: https://code.wireshark.org/review/20524\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "wiretap/k12.c||wiretap/k12.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/k12.c||wiretap/k12.c"
          ],
          "candidate": [
            "wiretap/k12.c||wiretap/k12.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/k12.c||wiretap/k12.c": [
          "File: wiretap/k12.c -> wiretap/k12.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "541:     return bytes_read;",
          "542: }",
          "545: process_packet_data(struct wtap_pkthdr *phdr, Buffer *target, guint8 *buffer,",
          "547: {",
          "548:     guint32 type;",
          "549:     guint   buffer_offset;",
          "",
          "[Removed Lines]",
          "544: static void",
          "546:                     gint len, k12_t *k12)",
          "",
          "[Added Lines]",
          "544: static gboolean",
          "546:                     guint record_len, k12_t *k12, int *err, gchar **err_info)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "553:     guint32 src_id;",
          "554:     k12_src_desc_t* src_desc;",
          "556:     phdr->rec_type = REC_TYPE_PACKET;",
          "557:     phdr->presence_flags = WTAP_HAS_TS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:     type = pntoh32(buffer + K12_RECORD_TYPE);",
          "557:     buffer_offset = (type == K12_REC_D0020) ? K12_PACKET_FRAME_D0020 : K12_PACKET_FRAME;",
          "558:     if (buffer_offset > record_len) {",
          "561:                                     buffer_offset, record_len);",
          "562:         return FALSE;",
          "563:     }",
          "565:     length = pntoh32(buffer + K12_RECORD_FRAME_LEN) & 0x00001FFF;",
          "566:     if (length > record_len - buffer_offset) {",
          "569:                                     length, record_len - buffer_offset);",
          "570:         return FALSE;",
          "571:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "561:     phdr->ts.secs = (guint32) ((ts / 2000000) + 631152000);",
          "562:     phdr->ts.nsecs = (guint32) ( (ts % 2000000) * 500 );",
          "565:     phdr->len = phdr->caplen = length;",
          "570:     buffer_assure_space(target, length);",
          "571:     memcpy(buffer_start_ptr(target), buffer + buffer_offset, length);",
          "575:     buffer_assure_space(&(k12->extra_info), extra_len);",
          "576:     memcpy(buffer_start_ptr(&(k12->extra_info)),",
          "577:            buffer + buffer_offset + length, extra_len);",
          "",
          "[Removed Lines]",
          "564:     length = pntoh32(buffer + K12_RECORD_FRAME_LEN) & 0x00001FFF;",
          "567:     type = pntoh32(buffer + K12_RECORD_TYPE);",
          "568:     buffer_offset = (type == K12_REC_D0020) ? K12_PACKET_FRAME_D0020 : K12_PACKET_FRAME;",
          "574:     extra_len = len - buffer_offset - length;",
          "",
          "[Added Lines]",
          "587:     extra_len = record_len - buffer_offset - length;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "602:         switch(src_desc->input_type) {",
          "603:             case K12_PORT_ATMPVC:",
          "605:                     phdr->pseudo_header.k12.input_info.atm.vp =  pntoh16(buffer + buffer_offset + length + K12_PACKET_OFFSET_VP);",
          "606:                     phdr->pseudo_header.k12.input_info.atm.vc =  pntoh16(buffer + buffer_offset + length + K12_PACKET_OFFSET_VC);",
          "607:                     phdr->pseudo_header.k12.input_info.atm.cid =  *((unsigned char*)(buffer + buffer_offset + length + K12_PACKET_OFFSET_CID));",
          "",
          "[Removed Lines]",
          "604:                 if ((long)(buffer_offset + length + K12_PACKET_OFFSET_CID) < len) {",
          "",
          "[Added Lines]",
          "617:                 if ((long)(buffer_offset + length + K12_PACKET_OFFSET_CID) < record_len) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "623:     phdr->pseudo_header.k12.input = src_id;",
          "624:     phdr->pseudo_header.k12.stuff = k12;",
          "625: }",
          "627: static gboolean k12_read(wtap *wth, int *err, gchar **err_info, gint64 *data_offset) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "681:     } while ( ((type & K12_MASK_PACKET) != K12_REC_PACKET && (type & K12_MASK_PACKET) != K12_REC_D0020) || !src_id || !src_desc );",
          "686: }",
          "",
          "[Removed Lines]",
          "683:     process_packet_data(&wth->phdr, wth->frame_buffer, buffer, len, k12);",
          "685:     return TRUE;",
          "",
          "[Added Lines]",
          "697:     return process_packet_data(&wth->phdr, wth->frame_buffer, buffer, (guint)len, k12, err, err_info);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "690:     k12_t *k12 = (k12_t *)wth->priv;",
          "691:     guint8* buffer;",
          "692:     gint len;",
          "694:     K12_DBG(5,(\"k12_seek_read: ENTER\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "705:     gboolean status;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "712:     buffer = k12->rand_read_buff;",
          "716:     K12_DBG(5,(\"k12_seek_read: DONE OK\"));",
          "719: }",
          "",
          "[Removed Lines]",
          "714:     process_packet_data(phdr, buf, buffer, len, k12);",
          "718:     return TRUE;",
          "",
          "[Added Lines]",
          "727:     status = process_packet_data(phdr, buf, buffer, (guint)len, k12, err, err_info);",
          "731:     return status;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4bd3c4d44ddcdf8e98fdf08a425e3a68e9b18395",
      "candidate_info": {
        "commit_hash": "4bd3c4d44ddcdf8e98fdf08a425e3a68e9b18395",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4bd3c4d44ddcdf8e98fdf08a425e3a68e9b18395",
        "files": [
          "wiretap/k12.c"
        ],
        "message": "Remove a cast that now causes rather than squelching warnings.\n\nWe're now comparing an unsigned with an expression made mostly of\nunsigned, so there's no need to cast the expression to long to squelch\nsigned vs. unsigned warnings.\n\nChange-Id: I3b8c6f6faf26a9c252eb55d9e69fb298a3ad4c3b\nReviewed-on: https://code.wireshark.org/review/20347\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "wiretap/k12.c||wiretap/k12.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/k12.c||wiretap/k12.c"
          ],
          "candidate": [
            "wiretap/k12.c||wiretap/k12.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/k12.c||wiretap/k12.c": [
          "File: wiretap/k12.c -> wiretap/k12.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "647:         switch(src_desc->input_type) {",
          "648:             case K12_PORT_ATMPVC:",
          "650:                     phdr->pseudo_header.k12.input_info.atm.vp =  pntoh16(buffer + buffer_offset + length + K12_PACKET_OFFSET_VP);",
          "651:                     phdr->pseudo_header.k12.input_info.atm.vc =  pntoh16(buffer + buffer_offset + length + K12_PACKET_OFFSET_VC);",
          "652:                     phdr->pseudo_header.k12.input_info.atm.cid =  *((unsigned char*)(buffer + buffer_offset + length + K12_PACKET_OFFSET_CID));",
          "",
          "[Removed Lines]",
          "649:                 if ((long)(buffer_offset + length + K12_PACKET_OFFSET_CID) < record_len) {",
          "",
          "[Added Lines]",
          "649:                 if (buffer_offset + length + K12_PACKET_OFFSET_CID < record_len) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}