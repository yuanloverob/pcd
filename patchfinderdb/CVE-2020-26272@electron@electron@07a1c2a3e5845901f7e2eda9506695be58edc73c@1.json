{
  "cve_id": "CVE-2020-26272",
  "cve_desc": "The Electron framework lets you write cross-platform desktop applications using JavaScript, HTML and CSS. In affected versions of Electron IPC messages sent from the main process to a subframe in the renderer process, through webContents.sendToFrame, event.reply or when using the remote module, can in some cases be delivered to the wrong frame. If your app uses remote, calls webContents.sendToFrame, or calls event.reply in an IPC message handler then it is impacted by this issue. This has been fixed in versions 9.4.0, 10.2.0, 11.1.0, and 12.0.0-beta.9. There are no workarounds for this issue.",
  "repo": "electron/electron",
  "patch_hash": "07a1c2a3e5845901f7e2eda9506695be58edc73c",
  "patch_info": {
    "commit_hash": "07a1c2a3e5845901f7e2eda9506695be58edc73c",
    "repo": "electron/electron",
    "commit_url": "https://github.com/electron/electron/commit/07a1c2a3e5845901f7e2eda9506695be58edc73c",
    "files": [
      "docs/api/structures/ipc-main-event.md",
      "docs/api/structures/ipc-main-invoke-event.md",
      "docs/api/web-contents.md",
      "lib/browser/api/web-contents.ts",
      "lib/browser/remote/server.ts",
      "shell/browser/api/electron_api_web_contents.cc",
      "shell/browser/api/electron_api_web_contents.h",
      "shell/common/gin_helper/event_emitter.cc",
      "spec-main/api-ipc-main-spec.ts",
      "spec-main/fixtures/snapshots/proxy-window-open.snapshot.txt",
      "spec-main/guest-window-manager-spec.ts",
      "typings/internal-electron.d.ts"
    ],
    "message": "fix: restrict sendToFrame to same-process frames by default (#26875)",
    "before_after_code_files": [
      "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts",
      "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
      "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
      "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
      "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc",
      "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts",
      "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts",
      "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
    ]
  },
  "patch_diff": {
    "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts": [
      "File: lib/browser/api/web-contents.ts -> lib/browser/api/web-contents.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   return this._send(true /* internal */, channel, args);",
      "150: };",
      "152:   if (typeof channel !== 'string') {",
      "153:     throw new Error('Missing required channel argument');",
      "156:   }",
      "159: };",
      "161:   if (typeof channel !== 'string') {",
      "162:     throw new Error('Missing required channel argument');",
      "165:   }",
      "168: };",
      "",
      "[Removed Lines]",
      "151: WebContents.prototype.sendToFrame = function (frameId, channel, ...args) {",
      "154:   } else if (typeof frameId !== 'number') {",
      "155:     throw new Error('Missing required frameId argument');",
      "158:   return this._sendToFrame(false /* internal */, frameId, channel, args);",
      "160: WebContents.prototype._sendToFrameInternal = function (frameId, channel, ...args) {",
      "163:   } else if (typeof frameId !== 'number') {",
      "164:     throw new Error('Missing required frameId argument');",
      "167:   return this._sendToFrame(true /* internal */, frameId, channel, args);",
      "",
      "[Added Lines]",
      "151: WebContents.prototype.sendToFrame = function (frame, channel, ...args) {",
      "154:   } else if (!(typeof frame === 'number' || Array.isArray(frame))) {",
      "155:     throw new Error('Missing required frame argument (must be number or array)');",
      "158:   return this._sendToFrame(false /* internal */, frame, channel, args);",
      "160: WebContents.prototype._sendToFrameInternal = function (frame, channel, ...args) {",
      "163:   } else if (!(typeof frame === 'number' || Array.isArray(frame))) {",
      "164:     throw new Error('Missing required frame argument (must be number or array)');",
      "167:   return this._sendToFrame(true /* internal */, frame, channel, args);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "456: };",
      "458: const addReplyToEvent = (event: any) => {",
      "459:   event.reply = (...args: any[]) => {",
      "461:   };",
      "462: };",
      "",
      "[Removed Lines]",
      "460:     event.sender.sendToFrame(event.frameId, ...args);",
      "",
      "[Added Lines]",
      "459:   const { processId, frameId } = event;",
      "461:     event.sender.sendToFrame([processId, frameId], ...args);",
      "",
      "---------------"
    ],
    "lib/browser/remote/server.ts||lib/browser/remote/server.ts": [
      "File: lib/browser/remote/server.ts -> lib/browser/remote/server.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: ];",
      "22: type RendererFunctionId = [string, number] // [contextId, funcId]",
      "24: type CallIntoRenderer = (...args: any[]) => void",
      "",
      "[Removed Lines]",
      "23: type FinalizerInfo = { id: RendererFunctionId, webContents: electron.WebContents, frameId: number };",
      "",
      "[Added Lines]",
      "23: type FinalizerInfo = { id: RendererFunctionId, webContents: electron.WebContents, frameId: [number, number] };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43:     if (deref !== undefined) return deref;",
      "44:   }",
      "45: }",
      "48:   const wr = new WeakRef<CallIntoRenderer>(value);",
      "49:   const mapKey = id[0] + '~' + id[1];",
      "",
      "[Removed Lines]",
      "46: function setCachedRendererFunction (id: RendererFunctionId, wc: electron.WebContents, frameId: number, value: CallIntoRenderer) {",
      "",
      "[Added Lines]",
      "46: function setCachedRendererFunction (id: RendererFunctionId, wc: electron.WebContents, frameId: [number, number], value: CallIntoRenderer) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "220:   });",
      "224:   const metaToValue = function (meta: MetaTypeFromRenderer): any {",
      "225:     switch (meta.type) {",
      "226:       case 'nativeimage':",
      "",
      "[Removed Lines]",
      "223: const unwrapArgs = function (sender: electron.WebContents, frameId: number, contextId: string, args: any[]) {",
      "",
      "[Added Lines]",
      "223: const unwrapArgs = function (sender: electron.WebContents, frameId: [number, number], contextId: string, args: any[]) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "423: });",
      "425: handleRemoteCommand(IPC_MESSAGES.BROWSER_CONSTRUCTOR, function (event, contextId, id, args) {",
      "427:   const constructor = objectsRegistry.get(id);",
      "429:   if (constructor == null) {",
      "",
      "[Removed Lines]",
      "426:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
      "",
      "[Added Lines]",
      "426:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "434: });",
      "436: handleRemoteCommand(IPC_MESSAGES.BROWSER_FUNCTION_CALL, function (event, contextId, id, args) {",
      "438:   const func = objectsRegistry.get(id);",
      "440:   if (func == null) {",
      "",
      "[Removed Lines]",
      "437:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
      "",
      "[Added Lines]",
      "437:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "451: });",
      "453: handleRemoteCommand(IPC_MESSAGES.BROWSER_MEMBER_CONSTRUCTOR, function (event, contextId, id, method, args) {",
      "455:   const object = objectsRegistry.get(id);",
      "457:   if (object == null) {",
      "",
      "[Removed Lines]",
      "454:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
      "",
      "[Added Lines]",
      "454:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "462: });",
      "464: handleRemoteCommand(IPC_MESSAGES.BROWSER_MEMBER_CALL, function (event, contextId, id, method, args) {",
      "466:   const object = objectsRegistry.get(id);",
      "468:   if (object == null) {",
      "",
      "[Removed Lines]",
      "465:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
      "",
      "[Added Lines]",
      "465:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "479: });",
      "481: handleRemoteCommand(IPC_MESSAGES.BROWSER_MEMBER_SET, function (event, contextId, id, name, args) {",
      "483:   const obj = objectsRegistry.get(id);",
      "485:   if (obj == null) {",
      "",
      "[Removed Lines]",
      "482:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
      "",
      "[Added Lines]",
      "482:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
      "",
      "---------------"
    ],
    "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc": [
      "File: shell/browser/api/electron_api_web_contents.cc -> shell/browser/api/electron_api_web_contents.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "2708: }",
      "2710: bool WebContents::SendIPCMessageToFrame(bool internal,",
      "2712:                                         const std::string& channel,",
      "2713:                                         v8::Local<v8::Value> args) {",
      "2714:   v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();",
      "",
      "[Removed Lines]",
      "2711:                                         int32_t frame_id,",
      "",
      "[Added Lines]",
      "2711:                                         v8::Local<v8::Value> frame,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2718:         gin::StringToV8(isolate, \"Failed to serialize arguments\")));",
      "2719:     return false;",
      "2720:   }",
      "2728:     return false;",
      "2730:   mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;",
      "2732:   electron_renderer->Message(internal, channel, std::move(message),",
      "2733:                              0 /* sender_id */);",
      "2734:   return true;",
      "",
      "[Removed Lines]",
      "2721:   auto frames = web_contents()->GetAllFrames();",
      "2722:   auto iter = std::find_if(frames.begin(), frames.end(), [frame_id](auto* f) {",
      "2723:     return f->GetRoutingID() == frame_id;",
      "2724:   });",
      "2725:   if (iter == frames.end())",
      "2726:     return false;",
      "2727:   if (!(*iter)->IsRenderFrameLive())",
      "2731:   (*iter)->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
      "",
      "[Added Lines]",
      "2721:   int32_t frame_id;",
      "2722:   int32_t process_id;",
      "2723:   if (gin::ConvertFromV8(isolate, frame, &frame_id)) {",
      "2724:     process_id = web_contents()->GetMainFrame()->GetProcess()->GetID();",
      "2725:   } else {",
      "2726:     std::vector<int32_t> id_pair;",
      "2727:     if (gin::ConvertFromV8(isolate, frame, &id_pair) && id_pair.size() == 2) {",
      "2728:       process_id = id_pair[0];",
      "2729:       frame_id = id_pair[1];",
      "2730:     } else {",
      "2731:       isolate->ThrowException(v8::Exception::Error(gin::StringToV8(",
      "2732:           isolate,",
      "2733:           \"frameId must be a number or a pair of [processId, frameId]\")));",
      "2734:       return false;",
      "2735:     }",
      "2736:   }",
      "2738:   auto* rfh = content::RenderFrameHost::FromID(process_id, frame_id);",
      "2739:   if (!rfh || !rfh->IsRenderFrameLive() ||",
      "2740:       content::WebContents::FromRenderFrameHost(rfh) != web_contents())",
      "2744:   rfh->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
      "",
      "---------------"
    ],
    "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h": [
      "File: shell/browser/api/electron_api_web_contents.h -> shell/browser/api/electron_api_web_contents.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "258:                                 int32_t sender_id = 0);",
      "260:   bool SendIPCMessageToFrame(bool internal,",
      "262:                              const std::string& channel,",
      "263:                              v8::Local<v8::Value> args);",
      "",
      "[Removed Lines]",
      "261:                              int32_t frame_id,",
      "",
      "[Added Lines]",
      "261:                              v8::Local<v8::Value> frame,",
      "",
      "---------------"
    ],
    "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc": [
      "File: shell/common/gin_helper/event_emitter.cc -> shell/common/gin_helper/event_emitter.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #include \"shell/common/gin_helper/event_emitter.h\"",
      "7: #include \"content/public/browser/render_frame_host.h\"",
      "8: #include \"shell/browser/api/event.h\"",
      "9: #include \"shell/common/gin_helper/dictionary.h\"",
      "10: #include \"shell/common/gin_helper/object_template_builder.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8: #include \"content/public/browser/render_process_host.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:   Dictionary dict(isolate, event);",
      "68:   dict.Set(\"sender\", sender);",
      "71:     dict.Set(\"frameId\", frame->GetRoutingID());",
      "72:   return event;",
      "73: }",
      "",
      "[Removed Lines]",
      "70:   if (frame)",
      "",
      "[Added Lines]",
      "71:   if (frame) {",
      "73:     dict.Set(\"processId\", frame->GetProcess()->GetID());",
      "74:   }",
      "",
      "---------------"
    ],
    "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts": [
      "File: spec-main/api-ipc-main-spec.ts -> spec-main/api-ipc-main-spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import * as cp from 'child_process';",
      "4: import { closeAllWindows } from './window-helpers';",
      "5: import { emittedOnce } from './events-helpers';",
      "6: import { ipcMain, BrowserWindow } from 'electron/main';",
      "8: describe('ipc main module', () => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import { defer } from './spec-helpers';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59:       output = JSON.parse(output);",
      "60:       expect(output).to.deep.equal(['error']);",
      "61:     });",
      "62:   });",
      "63: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64:     it('can be replied to', async () => {",
      "65:       ipcMain.on('test-echo', (e, arg) => {",
      "66:         e.reply('test-echo', arg);",
      "67:       });",
      "68:       defer(() => {",
      "69:         ipcMain.removeAllListeners('test-echo');",
      "70:       });",
      "72:       const w = new BrowserWindow({",
      "73:         show: false,",
      "74:         webPreferences: {",
      "75:           nodeIntegration: true",
      "76:         }",
      "77:       });",
      "78:       w.loadURL('about:blank');",
      "79:       const v = await w.webContents.executeJavaScript(`new Promise((resolve, reject) => {",
      "80:         const { ipcRenderer } = require('electron')",
      "81:         ipcRenderer.send('test-echo', 'hello')",
      "82:         ipcRenderer.on('test-echo', (e, v) => {",
      "83:           resolve(v)",
      "84:         })",
      "85:       })`);",
      "86:       expect(v).to.equal('hello');",
      "87:     });",
      "",
      "---------------"
    ],
    "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts": [
      "File: spec-main/guest-window-manager-spec.ts -> spec-main/guest-window-manager-spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:     if (key === 'openerId' && typeof value === 'number') {",
      "190:       return 'placeholder-opener-id';",
      "191:     }",
      "192:     if (key === 'returnValue') {",
      "193:       return 'placeholder-guest-contents-id';",
      "194:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:     if (key === 'processId' && typeof value === 'number') {",
      "193:       return 'placeholder-process-id';",
      "194:     }",
      "",
      "---------------"
    ],
    "typings/internal-electron.d.ts||typings/internal-electron.d.ts": [
      "File: typings/internal-electron.d.ts -> typings/internal-electron.d.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "68:     _callWindowOpenHandler(event: any, url: string, frameName: string, rawFeatures: string): Electron.BrowserWindowConstructorOptions | null;",
      "69:     _setNextChildWebPreferences(prefs: Partial<Electron.BrowserWindowConstructorOptions['webPreferences']> & Pick<Electron.BrowserWindowConstructorOptions, 'backgroundColor'>): void;",
      "70:     _send(internal: boolean, channel: string, args: any): boolean;",
      "73:     _postMessage(channel: string, message: any, transfer?: any[]): void;",
      "74:     _sendInternal(channel: string, ...args: any[]): void;",
      "75:     _printToPDF(options: any): Promise<Buffer>;",
      "",
      "[Removed Lines]",
      "71:     _sendToFrame(internal: boolean, frameId: number, channel: string, args: any): boolean;",
      "72:     _sendToFrameInternal(frameId: number, channel: string, ...args: any[]): boolean;",
      "",
      "[Added Lines]",
      "71:     _sendToFrame(internal: boolean, frameId: number | [number, number], channel: string, args: any): boolean;",
      "72:     _sendToFrameInternal(frameId: number | [number, number], channel: string, ...args: any[]): boolean;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5c8e7e8b7f485ceafa8b271086d7b87e1de9dedd",
      "candidate_info": {
        "commit_hash": "5c8e7e8b7f485ceafa8b271086d7b87e1de9dedd",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/5c8e7e8b7f485ceafa8b271086d7b87e1de9dedd",
        "files": [
          "docs/api/structures/ipc-main-event.md",
          "docs/api/structures/ipc-main-invoke-event.md",
          "docs/api/web-contents.md",
          "lib/browser/api/web-contents.js",
          "lib/browser/remote/server.ts",
          "shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/api/electron_api_web_contents.h",
          "shell/common/api/remote/remote_callback_freer.cc",
          "shell/common/api/remote/remote_callback_freer.h",
          "shell/common/gin_helper/event_emitter.cc",
          "spec-main/api-ipc-main-spec.ts",
          "typings/internal-ambient.d.ts",
          "typings/internal-electron.d.ts"
        ],
        "message": "fix: restrict sendToFrame to same-process frames by default (#26928)\n\n* fix: restrict sendToFrame to same-process frames by default (#26875)\n\n* missed a conflict\n\n* fix build\n\n* fix build again",
        "before_after_code_files": [
          "lib/browser/api/web-contents.js||lib/browser/api/web-contents.js",
          "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
          "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
          "shell/common/api/remote/remote_callback_freer.cc||shell/common/api/remote/remote_callback_freer.cc",
          "shell/common/api/remote/remote_callback_freer.h||shell/common/api/remote/remote_callback_freer.h",
          "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc",
          "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts",
          "typings/internal-ambient.d.ts||typings/internal-ambient.d.ts",
          "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
            "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc",
            "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts",
            "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
          ],
          "candidate": [
            "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
            "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc",
            "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts",
            "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
          ]
        }
      },
      "candidate_diff": {
        "lib/browser/api/web-contents.js||lib/browser/api/web-contents.js": [
          "File: lib/browser/api/web-contents.js -> lib/browser/api/web-contents.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:   return this._send(internal, sendToAll, channel, args);",
          "168: };",
          "170:   if (typeof channel !== 'string') {",
          "171:     throw new Error('Missing required channel argument');",
          "174:   }",
          "176:   const internal = false;",
          "177:   const sendToAll = false;",
          "180: };",
          "182:   if (typeof channel !== 'string') {",
          "183:     throw new Error('Missing required channel argument');",
          "186:   }",
          "188:   const internal = true;",
          "189:   const sendToAll = false;",
          "192: };",
          "",
          "[Removed Lines]",
          "169: WebContents.prototype.sendToFrame = function (frameId, channel, ...args) {",
          "172:   } else if (typeof frameId !== 'number') {",
          "173:     throw new Error('Missing required frameId argument');",
          "179:   return this._sendToFrame(internal, sendToAll, frameId, channel, args);",
          "181: WebContents.prototype._sendToFrameInternal = function (frameId, channel, ...args) {",
          "184:   } else if (typeof frameId !== 'number') {",
          "185:     throw new Error('Missing required frameId argument');",
          "191:   return this._sendToFrame(internal, sendToAll, frameId, channel, args);",
          "",
          "[Added Lines]",
          "169: WebContents.prototype.sendToFrame = function (frame, channel, ...args) {",
          "172:   } else if (!(typeof frame === 'number' || Array.isArray(frame))) {",
          "173:     throw new Error('Missing required frame argument (must be number or array)');",
          "179:   return this._sendToFrame(internal, sendToAll, frame, channel, args);",
          "181: WebContents.prototype._sendToFrameInternal = function (frame, channel, ...args) {",
          "184:   } else if (!(typeof frame === 'number' || Array.isArray(frame))) {",
          "185:     throw new Error('Missing required frame argument (must be number or array)');",
          "191:   return this._sendToFrame(internal, sendToAll, frame, channel, args);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "437: };",
          "439: const addReplyToEvent = (event) => {",
          "440:   event.reply = (...args) => {",
          "442:   };",
          "443: };",
          "",
          "[Removed Lines]",
          "441:     event.sender.sendToFrame(event.frameId, ...args);",
          "",
          "[Added Lines]",
          "440:   const { processId, frameId } = event;",
          "442:     event.sender.sendToFrame([processId, frameId], ...args);",
          "",
          "---------------"
        ],
        "lib/browser/remote/server.ts||lib/browser/remote/server.ts": [
          "File: lib/browser/remote/server.ts -> lib/browser/remote/server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:   });",
          "279:   const metaToValue = function (meta: MetaTypeFromRenderer): any {",
          "280:     switch (meta.type) {",
          "281:       case 'nativeimage':",
          "",
          "[Removed Lines]",
          "278: const unwrapArgs = function (sender: electron.WebContents, frameId: number, contextId: string, args: any[]) {",
          "",
          "[Added Lines]",
          "278: const unwrapArgs = function (sender: electron.WebContents, frameId: [number, number], contextId: string, args: any[]) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:         v8Util.setHiddenValue(callIntoRenderer, 'location', meta.location);",
          "330:         Object.defineProperty(callIntoRenderer, 'length', { value: meta.length });",
          "333:         rendererFunctions.set(objectId, callIntoRenderer);",
          "334:         return callIntoRenderer;",
          "335:       }",
          "",
          "[Removed Lines]",
          "332:         v8Util.setRemoteCallbackFreer(callIntoRenderer, frameId, contextId, meta.id, sender);",
          "",
          "[Added Lines]",
          "332:         v8Util.setRemoteCallbackFreer(callIntoRenderer, frameId[0], frameId[1], contextId, meta.id, sender);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "478: });",
          "480: handleRemoteCommand('ELECTRON_BROWSER_CONSTRUCTOR', function (event, contextId, id, args) {",
          "482:   const constructor = objectsRegistry.get(id);",
          "484:   if (constructor == null) {",
          "",
          "[Removed Lines]",
          "481:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "481:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "489: });",
          "491: handleRemoteCommand('ELECTRON_BROWSER_FUNCTION_CALL', function (event, contextId, id, args) {",
          "493:   const func = objectsRegistry.get(id);",
          "495:   if (func == null) {",
          "",
          "[Removed Lines]",
          "492:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "492:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "506: });",
          "508: handleRemoteCommand('ELECTRON_BROWSER_MEMBER_CONSTRUCTOR', function (event, contextId, id, method, args) {",
          "510:   const object = objectsRegistry.get(id);",
          "512:   if (object == null) {",
          "",
          "[Removed Lines]",
          "509:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "509:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "517: });",
          "519: handleRemoteCommand('ELECTRON_BROWSER_MEMBER_CALL', function (event, contextId, id, method, args) {",
          "521:   const object = objectsRegistry.get(id);",
          "523:   if (object == null) {",
          "",
          "[Removed Lines]",
          "520:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "520:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "534: });",
          "536: handleRemoteCommand('ELECTRON_BROWSER_MEMBER_SET', function (event, contextId, id, name, args) {",
          "538:   const obj = objectsRegistry.get(id);",
          "540:   if (obj == null) {",
          "",
          "[Removed Lines]",
          "537:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "537:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------"
        ],
        "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc": [
          "File: shell/browser/api/electron_api_web_contents.cc -> shell/browser/api/electron_api_web_contents.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2321: bool WebContents::SendIPCMessageToFrame(bool internal,",
          "2322:                                         bool send_to_all,",
          "2324:                                         const std::string& channel,",
          "2325:                                         v8::Local<v8::Value> args) {",
          "2326:   blink::CloneableMessage message;",
          "",
          "[Removed Lines]",
          "2323:                                         int32_t frame_id,",
          "",
          "[Added Lines]",
          "2323:                                         v8::Local<v8::Value> frame,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2329:         gin::StringToV8(isolate(), \"Failed to serialize arguments\")));",
          "2330:     return false;",
          "2331:   }",
          "2339:     return false;",
          "2341:   mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;",
          "2343:   electron_renderer->Message(internal, send_to_all, channel, std::move(message),",
          "2344:                              0 /* sender_id */);",
          "2345:   return true;",
          "",
          "[Removed Lines]",
          "2332:   auto frames = web_contents()->GetAllFrames();",
          "2333:   auto iter = std::find_if(frames.begin(), frames.end(), [frame_id](auto* f) {",
          "2334:     return f->GetRoutingID() == frame_id;",
          "2335:   });",
          "2336:   if (iter == frames.end())",
          "2337:     return false;",
          "2338:   if (!(*iter)->IsRenderFrameLive())",
          "2342:   (*iter)->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
          "",
          "[Added Lines]",
          "2332:   int32_t frame_id;",
          "2333:   int32_t process_id;",
          "2334:   if (gin::ConvertFromV8(isolate(), frame, &frame_id)) {",
          "2335:     process_id = web_contents()->GetMainFrame()->GetProcess()->GetID();",
          "2336:   } else {",
          "2337:     std::vector<int32_t> id_pair;",
          "2338:     if (gin::ConvertFromV8(isolate(), frame, &id_pair) && id_pair.size() == 2) {",
          "2339:       process_id = id_pair[0];",
          "2340:       frame_id = id_pair[1];",
          "2341:     } else {",
          "2342:       isolate()->ThrowException(v8::Exception::Error(gin::StringToV8(",
          "2343:           isolate(),",
          "2344:           \"frameId must be a number or a pair of [processId, frameId]\")));",
          "2345:       return false;",
          "2346:     }",
          "2347:   }",
          "2349:   auto* rfh = content::RenderFrameHost::FromID(process_id, frame_id);",
          "2350:   if (!rfh || !rfh->IsRenderFrameLive() ||",
          "2351:       content::WebContents::FromRenderFrameHost(rfh) != web_contents())",
          "2355:   rfh->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
          "",
          "---------------"
        ],
        "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h": [
          "File: shell/browser/api/electron_api_web_contents.h -> shell/browser/api/electron_api_web_contents.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:   bool SendIPCMessageToFrame(bool internal,",
          "277:                              bool send_to_all,",
          "279:                              const std::string& channel,",
          "280:                              v8::Local<v8::Value> args);",
          "",
          "[Removed Lines]",
          "278:                              int32_t frame_id,",
          "",
          "[Added Lines]",
          "278:                              v8::Local<v8::Value> frame,",
          "",
          "---------------"
        ],
        "shell/common/api/remote/remote_callback_freer.cc||shell/common/api/remote/remote_callback_freer.cc": [
          "File: shell/common/api/remote/remote_callback_freer.cc -> shell/common/api/remote/remote_callback_freer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: void RemoteCallbackFreer::BindTo(v8::Isolate* isolate,",
          "19:                                  v8::Local<v8::Object> target,",
          "20:                                  int frame_id,",
          "21:                                  const std::string& context_id,",
          "22:                                  int object_id,",
          "23:                                  content::WebContents* web_contents) {",
          "26: }",
          "28: RemoteCallbackFreer::RemoteCallbackFreer(v8::Isolate* isolate,",
          "29:                                          v8::Local<v8::Object> target,",
          "30:                                          int frame_id,",
          "31:                                          const std::string& context_id,",
          "32:                                          int object_id,",
          "33:                                          content::WebContents* web_contents)",
          "34:     : ObjectLifeMonitor(isolate, target),",
          "35:       content::WebContentsObserver(web_contents),",
          "36:       frame_id_(frame_id),",
          "37:       context_id_(context_id),",
          "38:       object_id_(object_id) {}",
          "",
          "[Removed Lines]",
          "24:   new RemoteCallbackFreer(isolate, target, frame_id, context_id, object_id,",
          "25:                           web_contents);",
          "",
          "[Added Lines]",
          "20:                                  int process_id,",
          "25:   new RemoteCallbackFreer(isolate, target, process_id, frame_id, context_id,",
          "26:                           object_id, web_contents);",
          "31:                                          int process_id,",
          "38:       process_id_(process_id),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: RemoteCallbackFreer::~RemoteCallbackFreer() = default;",
          "42: void RemoteCallbackFreer::RunDestructor() {",
          "54:   Observe(nullptr);",
          "55: }",
          "",
          "[Removed Lines]",
          "43:   auto frames = web_contents()->GetAllFrames();",
          "44:   auto iter = std::find_if(frames.begin(), frames.end(), [this](auto* f) {",
          "45:     return f->GetRoutingID() == frame_id_;",
          "46:   });",
          "48:   if (iter != frames.end() && (*iter)->IsRenderFrameLive()) {",
          "49:     mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;",
          "50:     (*iter)->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
          "51:     electron_renderer->DereferenceRemoteJSCallback(context_id_, object_id_);",
          "52:   }",
          "",
          "[Added Lines]",
          "46:   auto* rfh = content::RenderFrameHost::FromID(process_id_, frame_id_);",
          "47:   if (!rfh || !rfh->IsRenderFrameLive() ||",
          "48:       content::WebContents::FromRenderFrameHost(rfh) != web_contents())",
          "49:     return;",
          "51:   mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;",
          "52:   rfh->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
          "53:   electron_renderer->DereferenceRemoteJSCallback(context_id_, object_id_);",
          "",
          "---------------"
        ],
        "shell/common/api/remote/remote_callback_freer.h||shell/common/api/remote/remote_callback_freer.h": [
          "File: shell/common/api/remote/remote_callback_freer.h -> shell/common/api/remote/remote_callback_freer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  public:",
          "18:   static void BindTo(v8::Isolate* isolate,",
          "19:                      v8::Local<v8::Object> target,",
          "20:                      int frame_id,",
          "21:                      const std::string& context_id,",
          "22:                      int object_id,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:                      int process_id,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  protected:",
          "26:   RemoteCallbackFreer(v8::Isolate* isolate,",
          "27:                       v8::Local<v8::Object> target,",
          "28:                       int frame_id,",
          "29:                       const std::string& context_id,",
          "30:                       int object_id,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:                       int process_id,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:   void RenderViewDeleted(content::RenderViewHost*) override;",
          "39:  private:",
          "40:   int frame_id_;",
          "41:   std::string context_id_;",
          "42:   int object_id_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:   int process_id_;",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc": [
          "File: shell/common/gin_helper/event_emitter.cc -> shell/common/gin_helper/event_emitter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"shell/common/gin_helper/event_emitter.h\"",
          "7: #include \"content/public/browser/render_frame_host.h\"",
          "8: #include \"shell/browser/api/event.h\"",
          "9: #include \"shell/common/gin_helper/dictionary.h\"",
          "10: #include \"shell/common/gin_helper/object_template_builder.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include \"content/public/browser/render_process_host.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:   Dictionary dict(isolate, event);",
          "83:   dict.Set(\"sender\", sender);",
          "86:     dict.Set(\"frameId\", frame->GetRoutingID());",
          "87:   return event;",
          "88: }",
          "",
          "[Removed Lines]",
          "85:   if (frame)",
          "",
          "[Added Lines]",
          "86:   if (frame) {",
          "88:     dict.Set(\"processId\", frame->GetProcess()->GetID());",
          "89:   }",
          "",
          "---------------"
        ],
        "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts": [
          "File: spec-main/api-ipc-main-spec.ts -> spec-main/api-ipc-main-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   });",
          "48:   describe('ipcMain.on', () => {",
          "49:     it('is not used for internals', async () => {",
          "50:       const appPath = path.join(fixtures, 'api', 'ipc-main-listeners');",
          "51:       const electronPath = process.execPath;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     afterEach(() => { ipcMain.removeAllListeners('test-echo'); });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:       output = JSON.parse(output);",
          "60:       expect(output).to.deep.equal(['error']);",
          "61:     });",
          "62:   });",
          "63: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     it('can be replied to', async () => {",
          "66:       ipcMain.on('test-echo', (e, arg) => {",
          "67:         e.reply('test-echo', arg);",
          "68:       });",
          "70:       const w = new BrowserWindow({",
          "71:         show: false,",
          "72:         webPreferences: {",
          "73:           nodeIntegration: true",
          "74:         }",
          "75:       });",
          "76:       w.loadURL('about:blank');",
          "77:       const v = await w.webContents.executeJavaScript(`new Promise((resolve, reject) => {",
          "78:         const { ipcRenderer } = require('electron')",
          "79:         ipcRenderer.send('test-echo', 'hello')",
          "80:         ipcRenderer.on('test-echo', (e, v) => {",
          "81:           resolve(v)",
          "82:         })",
          "83:       })`);",
          "84:       expect(v).to.equal('hello');",
          "85:     });",
          "",
          "---------------"
        ],
        "typings/internal-ambient.d.ts||typings/internal-ambient.d.ts": [
          "File: typings/internal-ambient.d.ts -> typings/internal-ambient.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     requestGarbageCollectionForTesting(): void;",
          "41:     createIDWeakMap<V>(): ElectronInternal.KeyWeakMap<number, V>;",
          "42:     createDoubleIDWeakMap<V>(): ElectronInternal.KeyWeakMap<[string, number], V>;",
          "44:     weaklyTrackValue(value: any): void;",
          "45:     clearWeaklyTrackedValues(): void;",
          "46:     getWeaklyTrackedValues(): any[];",
          "",
          "[Removed Lines]",
          "43:     setRemoteCallbackFreer(fn: Function, frameId: number, contextId: String, id: number, sender: any): void",
          "",
          "[Added Lines]",
          "43:     setRemoteCallbackFreer(fn: Function, processId: number, frameId: number, contextId: String, id: number, sender: any): void",
          "",
          "---------------"
        ],
        "typings/internal-electron.d.ts||typings/internal-electron.d.ts": [
          "File: typings/internal-electron.d.ts -> typings/internal-electron.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     getOwnerBrowserWindow(): Electron.BrowserWindow;",
          "25:   }",
          "27:   interface SerializedError {",
          "28:     message: string;",
          "29:     stack?: string,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:   interface WebPreferences {",
          "28:     guestInstanceId?: number;",
          "29:     openerId?: number;",
          "30:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "429400040ecb16a21d19936658579e65a797e4cc",
      "candidate_info": {
        "commit_hash": "429400040ecb16a21d19936658579e65a797e4cc",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/429400040ecb16a21d19936658579e65a797e4cc",
        "files": [
          "docs/api/structures/ipc-main-event.md",
          "docs/api/structures/ipc-main-invoke-event.md",
          "docs/api/web-contents.md",
          "lib/browser/api/web-contents.ts",
          "lib/browser/remote/server.ts",
          "shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/api/electron_api_web_contents.h",
          "shell/common/gin_helper/event_emitter.cc",
          "spec-main/api-ipc-main-spec.ts",
          "spec-main/fixtures/snapshots/proxy-window-open.snapshot.txt",
          "spec-main/guest-window-manager-spec.ts",
          "typings/internal-electron.d.ts"
        ],
        "message": "fix: restrict sendToFrame to same-process frames by default (#26875) (#26926)",
        "before_after_code_files": [
          "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts",
          "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
          "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
          "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc",
          "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts",
          "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts",
          "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts",
            "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
            "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc",
            "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts",
            "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts",
            "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
          ],
          "candidate": [
            "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts",
            "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
            "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc",
            "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts",
            "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts",
            "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
          ]
        }
      },
      "candidate_diff": {
        "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts": [
          "File: lib/browser/api/web-contents.ts -> lib/browser/api/web-contents.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:   return this._send(internal, sendToAll, channel, args);",
          "163: };",
          "165:   if (typeof channel !== 'string') {",
          "166:     throw new Error('Missing required channel argument');",
          "169:   }",
          "171:   const internal = false;",
          "172:   const sendToAll = false;",
          "175: };",
          "177:   if (typeof channel !== 'string') {",
          "178:     throw new Error('Missing required channel argument');",
          "181:   }",
          "183:   const internal = true;",
          "184:   const sendToAll = false;",
          "187: };",
          "",
          "[Removed Lines]",
          "164: WebContents.prototype.sendToFrame = function (frameId, channel, ...args) {",
          "167:   } else if (typeof frameId !== 'number') {",
          "168:     throw new Error('Missing required frameId argument');",
          "174:   return this._sendToFrame(internal, sendToAll, frameId, channel, args);",
          "176: WebContents.prototype._sendToFrameInternal = function (frameId, channel, ...args) {",
          "179:   } else if (typeof frameId !== 'number') {",
          "180:     throw new Error('Missing required frameId argument');",
          "186:   return this._sendToFrame(internal, sendToAll, frameId, channel, args);",
          "",
          "[Added Lines]",
          "164: WebContents.prototype.sendToFrame = function (frame, channel, ...args) {",
          "167:   } else if (!(typeof frame === 'number' || Array.isArray(frame))) {",
          "168:     throw new Error('Missing required frame argument (must be number or array)');",
          "174:   return this._sendToFrame(internal, sendToAll, frame, channel, args);",
          "176: WebContents.prototype._sendToFrameInternal = function (frame, channel, ...args) {",
          "179:   } else if (!(typeof frame === 'number' || Array.isArray(frame))) {",
          "180:     throw new Error('Missing required frame argument (must be number or array)');",
          "186:   return this._sendToFrame(internal, sendToAll, frame, channel, args);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439: };",
          "441: const addReplyToEvent = (event: any) => {",
          "442:   event.reply = (...args: any[]) => {",
          "444:   };",
          "445: };",
          "",
          "[Removed Lines]",
          "443:     event.sender.sendToFrame(event.frameId, ...args);",
          "",
          "[Added Lines]",
          "442:   const { processId, frameId } = event;",
          "444:     event.sender.sendToFrame([processId, frameId], ...args);",
          "",
          "---------------"
        ],
        "lib/browser/remote/server.ts||lib/browser/remote/server.ts": [
          "File: lib/browser/remote/server.ts -> lib/browser/remote/server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: ];",
          "21: type RendererFunctionId = [string, number] // [contextId, funcId]",
          "23: type WeakRef<T> = { deref(): T | undefined }",
          "24: type CallIntoRenderer = (...args: any[]) => void",
          "",
          "[Removed Lines]",
          "22: type FinalizerInfo = { id: RendererFunctionId, webContents: electron.WebContents, frameId: number };",
          "",
          "[Added Lines]",
          "22: type FinalizerInfo = { id: RendererFunctionId, webContents: electron.WebContents, frameId: [number, number] };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     if (deref !== undefined) return deref;",
          "44:   }",
          "45: }",
          "48:   const wr = new (globalThis as any).WeakRef(value) as WeakRef<CallIntoRenderer>;",
          "49:   const mapKey = id[0] + '~' + id[1];",
          "",
          "[Removed Lines]",
          "46: function setCachedRendererFunction (id: RendererFunctionId, wc: electron.WebContents, frameId: number, value: CallIntoRenderer) {",
          "",
          "[Added Lines]",
          "46: function setCachedRendererFunction (id: RendererFunctionId, wc: electron.WebContents, frameId: [number, number], value: CallIntoRenderer) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:   });",
          "222:   const metaToValue = function (meta: MetaTypeFromRenderer): any {",
          "223:     switch (meta.type) {",
          "224:       case 'nativeimage':",
          "",
          "[Removed Lines]",
          "221: const unwrapArgs = function (sender: electron.WebContents, frameId: number, contextId: string, args: any[]) {",
          "",
          "[Added Lines]",
          "221: const unwrapArgs = function (sender: electron.WebContents, frameId: [number, number], contextId: string, args: any[]) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "421: });",
          "423: handleRemoteCommand('ELECTRON_BROWSER_CONSTRUCTOR', function (event, contextId, id, args) {",
          "425:   const constructor = objectsRegistry.get(id);",
          "427:   if (constructor == null) {",
          "",
          "[Removed Lines]",
          "424:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "424:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "432: });",
          "434: handleRemoteCommand('ELECTRON_BROWSER_FUNCTION_CALL', function (event, contextId, id, args) {",
          "436:   const func = objectsRegistry.get(id);",
          "438:   if (func == null) {",
          "",
          "[Removed Lines]",
          "435:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "435:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "449: });",
          "451: handleRemoteCommand('ELECTRON_BROWSER_MEMBER_CONSTRUCTOR', function (event, contextId, id, method, args) {",
          "453:   const object = objectsRegistry.get(id);",
          "455:   if (object == null) {",
          "",
          "[Removed Lines]",
          "452:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "452:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "460: });",
          "462: handleRemoteCommand('ELECTRON_BROWSER_MEMBER_CALL', function (event, contextId, id, method, args) {",
          "464:   const object = objectsRegistry.get(id);",
          "466:   if (object == null) {",
          "",
          "[Removed Lines]",
          "463:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "463:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "477: });",
          "479: handleRemoteCommand('ELECTRON_BROWSER_MEMBER_SET', function (event, contextId, id, name, args) {",
          "481:   const obj = objectsRegistry.get(id);",
          "483:   if (obj == null) {",
          "",
          "[Removed Lines]",
          "480:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "480:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------"
        ],
        "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc": [
          "File: shell/browser/api/electron_api_web_contents.cc -> shell/browser/api/electron_api_web_contents.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2424: bool WebContents::SendIPCMessageToFrame(bool internal,",
          "2425:                                         bool send_to_all,",
          "2427:                                         const std::string& channel,",
          "2428:                                         v8::Local<v8::Value> args) {",
          "2429:   v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();",
          "",
          "[Removed Lines]",
          "2426:                                         int32_t frame_id,",
          "",
          "[Added Lines]",
          "2426:                                         v8::Local<v8::Value> frame,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2433:         gin::StringToV8(isolate, \"Failed to serialize arguments\")));",
          "2434:     return false;",
          "2435:   }",
          "2443:     return false;",
          "2445:   mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;",
          "2447:   electron_renderer->Message(internal, send_to_all, channel, std::move(message),",
          "2448:                              0 /* sender_id */);",
          "2449:   return true;",
          "",
          "[Removed Lines]",
          "2436:   auto frames = web_contents()->GetAllFrames();",
          "2437:   auto iter = std::find_if(frames.begin(), frames.end(), [frame_id](auto* f) {",
          "2438:     return f->GetRoutingID() == frame_id;",
          "2439:   });",
          "2440:   if (iter == frames.end())",
          "2441:     return false;",
          "2442:   if (!(*iter)->IsRenderFrameLive())",
          "2446:   (*iter)->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
          "",
          "[Added Lines]",
          "2436:   int32_t frame_id;",
          "2437:   int32_t process_id;",
          "2438:   if (gin::ConvertFromV8(isolate, frame, &frame_id)) {",
          "2439:     process_id = web_contents()->GetMainFrame()->GetProcess()->GetID();",
          "2440:   } else {",
          "2441:     std::vector<int32_t> id_pair;",
          "2442:     if (gin::ConvertFromV8(isolate, frame, &id_pair) && id_pair.size() == 2) {",
          "2443:       process_id = id_pair[0];",
          "2444:       frame_id = id_pair[1];",
          "2445:     } else {",
          "2446:       isolate->ThrowException(v8::Exception::Error(gin::StringToV8(",
          "2447:           isolate,",
          "2448:           \"frameId must be a number or a pair of [processId, frameId]\")));",
          "2449:       return false;",
          "2450:     }",
          "2451:   }",
          "2453:   auto* rfh = content::RenderFrameHost::FromID(process_id, frame_id);",
          "2454:   if (!rfh || !rfh->IsRenderFrameLive() ||",
          "2455:       content::WebContents::FromRenderFrameHost(rfh) != web_contents())",
          "2459:   rfh->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
          "",
          "---------------"
        ],
        "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h": [
          "File: shell/browser/api/electron_api_web_contents.h -> shell/browser/api/electron_api_web_contents.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   bool SendIPCMessageToFrame(bool internal,",
          "296:                              bool send_to_all,",
          "298:                              const std::string& channel,",
          "299:                              v8::Local<v8::Value> args);",
          "",
          "[Removed Lines]",
          "297:                              int32_t frame_id,",
          "",
          "[Added Lines]",
          "297:                              v8::Local<v8::Value> frame,",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc": [
          "File: shell/common/gin_helper/event_emitter.cc -> shell/common/gin_helper/event_emitter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"shell/common/gin_helper/event_emitter.h\"",
          "7: #include \"content/public/browser/render_frame_host.h\"",
          "8: #include \"shell/browser/api/event.h\"",
          "9: #include \"shell/common/gin_helper/dictionary.h\"",
          "10: #include \"shell/common/gin_helper/object_template_builder.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include \"content/public/browser/render_process_host.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   Dictionary dict(isolate, event);",
          "68:   dict.Set(\"sender\", sender);",
          "71:     dict.Set(\"frameId\", frame->GetRoutingID());",
          "72:   return event;",
          "73: }",
          "",
          "[Removed Lines]",
          "70:   if (frame)",
          "",
          "[Added Lines]",
          "71:   if (frame) {",
          "73:     dict.Set(\"processId\", frame->GetProcess()->GetID());",
          "74:   }",
          "",
          "---------------"
        ],
        "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts": [
          "File: spec-main/api-ipc-main-spec.ts -> spec-main/api-ipc-main-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import * as cp from 'child_process';",
          "4: import { closeAllWindows } from './window-helpers';",
          "5: import { emittedOnce } from './events-helpers';",
          "6: import { ipcMain, BrowserWindow } from 'electron/main';",
          "8: describe('ipc main module', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import { defer } from './spec-helpers';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:       output = JSON.parse(output);",
          "60:       expect(output).to.deep.equal(['error']);",
          "61:     });",
          "62:   });",
          "63: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     it('can be replied to', async () => {",
          "65:       ipcMain.on('test-echo', (e, arg) => {",
          "66:         e.reply('test-echo', arg);",
          "67:       });",
          "68:       defer(() => {",
          "69:         ipcMain.removeAllListeners('test-echo');",
          "70:       });",
          "72:       const w = new BrowserWindow({",
          "73:         show: false,",
          "74:         webPreferences: {",
          "75:           nodeIntegration: true",
          "76:         }",
          "77:       });",
          "78:       w.loadURL('about:blank');",
          "79:       const v = await w.webContents.executeJavaScript(`new Promise((resolve, reject) => {",
          "80:         const { ipcRenderer } = require('electron')",
          "81:         ipcRenderer.send('test-echo', 'hello')",
          "82:         ipcRenderer.on('test-echo', (e, v) => {",
          "83:           resolve(v)",
          "84:         })",
          "85:       })`);",
          "86:       expect(v).to.equal('hello');",
          "87:     });",
          "",
          "---------------"
        ],
        "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts": [
          "File: spec-main/guest-window-manager-spec.ts -> spec-main/guest-window-manager-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     if (key === 'openerId' && typeof value === 'number') {",
          "95:       return 'placeholder-opener-id';",
          "96:     }",
          "97:     if (key === 'returnValue') {",
          "98:       return 'placeholder-guest-contents-id';",
          "99:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:     if (key === 'processId' && typeof value === 'number') {",
          "98:       return 'placeholder-process-id';",
          "99:     }",
          "",
          "---------------"
        ],
        "typings/internal-electron.d.ts||typings/internal-electron.d.ts": [
          "File: typings/internal-electron.d.ts -> typings/internal-electron.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     _getPreloadPaths(): string[];",
          "58:     equal(other: WebContents): boolean;",
          "59:     _initiallyShown: boolean;",
          "61:   }",
          "63:   interface WebPreferences {",
          "",
          "[Removed Lines]",
          "60:     _sendToFrameInternal(frameId: number, channel: string, ...args: any[]): boolean;",
          "",
          "[Added Lines]",
          "60:     _sendToFrameInternal(frameId: number | [number, number], channel: string, ...args: any[]): boolean;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:   interface WebContentsInternal extends Electron.WebContents {",
          "114:     _send(internal: boolean, sendToAll: boolean, channel: string, args: any): boolean;",
          "116:     _postMessage(channel: string, message: any, transfer?: any[]): void;",
          "117:     _sendInternal(channel: string, ...args: any[]): void;",
          "118:     _sendInternalToAll(channel: string, ...args: any[]): void;",
          "",
          "[Removed Lines]",
          "115:     _sendToFrame(internal: boolean, sendToAll: boolean, frameId: number, channel: string, args: any): boolean;",
          "",
          "[Added Lines]",
          "115:     _sendToFrame(internal: boolean, sendToAll: boolean, frameId: number | [number, number], channel: string, args: any): boolean;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36c695ce2a7e22c07fe1e30c61c00d20371daee2",
      "candidate_info": {
        "commit_hash": "36c695ce2a7e22c07fe1e30c61c00d20371daee2",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/36c695ce2a7e22c07fe1e30c61c00d20371daee2",
        "files": [
          "docs/api/structures/ipc-main-event.md",
          "docs/api/structures/ipc-main-invoke-event.md",
          "docs/api/web-contents.md",
          "lib/browser/api/web-contents.ts",
          "lib/browser/remote/server.ts",
          "shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/api/electron_api_web_contents.h",
          "shell/common/gin_helper/event_emitter.cc",
          "spec-main/api-ipc-main-spec.ts",
          "spec-main/fixtures/snapshots/proxy-window-open.snapshot.txt",
          "spec-main/guest-window-manager-spec.ts",
          "typings/internal-electron.d.ts"
        ],
        "message": "fix: restrict sendToFrame to same-process frames by default (#26875) (#26925)",
        "before_after_code_files": [
          "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts",
          "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
          "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
          "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc",
          "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts",
          "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts",
          "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts",
            "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
            "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc",
            "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts",
            "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts",
            "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
          ],
          "candidate": [
            "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts",
            "lib/browser/remote/server.ts||lib/browser/remote/server.ts",
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h",
            "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc",
            "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts",
            "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts",
            "typings/internal-electron.d.ts||typings/internal-electron.d.ts"
          ]
        }
      },
      "candidate_diff": {
        "lib/browser/api/web-contents.ts||lib/browser/api/web-contents.ts": [
          "File: lib/browser/api/web-contents.ts -> lib/browser/api/web-contents.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:   return this._send(internal, sendToAll, channel, args);",
          "166: };",
          "168:   if (typeof channel !== 'string') {",
          "169:     throw new Error('Missing required channel argument');",
          "172:   }",
          "174:   const internal = false;",
          "175:   const sendToAll = false;",
          "178: };",
          "180:   if (typeof channel !== 'string') {",
          "181:     throw new Error('Missing required channel argument');",
          "184:   }",
          "186:   const internal = true;",
          "187:   const sendToAll = false;",
          "190: };",
          "",
          "[Removed Lines]",
          "167: WebContents.prototype.sendToFrame = function (frameId, channel, ...args) {",
          "170:   } else if (typeof frameId !== 'number') {",
          "171:     throw new Error('Missing required frameId argument');",
          "177:   return this._sendToFrame(internal, sendToAll, frameId, channel, args);",
          "179: WebContents.prototype._sendToFrameInternal = function (frameId, channel, ...args) {",
          "182:   } else if (typeof frameId !== 'number') {",
          "183:     throw new Error('Missing required frameId argument');",
          "189:   return this._sendToFrame(internal, sendToAll, frameId, channel, args);",
          "",
          "[Added Lines]",
          "167: WebContents.prototype.sendToFrame = function (frame, channel, ...args) {",
          "170:   } else if (!(typeof frame === 'number' || Array.isArray(frame))) {",
          "171:     throw new Error('Missing required frame argument (must be number or array)');",
          "177:   return this._sendToFrame(internal, sendToAll, frame, channel, args);",
          "179: WebContents.prototype._sendToFrameInternal = function (frame, channel, ...args) {",
          "182:   } else if (!(typeof frame === 'number' || Array.isArray(frame))) {",
          "183:     throw new Error('Missing required frame argument (must be number or array)');",
          "189:   return this._sendToFrame(internal, sendToAll, frame, channel, args);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "478: };",
          "480: const addReplyToEvent = (event: any) => {",
          "481:   event.reply = (...args: any[]) => {",
          "483:   };",
          "484: };",
          "",
          "[Removed Lines]",
          "482:     event.sender.sendToFrame(event.frameId, ...args);",
          "",
          "[Added Lines]",
          "481:   const { processId, frameId } = event;",
          "483:     event.sender.sendToFrame([processId, frameId], ...args);",
          "",
          "---------------"
        ],
        "lib/browser/remote/server.ts||lib/browser/remote/server.ts": [
          "File: lib/browser/remote/server.ts -> lib/browser/remote/server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: ];",
          "22: type RendererFunctionId = [string, number] // [contextId, funcId]",
          "24: type CallIntoRenderer = (...args: any[]) => void",
          "",
          "[Removed Lines]",
          "23: type FinalizerInfo = { id: RendererFunctionId, webContents: electron.WebContents, frameId: number };",
          "",
          "[Added Lines]",
          "23: type FinalizerInfo = { id: RendererFunctionId, webContents: electron.WebContents, frameId: [number, number] };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     if (deref !== undefined) return deref;",
          "44:   }",
          "45: }",
          "48:   const wr = new WeakRef<CallIntoRenderer>(value);",
          "49:   const mapKey = id[0] + '~' + id[1];",
          "",
          "[Removed Lines]",
          "46: function setCachedRendererFunction (id: RendererFunctionId, wc: electron.WebContents, frameId: number, value: CallIntoRenderer) {",
          "",
          "[Added Lines]",
          "46: function setCachedRendererFunction (id: RendererFunctionId, wc: electron.WebContents, frameId: [number, number], value: CallIntoRenderer) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:   });",
          "222:   const metaToValue = function (meta: MetaTypeFromRenderer): any {",
          "223:     switch (meta.type) {",
          "224:       case 'nativeimage':",
          "",
          "[Removed Lines]",
          "221: const unwrapArgs = function (sender: electron.WebContents, frameId: number, contextId: string, args: any[]) {",
          "",
          "[Added Lines]",
          "221: const unwrapArgs = function (sender: electron.WebContents, frameId: [number, number], contextId: string, args: any[]) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "421: });",
          "423: handleRemoteCommand(IPC_MESSAGES.BROWSER_CONSTRUCTOR, function (event, contextId, id, args) {",
          "425:   const constructor = objectsRegistry.get(id);",
          "427:   if (constructor == null) {",
          "",
          "[Removed Lines]",
          "424:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "424:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "432: });",
          "434: handleRemoteCommand(IPC_MESSAGES.BROWSER_FUNCTION_CALL, function (event, contextId, id, args) {",
          "436:   const func = objectsRegistry.get(id);",
          "438:   if (func == null) {",
          "",
          "[Removed Lines]",
          "435:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "435:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "449: });",
          "451: handleRemoteCommand(IPC_MESSAGES.BROWSER_MEMBER_CONSTRUCTOR, function (event, contextId, id, method, args) {",
          "453:   const object = objectsRegistry.get(id);",
          "455:   if (object == null) {",
          "",
          "[Removed Lines]",
          "452:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "452:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "460: });",
          "462: handleRemoteCommand(IPC_MESSAGES.BROWSER_MEMBER_CALL, function (event, contextId, id, method, args) {",
          "464:   const object = objectsRegistry.get(id);",
          "466:   if (object == null) {",
          "",
          "[Removed Lines]",
          "463:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "463:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "477: });",
          "479: handleRemoteCommand(IPC_MESSAGES.BROWSER_MEMBER_SET, function (event, contextId, id, name, args) {",
          "481:   const obj = objectsRegistry.get(id);",
          "483:   if (obj == null) {",
          "",
          "[Removed Lines]",
          "480:   args = unwrapArgs(event.sender, event.frameId, contextId, args);",
          "",
          "[Added Lines]",
          "480:   args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);",
          "",
          "---------------"
        ],
        "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc": [
          "File: shell/browser/api/electron_api_web_contents.cc -> shell/browser/api/electron_api_web_contents.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2727: bool WebContents::SendIPCMessageToFrame(bool internal,",
          "2728:                                         bool send_to_all,",
          "2730:                                         const std::string& channel,",
          "2731:                                         v8::Local<v8::Value> args) {",
          "2732:   v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();",
          "",
          "[Removed Lines]",
          "2729:                                         int32_t frame_id,",
          "",
          "[Added Lines]",
          "2729:                                         v8::Local<v8::Value> frame,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2736:         gin::StringToV8(isolate, \"Failed to serialize arguments\")));",
          "2737:     return false;",
          "2738:   }",
          "2746:     return false;",
          "2748:   mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;",
          "2750:   electron_renderer->Message(internal, send_to_all, channel, std::move(message),",
          "2751:                              0 /* sender_id */);",
          "2752:   return true;",
          "",
          "[Removed Lines]",
          "2739:   auto frames = web_contents()->GetAllFrames();",
          "2740:   auto iter = std::find_if(frames.begin(), frames.end(), [frame_id](auto* f) {",
          "2741:     return f->GetRoutingID() == frame_id;",
          "2742:   });",
          "2743:   if (iter == frames.end())",
          "2744:     return false;",
          "2745:   if (!(*iter)->IsRenderFrameLive())",
          "2749:   (*iter)->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
          "",
          "[Added Lines]",
          "2739:   int32_t frame_id;",
          "2740:   int32_t process_id;",
          "2741:   if (gin::ConvertFromV8(isolate, frame, &frame_id)) {",
          "2742:     process_id = web_contents()->GetMainFrame()->GetProcess()->GetID();",
          "2743:   } else {",
          "2744:     std::vector<int32_t> id_pair;",
          "2745:     if (gin::ConvertFromV8(isolate, frame, &id_pair) && id_pair.size() == 2) {",
          "2746:       process_id = id_pair[0];",
          "2747:       frame_id = id_pair[1];",
          "2748:     } else {",
          "2749:       isolate->ThrowException(v8::Exception::Error(gin::StringToV8(",
          "2750:           isolate,",
          "2751:           \"frameId must be a number or a pair of [processId, frameId]\")));",
          "2752:       return false;",
          "2753:     }",
          "2754:   }",
          "2756:   auto* rfh = content::RenderFrameHost::FromID(process_id, frame_id);",
          "2757:   if (!rfh || !rfh->IsRenderFrameLive() ||",
          "2758:       content::WebContents::FromRenderFrameHost(rfh) != web_contents())",
          "2762:   rfh->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);",
          "",
          "---------------"
        ],
        "shell/browser/api/electron_api_web_contents.h||shell/browser/api/electron_api_web_contents.h": [
          "File: shell/browser/api/electron_api_web_contents.h -> shell/browser/api/electron_api_web_contents.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:   bool SendIPCMessageToFrame(bool internal,",
          "263:                              bool send_to_all,",
          "265:                              const std::string& channel,",
          "266:                              v8::Local<v8::Value> args);",
          "",
          "[Removed Lines]",
          "264:                              int32_t frame_id,",
          "",
          "[Added Lines]",
          "264:                              v8::Local<v8::Value> frame,",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/event_emitter.cc||shell/common/gin_helper/event_emitter.cc": [
          "File: shell/common/gin_helper/event_emitter.cc -> shell/common/gin_helper/event_emitter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"shell/common/gin_helper/event_emitter.h\"",
          "7: #include \"content/public/browser/render_frame_host.h\"",
          "8: #include \"shell/browser/api/event.h\"",
          "9: #include \"shell/common/gin_helper/dictionary.h\"",
          "10: #include \"shell/common/gin_helper/object_template_builder.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include \"content/public/browser/render_process_host.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   Dictionary dict(isolate, event);",
          "68:   dict.Set(\"sender\", sender);",
          "71:     dict.Set(\"frameId\", frame->GetRoutingID());",
          "72:   return event;",
          "73: }",
          "",
          "[Removed Lines]",
          "70:   if (frame)",
          "",
          "[Added Lines]",
          "71:   if (frame) {",
          "73:     dict.Set(\"processId\", frame->GetProcess()->GetID());",
          "74:   }",
          "",
          "---------------"
        ],
        "spec-main/api-ipc-main-spec.ts||spec-main/api-ipc-main-spec.ts": [
          "File: spec-main/api-ipc-main-spec.ts -> spec-main/api-ipc-main-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import * as cp from 'child_process';",
          "4: import { closeAllWindows } from './window-helpers';",
          "5: import { emittedOnce } from './events-helpers';",
          "6: import { ipcMain, BrowserWindow } from 'electron/main';",
          "8: describe('ipc main module', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import { defer } from './spec-helpers';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:       output = JSON.parse(output);",
          "60:       expect(output).to.deep.equal(['error']);",
          "61:     });",
          "62:   });",
          "63: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     it('can be replied to', async () => {",
          "65:       ipcMain.on('test-echo', (e, arg) => {",
          "66:         e.reply('test-echo', arg);",
          "67:       });",
          "68:       defer(() => {",
          "69:         ipcMain.removeAllListeners('test-echo');",
          "70:       });",
          "72:       const w = new BrowserWindow({",
          "73:         show: false,",
          "74:         webPreferences: {",
          "75:           nodeIntegration: true",
          "76:         }",
          "77:       });",
          "78:       w.loadURL('about:blank');",
          "79:       const v = await w.webContents.executeJavaScript(`new Promise((resolve, reject) => {",
          "80:         const { ipcRenderer } = require('electron')",
          "81:         ipcRenderer.send('test-echo', 'hello')",
          "82:         ipcRenderer.on('test-echo', (e, v) => {",
          "83:           resolve(v)",
          "84:         })",
          "85:       })`);",
          "86:       expect(v).to.equal('hello');",
          "87:     });",
          "",
          "---------------"
        ],
        "spec-main/guest-window-manager-spec.ts||spec-main/guest-window-manager-spec.ts": [
          "File: spec-main/guest-window-manager-spec.ts -> spec-main/guest-window-manager-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:     if (key === 'openerId' && typeof value === 'number') {",
          "190:       return 'placeholder-opener-id';",
          "191:     }",
          "192:     if (key === 'returnValue') {",
          "193:       return 'placeholder-guest-contents-id';",
          "194:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:     if (key === 'processId' && typeof value === 'number') {",
          "193:       return 'placeholder-process-id';",
          "194:     }",
          "",
          "---------------"
        ],
        "typings/internal-electron.d.ts||typings/internal-electron.d.ts": [
          "File: typings/internal-electron.d.ts -> typings/internal-electron.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     _callWindowOpenHandler(event: any, url: string, frameName: string, rawFeatures: string): Electron.BrowserWindowConstructorOptions | null;",
          "69:     _setNextChildWebPreferences(prefs: Partial<Electron.BrowserWindowConstructorOptions['webPreferences']> & Pick<Electron.BrowserWindowConstructorOptions, 'backgroundColor'>): void;",
          "70:     _send(internal: boolean, sendToAll: boolean, channel: string, args: any): boolean;",
          "73:     _postMessage(channel: string, message: any, transfer?: any[]): void;",
          "74:     _sendInternal(channel: string, ...args: any[]): void;",
          "75:     _sendInternalToAll(channel: string, ...args: any[]): void;",
          "",
          "[Removed Lines]",
          "71:     _sendToFrame(internal: boolean, sendToAll: boolean, frameId: number, channel: string, args: any): boolean;",
          "72:     _sendToFrameInternal(frameId: number, channel: string, ...args: any[]): boolean;",
          "",
          "[Added Lines]",
          "71:     _sendToFrame(internal: boolean, sendToAll: boolean, frameId: number | [number, number], channel: string, args: any): boolean;",
          "72:     _sendToFrameInternal(frameId: number | [number, number], channel: string, ...args: any[]): boolean;",
          "",
          "---------------"
        ]
      }
    }
  ]
}