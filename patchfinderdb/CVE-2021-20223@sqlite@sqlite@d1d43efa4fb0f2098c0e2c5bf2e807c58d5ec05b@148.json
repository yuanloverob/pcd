{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "71cb422055f5380b8117753b0bfdb354d52e6933",
      "candidate_info": {
        "commit_hash": "71cb422055f5380b8117753b0bfdb354d52e6933",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/71cb422055f5380b8117753b0bfdb354d52e6933",
        "files": [
          "ext/misc/cksumvfs.c",
          "manifest",
          "manifest.uuid",
          "test/speedtest1.c"
        ],
        "message": "Minor fixes to the cksumvfs documentation in the header comment of the source file.  Enhance speedtest1.c so that it can more easily do performance comparisons of cksumvfs.\n\nFossilOrigin-Name: ed3bb818f58b75c087f2875331ec944397b6c61a5b14d8af4b9ec6f376bd1872",
        "before_after_code_files": [
          "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c",
          "manifest.uuid||manifest.uuid",
          "test/speedtest1.c||test/speedtest1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c": [
          "File: ext/misc/cksumvfs.c -> ext/misc/cksumvfs.c"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 05b573fdb27abec7d75aa1375325d45043cfd674f5b346fb341f001d7e04d160",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/speedtest1.c||test/speedtest1.c": [
          "File: test/speedtest1.c -> test/speedtest1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   \"  --primarykey        Use PRIMARY KEY instead of UNIQUE where appropriate\\n\"",
          "29:   \"  --repeat N          Repeat each SELECT N times (default: 1)\\n\"",
          "30:   \"  --reprepare         Reprepare each statement upon every invocation\\n\"",
          "31:   \"  --serialized        Set serialized threading mode\\n\"",
          "32:   \"  --singlethread      Set single-threaded mode - disables all mutexing\\n\"",
          "33:   \"  --sqlonly           No-op.  Only show the SQL that would have been run.\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:   \"  --reserve N         Reserve N bytes on each database page\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2135: #  define sqlite3_sourceid(X) \"(before 3.6.18)\"",
          "2136: #endif",
          "2138: static int xCompileOptions(void *pCtx, int nVal, char **azVal, char **azCol){",
          "2139:   printf(\"-- Compile option: %s\\n\", azVal[0]);",
          "2140:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2140: #if SQLITE_CKSUMVFS_STATIC",
          "2141: int sqlite3_register_cksumvfs(const char*);",
          "2142: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2173:   printf(\"-- Speedtest1 for SQLite %s %.48s\\n\",",
          "2174:          sqlite3_libversion(), sqlite3_sourceid());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2179: #ifdef SQLITE_CKSUMVFS_STATIC",
          "2180:   sqlite3_register_cksumvfs(0);",
          "2181: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2303: #ifndef SPEEDTEST_OMIT_HASH",
          "2304:         HashInit();",
          "2305: #endif",
          "2306:       }else if( strcmp(z,\"without-rowid\")==0 ){",
          "2307:         g.zWR = \"WITHOUT ROWID\";",
          "2308:         g.zPK = \"PRIMARY KEY\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2317:       }else if( strcmp(z,\"reserve\")==0 ){",
          "2318:         if( i>=argc-1 ) fatal_error(\"missing argument on %s\\n\", argv[i]);",
          "2319:         g.nReserve = atoi(argv[++i]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2354:     if( rc ) fatal_error(\"lookaside configuration failed: %d\\n\", rc);",
          "2355:   }",
          "2356: #endif",
          "2359:   sqlite3_create_function(g.db, \"random\", 0, SQLITE_UTF8, 0, randomFunc, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2371:   if( g.nReserve>0 ){",
          "2372:     sqlite3_file_control(g.db, 0, SQLITE_FCNTL_RESERVE_BYTES, &g.nReserve);",
          "2373:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "deaa61072dd09c153c311b7fb33b94e864b76407",
      "candidate_info": {
        "commit_hash": "deaa61072dd09c153c311b7fb33b94e864b76407",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/deaa61072dd09c153c311b7fb33b94e864b76407",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix the OP_SeekScan opcode so that its variable names do not cause problems for the test/vdbe-compress.tcl script.\n\nFossilOrigin-Name: 7a78274a072324b94d6f79e5b7a198b2fa9321ff5d6a528b51f57d3ee95c765b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e9d1efa597fb073dc4bc4286e03059a350ed05d3e6476cd3247e6cde626f458b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4433: case OP_SeekScan: {",
          "4434:   VdbeCursor *pC;",
          "4435:   int res;",
          "4437:   UnpackedRecord r;",
          "4439:   assert( pOp[1].opcode==OP_SeekGE );",
          "",
          "[Removed Lines]",
          "4436:   int n;",
          "",
          "[Added Lines]",
          "4436:   int nStep;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4455: #endif",
          "4456:     break;",
          "4457:   }",
          "4460:   r.pKeyInfo = pC->pKeyInfo;",
          "4461:   r.nField = (u16)pOp[1].p4.i;",
          "4462:   r.default_rc = 0;",
          "",
          "[Removed Lines]",
          "4458:   n = pOp->p1;",
          "4459:   assert( n>=1 );",
          "",
          "[Added Lines]",
          "4458:   nStep = pOp->p1;",
          "4459:   assert( nStep>=1 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4478:       seekscan_search_fail:",
          "4479: #ifdef SQLITE_DEBUG",
          "4480:       if( db->flags&SQLITE_VdbeTrace ){",
          "4482:       }",
          "4483: #endif",
          "4484:       VdbeBranchTaken(1,3);",
          "",
          "[Removed Lines]",
          "4481:         printf(\"... %d steps and then skip\\n\", pOp->p1 - n);",
          "",
          "[Added Lines]",
          "4481:         printf(\"... %d steps and then skip\\n\", pOp->p1 - nStep);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4488:     if( res==0 ){",
          "4489: #ifdef SQLITE_DEBUG",
          "4490:       if( db->flags&SQLITE_VdbeTrace ){",
          "4492:       }",
          "4493: #endif",
          "4494:       VdbeBranchTaken(2,3);",
          "4495:       pOp += 2;",
          "4496:       break;",
          "4497:     }",
          "4499: #ifdef SQLITE_DEBUG",
          "4500:       if( db->flags&SQLITE_VdbeTrace ){",
          "4501:         printf(\"... fall through after %d steps\\n\", pOp->p1);",
          "",
          "[Removed Lines]",
          "4491:         printf(\"... %d steps and then success\\n\", pOp->p1 - n);",
          "4498:     if( n<=0 ){",
          "",
          "[Added Lines]",
          "4491:         printf(\"... %d steps and then success\\n\", pOp->p1 - nStep);",
          "4498:     if( nStep<=0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4504:       VdbeBranchTaken(0,3);",
          "4505:       break;",
          "4506:     }",
          "4508:     rc = sqlite3BtreeNext(pC->uc.pCursor, 0);",
          "4509:     if( rc ){",
          "4510:       if( rc==SQLITE_DONE ){",
          "",
          "[Removed Lines]",
          "4507:     n--;",
          "",
          "[Added Lines]",
          "4507:     nStep--;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "644f43c0f77f0048d776779848457b3317f6077b",
      "candidate_info": {
        "commit_hash": "644f43c0f77f0048d776779848457b3317f6077b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/644f43c0f77f0048d776779848457b3317f6077b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Remove a debugging printf() accidentally left in the previous check-in.\n\nFossilOrigin-Name: e9d1efa597fb073dc4bc4286e03059a350ed05d3e6476cd3247e6cde626f458b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dbec6910d9648f4907373c818a5cb347a2e487784208751ccecfacca752ff99d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "608:           pIn++;",
          "609:         }",
          "610:       }",
          "612:       testcase( iEq>0",
          "613:                 && (pLoop->wsFlags & WHERE_IN_SEEKSCAN)==0",
          "614:                 && (pLoop->wsFlags & WHERE_VIRTUALTABLE)!=0 );",
          "",
          "[Removed Lines]",
          "611: printf(\"iEq=%d wsFlags=0x%08x\\n\", iEq, pLoop->wsFlags); fflush(stdout);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a192807c132854b8da42aad2ba0d03b26751fce4",
      "candidate_info": {
        "commit_hash": "a192807c132854b8da42aad2ba0d03b26751fce4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a192807c132854b8da42aad2ba0d03b26751fce4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Faster column name lookup in the columnIndex() routine using hashing.\n\nFossilOrigin-Name: de2a90812498e504c9b8eeb83bfc48a948b45e87bdfa242c0aa9f0377d90740f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 020dbfa2aef20e5872cc3e785d99f45903843401292114b5092b9c8aa829b9c3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "265: static int columnIndex(Table *pTab, const char *zCol){",
          "266:   int i;",
          "269:   }",
          "270:   return -1;",
          "271: }",
          "",
          "[Removed Lines]",
          "267:   for(i=0; i<pTab->nCol; i++){",
          "268:     if( sqlite3StrICmp(pTab->aCol[i].zName, zCol)==0 ) return i;",
          "",
          "[Added Lines]",
          "267:   u8 h = sqlite3StrIHash(zCol);",
          "268:   Column *pCol;",
          "269:   for(pCol=pTab->aCol, i=0; i<pTab->nCol; pCol++, i++){",
          "270:     if( pCol->hName==h && sqlite3StrICmp(pCol->zName, zCol)==0 ) return i;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed505ce3e47b971ced26b585506d0efa5efffc85",
      "candidate_info": {
        "commit_hash": "ed505ce3e47b971ced26b585506d0efa5efffc85",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed505ce3e47b971ced26b585506d0efa5efffc85",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Performance optimization in the transfer of error messages from statements to connections.\n\nFossilOrigin-Name: 0e898f4fed1c851cb90f940175110e632a20668a285d39f5f94f7358c3064882",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 790badb390d59062cd2d8d1dec76cc6104c9425610a67503f6be38076b6a458e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3303:   if( p->pc>=0 ){",
          "3304:     vdbeInvokeSqllog(p);",
          "3306:     if( p->runOnlyOnce ) p->expired = 1;",
          "3307:   }else if( p->rc && p->expired ){",
          "",
          "[Removed Lines]",
          "3305:     sqlite3VdbeTransferError(p);",
          "",
          "[Added Lines]",
          "3305:     if( db->pErr || p->zErrMsg ){",
          "3306:       sqlite3VdbeTransferError(p);",
          "3307:     }else{",
          "3308:       db->errCode = p->rc;",
          "3309:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3322:     for(i=0; i<p->nMem; i++) assert( p->aMem[i].flags==MEM_Undefined );",
          "3323:   }",
          "3324: #endif",
          "3327:   p->pResultSet = 0;",
          "3328: #ifdef SQLITE_DEBUG",
          "3329:   p->nWrite = 0;",
          "",
          "[Removed Lines]",
          "3325:   sqlite3DbFree(db, p->zErrMsg);",
          "3326:   p->zErrMsg = 0;",
          "",
          "[Added Lines]",
          "3329:   if( p->zErrMsg ){",
          "3330:     sqlite3DbFree(db, p->zErrMsg);",
          "3331:     p->zErrMsg = 0;",
          "3332:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}