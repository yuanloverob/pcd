{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aeda70f3cb7e161ddfea3bd1da6ab7008a489ab4",
      "candidate_info": {
        "commit_hash": "aeda70f3cb7e161ddfea3bd1da6ab7008a489ab4",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/aeda70f3cb7e161ddfea3bd1da6ab7008a489ab4",
        "files": [
          "bindings/python/README.txt",
          "bindings/python/capstone/__init__.py",
          "bindings/python/setup.py"
        ],
        "message": "Add option for inhibiting the core build while installing the python components. Add option for loading the core from a custom path. (#1089)",
        "before_after_code_files": [
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py",
          "bindings/python/setup.py||bindings/python/setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "230: _cs = None",
          "232: # Loading attempts, in order",
          "233: # - pkg_resources can get us the path to the local libraries",
          "234: # - we can get the path to the local libraries by parsing our filename",
          "235: # - global load",
          "236: # - python's lib directory",
          "237: # - last-gasp attempt at some hardcoded paths on darwin and linux",
          "240:               join(split(__file__)[0], 'lib'),",
          "241:               '',",
          "242:               distutils.sysconfig.get_python_lib(),",
          "243:               \"/usr/local/lib/\" if sys.platform == 'darwin' else '/usr/lib64']",
          "245: for _path in _path_list:",
          "246:     _cs = _load_lib(_path)",
          "247:     if _cs is not None: break",
          "248: else:",
          "",
          "[Removed Lines]",
          "239: _path_list = [pkg_resources.resource_filename(__name__, 'lib'),",
          "",
          "[Added Lines]",
          "233: # - user-provided environment variable",
          "240: _path_list = [os.getenv('LIBCAPSTONE_PATH', None),",
          "241:               pkg_resources.resource_filename(__name__, 'lib'),",
          "248:     if _path is None: continue",
          "",
          "---------------"
        ],
        "bindings/python/setup.py||bindings/python/setup.py": [
          "File: bindings/python/setup.py -> bindings/python/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: class custom_build(build):",
          "158:     def run(self):",
          "161:         return build.run(self)",
          "",
          "[Removed Lines]",
          "159:         log.info('Building C extensions')",
          "160:         build_libraries()",
          "",
          "[Added Lines]",
          "159:         if 'LIBCAPSTONE_PATH' in os.environ:",
          "160:             log.info('Skipping building C extensions since LIBCAPSTONE_PATH is set')",
          "161:         else:",
          "162:             log.info('Building C extensions')",
          "163:             build_libraries()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26cb22a0ff99983c5e881b578eaadcd11c1fa408",
      "candidate_info": {
        "commit_hash": "26cb22a0ff99983c5e881b578eaadcd11c1fa408",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/26cb22a0ff99983c5e881b578eaadcd11c1fa408",
        "files": [
          "arch/ARM/ARMInstPrinter.c"
        ],
        "message": "arm: UADD8 updates flags. fix #980",
        "before_after_code_files": [
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:  { ARM_INS_SUB, \"subs\" },",
          "267:  { ARM_INS_UMLAL, \"umlals\" },",
          "268:  { ARM_INS_UMULL, \"umulls\" },",
          "269: };",
          "271: void ARM_post_printer(csh ud, cs_insn *insn, char *insn_asm, MCInst *mci)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:  { ARM_INS_UADD8, \"uadd8\" },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce8a822c79ac39a7d6d1070cdfd1bd8d6f527a35",
      "candidate_info": {
        "commit_hash": "ce8a822c79ac39a7d6d1070cdfd1bd8d6f527a35",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/ce8a822c79ac39a7d6d1070cdfd1bd8d6f527a35",
        "files": [
          "arch/X86/X86DisassemblerDecoder.c"
        ],
        "message": "x86: handle f2/f3 prefix for 16bit. see issue #452",
        "before_after_code_files": [
          "arch/X86/X86DisassemblerDecoder.c||arch/X86/X86DisassemblerDecoder.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86DisassemblerDecoder.c||arch/X86/X86DisassemblerDecoder.c": [
          "File: arch/X86/X86DisassemblerDecoder.c -> arch/X86/X86DisassemblerDecoder.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1238:    attrMask |= ATTR_OPSIZE;",
          "1239:   } else if (isPrefixAtLocation(insn, 0x67, insn->necessaryPrefixLocation)) {",
          "1240:    attrMask |= ATTR_ADSIZE;",
          "1242:    attrMask |= ATTR_XS;",
          "1244:    attrMask |= ATTR_XD;",
          "1245:   }",
          "1246:  }",
          "",
          "[Removed Lines]",
          "1241:   } else if (isPrefixAtLocation(insn, 0xf3, insn->necessaryPrefixLocation)) {",
          "1243:   } else if (isPrefixAtLocation(insn, 0xf2, insn->necessaryPrefixLocation)) {",
          "",
          "[Added Lines]",
          "1241:   } else if (insn->mode != MODE_16BIT && isPrefixAtLocation(insn, 0xf3, insn->necessaryPrefixLocation)) {",
          "1243:   } else if (insn->mode != MODE_16BIT && isPrefixAtLocation(insn, 0xf2, insn->necessaryPrefixLocation)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a1b580d069c82d60070d0869a87000db7cdabe2",
      "candidate_info": {
        "commit_hash": "4a1b580d069c82d60070d0869a87000db7cdabe2",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/4a1b580d069c82d60070d0869a87000db7cdabe2",
        "files": [
          "bindings/python/capstone/__init__.py"
        ],
        "message": "python: import os",
        "before_after_code_files": [
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "3: from platform import system",
          "4: _python2 = sys.version_info[0] < 3",
          "5: if _python2:",
          "",
          "[Removed Lines]",
          "2: import sys",
          "",
          "[Added Lines]",
          "2: import os, sys",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c472d0ccf6ec399073093d1fe3f381f39614c23",
      "candidate_info": {
        "commit_hash": "8c472d0ccf6ec399073093d1fe3f381f39614c23",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/8c472d0ccf6ec399073093d1fe3f381f39614c23",
        "files": [
          "bindings/python/setup_cython.py"
        ],
        "message": "cython: add m68x to ext_module_names[]",
        "before_after_code_files": [
          "bindings/python/setup_cython.py||bindings/python/setup_cython.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/setup_cython.py||bindings/python/setup_cython.py": [
          "File: bindings/python/setup_cython.py -> bindings/python/setup_cython.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: compile_args = ['-O3', '-fomit-frame-pointer', '-I' + HEADERS_DIR]",
          "41: link_args = ['-L' + LIBS_DIR]",
          "45: ext_modules = [Extension(\"capstone.ccapstone\",",
          "46:                          [\"pyx/ccapstone.pyx\"],",
          "",
          "[Removed Lines]",
          "43: ext_module_names = ['arm', 'arm_const', 'arm64', 'arm64_const', 'm68k', 'm68k_const', 'mips', 'mips_const', 'ppc', 'ppc_const', 'x86', 'x86_const', 'sparc', 'sparc_const', 'systemz', 'sysz_const', 'xcore', 'xcore_const', 'tms320c64x', 'tms320c64x_const']",
          "",
          "[Added Lines]",
          "43: ext_module_names = ['arm', 'arm_const', 'arm64', 'arm64_const', 'm68k', 'm68k_const', 'm680x', 'm680x_const', 'mips', 'mips_const', 'ppc', 'ppc_const', 'x86', 'x86_const', 'sparc', 'sparc_const', 'systemz', 'sysz_const', 'xcore', 'xcore_const', 'tms320c64x', 'tms320c64x_const']",
          "",
          "---------------"
        ]
      }
    }
  ]
}