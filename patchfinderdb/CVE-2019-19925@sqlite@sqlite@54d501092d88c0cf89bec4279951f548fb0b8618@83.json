{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58ed374370522f7da3ec6d81d3c968e172399bb1",
      "candidate_info": {
        "commit_hash": "58ed374370522f7da3ec6d81d3c968e172399bb1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/58ed374370522f7da3ec6d81d3c968e172399bb1",
        "files": [
          "ext/rtree/rtree6.test",
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Fix a problem triggered by DELETE statements with WHERE clauses that use the OR-optimization on some virtual tables.\n\nFossilOrigin-Name: ecf5caa7e9825a8b03d15ee525ec68be78c55926ddfaca27a040a7614caf0e85",
        "before_after_code_files": [
          "ext/rtree/rtree6.test||ext/rtree/rtree6.test",
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree6.test||ext/rtree/rtree6.test": [
          "File: ext/rtree/rtree6.test -> ext/rtree/rtree6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   set testdir [file join [file dirname [info script]] .. .. test]",
          "16: }",
          "17: source $testdir/tester.tcl",
          "19: ifcapable {!rtree || rtree_int_only} {",
          "20:   finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: set testprefix rtree6",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:     x1>0.5 AND x1>0.5 AND x1>0.5 AND x1>0.5 AND x1>1.1",
          "168: } {}",
          "170: expand_all_sql db",
          "171: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: #-------------------------------------------------------------------------",
          "172: reset_db",
          "173: do_execsql_test 4.0 {",
          "174:   CREATE VIRTUAL TABLE t1 USING rtree(id,x0,x1,y0,y1);",
          "175: }",
          "176: do_execsql_test 4.1 {",
          "177:   DELETE FROM t1 WHERE x0>1 AND x1<2 OR y0<92;",
          "178: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0bf1550507d9d3c8a41f8a50db3a59bf808f0a4e24637dc0905d35579305eca7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4919:   if( (wctrlFlags & WHERE_ONEPASS_DESIRED)!=0 ){",
          "4920:     int wsFlags = pWInfo->a[0].pWLoop->wsFlags;",
          "4921:     int bOnerow = (wsFlags & WHERE_ONEROW)!=0;",
          "4922:     if( bOnerow || (",
          "4923:         0!=(wctrlFlags & WHERE_ONEPASS_MULTIROW)",
          "4925:      && (0==(wsFlags & WHERE_MULTI_OR) || (wctrlFlags & WHERE_DUPLICATES_OK))",
          "4926:     )){",
          "4927:       pWInfo->eOnePass = bOnerow ? ONEPASS_SINGLE : ONEPASS_MULTI;",
          "",
          "[Removed Lines]",
          "4924:      && 0==(wsFlags & WHERE_VIRTUALTABLE)",
          "",
          "[Added Lines]",
          "4922:     assert( !(wsFlags & WHERE_VIRTUALTABLE) || IsVirtual(pTabList->a[0].pTab) );",
          "4925:      && !IsVirtual(pTabList->a[0].pTab)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6b24ab1b136b151c1d5c0d20cd9ab9991428750",
      "candidate_info": {
        "commit_hash": "c6b24ab1b136b151c1d5c0d20cd9ab9991428750",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c6b24ab1b136b151c1d5c0d20cd9ab9991428750",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/upsert1.test"
        ],
        "message": "Do not allow UPSERT of a view.\n\nFossilOrigin-Name: ebf897e861c19e214c57f1e73841b505182202cc8d7d39e24d5a1e5625e26b4a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/upsert1.test||test/upsert1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b7810062ec2489e1c5ca6638dbeb0892e4ce376c5c1834a31d1a332ebab8a871",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "949:               pTab->zName);",
          "950:       goto insert_cleanup;",
          "951:     }",
          "952:     if( sqlite3HasExplicitNulls(pParse, pUpsert->pUpsertTarget) ){",
          "953:       goto insert_cleanup;",
          "954:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "952:     if( pTab->pSelect ){",
          "953:       sqlite3ErrorMsg(pParse, \"cannot UPSERT a view\");",
          "954:       goto insert_cleanup;",
          "955:     }",
          "",
          "---------------"
        ],
        "test/upsert1.test||test/upsert1.test": [
          "File: test/upsert1.test -> test/upsert1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   REINDEX;",
          "222: } {ok}",
          "224: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224: # 2019-12-06 gramfuzz find",
          "225: sqlite3 db :memory:",
          "226: do_execsql_test upsert1-900 {",
          "227:   CREATE VIEW t1(a) AS SELECT 1;",
          "228:   CREATE TRIGGER t1r1 INSTEAD OF INSERT ON t1 BEGIN",
          "229:      SELECT 2;",
          "230:   END;",
          "231: }",
          "232: do_catchsql_test upsert1-910 {",
          "233:   INSERT INTO t1 VALUES(3) ON CONFLICT(x) DO NOTHING;",
          "234: } {1 {cannot UPSERT a view}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc4eeef9e7fb8f0a31aa84bf8dc875c6985422cd",
      "candidate_info": {
        "commit_hash": "fc4eeef9e7fb8f0a31aa84bf8dc875c6985422cd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fc4eeef9e7fb8f0a31aa84bf8dc875c6985422cd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix compiler warnings on Windows.\n\nFossilOrigin-Name: 4978ee8b5405f958723b4ebbd4288bd08bff2b453da2d1c032d1ae904c2a3821",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 79c073878d56fc638b751b0e61295df182f7ee6f8ebd7319c1eeac1608abbac8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1090: #define PROGRESS_RESET   0x02         /* Reset the count when the progres",
          "",
          "[Added Lines]",
          "1090: #define SHELL_PROGRESS_RESET 0x02  /* Reset the count when the progres",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1800:   p->nProgress++;",
          "1801:   if( p->nProgress>=p->mxProgress && p->mxProgress>0 ){",
          "1802:     raw_printf(p->out, \"Progress limit reached (%u)\\n\", p->nProgress);",
          "1805:     return 1;",
          "1806:   }",
          "1808:     raw_printf(p->out, \"Progress %u\\n\", p->nProgress);",
          "1809:   }",
          "1810:   return 0;",
          "",
          "[Removed Lines]",
          "1803:     if( p->flgProgress & PROGRESS_RESET ) p->nProgress = 0;",
          "1804:     if( p->flgProgress & PROGRESS_ONCE ) p->mxProgress = 0;",
          "1807:   if( (p->flgProgress & PROGRESS_QUIET)==0 ){",
          "",
          "[Added Lines]",
          "1803:     if( p->flgProgress & SHELL_PROGRESS_RESET ) p->nProgress = 0;",
          "1804:     if( p->flgProgress & SHELL_PROGRESS_ONCE ) p->mxProgress = 0;",
          "1807:   if( (p->flgProgress & SHELL_PROGRESS_QUIET)==0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7036:   if( c=='p' && n>=3 && strncmp(azArg[0], \"progress\", n)==0 ){",
          "7037:     int i;",
          "7039:     p->flgProgress = 0;",
          "7040:     p->mxProgress = 0;",
          "7041:     p->nProgress = 0;",
          "",
          "[Removed Lines]",
          "7038:     int n = 0;",
          "",
          "[Added Lines]",
          "7038:     int nn = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7045:         z++;",
          "7046:         if( z[0]=='-' ) z++;",
          "7047:         if( strcmp(z,\"quiet\")==0 || strcmp(z,\"q\")==0 ){",
          "7049:           continue;",
          "7050:         }",
          "7051:         if( strcmp(z,\"reset\")==0 ){",
          "7053:           continue;",
          "7054:         }",
          "7055:         if( strcmp(z,\"once\")==0 ){",
          "7057:           continue;",
          "7058:         }",
          "7059:         if( strcmp(z,\"limit\")==0 ){",
          "",
          "[Removed Lines]",
          "7048:           p->flgProgress |= PROGRESS_QUIET;",
          "7052:           p->flgProgress |= PROGRESS_RESET;",
          "7056:           p->flgProgress |= PROGRESS_ONCE;",
          "",
          "[Added Lines]",
          "7048:           p->flgProgress |= SHELL_PROGRESS_QUIET;",
          "7052:           p->flgProgress |= SHELL_PROGRESS_RESET;",
          "7056:           p->flgProgress |= SHELL_PROGRESS_ONCE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7070:         rc = 1;",
          "7071:         goto meta_command_exit;",
          "7072:       }else{",
          "7074:       }",
          "7075:     }",
          "7076:     open_db(p, 0);",
          "7078:   }else",
          "7080:   if( c=='p' && strncmp(azArg[0], \"prompt\", n)==0 ){",
          "",
          "[Removed Lines]",
          "7073:         n = (int)integerValue(z);",
          "7077:     sqlite3_progress_handler(p->db, n, progress_handler, p);",
          "",
          "[Added Lines]",
          "7073:         nn = (int)integerValue(z);",
          "7077:     sqlite3_progress_handler(p->db, nn, progress_handler, p);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8413:   open_db(p, 0);",
          "8414:   if( ShellHasFlag(p,SHFLG_Backslash) ) resolve_backslashes(zSql);",
          "8416:   BEGIN_TIMER;",
          "8417:   rc = shell_exec(p, zSql, &zErrMsg);",
          "8418:   END_TIMER;",
          "",
          "[Removed Lines]",
          "8415:   if( p->flgProgress & PROGRESS_RESET ) p->nProgress = 0;",
          "",
          "[Added Lines]",
          "8415:   if( p->flgProgress & SHELL_PROGRESS_RESET ) p->nProgress = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1c479b61d5ae2d675f3ea6521a8abb6515e52af",
      "candidate_info": {
        "commit_hash": "b1c479b61d5ae2d675f3ea6521a8abb6515e52af",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1c479b61d5ae2d675f3ea6521a8abb6515e52af",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix an fts3 assert() that could fail when operating on a database containing corrupt records.\n\nFossilOrigin-Name: 7c52f5478f9ecf5c078208759143ae9de43c1bf191dfcd74acb8bd169d4dc883",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2482: ){",
          "2484:   if( bDescIdx==0 || *pbFirst==0 ){",
          "2485:     iWrite = iVal - *piPrev;",
          "2486:   }else{",
          "2487:     iWrite = *piPrev - iVal;",
          "2488:   }",
          "2489:   assert( *pbFirst || *piPrev==0 );",
          "2490:   assert_fts3_nc( *pbFirst==0 || iWrite>0 );",
          "",
          "[Removed Lines]",
          "2483:   sqlite3_int64 iWrite;",
          "2491:   assert( *pbFirst==0 || iWrite>=0 );",
          "",
          "[Added Lines]",
          "2483:   sqlite3_uint64 iWrite;",
          "2485:     assert_fts3_nc( *pbFirst==0 || iVal>=*piPrev );",
          "2488:     assert_fts3_nc( *piPrev>=iVal );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc6a43e7ee6353b9ef3dea4309c77e170a1c798eefcfaa7636bf5a93e51c47ee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5546:   SELECT (matchinfo(null)) FROM t1 WHERE t1 MATCH 'ee*e*e*e*e*e*e*Re*e*e*e**'",
          "5547: } {1 {database disk image is malformed}}",
          "5549: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5549: #-------------------------------------------------------------------------",
          "5550: #",
          "5551: reset_db",
          "5552: do_execsql_test 31.0 {",
          "5553: CREATE VIRTUAL TABLE t1 USING fts3(a,b,c);",
          "5554: INSERT INTO t1_segdir VALUES(0,0,0,0,'0 592',X'00016dcb048ce6fbd3b2d68bfebf
          "5555: INSERT INTO t1_segdir VALUES(0,1,0,0,'0 18',X'00026d6d0d8ee6fbd3b2d68bfe7f01020200');",
          "5556: }",
          "5558: do_catchsql_test 31.1 {",
          "5559:   SELECT (matchinfo(t1, c ) ) FROM t1 WHERE t1 MATCH 'M*M*M*M*';",
          "5560: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc7a850f2e89e9cf6e893a6320ac9407f630f877",
      "candidate_info": {
        "commit_hash": "cc7a850f2e89e9cf6e893a6320ac9407f630f877",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cc7a850f2e89e9cf6e893a6320ac9407f630f877",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Remove \"cache mode\" from the window frame code generator. Handle the same cases by editing the window frame specification itself.\n\nFossilOrigin-Name: 081263538332bb9c07e62630629007ccbba31bef5dc890f60b4ba58a355f70ac",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6bd1a07949ff3d394056bfcc813444401ef00806e3f0e0423ff6962541e84bdb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3581:   int regFirst;",
          "3583: };",
          "3585: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "3582:   int regSize;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:   sqlite3_value **apArg",
          "242: ){",
          "243:   struct CallCount *p;",
          "246:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "247:   if( p ){",
          "255:   }",
          "256: }",
          "257: static void percent_rankValueFunc(sqlite3_context *pCtx){",
          "258:   struct CallCount *p;",
          "259:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "260:   if( p ){",
          "261:     if( p->nTotal>1 ){",
          "263:       sqlite3_result_double(pCtx, r);",
          "264:     }else{",
          "265:       sqlite3_result_double(pCtx, 0.0);",
          "266:     }",
          "268:   }",
          "269: }",
          "277: static void cume_distStepFunc(",
          "278:   sqlite3_context *pCtx,",
          "",
          "[Removed Lines]",
          "244:   UNUSED_PARAMETER(nArg); assert( nArg==1 );",
          "248:     if( p->nTotal==0 ){",
          "249:       p->nTotal = sqlite3_value_int64(apArg[0]);",
          "250:     }",
          "251:     p->nStep++;",
          "252:     if( p->nValue==0 ){",
          "253:       p->nValue = p->nStep;",
          "254:     }",
          "262:       double r = (double)(p->nValue-1) / (double)(p->nTotal-1);",
          "267:     p->nValue = 0;",
          "",
          "[Added Lines]",
          "244:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "247:     p->nTotal++;",
          "250: static void percent_rankInvFunc(",
          "251:   sqlite3_context *pCtx,",
          "252:   int nArg,",
          "253:   sqlite3_value **apArg",
          "254: ){",
          "255:   struct CallCount *p;",
          "256:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "257:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "258:   p->nStep++;",
          "259: }",
          "264:     p->nValue = p->nStep;",
          "266:       double r = (double)p->nValue / (double)(p->nTotal-1);",
          "273: #define percent_rankFinalizeFunc percent_rankValueFunc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:   sqlite3_value **apArg",
          "281: ){",
          "282:   struct CallCount *p;",
          "285:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "286:   if( p ){",
          "291:   }",
          "292: }",
          "293: static void cume_distValueFunc(sqlite3_context *pCtx){",
          "294:   struct CallCount *p;",
          "295:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "",
          "[Removed Lines]",
          "283:   assert( nArg==1 ); UNUSED_PARAMETER(nArg);",
          "287:     if( p->nTotal==0 ){",
          "288:       p->nTotal = sqlite3_value_int64(apArg[0]);",
          "289:     }",
          "290:     p->nStep++;",
          "",
          "[Added Lines]",
          "287:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "290:     p->nTotal++;",
          "293: static void cume_distInvFunc(",
          "294:   sqlite3_context *pCtx,",
          "295:   int nArg,",
          "296:   sqlite3_value **apArg",
          "297: ){",
          "298:   struct CallCount *p;",
          "299:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "300:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "301:   p->nStep++;",
          "302: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:     sqlite3_result_double(pCtx, r);",
          "299:   }",
          "300: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: #define cume_distFinalizeFunc cume_distValueFunc",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "320:   sqlite3_value **apArg",
          "321: ){",
          "322:   struct NtileCtx *p;",
          "324:   p = (struct NtileCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "325:   if( p ){",
          "326:     if( p->nTotal==0 ){",
          "327:       p->nParam = sqlite3_value_int64(apArg[0]);",
          "329:       if( p->nParam<=0 ){",
          "330:         sqlite3_result_error(",
          "331:             pCtx, \"argument of ntile must be a positive integer\", -1",
          "332:         );",
          "333:       }",
          "334:     }",
          "336:   }",
          "337: }",
          "338: static void ntileValueFunc(sqlite3_context *pCtx){",
          "339:   struct NtileCtx *p;",
          "340:   p = (struct NtileCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "341:   if( p && p->nParam>0 ){",
          "342:     int nSize = (p->nTotal / p->nParam);",
          "343:     if( nSize==0 ){",
          "345:     }else{",
          "346:       i64 nLarge = p->nTotal - p->nParam*nSize;",
          "347:       i64 iSmall = nLarge*(nSize+1);",
          "350:       assert( (nLarge*(nSize+1) + (p->nParam-nLarge)*nSize)==p->nTotal );",
          "",
          "[Removed Lines]",
          "323:   assert( nArg==2 ); UNUSED_PARAMETER(nArg);",
          "328:       p->nTotal = sqlite3_value_int64(apArg[1]);",
          "335:     p->iRow++;",
          "344:       sqlite3_result_int64(pCtx, p->iRow);",
          "348:       i64 iRow = p->iRow-1;",
          "",
          "[Added Lines]",
          "334:   assert( nArg==1 ); UNUSED_PARAMETER(nArg);",
          "345:     p->nTotal++;",
          "348: static void ntileInvFunc(",
          "349:   sqlite3_context *pCtx,",
          "350:   int nArg,",
          "351:   sqlite3_value **apArg",
          "352: ){",
          "353:   struct NtileCtx *p;",
          "354:   assert( nArg==1 ); UNUSED_PARAMETER(nArg);",
          "355:   p = (struct NtileCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "356:   p->iRow++;",
          "357: }",
          "364:       sqlite3_result_int64(pCtx, p->iRow+1);",
          "368:       i64 iRow = p->iRow;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "357:     }",
          "358:   }",
          "359: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380: #define ntileFinalizeFunc ntileValueFunc",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "496:     WINDOWFUNCX(row_number, 0, 0),",
          "497:     WINDOWFUNCX(dense_rank, 0, 0),",
          "498:     WINDOWFUNCX(rank, 0, 0),",
          "502:     WINDOWFUNCALL(last_value, 1, 0),",
          "503:     WINDOWFUNCNOOP(nth_value, 2, 0),",
          "504:     WINDOWFUNCNOOP(first_value, 1, 0),",
          "",
          "[Removed Lines]",
          "499:     WINDOWFUNCX(percent_rank, 0, SQLITE_FUNC_WINDOW_SIZE),",
          "500:     WINDOWFUNCX(cume_dist, 0, SQLITE_FUNC_WINDOW_SIZE),",
          "501:     WINDOWFUNCX(ntile, 1, SQLITE_FUNC_WINDOW_SIZE),",
          "",
          "[Added Lines]",
          "521:     WINDOWFUNCALL(percent_rank, 0, 0),",
          "522:     WINDOWFUNCALL(cume_dist, 0, 0),",
          "523:     WINDOWFUNCALL(ntile, 1, 0),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "573:       sqlite3ErrorMsg(pParse,",
          "574:           \"FILTER clause may only be used with aggregate window functions\"",
          "575:       );",
          "595:     }",
          "596:   }",
          "597:   pWin->pFunc = pFunc;",
          "",
          "[Removed Lines]",
          "576:     }else",
          "577:     if( pFunc->zName==row_numberName || pFunc->zName==ntileName ){",
          "578:       sqlite3ExprDelete(db, pWin->pStart);",
          "579:       sqlite3ExprDelete(db, pWin->pEnd);",
          "580:       pWin->pStart = pWin->pEnd = 0;",
          "581:       pWin->eType = TK_ROWS;",
          "582:       pWin->eStart = TK_UNBOUNDED;",
          "583:       pWin->eEnd = TK_CURRENT;",
          "584:     }else",
          "586:     if( pFunc->zName==dense_rankName || pFunc->zName==rankName",
          "587:      || pFunc->zName==percent_rankName || pFunc->zName==cume_distName",
          "588:     ){",
          "589:       sqlite3ExprDelete(db, pWin->pStart);",
          "590:       sqlite3ExprDelete(db, pWin->pEnd);",
          "591:       pWin->pStart = pWin->pEnd = 0;",
          "592:       pWin->eType = TK_RANGE;",
          "593:       pWin->eStart = TK_UNBOUNDED;",
          "594:       pWin->eEnd = TK_CURRENT;",
          "",
          "[Added Lines]",
          "600:     }else{",
          "601:       struct WindowUpdate {",
          "602:         const char *zFunc;",
          "603:         int eType;",
          "604:         int eStart;",
          "605:         int eEnd;",
          "606:       } aUp[] = {",
          "607:         { row_numberName,   TK_ROWS,   TK_UNBOUNDED, TK_CURRENT },",
          "608:         { dense_rankName,   TK_RANGE,  TK_UNBOUNDED, TK_CURRENT },",
          "609:         { rankName,         TK_RANGE,  TK_UNBOUNDED, TK_CURRENT },",
          "610:         { percent_rankName, TK_GROUPS, TK_CURRENT,   TK_UNBOUNDED },",
          "611:         { cume_distName,    TK_GROUPS, TK_FOLLOWING, TK_UNBOUNDED },",
          "612:         { ntileName,        TK_ROWS,   TK_CURRENT,   TK_UNBOUNDED },",
          "613:         { leadName,         TK_ROWS,   TK_UNBOUNDED, TK_UNBOUNDED },",
          "614:       };",
          "615:       int i;",
          "616:       for(i=0; i<ArraySize(aUp); i++){",
          "617:         if( pFunc->zName==aUp[i].zFunc ){",
          "618:           sqlite3ExprDelete(db, pWin->pStart);",
          "619:           sqlite3ExprDelete(db, pWin->pEnd);",
          "620:           pWin->pEnd = pWin->pStart = 0;",
          "621:           pWin->eType = aUp[i].eType;",
          "622:           pWin->eStart = aUp[i].eStart;",
          "623:           pWin->eEnd = aUp[i].eEnd;",
          "624:           if( pWin->eStart==TK_FOLLOWING ){",
          "625:             pWin->pStart = sqlite3Expr(db, TK_INTEGER, \"1\");",
          "626:           }",
          "627:           break;",
          "628:         }",
          "629:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1093:   pMWin->regFirst = ++pParse->nMem;",
          "1094:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "1098:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1099:     FuncDef *p = pWin->pFunc;",
          "",
          "[Removed Lines]",
          "1095:   pMWin->regSize = ++pParse->nMem;",
          "1096:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1206:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1207:   Window *pWin;",
          "1208:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1210:     int regArg;",
          "1211:     int nArg = windowArgCount(pWin);",
          "",
          "[Removed Lines]",
          "1209:     int flags = pWin->pFunc->funcFlags;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1216:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+i, reg+i);",
          "1217:       }",
          "1218:       regArg = reg;",
          "1227:     }else{",
          "1229:       regArg = reg + pWin->iArgCol;",
          "1230:     }",
          "",
          "[Removed Lines]",
          "1219:       if( flags & SQLITE_FUNC_WINDOW_SIZE ){",
          "1220:         if( nArg==0 ){",
          "1221:           regArg = regPartSize;",
          "1222:         }else{",
          "1223:           sqlite3VdbeAddOp2(v, OP_SCopy, regPartSize, reg+nArg);",
          "1224:         }",
          "1225:         nArg++;",
          "1226:       }",
          "1228:       assert( !(flags & SQLITE_FUNC_WINDOW_SIZE) );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1440:   return regArg;",
          "1441: }",
          "1448:   Window *pWin;",
          "1449:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1450:     FuncDef *pFunc = pWin->pFunc;",
          "1453:      || (pFunc->zName==first_valueName)",
          "1455:      || (pFunc->zName==lagName)",
          "1456:     ){",
          "1457:       return 1;",
          "",
          "[Removed Lines]",
          "1447: static int windowCachePartition(Window *pMWin){",
          "1451:     if( (pFunc->funcFlags & SQLITE_FUNC_WINDOW_SIZE)",
          "1452:      || (pFunc->zName==nth_valueName)",
          "1454:      || (pFunc->zName==leadName)",
          "",
          "[Added Lines]",
          "1466: #if 0",
          "1471: static int windowCacheFrame(Window *pMWin){",
          "1475:     if( (pFunc->zName==nth_valueName)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1459:   }",
          "1460:   return 0;",
          "1461: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1485: #endif",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1659:     case WINDOW_AGGINVERSE:",
          "1660:       csr = p->start.csr;",
          "1661:       reg = p->start.reg;",
          "1663:       break;",
          "1665:     case WINDOW_AGGSTEP:",
          "1666:       csr = p->end.csr;",
          "1667:       reg = p->end.reg;",
          "1669:       break;",
          "1670:   }",
          "",
          "[Removed Lines]",
          "1662:       windowAggStep(pParse, pMWin, csr, 1, p->regArg, pMWin->regSize);",
          "1668:       windowAggStep(pParse, pMWin, csr, 0, p->regArg, pMWin->regSize);",
          "",
          "[Added Lines]",
          "1686:       windowAggStep(pParse, pMWin, csr, 1, p->regArg, 0);",
          "1692:       windowAggStep(pParse, pMWin, csr, 0, p->regArg, 0);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1992:   memset(&s, 0, sizeof(WindowCodeArg));",
          "",
          "[Removed Lines]",
          "1989:   bCache = windowCachePartition(pMWin);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2062:   sqlite3VdbeAddOp2(v, OP_NewRowid, csrWrite, regRowid);",
          "2063:   sqlite3VdbeAddOp3(v, OP_Insert, csrWrite, regRecord, regRowid);",
          "2079:   s.regArg = windowInitAccum(pParse, pMWin);",
          "",
          "[Removed Lines]",
          "2064:   sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regSize, 1);",
          "2066:   if( bCache ){",
          "2067:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "2068:     sqlite3WhereEnd(pWInfo);",
          "2069:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "2070:     if( pMWin->pPartition ){",
          "2071:       sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2072:     }",
          "2073:     addrCacheRewind = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2074:   }else{",
          "2075:     addrIfNot = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "2076:   }",
          "",
          "[Added Lines]",
          "2065:   addrIfNot = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2091:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2092:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2093:     windowAggFinal(pParse, pMWin, 0);",
          "2104:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2105:     sqlite3VdbeJumpHere(v, addrGe);",
          "2106:   }",
          "",
          "[Removed Lines]",
          "2094:     if( bCache ){",
          "2095:       sqlite3VdbeAddOp2(v, OP_Rowid, csrWrite, regRowid);",
          "2096:       sqlite3VdbeAddOp3(v, OP_NotExists, s.current.csr, 0, regRowid);",
          "2097:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2098:       sqlite3VdbeAddOp2(v, OP_Next, csrWrite, addrCacheRewind+1);",
          "2099:     }else{",
          "2100:       sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2101:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2102:       sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2103:     }",
          "",
          "[Added Lines]",
          "2083:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2084:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2085:     sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2115:   sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2116:   sqlite3VdbeAddOp2(v, OP_Rewind, s.end.csr, 1);",
          "2117:   if( regPeer && pOrderBy ){",
          "2123:     sqlite3VdbeAddOp3(v, OP_Copy, regPeer, s.start.reg, pOrderBy->nExpr-1);",
          "2124:     sqlite3VdbeAddOp3(v, OP_Copy, regPeer, s.current.reg, pOrderBy->nExpr-1);",
          "2125:     sqlite3VdbeAddOp3(v, OP_Copy, regPeer, s.end.reg, pOrderBy->nExpr-1);",
          "",
          "[Removed Lines]",
          "2118:     if( bCache ){",
          "2119:       windowReadPeerValues(&s, csrWrite, regPeer);",
          "2120:     }else{",
          "2121:       sqlite3VdbeAddOp3(v, OP_Copy, regNewPeer, regPeer, pOrderBy->nExpr-1);",
          "2122:     }",
          "",
          "[Added Lines]",
          "2100:     sqlite3VdbeAddOp3(v, OP_Copy, regNewPeer, regPeer, pOrderBy->nExpr-1);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2132:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.SECOND_ROW\"));",
          "2141:   if( regPeer ){",
          "2142:     addrPeerJump = windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer);",
          "2143:   }",
          "",
          "[Removed Lines]",
          "2133:   if( bCache ){",
          "2134:     addrCacheNext = sqlite3VdbeCurrentAddr(v);",
          "2135:     if( pMWin->eType!=TK_ROWS ){",
          "2136:       windowReadPeerValues(&s, csrWrite, regNewPeer);",
          "2137:     }",
          "2138:   }else{",
          "2139:     sqlite3VdbeJumpHere(v, addrIfNot);",
          "2140:   }",
          "",
          "[Added Lines]",
          "2111:   sqlite3VdbeJumpHere(v, addrIfNot);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2196:   sqlite3VdbeJumpHere(v, addrGoto);",
          "2207:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "2208:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2209:   }",
          "",
          "[Removed Lines]",
          "2197:   if( bCache ){",
          "2198:     sqlite3VdbeAddOp2(v, OP_Next, csrWrite, addrCacheNext);",
          "2199:     sqlite3VdbeJumpHere(v, addrCacheRewind);",
          "2200:   }else{",
          "2201:     if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2202:     sqlite3WhereEnd(pWInfo);",
          "2203:   }",
          "2206:   if( pMWin->pPartition && bCache==0 ){",
          "",
          "[Added Lines]",
          "2168:   if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2169:   sqlite3WhereEnd(pWInfo);",
          "2172:   if( pMWin->pPartition ){",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2255:   sqlite3VdbeJumpHere(v, addrEmpty);",
          "2258:   sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2261:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.FLUSH\"));",
          "2262:   if( pMWin->pPartition ){",
          "2263:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "",
          "[Removed Lines]",
          "2257:   if( bCache && addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2259:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "2260:   if( bCache==0 ) sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "",
          "[Added Lines]",
          "2224:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "",
          "---------------"
        ]
      }
    }
  ]
}