{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6397a78b2ba93729678ef0ea68d0765e046a360e",
      "candidate_info": {
        "commit_hash": "6397a78b2ba93729678ef0ea68d0765e046a360e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6397a78b2ba93729678ef0ea68d0765e046a360e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/trigger.c",
          "test/trigger1.test"
        ],
        "message": "If a TEMP TRIGGER references an auxiliary schema, and that auxiliary schema is detached, move the trigger to reference the TEMP schema before completing the detach, so that the trigger does not hold a dangling schema pointer.\n\nFossilOrigin-Name: 069c2f4c61f06211a8981abc412afcc1536ece13380b13a70aa99123f8f527cd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/trigger.c||src/trigger.c",
          "test/trigger1.test||test/trigger1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 279ac7fdec0b1409cd400b7b093f89089d93c49f596f378c6a3032434a85bf83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "300:   int i;",
          "301:   Db *pDb = 0;",
          "302:   char zErr[128];",
          "304:   UNUSED_PARAMETER(NotUsed);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:   HashElem *pEntry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:     goto detach_error;",
          "324:   }",
          "326:   sqlite3BtreeClose(pDb->pBt);",
          "327:   pDb->pBt = 0;",
          "328:   pDb->pSchema = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:   assert( db->aDb[1].pSchema );",
          "330:   pEntry = sqliteHashFirst(&db->aDb[1].pSchema->trigHash);",
          "331:   while( pEntry ){",
          "332:     Trigger *pTrig = (Trigger*)sqliteHashData(pEntry);",
          "333:     if( pTrig->pTabSchema==pDb->pSchema ){",
          "334:       pTrig->pTabSchema = pTrig->pSchema;",
          "335:     }",
          "336:     pEntry = sqliteHashNext(pEntry);",
          "337:   }",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:   iDb = sqlite3SchemaToIndex(pParse->db, pTrigger->pSchema);",
          "619:   assert( iDb>=0 && iDb<db->nDb );",
          "620:   pTable = tableOfTrigger(pTrigger);",
          "623: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "625:     int code = SQLITE_DROP_TRIGGER;",
          "626:     const char *zDb = db->aDb[iDb].zDbSName;",
          "627:     const char *zTab = SCHEMA_TABLE(iDb);",
          "",
          "[Removed Lines]",
          "621:   assert( pTable );",
          "622:   assert( pTable->pSchema==pTrigger->pSchema || iDb==1 );",
          "624:   {",
          "",
          "[Added Lines]",
          "621:   assert( (pTable && pTable->pSchema==pTrigger->pSchema) || iDb==1 );",
          "623:   if( pTable ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "639:   if( (v = sqlite3GetVdbe(pParse))!=0 ){",
          "640:     sqlite3NestedParse(pParse,",
          "641:        \"DELETE FROM %Q.%s WHERE name=%Q AND type='trigger'\",",
          "",
          "[Removed Lines]",
          "638:   assert( pTable!=0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "659:   if( ALWAYS(pTrigger) ){",
          "660:     if( pTrigger->pSchema==pTrigger->pTabSchema ){",
          "661:       Table *pTab = tableOfTrigger(pTrigger);",
          "665:     }",
          "666:     sqlite3DeleteTrigger(db, pTrigger);",
          "667:     db->mDbFlags |= DBFLAG_SchemaChange;",
          "",
          "[Removed Lines]",
          "662:       Trigger **pp;",
          "663:       for(pp=&pTab->pTrigger; *pp!=pTrigger; pp=&((*pp)->pNext));",
          "",
          "[Added Lines]",
          "660:       if( pTab ){",
          "661:         Trigger **pp;",
          "662:         for(pp=&pTab->pTrigger; *pp!=pTrigger; pp=&((*pp)->pNext));",
          "664:       }",
          "",
          "---------------"
        ],
        "test/trigger1.test||test/trigger1.test": [
          "File: test/trigger1.test -> test/trigger1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "768:   SELECT * FROM t19;",
          "769: } {1 2 2}",
          "771: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "771: # 2019-08-26 Chromium sqlite3_fts3_lpm_fuzzer find.",
          "772: #",
          "773: db close",
          "774: sqlite3 db :memory:",
          "775: do_execsql_test trigger1-20.1 {",
          "776:   CREATE TABLE t20_1(x);",
          "777:   ATTACH ':memory:' AS aux;",
          "778:   CREATE TABLE aux.t20_2(y);",
          "779:   CREATE TABLE aux.t20_3(z);",
          "780:   CREATE TEMP TRIGGER r20_3 AFTER INSERT ON t20_2 BEGIN UPDATE t20_3 SET z=z+1; END;",
          "781:   DETACH aux;",
          "782:   DROP TRIGGER r20_3;",
          "783: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3dcdba387dc58b26fcc2ad2a68808afd352647d",
      "candidate_info": {
        "commit_hash": "c3dcdba387dc58b26fcc2ad2a68808afd352647d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c3dcdba387dc58b26fcc2ad2a68808afd352647d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c",
          "src/sqliteInt.h",
          "src/util.c",
          "src/vdbemem.c"
        ],
        "message": "Improved reporting of SQLITE_TOOBIG errors while parsing.\n\nFossilOrigin-Name: ea2d4b65e20e44e19219c821bf68e97ff3af1760b3b4762250d020ba2a5a6343",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/util.c||src/util.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8820408597341344b308277ce6ef41b47c7514d6c613520789b05ee52cbedae8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:   assert( eError==SQLITE_NOMEM || eError==SQLITE_TOOBIG );",
          "138:   p->accError = eError;",
          "139:   if( p->mxAlloc ) sqlite3_str_reset(p);",
          "140: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:   if( eError==SQLITE_TOOBIG ) sqlite3ErrorToParser(p->db, eError);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3835: void sqlite3SetString(char **, sqlite3*, const char*);",
          "3836: void sqlite3ErrorMsg(Parse*, const char*, ...);",
          "3837: void sqlite3Dequote(char*);",
          "3838: void sqlite3DequoteExpr(Expr*);",
          "3839: void sqlite3TokenInit(Token*,char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3837: int sqlite3ErrorToParser(sqlite3*,int);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:   }",
          "234: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: int sqlite3ErrorToParser(sqlite3 *db, int errCode){",
          "242:   Parse *pParse;",
          "243:   if( db==0 || (pParse = db->pParse)==0 ) return errCode;",
          "244:   pParse->rc = errCode;",
          "245:   pParse->nErr++;",
          "246:   return errCode;",
          "247: }",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1065:       nAlloc += (enc==SQLITE_UTF8?1:2);",
          "1066:     }",
          "1067:     if( nByte>iLimit ){",
          "1069:     }",
          "1070:     testcase( nAlloc==0 );",
          "1071:     testcase( nAlloc==31 );",
          "",
          "[Removed Lines]",
          "1068:       return SQLITE_TOOBIG;",
          "",
          "[Added Lines]",
          "1068:       return sqlite3ErrorToParser(pMem->db, SQLITE_TOOBIG);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23a885956e6f6798bf0b75ddf083e77c77ed41cd",
      "candidate_info": {
        "commit_hash": "23a885956e6f6798bf0b75ddf083e77c77ed41cd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/23a885956e6f6798bf0b75ddf083e77c77ed41cd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/global.c",
          "src/main.c",
          "src/memdb.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h"
        ],
        "message": "Add the SQLITE_CONFIG_MEMDB_MAXSIZE configuration option for configuring the default maximum size of an in-memory database created using sqlite3_deserialize().  This is necessary to make the interface reasonably testable.\n\nFossilOrigin-Name: cb72ee0478ce98c48aae059fd5de4e36caf2b8c953e08fcb799bfd119ad46b73",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/global.c||src/global.c",
          "src/main.c||src/main.c",
          "src/memdb.c||src/memdb.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b80119bd6044c0993210115732b6ae7b4b0b29c1471b0723bef24f2052c8e671",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195: #ifndef SQLITE_MEMDB_DEFAULT_MAXSIZE",
          "196: # define SQLITE_MEMDB_DEFAULT_MAXSIZE 1073741824",
          "197: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238: #endif",
          "239: #ifndef SQLITE_UNTESTABLE",
          "241: #endif",
          "246: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "248: #endif",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "653:     }",
          "656:     default: {",
          "657:       rc = SQLITE_ERROR;",
          "658:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "657:     case SQLITE_CONFIG_MEMDB_MAXSIZE: {",
          "658:       sqlite3GlobalConfig.mxMemdbSize = va_arg(ap, sqlite3_int64);",
          "659:       break;",
          "660:     }",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: };",
          "",
          "[Removed Lines]",
          "46: #ifndef SQLITE_MEMDB_DEFAULT_MAXSIZE",
          "47: # define SQLITE_MEMDB_DEFAULT_MAXSIZE 1073741824",
          "48: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:   p->base.pMethods = &memdb_io_methods;",
          "350:   return SQLITE_OK;",
          "351: }",
          "",
          "[Removed Lines]",
          "349:   p->szMax = SQLITE_MEMDB_DEFAULT_MAXSIZE;",
          "",
          "[Added Lines]",
          "344:   p->szMax = sqlite3GlobalConfig.mxMemdbSize;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "598:     p->sz = szDb;",
          "599:     p->szAlloc = szBuf;",
          "600:     p->szMax = szBuf;",
          "603:     }",
          "604:     p->mFlags = mFlags;",
          "605:     rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "601:     if( p->szMax<SQLITE_MEMDB_DEFAULT_MAXSIZE ){",
          "602:       p->szMax = SQLITE_MEMDB_DEFAULT_MAXSIZE;",
          "",
          "[Added Lines]",
          "596:     if( p->szMax<sqlite3GlobalConfig.mxMemdbSize ){",
          "597:       p->szMax = sqlite3GlobalConfig.mxMemdbSize;",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3430: #endif",
          "3431: #ifndef SQLITE_UNTESTABLE",
          "3433: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3431: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3433: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf175c193bfd5a2220d24938e7f91821fd4b7f56",
      "candidate_info": {
        "commit_hash": "cf175c193bfd5a2220d24938e7f91821fd4b7f56",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cf175c193bfd5a2220d24938e7f91821fd4b7f56",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/between.test"
        ],
        "message": "Avoid transforming TK_COLLATE or TK_UNLIKELY Expr nodes to TK_REFERENCE. Instead, transform the uppermost Expr node in the expression tree that is not of this type. Fix for [e1e07ef2].\n\nFossilOrigin-Name: 54110870487f78013ab1b554413c18baa2bdc07d979bc65c110f32d30c3b53fe",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/between.test||test/between.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ca4ddfefc1be1afbf366d87c47f0dd1122350d7ab34ba60020c5babb64a654a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3391:   p->op2 = p->op;",
          "3392:   p->op = TK_REGISTER;",
          "3393:   p->iTable = iReg;",
          "",
          "[Removed Lines]",
          "3390: static void exprToRegister(Expr *p, int iReg){",
          "",
          "[Added Lines]",
          "3390: static void exprToRegister(Expr *pExpr, int iReg){",
          "3391:   Expr *p = sqlite3ExprSkipCollate(pExpr);",
          "",
          "---------------"
        ],
        "test/between.test||test/between.test": [
          "File: test/between.test -> test/between.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:   }",
          "120: } {4 2 25 27 sort t1 *}",
          "123: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #-------------------------------------------------------------------------",
          "123: reset_db",
          "124: do_execsql_test between-2.0 {",
          "125:   CREATE TABLE t1(x TEXT, y TEXT COLLATE nocase);",
          "126:   INSERT INTO t1 VALUES('0', 'abc');",
          "127: }",
          "129: foreach {tn expr res} {",
          "130:   1 \"x                BETWEEN 1 AND '5'\" 0",
          "131:   2 \"x COLLATE binary BETWEEN 1 AND '5'\" 0",
          "132:   3 \"x COLLATE nocase BETWEEN 1 AND '5'\" 0",
          "134:   4 \"y                  BETWEEN 'A' AND 'B'\" 1",
          "135:   5 \"y COLLATE nocase   BETWEEN 'A' AND 'B'\" 1",
          "136:   6 \"y COLLATE binary   BETWEEN 'A' AND 'B'\" 0",
          "137:   7 \"(y COLLATE binary) BETWEEN 'A' AND 'B'\" 0",
          "138: } {",
          "139:   set sql \"SELECT $expr FROM t1\"",
          "140:   do_execsql_test between-2.1.$tn $sql $res",
          "141: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf9d0996b91c158a1a0b2acda479da5380676509",
      "candidate_info": {
        "commit_hash": "bf9d0996b91c158a1a0b2acda479da5380676509",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bf9d0996b91c158a1a0b2acda479da5380676509",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Fix incorrect column-usage accounting associated with generated columns and added by check-in [6601da58032d18ae].  Fix for ticket [b92e5e8ec2cdbaa1].\n\nFossilOrigin-Name: 9d75e1ccc72e9f536f45df3b24e9ecd25076cc1f7cf16b806b19e0e1b68e8326",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 26d991f214db143976e2593d3564b5003eb3539a2728d1a0ccae2a2accece76f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:   if( pExpr->iColumn>=0 && pMatch!=0 ){",
          "568:     int n = pExpr->iColumn;",
          "569:     testcase( n==BMS-1 );",
          "570:     if( n>=BMS ){",
          "571:       n = BMS-1;",
          "572:     }",
          "574:     assert( pMatch->iCursor==pExpr->iTable );",
          "578:     }",
          "579:     pMatch->colUsed |= ((Bitmask)1)<<n;",
          "580:   }",
          "",
          "[Removed Lines]",
          "573:     assert( pExpr->y.pTab!=0 );",
          "575:     if( pExpr->y.pTab->tabFlags & TF_HasGenerated ){",
          "576:       Column *pColumn = pExpr->y.pTab->aCol + pExpr->iColumn;",
          "577:       if( pColumn->colFlags & COLFLAG_GENERATED ) n = BMS-1;",
          "",
          "[Added Lines]",
          "568:     Table *pTab;",
          "573:     pTab = pExpr->y.pTab;",
          "574:     assert( pTab!=0 );",
          "576:     if( pTab->tabFlags & TF_HasGenerated ){",
          "577:       Column *pColumn = pTab->aCol + pExpr->iColumn;",
          "578:       if( pColumn->colFlags & COLFLAG_GENERATED ){",
          "579:         testcase( pTab->nCol==63 );",
          "580:         testcase( pTab->nCol==64 );",
          "581:         if( pTab->nCol>=64 ){",
          "582:           pMatch->colUsed = ALLBITS;",
          "583:         }else{",
          "584:           pMatch->colUsed = MASKBIT(pTab->nCol)-1;",
          "585:         }",
          "586:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}