{
  "cve_id": "CVE-2020-4033",
  "cve_desc": "In FreeRDP before version 2.1.2, there is an out of bounds read in RLEDECOMPRESS. All FreeRDP based clients with sessions with color depth < 32 are affected. This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
  "patch_info": {
    "commit_hash": "0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
    "files": [
      "libfreerdp/codec/include/bitmap.c"
    ],
    "message": "Fixed out of bound read in RLEDECOMPRESS\n\nCVE-2020-4033 thanks to @antonio-morales for finding this.",
    "before_after_code_files": [
      "libfreerdp/codec/include/bitmap.c||libfreerdp/codec/include/bitmap.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/codec/include/bitmap.c||libfreerdp/codec/include/bitmap.c": [
      "File: libfreerdp/codec/include/bitmap.c -> libfreerdp/codec/include/bitmap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "202:     if (code == LITE_SET_FG_FG_RUN || code == MEGA_MEGA_SET_FG_RUN)",
      "203:     {",
      "204:      SRCREADPIXEL(fgPel, pbSrc);",
      "205:      SRCNEXTPIXEL(pbSrc);",
      "206:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "204:      if (pbSrc >= pbEnd)",
      "205:       return FALSE;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "231:    case MEGA_MEGA_DITHERED_RUN:",
      "232:     runLength = ExtractRunLength(code, pbSrc, &advance);",
      "233:     pbSrc = pbSrc + advance;",
      "234:     SRCREADPIXEL(pixelA, pbSrc);",
      "235:     SRCNEXTPIXEL(pbSrc);",
      "236:     SRCREADPIXEL(pixelB, pbSrc);",
      "237:     SRCNEXTPIXEL(pbSrc);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "236:     if (pbSrc >= pbEnd)",
      "237:      return FALSE;",
      "240:     if (pbSrc >= pbEnd)",
      "241:      return FALSE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "252:    case MEGA_MEGA_COLOR_RUN:",
      "253:     runLength = ExtractRunLength(code, pbSrc, &advance);",
      "254:     pbSrc = pbSrc + advance;",
      "255:     SRCREADPIXEL(pixelA, pbSrc);",
      "256:     SRCNEXTPIXEL(pbSrc);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "261:     if (pbSrc >= pbEnd)",
      "262:      return FALSE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "272:     runLength = ExtractRunLength(code, pbSrc, &advance);",
      "273:     pbSrc = pbSrc + advance;",
      "275:     if (code == LITE_SET_FG_FGBG_IMAGE || code == MEGA_MEGA_SET_FGBG_IMAGE)",
      "276:     {",
      "277:      SRCREADPIXEL(fgPel, pbSrc);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "283:     if (pbSrc >= pbEnd)",
      "284:      return FALSE;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "338:      return FALSE;",
      "340:     UNROLL(runLength, {",
      "341:      SRCREADPIXEL(temp, pbSrc);",
      "342:      SRCNEXTPIXEL(pbSrc);",
      "343:      DESTWRITEPIXEL(pbDest, temp);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "351:      if (pbSrc >= pbEnd)",
      "352:       return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02c5ec66e5b47fe4cf2fc96e2cd387a18e3f2bb6",
      "candidate_info": {
        "commit_hash": "02c5ec66e5b47fe4cf2fc96e2cd387a18e3f2bb6",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/02c5ec66e5b47fe4cf2fc96e2cd387a18e3f2bb6",
        "files": [
          "libfreerdp/crypto/crypto.c"
        ],
        "message": "Fixed possible integer overflow in crypto_rsa_common\n\nThanks @anticomputer for pointing this out",
        "before_after_code_files": [
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:  BIGNUM* exp = NULL;",
          "106:  BIGNUM* x = NULL;",
          "107:  BIGNUM* y = NULL;",
          "110:  if (!input || (length < 0) || (exponent_size < 0) || !modulus || !exponent || !output)",
          "111:   return -1;",
          "113:  if (length > bufferSize)",
          "114:   bufferSize = length;",
          "",
          "[Removed Lines]",
          "108:  size_t bufferSize = 2 * key_length + exponent_size;",
          "",
          "[Added Lines]",
          "108:  size_t bufferSize;",
          "113:  if (exponent_size > SIZE_MAX / 2)",
          "114:   return -1;",
          "116:  if (key_length >= SIZE_MAX / 2 - exponent_size)",
          "117:   return -1;",
          "119:  bufferSize = 2ULL * key_length + exponent_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ac7bb5d6a743b19e8686410d5ec6dcf74869ebe",
      "candidate_info": {
        "commit_hash": "3ac7bb5d6a743b19e8686410d5ec6dcf74869ebe",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3ac7bb5d6a743b19e8686410d5ec6dcf74869ebe",
        "files": [
          "libfreerdp/utils/pcap.c"
        ],
        "message": "Fixed pcap cleanup",
        "before_after_code_files": [
          "libfreerdp/utils/pcap.c||libfreerdp/utils/pcap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/utils/pcap.c||libfreerdp/utils/pcap.c": [
          "File: libfreerdp/utils/pcap.c -> libfreerdp/utils/pcap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: {",
          "171:  rdpPcap* pcap;",
          "181:  pcap = (rdpPcap*)calloc(1, sizeof(rdpPcap));",
          "182:  if (!pcap)",
          "185:  pcap->name = name;",
          "186:  pcap->write = write;",
          "187:  pcap->record_count = 0;",
          "190:  if (write)",
          "191:  {",
          "",
          "[Removed Lines]",
          "173:  FILE* pcap_fp = fopen(name, write ? \"w+b\" : \"rb\");",
          "175:  if (pcap_fp == NULL)",
          "176:  {",
          "177:   WLog_ERR(TAG, \"opening pcap dump\");",
          "178:   return NULL;",
          "179:  }",
          "183:   goto fail_close;",
          "188:  pcap->fp = pcap_fp;",
          "",
          "[Added Lines]",
          "175:   goto fail;",
          "180:  pcap->fp = fopen(name, write ? \"w+b\" : \"rb\");",
          "182:  if (pcap->fp == NULL)",
          "183:   goto fail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:  return pcap;",
          "213: fail:",
          "217:  return NULL;",
          "218: }",
          "",
          "[Removed Lines]",
          "214:  free(pcap);",
          "215: fail_close:",
          "216:  fclose(pcap_fp);",
          "",
          "[Added Lines]",
          "209:  pcap_close(pcap);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232: void pcap_close(rdpPcap* pcap)",
          "233: {",
          "234:  pcap_flush(pcap);",
          "236:  if (pcap->fp != NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:  if (!pcap)",
          "228:   return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "240fdd07b123594a1f7a460de7e6877b1963d09e",
      "candidate_info": {
        "commit_hash": "240fdd07b123594a1f7a460de7e6877b1963d09e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/240fdd07b123594a1f7a460de7e6877b1963d09e",
        "files": [
          "channels/printer/client/cups/printer_cups.c",
          "channels/printer/client/win/printer_win.c",
          "winpr/libwinpr/sysinfo/sysinfo.c",
          "winpr/libwinpr/timezone/timezone.c"
        ],
        "message": "Replaced localtime with localtime_r",
        "before_after_code_files": [
          "channels/printer/client/cups/printer_cups.c||channels/printer/client/cups/printer_cups.c",
          "channels/printer/client/win/printer_win.c||channels/printer/client/win/printer_win.c",
          "winpr/libwinpr/sysinfo/sysinfo.c||winpr/libwinpr/sysinfo/sysinfo.c",
          "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/printer/client/cups/printer_cups.c||channels/printer/client/cups/printer_cups.c": [
          "File: channels/printer/client/cups/printer_cups.c -> channels/printer/client/cups/printer_cups.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: static void printer_cups_get_printjob_name(char* buf, size_t size, size_t id)",
          "70: {",
          "71:  time_t tt;",
          "72:  struct tm* t;",
          "74:  tt = time(NULL);",
          "76:  sprintf_s(buf, size - 1, \"FreeRDP Print %04d-%02d-%02d %02d-%02d-%02d - Job %\" PRIdz,",
          "77:            t->tm_year + 1900, t->tm_mon + 1, t->tm_mday, t->tm_hour, t->tm_min, t->tm_sec, id);",
          "78: }",
          "",
          "[Removed Lines]",
          "75:  t = localtime(&tt);",
          "",
          "[Added Lines]",
          "72:  struct tm tres;",
          "76:  t = localtime_r(&tt, &tres);",
          "",
          "---------------"
        ],
        "channels/printer/client/win/printer_win.c||channels/printer/client/win/printer_win.c": [
          "File: channels/printer/client/win/printer_win.c -> channels/printer/client/win/printer_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: static WCHAR* printer_win_get_printjob_name(size_t id)",
          "79: {",
          "80:  time_t tt;",
          "81:  struct tm* t;",
          "82:  WCHAR* str;",
          "83:  size_t len = 1024;",
          "84:  int rc;",
          "86:  tt = time(NULL);",
          "89:  str = calloc(len, sizeof(WCHAR));",
          "90:  if (!str)",
          "",
          "[Removed Lines]",
          "87:  t = localtime(&tt);",
          "",
          "[Added Lines]",
          "81:  struct tm tres;",
          "88:  t = localtime_r(&tt, &tres);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sysinfo/sysinfo.c||winpr/libwinpr/sysinfo/sysinfo.c": [
          "File: winpr/libwinpr/sysinfo/sysinfo.c -> winpr/libwinpr/sysinfo/sysinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242: VOID GetLocalTime(LPSYSTEMTIME lpSystemTime)",
          "243: {",
          "244:  time_t ct = 0;",
          "245:  struct tm* ltm = NULL;",
          "246:  WORD wMilliseconds = 0;",
          "247:  ct = time(NULL);",
          "248:  wMilliseconds = (WORD)(GetTickCount() % 1000);",
          "250:  ZeroMemory(lpSystemTime, sizeof(SYSTEMTIME));",
          "252:  if (ltm)",
          "",
          "[Removed Lines]",
          "249:  ltm = localtime(&ct);",
          "",
          "[Added Lines]",
          "245:  struct tm tres;",
          "250:  ltm = localtime_r(&ct, &tres);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c": [
          "File: winpr/libwinpr/timezone/timezone.c -> winpr/libwinpr/timezone/timezone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: DWORD GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)",
          "340: {",
          "341:  time_t t;",
          "342:  struct tm* local_time;",
          "343:  TIME_ZONE_ENTRY* dtz;",
          "344:  LPTIME_ZONE_INFORMATION tz = lpTimeZoneInformation;",
          "345:  lpTimeZoneInformation->StandardBias = 0;",
          "346:  time(&t);",
          "348:  memset(tz, 0, sizeof(TIME_ZONE_INFORMATION));",
          "349: #ifdef HAVE_TM_GMTOFF",
          "350:  {",
          "",
          "[Removed Lines]",
          "347:  local_time = localtime(&t);",
          "",
          "[Added Lines]",
          "342:  struct tm tres;",
          "343:  ;",
          "349:  local_time = localtime_r(&t, &tres);",
          "350:  if (!local_time)",
          "351:   goto out_error;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7bffa64ef5ed70bac94f823e2b95262642f5296",
      "candidate_info": {
        "commit_hash": "e7bffa64ef5ed70bac94f823e2b95262642f5296",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/e7bffa64ef5ed70bac94f823e2b95262642f5296",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Fixed OOB read in update_recv_secondary_order\n\nCVE-2020-4032 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3762:              name, end - start);",
          "3763:   return FALSE;",
          "3764:  }",
          "3766:  if (diff > 0)",
          "3767:  {",
          "3768:   WLog_Print(update->log, WLOG_DEBUG,",
          "3769:              \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes short, skipping\", name, diff);",
          "3771:  }",
          "3772:  return rc;",
          "3773: }",
          "",
          "[Removed Lines]",
          "3765:  diff = start - end;",
          "3770:   Stream_Seek(s, diff);",
          "",
          "[Added Lines]",
          "3765:  diff = end - start;",
          "3770:   if (!Stream_SafeSeek(s, diff))",
          "3771:    return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05cd9ea2290d23931f615c1b004d4b2e69074e27",
      "candidate_info": {
        "commit_hash": "05cd9ea2290d23931f615c1b004d4b2e69074e27",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/05cd9ea2290d23931f615c1b004d4b2e69074e27",
        "files": [
          "winpr/libwinpr/utils/trio/trio.c",
          "winpr/libwinpr/utils/trio/triostr.c"
        ],
        "message": "Fixed TrioParse and trio_length limts.\n\nCVE-2020-4030 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "winpr/libwinpr/utils/trio/trio.c||winpr/libwinpr/utils/trio/trio.c",
          "winpr/libwinpr/utils/trio/triostr.c||winpr/libwinpr/utils/trio/triostr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/trio/trio.c||winpr/libwinpr/utils/trio/trio.c": [
          "File: winpr/libwinpr/utils/trio/trio.c -> winpr/libwinpr/utils/trio/trio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2729:                                              trio_class_t* self, TRIO_CONST char* string,",
          "2730:                                              trio_flags_t flags, int width, int precision)",
          "2731: {",
          "2733:  int ch;",
          "2735:  assert(VALID(self));",
          "",
          "[Removed Lines]",
          "2732:  int length;",
          "",
          "[Added Lines]",
          "2732:  int length = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2747:  }",
          "2748:  else",
          "2749:  {",
          "2751:   {",
          "2752:    length = trio_length(string);",
          "2753:   }",
          "",
          "[Removed Lines]",
          "2750:   if (precision == 0)",
          "",
          "[Added Lines]",
          "2750:   if (precision <= 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4754:   }",
          "4758:    return NULL;",
          "",
          "[Removed Lines]",
          "4757:   if (trio_length(name) >= MAX_USER_NAME)",
          "",
          "[Added Lines]",
          "4757:   if (trio_length_max(name, MAX_USER_NAME) >= MAX_USER_NAME)",
          "",
          "---------------"
        ],
        "winpr/libwinpr/utils/trio/triostr.c||winpr/libwinpr/utils/trio/triostr.c": [
          "File: winpr/libwinpr/utils/trio/triostr.c -> winpr/libwinpr/utils/trio/triostr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <assert.h>",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "28: #include <ctype.h>",
          "29: #include \"triodef.h\"",
          "30: #include \"triostr.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329: TRIO_PUBLIC_STRING size_t trio_length TRIO_ARGS1((string), TRIO_CONST char* string)",
          "330: {",
          "332: }",
          "334: #endif",
          "",
          "[Removed Lines]",
          "331:  return strlen(string);",
          "",
          "[Added Lines]",
          "332:  return trio_length_max(string, INT_MAX);",
          "",
          "---------------"
        ]
      }
    }
  ]
}