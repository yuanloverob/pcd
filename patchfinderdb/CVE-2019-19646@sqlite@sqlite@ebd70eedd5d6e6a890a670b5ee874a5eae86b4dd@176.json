{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "935d9d8260e34e01873ac51988b23f017434a5f7",
      "candidate_info": {
        "commit_hash": "935d9d8260e34e01873ac51988b23f017434a5f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/935d9d8260e34e01873ac51988b23f017434a5f7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Expand on header comment for sqlite3WindowCodeStep(). Further simplify the implementation of the same.\n\nFossilOrigin-Name: 5129bcc996b3c9f78ab6b674a4364787e7b353b90f15f027cad4431012022c30",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 081263538332bb9c07e62630629007ccbba31bef5dc890f60b4ba58a355f70ac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1498:   Parse *pParse,",
          "1499:   ExprList *pOrderBy,",
          "1502: ){",
          "1503:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1505:   if( pOrderBy ){",
          "1506:     int nVal = pOrderBy->nExpr;",
          "1507:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pOrderBy, 0, 0);",
          "1508:     sqlite3VdbeAddOp3(v, OP_Compare, regOld, regNew, nVal);",
          "1509:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1512:     );",
          "1513:     VdbeCoverageEqNe(v);",
          "1514:     sqlite3VdbeAddOp3(v, OP_Copy, regNew, regOld, nVal-1);",
          "1515:   }else{",
          "1517:   }",
          "1519: }",
          "1521: typedef struct WindowCodeArg WindowCodeArg;",
          "",
          "[Removed Lines]",
          "1497: static int windowIfNewPeer(",
          "1504:   int addr;",
          "1510:     addr = sqlite3VdbeAddOp3(",
          "1511:         v, OP_Jump, sqlite3VdbeCurrentAddr(v)+1, 0, sqlite3VdbeCurrentAddr(v)+1",
          "1516:     addr = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1518:   return addr;",
          "",
          "[Added Lines]",
          "1497: static void windowIfNewPeer(",
          "1510:     sqlite3VdbeAddOp3(v, OP_Jump,",
          "1511:       sqlite3VdbeCurrentAddr(v)+1, addr, sqlite3VdbeCurrentAddr(v)+1",
          "1516:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1708:     int nReg = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "1709:     int regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "1710:     windowReadPeerValues(p, csr, regTmp);",
          "1713:     sqlite3ReleaseTempRange(pParse, regTmp, nReg);",
          "1714:   }",
          "",
          "[Removed Lines]",
          "1711:     addr = windowIfNewPeer(pParse, pMWin->pOrderBy, regTmp, reg);",
          "1712:     sqlite3VdbeChangeP2(v, addr, addrContinue);",
          "",
          "[Added Lines]",
          "1710:     windowIfNewPeer(pParse, pMWin->pOrderBy, regTmp, reg, addrContinue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1969:   int addrShortcut = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1985:        || pMWin->eEnd==TK_UNBOUNDED || pMWin->eEnd==TK_PRECEDING",
          "1986:   );",
          "1992:   memset(&s, 0, sizeof(WindowCodeArg));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2134:   lblWhereEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2083:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2084:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2085:     sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2087:     sqlite3VdbeJumpHere(v, addrGe);",
          "2088:   }",
          "2089:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eType!=TK_RANGE && regEnd ){",
          "",
          "[Removed Lines]",
          "2086:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "",
          "[Added Lines]",
          "2231:     sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2104:   }",
          "2106:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "2110:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.SECOND_ROW\"));",
          "2111:   sqlite3VdbeJumpHere(v, addrIfNot);",
          "2112:   if( regPeer ){",
          "2114:   }",
          "2115:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2116:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "",
          "[Removed Lines]",
          "2107:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2113:     addrPeerJump = windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer);",
          "",
          "[Added Lines]",
          "2252:   sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2258:     windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer, lblWhereEnd);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2158:       }",
          "2159:     }",
          "2160:   }",
          "2164:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.SECOND_ROW\"));",
          "2169:   sqlite3WhereEnd(pWInfo);",
          "",
          "[Removed Lines]",
          "2161:   if( addrPeerJump ){",
          "2162:     sqlite3VdbeJumpHere(v, addrPeerJump);",
          "2163:   }",
          "2167:   sqlite3VdbeJumpHere(v, addrGoto);",
          "2168:   if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "",
          "[Added Lines]",
          "2309:   sqlite3VdbeResolveLabel(v, lblWhereEnd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
      "candidate_info": {
        "commit_hash": "5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
        "files": [
          "ext/lsm1/lsm_vtab.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix to the query planner for the LSM1 extension.\n\nFossilOrigin-Name: 7496e872a1a50ac65ad04709365a43038fb015ac9c690196de3cb02ce54c2e57",
        "before_after_code_files": [
          "ext/lsm1/lsm_vtab.c||ext/lsm1/lsm_vtab.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/lsm1/lsm_vtab.c||ext/lsm1/lsm_vtab.c": [
          "File: ext/lsm1/lsm_vtab.c -> ext/lsm1/lsm_vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "843:   const struct sqlite3_index_constraint *pConstraint;",
          "844:   pConstraint = pIdxInfo->aConstraint;",
          "846:     if( pConstraint->usable==0 ) continue;",
          "847:     if( pConstraint->iColumn!=0 ) continue;",
          "848:     switch( pConstraint->op ){",
          "",
          "[Removed Lines]",
          "845:   for(i=0; i<pIdxInfo->nConstraint && idxNum<16; i++, pConstraint++){",
          "",
          "[Added Lines]",
          "845:   for(i=0; i<pIdxInfo->nConstraint; i++, pConstraint++){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d6f4dfeea75c7dcd8c511545accb9eb4b405a02db034332249ba54794e313d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fbb9a5b1e377224f8f409bec03d3947188417623",
      "candidate_info": {
        "commit_hash": "fbb9a5b1e377224f8f409bec03d3947188417623",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fbb9a5b1e377224f8f409bec03d3947188417623",
        "files": [
          "ext/fts5/fts5_main.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: a8927d14f88c44828e794787bab080455ab62705c93f65ce7d8db83478aa5a8e",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1209:         pRank = apVal[i];",
          "1210:         break;",
          "1211:       case 'm': {",
          "1213:         if( zText==0 ) zText = \"\";",
          "1215:         if( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' ){",
          "",
          "[Removed Lines]",
          "1212:         char *zText = sqlite3_value_text(apVal[i]);",
          "",
          "[Added Lines]",
          "1211:         const char *zText = (const char*)sqlite3_value_text(apVal[i]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1279:     assert( pRowidEq==0 && pRowidLe==0 && pRowidGe==0 && pRank==0 );",
          "1281:     assert( pCsr->iLastRowid==LARGEST_INT64 );",
          "1282:     assert( pCsr->iFirstRowid==SMALLEST_INT64 );",
          "1283:     if( pTab->pSortCsr->bDesc ){",
          "",
          "[Removed Lines]",
          "1280:     assert( nVal==0 && pMatch==0 && bOrderByRank==0 && bDesc==0 );",
          "",
          "[Added Lines]",
          "1279:     assert( nVal==0 && bOrderByRank==0 && bDesc==0 );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9d418a7a491761eeb38a70898677a493e2631e5d62e75ee88431f52d3dfd2344",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2381f6d7e57a8857e1e05343508124e8fe6df285",
      "candidate_info": {
        "commit_hash": "2381f6d7e57a8857e1e05343508124e8fe6df285",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2381f6d7e57a8857e1e05343508124e8fe6df285",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/altertab3.test"
        ],
        "message": "Fix a potential dangling pointer deference in an ALTER TABLE run on a schema that contains constructs of the form \"PRIMARY KEY(column COLLATE collation)\".\n\nFossilOrigin-Name: b9e2393cf201e3fc24519c5ae65d0a5953147d78884e53d44a7958747b4a7e13",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f0f02d46e40667d0fc31c57eb26d459ce2f3a3c222c767fa371100b36e5335d1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1404:    && sortOrder!=SQLITE_SO_DESC",
          "1405:   ){",
          "1406:     if( IN_RENAME_OBJECT && pList ){",
          "1408:     }",
          "1409:     pTab->iPKey = iCol;",
          "1410:     pTab->keyConf = (u8)onError;",
          "",
          "[Removed Lines]",
          "1407:       sqlite3RenameTokenRemap(pParse, &pTab->iPKey, pList->a[0].pExpr);",
          "",
          "[Added Lines]",
          "1407:       Expr *pCExpr = sqlite3ExprSkipCollate(pList->a[0].pExpr);",
          "1408:       sqlite3RenameTokenRemap(pParse, &pTab->iPKey, pCExpr);",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:   SELECT * FROM sqlite_master WHERE type='table' AND name!='t1';",
          "115: } {table t3 t3 3 {CREATE TABLE t3(e, f)}}",
          "117: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117: #-------------------------------------------------------------------------",
          "118: reset_db",
          "119: do_execsql_test 5.0 {",
          "120:   CREATE TABLE t1 (",
          "121:       c1 integer, c2, PRIMARY KEY(c1 collate rtrim),",
          "122:       UNIQUE(c2)",
          "123:   )",
          "124: }",
          "125: do_execsql_test 5.1 {",
          "126:   ALTER TABLE t1 RENAME c1 TO c3;",
          "127: }",
          "129: #-------------------------------------------------------------------------",
          "130: reset_db",
          "131: do_execsql_test 6.0 {",
          "132:   CREATE TEMPORARY TABLE Table0 (",
          "133:     Col0 INTEGER,",
          "134:     PRIMARY KEY(Col0 COLLATE RTRIM),",
          "135:     FOREIGN KEY (Col0) REFERENCES Table0",
          "136:   );",
          "137: }",
          "139: do_execsql_test 6.1 {",
          "140:   ALTER TABLE Table0 RENAME Col0 TO Col0;",
          "141: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0ff601c62a4873a5808fd072dc573797883ef51",
      "candidate_info": {
        "commit_hash": "d0ff601c62a4873a5808fd072dc573797883ef51",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d0ff601c62a4873a5808fd072dc573797883ef51",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/resolve.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/test1.c"
        ],
        "message": "Improved interface to double-quoted string literal enabling/disabling.\n\nFossilOrigin-Name: 923cfd53fcff2fcb91530bf819d2ecb0eda3f6a27dae29c7460f9ce3a3ffce7b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1fad20925efa70d0c242e9cba8fa55456fb07a81229c1068da84c6e27d0c0be8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "846:         { SQLITE_DBCONFIG_WRITABLE_SCHEMA,       SQLITE_WriteSchema|",
          "847:                                                  SQLITE_NoSchemaError  },",
          "848:         { SQLITE_DBCONFIG_LEGACY_ALTER_TABLE,    SQLITE_LegacyAlter    },",
          "851:       };",
          "852:       unsigned int i;",
          "",
          "[Removed Lines]",
          "849:         { SQLITE_DBCONFIG_NO_DQS_SCHEMA,         SQLITE_NoDQSSchema    },",
          "850:         { SQLITE_DBCONFIG_NO_DQS,                SQLITE_NoDQS          },",
          "",
          "[Added Lines]",
          "849:         { SQLITE_DBCONFIG_DQS_DDL,               SQLITE_DqsDDL         },",
          "850:         { SQLITE_DBCONFIG_DQS_DML,               SQLITE_DqsDML         },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3074:   db->nextPagesize = 0;",
          "3075:   db->nMaxSorterMmap = 0x7FFFFFFF;",
          "3076:   db->flags |= SQLITE_ShortColNames | SQLITE_EnableTrigger | SQLITE_CacheSpill",
          "3078: #if !defined(SQLITE_DEFAULT_AUTOMATIC_INDEX) || SQLITE_DEFAULT_AUTOMATIC_INDEX",
          "3079:                  | SQLITE_AutoIndex",
          "3080: #endif",
          "",
          "[Removed Lines]",
          "3077:                  | SQLITE_NoDQSSchema",
          "",
          "[Added Lines]",
          "3077:                  | SQLITE_DqsDML",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:   return 1;",
          "149: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154: static int areDoubleQuotedStringsEnabled(sqlite3 *db, NameContext *pTopNC){",
          "156:   if( pTopNC->ncFlags & NC_IsDDL ){",
          "158:     if( sqlite3WritableSchema(db) && (db->flags & SQLITE_DqsDML)!=0 ){",
          "159:       return 1;",
          "160:     }",
          "161:     return (db->flags & SQLITE_DqsDDL)!=0;",
          "162:   }else{",
          "164:     return (db->flags & SQLITE_DqsDML)!=0;",
          "165:   }",
          "166: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477:   if( cnt==0 && zTab==0 ){",
          "478:     assert( pExpr->op==TK_ID );",
          "482:     ){",
          "",
          "[Removed Lines]",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "480:      && 0==(pTopNC->ncFlags&NC_NoDblQStr)",
          "481:      && 0==(db->flags & SQLITE_NoDQS)",
          "",
          "[Added Lines]",
          "496:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "497:      && areDoubleQuotedStringsEnabled(db, pTopNC)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1771:   }",
          "1772:   sNC.pParse = pParse;",
          "1773:   sNC.pSrcList = &sSrc;",
          "1783:   if( (rc = sqlite3ResolveExprNames(&sNC, pExpr))!=SQLITE_OK ) return rc;",
          "1784:   if( pList ) rc = sqlite3ResolveExprListNames(&sNC, pList);",
          "1785:   return rc;",
          "",
          "[Removed Lines]",
          "1774:   sNC.ncFlags = type;",
          "1775:   if( (pParse->db->flags & SQLITE_NoDQS)!=0",
          "1776:    || (!pParse->db->init.busy",
          "1777:         && !sqlite3WritableSchema(pParse->db)",
          "1778:         && (pParse->db->flags & SQLITE_NoDQSSchema)!=0",
          "1779:       )",
          "1780:   ){",
          "1781:     sNC.ncFlags |= NC_NoDblQStr;",
          "1782:   }",
          "",
          "[Added Lines]",
          "1790:   sNC.ncFlags = type | NC_IsDDL;",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7086:         { \"defensive\",          SQLITE_DBCONFIG_DEFENSIVE             },",
          "7087:         { \"wriable_schema\",     SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "7088:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "7091:     };",
          "7092:     int ii, v;",
          "7093:     open_db(p, 0);",
          "",
          "[Removed Lines]",
          "7089:         { \"no_dqs_schema\",      SQLITE_DBCONFIG_NO_DQS_SCHEMA         },",
          "7090:         { \"no_dqs\",             SQLITE_DBCONFIG_NO_DQS                },",
          "",
          "[Added Lines]",
          "7089:         { \"dqs_dml\",            SQLITE_DBCONFIG_DQS_DML               },",
          "7090:         { \"dqs_ddl\",            SQLITE_DBCONFIG_DQS_DDL               },",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2799: #define NC_NoDblQStr 0x10000 /* Do not allow double-quoted string hack.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7619:     { \"DEFENSIVE\",          SQLITE_DBCONFIG_DEFENSIVE },",
          "7620:     { \"WRITABLE_SCHEMA\",    SQLITE_DBCONFIG_WRITABLE_SCHEMA },",
          "7621:     { \"LEGACY_ALTER_TABLE\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE },",
          "7624:   };",
          "7625:   int i;",
          "7626:   int v;",
          "",
          "[Removed Lines]",
          "7622:     { \"NO_DQS_SCHEMA\",      SQLITE_DBCONFIG_NO_DQS_SCHEMA },",
          "7623:     { \"NO_DQS\",             SQLITE_DBCONFIG_NO_DQS },",
          "",
          "[Added Lines]",
          "7622:     { \"DQS_DML\",            SQLITE_DBCONFIG_DQS_DML },",
          "7623:     { \"DQS_DDL\",            SQLITE_DBCONFIG_DQS_DDL },",
          "",
          "---------------"
        ]
      }
    }
  ]
}