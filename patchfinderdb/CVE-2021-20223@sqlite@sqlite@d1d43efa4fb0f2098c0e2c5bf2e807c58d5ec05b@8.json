{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9b258c54e453edb5c8c81c3d28b2cb6e2b76a13e",
      "candidate_info": {
        "commit_hash": "9b258c54e453edb5c8c81c3d28b2cb6e2b76a13e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9b258c54e453edb5c8c81c3d28b2cb6e2b76a13e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/vtab.c",
          "test/func.test"
        ],
        "message": "Rename sqlite3ExprCodeAtInit() to sqlite3ExprCodeRunJustOnce(). Other changes to make the new code cleaner.  Test cases added.\n\nFossilOrigin-Name: d7f18489978fdbbe3ab317485518cac91a75416ccef55898301afdd76d3b415b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/vtab.c||src/vtab.c",
          "test/func.test||test/func.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 97a18a5cd701848a9660385e31bffe2c397e3cfe57ccdb876f44d08c00d1d39a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4127: #endif",
          "4129:       if( ConstFactorOk(pParse) && sqlite3ExprIsConstantNotJoin(pExpr) ){",
          "4133:       }",
          "4134:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "4135:       assert( !ExprHasProperty(pExpr, EP_TokenOnly) );",
          "",
          "[Removed Lines]",
          "4132:         return sqlite3ExprCodeAtInit(pParse, pExpr, -1);",
          "",
          "[Added Lines]",
          "4132:         return sqlite3ExprCodeRunJustOnce(pParse, pExpr, -1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4507: }",
          "",
          "[Removed Lines]",
          "4518: int sqlite3ExprCodeAtInit(",
          "",
          "[Added Lines]",
          "4526: int sqlite3ExprCodeRunJustOnce(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4532:       }",
          "4533:     }",
          "4534:   }",
          "4536:   pExpr = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "4537:   if( pExpr!=0 && ExprHasProperty(pExpr, EP_HasFunc) ){",
          "4538:     Vdbe *v = pParse->pVdbe;",
          "",
          "[Removed Lines]",
          "4535:   if( regDest<0 ) regDest = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4541:     addr = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "4542:     pParse->okConstFactor = 0;",
          "4543:     if( !pParse->db->mallocFailed ){",
          "4544:       sqlite3ExprCode(pParse, pExpr, regDest);",
          "4545:     }",
          "4546:     pParse->okConstFactor = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4551:       if( regDest<0 ) regDest = ++pParse->nMem;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4551:     if( p ){",
          "4552:        struct ExprList_item *pItem = &p->a[p->nExpr-1];",
          "4553:        pItem->reusable = regDest<0;",
          "4554:        pItem->u.iConstExprReg = regDest;",
          "4555:     }",
          "4556:     pParse->pConstExpr = p;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4562:        if( regDest<0 ) regDest = ++pParse->nMem;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4579:    && sqlite3ExprIsConstantNotJoin(pExpr)",
          "4580:   ){",
          "4583:   }else{",
          "4584:     int r1 = sqlite3GetTempReg(pParse);",
          "4585:     r2 = sqlite3ExprCodeTarget(pParse, pExpr, r1);",
          "",
          "[Removed Lines]",
          "4582:     r2 = sqlite3ExprCodeAtInit(pParse, pExpr, -1);",
          "",
          "[Added Lines]",
          "4591:     r2 = sqlite3ExprCodeRunJustOnce(pParse, pExpr, -1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4637: void sqlite3ExprCodeFactorable(Parse *pParse, Expr *pExpr, int target){",
          "4638:   if( pParse->okConstFactor && sqlite3ExprIsConstantNotJoin(pExpr) ){",
          "4640:   }else{",
          "4641:     sqlite3ExprCodeCopy(pParse, pExpr, target);",
          "4642:   }",
          "",
          "[Removed Lines]",
          "4639:     sqlite3ExprCodeAtInit(pParse, pExpr, target);",
          "",
          "[Added Lines]",
          "4648:     sqlite3ExprCodeRunJustOnce(pParse, pExpr, target);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4696:     }else if( (flags & SQLITE_ECEL_FACTOR)!=0",
          "4697:            && sqlite3ExprIsConstantNotJoin(pExpr)",
          "4698:     ){",
          "4700:     }else{",
          "4701:       int inReg = sqlite3ExprCodeTarget(pParse, pExpr, target+i);",
          "4702:       if( inReg!=target+i ){",
          "",
          "[Removed Lines]",
          "4699:       sqlite3ExprCodeAtInit(pParse, pExpr, target+i);",
          "",
          "[Added Lines]",
          "4708:       sqlite3ExprCodeRunJustOnce(pParse, pExpr, target+i);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5256:      && ALWAYS((combinedFlags & EP_Reduced)==0)",
          "5257:     ){",
          "5258:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "5274:       if( pA->op!=TK_IN && pA->iTable!=pB->iTable && pA->iTable!=iTab ){",
          "5275:         return 2;",
          "5276:       }",
          "",
          "[Removed Lines]",
          "5259:       if( pA->op2!=pB->op2 ){",
          "5260:         if( pA->op==TK_TRUTH ) return 2;",
          "5261:         if( pA->op==TK_FUNCTION && iTab<0 ){",
          "5271:           return 2;",
          "5272:         }",
          "5273:       }",
          "",
          "[Added Lines]",
          "5268:       if( pA->op2!=pB->op2 && pA->op==TK_TRUTH ) return 2;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4239: #endif",
          "4240: void sqlite3ExprCodeCopy(Parse*, Expr*, int);",
          "4241: void sqlite3ExprCodeFactorable(Parse*, Expr*, int);",
          "4243: int sqlite3ExprCodeTemp(Parse*, Expr*, int*);",
          "4244: int sqlite3ExprCodeTarget(Parse*, Expr*, int);",
          "4245: int sqlite3ExprCodeExprList(Parse*, ExprList*, int, int, u8);",
          "",
          "[Removed Lines]",
          "4242: int sqlite3ExprCodeAtInit(Parse*, Expr*, int);",
          "",
          "[Added Lines]",
          "4242: int sqlite3ExprCodeRunJustOnce(Parse*, Expr*, int);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1544:   pIn1 = &aMem[pOp->p1];",
          "1545:   pIn2 = &aMem[pOp->p2];",
          "1546:   pOut = &aMem[pOp->p3];",
          "1548:   testcase( pOut==pIn2 );",
          "1549:   assert( pIn1!=pOut );",
          "1550:   flags1 = pIn1->flags;",
          "",
          "[Removed Lines]",
          "1547:   testcase( pIn1==pIn2 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1113:   int rc = 0;",
          "1117:   if( pExpr->op!=TK_COLUMN ) return pDef;",
          "1118:   pTab = pExpr->y.pTab;",
          "1119:   if( pTab==0 ) return pDef;",
          "",
          "[Removed Lines]",
          "1116:   if( pExpr==0 ) return pDef;",
          "",
          "[Added Lines]",
          "1116:   if( NEVER(pExpr==0) ) return pDef;",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1477:   SELECT * FROM t1;",
          "1478: } {1 2}",
          "1480: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1480: # 2020-03-11 COALESCE() should short-circuit",
          "1481: # See also ticket 3c9eadd2a6ba0aa5",
          "1482: # Both issues stem from the fact that functions that could",
          "1483: # throw exceptions were being factored out into initialization",
          "1484: # code.  The fix was to put those function calls inside of",
          "1485: # OP_Once instead.",
          "1486: #",
          "1487: reset_db",
          "1488: do_execsql_test func-35.100 {",
          "1489:   CREATE TABLE t1(x);",
          "1490:   SELECT coalesce(x, abs(-9223372036854775808)) FROM t1;",
          "1491: } {}",
          "1492: do_execsql_test func-35.110 {",
          "1493:   SELECT coalesce(x, 'xyz' LIKE printf('%.1000000c','y')) FROM t1;",
          "1494: } {}",
          "1495: do_execsql_test func-35.200 {",
          "1496:   CREATE TABLE t0(c0 CHECK(ABS(-9223372036854775808)));",
          "1497:   PRAGMA integrity_check;",
          "1498: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26b9540fc2a195b21b6c57804249be367b85ef1a",
      "candidate_info": {
        "commit_hash": "26b9540fc2a195b21b6c57804249be367b85ef1a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/26b9540fc2a195b21b6c57804249be367b85ef1a",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/corruptL.test"
        ],
        "message": "Fix a file-descriptor leak in test script corruptL.test.\n\nFossilOrigin-Name: ec2c340c39bc78e4bce0eb01ea408c95ba121103cc77f300f29f3001fc345c20",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e2799563c8a97f617c6d932719b312e3d5bff051a9a397492df8d88e8bb4260a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1295: } {1 {database disk image is malformed}}",
          "1297: #-------------------------------------------------------------------------",
          "1298: reset_db",
          "1299: do_execsql_test 17.0 {",
          "1300:   CREATE TABLE t1(o INTEGER PRIMARY KEY, t UNIQUE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1298: # Test that corruption is reported from within a checkpoint if the",
          "1299: # expected final size of the database (according to the last commit",
          "1300: # frame in the wal file) is greater than the combined initial sizes",
          "1301: # of the database and wal file.",
          "1302: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1316:   file size test.db",
          "1317: } {2048}",
          "1321:   PRAGMA wal_checkpoint",
          "1322: } {1 {database disk image is malformed}}",
          "1325: finish_test",
          "",
          "[Removed Lines]",
          "1319: breakpoint",
          "1320: do_catchsql_test 17.1 {",
          "",
          "[Added Lines]",
          "1324: do_catchsql_test 17.2 {",
          "1328: do_test 17.3 {",
          "1329:   close $fd",
          "1330: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7d9814fe4691bf75d5cb29ab9e7bea67e8159ef",
      "candidate_info": {
        "commit_hash": "e7d9814fe4691bf75d5cb29ab9e7bea67e8159ef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7d9814fe4691bf75d5cb29ab9e7bea67e8159ef",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/mkkeywordhash.c"
        ],
        "message": "Fix a potential array bounds overflow in the mkkeywordhash.c code generator. Also add marks to omit keywords specific to generated columns when building with -DSQLITE_OMIT_GENERATED_COLUMNS.\n\nFossilOrigin-Name: cc6a40818387f78f89499f09e3f1c4655c7396af1cba2596c7fb2f23f3e9755f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f12e743e19a04ecbf7eb69b675082f2e4dda05b38cd81f6588a1ce95dfc57ada",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154: #else",
          "155: #  define WINDOWFUNC 0x00100000",
          "156: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: #ifdef SQLITE_OMIT_GENERATED_COLUMNS",
          "158: #  define GENCOL 0",
          "159: #else",
          "160: #  define GENCOL 0x00200000",
          "161: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER,          0      },",
          "166:   { \"ALL\",              \"TK_ALL\",          ALWAYS,           0      },",
          "167:   { \"ALTER\",            \"TK_ALTER\",        ALTER,            0      },",
          "169:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE,          0      },",
          "170:   { \"AND\",              \"TK_AND\",          ALWAYS,           10     },",
          "171:   { \"AS\",               \"TK_AS\",           ALWAYS,           10     },",
          "",
          "[Removed Lines]",
          "168:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS,           0      },",
          "",
          "[Added Lines]",
          "173:   { \"ALWAYS\",           \"TK_ALWAYS\",       GENCOL,           0      },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY,             1      },",
          "219:   { \"FROM\",             \"TK_FROM\",         ALWAYS,           10     },",
          "220:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "222:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS,           3      },",
          "223:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS,           5      },",
          "224:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC,       2      },",
          "",
          "[Removed Lines]",
          "221:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS,           1      },",
          "",
          "[Added Lines]",
          "226:   { \"GENERATED\",        \"TK_GENERATED\",    GENCOL,           1      },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "365: static void reorder(int *pFrom){",
          "366:   int i = *pFrom - 1;",
          "368:   if( j==0 ) return;",
          "369:   j--;",
          "370:   if( aKeywordTable[i].priority >= aKeywordTable[j].priority ) return;",
          "",
          "[Removed Lines]",
          "367:   int j = aKeywordTable[i].iNext;",
          "",
          "[Added Lines]",
          "372:   int j;",
          "373:   if( i<0 ) return;",
          "374:   j = aKeywordTable[i].iNext;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75f107688588c23f0ac084d59903d2443852b8f1",
      "candidate_info": {
        "commit_hash": "75f107688588c23f0ac084d59903d2443852b8f1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/75f107688588c23f0ac084d59903d2443852b8f1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Due to the previous change, the p5 parameter to OP_VColumn no longer ever contains extraneous bits, so change a testcase() into an assert() to show as much.\n\nFossilOrigin-Name: 5b4a88cd3b3a32b1242e0eb733cc0bc4becb830a887b8e6604a4c7452050e163",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2401e04730a156aa48787b91af4e516406cb7635145e430be62fd16481816237",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7217:   assert( pModule->xColumn );",
          "7218:   memset(&sContext, 0, sizeof(sContext));",
          "7219:   sContext.pOut = pDest;",
          "7221:   if( pOp->p5 & OPFLAG_NOCHNG ){",
          "7222:     sqlite3VdbeMemSetNull(pDest);",
          "7223:     pDest->flags = MEM_Null|MEM_Zero;",
          "",
          "[Removed Lines]",
          "7220:   testcase( (pOp->p5 & OPFLAG_NOCHNG)==0 && pOp->p5!=0 );",
          "",
          "[Added Lines]",
          "7220:   assert( pOp->p5==OPFLAG_NOCHNG || pOp->p5==0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb224ab1394cc981cf85a9e5520714ca8221f38f",
      "candidate_info": {
        "commit_hash": "cb224ab1394cc981cf85a9e5520714ca8221f38f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cb224ab1394cc981cf85a9e5520714ca8221f38f",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtreeC.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Make sure the rowid of an RTREE virtual table has integer affinity. Ticket [9fe487ba3c064b4e]\n\nFossilOrigin-Name: 7ae8c0d52f6aa7f27537216f85456ef49dade040366cfb250c789206ecd4dc5a",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtreeC.test||ext/rtree/rtreeC.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3728:   pSql = sqlite3_str_new(db);",
          "3730:   for(ii=4; ii<argc; ii++){",
          "3731:     if( argv[ii][0]=='+' ){",
          "3732:       pRtree->nAux++;",
          "",
          "[Removed Lines]",
          "3729:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%s\", argv[3]);",
          "",
          "[Added Lines]",
          "3729:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%s INT\", argv[3]);",
          "",
          "---------------"
        ],
        "ext/rtree/rtreeC.test||ext/rtree/rtreeC.test": [
          "File: ext/rtree/rtreeC.test -> ext/rtree/rtreeC.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "177: #",
          "178: reset_db",
          "179: do_execsql_test 5.1 {",
          "181:   CREATE VIRTUAL TABLE rt USING rtree(id, x1, x2, +d1);",
          "183:   INSERT INTO t1(x) VALUES(1);",
          "",
          "[Removed Lines]",
          "180:   CREATE TABLE t1(x PRIMARY KEY, y);",
          "",
          "[Added Lines]",
          "180:   CREATE TABLE t1(x INT PRIMARY KEY, y);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7e5ad8e0ab7ee91a5ccb19a9654d6a036233f74d2fdc45f7315feb3d9d035fd4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}