{
  "cve_id": "CVE-2015-7551",
  "cve_desc": "The Fiddle::Handle implementation in ext/fiddle/handle.c in Ruby before 2.0.0-p648, 2.1 before 2.1.8, and 2.2 before 2.2.4, as distributed in Apple OS X before 10.11.4 and other products, mishandles tainting, which allows context-dependent attackers to execute arbitrary code or cause a denial of service (application crash) via a crafted string, related to the DL module and the libffi library.  NOTE: this vulnerability exists because of a CVE-2009-5147 regression.",
  "repo": "ruby/ruby",
  "patch_hash": "339e11a7f178312d937b7c95dd3115ce7236597a",
  "patch_info": {
    "commit_hash": "339e11a7f178312d937b7c95dd3115ce7236597a",
    "repo": "ruby/ruby",
    "commit_url": "https://github.com/ruby/ruby/commit/339e11a7f178312d937b7c95dd3115ce7236597a",
    "files": [
      "ChangeLog",
      "ext/fiddle/handle.c",
      "test/fiddle/test_handle.rb",
      "version.h"
    ],
    "message": "merge revision(s): 53153 and 23405@ruby_1_9_1\n\n\t* ext/fiddle/handle.c: check tainted string arguments.\n\t  Patch provided by tenderlove and nobu.\n\n\t* test/fiddle/test_handle.rb (class TestHandle): add test for above.\n\n\t* ext/dl/handle.c (rb_dlhandle_initialize): prohibits DL::dlopen\n\t  with a tainted name of library.\n\t  Patch by sheepman <sheepman AT sheepman.sakura.ne.jp>.\n\n\t* ext/dl/handle.c (rb_dlhandle_sym): ditto\n\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@53156 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
    "before_after_code_files": [
      "ext/fiddle/handle.c||ext/fiddle/handle.c",
      "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb",
      "version.h||version.h"
    ]
  },
  "patch_diff": {
    "ext/fiddle/handle.c||ext/fiddle/handle.c": [
      "File: ext/fiddle/handle.c -> ext/fiddle/handle.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #include <ruby.h>",
      "2: #include <fiddle.h>",
      "4: VALUE rb_cHandle;",
      "6: struct dl_handle {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: #define SafeStringValueCStr(v) (rb_check_safe_obj(rb_string_value(&v)), StringValueCStr(v))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "143:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
      "144:  break;",
      "145:       case 1:",
      "147:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
      "148:  break;",
      "149:       case 2:",
      "151:  cflag = NUM2INT(flag);",
      "152:  break;",
      "153:       default:",
      "",
      "[Removed Lines]",
      "146:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
      "150:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
      "",
      "[Added Lines]",
      "148:  clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);",
      "152:  clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "263:     return PTR2NUM(fiddle_handle);",
      "264: }",
      "",
      "[Removed Lines]",
      "266: static VALUE fiddle_handle_sym(void *handle, const char *symbol);",
      "",
      "[Added Lines]",
      "268: static VALUE fiddle_handle_sym(void *handle, VALUE symbol);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "282:  rb_raise(rb_eFiddleError, \"closed handle\");",
      "283:     }",
      "286: }",
      "288: #ifndef RTLD_NEXT",
      "",
      "[Removed Lines]",
      "285:     return fiddle_handle_sym(fiddle_handle->ptr, StringValueCStr(sym));",
      "",
      "[Added Lines]",
      "287:     return fiddle_handle_sym(fiddle_handle->ptr, sym);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "305: static VALUE",
      "306: rb_fiddle_handle_s_sym(VALUE self, VALUE sym)",
      "307: {",
      "309: }",
      "311: static VALUE",
      "313: {",
      "314: #if defined(HAVE_DLERROR)",
      "315:     const char *err;",
      "",
      "[Removed Lines]",
      "308:     return fiddle_handle_sym(RTLD_NEXT, StringValueCStr(sym));",
      "312: fiddle_handle_sym(void *handle, const char *name)",
      "",
      "[Added Lines]",
      "310:     return fiddle_handle_sym(RTLD_NEXT, sym);",
      "314: fiddle_handle_sym(void *handle, VALUE symbol)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "318: # define CHECK_DLERROR",
      "319: #endif",
      "320:     void (*func)();",
      "322:     rb_secure(2);",
      "323: #ifdef HAVE_DLERROR",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:     const char *name = SafeStringValueCStr(symbol);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "367:     }",
      "368: #endif",
      "369:     if( !func ){",
      "371:     }",
      "373:     return PTR2NUM(func);",
      "",
      "[Removed Lines]",
      "370:  rb_raise(rb_eFiddleError, \"unknown symbol \\\"%s\\\"\", name);",
      "",
      "[Added Lines]",
      "373:  rb_raise(rb_eFiddleError, \"unknown symbol \\\"%\"PRIsVALUE\"\\\"\", symbol);",
      "",
      "---------------"
    ],
    "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb": [
      "File: test/fiddle/test_handle.rb -> test/fiddle/test_handle.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:     include Test::Unit::Assertions",
      "13:     def test_to_i",
      "14:       handle = Fiddle::Handle.new(LIBC_SO)",
      "15:       assert_kind_of Integer, handle.to_i",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13:     def test_safe_handle_open",
      "14:       t = Thread.new do",
      "15:         $SAFE = 1",
      "16:         Fiddle::Handle.new(LIBC_SO.taint)",
      "17:       end",
      "18:       assert_raise(SecurityError) { t.value }",
      "19:     end",
      "21:     def test_safe_function_lookup",
      "22:       t = Thread.new do",
      "23:         h = Fiddle::Handle.new(LIBC_SO)",
      "24:         $SAFE = 1",
      "25:         h[\"qsort\".taint]",
      "26:       end",
      "27:       assert_raise(SecurityError) { t.value }",
      "28:     end",
      "",
      "---------------"
    ],
    "version.h||version.h": [
      "File: version.h -> version.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #define RUBY_VERSION \"2.1.8\"",
      "2: #define RUBY_RELEASE_DATE \"2015-12-16\"",
      "5: #define RUBY_RELEASE_YEAR 2015",
      "6: #define RUBY_RELEASE_MONTH 12",
      "",
      "[Removed Lines]",
      "3: #define RUBY_PATCHLEVEL 438",
      "",
      "[Added Lines]",
      "3: #define RUBY_PATCHLEVEL 439",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3a312317e68a8365edbd71cda5729c3d08d27bbb",
      "candidate_info": {
        "commit_hash": "3a312317e68a8365edbd71cda5729c3d08d27bbb",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/3a312317e68a8365edbd71cda5729c3d08d27bbb",
        "files": [
          "ChangeLog",
          "ext/socket/ancdata.c",
          "version.h"
        ],
        "message": "merge revision(s) 50449: [Backport #11123]\n\n\t* ext/socket/ancdata.c (bsock_recvmsg_internal): GC guard\n\t  [Bug #11123]\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@50584 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "ext/socket/ancdata.c||ext/socket/ancdata.c",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/socket/ancdata.c||ext/socket/ancdata.c": [
          "File: ext/socket/ancdata.c -> ext/socket/ancdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1705:                 discard_cmsg(cmh, msg_end, (flags & MSG_PEEK) != 0);",
          "1706:             rb_ary_push(ret, ctl);",
          "1707:         }",
          "1708:     }",
          "1709: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1708:         RB_GC_GUARD(ctl_str);",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.7\"",
          "2: #define RUBY_RELEASE_DATE \"2015-05-21\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 5",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 356",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 357",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2703953ca6763176932dee45674f59f76db22262",
      "candidate_info": {
        "commit_hash": "2703953ca6763176932dee45674f59f76db22262",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/2703953ca6763176932dee45674f59f76db22262",
        "files": [
          "ChangeLog",
          "include/ruby/ruby.h",
          "internal.h",
          "string.c",
          "test/ruby/test_econv.rb",
          "test/ruby/test_m17n.rb",
          "transcode.c",
          "version.h"
        ],
        "message": "merge revision(s) 49096,51353,53168,53169: [Backport #11834]\n\n\ttest_m17n.rb: split test_scrub\n\n\t* test/ruby/test_m17n.rb (TestM17N#test_scrub): split into some\n  tests.\n\t* include/ruby/ruby.h: add raw FL macros, which assume always the\n\t  argument object is not a special constant.\n\n\t* internal.h (STR_EMBED_P, STR_SHARED_P): valid only for T_STRING.\n\n\t* string.c: deal with taint flags directly across String instances.\n\n\t* transcode.c (rb_econv_substr_append, econv_primitive_convert):\n\t  the result should be infected by the original string.\n\n\t* string.c (rb_str_scrub): the result should be infected by the\n\t  original string.\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@54260 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "include/ruby/ruby.h||include/ruby/ruby.h",
          "internal.h||internal.h",
          "string.c||string.c",
          "test/ruby/test_econv.rb||test/ruby/test_econv.rb",
          "test/ruby/test_m17n.rb||test/ruby/test_m17n.rb",
          "transcode.c||transcode.c",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "include/ruby/ruby.h||include/ruby/ruby.h": [
          "File: include/ruby/ruby.h -> include/ruby/ruby.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1167: #define FL_ABLE(x) (!SPECIAL_CONST_P(x) && BUILTIN_TYPE(x) != T_NODE)",
          "1168: #define FL_TEST_RAW(x,f) (RBASIC(x)->flags&(f))",
          "1169: #define FL_TEST(x,f) (FL_ABLE(x)?FL_TEST_RAW((x),(f)):0)",
          "1170: #define FL_ANY(x,f) FL_TEST((x),(f))",
          "1171: #define FL_ALL(x,f) (FL_TEST((x),(f)) == (f))",
          "1176: #define OBJ_TAINTED(x) (!!FL_TEST((x), FL_TAINT))",
          "1177: #define OBJ_TAINT(x) FL_SET((x), FL_TAINT)",
          "1178: #define OBJ_UNTRUSTED(x) OBJ_TAINTED(x)",
          "1179: #define OBJ_UNTRUST(x) OBJ_TAINT(x)",
          "1180: #define OBJ_INFECT(x,s) do { \\",
          "1181:   if (FL_ABLE(x) && FL_ABLE(s)) \\",
          "1183: } while (0)",
          "1185: #define OBJ_FROZEN(x) (!!(FL_ABLE(x)?(RBASIC(x)->flags&(FL_FREEZE)):(FIXNUM_P(x)||FLONUM_P(x)||SYMBOL_P(x))))",
          "",
          "[Removed Lines]",
          "1172: #define FL_SET(x,f) do {if (FL_ABLE(x)) RBASIC(x)->flags |= (f);} while (0)",
          "1173: #define FL_UNSET(x,f) do {if (FL_ABLE(x)) RBASIC(x)->flags &= ~(f);} while (0)",
          "1174: #define FL_REVERSE(x,f) do {if (FL_ABLE(x)) RBASIC(x)->flags ^= (f);} while (0)",
          "1182:     RBASIC(x)->flags |= RBASIC(s)->flags & FL_TAINT; \\",
          "",
          "[Added Lines]",
          "1170: #define FL_ANY_RAW(x,f) FL_TEST_RAW((x),(f))",
          "1172: #define FL_ALL_RAW(x,f) (FL_TEST_RAW((x),(f)) == (f))",
          "1174: #define FL_SET_RAW(x,f) (RBASIC(x)->flags |= (f))",
          "1175: #define FL_SET(x,f) (FL_ABLE(x) ? FL_SET_RAW(x, f) : 0)",
          "1176: #define FL_UNSET_RAW(x,f) (RBASIC(x)->flags &= ~(f))",
          "1177: #define FL_UNSET(x,f) (FL_ABLE(x) ? FL_UNSET_RAW(x, f) : 0)",
          "1178: #define FL_REVERSE_RAW(x,f) (RBASIC(x)->flags ^= (f))",
          "1179: #define FL_REVERSE(x,f) (FL_ABLE(x) ? FL_REVERSE_RAW(x, f) : 0)",
          "1181: #define OBJ_TAINTED_RAW(x) FL_TEST_RAW(x, FL_TAINT)",
          "1183: #define OBJ_TAINT_RAW(x) FL_SET_RAW(x, FL_TAINT)",
          "1187: #define OBJ_INFECT_RAW(x,s) FL_SET_RAW(x, OBJ_TAINTED_RAW(s))",
          "1190:     FL_SET_RAW(x, OBJ_TAINTED_RAW(s)); \\",
          "",
          "---------------"
        ],
        "internal.h||internal.h": [
          "File: internal.h -> internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "724: #define STR_NOEMBED FL_USER1",
          "726: #define STR_ASSOC   FL_USER3",
          "729: #define STR_NOCAPA  (STR_NOEMBED|ELTS_SHARED|STR_ASSOC)",
          "732: #define is_ascii_string(str) (rb_enc_str_coderange(str) == ENC_CODERANGE_7BIT)",
          "733: #define is_broken_string(str) (rb_enc_str_coderange(str) == ENC_CODERANGE_BROKEN)",
          "",
          "[Removed Lines]",
          "727: #define STR_SHARED_P(s) FL_ALL((s), STR_NOEMBED|ELTS_SHARED)",
          "728: #define STR_ASSOC_P(s)  FL_ALL((s), STR_NOEMBED|STR_ASSOC)",
          "730: #define STR_NOCAPA_P(s) (FL_TEST((s),STR_NOEMBED) && FL_ANY((s),ELTS_SHARED|STR_ASSOC))",
          "731: #define STR_EMBED_P(str) (!FL_TEST((str), STR_NOEMBED))",
          "",
          "[Added Lines]",
          "727: #define STR_SHARED_P(s) FL_ALL_RAW((s), STR_NOEMBED|ELTS_SHARED)",
          "728: #define STR_ASSOC_P(s)  FL_ALL_RAW((s), STR_NOEMBED|STR_ASSOC)",
          "730: #define STR_NOCAPA_P(s) (FL_TEST_RAW((s),STR_NOEMBED) && FL_ANY_RAW((s),ELTS_SHARED|STR_ASSOC))",
          "731: #define STR_EMBED_P(str) (!FL_TEST_RAW((str), STR_NOEMBED))",
          "",
          "---------------"
        ],
        "string.c||string.c": [
          "File: string.c -> string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1018:     str = rb_funcall(obj, id_to_s, 0);",
          "1019:     if (!RB_TYPE_P(str, T_STRING))",
          "1020:  return rb_any_to_s(obj);",
          "1022:     return str;",
          "1023: }",
          "",
          "[Removed Lines]",
          "1021:     if (OBJ_TAINTED(obj)) OBJ_TAINT(str);",
          "",
          "[Added Lines]",
          "1021:     OBJ_INFECT(str, obj);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1362:     RSTRING_PTR(str2), RSTRING_LEN(str2));",
          "1363:     RSTRING_PTR(str3)[RSTRING_LEN(str3)] = '\\0';",
          "1367:     ENCODING_CODERANGE_SET(str3, rb_enc_to_index(enc),",
          "1368:       ENC_CODERANGE_AND(ENC_CODERANGE(str1), ENC_CODERANGE(str2)));",
          "1369:     return str3;",
          "",
          "[Removed Lines]",
          "1365:     if (OBJ_TAINTED(str1) || OBJ_TAINTED(str2))",
          "1366:  OBJ_TAINT(str3);",
          "",
          "[Added Lines]",
          "1365:     FL_SET_RAW(str3, OBJ_TAINTED_RAW(str1) | OBJ_TAINTED_RAW(str2));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3992:  if (NIL_P(hash)) {",
          "3993:      StringValue(repl);",
          "3994:  }",
          "3996:     }",
          "3998:     pat = get_pat(argv[0], 1);",
          "",
          "[Removed Lines]",
          "3995:  if (OBJ_TAINTED(repl)) tainted = 1;",
          "",
          "[Added Lines]",
          "3994:  tainted = OBJ_TAINTED_RAW(repl);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4037:         }",
          "4038:  rb_str_modify(str);",
          "4039:  rb_enc_associate(str, enc);",
          "4041:  if (ENC_CODERANGE_UNKNOWN < cr && cr < ENC_CODERANGE_BROKEN) {",
          "4042:      int cr2 = ENC_CODERANGE(repl);",
          "4043:             if (cr2 == ENC_CODERANGE_BROKEN ||",
          "",
          "[Removed Lines]",
          "4040:  if (OBJ_TAINTED(repl)) tainted = 1;",
          "",
          "[Added Lines]",
          "4039:  tainted |= OBJ_TAINTED_RAW(repl);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4061:  STR_SET_LEN(str, len);",
          "4062:  RSTRING_PTR(str)[len] = '\\0';",
          "4063:  ENC_CODERANGE_SET(str, cr);",
          "4066:  return str;",
          "4067:     }",
          "",
          "[Removed Lines]",
          "4064:  if (tainted) OBJ_TAINT(str);",
          "",
          "[Added Lines]",
          "4063:  FL_SET_RAW(str, tainted);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4143:  if (NIL_P(hash)) {",
          "4144:      StringValue(repl);",
          "4145:  }",
          "4147:  break;",
          "4148:       default:",
          "4149:  rb_check_arity(argc, 1, 2);",
          "",
          "[Removed Lines]",
          "4146:  if (OBJ_TAINTED(repl)) tainted = 1;",
          "",
          "[Added Lines]",
          "4145:  tainted = OBJ_TAINTED_RAW(repl);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4190:      val = rb_reg_regsub(repl, str, regs, pat);",
          "4191:  }",
          "4196:         if (len) {",
          "",
          "[Removed Lines]",
          "4193:  if (OBJ_TAINTED(val)) tainted = 1;",
          "",
          "[Added Lines]",
          "4192:  tainted |= OBJ_TAINTED_RAW(val);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4224:     }",
          "4225:     else {",
          "4226:  RBASIC_SET_CLASS(dest, rb_obj_class(str));",
          "4228:  str = dest;",
          "4229:     }",
          "4232:     return str;",
          "4233: }",
          "",
          "[Removed Lines]",
          "4227:  OBJ_INFECT(dest, str);",
          "4231:     if (tainted) OBJ_TAINT(str);",
          "",
          "[Added Lines]",
          "4226:  tainted |= OBJ_TAINTED_RAW(str);",
          "4230:     FL_SET_RAW(str, tainted);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4457:  }",
          "4458:     }",
          "4462:     return str2;",
          "4463: }",
          "",
          "[Removed Lines]",
          "4460:     OBJ_INFECT(str2, str);",
          "",
          "[Added Lines]",
          "4459:     OBJ_INFECT_RAW(str2, str);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4582:  }",
          "4583:     }",
          "4584:     STR_SET_LEN(rev, RSTRING_LEN(str));",
          "4586:     str_enc_copy(rev, str);",
          "4587:     ENC_CODERANGE_SET(rev, cr);",
          "",
          "[Removed Lines]",
          "4585:     OBJ_INFECT(rev, str);",
          "",
          "[Added Lines]",
          "4584:     OBJ_INFECT_RAW(rev, str);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4877:     if (p > prev) str_buf_cat(result, prev, p - prev);",
          "4878:     str_buf_cat2(result, \"\\\"\");",
          "4881:     return result;",
          "4882: }",
          "",
          "[Removed Lines]",
          "4880:     OBJ_INFECT(result, str);",
          "",
          "[Added Lines]",
          "4879:     OBJ_INFECT_RAW(result, str);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5017:  snprintf(q, qend-q, \".force_encoding(\\\"%s\\\")\", enc->name);",
          "5018:  enc = rb_ascii8bit_encoding();",
          "5019:     }",
          "5022:     rb_enc_associate(result, enc);",
          "5023:     ENC_CODERANGE_SET(result, ENC_CODERANGE_7BIT);",
          "",
          "[Removed Lines]",
          "5020:     OBJ_INFECT(result, str);",
          "",
          "[Added Lines]",
          "5019:     OBJ_INFECT_RAW(result, str);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7433:  rb_sys_fail(\"crypt\");",
          "7434:     }",
          "7435:     result = rb_str_new2(res);",
          "7438:     return result;",
          "7439: }",
          "",
          "[Removed Lines]",
          "7436:     OBJ_INFECT(result, str);",
          "7437:     OBJ_INFECT(result, salt);",
          "",
          "[Added Lines]",
          "7435:     FL_SET_RAW(result, OBJ_TAINTED_RAW(str) | OBJ_TAINTED_RAW(salt));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7636:     }",
          "7638:     STR_SET_LEN(res, p-RSTRING_PTR(res));",
          "7641:     rb_enc_associate(res, enc);",
          "7642:     if (argc == 2)",
          "7643:  cr = ENC_CODERANGE_AND(cr, ENC_CODERANGE(pad));",
          "",
          "[Removed Lines]",
          "7639:     OBJ_INFECT(res, str);",
          "7640:     if (!NIL_P(pad)) OBJ_INFECT(res, pad);",
          "",
          "[Added Lines]",
          "7637:     OBJ_INFECT_RAW(res, str);",
          "7638:     if (!NIL_P(pad)) OBJ_INFECT_RAW(res, pad);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "7905: {",
          "7906:     VALUE str2 = str_alloc(rb_cString);",
          "7907:     str_replace_shared_without_enc(str2, str);",
          "7909:     ENC_CODERANGE_CLEAR(str2);",
          "7910:     return str2;",
          "7911: }",
          "",
          "[Removed Lines]",
          "7908:     OBJ_INFECT(str2, str);",
          "",
          "[Added Lines]",
          "7906:     OBJ_INFECT_RAW(str2, str);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8035:     int cr = ENC_CODERANGE(str);",
          "8036:     rb_encoding *enc;",
          "8037:     int encidx;",
          "8039:     if (cr == ENC_CODERANGE_7BIT || cr == ENC_CODERANGE_VALID)",
          "8040:  return Qnil;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8036:     VALUE buf = Qnil;",
          "8037:     const char *rep;",
          "8038:     long replen;",
          "8039:     int tainted = 0;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8042:     enc = STR_ENC_GET(str);",
          "8043:     if (!NIL_P(repl)) {",
          "8044:  repl = str_compat_and_valid(repl, enc);",
          "8045:     }",
          "8047:     if (rb_enc_dummy_p(enc)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8047:  tainted = OBJ_TAINTED_RAW(repl);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "8058:  const char *p = RSTRING_PTR(str);",
          "8059:  const char *e = RSTRING_END(str);",
          "8060:  const char *p1 = p;",
          "8063:  int rep7bit_p;",
          "8065:  if (rb_block_given_p()) {",
          "8066:      rep = NULL;",
          "8067:      replen = 0;",
          "",
          "[Removed Lines]",
          "8061:  const char *rep;",
          "8062:  long replen;",
          "8064:  VALUE buf = Qnil;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "8127:   else {",
          "8128:       repl = rb_yield(rb_enc_str_new(p, clen, enc));",
          "8129:       repl = str_compat_and_valid(repl, enc);",
          "8130:       rb_str_buf_cat(buf, RSTRING_PTR(repl), RSTRING_LEN(repl));",
          "8131:       if (ENC_CODERANGE(repl) == ENC_CODERANGE_VALID)",
          "8132:    cr = ENC_CODERANGE_VALID;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8130:       tainted |= OBJ_TAINTED_RAW(repl);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "8161:      else {",
          "8162:   repl = rb_yield(rb_enc_str_new(p, e-p, enc));",
          "8163:   repl = str_compat_and_valid(repl, enc);",
          "8164:   rb_str_buf_cat(buf, RSTRING_PTR(repl), RSTRING_LEN(repl));",
          "8165:   if (ENC_CODERANGE(repl) == ENC_CODERANGE_VALID)",
          "8166:       cr = ENC_CODERANGE_VALID;",
          "8167:      }",
          "8168:  }",
          "8171:     }",
          "8172:     else {",
          "8174:  const char *p = RSTRING_PTR(str);",
          "8175:  const char *e = RSTRING_END(str);",
          "8176:  const char *p1 = p;",
          "8180:  long mbminlen = rb_enc_mbminlen(enc);",
          "8181:  if (!NIL_P(repl)) {",
          "8182:      rep = RSTRING_PTR(repl);",
          "",
          "[Removed Lines]",
          "8169:  ENCODING_CODERANGE_SET(buf, rb_enc_to_index(enc), cr);",
          "8170:  return buf;",
          "8177:  VALUE buf = Qnil;",
          "8178:  const char *rep;",
          "8179:  long replen;",
          "",
          "[Added Lines]",
          "8165:   tainted |= OBJ_TAINTED_RAW(repl);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "8231:   else {",
          "8232:       repl = rb_yield(rb_enc_str_new(p, e-p, enc));",
          "8233:       repl = str_compat_and_valid(repl, enc);",
          "8234:       rb_str_buf_cat(buf, RSTRING_PTR(repl), RSTRING_LEN(repl));",
          "8235:   }",
          "8236:   p += clen;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8231:       tainted |= OBJ_TAINTED_RAW(repl);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "8257:      else {",
          "8258:   repl = rb_yield(rb_enc_str_new(p, e-p, enc));",
          "8259:   repl = str_compat_and_valid(repl, enc);",
          "8260:   rb_str_buf_cat(buf, RSTRING_PTR(repl), RSTRING_LEN(repl));",
          "8261:      }",
          "8262:  }",
          "8265:     }",
          "8266: }",
          "",
          "[Removed Lines]",
          "8263:  ENCODING_CODERANGE_SET(buf, rb_enc_to_index(enc), ENC_CODERANGE_VALID);",
          "8264:  return buf;",
          "",
          "[Added Lines]",
          "8258:   tainted |= OBJ_TAINTED_RAW(repl);",
          "8262:  cr = ENC_CODERANGE_VALID;",
          "8264:     FL_SET_RAW(buf, tainted|OBJ_TAINTED_RAW(str));",
          "8265:     ENCODING_CODERANGE_SET(buf, rb_enc_to_index(enc), cr);",
          "8266:     return buf;",
          "",
          "---------------"
        ],
        "test/ruby/test_econv.rb||test/ruby/test_econv.rb": [
          "File: test/ruby/test_econv.rb -> test/ruby/test_econv.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "684:     ec = Encoding::Converter.new(\"utf-8\", \"euc-jp\")",
          "685:     assert_raise(Encoding::InvalidByteSequenceError) { ec.convert(\"a\\x80\") }",
          "686:     assert_raise(Encoding::UndefinedConversionError) { ec.convert(\"\\ufffd\") }",
          "687:     ret = ec.primitive_convert(nil, \"\", nil, nil)",
          "688:     assert_equal(:finished, ret)",
          "689:     assert_raise(ArgumentError) { ec.convert(\"a\") }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "687:     assert_predicate(ec.convert(\"abc\".taint), :tainted?)",
          "",
          "---------------"
        ],
        "test/ruby/test_m17n.rb||test/ruby/test_m17n.rb": [
          "File: test/ruby/test_m17n.rb -> test/ruby/test_m17n.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1519:     assert_equal(a(\"\\xE3\\x81\\x82\"), s.b)",
          "1520:     assert_equal(Encoding::ASCII_8BIT, s.b.encoding)",
          "1521:     s.taint",
          "1523:     s = \"abc\".b",
          "1525:   end",
          "1528:     str = \"\\u3042\\u3044\"",
          "1529:     assert_not_same(str, str.scrub)",
          "1530:     str.force_encoding(Encoding::ISO_2022_JP) # dummy encoding",
          "1531:     assert_not_same(str, str.scrub)",
          "1532:     assert_nothing_raised(ArgumentError) {str.scrub(nil)}",
          "1534:     assert_equal(\"\\uFFFD\\uFFFD\\uFFFD\", u(\"\\x80\\x80\\x80\").scrub)",
          "1535:     assert_equal(\"\\uFFFDA\", u(\"\\xF4\\x80\\x80A\").scrub)",
          "1537:     # examples in Unicode 6.1.0 D93b",
          "1538:     assert_equal(\"\\x41\\uFFFD\\uFFFD\\x41\\uFFFD\\x41\",",
          "",
          "[Removed Lines]",
          "1522:     assert_equal(true, s.b.tainted?)",
          "1524:     assert_equal(true, s.b.ascii_only?)",
          "1527:   def test_scrub",
          "",
          "[Added Lines]",
          "1522:     assert_predicate(s.b, :tainted?)",
          "1524:     assert_predicate(s.b, :ascii_only?)",
          "1527:   def test_scrub_valid_string",
          "1528:     str = \"foo\"",
          "1529:     assert_equal(str, str.scrub)",
          "1530:     assert_not_same(str, str.scrub)",
          "1531:     assert_predicate(str.dup.taint.scrub, :tainted?)",
          "1533:     assert_equal(str, str.scrub)",
          "1535:     assert_predicate(str.dup.taint.scrub, :tainted?)",
          "1537:     assert_equal(str, str.scrub)",
          "1540:     assert_predicate(str.dup.taint.scrub, :tainted?)",
          "1541:   end",
          "1543:   def test_scrub_replace_default",
          "1546:     assert_predicate(u(\"\\x80\\x80\\x80\").taint.scrub, :tainted?)",
          "1547:     assert_predicate(u(\"\\xF4\\x80\\x80A\").taint.scrub, :tainted?)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1543:                  u(\"\\x61\\xF1\\x80\\x80\\xE1\\x80\\xC2\\x62\\x80\\x63\\x80\\xBF\\x64\").scrub)",
          "1544:     assert_equal(\"abcdefghijklmnopqrstuvwxyz\\u0061\\uFFFD\\uFFFD\\uFFFD\\u0062\\uFFFD\\u0063\\uFFFD\\uFFFD\\u0064\",",
          "1545:                  u(\"abcdefghijklmnopqrstuvwxyz\\x61\\xF1\\x80\\x80\\xE1\\x80\\xC2\\x62\\x80\\x63\\x80\\xBF\\x64\").scrub)",
          "1547:     assert_equal(\"\\u3042\\u3013\", u(\"\\xE3\\x81\\x82\\xE3\\x81\").scrub(\"\\u3013\"))",
          "1548:     assert_raise(Encoding::CompatibilityError){ u(\"\\xE3\\x81\\x82\\xE3\\x81\").scrub(e(\"\\xA4\\xA2\")) }",
          "1549:     assert_raise(TypeError){ u(\"\\xE3\\x81\\x82\\xE3\\x81\").scrub(1) }",
          "1550:     assert_raise(ArgumentError){ u(\"\\xE3\\x81\\x82\\xE3\\x81\\x82\\xE3\\x81\").scrub(u(\"\\x81\")) }",
          "1551:     assert_equal(e(\"\\xA4\\xA2\\xA2\\xAE\"), e(\"\\xA4\\xA2\\xA4\").scrub(e(\"\\xA2\\xAE\")))",
          "1553:     assert_equal(\"\\u3042<e381>\", u(\"\\xE3\\x81\\x82\\xE3\\x81\").scrub{|x|'<'+x.unpack('H*')[0]+'>'})",
          "1554:     assert_raise(Encoding::CompatibilityError){ u(\"\\xE3\\x81\\x82\\xE3\\x81\").scrub{e(\"\\xA4\\xA2\")} }",
          "1555:     assert_raise(TypeError){ u(\"\\xE3\\x81\\x82\\xE3\\x81\").scrub{1} }",
          "1556:     assert_raise(ArgumentError){ u(\"\\xE3\\x81\\x82\\xE3\\x81\\x82\\xE3\\x81\").scrub{u(\"\\x81\")} }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1558:   end",
          "1560:   def test_scrub_replace_argument",
          "1561:     assert_equal(\"foo\", u(\"foo\").scrub(\"\\u3013\"))",
          "1562:     assert_predicate(u(\"foo\").taint.scrub(\"\\u3013\"), :tainted?)",
          "1563:     assert_not_predicate(u(\"foo\").scrub(\"\\u3013\".taint), :tainted?)",
          "1564:     assert_equal(\"\\u3042\\u3044\", u(\"\\xE3\\x81\\x82\\xE3\\x81\\x84\").scrub(\"\\u3013\"))",
          "1565:     assert_predicate(u(\"\\xE3\\x81\\x82\\xE3\\x81\\x84\").taint.scrub(\"\\u3013\"), :tainted?)",
          "1566:     assert_not_predicate(u(\"\\xE3\\x81\\x82\\xE3\\x81\\x84\").scrub(\"\\u3013\".taint), :tainted?)",
          "1568:     assert_predicate(u(\"\\xE3\\x81\\x82\\xE3\\x81\").taint.scrub(\"\\u3013\"), :tainted?)",
          "1569:     assert_predicate(u(\"\\xE3\\x81\\x82\\xE3\\x81\").scrub(\"\\u3013\".taint), :tainted?)",
          "1574:   end",
          "1576:   def test_scrub_replace_block",
          "1578:     assert_predicate(u(\"\\xE3\\x81\\x82\\xE3\\x81\").taint.scrub{|x|'<'+x.unpack('H*')[0]+'>'}, :tainted?)",
          "1579:     assert_predicate(u(\"\\xE3\\x81\\x82\\xE3\\x81\").scrub{|x|('<'+x.unpack('H*')[0]+'>').taint}, :tainted?)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1559:     assert_equal(u(\"\\x81\"), u(\"a\\x81\").scrub {|c| break c})",
          "1560:     assert_raise(ArgumentError) {u(\"a\\x81\").scrub {|c| c}}",
          "1562:     assert_equal(\"\\uFFFD\\u3042\".encode(\"UTF-16BE\"),",
          "1563:                  \"\\xD8\\x00\\x30\\x42\".force_encoding(Encoding::UTF_16BE).",
          "1564:                  scrub)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1587:   end",
          "1589:   def test_scrub_widechar",
          "",
          "---------------"
        ],
        "transcode.c||transcode.c": [
          "File: transcode.c -> transcode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1856:     src = rb_str_new_frozen(src);",
          "1857:     dst = rb_econv_append(ec, RSTRING_PTR(src) + off, len, dst, flags);",
          "1858:     RB_GC_GUARD(src);",
          "1859:     return dst;",
          "1860: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1859:     OBJ_INFECT_RAW(dst, src);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3771:     res = rb_econv_convert(ec, &ip, is, &op, os, flags);",
          "3772:     rb_str_set_len(output, op-(unsigned char *)RSTRING_PTR(output));",
          "3774:         rb_str_drop_bytes(input, ip - (unsigned char *)RSTRING_PTR(input));",
          "3776:     if (NIL_P(output_bytesize_v) && res == econv_destination_buffer_full) {",
          "3777:         if (LONG_MAX / 2 < output_bytesize)",
          "",
          "[Removed Lines]",
          "3773:     if (!NIL_P(input))",
          "",
          "[Added Lines]",
          "3774:     if (!NIL_P(input)) {",
          "3775:         OBJ_INFECT_RAW(output, input);",
          "3777:     }",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.9\"",
          "5: #define RUBY_RELEASE_YEAR 2016",
          "7: #define RUBY_RELEASE_DAY 25",
          "9: #include \"ruby/version.h\"",
          "",
          "[Removed Lines]",
          "2: #define RUBY_RELEASE_DATE \"2016-02-25\"",
          "3: #define RUBY_PATCHLEVEL 457",
          "6: #define RUBY_RELEASE_MONTH 2",
          "",
          "[Added Lines]",
          "2: #define RUBY_RELEASE_DATE \"2016-03-25\"",
          "3: #define RUBY_PATCHLEVEL 458",
          "6: #define RUBY_RELEASE_MONTH 3",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "813b5f43cb44a64a7630bc3858e85caa607f8105",
      "candidate_info": {
        "commit_hash": "813b5f43cb44a64a7630bc3858e85caa607f8105",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/813b5f43cb44a64a7630bc3858e85caa607f8105",
        "files": [
          "ChangeLog",
          "io.c",
          "test/ruby/test_io.rb",
          "version.h"
        ],
        "message": "merge revision(s) 51066: [Backport #11319]\n\n\t* io.c (rb_io_oflags_modestr): handle O_TRUNC correctly\n\n\t* test/ruby/test_io.rb (test_reopen_stdio): new test\n\t  Patch-by: cremno phobia <cremno@mail.ru>\n\t  [ruby-core:69779] [Bug #11319]\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@51611 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "io.c||io.c",
          "test/ruby/test_io.rb||test/ruby/test_io.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "io.c||io.c": [
          "File: io.c -> io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4958:       case O_WRONLY:",
          "4959:  return MODE_BINARY(\"w\", \"wb\");",
          "4960:       case O_RDWR:",
          "4961:  return MODE_BINARY(\"r+\", \"rb+\");",
          "4962:     }",
          "4963: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4961:  if (oflags & O_TRUNC) {",
          "4962:      return MODE_BINARY(\"w+\", \"wb+\");",
          "4963:  }",
          "",
          "---------------"
        ],
        "test/ruby/test_io.rb||test/ruby/test_io.rb": [
          "File: test/ruby/test_io.rb -> test/ruby/test_io.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1979:     }",
          "1980:   end",
          "1982:   def test_reopen_mode",
          "1983:     feature7067 = '[ruby-core:47694]'",
          "1984:     make_tempfile {|t|",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1982:   def test_reopen_stdio",
          "1983:     mkcdtmpdir {",
          "1984:       fname = 'bug11319'",
          "1985:       File.write(fname, 'hello')",
          "1986:       system(EnvUtil.rubybin, '-e', \"STDOUT.reopen('#{fname}', 'w+')\")",
          "1987:       assert_equal('', File.read(fname))",
          "1988:     }",
          "1989:   end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.7\"",
          "2: #define RUBY_RELEASE_DATE \"2015-08-17\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 8",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 393",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 394",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09298fae6be8fa486c67db4b830a6ca27c9b7c2d",
      "candidate_info": {
        "commit_hash": "09298fae6be8fa486c67db4b830a6ca27c9b7c2d",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/09298fae6be8fa486c67db4b830a6ca27c9b7c2d",
        "files": [
          "ChangeLog",
          "test/gdbm/test_gdbm.rb",
          "version.h"
        ],
        "message": "merge revision(s) 51930: [Backport #12149]\n\n\t* test/gdbm/test_gdbm.rb (TestGDBM#test_s_open_lock): skip\n\t  this test on AIX. The issue is the same as on Solaris.\n\t  [ruby-dev:47631]\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@54265 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "test/gdbm/test_gdbm.rb||test/gdbm/test_gdbm.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "test/gdbm/test_gdbm.rb||test/gdbm/test_gdbm.rb": [
          "File: test/gdbm/test_gdbm.rb -> test/gdbm/test_gdbm.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:     end",
          "153:     def test_s_open_lock",
          "156:       dbname = \"#{@tmpdir}/#{@prefix}\"",
          "",
          "[Removed Lines]",
          "154:       skip \"GDBM.open would block when opening already locked gdbm file on platforms without flock and with lockf\" if /solaris/ =~ RUBY_PLATFORM",
          "",
          "[Added Lines]",
          "154:       skip \"GDBM.open would block when opening already locked gdbm file on platforms without flock and with lockf\" if /solaris|aix/ =~ RUBY_PLATFORM",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.9\"",
          "2: #define RUBY_RELEASE_DATE \"2016-03-25\"",
          "5: #define RUBY_RELEASE_YEAR 2016",
          "6: #define RUBY_RELEASE_MONTH 3",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 462",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 463",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2126a678c1b2b3f972872778f267c9461ffc771",
      "candidate_info": {
        "commit_hash": "a2126a678c1b2b3f972872778f267c9461ffc771",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/a2126a678c1b2b3f972872778f267c9461ffc771",
        "files": [
          "ChangeLog",
          "string.c",
          "version.h"
        ],
        "message": "merge revision(s) 50509: [Backport #11132]\n\n\t* string.c: added documentation for character sequence \\' with String#sub\n\t  [Bug #11132][ruby-core:69121][fix GH-900][ci skip] Patch by @shishir127\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@50582 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "string.c||string.c",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "string.c||string.c": [
          "File: string.c -> string.c"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.7\"",
          "2: #define RUBY_RELEASE_DATE \"2015-05-21\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 5",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 354",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 355",
          "",
          "---------------"
        ]
      }
    }
  ]
}