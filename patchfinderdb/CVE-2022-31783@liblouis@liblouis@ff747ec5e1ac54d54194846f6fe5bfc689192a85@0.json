{
  "cve_id": "CVE-2022-31783",
  "cve_desc": "Liblouis 3.21.0 has an out-of-bounds write in compileRule in compileTranslationTable.c, as demonstrated by lou_trace.",
  "repo": "liblouis/liblouis",
  "patch_hash": "ff747ec5e1ac54d54194846f6fe5bfc689192a85",
  "patch_info": {
    "commit_hash": "ff747ec5e1ac54d54194846f6fe5bfc689192a85",
    "repo": "liblouis/liblouis",
    "commit_url": "https://github.com/liblouis/liblouis/commit/ff747ec5e1ac54d54194846f6fe5bfc689192a85",
    "files": [
      "liblouis/compileTranslationTable.c"
    ],
    "message": "Prevent an invalid memory writes in compileRule\n\nThanks to Han Zheng for reporting it\n\nFixes #1214",
    "before_after_code_files": [
      "liblouis/compileTranslationTable.c||liblouis/compileTranslationTable.c"
    ]
  },
  "patch_diff": {
    "liblouis/compileTranslationTable.c||liblouis/compileTranslationTable.c": [
      "File: liblouis/compileTranslationTable.c -> liblouis/compileTranslationTable.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3737:   case CTO_SeqAfterExpression:",
      "3738:    if (!getRuleCharsText(file, &ruleChars)) return 0;",
      "3745:    return 1;",
      "3747:   case CTO_CapsModeChars:",
      "",
      "[Removed Lines]",
      "3739:    for ((*table)->seqAfterExpressionLength = 0;",
      "3740:      (*table)->seqAfterExpressionLength < ruleChars.length;",
      "3741:      (*table)->seqAfterExpressionLength++)",
      "3742:     (*table)->seqAfterExpression[(*table)->seqAfterExpressionLength] =",
      "3743:       ruleChars.chars[(*table)->seqAfterExpressionLength];",
      "3744:    (*table)->seqAfterExpression[(*table)->seqAfterExpressionLength] = 0;",
      "",
      "[Added Lines]",
      "3739:    if ((ruleChars.length + 1) > SEQPATTERNSIZE) {",
      "3740:     compileError(file, \"More than %d characters\", SEQPATTERNSIZE);",
      "3741:     return 0;",
      "3742:    }",
      "3743:    for (int k = 0; k < ruleChars.length; k++)",
      "3744:     (*table)->seqAfterExpression[k] = ruleChars.chars[k];",
      "3745:    (*table)->seqAfterExpression[ruleChars.length] = 0;",
      "3746:    (*table)->seqAfterExpressionLength = ruleChars.length;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2e4772befb2b1c37cb4b9d6572945115ee28630a",
      "candidate_info": {
        "commit_hash": "2e4772befb2b1c37cb4b9d6572945115ee28630a",
        "repo": "liblouis/liblouis",
        "commit_url": "https://github.com/liblouis/liblouis/commit/2e4772befb2b1c37cb4b9d6572945115ee28630a",
        "files": [
          "liblouis/compileTranslationTable.c"
        ],
        "message": "Prevent an invalid memory writes in compileRule\n\nThanks to Han Zheng for reporting it\n\nFixes #1214",
        "before_after_code_files": [
          "liblouis/compileTranslationTable.c||liblouis/compileTranslationTable.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "liblouis/compileTranslationTable.c||liblouis/compileTranslationTable.c"
          ],
          "candidate": [
            "liblouis/compileTranslationTable.c||liblouis/compileTranslationTable.c"
          ]
        }
      },
      "candidate_diff": {
        "liblouis/compileTranslationTable.c||liblouis/compileTranslationTable.c": [
          "File: liblouis/compileTranslationTable.c -> liblouis/compileTranslationTable.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3822:   case CTO_SeqAfterExpression:",
          "3823:    if (!getRuleCharsText(file, &ruleChars)) return 0;",
          "3830:    return 1;",
          "3832:   case CTO_CapsModeChars:",
          "",
          "[Removed Lines]",
          "3824:    for ((*table)->seqAfterExpressionLength = 0;",
          "3825:      (*table)->seqAfterExpressionLength < ruleChars.length;",
          "3826:      (*table)->seqAfterExpressionLength++)",
          "3827:     (*table)->seqAfterExpression[(*table)->seqAfterExpressionLength] =",
          "3828:       ruleChars.chars[(*table)->seqAfterExpressionLength];",
          "3829:    (*table)->seqAfterExpression[(*table)->seqAfterExpressionLength] = 0;",
          "",
          "[Added Lines]",
          "3824:    if ((ruleChars.length + 1) > SEQPATTERNSIZE) {",
          "3825:     compileError(file, \"More than %d characters\", SEQPATTERNSIZE);",
          "3826:     return 0;",
          "3827:    }",
          "3828:    for (int k = 0; k < ruleChars.length; k++)",
          "3829:     (*table)->seqAfterExpression[k] = ruleChars.chars[k];",
          "3830:    (*table)->seqAfterExpression[ruleChars.length] = 0;",
          "3831:    (*table)->seqAfterExpressionLength = ruleChars.length;",
          "",
          "---------------"
        ]
      }
    }
  ]
}