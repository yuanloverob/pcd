{
  "cve_id": "CVE-2018-15501",
  "cve_desc": "In ng_pkt in transports/smart_pkt.c in libgit2 before 0.26.6 and 0.27.x before 0.27.4, a remote attacker can send a crafted smart-protocol \"ng\" packet that lacks a '\\0' byte to trigger an out-of-bounds read that leads to DoS.",
  "repo": "libgit2/libgit2",
  "patch_hash": "1f9a8510e1d2f20ed7334eeeddb92c4dd8e7c649",
  "patch_info": {
    "commit_hash": "1f9a8510e1d2f20ed7334eeeddb92c4dd8e7c649",
    "repo": "libgit2/libgit2",
    "commit_url": "https://github.com/libgit2/libgit2/commit/1f9a8510e1d2f20ed7334eeeddb92c4dd8e7c649",
    "files": [
      "src/transports/smart_pkt.c"
    ],
    "message": "smart_pkt: fix potential OOB-read when processing ng packet\n\nOSS-fuzz has reported a potential out-of-bounds read when processing a\n\"ng\" smart packet:\n\n==1==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6310000249c0 at pc 0x000000493a92 bp 0x7ffddc882cd0 sp 0x7ffddc882480\n\tREAD of size 65529 at 0x6310000249c0 thread T0\n\tSCARINESS: 26 (multi-byte-read-heap-buffer-overflow)\n\t#0 0x493a91 in __interceptor_strchr.part.35 /src/llvm/projects/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:673\n\t#1 0x813960 in ng_pkt libgit2/src/transports/smart_pkt.c:320:14\n\t#2 0x810f79 in git_pkt_parse_line libgit2/src/transports/smart_pkt.c:478:9\n\t#3 0x82c3c9 in git_smart__store_refs libgit2/src/transports/smart_protocol.c:47:12\n\t#4 0x6373a2 in git_smart__connect libgit2/src/transports/smart.c:251:15\n\t#5 0x57688f in git_remote_connect libgit2/src/remote.c:708:15\n\t#6 0x52e59b in LLVMFuzzerTestOneInput /src/download_refs_fuzzer.cc:145:9\n\t#7 0x52ef3f in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:301:5\n\t#8 0x52f4ee in main /src/libfuzzer/afl/afl_driver.cpp:339:12\n\t#9 0x7f6c910db82f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/libc-start.c:291\n\t#10 0x41d518 in _start\n\nWhen parsing an \"ng\" packet, we keep track of both the current position\nas well as the remaining length of the packet itself. But instead of\ntaking care not to exceed the length, we pass the current pointer's\nposition to `strchr`, which will search for a certain character until\nhitting NUL. It is thus possible to create a crafted packet which\ndoesn't contain a NUL byte to trigger an out-of-bounds read.\n\nFix the issue by instead using `memchr`, passing the remaining length as\nrestriction. Furthermore, verify that we actually have enough bytes left\nto produce a match at all.\n\nOSS-Fuzz-Issue: 9406",
    "before_after_code_files": [
      "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
    ]
  },
  "patch_diff": {
    "src/transports/smart_pkt.c||src/transports/smart_pkt.c": [
      "File: src/transports/smart_pkt.c -> src/transports/smart_pkt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "299:  pkt->ref = NULL;",
      "300:  pkt->type = GIT_PKT_NG;",
      "304:   goto out_err;",
      "305:  len = ptr - line;",
      "",
      "[Removed Lines]",
      "303:  if (!(ptr = strchr(line, ' ')))",
      "",
      "[Added Lines]",
      "302:  if (len < 3)",
      "303:   goto out_err;",
      "305:  len -= 3;",
      "306:  if (!(ptr = memchr(line, ' ', len)))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "311:  memcpy(pkt->ref, line, len);",
      "312:  pkt->ref[len] = '\\0';",
      "314:  line = ptr + 1;",
      "316:   goto out_err;",
      "317:  len = ptr - line;",
      "",
      "[Removed Lines]",
      "315:  if (!(ptr = strchr(line, '\\n')))",
      "",
      "[Added Lines]",
      "317:  if (len < 1)",
      "318:   goto out_err;",
      "320:  len -= 1;",
      "321:  if (!(ptr = memchr(line, '\\n', len)))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c5dd0ea101c36abc43775cfaf66dbe16f9da7d61",
      "candidate_info": {
        "commit_hash": "c5dd0ea101c36abc43775cfaf66dbe16f9da7d61",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/c5dd0ea101c36abc43775cfaf66dbe16f9da7d61",
        "files": [
          "include/git2/version.h"
        ],
        "message": "version: bump to v0.27.4",
        "before_after_code_files": [
          "include/git2/version.h||include/git2/version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/4756"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/git2/version.h||include/git2/version.h": [
          "File: include/git2/version.h -> include/git2/version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #ifndef INCLUDE_git_version_h__",
          "8: #define INCLUDE_git_version_h__",
          "11: #define LIBGIT2_VER_MAJOR 0",
          "12: #define LIBGIT2_VER_MINOR 27",
          "14: #define LIBGIT2_VER_PATCH 0",
          "16: #define LIBGIT2_SOVERSION 27",
          "",
          "[Removed Lines]",
          "10: #define LIBGIT2_VERSION \"0.27.3\"",
          "13: #define LIBGIT2_VER_REVISION 3",
          "",
          "[Added Lines]",
          "10: #define LIBGIT2_VERSION \"0.27.4\"",
          "13: #define LIBGIT2_VER_REVISION 4",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15e922845ce0ed8466a7f289d9ea87f1610d2915",
      "candidate_info": {
        "commit_hash": "15e922845ce0ed8466a7f289d9ea87f1610d2915",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/15e922845ce0ed8466a7f289d9ea87f1610d2915",
        "files": [
          "src/odb_pack.c"
        ],
        "message": "Prevent heap-buffer-overflow\n\nWhen running repack while doing repo writes, `packfile_load__cb()` can see some temporary files in the directory that are bigger than the usual, and makes `memcmp` overflow on the `p->pack_name` string. ASAN detected this. This just uses `strncmp`, that should not have any performance impact and is safe for comparing strings of different sizes.\n\n```\nERROR: AddressSanitizer: heap-buffer-overflow on address 0x61200001a3f3 at pc 0x7f4a9e1976ec bp 0x7ffc1f80e100 sp 0x7ffc1f80d8b0\nREAD of size 89 at 0x61200001a3f3 thread T0\nSCARINESS: 26 (multi-byte-read-heap-buffer-overflow)\n    #0 0x7f4a9e1976eb in __interceptor_memcmp.part.78 (/build/cfgr-admin#link-tree/libtools_build_sanitizers_asan-ubsan-py.so+0xcf6eb)\n    #1 0x7f4a518c5431 in packfile_load__cb /build/libgit2/0.27.0/src/libgit2-0.27.0/src/odb_pack.c:213\n    #2 0x7f4a518d9582 in git_path_direach /build/libgit2/0.27.0/src/libgit2-0.27.0/src/path.c:1134\n    #3 0x7f4a518c58ad in pack_backend__refresh /build/libgit2/0.27.0/src/libgit2-0.27.0/src/odb_pack.c:347\n    #4 0x7f4a518c1b12 in git_odb_refresh /build/libgit2/0.27.0/src/libgit2-0.27.0/src/odb.c:1511\n    #5 0x7f4a518bff5f in git_odb__freshen /build/libgit2/0.27.0/src/libgit2-0.27.0/src/odb.c:752\n    #6 0x7f4a518c17d4 in git_odb_stream_finalize_write /build/libgit2/0.27.0/src/libgit2-0.27.0/src/odb.c:1415\n    #7 0x7f4a51b9d015 in Repository_write /build/pygit2/0.27.0/src/pygit2-0.27.0/src/repository.c:509\n```\n\n(cherry picked from commit d22cd1f4a4c10ff47b04c57560e6765d77e5a8fd)",
        "before_after_code_files": [
          "src/odb_pack.c||src/odb_pack.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/odb_pack.c||src/odb_pack.c": [
          "File: src/odb_pack.c -> src/odb_pack.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:  for (i = 0; i < backend->packs.length; ++i) {",
          "211:   struct git_pack_file *p = git_vector_get(&backend->packs, i);",
          "214:    return 0;",
          "215:  }",
          "",
          "[Removed Lines]",
          "213:   if (memcmp(p->pack_name, path_str, cmp_len) == 0)",
          "",
          "[Added Lines]",
          "213:   if (strncmp(p->pack_name, path_str, cmp_len) == 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5b7c30303f75d593bba832504bdd6f13a9ccaa5",
      "candidate_info": {
        "commit_hash": "b5b7c30303f75d593bba832504bdd6f13a9ccaa5",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/b5b7c30303f75d593bba832504bdd6f13a9ccaa5",
        "files": [
          "src/transports/smart_pkt.c"
        ],
        "message": "smart_pkt: fix \"ng\" parser accepting non-space character\n\nWhen parsing \"ng\" packets, we blindly assume that the character\nimmediately following the \"ng\" prefix is a space and skip it. As the\ncalling function doesn't make sure that this is the case, we can thus\nend up blindly accepting an invalid packet line.\n\nFix the issue by using `git__prefixncmp`, checking whether the line\nstarts with \"ng \".\n\n(cherry picked from commit b5ba7af2d30c958b090dcf135749d9afe89ec703)",
        "before_after_code_files": [
          "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
          ],
          "candidate": [
            "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "src/transports/smart_pkt.c||src/transports/smart_pkt.c": [
          "File: src/transports/smart_pkt.c -> src/transports/smart_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:  eol = line + len;",
          "310:   goto out_err;",
          "313:  if (!(ptr = memchr(line, ' ', eol - line)))",
          "314:   goto out_err;",
          "",
          "[Removed Lines]",
          "309:  if (len < 3)",
          "",
          "[Added Lines]",
          "309:  if (git__prefixncmp(line, len, \"ng \"))",
          "311:  line += 3;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf4342f7edca9f27397932f07fc8af7c7bc5a5dd",
      "candidate_info": {
        "commit_hash": "bf4342f7edca9f27397932f07fc8af7c7bc5a5dd",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/bf4342f7edca9f27397932f07fc8af7c7bc5a5dd",
        "files": [
          "src/transports/smart_pkt.c"
        ],
        "message": "Fix 'invalid packet line' for ng packets containing errors\n\n(cherry picked from commit 50dd7fea5ad1bf6c013b72ad0aa803a9c84cdede)",
        "before_after_code_files": [
          "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
          ],
          "candidate": [
            "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "src/transports/smart_pkt.c||src/transports/smart_pkt.c": [
          "File: src/transports/smart_pkt.c -> src/transports/smart_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290: static int ng_pkt(git_pkt **out, const char *line, size_t len)",
          "291: {",
          "292:  git_pkt_ng *pkt;",
          "294:  size_t alloclen;",
          "296:  pkt = git__malloc(sizeof(*pkt));",
          "",
          "[Removed Lines]",
          "293:  const char *ptr;",
          "",
          "[Added Lines]",
          "293:  const char *ptr, *eol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:  pkt->ref = NULL;",
          "300:  pkt->type = GIT_PKT_NG;",
          "302:  if (len < 3)",
          "303:   goto out_err;",
          "307:   goto out_err;",
          "308:  len = ptr - line;",
          "",
          "[Removed Lines]",
          "305:  len -= 3;",
          "306:  if (!(ptr = memchr(line, ' ', len)))",
          "",
          "[Added Lines]",
          "302:  eol = line + len;",
          "308:  if (!(ptr = memchr(line, ' ', eol - line)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "314:  memcpy(pkt->ref, line, len);",
          "315:  pkt->ref[len] = '\\0';",
          "319:  line = ptr + 1;",
          "322:   goto out_err;",
          "323:  len = ptr - line;",
          "",
          "[Removed Lines]",
          "317:  if (len < 1)",
          "318:   goto out_err;",
          "320:  len -= 1;",
          "321:  if (!(ptr = memchr(line, '\\n', len)))",
          "",
          "[Added Lines]",
          "320:  if (line >= eol)",
          "321:   goto out_err;",
          "323:  if (!(ptr = memchr(line, '\\n', eol - line)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19bed3e29fd45859faa92c0edc1299589dc41c8c",
      "candidate_info": {
        "commit_hash": "19bed3e29fd45859faa92c0edc1299589dc41c8c",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/19bed3e29fd45859faa92c0edc1299589dc41c8c",
        "files": [
          "src/transports/smart_pkt.c"
        ],
        "message": "smart_pkt: fix potential OOB-read when processing ng packet\n\nOSS-fuzz has reported a potential out-of-bounds read when processing a\n\"ng\" smart packet:\n\n==1==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6310000249c0 at pc 0x000000493a92 bp 0x7ffddc882cd0 sp 0x7ffddc882480\n\tREAD of size 65529 at 0x6310000249c0 thread T0\n\tSCARINESS: 26 (multi-byte-read-heap-buffer-overflow)\n\t#0 0x493a91 in __interceptor_strchr.part.35 /src/llvm/projects/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:673\n\t#1 0x813960 in ng_pkt libgit2/src/transports/smart_pkt.c:320:14\n\t#2 0x810f79 in git_pkt_parse_line libgit2/src/transports/smart_pkt.c:478:9\n\t#3 0x82c3c9 in git_smart__store_refs libgit2/src/transports/smart_protocol.c:47:12\n\t#4 0x6373a2 in git_smart__connect libgit2/src/transports/smart.c:251:15\n\t#5 0x57688f in git_remote_connect libgit2/src/remote.c:708:15\n\t#6 0x52e59b in LLVMFuzzerTestOneInput /src/download_refs_fuzzer.cc:145:9\n\t#7 0x52ef3f in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:301:5\n\t#8 0x52f4ee in main /src/libfuzzer/afl/afl_driver.cpp:339:12\n\t#9 0x7f6c910db82f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/libc-start.c:291\n\t#10 0x41d518 in _start\n\nWhen parsing an \"ng\" packet, we keep track of both the current position\nas well as the remaining length of the packet itself. But instead of\ntaking care not to exceed the length, we pass the current pointer's\nposition to `strchr`, which will search for a certain character until\nhitting NUL. It is thus possible to create a crafted packet which\ndoesn't contain a NUL byte to trigger an out-of-bounds read.\n\nFix the issue by instead using `memchr`, passing the remaining length as\nrestriction. Furthermore, verify that we actually have enough bytes left\nto produce a match at all.\n\nOSS-Fuzz-Issue: 9406",
        "before_after_code_files": [
          "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
          ],
          "candidate": [
            "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "src/transports/smart_pkt.c||src/transports/smart_pkt.c": [
          "File: src/transports/smart_pkt.c -> src/transports/smart_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:  pkt->ref = NULL;",
          "292:  pkt->type = GIT_PKT_NG;",
          "296:   goto out_err;",
          "297:  len = ptr - line;",
          "",
          "[Removed Lines]",
          "295:  if (!(ptr = strchr(line, ' ')))",
          "",
          "[Added Lines]",
          "294:  if (len < 3)",
          "295:   goto out_err;",
          "297:  len -= 3;",
          "298:  if (!(ptr = memchr(line, ' ', len)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:  memcpy(pkt->ref, line, len);",
          "304:  pkt->ref[len] = '\\0';",
          "306:  line = ptr + 1;",
          "308:   goto out_err;",
          "309:  len = ptr - line;",
          "",
          "[Removed Lines]",
          "307:  if (!(ptr = strchr(line, '\\n')))",
          "",
          "[Added Lines]",
          "309:  if (len < 1)",
          "310:   goto out_err;",
          "312:  len -= 1;",
          "313:  if (!(ptr = memchr(line, '\\n', len)))",
          "",
          "---------------"
        ]
      }
    }
  ]
}