{
  "cve_id": "CVE-2020-24369",
  "cve_desc": "ldebug.c in Lua 5.4.0 attempts to access debug information via the line hook of a stripped function, leading to a NULL pointer dereference.",
  "repo": "lua/lua",
  "patch_hash": "ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a",
  "patch_info": {
    "commit_hash": "ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a",
    "repo": "lua/lua",
    "commit_url": "https://github.com/lua/lua/commit/ae5b5ba529753c7a653901ffc29b5ea24c3fdf3a",
    "files": [
      "ldebug.c",
      "testes/db.lua"
    ],
    "message": "Fixed bug: line hooks in stripped functions\n\nLine-hook handling was accessing debug info. without checking whether\nit was present.",
    "before_after_code_files": [
      "ldebug.c||ldebug.c",
      "testes/db.lua||testes/db.lua"
    ]
  },
  "patch_diff": {
    "ldebug.c||ldebug.c": [
      "File: ldebug.c -> ldebug.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "785: static int changedline (const Proto *p, int oldpc, int newpc) {",
      "786:   while (oldpc++ < newpc) {",
      "787:     if (p->lineinfo[oldpc] != 0)",
      "788:       return (luaG_getfuncline(p, oldpc - 1) != luaG_getfuncline(p, newpc));",
      "789:   }",
      "791: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "787:     return 0;",
      "",
      "---------------"
    ],
    "testes/db.lua||testes/db.lua": [
      "File: testes/db.lua -> testes/db.lua",
      "--- Hunk 1 ---",
      "[Context before]",
      "886: print(\"testing debug functions on chunk without debug info\")",
      "888: local debug = require'debug'",
      "889: local a = 12  -- a local variable",
      "",
      "[Removed Lines]",
      "887: prog = [[-- program to be loaded without debug information",
      "",
      "[Added Lines]",
      "887: prog = [[-- program to be loaded without debug information (strip)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "928: assert(f() == 13)",
      "930: do   -- tests for 'source' in binary dumps",
      "931:   local prog = [[",
      "932:     return function (x)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "930: do   -- bug in 5.4.0: line hooks in stripped code",
      "931:   local function foo ()",
      "932:     local a = 1",
      "933:     local b = 2",
      "934:     return b",
      "935:   end",
      "937:   local s = load(string.dump(foo, true))",
      "938:   local line = true",
      "939:   debug.sethook(function (e, l)",
      "940:     assert(e == \"line\")",
      "941:     line = l",
      "942:   end, \"l\")",
      "943:   assert(s() == 2); debug.sethook(nil)",
      "944:   assert(line == nil)  -- hook called withoug debug info for 1st instruction",
      "945: end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "949187b049ce329c93d6639b91e244f2b208c807",
      "candidate_info": {
        "commit_hash": "949187b049ce329c93d6639b91e244f2b208c807",
        "repo": "lua/lua",
        "commit_url": "https://github.com/lua/lua/commit/949187b049ce329c93d6639b91e244f2b208c807",
        "files": [
          "lcode.c",
          "ldebug.c",
          "ldebug.h",
          "ldo.c"
        ],
        "message": "Optimizations for line hook\n\nThe function 'changedline' tries harder to avoid calling\n'luaG_getfuncline' plus small changes in the use of 'L->oldpc'.",
        "before_after_code_files": [
          "lcode.c||lcode.c",
          "ldebug.c||ldebug.c",
          "ldebug.h||ldebug.h",
          "ldo.c||ldo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ldebug.c||ldebug.c"
          ],
          "candidate": [
            "ldebug.c||ldebug.c"
          ]
        }
      },
      "candidate_diff": {
        "lcode.c||lcode.c": [
          "File: lcode.c -> lcode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314: }",
          "327: #define LIMLINEDIFF 0x80",
          "",
          "[Removed Lines]",
          "321: #if !defined(MAXIWTHABS)",
          "322: #define MAXIWTHABS 120",
          "323: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ldebug.c||ldebug.c": [
          "File: ldebug.c -> ldebug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #define noLuaClosure(f)  ((f) == NULL || (f)->c.tt == LUA_VCCL)",
          "39: static const char *funcnamefromcode (lua_State *L, CallInfo *ci,",
          "40:                                     const char **name);",
          "",
          "[Removed Lines]",
          "37: #define invpcRel(pc, p)  ((p)->code + (pc) + 1)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "796: static int changedline (const Proto *p, int oldpc, int newpc) {",
          "798:     return 0;",
          "802:   }",
          "804: }",
          "",
          "[Removed Lines]",
          "799:   while (oldpc++ < newpc) {",
          "800:     if (p->lineinfo[oldpc] != 0)",
          "801:       return (luaG_getfuncline(p, oldpc - 1) != luaG_getfuncline(p, newpc));",
          "",
          "[Added Lines]",
          "803:     int pc = oldpc;",
          "804:     for (;;) {",
          "805:       int lineinfo = p->lineinfo[++pc];",
          "806:       if (lineinfo == ABSLINEINFO)",
          "808:       delta += lineinfo;",
          "809:       if (pc == newpc)",
          "811:     }",
          "815:   return (luaG_getfuncline(p, oldpc) != luaG_getfuncline(p, newpc));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "818: int luaG_traceexec (lua_State *L, const Instruction *pc) {",
          "819:   CallInfo *ci = L->ci;",
          "820:   lu_byte mask = L->hookmask;",
          "821:   const Proto *p = ci_func(ci)->p;",
          "822:   int counthook;",
          "",
          "[Removed Lines]",
          "824:   int oldpc = (L->oldpc < p->sizecode) ? L->oldpc : 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "839:   }",
          "842:   if (counthook)",
          "844:   if (mask & LUA_MASKLINE) {",
          "845:     int npci = pcRel(pc, p);",
          "849:       int newline = luaG_getfuncline(p, npci);",
          "851:     }",
          "",
          "[Removed Lines]",
          "840:   if (!isIT(*(ci->u.l.savedpc - 1)))",
          "",
          "[Added Lines]",
          "857:     int oldpc = (L->oldpc < p->sizecode) ? L->oldpc : 0;",
          "",
          "---------------"
        ],
        "ldebug.h||ldebug.h": [
          "File: ldebug.h -> ldebug.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #define ABSLINEINFO (-0x80)",
          "29: LUAI_FUNC int luaG_getfuncline (const Proto *f, int pc);",
          "30: LUAI_FUNC const char *luaG_findlocal (lua_State *L, CallInfo *ci, int n,",
          "31:                                                     StkId *pos);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #if !defined(MAXIWTHABS)",
          "35: #define MAXIWTHABS 120",
          "36: #endif",
          "",
          "---------------"
        ],
        "ldo.c||ldo.c": [
          "File: ldo.c -> ldo.c"
        ]
      }
    }
  ]
}