{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "15344de74c42e6601f94cb12bc1392338e5dec65",
      "candidate_info": {
        "commit_hash": "15344de74c42e6601f94cb12bc1392338e5dec65",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/15344de74c42e6601f94cb12bc1392338e5dec65",
        "files": [
          "windows/winkernel_mm.c"
        ],
        "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
        "before_after_code_files": [
          "windows/winkernel_mm.c||windows/winkernel_mm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "windows/winkernel_mm.c||windows/winkernel_mm.c"
          ],
          "candidate": [
            "windows/winkernel_mm.c||windows/winkernel_mm.c"
          ]
        }
      },
      "candidate_diff": {
        "windows/winkernel_mm.c||windows/winkernel_mm.c": [
          "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include \"winkernel_mm.h\"",
          "5: #include <ntddk.h>",
          "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include <Ntintsafe.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
          "38:  if (!block) {",
          "39:   return NULL;",
          "40:  }",
          "",
          "[Removed Lines]",
          "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
          "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
          "",
          "[Added Lines]",
          "37:  size_t number_of_bytes = 0;",
          "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
          "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
          "43:   return NULL;",
          "44:  }",
          "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
          "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c846f08ffb77589ccf955aa9727e8ffdde48f01",
      "candidate_info": {
        "commit_hash": "7c846f08ffb77589ccf955aa9727e8ffdde48f01",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/7c846f08ffb77589ccf955aa9727e8ffdde48f01",
        "files": [
          "arch/X86/X86MappingInsnOp.inc",
          "arch/X86/X86MappingInsnOp_reduce.inc"
        ],
        "message": "Fix EFLAGS for the stosb/stosd/stosq/stosw instructions (#1065)",
        "before_after_code_files": [
          "arch/X86/X86MappingInsnOp.inc||arch/X86/X86MappingInsnOp.inc",
          "arch/X86/X86MappingInsnOp_reduce.inc||arch/X86/X86MappingInsnOp_reduce.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86MappingInsnOp.inc||arch/X86/X86MappingInsnOp.inc": [
          "File: arch/X86/X86MappingInsnOp.inc -> arch/X86/X86MappingInsnOp.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "10050:  { CS_AC_READ, 0 }",
          "10051: },",
          "10054:  { CS_AC_WRITE, CS_AC_READ, 0 }",
          "10055: },",
          "10058:  { CS_AC_WRITE, CS_AC_READ, 0 }",
          "10059: },",
          "10062:  { CS_AC_WRITE, CS_AC_READ, 0 }",
          "10063: },",
          "10066:  { CS_AC_WRITE, CS_AC_READ, 0 }",
          "10067: },",
          "",
          "[Removed Lines]",
          "10053:  0,",
          "10057:  0,",
          "10061:  0,",
          "10065:  0,",
          "",
          "[Added Lines]",
          "10053:  X86_EFLAGS_TEST_DF,",
          "10057:  X86_EFLAGS_TEST_DF,",
          "10061:  X86_EFLAGS_TEST_DF,",
          "10065:  X86_EFLAGS_TEST_DF,",
          "",
          "---------------"
        ],
        "arch/X86/X86MappingInsnOp_reduce.inc||arch/X86/X86MappingInsnOp_reduce.inc": [
          "File: arch/X86/X86MappingInsnOp_reduce.inc -> arch/X86/X86MappingInsnOp_reduce.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5402:  { 0 }",
          "5403: },",
          "5406:  { CS_AC_WRITE, CS_AC_READ, 0 }",
          "5407: },",
          "5410:  { CS_AC_WRITE, CS_AC_READ, 0 }",
          "5411: },",
          "5414:  { CS_AC_WRITE, CS_AC_READ, 0 }",
          "5415: },",
          "5418:  { CS_AC_WRITE, CS_AC_READ, 0 }",
          "5419: },",
          "",
          "[Removed Lines]",
          "5405:  0,",
          "5409:  0,",
          "5413:  0,",
          "5417:  0,",
          "",
          "[Added Lines]",
          "5405:  X86_EFLAGS_TEST_DF,",
          "5409:  X86_EFLAGS_TEST_DF,",
          "5413:  X86_EFLAGS_TEST_DF,",
          "5417:  X86_EFLAGS_TEST_DF,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52959a1bb8eca4d9162396cb4ea3cdfbf31a2b98",
      "candidate_info": {
        "commit_hash": "52959a1bb8eca4d9162396cb4ea3cdfbf31a2b98",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/52959a1bb8eca4d9162396cb4ea3cdfbf31a2b98",
        "files": [
          "include/platform.h"
        ],
        "message": "Supported a WDK project",
        "before_after_code_files": [
          "include/platform.h||include/platform.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/platform.h||include/platform.h": [
          "File: include/platform.h -> include/platform.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #ifndef __cplusplus",
          "14: typedef unsigned char bool;",
          "15: #define false 0",
          "",
          "[Removed Lines]",
          "12: #if (_MSC_VER < 1800)",
          "",
          "[Added Lines]",
          "12: #if (_MSC_VER < 1800) || defined(_KERNEL_MODE)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0d1f3f87bd40991cf6662c77e01feaf8c05856f",
      "candidate_info": {
        "commit_hash": "e0d1f3f87bd40991cf6662c77e01feaf8c05856f",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/e0d1f3f87bd40991cf6662c77e01feaf8c05856f",
        "files": [
          "arch/X86/X86ATTInstPrinter.c",
          "arch/X86/X86ImmSize.inc",
          "arch/X86/X86IntelInstPrinter.c",
          "arch/X86/X86Mapping.c",
          "arch/X86/X86Mapping.h"
        ],
        "message": "x86: fix immediate operand for AND instruction in ATT mode (issue #1047)",
        "before_after_code_files": [
          "arch/X86/X86ATTInstPrinter.c||arch/X86/X86ATTInstPrinter.c",
          "arch/X86/X86ImmSize.inc||arch/X86/X86ImmSize.inc",
          "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c",
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c",
          "arch/X86/X86Mapping.h||arch/X86/X86Mapping.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86ATTInstPrinter.c||arch/X86/X86ATTInstPrinter.c": [
          "File: arch/X86/X86ATTInstPrinter.c -> arch/X86/X86ATTInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "494: static void printOperand(MCInst *MI, unsigned OpNo, SStream *O)",
          "495: {",
          "497:  MCOperand *Op  = MCInst_getOperand(MI, OpNo);",
          "499:  if (MCOperand_isReg(Op)) {",
          "500:   unsigned int reg = MCOperand_getReg(Op);",
          "501:   printRegName(O, reg);",
          "",
          "[Removed Lines]",
          "496:  uint8_t opsize = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "506:     MI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].type = X86_OP_REG;",
          "507:     MI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].reg = reg;",
          "508:     MI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].size = MI->csh->regsize_map[reg];",
          "509:     MI->flat_insn->detail->x86.op_count++;",
          "510:    }",
          "511:   }",
          "512:  } else if (MCOperand_isImm(Op)) {",
          "514:   int64_t imm = MCOperand_getImm(Op);",
          "592:   switch(MI->flat_insn->id) {",
          "593:    default:",
          "",
          "[Removed Lines]",
          "516:   switch(MCInst_getOpcode(MI)) {",
          "517:    default:",
          "518:     break;",
          "520:    case X86_AAD8i8:",
          "521:    case X86_AAM8i8:",
          "522:    case X86_ADC8i8:",
          "523:    case X86_ADD8i8:",
          "524:    case X86_AND8i8:",
          "525:    case X86_CMP8i8:",
          "526:    case X86_OR8i8:",
          "527:    case X86_SBB8i8:",
          "528:    case X86_SUB8i8:",
          "529:    case X86_TEST8i8:",
          "530:    case X86_XOR8i8:",
          "531:    case X86_ROL8ri:",
          "532:    case X86_ADC8ri:",
          "533:    case X86_ADD8ri:",
          "534:    case X86_ADD8ri8:",
          "535:    case X86_AND8ri:",
          "536:    case X86_AND8ri8:",
          "537:    case X86_CMP8ri:",
          "538:    case X86_MOV8ri:",
          "539:    case X86_MOV8ri_alt:",
          "540:    case X86_OR8ri:",
          "541:    case X86_OR8ri8:",
          "542:    case X86_RCL8ri:",
          "543:    case X86_RCR8ri:",
          "544:    case X86_ROR8ri:",
          "545:    case X86_SAL8ri:",
          "546:    case X86_SAR8ri:",
          "547:    case X86_SBB8ri:",
          "548:    case X86_SHL8ri:",
          "549:    case X86_SHR8ri:",
          "550:    case X86_SUB8ri:",
          "551:    case X86_SUB8ri8:",
          "552:    case X86_TEST8ri:",
          "553:    case X86_TEST8ri_NOREX:",
          "554:    case X86_TEST8ri_alt:",
          "555:    case X86_XOR8ri:",
          "556:    case X86_XOR8ri8:",
          "557:    case X86_OUT8ir:",
          "559:    case X86_ADC8mi:",
          "560:    case X86_ADD8mi:",
          "561:    case X86_AND8mi:",
          "562:    case X86_CMP8mi:",
          "563:    case X86_LOCK_ADD8mi:",
          "564:    case X86_LOCK_AND8mi:",
          "565:    case X86_LOCK_OR8mi:",
          "566:    case X86_LOCK_SUB8mi:",
          "567:    case X86_LOCK_XOR8mi:",
          "568:    case X86_MOV8mi:",
          "569:    case X86_OR8mi:",
          "570:    case X86_RCL8mi:",
          "571:    case X86_RCR8mi:",
          "572:    case X86_ROL8mi:",
          "573:    case X86_ROR8mi:",
          "574:    case X86_SAL8mi:",
          "575:    case X86_SAR8mi:",
          "576:    case X86_SBB8mi:",
          "577:    case X86_SHL8mi:",
          "578:    case X86_SHR8mi:",
          "579:    case X86_SUB8mi:",
          "580:    case X86_TEST8mi:",
          "581:    case X86_TEST8mi_alt:",
          "582:    case X86_XOR8mi:",
          "583:    case X86_PUSH64i8:",
          "584:    case X86_CMP32ri8:",
          "585:    case X86_CMP64ri8:",
          "587:     imm = imm & 0xff;",
          "588:     opsize = 1;     // immediate of 1 byte",
          "589:     break;",
          "590:   }",
          "",
          "[Added Lines]",
          "514:   int opsize = X86_immediate_size(MCInst_getOpcode(MI));",
          "515:   if (opsize == 1)    // print 1 byte immediate in positive form",
          "516:    imm = imm & 0xff;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "597:      else",
          "598:       SStream_concat(O, \"$%\"PRIu64, imm);",
          "599:     } else {",
          "601:       SStream_concat(O, \"$-0x%\"PRIx64, -imm);",
          "602:      else",
          "603:       SStream_concat(O, \"$-%\"PRIu64, -imm);",
          "604:     }",
          "605:     break;",
          "607:    case X86_INS_INT:",
          "609:     imm = imm & 0xff;",
          "",
          "[Removed Lines]",
          "600:      if (imm < -HEX_THRESHOLD)",
          "",
          "[Added Lines]",
          "526:      if (imm == 0x8000000000000000LL)  // imm == -imm",
          "527:       SStream_concat0(O, \"$0x8000000000000000\");",
          "528:      else if (imm < -HEX_THRESHOLD)",
          "535:    case X86_INS_MOVABS:",
          "537:     SStream_concat(O, \"$0x%\"PRIx64, imm);",
          "538:     break;",
          "540:    case X86_INS_IN:",
          "541:    case X86_INS_OUT:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "617:    case X86_INS_LCALL:",
          "618:    case X86_INS_LJMP:",
          "621:      imm = imm & 0xffff;",
          "622:      opsize = 2;",
          "623:     }",
          "",
          "[Removed Lines]",
          "620:     if (OpNo == 1) { // selector is ptr16",
          "",
          "[Added Lines]",
          "555:     if (OpNo == 1) { // selector is ptr16",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "631:     if (imm >= 0 && imm <= HEX_THRESHOLD)",
          "632:      SStream_concat(O, \"$%u\", imm);",
          "633:     else {",
          "635:      SStream_concat(O, \"$0x%\"PRIx64, imm);",
          "636:     }",
          "637:     break;",
          "",
          "[Removed Lines]",
          "634:      imm = arch_masks[MI->op1_size? MI->op1_size : MI->imm_size] & imm;",
          "",
          "[Added Lines]",
          "569:      imm = arch_masks[opsize? opsize : MI->imm_size] & imm;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "657:     MI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].imm = imm;",
          "659:     if (opsize > 0)",
          "661:     else if (MI->op1_size > 0)",
          "662:      MI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].size = MI->op1_size;",
          "663:     else",
          "",
          "[Removed Lines]",
          "660:      MI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].size = opsize;",
          "",
          "[Added Lines]",
          "595:      MI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].size = (uint8_t)opsize;",
          "",
          "---------------"
        ],
        "arch/X86/X86ImmSize.inc||arch/X86/X86ImmSize.inc": [
          "File: arch/X86/X86ImmSize.inc -> arch/X86/X86ImmSize.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {1, X86_AAD8i8},",
          "2: {1, X86_AAM8i8},",
          "3: {2, X86_ADC16i16},",
          "4: {2, X86_ADC16mi},",
          "5: {2, X86_ADC16mi8},",
          "6: {2, X86_ADC16ri},",
          "7: {2, X86_ADC16ri8},",
          "8: {4, X86_ADC32i32},",
          "9: {4, X86_ADC32mi},",
          "10: {4, X86_ADC32mi8},",
          "11: {4, X86_ADC32ri},",
          "12: {4, X86_ADC32ri8},",
          "13: {8, X86_ADC64i32},",
          "14: {8, X86_ADC64mi32},",
          "15: {8, X86_ADC64mi8},",
          "16: {8, X86_ADC64ri32},",
          "17: {8, X86_ADC64ri8},",
          "18: {1, X86_ADC8i8},",
          "19: {1, X86_ADC8mi},",
          "20: {1, X86_ADC8ri},",
          "21: {2, X86_ADD16i16},",
          "22: {2, X86_ADD16mi},",
          "23: {2, X86_ADD16mi8},",
          "24: {2, X86_ADD16ri},",
          "25: {2, X86_ADD16ri8},",
          "26: {4, X86_ADD32i32},",
          "27: {4, X86_ADD32mi},",
          "28: {4, X86_ADD32mi8},",
          "29: {4, X86_ADD32ri},",
          "30: {4, X86_ADD32ri8},",
          "31: {8, X86_ADD64i32},",
          "32: {8, X86_ADD64mi32},",
          "33: {8, X86_ADD64mi8},",
          "34: {8, X86_ADD64ri32},",
          "35: {8, X86_ADD64ri8},",
          "36: {1, X86_ADD8i8},",
          "37: {1, X86_ADD8mi},",
          "38: {1, X86_ADD8ri},",
          "39: {1, X86_ADD8ri8},",
          "40: {2, X86_AND16i16},",
          "41: {2, X86_AND16mi},",
          "42: {2, X86_AND16mi8},",
          "43: {2, X86_AND16ri},",
          "44: {2, X86_AND16ri8},",
          "45: {4, X86_AND32i32},",
          "46: {4, X86_AND32mi},",
          "47: {4, X86_AND32mi8},",
          "48: {4, X86_AND32ri},",
          "49: {4, X86_AND32ri8},",
          "50: {8, X86_AND64i32},",
          "51: {8, X86_AND64mi32},",
          "52: {8, X86_AND64mi8},",
          "53: {8, X86_AND64ri32},",
          "54: {8, X86_AND64ri8},",
          "55: {1, X86_AND8i8},",
          "56: {1, X86_AND8mi},",
          "57: {1, X86_AND8ri},",
          "58: {1, X86_AND8ri8},",
          "59: {2, X86_BT16mi8},",
          "60: {2, X86_BT16ri8},",
          "61: {4, X86_BT32mi8},",
          "62: {4, X86_BT32ri8},",
          "63: {8, X86_BT64mi8},",
          "64: {8, X86_BT64ri8},",
          "65: {2, X86_BTC16mi8},",
          "66: {2, X86_BTC16ri8},",
          "67: {4, X86_BTC32mi8},",
          "68: {4, X86_BTC32ri8},",
          "69: {8, X86_BTC64mi8},",
          "70: {8, X86_BTC64ri8},",
          "71: {2, X86_BTR16mi8},",
          "72: {2, X86_BTR16ri8},",
          "73: {4, X86_BTR32mi8},",
          "74: {4, X86_BTR32ri8},",
          "75: {8, X86_BTR64mi8},",
          "76: {8, X86_BTR64ri8},",
          "77: {2, X86_BTS16mi8},",
          "78: {2, X86_BTS16ri8},",
          "79: {4, X86_BTS32mi8},",
          "80: {4, X86_BTS32ri8},",
          "81: {8, X86_BTS64mi8},",
          "82: {8, X86_BTS64ri8},",
          "83: {2, X86_CALLpcrel16},",
          "84: {2, X86_CMP16i16},",
          "85: {2, X86_CMP16mi},",
          "86: {2, X86_CMP16mi8},",
          "87: {2, X86_CMP16ri},",
          "88: {2, X86_CMP16ri8},",
          "89: {4, X86_CMP32i32},",
          "90: {4, X86_CMP32mi},",
          "91: {4, X86_CMP32mi8},",
          "92: {4, X86_CMP32ri},",
          "93: {4, X86_CMP32ri8},",
          "94: {8, X86_CMP64i32},",
          "95: {8, X86_CMP64mi32},",
          "96: {8, X86_CMP64mi8},",
          "97: {8, X86_CMP64ri32},",
          "98: {8, X86_CMP64ri8},",
          "99: {1, X86_CMP8i8},",
          "100: {1, X86_CMP8mi},",
          "101: {1, X86_CMP8ri},",
          "102: {2, X86_IMUL16rmi8},",
          "103: {2, X86_IMUL16rri8},",
          "104: {4, X86_IMUL32rmi8},",
          "105: {4, X86_IMUL32rri8},",
          "106: {8, X86_IMUL64rmi32},",
          "107: {8, X86_IMUL64rmi8},",
          "108: {8, X86_IMUL64rri32},",
          "109: {8, X86_IMUL64rri8},",
          "110: {2, X86_IN16ri},",
          "111: {4, X86_IN32ri},",
          "112: {1, X86_IN8ri},",
          "113: {2, X86_JMP_2},",
          "114: {2, X86_MOV16mi},",
          "115: {2, X86_MOV16ri},",
          "116: {2, X86_MOV16ri_alt},",
          "117: {4, X86_MOV32mi},",
          "118: {4, X86_MOV32ri},",
          "119: {8, X86_MOV32ri64},",
          "120: {4, X86_MOV32ri_alt},",
          "121: {8, X86_MOV64mi32},",
          "122: {8, X86_MOV64ri},",
          "123: {8, X86_MOV64ri32},",
          "124: {1, X86_MOV8mi},",
          "125: {1, X86_MOV8ri},",
          "126: {1, X86_MOV8ri_alt},",
          "127: {2, X86_OR16i16},",
          "128: {2, X86_OR16mi},",
          "129: {2, X86_OR16mi8},",
          "130: {2, X86_OR16ri},",
          "131: {2, X86_OR16ri8},",
          "132: {4, X86_OR32i32},",
          "133: {4, X86_OR32mi},",
          "134: {4, X86_OR32mi8},",
          "135: {4, X86_OR32ri},",
          "136: {4, X86_OR32ri8},",
          "137: {8, X86_OR64i32},",
          "138: {8, X86_OR64mi32},",
          "139: {8, X86_OR64mi8},",
          "140: {8, X86_OR64ri32},",
          "141: {8, X86_OR64ri8},",
          "142: {1, X86_OR8i8},",
          "143: {1, X86_OR8mi},",
          "144: {1, X86_OR8ri},",
          "145: {1, X86_OR8ri8},",
          "146: {2, X86_PUSH16i8},",
          "147: {4, X86_PUSH32i8},",
          "148: {8, X86_PUSH64i16},",
          "149: {8, X86_PUSH64i32},",
          "150: {8, X86_PUSH64i8},",
          "151: {2, X86_PUSHi16},",
          "152: {4, X86_PUSHi32},",
          "153: {2, X86_RCL16mi},",
          "154: {2, X86_RCL16ri},",
          "155: {4, X86_RCL32mi},",
          "156: {4, X86_RCL32ri},",
          "157: {8, X86_RCL64mi},",
          "158: {8, X86_RCL64ri},",
          "159: {1, X86_RCL8mi},",
          "160: {1, X86_RCL8ri},",
          "161: {2, X86_RCR16mi},",
          "162: {2, X86_RCR16ri},",
          "163: {4, X86_RCR32mi},",
          "164: {4, X86_RCR32ri},",
          "165: {8, X86_RCR64mi},",
          "166: {8, X86_RCR64ri},",
          "167: {1, X86_RCR8mi},",
          "168: {1, X86_RCR8ri},",
          "169: {2, X86_ROL16mi},",
          "170: {2, X86_ROL16ri},",
          "171: {4, X86_ROL32mi},",
          "172: {4, X86_ROL32ri},",
          "173: {8, X86_ROL64mi},",
          "174: {8, X86_ROL64ri},",
          "175: {1, X86_ROL8mi},",
          "176: {1, X86_ROL8ri},",
          "177: {2, X86_ROR16mi},",
          "178: {2, X86_ROR16ri},",
          "179: {4, X86_ROR32mi},",
          "180: {4, X86_ROR32ri},",
          "181: {8, X86_ROR64mi},",
          "182: {8, X86_ROR64ri},",
          "183: {1, X86_ROR8mi},",
          "184: {1, X86_ROR8ri},",
          "185: {4, X86_RORX32mi},",
          "186: {4, X86_RORX32ri},",
          "187: {8, X86_RORX64mi},",
          "188: {8, X86_RORX64ri},",
          "189: {2, X86_SAL16mi},",
          "190: {2, X86_SAL16ri},",
          "191: {4, X86_SAL32mi},",
          "192: {4, X86_SAL32ri},",
          "193: {8, X86_SAL64mi},",
          "194: {8, X86_SAL64ri},",
          "195: {1, X86_SAL8mi},",
          "196: {1, X86_SAL8ri},",
          "197: {2, X86_SAR16mi},",
          "198: {2, X86_SAR16ri},",
          "199: {4, X86_SAR32mi},",
          "200: {4, X86_SAR32ri},",
          "201: {8, X86_SAR64mi},",
          "202: {8, X86_SAR64ri},",
          "203: {1, X86_SAR8mi},",
          "204: {1, X86_SAR8ri},",
          "205: {2, X86_SBB16i16},",
          "206: {2, X86_SBB16mi},",
          "207: {2, X86_SBB16mi8},",
          "208: {2, X86_SBB16ri},",
          "209: {2, X86_SBB16ri8},",
          "210: {4, X86_SBB32i32},",
          "211: {4, X86_SBB32mi},",
          "212: {4, X86_SBB32mi8},",
          "213: {4, X86_SBB32ri},",
          "214: {4, X86_SBB32ri8},",
          "215: {8, X86_SBB64i32},",
          "216: {8, X86_SBB64mi32},",
          "217: {8, X86_SBB64mi8},",
          "218: {8, X86_SBB64ri32},",
          "219: {8, X86_SBB64ri8},",
          "220: {1, X86_SBB8i8},",
          "221: {1, X86_SBB8mi},",
          "222: {1, X86_SBB8ri},",
          "223: {2, X86_SHL16mi},",
          "224: {2, X86_SHL16ri},",
          "225: {4, X86_SHL32mi},",
          "226: {4, X86_SHL32ri},",
          "227: {8, X86_SHL64mi},",
          "228: {8, X86_SHL64ri},",
          "229: {1, X86_SHL8mi},",
          "230: {1, X86_SHL8ri},",
          "231: {1, X86_SHLD16mri8},",
          "232: {2, X86_SHLD16rri8},",
          "233: {1, X86_SHLD32mri8},",
          "234: {4, X86_SHLD32rri8},",
          "235: {1, X86_SHLD64mri8},",
          "236: {8, X86_SHLD64rri8},",
          "237: {2, X86_SHR16mi},",
          "238: {2, X86_SHR16ri},",
          "239: {4, X86_SHR32mi},",
          "240: {4, X86_SHR32ri},",
          "241: {8, X86_SHR64mi},",
          "242: {8, X86_SHR64ri},",
          "243: {1, X86_SHR8mi},",
          "244: {1, X86_SHR8ri},",
          "245: {1, X86_SHRD16mri8},",
          "246: {2, X86_SHRD16rri8},",
          "247: {1, X86_SHRD32mri8},",
          "248: {4, X86_SHRD32rri8},",
          "249: {1, X86_SHRD64mri8},",
          "250: {8, X86_SHRD64rri8},",
          "251: {2, X86_SUB16i16},",
          "252: {2, X86_SUB16mi},",
          "253: {2, X86_SUB16mi8},",
          "254: {2, X86_SUB16ri},",
          "255: {2, X86_SUB16ri8},",
          "256: {4, X86_SUB32i32},",
          "257: {4, X86_SUB32mi},",
          "258: {4, X86_SUB32mi8},",
          "259: {4, X86_SUB32ri},",
          "260: {4, X86_SUB32ri8},",
          "261: {8, X86_SUB64i32},",
          "262: {8, X86_SUB64mi32},",
          "263: {8, X86_SUB64mi8},",
          "264: {8, X86_SUB64ri32},",
          "265: {8, X86_SUB64ri8},",
          "266: {1, X86_SUB8i8},",
          "267: {1, X86_SUB8mi},",
          "268: {1, X86_SUB8ri},",
          "269: {1, X86_SUB8ri8},",
          "270: {8, X86_TCRETURNdi64},",
          "271: {8, X86_TCRETURNmi64},",
          "272: {8, X86_TCRETURNri64},",
          "273: {2, X86_TEST16i16},",
          "274: {2, X86_TEST16mi},",
          "275: {2, X86_TEST16mi_alt},",
          "276: {2, X86_TEST16ri},",
          "277: {2, X86_TEST16ri_alt},",
          "278: {4, X86_TEST32i32},",
          "279: {4, X86_TEST32mi},",
          "280: {4, X86_TEST32mi_alt},",
          "281: {4, X86_TEST32ri},",
          "282: {4, X86_TEST32ri_alt},",
          "283: {8, X86_TEST64i32},",
          "284: {8, X86_TEST64mi32},",
          "285: {4, X86_TEST64mi32_alt},",
          "286: {8, X86_TEST64ri32},",
          "287: {4, X86_TEST64ri32_alt},",
          "288: {1, X86_TEST8i8},",
          "289: {1, X86_TEST8mi},",
          "290: {1, X86_TEST8mi_alt},",
          "291: {1, X86_TEST8ri},",
          "292: {1, X86_TEST8ri_NOREX},",
          "293: {1, X86_TEST8ri_alt},",
          "294: {2, X86_XOR16i16},",
          "295: {2, X86_XOR16mi},",
          "296: {2, X86_XOR16mi8},",
          "297: {2, X86_XOR16ri},",
          "298: {2, X86_XOR16ri8},",
          "299: {4, X86_XOR32i32},",
          "300: {4, X86_XOR32mi},",
          "301: {4, X86_XOR32mi8},",
          "302: {4, X86_XOR32ri},",
          "303: {4, X86_XOR32ri8},",
          "304: {8, X86_XOR64i32},",
          "305: {8, X86_XOR64mi32},",
          "306: {8, X86_XOR64mi8},",
          "307: {8, X86_XOR64ri32},",
          "308: {8, X86_XOR64ri8},",
          "309: {1, X86_XOR8i8},",
          "310: {1, X86_XOR8mi},",
          "311: {1, X86_XOR8ri},",
          "312: {1, X86_XOR8ri8},",
          "",
          "---------------"
        ],
        "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c": [
          "File: arch/X86/X86IntelInstPrinter.c -> arch/X86/X86IntelInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "585:  }",
          "586: }",
          "588: static void printOperand(MCInst *MI, unsigned OpNo, SStream *O)",
          "589: {",
          "591:  MCOperand *Op  = MCInst_getOperand(MI, OpNo);",
          "593:  if (MCOperand_isReg(Op)) {",
          "",
          "[Removed Lines]",
          "590:  uint8_t opsize = 0;",
          "",
          "[Added Lines]",
          "588: static void printImm(int syntax, SStream *O, int64_t imm, bool positive)",
          "589: {",
          "590:  if (positive) {",
          "591:   if (imm < 0) {",
          "592:    SStream_concat(O, \"0x%\"PRIx64, imm);",
          "593:   } else {",
          "594:    if (imm > HEX_THRESHOLD)",
          "595:     SStream_concat(O, \"0x%\"PRIx64, imm);",
          "596:    else",
          "597:     SStream_concat(O, \"%\"PRIu64, imm);",
          "598:   }",
          "599:  } else {",
          "600:   if (imm < 0) {",
          "601:    if (imm == 0x8000000000000000LL)  // imm == -imm",
          "602:     SStream_concat0(O, \"0x8000000000000000\");",
          "603:    else if (imm < -HEX_THRESHOLD)",
          "604:     SStream_concat(O, \"-0x%\"PRIx64, -imm);",
          "605:    else",
          "606:     SStream_concat(O, \"-%\"PRIu64, -imm);",
          "608:   } else {",
          "609:    if (imm > HEX_THRESHOLD)",
          "610:     SStream_concat(O, \"0x%\"PRIx64, imm);",
          "611:    else",
          "612:     SStream_concat(O, \"%\"PRIu64, imm);",
          "613:   }",
          "614:  }",
          "615: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "609:    MI->op1_size = MI->csh->regsize_map[reg];",
          "610:  } else if (MCOperand_isImm(Op)) {",
          "611:   int64_t imm = MCOperand_getImm(Op);",
          "614:    default:",
          "615:     break;",
          "686:     break;",
          "703:     break;",
          "705:    case X86_INS_LCALL:",
          "706:    case X86_INS_LJMP:",
          "709:      imm = imm & 0xffff;",
          "710:      opsize = 2;",
          "711:     }",
          "716:     break;",
          "718:    case X86_INS_AND:",
          "",
          "[Removed Lines]",
          "613:   switch(MCInst_getOpcode(MI)) {",
          "617:    case X86_AAD8i8:",
          "618:    case X86_AAM8i8:",
          "619:    case X86_ADC8i8:",
          "620:    case X86_ADD8i8:",
          "621:    case X86_AND8i8:",
          "622:    case X86_CMP8i8:",
          "623:    case X86_OR8i8:",
          "624:    case X86_SBB8i8:",
          "625:    case X86_SUB8i8:",
          "626:    case X86_TEST8i8:",
          "627:    case X86_XOR8i8:",
          "628:    case X86_ROL8ri:",
          "629:    case X86_ADC8ri:",
          "630:    case X86_ADD8ri:",
          "631:    case X86_ADD8ri8:",
          "632:    case X86_AND8ri:",
          "633:    case X86_AND8ri8:",
          "634:    case X86_CMP8ri:",
          "635:    case X86_MOV8ri:",
          "636:    case X86_MOV8ri_alt:",
          "637:    case X86_OR8ri:",
          "638:    case X86_OR8ri8:",
          "639:    case X86_RCL8ri:",
          "640:    case X86_RCR8ri:",
          "641:    case X86_ROR8ri:",
          "642:    case X86_SAL8ri:",
          "643:    case X86_SAR8ri:",
          "644:    case X86_SBB8ri:",
          "645:    case X86_SHL8ri:",
          "646:    case X86_SHR8ri:",
          "647:    case X86_SUB8ri:",
          "648:    case X86_SUB8ri8:",
          "649:    case X86_TEST8ri:",
          "650:    case X86_TEST8ri_NOREX:",
          "651:    case X86_TEST8ri_alt:",
          "652:    case X86_XOR8ri:",
          "653:    case X86_XOR8ri8:",
          "654:    case X86_OUT8ir:",
          "656:    case X86_ADC8mi:",
          "657:    case X86_ADD8mi:",
          "658:    case X86_AND8mi:",
          "659:    case X86_CMP8mi:",
          "660:    case X86_LOCK_ADD8mi:",
          "661:    case X86_LOCK_AND8mi:",
          "662:    case X86_LOCK_OR8mi:",
          "663:    case X86_LOCK_SUB8mi:",
          "664:    case X86_LOCK_XOR8mi:",
          "665:    case X86_MOV8mi:",
          "666:    case X86_OR8mi:",
          "667:    case X86_RCL8mi:",
          "668:    case X86_RCR8mi:",
          "669:    case X86_ROL8mi:",
          "670:    case X86_ROR8mi:",
          "671:    case X86_SAL8mi:",
          "672:    case X86_SAR8mi:",
          "673:    case X86_SBB8mi:",
          "674:    case X86_SHL8mi:",
          "675:    case X86_SHR8mi:",
          "676:    case X86_SUB8mi:",
          "677:    case X86_TEST8mi:",
          "678:    case X86_TEST8mi_alt:",
          "679:    case X86_XOR8mi:",
          "680:    case X86_PUSH64i8:",
          "681:    case X86_CMP32ri8:",
          "682:    case X86_CMP64ri8:",
          "684:     imm = imm & 0xff;",
          "685:     opsize = 1;     // immediate of 1 byte",
          "687:   }",
          "689:   switch(MI->flat_insn->id) {",
          "690:    default:",
          "691:     if (imm >= 0) {",
          "692:      if (imm > HEX_THRESHOLD)",
          "693:       SStream_concat(O, \"0x%\"PRIx64, imm);",
          "694:      else",
          "695:       SStream_concat(O, \"%\"PRIu64, imm);",
          "696:     } else {",
          "697:      if (imm < -HEX_THRESHOLD)",
          "698:       SStream_concat(O, \"-0x%\"PRIx64, -imm);",
          "699:      else",
          "700:       SStream_concat(O, \"-%\"PRIu64, -imm);",
          "701:     }",
          "708:     if (OpNo == 1) { // selector is ptr16",
          "712:     if (imm > HEX_THRESHOLD)",
          "713:      SStream_concat(O, \"0x%\"PRIx64, imm);",
          "714:     else",
          "715:      SStream_concat(O, \"%\"PRIu64, imm);",
          "",
          "[Added Lines]",
          "641:   int opsize = X86_immediate_size(MCInst_getOpcode(MI));",
          "642:   if (opsize == 1)    // print 1 byte immediate in positive form",
          "643:    imm = imm & 0xff;",
          "646:   switch(MI->flat_insn->id) {",
          "648:     printImm(MI->csh->syntax, O, imm, false);",
          "651:    case X86_INS_MOVABS:",
          "653:     printImm(MI->csh->syntax, O, imm, true);",
          "656:    case X86_INS_IN:",
          "657:    case X86_INS_OUT:",
          "658:    case X86_INS_INT:",
          "660:     imm = imm & 0xff;",
          "661:     printImm(MI->csh->syntax, O, imm, true);",
          "667:     if (OpNo == 1) { // ptr16 part",
          "671:     printImm(MI->csh->syntax, O, imm, true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "720:    case X86_INS_XOR:",
          "722:     if (imm >= 0 && imm <= HEX_THRESHOLD)",
          "724:     else {",
          "727:     }",
          "728:     break;",
          "729:    case X86_INS_RET:",
          "731:     if (imm >= 0 && imm <= HEX_THRESHOLD)",
          "733:     else {",
          "734:      imm = 0xffff & imm;",
          "736:     }",
          "737:     break;",
          "738:   }",
          "",
          "[Removed Lines]",
          "723:      SStream_concat(O, \"%u\", imm);",
          "725:      imm = arch_masks[MI->op1_size? MI->op1_size : MI->imm_size] & imm;",
          "726:      SStream_concat(O, \"0x%\"PRIx64, imm);",
          "732:      SStream_concat(O, \"%u\", imm);",
          "735:      SStream_concat(O, \"0x%x\", 0xffff & imm);",
          "",
          "[Added Lines]",
          "679:      printImm(MI->csh->syntax, O, imm, true);",
          "681:      imm = arch_masks[opsize? opsize : MI->imm_size] & imm;",
          "682:      printImm(MI->csh->syntax, O, imm, true);",
          "689:      printImm(MI->csh->syntax, O, imm, true);",
          "692:      printImm(MI->csh->syntax, O, imm, true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "743:    } else {",
          "744:     MI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].type = X86_OP_IMM;",
          "745:     if (opsize > 0)",
          "747:     else if (MI->flat_insn->detail->x86.op_count > 0) {",
          "748:      if (MI->flat_insn->id != X86_INS_LCALL && MI->flat_insn->id != X86_INS_LJMP) {",
          "749:       MI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].size =",
          "",
          "[Removed Lines]",
          "746:      MI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].size = opsize;",
          "",
          "[Added Lines]",
          "703:      MI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].size = (uint8_t)opsize;",
          "",
          "---------------"
        ],
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47942:  }",
          "47943: }",
          "47945: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47946: static struct size_id {",
          "47947:  unsigned char size;",
          "47948:  unsigned short id;",
          "47949: } x86_imm_size[] = {",
          "47950: #include \"X86ImmSize.inc\"",
          "47951: };",
          "47954: int X86_immediate_size(unsigned int id)",
          "47955: {",
          "47957:  unsigned int left, right, m;",
          "47959:  left = 0;",
          "47960:  right = ARR_SIZE(x86_imm_size) - 1;",
          "47962:  while(left <= right) {",
          "47963:   m = (left + right) / 2;",
          "47964:   if (id == x86_imm_size[m].id)",
          "47965:    return x86_imm_size[m].size;",
          "47967:   if (id < x86_imm_size[m].id)",
          "47968:    right = m - 1;",
          "47969:   else",
          "47970:    left = m + 1;",
          "47971:  }",
          "47974:  return 0;",
          "47975: }",
          "",
          "---------------"
        ],
        "arch/X86/X86Mapping.h||arch/X86/X86Mapping.h": [
          "File: arch/X86/X86Mapping.h -> arch/X86/X86Mapping.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: void op_addAvxRoundingMode(MCInst *MI, int v);",
          "63: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: int X86_immediate_size(unsigned int id);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "335b85c627be32171719aad807449fa495bcb1e1",
      "candidate_info": {
        "commit_hash": "335b85c627be32171719aad807449fa495bcb1e1",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/335b85c627be32171719aad807449fa495bcb1e1",
        "files": [
          "arch/AArch64/AArch64Disassembler.c",
          "arch/AArch64/AArch64InstPrinter.c",
          "arch/ARM/ARMInstPrinter.c"
        ],
        "message": "arm64: fix immediate number in detail mode. see #860",
        "before_after_code_files": [
          "arch/AArch64/AArch64Disassembler.c||arch/AArch64/AArch64Disassembler.c",
          "arch/AArch64/AArch64InstPrinter.c||arch/AArch64/AArch64InstPrinter.c",
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/AArch64/AArch64Disassembler.c||arch/AArch64/AArch64Disassembler.c": [
          "File: arch/AArch64/AArch64Disassembler.c -> arch/AArch64/AArch64Disassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1006:  bool IsFP;",
          "1007:  unsigned Rt = fieldFromInstruction(insn, 0, 5);",
          "1008:  unsigned Rn = fieldFromInstruction(insn, 5, 5);",
          "",
          "[Removed Lines]",
          "1009:  int32_t offset = fieldFromInstruction(insn, 12, 9);",
          "",
          "[Added Lines]",
          "1009:  int64_t offset = fieldFromInstruction(insn, 12, 9);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1269:  unsigned Rt = fieldFromInstruction(insn, 0, 5);",
          "1270:  unsigned Rn = fieldFromInstruction(insn, 5, 5);",
          "1271:  unsigned Rt2 = fieldFromInstruction(insn, 10, 5);",
          "1273:  bool IsLoad = fieldFromInstruction(insn, 22, 1) != 0;",
          "1274:  unsigned Opcode = MCInst_getOpcode(Inst);",
          "1275:  bool NeedsDisjointWritebackTransfer = false;",
          "",
          "[Removed Lines]",
          "1272:  int32_t offset = fieldFromInstruction(insn, 15, 7);",
          "",
          "[Added Lines]",
          "1272:  int64_t offset = fieldFromInstruction(insn, 15, 7);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1547:   uint64_t Addr, void *Decoder)",
          "1548: {",
          "1549:  unsigned Rd = fieldFromInstruction(insn, 0, 5);",
          "1552:  imm |= fieldFromInstruction(insn, 29, 2);",
          "",
          "[Removed Lines]",
          "1550:  int32_t imm = fieldFromInstruction(insn, 5, 19) << 2;",
          "",
          "[Added Lines]",
          "1550:  int64_t imm = fieldFromInstruction(insn, 5, 19) << 2;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1601:   uint64_t Addr,",
          "1602:   void *Decoder)",
          "1603: {",
          "1607:  if (imm & (1 << (26 - 1)))",
          "",
          "[Removed Lines]",
          "1604:  int32_t imm = fieldFromInstruction(insn, 0, 26);",
          "",
          "[Added Lines]",
          "1603:  int64_t imm = fieldFromInstruction(insn, 0, 26);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1617:   uint32_t insn, uint64_t Addr,",
          "1618:   void *Decoder)",
          "1619: {",
          "1623:  bool ValidNamed;",
          "1626:  MCOperand_CreateImm0(Inst, pstate_field);",
          "1627:  MCOperand_CreateImm0(Inst, crm);",
          "",
          "[Removed Lines]",
          "1620:  uint32_t op1 = fieldFromInstruction(insn, 16, 3);",
          "1621:  uint32_t op2 = fieldFromInstruction(insn, 5, 3);",
          "1622:  uint32_t crm = fieldFromInstruction(insn, 8, 4);",
          "1624:  uint32_t pstate_field = (op1 << 3) | op2;",
          "",
          "[Added Lines]",
          "1619:  uint64_t op1 = fieldFromInstruction(insn, 16, 3);",
          "1620:  uint64_t op2 = fieldFromInstruction(insn, 5, 3);",
          "1621:  uint64_t crm = fieldFromInstruction(insn, 8, 4);",
          "1623:  uint64_t pstate_field = (op1 << 3) | op2;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1634: static DecodeStatus DecodeTestAndBranch(MCInst *Inst, uint32_t insn,",
          "1635:   uint64_t Addr, void *Decoder)",
          "1636: {",
          "1641:  bit |= fieldFromInstruction(insn, 19, 5);",
          "",
          "[Removed Lines]",
          "1637:  uint32_t Rt = fieldFromInstruction(insn, 0, 5);",
          "1638:  uint32_t bit = fieldFromInstruction(insn, 31, 1) << 5;",
          "1639:  int32_t dst = fieldFromInstruction(insn, 5, 14);",
          "",
          "[Added Lines]",
          "1636:  uint64_t Rt = fieldFromInstruction(insn, 0, 5);",
          "1637:  uint64_t bit = fieldFromInstruction(insn, 31, 1) << 5;",
          "1638:  int64_t dst = fieldFromInstruction(insn, 5, 14);",
          "",
          "---------------"
        ],
        "arch/AArch64/AArch64InstPrinter.c||arch/AArch64/AArch64InstPrinter.c": [
          "File: arch/AArch64/AArch64InstPrinter.c -> arch/AArch64/AArch64InstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   if (MCOperand_isImm(Op2) && MCOperand_isImm(Op3)) {",
          "137:    char *AsmMnemonic = NULL;",
          "138:    int shift = 0;",
          "142:    if (Opcode == AArch64_UBFMWri && imms != 0x1F && ((imms + 1) == immr)) {",
          "143:     AsmMnemonic = \"lsl\";",
          "",
          "[Removed Lines]",
          "139:    int immr = (int)MCOperand_getImm(Op2);",
          "140:    int imms = (int)MCOperand_getImm(Op3);",
          "",
          "[Added Lines]",
          "139:    int64_t immr = MCOperand_getImm(Op2);",
          "140:    int64_t imms = MCOperand_getImm(Op3);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (Is64Bit ? 64 : 32) - (int)MCOperand_getImm(Op2);",
          "208:     MI->flat_insn->detail->arm64.op_count++;",
          "209:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "211:     MI->flat_insn->detail->arm64.op_count++;",
          "212:    }",
          "",
          "[Removed Lines]",
          "210:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)MCOperand_getImm(Op3) + 1;",
          "",
          "[Added Lines]",
          "210:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = MCOperand_getImm(Op3) + 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].reg = MCOperand_getReg(Op1);",
          "233:    MI->flat_insn->detail->arm64.op_count++;",
          "234:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "236:    MI->flat_insn->detail->arm64.op_count++;",
          "237:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "239:    MI->flat_insn->detail->arm64.op_count++;",
          "240:   }",
          "",
          "[Removed Lines]",
          "235:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)MCOperand_getImm(Op2);",
          "238:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)MCOperand_getImm(Op3) - (int)MCOperand_getImm(Op2) + 1;",
          "",
          "[Added Lines]",
          "235:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = MCOperand_getImm(Op2);",
          "238:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = MCOperand_getImm(Op3) - MCOperand_getImm(Op2) + 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "631:  SStream_concat(O, \"#%#llx\", MCOperand_getImm(Op));",
          "632:  if (MI->csh->detail) {",
          "633:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "635:   MI->flat_insn->detail->arm64.op_count++;",
          "636:  }",
          "637: }",
          "",
          "[Removed Lines]",
          "634:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)MCOperand_getImm(Op);",
          "",
          "[Added Lines]",
          "634:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = MCOperand_getImm(Op);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "687:  SStream_concat(O, \"c%u\", MCOperand_getImm(Op));",
          "688:  if (MI->csh->detail) {",
          "689:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_CIMM;",
          "691:   MI->flat_insn->detail->arm64.op_count++;",
          "692:  }",
          "693: }",
          "",
          "[Removed Lines]",
          "690:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)MCOperand_getImm(Op);",
          "",
          "[Added Lines]",
          "690:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = MCOperand_getImm(Op);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "716: static void printLogicalImm32(MCInst *MI, unsigned OpNum, SStream *O)",
          "717: {",
          "720:  Val = AArch64_AM_decodeLogicalImmediate(Val, 32);",
          "721:  printUInt32Bang(O, (int)Val);",
          "723:  if (MI->csh->detail) {",
          "724:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "726:   MI->flat_insn->detail->arm64.op_count++;",
          "727:  }",
          "728: }",
          "",
          "[Removed Lines]",
          "718:  int64_t Val = (int)MCOperand_getImm(MCInst_getOperand(MI, OpNum));",
          "725:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)Val;",
          "",
          "[Added Lines]",
          "718:  int64_t Val = MCOperand_getImm(MCInst_getOperand(MI, OpNum));",
          "725:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = Val;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "751:  if (MI->csh->detail) {",
          "752:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "754:   MI->flat_insn->detail->arm64.op_count++;",
          "755:  }",
          "756: }",
          "",
          "[Removed Lines]",
          "753:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)Val;",
          "",
          "[Added Lines]",
          "753:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = Val;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "975:  if (MI->csh->detail) {",
          "976:   if (MI->csh->doing_mem) {",
          "978:   } else {",
          "979:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "981:    MI->flat_insn->detail->arm64.op_count++;",
          "982:   }",
          "983:  }",
          "",
          "[Removed Lines]",
          "977:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = (int)val;",
          "980:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)val;",
          "",
          "[Added Lines]",
          "977:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = val;",
          "980:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = val;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "992:   printInt64Bang(O, val);",
          "993:   if (MI->csh->detail) {",
          "994:    if (MI->csh->doing_mem) {",
          "996:    } else {",
          "997:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "999:    MI->flat_insn->detail->arm64.op_count++;",
          "1000:    }",
          "1001:   }",
          "",
          "[Removed Lines]",
          "995:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = (int)val;",
          "998:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)val;",
          "",
          "[Added Lines]",
          "995:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = val;",
          "998:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = val;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1375:  SStream_concat(O, \"#%#016llx\", Val);",
          "1376:  if (MI->csh->detail) {",
          "1377:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "1379:   MI->flat_insn->detail->arm64.op_count++;",
          "1380:  }",
          "1381: }",
          "",
          "[Removed Lines]",
          "1378:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)Val;",
          "",
          "[Added Lines]",
          "1378:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = Val;",
          "",
          "---------------"
        ],
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1466: {",
          "1467:  MCOperand *Op = MCInst_getOperand(MI, OpNum);",
          "1468:  unsigned SpecRegRBit = (unsigned)MCOperand_getImm(Op) >> 4;",
          "1470:  unsigned reg;",
          "1472:  if (ARM_getFeatureBits(MI->csh->mode) & ARM_FeatureMClass) {",
          "",
          "[Removed Lines]",
          "1469:  unsigned Mask = MCOperand_getImm(Op) & 0xf;",
          "",
          "[Added Lines]",
          "1469:  unsigned Mask = (unsigned)MCOperand_getImm(Op) & 0xf;",
          "",
          "---------------"
        ]
      }
    }
  ]
}