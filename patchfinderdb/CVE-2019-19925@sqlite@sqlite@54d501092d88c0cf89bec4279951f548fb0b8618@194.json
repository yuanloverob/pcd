{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4fc4ba771cacf109e079cdfa8de6d65853e21ac5",
      "candidate_info": {
        "commit_hash": "4fc4ba771cacf109e079cdfa8de6d65853e21ac5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4fc4ba771cacf109e079cdfa8de6d65853e21ac5",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/permutations.test"
        ],
        "message": "Do not run shmlock.test as part of the inmemory_journal permutation.\n\nFossilOrigin-Name: d3fea69cbb071867a90ad56ca05123ebf8e44689a92577a525a883c176c791bd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/permutations.test||test/permutations.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e467e4c8fa256ddd6c26c1f21bc26289a21f18b781737eaf706bc813ed8234fa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "752:   # the number of fsync() calls.",
          "753:   pager.test exclusive.test jrnlmode.test sync.test misc1.test",
          "754:   journal1.test conflict.test crash8.test tkt3457.test io.test",
          "757:   pager1.test async4.test corrupt.test filefmt.test pager2.test",
          "758:   corrupt5.test corruptA.test pageropt.test",
          "",
          "[Removed Lines]",
          "755:   journal3.test 8_3_names.test",
          "",
          "[Added Lines]",
          "755:   journal3.test 8_3_names.test shmlock.test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d46b6f57c95198de8d2af1161feb516adbdb9bea",
      "candidate_info": {
        "commit_hash": "d46b6f57c95198de8d2af1161feb516adbdb9bea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d46b6f57c95198de8d2af1161feb516adbdb9bea",
        "files": [
          "ext/misc/memtrace.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a harmless compiler warning in the memtrace.c extension.\n\nFossilOrigin-Name: 2f468da4e9fb3edb5e902fa5d3c528726d1fb64d749d29e558ba3243c76bcb95",
        "before_after_code_files": [
          "ext/misc/memtrace.c||ext/misc/memtrace.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/memtrace.c||ext/misc/memtrace.c": [
          "File: ext/misc/memtrace.c -> ext/misc/memtrace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:   memtraceSize,",
          "78:   memtraceRoundup,",
          "79:   memtraceInit,",
          "81: };",
          "",
          "[Removed Lines]",
          "80:   memtraceShutdown",
          "",
          "[Added Lines]",
          "80:   memtraceShutdown,",
          "81:   0",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4978ee8b5405f958723b4ebbd4288bd08bff2b453da2d1c032d1ae904c2a3821",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "129371553c0c543a26678a12680c484ea0e8ad09",
      "candidate_info": {
        "commit_hash": "129371553c0c543a26678a12680c484ea0e8ad09",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/129371553c0c543a26678a12680c484ea0e8ad09",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3fault.test"
        ],
        "message": "Avoid deferencing a freed pointer following an OOM or SQLITE_CORRUPT error in the fts3 xDestroy method.\n\nFossilOrigin-Name: 505ed9a47825240979338a24044559613fbbd2a7850bdff70c7164da054ec63d",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3fault.test||test/fts3fault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "564:   if( p->zContentTbl==0 ){",
          "565:     fts3DbExec(&rc, db, \"DROP TABLE IF EXISTS %Q.'%q_content'\", zDb, p->zName);",
          "566:   }",
          "567:   fts3DbExec(&rc, db, \"DROP TABLE IF EXISTS %Q.'%q_segments'\", zDb,p->zName);",
          "568:   fts3DbExec(&rc, db, \"DROP TABLE IF EXISTS %Q.'%q_segdir'\", zDb, p->zName);",
          "569:   fts3DbExec(&rc, db, \"DROP TABLE IF EXISTS %Q.'%q_docsize'\", zDb, p->zName);",
          "570:   fts3DbExec(&rc, db, \"DROP TABLE IF EXISTS %Q.'%q_stat'\", zDb, p->zName);",
          "",
          "[Added Lines]",
          "564:   fts3DbExec(&rc, db,",
          "565:     \"DROP TABLE IF EXISTS %Q.'%q_segments';\"",
          "566:     \"DROP TABLE IF EXISTS %Q.'%q_segdir';\"",
          "567:     \"DROP TABLE IF EXISTS %Q.'%q_docsize';\"",
          "568:     \"DROP TABLE IF EXISTS %Q.'%q_stat';\"",
          "569:     \"%s DROP TABLE IF EXISTS %Q.'%q_content';\",",
          "570:     zDb, p->zName,",
          "571:     zDb, p->zName,",
          "572:     zDb, p->zName,",
          "573:     zDb, p->zName,",
          "574:     (p->zContentTbl ? \"--\" : \"\"), zDb,p->zName",
          "575:   );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6c33a303ebbb0f5193ead535280ba63118e14fb4f9977ce80dc716a0b082ec99",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3fault.test||test/fts3fault.test": [
          "File: test/fts3fault.test -> test/fts3fault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:   faultsim_test_result {0 {}}",
          "241: }",
          "243: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243: #-------------------------------------------------------------------------",
          "244: reset_db",
          "245: do_execsql_test 11.0 {",
          "246:   CREATE VIRTUAL TABLE t1 USING fts3(a, b);",
          "247: }",
          "248: faultsim_save_and_close",
          "250: do_faultsim_test 11 -faults oom* -prep {",
          "251:   faultsim_restore_and_reopen",
          "252: } -body {",
          "253:   execsql { DROP TABLE t1 }",
          "254: } -test {",
          "255:   faultsim_test_result {0 {}}",
          "256: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf00f6d7ece6a1e207e096a9a94e039594fb6d77",
      "candidate_info": {
        "commit_hash": "bf00f6d7ece6a1e207e096a9a94e039594fb6d77",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bf00f6d7ece6a1e207e096a9a94e039594fb6d77",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Enhanced VdbeCoverage() macros in the new windows function code.\n\nFossilOrigin-Name: f24066f8dd847dfb656f26c4a8142e7fb6a412ffe325aea6254cb122cfbb3e1c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bb643bac535ac7d5fb4c13edb8782cd13540bbc7d2b2deb689f4ca8d1914f422",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1835:   sqlite3VdbeJumpHere(v, addrGe);",
          "1836:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1837:   sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "1840:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1841:   sqlite3ReleaseTempReg(pParse, reg2);",
          "",
          "[Removed Lines]",
          "1838:   VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1838:   assert( op==OP_Ge || op==OP_Gt || op==OP_Le );",
          "1839:   VdbeCoverageIf(v, op==OP_Ge);",
          "1840:   VdbeCoverageIf(v, op==OP_Gt);",
          "1841:   VdbeCoverageIf(v, op==OP_Le);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2533:   if( pMWin->eStart==pMWin->eEnd && regStart ){",
          "2534:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2535:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2537:     windowAggFinal(&s, 0);",
          "2538:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2539:     VdbeCoverageNeverTaken(v);",
          "",
          "[Removed Lines]",
          "2536:     VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2539:     VdbeCoverageIf(v, op==OP_Ge);",
          "2540:     VdbeCoverageIf(v, op==OP_Le);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7fe2fc0dcb0bb214fe83a8a8fcdeb553fb20b97d",
      "candidate_info": {
        "commit_hash": "7fe2fc0dcb0bb214fe83a8a8fcdeb553fb20b97d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7fe2fc0dcb0bb214fe83a8a8fcdeb553fb20b97d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "test/gencol1.test"
        ],
        "message": "Fix a problem with foreign keys and generated columns discovered by Manuel Rigger.\n\nFossilOrigin-Name: 27c0fdab1ba4d4993b164eb4b777c63e82aa247c3fa406121dc8ed94970a0b35",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ef73107f475e40e6bdd8b722e96992070f81fd2b7a3cb718ec8f251c89ca3e81",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "952: i16 sqlite3TableColumnToStorage(Table *pTab, i16 iCol){",
          "953:   int i;",
          "954:   i16 n;",
          "955:   assert( iCol<pTab->nCol );",
          "957:   for(i=0, n=0; i<iCol; i++){",
          "958:     if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) n++;",
          "959:   }",
          "",
          "[Removed Lines]",
          "956:   if( (pTab->tabFlags & TF_HasVirtual)==0 ) return iCol;",
          "",
          "[Added Lines]",
          "958:   if( (pTab->tabFlags & TF_HasVirtual)==0 || iCol<0 ) return iCol;",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4136:       Table *pTab = pExpr->y.pTab;",
          "4137:       int iCol = pExpr->iColumn;",
          "4138:       int p1 = pExpr->iTable * (pTab->nCol+1) + 1",
          "4141:       assert( pExpr->iTable==0 || pExpr->iTable==1 );",
          "4142:       assert( iCol>=-1 && iCol<pTab->nCol );",
          "",
          "[Removed Lines]",
          "4139:                      + (iCol>=0 ? sqlite3TableColumnToStorage(pTab, iCol) : -1);",
          "",
          "[Added Lines]",
          "4139:                      + sqlite3TableColumnToStorage(pTab, iCol);",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:   PRAGMA integrity_check;",
          "273: } {ok}",
          "275: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275: # 2019-12-06 Found by mrigger",
          "276: #",
          "277: sqlite3 db :memory:",
          "278: do_execsql_test gencol1-11.10 {",
          "279:   PRAGMA foreign_keys = true;",
          "280:   CREATE TABLE t0(",
          "281:     c0,",
          "282:     c1 INTEGER PRIMARY KEY,",
          "283:     c2 BLOB UNIQUE DEFAULT x'00',",
          "284:     c3 BLOB GENERATED ALWAYS AS (1),",
          "285:     FOREIGN KEY(c1) REFERENCES t0(c2)",
          "286:   );",
          "287: }",
          "288: do_catchsql_test gencol1-11.20 {",
          "289:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
          "290: } {1 {FOREIGN KEY constraint failed}}",
          "291: do_execsql_test gencol1-11.30 {",
          "292:   DROP TABLE t0;",
          "293:   CREATE TABLE t0(",
          "294:     c0,",
          "295:     c1 INTEGER PRIMARY KEY,",
          "296:     c3 BLOB GENERATED ALWAYS AS (1),",
          "297:     c2 BLOB UNIQUE DEFAULT x'00',",
          "298:     FOREIGN KEY(c1) REFERENCES t0(c2)",
          "299:   );",
          "300: }",
          "301: do_catchsql_test gencol1-11.40 {",
          "302:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
          "303: } {1 {FOREIGN KEY constraint failed}}",
          "304: do_execsql_test gencol1-11.50 {",
          "305:   DROP TABLE t0;",
          "306:   CREATE TABLE t0(",
          "307:     c0,",
          "308:     c3 BLOB GENERATED ALWAYS AS (1),",
          "309:     c1 INTEGER PRIMARY KEY,",
          "310:     c2 BLOB UNIQUE DEFAULT x'00',",
          "311:     FOREIGN KEY(c1) REFERENCES t0(c2)",
          "312:   );",
          "313: }",
          "314: do_catchsql_test gencol1-11.60 {",
          "315:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
          "316: } {1 {FOREIGN KEY constraint failed}}",
          "317: do_execsql_test gencol1-11.70 {",
          "318:   DROP TABLE t0;",
          "319:   CREATE TABLE t0(",
          "320:     c3 BLOB GENERATED ALWAYS AS (1),",
          "321:     c0,",
          "322:     c1 INTEGER PRIMARY KEY,",
          "323:     c2 BLOB UNIQUE DEFAULT x'00',",
          "324:     FOREIGN KEY(c1) REFERENCES t0(c2)",
          "325:   );",
          "326: }",
          "327: do_catchsql_test gencol1-11.80 {",
          "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
          "329: } {1 {FOREIGN KEY constraint failed}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}