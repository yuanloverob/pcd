{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cb0e04f9295fa954559b5893484b0e23c48d63a6",
      "candidate_info": {
        "commit_hash": "cb0e04f9295fa954559b5893484b0e23c48d63a6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cb0e04f9295fa954559b5893484b0e23c48d63a6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/fuzz4.test"
        ],
        "message": "Fix another problem found by Matthew Denton's new fuzzer.\n\nFossilOrigin-Name: 2b690dbdffe144bd69ca0aa291c230faf3d9d73f7a2985d50f016fe54003f9a9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/fuzz4.test||test/fuzz4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c7dab85535ac42c021977dbd4a39cef5a72e3d9dccff1c5ca5570a1780516cd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:   while( p ){",
          "142:     int op = p->op;",
          "143:     if( p->flags & EP_Generic ) break;",
          "146:      && p->y.pTab!=0",
          "147:     ){",
          "",
          "[Removed Lines]",
          "144:     if( (op==TK_AGG_COLUMN || op==TK_COLUMN",
          "145:           || op==TK_REGISTER || op==TK_TRIGGER)",
          "",
          "[Added Lines]",
          "144:     if( op==TK_REGISTER ) op = p->op2;",
          "145:     if( (op==TK_AGG_COLUMN || op==TK_COLUMN || op==TK_TRIGGER)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:       p = p->pLeft;",
          "159:       continue;",
          "160:     }",
          "162:       pColl = sqlite3GetCollSeq(pParse, ENC(db), 0, p->u.zToken);",
          "163:       break;",
          "164:     }",
          "",
          "[Removed Lines]",
          "161:     if( op==TK_COLLATE || (op==TK_REGISTER && p->op2==TK_COLLATE) ){",
          "",
          "[Added Lines]",
          "161:     if( op==TK_COLLATE ){",
          "",
          "---------------"
        ],
        "test/fuzz4.test||test/fuzz4.test": [
          "File: test/fuzz4.test -> test/fuzz4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018-12-12",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test cases found by Matthew Denton's fuzzer at Chrome.",
          "13: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "19: do_execsql_test fuzz4-100 {",
          "20:   CREATE TABLE Table0 (Col0  NOT NULL DEFAULT (CURRENT_TIME IS 1 > 1));",
          "21:   INSERT OR REPLACE INTO Table0 DEFAULT VALUES ;",
          "22:   SELECT * FROM Table0;",
          "23: } {0}",
          "25: do_execsql_test fuzz4-110 {",
          "26:   CREATE TABLE Table1(",
          "27:     Col0 TEXT DEFAULT (CASE WHEN 1 IS 3530822107858468864",
          "28:                             THEN 1 ELSE quote(1) IS 3530822107858468864 END)",
          "29:   );",
          "30:   INSERT INTO Table1 DEFAULT VALUES;",
          "31:   SELECT * FROM Table1;",
          "32: } {0}",
          "34: do_execsql_test fuzz4-200 {",
          "35:   CREATE TABLE Table2a(",
          "36:      Col0  NOT NULL   DEFAULT (CURRENT_TIME IS 1  IS NOT 1  > 1)",
          "37:   );",
          "38:   INSERT OR REPLACE INTO Table2a DEFAULT VALUES;",
          "39:   SELECT * FROM Table2a;",
          "40: } {0}",
          "42: do_execsql_test fuzz4-210 {",
          "43:   CREATE TABLE Table2b (Col0  NOT NULL  DEFAULT (CURRENT_TIME  IS NOT FALSE)) ;",
          "44:   INSERT OR REPLACE INTO Table2b DEFAULT VALUES ;",
          "45:   SELECT * FROM Table2b;",
          "46: } {1}",
          "48: do_execsql_test fuzz4-300 {",
          "49:   CREATE TABLE Table3 (Col0 DEFAULT (CURRENT_TIMESTAMP BETWEEN 1 AND 1));",
          "50:   INSERT INTO Table3 DEFAULT VALUES;",
          "51:   SELECT * FROM Table3;",
          "52: } {0}",
          "54: do_execsql_test fuzz4-400 {",
          "55:   CREATE TABLE Table4 (Col0 DEFAULT (1 BETWEEN CURRENT_TIMESTAMP AND 1));",
          "56:   INSERT INTO Table4 DEFAULT VALUES;",
          "57:   SELECT * FROM Table4;",
          "58: } {0}",
          "60: do_execsql_test fuzz4-500 {",
          "61:   CREATE TABLE Table5 (Col0 DEFAULT (1 BETWEEN 1 AND CURRENT_TIMESTAMP));",
          "62:   INSERT INTO Table5 DEFAULT VALUES;",
          "63:   SELECT * FROM Table5;",
          "64: } {1}",
          "66: do_execsql_test fuzz4-600 {",
          "67:   CREATE TEMPORARY TABLE Table6(",
          "68:     Col0 DEFAULT (CASE x'5d' WHEN 1 THEN",
          "69:         CASE CURRENT_TIMESTAMP WHEN 1 THEN 1 ELSE 1 END",
          "70:         ELSE CASE WHEN 1 THEN FALSE END  END )",
          "71:   );",
          "72:   INSERT INTO temp.Table6 DEFAULT VALUES ;",
          "73:   SELECT * FROM Table6;",
          "74: } {0}",
          "75: do_execsql_test fuzz4-610 {",
          "76:   WITH TableX AS (SELECT DISTINCT * ORDER BY 1  , 1 COLLATE RTRIM)",
          "77:       DELETE FROM Table6  WHERE Col0 || +8388608  ;",
          "78:   SELECT * FROM Table6;",
          "79: } {}",
          "82: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e70fa7feba0b07eb1b5fe4f5373182875e709b32",
      "candidate_info": {
        "commit_hash": "e70fa7feba0b07eb1b5fe4f5373182875e709b32",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e70fa7feba0b07eb1b5fe4f5373182875e709b32",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h"
        ],
        "message": "Take the declared column time into account when computing the values for generated columns, and apply appropriate affinity.\n\nFossilOrigin-Name: 9e04ba22dfce3998e61331ac229ff543ecccc590284c9dd5def21efbe594fba0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1fbd7438611174aa594485241c8cc2f4ea6d09c57ef2fc16c8995e8061fdfdd6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3395:   }",
          "3396: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3398: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3403: void sqlite3ExprCodeGeneratedColumn(",
          "3404:   Parse *pParse,",
          "3405:   Column *pCol,",
          "3406:   int regOut",
          "3407: ){",
          "3408:   sqlite3ExprCode(pParse, pCol->pDflt, regOut);",
          "3409:   if( pCol->affinity>=SQLITE_AFF_TEXT ){",
          "3410:     sqlite3VdbeAddOp4(pParse->pVdbe, OP_Affinity, regOut, 1, 0,",
          "3411:                       &pCol->affinity, 1);",
          "3412:   }",
          "3413: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3428:         int savedSelfTab = pParse->iSelfTab;",
          "3429:         pCol->colFlags |= COLFLAG_BUSY;",
          "3430:         pParse->iSelfTab = iTabCur+1;",
          "3432:         pParse->iSelfTab = savedSelfTab;",
          "3433:         pCol->colFlags &= ~COLFLAG_BUSY;",
          "3434:       }",
          "",
          "[Removed Lines]",
          "3431:         sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, regOut);",
          "",
          "[Added Lines]",
          "3449:         sqlite3ExprCodeGeneratedColumn(pParse, pCol, regOut);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3630:             }",
          "3631:             pCol->colFlags |= COLFLAG_BUSY;",
          "3632:             if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3634:             }",
          "3635:             pCol->colFlags &= ~(COLFLAG_BUSY|COLFLAG_NOTAVAIL);",
          "3636:             return iSrc;",
          "",
          "[Removed Lines]",
          "3633:               sqlite3ExprCode(pParse, pCol->pDflt, iSrc);",
          "",
          "[Added Lines]",
          "3651:               sqlite3ExprCodeGeneratedColumn(pParse, pCol, iSrc);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:       if( colFlags & COLFLAG_VIRTUAL ){",
          "242:         assert( pTab->nNVCol+nv == sqlite3TableColumnToStorage(pTab,i) );",
          "245:       }else{",
          "247:         assert( i-nv == sqlite3TableColumnToStorage(pTab,i) );",
          "249:       }",
          "251:     }",
          "252:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ) nv++;",
          "253:   }",
          "",
          "[Removed Lines]",
          "243:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt,",
          "244:                         iRegStore+pTab->nNVCol+nv);",
          "248:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iRegStore+i-nv);",
          "250:       colFlags &= ~COLFLAG_NOTAVAIL;",
          "",
          "[Added Lines]",
          "243:         sqlite3ExprCodeGeneratedColumn(pParse, &pTab->aCol[i],",
          "244:                                        iRegStore+pTab->nNVCol+nv);",
          "248:         sqlite3ExprCodeGeneratedColumn(pParse, &pTab->aCol[i], iRegStore+i-nv);",
          "250:       pTab->aCol[i].colFlags &= ~COLFLAG_NOTAVAIL;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4096: void sqlite3ExprCodeGetColumnOfTable(Vdbe*, Table*, int, int, int);",
          "4097: void sqlite3ExprCodeMove(Parse*, int, int, int);",
          "4098: void sqlite3ExprCode(Parse*, Expr*, int);",
          "4099: void sqlite3ExprCodeCopy(Parse*, Expr*, int);",
          "4100: void sqlite3ExprCodeFactorable(Parse*, Expr*, int);",
          "4101: int sqlite3ExprCodeAtInit(Parse*, Expr*, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4099: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "4100: void sqlite3ExprCodeGeneratedColumn(Parse*, Column*, int);",
          "4101: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83acc14ad4d03c8956a3d46f1ad555a30d092fed",
      "candidate_info": {
        "commit_hash": "83acc14ad4d03c8956a3d46f1ad555a30d092fed",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/83acc14ad4d03c8956a3d46f1ad555a30d092fed",
        "files": [
          "VERSION",
          "configure",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Increase the version number to 3.28.0 for the next release cycle.\n\nFossilOrigin-Name: 6eb38c59a81d27b7c1f3edad84b27a1114df6f1607282b2be1b5de9c7decc512",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9bd92afd0cb0a958441e861c7006b77027125b1ceea0868958ec948b6b3c7bc9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b8ab230dce94ccbca56a204589066bca1201d28",
      "candidate_info": {
        "commit_hash": "7b8ab230dce94ccbca56a204589066bca1201d28",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7b8ab230dce94ccbca56a204589066bca1201d28",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/rowvalue.test"
        ],
        "message": "Merge the row-value fix from trunk.\n\nFossilOrigin-Name: 1fbd7438611174aa594485241c8cc2f4ea6d09c57ef2fc16c8995e8061fdfdd6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1a54743a3d327efc8ecc45b9fde91ddfea3fca36408f9b753453c31f2e4cc69c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:         pExpr->pLeft->x.pSelect->pEList->a[pExpr->iColumn].pExpr",
          "71:     );",
          "72:   }",
          "73:   return pExpr->affExpr;",
          "74: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   if( op==TK_VECTOR ){",
          "74:     return sqlite3ExprAffinity(pExpr->x.pList->a[0].pExpr);",
          "75:   }",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:   SELECT 3 FROM t0 WHERE (aa,1) <= (SELECT +bb,1);",
          "587: } {0 1 3}",
          "589: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589: # 2019-10-22 Ticket 6ef984af8972c2eb",
          "590: do_execsql_test 24.100 {",
          "591:   DROP TABLE t0;",
          "592:   CREATE TABLE t0(c0 TEXT PRIMARY KEY);",
          "593:   INSERT INTO t0(c0) VALUES ('');",
          "594:   SELECT (t0.c0, TRUE) > (CAST(0 AS REAL), FALSE) FROM t0;",
          "595:   SELECT 2 FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE);",
          "596: } {1 2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c332e04310c111eeb3354900e3001b6760279980",
      "candidate_info": {
        "commit_hash": "c332e04310c111eeb3354900e3001b6760279980",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c332e04310c111eeb3354900e3001b6760279980",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Enhancement the progress callback mechanism so that the progress callback is always invoked at least once at the end of a prepared statement if the opcode count has been exceeded.  This makes the progress callback more effective at limiting run times.  This check-in also includes and unrelated performance enhancement to OP_Column.\n\nFossilOrigin-Name: 68cce272e7f7cbc0c319ee8b7ff674d652cb1e95e903d99d848c41dff2b5d304",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 93ae382e97c23c90312739481e47ef7f9bc475a8382c063a2de2986c950c0aec",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     assert( db->nProgressOps!=0 );",
          "824:     nProgressLimit = nVmStep + db->nProgressOps - (nVmStep%db->nProgressOps);",
          "825:     if( db->xProgress(db->pProgressArg) ){",
          "826:       rc = SQLITE_INTERRUPT;",
          "827:       goto abort_due_to_error;",
          "828:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826:       nProgressLimit = 0xffffffff;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1368:   assert( pOp->p1>0 );",
          "1369:   assert( pOp->p1+pOp->p2<=(p->nMem+1 - p->nCursor)+1 );",
          "",
          "[Removed Lines]",
          "1371: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "1374:   if( db->xProgress!=0",
          "1375:    && nVmStep>=nProgressLimit",
          "1376:    && db->xProgress(db->pProgressArg)!=0",
          "1377:   ){",
          "1378:     rc = SQLITE_INTERRUPT;",
          "1379:     goto abort_due_to_error;",
          "1380:   }",
          "1381: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2606:       zEndHdr = zData + aOffset[0];",
          "2607:       testcase( zHdr>=zEndHdr );",
          "2608:       do{",
          "2610:           zHdr++;",
          "2611:           offset64 += sqlite3VdbeOneByteSerialTypeLen(t);",
          "2612:         }else{",
          "2613:           zHdr += sqlite3GetVarint32(zHdr, &t);",
          "2614:           offset64 += sqlite3VdbeSerialTypeLen(t);",
          "2615:         }",
          "2618:       }while( i<=p2 && zHdr<zEndHdr );",
          "",
          "[Removed Lines]",
          "2609:         if( (t = zHdr[0])<0x80 ){",
          "2616:         pC->aType[i++] = t;",
          "2617:         aOffset[i] = (u32)(offset64 & 0xffffffff);",
          "",
          "[Added Lines]",
          "2598:         if( (pC->aType[i] = t = zHdr[0])<0x80 ){",
          "2603:           pC->aType[i] = t;",
          "2606:         aOffset[++i] = (u32)(offset64 & 0xffffffff);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7597: vdbe_return:",
          "7599:   p->aCounter[SQLITE_STMTSTATUS_VM_STEP] += (int)nVmStep;",
          "7600:   sqlite3VdbeLeave(p);",
          "7601:   assert( rc!=SQLITE_OK || nExtraDelete==0",
          "",
          "[Removed Lines]",
          "7598:   testcase( nVmStep>0 );",
          "",
          "[Added Lines]",
          "7587: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "7588:   if( nVmStep>=nProgressLimit && db->xProgress!=0 ){",
          "7589:     if( db->xProgress(db->pProgressArg) ){",
          "7590:       nProgressLimit = 0xffffffff;",
          "7591:       rc = SQLITE_INTERRUPT;",
          "7592:       goto abort_due_to_error;",
          "7593:     }",
          "7594:   }",
          "7595: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}