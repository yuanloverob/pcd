{
  "cve_id": "CVE-2022-36752",
  "cve_desc": "png2webp v1.0.4 was discovered to contain an out-of-bounds write via the function w2p. This vulnerability is exploitable via a crafted png file.",
  "repo": "landfillbaby/png2webp",
  "patch_hash": "8f21ad79b0cd98fc22d5b49734543101946abbff",
  "patch_info": {
    "commit_hash": "8f21ad79b0cd98fc22d5b49734543101946abbff",
    "repo": "landfillbaby/png2webp",
    "commit_url": "https://github.com/landfillbaby/png2webp/commit/8f21ad79b0cd98fc22d5b49734543101946abbff",
    "files": [
      "png2webp.c"
    ],
    "message": "v1.0.5: fix buffer overrun when reading bad WebPs",
    "before_after_code_files": [
      "png2webp.c||png2webp.c"
    ]
  },
  "patch_diff": {
    "png2webp.c||png2webp.c": [
      "File: png2webp.c -> png2webp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include <errno.h>",
      "5: #include <inttypes.h>",
      "6: #include <limits.h>",
      "",
      "[Removed Lines]",
      "3: #define VERSION \"v1.0.4\"",
      "",
      "[Added Lines]",
      "3: #define VERSION \"v1.0.5\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:   }",
      "320:   size_t l = ((uint32_t)(i[4] | (i[5] << 8) | (i[6] << 16) | (i[7] << 24))) + 8;",
      "322:   x = malloc(l);",
      "323:   if(!x) {",
      "324:     PF(\"ERROR reading %s: %s\", IP, *k);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "322:   if(l <= 12",
      "323: #ifdef SSIZE_MAX",
      "324:     || l - 12 > SSIZE_MAX",
      "325: #endif",
      "326:   ) {",
      "327:     PF(\"ERROR reading %s: %s\", IP, k[2]);",
      "328:     goto w2p_close;",
      "329:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ce83e9c365f72c7b107027f9f725e7a084035e72",
      "candidate_info": {
        "commit_hash": "ce83e9c365f72c7b107027f9f725e7a084035e72",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/ce83e9c365f72c7b107027f9f725e7a084035e72",
        "files": [
          "png2webp.c"
        ],
        "message": "PF -> P",
        "before_after_code_files": [
          "png2webp.c||png2webp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   return -1;",
          "58: }",
          "59: static bool exact = 0, force = 0, verbose = 0;",
          "63: #define IP (ip ? ip : \"<stdin>\")",
          "64: #define OP (op ? op : \"<stdout>\")",
          "65: static FILE *openr(char *ip) {",
          "67:   if(!ip) return stdin;",
          "68:   FILE *fp;",
          "69: #ifdef NOFOPENX",
          "70:   int fd = open(ip, O_RDONLY | O_BINARY);",
          "71:   if(fd == -1) {",
          "73:     return 0;",
          "74:   }",
          "75:   if(!(fp = fdopen(fd, \"rb\"))) {",
          "77:     close(fd);",
          "78:     return 0;",
          "79:   }",
          "80: #else",
          "81:   if(!(fp = fopen(ip, \"rb\"))) {",
          "83:     return 0;",
          "84:   }",
          "85: #endif",
          "86:   return fp;",
          "87: }",
          "88: static FILE *openw(char *op) {",
          "90:   if(!op) return stdout;",
          "91:   FILE *fp;",
          "92: #define EO(x) \\",
          "93:   if(!(x)) { \\",
          "95:       strerror(errno)); \\",
          "96:     return 0; \\",
          "97:   }",
          "",
          "[Removed Lines]",
          "60: #define PF(x, ...) fprintf(stderr, x \"\\n\", __VA_ARGS__)",
          "61: #define PFV(...) \\",
          "62:   if(verbose) PF(__VA_ARGS__)",
          "66:   PFV(\"Decoding %s ...\", IP);",
          "72:     PF(\"ERROR opening %s for %s: %s\", ip, \"reading\", strerror(errno));",
          "76:     PF(\"ERROR opening %s for %s: %s\", ip, \"reading\", strerror(errno));",
          "82:     PF(\"ERROR opening %s for %s: %s\", ip, \"reading\", strerror(errno));",
          "89:   PFV(\"Encoding %s ...\", OP);",
          "94:     PF(\"ERROR opening %s for %s: %s\", op, force ? \"writing\" : \"creation\", \\",
          "",
          "[Added Lines]",
          "60: #define P(x, ...) fprintf(stderr, x \"\\n\", __VA_ARGS__)",
          "61: #define PV(...) \\",
          "62:   if(verbose) P(__VA_ARGS__)",
          "66:   PV(\"Decoding %s ...\", IP);",
          "72:     P(\"ERROR opening %s for %s: %s\", ip, \"reading\", strerror(errno));",
          "76:     P(\"ERROR opening %s for %s: %s\", ip, \"reading\", strerror(errno));",
          "82:     P(\"ERROR opening %s for %s: %s\", ip, \"reading\", strerror(errno));",
          "89:   PV(\"Encoding %s ...\", OP);",
          "94:     P(\"ERROR opening %s for %s: %s\", op, force ? \"writing\" : \"creation\", \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:   );",
          "106:   EO(fd != -1)",
          "107:   if(!(fp = fdopen(fd, \"wb\"))) {",
          "109:       strerror(errno));",
          "110:     close(fd);",
          "111:     remove(op);",
          "",
          "[Removed Lines]",
          "108:     PF(\"ERROR opening %s for %s: %s\", op, force ? \"writing\" : \"creation\",",
          "",
          "[Added Lines]",
          "108:     P(\"ERROR opening %s for %s: %s\", op, force ? \"writing\" : \"creation\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133: #endif",
          "134: }",
          "135: static void pngrerr(png_struct *p, const char *s) {",
          "137:   png_longjmp(p, 1);",
          "138: }",
          "139: static void pngwerr(png_struct *p, const char *s) {",
          "141:   png_longjmp(p, 1);",
          "142: }",
          "143: static void pngwarn(png_struct *p, const char *s) {",
          "145: }",
          "146: static int webpwrite(const uint8_t *d, size_t s, const WebPPicture *p) {",
          "147:   return (int)fwrite(d, s, 1, p->custom_ptr);",
          "",
          "[Removed Lines]",
          "136:   PF(\"ERROR reading %s: %s\", (char *)png_get_error_ptr(p), s);",
          "140:   PF(\"ERROR writing %s: %s\", (char *)png_get_error_ptr(p), s);",
          "144:   PF(\"Warning: %s: %s\", (char *)png_get_error_ptr(p), s);",
          "",
          "[Added Lines]",
          "136:   P(\"ERROR reading %s: %s\", (char *)png_get_error_ptr(p), s);",
          "140:   P(\"ERROR writing %s: %s\", (char *)png_get_error_ptr(p), s);",
          "144:   P(\"Warning: %s: %s\", (char *)png_get_error_ptr(p), s);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154: }",
          "155: #define E(x, ...) \\",
          "156:   if(!(x)) { \\",
          "158:     return 1; \\",
          "159:   }",
          "160: static bool p2w(char *ip, char *op) {",
          "",
          "[Removed Lines]",
          "157:     PF(\"ERROR \" __VA_ARGS__); \\",
          "",
          "[Added Lines]",
          "157:     P(\"ERROR \" __VA_ARGS__); \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "174:   png_struct *p =",
          "175:     png_create_read_struct(PNG_LIBPNG_VER_STRING, ip, pngrerr, pngwarn);",
          "176:   if(!p) {",
          "178:     goto p2w_close;",
          "179:   }",
          "180:   n = png_create_info_struct(p);",
          "181:   if(!n) {",
          "183:     goto p2w_close;",
          "184:   }",
          "185:   if(setjmp(png_jmpbuf(p))) {",
          "",
          "[Removed Lines]",
          "177:     PF(\"ERROR reading %s: %s\", IP, *k);",
          "182:     PF(\"ERROR reading %s: %s\", IP, *k);",
          "",
          "[Added Lines]",
          "177:     P(\"ERROR reading %s: %s\", IP, *k);",
          "182:     P(\"ERROR reading %s: %s\", IP, *k);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "197:   int bitdepth, colortype;",
          "198:   png_get_IHDR(p, n, &width, &height, &bitdepth, &colortype, 0, 0, 0);",
          "199:   if(width > 16383 || height > 16383) {",
          "202:       IP, width, height);",
          "203:     goto p2w_close;",
          "204:   }",
          "205:   if((unsigned)bitdepth > 8)",
          "207:   bool trns = png_get_valid(p, n, PNG_INFO_tRNS);",
          "208: #ifdef FIXEDGAMMA",
          "209: #define GAMMA ((uint32_t)gamma) / 1e5",
          "",
          "[Removed Lines]",
          "200:     PF(\"ERROR reading %s: Image too big (%\" PRIu32 \" x %\" PRIu32",
          "201:        \", max. 16383 x 16383 px)\",",
          "206:     PF(\"Warning: %s is 16-bit, will be downsampled to 8-bit\", IP);",
          "",
          "[Added Lines]",
          "200:     P(\"ERROR reading %s: Image too big (%\" PRIu32 \" x %\" PRIu32",
          "201:       \", max. 16383 x 16383 px)\",",
          "206:     P(\"Warning: %s is 16-bit, will be downsampled to 8-bit\", IP);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "234: #ifndef NDEBUG",
          "235:   size_t rowbytes = png_get_rowbytes(p, n);",
          "236:   if(rowbytes != (size_t)4 * width) {",
          "238:       (size_t)4 * width);",
          "239:     goto p2w_close;",
          "240:   }",
          "241: #endif",
          "242:   b = malloc(width * height * 4);",
          "243:   if(!b) {",
          "245:     goto p2w_close;",
          "246:   }",
          "247:   for(unsigned x = (unsigned)passes; x; x--) {",
          "",
          "[Removed Lines]",
          "237:     PF(\"ERROR reading %s: rowbytes is %zu, should be %zu\", IP, rowbytes,",
          "244:     PF(\"ERROR reading %s: %s\", IP, *k);",
          "",
          "[Added Lines]",
          "237:     P(\"ERROR reading %s: rowbytes is %zu, should be %zu\", IP, rowbytes,",
          "244:     P(\"ERROR reading %s: %s\", IP, *k);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "256:   fclose(fp);",
          "257:   char *f[] = {",
          "258:     \"grayscale\", \"???\", \"RGB\", \"paletted\", \"grayscale + alpha\", \"???\", \"RGBA\"};",
          "261:     IP, width, height, pnglen, (double)pnglen * 8 / (width * height), bitdepth,",
          "262:     f[(unsigned)colortype], trns ? \", with transparency\" : \"\",",
          "263:     (unsigned)passes > 1 ? \", interlaced\" : \"\", GAMMA);",
          "264:   WebPConfig c;",
          "265:   if(!WebPConfigPreset(&c, WEBP_PRESET_ICON, 100)) {",
          "267:     goto p2w_free;",
          "268:   }",
          "269:   if(!(fp = openw(op))) goto p2w_free;",
          "",
          "[Removed Lines]",
          "259:   PFV(\"Info: %s:\\nDimensions: %\" PRIu32 \" x %\" PRIu32",
          "260:       \"\\nSize: %zu bytes (%.15g bpp)\\nFormat: %u-bit %s%s%s\\nGamma: %.5g\",",
          "266:     PF(\"ERROR writing %s: %s\", OP, k[3]);",
          "",
          "[Added Lines]",
          "259:   PV(\"Info: %s:\\nDimensions: %\" PRIu32 \" x %\" PRIu32",
          "260:      \"\\nSize: %zu bytes (%.15g bpp)\\nFormat: %u-bit %s%s%s\\nGamma: %.5g\",",
          "266:     P(\"ERROR writing %s: %s\", OP, k[3]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "280:   trns = (trns || (colortype & PNG_COLOR_MASK_ALPHA)) &&",
          "281:     WebPPictureHasTransparency(&o);",
          "282:   if(!WebPEncode(&c, &o)) {",
          "285:     fclose(fp);",
          "286:   p2w_rm:",
          "287:     if(op) remove(op);",
          "288:     goto p2w_free;",
          "289:   }",
          "290:   if(fclose(fp)) {",
          "292:     goto p2w_rm;",
          "293:   }",
          "294:   free(b);",
          "295: #define F s.lossless_features",
          "296: #define C s.palette_size",
          "298: Header size: %u, image data size: %u\\nUses alpha: %s\\n\\",
          "299: Precision bits: histogram=%u transform=%u cache=%u\\n\\",
          "300: Lossless features:%s%s%s%s\\nColors: %s%u\",",
          "",
          "[Removed Lines]",
          "283: #define PFN(x, ...) PF(verbose ? \"\\n\" x \"\\n\" : x, __VA_ARGS__)",
          "284:     PFN(\"ERROR writing %s: %s\", OP, k[o.error_code - 1]);",
          "291:     PFN(\"ERROR closing %s: %s\", OP, strerror(errno));",
          "297:   PFV(\"\\nInfo: %s:\\nDimensions: %u x %u\\nSize: %u bytes (%.15g bpp)\\n\\",
          "",
          "[Added Lines]",
          "283: #define PN(x, ...) P(verbose ? \"\\n\" x \"\\n\" : x, __VA_ARGS__)",
          "284:     PN(\"ERROR writing %s: %s\", OP, k[o.error_code - 1]);",
          "291:     PN(\"ERROR closing %s: %s\", OP, strerror(errno));",
          "297:   PV(\"\\nInfo: %s:\\nDimensions: %u x %u\\nSize: %u bytes (%.15g bpp)\\n\\",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "319:     \"Invalid WebP\", \"???\", \"???\", \"???\", \"I/O error\"};",
          "321:   if(!fread(i, 12, 1, fp)) {",
          "323:     goto w2p_close;",
          "324:   }",
          "325:   if(memcmp(i, (char[4]){\"RIFF\"}, 4) || memcmp(i + 8, (char[4]){\"WEBP\"}, 4)) {",
          "327:     goto w2p_close;",
          "328:   }",
          "329:   uint32_t l = // RIFF header size",
          "330:     ((uint32_t)(i[4] | (i[5] << 8) | (i[6] << 16) | (i[7] << 24))) + 8;",
          "331:   if(l < 28 || l > 0xfffffffe) {",
          "333:     goto w2p_close;",
          "334:   }",
          "335:   x = malloc(l);",
          "336:   if(!x) {",
          "338:     goto w2p_close;",
          "339:   }",
          "340:   memcpy(x, i, 12); // should optimize out",
          "",
          "[Removed Lines]",
          "322:     PF(\"ERROR reading %s: %s\", IP, k[6]);",
          "326:     PF(\"ERROR reading %s: %s\", IP, k[2]);",
          "332:     PF(\"ERROR reading %s: %s\", IP, k[2]);",
          "337:     PF(\"ERROR reading %s: %s\", IP, *k);",
          "",
          "[Added Lines]",
          "322:     P(\"ERROR reading %s: %s\", IP, k[6]);",
          "326:     P(\"ERROR reading %s: %s\", IP, k[2]);",
          "332:     P(\"ERROR reading %s: %s\", IP, k[2]);",
          "337:     P(\"ERROR reading %s: %s\", IP, *k);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "343: #if defined __ANDROID__ && __ANDROID_API__ < 33",
          "344:   if(m > 0x7fffffff) { // https://issuetracker.google.com/240139009",
          "345:     if(!fread(z, 0x7fffffff, 1, fp)) {",
          "347:       goto w2p_close;",
          "348:     }",
          "349:     z += 0x7fffffff;",
          "",
          "[Removed Lines]",
          "346:       PF(\"ERROR reading %s: %s\", IP, k[6]);",
          "",
          "[Added Lines]",
          "346:       P(\"ERROR reading %s: %s\", IP, k[6]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "351:   }",
          "352: #endif",
          "353:   if(!fread(z, m, 1, fp)) {",
          "355:     goto w2p_close;",
          "356:   }",
          "357:   fclose(fp);",
          "",
          "[Removed Lines]",
          "354:     PF(\"ERROR reading %s: %s\", IP, k[6]);",
          "",
          "[Added Lines]",
          "354:     P(\"ERROR reading %s: %s\", IP, k[6]);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "363: #endif",
          "364:   VP8StatusCode r = WebPGetFeatures(x, l, &I);",
          "365:   if(r) {",
          "367:     goto w2p_free;",
          "368:   }",
          "369: #define V I.format",
          "",
          "[Removed Lines]",
          "366:     PF(\"ERROR reading %s: %s\", IP, k[r - 1]);",
          "",
          "[Added Lines]",
          "366:     P(\"ERROR reading %s: %s\", IP, k[r - 1]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "382: #define ANMSTR \"animat\"",
          "383: #define ANMARG",
          "384: #endif",
          "387:     IP, W, H, l, (double)l * 8 / (W * H), A ? \"yes\" : \"no\" FMTARG);",
          "388:   if(I.has_animation) {",
          "390:     goto w2p_free;",
          "391:   }",
          "392: #ifdef LOSSYISERROR",
          "393:   if(V != 2) {",
          "395:     goto w2p_free;",
          "396:   }",
          "397: #endif",
          "398: #define B ((unsigned)(3 + A))",
          "399:   b = malloc(W * H * B);",
          "400:   if(!b) {",
          "402:     goto w2p_free;",
          "403:   }",
          "404: #if defined LOSSYISERROR || defined NOTHREADS",
          "405:   if(!(A ? WebPDecodeRGBAInto : WebPDecodeRGBInto)(",
          "406:        x, l, b, W * H * B, (int)(W * B))) {",
          "408:     goto w2p_free;",
          "409:   }",
          "410: #else",
          "",
          "[Removed Lines]",
          "385:   PFV(\"Info: %s:\\nDimensions: %\" PRIu32 \" x %\" PRIu32 \"\\nSize: %\" PRIu32",
          "386:       \" bytes (%.15g bpp)\\nUses alpha: %s\" FMTSTR,",
          "389:     PF(\"ERROR reading %s: Unsupported feature: \" ANMSTR \"ion\", IP ANMARG);",
          "394:     PF(\"ERROR reading %s: Unsupported feature: %sion\", IP, \"lossy compress\");",
          "401:     PF(\"ERROR reading %s: %s\", IP, *k);",
          "407:     PF(\"ERROR reading %s: %s\", IP, k[2]);",
          "",
          "[Added Lines]",
          "385:   PV(\"Info: %s:\\nDimensions: %\" PRIu32 \" x %\" PRIu32 \"\\nSize: %\" PRIu32",
          "386:      \" bytes (%.15g bpp)\\nUses alpha: %s\" FMTSTR,",
          "389:     P(\"ERROR reading %s: Unsupported feature: \" ANMSTR \"ion\", IP ANMARG);",
          "394:     P(\"ERROR reading %s: Unsupported feature: %sion\", IP, \"lossy compress\");",
          "401:     P(\"ERROR reading %s: %s\", IP, *k);",
          "407:     P(\"ERROR reading %s: %s\", IP, k[2]);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "416:   D.size = W * H * B;",
          "417:   r = WebPDecode(x, l, &c);",
          "418:   if(r) {",
          "420:     goto w2p_free;",
          "421:   }",
          "422: #endif",
          "",
          "[Removed Lines]",
          "419:     PF(\"ERROR reading %s: %s\", IP, k[r - 1]);",
          "",
          "[Added Lines]",
          "419:     P(\"ERROR reading %s: %s\", IP, k[r - 1]);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "426:   openwdone = !!op;",
          "427:   p = png_create_write_struct(PNG_LIBPNG_VER_STRING, op, pngwerr, pngwarn);",
          "428:   if(!p) {",
          "430:     goto w2p_close;",
          "431:   }",
          "432:   n = png_create_info_struct(p);",
          "433:   if(!n) {",
          "435:     goto w2p_close;",
          "436:   }",
          "437:   if(setjmp(png_jmpbuf(p))) {",
          "",
          "[Removed Lines]",
          "429:     PF(\"ERROR writing %s: %s\", OP, *k);",
          "434:     PF(\"ERROR writing %s: %s\", OP, *k);",
          "",
          "[Added Lines]",
          "429:     P(\"ERROR writing %s: %s\", OP, *k);",
          "434:     P(\"ERROR writing %s: %s\", OP, *k);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "463:   free(b);",
          "464:   b = 0;",
          "465:   if(fclose(fp)) {",
          "467:     goto w2p_free;",
          "468:   }",
          "471:     OP, W, H, pnglen, (double)pnglen * 8 / (W * H), 8, A ? \"RGBA\" : \"RGB\", \"\",",
          "472:     \"\", 1 / 2.2);",
          "473:   return 0;",
          "",
          "[Removed Lines]",
          "466:     PF(\"ERROR closing %s: %s\", OP, strerror(errno));",
          "469:   PFV(\"Info: %s:\\nDimensions: %\" PRIu32 \" x %\" PRIu32",
          "470:       \"\\nSize: %zu bytes (%.15g bpp)\\nFormat: %u-bit %s%s%s\\nGamma: %.5g\",",
          "",
          "[Added Lines]",
          "466:     P(\"ERROR closing %s: %s\", OP, strerror(errno));",
          "469:   PV(\"Info: %s:\\nDimensions: %\" PRIu32 \" x %\" PRIu32",
          "470:      \"\\nSize: %zu bytes (%.15g bpp)\\nFormat: %u-bit %s%s%s\\nGamma: %.5g\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9dbc63414feee2d092e4181a8b9b0fcc03a73c83",
      "candidate_info": {
        "commit_hash": "9dbc63414feee2d092e4181a8b9b0fcc03a73c83",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/9dbc63414feee2d092e4181a8b9b0fcc03a73c83",
        "files": [
          "png2webp.c"
        ],
        "message": "v1.0.6: better WebP decoding",
        "before_after_code_files": [
          "png2webp.c||png2webp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <errno.h>",
          "5: #include <inttypes.h>",
          "6: #include <limits.h>",
          "",
          "[Removed Lines]",
          "3: #define VERSION \"v1.0.5\"",
          "",
          "[Added Lines]",
          "3: #define VERSION \"v1.0.6\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "317:     PF(\"ERROR reading %s: %s\", IP, k[2]);",
          "318:     goto w2p_close;",
          "319:   }",
          "327:     PF(\"ERROR reading %s: %s\", IP, k[2]);",
          "328:     goto w2p_close;",
          "329:   }",
          "",
          "[Removed Lines]",
          "320:   size_t l = ((uint32_t)(i[4] | (i[5] << 8) | (i[6] << 16) | (i[7] << 24))) + 8;",
          "322:   if(l <= 12",
          "323: #ifdef SSIZE_MAX",
          "324:     || l - 12 > SSIZE_MAX",
          "325: #endif",
          "326:   ) {",
          "",
          "[Added Lines]",
          "320:   uint32_t l = // RIFF header size",
          "321:     ((uint32_t)(i[4] | (i[5] << 8) | (i[6] << 16) | (i[7] << 24))) + 8;",
          "322:   if(l < 13 || l > 0xfffffffe) { // TODO: 28?",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "333:     goto w2p_close;",
          "334:   }",
          "335:   memcpy(x, i, 12); // should optimize out",
          "337:     PF(\"ERROR reading %s: %s\", IP, k[6]);",
          "338:     goto w2p_close;",
          "339:   }",
          "",
          "[Removed Lines]",
          "336:   if(!fread(x + 12, l - 12, 1, fp)) {",
          "",
          "[Added Lines]",
          "332:   uint8_t *z = x + 12;",
          "333:   uint32_t m = l - 12;",
          "334:   if(m > 0x7fffffff) {",
          "335:     if(!fread(z, 0x7fffffff, 1, fp)) {",
          "336:       PF(\"ERROR reading %s: %s\", IP, k[6]);",
          "337:       goto w2p_close;",
          "338:     }",
          "339:     z += 0x7fffffff;",
          "340:     m -= 0x7fffffff;",
          "341:   }",
          "342:   if(!fread(z, m, 1, fp)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "365: #define ANMSTR \"animat\"",
          "366: #define ANMARG",
          "367: #endif",
          "370:     IP, W, H, l, (double)l * 8 / (W * H), A ? \"yes\" : \"no\" FMTARG);",
          "371:   if(I.has_animation) {",
          "372:     PF(\"ERROR reading %s: Unsupported feature: \" ANMSTR \"ion\", IP ANMARG);",
          "",
          "[Removed Lines]",
          "368:   PFV(\"Info: %s:\\nDimensions: %\" PRIu32 \" x %\" PRIu32",
          "369:       \"\\nSize: %zu bytes (%.15g bpp)\\nUses alpha: %s\" FMTSTR,",
          "",
          "[Added Lines]",
          "374:   PFV(\"Info: %s:\\nDimensions: %\" PRIu32 \" x %\" PRIu32 \"\\nSize: %\" PRIu32",
          "375:       \" bytes (%.15g bpp)\\nUses alpha: %s\" FMTSTR,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49af27a556a13e29e6bd0105045e9d496bcab8dd",
      "candidate_info": {
        "commit_hash": "49af27a556a13e29e6bd0105045e9d496bcab8dd",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/49af27a556a13e29e6bd0105045e9d496bcab8dd",
        "files": [
          "png2webp.c"
        ],
        "message": "v1.1.6",
        "before_after_code_files": [
          "png2webp.c||png2webp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <errno.h>",
          "5: #include <inttypes.h>",
          "6: #include <limits.h>",
          "",
          "[Removed Lines]",
          "3: #define VERSION \"v1.1.5\"",
          "",
          "[Added Lines]",
          "3: #define VERSION \"v1.1.6\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d90ffa4f97e4fe931e5389197654c89260ca2319",
      "candidate_info": {
        "commit_hash": "d90ffa4f97e4fe931e5389197654c89260ca2319",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/d90ffa4f97e4fe931e5389197654c89260ca2319",
        "files": [
          "png2webp.c"
        ],
        "message": "formatting, unsigned passes",
        "before_after_code_files": [
          "png2webp.c||png2webp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   if(!op) return stdout;",
          "102:   FILE *fp;",
          "103: #ifdef NOFOPENX",
          "105: #ifdef _WIN32",
          "106:       S_IREAD | S_IWRITE",
          "107: #else",
          "",
          "[Removed Lines]",
          "104:   int fd = open(op, O_WRONLY | O_CREAT | (force ? O_TRUNC : O_EXCL) | O_BINARY,",
          "",
          "[Added Lines]",
          "104:   int fd = open(op, O_WRONLY | O_BINARY | O_CREAT | (force ? O_TRUNC : O_EXCL),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     S(swap_alpha);",
          "229:     png_set_add_alpha(p, 255, PNG_FILLER_BEFORE);",
          "230:   }",
          "232:   png_read_update_info(p, n);",
          "233: #ifndef NDEBUG",
          "234:   size_t rowbytes = png_get_rowbytes(p, n);",
          "",
          "[Removed Lines]",
          "231:   int passes = S(interlace_handling);",
          "",
          "[Added Lines]",
          "231:   unsigned passes = (unsigned)S(interlace_handling);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "243:     P(\"ERROR reading: %s\", *k);",
          "244:     goto p2w_close;",
          "245:   }",
          "247:     uint8_t *w = (uint8_t *)b;",
          "248:     for(unsigned y = height; y; y--) {",
          "249:       png_read_row(p, w, 0);",
          "",
          "[Removed Lines]",
          "246:   for(unsigned x = (unsigned)passes; x; x--) {",
          "",
          "[Added Lines]",
          "246:   for(unsigned x = passes; x; x--) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "259:      \"\\nSize: %zu bytes (%.15g bpp)\\nFormat: %u-bit %s%s%s\",",
          "260:       width, height, pnglen, (double)pnglen * 8 / (width * height), bitdepth,",
          "261:       f[(unsigned)colortype], trns ? \", with transparency\" : \"\",",
          "263:   WebPConfig c;",
          "264:   if(!WebPConfigPreset(&c, WEBP_PRESET_ICON, 100)) {",
          "265:     P(\"ERROR writing: %s\", k[3]);",
          "",
          "[Removed Lines]",
          "262:       (unsigned)passes > 1 ? \", interlaced\" : \"\");",
          "",
          "[Added Lines]",
          "262:       passes > 1 ? \", interlaced\" : \"\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "329:     goto w2p_close;",
          "330:   }",
          "331:   uint32_t l = // RIFF header size",
          "333:   if(l < 28 || l > 0xfffffffe) {",
          "334:     P(\"ERROR reading: %s\", k[2]);",
          "335:     goto w2p_close;",
          "",
          "[Removed Lines]",
          "332:       ((uint32_t)(i[4] | (i[5] << 8) | (i[6] << 16) | (i[7] << 24))) + 8;",
          "",
          "[Added Lines]",
          "332:       (uint32_t)(i[4] | (i[5] << 8) | (i[6] << 16) | (i[7] << 24)) + 8;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "382: #endif",
          "383:   PV(\"Input info:\\nDimensions: %\" PRIu32 \" x %\" PRIu32 \"\\nSize: %\" PRIu32",
          "384:      \" bytes (%.15g bpp)\\nUses alpha: %s\" FMTSTR,",
          "386:   if(I.has_animation) {",
          "387:     P(\"ERROR reading: %s\", \"Unsupported feature: animation\");",
          "388:     goto w2p_free;",
          "",
          "[Removed Lines]",
          "385:       W, H, l, (double)l * 8 / (W * H), A ? \"yes\" : \"no\" FMTARG);",
          "",
          "[Added Lines]",
          "385:       W, H, l, l * 8. / (W * H), A ? \"yes\" : \"no\" FMTARG);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "538: #ifdef NOVLA",
          "539:       char *op = malloc(len + 5);",
          "540:       if(!op) {",
          "542:  return 1;",
          "543:       }",
          "544: #elif defined __GNUC__",
          "",
          "[Removed Lines]",
          "541:  P(\"ERROR adding .%s extension to %s: Out of memory\", \"png\", *argv);",
          "",
          "[Added Lines]",
          "541:  P(\"ERROR adding %s extension to %s: Out of memory\", \".png\", *argv);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "568: #ifdef NOVLA",
          "569:       char *op = malloc(len + 6);",
          "570:       if(!op) {",
          "572:  return 1;",
          "573:       }",
          "574: #elif defined __GNUC__",
          "",
          "[Removed Lines]",
          "571:  P(\"ERROR adding .%s extension to %s: Out of memory\", \"webp\", *argv);",
          "",
          "[Added Lines]",
          "571:  P(\"ERROR adding %s extension to %s: Out of memory\", \".webp\", *argv);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd34558a2c837d7a59ca5b00f0a69a2f85a7e150",
      "candidate_info": {
        "commit_hash": "fd34558a2c837d7a59ca5b00f0a69a2f85a7e150",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/fd34558a2c837d7a59ca5b00f0a69a2f85a7e150",
        "files": [
          "png2webp.c"
        ],
        "message": "explain fread split; min webp is definitely 28",
        "before_after_code_files": [
          "png2webp.c||png2webp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #if CHAR_BIT != 8",
          "13: #error \"char isn't 8-bit\"",
          "14: #endif",
          "15: #if __STDC_VERSION__ < 201112L && !defined NOFOPENX",
          "16: #define NOFOPENX",
          "17: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #if SIZE_MAX < 0xffffffff",
          "16: #error \"size_t isn't at least 32-bit\"",
          "17: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:   }",
          "320:   uint32_t l = // RIFF header size",
          "321:     ((uint32_t)(i[4] | (i[5] << 8) | (i[6] << 16) | (i[7] << 24))) + 8;",
          "323:     PF(\"ERROR reading %s: %s\", IP, k[2]);",
          "324:     goto w2p_close;",
          "325:   }",
          "",
          "[Removed Lines]",
          "322:   if(l < 13 || l > 0xfffffffe) { // TODO: 28?",
          "",
          "[Added Lines]",
          "325:   if(l < 28 || l > 0xfffffffe) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}