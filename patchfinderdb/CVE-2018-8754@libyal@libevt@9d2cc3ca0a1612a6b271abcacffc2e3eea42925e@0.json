{
  "cve_id": "CVE-2018-8754",
  "cve_desc": "The libevt_record_values_read_event() function in libevt_record_values.c in libevt before 2018-03-17 does not properly check for out-of-bounds values of user SID data size, strings size, or data size. NOTE: the vendor has disputed this as described in libyal/libevt issue 5 on GitHub",
  "repo": "libyal/libevt",
  "patch_hash": "9d2cc3ca0a1612a6b271abcacffc2e3eea42925e",
  "patch_info": {
    "commit_hash": "9d2cc3ca0a1612a6b271abcacffc2e3eea42925e",
    "repo": "libyal/libevt",
    "commit_url": "https://github.com/libyal/libevt/commit/9d2cc3ca0a1612a6b271abcacffc2e3eea42925e",
    "files": [
      "configure.ac",
      "libevt.nuspec",
      "libevt/libevt_libfvalue.h",
      "libevt/libevt_record_values.c",
      "m4/libcdata.m4",
      "m4/libcsplit.m4",
      "m4/libfdata.m4",
      "runtests.sh"
    ],
    "message": "Applied updates and addition boundary checks for corrupted data",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "libevt.nuspec||libevt.nuspec",
      "libevt/libevt_libfvalue.h||libevt/libevt_libfvalue.h",
      "libevt/libevt_record_values.c||libevt/libevt_record_values.c",
      "m4/libcdata.m4||m4/libcdata.m4",
      "m4/libcsplit.m4||m4/libcsplit.m4",
      "m4/libfdata.m4||m4/libfdata.m4",
      "runtests.sh||runtests.sh"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_INIT(",
      "4:  [libevt],",
      "6:  [joachim.metz@gmail.com])",
      "8: AC_CONFIG_SRCDIR(",
      "",
      "[Removed Lines]",
      "5:  [20180125],",
      "",
      "[Added Lines]",
      "5:  [20180317],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48: dnl Check if wide character type should be enabled",
      "49: AX_COMMON_CHECK_ENABLE_WIDE_CHARACTER_TYPE",
      "51: dnl Check for type definitions",
      "52: AX_TYPES_CHECK_LOCAL",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51: dnl Check if verbose output should be enabled",
      "52: AX_COMMON_CHECK_ENABLE_VERBOSE_OUTPUT",
      "54: dnl Check if debug output should be enabled",
      "55: AX_COMMON_CHECK_ENABLE_DEBUG_OUTPUT",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "146: dnl Check if evttools required headers and functions are available",
      "147: AX_EVTTOOLS_CHECK_LOCAL",
      "155: dnl Check if tests required headers and functions are available",
      "156: AX_TESTS_CHECK_LOCAL",
      "",
      "[Removed Lines]",
      "149: dnl Check if libevt should be build with verbose output",
      "150: AX_COMMON_CHECK_ENABLE_VERBOSE_OUTPUT",
      "152: dnl Check if libevt should be build with debug output",
      "153: AX_COMMON_CHECK_ENABLE_DEBUG_OUTPUT",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "libevt.nuspec||libevt.nuspec": [
      "File: libevt.nuspec -> libevt.nuspec",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: <package >",
      "3:   <metadata>",
      "4:     <id>libevt</id>",
      "6:     <authors>Joachim Metz</authors>",
      "7:     <owners>joachimmetz</owners>",
      "8:     <licenseUrl>https://raw.githubusercontent.com/libyal/libevt/master/COPYING</licenseUrl>",
      "",
      "[Removed Lines]",
      "5:     <version>20180125</version>",
      "",
      "[Added Lines]",
      "5:     <version>20180317</version>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "10:     <requireLicenseAcceptance>false</requireLicenseAcceptance>",
      "11:     <title>libevt</title>",
      "12:     <description>Library to access the Windows Event Log (EVT) format</description>",
      "14:     <copyright>Copyright (C) 2011-2018</copyright>",
      "15:     <tags>native</tags>",
      "16:   </metadata>",
      "",
      "[Removed Lines]",
      "13:     <releaseNotes>Release of libevt 20180125</releaseNotes>",
      "",
      "[Added Lines]",
      "13:     <releaseNotes>Release of libevt 20180317</releaseNotes>",
      "",
      "---------------"
    ],
    "libevt/libevt_libfvalue.h||libevt/libevt_libfvalue.h": [
      "File: libevt/libevt_libfvalue.h -> libevt/libevt_libfvalue.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: #if defined( HAVE_LOCAL_LIBFVALUE )",
      "31: #include <libfvalue_codepage.h>",
      "32: #include <libfvalue_definitions.h>",
      "33: #include <libfvalue_floating_point.h>",
      "34: #include <libfvalue_integer.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: #include <libfvalue_data_handle.h>",
      "",
      "---------------"
    ],
    "libevt/libevt_record_values.c||libevt/libevt_record_values.c": [
      "File: libevt/libevt_record_values.c -> libevt/libevt_record_values.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1157:  }",
      "1158:  if( user_sid_size != 0 )",
      "1159:  {",
      "1160:   if( libfvalue_value_type_initialize(",
      "1161:        &( record_values->user_security_identifier ),",
      "1162:        LIBFVALUE_VALUE_TYPE_NT_SECURITY_IDENTIFIER,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1160:   if( user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) )",
      "1161:   {",
      "1162:    libcerror_error_set(",
      "1163:     error,",
      "1164:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
      "1165:     LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
      "1166:     \"%s: user SID data size value out of bounds.\",",
      "1167:     function );",
      "1169:    goto on_error;",
      "1170:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1218:  }",
      "1219:  if( strings_size != 0 )",
      "1220:  {",
      "1221: #if defined( HAVE_DEBUG_OUTPUT )",
      "1222:   if( libcnotify_verbose != 0 )",
      "1223:   {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1232:   if( strings_size > ( ( record_data_size - 4 ) - strings_offset ) )",
      "1233:   {",
      "1234:    libcerror_error_set(",
      "1235:     error,",
      "1236:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
      "1237:     LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
      "1238:     \"%s: strings size value out of bounds.\",",
      "1239:     function );",
      "1241:    goto on_error;",
      "1242:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1285:  }",
      "1286:  if( data_size != 0 )",
      "1287:  {",
      "1288: #if defined( HAVE_DEBUG_OUTPUT )",
      "1289:   if( libcnotify_verbose != 0 )",
      "1290:   {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1310:   if( data_size > ( ( record_data_size - 4 ) - record_data_offset ) )",
      "1311:   {",
      "1312:    libcerror_error_set(",
      "1313:     error,",
      "1314:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
      "1315:     LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
      "1316:     \"%s: data size value out of bounds.\",",
      "1317:     function );",
      "1319:    goto on_error;",
      "1320:   }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1292:     \"%s: data:\\n\",",
      "1293:     function );",
      "1294:    libcnotify_print_data(",
      "1296:     (size_t) data_size,",
      "1297:     LIBCNOTIFY_PRINT_DATA_FLAG_GROUP_DATA );",
      "1298:   }",
      "",
      "[Removed Lines]",
      "1295:     &( record_data[ data_offset ] ),",
      "",
      "[Added Lines]",
      "1328:     &( record_data[ record_data_offset ] ),",
      "",
      "---------------"
    ],
    "m4/libcdata.m4||m4/libcdata.m4": [
      "File: m4/libcdata.m4 -> m4/libcdata.m4",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: dnl Checks for libcdata or required headers and functions",
      "2: dnl",
      "5: dnl Function to detect if libcdata is available",
      "6: dnl ac_libcdata_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
      "",
      "[Removed Lines]",
      "3: dnl Version: 20170904",
      "",
      "[Added Lines]",
      "3: dnl Version: 20180316",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "123:           [ac_cv_libcdata_dummy=yes],",
      "124:           [ac_cv_libcdata=no])",
      "126:         dnl List functions",
      "127:         AC_CHECK_LIB(",
      "128:           cdata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:         dnl Balanced tree functions",
      "127:         AC_CHECK_LIB(",
      "128:           cdata,",
      "129:           libfdata_btree_initialize,",
      "130:           [ac_cv_libcdata_dummy=yes],",
      "131:           [ac_cv_libcdata=no])",
      "132:         AC_CHECK_LIB(",
      "133:           cdata,",
      "134:           libcdata_btree_free,",
      "135:           [ac_cv_libcdata_dummy=yes],",
      "136:           [ac_cv_libcdata=no])",
      "137:         AC_CHECK_LIB(",
      "138:           cdata,",
      "139:           libcdata_btree_get_number_of_values,",
      "140:           [ac_cv_libcdata_dummy=yes],",
      "141:           [ac_cv_libcdata=no])",
      "142:         AC_CHECK_LIB(",
      "143:           cdata,",
      "144:           libcdata_btree_get_value_by_index,",
      "145:           [ac_cv_libcdata_dummy=yes],",
      "146:           [ac_cv_libcdata=no])",
      "147:         AC_CHECK_LIB(",
      "148:           cdata,",
      "149:           libcdata_btree_get_value_by_value,",
      "150:           [ac_cv_libcdata_dummy=yes],",
      "151:           [ac_cv_libcdata=no])",
      "152:         AC_CHECK_LIB(",
      "153:           cdata,",
      "154:           libcdata_btree_insert_value,",
      "155:           [ac_cv_libcdata_dummy=yes],",
      "156:           [ac_cv_libcdata=no])",
      "157:         AC_CHECK_LIB(",
      "158:           cdata,",
      "159:           libcdata_btree_replace_value,",
      "160:           [ac_cv_libcdata_dummy=yes],",
      "161:           [ac_cv_libcdata=no])",
      "162:         AC_CHECK_LIB(",
      "163:           cdata,",
      "164:           libcdata_btree_remove_value,",
      "165:           [ac_cv_libcdata_dummy=yes],",
      "166:           [ac_cv_libcdata=no])",
      "",
      "---------------"
    ],
    "m4/libcsplit.m4||m4/libcsplit.m4": [
      "File: m4/libcsplit.m4 -> m4/libcsplit.m4",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: dnl Checks for libcsplit or required headers and functions",
      "2: dnl",
      "5: dnl Function to detect if libcsplit is available",
      "6: dnl ac_libcsplit_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
      "",
      "[Removed Lines]",
      "3: dnl Version: 20170903",
      "",
      "[Added Lines]",
      "3: dnl Version: 20180217",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "111:         AS_IF(",
      "112:           [test \"x$ac_cv_enable_wide_character_type\" != xno],",
      "113:           [AC_CHECK_LIB(",
      "115:             libcsplit_wide_string_split,",
      "116:             [ac_cv_libcsplit_dummy=yes],",
      "117:             [ac_cv_libcsplit=no])",
      "",
      "[Removed Lines]",
      "114:           csplit,",
      "",
      "[Added Lines]",
      "114:             csplit,",
      "",
      "---------------"
    ],
    "m4/libfdata.m4||m4/libfdata.m4": [
      "File: m4/libfdata.m4 -> m4/libfdata.m4",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: dnl Functions for libfdata",
      "2: dnl",
      "5: dnl Function to detect if libfdata is available",
      "6: dnl ac_libfdata_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
      "",
      "[Removed Lines]",
      "3: dnl Version: 20170905",
      "",
      "[Added Lines]",
      "3: dnl Version: 20180316",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "49:           [ac_cv_libfdata=no])",
      "51:         dnl Area functions",
      "54:         dnl Balanced tree functions",
      "55:         dnl TODO: add functions",
      "",
      "[Removed Lines]",
      "52:         dnl TODO: add functions",
      "",
      "[Added Lines]",
      "52:         AC_CHECK_LIB(",
      "53:           fdata,",
      "54:           libfdata_area_initialize,",
      "55:           [ac_cv_libfdata_dummy=yes],",
      "56:           [ac_cv_libfdata=no])",
      "57:         AC_CHECK_LIB(",
      "58:           fdata,",
      "59:           libfdata_area_free,",
      "60:           [ac_cv_libfdata_dummy=yes],",
      "61:           [ac_cv_libfdata=no])",
      "62:         AC_CHECK_LIB(",
      "63:           fdata,",
      "64:           libfdata_area_clone,",
      "65:           [ac_cv_libfdata_dummy=yes],",
      "66:           [ac_cv_libfdata=no])",
      "67:         AC_CHECK_LIB(",
      "68:           fdata,",
      "69:           libfdata_area_empty,",
      "70:           [ac_cv_libfdata_dummy=yes],",
      "71:           [ac_cv_libfdata=no])",
      "72:         AC_CHECK_LIB(",
      "73:           fdata,",
      "74:           libfdata_area_resize,",
      "75:           [ac_cv_libfdata_dummy=yes],",
      "76:           [ac_cv_libfdata=no])",
      "77:         AC_CHECK_LIB(",
      "78:           fdata,",
      "79:           libfdata_area_get_number_of_segments,",
      "80:           [ac_cv_libfdata_dummy=yes],",
      "81:           [ac_cv_libfdata=no])",
      "82:         AC_CHECK_LIB(",
      "83:           fdata,",
      "84:           libfdata_area_get_segment_by_index,",
      "85:           [ac_cv_libfdata_dummy=yes],",
      "86:           [ac_cv_libfdata=no])",
      "87:         AC_CHECK_LIB(",
      "88:           fdata,",
      "89:           libfdata_area_set_segment_by_index,",
      "90:           [ac_cv_libfdata_dummy=yes],",
      "91:           [ac_cv_libfdata=no])",
      "92:         AC_CHECK_LIB(",
      "93:           fdata,",
      "94:           libfdata_area_prepend_segment,",
      "95:           [ac_cv_libfdata_dummy=yes],",
      "96:           [ac_cv_libfdata=no])",
      "97:         AC_CHECK_LIB(",
      "98:           fdata,",
      "99:           libfdata_area_append_segment,",
      "100:           [ac_cv_libfdata_dummy=yes],",
      "101:           [ac_cv_libfdata=no])",
      "102:         AC_CHECK_LIB(",
      "103:           fdata,",
      "104:           libfdata_area_get_element_data_size,",
      "105:           [ac_cv_libfdata_dummy=yes],",
      "106:           [ac_cv_libfdata=no])",
      "107:         AC_CHECK_LIB(",
      "108:           fdata,",
      "109:           libfdata_area_get_element_value_at_offset,",
      "110:           [ac_cv_libfdata_dummy=yes],",
      "111:           [ac_cv_libfdata=no])",
      "112:         AC_CHECK_LIB(",
      "113:           fdata,",
      "114:           libfdata_area_set_element_value_at_offset,",
      "115:           [ac_cv_libfdata_dummy=yes],",
      "116:           [ac_cv_libfdata=no])",
      "117:         AC_CHECK_LIB(",
      "118:           fdata,",
      "119:           libfdata_area_get_size,",
      "120:           [ac_cv_libfdata_dummy=yes],",
      "121:           [ac_cv_libfdata=no])",
      "",
      "---------------"
    ],
    "runtests.sh||runtests.sh": [
      "File: runtests.sh -> runtests.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #!/bin/bash",
      "2: # Script that runs the tests",
      "3: #",
      "6: EXIT_SUCCESS=0;",
      "7: EXIT_FAILURE=1;",
      "",
      "[Removed Lines]",
      "4: # Version: 20171210",
      "",
      "[Added Lines]",
      "4: # Version: 20180214",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "202: HAVE_ENABLE_WIDE_CHARACTER_TYPE=$?;",
      "204: echo \"${CONFIGURE_HELP}\" | grep -- '--with-zlib' > /dev/null;",
      "206: HAVE_WITH_ZLIB=$?;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "204: echo \"${CONFIGURE_HELP}\" | grep -- '--enable-verbose-output' > /dev/null;",
      "206: HAVE_ENABLE_VERBOSE_OUTPUT=$?;",
      "208: echo \"${CONFIGURE_HELP}\" | grep -- '--enable-debug-output' > /dev/null;",
      "210: HAVE_ENABLE_DEBUG_OUTPUT=$?;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "230:  exit ${EXIT_FAILURE};",
      "231: fi",
      "233: if test ${HAVE_WITH_ZLIB} -eq 0;",
      "234: then",
      "235:  # Test \"./configure && make && make check\" with fallback zlib implementation.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "241: if test ${HAVE_ENABLE_VERBOSE_OUTPUT} -eq 0 && test ${HAVE_ENABLE_DEBUG_OUTPUT} -eq 0;",
      "242: then",
      "243:  # Test \"./configure && make && make check\" with verbose and debug output.",
      "245:  run_configure_make_check \"--enable-verbose-output --enable-debug-output\";",
      "246:  RESULT=$?;",
      "248:  if test ${RESULT} -ne ${EXIT_SUCCESS};",
      "249:  then",
      "250:   exit ${EXIT_FAILURE};",
      "251:  fi",
      "252: fi",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "573324d1a23a75e04b631cc2def3933f08ed236c",
      "candidate_info": {
        "commit_hash": "573324d1a23a75e04b631cc2def3933f08ed236c",
        "repo": "libyal/libevt",
        "commit_url": "https://github.com/libyal/libevt/commit/573324d1a23a75e04b631cc2def3933f08ed236c",
        "files": [
          ".travis.yml",
          "common/types.h.in",
          "configure.ac",
          "evttools/evttools_libcerror.h",
          "evttools/evttools_libclocale.h",
          "evttools/evttools_libcnotify.h",
          "evttools/evttools_libcpath.h",
          "evttools/evttools_libevt.h",
          "evttools/evttools_libfcache.h",
          "libevt.nuspec",
          "libevt/libevt_extern.h",
          "libevt/libevt_libcdata.h",
          "libevt/libevt_libcerror.h",
          "libevt/libevt_libclocale.h",
          "libevt/libevt_libcnotify.h",
          "libevt/libevt_libfcache.h",
          "m4/libcpath.m4",
          "m4/libfvalue.m4",
          "pyevt/pyevt.c",
          "pyevt/pyevt_libcerror.h",
          "pyevt/pyevt_libclocale.h",
          "tests/evt_test_libcerror.h",
          "tests/evt_test_libclocale.h",
          "tests/evt_test_libcnotify.h",
          "tests/evt_test_libevt.h"
        ],
        "message": "Applied updates",
        "before_after_code_files": [
          "common/types.h.in||common/types.h.in",
          "configure.ac||configure.ac",
          "evttools/evttools_libcerror.h||evttools/evttools_libcerror.h",
          "evttools/evttools_libclocale.h||evttools/evttools_libclocale.h",
          "evttools/evttools_libcnotify.h||evttools/evttools_libcnotify.h",
          "evttools/evttools_libcpath.h||evttools/evttools_libcpath.h",
          "evttools/evttools_libevt.h||evttools/evttools_libevt.h",
          "evttools/evttools_libfcache.h||evttools/evttools_libfcache.h",
          "libevt.nuspec||libevt.nuspec",
          "libevt/libevt_extern.h||libevt/libevt_extern.h",
          "libevt/libevt_libcdata.h||libevt/libevt_libcdata.h",
          "libevt/libevt_libcerror.h||libevt/libevt_libcerror.h",
          "libevt/libevt_libclocale.h||libevt/libevt_libclocale.h",
          "libevt/libevt_libcnotify.h||libevt/libevt_libcnotify.h",
          "libevt/libevt_libfcache.h||libevt/libevt_libfcache.h",
          "m4/libcpath.m4||m4/libcpath.m4",
          "m4/libfvalue.m4||m4/libfvalue.m4",
          "pyevt/pyevt.c||pyevt/pyevt.c",
          "pyevt/pyevt_libcerror.h||pyevt/pyevt_libcerror.h",
          "pyevt/pyevt_libclocale.h||pyevt/pyevt_libclocale.h",
          "tests/evt_test_libcerror.h||tests/evt_test_libcerror.h",
          "tests/evt_test_libclocale.h||tests/evt_test_libclocale.h",
          "tests/evt_test_libcnotify.h||tests/evt_test_libcnotify.h",
          "tests/evt_test_libevt.h||tests/evt_test_libevt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec"
          ]
        }
      },
      "candidate_diff": {
        "common/types.h.in||common/types.h.in": [
          "File: common/types.h.in -> common/types.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: #define PRId32 \"d\"",
          "79: #endif",
          "82: #if !defined( PRId64 )",
          "83: #if defined( WINAPI )",
          "",
          "[Removed Lines]",
          "80: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: #define PRId64 \"lld\"",
          "92: #endif",
          "95: #if !defined( PRIi8 )",
          "96: #define PRIi8 \"i\"",
          "",
          "[Removed Lines]",
          "93: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108: #define PRIi32 \"i\"",
          "110: #endif",
          "113: #if !defined( PRIi64 )",
          "114: #if defined( WINAPI )",
          "",
          "[Removed Lines]",
          "111: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121: #define PRIi64 \"lli\"",
          "123: #endif",
          "126: #if !defined( PRIu8 )",
          "127: #define PRIu8 \"u\"",
          "",
          "[Removed Lines]",
          "124: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139: #define PRIu32 \"u\"",
          "141: #endif",
          "144: #if !defined( PRIu64 )",
          "145: #if defined( WINAPI )",
          "",
          "[Removed Lines]",
          "142: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "152: #define PRIu64 \"llu\"",
          "154: #endif",
          "155: #endif",
          "157: #if !defined( PRIx8 )",
          "158: #define PRIx8 \"x\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: #if !defined( PRIo8 )",
          "158: #define PRIo8 \"o\"",
          "159: #endif",
          "161: #if !defined( PRIo16 )",
          "162: #define PRIo16 \"o\"",
          "163: #endif",
          "165: #if !defined( PRIo32 )",
          "166: #if defined( WINAPI )",
          "167: #define PRIo32 \"I32o\"",
          "169: #else",
          "170: #define PRIo32 \"o\"",
          "172: #endif",
          "175: #if !defined( PRIo64 )",
          "176: #if defined( WINAPI )",
          "177: #define PRIo64 \"I64o\"",
          "179: #elif __WORDSIZE == 64",
          "180: #define PRIo64 \"lo\"",
          "182: #else",
          "183: #define PRIo64 \"llo\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "170: #define PRIx32 \"x\"",
          "172: #endif",
          "175: #if !defined( PRIx64 )",
          "176: #if defined( WINAPI )",
          "",
          "[Removed Lines]",
          "173: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "183: #define PRIx64 \"llx\"",
          "185: #endif",
          "190: #if defined( HAVE_PRINTF_JD )",
          "191: #define PRIjd \"jd\"",
          "",
          "[Removed Lines]",
          "186: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "205: #define PRIju PRIu32",
          "206: #define PRIjx PRIx32",
          "212: #if defined( HAVE_PRINTF_ZD )",
          "213: #define PRIzd \"zd\"",
          "",
          "[Removed Lines]",
          "208: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "233: #define PRIzu PRIu32",
          "234: #define PRIzx PRIx32",
          "",
          "[Removed Lines]",
          "236: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "282: #else",
          "283: #define INT64_MAX (0x7fffffffffffffffULL)",
          "284: #endif",
          "",
          "[Removed Lines]",
          "285: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "292: #else",
          "293: #define UINT64_MAX (0xffffffffffffffffULL)",
          "294: #endif",
          "",
          "[Removed Lines]",
          "295: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "316: #define SSIZE_MAX INT64_MAX",
          "317: #else",
          "318: #define SSIZE_MAX INT32_MAX",
          "321: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: #endif",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "324: #define SSIZE_MAX INT64_MAX",
          "325: #else",
          "326: #define SSIZE_MAX INT32_MAX",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358: #endif",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_INIT(",
          "4:  [libevt],",
          "6:  [joachim.metz@gmail.com])",
          "8: AC_CONFIG_SRCDIR(",
          "",
          "[Removed Lines]",
          "5:  [20180410],",
          "",
          "[Added Lines]",
          "5:  [20180718],",
          "",
          "---------------"
        ],
        "evttools/evttools_libcerror.h||evttools/evttools_libcerror.h": [
          "File: evttools/evttools_libcerror.h -> evttools/evttools_libcerror.h"
        ],
        "evttools/evttools_libclocale.h||evttools/evttools_libclocale.h": [
          "File: evttools/evttools_libclocale.h -> evttools/evttools_libclocale.h"
        ],
        "evttools/evttools_libcnotify.h||evttools/evttools_libcnotify.h": [
          "File: evttools/evttools_libcnotify.h -> evttools/evttools_libcnotify.h"
        ],
        "evttools/evttools_libcpath.h||evttools/evttools_libcpath.h": [
          "File: evttools/evttools_libcpath.h -> evttools/evttools_libcpath.h"
        ],
        "evttools/evttools_libevt.h||evttools/evttools_libevt.h": [
          "File: evttools/evttools_libevt.h -> evttools/evttools_libevt.h"
        ],
        "evttools/evttools_libfcache.h||evttools/evttools_libfcache.h": [
          "File: evttools/evttools_libfcache.h -> evttools/evttools_libfcache.h"
        ],
        "libevt.nuspec||libevt.nuspec": [
          "File: libevt.nuspec -> libevt.nuspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <package >",
          "3:   <metadata>",
          "4:     <id>libevt</id>",
          "6:     <authors>Joachim Metz</authors>",
          "7:     <owners>joachimmetz</owners>",
          "8:     <licenseUrl>https://raw.githubusercontent.com/libyal/libevt/master/COPYING</licenseUrl>",
          "",
          "[Removed Lines]",
          "5:     <version>20180410</version>",
          "",
          "[Added Lines]",
          "5:     <version>20180718</version>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:     <requireLicenseAcceptance>false</requireLicenseAcceptance>",
          "11:     <title>libevt</title>",
          "12:     <description>Library to access the Windows Event Log (EVT) format</description>",
          "14:     <copyright>Copyright (C) 2011-2018</copyright>",
          "15:     <tags>native</tags>",
          "16:   </metadata>",
          "",
          "[Removed Lines]",
          "13:     <releaseNotes>Release of libevt 20180410</releaseNotes>",
          "",
          "[Added Lines]",
          "13:     <releaseNotes>Release of libevt 20180718</releaseNotes>",
          "",
          "---------------"
        ],
        "libevt/libevt_extern.h||libevt/libevt_extern.h": [
          "File: libevt/libevt_extern.h -> libevt/libevt_extern.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include <libevt/extern.h>",
          "40: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #define LIBEVT_EXTERN_VARIABLE LIBEVT_EXTERN",
          "44: #define LIBEVT_EXTERN_VARIABLE extern",
          "",
          "---------------"
        ],
        "libevt/libevt_libcdata.h||libevt/libevt_libcdata.h": [
          "File: libevt/libevt_libcdata.h -> libevt/libevt_libcdata.h"
        ],
        "libevt/libevt_libcerror.h||libevt/libevt_libcerror.h": [
          "File: libevt/libevt_libcerror.h -> libevt/libevt_libcerror.h"
        ],
        "libevt/libevt_libclocale.h||libevt/libevt_libclocale.h": [
          "File: libevt/libevt_libclocale.h -> libevt/libevt_libclocale.h"
        ],
        "libevt/libevt_libcnotify.h||libevt/libevt_libcnotify.h": [
          "File: libevt/libevt_libcnotify.h -> libevt/libevt_libcnotify.h"
        ],
        "libevt/libevt_libfcache.h||libevt/libevt_libfcache.h": [
          "File: libevt/libevt_libfcache.h -> libevt/libevt_libfcache.h"
        ],
        "m4/libcpath.m4||m4/libcpath.m4": [
          "File: m4/libcpath.m4 -> m4/libcpath.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: dnl Checks for libcpath or required headers and functions",
          "2: dnl",
          "5: dnl Function to detect if libcpath is available",
          "6: dnl ac_libcpath_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "",
          "[Removed Lines]",
          "3: dnl Version: 20180407",
          "",
          "[Added Lines]",
          "3: dnl Version: 20180716",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libcpath],",
          "28:         [ac_cv_libcpath=yes],",
          "29:         [ac_cv_libcpath=check])",
          "30:       ])",
          "",
          "[Removed Lines]",
          "27:         [libcpath >= 20120701],",
          "",
          "[Added Lines]",
          "27:         [libcpath >= 20180716],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:           [ac_cv_libcpath=no])",
          "92:         AC_CHECK_LIB(",
          "93:           cpath,",
          "95:           [ac_cv_libcpath_dummy=yes],",
          "96:           [ac_cv_libcpath=no])",
          "97:         AC_CHECK_LIB(",
          "98:           cpath,",
          "100:           [ac_cv_libcpath_dummy=yes],",
          "101:           [ac_cv_libcpath=no])",
          "102:         AC_CHECK_LIB(",
          "103:           cpath,",
          "105:           [ac_cv_libcpath_dummy=yes],",
          "106:           [ac_cv_libcpath=no])",
          "107:         AC_CHECK_LIB(",
          "108:           cpath,",
          "110:           [ac_cv_libcpath_dummy=yes],",
          "111:           [ac_cv_libcpath=no])",
          "",
          "[Removed Lines]",
          "94:           libcpath_path_join,",
          "99:           libcpath_path_make_directory,",
          "104:           libcpath_path_sanitize,",
          "109:           libcpath_path_sanitize_filename,",
          "",
          "[Added Lines]",
          "94:           libcpath_path_get_sanitized_filename,",
          "99:           libcpath_path_get_sanitized_path,",
          "104:           libcpath_path_join,",
          "109:           libcpath_path_make_directory,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129:             [ac_cv_libcpath=no])",
          "130:           AC_CHECK_LIB(",
          "131:             cpath,",
          "133:             [ac_cv_libcpath_dummy=yes],",
          "134:             [ac_cv_libcpath=no])",
          "135:           AC_CHECK_LIB(",
          "136:             cpath,",
          "138:             [ac_cv_libcpath_dummy=yes],",
          "139:             [ac_cv_libcpath=no])",
          "140:           AC_CHECK_LIB(",
          "141:             cpath,",
          "143:             [ac_cv_libcpath_dummy=yes],",
          "144:             [ac_cv_libcpath=no])",
          "145:           AC_CHECK_LIB(",
          "146:             cpath,",
          "148:             [ac_cv_libcpath_dummy=yes],",
          "149:             [ac_cv_libcpath=no])",
          "150:           ])",
          "",
          "[Removed Lines]",
          "132:             libcpath_path_join_wide,",
          "137:             libcpath_path_make_directory_wide,",
          "142:             libcpath_path_sanitize_wide,",
          "147:             libcpath_path_sanitize_filename_wide,",
          "",
          "[Added Lines]",
          "132:             libcpath_path_get_sanitized_filename_wide,",
          "137:             libcpath_path_get_sanitized_path_wide,",
          "142:             libcpath_path_join_wide,",
          "147:             libcpath_path_make_directory_wide,",
          "",
          "---------------"
        ],
        "m4/libfvalue.m4||m4/libfvalue.m4": [
          "File: m4/libfvalue.m4 -> m4/libfvalue.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: dnl Functions for libfvalue",
          "2: dnl",
          "5: dnl Function to detect if libfvalue available",
          "6: dnl ac_libfvalue_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "",
          "[Removed Lines]",
          "3: dnl Version: 20170908",
          "",
          "[Added Lines]",
          "3: dnl Version: 20180410",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "587:       ])",
          "588:     ])",
          "590:   AS_IF(",
          "591:     [test \"x$ac_cv_libfvalue\" = xyes],",
          "592:     [AC_DEFINE(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "590:   dnl Check for debug functions",
          "591:   AS_IF(",
          "592:     [test \"x$ac_cv_libfvalue\" = xyes && test \"x$ac_cv_enable_debug_output\" != xno],",
          "593:     [AC_CHECK_LIB(",
          "594:       fvalue,",
          "595:       libfvalue_value_print,",
          "596:       [ac_cv_libfvalue_dummy=yes],",
          "597:       [ac_cv_libfvalue=no])",
          "598:     ])",
          "",
          "---------------"
        ],
        "pyevt/pyevt.c||pyevt/pyevt.c": [
          "File: pyevt/pyevt.c -> pyevt/pyevt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "550:   goto on_error;",
          "551:  }",
          "552:  Py_IncRef(",
          "555:  PyModule_AddObject(",
          "556:   module,",
          "",
          "[Removed Lines]",
          "553:   (PyObject * ) &pyevt_event_types_type_object );",
          "",
          "[Added Lines]",
          "553:   (PyObject *) &pyevt_event_types_type_object );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "567:   goto on_error;",
          "568:  }",
          "569:  Py_IncRef(",
          "572:  PyModule_AddObject(",
          "573:   module,",
          "",
          "[Removed Lines]",
          "570:   (PyObject * ) &pyevt_file_type_object );",
          "",
          "[Added Lines]",
          "570:   (PyObject *) &pyevt_file_type_object );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "584:   goto on_error;",
          "585:  }",
          "586:  Py_IncRef(",
          "589:  PyModule_AddObject(",
          "590:   module,",
          "",
          "[Removed Lines]",
          "587:   (PyObject * ) &pyevt_file_flags_type_object );",
          "",
          "[Added Lines]",
          "587:   (PyObject *) &pyevt_file_flags_type_object );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "601:   goto on_error;",
          "602:  }",
          "603:  Py_IncRef(",
          "606:  PyModule_AddObject(",
          "607:   module,",
          "",
          "[Removed Lines]",
          "604:   (PyObject * ) &pyevt_record_type_object );",
          "",
          "[Added Lines]",
          "604:   (PyObject *) &pyevt_record_type_object );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "618:   goto on_error;",
          "619:  }",
          "620:  Py_IncRef(",
          "623:  PyModule_AddObject(",
          "624:   module,",
          "",
          "[Removed Lines]",
          "621:   (PyObject * ) &pyevt_records_type_object );",
          "",
          "[Added Lines]",
          "621:   (PyObject *) &pyevt_records_type_object );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "635:   goto on_error;",
          "636:  }",
          "637:  Py_IncRef(",
          "640:  PyModule_AddObject(",
          "641:   module,",
          "",
          "[Removed Lines]",
          "638:   (PyObject * ) &pyevt_strings_type_object );",
          "",
          "[Added Lines]",
          "638:   (PyObject *) &pyevt_strings_type_object );",
          "",
          "---------------"
        ],
        "pyevt/pyevt_libcerror.h||pyevt/pyevt_libcerror.h": [
          "File: pyevt/pyevt_libcerror.h -> pyevt/pyevt_libcerror.h"
        ],
        "pyevt/pyevt_libclocale.h||pyevt/pyevt_libclocale.h": [
          "File: pyevt/pyevt_libclocale.h -> pyevt/pyevt_libclocale.h"
        ],
        "tests/evt_test_libcerror.h||tests/evt_test_libcerror.h": [
          "File: tests/evt_test_libcerror.h -> tests/evt_test_libcerror.h"
        ],
        "tests/evt_test_libclocale.h||tests/evt_test_libclocale.h": [
          "File: tests/evt_test_libclocale.h -> tests/evt_test_libclocale.h"
        ],
        "tests/evt_test_libcnotify.h||tests/evt_test_libcnotify.h": [
          "File: tests/evt_test_libcnotify.h -> tests/evt_test_libcnotify.h"
        ],
        "tests/evt_test_libevt.h||tests/evt_test_libevt.h": [
          "File: tests/evt_test_libevt.h -> tests/evt_test_libevt.h"
        ]
      }
    },
    {
      "candidate_hash": "014eacb83c03a4909f85a5be29c008b1e7e25294",
      "candidate_info": {
        "commit_hash": "014eacb83c03a4909f85a5be29c008b1e7e25294",
        "repo": "libyal/libevt",
        "commit_url": "https://github.com/libyal/libevt/commit/014eacb83c03a4909f85a5be29c008b1e7e25294",
        "files": [
          "appveyor.yml",
          "configure.ac",
          "libevt.nuspec",
          "runtests.sh",
          "tests/evt_test_file.c",
          "tests/evt_test_support.c"
        ],
        "message": "Worked on tests",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "libevt.nuspec||libevt.nuspec",
          "runtests.sh||runtests.sh",
          "tests/evt_test_file.c||tests/evt_test_file.c",
          "tests/evt_test_support.c||tests/evt_test_support.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec",
            "runtests.sh||runtests.sh"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec",
            "runtests.sh||runtests.sh"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_INIT(",
          "4:  [libevt],",
          "6:  [joachim.metz@gmail.com])",
          "8: AC_CONFIG_SRCDIR(",
          "",
          "[Removed Lines]",
          "5:  [20171020],",
          "",
          "[Added Lines]",
          "5:  [20171031],",
          "",
          "---------------"
        ],
        "libevt.nuspec||libevt.nuspec": [
          "File: libevt.nuspec -> libevt.nuspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <package >",
          "3:   <metadata>",
          "4:     <id>libevt</id>",
          "6:     <authors>Joachim Metz</authors>",
          "7:     <owners>joachimmetz</owners>",
          "8:     <licenseUrl>https://raw.githubusercontent.com/libyal/libevt/master/COPYING</licenseUrl>",
          "",
          "[Removed Lines]",
          "5:     <version>20171020</version>",
          "",
          "[Added Lines]",
          "5:     <version>20171031</version>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:     <requireLicenseAcceptance>false</requireLicenseAcceptance>",
          "11:     <title>libevt</title>",
          "12:     <description>Library to access the Windows Event Log (EVT) format</description>",
          "14:     <copyright>Copyright (C) 2011-2017</copyright>",
          "15:     <tags>native</tags>",
          "16:   </metadata>",
          "",
          "[Removed Lines]",
          "13:     <releaseNotes>Release of libevt 20171020</releaseNotes>",
          "",
          "[Added Lines]",
          "13:     <releaseNotes>Release of libevt 20171031</releaseNotes>",
          "",
          "---------------"
        ],
        "runtests.sh||runtests.sh": [
          "File: runtests.sh -> runtests.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/bash",
          "2: # Script that runs the tests",
          "3: #",
          "6: EXIT_SUCCESS=0;",
          "7: EXIT_FAILURE=1;",
          "",
          "[Removed Lines]",
          "4: # Version: 20170717",
          "",
          "[Added Lines]",
          "4: # Version: 20171026",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176: {",
          "177:  PYTHON=$1;",
          "180:  RESULT=$?;",
          "182:  if test ${RESULT} -ne ${EXIT_SUCCESS};",
          "",
          "[Removed Lines]",
          "179:  ${PYTHON} setup.py build;",
          "",
          "[Added Lines]",
          "179:  if test ${CHECK_WITH_STRACE} -eq 1;",
          "180:  then",
          "181:   strace ${PYTHON} setup.py build;",
          "182:  else",
          "183:   ${PYTHON} setup.py build;",
          "184:  fi",
          "",
          "---------------"
        ],
        "tests/evt_test_file.c||tests/evt_test_file.c": [
          "File: tests/evt_test_file.c -> tests/evt_test_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #if !defined( LIBEVT_HAVE_BFIO )",
          "47: int libevt_file_open_file_io_handle(",
          "48:      libevt_file_t *file,",
          "49:      libbfio_handle_t *file_io_handle,",
          "",
          "[Removed Lines]",
          "46: extern \\",
          "",
          "[Added Lines]",
          "46: LIBEVT_EXTERN \\",
          "47: int libevt_check_file_signature_file_io_handle(",
          "48:      libbfio_handle_t *file_io_handle,",
          "49:      libcerror_error_t **error );",
          "51: LIBEVT_EXTERN \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "781:  libbfio_handle_t *file_io_handle = NULL;",
          "782:  libcerror_error_t *error         = NULL;",
          "783:  libevt_file_t *file              = NULL;",
          "785:  int result                       = 0;",
          "",
          "[Removed Lines]",
          "784:  size_t source_length             = 0;",
          "",
          "[Added Lines]",
          "789:  size_t string_length             = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "803:          \"error\",",
          "804:          error );",
          "807:                   source );",
          "809: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "810:  result = libbfio_file_set_name_wide(",
          "811:            file_io_handle,",
          "812:            source,",
          "814:            &error );",
          "815: #else",
          "816:  result = libbfio_file_set_name(",
          "817:            file_io_handle,",
          "818:            source,",
          "820:            &error );",
          "821: #endif",
          "822:  EVT_TEST_ASSERT_EQUAL_INT(",
          "",
          "[Removed Lines]",
          "806:  source_length = system_string_length(",
          "813:            source_length,",
          "819:            source_length,",
          "",
          "[Added Lines]",
          "811:  string_length = system_string_length(",
          "818:            string_length,",
          "824:            string_length,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1601:  return( 0 );",
          "1602: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1612: int evt_test_file_get_record(",
          "1613:      libevt_file_t *file )",
          "1614: {",
          "1615:  libcerror_error_t *error = NULL;",
          "1616:  libevt_record_t *record  = 0;",
          "1617:  int number_of_records    = 0;",
          "1618:  int result               = 0;",
          "1622:  result = libevt_file_get_number_of_records(",
          "1623:            file,",
          "1624:            &number_of_records,",
          "1625:            &error );",
          "1627:  EVT_TEST_ASSERT_NOT_EQUAL_INT(",
          "1628:   \"result\",",
          "1629:   result,",
          "1630:   -1 );",
          "1632:  EVT_TEST_ASSERT_IS_NULL(",
          "1633:   \"error\",",
          "1634:   error );",
          "1636:  if( number_of_records == 0 )",
          "1637:  {",
          "1638:   return( 1 );",
          "1639:  }",
          "1642:  result = libevt_file_get_record(",
          "1643:            file,",
          "1644:            0,",
          "1645:            &record,",
          "1646:            &error );",
          "1648:  EVT_TEST_ASSERT_NOT_EQUAL_INT(",
          "1649:   \"result\",",
          "1650:   result,",
          "1651:   -1 );",
          "1653:  EVT_TEST_ASSERT_IS_NULL(",
          "1654:   \"error\",",
          "1655:   error );",
          "1657:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "1658:   \"record\",",
          "1659:   record );",
          "1661:  result = libevt_record_free(",
          "1662:            &record,",
          "1663:            &error );",
          "1665:  EVT_TEST_ASSERT_EQUAL_INT(",
          "1666:   \"result\",",
          "1667:   result,",
          "1668:   1 );",
          "1670:  EVT_TEST_ASSERT_IS_NULL(",
          "1671:   \"error\",",
          "1672:   error );",
          "1676:  result = libevt_file_get_record(",
          "1677:            NULL,",
          "1678:            0,",
          "1679:            &record,",
          "1680:            &error );",
          "1682:  EVT_TEST_ASSERT_EQUAL_INT(",
          "1683:   \"result\",",
          "1684:   result,",
          "1685:   -1 );",
          "1687:  EVT_TEST_ASSERT_IS_NULL(",
          "1688:   \"record\",",
          "1689:   record );",
          "1691:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "1692:   \"error\",",
          "1693:   error );",
          "1695:  libcerror_error_free(",
          "1696:   &error );",
          "1698:  result = libevt_file_get_record(",
          "1699:            file,",
          "1700:            -1,",
          "1701:            &record,",
          "1702:            &error );",
          "1704:  EVT_TEST_ASSERT_EQUAL_INT(",
          "1705:   \"result\",",
          "1706:   result,",
          "1707:   -1 );",
          "1709:  EVT_TEST_ASSERT_IS_NULL(",
          "1710:   \"record\",",
          "1711:   record );",
          "1713:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "1714:   \"error\",",
          "1715:   error );",
          "1717:  libcerror_error_free(",
          "1718:   &error );",
          "1720:  result = libevt_file_get_record(",
          "1721:            file,",
          "1722:            0,",
          "1723:            NULL,",
          "1724:            &error );",
          "1726:  EVT_TEST_ASSERT_EQUAL_INT(",
          "1727:   \"result\",",
          "1728:   result,",
          "1729:   -1 );",
          "1731:  EVT_TEST_ASSERT_IS_NULL(",
          "1732:   \"record\",",
          "1733:   record );",
          "1735:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "1736:   \"error\",",
          "1737:   error );",
          "1739:  libcerror_error_free(",
          "1740:   &error );",
          "1742:  return( 1 );",
          "1744: on_error:",
          "1745:  if( error != NULL )",
          "1746:  {",
          "1747:   libcerror_error_free(",
          "1748:    &error );",
          "1749:  }",
          "1750:  return( 0 );",
          "1751: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1679:  return( 0 );",
          "1680: }",
          "1684: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1834: int evt_test_file_get_recovered_record(",
          "1835:      libevt_file_t *file )",
          "1836: {",
          "1837:  libcerror_error_t *error          = NULL;",
          "1838:  libevt_record_t *recovered_record = 0;",
          "1839:  int number_of_recovered_records   = 0;",
          "1840:  int result                        = 0;",
          "1844:  result = libevt_file_get_number_of_recovered_records(",
          "1845:            file,",
          "1846:            &number_of_recovered_records,",
          "1847:            &error );",
          "1849:  EVT_TEST_ASSERT_NOT_EQUAL_INT(",
          "1850:   \"result\",",
          "1851:   result,",
          "1852:   -1 );",
          "1854:  EVT_TEST_ASSERT_IS_NULL(",
          "1855:   \"error\",",
          "1856:   error );",
          "1858:  if( number_of_recovered_records == 0 )",
          "1859:  {",
          "1860:   return( 1 );",
          "1861:  }",
          "1864:  result = libevt_file_get_recovered_record(",
          "1865:            file,",
          "1866:            0,",
          "1867:            &recovered_record,",
          "1868:            &error );",
          "1870:  EVT_TEST_ASSERT_NOT_EQUAL_INT(",
          "1871:   \"result\",",
          "1872:   result,",
          "1873:   -1 );",
          "1875:  EVT_TEST_ASSERT_IS_NULL(",
          "1876:   \"error\",",
          "1877:   error );",
          "1879:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "1880:   \"recovered_record\",",
          "1881:   recovered_record );",
          "1883:  result = libevt_record_free(",
          "1884:            &recovered_record,",
          "1885:            &error );",
          "1887:  EVT_TEST_ASSERT_EQUAL_INT(",
          "1888:   \"result\",",
          "1889:   result,",
          "1890:   1 );",
          "1892:  EVT_TEST_ASSERT_IS_NULL(",
          "1893:   \"error\",",
          "1894:   error );",
          "1898:  result = libevt_file_get_recovered_record(",
          "1899:            NULL,",
          "1900:            0,",
          "1901:            &recovered_record,",
          "1902:            &error );",
          "1904:  EVT_TEST_ASSERT_EQUAL_INT(",
          "1905:   \"result\",",
          "1906:   result,",
          "1907:   -1 );",
          "1909:  EVT_TEST_ASSERT_IS_NULL(",
          "1910:   \"recovered_record\",",
          "1911:   recovered_record );",
          "1913:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "1914:   \"error\",",
          "1915:   error );",
          "1917:  libcerror_error_free(",
          "1918:   &error );",
          "1920:  result = libevt_file_get_recovered_record(",
          "1921:            file,",
          "1922:            -1,",
          "1923:            &recovered_record,",
          "1924:            &error );",
          "1926:  EVT_TEST_ASSERT_EQUAL_INT(",
          "1927:   \"result\",",
          "1928:   result,",
          "1929:   -1 );",
          "1931:  EVT_TEST_ASSERT_IS_NULL(",
          "1932:   \"recovered_record\",",
          "1933:   recovered_record );",
          "1935:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "1936:   \"error\",",
          "1937:   error );",
          "1939:  libcerror_error_free(",
          "1940:   &error );",
          "1942:  result = libevt_file_get_recovered_record(",
          "1943:            file,",
          "1944:            0,",
          "1945:            NULL,",
          "1946:            &error );",
          "1948:  EVT_TEST_ASSERT_EQUAL_INT(",
          "1949:   \"result\",",
          "1950:   result,",
          "1951:   -1 );",
          "1953:  EVT_TEST_ASSERT_IS_NULL(",
          "1954:   \"recovered_record\",",
          "1955:   recovered_record );",
          "1957:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "1958:   \"error\",",
          "1959:   error );",
          "1961:  libcerror_error_free(",
          "1962:   &error );",
          "1964:  return( 1 );",
          "1966: on_error:",
          "1967:  if( error != NULL )",
          "1968:  {",
          "1969:   libcerror_error_free(",
          "1970:    &error );",
          "1971:  }",
          "1972:  return( 0 );",
          "1973: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1739: #if !defined( __BORLANDC__ ) || ( __BORLANDC__ >= 0x0560 )",
          "1740:  if( source != NULL )",
          "1741:  {",
          "1742: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "1744:             source,",
          "1745:             &error );",
          "1746: #else",
          "1748:             source,",
          "1749:             &error );",
          "1750: #endif",
          "1752:   EVT_TEST_ASSERT_NOT_EQUAL_INT(",
          "1753:    \"result\",",
          "",
          "[Removed Lines]",
          "1743:   result = libevt_check_file_signature_wide(",
          "1747:   result = libevt_check_file_signature(",
          "",
          "[Added Lines]",
          "2035:   result = libbfio_file_initialize(",
          "2036:             &file_io_handle,",
          "2037:             &error );",
          "2039:   EVT_TEST_ASSERT_EQUAL_INT(",
          "2040:    \"result\",",
          "2041:    result,",
          "2042:    1 );",
          "2044:          EVT_TEST_ASSERT_IS_NOT_NULL(",
          "2045:           \"file_io_handle\",",
          "2046:           file_io_handle );",
          "2048:          EVT_TEST_ASSERT_IS_NULL(",
          "2049:           \"error\",",
          "2050:           error );",
          "2052:   string_length = system_string_length(",
          "2053:                    source );",
          "2056:   result = libbfio_file_set_name_wide(",
          "2057:             file_io_handle,",
          "2059:             string_length,",
          "2062:   result = libbfio_file_set_name(",
          "2063:             file_io_handle,",
          "2065:             string_length,",
          "2068:   EVT_TEST_ASSERT_EQUAL_INT(",
          "2069:    \"result\",",
          "2070:    result,",
          "2071:    1 );",
          "2073:          EVT_TEST_ASSERT_IS_NULL(",
          "2074:           \"error\",",
          "2075:           error );",
          "2077:   result = libevt_check_file_signature_file_io_handle(",
          "2078:             file_io_handle,",
          "2079:             &error );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1788:    evt_test_file_open_close,",
          "1789:    source );",
          "1835:   result = evt_test_file_open_source(",
          "1836:             &file,",
          "1837:             file_io_handle,",
          "",
          "[Removed Lines]",
          "1793:   result = libbfio_file_initialize(",
          "1794:             &file_io_handle,",
          "1795:             &error );",
          "1797:   EVT_TEST_ASSERT_EQUAL_INT(",
          "1798:    \"result\",",
          "1799:    result,",
          "1800:    1 );",
          "1802:          EVT_TEST_ASSERT_IS_NOT_NULL(",
          "1803:           \"file_io_handle\",",
          "1804:           file_io_handle );",
          "1806:          EVT_TEST_ASSERT_IS_NULL(",
          "1807:           \"error\",",
          "1808:           error );",
          "1810:   string_length = system_string_length(",
          "1811:                    source );",
          "1813: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "1814:   result = libbfio_file_set_name_wide(",
          "1815:             file_io_handle,",
          "1816:             source,",
          "1817:             string_length,",
          "1818:             &error );",
          "1819: #else",
          "1820:   result = libbfio_file_set_name(",
          "1821:             file_io_handle,",
          "1822:             source,",
          "1823:             string_length,",
          "1824:             &error );",
          "1825: #endif",
          "1826:   EVT_TEST_ASSERT_EQUAL_INT(",
          "1827:    \"result\",",
          "1828:    result,",
          "1829:    1 );",
          "1831:          EVT_TEST_ASSERT_IS_NULL(",
          "1832:           \"error\",",
          "1833:           error );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1887:    evt_test_file_get_number_of_records,",
          "1888:    file );",
          "1892:   EVT_TEST_RUN_WITH_ARGS(",
          "1893:    \"libevt_file_get_number_of_recovered_records\",",
          "1894:    evt_test_file_get_number_of_recovered_records,",
          "1895:    file );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2177:   EVT_TEST_RUN_WITH_ARGS(",
          "2178:    \"libevt_file_get_record\",",
          "2179:    evt_test_file_get_record,",
          "2180:    file );",
          "2187:   EVT_TEST_RUN_WITH_ARGS(",
          "2188:    \"libevt_file_get_recovered_record\",",
          "2189:    evt_test_file_get_recovered_record,",
          "2190:    file );",
          "",
          "---------------"
        ],
        "tests/evt_test_support.c||tests/evt_test_support.c": [
          "File: tests/evt_test_support.c -> tests/evt_test_support.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include \"evt_test_macros.h\"",
          "39: #include \"evt_test_unused.h\"",
          "41: LIBEVT_EXTERN \\",
          "42: int libevt_check_file_signature_file_io_handle(",
          "43:      libbfio_handle_t *file_io_handle,",
          "44:      libcerror_error_t **error );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: #if !defined( LIBEVT_HAVE_BFIO )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348: int evt_test_check_file_signature_file_io_handle(",
          "349:      const system_character_t *source )",
          "350: {",
          "353:  libbfio_handle_t *file_io_handle = NULL;",
          "354:  libcerror_error_t *error         = NULL;",
          "",
          "[Removed Lines]",
          "351:  uint8_t empty_block[ 512 ];",
          "",
          "[Added Lines]",
          "355:  uint8_t empty_block[ 4096 ];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "484:  memset_result = memory_set(",
          "485:                   empty_block,",
          "486:                   0,",
          "489:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "490:   \"memset_result\",",
          "",
          "[Removed Lines]",
          "487:                   sizeof( uint8_t ) * 512 );",
          "",
          "[Added Lines]",
          "491:                   sizeof( uint8_t ) * 4096 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "510:  result = libbfio_memory_range_set(",
          "511:            file_io_handle,",
          "512:            empty_block,",
          "514:            &error );",
          "516:  EVT_TEST_ASSERT_EQUAL_INT(",
          "",
          "[Removed Lines]",
          "513:            sizeof( uint8_t ) * 512,",
          "",
          "[Added Lines]",
          "517:            sizeof( uint8_t ) * 4096,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47d58f7217b88d99257e6f4d71be2370c1a1cdef",
      "candidate_info": {
        "commit_hash": "47d58f7217b88d99257e6f4d71be2370c1a1cdef",
        "repo": "libyal/libevt",
        "commit_url": "https://github.com/libyal/libevt/commit/47d58f7217b88d99257e6f4d71be2370c1a1cdef",
        "files": [
          "configure.ac",
          "libevt.nuspec",
          "runtests.sh"
        ],
        "message": "Applied updates",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "libevt.nuspec||libevt.nuspec",
          "runtests.sh||runtests.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec",
            "runtests.sh||runtests.sh"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec",
            "runtests.sh||runtests.sh"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_INIT(",
          "4:  [libevt],",
          "6:  [joachim.metz@gmail.com])",
          "8: AC_CONFIG_SRCDIR(",
          "",
          "[Removed Lines]",
          "5:  [20181227],",
          "",
          "[Added Lines]",
          "5:  [20181228],",
          "",
          "---------------"
        ],
        "libevt.nuspec||libevt.nuspec": [
          "File: libevt.nuspec -> libevt.nuspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <package >",
          "3:   <metadata>",
          "4:     <id>libevt</id>",
          "6:     <authors>Joachim Metz</authors>",
          "7:     <owners>joachimmetz</owners>",
          "8:     <licenseUrl>https://raw.githubusercontent.com/libyal/libevt/master/COPYING</licenseUrl>",
          "",
          "[Removed Lines]",
          "5:     <version>20181227</version>",
          "",
          "[Added Lines]",
          "5:     <version>20181228</version>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:     <requireLicenseAcceptance>false</requireLicenseAcceptance>",
          "11:     <title>libevt</title>",
          "12:     <description>Library to access the Windows Event Log (EVT) format</description>",
          "14:     <copyright>Copyright (C) 2011-2018</copyright>",
          "15:     <tags>native</tags>",
          "16:   </metadata>",
          "",
          "[Removed Lines]",
          "13:     <releaseNotes>Release of libevt 20181227</releaseNotes>",
          "",
          "[Added Lines]",
          "13:     <releaseNotes>Release of libevt 20181228</releaseNotes>",
          "",
          "---------------"
        ],
        "runtests.sh||runtests.sh": [
          "File: runtests.sh -> runtests.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/bash",
          "2: # Script that runs the tests",
          "3: #",
          "6: EXIT_SUCCESS=0;",
          "7: EXIT_FAILURE=1;",
          "",
          "[Removed Lines]",
          "4: # Version: 20180905",
          "",
          "[Added Lines]",
          "4: # Version: 20181228",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   return ${EXIT_SUCCESS};",
          "85:  fi",
          "86:  # Using libasan is platform dependent.",
          "88:  then",
          "89:   return ${EXIT_SUCCESS};",
          "90:  fi",
          "",
          "[Removed Lines]",
          "87:  if test ${LIBASAN} != \"/lib64/libasan.so.4\";",
          "",
          "[Added Lines]",
          "87:  if test ${LIBASAN} != \"/lib64/libasan.so.4\" && test ${LIBASAN} != \"/lib64/libasan.so.5\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1483318785cca810d60600878a129bae3d2bf5ff",
      "candidate_info": {
        "commit_hash": "1483318785cca810d60600878a129bae3d2bf5ff",
        "repo": "libyal/libevt",
        "commit_url": "https://github.com/libyal/libevt/commit/1483318785cca810d60600878a129bae3d2bf5ff",
        "files": [
          "configure.ac",
          "libevt.nuspec",
          "msvscpp/evt_test_file/evt_test_file.vcproj",
          "msvscpp/evt_test_support/evt_test_support.vcproj",
          "msvscpp/libevt.sln",
          "msvscpp/libexe/libexe.vcproj",
          "tests/Makefile.am",
          "tests/evt_test_file.c",
          "tests/evt_test_functions.c",
          "tests/evt_test_functions.h",
          "tests/evt_test_support.c"
        ],
        "message": "Worked on tests",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "libevt.nuspec||libevt.nuspec",
          "msvscpp/evt_test_file/evt_test_file.vcproj||msvscpp/evt_test_file/evt_test_file.vcproj",
          "msvscpp/evt_test_support/evt_test_support.vcproj||msvscpp/evt_test_support/evt_test_support.vcproj",
          "msvscpp/libevt.sln||msvscpp/libevt.sln",
          "msvscpp/libexe/libexe.vcproj||msvscpp/libexe/libexe.vcproj",
          "tests/Makefile.am||tests/Makefile.am",
          "tests/evt_test_file.c||tests/evt_test_file.c",
          "tests/evt_test_functions.c||tests/evt_test_functions.c",
          "tests/evt_test_functions.h||tests/evt_test_functions.h",
          "tests/evt_test_support.c||tests/evt_test_support.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_INIT(",
          "4:  [libevt],",
          "6:  [joachim.metz@gmail.com])",
          "8: AC_CONFIG_SRCDIR(",
          "",
          "[Removed Lines]",
          "5:  [20171017],",
          "",
          "[Added Lines]",
          "5:  [20171020],",
          "",
          "---------------"
        ],
        "libevt.nuspec||libevt.nuspec": [
          "File: libevt.nuspec -> libevt.nuspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <package >",
          "3:   <metadata>",
          "4:     <id>libevt</id>",
          "6:     <authors>Joachim Metz</authors>",
          "7:     <owners>joachimmetz</owners>",
          "8:     <licenseUrl>https://raw.githubusercontent.com/libyal/libevt/master/COPYING</licenseUrl>",
          "",
          "[Removed Lines]",
          "5:     <version>20171017</version>",
          "",
          "[Added Lines]",
          "5:     <version>20171020</version>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:     <requireLicenseAcceptance>false</requireLicenseAcceptance>",
          "11:     <title>libevt</title>",
          "12:     <description>Library to access the Windows Event Log (EVT) format</description>",
          "14:     <copyright>Copyright (C) 2011-2017</copyright>",
          "15:     <tags>native</tags>",
          "16:   </metadata>",
          "",
          "[Removed Lines]",
          "13:     <releaseNotes>Release of libevt 20171017</releaseNotes>",
          "",
          "[Added Lines]",
          "13:     <releaseNotes>Release of libevt 20171020</releaseNotes>",
          "",
          "---------------"
        ],
        "msvscpp/evt_test_file/evt_test_file.vcproj||msvscpp/evt_test_file/evt_test_file.vcproj": [
          "File: msvscpp/evt_test_file/evt_test_file.vcproj -> msvscpp/evt_test_file/evt_test_file.vcproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:     RelativePath=\"..\\..\\tests\\evt_test_file.c\"",
          "180:     >",
          "181:    </File>",
          "182:    <File",
          "183:     RelativePath=\"..\\..\\tests\\evt_test_getopt.c\"",
          "184:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:    <File",
          "183:     RelativePath=\"..\\..\\tests\\evt_test_functions.c\"",
          "184:     >",
          "185:    </File>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:    Filter=\"h;hpp;hxx;hm;inl;inc;xsd\"",
          "194:    UniqueIdentifier=\"{93995380-89BD-4b04-88EB-625FBE52EBFB}\"",
          "195:    >",
          "196:    <File",
          "197:     RelativePath=\"..\\..\\tests\\evt_test_getopt.h\"",
          "198:     >",
          "199:    </File>",
          "200:    <File",
          "201:     RelativePath=\"..\\..\\tests\\evt_test_libcerror.h\"",
          "202:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:    <File",
          "201:     RelativePath=\"..\\..\\tests\\evt_test_functions.h\"",
          "202:     >",
          "203:    </File>",
          "208:    <File",
          "209:     RelativePath=\"..\\..\\tests\\evt_test_libbfio.h\"",
          "210:     >",
          "211:    </File>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:     RelativePath=\"..\\..\\tests\\evt_test_memory.h\"",
          "226:     >",
          "227:    </File>",
          "228:   </Filter>",
          "229:   <Filter",
          "230:    Name=\"Resource Files\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:    <File",
          "241:     RelativePath=\"..\\..\\tests\\evt_test_unused.h\"",
          "242:     >",
          "243:    </File>",
          "",
          "---------------"
        ],
        "msvscpp/evt_test_support/evt_test_support.vcproj||msvscpp/evt_test_support/evt_test_support.vcproj": [
          "File: msvscpp/evt_test_support/evt_test_support.vcproj -> msvscpp/evt_test_support/evt_test_support.vcproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:    Filter=\"cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx\"",
          "176:    UniqueIdentifier=\"{4FC737F1-C7A5-4376-A066-2A32D752A2FF}\"",
          "177:    >",
          "178:    <File",
          "179:     RelativePath=\"..\\..\\tests\\evt_test_getopt.c\"",
          "180:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:    <File",
          "179:     RelativePath=\"..\\..\\tests\\evt_test_functions.c\"",
          "180:     >",
          "181:    </File>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:    Filter=\"h;hpp;hxx;hm;inl;inc;xsd\"",
          "190:    UniqueIdentifier=\"{93995380-89BD-4b04-88EB-625FBE52EBFB}\"",
          "191:    >",
          "192:    <File",
          "193:     RelativePath=\"..\\..\\tests\\evt_test_getopt.h\"",
          "194:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:    <File",
          "197:     RelativePath=\"..\\..\\tests\\evt_test_functions.h\"",
          "198:     >",
          "199:    </File>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "221:     RelativePath=\"..\\..\\tests\\evt_test_macros.h\"",
          "222:     >",
          "223:    </File>",
          "224:   </Filter>",
          "225:   <Filter",
          "226:    Name=\"Resource Files\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:    <File",
          "233:     RelativePath=\"..\\..\\tests\\evt_test_unused.h\"",
          "234:     >",
          "235:    </File>",
          "",
          "---------------"
        ],
        "msvscpp/libevt.sln||msvscpp/libevt.sln": [
          "File: msvscpp/libevt.sln -> msvscpp/libevt.sln",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: EndProject",
          "63: Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"evt_test_file\", \"evt_test_file\\evt_test_file.vcproj\", \"{9D76992F-770E-42E5-B692-E03116831E42}\"",
          "64:  ProjectSection(ProjectDependencies) = postProject",
          "65:   {BC27FF34-C859-4A1A-95D6-FC89952E1910} = {BC27FF34-C859-4A1A-95D6-FC89952E1910}",
          "66:   {5304AD69-D449-4589-B2C9-E4607E56A51D} = {5304AD69-D449-4589-B2C9-E4607E56A51D}",
          "67:   {CEDF8919-00B2-4D8A-88CC-84ADB2D2FF89} = {CEDF8919-00B2-4D8A-88CC-84ADB2D2FF89}",
          "68:   {B9332DC8-7594-47DF-80C1-38922E0F4DFB} = {B9332DC8-7594-47DF-80C1-38922E0F4DFB}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:   {41CFAFBF-A1C8-4704-AFEF-31979E6452B9} = {41CFAFBF-A1C8-4704-AFEF-31979E6452B9}",
          "66:   {3FFB9C05-1145-45A7-9ADE-5C8D70FBD7CA} = {3FFB9C05-1145-45A7-9ADE-5C8D70FBD7CA}",
          "67:   {4C93BDD3-1804-47F3-9B34-F2DE0CAE1AE0} = {4C93BDD3-1804-47F3-9B34-F2DE0CAE1AE0}",
          "69:   {B86FB73A-4ACC-42DE-9545-586D93955B06} = {B86FB73A-4ACC-42DE-9545-586D93955B06}",
          "",
          "---------------"
        ],
        "msvscpp/libexe/libexe.vcproj||msvscpp/libexe/libexe.vcproj": [
          "File: msvscpp/libexe/libexe.vcproj -> msvscpp/libexe/libexe.vcproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:     RelativePath=\"..\\..\\libexe\\libexe_io_handle.c\"",
          "179:     >",
          "180:    </File>",
          "193:    <File",
          "194:     RelativePath=\"..\\..\\libexe\\libexe_notify.c\"",
          "195:     >",
          "",
          "[Removed Lines]",
          "181:    <File",
          "182:     RelativePath=\"..\\..\\libexe\\libexe_le_header.c\"",
          "183:     >",
          "184:    </File>",
          "185:    <File",
          "186:     RelativePath=\"..\\..\\libexe\\libexe_mz_header.c\"",
          "187:     >",
          "188:    </File>",
          "189:    <File",
          "190:     RelativePath=\"..\\..\\libexe\\libexe_ne_header.c\"",
          "191:     >",
          "192:    </File>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:     RelativePath=\"..\\..\\libexe\\exe_file_header.h\"",
          "221:     >",
          "222:    </File>",
          "239:    <File",
          "240:     RelativePath=\"..\\..\\libexe\\exe_section_table.h\"",
          "241:     >",
          "",
          "[Removed Lines]",
          "223:    <File",
          "224:     RelativePath=\"..\\..\\libexe\\exe_le_header.h\"",
          "225:     >",
          "226:    </File>",
          "227:    <File",
          "228:     RelativePath=\"..\\..\\libexe\\exe_mz_header.h\"",
          "229:     >",
          "230:    </File>",
          "231:    <File",
          "232:     RelativePath=\"..\\..\\libexe\\exe_ne_header.h\"",
          "233:     >",
          "234:    </File>",
          "235:    <File",
          "236:     RelativePath=\"..\\..\\libexe\\exe_pe_header.h\"",
          "237:     >",
          "238:    </File>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "284:     RelativePath=\"..\\..\\libexe\\libexe_io_handle.h\"",
          "285:     >",
          "286:    </File>",
          "291:    <File",
          "292:     RelativePath=\"..\\..\\libexe\\libexe_libbfio.h\"",
          "293:     >",
          "",
          "[Removed Lines]",
          "287:    <File",
          "288:     RelativePath=\"..\\..\\libexe\\libexe_le_header.h\"",
          "289:     >",
          "290:    </File>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "324:     RelativePath=\"..\\..\\libexe\\libexe_libuna.h\"",
          "325:     >",
          "326:    </File>",
          "335:    <File",
          "336:     RelativePath=\"..\\..\\libexe\\libexe_notify.h\"",
          "337:     >",
          "",
          "[Removed Lines]",
          "327:    <File",
          "328:     RelativePath=\"..\\..\\libexe\\libexe_mz_header.h\"",
          "329:     >",
          "330:    </File>",
          "331:    <File",
          "332:     RelativePath=\"..\\..\\libexe\\libexe_ne_header.h\"",
          "333:     >",
          "334:    </File>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/Makefile.am||tests/Makefile.am": [
          "File: tests/Makefile.am -> tests/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: evt_test_file_SOURCES = \\",
          "65:  evt_test_file.c \\",
          "66:  evt_test_getopt.c evt_test_getopt.h \\",
          "67:  evt_test_libcerror.h \\",
          "68:  evt_test_libclocale.h \\",
          "69:  evt_test_libcnotify.h \\",
          "70:  evt_test_libevt.h \\",
          "71:  evt_test_libuna.h \\",
          "72:  evt_test_macros.h \\",
          "75: evt_test_file_LDADD = \\",
          "76:  @LIBUNA_LIBADD@ \\",
          "77:  @LIBCNOTIFY_LIBADD@ \\",
          "78:  @LIBCLOCALE_LIBADD@ \\",
          "79:  @LIBCDATA_LIBADD@ \\",
          "",
          "[Removed Lines]",
          "73:  evt_test_memory.c evt_test_memory.h",
          "",
          "[Added Lines]",
          "66:  evt_test_functions.c evt_test_functions.h \\",
          "68:  evt_test_libbfio.h \\",
          "75:  evt_test_memory.c evt_test_memory.h \\",
          "76:  evt_test_unused.h",
          "79:  @LIBBFIO_LIBADD@ \\",
          "80:  @LIBCPATH_LIBADD@ \\",
          "81:  @LIBCFILE_LIBADD@ \\",
          "83:  @LIBCSPLIT_LIBADD@ \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:  @LIBCERROR_LIBADD@",
          "130: evt_test_support_SOURCES = \\",
          "131:  evt_test_getopt.c evt_test_getopt.h \\",
          "132:  evt_test_libbfio.h \\",
          "133:  evt_test_libcerror.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:  evt_test_functions.c evt_test_functions.h \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:  evt_test_libevt.h \\",
          "137:  evt_test_libuna.h \\",
          "138:  evt_test_macros.h \\",
          "141: evt_test_support_LDADD = \\",
          "142:  @LIBBFIO_LIBADD@ \\",
          "",
          "[Removed Lines]",
          "139:  evt_test_support.c",
          "",
          "[Added Lines]",
          "147:  evt_test_support.c \\",
          "148:  evt_test_unused.h",
          "",
          "---------------"
        ],
        "tests/evt_test_file.c||tests/evt_test_file.c": [
          "File: tests/evt_test_file.c -> tests/evt_test_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <stdlib.h>",
          "31: #endif",
          "33: #include \"evt_test_getopt.h\"",
          "34: #include \"evt_test_libcerror.h\"",
          "36: #include \"evt_test_libevt.h\"",
          "38: #include \"evt_test_macros.h\"",
          "39: #include \"evt_test_memory.h\"",
          "212: #endif",
          "452: int evt_test_file_open_source(",
          "453:      libevt_file_t **file,",
          "455:      libcerror_error_t **error )",
          "456: {",
          "457:  static char *function = \"evt_test_file_open_source\";",
          "",
          "[Removed Lines]",
          "35: #include \"evt_test_libclocale.h\"",
          "37: #include \"evt_test_libuna.h\"",
          "41: #if defined( HAVE_WIDE_SYSTEM_CHARACTER ) && SIZEOF_WCHAR_T != 2 && SIZEOF_WCHAR_T != 4",
          "42: #error Unsupported size of wchar_t",
          "43: #endif",
          "46: #define EVT_TEST_FILE_VERBOSE",
          "52: int evt_test_file_get_narrow_source(",
          "53:      const system_character_t *source,",
          "54:      char *narrow_string,",
          "55:      size_t narrow_string_size,",
          "56:      libcerror_error_t **error )",
          "57: {",
          "58:  static char *function     = \"evt_test_file_get_narrow_source\";",
          "59:  size_t narrow_source_size = 0;",
          "60:  size_t source_length      = 0;",
          "62: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "63:  int result                = 0;",
          "64: #endif",
          "66:  if( source == NULL )",
          "67:  {",
          "68:   libcerror_error_set(",
          "69:    error,",
          "70:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "71:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "72:    \"%s: invalid source.\",",
          "73:    function );",
          "75:   return( -1 );",
          "76:  }",
          "77:  if( narrow_string == NULL )",
          "78:  {",
          "79:   libcerror_error_set(",
          "80:    error,",
          "81:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "82:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "83:    \"%s: invalid narrow string.\",",
          "84:    function );",
          "86:   return( -1 );",
          "87:  }",
          "88:  if( narrow_string_size > (size_t) SSIZE_MAX )",
          "89:  {",
          "90:   libcerror_error_set(",
          "91:    error,",
          "92:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "93:    LIBCERROR_ARGUMENT_ERROR_VALUE_EXCEEDS_MAXIMUM,",
          "94:    \"%s: invalid narrow string size value exceeds maximum.\",",
          "95:    function );",
          "97:   return( -1 );",
          "98:  }",
          "99:  source_length = system_string_length(",
          "100:                   source );",
          "102:  if( source_length > (size_t) ( SSIZE_MAX - 1 ) )",
          "103:  {",
          "104:   libcerror_error_set(",
          "105:    error,",
          "106:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "107:    LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
          "108:    \"%s: invalid source length value out of bounds.\",",
          "109:    function );",
          "111:   return( -1 );",
          "112:  }",
          "113: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "114:  if( libclocale_codepage == 0 )",
          "115:  {",
          "116: #if SIZEOF_WCHAR_T == 4",
          "117:   result = libuna_utf8_string_size_from_utf32(",
          "118:             (libuna_utf32_character_t *) source,",
          "119:             source_length + 1,",
          "120:             &narrow_source_size,",
          "121:             error );",
          "122: #elif SIZEOF_WCHAR_T == 2",
          "123:   result = libuna_utf8_string_size_from_utf16(",
          "124:             (libuna_utf16_character_t *) source,",
          "125:             source_length + 1,",
          "126:             &narrow_source_size,",
          "127:             error );",
          "128: #endif",
          "129:  }",
          "130:  else",
          "131:  {",
          "132: #if SIZEOF_WCHAR_T == 4",
          "133:   result = libuna_byte_stream_size_from_utf32(",
          "134:             (libuna_utf32_character_t *) source,",
          "135:             source_length + 1,",
          "136:             libclocale_codepage,",
          "137:             &narrow_source_size,",
          "138:             error );",
          "139: #elif SIZEOF_WCHAR_T == 2",
          "140:   result = libuna_byte_stream_size_from_utf16(",
          "141:             (libuna_utf16_character_t *) source,",
          "142:             source_length + 1,",
          "143:             libclocale_codepage,",
          "144:             &narrow_source_size,",
          "145:             error );",
          "146: #endif",
          "147:  }",
          "148:  if( result != 1 )",
          "149:  {",
          "150:   libcerror_error_set(",
          "151:    error,",
          "152:    LIBCERROR_ERROR_DOMAIN_CONVERSION,",
          "153:    LIBCERROR_CONVERSION_ERROR_GENERIC,",
          "154:    \"%s: unable to determine narrow string size.\",",
          "155:    function );",
          "157:   return( -1 );",
          "158:  }",
          "159: #else",
          "160:  narrow_source_size = source_length + 1;",
          "164:  if( narrow_string_size < narrow_source_size )",
          "165:  {",
          "166:   libcerror_error_set(",
          "167:    error,",
          "168:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "169:    LIBCERROR_ARGUMENT_ERROR_VALUE_TOO_SMALL,",
          "170:    \"%s: narrow string too small.\",",
          "171:    function );",
          "173:   return( -1 );",
          "174:  }",
          "175: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "176:  if( libclocale_codepage == 0 )",
          "177:  {",
          "178: #if SIZEOF_WCHAR_T == 4",
          "179:   result = libuna_utf8_string_copy_from_utf32(",
          "180:             (libuna_utf8_character_t *) narrow_string,",
          "181:             narrow_string_size,",
          "182:             (libuna_utf32_character_t *) source,",
          "183:             source_length + 1,",
          "184:             error );",
          "185: #elif SIZEOF_WCHAR_T == 2",
          "186:   result = libuna_utf8_string_copy_from_utf16(",
          "187:             (libuna_utf8_character_t *) narrow_string,",
          "188:             narrow_string_size,",
          "189:             (libuna_utf16_character_t *) source,",
          "190:             source_length + 1,",
          "191:             error );",
          "192: #endif",
          "193:  }",
          "194:  else",
          "195:  {",
          "196: #if SIZEOF_WCHAR_T == 4",
          "197:   result = libuna_byte_stream_copy_from_utf32(",
          "198:             (uint8_t *) narrow_string,",
          "199:             narrow_string_size,",
          "200:             libclocale_codepage,",
          "201:             (libuna_utf32_character_t *) source,",
          "202:             source_length + 1,",
          "203:             error );",
          "204: #elif SIZEOF_WCHAR_T == 2",
          "205:   result = libuna_byte_stream_copy_from_utf16(",
          "206:             (uint8_t *) narrow_string,",
          "207:             narrow_string_size,",
          "208:             libclocale_codepage,",
          "209:             (libuna_utf16_character_t *) source,",
          "210:             source_length + 1,",
          "211:             error );",
          "213:  }",
          "214:  if( result != 1 )",
          "215:  {",
          "216:   libcerror_error_set(",
          "217:    error,",
          "218:    LIBCERROR_ERROR_DOMAIN_CONVERSION,",
          "219:    LIBCERROR_CONVERSION_ERROR_GENERIC,",
          "220:    \"%s: unable to set narrow string.\",",
          "221:    function );",
          "223:   return( -1 );",
          "224:  }",
          "225: #else",
          "226:  if( system_string_copy(",
          "227:       narrow_string,",
          "228:       source,",
          "229:       source_length ) == NULL )",
          "230:  {",
          "231:   libcerror_error_set(",
          "232:    error,",
          "233:    LIBCERROR_ERROR_DOMAIN_MEMORY,",
          "234:    LIBCERROR_MEMORY_ERROR_COPY_FAILED,",
          "235:    \"%s: unable to set narrow string.\",",
          "236:    function );",
          "238:   return( -1 );",
          "239:  }",
          "240:  narrow_string[ source_length ] = 0;",
          "244:  return( 1 );",
          "245: }",
          "247: #if defined( HAVE_WIDE_CHARACTER_TYPE )",
          "252: int evt_test_file_get_wide_source(",
          "253:      const system_character_t *source,",
          "254:      wchar_t *wide_string,",
          "255:      size_t wide_string_size,",
          "256:      libcerror_error_t **error )",
          "257: {",
          "258:  static char *function   = \"evt_test_file_get_wide_source\";",
          "259:  size_t source_length    = 0;",
          "260:  size_t wide_source_size = 0;",
          "262: #if !defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "263:  int result              = 0;",
          "264: #endif",
          "266:  if( source == NULL )",
          "267:  {",
          "268:   libcerror_error_set(",
          "269:    error,",
          "270:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "271:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "272:    \"%s: invalid source.\",",
          "273:    function );",
          "275:   return( -1 );",
          "276:  }",
          "277:  if( wide_string == NULL )",
          "278:  {",
          "279:   libcerror_error_set(",
          "280:    error,",
          "281:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "282:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "283:    \"%s: invalid wide string.\",",
          "284:    function );",
          "286:   return( -1 );",
          "287:  }",
          "288:  if( wide_string_size > (size_t) SSIZE_MAX )",
          "289:  {",
          "290:   libcerror_error_set(",
          "291:    error,",
          "292:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "293:    LIBCERROR_ARGUMENT_ERROR_VALUE_EXCEEDS_MAXIMUM,",
          "294:    \"%s: invalid wide string size value exceeds maximum.\",",
          "295:    function );",
          "297:   return( -1 );",
          "298:  }",
          "299:  source_length = system_string_length(",
          "300:                   source );",
          "302:  if( source_length > (size_t) ( SSIZE_MAX - 1 ) )",
          "303:  {",
          "304:   libcerror_error_set(",
          "305:    error,",
          "306:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "307:    LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
          "308:    \"%s: invalid source length value out of bounds.\",",
          "309:    function );",
          "311:   return( -1 );",
          "312:  }",
          "313: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "314:  wide_source_size = source_length + 1;",
          "315: #else",
          "316:  if( libclocale_codepage == 0 )",
          "317:  {",
          "318: #if SIZEOF_WCHAR_T == 4",
          "319:   result = libuna_utf32_string_size_from_utf8(",
          "320:             (libuna_utf8_character_t *) source,",
          "321:             source_length + 1,",
          "322:             &wide_source_size,",
          "323:             error );",
          "324: #elif SIZEOF_WCHAR_T == 2",
          "325:   result = libuna_utf16_string_size_from_utf8(",
          "326:             (libuna_utf8_character_t *) source,",
          "327:             source_length + 1,",
          "328:             &wide_source_size,",
          "329:             error );",
          "330: #endif",
          "331:  }",
          "332:  else",
          "333:  {",
          "334: #if SIZEOF_WCHAR_T == 4",
          "335:   result = libuna_utf32_string_size_from_byte_stream(",
          "336:             (uint8_t *) source,",
          "337:             source_length + 1,",
          "338:             libclocale_codepage,",
          "339:             &wide_source_size,",
          "340:             error );",
          "341: #elif SIZEOF_WCHAR_T == 2",
          "342:   result = libuna_utf16_string_size_from_byte_stream(",
          "343:             (uint8_t *) source,",
          "344:             source_length + 1,",
          "345:             libclocale_codepage,",
          "346:             &wide_source_size,",
          "347:             error );",
          "348: #endif",
          "349:  }",
          "350:  if( result != 1 )",
          "351:  {",
          "352:   libcerror_error_set(",
          "353:    error,",
          "354:    LIBCERROR_ERROR_DOMAIN_CONVERSION,",
          "355:    LIBCERROR_CONVERSION_ERROR_GENERIC,",
          "356:    \"%s: unable to determine wide string size.\",",
          "357:    function );",
          "359:   return( -1 );",
          "360:  }",
          "364:  if( wide_string_size < wide_source_size )",
          "365:  {",
          "366:   libcerror_error_set(",
          "367:    error,",
          "368:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "369:    LIBCERROR_ARGUMENT_ERROR_VALUE_TOO_SMALL,",
          "370:    \"%s: wide string too small.\",",
          "371:    function );",
          "373:   return( -1 );",
          "374:  }",
          "375: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "376:  if( system_string_copy(",
          "377:       wide_string,",
          "378:       source,",
          "379:       source_length ) == NULL )",
          "380:  {",
          "381:   libcerror_error_set(",
          "382:    error,",
          "383:    LIBCERROR_ERROR_DOMAIN_MEMORY,",
          "384:    LIBCERROR_MEMORY_ERROR_COPY_FAILED,",
          "385:    \"%s: unable to set wide string.\",",
          "386:    function );",
          "388:   return( -1 );",
          "389:  }",
          "390:  wide_string[ source_length ] = 0;",
          "391: #else",
          "392:  if( libclocale_codepage == 0 )",
          "393:  {",
          "394: #if SIZEOF_WCHAR_T == 4",
          "395:   result = libuna_utf32_string_copy_from_utf8(",
          "396:             (libuna_utf32_character_t *) wide_string,",
          "397:             wide_string_size,",
          "398:             (libuna_utf8_character_t *) source,",
          "399:             source_length + 1,",
          "400:             error );",
          "401: #elif SIZEOF_WCHAR_T == 2",
          "402:   result = libuna_utf16_string_copy_from_utf8(",
          "403:             (libuna_utf16_character_t *) wide_string,",
          "404:             wide_string_size,",
          "405:             (libuna_utf8_character_t *) source,",
          "406:             source_length + 1,",
          "407:             error );",
          "408: #endif",
          "409:  }",
          "410:  else",
          "411:  {",
          "412: #if SIZEOF_WCHAR_T == 4",
          "413:   result = libuna_utf32_string_copy_from_byte_stream(",
          "414:             (libuna_utf32_character_t *) wide_string,",
          "415:             wide_string_size,",
          "416:             (uint8_t *) source,",
          "417:             source_length + 1,",
          "418:             libclocale_codepage,",
          "419:             error );",
          "420: #elif SIZEOF_WCHAR_T == 2",
          "421:   result = libuna_utf16_string_copy_from_byte_stream(",
          "422:             (libuna_utf16_character_t *) wide_string,",
          "423:             wide_string_size,",
          "424:             (uint8_t *) source,",
          "425:             source_length + 1,",
          "426:             libclocale_codepage,",
          "427:             error );",
          "428: #endif",
          "429:  }",
          "430:  if( result != 1 )",
          "431:  {",
          "432:   libcerror_error_set(",
          "433:    error,",
          "434:    LIBCERROR_ERROR_DOMAIN_CONVERSION,",
          "435:    LIBCERROR_CONVERSION_ERROR_GENERIC,",
          "436:    \"%s: unable to set wide string.\",",
          "437:    function );",
          "439:   return( -1 );",
          "440:  }",
          "444:  return( 1 );",
          "445: }",
          "454:      const system_character_t *source,",
          "",
          "[Added Lines]",
          "33: #include \"evt_test_functions.h\"",
          "35: #include \"evt_test_libbfio.h\"",
          "40: #include \"evt_test_unused.h\"",
          "42: #include \"../libevt/libevt_file.h\"",
          "44: #if !defined( LIBEVT_HAVE_BFIO )",
          "46: extern \\",
          "47: int libevt_file_open_file_io_handle(",
          "48:      libevt_file_t *file,",
          "49:      libbfio_handle_t *file_io_handle,",
          "50:      int access_flags,",
          "51:      libevt_error_t **error );",
          "55: #if defined( HAVE_WIDE_SYSTEM_CHARACTER ) && SIZEOF_WCHAR_T != 2 && SIZEOF_WCHAR_T != 4",
          "56: #error Unsupported size of wchar_t",
          "60: #define EVT_TEST_FILE_VERBOSE",
          "68:      libbfio_handle_t *file_io_handle,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "469:   return( -1 );",
          "470:  }",
          "472:  {",
          "473:   libcerror_error_set(",
          "474:    error,",
          "475:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "476:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "478:    function );",
          "480:   return( -1 );",
          "",
          "[Removed Lines]",
          "471:  if( source == NULL )",
          "477:    \"%s: invalid source.\",",
          "",
          "[Added Lines]",
          "85:  if( file_io_handle == NULL )",
          "91:    \"%s: invalid file IO handle.\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "493:   goto on_error;",
          "494:  }",
          "499:            LIBEVT_OPEN_READ,",
          "500:            error );",
          "508:  if( result != 1 )",
          "509:  {",
          "510:   libcerror_error_set(",
          "",
          "[Removed Lines]",
          "495: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "496:  result = libevt_file_open_wide(",
          "498:            source,",
          "501: #else",
          "502:  result = libevt_file_open(",
          "504:            source,",
          "505:            LIBEVT_OPEN_READ,",
          "506:            error );",
          "507: #endif",
          "",
          "[Added Lines]",
          "109:  result = libevt_file_open_file_io_handle(",
          "111:            file_io_handle,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "578:  return( result );",
          "579: }",
          "",
          "[Removed Lines]",
          "581: #include \"../libevt/libevt_file.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "775:  return( 0 );",
          "776: }",
          "791:            &error );",
          "793:  EVT_TEST_ASSERT_EQUAL_INT(",
          "",
          "[Removed Lines]",
          "781: int evt_test_file_free(",
          "782:      void )",
          "783: {",
          "784:  libcerror_error_t *error = NULL;",
          "785:  int result               = 0;",
          "789:  result = libevt_file_free(",
          "790:            NULL,",
          "",
          "[Added Lines]",
          "386: int evt_test_file_free(",
          "387:      void )",
          "388: {",
          "389:  libcerror_error_t *error = NULL;",
          "390:  int result               = 0;",
          "394:  result = libevt_file_free(",
          "395:            NULL,",
          "396:            &error );",
          "398:  EVT_TEST_ASSERT_EQUAL_INT(",
          "399:   \"result\",",
          "400:   result,",
          "401:   -1 );",
          "403:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "404:   \"error\",",
          "405:   error );",
          "407:  libcerror_error_free(",
          "408:   &error );",
          "410:  return( 1 );",
          "412: on_error:",
          "413:  if( error != NULL )",
          "414:  {",
          "415:   libcerror_error_free(",
          "416:    &error );",
          "417:  }",
          "418:  return( 0 );",
          "419: }",
          "424: int evt_test_file_open(",
          "425:      const system_character_t *source )",
          "426: {",
          "427:  char narrow_source[ 256 ];",
          "429:  libcerror_error_t *error = NULL;",
          "430:  libevt_file_t *file      = NULL;",
          "431:  int result               = 0;",
          "435:  result = evt_test_get_narrow_source(",
          "436:            source,",
          "437:            narrow_source,",
          "438:            256,",
          "439:            &error );",
          "441:  EVT_TEST_ASSERT_EQUAL_INT(",
          "442:   \"result\",",
          "443:   result,",
          "444:   1 );",
          "446:  EVT_TEST_ASSERT_IS_NULL(",
          "447:   \"error\",",
          "448:   error );",
          "450:  result = libevt_file_initialize(",
          "451:            &file,",
          "452:            &error );",
          "454:  EVT_TEST_ASSERT_EQUAL_INT(",
          "455:   \"result\",",
          "456:   result,",
          "457:   1 );",
          "459:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "460:   \"file\",",
          "461:   file );",
          "463:  EVT_TEST_ASSERT_IS_NULL(",
          "464:   \"error\",",
          "465:   error );",
          "469:  result = libevt_file_open(",
          "470:            file,",
          "471:            narrow_source,",
          "472:            LIBEVT_OPEN_READ,",
          "473:            &error );",
          "475:  EVT_TEST_ASSERT_EQUAL_INT(",
          "476:   \"result\",",
          "477:   result,",
          "478:   1 );",
          "480:  EVT_TEST_ASSERT_IS_NULL(",
          "481:   \"error\",",
          "482:   error );",
          "486:  result = libevt_file_open(",
          "487:            NULL,",
          "488:            narrow_source,",
          "489:            LIBEVT_OPEN_READ,",
          "490:            &error );",
          "492:  EVT_TEST_ASSERT_EQUAL_INT(",
          "493:   \"result\",",
          "494:   result,",
          "495:   -1 );",
          "497:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "498:   \"error\",",
          "499:   error );",
          "501:  libcerror_error_free(",
          "502:   &error );",
          "504:  result = libevt_file_open(",
          "505:            file,",
          "506:            NULL,",
          "507:            LIBEVT_OPEN_READ,",
          "508:            &error );",
          "510:  EVT_TEST_ASSERT_EQUAL_INT(",
          "511:   \"result\",",
          "512:   result,",
          "513:   -1 );",
          "515:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "516:   \"error\",",
          "517:   error );",
          "519:  libcerror_error_free(",
          "520:   &error );",
          "522:  result = libevt_file_open(",
          "523:            file,",
          "524:            narrow_source,",
          "525:            -1,",
          "526:            &error );",
          "528:  EVT_TEST_ASSERT_EQUAL_INT(",
          "529:   \"result\",",
          "530:   result,",
          "531:   -1 );",
          "533:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "534:   \"error\",",
          "535:   error );",
          "537:  libcerror_error_free(",
          "538:   &error );",
          "542:  result = libevt_file_open(",
          "543:            file,",
          "544:            narrow_source,",
          "545:            LIBEVT_OPEN_READ,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "802:  libcerror_error_free(",
          "803:   &error );",
          "805:  return( 1 );",
          "807: on_error:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:  result = libevt_file_free(",
          "563:            &file,",
          "564:            &error );",
          "566:  EVT_TEST_ASSERT_EQUAL_INT(",
          "567:   \"result\",",
          "568:   result,",
          "569:   1 );",
          "571:  EVT_TEST_ASSERT_IS_NULL(",
          "572:   \"file\",",
          "573:   file );",
          "575:  EVT_TEST_ASSERT_IS_NULL(",
          "576:   \"error\",",
          "577:   error );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "810:   libcerror_error_free(",
          "811:    &error );",
          "812:  }",
          "813:  return( 0 );",
          "814: }",
          "820:      const system_character_t *source )",
          "821: {",
          "824:  libcerror_error_t *error = NULL;",
          "825:  libevt_file_t *file      = NULL;",
          "",
          "[Removed Lines]",
          "819: int evt_test_file_open(",
          "822:  char narrow_source[ 256 ];",
          "",
          "[Added Lines]",
          "587:  if( file != NULL )",
          "588:  {",
          "589:   libevt_file_free(",
          "590:    &file,",
          "591:    NULL );",
          "592:  }",
          "596: #if defined( HAVE_WIDE_CHARACTER_TYPE )",
          "601: int evt_test_file_open_wide(",
          "604:  wchar_t wide_source[ 256 ];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "831:            source,",
          "833:            256,",
          "834:            &error );",
          "",
          "[Removed Lines]",
          "830:  result = evt_test_file_get_narrow_source(",
          "832:            narrow_source,",
          "",
          "[Added Lines]",
          "612:  result = evt_test_get_wide_source(",
          "614:            wide_source,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "865:            file,",
          "867:            LIBEVT_OPEN_READ,",
          "868:            &error );",
          "",
          "[Removed Lines]",
          "864:  result = libevt_file_open(",
          "866:            narrow_source,",
          "",
          "[Added Lines]",
          "646:  result = libevt_file_open_wide(",
          "648:            wide_source,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "882:            file,",
          "884:            LIBEVT_OPEN_READ,",
          "885:            &error );",
          "",
          "[Removed Lines]",
          "881:  result = libevt_file_open(",
          "883:            narrow_source,",
          "",
          "[Added Lines]",
          "663:  result = libevt_file_open_wide(",
          "664:            NULL,",
          "665:            wide_source,",
          "666:            LIBEVT_OPEN_READ,",
          "667:            &error );",
          "669:  EVT_TEST_ASSERT_EQUAL_INT(",
          "670:   \"result\",",
          "671:   result,",
          "672:   -1 );",
          "674:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "675:   \"error\",",
          "676:   error );",
          "678:  libcerror_error_free(",
          "679:   &error );",
          "681:  result = libevt_file_open_wide(",
          "683:            NULL,",
          "684:            LIBEVT_OPEN_READ,",
          "685:            &error );",
          "687:  EVT_TEST_ASSERT_EQUAL_INT(",
          "688:   \"result\",",
          "689:   result,",
          "690:   -1 );",
          "692:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "693:   \"error\",",
          "694:   error );",
          "696:  libcerror_error_free(",
          "697:   &error );",
          "699:  result = libevt_file_open_wide(",
          "700:            file,",
          "701:            wide_source,",
          "702:            -1,",
          "703:            &error );",
          "705:  EVT_TEST_ASSERT_EQUAL_INT(",
          "706:   \"result\",",
          "707:   result,",
          "708:   -1 );",
          "710:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "711:   \"error\",",
          "712:   error );",
          "714:  libcerror_error_free(",
          "715:   &error );",
          "719:  result = libevt_file_open_wide(",
          "720:            file,",
          "721:            wide_source,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "932:  return( 0 );",
          "933: }",
          "941:      const system_character_t *source )",
          "942: {",
          "955:            &error );",
          "957:  EVT_TEST_ASSERT_EQUAL_INT(",
          "",
          "[Removed Lines]",
          "935: #if defined( HAVE_WIDE_CHARACTER_TYPE )",
          "940: int evt_test_file_open_wide(",
          "943:  wchar_t wide_source[ 256 ];",
          "945:  libcerror_error_t *error = NULL;",
          "946:  libevt_file_t *file      = NULL;",
          "947:  int result               = 0;",
          "951:  result = evt_test_file_get_wide_source(",
          "952:            source,",
          "953:            wide_source,",
          "954:            256,",
          "",
          "[Added Lines]",
          "778: int evt_test_file_open_file_io_handle(",
          "781:  libbfio_handle_t *file_io_handle = NULL;",
          "782:  libcerror_error_t *error         = NULL;",
          "783:  libevt_file_t *file              = NULL;",
          "784:  size_t source_length             = 0;",
          "785:  int result                       = 0;",
          "789:  result = libbfio_file_initialize(",
          "790:            &file_io_handle,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "959:   result,",
          "960:   1 );",
          "966:  result = libevt_file_initialize(",
          "967:            &file,",
          "",
          "[Removed Lines]",
          "962:  EVT_TEST_ASSERT_IS_NULL(",
          "963:   \"error\",",
          "964:   error );",
          "",
          "[Added Lines]",
          "798:         EVT_TEST_ASSERT_IS_NOT_NULL(",
          "799:          \"file_io_handle\",",
          "800:          file_io_handle );",
          "802:         EVT_TEST_ASSERT_IS_NULL(",
          "803:          \"error\",",
          "804:          error );",
          "806:  source_length = system_string_length(",
          "807:                   source );",
          "809: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "810:  result = libbfio_file_set_name_wide(",
          "811:            file_io_handle,",
          "812:            source,",
          "813:            source_length,",
          "814:            &error );",
          "815: #else",
          "816:  result = libbfio_file_set_name(",
          "817:            file_io_handle,",
          "818:            source,",
          "819:            source_length,",
          "820:            &error );",
          "821: #endif",
          "822:  EVT_TEST_ASSERT_EQUAL_INT(",
          "823:   \"result\",",
          "824:   result,",
          "825:   1 );",
          "827:         EVT_TEST_ASSERT_IS_NULL(",
          "828:          \"error\",",
          "829:          error );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "986:            file,",
          "988:            LIBEVT_OPEN_READ,",
          "989:            &error );",
          "",
          "[Removed Lines]",
          "985:  result = libevt_file_open_wide(",
          "987:            wide_source,",
          "",
          "[Added Lines]",
          "850:  result = libevt_file_open_file_io_handle(",
          "852:            file_io_handle,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1003:            file,",
          "1005:            LIBEVT_OPEN_READ,",
          "1006:            &error );",
          "",
          "[Removed Lines]",
          "1002:  result = libevt_file_open_wide(",
          "1004:            wide_source,",
          "",
          "[Added Lines]",
          "867:  result = libevt_file_open_file_io_handle(",
          "868:            NULL,",
          "869:            file_io_handle,",
          "870:            LIBEVT_OPEN_READ,",
          "871:            &error );",
          "873:  EVT_TEST_ASSERT_EQUAL_INT(",
          "874:   \"result\",",
          "875:   result,",
          "876:   -1 );",
          "878:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "879:   \"error\",",
          "880:   error );",
          "882:  libcerror_error_free(",
          "883:   &error );",
          "885:  result = libevt_file_open_file_io_handle(",
          "887:            NULL,",
          "888:            LIBEVT_OPEN_READ,",
          "889:            &error );",
          "891:  EVT_TEST_ASSERT_EQUAL_INT(",
          "892:   \"result\",",
          "893:   result,",
          "894:   -1 );",
          "896:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "897:   \"error\",",
          "898:   error );",
          "900:  libcerror_error_free(",
          "901:   &error );",
          "903:  result = libevt_file_open_file_io_handle(",
          "904:            file,",
          "905:            file_io_handle,",
          "906:            -1,",
          "907:            &error );",
          "909:  EVT_TEST_ASSERT_EQUAL_INT(",
          "910:   \"result\",",
          "911:   result,",
          "912:   -1 );",
          "914:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "915:   \"error\",",
          "916:   error );",
          "918:  libcerror_error_free(",
          "919:   &error );",
          "923:  result = libevt_file_open_file_io_handle(",
          "924:            file,",
          "925:            file_io_handle,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1036:   \"error\",",
          "1037:   error );",
          "1039:  return( 1 );",
          "1041: on_error:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "960:  result = libbfio_handle_free(",
          "961:            &file_io_handle,",
          "962:            &error );",
          "964:  EVT_TEST_ASSERT_EQUAL_INT(",
          "965:   \"result\",",
          "966:   result,",
          "967:   1 );",
          "969:  EVT_TEST_ASSERT_IS_NULL(",
          "970:          \"file_io_handle\",",
          "971:          file_io_handle );",
          "973:         EVT_TEST_ASSERT_IS_NULL(",
          "974:          \"error\",",
          "975:          error );",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1050:    &file,",
          "1051:    NULL );",
          "1052:  }",
          "1053:  return( 0 );",
          "1054: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "991:  if( file_io_handle != NULL )",
          "992:  {",
          "993:   libbfio_handle_free(",
          "994:    &file_io_handle,",
          "995:    NULL );",
          "996:  }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1749:      char * const argv[] )",
          "1750: #endif",
          "1751: {",
          "1758:  while( ( option = evt_test_getopt(",
          "1759:                     argc,",
          "",
          "[Removed Lines]",
          "1752:  libcerror_error_t *error   = NULL;",
          "1753:  libevt_file_t *file        = NULL;",
          "1754:  system_character_t *source = NULL;",
          "1755:  system_integer_t option    = 0;",
          "1756:  int result                 = 0;",
          "",
          "[Added Lines]",
          "1694:  libbfio_handle_t *file_io_handle = NULL;",
          "1695:  libcerror_error_t *error         = NULL;",
          "1696:  libevt_file_t *file              = NULL;",
          "1697:  system_character_t *source       = NULL;",
          "1698:  system_integer_t option          = 0;",
          "1699:  size_t string_length             = 0;",
          "1700:  int result                       = 0;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1839:   EVT_TEST_RUN(",
          "1840:    \"libevt_file_close\",",
          "",
          "[Removed Lines]",
          "1833: #if defined( LIBEVT_HAVE_BFIO )",
          "",
          "[Added Lines]",
          "1777:   EVT_TEST_RUN_WITH_ARGS(",
          "1778:    \"libevt_file_open_file_io_handle\",",
          "1779:    evt_test_file_open_file_io_handle,",
          "1780:    source );",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1850:   result = evt_test_file_open_source(",
          "1851:             &file,",
          "1853:             &error );",
          "1855:   EVT_TEST_ASSERT_EQUAL_INT(",
          "",
          "[Removed Lines]",
          "1852:             source,",
          "",
          "[Added Lines]",
          "1793:   result = libbfio_file_initialize(",
          "1794:             &file_io_handle,",
          "1795:             &error );",
          "1797:   EVT_TEST_ASSERT_EQUAL_INT(",
          "1798:    \"result\",",
          "1799:    result,",
          "1800:    1 );",
          "1802:          EVT_TEST_ASSERT_IS_NOT_NULL(",
          "1803:           \"file_io_handle\",",
          "1804:           file_io_handle );",
          "1806:          EVT_TEST_ASSERT_IS_NULL(",
          "1807:           \"error\",",
          "1808:           error );",
          "1810:   string_length = system_string_length(",
          "1811:                    source );",
          "1813: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "1814:   result = libbfio_file_set_name_wide(",
          "1815:             file_io_handle,",
          "1816:             source,",
          "1817:             string_length,",
          "1818:             &error );",
          "1819: #else",
          "1820:   result = libbfio_file_set_name(",
          "1821:             file_io_handle,",
          "1822:             source,",
          "1823:             string_length,",
          "1824:             &error );",
          "1825: #endif",
          "1826:   EVT_TEST_ASSERT_EQUAL_INT(",
          "1827:    \"result\",",
          "1828:    result,",
          "1829:    1 );",
          "1831:          EVT_TEST_ASSERT_IS_NULL(",
          "1832:           \"error\",",
          "1833:           error );",
          "1837:             file_io_handle,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1929:   EVT_TEST_ASSERT_IS_NULL(",
          "1930:    \"error\",",
          "1931:    error );",
          "1932:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1918:   result = libbfio_handle_free(",
          "1919:             &file_io_handle,",
          "1920:             &error );",
          "1922:   EVT_TEST_ASSERT_EQUAL_INT(",
          "1923:    \"result\",",
          "1924:    result,",
          "1925:    1 );",
          "1927:   EVT_TEST_ASSERT_IS_NULL(",
          "1928:           \"file_io_handle\",",
          "1929:           file_io_handle );",
          "1931:          EVT_TEST_ASSERT_IS_NULL(",
          "1932:           \"error\",",
          "1933:           error );",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1942:  }",
          "1943:  if( file != NULL )",
          "1944:  {",
          "1946:    &file,",
          "1947:    NULL );",
          "1948:  }",
          "1949:  return( EXIT_FAILURE );",
          "1950: }",
          "",
          "[Removed Lines]",
          "1945:   evt_test_file_close_source(",
          "",
          "[Added Lines]",
          "1947:   libevt_file_free(",
          "1951:  if( file_io_handle != NULL )",
          "1952:  {",
          "1953:   libbfio_handle_free(",
          "1954:    &file_io_handle,",
          "1955:    NULL );",
          "1956:  }",
          "",
          "---------------"
        ],
        "tests/evt_test_functions.c||tests/evt_test_functions.c": [
          "File: tests/evt_test_functions.c -> tests/evt_test_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <common.h>",
          "23: #include <file_stream.h>",
          "24: #include <narrow_string.h>",
          "25: #include <system_string.h>",
          "26: #include <types.h>",
          "27: #include <wide_string.h>",
          "29: #if defined( HAVE_STDLIB_H ) || defined( WINAPI )",
          "30: #include <stdlib.h>",
          "31: #endif",
          "33: #include \"evt_test_libcerror.h\"",
          "34: #include \"evt_test_libclocale.h\"",
          "35: #include \"evt_test_libuna.h\"",
          "40: int evt_test_get_narrow_source(",
          "41:      const system_character_t *source,",
          "42:      char *narrow_string,",
          "43:      size_t narrow_string_size,",
          "44:      libcerror_error_t **error )",
          "45: {",
          "46:  static char *function     = \"evt_test_get_narrow_source\";",
          "47:  size_t narrow_source_size = 0;",
          "48:  size_t source_length      = 0;",
          "50: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "51:  int result                = 0;",
          "52: #endif",
          "54:  if( source == NULL )",
          "55:  {",
          "56:   libcerror_error_set(",
          "57:    error,",
          "58:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "59:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "60:    \"%s: invalid source.\",",
          "61:    function );",
          "63:   return( -1 );",
          "64:  }",
          "65:  if( narrow_string == NULL )",
          "66:  {",
          "67:   libcerror_error_set(",
          "68:    error,",
          "69:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "70:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "71:    \"%s: invalid narrow string.\",",
          "72:    function );",
          "74:   return( -1 );",
          "75:  }",
          "76:  if( narrow_string_size > (size_t) SSIZE_MAX )",
          "77:  {",
          "78:   libcerror_error_set(",
          "79:    error,",
          "80:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "81:    LIBCERROR_ARGUMENT_ERROR_VALUE_EXCEEDS_MAXIMUM,",
          "82:    \"%s: invalid narrow string size value exceeds maximum.\",",
          "83:    function );",
          "85:   return( -1 );",
          "86:  }",
          "87:  source_length = system_string_length(",
          "88:                   source );",
          "90:  if( source_length > (size_t) ( SSIZE_MAX - 1 ) )",
          "91:  {",
          "92:   libcerror_error_set(",
          "93:    error,",
          "94:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "95:    LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
          "96:    \"%s: invalid source length value out of bounds.\",",
          "97:    function );",
          "99:   return( -1 );",
          "100:  }",
          "101: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "102:  if( libclocale_codepage == 0 )",
          "103:  {",
          "104: #if SIZEOF_WCHAR_T == 4",
          "105:   result = libuna_utf8_string_size_from_utf32(",
          "106:             (libuna_utf32_character_t *) source,",
          "107:             source_length + 1,",
          "108:             &narrow_source_size,",
          "109:             error );",
          "110: #elif SIZEOF_WCHAR_T == 2",
          "111:   result = libuna_utf8_string_size_from_utf16(",
          "112:             (libuna_utf16_character_t *) source,",
          "113:             source_length + 1,",
          "114:             &narrow_source_size,",
          "115:             error );",
          "116: #endif",
          "117:  }",
          "118:  else",
          "119:  {",
          "120: #if SIZEOF_WCHAR_T == 4",
          "121:   result = libuna_byte_stream_size_from_utf32(",
          "122:             (libuna_utf32_character_t *) source,",
          "123:             source_length + 1,",
          "124:             libclocale_codepage,",
          "125:             &narrow_source_size,",
          "126:             error );",
          "127: #elif SIZEOF_WCHAR_T == 2",
          "128:   result = libuna_byte_stream_size_from_utf16(",
          "129:             (libuna_utf16_character_t *) source,",
          "130:             source_length + 1,",
          "131:             libclocale_codepage,",
          "132:             &narrow_source_size,",
          "133:             error );",
          "134: #endif",
          "135:  }",
          "136:  if( result != 1 )",
          "137:  {",
          "138:   libcerror_error_set(",
          "139:    error,",
          "140:    LIBCERROR_ERROR_DOMAIN_CONVERSION,",
          "141:    LIBCERROR_CONVERSION_ERROR_GENERIC,",
          "142:    \"%s: unable to determine narrow string size.\",",
          "143:    function );",
          "145:   return( -1 );",
          "146:  }",
          "147: #else",
          "148:  narrow_source_size = source_length + 1;",
          "152:  if( narrow_string_size < narrow_source_size )",
          "153:  {",
          "154:   libcerror_error_set(",
          "155:    error,",
          "156:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "157:    LIBCERROR_ARGUMENT_ERROR_VALUE_TOO_SMALL,",
          "158:    \"%s: narrow string too small.\",",
          "159:    function );",
          "161:   return( -1 );",
          "162:  }",
          "163: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "164:  if( libclocale_codepage == 0 )",
          "165:  {",
          "166: #if SIZEOF_WCHAR_T == 4",
          "167:   result = libuna_utf8_string_copy_from_utf32(",
          "168:             (libuna_utf8_character_t *) narrow_string,",
          "169:             narrow_string_size,",
          "170:             (libuna_utf32_character_t *) source,",
          "171:             source_length + 1,",
          "172:             error );",
          "173: #elif SIZEOF_WCHAR_T == 2",
          "174:   result = libuna_utf8_string_copy_from_utf16(",
          "175:             (libuna_utf8_character_t *) narrow_string,",
          "176:             narrow_string_size,",
          "177:             (libuna_utf16_character_t *) source,",
          "178:             source_length + 1,",
          "179:             error );",
          "180: #endif",
          "181:  }",
          "182:  else",
          "183:  {",
          "184: #if SIZEOF_WCHAR_T == 4",
          "185:   result = libuna_byte_stream_copy_from_utf32(",
          "186:             (uint8_t *) narrow_string,",
          "187:             narrow_string_size,",
          "188:             libclocale_codepage,",
          "189:             (libuna_utf32_character_t *) source,",
          "190:             source_length + 1,",
          "191:             error );",
          "192: #elif SIZEOF_WCHAR_T == 2",
          "193:   result = libuna_byte_stream_copy_from_utf16(",
          "194:             (uint8_t *) narrow_string,",
          "195:             narrow_string_size,",
          "196:             libclocale_codepage,",
          "197:             (libuna_utf16_character_t *) source,",
          "198:             source_length + 1,",
          "199:             error );",
          "200: #endif",
          "201:  }",
          "202:  if( result != 1 )",
          "203:  {",
          "204:   libcerror_error_set(",
          "205:    error,",
          "206:    LIBCERROR_ERROR_DOMAIN_CONVERSION,",
          "207:    LIBCERROR_CONVERSION_ERROR_GENERIC,",
          "208:    \"%s: unable to set narrow string.\",",
          "209:    function );",
          "211:   return( -1 );",
          "212:  }",
          "213: #else",
          "214:  if( system_string_copy(",
          "215:       narrow_string,",
          "216:       source,",
          "217:       source_length ) == NULL )",
          "218:  {",
          "219:   libcerror_error_set(",
          "220:    error,",
          "221:    LIBCERROR_ERROR_DOMAIN_MEMORY,",
          "222:    LIBCERROR_MEMORY_ERROR_COPY_FAILED,",
          "223:    \"%s: unable to set narrow string.\",",
          "224:    function );",
          "226:   return( -1 );",
          "227:  }",
          "228:  narrow_string[ source_length ] = 0;",
          "232:  return( 1 );",
          "233: }",
          "235: #if defined( HAVE_WIDE_CHARACTER_TYPE )",
          "240: int evt_test_get_wide_source(",
          "241:      const system_character_t *source,",
          "242:      wchar_t *wide_string,",
          "243:      size_t wide_string_size,",
          "244:      libcerror_error_t **error )",
          "245: {",
          "246:  static char *function   = \"evt_test_get_wide_source\";",
          "247:  size_t wide_source_size = 0;",
          "248:  size_t source_length    = 0;",
          "250: #if !defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "251:  int result              = 0;",
          "252: #endif",
          "254:  if( source == NULL )",
          "255:  {",
          "256:   libcerror_error_set(",
          "257:    error,",
          "258:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "259:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "260:    \"%s: invalid source.\",",
          "261:    function );",
          "263:   return( -1 );",
          "264:  }",
          "265:  if( wide_string == NULL )",
          "266:  {",
          "267:   libcerror_error_set(",
          "268:    error,",
          "269:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "270:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "271:    \"%s: invalid wide string.\",",
          "272:    function );",
          "274:   return( -1 );",
          "275:  }",
          "276:  if( wide_string_size > (size_t) SSIZE_MAX )",
          "277:  {",
          "278:   libcerror_error_set(",
          "279:    error,",
          "280:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "281:    LIBCERROR_ARGUMENT_ERROR_VALUE_EXCEEDS_MAXIMUM,",
          "282:    \"%s: invalid wide string size value exceeds maximum.\",",
          "283:    function );",
          "285:   return( -1 );",
          "286:  }",
          "287:  source_length = system_string_length(",
          "288:                   source );",
          "290:  if( source_length > (size_t) ( SSIZE_MAX - 1 ) )",
          "291:  {",
          "292:   libcerror_error_set(",
          "293:    error,",
          "294:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "295:    LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
          "296:    \"%s: invalid source length value out of bounds.\",",
          "297:    function );",
          "299:   return( -1 );",
          "300:  }",
          "301: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "302:  wide_source_size = source_length + 1;",
          "303: #else",
          "304:  if( libclocale_codepage == 0 )",
          "305:  {",
          "306: #if SIZEOF_WCHAR_T == 4",
          "307:   result = libuna_utf32_string_size_from_utf8(",
          "308:             (libuna_utf8_character_t *) source,",
          "309:             source_length + 1,",
          "310:             &wide_source_size,",
          "311:             error );",
          "312: #elif SIZEOF_WCHAR_T == 2",
          "313:   result = libuna_utf16_string_size_from_utf8(",
          "314:             (libuna_utf8_character_t *) source,",
          "315:             source_length + 1,",
          "316:             &wide_source_size,",
          "317:             error );",
          "318: #endif",
          "319:  }",
          "320:  else",
          "321:  {",
          "322: #if SIZEOF_WCHAR_T == 4",
          "323:   result = libuna_utf32_string_size_from_byte_stream(",
          "324:             (uint8_t *) source,",
          "325:             source_length + 1,",
          "326:             libclocale_codepage,",
          "327:             &wide_source_size,",
          "328:             error );",
          "329: #elif SIZEOF_WCHAR_T == 2",
          "330:   result = libuna_utf16_string_size_from_byte_stream(",
          "331:             (uint8_t *) source,",
          "332:             source_length + 1,",
          "333:             libclocale_codepage,",
          "334:             &wide_source_size,",
          "335:             error );",
          "336: #endif",
          "337:  }",
          "338:  if( result != 1 )",
          "339:  {",
          "340:   libcerror_error_set(",
          "341:    error,",
          "342:    LIBCERROR_ERROR_DOMAIN_CONVERSION,",
          "343:    LIBCERROR_CONVERSION_ERROR_GENERIC,",
          "344:    \"%s: unable to determine wide string size.\",",
          "345:    function );",
          "347:   return( -1 );",
          "348:  }",
          "352:  if( wide_string_size < wide_source_size )",
          "353:  {",
          "354:   libcerror_error_set(",
          "355:    error,",
          "356:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "357:    LIBCERROR_ARGUMENT_ERROR_VALUE_TOO_SMALL,",
          "358:    \"%s: wide string too small.\",",
          "359:    function );",
          "361:   return( -1 );",
          "362:  }",
          "363: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "364:  if( system_string_copy(",
          "365:       wide_string,",
          "366:       source,",
          "367:       source_length ) == NULL )",
          "368:  {",
          "369:   libcerror_error_set(",
          "370:    error,",
          "371:    LIBCERROR_ERROR_DOMAIN_MEMORY,",
          "372:    LIBCERROR_MEMORY_ERROR_COPY_FAILED,",
          "373:    \"%s: unable to set wide string.\",",
          "374:    function );",
          "376:   return( -1 );",
          "377:  }",
          "378:  wide_string[ source_length ] = 0;",
          "379: #else",
          "380:  if( libclocale_codepage == 0 )",
          "381:  {",
          "382: #if SIZEOF_WCHAR_T == 4",
          "383:   result = libuna_utf32_string_copy_from_utf8(",
          "384:             (libuna_utf32_character_t *) wide_string,",
          "385:             wide_string_size,",
          "386:             (uint8_t *) source,",
          "387:             source_length + 1,",
          "388:             error );",
          "389: #elif SIZEOF_WCHAR_T == 2",
          "390:   result = libuna_utf16_string_copy_from_utf8(",
          "391:             (libuna_utf16_character_t *) wide_string,",
          "392:             wide_string_size,",
          "393:             (uint8_t *) source,",
          "394:             source_length + 1,",
          "395:             error );",
          "396: #endif",
          "397:  }",
          "398:  else",
          "399:  {",
          "400: #if SIZEOF_WCHAR_T == 4",
          "401:   result = libuna_utf32_string_copy_from_byte_stream(",
          "402:             (libuna_utf32_character_t *) wide_string,",
          "403:             wide_string_size,",
          "404:             (uint8_t *) source,",
          "405:             source_length + 1,",
          "406:             libclocale_codepage,",
          "407:             error );",
          "408: #elif SIZEOF_WCHAR_T == 2",
          "409:   result = libuna_utf16_string_copy_from_byte_stream(",
          "410:             (libuna_utf16_character_t *) wide_string,",
          "411:             wide_string_size,",
          "412:             (uint8_t *) source,",
          "413:             source_length + 1,",
          "414:             libclocale_codepage,",
          "415:             error );",
          "416: #endif",
          "417:  }",
          "418:  if( result != 1 )",
          "419:  {",
          "420:   libcerror_error_set(",
          "421:    error,",
          "422:    LIBCERROR_ERROR_DOMAIN_CONVERSION,",
          "423:    LIBCERROR_CONVERSION_ERROR_GENERIC,",
          "424:    \"%s: unable to set wide string.\",",
          "425:    function );",
          "427:   return( -1 );",
          "428:  }",
          "432:  return( 1 );",
          "433: }",
          "",
          "---------------"
        ],
        "tests/evt_test_functions.h||tests/evt_test_functions.h": [
          "File: tests/evt_test_functions.h -> tests/evt_test_functions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #if !defined( _EVT_TEST_FUNCTIONS_H )",
          "23: #define _EVT_TEST_FUNCTIONS_H",
          "25: #include <common.h>",
          "26: #include <types.h>",
          "28: #include \"evt_test_libcerror.h\"",
          "30: #if defined( __cplusplus )",
          "31: extern \"C\" {",
          "32: #endif",
          "34: int evt_test_get_narrow_source(",
          "35:      const system_character_t *source,",
          "36:      char *narrow_string,",
          "37:      size_t narrow_string_size,",
          "38:      libcerror_error_t **error );",
          "40: #if defined( HAVE_WIDE_CHARACTER_TYPE )",
          "42: int evt_test_get_wide_source(",
          "43:      const system_character_t *source,",
          "44:      wchar_t *wide_string,",
          "45:      size_t wide_string_size,",
          "46:      libcerror_error_t **error );",
          "50: #if defined( __cplusplus )",
          "51: }",
          "52: #endif",
          "",
          "---------------"
        ],
        "tests/evt_test_support.c||tests/evt_test_support.c": [
          "File: tests/evt_test_support.c -> tests/evt_test_support.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <stdlib.h>",
          "31: #endif",
          "33: #include \"evt_test_getopt.h\"",
          "34: #include \"evt_test_libbfio.h\"",
          "35: #include \"evt_test_libcerror.h\"",
          "37: #include \"evt_test_libevt.h\"",
          "39: #include \"evt_test_macros.h\"",
          "40: #include \"evt_test_unused.h\"",
          "",
          "[Removed Lines]",
          "36: #include \"evt_test_libclocale.h\"",
          "38: #include \"evt_test_libuna.h\"",
          "",
          "[Added Lines]",
          "33: #include \"evt_test_functions.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:      libbfio_handle_t *file_io_handle,",
          "45:      libcerror_error_t **error );",
          "",
          "[Removed Lines]",
          "50: int evt_test_support_get_narrow_source(",
          "51:      const system_character_t *source,",
          "52:      char *narrow_string,",
          "53:      size_t narrow_string_size,",
          "54:      libcerror_error_t **error )",
          "55: {",
          "56:  static char *function     = \"evt_test_support_get_narrow_source\";",
          "57:  size_t narrow_source_size = 0;",
          "58:  size_t source_length      = 0;",
          "60: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "61:  int result                = 0;",
          "62: #endif",
          "64:  if( source == NULL )",
          "65:  {",
          "66:   libcerror_error_set(",
          "67:    error,",
          "68:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "69:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "70:    \"%s: invalid source.\",",
          "71:    function );",
          "73:   return( -1 );",
          "74:  }",
          "75:  if( narrow_string == NULL )",
          "76:  {",
          "77:   libcerror_error_set(",
          "78:    error,",
          "79:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "80:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "81:    \"%s: invalid narrow string.\",",
          "82:    function );",
          "84:   return( -1 );",
          "85:  }",
          "86:  if( narrow_string_size > (size_t) SSIZE_MAX )",
          "87:  {",
          "88:   libcerror_error_set(",
          "89:    error,",
          "90:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "91:    LIBCERROR_ARGUMENT_ERROR_VALUE_EXCEEDS_MAXIMUM,",
          "92:    \"%s: invalid narrow string size value exceeds maximum.\",",
          "93:    function );",
          "95:   return( -1 );",
          "96:  }",
          "97:  source_length = system_string_length(",
          "98:                   source );",
          "100:  if( source_length > (size_t) ( SSIZE_MAX - 1 ) )",
          "101:  {",
          "102:   libcerror_error_set(",
          "103:    error,",
          "104:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "105:    LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
          "106:    \"%s: invalid source length value out of bounds.\",",
          "107:    function );",
          "109:   return( -1 );",
          "110:  }",
          "111: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "112:  if( libclocale_codepage == 0 )",
          "113:  {",
          "114: #if SIZEOF_WCHAR_T == 4",
          "115:   result = libuna_utf8_string_size_from_utf32(",
          "116:             (libuna_utf32_character_t *) source,",
          "117:             source_length + 1,",
          "118:             &narrow_source_size,",
          "119:             error );",
          "120: #elif SIZEOF_WCHAR_T == 2",
          "121:   result = libuna_utf8_string_size_from_utf16(",
          "122:             (libuna_utf16_character_t *) source,",
          "123:             source_length + 1,",
          "124:             &narrow_source_size,",
          "125:             error );",
          "126: #endif",
          "127:  }",
          "128:  else",
          "129:  {",
          "130: #if SIZEOF_WCHAR_T == 4",
          "131:   result = libuna_byte_stream_size_from_utf32(",
          "132:             (libuna_utf32_character_t *) source,",
          "133:             source_length + 1,",
          "134:             libclocale_codepage,",
          "135:             &narrow_source_size,",
          "136:             error );",
          "137: #elif SIZEOF_WCHAR_T == 2",
          "138:   result = libuna_byte_stream_size_from_utf16(",
          "139:             (libuna_utf16_character_t *) source,",
          "140:             source_length + 1,",
          "141:             libclocale_codepage,",
          "142:             &narrow_source_size,",
          "143:             error );",
          "144: #endif",
          "145:  }",
          "146:  if( result != 1 )",
          "147:  {",
          "148:   libcerror_error_set(",
          "149:    error,",
          "150:    LIBCERROR_ERROR_DOMAIN_CONVERSION,",
          "151:    LIBCERROR_CONVERSION_ERROR_GENERIC,",
          "152:    \"%s: unable to determine narrow string size.\",",
          "153:    function );",
          "155:   return( -1 );",
          "156:  }",
          "157: #else",
          "158:  narrow_source_size = source_length + 1;",
          "162:  if( narrow_string_size < narrow_source_size )",
          "163:  {",
          "164:   libcerror_error_set(",
          "165:    error,",
          "166:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "167:    LIBCERROR_ARGUMENT_ERROR_VALUE_TOO_SMALL,",
          "168:    \"%s: narrow string too small.\",",
          "169:    function );",
          "171:   return( -1 );",
          "172:  }",
          "173: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "174:  if( libclocale_codepage == 0 )",
          "175:  {",
          "176: #if SIZEOF_WCHAR_T == 4",
          "177:   result = libuna_utf8_string_copy_from_utf32(",
          "178:             (libuna_utf8_character_t *) narrow_string,",
          "179:             narrow_string_size,",
          "180:             (libuna_utf32_character_t *) source,",
          "181:             source_length + 1,",
          "182:             error );",
          "183: #elif SIZEOF_WCHAR_T == 2",
          "184:   result = libuna_utf8_string_copy_from_utf16(",
          "185:             (libuna_utf8_character_t *) narrow_string,",
          "186:             narrow_string_size,",
          "187:             (libuna_utf16_character_t *) source,",
          "188:             source_length + 1,",
          "189:             error );",
          "190: #endif",
          "191:  }",
          "192:  else",
          "193:  {",
          "194: #if SIZEOF_WCHAR_T == 4",
          "195:   result = libuna_byte_stream_copy_from_utf32(",
          "196:             (uint8_t *) narrow_string,",
          "197:             narrow_string_size,",
          "198:             libclocale_codepage,",
          "199:             (libuna_utf32_character_t *) source,",
          "200:             source_length + 1,",
          "201:             error );",
          "202: #elif SIZEOF_WCHAR_T == 2",
          "203:   result = libuna_byte_stream_copy_from_utf16(",
          "204:             (uint8_t *) narrow_string,",
          "205:             narrow_string_size,",
          "206:             libclocale_codepage,",
          "207:             (libuna_utf16_character_t *) source,",
          "208:             source_length + 1,",
          "209:             error );",
          "210: #endif",
          "211:  }",
          "212:  if( result != 1 )",
          "213:  {",
          "214:   libcerror_error_set(",
          "215:    error,",
          "216:    LIBCERROR_ERROR_DOMAIN_CONVERSION,",
          "217:    LIBCERROR_CONVERSION_ERROR_GENERIC,",
          "218:    \"%s: unable to set narrow string.\",",
          "219:    function );",
          "221:   return( -1 );",
          "222:  }",
          "223: #else",
          "224:  if( system_string_copy(",
          "225:       narrow_string,",
          "226:       source,",
          "227:       source_length ) == NULL )",
          "228:  {",
          "229:   libcerror_error_set(",
          "230:    error,",
          "231:    LIBCERROR_ERROR_DOMAIN_MEMORY,",
          "232:    LIBCERROR_MEMORY_ERROR_COPY_FAILED,",
          "233:    \"%s: unable to set narrow string.\",",
          "234:    function );",
          "236:   return( -1 );",
          "237:  }",
          "238:  narrow_string[ source_length ] = 0;",
          "242:  return( 1 );",
          "243: }",
          "245: #if defined( HAVE_WIDE_CHARACTER_TYPE )",
          "250: int evt_test_support_get_wide_source(",
          "251:      const system_character_t *source,",
          "252:      wchar_t *wide_string,",
          "253:      size_t wide_string_size,",
          "254:      libcerror_error_t **error )",
          "255: {",
          "256:  static char *function   = \"evt_test_support_get_wide_source\";",
          "257:  size_t wide_source_size = 0;",
          "258:  size_t source_length    = 0;",
          "260: #if !defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "261:  int result              = 0;",
          "262: #endif",
          "264:  if( source == NULL )",
          "265:  {",
          "266:   libcerror_error_set(",
          "267:    error,",
          "268:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "269:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "270:    \"%s: invalid source.\",",
          "271:    function );",
          "273:   return( -1 );",
          "274:  }",
          "275:  if( wide_string == NULL )",
          "276:  {",
          "277:   libcerror_error_set(",
          "278:    error,",
          "279:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "280:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "281:    \"%s: invalid wide string.\",",
          "282:    function );",
          "284:   return( -1 );",
          "285:  }",
          "286:  if( wide_string_size > (size_t) SSIZE_MAX )",
          "287:  {",
          "288:   libcerror_error_set(",
          "289:    error,",
          "290:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "291:    LIBCERROR_ARGUMENT_ERROR_VALUE_EXCEEDS_MAXIMUM,",
          "292:    \"%s: invalid wide string size value exceeds maximum.\",",
          "293:    function );",
          "295:   return( -1 );",
          "296:  }",
          "297:  source_length = system_string_length(",
          "298:                   source );",
          "300:  if( source_length > (size_t) ( SSIZE_MAX - 1 ) )",
          "301:  {",
          "302:   libcerror_error_set(",
          "303:    error,",
          "304:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "305:    LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
          "306:    \"%s: invalid source length value out of bounds.\",",
          "307:    function );",
          "309:   return( -1 );",
          "310:  }",
          "311: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "312:  wide_source_size = source_length + 1;",
          "313: #else",
          "314:  if( libclocale_codepage == 0 )",
          "315:  {",
          "316: #if SIZEOF_WCHAR_T == 4",
          "317:   result = libuna_utf32_string_size_from_utf8(",
          "318:             (libuna_utf8_character_t *) source,",
          "319:             source_length + 1,",
          "320:             &wide_source_size,",
          "321:             error );",
          "322: #elif SIZEOF_WCHAR_T == 2",
          "323:   result = libuna_utf16_string_size_from_utf8(",
          "324:             (libuna_utf8_character_t *) source,",
          "325:             source_length + 1,",
          "326:             &wide_source_size,",
          "327:             error );",
          "328: #endif",
          "329:  }",
          "330:  else",
          "331:  {",
          "332: #if SIZEOF_WCHAR_T == 4",
          "333:   result = libuna_utf32_string_size_from_byte_stream(",
          "334:             (uint8_t *) source,",
          "335:             source_length + 1,",
          "336:             libclocale_codepage,",
          "337:             &wide_source_size,",
          "338:             error );",
          "339: #elif SIZEOF_WCHAR_T == 2",
          "340:   result = libuna_utf16_string_size_from_byte_stream(",
          "341:             (uint8_t *) source,",
          "342:             source_length + 1,",
          "343:             libclocale_codepage,",
          "344:             &wide_source_size,",
          "345:             error );",
          "346: #endif",
          "347:  }",
          "348:  if( result != 1 )",
          "349:  {",
          "350:   libcerror_error_set(",
          "351:    error,",
          "352:    LIBCERROR_ERROR_DOMAIN_CONVERSION,",
          "353:    LIBCERROR_CONVERSION_ERROR_GENERIC,",
          "354:    \"%s: unable to determine wide string size.\",",
          "355:    function );",
          "357:   return( -1 );",
          "358:  }",
          "362:  if( wide_string_size < wide_source_size )",
          "363:  {",
          "364:   libcerror_error_set(",
          "365:    error,",
          "366:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "367:    LIBCERROR_ARGUMENT_ERROR_VALUE_TOO_SMALL,",
          "368:    \"%s: wide string too small.\",",
          "369:    function );",
          "371:   return( -1 );",
          "372:  }",
          "373: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "374:  if( system_string_copy(",
          "375:       wide_string,",
          "376:       source,",
          "377:       source_length ) == NULL )",
          "378:  {",
          "379:   libcerror_error_set(",
          "380:    error,",
          "381:    LIBCERROR_ERROR_DOMAIN_MEMORY,",
          "382:    LIBCERROR_MEMORY_ERROR_COPY_FAILED,",
          "383:    \"%s: unable to set wide string.\",",
          "384:    function );",
          "386:   return( -1 );",
          "387:  }",
          "388:  wide_string[ source_length ] = 0;",
          "389: #else",
          "390:  if( libclocale_codepage == 0 )",
          "391:  {",
          "392: #if SIZEOF_WCHAR_T == 4",
          "393:   result = libuna_utf32_string_copy_from_utf8(",
          "394:             (libuna_utf32_character_t *) wide_string,",
          "395:             wide_string_size,",
          "396:             (uint8_t *) source,",
          "397:             source_length + 1,",
          "398:             error );",
          "399: #elif SIZEOF_WCHAR_T == 2",
          "400:   result = libuna_utf16_string_copy_from_utf8(",
          "401:             (libuna_utf16_character_t *) wide_string,",
          "402:             wide_string_size,",
          "403:             (uint8_t *) source,",
          "404:             source_length + 1,",
          "405:             error );",
          "406: #endif",
          "407:  }",
          "408:  else",
          "409:  {",
          "410: #if SIZEOF_WCHAR_T == 4",
          "411:   result = libuna_utf32_string_copy_from_byte_stream(",
          "412:             (libuna_utf32_character_t *) wide_string,",
          "413:             wide_string_size,",
          "414:             (uint8_t *) source,",
          "415:             source_length + 1,",
          "416:             libclocale_codepage,",
          "417:             error );",
          "418: #elif SIZEOF_WCHAR_T == 2",
          "419:   result = libuna_utf16_string_copy_from_byte_stream(",
          "420:             (libuna_utf16_character_t *) wide_string,",
          "421:             wide_string_size,",
          "422:             (uint8_t *) source,",
          "423:             source_length + 1,",
          "424:             libclocale_codepage,",
          "425:             error );",
          "426: #endif",
          "427:  }",
          "428:  if( result != 1 )",
          "429:  {",
          "430:   libcerror_error_set(",
          "431:    error,",
          "432:    LIBCERROR_ERROR_DOMAIN_CONVERSION,",
          "433:    LIBCERROR_CONVERSION_ERROR_GENERIC,",
          "434:    \"%s: unable to set wide string.\",",
          "435:    function );",
          "437:   return( -1 );",
          "438:  }",
          "442:  return( 1 );",
          "443: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "612:            source,",
          "613:            narrow_source,",
          "614:            256,",
          "",
          "[Removed Lines]",
          "611:  result = evt_test_support_get_narrow_source(",
          "",
          "[Added Lines]",
          "210:  result = evt_test_get_narrow_source(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "686:            source,",
          "687:            wide_source,",
          "688:            256,",
          "",
          "[Removed Lines]",
          "685:  result = evt_test_support_get_wide_source(",
          "",
          "[Added Lines]",
          "284:  result = evt_test_get_wide_source(",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "298218b16e59ef0529efe7ac62a09008b9e7834c",
      "candidate_info": {
        "commit_hash": "298218b16e59ef0529efe7ac62a09008b9e7834c",
        "repo": "libyal/libevt",
        "commit_url": "https://github.com/libyal/libevt/commit/298218b16e59ef0529efe7ac62a09008b9e7834c",
        "files": [
          "appveyor.yml",
          "configure.ac",
          "libevt.nuspec",
          "m4/libbfio.m4"
        ],
        "message": "Worked on tests",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "libevt.nuspec||libevt.nuspec",
          "m4/libbfio.m4||m4/libbfio.m4"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_INIT(",
          "4:  [libevt],",
          "6:  [joachim.metz@gmail.com])",
          "8: AC_CONFIG_SRCDIR(",
          "",
          "[Removed Lines]",
          "5:  [20170911],",
          "",
          "[Added Lines]",
          "5:  [20170913],",
          "",
          "---------------"
        ],
        "libevt.nuspec||libevt.nuspec": [
          "File: libevt.nuspec -> libevt.nuspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <package >",
          "3:   <metadata>",
          "4:     <id>libevt</id>",
          "6:     <authors>Joachim Metz</authors>",
          "7:     <owners>joachimmetz</owners>",
          "8:     <licenseUrl>https://raw.githubusercontent.com/libyal/libevt/master/COPYING</licenseUrl>",
          "",
          "[Removed Lines]",
          "5:     <version>20170911</version>",
          "",
          "[Added Lines]",
          "5:     <version>20170913</version>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:     <requireLicenseAcceptance>false</requireLicenseAcceptance>",
          "11:     <title>libevt</title>",
          "12:     <description>Library to access the Windows Event Log (EVT) format</description>",
          "14:     <copyright>Copyright (C) 2011-2017</copyright>",
          "15:     <tags>native</tags>",
          "16:   </metadata>",
          "",
          "[Removed Lines]",
          "13:     <releaseNotes>Release of libevt 20170911</releaseNotes>",
          "",
          "[Added Lines]",
          "13:     <releaseNotes>Release of libevt 20170913</releaseNotes>",
          "",
          "---------------"
        ],
        "m4/libbfio.m4||m4/libbfio.m4": [
          "File: m4/libbfio.m4 -> m4/libbfio.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: dnl Checks for libbfio or required headers and functions",
          "2: dnl",
          "5: dnl Function to detect if libbfio is available",
          "6: AC_DEFUN([AX_LIBBFIO_CHECK_LIB],",
          "",
          "[Removed Lines]",
          "3: dnl Version: 20170911",
          "",
          "[Added Lines]",
          "3: dnl Version: 20170912",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304:     ])",
          "305:   ])",
          "307: dnl Function to detect how to enable libbfio",
          "308: AC_DEFUN([AX_LIBBFIO_CHECK_ENABLE],",
          "309:   [AX_COMMON_ARG_WITH(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: dnl Function to detect if libbfio dependencies are available",
          "308: AC_DEFUN([AX_LIBBFIO_CHECK_LOCAL],",
          "309:   [dnl No additional checks.",
          "311:   ac_cv_libbfio_CPPFLAGS=\"-I../libbfio\";",
          "312:   ac_cv_libbfio_LIBADD=\"../libbfio/libbfio.la\";",
          "314:   ac_cv_libbfio=local",
          "315:   ])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "319:   dnl Check if the dependencies for the local library version",
          "320:   AS_IF(",
          "321:     [test \"x$ac_cv_libbfio\" != xyes],",
          "323:       [HAVE_LOCAL_LIBBFIO],",
          "324:       [1],",
          "325:       [Define to 1 if the local version of libbfio is used.])",
          "326:     AC_SUBST(",
          "327:       [HAVE_LOCAL_LIBBFIO],",
          "328:       [1])",
          "334:     ])",
          "336:   AM_CONDITIONAL(",
          "",
          "[Removed Lines]",
          "322:     [AC_DEFINE(",
          "330:     ac_cv_libbfio_CPPFLAGS=\"-I../libbfio\";",
          "331:     ac_cv_libbfio_LIBADD=\"../libbfio/libbfio.la\";",
          "333:     ac_cv_libbfio=local",
          "",
          "[Added Lines]",
          "332:     [AX_LIBBFIO_CHECK_LOCAL",
          "334:     AC_DEFINE(",
          "",
          "---------------"
        ]
      }
    }
  ]
}