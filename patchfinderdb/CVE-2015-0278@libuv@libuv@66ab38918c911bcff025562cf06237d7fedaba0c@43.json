{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "145b76b894c6ed6406d7d3d47abedea5b29d942c",
      "candidate_info": {
        "commit_hash": "145b76b894c6ed6406d7d3d47abedea5b29d942c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/145b76b894c6ed6406d7d3d47abedea5b29d942c",
        "files": [
          "Makefile.am",
          "src/unix/stream.c",
          "test/test-list.h",
          "test/test-osx-select.c",
          "uv.gyp"
        ],
        "message": "darwin: allocate enough space for select() hack\n\n`fd_set`s are way too small for `select()` hack when stream's fd is\nbigger than 1023. Make `fd_set`s a part of `uv__stream_select_t`\nstructure.\n\nfix #1461",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/unix/stream.c||src/unix/stream.c",
          "test/test-list.h||test/test-list.h",
          "test/test-osx-select.c||test/test-osx-select.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "259: if DARWIN",
          "260: include_HEADERS += include/uv-darwin.h",
          "261: libuv_la_CFLAGS += -D_DARWIN_USE_64_BIT_INODE=1",
          "262: libuv_la_SOURCES += src/unix/darwin.c \\",
          "263:                     src/unix/darwin-proctitle.c \\",
          "264:                     src/unix/fsevents.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262: libuv_la_CFLAGS += -D_DARWIN_UNLIMITED_SELECT=1",
          "",
          "---------------"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   int fake_fd;",
          "54:   int int_fd;",
          "55:   int fd;",
          "56: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:   fd_set* sread;",
          "57:   size_t sread_sz;",
          "58:   fd_set* swrite;",
          "59:   size_t swrite_sz;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:   uv_stream_t* stream;",
          "128:   uv__stream_select_t* s;",
          "129:   char buf[1024];",
          "132:   int events;",
          "133:   int fd;",
          "134:   int r;",
          "",
          "[Removed Lines]",
          "130:   fd_set sread;",
          "131:   fd_set swrite;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:       break;",
          "155:     if (uv__io_active(&stream->io_watcher, UV__POLLIN))",
          "157:     if (uv__io_active(&stream->io_watcher, UV__POLLOUT))",
          "163:     if (r == -1) {",
          "164:       if (errno == EINTR)",
          "165:         continue;",
          "",
          "[Removed Lines]",
          "152:     FD_ZERO(&sread);",
          "153:     FD_ZERO(&swrite);",
          "156:       FD_SET(fd, &sread);",
          "158:       FD_SET(fd, &swrite);",
          "159:     FD_SET(s->int_fd, &sread);",
          "162:     r = select(max_fd + 1, &sread, &swrite, NULL, NULL);",
          "",
          "[Added Lines]",
          "154:     memset(s->sread, 0, s->sread_sz);",
          "155:     memset(s->swrite, 0, s->swrite_sz);",
          "158:       FD_SET(fd, s->sread);",
          "160:       FD_SET(fd, s->swrite);",
          "161:     FD_SET(s->int_fd, s->sread);",
          "164:     r = select(max_fd + 1, s->sread, s->swrite, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "173:       continue;",
          "177:       while (1) {",
          "178:         r = read(s->int_fd, buf, sizeof(buf));",
          "",
          "[Removed Lines]",
          "176:     if (FD_ISSET(s->int_fd, &sread))",
          "",
          "[Added Lines]",
          "178:     if (FD_ISSET(s->int_fd, s->sread))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "196:     events = 0;",
          "198:       events |= UV__POLLIN;",
          "200:       events |= UV__POLLOUT;",
          "203:     if (events != 0) {",
          "204:       ACCESS_ONCE(int, s->events) = events;",
          "",
          "[Removed Lines]",
          "197:     if (FD_ISSET(fd, &sread))",
          "199:     if (FD_ISSET(fd, &swrite))",
          "202:     assert(events != 0 || FD_ISSET(s->int_fd, &sread));",
          "",
          "[Added Lines]",
          "199:     if (FD_ISSET(fd, s->sread))",
          "201:     if (FD_ISSET(fd, s->swrite))",
          "204:     assert(events != 0 || FD_ISSET(s->int_fd, s->sread));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "261:   int ret;",
          "262:   int kq;",
          "263:   int old_fd;",
          "265:   kq = kqueue();",
          "266:   if (kq == -1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:   int max_fd;",
          "267:   size_t sread_sz;",
          "268:   size_t swrite_sz;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "284:     return 0;",
          "291:   s->events = 0;",
          "292:   s->fd = *fd;",
          "294:   err = uv_async_init(stream->loop, &s->async, uv__stream_osx_select_cb);",
          "300:   s->async.flags |= UV__HANDLE_INTERNAL;",
          "301:   uv__handle_unref(&s->async);",
          "313:   s->fake_fd = fds[0];",
          "314:   s->int_fd = fds[1];",
          "",
          "[Removed Lines]",
          "287:   s = malloc(sizeof(*s));",
          "288:   if (s == NULL)",
          "289:     return -ENOMEM;",
          "295:   if (err) {",
          "296:     free(s);",
          "297:     return err;",
          "298:   }",
          "303:   if (uv_sem_init(&s->close_sem, 0))",
          "304:     goto fatal1;",
          "306:   if (uv_sem_init(&s->async_sem, 0))",
          "307:     goto fatal2;",
          "310:   if (socketpair(AF_UNIX, SOCK_STREAM, 0, fds))",
          "311:     goto fatal3;",
          "",
          "[Added Lines]",
          "297:   if (socketpair(AF_UNIX, SOCK_STREAM, 0, fds))",
          "298:     return -errno;",
          "300:   max_fd = *fd;",
          "301:   if (fds[1] > max_fd)",
          "302:     max_fd = fds[1];",
          "304:   sread_sz = (max_fd + NBBY) / NBBY;",
          "305:   swrite_sz = sread_sz;",
          "307:   s = malloc(sizeof(*s) + sread_sz + swrite_sz);",
          "308:   if (s == NULL) {",
          "309:     err = -ENOMEM;",
          "310:     goto failed_malloc;",
          "311:   }",
          "315:   s->sread = (fd_set*) ((char*) s + sizeof(*s));",
          "316:   s->sread_sz = sread_sz;",
          "317:   s->swrite = (fd_set*) ((char*) s->sread + sread_sz);",
          "318:   s->swrite_sz = swrite_sz;",
          "321:   if (err)",
          "322:     goto failed_async_init;",
          "327:   err = uv_sem_init(&s->close_sem, 0);",
          "328:   if (err != 0)",
          "329:     goto failed_close_sem_init;",
          "331:   err = uv_sem_init(&s->async_sem, 0);",
          "332:   if (err != 0)",
          "333:     goto failed_async_sem_init;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "318:   stream->select = s;",
          "324:   return 0;",
          "327:   s->stream = NULL;",
          "328:   stream->select = NULL;",
          "335:   uv_sem_destroy(&s->async_sem);",
          "337:   uv_sem_destroy(&s->close_sem);",
          "339:   uv_close((uv_handle_t*) &s->async, uv__stream_osx_cb_close);",
          "341: }",
          "",
          "[Removed Lines]",
          "321:   if (uv_thread_create(&s->thread, uv__stream_osx_select, stream))",
          "322:     goto fatal4;",
          "326: fatal4:",
          "330:   uv__close(s->fake_fd);",
          "331:   uv__close(s->int_fd);",
          "332:   s->fake_fd = -1;",
          "333:   s->int_fd = -1;",
          "334: fatal3:",
          "336: fatal2:",
          "338: fatal1:",
          "340:   return -errno;",
          "",
          "[Added Lines]",
          "343:   err = uv_thread_create(&s->thread, uv__stream_osx_select, stream);",
          "344:   if (err != 0)",
          "345:     goto failed_thread_create;",
          "349: failed_thread_create:",
          "356: failed_async_sem_init:",
          "359: failed_close_sem_init:",
          "360:   uv__close(fds[0]);",
          "361:   uv__close(fds[1]);",
          "363:   return err;",
          "365: failed_async_init:",
          "366:   free(s);",
          "368: failed_malloc:",
          "369:   uv__close(fds[0]);",
          "370:   uv__close(fds[1]);",
          "372:   return err;",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: #endif",
          "287: #ifdef __APPLE__",
          "288: TEST_DECLARE   (osx_select)",
          "289: #endif",
          "290: HELPER_DECLARE (tcp4_echo_server)",
          "291: HELPER_DECLARE (tcp6_echo_server)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289: TEST_DECLARE   (osx_select_many_fds)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "575: #ifdef __APPLE__",
          "576:   TEST_ENTRY (osx_select)",
          "577: #endif",
          "579:   TEST_ENTRY  (fs_file_noent)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:   TEST_ENTRY (osx_select_many_fds)",
          "",
          "---------------"
        ],
        "test/test-osx-select.c||test/test-osx-select.c": [
          "File: test/test-osx-select.c -> test/test-osx-select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   return 0;",
          "80: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: TEST_IMPL(osx_select_many_fds) {",
          "84:   int r;",
          "85:   int fd;",
          "86:   size_t i;",
          "87:   size_t len;",
          "88:   const char* str;",
          "89:   struct sockaddr_in addr;",
          "90:   uv_tty_t tty;",
          "91:   uv_tcp_t tcps[1500];",
          "93:   r = uv_ip4_addr(\"127.0.0.1\", 0, &addr);",
          "94:   ASSERT(r == 0);",
          "96:   for (i = 0; i < ARRAY_SIZE(tcps); i++) {",
          "97:     r = uv_tcp_init(uv_default_loop(), &tcps[i]);",
          "98:     ASSERT(r == 0);",
          "99:     r = uv_tcp_bind(&tcps[i], (const struct sockaddr *) &addr, 0);",
          "100:     ASSERT(r == 0);",
          "101:     uv_unref((uv_handle_t*) &tcps[i]);",
          "102:   }",
          "104:   fd = open(\"/dev/tty\", O_RDONLY);",
          "105:   ASSERT(fd >= 0);",
          "107:   r = uv_tty_init(uv_default_loop(), &tty, fd, 1);",
          "108:   ASSERT(r == 0);",
          "110:   r = uv_read_start((uv_stream_t*) &tty, alloc_cb, read_cb);",
          "111:   ASSERT(r == 0);",
          "114:   str = \"got some input\\n\"",
          "115:         \"with a couple of lines\\n\"",
          "116:         \"feel pretty happy\\n\";",
          "117:   for (i = 0, len = strlen(str); i < len; i++) {",
          "118:     r = ioctl(fd, TIOCSTI, str + i);",
          "119:     ASSERT(r == 0);",
          "120:   }",
          "122:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "124:   ASSERT(read_count == 3);",
          "126:   MAKE_VALGRIND_HAPPY();",
          "127:   return 0;",
          "128: }",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:             ],",
          "47:           }],",
          "48:           ['OS == \"mac\"', {",
          "50:           }],",
          "51:           ['OS == \"linux\"', {",
          "52:             'defines': [ '_POSIX_C_SOURCE=200112' ],",
          "",
          "[Removed Lines]",
          "49:             'defines': [ '_DARWIN_USE_64_BIT_INODE=1' ],",
          "",
          "[Added Lines]",
          "49:             'defines': [",
          "50:               '_DARWIN_USE_64_BIT_INODE=1',",
          "51:               '_DARWIN_UNLIMITED_SELECT=1',",
          "52:             ],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:           ],",
          "193:           'defines': [",
          "194:             '_DARWIN_USE_64_BIT_INODE=1',",
          "195:           ]",
          "196:         }],",
          "197:         [ 'OS!=\"mac\"', {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:             '_DARWIN_UNLIMITED_SELECT=1',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2acd544cff7142e06aa3b09ec64b4a33dd9ab996",
      "candidate_info": {
        "commit_hash": "2acd544cff7142e06aa3b09ec64b4a33dd9ab996",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/2acd544cff7142e06aa3b09ec64b4a33dd9ab996",
        "files": [
          ".mailmap",
          "AUTHORS",
          "ChangeLog",
          "include/uv-version.h"
        ],
        "message": "2014.05.02, Version 0.11.25 (Unstable)\n\nChanges since version 0.11.24:\n\n* osx: pass const handle pointer to uv___stream_fd (Chernyshev\n  Viacheslav)\n\n* unix, windows: pass const handle ptr to uv_tcp_get*name (Chernyshev\n  Viacheslav)\n\n* common: pass const sockaddr ptr to uv_ip*_name (Chernyshev Viacheslav)\n\n* unix, windows: validate flags on uv_udp|tcp_bind (Sa\u00fal Ibarra\n  Corretg\u00e9)\n\n* unix: handle case when addr is not initialized after recvmsg (Sa\u00fal\n  Ibarra Corretg\u00e9)\n\n* unix, windows: uv_now constness (Rasmus Pedersen)",
        "before_after_code_files": [
          "include/uv-version.h||include/uv-version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-version.h||include/uv-version.h": [
          "File: include/uv-version.h -> include/uv-version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #define UV_VERSION_MAJOR 0",
          "34: #define UV_VERSION_MINOR 11",
          "35: #define UV_VERSION_PATCH 25",
          "",
          "[Removed Lines]",
          "36: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "36: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1b931de4e634be515e528d1d07d59551a86eded",
      "candidate_info": {
        "commit_hash": "b1b931de4e634be515e528d1d07d59551a86eded",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b1b931de4e634be515e528d1d07d59551a86eded",
        "files": [
          "src/unix/fsevents.c"
        ],
        "message": "fsevents: use native character encoding file paths\n\nCreate file paths with CFStringCreateWithFileSystemRepresentation(),\nnot CFStringCreateWithCString().\n\nReapplies 3780e12 (\"fsevents: support japaneese characters in path\")\nfrom the v0.10 branch.  Was dropped in the last v0.10 -> master merge\nfor failing to apply.",
        "before_after_code_files": [
          "src/unix/fsevents.c||src/unix/fsevents.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/fsevents.c||src/unix/fsevents.c": [
          "File: src/unix/fsevents.c -> src/unix/fsevents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: static void (*pCFRunLoopSourceSignal)(CFRunLoopSourceRef);",
          "121: static void (*pCFRunLoopStop)(CFRunLoopRef);",
          "122: static void (*pCFRunLoopWakeUp)(CFRunLoopRef);",
          "126: static CFStringEncoding (*pCFStringGetSystemEncoding)(void);",
          "127: static CFStringRef (*pkCFRunLoopDefaultMode);",
          "128: static FSEventStreamRef (*pFSEventStreamCreate)(CFAllocatorRef,",
          "",
          "[Removed Lines]",
          "123: static CFStringRef (*pCFStringCreateWithCString)(CFAllocatorRef,",
          "124:                                                  const char*,",
          "125:                                                  CFStringEncoding);",
          "",
          "[Added Lines]",
          "123: static CFStringRef (*pCFStringCreateWithFileSystemRepresentation)(",
          "124:     CFAllocatorRef,",
          "125:     const char*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425:       curr = QUEUE_DATA(q, uv_fs_event_t, cf_member);",
          "427:       assert(curr->realpath != NULL);",
          "431:       if (paths[i] == NULL) {",
          "432:         uv_mutex_unlock(&state->fsevent_mutex);",
          "433:         goto final;",
          "",
          "[Removed Lines]",
          "428:       paths[i] = pCFStringCreateWithCString(NULL,",
          "429:                                             curr->realpath,",
          "430:                                             pCFStringGetSystemEncoding());",
          "",
          "[Added Lines]",
          "428:       paths[i] =",
          "429:           pCFStringCreateWithFileSystemRepresentation(NULL, curr->realpath);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "528:   V(core_foundation_handle, CFRunLoopSourceSignal);",
          "529:   V(core_foundation_handle, CFRunLoopStop);",
          "530:   V(core_foundation_handle, CFRunLoopWakeUp);",
          "532:   V(core_foundation_handle, CFStringGetSystemEncoding);",
          "533:   V(core_foundation_handle, kCFRunLoopDefaultMode);",
          "534:   V(core_services_handle, FSEventStreamCreate);",
          "",
          "[Removed Lines]",
          "531:   V(core_foundation_handle, CFStringCreateWithCString);",
          "",
          "[Added Lines]",
          "530:   V(core_foundation_handle, CFStringCreateWithFileSystemRepresentation);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1ff22cb7eeac941403117f82d6d8e188836fbee",
      "candidate_info": {
        "commit_hash": "a1ff22cb7eeac941403117f82d6d8e188836fbee",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a1ff22cb7eeac941403117f82d6d8e188836fbee",
        "files": [
          "include/uv.h",
          "src/unix/fs.c",
          "src/win/fs.c"
        ],
        "message": "include: avoid using C++ 'template' reserved word\n\nCloses #1394",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/fs.c||src/unix/fs.c",
          "src/win/fs.c||src/win/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1892: UV_EXTERN int uv_fs_mkdir(uv_loop_t* loop, uv_fs_t* req, const char* path,",
          "1893:     int mode, uv_fs_cb cb);",
          "1896:     uv_fs_cb cb);",
          "1898: UV_EXTERN int uv_fs_rmdir(uv_loop_t* loop, uv_fs_t* req, const char* path,",
          "",
          "[Removed Lines]",
          "1895: UV_EXTERN int uv_fs_mkdtemp(uv_loop_t* loop, uv_fs_t* req, const char* template,",
          "",
          "[Added Lines]",
          "1895: UV_EXTERN int uv_fs_mkdtemp(uv_loop_t* loop, uv_fs_t* req, const char* tpl,",
          "",
          "---------------"
        ],
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1010: int uv_fs_mkdtemp(uv_loop_t* loop,",
          "1011:                   uv_fs_t* req,",
          "1013:                   uv_fs_cb cb) {",
          "1014:   INIT(MKDTEMP);",
          "1016:   if (req->path == NULL)",
          "1017:     return -ENOMEM;",
          "1018:   POST;",
          "",
          "[Removed Lines]",
          "1012:                   const char* template,",
          "1015:   req->path = strdup(template);",
          "",
          "[Added Lines]",
          "1012:                   const char* tpl,",
          "1015:   req->path = strdup(tpl);",
          "",
          "---------------"
        ],
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1797: }",
          "1801:     uv_fs_cb cb) {",
          "1802:   int err;",
          "1804:   uv_fs_req_init(loop, req, UV_FS_MKDTEMP, cb);",
          "1807:   if (err)",
          "1808:     return uv_translate_sys_error(err);",
          "",
          "[Removed Lines]",
          "1800: int uv_fs_mkdtemp(uv_loop_t* loop, uv_fs_t* req, const char* template,",
          "1806:   err = fs__capture_path(loop, req, template, NULL, TRUE);",
          "",
          "[Added Lines]",
          "1800: int uv_fs_mkdtemp(uv_loop_t* loop, uv_fs_t* req, const char* tpl,",
          "1806:   err = fs__capture_path(loop, req, tpl, NULL, TRUE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbe99057991bacdb2099f95dd43c324453bf354b",
      "candidate_info": {
        "commit_hash": "dbe99057991bacdb2099f95dd43c324453bf354b",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/dbe99057991bacdb2099f95dd43c324453bf354b",
        "files": [
          "include/uv-errno.h",
          "include/uv.h",
          "src/uv-common.c"
        ],
        "message": "libuv: add more getaddrinfo errors",
        "before_after_code_files": [
          "include/uv-errno.h||include/uv-errno.h",
          "include/uv.h||include/uv.h",
          "src/uv-common.c||src/uv-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-errno.h||include/uv-errno.h": [
          "File: include/uv-errno.h -> include/uv-errno.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #define UV__EAI_SERVICE     (-3010)",
          "41: #define UV__EAI_SOCKTYPE    (-3011)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #define UV__EAI_BADHINTS    (-3013)",
          "44: #define UV__EAI_PROTOCOL    (-3014)",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   XX(EAI_ADDRFAMILY, \"address family not supported\")                          \\",
          "72:   XX(EAI_AGAIN, \"temporary failure\")                                          \\",
          "73:   XX(EAI_BADFLAGS, \"bad ai_flags value\")                                      \\",
          "74:   XX(EAI_CANCELED, \"request canceled\")                                        \\",
          "75:   XX(EAI_FAIL, \"permanent failure\")                                           \\",
          "76:   XX(EAI_FAMILY, \"ai_family not supported\")                                   \\",
          "77:   XX(EAI_MEMORY, \"out of memory\")                                             \\",
          "78:   XX(EAI_NODATA, \"no address\")                                                \\",
          "79:   XX(EAI_NONAME, \"unknown node or service\")                                   \\",
          "80:   XX(EAI_SERVICE, \"service not available for socket type\")                    \\",
          "81:   XX(EAI_SOCKTYPE, \"socket type not supported\")                               \\",
          "82:   XX(EAI_SYSTEM, \"system error\")                                              \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:   XX(EAI_BADHINTS, \"invalid value for hints\")                                 \\",
          "81:   XX(EAI_OVERFLOW, \"argument buffer overflow\")                                \\",
          "82:   XX(EAI_PROTOCOL, \"resolved protocol is unknown\")                            \\",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "404: #if defined(EAI_BADFLAGS)",
          "405:   case EAI_BADFLAGS: return UV_EAI_BADFLAGS;",
          "406: #endif",
          "407: #if defined(EAI_CANCELED)",
          "408:   case EAI_CANCELED: return UV_EAI_CANCELED;",
          "409: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407: #if defined(EAI_BADHINTS)",
          "408:   case EAI_BADHINTS: return UV_EAI_BADHINTS;",
          "409: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424:   case EAI_NONAME: return UV_EAI_NONAME;",
          "425: # endif",
          "426: #endif",
          "427: #if defined(EAI_SERVICE)",
          "428:   case EAI_SERVICE: return UV_EAI_SERVICE;",
          "429: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430: #if defined(EAI_OVERFLOW)",
          "431:   case EAI_OVERFLOW: return UV_EAI_OVERFLOW;",
          "432: #endif",
          "433: #if defined(EAI_PROTOCOL)",
          "434:   case EAI_PROTOCOL: return UV_EAI_PROTOCOL;",
          "435: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}