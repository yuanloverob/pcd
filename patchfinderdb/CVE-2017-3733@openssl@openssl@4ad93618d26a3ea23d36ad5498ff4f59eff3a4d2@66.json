{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7f5fb2b28c2de4730c13f35d7d90265c62693631",
      "candidate_info": {
        "commit_hash": "7f5fb2b28c2de4730c13f35d7d90265c62693631",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7f5fb2b28c2de4730c13f35d7d90265c62693631",
        "files": [
          "test/build.info",
          "test/sslapitest.c"
        ],
        "message": "Provide some tests for the sig algs API\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2160)\n(cherry picked from commit f1b25aaed32f90b3309243d24353bf636c1c786b)",
        "before_after_code_files": [
          "test/build.info||test/build.info",
          "test/sslapitest.c||test/sslapitest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/build.info||test/build.info": [
          "File: test/build.info -> test/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:   DEPEND[bioprinttest]=../libcrypto",
          "270:   SOURCE[sslapitest]=sslapitest.c ssltestlib.c testutil.c",
          "272:   DEPEND[sslapitest]=../libcrypto ../libssl",
          "274:   SOURCE[dtlstest]=dtlstest.c ssltestlib.c testutil.c",
          "",
          "[Removed Lines]",
          "271:   INCLUDE[sslapitest]=../include",
          "",
          "[Added Lines]",
          "271:   INCLUDE[sslapitest]=../include ..",
          "",
          "---------------"
        ],
        "test/sslapitest.c||test/sslapitest.c": [
          "File: test/sslapitest.c -> test/sslapitest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"ssltestlib.h\"",
          "19: #include \"testutil.h\"",
          "21: static char *cert = NULL;",
          "22: static char *privkey = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include \"e_os.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "875:     EXECUTE_TEST(execute_test_ssl_bio, ssl_bio_tear_down);",
          "876: }",
          "878: int main(int argc, char *argv[])",
          "879: {",
          "880:     BIO *err = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "879: typedef struct {",
          "881:     const int *list;",
          "883:     size_t listlen;",
          "885:     const char *liststr;",
          "887:     int valid;",
          "889:     int connsuccess;",
          "890: } sigalgs_list;",
          "892: static const int validlist1[] = {NID_sha256, EVP_PKEY_RSA};",
          "893: static const int validlist2[] = {NID_sha256, EVP_PKEY_RSA, NID_sha512, EVP_PKEY_EC};",
          "894: static const int validlist3[] = {NID_sha512, EVP_PKEY_EC};",
          "895: static const int invalidlist1[] = {NID_undef, EVP_PKEY_RSA};",
          "896: static const int invalidlist2[] = {NID_sha256, NID_undef};",
          "897: static const int invalidlist3[] = {NID_sha256, EVP_PKEY_RSA, NID_sha256};",
          "898: static const int invalidlist4[] = {NID_sha256};",
          "899: static const sigalgs_list testsigalgs[] = {",
          "900:     {validlist1, OSSL_NELEM(validlist1), NULL, 1, 1},",
          "901:     {validlist2, OSSL_NELEM(validlist2), NULL, 1, 1},",
          "902:     {validlist3, OSSL_NELEM(validlist3), NULL, 1, 0},",
          "903:     {NULL, 0, \"RSA+SHA256\", 1, 1},",
          "904:     {NULL, 0, \"RSA+SHA256:ECDSA+SHA512\", 1, 1},",
          "905:     {NULL, 0, \"ECDSA+SHA512\", 1, 0},",
          "906:     {invalidlist1, OSSL_NELEM(invalidlist1), NULL, 0, 0},",
          "907:     {invalidlist2, OSSL_NELEM(invalidlist2), NULL, 0, 0},",
          "908:     {invalidlist3, OSSL_NELEM(invalidlist3), NULL, 0, 0},",
          "909:     {invalidlist4, OSSL_NELEM(invalidlist4), NULL, 0, 0},",
          "910:     {NULL, 0, \"RSA\", 0, 0},",
          "911:     {NULL, 0, \"SHA256\", 0, 0},",
          "912:     {NULL, 0, \"RSA+SHA256:SHA256\", 0, 0},",
          "913:     {NULL, 0, \"Invalid\", 0, 0}};",
          "915: static int test_set_sigalgs(int idx)",
          "916: {",
          "917:     SSL_CTX *cctx = NULL, *sctx = NULL;",
          "918:     SSL *clientssl = NULL, *serverssl = NULL;",
          "919:     int testresult = 0;",
          "920:     const sigalgs_list *curr;",
          "921:     int testctx;",
          "924:     if ((size_t)idx >= OSSL_NELEM(testsigalgs) * 2)",
          "925:         return 0;",
          "927:     testctx = ((size_t)idx < OSSL_NELEM(testsigalgs));",
          "928:     curr = testctx ? &testsigalgs[idx]",
          "929:                    : &testsigalgs[idx - OSSL_NELEM(testsigalgs)];",
          "931:     if (!create_ssl_ctx_pair(TLS_server_method(), TLS_client_method(), &sctx,",
          "932:                              &cctx, cert, privkey)) {",
          "933:         printf(\"Unable to create SSL_CTX pair\\n\");",
          "934:         return 0;",
          "935:     }",
          "937:     if (testctx) {",
          "938:         int ret;",
          "939:         if (curr->list != NULL)",
          "940:             ret = SSL_CTX_set1_sigalgs(cctx, curr->list, curr->listlen);",
          "941:         else",
          "942:             ret = SSL_CTX_set1_sigalgs_list(cctx, curr->liststr);",
          "944:         if (!ret) {",
          "945:             if (curr->valid)",
          "946:                 printf(\"Unexpected failure setting sigalgs in SSL_CTX (%d)\\n\",",
          "947:                        idx);",
          "948:             else",
          "949:                 testresult = 1;",
          "950:             goto end;",
          "951:         }",
          "952:         if (!curr->valid) {",
          "953:             printf(\"Unexpected success setting sigalgs in SSL_CTX (%d)\\n\", idx);",
          "954:             goto end;",
          "955:         }",
          "956:     }",
          "958:     if (!create_ssl_objects(sctx, cctx, &serverssl, &clientssl, NULL, NULL)) {",
          "959:         printf(\"Unable to create SSL objects\\n\");",
          "960:         goto end;",
          "961:     }",
          "963:     if (!testctx) {",
          "964:         int ret;",
          "966:         if (curr->list != NULL)",
          "967:             ret = SSL_set1_sigalgs(clientssl, curr->list, curr->listlen);",
          "968:         else",
          "969:             ret = SSL_set1_sigalgs_list(clientssl, curr->liststr);",
          "970:         if (!ret) {",
          "971:             if (curr->valid)",
          "972:                 printf(\"Unexpected failure setting sigalgs in SSL (%d)\\n\", idx);",
          "973:             else",
          "974:                 testresult = 1;",
          "975:             goto end;",
          "976:         }",
          "977:         if (!curr->valid) {",
          "978:             printf(\"Unexpected success setting sigalgs in SSL (%d)\\n\", idx);",
          "979:             goto end;",
          "980:         }",
          "981:     }",
          "983:     if (curr->connsuccess != create_ssl_connection(serverssl, clientssl)) {",
          "984:         printf(\"Unexpected return value creating SSL connection (%d)\\n\", idx);",
          "985:         goto end;",
          "986:     }",
          "988:     testresult = 1;",
          "990:  end:",
          "991:     SSL_free(serverssl);",
          "992:     SSL_free(clientssl);",
          "993:     SSL_CTX_free(sctx);",
          "994:     SSL_CTX_free(cctx);",
          "996:     return testresult;",
          "997: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "909:     ADD_TEST(test_ssl_bio_pop_ssl_bio);",
          "910:     ADD_TEST(test_ssl_bio_change_rbio);",
          "911:     ADD_TEST(test_ssl_bio_change_wbio);",
          "913:     testresult = run_tests(argv[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1033:     ADD_ALL_TESTS(test_set_sigalgs, OSSL_NELEM(testsigalgs) * 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c13ff3d222d38f66f5cde3d46d8c8dd6b2055d82",
      "candidate_info": {
        "commit_hash": "c13ff3d222d38f66f5cde3d46d8c8dd6b2055d82",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c13ff3d222d38f66f5cde3d46d8c8dd6b2055d82",
        "files": [
          "Configurations/descrip.mms.tmpl"
        ],
        "message": "Typo fix in Configurations/descrip.mms.tmpl\n\n... on the theme \"I could have sworn I saved that fix!\"\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3285)\n(cherry picked from commit cb2a6eb76ef7304a1b76ac5e2578cd9d5f59af28)",
        "before_after_code_files": [
          "Configurations/descrip.mms.tmpl||Configurations/descrip.mms.tmpl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/descrip.mms.tmpl||Configurations/descrip.mms.tmpl": [
          "File: Configurations/descrip.mms.tmpl -> Configurations/descrip.mms.tmpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   sub dependmagic {",
          "90:       my $target = shift;",
          "93:   }",
          "94:   #use Data::Dumper;",
          "95:   #print STDERR \"DEBUG: before:\\n\", Dumper($unified_info{before});",
          "",
          "[Removed Lines]",
          "92:       return \"$target : build_generated\\n\\t\\pipe $(MMS) depend && \\$(MMS) _$target\\n_$target\";",
          "",
          "[Added Lines]",
          "92:       return \"$target : build_generated\\n\\t\\pipe \\$(MMS) depend && \\$(MMS) _$target\\n_$target\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df13eb7ae70073de8c95ca3c7d2f587037582470",
      "candidate_info": {
        "commit_hash": "df13eb7ae70073de8c95ca3c7d2f587037582470",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/df13eb7ae70073de8c95ca3c7d2f587037582470",
        "files": [
          "crypto/engine/eng_lib.c"
        ],
        "message": "Don't try to clean up RAND from ENGINE\n\nThis is especially harmful since OPENSSL_cleanup() has already called\nthe RAND cleanup function\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3137)\n(cherry picked from commit 789a2b6250d5e05dfde6ce259e79ef8c172c9f3f)",
        "before_after_code_files": [
          "crypto/engine/eng_lib.c||crypto/engine/eng_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/engine/eng_lib.c||crypto/engine/eng_lib.c": [
          "File: crypto/engine/eng_lib.c -> crypto/engine/eng_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:                                         engine_cleanup_cb_free);",
          "162:         cleanup_stack = NULL;",
          "163:     }",
          "169:     CRYPTO_THREAD_lock_free(global_engine_lock);",
          "170: }",
          "",
          "[Removed Lines]",
          "168:     RAND_set_rand_method(NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1702df6ed6bb6fd494adfa74125b5948bfbc13a6",
      "candidate_info": {
        "commit_hash": "1702df6ed6bb6fd494adfa74125b5948bfbc13a6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1702df6ed6bb6fd494adfa74125b5948bfbc13a6",
        "files": [
          "test/ssl-tests/14-curves.conf",
          "test/ssl-tests/14-curves.conf.in"
        ],
        "message": "Add server temp key type checks\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2191)\n(cherry picked from commit 9c4319bd03f17fc87ae63b6231c87c678e5cabd1)",
        "before_after_code_files": [
          "test/ssl-tests/14-curves.conf||test/ssl-tests/14-curves.conf",
          "test/ssl-tests/14-curves.conf.in||test/ssl-tests/14-curves.conf.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/ssl-tests/14-curves.conf||test/ssl-tests/14-curves.conf": [
          "File: test/ssl-tests/14-curves.conf -> test/ssl-tests/14-curves.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: [test-0]",
          "56: ExpectedResult = Success",
          "59: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: ExpectedTmpKeyType = sect163k1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80: [test-1]",
          "81: ExpectedResult = Success",
          "84: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: ExpectedTmpKeyType = sect163r1",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105: [test-2]",
          "106: ExpectedResult = Success",
          "109: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: ExpectedTmpKeyType = sect163r2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130: [test-3]",
          "131: ExpectedResult = Success",
          "134: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135: ExpectedTmpKeyType = sect193r1",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155: [test-4]",
          "156: ExpectedResult = Success",
          "159: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: ExpectedTmpKeyType = sect193r2",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "180: [test-5]",
          "181: ExpectedResult = Success",
          "184: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187: ExpectedTmpKeyType = sect233k1",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "205: [test-6]",
          "206: ExpectedResult = Success",
          "209: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213: ExpectedTmpKeyType = sect233r1",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "230: [test-7]",
          "231: ExpectedResult = Success",
          "234: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239: ExpectedTmpKeyType = sect239k1",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "255: [test-8]",
          "256: ExpectedResult = Success",
          "259: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265: ExpectedTmpKeyType = sect283k1",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "280: [test-9]",
          "281: ExpectedResult = Success",
          "284: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291: ExpectedTmpKeyType = sect283r1",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "305: [test-10]",
          "306: ExpectedResult = Success",
          "309: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317: ExpectedTmpKeyType = sect409k1",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "330: [test-11]",
          "331: ExpectedResult = Success",
          "334: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343: ExpectedTmpKeyType = sect409r1",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "355: [test-12]",
          "356: ExpectedResult = Success",
          "359: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369: ExpectedTmpKeyType = sect571k1",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "380: [test-13]",
          "381: ExpectedResult = Success",
          "384: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395: ExpectedTmpKeyType = sect571r1",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "405: [test-14]",
          "406: ExpectedResult = Success",
          "409: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "421: ExpectedTmpKeyType = secp160k1",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "430: [test-15]",
          "431: ExpectedResult = Success",
          "434: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "447: ExpectedTmpKeyType = secp160r1",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "455: [test-16]",
          "456: ExpectedResult = Success",
          "459: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "473: ExpectedTmpKeyType = secp160r2",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "480: [test-17]",
          "481: ExpectedResult = Success",
          "484: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "499: ExpectedTmpKeyType = secp192k1",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "505: [test-18]",
          "506: ExpectedResult = Success",
          "509: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525: ExpectedTmpKeyType = prime192v1",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "530: [test-19]",
          "531: ExpectedResult = Success",
          "534: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551: ExpectedTmpKeyType = secp224k1",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "555: [test-20]",
          "556: ExpectedResult = Success",
          "559: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "577: ExpectedTmpKeyType = secp224r1",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "580: [test-21]",
          "581: ExpectedResult = Success",
          "584: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603: ExpectedTmpKeyType = secp256k1",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "605: [test-22]",
          "606: ExpectedResult = Success",
          "609: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629: ExpectedTmpKeyType = prime256v1",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "630: [test-23]",
          "631: ExpectedResult = Success",
          "634: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "655: ExpectedTmpKeyType = secp384r1",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "655: [test-24]",
          "656: ExpectedResult = Success",
          "659: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "681: ExpectedTmpKeyType = secp521r1",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "680: [test-25]",
          "681: ExpectedResult = Success",
          "684: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "707: ExpectedTmpKeyType = brainpoolP256r1",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "705: [test-26]",
          "706: ExpectedResult = Success",
          "709: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "733: ExpectedTmpKeyType = brainpoolP384r1",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "730: [test-27]",
          "731: ExpectedResult = Success",
          "734: # ===========================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759: ExpectedTmpKeyType = brainpoolP512r1",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "755: [test-28]",
          "756: ExpectedResult = Success",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "785: ExpectedTmpKeyType = X25519",
          "",
          "---------------"
        ],
        "test/ssl-tests/14-curves.conf.in||test/ssl-tests/14-curves.conf.in": [
          "File: test/ssl-tests/14-curves.conf.in -> test/ssl-tests/14-curves.conf.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   \"CipherString\" => \"ECDHE\",",
          "34:                 \"Curves\" => $curve",
          "35:             },",
          "37:         };",
          "38:     }",
          "39: }",
          "",
          "[Removed Lines]",
          "36:             test   => { \"ExpectedResult\" => \"Success\" },",
          "",
          "[Added Lines]",
          "36:             test   => {",
          "37:                 \"ExpectedTmpKeyType\" => $curve,",
          "38:                 \"ExpectedResult\" => \"Success\"",
          "39:             },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57e73ef3943638a6a3e937f86789f391e5593b83",
      "candidate_info": {
        "commit_hash": "57e73ef3943638a6a3e937f86789f391e5593b83",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/57e73ef3943638a6a3e937f86789f391e5593b83",
        "files": [
          "apps/enc.c"
        ],
        "message": "Make the output of enc -ciphers identical\n\neven if run several times in a session.\n\nThis amounts to moving the column counter so it isn't a function local\nstatic variable and reinitialising it each time.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2884)\n(cherry picked from commit 2b305ab02e0977ed71c255cc386ff75c397d7820)",
        "before_after_code_files": [
          "apps/enc.c||apps/enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/enc.c||apps/enc.c": [
          "File: apps/enc.c -> apps/enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: static int set_hex(char *in, unsigned char *out, int size);",
          "33: static void show_ciphers(const OBJ_NAME *name, void *bio_);",
          "35: typedef enum OPTION_choice {",
          "36:     OPT_ERR = -1, OPT_EOF = 0, OPT_HELP,",
          "37:     OPT_LIST,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: struct doall_enc_ciphers {",
          "36:     BIO *bio;",
          "37:     int n;",
          "38: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:     unsigned char key[EVP_MAX_KEY_LENGTH], iv[EVP_MAX_IV_LENGTH];",
          "101:     unsigned char *buff = NULL, salt[PKCS5_SALT_LEN];",
          "102:     long n;",
          "103: #ifdef ZLIB",
          "104:     int do_zlib = 0;",
          "105:     BIO *bzl = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:     struct doall_enc_ciphers dec;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:             goto end;",
          "136:         case OPT_LIST:",
          "137:             BIO_printf(bio_out, \"Supported ciphers:\\n\");",
          "138:             OBJ_NAME_do_all_sorted(OBJ_NAME_TYPE_CIPHER_METH,",
          "140:             BIO_printf(bio_out, \"\\n\");",
          "141:             ret = 0;",
          "142:             goto end;",
          "",
          "[Removed Lines]",
          "139:                                    show_ciphers, bio_out);",
          "",
          "[Added Lines]",
          "144:             dec.bio = bio_out;",
          "145:             dec.n = 0;",
          "147:                                    show_ciphers, &dec);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "559:     return (ret);",
          "560: }",
          "563: {",
          "566:     const EVP_CIPHER *cipher;",
          "568:     if (!islower((unsigned char)*name->name))",
          "",
          "[Removed Lines]",
          "562: static void show_ciphers(const OBJ_NAME *name, void *bio_)",
          "564:     BIO *bio = bio_;",
          "565:     static int n;",
          "",
          "[Added Lines]",
          "570: static void show_ciphers(const OBJ_NAME *name, void *arg)",
          "572:     struct doall_enc_ciphers *dec = (struct doall_enc_ciphers *)arg;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "575:             EVP_CIPHER_mode(cipher) == EVP_CIPH_XTS_MODE)",
          "576:         return;",
          "582:     } else",
          "584: }",
          "586: static int set_hex(char *in, unsigned char *out, int size)",
          "",
          "[Removed Lines]",
          "578:     BIO_printf(bio, \"-%-25s\", name->name);",
          "579:     if (++n == 3) {",
          "580:         BIO_printf(bio, \"\\n\");",
          "581:         n = 0;",
          "583:         BIO_printf(bio, \" \");",
          "",
          "[Added Lines]",
          "585:     BIO_printf(dec->bio, \"-%-25s\", name->name);",
          "586:     if (++dec->n == 3) {",
          "587:         BIO_printf(dec->bio, \"\\n\");",
          "588:         dec->n = 0;",
          "590:         BIO_printf(dec->bio, \" \");",
          "",
          "---------------"
        ]
      }
    }
  ]
}