{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a0f4a55dbf63ec013c8f97648251eb47357f7491",
      "candidate_info": {
        "commit_hash": "a0f4a55dbf63ec013c8f97648251eb47357f7491",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/a0f4a55dbf63ec013c8f97648251eb47357f7491",
        "files": [
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "Makefile.am",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "ServerDataChecker.cpp",
          "ServerDataChecker.h",
          "abstractstubserver.h",
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c",
          "sgxwallet_common.h",
          "spec.json",
          "stubclient.h",
          "testw.cpp"
        ],
        "message": "SKALE-1795 Add more exceptions to SGX server",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "Makefile.am||Makefile.am",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "ServerDataChecker.cpp||ServerDataChecker.cpp",
          "ServerDataChecker.h||ServerDataChecker.h",
          "abstractstubserver.h||abstractstubserver.h",
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "sgxwallet_common.h||sgxwallet_common.h",
          "stubclient.h||stubclient.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:   uint32_t len;",
          "91:   status = get_public_shares(eid, &err_status, errMsg1, encr_dkg_poly, len, public_shares, t, n);",
          "92:   std::cerr << \"err msg \" << errMsg1 << std::endl;",
          "94:   std::cerr << \"public_shares:\" << std::endl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:   if ( status != 0){",
          "94:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:     result += cur_share;",
          "149:     std::cerr << \"hexEncrKey: \" << hexEncrKey << std::endl;",
          "152:     std::cerr << errMsg1 << std::endl << std::endl;",
          "",
          "[Removed Lines]",
          "143:     uint32_t enc_len = BUF_LEN;",
          "144:     carray2Hex(encrypted_skey, enc_len, hexEncrKey);",
          "147:     std::string name = \"DKG_DH_KEY_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "148:     std::cerr << \"name to write to db is \" << name << std::endl;",
          "",
          "[Added Lines]",
          "147:     std::cerr << \"dec len is \" << dec_len << std::endl;",
          "148:     carray2Hex(encrypted_skey, dec_len, hexEncrKey);",
          "151:     std::string DHKey_name = \"DKG_DH_KEY_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "152:     std::cerr << \"name to write to db is \" << DHKey_name << std::endl;",
          "154:     writeDataToDB(DHKey_name, hexEncrKey);",
          "156:     std::string shareG2_name = \"shareG2_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "157:     std::cerr << \"name to write to db is \" << shareG2_name << std::endl;",
          "158:     std::cerr << \"s_shareG2: \" << s_shareG2 << std::endl;",
          "159:     writeDataToDB(shareG2_name, s_shareG2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "246:     return pub_key_vect;",
          "247: }",
          "251:   char* errMsg1 = (char*) calloc(1024,1);",
          "252:   int err_status = 0;",
          "261:   std::string DH_key_name = polyName + \"_\" + std::to_string(ind) + \":\";",
          "262:   std::shared_ptr<std::string> hexEncrKey_ptr = readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "263:   std::cerr << \"encr DH key is \" << hexEncrKey_ptr << std::endl;",
          "",
          "[Removed Lines]",
          "249: std::pair<std::string, std::string> response_to_complaint(const std::string& polyName, const char* encryptedPolyHex, int n, int t, int ind){",
          "254:   uint64_t enc_len = 0;",
          "256:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "257:   hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100);",
          "",
          "[Added Lines]",
          "258: std::string decrypt_DHKey(const std::string& polyName, int ind){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268:   uint8_t encrypted_DHkey[BUF_LEN];",
          "269:   hex2carray(hexEncrKey_ptr->c_str(), &DH_enc_len, encrypted_DHkey);",
          "290:   free(errMsg1);",
          "291:   free(hexEncrKey);",
          "294: }",
          "",
          "[Removed Lines]",
          "272:   uint32_t dec_len;",
          "273:   char decrpyted_DHkey[ECDSA_SKEY_LEN];",
          "274:   char s_shareG2[320];//[257];",
          "276:   status = complaint_response(eid, &err_status, errMsg1, encrypted_DHkey, encr_dkg_poly, &dec_len,",
          "277:                       decrpyted_DHkey, s_shareG2, t, n, ind);",
          "279:   std::pair<std::string, std::string> result;",
          "280:   result.first = decrpyted_DHkey;",
          "281:   result.second = s_shareG2;",
          "283:   std::cerr << errMsg1 << std::endl << std::endl;",
          "289:   free(encr_dkg_poly);",
          "293:   return result;",
          "",
          "[Added Lines]",
          "273:   char DHKey[ECDSA_SKEY_LEN];",
          "275:   decrypt_key(eid, &err_status, errMsg1, encrypted_DHkey, DH_enc_len, DHKey);",
          "281:   return DHKey;",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: bool VerifyShares(const char* publicShares, const char* encr_sshare, const char * encryptedKeyHex,  int t, int n, int ind);",
          "23: bool CreateBLSShare( const std::string& BLSKeyName, const char * s_shares, const char * encryptedKeyHex);",
          "",
          "[Removed Lines]",
          "21: std::pair<std::string, std::string> response_to_complaint(const std::string& polyName, const char* encryptedPolyHex, int n, int t, int ind);",
          "",
          "[Added Lines]",
          "21: std::string decrypt_DHKey(const std::string& polyName, int ind);",
          "",
          "---------------"
        ],
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: COMMON_ENCLAVE_SRC = secure_enclave_u.c secure_enclave_u.h",
          "68: sgxwallet_SOURCES = sgxwallet.c SGXWalletServer.cpp RPCException.cpp  BLSCrypto.cpp ECDSACrypto.cpp \\",
          "72: nodist_sgxwallet_SOURCES = $(COMMON_ENCLAVE_SRC)",
          "",
          "[Removed Lines]",
          "69: DKGCrypto.cpp ServerInit.cpp BLSPrivateKeyShareSGX.cpp LevelDB.cpp $(COMMON_SRC)",
          "",
          "[Added Lines]",
          "69: DKGCrypto.cpp ServerInit.cpp BLSPrivateKeyShareSGX.cpp LevelDB.cpp ServerDataChecker.cpp $(COMMON_SRC)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100: testw_SOURCES=testw.cpp stubclient.cpp SGXWalletServer.cpp  RPCException.cpp BLSCrypto.cpp ServerInit.cpp LevelDB.cpp \\",
          "102: nodist_testw_SOURCES=${nodist_sgxwallet_SOURCES}",
          "103: EXTRA_testw_DEPENDENCIES=${EXTRA_sgxwallet_DEPENDENCIES}",
          "104: testw_LDADD= ${sgxwallet_LDADD}",
          "",
          "[Removed Lines]",
          "101:  DKGCrypto.cpp BLSPrivateKeyShareSGX.cpp ECDSACrypto.cpp $(COMMON_SRC)",
          "",
          "[Added Lines]",
          "101:  DKGCrypto.cpp BLSPrivateKeyShareSGX.cpp ECDSACrypto.cpp ServerDataChecker.cpp $(COMMON_SRC)",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"SGXWalletServer.h\"",
          "30: #include \"SGXWalletServer.hpp\"",
          "32: #include <algorithm>",
          "34: bool isStringDec( std::string & str){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"ServerDataChecker.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: int init_server() {",
          "55:   s = new SGXWalletServer(*hs,",
          "56:                       JSONRPC_SERVER_V2); // hybrid server (json-rpc 1.0 & 2.0)",
          "",
          "[Removed Lines]",
          "54:   hs = new HttpServer(1025);",
          "",
          "[Added Lines]",
          "52:   hs = new HttpServer(1026);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:     }",
          "249:     std::cerr << \"Hash handled \" << cutHash << std::endl;",
          "250:     try {",
          "251:        std::shared_ptr<std::string> key_ptr = readFromDb(_keyName,\"\");",
          "253:        sign_vect = ecdsa_sign_hash(key_ptr->c_str(),cutHash.c_str(), base);",
          "254:     } catch (RPCException &_e) {",
          "255:         std::cerr << \"err str \" << _e.errString << std::endl;",
          "256:         result[\"status\"] = _e.status;",
          "257:         result[\"errorMessage\"] = _e.errString;",
          "258:     }",
          "264:     return result;",
          "265: }",
          "",
          "[Removed Lines]",
          "259:     std::cerr << \"got signature_s \" << sign_vect.at(2) << std::endl;",
          "260:     result[\"signature_v\"] = sign_vect.at(0);",
          "261:     result[\"signature_r\"] = sign_vect.at(1);",
          "262:     result[\"signature_s\"] = sign_vect.at(2);",
          "",
          "[Added Lines]",
          "249:       if ( !checkECDSAKeyName(_keyName)){",
          "250:         throw RPCException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "251:       }",
          "252:       if ( !checkHex(cutHash)){",
          "253:         throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "254:       }",
          "255:       if ( base <= 0 || base > 32){",
          "256:         throw RPCException(-22, \"Invalid base\");",
          "257:       }",
          "264:       std::cerr << \"got signature_s \" << sign_vect.at(2) << std::endl;",
          "265:       result[\"signature_v\"] = sign_vect.at(0);",
          "266:       result[\"signature_r\"] = sign_vect.at(1);",
          "267:       result[\"signature_s\"] = sign_vect.at(2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "276:     std::string Pkey;",
          "278:     try {",
          "280:          Pkey = get_ecdsa_pubkey( key_ptr->c_str());",
          "281:     } catch (RPCException &_e) {",
          "282:         result[\"status\"] = _e.status;",
          "283:         result[\"errorMessage\"] = _e.errString;",
          "284:     }",
          "",
          "[Removed Lines]",
          "279:          std::shared_ptr<std::string> key_ptr = readFromDb(keyName,\"\");",
          "285:     std::cerr << \"PublicKey\" << Pkey << std::endl;",
          "286:     result[\"PublicKey\"] = Pkey;",
          "",
          "[Added Lines]",
          "291:          if ( !checkECDSAKeyName(keyName)){",
          "292:            throw RPCException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "293:          }",
          "294:          std::shared_ptr<std::string> key_ptr = readFromDb(keyName);",
          "296:          std::cerr << \"PublicKey\" << Pkey << std::endl;",
          "297:          result[\"PublicKey\"] = Pkey;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "300:     std::string encrPolyHex;",
          "302:     try {",
          "303:       encrPolyHex = gen_dkg_poly(t);",
          "305:     } catch (RPCException &_e) {",
          "306:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "307:         result[\"status\"] = _e.status;",
          "308:         result[\"errorMessage\"] = _e.errString;",
          "309:     }",
          "313:     return result;",
          "314: }",
          "",
          "[Removed Lines]",
          "304:       writeDKGPoly(polyName, encrPolyHex);",
          "",
          "[Added Lines]",
          "319:       if ( !checkPolyName(polyName)){",
          "320:         throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "321:       }",
          "322:       if ( t <= 0){",
          "323:         throw RPCException(INVALID_DKG_PARAMS, \"Invalid parameters: n or t \");",
          "324:       }",
          "326:       writeDataToDB(polyName, encrPolyHex);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "322:   std::vector <std::vector<std::string>> verifVector;",
          "323:   try {",
          "326:     verifVector = get_verif_vect(encr_poly_ptr->c_str(), n, t);",
          "328:   } catch (RPCException &_e) {",
          "329:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "330:     result[\"status\"] = _e.status;",
          "",
          "[Removed Lines]",
          "324:     std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName, \"DKGPoly:\");",
          "327:     std::cerr << \"verif vect size \" << verifVector.size() << std::endl;",
          "",
          "[Added Lines]",
          "348:     if ( !checkPolyName(polyName)){",
          "349:       throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "350:     }",
          "351:     if( !check_n_t(n, t)){",
          "352:       throw RPCException(INVALID_DKG_PARAMS, \"Invalid parameters: n or t \");",
          "353:     }",
          "355:     std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName);",
          "360:     for ( int i = 0; i < t; i++){",
          "361:       std::vector<std::string> cur_coef = verifVector.at(i);",
          "362:       for ( int j = 0; j < 4; j++ ){",
          "363:         result[\"Verification Vector\"][i][j] = cur_coef.at(j);",
          "364:       }",
          "365:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "332:     result[\"Verification Vector\"] = \"\";",
          "333:   }",
          "343:   return result;",
          "344: }",
          "",
          "[Removed Lines]",
          "335:   for ( int i = 0; i < t; i++){",
          "336:     std::vector<std::string> cur_coef = verifVector.at(i);",
          "337:     for ( int j = 0; j < 4; j++ ){",
          "338:       result[\"Verification Vector\"][i][j] = cur_coef.at(j);",
          "339:     }",
          "341:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "354:             result[\"errorMessage\"] = \"wrong number of public keys\";",
          "355:             return result;",
          "356:         }",
          "360:         std::vector<std::string> pubKeys_vect;",
          "361:         for ( int i = 0; i < n ; i++) {",
          "362:             pubKeys_vect.push_back(publicKeys[i].asString());",
          "363:         }",
          "",
          "[Removed Lines]",
          "358:         std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName, \"DKGPoly:\");",
          "",
          "[Added Lines]",
          "388:         if ( !checkPolyName(polyName)){",
          "389:           throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "390:         }",
          "391:         if( !check_n_t(n, t)){",
          "392:           throw RPCException(INVALID_DKG_PARAMS, \"Invalid DKG parameters: n or t \");",
          "393:         }",
          "395:         std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName);",
          "399:             if ( !checkHex(publicKeys[i].asString(), 64)){",
          "400:               throw RPCException(INVALID_HEX, \"Invalid public key\");",
          "401:             }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "387:   result[\"result\"] = true;",
          "389:   try {",
          "392:     std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(EthKeyName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "431:     if ( !checkECDSAKeyName(EthKeyName)){",
          "432:       throw RPCException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "433:     }",
          "434:     if( !check_n_t(n, t) || ind > n || ind < 0){",
          "435:       throw RPCException(INVALID_DKG_PARAMS, \"Invalid DKG parameters: n or t \");",
          "436:     }",
          "437:     if ( !checkHex(SecretShare, SECRET_SHARE_NUM_BYTES)){",
          "438:       throw RPCException(INVALID_HEX, \"Invalid Secret share\");",
          "439:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "421:       result[\"errorMessage\"] = \"wrong length of secret shares\";",
          "422:       return result;",
          "423:     }",
          "424:     std::vector<std::string> sshares_vect;",
          "425:     std::cerr << \"sshares are \" << SecretShare << std::endl;",
          "426:     char sshares[192 * n + 1];",
          "427:     for ( int i = 0; i < n ; i++){",
          "428:       std::string cur_share = SecretShare.substr(192*i, 192*i + 192);",
          "430:       sshares_vect.push_back(cur_share);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "475:     if ( !checkECDSAKeyName(EthKeyName)){",
          "476:       throw RPCException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "477:     }",
          "478:     if ( !checkName(polyName, \"POLY\")){",
          "479:       throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "480:     }",
          "481:     if ( !checkName(BLSKeyName, \"BLS_KEY\")){",
          "482:       throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "483:     }",
          "489:       if ( !checkHex(SecretShare, SECRET_SHARE_NUM_BYTES)){",
          "490:         throw RPCException(INVALID_HEX, \"Invalid Secret share\");",
          "491:       }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "444:      }",
          "445:      else {",
          "447:      }",
          "449:      for ( int i = 0; i < n; i++){",
          "",
          "[Removed Lines]",
          "446:          std::cerr << \"error \" << std::endl;",
          "",
          "[Added Lines]",
          "509:        throw RPCException(-122, \"Error while creating BLS key share\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "468:     result[\"errorMessage\"] = \"\";",
          "470:     try {",
          "472:       std::cerr << \"encr_bls_key_share is \" << *encryptedKeyHex_ptr << std::endl;",
          "473:       std::cerr << \"length is \" << encryptedKeyHex_ptr->length()<< std::endl;",
          "474:       std::vector<std::string> public_key_vect = GetBLSPubKey(encryptedKeyHex_ptr->c_str());",
          "",
          "[Removed Lines]",
          "471:       std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(BLSKeyName, \"\");",
          "",
          "[Added Lines]",
          "534:       if ( !checkName(BLSKeyName, \"BLS_KEY\")){",
          "535:         throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "536:       }",
          "537:       std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(BLSKeyName);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "485:     return result;",
          "486: }",
          "489:   Json::Value result;",
          "490:   result[\"status\"] = 0;",
          "491:   result[\"errorMessage\"] = \"\";",
          "492:   try {",
          "500:   } catch (RPCException &_e) {",
          "501:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Removed Lines]",
          "488: Json::Value ComplaintResponseImpl(const std::string& polyName, int n, int t, int ind){",
          "493:     std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName, \"DKGPoly:\");",
          "494:     std::cerr << \"encr_poly is \" << *encr_poly_ptr << std::endl;",
          "495:     std::pair<std::string, std::string> response = response_to_complaint(polyName, encr_poly_ptr->c_str(), n, t, ind);",
          "497:     result[\"share*G2\"] = response.second;",
          "498:     result[\"DHKey\"] = response.first;",
          "",
          "[Added Lines]",
          "554: Json::Value ComplaintResponseImpl(const std::string& polyName, int ind){",
          "559:     if ( !checkName(polyName, \"POLY\")){",
          "560:       throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "561:     }",
          "562:     std::string shareG2_name = \"shareG2_\" + polyName + \"_\" + std::to_string(ind) + \":\";",
          "563:     std::shared_ptr<std::string> shareG2_ptr = readFromDb(shareG2_name);",
          "565:     std::string DHKey = decrypt_DHKey(polyName, ind);",
          "567:     result[\"share*G2\"] = *shareG2_ptr;",
          "568:     result[\"DHKey\"] = DHKey;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "583:   return importECDSAKeyImpl(key, keyName);",
          "584: }",
          "587:   lock_guard<recursive_mutex> lock(m);",
          "589: }",
          "",
          "[Removed Lines]",
          "586: Json::Value SGXWalletServer::ComplaintResponse(const std::string& polyName, int n, int t, int ind){",
          "588:   return ComplaintResponseImpl(polyName, n, t, ind);",
          "",
          "[Added Lines]",
          "656: Json::Value SGXWalletServer::ComplaintResponse(const std::string& polyName, int ind){",
          "658:   return ComplaintResponseImpl(polyName, ind);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "633:     levelDb->writeString(key, value);",
          "634: }",
          "678: void writeDataToDB(const string & Name, const string &value) {",
          "679:   Json::Value val;",
          "680:   Json::FastWriter writer;",
          "",
          "[Removed Lines]",
          "636: shared_ptr <std::string> readECDSAKey(const string &_keyName) {",
          "637:   auto keyStr = levelDb->readString(\"ECDSAKEY:\" + _keyName);",
          "639:   if (keyStr == nullptr) {",
          "640:     throw RPCException(KEY_SHARE_DOES_NOT_EXIST, \"Key with this name does not exists\");",
          "641:   }",
          "643:   return keyStr;",
          "644: }",
          "646: void writeECDSAKey(const string &_keyName, const string &value) {",
          "647:     Json::Value val;",
          "648:     Json::FastWriter writer;",
          "650:     val[\"value\"] = value;",
          "651:     std::string json = writer.write(val);",
          "653:     auto key = \"ECDSAKEY:\" + _keyName;",
          "655:     if (levelDb->readString(_keyName) != nullptr) {",
          "656:         throw RPCException(KEY_SHARE_ALREADY_EXISTS, \"Key with this name already exists\");",
          "657:     }",
          "659:     levelDb->writeString(key, value);",
          "660: }",
          "662: void writeDKGPoly(const string &_polyName, const string &value) {",
          "663:   Json::Value val;",
          "664:   Json::FastWriter writer;",
          "666:   val[\"value\"] = value;",
          "667:   std::string json = writer.write(val);",
          "669:   auto key = \"DKGPoly:\" + _polyName;",
          "671:   if (levelDb->readString(_polyName) != nullptr) {",
          "672:     throw RPCException(KEY_SHARE_ALREADY_EXISTS, \"Poly with this name already exists\");",
          "673:   }",
          "675:   levelDb->writeString(key, value);",
          "676: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     virtual Json::Value DKGVerification(const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index);",
          "36:     virtual Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "37:     virtual Json::Value GetBLSPublicKeyShare(const std::string & BLSKeyName);",
          "40: };",
          "",
          "[Removed Lines]",
          "38:     virtual Json::Value ComplaintResponse(const std::string& polyName, int n, int t, int ind);",
          "",
          "[Added Lines]",
          "38:     virtual Json::Value ComplaintResponse(const std::string& polyName, int ind);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: void writeKeyShare(const string &_keyShareName, const string &value, int index, int n, int t);",
          "46: shared_ptr<std::string> readKeyShare(const string& _keyShare);",
          "54: Json::Value importBLSKeyShareImpl(int index, const std::string& keyShare, const std::string& keyShareName, int n, int t);",
          "55: Json::Value blsSignMessageHashImpl(const std::string& keyShareName, const std::string& messageHash, int n, int t, int signerIndex);",
          "",
          "[Removed Lines]",
          "48: void writeECDSAKey(const string& _keyName, const string& value);",
          "49: shared_ptr<std::string> readECDSAKey(const string& _key);",
          "51: void writeDKGPoly(const string &_polyName, const string &value);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66: Json::Value DKGVerificationImpl(const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index);",
          "67: Json::Value CreateBLSPrivateKeyImpl(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "68: Json::Value GetBLSPublicKeyShareImpl(const std::string & BLSKeyName);",
          "71: #endif //SGXWALLET_SGXWALLETSERVER_HPP",
          "",
          "[Removed Lines]",
          "69: Json::Value ComplaintResponseImpl(const std::string& polyName, int n, int t, int ind);",
          "",
          "[Added Lines]",
          "63: Json::Value ComplaintResponseImpl(const std::string& polyName, int ind);",
          "",
          "---------------"
        ],
        "ServerDataChecker.cpp||ServerDataChecker.cpp": [
          "File: ServerDataChecker.cpp -> ServerDataChecker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     std::vector<std::string> tokens;",
          "7:     size_t prev = 0, pos = 0;",
          "8:     do {",
          "",
          "[Removed Lines]",
          "5: std::vector<std::string> BLSutils::SplitString(std::string& str, const std::string& delim){",
          "",
          "[Added Lines]",
          "5: #include <vector>",
          "6: #include \"ServerDataChecker.h\"",
          "7: #include <gmp.h>",
          "9: std::vector<std::string> SplitString(const std::string& str, const std::string& delim = \":\"){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:     return tokens;",
          "17: }",
          "21: }",
          "",
          "[Removed Lines]",
          "19: bool checkPolyName (std::string polyName){",
          "",
          "[Added Lines]",
          "23: bool checkECDSAKeyName(const std::string& keyName) {",
          "24:   std::vector<std::string> parts = SplitString(keyName);",
          "25:   if (parts.size() != 2) {",
          "26:     return false;",
          "27:   }",
          "28:   if (parts.at(0) != \"NEK\") {",
          "29:     return false;",
          "30:   }",
          "31:   if ( parts.at(1).length() > 64 || parts.at(1).length() < 1){",
          "32:     return false;",
          "33:   }",
          "35:   mpz_t num;",
          "36:   mpz_init(num);",
          "37:   if ( mpz_set_str(num, parts.at(1).c_str(), 16) == -1){",
          "38:     mpz_clear(num);",
          "39:     return false;",
          "40:   }",
          "41:   mpz_clear(num);",
          "43:   return true;",
          "44: }",
          "46: bool checkHex(const std::string& hex, const uint32_t sizeInBytes){",
          "47:   if ( hex.length() > sizeInBytes * 2 || hex.length() == 0){",
          "48:     return false;",
          "49:   }",
          "51:   mpz_t num;",
          "52:   mpz_init(num);",
          "54:   if ( mpz_set_str(num, hex.c_str(), 16) == -1){",
          "55:     mpz_clear(num);",
          "56:     return false;",
          "57:   }",
          "58:   mpz_clear(num);",
          "60:   return true;",
          "61: }",
          "63: bool checkPolyName (const std::string& polyName){",
          "64:   std::vector<std::string> parts = SplitString(polyName);",
          "65:   if ( parts.size() != 7) {",
          "66:     return false;",
          "67:   }",
          "68:   if ( parts.at(0) != \"POLY\") {",
          "69:     return false;",
          "70:   }",
          "71:   if ( parts.at(1) != \"SCHAIN_ID\"){",
          "72:     return false;",
          "73:   }",
          "74:   if ( parts.at(3) != \"NODE_ID\"){",
          "75:     return false;",
          "76:   }",
          "77:   if ( parts.at(5) != \"DKG_ID\"){",
          "78:     return false;",
          "79:   }",
          "81:   if ( parts.at(2).length() > 64 || parts.at(2).length() < 1){",
          "82:     return false;",
          "83:   }",
          "84:   if (parts.at(4).length() > 5 || parts.at(4).length() < 1){",
          "85:     return false;",
          "86:   }",
          "87:   if ( parts.at(6).length() > 64 || parts.at(6).length() < 1){",
          "88:     return false;",
          "89:   }",
          "91:   mpz_t num;",
          "92:   mpz_init(num);",
          "94:   if ( mpz_set_str(num, parts.at(2).c_str(), 16) == -1){",
          "95:     mpz_clear(num);",
          "96:     return false;",
          "97:   }",
          "98:   mpz_clear(num);",
          "99:   mpz_init(num);",
          "101:   if ( mpz_set_str(num, parts.at(4).c_str(), 10) == -1){",
          "102:     mpz_clear(num);",
          "103:     return false;",
          "104:   }",
          "105:   mpz_clear(num);",
          "106:   mpz_init(num);",
          "108:   if ( mpz_set_str(num, parts.at(6).c_str(),16) == -1){",
          "109:     mpz_clear(num);",
          "110:     return false;",
          "111:   }",
          "112:   mpz_clear(num);",
          "114:   return true;",
          "115: }",
          "117: bool checkName (const std::string& Name, const std::string& prefix){",
          "118:     std::vector<std::string> parts = SplitString(Name);",
          "119:     if ( parts.size() != 7) {",
          "120:         return false;",
          "121:     }",
          "122:     if ( parts.at(0) != prefix ) {",
          "123:         return false;",
          "124:     }",
          "125:     if ( parts.at(1) != \"SCHAIN_ID\"){",
          "126:         return false;",
          "127:     }",
          "128:     if ( parts.at(3) != \"NODE_ID\"){",
          "129:         return false;",
          "130:     }",
          "131:     if ( parts.at(5) != \"DKG_ID\"){",
          "132:         return false;",
          "133:     }",
          "135:     if ( parts.at(2).length() > 64 || parts.at(2).length() < 1){",
          "136:         return false;",
          "137:     }",
          "138:     if (parts.at(4).length() > 5 || parts.at(4).length() < 1){",
          "139:         return false;",
          "140:     }",
          "141:     if ( parts.at(6).length() > 64 || parts.at(6).length() < 1){",
          "142:         return false;",
          "143:     }",
          "145:     mpz_t num;",
          "146:     mpz_init(num);",
          "148:     if ( mpz_set_str(num, parts.at(2).c_str(), 16) == -1){",
          "149:         mpz_clear(num);",
          "150:         return false;",
          "151:     }",
          "152:     mpz_clear(num);",
          "153:     mpz_init(num);",
          "155:     if ( mpz_set_str(num, parts.at(4).c_str(), 10) == -1){",
          "156:         mpz_clear(num);",
          "157:         return false;",
          "158:     }",
          "159:     mpz_clear(num);",
          "160:     mpz_init(num);",
          "162:     if ( mpz_set_str(num, parts.at(6).c_str(),16) == -1){",
          "163:         mpz_clear(num);",
          "164:         return false;",
          "165:     }",
          "166:     mpz_clear(num);",
          "168:     return true;",
          "169: }",
          "171: bool check_n_t ( const int n, const int t){",
          "172:   if (t > n){",
          "173:     return false;",
          "174:   }",
          "176:   if ( t == 0 || n == 0){",
          "177:     return false;",
          "178:   }",
          "180:   if ( t < 0 || n < 0){",
          "181:     return false;",
          "182:   }",
          "184:   return true;",
          "",
          "---------------"
        ],
        "ServerDataChecker.h||ServerDataChecker.h": [
          "File: ServerDataChecker.h -> ServerDataChecker.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #ifndef SGXD_SERVERDATACHECKER_H",
          "6: #define SGXD_SERVERDATACHECKER_H",
          "8: #endif // SGXD_SERVERDATACHECKER_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include <string>",
          "10: bool checkECDSAKeyName(const std::string& keyName);",
          "12: bool checkHex(const std::string& hash, const uint32_t sizeInBytes = 32);",
          "14: bool checkPolyName (const std::string& polyName);",
          "16: bool checkName (const std::string& Name, const std::string& prefix);",
          "18: bool check_n_t ( const int n, const int t);",
          "",
          "---------------"
        ],
        "abstractstubserver.h||abstractstubserver.h": [
          "File: abstractstubserver.h -> abstractstubserver.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:           this->bindAndAddMethod(jsonrpc::Procedure(\"DKGVerification\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"publicShares\",jsonrpc::JSON_STRING, \"EthKeyName\",jsonrpc::JSON_STRING, \"SecretShare\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, \"n\",jsonrpc::JSON_INTEGER, \"index\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::DKGVerificationI);",
          "28:           this->bindAndAddMethod(jsonrpc::Procedure(\"CreateBLSPrivateKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"BLSKeyName\",jsonrpc::JSON_STRING, \"EthKeyName\",jsonrpc::JSON_STRING, \"polyName\", jsonrpc::JSON_STRING, \"SecretShare\",jsonrpc::JSON_STRING,\"t\", jsonrpc::JSON_INTEGER,\"n\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::CreateBLSPrivateKeyI);",
          "29:           this->bindAndAddMethod(jsonrpc::Procedure(\"GetBLSPublicKeyShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"BLSKeyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::GetBLSPublicKeyShareI);",
          "32:         }",
          "",
          "[Removed Lines]",
          "30:           this->bindAndAddMethod(jsonrpc::Procedure(\"ComplaintResponse\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING, \"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, \"ind\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::ComplaintResponseI);",
          "",
          "[Added Lines]",
          "30:           this->bindAndAddMethod(jsonrpc::Procedure(\"ComplaintResponse\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"ind\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::ComplaintResponseI);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:         }",
          "87:         inline virtual void ComplaintResponseI(const Json::Value &request, Json::Value &response)",
          "88:         {",
          "90:         }",
          "92:         virtual Json::Value importBLSKeyShare(int index, const std::string& keyShare, const std::string& keyShareName, int n, int t) = 0;",
          "",
          "[Removed Lines]",
          "89:           response = this->ComplaintResponse( request[\"polyName\"].asString(), request[\"n\"].asInt(), request[\"t\"].asInt(),request[\"ind\"].asInt());",
          "",
          "[Added Lines]",
          "89:           response = this->ComplaintResponse( request[\"polyName\"].asString(), request[\"ind\"].asInt());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:         virtual Json::Value DKGVerification( const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index) = 0;",
          "104:         virtual Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n) = 0;",
          "105:         virtual Json::Value GetBLSPublicKeyShare(const std::string & BLSKeyName) = 0;",
          "107: };",
          "109: #endif //JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_",
          "",
          "[Removed Lines]",
          "106:         virtual Json::Value ComplaintResponse(const std::string& polyName, int n, int t, int ind) = 0;",
          "",
          "[Added Lines]",
          "106:         virtual Json::Value ComplaintResponse(const std::string& polyName, int ind) = 0;",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:        result += \":\";",
          "101:     }",
          "102:     strncpy(secret, result.c_str(), result.length() + 1);",
          "103: }",
          "105: libff::alt_bn128_Fr PolynomialValue(const std::vector<libff::alt_bn128_Fr>& pol, libff::alt_bn128_Fr point, unsigned _t) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     if (strlen(secret) == 0){",
          "105:         throw std::exception();",
          "106:     }",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define  DKG_BUFER_LENGTH 2490//3060",
          "30: #define  DKG_MAX_SEALED_LEN 3050",
          "32: #define ECDSA_SKEY_LEN 65",
          "33: #define ECDSA_SKEY_BASE 16",
          "34: #define ECDSA_ENCR_LEN 625",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #define SECRET_SHARE_NUM_BYTES 96",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: #define COULD_NOT_ACCESS_DATABASE -9",
          "47: #define NULL_DATABASE -10",
          "51: #define ENCLAVE_NAME \"secure_enclave.signed.so\"",
          "",
          "[Removed Lines]",
          "49: #define WALLETDB_NAME  \"sgxwallet.db\" //\"test_sgxwallet.db\"//",
          "",
          "[Added Lines]",
          "51: #define INVALID_POLY_NAME -11",
          "52: #define INVALID_DKG_PARAMS -12",
          "54: #define INVALID_ECDSA_KEY_NAME -20",
          "55: #define INVALID_HEX -21",
          "57: #define SGX_ERROR -666;",
          "59: #define WALLETDB_NAME  \"test_sgxwallet.db\"//\"sgxwallet.db\" //",
          "",
          "---------------"
        ],
        "stubclient.h||stubclient.h": [
          "File: stubclient.h -> stubclient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:             throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "174:     }",
          "177:     {",
          "178:       Json::Value p;",
          "179:       p[\"polyName\"] = polyName;",
          "182:       p[\"ind\"] = ind;",
          "183:       Json::Value result = this->CallMethod(\"ComplaintResponse\",p);",
          "184:       if (result.isObject())",
          "",
          "[Removed Lines]",
          "176:     Json::Value ComplaintResponse(const std::string& polyName, int n, int t, int ind) throw (jsonrpc::JsonRpcException)",
          "180:       p[\"n\"] = n;",
          "181:       p[\"t\"] = t;",
          "",
          "[Added Lines]",
          "176:     Json::Value ComplaintResponse(const std::string& polyName, int ind) throw (jsonrpc::JsonRpcException)",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "711: TEST_CASE( \"pub_bls_key\", \"[pub_bls]\" ) {",
          "712:   init_daemon();",
          "713:   init_enclave();",
          "",
          "[Removed Lines]",
          "704: TEST_CASE( \"dkg_complaint test1\", \"[dkgc]\" ) {",
          "705:   init_daemon();",
          "706:   init_enclave();",
          "707:   char* encr_poly = \"04000200000000000406ffffff02000000000000000000000b000000000000ff0000000000000000877a3884976af70f3de0ed7ad82b16cad2b5e69bf9976f3012a421ee7025c4b5000000fba090000000000000000000000000000ba090000000000000000000000000000426594165b64a693699c19f0efcbe2b1e7bde98de433a929f8fcdbc093e5f490d3f17674667de6160945584897077c401f3fa0bc05b26dc6ffea9a3d38bbcedaccb45bc39858050e97a5ae98f02ecd17ac32784d2cda930481805c1b9db38443ccef23a3c0bcc3f010a562bfc7b9d9db73fa412273ff884fdb8c0b9e72dfb114707f930bee9d44241fcfb7fd455d68b5cdf2b687afcf9fa8b568a7b17ea60258d821fbdeafdc8524db14165530836216eaccd3d7f9e03762db61d0c506f4fbb4f6d21336c8fd1e59cf6c57d91046cd0a4b0e044daab39371bb9dcbf11aa652246b6a93ff536629c8b54fa7e8074795190edc702ca162386f1c26c3601c2ea27a677194a2c183396ecad15c0d5da95a8137c4e7967c2b3f829a6d80d4fa13a53058e7aa3b807ca665770ba6495e38526f92479aac823e8224ca633982722424dc2498929bd076daea93a73d4ad60e4924496bcca55a95977139801cb7407caf4bba76ac972ea91cbee2661d18d404cd652b0df6ef09736f473d4cead9a218809e0a726bfcf2823006375d25b07c514eab9249a4d17da0f2a3f05886dc3698bba6de7b2e32beb96386a69385274dac607e2e7f7e68fa7673b83c99798298e44d64c118c42ce8a0102cb45cb892283c5d201c19ae12a38890e18ef610f87fd63c3571b8e9ba782ebd62282e14cc4bf5cb9eb4280a5cb63b4b31a88720c043fd1e0c3b916016cc46c480bab1e7fdf5a2960df8babdbe19083e17bd65c58482affb3dd549f5674eb761be49b80c16ded7f41bc1993d5af5d27a55b9be24fa20d288087978c70119bed4c441f0e109baf95d80df7623ff6ad31f28e906413d12ebeb4669f96c34931511b37b6a5be5935c905c893ed9b0518275bd5cf241c73f6d06169f30a74e65e6f240f8e2ed696a9964851fb18b827bbc15ea20738891a7a69312d85e47b42bd24dca3285876ad41a1750d53e5f919a453a91ddb11943292ced0130828dfa08c9d3cea0a50a2619af4735770df386074c72cd60b87ede0fe53885340b907c9c02d8a7fc4c7bf509c169b049ef627c33926c9247d9e1a44c27b86b722385d8e61af40919e96ed8feb2b781bfa68095d07966381bfaac7389010b45db671e3d5e7f488ad7ff69ac6fc599fb4f259c9cb9d1ee7265312ecc4dc4ad89b9850445a7e094a7a9f7e7cf71a159f4db849d0b7f9346065ac8e509fc3f7932db1f91c3a1e34604cbedd071772bbd414d4b96328aedf372ff4e4170ca0c23bbadd447b49eff0ae2c37b51052c6e1cf2a0ef0106fa892a4a18165bfeea92c565ae5aecfa8163aa12c762f40135664b467bd58470216b1124413a2a723a358a759425cf293a6cf0b42662892f42d62e6a446016365c22ab26ca4e7dbd1c404a3f2f515fb4fd2e33efc82cca453b63d6d9e8fc0369c0192684731314ab2d684f948171c1917f99603667367b8fa69d207e3bf9c05b13b4720f493642a497b403934dbb7865dd0d0c893483b5c2986baac9d7f50612abe37f2274531ad80aba90d76117d81f99cf7459097cd7a90c441339b581dcd0bf2e74a912415918546bb5c645362dd4424631588a95a0945cd723df229b1b6da93142de12084ef56c93e2f342ba524a15c94b6334ad3f8baaa05e5e55888559a0b73be9116ed2bb713eb01f188ac86ab6ff4b0228eeb7bf481369fad1b5dc8d1718e62f65eb2c4a2906539526cfd45d4ae6f1a903f88ae4cf7f9a4fb290a14db3595ac581d70daf5b020864b315c17a99d23f19f7aa255372fd5b709eacf27503e3ab8fba5785944158aeb73c5b432c65286ae05d1ee95b5c922e24a83ecef7f4d96bfe86bd7990c13db918dbba8977f3cbfe1854a8cdcc63ea73ce3f93757ef6cb77e8144c2df51a0de62eaa982a803b35f24c6f5edf2bbacce988bfe37e394ef2acb2f364c8939365c38c56d32d8c9e1600c8b521ed80f5ad82334e915b862ff3dbf343b914170be3b881a4696c6f97100b005435cbdbb7dd7ff7bec17b179ab7645166dacf59544d7cf7cfcb94ac35acde7311d2213f9aeb5734ccbd1ad800d517c0218b92310ebd9d76b96908aba2c8779111b5ed6acfa15817b4e7bbee845b1b4eb9b8daa4cdf0a0349dfde69f63355b2a32197fb2c4a504721d6857a97da303b14dc58831cbdccba06f4bb3616bc1f33e77e1df9a5419cf7613f4d363297a1c1b6f2010f5029c48fc6909076d1883ee7b21254753f9f420bd6602d49a359719a89c5a8d3c0a93337a1c937161e1490598c3b00cac95f1240b69b4080a81942e8f1900f978b16daac1c732b37083e800ca03bf8dc38d5e2cc45aac155d169050ec49070de42e1f7cdf59556788576366930f444b310e9c16ab39c0c704eabb135935dcc218ecf3327b78256674b5b43a6886ee3099d96c5a9d6d00a65b620986abed68eaafcab311da531847e9da30276ca398fee82c77293ce55c41e562cda9801bf76eac8d41345fa6b13e31dafbf774046a21e00fa07e882133b70a0853c51ab329e8c0ff5b6c93e385609a295a8d380c33e1ee9e69e812ad404d1252d56bc3ba583aaf4581f81f7ea2b34666eca35883922dde55007a0f0049149fea6d4a0911a001e48dc105020ffd84a45a7db78dd5b1e78a14a47d1ecb6d9ffc12e5183a3dc06f03e74a449e89b46ef91a74462938e6898fed3fb72b17a5a207da6ae04c1859da383a9a300ff31f3e5a668027e4f38cc35bd6c0a5a7532f8d33ee4ea2b77dd6b0d51475b263d26c3fde0ff79ccdca8b386bcf586384f18b95cc73b834d2969da753acc42c81ac171fa19be22652d5e0eadb37445dcbcf9bd3fc4220ac1977191a38cba9ced7b5a3c8defd07a1ff68dc85f2f8c88d3314ddf4f135aaf459127715de101943988add0333e38b7b85449111a6b72fa6965d1369a897508a4990d8150da9cd68f5c60f612dafb598463d23cfb6a3369418197d16709ec9b4f15dd9e85f7a4ae86152600d6bc7c1ba30516bc17e8852f087c3ef390ab05f6c57a4ab405fedbc04849a163ed292c45bb02afc2e059ca08adf3d51e2f9a79637f6cf5e222f9ea27ec37c67849c937a99e270f1d05add89ab42b6fe1648f02fcbfbefb2f176597df1e23c41c39c29ba2d48c2788ea95327657fdb41ec24aff3259631046f5a62c07288181453942a1f24f495d087522569eef5b117477349720adde22136fdceb92173741ed0ba4252ee7332e5f835a18f6708cf429167e328a8ed33518610ccea3b750c1460a140f2645bf28fa6bad57d298463e117426ea1b8b944e04032df3413391653805149ef7dba49fb4221bc64f40c039bbaf4ecaac256084402699a89bd440539e565582f2cfb0e35ab41f70326cd3f24168a3c2816553aa8ed19facb6d3a07af5ec7a5f9f80e96c9e41adbd6fa0d44bda9cb954fed933912ec9d320cf5c2fc687bd89a5c5a1ddd87b7e3db33c0138aaaa92dd4f4619c8f9dfcc269aa8fbeb7ede7e05c2f778b05d8339fa175e2447844cd86dd886b40cb3badc4ce986aa93a3d973d1c4a76b6bdc0\";",
          "708:   std::pair<std::string, std::string> result = response_to_complaint(\"pp2\", encr_poly, 2, 2, 0);",
          "709: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "735:     cerr << \"Server inited\" << endl;",
          "737:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "739:     cerr << \"Client inited\" << endl;",
          "",
          "[Removed Lines]",
          "736:     HttpClient client(\"http://localhost:1025\");",
          "",
          "[Added Lines]",
          "729:     HttpClient client(\"http://localhost:1026\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "764:       Json::Value publicKeys;",
          "765:       publicKeys.append(\"505f55a38f9c064da744f217d1cb993a17705e9839801958cda7c884e08ab4dad7fd8d22953d3ac7f0913de24fd67d7ed36741141b8a3da152d7ba954b0f14e2\");",
          "",
          "[Removed Lines]",
          "766:       publicKeys.append(\"378b3e6fdfe2633256ae1662fcd23466d02ead907b5d4366136341cea5e46f5a7bb67d897d6e35f619810238aa143c416f61c640ed214eb9c67a34c4a31b7d25e6e\");",
          "",
          "[Added Lines]",
          "763:       publicKeys.append(\"378b3e6fdfe2633256ae1662fcd23466d02ead907b5d4366136341cea5e46f5a7bb67d897d6e35f619810238aa143c416f61c640ed214eb9c67a34c4a31b7d25\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "805:     } catch (JsonRpcException &e) {",
          "806:         cerr << e.what() << endl;",
          "",
          "[Removed Lines]",
          "801:       cout << c.blsSignMessageHash(\"dOsRY\",\"38433e5ce087dcc1be82fcc834eae83c256b3db87d34f84440d0b708daa0c6f7\", 2, 2, 1);",
          "",
          "[Added Lines]",
          "800:      cout << c.ComplaintResponse(\"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\", 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d73d650c5451e1cbab4a963dc333a1601a099377",
      "candidate_info": {
        "commit_hash": "d73d650c5451e1cbab4a963dc333a1601a099377",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/d73d650c5451e1cbab4a963dc333a1601a099377",
        "files": [
          "BLSCrypto.cpp",
          "CSRManagerServer.cpp",
          "DKGCrypto.cpp",
          "ECDSACrypto.cpp",
          "LevelDB.cpp",
          "SGXRegistrationServer.cpp",
          "SGXWalletServer.cpp",
          "ServerDataChecker.cpp",
          "ServerInit.cpp",
          "ServerInit.h",
          "sgxwallet.c",
          "sgxwallet_common.h",
          "testw.cpp"
        ],
        "message": "SKALE-1990-Add-timestams-to-logs",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "CSRManagerServer.cpp||CSRManagerServer.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "LevelDB.cpp||LevelDB.cpp",
          "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "ServerDataChecker.cpp||ServerDataChecker.cpp",
          "ServerInit.cpp||ServerInit.cpp",
          "ServerInit.h||ServerInit.h",
          "sgxwallet.c||sgxwallet.c",
          "sgxwallet_common.h||sgxwallet_common.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: #include \"RPCException.h\"",
          "55: int char2int(char _input) {",
          "56:   if (_input >= '0' && _input <= '9')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: #include \"spdlog/spdlog.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:     status = encrypt_key(eid, errStatus, errMsg, keyArray, encryptedKey, &encryptedLen);",
          "192:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "190:     std::cerr << \"errStatus is \" << *errStatus << \" errMsg is \" << errMsg << std::endl;",
          "",
          "[Added Lines]",
          "190:     if (DEBUG_PRINT) {",
          "191:       spdlog::info(\"errStatus is {}\",*errStatus, \" errMsg is \", errMsg );",
          "192:     }",
          "",
          "---------------"
        ],
        "CSRManagerServer.cpp||CSRManagerServer.cpp": [
          "File: CSRManagerServer.cpp -> CSRManagerServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <jsonrpccpp/server/connectors/httpserver.h>",
          "15: CSRManagerServer *cs = nullptr;",
          "16: jsonrpc::HttpServer *hs3 = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include \"spdlog/spdlog.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: Json::Value GetUnsignedCSRsImpl(){",
          "25:   Json::Value result;",
          "26:   result[\"status\"] = 0;",
          "27:   result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "24:   std::cerr << \"Enter GetUnsignedCSRsImpl\" << std::endl;",
          "",
          "[Added Lines]",
          "26:   spdlog::info(\"Enter GetUnsignedCSRsImpl\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:       std::string signClientCert = \"cd cert && ./create_client_cert \" + hash;",
          "72:       if (system(signClientCert.c_str()) == 0) {",
          "74:       } else {",
          "76:         csrDb->deleteKey(csr_db_key);",
          "77:         std::string status_db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "78:         csrStatusDb->deleteKey(status_db_key);",
          "",
          "[Removed Lines]",
          "73:         std::cerr << \"CLIENT CERTIFICATE IS SUCCESSFULLY GENERATED\" << std::endl;",
          "75:         std::cerr << \"CLIENT CERTIFICATE GENERATION FAILED\" << std::endl;",
          "",
          "[Added Lines]",
          "75:         spdlog::info(\"CLIENT CERTIFICATE IS SUCCESSFULLY GENERATED\");",
          "77:         spdlog::info(\"CLIENT CERTIFICATE GENERATION FAILED\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:   cs = new CSRManagerServer(*hs3, JSONRPC_SERVER_V2); // server (json-rpc 2.0)",
          "117:   if (!cs->StartListening()) {",
          "119:     exit(-1);",
          "120:   }",
          "121:   else {",
          "123:   }",
          "125:   return 0;",
          "126: };",
          "",
          "[Removed Lines]",
          "118:     std::cerr << \"CSR manager server could not start listening\" << std::endl;",
          "122:     std::cerr << \"CSR manager server started on port \" << BASE_PORT + 2 << std::endl;",
          "124:   std::cerr << \"CSR manager inited\" << std::endl;",
          "",
          "[Added Lines]",
          "120:     spdlog::info(\"CSR manager server could not start listening\");",
          "124:     spdlog::info(\"CSR manager server started on port {}\", BASE_PORT + 2);",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <libff/algebra/curves/alt_bn128/alt_bn128_pp.hpp>",
          "37: std::vector<std::string> SplitString(const char* koefs, const char symbol){",
          "38:   std::string str(koefs);",
          "39:   std::string delim;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #include \"spdlog/spdlog.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     }",
          "88:     if (DEBUG_PRINT) {",
          "92:          for ( int i = 0 ; i < 3050; i++)",
          "96:     }",
          "98:     char *hexEncrPoly = (char *) calloc(DKG_MAX_SEALED_LEN * 2 + 1, 1);//(4*BUF_LEN, 1);",
          "",
          "[Removed Lines]",
          "89:       std::cerr << \"gen_dkg_secret, status \" << err_status << \" err msg \" << errMsg << std::endl;",
          "95:       std::cerr << \"in DKGCrypto encr len is \" << enc_len << std::endl;",
          "",
          "[Added Lines]",
          "91:       spdlog::info(\"gen_dkg_secret, status {}\", err_status, \" err msg \", errMsg);",
          "97:       spdlog::info(\"in DKGCrypto encr len is {}\", enc_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:   if (DEBUG_PRINT) {",
          "120:   }",
          "122:   char* public_shares = (char*)calloc(10000, 1);",
          "",
          "[Removed Lines]",
          "119:     std::cerr << \"got encr poly size \" << strlen(encryptedPolyHex) << std::endl;",
          "",
          "[Added Lines]",
          "121:     spdlog::info(\"got encr poly size {}\", strlen(encryptedPolyHex));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129:   }",
          "131:   if (DEBUG_PRINT) {",
          "134:     for ( int i = 0 ; i < 3050; i++)",
          "",
          "[Removed Lines]",
          "132:     std::cerr << \"enc len \" << enc_len << std::endl;",
          "",
          "[Added Lines]",
          "134:     spdlog::info(\"enc len {}\", enc_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "142:   }",
          "144:   if (DEBUG_PRINT) {",
          "151:   }",
          "153:   std::vector <std::string> G2_strings = SplitString( public_shares, ',');",
          "",
          "[Removed Lines]",
          "145:     std::cerr << \"err msg \" << errMsg1 << std::endl;",
          "147:     std::cerr << \"public_shares:\" << std::endl;",
          "148:     std::cerr << public_shares << std::endl;",
          "150:     printf(\"\\nget_public_shares status: %d error %s \\n\\n\", err_status, errMsg1);",
          "",
          "[Added Lines]",
          "147:     spdlog::info(\"err msg is {}\", errMsg1);",
          "149:     spdlog::info(\"public_shares:\");",
          "150:     spdlog::info(\"{}\", public_shares);",
          "153:     spdlog::info(\"get_public_shares status: {}\", err_status);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "191:     char s_shareG2[320];",
          "192:     std::string pub_keyB = publicKeys.at(i);//publicKeys.substr(128*i, 128*i + 128);",
          "193:     if (DEBUG_PRINT) {",
          "195:     }",
          "196:     char pubKeyB[129];",
          "197:     strncpy(pubKeyB, pub_keyB.c_str(), 128);",
          "",
          "[Removed Lines]",
          "194:       std::cerr << \"pub_keyB is \" << pub_keyB << std::endl;",
          "",
          "[Added Lines]",
          "198:       spdlog::info(\"pub_keyB is {}\", pub_keyB);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "208:     if (DEBUG_PRINT) {",
          "210:     }",
          "211:     carray2Hex(encrypted_skey, dec_len, hexEncrKey);",
          "213:     std::string DHKey_name = \"DKG_DH_KEY_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "216:     writeDataToDB(DHKey_name, hexEncrKey);",
          "218:     std::string shareG2_name = \"shareG2_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "219:     if (DEBUG_PRINT) {",
          "222:     }",
          "223:     writeDataToDB(shareG2_name, s_shareG2);",
          "225:     if (DEBUG_PRINT) {",
          "",
          "[Removed Lines]",
          "209:       std::cerr << \"dec len is \" << dec_len << std::endl;",
          "214:     std::cerr << \"name to write to db is \" << DHKey_name << std::endl;",
          "220:       std::cerr << \"name to write to db is \" << shareG2_name << std::endl;",
          "221:       std::cerr << \"s_shareG2: \" << s_shareG2 << std::endl;",
          "226:       std::cerr << errMsg1 << std::endl << std::endl;",
          "",
          "[Added Lines]",
          "213:       spdlog::info(\"dec len is {}\", dec_len);",
          "224:       spdlog::info(\"name to write to db is {}\", DHKey_name);",
          "225:       spdlog::info(\"name to write to db is {}\", shareG2_name);",
          "226:       spdlog::info(\"s_shareG2: {}\", s_shareG2);",
          "231:       spdlog::info(\"errMsg: {}\", errMsg1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "258:     }",
          "259:     char pshares[8193];",
          "260:     strncpy(pshares, publicShares, strlen(publicShares) + 1);",
          "",
          "[Removed Lines]",
          "257:       std::cerr << \"publicShares length is \" << std::char_traits<char>::length(publicShares)<<std::endl; //strlen(publicShares)<< std::endl;",
          "",
          "[Added Lines]",
          "262:       spdlog::info(\"publicShares length is {}\", std::char_traits<char>::length(publicShares));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "267:     }",
          "269:     if (DEBUG_PRINT) {",
          "272:     }",
          "274:     free(errMsg1);",
          "",
          "[Removed Lines]",
          "270:       std::cerr << \"errMsg1: \" << errMsg1 << std::endl;",
          "271:       std::cerr << \"result is \" << result << std::endl;",
          "",
          "[Added Lines]",
          "275:       spdlog::info(\"errMsg1: {}\", errMsg1);",
          "276:       spdlog::info(\"result is: {}\", result);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "279: bool CreateBLSShare( const std::string& BLSKeyName, const char * s_shares, const char * encryptedKeyHex){",
          "280:   if (DEBUG_PRINT) {",
          "282:   }",
          "283:   char* errMsg1 = (char*) calloc(1024,1);",
          "284:   int err_status = 0;",
          "",
          "[Removed Lines]",
          "281:     std::cerr << \"ENTER CreateBLSShare\" << std::endl;",
          "",
          "[Added Lines]",
          "286:     spdlog::info(\"ENTER CreateBLSShare\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "296:   create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "298:   if ( err_status != 0){",
          "300:      throw RPCException(ERROR_IN_ENCLAVE, \"Create BLS private key failed in enclave\");",
          "301:   }",
          "302:   else {",
          "",
          "[Removed Lines]",
          "299:      std::cerr << \"ERROR IN ENCLAVE\" << std::endl;",
          "",
          "[Added Lines]",
          "304:      spdlog::info(\"ERROR IN ENCLAVE\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "308:     writeDataToDB(BLSKeyName, hexBLSKey);",
          "309:     if (DEBUG_PRINT) {",
          "312:     }",
          "313:     free(hexBLSKey);",
          "314:     return true;",
          "",
          "[Removed Lines]",
          "310:       std::cerr << \"hexBLSKey length is \" << strlen(hexBLSKey) << std::endl;",
          "311:       std::cerr << \"bls key \" << BLSKeyName << \" is \" << hexBLSKey << std::endl;",
          "",
          "[Added Lines]",
          "315:       spdlog::info(\"hexBLSKey length is {}\", strlen(hexBLSKey));",
          "316:       spdlog::info(\"bls key {}\", BLSKeyName, \" is \", hexBLSKey );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "332:     char pub_key[320];",
          "333:     if (DEBUG_PRINT) {",
          "335:     }",
          "336:     get_bls_pub_key(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "337:     if ( err_status != 0){",
          "",
          "[Removed Lines]",
          "334:       std::cerr << \"dec_key_len is \" << dec_key_len << std::endl;",
          "",
          "[Added Lines]",
          "339:       spdlog::info(\"dec_key_len is {}\", dec_key_len);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "340:     std::vector<std::string> pub_key_vect = SplitString(pub_key, ':');",
          "342:     if (DEBUG_PRINT) {",
          "345:       for (int i = 0; i < 4; i++)",
          "347:     }",
          "348:     return pub_key_vect;",
          "349: }",
          "",
          "[Removed Lines]",
          "343:       std::cerr << \"errMsg1 is \" << errMsg1 << std::endl;",
          "344:       std::cerr << \"pub key is\" << std::endl;",
          "346:         std::cerr << pub_key_vect.at(i) << std::endl;",
          "",
          "[Added Lines]",
          "348:       spdlog::info(\"errMsg1 is {}\", errMsg1);",
          "349:       spdlog::info(\"pub key is \");",
          "351:         spdlog::info(\"{}\", pub_key_vect.at(i));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "356:   std::string DH_key_name = polyName + \"_\" + std::to_string(ind) + \":\";",
          "357:   std::shared_ptr<std::string> hexEncrKey_ptr = readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "358:   if (DEBUG_PRINT) {",
          "360:   }",
          "362:   char *hexEncrKey = (char *) calloc(2 * BUF_LEN, 1);",
          "",
          "[Removed Lines]",
          "359:     std::cerr << \"encr DH key is \" << hexEncrKey_ptr << std::endl;",
          "",
          "[Added Lines]",
          "364:     spdlog::info(\"encr DH key is {}\", *hexEncrKey_ptr);",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <gmp.h>",
          "32: #include <random>",
          "35: static std::default_random_engine rand_gen((unsigned int) time(0));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include \"spdlog/spdlog.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   unsigned long seed = rand_gen();",
          "68:   if (DEBUG_PRINT) {",
          "70:   }",
          "71:   gmp_randstate_t state;",
          "72:   gmp_randinit_default(state);",
          "",
          "[Removed Lines]",
          "69:     std::cerr << \"seed is \" << seed << std::endl;",
          "",
          "[Added Lines]",
          "71:     spdlog::info(\"seed is {}\", seed);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:   std::string pubKey = std::string(pub_key_x) + std::string(pub_key_y);//concatPubKeyWith0x(pub_key_x, pub_key_y);//",
          "117:   if (DEBUG_PRINT) {",
          "121:   }",
          "123:   free(errMsg);",
          "",
          "[Removed Lines]",
          "118:     std::cerr << \"pubkey is \" << pubKey << std::endl;",
          "119:     std::cerr << \"pubkey length is \" << pubKey.length() << std::endl;",
          "120:     std::cerr << \"err str \" << errMsg << std::endl;",
          "",
          "[Added Lines]",
          "120:     spdlog::info(\"pubkey is {}\", pubKey);",
          "121:     spdlog::info(\"pubkey length is {}\", pubKey.length());",
          "122:     spdlog::info(\"err str is {}\", errMsg);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:   }",
          "145:   if (DEBUG_PRINT) {",
          "149:   }",
          "151:   status = ecdsa_sign1(eid, &err_status, errMsg, encr_key, ECDSA_ENCR_LEN, (unsigned char*)hashHex, signature_r, signature_s, &signature_v, base );",
          "",
          "[Removed Lines]",
          "146:     std::cerr << \"encryptedKeyHex: \" << encryptedKeyHex << std::endl;",
          "147:     std::cerr << \"HASH: \" << hashHex << std::endl;",
          "148:     std::cerr << \"encrypted len\" << dec_len << std::endl;",
          "",
          "[Added Lines]",
          "148:     spdlog::info(\"encryptedKeyHex: {}\", encryptedKeyHex);",
          "149:     spdlog::info(\"HASH: {}\", hashHex);",
          "150:     spdlog::info(\"encrypted len: {}\", dec_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "154:   }",
          "156:   if (DEBUG_PRINT) {",
          "159:   }",
          "161:   if ( status != SGX_SUCCESS){",
          "163:   }",
          "164:   signature_vect.at(0) = std::to_string(signature_v);",
          "165:   if ( base == 16) {",
          "",
          "[Removed Lines]",
          "157:     std::cerr << \"signature r in  ecdsa_sign_hash \" << signature_r << std::endl;",
          "158:     std::cerr << \"signature s in  ecdsa_sign_hash \" << signature_s << std::endl;",
          "162:     std::cerr << \"failed to sign \" << std::endl;",
          "",
          "[Added Lines]",
          "159:     spdlog::info(\"signature r in  ecdsa_sign_hash: {}\", signature_r);",
          "160:     spdlog::info(\"signature s in  ecdsa_sign_hash: {}\", signature_s);",
          "164:     spdlog::info(\"  failed to sign \");",
          "",
          "---------------"
        ],
        "LevelDB.cpp||LevelDB.cpp": [
          "File: LevelDB.cpp -> LevelDB.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include \"ServerInit.h\"",
          "39: using namespace leveldb;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #include \"spdlog/spdlog.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     if (DEBUG_PRINT) {",
          "68:     }",
          "70:     throwExceptionOnError(status);",
          "",
          "[Removed Lines]",
          "67:       std::cerr << \"key to read from db: \" << _key << std::endl;",
          "",
          "[Added Lines]",
          "69:       spdlog::info(\"key to read from db: {}\",_key );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:     throwExceptionOnError(status);",
          "86:     if (DEBUG_PRINT) {",
          "88:     }",
          "89: }",
          "",
          "[Removed Lines]",
          "87:       std::cerr << \"written key \" << _key  << std::endl;",
          "",
          "[Added Lines]",
          "90:         spdlog::info(\"written key: {}\",_key );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:     throwExceptionOnError(status);",
          "103: }",
          "105: void LevelDB::deleteOlegKey (const std::string &_key) {",
          "",
          "[Removed Lines]",
          "102:     std::cerr << \"key deleted \" << full_key << std::endl;",
          "",
          "[Added Lines]",
          "106:     if (DEBUG_PRINT) {",
          "107:       spdlog::info(\"key deleted: {}\",full_key );",
          "109:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:     throwExceptionOnError(status);",
          "116: }",
          "118: void LevelDB::deleteTempNEK(const std::string &_key){",
          "",
          "[Removed Lines]",
          "115:     std::cerr << \"key deleted \" << full_key << std::endl;",
          "",
          "[Added Lines]",
          "123:     if (DEBUG_PRINT) {",
          "124:       std::cerr << \"key deleted \" << full_key << std::endl;",
          "125:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:     throwExceptionOnError(status);",
          "142:     if (DEBUG_PRINT) {",
          "144:     }",
          "145: }",
          "",
          "[Removed Lines]",
          "143:       std::cerr << \"key deleted \" << _key << std::endl;",
          "",
          "[Added Lines]",
          "153:       spdlog::info(\"key deleted: {}\",_key );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "221:   auto key = Name;",
          "223:   if (readString(Name) != nullptr) {",
          "225:     throw RPCException(KEY_SHARE_ALREADY_EXISTS, \"Data with this name already exists\");",
          "226:   }",
          "228:   writeString(key, value);",
          "230: }",
          "",
          "[Removed Lines]",
          "224:     std::cerr << \"name \" << Name << \" already exists\" << std::endl;",
          "229:   std::cerr << Name << \" is written to db \" << std::endl;",
          "",
          "[Added Lines]",
          "235:     spdlog::info(\"name {}\",Name, \" already exists\");",
          "241:   if (DEBUG_PRINT) {",
          "242:       spdlog::info(\"{}\",Name, \" is written to db\");",
          "244:   }",
          "",
          "---------------"
        ],
        "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp": [
          "File: SGXRegistrationServer.cpp -> SGXRegistrationServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include \"SGXRegistrationServer.h\"",
          "44: #include \"LevelDB.h\"",
          "46: int DEBUG_PRINT = 0;",
          "47: int is_sgx_https = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #include \"spdlog/spdlog.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:   result[\"status\"] = 0;",
          "67:   result[\"errorMessage\"] = \"\";",
          "68:   try{",
          "71:     std::string status = \"1\";",
          "72:     std::string hash = cryptlite::sha256::hash_hex(csr);",
          "",
          "[Removed Lines]",
          "69:     std::cerr << \" enter SignCertificateImpl \" << std::endl;",
          "",
          "[Added Lines]",
          "71:     spdlog::info(\"enter SignCertificateImpl\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:       std::string genCert = \"cd cert && ./create_client_cert \" + hash;",
          "89:       if (system(genCert.c_str()) == 0){",
          "91:           status = \"0\";",
          "92:       }",
          "93:       else{",
          "95:           std::string status_db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "96:           csrStatusDb->writeDataUnique(status_db_key, std::to_string(FAIL_TO_CREATE_CERTIFICATE));",
          "97:           throw RPCException(FAIL_TO_CREATE_CERTIFICATE, \"CLIENT CERTIFICATE GENERATION FAILED\");",
          "",
          "[Removed Lines]",
          "90:           std::cerr << \"CLIENT CERTIFICATE IS SUCCESSFULLY GENERATED\" << std::endl;",
          "94:           std::cerr << \"CLIENT CERTIFICATE GENERATION FAILED\" << std::endl;",
          "",
          "[Added Lines]",
          "92:           spdlog::info(\"CLIENT CERTIFICATE IS SUCCESSFULLY GENERATED\");",
          "96:           spdlog::info(\"CLIENT CERTIFICATE GENERATION FAILED\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144:           infile.close();",
          "145:           std::string remove_crt = \"cd cert && rm -rf \" + hash + \".crt && rm -rf \" + hash + \".csr\";",
          "146:           if(system(remove_crt.c_str()) == 0){",
          "148:           }",
          "149:           else{",
          "151:           }",
          "153:       }",
          "",
          "[Removed Lines]",
          "147:               std::cerr << \"cert removed\" << std::endl;",
          "150:               std::cerr << \"cert was not removed\" << std::endl;",
          "",
          "[Added Lines]",
          "150:               spdlog::info(\" cert removed \");",
          "154:               spdlog::info(\" cert was not removed \");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "169: Json::Value SGXRegistrationServer::SignCertificate(const std::string& csr){",
          "171:   lock_guard<recursive_mutex> lock(m);",
          "172:   return SignCertificateImpl(csr, cert_auto_sign);",
          "173: }",
          "",
          "[Removed Lines]",
          "170:   std::cerr << \"Enter SignCertificate \" << std::endl;",
          "",
          "[Added Lines]",
          "174:   spdlog::info(\"Enter SignCertificate \");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "208:                                  JSONRPC_SERVER_V2, sign_automatically); // hybrid server (json-rpc 1.0 & 2.0)",
          "210:   if (!regs->StartListening()) {",
          "212:     exit(-1);",
          "213:   }",
          "214:   else {",
          "216:   }",
          "",
          "[Removed Lines]",
          "211:     cerr << \"Registration server could not start listening\" << endl;",
          "215:     cerr << \"Registration Server started on port \" << BASE_PORT + 1 << endl;",
          "",
          "[Added Lines]",
          "215:     spdlog::info(\"Registration server could not start listening\");",
          "219:     spdlog::info(\"Registration server started on port {}\", BASE_PORT + 1);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #include \"ServerInit.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #include \"spdlog/spdlog.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: }",
          "81: int init_https_server(bool check_certs) {",
          "82:   std::string rootCAPath = \"cert/rootCA.pem\";",
          "83:   std::string keyCAPath = \"cert/rootCA.key\";",
          "85:   if (access(rootCAPath.c_str(), F_OK) != 0 || access(keyCAPath.c_str(), F_OK) != 0){",
          "89:     std::string genRootCACert = \"cd cert && ./create_CA\";",
          "91:     if (system(genRootCACert.c_str()) == 0){",
          "93:     }",
          "94:     else{",
          "96:       exit(-1);",
          "97:     }",
          "98:   }",
          "",
          "[Removed Lines]",
          "86:     std::cerr << \"YOU DO NOT HAVE ROOT CA CERTIFICATE\" << std::endl;",
          "87:     std::cerr << \"ROOT CA CERTIFICATE IS GOING TO BE CREATED\" << std::endl;",
          "92:       std::cerr << \"ROOT CA CERTIFICATE IS SUCCESSFULLY GENERATED\" << std::endl;",
          "95:       std::cerr << \"ROOT CA CERTIFICATE GENERATION FAILED\" << std::endl;",
          "",
          "[Added Lines]",
          "89:     spdlog::info(\"YOU DO NOT HAVE ROOT CA CERTIFICATE\");",
          "90:     spdlog::info(\"ROOT CA CERTIFICATE IS GOING TO BE CREATED\");",
          "95:       spdlog::info(\"ROOT CA CERTIFICATE IS SUCCESSFULLY GENERATED\");",
          "98:       spdlog::info(\"ROOT CA CERTIFICATE GENERATION FAILED\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:   std::string keyPath = \"cert/SGXServerCert.key\";",
          "103:   if (access(certPath.c_str(), F_OK) != 0 || access(certPath.c_str(), F_OK) != 0){",
          "107:     std::string genCert = \"cd cert && ./create_server_cert\";",
          "109:     if (system(genCert.c_str()) == 0){",
          "111:     }",
          "112:     else{",
          "114:       exit(-1);",
          "115:     }",
          "116:   }",
          "",
          "[Removed Lines]",
          "104:     std::cerr << \"YOU DO NOT HAVE SERVER CERTIFICATE \" << std::endl;",
          "105:     std::cerr << \"SERVER CERTIFICATE IS GOING TO BE CREATED\" << std::endl;",
          "110:        std::cerr << \"SERVER CERTIFICATE IS SUCCESSFULLY GENERATED\" << std::endl;",
          "113:       std::cerr << \"SERVER CERTIFICATE GENERATION FAILED\" << std::endl;",
          "",
          "[Added Lines]",
          "107:     spdlog::info(\"YOU DO NOT HAVE SERVER CERTIFICATE\");",
          "108:     spdlog::info(\"SERVER CERTIFICATE IS GOING TO BE CREATED\");",
          "113:       spdlog::info(\"SERVER CERTIFICATE IS SUCCESSFULLY GENERATED\");",
          "116:       spdlog::info(\"SERVER CERTIFICATE GENERATION FAILED\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120:                       JSONRPC_SERVER_V2); // hybrid server (json-rpc 1.0 & 2.0)",
          "122:   if (!s->StartListening()) {",
          "124:     exit(-1);",
          "125:   }",
          "126:   else{",
          "128:   }",
          "129:   return 0;",
          "130: }",
          "",
          "[Removed Lines]",
          "123:     cerr << \"SGX Server could not start listening\" << endl;",
          "127:     cerr << \"SGX Server started on port \" << BASE_PORT << endl;",
          "",
          "[Added Lines]",
          "126:     spdlog::info(\"SGX Server could not start listening\");",
          "130:     spdlog::info(\"SGX Server started on port {}\", BASE_PORT);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:   s = new SGXWalletServer(*hs,",
          "137:                           JSONRPC_SERVER_V2); // hybrid server (json-rpc 1.0 & 2.0)",
          "138:   if (!s->StartListening()) {",
          "140:     exit(-1);",
          "141:   }",
          "142:   return 0;",
          "",
          "[Removed Lines]",
          "139:     cerr << \"Server could not start listening\" << endl;",
          "",
          "[Added Lines]",
          "142:     spdlog::info(\"Server could not start listening\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "253:     result[\"errorMessage\"] = \"\";",
          "254:     result[\"encryptedKey\"] = \"\";",
          "258:     std::vector<std::string>keys;",
          "",
          "[Removed Lines]",
          "256:     cerr << \"Calling method generateECDSAKey\"  << endl;",
          "",
          "[Added Lines]",
          "259:     spdlog::info(\"Calling method generateECDSAKey\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "267:         std::string keyName = \"NEK:\" + keys.at(2);",
          "269:         if (DEBUG_PRINT) {",
          "273:         }",
          "",
          "[Removed Lines]",
          "270:           std::cerr << \"write encr key\" << keys.at(0) << std::endl;",
          "271:           std::cerr << \"keyname length is \" << keyName.length() << std::endl;",
          "272:           std::cerr << \"key name generated: \" << keyName << std::endl;",
          "",
          "[Added Lines]",
          "273:           spdlog::info(\"write encr key {}\", keys.at(0));",
          "274:           spdlog::info(\"keyname length is {}\", keyName.length());",
          "275:           spdlog::info(\"key name generated: {}\", keyName);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "335:     std::vector<std::string> sign_vect(3);",
          "337:     if (DEBUG_PRINT) {",
          "340:     }",
          "342:     try {",
          "",
          "[Removed Lines]",
          "338:       std::cerr << \"entered ecdsaSignMessageHashImpl\" << messageHash",
          "339:                 << \"length \" << messageHash.length() << std::endl;",
          "",
          "[Added Lines]",
          "341:       spdlog::info(\"entered ecdsaSignMessageHashImpl {}\", messageHash, \"length {}\", messageHash.length());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "350:       }",
          "352:       if (DEBUG_PRINT) {",
          "354:       }",
          "356:       if ( !checkECDSAKeyName(_keyName)){",
          "",
          "[Removed Lines]",
          "353:         std::cerr << \"Hash handled \" << cutHash << std::endl;",
          "",
          "[Added Lines]",
          "355:         spdlog::info(\"Hash handled  {}\", cutHash);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "371:       }",
          "373:       if (DEBUG_PRINT) {",
          "375:       }",
          "377:       result[\"signature_v\"] = sign_vect.at(0);",
          "",
          "[Removed Lines]",
          "374:         std::cerr << \"got signature_s \" << sign_vect.at(2) << std::endl;",
          "",
          "[Added Lines]",
          "376:         spdlog::info(\"got signature_s  {}\", sign_vect.at(2));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "393:     result[\"errorMessage\"] = \"\";",
          "394:     result[\"PublicKey\"] = \"\";",
          "398:     std::string Pkey;",
          "",
          "[Removed Lines]",
          "396:     cerr << \"Calling method getPublicECDSAKey\"  << endl;",
          "",
          "[Added Lines]",
          "398:     spdlog::info(\"Calling method getPublicECDSAKey\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "404:          std::shared_ptr<std::string> key_ptr = readFromDb(keyName);",
          "405:          Pkey = get_ecdsa_pubkey( key_ptr->c_str());",
          "406:          if (DEBUG_PRINT) {",
          "409:          }",
          "410:          result[\"PublicKey\"] = Pkey;",
          "",
          "[Removed Lines]",
          "407:            std::cerr << \"PublicKey \" << Pkey << std::endl;",
          "408:            std::cerr << \"PublicKey length\" << Pkey.length() << std::endl;",
          "",
          "[Added Lines]",
          "409:            spdlog::info(\"PublicKey {}\", Pkey);",
          "410:            spdlog::info(\"PublicKey length {}\", Pkey.length());",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "484: }",
          "486: Json::Value getSecretShareImpl(const std::string& polyName, const Json::Value& publicKeys, int t, int n){",
          "488:     Json::Value result;",
          "489:     result[\"status\"] = 0;",
          "490:     result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "487:     std::cerr << \" enter getSecretShareImpl\" << std::endl;",
          "",
          "[Added Lines]",
          "489:     spdlog::info(\"enter getSecretShareImpl\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "527: Json::Value DKGVerificationImpl(const std::string& publicShares, const std::string& EthKeyName,",
          "528:                                   const std::string& SecretShare, int t, int n, int ind){",
          "532:   Json::Value result;",
          "533:   result[\"status\"] = 0;",
          "",
          "[Removed Lines]",
          "530:   std::cerr << \" enter DKGVerificationImpl\" << std::endl;",
          "",
          "[Added Lines]",
          "532:   spdlog::info(\"enter DKGVerificationImpl\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "568: Json::Value CreateBLSPrivateKeyImpl(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n){",
          "572:   Json::Value result;",
          "573:   result[\"status\"] = 0;",
          "",
          "[Removed Lines]",
          "570:   std::cerr << \"CreateBLSPrivateKeyImpl entered\" << std::endl;",
          "",
          "[Added Lines]",
          "572:   spdlog::info(\"CreateBLSPrivateKeyImpl entered\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "576:   try {",
          "578:     if (SecretShare.length() != n * 192){",
          "581:       throw RPCException(INVALID_SECRET_SHARES_LENGTH, \"Invalid secret share length\");",
          "582:     }",
          "583:     if ( !checkECDSAKeyName(EthKeyName)){",
          "",
          "[Removed Lines]",
          "579:       std::cerr << \"wrong length of secret shares - \" << SecretShare.length() << std::endl;",
          "580:       std::cerr << \"secret shares - \" << SecretShare << std::endl;",
          "",
          "[Added Lines]",
          "581:       spdlog::info(\"wrong length of secret shares - {}\", SecretShare.length());",
          "582:       spdlog::info(\"secret shares - {}\", SecretShare);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "594:     }",
          "595:     std::vector<std::string> sshares_vect;",
          "596:     if (DEBUG_PRINT) {",
          "598:     }",
          "600:     std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(EthKeyName);",
          "602:     bool res = CreateBLSShare(BLSKeyName, SecretShare.c_str(), encryptedKeyHex_ptr->c_str());",
          "603:      if ( res){",
          "606:      }",
          "607:      else {",
          "608:        throw RPCException(-122, \"Error while creating BLS key share\");",
          "",
          "[Removed Lines]",
          "597:       std::cerr << \"sshares from json are \" << SecretShare << std::endl;",
          "604:          std::cerr << \"BLS KEY SHARE CREATED \" << std::endl;",
          "",
          "[Added Lines]",
          "599:       spdlog::info(\"secret shares from json are - {}\", SecretShare);",
          "606:          spdlog::info(\"BLS KEY SHARE CREATED \");",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "635:       }",
          "636:       std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(BLSKeyName);",
          "637:       if (DEBUG_PRINT) {",
          "640:       }",
          "641:       std::vector<std::string> public_key_vect = GetBLSPubKey(encryptedKeyHex_ptr->c_str());",
          "642:       for ( uint8_t i = 0; i < 4; i++) {",
          "",
          "[Removed Lines]",
          "638:         std::cerr << \"encr_bls_key_share is \" << *encryptedKeyHex_ptr << std::endl;",
          "639:         std::cerr << \"length is \" << encryptedKeyHex_ptr->length() << std::endl;",
          "",
          "[Added Lines]",
          "639:         spdlog::info(\"encr_bls_key_share is {}\", *encryptedKeyHex_ptr);",
          "640:         spdlog::info(\"length is {}\", encryptedKeyHex_ptr->length());",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "685:     result[\"status\"] = 0;",
          "686:     result[\"errorMessage\"] = \"\";",
          "687:     try {",
          "689:         std::vector<std::string> xG2_vect = mult_G2(x);",
          "690:         for ( uint8_t i = 0; i < 4; i++) {",
          "691:             result[\"x*G2\"][i] = xG2_vect.at(i);",
          "",
          "[Removed Lines]",
          "688:         std::cerr << \"MultG2Impl try \" << std::endl;",
          "",
          "[Added Lines]",
          "691:         spdlog::info(\"MultG2Impl try \");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "713: Json::Value SGXWalletServer::generateDKGPoly(const std::string& polyName, int t){",
          "715:   lock_guard<recursive_mutex> lock(m);",
          "716:   return generateDKGPolyImpl(polyName, t);",
          "717: }",
          "",
          "[Removed Lines]",
          "714:   std::cerr << \"entered generateDKGPoly\" << std::endl;",
          "",
          "[Added Lines]",
          "717:   spdlog::info(\"entered generateDKGPoly\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "762: Json::Value SGXWalletServer::ecdsaSignMessageHash(int base, const std::string &_keyName, const std::string &messageHash ) {",
          "763:   lock_guard<recursive_mutex> lock(m);",
          "765:   if (DEBUG_PRINT) {",
          "767:   }",
          "768:   return ecdsaSignMessageHashImpl(base,_keyName, messageHash);",
          "769: }",
          "",
          "[Removed Lines]",
          "764:   std::cerr << \"entered ecdsaSignMessageHash\" << std::endl;",
          "766:     std::cerr << \"MessageHash first \" << messageHash << std::endl;",
          "",
          "[Added Lines]",
          "767:   spdlog::info(\"entered ecdsaSignMessageHash\");",
          "769:     spdlog::info(\"MessageHash first {}\", messageHash);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "856:   auto key = Name;",
          "858:   if (levelDb->readString(Name) != nullptr) {",
          "860:     throw RPCException(KEY_SHARE_ALREADY_EXISTS, \"Data with this name already exists\");",
          "861:   }",
          "863:   levelDb->writeString(key, value);",
          "864:   if (DEBUG_PRINT) {",
          "866:   }",
          "867: }",
          "",
          "[Removed Lines]",
          "859:     std::cerr << \"name \" << Name << \" already exists\" << std::endl;",
          "865:     std::cerr << Name << \" is written to db \" << std::endl;",
          "",
          "[Added Lines]",
          "862:     spdlog::info(\"name {}\", Name, \" already exists\");",
          "868:     spdlog::info(\"{} \", Name, \" is written to db \");",
          "",
          "---------------"
        ],
        "ServerDataChecker.cpp||ServerDataChecker.cpp": [
          "File: ServerDataChecker.cpp -> ServerDataChecker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <iostream>",
          "30: std::vector<std::string> SplitString(const std::string& str, const std::string& delim = \":\"){",
          "31:     std::vector<std::string> tokens;",
          "32:     size_t prev = 0, pos = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include \"spdlog/spdlog.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: bool checkECDSAKeyName(const std::string& keyName) {",
          "45:   std::vector<std::string> parts = SplitString(keyName);",
          "46:   if (parts.size() != 2) {",
          "48:     return false;",
          "49:   }",
          "50:   if (parts.at(0) != \"NEK\") {",
          "52:       return false;",
          "53:   }",
          "54:   if ( parts.at(1).length() > 64 || parts.at(1).length() < 1){",
          "56:       return false;",
          "57:   }",
          "",
          "[Removed Lines]",
          "47:     std::cerr << \"num parts != 2\" << std::endl;",
          "51:       std::cerr << \"key doesn't start from NEK\" << std::endl;",
          "55:       std::cerr << \"wrong key length\" << std::endl;",
          "",
          "[Added Lines]",
          "49:     spdlog::info(\"ECDSAKeyName num parts != 2\");",
          "53:       spdlog::info(\"key doesn't start from NEK\");",
          "57:       spdlog::info(\"wrong key length\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87: bool checkName (const std::string& Name, const std::string& prefix){",
          "88:     std::vector<std::string> parts = SplitString(Name);",
          "89:     if ( parts.size() != 7) {",
          "91:         return false;",
          "92:     }",
          "93:     if ( parts.at(0) != prefix ) {",
          "95:         return false;",
          "96:     }",
          "97:     if ( parts.at(1) != \"SCHAIN_ID\"){",
          "99:         return false;",
          "100:     }",
          "101:     if ( parts.at(3) != \"NODE_ID\"){",
          "103:         return false;",
          "104:     }",
          "105:     if ( parts.at(5) != \"DKG_ID\"){",
          "107:         return false;",
          "108:     }",
          "110:     if ( parts.at(2).length() > 78 || parts.at(2).length() < 1){",
          "112:         return false;",
          "113:     }",
          "114:     if (parts.at(4).length() > 5 || parts.at(4).length() < 1){",
          "116:         return false;",
          "117:     }",
          "118:     if ( parts.at(6).length() > 78 || parts.at(6).length() < 1){",
          "120:         return false;",
          "121:     }",
          "",
          "[Removed Lines]",
          "90:         std::cerr << \"parts.size() != 7\" << std::endl;",
          "94:         std::cerr << \"parts.at(0) != prefix\" << std::endl;",
          "98:         std::cerr << \"parts.at(1) != SCHAIN_ID\" << std::endl;",
          "102:         std::cerr << \"parts.at(3) != Node_ID\" << std::endl;",
          "106:         std::cerr << \"parts.at(1) != DKG_ID\" << std::endl;",
          "111:         std::cerr << \"parts.at(2).length() > 78\" << std::endl;",
          "115:         std::cerr << \"parts.at(4).length() > 5\" << std::endl;",
          "119:         std::cerr << \"parts.at(6).length() > 78\" << std::endl;",
          "",
          "[Added Lines]",
          "92:         spdlog::info(\"parts.size() != 7\");",
          "96:         spdlog::info(\"parts.at(0) != prefix\");",
          "100:         spdlog::info(\"parts.at(1) != SCHAIN_ID\");",
          "104:         spdlog::info(\"parts.at(3) != Node_ID\");",
          "108:         spdlog::info(\"parts.at(1) != DKG_ID\");",
          "113:         spdlog::info(\"parts.at(2).length() > 78\");",
          "117:         spdlog::info(\"parts.at(4).length() > 5\");",
          "121:         spdlog::info(\"parts.at(6).length() > 78\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:     if ( mpz_set_str(num, parts.at(2).c_str(), 10) == -1){",
          "127:         mpz_clear(num);",
          "129:         return false;",
          "130:     }",
          "131:     mpz_clear(num);",
          "",
          "[Removed Lines]",
          "128:         std::cerr << \"parts.at(2) not num\" << std::endl;",
          "",
          "[Added Lines]",
          "130:         spdlog::info(\"parts.at(2) not num\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:     if ( mpz_set_str(num, parts.at(4).c_str(), 10) == -1){",
          "135:         mpz_clear(num);",
          "137:         return false;",
          "138:     }",
          "139:     mpz_clear(num);",
          "",
          "[Removed Lines]",
          "136:         std::cerr << \"parts.at(4) not num\" << std::endl;",
          "",
          "[Added Lines]",
          "138:         spdlog::info(\"parts.at(4) not num\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "142:     if ( mpz_set_str(num, parts.at(6).c_str(),10) == -1){",
          "143:         mpz_clear(num);",
          "145:         return false;",
          "146:     }",
          "147:     mpz_clear(num);",
          "",
          "[Removed Lines]",
          "144:         std::cerr << \"parts.at(6) not num\" << std::endl;",
          "",
          "[Added Lines]",
          "146:         spdlog::info(\"parts.at(6) not num\");",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #include <iostream>",
          "58: void init_daemon() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #include \"spdlog/spdlog.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:     }",
          "88: #endif",
          "92:     status = sgx_create_enclave_search(ENCLAVE_NAME, SGX_DEBUG_FLAG, &token,",
          "93:                                        &updated, &eid, 0);",
          "",
          "[Removed Lines]",
          "90:     std::cerr << \"SGX_DEBUG_FLAG = \" << SGX_DEBUG_FLAG << std::endl;",
          "",
          "[Added Lines]",
          "91:     if ( DEBUG_PRINT) {",
          "92:       spdlog::info(\"SGX_DEBUG_FLAG = {}\", SGX_DEBUG_FLAG);",
          "94:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:         exit(1);",
          "103:     }",
          "107:     status = tgmp_init(eid);",
          "108:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "105:     fprintf(stderr, \"Enclave launched\\n\");",
          "",
          "[Added Lines]",
          "110:     spdlog::info( \"Enclave launched\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:         exit(1);",
          "111:     }",
          "114: }",
          "117: int sgxServerInited = 0;",
          "119: void init_all(bool check_cert, bool sign_automatically) {",
          "121:     if (sgxServerInited == 1)",
          "122:         return;",
          "",
          "[Removed Lines]",
          "113:     fprintf(stderr, \"libtgmp initialized\\n\");",
          "",
          "[Added Lines]",
          "118:     if (DEBUG_PRINT) {",
          "119:       spdlog::info(\"libtgmp initialized\");",
          "121:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:       init_http_server();",
          "133:     }",
          "134:     init_enclave();",
          "136:     init_daemon();",
          "137: }",
          "",
          "[Removed Lines]",
          "135:     std::cerr << \"enclave inited\" << std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ServerInit.h||ServerInit.h": [
          "File: ServerInit.h -> ServerInit.h"
        ],
        "sgxwallet.c||sgxwallet.c": [
          "File: sgxwallet.c -> sgxwallet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:       if (strlen(argv[1]) == 2 ) {",
          "69:         fprintf(stderr, \"-c  client certificate will not be checked\\n\");",
          "70:         fprintf(stderr, \"-s  client certificate will be signed automatically\\n\");",
          "73:         exit(0);",
          "74:       } else {",
          "75:         fprintf(stderr, \"unknown flag %s\\n\", argv[1]);",
          "",
          "[Removed Lines]",
          "71:         printf(stderr, \"-d  turn on debug output\\n\");",
          "72:           printf(stderr, \"-0  SGXWalletServer will be launched on http (not https)\\n\");",
          "",
          "[Added Lines]",
          "71:         fprintf(stderr, \"-d  turn on debug output\\n\");",
          "72:         fprintf(stderr, \"-0  SGXWalletServer will be launched on http (not https)\\n\");",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "747: TEST_CASE(\"BLS_DKG test\", \"[bls_dkg]\") {",
          "748:   is_sgx_https = 0;",
          "749:   std::cerr<< \"test started\" << std::endl;",
          "750:   init_all(false, false);",
          "751:   cerr << \"Server inited\" << endl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "749:   DEBUG_PRINT = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1066: }",
          "1068: TEST_CASE(\"ecdsa API test\", \"[ecdsa_api_test]\") {",
          "1070:   is_sgx_https = 0;",
          "1072:   cerr << \"ecdsa_api_test started\" << endl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1070:   DEBUG_PRINT = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1110: }",
          "1112: TEST_CASE(\"dkg API test\", \"[dkg_api_test]\") {",
          "1114:   is_sgx_https = 0;",
          "1116:   cerr << \"dkg_api_test started\" << endl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1114:   DEBUG_PRINT = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "755819aec39cf2990d9364914498e7bb0bf9d177",
      "candidate_info": {
        "commit_hash": "755819aec39cf2990d9364914498e7bb0bf9d177",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/755819aec39cf2990d9364914498e7bb0bf9d177",
        "files": [
          "SGXException.h",
          "ServerInit.cpp",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "Seal/unseal fails",
        "before_after_code_files": [
          "SGXException.h||SGXException.h",
          "ServerInit.cpp||ServerInit.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "SGXException.h||SGXException.h": [
          "File: SGXException.h -> SGXException.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     SGXException(int32_t _status, const char* _errString) : status(_status), errString(_errString) {}",
          "39: };",
          "41: #endif //SGXD_RPCEXCEPTION_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     std::string getMessage() {",
          "40:         return \"SGXException:status:\" + std::to_string(status) + \":\" + errString;",
          "41:     }",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #include \"CSRManagerServer.h\"",
          "55: #include \"BLSCrypto.h\"",
          "56: #include \"ServerInit.h\"",
          "57: #include \"SGXWalletServer.hpp\"",
          "59: void initUserSpace() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #include \"SGXException.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:     spdlog::info(\"Enclave libtgmp library and logging initialized successfully\");",
          "105: }",
          "125:     }",
          "",
          "[Removed Lines]",
          "107: void initAll(uint32_t  _logLevel, bool _checkCert, bool _autoSign) {",
          "109:     static atomic<int> sgxServerInited(0);",
          "111:     cout << \"Running sgxwallet version:\" << SGXWalletServer::getVersion() << endl;",
          "113:     CHECK_STATE(sgxServerInited != 1)",
          "114:     sgxServerInited = 1;",
          "115:     initEnclave(_logLevel);",
          "116:     initUserSpace();",
          "117:     initSEK();",
          "119:     if (useHTTPS) {",
          "120:         SGXWalletServer::initHttpsServer(_checkCert);",
          "121:         SGXRegistrationServer::initRegistrationServer(_autoSign);",
          "122:         CSRManagerServer::initCSRManagerServer();",
          "123:     } else {",
          "124:         SGXWalletServer::initHttpServer();",
          "126: }",
          "",
          "[Added Lines]",
          "109: void initAll(uint32_t _logLevel, bool _checkCert, bool _autoSign) {",
          "111:     static atomic<bool> sgxServerInited(false);",
          "112:     static mutex initMutex;",
          "114:     lock_guard <mutex> lock(initMutex);",
          "116:     if (sgxServerInited)",
          "117:         return;",
          "119:     try {",
          "121:         cout << \"Running sgxwallet version:\" << SGXWalletServer::getVersion() << endl;",
          "123:         CHECK_STATE(sgxServerInited != 1)",
          "124:         sgxServerInited = 1;",
          "125:         initEnclave(_logLevel);",
          "126:         initUserSpace();",
          "127:         initSEK();",
          "129:         if (useHTTPS) {",
          "130:             SGXWalletServer::initHttpsServer(_checkCert);",
          "131:             SGXRegistrationServer::initRegistrationServer(_autoSign);",
          "132:             CSRManagerServer::initCSRManagerServer();",
          "133:         } else {",
          "134:             SGXWalletServer::initHttpServer();",
          "135:         }",
          "136:         sgxServerInited = true;",
          "137:     } catch (SGXException &_e) {",
          "138:         spdlog::error(_e.getMessage());",
          "139:     } catch (exception &_e) {",
          "140:         spdlog::error(_e.what());",
          "142:     catch (...) {",
          "143:         exception_ptr p = current_exception();",
          "144:         printf(\"Exception %s \\n\", p.__cxa_exception_type()->name());",
          "145:         spdlog::error(\"Unknown exception\");",
          "146:     }",
          "147: };",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:     SAFE_CHAR_BUF(errS, BUF_LEN);",
          "",
          "[Removed Lines]",
          "232:     sprintf(errS, \"status $d\", status);",
          "234:     LOG_ERROR(errS);",
          "236:     CHECK_STATUS(\"seal/unseal SEK failed after SEK generation in unseal\");",
          "",
          "[Added Lines]",
          "232:     return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b7165fb89feaa318de41a035eb575f68465c8fe",
      "candidate_info": {
        "commit_hash": "6b7165fb89feaa318de41a035eb575f68465c8fe",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/6b7165fb89feaa318de41a035eb575f68465c8fe",
        "files": [
          "BLSCrypto.cpp",
          "DKGCrypto.cpp",
          "ECDSACrypto.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-2454-add-logs-to-enclave",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:     }",
          "268:     sgx_status_t status =",
          "270:                                  sz, xStrArg, yStrArg, signature);",
          "",
          "[Removed Lines]",
          "269:             trustedBlsSignMessage_aes(eid, &errStatus, errMsg, encryptedKey,",
          "",
          "[Added Lines]",
          "269:             trustedBlsSignMessageAES(eid, &errStatus, errMsg, encryptedKey,",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:     if (!encryptKeys)",
          "301:         trustedCreateBlsKey(eid, &errStatus, errMsg, s_shares, encr_key, decKeyLen, encr_bls_key, &enc_bls_len);",
          "302:     else",
          "305:     if (errStatus != 0) {",
          "",
          "[Removed Lines]",
          "303:         trustedCreateBlsKey_aes(eid, &errStatus, errMsg, s_shares, encr_key, decKeyLen, encr_bls_key, &enc_bls_len);",
          "",
          "[Added Lines]",
          "303:         trustedCreateBlsKeyAES(eid, &errStatus, errMsg, s_shares, encr_key, decKeyLen, encr_bls_key, &enc_bls_len);",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     if (!encryptKeys)",
          "55:         status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y);",
          "56:     else",
          "59:     if (status != SGX_SUCCESS || errStatus != 0) {",
          "60:         spdlog::error(\"RPCException thrown with status {}\", status);",
          "",
          "[Removed Lines]",
          "57:         status = trustedGenerateEcdsaKey_aes(eid, &errStatus, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y);",
          "",
          "[Added Lines]",
          "57:         status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:     if (!encryptKeys)",
          "117:         status = trustedGetPublicEcdsaKey(eid, &errStatus, errMsg.data(), encrPrKey.data(), enc_len, pubKeyX.data(),",
          "118:                 pubKeyY.data());",
          "120:             errMsg.data(), encrPrKey.data(), enc_len, pubKeyX.data(), pubKeyY.data());",
          "121:     if (errStatus != 0) {",
          "122:         throw SGXException(-666, errMsg.data());",
          "",
          "[Removed Lines]",
          "119:     else status = trustedGetPublicEcdsaKey_aes(eid, &errStatus,",
          "",
          "[Added Lines]",
          "119:     else status = trustedGetPublicEcdsaKeyAES(eid, &errStatus,",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "998: }",
          "1001:                             uint8_t *encrypted_key, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "1003:     domain_parameters curve = domain_parameters_init();",
          "",
          "[Removed Lines]",
          "1000: void trustedGenerateEcdsaKey_aes(int *errStatus, char *err_string,",
          "",
          "[Added Lines]",
          "1000: void trustedGenerateEcdsaKeyAES(int *errStatus, char *err_string,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1069:     point_clear(Pkey);",
          "1070: }",
          "1073:                               uint8_t *encrypted_key, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
          "1075:     domain_parameters curve = domain_parameters_init();",
          "",
          "[Removed Lines]",
          "1072: void trustedGetPublicEcdsaKey_aes(int *errStatus, char *err_string,",
          "",
          "[Added Lines]",
          "1072: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *err_string,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1316: }",
          "1319:                           uint32_t enc_len, char *_hashX,",
          "1320:                           char *_hashY, char *signature) {",
          "",
          "[Removed Lines]",
          "1318: void trustedBlsSignMessage_aes(int *errStatus, char *err_string, uint8_t *encrypted_key,",
          "",
          "[Added Lines]",
          "1318: void trustedBlsSignMessageAES(int *errStatus, char *err_string, uint8_t *encrypted_key,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1431:     uint32_t enc_len;",
          "1434:     if (*errStatus != 0) {",
          "1435:         return;",
          "1436:     }",
          "",
          "[Removed Lines]",
          "1433:     trustedGenerateEcdsaKey_aes(errStatus, err_string, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "[Added Lines]",
          "1433:     trustedGenerateEcdsaKeyAES(errStatus, err_string, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1588: }",
          "1591:                         uint8_t *encrypted_key, uint64_t key_len, uint8_t *encr_bls_key, uint32_t *enc_bls_key_len) {",
          "1593:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "1590: void trustedCreateBlsKey_aes(int *errStatus, char *err_string, const char *s_shares,",
          "",
          "[Added Lines]",
          "1590: void trustedCreateBlsKeyAES(int *errStatus, char *err_string, const char *s_shares,",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:                                 [user_check] uint32_t *enc_len,",
          "186:                                 [in, count = 65] const char* SEK_hex);",
          "189:                                 [user_check] int *errStatus,",
          "190:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "191:                                 [out, count = ECDSA_ENCR_LEN] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "188:                 public void trustedGenerateEcdsaKey_aes (",
          "",
          "[Added Lines]",
          "188:                 public void trustedGenerateEcdsaKeyAES (",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
          "194:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "197:                                 [user_check] int *errStatus,",
          "198:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "199:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "196:                 public void trustedGetPublicEcdsaKey_aes(",
          "",
          "[Added Lines]",
          "196:                 public void trustedGetPublicEcdsaKeyAES(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280:                           [user_check] int* result);",
          "284:                         [user_check]int *errStatus,",
          "285:                         [out, count = SMALL_BUF_SIZE] char* err_string,",
          "286:                         [in, count = 6145] const char* s_shares,",
          "",
          "[Removed Lines]",
          "283:                 public void trustedCreateBlsKey_aes(",
          "",
          "[Added Lines]",
          "283:                 public void trustedCreateBlsKeyAES(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "289:                         [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
          "290:                         [user_check] uint32_t *enc_bls_key_len);",
          "293:                         [user_check] int *errStatus,",
          "294:                         [out, count = SMALL_BUF_SIZE] char* err_string,",
          "295:                         [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "292:                 public void trustedBlsSignMessage_aes (",
          "",
          "[Added Lines]",
          "292:                 public void trustedBlsSignMessageAES (",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c8f00d49f1a154b401461f2e1e561ec257bba55",
      "candidate_info": {
        "commit_hash": "4c8f00d49f1a154b401461f2e1e561ec257bba55",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/4c8f00d49f1a154b401461f2e1e561ec257bba55",
        "files": [
          "ECDSACrypto.cpp",
          "ECDSACrypto.h",
          "Makefile.am",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/signature.c",
          "testw.cpp"
        ],
        "message": "SKALE-XXXX Make randomizers work in enclave",
        "before_after_code_files": [
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "ECDSACrypto.h||ECDSACrypto.h",
          "Makefile.am||Makefile.am",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/signature.c||secure_enclave/signature.c",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"ECDSACrypto.h\"",
          "6: #include \"sgxwallet.h\"",
          "8: char* gen_ecdsa_key(){",
          "9:   char *errMsg = (char *)calloc(1024, 1);",
          "10:   int err_status = 0;",
          "11:   char* encr_pr_key = (char *)calloc(1024, 1);",
          "12:   char *pub_key_x = (char *)calloc(1024, 1);",
          "13:   char *pub_key_y = (char *)calloc(1024, 1);",
          "14:   uint32_t enc_len = 0;",
          "16:   status = generate_ecdsa_key(eid, &err_status, errMsg, (uint8_t*)encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "18:   return encr_pr_key;",
          "19: }",
          "21: std::vector<std::string> ecdsa_sign_hash(const char* encryptedKey, const char* hashHex){",
          "22:   std::vector<std::string> signature_vect(3);",
          "24:   char *errMsg = (char *)calloc(1024, 1);",
          "25:   int err_status = 0;",
          "26:   char* signature_r = (char*)malloc(1024);",
          "27:   char* signature_s = (char*)malloc(1024);",
          "28:   char* signature_v = (char*)calloc(4,1);",
          "29:   uint32_t dec_len = 0;",
          "31:   status = ecdsa_sign1(eid, &err_status, errMsg, (uint8_t*)encryptedKey, dec_len, (unsigned char*)hashHex, signature_r, signature_s, signature_v );",
          "33:   signature_vect.at(0) = signature_v;",
          "34:   signature_vect.at(1) = \"0x\" + std::string(signature_r);",
          "35:   signature_vect.at(2) = \"0x\" + std::string(signature_s);",
          "37:   return signature_vect;",
          "38: }",
          "",
          "---------------"
        ],
        "ECDSACrypto.h||ECDSACrypto.h": [
          "File: ECDSACrypto.h -> ECDSACrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #ifndef SGXD_ECDSACRYPTO_H",
          "6: #define SGXD_ECDSACRYPTO_H",
          "8: #include <vector>",
          "9: #include <string>",
          "14: #define EXTERNC extern \"C\"",
          "15: #else",
          "16: #define EXTERNC",
          "19: char* gen_ecdsa_key();",
          "21: std::vector<std::string> ecdsa_sign_hash(const char* encryptedKey, const char* hashHex);",
          "23: #endif //SGXD_ECDSACRYPTO_H",
          "",
          "---------------"
        ],
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: COMMON_SRC = sgx_stub.c sgx_detect_linux.c create_enclave.c oc_alloc.c",
          "66: COMMON_ENCLAVE_SRC = secure_enclave_u.c secure_enclave_u.h",
          "70: nodist_sgxwallet_SOURCES = $(COMMON_ENCLAVE_SRC)",
          "71: EXTRA_sgxwallet_DEPENDENCIES = secure_enclave.signed.so",
          "",
          "[Removed Lines]",
          "68: sgxwallet_SOURCES = sgxwallet.c SGXWalletServer.cpp RPCException.cpp  BLSCrypto.cpp ServerInit.cpp BLSPrivateKeyShareSGX.cpp LevelDB.cpp $(COMMON_SRC)",
          "",
          "[Added Lines]",
          "68: sgxwallet_SOURCES = sgxwallet.c SGXWalletServer.cpp RPCException.cpp  BLSCrypto.cpp ECDSACrypto.cpp ServerInit.cpp BLSPrivateKeyShareSGX.cpp LevelDB.cpp $(COMMON_SRC)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: sgxwallet_LDADD=-l$(SGX_URTS_LIB) -Lleveldb/build -LlibBLS/build  -LlibBLS/build/libff/libff -l:libbls.a -l:libleveldb.a -l:libff.a -lgmp -ldl -l:libsgx_capable.a -l:libsgx_tprotected_fs.a   -ljsonrpccpp-stub -lpthread -ljsonrpccpp-common -ljsonrpccpp-server -ljsoncpp -lprocps intel-sgx-ssl/Linux/package/lib64/libsgx_usgxssl.a",
          "94: nodist_testw_SOURCES=${nodist_sgxwallet_SOURCES}",
          "95: EXTRA_testw_DEPENDENCIES=${EXTRA_sgxwallet_DEPENDENCIES}",
          "96: testw_LDADD= ${sgxwallet_LDADD}",
          "",
          "[Removed Lines]",
          "93: testw_SOURCES=testw.cpp SGXWalletServer.cpp  RPCException.cpp BLSCrypto.cpp ServerInit.cpp LevelDB.cpp BLSPrivateKeyShareSGX.cpp $(COMMON_SRC)",
          "",
          "[Added Lines]",
          "93: testw_SOURCES=testw.cpp SGXWalletServer.cpp  RPCException.cpp BLSCrypto.cpp ServerInit.cpp LevelDB.cpp BLSPrivateKeyShareSGX.cpp ECDSACrypto.cpp $(COMMON_SRC)",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include \"RPCException.h\"",
          "24: #include \"LevelDB.h\"",
          "25: #include \"BLSCrypto.h\"",
          "26: #include \"SGXWalletServer.h\"",
          "27: #include \"SGXWalletServer.hpp\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include \"ECDSACrypto.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137: Json::Value generateECDSAKeyImpl(const std::string &_keyName) {",
          "140:     Json::Value result;",
          "141:     result[\"status\"] = 0;",
          "142:     result[\"errorMessage\"] = \"\";",
          "143:     result[\"encryptedKey\"] = \"\";",
          "147:     try {",
          "149:     } catch (RPCException &_e) {",
          "150:         result[\"status\"] = _e.status;",
          "151:         result[\"errorMessage\"] = _e.errString;",
          "152:     }",
          "154:     return result;",
          "155: }",
          "",
          "[Removed Lines]",
          "148:         writeECDSAKey(_keyName, \"\");",
          "",
          "[Added Lines]",
          "145:     char* encryptedKey = nullptr;",
          "149:         if (encryptedKey == nullptr) {",
          "150:             throw RPCException(UNKNOWN_ERROR, \"\");",
          "153:         writeECDSAKey(_keyName, encryptedKey);",
          "159:     result[\"encryptedKey\"] = encryptedKey;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:     Json::Value result;",
          "160:     result[\"status\"] = 0;",
          "161:     result[\"errorMessage\"] = \"\";",
          "165:     try {",
          "167:     } catch (RPCException &_e) {",
          "168:         result[\"status\"] = _e.status;",
          "169:         result[\"errorMessage\"] = _e.errString;",
          "170:     }",
          "172:     return result;",
          "173: }",
          "",
          "[Removed Lines]",
          "162:     result[\"signature\"] = \"\";",
          "166:         readECDSAKey(_keyName);",
          "",
          "[Added Lines]",
          "169:     result[\"signature_v\"] = \"\";",
          "170:     result[\"signature_r\"] = \"\";",
          "171:     result[\"signature_s\"] = \"\";",
          "173:     std::vector<std::string> sign_vect;",
          "177:        std::shared_ptr<std::string> key_ptr = readECDSAKey(_keyName);",
          "178:        sign_vect = ecdsa_sign_hash ((*key_ptr).c_str(), messageHash.c_str());",
          "184:     result[\"signature_v\"] = sign_vect.at(0);",
          "185:     result[\"signature_r\"] = sign_vect.at(1);",
          "186:     result[\"signature_s\"] = sign_vect.at(2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "230:     levelDb->writeString(key, value);",
          "231: }",
          "236: }",
          "240: }",
          "",
          "[Removed Lines]",
          "233: shared_ptr <std::string> readECDSAKey(const string &_keyShare) {",
          "234:     return nullptr;",
          "238: void writeECDSAKey(const string &_keyShare, const string &value) {",
          "",
          "[Added Lines]",
          "249: shared_ptr <std::string> readECDSAKey(const string &_keyName) {",
          "250:   auto keyStr = levelDb->readString(\"ECDSAKEY::\" + _keyName);",
          "252:   if (keyStr == nullptr) {",
          "253:     throw RPCException(KEY_SHARE_DOES_NOT_EXIST, \"Key share with this name does not exists\");",
          "254:   }",
          "256:   return keyStr;",
          "259: void writeECDSAKey(const string &_keyName, const string &value) {",
          "260:     Json::Value val;",
          "261:     Json::FastWriter writer;",
          "263:     val[\"value\"] = value;",
          "264:     std::string json = writer.write(val);",
          "266:     auto key = \"ECDSAKEY:\" + _keyName;",
          "268:     if (levelDb->readString(_keyName) != nullptr) {",
          "269:         throw new RPCException(KEY_SHARE_DOES_NOT_EXIST, \"Key with this name already exists\");",
          "270:     }",
          "272:     levelDb->writeString(key, value);",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: shared_ptr<std::string> readKeyShare(const string& _keyShare);",
          "38: shared_ptr<std::string> readECDSAKey(const string& _key);",
          "",
          "[Removed Lines]",
          "36: void writeECDSAKey(const string& _key, const string& value);",
          "",
          "[Added Lines]",
          "36: void writeECDSAKey(const string& _keyName, const string& value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: Json::Value blsSignMessageHashImpl(const std::string& keyShareName, const std::string& messageHash);",
          "43: Json::Value importECDSAKeyImpl(const std::string& key, const std::string& keyName);",
          "44: Json::Value generateECDSAKeyImpl(const std::string& keyName);",
          "",
          "[Removed Lines]",
          "45: Json::Value ecdsaSignMessageHashImpl(const std::string& keyShareName, const std::string& messageHash);",
          "",
          "[Added Lines]",
          "45: Json::Value ecdsaSignMessageHashImpl(const std::string& keyName, const std::string& messageHash);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   domain_parameters curve = domain_parameters_init();",
          "135:   domain_parameters_load_curve(curve, secp256k1);",
          "137:   mpz_t skey;",
          "138:   mpz_init(skey);",
          "142:   point Pkey = point_init();",
          "149:   signature_generate_key(Pkey, skey, curve);",
          "151:   int len = mpz_sizeinbase (Pkey->x, 10) + 2;",
          "153:   char arr_x[len];",
          "154:   char* px = mpz_get_str(arr_x, 10, Pkey->x);",
          "156:   strncpy(pub_key_x, arr_x, 1024);",
          "",
          "[Removed Lines]",
          "144:   gmp_randstate_t state;",
          "145:   gmp_randinit_mt(state);",
          "147:   mpz_urandomm(skey, state, curve->p);",
          "155:   snprintf(err_string, BUF_LEN, \"arr=%p px=%p\\n\", arr_x, px);",
          "",
          "[Added Lines]",
          "137:   unsigned char* rand_char = (unsigned char*)malloc(32);",
          "138:   sgx_read_rand( (unsigned char*)rand_char, 32);",
          "140:   mpz_t seed;",
          "141:   mpz_init(seed);",
          "142:   mpz_import(seed, 32, 1, sizeof(rand_char[0]), 0, 0, rand_char);",
          "144:   free(rand_char);",
          "148:   mpz_mod(skey, seed, curve->p);",
          "149:   mpz_clear(seed);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:   char skey_str[mpz_sizeinbase (skey, 10) + 2];",
          "164:   char* s  = mpz_get_str(skey_str, 10, skey);",
          "167:   uint32_t sealedLen = sgx_calc_sealed_data_size(0, 39);",
          "",
          "[Removed Lines]",
          "165:   snprintf(err_string, BUF_LEN, \"skey is %s\\n\", skey_str);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:   mpz_clear(skey);",
          "179:   domain_parameters_clear(curve);",
          "180:   point_clear(Pkey);",
          "181: }",
          "",
          "[Removed Lines]",
          "178:   gmp_randclear(state);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378:   domain_parameters curve = domain_parameters_init();",
          "379:   domain_parameters_load_curve(curve, secp256k1);",
          "383:   sgx_status_t status = sgx_unseal_data(",
          "384:       (const sgx_sealed_data_t *)encrypted_key, NULL, 0, skey, &dec_len);",
          "",
          "[Removed Lines]",
          "381:   char skey[2*SGX_ECP256_KEY_SIZE];",
          "",
          "[Added Lines]",
          "388:   char skey[SGX_ECP256_KEY_SIZE];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "439:   int r_gr_n = mpz_cmp(sign->r, curve->n);",
          "442:     sig_v[3] = 'c';",
          "443:   }",
          "444:   else if (mpz_sgn(rem) > 0 && r_gr_n > 0){",
          "",
          "[Removed Lines]",
          "441:   if (mpz_sgn(rem) > 0 && r_gr_n < 0){",
          "",
          "[Added Lines]",
          "448:   if (mpz_sgn(rem) && r_gr_n < 0){",
          "",
          "---------------"
        ],
        "secure_enclave/signature.c||secure_enclave/signature.c": [
          "File: secure_enclave/signature.c -> secure_enclave/signature.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:  mpz_t t3;mpz_init(t3);",
          "87:  mpz_t s;mpz_init(s);",
          "89:  gmp_randstate_t r_state;",
          "91:  signature_sign_start:",
          "103:  point_multiplication(Q, k, curve->G, curve);",
          "",
          "[Removed Lines]",
          "94:  gmp_randinit_default(r_state);",
          "96:     unsigned long seed;",
          "97:     gmp_randseed_ui(r_state, seed);",
          "98:  mpz_sub_ui(t1, curve->n, 2);",
          "99:  mpz_urandomm(k , r_state , t1);",
          "100:  gmp_randclear(r_state);",
          "",
          "[Added Lines]",
          "89:         unsigned char* rand_char = (unsigned char*)malloc(32);",
          "90:         sgx_read_rand( rand_char, 32);",
          "97:         sgx_read_rand( rand_char, 32);",
          "98:         mpz_t seed;",
          "99:         mpz_init(seed);",
          "100:         mpz_import(seed, 32, 1, sizeof(rand_char[0]), 0, 0, rand_char);",
          "101:         free(rand_char);",
          "103:         mpz_mod(k, seed, curve->p);",
          "104:         mpz_clear(seed);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:   status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "383:   REQUIRE(status == SGX_SUCCESS);",
          "385:   printf(\"\\npub_key_x %s: \\n\", pub_key_x);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382:   printf(\"\\nerrMsg %s\\n\", errMsg );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "389:     printf(\"%u \", encr_pr_key[i]);",
          "391:   char* hex = \"38433e5ce087dcc1be82fcc834eae83c256b3db87d34f84440d0b708daa0c6f7\";",
          "394:   char* signature_v = (char*)calloc(4,1);",
          "",
          "[Removed Lines]",
          "392:   char* signature_r = (char*)malloc(1024);",
          "393:   char* signature_s = (char*)malloc(1024);",
          "",
          "[Added Lines]",
          "392:   char* signature_r = (char *)calloc(1024, 1);",
          "393:   char* signature_s = (char *)calloc(1024, 1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}