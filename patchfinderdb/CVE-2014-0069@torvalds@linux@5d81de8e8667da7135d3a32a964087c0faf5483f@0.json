{
  "cve_id": "CVE-2014-0069",
  "cve_desc": "The cifs_iovec_write function in fs/cifs/file.c in the Linux kernel through 3.13.5 does not properly handle uncached write operations that copy fewer than the requested number of bytes, which allows local users to obtain sensitive information from kernel memory, cause a denial of service (memory corruption and system crash), or possibly gain privileges via a writev system call with a crafted pointer.",
  "repo": "torvalds/linux",
  "patch_hash": "5d81de8e8667da7135d3a32a964087c0faf5483f",
  "patch_info": {
    "commit_hash": "5d81de8e8667da7135d3a32a964087c0faf5483f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/5d81de8e8667da7135d3a32a964087c0faf5483f",
    "files": [
      "fs/cifs/file.c"
    ],
    "message": "cifs: ensure that uncached writes handle unmapped areas correctly\n\nIt's possible for userland to pass down an iovec via writev() that has a\nbogus user pointer in it. If that happens and we're doing an uncached\nwrite, then we can end up getting less bytes than we expect from the\ncall to iov_iter_copy_from_user. This is CVE-2014-0069\n\ncifs_iovec_write isn't set up to handle that situation however. It'll\nblindly keep chugging through the page array and not filling those pages\nwith anything useful. Worse yet, we'll later end up with a negative\nnumber in wdata->tailsz, which will confuse the sending routines and\ncause an oops at the very least.\n\nFix this by having the copy phase of cifs_iovec_write stop copying data\nin this situation and send the last write as a short one. At the same\ntime, we want to avoid sending a zero-length write to the server, so\nbreak out of the loop and set rc to -EFAULT if that happens. This also\nallows us to handle the case where no address in the iovec is valid.\n\n[Note: Marking this for stable on v3.4+ kernels, but kernels as old as\n       v2.6.38 may have a similar problem and may need similar fix]\n\nCc: <stable@vger.kernel.org> # v3.4+\nReviewed-by: Pavel Shilovsky <piastry@etersoft.ru>\nReported-by: Al Viro <viro@zeniv.linux.org.uk>\nSigned-off-by: Jeff Layton <jlayton@redhat.com>\nSigned-off-by: Steve French <smfrench@gmail.com>",
    "before_after_code_files": [
      "fs/cifs/file.c||fs/cifs/file.c"
    ]
  },
  "patch_diff": {
    "fs/cifs/file.c||fs/cifs/file.c": [
      "File: fs/cifs/file.c -> fs/cifs/file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2389:    unsigned long nr_segs, loff_t *poffset)",
      "2390: {",
      "2391:  unsigned long nr_pages, i;",
      "2393:  ssize_t total_written = 0;",
      "2394:  loff_t offset;",
      "2395:  struct iov_iter it;",
      "",
      "[Removed Lines]",
      "2392:  size_t copied, len, cur_len;",
      "",
      "[Added Lines]",
      "2392:  size_t bytes, copied, len, cur_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2445:   save_len = cur_len;",
      "2446:   for (i = 0; i < nr_pages; i++) {",
      "2448:    copied = iov_iter_copy_from_user(wdata->pages[i], &it,",
      "2450:    cur_len -= copied;",
      "2451:    iov_iter_advance(&it, copied);",
      "2452:   }",
      "2453:   cur_len = save_len - cur_len;",
      "2455:   wdata->sync_mode = WB_SYNC_ALL;",
      "2456:   wdata->nr_pages = nr_pages;",
      "2457:   wdata->offset = (__u64)offset;",
      "",
      "[Removed Lines]",
      "2447:    copied = min_t(const size_t, cur_len, PAGE_SIZE);",
      "2449:         0, copied);",
      "",
      "[Added Lines]",
      "2447:    bytes = min_t(const size_t, cur_len, PAGE_SIZE);",
      "2449:         0, bytes);",
      "2459:    if (copied < bytes)",
      "2460:     break;",
      "2470:   if (!cur_len) {",
      "2471:    for (i = 0; i < nr_pages; i++)",
      "2472:     put_page(wdata->pages[i]);",
      "2473:    kfree(wdata);",
      "2474:    rc = -EFAULT;",
      "2475:    break;",
      "2476:   }",
      "2483:   for ( ; nr_pages > i + 1; nr_pages--)",
      "2484:    put_page(wdata->pages[nr_pages - 1]);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "66386c08be5d1a2eefc1f7ab8c008561b6c811e5",
      "candidate_info": {
        "commit_hash": "66386c08be5d1a2eefc1f7ab8c008561b6c811e5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/66386c08be5d1a2eefc1f7ab8c008561b6c811e5",
        "files": [
          "fs/cifs/file.c"
        ],
        "message": "CIFS: Separate filling pages from iovec write\n\nReviewed-by: Shirish Pargaonkar <spargaonkar@suse.com>\nSigned-off-by: Pavel Shilovsky <pshilovsky@samba.org>\nSigned-off-by: Steve French <smfrench@gmail.com>",
        "before_after_code_files": [
          "fs/cifs/file.c||fs/cifs/file.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/cifs/file.c||fs/cifs/file.c"
          ],
          "candidate": [
            "fs/cifs/file.c||fs/cifs/file.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/cifs/file.c||fs/cifs/file.c": [
          "File: fs/cifs/file.c -> fs/cifs/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2423:  return rc;",
          "2424: }",
          "2426: static ssize_t",
          "2427: cifs_iovec_write(struct file *file, struct iov_iter *from, loff_t *poffset)",
          "2428: {",
          "2431:  ssize_t total_written = 0;",
          "2432:  loff_t offset;",
          "2433:  struct cifsFileInfo *open_file;",
          "",
          "[Removed Lines]",
          "2429:  unsigned long nr_pages, i;",
          "2430:  size_t bytes, copied, len, cur_len;",
          "",
          "[Added Lines]",
          "2426: static int",
          "2427: wdata_fill_from_iovec(struct cifs_writedata *wdata, struct iov_iter *from,",
          "2428:         size_t *len, unsigned long *num_pages)",
          "2429: {",
          "2430:  size_t save_len, copied, bytes, cur_len = *len;",
          "2431:  unsigned long i, nr_pages = *num_pages;",
          "2433:  save_len = cur_len;",
          "2434:  for (i = 0; i < nr_pages; i++) {",
          "2435:   bytes = min_t(const size_t, cur_len, PAGE_SIZE);",
          "2436:   copied = copy_page_from_iter(wdata->pages[i], 0, bytes, from);",
          "2437:   cur_len -= copied;",
          "2445:   if (copied < bytes)",
          "2446:    break;",
          "2447:  }",
          "2448:  cur_len = save_len - cur_len;",
          "2457:  if (!cur_len)",
          "2458:   return -EFAULT;",
          "2465:  return 0;",
          "2466: }",
          "2471:  unsigned long nr_pages, num_pages, i;",
          "2472:  size_t len, cur_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2464:   pid = current->tgid;",
          "2466:  do {",
          "2469:   nr_pages = get_numpages(cifs_sb->wsize, len, &cur_len);",
          "2470:   wdata = cifs_writedata_alloc(nr_pages,",
          "2471:           cifs_uncached_writev_complete);",
          "",
          "[Removed Lines]",
          "2467:   size_t save_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2480:    break;",
          "2481:   }",
          "2508:    for (i = 0; i < nr_pages; i++)",
          "2509:     put_page(wdata->pages[i]);",
          "2510:    kfree(wdata);",
          "2512:    break;",
          "2513:   }",
          "2521:    put_page(wdata->pages[nr_pages - 1]);",
          "2523:   wdata->sync_mode = WB_SYNC_ALL;",
          "",
          "[Removed Lines]",
          "2483:   save_len = cur_len;",
          "2484:   for (i = 0; i < nr_pages; i++) {",
          "2485:    bytes = min_t(size_t, cur_len, PAGE_SIZE);",
          "2486:    copied = copy_page_from_iter(wdata->pages[i], 0, bytes,",
          "2487:            from);",
          "2488:    cur_len -= copied;",
          "2496:    if (copied < bytes)",
          "2497:     break;",
          "2498:   }",
          "2499:   cur_len = save_len - cur_len;",
          "2507:   if (!cur_len) {",
          "2511:    rc = -EFAULT;",
          "2520:   for ( ; nr_pages > i + 1; nr_pages--)",
          "",
          "[Added Lines]",
          "2523:   num_pages = nr_pages;",
          "2524:   rc = wdata_fill_from_iovec(wdata, from, &cur_len, &num_pages);",
          "2525:   if (rc) {",
          "2536:   for ( ; nr_pages > num_pages; nr_pages--)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43de94eadf0ceda54509335343bdc1349a2c5ab3",
      "candidate_info": {
        "commit_hash": "43de94eadf0ceda54509335343bdc1349a2c5ab3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/43de94eadf0ceda54509335343bdc1349a2c5ab3",
        "files": [
          "fs/cifs/file.c"
        ],
        "message": "CIFS: Separate writing from iovec write\n\nReviewed-by: Shirish Pargaonkar <spargaonkar@suse.com>\nSigned-off-by: Pavel Shilovsky <pshilovsky@samba.org>\nSigned-off-by: Steve French <smfrench@gmail.com>",
        "before_after_code_files": [
          "fs/cifs/file.c||fs/cifs/file.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/cifs/file.c||fs/cifs/file.c"
          ],
          "candidate": [
            "fs/cifs/file.c||fs/cifs/file.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/cifs/file.c||fs/cifs/file.c": [
          "File: fs/cifs/file.c -> fs/cifs/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2465:  return 0;",
          "2466: }",
          "2470: {",
          "2471:  unsigned long nr_pages, num_pages, i;",
          "2481:  pid_t pid;",
          "2503:  if (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD)",
          "2504:   pid = open_file->pid;",
          "2505:  else",
          "",
          "[Removed Lines]",
          "2468: static ssize_t",
          "2469: cifs_iovec_write(struct file *file, struct iov_iter *from, loff_t *poffset)",
          "2472:  size_t len, cur_len;",
          "2473:  ssize_t total_written = 0;",
          "2474:  loff_t offset;",
          "2475:  struct cifsFileInfo *open_file;",
          "2476:  struct cifs_tcon *tcon;",
          "2477:  struct cifs_sb_info *cifs_sb;",
          "2478:  struct cifs_writedata *wdata, *tmp;",
          "2479:  struct list_head wdata_list;",
          "2480:  int rc;",
          "2483:  len = iov_iter_count(from);",
          "2484:  rc = generic_write_checks(file, poffset, &len, 0);",
          "2485:  if (rc)",
          "2486:   return rc;",
          "2488:  if (!len)",
          "2489:   return 0;",
          "2491:  iov_iter_truncate(from, len);",
          "2493:  INIT_LIST_HEAD(&wdata_list);",
          "2494:  cifs_sb = CIFS_SB(file->f_path.dentry->d_sb);",
          "2495:  open_file = file->private_data;",
          "2496:  tcon = tlink_tcon(open_file->tlink);",
          "2498:  if (!tcon->ses->server->ops->async_writev)",
          "2499:   return -ENOSYS;",
          "2501:  offset = *poffset;",
          "",
          "[Added Lines]",
          "2468: static int",
          "2469: cifs_write_from_iter(loff_t offset, size_t len, struct iov_iter *from,",
          "2470:        struct cifsFileInfo *open_file,",
          "2471:        struct cifs_sb_info *cifs_sb, struct list_head *wdata_list)",
          "2473:  int rc = 0;",
          "2474:  size_t cur_len;",
          "2476:  struct cifs_writedata *wdata;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2551:    break;",
          "2552:   }",
          "2555:   offset += cur_len;",
          "2556:   len -= cur_len;",
          "2557:  } while (len > 0);",
          "",
          "[Removed Lines]",
          "2554:   list_add_tail(&wdata->list, &wdata_list);",
          "",
          "[Added Lines]",
          "2530:   list_add_tail(&wdata->list, wdata_list);",
          "2535:  return rc;",
          "2536: }",
          "2538: static ssize_t",
          "2539: cifs_iovec_write(struct file *file, struct iov_iter *from, loff_t *poffset)",
          "2540: {",
          "2541:  size_t len;",
          "2542:  ssize_t total_written = 0;",
          "2543:  struct cifsFileInfo *open_file;",
          "2544:  struct cifs_tcon *tcon;",
          "2545:  struct cifs_sb_info *cifs_sb;",
          "2546:  struct cifs_writedata *wdata, *tmp;",
          "2547:  struct list_head wdata_list;",
          "2548:  int rc;",
          "2550:  len = iov_iter_count(from);",
          "2551:  rc = generic_write_checks(file, poffset, &len, 0);",
          "2552:  if (rc)",
          "2553:   return rc;",
          "2555:  if (!len)",
          "2556:   return 0;",
          "2558:  iov_iter_truncate(from, len);",
          "2560:  INIT_LIST_HEAD(&wdata_list);",
          "2561:  cifs_sb = CIFS_SB(file->f_path.dentry->d_sb);",
          "2562:  open_file = file->private_data;",
          "2563:  tcon = tlink_tcon(open_file->tlink);",
          "2565:  if (!tcon->ses->server->ops->async_writev)",
          "2566:   return -ENOSYS;",
          "2568:  rc = cifs_write_from_iter(*poffset, len, from, open_file, cifs_sb,",
          "2569:       &wdata_list);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7c24607b5d68a4cdc56e09d70a3c8bae5f0519f",
      "candidate_info": {
        "commit_hash": "e7c24607b5d68a4cdc56e09d70a3c8bae5f0519f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e7c24607b5d68a4cdc56e09d70a3c8bae5f0519f",
        "files": [
          "fs/ceph/file.c",
          "fs/cifs/file.c",
          "include/linux/uio.h",
          "mm/iov_iter.c",
          "mm/process_vm_access.c"
        ],
        "message": "kill iov_iter_copy_from_user()\n\nall callers can use copy_page_from_iter() and it actually simplifies\nthem.\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
        "before_after_code_files": [
          "fs/ceph/file.c||fs/ceph/file.c",
          "fs/cifs/file.c||fs/cifs/file.c",
          "include/linux/uio.h||include/linux/uio.h",
          "mm/iov_iter.c||mm/iov_iter.c",
          "mm/process_vm_access.c||mm/process_vm_access.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/cifs/file.c||fs/cifs/file.c"
          ],
          "candidate": [
            "fs/cifs/file.c||fs/cifs/file.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ceph/file.c||fs/ceph/file.c": [
          "File: fs/ceph/file.c -> fs/ceph/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:   left = len;",
          "738:   for (n = 0; n < num_pages; n++) {",
          "739:    size_t plen = min_t(size_t, left, PAGE_SIZE);",
          "741:    if (ret != plen) {",
          "742:     ret = -EFAULT;",
          "743:     break;",
          "744:    }",
          "745:    left -= ret;",
          "747:   }",
          "749:   if (ret < 0) {",
          "",
          "[Removed Lines]",
          "740:    ret = iov_iter_copy_from_user(pages[n], &i, 0, plen);",
          "746:    iov_iter_advance(&i, ret);",
          "",
          "[Added Lines]",
          "740:    ret = copy_page_from_iter(pages[n], 0, plen, &i);",
          "",
          "---------------"
        ],
        "fs/cifs/file.c||fs/cifs/file.c": [
          "File: fs/cifs/file.c -> fs/cifs/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2445:   save_len = cur_len;",
          "2446:   for (i = 0; i < nr_pages; i++) {",
          "2450:    cur_len -= copied;",
          "",
          "[Removed Lines]",
          "2447:    bytes = min_t(const size_t, cur_len, PAGE_SIZE);",
          "2448:    copied = iov_iter_copy_from_user(wdata->pages[i], &it,",
          "2449:         0, bytes);",
          "2451:    iov_iter_advance(&it, copied);",
          "",
          "[Added Lines]",
          "2447:    bytes = min_t(size_t, cur_len, PAGE_SIZE);",
          "2448:    copied = copy_page_from_iter(wdata->pages[i], 0, bytes,",
          "2449:            &it);",
          "",
          "---------------"
        ],
        "include/linux/uio.h||include/linux/uio.h": [
          "File: include/linux/uio.h -> include/linux/uio.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: size_t iov_iter_copy_from_user_atomic(struct page *page,",
          "64:   struct iov_iter *i, unsigned long offset, size_t bytes);",
          "67: void iov_iter_advance(struct iov_iter *i, size_t bytes);",
          "68: int iov_iter_fault_in_readable(struct iov_iter *i, size_t bytes);",
          "69: size_t iov_iter_single_seg_count(const struct iov_iter *i);",
          "",
          "[Removed Lines]",
          "65: size_t iov_iter_copy_from_user(struct page *page,",
          "66:   struct iov_iter *i, unsigned long offset, size_t bytes);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mm/iov_iter.c||mm/iov_iter.c": [
          "File: mm/iov_iter.c -> mm/iov_iter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129: }",
          "130: EXPORT_SYMBOL(iov_iter_copy_from_user_atomic);",
          "159: void iov_iter_advance(struct iov_iter *i, size_t bytes)",
          "160: {",
          "161:  BUG_ON(i->count < bytes);",
          "",
          "[Removed Lines]",
          "138: size_t iov_iter_copy_from_user(struct page *page,",
          "139:   struct iov_iter *i, unsigned long offset, size_t bytes)",
          "140: {",
          "141:  char *kaddr;",
          "142:  size_t copied;",
          "144:  kaddr = kmap(page);",
          "145:  if (likely(i->nr_segs == 1)) {",
          "146:   int left;",
          "147:   char __user *buf = i->iov->iov_base + i->iov_offset;",
          "148:   left = __copy_from_user(kaddr + offset, buf, bytes);",
          "149:   copied = bytes - left;",
          "150:  } else {",
          "151:   copied = __iovec_copy_from_user_inatomic(kaddr + offset,",
          "152:       i->iov, i->iov_offset, bytes);",
          "153:  }",
          "154:  kunmap(page);",
          "155:  return copied;",
          "156: }",
          "157: EXPORT_SYMBOL(iov_iter_copy_from_user);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mm/process_vm_access.c||mm/process_vm_access.c": [
          "File: mm/process_vm_access.c -> mm/process_vm_access.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:    copy = len;",
          "48:   if (vm_write) {",
          "54:    set_page_dirty_lock(page);",
          "55:   } else {",
          "56:    copied = copy_page_to_iter(page, offset, copy, iter);",
          "",
          "[Removed Lines]",
          "49:    if (copy > iov_iter_count(iter))",
          "50:     copy = iov_iter_count(iter);",
          "51:    copied = iov_iter_copy_from_user(page, iter,",
          "52:      offset, copy);",
          "53:    iov_iter_advance(iter, copied);",
          "",
          "[Added Lines]",
          "49:    copied = copy_page_from_iter(page, offset, copy, iter);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3dae8750c368f8ac11c3c8c2a28f56dcee865c01",
      "candidate_info": {
        "commit_hash": "3dae8750c368f8ac11c3c8c2a28f56dcee865c01",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3dae8750c368f8ac11c3c8c2a28f56dcee865c01",
        "files": [
          "fs/cifs/cifsfs.c",
          "fs/cifs/cifsfs.h",
          "fs/cifs/file.c"
        ],
        "message": "cifs: switch to ->write_iter()\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
        "before_after_code_files": [
          "fs/cifs/cifsfs.c||fs/cifs/cifsfs.c",
          "fs/cifs/cifsfs.h||fs/cifs/cifsfs.h",
          "fs/cifs/file.c||fs/cifs/file.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/cifs/file.c||fs/cifs/file.c"
          ],
          "candidate": [
            "fs/cifs/file.c||fs/cifs/file.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/cifs/cifsfs.c||fs/cifs/cifsfs.c": [
          "File: fs/cifs/cifsfs.c -> fs/cifs/cifsfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "733:  goto out;",
          "734: }",
          "738: {",
          "739:  struct inode *inode = file_inode(iocb->ki_filp);",
          "740:  struct cifsInodeInfo *cinode = CIFS_I(inode);",
          "",
          "[Removed Lines]",
          "736: static ssize_t cifs_file_aio_write(struct kiocb *iocb, const struct iovec *iov,",
          "737:        unsigned long nr_segs, loff_t pos)",
          "",
          "[Added Lines]",
          "736: static ssize_t cifs_file_write_iter(struct kiocb *iocb, struct iov_iter *from)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "745:  if (written)",
          "746:   return written;",
          "750:  if (CIFS_CACHE_WRITE(CIFS_I(inode)))",
          "751:   goto out;",
          "753:  rc = filemap_fdatawrite(inode->i_mapping);",
          "754:  if (rc)",
          "756:     rc, inode);",
          "758: out:",
          "",
          "[Removed Lines]",
          "748:  written = generic_file_aio_write(iocb, iov, nr_segs, pos);",
          "755:   cifs_dbg(FYI, \"cifs_file_aio_write: %d rc on %p inode\\n\",",
          "",
          "[Added Lines]",
          "747:  written = generic_file_write_iter(iocb, from);",
          "754:   cifs_dbg(FYI, \"cifs_file_write_iter: %d rc on %p inode\\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "890: const struct file_operations cifs_file_ops = {",
          "891:  .read = new_sync_read,",
          "893:  .read_iter = generic_file_read_iter,",
          "895:  .open = cifs_open,",
          "896:  .release = cifs_close,",
          "897:  .lock = cifs_lock,",
          "",
          "[Removed Lines]",
          "892:  .write = do_sync_write,",
          "894:  .aio_write = cifs_file_aio_write,",
          "",
          "[Added Lines]",
          "891:  .write = new_sync_write,",
          "893:  .write_iter = cifs_file_write_iter,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "909: const struct file_operations cifs_file_strict_ops = {",
          "910:  .read = new_sync_read,",
          "912:  .read_iter = cifs_strict_readv,",
          "914:  .open = cifs_open,",
          "915:  .release = cifs_close,",
          "916:  .lock = cifs_lock,",
          "",
          "[Removed Lines]",
          "911:  .write = do_sync_write,",
          "913:  .aio_write = cifs_strict_writev,",
          "",
          "[Added Lines]",
          "910:  .write = new_sync_write,",
          "912:  .write_iter = cifs_strict_writev,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "928: const struct file_operations cifs_file_direct_ops = {",
          "930:  .read = new_sync_read,",
          "932:  .read_iter = cifs_user_readv,",
          "934:  .open = cifs_open,",
          "935:  .release = cifs_close,",
          "936:  .lock = cifs_lock,",
          "",
          "[Removed Lines]",
          "931:  .write = do_sync_write,",
          "933:  .aio_write = cifs_user_writev,",
          "",
          "[Added Lines]",
          "930:  .write = new_sync_write,",
          "932:  .write_iter = cifs_user_writev,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "948: const struct file_operations cifs_file_nobrl_ops = {",
          "949:  .read = new_sync_read,",
          "951:  .read_iter = generic_file_read_iter,",
          "953:  .open = cifs_open,",
          "954:  .release = cifs_close,",
          "955:  .fsync = cifs_fsync,",
          "",
          "[Removed Lines]",
          "950:  .write = do_sync_write,",
          "952:  .aio_write = cifs_file_aio_write,",
          "",
          "[Added Lines]",
          "949:  .write = new_sync_write,",
          "951:  .write_iter = cifs_file_write_iter,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "966: const struct file_operations cifs_file_strict_nobrl_ops = {",
          "967:  .read = new_sync_read,",
          "969:  .read_iter = cifs_strict_readv,",
          "971:  .open = cifs_open,",
          "972:  .release = cifs_close,",
          "973:  .fsync = cifs_strict_fsync,",
          "",
          "[Removed Lines]",
          "968:  .write = do_sync_write,",
          "970:  .aio_write = cifs_strict_writev,",
          "",
          "[Added Lines]",
          "967:  .write = new_sync_write,",
          "969:  .write_iter = cifs_strict_writev,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "984: const struct file_operations cifs_file_direct_nobrl_ops = {",
          "986:  .read = new_sync_read,",
          "988:  .read_iter = cifs_user_readv,",
          "990:  .open = cifs_open,",
          "991:  .release = cifs_close,",
          "992:  .fsync = cifs_fsync,",
          "",
          "[Removed Lines]",
          "987:  .write = do_sync_write,",
          "989:  .aio_write = cifs_user_writev,",
          "",
          "[Added Lines]",
          "986:  .write = new_sync_write,",
          "988:  .write_iter = cifs_user_writev,",
          "",
          "---------------"
        ],
        "fs/cifs/cifsfs.h||fs/cifs/cifsfs.h": [
          "File: fs/cifs/cifsfs.h -> fs/cifs/cifsfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: extern int cifs_closedir(struct inode *inode, struct file *file);",
          "88: extern ssize_t cifs_user_readv(struct kiocb *iocb, struct iov_iter *to);",
          "89: extern ssize_t cifs_strict_readv(struct kiocb *iocb, struct iov_iter *to);",
          "94: extern int cifs_lock(struct file *, int, struct file_lock *);",
          "95: extern int cifs_fsync(struct file *, loff_t, loff_t, int);",
          "96: extern int cifs_strict_fsync(struct file *, loff_t, loff_t, int);",
          "",
          "[Removed Lines]",
          "90: extern ssize_t cifs_user_writev(struct kiocb *iocb, const struct iovec *iov,",
          "91:     unsigned long nr_segs, loff_t pos);",
          "92: extern ssize_t cifs_strict_writev(struct kiocb *iocb, const struct iovec *iov,",
          "93:       unsigned long nr_segs, loff_t pos);",
          "",
          "[Added Lines]",
          "90: extern ssize_t cifs_user_writev(struct kiocb *iocb, struct iov_iter *from);",
          "91: extern ssize_t cifs_strict_writev(struct kiocb *iocb, struct iov_iter *from);",
          "",
          "---------------"
        ],
        "fs/cifs/file.c||fs/cifs/file.c": [
          "File: fs/cifs/file.c -> fs/cifs/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2385: }",
          "2387: static ssize_t",
          "2390: {",
          "2391:  unsigned long nr_pages, i;",
          "2392:  size_t bytes, copied, len, cur_len;",
          "2393:  ssize_t total_written = 0;",
          "2394:  loff_t offset;",
          "2396:  struct cifsFileInfo *open_file;",
          "2397:  struct cifs_tcon *tcon;",
          "2398:  struct cifs_sb_info *cifs_sb;",
          "",
          "[Removed Lines]",
          "2388: cifs_iovec_write(struct file *file, const struct iovec *iov,",
          "2389:    unsigned long nr_segs, loff_t *poffset)",
          "2395:  struct iov_iter it;",
          "",
          "[Added Lines]",
          "2388: cifs_iovec_write(struct file *file, struct iov_iter *from, loff_t *poffset)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2401:  int rc;",
          "2402:  pid_t pid;",
          "2408:  rc = generic_write_checks(file, poffset, &len, 0);",
          "2409:  if (rc)",
          "2410:   return rc;",
          "2412:  INIT_LIST_HEAD(&wdata_list);",
          "2413:  cifs_sb = CIFS_SB(file->f_path.dentry->d_sb);",
          "2414:  open_file = file->private_data;",
          "",
          "[Removed Lines]",
          "2404:  len = iov_length(iov, nr_segs);",
          "2405:  if (!len)",
          "2406:   return 0;",
          "",
          "[Added Lines]",
          "2402:  len = iov_iter_count(from);",
          "2407:  if (!len)",
          "2408:   return 0;",
          "2410:  iov_iter_truncate(from, len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2424:  else",
          "2425:   pid = current->tgid;",
          "2428:  do {",
          "2429:   size_t save_len;",
          "",
          "[Removed Lines]",
          "2427:  iov_iter_init(&it, WRITE, iov, nr_segs, len);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2446:   for (i = 0; i < nr_pages; i++) {",
          "2447:    bytes = min_t(size_t, cur_len, PAGE_SIZE);",
          "2448:    copied = copy_page_from_iter(wdata->pages[i], 0, bytes,",
          "2450:    cur_len -= copied;",
          "",
          "[Removed Lines]",
          "2449:            &it);",
          "",
          "[Added Lines]",
          "2448:            from);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2545:  return total_written ? total_written : (ssize_t)rc;",
          "2546: }",
          "2550: {",
          "2551:  ssize_t written;",
          "2552:  struct inode *inode;",
          "2554:  inode = file_inode(iocb->ki_filp);",
          "",
          "[Removed Lines]",
          "2548: ssize_t cifs_user_writev(struct kiocb *iocb, const struct iovec *iov,",
          "2549:     unsigned long nr_segs, loff_t pos)",
          "",
          "[Added Lines]",
          "2547: ssize_t cifs_user_writev(struct kiocb *iocb, struct iov_iter *from)",
          "2551:  loff_t pos = iocb->ki_pos;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2563:  if (written > 0) {",
          "2564:   CIFS_I(inode)->invalid_mapping = true;",
          "2565:   iocb->ki_pos = pos;",
          "",
          "[Removed Lines]",
          "2562:  written = cifs_iovec_write(iocb->ki_filp, iov, nr_segs, &pos);",
          "",
          "[Added Lines]",
          "2561:  written = cifs_iovec_write(iocb->ki_filp, from, &pos);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2569: }",
          "2571: static ssize_t",
          "2574: {",
          "2575:  struct file *file = iocb->ki_filp;",
          "2576:  struct cifsFileInfo *cfile = (struct cifsFileInfo *)file->private_data;",
          "",
          "[Removed Lines]",
          "2572: cifs_writev(struct kiocb *iocb, const struct iovec *iov,",
          "2573:      unsigned long nr_segs, loff_t pos)",
          "",
          "[Added Lines]",
          "2571: cifs_writev(struct kiocb *iocb, struct iov_iter *from)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2588:  mutex_lock(&inode->i_mutex);",
          "2589:  if (file->f_flags & O_APPEND)",
          "2590:   lock_pos = i_size_read(inode);",
          "2592:          server->vals->exclusive_lock_type, NULL,",
          "2593:          CIFS_WRITE_OP)) {",
          "2595:   mutex_unlock(&inode->i_mutex);",
          "2597:   if (rc > 0) {",
          "",
          "[Removed Lines]",
          "2591:  if (!cifs_find_lock_conflict(cfile, lock_pos, iov_length(iov, nr_segs),",
          "2594:   rc = __generic_file_aio_write(iocb, iov, nr_segs);",
          "",
          "[Added Lines]",
          "2589:  if (!cifs_find_lock_conflict(cfile, lock_pos, iov_iter_count(from),",
          "2592:   rc = __generic_file_write_iter(iocb, from);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2609: }",
          "2611: ssize_t",
          "2614: {",
          "2615:  struct inode *inode = file_inode(iocb->ki_filp);",
          "2616:  struct cifsInodeInfo *cinode = CIFS_I(inode);",
          "",
          "[Removed Lines]",
          "2612: cifs_strict_writev(struct kiocb *iocb, const struct iovec *iov,",
          "2613:      unsigned long nr_segs, loff_t pos)",
          "",
          "[Added Lines]",
          "2610: cifs_strict_writev(struct kiocb *iocb, struct iov_iter *from)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2628:   if (cap_unix(tcon->ses) &&",
          "2629:   (CIFS_UNIX_FCNTL_CAP & le64_to_cpu(tcon->fsUnixInfo.Capability))",
          "2630:     && ((cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOPOSIXBRL) == 0)) {",
          "2633:    goto out;",
          "2634:   }",
          "2636:   goto out;",
          "2637:  }",
          "",
          "[Removed Lines]",
          "2631:    written = generic_file_aio_write(",
          "2632:      iocb, iov, nr_segs, pos);",
          "2635:   written = cifs_writev(iocb, iov, nr_segs, pos);",
          "",
          "[Added Lines]",
          "2628:    written = generic_file_write_iter(iocb, from);",
          "2631:   written = cifs_writev(iocb, from);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2645:  if (written > 0 && CIFS_CACHE_READ(cinode)) {",
          "",
          "[Removed Lines]",
          "2644:  written = cifs_user_writev(iocb, iov, nr_segs, pos);",
          "",
          "[Added Lines]",
          "2640:  written = cifs_user_writev(iocb, from);",
          "",
          "---------------"
        ]
      }
    }
  ]
}