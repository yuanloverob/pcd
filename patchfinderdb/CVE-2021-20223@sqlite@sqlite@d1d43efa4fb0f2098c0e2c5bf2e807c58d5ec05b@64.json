{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "32d184e049b5a30d39b01be1b310c563ae716d23",
      "candidate_info": {
        "commit_hash": "32d184e049b5a30d39b01be1b310c563ae716d23",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/32d184e049b5a30d39b01be1b310c563ae716d23",
        "files": [
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Only register the fts3_tokenizer() function using a single text encoding.\n\nFossilOrigin-Name: 966964af1021feebc56cfda7b08bc787be7f447d682299f7958463aca30a73af",
        "before_after_code_files": [
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "481: ){",
          "482:   int rc = SQLITE_OK;",
          "483:   void *p = (void *)pHash;",
          "486: #ifdef SQLITE_TEST",
          "487:   char *zTest = 0;",
          "",
          "[Removed Lines]",
          "484:   const int any = SQLITE_ANY|SQLITE_DIRECTONLY;",
          "",
          "[Added Lines]",
          "484:   const int any = SQLITE_UTF8|SQLITE_DIRECTONLY;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: edbf911fdeda14bd63cd752f6237896400eb5a65ef486abe7b91433621d21b5c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fcce747e2a36ff3c8ad5dc0dcfed358522a269f",
      "candidate_info": {
        "commit_hash": "4fcce747e2a36ff3c8ad5dc0dcfed358522a269f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4fcce747e2a36ff3c8ad5dc0dcfed358522a269f",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem causing fts5 integrity-check failures if numeric values are inserted into a table within a utf-16 database. Fix for [752fdbf6].\n\nFossilOrigin-Name: bae060f382e4386c0793db4aa280fe9cd4893307d17a1801a17218ae4dc031c2",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5940:     int nIdxTerm = sqlite3_column_bytes(pStmt, 1);",
          "5942:     int iIdxLeaf = sqlite3_column_int(pStmt, 2);",
          "5943:     int bIdxDlidx = sqlite3_column_int(pStmt, 3);",
          "",
          "[Removed Lines]",
          "5941:     const char *zIdxTerm = (const char*)sqlite3_column_text(pStmt, 1);",
          "",
          "[Added Lines]",
          "5940:     const char *zIdxTerm = (const char*)sqlite3_column_blob(pStmt, 1);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "284: }",
          "286: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285: #-------------------------------------------------------------------------",
          "286: # Ticket [752fdbf6]",
          "287: #",
          "288: reset_db",
          "289: do_execsql_test 11.0 {",
          "290:   PRAGMA encoding = 'UTF-16';",
          "291:   CREATE VIRTUAL TABLE vt0 USING fts5(c0, c1);",
          "292:   INSERT INTO vt0(vt0, rank) VALUES('pgsz', '37');",
          "293:   INSERT INTO vt0(c0, c1) VALUES (0.66077, 1957391816);",
          "294: }",
          "295: do_execsql_test 11.1 {",
          "296:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "297: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b9c2005f0291d58d7f3bfd4a2286eb6563e9c9433519c3329035f325fc723445",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d8f892a31e750f3e7247c74e07acfd4cadba9e8",
      "candidate_info": {
        "commit_hash": "1d8f892a31e750f3e7247c74e07acfd4cadba9e8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1d8f892a31e750f3e7247c74e07acfd4cadba9e8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Optimization to sqlite3BeginWriteOperation().\n\nFossilOrigin-Name: 2173d4c6e3addc75964508f2fc8e42755376b3bc285286fa90df4831a6fa280b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1b4acd1ac4a8d24f8804c6d0770f5b0022f569d51742b6954b26e525f04d38ca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: ){",
          "57:   int i;",
          "58:   int nBytes;",
          "59:   TableLock *p;",
          "",
          "[Removed Lines]",
          "56:   Parse *pToplevel = sqlite3ParseToplevel(pParse);",
          "",
          "[Added Lines]",
          "56:   Parse *pToplevel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:   if( iDb==1 ) return;",
          "63:   if( !sqlite3BtreeSharable(pParse->db->aDb[iDb].pBt) ) return;",
          "64:   for(i=0; i<pToplevel->nTableLock; i++){",
          "65:     p = &pToplevel->aTableLock[i];",
          "66:     if( p->iDb==iDb && p->iTab==iTab ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   pToplevel = sqlite3ParseToplevel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4741:   assert( iDb<SQLITE_MAX_ATTACHED+2 );",
          "4743:   if( DbMaskTest(pToplevel->cookieMask, iDb)==0 ){",
          "4744:     DbMaskSet(pToplevel->cookieMask, iDb);",
          "4745:     if( !OMIT_TEMPDB && iDb==1 ){",
          "",
          "[Removed Lines]",
          "4736: void sqlite3CodeVerifySchema(Parse *pParse, int iDb){",
          "4737:   Parse *pToplevel = sqlite3ParseToplevel(pParse);",
          "4739:   assert( iDb>=0 && iDb<pParse->db->nDb );",
          "4740:   assert( pParse->db->aDb[iDb].pBt!=0 || iDb==1 );",
          "4742:   assert( sqlite3SchemaMutexHeld(pParse->db, iDb, 0) );",
          "",
          "[Added Lines]",
          "4737: static void sqlite3CodeVerifySchemaAtToplevel(Parse *pToplevel, int iDb){",
          "4738:   assert( iDb>=0 && iDb<pToplevel->db->nDb );",
          "4739:   assert( pToplevel->db->aDb[iDb].pBt!=0 || iDb==1 );",
          "4741:   assert( sqlite3SchemaMutexHeld(pToplevel->db, iDb, 0) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4747:     }",
          "4748:   }",
          "4749: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4749: void sqlite3CodeVerifySchema(Parse *pParse, int iDb){",
          "4750:   sqlite3CodeVerifySchemaAtToplevel(sqlite3ParseToplevel(pParse), iDb);",
          "4751: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4779: void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){",
          "4780:   Parse *pToplevel = sqlite3ParseToplevel(pParse);",
          "4782:   DbMaskSet(pToplevel->writeMask, iDb);",
          "4783:   pToplevel->isMultiWrite |= setStatement;",
          "4784: }",
          "",
          "[Removed Lines]",
          "4781:   sqlite3CodeVerifySchema(pParse, iDb);",
          "",
          "[Added Lines]",
          "4784:   sqlite3CodeVerifySchemaAtToplevel(pToplevel, iDb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8875b9e7b5d699fac33171f7bafa32c7adb62dbf",
      "candidate_info": {
        "commit_hash": "8875b9e7b5d699fac33171f7bafa32c7adb62dbf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8875b9e7b5d699fac33171f7bafa32c7adb62dbf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/pager.c",
          "src/pager.h",
          "src/sqlite.h.in",
          "src/sqliteInt.h"
        ],
        "message": "Rearchitect the way in which filenames are stored in the Pager object so that the sqlite3_uri_parameter() interface will work from journal and WAL filenames too.  This check-in implements the central idea, and compile and runs somewhat, but crashes on an extended test.\n\nFossilOrigin-Name: 2ae77bd2335708343bce4541b4d2cf16edfe3fd5bc2dfb93757238c926aa960b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/pager.c||src/pager.c",
          "src/pager.h||src/pager.h",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0a500da6aa659a8e73206e6d22ddbf2da5e4f1d1d551eeb66433163a3e13109d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4274: const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){",
          "4275:   if( zFilename==0 || zParam==0 ) return 0;",
          "4282:   }",
          "4283:   return 0;",
          "4284: }",
          "",
          "[Removed Lines]",
          "4276:   zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4277:   while( zFilename[0] ){",
          "4278:     int x = strcmp(zFilename, zParam);",
          "4279:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4280:     if( x==0 ) return zFilename;",
          "4281:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "",
          "[Added Lines]",
          "4275:   const Pager *pPager;",
          "4276:   const char *z;",
          "4278:   pPager = sqlite3PagerFromFilename(zFilename);",
          "4279:   assert( pPager!=0 );",
          "4280:   z = sqlite3PagerQueryParameters(pPager);",
          "4281:   while( z[0] ){",
          "4282:     int x = strcmp(z, zParam);",
          "4283:     z += sqlite3Strlen30(z) + 1;",
          "4284:     if( x==0 ) return z;",
          "4285:     z += sqlite3Strlen30(z) + 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4308:   return bDflt;",
          "4309: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4325: const char *sqlite3_filename_database(const char *zFilename){",
          "4326:   const Pager *pPager = sqlite3PagerFromFilename(zFilename);",
          "4327:   assert( pPager!=0 );",
          "4328:   return sqlite3PagerFilename(pPager, 0);",
          "4329: }",
          "4330: const char *sqlite3_filename_journal(const char *zFilename){",
          "4331:   const Pager *pPager = sqlite3PagerFromFilename(zFilename);",
          "4332:   assert( pPager!=0 );",
          "4333:   return sqlite3PagerJournalFilename(pPager);",
          "4334: }",
          "4335: const char *sqlite3_filename_wal(const char *zFilename){",
          "4336:   const Pager *pPager = sqlite3PagerFromFilename(zFilename);",
          "4337:   assert( pPager!=0 );",
          "4338:   return sqlite3PagerWalFilename(pPager);",
          "4339: }",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4844:   pPtr = (u8 *)sqlite3MallocZero(",
          "4851: #ifndef SQLITE_OMIT_WAL",
          "4853: #endif",
          "4854:   );",
          "4855:   assert( EIGHT_BYTE_ALIGNMENT(SQLITE_INT_TO_PTR(journalFileSize)) );",
          "4856:   if( !pPtr ){",
          "4857:     sqlite3DbFree(0, zPathname);",
          "4858:     return SQLITE_NOMEM_BKPT;",
          "4859:   }",
          "4866:   assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );",
          "4877: #ifndef SQLITE_OMIT_WAL",
          "4883: #endif",
          "4888:   pPager->pVfs = pVfs;",
          "4889:   pPager->vfsFlags = vfsFlags;",
          "",
          "[Removed Lines]",
          "4860:   pPager =              (Pager*)(pPtr);",
          "4861:   pPager->pPCache =    (PCache*)(pPtr += ROUND8(sizeof(*pPager)));",
          "4862:   pPager->fd =   (sqlite3_file*)(pPtr += ROUND8(pcacheSize));",
          "4863:   pPager->sjfd = (sqlite3_file*)(pPtr += ROUND8(pVfs->szOsFile));",
          "4864:   pPager->jfd =  (sqlite3_file*)(pPtr += journalFileSize);",
          "4865:   pPager->zFilename =    (char*)(pPtr += journalFileSize);",
          "4869:   if( zPathname ){",
          "4870:     assert( nPathname>0 );",
          "4871:     memcpy(pPager->zFilename, zPathname, nPathname);",
          "4872:     if( nUri ) memcpy(&pPager->zFilename[nPathname+1], zUri, nUriByte);",
          "4873:     pPager->zJournal =   (char*)(pPtr += nPathname + 1 + nUriByte);",
          "4874:     memcpy(pPager->zJournal, zPathname, nPathname);",
          "4875:     memcpy(&pPager->zJournal[nPathname], \"-journal\", 8);",
          "4876:     sqlite3FileSuffix3(pPager->zFilename, pPager->zJournal);",
          "4878:     pPager->zWal = (char*)(pPtr += nPathname + 8 + 2);",
          "4879:     memcpy(pPager->zWal, zPathname, nPathname);",
          "4880:     memcpy(&pPager->zWal[nPathname], \"-wal\", 4);",
          "4881:     sqlite3FileSuffix3(pPager->zFilename, pPager->zWal);",
          "4882:     assert( sqlite3UriCount(pPager->zWal)==0 );",
          "4884:     assert( sqlite3UriCount(pPager->zFilename)==nUri );",
          "4885:     assert( sqlite3UriCount(pPager->zJournal)==0 );",
          "4886:     sqlite3DbFree(0, zPathname);",
          "4887:   }",
          "",
          "[Added Lines]",
          "4865:     0",
          "4872:   pPager = (Pager*)pPtr;                  pPtr += ROUND8(sizeof(*pPager));",
          "4873:   pPager->pPCache = (PCache*)pPtr;        pPtr += ROUND8(pcacheSize);",
          "4874:   pPager->fd = (sqlite3_file*)pPtr;       pPtr += ROUND8(pVfs->szOsFile);",
          "4875:   pPager->sjfd = (sqlite3_file*)pPtr;     pPtr += journalFileSize;",
          "4876:   pPager->jfd =  (sqlite3_file*)pPtr;     pPtr += journalFileSize;",
          "4880:   assert( EIGHT_BYTE_ALIGNMENT(pPtr) );",
          "4881:   memcpy(pPtr, &pPager, sizeof(pPager));  pPtr += sizeof(pPager);",
          "4882:   pPager->zFilename = (char*)pPtr;",
          "4883:   if( nPathname==0 ) zPathname = \"\";",
          "4884:   memcpy(pPtr, zPathname, nPathname);",
          "4885:   pPager->zQueryParam = pPager->zFilename + nPathname + 1;",
          "4886:   if( zUri ) memcpy(pPager->zQueryParam, zUri, nUriByte);",
          "4887:   assert( nUriByte>=1 );",
          "4888:   assert( nUriByte >= nUri*3 + 1 );",
          "4889:   pPtr += ROUND8(nPathname + 1 + nUriByte);",
          "4893:   assert( EIGHT_BYTE_ALIGNMENT(pPtr) );",
          "4894:   memcpy(pPtr, &pPager, sizeof(pPager));  pPtr += sizeof(pPager);",
          "4895:   pPager->zWal = (char*)pPtr;",
          "4896:   memcpy(pPtr, zPathname, nPathname);",
          "4897:   memcpy(pPtr+nPathname, \"-wal\", 4);      pPtr += ROUND8(nPathname + 4 + 2);",
          "4901:   assert( EIGHT_BYTE_ALIGNMENT(pPtr) );",
          "4902:   memcpy(pPtr, &pPager, sizeof(pPager));  pPtr += sizeof(pPager);",
          "4903:   pPager->zJournal = (char*)pPtr;",
          "4904:   memcpy(pPtr, zPathname, nPathname);",
          "4907:   if( nPathname ) sqlite3DbFree(0, zPathname);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4933:         }",
          "4934: #endif",
          "4935:       }",
          "4937:       if( (iDc & SQLITE_IOCAP_IMMUTABLE)!=0",
          "4939:           vfsFlags |= SQLITE_OPEN_READONLY;",
          "4940:           goto act_like_temp_file;",
          "4941:       }",
          "",
          "[Removed Lines]",
          "4936:       pPager->noLock = sqlite3_uri_boolean(zFilename, \"nolock\", 0);",
          "4938:        || sqlite3_uri_boolean(zFilename, \"immutable\", 0) ){",
          "",
          "[Added Lines]",
          "4956:       pPager->noLock = sqlite3_uri_boolean(pPager->zFilename, \"nolock\", 0);",
          "4958:        || sqlite3_uri_boolean(pPager->zFilename, \"immutable\", 0) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7003:   return (nullIfMemDb && pPager->memDb) ? \"\" : pPager->zFilename;",
          "7004: }",
          "",
          "[Removed Lines]",
          "7002: const char *sqlite3PagerFilename(Pager *pPager, int nullIfMemDb){",
          "",
          "[Added Lines]",
          "7022: const char *sqlite3PagerFilename(const Pager *pPager, int nullIfMemDb){",
          "7029: const char *sqlite3PagerJournalFilename(const Pager *pPager){",
          "7030:   assert( pPager!=0 );",
          "7031:   return pPager->zJournal;",
          "7032: }",
          "7033: #ifndef SQLITE_OMIT_WAL",
          "7034: const char *sqlite3PagerWalFilename(const Pager *pPager){",
          "7035:   assert( pPager!=0 );",
          "7036:   return pPager->zWal;",
          "7037: }",
          "7048: const char *sqlite3PagerQueryParameters(const Pager *pPager){",
          "7049:   assert( pPager!=0 );",
          "7050:   return pPager->zQueryParam;",
          "7051: }",
          "7058: const Pager *sqlite3PagerFromFilename(const char *zFilename){",
          "7059:   const Pager **pp = (const Pager**)zFilename;",
          "7060:   pp--;",
          "7061:   assert( (*pp)->zFilename==zFilename",
          "7062:        || (*pp)->zJournal==zFilename",
          "7063:        || (*pp)->zWal==zFilename );",
          "7064:   return *pp;",
          "7065: }",
          "",
          "---------------"
        ],
        "src/pager.h||src/pager.h": [
          "File: src/pager.h -> src/pager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:   int sqlite3PagerRefcount(Pager*);",
          "204: #endif",
          "205: int sqlite3PagerMemUsed(Pager*);",
          "207: sqlite3_vfs *sqlite3PagerVfs(Pager*);",
          "208: sqlite3_file *sqlite3PagerFile(Pager*);",
          "209: sqlite3_file *sqlite3PagerJrnlFile(Pager*);",
          "",
          "[Removed Lines]",
          "206: const char *sqlite3PagerFilename(Pager*, int);",
          "",
          "[Added Lines]",
          "206: const char *sqlite3PagerFilename(const Pager*, int);",
          "207: const char *sqlite3PagerWalFilename(const Pager*);",
          "208: const char *sqlite3PagerJournalFilename(const Pager*);",
          "209: const char *sqlite3PagerQueryParameters(const Pager*);",
          "210: const Pager *sqlite3PagerFromFilename(const char*);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3536: int sqlite3_uri_boolean(const char *zFile, const char *zParam, int bDefault);",
          "3537: sqlite3_int64 sqlite3_uri_int64(const char*, const char*, sqlite3_int64);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3562: const char *sqlite3_filename_database(const char*);",
          "3563: const char *sqlite3_filename_journal(const char*);",
          "3564: const char *sqlite3_filename_wal(const char*);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4108: void sqlite3AddCollateType(Parse*, Token*);",
          "4109: void sqlite3AddGenerated(Parse*,Expr*,Token*);",
          "4110: void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);",
          "4114: int sqlite3ParseUri(const char*,const char*,unsigned int*,",
          "4115:                     sqlite3_vfs**,char**,char **);",
          "4116: #ifdef SQLITE_HAS_CODEC",
          "",
          "[Removed Lines]",
          "4111: #ifdef SQLITE_DEBUG",
          "4112:   int sqlite3UriCount(const char*);",
          "4113: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf7909734a351c68f852a0ecb11f1c41738e96bf",
      "candidate_info": {
        "commit_hash": "bf7909734a351c68f852a0ecb11f1c41738e96bf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bf7909734a351c68f852a0ecb11f1c41738e96bf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/prepare.c",
          "src/select.c",
          "src/sqliteInt.h",
          "test/window1.test"
        ],
        "message": "AggInfo objects might be referenced even after the sqlite3Select() function that created them has exited.  So AggInfo cannot be a stack variable.  And it must not be freed until the Parse object is destroyed.\n\nFossilOrigin-Name: 3c840b4df306e2db1da08673e9ede973b4cb6d2b3f9eeeab5835e39452ee3056",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/prepare.c||src/prepare.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7682d8a768fbccfe0cc956e9f6481637146e1ab9763b248ff11052761ce32e32",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5730:     int iAgg = pExpr->iAgg;",
          "5731:     Parse *pParse = pWalker->pParse;",
          "5732:     sqlite3 *db = pParse->db;",
          "5734:     assert( pExpr->op==TK_COLUMN || pExpr->op==TK_AGG_COLUMN",
          "5735:             || pExpr->op==TK_FUNCTION || pExpr->op==TK_AGG_FUNCTION );",
          "5736:     if( pExpr->op==TK_COLUMN || pExpr->op==TK_AGG_COLUMN ){",
          "",
          "[Removed Lines]",
          "5733:     assert( pAggInfo->iAggMagic==AggInfoMagic );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:   return i;",
          "531: }",
          "536: void sqlite3ParserReset(Parse *pParse){",
          "537:   sqlite3 *db = pParse->db;",
          "538:   sqlite3DbFree(db, pParse->aLabel);",
          "539:   sqlite3ExprListDelete(db, pParse->pConstExpr);",
          "540:   if( db ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536: static void agginfoFree(sqlite3 *db, AggInfo *p){",
          "537:   sqlite3DbFree(db, p->aCol);",
          "538:   sqlite3DbFree(db, p->aFunc);",
          "539:   sqlite3DbFree(db, p);",
          "540: }",
          "547:   AggInfo *pThis = pParse->pAggList;",
          "548:   while( pThis ){",
          "549:     AggInfo *pNext = pThis->pNext;",
          "550:     agginfoFree(db, pThis);",
          "551:     pThis = pNext;",
          "552:   }",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5767:     return 1;",
          "5768:   }",
          "5769:   if( sqlite3AuthCheck(pParse, SQLITE_SELECT, 0, 0, 0) ) return 1;",
          "5774: #if SELECTTRACE_ENABLED",
          "5775:   SELECTTRACE(1,pParse,p, (\"begin processing:\\n\", pParse->addrExplain));",
          "5776:   if( sqlite3SelectTrace & 0x100 ){",
          "",
          "[Removed Lines]",
          "5770:   memset(&sAggInfo, 0, sizeof(sAggInfo));",
          "5771: #ifdef SQLITE_DEBUG",
          "5772:   sAggInfo.iAggMagic = AggInfoMagic;",
          "5773: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5923:     }",
          "5924: #endif",
          "5925:     if( p->pNext==0 ) ExplainQueryPlanPop(pParse);",
          "5927:     return rc;",
          "5928:   }",
          "5929: #endif",
          "",
          "[Removed Lines]",
          "5926:     assert( sAggInfo.nFunc==0 && sAggInfo.nColumn==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6364:     memset(&sNC, 0, sizeof(sNC));",
          "6365:     sNC.pParse = pParse;",
          "6366:     sNC.pSrcList = pTabList;",
          "6368:     VVA_ONLY( sNC.ncFlags = NC_UAggInfo; )",
          "6372:     sqlite3ExprAnalyzeAggList(&sNC, pEList);",
          "6373:     sqlite3ExprAnalyzeAggList(&sNC, sSort.pOrderBy);",
          "6374:     if( pHaving ){",
          "",
          "[Removed Lines]",
          "6367:     sNC.uNC.pAggInfo = &sAggInfo;",
          "6369:     sAggInfo.mnReg = pParse->nMem+1;",
          "6370:     sAggInfo.nSortingColumn = pGroupBy ? pGroupBy->nExpr : 0;",
          "6371:     sAggInfo.pGroupBy = pGroupBy;",
          "",
          "[Added Lines]",
          "6359:     pAggInfo = sqlite3DbMallocZero(db, sizeof(*pAggInfo) );",
          "6360:     if( pAggInfo==0 ){",
          "6361:       goto select_end;",
          "6362:     }",
          "6363:     pAggInfo->pNext = pParse->pAggList;",
          "6364:     pParse->pAggList = pAggInfo;",
          "6368:     sNC.uNC.pAggInfo = pAggInfo;",
          "6370:     pAggInfo->mnReg = pParse->nMem+1;",
          "6371:     pAggInfo->nSortingColumn = pGroupBy ? pGroupBy->nExpr : 0;",
          "6372:     pAggInfo->pGroupBy = pGroupBy;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6381:       }",
          "6382:       sqlite3ExprAnalyzeAggregates(&sNC, pHaving);",
          "6383:     }",
          "6387:     }else{",
          "6388:       minMaxFlag = WHERE_ORDERBY_NORMAL;",
          "6389:     }",
          "6392:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "6393:       sNC.ncFlags |= NC_InAggFunc;",
          "6394:       sqlite3ExprAnalyzeAggList(&sNC, pExpr->x.pList);",
          "",
          "[Removed Lines]",
          "6384:     sAggInfo.nAccumulator = sAggInfo.nColumn;",
          "6385:     if( p->pGroupBy==0 && p->pHaving==0 && sAggInfo.nFunc==1 ){",
          "6386:       minMaxFlag = minMaxQuery(db, sAggInfo.aFunc[0].pExpr, &pMinMaxOrderBy);",
          "6390:     for(i=0; i<sAggInfo.nFunc; i++){",
          "6391:       Expr *pExpr = sAggInfo.aFunc[i].pExpr;",
          "",
          "[Added Lines]",
          "6385:     pAggInfo->nAccumulator = pAggInfo->nColumn;",
          "6386:     if( p->pGroupBy==0 && p->pHaving==0 && pAggInfo->nFunc==1 ){",
          "6387:       minMaxFlag = minMaxQuery(db, pAggInfo->aFunc[0].pExpr, &pMinMaxOrderBy);",
          "6391:     for(i=0; i<pAggInfo->nFunc; i++){",
          "6392:       Expr *pExpr = pAggInfo->aFunc[i].pExpr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6400: #endif",
          "6401:       sNC.ncFlags &= ~NC_InAggFunc;",
          "6402:     }",
          "6404:     if( db->mallocFailed ) goto select_end;",
          "6405: #if SELECTTRACE_ENABLED",
          "6406:     if( sqlite3SelectTrace & 0x400 ){",
          "6407:       int ii;",
          "6409:       sqlite3TreeViewSelect(0, p, 0);",
          "6411:         sqlite3DebugPrintf(\"agg-column[%d] iMem=%d\\n\",",
          "6414:       }",
          "6416:         sqlite3DebugPrintf(\"agg-func[%d]: iMem=%d\\n\",",
          "6419:       }",
          "6420:     }",
          "6421: #endif",
          "",
          "[Removed Lines]",
          "6403:     sAggInfo.mxReg = pParse->nMem;",
          "6408:       SELECTTRACE(0x400,pParse,p,(\"After aggregate analysis %p:\\n\", &sAggInfo));",
          "6410:       for(ii=0; ii<sAggInfo.nColumn; ii++){",
          "6412:             ii, sAggInfo.aCol[ii].iMem);",
          "6413:         sqlite3TreeViewExpr(0, sAggInfo.aCol[ii].pExpr, 0);",
          "6415:       for(ii=0; ii<sAggInfo.nFunc; ii++){",
          "6417:             ii, sAggInfo.aFunc[ii].iMem);",
          "6418:         sqlite3TreeViewExpr(0, sAggInfo.aFunc[ii].pExpr, 0);",
          "",
          "[Added Lines]",
          "6404:     pAggInfo->mxReg = pParse->nMem;",
          "6409:       SELECTTRACE(0x400,pParse,p,(\"After aggregate analysis %p:\\n\", pAggInfo));",
          "6411:       for(ii=0; ii<pAggInfo->nColumn; ii++){",
          "6413:             ii, pAggInfo->aCol[ii].iMem);",
          "6414:         sqlite3TreeViewExpr(0, pAggInfo->aCol[ii].pExpr, 0);",
          "6416:       for(ii=0; ii<pAggInfo->nFunc; ii++){",
          "6418:             ii, pAggInfo->aFunc[ii].iMem);",
          "6419:         sqlite3TreeViewExpr(0, pAggInfo->aFunc[ii].pExpr, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6445:       addrSortingIdx = sqlite3VdbeAddOp4(v, OP_SorterOpen,",
          "6447:           0, (char*)pKeyInfo, P4_KEYINFO);",
          "",
          "[Removed Lines]",
          "6443:       sAggInfo.sortingIdx = pParse->nTab++;",
          "6444:       pKeyInfo = sqlite3KeyInfoFromExprList(pParse,pGroupBy,0,sAggInfo.nColumn);",
          "6446:           sAggInfo.sortingIdx, sAggInfo.nSortingColumn,",
          "",
          "[Added Lines]",
          "6444:       pAggInfo->sortingIdx = pParse->nTab++;",
          "6445:       pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pGroupBy,",
          "6446:                                             0, pAggInfo->nColumn);",
          "6448:           pAggInfo->sortingIdx, pAggInfo->nSortingColumn,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6498:         nGroupBy = pGroupBy->nExpr;",
          "6499:         nCol = nGroupBy;",
          "6500:         j = nGroupBy;",
          "6503:             nCol++;",
          "6504:             j++;",
          "6505:           }",
          "",
          "[Removed Lines]",
          "6501:         for(i=0; i<sAggInfo.nColumn; i++){",
          "6502:           if( sAggInfo.aCol[i].iSorterColumn>=j ){",
          "",
          "[Added Lines]",
          "6503:         for(i=0; i<pAggInfo->nColumn; i++){",
          "6504:           if( pAggInfo->aCol[i].iSorterColumn>=j ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6507:         regBase = sqlite3GetTempRange(pParse, nCol);",
          "6508:         sqlite3ExprCodeExprList(pParse, pGroupBy, regBase, 0, 0);",
          "6509:         j = nGroupBy;",
          "6512:           if( pCol->iSorterColumn>=j ){",
          "6513:             int r1 = j + regBase;",
          "6514:             sqlite3ExprCodeGetColumnOfTable(v,",
          "",
          "[Removed Lines]",
          "6510:         for(i=0; i<sAggInfo.nColumn; i++){",
          "6511:           struct AggInfo_col *pCol = &sAggInfo.aCol[i];",
          "",
          "[Added Lines]",
          "6512:         for(i=0; i<pAggInfo->nColumn; i++){",
          "6513:           struct AggInfo_col *pCol = &pAggInfo->aCol[i];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6518:         }",
          "6519:         regRecord = sqlite3GetTempReg(pParse);",
          "6520:         sqlite3VdbeAddOp3(v, OP_MakeRecord, regBase, nCol, regRecord);",
          "6522:         sqlite3ReleaseTempReg(pParse, regRecord);",
          "6523:         sqlite3ReleaseTempRange(pParse, regBase, nCol);",
          "6524:         sqlite3WhereEnd(pWInfo);",
          "6526:         sortOut = sqlite3GetTempReg(pParse);",
          "6527:         sqlite3VdbeAddOp3(v, OP_OpenPseudo, sortPTab, sortOut, nCol);",
          "6529:         VdbeComment((v, \"GROUP BY sort\")); VdbeCoverage(v);",
          "6531:       }",
          "",
          "[Removed Lines]",
          "6521:         sqlite3VdbeAddOp2(v, OP_SorterInsert, sAggInfo.sortingIdx, regRecord);",
          "6525:         sAggInfo.sortingIdxPTab = sortPTab = pParse->nTab++;",
          "6528:         sqlite3VdbeAddOp2(v, OP_SorterSort, sAggInfo.sortingIdx, addrEnd);",
          "6530:         sAggInfo.useSortingIdx = 1;",
          "",
          "[Added Lines]",
          "6523:         sqlite3VdbeAddOp2(v, OP_SorterInsert, pAggInfo->sortingIdx, regRecord);",
          "6527:         pAggInfo->sortingIdxPTab = sortPTab = pParse->nTab++;",
          "6530:         sqlite3VdbeAddOp2(v, OP_SorterSort, pAggInfo->sortingIdx, addrEnd);",
          "6532:         pAggInfo->useSortingIdx = 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6552:       addrTopOfLoop = sqlite3VdbeCurrentAddr(v);",
          "6553:       if( groupBySort ){",
          "6555:                           sortOut, sortPTab);",
          "6556:       }",
          "6557:       for(j=0; j<pGroupBy->nExpr; j++){",
          "6558:         if( groupBySort ){",
          "6559:           sqlite3VdbeAddOp3(v, OP_Column, sortPTab, j, iBMem+j);",
          "6560:         }else{",
          "6562:           sqlite3ExprCode(pParse, pGroupBy->a[j].pExpr, iBMem+j);",
          "6563:         }",
          "6564:       }",
          "",
          "[Removed Lines]",
          "6554:         sqlite3VdbeAddOp3(v, OP_SorterData, sAggInfo.sortingIdx,",
          "6561:           sAggInfo.directMode = 1;",
          "",
          "[Added Lines]",
          "6556:         sqlite3VdbeAddOp3(v, OP_SorterData, pAggInfo->sortingIdx,",
          "6563:           pAggInfo->directMode = 1;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6590:       sqlite3VdbeJumpHere(v, addr1);",
          "6592:       sqlite3VdbeAddOp2(v, OP_Integer, 1, iUseFlag);",
          "6593:       VdbeComment((v, \"indicate data in accumulator\"));",
          "6597:       if( groupBySort ){",
          "6599:         VdbeCoverage(v);",
          "6600:       }else{",
          "6601:         sqlite3WhereEnd(pWInfo);",
          "",
          "[Removed Lines]",
          "6591:       updateAccumulator(pParse, iUseFlag, &sAggInfo);",
          "6598:         sqlite3VdbeAddOp2(v, OP_SorterNext, sAggInfo.sortingIdx, addrTopOfLoop);",
          "",
          "[Added Lines]",
          "6593:       updateAccumulator(pParse, iUseFlag, pAggInfo);",
          "6600:         sqlite3VdbeAddOp2(v, OP_SorterNext, pAggInfo->sortingIdx, addrTopOfLoop);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6628:       VdbeCoverage(v);",
          "6629:       VdbeComment((v, \"Groupby result generator entry point\"));",
          "6630:       sqlite3VdbeAddOp1(v, OP_Return, regOutputRow);",
          "6632:       sqlite3ExprIfFalse(pParse, pHaving, addrOutputRow+1, SQLITE_JUMPIFNULL);",
          "6633:       selectInnerLoop(pParse, p, -1, &sSort,",
          "6634:                       &sDistinct, pDest,",
          "",
          "[Removed Lines]",
          "6631:       finalizeAggFunctions(pParse, &sAggInfo);",
          "",
          "[Added Lines]",
          "6633:       finalizeAggFunctions(pParse, pAggInfo);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6641:       sqlite3VdbeResolveLabel(v, addrReset);",
          "6643:       sqlite3VdbeAddOp2(v, OP_Integer, 0, iUseFlag);",
          "6644:       VdbeComment((v, \"indicate accumulator empty\"));",
          "6645:       sqlite3VdbeAddOp1(v, OP_Return, regReset);",
          "",
          "[Removed Lines]",
          "6642:       resetAccumulator(pParse, &sAggInfo);",
          "",
          "[Added Lines]",
          "6644:       resetAccumulator(pParse, pAggInfo);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6648:     else {",
          "6649:       Table *pTab;",
          "",
          "[Removed Lines]",
          "6650:       if( (pTab = isSimpleCount(p, &sAggInfo))!=0 ){",
          "",
          "[Added Lines]",
          "6652:       if( (pTab = isSimpleCount(p, pAggInfo))!=0 ){",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6702:         if( pKeyInfo ){",
          "6703:           sqlite3VdbeChangeP4(v, -1, (char *)pKeyInfo, P4_KEYINFO);",
          "6704:         }",
          "6706:         sqlite3VdbeAddOp1(v, OP_Close, iCsr);",
          "6707:         explainSimpleCount(pParse, pTab, pBest);",
          "6708:       }else{",
          "",
          "[Removed Lines]",
          "6705:         sqlite3VdbeAddOp2(v, OP_Count, iCsr, sAggInfo.aFunc[0].iMem);",
          "",
          "[Added Lines]",
          "6707:         sqlite3VdbeAddOp2(v, OP_Count, iCsr, pAggInfo->aFunc[0].iMem);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6724:           }",
          "6726:             regAcc = ++pParse->nMem;",
          "6727:             sqlite3VdbeAddOp2(v, OP_Integer, 0, regAcc);",
          "6728:           }",
          "",
          "[Removed Lines]",
          "6720:         if( sAggInfo.nAccumulator ){",
          "6721:           for(i=0; i<sAggInfo.nFunc; i++){",
          "6722:             if( ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_WinFunc) ) continue;",
          "6723:             if( sAggInfo.aFunc[i].pFunc->funcFlags&SQLITE_FUNC_NEEDCOLL ) break;",
          "6725:           if( i==sAggInfo.nFunc ){",
          "",
          "[Added Lines]",
          "6722:         if( pAggInfo->nAccumulator ){",
          "6723:           for(i=0; i<pAggInfo->nFunc; i++){",
          "6724:             if( ExprHasProperty(pAggInfo->aFunc[i].pExpr, EP_WinFunc) ){",
          "6725:               continue;",
          "6726:             }",
          "6727:             if( pAggInfo->aFunc[i].pFunc->funcFlags&SQLITE_FUNC_NEEDCOLL ){",
          "6728:               break;",
          "6729:             }",
          "6731:           if( i==pAggInfo->nFunc ){",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6735:         assert( p->pGroupBy==0 );",
          "",
          "[Removed Lines]",
          "6736:         resetAccumulator(pParse, &sAggInfo);",
          "",
          "[Added Lines]",
          "6742:         resetAccumulator(pParse, pAggInfo);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6749:         if( pWInfo==0 ){",
          "6750:           goto select_end;",
          "6751:         }",
          "6753:         if( regAcc ) sqlite3VdbeAddOp2(v, OP_Integer, 1, regAcc);",
          "6754:         if( sqlite3WhereIsOrdered(pWInfo)>0 ){",
          "6755:           sqlite3VdbeGoto(v, sqlite3WhereBreakLabel(pWInfo));",
          "",
          "[Removed Lines]",
          "6752:         updateAccumulator(pParse, regAcc, &sAggInfo);",
          "",
          "[Added Lines]",
          "6758:         updateAccumulator(pParse, regAcc, pAggInfo);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6757:                 (minMaxFlag==WHERE_ORDERBY_MIN?\"min\":\"max\")));",
          "6758:         }",
          "6759:         sqlite3WhereEnd(pWInfo);",
          "6761:       }",
          "6763:       sSort.pOrderBy = 0;",
          "",
          "[Removed Lines]",
          "6760:         finalizeAggFunctions(pParse, &sAggInfo);",
          "",
          "[Added Lines]",
          "6766:         finalizeAggFunctions(pParse, pAggInfo);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6797: select_end:",
          "6798:   sqlite3ExprListDelete(db, pMinMaxOrderBy);",
          "6800: #ifdef SQLITE_DEBUG",
          "6804:       if( pExpr==0 ) continue;",
          "6806:       assert( pExpr->iAgg==i );",
          "6807:     }",
          "6816:       if( pExpr==0 ) continue;",
          "6818:       assert( pExpr->iAgg==i );",
          "6819:     }",
          "6822:   }",
          "6825: #endif",
          "6827: #if SELECTTRACE_ENABLED",
          "",
          "[Removed Lines]",
          "6799:   if( sAggInfo.aCol ){",
          "6801:     for(i=0; i<sAggInfo.nColumn; i++){",
          "6802:       Expr *pExpr = sAggInfo.aCol[i].pExpr;",
          "6803:       assert( pExpr!=0 || pParse->db->mallocFailed );",
          "6805:       assert( pExpr->pAggInfo==&sAggInfo );",
          "6808: #endif",
          "6809:     sqlite3DbFree(db, sAggInfo.aCol);",
          "6810:   }",
          "6811:   if( sAggInfo.aFunc ){",
          "6812: #ifdef SQLITE_DEBUG",
          "6813:     for(i=0; i<sAggInfo.nFunc; i++){",
          "6814:       Expr *pExpr = sAggInfo.aFunc[i].pExpr;",
          "6815:       assert( pExpr!=0 || pParse->db->mallocFailed );",
          "6817:       assert( pExpr->pAggInfo==&sAggInfo );",
          "6820: #endif",
          "6821:     sqlite3DbFree(db, sAggInfo.aFunc);",
          "6823: #ifdef SQLITE_DEBUG",
          "6824:   sAggInfo.iAggMagic = 0;",
          "",
          "[Added Lines]",
          "6806:   if( pAggInfo ){",
          "6807:     for(i=0; i<pAggInfo->nColumn; i++){",
          "6808:       Expr *pExpr = pAggInfo->aCol[i].pExpr;",
          "6809:       assert( pExpr!=0 || db->mallocFailed );",
          "6811:       assert( pExpr->pAggInfo==pAggInfo );",
          "6814:     for(i=0; i<pAggInfo->nFunc; i++){",
          "6815:       Expr *pExpr = pAggInfo->aFunc[i].pExpr;",
          "6816:       assert( pExpr!=0 || db->mallocFailed );",
          "6818:       assert( pExpr->pAggInfo==pAggInfo );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1877:   SELECT EXISTS(SELECT count(*) OVER() FROM t1 ORDER BY sum(x) OVER());",
          "1878: } {1}",
          "1880: reset_db",
          "1883: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1880: # 2020-06-07 test case generated by dbsqlfuzz showing how an AggInfo",
          "1881: # object might be referenced after the sqlite3Select() call that created",
          "1882: # it returns.  This proves the need to persist all AggInfo objects until",
          "1883: # the Parse object is destroyed.",
          "1884: #",
          "1886: do_execsql_test 61.1 {",
          "1887: CREATE TABLE t1(a);",
          "1888: INSERT INTO t1 VALUES(5),(NULL),('seventeen');",
          "1889: SELECT (SELECT max(x)OVER(ORDER BY x) % min(x)OVER(ORDER BY CASE x WHEN 889 THEN x WHEN x THEN x END)) FROM (SELECT (SELECT sum(CAST(a IN(SELECT (SELECT max(x)OVER(ORDER BY CASE x WHEN 889 THEN 299 WHEN 863 THEN 863 END)) FROM (SELECT (SELECT sum(CAST((SELECT (SELECT max(x)OVER(ORDER BY x) / min(x)OVER(ORDER BY CASE x WHEN 889 THEN 299 WHEN -true THEN 863 END)) FROM (SELECT (SELECT sum(CAST(a IN(SELECT (SELECT max(x) & sum ( a )OVER(ORDER BY CASE x WHEN -8 THEN 299 WHEN 863 THEN 863 END)) FROM (SELECT (SELECT sum(CAST(a AS )) FROM t1) AS x FROM t1)) AS t1 )) FROM t1) AS x FROM t1)) AS x )) FROM t1) AS x FROM t1)) AS real)) FROM t1) AS x FROM t1);",
          "1890: } {{} {} {}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}