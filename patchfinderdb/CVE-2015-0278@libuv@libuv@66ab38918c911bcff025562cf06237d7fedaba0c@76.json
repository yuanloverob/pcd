{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6a657dcbeedc53b960f65337af8758fccf8ca20d",
      "candidate_info": {
        "commit_hash": "6a657dcbeedc53b960f65337af8758fccf8ca20d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/6a657dcbeedc53b960f65337af8758fccf8ca20d",
        "files": [
          "include/uv-win.h"
        ],
        "message": "include: add reserved field for #926\n\nIntroduce reserved field to be able to fix #926 after v0.12 release.",
        "before_after_code_files": [
          "include/uv-win.h||include/uv-win.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "428:     void* queue[2];                                                           \\",
          "429:     int queue_len;                                                            \\",
          "430:   } pending_ipc_info;                                                         \\",
          "433: #define UV_PIPE_PRIVATE_FIELDS                                                \\",
          "434:   HANDLE handle;                                                              \\",
          "",
          "[Removed Lines]",
          "431:   uv_write_t* non_overlapped_writes_tail;",
          "",
          "[Added Lines]",
          "431:   uv_write_t* non_overlapped_writes_tail;                                     \\",
          "432:   void* reserved;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f3c910c1b7cb391845356967b8593a1c5577b0c",
      "candidate_info": {
        "commit_hash": "0f3c910c1b7cb391845356967b8593a1c5577b0c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/0f3c910c1b7cb391845356967b8593a1c5577b0c",
        "files": [
          "src/win/fs.c"
        ],
        "message": "windows/fs: wrap multi-statement macros in do..while block",
        "before_after_code_files": [
          "src/win/fs.c||src/win/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #define QUEUE_FS_TP_JOB(loop, req)                                          \\",
          "52: #define SET_REQ_RESULT(req, result_value)                                   \\",
          "59: #define SET_REQ_WIN32_ERROR(req, sys_errno)                                 \\",
          "63: #define SET_REQ_UV_ERROR(req, uv_errno, sys_errno)                          \\",
          "67: #define VERIFY_FD(fd, req)                                                  \\",
          "68:   if (fd == -1) {                                                           \\",
          "",
          "[Removed Lines]",
          "45:   if (!QueueUserWorkItem(&uv_fs_thread_proc,                                \\",
          "46:                          req,                                               \\",
          "47:                          WT_EXECUTEDEFAULT)) {                              \\",
          "48:     return uv_translate_sys_error(GetLastError());                          \\",
          "49:   }                                                                         \\",
          "50:   uv__req_register(loop, req);",
          "53:   req->result = (result_value);                                             \\",
          "54:   if (req->result == -1) {                                                  \\",
          "55:     req->sys_errno_ = _doserrno;                                            \\",
          "56:     req->result = uv_translate_sys_error(req->sys_errno_);                  \\",
          "57:   }",
          "60:   req->sys_errno_ = (sys_errno);                                            \\",
          "61:   req->result = uv_translate_sys_error(req->sys_errno_);                    \\",
          "64:   req->result = (uv_errno);                                                 \\",
          "65:   req->sys_errno_ = (sys_errno);                                            \\",
          "",
          "[Added Lines]",
          "45:   do {                                                                      \\",
          "46:     if (!QueueUserWorkItem(&uv_fs_thread_proc,                              \\",
          "47:                            req,                                             \\",
          "48:                            WT_EXECUTEDEFAULT)) {                            \\",
          "49:       return uv_translate_sys_error(GetLastError());                        \\",
          "50:     }                                                                       \\",
          "51:     uv__req_register(loop, req);                                            \\",
          "52:   } while (0)",
          "55:   do {                                                                      \\",
          "56:     req->result = (result_value);                                           \\",
          "57:     if (req->result == -1) {                                                \\",
          "58:       req->sys_errno_ = _doserrno;                                          \\",
          "59:       req->result = uv_translate_sys_error(req->sys_errno_);                \\",
          "60:     }                                                                       \\",
          "61:   } while (0)",
          "64:   do {                                                                      \\",
          "65:     req->sys_errno_ = (sys_errno);                                          \\",
          "66:     req->result = uv_translate_sys_error(req->sys_errno_);                  \\",
          "67:   } while (0)",
          "70:   do {                                                                      \\",
          "71:     req->result = (uv_errno);                                               \\",
          "72:     req->sys_errno_ = (sys_errno);                                          \\",
          "73:   } while (0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:    (*((uint64_t*) &(filetime)) - 116444736000000000ULL)",
          "77: #define FILETIME_TO_TIME_T(filetime)                                        \\",
          "80: #define FILETIME_TO_TIME_NS(filetime, secs)                                 \\",
          "83: #define FILETIME_TO_TIMESPEC(ts, filetime)                                  \\",
          "84:    do {                                                                     \\",
          "",
          "[Removed Lines]",
          "78:    (FILETIME_TO_UINT(filetime) / 10000000ULL);",
          "81:    ((FILETIME_TO_UINT(filetime) - (secs * 10000000ULL)) * 100);",
          "",
          "[Added Lines]",
          "86:    (FILETIME_TO_UINT(filetime) / 10000000ULL)",
          "89:    ((FILETIME_TO_UINT(filetime) - (secs * 10000000ULL)) * 100)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "717e0e5635a03ab2b1366e3ff2015ad223855b81",
      "candidate_info": {
        "commit_hash": "717e0e5635a03ab2b1366e3ff2015ad223855b81",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/717e0e5635a03ab2b1366e3ff2015ad223855b81",
        "files": [
          "Makefile.am"
        ],
        "message": "build: use -pthread on sunos\n\nWhen building on sunos with autoconf make sure to specify -pthread\notherwise there will be race conditions with errno and etc",
        "before_after_code_files": [
          "Makefile.am||Makefile.am"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:                    src/uv-common.h \\",
          "32:                    src/version.c",
          "34: if WINNT",
          "36: include_HEADERS += include/uv-win.h include/tree.h",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: if SUNOS",
          "35: libuv_la_CFLAGS += -pthread",
          "36: endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d43992c3b268b756d3018b7e55663f2b056daf3",
      "candidate_info": {
        "commit_hash": "0d43992c3b268b756d3018b7e55663f2b056daf3",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/0d43992c3b268b756d3018b7e55663f2b056daf3",
        "files": [
          "Makefile.am",
          "include/uv.h",
          "src/unix/udp.c",
          "src/uv-common.c",
          "src/uv-common.h",
          "src/win/udp.c",
          "test/test-list.h",
          "test/test-udp-try-send.c",
          "uv.gyp"
        ],
        "message": "unix, win: add uv_udp_try_send\n\nThe function returns UV_EAGAIN if the queue is not empty and\nthe message couldn't be sent immediately.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "include/uv.h||include/uv.h",
          "src/unix/udp.c||src/unix/udp.c",
          "src/uv-common.c||src/uv-common.c",
          "src/uv-common.h||src/uv-common.h",
          "src/win/udp.c||src/win/udp.c",
          "test/test-list.h||test/test-list.h",
          "test/test-udp-try-send.c||test/test-udp-try-send.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:                          test/test-udp-open.c \\",
          "215:                          test/test-udp-options.c \\",
          "216:                          test/test-udp-send-and-recv.c \\",
          "217:                          test/test-walk-handles.c \\",
          "218:                          test/test-watcher-cross-stop.c",
          "219: test_run_tests_LDADD = libuv.la",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:                          test/test-udp-try-send.c \\",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1076:                           const struct sockaddr* addr,",
          "1077:                           uv_udp_send_cb send_cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1088: UV_EXTERN int uv_udp_try_send(uv_udp_t* handle,",
          "1089:                               const uv_buf_t bufs[],",
          "1090:                               unsigned int nbufs,",
          "1091:                               const struct sockaddr* addr);",
          "",
          "---------------"
        ],
        "src/unix/udp.c||src/unix/udp.c": [
          "File: src/unix/udp.c -> src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448: }",
          "451: static int uv__udp_set_membership4(uv_udp_t* handle,",
          "452:                                    const struct sockaddr_in* multicast_addr,",
          "453:                                    const char* interface_addr,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451: int uv__udp_try_send(uv_udp_t* handle,",
          "452:                      const uv_buf_t bufs[],",
          "453:                      unsigned int nbufs,",
          "454:                      const struct sockaddr* addr,",
          "455:                      unsigned int addrlen) {",
          "456:   int err;",
          "457:   struct msghdr h;",
          "458:   ssize_t size;",
          "460:   assert(nbufs > 0);",
          "463:   if (handle->send_queue_count != 0)",
          "464:     return -EAGAIN;",
          "466:   err = uv__udp_maybe_deferred_bind(handle, addr->sa_family, 0);",
          "467:   if (err)",
          "468:     return err;",
          "470:   memset(&h, 0, sizeof h);",
          "471:   h.msg_name = (struct sockaddr*) addr;",
          "472:   h.msg_namelen = addrlen;",
          "473:   h.msg_iov = (struct iovec*) bufs;",
          "474:   h.msg_iovlen = nbufs;",
          "476:   do {",
          "477:     size = sendmsg(handle->io_watcher.fd, &h, 0);",
          "478:   } while (size == -1 && errno == EINTR);",
          "480:   if (size == -1) {",
          "481:     if (errno == EAGAIN || errno == EWOULDBLOCK)",
          "482:       return -EAGAIN;",
          "483:     else",
          "484:       return -errno;",
          "485:   }",
          "487:   return size;",
          "488: }",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233: }",
          "236: int uv_udp_recv_start(uv_udp_t* handle,",
          "237:                       uv_alloc_cb alloc_cb,",
          "238:                       uv_udp_recv_cb recv_cb) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236: int uv_udp_try_send(uv_udp_t* handle,",
          "237:                     const uv_buf_t bufs[],",
          "238:                     unsigned int nbufs,",
          "239:                     const struct sockaddr* addr) {",
          "240:   unsigned int addrlen;",
          "242:   if (handle->type != UV_UDP)",
          "243:     return UV_EINVAL;",
          "245:   if (addr->sa_family == AF_INET)",
          "246:     addrlen = sizeof(struct sockaddr_in);",
          "247:   else if (addr->sa_family == AF_INET6)",
          "248:     addrlen = sizeof(struct sockaddr_in6);",
          "249:   else",
          "250:     return UV_EINVAL;",
          "252:   return uv__udp_try_send(handle, bufs, nbufs, addr, addrlen);",
          "253: }",
          "",
          "---------------"
        ],
        "src/uv-common.h||src/uv-common.h": [
          "File: src/uv-common.h -> src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:                  unsigned int addrlen,",
          "84:                  uv_udp_send_cb send_cb);",
          "86: int uv__udp_recv_start(uv_udp_t* handle, uv_alloc_cb alloccb,",
          "87:                        uv_udp_recv_cb recv_cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: int uv__udp_try_send(uv_udp_t* handle,",
          "87:                      const uv_buf_t bufs[],",
          "88:                      unsigned int nbufs,",
          "89:                      const struct sockaddr* addr,",
          "90:                      unsigned int addrlen);",
          "",
          "---------------"
        ],
        "src/win/udp.c||src/win/udp.c": [
          "File: src/win/udp.c -> src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "870:   return 0;",
          "871: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "874: int uv__udp_try_send(uv_udp_t* handle,",
          "875:                      const uv_buf_t bufs[],",
          "876:                      unsigned int nbufs,",
          "877:                      const struct sockaddr* addr,",
          "878:                      unsigned int addrlen) {",
          "879:   return UV_ENOSYS;",
          "880: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: TEST_DECLARE   (udp_options)",
          "96: TEST_DECLARE   (udp_no_autobind)",
          "97: TEST_DECLARE   (udp_open)",
          "98: TEST_DECLARE   (pipe_bind_error_addrinuse)",
          "99: TEST_DECLARE   (pipe_bind_error_addrnotavail)",
          "100: TEST_DECLARE   (pipe_bind_error_inval)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: TEST_DECLARE   (udp_try_send)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:   TEST_ENTRY  (udp_multicast_join)",
          "377:   TEST_ENTRY  (udp_multicast_join6)",
          "378:   TEST_ENTRY  (udp_multicast_ttl)",
          "380:   TEST_ENTRY  (udp_open)",
          "381:   TEST_HELPER (udp_open, udp4_echo_server)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380:   TEST_ENTRY  (udp_try_send)",
          "",
          "---------------"
        ],
        "test/test-udp-try-send.c||test/test-udp-try-send.c": [
          "File: test/test-udp-try-send.c -> test/test-udp-try-send.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "29: #ifdef _WIN32",
          "31: TEST_IMPL(udp_try_send) {",
          "33:   MAKE_VALGRIND_HAPPY();",
          "34:   return 0;",
          "35: }",
          "39: #define CHECK_HANDLE(handle) \\",
          "40:   ASSERT((uv_udp_t*)(handle) == &server || (uv_udp_t*)(handle) == &client)",
          "42: static uv_udp_t server;",
          "43: static uv_udp_t client;",
          "45: static int sv_recv_cb_called;",
          "47: static int close_cb_called;",
          "50: static void alloc_cb(uv_handle_t* handle,",
          "51:                      size_t suggested_size,",
          "52:                      uv_buf_t* buf) {",
          "53:   static char slab[65536];",
          "54:   CHECK_HANDLE(handle);",
          "55:   ASSERT(suggested_size <= sizeof(slab));",
          "56:   buf->base = slab;",
          "57:   buf->len = sizeof(slab);",
          "58: }",
          "61: static void close_cb(uv_handle_t* handle) {",
          "62:   CHECK_HANDLE(handle);",
          "63:   ASSERT(uv_is_closing(handle));",
          "64:   close_cb_called++;",
          "65: }",
          "68: static void sv_recv_cb(uv_udp_t* handle,",
          "69:                        ssize_t nread,",
          "70:                        const uv_buf_t* rcvbuf,",
          "71:                        const struct sockaddr* addr,",
          "72:                        unsigned flags) {",
          "73:   ASSERT(nread > 0);",
          "75:   if (nread == 0) {",
          "76:     ASSERT(addr == NULL);",
          "77:     return;",
          "78:   }",
          "80:   ASSERT(nread == 4);",
          "81:   ASSERT(addr != NULL);",
          "83:   ASSERT(memcmp(\"EXIT\", rcvbuf->base, nread) == 0);",
          "84:   uv_close((uv_handle_t*) handle, close_cb);",
          "85:   uv_close((uv_handle_t*) &client, close_cb);",
          "87:   sv_recv_cb_called++;",
          "88: }",
          "91: TEST_IMPL(udp_try_send) {",
          "92:   struct sockaddr_in addr;",
          "93:   static char buffer[64 * 1024];",
          "94:   uv_buf_t buf;",
          "95:   int r;",
          "97:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", TEST_PORT, &addr));",
          "99:   r = uv_udp_init(uv_default_loop(), &server);",
          "100:   ASSERT(r == 0);",
          "102:   r = uv_udp_bind(&server, (const struct sockaddr*) &addr, 0);",
          "103:   ASSERT(r == 0);",
          "105:   r = uv_udp_recv_start(&server, alloc_cb, sv_recv_cb);",
          "106:   ASSERT(r == 0);",
          "108:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "110:   r = uv_udp_init(uv_default_loop(), &client);",
          "111:   ASSERT(r == 0);",
          "113:   buf = uv_buf_init(buffer, sizeof(buffer));",
          "114:   r = uv_udp_try_send(&client, &buf, 1, (const struct sockaddr*) &addr);",
          "115:   ASSERT(r == UV_EMSGSIZE);",
          "117:   buf = uv_buf_init(\"EXIT\", 4);",
          "118:   r = uv_udp_try_send(&client, &buf, 1, (const struct sockaddr*) &addr);",
          "119:   ASSERT(r == 4);",
          "121:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "123:   ASSERT(close_cb_called == 2);",
          "124:   ASSERT(sv_recv_cb_called == 1);",
          "126:   ASSERT(client.send_queue_size == 0);",
          "127:   ASSERT(server.send_queue_size == 0);",
          "129:   MAKE_VALGRIND_HAPPY();",
          "130:   return 0;",
          "131: }",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:         'test/test-ip6-addr.c',",
          "403:         'test/test-udp-multicast-interface.c',",
          "404:         'test/test-udp-multicast-interface6.c',",
          "405:       ],",
          "406:       'conditions': [",
          "407:         [ 'OS==\"win\"', {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "405:         'test/test-udp-try-send.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a3b8f9fce960704f347db338dda5746738dd6d0",
      "candidate_info": {
        "commit_hash": "5a3b8f9fce960704f347db338dda5746738dd6d0",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/5a3b8f9fce960704f347db338dda5746738dd6d0",
        "files": [
          "test/test-spawn.c"
        ],
        "message": "test: fix spawn_setgid_fails and spawn_setuid_fails\n\nDon't try to set a bogus UID or GID and expect to get a meaningful\nerror. The test expected EPERM but SunOS returns EINVAL because the\nid is outside of the range of valid user/group ids.\n\nTry to switch to UID/GID 0. Give up privileges first if we're root,\nelse the setuid/setgid system call will succeed when it's expected\nto fail.",
        "before_after_code_files": [
          "test/test-spawn.c||test/test-spawn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "815:     struct passwd* pw;",
          "816:     pw = getpwnam(\"nobody\");",
          "817:     ASSERT(pw != NULL);",
          "820:   }",
          "822:   init_process_options(\"spawn_helper1\", exit_cb_failure_expected);",
          "824:   options.flags |= UV_PROCESS_SETUID;",
          "827:   r = uv_spawn(uv_default_loop(), &process, options);",
          "828:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "818:     r = setuid(pw->pw_uid);",
          "819:     ASSERT(r == 0);",
          "825:   options.uid = (uv_uid_t) -42424242;",
          "",
          "[Added Lines]",
          "818:     ASSERT(0 == setgid(pw->pw_gid));",
          "819:     ASSERT(0 == setuid(pw->pw_uid));",
          "825:   options.uid = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "847:     struct passwd* pw;",
          "848:     pw = getpwnam(\"nobody\");",
          "849:     ASSERT(pw != NULL);",
          "852:   }",
          "854:   init_process_options(\"spawn_helper1\", exit_cb_failure_expected);",
          "856:   options.flags |= UV_PROCESS_SETGID;",
          "859:   r = uv_spawn(uv_default_loop(), &process, options);",
          "860:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "850:     r = setuid(pw->pw_uid);",
          "851:     ASSERT(r == 0);",
          "857:   options.gid = (uv_gid_t) -42424242;",
          "",
          "[Added Lines]",
          "850:     ASSERT(0 == setgid(pw->pw_gid));",
          "851:     ASSERT(0 == setuid(pw->pw_uid));",
          "857:   options.gid = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}