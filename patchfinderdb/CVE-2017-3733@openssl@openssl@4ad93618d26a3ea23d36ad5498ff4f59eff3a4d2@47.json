{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f31917afc4fbc9061a1dc41f9a660dcb5537bf78",
      "candidate_info": {
        "commit_hash": "f31917afc4fbc9061a1dc41f9a660dcb5537bf78",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f31917afc4fbc9061a1dc41f9a660dcb5537bf78",
        "files": [
          "test/recipes/70-test_sslmessages.t"
        ],
        "message": "Add a test to check messsages sent are the ones we expect\n\nRepeat for various handshake types\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1983)",
        "before_after_code_files": [
          "test/recipes/70-test_sslmessages.t||test/recipes/70-test_sslmessages.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/70-test_sslmessages.t||test/recipes/70-test_sslmessages.t": [
          "File: test/recipes/70-test_sslmessages.t -> test/recipes/70-test_sslmessages.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /usr/bin/env perl",
          "2: # Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.",
          "3: #",
          "4: # Licensed under the OpenSSL license (the \"License\").  You may not use",
          "5: # this file except in compliance with the License.  You can obtain a copy",
          "6: # in the file LICENSE in the source distribution or at",
          "7: # https://www.openssl.org/source/license.html",
          "9: use strict;",
          "10: use OpenSSL::Test qw/:DEFAULT cmdstr srctop_file bldtop_dir/;",
          "11: use OpenSSL::Test::Utils;",
          "12: use File::Temp qw(tempfile);",
          "13: use TLSProxy::Proxy;",
          "14: my $test_name = \"test_tls13messages\";",
          "15: setup($test_name);",
          "17: plan skip_all => \"TLSProxy isn't usable on $^O\"",
          "18:     if $^O =~ /^(VMS|MSWin32)$/;",
          "20: plan skip_all => \"$test_name needs the dynamic engine feature enabled\"",
          "21:     if disabled(\"engine\") || disabled(\"dynamic-engine\");",
          "23: plan skip_all => \"$test_name needs the sock feature enabled\"",
          "24:     if disabled(\"sock\");",
          "26: plan skip_all => \"$test_name needs TLS enabled\"",
          "27:     if alldisabled(available_protocols(\"tls\"));",
          "29: $ENV{OPENSSL_ia32cap} = '~0x200000200000000';",
          "31: use constant {",
          "32:     DEFAULT_HANDSHAKE => 1,",
          "33:     OCSP_HANDSHAKE => 2,",
          "34:     RESUME_HANDSHAKE => 4,",
          "35:     CLIENT_AUTH_HANDSHAKE => 8,",
          "36:     RENEG_HANDSHAKE => 16,",
          "38:     ALL_HANDSHAKES => 31",
          "39: };",
          "41: my @handmessages = (",
          "42:     [TLSProxy::Message::MT_CLIENT_HELLO, ALL_HANDSHAKES],",
          "43:     [TLSProxy::Message::MT_SERVER_HELLO, ALL_HANDSHAKES],",
          "44:     [TLSProxy::Message::MT_CERTIFICATE, ALL_HANDSHAKES & ~RESUME_HANDSHAKE],",
          "45:     [TLSProxy::Message::MT_CERTIFICATE_STATUS, OCSP_HANDSHAKE],",
          "46:     #ServerKeyExchange handshakes not currently supported by TLSProxy",
          "47:     [TLSProxy::Message::MT_CERTIFICATE_REQUEST, CLIENT_AUTH_HANDSHAKE],",
          "48:     [TLSProxy::Message::MT_SERVER_HELLO_DONE, ALL_HANDSHAKES & ~RESUME_HANDSHAKE],",
          "49:     [TLSProxy::Message::MT_CERTIFICATE, CLIENT_AUTH_HANDSHAKE],",
          "50:     [TLSProxy::Message::MT_CLIENT_KEY_EXCHANGE, ALL_HANDSHAKES & ~RESUME_HANDSHAKE],",
          "51:     [TLSProxy::Message::MT_CERTIFICATE_VERIFY, CLIENT_AUTH_HANDSHAKE],",
          "52:     [TLSProxy::Message::MT_FINISHED, ALL_HANDSHAKES],",
          "53:     [TLSProxy::Message::MT_NEW_SESSION_TICKET, ALL_HANDSHAKES & ~RESUME_HANDSHAKE],",
          "54:     [TLSProxy::Message::MT_FINISHED, ALL_HANDSHAKES],",
          "55:     [TLSProxy::Message::MT_CLIENT_HELLO, RENEG_HANDSHAKE],",
          "56:     [TLSProxy::Message::MT_SERVER_HELLO, RENEG_HANDSHAKE],",
          "57:     [TLSProxy::Message::MT_CERTIFICATE, RENEG_HANDSHAKE],",
          "58:     [TLSProxy::Message::MT_SERVER_HELLO_DONE, RENEG_HANDSHAKE],",
          "59:     [TLSProxy::Message::MT_CLIENT_KEY_EXCHANGE, RENEG_HANDSHAKE],",
          "60:     [TLSProxy::Message::MT_FINISHED, RENEG_HANDSHAKE],",
          "61:     [TLSProxy::Message::MT_NEW_SESSION_TICKET, RENEG_HANDSHAKE],",
          "62:     [TLSProxy::Message::MT_FINISHED, RENEG_HANDSHAKE],",
          "63:     [0, 0]",
          "64: );",
          "66: my $proxy = TLSProxy::Proxy->new(",
          "67:     undef,",
          "68:     cmdstr(app([\"openssl\"]), display => 1),",
          "69:     srctop_file(\"apps\", \"server.pem\"),",
          "70:     (!$ENV{HARNESS_ACTIVE} || $ENV{HARNESS_VERBOSE})",
          "71: );",
          "73: sub checkmessages($$);",
          "75: #Test 1: Check we get all the right messages for a default handshake",
          "76: (undef, my $session) = tempfile();",
          "77: $proxy->serverconnects(2);",
          "78: $proxy->clientflags(\"-sess_out \".$session);",
          "79: $proxy->start() or plan skip_all => \"Unable to start up Proxy for tests\";",
          "80: plan tests => 5;",
          "81: checkmessages(DEFAULT_HANDSHAKE, \"Default handshake test\");",
          "83: #Test 2: Resumption handshake",
          "84: $proxy->clearClient();",
          "85: $proxy->clientflags(\"-sess_in \".$session);",
          "86: $proxy->clientstart();",
          "87: checkmessages(RESUME_HANDSHAKE, \"Resumption handshake test\");",
          "88: unlink $session;",
          "90: #Test 3: A client auth handshake",
          "91: $proxy->clear();",
          "92: $proxy->clientflags(\"-cert \".srctop_file(\"apps\", \"server.pem\"));",
          "93: $proxy->serverflags(\"-Verify 5\");",
          "94: $proxy->start();",
          "95: checkmessages(CLIENT_AUTH_HANDSHAKE, \"Client auth handshake test\");",
          "97: #Test 4: A handshake with a renegotiation",
          "98: $proxy->clear();",
          "99: $proxy->reneg(1);",
          "100: $proxy->start();",
          "101: checkmessages(RENEG_HANDSHAKE, \"Rengotiation handshake test\");",
          "103: #Test 5: A handshake with a renegotiation and client auth",
          "104: $proxy->clear();",
          "105: $proxy->clientflags(\"-cert \".srctop_file(\"apps\", \"server.pem\"));",
          "106: $proxy->serverflags(\"-Verify 5\");",
          "107: $proxy->reneg(1);",
          "108: $proxy->start();",
          "109: checkmessages(RENEG_HANDSHAKE | CLIENT_AUTH_HANDSHAKE,",
          "110:               \"Renogitation and client auth handshake test\");",
          "112: sub checkmessages($$)",
          "113: {",
          "114:     my ($handtype, $testname) = @_;",
          "116:     subtest $testname => sub {",
          "117:         my $loop = 0;",
          "118:         my $numtests;",
          "120:         #First count the number of tests",
          "121:         for ($numtests = 0; $handmessages[$loop][1] != 0; $loop++) {",
          "122:             $numtests++ if (($handmessages[$loop][1] & $handtype) != 0);",
          "123:         }",
          "125:         plan tests => $numtests;",
          "127:         my $nextmess = 0;",
          "128:         my $message = undef;",
          "129:         for ($loop = 0; $handmessages[$loop][1] != 0; $loop++) {",
          "130:             next if (($handmessages[$loop][1] & $handtype) == 0);",
          "131:             if (scalar @{$proxy->message_list} > $nextmess) {",
          "132:                 $message = ${$proxy->message_list}[$nextmess];",
          "133:                 $nextmess++;",
          "134:             } else {",
          "135:                 $message = undef;",
          "136:             }",
          "137:             if (!defined $message) {",
          "138:                 fail(\"Message type check. Got nothing, expected \"",
          "139:                      .$handmessages[$loop][0]);",
          "140:             } else {",
          "141:                 ok($message->mt == $handmessages[$loop][0],",
          "142:                    \"Message type check. Got \".$message->mt",
          "143:                    .\", expected \".$handmessages[$loop][0]);",
          "144:             }",
          "145:         }",
          "146:     }",
          "147: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a68382de5e2e528d5026d29666f4abbc7c43743a",
      "candidate_info": {
        "commit_hash": "a68382de5e2e528d5026d29666f4abbc7c43743a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a68382de5e2e528d5026d29666f4abbc7c43743a",
        "files": [
          "Configurations/10-main.conf"
        ],
        "message": "Add a modern linux-x86 config target\n\n'linux-x86' is similar to 'linux-x86_64' but uses -m32 rather than -m64.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1924)\n(cherry picked from commit 7fbc0bfdd7a3c46bc7e36b191d11ab3853555a25)",
        "before_after_code_files": [
          "Configurations/10-main.conf||Configurations/10-main.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/10-main.conf||Configurations/10-main.conf": [
          "File: Configurations/10-main.conf -> Configurations/10-main.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:     },",
          "740:     #### IA-32 targets...",
          "741:     \"linux-elf\" => {",
          "742:         inherit_from     => [ \"linux-generic32\", asm(\"x86_elf_asm\") ],",
          "743:         cflags           => add(picker(default => \"-DL_ENDIAN\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "741:     #### These two targets are a bit aged and are to be used on older Linux",
          "742:     #### machines where gcc doesn't understand -m32 and -m64",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "755:         perlasm_scheme   => \"a.out\",",
          "756:     },",
          "758:     \"linux-x86_64\" => {",
          "759:         inherit_from     => [ \"linux-generic64\", asm(\"x86_64_asm\") ],",
          "760:         cflags           => add(\"-m64 -DL_ENDIAN\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760:     #### X86 / X86_64 targets",
          "761:     \"linux-x86\" => {",
          "762:         inherit_from     => [ \"linux-generic32\", asm(\"x86_asm\") ],",
          "763:         cflags           => add(picker(default => \"-m32 -DL_ENDIAN\",",
          "764:                                        release => \"-fomit-frame-pointer\")),",
          "765:         bn_ops           => \"BN_LLONG\",",
          "766:         perlasm_scheme   => \"elf\",",
          "767:         shared_ldflag    => add(\"-m32\"),",
          "768:     },",
          "769:     \"linux-x86-clang\" => {",
          "770:         inherit_from     => [ \"linux-x86\" ],",
          "771:         cc               => \"clang\",",
          "772:         cxx              => \"clang++\",",
          "773:         cflags           => add(\"-Wextra -Qunused-arguments\"),",
          "774:     },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb3b70c0bdc676f857e438754345487d5da1c84e",
      "candidate_info": {
        "commit_hash": "fb3b70c0bdc676f857e438754345487d5da1c84e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fb3b70c0bdc676f857e438754345487d5da1c84e",
        "files": [
          "test/recipes/80-test_cms.t"
        ],
        "message": "add CMS SHA1 signing test\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit c6d67f09f34d8203c5bad7171ed45ec8771c9764)",
        "before_after_code_files": [
          "test/recipes/80-test_cms.t||test/recipes/80-test_cms.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/80-test_cms.t||test/recipes/80-test_cms.t": [
          "File: test/recipes/80-test_cms.t -> test/recipes/80-test_cms.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:  \"-CAfile\", catfile($smdir, \"smroot.pem\"), \"-out\", \"smtst.txt\" ]",
          "108:     ],",
          "110:     [ \"signed content test streaming S/MIME format, 2 DSA and 2 RSA keys\",",
          "111:       [ \"-sign\", \"-in\", $smcont, \"-nodetach\",",
          "112:  \"-signer\", catfile($smdir, \"smrsa1.pem\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     [ \"signed content S/MIME format, RSA key SHA1\",",
          "111:       [ \"-sign\", \"-in\", $smcont, \"-md\", \"sha1\",",
          "112:  \"-certfile\", catfile($smdir, \"smroot.pem\"),",
          "113:  \"-signer\", catfile($smdir, \"smrsa1.pem\"), \"-out\", \"test.cms\" ],",
          "114:       [ \"-verify\", \"-in\", \"test.cms\",",
          "115:  \"-CAfile\", catfile($smdir, \"smroot.pem\"), \"-out\", \"smtst.txt\" ]",
          "116:     ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f62997e90562ebf8a3ff10042ddef71fa45bd4c",
      "candidate_info": {
        "commit_hash": "2f62997e90562ebf8a3ff10042ddef71fa45bd4c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2f62997e90562ebf8a3ff10042ddef71fa45bd4c",
        "files": [
          "test/ecdhtest.c",
          "test/evptests.txt"
        ],
        "message": "ecdhtest.c: move NAMED CURVES TESTS to evptests.txt\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3188)",
        "before_after_code_files": [
          "test/ecdhtest.c||test/ecdhtest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/ecdhtest.c||test/ecdhtest.c": [
          "File: test/ecdhtest.c -> test/ecdhtest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "571:     if (!EC_get_builtin_curves(curves, crv_len)) goto err;",
          "587:     for (n = 0; n < (sizeof(ecdh_kats)/sizeof(ecdh_kat_t)); n++) {",
          "",
          "[Removed Lines]",
          "574:     for (n = 0; n < crv_len; n++) {",
          "575:         nid = curves[n].nid;",
          "581:         if (nid == NID_X25519)",
          "582:             continue;",
          "583:         if (!test_ecdh_curve(nid, ctx, out)) goto err;",
          "584:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6e4fdbf8b44010ba12b72d519e437bbd2da71e6",
      "candidate_info": {
        "commit_hash": "c6e4fdbf8b44010ba12b72d519e437bbd2da71e6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c6e4fdbf8b44010ba12b72d519e437bbd2da71e6",
        "files": [
          "crypto/x86_64cpuid.pl"
        ],
        "message": "crypto/x86_64cpuid.pl: move extended feature detection upwards.\n\nExteneded feature flags were not pulled on AMD processors, as result a\nnumber of extensions were effectively masked on Ryzen. It should have\nbeen reported for Excavator since it implements AVX2 extension, but\napparently nobody noticed or cared...\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit f8418d87e191e46b81e1b9548326ab2876fa0907)",
        "before_after_code_files": [
          "crypto/x86_64cpuid.pl||crypto/x86_64cpuid.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x86_64cpuid.pl||crypto/x86_64cpuid.pl": [
          "File: crypto/x86_64cpuid.pl -> crypto/x86_64cpuid.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  cpuid",
          "71:  mov %eax,%r11d  # max value for standard query level",
          "73:  xor %eax,%eax",
          "74:  cmp \\$0x756e6547,%ebx # \"Genu\"",
          "75:  setne %al",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:  cmp \\$7,%eax",
          "74:  jb .Lno_extended_info",
          "76:  mov \\$7,%eax",
          "77:  xor %ecx,%ecx",
          "78:  cpuid",
          "79:  mov %ebx,8(%rdi)",
          "81: .Lno_extended_info:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:  shr \\$14,%r10d",
          "135:  and \\$0xfff,%r10d  # number of cores -1 per L1D",
          "145: .Lnocacheinfo:",
          "146:  mov \\$1,%eax",
          "147:  cpuid",
          "",
          "[Removed Lines]",
          "137:  cmp \\$7,%r11d",
          "138:  jb .Lnocacheinfo",
          "140:  mov \\$7,%eax",
          "141:  xor %ecx,%ecx",
          "142:  cpuid",
          "143:  mov %ebx,8(%rdi)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}