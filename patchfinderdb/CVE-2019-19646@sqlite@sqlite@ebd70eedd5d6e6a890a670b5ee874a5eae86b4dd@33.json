{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b1904e35da41683dbb2dc71b3c55f68726a5008",
      "candidate_info": {
        "commit_hash": "7b1904e35da41683dbb2dc71b3c55f68726a5008",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7b1904e35da41683dbb2dc71b3c55f68726a5008",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "test/without_rowid7.test"
        ],
        "message": "Enhance the \"PRAGMA index_info()\" and \"PRAGMA index_xinfo()\" statements so that they allow a WITHOUT ROWID table as their argument, and in that case show the structure of the underlying index used to implement the WITHOUT ROWID table.\n\nFossilOrigin-Name: 62274ff683ba077d8b0fa34ad653ce235a8c5cbfdb7ab8558469af7333d03698",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "test/without_rowid7.test||test/without_rowid7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bd9a47a3a2997bfbf9c8a11c5b7196e362974054e58a2fe701778b1580264de8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1157:     Index *pIdx;",
          "1158:     Table *pTab;",
          "1159:     pIdx = sqlite3FindIndex(db, zRight, zDb);",
          "1160:     if( pIdx ){",
          "1161:       int iIdxDb = sqlite3SchemaToIndex(db, pIdx->pSchema);",
          "1162:       int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1160:     if( pIdx==0 ){",
          "1164:       pTab = sqlite3LocateTable(pParse, LOCATE_NOERR, zRight, zDb);",
          "1165:       if( pTab && !HasRowid(pTab) ){",
          "1166:         pIdx = sqlite3PrimaryKeyIndex(pTab);",
          "1167:       }",
          "1168:     }",
          "",
          "---------------"
        ],
        "test/without_rowid7.test||test/without_rowid7.test": [
          "File: test/without_rowid7.test -> test/without_rowid7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: do_execsql_test 2.0 {",
          "29: }",
          "31: do_execsql_test 2.1 {",
          "",
          "[Removed Lines]",
          "28:   CREATE TABLE t2(a, b, PRIMARY KEY(a, a COLLATE nocase, a)) WITHOUT ROWID;",
          "",
          "[Added Lines]",
          "28:   CREATE TABLE t2(a, b, PRIMARY KEY(a COLLATE nocase, a)) WITHOUT ROWID;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:   SELECT b FROM t2;",
          "34: } {one}",
          "",
          "[Removed Lines]",
          "37: finish_test",
          "",
          "[Added Lines]",
          "36: do_execsql_test 2.2a {",
          "37:   PRAGMA index_info(t2);",
          "38: } {0 0 a 1 0 a}",
          "39: do_execsql_test 2.2b {",
          "40:   SELECT *, '|' FROM pragma_index_info('t2');",
          "41: } {0 0 a | 1 0 a |}",
          "42: do_execsql_test 2.3a {",
          "43:   PRAGMA index_xinfo(t2);",
          "44: } {0 0 a 0 nocase 1 1 0 a 0 BINARY 1 2 1 b 0 BINARY 0}",
          "45: do_execsql_test 2.3b {",
          "46:   SELECT *, '|' FROM pragma_index_xinfo('t2');",
          "47: } {0 0 a 0 nocase 1 | 1 0 a 0 BINARY 1 | 2 1 b 0 BINARY 0 |}",
          "49: do_execsql_test 2.4 {",
          "50:   CREATE TABLE t3(a, b, PRIMARY KEY(a COLLATE nocase, a));",
          "51:   PRAGMA index_info(t3);",
          "52: } {}",
          "56: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "915e434c3547b250b60ac37eea9276888cd8605f",
      "candidate_info": {
        "commit_hash": "915e434c3547b250b60ac37eea9276888cd8605f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/915e434c3547b250b60ac37eea9276888cd8605f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Performance optimization to the new affinity handling logic.\n\nFossilOrigin-Name: c9724e761bce7a4ae63ce3c1408795915865e8d3024dcb90690456f724f0df53",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e8234f6939ccff4c10f741cf66d1c537cfebcbd0d1d79a618a64c755a7f087b5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:     }else{",
          "240:       return SQLITE_AFF_BLOB;",
          "241:     }",
          "247:   }else{",
          "249:     assert( aff1<=SQLITE_AFF_NONE || aff2<=SQLITE_AFF_NONE );",
          "",
          "[Removed Lines]",
          "242:   }else if( aff1<=SQLITE_AFF_NONE && aff2<=SQLITE_AFF_NONE ){",
          "246:     return SQLITE_AFF_BLOB;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281: int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){",
          "282:   char aff = comparisonAffinity(pExpr);",
          "290:   }",
          "291: }",
          "",
          "[Removed Lines]",
          "283:   switch( aff ){",
          "284:     case SQLITE_AFF_BLOB:",
          "285:       return 1;",
          "286:     case SQLITE_AFF_TEXT:",
          "287:       return idx_affinity==SQLITE_AFF_TEXT;",
          "288:     default:",
          "289:       return sqlite3IsNumericAffinity(idx_affinity);",
          "",
          "[Added Lines]",
          "278:   if( aff<SQLITE_AFF_TEXT ){",
          "279:     return 1;",
          "280:   }",
          "281:   if( aff==SQLITE_AFF_TEXT ){",
          "282:     return idx_affinity==SQLITE_AFF_TEXT;",
          "284:   return sqlite3IsNumericAffinity(idx_affinity);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31ab7d8e5c2fc895d12907b71050b20f5987b891",
      "candidate_info": {
        "commit_hash": "31ab7d8e5c2fc895d12907b71050b20f5987b891",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31ab7d8e5c2fc895d12907b71050b20f5987b891",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/memdb.c",
          "test/fuzzcheck.c",
          "test/fuzzdata8.db"
        ],
        "message": "Extend fuzzcheck so that it can process dbsqlfuzz cases. Add a collection of interesting dbsqlfuzz cases to the standard test suite.\n\nFossilOrigin-Name: e2991a7ecf5dd241c4bab7c7cadc4901043fb0c3ea1fac70b684f6d8332677f1",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/memdb.c||src/memdb.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "589:   $(TOP)/test/fuzzdata4.db \\",
          "590:   $(TOP)/test/fuzzdata5.db \\",
          "591:   $(TOP)/test/fuzzdata6.db \\",
          "594: # Standard options to testfixture",
          "595: #",
          "",
          "[Removed Lines]",
          "592:   $(TOP)/test/fuzzdata7.db",
          "",
          "[Added Lines]",
          "592:   $(TOP)/test/fuzzdata7.db \\",
          "593:   $(TOP)/test/fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "612: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ",
          "613: FUZZCHECK_OPT += -DSQLITE_MAX_MEMORY=50000000",
          "614: FUZZCHECK_OPT += -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "615: FUZZCHECK_SRC = $(TOP)/test/fuzzcheck.c $(TOP)/test/ossfuzz.c",
          "616: DBFUZZ_OPT =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616: FUZZCHECK_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "617: FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS4",
          "618: #FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS5",
          "619: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "620: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "621: FUZZCHECK_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1626:   $(TOP)\\test\\fuzzdata4.db \\",
          "1627:   $(TOP)\\test\\fuzzdata5.db \\",
          "1628:   $(TOP)\\test\\fuzzdata6.db \\",
          "1630: # <</mark>>",
          "1632: # Additional compiler options for the shell.  These are only effective",
          "",
          "[Removed Lines]",
          "1629:   $(TOP)\\test\\fuzzdata7.db",
          "",
          "[Added Lines]",
          "1629:   $(TOP)\\test\\fuzzdata7.db \\",
          "1630:   $(TOP)\\test\\fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1644: #",
          "1645: MPTESTER_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_FTS5",
          "1646: FUZZERSHELL_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1",
          "1648: FUZZCHECK_SRC = $(TOP)\\test\\fuzzcheck.c $(TOP)\\test\\ossfuzz.c",
          "1649: OSSSHELL_SRC = $(TOP)\\test\\ossshell.c $(TOP)\\test\\ossfuzz.c",
          "1650: DBFUZZ_COMPILE_OPTS = -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION",
          "",
          "[Removed Lines]",
          "1647: FUZZCHECK_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ -DSQLITE_MAX_MEMORY=50000000 -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "",
          "[Added Lines]",
          "1648: FUZZCHECK_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ -DSQLITE_MAX_MEMORY=50000000 -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "1649: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DESERIALIZE",
          "1650: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_FTS4",
          "1651: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_RTREE",
          "1652: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_GEOPOLY",
          "1653: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1731:  $(LTLINK) $(NO_WARN) $(DBFUZZ_COMPILE_OPTS) $(TOP)\\test\\dbfuzz.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1733: fuzzcheck.exe: $(FUZZCHECK_SRC) $(SQLITE3C) $(SQLITE3H)",
          "1736: ossshell.exe: $(OSSSHELL_SRC) $(SQLITE3C) $(SQLITE3H)",
          "1739: sessionfuzz.exe: zlib $(TOP)\\test\\sessionfuzz.c $(SQLITE3C) $(SQLITE3H)",
          "1740:  $(LTLINK) $(NO_WARN) -I$(ZLIBINCDIR) $(TOP)\\test\\sessionfuzz.c /link $(LDFLAGS) $(LTLINKOPTS) /LIBPATH:$(ZLIBLIBDIR) $(ZLIBLIB)",
          "",
          "[Removed Lines]",
          "1734:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_COMPILE_OPTS) $(FUZZCHECK_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1737:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_COMPILE_OPTS) $(OSSSHELL_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "[Added Lines]",
          "1741:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_OPTS) $(FUZZCHECK_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1744:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_OPTS) $(OSSSHELL_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:   $(TOP)/test/fuzzdata4.db \\",
          "511:   $(TOP)/test/fuzzdata5.db \\",
          "512:   $(TOP)/test/fuzzdata6.db \\",
          "515: # Standard options to testfixture",
          "516: #",
          "",
          "[Removed Lines]",
          "513:   $(TOP)/test/fuzzdata7.db",
          "",
          "[Added Lines]",
          "513:   $(TOP)/test/fuzzdata7.db \\",
          "514:   $(TOP)/test/fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5",
          "532: FUZZCHECK_OPT += -DSQLITE_MAX_MEMORY=50000000",
          "533: FUZZCHECK_OPT += -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "534: DBFUZZ_OPT =",
          "535: KV_OPT = -DSQLITE_THREADSAFE=0 -DSQLITE_DIRECT_OVERFLOW_READ",
          "536: ST_OPT = -DSQLITE_THREADSAFE=0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535: FUZZCHECK_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "536: FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS4",
          "537: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "538: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "539: FUZZCHECK_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5eb5e8289fa71e5e29e081d33d4a59c64b463bf6b06d7070c05c46d77d808ad4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   void **pp",
          "311: ){",
          "312:   MemFile *p = (MemFile *)pFile;",
          "315:   return SQLITE_OK;",
          "316: }",
          "",
          "[Removed Lines]",
          "313:   p->nMmap++;",
          "",
          "[Added Lines]",
          "313:   if( iOfst+iAmt>p->sz ){",
          "314:     assert( CORRUPT_DB );",
          "316:   }else{",
          "317:     p->nMmap++;",
          "319:   }",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #include <string.h>",
          "70: #include <stdarg.h>",
          "71: #include <ctype.h>",
          "72: #include \"sqlite3.h\"",
          "73: #define ISSPACE(X) isspace((unsigned char)(X))",
          "74: #define ISDIGIT(X) isdigit((unsigned char)(X))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: #include <assert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:   return t;",
          "420: }",
          "424: static int inmemClose(sqlite3_file *pFile){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430: typedef struct FuzzCtx {",
          "439: } FuzzCtx;",
          "442: static int eVerbosity = 0;",
          "445: static int bVdbeDebug = 0;",
          "451: static unsigned int mxProgressCb = 2000;",
          "454: static int lengthLimit = 1000000;",
          "457: static int vdbeOpLimit = 25000;",
          "460: static sqlite3_int64 maxDbSize = 104857600;",
          "467: static unsigned int hexToInt(unsigned int h){",
          "468: #ifdef SQLITE_EBCDIC",
          "470: #else",
          "472: #endif",
          "473:   return h & 0xf;",
          "474: }",
          "483: static int isOffset(",
          "488: ){",
          "489:   int i;",
          "490:   unsigned int k = 0;",
          "491:   unsigned char c;",
          "492:   for(i=1; i<nIn && (c = zIn[i])!=']'; i++){",
          "493:     if( !isxdigit(c) ) return 0;",
          "494:     k = k*16 + hexToInt(c);",
          "495:   }",
          "496:   if( i==nIn ) return 0;",
          "499:   return 1;",
          "500: }",
          "513: static int decodeDatabase(",
          "518: ){",
          "526:   unsigned char b = 0;",
          "527:   if( nIn<4 ) return -1;",
          "528:   n = (unsigned int)nIn;",
          "529:   a = sqlite3_malloc( nAlloc );",
          "530:   if( a==0 ){",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "533:   }",
          "534:   memset(a, 0, nAlloc);",
          "535:   for(i=k=0; i<n; i++){",
          "536:     char c = zIn[i];",
          "537:     if( isxdigit(c) ){",
          "538:       k++;",
          "539:       if( k & 1 ){",
          "540:         b = hexToInt(c)*16;",
          "541:       }else{",
          "542:         b += hexToInt(c);",
          "543:         j = k/2 - 1;",
          "544:         if( j>=nAlloc ){",
          "545:           sqlite3_uint64 newSize;",
          "546:           if( nAlloc==MX_FILE_SZ || j>=MX_FILE_SZ ){",
          "547:             if( eVerbosity ){",
          "548:               fprintf(stderr, \"Input database too big: max %d bytes\\n\",",
          "549:                       MX_FILE_SZ);",
          "550:             }",
          "551:             sqlite3_free(a);",
          "552:             return -1;",
          "553:           }",
          "554:           newSize = nAlloc*2;",
          "555:           if( newSize<=j ){",
          "556:             newSize = (j+4096)&~4095;",
          "557:           }",
          "558:           if( newSize>MX_FILE_SZ ){",
          "559:             if( j>=MX_FILE_SZ ){",
          "560:               sqlite3_free(a);",
          "561:               return -1;",
          "562:             }",
          "563:             newSize = MX_FILE_SZ;",
          "564:           }",
          "565:           a = sqlite3_realloc( a, newSize );",
          "566:           if( a==0 ){",
          "567:             fprintf(stderr, \"Out of memory!\\n\");",
          "568:             exit(1);",
          "569:           }",
          "570:           assert( newSize > nAlloc );",
          "571:           memset(a+nAlloc, 0, newSize - nAlloc);",
          "572:           nAlloc = newSize;",
          "573:         }",
          "574:         if( j>=(unsigned)mx ){",
          "575:           mx = (j + 4095)&~4095;",
          "576:           if( mx>MX_FILE_SZ ) mx = MX_FILE_SZ;",
          "577:         }",
          "578:         assert( j<nAlloc );",
          "579:         a[j] = b;",
          "580:       }",
          "581:     }else if( zIn[i]=='[' && i<n-3 && isOffset(zIn+i, nIn-i, &k, &i) ){",
          "582:       continue;",
          "583:    }else if( zIn[i]=='\\n' && i<n-4 && memcmp(zIn+i,\"\\n--\\n\",4)==0 ){",
          "584:       i += 4;",
          "585:       break;",
          "586:     }",
          "587:   }",
          "590:   return i;",
          "591: }",
          "599: static int progress_handler(void *pClientData) {",
          "600:   FuzzCtx *p = (FuzzCtx*)pClientData;",
          "601:   sqlite3_int64 iNow = timeOfDay();",
          "602:   int rc = iNow>=p->iCutoffTime;",
          "603:   sqlite3_int64 iDiff = iNow - p->iLastCb;",
          "604:   if( iDiff > p->mxInterval ) p->mxInterval = iDiff;",
          "605:   p->nCb++;",
          "606:   if( rc==0 && p->mxCb>0 && p->mxCb<=p->nCb ) rc = 1;",
          "607:   if( rc && !p->timeoutHit && eVerbosity>=2 ){",
          "608:     printf(\"Timeout on progress callback %d\\n\", p->nCb);",
          "609:     fflush(stdout);",
          "610:     p->timeoutHit = 1;",
          "611:   }",
          "612:   return rc;",
          "613: }",
          "622: static int block_troublesome_sql(",
          "623:   void *Notused,",
          "624:   int eCode,",
          "625:   const char *zArg1,",
          "626:   const char *zArg2,",
          "627:   const char *zArg3,",
          "628:   const char *zArg4",
          "629: ){",
          "630:   (void)Notused;",
          "631:   (void)zArg2;",
          "632:   (void)zArg3;",
          "633:   (void)zArg4;",
          "634:   if( eCode==SQLITE_PRAGMA ){",
          "635:     if( sqlite3_strnicmp(\"vdbe_\", zArg1, 5)==0",
          "636:      || sqlite3_stricmp(\"parser_trace\", zArg1)==0",
          "637:      || sqlite3_stricmp(\"temp_store_directory\", zArg1)==0",
          "638:     ){",
          "639:       return SQLITE_DENY;",
          "640:     }",
          "641:   }else if( (eCode==SQLITE_ATTACH || eCode==SQLITE_DETACH)",
          "642:             && zArg1 && zArg1[0] ){",
          "643:     return SQLITE_DENY;",
          "644:   }",
          "645:   return SQLITE_OK;",
          "646: }",
          "651: static int runDbSql(sqlite3 *db, const char *zSql){",
          "652:   int rc;",
          "653:   sqlite3_stmt *pStmt;",
          "654:   while( isspace(zSql[0]) ) zSql++;",
          "655:   if( zSql[0]==0 ) return SQLITE_OK;",
          "656:   if( eVerbosity>=4 ){",
          "657:     printf(\"RUNNING-SQL: [%s]\\n\", zSql);",
          "658:     fflush(stdout);",
          "659:   }",
          "660:   rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, 0);",
          "661:   if( rc==SQLITE_OK ){",
          "662:     while( (rc = sqlite3_step(pStmt))==SQLITE_ROW ){",
          "663:       if( eVerbosity>=5 ){",
          "664:         int j;",
          "665:         for(j=0; j<sqlite3_column_count(pStmt); j++){",
          "666:           if( j ) printf(\",\");",
          "667:           switch( sqlite3_column_type(pStmt, j) ){",
          "668:             case SQLITE_NULL: {",
          "669:               printf(\"NULL\");",
          "670:               break;",
          "671:             }",
          "672:             case SQLITE_INTEGER:",
          "673:             case SQLITE_FLOAT: {",
          "674:               printf(\"%s\", sqlite3_column_text(pStmt, j));",
          "675:               break;",
          "676:             }",
          "677:             case SQLITE_BLOB: {",
          "678:               int n = sqlite3_column_bytes(pStmt, j);",
          "679:               int i;",
          "680:               const unsigned char *a;",
          "681:               a = (const unsigned char*)sqlite3_column_blob(pStmt, j);",
          "682:               printf(\"x'\");",
          "683:               for(i=0; i<n; i++){",
          "684:                 printf(\"%02x\", a[i]);",
          "685:               }",
          "686:               printf(\"'\");",
          "687:               break;",
          "688:             }",
          "689:             case SQLITE_TEXT: {",
          "690:               int n = sqlite3_column_bytes(pStmt, j);",
          "691:               int i;",
          "692:               const unsigned char *a;",
          "693:               a = (const unsigned char*)sqlite3_column_blob(pStmt, j);",
          "694:               printf(\"'\");",
          "695:               for(i=0; i<n; i++){",
          "696:                 if( a[i]=='\\'' ){",
          "697:                   printf(\"''\");",
          "698:                 }else{",
          "699:                   putchar(a[i]);",
          "700:                 }",
          "701:               }",
          "702:               printf(\"'\");",
          "703:               break;",
          "704:             }",
          "707:         printf(\"\\n\");",
          "708:         fflush(stdout);",
          "711:     if( rc!=SQLITE_DONE && eVerbosity>=4 ){",
          "712:       printf(\"SQL-ERROR: (%d) %s\\n\", rc, sqlite3_errmsg(db));",
          "713:       fflush(stdout);",
          "714:     }",
          "715:   }else if( eVerbosity>=4 ){",
          "716:     printf(\"SQL-ERROR (%d): %s\\n\", rc, sqlite3_errmsg(db));",
          "717:     fflush(stdout);",
          "719:   return sqlite3_finalize(pStmt);",
          "720: }",
          "723: int runCombinedDbSqlInput(const uint8_t *aData, size_t nByte){",
          "734:   if( nByte<10 ) return 0;",
          "735:   if( sqlite3_initialize() ) return 0;",
          "736:   if( sqlite3_memory_used()!=0 ){",
          "737:     int nAlloc = 0;",
          "738:     int nNotUsed = 0;",
          "739:     sqlite3_status(SQLITE_STATUS_MALLOC_COUNT, &nAlloc, &nNotUsed, 0);",
          "740:     fprintf(stderr,\"Memory leak in mutator: %lld bytes in %d allocations\\n\",",
          "741:             sqlite3_memory_used(), nAlloc);",
          "742:     exit(1);",
          "743:   }",
          "744:   memset(&cx, 0, sizeof(cx));",
          "745:   iSql = decodeDatabase((unsigned char*)aData, (int)nByte, &aDb, &nDb);",
          "746:   if( iSql<0 ) return 0;",
          "747:   nSql = nByte - iSql;",
          "748:   if( eVerbosity>=3 ){",
          "749:     printf(",
          "750:       \"****** %d-byte input, %d-byte database, %d-byte script \"",
          "751:       \"******\\n\", (int)nByte, nDb, nSql);",
          "752:     fflush(stdout);",
          "753:   }",
          "754:   rc = sqlite3_open(0, &cx.db);",
          "755:   if( rc ) return 1;",
          "756:   if( bVdbeDebug ){",
          "757:     sqlite3_exec(cx.db, \"PRAGMA vdbe_debug=ON\", 0, 0, 0);",
          "758:   }",
          "765:   cx.iLastCb = timeOfDay();",
          "767:   cx.mxCb = mxProgressCb;",
          "768: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "769:   sqlite3_progress_handler(cx.db, 10, progress_handler, (void*)&cx);",
          "770: #endif",
          "774:   if( vdbeOpLimit>0 ){",
          "775:     sqlite3_limit(cx.db, SQLITE_LIMIT_VDBE_OP, vdbeOpLimit);",
          "776:   }",
          "777:   if( lengthLimit>0 ){",
          "778:     sqlite3_limit(cx.db, SQLITE_LIMIT_LENGTH, lengthLimit);",
          "779:   }",
          "781:   if( nDb>=20 && aDb[18]==2 && aDb[19]==2 ){",
          "782:     aDb[18] = aDb[19] = 1;",
          "783:   }",
          "784:   rc = sqlite3_deserialize(cx.db, \"main\", aDb, nDb, nDb,",
          "785:           SQLITE_DESERIALIZE_RESIZEABLE |",
          "786:           SQLITE_DESERIALIZE_FREEONCLOSE);",
          "787:   if( rc ){",
          "788:     fprintf(stderr, \"sqlite3_deserialize() failed with %d\\n\", rc);",
          "789:     goto testrun_finished;",
          "790:   }",
          "791:   if( maxDbSize>0 ){",
          "792:     sqlite3_int64 x = maxDbSize;",
          "793:     sqlite3_file_control(cx.db, \"main\", SQLITE_FCNTL_SIZE_LIMIT, &x);",
          "794:   }",
          "797:   if( eVerbosity>=5 ){",
          "798:     sqlite3_exec(cx.db, \"PRAGMA vdbe_debug=ON;\", 0, 0, 0);",
          "799:   }",
          "803:   sqlite3_set_authorizer(cx.db, block_troublesome_sql, 0);",
          "806:   sqlite3_randomness(0,0);",
          "808:   zSql = sqlite3_malloc( nSql + 1 );",
          "809:   if( zSql==0 ){",
          "810:     fprintf(stderr, \"Out of memory!\\n\");",
          "811:   }else{",
          "812:     memcpy(zSql, aData+iSql, nSql);",
          "813:     zSql[nSql] = 0;",
          "814:     for(i=j=0; zSql[i]; i++){",
          "815:       if( zSql[i]==';' ){",
          "816:         char cSaved = zSql[i+1];",
          "817:         zSql[i+1] = 0;",
          "818:         if( sqlite3_complete(zSql+j) ){",
          "819:           rc = runDbSql(cx.db, zSql+j);",
          "820:           j = i+1;",
          "821:         }",
          "822:         zSql[i+1] = cSaved;",
          "823:         if( rc==SQLITE_INTERRUPT || progress_handler(&cx) ){",
          "824:           goto testrun_finished;",
          "825:         }",
          "826:       }",
          "827:     }",
          "828:     if( j<i ){",
          "829:       runDbSql(cx.db, zSql+j);",
          "830:     }",
          "831:   }",
          "832: testrun_finished:",
          "833:   sqlite3_free(zSql);",
          "834:   rc = sqlite3_close(cx.db);",
          "835:   if( rc!=SQLITE_OK ){",
          "836:     fprintf(stdout, \"sqlite3_close() returns %d\\n\", rc);",
          "837:   }",
          "838:   if( eVerbosity>=2 ){",
          "839:     fprintf(stdout, \"Peak memory usages: %f MB\\n\",",
          "840:        sqlite3_memory_highwater(1) / 1000000.0);",
          "841:   }",
          "842:   if( sqlite3_memory_used()!=0 ){",
          "843:     int nAlloc = 0;",
          "844:     int nNotUsed = 0;",
          "845:     sqlite3_status(SQLITE_STATUS_MALLOC_COUNT, &nAlloc, &nNotUsed, 0);",
          "846:     fprintf(stderr,\"Memory leak: %lld bytes in %d allocations\\n\",",
          "847:             sqlite3_memory_used(), nAlloc);",
          "848:     exit(1);",
          "849:   }",
          "850:   return 0;",
          "851: }",
          "861: static int isDbSql(unsigned char *a, int n){",
          "862:   unsigned char buf[12];",
          "863:   int i;",
          "864:   if( n>4 && memcmp(a,\"\\n--\\n\",4)==0 ) return 1;",
          "865:   while( n>0 && isspace(a[0]) ){ a++; n--; }",
          "866:   for(i=0; n>0 && i<8; n--, a++){",
          "867:     if( isxdigit(a[0]) ) buf[i++] = a[0];",
          "868:   }",
          "869:   if( i==8 && memcmp(buf,\"53514c69\",8)==0 ) return 1;",
          "870:   return 0;",
          "871: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "795:   return (int)(isNeg? -v : v);",
          "796: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1254: static int numberOfVChar(const char *z){",
          "1255:   int N = 0;",
          "1256:   while( z[0] && z[0]=='v' ){",
          "1257:     z++;",
          "1258:     N++;",
          "1259:   }",
          "1260:   return z[0]==0 ? N : 0;",
          "1261: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "951:       if( strcmp(z,\"quiet\")==0 || strcmp(z,\"q\")==0 ){",
          "952:         quietFlag = 1;",
          "953:         verboseFlag = 0;",
          "954:       }else",
          "955:       if( strcmp(z,\"rebuild\")==0 ){",
          "956:         rebuildFlag = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1420:         eVerbosity = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "973:         fatalError(\"timeout is not available on non-unix systems\");",
          "974: #endif",
          "975:       }else",
          "977:         quietFlag = 0;",
          "978:         verboseFlag++;",
          "979:         if( verboseFlag>1 ) runFlags |= SQL_TRACE;",
          "980:       }else",
          "981:       {",
          "982:         fatalError(\"unknown option: %s\", argv[i]);",
          "983:       }",
          "",
          "[Removed Lines]",
          "976:       if( strcmp(z,\"verbose\")==0 || strcmp(z,\"v\")==0 ){",
          "",
          "[Added Lines]",
          "1443:       if( strcmp(z,\"verbose\")==0 ){",
          "1446:         eVerbosity++;",
          "1447:         if( verboseFlag>1 ) runFlags |= SQL_TRACE;",
          "1448:       }else",
          "1449:       if( (nV = numberOfVChar(z))>=1 ){",
          "1450:         quietFlag = 0;",
          "1451:         verboseFlag += nV;",
          "1452:         eVerbosity += nV;",
          "1455:       if( strcmp(z,\"version\")==0 ){",
          "1456:         int ii;",
          "1457:         const char *z;",
          "1458:         printf(\"SQLite %s %s\\n\", sqlite3_libversion(), sqlite3_sourceid());",
          "1459:         for(ii=0; (z = sqlite3_compileoption_get(ii))!=0; ii++){",
          "1460:           printf(\"%s\\n\", z);",
          "1461:         }",
          "1462:         return 0;",
          "1463:       }else",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1231:     if( !verboseFlag && !quietFlag ) printf(\"%s:\", zDbName);",
          "1232:     for(pSql=g.pFirstSql; pSql; pSql=pSql->pNext){",
          "1233:       for(pDb=g.pFirstDb; pDb; pDb=pDb->pNext){",
          "1234:         int openFlags;",
          "1235:         const char *zVfs = \"inmem\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1716:       if( isDbSql(pSql->a, pSql->sz) ){",
          "1717:         sqlite3_snprintf(sizeof(g.zTestName), g.zTestName, \"sqlid=%d\",pSql->id);",
          "1718:         if( verboseFlag ){",
          "1719:           printf(\"%s\\n\", g.zTestName);",
          "1720:           fflush(stdout);",
          "1721:         }else if( !quietFlag ){",
          "1722:           static int prevAmt = -1;",
          "1723:           int idx = pSql->seq;",
          "1724:           int amt = idx*10/(g.nSql);",
          "1725:           if( amt!=prevAmt ){",
          "1726:             printf(\" %d%%\", amt*10);",
          "1727:             fflush(stdout);",
          "1728:             prevAmt = amt;",
          "1729:           }",
          "1730:         }",
          "1731:         runCombinedDbSqlInput(pSql->a, pSql->sz);",
          "1732:         nTest++;",
          "1733:         g.zTestName[0] = 0;",
          "1734:         continue;",
          "1735:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66cc2ca83ac7804e2eea5ed0c3fa5f7ee407453c",
      "candidate_info": {
        "commit_hash": "66cc2ca83ac7804e2eea5ed0c3fa5f7ee407453c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/66cc2ca83ac7804e2eea5ed0c3fa5f7ee407453c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test case in fuzzdata8.db.\n\nFossilOrigin-Name: e96641f0be7d4454215459b0a95cf1c46ba0133e46d0bae22269741c8f4e5b44",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 25b89630206fdbb41c756e98f99baa711d35a8c226697a92339d0fe7e8b3652a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b48c727219aab785d87ace3c44482779480922a",
      "candidate_info": {
        "commit_hash": "4b48c727219aab785d87ace3c44482779480922a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4b48c727219aab785d87ace3c44482779480922a",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a \"jump depends on unititialized value\" valgrind error in fts5 triggered by corrupt database records.\n\nFossilOrigin-Name: 6b6751cd90601a1e2744a7d233c973291ecb783801b9327c3b99734dd22bcd27",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "713: static Fts5Data *fts5LeafRead(Fts5Index *p, i64 iRowid){",
          "714:   Fts5Data *pRet = fts5DataRead(p, iRowid);",
          "715:   if( pRet ){",
          "717:       p->rc = FTS5_CORRUPT;",
          "718:       fts5DataRelease(pRet);",
          "719:       pRet = 0;",
          "",
          "[Removed Lines]",
          "716:     if( pRet->szLeaf>pRet->nn ){",
          "",
          "[Added Lines]",
          "716:     if( pRet->nn<4 || pRet->szLeaf>pRet->nn ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "9693:   SELECT ( MATCH (t1,591)) FROM t1 WHERE t1 MATCH 'e*e\u0178'",
          "9694: } {1 {database disk image is malformed}}",
          "9698: sqlite3_fts5_may_be_corrupt 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9696: #-------------------------------------------------------------------------",
          "9697: #",
          "9698: reset_db",
          "9699: do_test 66.0 {",
          "9700:   sqlite3 db {}",
          "9701:   db deserialize [decode_hexdb {",
          "9702: .open --hexdb",
          "9703: | size 28672 pagesize 4096 filename crash-37cecb4e784e9f.db",
          "9704: | page 1 offset 0",
          "9705: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "9706: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "9707: |     96: 00 00 00 00 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ...............m",
          "9708: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "9709: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "9710: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "9711: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "9712: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "9713: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "9714: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "9715: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "9716: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "9717: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "9718: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "9719: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "9720: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "9721: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "9722: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "9723: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "9724: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "9725: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "9726: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "9727: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "9728: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "9729: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "9730: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "9731: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "9732: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "9733: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "9734: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "9735: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "9736: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "9737: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "9738: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "9739: |   4016: 41 52 49 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARI KEY, block B",
          "9740: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "9741: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "9742: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "9743: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "9744: | page 2 offset 4096",
          "9745: |      0: 0d 00 00 00 03 0f bd 00 0f e8 0f ef 0f bd 00 01   ................",
          "9746: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 24 84 80   .............$..",
          "9747: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "9748: |   4048: 63 6b 01 02 02 04 02 66 74 02 02 02 04 04 6e 64   ck.....ft.....nd",
          "9749: |   4064: 6f 6e 03 02 02 04 0a 07 05 01 03 00 10 03 03 0f   on..............",
          "9750: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 00 01 01   ...$............",
          "9751: | page 3 offset 8192",
          "9752: |      0: 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "9753: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "9754: | page 4 offset 12288",
          "9755: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 00 00   ................",
          "9756: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "9757: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "9758: | page 5 offset 16384",
          "9759: |      0: 0d 00 00 00 03 0f ee 00 0f fa 0f f4 0f ee 00 00   ................",
          "9760: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03   ................",
          "9761: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "9762: | page 6 offset 20480",
          "9763: |      0: 0a 00 00 01 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "9764: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "9765: | page 7 offset 24576",
          "9766: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "9767: |   4048: 00 00 00 00 00 00 09 01 52 1b 72 65 62 75 69 6c   ........R.rebuil",
          "9768: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "9769: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "9770: | end crash-37cecb4e784e9f.db",
          "9771: }]} {}",
          "9773: do_catchsql_test 66.1 {",
          "9774:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "9775: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d49047c1b59bbfd05204af9973cdb0fab51b4d2661b550aec10d917fff94dc9b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}