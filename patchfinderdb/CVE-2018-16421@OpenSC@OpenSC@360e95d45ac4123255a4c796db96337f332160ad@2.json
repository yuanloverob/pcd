{
  "cve_id": "CVE-2018-16421",
  "cve_desc": "Several buffer overflows when handling responses from a CAC Card in cac_get_serial_nr_from_CUID in libopensc/card-cac.c in OpenSC before 0.19.0-rc1 could be used by attackers able to supply crafted smartcards to cause a denial of service (application crash) or possibly have unspecified other impact.",
  "repo": "OpenSC/OpenSC",
  "patch_hash": "360e95d45ac4123255a4c796db96337f332160ad",
  "patch_info": {
    "commit_hash": "360e95d45ac4123255a4c796db96337f332160ad",
    "repo": "OpenSC/OpenSC",
    "commit_url": "https://github.com/OpenSC/OpenSC/commit/360e95d45ac4123255a4c796db96337f332160ad",
    "files": [
      "src/libopensc/card-cac.c",
      "src/libopensc/card-epass2003.c",
      "src/libopensc/card-muscle.c",
      "src/libopensc/card-tcos.c",
      "src/libopensc/pkcs15-esteid.c",
      "src/libopensc/pkcs15-gemsafeV1.c",
      "src/libopensc/pkcs15-sc-hsm.c",
      "src/libopensc/sc.c",
      "src/tools/cryptoflex-tool.c",
      "src/tools/egk-tool.c",
      "src/tools/util.c"
    ],
    "message": "fixed out of bounds writes\n\nThanks to Eric Sesterhenn from X41 D-SEC GmbH\nfor reporting the problems.",
    "before_after_code_files": [
      "src/libopensc/card-cac.c||src/libopensc/card-cac.c",
      "src/libopensc/card-epass2003.c||src/libopensc/card-epass2003.c",
      "src/libopensc/card-muscle.c||src/libopensc/card-muscle.c",
      "src/libopensc/card-tcos.c||src/libopensc/card-tcos.c",
      "src/libopensc/pkcs15-esteid.c||src/libopensc/pkcs15-esteid.c",
      "src/libopensc/pkcs15-gemsafeV1.c||src/libopensc/pkcs15-gemsafeV1.c",
      "src/libopensc/pkcs15-sc-hsm.c||src/libopensc/pkcs15-sc-hsm.c",
      "src/libopensc/sc.c||src/libopensc/sc.c",
      "src/tools/cryptoflex-tool.c||src/tools/cryptoflex-tool.c",
      "src/tools/egk-tool.c||src/tools/egk-tool.c",
      "src/tools/util.c||src/tools/util.c"
    ]
  },
  "patch_diff": {
    "src/libopensc/card-cac.c||src/libopensc/card-cac.c": [
      "File: src/libopensc/card-cac.c -> src/libopensc/card-cac.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "794:         }",
      "795:  if (priv->cac_id_len) {",
      "796:   serial->len = MIN(priv->cac_id_len, SC_MAX_SERIALNR);",
      "798:   SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_NORMAL, SC_SUCCESS);",
      "799:  }",
      "800:  SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_NORMAL, SC_ERROR_FILE_NOT_FOUND);",
      "",
      "[Removed Lines]",
      "797:   memcpy(serial->value, priv->cac_id, priv->cac_id_len);",
      "",
      "[Added Lines]",
      "797:   memcpy(serial->value, priv->cac_id, serial->len);",
      "",
      "---------------"
    ],
    "src/libopensc/card-epass2003.c||src/libopensc/card-epass2003.c": [
      "File: src/libopensc/card-epass2003.c -> src/libopensc/card-epass2003.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "951:  while (0x80 != plaintext[cipher_len - 2] && (cipher_len - 2 > 0))",
      "952:   cipher_len--;",
      "955:   return -1;",
      "957:  memcpy(out, plaintext, cipher_len - 2);",
      "",
      "[Removed Lines]",
      "954:  if (2 == cipher_len)",
      "",
      "[Added Lines]",
      "954:  if (2 == cipher_len || *out_len < cipher_len - 2)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "977:  r = sc_check_sw(card, sm->sw1, sm->sw2);",
      "978:  if (r == SC_SUCCESS) {",
      "979:   if (exdata->sm) {",
      "980:    if (0 != decrypt_response(card, sm->resp, sm->resplen, plain->resp, &len))",
      "981:     return SC_ERROR_CARD_CMD_FAILED;",
      "982:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "980:    len = plain->resplen;",
      "",
      "---------------"
    ],
    "src/libopensc/card-muscle.c||src/libopensc/card-muscle.c": [
      "File: src/libopensc/card-muscle.c -> src/libopensc/card-muscle.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "518:  mscfs_check_cache(priv->fs);",
      "520:  for(x = 0; x < fs->cache.size; x++) {",
      "522:   sc_debug(card->ctx, SC_LOG_DEBUG_NORMAL,",
      "523:    \"FILE: %02X%02X%02X%02X\\n\",",
      "524:    oid[0],oid[1],oid[2],oid[3]);",
      "",
      "[Removed Lines]",
      "521:   u8* oid= fs->cache.array[x].objectId.id;",
      "",
      "[Added Lines]",
      "521:   u8* oid = fs->cache.array[x].objectId.id;",
      "522:   if (bufLen < 2)",
      "523:    break;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "527:    buf[1] = oid[3];",
      "529:    buf += 2;",
      "531:   }",
      "532:  }",
      "533:  return count;",
      "",
      "[Removed Lines]",
      "530:    count+=2;",
      "",
      "[Added Lines]",
      "532:    count += 2;",
      "533:    bufLen -= 2;",
      "",
      "---------------"
    ],
    "src/libopensc/card-tcos.c||src/libopensc/card-tcos.c": [
      "File: src/libopensc/card-tcos.c -> src/libopensc/card-tcos.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "408:  file->path = *in_path;",
      "410:  for(i=2; i+1<apdu.resplen && i+1+apdu.resp[i+1]<apdu.resplen; i+=2+apdu.resp[i+1]){",
      "412:   unsigned char type=apdu.resp[i], *d=apdu.resp+i+2;",
      "414:   switch (type) {",
      "",
      "[Removed Lines]",
      "411:   int j, len=apdu.resp[i+1];",
      "",
      "[Added Lines]",
      "411:   size_t j, len=apdu.resp[i+1];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "432:    file->id = (d[0]<<8) | d[1];",
      "433:    break;",
      "434:   case 0x84:",
      "437:    break;",
      "438:   case 0x86:",
      "439:    sc_file_set_sec_attr(file, d, len);",
      "",
      "[Removed Lines]",
      "435:    memcpy(file->name, d, len);",
      "436:    file->namelen = len;",
      "",
      "[Added Lines]",
      "435:    file->namelen = MIN(sizeof file->name, len);",
      "436:    memcpy(file->name, d, file->namelen);",
      "",
      "---------------"
    ],
    "src/libopensc/pkcs15-esteid.c||src/libopensc/pkcs15-esteid.c": [
      "File: src/libopensc/pkcs15-esteid.c -> src/libopensc/pkcs15-esteid.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:  r = sc_read_record (card, SC_ESTEID_PD_DOCUMENT_NR, buff, sizeof(buff), SC_RECORD_BY_REC_NR);",
      "81:  SC_TEST_RET(card->ctx, SC_LOG_DEBUG_NORMAL, r, \"read document number failed\");",
      "83:  set_string (&p15card->tokeninfo->serial_number, (const char *) buff);",
      "85:  p15card->tokeninfo->flags = SC_PKCS15_TOKEN_PRN_GENERATION",
      "",
      "[Removed Lines]",
      "82:  buff[r] = '\\0';",
      "",
      "[Added Lines]",
      "82:  buff[MIN((size_t) r, (sizeof buff)-1)] = '\\0';",
      "",
      "---------------"
    ],
    "src/libopensc/pkcs15-gemsafeV1.c||src/libopensc/pkcs15-gemsafeV1.c": [
      "File: src/libopensc/pkcs15-gemsafeV1.c -> src/libopensc/pkcs15-gemsafeV1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "212:   if (ibuf[ind+1] == 0xFE) {",
      "213:    gemsafe_prkeys[i].ref = ibuf[ind+4];",
      "214:    sc_log(card->ctx, \"Key container %d is allocated and uses key_ref %d\",",
      "",
      "[Removed Lines]",
      "211:  while (ibuf[ind] == 0x01) {",
      "",
      "[Added Lines]",
      "211:  while (ibuf[ind] == 0x01 && i < gemsafe_cert_max) {",
      "",
      "---------------"
    ],
    "src/libopensc/pkcs15-sc-hsm.c||src/libopensc/pkcs15-sc-hsm.c": [
      "File: src/libopensc/pkcs15-sc-hsm.c -> src/libopensc/pkcs15-sc-hsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "837:   r = read_file(p15card, (u8 *) \"\\x2F\\x02\", efbin, &len, 1);",
      "838:   LOG_TEST_RET(card->ctx, r, \"Skipping optional EF.C_DevAut\");",
      "846:   }",
      "848:   ptr = efbin;",
      "",
      "[Removed Lines]",
      "841:   ptr = realloc(priv->EF_C_DevAut, len);",
      "842:   if (ptr) {",
      "843:    memcpy(ptr, efbin, len);",
      "844:    priv->EF_C_DevAut = ptr;",
      "845:    priv->EF_C_DevAut_len = len;",
      "",
      "[Added Lines]",
      "840:   if (len > 0) {",
      "842:    ptr = realloc(priv->EF_C_DevAut, len);",
      "843:    if (ptr) {",
      "844:     memcpy(ptr, efbin, len);",
      "845:     priv->EF_C_DevAut = ptr;",
      "846:     priv->EF_C_DevAut_len = len;",
      "847:    }",
      "",
      "---------------"
    ],
    "src/libopensc/sc.c||src/libopensc/sc.c": [
      "File: src/libopensc/sc.c -> src/libopensc/sc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "628:   return SC_ERROR_INVALID_ARGUMENTS;",
      "629:  }",
      "632:   if (file->sec_attr != NULL)",
      "633:    free(file->sec_attr);",
      "634:   file->sec_attr = NULL;",
      "",
      "[Removed Lines]",
      "631:  if (sec_attr == NULL) {",
      "",
      "[Added Lines]",
      "631:  if (sec_attr == NULL || sec_attr_len) {",
      "",
      "---------------"
    ],
    "src/tools/cryptoflex-tool.c||src/tools/cryptoflex-tool.c": [
      "File: src/tools/cryptoflex-tool.c -> src/tools/cryptoflex-tool.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: #include \"config.h\"",
      "23: #include \"libopensc/sc-ossl-compat.h\"",
      "24: #include <openssl/bn.h>",
      "25: #include <openssl/rsa.h>",
      "26: #include <openssl/x509.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: #include \"libopensc/internal.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "331:   fprintf(stderr, \"Unable to select public key file: %s\\n\", sc_strerror(r));",
      "332:   return 2;",
      "333:  }",
      "335:  sc_file_free(file);",
      "336:  r = sc_read_binary(card, 0, buf, bufsize, 0);",
      "337:  if (r < 0) {",
      "",
      "[Removed Lines]",
      "334:  bufsize = file->size;",
      "",
      "[Added Lines]",
      "335:  bufsize = MIN(file->size, sizeof buf);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "382:  e = sc_file_get_acl_entry(file, SC_AC_OP_READ);",
      "383:  if (e == NULL || e->method == SC_AC_NEVER)",
      "384:   return 10;",
      "386:  sc_file_free(file);",
      "387:  r = sc_read_binary(card, 0, buf, bufsize, 0);",
      "388:  if (r < 0) {",
      "",
      "[Removed Lines]",
      "385:  bufsize = file->size;",
      "",
      "[Added Lines]",
      "386:  bufsize = MIN(file->size, sizeof buf);",
      "",
      "---------------"
    ],
    "src/tools/egk-tool.c||src/tools/egk-tool.c": [
      "File: src/tools/egk-tool.c -> src/tools/egk-tool.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   goto err;",
      "150:  }",
      "153:  p = realloc(*data, len);",
      "154:  if (!p) {",
      "155:   goto err;",
      "",
      "[Removed Lines]",
      "152:  len = file ? file->size : 4096;",
      "",
      "[Added Lines]",
      "152:  len = file && file->size > 0 ? file->size : 4096;",
      "",
      "---------------"
    ],
    "src/tools/util.c||src/tools/util.c": [
      "File: src/tools/util.c -> src/tools/util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "339:    strcpy(buf, \"????\");",
      "340:    break;",
      "341:   }",
      "344:   e = e->next;",
      "345:  }",
      "347:  return line;",
      "348: }",
      "",
      "[Removed Lines]",
      "342:   strcat(line, buf);",
      "343:   strcat(line, \" \");",
      "",
      "[Added Lines]",
      "342:   strncat(line, buf, sizeof line);",
      "343:   strncat(line, \" \", sizeof line);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "92a98cb3bb1719b0100b033aae1c3c1f2679e7c8",
      "candidate_info": {
        "commit_hash": "92a98cb3bb1719b0100b033aae1c3c1f2679e7c8",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/92a98cb3bb1719b0100b033aae1c3c1f2679e7c8",
        "files": [
          "src/libopensc/card-mcrd.c"
        ],
        "message": "mcrd: converted assert to proper error handling",
        "before_after_code_files": [
          "src/libopensc/card-mcrd.c||src/libopensc/card-mcrd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/card-mcrd.c||src/libopensc/card-mcrd.c": [
          "File: src/libopensc/card-mcrd.c -> src/libopensc/card-mcrd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:  struct mcrd_priv_data *priv = DRVDATA(card);",
          "150:  struct df_info_s *dfi;",
          "154:  if (!priv->curpathlen) {",
          "155:   sc_log(ctx, \"no current path to find the df_info\\n\");",
          "",
          "[Removed Lines]",
          "152:  assert(!priv->is_ef);",
          "",
          "[Added Lines]",
          "152:  if(!(!priv->is_ef))",
          "153:   return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:  int r;",
          "203:  u8 sbuf[SC_MAX_APDU_BUFFER_SIZE];",
          "206:  sc_format_apdu(card, &apdu, SC_APDU_CASE_3_SHORT, 0x22, 0x41, 0xA4);",
          "208:  sbuf[0] = 0x83;",
          "",
          "[Removed Lines]",
          "205:  assert(card != NULL);",
          "",
          "[Added Lines]",
          "206:  if(!(card != NULL))",
          "207:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:  sc_apdu_t apdu;",
          "221:  int r;",
          "222:  u8 sbuf[SC_MAX_APDU_BUFFER_SIZE];",
          "225:  sc_format_apdu(card, &apdu, SC_APDU_CASE_3_SHORT, 0x22, 0x41, 0xB6);",
          "",
          "[Removed Lines]",
          "223:  assert(card != NULL);",
          "",
          "[Added Lines]",
          "225:  if(!(card != NULL))",
          "226:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:  int r;",
          "243:  u8 sbuf[SC_MAX_APDU_BUFFER_SIZE];",
          "244:  u8 keyref_data[SC_ESTEID_KEYREF_FILE_RECLEN];",
          "247:  sc_format_apdu(card, &apdu, SC_APDU_CASE_3_SHORT, 0x22, 0x41, 0xB8);",
          "",
          "[Removed Lines]",
          "245:  assert(card != NULL);",
          "",
          "[Added Lines]",
          "248:  if(!(card != NULL))",
          "249:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "957:  SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);",
          "961:  if (pathlen && *pathptr == 0x3FFF) {",
          "962:   pathlen--;",
          "",
          "[Removed Lines]",
          "959:  assert(!priv->curpathlen || priv->curpath[0] == MFID);",
          "",
          "[Added Lines]",
          "963:  if (!(!priv->curpathlen || priv->curpath[0] == MFID))",
          "964:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "998:        we need to get the FCI, so we have",
          "1001:     priv->curpathlen--;",
          "1002:     priv->is_ef = 0;",
          "1003:     r = select_down(card, pathptr + pathlen - 1, 1,",
          "",
          "[Removed Lines]",
          "1000:     assert(priv->curpathlen > 1);",
          "",
          "[Added Lines]",
          "1005:     if (!(priv->curpathlen > 1))",
          "1006:      return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1022:    priv->is_ef = 0;",
          "1023:   }",
          "1024:   if (priv->is_ef) {",
          "1026:    priv->curpathlen--;",
          "1027:    priv->is_ef = 0;",
          "1028:   }",
          "",
          "[Removed Lines]",
          "1025:    assert(priv->curpathlen > 1);",
          "",
          "[Added Lines]",
          "1031:    if(!(priv->curpathlen > 1))",
          "1032:     return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1041:  SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);",
          "1045:  if (pathlen > 1)",
          "1046:   return SC_ERROR_INVALID_ARGUMENTS;",
          "",
          "[Removed Lines]",
          "1043:  assert(!priv->curpathlen || priv->curpath[0] == MFID);",
          "",
          "[Added Lines]",
          "1050:  if (!(!priv->curpathlen || priv->curpath[0] == MFID))",
          "1051:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1057:    r = SC_ERROR_INTERNAL;",
          "1058:   } else {",
          "1060:    priv->curpathlen--;",
          "1061:    priv->is_ef = 0;",
          "1062:    r = select_down(card, pathptr, 1, 0, file);",
          "",
          "[Removed Lines]",
          "1059:    assert(priv->curpathlen > 1);",
          "",
          "[Added Lines]",
          "1067:    if (!(priv->curpathlen > 1))",
          "1068:     return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1081:    priv->is_ef = 0;",
          "1082:   }",
          "1083:   if (priv->is_ef) {",
          "1085:    priv->curpathlen--;",
          "1086:    priv->is_ef = 0;",
          "1087:   }",
          "",
          "[Removed Lines]",
          "1084:    assert(priv->curpathlen > 1);",
          "",
          "[Added Lines]",
          "1093:    if (!(priv->curpathlen > 1))",
          "1094:     return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1209:  u8 *p;",
          "1210:  int r, locked = 0;",
          "1213:  SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_NORMAL);",
          "",
          "[Removed Lines]",
          "1212:  assert(card != NULL && env != NULL);",
          "",
          "[Added Lines]",
          "1222:  if (!(card != NULL && env != NULL))",
          "1223:   return SC_ERROR_INTERNAL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "384626533e3596f796f860a37ebb72e093939c41",
      "candidate_info": {
        "commit_hash": "384626533e3596f796f860a37ebb72e093939c41",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/384626533e3596f796f860a37ebb72e093939c41",
        "files": [
          "src/libopensc/card-piv.c"
        ],
        "message": "PIV Security Changes\n\nAdd return code if \"out\" is smaller then received data.\n\nRemove extra blanks.",
        "before_after_code_files": [
          "src/libopensc/card-piv.c||src/libopensc/card-piv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/card-piv.c||src/libopensc/card-piv.c": [
          "File: src/libopensc/card-piv.c -> src/libopensc/card-piv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2369:  r = piv_general_io(card, 0x87, real_alg_id, priv->key_ref,",
          "2370:    sbuf, p - sbuf, &rbuf, &rbuflen);",
          "2375:   if (body) {",
          "2376:    tag = sc_asn1_find_tag(card->ctx, body,  bodylen, 0x82, &taglen);",
          "2377:    if (tag) {",
          "2378:     memcpy(out, tag, taglen);",
          "2379:     r = taglen;",
          "2381:   } else",
          "2382:    r = SC_ERROR_INVALID_DATA;",
          "2383:  }",
          "",
          "[Removed Lines]",
          "2372:  if ( r >= 0) {",
          "2373:    body = sc_asn1_find_tag(card->ctx, rbuf, rbuflen, 0x7c, &bodylen);",
          "2380:    }",
          "",
          "[Added Lines]",
          "2372:  if (r >= 0) {",
          "2373:   body = sc_asn1_find_tag(card->ctx, rbuf, rbuflen, 0x7c, &bodylen);",
          "2379:    } else",
          "2380:     r = SC_ERROR_INVALID_DATA;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39bd1ddd58dda4d09ba69d712f51293adbe30b9f",
      "candidate_info": {
        "commit_hash": "39bd1ddd58dda4d09ba69d712f51293adbe30b9f",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/39bd1ddd58dda4d09ba69d712f51293adbe30b9f",
        "files": [
          "src/libopensc/sc.c"
        ],
        "message": "fixed wrong condition\n\nfixes https://github.com/OpenSC/OpenSC/issues/1465",
        "before_after_code_files": [
          "src/libopensc/sc.c||src/libopensc/sc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libopensc/sc.c||src/libopensc/sc.c"
          ],
          "candidate": [
            "src/libopensc/sc.c||src/libopensc/sc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libopensc/sc.c||src/libopensc/sc.c": [
          "File: src/libopensc/sc.c -> src/libopensc/sc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "628:   return SC_ERROR_INVALID_ARGUMENTS;",
          "629:  }",
          "632:   if (file->sec_attr != NULL)",
          "633:    free(file->sec_attr);",
          "634:   file->sec_attr = NULL;",
          "",
          "[Removed Lines]",
          "631:  if (sec_attr == NULL || sec_attr_len) {",
          "",
          "[Added Lines]",
          "631:  if (sec_attr == NULL || sec_attr_len == 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83f45cda2af16b65264103fbe0394fd422f0120d",
      "candidate_info": {
        "commit_hash": "83f45cda2af16b65264103fbe0394fd422f0120d",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/83f45cda2af16b65264103fbe0394fd422f0120d",
        "files": [
          "src/libopensc/card-setcos.c",
          "src/libopensc/errors.c",
          "src/libopensc/errors.h",
          "src/libopensc/simpletlv.c",
          "src/tools/util.c"
        ],
        "message": "Added bounds checking to sc_simpletlv_read_tag()\n\n- Logic is identical to sc_asn1_read_tag()\n- Fixes out of bounds access e.g. in cac_parse_CCC",
        "before_after_code_files": [
          "src/libopensc/card-setcos.c||src/libopensc/card-setcos.c",
          "src/libopensc/errors.c||src/libopensc/errors.c",
          "src/libopensc/errors.h||src/libopensc/errors.h",
          "src/libopensc/simpletlv.c||src/libopensc/simpletlv.c",
          "src/tools/util.c||src/tools/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/tools/util.c||src/tools/util.c"
          ],
          "candidate": [
            "src/tools/util.c||src/tools/util.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libopensc/card-setcos.c||src/libopensc/card-setcos.c": [
          "File: src/libopensc/card-setcos.c -> src/libopensc/card-setcos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "793:    break;",
          "",
          "[Removed Lines]",
          "791:   int iACLen   = buf[iOffset] & 0x0F;",
          "792:   if ((size_t) iACLen > len)",
          "",
          "[Added Lines]",
          "791:   size_t iACLen   = buf[iOffset] & 0x0F;",
          "792:   if (iACLen > len)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "810:    if(iKeyLen) {",
          "811:     int iSC;",
          "813:      break;",
          "814:     iSC = buf[iOffset+iACLen];",
          "",
          "[Removed Lines]",
          "812:     if (len < 1+iACLen)",
          "",
          "[Added Lines]",
          "812:     if (len < 1+(size_t)iACLen)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "834:      break;",
          "836:     iMethod = SC_AC_CHV;",
          "",
          "[Removed Lines]",
          "833:     if (len < 1+1+1+iParmLen)",
          "",
          "[Added Lines]",
          "833:     if (len < 1+1+1+(size_t)iParmLen)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "874:    if (buf[iOffset] & 0x20) {",
          "875:     int iSC;",
          "877:      break;",
          "878:     iSC = buf[iOffset + iACLen];",
          "",
          "[Removed Lines]",
          "876:     if (len < 1 + iACLen)",
          "",
          "[Added Lines]",
          "876:     if (len < 1 + (size_t)iACLen)",
          "",
          "---------------"
        ],
        "src/libopensc/errors.c||src/libopensc/errors.c": [
          "File: src/libopensc/errors.c -> src/libopensc/errors.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:   \"Unable to load external module\",",
          "105:   \"EF offset too large\",",
          "106:   \"Not implemented\"",
          "107:  };",
          "108:  const int int_base = -SC_ERROR_INTERNAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:   \"Invalid Simple TLV object\",",
          "108:   \"Premature end of Simple TLV stream\",",
          "",
          "---------------"
        ],
        "src/libopensc/errors.h||src/libopensc/errors.h": [
          "File: src/libopensc/errors.h -> src/libopensc/errors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: #define SC_ERROR_CANNOT_LOAD_MODULE  -1414",
          "96: #define SC_ERROR_OFFSET_TOO_LARGE  -1415",
          "97: #define SC_ERROR_NOT_IMPLEMENTED  -1416",
          "100: #define SC_ERROR_PKCS15INIT   -1500",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: #define SC_ERROR_INVALID_TLV_OBJECT  -1417",
          "99: #define SC_ERROR_TLV_END_OF_CONTENTS -1418",
          "",
          "---------------"
        ],
        "src/libopensc/simpletlv.c||src/libopensc/simpletlv.c": [
          "File: src/libopensc/simpletlv.c -> src/libopensc/simpletlv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: int",
          "75: sc_simpletlv_read_tag(u8 **buf, size_t buflen, u8 *tag_out, size_t *taglen)",
          "76: {",
          "78:  u8 *p = *buf;",
          "83:  }",
          "87:  if (len == 0xff) {",
          "92:   }",
          "94:   len = lebytes2ushort(p);",
          "96:  }",
          "99:  return SC_SUCCESS;",
          "100: }",
          "",
          "[Removed Lines]",
          "77:  size_t len;",
          "80:  if (buflen < 2) {",
          "82:   return SC_ERROR_INVALID_ARGUMENTS;",
          "86:  len = *p++;",
          "89:   if (buflen < 4) {",
          "91:    return SC_ERROR_INVALID_ARGUMENTS;",
          "95:   p+=2;",
          "",
          "[Added Lines]",
          "77:  u8 tag;",
          "78:  size_t left = buflen, len;",
          "83:  if (left < 2) {",
          "84:   return SC_ERROR_INVALID_TLV_OBJECT;",
          "86:  tag = *p;",
          "87:  p++;",
          "88:  len = *p;",
          "89:  p++;",
          "90:  left -= 2;",
          "94:   if (left < 2) {",
          "95:    return SC_ERROR_INVALID_TLV_OBJECT;",
          "99:   p += 2;",
          "100:   left -= 2;",
          "107:  if (len > left)",
          "108:   return SC_ERROR_TLV_END_OF_CONTENTS;",
          "",
          "---------------"
        ],
        "src/tools/util.c||src/tools/util.c": [
          "File: src/tools/util.c -> src/tools/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <ctype.h>",
          "32: #include \"util.h\"",
          "33: #include \"ui/notify.h\"",
          "35: int",
          "36: is_string_valid_atr(const char *atr_str)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include \"common/compat_strlcat.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:    strcpy(buf, \"????\");",
          "340:    break;",
          "341:   }",
          "344:   e = e->next;",
          "345:  }",
          "",
          "[Removed Lines]",
          "342:   strncat(line, buf, sizeof line);",
          "343:   strncat(line, \" \", sizeof line);",
          "",
          "[Added Lines]",
          "343:   strlcat(line, buf, sizeof line);",
          "344:   strlcat(line, \" \", sizeof line);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fe377e93b4b56060e5bbfb6f3142ceaeca744fa",
      "candidate_info": {
        "commit_hash": "8fe377e93b4b56060e5bbfb6f3142ceaeca744fa",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/8fe377e93b4b56060e5bbfb6f3142ceaeca744fa",
        "files": [
          "src/libopensc/asn1.c",
          "src/libopensc/card-asepcos.c",
          "src/libopensc/card-authentic.c",
          "src/libopensc/card-cac.c",
          "src/libopensc/card-coolkey.c",
          "src/libopensc/card-entersafe.c",
          "src/libopensc/card-epass2003.c",
          "src/libopensc/card-gpk.c",
          "src/libopensc/card-iasecc.c",
          "src/libopensc/card-oberthur.c",
          "src/libopensc/card-openpgp.c",
          "src/libopensc/card-piv.c",
          "src/libopensc/card-rtecp.c",
          "src/libopensc/card-setcos.c",
          "src/libopensc/ef-gdo.c",
          "src/libopensc/pkcs15-itacns.c",
          "src/libopensc/pkcs15-tcos.c",
          "src/tools/opensc-tool.c"
        ],
        "message": "fixed out of bounds reads\n\nThanks to Eric Sesterhenn from X41 D-SEC GmbH\nfor reporting and suggesting security fixes.",
        "before_after_code_files": [
          "src/libopensc/asn1.c||src/libopensc/asn1.c",
          "src/libopensc/card-asepcos.c||src/libopensc/card-asepcos.c",
          "src/libopensc/card-authentic.c||src/libopensc/card-authentic.c",
          "src/libopensc/card-cac.c||src/libopensc/card-cac.c",
          "src/libopensc/card-coolkey.c||src/libopensc/card-coolkey.c",
          "src/libopensc/card-entersafe.c||src/libopensc/card-entersafe.c",
          "src/libopensc/card-epass2003.c||src/libopensc/card-epass2003.c",
          "src/libopensc/card-gpk.c||src/libopensc/card-gpk.c",
          "src/libopensc/card-iasecc.c||src/libopensc/card-iasecc.c",
          "src/libopensc/card-oberthur.c||src/libopensc/card-oberthur.c",
          "src/libopensc/card-openpgp.c||src/libopensc/card-openpgp.c",
          "src/libopensc/card-piv.c||src/libopensc/card-piv.c",
          "src/libopensc/card-rtecp.c||src/libopensc/card-rtecp.c",
          "src/libopensc/card-setcos.c||src/libopensc/card-setcos.c",
          "src/libopensc/ef-gdo.c||src/libopensc/ef-gdo.c",
          "src/libopensc/pkcs15-itacns.c||src/libopensc/pkcs15-itacns.c",
          "src/libopensc/pkcs15-tcos.c||src/libopensc/pkcs15-tcos.c",
          "src/tools/opensc-tool.c||src/tools/opensc-tool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libopensc/card-cac.c||src/libopensc/card-cac.c",
            "src/libopensc/card-epass2003.c||src/libopensc/card-epass2003.c"
          ],
          "candidate": [
            "src/libopensc/card-cac.c||src/libopensc/card-cac.c",
            "src/libopensc/card-epass2003.c||src/libopensc/card-epass2003.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libopensc/asn1.c||src/libopensc/asn1.c": [
          "File: src/libopensc/asn1.c -> src/libopensc/asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  len = *p & 0x7f;",
          "104:  if (*p++ & 0x80) {",
          "105:   unsigned int a = 0;",
          "106:   if (len > 4 || len > left)",
          "107:    return SC_ERROR_INVALID_ASN1_OBJECT;",
          "108:   left -= len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:   left--;",
          "",
          "---------------"
        ],
        "src/libopensc/card-asepcos.c||src/libopensc/card-asepcos.c": [
          "File: src/libopensc/card-asepcos.c -> src/libopensc/card-asepcos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:  while (len != 0) {",
          "171:   unsigned int amode, tlen = 3;",
          "173:    sc_debug(card->ctx, SC_LOG_DEBUG_NORMAL, \"invalid access mode encoding\");",
          "174:    return SC_ERROR_INTERNAL;",
          "175:   }",
          "",
          "[Removed Lines]",
          "172:   if (len < 5 && p[0] != 0x80 && p[1] != 0x01) {",
          "",
          "[Added Lines]",
          "172:   if (len < 5 || p[0] != 0x80 || p[1] != 0x01) {",
          "",
          "---------------"
        ],
        "src/libopensc/card-authentic.c||src/libopensc/card-authentic.c": [
          "File: src/libopensc/card-authentic.c -> src/libopensc/card-authentic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "560:    sc_file_dup(&card->cache.current_df, file);",
          "562:    if (cur_df_path.len)   {",
          "563:     memcpy(card->cache.current_df->path.value + cur_df_path.len,",
          "564:       card->cache.current_df->path.value,",
          "565:       card->cache.current_df->path.len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:     if (cur_df_path.len + card->cache.current_df->path.len > sizeof card->cache.current_df->path.value",
          "564:       || cur_df_path.len > sizeof card->cache.current_df->path.value)",
          "565:      LOG_FUNC_RETURN(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "988:  }",
          "990:  sc_log_hex(ctx, \"ACL data\", file->sec_attr, file->sec_attr_len);",
          "992:   unsigned char op = file->type == SC_FILE_TYPE_DF ? ops_DF[ii] : ops_EF[ii];",
          "993:   unsigned char acl = *(file->sec_attr + ii*2);",
          "994:   unsigned char cred_id = *(file->sec_attr + ii*2 + 1);",
          "",
          "[Removed Lines]",
          "991:  for (ii = 0; ii < file->sec_attr_len / 2; ii++)  {",
          "",
          "[Added Lines]",
          "994:  for (ii = 0; ii < file->sec_attr_len / 2 && ii < sizeof ops_DF; ii++)  {",
          "",
          "---------------"
        ],
        "src/libopensc/card-cac.c||src/libopensc/card-cac.c": [
          "File: src/libopensc/card-cac.c -> src/libopensc/card-cac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "664:   cert_len = 0;",
          "665:   cert_ptr = NULL;",
          "666:   cert_type = 0;",
          "669:    tl_start = tl_ptr;",
          "670:    if (sc_simpletlv_read_tag(&tl_ptr, tl_len, &tag, &len) != SC_SUCCESS)",
          "671:     break;",
          "672:    tl_head_len = tl_ptr - tl_start;",
          "673:    if (tag == CAC_TAG_CERTIFICATE) {",
          "674:     cert_len = len;",
          "675:     cert_ptr = val_ptr;",
          "",
          "[Removed Lines]",
          "667:   for (tl_ptr = tl, val_ptr=val; tl_len >= 2;",
          "668:     val_len -= len, val_ptr += len, tl_len -= tl_head_len) {",
          "",
          "[Added Lines]",
          "667:   for (tl_ptr = tl, val_ptr = val; tl_len >= 2;",
          "668:       val_len -= len, val_ptr += len, tl_len -= tl_head_len) {",
          "675:    if (val_len < len)",
          "676:     break;",
          "",
          "---------------"
        ],
        "src/libopensc/card-coolkey.c||src/libopensc/card-coolkey.c": [
          "File: src/libopensc/card-coolkey.c -> src/libopensc/card-coolkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1467:  for (i=0; i < attribute_count; i++) {",
          "1468:   size_t record_len = coolkey_get_attribute_record_len(attr, object_record_type, buf_len);",
          "1471:     return SC_ERROR_CORRUPTED_DATA;",
          "1472:   }",
          "",
          "[Removed Lines]",
          "1470:   if (buf_len < record_len) {",
          "",
          "[Added Lines]",
          "1470:   if (buf_len < record_len || record_len < 4) {",
          "",
          "---------------"
        ],
        "src/libopensc/card-entersafe.c||src/libopensc/card-entersafe.c": [
          "File: src/libopensc/card-entersafe.c -> src/libopensc/card-entersafe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1409:  data->modulus = malloc(len);",
          "1410:  if (!data->modulus)",
          "1413:  p=rbuf;",
          "1415:  p+=2+p[1];",
          "1418:  ++p;",
          "1419:  if(*p++>0x80)",
          "1420:  {",
          "",
          "[Removed Lines]",
          "1411:    SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE,SC_ERROR_OUT_OF_MEMORY);",
          "1414:  assert(*p=='E');",
          "1417:  assert(*p=='N');",
          "",
          "[Added Lines]",
          "1411:   SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, SC_ERROR_OUT_OF_MEMORY);",
          "1414:  if (*p!='E')",
          "1415:   SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, SC_ERROR_INVALID_DATA);",
          "1418:  if (*p!='N')",
          "1419:   SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, SC_ERROR_INVALID_DATA);",
          "",
          "---------------"
        ],
        "src/libopensc/card-epass2003.c||src/libopensc/card-epass2003.c": [
          "File: src/libopensc/card-epass2003.c -> src/libopensc/card-epass2003.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "740:   memcpy(mac_tlv + 2, &mac[mac_len - 16], 8);",
          "741:  }",
          "742:  else {",
          "744:   unsigned char tmp[8] = { 0 };",
          "745:   des_encrypt_cbc(exdata->sk_mac, 8, icv, apdu_buf, mac_len, mac);",
          "746:   des_decrypt_cbc(&exdata->sk_mac[8], 8, iv, &mac[mac_len - 8], 8, tmp);",
          "748:   des_encrypt_cbc(exdata->sk_mac, 8, iv, tmp, 8, mac_tlv + 2);",
          "749:  }",
          "",
          "[Removed Lines]",
          "743:   unsigned char iv[8] = { 0 };",
          "747:   memset(iv, 0x00, 8);",
          "",
          "[Added Lines]",
          "743:   unsigned char iv[EVP_MAX_IV_LENGTH] = { 0 };",
          "747:   memset(iv, 0x00, sizeof iv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "905: static int",
          "907: {",
          "909:  size_t i;",
          "910:  unsigned char iv[16] = { 0 };",
          "911:  unsigned char plaintext[4096] = { 0 };",
          "",
          "[Removed Lines]",
          "906: decrypt_response(struct sc_card *card, unsigned char *in, unsigned char *out, size_t * out_len)",
          "908:  size_t in_len;",
          "",
          "[Added Lines]",
          "906: decrypt_response(struct sc_card *card, unsigned char *in, size_t inlen, unsigned char *out, size_t * out_len)",
          "908:  size_t cipher_len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "924:  if (0x01 == in[2] && 0x82 != in[1]) {",
          "926:   i = 3;",
          "927:  }",
          "928:  else if (0x01 == in[3] && 0x81 == in[1]) {",
          "930:   i = 4;",
          "931:  }",
          "932:  else if (0x01 == in[4] && 0x82 == in[1]) {",
          "935:   i = 5;",
          "936:  }",
          "937:  else {",
          "938:   return -1;",
          "939:  }",
          "942:  if (KEY_TYPE_AES == exdata->smtype)",
          "944:  else",
          "952:   return -1;",
          "956:  return 0;",
          "957: }",
          "",
          "[Removed Lines]",
          "925:   in_len = in[1];",
          "929:   in_len = in[2];",
          "933:   in_len = in[2] * 0x100;",
          "934:   in_len += in[3];",
          "943:   aes128_decrypt_cbc(exdata->sk_enc, 16, iv, &in[i], in_len - 1, plaintext);",
          "945:   des3_decrypt_cbc(exdata->sk_enc, 16, iv, &in[i], in_len - 1, plaintext);",
          "948:  while (0x80 != plaintext[in_len - 2] && (in_len - 2 > 0))",
          "949:   in_len--;",
          "951:  if (2 == in_len)",
          "954:  memcpy(out, plaintext, in_len - 2);",
          "",
          "[Added Lines]",
          "925:   cipher_len = in[1];",
          "929:   cipher_len = in[2];",
          "933:   cipher_len = in[2] * 0x100;",
          "934:   cipher_len += in[3];",
          "941:  if (cipher_len < 2 || i+cipher_len > inlen || cipher_len > sizeof plaintext)",
          "942:   return -1;",
          "946:   aes128_decrypt_cbc(exdata->sk_enc, 16, iv, &in[i], cipher_len - 1, plaintext);",
          "948:   des3_decrypt_cbc(exdata->sk_enc, 16, iv, &in[i], cipher_len - 1, plaintext);",
          "951:  while (0x80 != plaintext[cipher_len - 2] && (cipher_len - 2 > 0))",
          "952:   cipher_len--;",
          "954:  if (2 == cipher_len)",
          "957:  memcpy(out, plaintext, cipher_len - 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "974:  r = sc_check_sw(card, sm->sw1, sm->sw2);",
          "975:  if (r == SC_SUCCESS) {",
          "976:   if (exdata->sm) {",
          "978:     return SC_ERROR_CARD_CMD_FAILED;",
          "979:   }",
          "980:   else {",
          "",
          "[Removed Lines]",
          "977:    if (0 != decrypt_response(card, sm->resp, plain->resp, &len))",
          "",
          "[Added Lines]",
          "980:    if (0 != decrypt_response(card, sm->resp, sm->resplen, plain->resp, &len))",
          "",
          "---------------"
        ],
        "src/libopensc/card-gpk.c||src/libopensc/card-gpk.c": [
          "File: src/libopensc/card-gpk.c -> src/libopensc/card-gpk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:   if (sp[0] == 0x85) {",
          "410:    unsigned int ac[3], n;",
          "412:    file->id = (sp[4] << 8) | sp[5];",
          "413:    file->size = (sp[8] << 8) | sp[9];",
          "414:    file->record_length = sp[7];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412:    if (sp + 11 + 2*3 >= end)",
          "413:     break;",
          "",
          "---------------"
        ],
        "src/libopensc/card-iasecc.c||src/libopensc/card-iasecc.c": [
          "File: src/libopensc/card-iasecc.c -> src/libopensc/card-iasecc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2548:  if (card->type == SC_CARD_TYPE_IASECC_SAGEM)   {",
          "2553:     + ((rbuf[ii + offs + 2] & 0xF0) >> 4) ;",
          "2554:   card->serialnr.len = ii;",
          "",
          "[Removed Lines]",
          "2551:   for (ii=0; ii < rbuf[1] - offs; ii++)",
          "",
          "[Added Lines]",
          "2551:   for (ii=0; (ii < rbuf[1] - offs) && (ii + offs + 2 < sizeof(rbuf)); ii++)",
          "",
          "---------------"
        ],
        "src/libopensc/card-oberthur.c||src/libopensc/card-oberthur.c": [
          "File: src/libopensc/card-oberthur.c -> src/libopensc/card-oberthur.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:  memcpy(&path, in_path, sizeof(struct sc_path));",
          "479:  sc_log(card->ctx, \"in_path; type=%d, path=%s, out %p\",",
          "480:    in_path->type, sc_print_path(in_path), file_out);",
          "481:  sc_log(card->ctx, \"current path; type=%d, path=%s\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479:  if (!auth_current_df)",
          "480:   return SC_ERROR_OBJECT_NOT_FOUND;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2113:  bn[1].data = NULL;",
          "2115:  LOG_FUNC_CALLED(card->ctx);",
          "2116:  sc_log(card->ctx,",
          "2117:         \"offset %i; size %\"SC_FORMAT_LEN_SIZE_T\"u; flags 0x%lX\",",
          "2118:         offset, count, flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2120:  if (!auth_current_ef)",
          "2121:   LOG_TEST_RET(card->ctx, SC_ERROR_INVALID_ARGUMENTS, \"Invalid auth_current_ef\");",
          "",
          "---------------"
        ],
        "src/libopensc/card-openpgp.c||src/libopensc/card-openpgp.c": [
          "File: src/libopensc/card-openpgp.c -> src/libopensc/card-openpgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1061:   const u8 *data = in;",
          "1062:   pgp_blob_t *new;",
          "1064:   r = sc_asn1_read_tag(&data, blob->len - (in - blob->data),",
          "1065:      &cla, &tag, &len);",
          "1066:   if (r < 0 || data == NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1064:   if (!in)",
          "1065:    return SC_ERROR_OBJECT_NOT_VALID;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1069:    return SC_ERROR_OBJECT_NOT_VALID;",
          "1070:   }",
          "1073:   for (tmptag = tag; tmptag > 0x0FF; tmptag >>= 8) {",
          "1074:    cla <<= 8;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1075:   if (data + len > blob->data + blob->len)",
          "1076:    return SC_ERROR_OBJECT_NOT_VALID;",
          "",
          "---------------"
        ],
        "src/libopensc/card-piv.c||src/libopensc/card-piv.c": [
          "File: src/libopensc/card-piv.c -> src/libopensc/card-piv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "575:   body = rbuf;",
          "577:     || body == NULL)  {",
          "579:    sc_log(card->ctx, \"***** received buffer tag MISSING \");",
          "",
          "[Removed Lines]",
          "576:   if (sc_asn1_read_tag(&body, 0xffff, &cla_out, &tag_out, &bodylen) !=  SC_SUCCESS",
          "",
          "[Added Lines]",
          "576:   if (sc_asn1_read_tag(&body, rbuflen, &cla_out, &tag_out, &bodylen) !=  SC_SUCCESS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3038:     type = SC_CARD_TYPE_PIV_II_GI_DE;",
          "3039:    }",
          "3042:     size_t datalen;",
          "3043:     const u8 *data = sc_compacttlv_find_tag(card->reader->atr_info.hist_bytes + 1,",
          "3044:          card->reader->atr_info.hist_bytes_len - 1,",
          "",
          "[Removed Lines]",
          "3036:    else if (card->reader->atr_info.hist_bytes_len >= 4 &&",
          "3037:      !(memcmp(card->reader->atr_info.hist_bytes, \"sfte\", 4))) {",
          "",
          "[Added Lines]",
          "3036:    else if (card->reader->atr_info.hist_bytes_len >= 4",
          "3037:      && !(memcmp(card->reader->atr_info.hist_bytes, \"sfte\", 4))) {",
          "3041:    else if (card->reader->atr_info.hist_bytes_len > 0",
          "",
          "---------------"
        ],
        "src/libopensc/card-rtecp.c||src/libopensc/card-rtecp.c": [
          "File: src/libopensc/card-rtecp.c -> src/libopensc/card-rtecp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:   set_acl_from_sec_attr(card, file);",
          "276:  else",
          "277:   r = SC_ERROR_UNKNOWN_DATA_RECEIVED;",
          "279:   sc_file_free(file);",
          "280:  else",
          "281:  {",
          "",
          "[Removed Lines]",
          "278:  if (r)",
          "",
          "[Added Lines]",
          "278:  if (r && !file_out)",
          "",
          "---------------"
        ],
        "src/libopensc/card-setcos.c||src/libopensc/card-setcos.c": [
          "File: src/libopensc/card-setcos.c -> src/libopensc/card-setcos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "791:   int iACLen   = buf[iOffset] & 0x0F;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "792:   if ((size_t) iACLen > len)",
          "793:    break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "808:    if(iKeyLen) {",
          "811:     switch( (iSC>>5) & 0x03 ){",
          "812:     case 0:",
          "",
          "[Removed Lines]",
          "809:     int iSC = buf[iOffset+iACLen];",
          "",
          "[Added Lines]",
          "811:     int iSC;",
          "812:     if (len < 1+iACLen)",
          "813:      break;",
          "814:     iSC = buf[iOffset+iACLen];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "829:     iMethod = SC_AC_CHV;",
          "830:    }",
          "833:    switch(buf[iOffset+2]){",
          "835:     iOperation = SC_AC_OP_CRYPTO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "833:     if (len < 1+1+1+iParmLen)",
          "834:      break;",
          "840:    if (len < 1+2)",
          "841:     break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "863:    iPinCount = iACLen - 1;",
          "865:    if (buf[iOffset] & 0x20) {",
          "868:     switch( (iSC>>5) & 0x03 ) {",
          "869:     case 0:",
          "",
          "[Removed Lines]",
          "866:     int iSC = buf[iOffset + iACLen];",
          "",
          "[Added Lines]",
          "875:     int iSC;",
          "876:     if (len < 1 + iACLen)",
          "877:      break;",
          "878:     iSC = buf[iOffset + iACLen];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "886:    if ( iPinCount > 0 ) {",
          "888:     iMethod = SC_AC_CHV;",
          "889:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "899:     if (len < 1 + 2)",
          "900:      break;",
          "",
          "---------------"
        ],
        "src/libopensc/ef-gdo.c||src/libopensc/ef-gdo.c": [
          "File: src/libopensc/ef-gdo.c -> src/libopensc/ef-gdo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   }",
          "74:   p += tag_len;",
          "76:  }",
          "78:  if (!iccsn_found && iccsn_len)",
          "",
          "[Removed Lines]",
          "75:   left -= (p - gdo);",
          "",
          "[Added Lines]",
          "75:   left = gdo_len - (p - gdo);",
          "",
          "---------------"
        ],
        "src/libopensc/pkcs15-itacns.c||src/libopensc/pkcs15-itacns.c": [
          "File: src/libopensc/pkcs15-itacns.c -> src/libopensc/pkcs15-itacns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "550:   sc_debug(p15card->card->ctx, SC_LOG_DEBUG_NORMAL,",
          "551:    \"Could not read EF_DatiPersonali: \"",
          "552:    \"keeping generic card name\");",
          "553:  }",
          "555:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553:   return SC_SUCCESS;",
          "",
          "---------------"
        ],
        "src/libopensc/pkcs15-tcos.c||src/libopensc/pkcs15-tcos.c": [
          "File: src/libopensc/pkcs15-tcos.c -> src/libopensc/pkcs15-tcos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   int i, rec_no=0;",
          "133:   if(prkey_info.path.len>=2) prkey_info.path.len-=2;",
          "134:   sc_append_file_id(&prkey_info.path, 0x5349);",
          "136:    sc_debug(ctx, SC_LOG_DEBUG_NORMAL,",
          "137:     \"Select(%s) failed\\n\",",
          "138:     sc_print_path(&prkey_info.path));",
          "",
          "[Removed Lines]",
          "135:   if(sc_select_file(card, &prkey_info.path, NULL)!=SC_SUCCESS){",
          "",
          "[Added Lines]",
          "135:   if(sc_select_file(card, &prkey_info.path, NULL)!=SC_SUCCESS || !f->prop_attr){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:    if(buf[i]==0xB8) can_crypt++;",
          "158:   }",
          "159:  } else {",
          "161:    sc_debug(ctx, SC_LOG_DEBUG_NORMAL,",
          "162:     \"Select(%s) failed\\n\",",
          "163:     sc_print_path(&prkey_info.path));",
          "",
          "[Removed Lines]",
          "160:   if(sc_select_file(card, &prkey_info.path, &f)!=SC_SUCCESS){",
          "",
          "[Added Lines]",
          "160:   if(sc_select_file(card, &prkey_info.path, &f)!=SC_SUCCESS",
          "161:        || !f->prop_attr || f->prop_attr_len < 2){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245:    return 1;",
          "246:   }",
          "247:  } else {",
          "249:    sc_debug(ctx, SC_LOG_DEBUG_NORMAL,\"Select(%s) failed\\n\", path);",
          "250:    return 1;",
          "251:   }",
          "",
          "[Removed Lines]",
          "248:   if(sc_select_file(card, &pin_info.path, &f)!=SC_SUCCESS){",
          "",
          "[Added Lines]",
          "249:   if(sc_select_file(card, &pin_info.path, &f)!=SC_SUCCESS",
          "250:        || !f->prop_attr || f->prop_attr_len < 4){",
          "",
          "---------------"
        ],
        "src/tools/opensc-tool.c||src/tools/opensc-tool.c": [
          "File: src/tools/opensc-tool.c -> src/tools/opensc-tool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "457: {",
          "458:  sc_file_t *file;",
          "459:  int r, file_type;",
          "462:  r = sc_lock(card);",
          "463:  if (r == SC_SUCCESS)",
          "",
          "[Removed Lines]",
          "460:  u8 files[SC_MAX_APDU_BUFFER_SIZE];",
          "",
          "[Added Lines]",
          "460:  u8 files[SC_MAX_EXT_APDU_BUFFER_SIZE];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "483:   }",
          "484:   if (r == 0) {",
          "485:    printf(\"Empty directory\\n\");",
          "495:   }",
          "496:  }",
          "497:  return 0;",
          "",
          "[Removed Lines]",
          "486:   } else",
          "487:   for (i = 0; i < r/2; i++) {",
          "488:    sc_path_t tmppath;",
          "490:    memset(&tmppath, 0, sizeof(tmppath));",
          "491:    memcpy(&tmppath, &path, sizeof(path));",
          "492:    memcpy(tmppath.value + tmppath.len, files + 2*i, 2);",
          "493:    tmppath.len += 2;",
          "494:    enum_dir(tmppath, depth + 1);",
          "",
          "[Added Lines]",
          "486:   } else {",
          "487:    for (i = 0; i < r/2; i++) {",
          "488:     sc_path_t tmppath;",
          "490:     memset(&tmppath, 0, sizeof(tmppath));",
          "491:     memcpy(&tmppath, &path, sizeof(path));",
          "492:     memcpy(tmppath.value + tmppath.len, files + 2*i, 2);",
          "493:     tmppath.len += 2;",
          "494:     enum_dir(tmppath, depth + 1);",
          "495:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}