{
  "cve_id": "CVE-2021-36740",
  "cve_desc": "Varnish Cache, with HTTP/2 enabled, allows request smuggling and VCL authorization bypass via a large Content-Length header for a POST request. This affects Varnish Enterprise 6.0.x before 6.0.8r3, and Varnish Cache 5.x and 6.x before 6.5.2, 6.6.x before 6.6.1, and 6.0 LTS before 6.0.8.",
  "repo": "varnishcache/varnish-cache",
  "patch_hash": "9be22198e258d0e7a5c41f4291792214a29405cf",
  "patch_info": {
    "commit_hash": "9be22198e258d0e7a5c41f4291792214a29405cf",
    "repo": "varnishcache/varnish-cache",
    "commit_url": "https://github.com/varnishcache/varnish-cache/commit/9be22198e258d0e7a5c41f4291792214a29405cf",
    "files": [
      "bin/varnishd/http2/cache_http2.h",
      "bin/varnishd/http2/cache_http2_proto.c"
    ],
    "message": "Take content length into account on H/2 request bodies\n\nWhen receiving H/2 data frames, make sure to take the advertised content\nlength into account, and fail appropriately if the combined sum of the\ndata frames does not match the content length.",
    "before_after_code_files": [
      "bin/varnishd/http2/cache_http2.h||bin/varnishd/http2/cache_http2.h",
      "bin/varnishd/http2/cache_http2_proto.c||bin/varnishd/http2/cache_http2_proto.c"
    ]
  },
  "patch_diff": {
    "bin/varnishd/http2/cache_http2.h||bin/varnishd/http2/cache_http2.h": [
      "File: bin/varnishd/http2/cache_http2.h -> bin/varnishd/http2/cache_http2.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "132:  struct worker   *wrk;",
      "134:  VTAILQ_ENTRY(h2_req)  tx_list;",
      "135:  h2_error   error;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "134:  ssize_t    reqbody_bytes;",
      "",
      "---------------"
    ],
    "bin/varnishd/http2/cache_http2_proto.c||bin/varnishd/http2/cache_http2_proto.c": [
      "File: bin/varnishd/http2/cache_http2_proto.c -> bin/varnishd/http2/cache_http2_proto.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "546:     struct req *req, struct h2_req *r2)",
      "547: {",
      "548:  h2_error h2e;",
      "551:  ASSERT_RXTHR(h2);",
      "552:  assert(r2->state == H2_S_OPEN);",
      "",
      "[Removed Lines]",
      "549:  const char *b;",
      "",
      "[Added Lines]",
      "549:  ssize_t cl;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "573:  http_CollectHdrSep(req->http, H_Cookie, \"; \"); // rfc7540,l,3114,3120",
      "575:  if (req->req_body_status == REQ_BODY_INIT) {",
      "577:    req->req_body_status = REQ_BODY_WITHOUT_LEN;",
      "578:   else",
      "579:    req->req_body_status = REQ_BODY_WITH_LEN;",
      "580:  } else {",
      "581:   assert (req->req_body_status == REQ_BODY_NONE);",
      "583:    return (H2CE_PROTOCOL_ERROR); //rfc7540,l,1838,1840",
      "584:  }",
      "",
      "[Removed Lines]",
      "576:   if (!http_GetHdr(req->http, H_Content_Length, &b))",
      "582:   if (http_GetContentLength(req->http) > 0)",
      "",
      "[Added Lines]",
      "575:  cl = http_GetContentLength(req->http);",
      "576:  assert(cl >= -2);",
      "577:  if (cl == -2) {",
      "578:   VSLb(h2->vsl, SLT_Debug, \"Non-parseable Content-Length\");",
      "579:   return (H2SE_PROTOCOL_ERROR);",
      "580:  }",
      "583:   if (cl == -1)",
      "587:   req->htc->content_length = cl;",
      "591:   r2->state = H2_S_CLOS_REM;",
      "592:   if (cl > 0)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "736:  int w1 = 0, w2 = 0;",
      "737:  char buf[4];",
      "738:  unsigned wi;",
      "740:  CHECK_OBJ_NOTNULL(wrk, WORKER_MAGIC);",
      "741:  ASSERT_RXTHR(h2);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "749:  ssize_t cl;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "754:   Lck_Unlock(&h2->sess->mtx);",
      "755:   return (h2->error ? h2->error : r2->error);",
      "756:  }",
      "757:  AZ(h2->mailcall);",
      "758:  h2->mailcall = r2;",
      "759:  h2->req0->r_window -= h2->rxf_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "769:  r2->reqbody_bytes += h2->rxf_len;",
      "770:  if (h2->rxf_flags & H2FF_DATA_END_STREAM)",
      "771:   r2->state = H2_S_CLOS_REM;",
      "772:  cl = r2->req->htc->content_length;",
      "773:  if (cl >= 0 && (r2->reqbody_bytes > cl ||",
      "774:        (r2->state >= H2_S_CLOS_REM && r2->reqbody_bytes != cl))) {",
      "775:   VSLb(h2->vsl, SLT_Debug,",
      "776:       \"H2: stream %u: Received data and Content-Length\"",
      "777:       \" mismatch\", h2->rxf_stream);",
      "778:   r2->error = H2SE_PROTOCOL_ERROR; // rfc7540,l,3150,3163",
      "779:   if (r2->cond)",
      "780:    AZ(pthread_cond_signal(r2->cond));",
      "781:   Lck_Unlock(&h2->sess->mtx);",
      "782:   return (H2SE_PROTOCOL_ERROR);",
      "783:  }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "794:  struct h2_req *r2;",
      "795:  struct h2_sess *h2;",
      "796:  unsigned l;",
      "799:  CHECK_OBJ_NOTNULL(vc, VFP_CTX_MAGIC);",
      "800:  CHECK_OBJ_NOTNULL(vfe, VFP_ENTRY_MAGIC);",
      "",
      "[Removed Lines]",
      "797:  enum vfp_status retval = VFP_OK;",
      "",
      "[Added Lines]",
      "827:  enum vfp_status retval;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "809:  Lck_Lock(&h2->sess->mtx);",
      "811:  r2->cond = &vc->wrk->cond;",
      "812:  while (h2->mailcall != r2 && h2->error == 0 && r2->error == 0)",
      "813:   AZ(Lck_CondWait(r2->cond, &h2->sess->mtx, 0));",
      "",
      "[Removed Lines]",
      "810:  assert (r2->state == H2_S_OPEN);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "830:    Lck_Unlock(&h2->sess->mtx);",
      "831:    return (VFP_OK);",
      "832:   }",
      "839:   h2->mailcall = NULL;",
      "840:   AZ(pthread_cond_signal(h2->cond));",
      "841:  }",
      "",
      "[Removed Lines]",
      "833:   if (h2->rxf_len == 0) {",
      "834:    if (h2->rxf_flags & H2FF_DATA_END_STREAM) {",
      "835:     retval = VFP_END;",
      "836:     r2->state = H2_S_CLOS_REM;",
      "837:    }",
      "838:   }",
      "",
      "[Added Lines]",
      "862:   if (h2->rxf_len == 0 && r2->state >= H2_S_CLOS_REM)",
      "863:    retval = VFP_END;",
      "864:   else",
      "865:    retval = VFP_OK;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "82b0a629f60136e76112c6f2c6372cce77b683be",
      "candidate_info": {
        "commit_hash": "82b0a629f60136e76112c6f2c6372cce77b683be",
        "repo": "varnishcache/varnish-cache",
        "commit_url": "https://github.com/varnishcache/varnish-cache/commit/82b0a629f60136e76112c6f2c6372cce77b683be",
        "files": [
          "bin/varnishd/http2/cache_http2.h",
          "bin/varnishd/http2/cache_http2_proto.c"
        ],
        "message": "Take content length into account on H/2 request bodies\n\nWhen receiving H/2 data frames, make sure to take the advertised content\nlength into account, and fail appropriately if the combined sum of the\ndata frames does not match the content length.",
        "before_after_code_files": [
          "bin/varnishd/http2/cache_http2.h||bin/varnishd/http2/cache_http2.h",
          "bin/varnishd/http2/cache_http2_proto.c||bin/varnishd/http2/cache_http2_proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "bin/varnishd/http2/cache_http2.h||bin/varnishd/http2/cache_http2.h",
            "bin/varnishd/http2/cache_http2_proto.c||bin/varnishd/http2/cache_http2_proto.c"
          ],
          "candidate": [
            "bin/varnishd/http2/cache_http2.h||bin/varnishd/http2/cache_http2.h",
            "bin/varnishd/http2/cache_http2_proto.c||bin/varnishd/http2/cache_http2_proto.c"
          ]
        }
      },
      "candidate_diff": {
        "bin/varnishd/http2/cache_http2.h||bin/varnishd/http2/cache_http2.h": [
          "File: bin/varnishd/http2/cache_http2.h -> bin/varnishd/http2/cache_http2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:  struct worker   *wrk;",
          "137:  VTAILQ_ENTRY(h2_req)  tx_list;",
          "138:  h2_error   error;",
          "139: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:  ssize_t    reqbody_bytes;",
          "",
          "---------------"
        ],
        "bin/varnishd/http2/cache_http2_proto.c||bin/varnishd/http2/cache_http2_proto.c": [
          "File: bin/varnishd/http2/cache_http2_proto.c -> bin/varnishd/http2/cache_http2_proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "554:     struct req *req, struct h2_req *r2)",
          "555: {",
          "556:  h2_error h2e;",
          "558:  ASSERT_RXTHR(h2);",
          "559:  assert(r2->state == H2_S_OPEN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "557:  ssize_t cl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "575:  http_CollectHdrSep(req->http, H_Cookie, \"; \"); // rfc7540,l,3114,3120",
          "577:  if (req->req_body_status == NULL) {",
          "579:    req->req_body_status = BS_EOF;",
          "580:   else",
          "581:    req->req_body_status = BS_LENGTH;",
          "582:  } else {",
          "584:   assert (req->req_body_status == BS_NONE);",
          "585:   r2->state = H2_S_CLOS_REM;",
          "587:    return (H2CE_PROTOCOL_ERROR); //rfc7540,l,1838,1840",
          "588:  }",
          "",
          "[Removed Lines]",
          "578:   if (!http_GetHdr(req->http, H_Content_Length, NULL))",
          "586:   if (http_GetContentLength(req->http) > 0)",
          "",
          "[Added Lines]",
          "578:  cl = http_GetContentLength(req->http);",
          "579:  assert(cl >= -2);",
          "580:  if (cl == -2) {",
          "581:   VSLb(h2->vsl, SLT_Debug, \"Non-parseable Content-Length\");",
          "582:   return (H2SE_PROTOCOL_ERROR);",
          "583:  }",
          "586:   if (cl == -1)",
          "590:   req->htc->content_length = cl;",
          "595:   if (cl > 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "737:  int w1 = 0, w2 = 0;",
          "738:  char buf[4];",
          "739:  unsigned wi;",
          "741:  CHECK_OBJ_NOTNULL(wrk, WORKER_MAGIC);",
          "742:  ASSERT_RXTHR(h2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "749:  ssize_t cl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "755:   Lck_Unlock(&h2->sess->mtx);",
          "756:   return (h2->error ? h2->error : r2->error);",
          "757:  }",
          "758:  AZ(h2->mailcall);",
          "759:  h2->mailcall = r2;",
          "760:  h2->req0->r_window -= h2->rxf_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "769:  r2->reqbody_bytes += h2->rxf_len;",
          "770:  if (h2->rxf_flags & H2FF_DATA_END_STREAM)",
          "771:   r2->state = H2_S_CLOS_REM;",
          "772:  cl = r2->req->htc->content_length;",
          "773:  if (cl >= 0 && (r2->reqbody_bytes > cl ||",
          "774:        (r2->state >= H2_S_CLOS_REM && r2->reqbody_bytes != cl))) {",
          "775:   VSLb(h2->vsl, SLT_Debug,",
          "776:       \"H2: stream %u: Received data and Content-Length\"",
          "777:       \" mismatch\", h2->rxf_stream);",
          "778:   r2->error = H2SE_PROTOCOL_ERROR; // rfc7540,l,3150,3163",
          "779:   if (r2->cond)",
          "780:    AZ(pthread_cond_signal(r2->cond));",
          "781:   Lck_Unlock(&h2->sess->mtx);",
          "782:   return (H2SE_PROTOCOL_ERROR);",
          "783:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "795:  struct h2_req *r2;",
          "796:  struct h2_sess *h2;",
          "797:  unsigned l;",
          "800:  CHECK_OBJ_NOTNULL(vc, VFP_CTX_MAGIC);",
          "801:  CHECK_OBJ_NOTNULL(vfe, VFP_ENTRY_MAGIC);",
          "",
          "[Removed Lines]",
          "798:  enum vfp_status retval = VFP_OK;",
          "",
          "[Added Lines]",
          "827:  enum vfp_status retval;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "810:  Lck_Lock(&h2->sess->mtx);",
          "812:  r2->cond = &vc->wrk->cond;",
          "813:  while (h2->mailcall != r2 && h2->error == 0 && r2->error == 0)",
          "814:   AZ(Lck_CondWait(r2->cond, &h2->sess->mtx, 0));",
          "",
          "[Removed Lines]",
          "811:  assert (r2->state == H2_S_OPEN);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "831:    Lck_Unlock(&h2->sess->mtx);",
          "832:    return (VFP_OK);",
          "833:   }",
          "840:   h2->mailcall = NULL;",
          "841:   AZ(pthread_cond_signal(h2->cond));",
          "842:  }",
          "",
          "[Removed Lines]",
          "834:   if (h2->rxf_len == 0) {",
          "835:    if (h2->rxf_flags & H2FF_DATA_END_STREAM) {",
          "836:     retval = VFP_END;",
          "837:     r2->state = H2_S_CLOS_REM;",
          "838:    }",
          "839:   }",
          "",
          "[Added Lines]",
          "862:   if (h2->rxf_len == 0 && r2->state >= H2_S_CLOS_REM)",
          "863:    retval = VFP_END;",
          "864:   else",
          "865:    retval = VFP_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4c67d2a1a05304598895c24663c58a2e2932708",
      "candidate_info": {
        "commit_hash": "d4c67d2a1a05304598895c24663c58a2e2932708",
        "repo": "varnishcache/varnish-cache",
        "commit_url": "https://github.com/varnishcache/varnish-cache/commit/d4c67d2a1a05304598895c24663c58a2e2932708",
        "files": [
          "bin/varnishd/http2/cache_http2.h",
          "bin/varnishd/http2/cache_http2_proto.c"
        ],
        "message": "Take content length into account on H/2 request bodies\n\nWhen receiving H/2 data frames, make sure to take the advertised content\nlength into account, and fail appropriately if the combined sum of the\ndata frames does not match the content length.",
        "before_after_code_files": [
          "bin/varnishd/http2/cache_http2.h||bin/varnishd/http2/cache_http2.h",
          "bin/varnishd/http2/cache_http2_proto.c||bin/varnishd/http2/cache_http2_proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "bin/varnishd/http2/cache_http2.h||bin/varnishd/http2/cache_http2.h",
            "bin/varnishd/http2/cache_http2_proto.c||bin/varnishd/http2/cache_http2_proto.c"
          ],
          "candidate": [
            "bin/varnishd/http2/cache_http2.h||bin/varnishd/http2/cache_http2.h",
            "bin/varnishd/http2/cache_http2_proto.c||bin/varnishd/http2/cache_http2_proto.c"
          ]
        }
      },
      "candidate_diff": {
        "bin/varnishd/http2/cache_http2.h||bin/varnishd/http2/cache_http2.h": [
          "File: bin/varnishd/http2/cache_http2.h -> bin/varnishd/http2/cache_http2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:  struct worker   *wrk;",
          "137:  VTAILQ_ENTRY(h2_req)  tx_list;",
          "138:  h2_error   error;",
          "139: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:  ssize_t    reqbody_bytes;",
          "",
          "---------------"
        ],
        "bin/varnishd/http2/cache_http2_proto.c||bin/varnishd/http2/cache_http2_proto.c": [
          "File: bin/varnishd/http2/cache_http2_proto.c -> bin/varnishd/http2/cache_http2_proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "551:     struct req *req, struct h2_req *r2)",
          "552: {",
          "553:  h2_error h2e;",
          "555:  ASSERT_RXTHR(h2);",
          "556:  assert(r2->state == H2_S_OPEN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "554:  ssize_t cl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "572:  http_CollectHdrSep(req->http, H_Cookie, \"; \"); // rfc7540,l,3114,3120",
          "574:  if (req->req_body_status == NULL) {",
          "576:    req->req_body_status = BS_EOF;",
          "577:   else",
          "578:    req->req_body_status = BS_LENGTH;",
          "579:  } else {",
          "581:   assert (req->req_body_status == BS_NONE);",
          "582:   r2->state = H2_S_CLOS_REM;",
          "584:    return (H2CE_PROTOCOL_ERROR); //rfc7540,l,1838,1840",
          "585:  }",
          "",
          "[Removed Lines]",
          "575:   if (!http_GetHdr(req->http, H_Content_Length, NULL))",
          "583:   if (http_GetContentLength(req->http) > 0)",
          "",
          "[Added Lines]",
          "575:  cl = http_GetContentLength(req->http);",
          "576:  assert(cl >= -2);",
          "577:  if (cl == -2) {",
          "578:   VSLb(h2->vsl, SLT_Debug, \"Non-parseable Content-Length\");",
          "579:   return (H2SE_PROTOCOL_ERROR);",
          "580:  }",
          "583:   if (cl == -1)",
          "587:   req->htc->content_length = cl;",
          "592:   if (cl > 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "736:  int w1 = 0, w2 = 0;",
          "737:  char buf[4];",
          "738:  unsigned wi;",
          "740:  CHECK_OBJ_NOTNULL(wrk, WORKER_MAGIC);",
          "741:  ASSERT_RXTHR(h2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:  ssize_t cl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "754:   Lck_Unlock(&h2->sess->mtx);",
          "755:   return (h2->error ? h2->error : r2->error);",
          "756:  }",
          "757:  AZ(h2->mailcall);",
          "758:  h2->mailcall = r2;",
          "759:  h2->req0->r_window -= h2->rxf_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "768:  r2->reqbody_bytes += h2->rxf_len;",
          "769:  if (h2->rxf_flags & H2FF_DATA_END_STREAM)",
          "770:   r2->state = H2_S_CLOS_REM;",
          "771:  cl = r2->req->htc->content_length;",
          "772:  if (cl >= 0 && (r2->reqbody_bytes > cl ||",
          "773:        (r2->state >= H2_S_CLOS_REM && r2->reqbody_bytes != cl))) {",
          "774:   VSLb(h2->vsl, SLT_Debug,",
          "775:       \"H2: stream %u: Received data and Content-Length\"",
          "776:       \" mismatch\", h2->rxf_stream);",
          "777:   r2->error = H2SE_PROTOCOL_ERROR; // rfc7540,l,3150,3163",
          "778:   if (r2->cond)",
          "779:    AZ(pthread_cond_signal(r2->cond));",
          "780:   Lck_Unlock(&h2->sess->mtx);",
          "781:   return (H2SE_PROTOCOL_ERROR);",
          "782:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "794:  struct h2_req *r2;",
          "795:  struct h2_sess *h2;",
          "796:  unsigned l;",
          "799:  CHECK_OBJ_NOTNULL(vc, VFP_CTX_MAGIC);",
          "800:  CHECK_OBJ_NOTNULL(vfe, VFP_ENTRY_MAGIC);",
          "",
          "[Removed Lines]",
          "797:  enum vfp_status retval = VFP_OK;",
          "",
          "[Added Lines]",
          "826:  enum vfp_status retval;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "809:  Lck_Lock(&h2->sess->mtx);",
          "811:  r2->cond = &vc->wrk->cond;",
          "812:  while (h2->mailcall != r2 && h2->error == 0 && r2->error == 0)",
          "813:   AZ(Lck_CondWait(r2->cond, &h2->sess->mtx, 0));",
          "",
          "[Removed Lines]",
          "810:  assert (r2->state == H2_S_OPEN);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "830:    Lck_Unlock(&h2->sess->mtx);",
          "831:    return (VFP_OK);",
          "832:   }",
          "839:   h2->mailcall = NULL;",
          "840:   AZ(pthread_cond_signal(h2->cond));",
          "841:  }",
          "",
          "[Removed Lines]",
          "833:   if (h2->rxf_len == 0) {",
          "834:    if (h2->rxf_flags & H2FF_DATA_END_STREAM) {",
          "835:     retval = VFP_END;",
          "836:     r2->state = H2_S_CLOS_REM;",
          "837:    }",
          "838:   }",
          "",
          "[Added Lines]",
          "861:   if (h2->rxf_len == 0 && r2->state >= H2_S_CLOS_REM)",
          "862:    retval = VFP_END;",
          "863:   else",
          "864:    retval = VFP_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d73bc843ea9bff79e33773f1cfe2dffa7d03ea1",
      "candidate_info": {
        "commit_hash": "7d73bc843ea9bff79e33773f1cfe2dffa7d03ea1",
        "repo": "varnishcache/varnish-cache",
        "commit_url": "https://github.com/varnishcache/varnish-cache/commit/7d73bc843ea9bff79e33773f1cfe2dffa7d03ea1",
        "files": [
          "bin/varnishd/http2/cache_http2.h",
          "bin/varnishd/http2/cache_http2_proto.c"
        ],
        "message": "Take content length into account on H/2 request bodies\n\nWhen receiving H/2 data frames, make sure to take the advertised content\nlength into account, and fail appropriately if the combined sum of the\ndata frames does not match the content length.",
        "before_after_code_files": [
          "bin/varnishd/http2/cache_http2.h||bin/varnishd/http2/cache_http2.h",
          "bin/varnishd/http2/cache_http2_proto.c||bin/varnishd/http2/cache_http2_proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "bin/varnishd/http2/cache_http2.h||bin/varnishd/http2/cache_http2.h",
            "bin/varnishd/http2/cache_http2_proto.c||bin/varnishd/http2/cache_http2_proto.c"
          ],
          "candidate": [
            "bin/varnishd/http2/cache_http2.h||bin/varnishd/http2/cache_http2.h",
            "bin/varnishd/http2/cache_http2_proto.c||bin/varnishd/http2/cache_http2_proto.c"
          ]
        }
      },
      "candidate_diff": {
        "bin/varnishd/http2/cache_http2.h||bin/varnishd/http2/cache_http2.h": [
          "File: bin/varnishd/http2/cache_http2.h -> bin/varnishd/http2/cache_http2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:  struct worker   *wrk;",
          "137:  VTAILQ_ENTRY(h2_req)  tx_list;",
          "138:  h2_error   error;",
          "139: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:  ssize_t    reqbody_bytes;",
          "",
          "---------------"
        ],
        "bin/varnishd/http2/cache_http2_proto.c||bin/varnishd/http2/cache_http2_proto.c": [
          "File: bin/varnishd/http2/cache_http2_proto.c -> bin/varnishd/http2/cache_http2_proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "551:     struct req *req, struct h2_req *r2)",
          "552: {",
          "553:  h2_error h2e;",
          "555:  ASSERT_RXTHR(h2);",
          "556:  assert(r2->state == H2_S_OPEN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "554:  ssize_t cl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "572:  http_CollectHdrSep(req->http, H_Cookie, \"; \"); // rfc7540,l,3114,3120",
          "574:  if (req->req_body_status == NULL) {",
          "576:    req->req_body_status = BS_EOF;",
          "577:   else",
          "578:    req->req_body_status = BS_LENGTH;",
          "579:  } else {",
          "581:   assert (req->req_body_status == BS_NONE);",
          "582:   r2->state = H2_S_CLOS_REM;",
          "584:    return (H2CE_PROTOCOL_ERROR); //rfc7540,l,1838,1840",
          "585:  }",
          "",
          "[Removed Lines]",
          "575:   if (!http_GetHdr(req->http, H_Content_Length, NULL))",
          "583:   if (http_GetContentLength(req->http) > 0)",
          "",
          "[Added Lines]",
          "575:  cl = http_GetContentLength(req->http);",
          "576:  assert(cl >= -2);",
          "577:  if (cl == -2) {",
          "578:   VSLb(h2->vsl, SLT_Debug, \"Non-parseable Content-Length\");",
          "579:   return (H2SE_PROTOCOL_ERROR);",
          "580:  }",
          "583:   if (cl == -1)",
          "587:   req->htc->content_length = cl;",
          "592:   if (cl > 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "736:  int w1 = 0, w2 = 0;",
          "737:  char buf[4];",
          "738:  unsigned wi;",
          "740:  CHECK_OBJ_NOTNULL(wrk, WORKER_MAGIC);",
          "741:  ASSERT_RXTHR(h2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:  ssize_t cl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "754:   Lck_Unlock(&h2->sess->mtx);",
          "755:   return (h2->error ? h2->error : r2->error);",
          "756:  }",
          "757:  AZ(h2->mailcall);",
          "758:  h2->mailcall = r2;",
          "759:  h2->req0->r_window -= h2->rxf_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "768:  r2->reqbody_bytes += h2->rxf_len;",
          "769:  if (h2->rxf_flags & H2FF_DATA_END_STREAM)",
          "770:   r2->state = H2_S_CLOS_REM;",
          "771:  cl = r2->req->htc->content_length;",
          "772:  if (cl >= 0 && (r2->reqbody_bytes > cl ||",
          "773:        (r2->state >= H2_S_CLOS_REM && r2->reqbody_bytes != cl))) {",
          "774:   VSLb(h2->vsl, SLT_Debug,",
          "775:       \"H2: stream %u: Received data and Content-Length\"",
          "776:       \" mismatch\", h2->rxf_stream);",
          "777:   r2->error = H2SE_PROTOCOL_ERROR; // rfc7540,l,3150,3163",
          "778:   if (r2->cond)",
          "779:    AZ(pthread_cond_signal(r2->cond));",
          "780:   Lck_Unlock(&h2->sess->mtx);",
          "781:   return (H2SE_PROTOCOL_ERROR);",
          "782:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "794:  struct h2_req *r2;",
          "795:  struct h2_sess *h2;",
          "796:  unsigned l;",
          "799:  CHECK_OBJ_NOTNULL(vc, VFP_CTX_MAGIC);",
          "800:  CHECK_OBJ_NOTNULL(vfe, VFP_ENTRY_MAGIC);",
          "",
          "[Removed Lines]",
          "797:  enum vfp_status retval = VFP_OK;",
          "",
          "[Added Lines]",
          "826:  enum vfp_status retval;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "809:  Lck_Lock(&h2->sess->mtx);",
          "811:  r2->cond = &vc->wrk->cond;",
          "812:  while (h2->mailcall != r2 && h2->error == 0 && r2->error == 0)",
          "813:   AZ(Lck_CondWait(r2->cond, &h2->sess->mtx, 0));",
          "",
          "[Removed Lines]",
          "810:  assert (r2->state == H2_S_OPEN);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "830:    Lck_Unlock(&h2->sess->mtx);",
          "831:    return (VFP_OK);",
          "832:   }",
          "839:   h2->mailcall = NULL;",
          "840:   AZ(pthread_cond_signal(h2->cond));",
          "841:  }",
          "",
          "[Removed Lines]",
          "833:   if (h2->rxf_len == 0) {",
          "834:    if (h2->rxf_flags & H2FF_DATA_END_STREAM) {",
          "835:     retval = VFP_END;",
          "836:     r2->state = H2_S_CLOS_REM;",
          "837:    }",
          "838:   }",
          "",
          "[Added Lines]",
          "861:   if (h2->rxf_len == 0 && r2->state >= H2_S_CLOS_REM)",
          "862:    retval = VFP_END;",
          "863:   else",
          "864:    retval = VFP_OK;",
          "",
          "---------------"
        ]
      }
    }
  ]
}