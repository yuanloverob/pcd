{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2a58dbde30bf17497aaf77711496bf01cf72b90e",
      "candidate_info": {
        "commit_hash": "2a58dbde30bf17497aaf77711496bf01cf72b90e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2a58dbde30bf17497aaf77711496bf01cf72b90e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "test/fuzzdata7.db"
        ],
        "message": "Improved detection of cell corruption in sqlite3VdbeRecordCompareWithSkip().\n\nFossilOrigin-Name: fa47f4c6589c431cf678560ac33dea6b695052012bea2096b2c92869ed51c688",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aaa3a19f8cf5ba7003634e4610abc7832354af91d7c7f65469218678f66bcd46",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4251:   }else{",
          "4252:     idx1 = getVarint32(aKey1, szHdr1);",
          "4253:     d1 = szHdr1;",
          "4258:     i = 0;",
          "4259:   }",
          "4262:   assert( pPKey2->pKeyInfo->nAllField>=pPKey2->nField",
          "",
          "[Removed Lines]",
          "4254:     if( d1>(unsigned)nKey1 ){",
          "4255:       pPKey2->errCode = (u8)SQLITE_CORRUPT_BKPT;",
          "4257:     }",
          "",
          "[Added Lines]",
          "4256:   if( d1>(unsigned)nKey1 ){",
          "4257:     pPKey2->errCode = (u8)SQLITE_CORRUPT_BKPT;",
          "4259:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "705e73344ed81ea306ea6df8b94fc6b623319def",
      "candidate_info": {
        "commit_hash": "705e73344ed81ea306ea6df8b94fc6b623319def",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/705e73344ed81ea306ea6df8b94fc6b623319def",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Omit the check for conflicting shared-cache locks in sqlite3Prepare() if the database connection uses no shared cache.  We might be able to go back and remove this code completely, due to the newer Schema.iGeneration logic, but that will take more analysis.  This check-in gives the speed benefit but not the reduction in code size.\n\nFossilOrigin-Name: 0b73a09270dfafb27f8d1762b547ef8178c9da66f45e7153ff0b76272dfa92f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fc8d45086dc2bcb9bce756088e99e63cbeedf9129139fb0e6a48b43c4f502180",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "614:       }",
          "615:     }",
          "616:   }",
          "",
          "[Removed Lines]",
          "604:   for(i=0; i<db->nDb; i++) {",
          "605:     Btree *pBt = db->aDb[i].pBt;",
          "606:     if( pBt ){",
          "607:       assert( sqlite3BtreeHoldsMutex(pBt) );",
          "608:       rc = sqlite3BtreeSchemaLocked(pBt);",
          "609:       if( rc ){",
          "610:         const char *zDb = db->aDb[i].zDbSName;",
          "611:         sqlite3ErrorWithMsg(db, rc, \"database schema is locked: %s\", zDb);",
          "612:         testcase( db->flags & SQLITE_ReadUncommit );",
          "613:         goto end_prepare;",
          "",
          "[Added Lines]",
          "604:   if( !db->noSharedCache ){",
          "605:     for(i=0; i<db->nDb; i++) {",
          "606:       Btree *pBt = db->aDb[i].pBt;",
          "607:       if( pBt ){",
          "608:         assert( sqlite3BtreeHoldsMutex(pBt) );",
          "609:         rc = sqlite3BtreeSchemaLocked(pBt);",
          "610:         if( rc ){",
          "611:           const char *zDb = db->aDb[i].zDbSName;",
          "612:           sqlite3ErrorWithMsg(db, rc, \"database schema is locked: %s\", zDb);",
          "613:           testcase( db->flags & SQLITE_ReadUncommit );",
          "614:           goto end_prepare;",
          "615:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "244edd01d32b4081086982d5f3c5a93b7a2b6f18",
      "candidate_info": {
        "commit_hash": "244edd01d32b4081086982d5f3c5a93b7a2b6f18",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/244edd01d32b4081086982d5f3c5a93b7a2b6f18",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fkey8.test"
        ],
        "message": "Add test cases for the fix on this branch.\n\nFossilOrigin-Name: 2e31abe0ae5937a8ce10179e0ae045ee4c5ed8b7e2622ab41243226c6d3f5425",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fkey8.test||test/fkey8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3f1c8051648a341db4dffad66d3b1f9980d8a2b314cb0ce879cb2a10d1779b84",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fkey8.test||test/fkey8.test": [
          "File: test/fkey8.test -> test/fkey8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   INSERT OR REPLACE INTO t1 VALUES(20000, 20000);",
          "198: }",
          "200: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: #-------------------------------------------------------------------------",
          "201: reset_db",
          "202: do_execsql_test 5.0 {",
          "203:   PRAGMA foreign_keys = true;",
          "204:   CREATE TABLE parent(",
          "205:     p TEXT PRIMARY KEY",
          "206:   );",
          "207:   CREATE TABLE child(",
          "208:     c INTEGER UNIQUE,",
          "209:     FOREIGN KEY(c) REFERENCES parent(p) DEFERRABLE INITIALLY DEFERRED",
          "210:   );",
          "211:   BEGIN;",
          "212:     INSERT INTO child VALUES(123);",
          "213:     INSERT INTO parent VALUES('123');",
          "214:   COMMIT;",
          "215: }",
          "216: do_execsql_test 5.1 {",
          "217:   PRAGMA integrity_check;",
          "218: } {ok}",
          "220: do_execsql_test 5.2 {",
          "221:   INSERT INTO parent VALUES(1200);",
          "222:   BEGIN;",
          "223:     INSERT INTO child VALUES(456);",
          "224:     UPDATE parent SET p = '456' WHERE p=1200;",
          "225:   COMMIT;",
          "226: }",
          "227: do_execsql_test 5.3 {",
          "228:   PRAGMA integrity_check;",
          "229: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f88359df642aea1224782bbe409c30bca902550",
      "candidate_info": {
        "commit_hash": "6f88359df642aea1224782bbe409c30bca902550",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6f88359df642aea1224782bbe409c30bca902550",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "src/window.c"
        ],
        "message": "Fix issues with the previous check-in and add more VDBE branch coverage testing macros.\n\nFossilOrigin-Name: b5f72f10f2dfdbee9fe98c63ffb933e841203790746a920b99df14ca5c14127c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f24066f8dd847dfb656f26c4a8142e7fb6a412ffe325aea6254cb122cfbb3e1c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2197:         u32 x = pLevel->iLikeRepCntr;",
          "2198:         if( x>0 ){",
          "2199:           skipLikeAddr = sqlite3VdbeAddOp1(v, (x&1)?OP_IfNot:OP_If,(int)(x>>1));",
          "2200:         }",
          "2202: #endif",
          "2203:       }",
          "",
          "[Removed Lines]",
          "2201:         VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2200:           VdbeCoverageIf(v, (x&1)==1);",
          "2201:           VdbeCoverageIf(v, (x&1)==0);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1310:     sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1311:     sqlite3VdbeAddOp3(v, OP_Ge, regString, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1312:     sqlite3VdbeChangeP5(v, SQLITE_AFF_NUMERIC);",
          "1313:   }else{",
          "1314:     sqlite3VdbeAddOp2(v, OP_MustBeInt, reg, sqlite3VdbeCurrentAddr(v)+2);",
          "1315:   }",
          "1321:   sqlite3VdbeAddOp3(v, aOp[eCond], regZero, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1322:   VdbeCoverageNeverNullIf(v, eCond==0);",
          "1323:   VdbeCoverageNeverNullIf(v, eCond==1);",
          "",
          "[Removed Lines]",
          "1316:   VdbeCoverageIf(v, eCond==0);",
          "1317:   VdbeCoverageIf(v, eCond==1);",
          "1318:   VdbeCoverageIf(v, eCond==2);",
          "1319:   VdbeCoverageIf(v, eCond==3);",
          "1320:   VdbeCoverageIf(v, eCond==4);",
          "",
          "[Added Lines]",
          "1313:     VdbeCoverage(v);",
          "1314:     assert( eCond==3 || eCond==4 );",
          "1315:     VdbeCoverageIf(v, eCond==3);",
          "1316:     VdbeCoverageIf(v, eCond==4);",
          "1319:     VdbeCoverage(v);",
          "1320:     assert( eCond==0 || eCond==1 || eCond==2 );",
          "1321:     VdbeCoverageIf(v, eCond==0);",
          "1322:     VdbeCoverageIf(v, eCond==1);",
          "1323:     VdbeCoverageIf(v, eCond==2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1833:   VdbeCoverage(v);",
          "1834:   sqlite3VdbeAddOp3(v, arith, regVal, reg1, reg1);",
          "1835:   sqlite3VdbeJumpHere(v, addrGe);",
          "1837:   sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "1843:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1844:   sqlite3ReleaseTempReg(pParse, reg2);",
          "",
          "[Removed Lines]",
          "1836:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1838:   assert( op==OP_Ge || op==OP_Gt || op==OP_Le );",
          "1839:   VdbeCoverageIf(v, op==OP_Ge);",
          "1840:   VdbeCoverageIf(v, op==OP_Gt);",
          "1841:   VdbeCoverageIf(v, op==OP_Le);",
          "",
          "[Added Lines]",
          "1840:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1); VdbeCoverage(v);",
          "1842:   assert( op==OP_Ge || op==OP_Gt || op==OP_Lt || op==OP_Le );",
          "1843:   testcase(op==OP_Ge); VdbeCoverageIf(v, op==OP_Ge);",
          "1844:   testcase(op==OP_Lt); VdbeCoverageIf(v, op==OP_Lt);",
          "1845:   testcase(op==OP_Le); VdbeCoverageIf(v, op==OP_Le);",
          "1846:   testcase(op==OP_Gt); VdbeCoverageIf(v, op==OP_Gt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2536:   if( pMWin->eStart==pMWin->eEnd && regStart ){",
          "2537:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2538:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2539:     VdbeCoverageIf(v, op==OP_Ge);",
          "2540:     VdbeCoverageIf(v, op==OP_Le);",
          "2541:     windowAggFinal(&s, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2544:     VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3196abb7cb7aec87656bb8e299319ba55e35a3a4",
      "candidate_info": {
        "commit_hash": "3196abb7cb7aec87656bb8e299319ba55e35a3a4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3196abb7cb7aec87656bb8e299319ba55e35a3a4",
        "files": [
          "ext/session/sqlite3session.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix harmless compiler warning in the session extension.\n\nFossilOrigin-Name: dff823ca8b5ca4a5611407b0231f89b2e8c981f50e85e361e76d3e4973cea8ca",
        "before_after_code_files": [
          "ext/session/sqlite3session.c||ext/session/sqlite3session.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sqlite3session.c||ext/session/sqlite3session.c": [
          "File: ext/session/sqlite3session.c -> ext/session/sqlite3session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1832: static int sessionBufferGrow(SessionBuffer *p, size_t nByte, int *pRc){",
          "1834:     u8 *aNew;",
          "1835:     i64 nNew = p->nAlloc ? p->nAlloc : 128;",
          "1836:     do {",
          "",
          "[Removed Lines]",
          "1833:   if( *pRc==SQLITE_OK && p->nAlloc-p->nBuf<nByte ){",
          "",
          "[Added Lines]",
          "1833:   if( *pRc==SQLITE_OK && (size_t)(p->nAlloc-p->nBuf)<nByte ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d612fb7873cf59dfda18cabe45f674c37aa78a4587de3378b1840c99465a0269",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}