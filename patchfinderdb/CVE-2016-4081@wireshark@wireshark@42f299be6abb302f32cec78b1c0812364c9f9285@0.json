{
  "cve_id": "CVE-2016-4081",
  "cve_desc": "epan/dissectors/packet-iax2.c in the IAX2 dissector in Wireshark 1.12.x before 1.12.11 and 2.0.x before 2.0.3 uses an incorrect integer data type, which allows remote attackers to cause a denial of service (infinite loop) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "42f299be6abb302f32cec78b1c0812364c9f9285",
  "patch_info": {
    "commit_hash": "42f299be6abb302f32cec78b1c0812364c9f9285",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/42f299be6abb302f32cec78b1c0812364c9f9285",
    "files": [
      "epan/dissectors/packet-iax2.c"
    ],
    "message": "IAX2: fix an infinite loop\n\nBug: 12260\nChange-Id: I29b23ff2d862027fd44c6dd4de3cbb304664fd05\nReviewed-on: https://code.wireshark.org/review/14473\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c": [
      "File: epan/dissectors/packet-iax2.c -> epan/dissectors/packet-iax2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1580:   if (iax_packet->abstime.secs == -1) {",
      "1581:     time_t start_secs = iax_packet->call_data->start_time.secs;",
      "1586:     while(abs_secs < pinfo->abs_ts.secs - 16) {",
      "1587:       longts += 32768;",
      "1589:     }",
      "1591:     iax_packet->abstime.secs=abs_secs;",
      "",
      "[Removed Lines]",
      "1582:     gint32 abs_secs = (gint32)(start_secs + longts/1000);",
      "1588:       abs_secs = (gint32)(start_secs + longts/1000);",
      "",
      "[Added Lines]",
      "1582:     time_t abs_secs = start_secs + longts/1000;",
      "1588:       abs_secs = start_secs + longts/1000;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "deffb02507100d3f22962e3b4a44cf133b209d5a",
      "candidate_info": {
        "commit_hash": "deffb02507100d3f22962e3b4a44cf133b209d5a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/deffb02507100d3f22962e3b4a44cf133b209d5a",
        "files": [
          "epan/dissectors/packet-iax2.c"
        ],
        "message": "IAX2: fix an infinite loop\n\nBug: 12260\nChange-Id: I29b23ff2d862027fd44c6dd4de3cbb304664fd05\nReviewed-on: https://code.wireshark.org/review/14473\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 42f299be6abb302f32cec78b1c0812364c9f9285)\nReviewed-on: https://code.wireshark.org/review/14474\n(cherry picked from commit fedd01d412836b89962184919498d69a221a5a67)\nReviewed-on: https://code.wireshark.org/review/14475\n(cherry picked from commit 73dbc54c266eaed245f2c38e7f68fe10c9b4f39d)\nReviewed-on: https://code.wireshark.org/review/15444\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ],
          "candidate": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c": [
          "File: epan/dissectors/packet-iax2.c -> epan/dissectors/packet-iax2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1597:   if (iax_packet->abstime.secs == -1) {",
          "1598:     time_t start_secs = iax_packet->call_data->start_time.secs;",
          "1603:     while(abs_secs < pinfo->fd->abs_ts.secs - 16) {",
          "1604:       longts += 32768;",
          "1606:     }",
          "1608:     iax_packet->abstime.secs=abs_secs;",
          "",
          "[Removed Lines]",
          "1599:     gint32 abs_secs = (gint32)(start_secs + longts/1000);",
          "1605:       abs_secs = (gint32)(start_secs + longts/1000);",
          "",
          "[Added Lines]",
          "1599:     time_t abs_secs = start_secs + longts/1000;",
          "1605:       abs_secs = start_secs + longts/1000;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fedd01d412836b89962184919498d69a221a5a67",
      "candidate_info": {
        "commit_hash": "fedd01d412836b89962184919498d69a221a5a67",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/fedd01d412836b89962184919498d69a221a5a67",
        "files": [
          "epan/dissectors/packet-iax2.c"
        ],
        "message": "IAX2: fix an infinite loop\n\nBug: 12260\nChange-Id: I29b23ff2d862027fd44c6dd4de3cbb304664fd05\nReviewed-on: https://code.wireshark.org/review/14473\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 42f299be6abb302f32cec78b1c0812364c9f9285)\nReviewed-on: https://code.wireshark.org/review/14474",
        "before_after_code_files": [
          "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ],
          "candidate": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c": [
          "File: epan/dissectors/packet-iax2.c -> epan/dissectors/packet-iax2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1576:   if (iax_packet->abstime.secs == -1) {",
          "1577:     time_t start_secs = iax_packet->call_data->start_time.secs;",
          "1582:     while(abs_secs < pinfo->fd->abs_ts.secs - 16) {",
          "1583:       longts += 32768;",
          "1585:     }",
          "1587:     iax_packet->abstime.secs=abs_secs;",
          "",
          "[Removed Lines]",
          "1578:     gint32 abs_secs = (gint32)(start_secs + longts/1000);",
          "1584:       abs_secs = (gint32)(start_secs + longts/1000);",
          "",
          "[Added Lines]",
          "1578:     time_t abs_secs = start_secs + longts/1000;",
          "1584:       abs_secs = start_secs + longts/1000;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73dbc54c266eaed245f2c38e7f68fe10c9b4f39d",
      "candidate_info": {
        "commit_hash": "73dbc54c266eaed245f2c38e7f68fe10c9b4f39d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/73dbc54c266eaed245f2c38e7f68fe10c9b4f39d",
        "files": [
          "epan/dissectors/packet-iax2.c"
        ],
        "message": "IAX2: fix an infinite loop\n\nBug: 12260\nChange-Id: I29b23ff2d862027fd44c6dd4de3cbb304664fd05\nReviewed-on: https://code.wireshark.org/review/14473\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 42f299be6abb302f32cec78b1c0812364c9f9285)\nReviewed-on: https://code.wireshark.org/review/14474\n(cherry picked from commit fedd01d412836b89962184919498d69a221a5a67)\nReviewed-on: https://code.wireshark.org/review/14475",
        "before_after_code_files": [
          "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ],
          "candidate": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c": [
          "File: epan/dissectors/packet-iax2.c -> epan/dissectors/packet-iax2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1597:   if (iax_packet->abstime.secs == -1) {",
          "1598:     time_t start_secs = iax_packet->call_data->start_time.secs;",
          "1603:     while(abs_secs < pinfo->fd->abs_ts.secs - 16) {",
          "1604:       longts += 32768;",
          "1606:     }",
          "1608:     iax_packet->abstime.secs=abs_secs;",
          "",
          "[Removed Lines]",
          "1599:     gint32 abs_secs = (gint32)(start_secs + longts/1000);",
          "1605:       abs_secs = (gint32)(start_secs + longts/1000);",
          "",
          "[Added Lines]",
          "1599:     time_t abs_secs = start_secs + longts/1000;",
          "1605:       abs_secs = start_secs + longts/1000;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f297d6d51d7daab0c5a6a8d2800e07c29539c2e",
      "candidate_info": {
        "commit_hash": "9f297d6d51d7daab0c5a6a8d2800e07c29539c2e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9f297d6d51d7daab0c5a6a8d2800e07c29539c2e",
        "files": [
          "epan/dissectors/packet-iax2.c"
        ],
        "message": "IAX2: Add a timestamp check.\n\nDon't try to process timestamps that are more than 60 seconds apart.\nAvoids the infinite loop in bug 13432.\n\nBug: 13432\nChange-Id: I05aea4c733c94cbfe832f03ba826c74a41e6bb2f\nReviewed-on: https://code.wireshark.org/review/20366\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>\n(cherry picked from commit ca68749606bb78a333a0961dbf9fa74c65fa72aa)\nReviewed-on: https://code.wireshark.org/review/20367",
        "before_after_code_files": [
          "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ],
          "candidate": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c": [
          "File: epan/dissectors/packet-iax2.c -> epan/dissectors/packet-iax2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: static expert_field ei_iax_circuit_id_conflict = EI_INIT;",
          "190: static expert_field ei_iax_peer_address_unsupported = EI_INIT;",
          "191: static expert_field ei_iax_invalid_len = EI_INIT;",
          "193: static const fragment_items iax2_fragment_items = {",
          "194:   &ett_iax2_fragment,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192: static expert_field ei_iax_invalid_ts = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1563:   return offset;",
          "1564: }",
          "1567: {",
          "1569:   nstime_t    ts;",
          "1570:   proto_item *item;",
          "",
          "[Removed Lines]",
          "1566: static void iax2_add_ts_fields(packet_info *pinfo, proto_tree *iax2_tree, iax_packet_data *iax_packet, guint16 shortts)",
          "1568:   guint32     longts =shortts;",
          "",
          "[Added Lines]",
          "1568: static void iax2_add_ts_fields(packet_info *pinfo, proto_tree *iax2_tree, tvbuff_t *tvb, iax_packet_data *iax_packet, guint16 shortts)",
          "1570:   guint       longts =shortts;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1578:     time_t start_secs = iax_packet->call_data->start_time.secs;",
          "1579:     time_t abs_secs = start_secs + longts/1000;",
          "1586:     }",
          "1588:     iax_packet->abstime.secs=abs_secs;",
          "",
          "[Removed Lines]",
          "1583:     while(abs_secs < pinfo->abs_ts.secs - 16) {",
          "1584:       longts += 32768;",
          "1585:       abs_secs = start_secs + longts/1000;",
          "",
          "[Added Lines]",
          "1583:     if (pinfo->abs_ts.secs - abs_secs > MAX_SECS_DIFF) {",
          "1584:       proto_tree_add_expert(iax2_tree, pinfo, &ei_iax_invalid_ts, tvb, 0, 0);",
          "1585:     } else {",
          "1589:       while(abs_secs < pinfo->abs_ts.secs - 16) {",
          "1590:         longts += 32768;",
          "1591:         abs_secs = start_secs + longts/1000;",
          "1592:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1595:   iax2_info->timestamp = longts;",
          "1597:   if (iax2_tree) {",
          "1599:     PROTO_ITEM_SET_GENERATED(item);",
          "1601:     ts  = pinfo->abs_ts;",
          "1602:     nstime_delta(&ts, &ts, &iax_packet->abstime);",
          "1605:     PROTO_ITEM_SET_GENERATED(item);",
          "1606:   }",
          "1607: }",
          "",
          "[Removed Lines]",
          "1598:     item = proto_tree_add_time(iax2_tree, hf_iax2_absts, NULL, 0, 0, &iax_packet->abstime);",
          "1604:     item = proto_tree_add_time(iax2_tree, hf_iax2_lateness, NULL, 0, 0, &ts);",
          "",
          "[Added Lines]",
          "1605:     item = proto_tree_add_time(iax2_tree, hf_iax2_absts, tvb, 0, 0, &iax_packet->abstime);",
          "1611:     item = proto_tree_add_time(iax2_tree, hf_iax2_lateness, tvb, 0, 0, &ts);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1675:       }",
          "1677:       proto_tree_add_uint(iax2_tree, hf_iax2_ts, tvb, offset+2, 4, ts);",
          "1680:       proto_tree_add_item(iax2_tree, hf_iax2_oseqno, tvb, offset+6, 1,",
          "1681:                           ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "1678:       iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1685:       iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1689:       packet_type_tree = proto_item_add_subtree(packet_type_base, ett_iax2_type);",
          "1690:   } else {",
          "1692:   }",
          "",
          "[Removed Lines]",
          "1691:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1698:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1892:     }",
          "1894:     proto_tree_add_item(iax2_tree, hf_iax2_minividts, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1896:     proto_tree_add_item(iax2_tree, hf_iax2_minividmarker, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1897:   } else {",
          "1899:   }",
          "1901:   offset += 2;",
          "",
          "[Removed Lines]",
          "1895:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "1898:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1902:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "1905:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1934:     }",
          "1936:     proto_tree_add_uint(iax2_tree, hf_iax2_minits, tvb, offset, 2, ts);",
          "1938:   } else {",
          "1940:   }",
          "",
          "[Removed Lines]",
          "1937:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "1939:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1944:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "1946:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3182:     { &ei_iax_too_many_transfers, { \"iax2.too_many_transfers\", PI_PROTOCOL, PI_WARN, \"Too many transfers for iax_call\", EXPFILL }},",
          "3183:     { &ei_iax_circuit_id_conflict, { \"iax2.circuit_id_conflict\", PI_PROTOCOL, PI_WARN, \"Circuit ID conflict\", EXPFILL }},",
          "3184:     { &ei_iax_peer_address_unsupported, { \"iax2.peer_address_unsupported\", PI_PROTOCOL, PI_WARN, \"Peer address unsupported\", EXPFILL }},",
          "3186:   };",
          "3188:   expert_module_t* expert_iax;",
          "",
          "[Removed Lines]",
          "3185:     { &ei_iax_invalid_len, { \"iax2.invalid_len\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }}",
          "",
          "[Added Lines]",
          "3192:     { &ei_iax_invalid_len, { \"iax2.invalid_len\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }},",
          "3193:     { &ei_iax_invalid_ts, { \"iax2.invalid_ts\", PI_PROTOCOL, PI_WARN, \"Invalid timestamp\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca68749606bb78a333a0961dbf9fa74c65fa72aa",
      "candidate_info": {
        "commit_hash": "ca68749606bb78a333a0961dbf9fa74c65fa72aa",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/ca68749606bb78a333a0961dbf9fa74c65fa72aa",
        "files": [
          "epan/dissectors/packet-iax2.c"
        ],
        "message": "IAX2: Add a timestamp check.\n\nDon't try to process timestamps that are more than 60 seconds apart.\nAvoids the infinite loop in bug 13432.\n\nBug: 13432\nChange-Id: I05aea4c733c94cbfe832f03ba826c74a41e6bb2f\nReviewed-on: https://code.wireshark.org/review/20366\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>",
        "before_after_code_files": [
          "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ],
          "candidate": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c": [
          "File: epan/dissectors/packet-iax2.c -> epan/dissectors/packet-iax2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: static expert_field ei_iax_circuit_id_conflict = EI_INIT;",
          "190: static expert_field ei_iax_peer_address_unsupported = EI_INIT;",
          "191: static expert_field ei_iax_invalid_len = EI_INIT;",
          "193: static dissector_handle_t iax2_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192: static expert_field ei_iax_invalid_ts = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1565:   return offset;",
          "1566: }",
          "1569: {",
          "1571:   nstime_t    ts;",
          "1572:   proto_item *item;",
          "",
          "[Removed Lines]",
          "1568: static void iax2_add_ts_fields(packet_info *pinfo, proto_tree *iax2_tree, iax_packet_data *iax_packet, guint16 shortts)",
          "1570:   guint32     longts =shortts;",
          "",
          "[Added Lines]",
          "1570: static void iax2_add_ts_fields(packet_info *pinfo, proto_tree *iax2_tree, tvbuff_t *tvb, iax_packet_data *iax_packet, guint16 shortts)",
          "1572:   guint       longts =shortts;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1580:     time_t start_secs = iax_packet->call_data->start_time.secs;",
          "1581:     time_t abs_secs = start_secs + longts/1000;",
          "1588:     }",
          "1590:     iax_packet->abstime.secs=abs_secs;",
          "",
          "[Removed Lines]",
          "1585:     while(abs_secs < pinfo->abs_ts.secs - 16) {",
          "1586:       longts += 32768;",
          "1587:       abs_secs = start_secs + longts/1000;",
          "",
          "[Added Lines]",
          "1585:     if (pinfo->abs_ts.secs - abs_secs > MAX_SECS_DIFF) {",
          "1586:       proto_tree_add_expert(iax2_tree, pinfo, &ei_iax_invalid_ts, tvb, 0, 0);",
          "1587:     } else {",
          "1591:       while(abs_secs < pinfo->abs_ts.secs - 16) {",
          "1592:         longts += 32768;",
          "1593:         abs_secs = start_secs + longts/1000;",
          "1594:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1597:   iax2_info->timestamp = longts;",
          "1599:   if (iax2_tree) {",
          "1601:     PROTO_ITEM_SET_GENERATED(item);",
          "1603:     ts  = pinfo->abs_ts;",
          "1604:     nstime_delta(&ts, &ts, &iax_packet->abstime);",
          "1607:     PROTO_ITEM_SET_GENERATED(item);",
          "1608:   }",
          "1609: }",
          "",
          "[Removed Lines]",
          "1600:     item = proto_tree_add_time(iax2_tree, hf_iax2_absts, NULL, 0, 0, &iax_packet->abstime);",
          "1606:     item = proto_tree_add_time(iax2_tree, hf_iax2_lateness, NULL, 0, 0, &ts);",
          "",
          "[Added Lines]",
          "1607:     item = proto_tree_add_time(iax2_tree, hf_iax2_absts, tvb, 0, 0, &iax_packet->abstime);",
          "1613:     item = proto_tree_add_time(iax2_tree, hf_iax2_lateness, tvb, 0, 0, &ts);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1677:       }",
          "1679:       proto_tree_add_uint(iax2_tree, hf_iax2_ts, tvb, offset+2, 4, ts);",
          "1682:       proto_tree_add_item(iax2_tree, hf_iax2_oseqno, tvb, offset+6, 1,",
          "1683:                           ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "1680:       iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1687:       iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1691:       packet_type_tree = proto_item_add_subtree(packet_type_base, ett_iax2_type);",
          "1692:   } else {",
          "1694:   }",
          "",
          "[Removed Lines]",
          "1693:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1700:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1894:     }",
          "1896:     proto_tree_add_item(iax2_tree, hf_iax2_minividts, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1898:     proto_tree_add_item(iax2_tree, hf_iax2_minividmarker, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1899:   } else {",
          "1901:   }",
          "1903:   offset += 2;",
          "",
          "[Removed Lines]",
          "1897:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "1900:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1904:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "1907:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1936:     }",
          "1938:     proto_tree_add_uint(iax2_tree, hf_iax2_minits, tvb, offset, 2, ts);",
          "1940:   } else {",
          "1942:   }",
          "",
          "[Removed Lines]",
          "1939:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "1941:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1946:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "1948:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3180:     { &ei_iax_too_many_transfers, { \"iax2.too_many_transfers\", PI_PROTOCOL, PI_WARN, \"Too many transfers for iax_call\", EXPFILL }},",
          "3181:     { &ei_iax_circuit_id_conflict, { \"iax2.circuit_id_conflict\", PI_PROTOCOL, PI_WARN, \"Circuit ID conflict\", EXPFILL }},",
          "3182:     { &ei_iax_peer_address_unsupported, { \"iax2.peer_address_unsupported\", PI_PROTOCOL, PI_WARN, \"Peer address unsupported\", EXPFILL }},",
          "3184:   };",
          "3186:   expert_module_t* expert_iax;",
          "",
          "[Removed Lines]",
          "3183:     { &ei_iax_invalid_len, { \"iax2.invalid_len\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }}",
          "",
          "[Added Lines]",
          "3190:     { &ei_iax_invalid_len, { \"iax2.invalid_len\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }},",
          "3191:     { &ei_iax_invalid_ts, { \"iax2.invalid_ts\", PI_PROTOCOL, PI_WARN, \"Invalid timestamp\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    }
  ]
}