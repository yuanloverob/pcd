{
  "cve_id": "CVE-2022-24792",
  "cve_desc": "PJSIP is a free and open source multimedia communication library written in C. A denial-of-service vulnerability affects applications on a 32-bit systems that use PJSIP versions 2.12 and prior to play/read invalid WAV files. The vulnerability occurs when reading WAV file data chunks with length greater than 31-bit integers. The vulnerability does not affect 64-bit apps and should not affect apps that only plays trusted WAV files. A patch is available on the `master` branch of the `pjsip/project` GitHub repository. As a workaround, apps can reject a WAV file received from an unknown source or validate the file first.",
  "repo": "pjsip/pjproject",
  "patch_hash": "947bc1ee6d05be10204b918df75a503415fd3213",
  "patch_info": {
    "commit_hash": "947bc1ee6d05be10204b918df75a503415fd3213",
    "repo": "pjsip/pjproject",
    "commit_url": "https://github.com/pjsip/pjproject/commit/947bc1ee6d05be10204b918df75a503415fd3213",
    "files": [
      "pjlib/include/pj/types.h",
      "pjlib/src/pj/file_io_ansi.c",
      "pjmedia/src/pjmedia/avi_player.c",
      "pjmedia/src/pjmedia/wav_player.c",
      "pjmedia/src/pjmedia/wav_playlist.c"
    ],
    "message": "Merge pull request from GHSA-rwgw-vwxg-q799\n\n* Prevent potential infinite loop when parsing WAV format file\n\n* Check if subchunk is negative.\n\n* Fix and add checks\n\n* Change data type from pj_ssize_t to long.\n\n* Modify check\n\n* Fix leak file descriptor and modify check on wav_playlist\n\n* Move overflow/underflow check to pj_file_setpos()\n\n* Use macro to simplify check\n\n* modification based on comments\n\n* Remove unnecessary casting\n\n* Modification based on comments",
    "before_after_code_files": [
      "pjlib/include/pj/types.h||pjlib/include/pj/types.h",
      "pjlib/src/pj/file_io_ansi.c||pjlib/src/pj/file_io_ansi.c",
      "pjmedia/src/pjmedia/avi_player.c||pjmedia/src/pjmedia/avi_player.c",
      "pjmedia/src/pjmedia/wav_player.c||pjmedia/src/pjmedia/wav_player.c",
      "pjmedia/src/pjmedia/wav_playlist.c||pjmedia/src/pjmedia/wav_playlist.c"
    ]
  },
  "patch_diff": {
    "pjlib/include/pj/types.h||pjlib/include/pj/types.h": [
      "File: pjlib/include/pj/types.h -> pjlib/include/pj/types.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: #include <pj/config.h>",
      "35: PJ_BEGIN_DECL",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: #include <pj/limits.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "361:     return val32;",
      "362: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "366: #define PJ_CHECK_OVERFLOW_UINT32_TO_LONG(uint32_var, exec_on_overflow) \\",
      "367:  do { \\",
      "368:      if (uint32_var > PJ_MAXLONG) { \\",
      "369:   exec_on_overflow; \\",
      "370:      } \\",
      "371:  } while (0)",
      "",
      "---------------"
    ],
    "pjlib/src/pj/file_io_ansi.c||pjlib/src/pj/file_io_ansi.c": [
      "File: pjlib/src/pj/file_io_ansi.c -> pjlib/src/pj/file_io_ansi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: #include <pj/file_io.h>",
      "21: #include <pj/assert.h>",
      "22: #include <pj/errno.h>",
      "23: #include <stdio.h>",
      "24: #include <errno.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: #include <pj/limits.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "124: {",
      "125:     int mode;",
      "127:     switch (whence) {",
      "128:     case PJ_SEEK_SET:",
      "129:         mode = SEEK_SET; break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "128:     if ((sizeof(pj_off_t) > sizeof(long)) &&",
      "129:         (offset > PJ_MAXLONG || offset < PJ_MINLONG))",
      "130:     {",
      "131:         return PJ_ENOTSUP;",
      "132:     }",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia/avi_player.c||pjmedia/src/pjmedia/avi_player.c": [
      "File: pjmedia/src/pjmedia/avi_player.c -> pjmedia/src/pjmedia/avi_player.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "283:     for (i = 0; i < avi_hdr.avih_hdr.num_streams; i++) {",
      "284:         pj_size_t elem = 0;",
      "288:         status = file_read(fport[0]->fd, &avi_hdr.strl_hdr[i],",
      "",
      "[Removed Lines]",
      "285:         pj_ssize_t size_to_read;",
      "",
      "[Added Lines]",
      "285:         pj_off_t size_to_read;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "335:     do {",
      "336:         pjmedia_avi_subchunk ch;",
      "337:         int read = 0;",
      "339:         status = file_read(fport[0]->fd, &ch, sizeof(pjmedia_avi_subchunk));",
      "340:         if (status != PJ_SUCCESS) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "338:         pj_off_t size_to_read;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "349:                 break;",
      "350:         }",
      "353:         if (status != PJ_SUCCESS) {",
      "354:             goto on_error;",
      "355:         }",
      "",
      "[Removed Lines]",
      "352:         status = pj_file_setpos(fport[0]->fd, ch.len-read, PJ_SEEK_CUR);",
      "",
      "[Added Lines]",
      "353:         if (ch.len < read) {",
      "354:             status = PJ_EINVAL;",
      "355:             goto on_error;",
      "356:         }",
      "357:         PJ_CHECK_OVERFLOW_UINT32_TO_LONG(ch.len - read,",
      "358:                                          status = PJ_EINVAL; goto on_error;);",
      "359:         size_to_read = (pj_off_t)ch.len - read;",
      "361:         status = pj_file_setpos(fport[0]->fd, size_to_read, PJ_SEEK_CUR);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "776:         if (fport->size_left == 0) {",
      "777:             pj_off_t pos;",
      "778:             pj_file_getpos(fport->fd, &pos);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "787:             pj_off_t ch_len;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "788:                 size_read = 0;",
      "789:                 goto on_error2;",
      "790:             }",
      "792:             cid = (char *)&ch.id;",
      "793:             if (cid[0] >= '0' && cid[0] <= '9' &&",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "803:             PJ_CHECK_OVERFLOW_UINT32_TO_LONG(ch.len,",
      "804:                                          status = PJ_EINVAL;  goto on_error2;);",
      "805:             ch_len = ch.len;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "814:                     goto on_error2;",
      "815:                 }",
      "819:                 continue;",
      "820:             }",
      "821:             fport->size_left = ch.len;",
      "",
      "[Removed Lines]",
      "817:                 status = pj_file_setpos(fport->fd, ch.len,",
      "818:                                         PJ_SEEK_CUR);",
      "",
      "[Added Lines]",
      "832:                 status = pj_file_setpos(fport->fd, ch_len, PJ_SEEK_CUR);",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia/wav_player.c||pjmedia/src/pjmedia/wav_player.c": [
      "File: pjmedia/src/pjmedia/wav_player.c -> pjmedia/src/pjmedia/wav_player.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:            pjmedia_port **p_port )",
      "189: {",
      "190:     pjmedia_wave_hdr wave_hdr;",
      "192:     struct file_reader_port *fport;",
      "193:     pjmedia_audio_format_detail *ad;",
      "194:     pj_off_t pos;",
      "",
      "[Removed Lines]",
      "191:     pj_ssize_t size_to_read, size_read;",
      "",
      "[Added Lines]",
      "191:     pj_ssize_t size_read;",
      "192:     pj_off_t size_to_read;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234:  return status;",
      "238:     status = pj_file_read( fport->fd, &wave_hdr, &size_read);",
      "239:     if (status != PJ_SUCCESS) {",
      "240:  pj_file_close(fport->fd);",
      "",
      "[Removed Lines]",
      "237:     size_read = size_to_read = sizeof(wave_hdr) - 8;",
      "",
      "[Added Lines]",
      "238:     size_to_read = size_read = sizeof(wave_hdr) - 8;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "299:     if (wave_hdr.fmt_hdr.len > 16) {",
      "301:  status = pj_file_setpos(fport->fd, size_to_read, PJ_SEEK_CUR);",
      "302:  if (status != PJ_SUCCESS) {",
      "303:      pj_file_close(fport->fd);",
      "",
      "[Removed Lines]",
      "300:  size_to_read = wave_hdr.fmt_hdr.len - 16;",
      "",
      "[Added Lines]",
      "301:  PJ_CHECK_OVERFLOW_UINT32_TO_LONG(wave_hdr.fmt_hdr.len - 16,",
      "302:         pj_file_close(fport->fd); return PJMEDIA_ENOTVALIDWAVE;);",
      "303:  size_to_read = (pj_off_t)wave_hdr.fmt_hdr.len - 16;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "326:  }",
      "329:  size_to_read = subchunk.len;",
      "330:  status = pj_file_setpos(fport->fd, size_to_read, PJ_SEEK_CUR);",
      "331:  if (status != PJ_SUCCESS) {",
      "332:      pj_file_close(fport->fd);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "332:  PJ_CHECK_OVERFLOW_UINT32_TO_LONG(subchunk.len,",
      "333:         pj_file_close(fport->fd); return PJMEDIA_ENOTVALIDWAVE;);",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia/wav_playlist.c||pjmedia/src/pjmedia/wav_playlist.c": [
      "File: pjmedia/src/pjmedia/wav_playlist.c -> pjmedia/src/pjmedia/wav_playlist.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "419:     for (index=file_count-1; index>=0; index--) {",
      "421:  pjmedia_wave_hdr wavehdr;",
      "425:  pj_memcpy(filename, file_list[index].ptr, file_list[index].slen);",
      "",
      "[Removed Lines]",
      "422:  pj_ssize_t size_to_read, size_read;",
      "",
      "[Added Lines]",
      "422:  pj_ssize_t size_read;",
      "423:  pj_off_t size_to_read;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "442:      goto on_error;",
      "446:  status = pj_file_read( fport->fd_list[index], &wavehdr, &size_read);",
      "447:  if (status != PJ_SUCCESS) {",
      "448:      goto on_error;",
      "",
      "[Removed Lines]",
      "445:  size_read = size_to_read = sizeof(wavehdr) - 8;",
      "",
      "[Added Lines]",
      "446:  size_to_read = size_read = sizeof(wavehdr) - 8;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "494:  if (wavehdr.fmt_hdr.len > 16) {",
      "496:      status = pj_file_setpos(fport->fd_list[index], size_to_read,",
      "497:         PJ_SEEK_CUR);",
      "498:      if (status != PJ_SUCCESS) {",
      "",
      "[Removed Lines]",
      "495:      size_to_read = wavehdr.fmt_hdr.len - 16;",
      "",
      "[Added Lines]",
      "496:      PJ_CHECK_OVERFLOW_UINT32_TO_LONG(wavehdr.fmt_hdr.len-16,",
      "497:           status = PJMEDIA_ENOTVALIDWAVE; goto on_error;);",
      "498:      size_to_read = (pj_off_t)wavehdr.fmt_hdr.len - 16;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "522:      }",
      "525:      size_to_read = subchunk.len;",
      "526:      status = pj_file_setpos(fport->fd_list[index], size_to_read,",
      "527:         PJ_SEEK_CUR);",
      "528:      if (status != PJ_SUCCESS) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "528:      PJ_CHECK_OVERFLOW_UINT32_TO_LONG(subchunk.len,",
      "529:           status = PJMEDIA_ENOTVALIDWAVE; goto on_error;);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a575041ac3388e970374edae289c5261295cc355",
      "candidate_info": {
        "commit_hash": "a575041ac3388e970374edae289c5261295cc355",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/a575041ac3388e970374edae289c5261295cc355",
        "files": [
          "pjlib/include/pj/compat/limits.h",
          "pjlib/include/pj/types.h"
        ],
        "message": "Fix warnings related to <pj/limits.h> (#3089)",
        "before_after_code_files": [
          "pjlib/include/pj/compat/limits.h||pjlib/include/pj/compat/limits.h",
          "pjlib/include/pj/types.h||pjlib/include/pj/types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pjlib/include/pj/types.h||pjlib/include/pj/types.h"
          ],
          "candidate": [
            "pjlib/include/pj/types.h||pjlib/include/pj/types.h"
          ]
        }
      },
      "candidate_diff": {
        "pjlib/include/pj/compat/limits.h||pjlib/include/pj/compat/limits.h": [
          "File: pjlib/include/pj/compat/limits.h -> pjlib/include/pj/compat/limits.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #if defined(PJ_HAS_LIMITS_H) && PJ_HAS_LIMITS_H != 0",
          "29: #  include <limits.h>",
          "30: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <pj/config.h>",
          "",
          "---------------"
        ],
        "pjlib/include/pj/types.h||pjlib/include/pj/types.h": [
          "File: pjlib/include/pj/types.h -> pjlib/include/pj/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     return val32;",
          "363: }",
          "",
          "[Removed Lines]",
          "366: #define PJ_CHECK_OVERFLOW_UINT32_TO_LONG(uint32_var, exec_on_overflow) \\",
          "367:  do { \\",
          "368:      if (uint32_var > PJ_MAXLONG) { \\",
          "369:   exec_on_overflow; \\",
          "370:      } \\",
          "371:  } while (0)",
          "",
          "[Added Lines]",
          "370: #if (PJ_MAXLONG <= 2147483647L)",
          "371: #  define PJ_CHECK_OVERFLOW_UINT32_TO_LONG(uint32_var, exec_on_overflow) \\",
          "372:      do { \\",
          "373:        if (uint32_var > PJ_MAXLONG) { \\",
          "374:          exec_on_overflow; \\",
          "375:        } \\",
          "376:      } while (0)",
          "377: #else",
          "379: #  define PJ_CHECK_OVERFLOW_UINT32_TO_LONG(uint32_var, exec_on_overflow)",
          "380: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad39e53ad23fb8cca74f415f913a33d8af849c02",
      "candidate_info": {
        "commit_hash": "ad39e53ad23fb8cca74f415f913a33d8af849c02",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/ad39e53ad23fb8cca74f415f913a33d8af849c02",
        "files": [
          "pjmedia/src/pjmedia/avi_player.c"
        ],
        "message": "Fix AVI player: compile warning and unchecked file_read() return value (#3092)",
        "before_after_code_files": [
          "pjmedia/src/pjmedia/avi_player.c||pjmedia/src/pjmedia/avi_player.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pjmedia/src/pjmedia/avi_player.c||pjmedia/src/pjmedia/avi_player.c"
          ],
          "candidate": [
            "pjmedia/src/pjmedia/avi_player.c||pjmedia/src/pjmedia/avi_player.c"
          ]
        }
      },
      "candidate_diff": {
        "pjmedia/src/pjmedia/avi_player.c||pjmedia/src/pjmedia/avi_player.c": [
          "File: pjmedia/src/pjmedia/avi_player.c -> pjmedia/src/pjmedia/avi_player.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:         {",
          "347:             read = 4;",
          "348:             status = file_read(fport[0]->fd, &ch, read);",
          "349:             if (COMPARE_TAG(ch.id, PJMEDIA_AVI_MOVI_TAG))",
          "350:                 break;",
          "351:         }",
          "354:             status = PJ_EINVAL;",
          "355:             goto on_error;",
          "356:         }",
          "",
          "[Removed Lines]",
          "353:         if (ch.len < read) {",
          "",
          "[Added Lines]",
          "349:      if (status != PJ_SUCCESS) {",
          "350:   goto on_error;",
          "351:      }",
          "357:         if (ch.len < (pj_uint32_t)read) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62f4c61672495b1552a986c7606eb8a59a6e5122",
      "candidate_info": {
        "commit_hash": "62f4c61672495b1552a986c7606eb8a59a6e5122",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/62f4c61672495b1552a986c7606eb8a59a6e5122",
        "files": [
          "pjlib/include/pj/types.h",
          "pjlib/src/pj/file_io_ansi.c",
          "pjmedia/src/pjmedia/avi_player.c",
          "pjmedia/src/pjmedia/wav_player.c",
          "pjmedia/src/pjmedia/wav_playlist.c"
        ],
        "message": "Merge pull request from GHSA-rwgw-vwxg-q799\n\n* Prevent potential infinite loop when parsing WAV format file\n\n* Check if subchunk is negative.\n\n* Fix and add checks\n\n* Change data type from pj_ssize_t to long.\n\n* Modify check\n\n* Fix leak file descriptor and modify check on wav_playlist\n\n* Move overflow/underflow check to pj_file_setpos()\n\n* Use macro to simplify check\n\n* modification based on comments\n\n* Remove unnecessary casting\n\n* Modification based on comments",
        "before_after_code_files": [
          "pjlib/include/pj/types.h||pjlib/include/pj/types.h",
          "pjlib/src/pj/file_io_ansi.c||pjlib/src/pj/file_io_ansi.c",
          "pjmedia/src/pjmedia/avi_player.c||pjmedia/src/pjmedia/avi_player.c",
          "pjmedia/src/pjmedia/wav_player.c||pjmedia/src/pjmedia/wav_player.c",
          "pjmedia/src/pjmedia/wav_playlist.c||pjmedia/src/pjmedia/wav_playlist.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pjlib/include/pj/types.h||pjlib/include/pj/types.h",
            "pjlib/src/pj/file_io_ansi.c||pjlib/src/pj/file_io_ansi.c",
            "pjmedia/src/pjmedia/avi_player.c||pjmedia/src/pjmedia/avi_player.c",
            "pjmedia/src/pjmedia/wav_player.c||pjmedia/src/pjmedia/wav_player.c",
            "pjmedia/src/pjmedia/wav_playlist.c||pjmedia/src/pjmedia/wav_playlist.c"
          ],
          "candidate": [
            "pjlib/include/pj/types.h||pjlib/include/pj/types.h",
            "pjlib/src/pj/file_io_ansi.c||pjlib/src/pj/file_io_ansi.c",
            "pjmedia/src/pjmedia/avi_player.c||pjmedia/src/pjmedia/avi_player.c",
            "pjmedia/src/pjmedia/wav_player.c||pjmedia/src/pjmedia/wav_player.c",
            "pjmedia/src/pjmedia/wav_playlist.c||pjmedia/src/pjmedia/wav_playlist.c"
          ]
        }
      },
      "candidate_diff": {
        "pjlib/include/pj/types.h||pjlib/include/pj/types.h": [
          "File: pjlib/include/pj/types.h -> pjlib/include/pj/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <pj/config.h>",
          "35: PJ_BEGIN_DECL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <pj/limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "361:     return val32;",
          "362: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366: #define PJ_CHECK_OVERFLOW_UINT32_TO_LONG(uint32_var, exec_on_overflow) \\",
          "367:  do { \\",
          "368:      if (uint32_var > PJ_MAXLONG) { \\",
          "369:   exec_on_overflow; \\",
          "370:      } \\",
          "371:  } while (0)",
          "",
          "---------------"
        ],
        "pjlib/src/pj/file_io_ansi.c||pjlib/src/pj/file_io_ansi.c": [
          "File: pjlib/src/pj/file_io_ansi.c -> pjlib/src/pj/file_io_ansi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include <pj/file_io.h>",
          "21: #include <pj/assert.h>",
          "22: #include <pj/errno.h>",
          "23: #include <stdio.h>",
          "24: #include <errno.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <pj/limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124: {",
          "125:     int mode;",
          "127:     switch (whence) {",
          "128:     case PJ_SEEK_SET:",
          "129:         mode = SEEK_SET; break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:     if ((sizeof(pj_off_t) > sizeof(long)) &&",
          "129:         (offset > PJ_MAXLONG || offset < PJ_MINLONG))",
          "130:     {",
          "131:         return PJ_ENOTSUP;",
          "132:     }",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/avi_player.c||pjmedia/src/pjmedia/avi_player.c": [
          "File: pjmedia/src/pjmedia/avi_player.c -> pjmedia/src/pjmedia/avi_player.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:     for (i = 0; i < avi_hdr.avih_hdr.num_streams; i++) {",
          "284:         pj_size_t elem = 0;",
          "288:         status = file_read(fport[0]->fd, &avi_hdr.strl_hdr[i],",
          "",
          "[Removed Lines]",
          "285:         pj_ssize_t size_to_read;",
          "",
          "[Added Lines]",
          "285:         pj_off_t size_to_read;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "335:     do {",
          "336:         pjmedia_avi_subchunk ch;",
          "337:         int read = 0;",
          "339:         status = file_read(fport[0]->fd, &ch, sizeof(pjmedia_avi_subchunk));",
          "340:         if (status != PJ_SUCCESS) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338:         pj_off_t size_to_read;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:                 break;",
          "350:         }",
          "353:         if (status != PJ_SUCCESS) {",
          "354:             goto on_error;",
          "355:         }",
          "",
          "[Removed Lines]",
          "352:         status = pj_file_setpos(fport[0]->fd, ch.len-read, PJ_SEEK_CUR);",
          "",
          "[Added Lines]",
          "353:         if (ch.len < read) {",
          "354:             status = PJ_EINVAL;",
          "355:             goto on_error;",
          "356:         }",
          "357:         PJ_CHECK_OVERFLOW_UINT32_TO_LONG(ch.len - read,",
          "358:                                          status = PJ_EINVAL; goto on_error;);",
          "359:         size_to_read = (pj_off_t)ch.len - read;",
          "361:         status = pj_file_setpos(fport[0]->fd, size_to_read, PJ_SEEK_CUR);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "776:         if (fport->size_left == 0) {",
          "777:             pj_off_t pos;",
          "778:             pj_file_getpos(fport->fd, &pos);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "787:             pj_off_t ch_len;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "788:                 size_read = 0;",
          "789:                 goto on_error2;",
          "790:             }",
          "792:             cid = (char *)&ch.id;",
          "793:             if (cid[0] >= '0' && cid[0] <= '9' &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "803:             PJ_CHECK_OVERFLOW_UINT32_TO_LONG(ch.len,",
          "804:                                          status = PJ_EINVAL;  goto on_error2;);",
          "805:             ch_len = ch.len;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "814:                     goto on_error2;",
          "815:                 }",
          "819:                 continue;",
          "820:             }",
          "821:             fport->size_left = ch.len;",
          "",
          "[Removed Lines]",
          "817:                 status = pj_file_setpos(fport->fd, ch.len,",
          "818:                                         PJ_SEEK_CUR);",
          "",
          "[Added Lines]",
          "832:                 status = pj_file_setpos(fport->fd, ch_len, PJ_SEEK_CUR);",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/wav_player.c||pjmedia/src/pjmedia/wav_player.c": [
          "File: pjmedia/src/pjmedia/wav_player.c -> pjmedia/src/pjmedia/wav_player.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:            pjmedia_port **p_port )",
          "189: {",
          "190:     pjmedia_wave_hdr wave_hdr;",
          "192:     struct file_reader_port *fport;",
          "193:     pjmedia_audio_format_detail *ad;",
          "194:     pj_off_t pos;",
          "",
          "[Removed Lines]",
          "191:     pj_ssize_t size_to_read, size_read;",
          "",
          "[Added Lines]",
          "191:     pj_ssize_t size_read;",
          "192:     pj_off_t size_to_read;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:  return status;",
          "238:     status = pj_file_read( fport->fd, &wave_hdr, &size_read);",
          "239:     if (status != PJ_SUCCESS) {",
          "240:  pj_file_close(fport->fd);",
          "",
          "[Removed Lines]",
          "237:     size_read = size_to_read = sizeof(wave_hdr) - 8;",
          "",
          "[Added Lines]",
          "238:     size_to_read = size_read = sizeof(wave_hdr) - 8;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "299:     if (wave_hdr.fmt_hdr.len > 16) {",
          "301:  status = pj_file_setpos(fport->fd, size_to_read, PJ_SEEK_CUR);",
          "302:  if (status != PJ_SUCCESS) {",
          "303:      pj_file_close(fport->fd);",
          "",
          "[Removed Lines]",
          "300:  size_to_read = wave_hdr.fmt_hdr.len - 16;",
          "",
          "[Added Lines]",
          "301:  PJ_CHECK_OVERFLOW_UINT32_TO_LONG(wave_hdr.fmt_hdr.len - 16,",
          "302:         pj_file_close(fport->fd); return PJMEDIA_ENOTVALIDWAVE;);",
          "303:  size_to_read = (pj_off_t)wave_hdr.fmt_hdr.len - 16;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "326:  }",
          "329:  size_to_read = subchunk.len;",
          "330:  status = pj_file_setpos(fport->fd, size_to_read, PJ_SEEK_CUR);",
          "331:  if (status != PJ_SUCCESS) {",
          "332:      pj_file_close(fport->fd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:  PJ_CHECK_OVERFLOW_UINT32_TO_LONG(subchunk.len,",
          "333:         pj_file_close(fport->fd); return PJMEDIA_ENOTVALIDWAVE;);",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/wav_playlist.c||pjmedia/src/pjmedia/wav_playlist.c": [
          "File: pjmedia/src/pjmedia/wav_playlist.c -> pjmedia/src/pjmedia/wav_playlist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "419:     for (index=file_count-1; index>=0; index--) {",
          "421:  pjmedia_wave_hdr wavehdr;",
          "425:  pj_memcpy(filename, file_list[index].ptr, file_list[index].slen);",
          "",
          "[Removed Lines]",
          "422:  pj_ssize_t size_to_read, size_read;",
          "",
          "[Added Lines]",
          "422:  pj_ssize_t size_read;",
          "423:  pj_off_t size_to_read;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:      goto on_error;",
          "446:  status = pj_file_read( fport->fd_list[index], &wavehdr, &size_read);",
          "447:  if (status != PJ_SUCCESS) {",
          "448:      goto on_error;",
          "",
          "[Removed Lines]",
          "445:  size_read = size_to_read = sizeof(wavehdr) - 8;",
          "",
          "[Added Lines]",
          "446:  size_to_read = size_read = sizeof(wavehdr) - 8;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "494:  if (wavehdr.fmt_hdr.len > 16) {",
          "496:      status = pj_file_setpos(fport->fd_list[index], size_to_read,",
          "497:         PJ_SEEK_CUR);",
          "498:      if (status != PJ_SUCCESS) {",
          "",
          "[Removed Lines]",
          "495:      size_to_read = wavehdr.fmt_hdr.len - 16;",
          "",
          "[Added Lines]",
          "496:      PJ_CHECK_OVERFLOW_UINT32_TO_LONG(wavehdr.fmt_hdr.len-16,",
          "497:           status = PJMEDIA_ENOTVALIDWAVE; goto on_error;);",
          "498:      size_to_read = (pj_off_t)wavehdr.fmt_hdr.len - 16;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "522:      }",
          "525:      size_to_read = subchunk.len;",
          "526:      status = pj_file_setpos(fport->fd_list[index], size_to_read,",
          "527:         PJ_SEEK_CUR);",
          "528:      if (status != PJ_SUCCESS) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:      PJ_CHECK_OVERFLOW_UINT32_TO_LONG(subchunk.len,",
          "529:           status = PJMEDIA_ENOTVALIDWAVE; goto on_error;);",
          "",
          "---------------"
        ]
      }
    }
  ]
}