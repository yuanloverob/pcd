{
  "cve_id": "CVE-2017-7539",
  "cve_desc": "An assertion-failure flaw was found in Qemu before 2.10.1, in the Network Block Device (NBD) server's initial connection negotiation, where the I/O coroutine was undefined. This could crash the qemu-nbd server if a client sent unexpected data during connection negotiation. A remote user or process could use this flaw to crash the qemu-nbd server resulting in denial of service.",
  "repo": "qemu/qemu",
  "patch_hash": "2b0bbc4f8809c972bad134bc1a2570dbb01dea0b",
  "patch_info": {
    "commit_hash": "2b0bbc4f8809c972bad134bc1a2570dbb01dea0b",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/2b0bbc4f8809c972bad134bc1a2570dbb01dea0b",
    "files": [
      "nbd/server.c"
    ],
    "message": "nbd/server: get rid of nbd_negotiate_read and friends\n\nFunctions nbd_negotiate_{read,write,drop_sync} were introduced in\n1a6245a5b, when nbd_rwv (was nbd_wr_sync) was working through\nqemu_co_sendv_recvv (the path is nbd_wr_sync -> qemu_co_{recv/send} ->\nqemu_co_send_recv -> qemu_co_sendv_recvv), which just yields, without\nsetting any handlers. But starting from ff82911cd nbd_rwv (was\nnbd_wr_syncv) works through qio_channel_yield() which sets handlers, so\nwatchers are redundant in nbd_negotiate_{read,write,drop_sync}, then,\nlet's just use nbd_{read,write,drop} functions.\n\nFunctions nbd_{read,write,drop} has errp parameter, which is unused in\nthis patch. This will be fixed later.\n\nSigned-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>\nReviewed-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <20170602150150.258222-4-vsementsov@virtuozzo.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
    "before_after_code_files": [
      "nbd/server.c||nbd/server.c"
    ]
  },
  "patch_diff": {
    "nbd/server.c||nbd/server.c": [
      "File: nbd/server.c -> nbd/server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "105: static void nbd_client_receive_next_request(NBDClient *client);",
      "172:    Server         Client",
      "",
      "[Removed Lines]",
      "107: static gboolean nbd_negotiate_continue(QIOChannel *ioc,",
      "108:                                        GIOCondition condition,",
      "109:                                        void *opaque)",
      "110: {",
      "111:     qemu_coroutine_enter(opaque);",
      "112:     return TRUE;",
      "113: }",
      "115: static int nbd_negotiate_read(QIOChannel *ioc, void *buffer, size_t size)",
      "116: {",
      "117:     ssize_t ret;",
      "118:     guint watch;",
      "120:     assert(qemu_in_coroutine());",
      "122:     watch = qio_channel_add_watch(ioc,",
      "123:                                   G_IO_IN,",
      "124:                                   nbd_negotiate_continue,",
      "125:                                   qemu_coroutine_self(),",
      "126:                                   NULL);",
      "127:     ret = nbd_read(ioc, buffer, size, NULL);",
      "128:     g_source_remove(watch);",
      "129:     return ret;",
      "131: }",
      "133: static int nbd_negotiate_write(QIOChannel *ioc, const void *buffer, size_t size)",
      "134: {",
      "135:     ssize_t ret;",
      "136:     guint watch;",
      "138:     assert(qemu_in_coroutine());",
      "140:     watch = qio_channel_add_watch(ioc,",
      "141:                                   G_IO_OUT,",
      "142:                                   nbd_negotiate_continue,",
      "143:                                   qemu_coroutine_self(),",
      "144:                                   NULL);",
      "145:     ret = nbd_write(ioc, buffer, size, NULL);",
      "146:     g_source_remove(watch);",
      "147:     return ret;",
      "148: }",
      "150: static int nbd_negotiate_drop_sync(QIOChannel *ioc, size_t size)",
      "151: {",
      "152:     ssize_t ret;",
      "153:     uint8_t *buffer = g_malloc(MIN(65536, size));",
      "155:     while (size > 0) {",
      "156:         size_t count = MIN(65536, size);",
      "157:         ret = nbd_negotiate_read(ioc, buffer, count);",
      "158:         if (ret < 0) {",
      "159:             g_free(buffer);",
      "160:             return ret;",
      "161:         }",
      "163:         size -= count;",
      "164:     }",
      "166:     g_free(buffer);",
      "167:     return 0;",
      "168: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "205:           type, opt, len);",
      "207:     magic = cpu_to_be64(NBD_REP_MAGIC);",
      "209:         LOG(\"write failed (rep magic)\");",
      "210:         return -EINVAL;",
      "211:     }",
      "212:     opt = cpu_to_be32(opt);",
      "214:         LOG(\"write failed (rep opt)\");",
      "215:         return -EINVAL;",
      "216:     }",
      "217:     type = cpu_to_be32(type);",
      "219:         LOG(\"write failed (rep type)\");",
      "220:         return -EINVAL;",
      "221:     }",
      "222:     len = cpu_to_be32(len);",
      "224:         LOG(\"write failed (rep data length)\");",
      "225:         return -EINVAL;",
      "226:     }",
      "",
      "[Removed Lines]",
      "208:     if (nbd_negotiate_write(ioc, &magic, sizeof(magic)) < 0) {",
      "213:     if (nbd_negotiate_write(ioc, &opt, sizeof(opt)) < 0) {",
      "218:     if (nbd_negotiate_write(ioc, &type, sizeof(type)) < 0) {",
      "223:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) < 0) {",
      "",
      "[Added Lines]",
      "145:     if (nbd_write(ioc, &magic, sizeof(magic), NULL) < 0) {",
      "150:     if (nbd_write(ioc, &opt, sizeof(opt), NULL) < 0) {",
      "155:     if (nbd_write(ioc, &type, sizeof(type), NULL) < 0) {",
      "160:     if (nbd_write(ioc, &len, sizeof(len), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:     if (ret < 0) {",
      "256:         goto out;",
      "257:     }",
      "259:         LOG(\"write failed (error message)\");",
      "260:         ret = -EIO;",
      "261:     } else {",
      "",
      "[Removed Lines]",
      "258:     if (nbd_negotiate_write(ioc, msg, len) < 0) {",
      "",
      "[Added Lines]",
      "195:     if (nbd_write(ioc, msg, len, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "286:     }",
      "288:     len = cpu_to_be32(name_len);",
      "290:         LOG(\"write failed (name length)\");",
      "291:         return -EINVAL;",
      "292:     }",
      "294:         LOG(\"write failed (name buffer)\");",
      "295:         return -EINVAL;",
      "296:     }",
      "298:         LOG(\"write failed (description buffer)\");",
      "299:         return -EINVAL;",
      "300:     }",
      "",
      "[Removed Lines]",
      "289:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) < 0) {",
      "293:     if (nbd_negotiate_write(ioc, name, name_len) < 0) {",
      "297:     if (nbd_negotiate_write(ioc, desc, desc_len) < 0) {",
      "",
      "[Added Lines]",
      "226:     if (nbd_write(ioc, &len, sizeof(len), NULL) < 0) {",
      "230:     if (nbd_write(ioc, name, name_len, NULL) < 0) {",
      "234:     if (nbd_write(ioc, desc, desc_len, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "308:     NBDExport *exp;",
      "310:     if (length) {",
      "312:             return -EIO;",
      "313:         }",
      "314:         return nbd_negotiate_send_rep_err(client->ioc,",
      "",
      "[Removed Lines]",
      "311:         if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "248:         if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "339:         LOG(\"Bad length received\");",
      "340:         goto fail;",
      "341:     }",
      "343:         LOG(\"read failed\");",
      "344:         goto fail;",
      "345:     }",
      "",
      "[Removed Lines]",
      "342:     if (nbd_negotiate_read(client->ioc, name, length) < 0) {",
      "",
      "[Added Lines]",
      "279:     if (nbd_read(client->ioc, name, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372:     TRACE(\"Setting up TLS\");",
      "373:     ioc = client->ioc;",
      "374:     if (length) {",
      "376:             return NULL;",
      "377:         }",
      "378:         nbd_negotiate_send_rep_err(ioc, NBD_REP_ERR_INVALID, NBD_OPT_STARTTLS,",
      "",
      "[Removed Lines]",
      "375:         if (nbd_negotiate_drop_sync(ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "312:         if (nbd_drop(ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "436:         ...           Rest of request",
      "440:         LOG(\"read failed\");",
      "441:         return -EIO;",
      "442:     }",
      "",
      "[Removed Lines]",
      "439:     if (nbd_negotiate_read(client->ioc, &flags, sizeof(flags)) < 0) {",
      "",
      "[Added Lines]",
      "376:     if (nbd_read(client->ioc, &flags, sizeof(flags), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "462:         uint32_t clientflags, length;",
      "463:         uint64_t magic;",
      "466:             LOG(\"read failed\");",
      "467:             return -EINVAL;",
      "468:         }",
      "",
      "[Removed Lines]",
      "465:         if (nbd_negotiate_read(client->ioc, &magic, sizeof(magic)) < 0) {",
      "",
      "[Added Lines]",
      "402:         if (nbd_read(client->ioc, &magic, sizeof(magic), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "472:             return -EINVAL;",
      "473:         }",
      "477:         {",
      "478:             LOG(\"read failed\");",
      "479:             return -EINVAL;",
      "480:         }",
      "481:         clientflags = be32_to_cpu(clientflags);",
      "484:             LOG(\"read failed\");",
      "485:             return -EINVAL;",
      "486:         }",
      "",
      "[Removed Lines]",
      "475:         if (nbd_negotiate_read(client->ioc, &clientflags,",
      "476:                                sizeof(clientflags)) < 0)",
      "483:         if (nbd_negotiate_read(client->ioc, &length, sizeof(length)) < 0) {",
      "",
      "[Added Lines]",
      "412:         if (nbd_read(client->ioc, &clientflags,",
      "413:                       sizeof(clientflags), NULL) < 0)",
      "420:         if (nbd_read(client->ioc, &length, sizeof(length), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "510:                 return -EINVAL;",
      "512:             default:",
      "514:                     return -EIO;",
      "515:                 }",
      "516:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
      "",
      "[Removed Lines]",
      "513:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "450:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "548:                 return nbd_negotiate_handle_export_name(client, length);",
      "550:             case NBD_OPT_STARTTLS:",
      "552:                     return -EIO;",
      "553:                 }",
      "554:                 if (client->tlscreds) {",
      "",
      "[Removed Lines]",
      "551:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "488:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "567:                 }",
      "568:                 break;",
      "569:             default:",
      "571:                     return -EIO;",
      "572:                 }",
      "573:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
      "",
      "[Removed Lines]",
      "570:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "507:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "656:             TRACE(\"TLS cannot be enabled with oldstyle protocol\");",
      "657:             goto fail;",
      "658:         }",
      "660:             LOG(\"write failed\");",
      "661:             goto fail;",
      "662:         }",
      "663:     } else {",
      "665:             LOG(\"write failed\");",
      "666:             goto fail;",
      "667:         }",
      "",
      "[Removed Lines]",
      "659:         if (nbd_negotiate_write(client->ioc, buf, sizeof(buf)) < 0) {",
      "664:         if (nbd_negotiate_write(client->ioc, buf, 18) < 0) {",
      "",
      "[Added Lines]",
      "596:         if (nbd_write(client->ioc, buf, sizeof(buf), NULL) < 0) {",
      "601:         if (nbd_write(client->ioc, buf, 18, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "676:         stq_be_p(buf + 18, client->exp->size);",
      "677:         stw_be_p(buf + 26, client->exp->nbdflags | myflags);",
      "678:         len = client->no_zeroes ? 10 : sizeof(buf) - 18;",
      "680:             LOG(\"write failed\");",
      "681:             goto fail;",
      "682:         }",
      "",
      "[Removed Lines]",
      "679:         if (nbd_negotiate_write(client->ioc, buf + 18, len) < 0) {",
      "",
      "[Added Lines]",
      "616:         if (nbd_write(client->ioc, buf + 18, len, NULL) < 0) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3736cc5be31f0399999e37d8b28ca9a3ed0b4ccb",
      "candidate_info": {
        "commit_hash": "3736cc5be31f0399999e37d8b28ca9a3ed0b4ccb",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/3736cc5be31f0399999e37d8b28ca9a3ed0b4ccb",
        "files": [
          "include/block/nbd.h",
          "nbd/client.c",
          "nbd/common.c",
          "nbd/nbd-internal.h",
          "nbd/server.c",
          "nbd/trace-events"
        ],
        "message": "nbd: Expose and debug more NBD constants\n\nThe NBD protocol has several constants defined in various extensions\nthat we are about to implement.  Expose them to the code, along with\nan easy way to map various constants to strings during diagnostic\nmessages.\n\nSigned-off-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <20170707203049.534-4-eblake@redhat.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "include/block/nbd.h||include/block/nbd.h",
          "nbd/client.c||nbd/client.c",
          "nbd/common.c||nbd/common.c",
          "nbd/nbd-internal.h||nbd/nbd-internal.h",
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "include/block/nbd.h||include/block/nbd.h": [
          "File: include/block/nbd.h -> include/block/nbd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: #define NBD_REP_ERR(value) ((UINT32_C(1) << 31) | (value))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: #define NBD_OPT_EXPORT_NAME      (1)",
          "88: #define NBD_OPT_ABORT            (2)",
          "89: #define NBD_OPT_LIST             (3)",
          "91: #define NBD_OPT_STARTTLS         (5)",
          "92: #define NBD_OPT_INFO             (6)",
          "93: #define NBD_OPT_GO               (7)",
          "94: #define NBD_OPT_STRUCTURED_REPLY (8)",
          "113: #define NBD_INFO_EXPORT         0",
          "114: #define NBD_INFO_NAME           1",
          "115: #define NBD_INFO_DESCRIPTION    2",
          "116: #define NBD_INFO_BLOCK_SIZE     3",
          "",
          "---------------"
        ],
        "nbd/client.c||nbd/client.c": [
          "File: nbd/client.c -> nbd/client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     if (len == -1) {",
          "105:         req.length = len = strlen(data);",
          "106:     }",
          "109:     stq_be_p(&req.magic, NBD_OPTS_MAGIC);",
          "110:     stl_be_p(&req.option, opt);",
          "",
          "[Removed Lines]",
          "107:     trace_nbd_send_option_request(opt, len);",
          "",
          "[Added Lines]",
          "107:     trace_nbd_send_option_request(opt, nbd_opt_lookup(opt), len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:     be32_to_cpus(&reply->type);",
          "155:     be32_to_cpus(&reply->length);",
          "159:     if (reply->magic != NBD_REP_MAGIC) {",
          "160:         error_setg(errp, \"Unexpected option reply magic\");",
          "",
          "[Removed Lines]",
          "157:     trace_nbd_receive_option_reply(reply->option, reply->type, reply->length);",
          "",
          "[Added Lines]",
          "157:     trace_nbd_receive_option_reply(reply->option, nbd_opt_lookup(reply->option),",
          "158:                                    reply->type, nbd_rep_lookup(reply->type),",
          "159:                                    reply->length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:     if (reply->length) {",
          "190:         if (reply->length > NBD_MAX_BUFFER_SIZE) {",
          "192:             goto cleanup;",
          "193:         }",
          "194:         msg = g_malloc(reply->length + 1);",
          "195:         if (nbd_read(ioc, msg, reply->length, errp) < 0) {",
          "197:             goto cleanup;",
          "198:         }",
          "199:         msg[reply->length] = '\\0';",
          "",
          "[Removed Lines]",
          "191:             error_setg(errp, \"server's error message is too long\");",
          "196:             error_prepend(errp, \"failed to read option error message\");",
          "",
          "[Added Lines]",
          "193:             error_setg(errp, \"server error 0x%\" PRIx32",
          "194:                        \" (%s) message is too long\",",
          "195:                        reply->type, nbd_rep_lookup(reply->type));",
          "200:             error_prepend(errp, \"failed to read option error 0x%\" PRIx32",
          "201:                           \" (%s) message\",",
          "202:                           reply->type, nbd_rep_lookup(reply->type));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "202:     switch (reply->type) {",
          "203:     case NBD_REP_ERR_UNSUP:",
          "205:         result = 0;",
          "206:         goto cleanup;",
          "208:     case NBD_REP_ERR_POLICY:",
          "211:         break;",
          "213:     case NBD_REP_ERR_INVALID:",
          "216:         break;",
          "218:     case NBD_REP_ERR_PLATFORM:",
          "221:         break;",
          "223:     case NBD_REP_ERR_TLS_REQD:",
          "226:         break;",
          "228:     case NBD_REP_ERR_SHUTDOWN:",
          "231:         break;",
          "233:     default:",
          "236:         break;",
          "237:     }",
          "",
          "[Removed Lines]",
          "204:         trace_nbd_reply_err_unsup(reply->option);",
          "209:         error_setg(errp, \"Denied by server for option %\" PRIx32,",
          "210:                    reply->option);",
          "214:         error_setg(errp, \"Invalid data length for option %\" PRIx32,",
          "215:                    reply->option);",
          "219:         error_setg(errp, \"Server lacks support for option %\" PRIx32,",
          "220:                    reply->option);",
          "224:         error_setg(errp, \"TLS negotiation required before option %\" PRIx32,",
          "225:                    reply->option);",
          "229:         error_setg(errp, \"Server shutting down before option %\" PRIx32,",
          "230:                    reply->option);",
          "234:         error_setg(errp, \"Unknown error code when asking for option %\" PRIx32,",
          "235:                    reply->option);",
          "",
          "[Added Lines]",
          "210:         trace_nbd_reply_err_unsup(reply->option, nbd_opt_lookup(reply->option));",
          "215:         error_setg(errp, \"Denied by server for option %\" PRIx32 \" (%s)\",",
          "216:                    reply->option, nbd_opt_lookup(reply->option));",
          "220:         error_setg(errp, \"Invalid data length for option %\" PRIx32 \" (%s)\",",
          "221:                    reply->option, nbd_opt_lookup(reply->option));",
          "225:         error_setg(errp, \"Server lacks support for option %\" PRIx32 \" (%s)\",",
          "226:                    reply->option, nbd_opt_lookup(reply->option));",
          "230:         error_setg(errp, \"TLS negotiation required before option %\" PRIx32",
          "231:                    \" (%s)\", reply->option, nbd_opt_lookup(reply->option));",
          "232:         break;",
          "234:     case NBD_REP_ERR_UNKNOWN:",
          "235:         error_setg(errp, \"Requested export not available for option %\" PRIx32",
          "236:                    \" (%s)\", reply->option, nbd_opt_lookup(reply->option));",
          "240:         error_setg(errp, \"Server shutting down before option %\" PRIx32 \" (%s)\",",
          "241:                    reply->option, nbd_opt_lookup(reply->option));",
          "242:         break;",
          "244:     case NBD_REP_ERR_BLOCK_SIZE_REQD:",
          "245:         error_setg(errp, \"Server requires INFO_BLOCK_SIZE for option %\" PRIx32",
          "246:                    \" (%s)\", reply->option, nbd_opt_lookup(reply->option));",
          "250:         error_setg(errp, \"Unknown error code when asking for option %\" PRIx32",
          "251:                    \" (%s)\", reply->option, nbd_opt_lookup(reply->option));",
          "",
          "---------------"
        ],
        "nbd/common.c||nbd/common.c": [
          "File: nbd/common.c -> nbd/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     data->complete = true;",
          "102:     g_main_loop_quit(data->loop);",
          "103: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: const char *nbd_opt_lookup(uint32_t opt)",
          "107: {",
          "108:     switch (opt) {",
          "109:     case NBD_OPT_EXPORT_NAME:",
          "110:         return \"export name\";",
          "111:     case NBD_OPT_ABORT:",
          "112:         return \"abort\";",
          "113:     case NBD_OPT_LIST:",
          "114:         return \"list\";",
          "115:     case NBD_OPT_STARTTLS:",
          "116:         return \"starttls\";",
          "117:     case NBD_OPT_INFO:",
          "118:         return \"info\";",
          "119:     case NBD_OPT_GO:",
          "120:         return \"go\";",
          "121:     case NBD_OPT_STRUCTURED_REPLY:",
          "122:         return \"structured reply\";",
          "123:     default:",
          "124:         return \"<unknown>\";",
          "125:     }",
          "126: }",
          "129: const char *nbd_rep_lookup(uint32_t rep)",
          "130: {",
          "131:     switch (rep) {",
          "132:     case NBD_REP_ACK:",
          "133:         return \"ack\";",
          "134:     case NBD_REP_SERVER:",
          "135:         return \"server\";",
          "136:     case NBD_REP_INFO:",
          "137:         return \"info\";",
          "138:     case NBD_REP_ERR_UNSUP:",
          "139:         return \"unsupported\";",
          "140:     case NBD_REP_ERR_POLICY:",
          "141:         return \"denied by policy\";",
          "142:     case NBD_REP_ERR_INVALID:",
          "143:         return \"invalid\";",
          "144:     case NBD_REP_ERR_PLATFORM:",
          "145:         return \"platform lacks support\";",
          "146:     case NBD_REP_ERR_TLS_REQD:",
          "147:         return \"TLS required\";",
          "148:     case NBD_REP_ERR_UNKNOWN:",
          "149:         return \"export unknown\";",
          "150:     case NBD_REP_ERR_SHUTDOWN:",
          "151:         return \"server shutting down\";",
          "152:     case NBD_REP_ERR_BLOCK_SIZE_REQD:",
          "153:         return \"block size required\";",
          "154:     default:",
          "155:         return \"<unknown>\";",
          "156:     }",
          "157: }",
          "160: const char *nbd_info_lookup(uint16_t info)",
          "161: {",
          "162:     switch (info) {",
          "163:     case NBD_INFO_EXPORT:",
          "164:         return \"export\";",
          "165:     case NBD_INFO_NAME:",
          "166:         return \"name\";",
          "167:     case NBD_INFO_DESCRIPTION:",
          "168:         return \"description\";",
          "169:     case NBD_INFO_BLOCK_SIZE:",
          "170:         return \"block size\";",
          "171:     default:",
          "172:         return \"<unknown>\";",
          "173:     }",
          "174: }",
          "177: const char *nbd_cmd_lookup(uint16_t cmd)",
          "178: {",
          "179:     switch (cmd) {",
          "180:     case NBD_CMD_READ:",
          "181:         return \"read\";",
          "182:     case NBD_CMD_WRITE:",
          "183:         return \"write\";",
          "184:     case NBD_CMD_DISC:",
          "185:         return \"discard\";",
          "186:     case NBD_CMD_FLUSH:",
          "187:         return \"flush\";",
          "188:     case NBD_CMD_TRIM:",
          "189:         return \"trim\";",
          "190:     case NBD_CMD_WRITE_ZEROES:",
          "191:         return \"write zeroes\";",
          "192:     default:",
          "193:         return \"<unknown>\";",
          "194:     }",
          "195: }",
          "",
          "---------------"
        ],
        "nbd/nbd-internal.h||nbd/nbd-internal.h": [
          "File: nbd/nbd-internal.h -> nbd/nbd-internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: #define NBD_SET_TIMEOUT         _IO(0xab, 9)",
          "58: #define NBD_SET_FLAGS           _IO(0xab, 10)",
          "",
          "[Removed Lines]",
          "60: #define NBD_OPT_EXPORT_NAME     (1)",
          "61: #define NBD_OPT_ABORT           (2)",
          "62: #define NBD_OPT_LIST            (3)",
          "63: #define NBD_OPT_PEEK_EXPORT     (4)",
          "64: #define NBD_OPT_STARTTLS        (5)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134: void nbd_tls_handshake(QIOTask *task,",
          "135:                        void *opaque);",
          "137: int nbd_drop(QIOChannel *ioc, size_t size, Error **errp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: const char *nbd_opt_lookup(uint32_t opt);",
          "131: const char *nbd_rep_lookup(uint32_t rep);",
          "132: const char *nbd_info_lookup(uint16_t info);",
          "133: const char *nbd_cmd_lookup(uint16_t info);",
          "",
          "---------------"
        ],
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: {",
          "140:     uint64_t magic;",
          "144:     magic = cpu_to_be64(NBD_REP_MAGIC);",
          "145:     if (nbd_write(ioc, &magic, sizeof(magic), errp) < 0) {",
          "",
          "[Removed Lines]",
          "142:     trace_nbd_negotiate_send_rep_len(opt, type, len);",
          "",
          "[Added Lines]",
          "142:     trace_nbd_negotiate_send_rep_len(opt, nbd_opt_lookup(opt),",
          "143:                                      type, nbd_rep_lookup(type), len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "441:         }",
          "442:         length = be32_to_cpu(length);",
          "445:         if (client->tlscreds &&",
          "446:             client->ioc == (QIOChannel *)client->sioc) {",
          "447:             QIOChannel *tioc;",
          "",
          "[Removed Lines]",
          "444:         trace_nbd_negotiate_options_check_option(option);",
          "",
          "[Added Lines]",
          "445:         trace_nbd_negotiate_options_check_option(option,",
          "446:                                                  nbd_opt_lookup(option));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "532:                                                  NBD_REP_ERR_UNSUP,",
          "533:                                                  option, errp,",
          "534:                                                  \"Unsupported option 0x%\"",
          "537:                 if (ret < 0) {",
          "538:                     return ret;",
          "539:                 }",
          "",
          "[Removed Lines]",
          "535:                                                  PRIx32,",
          "536:                                                  option);",
          "",
          "[Added Lines]",
          "537:                                                  PRIx32 \" (%s)\", option,",
          "538:                                                  nbd_opt_lookup(option));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "549:                 return nbd_negotiate_handle_export_name(client, length, errp);",
          "551:             default:",
          "553:                 return -EINVAL;",
          "554:             }",
          "555:         }",
          "",
          "[Removed Lines]",
          "552:                 error_setg(errp, \"Unsupported option 0x%\" PRIx32, option);",
          "",
          "[Added Lines]",
          "554:                 error_setg(errp, \"Unsupported option 0x%\" PRIx32 \" (%s)\",",
          "555:                            option, nbd_opt_lookup(option));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1033:         return -EIO;",
          "1034:     }",
          "1038:     if (request->type != NBD_CMD_WRITE) {",
          "",
          "[Removed Lines]",
          "1036:     trace_nbd_co_receive_request_decode_type(request->handle, request->type);",
          "",
          "[Added Lines]",
          "1039:     trace_nbd_co_receive_request_decode_type(request->handle, request->type,",
          "1040:                                              nbd_cmd_lookup(request->type));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5d406fe86bb28da85824b6581e58980cc1a07f3",
      "candidate_info": {
        "commit_hash": "f5d406fe86bb28da85824b6581e58980cc1a07f3",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/f5d406fe86bb28da85824b6581e58980cc1a07f3",
        "files": [
          "nbd/client.c",
          "nbd/nbd-internal.h",
          "nbd/server.c"
        ],
        "message": "nbd: read_sync and friends: return 0 on success\n\nfunctions read_sync, drop_sync, write_sync, and also\nnbd_negotiate_write, nbd_negotiate_read, nbd_negotiate_drop_sync\nreturns number of processed bytes. But what this number can be,\nexcept requested number of bytes?\n\nActually, underlying nbd_wr_syncv function returns a value >= 0 and\n!= requested_bytes only on eof on read operation. So, firstly, it is\nimpossible on write (let's add an assert) and on read it actually\nmeans, that communication is broken (except nbd_receive_reply, see\nbelow).\n\nMost of callers operate like this:\n   if (func(..., size) != size) {\n       /* error path */\n   }\n, i.e.:\n  1. They are not interested in partial success\n  2. Extra duplications in code (especially bad are duplications of\n     magic numbers)\n  3. User doesn't see actual error message, as return code is lost.\n     (this patch doesn't fix this point, but it makes fixing easier)\n\nSeveral callers handles ret >= 0 and != requested-size separately, by\njust returning EINVAL in this case. This patch makes read_sync and\nfriends return EINVAL in this case, so final behavior is the same.\n\nAnd only one caller - nbd_receive_reply() does something not so\nobvious. It returns EINVAL for ret > 0 and != requested-size, like\nprevious group, but for ret == 0 it returns 0. The only caller of\nnbd_receive_reply() - nbd_read_reply_entry() handles ret == 0 in the\nsame way as ret < 0, so for now it doesn't matter. However, in\nfollowing commits error path handling will be improved and we'll need\nto distinguish success from fail in this case too. So, this patch adds\nseparate helper for this case - read_sync_eof.\n\nSigned-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>\nMessage-Id: <20170516094533.6160-3-vsementsov@virtuozzo.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "nbd/client.c||nbd/client.c",
          "nbd/nbd-internal.h||nbd/nbd-internal.h",
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "nbd/client.c||nbd/client.c": [
          "File: nbd/client.c -> nbd/client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: {",
          "93:     ssize_t ret = 0;",
          "94:     char small[1024];",
          "",
          "[Removed Lines]",
          "91: static ssize_t drop_sync(QIOChannel *ioc, size_t size)",
          "",
          "[Added Lines]",
          "91: static int drop_sync(QIOChannel *ioc, size_t size)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     buffer = sizeof(small) >= size ? small : g_malloc(MIN(65536, size));",
          "98:     while (size > 0) {",
          "102:             goto cleanup;",
          "103:         }",
          "105:         size -= count;",
          "107:     }",
          "109:  cleanup:",
          "",
          "[Removed Lines]",
          "99:         ssize_t count = read_sync(ioc, buffer, MIN(65536, size));",
          "101:         if (count <= 0) {",
          "104:         assert(count <= size);",
          "106:         ret += count;",
          "",
          "[Added Lines]",
          "99:         ssize_t count = MIN(65536, size);",
          "100:         ret = read_sync(ioc, buffer, MIN(65536, size));",
          "102:         if (ret < 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:     stl_be_p(&req.option, opt);",
          "137:     stl_be_p(&req.length, len);",
          "140:         error_setg(errp, \"Failed to send option request header\");",
          "141:         return -1;",
          "142:     }",
          "145:         error_setg(errp, \"Failed to send option request data\");",
          "146:         return -1;",
          "147:     }",
          "",
          "[Removed Lines]",
          "139:     if (write_sync(ioc, &req, sizeof(req)) != sizeof(req)) {",
          "144:     if (len && write_sync(ioc, (char *) data, len) != len) {",
          "",
          "[Added Lines]",
          "138:     if (write_sync(ioc, &req, sizeof(req)) < 0) {",
          "143:     if (len && write_sync(ioc, (char *) data, len) < 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:                                     nbd_opt_reply *reply, Error **errp)",
          "171: {",
          "172:     QEMU_BUILD_BUG_ON(sizeof(*reply) != 20);",
          "174:         error_setg(errp, \"failed to read option reply\");",
          "175:         nbd_send_opt_abort(ioc);",
          "176:         return -1;",
          "",
          "[Removed Lines]",
          "173:     if (read_sync(ioc, reply, sizeof(*reply)) != sizeof(*reply)) {",
          "",
          "[Added Lines]",
          "172:     if (read_sync(ioc, reply, sizeof(*reply)) < 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219:             goto cleanup;",
          "220:         }",
          "221:         msg = g_malloc(reply->length + 1);",
          "223:             error_setg(errp, \"failed to read option error message\");",
          "224:             goto cleanup;",
          "225:         }",
          "",
          "[Removed Lines]",
          "222:         if (read_sync(ioc, msg, reply->length) != reply->length) {",
          "",
          "[Added Lines]",
          "221:         if (read_sync(ioc, msg, reply->length) < 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "321:         nbd_send_opt_abort(ioc);",
          "322:         return -1;",
          "323:     }",
          "325:         error_setg(errp, \"failed to read option name length\");",
          "326:         nbd_send_opt_abort(ioc);",
          "327:         return -1;",
          "",
          "[Removed Lines]",
          "324:     if (read_sync(ioc, &namelen, sizeof(namelen)) != sizeof(namelen)) {",
          "",
          "[Added Lines]",
          "323:     if (read_sync(ioc, &namelen, sizeof(namelen)) < 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "334:         return -1;",
          "335:     }",
          "336:     if (namelen != strlen(want)) {",
          "338:             error_setg(errp, \"failed to skip export name with wrong length\");",
          "339:             nbd_send_opt_abort(ioc);",
          "340:             return -1;",
          "",
          "[Removed Lines]",
          "337:         if (drop_sync(ioc, len) != len) {",
          "",
          "[Added Lines]",
          "336:         if (drop_sync(ioc, len) < 0) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "343:     }",
          "345:     assert(namelen < sizeof(name));",
          "347:         error_setg(errp, \"failed to read export name\");",
          "348:         nbd_send_opt_abort(ioc);",
          "349:         return -1;",
          "350:     }",
          "351:     name[namelen] = '\\0';",
          "352:     len -= namelen;",
          "354:         error_setg(errp, \"failed to read export description\");",
          "355:         nbd_send_opt_abort(ioc);",
          "356:         return -1;",
          "",
          "[Removed Lines]",
          "346:     if (read_sync(ioc, name, namelen) != namelen) {",
          "353:     if (drop_sync(ioc, len) != len) {",
          "",
          "[Added Lines]",
          "345:     if (read_sync(ioc, name, namelen) < 0) {",
          "352:     if (drop_sync(ioc, len) < 0) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "477:         goto fail;",
          "478:     }",
          "481:         error_setg(errp, \"Failed to read data\");",
          "482:         goto fail;",
          "483:     }",
          "",
          "[Removed Lines]",
          "480:     if (read_sync(ioc, buf, 8) != 8) {",
          "",
          "[Added Lines]",
          "479:     if (read_sync(ioc, buf, 8) < 0) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "503:         goto fail;",
          "504:     }",
          "507:         error_setg(errp, \"Failed to read magic\");",
          "508:         goto fail;",
          "509:     }",
          "",
          "[Removed Lines]",
          "506:     if (read_sync(ioc, &magic, sizeof(magic)) != sizeof(magic)) {",
          "",
          "[Added Lines]",
          "505:     if (read_sync(ioc, &magic, sizeof(magic)) < 0) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "515:         uint16_t globalflags;",
          "516:         bool fixedNewStyle = false;",
          "520:             error_setg(errp, \"Failed to read server flags\");",
          "521:             goto fail;",
          "522:         }",
          "",
          "[Removed Lines]",
          "518:         if (read_sync(ioc, &globalflags, sizeof(globalflags)) !=",
          "519:             sizeof(globalflags)) {",
          "",
          "[Added Lines]",
          "517:         if (read_sync(ioc, &globalflags, sizeof(globalflags)) < 0) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "534:         }",
          "536:         clientflags = cpu_to_be32(clientflags);",
          "539:             error_setg(errp, \"Failed to send clientflags field\");",
          "540:             goto fail;",
          "541:         }",
          "",
          "[Removed Lines]",
          "537:         if (write_sync(ioc, &clientflags, sizeof(clientflags)) !=",
          "538:             sizeof(clientflags)) {",
          "",
          "[Added Lines]",
          "535:         if (write_sync(ioc, &clientflags, sizeof(clientflags)) < 0) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "573:         }",
          "577:             error_setg(errp, \"Failed to read export length\");",
          "578:             goto fail;",
          "579:         }",
          "583:             error_setg(errp, \"Failed to read export flags\");",
          "584:             goto fail;",
          "585:         }",
          "",
          "[Removed Lines]",
          "576:         if (read_sync(ioc, &s, sizeof(s)) != sizeof(s)) {",
          "582:         if (read_sync(ioc, flags, sizeof(*flags)) != sizeof(*flags)) {",
          "",
          "[Added Lines]",
          "573:         if (read_sync(ioc, &s, sizeof(s)) < 0) {",
          "579:         if (read_sync(ioc, flags, sizeof(*flags)) < 0) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "596:             goto fail;",
          "597:         }",
          "600:             error_setg(errp, \"Failed to read export length\");",
          "601:             goto fail;",
          "602:         }",
          "604:         TRACE(\"Size is %\" PRIu64, *size);",
          "607:             error_setg(errp, \"Failed to read export flags\");",
          "608:             goto fail;",
          "609:         }",
          "",
          "[Removed Lines]",
          "599:         if (read_sync(ioc, &s, sizeof(s)) != sizeof(s)) {",
          "606:         if (read_sync(ioc, &oldflags, sizeof(oldflags)) != sizeof(oldflags)) {",
          "",
          "[Added Lines]",
          "596:         if (read_sync(ioc, &s, sizeof(s)) < 0) {",
          "603:         if (read_sync(ioc, &oldflags, sizeof(oldflags)) < 0) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "619:     }",
          "621:     TRACE(\"Size is %\" PRIu64 \", export flags %\" PRIx16, *size, *flags);",
          "623:         error_setg(errp, \"Failed to read reserved block\");",
          "624:         goto fail;",
          "625:     }",
          "",
          "[Removed Lines]",
          "622:     if (zeroes && drop_sync(ioc, 124) != 124) {",
          "",
          "[Added Lines]",
          "619:     if (zeroes && drop_sync(ioc, 124) < 0) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "744: ssize_t nbd_send_request(QIOChannel *ioc, NBDRequest *request)",
          "745: {",
          "746:     uint8_t buf[NBD_REQUEST_SIZE];",
          "749:     TRACE(\"Sending request to server: \"",
          "750:           \"{ .from = %\" PRIu64\", .len = %\" PRIu32 \", .handle = %\" PRIu64",
          "",
          "[Removed Lines]",
          "747:     ssize_t ret;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "759:     stq_be_p(buf + 16, request->from);",
          "760:     stl_be_p(buf + 24, request->len);",
          "772: }",
          "774: ssize_t nbd_receive_reply(QIOChannel *ioc, NBDReply *reply)",
          "",
          "[Removed Lines]",
          "762:     ret = write_sync(ioc, buf, sizeof(buf));",
          "763:     if (ret < 0) {",
          "764:         return ret;",
          "765:     }",
          "767:     if (ret != sizeof(buf)) {",
          "768:         LOG(\"writing to socket failed\");",
          "769:         return -EINVAL;",
          "770:     }",
          "771:     return 0;",
          "",
          "[Added Lines]",
          "758:     return write_sync(ioc, buf, sizeof(buf));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "777:     uint32_t magic;",
          "778:     ssize_t ret;",
          "781:     if (ret <= 0) {",
          "782:         return ret;",
          "783:     }",
          "",
          "[Removed Lines]",
          "780:     ret = read_sync(ioc, buf, sizeof(buf));",
          "",
          "[Added Lines]",
          "767:     ret = read_sync_eof(ioc, buf, sizeof(buf));",
          "",
          "---------------"
        ],
        "nbd/nbd-internal.h||nbd/nbd-internal.h": [
          "File: nbd/nbd-internal.h -> nbd/nbd-internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: #define NBD_ENOSPC     28",
          "95: #define NBD_ESHUTDOWN  108",
          "98: {",
          "99:     struct iovec iov = { .iov_base = buffer, .iov_len = size };",
          "",
          "[Removed Lines]",
          "97: static inline ssize_t read_sync(QIOChannel *ioc, void *buffer, size_t size)",
          "",
          "[Added Lines]",
          "103: static inline ssize_t read_sync_eof(QIOChannel *ioc, void *buffer, size_t size)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     return nbd_wr_syncv(ioc, &iov, 1, size, true);",
          "106: }",
          "110: {",
          "111:     struct iovec iov = { .iov_base = (void *) buffer, .iov_len = size };",
          "114: }",
          "116: struct NBDTLSHandshakeData {",
          "",
          "[Removed Lines]",
          "108: static inline ssize_t write_sync(QIOChannel *ioc, const void *buffer,",
          "109:                                  size_t size)",
          "113:     return nbd_wr_syncv(ioc, &iov, 1, size, false);",
          "",
          "[Added Lines]",
          "117: static inline int read_sync(QIOChannel *ioc, void *buffer, size_t size)",
          "118: {",
          "119:     ssize_t ret = read_sync_eof(ioc, buffer, size);",
          "121:     if (ret >= 0 && ret != size) {",
          "122:         ret = -EINVAL;",
          "123:     }",
          "125:     return ret < 0 ? ret : 0;",
          "126: }",
          "131: static inline int write_sync(QIOChannel *ioc, const void *buffer, size_t size)",
          "135:     ssize_t ret = nbd_wr_syncv(ioc, &iov, 1, size, false);",
          "137:     assert(ret < 0 || ret == size);",
          "139:     return ret < 0 ? ret : 0;",
          "",
          "---------------"
        ],
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     return TRUE;",
          "113: }",
          "116: {",
          "117:     ssize_t ret;",
          "118:     guint watch;",
          "",
          "[Removed Lines]",
          "115: static ssize_t nbd_negotiate_read(QIOChannel *ioc, void *buffer, size_t size)",
          "",
          "[Added Lines]",
          "115: static int nbd_negotiate_read(QIOChannel *ioc, void *buffer, size_t size)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131: }",
          "135: {",
          "136:     ssize_t ret;",
          "137:     guint watch;",
          "",
          "[Removed Lines]",
          "133: static ssize_t nbd_negotiate_write(QIOChannel *ioc, const void *buffer,",
          "134:                                    size_t size)",
          "",
          "[Added Lines]",
          "133: static int nbd_negotiate_write(QIOChannel *ioc, const void *buffer, size_t size)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148:     return ret;",
          "149: }",
          "152: {",
          "154:     uint8_t *buffer = g_malloc(MIN(65536, size));",
          "156:     while (size > 0) {",
          "158:         if (ret < 0) {",
          "159:             g_free(buffer);",
          "160:             return ret;",
          "161:         }",
          "165:     }",
          "167:     g_free(buffer);",
          "169: }",
          "",
          "[Removed Lines]",
          "151: static ssize_t nbd_negotiate_drop_sync(QIOChannel *ioc, size_t size)",
          "153:     ssize_t ret, dropped = size;",
          "157:         ret = nbd_negotiate_read(ioc, buffer, MIN(65536, size));",
          "163:         assert(ret <= size);",
          "164:         size -= ret;",
          "168:     return dropped;",
          "",
          "[Added Lines]",
          "150: static int nbd_negotiate_drop_sync(QIOChannel *ioc, size_t size)",
          "152:     ssize_t ret;",
          "156:         size_t count = MIN(65536, size);",
          "157:         ret = nbd_negotiate_read(ioc, buffer, count);",
          "163:         size -= count;",
          "167:     return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "206:           type, opt, len);",
          "208:     magic = cpu_to_be64(NBD_REP_MAGIC);",
          "210:         LOG(\"write failed (rep magic)\");",
          "211:         return -EINVAL;",
          "212:     }",
          "213:     opt = cpu_to_be32(opt);",
          "215:         LOG(\"write failed (rep opt)\");",
          "216:         return -EINVAL;",
          "217:     }",
          "218:     type = cpu_to_be32(type);",
          "220:         LOG(\"write failed (rep type)\");",
          "221:         return -EINVAL;",
          "222:     }",
          "223:     len = cpu_to_be32(len);",
          "225:         LOG(\"write failed (rep data length)\");",
          "226:         return -EINVAL;",
          "227:     }",
          "",
          "[Removed Lines]",
          "209:     if (nbd_negotiate_write(ioc, &magic, sizeof(magic)) != sizeof(magic)) {",
          "214:     if (nbd_negotiate_write(ioc, &opt, sizeof(opt)) != sizeof(opt)) {",
          "219:     if (nbd_negotiate_write(ioc, &type, sizeof(type)) != sizeof(type)) {",
          "224:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) != sizeof(len)) {",
          "",
          "[Added Lines]",
          "208:     if (nbd_negotiate_write(ioc, &magic, sizeof(magic)) < 0) {",
          "213:     if (nbd_negotiate_write(ioc, &opt, sizeof(opt)) < 0) {",
          "218:     if (nbd_negotiate_write(ioc, &type, sizeof(type)) < 0) {",
          "223:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) < 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "256:     if (ret < 0) {",
          "257:         goto out;",
          "258:     }",
          "260:         LOG(\"write failed (error message)\");",
          "261:         ret = -EIO;",
          "262:     } else {",
          "",
          "[Removed Lines]",
          "259:     if (nbd_negotiate_write(ioc, msg, len) != len) {",
          "",
          "[Added Lines]",
          "258:     if (nbd_negotiate_write(ioc, msg, len) < 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "287:     }",
          "289:     len = cpu_to_be32(name_len);",
          "291:         LOG(\"write failed (name length)\");",
          "292:         return -EINVAL;",
          "293:     }",
          "295:         LOG(\"write failed (name buffer)\");",
          "296:         return -EINVAL;",
          "297:     }",
          "299:         LOG(\"write failed (description buffer)\");",
          "300:         return -EINVAL;",
          "301:     }",
          "",
          "[Removed Lines]",
          "290:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) != sizeof(len)) {",
          "294:     if (nbd_negotiate_write(ioc, name, name_len) != name_len) {",
          "298:     if (nbd_negotiate_write(ioc, desc, desc_len) != desc_len) {",
          "",
          "[Added Lines]",
          "289:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) < 0) {",
          "293:     if (nbd_negotiate_write(ioc, name, name_len) < 0) {",
          "297:     if (nbd_negotiate_write(ioc, desc, desc_len) < 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "309:     NBDExport *exp;",
          "311:     if (length) {",
          "313:             return -EIO;",
          "314:         }",
          "315:         return nbd_negotiate_send_rep_err(client->ioc,",
          "",
          "[Removed Lines]",
          "312:         if (nbd_negotiate_drop_sync(client->ioc, length) != length) {",
          "",
          "[Added Lines]",
          "311:         if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "340:         LOG(\"Bad length received\");",
          "341:         goto fail;",
          "342:     }",
          "344:         LOG(\"read failed\");",
          "345:         goto fail;",
          "346:     }",
          "",
          "[Removed Lines]",
          "343:     if (nbd_negotiate_read(client->ioc, name, length) != length) {",
          "",
          "[Added Lines]",
          "342:     if (nbd_negotiate_read(client->ioc, name, length) < 0) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "373:     TRACE(\"Setting up TLS\");",
          "374:     ioc = client->ioc;",
          "375:     if (length) {",
          "377:             return NULL;",
          "378:         }",
          "379:         nbd_negotiate_send_rep_err(ioc, NBD_REP_ERR_INVALID, NBD_OPT_STARTTLS,",
          "",
          "[Removed Lines]",
          "376:         if (nbd_negotiate_drop_sync(ioc, length) != length) {",
          "",
          "[Added Lines]",
          "375:         if (nbd_negotiate_drop_sync(ioc, length) < 0) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "437:         ...           Rest of request",
          "442:         LOG(\"read failed\");",
          "443:         return -EIO;",
          "444:     }",
          "",
          "[Removed Lines]",
          "440:     if (nbd_negotiate_read(client->ioc, &flags, sizeof(flags)) !=",
          "441:         sizeof(flags)) {",
          "",
          "[Added Lines]",
          "439:     if (nbd_negotiate_read(client->ioc, &flags, sizeof(flags)) < 0) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "464:         uint32_t clientflags, length;",
          "465:         uint64_t magic;",
          "469:             LOG(\"read failed\");",
          "470:             return -EINVAL;",
          "471:         }",
          "",
          "[Removed Lines]",
          "467:         if (nbd_negotiate_read(client->ioc, &magic, sizeof(magic)) !=",
          "468:             sizeof(magic)) {",
          "",
          "[Added Lines]",
          "465:         if (nbd_negotiate_read(client->ioc, &magic, sizeof(magic)) < 0) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "476:         }",
          "478:         if (nbd_negotiate_read(client->ioc, &clientflags,",
          "480:             LOG(\"read failed\");",
          "481:             return -EINVAL;",
          "482:         }",
          "483:         clientflags = be32_to_cpu(clientflags);",
          "487:             LOG(\"read failed\");",
          "488:             return -EINVAL;",
          "489:         }",
          "",
          "[Removed Lines]",
          "479:                                sizeof(clientflags)) != sizeof(clientflags)) {",
          "485:         if (nbd_negotiate_read(client->ioc, &length, sizeof(length)) !=",
          "486:             sizeof(length)) {",
          "",
          "[Added Lines]",
          "476:                                sizeof(clientflags)) < 0)",
          "477:         {",
          "483:         if (nbd_negotiate_read(client->ioc, &length, sizeof(length)) < 0) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "513:                 return -EINVAL;",
          "515:             default:",
          "517:                     return -EIO;",
          "518:                 }",
          "519:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
          "",
          "[Removed Lines]",
          "516:                 if (nbd_negotiate_drop_sync(client->ioc, length) != length) {",
          "",
          "[Added Lines]",
          "513:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "551:                 return nbd_negotiate_handle_export_name(client, length);",
          "553:             case NBD_OPT_STARTTLS:",
          "555:                     return -EIO;",
          "556:                 }",
          "557:                 if (client->tlscreds) {",
          "",
          "[Removed Lines]",
          "554:                 if (nbd_negotiate_drop_sync(client->ioc, length) != length) {",
          "",
          "[Added Lines]",
          "551:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "570:                 }",
          "571:                 break;",
          "572:             default:",
          "574:                     return -EIO;",
          "575:                 }",
          "576:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
          "",
          "[Removed Lines]",
          "573:                 if (nbd_negotiate_drop_sync(client->ioc, length) != length) {",
          "",
          "[Added Lines]",
          "570:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "659:             TRACE(\"TLS cannot be enabled with oldstyle protocol\");",
          "660:             goto fail;",
          "661:         }",
          "663:             LOG(\"write failed\");",
          "664:             goto fail;",
          "665:         }",
          "666:     } else {",
          "668:             LOG(\"write failed\");",
          "669:             goto fail;",
          "670:         }",
          "",
          "[Removed Lines]",
          "662:         if (nbd_negotiate_write(client->ioc, buf, sizeof(buf)) != sizeof(buf)) {",
          "667:         if (nbd_negotiate_write(client->ioc, buf, 18) != 18) {",
          "",
          "[Added Lines]",
          "659:         if (nbd_negotiate_write(client->ioc, buf, sizeof(buf)) < 0) {",
          "664:         if (nbd_negotiate_write(client->ioc, buf, 18) < 0) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "679:         stq_be_p(buf + 18, client->exp->size);",
          "680:         stw_be_p(buf + 26, client->exp->nbdflags | myflags);",
          "681:         len = client->no_zeroes ? 10 : sizeof(buf) - 18;",
          "683:             LOG(\"write failed\");",
          "684:             goto fail;",
          "685:         }",
          "",
          "[Removed Lines]",
          "682:         if (nbd_negotiate_write(client->ioc, buf + 18, len) != len) {",
          "",
          "[Added Lines]",
          "679:         if (nbd_negotiate_write(client->ioc, buf + 18, len) < 0) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "702:         return ret;",
          "703:     }",
          "711:        [ 0 ..  3]   magic   (NBD_REQUEST_MAGIC)",
          "712:        [ 4 ..  5]   flags   (NBD_CMD_FLAG_FUA, ...)",
          "",
          "[Removed Lines]",
          "705:     if (ret != sizeof(buf)) {",
          "706:         LOG(\"read failed\");",
          "707:         return -EINVAL;",
          "708:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "737: static ssize_t nbd_send_reply(QIOChannel *ioc, NBDReply *reply)",
          "738: {",
          "739:     uint8_t buf[NBD_REPLY_SIZE];",
          "742:     reply->error = system_errno_to_nbd_errno(reply->error);",
          "",
          "[Removed Lines]",
          "740:     ssize_t ret;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "754:     stl_be_p(buf + 4, reply->error);",
          "755:     stq_be_p(buf + 8, reply->handle);",
          "767: }",
          "769: #define MAX_NBD_REQUESTS 16",
          "",
          "[Removed Lines]",
          "757:     ret = write_sync(ioc, buf, sizeof(buf));",
          "758:     if (ret < 0) {",
          "759:         return ret;",
          "760:     }",
          "762:     if (ret != sizeof(buf)) {",
          "763:         LOG(\"writing to socket failed\");",
          "764:         return -EINVAL;",
          "765:     }",
          "766:     return 0;",
          "",
          "[Added Lines]",
          "748:     return write_sync(ioc, buf, sizeof(buf));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1067:         rc = nbd_send_reply(client->ioc, reply);",
          "1068:         if (rc >= 0) {",
          "1069:             ret = write_sync(client->ioc, req->data, len);",
          "1071:                 rc = -EIO;",
          "1072:             }",
          "1073:         }",
          "",
          "[Removed Lines]",
          "1070:             if (ret != len) {",
          "",
          "[Added Lines]",
          "1052:             if (ret < 0) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1141:     if (request->type == NBD_CMD_WRITE) {",
          "1142:         TRACE(\"Reading %\" PRIu32 \" byte(s)\", request->len);",
          "1145:             LOG(\"reading from socket failed\");",
          "1146:             rc = -EIO;",
          "1147:             goto out;",
          "",
          "[Removed Lines]",
          "1144:         if (read_sync(client->ioc, req->data, request->len) != request->len) {",
          "",
          "[Added Lines]",
          "1126:         if (read_sync(client->ioc, req->data, request->len) < 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3668328303429f3bc93ab3365c66331600b06a2d",
      "candidate_info": {
        "commit_hash": "3668328303429f3bc93ab3365c66331600b06a2d",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/3668328303429f3bc93ab3365c66331600b06a2d",
        "files": [
          "nbd/server.c"
        ],
        "message": "nbd: Send message along with server NBD_REP_ERR errors\n\nThe NBD Protocol allows us to send human-readable messages\nalong with any NBD_REP_ERR error during option negotiation;\nmake use of this fact for clients that know what to do with\nour message.\n\nSigned-off-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <1476469998-28592-8-git-send-email-eblake@redhat.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:     return nbd_negotiate_send_rep_len(ioc, type, opt, 0);",
          "237: }",
          "241: static int nbd_negotiate_send_rep_list(QIOChannel *ioc, NBDExport *exp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: static int GCC_FMT_ATTR(4, 5)",
          "242: nbd_negotiate_send_rep_err(QIOChannel *ioc, uint32_t type,",
          "243:                            uint32_t opt, const char *fmt, ...)",
          "244: {",
          "245:     va_list va;",
          "246:     char *msg;",
          "247:     int ret;",
          "248:     size_t len;",
          "250:     va_start(va, fmt);",
          "251:     msg = g_strdup_vprintf(fmt, va);",
          "252:     va_end(va);",
          "253:     len = strlen(msg);",
          "254:     assert(len < 4096);",
          "255:     TRACE(\"sending error message \\\"%s\\\"\", msg);",
          "256:     ret = nbd_negotiate_send_rep_len(ioc, type, opt, len);",
          "257:     if (ret < 0) {",
          "258:         goto out;",
          "259:     }",
          "260:     if (nbd_negotiate_write(ioc, msg, len) != len) {",
          "261:         LOG(\"write failed (error message)\");",
          "262:         ret = -EIO;",
          "263:     } else {",
          "264:         ret = 0;",
          "265:     }",
          "266: out:",
          "267:     g_free(msg);",
          "268:     return ret;",
          "269: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:         if (nbd_negotiate_drop_sync(client->ioc, length) != length) {",
          "282:             return -EIO;",
          "283:         }",
          "286:     }",
          "",
          "[Removed Lines]",
          "284:         return nbd_negotiate_send_rep(client->ioc,",
          "285:                                       NBD_REP_ERR_INVALID, NBD_OPT_LIST);",
          "",
          "[Added Lines]",
          "316:         return nbd_negotiate_send_rep_err(client->ioc,",
          "317:                                           NBD_REP_ERR_INVALID, NBD_OPT_LIST,",
          "318:                                           \"OPT_LIST should not have length\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "343:         if (nbd_negotiate_drop_sync(ioc, length) != length) {",
          "344:             return NULL;",
          "345:         }",
          "347:         return NULL;",
          "348:     }",
          "",
          "[Removed Lines]",
          "346:         nbd_negotiate_send_rep(ioc, NBD_REP_ERR_INVALID, NBD_OPT_STARTTLS);",
          "",
          "[Added Lines]",
          "380:         nbd_negotiate_send_rep_err(ioc, NBD_REP_ERR_INVALID, NBD_OPT_STARTTLS,",
          "381:                                    \"OPT_STARTTLS should not have length\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "474:                 return -EINVAL;",
          "476:             default:",
          "479:                 if (nbd_negotiate_drop_sync(client->ioc, length) != length) {",
          "480:                     return -EIO;",
          "481:                 }",
          "484:                 if (ret < 0) {",
          "485:                     return ret;",
          "486:                 }",
          "",
          "[Removed Lines]",
          "477:                 TRACE(\"Option 0x%\" PRIx32 \" not permitted before TLS\",",
          "478:                       clientflags);",
          "482:                 ret = nbd_negotiate_send_rep(client->ioc, NBD_REP_ERR_TLS_REQD,",
          "483:                                              clientflags);",
          "",
          "[Added Lines]",
          "515:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
          "516:                                                  NBD_REP_ERR_TLS_REQD,",
          "517:                                                  clientflags,",
          "518:                                                  \"Option 0x%\" PRIx32",
          "519:                                                  \"not permitted before TLS\",",
          "520:                                                  clientflags);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "506:                     return -EIO;",
          "507:                 }",
          "508:                 if (client->tlscreds) {",
          "513:                 } else {",
          "518:                 }",
          "519:                 if (ret < 0) {",
          "520:                     return ret;",
          "521:                 }",
          "522:                 break;",
          "523:             default:",
          "525:                 if (nbd_negotiate_drop_sync(client->ioc, length) != length) {",
          "526:                     return -EIO;",
          "527:                 }",
          "530:                 if (ret < 0) {",
          "531:                     return ret;",
          "532:                 }",
          "",
          "[Removed Lines]",
          "509:                     TRACE(\"TLS already enabled\");",
          "510:                     ret = nbd_negotiate_send_rep(client->ioc,",
          "511:                                                  NBD_REP_ERR_INVALID,",
          "512:                                                  clientflags);",
          "514:                     TRACE(\"TLS not configured\");",
          "515:                     ret = nbd_negotiate_send_rep(client->ioc,",
          "516:                                                  NBD_REP_ERR_POLICY,",
          "517:                                                  clientflags);",
          "524:                 TRACE(\"Unsupported option 0x%\" PRIx32, clientflags);",
          "528:                 ret = nbd_negotiate_send_rep(client->ioc, NBD_REP_ERR_UNSUP,",
          "529:                                              clientflags);",
          "",
          "[Added Lines]",
          "546:                     ret = nbd_negotiate_send_rep_err(client->ioc,",
          "547:                                                      NBD_REP_ERR_INVALID,",
          "548:                                                      clientflags,",
          "549:                                                      \"TLS already enabled\");",
          "551:                     ret = nbd_negotiate_send_rep_err(client->ioc,",
          "552:                                                      NBD_REP_ERR_POLICY,",
          "553:                                                      clientflags,",
          "554:                                                      \"TLS not configured\");",
          "564:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
          "565:                                                  NBD_REP_ERR_UNSUP,",
          "566:                                                  clientflags,",
          "567:                                                  \"Unsupported option 0x%\"",
          "568:                                                  PRIx32,",
          "569:                                                  clientflags);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63d5ef869e5e57de4875cd64b6f197cbb5763adf",
      "candidate_info": {
        "commit_hash": "63d5ef869e5e57de4875cd64b6f197cbb5763adf",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/63d5ef869e5e57de4875cd64b6f197cbb5763adf",
        "files": [
          "nbd/server.c"
        ],
        "message": "nbd: Quit server after any write error\n\nWe should never ignore failure from nbd_negotiate_send_rep(); if\nwe are unable to write to the client, then it is not worth trying\nto continue the negotiation.  Fortunately, the problem is not\ntoo severe - chances are that the errors being ignored here (mainly\ninability to write the reply to the client) are indications of\na closed connection or something similar, which will also affect\nthe next attempt to interact with the client and eventually reach\na point where the errors are detected to end the loop.\n\nSigned-off-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <1463006384-7734-4-git-send-email-eblake@redhat.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:         return NULL;",
          "335:     }",
          "339:     tioc = qio_channel_tls_new_server(ioc,",
          "340:                                       client->tlscreds,",
          "",
          "[Removed Lines]",
          "337:     nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK, NBD_OPT_STARTTLS);",
          "",
          "[Added Lines]",
          "337:     if (nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK,",
          "338:                                NBD_OPT_STARTTLS) < 0) {",
          "339:         return NULL;",
          "340:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "460:                 if (nbd_negotiate_drop_sync(client->ioc, length) != length) {",
          "461:                     return -EIO;",
          "462:                 }",
          "465:                 break;",
          "466:             }",
          "467:         } else if (fixedNewstyle) {",
          "",
          "[Removed Lines]",
          "463:                 nbd_negotiate_send_rep(client->ioc, NBD_REP_ERR_TLS_REQD,",
          "464:                                        clientflags);",
          "",
          "[Added Lines]",
          "466:                 ret = nbd_negotiate_send_rep(client->ioc, NBD_REP_ERR_TLS_REQD,",
          "467:                                              clientflags);",
          "468:                 if (ret < 0) {",
          "469:                     return ret;",
          "470:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "485:                 }",
          "486:                 if (client->tlscreds) {",
          "487:                     TRACE(\"TLS already enabled\");",
          "490:                 } else {",
          "491:                     TRACE(\"TLS not configured\");",
          "494:                 }",
          "495:                 break;",
          "496:             default:",
          "",
          "[Removed Lines]",
          "488:                     nbd_negotiate_send_rep(client->ioc, NBD_REP_ERR_INVALID,",
          "489:                                            clientflags);",
          "492:                     nbd_negotiate_send_rep(client->ioc, NBD_REP_ERR_POLICY,",
          "493:                                            clientflags);",
          "",
          "[Added Lines]",
          "494:                     ret = nbd_negotiate_send_rep(client->ioc,",
          "495:                                                  NBD_REP_ERR_INVALID,",
          "496:                                                  clientflags);",
          "499:                     ret = nbd_negotiate_send_rep(client->ioc,",
          "500:                                                  NBD_REP_ERR_POLICY,",
          "501:                                                  clientflags);",
          "502:                 }",
          "503:                 if (ret < 0) {",
          "504:                     return ret;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "498:                 if (nbd_negotiate_drop_sync(client->ioc, length) != length) {",
          "499:                     return -EIO;",
          "500:                 }",
          "503:                 break;",
          "504:             }",
          "505:         } else {",
          "",
          "[Removed Lines]",
          "501:                 nbd_negotiate_send_rep(client->ioc, NBD_REP_ERR_UNSUP,",
          "502:                                        clientflags);",
          "",
          "[Added Lines]",
          "512:                 ret = nbd_negotiate_send_rep(client->ioc, NBD_REP_ERR_UNSUP,",
          "513:                                              clientflags);",
          "514:                 if (ret < 0) {",
          "515:                     return ret;",
          "516:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "894e02804c862c6940b43a0a488164655d3fb3f0",
      "candidate_info": {
        "commit_hash": "894e02804c862c6940b43a0a488164655d3fb3f0",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/894e02804c862c6940b43a0a488164655d3fb3f0",
        "files": [
          "nbd/server.c"
        ],
        "message": "nbd/server: Add helper functions for parsing option payload\n\nRather than making every callsite perform length sanity checks\nand error reporting, add the helper functions nbd_opt_read()\nand nbd_opt_drop() that use the length stored in the client\nstruct; also add an assertion that optlen is 0 before any\noption (ie. any previous option was fully handled), complementing\nthe assertion added in an earlier patch that optlen is 0 after\nall negotiation completes.\n\nNote that the call in nbd_negotiate_handle_export_name() does\nnot use the new helper (in part because the server cannot\nreply to NBD_OPT_EXPORT_NAME - it either succeeds or the\nconnection drops).\n\nBased on patches by Vladimir Sementsov-Ogievskiy.\n\nSigned-off-by: Eric Blake <eblake@redhat.com>\nReviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>\nMessage-Id: <20180110230825.18321-6-eblake@redhat.com>",
        "before_after_code_files": [
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:     return ret;",
          "230: }",
          "234: static int nbd_negotiate_send_rep_list(NBDClient *client, NBDExport *exp,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235: static int GCC_FMT_ATTR(4, 5)",
          "236: nbd_opt_drop(NBDClient *client, uint32_t type, Error **errp,",
          "237:              const char *fmt, ...)",
          "238: {",
          "239:     int ret = nbd_drop(client->ioc, client->optlen, errp);",
          "240:     va_list va;",
          "242:     client->optlen = 0;",
          "243:     if (!ret) {",
          "244:         va_start(va, fmt);",
          "245:         ret = nbd_negotiate_send_rep_verr(client, type, errp, fmt, va);",
          "246:         va_end(va);",
          "247:     }",
          "248:     return ret;",
          "249: }",
          "254: static int nbd_opt_read(NBDClient *client, void *buffer, size_t size,",
          "255:                         Error **errp)",
          "256: {",
          "257:     if (size > client->optlen) {",
          "258:         return nbd_opt_drop(client, NBD_REP_ERR_INVALID, errp,",
          "259:                             \"Inconsistent lengths in option %s\",",
          "260:                             nbd_opt_lookup(client->opt));",
          "261:     }",
          "262:     client->optlen -= size;",
          "263:     return qio_channel_read_all(client->ioc, buffer, size, errp) < 0 ? -EIO : 1;",
          "264: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:     int ret;",
          "380:     assert(client->optlen);",
          "387:     if (fatal && !ret) {",
          "389:                    nbd_opt_lookup(client->opt));",
          "390:         return -EINVAL;",
          "391:     }",
          "",
          "[Removed Lines]",
          "381:     if (nbd_drop(client->ioc, client->optlen, errp) < 0) {",
          "382:         return -EIO;",
          "383:     }",
          "384:     ret = nbd_negotiate_send_rep_err(client, NBD_REP_ERR_INVALID, errp,",
          "385:                                      \"option '%s' should have zero length\",",
          "386:                                      nbd_opt_lookup(client->opt));",
          "388:         error_setg(errp, \"option '%s' should have zero length\",",
          "",
          "[Added Lines]",
          "415:     ret = nbd_opt_drop(client, NBD_REP_ERR_INVALID, errp,",
          "416:                        \"option '%s' has unexpected length\",",
          "417:                        nbd_opt_lookup(client->opt));",
          "419:         error_setg(errp, \"option '%s' has unexpected length\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "408:     bool blocksize = false;",
          "409:     uint32_t sizes[3];",
          "410:     char buf[sizeof(uint64_t) + sizeof(uint16_t)];",
          "414:         4 bytes: L, name length (can be 0)",
          "",
          "[Removed Lines]",
          "411:     const char *msg;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "416:         2 bytes: N, number of requests (can be 0)",
          "417:         N * 2 bytes: N requests",
          "425:     }",
          "426:     be32_to_cpus(&namelen);",
          "434:     if (namelen >= sizeof(name)) {",
          "437:     }",
          "440:     }",
          "441:     name[namelen] = '\\0';",
          "443:     trace_nbd_negotiate_handle_export_name_request(name);",
          "447:     }",
          "448:     be16_to_cpus(&requests);",
          "450:     trace_nbd_negotiate_handle_info_requests(requests);",
          "455:     while (requests--) {",
          "458:         }",
          "459:         be16_to_cpus(&request);",
          "461:         trace_nbd_negotiate_handle_info_request(request,",
          "462:                                                 nbd_info_lookup(request));",
          "",
          "[Removed Lines]",
          "419:     if (client->optlen < sizeof(namelen) + sizeof(requests)) {",
          "420:         msg = \"overall request too short\";",
          "421:         goto invalid;",
          "422:     }",
          "423:     if (nbd_read(client->ioc, &namelen, sizeof(namelen), errp) < 0) {",
          "424:         return -EIO;",
          "427:     client->optlen -= sizeof(namelen);",
          "428:     if (namelen > client->optlen - sizeof(requests) ||",
          "429:         (client->optlen - namelen) % 2)",
          "430:     {",
          "431:         msg = \"name length is incorrect\";",
          "432:         goto invalid;",
          "433:     }",
          "435:         msg = \"name too long for qemu\";",
          "436:         goto invalid;",
          "438:     if (nbd_read(client->ioc, name, namelen, errp) < 0) {",
          "439:         return -EIO;",
          "442:     client->optlen -= namelen;",
          "445:     if (nbd_read(client->ioc, &requests, sizeof(requests), errp) < 0) {",
          "446:         return -EIO;",
          "449:     client->optlen -= sizeof(requests);",
          "451:     if (requests != client->optlen / sizeof(request)) {",
          "452:         msg = \"incorrect number of  requests for overall length\";",
          "453:         goto invalid;",
          "454:     }",
          "456:         if (nbd_read(client->ioc, &request, sizeof(request), errp) < 0) {",
          "457:             return -EIO;",
          "460:         client->optlen -= sizeof(request);",
          "",
          "[Added Lines]",
          "449:     rc = nbd_opt_read(client, &namelen, sizeof(namelen), errp);",
          "450:     if (rc <= 0) {",
          "451:         return rc;",
          "455:         return nbd_opt_drop(client, NBD_REP_ERR_INVALID, errp,",
          "456:                             \"name too long for qemu\");",
          "458:     rc = nbd_opt_read(client, name, namelen, errp);",
          "459:     if (rc <= 0) {",
          "460:         return rc;",
          "465:     rc = nbd_opt_read(client, &requests, sizeof(requests), errp);",
          "466:     if (rc <= 0) {",
          "467:         return rc;",
          "472:         rc = nbd_opt_read(client, &request, sizeof(request), errp);",
          "473:         if (rc <= 0) {",
          "474:             return rc;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "472:             break;",
          "473:         }",
          "474:     }",
          "477:     exp = nbd_export_find(name);",
          "478:     if (!exp) {",
          "",
          "[Removed Lines]",
          "475:     assert(client->optlen == 0);",
          "",
          "[Added Lines]",
          "491:     if (client->optlen) {",
          "492:         return nbd_reject_length(client, false, errp);",
          "493:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "560:         rc = 1;",
          "561:     }",
          "562:     return rc;",
          "570: }",
          "",
          "[Removed Lines]",
          "564:  invalid:",
          "565:     if (nbd_drop(client->ioc, client->optlen, errp) < 0) {",
          "566:         return -EIO;",
          "567:     }",
          "568:     return nbd_negotiate_send_rep_err(client, NBD_REP_ERR_INVALID,",
          "569:                                       errp, \"%s\", msg);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "696:             return -EINVAL;",
          "697:         }",
          "698:         length = be32_to_cpu(length);",
          "699:         client->optlen = length;",
          "701:         if (length > NBD_MAX_BUFFER_SIZE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "710:         assert(!client->optlen);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "736:                 return -EINVAL;",
          "738:             default:",
          "",
          "[Removed Lines]",
          "739:                 if (nbd_drop(client->ioc, length, errp) < 0) {",
          "740:                     return -EIO;",
          "741:                 }",
          "742:                 ret = nbd_negotiate_send_rep_err(client,",
          "743:                                                  NBD_REP_ERR_TLS_REQD, errp,",
          "744:                                                  \"Option 0x%\" PRIx32",
          "745:                                                  \"not permitted before TLS\",",
          "746:                                                  option);",
          "",
          "[Added Lines]",
          "751:                 ret = nbd_opt_drop(client, NBD_REP_ERR_TLS_REQD, errp,",
          "752:                                    \"Option 0x%\" PRIx32",
          "753:                                    \"not permitted before TLS\", option);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "812:                 break;",
          "814:             default:",
          "823:                 break;",
          "824:             }",
          "825:         } else {",
          "",
          "[Removed Lines]",
          "815:                 if (nbd_drop(client->ioc, length, errp) < 0) {",
          "816:                     return -EIO;",
          "817:                 }",
          "818:                 ret = nbd_negotiate_send_rep_err(client,",
          "819:                                                  NBD_REP_ERR_UNSUP, errp,",
          "820:                                                  \"Unsupported option 0x%\"",
          "821:                                                  PRIx32 \" (%s)\", option,",
          "822:                                                  nbd_opt_lookup(option));",
          "",
          "[Added Lines]",
          "822:                 ret = nbd_opt_drop(client, NBD_REP_ERR_UNSUP, errp,",
          "823:                                    \"Unsupported option 0x%\" PRIx32 \" (%s)\",",
          "824:                                    option, nbd_opt_lookup(option));",
          "",
          "---------------"
        ]
      }
    }
  ]
}