{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "32b6346c2c923c81369badb95317f05b7a0cb6fc",
      "candidate_info": {
        "commit_hash": "32b6346c2c923c81369badb95317f05b7a0cb6fc",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/32b6346c2c923c81369badb95317f05b7a0cb6fc",
        "files": [
          "bindings/python/test_arm.py",
          "bindings/python/test_basic.py",
          "bindings/python/test_detail.py",
          "bindings/python/test_lite.py",
          "bindings/python/test_skipdata.py",
          "bindings/python/test_x86.py"
        ],
        "message": "Use and test syntax against None in all_tests.\n\nComparing against 0 or just testing the truthiness is suboptimal, as you\nlose the ability to explicitly set the syntax to CS_OPT_SYNTAX_DEFAULT\nor 0.\n\nAlso, using None to mean \"don't change\" or other \"here is no value\"\ninterpretations is much more pythonic than the C-idiomatic 0.",
        "before_after_code_files": [
          "bindings/python/test_arm.py||bindings/python/test_arm.py",
          "bindings/python/test_basic.py||bindings/python/test_basic.py",
          "bindings/python/test_detail.py||bindings/python/test_detail.py",
          "bindings/python/test_lite.py||bindings/python/test_lite.py",
          "bindings/python/test_skipdata.py||bindings/python/test_skipdata.py",
          "bindings/python/test_x86.py||bindings/python/test_x86.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/test_arm.py||bindings/python/test_arm.py": [
          "File: bindings/python/test_arm.py -> bindings/python/test_arm.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"Thumb\", None),",
          "21:         (CS_ARCH_ARM, CS_MODE_THUMB, ARM_CODE2, \"Thumb-mixed\", None),",
          "22:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"Thumb-2 & register named with numbers\", CS_OPT_SYNTAX_NOREGNAME),",
          "25:         )",
          "",
          "[Removed Lines]",
          "23:         (CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_MCLASS, THUMB_MCLASS, \"Thumb-MClass\", 0),",
          "24:         (CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_V8, ARMV8, \"Arm-V8\", 0),",
          "",
          "[Added Lines]",
          "23:         (CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_MCLASS, THUMB_MCLASS, \"Thumb-MClass\", None),",
          "24:         (CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_V8, ARMV8, \"Arm-V8\", None),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:         try:",
          "139:             md = Cs(arch, mode)",
          "141:                 md.syntax = syntax",
          "142:             md.detail = True",
          "143:             for insn in md.disasm(code, 0x1000):",
          "",
          "[Removed Lines]",
          "140:             if syntax:",
          "",
          "[Added Lines]",
          "140:             if syntax is not None:",
          "",
          "---------------"
        ],
        "bindings/python/test_basic.py||bindings/python/test_basic.py": [
          "File: bindings/python/test_basic.py -> bindings/python/test_basic.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: XCORE_CODE = b\"\\xfe\\x0f\\xfe\\x17\\x13\\x17\\xc6\\xfe\\xec\\x17\\x97\\xf8\\xec\\x4f\\x1f\\xfd\\xec\\x37\\x07\\xf2\\x45\\x5b\\xf9\\xfa\\x02\\x06\\x1b\\x10\"",
          "35: all_tests = (",
          "37:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32bit (ATT syntax)\", CS_OPT_SYNTAX_ATT),",
          "39:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (MASM syntax)\", CS_OPT_SYNTAX_MASM),",
          "53:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64, print register with number only\", CS_OPT_SYNTAX_NOREGNAME),",
          "54:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN + CS_MODE_QPX, PPC_CODE2, \"PPC-64 + QPX\", CS_OPT_SYNTAX_NOREGNAME),",
          "59: )",
          "61: # ## Test cs_disasm_quick()",
          "",
          "[Removed Lines]",
          "36:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", 0),",
          "38:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", 0),",
          "40:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", 0),",
          "41:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE, \"ARM\", 0),",
          "42:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"THUMB-2\", 0),",
          "43:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE2, \"ARM: Cortex-A15 + NEON\", 0),",
          "44:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"THUMB\", 0),",
          "45:         (CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_MCLASS, THUMB_MCLASS, \"Thumb-MClass\", 0),",
          "46:         (CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_V8, ARMV8, \"Arm-V8\", 0),",
          "47:         (CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, MIPS_CODE, \"MIPS-32 (Big-endian)\", 0),",
          "48:         (CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN, MIPS_CODE2, \"MIPS-64-EL (Little-endian)\", 0),",
          "49:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_MICRO + CS_MODE_BIG_ENDIAN, MIPS_32R6M, \"MIPS-32R6 | Micro (Big-endian)\", 0),",
          "50:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_BIG_ENDIAN, MIPS_32R6, \"MIPS-32R6 (Big-endian)\", 0),",
          "51:         (CS_ARCH_ARM64, CS_MODE_ARM, ARM64_CODE, \"ARM-64\", 0),",
          "52:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64\", 0),",
          "55:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, SPARC_CODE, \"Sparc\", 0),",
          "56:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN + CS_MODE_V9, SPARCV9_CODE, \"SparcV9\", 0),",
          "57:         (CS_ARCH_SYSZ, 0, SYSZ_CODE, \"SystemZ\", 0),",
          "58:         (CS_ARCH_XCORE, 0, XCORE_CODE, \"XCore\", 0),",
          "",
          "[Added Lines]",
          "36:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", None),",
          "38:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", None),",
          "40:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", None),",
          "41:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE, \"ARM\", None),",
          "42:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"THUMB-2\", None),",
          "43:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE2, \"ARM: Cortex-A15 + NEON\", None),",
          "44:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"THUMB\", None),",
          "45:         (CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_MCLASS, THUMB_MCLASS, \"Thumb-MClass\", None),",
          "46:         (CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_V8, ARMV8, \"Arm-V8\", None),",
          "47:         (CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, MIPS_CODE, \"MIPS-32 (Big-endian)\", None),",
          "48:         (CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN, MIPS_CODE2, \"MIPS-64-EL (Little-endian)\", None),",
          "49:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_MICRO + CS_MODE_BIG_ENDIAN, MIPS_32R6M, \"MIPS-32R6 | Micro (Big-endian)\", None),",
          "50:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_BIG_ENDIAN, MIPS_32R6, \"MIPS-32R6 (Big-endian)\", None),",
          "51:         (CS_ARCH_ARM64, CS_MODE_ARM, ARM64_CODE, \"ARM-64\", None),",
          "52:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64\", None),",
          "55:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, SPARC_CODE, \"Sparc\", None),",
          "56:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN + CS_MODE_V9, SPARCV9_CODE, \"SparcV9\", None),",
          "57:         (CS_ARCH_SYSZ, 0, SYSZ_CODE, \"SystemZ\", None),",
          "58:         (CS_ARCH_XCORE, 0, XCORE_CODE, \"XCore\", None),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         try:",
          "82:             md = Cs(arch, mode)",
          "85:                 md.syntax = syntax",
          "87:             for insn in md.disasm(code, 0x1000):",
          "",
          "[Removed Lines]",
          "84:             if syntax != 0:",
          "",
          "[Added Lines]",
          "84:             if syntax is not None:",
          "",
          "---------------"
        ],
        "bindings/python/test_detail.py||bindings/python/test_detail.py": [
          "File: bindings/python/test_detail.py -> bindings/python/test_detail.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: XCORE_CODE = b\"\\xfe\\x0f\\xfe\\x17\\x13\\x17\\xc6\\xfe\\xec\\x17\\x97\\xf8\\xec\\x4f\\x1f\\xfd\\xec\\x37\\x07\\xf2\\x45\\x5b\\xf9\\xfa\\x02\\x06\\x1b\\x10\"",
          "29: all_tests = (",
          "31:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32bit (ATT syntax)\", CS_OPT_SYNTAX_ATT),",
          "51: )",
          "",
          "[Removed Lines]",
          "30:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", 0),",
          "32:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", 0),",
          "33:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", 0),",
          "34:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE, \"ARM\", 0),",
          "35:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE2, \"ARM: Cortex-A15 + NEON\", 0),",
          "36:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"THUMB\", 0),",
          "37:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"THUMB-2\", 0),",
          "38:         (CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_MCLASS, THUMB_MCLASS, \"Thumb-MClass\", 0),",
          "39:         (CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_V8, ARMV8, \"Arm-V8\", 0),",
          "40:         (CS_ARCH_ARM64, CS_MODE_ARM, ARM64_CODE, \"ARM-64\", 0),",
          "41:         (CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, MIPS_CODE, \"MIPS-32 (Big-endian)\", 0),",
          "42:         (CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN, MIPS_CODE2, \"MIPS-64-EL (Little-endian)\", 0),",
          "43:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_MICRO + CS_MODE_BIG_ENDIAN, MIPS_32R6M, \"MIPS-32R6 | Micro (Big-endian)\", 0),",
          "44:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_BIG_ENDIAN, MIPS_32R6, \"MIPS-32R6 (Big-endian)\", 0),",
          "45:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64\", 0),",
          "46:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN + CS_MODE_QPX, PPC_CODE2, \"PPC-64 + QPX\", 0),",
          "47:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, SPARC_CODE, \"Sparc\", 0),",
          "48:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN + CS_MODE_V9, SPARCV9_CODE, \"SparcV9\", 0),",
          "49:         (CS_ARCH_SYSZ, 0, SYSZ_CODE, \"SystemZ\", 0),",
          "50:         (CS_ARCH_XCORE, 0, XCORE_CODE, \"XCore\", 0),",
          "",
          "[Added Lines]",
          "30:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", None),",
          "32:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", None),",
          "33:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", None),",
          "34:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE, \"ARM\", None),",
          "35:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE2, \"ARM: Cortex-A15 + NEON\", None),",
          "36:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"THUMB\", None),",
          "37:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"THUMB-2\", None),",
          "38:         (CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_MCLASS, THUMB_MCLASS, \"Thumb-MClass\", None),",
          "39:         (CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_V8, ARMV8, \"Arm-V8\", None),",
          "40:         (CS_ARCH_ARM64, CS_MODE_ARM, ARM64_CODE, \"ARM-64\", None),",
          "41:         (CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, MIPS_CODE, \"MIPS-32 (Big-endian)\", None),",
          "42:         (CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN, MIPS_CODE2, \"MIPS-64-EL (Little-endian)\", None),",
          "43:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_MICRO + CS_MODE_BIG_ENDIAN, MIPS_32R6M, \"MIPS-32R6 | Micro (Big-endian)\", None),",
          "44:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_BIG_ENDIAN, MIPS_32R6, \"MIPS-32R6 (Big-endian)\", None),",
          "45:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64\", None),",
          "46:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN + CS_MODE_QPX, PPC_CODE2, \"PPC-64 + QPX\", None),",
          "47:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, SPARC_CODE, \"Sparc\", None),",
          "48:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN + CS_MODE_V9, SPARCV9_CODE, \"SparcV9\", None),",
          "49:         (CS_ARCH_SYSZ, 0, SYSZ_CODE, \"SystemZ\", None),",
          "50:         (CS_ARCH_XCORE, 0, XCORE_CODE, \"XCore\", None),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:             md = Cs(arch, mode)",
          "91:             md.detail = True",
          "94:                 md.syntax = syntax",
          "96:             for insn in md.disasm(code, 0x1000):",
          "",
          "[Removed Lines]",
          "93:             if syntax != 0:",
          "",
          "[Added Lines]",
          "93:             if syntax is not None:",
          "",
          "---------------"
        ],
        "bindings/python/test_lite.py||bindings/python/test_lite.py": [
          "File: bindings/python/test_lite.py -> bindings/python/test_lite.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: PPC_CODE = b\"\\x80\\x20\\x00\\x00\\x80\\x3f\\x00\\x00\\x10\\x43\\x23\\x0e\\xd0\\x44\\x00\\x80\\x4c\\x43\\x22\\x02\\x2d\\x03\\x00\\x80\\x7c\\x43\\x20\\x14\\x7c\\x43\\x20\\x93\\x4f\\x20\\x00\\x21\\x4c\\xc8\\x00\\x21\"",
          "21: all_tests = (",
          "23:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32bit (ATT syntax)\", CS_OPT_SYNTAX_ATT),",
          "34:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64, print register with number only\", CS_OPT_SYNTAX_NOREGNAME),",
          "35:         )",
          "",
          "[Removed Lines]",
          "22:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", 0),",
          "24:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", 0),",
          "25:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", 0),",
          "26:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE, \"ARM\", 0),",
          "27:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"THUMB-2\", 0),",
          "28:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE2, \"ARM: Cortex-A15 + NEON\", 0),",
          "29:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"THUMB\", 0),",
          "30:         (CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, MIPS_CODE, \"MIPS-32 (Big-endian)\", 0),",
          "31:         (CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN, MIPS_CODE2, \"MIPS-64-EL (Little-endian)\", 0),",
          "32:         (CS_ARCH_ARM64, CS_MODE_ARM, ARM64_CODE, \"ARM-64\", 0),",
          "33:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64\", 0),",
          "",
          "[Added Lines]",
          "22:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", None),",
          "24:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", None),",
          "25:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", None),",
          "26:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE, \"ARM\", None),",
          "27:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"THUMB-2\", None),",
          "28:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE2, \"ARM: Cortex-A15 + NEON\", None),",
          "29:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"THUMB\", None),",
          "30:         (CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, MIPS_CODE, \"MIPS-32 (Big-endian)\", None),",
          "31:         (CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN, MIPS_CODE2, \"MIPS-64-EL (Little-endian)\", None),",
          "32:         (CS_ARCH_ARM64, CS_MODE_ARM, ARM64_CODE, \"ARM-64\", None),",
          "33:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64\", None),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:         try:",
          "59:             md = Cs(arch, mode)",
          "62:                 md.syntax = syntax",
          "64:             for (addr, size, mnemonic, op_str) in md.disasm_lite(code, 0x1000):",
          "",
          "[Removed Lines]",
          "61:             if syntax != 0:",
          "",
          "[Added Lines]",
          "61:             if syntax is not None:",
          "",
          "---------------"
        ],
        "bindings/python/test_skipdata.py||bindings/python/test_skipdata.py": [
          "File: bindings/python/test_skipdata.py -> bindings/python/test_skipdata.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: RANDOM_CODE = b\"\\xed\\x00\\x00\\x00\\x00\\x1a\\x5a\\x0f\\x1f\\xff\\xc2\\x09\\x80\\x00\\x00\\x00\\x07\\xf7\\xeb\\x2a\\xff\\xff\\x7f\\x57\\xe3\\x01\\xff\\xff\\x7f\\x57\\xeb\\x00\\xf0\\x00\\x00\\x24\\xb2\\x4f\\x00\\x78\"",
          "14: all_tests = (",
          "17: )",
          "",
          "[Removed Lines]",
          "15:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", 0),",
          "16:         (CS_ARCH_ARM, CS_MODE_ARM, RANDOM_CODE, \"Arm\", 0),",
          "",
          "[Added Lines]",
          "15:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", None),",
          "16:         (CS_ARCH_ARM, CS_MODE_ARM, RANDOM_CODE, \"Arm\", None),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:         try:",
          "35:             md = Cs(arch, mode)",
          "38:                 md.syntax = syntax",
          "40:             md.skipdata = True",
          "",
          "[Removed Lines]",
          "37:             if syntax != 0:",
          "",
          "[Added Lines]",
          "37:             if syntax is not None:",
          "",
          "---------------"
        ],
        "bindings/python/test_x86.py||bindings/python/test_x86.py": [
          "File: bindings/python/test_x86.py -> bindings/python/test_x86.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: X86_CODE32 = b\"\\x8d\\x4c\\x32\\x08\\x01\\xd8\\x81\\xc6\\x34\\x12\\x00\\x00\\x05\\x23\\x01\\x00\\x00\\x36\\x8b\\x84\\x91\\x23\\x01\\x00\\x00\\x41\\x8d\\x84\\x39\\x89\\x67\\x00\\x00\\x8d\\x87\\x89\\x67\\x00\\x00\\xb4\\xc6\"",
          "14: all_tests = (",
          "16:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (AT&T syntax)\", CS_OPT_SYNTAX_ATT),",
          "19:         )",
          "",
          "[Removed Lines]",
          "15:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", 0),",
          "17:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", 0),",
          "18:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", 0),",
          "",
          "[Added Lines]",
          "15:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", None),",
          "17:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", None),",
          "18:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", None),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:             md = Cs(arch, mode)",
          "158:             md.detail = True",
          "161:                 md.syntax = syntax",
          "163:             for insn in md.disasm(code, 0x1000):",
          "",
          "[Removed Lines]",
          "160:             if syntax != 0:",
          "",
          "[Added Lines]",
          "160:             if syntax is not None:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7869831044deb0995bf26fc7730f33d5cb9eaa1",
      "candidate_info": {
        "commit_hash": "d7869831044deb0995bf26fc7730f33d5cb9eaa1",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/d7869831044deb0995bf26fc7730f33d5cb9eaa1",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool: support armbe mode",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:  if (cs_support(CS_ARCH_ARM)) {",
          "87:   printf(\"        arm:       arm\\n\");",
          "90:   printf(\"        thumb:     thumb mode\\n\");",
          "91:   printf(\"        thumbbe:   thumb + big endian\\n\");",
          "93:  }",
          "95:  if (cs_support(CS_ARCH_ARM64)) {",
          "",
          "[Removed Lines]",
          "88:   printf(\"        armb:      arm + big endian\\n\");",
          "89:   printf(\"        arml:      arm + little endian\\n\");",
          "92:   printf(\"        thumble:   thumb + billtle endian\\n\");",
          "",
          "[Added Lines]",
          "88:   printf(\"        armbe:     arm + big endian\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "187:  }",
          "190:   arch = CS_ARCH_ARM;",
          "191:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "192:  }",
          "",
          "[Removed Lines]",
          "189:  if (!strcmp(mode, \"armb\")) {",
          "",
          "[Added Lines]",
          "187:  if (!strcmp(mode, \"armb\") || !strcmp(mode, \"armbe\") ) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3abf30552812fdfb07a1cbe5fff187ba9103d104",
      "candidate_info": {
        "commit_hash": "3abf30552812fdfb07a1cbe5fff187ba9103d104",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/3abf30552812fdfb07a1cbe5fff187ba9103d104",
        "files": [
          ".appveyor.yml",
          "appveyor.yml",
          "arch/X86/X86IntelInstPrinter.c"
        ],
        "message": "rename appveyor.yml to .appveyor.yml",
        "before_after_code_files": [
          "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c": [
          "File: arch/X86/X86IntelInstPrinter.c -> arch/X86/X86IntelInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:   printRegName(O, MCOperand_getReg(Op));",
          "421:  } else if (MCOperand_isImm(Op)) {",
          "422:   int64_t imm = MCOperand_getImm(Op);",
          "424:  }",
          "425: }",
          "",
          "[Removed Lines]",
          "423:   printImm(MI->csh->syntax, O, imm, false);",
          "",
          "[Added Lines]",
          "423:   if (MI->csh->imm_unsigned == CS_OPT_ON)",
          "424:    printImm(MI->csh->syntax, O, imm, true);",
          "425:   else",
          "426:    printImm(MI->csh->syntax, O, imm, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "846:   switch(MI->flat_insn->id) {",
          "847:    default:",
          "849:     break;",
          "851:    case X86_INS_MOVABS:",
          "",
          "[Removed Lines]",
          "848:     printImm(MI->csh->syntax, O, imm, false);",
          "",
          "[Added Lines]",
          "851:     if (MI->csh->imm_unsigned == CS_OPT_ON)",
          "852:      printImm(MI->csh->syntax, O, imm, true);",
          "853:     else",
          "854:      printImm(MI->csh->syntax, O, imm, false);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b55115c425b4b08225ea7814070da793d442109",
      "candidate_info": {
        "commit_hash": "5b55115c425b4b08225ea7814070da793d442109",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/5b55115c425b4b08225ea7814070da793d442109",
        "files": [
          "arch/ARM/ARMInstPrinter.c",
          "arch/Sparc/SparcInstPrinter.c",
          "arch/SystemZ/SystemZInstPrinter.c"
        ],
        "message": "Fixed #1060 #1061 #1062 (#1079)",
        "before_after_code_files": [
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c",
          "arch/Sparc/SparcInstPrinter.c||arch/Sparc/SparcInstPrinter.c",
          "arch/SystemZ/SystemZInstPrinter.c||arch/SystemZ/SystemZInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "759:        SStream_concat(O, \"#%u\", imm);",
          "760:      } else {",
          "761:       if (imm < -HEX_THRESHOLD)",
          "763:       else",
          "764:        SStream_concat(O, \"#-%u\", -imm);",
          "765:      }",
          "",
          "[Removed Lines]",
          "762:        SStream_concat(O, \"#-0x%x\", (unsigned int)-imm);",
          "",
          "[Added Lines]",
          "763:        SStream_concat(O, \"#-0x%x\", -(uint32_t)imm);",
          "",
          "---------------"
        ],
        "arch/Sparc/SparcInstPrinter.c||arch/Sparc/SparcInstPrinter.c": [
          "File: arch/Sparc/SparcInstPrinter.c -> arch/Sparc/SparcInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:     SStream_concat(O, \"%u\", Imm);",
          "270:   } else {",
          "271:    if (Imm < -HEX_THRESHOLD)",
          "273:    else",
          "274:     SStream_concat(O, \"-%u\", -Imm);",
          "275:   }",
          "",
          "[Removed Lines]",
          "272:     SStream_concat(O, \"-0x%x\", (unsigned int)-Imm);",
          "",
          "[Added Lines]",
          "273:     SStream_concat(O, \"-0x%x\", -(uint32_t)Imm);",
          "",
          "---------------"
        ],
        "arch/SystemZ/SystemZInstPrinter.c||arch/SystemZ/SystemZInstPrinter.c": [
          "File: arch/SystemZ/SystemZInstPrinter.c -> arch/SystemZ/SystemZInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:     SStream_concat(O, \"%u\", imm);",
          "303:   } else {",
          "304:    if (imm < -HEX_THRESHOLD)",
          "306:    else",
          "307:     SStream_concat(O, \"-%u\", -imm);",
          "308:   }",
          "",
          "[Removed Lines]",
          "305:     SStream_concat(O, \"-0x%x\", (unsigned int)-imm);",
          "",
          "[Added Lines]",
          "306:     SStream_concat(O, \"-0x%x\", -(uint32_t)imm);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7459a0ed760b62c08d2110292c20491cad8928f",
      "candidate_info": {
        "commit_hash": "d7459a0ed760b62c08d2110292c20491cad8928f",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/d7459a0ed760b62c08d2110292c20491cad8928f",
        "files": [
          "arch/X86/X86Mapping.c"
        ],
        "message": "x86: fix issue #756",
        "before_after_code_files": [
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
          "2943:  if (!intel_regs_sorted) {",
          "2945:     sizeof(insn_regs_intel_sorted));",
          "2947:     ARR_SIZE(insn_regs_intel_sorted),",
          "2948:     sizeof(struct insn_reg), regs_cmp);",
          "2949:   intel_regs_sorted = true;",
          "",
          "[Removed Lines]",
          "2944:   memcpy (insn_regs_intel_sorted, insn_regs_intel,",
          "2946:   qsort (insn_regs_intel_sorted,",
          "",
          "[Added Lines]",
          "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
          "2946:   qsort(insn_regs_intel_sorted,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2958:    }",
          "2959:    return insn_regs_intel_sorted[mid].reg;",
          "2960:   } else {",
          "2961:    last = mid - 1;",
          "2962:   }",
          "2963:   mid = (first + last) / 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2961:    if (mid == 0)",
          "2962:     break;",
          "",
          "---------------"
        ]
      }
    }
  ]
}