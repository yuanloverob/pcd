{
  "cve_id": "CVE-2022-24301",
  "cve_desc": "In Minetest before 5.4.0, players can add or subtract items from a different player's inventory.",
  "repo": "minetest/minetest",
  "patch_hash": "3693b6871eba268ecc79b3f52d00d3cefe761131",
  "patch_info": {
    "commit_hash": "3693b6871eba268ecc79b3f52d00d3cefe761131",
    "repo": "minetest/minetest",
    "commit_url": "https://github.com/minetest/minetest/commit/3693b6871eba268ecc79b3f52d00d3cefe761131",
    "files": [
      "src/network/serverpackethandler.cpp"
    ],
    "message": "Prevent players accessing inventories of other players (#10341)",
    "before_after_code_files": [
      "src/network/serverpackethandler.cpp||src/network/serverpackethandler.cpp"
    ]
  },
  "patch_diff": {
    "src/network/serverpackethandler.cpp||src/network/serverpackethandler.cpp": [
      "File: src/network/serverpackethandler.cpp -> src/network/serverpackethandler.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "630:   if (ma->from_inv != ma->to_inv)",
      "631:    m_inventory_mgr->setInventoryModified(ma->to_inv);",
      "641:   InventoryLocation *remote = from_inv_is_current_player ?",
      "642:    &ma->to_inv : &ma->from_inv;",
      "",
      "[Removed Lines]",
      "633:   bool from_inv_is_current_player =",
      "634:    (ma->from_inv.type == InventoryLocation::PLAYER) &&",
      "635:    (ma->from_inv.name == player->getName());",
      "637:   bool to_inv_is_current_player =",
      "638:    (ma->to_inv.type == InventoryLocation::PLAYER) &&",
      "639:    (ma->to_inv.name == player->getName());",
      "",
      "[Added Lines]",
      "633:   bool from_inv_is_current_player = false;",
      "634:   if (ma->from_inv.type == InventoryLocation::PLAYER) {",
      "635:    if (ma->from_inv.name != player->getName())",
      "636:     return;",
      "637:    from_inv_is_current_player = true;",
      "638:   }",
      "640:   bool to_inv_is_current_player = false;",
      "641:   if (ma->to_inv.type == InventoryLocation::PLAYER) {",
      "642:    if (ma->to_inv.name != player->getName())",
      "643:     return;",
      "644:    to_inv_is_current_player = true;",
      "645:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0d128ab344e3d04d2b30dbd5e047f4ac700013b7",
      "candidate_info": {
        "commit_hash": "0d128ab344e3d04d2b30dbd5e047f4ac700013b7",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/0d128ab344e3d04d2b30dbd5e047f4ac700013b7",
        "files": [
          "src/network/serverpackethandler.cpp"
        ],
        "message": "Inventory: Protect Craft and Drop actions (#10353)\n\nChange dangerous pointer to unique_ptr for automated deletion.",
        "before_after_code_files": [
          "src/network/serverpackethandler.cpp||src/network/serverpackethandler.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/network/serverpackethandler.cpp||src/network/serverpackethandler.cpp"
          ],
          "candidate": [
            "src/network/serverpackethandler.cpp||src/network/serverpackethandler.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/network/serverpackethandler.cpp||src/network/serverpackethandler.cpp": [
          "File: src/network/serverpackethandler.cpp -> src/network/serverpackethandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "600:   << std::endl;",
          "601:  std::istringstream is(datastring, std::ios_base::binary);",
          "604:  if (!a) {",
          "605:   infostream << \"TOSERVER_INVENTORY_ACTION: \"",
          "606:     << \"InventoryAction::deSerialize() returned NULL\"",
          "",
          "[Removed Lines]",
          "603:  InventoryAction *a = InventoryAction::deSerialize(is);",
          "",
          "[Added Lines]",
          "603:  std::unique_ptr<InventoryAction> a(InventoryAction::deSerialize(is));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "617:   where the client made a bad prediction.",
          "621:   Handle restrictions and special cases of the move action",
          "623:  if (a->getType() == IAction::Move) {",
          "626:   ma->from_inv.applyCurrentPlayer(player->getName());",
          "627:   ma->to_inv.applyCurrentPlayer(player->getName());",
          "",
          "[Removed Lines]",
          "624:   IMoveAction *ma = (IMoveAction*)a;",
          "",
          "[Added Lines]",
          "620:  const bool player_has_interact = checkPriv(player->getName(), \"interact\");",
          "622:  auto check_inv_access = [player, player_has_interact] (",
          "623:    const InventoryLocation &loc) -> bool {",
          "624:   if (loc.type == InventoryLocation::CURRENT_PLAYER)",
          "625:    return false; // Only used internally on the client, never sent",
          "626:   if (loc.type == InventoryLocation::PLAYER) {",
          "628:    return loc.name == player->getName();",
          "629:   }",
          "631:   if (!player_has_interact) {",
          "632:    infostream << \"Cannot modify foreign inventory: \"",
          "633:      << \"No interact privilege\" << std::endl;",
          "634:    return false;",
          "635:   }",
          "636:   return true;",
          "637:  };",
          "643:   IMoveAction *ma = (IMoveAction*)a.get();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "630:   if (ma->from_inv != ma->to_inv)",
          "631:    m_inventory_mgr->setInventoryModified(ma->to_inv);",
          "648:    &ma->to_inv : &ma->from_inv;",
          "",
          "[Removed Lines]",
          "633:   bool from_inv_is_current_player = false;",
          "634:   if (ma->from_inv.type == InventoryLocation::PLAYER) {",
          "635:    if (ma->from_inv.name != player->getName())",
          "636:     return;",
          "637:    from_inv_is_current_player = true;",
          "638:   }",
          "640:   bool to_inv_is_current_player = false;",
          "641:   if (ma->to_inv.type == InventoryLocation::PLAYER) {",
          "642:    if (ma->to_inv.name != player->getName())",
          "643:     return;",
          "644:    to_inv_is_current_player = true;",
          "645:   }",
          "647:   InventoryLocation *remote = from_inv_is_current_player ?",
          "",
          "[Added Lines]",
          "652:   if (!check_inv_access(ma->from_inv) ||",
          "653:     !check_inv_access(ma->to_inv))",
          "654:    return;",
          "656:   InventoryLocation *remote = ma->from_inv.type == InventoryLocation::PLAYER ?",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "664:      << (ma->from_inv.dump()) << \":\" << ma->from_list",
          "665:      << \" to \" << (ma->to_inv.dump()) << \":\" << ma->to_list",
          "666:      << \" because src is \" << ma->from_list << std::endl;",
          "668:    return;",
          "669:   }",
          "",
          "[Removed Lines]",
          "667:    delete a;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "676:      << (ma->from_inv.dump()) << \":\" << ma->from_list",
          "677:      << \" to \" << (ma->to_inv.dump()) << \":\" << ma->to_list",
          "678:      << \" because dst is \" << ma->to_list << std::endl;",
          "691:    return;",
          "692:   }",
          "693:  }",
          "",
          "[Removed Lines]",
          "679:    delete a;",
          "680:    return;",
          "681:   }",
          "685:   if (!checkPriv(player->getName(), \"interact\") &&",
          "686:     (!from_inv_is_current_player ||",
          "687:     !to_inv_is_current_player)) {",
          "688:    infostream << \"Cannot move outside of player's inventory: \"",
          "689:      << \"No interact privilege\" << std::endl;",
          "690:    delete a;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "695:   Handle restrictions and special cases of the drop action",
          "697:  else if (a->getType() == IAction::Drop) {",
          "700:   da->from_inv.applyCurrentPlayer(player->getName());",
          "",
          "[Removed Lines]",
          "698:   IDropAction *da = (IDropAction*)a;",
          "",
          "[Added Lines]",
          "694:   IDropAction *da = (IDropAction*)a.get();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "708:    infostream << \"Ignoring IDropAction from \"",
          "709:      << (da->from_inv.dump()) << \":\" << da->from_list",
          "710:      << \" because src is \" << da->from_list << std::endl;",
          "712:    return;",
          "713:   }",
          "718:    return;",
          "722:   if (playersao->isDead()) {",
          "723:    infostream << \"Ignoring IDropAction from \"",
          "724:      << (da->from_inv.dump()) << \":\" << da->from_list",
          "725:      << \" because player is dead.\" << std::endl;",
          "727:    return;",
          "728:   }",
          "729:  }",
          "",
          "[Removed Lines]",
          "711:    delete a;",
          "716:   if (!checkPriv(player->getName(), \"interact\")) {",
          "717:    delete a;",
          "719:   }",
          "726:    delete a;",
          "",
          "[Added Lines]",
          "711:   if (!player_has_interact || !check_inv_access(da->from_inv))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "731:   Handle restrictions and special cases of the craft action",
          "733:  else if (a->getType() == IAction::Craft) {",
          "736:   ca->craft_inv.applyCurrentPlayer(player->getName());",
          "738:   m_inventory_mgr->setInventoryModified(ca->craft_inv);",
          "746:    infostream << \"Cannot craft: \"",
          "747:      << \"No interact privilege\" << std::endl;",
          "749:    return;",
          "750:   }",
          "751:  }",
          "754:  a->apply(m_inventory_mgr.get(), playersao, this);",
          "757: }",
          "759: void Server::handleCommand_ChatMessage(NetworkPacket* pkt)",
          "",
          "[Removed Lines]",
          "734:   ICraftAction *ca = (ICraftAction*)a;",
          "745:   if (!checkPriv(player->getName(), \"interact\")) {",
          "748:    delete a;",
          "756:  delete a;",
          "",
          "[Added Lines]",
          "726:   ICraftAction *ca = (ICraftAction*)a.get();",
          "733:   if (!player_has_interact) {",
          "739:   if (!check_inv_access(ca->craft_inv))",
          "740:    return;",
          "741:  } else {",
          "743:   return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6dcc9e63318f815a3de8c9db2ee7b845066e0135",
      "candidate_info": {
        "commit_hash": "6dcc9e63318f815a3de8c9db2ee7b845066e0135",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/6dcc9e63318f815a3de8c9db2ee7b845066e0135",
        "files": [
          "src/network/serverpackethandler.cpp"
        ],
        "message": "Prevent interacting with items out of the hotbar (#10359)",
        "before_after_code_files": [
          "src/network/serverpackethandler.cpp||src/network/serverpackethandler.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/network/serverpackethandler.cpp||src/network/serverpackethandler.cpp"
          ],
          "candidate": [
            "src/network/serverpackethandler.cpp||src/network/serverpackethandler.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/network/serverpackethandler.cpp||src/network/serverpackethandler.cpp": [
          "File: src/network/serverpackethandler.cpp -> src/network/serverpackethandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "872:  playersao->getPlayer()->setWieldIndex(item);",
          "873: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "872:  if (item >= player->getHotbarItemcount()) {",
          "873:   actionstream << \"Player: \" << player->getName()",
          "874:    << \" tried to access item=\" << item",
          "875:    << \" out of hotbar_itemcount=\"",
          "876:    << player->getHotbarItemcount()",
          "877:    << \"; ignoring.\" << std::endl;",
          "878:   return;",
          "879:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "984:  v3f player_pos = playersao->getLastGoodPosition();",
          "987:  playersao->getPlayer()->setWieldIndex(item_i);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "997:  if (item_i >= player->getHotbarItemcount()) {",
          "998:   actionstream << \"Player: \" << player->getName()",
          "999:    << \" tried to access item=\" << item_i",
          "1000:    << \" out of hotbar_itemcount=\"",
          "1001:    << player->getHotbarItemcount()",
          "1002:    << \"; ignoring.\" << std::endl;",
          "1003:   return;",
          "1004:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}