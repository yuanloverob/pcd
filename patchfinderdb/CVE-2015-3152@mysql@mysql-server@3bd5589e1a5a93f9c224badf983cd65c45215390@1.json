{
  "cve_id": "CVE-2015-3152",
  "cve_desc": "Oracle MySQL before 5.7.3, Oracle MySQL Connector/C (aka libmysqlclient) before 6.1.3, and MariaDB before 5.5.44 use the --ssl option to mean that SSL is optional, which allows man-in-the-middle attackers to spoof servers via a cleartext-downgrade attack, aka a \"BACKRONYM\" attack.",
  "repo": "mysql/mysql-server",
  "patch_hash": "3bd5589e1a5a93f9c224badf983cd65c45215390",
  "patch_info": {
    "commit_hash": "3bd5589e1a5a93f9c224badf983cd65c45215390",
    "repo": "mysql/mysql-server",
    "commit_url": "https://github.com/mysql/mysql-server/commit/3bd5589e1a5a93f9c224badf983cd65c45215390",
    "files": [
      "client/mysql.cc",
      "client/mysql_secure_installation.cc",
      "client/mysql_upgrade.c",
      "client/mysqladmin.cc",
      "client/mysqlbinlog.cc",
      "client/mysqlcheck.c",
      "client/mysqldump.c",
      "client/mysqlimport.c",
      "client/mysqlshow.c",
      "client/mysqlslap.c",
      "client/mysqltest.cc",
      "cmake/mysql_version.cmake",
      "include/mysql.h",
      "include/mysql.h.pp",
      "include/sql_common.h",
      "include/sslopt-case.h",
      "include/sslopt-longopts.h",
      "include/sslopt-vars.h",
      "mysql-test/r/mysql_ssl.result",
      "mysql-test/r/plugin_auth_sha256_server_default_tls.result",
      "mysql-test/r/ssl_cipher.result",
      "mysql-test/t/mysql_ssl-master.opt",
      "mysql-test/t/mysql_ssl.test",
      "mysql-test/t/plugin_auth_sha256_server_default_tls.test",
      "mysql-test/t/ssl_cipher.test",
      "sql-common/client.c",
      "sql-common/client_authentication.cc",
      "sql/rpl_slave.cc",
      "tests/mysql_client_test.c"
    ],
    "message": "WL#6791 : Redefine client --ssl option to imply enforced encryption\n\n# Changed the meaning of the --ssl=1 option of all client binaries\nto mean force ssl, not try ssl and fail over to eunecrypted\n# Added a new MYSQL_OPT_SSL_ENFORCE mysql_options()\noption to specify that an ssl connection is required.\n# Added a new macro SSL_SET_OPTIONS() to the client\nSSL handling headers that sets all the relevant SSL options at \nonce.\n# Revamped all of the current native clients to use the new macro\n# Removed some Windows line endings.\n# Added proper handling of the new option into the ssl helper\nheaders.\n# If SSL is mandatory assume that the media is secure enough \nfor the sha256 plugin to do unencrypted password exchange even\nbefore establishing a connection.\n# Set the default ssl cipher to DHE-RSA-AES256-SHA if none is \nspecified.\n# updated test cases that require a non-default cipher to spawn \na mysql command line tool binary since mysqltest has no support\nfor specifying ciphers.\n# updated the replication slave connection code to always enforce\nSSL if any of the SSL config options is present.\n# test cases added and updated.\n# added a mysql_get_option() API to return mysql_options() \nvalues. Used the new API inside the sha256 plugin.\n# Fixed compilation warnings because of unused variables.\n# Fixed test failures (mysql_ssl and bug13115401)\n# Fixed whitespace issues.\n# Fully implemented the mysql_get_option() function.\n# Added a test case for mysql_get_option()\n# fixed some trailing whitespace issues\n# fixed some uint/int warnings in mysql_client_test.c\n# removed shared memory option from non-windows get_options\n tests\n# moved MYSQL_OPT_LOCAL_INFILE to the uint options",
    "before_after_code_files": [
      "client/mysql.cc||client/mysql.cc",
      "client/mysql_secure_installation.cc||client/mysql_secure_installation.cc",
      "client/mysql_upgrade.c||client/mysql_upgrade.c",
      "client/mysqladmin.cc||client/mysqladmin.cc",
      "client/mysqlbinlog.cc||client/mysqlbinlog.cc",
      "client/mysqlcheck.c||client/mysqlcheck.c",
      "client/mysqldump.c||client/mysqldump.c",
      "client/mysqlimport.c||client/mysqlimport.c",
      "client/mysqlshow.c||client/mysqlshow.c",
      "client/mysqlslap.c||client/mysqlslap.c",
      "client/mysqltest.cc||client/mysqltest.cc",
      "cmake/mysql_version.cmake||cmake/mysql_version.cmake",
      "include/mysql.h||include/mysql.h",
      "include/mysql.h.pp||include/mysql.h.pp",
      "include/sql_common.h||include/sql_common.h",
      "include/sslopt-case.h||include/sslopt-case.h",
      "include/sslopt-longopts.h||include/sslopt-longopts.h",
      "include/sslopt-vars.h||include/sslopt-vars.h",
      "mysql-test/r/mysql_ssl.result||mysql-test/r/mysql_ssl.result",
      "mysql-test/r/plugin_auth_sha256_server_default_tls.result||mysql-test/r/plugin_auth_sha256_server_default_tls.result",
      "mysql-test/r/ssl_cipher.result||mysql-test/r/ssl_cipher.result",
      "mysql-test/t/mysql_ssl-master.opt||mysql-test/t/mysql_ssl-master.opt",
      "mysql-test/t/mysql_ssl.test||mysql-test/t/mysql_ssl.test",
      "mysql-test/t/plugin_auth_sha256_server_default_tls.test||mysql-test/t/plugin_auth_sha256_server_default_tls.test",
      "mysql-test/t/ssl_cipher.test||mysql-test/t/ssl_cipher.test",
      "sql-common/client.c||sql-common/client.c",
      "sql-common/client_authentication.cc||sql-common/client_authentication.cc",
      "sql/rpl_slave.cc||sql/rpl_slave.cc",
      "tests/mysql_client_test.c||tests/mysql_client_test.c"
    ]
  },
  "patch_diff": {
    "client/mysql.cc||client/mysql.cc": [
      "File: client/mysql.cc -> client/mysql.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "4953:   if (using_opt_local_infile)",
      "4954:     mysql_options(mysql, MYSQL_OPT_LOCAL_INFILE, (char*) &opt_local_infile);",
      "4968:   if (opt_protocol)",
      "4969:     mysql_options(mysql, MYSQL_OPT_PROTOCOL, (char*) &opt_protocol);",
      "",
      "[Removed Lines]",
      "4956: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
      "4957:   if (opt_use_ssl)",
      "4958:   {",
      "4959:     mysql_ssl_set(mysql, opt_ssl_key, opt_ssl_cert, opt_ssl_ca,",
      "4960:     opt_ssl_capath, opt_ssl_cipher);",
      "4961:     mysql_options(mysql, MYSQL_OPT_SSL_CRL, opt_ssl_crl);",
      "4962:     mysql_options(mysql, MYSQL_OPT_SSL_CRLPATH, opt_ssl_crlpath);",
      "4963:   }",
      "4964:   mysql_options(mysql, MYSQL_OPT_SSL_VERIFY_SERVER_CERT,",
      "4965:                 (char*) &opt_ssl_verify_server_cert);",
      "4966: #endif",
      "",
      "[Added Lines]",
      "4956:   SSL_SET_OPTIONS(mysql);",
      "",
      "---------------"
    ],
    "client/mysql_secure_installation.cc||client/mysql_secure_installation.cc": [
      "File: client/mysql_secure_installation.cc -> client/mysql_secure_installation.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "158: static void",
      "159: init_connection_options(MYSQL *mysql)",
      "160: {",
      "173:   if (opt_protocol)",
      "174:     mysql_options(mysql, MYSQL_OPT_PROTOCOL, (char*) &opt_protocol);",
      "",
      "[Removed Lines]",
      "161: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
      "162:   if (opt_use_ssl)",
      "163:   {",
      "164:     mysql_ssl_set(mysql, opt_ssl_key, opt_ssl_cert, opt_ssl_ca,",
      "165:                   opt_ssl_capath, opt_ssl_cipher);",
      "166:     mysql_options(mysql, MYSQL_OPT_SSL_CRL, opt_ssl_crl);",
      "167:     mysql_options(mysql, MYSQL_OPT_SSL_CRLPATH, opt_ssl_crlpath);",
      "168:   }",
      "169:   mysql_options(mysql, MYSQL_OPT_SSL_VERIFY_SERVER_CERT,",
      "170:                 (char*) &opt_ssl_verify_server_cert);",
      "171: #endif",
      "",
      "[Added Lines]",
      "161:   SSL_SET_OPTIONS(mysql);",
      "",
      "---------------"
    ],
    "client/mysql_upgrade.c||client/mysql_upgrade.c": [
      "File: client/mysql_upgrade.c -> client/mysql_upgrade.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "289:     add_option= FALSE;",
      "290:     break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "291: #include <sslopt-case.h>",
      "",
      "---------------"
    ],
    "client/mysqladmin.cc||client/mysqladmin.cc": [
      "File: client/mysqladmin.cc -> client/mysqladmin.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "361:     uint tmp=opt_connect_timeout;",
      "362:     mysql_options(&mysql,MYSQL_OPT_CONNECT_TIMEOUT, (char*) &tmp);",
      "363:   }",
      "375:   if (opt_protocol)",
      "376:     mysql_options(&mysql,MYSQL_OPT_PROTOCOL,(char*)&opt_protocol);",
      "377: #if defined (_WIN32) && !defined (EMBEDDED_LIBRARY)",
      "",
      "[Removed Lines]",
      "364: #ifdef HAVE_OPENSSL",
      "365:   if (opt_use_ssl)",
      "366:   {",
      "367:     mysql_ssl_set(&mysql, opt_ssl_key, opt_ssl_cert, opt_ssl_ca,",
      "368:     opt_ssl_capath, opt_ssl_cipher);",
      "369:     mysql_options(&mysql, MYSQL_OPT_SSL_CRL, opt_ssl_crl);",
      "370:     mysql_options(&mysql, MYSQL_OPT_SSL_CRLPATH, opt_ssl_crlpath);",
      "371:   }",
      "372:   mysql_options(&mysql,MYSQL_OPT_SSL_VERIFY_SERVER_CERT,",
      "373:                 (char*)&opt_ssl_verify_server_cert);",
      "374: #endif",
      "",
      "[Added Lines]",
      "364:   SSL_SET_OPTIONS(&mysql);",
      "",
      "---------------"
    ],
    "client/mysqlbinlog.cc||client/mysqlbinlog.cc": [
      "File: client/mysqlbinlog.cc -> client/mysqlbinlog.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1885:     return ERROR_STOP;",
      "1886:   }",
      "1900:   if (opt_plugin_dir && *opt_plugin_dir)",
      "1901:     mysql_options(mysql, MYSQL_PLUGIN_DIR, opt_plugin_dir);",
      "",
      "[Removed Lines]",
      "1888: #ifdef HAVE_OPENSSL",
      "1889:   if (opt_use_ssl)",
      "1890:   {",
      "1891:     mysql_ssl_set(mysql, opt_ssl_key, opt_ssl_cert, opt_ssl_ca,",
      "1892:                   opt_ssl_capath, opt_ssl_cipher);",
      "1893:     mysql_options(mysql, MYSQL_OPT_SSL_CRL, opt_ssl_crl);",
      "1894:     mysql_options(mysql, MYSQL_OPT_SSL_CRLPATH, opt_ssl_crlpath);",
      "1895:   }",
      "1896:   mysql_options(mysql, MYSQL_OPT_SSL_VERIFY_SERVER_CERT,",
      "1897:                 (char*) &opt_ssl_verify_server_cert);",
      "1898: #endif",
      "",
      "[Added Lines]",
      "1888:   SSL_SET_OPTIONS(mysql);",
      "",
      "---------------"
    ],
    "client/mysqlcheck.c||client/mysqlcheck.c": [
      "File: client/mysqlcheck.c -> client/mysqlcheck.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "881:   mysql_init(&mysql_connection);",
      "882:   if (opt_compress)",
      "883:     mysql_options(&mysql_connection, MYSQL_OPT_COMPRESS, NullS);",
      "893:   if (opt_protocol)",
      "894:     mysql_options(&mysql_connection,MYSQL_OPT_PROTOCOL,(char*)&opt_protocol);",
      "895:   if (opt_bind_addr)",
      "",
      "[Removed Lines]",
      "884: #ifdef HAVE_OPENSSL",
      "885:   if (opt_use_ssl)",
      "886:   {",
      "887:     mysql_ssl_set(&mysql_connection, opt_ssl_key, opt_ssl_cert, opt_ssl_ca,",
      "888:     opt_ssl_capath, opt_ssl_cipher);",
      "889:     mysql_options(&mysql_connection, MYSQL_OPT_SSL_CRL, opt_ssl_crl);",
      "890:     mysql_options(&mysql_connection, MYSQL_OPT_SSL_CRLPATH, opt_ssl_crlpath);",
      "891:   }",
      "892: #endif",
      "",
      "[Added Lines]",
      "884:   SSL_SET_OPTIONS(&mysql_connection);",
      "",
      "---------------"
    ],
    "client/mysqldump.c||client/mysqldump.c": [
      "File: client/mysqldump.c -> client/mysqldump.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1595:   mysql_init(&mysql_connection);",
      "1596:   if (opt_compress)",
      "1597:     mysql_options(&mysql_connection,MYSQL_OPT_COMPRESS,NullS);",
      "1609:   if (opt_protocol)",
      "1610:     mysql_options(&mysql_connection,MYSQL_OPT_PROTOCOL,(char*)&opt_protocol);",
      "1611:   if (opt_bind_addr)",
      "",
      "[Removed Lines]",
      "1598: #ifdef HAVE_OPENSSL",
      "1599:   if (opt_use_ssl)",
      "1600:   {",
      "1601:     mysql_ssl_set(&mysql_connection, opt_ssl_key, opt_ssl_cert, opt_ssl_ca,",
      "1602:                   opt_ssl_capath, opt_ssl_cipher);",
      "1603:     mysql_options(&mysql_connection, MYSQL_OPT_SSL_CRL, opt_ssl_crl);",
      "1604:     mysql_options(&mysql_connection, MYSQL_OPT_SSL_CRLPATH, opt_ssl_crlpath);",
      "1605:   }",
      "1606:   mysql_options(&mysql_connection,MYSQL_OPT_SSL_VERIFY_SERVER_CERT,",
      "1607:                 (char*)&opt_ssl_verify_server_cert);",
      "1608: #endif",
      "",
      "[Added Lines]",
      "1598:   SSL_SET_OPTIONS(&mysql_connection);",
      "",
      "---------------"
    ],
    "client/mysqlimport.c||client/mysqlimport.c": [
      "File: client/mysqlimport.c -> client/mysqlimport.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "420:   if (opt_local_file)",
      "421:     mysql_options(mysql,MYSQL_OPT_LOCAL_INFILE,",
      "422:     (char*) &opt_local_file);",
      "434:   if (opt_protocol)",
      "435:     mysql_options(mysql,MYSQL_OPT_PROTOCOL,(char*)&opt_protocol);",
      "436:   if (opt_bind_addr)",
      "",
      "[Removed Lines]",
      "423: #ifdef HAVE_OPENSSL",
      "424:   if (opt_use_ssl)",
      "425:   {",
      "426:     mysql_ssl_set(mysql, opt_ssl_key, opt_ssl_cert, opt_ssl_ca,",
      "427:     opt_ssl_capath, opt_ssl_cipher);",
      "428:     mysql_options(mysql, MYSQL_OPT_SSL_CRL, opt_ssl_crl);",
      "429:     mysql_options(mysql, MYSQL_OPT_SSL_CRLPATH, opt_ssl_crlpath);",
      "430:   }",
      "431:   mysql_options(mysql,MYSQL_OPT_SSL_VERIFY_SERVER_CERT,",
      "432:                 (char*)&opt_ssl_verify_server_cert);",
      "433: #endif",
      "",
      "[Added Lines]",
      "423:   SSL_SET_OPTIONS(mysql);",
      "",
      "---------------"
    ],
    "client/mysqlshow.c||client/mysqlshow.c": [
      "File: client/mysqlshow.c -> client/mysqlshow.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "117:   mysql_init(&mysql);",
      "118:   if (opt_compress)",
      "119:     mysql_options(&mysql,MYSQL_OPT_COMPRESS,NullS);",
      "131:   if (opt_protocol)",
      "132:     mysql_options(&mysql,MYSQL_OPT_PROTOCOL,(char*)&opt_protocol);",
      "133:   if (opt_bind_addr)",
      "",
      "[Removed Lines]",
      "120: #ifdef HAVE_OPENSSL",
      "121:   if (opt_use_ssl)",
      "122:   {",
      "123:     mysql_ssl_set(&mysql, opt_ssl_key, opt_ssl_cert, opt_ssl_ca,",
      "124:     opt_ssl_capath, opt_ssl_cipher);",
      "125:     mysql_options(&mysql, MYSQL_OPT_SSL_CRL, opt_ssl_crl);",
      "126:     mysql_options(&mysql, MYSQL_OPT_SSL_CRLPATH, opt_ssl_crlpath);",
      "127:   }",
      "128:   mysql_options(&mysql,MYSQL_OPT_SSL_VERIFY_SERVER_CERT,",
      "129:                 (char*)&opt_ssl_verify_server_cert);",
      "130: #endif",
      "",
      "[Added Lines]",
      "120:   SSL_SET_OPTIONS(&mysql);",
      "",
      "---------------"
    ],
    "client/mysqlslap.c||client/mysqlslap.c": [
      "File: client/mysqlslap.c -> client/mysqlslap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "144: const char *auto_generate_sql_type= \"mixed\";",
      "146: static unsigned long connect_flags= CLIENT_MULTI_RESULTS |",
      "151: static int verbose, delimiter_length;",
      "",
      "[Removed Lines]",
      "147:                                     CLIENT_MULTI_STATEMENTS |",
      "148:                                     CLIENT_REMEMBER_OPTIONS;",
      "",
      "[Added Lines]",
      "147:                                     CLIENT_MULTI_STATEMENTS |",
      "148:                                     CLIENT_REMEMBER_OPTIONS;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "335:   mysql_init(&mysql);",
      "336:   if (opt_compress)",
      "337:     mysql_options(&mysql,MYSQL_OPT_COMPRESS,NullS);",
      "347:   if (opt_protocol)",
      "348:     mysql_options(&mysql,MYSQL_OPT_PROTOCOL,(char*)&opt_protocol);",
      "349: #if defined (_WIN32) && !defined (EMBEDDED_LIBRARY)",
      "",
      "[Removed Lines]",
      "338: #ifdef HAVE_OPENSSL",
      "339:   if (opt_use_ssl)",
      "340:   {",
      "341:     mysql_ssl_set(&mysql, opt_ssl_key, opt_ssl_cert, opt_ssl_ca,",
      "342:                   opt_ssl_capath, opt_ssl_cipher);",
      "343:     mysql_options(&mysql, MYSQL_OPT_SSL_CRL, opt_ssl_crl);",
      "344:     mysql_options(&mysql, MYSQL_OPT_SSL_CRLPATH, opt_ssl_crlpath);",
      "345:   }",
      "346: #endif",
      "",
      "[Added Lines]",
      "338:   SSL_SET_OPTIONS(&mysql);",
      "",
      "---------------"
    ],
    "client/mysqltest.cc||client/mysqltest.cc": [
      "File: client/mysqltest.cc -> client/mysqltest.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "5507:   my_bool con_pipe= 0, con_shm= 0, con_cleartext_enable= 0;",
      "5508:   my_bool con_secure_auth= 1;",
      "5509:   struct st_connection* con_slot;",
      "5511:   static DYNAMIC_STRING ds_connection_name;",
      "5512:   static DYNAMIC_STRING ds_host;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5510: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
      "5511:   my_bool save_opt_use_ssl= opt_use_ssl;",
      "5512: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5641: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
      "5642:   if (opt_use_ssl)",
      "5643:     con_ssl= 1;",
      "5647:   {",
      "5655:     opt_ssl_verify_server_cert= !strcmp(ds_host.str, \"localhost\");",
      "5658: #endif",
      "5659: #endif",
      "5662:   if (con_pipe)",
      "5663:   {",
      "",
      "[Removed Lines]",
      "5644: #endif",
      "5646:   if (con_ssl)",
      "5648: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
      "5649:     mysql_ssl_set(&con_slot->mysql, opt_ssl_key, opt_ssl_cert, opt_ssl_ca,",
      "5650:     opt_ssl_capath, opt_ssl_cipher);",
      "5651:     mysql_options(&con_slot->mysql, MYSQL_OPT_SSL_CRL, opt_ssl_crl);",
      "5652:     mysql_options(&con_slot->mysql, MYSQL_OPT_SSL_CRLPATH, opt_ssl_crlpath);",
      "5653: #if MYSQL_VERSION_ID >= 50000",
      "5656:     mysql_options(&con_slot->mysql, MYSQL_OPT_SSL_VERIFY_SERVER_CERT,",
      "5657:                   &opt_ssl_verify_server_cert);",
      "5660:   }",
      "",
      "[Added Lines]",
      "5648:   opt_use_ssl= con_ssl;",
      "5650:   if (opt_use_ssl)",
      "5654:   }",
      "5655: #else",
      "5657:   con_ssl = con_ssl ? TRUE : FALSE;",
      "5659:   SSL_SET_OPTIONS(&con_slot->mysql);",
      "5660: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
      "5661:   opt_use_ssl= save_opt_use_ssl;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "8764:     mysql_options(&con->mysql,MYSQL_OPT_PROTOCOL,(char*)&opt_protocol);",
      "8765: #endif",
      "8769:   if (opt_use_ssl)",
      "8770:   {",
      "8777:     opt_ssl_verify_server_cert= opt_host && !strcmp(opt_host, \"localhost\");",
      "8781:   }",
      "8782: #endif",
      "8784: #if defined (_WIN32) && !defined (EMBEDDED_LIBRARY)",
      "8785:   if (shared_memory_base_name)",
      "",
      "[Removed Lines]",
      "8767: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
      "8771:     mysql_ssl_set(&con->mysql, opt_ssl_key, opt_ssl_cert, opt_ssl_ca,",
      "8772:     opt_ssl_capath, opt_ssl_cipher);",
      "8773:     mysql_options(&con->mysql, MYSQL_OPT_SSL_CRL, opt_ssl_crl);",
      "8774:     mysql_options(&con->mysql, MYSQL_OPT_SSL_CRLPATH, opt_ssl_crlpath);",
      "8775: #if MYSQL_VERSION_ID >= 50000",
      "8778:     mysql_options(&con->mysql, MYSQL_OPT_SSL_VERIFY_SERVER_CERT,",
      "8779:                   &opt_ssl_verify_server_cert);",
      "8780: #endif",
      "",
      "[Added Lines]",
      "8770: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
      "8777:   SSL_SET_OPTIONS(&con->mysql);",
      "",
      "---------------"
    ],
    "cmake/mysql_version.cmake||cmake/mysql_version.cmake": [
      "File: cmake/mysql_version.cmake -> cmake/mysql_version.cmake",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #",
      "20: SET(SHARED_LIB_MAJOR_VERSION \"18\")",
      "22: SET(PROTOCOL_VERSION \"10\")",
      "23: SET(DOT_FRM_VERSION \"6\")",
      "",
      "[Removed Lines]",
      "21: SET(SHARED_LIB_MINOR_VERSION \"1\")",
      "",
      "[Added Lines]",
      "21: SET(SHARED_LIB_MINOR_VERSION \"2\")",
      "",
      "---------------"
    ],
    "include/mysql.h||include/mysql.h": [
      "File: include/mysql.h -> include/mysql.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "159:   MYSQL_OPT_CONNECT_ATTR_DELETE,",
      "160:   MYSQL_SERVER_PUBLIC_KEY,",
      "161:   MYSQL_ENABLE_CLEARTEXT_PLUGIN,",
      "163: };",
      "",
      "[Removed Lines]",
      "162:   MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS",
      "",
      "[Added Lines]",
      "162:   MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS,",
      "163:   MYSQL_OPT_SSL_ENFORCE",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "451:           const void *arg);",
      "452: int  STDCALL mysql_options4(MYSQL *mysql,enum mysql_option option,",
      "453:                                        const void *arg1, const void *arg2);",
      "454: void  STDCALL mysql_free_result(MYSQL_RES *result);",
      "455: void  STDCALL mysql_data_seek(MYSQL_RES *result,",
      "456:      my_ulonglong offset);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "455: int             STDCALL mysql_get_option(MYSQL *mysql, enum mysql_option option,",
      "456:                                          const void *arg);",
      "",
      "---------------"
    ],
    "include/mysql.h.pp||include/mysql.h.pp": [
      "File: include/mysql.h.pp -> include/mysql.h.pp",
      "--- Hunk 1 ---",
      "[Context before]",
      "316:   MYSQL_OPT_CONNECT_ATTR_DELETE,",
      "317:   MYSQL_SERVER_PUBLIC_KEY,",
      "318:   MYSQL_ENABLE_CLEARTEXT_PLUGIN,",
      "320: };",
      "321: struct st_mysql_options_extention;",
      "322: struct st_mysql_options {",
      "",
      "[Removed Lines]",
      "319:   MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS",
      "",
      "[Added Lines]",
      "319:   MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS,",
      "320:   MYSQL_OPT_SSL_ENFORCE",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "518:           const void *arg);",
      "519: int mysql_options4(MYSQL *mysql,enum mysql_option option,",
      "520:                                        const void *arg1, const void *arg2);",
      "521: void mysql_free_result(MYSQL_RES *result);",
      "522: void mysql_data_seek(MYSQL_RES *result,",
      "523:      my_ulonglong offset);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "522: int mysql_get_option(MYSQL *mysql, enum mysql_option option,",
      "523:                                          const void *arg);",
      "",
      "---------------"
    ],
    "include/sql_common.h||include/sql_common.h": [
      "File: include/sql_common.h -> include/sql_common.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "67:   char *server_public_key_path;",
      "68:   size_t connection_attributes_length;",
      "69:   my_bool enable_cleartext_plugin;",
      "70: };",
      "72: typedef struct st_mysql_methods",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "71:   my_bool ssl_enforce;",
      "",
      "---------------"
    ],
    "include/sslopt-case.h||include/sslopt-case.h": [
      "File: include/sslopt-case.h -> include/sslopt-case.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
      "20:     case OPT_SSL_KEY:",
      "21:     case OPT_SSL_CERT:",
      "22:     case OPT_SSL_CA:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: #ifdef MYSQL_CLIENT",
      "21:     case OPT_SSL_SSL:",
      "23:         A client side --ssl option handling.",
      "24:         --ssl=1 means enforce (use=1, enforce=1)",
      "25:  --ssl=0 means can't enforce (use=0, enforce=0)",
      "26:  no --ssl means default : no enforce (use=1), just try (enforce=1)",
      "28:       opt_ssl_enforce= opt_use_ssl;",
      "29:       break;",
      "30: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "28:       Enable use of SSL if we are using any ssl option",
      "29:       One can disable SSL later by using --skip-ssl or --ssl=0",
      "33: #ifdef HAVE_YASSL",
      "34:       opt_ssl_crl= NULL;",
      "",
      "[Removed Lines]",
      "31:       opt_use_ssl= 1;",
      "",
      "[Added Lines]",
      "42:       opt_use_ssl= TRUE;",
      "",
      "---------------"
    ],
    "include/sslopt-longopts.h||include/sslopt-longopts.h": [
      "File: include/sslopt-longopts.h -> include/sslopt-longopts.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
      "21:   {\"ssl\", OPT_SSL_SSL,",
      "23:    &opt_use_ssl, &opt_use_ssl, 0, GET_BOOL, OPT_ARG, 0, 0, 0, 0, 0, 0},",
      "24:   {\"ssl-ca\", OPT_SSL_CA,",
      "26:    &opt_ssl_ca, &opt_ssl_ca, 0, GET_STR, REQUIRED_ARG,",
      "27:    0, 0, 0, 0, 0, 0},",
      "28:   {\"ssl-capath\", OPT_SSL_CAPATH,",
      "30:    &opt_ssl_capath, &opt_ssl_capath, 0, GET_STR, REQUIRED_ARG,",
      "31:    0, 0, 0, 0, 0, 0},",
      "33:    &opt_ssl_cert, &opt_ssl_cert, 0, GET_STR, REQUIRED_ARG,",
      "34:    0, 0, 0, 0, 0, 0},",
      "36:    &opt_ssl_cipher, &opt_ssl_cipher, 0, GET_STR, REQUIRED_ARG,",
      "37:    0, 0, 0, 0, 0, 0},",
      "39:    &opt_ssl_key, &opt_ssl_key, 0, GET_STR, REQUIRED_ARG,",
      "40:    0, 0, 0, 0, 0, 0},",
      "42:    &opt_ssl_crl, &opt_ssl_crl, 0, GET_STR, REQUIRED_ARG,",
      "43:    0, 0, 0, 0, 0, 0},",
      "44:   {\"ssl-crlpath\", OPT_SSL_CRLPATH,",
      "46:    &opt_ssl_crlpath, &opt_ssl_crlpath, 0, GET_STR, REQUIRED_ARG,",
      "47:    0, 0, 0, 0, 0, 0},",
      "48: #ifdef MYSQL_CLIENT",
      "",
      "[Removed Lines]",
      "22:    \"Enable SSL for connection (automatically enabled with other flags).\",",
      "25:    \"CA file in PEM format (check OpenSSL docs, implies --ssl).\",",
      "29:    \"CA directory (check OpenSSL docs, implies --ssl).\",",
      "32:   {\"ssl-cert\", OPT_SSL_CERT, \"X509 cert in PEM format (implies --ssl).\",",
      "35:   {\"ssl-cipher\", OPT_SSL_CIPHER, \"SSL cipher to use (implies --ssl).\",",
      "38:   {\"ssl-key\", OPT_SSL_KEY, \"X509 key in PEM format (implies --ssl).\",",
      "41:   {\"ssl-crl\", OPT_SSL_CRL, \"Certificate revocation list (implies --ssl).\",",
      "45:     \"Certificate revocation list path (implies --ssl).\",",
      "",
      "[Added Lines]",
      "22:    \"If set to ON, this option enforces that SSL is established before client \"",
      "23:    \"attempts to authenticate to the server. To disable client SSL capabilities \"",
      "24:    \"use --ssl=OFF.\",",
      "27:    \"CA file in PEM format.\",",
      "31:    \"CA directory.\",",
      "34:   {\"ssl-cert\", OPT_SSL_CERT, \"X509 cert in PEM format.\",",
      "37:   {\"ssl-cipher\", OPT_SSL_CIPHER, \"SSL cipher to use.\",",
      "40:   {\"ssl-key\", OPT_SSL_KEY, \"X509 key in PEM format.\",",
      "43:   {\"ssl-crl\", OPT_SSL_CRL, \"Certificate revocation list.\",",
      "47:     \"Certificate revocation list path.\",",
      "",
      "---------------"
    ],
    "include/sslopt-vars.h||include/sslopt-vars.h": [
      "File: include/sslopt-vars.h -> include/sslopt-vars.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
      "21: static char *opt_ssl_ca      = 0;",
      "22: static char *opt_ssl_capath  = 0;",
      "23: static char *opt_ssl_cert    = 0;",
      "",
      "[Removed Lines]",
      "20: static my_bool opt_use_ssl   = 0;",
      "",
      "[Added Lines]",
      "21: static my_bool opt_use_ssl   = TRUE;",
      "23: static my_bool opt_ssl_enforce= FALSE;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25: static char *opt_ssl_key     = 0;",
      "26: static char *opt_ssl_crl     = 0;",
      "27: static char *opt_ssl_crlpath = 0;",
      "30: #endif",
      "31: #endif",
      "",
      "[Removed Lines]",
      "28: #ifdef MYSQL_CLIENT",
      "29: static my_bool opt_ssl_verify_server_cert= 0;",
      "",
      "[Added Lines]",
      "31: #ifndef MYSQL_CLIENT",
      "32: #error This header is supposed to be used only in the client",
      "34: #define SSL_SET_OPTIONS(mysql) \\",
      "35:   if (opt_use_ssl) \\",
      "36:   { \\",
      "37:     mysql_ssl_set(mysql, opt_ssl_key, opt_ssl_cert, opt_ssl_ca, \\",
      "38:       opt_ssl_capath, opt_ssl_cipher); \\",
      "39:     mysql_options(mysql, MYSQL_OPT_SSL_CRL, opt_ssl_crl); \\",
      "40:     mysql_options(mysql, MYSQL_OPT_SSL_CRLPATH, opt_ssl_crlpath); \\",
      "41:     mysql_options(mysql, MYSQL_OPT_SSL_ENFORCE, &opt_ssl_enforce); \\",
      "42:   } \\",
      "43:   mysql_options(mysql, MYSQL_OPT_SSL_VERIFY_SERVER_CERT, \\",
      "44:     (char*)&opt_ssl_verify_server_cert)",
      "46: static my_bool opt_ssl_verify_server_cert= 0;",
      "47: #else",
      "48: #define SSL_SET_OPTIONS(mysql) do { } while(0)",
      "",
      "---------------"
    ],
    "mysql-test/r/mysql_ssl.result||mysql-test/r/mysql_ssl.result": [
      "File: mysql-test/r/mysql_ssl.result -> mysql-test/r/mysql_ssl.result",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #",
      "2: # WL#6791 Redefine client --ssl option to imply enforced encryption",
      "3: #",
      "4: # verify that --ssl makes SSL required against a no-ssl server",
      "5: End of 5.7 tests",
      "",
      "---------------"
    ],
    "mysql-test/r/plugin_auth_sha256_server_default_tls.result||mysql-test/r/plugin_auth_sha256_server_default_tls.result": [
      "File: mysql-test/r/plugin_auth_sha256_server_default_tls.result -> mysql-test/r/plugin_auth_sha256_server_default_tls.result",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: USER() CURRENT_USER()",
      "28: kristofer2@localhost kristofer2@localhost",
      "36: user() current_user()",
      "37: kristofer@localhost kristofer@localhost",
      "",
      "[Removed Lines]",
      "30: #### Test is disabled because it requires RSA-keys and this only works",
      "31: #### with OpenSSL. The reason is that the current client library",
      "32: #### framework can't know if SSL was attempted or not when the default",
      "33: #### client auth is switched and hence it will only report that the",
      "34: #### connection is unencrypted.",
      "",
      "[Added Lines]",
      "30: user() current_user()",
      "31: kristofer@localhost kristofer@localhost",
      "",
      "---------------"
    ],
    "mysql-test/r/ssl_cipher.result||mysql-test/r/ssl_cipher.result": [
      "File: mysql-test/r/ssl_cipher.result -> mysql-test/r/ssl_cipher.result",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #",
      "2: # BUG#11760210 - SSL_CIPHER_LIST NOT SET OR RETURNED FOR \"SHOW STATUS LIKE 'SSL_CIPHER_LIST'\"",
      "3: #",
      "5: Variable_name Value",
      "6: Ssl_cipher AES128-SHA",
      "8: Variable_name Value",
      "9: Ssl_cipher_list AES128-SHA",
      "",
      "[Removed Lines]",
      "4: SHOW STATUS LIKE 'Ssl_cipher';",
      "7: SHOW STATUS LIKE 'Ssl_cipher_list';",
      "",
      "[Added Lines]",
      "4: # must return AES128-SHA",
      "9: # must fail since the default SSL cipher is not compatible",
      "",
      "---------------"
    ],
    "mysql-test/t/mysql_ssl-master.opt||mysql-test/t/mysql_ssl-master.opt": [
      "File: mysql-test/t/mysql_ssl-master.opt -> mysql-test/t/mysql_ssl-master.opt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: --skip-ssl",
      "",
      "---------------"
    ],
    "mysql-test/t/mysql_ssl.test||mysql-test/t/mysql_ssl.test": [
      "File: mysql-test/t/mysql_ssl.test -> mysql-test/t/mysql_ssl.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #Want to skip this test from daily Valgrind execution",
      "2: --source include/no_valgrind_without_big.inc",
      "4: # This test should work in embedded server after we fix mysqltest",
      "5: -- source include/not_embedded.inc",
      "7: # Save the initial number of concurrent sessions",
      "8: --source include/count_sessions.inc",
      "10: --echo #",
      "11: --echo # WL#6791 Redefine client --ssl option to imply enforced encryption",
      "12: --echo #",
      "14: --echo # verify that --ssl makes SSL required against a no-ssl server",
      "15: --error 1",
      "16: --exec $MYSQL --ssl -e \"SHOW STATUS like 'Ssl_cipher'\"",
      "19: --echo End of 5.7 tests",
      "22: # Wait till all disconnects are completed",
      "23: --source include/wait_until_count_sessions.inc",
      "25: ##  This test file is for testing encrypted communication only, not other",
      "26: ##  encryption routines that the SSL library happens to provide!",
      "",
      "---------------"
    ],
    "mysql-test/t/plugin_auth_sha256_server_default_tls.test||mysql-test/t/plugin_auth_sha256_server_default_tls.test": [
      "File: mysql-test/t/plugin_auth_sha256_server_default_tls.test -> mysql-test/t/plugin_auth_sha256_server_default_tls.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "36: connection default;",
      "37: disconnect con2;",
      "38: --echo **** Client default_auth=sha_256_password and server default auth=sha256_password",
      "45: --echo **** Client default_auth=native and server default auth=sha256_password",
      "46: --exec $MYSQL -ukristofer -psecret2 --default_auth=mysql_native_password --ssl-ca=$MYSQL_TEST_DIR/std_data/cacert.pem --ssl-key=$MYSQL_TEST_DIR/std_data/client-key.pem --ssl-cert=$MYSQL_TEST_DIR/std_data/client-cert.pem -e \"select user(), current_user()\"",
      "",
      "[Removed Lines]",
      "39: --echo #### Test is disabled because it requires RSA-keys and this only works",
      "40: --echo #### with OpenSSL. The reason is that the current client library",
      "41: --echo #### framework can't know if SSL was attempted or not when the default",
      "42: --echo #### client auth is switched and hence it will only report that the",
      "43: --echo #### connection is unencrypted.",
      "44: # --exec xterm -e gdb --args $MYSQL -ukristofer -psecret2 --default_auth=sha256_password --ssl-ca=$MYSQL_TEST_DIR/std_data/cacert.pem --ssl-key=$MYSQL_TEST_DIR/std_data/client-key.pem --ssl-cert=$MYSQL_TEST_DIR/std_data/client-cert.pem -e \"select user(), current_user()\"",
      "",
      "[Added Lines]",
      "39: # Why using sha256_password requires --ssl=1 ?",
      "40: # The current client library can't know if SSL was attempted or not",
      "41: # when the default client auth is switched and hence it will only report",
      "42: # that the connection is unencrypted forcing the client to ask for RSA keys.",
      "43: # However, it is possible to inform the client library to enforce SSL using",
      "44: # MYSQL_OPT_ENFORCE_SSL (or --ssl=1) and this will be enough for the",
      "45: # sha256_password plugin to safely assume a secure connection despite it hasn't",
      "46: # really been established yet.",
      "47: --exec $MYSQL -ukristofer -psecret2 --default_auth=sha256_password --ssl-ca=$MYSQL_TEST_DIR/std_data/cacert.pem --ssl-key=$MYSQL_TEST_DIR/std_data/client-key.pem --ssl-cert=$MYSQL_TEST_DIR/std_data/client-cert.pem --ssl -e \"select user(), current_user()\"",
      "",
      "---------------"
    ],
    "mysql-test/t/ssl_cipher.test||mysql-test/t/ssl_cipher.test": [
      "File: mysql-test/t/ssl_cipher.test -> mysql-test/t/ssl_cipher.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: #but needs to be kept for tests that would need MyISAM in future.",
      "4: --source include/force_myisam_default.inc",
      "6: # Turn on ssl between the client and server",
      "7: # and run a number of tests",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: --source include/not_embedded.inc",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "15: # Save the initial number of concurrent sessions",
      "16: --source include/count_sessions.inc",
      "27: # Wait till all disconnects are completed",
      "28: --source include/wait_until_count_sessions.inc",
      "",
      "[Removed Lines]",
      "18: connect (ssl_con,localhost,root,,,,,SSL);",
      "20: # Check Cipher Name and Cipher List",
      "21: SHOW STATUS LIKE 'Ssl_cipher';",
      "22: SHOW STATUS LIKE 'Ssl_cipher_list';",
      "24: connection default;",
      "25: disconnect ssl_con;",
      "",
      "[Added Lines]",
      "20: --echo # must return AES128-SHA",
      "21: # need to use mysql since mysqltest doesn't support --ssl-cipher",
      "22: --exec $MYSQL --host=localhost -e \"SHOW STATUS LIKE 'Ssl_cipher'; SHOW STATUS LIKE 'Ssl_cipher_list'\" --ssl --ssl-cipher=AES128-SHA",
      "25: --echo # must fail since the default SSL cipher is not compatible",
      "26: --error 1",
      "27: --exec $MYSQL --host=localhost -e \"SHOW STATUS LIKE 'Ssl_cipher'; SHOW STATUS LIKE 'Ssl_cipher_list'\" --ssl",
      "",
      "---------------"
    ],
    "sql-common/client.c||sql-common/client.c": [
      "File: sql-common/client.c -> sql-common/client.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "148: uint  mysql_port=0;",
      "149: char  *mysql_unix_port= 0;",
      "150: const char *unknown_sqlstate= \"HY000\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148: const char      *default_ssl_cipher= \"DHE-RSA-AES256-SHA\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1248:                   (STR), MYF(MY_WME)) : NULL;                    \\",
      "1249:     } while (0)",
      "1253:     if (mysql->options.opt_var) \\",
      "1254:       my_free(mysql->options.opt_var); \\",
      "1256:     if (mysql->options.opt_var) \\",
      "1258: #define EXTENSION_SET_SSL_STRING(OPTS, X, STR) \\",
      "1259:     EXTENSION_SET_STRING(OPTS, X, STR); \\",
      "1260:     if ((OPTS)->extension->X) \\",
      "1264: #else",
      "1265: #define SET_SSL_OPTION(opt_var,arg) \\",
      "1266:     do { \\",
      "",
      "[Removed Lines]",
      "1251: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
      "1252: #define SET_SSL_OPTION(opt_var,arg) \\",
      "1255:     mysql->options.opt_var= arg ? my_strdup(key_memory_mysql_options, arg, MYF(MY_WME)) : NULL; \\",
      "1257:       mysql->options.use_ssl= 1",
      "1261:       (OPTS)->use_ssl= 1",
      "",
      "[Added Lines]",
      "1252: #define SET_OPTION(opt_var,arg) \\",
      "1253:   do { \\",
      "1256:     mysql->options.opt_var = arg ? my_strdup(key_memory_mysql_options, arg, MYF(MY_WME)) : NULL; \\",
      "1257:   } while (0)",
      "1260: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
      "1261: #define SET_SSL_OPTION(opt_var,arg) \\",
      "1262:   do { \\",
      "1263:     SET_OPTION(opt_var, arg); \\",
      "1265:       mysql->options.use_ssl = TRUE; \\",
      "1266:   } while (0)",
      "1269:   do { \\",
      "1272:       (OPTS)->use_ssl = TRUE; \\",
      "1273:   } while (0)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2808:     mysql->client_flag|= CLIENT_MULTI_RESULTS;",
      "2810: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
      "2811:   if (mysql->options.ssl_key || mysql->options.ssl_cert ||",
      "2812:       mysql->options.ssl_ca || mysql->options.ssl_capath ||",
      "2813:       mysql->options.ssl_cipher ||",
      "2817:   if (mysql->options.use_ssl)",
      "2820:   if (mpvio->db)",
      "2821:     mysql->client_flag|= CLIENT_CONNECT_WITH_DB;",
      "",
      "[Removed Lines]",
      "2814:       (mysql->options.extension && mysql->options.extension->ssl_crl) ||",
      "2815:       (mysql->options.extension && mysql->options.extension->ssl_crlpath))",
      "2816:     mysql->options.use_ssl= 1;",
      "2818:     mysql->client_flag|= CLIENT_SSL;",
      "",
      "[Added Lines]",
      "2825:       (mysql->options.extension && mysql->options.extension->ssl_crl) ||",
      "2826:       (mysql->options.extension && mysql->options.extension->ssl_crlpath) ||",
      "2827:       (mysql->options.extension && mysql->options.extension->ssl_enforce))",
      "2828:     mysql->options.use_ssl = TRUE;",
      "2830:     mysql->client_flag |= CLIENT_SSL;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2847:     end= buff+5;",
      "2848:   }",
      "2849: #ifdef HAVE_OPENSSL",
      "2851:   {",
      "2853:     struct st_mysql_options *options= &mysql->options;",
      "",
      "[Removed Lines]",
      "2850:   if (mysql->client_flag & CLIENT_SSL)",
      "",
      "[Added Lines]",
      "2863:   if (mysql->options.extension && mysql->options.extension->ssl_enforce)",
      "2864:   {",
      "2866:       ssl_enforce=1 means enforce ssl",
      "2867:       Don't fallback on unencrypted connection.",
      "2870:     DBUG_ASSERT(mysql->options.use_ssl);",
      "2872:     if (!(mysql->server_capabilities & CLIENT_SSL))",
      "2873:     {",
      "2874:       set_mysql_extended_error(mysql, CR_SSL_CONNECTION_ERROR, unknown_sqlstate,",
      "2875:                                ER(CR_SSL_CONNECTION_ERROR),",
      "2876:                                \"SSL is required but the server doesn't \"",
      "2877:                                \"support it\"",
      "2878:                                );",
      "2879:       goto error;",
      "2880:     }",
      "2881:   }",
      "2885:    use_ssl=0 => Disable ssl and connect using unencrypted channel if server",
      "2886:      allows it",
      "2888:    use_ssl=1, ssl_enforce=0 (default) => attempt ssl connection if possible but",
      "2889:      fallback on unencrypted connection if possible.",
      "2892:   if ((mysql->server_capabilities & CLIENT_SSL) && mysql->options.use_ssl)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2856:     const char *cert_error;",
      "2857:     unsigned long ssl_error;",
      "2860:       Send mysql->client_flag, max_packet_size - unencrypted otherwise",
      "2861:       the server does not know we want to do SSL",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2901:     if (!mysql->options.ssl_cipher)",
      "2902:     {",
      "2903:       SET_OPTION(ssl_cipher, default_ssl_cipher);",
      "2904:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4728:   case MYSQL_OPT_SSL_CRLPATH:  EXTENSION_SET_SSL_STRING(&mysql->options,",
      "4729:                                                         ssl_crlpath, arg);",
      "4730:                                break;",
      "4731:   case MYSQL_SERVER_PUBLIC_KEY:",
      "4732:     EXTENSION_SET_STRING(&mysql->options, server_public_key_path, arg);",
      "4733:     break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4779:   case MYSQL_OPT_SSL_ENFORCE:  ENSURE_EXTENSIONS_PRESENT(&mysql->options);",
      "4780:                         mysql->options.extension->ssl_enforce=",
      "4781:      (*(my_bool *) arg) ? TRUE : FALSE;",
      "4782:                                mysql->options.use_ssl= TRUE;",
      "4783:                                break;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "4788: }",
      "4792:   A function to return the key from a connection attribute",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4845:   Return the current values for the options settable through mysql_options()",
      "4847:   Returns the current values for all of the connection options.",
      "4848:   Callers should not manipulate the returned data !",
      "4849:   Data are valid at the time of returning them until the next C API CALL",
      "4850:   arg should always be a pointer to a variable of the appropriate type.",
      "4851:   type of variable, based on the parameter:",
      "4853:   uint",
      "4854:     MYSQL_OPT_CONNECT_TIMEOUT, MYSQL_OPT_READ_TIMEOUT, MYSQL_OPT_WRITE_TIMEOUT,",
      "4855:     MYSQL_OPT_PROTOCOL",
      "4857:   my_bool",
      "4858:     MYSQL_OPT_COMPRESS, MYSQL_OPT_LOCAL_INFILE, MYSQL_OPT_USE_REMOTE_CONNECTION,",
      "4859:     MYSQL_OPT_USE_EMBEDDED_CONNECTION, MYSQL_OPT_GUESS_CONNECTION,",
      "4860:     MYSQL_SECURE_AUTH, MYSQL_REPORT_DATA_TRUNCATION, MYSQL_OPT_RECONNECT,",
      "4861:     MYSQL_OPT_SSL_VERIFY_SERVER_CERT, MYSQL_OPT_SSL_ENFORCE,",
      "4862:     MYSQL_ENABLE_CLEARTEXT_PLUGIN, MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS",
      "4864:   const char *",
      "4865:     MYSQL_READ_DEFAULT_FILE, MYSQL_READ_DEFAULT_GROUP,",
      "4866:     MYSQL_SET_CHARSET_DIR, MYSQL_SET_CHARSET_NAME, MYSQL_SHARED_MEMORY_BASE_NAME,",
      "4867:     MYSQL_SET_CLIENT_IP, MYSQL_OPT_BIND, MYSQL_PLUGIN_DIR, MYSQL_DEFAULT_AUTH,",
      "4868:     MYSQL_OPT_SSL_KEY, MYSQL_OPT_SSL_CERT, MYSQL_OPT_SSL_CA, MYSQL_OPT_SSL_CAPATH,",
      "4869:     MYSQL_OPT_SSL_CIPHER, MYSQL_OPT_SSL_CRL, MYSQL_OPT_SSL_CRLPATH,",
      "4870:     MYSQL_SERVER_PUBLIC_KEY",
      "4872:   <none, error returned>",
      "4873:     MYSQL_OPT_NAMED_PIPE, MYSQL_OPT_CONNECT_ATTR_RESET,",
      "4874:     MYSQL_OPT_CONNECT_ATTR_DELETE, MYSQL_INIT_COMMAND",
      "4876:   @param      mysql       The MYSQL connection to operate on",
      "4877:   @param      option      The option to return the value for",
      "4878:   @param  out arg         Must be non-null. Receives the current value.",
      "4879:   @return status",
      "4880:   @retval 0 SUCCESS",
      "4883: int STDCALL",
      "4884: mysql_get_option(MYSQL *mysql, enum mysql_option option, const void *arg)",
      "4885: {",
      "4886:   DBUG_ENTER(\"mysql_option\");",
      "4887:   DBUG_PRINT(\"enter\", (\"option: %d\", (int)option));",
      "4889:   if (!arg)",
      "4890:     DBUG_RETURN(1);",
      "4892:   switch (option) {",
      "4893:   case MYSQL_OPT_CONNECT_TIMEOUT:",
      "4895:     break;",
      "4896:   case MYSQL_OPT_READ_TIMEOUT:",
      "4898:     break;",
      "4899:   case MYSQL_OPT_WRITE_TIMEOUT:",
      "4901:     break;",
      "4902:   case MYSQL_OPT_COMPRESS:",
      "4904:     break;",
      "4907:                     TRUE : FALSE;",
      "4908:     break;",
      "4909:   case MYSQL_READ_DEFAULT_FILE:",
      "4911:     break;",
      "4912:   case MYSQL_READ_DEFAULT_GROUP:",
      "4914:     break;",
      "4915:   case MYSQL_SET_CHARSET_DIR:",
      "4917:     break;",
      "4918:   case MYSQL_SET_CHARSET_NAME:",
      "4920:     break;",
      "4921:   case MYSQL_OPT_PROTOCOL:",
      "4923:     break;",
      "4924:   case MYSQL_SHARED_MEMORY_BASE_NAME:",
      "4925: #if defined (_WIN32) && !defined (EMBEDDED_LIBRARY)",
      "4927: #else",
      "4929: #endif",
      "4930:     break;",
      "4931:   case MYSQL_OPT_USE_REMOTE_CONNECTION:",
      "4933:       (mysql->options.methods_to_use == MYSQL_OPT_USE_REMOTE_CONNECTION) ?",
      "4934:                                         TRUE : FALSE;",
      "4935:     break;",
      "4936:   case MYSQL_OPT_USE_EMBEDDED_CONNECTION:",
      "4938:       (mysql->options.methods_to_use == MYSQL_OPT_USE_EMBEDDED_CONNECTION) ?",
      "4939:     TRUE : FALSE;",
      "4940:     break;",
      "4941:   case MYSQL_OPT_GUESS_CONNECTION:",
      "4943:       (mysql->options.methods_to_use == MYSQL_OPT_GUESS_CONNECTION) ?",
      "4944:     TRUE : FALSE;",
      "4945:     break;",
      "4946:   case MYSQL_SET_CLIENT_IP:",
      "4948:     break;",
      "4949:   case MYSQL_SECURE_AUTH:",
      "4951:     break;",
      "4952:   case MYSQL_REPORT_DATA_TRUNCATION:",
      "4954:     break;",
      "4955:   case MYSQL_OPT_RECONNECT:",
      "4957:     break;",
      "4958:   case MYSQL_OPT_BIND:",
      "4960:     break;",
      "4961:   case MYSQL_OPT_SSL_VERIFY_SERVER_CERT:",
      "4963:                          CLIENT_SSL_VERIFY_SERVER_CERT) ? TRUE : FALSE;",
      "4964:     break;",
      "4965:   case MYSQL_PLUGIN_DIR:",
      "4967:                      mysql->options.extension->plugin_dir : NULL;",
      "4968:     break;",
      "4969:   case MYSQL_DEFAULT_AUTH:",
      "4971:                      mysql->options.extension->default_auth : NULL;",
      "4972:     break;",
      "4973:   case MYSQL_OPT_SSL_KEY:",
      "4975:     break;",
      "4976:   case MYSQL_OPT_SSL_CERT:",
      "4978:     break;",
      "4979:   case MYSQL_OPT_SSL_CA:",
      "4981:     break;",
      "4982:   case MYSQL_OPT_SSL_CAPATH:",
      "4984:     break;",
      "4985:   case MYSQL_OPT_SSL_CIPHER:",
      "4987:     break;",
      "4988:   case MYSQL_OPT_SSL_CRL:",
      "4990:                      mysql->options.extension->ssl_crl : NULL;",
      "4991:     break;",
      "4992:   case MYSQL_OPT_SSL_CRLPATH:",
      "4994:                      mysql->options.extension->ssl_crlpath : NULL;",
      "4995:     break;",
      "4996:   case MYSQL_OPT_SSL_ENFORCE:",
      "4998:                         mysql->options.extension->ssl_enforce) ? TRUE : FALSE;",
      "4999:     break;",
      "5000:   case MYSQL_SERVER_PUBLIC_KEY:",
      "5002:                      mysql->options.extension->server_public_key_path : NULL;",
      "5003:     break;",
      "5004:   case MYSQL_ENABLE_CLEARTEXT_PLUGIN:",
      "5006:                         mysql->options.extension->enable_cleartext_plugin) ?",
      "5007:    TRUE : FALSE;",
      "5008:     break;",
      "5009:   case MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS:",
      "5011:                        CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS) ? TRUE : FALSE;",
      "5012:     break;",
      "5018:   default:",
      "5019:     DBUG_RETURN(1);",
      "5020:   }",
      "5021:   DBUG_RETURN(0);",
      "5022: }",
      "",
      "---------------"
    ],
    "sql-common/client_authentication.cc||sql-common/client_authentication.cc": [
      "File: sql-common/client_authentication.cc -> sql-common/client_authentication.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "145:   bool connection_is_secure= false;",
      "146:   unsigned char scramble_pkt[20];",
      "147:   unsigned char *pkt;",
      "150:   DBUG_ENTER(\"sha256_password_auth_client\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148:   my_bool ssl_enforce= FALSE;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "165:   memcpy(scramble_pkt, pkt, SCRAMBLE_LENGTH);",
      "167:   if (mysql_get_ssl_cipher(mysql) != NULL)",
      "168:     connection_is_secure= true;",
      "171:   if (!connection_is_secure)",
      "172:   {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "168:   if (mysql_get_option(mysql, MYSQL_OPT_SSL_ENFORCE, &ssl_enforce))",
      "169:     ssl_enforce= FALSE;",
      "174:     If set to the default plugin, then the client and server haven't",
      "175:     attempted a SSL connection yet and there is no way of knowing if this will",
      "176:     be successful later on when encryption is needed.",
      "178:     The only way to be sure that SSL will be established is to check if the",
      "179:     client enforce SSL.",
      "181:     If MYSQL_OPT_ENFORCE_SSL flag isn't set then SSL might be established but",
      "182:     the client will still expect RSA keys from the server and fail if those",
      "183:     aren't available.",
      "185:   else if (ssl_enforce)",
      "186:     connection_is_secure= true; // Safely assume connection will be encrypted",
      "",
      "---------------"
    ],
    "sql/rpl_slave.cc||sql/rpl_slave.cc": [
      "File: sql/rpl_slave.cc -> sql/rpl_slave.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "6966: #ifdef HAVE_OPENSSL",
      "6967:   if (mi->ssl)",
      "6968:   {",
      "6969:     mysql_ssl_set(mysql,",
      "6970:                   mi->ssl_key[0]?mi->ssl_key:0,",
      "6971:                   mi->ssl_cert[0]?mi->ssl_cert:0,",
      "6972:                   mi->ssl_ca[0]?mi->ssl_ca:0,",
      "6973:                   mi->ssl_capath[0]?mi->ssl_capath:0,",
      "6974:                   mi->ssl_cipher[0]?mi->ssl_cipher:0);",
      "6976:                   mi->ssl_crl[0] ? mi->ssl_crl : 0);",
      "6978:                   mi->ssl_crlpath[0] ? mi->ssl_crlpath : 0);",
      "6979:     mysql_options(mysql, MYSQL_OPT_SSL_VERIFY_SERVER_CERT,",
      "6980:                   &mi->ssl_verify_server_cert);",
      "6981:   }",
      "6982: #endif",
      "",
      "[Removed Lines]",
      "6975:     mysql_options(mysql, MYSQL_OPT_SSL_CRL,",
      "6977:     mysql_options(mysql, MYSQL_OPT_SSL_CRLPATH,",
      "",
      "[Added Lines]",
      "6969:     const static my_bool ssl_enforce_true= TRUE;",
      "6976:     mysql_options(mysql, MYSQL_OPT_SSL_CRL,",
      "6978:     mysql_options(mysql, MYSQL_OPT_SSL_CRLPATH,",
      "6983:     mysql_options(mysql, MYSQL_OPT_SSL_ENFORCE, &ssl_enforce_true);",
      "",
      "---------------"
    ],
    "tests/mysql_client_test.c||tests/mysql_client_test.c": [
      "File: tests/mysql_client_test.c -> tests/mysql_client_test.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "19514:   mysql_stmt_close(stmt);",
      "19515: }",
      "19517: static struct my_tests_st my_tests[]= {",
      "19518:   { \"disable_query_logs\", disable_query_logs },",
      "19519:   { \"test_view_sp_list_fields\", test_view_sp_list_fields },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19518: static void test_wl6791()",
      "19519: {",
      "19520:   int        rc;",
      "19521:   uint       idx;",
      "19522:   MYSQL      *l_mysql;",
      "19523:   enum mysql_option",
      "19524:   uint_opts[] = {",
      "19525:     MYSQL_OPT_CONNECT_TIMEOUT, MYSQL_OPT_READ_TIMEOUT, MYSQL_OPT_WRITE_TIMEOUT,",
      "19526:     MYSQL_OPT_PROTOCOL, MYSQL_OPT_LOCAL_INFILE",
      "19527:   },",
      "19528:   my_bool_opts[] = {",
      "19529:     MYSQL_OPT_COMPRESS, MYSQL_OPT_USE_REMOTE_CONNECTION,",
      "19530:     MYSQL_OPT_USE_EMBEDDED_CONNECTION, MYSQL_OPT_GUESS_CONNECTION,",
      "19531:     MYSQL_SECURE_AUTH, MYSQL_REPORT_DATA_TRUNCATION, MYSQL_OPT_RECONNECT,",
      "19532:     MYSQL_OPT_SSL_VERIFY_SERVER_CERT, MYSQL_OPT_SSL_ENFORCE,",
      "19533:     MYSQL_ENABLE_CLEARTEXT_PLUGIN, MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS",
      "19534:   },",
      "19535:   const_char_opts[] = {",
      "19536:     MYSQL_READ_DEFAULT_FILE, MYSQL_READ_DEFAULT_GROUP,",
      "19537:     MYSQL_SET_CHARSET_DIR, MYSQL_SET_CHARSET_NAME,",
      "19538: #if defined (_WIN32) && !defined (EMBEDDED_LIBRARY)",
      "19540:     MYSQL_SHARED_MEMORY_BASE_NAME,",
      "19541: #endif",
      "19542:     MYSQL_SET_CLIENT_IP, MYSQL_OPT_BIND, MYSQL_PLUGIN_DIR, MYSQL_DEFAULT_AUTH,",
      "19543:     MYSQL_OPT_SSL_KEY, MYSQL_OPT_SSL_CERT, MYSQL_OPT_SSL_CA, MYSQL_OPT_SSL_CAPATH,",
      "19544:     MYSQL_OPT_SSL_CIPHER, MYSQL_OPT_SSL_CRL, MYSQL_OPT_SSL_CRLPATH,",
      "19545:     MYSQL_SERVER_PUBLIC_KEY",
      "19546:   },",
      "19547:   err_opts[] = {",
      "19548:     MYSQL_OPT_NAMED_PIPE, MYSQL_OPT_CONNECT_ATTR_RESET,",
      "19549:     MYSQL_OPT_CONNECT_ATTR_DELETE, MYSQL_INIT_COMMAND",
      "19550:   };",
      "19552:   myheader(\"test_wl6791\");",
      "19555:   l_mysql = mysql_client_init(NULL);",
      "19556:   DIE_UNLESS(l_mysql != NULL);",
      "19558:   for (idx= 0; idx < sizeof(uint_opts) / sizeof(enum mysql_option); idx++)",
      "19559:   {",
      "19560:     uint opt_before= 1, opt_after= 0;",
      "19562:     if (!opt_silent)",
      "19563:       fprintf(stdout, \"testing uint option #%d (%d)\\n\", idx,",
      "19564:               (int) uint_opts[idx]);",
      "19565:     rc= mysql_options(l_mysql, uint_opts[idx], &opt_before);",
      "19566:     DIE_UNLESS(rc == 0);",
      "19568:     rc = mysql_get_option(l_mysql, uint_opts[idx], &opt_after);",
      "19569:     DIE_UNLESS(rc == 0);",
      "19571:     DIE_UNLESS(opt_before == opt_after);",
      "19572:   }",
      "19574:   for (idx= 0; idx < sizeof(my_bool_opts) / sizeof(enum mysql_option); idx++)",
      "19575:   {",
      "19576:     my_bool opt_before = TRUE, opt_after = FALSE;",
      "19578:     if (!opt_silent)",
      "19579:       fprintf(stdout, \"testing my_bool option #%d (%d)\\n\", idx,",
      "19580:       (int)my_bool_opts[idx]);",
      "19582:     rc = mysql_options(l_mysql, my_bool_opts[idx], &opt_before);",
      "19583:     DIE_UNLESS(rc == 0);",
      "19585:     rc = mysql_get_option(l_mysql, my_bool_opts[idx], &opt_after);",
      "19586:     DIE_UNLESS(rc == 0);",
      "19588:     DIE_UNLESS(opt_before == opt_after);",
      "19589:   }",
      "19591:   for (idx= 0; idx < sizeof(const_char_opts) / sizeof(enum mysql_option); idx++)",
      "19592:   {",
      "19593:     const char *opt_before = \"TEST\", *opt_after = NULL;",
      "19595:     if (!opt_silent)",
      "19596:       fprintf(stdout, \"testing const char * option #%d (%d)\\n\", idx,",
      "19597:       (int)const_char_opts[idx]);",
      "19599:     rc = mysql_options(l_mysql, const_char_opts[idx], opt_before);",
      "19600:     DIE_UNLESS(rc == 0);",
      "19602:     rc = mysql_get_option(l_mysql, const_char_opts[idx], &opt_after);",
      "19603:     DIE_UNLESS(rc == 0);",
      "19605:     DIE_UNLESS(opt_before && opt_after &&",
      "19606:                0 == strcmp(opt_before, opt_after));",
      "19607:   }",
      "19609:   for (idx= 0; idx < sizeof(err_opts) / sizeof(enum mysql_option); idx++)",
      "19610:   {",
      "19611:     void *dummy_arg;",
      "19612:     if (!opt_silent)",
      "19613:       fprintf(stdout, \"testing invalid option #%d (%d)\\n\", idx,",
      "19614:       (int)err_opts[idx]);",
      "19616:     rc = mysql_get_option(l_mysql, err_opts[idx], &dummy_arg);",
      "19617:     DIE_UNLESS(rc != 0);",
      "19618:   }",
      "19621:   mysql_close(l_mysql);",
      "19622: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19785:   { \"test_wl6587\", test_wl6587 },",
      "19786:   { \"test_wl5928\", test_wl5928 },",
      "19787:   { \"test_wl6797\", test_wl6797 },",
      "19788:   { 0, 0 }",
      "19789: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19896:   { \"test_wl6791\", test_wl6791 },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0a6eef9795bbaca7f4f14e45ac96ea1e82884a1b",
      "candidate_info": {
        "commit_hash": "0a6eef9795bbaca7f4f14e45ac96ea1e82884a1b",
        "repo": "mysql/mysql-server",
        "commit_url": "https://github.com/mysql/mysql-server/commit/0a6eef9795bbaca7f4f14e45ac96ea1e82884a1b",
        "files": [
          "client/CMakeLists.txt",
          "client/mysql_secure_installation.cc",
          "mysql-test/mysql-test-run.pl",
          "scripts/CMakeLists.txt",
          "scripts/mysql_secure_installation.pl.in",
          "scripts/mysql_secure_installation.sh",
          "scripts/mysql_system_tables_data.sql"
        ],
        "message": "WL#6441 Convert mysql_secure_installation         script to C\n\nmysql_secure_installation script currently\nstores the user supplied password in a temporary\noption file. This option file is later passed to\nmysql client, which executes the required SQL\ncommands.\n\nSince, storing password in an option file is\nconsidered insecure, the script can be converted\nto a C++ program so that the program can connect\nto the server directly and execute the specified\ncommands using C API (libmysql).",
        "before_after_code_files": [
          "client/mysql_secure_installation.cc||client/mysql_secure_installation.cc",
          "mysql-test/mysql-test-run.pl||mysql-test/mysql-test-run.pl",
          "scripts/mysql_secure_installation.pl.in||scripts/mysql_secure_installation.pl.in",
          "scripts/mysql_secure_installation.sh||scripts/mysql_secure_installation.sh",
          "scripts/mysql_system_tables_data.sql||scripts/mysql_system_tables_data.sql"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "client/mysql_secure_installation.cc||client/mysql_secure_installation.cc"
          ],
          "candidate": [
            "client/mysql_secure_installation.cc||client/mysql_secure_installation.cc"
          ]
        }
      },
      "candidate_diff": {
        "client/mysql_secure_installation.cc||client/mysql_secure_installation.cc": [
          "File: client/mysql_secure_installation.cc -> client/mysql_secure_installation.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:    Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.",
          "4:    This program is free software; you can redistribute it and/or modify",
          "5:    it under the terms of the GNU General Public License as published by",
          "6:    the Free Software Foundation; version 2 of the License.",
          "8:    This program is distributed in the hope that it will be useful,",
          "9:    but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "10:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "11:    GNU General Public License for more details.",
          "13:    You should have received a copy of the GNU General Public License",
          "14:    along with this program; if not, write to the Free Software",
          "15:    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA",
          "20: #include \"client_priv.h\"",
          "21: #include \"my_default.h\"",
          "22: #include \"mysqld_error.h\"",
          "23: #include <welcome_copyright_notice.h> // ORACLE_WELCOME_COPYRIGHT_NOTICE",
          "25: using namespace std;",
          "27: static char **defaults_argv;",
          "28: static char *opt_host= 0;",
          "29: static char *opt_user= 0;",
          "30: static uint opt_port= 0;",
          "31: static uint opt_protocol= 0;",
          "32: static char *opt_mysql_unix_port= 0;",
          "33: static MYSQL mysql;",
          "34: static char *password= 0;",
          "35: #ifdef HAVE_SMEM",
          "36: static char *shared_memory_base_name= 0;",
          "37: #endif",
          "39: #include \"sslopt-vars.h\"",
          "41: static const char *load_default_groups[]= { \"mysql\", \"client\", 0 };",
          "43: static struct my_option my_connection_options[]=",
          "44: {",
          "45:   {\"help\", '?', \"Display this help and exit.\", 0, 0, 0, GET_NO_ARG,",
          "46:    NO_ARG, 0, 0, 0, 0, 0, 0},",
          "47:   {\"host\", 'h', \"Connect to host.\", &opt_host,",
          "48:    &opt_host, 0, GET_STR_ALLOC, REQUIRED_ARG,",
          "49:    (longlong) \"localhost\", 0, 0, 0, 0, 0},",
          "50: #ifdef __WIN__",
          "51:   {\"pipe\", 'W', \"Use named pipes to connect to server.\", 0, 0, 0, GET_NO_ARG,",
          "52:    NO_ARG, 0, 0, 0, 0, 0, 0},",
          "53: #endif",
          "54:   {\"port\", 'P', \"Port number to use for connection or 0 for default to, in \"",
          "55:    \"order of preference, my.cnf, $MYSQL_TCP_PORT, \"",
          "56: #if MYSQL_PORT_DEFAULT == 0",
          "57:    \"/etc/services, \"",
          "58: #endif",
          "59:    \"built-in default (\" STRINGIFY_ARG(MYSQL_PORT) \").\", &opt_port,",
          "60:    &opt_port, 0, GET_UINT, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},",
          "61:   {\"protocol\", OPT_MYSQL_PROTOCOL,",
          "62:    \"The protocol to use for connection (tcp, socket, pipe, memory).\",",
          "63:    0, 0, 0, GET_STR,  REQUIRED_ARG, 0, 0, 0, 0, 0, 0},",
          "64: #ifdef HAVE_SMEM",
          "65:   {\"shared-memory-base-name\", OPT_SHARED_MEMORY_BASE_NAME,",
          "66:    \"Base name of shared memory.\", &shared_memory_base_name,",
          "67:    &shared_memory_base_name, 0, GET_STR_ALLOC, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},",
          "68: #endif",
          "69:   {\"socket\", 'S', \"Socket file to be used for connection.\",",
          "70:    &opt_mysql_unix_port, &opt_mysql_unix_port, 0, GET_STR_ALLOC, REQUIRED_ARG,",
          "71:    0, 0, 0, 0, 0, 0},",
          "72: #include \"sslopt-longopts.h\"",
          "73:   {\"user\", 'u', \"User for login if not current user.\", &opt_user,",
          "74:    &opt_user, 0, GET_STR_ALLOC, REQUIRED_ARG, (longlong) \"root\", 0, 0, 0, 0, 0},",
          "75:   {0, 0, 0, 0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0}",
          "76: };",
          "78: static void print_version(void)",
          "79: {",
          "80:   fprintf(stdout, \"%s Ver %s, for %s on %s\\n\", my_progname,",
          "81:    MYSQL_SERVER_VERSION, SYSTEM_TYPE, MACHINE_TYPE);",
          "82: }",
          "84: static void usage()",
          "85: {",
          "86:   print_version();",
          "87:   fprintf(stdout, ORACLE_WELCOME_COPYRIGHT_NOTICE(\"2013\"));",
          "88:   fprintf(stdout, \"MySQL Configuration Utility.\");",
          "89:   fprintf(stdout, \"Usage: %s [OPTIONS]\\n\", my_progname);",
          "90:   my_print_help(my_connection_options);",
          "91:   my_print_variables(my_connection_options);",
          "92: }",
          "94: static void free_resources()",
          "95: {",
          "96:   if (opt_host)",
          "97:     my_free(opt_host);",
          "98:   if (opt_mysql_unix_port)",
          "99:     my_free(opt_mysql_unix_port);",
          "100:   if (opt_user)",
          "101:     my_free(opt_user);",
          "102:   if (password)",
          "103:     my_free(password);",
          "104:   mysql_close(&mysql);",
          "105:   free_defaults(defaults_argv);",
          "106: }",
          "107: my_bool",
          "108: my_arguments_get_one_option(int optid,",
          "109:                             const struct my_option *opt __attribute__((unused)),",
          "110:                             char *argument)",
          "111: {",
          "112:   switch(optid){",
          "113:   case '?':",
          "114:     usage();",
          "115:     free_resources();",
          "116:     exit(0);",
          "117: #include <sslopt-case.h>",
          "118:   case OPT_MYSQL_PROTOCOL:",
          "119: #ifndef EMBEDDED_LIBRARY",
          "120:     opt_protocol= find_type_or_exit(argument, &sql_protocol_typelib,",
          "121:         opt->name);",
          "122: #endif",
          "123:     break;",
          "124:   case 'W':",
          "125: #ifdef __WIN__",
          "126:     opt_protocol = MYSQL_PROTOCOL_PIPE;",
          "127: #endif",
          "128:     break;",
          "129:   }",
          "130:   return 0;",
          "131: }",
          "135: static void",
          "136: init_connection_options(MYSQL *mysql)",
          "137: {",
          "138: #if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)",
          "139:   if (opt_use_ssl)",
          "140:   {",
          "141:     mysql_ssl_set(mysql, opt_ssl_key, opt_ssl_cert, opt_ssl_ca,",
          "142:                   opt_ssl_capath, opt_ssl_cipher);",
          "143:     mysql_options(mysql, MYSQL_OPT_SSL_CRL, opt_ssl_crl);",
          "144:     mysql_options(mysql, MYSQL_OPT_SSL_CRLPATH, opt_ssl_crlpath);",
          "145:   }",
          "146:   mysql_options(mysql, MYSQL_OPT_SSL_VERIFY_SERVER_CERT,",
          "147:                 (char*) &opt_ssl_verify_server_cert);",
          "148: #endif",
          "150:   if (opt_protocol)",
          "151:     mysql_options(mysql, MYSQL_OPT_PROTOCOL, (char*) &opt_protocol);",
          "153: #ifdef HAVE_SMEM",
          "154:   if (shared_memory_base_name)",
          "155:     mysql_options(mysql, MYSQL_SHARED_MEMORY_BASE_NAME, shared_memory_base_name);",
          "156: #endif",
          "157: }",
          "161:   Reads the response from stdin and returns the first character.",
          "163:   @param    Optional message do be displayed.",
          "165:   @return   First character of input string",
          "167: int get_response(const char *opt_message)",
          "168: {",
          "169:   int a,b,i= 0;",
          "170:   if (opt_message)",
          "171:     fprintf(stdout, \"%s\", opt_message);",
          "172:   do",
          "173:   {",
          "174:     if (i == 1)",
          "175:       b= a;",
          "176:     a= getchar();",
          "177:     i++;",
          "178:   } while(a != '\\n');",
          "179:   return b;",
          "180: }",
          "183:   Takes a mysql query and an optional message as arguments.",
          "184:   It displays the message if provided one and then runs the query.",
          "185:   If the query is run successfully, the success message is displayed.",
          "186:   Else, the failure message along with the actual failure is displayed.",
          "187:   If the server is not found running, the program is exited.",
          "189:   @param1  query        The mysql query which is to be executed.",
          "190:   @param2  opt_message  The optional message to be displayed.",
          "192: void execute_query_with_message(const char *query, const char *opt_message)",
          "193: {",
          "194:   if (opt_message)",
          "195:     fprintf(stdout, \"%s\", opt_message);",
          "197:   if (!mysql_query(&mysql, query))",
          "198:     fprintf(stdout, \" ... Success!\\n\");",
          "199:   else if ((mysql_errno(&mysql) == ER_PROCACCESS_DENIED_ERROR) ||",
          "200:            (mysql_errno(&mysql) == ER_TABLEACCESS_DENIED_ERROR) ||",
          "201:            (mysql_errno(&mysql) == ER_COLUMNACCESS_DENIED_ERROR))",
          "202:   {",
          "203:     fprintf(stdout, \"The user provided does not have enough permissions \"",
          "204:              \"to continue.\\nmysql_secure_installation is exiting.\\n\");",
          "205:     free_resources();",
          "206:     exit(1);",
          "207:   }",
          "208:   else",
          "209:     fprintf(stdout, \" ... Failed! Error: %s\\n\", mysql_error(&mysql));",
          "211:   if (mysql_errno(&mysql) == CR_SERVER_GONE_ERROR)",
          "212:   {",
          "213:     free_resources();",
          "214:     exit(1);",
          "215:   }",
          "216: }",
          "219:   Takes a mysql query and the length of the query in bytes",
          "220:   as the input. If the query fails on running, a message",
          "221:   along with the failure details is displayed.",
          "223:   @param1   query        The mysql query which is to be executed.",
          "224:   @param2   length       Length of the query in bytes.",
          "226:   return    FALSE in case of success",
          "227:             TRUE  in case of failure",
          "229: bool execute_query(const char **query, unsigned int length)",
          "230: {",
          "231:   if (!mysql_real_query(&mysql, (const char *) *query, length))",
          "232:     return FALSE;",
          "233:   else if (mysql_errno(&mysql) == CR_SERVER_GONE_ERROR)",
          "234:   {",
          "235:     fprintf(stdout, \" ... Failed! Error: %s\\n\", mysql_error(&mysql));",
          "236:     free_resources();",
          "237:     exit(1);",
          "238:   }",
          "239:   if ((mysql_errno(&mysql) == ER_PROCACCESS_DENIED_ERROR) ||",
          "240:       (mysql_errno(&mysql) == ER_TABLEACCESS_DENIED_ERROR) ||",
          "241:       (mysql_errno(&mysql) == ER_COLUMNACCESS_DENIED_ERROR))",
          "242:   {",
          "243:     fprintf(stdout, \"The user provided does not have enough permissions \"",
          "244:              \"to continue.\\nmysql_secure_installation is exiting.\\n\");",
          "245:     free_resources();",
          "246:     exit(1);",
          "247:   }",
          "248:   return TRUE;",
          "249: }",
          "252:   Checks if the validate_password plugin is installed and returns TRUE if it is.",
          "254: bool validate_password_exists()",
          "255: {",
          "256:   MYSQL_ROW row;",
          "257:   bool res= TRUE;",
          "258:   const char *query= \"SELECT NAME FROM mysql.plugin WHERE NAME \"",
          "259:                      \"= \\'validate_password\\'\";",
          "260:   if (!execute_query(&query, strlen(query)))",
          "261:     DBUG_PRINT(\"info\", (\"query success!\"));",
          "262:   MYSQL_RES *result= mysql_store_result(&mysql);",
          "263:   row= mysql_fetch_row(result);",
          "264:   if (!row)",
          "265:     res= FALSE;",
          "267:   mysql_free_result(result);",
          "268:   return res;",
          "269: }",
          "272:   Installs validate_password plugin and sets the password validation policy.",
          "274:   @return   Returns 1 on successfully setting the plugin and 0 in case of",
          "275:             of any error.",
          "277: int set_plugin()",
          "278: {",
          "279:   int reply;",
          "280:   int plugin_set= 0;",
          "281:   char *strength;",
          "282:   bool option_read= FALSE;",
          "283:   reply= get_response((const char *) \"\\n\\nVALIDATE PASSWORD PLUGIN can be used \"",
          "284:                                      \"to test passwords\\nand improve security. \"",
          "285:          \"It checks the strength of password\\nand \"",
          "286:          \"allows the users to set only those \"",
          "287:          \"passwords which are\\nsecure enough. \"",
          "288:          \"Would you like to setup VALIDATE \"",
          "289:          \"PASSWORD plugin?\\n\\nPress y|Y for Yes, \"",
          "290:          \"any other key for No: \");",
          "291:   if (reply == (int) 'y' || reply == (int) 'Y')",
          "292:   {",
          "293: #ifdef _WIN32",
          "294:     const char *query_tmp;",
          "295:     query_tmp= \"INSTALL PLUGIN validate_password SONAME \"",
          "296:         \"'validate_password.dll'\";",
          "297:     if (!execute_query(&query_tmp, strlen(query_tmp)))",
          "298: #else",
          "299:     const char *query_tmp;",
          "300:     query_tmp= \"INSTALL PLUGIN validate_password SONAME \"",
          "301:         \"'validate_password.so'\";",
          "302:     if (!execute_query(&query_tmp, strlen(query_tmp)))",
          "303: #endif",
          "304:     {",
          "305:       plugin_set= 1;",
          "306:       while(!option_read)",
          "307:       {",
          "308:  reply= get_response((const char *) \"\\n\\nThere are three levels of \"",
          "309:                                     \"password validation policy.\\n\\n\"",
          "310:         \"Please enter 0 for LOW, 1 for \"",
          "311:         \"MEDIUM and 2 for STRONG: \");",
          "312:  switch (reply){",
          "313:  case (int ) '0':",
          "314:    strength= (char *) \"LOW\";",
          "315:    option_read= TRUE;",
          "316:    break;",
          "317:  case (int) '1':",
          "318:    strength= (char *) \"MEDIUM\";",
          "319:    option_read= TRUE;",
          "320:    break;",
          "321:  case (int) '2':",
          "322:    strength= (char *) \"STRONG\";",
          "323:    option_read= TRUE;",
          "324:    break;",
          "325:  default:",
          "326:    fprintf(stdout, \"\\nInvalid option provided.\\n\");",
          "327:  }",
          "328:       }",
          "329:       char *query, *end;",
          "330:       int tmp= sizeof(\"SET GLOBAL validate_password_policy = \") + 3;",
          "331:       int strength_length= strlen(strength);",
          "333:  query string needs memory which is atleast the length of initial part",
          "334:  of query plus twice the size of variable being appended.",
          "336:       query= (char *)my_malloc(PSI_NOT_INSTRUMENTED,",
          "337:                         (strength_length * 2 + tmp) * sizeof(char),",
          "338:                         MYF(MY_WME));",
          "339:       end= strmov(query, \"SET GLOBAL validate_password_policy = \");",
          "341:       end+= mysql_real_escape_string(&mysql, end, strength, strength_length);",
          "343:       if (!execute_query((const char **) &query,(unsigned int) (end-query)))",
          "344:  DBUG_PRINT(\"info\", (\"query success!\"));",
          "345:       my_free(query);",
          "346:     }",
          "347:     else",
          "348:       fprintf(stdout, \"\\nVALIDATE PASSWORD PLUGIN is not available.\\n\"",
          "349:                \"Proceeding with the further steps without the plugin.\\n\");",
          "350:   }",
          "351:   return(plugin_set);",
          "352: }",
          "355:   Checks the password strength and displays it to the user.",
          "357:   @param password_string    Password string whose strength",
          "358:        is to be estimated",
          "360: void estimate_password_strength(char *password_string)",
          "361: {",
          "362:   char *query, *end;",
          "363:   int tmp= sizeof(\"SELECT validate_password_strength(\") + 3;",
          "364:   int password_length= strlen(password_string);",
          "366:     query string needs memory which is atleast the length of initial part",
          "367:     of query plus twice the size of variable being appended.",
          "369:   query= (char *)my_malloc(PSI_NOT_INSTRUMENTED,",
          "370:                            (password_length * 2 + tmp) * sizeof(char),",
          "371:                            MYF(MY_WME));",
          "372:   end= strmov(query, \"SELECT validate_password_strength(\");",
          "374:   end+= mysql_real_escape_string(&mysql, end, password_string, password_length);",
          "377:   if (!execute_query((const char **) &query,(unsigned int) (end-query)))",
          "378:   {",
          "379:     MYSQL_RES *result= mysql_store_result(&mysql);",
          "380:     MYSQL_ROW row= mysql_fetch_row(result);",
          "381:     printf(\"\\nStrength of the password: %s \\n\\n\", row[0]);",
          "382:     mysql_free_result(result);",
          "383:   }",
          "384:   my_free(query);",
          "385: }",
          "389:   Sets the root password with the string provided during the flow",
          "390:   of the method. It checks for the strength of the password before",
          "391:   changing it and displays the same to the user. The user can decide",
          "392:   if he wants to continue with the password, or provide a new one,",
          "393:   depending on the strength displayed.",
          "395:   @param    plugin_set   1 if validate_password plugin is set and",
          "396:                          0 if it is not.",
          "399: static void set_root_password(int plugin_set)",
          "400: {",
          "401:   char *password1= 0, *password2= 0;",
          "402:   int reply= 0;",
          "404:   for(;;)",
          "405:   {",
          "406:     if (password1)",
          "407:     {",
          "408:       my_free(password1);",
          "409:       password1= NULL;",
          "410:     }",
          "411:     if (password2)",
          "412:     {",
          "413:       my_free(password2);",
          "414:       password2= NULL;",
          "415:     }",
          "417:     password1= get_tty_password(\"\\nNew password: \");",
          "419:     if (password1[0] == '\\0')",
          "420:     {",
          "421:       fprintf(stdout, \"Sorry, you can't use an empty password here.\\n\");",
          "422:       continue;",
          "423:     }",
          "425:     password2= get_tty_password(\"\\nRe-enter new password: \");",
          "427:     if (strcmp(password1, password2))",
          "428:     {",
          "429:       fprintf(stdout, \"Sorry, passwords do not match.\\n\");",
          "430:       continue;",
          "431:     }",
          "433:     if (plugin_set == 1)",
          "434:     {",
          "435:       estimate_password_strength(password1);",
          "436:       reply= get_response((const char *) \"Do you wish to continue with the \"",
          "437:                                   \"password provided?(Press y|Y for \"",
          "438:       \"Yes, any other key for No) : \");",
          "439:     }",
          "441:     int pass_length= strlen(password1);",
          "443:     if ((!plugin_set) || (reply == (int) 'y' || reply == (int) 'Y'))",
          "444:     {",
          "445:       char *query= NULL, *end;",
          "446:       int tmp= sizeof(\"SET PASSWORD=PASSWORD(\") + 3;",
          "448:  query string needs memory which is atleast the length of initial part",
          "449:  of query plus twice the size of variable being appended.",
          "451:       query= (char *)my_malloc(PSI_NOT_INSTRUMENTED,",
          "452:                         (pass_length*2 + tmp)*sizeof(char), MYF(MY_WME));",
          "453:       end= strmov(query, \"SET PASSWORD=PASSWORD(\");",
          "455:       end+= mysql_real_escape_string(&mysql, end, password1, pass_length);",
          "458:       my_free(password1);",
          "459:       my_free(password2);",
          "460:       password1= NULL;",
          "461:       password2= NULL;",
          "462:       if (!execute_query((const char **)&query,(unsigned int) (end-query)))",
          "463:       {",
          "464:  my_free(query);",
          "465:         break;",
          "466:       }",
          "467:       else",
          "468:  fprintf(stdout, \" ... Failed! Error: %s\\n\", mysql_error(&mysql));",
          "469:     }",
          "470:   }",
          "471: }",
          "474:   Takes the root password as an input from the user and checks its validity",
          "475:   by trying to connect to the server with it. The connection to the server",
          "476:   is opened in this function.",
          "478:   @return    Returns 1 if a password already exists and 0 if it doesn't.",
          "480: int get_root_password()",
          "481: {",
          "482:   int res;",
          "483:   fprintf(stdout, \"\\n\\n\\n\"",
          "484:                   \"NOTE: RUNNING ALL THE STEPS FOLLOWING THIS IS RECOMMENDED\\n\"",
          "485:                   \"FOR ALL MySQL SERVERS IN PRODUCTION USE!  PLEASE READ EACH\\n\"",
          "486:                   \"STEP CAREFULLY!\\n\\n\\n\\n\\n\"",
          "487:                   \"In order to log into MySQL to secure it, we'll need the\\n\"",
          "488:                   \"current password for the root user. If you've just installed\"",
          "489:                   \"\\nMySQL, and you haven't set the root password yet, the \\n\"",
          "490:                   \"password will be blank, so you should just press enter here.\"",
          "491:                   \"\\n\\n\");",
          "492:   password= get_tty_password(NullS);",
          "493:   if (!mysql_real_connect(&mysql, opt_host, opt_user,",
          "494:      password, \"\", opt_port, opt_mysql_unix_port, 0))",
          "495:   {",
          "496:     if (mysql_errno(&mysql) == ER_MUST_CHANGE_PASSWORD_LOGIN)",
          "497:     {",
          "498:       bool can= TRUE;",
          "499:       mysql_options(&mysql, MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS, &can);",
          "500:       if (!mysql_real_connect(&mysql, opt_host, opt_user,",
          "501:                               password, \"\", opt_port, opt_mysql_unix_port, 0))",
          "502:       {",
          "503:  fprintf(stdout, \"Error: %s\\n\", mysql_error(&mysql));",
          "504:  free_resources();",
          "505:  exit(1);",
          "506:       }",
          "507:       fprintf(stdout, \"\\nThe existing password for the user account has \"",
          "508:                \"expired. Please set a new password.\\n\");",
          "509:       set_root_password(0);",
          "510:     }",
          "511:     else",
          "512:     {",
          "513:       fprintf(stdout, \"Error: %s\\n\", mysql_error(&mysql));",
          "514:       free_resources();",
          "515:       exit(1);",
          "516:     }",
          "517:   }",
          "518:   fprintf(stdout, \"\\n\\nOK, successfully used password, moving on...\\n\\n\");",
          "519:   res= (password[0] != '\\0') ? 1 : 0;",
          "520:   return(res);",
          "521: }",
          "525:   Takes the user and the host from result set and drops those users.",
          "527:   @param result    The result set from which rows are to be fetched.",
          "529: void drop_users(MYSQL_RES *result)",
          "530: {",
          "531:   MYSQL_ROW row;",
          "532:   char *user_tmp, *host_tmp;",
          "533:   while ((row= mysql_fetch_row(result)))",
          "534:   {",
          "535:     char *query, *end;",
          "536:     int user_length, host_length;",
          "537:     int tmp= sizeof(\"DROP USER \")+5;",
          "538:     user_tmp= row[0];",
          "539:     host_tmp= row[1];",
          "540:     user_length= strlen(user_tmp);",
          "541:     host_length= strlen(host_tmp);",
          "543:       query string needs memory which is atleast the length of initial part",
          "544:       of query plus twice the size of variable being appended.",
          "546:     query= (char *)my_malloc(PSI_NOT_INSTRUMENTED,",
          "547:                       ((user_length + host_length)*2 + tmp) *",
          "548:                       sizeof(char), MYF(MY_WME));",
          "549:     end= strmov(query, \"DROP USER \");",
          "551:     end+= mysql_real_escape_string(&mysql, end, user_tmp, user_length);",
          "555:     end+= mysql_real_escape_string(&mysql, end, host_tmp, host_length);",
          "557:     if (!execute_query((const char **) &query, (unsigned int) (end-query)))",
          "558:       DBUG_PRINT(\"info\", (\"query success!\"));",
          "559:     my_free(query);",
          "560:   }",
          "561: }",
          "564:   Removes all the anonymous users for better security.",
          "566: void remove_anonymous_users()",
          "567: {",
          "568:   int reply;",
          "569:   reply= get_response((const char *) \"By default, a MySQL installation has an \"",
          "570:          \"anonymous user,\\nallowing anyone to log \"",
          "571:          \"into MySQL without having to have\\na user \"",
          "572:          \"account created for them. This is intended \"",
          "573:          \"only for\\ntesting, and to make the \"",
          "574:          \"installation go a bit smoother.\\nYou should \"",
          "575:          \"remove them before moving into a production\\n\"",
          "576:          \"environment.\\n\\nRemove anonymous users? \"",
          "577:          \"(Press y|Y for Yes, any other key for No) : \");",
          "579:   if (reply == (int) 'y' || reply == (int) 'Y')",
          "580:   {",
          "581:     const char *query;",
          "582:     query= \"SELECT USER, HOST FROM mysql.user WHERE USER=''\";",
          "583:     if (!execute_query(&query, strlen(query)))",
          "584:       DBUG_PRINT(\"info\", (\"query success!\"));",
          "585:     MYSQL_RES *result= mysql_store_result(&mysql);",
          "586:     if (result)",
          "587:       drop_users(result);",
          "588:     mysql_free_result(result);",
          "589:     fprintf(stdout, \"\\n\\nSuccess.. Moving on..\\n\\n\");",
          "590:   }",
          "591:   else",
          "592:     fprintf(stdout, \"\\n ... skipping.\\n\\n\");",
          "593: }",
          "597:   Drops all the root users with a remote host.",
          "599: void remove_remote_root()",
          "600: {",
          "601:   int reply;",
          "602:   reply= get_response((const char *) \"\\n\\nNormally, root should only be \"",
          "603:                                      \"allowed to connect from\\n'localhost'. \"",
          "604:          \"This ensures that someone cannot guess at\"",
          "605:          \"\\nthe root password from the network.\\n\\n\"",
          "606:          \"Disallow root login remotely? (Press y|Y \"",
          "607:          \"for Yes, any other key for No) : \");",
          "608:   if (reply == (int) 'y' || reply == (int) 'Y')",
          "609:   {",
          "610:     const char *query;",
          "611:     query= \"SELECT USER, HOST FROM mysql.user WHERE USER='root' \"",
          "612:     \"AND HOST NOT IN ('localhost', '127.0.0.1', '::1')\";",
          "613:     if (!execute_query(&query, strlen(query)))",
          "614:       DBUG_PRINT(\"info\", (\"query success!\"));",
          "615:     MYSQL_RES *result= mysql_store_result(&mysql);",
          "616:     if (result)",
          "617:       drop_users(result);",
          "618:     mysql_free_result(result);",
          "619:     fprintf(stdout, \"Done.. Moving on..\\n\\n\");",
          "620:   }",
          "621:   else",
          "622:     fprintf(stdout, \"\\n ... skipping.\\n\");",
          "623: }",
          "626:   Removes test database and delete\u0455 the rows corresponding to them",
          "627:   from mysql.db table.",
          "629: void remove_test_database()",
          "630: {",
          "631:   int reply;",
          "632:   reply= get_response((const char *) \"By default, MySQL comes with a database \"",
          "633:                                      \"named 'test' that\\nanyone can access. \"",
          "634:          \"This is also intended only for testing,\\n\"",
          "635:          \"and should be removed before moving into \"",
          "636:          \"a production\\nenvironment.\\n\\n\\nRemove \"",
          "637:          \"test database and access to it? (Press \"",
          "638:          \"y|Y for Yes, any other key for No) : \");",
          "639:   if (reply == (int) 'y' || reply == (int) 'Y')",
          "640:   {",
          "641:     execute_query_with_message((const char *) \"DROP DATABASE test\",",
          "642:           (const char *) \" - Dropping test database...\\n\");",
          "644:     execute_query_with_message((const char *) \"DELETE FROM mysql.db WHERE \"",
          "645:                                        \"Db='test' OR Db='test\\\\_%'\",",
          "646:           (const char *) \" - Removing privileges on test \"",
          "647:                          \"database...\\n\");",
          "648:   }",
          "649:   else",
          "650:     fprintf(stdout, \"\\n ... skipping.\\n\");",
          "651: }",
          "654:   Refreshes the in-memory details through",
          "655:   FLUSH PRIVILEGES.",
          "657: void reload_privilege_tables()",
          "658: {",
          "659:   int reply;",
          "660:   reply= get_response((const char *) \"Reloading the privilege tables will \"",
          "661:                                      \"ensure that all changes\\nmade so far \"",
          "662:          \"will take effect immediately.\\n\\nReload \"",
          "663:          \"privilege tables now? (Press y|Y for \"",
          "664:          \"Yes, any other key for No) : \");",
          "665:   if (reply == (int) 'y' || reply == (int) 'Y')",
          "666:   {",
          "667:     execute_query_with_message((const char *) \"FLUSH PRIVILEGES\", NULL);",
          "668:   }",
          "669:   else",
          "670:     fprintf(stdout, \"\\n ... skipping.\\n\");",
          "671: }",
          "673: int main(int argc,char *argv[])",
          "674: {",
          "675:   int reply;",
          "676:   int rc;",
          "677:   int hadpass, plugin_set= 0;",
          "679:   MY_INIT(argv[0]);",
          "680:   DBUG_ENTER(\"main\");",
          "681:   DBUG_PROCESS(argv[0]);",
          "682: #ifdef __WIN__",
          "684:   my_win_translate_command_line_args(&my_charset_utf8mb4_bin, &argc, &argv);",
          "685: #endif",
          "687:   my_getopt_use_args_separator= TRUE;",
          "688:   if (load_defaults(\"my\", load_default_groups, &argc, &argv))",
          "689:   {",
          "690:     free_defaults(argv);",
          "691:     my_end(0);",
          "692:     free_resources();",
          "693:     exit(1);",
          "694:   }",
          "695:   defaults_argv= argv;",
          "696:   my_getopt_use_args_separator= FALSE;",
          "698:   if ((rc= handle_options(&argc, &argv, my_connection_options,",
          "699:                           my_arguments_get_one_option)))",
          "700:   {",
          "701:     free_resources();",
          "702:     exit(rc);",
          "703:   }",
          "705:   if (mysql_init(&mysql) == NULL)",
          "706:   {",
          "707:     printf(\"\\nFailed to initate MySQL connection\");",
          "708:     free_resources();",
          "709:     exit(1);",
          "710:   }",
          "711:   init_connection_options(&mysql);",
          "713:   hadpass= get_root_password();",
          "715:   if (!validate_password_exists())",
          "716:     plugin_set= set_plugin();",
          "717:   else",
          "718:   {",
          "719:     fprintf(stdout, \"validate_password plugin is installed on the server.\\n\"",
          "720:              \"The subsequent steps will run with the existing \"",
          "721:       \"configuration\\nof the plugin.\\n\");",
          "722:     plugin_set= 1;",
          "723:   }",
          "725:   fprintf(stdout, \"\\n\\nSetting the root password ensures that nobody can log \"",
          "726:                   \"into\\nthe MySQL root user without the proper \"",
          "727:     \"authorisation.\\n\");",
          "729:   if (!hadpass)",
          "730:   {",
          "731:     fprintf(stdout, \"Please set the root password here.\\n\");",
          "732:     set_root_password(plugin_set);",
          "733:   }",
          "734:   else",
          "735:   {",
          "736:     fprintf(stdout, \"You already have a root password set.\\n\\n\");",
          "738:     if (plugin_set == 1)",
          "739:       estimate_password_strength(password);",
          "741:     reply= get_response((const char *) \"Change the root password? (Press y|Y \"",
          "742:                                 \"for Yes, any other key for No) : \");",
          "744:     if (reply == (int) 'y' || reply == (int) 'Y')",
          "745:       set_root_password(plugin_set);",
          "746:     else",
          "747:       fprintf(stdout, \"\\n ... skipping.\\n\\n\");",
          "748:   }",
          "751:   remove_anonymous_users();",
          "754:   remove_remote_root();",
          "757:   remove_test_database();",
          "760:   reload_privilege_tables();",
          "762:   fprintf(stdout, \"All done! If you've completed all of the above steps, your\\n\"",
          "763:                   \"MySQL installation should now be secure.\\n\");",
          "764:   free_resources();",
          "765: return 0;",
          "766: }",
          "",
          "---------------"
        ],
        "mysql-test/mysql-test-run.pl||mysql-test/mysql-test-run.pl": [
          "File: mysql-test/mysql-test-run.pl -> mysql-test/mysql-test-run.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2434:   # ----------------------------------------------------",
          "2435:   # mysql clients",
          "2436:   # ----------------------------------------------------",
          "2455:   my $exe_mysqld= find_mysqld($basedir);",
          "2456:   $ENV{'MYSQLD'}= $exe_mysqld;",
          "",
          "[Removed Lines]",
          "2437:   $ENV{'MYSQL_CHECK'}=              client_arguments(\"mysqlcheck\");",
          "2438:   $ENV{'MYSQL_DUMP'}=               mysqldump_arguments(\".1\");",
          "2439:   $ENV{'MYSQL_DUMP_SLAVE'}=         mysqldump_arguments(\".2\");",
          "2440:   $ENV{'MYSQL_SLAP'}=               mysqlslap_arguments();",
          "2441:   $ENV{'MYSQL_IMPORT'}=             client_arguments(\"mysqlimport\");",
          "2442:   $ENV{'MYSQL_SHOW'}=               client_arguments(\"mysqlshow\");",
          "2443:   $ENV{'MYSQL_CONFIG_EDITOR'}=      client_arguments_no_grp_suffix(\"mysql_config_editor\");",
          "2444:   $ENV{'MYSQL_BINLOG'}=             client_arguments(\"mysqlbinlog\");",
          "2445:   $ENV{'MYSQL'}=                    client_arguments(\"mysql\");",
          "2446:   $ENV{'MYSQL_SLAVE'}=              client_arguments(\"mysql\", \".2\");",
          "2447:   $ENV{'MYSQL_UPGRADE'}=            client_arguments(\"mysql_upgrade\");",
          "2448:   $ENV{'MYSQLADMIN'}=               native_path($exe_mysqladmin);",
          "2449:   $ENV{'MYSQL_CLIENT_TEST'}=        mysql_client_test_arguments();",
          "2450:   $ENV{'EXE_MYSQL'}=                $exe_mysql;",
          "2451:   $ENV{'MYSQL_PLUGIN'}=             $exe_mysql_plugin;",
          "2452:   $ENV{'MYSQL_EMBEDDED'}=           $exe_mysql_embedded;",
          "2453:   $ENV{'PATH_CONFIG_FILE'}=         $path_config_file;",
          "",
          "[Added Lines]",
          "2437:   $ENV{'MYSQL_CHECK'}=                 client_arguments(\"mysqlcheck\");",
          "2438:   $ENV{'MYSQL_DUMP'}=                  mysqldump_arguments(\".1\");",
          "2439:   $ENV{'MYSQL_DUMP_SLAVE'}=            mysqldump_arguments(\".2\");",
          "2440:   $ENV{'MYSQL_SLAP'}=                  mysqlslap_arguments();",
          "2441:   $ENV{'MYSQL_IMPORT'}=                client_arguments(\"mysqlimport\");",
          "2442:   $ENV{'MYSQL_SHOW'}=                  client_arguments(\"mysqlshow\");",
          "2443:   $ENV{'MYSQL_CONFIG_EDITOR'}=         client_arguments_no_grp_suffix(\"mysql_config_editor\");",
          "2444:   $ENV{'MYSQL_BINLOG'}=                client_arguments(\"mysqlbinlog\");",
          "2445:   $ENV{'MYSQL'}=                       client_arguments(\"mysql\");",
          "2446:   $ENV{'MYSQL_SLAVE'}=                 client_arguments(\"mysql\", \".2\");",
          "2447:   $ENV{'MYSQL_UPGRADE'}=               client_arguments(\"mysql_upgrade\");",
          "2448:   $ENV{'MYSQL_SECURE_INSTALLATION'}=   \"$path_client_bindir/mysql_secure_installation\";",
          "2449:   $ENV{'MYSQLADMIN'}=                  native_path($exe_mysqladmin);",
          "2450:   $ENV{'MYSQL_CLIENT_TEST'}=           mysql_client_test_arguments();",
          "2451:   $ENV{'EXE_MYSQL'}=                   $exe_mysql;",
          "2452:   $ENV{'MYSQL_PLUGIN'}=                $exe_mysql_plugin;",
          "2453:   $ENV{'MYSQL_EMBEDDED'}=              $exe_mysql_embedded;",
          "2454:   $ENV{'PATH_CONFIG_FILE'}=            $path_config_file;",
          "",
          "---------------"
        ],
        "scripts/mysql_secure_installation.pl.in||scripts/mysql_secure_installation.pl.in": [
          "File: scripts/mysql_secure_installation.pl.in -> scripts/mysql_secure_installation.pl.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "scripts/mysql_secure_installation.sh||scripts/mysql_secure_installation.sh": [
          "File: scripts/mysql_secure_installation.sh -> scripts/mysql_secure_installation.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "scripts/mysql_system_tables_data.sql||scripts/mysql_system_tables_data.sql": [
          "File: scripts/mysql_system_tables_data.sql -> scripts/mysql_system_tables_data.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: -- from local machine if \"user\" table didn't exist before",
          "42: CREATE TEMPORARY TABLE tmp_user LIKE user;",
          "43: INSERT INTO tmp_user VALUES ('localhost','root','','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0,0,'','','N');",
          "45: REPLACE INTO tmp_user VALUES ('127.0.0.1','root','','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0,0,'','','N');",
          "46: REPLACE INTO tmp_user VALUES ('::1','root','','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0,0,'','','N');",
          "47: INSERT INTO tmp_user (host,user) VALUES ('localhost','');",
          "49: INSERT INTO user SELECT * FROM tmp_user WHERE @had_user_table=0;",
          "50: DROP TABLE tmp_user;",
          "52: CREATE TEMPORARY TABLE tmp_proxies_priv LIKE proxies_priv;",
          "53: INSERT INTO tmp_proxies_priv VALUES ('localhost', 'root', '', '', TRUE, '', now());",
          "55: INSERT INTO  proxies_priv SELECT * FROM tmp_proxies_priv WHERE @had_proxies_priv_table=0;",
          "56: DROP TABLE tmp_proxies_priv;",
          "",
          "[Removed Lines]",
          "44: REPLACE INTO tmp_user SELECT @current_hostname,'root','','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0,0,'','','N' FROM dual WHERE LOWER( @current_hostname) != 'localhost';",
          "48: INSERT INTO tmp_user (host,user) SELECT @current_hostname,'' FROM dual WHERE LOWER(@current_hostname ) != 'localhost';",
          "54: REPLACE INTO tmp_proxies_priv SELECT @current_hostname, 'root', '', '', TRUE, '', now() FROM DUAL WHERE LOWER (@current_hostname) != 'localhost';",
          "",
          "[Added Lines]",
          "44: REPLACE INTO tmp_user SELECT LOWER(@current_hostname),'root','','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0,0,'','','N' FROM dual WHERE LOWER( @current_hostname) != 'localhost';",
          "48: INSERT INTO tmp_user (host,user) SELECT LOWER(@current_hostname),'' FROM dual WHERE LOWER(@current_hostname ) != 'localhost';",
          "54: REPLACE INTO tmp_proxies_priv SELECT LOWER(@current_hostname), 'root', '', '', TRUE, '', now() FROM DUAL WHERE LOWER (@current_hostname) != 'localhost';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9584a05b1ba16c15467d79dcdb7db1ba924b3785",
      "candidate_info": {
        "commit_hash": "9584a05b1ba16c15467d79dcdb7db1ba924b3785",
        "repo": "mysql/mysql-server",
        "commit_url": "https://github.com/mysql/mysql-server/commit/9584a05b1ba16c15467d79dcdb7db1ba924b3785",
        "files": [
          "client/mysql.cc",
          "client/mysqladmin.cc",
          "client/mysqlbinlog.cc",
          "client/mysqlcheck.c",
          "client/mysqldump.c",
          "client/mysqlimport.c",
          "client/mysqlshow.c",
          "include/mysql.h",
          "include/mysql.h.pp",
          "sql-common/client.c"
        ],
        "message": "WL#3126 TCP address binding for mysql client library - This patch extends the MySQL C API making it possible to   select which local interface to use when clients connect   to a MySQL Server using TCP. The user calls   'mysql_options' to specify the address which will will be used in   'mysql_real_connect' to extract a list of address info's which   the source socket will 'bind' to. If no matching source+destination   is found an error will be returned.\n\n- Since the client_ip memeber of st_mysql_options is only used by\n  embedded server and the bind_address is only used by non embedded server\n  we can reuse it and thus avoid breaking the ABI(like was done in MySQL\n  Cluster) without using the \"extension\".\n\n  Example:\n    mysql_options(mysql, MYSQL_OPT_BIND, \"192.168.10.12\");\n\n- Add support for --bind-address to the mysql, mysqladmin,\n  mysqlbinlog, mysqlcheck, mysqldump, mysqlimport\n  and mysqlshow programs",
        "before_after_code_files": [
          "client/mysql.cc||client/mysql.cc",
          "client/mysqladmin.cc||client/mysqladmin.cc",
          "client/mysqlbinlog.cc||client/mysqlbinlog.cc",
          "client/mysqlcheck.c||client/mysqlcheck.c",
          "client/mysqldump.c||client/mysqldump.c",
          "client/mysqlimport.c||client/mysqlimport.c",
          "client/mysqlshow.c||client/mysqlshow.c",
          "include/mysql.h||include/mysql.h",
          "include/mysql.h.pp||include/mysql.h.pp",
          "sql-common/client.c||sql-common/client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "client/mysql.cc||client/mysql.cc",
            "client/mysqladmin.cc||client/mysqladmin.cc",
            "client/mysqlbinlog.cc||client/mysqlbinlog.cc",
            "client/mysqlcheck.c||client/mysqlcheck.c",
            "client/mysqldump.c||client/mysqldump.c",
            "client/mysqlimport.c||client/mysqlimport.c",
            "client/mysqlshow.c||client/mysqlshow.c",
            "include/mysql.h||include/mysql.h",
            "include/mysql.h.pp||include/mysql.h.pp",
            "sql-common/client.c||sql-common/client.c"
          ],
          "candidate": [
            "client/mysql.cc||client/mysql.cc",
            "client/mysqladmin.cc||client/mysqladmin.cc",
            "client/mysqlbinlog.cc||client/mysqlbinlog.cc",
            "client/mysqlcheck.c||client/mysqlcheck.c",
            "client/mysqldump.c||client/mysqldump.c",
            "client/mysqlimport.c||client/mysqlimport.c",
            "client/mysqlshow.c||client/mysqlshow.c",
            "include/mysql.h||include/mysql.h",
            "include/mysql.h.pp||include/mysql.h.pp",
            "sql-common/client.c||sql-common/client.c"
          ]
        }
      },
      "candidate_diff": {
        "client/mysql.cc||client/mysql.cc": [
          "File: client/mysql.cc -> client/mysql.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: static uint verbose=0,opt_silent=0,opt_mysql_port=0, opt_local_infile=0;",
          "159: static uint my_end_arg;",
          "160: static char * opt_mysql_unix_port=0;",
          "161: static int connect_flag=CLIENT_INTERACTIVE;",
          "162: static char *current_host,*current_db,*current_user=0,*opt_password=0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: static char *opt_bind_addr = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1383:     (uchar**) &auto_vertical_output, (uchar**) &auto_vertical_output, 0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},",
          "1384:   {\"batch\", 'B',",
          "1385:    \"Don't use history file. Disable interactive behavior. (Enables --silent.)\", 0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0},",
          "1386:   {\"character-sets-dir\", OPT_CHARSETS_DIR,",
          "1387:    \"Directory for character set files.\", (uchar**) &charsets_dir,",
          "1388:    (uchar**) &charsets_dir, 0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1387:   {\"bind-address\", 0, \"IP address to bind to.\",",
          "1388:    (uchar**) &opt_bind_addr, (uchar**) &opt_bind_addr, 0, GET_STR,",
          "1389:    REQUIRED_ARG, 0, 0, 0, 0, 0, 0},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4294:     mysql_options(&mysql,MYSQL_OPT_CONNECT_TIMEOUT,",
          "4295:     (char*) &timeout);",
          "4296:   }",
          "4297:   if (opt_compress)",
          "4298:     mysql_options(&mysql,MYSQL_OPT_COMPRESS,NullS);",
          "4299:   if (opt_secure_auth)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4301:   if (opt_bind_addr)",
          "4302:     mysql_options(&mysql, MYSQL_OPT_BIND, opt_bind_addr);",
          "",
          "---------------"
        ],
        "client/mysqladmin.cc||client/mysqladmin.cc": [
          "File: client/mysqladmin.cc -> client/mysqladmin.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: static my_bool debug_info_flag= 0, debug_check_flag= 0;",
          "42: static uint tcp_port = 0, option_wait = 0, option_silent=0, nr_iterations;",
          "43: static uint opt_count_iterations= 0, my_end_arg;",
          "44: static ulong opt_connect_timeout, opt_shutdown_timeout;",
          "45: static char * unix_port=0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: static char *opt_bind_addr = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   {\"autoclose\", OPT_AUTO_CLOSE, \"Automatically close the screen on exit for Netware.\",",
          "121:    0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0},",
          "122: #endif",
          "123:   {\"count\", 'c',",
          "124:    \"Number of iterations to make. This works with -i (--sleep) only.\",",
          "125:    (uchar**) &nr_iterations, (uchar**) &nr_iterations, 0, GET_UINT,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:   {\"bind-address\", 0, \"IP address to bind to.\",",
          "125:    (uchar**) &opt_bind_addr, (uchar**) &opt_bind_addr, 0, GET_STR,",
          "126:    REQUIRED_ARG, 0, 0, 0, 0, 0, 0},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "329:   if (opt_compress)",
          "330:     mysql_options(&mysql,MYSQL_OPT_COMPRESS,NullS);",
          "331:   if (opt_connect_timeout)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333:   if (opt_bind_addr)",
          "334:     mysql_options(&mysql,MYSQL_OPT_BIND,opt_bind_addr);",
          "",
          "---------------"
        ],
        "client/mysqlbinlog.cc||client/mysqlbinlog.cc": [
          "File: client/mysqlbinlog.cc -> client/mysqlbinlog.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: #endif",
          "84: static const char* user = 0;",
          "85: static char* pass = 0;",
          "86: static char *charset= 0;",
          "88: static uint verbose= 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: static char *opt_bind_addr = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1022:    ,(uchar**) &opt_base64_output_mode_str,",
          "1023:    (uchar**) &opt_base64_output_mode_str,",
          "1024:    0, GET_STR, OPT_ARG, 0, 0, 0, 0, 0, 0},",
          "1026:     mysqlbinlog needs charsets knowledge, to be able to convert a charset",
          "1027:     number found in binlog to a charset name (to be able to print things",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1026:   {\"bind-address\", 0, \"IP address to bind to.\",",
          "1027:    (uchar**) &opt_bind_addr, (uchar**) &opt_bind_addr, 0, GET_STR,",
          "1028:    REQUIRED_ARG, 0, 0, 0, 0, 0, 0},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1400:   if (opt_protocol)",
          "1401:     mysql_options(mysql, MYSQL_OPT_PROTOCOL, (char*) &opt_protocol);",
          "1402: #ifdef HAVE_SMEM",
          "1403:   if (shared_memory_base_name)",
          "1404:     mysql_options(mysql, MYSQL_SHARED_MEMORY_BASE_NAME,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1406:   if (opt_bind_addr)",
          "1407:     mysql_options(mysql, MYSQL_OPT_BIND, opt_bind_addr);",
          "",
          "---------------"
        ],
        "client/mysqlcheck.c||client/mysqlcheck.c": [
          "File: client/mysqlcheck.c -> client/mysqlcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: static char *shared_memory_base_name=0;",
          "48: #endif",
          "49: static uint opt_protocol=0;",
          "51: enum operations { DO_CHECK, DO_REPAIR, DO_ANALYZE, DO_OPTIMIZE, DO_UPGRADE };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: static char *opt_bind_addr = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:    \"If a checked table is corrupted, automatically fix it. Repairing will be done after all tables have been checked, if corrupted ones were found.\",",
          "71:    (uchar**) &opt_auto_repair, (uchar**) &opt_auto_repair, 0, GET_BOOL, NO_ARG, 0,",
          "72:    0, 0, 0, 0, 0},",
          "73:   {\"character-sets-dir\", OPT_CHARSETS_DIR,",
          "74:    \"Directory for character set files.\", (uchar**) &charsets_dir,",
          "75:    (uchar**) &charsets_dir, 0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:   {\"bind-address\", 0, \"IP address to bind to.\",",
          "75:    (uchar**) &opt_bind_addr, (uchar**) &opt_bind_addr, 0, GET_STR,",
          "76:    REQUIRED_ARG, 0, 0, 0, 0, 0, 0},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "799: #endif",
          "800:   if (opt_protocol)",
          "801:     mysql_options(&mysql_connection,MYSQL_OPT_PROTOCOL,(char*)&opt_protocol);",
          "802: #ifdef HAVE_SMEM",
          "803:   if (shared_memory_base_name)",
          "804:     mysql_options(&mysql_connection,MYSQL_SHARED_MEMORY_BASE_NAME,shared_memory_base_name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "806:   if (opt_bind_addr)",
          "807:     mysql_options(&mysql_connection, MYSQL_OPT_BIND, opt_bind_addr);",
          "",
          "---------------"
        ],
        "client/mysqldump.c||client/mysqldump.c": [
          "File: client/mysqldump.c -> client/mysqldump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: static uint opt_slave_data;",
          "127: static uint my_end_arg;",
          "128: static char * opt_mysql_unix_port=0;",
          "129: static int   first_error=0;",
          "130: static DYNAMIC_STRING extended_row;",
          "131: #include <sslopt-vars.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: static char *opt_bind_addr = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:   {\"autoclose\", OPT_AUTO_CLOSE, \"Automatically close the screen on exit for Netware.\",",
          "217:    0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0},",
          "218: #endif",
          "219:   {\"character-sets-dir\", OPT_CHARSETS_DIR,",
          "220:    \"Directory for character set files.\", (uchar**) &charsets_dir,",
          "221:    (uchar**) &charsets_dir, 0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:   {\"bind-address\", 0, \"IP address to bind to.\",",
          "221:    (uchar**) &opt_bind_addr, (uchar**) &opt_bind_addr, 0, GET_STR,",
          "222:    REQUIRED_ARG, 0, 0, 0, 0, 0, 0},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1462: #endif",
          "1463:   if (opt_protocol)",
          "1464:     mysql_options(&mysql_connection,MYSQL_OPT_PROTOCOL,(char*)&opt_protocol);",
          "1465: #ifdef HAVE_SMEM",
          "1466:   if (shared_memory_base_name)",
          "1467:     mysql_options(&mysql_connection,MYSQL_SHARED_MEMORY_BASE_NAME,shared_memory_base_name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1469:   if (opt_bind_addr)",
          "1470:     mysql_options(&mysql_connection,MYSQL_OPT_BIND,opt_bind_addr);",
          "",
          "---------------"
        ],
        "client/mysqlimport.c||client/mysqlimport.c": [
          "File: client/mysqlimport.c -> client/mysqlimport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: static uint     opt_mysql_port= 0, opt_protocol= 0;",
          "60: static char * opt_mysql_unix_port=0;",
          "61: static longlong opt_ignore_lines= -1;",
          "62: #include <sslopt-vars.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: static char *opt_bind_addr = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:   {\"autoclose\", OPT_AUTO_CLOSE, \"Automatically close the screen on exit for Netware.\",",
          "72:    0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0},",
          "73: #endif",
          "74:   {\"character-sets-dir\", OPT_CHARSETS_DIR,",
          "75:    \"Directory for character set files.\", (uchar**) &charsets_dir,",
          "76:    (uchar**) &charsets_dir, 0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:   {\"bind-address\", 0, \"IP address to bind to.\",",
          "76:    (uchar**) &opt_bind_addr, (uchar**) &opt_bind_addr, 0, GET_STR,",
          "77:    REQUIRED_ARG, 0, 0, 0, 0, 0, 0},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "436: #endif",
          "437:   if (opt_protocol)",
          "438:     mysql_options(mysql,MYSQL_OPT_PROTOCOL,(char*)&opt_protocol);",
          "439: #ifdef HAVE_SMEM",
          "440:   if (shared_memory_base_name)",
          "441:     mysql_options(mysql,MYSQL_SHARED_MEMORY_BASE_NAME,shared_memory_base_name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:   if (opt_bind_addr)",
          "444:     mysql_options(mysql,MYSQL_OPT_BIND,opt_bind_addr);",
          "",
          "---------------"
        ],
        "client/mysqlshow.c||client/mysqlshow.c": [
          "File: client/mysqlshow.c -> client/mysqlshow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: static char *shared_memory_base_name=0;",
          "39: #endif",
          "40: static uint opt_protocol=0;",
          "42: static void get_options(int *argc,char ***argv);",
          "43: static uint opt_mysql_port=0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: static char *opt_bind_addr = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117: #endif",
          "118:   if (opt_protocol)",
          "119:     mysql_options(&mysql,MYSQL_OPT_PROTOCOL,(char*)&opt_protocol);",
          "120: #ifdef HAVE_SMEM",
          "121:   if (shared_memory_base_name)",
          "122:     mysql_options(&mysql,MYSQL_SHARED_MEMORY_BASE_NAME,shared_memory_base_name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:   if (opt_bind_addr)",
          "122:     mysql_options(&mysql,MYSQL_OPT_BIND,opt_bind_addr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:   {\"autoclose\", OPT_AUTO_CLOSE, \"Automatically close the screen on exit for Netware.\",",
          "166:    0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0},",
          "167: #endif",
          "168:   {\"character-sets-dir\", 'c', \"Directory for character set files.\",",
          "169:    (uchar**) &charsets_dir, (uchar**) &charsets_dir, 0, GET_STR, REQUIRED_ARG, 0,",
          "170:    0, 0, 0, 0, 0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:   {\"bind-address\", 0, \"IP address to bind to.\",",
          "172:    (uchar**) &opt_bind_addr, (uchar**) &opt_bind_addr, 0, GET_STR,",
          "173:    REQUIRED_ARG, 0, 0, 0, 0, 0, 0},",
          "",
          "---------------"
        ],
        "include/mysql.h||include/mysql.h": [
          "File: include/mysql.h -> include/mysql.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:   MYSQL_OPT_USE_REMOTE_CONNECTION, MYSQL_OPT_USE_EMBEDDED_CONNECTION,",
          "170:   MYSQL_OPT_GUESS_CONNECTION, MYSQL_SET_CLIENT_IP, MYSQL_SECURE_AUTH,",
          "171:   MYSQL_REPORT_DATA_TRUNCATION, MYSQL_OPT_RECONNECT,",
          "173: };",
          "175: struct st_mysql_options {",
          "",
          "[Removed Lines]",
          "172:   MYSQL_OPT_SSL_VERIFY_SERVER_CERT",
          "",
          "[Added Lines]",
          "172:   MYSQL_OPT_SSL_VERIFY_SERVER_CERT, MYSQL_OPT_BIND",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:   my_bool unused3;",
          "194:   my_bool unused4;",
          "195:   enum mysql_option methods_to_use;",
          "198:   my_bool secure_auth;",
          "",
          "[Removed Lines]",
          "196:   char *client_ip;",
          "",
          "[Added Lines]",
          "196:   union {",
          "198:       The ip/hostname to use when authenticating",
          "199:       client against embedded server built with",
          "200:       grant tables - only used in embedded server",
          "202:     char *client_ip;",
          "205:       The local address to bind when connecting to",
          "206:       remote server - not used in embedded server",
          "208:     char *bind_address;",
          "209:   };",
          "",
          "---------------"
        ],
        "include/mysql.h.pp||include/mysql.h.pp": [
          "File: include/mysql.h.pp -> include/mysql.h.pp",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:   MYSQL_OPT_USE_REMOTE_CONNECTION, MYSQL_OPT_USE_EMBEDDED_CONNECTION,",
          "264:   MYSQL_OPT_GUESS_CONNECTION, MYSQL_SET_CLIENT_IP, MYSQL_SECURE_AUTH,",
          "265:   MYSQL_REPORT_DATA_TRUNCATION, MYSQL_OPT_RECONNECT,",
          "267: };",
          "268: struct st_mysql_options {",
          "269:   unsigned int connect_timeout, read_timeout, write_timeout;",
          "",
          "[Removed Lines]",
          "266:   MYSQL_OPT_SSL_VERIFY_SERVER_CERT",
          "",
          "[Added Lines]",
          "266:   MYSQL_OPT_SSL_VERIFY_SERVER_CERT, MYSQL_OPT_BIND",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:   my_bool unused3;",
          "287:   my_bool unused4;",
          "288:   enum mysql_option methods_to_use;",
          "290:   my_bool secure_auth;",
          "291:   my_bool report_data_truncation;",
          "292:   int (*local_infile_init)(void **, const char *, void *);",
          "",
          "[Removed Lines]",
          "289:   char *client_ip;",
          "",
          "[Added Lines]",
          "289:   union {",
          "290:     char *client_ip;",
          "291:     char *bind_address;",
          "292:   };",
          "",
          "---------------"
        ],
        "sql-common/client.c||sql-common/client.c": [
          "File: sql-common/client.c -> sql-common/client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1147:   \"connect-timeout\", \"local-infile\", \"disable-local-infile\",",
          "1148:   \"ssl-cipher\", \"max-allowed-packet\", \"protocol\", \"shared-memory-base-name\",",
          "1149:   \"multi-results\", \"multi-statements\", \"multi-queries\", \"secure-auth\",",
          "1151:   NullS",
          "1152: };",
          "",
          "[Removed Lines]",
          "1150:   \"report-data-truncation\",",
          "",
          "[Added Lines]",
          "1150:   \"report-data-truncation\", \"bind-address\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1357:           options->report_data_truncation= opt_arg ? test(atoi(opt_arg)) : 1;",
          "1358:           break;",
          "1359:  default:",
          "1360:    DBUG_PRINT(\"warning\",(\"unknown option: %s\",option[0]));",
          "1361:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1360:           my_free(options->bind_address, MYF(MY_ALLOW_ZERO_PTR));",
          "1361:           options->bind_address= my_strdup(opt_arg, MYF(MY_WME));",
          "1362:           break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2431:       (!mysql->options.protocol ||",
          "2432:        mysql->options.protocol == MYSQL_PROTOCOL_TCP))",
          "2433:   {",
          "2435:     int gai_errno;",
          "2436:     char port_buf[NI_MAXSERV];",
          "2437:     my_socket sock= SOCKET_ERROR;",
          "",
          "[Removed Lines]",
          "2434:     struct addrinfo *res_lst, hints, *t_res;",
          "2438:     int saved_error= 0, status= -1;",
          "",
          "[Added Lines]",
          "2438:     struct addrinfo *res_lst, *client_bind_ai_lst= NULL, hints, *t_res;",
          "2442:     int saved_error= 0, status= -1, bind_result= 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2480:       goto error;",
          "2481:     }",
          "2484:       A hostname might map to multiple IP addresses (IPv4/IPv6). Go over the",
          "2485:       list of IP addresses until a successful connection can be established.",
          "2487:     DBUG_PRINT(\"info\", (\"Try connect on all addresses for host.\"));",
          "2488:     for (t_res= res_lst; t_res; t_res= t_res->ai_next)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2488:     if (mysql->options.bind_address)",
          "2489:     {",
          "2490:       int bind_gai_errno= 0;",
          "2492:       DBUG_PRINT(\"info\",(\"Resolving addresses for client bind: '%s'\",",
          "2493:                          mysql->options.bind_address));",
          "2495:       bind_gai_errno= getaddrinfo(mysql->options.bind_address, 0,",
          "2496:                                   &hints, &client_bind_ai_lst);",
          "2497:       if (bind_gai_errno)",
          "2498:       {",
          "2499:         DBUG_PRINT(\"info\",(\"client bind getaddrinfo error %d\", bind_gai_errno));",
          "2500:         set_mysql_extended_error(mysql, CR_UNKNOWN_HOST, unknown_sqlstate,",
          "2501:                                  ER(CR_UNKNOWN_HOST),",
          "2502:                                  mysql->options.bind_address,",
          "2503:                                  bind_gai_errno);",
          "2505:         freeaddrinfo(res_lst);",
          "2506:         goto error;",
          "2507:       }",
          "2508:       DBUG_PRINT(\"info\", (\"  got address info for client bind name\"));",
          "2509:     }",
          "2514:       For each IP address, attempt to bind the socket to each client address",
          "2515:       for the client-side bind hostname until the bind is successful.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2490:       DBUG_PRINT(\"info\", (\"Create socket, family: %d  type: %d  proto: %d\",",
          "2491:                           t_res->ai_family, t_res->ai_socktype,",
          "2492:                           t_res->ai_protocol));",
          "2493:       sock= socket(t_res->ai_family, t_res->ai_socktype, t_res->ai_protocol);",
          "2494:       if (sock == SOCKET_ERROR)",
          "2495:       {",
          "2496:         saved_error= socket_errno;",
          "2497:         continue;",
          "2498:       }",
          "2500:       DBUG_PRINT(\"info\", (\"Connect socket\"));",
          "2501:       status= my_connect(sock, t_res->ai_addr, t_res->ai_addrlen,",
          "2502:                          mysql->options.connect_timeout);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2527:         DBUG_PRINT(\"info\", (\"Socket created was invalid\"));",
          "2533:       if (client_bind_ai_lst)",
          "2534:       {",
          "2535:         struct addrinfo* curr_bind_ai= NULL;",
          "2536:         DBUG_PRINT(\"info\", (\"Attempting to bind socket to bind address(es)\"));",
          "2539:            We'll attempt to bind to each of the addresses returned, until",
          "2540:            we find one that works.",
          "2541:            If none works, we'll try the next destination host address",
          "2542:            (if any)",
          "2544:         curr_bind_ai= client_bind_ai_lst;",
          "2546:         while (curr_bind_ai != NULL)",
          "2547:         {",
          "2549:           bind_result= bind(sock,",
          "2550:                             curr_bind_ai->ai_addr,",
          "2551:                             curr_bind_ai->ai_addrlen);",
          "2552:           if (!bind_result)",
          "2555:           DBUG_PRINT(\"info\", (\"bind failed, attempting another bind address\"));",
          "2557:           curr_bind_ai= curr_bind_ai->ai_next;",
          "2558:         }",
          "2560:         if (bind_result)",
          "2561:         {",
          "2563:             Could not bind to any client-side address with this destination",
          "2564:              Try the next destination address (if any)",
          "2566:           DBUG_PRINT(\"info\", (\"All bind attempts with this address failed\"));",
          "2567:           saved_error= socket_errno;",
          "2568:           closesocket(sock);",
          "2569:           continue;",
          "2570:         }",
          "2571:         DBUG_PRINT(\"info\", (\"Successfully bound client side of socket\"));",
          "2572:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2522:                 sock, status, saved_error));",
          "2524:     freeaddrinfo(res_lst);",
          "2526:     if (sock == SOCKET_ERROR)",
          "2527:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2599:     if (client_bind_ai_lst)",
          "2600:       freeaddrinfo(client_bind_ai_lst);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3511:   case MYSQL_OPT_RECONNECT:",
          "3512:     mysql->reconnect= *(my_bool *) arg;",
          "3513:     break;",
          "3514:   case MYSQL_OPT_SSL_VERIFY_SERVER_CERT:",
          "3515:     if (*(my_bool*) arg)",
          "3516:       mysql->options.client_flag|= CLIENT_SSL_VERIFY_SERVER_CERT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3591:   case MYSQL_OPT_BIND:",
          "3592:     my_free(mysql->options.bind_address, MYF(MY_ALLOW_ZERO_PTR));",
          "3593:     mysql->options.bind_address= my_strdup(arg, MYF(MY_WME));",
          "3594:     break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f00772691071865496832242ce45ce141639a68",
      "candidate_info": {
        "commit_hash": "5f00772691071865496832242ce45ce141639a68",
        "repo": "mysql/mysql-server",
        "commit_url": "https://github.com/mysql/mysql-server/commit/5f00772691071865496832242ce45ce141639a68",
        "files": [
          "client/mysql.cc",
          "client/mysqladmin.cc",
          "client/mysqltest.cc",
          "include/mysql.h",
          "include/mysql.h.pp",
          "include/mysql_com.h",
          "mysql-test/r/connect.result",
          "mysql-test/r/mysqld--help-notwin.result",
          "mysql-test/r/mysqld--help-win.result",
          "mysql-test/suite/sys_vars/r/disconnect_on_expired_password_basic.result",
          "mysql-test/suite/sys_vars/t/disconnect_on_expired_password_basic.test",
          "mysql-test/t/connect.test",
          "sql-common/client.c",
          "sql/sql_acl.cc",
          "sql/sql_acl.h",
          "sql/sys_vars.cc",
          "tests/mysql_client_test.c"
        ],
        "message": "WL#6587 : Protocol support for password expiration\n\nInitial implementation.\n* added a new capabilities flag CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS\n* Added a new server option (and a read only global variable)\ndisconnect-on-expired-password. Defailt is on. When off it will cause\nold clients to get a connection against an expired password account and\nget an error for every query that they try to execute that's not \nSET PASSWORD.\n* server will check for expired passwords at login and will refuse the \nlogin if the client didn't set CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS in \nthe client hello packet and if the disconnect_on_expired_password \nserver side option is set. A detailed error \n(ER_MUST_CHANGE_PASSWORD) will be sent in this case.\n* server always sets CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS in\nthe server hello packet. libmysql never checks for it.\n* new mysql_options() option MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS\nto set the CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS flag.\n* mysql binary sets MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS\n   if run in interactive mode\n* mysqladmin sets MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS\n   if the first command is 'password' or 'old_password'\n* mysqltest sets MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS\n* test cases added (both mtr tests and some C test code)\n* existing test case results updated to reflect the new server command\nline option.\n * fixed the linux compilation problems and test failures",
        "before_after_code_files": [
          "client/mysql.cc||client/mysql.cc",
          "client/mysqladmin.cc||client/mysqladmin.cc",
          "client/mysqltest.cc||client/mysqltest.cc",
          "include/mysql.h||include/mysql.h",
          "include/mysql.h.pp||include/mysql.h.pp",
          "include/mysql_com.h||include/mysql_com.h",
          "mysql-test/r/connect.result||mysql-test/r/connect.result",
          "mysql-test/r/mysqld--help-notwin.result||mysql-test/r/mysqld--help-notwin.result",
          "mysql-test/r/mysqld--help-win.result||mysql-test/r/mysqld--help-win.result",
          "mysql-test/suite/sys_vars/r/disconnect_on_expired_password_basic.result||mysql-test/suite/sys_vars/r/disconnect_on_expired_password_basic.result",
          "mysql-test/suite/sys_vars/t/disconnect_on_expired_password_basic.test||mysql-test/suite/sys_vars/t/disconnect_on_expired_password_basic.test",
          "mysql-test/t/connect.test||mysql-test/t/connect.test",
          "sql-common/client.c||sql-common/client.c",
          "sql/sql_acl.cc||sql/sql_acl.cc",
          "sql/sql_acl.h||sql/sql_acl.h",
          "sql/sys_vars.cc||sql/sys_vars.cc",
          "tests/mysql_client_test.c||tests/mysql_client_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "client/mysql.cc||client/mysql.cc",
            "client/mysqladmin.cc||client/mysqladmin.cc",
            "client/mysqltest.cc||client/mysqltest.cc",
            "include/mysql.h||include/mysql.h",
            "include/mysql.h.pp||include/mysql.h.pp",
            "sql-common/client.c||sql-common/client.c",
            "tests/mysql_client_test.c||tests/mysql_client_test.c"
          ],
          "candidate": [
            "client/mysql.cc||client/mysql.cc",
            "client/mysqladmin.cc||client/mysqladmin.cc",
            "client/mysqltest.cc||client/mysqltest.cc",
            "include/mysql.h||include/mysql.h",
            "include/mysql.h.pp||include/mysql.h.pp",
            "sql-common/client.c||sql-common/client.c",
            "tests/mysql_client_test.c||tests/mysql_client_test.c"
          ]
        }
      },
      "candidate_diff": {
        "client/mysql.cc||client/mysql.cc": [
          "File: client/mysql.cc -> client/mysql.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4846: static void",
          "4847: init_connection_options(MYSQL *mysql)",
          "4848: {",
          "4849:   if (opt_init_command)",
          "4850:     mysql_options(mysql, MYSQL_INIT_COMMAND, opt_init_command);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4849:   my_bool interactive= status.batch ? FALSE : TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4916:   mysql_options(mysql, MYSQL_OPT_CONNECT_ATTR_RESET, 0);",
          "4917:   mysql_options4(mysql, MYSQL_OPT_CONNECT_ATTR_ADD, \"program_name\", \"mysql\");",
          "4919: }",
          "",
          "[Removed Lines]",
          "4918:   return;",
          "",
          "[Added Lines]",
          "4921:   mysql_options(mysql, MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS, &interactive);",
          "",
          "---------------"
        ],
        "client/mysqladmin.cc||client/mysqladmin.cc": [
          "File: client/mysqladmin.cc -> client/mysqladmin.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "310: int main(int argc,char *argv[])",
          "311: {",
          "312:   int error= 0, ho_error;",
          "313:   MYSQL mysql;",
          "314:   char **commands, **save_argv;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313:   int first_command;",
          "314:   my_bool can_handle_passwords;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:     mysql_options(&mysql, MYSQL_ENABLE_CLEARTEXT_PLUGIN,",
          "386:                   (char*) &opt_enable_cleartext_plugin);",
          "388:   if (sql_connect(&mysql, option_wait))",
          "389:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:   first_command= find_type(argv[0], &command_typelib, FIND_TYPE_BASIC);",
          "391:   can_handle_passwords=",
          "392:     (first_command == ADMIN_PASSWORD || first_command == ADMIN_OLD_PASSWORD) ?",
          "393:     TRUE : FALSE;",
          "394:   mysql_options(&mysql, MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS,",
          "395:                 &can_handle_passwords);",
          "",
          "---------------"
        ],
        "client/mysqltest.cc||client/mysqltest.cc": [
          "File: client/mysqltest.cc -> client/mysqltest.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: #if !defined(HAVE_YASSL)",
          "131: static const char *opt_server_public_key= 0;",
          "132: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: static my_bool can_handle_expired_passwords= TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5314:   mysql_options(mysql, MYSQL_OPT_CONNECT_ATTR_RESET, 0);",
          "5315:   mysql_options4(mysql, MYSQL_OPT_CONNECT_ATTR_ADD,",
          "5316:                  \"program_name\", \"mysqltest\");",
          "5317:   while(!mysql_real_connect(mysql, host,user, pass, db, port, sock,",
          "5318:                             CLIENT_MULTI_STATEMENTS | CLIENT_REMEMBER_OPTIONS))",
          "5319:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5318:   mysql_options(mysql, MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS,",
          "5319:                 &can_handle_expired_passwords);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5418:   mysql_options(con, MYSQL_OPT_CONNECT_ATTR_RESET, 0);",
          "5419:   mysql_options4(con, MYSQL_OPT_CONNECT_ATTR_ADD, \"program_name\", \"mysqltest\");",
          "5420:   while (!mysql_real_connect(con, host, user, pass, db, port, sock ? sock: 0,",
          "5421:                           CLIENT_MULTI_STATEMENTS))",
          "5422:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5423:   mysql_options(con, MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS,",
          "5424:                 &can_handle_expired_passwords);",
          "",
          "---------------"
        ],
        "include/mysql.h||include/mysql.h": [
          "File: include/mysql.h -> include/mysql.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   MYSQL_OPT_CONNECT_ATTR_RESET, MYSQL_OPT_CONNECT_ATTR_ADD,",
          "175:   MYSQL_OPT_CONNECT_ATTR_DELETE,",
          "176:   MYSQL_SERVER_PUBLIC_KEY,",
          "178: };",
          "",
          "[Removed Lines]",
          "177:   MYSQL_ENABLE_CLEARTEXT_PLUGIN",
          "",
          "[Added Lines]",
          "177:   MYSQL_ENABLE_CLEARTEXT_PLUGIN,",
          "178:   MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS",
          "",
          "---------------"
        ],
        "include/mysql.h.pp||include/mysql.h.pp": [
          "File: include/mysql.h.pp -> include/mysql.h.pp",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:   MYSQL_OPT_CONNECT_ATTR_RESET, MYSQL_OPT_CONNECT_ATTR_ADD,",
          "272:   MYSQL_OPT_CONNECT_ATTR_DELETE,",
          "273:   MYSQL_SERVER_PUBLIC_KEY,",
          "275: };",
          "276: struct st_mysql_options_extention;",
          "277: struct st_mysql_options {",
          "",
          "[Removed Lines]",
          "274:   MYSQL_ENABLE_CLEARTEXT_PLUGIN",
          "",
          "[Added Lines]",
          "274:   MYSQL_ENABLE_CLEARTEXT_PLUGIN,",
          "275:   MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS",
          "",
          "---------------"
        ],
        "include/mysql_com.h||include/mysql_com.h": [
          "File: include/mysql_com.h -> include/mysql_com.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "181: #define CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA (1UL << 21)",
          "183: #define CLIENT_SSL_VERIFY_SERVER_CERT (1UL << 30)",
          "184: #define CLIENT_REMEMBER_OPTIONS (1UL << 31)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184: #define CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS (1UL << 22)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190: #endif",
          "219:   Switch off the flags that are optional and depending on build flags",
          "",
          "[Removed Lines]",
          "193: #define CLIENT_ALL_FLAGS  (CLIENT_LONG_PASSWORD | \\",
          "194:                            CLIENT_FOUND_ROWS | \\",
          "195:                            CLIENT_LONG_FLAG | \\",
          "196:                            CLIENT_CONNECT_WITH_DB | \\",
          "197:                            CLIENT_NO_SCHEMA | \\",
          "198:                            CLIENT_COMPRESS | \\",
          "199:                            CLIENT_ODBC | \\",
          "200:                            CLIENT_LOCAL_FILES | \\",
          "201:                            CLIENT_IGNORE_SPACE | \\",
          "202:                            CLIENT_PROTOCOL_41 | \\",
          "203:                            CLIENT_INTERACTIVE | \\",
          "204:                            CLIENT_SSL | \\",
          "205:                            CLIENT_IGNORE_SIGPIPE | \\",
          "206:                            CLIENT_TRANSACTIONS | \\",
          "207:                            CLIENT_RESERVED | \\",
          "208:                            CLIENT_SECURE_CONNECTION | \\",
          "209:                            CLIENT_MULTI_STATEMENTS | \\",
          "210:                            CLIENT_MULTI_RESULTS | \\",
          "211:                            CLIENT_PS_MULTI_RESULTS | \\",
          "212:                            CLIENT_SSL_VERIFY_SERVER_CERT | \\",
          "213:                            CLIENT_REMEMBER_OPTIONS | \\",
          "214:                            CLIENT_PLUGIN_AUTH | \\",
          "215:                            CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA | \\",
          "216:                            CLIENT_CONNECT_ATTRS)",
          "",
          "[Added Lines]",
          "196: #define CLIENT_ALL_FLAGS  (CLIENT_LONG_PASSWORD \\",
          "197:                            | CLIENT_FOUND_ROWS \\",
          "198:                            | CLIENT_LONG_FLAG \\",
          "199:                            | CLIENT_CONNECT_WITH_DB \\",
          "200:                            | CLIENT_NO_SCHEMA \\",
          "201:                            | CLIENT_COMPRESS \\",
          "202:                            | CLIENT_ODBC \\",
          "203:                            | CLIENT_LOCAL_FILES \\",
          "204:                            | CLIENT_IGNORE_SPACE \\",
          "205:                            | CLIENT_PROTOCOL_41 \\",
          "206:                            | CLIENT_INTERACTIVE \\",
          "207:                            | CLIENT_SSL \\",
          "208:                            | CLIENT_IGNORE_SIGPIPE \\",
          "209:                            | CLIENT_TRANSACTIONS \\",
          "210:                            | CLIENT_RESERVED \\",
          "211:                            | CLIENT_SECURE_CONNECTION \\",
          "212:                            | CLIENT_MULTI_STATEMENTS \\",
          "213:                            | CLIENT_MULTI_RESULTS \\",
          "214:                            | CLIENT_PS_MULTI_RESULTS \\",
          "215:                            | CLIENT_SSL_VERIFY_SERVER_CERT \\",
          "216:                            | CLIENT_REMEMBER_OPTIONS \\",
          "217:                            | CLIENT_PLUGIN_AUTH \\",
          "218:                            | CLIENT_CONNECT_ATTRS \\",
          "219:                            | CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA \\",
          "220:                            | CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS \\",
          "221: )",
          "",
          "---------------"
        ],
        "mysql-test/r/connect.result||mysql-test/r/connect.result": [
          "File: mysql-test/r/connect.result -> mysql-test/r/connect.result",
          "--- Hunk 1 ---",
          "[Context before]",
          "393: DROP FUNCTION last_t1;",
          "394: DROP TABLE t1;",
          "395: DROP USER must_change@localhost;",
          "396: # ------------------------------------------------------------------",
          "397: # -- End of 5.6 tests",
          "398: # ------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396: #",
          "397: # WL#6587:  Protocol support for password expiration",
          "398: #",
          "399: CREATE USER wl6587@localhost IDENTIFIED BY 'wl6587';",
          "400: ALTER USER wl6587@localhost PASSWORD EXPIRE;",
          "401: # non-interactive mysql should fail",
          "402: Warning: Using a password on the command line interface can be insecure.",
          "403: ERROR 1820 (HY000): You must SET PASSWORD before executing this statement",
          "404: # mysqladmin non-password should fail",
          "405: Warning: Using a password on the command line interface can be insecure.",
          "406: mysqladmin: connect to server at 'localhost' failed",
          "407: error: 'You must SET PASSWORD before executing this statement'",
          "408: # mysqladmin password should work",
          "409: Warning: Using a password on the command line interface can be insecure.",
          "410: DROP USER wl6587@localhost;",
          "",
          "---------------"
        ],
        "mysql-test/r/mysqld--help-notwin.result||mysql-test/r/mysqld--help-notwin.result": [
          "File: mysql-test/r/mysqld--help-notwin.result -> mysql-test/r/mysqld--help-notwin.result",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:  client that does INSERT DELAYED will wait until there is",
          "166:  room in the queue again. This variable is deprecated",
          "167:  along with INSERT DELAYED.",
          "168:  --disconnect-slave-event-count=#",
          "169:  Option used by mysql-test for debugging and testing of",
          "170:  replication.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:  --disconnect-on-expired-password",
          "169:  Give clients that don't signal password expiration",
          "170:  support execution time error(s) instead of connection",
          "171:  error",
          "172:  (Defaults to on; use --skip-disconnect-on-expired-password to disable.)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1007: delayed-insert-limit 100",
          "1008: delayed-insert-timeout 300",
          "1009: delayed-queue-size 1000",
          "1010: disconnect-slave-event-count 0",
          "1011: div-precision-increment 4",
          "1012: end-markers-in-json FALSE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1015: disconnect-on-expired-password TRUE",
          "",
          "---------------"
        ],
        "mysql-test/r/mysqld--help-win.result||mysql-test/r/mysqld--help-win.result": [
          "File: mysql-test/r/mysqld--help-win.result -> mysql-test/r/mysqld--help-win.result",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:  client that does INSERT DELAYED will wait until there is",
          "166:  room in the queue again. This variable is deprecated",
          "167:  along with INSERT DELAYED.",
          "168:  --disconnect-slave-event-count=#",
          "169:  Option used by mysql-test for debugging and testing of",
          "170:  replication.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:  --disconnect-on-expired-password",
          "169:  Give clients that don't signal password expiration",
          "170:  support execution time error(s) instead of connection",
          "171:  error",
          "172:  (Defaults to on; use --skip-disconnect-on-expired-password to disable.)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1015: delayed-insert-limit 100",
          "1016: delayed-insert-timeout 300",
          "1017: delayed-queue-size 1000",
          "1018: disconnect-slave-event-count 0",
          "1019: div-precision-increment 4",
          "1020: end-markers-in-json FALSE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1023: disconnect-on-expired-password TRUE",
          "",
          "---------------"
        ],
        "mysql-test/suite/sys_vars/r/disconnect_on_expired_password_basic.result||mysql-test/suite/sys_vars/r/disconnect_on_expired_password_basic.result": [
          "File: mysql-test/suite/sys_vars/r/disconnect_on_expired_password_basic.result -> mysql-test/suite/sys_vars/r/disconnect_on_expired_password_basic.result",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: SELECT @@GLOBAL.disconnect_on_expired_password;",
          "2: @@GLOBAL.disconnect_on_expired_password",
          "3: 1",
          "4: 1 Expected",
          "5: SET @@GLOBAL.disconnect_on_expired_password=0;",
          "6: ERROR HY000: Variable 'disconnect_on_expired_password' is a read only variable",
          "7: Expected error 'Read only variable'",
          "8: SELECT @@GLOBAL.disconnect_on_expired_password;",
          "9: @@GLOBAL.disconnect_on_expired_password",
          "10: 1",
          "11: 1 Expected",
          "12: SELECT @@disconnect_on_expired_password = @@GLOBAL.disconnect_on_expired_password;",
          "13: @@disconnect_on_expired_password = @@GLOBAL.disconnect_on_expired_password",
          "14: 1",
          "15: 1 Expected",
          "16: SELECT COUNT(@@local.disconnect_on_expired_password);",
          "17: ERROR HY000: Variable 'disconnect_on_expired_password' is a GLOBAL variable",
          "18: Expected error 'Variable is a GLOBAL variable'",
          "19: SELECT COUNT(@@SESSION.disconnect_on_expired_password);",
          "20: ERROR HY000: Variable 'disconnect_on_expired_password' is a GLOBAL variable",
          "21: Expected error 'Variable is a GLOBAL variable'",
          "22: SELECT @@GLOBAL.disconnect_on_expired_password;",
          "23: @@GLOBAL.disconnect_on_expired_password",
          "24: 1",
          "25: 1 Expected",
          "",
          "---------------"
        ],
        "mysql-test/suite/sys_vars/t/disconnect_on_expired_password_basic.test||mysql-test/suite/sys_vars/t/disconnect_on_expired_password_basic.test": [
          "File: mysql-test/suite/sys_vars/t/disconnect_on_expired_password_basic.test -> mysql-test/suite/sys_vars/t/disconnect_on_expired_password_basic.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: SELECT @@GLOBAL.disconnect_on_expired_password;",
          "2: --echo 1 Expected",
          "3: --error ER_INCORRECT_GLOBAL_LOCAL_VAR",
          "4: SET @@GLOBAL.disconnect_on_expired_password=0;",
          "5: --echo Expected error 'Read only variable'",
          "6: SELECT @@GLOBAL.disconnect_on_expired_password;",
          "7: --echo 1 Expected",
          "8: SELECT @@disconnect_on_expired_password = @@GLOBAL.disconnect_on_expired_password;",
          "9: --echo 1 Expected",
          "10: --Error ER_INCORRECT_GLOBAL_LOCAL_VAR",
          "11: SELECT COUNT(@@local.disconnect_on_expired_password);",
          "12: --echo Expected error 'Variable is a GLOBAL variable'",
          "13: --Error ER_INCORRECT_GLOBAL_LOCAL_VAR",
          "14: SELECT COUNT(@@SESSION.disconnect_on_expired_password);",
          "15: --echo Expected error 'Variable is a GLOBAL variable'",
          "16: SELECT @@GLOBAL.disconnect_on_expired_password;",
          "17: --echo 1 Expected",
          "",
          "---------------"
        ],
        "mysql-test/t/connect.test||mysql-test/t/connect.test": [
          "File: mysql-test/t/connect.test -> mysql-test/t/connect.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "465: DROP TABLE t1;",
          "466: DROP USER must_change@localhost;",
          "468: --echo # ------------------------------------------------------------------",
          "469: --echo # -- End of 5.6 tests",
          "470: --echo # ------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "469: --echo #",
          "470: --echo # WL#6587:  Protocol support for password expiration",
          "471: --echo #",
          "473: CREATE USER wl6587@localhost IDENTIFIED BY 'wl6587';",
          "474: ALTER USER wl6587@localhost PASSWORD EXPIRE;",
          "476: --echo # non-interactive mysql should fail",
          "477: --error 1",
          "478: --exec $MYSQL -uwl6587 --password=wl6587 test -e \"SELECT USER()\" 2>&1",
          "480: --echo # mysqladmin non-password should fail",
          "481: --replace_regex /.*mysqladmin.*: connect/mysqladmin: connect/",
          "482: --error 1",
          "483: --exec $MYSQLADMIN -S $MASTER_MYSOCK -P $MASTER_MYPORT -uwl6587 --password=wl6587 status 2>&1",
          "485: --echo # mysqladmin password should work",
          "486: --exec $MYSQLADMIN -S $MASTER_MYSOCK -P $MASTER_MYPORT -uwl6587 --password=wl6587 password wl6587-2 2>&1",
          "488: DROP USER wl6587@localhost;",
          "",
          "---------------"
        ],
        "sql-common/client.c||sql-common/client.c": [
          "File: sql-common/client.c -> sql-common/client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4420:     mysql->options.extension->enable_cleartext_plugin=",
          "4421:       (*(my_bool*) arg) ? TRUE : FALSE;",
          "4422:     break;",
          "4425:   default:",
          "4426:     DBUG_RETURN(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4423:   case MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS:",
          "4424:     if (*(my_bool*) arg)",
          "4425:       mysql->options.client_flag|= CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS;",
          "4426:     else",
          "4427:       mysql->options.client_flag&= ~CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS;",
          "4428:     break;",
          "",
          "---------------"
        ],
        "sql/sql_acl.cc||sql/sql_acl.cc": [
          "File: sql/sql_acl.cc -> sql/sql_acl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: using std::max;",
          "66: bool mysql_user_table_is_in_short_password_format= false;",
          "67: bool auth_plugin_is_built_in(const char *plugin_name);",
          "68: bool auth_plugin_supports_expiration(const char *plugin_name);",
          "69: void optimize_plugin_compare_by_pointer(LEX_STRING *plugin_name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: my_bool disconnect_on_expired_password= TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10851:                         mpvio.db.str ? mpvio.db.str : (char*) \"\");",
          "10852:   }",
          "10854:   if (res > CR_OK && mpvio.status != MPVIO_EXT::SUCCESS)",
          "10855:   {",
          "10856:     Host_errors errors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10855:   if (unlikely(acl_user && acl_user->password_expired",
          "10856:                && !(mpvio.client_capabilities &",
          "10857:                     CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS)",
          "10858:                && disconnect_on_expired_password))",
          "10859:   {",
          "10861:       Clients that don't signal password expiration support",
          "10862:       get a connect error.",
          "10864:     res= CR_ERROR;",
          "10865:     mpvio.status= MPVIO_EXT::FAILURE;",
          "10867:     my_error(ER_MUST_CHANGE_PASSWORD, MYF(0));",
          "10868:     general_log_print(thd, COM_CONNECT, ER(ER_MUST_CHANGE_PASSWORD));",
          "10869:     if (log_warnings > 1)",
          "10870:       sql_print_warning(\"%s\", ER(ER_MUST_CHANGE_PASSWORD));",
          "10871:   }",
          "",
          "---------------"
        ],
        "sql/sql_acl.h||sql/sql_acl.h": [
          "File: sql/sql_acl.h -> sql/sql_acl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "229: extern const TABLE_FIELD_DEF mysql_db_table_def;",
          "230: extern bool mysql_user_table_is_in_short_password_format;",
          "231: extern const char *command_array[];",
          "232: extern uint        command_lengths[];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231: extern my_bool disconnect_on_expired_password;",
          "",
          "---------------"
        ],
        "sql/sys_vars.cc||sql/sys_vars.cc": [
          "File: sql/sys_vars.cc -> sql/sys_vars.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4551: #endif",
          "4553: #endif // HAVE_REPLICATION",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4557: static Sys_var_mybool Sys_disconnect_on_expired_password(",
          "4558:        \"disconnect_on_expired_password\",",
          "4559:        \"Give clients that don't signal password expiration support execution time error(s) instead of connection error\",",
          "4560:        READ_ONLY GLOBAL_VAR(disconnect_on_expired_password),",
          "4561:        CMD_LINE(OPT_ARG), DEFAULT(TRUE));",
          "",
          "---------------"
        ],
        "tests/mysql_client_test.c||tests/mysql_client_test.c": [
          "File: tests/mysql_client_test.c -> tests/mysql_client_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19146: }",
          "19149: static struct my_tests_st my_tests[]= {",
          "19150:   { \"disable_query_logs\", disable_query_logs },",
          "19151:   { \"test_view_sp_list_fields\", test_view_sp_list_fields },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19150:   WL#56587: Protocol support for password expiration",
          "19152: static void test_wl6587()",
          "19153: {",
          "19154:   int rc;",
          "19155:   MYSQL *l_mysql;",
          "19156:   my_bool can;",
          "19158:   myheader(\"test_wl6587\");",
          "19161:   rc= mysql_query(mysql,",
          "19162:                   \"CREATE USER wl6587_cli@localhost IDENTIFIED BY 'wl6587'\");",
          "19163:   myquery(rc);",
          "19164:   rc= mysql_query(mysql, \"ALTER USER wl6587_cli@localhost PASSWORD EXPIRE\");",
          "19165:   myquery(rc);",
          "19168:   l_mysql= mysql_client_init(NULL);",
          "19169:   DIE_UNLESS(l_mysql != NULL);",
          "19172:   l_mysql= mysql_real_connect(l_mysql, opt_host, \"wl6587_cli\",",
          "19173:                               \"wl6587\", \"test\", opt_port,",
          "19174:                               opt_unix_socket, 0);",
          "19175:   DIE_UNLESS(l_mysql == 0);",
          "19177:   l_mysql= mysql_client_init(NULL);",
          "19178:   DIE_UNLESS(l_mysql != NULL);",
          "19181:   l_mysql= mysql_real_connect(l_mysql, opt_host, \"wl6587_cli\",",
          "19182:                          \"wl6587\", \"test\", opt_port,",
          "19183:                          opt_unix_socket,",
          "19184:                          CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS);",
          "19185:   DIE_UNLESS(l_mysql != 0);",
          "19188:   rc= mysql_query(l_mysql, \"SELECT USER()\");",
          "19189:   myerror2(l_mysql,NULL);",
          "19190:   DIE_UNLESS(rc != 0);",
          "19192:   mysql_close(l_mysql);",
          "19196:   l_mysql= mysql_client_init(NULL);",
          "19197:   DIE_UNLESS(l_mysql != NULL);",
          "19199:   can= TRUE;",
          "19200:   rc= mysql_options(l_mysql, MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS, &can);",
          "19201:   DIE_UNLESS(rc == 0);",
          "19203:   l_mysql= mysql_real_connect(l_mysql, opt_host, \"wl6587_cli\",",
          "19204:                          \"wl6587\", \"test\", opt_port,",
          "19205:                          opt_unix_socket, 0);",
          "19206:   DIE_UNLESS(l_mysql != 0);",
          "19209:   rc= mysql_query(l_mysql, \"SELECT USER()\");",
          "19210:   myerror2(l_mysql,NULL);",
          "19211:   DIE_UNLESS(rc != 0);",
          "19213:   mysql_close(l_mysql);",
          "19217:   l_mysql= mysql_client_init(NULL);",
          "19218:   DIE_UNLESS(l_mysql != NULL);",
          "19220:   can= FALSE;",
          "19221:   rc= mysql_options(l_mysql, MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS, &can);",
          "19222:   DIE_UNLESS(rc == 0);",
          "19225:   l_mysql= mysql_real_connect(l_mysql, opt_host, opt_user,",
          "19226:                          opt_password, current_db, opt_port,",
          "19227:                          opt_unix_socket, 0);",
          "19228:   DIE_UNLESS(l_mysql != 0);",
          "19230:   rc= mysql_change_user(l_mysql, \"wl6587_cli\", \"wl6587\", \"test\");",
          "19231:   DIE_UNLESS(rc == TRUE);",
          "19233:   mysql_close(l_mysql);",
          "19236:   rc= mysql_query(mysql, \"DROP USER wl6587_cli@localhost\");",
          "19237:   myquery(rc);",
          "19238: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19416:   { \"test_bug13001491\", test_bug13001491 },",
          "19417:   { \"test_wl5968\", test_wl5968 },",
          "19418:   { \"test_wl5924\", test_wl5924 },",
          "19419:   { 0, 0 }",
          "19420: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19511:   { \"test_wl6587\", test_wl6587 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a44c8fe988b2054a5822c71c282b433c97f2d4fe",
      "candidate_info": {
        "commit_hash": "a44c8fe988b2054a5822c71c282b433c97f2d4fe",
        "repo": "mysql/mysql-server",
        "commit_url": "https://github.com/mysql/mysql-server/commit/a44c8fe988b2054a5822c71c282b433c97f2d4fe",
        "files": [
          "sql-common/client.c",
          "sql-common/client_authentication.cc"
        ],
        "message": "Bug #17675203: --DEFAULT-AUTH OF MYSQL DOES NOT WORK FOR SHA256_PASSWORD PLUGIN\n\nThe default client authentication plugin could have been invoked \nbefore the client reply was sent (and thus the SSL layer established).\nThis was preventing the client plugins from being able of reliably \ndetecting whether there is an SSL layer or not.\n\nMoved the SSL layer establishment out of send_client_reply_packet()\nto an explicit step in mysql_real_connect().\n\nRemoved the heuristics introduced by WL#6791 in \nsha256_password_auth_client()",
        "before_after_code_files": [
          "sql-common/client.c||sql-common/client.c",
          "sql-common/client_authentication.cc||sql-common/client_authentication.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sql-common/client.c||sql-common/client.c",
            "sql-common/client_authentication.cc||sql-common/client_authentication.cc"
          ],
          "candidate": [
            "sql-common/client.c||sql-common/client.c",
            "sql-common/client_authentication.cc||sql-common/client_authentication.cc"
          ]
        }
      },
      "candidate_diff": {
        "sql-common/client.c||sql-common/client.c": [
          "File: sql-common/client.c -> sql-common/client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3239:   return res;",
          "3240: }",
          "3277: {",
          "3279:   NET *net= &mysql->net;",
          "3297:   mysql->client_flag|= mysql->options.client_flag;",
          "3298:   mysql->client_flag|= CLIENT_CAPABILITIES;",
          "",
          "[Removed Lines]",
          "3243: #define MAX_CONNECTION_ATTR_STORAGE_LENGTH 65536",
          "3246:   sends a client authentication packet (second packet in the 3-way handshake)",
          "3248:   Packet format (when the server is 4.0 or earlier):",
          "3250:     Bytes       Content",
          "3251:     -----       ----",
          "3252:     2           client capabilities",
          "3253:     3           max packet size",
          "3254:     n           user name, \\0-terminated",
          "3255:     9           scramble_323, \\0-terminated",
          "3257:   Packet format (when the server is 4.1 or newer):",
          "3259:     Bytes       Content",
          "3260:     -----       ----",
          "3261:     4           client capabilities",
          "3262:     4           max packet size",
          "3263:     1           charset number",
          "3264:     23          reserved (always 0)",
          "3265:     n           user name, \\0-terminated",
          "3266:     n           plugin auth data (e.g. scramble), length encoded",
          "3267:     n           database name, \\0-terminated",
          "3268:                 (if CLIENT_CONNECT_WITH_DB is set in the capabilities)",
          "3269:     n           client auth plugin name - \\0-terminated string,",
          "3270:                 (if CLIENT_PLUGIN_AUTH is set in the capabilities)",
          "3272:   @retval 0 ok",
          "3273:   @retval 1 error",
          "3275: static int send_client_reply_packet(MCPVIO_EXT *mpvio,",
          "3276:                                     const uchar *data, int data_len)",
          "3278:   MYSQL *mysql= mpvio->mysql;",
          "3280:   char *buff, *end;",
          "3281:   size_t buff_size;",
          "3282:   size_t connect_attrs_len=",
          "3283:     (mysql->server_capabilities & CLIENT_CONNECT_ATTRS &&",
          "3284:      mysql->options.extension) ?",
          "3285:     mysql->options.extension->connection_attributes_length : 0;",
          "3287:   DBUG_ASSERT(connect_attrs_len < MAX_CONNECTION_ATTR_STORAGE_LENGTH);",
          "3291:     see end= buff+32 below, fixed size of the packet is 32 bytes.",
          "3292:      +9 because data is a length encoded binary where meta data size is max 9.",
          "3294:   buff_size= 33 + USERNAME_LENGTH + data_len + 9 + NAME_LEN + NAME_LEN + connect_attrs_len + 9;",
          "3295:   buff= my_alloca(buff_size);",
          "",
          "[Added Lines]",
          "3243:   Fill in the beginning of the client reply packet.",
          "3245:   Used to fill in the beginning of the client reply packet",
          "3246:   or the ssl request packet.",
          "3248:   @param       mysql     The mysql handler to operate",
          "3249:   @param[out]  buff      The buffer to receive the packet",
          "3250:   @param       buff_size The max size of the buffer",
          "3251:   @return                one past to where the buffer is filled",
          "3254: static char *",
          "3255: mysql_fill_packet_header(MYSQL *mysql, char *buff, size_t buff_size)",
          "3258:   char *end;",
          "3259:   uchar *buff_p= (uchar*) buff;",
          "3261:   if (mysql->client_flag & CLIENT_PROTOCOL_41)",
          "3262:   {",
          "3264:     DBUG_ASSERT(buff_size >= 32);",
          "3266:     int4store(buff_p, mysql->client_flag);",
          "3267:     int4store(buff_p + 4, net->max_packet_size);",
          "3268:     buff[8]= (char) mysql->charset->number;",
          "3269:     memset(buff + 9, 0, 32 - 9);",
          "3270:     end= buff + 32;",
          "3271:   }",
          "3272:   else",
          "3273:   {",
          "3274:     DBUG_ASSERT(buff_size >= 5);",
          "3275:     DBUG_ASSERT(mysql->client_flag <= MAXUINT16);",
          "3277:     int2store(buff_p, (uint16) mysql->client_flag);",
          "3278:     int3store(buff_p + 2, net->max_packet_size);",
          "3279:     end= buff + 5;",
          "3280:   }",
          "3281:   return end;",
          "3282: }",
          "3286:   Calcualtes client capabilities in effect (mysql->client_flag)",
          "3288:   Needs to be called immediately after receiving the server handshake packet.",
          "3290:   @param  mysql   the connection context",
          "3291:   @param  db      The database specified by the client app",
          "3292:   @param  db      The client flag as specified by the client app",
          "3295: static void",
          "3296: cli_calculate_client_flag(MYSQL *mysql, const char *db, ulong client_flag)",
          "3297: {",
          "3298:   mysql->client_flag= client_flag;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3308:       (mysql->options.extension && mysql->options.extension->ssl_crl) ||",
          "3309:       (mysql->options.extension && mysql->options.extension->ssl_crlpath) ||",
          "3310:       (mysql->options.extension && mysql->options.extension->ssl_enforce))",
          "3312:   if (mysql->options.use_ssl)",
          "3313:     mysql->client_flag |= CLIENT_SSL;",
          "3316:     mysql->client_flag|= CLIENT_CONNECT_WITH_DB;",
          "3317:   else",
          "3318:     mysql->client_flag&= ~CLIENT_CONNECT_WITH_DB;",
          "3321:   mysql->client_flag= mysql->client_flag &",
          "3325: #ifndef HAVE_COMPRESS",
          "3326:   mysql->client_flag&= ~CLIENT_COMPRESS;",
          "3327: #endif",
          "3346: #ifdef HAVE_OPENSSL",
          "3348:   if (mysql->options.extension && mysql->options.extension->ssl_enforce)",
          "3349:   {",
          "3355:     DBUG_ASSERT(mysql->options.use_ssl);",
          "",
          "[Removed Lines]",
          "3311:     mysql->options.use_ssl = TRUE;",
          "3315:   if (mpvio->db)",
          "3322:                        (~(CLIENT_COMPRESS | CLIENT_SSL | CLIENT_PROTOCOL_41)",
          "3323:                        | mysql->server_capabilities);",
          "3329:   if (mysql->client_flag & CLIENT_PROTOCOL_41)",
          "3330:   {",
          "3332:     uchar *buff_p= (uchar*) buff;",
          "3333:     int4store(buff_p,mysql->client_flag);",
          "3334:     int4store(buff_p + 4, net->max_packet_size);",
          "3335:     buff[8]= (char) mysql->charset->number;",
          "3336:     memset(buff+9, 0, 32-9);",
          "3337:     end= buff+32;",
          "3338:   }",
          "3339:   else",
          "3340:   {",
          "3341:     uchar *buff_p= (uchar*) buff;",
          "3342:     int2store(buff_p, (uint16)mysql->client_flag);",
          "3343:     int3store(buff_p + 2, net->max_packet_size);",
          "3344:     end= buff+5;",
          "3345:   }",
          "3351:       ssl_enforce=1 means enforce ssl",
          "3352:       Don't fallback on unencrypted connection.",
          "",
          "[Added Lines]",
          "3313:       mysql->options.use_ssl= TRUE;",
          "3317:   if (db)",
          "3324:     (~(CLIENT_COMPRESS | CLIENT_SSL | CLIENT_PROTOCOL_41)",
          "3325:     | mysql->server_capabilities);",
          "3330: }",
          "3334: Establishes SSL if requested and supported.",
          "3336: @param  mysql   the connection handle",
          "3337: @retval 0       success",
          "3338: @retval 1       failure",
          "3340: static int",
          "3341: cli_establish_ssl(MYSQL *mysql)",
          "3342: {",
          "3343:   NET *net= &mysql->net;",
          "3349:     ssl_enforce=1 means enforce ssl",
          "3350:     Don't fallback on unencrypted connection.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3377:   if ((mysql->server_capabilities & CLIENT_SSL) && mysql->options.use_ssl)",
          "",
          "[Removed Lines]",
          "3370:    use_ssl=0 => Disable ssl and connect using unencrypted channel if server",
          "3371:      allows it",
          "3373:    use_ssl=1, ssl_enforce=0 (default) => attempt ssl connection if possible but",
          "3374:      fallback on unencrypted connection if possible.",
          "",
          "[Added Lines]",
          "3368:   use_ssl=0 => Disable ssl and connect using unencrypted channel if server",
          "3369:   allows it",
          "3371:   use_ssl=1, ssl_enforce=0 (default) => attempt ssl connection if possible but",
          "3372:   fallback on unencrypted connection if possible.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3382:     enum enum_ssl_init_error ssl_init_error;",
          "3383:     const char *cert_error;",
          "3384:     unsigned long ssl_error;",
          "3386:     if (!mysql->options.ssl_cipher)",
          "3387:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3383:     char buff[33], *end;",
          "3385:     end= mysql_fill_packet_header(mysql, buff, sizeof(buff));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3389:     }",
          "3397:     {",
          "3398:       set_mysql_extended_error(mysql, CR_SERVER_LOST, unknown_sqlstate,",
          "3399:                                ER(CR_SERVER_LOST_EXTENDED),",
          "",
          "[Removed Lines]",
          "3392:       Send mysql->client_flag, max_packet_size - unencrypted otherwise",
          "3393:       the server does not know we want to do SSL",
          "3395:     MYSQL_TRACE(SEND_SSL_REQUEST, mysql, (end - buff, (const unsigned char*)buff));",
          "3396:     if (my_net_write(net, (uchar*)buff, (size_t) (end-buff)) || net_flush(net))",
          "",
          "[Added Lines]",
          "3393:     Send mysql->client_flag, max_packet_size - unencrypted otherwise",
          "3394:     the server does not know we want to do SSL",
          "3396:     MYSQL_TRACE(SEND_SSL_REQUEST, mysql, (end - buff, (const unsigned char*) buff));",
          "3397:     if (my_net_write(net, (uchar*) buff, (size_t) (end - buff)) || net_flush(net))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3408:     if (!(ssl_fd= new_VioSSLConnectorFd(options->ssl_key,",
          "3418:     {",
          "3419:       set_mysql_extended_error(mysql, CR_SSL_CONNECTION_ERROR, unknown_sqlstate,",
          "3420:                                ER(CR_SSL_CONNECTION_ERROR), sslGetErrString(ssl_init_error));",
          "",
          "[Removed Lines]",
          "3409:                                         options->ssl_cert,",
          "3410:                                         options->ssl_ca,",
          "3411:                                         options->ssl_capath,",
          "3412:                                         options->ssl_cipher,",
          "3413:                                         &ssl_init_error,",
          "3414:                                         options->extension ?",
          "3415:                                         options->extension->ssl_crl : NULL,",
          "3416:                                         options->extension ?",
          "3417:                                         options->extension->ssl_crlpath : NULL)))",
          "",
          "[Added Lines]",
          "3410:       options->ssl_cert,",
          "3411:       options->ssl_ca,",
          "3412:       options->ssl_capath,",
          "3413:       options->ssl_cipher,",
          "3414:       &ssl_init_error,",
          "3415:       options->extension ?",
          "3416:       options->extension->ssl_crl : NULL,",
          "3417:       options->extension ?",
          "3418:       options->extension->ssl_crlpath : NULL)))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3426:     DBUG_PRINT(\"info\", (\"IO layer change in progress...\"));",
          "3427:     MYSQL_TRACE(SSL_CONNECT, mysql, ());",
          "3428:     if (sslconnect(ssl_fd, net->vio,",
          "3431:       char buf[512];",
          "3432:       ERR_error_string_n(ssl_error, buf, 512);",
          "3433:       buf[511]= 0;",
          "",
          "[Removed Lines]",
          "3429:                    (long) (mysql->options.connect_timeout), &ssl_error))",
          "3430:     {",
          "",
          "[Added Lines]",
          "3430:       (long) (mysql->options.connect_timeout), &ssl_error))",
          "3431:     {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3435:                                ER(CR_SSL_CONNECTION_ERROR),",
          "3436:                                buf);",
          "3437:       goto error;",
          "3439:     DBUG_PRINT(\"info\", (\"IO layer change done!\"));",
          "",
          "[Removed Lines]",
          "3438:     }",
          "",
          "[Added Lines]",
          "3439:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3452:   }",
          "3456:   DBUG_PRINT(\"info\",(\"Server version = '%s'  capabilites: %lu  status: %u  client_flag: %lu\",",
          "3457:        mysql->server_version, mysql->server_capabilities,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3456:   return 0;",
          "3457: error:",
          "3458:   return 1;",
          "3459: }",
          "3462: #define MAX_CONNECTION_ATTR_STORAGE_LENGTH 65536",
          "3465:   sends a client authentication packet (second packet in the 3-way handshake)",
          "3467:   Packet format (when the server is 4.0 or earlier):",
          "3469:     Bytes       Content",
          "3470:     -----       ----",
          "3471:     2           client capabilities",
          "3472:     3           max packet size",
          "3473:     n           user name, \\0-terminated",
          "3474:     9           scramble_323, \\0-terminated",
          "3476:   Packet format (when the server is 4.1 or newer):",
          "3478:     Bytes       Content",
          "3479:     -----       ----",
          "3480:     4           client capabilities",
          "3481:     4           max packet size",
          "3482:     1           charset number",
          "3483:     23          reserved (always 0)",
          "3484:     n           user name, \\0-terminated",
          "3485:     n           plugin auth data (e.g. scramble), length encoded",
          "3486:     n           database name, \\0-terminated",
          "3487:                 (if CLIENT_CONNECT_WITH_DB is set in the capabilities)",
          "3488:     n           client auth plugin name - \\0-terminated string,",
          "3489:                 (if CLIENT_PLUGIN_AUTH is set in the capabilities)",
          "3491:   @retval 0 ok",
          "3492:   @retval 1 error",
          "3494: static int send_client_reply_packet(MCPVIO_EXT *mpvio,",
          "3495:                                     const uchar *data, int data_len)",
          "3496: {",
          "3497:   MYSQL *mysql= mpvio->mysql;",
          "3498:   NET *net= &mysql->net;",
          "3499:   char *buff, *end;",
          "3500:   size_t buff_size;",
          "3501:   size_t connect_attrs_len=",
          "3502:     (mysql->server_capabilities & CLIENT_CONNECT_ATTRS &&",
          "3503:      mysql->options.extension) ?",
          "3504:     mysql->options.extension->connection_attributes_length : 0;",
          "3506:   DBUG_ASSERT(connect_attrs_len < MAX_CONNECTION_ATTR_STORAGE_LENGTH);",
          "3510:     Fixed size of the packet is 32 bytes. See mysql_fill_packet_header.",
          "3511:     +9 because data is a length encoded binary where meta data size is max 9.",
          "3513:   buff_size= 33 + USERNAME_LENGTH + data_len + 9 + NAME_LEN + NAME_LEN + connect_attrs_len + 9;",
          "3514:   buff= my_alloca(buff_size);",
          "3517:   end= mysql_fill_packet_header(mysql, buff, buff_size);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4502:     goto error;",
          "4503:   }",
          "4507:   MYSQL_TRACE(INIT_PACKET_RECEIVED, mysql, (pkt_length, net->read_pos));",
          "4508:   MYSQL_TRACE_STAGE(mysql, AUTHENTICATE);",
          "4511:     Part 2: invoke the plugin to send the authentication data to the server",
          "",
          "[Removed Lines]",
          "4505:   mysql->client_flag= client_flag;",
          "",
          "[Added Lines]",
          "4572:   cli_calculate_client_flag(mysql, db, client_flag);",
          "4573:   if (cli_establish_ssl(mysql))",
          "4574:     goto error;",
          "",
          "---------------"
        ],
        "sql-common/client_authentication.cc||sql-common/client_authentication.cc": [
          "File: sql-common/client_authentication.cc -> sql-common/client_authentication.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   bool connection_is_secure= false;",
          "146:   unsigned char scramble_pkt[20];",
          "147:   unsigned char *pkt;",
          "151:   DBUG_ENTER(\"sha256_password_auth_client\");",
          "",
          "[Removed Lines]",
          "148:   my_bool ssl_enforce= FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:   memcpy(scramble_pkt, pkt, SCRAMBLE_LENGTH);",
          "176:   if (mysql_get_ssl_cipher(mysql) != NULL)",
          "177:     connection_is_secure= true;",
          "194:   if (!connection_is_secure)",
          "",
          "[Removed Lines]",
          "173:   if (mysql_get_option(mysql, MYSQL_OPT_SSL_ENFORCE, &ssl_enforce))",
          "174:     ssl_enforce= FALSE;",
          "179:     If set to the default plugin, then the client and server haven't",
          "180:     attempted a SSL connection yet and there is no way of knowing if this will",
          "181:     be successful later on when encryption is needed.",
          "183:     The only way to be sure that SSL will be established is to check if the",
          "184:     client enforce SSL.",
          "186:     If MYSQL_OPT_ENFORCE_SSL flag isn't set then SSL might be established but",
          "187:     the client will still expect RSA keys from the server and fail if those",
          "188:     aren't available.",
          "190:   else if (ssl_enforce)",
          "191:     connection_is_secure= true; // Safely assume connection will be encrypted",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}