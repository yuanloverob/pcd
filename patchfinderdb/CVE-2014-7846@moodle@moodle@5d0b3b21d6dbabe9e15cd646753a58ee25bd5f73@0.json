{
  "cve_id": "CVE-2014-7846",
  "cve_desc": "tag/tag_autocomplete.php in Moodle through 2.4.11, 2.5.x before 2.5.9, 2.6.x before 2.6.6, and 2.7.x before 2.7.3 does not consider the moodle/tag:edit capability before adding a tag, which allows remote authenticated users to bypass intended access restrictions via an AJAX request.",
  "repo": "moodle/moodle",
  "patch_hash": "5d0b3b21d6dbabe9e15cd646753a58ee25bd5f73",
  "patch_info": {
    "commit_hash": "5d0b3b21d6dbabe9e15cd646753a58ee25bd5f73",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/5d0b3b21d6dbabe9e15cd646753a58ee25bd5f73",
    "files": [
      "tag/tag.js",
      "tag/tag_autocomplete.php"
    ],
    "message": "MDL-47965 tag: Enforcing security of tag auto completion",
    "before_after_code_files": [
      "tag/tag.js||tag/tag.js",
      "tag/tag_autocomplete.php||tag/tag_autocomplete.php"
    ]
  },
  "patch_diff": {
    "tag/tag.js||tag/tag.js": [
      "File: tag/tag.js -> tag/tag.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "10:         fieldDelim: \"\\t\"",
      "11:     };",
      "12:     myDataSource.maxCacheEntries = 60;",
      "16:     var myAutoComp = new Y.YUI2.widget.AutoComplete(\"id_relatedtags\", \"relatedtags-autocomplete\", myDataSource);",
      "17:     document.getElementById('id_relatedtags').style.width = '30%';",
      "18:     myAutoComp.allowBrowserAutocomplete = false;",
      "19:     myAutoComp.maxResultsDisplayed = 20;",
      "20:     myAutoComp.delimChar = [\",\",\" \"];",
      "21:     myAutoComp.formatResult = function(oResultData, sQuery, sResultMatch) {",
      "22:         return (sResultMatch);",
      "",
      "[Removed Lines]",
      "13:     myDataSource.minQueryLength = 3;",
      "",
      "[Added Lines]",
      "19:     myAutoComp.minQueryLength = 3;",
      "",
      "---------------"
    ],
    "tag/tag_autocomplete.php||tag/tag_autocomplete.php": [
      "File: tag/tag_autocomplete.php -> tag/tag_autocomplete.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: require_once('../config.php');",
      "28: require_once('lib.php');",
      "32: if (empty($CFG->usetags)) {",
      "34: }",
      "42: }",
      "",
      "[Removed Lines]",
      "30: require_login();",
      "33:     print_error('tagsaredisabled', 'tag');",
      "36: $query = optional_param('query', '', PARAM_RAW);",
      "38: if ($similar_tags = tag_autocomplete($query)) {",
      "39:     foreach ($similar_tags as $tag) {",
      "40:         echo clean_param($tag->name, PARAM_TAG) . \"\\t\" . tag_display_name($tag) . \"\\n\";",
      "41:     }",
      "",
      "[Added Lines]",
      "32:     die();",
      "33: }",
      "35: require_login(0, false);",
      "36: if (isguestuser()) {",
      "38:     die();",
      "42: require_capability('moodle/tag:edit', context_system::instance());",
      "44: $query = optional_param('query', '', PARAM_TAG);",
      "46: echo $OUTPUT->header();",
      "49: $similartags = array();",
      "50: if (core_text::strlen($query) >= 3) {",
      "51:     $similartags = tag_autocomplete($query);",
      "52: }",
      "54: foreach ($similartags as $tag) {",
      "55:     echo clean_param($tag->name, PARAM_TAG) . \"\\t\" . tag_display_name($tag) . \"\\n\";",
      "58: echo $OUTPUT->footer();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1d9e0857f8bd9f21d25886f77cc13120f9d6be08",
      "candidate_info": {
        "commit_hash": "1d9e0857f8bd9f21d25886f77cc13120f9d6be08",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/1d9e0857f8bd9f21d25886f77cc13120f9d6be08",
        "files": [
          "tag/tag.js",
          "tag/tag_autocomplete.php"
        ],
        "message": "MDL-47965 tag: Enforcing security of tag auto completion",
        "before_after_code_files": [
          "tag/tag.js||tag/tag.js",
          "tag/tag_autocomplete.php||tag/tag_autocomplete.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tag/tag.js||tag/tag.js",
            "tag/tag_autocomplete.php||tag/tag_autocomplete.php"
          ],
          "candidate": [
            "tag/tag.js||tag/tag.js",
            "tag/tag_autocomplete.php||tag/tag_autocomplete.php"
          ]
        }
      },
      "candidate_diff": {
        "tag/tag.js||tag/tag.js": [
          "File: tag/tag.js -> tag/tag.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:         fieldDelim: \"\\t\"",
          "11:     };",
          "12:     myDataSource.maxCacheEntries = 60;",
          "16:     var myAutoComp = new Y.YUI2.widget.AutoComplete(\"id_relatedtags\", \"relatedtags-autocomplete\", myDataSource);",
          "17:     document.getElementById('id_relatedtags').style.width = '30%';",
          "18:     myAutoComp.allowBrowserAutocomplete = false;",
          "19:     myAutoComp.maxResultsDisplayed = 20;",
          "20:     myAutoComp.delimChar = [\",\",\" \"];",
          "21:     myAutoComp.formatResult = function(oResultData, sQuery, sResultMatch) {",
          "22:         return (sResultMatch);",
          "",
          "[Removed Lines]",
          "13:     myDataSource.minQueryLength = 3;",
          "",
          "[Added Lines]",
          "19:     myAutoComp.minQueryLength = 3;",
          "",
          "---------------"
        ],
        "tag/tag_autocomplete.php||tag/tag_autocomplete.php": [
          "File: tag/tag_autocomplete.php -> tag/tag_autocomplete.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: require_once('../config.php');",
          "28: require_once('lib.php');",
          "32: if (empty($CFG->usetags)) {",
          "34: }",
          "42: }",
          "",
          "[Removed Lines]",
          "30: require_login();",
          "33:     print_error('tagsaredisabled', 'tag');",
          "36: $query = optional_param('query', '', PARAM_RAW);",
          "38: if ($similar_tags = tag_autocomplete($query)) {",
          "39:     foreach ($similar_tags as $tag) {",
          "40:         echo clean_param($tag->name, PARAM_TAG) . \"\\t\" . tag_display_name($tag) . \"\\n\";",
          "41:     }",
          "",
          "[Added Lines]",
          "32:     die();",
          "33: }",
          "35: require_login(0, false);",
          "36: if (isguestuser()) {",
          "38:     die();",
          "42: require_capability('moodle/tag:edit', context_system::instance());",
          "44: $query = optional_param('query', '', PARAM_TAG);",
          "46: echo $OUTPUT->header();",
          "49: $similartags = array();",
          "50: if (core_text::strlen($query) >= 3) {",
          "51:     $similartags = tag_autocomplete($query);",
          "52: }",
          "54: foreach ($similartags as $tag) {",
          "55:     echo clean_param($tag->name, PARAM_TAG) . \"\\t\" . tag_display_name($tag) . \"\\n\";",
          "58: echo $OUTPUT->footer();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "932694ca59413ce8a0546b8bfb97e07e3b4cf17b",
      "candidate_info": {
        "commit_hash": "932694ca59413ce8a0546b8bfb97e07e3b4cf17b",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/932694ca59413ce8a0546b8bfb97e07e3b4cf17b",
        "files": [
          "tag/tag.js",
          "tag/tag_autocomplete.php"
        ],
        "message": "MDL-47965 tag: Enforcing security of tag auto completion",
        "before_after_code_files": [
          "tag/tag.js||tag/tag.js",
          "tag/tag_autocomplete.php||tag/tag_autocomplete.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tag/tag.js||tag/tag.js",
            "tag/tag_autocomplete.php||tag/tag_autocomplete.php"
          ],
          "candidate": [
            "tag/tag.js||tag/tag.js",
            "tag/tag_autocomplete.php||tag/tag_autocomplete.php"
          ]
        }
      },
      "candidate_diff": {
        "tag/tag.js||tag/tag.js": [
          "File: tag/tag.js -> tag/tag.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:         fieldDelim: \"\\t\"",
          "11:     };",
          "12:     myDataSource.maxCacheEntries = 60;",
          "16:     var myAutoComp = new Y.YUI2.widget.AutoComplete(\"id_relatedtags\", \"relatedtags-autocomplete\", myDataSource);",
          "17:     document.getElementById('id_relatedtags').style.width = '30%';",
          "18:     myAutoComp.allowBrowserAutocomplete = false;",
          "19:     myAutoComp.maxResultsDisplayed = 20;",
          "20:     myAutoComp.delimChar = [\",\",\" \"];",
          "21:     myAutoComp.formatResult = function(oResultData, sQuery, sResultMatch) {",
          "22:         return (sResultMatch);",
          "",
          "[Removed Lines]",
          "13:     myDataSource.minQueryLength = 3;",
          "",
          "[Added Lines]",
          "19:     myAutoComp.minQueryLength = 3;",
          "",
          "---------------"
        ],
        "tag/tag_autocomplete.php||tag/tag_autocomplete.php": [
          "File: tag/tag_autocomplete.php -> tag/tag_autocomplete.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: require_once('../config.php');",
          "28: require_once('lib.php');",
          "32: if (empty($CFG->usetags)) {",
          "34: }",
          "42: }",
          "",
          "[Removed Lines]",
          "30: require_login();",
          "33:     print_error('tagsaredisabled', 'tag');",
          "36: $query = optional_param('query', '', PARAM_RAW);",
          "38: if ($similar_tags = tag_autocomplete($query)) {",
          "39:     foreach ($similar_tags as $tag) {",
          "40:         echo clean_param($tag->name, PARAM_TAG) . \"\\t\" . tag_display_name($tag) . \"\\n\";",
          "41:     }",
          "",
          "[Added Lines]",
          "32:     die();",
          "33: }",
          "35: require_login(0, false);",
          "36: if (isguestuser()) {",
          "38:     die();",
          "42: require_capability('moodle/tag:edit', context_system::instance());",
          "44: $query = optional_param('query', '', PARAM_TAG);",
          "46: echo $OUTPUT->header();",
          "49: $similartags = array();",
          "50: if (core_text::strlen($query) >= 3) {",
          "51:     $similartags = tag_autocomplete($query);",
          "52: }",
          "54: foreach ($similartags as $tag) {",
          "55:     echo clean_param($tag->name, PARAM_TAG) . \"\\t\" . tag_display_name($tag) . \"\\n\";",
          "58: echo $OUTPUT->footer();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb69623c5c0754467f01f916f94446e1caddb6a8",
      "candidate_info": {
        "commit_hash": "bb69623c5c0754467f01f916f94446e1caddb6a8",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/bb69623c5c0754467f01f916f94446e1caddb6a8",
        "files": [
          "tag/tag.js",
          "tag/tag_autocomplete.php"
        ],
        "message": "MDL-47965 tag: Enforcing security of tag auto completion",
        "before_after_code_files": [
          "tag/tag.js||tag/tag.js",
          "tag/tag_autocomplete.php||tag/tag_autocomplete.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tag/tag.js||tag/tag.js",
            "tag/tag_autocomplete.php||tag/tag_autocomplete.php"
          ],
          "candidate": [
            "tag/tag.js||tag/tag.js",
            "tag/tag_autocomplete.php||tag/tag_autocomplete.php"
          ]
        }
      },
      "candidate_diff": {
        "tag/tag.js||tag/tag.js": [
          "File: tag/tag.js -> tag/tag.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:         fieldDelim: \"\\t\"",
          "11:     };",
          "12:     myDataSource.maxCacheEntries = 60;",
          "16:     var myAutoComp = new Y.YUI2.widget.AutoComplete(\"id_relatedtags\", \"relatedtags-autocomplete\", myDataSource);",
          "17:     document.getElementById('id_relatedtags').style.width = '30%';",
          "18:     myAutoComp.allowBrowserAutocomplete = false;",
          "19:     myAutoComp.maxResultsDisplayed = 20;",
          "20:     myAutoComp.delimChar = [\",\",\" \"];",
          "21:     myAutoComp.formatResult = function(oResultData, sQuery, sResultMatch) {",
          "22:         return (sResultMatch);",
          "",
          "[Removed Lines]",
          "13:     myDataSource.minQueryLength = 3;",
          "",
          "[Added Lines]",
          "19:     myAutoComp.minQueryLength = 3;",
          "",
          "---------------"
        ],
        "tag/tag_autocomplete.php||tag/tag_autocomplete.php": [
          "File: tag/tag_autocomplete.php -> tag/tag_autocomplete.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: require_once('../config.php');",
          "28: require_once('lib.php');",
          "32: if (empty($CFG->usetags)) {",
          "34: }",
          "42: }",
          "",
          "[Removed Lines]",
          "30: require_login();",
          "33:     print_error('tagsaredisabled', 'tag');",
          "36: $query = optional_param('query', '', PARAM_RAW);",
          "38: if ($similar_tags = tag_autocomplete($query)) {",
          "39:     foreach ($similar_tags as $tag) {",
          "40:         echo clean_param($tag->name, PARAM_TAG) . \"\\t\" . tag_display_name($tag) . \"\\n\";",
          "41:     }",
          "",
          "[Added Lines]",
          "32:     die();",
          "33: }",
          "35: require_login(0, false);",
          "36: if (isguestuser()) {",
          "38:     die();",
          "42: require_capability('moodle/tag:edit', context_system::instance());",
          "44: $query = optional_param('query', '', PARAM_TAG);",
          "46: echo $OUTPUT->header();",
          "49: $similartags = array();",
          "50: if (core_text::strlen($query) >= 3) {",
          "51:     $similartags = tag_autocomplete($query);",
          "52: }",
          "54: foreach ($similartags as $tag) {",
          "55:     echo clean_param($tag->name, PARAM_TAG) . \"\\t\" . tag_display_name($tag) . \"\\n\";",
          "58: echo $OUTPUT->footer();",
          "",
          "---------------"
        ]
      }
    }
  ]
}