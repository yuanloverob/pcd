{
  "cve_id": "CVE-2015-5342",
  "cve_desc": "The choice module in Moodle through 2.6.11, 2.7.x before 2.7.11, 2.8.x before 2.8.9, and 2.9.x before 2.9.3 allows remote authenticated users to bypass intended access restrictions by visiting a URL to add or delete responses in the closed state.",
  "repo": "moodle/moodle",
  "patch_hash": "265ddbf30c2a8df2e9becaaa38c2e4b262eb886f",
  "patch_info": {
    "commit_hash": "265ddbf30c2a8df2e9becaaa38c2e4b262eb886f",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/265ddbf30c2a8df2e9becaaa38c2e4b262eb886f",
    "files": [
      "mod/choice/tests/events_test.php"
    ],
    "message": "MDL-51569 mod_choice: Fix use of hardcoded ids\n\n(Previous approach of making up ids longer works now we are validating\nthem..)",
    "before_after_code_files": [
      "mod/choice/tests/events_test.php||mod/choice/tests/events_test.php"
    ]
  },
  "patch_diff": {
    "mod/choice/tests/events_test.php||mod/choice/tests/events_test.php": [
      "File: mod/choice/tests/events_test.php -> mod/choice/tests/events_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "67:     public function test_answer_submitted() {",
      "69:         $user = $this->getDataGenerator()->create_user();",
      "72:         $sink = $this->redirectEvents();",
      "74:         $events = $sink->get_events();",
      "",
      "[Removed Lines]",
      "73:         choice_user_submit_response(3, $this->choice, $user->id, $this->course, $this->cm);",
      "",
      "[Added Lines]",
      "68:         global $DB;",
      "72:         $optionids = array_keys($DB->get_records('choice_options', array('choiceid' => $this->choice->id)));",
      "75:         choice_user_submit_response($optionids[3], $this->choice, $user->id, $this->course, $this->cm);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "79:         $this->assertEquals($user->id, $events[0]->userid);",
      "80:         $this->assertEquals(context_module::instance($this->choice->cmid), $events[0]->get_context());",
      "81:         $this->assertEquals($this->choice->id, $events[0]->other['choiceid']);",
      "83:         $expected = array($this->course->id, \"choice\", \"choose\", 'view.php?id=' . $this->cm->id, $this->choice->id, $this->cm->id);",
      "84:         $this->assertEventLegacyLogData($expected, $events[0]);",
      "85:         $this->assertEventContextNotUsed($events[0]);",
      "",
      "[Removed Lines]",
      "82:         $this->assertEquals(array(3), $events[0]->other['optionid']);",
      "",
      "[Added Lines]",
      "84:         $this->assertEquals(array($optionids[3]), $events[0]->other['optionid']);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:         $cm = $DB->get_record('course_modules', array('id' => $choice->cmid));",
      "102:         $context = context_module::instance($choice->cmid);",
      "105:         $sink = $this->redirectEvents();",
      "107:         $events = $sink->get_events();",
      "",
      "[Removed Lines]",
      "106:         choice_user_submit_response(array(1, 3), $choice, $user->id, $this->course, $cm);",
      "",
      "[Added Lines]",
      "106:         $optionids = array_keys($DB->get_records('choice_options', array('choiceid' => $choice->id)));",
      "107:         $submittedoptionids = array($optionids[1], $optionids[3]);",
      "111:         choice_user_submit_response($submittedoptionids, $choice, $user->id, $this->course, $cm);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "112:         $this->assertEquals($user->id, $events[0]->userid);",
      "113:         $this->assertEquals(context_module::instance($choice->cmid), $events[0]->get_context());",
      "114:         $this->assertEquals($choice->id, $events[0]->other['choiceid']);",
      "116:         $expected = array($this->course->id, \"choice\", \"choose\", 'view.php?id=' . $cm->id, $choice->id, $cm->id);",
      "117:         $this->assertEventLegacyLogData($expected, $events[0]);",
      "118:         $this->assertEventContextNotUsed($events[0]);",
      "",
      "[Removed Lines]",
      "115:         $this->assertEquals(array(1, 3), $events[0]->other['optionid']);",
      "",
      "[Added Lines]",
      "120:         $this->assertEquals($submittedoptionids, $events[0]->other['optionid']);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "146:     public function test_answer_updated() {",
      "148:         $user = $this->getDataGenerator()->create_user();",
      "154:         $sink = $this->redirectEvents();",
      "158:         $events = $sink->get_events();",
      "",
      "[Removed Lines]",
      "151:         choice_user_submit_response(2, $this->choice, $user->id, $this->course, $this->cm);",
      "156:         choice_user_submit_response(3, $this->choice, $user->id, $this->course, $this->cm);",
      "",
      "[Added Lines]",
      "152:         global $DB;",
      "156:         $optionids = array_keys($DB->get_records('choice_options', array('choiceid' => $this->choice->id)));",
      "159:         choice_user_submit_response($optionids[2], $this->choice, $user->id, $this->course, $this->cm);",
      "164:         choice_user_submit_response($optionids[3], $this->choice, $user->id, $this->course, $this->cm);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "163:         $this->assertEquals($user->id, $events[0]->userid);",
      "164:         $this->assertEquals(context_module::instance($this->choice->cmid), $events[0]->get_context());",
      "165:         $this->assertEquals($this->choice->id, $events[0]->other['choiceid']);",
      "167:         $expected = array($this->course->id, \"choice\", \"choose again\", 'view.php?id=' . $this->cm->id,",
      "168:                 $this->choice->id, $this->cm->id);",
      "169:         $this->assertEventLegacyLogData($expected, $events[0]);",
      "",
      "[Removed Lines]",
      "166:         $this->assertEquals(3, $events[0]->other['optionid']);",
      "",
      "[Added Lines]",
      "174:         $this->assertEquals($optionids[3], $events[0]->other['optionid']);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8676e7c3e0ac2a2b5f7eec2a83060fb73760cd47",
      "candidate_info": {
        "commit_hash": "8676e7c3e0ac2a2b5f7eec2a83060fb73760cd47",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/8676e7c3e0ac2a2b5f7eec2a83060fb73760cd47",
        "files": [
          "mod/choice/classes/event/answer_created.php",
          "mod/choice/classes/event/answer_deleted.php",
          "mod/choice/classes/event/answer_submitted.php",
          "mod/choice/classes/event/answer_updated.php",
          "mod/choice/lang/en/choice.php",
          "mod/choice/lib.php",
          "mod/choice/renderer.php",
          "mod/choice/report.php",
          "mod/choice/styles.css",
          "mod/choice/tests/behat/modify_choice.feature",
          "mod/choice/tests/events_test.php",
          "mod/choice/tests/generator/lib.php",
          "mod/choice/upgrade.txt",
          "mod/choice/view.php"
        ],
        "message": "MDL-18592 mod_choice: Allow teachers to make choice for students\n\nCapability to delete reponses becomes capability to delete or modify\nresponses.\n\nThis also resolves MDL-51659 (incorrect events answer_submitted and\nanswer_updated) by deprecating them and replacing with the answer_created",
        "before_after_code_files": [
          "mod/choice/classes/event/answer_created.php||mod/choice/classes/event/answer_created.php",
          "mod/choice/classes/event/answer_deleted.php||mod/choice/classes/event/answer_deleted.php",
          "mod/choice/classes/event/answer_submitted.php||mod/choice/classes/event/answer_submitted.php",
          "mod/choice/classes/event/answer_updated.php||mod/choice/classes/event/answer_updated.php",
          "mod/choice/lang/en/choice.php||mod/choice/lang/en/choice.php",
          "mod/choice/lib.php||mod/choice/lib.php",
          "mod/choice/renderer.php||mod/choice/renderer.php",
          "mod/choice/report.php||mod/choice/report.php",
          "mod/choice/styles.css||mod/choice/styles.css",
          "mod/choice/tests/behat/modify_choice.feature||mod/choice/tests/behat/modify_choice.feature",
          "mod/choice/tests/events_test.php||mod/choice/tests/events_test.php",
          "mod/choice/tests/generator/lib.php||mod/choice/tests/generator/lib.php",
          "mod/choice/view.php||mod/choice/view.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/choice/tests/events_test.php||mod/choice/tests/events_test.php"
          ],
          "candidate": [
            "mod/choice/tests/events_test.php||mod/choice/tests/events_test.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/choice/classes/event/answer_created.php||mod/choice/classes/event/answer_created.php": [
          "File: mod/choice/classes/event/answer_created.php -> mod/choice/classes/event/answer_created.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace mod_choice\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "44: class answer_created extends \\core\\event\\base {",
          "55:     public static function create_from_object($choiceanswer, $choice, $cm, $course) {",
          "56:         global $USER;",
          "57:         $eventdata = array();",
          "58:         $eventdata['objectid'] = $choiceanswer->id;",
          "59:         $eventdata['context'] = \\context_module::instance($cm->id);",
          "60:         $eventdata['userid'] = $USER->id;",
          "61:         $eventdata['courseid'] = $course->id;",
          "62:         $eventdata['relateduserid'] = $choiceanswer->userid;",
          "63:         $eventdata['other'] = array();",
          "64:         $eventdata['other']['choiceid'] = $choice->id;",
          "65:         $eventdata['other']['optionid'] = $choiceanswer->optionid;",
          "66:         $event = self::create($eventdata);",
          "67:         $event->add_record_snapshot('course', $course);",
          "68:         $event->add_record_snapshot('course_modules', $cm);",
          "69:         $event->add_record_snapshot('choice', $choice);",
          "70:         $event->add_record_snapshot('choice_answers', $choiceanswer);",
          "71:         return $event;",
          "72:     }",
          "79:     public function get_description() {",
          "80:         return \"The user with id '$this->userid' has added the option with id '\" . $this->other['optionid'] . \"' for the",
          "81:             user with id '$this->relateduserid' from the choice activity with course module id '$this->contextinstanceid'.\";",
          "82:     }",
          "89:     public static function get_name() {",
          "90:         return get_string('eventanswercreated', 'mod_choice');",
          "91:     }",
          "98:     public function get_url() {",
          "99:         return new \\moodle_url('/mod/choice/view.php', array('id' => $this->contextinstanceid));",
          "100:     }",
          "107:     protected function init() {",
          "108:         $this->data['objecttable'] = 'choice_answers';",
          "109:         $this->data['crud'] = 'c';",
          "110:         $this->data['edulevel'] = self::LEVEL_PARTICIPATING;",
          "111:     }",
          "119:     protected function validate_data() {",
          "120:         parent::validate_data();",
          "122:         if (!isset($this->other['choiceid'])) {",
          "123:             throw new \\coding_exception('The \\'choiceid\\' value must be set in other.');",
          "124:         }",
          "126:         if (!isset($this->other['optionid'])) {",
          "127:             throw new \\coding_exception('The \\'optionid\\' value must be set in other.');",
          "128:         }",
          "129:     }",
          "137:     public static function get_objectid_mapping() {",
          "138:         return array('db' => 'choice_answers', 'restore' => 'answer');",
          "139:     }",
          "147:     public static function get_other_mapping() {",
          "148:         $othermapped = array();",
          "149:         $othermapped['choiceid'] = array('db' => 'choice', 'restore' => 'choice');",
          "150:         $othermapped['optionid'] = array('db' => 'choice_options', 'restore' => 'choice_option');",
          "152:         return $othermapped;",
          "153:     }",
          "154: }",
          "",
          "---------------"
        ],
        "mod/choice/classes/event/answer_deleted.php||mod/choice/classes/event/answer_deleted.php": [
          "File: mod/choice/classes/event/answer_deleted.php -> mod/choice/classes/event/answer_deleted.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: class answer_deleted extends \\core\\event\\base {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     public static function create_from_object($choiceanswer, $choice, $cm, $course) {",
          "56:         global $USER;",
          "57:         $eventdata = array();",
          "58:         $eventdata['objectid'] = $choiceanswer->id;",
          "59:         $eventdata['context'] = \\context_module::instance($cm->id);",
          "60:         $eventdata['userid'] = $USER->id;",
          "61:         $eventdata['courseid'] = $course->id;",
          "62:         $eventdata['relateduserid'] = $choiceanswer->userid;",
          "63:         $eventdata['other'] = array();",
          "64:         $eventdata['other']['choiceid'] = $choice->id;",
          "65:         $eventdata['other']['optionid'] = $choiceanswer->optionid;",
          "66:         $event = self::create($eventdata);",
          "67:         $event->add_record_snapshot('course', $course);",
          "68:         $event->add_record_snapshot('course_modules', $cm);",
          "69:         $event->add_record_snapshot('choice', $choice);",
          "70:         $event->add_record_snapshot('choice_answers', $choiceanswer);",
          "71:         return $event;",
          "72:     }",
          "",
          "---------------"
        ],
        "mod/choice/classes/event/answer_submitted.php||mod/choice/classes/event/answer_submitted.php": [
          "File: mod/choice/classes/event/answer_submitted.php -> mod/choice/classes/event/answer_submitted.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     public static function get_name() {",
          "79:     }",
          "",
          "[Removed Lines]",
          "78:         return get_string('eventanswercreated', 'mod_choice');",
          "",
          "[Added Lines]",
          "86:         return get_string('eventanswersubmitted', 'mod_choice');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     protected function validate_data() {",
          "112:         parent::validate_data();",
          "114:         if (!isset($this->other['choiceid'])) {",
          "115:             throw new \\coding_exception('The \\'choiceid\\' value must be set in other.');",
          "116:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:         debugging('Event \\\\mod_choice\\event\\\\answer_submitted should not be used '",
          "123:                 . 'any more for triggering new events and can only be initiated during restore. '",
          "124:                 . 'For new events please use \\\\mod_choice\\\\event\\\\answer_created', DEBUG_DEVELOPER);",
          "",
          "---------------"
        ],
        "mod/choice/classes/event/answer_updated.php||mod/choice/classes/event/answer_updated.php": [
          "File: mod/choice/classes/event/answer_updated.php -> mod/choice/classes/event/answer_updated.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     protected function validate_data() {",
          "112:         parent::validate_data();",
          "114:         if (!isset($this->other['choiceid'])) {",
          "115:             throw new \\coding_exception('The \\'choiceid\\' value must be set in other.');",
          "116:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:         debugging('Event \\\\mod_choice\\event\\\\answer_updated should not be used '",
          "124:                 . 'any more for triggering new events and can only be initiated during restore. '",
          "125:                 . 'For new events please use \\\\mod_choice\\\\event\\\\answer_created '",
          "126:                 . 'and  \\\\mod_choice\\\\event\\\\answer_deleted', DEBUG_DEVELOPER);",
          "",
          "---------------"
        ],
        "mod/choice/lang/en/choice.php||mod/choice/lang/en/choice.php": [
          "File: mod/choice/lang/en/choice.php -> mod/choice/lang/en/choice.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: $string['displayhorizontal'] = 'Display horizontally';",
          "36: $string['displaymode'] = 'Display mode for the options';",
          "37: $string['displayvertical'] = 'Display vertically';",
          "39: $string['eventanswerdeleted'] = 'Choice answer deleted';",
          "40: $string['eventanswerupdated'] = 'Choice updated';",
          "41: $string['eventreportdownloaded'] = 'Choice report downloaded';",
          "42: $string['eventreportviewed'] = 'Choice report viewed';",
          "",
          "[Removed Lines]",
          "38: $string['eventanswercreated'] = 'Choice made';",
          "",
          "[Added Lines]",
          "38: $string['eventanswercreated'] = 'Choice answer added';",
          "40: $string['eventanswersubmitted'] = 'Choice made';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: $string['choiceactivityname'] = 'Choice: {$a}';",
          "49: $string['choice:addinstance'] = 'Add a new choice';",
          "50: $string['choiceclose'] = 'Allow responses until';",
          "52: $string['choice:downloadresponses'] = 'Download responses';",
          "53: $string['choicefull'] = 'This choice is full and there are no available places.';",
          "54: $string['choice:choose'] = 'Record a choice';",
          "",
          "[Removed Lines]",
          "51: $string['choice:deleteresponses'] = 'Delete responses';",
          "",
          "[Added Lines]",
          "52: $string['choice:deleteresponses'] = 'Modify and delete responses';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67: $string['choicetext'] = 'Choice text';",
          "68: $string['choice:view'] = 'View choice activity';",
          "69: $string['chooseaction'] = 'Choose an action ...';",
          "70: $string['description'] = 'Description';",
          "71: $string['includeinactive'] = 'Include responses from inactive/suspended users';",
          "72: $string['limit'] = 'Limit';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: $string['chooseoption'] = 'Choose: {$a}';",
          "",
          "---------------"
        ],
        "mod/choice/lib.php||mod/choice/lib.php": [
          "File: mod/choice/lib.php -> mod/choice/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:     return $cdisplay;",
          "245: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258: function choice_modify_responses($userids, $answerids, $newoptionid, $choice, $cm, $course) {",
          "260:     $groupmode = groups_get_activity_groupmode($cm);",
          "261:     $onlyactive = $choice->includeinactive ? false : true;",
          "262:     $allresponses = choice_get_response_data($choice, $cm, $groupmode, $onlyactive);",
          "265:     if (!$newoptionid || !isset($choice->option[$newoptionid])) {",
          "266:         return;",
          "267:     }",
          "270:     foreach ($userids as $userid) {",
          "271:         if (isset($allresponses[0][$userid])) {",
          "272:             choice_user_submit_response($newoptionid, $choice, $userid, $course, $cm);",
          "273:         }",
          "274:     }",
          "277:     $optionsbyuser = []; // Mapping userid=>array of chosen choice options.",
          "278:     $usersbyanswer = []; // Mapping answerid=>userid (which answer belongs to each user).",
          "279:     foreach ($allresponses as $optionid => $responses) {",
          "280:         if ($optionid > 0) {",
          "281:             foreach ($responses as $userid => $userresponse) {",
          "282:                 $optionsbyuser += [$userid => []];",
          "283:                 $optionsbyuser[$userid][] = $optionid;",
          "284:                 $usersbyanswer[$userresponse->answerid] = $userid;",
          "285:             }",
          "286:         }",
          "287:     }",
          "290:     foreach ($answerids as $answerid) {",
          "291:         if (isset($usersbyanswer[$answerid])) {",
          "292:             $userid = $usersbyanswer[$answerid];",
          "293:             if (!in_array($newoptionid, $optionsbyuser[$userid])) {",
          "294:                 $options = $choice->allowmultiple ?",
          "295:                         array_merge($optionsbyuser[$userid], [$newoptionid]) : $newoptionid;",
          "296:                 choice_user_submit_response($options, $choice, $userid, $course, $cm);",
          "297:             }",
          "298:         }",
          "299:     }",
          "300: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258: function choice_user_submit_response($formanswer, $choice, $userid, $course, $cm) {",
          "260:     require_once($CFG->libdir.'/completionlib.php');",
          "262:     $continueurl = new moodle_url('/mod/choice/view.php', array('id' => $cm->id));",
          "",
          "[Removed Lines]",
          "259:     global $DB, $CFG;",
          "",
          "[Added Lines]",
          "314:     global $DB, $CFG, $USER;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:     }",
          "352:     if (!($choice->limitanswers && $choicesexceeded)) {",
          "354:         if ($current) {",
          "356:             $existingchoices = array();",
          "",
          "[Removed Lines]",
          "353:         $answersnapshots = array();",
          "",
          "[Added Lines]",
          "407:     $answersnapshots = array();",
          "408:     $deletedanswersnapshots = array();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "358:                 if (in_array($c->optionid, $formanswers)) {",
          "359:                     $existingchoices[] = $c->optionid;",
          "360:                     $DB->set_field('choice_answers', 'timemodified', time(), array('id' => $c->id));",
          "362:                 } else {",
          "363:                     $DB->delete_records('choice_answers', array('id' => $c->id));",
          "364:                 }",
          "365:             }",
          "",
          "[Removed Lines]",
          "361:                     $answersnapshots[] = $c;",
          "",
          "[Added Lines]",
          "418:                     $deletedanswersnapshots[] = $c;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "376:                     $answersnapshots[] = $newanswer;",
          "377:                 }",
          "378:             }",
          "382:         } else {",
          "384:             foreach ($formanswers as $answer) {",
          "",
          "[Removed Lines]",
          "381:             $answerupdated = true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "396:             if ($completion->is_enabled($cm) && $choice->completionsubmit) {",
          "397:                 $completion->update_state($cm, COMPLETION_COMPLETE);",
          "398:             }",
          "402:         }",
          "403:     } else {",
          "",
          "[Removed Lines]",
          "401:             $answerupdated = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "416:         $choicelock->release();",
          "417:     }",
          "443:     }",
          "444: }",
          "",
          "[Removed Lines]",
          "420:     if (isset($answerupdated)) {",
          "421:         $eventdata = array();",
          "422:         $eventdata['context'] = $context;",
          "423:         $eventdata['objectid'] = $choice->id;",
          "424:         $eventdata['userid'] = $userid;",
          "425:         $eventdata['courseid'] = $course->id;",
          "426:         $eventdata['other'] = array();",
          "427:         $eventdata['other']['choiceid'] = $choice->id;",
          "429:         if ($answerupdated) {",
          "430:             $eventdata['other']['optionid'] = $formanswer;",
          "431:             $event = \\mod_choice\\event\\answer_updated::create($eventdata);",
          "432:         } else {",
          "433:             $eventdata['other']['optionid'] = $formanswers;",
          "434:             $event = \\mod_choice\\event\\answer_submitted::create($eventdata);",
          "435:         }",
          "436:         $event->add_record_snapshot('course', $course);",
          "437:         $event->add_record_snapshot('course_modules', $cm);",
          "438:         $event->add_record_snapshot('choice', $choice);",
          "439:         foreach ($answersnapshots as $record) {",
          "440:             $event->add_record_snapshot('choice_answers', $record);",
          "441:         }",
          "442:         $event->trigger();",
          "",
          "[Added Lines]",
          "470:     foreach ($deletedanswersnapshots as $answer) {",
          "471:         \\mod_choice\\event\\answer_deleted::create_from_object($answer, $choice, $cm, $course)->trigger();",
          "472:     }",
          "473:     foreach ($answersnapshots as $answer) {",
          "474:         \\mod_choice\\event\\answer_created::create_from_object($answer, $choice, $cm, $course)->trigger();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "479:     $display->coursemoduleid = $cm->id;",
          "480:     $display->courseid = $course->id;",
          "483:     $display->options = array();",
          "484:     $allusers = [];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514:     if (!empty($choice->showunanswered)) {",
          "515:         $choice->option[0] = get_string('notanswered', 'choice');",
          "516:         $choice->maxanswers[0] = 0;",
          "517:     }",
          "520:     if (!empty($display->showunanswered) && $allresponses[0]) {",
          "521:         $info = new \\core_availability\\info_module(cm_info::create($cm));",
          "522:         $allresponses[0] = $info->filter_user_list($allresponses[0]);",
          "523:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "531:         }",
          "532:     }",
          "535:     $completion = new completion_info($course);",
          "536:     foreach($attemptids as $attemptid) {",
          "537:         if ($todelete = $DB->get_record('choice_answers', array('choiceid' => $choice->id, 'id' => $attemptid))) {",
          "555:             $DB->delete_records('choice_answers', array('choiceid' => $choice->id, 'id' => $attemptid));",
          "556:         }",
          "557:     }",
          "",
          "[Removed Lines]",
          "534:     $context = context_module::instance($cm->id);",
          "539:             $eventdata = array();",
          "540:             $eventdata['objectid'] = $todelete->id;",
          "541:             $eventdata['context'] = $context;",
          "542:             $eventdata['userid'] = $USER->id;",
          "543:             $eventdata['courseid'] = $course->id;",
          "544:             $eventdata['relateduserid'] = $todelete->userid;",
          "545:             $eventdata['other'] = array();",
          "546:             $eventdata['other']['choiceid'] = $choice->id;",
          "547:             $eventdata['other']['optionid'] = $todelete->optionid;",
          "548:             $event = \\mod_choice\\event\\answer_deleted::create($eventdata);",
          "549:             $event->add_record_snapshot('course', $course);",
          "550:             $event->add_record_snapshot('course_modules', $cm);",
          "551:             $event->add_record_snapshot('choice', $choice);",
          "552:             $event->add_record_snapshot('choice_answers', $todelete);",
          "553:             $event->trigger();",
          "",
          "[Added Lines]",
          "581:             \\mod_choice\\event\\answer_deleted::create_from_object($todelete, $choice, $cm, $course)->trigger();",
          "",
          "---------------"
        ],
        "mod/choice/renderer.php||mod/choice/renderer.php": [
          "File: mod/choice/renderer.php -> mod/choice/renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:         $usernumberheader->text = get_string('numberofuser', 'choice');",
          "172:         $columns['usernumber'][] = $usernumberheader;",
          "175:         foreach ($choices->options as $optionid => $options) {",
          "176:             $celloption = clone($celldefault);",
          "177:             $cellusernumber = clone($celldefault);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:         $optionsnames = [];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:             $celltext = '';",
          "181:             if ($choices->showunanswered && $optionid == 0) {",
          "183:             } else if ($optionid > 0) {",
          "184:                 $celltext = format_string($choices->options[$optionid]->text);",
          "185:             }",
          "",
          "[Removed Lines]",
          "182:                 $celltext = format_string(get_string('notanswered', 'choice'));",
          "",
          "[Added Lines]",
          "182:                 $celltext = get_string('notanswered', 'choice');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:             }",
          "191:             $celloption->text = $celltext;",
          "192:             $cellusernumber->text = $numberofuser;",
          "194:             $columns['options'][] = $celloption;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:             $optionsnames[$optionid] = $celltext;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "222:                         }",
          "224:                         $userfullname = fullname($user, $choices->fullnamecapability);",
          "229:                             $data .= html_writer::tag('div', $attemptaction, array('class'=>'attemptaction'));",
          "230:                         }",
          "231:                         $userimage = $this->output->user_picture($user, array('courseid'=>$choices->courseid));",
          "",
          "[Removed Lines]",
          "225:                         if ($choices->viewresponsecapability && $choices->deleterepsonsecapability  && $optionid > 0) {",
          "226:                             $attemptaction = html_writer::label($userfullname, 'attempt-user'.$user->id, false, array('class' => 'accesshide'));",
          "227:                             $attemptaction .= html_writer::checkbox('attemptid[]', $user->answerid, '', null,",
          "228:                                     array('id' => 'attempt-user'.$user->id));",
          "",
          "[Added Lines]",
          "226:                         if ($choices->viewresponsecapability && $choices->deleterepsonsecapability) {",
          "227:                             $checkboxid = 'attempt-user'.$user->id.'-option'.$optionid;",
          "228:                             $attemptaction = html_writer::label($userfullname . ' ' . $optionsnames[$optionid],",
          "229:                                     $checkboxid, false, array('class' => 'accesshide'));",
          "230:                             if ($optionid > 0) {",
          "231:                                 $attemptaction .= html_writer::checkbox('attemptid[]', $user->answerid, '', null,",
          "232:                                     array('id' => $checkboxid));",
          "233:                             } else {",
          "234:                                 $attemptaction .= html_writer::checkbox('userid[]', $user->id, '', null,",
          "235:                                     array('id' => $checkboxid));",
          "236:                             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "252:         if ($choices->viewresponsecapability && $choices->deleterepsonsecapability) {",
          "253:             $selecturl = new moodle_url('#');",
          "255:             $selectallactions = new component_action('click',\"checkall\");",
          "256:             $selectall = new action_link($selecturl, get_string('selectall'), $selectallactions);",
          "257:             $actiondata .= $this->output->render($selectall) . ' / ';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:             $actiondata .= html_writer::start_div('selectallnone');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:             $deselectall = new action_link($selecturl, get_string('deselectall'), $deselectallactions);",
          "261:             $actiondata .= $this->output->render($deselectall);",
          "265:             $actionurl = new moodle_url($PAGE->url, array('sesskey'=>sesskey(), 'action'=>'delete_confirmation()'));",
          "268:             $actiondata .= $this->output->render($select);",
          "269:         }",
          "270:         $html .= html_writer::tag('div', $actiondata, array('class'=>'responseaction'));",
          "",
          "[Removed Lines]",
          "263:             $actiondata .= html_writer::tag('label', ' ' . get_string('withselected', 'choice') . ' ', array('for'=>'menuaction'));",
          "266:             $select = new single_select($actionurl, 'action', array('delete'=>get_string('delete')), null, array(''=>get_string('chooseaction', 'choice')), 'attemptsform');",
          "",
          "[Added Lines]",
          "272:             $actiondata .= html_writer::end_div();",
          "275:             $actionoptions = array('delete' => get_string('delete'));",
          "276:             foreach ($choices->options as $optionid => $option) {",
          "277:                 if ($optionid > 0) {",
          "278:                     $actionoptions['choose_'.$optionid] = get_string('chooseoption', 'choice', $option->text);",
          "279:                 }",
          "280:             }",
          "281:             $select = new single_select($actionurl, 'action', $actionoptions, null,",
          "282:                     array('' => get_string('chooseaction', 'choice')), 'attemptsform');",
          "283:             $select->set_label(get_string('withselected', 'choice'));",
          "",
          "---------------"
        ],
        "mod/choice/report.php||mod/choice/report.php": [
          "File: mod/choice/report.php -> mod/choice/report.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:     require_once(\"lib.php\");",
          "6:     $id         = required_param('id', PARAM_INT);   //moduleid",
          "8:     $download   = optional_param('download', '', PARAM_ALPHA);",
          "12:     $url = new moodle_url('/mod/choice/report.php', array('id'=>$id));",
          "16:     if ($download !== '') {",
          "17:         $url->param('download', $download);",
          "18:     }",
          "",
          "[Removed Lines]",
          "7:     $format     = optional_param('format', CHOICE_PUBLISH_NAMES, PARAM_INT);",
          "9:     $action     = optional_param('action', '', PARAM_ALPHA);",
          "10:     $attemptids = optional_param_array('attemptid', array(), PARAM_INT); //get array of responses to delete.",
          "13:     if ($format !== CHOICE_PUBLISH_NAMES) {",
          "14:         $url->param('format', $format);",
          "15:     }",
          "",
          "[Added Lines]",
          "8:     $action     = optional_param('action', '', PARAM_ALPHANUMEXT);",
          "9:     $attemptids = optional_param_array('attemptid', array(), PARAM_INT); // Get array of responses to delete or modify.",
          "10:     $userids    = optional_param_array('userid', array(), PARAM_INT); // Get array of users whose choices need to be modified.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     $event = \\mod_choice\\event\\report_viewed::create($eventdata);",
          "53:     $event->trigger();",
          "58:     }",
          "60:     if (!$download) {",
          "",
          "[Removed Lines]",
          "55:     if (data_submitted() && $action == 'delete' && has_capability('mod/choice:deleteresponses',$context) && confirm_sesskey()) {",
          "56:         choice_delete_responses($attemptids, $choice, $cm, $course); //delete responses.",
          "57:         redirect(\"report.php?id=$cm->id\");",
          "",
          "[Added Lines]",
          "52:     if (data_submitted() && has_capability('mod/choice:deleteresponses', $context) && confirm_sesskey()) {",
          "53:         if ($action === 'delete') {",
          "55:             choice_delete_responses($attemptids, $choice, $cm, $course);",
          "56:             redirect(\"report.php?id=$cm->id\");",
          "57:         }",
          "58:         if (preg_match('/^choose_(\\d+)$/', $action, $actionmatch)) {",
          "60:             $newoptionid = (int)$actionmatch[1];",
          "61:             choice_modify_responses($userids, $attemptids, $newoptionid, $choice, $cm, $course);",
          "62:             redirect(\"report.php?id=$cm->id\");",
          "63:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238:         }",
          "239:         exit;",
          "240:     }",
          "247:     $results = prepare_choice_show_results($choice, $course, $cm, $users);",
          "248:     $renderer = $PAGE->get_renderer('mod_choice');",
          "252:     if (!empty($users) && has_capability('mod/choice:downloadresponses',$context)) {",
          "",
          "[Removed Lines]",
          "242:     if (!empty($choice->showunanswered)) {",
          "243:         $choice->option[0] = get_string('notanswered', 'choice');",
          "244:         $choice->maxanswers[0] = 0;",
          "245:     }",
          "249:     echo $renderer->display_result($results, has_capability('mod/choice:readresponses', $context));",
          "",
          "[Added Lines]",
          "248:     $choice->showunanswered = 1;",
          "251:     echo $renderer->display_result($results, true);",
          "",
          "---------------"
        ],
        "mod/choice/styles.css||mod/choice/styles.css": [
          "File: mod/choice/styles.css -> mod/choice/styles.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: }",
          "19: .path-mod-choice .anonymous,",
          "20: .path-mod-choice .names {",
          "21:   margin-left: auto;",
          "22:   margin-right: auto;",
          "24: }",
          "26: .path-mod-choice .downloadreport {",
          "",
          "[Removed Lines]",
          "23:   width: 80%;",
          "",
          "[Added Lines]",
          "24:   width: 100%;",
          "",
          "---------------"
        ],
        "mod/choice/tests/behat/modify_choice.feature||mod/choice/tests/behat/modify_choice.feature": [
          "File: mod/choice/tests/behat/modify_choice.feature -> mod/choice/tests/behat/modify_choice.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: @mod @mod_choice",
          "2: Feature: Teacher can modify choices of the students",
          "3:   In order to have all students choices",
          "4:   As a teacher",
          "5:   I need to be able to make choice for studnets",
          "7:   Background:",
          "8:     Given the following \"users\" exist:",
          "9:       | username | firstname | lastname | email |",
          "10:       | teacher1 | Teacher | 1 | teacher1@example.com |",
          "11:       | student1 | Student | 1 | student1@example.com |",
          "12:       | student2 | Student | 2 | student2@example.com |",
          "13:       | student3 | Student | 3 | student3@example.com |",
          "14:     And the following \"courses\" exist:",
          "15:       | fullname | shortname | category |",
          "16:       | Course 1 | C1 | 0 |",
          "17:     And the following \"course enrolments\" exist:",
          "18:       | user | course | role |",
          "19:       | teacher1 | C1 | editingteacher |",
          "20:       | student1 | C1 | student |",
          "21:       | student2 | C1 | student |",
          "22:       | student3 | C1 | student |",
          "23:     And the following \"activities\" exist:",
          "24:       | activity | name        | intro                   | course | idnumber | option |",
          "25:       | choice   | Choice name | Test choice description | C1     | choice1  | Option 1, Option 2, Option 3 |",
          "27:   @javascript",
          "28:   Scenario: Delete students choice response as a teacher",
          "29:     When I log in as \"student1\"",
          "30:     And I follow \"Course 1\"",
          "31:     And I choose \"Option 1\" from \"Choice name\" choice activity",
          "32:     Then I should see \"Your selection: Option 1\"",
          "33:     And I should see \"Your choice has been saved\"",
          "34:     And I log out",
          "35:     And I log in as \"teacher1\"",
          "36:     And I follow \"Course 1\"",
          "37:     And I follow \"Choice name\"",
          "38:     And I follow \"View 1 responses\"",
          "39:     And I click on \"Student 1 Option 1\" \"checkbox\"",
          "40:     And I select \"Delete\" from the \"With selected\" singleselect",
          "41:     And \"Student 1 Option 1\" \"checkbox\" should not exist",
          "42:     And \"Student 1 Not answered yet\" \"checkbox\" should exist",
          "43:     And I log out",
          "45:   @javascript",
          "46:   Scenario: Teacher set answers of students who did not respond or change existing answers",
          "47:     When I log in as \"student1\"",
          "48:     And I follow \"Course 1\"",
          "49:     And I choose \"Option 1\" from \"Choice name\" choice activity",
          "50:     Then I should see \"Your selection: Option 1\"",
          "51:     And I should see \"Your choice has been saved\"",
          "52:     And I log out",
          "53:     And I log in as \"teacher1\"",
          "54:     And I follow \"Course 1\"",
          "55:     And I follow \"Choice name\"",
          "56:     And I follow \"View 1 responses\"",
          "57:     And I click on \"Student 1 Option 1\" \"checkbox\"",
          "58:     And I click on \"Student 2 Not answered yet\" \"checkbox\"",
          "59:     And I click on \"Student 3 Not answered yet\" \"checkbox\"",
          "60:     And I select \"Choose: Option 2\" from the \"With selected\" singleselect",
          "61:     And \"Student 1 Option 1\" \"checkbox\" should not exist",
          "62:     And \"Student 2 Not answered yet\" \"checkbox\" should not exist",
          "63:     And \"Student 3 Not answered yet\" \"checkbox\" should not exist",
          "64:     And \"Student 1 Option 2\" \"checkbox\" should exist",
          "65:     And \"Student 2 Option 2\" \"checkbox\" should exist",
          "66:     And \"Student 3 Option 2\" \"checkbox\" should exist",
          "67:     And I log out",
          "69:   @javascript",
          "70:   Scenario: Teacher can delete answers in the multiple answer choice",
          "71:     And I log in as \"teacher1\"",
          "72:     And I follow \"Course 1\"",
          "73:     And I follow \"Choice name\"",
          "74:     And I follow \"Edit settings\"",
          "75:     And I set the field \"Allow more than one choice to be selected\" to \"Yes\"",
          "76:     And I press \"Save and return to course\"",
          "77:     And I log out",
          "78:     And I log in as \"student1\"",
          "79:     And I follow \"Course 1\"",
          "80:     And I choose options \"Option 1\",\"Option 2\" from \"Choice name\" choice activity",
          "81:     And I should see \"Your selection: Option 1; Option 2\"",
          "82:     And I should see \"Your choice has been saved\"",
          "83:     And I log out",
          "84:     And I log in as \"teacher1\"",
          "85:     And I follow \"Course 1\"",
          "86:     And I follow \"Choice name\"",
          "87:     And I follow \"View 1 responses\"",
          "88:     And I click on \"Student 1 Option 2\" \"checkbox\"",
          "89:     And I select \"Delete\" from the \"With selected\" singleselect",
          "90:     And I click on \"Student 1 Option 1\" \"checkbox\"",
          "91:     And I select \"Choose: Option 3\" from the \"With selected\" singleselect",
          "92:     And I log out",
          "93:     And I log in as \"student1\"",
          "94:     And I follow \"Course 1\"",
          "95:     And I follow \"Choice name\"",
          "96:     And I should see \"Your selection: Option 1; Option 3\"",
          "97:     And I log out",
          "99:   @javascript",
          "100:   Scenario: Teacher can manage answers on view page if the names are displayed",
          "101:     When I log in as \"student1\"",
          "102:     And I follow \"Course 1\"",
          "103:     And I choose \"Option 1\" from \"Choice name\" choice activity",
          "104:     Then I should see \"Your selection: Option 1\"",
          "105:     And I should see \"Your choice has been saved\"",
          "106:     And I log out",
          "107:     And I log in as \"teacher1\"",
          "108:     And I follow \"Course 1\"",
          "109:     And I follow \"Choice name\"",
          "110:     And I follow \"Edit settings\"",
          "111:     And I set the following fields to these values:",
          "112:       | Publish results | Always show results to students |",
          "113:       | Privacy of results | Publish full results, showing names and their choices |",
          "114:       | Show column for unanswered | Yes |",
          "115:     And I press \"Save and display\"",
          "116:     And I click on \"Student 1 Option 1\" \"checkbox\"",
          "117:     And I click on \"Student 2 Not answered yet\" \"checkbox\"",
          "118:     And I select \"Choose: Option 3\" from the \"With selected\" singleselect",
          "119:     And \"Student 1 Option 1\" \"checkbox\" should not exist",
          "120:     And \"Student 1 Option 3\" \"checkbox\" should exist",
          "121:     And \"Student 2 Not answered yet\" \"checkbox\" should not exist",
          "122:     And \"Student 2 Option 3\" \"checkbox\" should exist",
          "123:     And I click on \"Student 1 Option 3\" \"checkbox\"",
          "124:     And I select \"Delete\" from the \"With selected\" singleselect",
          "125:     And \"Student 1 Option 3\" \"checkbox\" should not exist",
          "126:     And \"Student 1 Not answered yet\" \"checkbox\" should exist",
          "127:     And I log out",
          "",
          "---------------"
        ],
        "mod/choice/tests/events_test.php||mod/choice/tests/events_test.php": [
          "File: mod/choice/tests/events_test.php -> mod/choice/tests/events_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         global $DB;",
          "70:         $user = $this->getDataGenerator()->create_user();",
          "72:         $optionids = array_keys($DB->get_records('choice_options', array('choiceid' => $this->choice->id)));",
          "74:         $sink = $this->redirectEvents();",
          "75:         choice_user_submit_response($optionids[3], $this->choice, $user->id, $this->course, $this->cm);",
          "76:         $events = $sink->get_events();",
          "79:         $this->assertCount(1, $events);",
          "81:         $this->assertEquals($user->id, $events[0]->userid);",
          "82:         $this->assertEquals(context_module::instance($this->choice->cmid), $events[0]->get_context());",
          "83:         $this->assertEquals($this->choice->id, $events[0]->other['choiceid']);",
          "87:         $this->assertEventContextNotUsed($events[0]);",
          "88:         $sink->close();",
          "89:     }",
          "",
          "[Removed Lines]",
          "67:     public function test_answer_submitted() {",
          "80:         $this->assertInstanceOf('\\mod_choice\\event\\answer_submitted', $events[0]);",
          "84:         $this->assertEquals(array($optionids[3]), $events[0]->other['optionid']);",
          "85:         $expected = array($this->course->id, \"choice\", \"choose\", 'view.php?id=' . $this->cm->id, $this->choice->id, $this->cm->id);",
          "86:         $this->assertEventLegacyLogData($expected, $events[0]);",
          "",
          "[Added Lines]",
          "67:     public function test_answer_created() {",
          "71:         $this->setUser($user);",
          "78:         $answer = $DB->get_record('choice_answers', ['userid' => $user->id, 'choiceid' => $this->choice->id]);",
          "82:         $this->assertInstanceOf('\\mod_choice\\event\\answer_created', $events[0]);",
          "84:         $this->assertEquals($user->id, $events[0]->relateduserid);",
          "86:         $this->assertEquals($answer->id, $events[0]->objectid);",
          "88:         $this->assertEquals($optionids[3], $events[0]->other['optionid']);",
          "89:         $this->assertEventContextNotUsed($events[0]);",
          "90:         $sink->close();",
          "91:     }",
          "96:     public function test_answer_submitted_by_another_user() {",
          "97:         global $DB, $USER;",
          "99:         $user = $this->getDataGenerator()->create_user();",
          "101:         $optionids = array_keys($DB->get_records('choice_options', array('choiceid' => $this->choice->id)));",
          "103:         $sink = $this->redirectEvents();",
          "104:         choice_user_submit_response($optionids[3], $this->choice, $user->id, $this->course, $this->cm);",
          "105:         $events = $sink->get_events();",
          "106:         $answer = $DB->get_record('choice_answers', ['userid' => $user->id, 'choiceid' => $this->choice->id]);",
          "109:         $this->assertCount(1, $events);",
          "110:         $this->assertInstanceOf('\\mod_choice\\event\\answer_created', $events[0]);",
          "111:         $this->assertEquals($USER->id, $events[0]->userid);",
          "112:         $this->assertEquals($user->id, $events[0]->relateduserid);",
          "113:         $this->assertEquals(context_module::instance($this->choice->cmid), $events[0]->get_context());",
          "114:         $this->assertEquals($answer->id, $events[0]->objectid);",
          "115:         $this->assertEquals($this->choice->id, $events[0]->other['choiceid']);",
          "116:         $this->assertEquals($optionids[3], $events[0]->other['optionid']);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:         global $DB;",
          "98:         $user = $this->getDataGenerator()->create_user();",
          "101:         $choice = $this->getDataGenerator()->create_module('choice', array('course' => $this->course->id,",
          "",
          "[Removed Lines]",
          "94:     public function test_answer_submitted_multiple() {",
          "",
          "[Added Lines]",
          "124:     public function test_answer_created_multiple() {",
          "129:         $this->setUser($user);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:         $sink = $this->redirectEvents();",
          "111:         choice_user_submit_response($submittedoptionids, $choice, $user->id, $this->course, $cm);",
          "112:         $events = $sink->get_events();",
          "117:         $this->assertEquals($user->id, $events[0]->userid);",
          "118:         $this->assertEquals(context_module::instance($choice->cmid), $events[0]->get_context());",
          "119:         $this->assertEquals($choice->id, $events[0]->other['choiceid']);",
          "123:         $this->assertEventContextNotUsed($events[0]);",
          "124:         $sink->close();",
          "125:     }",
          "",
          "[Removed Lines]",
          "115:         $this->assertCount(1, $events);",
          "116:         $this->assertInstanceOf('\\mod_choice\\event\\answer_submitted', $events[0]);",
          "120:         $this->assertEquals($submittedoptionids, $events[0]->other['optionid']);",
          "121:         $expected = array($this->course->id, \"choice\", \"choose\", 'view.php?id=' . $cm->id, $choice->id, $cm->id);",
          "122:         $this->assertEventLegacyLogData($expected, $events[0]);",
          "",
          "[Added Lines]",
          "144:         $answers = $DB->get_records('choice_answers', ['userid' => $user->id, 'choiceid' => $choice->id], 'id');",
          "145:         $answers = array_values($answers);",
          "148:         $this->assertCount(2, $events);",
          "149:         $this->assertInstanceOf('\\mod_choice\\event\\answer_created', $events[0]);",
          "151:         $this->assertEquals($user->id, $events[0]->relateduserid);",
          "153:         $this->assertEquals($answers[0]->id, $events[0]->objectid);",
          "155:         $this->assertEquals($optionids[1], $events[0]->other['optionid']);",
          "158:         $this->assertInstanceOf('\\mod_choice\\event\\answer_created', $events[1]);",
          "159:         $this->assertEquals($user->id, $events[1]->userid);",
          "160:         $this->assertEquals($user->id, $events[1]->relateduserid);",
          "161:         $this->assertEquals(context_module::instance($choice->cmid), $events[1]->get_context());",
          "162:         $this->assertEquals($answers[1]->id, $events[1]->objectid);",
          "163:         $this->assertEquals($choice->id, $events[1]->other['choiceid']);",
          "164:         $this->assertEquals($optionids[3], $events[1]->other['optionid']);",
          "165:         $this->assertEventContextNotUsed($events[1]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:         $user = $this->getDataGenerator()->create_user();",
          "",
          "[Removed Lines]",
          "132:     public function test_answer_submitted_other_exception() {",
          "",
          "[Added Lines]",
          "174:     public function test_answer_created_other_exception() {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141:         $eventdata['other'] = array();",
          "145:         $event->trigger();",
          "146:         $this->assertEventContextNotUsed($event);",
          "147:     }",
          "",
          "[Removed Lines]",
          "144:         $event = \\mod_choice\\event\\answer_submitted::create($eventdata);",
          "",
          "[Added Lines]",
          "186:         $event = \\mod_choice\\event\\answer_created::create($eventdata);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "153:         global $DB;",
          "155:         $user = $this->getDataGenerator()->create_user();",
          "157:         $optionids = array_keys($DB->get_records('choice_options', array('choiceid' => $this->choice->id)));",
          "160:         choice_user_submit_response($optionids[2], $this->choice, $user->id, $this->course, $this->cm);",
          "163:         $sink = $this->redirectEvents();",
          "165:         choice_user_submit_response($optionids[3], $this->choice, $user->id, $this->course, $this->cm);",
          "167:         $events = $sink->get_events();",
          "172:         $this->assertEquals($user->id, $events[0]->userid);",
          "173:         $this->assertEquals(context_module::instance($this->choice->cmid), $events[0]->get_context());",
          "174:         $this->assertEquals($this->choice->id, $events[0]->other['choiceid']);",
          "179:         $this->assertEventContextNotUsed($events[0]);",
          "203:     }",
          "",
          "[Removed Lines]",
          "170:         $this->assertCount(1, $events);",
          "171:         $this->assertInstanceOf('\\mod_choice\\event\\answer_updated', $events[0]);",
          "175:         $this->assertEquals($optionids[3], $events[0]->other['optionid']);",
          "176:         $expected = array($this->course->id, \"choice\", \"choose again\", 'view.php?id=' . $this->cm->id,",
          "177:                 $this->choice->id, $this->cm->id);",
          "178:         $this->assertEventLegacyLogData($expected, $events[0]);",
          "180:         $sink->close();",
          "181:     }",
          "188:     public function test_answer_updated_other_exception() {",
          "190:         $user = $this->getDataGenerator()->create_user();",
          "192:         $eventdata = array();",
          "193:         $eventdata['context'] = $this->context;",
          "194:         $eventdata['objectid'] = 2;",
          "195:         $eventdata['userid'] = $user->id;",
          "196:         $eventdata['courseid'] = $this->course->id;",
          "197:         $eventdata['other'] = array();",
          "200:         $event = \\mod_choice\\event\\answer_updated::create($eventdata);",
          "201:         $event->trigger();",
          "202:         $this->assertEventContextNotUsed($event);",
          "",
          "[Added Lines]",
          "198:         $this->setUser($user);",
          "204:         $oldanswer = $DB->get_record('choice_answers', ['userid' => $user->id, 'choiceid' => $this->choice->id]);",
          "210:         $newanswer = $DB->get_record('choice_answers', ['userid' => $user->id, 'choiceid' => $this->choice->id]);",
          "215:         $this->assertCount(2, $events);",
          "216:         $this->assertInstanceOf('\\mod_choice\\event\\answer_deleted', $events[0]);",
          "219:         $this->assertEquals($oldanswer->id, $events[0]->objectid);",
          "221:         $this->assertEquals($optionids[2], $events[0]->other['optionid']);",
          "224:         $this->assertInstanceOf('\\mod_choice\\event\\answer_created', $events[1]);",
          "225:         $this->assertEquals($user->id, $events[1]->userid);",
          "226:         $this->assertEquals(context_module::instance($this->choice->cmid), $events[1]->get_context());",
          "227:         $this->assertEquals($newanswer->id, $events[1]->objectid);",
          "228:         $this->assertEquals($this->choice->id, $events[1]->other['choiceid']);",
          "229:         $this->assertEquals($optionids[3], $events[1]->other['optionid']);",
          "230:         $this->assertEventContextNotUsed($events[1]);",
          "232:         $sink->close();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "216:         choice_user_submit_response($optionids[2], $this->choice, $user->id, $this->course, $this->cm);",
          "218:         $answer = $DB->get_record('choice_answers', array('userid' => $user->id, 'choiceid' => $this->choice->id),",
          "222:         $sink = $this->redirectEvents();",
          "",
          "[Removed Lines]",
          "219:                 '*', $strictness = IGNORE_MULTIPLE);",
          "",
          "[Added Lines]",
          "249:             '*', $strictness = IGNORE_MULTIPLE);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "269:         $this->assertEquals($USER->id, $event[0]->userid);",
          "270:         $this->assertEquals(context_module::instance($this->choice->cmid), $event[0]->get_context());",
          "271:         $expected = array($this->course->id, \"choice\", \"report\", 'report.php?id=' . $this->context->instanceid,",
          "273:         $this->assertEventLegacyLogData($expected, $event[0]);",
          "274:         $this->assertEventContextNotUsed($event[0]);",
          "275:         $sink->close();",
          "",
          "[Removed Lines]",
          "272:                 $this->choice->id, $this->context->instanceid);",
          "",
          "[Added Lines]",
          "302:             $this->choice->id, $this->context->instanceid);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "341:         $this->assertEquals($USER->id, $event[0]->userid);",
          "342:         $this->assertEquals(context_module::instance($this->choice->cmid), $event[0]->get_context());",
          "343:         $expected = array($this->course->id, \"choice\", \"view\", 'view.php?id=' . $this->context->instanceid,",
          "345:         $this->assertEventLegacyLogData($expected, $event[0]);",
          "346:         $this->assertEventContextNotUsed($event[0]);",
          "347:         $sink->close();",
          "",
          "[Removed Lines]",
          "344:                 $this->choice->id, $this->context->instanceid);",
          "",
          "[Added Lines]",
          "374:             $this->choice->id, $this->context->instanceid);",
          "",
          "---------------"
        ],
        "mod/choice/tests/generator/lib.php||mod/choice/tests/generator/lib.php": [
          "File: mod/choice/tests/generator/lib.php -> mod/choice/tests/generator/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:             $record->option[] = 'Beer';",
          "48:             $record->option[] = 'Wine';",
          "49:             $record->option[] = 'Spirits';",
          "50:         }",
          "51:         return parent::create_instance($record, (array)$options);",
          "52:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:         } else if (!is_array($record->option)) {",
          "51:             $record->option = preg_split('/\\s*,\\s*/', trim($record->option), -1, PREG_SPLIT_NO_EMPTY);",
          "",
          "---------------"
        ],
        "mod/choice/view.php||mod/choice/view.php": [
          "File: mod/choice/view.php -> mod/choice/view.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: require_once($CFG->libdir . '/completionlib.php');",
          "7: $id         = required_param('id', PARAM_INT);                 // Course Module ID",
          "10: $notify     = optional_param('notify', '', PARAM_ALPHA);",
          "12: $url = new moodle_url('/mod/choice/view.php', array('id'=>$id));",
          "",
          "[Removed Lines]",
          "8: $action     = optional_param('action', '', PARAM_ALPHA);",
          "9: $attemptids = optional_param_array('attemptid', array(), PARAM_INT); // array of attempt ids for delete action",
          "",
          "[Added Lines]",
          "8: $action     = optional_param('action', '', PARAM_ALPHANUMEXT);",
          "9: $attemptids = optional_param_array('attemptid', array(), PARAM_INT); // Get array of responses to delete or modify.",
          "10: $userids    = optional_param_array('userid', array(), PARAM_INT); // Get array of users whose choices need to be modified.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: $PAGE->set_heading($course->fullname);",
          "56:     $timenow = time();",
          "61:     }",
          "",
          "[Removed Lines]",
          "55: if (data_submitted() && is_enrolled($context, NULL, 'mod/choice:choose') && confirm_sesskey()) {",
          "57:     if (has_capability('mod/choice:deleteresponses', $context) && $action == 'delete') {",
          "59:         choice_delete_responses($attemptids, $choice, $cm, $course); //delete responses.",
          "60:         redirect(\"view.php?id=$cm->id\");",
          "",
          "[Added Lines]",
          "56: if (data_submitted() && !empty($action) && confirm_sesskey()) {",
          "58:     if (has_capability('mod/choice:deleteresponses', $context)) {",
          "59:         if ($action === 'delete') {",
          "61:             choice_delete_responses($attemptids, $choice, $cm, $course);",
          "62:             redirect(\"view.php?id=$cm->id\");",
          "63:         }",
          "64:         if (preg_match('/^choose_(\\d+)$/', $action, $actionmatch)) {",
          "66:             $newoptionid = (int)$actionmatch[1];",
          "67:             choice_modify_responses($userids, $attemptids, $newoptionid, $choice, $cm, $course);",
          "68:             redirect(\"view.php?id=$cm->id\");",
          "69:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:         throw new moodle_exception($reason, 'choice', '', $warnings[$reason]);",
          "73:     }",
          "76:         choice_user_submit_response($answer, $choice, $USER->id, $course, $cm);",
          "77:         redirect(new moodle_url('/mod/choice/view.php',",
          "78:             array('id' => $cm->id, 'notify' => 'choicesaved', 'sesskey' => sesskey())));",
          "",
          "[Removed Lines]",
          "75:     if ($answer) {",
          "",
          "[Added Lines]",
          "84:     if ($answer && is_enrolled($context, null, 'mod/choice:choose')) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "194: if (choice_can_view_results($choice, $current, $choiceopen)) {",
          "200:     $results = prepare_choice_show_results($choice, $course, $cm, $allresponses);",
          "201:     $renderer = $PAGE->get_renderer('mod_choice');",
          "202:     echo $renderer->display_result($results);",
          "",
          "[Removed Lines]",
          "196:     if (!empty($choice->showunanswered)) {",
          "197:         $choice->option[0] = get_string('notanswered', 'choice');",
          "198:         $choice->maxanswers[0] = 0;",
          "199:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9878e8e170691de2d26249825125c08c35c1b695",
      "candidate_info": {
        "commit_hash": "9878e8e170691de2d26249825125c08c35c1b695",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/9878e8e170691de2d26249825125c08c35c1b695",
        "files": [
          "mod/choice/tests/events_test.php"
        ],
        "message": "MDL-51569 mod_choice: Fix use of hardcoded ids\n\n(Previous approach of making up ids longer works now we are validating\nthem..)",
        "before_after_code_files": [
          "mod/choice/tests/events_test.php||mod/choice/tests/events_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "mod/choice/tests/events_test.php||mod/choice/tests/events_test.php"
          ],
          "candidate": [
            "mod/choice/tests/events_test.php||mod/choice/tests/events_test.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/choice/tests/events_test.php||mod/choice/tests/events_test.php": [
          "File: mod/choice/tests/events_test.php -> mod/choice/tests/events_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     public function test_answer_submitted() {",
          "69:         $user = $this->getDataGenerator()->create_user();",
          "72:         $sink = $this->redirectEvents();",
          "74:         $events = $sink->get_events();",
          "",
          "[Removed Lines]",
          "73:         choice_user_submit_response(3, $this->choice, $user->id, $this->course, $this->cm);",
          "",
          "[Added Lines]",
          "68:         global $DB;",
          "72:         $optionids = array_keys($DB->get_records('choice_options', array('choiceid' => $this->choice->id)));",
          "75:         choice_user_submit_response($optionids[3], $this->choice, $user->id, $this->course, $this->cm);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:         $this->assertEquals($user->id, $events[0]->userid);",
          "80:         $this->assertEquals(context_module::instance($this->choice->cmid), $events[0]->get_context());",
          "81:         $this->assertEquals($this->choice->id, $events[0]->other['choiceid']);",
          "83:         $expected = array($this->course->id, \"choice\", \"choose\", 'view.php?id=' . $this->cm->id, $this->choice->id, $this->cm->id);",
          "84:         $this->assertEventLegacyLogData($expected, $events[0]);",
          "85:         $this->assertEventContextNotUsed($events[0]);",
          "",
          "[Removed Lines]",
          "82:         $this->assertEquals(array(3), $events[0]->other['optionid']);",
          "",
          "[Added Lines]",
          "84:         $this->assertEquals(array($optionids[3]), $events[0]->other['optionid']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:         $cm = $DB->get_record('course_modules', array('id' => $choice->cmid));",
          "102:         $context = context_module::instance($choice->cmid);",
          "105:         $sink = $this->redirectEvents();",
          "107:         $events = $sink->get_events();",
          "",
          "[Removed Lines]",
          "106:         choice_user_submit_response(array(1, 3), $choice, $user->id, $this->course, $cm);",
          "",
          "[Added Lines]",
          "106:         $optionids = array_keys($DB->get_records('choice_options', array('choiceid' => $choice->id)));",
          "107:         $submittedoptionids = array($optionids[1], $optionids[3]);",
          "111:         choice_user_submit_response($submittedoptionids, $choice, $user->id, $this->course, $cm);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:         $this->assertEquals($user->id, $events[0]->userid);",
          "113:         $this->assertEquals(context_module::instance($choice->cmid), $events[0]->get_context());",
          "114:         $this->assertEquals($choice->id, $events[0]->other['choiceid']);",
          "116:         $expected = array($this->course->id, \"choice\", \"choose\", 'view.php?id=' . $cm->id, $choice->id, $cm->id);",
          "117:         $this->assertEventLegacyLogData($expected, $events[0]);",
          "118:         $this->assertEventContextNotUsed($events[0]);",
          "",
          "[Removed Lines]",
          "115:         $this->assertEquals(array(1, 3), $events[0]->other['optionid']);",
          "",
          "[Added Lines]",
          "120:         $this->assertEquals($submittedoptionids, $events[0]->other['optionid']);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "146:     public function test_answer_updated() {",
          "148:         $user = $this->getDataGenerator()->create_user();",
          "154:         $sink = $this->redirectEvents();",
          "158:         $events = $sink->get_events();",
          "",
          "[Removed Lines]",
          "151:         choice_user_submit_response(2, $this->choice, $user->id, $this->course, $this->cm);",
          "156:         choice_user_submit_response(3, $this->choice, $user->id, $this->course, $this->cm);",
          "",
          "[Added Lines]",
          "152:         global $DB;",
          "156:         $optionids = array_keys($DB->get_records('choice_options', array('choiceid' => $this->choice->id)));",
          "159:         choice_user_submit_response($optionids[2], $this->choice, $user->id, $this->course, $this->cm);",
          "164:         choice_user_submit_response($optionids[3], $this->choice, $user->id, $this->course, $this->cm);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "163:         $this->assertEquals($user->id, $events[0]->userid);",
          "164:         $this->assertEquals(context_module::instance($this->choice->cmid), $events[0]->get_context());",
          "165:         $this->assertEquals($this->choice->id, $events[0]->other['choiceid']);",
          "167:         $expected = array($this->course->id, \"choice\", \"choose again\", 'view.php?id=' . $this->cm->id,",
          "168:                 $this->choice->id, $this->cm->id);",
          "169:         $this->assertEventLegacyLogData($expected, $events[0]);",
          "",
          "[Removed Lines]",
          "166:         $this->assertEquals(3, $events[0]->other['optionid']);",
          "",
          "[Added Lines]",
          "174:         $this->assertEquals($optionids[3], $events[0]->other['optionid']);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b9c205a991f6c8b118bfcb6070fdb5fca4f42e4",
      "candidate_info": {
        "commit_hash": "6b9c205a991f6c8b118bfcb6070fdb5fca4f42e4",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6b9c205a991f6c8b118bfcb6070fdb5fca4f42e4",
        "files": [
          "mod/choice/tests/events_test.php"
        ],
        "message": "MDL-51569 mod_choice: Fix use of hardcoded ids\n\n(Previous approach of making up ids longer works now we are validating\nthem..)",
        "before_after_code_files": [
          "mod/choice/tests/events_test.php||mod/choice/tests/events_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "mod/choice/tests/events_test.php||mod/choice/tests/events_test.php"
          ],
          "candidate": [
            "mod/choice/tests/events_test.php||mod/choice/tests/events_test.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/choice/tests/events_test.php||mod/choice/tests/events_test.php": [
          "File: mod/choice/tests/events_test.php -> mod/choice/tests/events_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     public function test_answer_submitted() {",
          "69:         $user = $this->getDataGenerator()->create_user();",
          "72:         $sink = $this->redirectEvents();",
          "74:         $events = $sink->get_events();",
          "",
          "[Removed Lines]",
          "73:         choice_user_submit_response(3, $this->choice, $user->id, $this->course, $this->cm);",
          "",
          "[Added Lines]",
          "68:         global $DB;",
          "72:         $optionids = array_keys($DB->get_records('choice_options', array('choiceid' => $this->choice->id)));",
          "75:         choice_user_submit_response($optionids[3], $this->choice, $user->id, $this->course, $this->cm);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:         $this->assertEquals($user->id, $events[0]->userid);",
          "80:         $this->assertEquals(context_module::instance($this->choice->cmid), $events[0]->get_context());",
          "81:         $this->assertEquals($this->choice->id, $events[0]->other['choiceid']);",
          "83:         $expected = array($this->course->id, \"choice\", \"choose\", 'view.php?id=' . $this->cm->id, $this->choice->id, $this->cm->id);",
          "84:         $this->assertEventLegacyLogData($expected, $events[0]);",
          "85:         $this->assertEventContextNotUsed($events[0]);",
          "",
          "[Removed Lines]",
          "82:         $this->assertEquals(array(3), $events[0]->other['optionid']);",
          "",
          "[Added Lines]",
          "84:         $this->assertEquals(array($optionids[3]), $events[0]->other['optionid']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:         $cm = $DB->get_record('course_modules', array('id' => $choice->cmid));",
          "102:         $context = context_module::instance($choice->cmid);",
          "105:         $sink = $this->redirectEvents();",
          "107:         $events = $sink->get_events();",
          "",
          "[Removed Lines]",
          "106:         choice_user_submit_response(array(1, 3), $choice, $user->id, $this->course, $cm);",
          "",
          "[Added Lines]",
          "106:         $optionids = array_keys($DB->get_records('choice_options', array('choiceid' => $choice->id)));",
          "107:         $submittedoptionids = array($optionids[1], $optionids[3]);",
          "111:         choice_user_submit_response($submittedoptionids, $choice, $user->id, $this->course, $cm);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:         $this->assertEquals($user->id, $events[0]->userid);",
          "113:         $this->assertEquals(context_module::instance($choice->cmid), $events[0]->get_context());",
          "114:         $this->assertEquals($choice->id, $events[0]->other['choiceid']);",
          "116:         $expected = array($this->course->id, \"choice\", \"choose\", 'view.php?id=' . $cm->id, $choice->id, $cm->id);",
          "117:         $this->assertEventLegacyLogData($expected, $events[0]);",
          "118:         $this->assertEventContextNotUsed($events[0]);",
          "",
          "[Removed Lines]",
          "115:         $this->assertEquals(array(1, 3), $events[0]->other['optionid']);",
          "",
          "[Added Lines]",
          "120:         $this->assertEquals($submittedoptionids, $events[0]->other['optionid']);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "146:     public function test_answer_updated() {",
          "148:         $user = $this->getDataGenerator()->create_user();",
          "154:         $sink = $this->redirectEvents();",
          "158:         $events = $sink->get_events();",
          "",
          "[Removed Lines]",
          "151:         choice_user_submit_response(2, $this->choice, $user->id, $this->course, $this->cm);",
          "156:         choice_user_submit_response(3, $this->choice, $user->id, $this->course, $this->cm);",
          "",
          "[Added Lines]",
          "152:         global $DB;",
          "156:         $optionids = array_keys($DB->get_records('choice_options', array('choiceid' => $this->choice->id)));",
          "159:         choice_user_submit_response($optionids[2], $this->choice, $user->id, $this->course, $this->cm);",
          "164:         choice_user_submit_response($optionids[3], $this->choice, $user->id, $this->course, $this->cm);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "163:         $this->assertEquals($user->id, $events[0]->userid);",
          "164:         $this->assertEquals(context_module::instance($this->choice->cmid), $events[0]->get_context());",
          "165:         $this->assertEquals($this->choice->id, $events[0]->other['choiceid']);",
          "167:         $expected = array($this->course->id, \"choice\", \"choose again\", 'view.php?id=' . $this->cm->id,",
          "168:                 $this->choice->id, $this->cm->id);",
          "169:         $this->assertEventLegacyLogData($expected, $events[0]);",
          "",
          "[Removed Lines]",
          "166:         $this->assertEquals(3, $events[0]->other['optionid']);",
          "",
          "[Added Lines]",
          "174:         $this->assertEquals($optionids[3], $events[0]->other['optionid']);",
          "",
          "---------------"
        ]
      }
    }
  ]
}