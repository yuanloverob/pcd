{
  "cve_id": "CVE-2015-3179",
  "cve_desc": "login/confirm.php in Moodle through 2.5.9, 2.6.x before 2.6.11, 2.7.x before 2.7.8, and 2.8.x before 2.8.6 allows remote authenticated users to bypass intended login restrictions by leveraging access to an unconfirmed suspended account.",
  "repo": "moodle/moodle",
  "patch_hash": "f236dcc35c3595dfcc77932d84660056e982a310",
  "patch_info": {
    "commit_hash": "f236dcc35c3595dfcc77932d84660056e982a310",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/f236dcc35c3595dfcc77932d84660056e982a310",
    "files": [
      "login/confirm.php"
    ],
    "message": "MDL-50090 user: suspended user can login upon conrimation",
    "before_after_code_files": [
      "login/confirm.php||login/confirm.php"
    ]
  },
  "patch_diff": {
    "login/confirm.php||login/confirm.php": [
      "File: login/confirm.php -> login/confirm.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "77:             print_error('cannotfinduser', '', '', s($username));",
      "78:         }",
      "88:         }",
      "90:         $PAGE->navbar->add(get_string(\"confirmed\"));",
      "",
      "[Removed Lines]",
      "80:         complete_user_login($user);",
      "82:         \\core\\session\\manager::apply_concurrent_login_limit($user->id, session_id());",
      "84:         if ( ! empty($SESSION->wantsurl) ) {   // Send them where they were going",
      "85:             $goto = $SESSION->wantsurl;",
      "86:             unset($SESSION->wantsurl);",
      "87:             redirect($goto);",
      "",
      "[Added Lines]",
      "80:         if (!$user->suspended) {",
      "81:             complete_user_login($user);",
      "83:             \\core\\session\\manager::apply_concurrent_login_limit($user->id, session_id());",
      "85:             if ( ! empty($SESSION->wantsurl) ) {   // Send them where they were going.",
      "86:                 $goto = $SESSION->wantsurl;",
      "87:                 unset($SESSION->wantsurl);",
      "88:                 redirect($goto);",
      "89:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "89e9321f96dcd1c61f051723b1ec0ee29f609347",
      "candidate_info": {
        "commit_hash": "89e9321f96dcd1c61f051723b1ec0ee29f609347",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/89e9321f96dcd1c61f051723b1ec0ee29f609347",
        "files": [
          "admin/settings/plugins.php",
          "lang/en/auth.php",
          "lib/classes/session/manager.php",
          "lib/tests/session_manager_test.php",
          "login/confirm.php",
          "login/index.php",
          "login/lib.php"
        ],
        "message": "MDL-47834 auth: Allow enforcing of login limits",
        "before_after_code_files": [
          "admin/settings/plugins.php||admin/settings/plugins.php",
          "lang/en/auth.php||lang/en/auth.php",
          "lib/classes/session/manager.php||lib/classes/session/manager.php",
          "lib/tests/session_manager_test.php||lib/tests/session_manager_test.php",
          "login/confirm.php||login/confirm.php",
          "login/index.php||login/index.php",
          "login/lib.php||login/lib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "login/confirm.php||login/confirm.php"
          ],
          "candidate": [
            "login/confirm.php||login/confirm.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/plugins.php||admin/settings/plugins.php": [
          "File: admin/settings/plugins.php -> admin/settings/plugins.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     $temp->add(new admin_setting_configcheckbox('loginpageautofocus', new lang_string('loginpageautofocus', 'admin'), new lang_string('loginpageautofocus_help', 'admin'), 0));",
          "78:     $temp->add(new admin_setting_configselect('guestloginbutton', new lang_string('guestloginbutton', 'auth'),",
          "79:                                               new lang_string('showguestlogin', 'auth'), '1', array('0'=>new lang_string('hide'), '1'=>new lang_string('show'))));",
          "80:     $temp->add(new admin_setting_configtext('alternateloginurl', new lang_string('alternateloginurl', 'auth'),",
          "81:                                             new lang_string('alternatelogin', 'auth', htmlspecialchars(get_login_url())), ''));",
          "82:     $temp->add(new admin_setting_configtext('forgottenpasswordurl', new lang_string('forgottenpasswordurl', 'auth'),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:     $options = array(0 => get_string('no'), 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 10 => 10, 20 => 20, 50 => 50);",
          "81:     $temp->add(new admin_setting_configselect('limitconcurrentlogins',",
          "82:         new lang_string('limitconcurrentlogins', 'core_auth'),",
          "83:         new lang_string('limitconcurrentlogins_desc', 'core_auth'), 0, $options));",
          "",
          "---------------"
        ],
        "lang/en/auth.php||lang/en/auth.php": [
          "File: lang/en/auth.php -> lang/en/auth.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: $string['informpasswordpolicy'] = 'The password must have {$a}';",
          "108: $string['instructions'] = 'Instructions';",
          "109: $string['internal'] = 'Internal';",
          "110: $string['locked'] = 'Locked';",
          "111: $string['authloginviaemail'] = 'Allow login via email';",
          "112: $string['authloginviaemail_desc'] = 'Allow users to use both username and email address (if unique) for site login.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: $string['limitconcurrentlogins'] = 'Limit concurrent logins';",
          "111: $string['limitconcurrentlogins_desc'] = 'If enabled the number of concurrent browser logins for each user is restricted. The oldest session is terminated after reaching the limit, please note that users may lose all unsaved work. This setting is not compatible with single sign-on (SSO) authentication plugins.';",
          "",
          "---------------"
        ],
        "lib/classes/session/manager.php||lib/classes/session/manager.php": [
          "File: lib/classes/session/manager.php -> lib/classes/session/manager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "622:         }",
          "623:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "639:     public static function apply_concurrent_login_limit($userid, $sid = null) {",
          "640:         global $CFG, $DB;",
          "645:         if (isguestuser($userid) or empty($userid)) {",
          "647:             return;",
          "648:         }",
          "650:         if (empty($CFG->limitconcurrentlogins) or $CFG->limitconcurrentlogins < 0) {",
          "651:             return;",
          "652:         }",
          "654:         $count = $DB->count_records('sessions', array('userid' => $userid));",
          "656:         if ($count <= $CFG->limitconcurrentlogins) {",
          "657:             return;",
          "658:         }",
          "660:         $i = 0;",
          "661:         $select = \"userid = :userid\";",
          "662:         $params = array('userid' => $userid);",
          "663:         if ($sid) {",
          "664:             if ($DB->record_exists('sessions', array('sid' => $sid, 'userid' => $userid))) {",
          "665:                 $select .= \" AND sid <> :sid\";",
          "666:                 $params['sid'] = $sid;",
          "667:                 $i = 1;",
          "668:             }",
          "669:         }",
          "671:         $sessions = $DB->get_records_select('sessions', $select, $params, 'timecreated DESC', 'id, sid');",
          "672:         foreach ($sessions as $session) {",
          "673:             $i++;",
          "674:             if ($i <= $CFG->limitconcurrentlogins) {",
          "675:                 continue;",
          "676:             }",
          "677:             self::kill_session($session->sid);",
          "678:         }",
          "679:     }",
          "",
          "---------------"
        ],
        "lib/tests/session_manager_test.php||lib/tests/session_manager_test.php": [
          "File: lib/tests/session_manager_test.php -> lib/tests/session_manager_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:         $this->assertEquals(1, $DB->count_records('sessions', array('userid' => $userid, 'sid' => md5('pokus5'))));",
          "327:     }",
          "329:     public function test_kill_all_sessions() {",
          "330:         global $DB, $USER;",
          "331:         $this->resetAfterTest();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:     public function test_apply_concurrent_login_limit() {",
          "330:         global $DB;",
          "331:         $this->resetAfterTest();",
          "333:         $user1 = $this->getDataGenerator()->create_user();",
          "334:         $user2 = $this->getDataGenerator()->create_user();",
          "335:         $guest = guest_user();",
          "337:         $record = new \\stdClass();",
          "338:         $record->state        = 0;",
          "339:         $record->sessdata     = null;",
          "340:         $record->userid       = $user1->id;",
          "341:         $record->timemodified = time();",
          "342:         $record->firstip      = $record->lastip = '10.0.0.1';",
          "344:         $record->sid = md5('hokus1');",
          "345:         $record->timecreated = 20;",
          "346:         $DB->insert_record('sessions', $record);",
          "347:         $record->sid = md5('hokus2');",
          "348:         $record->timecreated = 10;",
          "349:         $DB->insert_record('sessions', $record);",
          "350:         $record->sid = md5('hokus3');",
          "351:         $record->timecreated = 30;",
          "352:         $DB->insert_record('sessions', $record);",
          "354:         $record->userid = $user2->id;",
          "355:         $record->sid = md5('pokus1');",
          "356:         $record->timecreated = 20;",
          "357:         $DB->insert_record('sessions', $record);",
          "358:         $record->sid = md5('pokus2');",
          "359:         $record->timecreated = 10;",
          "360:         $DB->insert_record('sessions', $record);",
          "361:         $record->sid = md5('pokus3');",
          "362:         $record->timecreated = 30;",
          "363:         $DB->insert_record('sessions', $record);",
          "365:         $record->timecreated = 10;",
          "366:         $record->userid = $guest->id;",
          "367:         $record->sid = md5('g1');",
          "368:         $DB->insert_record('sessions', $record);",
          "369:         $record->sid = md5('g2');",
          "370:         $DB->insert_record('sessions', $record);",
          "371:         $record->sid = md5('g3');",
          "372:         $DB->insert_record('sessions', $record);",
          "374:         $record->userid = 0;",
          "375:         $record->sid = md5('nl1');",
          "376:         $DB->insert_record('sessions', $record);",
          "377:         $record->sid = md5('nl2');",
          "378:         $DB->insert_record('sessions', $record);",
          "379:         $record->sid = md5('nl3');",
          "380:         $DB->insert_record('sessions', $record);",
          "382:         set_config('limitconcurrentlogins', 0);",
          "383:         $this->assertCount(12, $DB->get_records('sessions'));",
          "385:         \\core\\session\\manager::apply_concurrent_login_limit($user1->id);",
          "386:         \\core\\session\\manager::apply_concurrent_login_limit($user2->id);",
          "387:         \\core\\session\\manager::apply_concurrent_login_limit($guest->id);",
          "388:         \\core\\session\\manager::apply_concurrent_login_limit(0);",
          "389:         $this->assertCount(12, $DB->get_records('sessions'));",
          "391:         set_config('limitconcurrentlogins', -1);",
          "393:         \\core\\session\\manager::apply_concurrent_login_limit($user1->id);",
          "394:         \\core\\session\\manager::apply_concurrent_login_limit($user2->id);",
          "395:         \\core\\session\\manager::apply_concurrent_login_limit($guest->id);",
          "396:         \\core\\session\\manager::apply_concurrent_login_limit(0);",
          "397:         $this->assertCount(12, $DB->get_records('sessions'));",
          "399:         set_config('limitconcurrentlogins', 2);",
          "401:         \\core\\session\\manager::apply_concurrent_login_limit($user1->id);",
          "402:         $this->assertCount(11, $DB->get_records('sessions'));",
          "403:         $this->assertTrue($DB->record_exists('sessions', array('userid' => $user1->id, 'timecreated' => 20)));",
          "404:         $this->assertTrue($DB->record_exists('sessions', array('userid' => $user1->id, 'timecreated' => 30)));",
          "405:         $this->assertFalse($DB->record_exists('sessions', array('userid' => $user1->id, 'timecreated' => 10)));",
          "407:         $this->assertTrue($DB->record_exists('sessions', array('userid' => $user2->id, 'timecreated' => 20)));",
          "408:         $this->assertTrue($DB->record_exists('sessions', array('userid' => $user2->id, 'timecreated' => 30)));",
          "409:         $this->assertTrue($DB->record_exists('sessions', array('userid' => $user2->id, 'timecreated' => 10)));",
          "410:         set_config('limitconcurrentlogins', 2);",
          "411:         \\core\\session\\manager::apply_concurrent_login_limit($user2->id, md5('pokus2'));",
          "412:         $this->assertCount(10, $DB->get_records('sessions'));",
          "413:         $this->assertFalse($DB->record_exists('sessions', array('userid' => $user2->id, 'timecreated' => 20)));",
          "414:         $this->assertTrue($DB->record_exists('sessions', array('userid' => $user2->id, 'timecreated' => 30)));",
          "415:         $this->assertTrue($DB->record_exists('sessions', array('userid' => $user2->id, 'timecreated' => 10)));",
          "417:         \\core\\session\\manager::apply_concurrent_login_limit($guest->id);",
          "418:         \\core\\session\\manager::apply_concurrent_login_limit(0);",
          "419:         $this->assertCount(10, $DB->get_records('sessions'));",
          "421:         set_config('limitconcurrentlogins', 1);",
          "423:         \\core\\session\\manager::apply_concurrent_login_limit($user1->id, md5('grrr'));",
          "424:         $this->assertCount(9, $DB->get_records('sessions'));",
          "425:         $this->assertFalse($DB->record_exists('sessions', array('userid' => $user1->id, 'timecreated' => 20)));",
          "426:         $this->assertTrue($DB->record_exists('sessions', array('userid' => $user1->id, 'timecreated' => 30)));",
          "427:         $this->assertFalse($DB->record_exists('sessions', array('userid' => $user1->id, 'timecreated' => 10)));",
          "429:         \\core\\session\\manager::apply_concurrent_login_limit($user1->id);",
          "430:         $this->assertCount(9, $DB->get_records('sessions'));",
          "431:         $this->assertFalse($DB->record_exists('sessions', array('userid' => $user1->id, 'timecreated' => 20)));",
          "432:         $this->assertTrue($DB->record_exists('sessions', array('userid' => $user1->id, 'timecreated' => 30)));",
          "433:         $this->assertFalse($DB->record_exists('sessions', array('userid' => $user1->id, 'timecreated' => 10)));",
          "435:         \\core\\session\\manager::apply_concurrent_login_limit($user2->id, md5('pokus2'));",
          "436:         $this->assertCount(8, $DB->get_records('sessions'));",
          "437:         $this->assertFalse($DB->record_exists('sessions', array('userid' => $user2->id, 'timecreated' => 20)));",
          "438:         $this->assertFalse($DB->record_exists('sessions', array('userid' => $user2->id, 'timecreated' => 30)));",
          "439:         $this->assertTrue($DB->record_exists('sessions', array('userid' => $user2->id, 'timecreated' => 10)));",
          "441:         \\core\\session\\manager::apply_concurrent_login_limit($user2->id);",
          "442:         $this->assertCount(8, $DB->get_records('sessions'));",
          "443:         $this->assertFalse($DB->record_exists('sessions', array('userid' => $user2->id, 'timecreated' => 20)));",
          "444:         $this->assertFalse($DB->record_exists('sessions', array('userid' => $user2->id, 'timecreated' => 30)));",
          "445:         $this->assertTrue($DB->record_exists('sessions', array('userid' => $user2->id, 'timecreated' => 10)));",
          "447:         \\core\\session\\manager::apply_concurrent_login_limit($guest->id);",
          "448:         \\core\\session\\manager::apply_concurrent_login_limit(0);",
          "449:         $this->assertCount(8, $DB->get_records('sessions'));",
          "450:     }",
          "",
          "---------------"
        ],
        "login/confirm.php||login/confirm.php": [
          "File: login/confirm.php -> login/confirm.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:         complete_user_login($user);",
          "83:         if ( ! empty($SESSION->wantsurl) ) {   // Send them where they were going",
          "84:             $goto = $SESSION->wantsurl;",
          "85:             unset($SESSION->wantsurl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:         \\core\\session\\manager::apply_concurrent_login_limit($user->id, session_id());",
          "",
          "---------------"
        ],
        "login/index.php||login/index.php": [
          "File: login/index.php -> login/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:         complete_user_login($user);",
          "188:         if (!empty($CFG->nolastloggedin)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:         \\core\\session\\manager::apply_concurrent_login_limit($user->id, session_id());",
          "",
          "---------------"
        ],
        "login/lib.php||login/lib.php": [
          "File: login/lib.php -> login/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:         }",
          "255:         complete_user_login($user); // Triggers the login event.",
          "257:         $urltogo = core_login_get_return_url();",
          "258:         unset($SESSION->wantsurl);",
          "259:         redirect($urltogo, get_string('passwordset'), 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:         \\core\\session\\manager::apply_concurrent_login_limit($user->id, session_id());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98c38993fd6cbd78bf5819c68c55fcfded6467c0",
      "candidate_info": {
        "commit_hash": "98c38993fd6cbd78bf5819c68c55fcfded6467c0",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/98c38993fd6cbd78bf5819c68c55fcfded6467c0",
        "files": [
          "login/confirm.php"
        ],
        "message": "MDL-50090 user: suspended user can login upon conrimation",
        "before_after_code_files": [
          "login/confirm.php||login/confirm.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "login/confirm.php||login/confirm.php"
          ],
          "candidate": [
            "login/confirm.php||login/confirm.php"
          ]
        }
      },
      "candidate_diff": {
        "login/confirm.php||login/confirm.php": [
          "File: login/confirm.php -> login/confirm.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:             print_error('cannotfinduser', '', '', s($username));",
          "78:         }",
          "86:         }",
          "88:         $PAGE->navbar->add(get_string(\"confirmed\"));",
          "",
          "[Removed Lines]",
          "80:         complete_user_login($user);",
          "82:         if ( ! empty($SESSION->wantsurl) ) {   // Send them where they were going",
          "83:             $goto = $SESSION->wantsurl;",
          "84:             unset($SESSION->wantsurl);",
          "85:             redirect($goto);",
          "",
          "[Added Lines]",
          "80:         if (!$user->suspended) {",
          "81:             complete_user_login($user);",
          "83:             if ( ! empty($SESSION->wantsurl) ) {   // Send them where they were going.",
          "84:                 $goto = $SESSION->wantsurl;",
          "85:                 unset($SESSION->wantsurl);",
          "86:                 redirect($goto);",
          "87:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78ec6751fc57bb17bb67c26870fea396390b9937",
      "candidate_info": {
        "commit_hash": "78ec6751fc57bb17bb67c26870fea396390b9937",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/78ec6751fc57bb17bb67c26870fea396390b9937",
        "files": [
          "login/confirm.php"
        ],
        "message": "MDL-50090 user: suspended user can login upon conrimation",
        "before_after_code_files": [
          "login/confirm.php||login/confirm.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "login/confirm.php||login/confirm.php"
          ],
          "candidate": [
            "login/confirm.php||login/confirm.php"
          ]
        }
      },
      "candidate_diff": {
        "login/confirm.php||login/confirm.php": [
          "File: login/confirm.php -> login/confirm.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:             print_error('cannotfinduser', '', '', s($username));",
          "78:         }",
          "86:         }",
          "88:         $PAGE->navbar->add(get_string(\"confirmed\"));",
          "",
          "[Removed Lines]",
          "80:         complete_user_login($user);",
          "82:         if ( ! empty($SESSION->wantsurl) ) {   // Send them where they were going",
          "83:             $goto = $SESSION->wantsurl;",
          "84:             unset($SESSION->wantsurl);",
          "85:             redirect($goto);",
          "",
          "[Added Lines]",
          "80:         if (!$user->suspended) {",
          "81:             complete_user_login($user);",
          "83:             if ( ! empty($SESSION->wantsurl) ) {   // Send them where they were going.",
          "84:                 $goto = $SESSION->wantsurl;",
          "85:                 unset($SESSION->wantsurl);",
          "86:                 redirect($goto);",
          "87:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "811ae9f082697495248c6c87ec80aeaf88c851fc",
      "candidate_info": {
        "commit_hash": "811ae9f082697495248c6c87ec80aeaf88c851fc",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/811ae9f082697495248c6c87ec80aeaf88c851fc",
        "files": [
          "login/confirm.php"
        ],
        "message": "MDL-50090 user: suspended user can login upon conrimation",
        "before_after_code_files": [
          "login/confirm.php||login/confirm.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "login/confirm.php||login/confirm.php"
          ],
          "candidate": [
            "login/confirm.php||login/confirm.php"
          ]
        }
      },
      "candidate_diff": {
        "login/confirm.php||login/confirm.php": [
          "File: login/confirm.php -> login/confirm.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:             print_error('cannotfinduser', '', '', s($username));",
          "78:         }",
          "86:         }",
          "88:         $PAGE->navbar->add(get_string(\"confirmed\"));",
          "",
          "[Removed Lines]",
          "80:         complete_user_login($user);",
          "82:         if ( ! empty($SESSION->wantsurl) ) {   // Send them where they were going",
          "83:             $goto = $SESSION->wantsurl;",
          "84:             unset($SESSION->wantsurl);",
          "85:             redirect($goto);",
          "",
          "[Added Lines]",
          "80:         if (!$user->suspended) {",
          "81:             complete_user_login($user);",
          "83:             if ( ! empty($SESSION->wantsurl) ) {   // Send them where they were going.",
          "84:                 $goto = $SESSION->wantsurl;",
          "85:                 unset($SESSION->wantsurl);",
          "86:                 redirect($goto);",
          "87:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}