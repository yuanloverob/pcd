{
  "cve_id": "CVE-2015-1870",
  "cve_desc": "The event scripts in Automatic Bug Reporting Tool (ABRT) uses world-readable permission on a copy of sosreport file in problem directories, which allows local users to obtain sensitive information from /var/log/messages via unspecified vectors.",
  "repo": "abrt/abrt",
  "patch_hash": "8939398b82006ba1fec4ed491339fc075f43fc7c",
  "patch_info": {
    "commit_hash": "8939398b82006ba1fec4ed491339fc075f43fc7c",
    "repo": "abrt/abrt",
    "commit_url": "https://github.com/abrt/abrt/commit/8939398b82006ba1fec4ed491339fc075f43fc7c",
    "files": [
      "src/daemon/abrt-server.c",
      "src/daemon/abrt.conf",
      "src/hooks/abrt-hook-ccpp.c",
      "src/include/libabrt.h",
      "src/lib/abrt_conf.c",
      "src/lib/hooklib.c",
      "src/plugins/abrt-dump-oops.c",
      "src/plugins/abrt-dump-xorg.c"
    ],
    "message": "make the dump directories owned by root by default\n\nIt was discovered that the abrt event scripts create a user-readable\ncopy of a sosreport file in abrt problem directories, and include\nexcerpts of /var/log/messages selected by the user-controlled process\nname, leading to an information disclosure.\n\nThis issue was discovered by Florian Weimer of Red Hat Product Security.\n\nRelated: #1212868\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
    "before_after_code_files": [
      "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
      "src/daemon/abrt.conf||src/daemon/abrt.conf",
      "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c",
      "src/include/libabrt.h||src/include/libabrt.h",
      "src/lib/abrt_conf.c||src/lib/abrt_conf.c",
      "src/lib/hooklib.c||src/lib/hooklib.c",
      "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c",
      "src/plugins/abrt-dump-xorg.c||src/plugins/abrt-dump-xorg.c"
    ]
  },
  "patch_diff": {
    "src/daemon/abrt-server.c||src/daemon/abrt-server.c": [
      "File: src/daemon/abrt-server.c -> src/daemon/abrt-server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "15:   with this program; if not, write to the Free Software Foundation, Inc.,",
      "16:   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.",
      "18: #include \"libabrt.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: #include \"problem_api.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "153:         error_msg(\"Bad problem directory name '%s', should start with: '%s'\", dirname, g_settings_dump_location);",
      "155:     }",
      "157:     {",
      "158:         if (errno == ENOTDIR)",
      "159:         {",
      "",
      "[Removed Lines]",
      "156:     if (!dump_dir_accessible_by_uid(dirname, client_uid))",
      "",
      "[Added Lines]",
      "157:     if (g_settings_privatereports)",
      "158:     {",
      "159:         struct stat statbuf;",
      "160:         if (lstat(dirname, &statbuf) != 0 || !S_ISDIR(statbuf.st_mode))",
      "161:         {",
      "162:             error_msg(\"Path '%s' isn't directory\", dirname);",
      "164:         }",
      "166:         struct group *gr = getgrnam(\"abrt\");",
      "167:         if (!gr)",
      "168:         {",
      "169:             error_msg(\"Group 'abrt' does not exist\");",
      "170:             return 500;",
      "171:         }",
      "172:         if (statbuf.st_uid != 0 || !(statbuf.st_gid == 0 || statbuf.st_gid == gr->gr_gid) || statbuf.st_mode & 07)",
      "173:         {",
      "174:             error_msg(\"Problem directory '%s' isn't owned by root:abrt or others are not restricted from access\", dirname);",
      "175:             return 403;",
      "176:         }",
      "177:         struct dump_dir *dd = dd_opendir(dirname, DD_OPEN_READONLY);",
      "178:         const bool complete = dd && problem_dump_dir_is_complete(dd);",
      "179:         dd_close(dd);",
      "180:         if (complete)",
      "181:         {",
      "182:             error_msg(\"Problem directory '%s' has already been processed\", dirname);",
      "183:             return 403;",
      "184:         }",
      "185:     }",
      "186:     else if (!dump_dir_accessible_by_uid(dirname, client_uid))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "381:     if (!dd)",
      "382:     {",
      "383:         error_msg_and_die(\"Error creating problem directory '%s'\", path);",
      "",
      "[Removed Lines]",
      "380:     struct dump_dir *dd = dd_create(path, client_uid, DEFAULT_DUMP_DIR_MODE);",
      "",
      "[Added Lines]",
      "410:     struct dump_dir *dd = dd_create(path, g_settings_privatereports ? 0 : client_uid, DEFAULT_DUMP_DIR_MODE);",
      "",
      "---------------"
    ],
    "src/daemon/abrt.conf||src/daemon/abrt.conf": [
      "File: src/daemon/abrt.conf -> src/daemon/abrt.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: #                session; otherwise No.",
      "44: #",
      "45: # ShortenedReporting = yes",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: # Disable this if you want to regular users to own the problem data colleted by",
      "48: # abrt.",
      "49: #",
      "50: PrivateReports = yes",
      "",
      "---------------"
    ],
    "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
      "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "682:         }",
      "683:     }",
      "686:     if (setting_MakeCompatCore && ulimit_c != 0)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "686:     const uid_t dduid = g_settings_privatereports ? 0 : fsuid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "773:         goto create_user_core;",
      "774:     }",
      "784:     if (dd)",
      "785:     {",
      "786:         char *rootdir = get_rootdir(pid);",
      "788:         dd_create_basic_files(dd, fsuid, NULL);",
      "790:         char source_filename[sizeof(\"/proc/%lu/somewhat_long_name\") + sizeof(long)*3];",
      "",
      "[Removed Lines]",
      "783:     dd = dd_create_skeleton(path, fsuid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);",
      "",
      "[Added Lines]",
      "786:     dd = dd_create_skeleton(path, dduid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);",
      "",
      "---------------"
    ],
    "src/include/libabrt.h||src/include/libabrt.h": [
      "File: src/include/libabrt.h -> src/include/libabrt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "62: extern char *        g_settings_autoreporting_event;",
      "63: #define g_settings_shortenedreporting abrt_g_settings_shortenedreporting",
      "64: extern bool          g_settings_shortenedreporting;",
      "67: #define load_abrt_conf abrt_load_abrt_conf",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65: #define g_settings_privatereports abrt_g_settings_privatereports",
      "66: extern bool          g_settings_privatereports;",
      "",
      "---------------"
    ],
    "src/lib/abrt_conf.c||src/lib/abrt_conf.c": [
      "File: src/lib/abrt_conf.c -> src/lib/abrt_conf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: bool          g_settings_autoreporting = 0;",
      "28: char *        g_settings_autoreporting_event = NULL;",
      "29: bool          g_settings_shortenedreporting = 0;",
      "31: void free_abrt_conf_data()",
      "32: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: bool          g_settings_privatereports = true;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:     else",
      "103:         g_settings_shortenedreporting = 0;",
      "105:     GHashTableIter iter;",
      "106:     const char *name;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:     value = get_map_string_item_or_NULL(settings, \"PrivateReports\");",
      "107:     if (value)",
      "108:     {",
      "109:         g_settings_privatereports = string_to_bool(value);",
      "110:         remove_map_string_item(settings, \"PrivateReports\");",
      "111:     }",
      "",
      "---------------"
    ],
    "src/lib/hooklib.c||src/lib/hooklib.c": [
      "File: src/lib/hooklib.c -> src/lib/hooklib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "410: {",
      "411:     load_abrt_conf();",
      "415:     char *problem_id = NULL;",
      "416:     if (dd)",
      "",
      "[Removed Lines]",
      "413:     struct dump_dir *dd = create_dump_dir_from_problem_data(pd, g_settings_dump_location);",
      "",
      "[Added Lines]",
      "413:     struct dump_dir *dd = NULL;",
      "415:     if (g_settings_privatereports)",
      "416:         dd = create_dump_dir_from_problem_data_ext(pd, g_settings_dump_location, 0);",
      "417:     else",
      "418:         dd = create_dump_dir_from_problem_data(pd, g_settings_dump_location);",
      "",
      "---------------"
    ],
    "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c": [
      "File: src/plugins/abrt-dump-oops.c -> src/plugins/abrt-dump-oops.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:         mode = DEFAULT_DUMP_DIR_MODE;",
      "190:         my_euid = geteuid();",
      "191:     }",
      "193:     pid_t my_pid = getpid();",
      "194:     unsigned idx = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:     if (g_settings_privatereports)",
      "193:     {",
      "194:         if (world_readable_dump)",
      "195:             log(\"Not going to make dump directories world readable because PrivateReports is on\");",
      "197:         mode = DEFAULT_DUMP_DIR_MODE;",
      "198:         my_euid = 0;",
      "199:     }",
      "",
      "---------------"
    ],
    "src/plugins/abrt-dump-xorg.c||src/plugins/abrt-dump-xorg.c": [
      "File: src/plugins/abrt-dump-xorg.c -> src/plugins/abrt-dump-xorg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "82:         mode = DEFAULT_DUMP_DIR_MODE;",
      "83:         my_euid = geteuid();",
      "84:     }",
      "86:     pid_t my_pid = getpid();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "85:     if (g_settings_privatereports)",
      "86:     {",
      "87:         if ((g_opts & OPT_x))",
      "88:             log(\"Not going to make dump directories world readable because PrivateReports is on\");",
      "90:         mode = DEFAULT_DUMP_DIR_MODE;",
      "91:         my_euid = 0;",
      "92:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "17cb66b13997b0159b4253b3f5722db79f476d68",
      "candidate_info": {
        "commit_hash": "17cb66b13997b0159b4253b3f5722db79f476d68",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/17cb66b13997b0159b4253b3f5722db79f476d68",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: stop reading hs_error.log from /tmp\n\nThe file might contain anything and there is no way to verify its\ncontents.\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "795:             unlink(core_basename);",
          "796:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "799: #if 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "827:                 close(src_fd);",
          "828:             }",
          "829:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "832: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fdf93685d4f3fc36fe50d34a11e24662c4cb2d8c",
      "candidate_info": {
        "commit_hash": "fdf93685d4f3fc36fe50d34a11e24662c4cb2d8c",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/fdf93685d4f3fc36fe50d34a11e24662c4cb2d8c",
        "files": [
          "src/daemon/abrt-action-save-package-data.c"
        ],
        "message": "a-a-save-package-data: turn off reading data from root directories\n\nMaking copies of files from arbitrary root directories is not secure.\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/daemon/abrt-action-save-package-data.c||src/daemon/abrt-action-save-package-data.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/daemon/abrt-action-save-package-data.c||src/daemon/abrt-action-save-package-data.c": [
          "File: src/daemon/abrt-action-save-package-data.c -> src/daemon/abrt-action-save-package-data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:     char *cmdline = NULL;",
          "225:     char *executable = NULL;",
          "227:     char *package_short_name = NULL;",
          "228:     struct pkg_envra *pkg_name = NULL;",
          "229:     char *component = NULL;",
          "",
          "[Removed Lines]",
          "226:     char *rootdir = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:     cmdline = dd_load_text_ext(dd, FILENAME_CMDLINE, DD_FAIL_QUIETLY_ENOENT);",
          "235:     executable = dd_load_text(dd, FILENAME_EXECUTABLE);",
          "",
          "[Removed Lines]",
          "236:     rootdir = dd_load_text_ext(dd, FILENAME_ROOTDIR,",
          "237:                                DD_FAIL_QUIETLY_ENOENT | DD_LOAD_TEXT_RETURN_NULL_ON_FAILURE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "247:     }",
          "250:     if (!pkg_name)",
          "251:     {",
          "252:         if (settings_bProcessUnpackaged)",
          "",
          "[Removed Lines]",
          "249:     pkg_name = rpm_get_package_nvr(executable, rootdir);",
          "",
          "[Added Lines]",
          "246:     pkg_name = rpm_get_package_nvr(executable, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "330:     }",
          "334:     dd = dd_opendir(dump_dir_name, /*flags:*/ 0);",
          "335:     if (!dd)",
          "",
          "[Removed Lines]",
          "332:     component = rpm_get_component(executable, rootdir);",
          "",
          "[Added Lines]",
          "329:     component = rpm_get_component(executable, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "355:  ret:",
          "356:     free(cmdline);",
          "357:     free(executable);",
          "359:     free(package_short_name);",
          "360:     free_pkg_envra(pkg_name);",
          "361:     free(component);",
          "",
          "[Removed Lines]",
          "358:     free(rootdir);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9943a77bca37a0829ccd3784d1dfab37f8c24e7b",
      "candidate_info": {
        "commit_hash": "9943a77bca37a0829ccd3784d1dfab37f8c24e7b",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/9943a77bca37a0829ccd3784d1dfab37f8c24e7b",
        "files": [
          "po/POTFILES.in",
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
        ],
        "message": "a-a-i-d-t-a-cache: sanitize arguments\n\nParse command lines arguments and use them to create new arguments for\nexec(). No black listing algorithm would be safe enough. The only\nallowed arguments are the following:\n* v - verbose\n* y - noninteractive\n* repo - enable only repositories whose names match the pattern\n* exact - download packages for the specified files\n* ids - passed as magic proc fd path to the wrapped executable\n\nThe wrapper opens the list of needed build ids passes /proc/self/fd/[fd]\nto the wrapped process. This allows us to open the file with caller's\nUID/GID in order to avoid information disclosures.\n\nForbidden arguments:\n* cache - allows regular users to create a user writable dump directory\n* tmpdir - the same as above\n* size_mb - no need to allow users to fiddle with the cache size\n\nRelated: #1216962\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "po/POTFILES.in||po/POTFILES.in",
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "po/POTFILES.in||po/POTFILES.in": [
          "File: po/POTFILES.in -> po/POTFILES.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: src/plugins/abrt-action-generate-backtrace.c",
          "32: src/plugins/abrt-action-generate-core-backtrace.c",
          "33: src/plugins/abrt-action-install-debuginfo.in",
          "34: src/plugins/abrt-action-perform-ccpp-analysis.in",
          "35: src/plugins/abrt-action-trim-files.c",
          "36: src/plugins/abrt-action-ureport",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
          "",
          "---------------"
        ],
        "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c": [
          "File: src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c -> src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: int main(int argc, char **argv)",
          "31: {",
          "40:     {",
          "54:     }",
          "",
          "[Removed Lines]",
          "37:     char **pp = argv;",
          "38:     char *arg;",
          "39:     while ((arg = *++pp) != NULL)",
          "42:         if (strcmp(arg, \"--ids=-\") == 0)",
          "43:             continue;",
          "45:         if (strncmp(arg, \"--exact\", 7) == 0)",
          "46:             continue;",
          "48:         if (strncmp(arg, \"--cache\", 7) == 0)",
          "49:             error_msg_and_die(\"bad option %s\", arg);",
          "50:         if (strncmp(arg, \"--tmpdir\", 8) == 0)",
          "51:             error_msg_and_die(\"bad option %s\", arg);",
          "52:         if (strncmp(arg, \"--ids\", 5) == 0)",
          "53:             error_msg_and_die(\"bad option %s\", arg);",
          "",
          "[Added Lines]",
          "33:     setlocale(LC_ALL, \"\");",
          "34: #if ENABLE_NLS",
          "35:     bindtextdomain(PACKAGE, LOCALEDIR);",
          "36:     textdomain(PACKAGE);",
          "37: #endif",
          "39:     abrt_init(argv);",
          "42:     const char *program_usage_string = _(",
          "43:         \"& [-y] [-i BUILD_IDS_FILE|-i -] [-e PATH[:PATH]...]\\n\"",
          "44:         \"\\t[-r REPO]\\n\"",
          "45:         \"\\n\"",
          "46:         \"Installs debuginfo packages for all build-ids listed in BUILD_IDS_FILE to\\n\"",
          "47:         \"ABRT system cache.\"",
          "48:     );",
          "50:     enum {",
          "51:         OPT_v = 1 << 0,",
          "52:         OPT_y = 1 << 1,",
          "53:         OPT_i = 1 << 2,",
          "54:         OPT_e = 1 << 3,",
          "55:         OPT_r = 1 << 4,",
          "56:         OPT_s = 1 << 5,",
          "57:     };",
          "59:     const char *build_ids = \"build_ids\";",
          "60:     const char *exact = NULL;",
          "61:     const char *repo = NULL;",
          "62:     const char *size_mb = NULL;",
          "64:     struct options program_options[] = {",
          "65:         OPT__VERBOSE(&g_verbose),",
          "66:         OPT_BOOL  ('y', \"yes\",         NULL,                   _(\"Noninteractive, assume 'Yes' to all questions\")),",
          "67:         OPT_STRING('i', \"ids\",   &build_ids, \"BUILD_IDS_FILE\", _(\"- means STDIN, default: build_ids\")),",
          "68:         OPT_STRING('e', \"exact\",     &exact, \"EXACT\",          _(\"Download only specified files\")),",
          "69:         OPT_STRING('r', \"repo\",       &repo, \"REPO\",           _(\"Pattern to use when searching for repos, default: *debug*\")),",
          "70:         OPT_STRING('s', \"size_mb\", &size_mb, \"SIZE_MB\",        _(\"Ignored option\")),",
          "71:         OPT_END()",
          "72:     };",
          "73:     const unsigned opts = parse_opts(argc, argv, program_options, program_usage_string);",
          "82:     char *build_ids_self_fd = NULL;",
          "83:     if (strcmp(\"-\", build_ids) != 0)",
          "84:     {",
          "85:         const int build_ids_fd = open(build_ids, O_RDONLY);",
          "86:         if (build_ids_fd < 0)",
          "87:             perror_msg_and_die(\"Failed to open file '%s'\", build_ids);",
          "90:         build_ids_self_fd = xasprintf(\"/proc/self/fd/%d\", build_ids_fd);",
          "91:     }",
          "94:     const char *args[11];",
          "96:         const char *verbs[] = { \"\", \"-v\", \"-vv\", \"-vvv\" };",
          "97:         unsigned i = 0;",
          "98:         args[i++] = EXECUTABLE;",
          "99:         args[i++] = \"--ids\";",
          "100:         args[i++] = (build_ids_self_fd != NULL) ? build_ids_self_fd : \"-\";",
          "101:         args[i++] = verbs[g_verbose <= 3 ? g_verbose : 3];",
          "102:         if ((opts & OPT_y))",
          "103:             args[i++] = \"-y\";",
          "104:         if ((opts & OPT_e))",
          "105:         {",
          "106:             args[i++] = \"--exact\";",
          "107:             args[i++] = exact;",
          "108:         }",
          "109:         if ((opts & OPT_r))",
          "110:         {",
          "111:             args[i++] = \"--repo\";",
          "112:             args[i++] = repo;",
          "113:         }",
          "114:         args[i++] = \"--\";",
          "115:         args[i] = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:         putenv(path_env);",
          "123:     }",
          "126:     error_msg_and_die(\"Can't execute %s\", EXECUTABLE);",
          "127: }",
          "",
          "[Removed Lines]",
          "125:     execvp(EXECUTABLE, argv);",
          "",
          "[Added Lines]",
          "187:     execvp(EXECUTABLE, (char **)args);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7269a2cc88735aee0d1fa62491b9efe73ab5c6e8",
      "candidate_info": {
        "commit_hash": "7269a2cc88735aee0d1fa62491b9efe73ab5c6e8",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/7269a2cc88735aee0d1fa62491b9efe73ab5c6e8",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: revert the UID/GID changes if user core fails\n\nThanks Florian Weimer <fweimer@redhat.com>\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:         return -1;",
          "352:     }",
          "357:     if (strcmp(core_basename, \"core\") == 0)",
          "358:     {",
          "",
          "[Removed Lines]",
          "354:     xsetegid(get_fsgid());",
          "355:     xseteuid(fsuid);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "462:     {",
          "465:     }",
          "467:     xsetegid(0);",
          "468:     xseteuid(0);",
          "471:      || !S_ISREG(sb.st_mode)",
          "472:      || sb.st_nlink != 1",
          "473:      || sb.st_uid != fsuid",
          "474:     ) {",
          "479:         goto user_core_fail;",
          "480:     }",
          "481:     if (ftruncate(user_core_fd, 0) != 0) {",
          "",
          "[Removed Lines]",
          "450:     if (newcon != NULL && setfscreatecon_raw(newcon) < 0)",
          "451:     {",
          "452:         perror_msg(\"setfscreatecon_raw(%s)\", newcon);",
          "453:         return -1;",
          "454:     }",
          "456:     struct stat sb;",
          "457:     errno = 0;",
          "461:     if (newcon != NULL && setfscreatecon_raw(NULL) < 0)",
          "463:         error_msg(\"setfscreatecon_raw(NULL)\");",
          "464:         goto user_core_fail;",
          "469:     if (user_core_fd < 0",
          "470:      || fstat(user_core_fd, &sb) != 0",
          "475:         if (user_core_fd < 0)",
          "476:             perror_msg(\"Can't open '%s' at '%s'\", core_basename, user_pwd);",
          "477:         else",
          "478:             perror_msg(\"'%s' at '%s' is not a regular file with link count 1 owned by UID(%d)\", core_basename, user_pwd, fsuid);",
          "",
          "[Added Lines]",
          "446:     int user_core_fd = -1;",
          "447:     int selinux_fail = 1;",
          "452:     xsetegid(get_fsgid());",
          "453:     xseteuid(fsuid);",
          "457:     if (/* SELinux is disabled  */ newcon == NULL",
          "458:      || /* or the call succeeds */ setfscreatecon_raw(newcon) >= 0)",
          "465:         if (user_core_fd < 0)",
          "466:             perror_msg(\"Can't open '%s' at '%s'\", core_basename, user_pwd);",
          "469:         if (newcon != NULL && setfscreatecon_raw(NULL) < 0)",
          "470:             perror_msg(\"setfscreatecon_raw(NULL)\");",
          "471:         else",
          "472:             selinux_fail = 0;",
          "474:     else",
          "475:         perror_msg(\"setfscreatecon_raw(%s)\", newcon);",
          "483:     if (user_core_fd < 0 || selinux_fail)",
          "484:         goto user_core_fail;",
          "486:     struct stat sb;",
          "487:     if (fstat(user_core_fd, &sb) != 0",
          "492:         perror_msg(\"'%s' at '%s' is not a regular file with link count 1 owned by UID(%d)\", core_basename, user_pwd, fsuid);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "806bb07571b698d90169c3b73cb65cd09c900284",
      "candidate_info": {
        "commit_hash": "806bb07571b698d90169c3b73cb65cd09c900284",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/806bb07571b698d90169c3b73cb65cd09c900284",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: do not use value of /proc/PID/cwd for chdir\n\nAvoid symlink resolutions.\n\nThis issue was discovered by Florian Weimer of Red Hat Product Security.\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: static char *user_pwd;",
          "147: static char *proc_pid_status;",
          "148: static struct dump_dir *dd;",
          "149: static int user_core_fd = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147: static DIR *proc_cwd;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164: static const char percent_specifiers[] = \"%scpugteh\";",
          "165: static char *core_basename = (char*) \"core\";",
          "174: static char* get_executable(pid_t pid, int *fd_p)",
          "175: {",
          "",
          "[Removed Lines]",
          "171: static char *full_core_basename;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "198:     return executable;",
          "199: }",
          "201: static char* get_cwd(pid_t pid)",
          "202: {",
          "203:     char buf[sizeof(\"/proc/%lu/cwd\") + sizeof(long)*3];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195: static DIR *open_cwd(pid_t pid)",
          "196: {",
          "197:     char buf[sizeof(\"/proc/%lu/cwd\") + sizeof(long)*3];",
          "198:     sprintf(buf, \"/proc/%lu/cwd\", (long)pid);",
          "200:     DIR *cwd = opendir(buf);",
          "201:     if (cwd == NULL)",
          "202:         perror_msg(\"Can't open process's CWD for CompatCore\");",
          "204:     return cwd;",
          "205: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "269: static int open_user_core(uid_t uid, uid_t fsuid, pid_t pid, char **percent_values)",
          "270: {",
          "276:         return -1;",
          "279:     struct passwd* pw = getpwuid(uid);",
          "280:     gid_t gid = pw ? pw->pw_gid : uid;",
          "",
          "[Removed Lines]",
          "271:     errno = 0;",
          "272:     if (user_pwd == NULL",
          "273:      || chdir(user_pwd) != 0",
          "274:     ) {",
          "275:         perror_msg(\"Can't cd to '%s'\", user_pwd);",
          "277:     }",
          "",
          "[Added Lines]",
          "277:     proc_cwd = open_cwd(pid);",
          "278:     if (proc_cwd == NULL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "337:         }",
          "338:     }",
          "342:     {",
          "349:     }",
          "",
          "[Removed Lines]",
          "340:     full_core_basename = core_basename;",
          "341:     if (core_basename[0] != '/')",
          "343:         if (g_need_nonrelative)",
          "344:         {",
          "345:             error_msg(\"Current suid_dumpable policy prevents from saving core dumps according to relative core_pattern\");",
          "346:             return -1;",
          "347:         }",
          "348:         core_basename = concat_path_file(user_pwd, core_basename);",
          "",
          "[Added Lines]",
          "342:     if (g_need_nonrelative && core_basename[0] != '/')",
          "344:         error_msg(\"Current suid_dumpable policy prevents from saving core dumps according to relative core_pattern\");",
          "345:         return -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "391:      || sb.st_uid != fsuid",
          "392:     ) {",
          "393:         if (user_core_fd < 0)",
          "395:         else",
          "397:         return -1;",
          "398:     }",
          "399:     if (ftruncate(user_core_fd, 0) != 0) {",
          "403:         return -1;",
          "404:     }",
          "",
          "[Removed Lines]",
          "394:             perror_msg(\"Can't open '%s'\", full_core_basename);",
          "396:             perror_msg(\"'%s' is not a regular file with link count 1 owned by UID(%d)\", full_core_basename, fsuid);",
          "401:         perror_msg(\"Can't truncate '%s' to size 0\", full_core_basename);",
          "402:         unlink(core_basename);",
          "",
          "[Added Lines]",
          "391:             perror_msg(\"Can't open '%s' at '%s'\", core_basename, user_pwd);",
          "393:             perror_msg(\"'%s' at '%s' is not a regular file with link count 1 owned by UID(%d)\", core_basename, user_pwd, fsuid);",
          "398:         perror_msg(\"Can't truncate '%s' at '%s' to size 0\", core_basename, user_pwd);",
          "399:         unlinkat(dirfd(proc_cwd), core_basename, /*unlink file*/0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "466:     if (dd)",
          "467:         dd_delete(dd);",
          "468:     if (user_core_fd >= 0)",
          "473:     errno = sv_errno;",
          "474:     perror_msg_and_die(\"Can't open '%s'\", filename);",
          "475: }",
          "",
          "[Removed Lines]",
          "469:     {",
          "470:         xchdir(user_pwd);",
          "471:         unlink(core_basename);",
          "472:     }",
          "",
          "[Added Lines]",
          "466:         unlinkat(dirfd(proc_cwd), core_basename, /*unlink file*/0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "573:                         (long)pid, executable);",
          "574:     }",
          "577:     log_notice(\"user_pwd:'%s'\", user_pwd);",
          "579:     sprintf(path, \"/proc/%lu/status\", (long)pid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "571:     user_pwd = get_cwd(pid);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "672:             error_msg_and_die(\"Error saving '%s'\", path);",
          "673:         }",
          "674:         log(\"Saved core dump of pid %lu (%s) to %s (%llu bytes)\", (long)pid, executable, path, (long long)core_size);",
          "675:         return 0;",
          "676:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "670:         if (proc_cwd != NULL)",
          "671:             closedir(proc_cwd);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "791:             unlink(path);",
          "792:             dd_delete(dd);",
          "793:             if (user_core_fd >= 0)",
          "800:             error_msg_and_die(\"Error writing '%s'\", path);",
          "",
          "[Removed Lines]",
          "794:             {",
          "795:                 xchdir(user_pwd);",
          "796:                 unlink(core_basename);",
          "797:             }",
          "",
          "[Added Lines]",
          "791:                 unlinkat(dirfd(proc_cwd), core_basename, /*unlink file*/0);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "807:             )",
          "808:         ) {",
          "812:         }",
          "",
          "[Removed Lines]",
          "810:             xchdir(user_pwd);",
          "811:             unlink(core_basename);",
          "",
          "[Added Lines]",
          "804:             unlinkat(dirfd(proc_cwd), core_basename, /*unlink file*/0);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "879:         }",
          "881:         free(rootdir);",
          "882:         return 0;",
          "883:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "875:         if (proc_cwd != NULL)",
          "876:             closedir(proc_cwd);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "890:         if (fsync(user_core_fd) != 0 || close(user_core_fd) != 0 || core_size < 0)",
          "891:         {",
          "896:             return 1;",
          "897:         }",
          "898:         if (ulimit_c == 0 || core_size > ulimit_c)",
          "899:         {",
          "902:             return 1;",
          "903:         }",
          "905:     }",
          "907:     return 0;",
          "908: }",
          "",
          "[Removed Lines]",
          "893:             perror_msg(\"Error writing '%s'\", full_core_basename);",
          "894:             xchdir(user_pwd);",
          "895:             unlink(core_basename);",
          "900:             xchdir(user_pwd);",
          "901:             unlink(core_basename);",
          "904:         log(\"Saved core dump of pid %lu to %s (%llu bytes)\", (long)pid, full_core_basename, (long long)core_size);",
          "",
          "[Added Lines]",
          "888:             perror_msg(\"Error writing '%s' at '%s'\", core_basename, user_pwd);",
          "889:             unlinkat(dirfd(proc_cwd), core_basename, /*unlink file*/0);",
          "890:             if (proc_cwd != NULL)",
          "891:                 closedir(proc_cwd);",
          "896:             unlinkat(dirfd(proc_cwd), core_basename, /*unlink file*/0);",
          "897:             if (proc_cwd != NULL)",
          "898:                 closedir(proc_cwd);",
          "901:         log(\"Saved core dump of pid %lu to %s at %s (%llu bytes)\", (long)pid, core_basename, user_pwd, (long long)core_size);",
          "904:     if (proc_cwd != NULL)",
          "905:         closedir(proc_cwd);",
          "",
          "---------------"
        ]
      }
    }
  ]
}