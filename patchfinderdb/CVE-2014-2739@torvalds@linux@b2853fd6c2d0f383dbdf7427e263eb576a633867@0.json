{
  "cve_id": "CVE-2014-2739",
  "cve_desc": "The cma_req_handler function in drivers/infiniband/core/cma.c in the Linux kernel 3.14.x through 3.14.1 attempts to resolve an RDMA over Converged Ethernet (aka RoCE) address that is properly resolved within a different module, which allows remote attackers to cause a denial of service (incorrect pointer dereference and system crash) via crafted network traffic.",
  "repo": "torvalds/linux",
  "patch_hash": "b2853fd6c2d0f383dbdf7427e263eb576a633867",
  "patch_info": {
    "commit_hash": "b2853fd6c2d0f383dbdf7427e263eb576a633867",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/b2853fd6c2d0f383dbdf7427e263eb576a633867",
    "files": [
      "drivers/infiniband/core/cm.c",
      "drivers/infiniband/core/cma.c",
      "include/rdma/ib_cm.h"
    ],
    "message": "IB/core: Don't resolve passive side RoCE L2 address in CMA REQ handler\n\nThe code that resolves the passive side source MAC within the rdma_cm\nconnection request handler was both redundant and buggy, so remove it.\n\nIt was redundant since later, when an RC QP is modified to RTR state,\nthe resolution will take place in the ib_core module.  It was buggy\nbecause this callback also deals with UD SIDR exchange, for which we\nincorrectly looked at the REQ member of the CM event and dereferenced\na random value.\n\nFixes: dd5f03beb4f7 (\"IB/core: Ethernet L2 attributes in verbs/cm structures\")\nSigned-off-by: Moni Shoua <monis@mellanox.com>\nSigned-off-by: Or Gerlitz <ogerlitz@mellanox.com>\nSigned-off-by: Roland Dreier <roland@purestorage.com>",
    "before_after_code_files": [
      "drivers/infiniband/core/cm.c||drivers/infiniband/core/cm.c",
      "drivers/infiniband/core/cma.c||drivers/infiniband/core/cma.c",
      "include/rdma/ib_cm.h||include/rdma/ib_cm.h"
    ]
  },
  "patch_diff": {
    "drivers/infiniband/core/cm.c||drivers/infiniband/core/cm.c": [
      "File: drivers/infiniband/core/cm.c -> drivers/infiniband/core/cm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "349:       grh, &av->ah_attr);",
      "350: }",
      "369: static int cm_init_av_by_path(struct ib_sa_path_rec *path, struct cm_av *av)",
      "370: {",
      "371:  struct cm_device *cm_dev;",
      "",
      "[Removed Lines]",
      "352: int ib_update_cm_av(struct ib_cm_id *id, const u8 *smac, const u8 *alt_smac)",
      "353: {",
      "354:  struct cm_id_private *cm_id_priv;",
      "356:  cm_id_priv = container_of(id, struct cm_id_private, id);",
      "358:  if (smac != NULL)",
      "359:   memcpy(cm_id_priv->av.smac, smac, sizeof(cm_id_priv->av.smac));",
      "361:  if (alt_smac != NULL)",
      "362:   memcpy(cm_id_priv->alt_av.smac, alt_smac,",
      "363:          sizeof(cm_id_priv->alt_av.smac));",
      "365:  return 0;",
      "366: }",
      "367: EXPORT_SYMBOL(ib_update_cm_av);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "drivers/infiniband/core/cma.c||drivers/infiniband/core/cma.c": [
      "File: drivers/infiniband/core/cma.c -> drivers/infiniband/core/cma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1284:  struct rdma_id_private *listen_id, *conn_id;",
      "1285:  struct rdma_cm_event event;",
      "1286:  int offset, ret;",
      "1297:  listen_id = cm_id->context;",
      "1298:  if (!cma_check_req_qp_type(&listen_id->id, ib_event))",
      "",
      "[Removed Lines]",
      "1287:  u8 smac[ETH_ALEN];",
      "1288:  u8 alt_smac[ETH_ALEN];",
      "1289:  u8 *psmac = smac;",
      "1290:  u8 *palt_smac = alt_smac;",
      "1291:  int is_iboe = ((rdma_node_get_transport(cm_id->device->node_type) ==",
      "1292:    RDMA_TRANSPORT_IB) &&",
      "1293:          (rdma_port_get_link_layer(cm_id->device,",
      "1294:    ib_event->param.req_rcvd.port) ==",
      "1295:    IB_LINK_LAYER_ETHERNET));",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1336:  ret = conn_id->id.event_handler(&conn_id->id, &event);",
      "1337:  if (ret)",
      "1338:   goto err3;",
      "1358:  mutex_lock(&lock);",
      "1361:  if (cma_comp(conn_id, RDMA_CM_CONNECT) &&",
      "1362:      (conn_id->id.qp_type != IB_QPT_UD))",
      "1363:   ib_send_cm_mra(cm_id, CMA_CM_MRA_SETTING, NULL, 0);",
      "",
      "[Removed Lines]",
      "1340:  if (is_iboe) {",
      "1341:   if (ib_event->param.req_rcvd.primary_path != NULL)",
      "1342:    rdma_addr_find_smac_by_sgid(",
      "1343:     &ib_event->param.req_rcvd.primary_path->sgid,",
      "1344:     psmac, NULL);",
      "1345:   else",
      "1346:    psmac = NULL;",
      "1347:   if (ib_event->param.req_rcvd.alternate_path != NULL)",
      "1348:    rdma_addr_find_smac_by_sgid(",
      "1349:     &ib_event->param.req_rcvd.alternate_path->sgid,",
      "1350:     palt_smac, NULL);",
      "1351:   else",
      "1352:    palt_smac = NULL;",
      "1353:  }",
      "1359:  if (is_iboe)",
      "1360:   ib_update_cm_av(cm_id, psmac, palt_smac);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "include/rdma/ib_cm.h||include/rdma/ib_cm.h": [
      "File: include/rdma/ib_cm.h -> include/rdma/ib_cm.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "601: int ib_send_cm_sidr_rep(struct ib_cm_id *cm_id,",
      "602:    struct ib_cm_sidr_rep_param *param);",
      "",
      "[Removed Lines]",
      "604: int ib_update_cm_av(struct ib_cm_id *id, const u8 *smac, const u8 *alt_smac);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "496ce3ce17f4b4f1b5f6edf9d2aedc4787a31c2f",
      "candidate_info": {
        "commit_hash": "496ce3ce17f4b4f1b5f6edf9d2aedc4787a31c2f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/496ce3ce17f4b4f1b5f6edf9d2aedc4787a31c2f",
        "files": [
          "drivers/infiniband/core/cma.c"
        ],
        "message": "RDMA/cma: Add support for AF_IB to cma_get_service_id()\n\ncma_get_service_id() forms the service ID based on the port space and\nport number of the rdma_cm_id.  Extend the call to support AF_IB,\nwhich contains the service ID directly.  This will be needed to\nsupport any arbitrary SID.\n\nSigned-off-by: Sean Hefty <sean.hefty@intel.com>\nSigned-off-by: Roland Dreier <roland@purestorage.com>",
        "before_after_code_files": [
          "drivers/infiniband/core/cma.c||drivers/infiniband/core/cma.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/infiniband/core/cma.c||drivers/infiniband/core/cma.c"
          ],
          "candidate": [
            "drivers/infiniband/core/cma.c||drivers/infiniband/core/cma.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/infiniband/core/cma.c||drivers/infiniband/core/cma.c": [
          "File: drivers/infiniband/core/cma.c -> drivers/infiniband/core/cma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1380: static __be64 cma_get_service_id(enum rdma_port_space ps, struct sockaddr *addr)",
          "1381: {",
          "1382:  return cpu_to_be64(((u64)ps << 16) + be16_to_cpu(cma_port(addr)));",
          "1383: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1382:  if (addr->sa_family == AF_IB)",
          "1383:   return ((struct sockaddr_ib *) addr)->sib_sid;",
          "",
          "---------------"
        ]
      }
    }
  ]
}