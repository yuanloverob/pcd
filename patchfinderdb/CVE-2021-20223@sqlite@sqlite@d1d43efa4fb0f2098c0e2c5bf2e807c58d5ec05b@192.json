{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "be22a85406137a112851006c3cf329f190a41597",
      "candidate_info": {
        "commit_hash": "be22a85406137a112851006c3cf329f190a41597",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/be22a85406137a112851006c3cf329f190a41597",
        "files": [
          "ext/misc/urifuncs.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the urifuncs.c extension (used for testing and debugging only) so that the sqlite3_filename_database() SQL function and its siblings correctly handle an invalid schema name passed in as the argument.\n\nFossilOrigin-Name: 3d7434a9d85dae9135473d1c58c22ac01a282e654807aa10be9b39f127291594",
        "before_after_code_files": [
          "ext/misc/urifuncs.c||ext/misc/urifuncs.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/urifuncs.c||ext/misc/urifuncs.c": [
          "File: ext/misc/urifuncs.c -> ext/misc/urifuncs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "135:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "136:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "138:   sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);",
          "139: }",
          "",
          "[Removed Lines]",
          "137:   const char *zRes = sqlite3_filename_database(zFile);",
          "",
          "[Added Lines]",
          "139:   const char *zRes = zFile ? sqlite3_filename_database(zFile) : 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "152:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "153:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "155:   sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);",
          "156: }",
          "",
          "[Removed Lines]",
          "154:   const char *zRes = sqlite3_filename_journal(zFile);",
          "",
          "[Added Lines]",
          "156:   const char *zRes = zFile ? sqlite3_filename_journal(zFile) : 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "169:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "170:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "172:   sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);",
          "173: }",
          "",
          "[Removed Lines]",
          "171:   const char *zRes = sqlite3_filename_wal(zFile);",
          "",
          "[Added Lines]",
          "173:   const char *zRes = zFile ? sqlite3_filename_wal(zFile) : 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 54bf04811951db6c894f272f870e3e41f8f5e05a25c1115efbbdbd0d8bba54be",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6acdee676551f5fc2fc5ab89bed8c379769eafa9",
      "candidate_info": {
        "commit_hash": "6acdee676551f5fc2fc5ab89bed8c379769eafa9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6acdee676551f5fc2fc5ab89bed8c379769eafa9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Fix handling of an xShmLock(SHARED, UNLOCK) call when the caller does not hold any lock on the specified slot, but another connection in the same process holds an EXCLUSIVE.\n\nFossilOrigin-Name: 3eb365027b885e1f61965efd53a3643b6ff441ae01e79038a091314516a50dd4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e0faddf0dfc3a40b6b94408296dd781dd0264ecc9f2129ce4405438433fb00e0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4888:   sqlite3_mutex_enter(pShmNode->pShmMutex);",
          "4889:   assert( assertLockingArrayOk(pShmNode) );",
          "4890:   if( flags & SQLITE_SHM_UNLOCK ){",
          "4897:       }",
          "4904:       }",
          "4915:   }else if( flags & SQLITE_SHM_SHARED ){",
          "4916:     assert( n==1 );",
          "4917:     assert( (p->exclMask & (1<<ofst))==0 );",
          "",
          "[Removed Lines]",
          "4891:     int ii;",
          "4892:     int bUnlock = 1;",
          "4894:     for(ii=ofst; ii<ofst+n; ii++){",
          "4895:       if( aLock[ii]>((p->sharedMask & (1<<ii)) ? 1 : 0) ){",
          "4896:         bUnlock = 0;",
          "4898:     }",
          "4900:     if( bUnlock ){",
          "4901:       rc = unixShmSystemLock(pDbFd, F_UNLCK, ofst+UNIX_SHM_BASE, n);",
          "4902:       if( rc==SQLITE_OK ){",
          "4903:         memset(&aLock[ofst], 0, sizeof(int)*n);",
          "4905:     }else if( p->sharedMask & (1<<ofst) ){",
          "4906:       assert( n==1 && aLock[ofst]>1 );",
          "4907:       aLock[ofst]--;",
          "4908:     }",
          "4911:     if( rc==SQLITE_OK ){",
          "4912:       p->exclMask &= ~mask;",
          "4913:       p->sharedMask &= ~mask;",
          "4914:     }",
          "",
          "[Added Lines]",
          "4891:     if( (p->exclMask|p->sharedMask) & mask ){",
          "4892:       int ii;",
          "4893:       int bUnlock = 1;",
          "4895:       for(ii=ofst; ii<ofst+n; ii++){",
          "4896:         if( aLock[ii]>((p->sharedMask & (1<<ii)) ? 1 : 0) ){",
          "4897:           bUnlock = 0;",
          "4898:         }",
          "4901:       if( bUnlock ){",
          "4902:         rc = unixShmSystemLock(pDbFd, F_UNLCK, ofst+UNIX_SHM_BASE, n);",
          "4903:         if( rc==SQLITE_OK ){",
          "4904:           memset(&aLock[ofst], 0, sizeof(int)*n);",
          "4905:         }",
          "4906:       }else if( p->sharedMask & (1<<ofst) ){",
          "4907:         assert( n==1 && aLock[ofst]>1 );",
          "4908:         aLock[ofst]--;",
          "4912:       if( rc==SQLITE_OK ){",
          "4913:         p->exclMask &= ~mask;",
          "4914:         p->sharedMask &= ~mask;",
          "4915:       }",
          "4916:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b2d8de3e20367e62c1320958bdedc4b534b87fd",
      "candidate_info": {
        "commit_hash": "8b2d8de3e20367e62c1320958bdedc4b534b87fd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8b2d8de3e20367e62c1320958bdedc4b534b87fd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Update documentation for sqlite3_close_v2() for clarity.  No functional changes.\n\nFossilOrigin-Name: 80498b69ea489e8816c80a52c9e55a62699116fcbfdcbfd922ef23c2d9938871",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a094e8bfdef10d9e5d97f5a9f7c15b0fc547358b83367762ba5c2dfd2c9d0117",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "4b86e20485fc8efc1d15c4707d869ab7f264ebcf",
      "candidate_info": {
        "commit_hash": "4b86e20485fc8efc1d15c4707d869ab7f264ebcf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4b86e20485fc8efc1d15c4707d869ab7f264ebcf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Enhancement to the CLI to allow the \".parameter init\" command to work even if defensive mode is turned on.\n\nFossilOrigin-Name: 4d46255096671ae7be33081e81bb25561304e069f459ffa7587f1f19381a1851",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 535afe150939d06342fbbed4ca1b6a1472fde51ac9edd4b4b583b87d90f509c2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2762: static void bind_table_init(ShellState *p){",
          "2763:   int wrSchema = 0;",
          "2764:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, -1, &wrSchema);",
          "2765:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, 1, 0);",
          "2766:   sqlite3_exec(p->db,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2764:   int defensiveMode = 0;",
          "2765:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_DEFENSIVE, -1, &defensiveMode);",
          "2766:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_DEFENSIVE, 0, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2770:     \") WITHOUT ROWID;\",",
          "2771:     0, 0, 0);",
          "2772:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, wrSchema, 0);",
          "2773: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2776:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_DEFENSIVE, defensiveMode, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffe4d4a2d50a8509c6e0d5fd4082d880efb406b2",
      "candidate_info": {
        "commit_hash": "ffe4d4a2d50a8509c6e0d5fd4082d880efb406b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ffe4d4a2d50a8509c6e0d5fd4082d880efb406b2",
        "files": [
          "ext/misc/urifuncs.c",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid",
          "src/loadext.c",
          "src/main.c",
          "src/pager.c",
          "src/pager.h",
          "src/sqlite.h.in",
          "src/sqlite3ext.h",
          "src/sqliteInt.h"
        ],
        "message": "New apis: sqlite3_filename_database(), sqlite3_filename_journal(), and sqlite3_filename_wal().  Also sqlite3_uri_key().  And the other sqlite3_uri functions now work using the journal or wal filename in addition to the database file.  And the sqlite3_db_filename() result is guaranteed to work as an argument to the sqlite3_uri functions.\n\nFossilOrigin-Name: fd7bcc53524096f5245e5ae04c12780d2c43b9b3af17ec529447aed21b82cc2b",
        "before_after_code_files": [
          "ext/misc/urifuncs.c||ext/misc/urifuncs.c",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c",
          "src/main.c||src/main.c",
          "src/pager.c||src/pager.c",
          "src/pager.h||src/pager.h",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqlite3ext.h||src/sqlite3ext.h",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/urifuncs.c||ext/misc/urifuncs.c": [
          "File: ext/misc/urifuncs.c -> ext/misc/urifuncs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"sqlite3ext.h\"",
          "28: SQLITE_EXTENSION_INIT1",
          "29: #include <assert.h>",
          "30: #include <string.h>",
          "37: static void func_db_filename(",
          "38:   sqlite3_context *context,",
          "39:   int argc,",
          "40:   sqlite3_value **argv",
          "41: ){",
          "42:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "43:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "44:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "45:   sqlite3_result_text(context, zFile, -1, SQLITE_TRANSIENT);",
          "46: }",
          "53: static void func_uri_parameter(",
          "54:   sqlite3_context *context,",
          "55:   int argc,",
          "56:   sqlite3_value **argv",
          "57: ){",
          "58:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "59:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "60:   const char *zName = (const char*)sqlite3_value_text(argv[1]);",
          "61:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "62:   const char *zRes = sqlite3_uri_parameter(zFile, zName);",
          "63:   sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);",
          "64: }",
          "72: static void func_uri_boolean(",
          "73:   sqlite3_context *context,",
          "74:   int argc,",
          "75:   sqlite3_value **argv",
          "76: ){",
          "77:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "78:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "79:   const char *zName = (const char*)sqlite3_value_text(argv[1]);",
          "80:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "81:   int iDflt = sqlite3_value_int(argv[2]);",
          "82:   int iRes = sqlite3_uri_boolean(zFile, zName, iDflt);",
          "83:   sqlite3_result_int(context, iRes);",
          "84: }",
          "91: static void func_uri_key(",
          "92:   sqlite3_context *context,",
          "93:   int argc,",
          "94:   sqlite3_value **argv",
          "95: ){",
          "96:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "97:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "98:   int N = sqlite3_value_int(argv[1]);",
          "99:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "100:   const char *zRes = sqlite3_uri_key(zFile, N);",
          "101:   sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);",
          "102: }",
          "110: static void func_uri_int64(",
          "111:   sqlite3_context *context,",
          "112:   int argc,",
          "113:   sqlite3_value **argv",
          "114: ){",
          "115:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "116:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "117:   const char *zName = (const char*)sqlite3_value_text(argv[1]);",
          "118:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "119:   sqlite3_int64 iDflt = sqlite3_value_int64(argv[2]);",
          "120:   sqlite3_int64 iRes = sqlite3_uri_int64(zFile, zName, iDflt);",
          "121:   sqlite3_result_int64(context, iRes);",
          "122: }",
          "129: static void func_filename_database(",
          "130:   sqlite3_context *context,",
          "131:   int argc,",
          "132:   sqlite3_value **argv",
          "133: ){",
          "134:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "135:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "136:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "137:   const char *zRes = sqlite3_filename_database(zFile);",
          "138:   sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);",
          "139: }",
          "146: static void func_filename_journal(",
          "147:   sqlite3_context *context,",
          "148:   int argc,",
          "149:   sqlite3_value **argv",
          "150: ){",
          "151:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "152:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "153:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "154:   const char *zRes = sqlite3_filename_journal(zFile);",
          "155:   sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);",
          "156: }",
          "163: static void func_filename_wal(",
          "164:   sqlite3_context *context,",
          "165:   int argc,",
          "166:   sqlite3_value **argv",
          "167: ){",
          "168:   const char *zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "169:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "170:   const char *zFile = sqlite3_db_filename(db, zSchema);",
          "171:   const char *zRes = sqlite3_filename_wal(zFile);",
          "172:   sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);",
          "173: }",
          "175: #ifdef _WIN32",
          "176: __declspec(dllexport)",
          "177: #endif",
          "178: int sqlite3_urifuncs_init(",
          "179:   sqlite3 *db,",
          "180:   char **pzErrMsg,",
          "181:   const sqlite3_api_routines *pApi",
          "182: ){",
          "183:   static const struct {",
          "184:     const char *zFuncName;",
          "185:     int nArg;",
          "186:     void (*xFunc)(sqlite3_context*,int,sqlite3_value**);",
          "187:   } aFunc[] = {",
          "188:     { \"sqlite3_db_filename\",       1, func_db_filename       },",
          "189:     { \"sqlite3_uri_parameter\",     2, func_uri_parameter     },",
          "190:     { \"sqlite3_uri_boolean\",       3, func_uri_boolean       },",
          "191:     { \"sqlite3_uri_int64\",         3, func_uri_int64         },",
          "192:     { \"sqlite3_uri_key\",           2, func_uri_key           },",
          "193:     { \"sqlite3_filename_database\", 1, func_filename_database },",
          "194:     { \"sqlite3_filename_journal\",  1, func_filename_journal  },",
          "195:     { \"sqlite3_filename_wal\",      1, func_filename_wal      },",
          "196:   };",
          "197:   int rc = SQLITE_OK;",
          "198:   int i;",
          "199:   SQLITE_EXTENSION_INIT2(pApi);",
          "201:   for(i=0; rc==SQLITE_OK && i<sizeof(aFunc)/sizeof(aFunc[0]); i++){",
          "202:     rc = sqlite3_create_function(db, aFunc[i].zFuncName, aFunc[i].nArg,",
          "203:                      SQLITE_UTF8, 0,",
          "204:                      aFunc[i].xFunc, 0, 0);",
          "205:   }",
          "206:   return rc;",
          "207: }",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4936:   return rc;",
          "4937: }",
          "",
          "[Removed Lines]",
          "4946: static const char *rbuMainToWal(const char *zName, int flags){",
          "4947:   int n = (int)strlen(zName);",
          "4948:   const char *z = &zName[n];",
          "4949:   if( flags & SQLITE_OPEN_URI ){",
          "4950:     int odd = 0;",
          "4951:     while( 1 ){",
          "4952:       if( z[0]==0 ){",
          "4953:         odd = 1 - odd;",
          "4954:         if( odd && z[1]==0 ) break;",
          "4955:       }",
          "4956:       z++;",
          "4957:     }",
          "4958:     z += 2;",
          "4959:   }else{",
          "4960:     while( *z==0 ) z++;",
          "4961:   }",
          "4962:   z += (n + 8 + 2);",
          "4963:   return z;",
          "4964: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5015:     }",
          "5016:     else if( flags & SQLITE_OPEN_WAL ){",
          "5017:       rbu_file *pDb = rbuFindMaindb(pRbuVfs, zName, 0);",
          "",
          "[Removed Lines]",
          "5014:       pFd->zWal = rbuMainToWal(zName, flags);",
          "",
          "[Added Lines]",
          "4987:       pFd->zWal = sqlite3_filename_wal(zName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5026:           char *zCopy;",
          "5027:           if( rbuIsVacuum(pDb->pRbu) ){",
          "5028:             zBase = sqlite3_db_filename(pDb->pRbu->dbRbu, \"main\");",
          "5030:           }",
          "5031:           nCopy = strlen(zBase);",
          "5032:           zCopy = sqlite3_malloc64(nCopy+2);",
          "",
          "[Removed Lines]",
          "5029:             zBase = rbuMainToWal(zBase, SQLITE_OPEN_URI);",
          "",
          "[Added Lines]",
          "5002:             zBase = sqlite3_filename_wal(zBase);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0a500da6aa659a8e73206e6d22ddbf2da5e4f1d1d551eeb66433163a3e13109d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "470: #endif",
          "472:   sqlite3_hard_heap_limit64,",
          "473: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "473:   sqlite3_uri_key,",
          "474:   sqlite3_filename_database,",
          "475:   sqlite3_filename_journal,",
          "476:   sqlite3_filename_wal,",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4241:   return rc;",
          "4242: }",
          "",
          "[Removed Lines]",
          "4244: #ifdef SQLITE_DEBUG",
          "4250: int sqlite3UriCount(const char *z){",
          "4251:   int n = 0;",
          "4252:   if( z==0 ) return 0;",
          "4253:   z += strlen(z)+1;",
          "4254:   while( z[0] ){",
          "4255:     z += strlen(z)+1;",
          "4256:     z += strlen(z)+1;",
          "4257:     n++;",
          "4258:   }",
          "4259:   return n;",
          "4260: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4283:   return 0;",
          "4284: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4270: const char *sqlite3_uri_key(const char *zFilename, int N){",
          "4271:   if( zFilename==0 || N<0 ) return 0;",
          "4272:   zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4273:   while( zFilename[0] && (N--)>0 ){",
          "4274:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4275:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4276:   }",
          "4277:   return zFilename[0] ? zFilename : 0;",
          "4278: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4308:   return bDflt;",
          "4309: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4315: static const char *startOfNameList(const char *zName){",
          "4316:   while( zName[0]!='\\001' || zName[1]!=0 ){",
          "4317:     zName -= 3;",
          "4318:     while( zName[0]!='\\000' ){ zName--; }",
          "4319:     zName++;",
          "4320:   }",
          "4321:   return zName-1;",
          "4322: }",
          "4334: const char *sqlite3_filename_database(const char *zFilename){",
          "4335:   return sqlite3_uri_parameter(zFilename - 3, \"\\003\");",
          "4336: }",
          "4337: const char *sqlite3_filename_journal(const char *zFilename){",
          "4338:   const char *z = sqlite3_uri_parameter(startOfNameList(zFilename), \"\\001\");",
          "4339:   return ALWAYS(z) && z[0] ? z : 0;",
          "4340: }",
          "4341: const char *sqlite3_filename_wal(const char *zFilename){",
          "4342:   return sqlite3_uri_parameter(startOfNameList(zFilename), \"\\002\");",
          "4343: }",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4844:   pPtr = (u8 *)sqlite3MallocZero(",
          "4851: #ifndef SQLITE_OMIT_WAL",
          "4853: #endif",
          "4854:   );",
          "4855:   assert( EIGHT_BYTE_ALIGNMENT(SQLITE_INT_TO_PTR(journalFileSize)) );",
          "4856:   if( !pPtr ){",
          "4857:     sqlite3DbFree(0, zPathname);",
          "4858:     return SQLITE_NOMEM_BKPT;",
          "4859:   }",
          "4866:   assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );",
          "4877: #ifndef SQLITE_OMIT_WAL",
          "4883: #endif",
          "4887:   }",
          "4888:   pPager->pVfs = pVfs;",
          "4889:   pPager->vfsFlags = vfsFlags;",
          "",
          "[Removed Lines]",
          "4860:   pPager =              (Pager*)(pPtr);",
          "4861:   pPager->pPCache =    (PCache*)(pPtr += ROUND8(sizeof(*pPager)));",
          "4862:   pPager->fd =   (sqlite3_file*)(pPtr += ROUND8(pcacheSize));",
          "4863:   pPager->sjfd = (sqlite3_file*)(pPtr += ROUND8(pVfs->szOsFile));",
          "4864:   pPager->jfd =  (sqlite3_file*)(pPtr += journalFileSize);",
          "4865:   pPager->zFilename =    (char*)(pPtr += journalFileSize);",
          "4869:   if( zPathname ){",
          "4870:     assert( nPathname>0 );",
          "4871:     memcpy(pPager->zFilename, zPathname, nPathname);",
          "4872:     if( nUri ) memcpy(&pPager->zFilename[nPathname+1], zUri, nUriByte);",
          "4873:     pPager->zJournal =   (char*)(pPtr += nPathname + 1 + nUriByte);",
          "4874:     memcpy(pPager->zJournal, zPathname, nPathname);",
          "4875:     memcpy(&pPager->zJournal[nPathname], \"-journal\", 8);",
          "4876:     sqlite3FileSuffix3(pPager->zFilename, pPager->zJournal);",
          "4878:     pPager->zWal = (char*)(pPtr += nPathname + 8 + 2);",
          "4879:     memcpy(pPager->zWal, zPathname, nPathname);",
          "4880:     memcpy(&pPager->zWal[nPathname], \"-wal\", 4);",
          "4881:     sqlite3FileSuffix3(pPager->zFilename, pPager->zWal);",
          "4882:     assert( sqlite3UriCount(pPager->zWal)==0 );",
          "4884:     assert( sqlite3UriCount(pPager->zFilename)==nUri );",
          "4885:     assert( sqlite3UriCount(pPager->zJournal)==0 );",
          "4886:     sqlite3DbFree(0, zPathname);",
          "",
          "[Added Lines]",
          "4871:   pPager = (Pager*)pPtr;                  pPtr += ROUND8(sizeof(*pPager));",
          "4872:   pPager->pPCache = (PCache*)pPtr;        pPtr += ROUND8(pcacheSize);",
          "4873:   pPager->fd = (sqlite3_file*)pPtr;       pPtr += ROUND8(pVfs->szOsFile);",
          "4874:   pPager->sjfd = (sqlite3_file*)pPtr;     pPtr += journalFileSize;",
          "4875:   pPager->jfd =  (sqlite3_file*)pPtr;     pPtr += journalFileSize;",
          "4880:   pPtr[1] = '\\001';                       pPtr += 3;",
          "4881:   if( nPathname>0 ){",
          "4882:     pPager->zJournal = (char*)pPtr;",
          "4883:     memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname;",
          "4884:     memcpy(pPtr, \"-journal\",8);           pPtr += 8 + 1;",
          "4885: #ifdef SQLITE_ENABLE_8_3_NAMES",
          "4886:     sqlite3FileSuffix3(zFilename,pPager->zJournal);",
          "4887:     pPtr = (u8*)(pPager->zJournal + sqlite3Strlen30(pPager->zJournal)+1);",
          "4888: #endif",
          "4889:   }else{",
          "4890:     pPager->zJournal = 0;",
          "4891:     pPtr++;",
          "4892:   }",
          "4896:   pPtr[0] = '\\002'; pPtr[1] = 0;          pPtr += 2;",
          "4897:   if( nPathname>0 ){",
          "4898:     pPager->zWal = (char*)pPtr;",
          "4899:     memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname;",
          "4900:     memcpy(pPtr, \"-wal\", 4);              pPtr += 4 + 1;",
          "4901: #ifdef SQLITE_ENABLE_8_3_NAMES",
          "4902:     sqlite3FileSuffix3(zFilename, pPager->zWal);",
          "4903:     pPtr = (u8*)(pPager->zWal + sqlite3Strlen30(pPager->zWal)+1);",
          "4905:   }else{",
          "4906:     pPager->zWal = 0;",
          "4907:     pPtr++;",
          "4909: #endif",
          "4912:   pPtr[0] = '\\003'; pPtr[1] = 0;          pPtr += 2;",
          "4913:   pPager->zFilename = (char*)pPtr;",
          "4914:   memcpy(pPtr, zPathname, nPathname);     pPtr += nPathname + 1;",
          "4915:   if( zUri ){",
          "4917:   }",
          "4920:   if( nPathname ) sqlite3DbFree(0, zPathname);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4933:         }",
          "4934: #endif",
          "4935:       }",
          "4937:       if( (iDc & SQLITE_IOCAP_IMMUTABLE)!=0",
          "4939:           vfsFlags |= SQLITE_OPEN_READONLY;",
          "4940:           goto act_like_temp_file;",
          "4941:       }",
          "",
          "[Removed Lines]",
          "4936:       pPager->noLock = sqlite3_uri_boolean(zFilename, \"nolock\", 0);",
          "4938:        || sqlite3_uri_boolean(zFilename, \"immutable\", 0) ){",
          "",
          "[Added Lines]",
          "4969:       pPager->noLock = sqlite3_uri_boolean(pPager->zFilename, \"nolock\", 0);",
          "4971:        || sqlite3_uri_boolean(pPager->zFilename, \"immutable\", 0) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7004: }",
          "",
          "[Removed Lines]",
          "7002: const char *sqlite3PagerFilename(Pager *pPager, int nullIfMemDb){",
          "7003:   return (nullIfMemDb && pPager->memDb) ? \"\" : pPager->zFilename;",
          "",
          "[Added Lines]",
          "7038: const char *sqlite3PagerFilename(const Pager *pPager, int nullIfMemDb){",
          "7039:   static const char zFake[] = { 0x01, 0x00, 0x00, 0x00 };",
          "7040:   return (nullIfMemDb && pPager->memDb) ? &zFake[2] : pPager->zFilename;",
          "",
          "---------------"
        ],
        "src/pager.h||src/pager.h": [
          "File: src/pager.h -> src/pager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:   int sqlite3PagerRefcount(Pager*);",
          "204: #endif",
          "205: int sqlite3PagerMemUsed(Pager*);",
          "207: sqlite3_vfs *sqlite3PagerVfs(Pager*);",
          "208: sqlite3_file *sqlite3PagerFile(Pager*);",
          "209: sqlite3_file *sqlite3PagerJrnlFile(Pager*);",
          "",
          "[Removed Lines]",
          "206: const char *sqlite3PagerFilename(Pager*, int);",
          "",
          "[Added Lines]",
          "206: const char *sqlite3PagerFilename(const Pager*, int);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3535: const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam);",
          "3536: int sqlite3_uri_boolean(const char *zFile, const char *zParam, int bDefault);",
          "3537: sqlite3_int64 sqlite3_uri_int64(const char*, const char*, sqlite3_int64);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3552: const char *sqlite3_uri_key(const char *zFilename, int N);",
          "3581: const char *sqlite3_filename_database(const char*);",
          "3582: const char *sqlite3_filename_journal(const char*);",
          "3583: const char *sqlite3_filename_wal(const char*);",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:   int (*value_frombind)(sqlite3_value*);",
          "326:   int (*drop_modules)(sqlite3*,const char**);",
          "327:   sqlite3_int64 (*hard_heap_limit64)(sqlite3_int64);",
          "328: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:   const char *(*uri_key)(const char*,int);",
          "330:   const char *(*filename_database)(const char*);",
          "331:   const char *(*filename_journal)(const char*);",
          "332:   const char *(*filename_wal)(const char*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "619: #define sqlite3_value_frombind         sqlite3_api->frombind",
          "621: #define sqlite3_drop_modules           sqlite3_api->drop_modules",
          "622: #define sqlite3_hard_heap_limit64      sqlite3_api->hard_heap_limit64",
          "625: #if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629: #define sqlite3_uri_key                sqlite3_api->uri_key",
          "630: #define sqlite3_filename_database      sqlite3_api->filename_database",
          "631: #define sqlite3_filename_journal       sqlite3_api->filename_journal",
          "632: #define sqlite3_filename_wal           sqlite3_api->filename_wal",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4108: void sqlite3AddCollateType(Parse*, Token*);",
          "4109: void sqlite3AddGenerated(Parse*,Expr*,Token*);",
          "4110: void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);",
          "4114: int sqlite3ParseUri(const char*,const char*,unsigned int*,",
          "4115:                     sqlite3_vfs**,char**,char **);",
          "4116: #ifdef SQLITE_HAS_CODEC",
          "",
          "[Removed Lines]",
          "4111: #ifdef SQLITE_DEBUG",
          "4112:   int sqlite3UriCount(const char*);",
          "4113: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}