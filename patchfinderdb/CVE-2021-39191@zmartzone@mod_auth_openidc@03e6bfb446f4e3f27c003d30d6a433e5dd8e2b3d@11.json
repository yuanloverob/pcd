{
  "cve_id": "CVE-2021-39191",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In versions prior to 2.4.9.4, the 3rd-party init SSO functionality of mod_auth_openidc was reported to be vulnerable to an open redirect attack by supplying a crafted URL in the `target_link_uri` parameter. A patch in version 2.4.9.4 made it so that the `OIDCRedirectURLsAllowed` setting must be applied to the `target_link_uri` parameter. There are no known workarounds aside from upgrading to a patched version.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
  "patch_info": {
    "commit_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "files": [
      "AUTHORS",
      "ChangeLog",
      "auth_openidc.conf",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "apply OIDCRedirectURLsAllowed setting to target_link_uri\n\ncloses #672; thanks @Meheni\nrelease 2.4.9.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "auth_openidc.conf||auth_openidc.conf",
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "auth_openidc.conf||auth_openidc.conf": [
      "File: auth_openidc.conf -> auth_openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "918: #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]",
      "920: # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and",
      "923: #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app",
      "924: # or:",
      "925: #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$",
      "",
      "[Removed Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, and the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, e.g.:",
      "",
      "[Added Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, and the \"target_link_uri\" parameter in",
      "923: # 3rd-party initiated logins, e.g.:",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.3],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2457:  return TRUE;",
      "2458: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2460: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2462: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2463:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2464:   char **err_desc) {",
      "2465:  apr_uri_t uri;",
      "2466:  const char *c_host = NULL;",
      "2467:  apr_hash_index_t *hi = NULL;",
      "2468:  size_t i = 0;",
      "2469:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2472:  for (i = 0; i < strlen(url); i++)",
      "2473:   if (url[i] == '\\\\')",
      "2474:    url[i] = '/';",
      "2476:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2479:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2480:   return FALSE;",
      "2481:  }",
      "2483:  if (c->redirect_urls_allowed != NULL) {",
      "2484:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2485:     apr_hash_next(hi)) {",
      "2486:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2487:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2488:      NULL, err_str) == TRUE)",
      "2489:     break;",
      "2490:   }",
      "2491:   if (hi == NULL) {",
      "2494:      apr_psprintf(r->pool,",
      "2495:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2496:        url);",
      "2497:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2498:    return FALSE;",
      "2499:   }",
      "2500:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2501:   c_host = oidc_get_current_url_host(r);",
      "2502:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2503:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2506:      apr_psprintf(r->pool,",
      "2507:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2508:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2509:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2510:    return FALSE;",
      "2511:   }",
      "2512:  }",
      "2514:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "2517:     apr_psprintf(r->pool,",
      "2518:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "2519:       url);",
      "2520:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2521:   return FALSE;",
      "2522:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "2525:     \"No hostname was parsed and starting with '//': %s\", url);",
      "2526:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2527:   return FALSE;",
      "2528:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "2531:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "2532:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2533:   return FALSE;",
      "2534:  }",
      "2537:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "2540:     apr_psprintf(r->pool,",
      "2541:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "2542:       url);",
      "2543:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2544:   return FALSE;",
      "2545:  }",
      "2547:  return TRUE;",
      "2548: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2469:  oidc_provider_t *provider = NULL;",
      "2471:  oidc_util_get_request_parameter(r, OIDC_DISC_OP_PARAM, &issuer);",
      "2472:  oidc_util_get_request_parameter(r, OIDC_DISC_USER_PARAM, &user);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2560:  char *error_str = NULL;",
      "2561:  char *error_description = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2519:     HTTP_UNAUTHORIZED);",
      "2520:  }",
      "2523:  if (c->metadata_dir == NULL) {",
      "2524:   if ((oidc_provider_static_config(r, c, &provider) == TRUE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2615:  if (oidc_validate_redirect_url(r, c, target_link_uri, TRUE, &error_str,",
      "2616:    &error_description) == FALSE) {",
      "2617:   return oidc_util_html_send_error(r, c->error_template, error_str,",
      "2618:     error_description,",
      "2619:     HTTP_UNAUTHORIZED);",
      "2620:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2947:  return rc;",
      "2948: }",
      "",
      "[Removed Lines]",
      "2950: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2952: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2953:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2954:   char **err_desc) {",
      "2955:  apr_uri_t uri;",
      "2956:  const char *c_host = NULL;",
      "2957:  apr_hash_index_t *hi = NULL;",
      "2958:  size_t i = 0;",
      "2959:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2962:  for (i = 0; i < strlen(url); i++)",
      "2963:   if (url[i] == '\\\\')",
      "2964:    url[i] = '/';",
      "2966:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2969:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2970:   return FALSE;",
      "2971:  }",
      "2973:  if (c->redirect_urls_allowed != NULL) {",
      "2974:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2975:     apr_hash_next(hi)) {",
      "2976:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2977:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2978:      NULL, err_str) == TRUE)",
      "2979:     break;",
      "2980:   }",
      "2981:   if (hi == NULL) {",
      "2984:      apr_psprintf(r->pool,",
      "2985:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2986:        url);",
      "2987:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2988:    return FALSE;",
      "2989:   }",
      "2990:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2991:   c_host = oidc_get_current_url_host(r);",
      "2992:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2993:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2996:      apr_psprintf(r->pool,",
      "2997:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2998:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2999:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3000:    return FALSE;",
      "3001:   }",
      "3002:  }",
      "3004:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "3007:     apr_psprintf(r->pool,",
      "3008:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "3009:       url);",
      "3010:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3011:   return FALSE;",
      "3012:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "3015:     \"No hostname was parsed and starting with '//': %s\", url);",
      "3016:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3017:   return FALSE;",
      "3018:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "3021:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "3022:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3023:   return FALSE;",
      "3024:  }",
      "3027:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "3030:     apr_psprintf(r->pool,",
      "3031:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "3032:       url);",
      "3033:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3034:   return FALSE;",
      "3035:  }",
      "3037:  return TRUE;",
      "3038: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d0c632a5c2d8ce4ab65889b91ef66a73c188f147",
      "candidate_info": {
        "commit_hash": "d0c632a5c2d8ce4ab65889b91ef66a73c188f147",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/d0c632a5c2d8ce4ab65889b91ef66a73c188f147",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/file.c"
        ],
        "message": "fix a 2nd race condition in the file cache backend\n\nsee #777; thanks @dbakker and @blackwhiser1\nbump to 2.4.11.1rc3\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/file.c||src/cache/file.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.1rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.1rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/file.c||src/cache/file.c": [
          "File: src/cache/file.c -> src/cache/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:  apr_file_t *fd = NULL;",
          "380:  apr_status_t rc = APR_SUCCESS;",
          "381:  char s_err[128];",
          "387:  oidc_cache_file_clean(r);",
          "",
          "[Removed Lines]",
          "377: static apr_byte_t oidc_cache_file_set(request_rec *r, const char *section,",
          "378:   const char *key, const char *value, apr_time_t expiry) {",
          "384:  const char *path = oidc_cache_file_path(r, section, key);",
          "",
          "[Added Lines]",
          "377: static apr_byte_t oidc_cache_file_set(request_rec *r, const char *section, const char *key,",
          "378:   const char *value, apr_time_t expiry) {",
          "384:  const char *target = oidc_cache_file_path(r, section, key);",
          "385:  const char *path = apr_psprintf(r->pool, \"%s.tmp\", target);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "390:  if (value == NULL) {",
          "391:   if ((rc = apr_file_remove(path, r->pool)) != APR_SUCCESS) {",
          "394:   }",
          "395:   return TRUE;",
          "396:  }",
          "404:   return FALSE;",
          "405:  }",
          "",
          "[Removed Lines]",
          "392:    oidc_error(r, \"could not delete cache file \\\"%s\\\" (%s)\", path,",
          "393:      apr_strerror(rc, s_err, sizeof(s_err)));",
          "399:  if ((rc = apr_file_open(&fd, path,",
          "400:    (APR_FOPEN_WRITE | APR_FOPEN_CREATE),",
          "401:    APR_OS_DEFAULT, r->pool)) != APR_SUCCESS) {",
          "402:   oidc_error(r, \"cache file \\\"%s\\\" could not be opened (%s)\", path,",
          "403:     apr_strerror(rc, s_err, sizeof(s_err)));",
          "",
          "[Added Lines]",
          "393:    oidc_error(r, \"could not delete cache file \\\"%s\\\" (%s)\", path, apr_strerror(rc, s_err, sizeof(s_err)));",
          "399:  if ((rc = apr_file_open(&fd, path, (APR_FOPEN_WRITE | APR_FOPEN_CREATE),",
          "400:        APR_OS_DEFAULT, r->pool)) != APR_SUCCESS) {",
          "401:   oidc_error(r, \"cache file \\\"%s\\\" could not be opened (%s)\", path, apr_strerror(rc, s_err, sizeof(s_err)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "416:  info.len = strlen(value) + 1;",
          "421:   return FALSE;",
          "427:  apr_file_unlock(fd);",
          "428:  apr_file_close(fd);",
          "436:  return (rc == APR_SUCCESS);",
          "437: }",
          "",
          "[Removed Lines]",
          "419:  if ((rc = oidc_cache_file_write(r, path, fd, &info,",
          "420:    sizeof(oidc_cache_file_info_t))) != APR_SUCCESS)",
          "424:  rc = oidc_cache_file_write(r, path, fd, (void *) value, info.len);",
          "431:  oidc_debug(r,",
          "432:    \"%s entry for key \\\"%s\\\" in file of %\" APR_SIZE_T_FMT \" bytes\",",
          "433:    (rc == APR_SUCCESS) ? \"successfully stored\" : \"could not store\",",
          "434:      key, info.len);",
          "",
          "[Added Lines]",
          "417:  if ((rc = oidc_cache_file_write(r, path, fd, &info, sizeof(oidc_cache_file_info_t)))",
          "418:    != APR_SUCCESS)",
          "422:  rc = oidc_cache_file_write(r, path, fd, (void*) value, info.len);",
          "428:  if (rename(path, target) != 0) {",
          "429:   oidc_error(r, \"cache file: %s could not be renamed to: %s\", path, target);",
          "430:   return FALSE;",
          "431:  }",
          "434:  oidc_debug(r, \"%s entry for key \\\"%s\\\" in file of %\" APR_SIZE_T_FMT \" bytes\", (rc == APR_SUCCESS) ? \"successfully stored\" : \"could not store\", key, info.len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e33cd488cb9ce027dae692e06767a0ba7ed5e1de",
      "candidate_info": {
        "commit_hash": "e33cd488cb9ce027dae692e06767a0ba7ed5e1de",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/e33cd488cb9ce027dae692e06767a0ba7ed5e1de",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.4.9\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b9c6bfe64df47eec48abcb0269d0e18f690de49",
      "candidate_info": {
        "commit_hash": "9b9c6bfe64df47eec48abcb0269d0e18f690de49",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/9b9c6bfe64df47eec48abcb0269d0e18f690de49",
        "files": [
          "ChangeLog",
          "configure.ac",
          "test/stub.c"
        ],
        "message": "correct ap_hook_insert_filter function signature in stub.c\n\ncloses #732; thanks @stroeder\nbump to 2.4.10.1rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "test/stub.c||test/stub.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10.1rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "test/stub.c||test/stub.c": [
          "File: test/stub.c -> test/stub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:  return 0;",
          "152: }",
          "156: }",
          "158: AP_DECLARE(void) ap_hook_post_config(",
          "",
          "[Removed Lines]",
          "154: AP_DECLARE(int) ap_hook_insert_filter(request_rec *r) {",
          "155:  return 0;",
          "",
          "[Added Lines]",
          "154: AP_DECLARE(void) ap_hook_insert_filter(request_rec *r) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c26871b483e65b8bef2cfda9b4911889c93d9558",
      "candidate_info": {
        "commit_hash": "c26871b483e65b8bef2cfda9b4911889c93d9558",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/c26871b483e65b8bef2cfda9b4911889c93d9558",
        "files": [
          ".cproject",
          "ChangeLog",
          "Dockerfile",
          "Makefile.in",
          "configure.ac",
          "src/cache/redis.c",
          "src/cache/redis.h"
        ],
        "message": "reorganize Redis code for extensibility\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "configure.ac||configure.ac",
          "src/cache/redis.c||src/cache/redis.c",
          "src/cache/redis.h||src/cache/redis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: ifeq (@HAVE_LIBHIREDIS@, 1)",
          "18: SRC += \\",
          "20: REDIS_CFLAGS=-DUSE_LIBHIREDIS @HIREDIS_CFLAGS@",
          "21: REDIS_LIBS=@HIREDIS_LIBS@",
          "22: endif",
          "",
          "[Removed Lines]",
          "19:  src/cache/redis.c",
          "",
          "[Added Lines]",
          "19:  src/cache/redis.c",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: endif",
          "35: HDRS = \\",
          "37:  src/mod_auth_openidc.h \\",
          "38:  src/jose.h \\",
          "39:  src/parse.h \\",
          "40:  src/cache/cache.h \\",
          "43: # Files to include when making a .tar.gz-file for distribution",
          "44: DISTFILES=$(SRC) \\",
          "",
          "[Removed Lines]",
          "36:  $(JWT_HDRS) \\",
          "41:  src/pcre_subst.h \\",
          "",
          "[Added Lines]",
          "40:  src/pcre_subst.h",
          "42: ifeq (@HAVE_LIBHIREDIS@, 1)",
          "43: HDRS += \\",
          "44:  src/cache/redis.h",
          "45: endif",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10-dev],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/redis.c||src/cache/redis.c": [
          "File: src/cache/redis.c -> src/cache/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #include <http_config.h>",
          "51: #include <http_log.h>",
          "59: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "63:  char *host_str;",
          "64:  apr_port_t port;",
          "79:  context->mutex = oidc_cache_mutex_create(pool);",
          "81:  context->passwd = NULL;",
          "82:  context->database = -1;",
          "83:  context->connect_timeout.tv_sec = REDIS_CONNECT_TIMEOUT_DEFAULT;",
          "",
          "[Removed Lines]",
          "53: #include \"../mod_auth_openidc.h\"",
          "55: #include \"hiredis/hiredis.h\"",
          "61: typedef struct oidc_cache_cfg_redis_t {",
          "62:  oidc_cache_mutex_t *mutex;",
          "65:  char *passwd;",
          "66:  int database;",
          "67:  struct timeval connect_timeout;",
          "68:  struct timeval timeout;",
          "69:  redisContext *ctx;",
          "70: } oidc_cache_cfg_redis_t;",
          "72: #define REDIS_CONNECT_TIMEOUT_DEFAULT 5",
          "73: #define REDIS_TIMEOUT_DEFAULT 5",
          "76: static void *oidc_cache_redis_cfg_create(apr_pool_t *pool) {",
          "77:  oidc_cache_cfg_redis_t *context = apr_pcalloc(pool,",
          "78:    sizeof(oidc_cache_cfg_redis_t));",
          "80:  context->host_str = NULL;",
          "",
          "[Added Lines]",
          "53: #include \"redis.h\"",
          "59: #define REDIS_CONNECT_TIMEOUT_DEFAULT 5",
          "60: #define REDIS_TIMEOUT_DEFAULT 5",
          "62: typedef struct oidc_cache_cfg_redis_ctx_t {",
          "65:  redisContext *rctx;",
          "66: } oidc_cache_cfg_redis_ctx_t;",
          "68: static oidc_cache_cfg_redis_ctx_t* oidc_cache_redis_cfg_ctx_create(apr_pool_t *pool) {",
          "69:  oidc_cache_cfg_redis_ctx_t *context = apr_pcalloc(pool, sizeof(oidc_cache_cfg_redis_ctx_t));",
          "70:  context->host_str = NULL;",
          "71:  context->port = 0;",
          "72:  context->rctx = NULL;",
          "73:  return context;",
          "74: }",
          "77: static oidc_cache_cfg_redis_t* oidc_cache_redis_cfg_create(apr_pool_t *pool) {",
          "78:  oidc_cache_cfg_redis_t *context = apr_pcalloc(pool, sizeof(oidc_cache_cfg_redis_t));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:  return context;",
          "89: }",
          "102:  cfg->cache_cfg = context;",
          "107:  if (cfg->cache_redis_server == NULL) {",
          "126:   return HTTP_INTERNAL_SERVER_ERROR;",
          "127:  }",
          "132:  if (cfg->cache_redis_password != NULL) {",
          "135:  }",
          "137:  if (cfg->cache_redis_database != -1)",
          "",
          "[Removed Lines]",
          "94: static int oidc_cache_redis_post_config(server_rec *s) {",
          "95:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(s->module_config,",
          "96:    &auth_openidc_module);",
          "98:  if (cfg->cache_cfg != NULL)",
          "99:   return APR_SUCCESS;",
          "100:  oidc_cache_cfg_redis_t *context = oidc_cache_redis_cfg_create(",
          "101:    s->process->pool);",
          "104:  apr_status_t rv = APR_SUCCESS;",
          "108:   oidc_serror(s,",
          "109:     \"cache type is set to \\\"redis\\\", but no valid \" OIDCRedisCacheServer \" setting was found\");",
          "110:   return HTTP_INTERNAL_SERVER_ERROR;",
          "111:  }",
          "113:  char* scope_id;",
          "114:  rv = apr_parse_addr_port(&context->host_str, &scope_id, &context->port,",
          "115:    cfg->cache_redis_server, s->process->pool);",
          "116:  if (rv != APR_SUCCESS) {",
          "117:   oidc_serror(s, \"failed to parse cache server: '%s'\",",
          "118:     cfg->cache_redis_server);",
          "119:   return HTTP_INTERNAL_SERVER_ERROR;",
          "120:  }",
          "122:  if (context->host_str == NULL) {",
          "123:   oidc_serror(s,",
          "124:     \"failed to parse cache server, no hostname specified: '%s'\",",
          "125:     cfg->cache_redis_server);",
          "129:  if (context->port == 0)",
          "130:   context->port = 6379;",
          "133:   context->passwd = apr_pstrdup(s->process->pool,",
          "134:     cfg->cache_redis_password);",
          "",
          "[Added Lines]",
          "90: int oidc_cache_redis_post_config(server_rec *s, oidc_cfg *cfg, const char *name) {",
          "91:  oidc_cache_cfg_redis_t *context = oidc_cache_redis_cfg_create(s->process->pool);",
          "96:   oidc_serror(s, \"cache type is set to \\\"redis\\\", but no valid \" OIDCRedisCacheServer \" setting was found\");",
          "101:   context->passwd = apr_pstrdup(s->process->pool, cfg->cache_redis_password);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:  if (cfg->cache_redis_timeout != -1)",
          "144:   context->timeout.tv_sec = cfg->cache_redis_timeout;",
          "147:   return HTTP_INTERNAL_SERVER_ERROR;",
          "149:  return OK;",
          "150: }",
          "155: int oidc_cache_redis_child_init(apr_pool_t *p, server_rec *s) {",
          "161:  return oidc_cache_mutex_child_init(p, s, context->mutex);",
          "",
          "[Removed Lines]",
          "146:  if (oidc_cache_mutex_post_config(s, context->mutex, \"redis\") == FALSE)",
          "156:  oidc_cfg *cfg = ap_get_module_config(s->module_config,",
          "157:    &auth_openidc_module);",
          "158:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t *) cfg->cache_cfg;",
          "",
          "[Added Lines]",
          "113:  if (oidc_cache_mutex_post_config(s, context->mutex, name) == FALSE)",
          "119: static apr_status_t oidc_cache_redis_connect(request_rec *r, oidc_cache_cfg_redis_t *context);",
          "124: static int oidc_cache_redis_post_config_impl(server_rec *s) {",
          "125:  apr_status_t rv = APR_SUCCESS;",
          "126:  oidc_cache_cfg_redis_t *context = NULL;",
          "127:  oidc_cache_cfg_redis_ctx_t *rctx = NULL;",
          "128:  oidc_cfg *cfg = (oidc_cfg*) ap_get_module_config(s->module_config, &auth_openidc_module);",
          "130:  if (cfg->cache_cfg != NULL)",
          "131:   return OK;",
          "133:  if (oidc_cache_redis_post_config(s, cfg, \"redis\") != OK)",
          "134:   return HTTP_INTERNAL_SERVER_ERROR;",
          "136:  context = cfg->cache_cfg;",
          "137:  rctx = oidc_cache_redis_cfg_ctx_create(s->process->pool);",
          "138:  context->ctx = rctx;",
          "141:  if (cfg->cache_redis_server == NULL) {",
          "142:   oidc_serror(s, \"cache type is set to \\\"redis\\\", but no valid \" OIDCRedisCacheServer \" setting was found\");",
          "143:   return HTTP_INTERNAL_SERVER_ERROR;",
          "144:  }",
          "146:  char *scope_id;",
          "147:  rv =",
          "148:    apr_parse_addr_port(&rctx->host_str, &scope_id, &rctx->port, cfg->cache_redis_server, s->process->pool);",
          "149:  if (rv != APR_SUCCESS) {",
          "150:   oidc_serror(s, \"failed to parse cache server: '%s'\", cfg->cache_redis_server);",
          "151:   return HTTP_INTERNAL_SERVER_ERROR;",
          "152:  }",
          "154:  if (rctx->host_str == NULL) {",
          "155:   oidc_serror(s, \"failed to parse cache server, no hostname specified: '%s'\", cfg->cache_redis_server);",
          "156:   return HTTP_INTERNAL_SERVER_ERROR;",
          "157:  }",
          "159:  if (rctx->port == 0)",
          "160:   rctx->port = 6379;",
          "162:  context->connect = oidc_cache_redis_connect;",
          "163:  context->command = oidc_cache_redis_command;",
          "165:  return OK;",
          "166: }",
          "172:  oidc_cfg *cfg = ap_get_module_config(s->module_config, &auth_openidc_module);",
          "173:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t*) cfg->cache_cfg;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "169:  return apr_psprintf(pool, \"%s:%s\", section, key);",
          "170: }",
          "",
          "[Removed Lines]",
          "167: static char *oidc_cache_redis_get_key(apr_pool_t *pool, const char *section,",
          "168:   const char *key) {",
          "",
          "[Added Lines]",
          "182: static char* oidc_cache_redis_get_key(apr_pool_t *pool, const char *section, const char *key) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175: static apr_status_t oidc_cache_redis_free(oidc_cache_cfg_redis_t *context) {",
          "179:  }",
          "180:  return APR_SUCCESS;",
          "181: }",
          "",
          "[Removed Lines]",
          "176:  if ((context != NULL) && (context->ctx != NULL)) {",
          "177:   redisFree(context->ctx);",
          "178:   context->ctx = NULL;",
          "",
          "[Added Lines]",
          "190:  oidc_cache_cfg_redis_ctx_t *rctx = NULL;",
          "191:  if (context != NULL) {",
          "192:   rctx = (oidc_cache_cfg_redis_ctx_t*) context->ctx;",
          "193:   if ((rctx != NULL) && (rctx->rctx != NULL)) {",
          "194:    redisFree(rctx->rctx);",
          "195:    rctx->rctx = NULL;",
          "196:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "199:  redisReply *reply = NULL;",
          "204:   oidc_debug(r, \"calling redisConnectWithTimeout\");",
          "212:    oidc_cache_redis_free(context);",
          "213:   } else {",
          "219:    if (context->passwd != NULL) {",
          "221:     if ((reply == NULL) || (reply->type == REDIS_REPLY_ERROR))",
          "226:     else",
          "232:     oidc_cache_redis_reply_free(&reply);",
          "",
          "[Removed Lines]",
          "196: static apr_status_t oidc_cache_redis_connect(request_rec *r,",
          "197:   oidc_cache_cfg_redis_t *context) {",
          "201:  if (context->ctx == NULL) {",
          "205:   context->ctx = redisConnectWithTimeout(context->host_str, context->port, context->connect_timeout);",
          "208:   if ((context->ctx == NULL) || (context->ctx->err != 0)) {",
          "209:    oidc_error(r, \"failed to connect to Redis server (%s:%d): '%s'\",",
          "210:      context->host_str, context->port,",
          "211:      context->ctx != NULL ? context->ctx->errstr : \"\");",
          "215:    oidc_debug(r, \"successfully connected to Redis server (%s:%d)\",",
          "216:      context->host_str, context->port);",
          "220:     reply = redisCommand(context->ctx, \"AUTH %s\", context->passwd);",
          "222:      oidc_error(r,",
          "223:        \"Redis AUTH command (%s:%d) failed: '%s' [%s]\",",
          "224:        context->host_str, context->port,",
          "225:        context->ctx->errstr, reply ? reply->str : \"<n/a>\");",
          "227:      oidc_debug(r,",
          "228:        \"successfully authenticated to the Redis server: %s\",",
          "229:        reply ? reply->str : \"<n/a>\");",
          "",
          "[Added Lines]",
          "214: static apr_status_t oidc_cache_redis_connect(request_rec *r, oidc_cache_cfg_redis_t *context) {",
          "216:  oidc_cache_cfg_redis_ctx_t *rctx = (oidc_cache_cfg_redis_ctx_t*) context->ctx;",
          "219:  if (rctx->rctx == NULL) {",
          "223:   rctx->rctx = redisConnectWithTimeout(rctx->host_str, rctx->port, context->connect_timeout);",
          "226:   if ((rctx->rctx == NULL) || (rctx->rctx->err != 0)) {",
          "227:    oidc_error(r, \"failed to connect to Redis server (%s:%d): '%s'\", rctx->host_str, rctx->port, rctx->rctx != NULL ? rctx->rctx->errstr : \"\");",
          "231:    oidc_debug(r, \"successfully connected to Redis server (%s:%d)\", rctx->host_str, rctx->port);",
          "235:     reply = redisCommand(rctx->rctx, \"AUTH %s\", context->passwd);",
          "237:      oidc_error(r, \"Redis AUTH command (%s:%d) failed: '%s' [%s]\", rctx->host_str, rctx->port, rctx->rctx->errstr,",
          "238:           reply ? reply->str : \"<n/a>\");",
          "240:      oidc_debug(r, \"successfully authenticated to the Redis server: %s\",",
          "241:           reply ? reply->str : \"<n/a>\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "236:    if (context->database != -1) {",
          "239:     if ((reply == NULL) || (reply->type == REDIS_REPLY_ERROR))",
          "244:     else",
          "250:     oidc_cache_redis_reply_free(&reply);",
          "251:    }",
          "256:   }",
          "257:  }",
          "260: }",
          "262: #define OIDC_REDIS_MAX_TRIES 2",
          "",
          "[Removed Lines]",
          "237:     reply = redisCommand(context->ctx, \"SELECT %d\",",
          "238:       context->database);",
          "240:      oidc_error(r,",
          "241:        \"Redis SELECT command (%s:%d) failed: '%s' [%s]\",",
          "242:        context->host_str, context->port,",
          "243:        context->ctx->errstr, reply ? reply->str : \"<n/a>\");",
          "245:      oidc_debug(r,",
          "246:        \"successfully selected database %d on the Redis server: %s\",",
          "247:        context->database, reply ? reply->str : \"<n/a>\");",
          "253:    if (redisSetTimeout(context->ctx, context->timeout) != REDIS_OK)",
          "254:     oidc_error(r, \"redisSetTimeout failed: %s\", context->ctx->errstr);",
          "259:  return (context->ctx != NULL) ? APR_SUCCESS : APR_EGENERAL;",
          "",
          "[Added Lines]",
          "249:     reply = redisCommand(rctx->rctx, \"SELECT %d\", context->database);",
          "251:      oidc_error(r, \"Redis SELECT command (%s:%d) failed: '%s' [%s]\", rctx->host_str, rctx->port, rctx->rctx->errstr,",
          "252:           reply ? reply->str : \"<n/a>\");",
          "254:      oidc_debug(r, \"successfully selected database %d on the Redis server: %s\", context->database,",
          "255:           reply ? reply->str : \"<n/a>\");",
          "261:    if (redisSetTimeout(rctx->rctx, context->timeout) != REDIS_OK)",
          "262:     oidc_error(r, \"redisSetTimeout failed: %s\", rctx->rctx->errstr);",
          "267:  return (rctx->rctx != NULL) ? APR_SUCCESS : APR_EGENERAL;",
          "268: }",
          "270: redisReply* oidc_cache_redis_command(request_rec *r, oidc_cache_cfg_redis_t *context, char **errstr,",
          "271:   const char *format, va_list ap) {",
          "272:  oidc_cache_cfg_redis_ctx_t *rctx = (oidc_cache_cfg_redis_ctx_t*) context->ctx;",
          "273:  redisReply *reply = redisvCommand(rctx->rctx, format, ap);",
          "275:  return reply;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "270:  redisReply *reply = NULL;",
          "271:  int i = 0;",
          "272:  va_list ap;",
          "",
          "[Removed Lines]",
          "267: static redisReply* oidc_cache_redis_command(request_rec *r,",
          "268:   oidc_cache_cfg_redis_t *context, const char *format, ...) {",
          "",
          "[Added Lines]",
          "283: static redisReply* oidc_cache_redis_exec(request_rec *r, oidc_cache_cfg_redis_t *context,",
          "284:   const char *format, ...) {",
          "286:  oidc_cache_cfg_redis_ctx_t *rctx = (oidc_cache_cfg_redis_ctx_t*) context->ctx;",
          "288:  char *errstr = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "275:  for (i = 0; i < OIDC_REDIS_MAX_TRIES; i++) {",
          "279:    break;",
          "281:   va_start(ap, format);",
          "284:   va_end(ap);",
          "",
          "[Removed Lines]",
          "278:   if (oidc_cache_redis_connect(r, context) != APR_SUCCESS)",
          "283:   reply = redisvCommand(context->ctx, format, ap);",
          "",
          "[Added Lines]",
          "296:   if (context->connect(r, context) != APR_SUCCESS)",
          "301:   reply = context->command(r, context, &errstr, format, ap);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "289:    break;",
          "295:     reply ? reply->str : \"<n/a>\");",
          "",
          "[Removed Lines]",
          "292:   oidc_error(r,",
          "293:     \"Redis command (attempt=%d to %s:%d) failed, disconnecting: '%s' [%s]\",",
          "294:     i, context->host_str, context->port, context->ctx->errstr,",
          "",
          "[Added Lines]",
          "310:   oidc_error(r, \"Redis command (attempt=%d to %s:%d) failed, disconnecting: '%s' [%s]\", i, rctx->host_str, rctx->port, errstr,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "316:  redisReply *reply = NULL;",
          "317:  apr_byte_t rv = FALSE;",
          "",
          "[Removed Lines]",
          "310: static apr_byte_t oidc_cache_redis_get(request_rec *r, const char *section,",
          "311:   const char *key, const char **value) {",
          "313:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
          "314:    &auth_openidc_module);",
          "315:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t *) cfg->cache_cfg;",
          "",
          "[Added Lines]",
          "326: apr_byte_t oidc_cache_redis_get(request_rec *r, const char *section, const char *key,",
          "327:   const char **value) {",
          "329:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "330:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t*) cfg->cache_cfg;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "324:  reply =",
          "327:  if (reply == NULL)",
          "328:   goto end;",
          "",
          "[Removed Lines]",
          "325:    oidc_cache_redis_command(r, context, \"GET %s\", oidc_cache_redis_get_key(r->pool, section, key));",
          "",
          "[Added Lines]",
          "340:    oidc_cache_redis_exec(r, context, \"GET %s\", oidc_cache_redis_get_key(r->pool, section, key));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "340:  }",
          "348:   goto end;",
          "349:  }",
          "",
          "[Removed Lines]",
          "343:  if ((reply->str == NULL)",
          "344:    || (reply->len != strlen(reply->str))) {",
          "345:   oidc_error(r,",
          "346:     \"redisCommand reply->len (%d) != strlen(reply->str): '%s'\",",
          "347:     (int )reply->len, reply->str);",
          "",
          "[Added Lines]",
          "358:  if ((reply->str == NULL) || (reply->len != strlen(reply->str))) {",
          "359:   oidc_error(r, \"redisCommand reply->len (%d) != strlen(reply->str): '%s'\", (int )reply->len, reply->str);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "377:  redisReply *reply = NULL;",
          "378:  apr_byte_t rv = FALSE;",
          "379:  apr_uint32_t timeout;",
          "",
          "[Removed Lines]",
          "371: static apr_byte_t oidc_cache_redis_set(request_rec *r, const char *section,",
          "372:   const char *key, const char *value, apr_time_t expiry) {",
          "374:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
          "375:    &auth_openidc_module);",
          "376:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t *) cfg->cache_cfg;",
          "",
          "[Added Lines]",
          "383: apr_byte_t oidc_cache_redis_set(request_rec *r, const char *section, const char *key,",
          "384:   const char *value, apr_time_t expiry) {",
          "386:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "387:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t*) cfg->cache_cfg;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "389:   reply =",
          "392:  } else {",
          "",
          "[Removed Lines]",
          "390:     oidc_cache_redis_command(r, context, \"DEL %s\", oidc_cache_redis_get_key(r->pool, section, key));",
          "",
          "[Added Lines]",
          "401:     oidc_cache_redis_exec(r, context, \"DEL %s\", oidc_cache_redis_get_key(r->pool, section, key));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "398:   reply =",
          "401:  }",
          "",
          "[Removed Lines]",
          "399:     oidc_cache_redis_command(r, context, \"SETEX %s %d %s\", oidc_cache_redis_get_key(r->pool, section, key), timeout, value);",
          "",
          "[Added Lines]",
          "410:     oidc_cache_redis_exec(r, context, \"SETEX %s %d %s\", oidc_cache_redis_get_key(r->pool, section, key), timeout, value);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "412:  return rv;",
          "413: }",
          "420:  if (context != NULL) {",
          "427:   oidc_cache_mutex_destroy(s, context->mutex);",
          "428:  }",
          "430:  return APR_SUCCESS;",
          "431: }",
          "433: oidc_cache_t oidc_cache_redis = {",
          "441: };",
          "",
          "[Removed Lines]",
          "415: static int oidc_cache_redis_destroy(server_rec *s) {",
          "416:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(s->module_config,",
          "417:    &auth_openidc_module);",
          "418:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t *) cfg->cache_cfg;",
          "422:   if (context->ctx != NULL) {",
          "423:    oidc_cache_mutex_lock(s, context->mutex);",
          "424:    oidc_cache_redis_free(context);",
          "425:    oidc_cache_mutex_unlock(s, context->mutex);",
          "426:   }",
          "434:   \"redis\",",
          "435:   1,",
          "436:   oidc_cache_redis_post_config,",
          "437:   oidc_cache_redis_child_init,",
          "438:   oidc_cache_redis_get,",
          "439:   oidc_cache_redis_set,",
          "440:   oidc_cache_redis_destroy",
          "",
          "[Added Lines]",
          "426: static int oidc_cache_redis_destroy_impl(server_rec *s) {",
          "427:  oidc_cfg *cfg = (oidc_cfg*) ap_get_module_config(s->module_config, &auth_openidc_module);",
          "428:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t*) cfg->cache_cfg;",
          "431:   oidc_cache_mutex_lock(s, context->mutex);",
          "432:   oidc_cache_redis_free(context);",
          "433:   oidc_cache_mutex_unlock(s, context->mutex);",
          "435:   cfg->cache_cfg = NULL;",
          "442:  \"redis\",",
          "443:  1,",
          "444:  oidc_cache_redis_post_config_impl,",
          "445:  oidc_cache_redis_child_init,",
          "446:  oidc_cache_redis_get,",
          "447:  oidc_cache_redis_set,",
          "448:  oidc_cache_redis_destroy_impl",
          "",
          "---------------"
        ],
        "src/cache/redis.h||src/cache/redis.h": [
          "File: src/cache/redis.h -> src/cache/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #include \"hiredis/hiredis.h\"",
          "48: #include \"../mod_auth_openidc.h\"",
          "50: typedef struct oidc_cache_cfg_redis_t oidc_cache_cfg_redis_t;",
          "52: typedef apr_status_t (*oidc_cache_redis_connect_function_t)(request_rec*, oidc_cache_cfg_redis_t*);",
          "53: typedef redisReply* (*oidc_cache_redis_command_function_t)(request_rec*, oidc_cache_cfg_redis_t*,",
          "54:   char**, const char *format, va_list ap);",
          "56: typedef struct oidc_cache_cfg_redis_t {",
          "57:  oidc_cache_mutex_t *mutex;",
          "58:  char *passwd;",
          "59:  int database;",
          "60:  struct timeval connect_timeout;",
          "61:  struct timeval timeout;",
          "62:  void *ctx;",
          "63:  oidc_cache_redis_connect_function_t connect;",
          "64:  oidc_cache_redis_command_function_t command;",
          "65: } oidc_cache_cfg_redis_t;",
          "67: int oidc_cache_redis_post_config(server_rec *s, oidc_cfg *cfg, const char *name);",
          "68: int oidc_cache_redis_child_init(apr_pool_t *p, server_rec *s);",
          "69: redisReply* oidc_cache_redis_command(request_rec *r, oidc_cache_cfg_redis_t *context, char **errstr,",
          "70:   const char *format, va_list ap);",
          "71: apr_byte_t oidc_cache_redis_get(request_rec *r, const char *section, const char *key,",
          "72:   const char **value);",
          "73: apr_byte_t oidc_cache_redis_set(request_rec *r, const char *section, const char *key,",
          "74:   const char *value, apr_time_t expiry);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d13ee0e4bd2cef94c4d2b55829310175288e0bdf",
      "candidate_info": {
        "commit_hash": "d13ee0e4bd2cef94c4d2b55829310175288e0bdf",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/d13ee0e4bd2cef94c4d2b55829310175288e0bdf",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "add check to make sure URLs do not contain unencoded Unicode chars\n\nsee #796; thanks @cnico; bump to 2.4.11.1.rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.1rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.1rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2297:  oidc_proto_state_t *proto_state = oidc_proto_state_new();",
          "2298:  oidc_proto_state_set_original_url(proto_state, original_url);",
          "2299:  oidc_proto_state_set_original_method(proto_state,",
          "2300:    oidc_original_request_method(r, c, TRUE));",
          "2301:  oidc_proto_state_set_issuer(proto_state, provider->issuer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2300:  if (oidc_proto_state_get_original_url(proto_state) == NULL) {",
          "2301:   oidc_error(r, \"could not store the current URL in the state: most probably you need to ensure that it does not contain unencoded Unicode characters e.g. by forcing IE 11 to encode all URL characters\");",
          "2302:   return HTTP_INTERNAL_SERVER_ERROR;",
          "2303:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}