{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "253ec6a63dddbf13bea391a765fceada03a94d0f",
      "candidate_info": {
        "commit_hash": "253ec6a63dddbf13bea391a765fceada03a94d0f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/253ec6a63dddbf13bea391a765fceada03a94d0f",
        "files": [
          "src/process_wrap.cc"
        ],
        "message": "process: don't use strdup()\n\nfile and cwd can be directly used from Utf8Value.",
        "before_after_code_files": [
          "src/process_wrap.cc||src/process_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     Local<Value> file_v = js_options->Get(String::New(\"file\"));",
          "113:     }",
          "",
          "[Removed Lines]",
          "110:     if (!file_v.IsEmpty() && file_v->IsString()) {",
          "111:       String::Utf8Value file(file_v->ToString());",
          "112:       options.file = strdup(*file);",
          "",
          "[Added Lines]",
          "110:     String::Utf8Value file(file_v->IsString() ? file_v : Local<Value>());",
          "111:     if (file.length() > 0) {",
          "112:       options.file = *file;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:     Local<Value> cwd_v = js_options->Get(String::New(\"cwd\"));",
          "136:     }",
          "",
          "[Removed Lines]",
          "131:     if (!cwd_v.IsEmpty() && cwd_v->IsString()) {",
          "132:       String::Utf8Value cwd(cwd_v->ToString());",
          "133:       if (cwd.length() > 0) {",
          "134:         options.cwd = strdup(*cwd);",
          "135:       }",
          "",
          "[Added Lines]",
          "131:     String::Utf8Value cwd(cwd_v->IsString() ? cwd_v : Local<Value>());",
          "132:     if (cwd.length() > 0) {",
          "133:       options.cwd = *cwd;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:       delete [] options.args;",
          "192:     }",
          "197:     if (options.env) {",
          "198:       for (int i = 0; options.env[i]; i++) free(options.env[i]);",
          "199:       delete [] options.env;",
          "",
          "[Removed Lines]",
          "194:     free(options.cwd);",
          "195:     free((void*)options.file);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af52bc4fe679303ca4155ea5860a38565bf1fa51",
      "candidate_info": {
        "commit_hash": "af52bc4fe679303ca4155ea5860a38565bf1fa51",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/af52bc4fe679303ca4155ea5860a38565bf1fa51",
        "files": [
          "src/node_crypto.cc"
        ],
        "message": "crypto: fix error reporting in SetKey()",
        "before_after_code_files": [
          "src/node_crypto.cc||src/node_crypto.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:   if (!key) {",
          "299:     BIO_free(bio);",
          "301:   }",
          "303:   SSL_CTX_use_PrivateKey(sc->ctx_, key);",
          "",
          "[Removed Lines]",
          "300:     return False();",
          "",
          "[Added Lines]",
          "300:     unsigned long err = ERR_get_error();",
          "301:     if (!err) {",
          "302:       return ThrowException(Exception::Error(",
          "303:           String::New(\"PEM_read_bio_PrivateKey\")));",
          "304:     }",
          "305:     char string[120];",
          "306:     ERR_error_string_n(err, string, sizeof string);",
          "307:     return ThrowException(Exception::Error(String::New(string)));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3db2e034c44ccf6ef10aa8d648f8230f60272595",
      "candidate_info": {
        "commit_hash": "3db2e034c44ccf6ef10aa8d648f8230f60272595",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3db2e034c44ccf6ef10aa8d648f8230f60272595",
        "files": [
          "lib/events.js"
        ],
        "message": "events: cache `domain` module locally\n\nIt's faster than calling `require` every time we create an\n`EventEmitter`.",
        "before_after_code_files": [
          "lib/events.js||lievents.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/events.js||lievents.js": [
          "File: lib/events.js -> lievents.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var isArray = Array.isArray;",
          "24: function EventEmitter() {",
          "25:   if (exports.usingDomains) {",
          "28:     if (domain.active && !(this instanceof domain.Domain)) {",
          "29:       this.domain = domain.active;",
          "30:     }",
          "",
          "[Removed Lines]",
          "27:     var domain = require('domain');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4f4c633706297c3b695a6e590097a1c74ecf7c6",
      "candidate_info": {
        "commit_hash": "e4f4c633706297c3b695a6e590097a1c74ecf7c6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e4f4c633706297c3b695a6e590097a1c74ecf7c6",
        "files": [
          "deps/uv/src/unix/core.c",
          "deps/uv/src/uv-common.h",
          "deps/uv/src/win/async.c",
          "deps/uv/src/win/fs-event.c",
          "deps/uv/src/win/handle-inl.h",
          "deps/uv/src/win/loop-watcher.c",
          "deps/uv/src/win/pipe.c",
          "deps/uv/src/win/poll.c",
          "deps/uv/src/win/process.c",
          "deps/uv/src/win/stream-inl.h",
          "deps/uv/src/win/tcp.c",
          "deps/uv/src/win/timer.c",
          "deps/uv/src/win/tty.c",
          "deps/uv/src/win/udp.c"
        ],
        "message": "uv: upgrade to 9f44b0e3",
        "before_after_code_files": [
          "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c",
          "deps/uv/src/uv-common.h||deps/uv/src/uv-common.h",
          "deps/uv/src/win/async.c||deps/uv/src/win/async.c",
          "deps/uv/src/win/fs-event.c||deps/uv/src/win/fs-event.c",
          "deps/uv/src/win/handle-inl.h||deps/uv/src/win/handle-inl.h",
          "deps/uv/src/win/loop-watcher.c||deps/uv/src/win/loop-watcher.c",
          "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c",
          "deps/uv/src/win/poll.c||deps/uv/src/win/poll.c",
          "deps/uv/src/win/process.c||deps/uv/src/win/process.c",
          "deps/uv/src/win/stream-inl.h||deps/uv/src/win/stream-inl.h",
          "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c",
          "deps/uv/src/win/timer.c||deps/uv/src/win/timer.c",
          "deps/uv/src/win/tty.c||deps/uv/src/win/tty.c",
          "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c": [
          "File: deps/uv/src/unix/core.c -> deps/uv/src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "271: }",
          "286: void uv_update_time(uv_loop_t* loop) {",
          "287:   loop->time = uv_hrtime() / 1000000;",
          "288: }",
          "",
          "[Removed Lines]",
          "274: void uv__handle_init(uv_loop_t* loop, uv_handle_t* handle,",
          "275:     uv_handle_type type) {",
          "276:   loop->counters.handle_init++;",
          "278:   handle->loop = loop;",
          "279:   handle->type = type;",
          "281:   handle->next_closing = NULL;",
          "282:   ngx_queue_insert_tail(&loop->handle_queue, &handle->handle_queue);",
          "283: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/uv-common.h||deps/uv/src/uv-common.h": [
          "File: deps/uv/src/uv-common.h -> deps/uv/src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: }",
          "154: #define uv__handle_unref(h) uv__handle_unref((uv_handle_t*)(h))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: UNUSED static void uv__handle_init(uv_loop_t* loop,",
          "157:                                    uv_handle_t* handle,",
          "158:                                    uv_handle_type type) {",
          "159:   loop->counters.handle_init++;",
          "160:   handle->loop = loop;",
          "161:   handle->type = type;",
          "163:   ngx_queue_insert_tail(&loop->handle_queue, &handle->handle_queue);",
          "164: #ifndef _WIN32",
          "165:   handle->next_closing = NULL;",
          "166: #endif",
          "167: }",
          "",
          "---------------"
        ],
        "deps/uv/src/win/async.c||deps/uv/src/win/async.c": [
          "File: deps/uv/src/win/async.c -> deps/uv/src/win/async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: int uv_async_init(uv_loop_t* loop, uv_async_t* handle, uv_async_cb async_cb) {",
          "70:   uv_req_t* req;",
          "74:   handle->async_sent = 0;",
          "75:   handle->async_cb = async_cb;",
          "",
          "[Removed Lines]",
          "72:   uv_handle_init(loop, (uv_handle_t*) handle);",
          "73:   handle->type = UV_ASYNC;",
          "",
          "[Added Lines]",
          "72:   uv__handle_init(loop, (uv_handle_t*) handle, UV_ASYNC);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs-event.c||deps/uv/src/win/fs-event.c": [
          "File: deps/uv/src/win/fs-event.c -> deps/uv/src/win/fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: static void uv_fs_event_init_handle(uv_loop_t* loop, uv_fs_event_t* handle,",
          "38:     const char* filename, uv_fs_event_cb cb) {",
          "41:   handle->cb = cb;",
          "42:   handle->dir_handle = INVALID_HANDLE_VALUE;",
          "43:   handle->buffer = NULL;",
          "",
          "[Removed Lines]",
          "39:   uv_handle_init(loop, (uv_handle_t*) handle);",
          "40:   handle->type = UV_FS_EVENT;",
          "",
          "[Added Lines]",
          "39:   uv__handle_init(loop, (uv_handle_t*) handle, UV_FS_EVENT);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/handle-inl.h||deps/uv/src/win/handle-inl.h": [
          "File: deps/uv/src/win/handle-inl.h -> deps/uv/src/win/handle-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:   } while (0)",
          "81: INLINE static void uv_want_endgame(uv_loop_t* loop, uv_handle_t* handle) {",
          "82:   if (!(handle->flags & UV_HANDLE_ENDGAME_QUEUED)) {",
          "83:     handle->flags |= UV_HANDLE_ENDGAME_QUEUED;",
          "",
          "[Removed Lines]",
          "72: INLINE static void uv_handle_init(uv_loop_t* loop, uv_handle_t* handle) {",
          "73:   handle->loop = loop;",
          "74:   handle->flags = UV__HANDLE_REF;",
          "75:   ngx_queue_insert_tail(&loop->handle_queue, &handle->handle_queue);",
          "77:   loop->counters.handle_init++;",
          "78: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/win/loop-watcher.c||deps/uv/src/win/loop-watcher.c": [
          "File: deps/uv/src/win/loop-watcher.c -> deps/uv/src/win/loop-watcher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #define UV_LOOP_WATCHER_DEFINE(name, NAME)                                    \\",
          "40:   int uv_##name##_init(uv_loop_t* loop, uv_##name##_t* handle) {              \\",
          "43:     loop->counters.name##_init++;                                             \\",
          "44:                                                                               \\",
          "45:     return 0;                                                                 \\",
          "",
          "[Removed Lines]",
          "41:     uv_handle_init(loop, (uv_handle_t*) handle);                              \\",
          "42:     handle->type = UV_##NAME;                                                 \\",
          "",
          "[Added Lines]",
          "41:     uv__handle_init(loop, (uv_handle_t*) handle, UV_##NAME);                  \\",
          "",
          "---------------"
        ],
        "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c": [
          "File: deps/uv/src/win/pipe.c -> deps/uv/src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: int uv_pipe_init(uv_loop_t* loop, uv_pipe_t* handle, int ipc) {",
          "80:   handle->reqs_pending = 0;",
          "81:   handle->handle = INVALID_HANDLE_VALUE;",
          "82:   handle->name = NULL;",
          "",
          "[Removed Lines]",
          "77:   uv_stream_init(loop, (uv_stream_t*)handle);",
          "79:   handle->type = UV_NAMED_PIPE;",
          "",
          "[Added Lines]",
          "77:   uv_stream_init(loop, (uv_stream_t*)handle, UV_NAMED_PIPE);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/poll.c||deps/uv/src/win/poll.c": [
          "File: deps/uv/src/win/poll.c -> deps/uv/src/win/poll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:     socket = base_socket;",
          "520:   }",
          "524:   handle->socket = socket;",
          "525:   handle->events = 0;",
          "",
          "[Removed Lines]",
          "522:   uv_handle_init(loop, (uv_handle_t*) handle);",
          "523:   handle->type = UV_POLL;",
          "",
          "[Added Lines]",
          "522:   uv__handle_init(loop, (uv_handle_t*) handle, UV_POLL);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/process.c||deps/uv/src/win/process.c": [
          "File: deps/uv/src/win/process.c -> deps/uv/src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: static void uv_process_init(uv_loop_t* loop, uv_process_t* handle) {",
          "106:   handle->exit_cb = NULL;",
          "107:   handle->pid = 0;",
          "108:   handle->exit_signal = 0;",
          "",
          "[Removed Lines]",
          "104:   uv_handle_init(loop, (uv_handle_t*) handle);",
          "105:   handle->type = UV_PROCESS;",
          "",
          "[Added Lines]",
          "104:   uv__handle_init(loop, (uv_handle_t*) handle, UV_PROCESS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1093:         uv_stream_t* stream = fdopt.data.stream;",
          "1097:           stream_handle = ((uv_tty_t*) stream)->handle;",
          "1098:           crt_flags = FOPEN | FDEV;",
          "1099:         } else if (stream->type == UV_NAMED_PIPE &&",
          "",
          "[Removed Lines]",
          "1096:         if (stream->type = UV_TTY) {",
          "",
          "[Added Lines]",
          "1095:         if (stream->type == UV_TTY) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/stream-inl.h||deps/uv/src/win/stream-inl.h": [
          "File: deps/uv/src/win/stream-inl.h -> deps/uv/src/win/stream-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"req-inl.h\"",
          "35:   handle->write_queue_size = 0;",
          "36:   handle->activecnt = 0;",
          "",
          "[Removed Lines]",
          "33: INLINE static void uv_stream_init(uv_loop_t* loop, uv_stream_t* handle) {",
          "34:   uv_handle_init(loop, (uv_handle_t*) handle);",
          "",
          "[Added Lines]",
          "33: INLINE static void uv_stream_init(uv_loop_t* loop,",
          "34:                                   uv_stream_t* handle,",
          "35:                                   uv_handle_type type) {",
          "36:   uv__handle_init(loop, (uv_handle_t*) handle, type);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c": [
          "File: deps/uv/src/win/tcp.c -> deps/uv/src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148: int uv_tcp_init(uv_loop_t* loop, uv_tcp_t* handle) {",
          "152:   handle->accept_reqs = NULL;",
          "153:   handle->pending_accepts = NULL;",
          "154:   handle->socket = INVALID_SOCKET;",
          "",
          "[Removed Lines]",
          "149:   uv_stream_init(loop, (uv_stream_t*) handle);",
          "151:   handle->type = UV_TCP;",
          "",
          "[Added Lines]",
          "149:   uv_stream_init(loop, (uv_stream_t*) handle, UV_TCP);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/timer.c||deps/uv/src/win/timer.c": [
          "File: deps/uv/src/win/timer.c -> deps/uv/src/win/timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: int uv_timer_init(uv_loop_t* loop, uv_timer_t* handle) {",
          "72:   handle->timer_cb = NULL;",
          "73:   handle->repeat = 0;",
          "",
          "[Removed Lines]",
          "70:   uv_handle_init(loop, (uv_handle_t*) handle);",
          "71:   handle->type = UV_TIMER;",
          "",
          "[Added Lines]",
          "70:   uv__handle_init(loop, (uv_handle_t*) handle, UV_TIMER);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tty.c||deps/uv/src/win/tty.c": [
          "File: deps/uv/src/win/tty.c -> deps/uv/src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     LeaveCriticalSection(&uv_tty_output_lock);",
          "113:   }",
          "116:   uv_connection_init((uv_stream_t*) tty);",
          "119:   tty->handle = win_handle;",
          "120:   tty->read_line_handle = NULL;",
          "121:   tty->read_line_buffer = uv_null_buf_;",
          "",
          "[Removed Lines]",
          "115:   uv_stream_init(loop, (uv_stream_t*) tty);",
          "118:   tty->type = UV_TTY;",
          "",
          "[Added Lines]",
          "115:   uv_stream_init(loop, (uv_stream_t*) tty, UV_TTY);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c": [
          "File: deps/uv/src/win/udp.c -> deps/uv/src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: int uv_udp_init(uv_loop_t* loop, uv_udp_t* handle) {",
          "129:   handle->socket = INVALID_SOCKET;",
          "130:   handle->reqs_pending = 0;",
          "131:   handle->activecnt = 0;",
          "",
          "[Removed Lines]",
          "126:   uv_handle_init(loop, (uv_handle_t*) handle);",
          "128:   handle->type = UV_UDP;",
          "",
          "[Added Lines]",
          "126:   uv__handle_init(loop, (uv_handle_t*) handle, UV_UDP);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ccdde9a6986e7e258e9aa0de10ca51fc0c5a9d4",
      "candidate_info": {
        "commit_hash": "1ccdde9a6986e7e258e9aa0de10ca51fc0c5a9d4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1ccdde9a6986e7e258e9aa0de10ca51fc0c5a9d4",
        "files": [
          "lib/http.js",
          "lib/https.js"
        ],
        "message": "Revert \"http/https: pass request to .createConnection()\"\n\nThis reverts commit 53716eb0b5338999761d115fad9d392077836e63.",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "lib/https.js||lihttps.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1067:   }",
          "1068:   if (this.sockets[name].length < this.maxSockets) {",
          "1071:   } else {",
          "1073:     if (!this.requests[name]) {",
          "",
          "[Removed Lines]",
          "1070:     req.onSocket(this.createSocket(name, host, port, localAddress, req));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1076:     this.requests[name].push(req);",
          "1077:   }",
          "1078: };",
          "1080:   var self = this;",
          "1081:   var options = util._extend({}, self.options);",
          "1082:   options.port = port;",
          "1083:   options.host = host;",
          "1084:   options.localAddress = localAddress;",
          "1086:   if (!self.sockets[name]) {",
          "1087:     self.sockets[name] = [];",
          "1088:   }",
          "",
          "[Removed Lines]",
          "1079: Agent.prototype.createSocket = function(name, host, port, localAddress, req) {",
          "1085:   var s = self.createConnection.call(req, options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1123:   }",
          "1124:   if (this.requests[name] && this.requests[name].length) {",
          "1131:   }",
          "1132: };",
          "",
          "[Removed Lines]",
          "1126:     this.createSocket(name,",
          "1127:                       host,",
          "1128:                       port,",
          "1129:                       localAddress,",
          "1130:                       this.requests[name][0]).emit('free');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1139:   var self = this;",
          "1140:   OutgoingMessage.call(self);",
          "1143:   self.agent = options.agent === undefined ? globalAgent : options.agent;",
          "1145:   var defaultPort = options.defaultPort || 80;",
          "",
          "[Removed Lines]",
          "1142:   this.options = util._extend({}, options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1199:     self._last = true;",
          "1200:     self.shouldKeepAlive = false;",
          "1201:     if (options.createConnection) {",
          "1203:     } else {",
          "1204:       self.onSocket(net.createConnection(self.socketPath));",
          "1205:     }",
          "",
          "[Removed Lines]",
          "1202:       self.onSocket(options.createConnection.call(self, self.socketPath));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1215:     if (options.createConnection) {",
          "1216:       options.port = port;",
          "1217:       options.host = host;",
          "1219:     } else {",
          "1220:       var conn = net.createConnection({",
          "1221:         port: port,",
          "",
          "[Removed Lines]",
          "1218:       var conn = options.createConnection.call(self, options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/https.js||lihttps.js": [
          "File: lib/https.js -> lihttps.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var tls = require('tls');",
          "23: var http = require('http');",
          "27: function Server(opts, requestListener) {",
          "28:   if (!(this instanceof Server)) return new Server(opts, requestListener);",
          "",
          "[Removed Lines]",
          "24: var util = require('util');",
          "25: var inherits = util.inherits;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: function createConnection(/* [port, host, options] */) {",
          "58:   if (typeof arguments[0] === 'object') {",
          "60:   } else if (typeof arguments[1] === 'object') {",
          "62:     options.port = arguments[0];",
          "63:   } else if (typeof arguments[2] === 'object') {",
          "65:     options.port = arguments[0];",
          "66:     options.host = arguments[1];",
          "67:   } else {",
          "",
          "[Removed Lines]",
          "56:   var options = util._extend({}, this.options);",
          "59:     options = util._extend(options, arguments[0]);",
          "61:     options = util._extend(options, arguments[1]);",
          "64:     options = util._extend(options, arguments[2]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}