{
  "cve_id": "CVE-2014-8275",
  "cve_desc": "OpenSSL before 0.9.8zd, 1.0.0 before 1.0.0p, and 1.0.1 before 1.0.1k does not enforce certain constraints on certificate data, which allows remote attackers to defeat a fingerprint-based certificate-blacklist protection mechanism by including crafted data within a certificate's unsigned portion, related to crypto/asn1/a_verify.c, crypto/dsa/dsa_asn1.c, crypto/ecdsa/ecs_vrf.c, and crypto/x509/x_all.c.",
  "repo": "openssl/openssl",
  "patch_hash": "684400ce192dac51df3d3e92b61830a6ef90be3e",
  "patch_info": {
    "commit_hash": "684400ce192dac51df3d3e92b61830a6ef90be3e",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/684400ce192dac51df3d3e92b61830a6ef90be3e",
    "files": [
      "CHANGES",
      "crypto/asn1/a_verify.c",
      "crypto/dsa/dsa_asn1.c",
      "crypto/ecdsa/ecs_vrf.c",
      "crypto/x509/x_all.c"
    ],
    "message": "Fix various certificate fingerprint issues.\n\nBy using non-DER or invalid encodings outside the signed portion of a\ncertificate the fingerprint can be changed without breaking the signature.\nAlthough no details of the signed portion of the certificate can be changed\nthis can cause problems with some applications: e.g. those using the\ncertificate fingerprint for blacklists.\n\n1. Reject signatures with non zero unused bits.\n\nIf the BIT STRING containing the signature has non zero unused bits reject\nthe signature. All current signature algorithms require zero unused bits.\n\n2. Check certificate algorithm consistency.\n\nCheck the AlgorithmIdentifier inside TBS matches the one in the\ncertificate signature. NB: this will result in signature failure\nerrors for some broken certificates.\n\n3. Check DSA/ECDSA signatures use DER.\n\nReencode DSA/ECDSA signatures and compare with the original received\nsignature. Return an error if there is a mismatch.\n\nThis will reject various cases including garbage after signature\n(thanks to Antti Karjalainen and Tuomo Untinen from the Codenomicon CROSS\nprogram for discovering this case) and use of BER or invalid ASN.1 INTEGERs\n(negative or with leading zeroes).\n\nCVE-2014-8275\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
    "before_after_code_files": [
      "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
      "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c",
      "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
      "crypto/x509/x_all.c||crypto/x509/x_all.c"
    ]
  },
  "patch_diff": {
    "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
      "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "90:   ASN1err(ASN1_F_ASN1_VERIFY,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);",
      "91:   goto err;",
      "92:   }",
      "94:  inl=i2d(data,NULL);",
      "95:  buf_in=OPENSSL_malloc((unsigned int)inl);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "94:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
      "95:   {",
      "96:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
      "97:   goto err;",
      "98:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "150:   return -1;",
      "151:   }",
      "153:  EVP_MD_CTX_init(&ctx);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "159:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
      "160:   {",
      "161:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
      "162:   return -1;",
      "163:   }",
      "",
      "---------------"
    ],
    "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c": [
      "File: crypto/dsa/dsa_asn1.c -> crypto/dsa/dsa_asn1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:       const unsigned char *sigbuf, int siglen, DSA *dsa)",
      "178:  {",
      "179:  DSA_SIG *s;",
      "180:  int ret=-1;",
      "182:  s = DSA_SIG_new();",
      "183:  if (s == NULL) return(ret);",
      "185:  ret=DSA_do_verify(dgst,dgst_len,s,dsa);",
      "186: err:",
      "187:  DSA_SIG_free(s);",
      "188:  return(ret);",
      "189:  }",
      "",
      "[Removed Lines]",
      "184:  if (d2i_DSA_SIG(&s,&sigbuf,siglen) == NULL) goto err;",
      "",
      "[Added Lines]",
      "180:  const unsigned char *p = sigbuf;",
      "181:  unsigned char *der = NULL;",
      "182:  int derlen = -1;",
      "187:  if (d2i_DSA_SIG(&s,&p,siglen) == NULL) goto err;",
      "189:  derlen = i2d_DSA_SIG(s, &der);",
      "190:  if (derlen != siglen || memcmp(sigbuf, der, derlen))",
      "191:   goto err;",
      "194:  if (derlen > 0)",
      "195:   {",
      "196:   OPENSSL_cleanse(der, derlen);",
      "197:   OPENSSL_free(der);",
      "198:   }",
      "",
      "---------------"
    ],
    "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c": [
      "File: crypto/ecdsa/ecs_vrf.c -> crypto/ecdsa/ecs_vrf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "59: #include \"ecs_locl.h\"",
      "60: #ifndef OPENSSL_NO_ENGINE",
      "61: #include <openssl/engine.h>",
      "62: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60: #include \"cryptlib.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "86:   const unsigned char *sigbuf, int sig_len, EC_KEY *eckey)",
      "87:   {",
      "88:  ECDSA_SIG *s;",
      "89:  int ret=-1;",
      "91:  s = ECDSA_SIG_new();",
      "92:  if (s == NULL) return(ret);",
      "94:  ret=ECDSA_do_verify(dgst, dgst_len, s, eckey);",
      "95: err:",
      "96:  ECDSA_SIG_free(s);",
      "97:  return(ret);",
      "98:  }",
      "",
      "[Removed Lines]",
      "93:  if (d2i_ECDSA_SIG(&s, &sigbuf, sig_len) == NULL) goto err;",
      "",
      "[Added Lines]",
      "90:  const unsigned char *p = sigbuf;",
      "91:  unsigned char *der = NULL;",
      "92:  int derlen = -1;",
      "97:  if (d2i_ECDSA_SIG(&s, &p, sig_len) == NULL) goto err;",
      "99:  derlen = i2d_ECDSA_SIG(s, &der);",
      "100:  if (derlen != sig_len || memcmp(sigbuf, der, derlen))",
      "101:   goto err;",
      "104:  if (derlen > 0)",
      "105:   {",
      "106:   OPENSSL_cleanse(der, derlen);",
      "107:   OPENSSL_free(der);",
      "108:   }",
      "",
      "---------------"
    ],
    "crypto/x509/x_all.c||crypto/x509/x_all.c": [
      "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "74: int X509_verify(X509 *a, EVP_PKEY *r)",
      "75:  {",
      "76:  return(ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF),a->sig_alg,",
      "77:   a->signature,a->cert_info,r));",
      "78:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76:  if (X509_ALGOR_cmp(a->sig_alg, a->cert_info->signature))",
      "77:   return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "85cfc188c06bd046420ae70dd6e302f9efe022a9",
      "candidate_info": {
        "commit_hash": "85cfc188c06bd046420ae70dd6e302f9efe022a9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/85cfc188c06bd046420ae70dd6e302f9efe022a9",
        "files": [
          "CHANGES",
          "crypto/asn1/a_verify.c",
          "crypto/dsa/dsa_asn1.c",
          "crypto/ecdsa/ecs_vrf.c",
          "crypto/x509/x_all.c"
        ],
        "message": "Fix various certificate fingerprint issues.\n\nBy using non-DER or invalid encodings outside the signed portion of a\ncertificate the fingerprint can be changed without breaking the signature.\nAlthough no details of the signed portion of the certificate can be changed\nthis can cause problems with some applications: e.g. those using the\ncertificate fingerprint for blacklists.\n\n1. Reject signatures with non zero unused bits.\n\nIf the BIT STRING containing the signature has non zero unused bits reject\nthe signature. All current signature algorithms require zero unused bits.\n\n2. Check certificate algorithm consistency.\n\nCheck the AlgorithmIdentifier inside TBS matches the one in the\ncertificate signature. NB: this will result in signature failure\nerrors for some broken certificates.\n\n3. Check DSA/ECDSA signatures use DER.\n\nReencode DSA/ECDSA signatures and compare with the original received\nsignature. Return an error if there is a mismatch.\n\nThis will reject various cases including garbage after signature\n(thanks to Antti Karjalainen and Tuomo Untinen from the Codenomicon CROSS\nprogram for discovering this case) and use of BER or invalid ASN.1 INTEGERs\n(negative or with leading zeroes).\n\nCVE-2014-8275\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>\n\n(cherry picked from commit 684400ce192dac51df3d3e92b61830a6ef90be3e)",
        "before_after_code_files": [
          "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
          "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c",
          "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
          "crypto/x509/x_all.c||crypto/x509/x_all.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c",
            "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
            "crypto/x509/x_all.c||crypto/x509/x_all.c"
          ],
          "candidate": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c",
            "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
            "crypto/x509/x_all.c||crypto/x509/x_all.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
          "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:   ASN1err(ASN1_F_ASN1_VERIFY,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);",
          "91:   goto err;",
          "92:   }",
          "94:  inl=i2d(data,NULL);",
          "95:  buf_in=OPENSSL_malloc((unsigned int)inl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
          "95:   {",
          "96:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
          "97:   goto err;",
          "98:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   return -1;",
          "147:   }",
          "149:  EVP_MD_CTX_init(&ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
          "156:   {",
          "157:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
          "158:   return -1;",
          "159:   }",
          "",
          "---------------"
        ],
        "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c": [
          "File: crypto/dsa/dsa_asn1.c -> crypto/dsa/dsa_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:       const unsigned char *sigbuf, int siglen, DSA *dsa)",
          "177:  {",
          "178:  DSA_SIG *s;",
          "179:  int ret=-1;",
          "181:  s = DSA_SIG_new();",
          "182:  if (s == NULL) return(ret);",
          "184:  ret=DSA_do_verify(dgst,dgst_len,s,dsa);",
          "185: err:",
          "186:  DSA_SIG_free(s);",
          "187:  return(ret);",
          "188:  }",
          "",
          "[Removed Lines]",
          "183:  if (d2i_DSA_SIG(&s,&sigbuf,siglen) == NULL) goto err;",
          "",
          "[Added Lines]",
          "179:  const unsigned char *p = sigbuf;",
          "180:  unsigned char *der = NULL;",
          "181:  int derlen = -1;",
          "186:  if (d2i_DSA_SIG(&s,&p,siglen) == NULL) goto err;",
          "188:  derlen = i2d_DSA_SIG(s, &der);",
          "189:  if (derlen != siglen || memcmp(sigbuf, der, derlen))",
          "190:   goto err;",
          "193:  if (derlen > 0)",
          "194:   {",
          "195:   OPENSSL_cleanse(der, derlen);",
          "196:   OPENSSL_free(der);",
          "197:   }",
          "",
          "---------------"
        ],
        "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c": [
          "File: crypto/ecdsa/ecs_vrf.c -> crypto/ecdsa/ecs_vrf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #include \"ecs_locl.h\"",
          "60: #ifndef OPENSSL_NO_ENGINE",
          "61: #include <openssl/engine.h>",
          "62: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: #include \"cryptlib.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   const unsigned char *sigbuf, int sig_len, EC_KEY *eckey)",
          "85:   {",
          "86:  ECDSA_SIG *s;",
          "87:  int ret=-1;",
          "89:  s = ECDSA_SIG_new();",
          "90:  if (s == NULL) return(ret);",
          "92:  ret=ECDSA_do_verify(dgst, dgst_len, s, eckey);",
          "93: err:",
          "94:  ECDSA_SIG_free(s);",
          "95:  return(ret);",
          "96:  }",
          "",
          "[Removed Lines]",
          "91:  if (d2i_ECDSA_SIG(&s, &sigbuf, sig_len) == NULL) goto err;",
          "",
          "[Added Lines]",
          "88:  const unsigned char *p = sigbuf;",
          "89:  unsigned char *der = NULL;",
          "90:  int derlen = -1;",
          "95:  if (d2i_ECDSA_SIG(&s, &p, sig_len) == NULL) goto err;",
          "97:  derlen = i2d_ECDSA_SIG(s, &der);",
          "98:  if (derlen != sig_len || memcmp(sigbuf, der, derlen))",
          "99:   goto err;",
          "102:  if (derlen > 0)",
          "103:   {",
          "104:   OPENSSL_cleanse(der, derlen);",
          "105:   OPENSSL_free(der);",
          "106:   }",
          "",
          "---------------"
        ],
        "crypto/x509/x_all.c||crypto/x509/x_all.c": [
          "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: int X509_verify(X509 *a, EVP_PKEY *r)",
          "75:  {",
          "76:  return(ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF),a->sig_alg,",
          "77:   a->signature,a->cert_info,r));",
          "78:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:  if (X509_ALGOR_cmp(a->sig_alg, a->cert_info->signature))",
          "77:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8565530e27718760220df469f0a071c85b9e731",
      "candidate_info": {
        "commit_hash": "a8565530e27718760220df469f0a071c85b9e731",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a8565530e27718760220df469f0a071c85b9e731",
        "files": [
          "CHANGES",
          "crypto/asn1/a_verify.c",
          "crypto/dsa/dsa_asn1.c",
          "crypto/ecdsa/ecs_vrf.c",
          "crypto/x509/x_all.c"
        ],
        "message": "Fix various certificate fingerprint issues.\n\nBy using non-DER or invalid encodings outside the signed portion of a\ncertificate the fingerprint can be changed without breaking the signature.\nAlthough no details of the signed portion of the certificate can be changed\nthis can cause problems with some applications: e.g. those using the\ncertificate fingerprint for blacklists.\n\n1. Reject signatures with non zero unused bits.\n\nIf the BIT STRING containing the signature has non zero unused bits reject\nthe signature. All current signature algorithms require zero unused bits.\n\n2. Check certificate algorithm consistency.\n\nCheck the AlgorithmIdentifier inside TBS matches the one in the\ncertificate signature. NB: this will result in signature failure\nerrors for some broken certificates.\n\n3. Check DSA/ECDSA signatures use DER.\n\nReencode DSA/ECDSA signatures and compare with the original received\nsignature. Return an error if there is a mismatch.\n\nThis will reject various cases including garbage after signature\n(thanks to Antti Karjalainen and Tuomo Untinen from the Codenomicon CROSS\nprogram for discovering this case) and use of BER or invalid ASN.1 INTEGERs\n(negative or with leading zeroes).\n\nCVE-2014-8275\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>\n\n(cherry picked from commit 684400ce192dac51df3d3e92b61830a6ef90be3e)",
        "before_after_code_files": [
          "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
          "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c",
          "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
          "crypto/x509/x_all.c||crypto/x509/x_all.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c",
            "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
            "crypto/x509/x_all.c||crypto/x509/x_all.c"
          ],
          "candidate": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c",
            "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
            "crypto/x509/x_all.c||crypto/x509/x_all.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
          "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:   ASN1err(ASN1_F_ASN1_VERIFY,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);",
          "91:   goto err;",
          "92:   }",
          "94:  inl=i2d(data,NULL);",
          "95:  buf_in=OPENSSL_malloc((unsigned int)inl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
          "95:   {",
          "96:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
          "97:   goto err;",
          "98:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   return -1;",
          "147:   }",
          "149:  EVP_MD_CTX_init(&ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
          "156:   {",
          "157:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
          "158:   return -1;",
          "159:   }",
          "",
          "---------------"
        ],
        "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c": [
          "File: crypto/dsa/dsa_asn1.c -> crypto/dsa/dsa_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:       const unsigned char *sigbuf, int siglen, DSA *dsa)",
          "177:  {",
          "178:  DSA_SIG *s;",
          "179:  int ret=-1;",
          "181:  s = DSA_SIG_new();",
          "182:  if (s == NULL) return(ret);",
          "184:  ret=DSA_do_verify(dgst,dgst_len,s,dsa);",
          "185: err:",
          "186:  DSA_SIG_free(s);",
          "187:  return(ret);",
          "188:  }",
          "",
          "[Removed Lines]",
          "183:  if (d2i_DSA_SIG(&s,&sigbuf,siglen) == NULL) goto err;",
          "",
          "[Added Lines]",
          "179:  const unsigned char *p = sigbuf;",
          "180:  unsigned char *der = NULL;",
          "181:  int derlen = -1;",
          "186:  if (d2i_DSA_SIG(&s,&p,siglen) == NULL) goto err;",
          "188:  derlen = i2d_DSA_SIG(s, &der);",
          "189:  if (derlen != siglen || memcmp(sigbuf, der, derlen))",
          "190:   goto err;",
          "193:  if (derlen > 0)",
          "194:   {",
          "195:   OPENSSL_cleanse(der, derlen);",
          "196:   OPENSSL_free(der);",
          "197:   }",
          "",
          "---------------"
        ],
        "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c": [
          "File: crypto/ecdsa/ecs_vrf.c -> crypto/ecdsa/ecs_vrf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #include \"ecs_locl.h\"",
          "60: #ifndef OPENSSL_NO_ENGINE",
          "61: #include <openssl/engine.h>",
          "62: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: #include \"cryptlib.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   const unsigned char *sigbuf, int sig_len, EC_KEY *eckey)",
          "85:   {",
          "86:  ECDSA_SIG *s;",
          "87:  int ret=-1;",
          "89:  s = ECDSA_SIG_new();",
          "90:  if (s == NULL) return(ret);",
          "92:  ret=ECDSA_do_verify(dgst, dgst_len, s, eckey);",
          "93: err:",
          "94:  ECDSA_SIG_free(s);",
          "95:  return(ret);",
          "96:  }",
          "",
          "[Removed Lines]",
          "91:  if (d2i_ECDSA_SIG(&s, &sigbuf, sig_len) == NULL) goto err;",
          "",
          "[Added Lines]",
          "88:  const unsigned char *p = sigbuf;",
          "89:  unsigned char *der = NULL;",
          "90:  int derlen = -1;",
          "95:  if (d2i_ECDSA_SIG(&s, &p, sig_len) == NULL) goto err;",
          "97:  derlen = i2d_ECDSA_SIG(s, &der);",
          "98:  if (derlen != sig_len || memcmp(sigbuf, der, derlen))",
          "99:   goto err;",
          "102:  if (derlen > 0)",
          "103:   {",
          "104:   OPENSSL_cleanse(der, derlen);",
          "105:   OPENSSL_free(der);",
          "106:   }",
          "",
          "---------------"
        ],
        "crypto/x509/x_all.c||crypto/x509/x_all.c": [
          "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: int X509_verify(X509 *a, EVP_PKEY *r)",
          "74:  {",
          "75:  return(ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF),a->sig_alg,",
          "76:   a->signature,a->cert_info,r));",
          "77:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:  if (X509_ALGOR_cmp(a->sig_alg, a->cert_info->signature))",
          "76:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "208a6012be3077d83df4475f32dd1b1446f3a02e",
      "candidate_info": {
        "commit_hash": "208a6012be3077d83df4475f32dd1b1446f3a02e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/208a6012be3077d83df4475f32dd1b1446f3a02e",
        "files": [
          "CHANGES",
          "crypto/asn1/a_verify.c",
          "crypto/dsa/dsa_vrf.c",
          "crypto/ecdsa/ecs_vrf.c",
          "crypto/x509/x_all.c"
        ],
        "message": "Fix various certificate fingerprint issues.\n\nBy using non-DER or invalid encodings outside the signed portion of a\ncertificate the fingerprint can be changed without breaking the signature.\nAlthough no details of the signed portion of the certificate can be changed\nthis can cause problems with some applications: e.g. those using the\ncertificate fingerprint for blacklists.\n\n1. Reject signatures with non zero unused bits.\n\nIf the BIT STRING containing the signature has non zero unused bits reject\nthe signature. All current signature algorithms require zero unused bits.\n\n2. Check certificate algorithm consistency.\n\nCheck the AlgorithmIdentifier inside TBS matches the one in the\ncertificate signature. NB: this will result in signature failure\nerrors for some broken certificates.\n\n3. Check DSA/ECDSA signatures use DER.\n\nReencode DSA/ECDSA signatures and compare with the original received\nsignature. Return an error if there is a mismatch.\n\nThis will reject various cases including garbage after signature\n(thanks to Antti Karjalainen and Tuomo Untinen from the Codenomicon CROSS\nprogram for discovering this case) and use of BER or invalid ASN.1 INTEGERs\n(negative or with leading zeroes).\n\nCVE-2014-8275\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>\n\n(cherry picked from commit 684400ce192dac51df3d3e92b61830a6ef90be3e)\n\nConflicts:\n\tCHANGES\n\tcrypto/dsa/dsa_asn1.c",
        "before_after_code_files": [
          "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
          "crypto/dsa/dsa_vrf.c||crypto/dsa/dsa_vrf.c",
          "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
          "crypto/x509/x_all.c||crypto/x509/x_all.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
            "crypto/x509/x_all.c||crypto/x509/x_all.c"
          ],
          "candidate": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
            "crypto/x509/x_all.c||crypto/x509/x_all.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
          "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:   ASN1err(ASN1_F_ASN1_VERIFY,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);",
          "91:   goto err;",
          "92:   }",
          "94:  inl=i2d(data,NULL);",
          "95:  buf_in=OPENSSL_malloc((unsigned int)inl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
          "95:   {",
          "96:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
          "97:   goto err;",
          "98:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:   return -1;",
          "143:   }",
          "145:  EVP_MD_CTX_init(&ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
          "152:   {",
          "153:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
          "154:   return -1;",
          "155:   }",
          "",
          "---------------"
        ],
        "crypto/dsa/dsa_vrf.c||crypto/dsa/dsa_vrf.c": [
          "File: crypto/dsa/dsa_vrf.c -> crypto/dsa/dsa_vrf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:       const unsigned char *sigbuf, int siglen, DSA *dsa)",
          "78:  {",
          "79:  DSA_SIG *s;",
          "80:  int ret=-1;",
          "82:  s = DSA_SIG_new();",
          "83:  if (s == NULL) return(ret);",
          "85:  ret=DSA_do_verify(dgst,dgst_len,s,dsa);",
          "86: err:",
          "87:  DSA_SIG_free(s);",
          "88:  return(ret);",
          "89:  }",
          "",
          "[Removed Lines]",
          "84:  if (d2i_DSA_SIG(&s,&sigbuf,siglen) == NULL) goto err;",
          "",
          "[Added Lines]",
          "80:  const unsigned char *p = sigbuf;",
          "81:  unsigned char *der = NULL;",
          "82:  int derlen = -1;",
          "87:  if (d2i_DSA_SIG(&s,&p,siglen) == NULL) goto err;",
          "89:  derlen = i2d_DSA_SIG(s, &der);",
          "90:  if (derlen != siglen || memcmp(sigbuf, der, derlen))",
          "91:   goto err;",
          "94:  if (derlen > 0)",
          "95:   {",
          "96:   OPENSSL_cleanse(der, derlen);",
          "97:   OPENSSL_free(der);",
          "98:   }",
          "",
          "---------------"
        ],
        "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c": [
          "File: crypto/ecdsa/ecs_vrf.c -> crypto/ecdsa/ecs_vrf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #include \"ecs_locl.h\"",
          "60: #ifndef OPENSSL_NO_ENGINE",
          "61: #include <openssl/engine.h>",
          "62: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: #include \"cryptlib.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   const unsigned char *sigbuf, int sig_len, EC_KEY *eckey)",
          "85:   {",
          "86:  ECDSA_SIG *s;",
          "87:  int ret=-1;",
          "89:  s = ECDSA_SIG_new();",
          "90:  if (s == NULL) return(ret);",
          "92:  ret=ECDSA_do_verify(dgst, dgst_len, s, eckey);",
          "93: err:",
          "94:  ECDSA_SIG_free(s);",
          "95:  return(ret);",
          "96:  }",
          "",
          "[Removed Lines]",
          "91:  if (d2i_ECDSA_SIG(&s, &sigbuf, sig_len) == NULL) goto err;",
          "",
          "[Added Lines]",
          "88:  const unsigned char *p = sigbuf;",
          "89:  unsigned char *der = NULL;",
          "90:  int derlen = -1;",
          "95:  if (d2i_ECDSA_SIG(&s, &p, sig_len) == NULL) goto err;",
          "97:  derlen = i2d_ECDSA_SIG(s, &der);",
          "98:  if (derlen != sig_len || memcmp(sigbuf, der, derlen))",
          "99:   goto err;",
          "102:  if (derlen > 0)",
          "103:   {",
          "104:   OPENSSL_cleanse(der, derlen);",
          "105:   OPENSSL_free(der);",
          "106:   }",
          "",
          "---------------"
        ],
        "crypto/x509/x_all.c||crypto/x509/x_all.c": [
          "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: int X509_verify(X509 *a, EVP_PKEY *r)",
          "74:  {",
          "75:  return(ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF),a->sig_alg,",
          "76:   a->signature,a->cert_info,r));",
          "77:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:  if (X509_ALGOR_cmp(a->sig_alg, a->cert_info->signature))",
          "76:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81e4943843773a04067703e0dc1668ec5d3b4cf1",
      "candidate_info": {
        "commit_hash": "81e4943843773a04067703e0dc1668ec5d3b4cf1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/81e4943843773a04067703e0dc1668ec5d3b4cf1",
        "files": [
          "crypto/include/internal/x509_int.h",
          "crypto/x509/t_x509.c",
          "crypto/x509/x509_cmp.c",
          "crypto/x509/x509_set.c",
          "crypto/x509/x_all.c",
          "crypto/x509/x_x509.c"
        ],
        "message": "embed certificate serial number and signature fields\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/include/internal/x509_int.h||crypto/include/internal/x509_int.h",
          "crypto/x509/t_x509.c||crypto/x509/t_x509.c",
          "crypto/x509/x509_cmp.c||crypto/x509/x509_cmp.c",
          "crypto/x509/x509_set.c||crypto/x509/x509_set.c",
          "crypto/x509/x_all.c||crypto/x509/x_all.c",
          "crypto/x509/x_x509.c||crypto/x509/x_x509.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/x509/x_all.c||crypto/x509/x_all.c"
          ],
          "candidate": [
            "crypto/x509/x_all.c||crypto/x509/x_all.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/include/internal/x509_int.h||crypto/include/internal/x509_int.h": [
          "File: crypto/include/internal/x509_int.h -> crypto/include/internal/x509_int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "177: struct x509_cinf_st {",
          "180:     X509_ALGOR signature;",
          "181:     X509_NAME *issuer;",
          "182:     X509_VAL validity;",
          "",
          "[Removed Lines]",
          "179:     ASN1_INTEGER *serialNumber;",
          "",
          "[Added Lines]",
          "179:     ASN1_INTEGER serialNumber;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191: struct x509_st {",
          "192:     X509_CINF cert_info;",
          "193:     X509_ALGOR sig_alg;",
          "195:     int valid;",
          "196:     int references;",
          "197:     char *name;",
          "",
          "[Removed Lines]",
          "194:     ASN1_BIT_STRING *signature;",
          "",
          "[Added Lines]",
          "194:     ASN1_BIT_STRING signature;",
          "",
          "---------------"
        ],
        "crypto/x509/t_x509.c||crypto/x509/t_x509.c": [
          "File: crypto/x509/t_x509.c -> crypto/x509/t_x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:                                 ci->extensions, cflag, 8);",
          "240:     if (!(cflag & X509_FLAG_NO_SIGDUMP)) {",
          "242:             goto err;",
          "243:     }",
          "244:     if (!(cflag & X509_FLAG_NO_AUX)) {",
          "",
          "[Removed Lines]",
          "241:         if (X509_signature_print(bp, &x->sig_alg, x->signature) <= 0)",
          "",
          "[Added Lines]",
          "241:         if (X509_signature_print(bp, &x->sig_alg, &x->signature) <= 0)",
          "",
          "---------------"
        ],
        "crypto/x509/x509_cmp.c||crypto/x509/x509_cmp.c": [
          "File: crypto/x509/x509_cmp.c -> crypto/x509/x509_cmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     ai = &a->cert_info;",
          "74:     bi = &b->cert_info;",
          "76:     if (i)",
          "77:         return (i);",
          "78:     return (X509_NAME_cmp(ai->issuer, bi->issuer));",
          "",
          "[Removed Lines]",
          "75:     i = ASN1_INTEGER_cmp(ai->serialNumber, bi->serialNumber);",
          "",
          "[Added Lines]",
          "75:     i = ASN1_INTEGER_cmp(&ai->serialNumber, &bi->serialNumber);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:         goto err;",
          "95:     OPENSSL_free(f);",
          "96:     if (!EVP_DigestUpdate",
          "99:         goto err;",
          "100:     if (!EVP_DigestFinal_ex(&ctx, &(md[0]), NULL))",
          "101:         goto err;",
          "",
          "[Removed Lines]",
          "97:         (&ctx, (unsigned char *)a->cert_info.serialNumber->data,",
          "98:          (unsigned long)a->cert_info.serialNumber->length))",
          "",
          "[Added Lines]",
          "97:         (&ctx, (unsigned char *)a->cert_info.serialNumber.data,",
          "98:          (unsigned long)a->cert_info.serialNumber.length))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "153: ASN1_INTEGER *X509_get_serialNumber(X509 *a)",
          "154: {",
          "156: }",
          "158: unsigned long X509_subject_name_hash(X509 *x)",
          "",
          "[Removed Lines]",
          "155:     return (a->cert_info.serialNumber);",
          "",
          "[Added Lines]",
          "155:     return &a->cert_info.serialNumber;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "278:     if (!sk)",
          "279:         return NULL;",
          "282:     x.cert_info.issuer = name;",
          "284:     for (i = 0; i < sk_X509_num(sk); i++) {",
          "",
          "[Removed Lines]",
          "281:     x.cert_info.serialNumber = serial;",
          "",
          "[Added Lines]",
          "281:     x.cert_info.serialNumber = *serial;",
          "",
          "---------------"
        ],
        "crypto/x509/x509_set.c||crypto/x509/x509_set.c": [
          "File: crypto/x509/x509_set.c -> crypto/x509/x509_set.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     ASN1_INTEGER *in;",
          "87:     if (x == NULL)",
          "98: }",
          "100: int X509_set_issuer_name(X509 *x, X509_NAME *name)",
          "",
          "[Removed Lines]",
          "88:         return (0);",
          "89:     in = x->cert_info.serialNumber;",
          "90:     if (in != serial) {",
          "91:         in = ASN1_INTEGER_dup(serial);",
          "92:         if (in != NULL) {",
          "93:             ASN1_INTEGER_free(x->cert_info.serialNumber);",
          "94:             x->cert_info.serialNumber = in;",
          "95:         }",
          "96:     }",
          "97:     return (in != NULL);",
          "",
          "[Added Lines]",
          "88:         return 0;",
          "89:     in = &x->cert_info.serialNumber;",
          "90:     if (in != serial)",
          "91:         return ASN1_STRING_copy(in, serial);",
          "92:     return 1;",
          "",
          "---------------"
        ],
        "crypto/x509/x_all.c||crypto/x509/x_all.c": [
          "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     if (X509_ALGOR_cmp(&a->sig_alg, &a->cert_info.signature))",
          "78:         return 0;",
          "79:     return (ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF), &a->sig_alg,",
          "81: }",
          "83: int X509_REQ_verify(X509_REQ *a, EVP_PKEY *r)",
          "",
          "[Removed Lines]",
          "80:                              a->signature, &a->cert_info, r));",
          "",
          "[Added Lines]",
          "80:                              &a->signature, &a->cert_info, r));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: {",
          "97:     x->cert_info.enc.modified = 1;",
          "98:     return (ASN1_item_sign(ASN1_ITEM_rptr(X509_CINF), &x->cert_info.signature,",
          "100: }",
          "102: int X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx)",
          "",
          "[Removed Lines]",
          "99:                            &x->sig_alg, x->signature, &x->cert_info, pkey, md));",
          "",
          "[Added Lines]",
          "99:                            &x->sig_alg, &x->signature, &x->cert_info, pkey,",
          "100:                            md));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:     x->cert_info.enc.modified = 1;",
          "105:     return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_CINF),",
          "106:                               &x->cert_info.signature,",
          "108: }",
          "110: int X509_http_nbio(OCSP_REQ_CTX *rctx, X509 **pcert)",
          "",
          "[Removed Lines]",
          "107:                               &x->sig_alg, x->signature, &x->cert_info, ctx);",
          "",
          "[Added Lines]",
          "108:                               &x->sig_alg, &x->signature, &x->cert_info, ctx);",
          "",
          "---------------"
        ],
        "crypto/x509/x_x509.c||crypto/x509/x_x509.c": [
          "File: crypto/x509/x_x509.c -> crypto/x509/x_x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: ASN1_SEQUENCE_enc(X509_CINF, enc, 0) = {",
          "68:         ASN1_EXP_OPT(X509_CINF, version, ASN1_INTEGER, 0),",
          "70:         ASN1_EMBED(X509_CINF, signature, X509_ALGOR),",
          "71:         ASN1_SIMPLE(X509_CINF, issuer, X509_NAME),",
          "72:         ASN1_EMBED(X509_CINF, validity, X509_VAL),",
          "",
          "[Removed Lines]",
          "69:         ASN1_SIMPLE(X509_CINF, serialNumber, ASN1_INTEGER),",
          "",
          "[Added Lines]",
          "69:         ASN1_EMBED(X509_CINF, serialNumber, ASN1_INTEGER),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135: ASN1_SEQUENCE_ref(X509, x509_cb, CRYPTO_LOCK_X509) = {",
          "136:         ASN1_EMBED(X509, cert_info, X509_CINF),",
          "137:         ASN1_EMBED(X509, sig_alg, X509_ALGOR),",
          "139: } ASN1_SEQUENCE_END_ref(X509, X509)",
          "141: IMPLEMENT_ASN1_FUNCTIONS(X509)",
          "",
          "[Removed Lines]",
          "138:         ASN1_SIMPLE(X509, signature, ASN1_BIT_STRING)",
          "",
          "[Added Lines]",
          "138:         ASN1_EMBED(X509, signature, ASN1_BIT_STRING)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5cf6abd805b9f15127f9f343a6e3b662565f93d5",
      "candidate_info": {
        "commit_hash": "5cf6abd805b9f15127f9f343a6e3b662565f93d5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5cf6abd805b9f15127f9f343a6e3b662565f93d5",
        "files": [
          "crypto/asn1/t_x509.c",
          "crypto/asn1/x_x509.c",
          "crypto/x509/by_dir.c",
          "crypto/x509/x509_cmp.c",
          "crypto/x509/x509_ext.c",
          "crypto/x509/x509_lu.c",
          "crypto/x509/x509_r2x.c",
          "crypto/x509/x509_set.c",
          "crypto/x509/x_all.c",
          "crypto/x509v3/v3_conf.c",
          "crypto/x509v3/v3_skey.c",
          "include/openssl/x509.h"
        ],
        "message": "Embed X509_CINF\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/t_x509.c||crypto/asn1/t_x509.c",
          "crypto/asn1/x_x509.c||crypto/asn1/x_x509.c",
          "crypto/x509/by_dir.c||crypto/x509/by_dir.c",
          "crypto/x509/x509_cmp.c||crypto/x509/x509_cmp.c",
          "crypto/x509/x509_ext.c||crypto/x509/x509_ext.c",
          "crypto/x509/x509_lu.c||crypto/x509/x509_lu.c",
          "crypto/x509/x509_r2x.c||crypto/x509/x509_r2x.c",
          "crypto/x509/x509_set.c||crypto/x509/x509_set.c",
          "crypto/x509/x_all.c||crypto/x509/x_all.c",
          "crypto/x509v3/v3_conf.c||crypto/x509v3/v3_conf.c",
          "crypto/x509v3/v3_skey.c||crypto/x509v3/v3_skey.c",
          "include/openssl/x509.h||include/openssl/x509.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/x509/x_all.c||crypto/x509/x_all.c"
          ],
          "candidate": [
            "crypto/x509/x_all.c||crypto/x509/x_all.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/t_x509.c||crypto/asn1/t_x509.c": [
          "File: crypto/asn1/t_x509.c -> crypto/asn1/t_x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     if (nmflags == X509_FLAG_COMPAT)",
          "123:         nmindent = 16;",
          "126:     if (!(cflag & X509_FLAG_NO_HEADER)) {",
          "127:         if (BIO_write(bp, \"Certificate:\\n\", 13) <= 0)",
          "128:             goto err;",
          "",
          "[Removed Lines]",
          "125:     ci = x->cert_info;",
          "",
          "[Added Lines]",
          "125:     ci = &x->cert_info;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:     if (BIO_printf(bp, \"        Subject OCSP hash: \") <= 0)",
          "274:         goto err;",
          "276:     if ((der = dertmp = OPENSSL_malloc(derlen)) == NULL)",
          "277:         goto err;",
          "280:     if (!EVP_Digest(der, derlen, SHA1md, NULL, EVP_sha1(), NULL))",
          "281:         goto err;",
          "",
          "[Removed Lines]",
          "275:     derlen = i2d_X509_NAME(x->cert_info->subject, NULL);",
          "278:     i2d_X509_NAME(x->cert_info->subject, &dertmp);",
          "",
          "[Added Lines]",
          "275:     derlen = i2d_X509_NAME(x->cert_info.subject, NULL);",
          "278:     i2d_X509_NAME(x->cert_info.subject, &dertmp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "292:     if (BIO_printf(bp, \"\\n        Public key OCSP hash: \") <= 0)",
          "293:         goto err;",
          "297:                     SHA1md, NULL, EVP_sha1(), NULL))",
          "298:         goto err;",
          "299:     for (i = 0; i < SHA_DIGEST_LENGTH; i++) {",
          "",
          "[Removed Lines]",
          "295:     if (!EVP_Digest(x->cert_info->key->public_key->data,",
          "296:                     x->cert_info->key->public_key->length,",
          "",
          "[Added Lines]",
          "295:     if (!EVP_Digest(x->cert_info.key->public_key->data,",
          "296:                     x->cert_info.key->public_key->length,",
          "",
          "---------------"
        ],
        "crypto/asn1/x_x509.c||crypto/asn1/x_x509.c": [
          "File: crypto/asn1/x_x509.c -> crypto/asn1/x_x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     case ASN1_OP_D2I_POST:",
          "108:         OPENSSL_free(ret->name);",
          "110:         break;",
          "112:     case ASN1_OP_FREE_POST:",
          "",
          "[Removed Lines]",
          "109:         ret->name = X509_NAME_oneline(ret->cert_info->subject, NULL, 0);",
          "",
          "[Added Lines]",
          "109:         ret->name = X509_NAME_oneline(ret->cert_info.subject, NULL, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132: }",
          "134: ASN1_SEQUENCE_ref(X509, x509_cb, CRYPTO_LOCK_X509) = {",
          "136:         ASN1_SIMPLE(X509, sig_alg, X509_ALGOR),",
          "137:         ASN1_SIMPLE(X509, signature, ASN1_BIT_STRING)",
          "138: } ASN1_SEQUENCE_END_ref(X509, X509)",
          "",
          "[Removed Lines]",
          "135:         ASN1_SIMPLE(X509, cert_info, X509_CINF),",
          "",
          "[Added Lines]",
          "135:         ASN1_EMBED(X509, cert_info, X509_CINF),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210: int i2d_re_X509_tbs(X509 *x, unsigned char **pp)",
          "211: {",
          "214: }",
          "216: void X509_get0_signature(ASN1_BIT_STRING **psig, X509_ALGOR **palg,",
          "",
          "[Removed Lines]",
          "212:     x->cert_info->enc.modified = 1;",
          "213:     return i2d_X509_CINF(x->cert_info, pp);",
          "",
          "[Added Lines]",
          "212:     x->cert_info.enc.modified = 1;",
          "213:     return i2d_X509_CINF(&x->cert_info, pp);",
          "",
          "---------------"
        ],
        "crypto/x509/by_dir.c||crypto/x509/by_dir.c": [
          "File: crypto/x509/by_dir.c -> crypto/x509/by_dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253: {",
          "254:     BY_DIR *ctx;",
          "255:     union {",
          "260:         X509_CRL crl;",
          "261:     } data;",
          "262:     int ok = 0;",
          "",
          "[Removed Lines]",
          "256:         struct {",
          "257:             X509 st_x509;",
          "258:             X509_CINF st_x509_cinf;",
          "259:         } x509;",
          "",
          "[Added Lines]",
          "256:         X509 st_x509;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:     stmp.type = type;",
          "273:     if (type == X509_LU_X509) {",
          "277:         postfix = \"\";",
          "278:     } else if (type == X509_LU_CRL) {",
          "279:         data.crl.crl.issuer = name;",
          "",
          "[Removed Lines]",
          "274:         data.x509.st_x509.cert_info = &data.x509.st_x509_cinf;",
          "275:         data.x509.st_x509_cinf.subject = name;",
          "276:         stmp.data.x509 = &data.x509.st_x509;",
          "",
          "[Added Lines]",
          "271:         data.st_x509.cert_info.subject = name;",
          "272:         stmp.data.x509 = &data.st_x509;",
          "",
          "---------------"
        ],
        "crypto/x509/x509_cmp.c||crypto/x509/x509_cmp.c": [
          "File: crypto/x509/x509_cmp.c -> crypto/x509/x509_cmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: int X509_issuer_and_serial_cmp(const X509 *a, const X509 *b)",
          "69: {",
          "70:     int i;",
          "75:     i = ASN1_INTEGER_cmp(ai->serialNumber, bi->serialNumber);",
          "76:     if (i)",
          "77:         return (i);",
          "",
          "[Removed Lines]",
          "71:     X509_CINF *ai, *bi;",
          "73:     ai = a->cert_info;",
          "74:     bi = b->cert_info;",
          "",
          "[Added Lines]",
          "71:     const X509_CINF *ai, *bi;",
          "73:     ai = &a->cert_info;",
          "74:     bi = &b->cert_info;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:     char *f;",
          "89:     EVP_MD_CTX_init(&ctx);",
          "91:     if (!EVP_DigestInit_ex(&ctx, EVP_md5(), NULL))",
          "92:         goto err;",
          "93:     if (!EVP_DigestUpdate(&ctx, (unsigned char *)f, strlen(f)))",
          "94:         goto err;",
          "95:     OPENSSL_free(f);",
          "96:     if (!EVP_DigestUpdate",
          "99:         goto err;",
          "100:     if (!EVP_DigestFinal_ex(&ctx, &(md[0]), NULL))",
          "101:         goto err;",
          "",
          "[Removed Lines]",
          "90:     f = X509_NAME_oneline(a->cert_info->issuer, NULL, 0);",
          "97:         (&ctx, (unsigned char *)a->cert_info->serialNumber->data,",
          "98:          (unsigned long)a->cert_info->serialNumber->length))",
          "",
          "[Added Lines]",
          "90:     f = X509_NAME_oneline(a->cert_info.issuer, NULL, 0);",
          "97:         (&ctx, (unsigned char *)a->cert_info.serialNumber->data,",
          "98:          (unsigned long)a->cert_info.serialNumber->length))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111: int X509_issuer_name_cmp(const X509 *a, const X509 *b)",
          "112: {",
          "114: }",
          "116: int X509_subject_name_cmp(const X509 *a, const X509 *b)",
          "117: {",
          "119: }",
          "121: int X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b)",
          "",
          "[Removed Lines]",
          "113:     return (X509_NAME_cmp(a->cert_info->issuer, b->cert_info->issuer));",
          "118:     return (X509_NAME_cmp(a->cert_info->subject, b->cert_info->subject));",
          "",
          "[Added Lines]",
          "113:     return (X509_NAME_cmp(a->cert_info.issuer, b->cert_info.issuer));",
          "118:     return (X509_NAME_cmp(a->cert_info.subject, b->cert_info.subject));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131: X509_NAME *X509_get_issuer_name(X509 *a)",
          "132: {",
          "134: }",
          "136: unsigned long X509_issuer_name_hash(X509 *x)",
          "137: {",
          "139: }",
          "141: #ifndef OPENSSL_NO_MD5",
          "142: unsigned long X509_issuer_name_hash_old(X509 *x)",
          "143: {",
          "145: }",
          "146: #endif",
          "148: X509_NAME *X509_get_subject_name(X509 *a)",
          "149: {",
          "151: }",
          "153: ASN1_INTEGER *X509_get_serialNumber(X509 *a)",
          "154: {",
          "156: }",
          "158: unsigned long X509_subject_name_hash(X509 *x)",
          "159: {",
          "161: }",
          "163: #ifndef OPENSSL_NO_MD5",
          "164: unsigned long X509_subject_name_hash_old(X509 *x)",
          "165: {",
          "167: }",
          "168: #endif",
          "",
          "[Removed Lines]",
          "133:     return (a->cert_info->issuer);",
          "138:     return (X509_NAME_hash(x->cert_info->issuer));",
          "144:     return (X509_NAME_hash_old(x->cert_info->issuer));",
          "150:     return (a->cert_info->subject);",
          "155:     return (a->cert_info->serialNumber);",
          "160:     return (X509_NAME_hash(x->cert_info->subject));",
          "166:     return (X509_NAME_hash_old(x->cert_info->subject));",
          "",
          "[Added Lines]",
          "133:     return (a->cert_info.issuer);",
          "138:     return (X509_NAME_hash(x->cert_info.issuer));",
          "144:     return (X509_NAME_hash_old(x->cert_info.issuer));",
          "150:     return (a->cert_info.subject);",
          "155:     return (a->cert_info.serialNumber);",
          "160:     return (X509_NAME_hash(x->cert_info.subject));",
          "166:     return (X509_NAME_hash_old(x->cert_info.subject));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "186:     if (rv)",
          "187:         return rv;",
          "191:         if (rv)",
          "192:             return rv;",
          "195:     }",
          "196:     return rv;",
          "197: }",
          "",
          "[Removed Lines]",
          "189:     if (!a->cert_info->enc.modified && !b->cert_info->enc.modified) {",
          "190:         rv = (int)(a->cert_info->enc.len - b->cert_info->enc.len);",
          "193:         return memcmp(a->cert_info->enc.enc, b->cert_info->enc.enc,",
          "194:                       a->cert_info->enc.len);",
          "",
          "[Added Lines]",
          "189:     if (!a->cert_info.enc.modified && !b->cert_info.enc.modified) {",
          "190:         rv = (int)(a->cert_info.enc.len - b->cert_info.enc.len);",
          "193:         return memcmp(a->cert_info.enc.enc, b->cert_info.enc.enc,",
          "194:                       a->cert_info.enc.len);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "273:                                      ASN1_INTEGER *serial)",
          "274: {",
          "275:     int i;",
          "277:     X509 x, *x509 = NULL;",
          "279:     if (!sk)",
          "280:         return NULL;",
          "286:     for (i = 0; i < sk_X509_num(sk); i++) {",
          "287:         x509 = sk_X509_value(sk, i);",
          "",
          "[Removed Lines]",
          "276:     X509_CINF cinf;",
          "282:     x.cert_info = &cinf;",
          "283:     cinf.serialNumber = serial;",
          "284:     cinf.issuer = name;",
          "",
          "[Added Lines]",
          "281:     x.cert_info.serialNumber = serial;",
          "282:     x.cert_info.issuer = name;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "307: EVP_PKEY *X509_get_pubkey(X509 *x)",
          "308: {",
          "310:         return (NULL);",
          "312: }",
          "314: ASN1_BIT_STRING *X509_get0_pubkey_bitstr(const X509 *x)",
          "315: {",
          "316:     if (!x)",
          "317:         return NULL;",
          "319: }",
          "321: int X509_check_private_key(X509 *x, EVP_PKEY *k)",
          "",
          "[Removed Lines]",
          "309:     if ((x == NULL) || (x->cert_info == NULL))",
          "311:     return (X509_PUBKEY_get(x->cert_info->key));",
          "318:     return x->cert_info->key->public_key;",
          "",
          "[Added Lines]",
          "307:     if (x == NULL)",
          "309:     return (X509_PUBKEY_get(x->cert_info.key));",
          "316:     return x->cert_info.key->public_key;",
          "",
          "---------------"
        ],
        "crypto/x509/x509_ext.c||crypto/x509/x509_ext.c": [
          "File: crypto/x509/x509_ext.c -> crypto/x509/x509_ext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: int X509_get_ext_count(X509 *x)",
          "116: {",
          "118: }",
          "120: int X509_get_ext_by_NID(X509 *x, int nid, int lastpos)",
          "121: {",
          "123: }",
          "125: int X509_get_ext_by_OBJ(X509 *x, ASN1_OBJECT *obj, int lastpos)",
          "126: {",
          "128: }",
          "130: int X509_get_ext_by_critical(X509 *x, int crit, int lastpos)",
          "131: {",
          "132:     return (X509v3_get_ext_by_critical",
          "134: }",
          "136: X509_EXTENSION *X509_get_ext(X509 *x, int loc)",
          "137: {",
          "139: }",
          "141: X509_EXTENSION *X509_delete_ext(X509 *x, int loc)",
          "142: {",
          "144: }",
          "146: int X509_add_ext(X509 *x, X509_EXTENSION *ex, int loc)",
          "147: {",
          "149: }",
          "151: void *X509_get_ext_d2i(X509 *x, int nid, int *crit, int *idx)",
          "152: {",
          "154: }",
          "156: int X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit,",
          "157:                       unsigned long flags)",
          "158: {",
          "160:                            flags);",
          "161: }",
          "",
          "[Removed Lines]",
          "117:     return (X509v3_get_ext_count(x->cert_info->extensions));",
          "122:     return (X509v3_get_ext_by_NID(x->cert_info->extensions, nid, lastpos));",
          "127:     return (X509v3_get_ext_by_OBJ(x->cert_info->extensions, obj, lastpos));",
          "133:             (x->cert_info->extensions, crit, lastpos));",
          "138:     return (X509v3_get_ext(x->cert_info->extensions, loc));",
          "143:     return (X509v3_delete_ext(x->cert_info->extensions, loc));",
          "148:     return (X509v3_add_ext(&(x->cert_info->extensions), ex, loc) != NULL);",
          "153:     return X509V3_get_d2i(x->cert_info->extensions, nid, crit, idx);",
          "159:     return X509V3_add1_i2d(&x->cert_info->extensions, nid, value, crit,",
          "",
          "[Added Lines]",
          "117:     return (X509v3_get_ext_count(x->cert_info.extensions));",
          "122:     return (X509v3_get_ext_by_NID(x->cert_info.extensions, nid, lastpos));",
          "127:     return (X509v3_get_ext_by_OBJ(x->cert_info.extensions, obj, lastpos));",
          "133:             (x->cert_info.extensions, crit, lastpos));",
          "138:     return (X509v3_get_ext(x->cert_info.extensions, loc));",
          "143:     return (X509v3_delete_ext(x->cert_info.extensions, loc));",
          "148:     return (X509v3_add_ext(&(x->cert_info.extensions), ex, loc) != NULL);",
          "153:     return X509V3_get_d2i(x->cert_info.extensions, nid, crit, idx);",
          "159:     return X509V3_add1_i2d(&x->cert_info.extensions, nid, value, crit,",
          "",
          "---------------"
        ],
        "crypto/x509/x509_lu.c||crypto/x509/x509_lu.c": [
          "File: crypto/x509/x509_lu.c -> crypto/x509/x509_lu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "420: {",
          "421:     X509_OBJECT stmp;",
          "422:     X509 x509_s;",
          "424:     X509_CRL crl_s;",
          "425:     int idx;",
          "",
          "[Removed Lines]",
          "423:     X509_CINF cinf_s;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "428:     switch (type) {",
          "429:     case X509_LU_X509:",
          "430:         stmp.data.x509 = &x509_s;",
          "433:         break;",
          "434:     case X509_LU_CRL:",
          "435:         stmp.data.crl = &crl_s;",
          "",
          "[Removed Lines]",
          "431:         x509_s.cert_info = &cinf_s;",
          "432:         cinf_s.subject = name;",
          "",
          "[Added Lines]",
          "430:         x509_s.cert_info.subject = name;",
          "",
          "---------------"
        ],
        "crypto/x509/x509_r2x.c||crypto/x509/x509_r2x.c": [
          "File: crypto/x509/x509_r2x.c -> crypto/x509/x509_r2x.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     }",
          "83:     if (sk_X509_ATTRIBUTE_num(r->req_info->attributes) != 0) {",
          "84:         if ((xi->version = ASN1_INTEGER_new()) == NULL)",
          "",
          "[Removed Lines]",
          "81:     xi = ret->cert_info;",
          "",
          "[Added Lines]",
          "81:     xi = &ret->cert_info;",
          "",
          "---------------"
        ],
        "crypto/x509/x509_set.c||crypto/x509/x509_set.c": [
          "File: crypto/x509/x509_set.c -> crypto/x509/x509_set.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     if (x == NULL)",
          "69:         return (0);",
          "70:     if (version == 0) {",
          "73:         return (1);",
          "74:     }",
          "77:             return (0);",
          "78:     }",
          "80: }",
          "82: int X509_set_serialNumber(X509 *x, ASN1_INTEGER *serial)",
          "",
          "[Removed Lines]",
          "71:         ASN1_INTEGER_free(x->cert_info->version);",
          "72:         x->cert_info->version = NULL;",
          "75:     if (x->cert_info->version == NULL) {",
          "76:         if ((x->cert_info->version = ASN1_INTEGER_new()) == NULL)",
          "79:     return (ASN1_INTEGER_set(x->cert_info->version, version));",
          "",
          "[Added Lines]",
          "71:         ASN1_INTEGER_free(x->cert_info.version);",
          "72:         x->cert_info.version = NULL;",
          "75:     if (x->cert_info.version == NULL) {",
          "76:         if ((x->cert_info.version = ASN1_INTEGER_new()) == NULL)",
          "79:     return (ASN1_INTEGER_set(x->cert_info.version, version));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     if (x == NULL)",
          "87:         return (0);",
          "89:     if (in != serial) {",
          "90:         in = ASN1_INTEGER_dup(serial);",
          "91:         if (in != NULL) {",
          "94:         }",
          "95:     }",
          "96:     return (in != NULL);",
          "",
          "[Removed Lines]",
          "88:     in = x->cert_info->serialNumber;",
          "92:             ASN1_INTEGER_free(x->cert_info->serialNumber);",
          "93:             x->cert_info->serialNumber = in;",
          "",
          "[Added Lines]",
          "88:     in = x->cert_info.serialNumber;",
          "92:             ASN1_INTEGER_free(x->cert_info.serialNumber);",
          "93:             x->cert_info.serialNumber = in;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99: int X509_set_issuer_name(X509 *x, X509_NAME *name)",
          "100: {",
          "102:         return (0);",
          "104: }",
          "106: int X509_set_subject_name(X509 *x, X509_NAME *name)",
          "107: {",
          "109:         return (0);",
          "111: }",
          "113: int X509_set_notBefore(X509 *x, const ASN1_TIME *tm)",
          "",
          "[Removed Lines]",
          "101:     if ((x == NULL) || (x->cert_info == NULL))",
          "103:     return (X509_NAME_set(&x->cert_info->issuer, name));",
          "108:     if ((x == NULL) || (x->cert_info == NULL))",
          "110:     return (X509_NAME_set(&x->cert_info->subject, name));",
          "",
          "[Added Lines]",
          "101:     if (x == NULL)",
          "103:     return (X509_NAME_set(&x->cert_info.issuer, name));",
          "108:     if (x == NULL)",
          "110:     return (X509_NAME_set(&x->cert_info.subject, name));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:     if (x == NULL)",
          "118:         return (0);",
          "120:     if (in != tm) {",
          "121:         in = ASN1_STRING_dup(tm);",
          "122:         if (in != NULL) {",
          "125:         }",
          "126:     }",
          "127:     return (in != NULL);",
          "",
          "[Removed Lines]",
          "119:     in = x->cert_info->validity.notBefore;",
          "123:             ASN1_TIME_free(x->cert_info->validity.notBefore);",
          "124:             x->cert_info->validity.notBefore = in;",
          "",
          "[Added Lines]",
          "119:     in = x->cert_info.validity.notBefore;",
          "123:             ASN1_TIME_free(x->cert_info.validity.notBefore);",
          "124:             x->cert_info.validity.notBefore = in;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:     if (x == NULL)",
          "135:         return (0);",
          "137:     if (in != tm) {",
          "138:         in = ASN1_STRING_dup(tm);",
          "139:         if (in != NULL) {",
          "142:         }",
          "143:     }",
          "144:     return (in != NULL);",
          "",
          "[Removed Lines]",
          "136:     in = x->cert_info->validity.notAfter;",
          "140:             ASN1_TIME_free(x->cert_info->validity.notAfter);",
          "141:             x->cert_info->validity.notAfter = in;",
          "",
          "[Added Lines]",
          "136:     in = x->cert_info.validity.notAfter;",
          "140:             ASN1_TIME_free(x->cert_info.validity.notAfter);",
          "141:             x->cert_info.validity.notAfter = in;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "147: int X509_set_pubkey(X509 *x, EVP_PKEY *pkey)",
          "148: {",
          "150:         return (0);",
          "152: }",
          "154: void X509_up_ref(X509 *x)",
          "",
          "[Removed Lines]",
          "149:     if ((x == NULL) || (x->cert_info == NULL))",
          "151:     return (X509_PUBKEY_set(&(x->cert_info->key), pkey));",
          "",
          "[Added Lines]",
          "149:     if (x == NULL)",
          "151:     return (X509_PUBKEY_set(&(x->cert_info.key), pkey));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "159: long X509_get_version(X509 *x)",
          "160: {",
          "162: }",
          "164: ASN1_TIME * X509_get_notBefore(X509 *x)",
          "165: {",
          "167: }",
          "169: ASN1_TIME *X509_get_notAfter(X509 *x)",
          "170: {",
          "172: }",
          "174: int X509_get_signature_type(const X509 *x)",
          "",
          "[Removed Lines]",
          "161:     return ASN1_INTEGER_get(x->cert_info->version);",
          "166:     return x->cert_info->validity.notBefore;",
          "171:     return x->cert_info->validity.notAfter;",
          "",
          "[Added Lines]",
          "161:     return ASN1_INTEGER_get(x->cert_info.version);",
          "166:     return x->cert_info.validity.notBefore;",
          "171:     return x->cert_info.validity.notAfter;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "179: X509_PUBKEY *X509_get_X509_PUBKEY(const X509 *x)",
          "180: {",
          "182: }",
          "",
          "[Removed Lines]",
          "181:     return x->cert_info->key;",
          "",
          "[Added Lines]",
          "181:     return x->cert_info.key;",
          "",
          "---------------"
        ],
        "crypto/x509/x_all.c||crypto/x509/x_all.c": [
          "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: int X509_verify(X509 *a, EVP_PKEY *r)",
          "76: {",
          "78:         return 0;",
          "79:     return (ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF), a->sig_alg,",
          "81: }",
          "83: int X509_REQ_verify(X509_REQ *a, EVP_PKEY *r)",
          "",
          "[Removed Lines]",
          "77:     if (X509_ALGOR_cmp(a->sig_alg, a->cert_info->signature))",
          "80:                              a->signature, a->cert_info, r));",
          "",
          "[Added Lines]",
          "77:     if (X509_ALGOR_cmp(a->sig_alg, a->cert_info.signature))",
          "80:                              a->signature, &a->cert_info, r));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95: int X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)",
          "96: {",
          "100: }",
          "102: int X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx)",
          "103: {",
          "105:     return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_CINF),",
          "108: }",
          "110: int X509_http_nbio(OCSP_REQ_CTX *rctx, X509 **pcert)",
          "",
          "[Removed Lines]",
          "97:     x->cert_info->enc.modified = 1;",
          "98:     return (ASN1_item_sign(ASN1_ITEM_rptr(X509_CINF), x->cert_info->signature,",
          "99:                            x->sig_alg, x->signature, x->cert_info, pkey, md));",
          "104:     x->cert_info->enc.modified = 1;",
          "106:                               x->cert_info->signature,",
          "107:                               x->sig_alg, x->signature, x->cert_info, ctx);",
          "",
          "[Added Lines]",
          "97:     x->cert_info.enc.modified = 1;",
          "98:     return (ASN1_item_sign(ASN1_ITEM_rptr(X509_CINF), x->cert_info.signature,",
          "99:                            x->sig_alg, x->signature, &x->cert_info, pkey, md));",
          "104:     x->cert_info.enc.modified = 1;",
          "106:                               x->cert_info.signature,",
          "107:                               x->sig_alg, x->signature, &x->cert_info, ctx);",
          "",
          "---------------"
        ],
        "crypto/x509v3/v3_conf.c||crypto/x509v3/v3_conf.c": [
          "File: crypto/x509v3/v3_conf.c -> crypto/x509v3/v3_conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "376: {",
          "377:     STACK_OF(X509_EXTENSION) **sk = NULL;",
          "378:     if (cert)",
          "380:     return X509V3_EXT_add_nconf_sk(conf, ctx, section, sk);",
          "381: }",
          "",
          "[Removed Lines]",
          "379:         sk = &cert->cert_info->extensions;",
          "",
          "[Added Lines]",
          "379:         sk = &cert->cert_info.extensions;",
          "",
          "---------------"
        ],
        "crypto/x509v3/v3_skey.c||crypto/x509v3/v3_skey.c": [
          "File: crypto/x509v3/v3_skey.c -> crypto/x509v3/v3_skey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:     if (ctx->subject_req)",
          "129:         pk = ctx->subject_req->req_info->pubkey->public_key;",
          "130:     else",
          "133:     if (!pk) {",
          "134:         X509V3err(X509V3_F_S2I_SKEY_ID, X509V3_R_NO_PUBLIC_KEY);",
          "",
          "[Removed Lines]",
          "131:         pk = ctx->subject_cert->cert_info->key->public_key;",
          "",
          "[Added Lines]",
          "131:         pk = ctx->subject_cert->cert_info.key->public_key;",
          "",
          "---------------"
        ],
        "include/openssl/x509.h||include/openssl/x509.h": [
          "File: include/openssl/x509.h -> include/openssl/x509.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "181: typedef struct x509_cert_aux_st X509_CERT_AUX;",
          "183: struct x509_st {",
          "185:     X509_ALGOR *sig_alg;",
          "186:     ASN1_BIT_STRING *signature;",
          "187:     int valid;",
          "",
          "[Removed Lines]",
          "184:     X509_CINF *cert_info;",
          "",
          "[Added Lines]",
          "184:     X509_CINF cert_info;",
          "",
          "---------------"
        ]
      }
    }
  ]
}