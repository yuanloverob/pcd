{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ac4085bc2c018c430c3f7d5bd21a5ad6bb64eabb",
      "candidate_info": {
        "commit_hash": "ac4085bc2c018c430c3f7d5bd21a5ad6bb64eabb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ac4085bc2c018c430c3f7d5bd21a5ad6bb64eabb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/view.test"
        ],
        "message": "Fix a problem where self-joins on views that are aggregate queries may return the wrong result.\n\nFossilOrigin-Name: 74ef97bf51dd531a277cf22fa4d42043d93799d5a5bd550812648834460fe0b7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/view.test||test/view.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9b5d943426c9273162ecb4c561eb3b25e843318dd438239c882c9db50f788454",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5482:       continue;",
          "5483:     }",
          "5487:       continue;",
          "",
          "[Removed Lines]",
          "5484:     if( sqlite3ExprCompare(0, pThis->pSelect->pWhere, pS1->pWhere, -1) ){",
          "",
          "[Added Lines]",
          "5484:     if( sqlite3ExprCompare(0, pThis->pSelect->pWhere, pS1->pWhere, -1)",
          "5485:      || sqlite3ExprCompare(0, pThis->pSelect->pHaving, pS1->pHaving, -1)",
          "5486:     ){",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "701:   set log",
          "702: } $res",
          "704: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704: #-------------------------------------------------------------------------",
          "705: do_execsql_test view-26.0 {",
          "706:   CREATE TABLE t16(a, b, c UNIQUE);",
          "707:   INSERT INTO t16 VALUES(1, 1, 1);",
          "708:   INSERT INTO t16 VALUES(2, 2, 2);",
          "709:   INSERT INTO t16 VALUES(3, 3, 3);",
          "710:   CREATE VIEW v16 AS SELECT max(a) AS mx, min(b) AS mn FROM t16 GROUP BY c;",
          "712:   SELECT * FROM v16 AS one, v16 AS two WHERE one.mx=1;",
          "713: } {",
          "714:   1 1 1 1",
          "715:   1 1 2 2",
          "716:   1 1 3 3",
          "717: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "945a3527d5edd76dbb2dd0839434caf2d9c06024",
      "candidate_info": {
        "commit_hash": "945a3527d5edd76dbb2dd0839434caf2d9c06024",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/945a3527d5edd76dbb2dd0839434caf2d9c06024",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5faultB.test",
          "ext/fts5/test/fts5multi.test",
          "ext/fts5/test/fts5plan.test",
          "ext/fts5/test/fts5simple.test",
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/test1.c",
          "src/treeview.c",
          "test/tkt-18458b1a.test",
          "test/tkt-a7debbe0.test",
          "tool/lemon.c"
        ],
        "message": "Merge latest trunk changes with this branch.\n\nFossilOrigin-Name: 14ef7543465dd14d8fa141fcceb1950b5c2d265a3e862323969d747b39c0cd8c",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5faultB.test||ext/fts5/test/fts5faultB.test",
          "ext/fts5/test/fts5multi.test||ext/fts5/test/fts5multi.test",
          "ext/fts5/test/fts5plan.test||ext/fts5/test/fts5plan.test",
          "ext/fts5/test/fts5simple.test||ext/fts5/test/fts5simple.test",
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/test1.c||src/test1.c",
          "src/treeview.c||src/treeview.c",
          "test/tkt-18458b1a.test||test/tkt-18458b1a.test",
          "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "695: i64 sqlite3Fts5ExprRowid(Fts5Expr*);",
          "697: void sqlite3Fts5ExprFree(Fts5Expr*);",
          "700: int sqlite3Fts5ExprInit(Fts5Global*, sqlite3*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "698: int sqlite3Fts5ExprAnd(Fts5Expr **pp1, Fts5Expr *p2);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:   }",
          "310: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312: int sqlite3Fts5ExprAnd(Fts5Expr **pp1, Fts5Expr *p2){",
          "313:   Fts5Parse sParse;",
          "314:   memset(&sParse, 0, sizeof(sParse));",
          "316:   if( *pp1 ){",
          "317:     Fts5Expr *p1 = *pp1;",
          "318:     int nPhrase = p1->nPhrase + p2->nPhrase;",
          "320:     p1->pRoot = sqlite3Fts5ParseNode(&sParse, FTS5_AND, p1->pRoot, p2->pRoot,0);",
          "321:     p2->pRoot = 0;",
          "323:     if( sParse.rc==SQLITE_OK ){",
          "324:       Fts5ExprPhrase **ap = (Fts5ExprPhrase**)sqlite3_realloc(",
          "325:           p1->apExprPhrase, nPhrase * sizeof(Fts5ExprPhrase*)",
          "326:       );",
          "327:       if( ap==0 ){",
          "328:         sParse.rc = SQLITE_NOMEM;",
          "329:       }else{",
          "330:         int i;",
          "331:         memmove(&ap[p2->nPhrase], ap, p1->nPhrase*sizeof(Fts5ExprPhrase*));",
          "332:         for(i=0; i<p2->nPhrase; i++){",
          "333:           ap[i] = p2->apExprPhrase[i];",
          "334:         }",
          "335:         p1->nPhrase = nPhrase;",
          "336:         p1->apExprPhrase = ap;",
          "337:       }",
          "338:     }",
          "339:     sqlite3_free(p2->apExprPhrase);",
          "340:     sqlite3_free(p2);",
          "341:   }else{",
          "343:   }",
          "345:   return sParse.rc;",
          "346: }",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "503:   Fts5Config *pConfig = pTab->pConfig;",
          "504:   const int nCol = pConfig->nCol;",
          "508:   int i;",
          "533:   assert( SQLITE_INDEX_CONSTRAINT_EQ<SQLITE_INDEX_CONSTRAINT_MATCH );",
          "534:   assert( SQLITE_INDEX_CONSTRAINT_GT<SQLITE_INDEX_CONSTRAINT_MATCH );",
          "",
          "[Removed Lines]",
          "506:   int bHasMatch;",
          "507:   int iNext;",
          "510:   struct Constraint {",
          "516:   } aConstraint[] = {",
          "517:     {SQLITE_INDEX_CONSTRAINT_MATCH|SQLITE_INDEX_CONSTRAINT_EQ,",
          "518:                                     FTS5_BI_MATCH,    1, 1, -1},",
          "519:     {SQLITE_INDEX_CONSTRAINT_MATCH|SQLITE_INDEX_CONSTRAINT_EQ,",
          "520:                                     FTS5_BI_RANK,     2, 1, -1},",
          "521:     {SQLITE_INDEX_CONSTRAINT_EQ,    FTS5_BI_ROWID_EQ, 0, 0, -1},",
          "522:     {SQLITE_INDEX_CONSTRAINT_LT|SQLITE_INDEX_CONSTRAINT_LE,",
          "523:                                     FTS5_BI_ROWID_LE, 0, 0, -1},",
          "524:     {SQLITE_INDEX_CONSTRAINT_GT|SQLITE_INDEX_CONSTRAINT_GE,",
          "525:                                     FTS5_BI_ROWID_GE, 0, 0, -1},",
          "526:   };",
          "528:   int aColMap[3];",
          "529:   aColMap[0] = -1;",
          "530:   aColMap[1] = nCol;",
          "531:   aColMap[2] = nCol+1;",
          "",
          "[Added Lines]",
          "530:   char *idxStr;",
          "531:   int iIdxStr = 0;",
          "532:   int iCons = 0;",
          "534:   int bSeenEq = 0;",
          "535:   int bSeenGt = 0;",
          "536:   int bSeenLt = 0;",
          "537:   int bSeenMatch = 0;",
          "538:   int bSeenRank = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "543:     return SQLITE_ERROR;",
          "544:   }",
          "547:   for(i=0; i<pInfo->nConstraint; i++){",
          "548:     struct sqlite3_index_constraint *p = &pInfo->aConstraint[i];",
          "549:     int iCol = p->iColumn;",
          "553:     ){",
          "561:         pInfo->estimatedCost = 1e50;",
          "562:         return SQLITE_OK;",
          "563:       }",
          "571:         }",
          "572:       }",
          "573:     }",
          "574:   }",
          "577:   if( pInfo->nOrderBy==1 ){",
          "578:     int iSort = pInfo->aOrderBy[0].iColumn;",
          "580:       idxFlags |= FTS5_BI_ORDER_RANK;",
          "581:     }else if( iSort==-1 ){",
          "582:       idxFlags |= FTS5_BI_ORDER_ROWID;",
          "",
          "[Removed Lines]",
          "551:     if( (p->op==SQLITE_INDEX_CONSTRAINT_MATCH && iCol>=0 && iCol<=nCol)",
          "552:      || (p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol==nCol)",
          "555:       if( p->usable ){",
          "556:         idxFlags = (idxFlags & 0xFFFF) | FTS5_BI_MATCH | (iCol << 16);",
          "557:         aConstraint[0].iConsIndex = i;",
          "558:       }else{",
          "564:     }else if( p->op<=SQLITE_INDEX_CONSTRAINT_MATCH ){",
          "565:       int j;",
          "566:       for(j=1; j<ArraySize(aConstraint); j++){",
          "567:         struct Constraint *pC = &aConstraint[j];",
          "568:         if( iCol==aColMap[pC->iCol] && (p->op & pC->op) && p->usable ){",
          "569:           pC->iConsIndex = i;",
          "570:           idxFlags |= pC->fts5op;",
          "579:     if( iSort==(pConfig->nCol+1) && BitFlagTest(idxFlags, FTS5_BI_MATCH) ){",
          "",
          "[Added Lines]",
          "554:   idxStr = (char*)sqlite3_malloc(pInfo->nConstraint * 6 + 1);",
          "555:   if( idxStr==0 ) return SQLITE_NOMEM;",
          "556:   pInfo->idxStr = idxStr;",
          "557:   pInfo->needToFreeIdxStr = 1;",
          "562:     if( p->op==SQLITE_INDEX_CONSTRAINT_MATCH",
          "563:      || (p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol>=nCol)",
          "566:       if( p->usable==0 || iCol<0 ){",
          "570:         assert( iIdxStr < pInfo->nConstraint*6 + 1 );",
          "571:         idxStr[iIdxStr] = 0;",
          "573:       }else{",
          "574:         if( iCol==nCol+1 ){",
          "575:           if( bSeenRank ) continue;",
          "576:           idxStr[iIdxStr++] = 'r';",
          "577:           bSeenRank = 1;",
          "578:         }else{",
          "579:           bSeenMatch = 1;",
          "580:           idxStr[iIdxStr++] = 'm';",
          "581:           if( iCol<nCol ){",
          "582:             sqlite3_snprintf(6, &idxStr[iIdxStr], \"%d\", iCol);",
          "583:             idxStr += strlen(&idxStr[iIdxStr]);",
          "584:             assert( idxStr[iIdxStr]=='\\0' );",
          "585:           }",
          "586:         }",
          "587:         pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "588:         pInfo->aConstraintUsage[i].omit = 1;",
          "590:     }",
          "591:     else if( p->usable && bSeenEq==0",
          "592:       && p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol<0",
          "593:     ){",
          "594:       idxStr[iIdxStr++] = '=';",
          "595:       bSeenEq = 1;",
          "596:       pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "597:     }",
          "598:   }",
          "600:   if( bSeenEq==0 ){",
          "601:     for(i=0; i<pInfo->nConstraint; i++){",
          "602:       struct sqlite3_index_constraint *p = &pInfo->aConstraint[i];",
          "603:       if( p->iColumn<0 && p->usable ){",
          "604:         int op = p->op;",
          "605:         if( op==SQLITE_INDEX_CONSTRAINT_LT || op==SQLITE_INDEX_CONSTRAINT_LE ){",
          "606:           if( bSeenLt ) continue;",
          "607:           idxStr[iIdxStr++] = '<';",
          "608:           pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "609:           bSeenLt = 1;",
          "610:         }else",
          "611:         if( op==SQLITE_INDEX_CONSTRAINT_GT || op==SQLITE_INDEX_CONSTRAINT_GE ){",
          "612:           if( bSeenGt ) continue;",
          "613:           idxStr[iIdxStr++] = '>';",
          "614:           pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "615:           bSeenGt = 1;",
          "620:   idxStr[iIdxStr] = '\\0';",
          "625:     if( iSort==(pConfig->nCol+1) && bSeenMatch ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "590:   }",
          "601:   }else{",
          "613:   }",
          "615:   pInfo->idxNum = idxFlags;",
          "",
          "[Removed Lines]",
          "593:   bHasMatch = BitFlagTest(idxFlags, FTS5_BI_MATCH);",
          "594:   if( BitFlagTest(idxFlags, FTS5_BI_ROWID_EQ) ){",
          "595:     pInfo->estimatedCost = bHasMatch ? 100.0 : 10.0;",
          "596:     if( bHasMatch==0 ) fts5SetUniqueFlag(pInfo);",
          "597:   }else if( BitFlagAllTest(idxFlags, FTS5_BI_ROWID_LE|FTS5_BI_ROWID_GE) ){",
          "598:     pInfo->estimatedCost = bHasMatch ? 500.0 : 250000.0;",
          "599:   }else if( BitFlagTest(idxFlags, FTS5_BI_ROWID_LE|FTS5_BI_ROWID_GE) ){",
          "600:     pInfo->estimatedCost = bHasMatch ? 750.0 : 750000.0;",
          "602:     pInfo->estimatedCost = bHasMatch ? 1000.0 : 1000000.0;",
          "603:   }",
          "606:   iNext = 1;",
          "607:   for(i=0; i<ArraySize(aConstraint); i++){",
          "608:     struct Constraint *pC = &aConstraint[i];",
          "609:     if( pC->iConsIndex>=0 ){",
          "610:       pInfo->aConstraintUsage[pC->iConsIndex].argvIndex = iNext++;",
          "611:       pInfo->aConstraintUsage[pC->iConsIndex].omit = (unsigned char)pC->omit;",
          "612:     }",
          "",
          "[Added Lines]",
          "639:   if( bSeenEq ){",
          "640:     pInfo->estimatedCost = bSeenMatch ? 100.0 : 10.0;",
          "641:     if( bSeenMatch==0 ) fts5SetUniqueFlag(pInfo);",
          "642:   }else if( bSeenLt && bSeenGt ){",
          "643:     pInfo->estimatedCost = bSeenMatch ? 500.0 : 250000.0;",
          "644:   }else if( bSeenLt || bSeenGt ){",
          "645:     pInfo->estimatedCost = bSeenMatch ? 750.0 : 750000.0;",
          "647:     pInfo->estimatedCost = bSeenMatch ? 1000.0 : 1000000.0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1140:   Fts5Config *pConfig = pTab->p.pConfig;",
          "1141:   Fts5Cursor *pCsr = (Fts5Cursor*)pCursor;",
          "1152:   char **pzErrmsg = pConfig->pzErrmsg;",
          "1157:   if( pCsr->ePlan ){",
          "1158:     fts5FreeCursorComponents(pCsr);",
          "",
          "[Removed Lines]",
          "1154:   UNUSED_PARAM(zUnused);",
          "1155:   UNUSED_PARAM(nVal);",
          "",
          "[Added Lines]",
          "1186:   int i;",
          "1187:   int iIdxStr = 0;",
          "1188:   Fts5Expr *pExpr = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1165:   assert( pCsr->pRank==0 );",
          "1166:   assert( pCsr->zRank==0 );",
          "1167:   assert( pCsr->zRankArgs==0 );",
          "1169:   assert( pzErrmsg==0 || pzErrmsg==&pTab->p.base.zErrMsg );",
          "1170:   pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "1185:   bOrderByRank = ((idxNum & FTS5_BI_ORDER_RANK) ? 1 : 0);",
          "1186:   pCsr->bDesc = bDesc = ((idxNum & FTS5_BI_ORDER_DESC) ? 1 : 0);",
          "",
          "[Removed Lines]",
          "1177:   if( BitFlagTest(idxNum, FTS5_BI_MATCH) ) pMatch = apVal[iVal++];",
          "1178:   if( BitFlagTest(idxNum, FTS5_BI_RANK) ) pRank = apVal[iVal++];",
          "1179:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_EQ) ) pRowidEq = apVal[iVal++];",
          "1180:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_LE) ) pRowidLe = apVal[iVal++];",
          "1181:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_GE) ) pRowidGe = apVal[iVal++];",
          "1182:   iCol = (idxNum>>16);",
          "1183:   assert( iCol>=0 && iCol<=pConfig->nCol );",
          "1184:   assert( iVal==nVal );",
          "",
          "[Added Lines]",
          "1201:   assert( pTab->pSortCsr==0 || nVal==0 );",
          "1207:   for(i=0; i<nVal; i++){",
          "1208:     switch( idxStr[iIdxStr++] ){",
          "1209:       case 'r':",
          "1210:         pRank = apVal[i];",
          "1211:         break;",
          "1212:       case 'm': {",
          "1213:         const char *zText = (const char*)sqlite3_value_text(apVal[i]);",
          "1214:         if( zText==0 ) zText = \"\";",
          "1216:         if( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' ){",
          "1217:           iCol = 0;",
          "1218:           do{",
          "1219:             iCol = iCol*10 + (idxStr[iIdxStr]-'0');",
          "1220:             iIdxStr++;",
          "1221:           }while( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' );",
          "1222:         }else{",
          "1223:           iCol = pConfig->nCol;",
          "1224:         }",
          "1226:         if( zText[0]=='*' ){",
          "1230:           rc = fts5SpecialMatch(pTab, pCsr, &zText[1]);",
          "1231:           goto filter_out;",
          "1232:         }else{",
          "1233:           char **pzErr = &pTab->p.base.zErrMsg;",
          "1234:           rc = sqlite3Fts5ExprNew(pConfig, iCol, zText, &pExpr, pzErr);",
          "1235:           if( rc==SQLITE_OK ){",
          "1236:             rc = sqlite3Fts5ExprAnd(&pCsr->pExpr, pExpr);",
          "1237:             pExpr = 0;",
          "1238:           }",
          "1239:           if( rc!=SQLITE_OK ) goto filter_out;",
          "1240:         }",
          "1242:         break;",
          "1243:       }",
          "1244:       case '=':",
          "1245:         pRowidEq = apVal[i];",
          "1246:         break;",
          "1247:       case '<':",
          "1248:         pRowidLe = apVal[i];",
          "1249:         break;",
          "1250:       default: assert( idxStr[iIdxStr-1]=='>' );",
          "1251:         pRowidGe = apVal[i];",
          "1252:         break;",
          "1253:     }",
          "1254:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1210:     assert( pRowidEq==0 && pRowidLe==0 && pRowidGe==0 && pRank==0 );",
          "1212:     assert( pCsr->iLastRowid==LARGEST_INT64 );",
          "1213:     assert( pCsr->iFirstRowid==SMALLEST_INT64 );",
          "1214:     if( pTab->pSortCsr->bDesc ){",
          "",
          "[Removed Lines]",
          "1211:     assert( nVal==0 && pMatch==0 && bOrderByRank==0 && bDesc==0 );",
          "",
          "[Added Lines]",
          "1281:     assert( nVal==0 && bOrderByRank==0 && bDesc==0 );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1221:     pCsr->ePlan = FTS5_PLAN_SOURCE;",
          "1222:     pCsr->pExpr = pTab->pSortCsr->pExpr;",
          "1223:     rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "1228:     rc = fts5CursorParseRank(pConfig, pCsr, pRank);",
          "1229:     if( rc==SQLITE_OK ){",
          "1235:       }else{",
          "1247:       }",
          "1248:     }",
          "1249:   }else if( pConfig->zContent==0 ){",
          "",
          "[Removed Lines]",
          "1224:   }else if( pMatch ){",
          "1225:     const char *zExpr = (const char*)sqlite3_value_text(apVal[0]);",
          "1226:     if( zExpr==0 ) zExpr = \"\";",
          "1230:       if( zExpr[0]=='*' ){",
          "1234:         rc = fts5SpecialMatch(pTab, pCsr, &zExpr[1]);",
          "1236:         char **pzErr = &pTab->p.base.zErrMsg;",
          "1237:         rc = sqlite3Fts5ExprNew(pConfig, iCol, zExpr, &pCsr->pExpr, pzErr);",
          "1238:         if( rc==SQLITE_OK ){",
          "1239:           if( bOrderByRank ){",
          "1240:             pCsr->ePlan = FTS5_PLAN_SORTED_MATCH;",
          "1241:             rc = fts5CursorFirstSorted(pTab, pCsr, bDesc);",
          "1242:           }else{",
          "1243:             pCsr->ePlan = FTS5_PLAN_MATCH;",
          "1244:             rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "1245:           }",
          "1246:         }",
          "",
          "[Added Lines]",
          "1294:   }else if( pCsr->pExpr ){",
          "1297:       if( bOrderByRank ){",
          "1298:         pCsr->ePlan = FTS5_PLAN_SORTED_MATCH;",
          "1299:         rc = fts5CursorFirstSorted(pTab, pCsr, bDesc);",
          "1301:         pCsr->ePlan = FTS5_PLAN_MATCH;",
          "1302:         rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1260:     );",
          "1261:     if( rc==SQLITE_OK ){",
          "1262:       if( pCsr->ePlan==FTS5_PLAN_ROWID ){",
          "1264:       }else{",
          "1265:         sqlite3_bind_int64(pCsr->pStmt, 1, pCsr->iFirstRowid);",
          "1266:         sqlite3_bind_int64(pCsr->pStmt, 2, pCsr->iLastRowid);",
          "",
          "[Removed Lines]",
          "1263:         sqlite3_bind_value(pCsr->pStmt, 1, apVal[0]);",
          "",
          "[Added Lines]",
          "1319:         sqlite3_bind_value(pCsr->pStmt, 1, pRowidEq);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1269:     }",
          "1270:   }",
          "1272:   pConfig->pzErrmsg = pzErrmsg;",
          "1273:   return rc;",
          "1274: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1328:  filter_out:",
          "1329:   sqlite3Fts5ExprFree(pExpr);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5faultB.test||ext/fts5/test/fts5faultB.test": [
          "File: ext/fts5/test/fts5faultB.test -> ext/fts5/test/fts5faultB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   faultsim_test_result {0 {1 4}}",
          "148: }",
          "151: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: #-------------------------------------------------------------------------",
          "151: # Test OOM injection in a query with two MATCH expressions",
          "152: #",
          "153: reset_db",
          "154: do_execsql_test 6.0 {",
          "155:   CREATE VIRTUAL TABLE t1 USING fts5(a);",
          "156:   INSERT INTO t1 VALUES('a b c d');  -- 1",
          "157:   INSERT INTO t1 VALUES('d a b c');  -- 2",
          "158:   INSERT INTO t1 VALUES('c d a b');  -- 3",
          "159:   INSERT INTO t1 VALUES('b c d a');  -- 4",
          "160: }",
          "161: do_faultsim_test 6.1 -faults oom* -body {",
          "162:   execsql { SELECT rowid FROM t1 WHERE t1 MATCH 'a' AND t1 MATCH 'b' }",
          "163: } -test {",
          "164:   faultsim_test_result {0 {1 2 3 4}}",
          "165: }",
          "166: do_faultsim_test 6.2 -faults oom* -body {",
          "167:   execsql { SELECT rowid FROM t1 WHERE t1 MATCH 'a OR b' AND t1 MATCH 'c OR d' }",
          "168: } -test {",
          "169:   faultsim_test_result {0 {1 2 3 4}}",
          "170: }",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5multi.test||ext/fts5/test/fts5multi.test": [
          "File: ext/fts5/test/fts5multi.test -> ext/fts5/test/fts5multi.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2014 September 13",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: set testprefix fts5multi",
          "18: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "19: ifcapable !fts5 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: fts5_aux_test_functions db",
          "26: do_execsql_test 1.0 {",
          "27:   CREATE VIRTUAL TABLE t1 USING fts5(a, b, c);",
          "28:   INSERT INTO t1 VALUES('gg bb bb'   ,'gg ff gg'   ,'ii ii');",
          "29:   INSERT INTO t1 VALUES('dd dd hh kk','jj'         ,'aa');",
          "30:   INSERT INTO t1 VALUES('kk gg ee'   ,'hh cc'      ,'hh jj aa cc');",
          "31:   INSERT INTO t1 VALUES('hh'         ,'bb jj cc'   ,'kk ii');",
          "32:   INSERT INTO t1 VALUES('kk dd kk ii','aa ee aa'   ,'ee');",
          "33:   INSERT INTO t1 VALUES('ee'         ,'ff gg kk aa','ee ff ee');",
          "34:   INSERT INTO t1 VALUES('ff jj'      ,'gg ee'      ,'kk ee gg kk');",
          "35:   INSERT INTO t1 VALUES('ff ee dd hh','kk ee'      ,'gg dd');",
          "36:   INSERT INTO t1 VALUES('bb'         ,'aa'         ,'bb aa');",
          "37:   INSERT INTO t1 VALUES('hh cc bb'   ,'ff bb'      ,'cc');",
          "38:   INSERT INTO t1 VALUES('jj'         ,'ff dd bb aa','dd dd ff ff');",
          "39:   INSERT INTO t1 VALUES('ff dd gg dd','gg aa bb ff','cc');",
          "40:   INSERT INTO t1 VALUES('ff aa cc jj','kk'         ,'ii dd');",
          "41:   INSERT INTO t1 VALUES('jj dd'      ,'cc'         ,'ii hh ee aa');",
          "42:   INSERT INTO t1 VALUES('ff ii hh'   ,'dd'         ,'gg');",
          "43:   INSERT INTO t1 VALUES('ff dd gg hh','hh'         ,'ff dd');",
          "44:   INSERT INTO t1 VALUES('cc cc'      ,'ff dd ff'   ,'bb');",
          "45:   INSERT INTO t1 VALUES('ii'         ,'bb ii'      ,'jj kk');",
          "46:   INSERT INTO t1 VALUES('ff hh'      ,'hh bb'      ,'bb dd ee');",
          "47:   INSERT INTO t1 VALUES('jj kk'      ,'jj'         ,'gg ff cc');",
          "48:   INSERT INTO t1 VALUES('dd kk'      ,'ii gg'      ,'dd');",
          "49:   INSERT INTO t1 VALUES('cc'         ,'aa ff'      ,'ii');",
          "50:   INSERT INTO t1 VALUES('bb ff bb ii','bb kk bb aa','hh ff ii dd');",
          "51:   INSERT INTO t1 VALUES('aa'         ,'ee bb jj jj','dd');",
          "52:   INSERT INTO t1 VALUES('kk dd cc'   ,'aa jj'      ,'ee aa ff');",
          "53:   INSERT INTO t1 VALUES('aa gg aa'   ,'jj'         ,'ii kk hh gg');",
          "54:   INSERT INTO t1 VALUES('ff hh aa'   ,'jj ii'      ,'hh dd bb jj');",
          "55:   INSERT INTO t1 VALUES('hh'         ,'aa gg kk'   ,'bb ee');",
          "56:   INSERT INTO t1 VALUES('bb'         ,'ee'         ,'gg');",
          "57:   INSERT INTO t1 VALUES('dd kk'      ,'kk bb aa'   ,'ee');",
          "58: }",
          "60: foreach {tn c1 e1 c2 e2} {",
          "61:   1     t1 aa     t1 bb",
          "62:   2     a  aa     b  bb",
          "63:   3     a  \"aa OR bb OR cc\"    b  \"jj OR ii OR hh\"",
          "64:   4     t1  \"aa AND bb\"       t1  \"cc\"",
          "65:   5     c   \"kk\"               b  \"aa OR bb OR cc OR dd OR ee\"",
          "66: } {",
          "67:   if {$c1==\"t1\"} {",
          "68:     set lhs \"( $e1 )\"",
          "69:   } else {",
          "70:     set lhs \"$c1 : ( $e1 )\"",
          "71:   }",
          "72:   if {$c2==\"t1\"} {",
          "73:     set rhs \"( $e2 )\"",
          "74:   } else {",
          "75:     set rhs \"$c2 : ( $e2 )\"",
          "76:   }",
          "78:   set q1 \"t1 MATCH '($lhs) AND ($rhs)'\"",
          "79:   set q2 \"$c1 MATCH '$e1' AND $c2 MATCH '$e2'\"",
          "81:   set ret [execsql \"SELECT rowid FROM t1 WHERE $q1\"]",
          "82:   set N [llength $ret]",
          "83:   do_execsql_test 1.$tn.1.($N) \"SELECT rowid FROM t1 WHERE $q2\" $ret",
          "85:   set ret [execsql \"SELECT fts5_test_poslist(t1) FROM t1 WHERE $q1\"]",
          "86:   do_execsql_test 1.$tn.2.($N) \"",
          "87:     SELECT fts5_test_poslist(t1) FROM t1 WHERE $q2",
          "88:   \" $ret",
          "89: }",
          "91: do_catchsql_test 2.1.1 {",
          "92:   SELECT rowid FROM t1 WHERE t1 MATCH '(NOT' AND t1 MATCH 'aa bb';",
          "93: } {1 {fts5: syntax error near \"NOT\"}}",
          "94: do_catchsql_test 2.1.2 {",
          "95:   SELECT rowid FROM t1 WHERE t1 MATCH 'aa bb' AND t1 MATCH '(NOT';",
          "96: } {1 {fts5: syntax error near \"NOT\"}}",
          "98: finish_test",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5plan.test||ext/fts5/test/fts5plan.test": [
          "File: ext/fts5/test/fts5plan.test -> ext/fts5/test/fts5plan.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: } {",
          "32:   QUERY PLAN",
          "33:   |--SCAN TABLE t1",
          "35: }",
          "37: do_eqp_test 1.2 {",
          "",
          "[Removed Lines]",
          "34:   `--SCAN TABLE f1 VIRTUAL TABLE INDEX 65537:",
          "",
          "[Added Lines]",
          "34:   `--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:m",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   SELECT * FROM f1 WHERE f1 MATCH ? ORDER BY ff",
          "47: } {",
          "48:   QUERY PLAN",
          "50:   `--USE TEMP B-TREE FOR ORDER BY",
          "51: }",
          "",
          "[Removed Lines]",
          "49:   |--SCAN TABLE f1 VIRTUAL TABLE INDEX 65537:",
          "",
          "[Added Lines]",
          "49:   |--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:m",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61: do_eqp_test 1.5 {",
          "62:   SELECT * FROM f1 WHERE rank MATCH ?",
          "65: finish_test",
          "",
          "[Removed Lines]",
          "63: } {SCAN TABLE f1 VIRTUAL TABLE INDEX 2:}",
          "",
          "[Added Lines]",
          "63: } {SCAN TABLE f1 VIRTUAL TABLE INDEX 0:r}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5simple.test||ext/fts5/test/fts5simple.test": [
          "File: ext/fts5/test/fts5simple.test -> ext/fts5/test/fts5simple.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "467:   SELECT rowid FROM x1($doc);",
          "468: } {11112}",
          "470: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470: #-------------------------------------------------------------------------",
          "471: reset_db",
          "472: do_execsql_test 22.0 {",
          "473:   CREATE VIRTUAL TABLE x1 USING fts5(x);",
          "474:   INSERT INTO x1(x) VALUES('a b c');",
          "475:   INSERT INTO x1(x) VALUES('x y z');",
          "476:   INSERT INTO x1(x) VALUES('c b a');",
          "477:   INSERT INTO x1(x) VALUES('z y x');",
          "478: }",
          "480: do_catchsql_test 22.1 {SELECT * FROM x1('')}   {1 {fts5: syntax error near \"\"}}",
          "481: do_catchsql_test 22.2 {SELECT * FROM x1(NULL)} {1 {fts5: syntax error near \"\"}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6aa438ce41d460a6782ae63503128b9140c28ff59c2b2eed48b004acf83e0560",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3478:         }",
          "3479:         sqlite3ExprDelete(db, pExpr);",
          "3480:         pExpr = pNew;",
          "3481:       }",
          "3482:     }",
          "3483:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3484:         if( pExpr ){",
          "3485:           if( pExpr->op!=TK_COLUMN && pExpr->op!=TK_COLLATE ){",
          "3486:             CollSeq *pColl = sqlite3ExprCollSeq(pSubst->pParse, pExpr);",
          "3487:             pExpr = sqlite3ExprAddCollateString(pSubst->pParse, pExpr,",
          "3488:                 (pColl ? pColl->zName : \"BINARY\")",
          "3489:             );",
          "3490:           }",
          "3491:           ExprClearProperty(pExpr, EP_Collate);",
          "3492:         }",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7200:     { \"omit-noop-join\",      SQLITE_OmitNoopJoin   },",
          "7201:     { \"stat4\",               SQLITE_Stat4          },",
          "7202:     { \"skip-scan\",           SQLITE_SkipScan       },",
          "7203:   };",
          "7205:   if( objc!=4 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7203:     { \"push-down\",           SQLITE_PushDown       },",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:     }",
          "538:     case TK_COLLATE: {",
          "540:       sqlite3TreeViewExpr(pView, pExpr->pLeft, 0);",
          "541:       break;",
          "542:     }",
          "",
          "[Removed Lines]",
          "539:       sqlite3TreeViewLine(pView, \"COLLATE %Q\", pExpr->u.zToken);",
          "",
          "[Added Lines]",
          "543:       sqlite3TreeViewLine(pView, \"%sCOLLATE %Q%s\",",
          "544:         !ExprHasProperty(pExpr, EP_Collate) ? \"SOFT-\" : \"\",",
          "545:         pExpr->u.zToken, zFlgs);",
          "",
          "---------------"
        ],
        "test/tkt-18458b1a.test||test/tkt-18458b1a.test": [
          "File: test/tkt-18458b1a.test -> test/tkt-18458b1a.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library. In particular,",
          "12: # that problems related to ticket [18458b1a] have been fixed.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix tkt-18458b1a",
          "19: foreach tn {1 2} {",
          "20:   reset_db",
          "21:   if {$tn==1} {",
          "22:     # Disable the flattener and push-down optimizations",
          "23:     optimization_control db query-flattener 0",
          "24:     optimization_control db push-down 0",
          "25:   } else {",
          "26:     # Enable them",
          "27:     optimization_control db query-flattener 1",
          "28:     optimization_control db push-down 1",
          "29:   }",
          "31:   db cache size 0",
          "33:   do_execsql_test $tn.1.1 {",
          "34:     CREATE TABLE t0(c0 COLLATE NOCASE);",
          "35:     INSERT INTO t0(c0) VALUES ('B');",
          "36:     CREATE VIEW v0(c0, c1) AS SELECT DISTINCT t0.c0, 'a' FROM t0;",
          "37:   }",
          "39:   do_execsql_test $tn.1.2 {",
          "40:     SELECT count(*) FROM v0 WHERE c1 >= c0;",
          "41:   } 1",
          "43:   do_execsql_test $tn.1.3 {",
          "44:     SELECT count(*) FROM v0 WHERE NOT NOT (c1 >= c0);",
          "45:   } 1",
          "47:   do_execsql_test $tn.1.4 {",
          "48:     SELECT count(*) FROM v0 WHERE ((c1 >= c0) OR 0+0);",
          "49:   } 1",
          "50: }",
          "52: finish_test",
          "",
          "---------------"
        ],
        "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test": [
          "File: test/tkt-a7debbe0.test -> test/tkt-a7debbe0.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library. In particular,",
          "12: # that problems related to ticket a7debbe0ad1 have been fixed.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix tkt-a7debbe0",
          "19: foreach tn {1 2} {",
          "20:   reset_db",
          "21:   if {$tn==1} {",
          "22:     # Disable the flattener",
          "23:     optimization_control db query-flattener 0",
          "24:   } else {",
          "25:     # Enable the flattener",
          "26:     optimization_control db query-flattener 1",
          "27:   }",
          "29:   do_execsql_test $tn.1.0 {",
          "30:     CREATE TABLE t0(xyz INTEGER);",
          "31:     INSERT INTO t0(xyz) VALUES(456);",
          "32:     CREATE VIEW v2(a, B) AS",
          "33:         SELECT 'a', 'B' COLLATE NOCASE FROM t0;",
          "34:     CREATE TABLE t2(a, B COLLATE NOCASE);",
          "35:     INSERT INTO t2 VALUES('a', 'B');",
          "36:     CREATE VIEW v3(a, B) AS",
          "37:         SELECT 'a' COLLATE BINARY, 'B' COLLATE NOCASE FROM t0;",
          "39:     CREATE VIEW v4(a, B) AS",
          "40:         SELECT 'a', +CAST('B' COLLATE NOCASE AS TEXT) FROM t0;",
          "42:     CREATE VIEW v5(a, B) AS",
          "43:         SELECT 'a', ('B' COLLATE NOCASE) || '' FROM t0;",
          "44:   }",
          "46:   # Table t2 and views v2 through v5 should all be equivalent.",
          "47:   do_execsql_test $tn.1.1.1 { SELECT a   >= B FROM t2;         } 1",
          "48:   do_execsql_test $tn.1.1.2 { SELECT 'a' >= 'B' COLLATE NOCASE } 0",
          "49:   do_execsql_test $tn.1.1.3 { SELECT a   >= B FROM v2          } 1",
          "50:   do_execsql_test $tn.1.1.4 { SELECT a   >= B FROM v3          } 1",
          "51:   do_execsql_test $tn.1.1.5 { SELECT a   >= B FROM v4          } 1",
          "52:   do_execsql_test $tn.1.1.6 { SELECT a   >= B FROM v5          } 1",
          "54:   do_execsql_test $tn.1.2.1 { SELECT B   < a FROM t2           } 0",
          "55:   do_execsql_test $tn.1.2.2 { SELECT 'B' COLLATE NOCASE < 'a'  } 0",
          "56:   do_execsql_test $tn.1.2.3 { SELECT B   < a FROM v2           } 0",
          "57:   do_execsql_test $tn.1.2.4 { SELECT B   < a FROM v3           } 0",
          "58:   do_execsql_test $tn.1.2.5 { SELECT a  < B FROM v4           } 0",
          "59:   do_execsql_test $tn.1.2.6 { SELECT a  < B FROM v5           } 0",
          "61:   #-------------------------------------------------------------------------",
          "62:   do_execsql_test $tn.2.0 {",
          "63:     CREATE TABLE t5(a, b COLLATE NOCASE);",
          "64:     INSERT INTO t5 VALUES(1, 'XYZ');",
          "65:   }",
          "67:   # Result should be 0, as column \"xyz\" from the sub-query has implicit",
          "68:   # collation sequence BINARY.",
          "69:   do_execsql_test $tn.2.1 {",
          "70:     SELECT xyz==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "71:   } {0}",
          "73:   # Result should be 1, as literal 'xyz' has no collation sequence, so",
          "74:   # the comparison uses the implicit collation sequence of the RHS - NOCASE.",
          "75:   do_execsql_test $tn.2.2 {",
          "76:     SELECT 'xyz'==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "77:   } {1}",
          "79:   #-----------------------------------------------------------------------",
          "80:   # The test case submitted with the ticket.",
          "81:   #",
          "82:   do_execsql_test $tn.3.0 {",
          "83:     DROP TABLE t0;",
          "84:     DROP VIEW v2;",
          "86:     CREATE TABLE t0(c0);",
          "87:     INSERT INTO t0(c0) VALUES('');",
          "88:     CREATE VIEW v2(c0, c1) AS",
          "89:         SELECT 'B' COLLATE NOCASE, 'a' FROM t0 ORDER BY t0.c0;",
          "90:     SELECT SUM(count) FROM (",
          "91:       SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2",
          "92:     );",
          "93:   } 1",
          "95:   # The result is 1, as the collation used is the implicit collation sequence",
          "96:   # of v2.c1 - BINARY.",
          "97:   do_execsql_test $tn.3.1 {",
          "98:     SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2;",
          "99:   } 1",
          "100: }",
          "102: finish_test",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4426:     }",
          "4427:     i++;",
          "4428:   }",
          "4430:   fprintf(out, \"};\\n\"); lineno++;",
          "",
          "[Removed Lines]",
          "4429:   if( j>0 ) fprintf(out, \"\\n\"); lineno++;",
          "",
          "[Added Lines]",
          "4429:   if( j>0 ){ fprintf(out, \"\\n\"); lineno++; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a934d75d9595a8f56d6510a023c7289734ebae9",
      "candidate_info": {
        "commit_hash": "2a934d75d9595a8f56d6510a023c7289734ebae9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2a934d75d9595a8f56d6510a023c7289734ebae9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Detect zero-length free slots on btree pages and report that as corruption.\n\nFossilOrigin-Name: c4f0568fde1d4070e7522ec36c0958be7426076002a7fa2da12a46411ab2e92d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0524aaaf45681437c2dca3d31ff26a65bee7bd2074730277c29136635ee0be0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1573:     }",
          "1574:     iAddr = pc;",
          "1575:     pc = get2byte(&aData[pc]);",
          "1577:       if( pc ){",
          "",
          "[Removed Lines]",
          "1576:     if( pc<iAddr+size ){",
          "",
          "[Added Lines]",
          "1576:     if( pc<=iAddr+size ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49b269e0955b86db3205c11153928e093197fa38",
      "candidate_info": {
        "commit_hash": "49b269e0955b86db3205c11153928e093197fa38",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/49b269e0955b86db3205c11153928e093197fa38",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c"
        ],
        "message": "Minor comment enhancement in alter.c.  No changes to code.\n\nFossilOrigin-Name: 12920bcb99b25e147e1877ee001bc551a743e3530c954fe2b45a18a4eef9eeff",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 773c5c1d9c0ec40c51949c38c9dc17e778086f3f92791cca9b85288de0076dab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c"
        ]
      }
    },
    {
      "candidate_hash": "9c039d9f2e8d0ed9645c7ea419e24f08a268fb95",
      "candidate_info": {
        "commit_hash": "9c039d9f2e8d0ed9645c7ea419e24f08a268fb95",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c039d9f2e8d0ed9645c7ea419e24f08a268fb95",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "ext/misc/prefixes.c",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "test/prefixes.test"
        ],
        "message": "Add scalar function \"prefix_length()\" to ext/misc/prefixes.c.\n\nFossilOrigin-Name: 0bf1550507d9d3c8a41f8a50db3a59bf808f0a4e24637dc0905d35579305eca7",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "ext/misc/prefixes.c||ext/misc/prefixes.c",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "test/prefixes.test||test/prefixes.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "452:   $(TOP)/ext/misc/nextchar.c \\",
          "453:   $(TOP)/ext/misc/normalize.c \\",
          "454:   $(TOP)/ext/misc/percentile.c \\",
          "455:   $(TOP)/ext/misc/regexp.c \\",
          "456:   $(TOP)/ext/misc/remember.c \\",
          "457:   $(TOP)/ext/misc/series.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "455:   $(TOP)/ext/misc/prefixes.c \\",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1527:   $(TOP)\\ext\\misc\\nextchar.c \\",
          "1528:   $(TOP)\\ext\\misc\\normalize.c \\",
          "1529:   $(TOP)\\ext\\misc\\percentile.c \\",
          "1530:   $(TOP)\\ext\\misc\\regexp.c \\",
          "1531:   $(TOP)\\ext\\misc\\remember.c \\",
          "1532:   $(TOP)\\ext\\misc\\series.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1530:   $(TOP)\\ext\\misc\\prefixes.c \\",
          "",
          "---------------"
        ],
        "ext/misc/prefixes.c||ext/misc/prefixes.c": [
          "File: ext/misc/prefixes.c -> ext/misc/prefixes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250: };",
          "253: #ifdef _WIN32",
          "254: __declspec(dllexport)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258: #define PREFIX_SKIP_UTF8(zIn) {                        \\",
          "259:   if( (*(zIn++))>=0xc0 ){                              \\",
          "260:     while( (*zIn & 0xc0)==0x80 ){ zIn++; }             \\",
          "261:   }                                                    \\",
          "262: }",
          "277: static void prefixLengthFunc(",
          "278:   sqlite3_context *ctx,",
          "279:   int nVal,",
          "280:   sqlite3_value **apVal",
          "281: ){",
          "284:   const unsigned char *zL = sqlite3_value_text(apVal[0]);",
          "285:   const unsigned char *zR = sqlite3_value_text(apVal[1]);",
          "286:   int nL = sqlite3_value_bytes(apVal[0]);",
          "287:   int nR = sqlite3_value_bytes(apVal[1]);",
          "288:   int i;",
          "290:   nByte = (nL > nR ? nL : nR);",
          "291:   for(i=0; i<nByte; i++){",
          "292:     if( zL[i]!=zR[i] ) break;",
          "293:     if( (zL[i] & 0xC0)!=0x80 ) nRet++;",
          "294:   }",
          "296:   if( (zL[i] & 0xC0)==0x80 ) nRet--;",
          "297:   sqlite3_result_int(ctx, nRet);",
          "298: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:   int rc = SQLITE_OK;",
          "262:   SQLITE_EXTENSION_INIT2(pApi);",
          "263:   rc = sqlite3_create_module(db, \"prefixes\", &prefixesModule, 0);",
          "264:   return rc;",
          "265: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:   if( rc==SQLITE_OK ){",
          "312:     rc = sqlite3_create_function(",
          "313:         db, \"prefix_length\", 2, SQLITE_UTF8, 0, prefixLengthFunc, 0, 0",
          "314:     );",
          "315:   }",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:   $(TOP)/ext/misc/nextchar.c \\",
          "370:   $(TOP)/ext/misc/normalize.c \\",
          "371:   $(TOP)/ext/misc/percentile.c \\",
          "372:   $(TOP)/ext/misc/regexp.c \\",
          "373:   $(TOP)/ext/misc/remember.c \\",
          "374:   $(TOP)/ext/misc/series.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:   $(TOP)/ext/misc/prefixes.c \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 11b8a4cba747ca214fe3506caa3b711c87be4d55412754e673cc0603afefb086",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7141:   extern int sqlite3_ieee_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7142:   extern int sqlite3_nextchar_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7143:   extern int sqlite3_percentile_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7144:   extern int sqlite3_regexp_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7145:   extern int sqlite3_remember_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7146:   extern int sqlite3_series_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7144:   extern int sqlite3_prefixes_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7166:     { \"ieee754\",               sqlite3_ieee_init                 },",
          "7167:     { \"nextchar\",              sqlite3_nextchar_init             },",
          "7168:     { \"percentile\",            sqlite3_percentile_init           },",
          "7169:     { \"regexp\",                sqlite3_regexp_init               },",
          "7170:     { \"remember\",              sqlite3_remember_init             },",
          "7171:     { \"series\",                sqlite3_series_init               },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7170:     { \"prefixes\",              sqlite3_prefixes_init             },",
          "",
          "---------------"
        ],
        "test/prefixes.test||test/prefixes.test": [
          "File: test/prefixes.test -> test/prefixes.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018-01-15",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is prefixes.c extension",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix unionvtab",
          "19: ifcapable !vtab {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: load_static_extension db prefixes",
          "26: foreach {tn zLeft zRight expected} {",
          "27:   1 abcdxxx abcyy    3",
          "28:   2 abcdxxx bcyyy    0",
          "29:   3 abcdxxx ab       2",
          "30:   4 ab      abcd     2",
          "32:   5 \"xyz\\u1234xz\" \"xyz\\u1234xy\" 5",
          "33:   6 \"xyz\\u1234\"   \"xyz\\u1234xy\" 4",
          "34:   7 \"xyz\\u1234\"   \"xyz\\u1234\"   4",
          "35:   8 \"xyz\\u1234xy\" \"xyz\\u1234\"   4",
          "36:   9 \"xyz\\u1234xy\" \"xyz\\u1233\"   3",
          "37:  10 \"xyz\\u1234xy\" \"xyz\\u1235\"   3",
          "38: } {",
          "39:   do_execsql_test 1.$tn { SELECT prefix_length($zLeft, $zRight) } $expected",
          "40: }",
          "43: do_execsql_test 2.0 {",
          "44:   CREATE TABLE t1(k TEXT UNIQUE, v INTEGER);",
          "45:   INSERT INTO t1 VALUES",
          "46:     ('aback', 1),",
          "47:     ('abaft', 2),",
          "48:     ('abandon', 3),",
          "49:     ('abandoned', 4),",
          "50:     ('abandoning', 5),",
          "51:     ('abandonment', 6),",
          "52:     ('abandons', 7),",
          "53:     ('abase', 8),",
          "54:     ('abased', 9),",
          "55:     ('abasement', 10),",
          "56:     ('abasements', 11),",
          "57:     ('abases', 12),",
          "58:     ('abash', 13),",
          "59:     ('abashed', 14),",
          "60:     ('abashes', 15),",
          "61:     ('abashing', 16),",
          "62:     ('abasing', 17),",
          "63:     ('abate', 18),",
          "64:     ('abated', 19),",
          "65:     ('abatement', 20),",
          "66:     ('abatements', 21);",
          "67: }",
          "69: foreach {tn INPUT expected} {",
          "70:   1 abatementt   abatement",
          "71:   2 abashet      abash",
          "72:   3 abandonio    abandon",
          "73:   4 abasemenu    abase",
          "74: } {",
          "75:   do_execsql_test 2.$tn {",
          "76:     WITH finder(str) AS (",
          "77:       SELECT (SELECT max(k) FROM t1 WHERE k<=$INPUT)",
          "78:         UNION ALL",
          "79:         SELECT (",
          "80:           SELECT max(k) FROM t1",
          "81:           WHERE k<=substr($INPUT, 1, prefix_length(finder.str, $INPUT))",
          "82:         ) FROM finder WHERE length(finder.str)>0",
          "83:       )",
          "84:     SELECT str FROM finder WHERE length(str)==prefix_length(str, $INPUT) LIMIT 1",
          "85:   } $expected",
          "86: }",
          "88: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}