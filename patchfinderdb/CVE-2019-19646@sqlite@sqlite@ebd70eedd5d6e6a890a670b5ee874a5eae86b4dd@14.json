{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d6db6598ca53771904d616054add0eaae3528b56",
      "candidate_info": {
        "commit_hash": "d6db6598ca53771904d616054add0eaae3528b56",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d6db6598ca53771904d616054add0eaae3528b56",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Improvements to the sqlite3ExprImpliesNonNullRow() theorem prover.\n\nFossilOrigin-Name: 3fde627616030ca0de87169467e2e453fdc91154942e3a3a92a221df5923b2d2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b36813d6467c82159bd3bb69d34ac28fc161a13052ca67d7cf9ad75e2aaea9d5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5033: int sqlite3ExprImpliesNonNullRow(Expr *p, int iTab){",
          "5034:   Walker w;",
          "5035:   w.xExprCallback = impliesNotNullRow;",
          "5036:   w.xSelectCallback = 0;",
          "5037:   w.xSelectCallback2 = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5035:   p = sqlite3ExprSkipCollate(p);",
          "5036:   while( p ){",
          "5037:     if( p->op==TK_NOTNULL ){",
          "5038:       p = p->pLeft;",
          "5039:     }else if( p->op==TK_AND ){",
          "5040:       if( sqlite3ExprImpliesNonNullRow(p->pLeft, iTab) ) return 1;",
          "5041:       p = p->pRight;",
          "5042:     }else{",
          "5043:       break;",
          "5044:     }",
          "5045:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5da9356e0295c97a86dc986131de475a0fd35cb",
      "candidate_info": {
        "commit_hash": "e5da9356e0295c97a86dc986131de475a0fd35cb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e5da9356e0295c97a86dc986131de475a0fd35cb",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c",
          "test/fuzzdata8.db"
        ],
        "message": "Update fuzzcheck so that with the --load-dbsql options it screens its inputs to ensure that they are valid dbsqlfuzz cases.  Add new dbsqlfuzz finds to the test/fuzzdata8.db database.\n\nFossilOrigin-Name: 004f7d9bbeee049c22a7e1c82c6cc0ea79a237967de3ff57686acea3060d5f45",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a3ea1a822d3a110f4f186f2fc8550f435c8c98635d058096b7be9d4df7066b8b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "870:   return 0;",
          "871: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "875: static void isDbSqlFunc(",
          "876:   sqlite3_context *context,",
          "877:   int argc,",
          "878:   sqlite3_value **argv",
          "879: ){",
          "880:   int n = sqlite3_value_bytes(argv[0]);",
          "881:   unsigned char *a = (unsigned char*)sqlite3_value_blob(argv[0]);",
          "882:   sqlite3_result_int(context, a!=0 && n>0 && isDbSql(a,n));",
          "883: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1173:   int rc;",
          "1175:      \"BEGIN;\\n\"",
          "1176:      \"CREATE TEMP TABLE dbx AS SELECT DISTINCT dbcontent FROM db;\\n\"",
          "1177:      \"DELETE FROM db;\\n\"",
          "1178:      \"INSERT INTO db(dbid, dbcontent) \"",
          "1179:         \" SELECT NULL, dbcontent FROM dbx ORDER BY 2;\\n\"",
          "1180:      \"DROP TABLE dbx;\\n\"",
          "1182:      \"DELETE FROM xsql;\\n\"",
          "1183:      \"INSERT INTO xsql(sqlid,sqltext) \"",
          "1184:         \" SELECT NULL, sqltext FROM sx ORDER BY 2;\\n\"",
          "1185:      \"DROP TABLE sx;\\n\"",
          "1186:      \"COMMIT;\\n\"",
          "1187:      \"PRAGMA page_size=1024;\\n\"",
          "1189:   if( rc ) fatalError(\"cannot rebuild: %s\", sqlite3_errmsg(db));",
          "1190: }",
          "",
          "[Removed Lines]",
          "1172: static void rebuild_database(sqlite3 *db){",
          "1174:   rc = sqlite3_exec(db,",
          "1181:      \"CREATE TEMP TABLE sx AS SELECT DISTINCT sqltext FROM xsql;\\n\"",
          "1188:      \"VACUUM;\\n\", 0, 0, 0);",
          "",
          "[Added Lines]",
          "1183: static void rebuild_database(sqlite3 *db, int dbSqlOnly){",
          "1185:   char *zSql;",
          "1186:   zSql = sqlite3_mprintf(",
          "1193:      \"CREATE TEMP TABLE sx AS SELECT DISTINCT sqltext FROM xsql %s;\\n\"",
          "1200:      \"VACUUM;\\n\",",
          "1201:      dbSqlOnly ? \" WHERE isdbsql(sqltext)\" : \"\"",
          "1202:   );",
          "1203:   rc = sqlite3_exec(db, zSql, 0, 0, 0);",
          "1204:   sqlite3_free(zSql);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1279: \"  --limit-vdbe         Panic if any test runs for more than 100,000 cycles\\n\"",
          "1280: \"  --load-sql ARGS...   Load SQL scripts fron files into SOURCE-DB\\n\"",
          "1281: \"  --load-db ARGS...    Load template databases from files into SOURCE_DB\\n\"",
          "1282: \"  -m TEXT              Add a description to the database\\n\"",
          "1283: \"  --native-vfs         Use the native VFS for initially empty database files\\n\"",
          "1284: \"  --native-malloc      Turn off MEMSYS3/5 and Lookaside\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1298: \"  --load-dbsql ARGS..  Load dbsqlfuzz outputs into the xsql table\\n\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1361:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1362:         zExpDb = argv[++i];",
          "1363:       }else",
          "1365:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1366:         zExpSql = argv[++i];",
          "1367:       }else",
          "",
          "[Removed Lines]",
          "1364:       if( strcmp(z,\"export-sql\")==0 ){",
          "",
          "[Added Lines]",
          "1382:       if( strcmp(z,\"export-sql\")==0 || strcmp(z,\"export-dbsql\")==0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1396:         openFlags4Data = SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE;",
          "1397:         break;",
          "1398:       }else",
          "1399:       if( strcmp(z,\"m\")==0 ){",
          "1400:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1401:         zMsg = argv[++i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1417:       if( strcmp(z,\"load-dbsql\")==0 ){",
          "1418:         zInsSql = \"INSERT INTO xsql(sqltext)VALUES(CAST(readfile(?1) AS text))\";",
          "1419:         iFirstInsArg = i+1;",
          "1420:         openFlags4Data = SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE;",
          "1421:         dbSqlOnly = 1;",
          "1422:         break;",
          "1423:       }else",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1577:     if( zInsSql ){",
          "1578:       sqlite3_create_function(db, \"readfile\", 1, SQLITE_UTF8, 0,",
          "1579:                               readfileFunc, 0, 0);",
          "1580:       rc = sqlite3_prepare_v2(db, zInsSql, -1, &pStmt, 0);",
          "1581:       if( rc ) fatalError(\"cannot prepare statement [%s]: %s\",",
          "1582:                           zInsSql, sqlite3_errmsg(db));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1605:       sqlite3_create_function(db, \"isdbsql\", 1, SQLITE_UTF8, 0,",
          "1606:                               isDbSqlFunc, 0, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1592:       rc = sqlite3_exec(db, \"COMMIT\", 0, 0, 0);",
          "1593:       if( rc ) fatalError(\"cannot commit the transaction: %s\",",
          "1594:                           sqlite3_errmsg(db));",
          "1596:       sqlite3_close(db);",
          "1597:       return 0;",
          "1598:     }",
          "",
          "[Removed Lines]",
          "1595:       rebuild_database(db);",
          "",
          "[Added Lines]",
          "1622:       rebuild_database(db, dbSqlOnly);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1679:         printf(\"%s: rebuilding... \", zDbName);",
          "1680:         fflush(stdout);",
          "1681:       }",
          "1683:       if( !quietFlag ) printf(\"done\\n\");",
          "1684:     }",
          "",
          "[Removed Lines]",
          "1682:       rebuild_database(db);",
          "",
          "[Added Lines]",
          "1709:       rebuild_database(db, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b986b2a47cd3174382c66448fde87da21b9bc74",
      "candidate_info": {
        "commit_hash": "4b986b2a47cd3174382c66448fde87da21b9bc74",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4b986b2a47cd3174382c66448fde87da21b9bc74",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Patch makes balance_nonroot() slightly smaller and faster and more robust against corrupt databases.\n\nFossilOrigin-Name: 174da3c32c9caebd642c31cb594597ccd5bb2a7fc501b1f49aef0b7b4765bfca",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fcc24edde471c2214add2dbc3a27da8890a7148105c5ffa024faf72457964a5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7152:     int iCell = (iOld + pPg->aiOvfl[i]) - iNew;",
          "7153:     if( iCell>=0 && iCell<nNew ){",
          "7154:       pCellptr = &pPg->aCellIdx[iCell * 2];",
          "7157:       nCell++;",
          "7158:       if( pageInsertArray(",
          "7159:             pPg, pBegin, &pData, pCellptr,",
          "",
          "[Removed Lines]",
          "7155:       assert( nCell>=iCell );",
          "7156:       memmove(&pCellptr[2], pCellptr, (nCell - iCell) * 2);",
          "",
          "[Added Lines]",
          "7155:       if( nCell>iCell ){",
          "7156:         memmove(&pCellptr[2], pCellptr, (nCell - iCell) * 2);",
          "7157:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c3f46500fb8f1cb8dbd2d325719ebc77c02e0e5",
      "candidate_info": {
        "commit_hash": "2c3f46500fb8f1cb8dbd2d325719ebc77c02e0e5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c3f46500fb8f1cb8dbd2d325719ebc77c02e0e5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c"
        ],
        "message": "Mark an unreachable branch with an ALWAYS macro.\n\nFossilOrigin-Name: d4755aca4b435eed62b54af84013f7f176d3fa5b7b1c243555d59de5749fcde5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e96641f0be7d4454215459b0a95cf1c46ba0133e46d0bae22269741c8f4e5b44",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "733: static int renameUnmapSelectCb(Walker *pWalker, Select *p){",
          "735:     Parse *pParse = pWalker->pParse;",
          "736:     int i;",
          "737:     for(i=0; i<p->pSrc->nSrc; i++){",
          "",
          "[Removed Lines]",
          "734:   if( p->pSrc ){",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aff0fd483c24ea83377824dbcbd17fad374594b2",
      "candidate_info": {
        "commit_hash": "aff0fd483c24ea83377824dbcbd17fad374594b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aff0fd483c24ea83377824dbcbd17fad374594b2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c",
          "test/fuzzdata8.db"
        ],
        "message": "Add an \"|| CORRUPT_DB\" term to an assert() that might be false if the database is corrupt.  Also add a branch to have sqlite3PagerMovepage() return SQLITE_CORRUPT in that case.\n\nFossilOrigin-Name: b0d5cf40bba34e459caa7480bc84a1d75496c2ab52029f4bb0a31f2d9369a8ee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3803e750384ec37091b0a6c350f8ef67720e316fd6f74c95e3c5f231c4a01ceb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7178:   pPg->flags &= ~PGHDR_NEED_SYNC;",
          "7179:   pPgOld = sqlite3PagerLookup(pPager, pgno);",
          "7181:   if( pPgOld ){",
          "7182:     pPg->flags |= (pPgOld->flags&PGHDR_NEED_SYNC);",
          "7183:     if( pPager->tempFile ){",
          "",
          "[Removed Lines]",
          "7180:   assert( !pPgOld || pPgOld->nRef==1 );",
          "",
          "[Added Lines]",
          "7180:   assert( !pPgOld || pPgOld->nRef==1 || CORRUPT_DB );",
          "7182:     if( pPgOld->nRef>1 ){",
          "7183:       sqlite3PagerUnrefNotNull(pPgOld);",
          "7184:       return SQLITE_CORRUPT_BKPT;",
          "7185:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}