{
  "cve_id": "CVE-2015-0206",
  "cve_desc": "Memory leak in the dtls1_buffer_record function in d1_pkt.c in OpenSSL 1.0.0 before 1.0.0p and 1.0.1 before 1.0.1k allows remote attackers to cause a denial of service (memory consumption) by sending many duplicate records for the next epoch, leading to failure of replay detection.",
  "repo": "openssl/openssl",
  "patch_hash": "103b171d8fc282ef435f8de9afbf7782e312961f",
  "patch_info": {
    "commit_hash": "103b171d8fc282ef435f8de9afbf7782e312961f",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/103b171d8fc282ef435f8de9afbf7782e312961f",
    "files": [
      "ssl/d1_pkt.c"
    ],
    "message": "A memory leak can occur in dtls1_buffer_record if either of the calls to ssl3_setup_buffers or pqueue_insert fail. The former will fail if there is a malloc failure, whilst the latter will fail if attempting to add a duplicate record to the queue. This should never happen because duplicate records should be detected and dropped before any attempt to add them to the queue. Unfortunately records that arrive that are for the next epoch are not being recorded correctly, and therefore replays are not being detected. Additionally, these \"should not happen\" failures that can occur in dtls1_buffer_record are not being treated as fatal and therefore an attacker could exploit this by sending repeated replay records for the next epoch, eventually causing a DoS through memory exhaustion.\n\nThanks to Chris Mueller for reporting this issue and providing initial\nanalysis and a patch. Further analysis and the final patch was performed by\nMatt Caswell from the OpenSSL development team.\n\nCVE-2015-0206\n\nReviewed-by: Dr Stephen Henson <steve@openssl.org>",
    "before_after_code_files": [
      "ssl/d1_pkt.c||ssl/d1_pkt.c"
    ]
  },
  "patch_diff": {
    "ssl/d1_pkt.c||ssl/d1_pkt.c": [
      "File: ssl/d1_pkt.c -> ssl/d1_pkt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "247:  if (!ssl3_setup_buffers(s))",
      "248:   {",
      "249:   SSLerr(SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR);",
      "250:   OPENSSL_free(rdata);",
      "251:   pitem_free(item);",
      "253:   }",
      "256:  if (pqueue_insert(queue->q, item) == NULL)",
      "257:   {",
      "258:   SSLerr(SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR);",
      "259:   OPENSSL_free(rdata);",
      "260:   pitem_free(item);",
      "262:   }",
      "264:  return(1);",
      "",
      "[Removed Lines]",
      "252:   return(0);",
      "261:   return(0);",
      "",
      "[Added Lines]",
      "250:   if (rdata->rbuf.buf != NULL)",
      "251:    OPENSSL_free(rdata->rbuf.buf);",
      "254:   return(-1);",
      "261:   if (rdata->rbuf.buf != NULL)",
      "262:    OPENSSL_free(rdata->rbuf.buf);",
      "265:   return(-1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "314:             dtls1_get_unprocessed_record(s);",
      "315:             if ( ! dtls1_process_record(s))",
      "316:                 return(0);",
      "319:             }",
      "320:         }",
      "",
      "[Removed Lines]",
      "317:             dtls1_buffer_record(s, &(s->d1->processed_rcds),",
      "318:                 s->s3->rrec.seq_num);",
      "",
      "[Added Lines]",
      "321:             if(dtls1_buffer_record(s, &(s->d1->processed_rcds),",
      "322:                 s->s3->rrec.seq_num)<0)",
      "323:                 return -1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "569:  if (dtls1_get_processed_record(s))",
      "",
      "[Removed Lines]",
      "566:  dtls1_process_buffered_records(s);",
      "",
      "[Added Lines]",
      "570:  if(dtls1_process_buffered_records(s)<0)",
      "571:   return -1;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "703:   {",
      "704:   if ((SSL_in_init(s) || s->in_handshake) && !s->d1->listen)",
      "705:    {",
      "707:    }",
      "708:   rr->length = 0;",
      "709:   s->packet_length = 0;",
      "",
      "[Removed Lines]",
      "706:    dtls1_buffer_record(s, &(s->d1->unprocessed_rcds), rr->seq_num);",
      "",
      "[Added Lines]",
      "711:    if(dtls1_buffer_record(s, &(s->d1->unprocessed_rcds), rr->seq_num)<0)",
      "712:     return -1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "873:   rr->length = 0;",
      "874:   goto start;",
      "875:   }",
      "",
      "[Removed Lines]",
      "872:   dtls1_buffer_record(s, &(s->d1->buffered_app_data), rr->seq_num);",
      "",
      "[Added Lines]",
      "880:   if(dtls1_buffer_record(s, &(s->d1->buffered_app_data), rr->seq_num)<0)",
      "881:    {",
      "882:    SSLerr(SSL_F_DTLS1_READ_BYTES, ERR_R_INTERNAL_ERROR);",
      "883:    return -1;",
      "884:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7c6a3cf2375f5881ef3f3a58ac0fbd0b4663abd1",
      "candidate_info": {
        "commit_hash": "7c6a3cf2375f5881ef3f3a58ac0fbd0b4663abd1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7c6a3cf2375f5881ef3f3a58ac0fbd0b4663abd1",
        "files": [
          "ssl/d1_pkt.c"
        ],
        "message": "A memory leak can occur in dtls1_buffer_record if either of the calls to ssl3_setup_buffers or pqueue_insert fail. The former will fail if there is a malloc failure, whilst the latter will fail if attempting to add a duplicate record to the queue. This should never happen because duplicate records should be detected and dropped before any attempt to add them to the queue. Unfortunately records that arrive that are for the next epoch are not being recorded correctly, and therefore replays are not being detected. Additionally, these \"should not happen\" failures that can occur in dtls1_buffer_record are not being treated as fatal and therefore an attacker could exploit this by sending repeated replay records for the next epoch, eventually causing a DoS through memory exhaustion.\n\nThanks to Chris Mueller for reporting this issue and providing initial\nanalysis and a patch. Further analysis and the final patch was performed by\nMatt Caswell from the OpenSSL development team.\n\nCVE-2015-0206\n\nReviewed-by: Dr Stephen Henson <steve@openssl.org>\n(cherry picked from commit 652ff0f4796eecd8729b4690f2076d1c7ccb2862)",
        "before_after_code_files": [
          "ssl/d1_pkt.c||ssl/d1_pkt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_pkt.c||ssl/d1_pkt.c"
          ],
          "candidate": [
            "ssl/d1_pkt.c||ssl/d1_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_pkt.c||ssl/d1_pkt.c": [
          "File: ssl/d1_pkt.c -> ssl/d1_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:  if (!ssl3_setup_buffers(s))",
          "248:   {",
          "249:   SSLerr(SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR);",
          "250:   OPENSSL_free(rdata);",
          "251:   pitem_free(item);",
          "253:   }",
          "256:  if (pqueue_insert(queue->q, item) == NULL)",
          "257:   {",
          "258:   SSLerr(SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR);",
          "259:   OPENSSL_free(rdata);",
          "260:   pitem_free(item);",
          "262:   }",
          "264:  return(1);",
          "",
          "[Removed Lines]",
          "252:   return(0);",
          "261:   return(0);",
          "",
          "[Added Lines]",
          "250:   if (rdata->rbuf.buf != NULL)",
          "251:    OPENSSL_free(rdata->rbuf.buf);",
          "254:   return(-1);",
          "261:   if (rdata->rbuf.buf != NULL)",
          "262:    OPENSSL_free(rdata->rbuf.buf);",
          "265:   return(-1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314:             dtls1_get_unprocessed_record(s);",
          "315:             if ( ! dtls1_process_record(s))",
          "316:                 return(0);",
          "319:             }",
          "320:         }",
          "",
          "[Removed Lines]",
          "317:             dtls1_buffer_record(s, &(s->d1->processed_rcds),",
          "318:                 s->s3->rrec.seq_num);",
          "",
          "[Added Lines]",
          "321:             if(dtls1_buffer_record(s, &(s->d1->processed_rcds),",
          "322:                 s->s3->rrec.seq_num)<0)",
          "323:                 return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "569:  if (dtls1_get_processed_record(s))",
          "",
          "[Removed Lines]",
          "566:  dtls1_process_buffered_records(s);",
          "",
          "[Added Lines]",
          "570:  if(dtls1_process_buffered_records(s)<0)",
          "571:   return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "703:   {",
          "704:   if ((SSL_in_init(s) || s->in_handshake) && !s->d1->listen)",
          "705:    {",
          "707:    }",
          "708:   rr->length = 0;",
          "709:   s->packet_length = 0;",
          "",
          "[Removed Lines]",
          "706:    dtls1_buffer_record(s, &(s->d1->unprocessed_rcds), rr->seq_num);",
          "",
          "[Added Lines]",
          "711:    if(dtls1_buffer_record(s, &(s->d1->unprocessed_rcds), rr->seq_num)<0)",
          "712:     return -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "871:   rr->length = 0;",
          "872:   goto start;",
          "873:   }",
          "",
          "[Removed Lines]",
          "870:   dtls1_buffer_record(s, &(s->d1->buffered_app_data), rr->seq_num);",
          "",
          "[Added Lines]",
          "878:   if(dtls1_buffer_record(s, &(s->d1->buffered_app_data), rr->seq_num)<0)",
          "879:    {",
          "880:    SSLerr(SSL_F_DTLS1_READ_BYTES, ERR_R_INTERNAL_ERROR);",
          "881:    return -1;",
          "882:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}