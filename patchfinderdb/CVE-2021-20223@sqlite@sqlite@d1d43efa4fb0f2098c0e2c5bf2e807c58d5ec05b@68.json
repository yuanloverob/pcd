{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6d861e523f7b34a6c9f4603a5bfe18fe323d00a",
      "candidate_info": {
        "commit_hash": "b6d861e523f7b34a6c9f4603a5bfe18fe323d00a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6d861e523f7b34a6c9f4603a5bfe18fe323d00a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Add a missing translation from table column numbers to storage table numbers while processing constraints on an UPDATE statement. Ticket [9621dd78a024d07a]\n\nFossilOrigin-Name: 361ea81ae8a13e7d2ec4c2412f30e049bb6ee320980d502c86bedc315cdd3bc0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 591973217f1caf24cde91dc15b7edca2edda05dac8ae2b2cd8d71e7aa072f7d1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1982:               addrJump = addrUniqueOk;",
          "1983:               op = OP_Eq;",
          "1984:             }",
          "1985:             sqlite3VdbeAddOp4(v, op,",
          "1986:                 regOldData+1+x, addrJump, regCmp+i, p4, P4_COLLSEQ",
          "1987:             );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1985:             x = sqlite3TableColumnToStorage(pTab, x);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ea2d42ac3e76c7e2b2fd8d5fdf53f76f09429f3",
      "candidate_info": {
        "commit_hash": "0ea2d42ac3e76c7e2b2fd8d5fdf53f76f09429f3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0ea2d42ac3e76c7e2b2fd8d5fdf53f76f09429f3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "src/prepare.c",
          "src/sqliteInt.h",
          "test/enc.test"
        ],
        "message": "Report an error if the main, or any other, database encoding is modified by an external process (perhaps using the backup API) after the db has been opened.\n\nFossilOrigin-Name: 895bd20b29e223496e1585483c6ce3335ae9050f2e5de4d6b69d0e40df396862",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/enc.test||test/enc.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a5851893c3d71cc823b6ab5df5e58a852cd322fff26290f1ea05b63d67f564a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1838:         for(pEnc=&encnames[0]; pEnc->zName; pEnc++){",
          "1839:           if( 0==sqlite3StrICmp(zRight, pEnc->zName) ){",
          "1840:             u8 enc = pEnc->enc ? pEnc->enc : SQLITE_UTF16NATIVE;",
          "",
          "[Removed Lines]",
          "1829:       for(i=0; i<db->nDb; i++){",
          "1830:         if( db->aDb[i].pBt!=0",
          "1831:          && DbHasProperty(db,i,DB_SchemaLoaded)",
          "1832:          && !DbHasProperty(db,i,DB_Empty)",
          "1833:         ){",
          "1834:           canChangeEnc = 0;",
          "1835:         }",
          "1836:       }",
          "1837:       if( canChangeEnc ){",
          "",
          "[Added Lines]",
          "1827:       if( (db->mDbFlags & DBFLAG_EncodingFixed)==0 ){",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   assert( argc==5 );",
          "92:   UNUSED_PARAMETER2(NotUsed, argc);",
          "93:   assert( sqlite3_mutex_held(db->mutex) );",
          "95:   pData->nInitRow++;",
          "96:   if( db->mallocFailed ){",
          "97:     corruptSchema(pData, argv[1], 0);",
          "",
          "[Removed Lines]",
          "94:   DbClearProperty(db, iDb, DB_Empty);",
          "",
          "[Added Lines]",
          "94:   db->mDbFlags |= DBFLAG_EncodingFixed;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:   InitData initData;",
          "180:   const char *zMasterName;",
          "181:   int openedTransaction = 0;",
          "183:   assert( (db->mDbFlags & DBFLAG_SchemaKnownOk)==0 );",
          "184:   assert( iDb>=0 && iDb<db->nDb );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:   int mask = ((db->mDbFlags & DBFLAG_EncodingFixed) | ~DBFLAG_EncodingFixed);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:   initData.mInitFlags = mFlags;",
          "208:   initData.nInitRow = 0;",
          "209:   sqlite3InitCallback(&initData, 5, (char **)azArg, 0);",
          "210:   if( initData.rc ){",
          "211:     rc = initData.rc;",
          "212:     goto error_out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:   db->mDbFlags &= mask;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "270:       u8 encoding;",
          "271: #ifndef SQLITE_OMIT_UTF16",
          "",
          "[Removed Lines]",
          "269:     if( iDb==0 ){",
          "",
          "[Added Lines]",
          "271:     if( iDb==0 && (db->mDbFlags & DBFLAG_EncodingFixed)==0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "278:       sqlite3SetTextEncoding(db, encoding);",
          "279:     }else{",
          "282:         sqlite3SetString(pzErrMsg, db, \"attached databases must use the same\"",
          "283:             \" text encoding as main database\");",
          "284:         rc = SQLITE_ERROR;",
          "285:         goto initone_error_out;",
          "286:       }",
          "287:     }",
          "290:   }",
          "291:   pDb->pSchema->enc = ENC(db);",
          "",
          "[Removed Lines]",
          "281:       if( meta[BTREE_TEXT_ENCODING-1]!=ENC(db) ){",
          "288:   }else{",
          "289:     DbSetProperty(db, iDb, DB_Empty);",
          "",
          "[Added Lines]",
          "283:       if( (meta[BTREE_TEXT_ENCODING-1] & 3)!=ENC(db) ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/enc.test||test/enc.test": [
          "File: test/enc.test -> test/enc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:   }",
          "170: } {2}",
          "172: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172: #-------------------------------------------------------------------------",
          "173: reset_db",
          "174: forcedelete test.db2",
          "175: forcedelete test.db3",
          "177: do_execsql_test enc-12.0 {",
          "178:   PRAGMA encoding = 'utf-8';",
          "179:   CREATE TABLE t1(a, b, c);",
          "180:   INSERT INTO t1 VALUES('a', 'b', 'c');",
          "181:   ATTACH 'test.db3' AS aux;",
          "182:   CREATE TABLE aux.t3(x, y, z);",
          "183:   INSERT INTO t3 VALUES('xxx', 'yyy', 'zzz');",
          "184:   PRAGMA encoding;",
          "185: } {UTF-8}",
          "187: do_test enc-12.1 {",
          "188:   sqlite3 db2 test.db2",
          "189:   db2 eval {",
          "190:     PRAGMA encoding = 'UTF-16le';",
          "191:     CREATE TABLE t2(d, e, f);",
          "192:     INSERT INTO t2 VALUES('d', 'e', 'f');",
          "193:     PRAGMA encoding;",
          "194:   }",
          "195: } {UTF-16le}",
          "197: do_test enc-12.2 {",
          "198:   db2 backup test.db",
          "199:   db2 close",
          "200: } {}",
          "202: do_catchsql_test enc-12.3 {",
          "203:   SELECT * FROM t2;",
          "204: } {1 {attached databases must use the same text encoding as main database}}",
          "206: db close",
          "207: sqlite3 db test.db3",
          "208: do_execsql_test enc-12.4 {",
          "209:   SELECT * FROM t3;",
          "210:   PRAGMA encoding = 'UTF-16le';",
          "211:   SELECT * FROM t3;",
          "212: } {xxx yyy zzz xxx yyy zzz}",
          "214: db close",
          "215: sqlite3 db test.db3",
          "216: breakpoint",
          "217: do_execsql_test enc-12.5 {",
          "218:   PRAGMA encoding = 'UTF-16le';",
          "219:   PRAGMA encoding;",
          "220: } {UTF-8}",
          "222: reset_db",
          "223: do_execsql_test enc-12.6 {",
          "224:   PRAGMA encoding = 'UTF-8';",
          "225:   CREATE TEMP TABLE t1(a, b, c);",
          "226:   INSERT INTO t1 VALUES('xxx', 'yyy', 'zzz');",
          "227: }",
          "228: do_test enc-12.7 {",
          "229:   sqlite3 db2 test.db2",
          "230:   db2 backup test.db",
          "231:   db2 close",
          "232:   db eval {",
          "233:     SELECT * FROM t1;",
          "234:   }",
          "235: } {xxx yyy zzz}",
          "236: do_catchsql_test enc-12.8 {",
          "237:   SELECT * FROM t2;",
          "238:   SELECT * FROM t1;",
          "239: } {1 {attached databases must use the same text encoding as main database}}",
          "241: db close",
          "242: sqlite3 db test.db",
          "243: do_execsql_test enc-12.9 {",
          "244:   CREATE TEMP TABLE t1(a, b, c);",
          "245:   INSERT INTO t1 VALUES('xxx', 'yyy', 'zzz');",
          "246: }",
          "247: do_execsql_test enc-12.10 {",
          "248:   SELECT * FROM t2;",
          "249:   SELECT * FROM t1;",
          "250: } {d e f xxx yyy zzz}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d95ed789e7105713996f981fbb37e9e132f7626",
      "candidate_info": {
        "commit_hash": "8d95ed789e7105713996f981fbb37e9e132f7626",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8d95ed789e7105713996f981fbb37e9e132f7626",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Fix a typo in a comment.  No changes to code.\n\nFossilOrigin-Name: d4813a8d813f234e819f8ebefbd3ff96d3d69593cc7d716cf0ad6c1a126da827",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ab09ef427181130be09a087b7e572ad4cfb6b3e1b459769ee5ebf046b3ead682",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c"
        ]
      }
    },
    {
      "candidate_hash": "c196219dd48ed7d18ea4ef3ac88db3af4dd03406",
      "candidate_info": {
        "commit_hash": "c196219dd48ed7d18ea4ef3ac88db3af4dd03406",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c196219dd48ed7d18ea4ef3ac88db3af4dd03406",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add options --data-only and --nosys to the \".dump\" command in the CLI.\n\nFossilOrigin-Name: 57123b14a71027c21cb5eee089fcbc9330d07bf9091b01aecc4f9e3b9e4f7b09",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc4bb9433fed519386511796cce475d74100b8ed707cdbffd8cbdf683b0faf35",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3710:   zTable = azArg[0];",
          "3711:   zType = azArg[1];",
          "3712:   zSql = azArg[2];",
          "3718:   }else if( strncmp(zTable, \"sqlite_\", 7)==0 ){",
          "3719:     return 0;",
          "3720:   }else if( strncmp(zSql, \"CREATE VIRTUAL TABLE\", 20)==0 ){",
          "3721:     char *zIns;",
          "3722:     if( !p->writableSchema ){",
          "",
          "[Removed Lines]",
          "3714:   if( strcmp(zTable, \"sqlite_sequence\")==0 ){",
          "3715:     raw_printf(p->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "3716:   }else if( sqlite3_strglob(\"sqlite_stat?\", zTable)==0 ){",
          "3717:     raw_printf(p->out, \"ANALYZE sqlite_schema;\\n\");",
          "",
          "[Added Lines]",
          "3715:   int dataOnly = (p->shellFlgs & SHFLG_DumpDataOnly)!=0;",
          "3716:   int noSys    = (p->shellFlgs & SHFLG_DumpNoSys)!=0;",
          "3718:   if( strcmp(zTable, \"sqlite_sequence\")==0 && !noSys ){",
          "3719:     if( !dataOnly ) raw_printf(p->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "3720:   }else if( sqlite3_strglob(\"sqlite_stat?\", zTable)==0 && !noSys ){",
          "3721:     if( !dataOnly ) raw_printf(p->out, \"ANALYZE sqlite_schema;\\n\");",
          "3724:   }else if( dataOnly ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3889:   \".dbinfo ?DB?             Show status information about the database\",",
          "3890:   \".dump ?TABLE?            Render database content as SQL\",",
          "3891:   \"   Options:\",",
          "3893:   \"     --newlines             Allow unescaped newline characters in output\",",
          "3894:   \"   TABLE is a LIKE pattern for the tables to dump\",",
          "3895:   \"   Additional LIKE patterns can be given in subsequent arguments\",",
          "3896:   \".echo on|off             Turn command echo on or off\",",
          "",
          "[Removed Lines]",
          "3892:   \"     --preserve-rowids      Include ROWID values in the output\",",
          "",
          "[Added Lines]",
          "3898:   \"     --data-only            Output only INSERT statements\",",
          "3900:   \"     --nosys                Omit system tables (ex: \\\"sqlite_stat1\\\")\",",
          "3901:   \"     --preserve-rowids      Include ROWID values in the output\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7692:     int i;",
          "7693:     int savedShowHeader = p->showHeader;",
          "7694:     int savedShellFlags = p->shellFlgs;",
          "7696:     for(i=1; i<nArg; i++){",
          "7697:       if( azArg[i][0]=='-' ){",
          "7698:         const char *z = azArg[i]+1;",
          "",
          "[Removed Lines]",
          "7695:     ShellClearFlag(p, SHFLG_PreserveRowid|SHFLG_Newlines|SHFLG_Echo);",
          "",
          "[Added Lines]",
          "7703:     ShellClearFlag(p,",
          "7704:        SHFLG_PreserveRowid|SHFLG_Newlines|SHFLG_Echo",
          "7705:        |SHFLG_DumpDataOnly|SHFLG_DumpNoSys);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7711:         if( strcmp(z,\"newlines\")==0 ){",
          "7712:           ShellSetFlag(p, SHFLG_Newlines);",
          "7713:         }else",
          "7714:         {",
          "7715:           raw_printf(stderr, \"Unknown option \\\"%s\\\" on \\\".dump\\\"\\n\", azArg[i]);",
          "7716:           rc = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7724:         if( strcmp(z,\"data-only\")==0 ){",
          "7725:           ShellSetFlag(p, SHFLG_DumpDataOnly);",
          "7726:         }else",
          "7727:         if( strcmp(z,\"nosys\")==0 ){",
          "7728:           ShellSetFlag(p, SHFLG_DumpNoSys);",
          "7729:         }else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7728:     open_db(p, 0);",
          "7735:     p->writableSchema = 0;",
          "7736:     p->showHeader = 0;",
          "",
          "[Removed Lines]",
          "7733:     raw_printf(p->out, \"PRAGMA foreign_keys=OFF;\\n\");",
          "7734:     raw_printf(p->out, \"BEGIN TRANSACTION;\\n\");",
          "",
          "[Added Lines]",
          "7746:     if( (p->shellFlgs & SHFLG_DumpDataOnly)==0 ){",
          "7750:       raw_printf(p->out, \"PRAGMA foreign_keys=OFF;\\n\");",
          "7751:       raw_printf(p->out, \"BEGIN TRANSACTION;\\n\");",
          "7752:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7749:     );",
          "7750:     run_schema_dump_query(p,zSql);",
          "7751:     sqlite3_free(zSql);",
          "7760:     sqlite3_free(zLike);",
          "7761:     if( p->writableSchema ){",
          "7762:       raw_printf(p->out, \"PRAGMA writable_schema=OFF;\\n\");",
          "",
          "[Removed Lines]",
          "7752:     zSql = sqlite3_mprintf(",
          "7753:       \"SELECT sql FROM sqlite_schema \"",
          "7754:       \"WHERE (%s) AND sql NOT NULL\"",
          "7755:       \"  AND type IN ('index','trigger','view')\",",
          "7756:       zLike",
          "7757:     );",
          "7758:     run_table_dump_query(p, zSql);",
          "7759:     sqlite3_free(zSql);",
          "",
          "[Added Lines]",
          "7770:     if( (p->shellFlgs & SHFLG_DumpDataOnly)==0 ){",
          "7771:       zSql = sqlite3_mprintf(",
          "7772:         \"SELECT sql FROM sqlite_schema \"",
          "7773:         \"WHERE (%s) AND sql NOT NULL\"",
          "7774:         \"  AND type IN ('index','trigger','view')\",",
          "7775:         zLike",
          "7776:       );",
          "7777:       run_table_dump_query(p, zSql);",
          "7778:       sqlite3_free(zSql);",
          "7779:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7764:     }",
          "7765:     sqlite3_exec(p->db, \"PRAGMA writable_schema=OFF;\", 0, 0, 0);",
          "7766:     sqlite3_exec(p->db, \"RELEASE dump;\", 0, 0, 0);",
          "7768:     p->showHeader = savedShowHeader;",
          "7769:     p->shellFlgs = savedShellFlags;",
          "7770:   }else",
          "",
          "[Removed Lines]",
          "7767:     raw_printf(p->out, p->nErr?\"ROLLBACK; -- due to errors\\n\":\"COMMIT;\\n\");",
          "",
          "[Added Lines]",
          "7787:     if( (p->shellFlgs & SHFLG_DumpDataOnly)==0 ){",
          "7788:       raw_printf(p->out, p->nErr?\"ROLLBACK; -- due to errors\\n\":\"COMMIT;\\n\");",
          "7789:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "becd68ba0dac41904aa817d96a67fb4685734b41",
      "candidate_info": {
        "commit_hash": "becd68ba0dac41904aa817d96a67fb4685734b41",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/becd68ba0dac41904aa817d96a67fb4685734b41",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3snippet2.test"
        ],
        "message": "Fix a use-after-free bug in the fts3 snippet() function.\n\nFossilOrigin-Name: 0d69f76f0865f9626078bee087a22fb826407279e78cf9d5382e1c985c9f64a9",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3snippet2.test||test/fts3snippet2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5317:                 fts3EvalNextRow(pCsr, pLeft, pRc);",
          "5318:               }",
          "5319:             }",
          "5320:           }",
          "5321:         }",
          "5322:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5320:             pRight->bEof = pLeft->bEof = 1;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 043a7e142dfc2b0da5fbc0b025d005ccad4886f0b0ff65426ba9155ca40394ca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3snippet2.test||test/fts3snippet2.test": [
          "File: test/fts3snippet2.test -> test/fts3snippet2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   SELECT snippet(t0)  FROM t0 WHERE t0 MATCH x'0a4d4d4d4d320a4f52d70a310a310a4e4541520a0a31f6ce0a4f520a0a310a310a310a4f520a75fc2a242424' ;",
          "44: } {<b>1</b>}",
          "46: set sqlite_fts3_enable_parentheses 0",
          "47: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: reset_db",
          "47: do_execsql_test 2.1 {",
          "48:   CREATE VIRTUAL TABLE t0 USING fts3(",
          "49:       col0 INTEGER PRIMARY KEY,col1 VARCHAR(8),col2 BINARY,col3 BINARY",
          "50:   );",
          "51:   INSERT INTO t0 VALUES ('one', '1234','aaaa','bbbb');",
          "52: }",
          "53: do_execsql_test 2.2 {",
          "54:   SELECT snippet(t0)  FROM t0 WHERE t0 MATCH",
          "55:   '(def AND (one NEAR abc)) OR one'",
          "56: } {<b>one</b>}",
          "",
          "---------------"
        ]
      }
    }
  ]
}