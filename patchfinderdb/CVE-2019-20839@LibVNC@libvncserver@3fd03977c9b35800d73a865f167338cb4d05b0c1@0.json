{
  "cve_id": "CVE-2019-20839",
  "cve_desc": "libvncclient/sockets.c in LibVNCServer before 0.9.13 has a buffer overflow via a long socket filename.",
  "repo": "LibVNC/libvncserver",
  "patch_hash": "3fd03977c9b35800d73a865f167338cb4d05b0c1",
  "patch_info": {
    "commit_hash": "3fd03977c9b35800d73a865f167338cb4d05b0c1",
    "repo": "LibVNC/libvncserver",
    "commit_url": "https://github.com/LibVNC/libvncserver/commit/3fd03977c9b35800d73a865f167338cb4d05b0c1",
    "files": [
      "libvncclient/sockets.c"
    ],
    "message": "libvncclient: bail out if unix socket name would overflow\n\nCloses #291",
    "before_after_code_files": [
      "libvncclient/sockets.c||libvncclient/sockets.c"
    ]
  },
  "patch_diff": {
    "libvncclient/sockets.c||libvncclient/sockets.c": [
      "File: libvncclient/sockets.c -> libvncclient/sockets.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "461:   int sock;",
      "462:   struct sockaddr_un addr;",
      "463:   addr.sun_family = AF_UNIX;",
      "464:   strcpy(addr.sun_path, sockFile);",
      "466:   sock = socket(AF_UNIX, SOCK_STREAM, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "464:   if(strlen(sockFile) + 1 > sizeof(addr.sun_path)) {",
      "465:       rfbClientErr(\"ConnectToUnixSock: socket file name too long\\n\");",
      "466:       return -1;",
      "467:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1f6da568b27629c6da1d6b356e430f4e0be3d3ee",
      "candidate_info": {
        "commit_hash": "1f6da568b27629c6da1d6b356e430f4e0be3d3ee",
        "repo": "LibVNC/libvncserver",
        "commit_url": "https://github.com/LibVNC/libvncserver/commit/1f6da568b27629c6da1d6b356e430f4e0be3d3ee",
        "files": [
          "examples/repeater.c",
          "libvncclient/listen.c",
          "libvncclient/rfbproto.c",
          "libvncclient/sasl.c",
          "libvncclient/sockets.c",
          "libvncclient/tls_gnutls.c",
          "libvncclient/vncviewer.c",
          "libvncserver/httpd.c",
          "libvncserver/main.c",
          "libvncserver/rfbserver.c",
          "libvncserver/sockets.c",
          "rfb/rfb.h",
          "rfb/rfbclient.h",
          "rfb/rfbproto.h"
        ],
        "message": "Use platform-specific type for socket FDs\n\nThe Windows Sockets 2 API uses the type SOCKET for all functions and is\ndefined as an unsigned integer with an architecture-specific width.\nStoring the result of WS2 functions in an integer field is therefore\ninsufficient and may lead to a wrong behaviour. Additionally invalid\nsockets are not represented by negative numbers but the constant\nINVALID_SOCKETS.\n\nThis commit wraps the platform-specific socket type and a constant for\nan invalid socket.",
        "before_after_code_files": [
          "examples/repeater.c||examples/repeater.c",
          "libvncclient/listen.c||libvncclient/listen.c",
          "libvncclient/rfbproto.c||libvncclient/rfbproto.c",
          "libvncclient/sasl.c||libvncclient/sasl.c",
          "libvncclient/sockets.c||libvncclient/sockets.c",
          "libvncclient/tls_gnutls.c||libvncclient/tls_gnutls.c",
          "libvncclient/vncviewer.c||libvncclient/vncviewer.c",
          "libvncserver/httpd.c||libvncserver/httpd.c",
          "libvncserver/main.c||libvncserver/main.c",
          "libvncserver/rfbserver.c||libvncserver/rfbserver.c",
          "libvncserver/sockets.c||libvncserver/sockets.c",
          "rfb/rfb.h||rfb/rfb.h",
          "rfb/rfbclient.h||rfb/rfbclient.h",
          "rfb/rfbproto.h||rfb/rfbproto.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libvncclient/sockets.c||libvncclient/sockets.c"
          ],
          "candidate": [
            "libvncclient/sockets.c||libvncclient/sockets.c"
          ]
        }
      },
      "candidate_diff": {
        "examples/repeater.c||examples/repeater.c": [
          "File: examples/repeater.c -> examples/repeater.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   sock = rfbConnectToTcpAddr(repeaterHost, repeaterPort);",
          "53:     perror(\"connect to repeater\");",
          "54:     return 1;",
          "55:   }",
          "",
          "[Removed Lines]",
          "52:   if (sock < 0) {",
          "",
          "[Added Lines]",
          "52:   if (sock == RFB_INVALID_SOCKET) {",
          "",
          "---------------"
        ],
        "libvncclient/listen.c||libvncclient/listen.c": [
          "File: libvncclient/listen.c -> libvncclient/listen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:   rfbClientErr(\"listenForIncomingConnections on MinGW32 NOT IMPLEMENTED\\n\");",
          "55:   return;",
          "56: #else",
          "58:   fd_set fds;",
          "60:   client->listenSpecified = TRUE;",
          "62:   listenSocket = ListenAtTcpPortAndAddress(client->listenPort, client->listenAddress);",
          "65:     return;",
          "67:   rfbClientLog(\"%s -listen: Listening on port %d\\n\",",
          "",
          "[Removed Lines]",
          "57:   int listenSocket, listen6Socket = -1;",
          "64:   if ((listenSocket < 0))",
          "",
          "[Added Lines]",
          "57:   int listenSocket = RFB_INVALID_SOCKET, listen6Socket = RFB_INVALID_SOCKET;",
          "64:   if (listenSocket == RFB_INVALID_SOCKET)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     {",
          "76:       listen6Socket = ListenAtTcpPortAndAddress(client->listen6Port, client->listen6Address);",
          "79:  return;",
          "81:       rfbClientLog(\"%s -listen: Listening on IPV6 port %d\\n\",",
          "",
          "[Removed Lines]",
          "74:   if (client->listen6Port > 0)",
          "78:       if (listen6Socket < 0)",
          "",
          "[Added Lines]",
          "74:   if (client->listen6Port != RFB_INVALID_SOCKET)",
          "78:       if (listen6Socket == RFB_INVALID_SOCKET)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:     FD_ZERO(&fds);",
          "99:       FD_SET(listenSocket, &fds);",
          "101:       FD_SET(listen6Socket, &fds);",
          "103:     r = select(rfbMax(listenSocket, listen6Socket)+1, &fds, NULL, NULL, NULL);",
          "",
          "[Removed Lines]",
          "98:     if(listenSocket >= 0)",
          "100:     if(listen6Socket >= 0)",
          "",
          "[Added Lines]",
          "98:     if(listenSocket != RFB_INVALID_SOCKET)",
          "100:     if(listen6Socket != RFB_INVALID_SOCKET)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:       else if (FD_ISSET(listen6Socket, &fds))",
          "109:  client->sock = AcceptTcpConnection(client->listen6Sock);",
          "112:  return;",
          "113:       if (!SetNonBlocking(client->sock))",
          "114:  return;",
          "",
          "[Removed Lines]",
          "111:       if (client->sock < 0)",
          "",
          "[Added Lines]",
          "111:       if (client->sock == RFB_INVALID_SOCKET)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160:   client->listenSpecified = TRUE;",
          "163:     {",
          "164:       client->listenSock = ListenAtTcpPortAndAddress(client->listenPort, client->listenAddress);",
          "167:  return -1;",
          "169:       rfbClientLog(\"%s -listennofork: Listening on port %d\\n\",",
          "",
          "[Removed Lines]",
          "162:   if (client->listenSock < 0)",
          "166:       if (client->listenSock < 0)",
          "",
          "[Added Lines]",
          "162:   if (client->listenSock == RFB_INVALID_SOCKET)",
          "166:       if (client->listenSock == RFB_INVALID_SOCKET)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "178:     {",
          "179:       client->listen6Sock = ListenAtTcpPortAndAddress(client->listen6Port, client->listen6Address);",
          "182:  return -1;",
          "184:       rfbClientLog(\"%s -listennofork: Listening on IPV6 port %d\\n\",",
          "",
          "[Removed Lines]",
          "177:   if (client->listen6Port > 0 && client->listen6Sock < 0)",
          "181:       if (client->listen6Sock < 0)",
          "",
          "[Added Lines]",
          "177:   if (client->listen6Port != RFB_INVALID_SOCKET && client->listen6Sock == RFB_INVALID_SOCKET)",
          "181:       if (client->listen6Sock == RFB_INVALID_SOCKET)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "191:   FD_ZERO(&fds);",
          "194:     FD_SET(client->listenSock, &fds);",
          "196:     FD_SET(client->listen6Sock, &fds);",
          "198:   if (timeout < 0)",
          "",
          "[Removed Lines]",
          "193:   if(client->listenSock >= 0)",
          "195:   if(client->listen6Sock >= 0)",
          "",
          "[Added Lines]",
          "193:   if(client->listenSock != RFB_INVALID_SOCKET)",
          "195:   if(client->listen6Sock != RFB_INVALID_SOCKET)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "207:       else if (FD_ISSET(client->listen6Sock, &fds))",
          "208:  client->sock = AcceptTcpConnection(client->listen6Sock);",
          "211:  return -1;",
          "212:       if (!SetNonBlocking(client->sock))",
          "213:  return -1;",
          "216:  close(client->listenSock);",
          "218:       }",
          "220:  close(client->listen6Sock);",
          "222:       }",
          "223:       return r;",
          "224:     }",
          "",
          "[Removed Lines]",
          "210:       if (client->sock < 0)",
          "215:       if(client->listenSock >= 0) {",
          "217:  client->listenSock = -1;",
          "219:       if(client->listen6Sock >= 0) {",
          "221:  client->listen6Sock = -1;",
          "",
          "[Added Lines]",
          "210:       if (client->sock == RFB_INVALID_SOCKET)",
          "215:       if(client->listenSock != RFB_INVALID_SOCKET) {",
          "217:  client->listenSock = RFB_INVALID_SOCKET;",
          "219:       if(client->listen6Sock != RFB_INVALID_SOCKET) {",
          "221:  client->listen6Sock = RFB_INVALID_SOCKET;",
          "",
          "---------------"
        ],
        "libvncclient/rfbproto.c||libvncclient/rfbproto.c": [
          "File: libvncclient/rfbproto.c -> libvncclient/rfbproto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <errno.h>",
          "38: #include <rfb/rfbclient.h>",
          "39: #ifdef WIN32",
          "41: #undef socklen_t",
          "42: #endif",
          "43: #ifdef LIBVNCSERVER_HAVE_LIBZ",
          "",
          "[Removed Lines]",
          "40: #undef SOCKET",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:       fclose(rec->file);",
          "321:       return FALSE;",
          "322:     }",
          "324:     return TRUE;",
          "325:   }",
          "",
          "[Removed Lines]",
          "323:     client->sock = -1;",
          "",
          "[Added Lines]",
          "322:     client->sock = RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "333:   {",
          "334: #ifdef LIBVNCSERVER_IPv6",
          "335:     client->sock = ConnectClientToTcpAddr6(hostname, port);",
          "337: #endif",
          "338:     {",
          "339:       unsigned int host;",
          "",
          "[Removed Lines]",
          "336:     if (client->sock == -1)",
          "",
          "[Added Lines]",
          "335:     if (client->sock == RFB_INVALID_SOCKET)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "347:     }",
          "348:   }",
          "351:     rfbClientLog(\"Unable to connect to VNC server\\n\");",
          "352:     return FALSE;",
          "353:   }",
          "",
          "[Removed Lines]",
          "350:   if (client->sock < 0) {",
          "",
          "[Added Lines]",
          "349:   if (client->sock == RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "382:     client->sock = ConnectClientToTcpAddr(host, repeaterPort);",
          "383:   }",
          "386:     rfbClientLog(\"Unable to connect to VNC repeater\\n\");",
          "387:     return FALSE;",
          "388:   }",
          "",
          "[Removed Lines]",
          "385:   if (client->sock < 0) {",
          "",
          "[Added Lines]",
          "384:   if (client->sock == RFB_INVALID_SOCKET) {",
          "",
          "---------------"
        ],
        "libvncclient/sasl.c||libvncclient/sasl.c": [
          "File: libvncclient/sasl.c -> libvncclient/sasl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <rfb/rfbclient.h>",
          "41: #ifdef WIN32",
          "43: #include <winsock2.h>",
          "44: #ifdef EWOULDBLOCK",
          "45: #undef EWOULDBLOCK",
          "",
          "[Removed Lines]",
          "42: #undef SOCKET",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libvncclient/sockets.c||libvncclient/sockets.c": [
          "File: libvncclient/sockets.c -> libvncclient/sockets.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include <assert.h>",
          "39: #include <rfb/rfbclient.h>",
          "40: #ifdef WIN32",
          "42: #include <winsock2.h>",
          "43: #ifdef EWOULDBLOCK",
          "44: #undef EWOULDBLOCK",
          "",
          "[Removed Lines]",
          "41: #undef SOCKET",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "354: ConnectClientToTcpAddr(unsigned int host, int port)",
          "355: {",
          "357:   struct sockaddr_in addr;",
          "358:   int one = 1;",
          "360:   if (!initSockets())",
          "363:   addr.sin_family = AF_INET;",
          "364:   addr.sin_port = htons(port);",
          "365:   addr.sin_addr.s_addr = host;",
          "367:   sock = socket(AF_INET, SOCK_STREAM, 0);",
          "369: #ifdef WIN32",
          "370:     errno=WSAGetLastError();",
          "371: #endif",
          "372:     rfbClientErr(\"ConnectToTcpAddr: socket (%s)\\n\",strerror(errno));",
          "374:   }",
          "376:   if (connect(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0) {",
          "377:     rfbClientErr(\"ConnectToTcpAddr: connect\\n\");",
          "378:     close(sock);",
          "380:   }",
          "382:   if (setsockopt(sock, IPPROTO_TCP, TCP_NODELAY,",
          "383:    (char *)&one, sizeof(one)) < 0) {",
          "384:     rfbClientErr(\"ConnectToTcpAddr: setsockopt\\n\");",
          "385:     close(sock);",
          "387:   }",
          "389:   return sock;",
          "390: }",
          "393: ConnectClientToTcpAddr6(const char *hostname, int port)",
          "394: {",
          "395: #ifdef LIBVNCSERVER_IPv6",
          "397:   int n;",
          "398:   struct addrinfo hints, *res, *ressave;",
          "399:   char port_s[10];",
          "400:   int one = 1;",
          "402:   if (!initSockets())",
          "405:   snprintf(port_s, 10, \"%d\", port);",
          "406:   memset(&hints, 0, sizeof(struct addrinfo));",
          "",
          "[Removed Lines]",
          "353: int",
          "356:   int sock;",
          "361:    return -1;",
          "368:   if (sock < 0) {",
          "373:     return -1;",
          "379:     return -1;",
          "386:     return -1;",
          "392: int",
          "396:   int sock;",
          "403:    return -1;",
          "",
          "[Added Lines]",
          "352: rfbSocket",
          "355:   rfbSocket sock;",
          "360:    return RFB_INVALID_SOCKET;",
          "367:   if (sock == RFB_INVALID_SOCKET) {",
          "372:     return RFB_INVALID_SOCKET;",
          "378:     return RFB_INVALID_SOCKET;",
          "385:     return RFB_INVALID_SOCKET;",
          "391: rfbSocket",
          "395:   rfbSocket sock;",
          "402:    return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "409:   if ((n = getaddrinfo(hostname, port_s, &hints, &res)))",
          "410:   {",
          "411:     rfbClientErr(\"ConnectClientToTcpAddr6: getaddrinfo (%s)\\n\", gai_strerror(n));",
          "413:   }",
          "415:   ressave = res;",
          "417:   while (res)",
          "418:   {",
          "419:     sock = socket(res->ai_family, res->ai_socktype, res->ai_protocol);",
          "421:     {",
          "422:       if (connect(sock, res->ai_addr, res->ai_addrlen) == 0)",
          "423:         break;",
          "424:       close(sock);",
          "426:     }",
          "427:     res = res->ai_next;",
          "428:   }",
          "429:   freeaddrinfo(ressave);",
          "432:   {",
          "433:     rfbClientErr(\"ConnectClientToTcpAddr6: connect\\n\");",
          "435:   }",
          "437:   if (setsockopt(sock, IPPROTO_TCP, TCP_NODELAY,",
          "438:    (char *)&one, sizeof(one)) < 0) {",
          "439:     rfbClientErr(\"ConnectToTcpAddr: setsockopt\\n\");",
          "440:     close(sock);",
          "442:   }",
          "444:   return sock;",
          "",
          "[Removed Lines]",
          "412:     return -1;",
          "416:   sock = -1;",
          "420:     if (sock >= 0)",
          "425:       sock = -1;",
          "431:   if (sock == -1)",
          "434:     return -1;",
          "441:     return -1;",
          "",
          "[Added Lines]",
          "411:     return RFB_INVALID_SOCKET;",
          "415:   sock = RFB_INVALID_SOCKET;",
          "419:     if (sock != RFB_INVALID_SOCKET)",
          "424:       sock = RFB_INVALID_SOCKET;",
          "430:   if (sock == RFB_INVALID_SOCKET)",
          "433:     return RFB_INVALID_SOCKET;",
          "440:     return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "446: #else",
          "448:   rfbClientErr(\"ConnectClientToTcpAddr6: IPv6 disabled\\n\");",
          "451: #endif",
          "452: }",
          "455: ConnectClientToUnixSock(const char *sockFile)",
          "456: {",
          "457: #ifdef WIN32",
          "458:   rfbClientErr(\"Windows doesn't support UNIX sockets\\n\");",
          "460: #else",
          "462:   struct sockaddr_un addr;",
          "463:   addr.sun_family = AF_UNIX;",
          "464:   if(strlen(sockFile) + 1 > sizeof(addr.sun_path)) {",
          "465:       rfbClientErr(\"ConnectToUnixSock: socket file name too long\\n\");",
          "467:   }",
          "468:   strcpy(addr.sun_path, sockFile);",
          "470:   sock = socket(AF_UNIX, SOCK_STREAM, 0);",
          "472:     rfbClientErr(\"ConnectToUnixSock: socket (%s)\\n\",strerror(errno));",
          "474:   }",
          "476:   if (connect(sock, (struct sockaddr *)&addr, sizeof(addr.sun_family) + strlen(addr.sun_path)) < 0) {",
          "477:     rfbClientErr(\"ConnectToUnixSock: connect\\n\");",
          "478:     close(sock);",
          "480:   }",
          "482:   return sock;",
          "",
          "[Removed Lines]",
          "449:   return -1;",
          "454: int",
          "459:   return -1;",
          "461:   int sock;",
          "466:       return -1;",
          "471:   if (sock < 0) {",
          "473:     return -1;",
          "479:     return -1;",
          "",
          "[Added Lines]",
          "448:   return RFB_INVALID_SOCKET;",
          "453: rfbSocket",
          "458:   return RFB_INVALID_SOCKET;",
          "460:   rfbSocket sock;",
          "465:       return RFB_INVALID_SOCKET;",
          "470:   if (sock == RFB_INVALID_SOCKET) {",
          "472:     return RFB_INVALID_SOCKET;",
          "478:     return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "493: int",
          "494: FindFreeTcpPort(void)",
          "495: {",
          "497:   struct sockaddr_in addr;",
          "499:   addr.sin_family = AF_INET;",
          "",
          "[Removed Lines]",
          "496:   int sock, port;",
          "",
          "[Added Lines]",
          "495:   rfbSocket sock;",
          "496:   int port;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "503:     return -1;",
          "505:   sock = socket(AF_INET, SOCK_STREAM, 0);",
          "507:     rfbClientErr(\": FindFreeTcpPort: socket\\n\");",
          "508:     return 0;",
          "509:   }",
          "",
          "[Removed Lines]",
          "506:   if (sock < 0) {",
          "",
          "[Added Lines]",
          "506:   if (sock == RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "529: ListenAtTcpPort(int port)",
          "530: {",
          "531:   return ListenAtTcpPortAndAddress(port, NULL);",
          "",
          "[Removed Lines]",
          "528: int",
          "",
          "[Added Lines]",
          "528: rfbSocket",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "542: ListenAtTcpPortAndAddress(int port, const char *address)",
          "543: {",
          "545:   int one = 1;",
          "546: #ifndef LIBVNCSERVER_IPv6",
          "547:   struct sockaddr_in addr;",
          "",
          "[Removed Lines]",
          "541: int",
          "544:   int sock;",
          "",
          "[Added Lines]",
          "541: rfbSocket",
          "544:   rfbSocket sock = RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "555:   }",
          "557:   if (!initSockets())",
          "560:   sock = socket(AF_INET, SOCK_STREAM, 0);",
          "562:     rfbClientErr(\"ListenAtTcpPort: socket\\n\");",
          "564:   }",
          "566:   if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR,",
          "567:    (const char *)&one, sizeof(one)) < 0) {",
          "568:     rfbClientErr(\"ListenAtTcpPort: setsockopt\\n\");",
          "569:     close(sock);",
          "571:   }",
          "573:   if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0) {",
          "574:     rfbClientErr(\"ListenAtTcpPort: bind\\n\");",
          "575:     close(sock);",
          "577:   }",
          "579: #else",
          "",
          "[Removed Lines]",
          "558:     return -1;",
          "561:   if (sock < 0) {",
          "563:     return -1;",
          "570:     return -1;",
          "576:     return -1;",
          "",
          "[Added Lines]",
          "558:     return RFB_INVALID_SOCKET;",
          "561:   if (sock == RFB_INVALID_SOCKET) {",
          "563:     return RFB_INVALID_SOCKET;",
          "570:     return RFB_INVALID_SOCKET;",
          "576:     return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "591:   if (!initSockets())",
          "594:   if ((rv = getaddrinfo(address, port_str, &hints, &servinfo)) != 0) {",
          "595:     rfbClientErr(\"ListenAtTcpPortAndAddress: error in getaddrinfo: %s\\n\", gai_strerror(rv));",
          "597:   }",
          "600:   for(p = servinfo; p != NULL; p = p->ai_next) {",
          "602:       continue;",
          "603:     }",
          "",
          "[Removed Lines]",
          "592:     return -1;",
          "596:     return -1;",
          "601:     if ((sock = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) < 0) {",
          "",
          "[Added Lines]",
          "592:     return RFB_INVALID_SOCKET;",
          "596:     return RFB_INVALID_SOCKET;",
          "601:     if ((sock = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) == RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "608:       rfbClientErr(\"ListenAtTcpPortAndAddress: error in setsockopt IPV6_V6ONLY: %s\\n\", strerror(errno));",
          "609:       close(sock);",
          "610:       freeaddrinfo(servinfo);",
          "612:     }",
          "613: #endif",
          "",
          "[Removed Lines]",
          "611:       return -1;",
          "",
          "[Added Lines]",
          "611:       return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "616:       rfbClientErr(\"ListenAtTcpPortAndAddress: error in setsockopt SO_REUSEADDR: %s\\n\", strerror(errno));",
          "617:       close(sock);",
          "618:       freeaddrinfo(servinfo);",
          "620:     }",
          "622:     if (bind(sock, p->ai_addr, p->ai_addrlen) < 0) {",
          "",
          "[Removed Lines]",
          "619:       return -1;",
          "",
          "[Added Lines]",
          "619:       return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "630:   if (p == NULL)  {",
          "631:     rfbClientErr(\"ListenAtTcpPortAndAddress: error in bind: %s\\n\", strerror(errno));",
          "633:   }",
          "",
          "[Removed Lines]",
          "632:     return -1;",
          "",
          "[Added Lines]",
          "632:     return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "639:   if (listen(sock, 5) < 0) {",
          "640:     rfbClientErr(\"ListenAtTcpPort: listen\\n\");",
          "641:     close(sock);",
          "643:   }",
          "645:   return sock;",
          "",
          "[Removed Lines]",
          "642:     return -1;",
          "",
          "[Added Lines]",
          "642:     return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "655: {",
          "657:   struct sockaddr_in addr;",
          "658:   socklen_t addrlen = sizeof(addr);",
          "659:   int one = 1;",
          "661:   sock = accept(listenSock, (struct sockaddr *) &addr, &addrlen);",
          "663:     rfbClientErr(\"AcceptTcpConnection: accept\\n\");",
          "665:   }",
          "667:   if (setsockopt(sock, IPPROTO_TCP, TCP_NODELAY,",
          "668:    (char *)&one, sizeof(one)) < 0) {",
          "669:     rfbClientErr(\"AcceptTcpConnection: setsockopt\\n\");",
          "670:     close(sock);",
          "672:   }",
          "674:   return sock;",
          "",
          "[Removed Lines]",
          "653: int",
          "654: AcceptTcpConnection(int listenSock)",
          "656:   int sock;",
          "662:   if (sock < 0) {",
          "664:     return -1;",
          "671:     return -1;",
          "",
          "[Added Lines]",
          "653: rfbSocket",
          "654: AcceptTcpConnection(rfbSocket listenSock)",
          "656:   rfbSocket sock;",
          "662:   if (sock == RFB_INVALID_SOCKET) {",
          "664:     return RFB_INVALID_SOCKET;",
          "671:     return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "682: rfbBool",
          "684: {",
          "685: #ifdef WIN32",
          "686:   unsigned long block=1;",
          "",
          "[Removed Lines]",
          "683: SetNonBlocking(int sock)",
          "",
          "[Added Lines]",
          "683: SetNonBlocking(rfbSocket sock)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "705: rfbBool",
          "707: {",
          "708: #ifdef WIN32",
          "709:   rfbClientErr(\"Setting of QoS IP DSCP not implemented for Windows\\n\");",
          "",
          "[Removed Lines]",
          "706: SetDSCP(int sock, int dscp)",
          "",
          "[Added Lines]",
          "706: SetDSCP(rfbSocket sock, int dscp)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "766:     return TRUE;",
          "768:   if (!initSockets())",
          "771:   hp = gethostbyname(str);",
          "",
          "[Removed Lines]",
          "769:    return -1;",
          "",
          "[Added Lines]",
          "769:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "786: rfbBool",
          "788: {",
          "789:   struct sockaddr_in peeraddr, myaddr;",
          "790:   socklen_t addrlen = sizeof(struct sockaddr_in);",
          "",
          "[Removed Lines]",
          "787: SameMachine(int sock)",
          "",
          "[Added Lines]",
          "787: SameMachine(rfbSocket sock)",
          "",
          "---------------"
        ],
        "libvncclient/tls_gnutls.c||libvncclient/tls_gnutls.c": [
          "File: libvncclient/tls_gnutls.c -> libvncclient/tls_gnutls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <rfb/rfbclient.h>",
          "23: #include <errno.h>",
          "24: #ifdef WIN32",
          "28: #include <winsock2.h>",
          "",
          "[Removed Lines]",
          "25: #undef SOCKET",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libvncclient/vncviewer.c||libvncclient/vncviewer.c": [
          "File: libvncclient/vncviewer.c -> libvncclient/vncviewer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #ifdef WIN32",
          "26: #include <winsock2.h>",
          "27: #endif",
          "",
          "[Removed Lines]",
          "25: #undef SOCKET",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343:   client->tlsSession = NULL;",
          "344:   client->LockWriteToTLS = NULL;",
          "345:   client->UnlockWriteToTLS = NULL;",
          "348:   client->listenAddress = NULL;",
          "350:   client->listen6Address = NULL;",
          "351:   client->clientAuthSchemes = NULL;",
          "",
          "[Removed Lines]",
          "346:   client->sock = -1;",
          "347:   client->listenSock = -1;",
          "349:   client->listen6Sock = -1;",
          "",
          "[Added Lines]",
          "345:   client->sock = RFB_INVALID_SOCKET;",
          "346:   client->listenSock = RFB_INVALID_SOCKET;",
          "348:   client->listen6Sock = RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "533:     client->clientData = next;",
          "534:   }",
          "537:     close(client->sock);",
          "539:     close(client->listenSock);",
          "540:   free(client->desktopName);",
          "541:   free(client->serverHost);",
          "",
          "[Removed Lines]",
          "536:   if (client->sock >= 0)",
          "538:   if (client->listenSock >= 0)",
          "",
          "[Added Lines]",
          "535:   if (client->sock != RFB_INVALID_SOCKET)",
          "537:   if (client->listenSock != RFB_INVALID_SOCKET)",
          "",
          "---------------"
        ],
        "libvncserver/httpd.c||libvncserver/httpd.c": [
          "File: libvncserver/httpd.c -> libvncserver/httpd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:     }",
          "117:     if ((rfbScreen->httpListenSock =",
          "119:  rfbLogPerror(\"ListenOnTCPPort\");",
          "120:  return;",
          "121:     }",
          "",
          "[Removed Lines]",
          "118:       rfbListenOnTCPPort(rfbScreen->httpPort, rfbScreen->listenInterface)) < 0) {",
          "",
          "[Added Lines]",
          "118:       rfbListenOnTCPPort(rfbScreen->httpPort, rfbScreen->listenInterface)) == RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     }",
          "130:     if ((rfbScreen->httpListen6Sock",
          "133:       return;",
          "134:     }",
          "",
          "[Removed Lines]",
          "131:   = rfbListenOnTCP6Port(rfbScreen->http6Port, rfbScreen->listen6Interface)) < 0) {",
          "",
          "[Added Lines]",
          "131:   = rfbListenOnTCP6Port(rfbScreen->http6Port, rfbScreen->listen6Interface)) == RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:     if(rfbScreen->httpSock>-1) {",
          "142:  close(rfbScreen->httpSock);",
          "143:  FD_CLR(rfbScreen->httpSock,&rfbScreen->allFds);",
          "145:     }",
          "147:     if(rfbScreen->httpListenSock>-1) {",
          "148:  close(rfbScreen->httpListenSock);",
          "149:  FD_CLR(rfbScreen->httpListenSock,&rfbScreen->allFds);",
          "151:     }",
          "153:     if(rfbScreen->httpListen6Sock>-1) {",
          "154:  close(rfbScreen->httpListen6Sock);",
          "155:  FD_CLR(rfbScreen->httpListen6Sock,&rfbScreen->allFds);",
          "157:     }",
          "158: }",
          "",
          "[Removed Lines]",
          "144:  rfbScreen->httpSock=-1;",
          "150:  rfbScreen->httpListenSock=-1;",
          "156:  rfbScreen->httpListen6Sock=-1;",
          "",
          "[Added Lines]",
          "144:  rfbScreen->httpSock=RFB_INVALID_SOCKET;",
          "150:  rfbScreen->httpListenSock=RFB_INVALID_SOCKET;",
          "156:  rfbScreen->httpListen6Sock=RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:     if (!rfbScreen->httpDir)",
          "179:  return;",
          "182:  return;",
          "184:     FD_ZERO(&fds);",
          "185:     FD_SET(rfbScreen->httpListenSock, &fds);",
          "187:  FD_SET(rfbScreen->httpListen6Sock, &fds);",
          "188:     }",
          "190:  FD_SET(rfbScreen->httpSock, &fds);",
          "191:     }",
          "192:     tv.tv_sec = 0;",
          "",
          "[Removed Lines]",
          "181:     if (rfbScreen->httpListenSock < 0)",
          "186:     if (rfbScreen->httpListen6Sock >= 0) {",
          "189:     if (rfbScreen->httpSock >= 0) {",
          "",
          "[Added Lines]",
          "181:     if (rfbScreen->httpListenSock == RFB_INVALID_SOCKET)",
          "186:     if (rfbScreen->httpListen6Sock != RFB_INVALID_SOCKET) {",
          "189:     if (rfbScreen->httpSock != RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "204:  return;",
          "205:     }",
          "208:  httpProcessInput(rfbScreen);",
          "209:     }",
          "211:     if (FD_ISSET(rfbScreen->httpListenSock, &fds) || FD_ISSET(rfbScreen->httpListen6Sock, &fds)) {",
          "214:  if(FD_ISSET(rfbScreen->httpListenSock, &fds)) {",
          "216:        rfbLogPerror(\"httpCheckFds: accept\");",
          "217:        return;",
          "218:      }",
          "219:  }",
          "220:  else if(FD_ISSET(rfbScreen->httpListen6Sock, &fds)) {",
          "222:        rfbLogPerror(\"httpCheckFds: accept\");",
          "223:        return;",
          "224:      }",
          "",
          "[Removed Lines]",
          "207:     if ((rfbScreen->httpSock >= 0) && FD_ISSET(rfbScreen->httpSock, &fds)) {",
          "212:  if (rfbScreen->httpSock >= 0) close(rfbScreen->httpSock);",
          "215:      if ((rfbScreen->httpSock = accept(rfbScreen->httpListenSock, (struct sockaddr *)&addr, &addrlen)) < 0) {",
          "221:      if ((rfbScreen->httpSock = accept(rfbScreen->httpListen6Sock, (struct sockaddr *)&addr, &addrlen)) < 0) {",
          "",
          "[Added Lines]",
          "207:     if ((rfbScreen->httpSock != RFB_INVALID_SOCKET) && FD_ISSET(rfbScreen->httpSock, &fds)) {",
          "212:  if (rfbScreen->httpSock != RFB_INVALID_SOCKET) close(rfbScreen->httpSock);",
          "215:      if ((rfbScreen->httpSock = accept(rfbScreen->httpListenSock, (struct sockaddr *)&addr, &addrlen)) == RFB_INVALID_SOCKET) {",
          "221:      if ((rfbScreen->httpSock = accept(rfbScreen->httpListen6Sock, (struct sockaddr *)&addr, &addrlen)) == RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "239:    rfbLog(\"Rejected HTTP connection from client %s\\n\",",
          "240:    host);",
          "241:    close(rfbScreen->httpSock);",
          "243:    return;",
          "244:  }",
          "245: #endif",
          "246:         if(!rfbSetNonBlocking(rfbScreen->httpSock)) {",
          "247:      close(rfbScreen->httpSock);",
          "249:      return;",
          "250:  }",
          "",
          "[Removed Lines]",
          "242:    rfbScreen->httpSock=-1;",
          "248:      rfbScreen->httpSock=-1;",
          "",
          "[Added Lines]",
          "242:    rfbScreen->httpSock=RFB_INVALID_SOCKET;",
          "248:      rfbScreen->httpSock=RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "257: httpCloseSock(rfbScreenInfoPtr rfbScreen)",
          "258: {",
          "259:     close(rfbScreen->httpSock);",
          "261:     buf_filled = 0;",
          "262: }",
          "",
          "[Removed Lines]",
          "260:     rfbScreen->httpSock = -1;",
          "",
          "[Added Lines]",
          "260:     rfbScreen->httpSock = RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "354:      rfbLog(\"httpd: client asked for CONNECT\\n\");",
          "355:      rfbWriteExact(&cl,PROXY_OK_STR,strlen(PROXY_OK_STR));",
          "356:      rfbNewClientConnection(rfbScreen,rfbScreen->httpSock);",
          "358:      return;",
          "359:  }",
          "360:  if (!strncmp(buf, \"GET \",4) && !strncmp(strchr(buf,'/'),\"/proxied.connection HTTP/1.\", 27)) {",
          "",
          "[Removed Lines]",
          "357:      rfbScreen->httpSock = -1;",
          "",
          "[Added Lines]",
          "357:      rfbScreen->httpSock = RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "362:      rfbLog(\"httpd: client asked for /proxied.connection\\n\");",
          "363:      rfbWriteExact(&cl,PROXY_OK_STR,strlen(PROXY_OK_STR));",
          "364:      rfbNewClientConnection(rfbScreen,rfbScreen->httpSock);",
          "366:      return;",
          "367:  }",
          "368:     }",
          "",
          "[Removed Lines]",
          "365:      rfbScreen->httpSock = -1;",
          "",
          "[Added Lines]",
          "365:      rfbScreen->httpSock = RFB_INVALID_SOCKET;",
          "",
          "---------------"
        ],
        "libvncserver/main.c||libvncserver/main.c": [
          "File: libvncserver/main.c -> libvncserver/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "459:     while (1) {",
          "460:         haveUpdate = false;",
          "461:         while (!haveUpdate) {",
          "464:    return NULL;",
          "465:   }",
          "",
          "[Removed Lines]",
          "462:   if (cl->sock == -1) {",
          "",
          "[Added Lines]",
          "462:   if (cl->sock == RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "527:  struct timeval tv;",
          "528:  int n;",
          "532:             break;",
          "533:         }",
          "",
          "[Removed Lines]",
          "530:  if (cl->sock == -1) {",
          "",
          "[Added Lines]",
          "530:  if (cl->sock == RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "609:     while (1) {",
          "610:         client_fd = -1;",
          "611:         FD_ZERO(&listen_fds);",
          "613:    FD_SET(screen->listenSock, &listen_fds);",
          "615:    FD_SET(screen->listen6Sock, &listen_fds);",
          "617:         if (select(screen->maxFd+1, &listen_fds, NULL, NULL, NULL) == -1) {",
          "",
          "[Removed Lines]",
          "612:  if(screen->listenSock >= 0)",
          "614:  if(screen->listen6Sock >= 0)",
          "",
          "[Added Lines]",
          "612:  if(screen->listenSock != RFB_INVALID_SOCKET)",
          "614:  if(screen->listen6Sock != RFB_INVALID_SOCKET)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "889:    screen->socketState=RFB_SOCKET_INIT;",
          "891:    screen->inetdInitDone = FALSE;",
          "895:    screen->udpSockConnected=FALSE;",
          "896:    screen->udpPort=0;",
          "897:    screen->udpClient=NULL;",
          "899:    screen->maxFd=0;",
          "903:    screen->fdQuota = 0.5;",
          "",
          "[Removed Lines]",
          "892:    screen->inetdSock=-1;",
          "894:    screen->udpSock=-1;",
          "900:    screen->listenSock=-1;",
          "901:    screen->listen6Sock=-1;",
          "",
          "[Added Lines]",
          "892:    screen->inetdSock=RFB_INVALID_SOCKET;",
          "894:    screen->udpSock=RFB_INVALID_SOCKET;",
          "900:    screen->listenSock=RFB_INVALID_SOCKET;",
          "901:    screen->listen6Sock=RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "907:    screen->httpPort=0;",
          "908:    screen->http6Port=0;",
          "909:    screen->httpDir=NULL;",
          "914:    screen->desktopName = \"LibVNCServer\";",
          "915:    screen->alwaysShared = FALSE;",
          "",
          "[Removed Lines]",
          "910:    screen->httpListenSock=-1;",
          "911:    screen->httpListen6Sock=-1;",
          "912:    screen->httpSock=-1;",
          "",
          "[Added Lines]",
          "910:    screen->httpListenSock=RFB_INVALID_SOCKET;",
          "911:    screen->httpListen6Sock=RFB_INVALID_SOCKET;",
          "912:    screen->httpSock=RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1138:     while(currentCl) {",
          "1139:       nextCl = rfbClientIteratorNext(iter);",
          "1142:         rfbCloseClient(currentCl);",
          "1143:       }",
          "",
          "[Removed Lines]",
          "1140:       if (currentCl->sock > -1) {",
          "",
          "[Added Lines]",
          "1140:       if (currentCl->sock != RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1202:     result = rfbUpdateClient(cl);",
          "1203:     clPrev=cl;",
          "1204:     cl=rfbClientIteratorNext(i);",
          "1206:       rfbClientConnectionGone(clPrev);",
          "1207:       result=TRUE;",
          "1208:     }",
          "",
          "[Removed Lines]",
          "1205:     if(clPrev->sock==-1) {",
          "",
          "[Added Lines]",
          "1205:     if(clPrev->sock==RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1219:   rfbBool result=FALSE;",
          "1220:   rfbScreenInfoPtr screen = cl->screen;",
          "1223:         !sraRgnEmpty(cl->requestedRegion)) {",
          "1224:       result=TRUE;",
          "1225:       if(screen->deferUpdateTime == 0) {",
          "",
          "[Removed Lines]",
          "1222:   if (cl->sock >= 0 && !cl->onHold && FB_UPDATE_PENDING(cl) &&",
          "",
          "[Added Lines]",
          "1222:   if (cl->sock != RFB_INVALID_SOCKET && !cl->onHold && FB_UPDATE_PENDING(cl) &&",
          "",
          "---------------"
        ],
        "libvncserver/rfbserver.c||libvncserver/rfbserver.c": [
          "File: libvncserver/rfbserver.c -> libvncserver/rfbserver.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "254: void",
          "255: rfbNewClientConnection(rfbScreenInfoPtr rfbScreen,",
          "257: {",
          "258:     rfbNewClient(rfbScreen,sock);",
          "259: }",
          "",
          "[Removed Lines]",
          "256:                        int sock)",
          "",
          "[Added Lines]",
          "256:                        rfbSocket sock)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:                      char *host,",
          "270:                      int port)",
          "271: {",
          "273:     rfbClientPtr cl;",
          "275:     if ((sock = rfbConnect(rfbScreen, host, port)) < 0)",
          "",
          "[Removed Lines]",
          "272:     int sock;",
          "",
          "[Added Lines]",
          "272:     rfbSocket sock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307: static rfbClientPtr",
          "308: rfbNewTCPOrUDPClient(rfbScreenInfoPtr rfbScreen,",
          "310:                      rfbBool isUDP)",
          "311: {",
          "312:     rfbProtocolVersionMsg pv;",
          "",
          "[Removed Lines]",
          "309:                      int sock,",
          "",
          "[Added Lines]",
          "309:                      rfbSocket sock,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "523: rfbClientPtr",
          "524: rfbNewClient(rfbScreenInfoPtr rfbScreen,",
          "526: {",
          "527:   return(rfbNewTCPOrUDPClient(rfbScreen,sock,FALSE));",
          "528: }",
          "",
          "[Removed Lines]",
          "525:              int sock)",
          "",
          "[Added Lines]",
          "525:              rfbSocket sock)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3761: void",
          "3762: rfbNewUDPConnection(rfbScreenInfoPtr rfbScreen,",
          "3764: {",
          "3765:   if (write(sock, (char*) &ptrAcceleration, 1) < 0) {",
          "3766:  rfbLogPerror(\"rfbNewUDPConnection: write\");",
          "",
          "[Removed Lines]",
          "3763:                     int sock)",
          "",
          "[Added Lines]",
          "3763:                     rfbSocket sock)",
          "",
          "---------------"
        ],
        "libvncserver/sockets.c||libvncserver/sockets.c": [
          "File: libvncserver/sockets.c -> libvncserver/sockets.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: static rfbBool",
          "140: {",
          "141:     const int one = 1;",
          "142: #ifdef LIBVNCSERVER_IPv6",
          "",
          "[Removed Lines]",
          "139: rfbNewConnectionFromSock(rfbScreenInfoPtr rfbScreen, int sock)",
          "",
          "[Added Lines]",
          "139: rfbNewConnectionFromSock(rfbScreenInfoPtr rfbScreen, rfbSocket sock)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202: #ifdef LIBVNCSERVER_WITH_SYSTEMD",
          "203:     if (sd_listen_fds(0) == 1)",
          "204:     {",
          "206:         if (sd_is_socket(sock, AF_UNSPEC, 0, 0))",
          "207:             rfbNewConnectionFromSock(rfbScreen, sock);",
          "208:         else if (sd_is_socket(sock, AF_UNSPEC, 0, 1))",
          "",
          "[Removed Lines]",
          "205:         int sock = SD_LISTEN_FDS_START + 0;",
          "",
          "[Added Lines]",
          "205:         rfbSocket sock = SD_LISTEN_FDS_START + 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:         rfbLog(\"Unable to establish connection with systemd socket\\n\");",
          "214: #endif",
          "217:  const int one = 1;",
          "219:         if(!rfbSetNonBlocking(rfbScreen->inetdSock))",
          "",
          "[Removed Lines]",
          "216:     if (rfbScreen->inetdSock != -1) {",
          "",
          "[Added Lines]",
          "216:     if (rfbScreen->inetdSock != RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236:         int i;",
          "237:         rfbLog(\"Autoprobing TCP port \\n\");",
          "238:         for (i = 5900; i < 6000; i++) {",
          "240:   rfbScreen->port = i;",
          "241:   break;",
          "242:      }",
          "",
          "[Removed Lines]",
          "239:             if ((rfbScreen->listenSock = rfbListenOnTCPPort(i, iface)) >= 0) {",
          "",
          "[Added Lines]",
          "239:             if ((rfbScreen->listenSock = rfbListenOnTCPPort(i, iface)) != RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "257:         int i;",
          "258:         rfbLog(\"Autoprobing TCP6 port \\n\");",
          "259:  for (i = 5900; i < 6000; i++) {",
          "261:   rfbScreen->ipv6port = i;",
          "262:   break;",
          "263:      }",
          "",
          "[Removed Lines]",
          "260:             if ((rfbScreen->listen6Sock = rfbListenOnTCP6Port(i, rfbScreen->listen6Interface)) >= 0) {",
          "",
          "[Added Lines]",
          "260:             if ((rfbScreen->listen6Sock = rfbListenOnTCP6Port(i, rfbScreen->listen6Interface)) != RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "277:     if(!rfbScreen->autoPort) {",
          "278:      if(rfbScreen->port>0) {",
          "281:  rfbLogPerror(\"ListenOnTCPPort\");",
          "282:  return;",
          "283:       }",
          "",
          "[Removed Lines]",
          "280:       if ((rfbScreen->listenSock = rfbListenOnTCPPort(rfbScreen->port, iface)) < 0) {",
          "",
          "[Added Lines]",
          "280:       if ((rfbScreen->listenSock = rfbListenOnTCPPort(rfbScreen->port, iface)) == RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "290: #ifdef LIBVNCSERVER_IPv6",
          "291:      if (rfbScreen->ipv6port>0) {",
          "294:  return;",
          "295:       }",
          "",
          "[Removed Lines]",
          "292:       if ((rfbScreen->listen6Sock = rfbListenOnTCP6Port(rfbScreen->ipv6port, rfbScreen->listen6Interface)) < 0) {",
          "",
          "[Added Lines]",
          "292:       if ((rfbScreen->listen6Sock = rfbListenOnTCP6Port(rfbScreen->ipv6port, rfbScreen->listen6Interface)) == RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "305:     if (rfbScreen->udpPort != 0) {",
          "306:  rfbLog(\"rfbInitSockets: listening for input on UDP port %d\\n\",rfbScreen->udpPort);",
          "309:      rfbLogPerror(\"ListenOnUDPPort\");",
          "310:      return;",
          "311:  }",
          "",
          "[Removed Lines]",
          "308:  if ((rfbScreen->udpSock = rfbListenOnUDPPort(rfbScreen->udpPort, iface)) < 0) {",
          "",
          "[Added Lines]",
          "308:  if ((rfbScreen->udpSock = rfbListenOnUDPPort(rfbScreen->udpPort, iface)) == RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "324:     rfbScreen->socketState = RFB_SOCKET_SHUTDOWN;",
          "327:  closesocket(rfbScreen->inetdSock);",
          "328:  FD_CLR(rfbScreen->inetdSock,&rfbScreen->allFds);",
          "330:     }",
          "333:  closesocket(rfbScreen->listenSock);",
          "334:  FD_CLR(rfbScreen->listenSock,&rfbScreen->allFds);",
          "336:     }",
          "339:  closesocket(rfbScreen->listen6Sock);",
          "340:  FD_CLR(rfbScreen->listen6Sock,&rfbScreen->allFds);",
          "342:     }",
          "345:  closesocket(rfbScreen->udpSock);",
          "346:  FD_CLR(rfbScreen->udpSock,&rfbScreen->allFds);",
          "348:     }",
          "349: }",
          "",
          "[Removed Lines]",
          "326:     if(rfbScreen->inetdSock>-1) {",
          "329:  rfbScreen->inetdSock=-1;",
          "332:     if(rfbScreen->listenSock>-1) {",
          "335:  rfbScreen->listenSock=-1;",
          "338:     if(rfbScreen->listen6Sock>-1) {",
          "341:  rfbScreen->listen6Sock=-1;",
          "344:     if(rfbScreen->udpSock>-1) {",
          "347:  rfbScreen->udpSock=-1;",
          "",
          "[Added Lines]",
          "326:     if(rfbScreen->inetdSock!=RFB_INVALID_SOCKET) {",
          "329:  rfbScreen->inetdSock=RFB_INVALID_SOCKET;",
          "332:     if(rfbScreen->listenSock!=RFB_INVALID_SOCKET) {",
          "335:  rfbScreen->listenSock=RFB_INVALID_SOCKET;",
          "338:     if(rfbScreen->listen6Sock!=RFB_INVALID_SOCKET) {",
          "341:  rfbScreen->listen6Sock=RFB_INVALID_SOCKET;",
          "344:     if(rfbScreen->udpSock!=RFB_INVALID_SOCKET) {",
          "347:  rfbScreen->udpSock=RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "368:     rfbClientPtr cl;",
          "369:     int result = 0;",
          "372:  rfbNewClientConnection(rfbScreen,rfbScreen->inetdSock);",
          "373:  rfbScreen->inetdInitDone = TRUE;",
          "374:     }",
          "",
          "[Removed Lines]",
          "371:     if (!rfbScreen->inetdInitDone && rfbScreen->inetdSock != -1) {",
          "",
          "[Added Lines]",
          "371:     if (!rfbScreen->inetdInitDone && rfbScreen->inetdSock != RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "403:  result += nfds;",
          "407:      if (!rfbProcessNewConnection(rfbScreen))",
          "408:                 return -1;",
          "",
          "[Removed Lines]",
          "405:  if (rfbScreen->listenSock != -1 && FD_ISSET(rfbScreen->listenSock, &fds)) {",
          "",
          "[Added Lines]",
          "405:  if (rfbScreen->listenSock != RFB_INVALID_SOCKET && FD_ISSET(rfbScreen->listenSock, &fds)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "412:   return result;",
          "413:  }",
          "417:      if (!rfbProcessNewConnection(rfbScreen))",
          "418:                 return -1;",
          "",
          "[Removed Lines]",
          "415:  if (rfbScreen->listen6Sock != -1 && FD_ISSET(rfbScreen->listen6Sock, &fds)) {",
          "",
          "[Added Lines]",
          "415:  if (rfbScreen->listen6Sock != RFB_INVALID_SOCKET && FD_ISSET(rfbScreen->listen6Sock, &fds)) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "422:   return result;",
          "423:  }",
          "426:      if(!rfbScreen->udpClient)",
          "427:   rfbNewUDPClient(rfbScreen);",
          "428:      if (recvfrom(rfbScreen->udpSock, buf, 1, MSG_PEEK,",
          "",
          "[Removed Lines]",
          "425:  if ((rfbScreen->udpSock != -1) && FD_ISSET(rfbScreen->udpSock, &fds)) {",
          "",
          "[Added Lines]",
          "425:  if ((rfbScreen->udpSock != RFB_INVALID_SOCKET) && FD_ISSET(rfbScreen->udpSock, &fds)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "471: #ifdef LIBVNCSERVER_WITH_WEBSOCKETS",
          "472:                     do {",
          "473:                         rfbProcessClientMessage(cl);",
          "475: #else",
          "476:                     rfbProcessClientMessage(cl);",
          "477: #endif",
          "",
          "[Removed Lines]",
          "474:                     } while (cl->sock > 0 && webSocketsHasDataInBuffer(cl));",
          "",
          "[Added Lines]",
          "474:                     } while (cl->sock != RFB_INVALID_SOCKET && webSocketsHasDataInBuffer(cl));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "488: rfbBool",
          "489: rfbProcessNewConnection(rfbScreenInfoPtr rfbScreen)",
          "490: {",
          "492:     fd_set listen_fds;",
          "494: #if defined LIBVNCSERVER_HAVE_SYS_RESOURCE_H && defined LIBVNCSERVER_HAVE_FCNTL_H",
          "495:     struct rlimit rlim;",
          "496:     size_t maxfds, curfds, i;",
          "",
          "[Removed Lines]",
          "491:     int sock = -1;",
          "493:     int chosen_listen_sock = -1;",
          "",
          "[Added Lines]",
          "491:     rfbSocket sock = RFB_INVALID_SOCKET;",
          "493:     rfbSocket chosen_listen_sock = RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "499:        has an incoming connection pending. We know that at least",
          "501:     FD_ZERO(&listen_fds);",
          "503:       FD_SET(rfbScreen->listenSock, &listen_fds);",
          "505:       FD_SET(rfbScreen->listen6Sock, &listen_fds);",
          "506:     if (select(rfbScreen->maxFd+1, &listen_fds, NULL, NULL, NULL) == -1) {",
          "507:       rfbLogPerror(\"rfbProcessNewConnection: error in select\");",
          "508:       return FALSE;",
          "509:     }",
          "511:       chosen_listen_sock = rfbScreen->listenSock;",
          "513:       chosen_listen_sock = rfbScreen->listen6Sock;",
          "",
          "[Removed Lines]",
          "502:     if(rfbScreen->listenSock >= 0)",
          "504:     if(rfbScreen->listen6Sock >= 0)",
          "510:     if (rfbScreen->listenSock >= 0 && FD_ISSET(rfbScreen->listenSock, &listen_fds))",
          "512:     if (rfbScreen->listen6Sock >= 0 && FD_ISSET(rfbScreen->listen6Sock, &listen_fds))",
          "",
          "[Added Lines]",
          "502:     if(rfbScreen->listenSock != RFB_INVALID_SOCKET)",
          "504:     if(rfbScreen->listen6Sock != RFB_INVALID_SOCKET)",
          "510:     if (rfbScreen->listenSock != RFB_INVALID_SOCKET && FD_ISSET(rfbScreen->listenSock, &listen_fds))",
          "512:     if (rfbScreen->listen6Sock != RFB_INVALID_SOCKET && FD_ISSET(rfbScreen->listen6Sock, &listen_fds))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "540:     }",
          "541: #endif",
          "544:       rfbLogPerror(\"rfbProcessNewconnection: accept\");",
          "545:       return FALSE;",
          "546:     }",
          "",
          "[Removed Lines]",
          "543:     if ((sock = accept(chosen_listen_sock, NULL, NULL)) < 0) {",
          "",
          "[Added Lines]",
          "543:     if ((sock = accept(chosen_listen_sock, NULL, NULL)) == RFB_INVALID_SOCKET) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "569:     LOCK(cl->updateMutex);",
          "570: #ifdef LIBVNCSERVER_HAVE_LIBPTHREAD",
          "572: #endif",
          "573:       {",
          "574:  FD_CLR(cl->sock,&(cl->screen->allFds));",
          "",
          "[Removed Lines]",
          "571:     if (cl->sock != -1)",
          "",
          "[Added Lines]",
          "571:     if (cl->sock != RFB_INVALID_SOCKET)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "585:  shutdown(cl->sock,SHUT_RDWR);",
          "586: #endif",
          "587:  closesocket(cl->sock);",
          "589:       }",
          "590:     TSIGNAL(cl->updateCond);",
          "591:     UNLOCK(cl->updateMutex);",
          "",
          "[Removed Lines]",
          "588:  cl->sock = -1;",
          "",
          "[Added Lines]",
          "588:  cl->sock = RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "600: rfbConnect(rfbScreenInfoPtr rfbScreen,",
          "601:            char *host,",
          "602:            int port)",
          "603: {",
          "605:     int one = 1;",
          "607:     rfbLog(\"Making connection to client on host %s port %d\\n\",",
          "608:     host,port);",
          "611:  rfbLogPerror(\"connection failed\");",
          "613:     }",
          "615:     if(!rfbSetNonBlocking(sock)) {",
          "616:         closesocket(sock);",
          "618:     }",
          "620:     if (setsockopt(sock, IPPROTO_TCP, TCP_NODELAY,",
          "",
          "[Removed Lines]",
          "599: int",
          "604:     int sock;",
          "610:     if ((sock = rfbConnectToTcpAddr(host, port)) < 0) {",
          "612:  return -1;",
          "617:  return -1;",
          "",
          "[Added Lines]",
          "599: rfbSocket",
          "604:     rfbSocket sock;",
          "610:     if ((sock = rfbConnectToTcpAddr(host, port)) == RFB_INVALID_SOCKET) {",
          "612:  return RFB_INVALID_SOCKET;",
          "617:  return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "638: int",
          "639: rfbReadExactTimeout(rfbClientPtr cl, char* buf, int len, int timeout)",
          "640: {",
          "642:     int n;",
          "643:     fd_set fds;",
          "644:     struct timeval tv;",
          "",
          "[Removed Lines]",
          "641:     int sock = cl->sock;",
          "",
          "[Added Lines]",
          "641:     rfbSocket sock = cl->sock;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "730: int",
          "731: rfbPeekExactTimeout(rfbClientPtr cl, char* buf, int len, int timeout)",
          "732: {",
          "734:     int n;",
          "735:     fd_set fds;",
          "736:     struct timeval tv;",
          "",
          "[Removed Lines]",
          "733:     int sock = cl->sock;",
          "",
          "[Added Lines]",
          "733:     rfbSocket sock = cl->sock;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "808:               const char *buf,",
          "809:               int len)",
          "810: {",
          "812:     int n;",
          "813:     fd_set fds;",
          "814:     struct timeval tv;",
          "",
          "[Removed Lines]",
          "811:     int sock = cl->sock;",
          "",
          "[Added Lines]",
          "811:     rfbSocket sock = cl->sock;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "919:     return 1;",
          "920: }",
          "923: rfbListenOnTCPPort(int port,",
          "924:                    in_addr_t iface)",
          "925: {",
          "926:     struct sockaddr_in addr;",
          "928:     int one = 1;",
          "930:     memset(&addr, 0, sizeof(addr));",
          "",
          "[Removed Lines]",
          "922: int",
          "927:     int sock;",
          "",
          "[Added Lines]",
          "922: rfbSocket",
          "927:     rfbSocket sock;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "932:     addr.sin_port = htons(port);",
          "933:     addr.sin_addr.s_addr = iface;",
          "937:     }",
          "938:     if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR,",
          "939:      (char *)&one, sizeof(one)) < 0) {",
          "940:  closesocket(sock);",
          "942:     }",
          "943:     if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0) {",
          "944:  closesocket(sock);",
          "946:     }",
          "947:     if (listen(sock, 32) < 0) {",
          "948:  closesocket(sock);",
          "950:     }",
          "952:     return sock;",
          "953: }",
          "957: rfbListenOnTCP6Port(int port,",
          "958:                     const char* iface)",
          "959: {",
          "960: #ifndef LIBVNCSERVER_IPv6",
          "961:     rfbLogPerror(\"This LibVNCServer does not have IPv6 support\");",
          "963: #else",
          "965:     int one = 1;",
          "966:     int rv;",
          "967:     struct addrinfo hints, *servinfo, *p;",
          "",
          "[Removed Lines]",
          "935:     if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {",
          "936:  return -1;",
          "941:  return -1;",
          "945:  return -1;",
          "949:  return -1;",
          "956: int",
          "962:     return -1;",
          "964:     int sock;",
          "",
          "[Added Lines]",
          "935:     if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == RFB_INVALID_SOCKET) {",
          "936:  return RFB_INVALID_SOCKET;",
          "941:  return RFB_INVALID_SOCKET;",
          "945:  return RFB_INVALID_SOCKET;",
          "949:  return RFB_INVALID_SOCKET;",
          "956: rfbSocket",
          "962:     return RFB_INVALID_SOCKET;",
          "964:     rfbSocket sock;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "977:     if ((rv = getaddrinfo(iface, port_str, &hints, &servinfo)) != 0) {",
          "978:         rfbErr(\"rfbListenOnTCP6Port error in getaddrinfo: %s\\n\", gai_strerror(rv));",
          "980:     }",
          "",
          "[Removed Lines]",
          "979:         return -1;",
          "",
          "[Added Lines]",
          "979:         return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "991:    rfbLogPerror(\"rfbListenOnTCP6Port error in setsockopt IPV6_V6ONLY\");",
          "992:    closesocket(sock);",
          "993:    freeaddrinfo(servinfo);",
          "995:  }",
          "996: #endif",
          "",
          "[Removed Lines]",
          "994:    return -1;",
          "",
          "[Added Lines]",
          "994:    return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "999:    rfbLogPerror(\"rfbListenOnTCP6Port: error in setsockopt SO_REUSEADDR\");",
          "1000:    closesocket(sock);",
          "1001:    freeaddrinfo(servinfo);",
          "1003:  }",
          "1005:  if (bind(sock, p->ai_addr, p->ai_addrlen) < 0) {",
          "",
          "[Removed Lines]",
          "1002:    return -1;",
          "",
          "[Added Lines]",
          "1002:    return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1013:     if (p == NULL)  {",
          "1014:         rfbLogPerror(\"rfbListenOnTCP6Port: error in bind IPv6 socket\");",
          "1015:         freeaddrinfo(servinfo);",
          "1017:     }",
          "",
          "[Removed Lines]",
          "1016:         return -1;",
          "",
          "[Added Lines]",
          "1016:         return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1022:     if (listen(sock, 32) < 0) {",
          "1023:         rfbLogPerror(\"rfbListenOnTCP6Port: error in listen on IPv6 socket\");",
          "1024:  closesocket(sock);",
          "1026:     }",
          "1028:     return sock;",
          "",
          "[Removed Lines]",
          "1025:  return -1;",
          "",
          "[Added Lines]",
          "1025:  return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1030: }",
          "1034: rfbConnectToTcpAddr(char *host,",
          "1035:                     int port)",
          "1036: {",
          "1038: #ifdef LIBVNCSERVER_IPv6",
          "1039:     struct addrinfo hints, *servinfo, *p;",
          "1040:     int rv;",
          "",
          "[Removed Lines]",
          "1033: int",
          "1037:     int sock;",
          "",
          "[Added Lines]",
          "1033: rfbSocket",
          "1037:     rfbSocket sock;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1049:     if ((rv = getaddrinfo(host, port_str, &hints, &servinfo)) != 0) {",
          "1050:         rfbErr(\"rfbConnectToTcpAddr: error in getaddrinfo: %s\\n\", gai_strerror(rv));",
          "1052:     }",
          "1055:     for(p = servinfo; p != NULL; p = p->ai_next) {",
          "1057:             continue;",
          "1059:         if (connect(sock, p->ai_addr, p->ai_addrlen) < 0) {",
          "",
          "[Removed Lines]",
          "1051:         return -1;",
          "1056:         if ((sock = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) < 0)",
          "",
          "[Added Lines]",
          "1051:         return RFB_INVALID_SOCKET;",
          "1056:         if ((sock = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) == RFB_INVALID_SOCKET)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1084:     {",
          "1085:  if (!(hp = gethostbyname(host))) {",
          "1086:      errno = EINVAL;",
          "1088:  }",
          "1089:  addr.sin_addr.s_addr = *(unsigned long *)hp->h_addr;",
          "1090:     }",
          "1094:     }",
          "1096:     if (connect(sock, (struct sockaddr *)&addr, (sizeof(addr))) < 0) {",
          "1097:  closesocket(sock);",
          "1099:     }",
          "1100: #endif",
          "1101:     return sock;",
          "1102: }",
          "1105: rfbListenOnUDPPort(int port,",
          "1106:                    in_addr_t iface)",
          "1107: {",
          "1108:     struct sockaddr_in addr;",
          "1110:     int one = 1;",
          "1112:     memset(&addr, 0, sizeof(addr));",
          "",
          "[Removed Lines]",
          "1087:      return -1;",
          "1092:     if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {",
          "1093:  return -1;",
          "1098:  return -1;",
          "1104: int",
          "1109:     int sock;",
          "",
          "[Added Lines]",
          "1087:      return RFB_INVALID_SOCKET;",
          "1092:     if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == RFB_INVALID_SOCKET) {",
          "1093:  return RFB_INVALID_SOCKET;",
          "1098:  return RFB_INVALID_SOCKET;",
          "1104: rfbSocket",
          "1109:     rfbSocket sock;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1114:     addr.sin_port = htons(port);",
          "1115:     addr.sin_addr.s_addr = iface;",
          "1119:     }",
          "1120:     if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR,",
          "1121:      (char *)&one, sizeof(one)) < 0) {",
          "1123:     }",
          "1124:     if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0) {",
          "1126:     }",
          "1128:     return sock;",
          "",
          "[Removed Lines]",
          "1117:     if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {",
          "1118:  return -1;",
          "1122:  return -1;",
          "1125:  return -1;",
          "",
          "[Added Lines]",
          "1117:     if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) == RFB_INVALID_SOCKET) {",
          "1118:  return RFB_INVALID_SOCKET;",
          "1122:  return RFB_INVALID_SOCKET;",
          "1125:  return RFB_INVALID_SOCKET;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1134: rfbBool",
          "1136: {",
          "1137: #ifdef WIN32",
          "1138:   unsigned long block=1;",
          "",
          "[Removed Lines]",
          "1135: rfbSetNonBlocking(int sock)",
          "",
          "[Added Lines]",
          "1135: rfbSetNonBlocking(rfbSocket sock)",
          "",
          "---------------"
        ],
        "rfb/rfb.h||rfb/rfb.h": [
          "File: rfb/rfb.h -> rfb/rfb.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #endif",
          "55: #ifdef WIN32",
          "57: typedef UINT32 in_addr_t;",
          "58: #include <winsock2.h>",
          "59: #ifdef LIBVNCSERVER_HAVE_WS2TCPIP_H",
          "",
          "[Removed Lines]",
          "56: #undef SOCKET",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:     rfbBool autoPort;",
          "270:     int port;",
          "272:     int maxSock;",
          "273:     int maxFd;",
          "274: #ifdef WIN32",
          "",
          "[Removed Lines]",
          "271:     SOCKET listenSock;",
          "",
          "[Added Lines]",
          "270:     rfbSocket listenSock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278: #endif",
          "280:     enum rfbSocketState socketState;",
          "282:     rfbBool inetdInitDone;",
          "284:     int udpPort;",
          "286:     struct _rfbClientRec* udpClient;",
          "287:     rfbBool udpSockConnected;",
          "288:     struct sockaddr_in udpRemoteAddr;",
          "",
          "[Removed Lines]",
          "281:     SOCKET inetdSock;",
          "285:     SOCKET udpSock;",
          "",
          "[Added Lines]",
          "280:     rfbSocket inetdSock;",
          "284:     rfbSocket udpSock;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "294:     rfbBool httpEnableProxyConnect;",
          "295:     int httpPort;",
          "296:     char* httpDir;",
          "300:     rfbPasswordCheckProcPtr passwordCheck;",
          "301:     void* authPasswdData;",
          "",
          "[Removed Lines]",
          "297:     SOCKET httpListenSock;",
          "298:     SOCKET httpSock;",
          "",
          "[Added Lines]",
          "296:     rfbSocket httpListenSock;",
          "297:     rfbSocket httpSock;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "389:        don't support dual binding sockets under *any* circumstances, for",
          "392:     int http6Port;",
          "395:     rfbSetDesktopSizeHookPtr setDesktopSizeHook;",
          "",
          "[Removed Lines]",
          "391:     SOCKET listen6Sock;",
          "393:     SOCKET httpListen6Sock;",
          "",
          "[Added Lines]",
          "390:     rfbSocket listen6Sock;",
          "392:     rfbSocket httpListen6Sock;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "472:     void* clientData;",
          "473:     ClientGoneHookPtr clientGoneHook;",
          "476:     char *host;",
          "",
          "[Removed Lines]",
          "475:     SOCKET sock;",
          "",
          "[Added Lines]",
          "474:     rfbSocket sock;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "774: extern int rfbPeekExactTimeout(rfbClientPtr cl, char *buf, int len,int timeout);",
          "775: extern int rfbWriteExact(rfbClientPtr cl, const char *buf, int len);",
          "776: extern int rfbCheckFds(rfbScreenInfoPtr rfbScreen,long usec);",
          "782: extern int rfbStringToAddr(char* string,in_addr_t* addr);",
          "785: #ifdef LIBVNCSERVER_WITH_WEBSOCKETS",
          "",
          "[Removed Lines]",
          "777: extern int rfbConnect(rfbScreenInfoPtr rfbScreen, char* host, int port);",
          "778: extern int rfbConnectToTcpAddr(char* host, int port);",
          "779: extern int rfbListenOnTCPPort(int port, in_addr_t iface);",
          "780: extern int rfbListenOnTCP6Port(int port, const char* iface);",
          "781: extern int rfbListenOnUDPPort(int port, in_addr_t iface);",
          "783: extern rfbBool rfbSetNonBlocking(int sock);",
          "",
          "[Added Lines]",
          "776: extern rfbSocket rfbConnect(rfbScreenInfoPtr rfbScreen, char* host, int port);",
          "777: extern rfbSocket rfbConnectToTcpAddr(char* host, int port);",
          "778: extern rfbSocket rfbListenOnTCPPort(int port, in_addr_t iface);",
          "779: extern rfbSocket rfbListenOnTCP6Port(int port, const char* iface);",
          "780: extern rfbSocket rfbListenOnUDPPort(int port, in_addr_t iface);",
          "782: extern rfbBool rfbSetNonBlocking(rfbSocket sock);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "805: extern void rfbIncrClientRef(rfbClientPtr cl);",
          "806: extern void rfbDecrClientRef(rfbClientPtr cl);",
          "810: extern rfbClientPtr rfbNewUDPClient(rfbScreenInfoPtr rfbScreen);",
          "811: extern rfbClientPtr rfbReverseConnection(rfbScreenInfoPtr rfbScreen,char *host, int port);",
          "812: extern void rfbClientConnectionGone(rfbClientPtr cl);",
          "813: extern void rfbProcessClientMessage(rfbClientPtr cl);",
          "814: extern void rfbClientConnFailed(rfbClientPtr cl, const char *reason);",
          "816: extern void rfbProcessUDPInput(rfbScreenInfoPtr rfbScreen);",
          "817: extern rfbBool rfbSendFramebufferUpdate(rfbClientPtr cl, sraRegionPtr updateRegion);",
          "818: extern rfbBool rfbSendRectEncodingRaw(rfbClientPtr cl, int x,int y,int w,int h);",
          "",
          "[Removed Lines]",
          "808: extern void rfbNewClientConnection(rfbScreenInfoPtr rfbScreen,int sock);",
          "809: extern rfbClientPtr rfbNewClient(rfbScreenInfoPtr rfbScreen,int sock);",
          "815: extern void rfbNewUDPConnection(rfbScreenInfoPtr rfbScreen,int sock);",
          "",
          "[Added Lines]",
          "807: extern void rfbNewClientConnection(rfbScreenInfoPtr rfbScreen,rfbSocket sock);",
          "808: extern rfbClientPtr rfbNewClient(rfbScreenInfoPtr rfbScreen,rfbSocket sock);",
          "814: extern void rfbNewUDPConnection(rfbScreenInfoPtr rfbScreen,rfbSocket sock);",
          "",
          "---------------"
        ],
        "rfb/rfbclient.h||rfb/rfbclient.h": [
          "File: rfb/rfbclient.h -> rfb/rfbclient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:  rfbBool canUseCoRRE;",
          "264:  rfbBool canUseHextile;",
          "265:  char *desktopName;",
          "",
          "[Removed Lines]",
          "262:  int sock;",
          "",
          "[Added Lines]",
          "262:  rfbSocket sock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "396:  HandleXvpMsgProc           HandleXvpMsg;",
          "401:  FinishedFrameBufferUpdateProc FinishedFrameBufferUpdate;",
          "403:  char *listenAddress;",
          "406:         char* listen6Address;",
          "407:         int listen6Port;",
          "",
          "[Removed Lines]",
          "399:         int listenSock;",
          "405:         int listen6Sock;",
          "",
          "[Added Lines]",
          "399:         rfbSocket listenSock;",
          "405:         rfbSocket listen6Sock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "650: extern rfbBool ReadFromRFBServer(rfbClient* client, char *out, unsigned int n);",
          "651: extern rfbBool WriteToRFBServer(rfbClient* client, char *buf, int n);",
          "652: extern int FindFreeTcpPort(void);",
          "662: extern rfbBool StringToIPAddr(const char *str, unsigned int *addr);",
          "",
          "[Removed Lines]",
          "653: extern int ListenAtTcpPort(int port);",
          "654: extern int ListenAtTcpPortAndAddress(int port, const char *address);",
          "655: extern int ConnectClientToTcpAddr(unsigned int host, int port);",
          "656: extern int ConnectClientToTcpAddr6(const char *hostname, int port);",
          "657: extern int ConnectClientToUnixSock(const char *sockFile);",
          "658: extern int AcceptTcpConnection(int listenSock);",
          "659: extern rfbBool SetNonBlocking(int sock);",
          "660: extern rfbBool SetDSCP(int sock, int dscp);",
          "663: extern rfbBool SameMachine(int sock);",
          "",
          "[Added Lines]",
          "653: extern rfbSocket ListenAtTcpPort(int port);",
          "654: extern rfbSocket ListenAtTcpPortAndAddress(int port, const char *address);",
          "655: extern rfbSocket ConnectClientToTcpAddr(unsigned int host, int port);",
          "656: extern rfbSocket ConnectClientToTcpAddr6(const char *hostname, int port);",
          "657: extern rfbSocket ConnectClientToUnixSock(const char *sockFile);",
          "658: extern rfbSocket AcceptTcpConnection(rfbSocket listenSock);",
          "659: extern rfbBool SetNonBlocking(rfbSocket sock);",
          "660: extern rfbBool SetDSCP(rfbSocket sock, int dscp);",
          "663: extern rfbBool SameMachine(rfbSocket sock);",
          "",
          "---------------"
        ],
        "rfb/rfbproto.h||rfb/rfbproto.h": [
          "File: rfb/rfbproto.h -> rfb/rfbproto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: #include <stdint.h>",
          "66: typedef int8_t rfbBool;",
          "67: #include <sys/timeb.h>",
          "68: #include <winsock2.h>",
          "",
          "[Removed Lines]",
          "65: #if defined(WIN32) && !defined(__MINGW32__)",
          "",
          "[Added Lines]",
          "65: #if defined(WIN32)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: #endif",
          "92: #define rfbMax(a,b) (((a)>(b))?(a):(b))",
          "94: #ifdef LIBVNCSERVER_HAVE_SYS_TIME_H",
          "95: #include <sys/time.h>",
          "96: #endif",
          "97: #ifdef LIBVNCSERVER_HAVE_NETINET_IN_H",
          "98: #include <netinet/in.h>",
          "99: #endif",
          "101: typedef int8_t rfbBool;",
          "102: #undef FALSE",
          "103: #define FALSE 0",
          "",
          "[Removed Lines]",
          "93: #if !defined(WIN32) || defined(__MINGW32__)",
          "100: #define SOCKET int",
          "",
          "[Added Lines]",
          "93: #ifdef WIN32",
          "94: #define rfbSocket SOCKET",
          "95: #define RFB_INVALID_SOCKET INVALID_SOCKET",
          "96: #else",
          "103: #define rfbSocket int",
          "104: #define RFB_INVALID_SOCKET (-1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}