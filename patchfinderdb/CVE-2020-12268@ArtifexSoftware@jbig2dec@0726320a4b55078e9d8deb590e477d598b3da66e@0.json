{
  "cve_id": "CVE-2020-12268",
  "cve_desc": "jbig2_image_compose in jbig2_image.c in Artifex jbig2dec before 0.18 has a heap-based buffer overflow.",
  "repo": "ArtifexSoftware/jbig2dec",
  "patch_hash": "0726320a4b55078e9d8deb590e477d598b3da66e",
  "patch_info": {
    "commit_hash": "0726320a4b55078e9d8deb590e477d598b3da66e",
    "repo": "ArtifexSoftware/jbig2dec",
    "commit_url": "https://github.com/ArtifexSoftware/jbig2dec/commit/0726320a4b55078e9d8deb590e477d598b3da66e",
    "files": [
      "jbig2_image.c"
    ],
    "message": "Fix OSS-Fuzz issue 20332: buffer overflow in jbig2_image_compose.\n\nWith extreme values of x/y/w/h we can get overflow. Test for this\nand exit safely.\n\nThanks for OSS-Fuzz for reporting.",
    "before_after_code_files": [
      "jbig2_image.c||jbig2_image.c"
    ]
  },
  "patch_diff": {
    "jbig2_image.c||jbig2_image.c": [
      "File: jbig2_image.c -> jbig2_image.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: #if !defined (INT32_MAX)",
      "34: #define INT32_MAX  0x7fffffff",
      "35: #endif",
      "38: Jbig2Image *",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36: #if !defined (UINT32_MAX)",
      "37: #define UINT32_MAX  0xffffffffu",
      "38: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "351:     if (src == NULL)",
      "352:         return 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "357:     if ((UINT32_MAX - src->width  < (x > 0 ? x : -x)) ||",
      "358:         (UINT32_MAX - src->height < (y > 0 ? y : -y)))",
      "359:     {",
      "360: #ifdef JBIG2_DEBUG",
      "361:         jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"overflow in compose_image\");",
      "362: #endif",
      "363:         return 0;",
      "364:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1a5457ace287a9c755995e5ec7bc626318966600",
      "candidate_info": {
        "commit_hash": "1a5457ace287a9c755995e5ec7bc626318966600",
        "repo": "ArtifexSoftware/jbig2dec",
        "commit_url": "https://github.com/ArtifexSoftware/jbig2dec/commit/1a5457ace287a9c755995e5ec7bc626318966600",
        "files": [
          "jbig2.c",
          "jbig2.h",
          "jbig2_arith.c",
          "jbig2_arith_iaid.c",
          "jbig2_arith_int.c",
          "jbig2_halftone.c",
          "jbig2_huffman.c",
          "jbig2_image.c",
          "jbig2_mmr.c",
          "jbig2_page.c",
          "jbig2_priv.h",
          "jbig2_refinement.c",
          "jbig2_segment.c",
          "jbig2_symbol_dict.c",
          "jbig2dec.c"
        ],
        "message": "jbig2dec: Pass segment numbers as unsigned values to error callback.\n\nAccording to the JBIG2 specification segments numbers are 32 bit unsigned\ninteger. Previously any segment numbers larger than INT32_MAX would be passed\nas negative numbers.\n\nSome parts of the decoder do not yet know, or do not have access to the\ncurrently decoded segment number, and this needs to be specially indicated.\nTherefore jbig2dec appropriates the unlikely segment number 0xffffffff to\nindicate an unknown segment number.\n\nThis is a change of the public API.",
        "before_after_code_files": [
          "jbig2.c||jbig2.c",
          "jbig2.h||jbig2.h",
          "jbig2_arith.c||jbig2_arith.c",
          "jbig2_arith_iaid.c||jbig2_arith_iaid.c",
          "jbig2_arith_int.c||jbig2_arith_int.c",
          "jbig2_halftone.c||jbig2_halftone.c",
          "jbig2_huffman.c||jbig2_huffman.c",
          "jbig2_image.c||jbig2_image.c",
          "jbig2_mmr.c||jbig2_mmr.c",
          "jbig2_page.c||jbig2_page.c",
          "jbig2_priv.h||jbig2_priv.h",
          "jbig2_refinement.c||jbig2_refinement.c",
          "jbig2_segment.c||jbig2_segment.c",
          "jbig2_symbol_dict.c||jbig2_symbol_dict.c",
          "jbig2dec.c||jbig2dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "jbig2_image.c||jbig2_image.c"
          ],
          "candidate": [
            "jbig2_image.c||jbig2_image.c"
          ]
        }
      },
      "candidate_diff": {
        "jbig2.c||jbig2.c": [
          "File: jbig2.c -> jbig2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: static void",
          "75: {",
          "77:     if (severity == JBIG2_SEVERITY_FATAL) {",
          "78:         fprintf(stderr, \"jbig2 decoder FATAL ERROR: %s\", msg);",
          "80:             fprintf(stderr, \" (segment 0x%02x)\", seg_idx);",
          "81:         fprintf(stderr, \"\\n\");",
          "82:         fflush(stderr);",
          "",
          "[Removed Lines]",
          "74: jbig2_default_error(void *data, const char *msg, Jbig2Severity severity, int32_t seg_idx)",
          "79:         if (seg_idx != -1)",
          "",
          "[Added Lines]",
          "74: jbig2_default_error(void *data, const char *msg, Jbig2Severity severity, uint32_t seg_idx)",
          "79:         if (seg_idx != JBIG2_UNKNOWN_SEGMENT_NUMBER)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: }",
          "86: int",
          "88: {",
          "89:     char buf[1024];",
          "90:     va_list ap;",
          "",
          "[Removed Lines]",
          "87: jbig2_error(Jbig2Ctx *ctx, Jbig2Severity severity, int32_t segment_number, const char *fmt, ...)",
          "",
          "[Added Lines]",
          "87: jbig2_error(Jbig2Ctx *ctx, Jbig2Severity severity, uint32_t segment_number, const char *fmt, ...)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:         Jbig2Ctx fakectx;",
          "109:         fakectx.error_callback = error_callback;",
          "110:         fakectx.error_callback_data = error_callback_data;",
          "112:             jbig2_version_major, jbig2_version_minor, JBIG2_VERSION_MAJOR, JBIG2_VERSION_MINOR);",
          "113:         return NULL;",
          "114:     }",
          "",
          "[Removed Lines]",
          "111:         jbig2_error(&fakectx, JBIG2_SEVERITY_FATAL, -1, \"incompatible jbig2dec header (%d.%d) and library (%d.%d) versions\",",
          "",
          "[Added Lines]",
          "111:         jbig2_error(&fakectx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"incompatible jbig2dec header (%d.%d) and library (%d.%d) versions\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:     result = (Jbig2Ctx *) jbig2_alloc(allocator, sizeof(Jbig2Ctx), 1);",
          "122:     if (result == NULL) {",
          "124:         return NULL;",
          "125:     }",
          "",
          "[Removed Lines]",
          "123:         error_callback(error_callback_data, \"failed to allocate initial context\", JBIG2_SEVERITY_FATAL, -1);",
          "",
          "[Added Lines]",
          "123:         error_callback(error_callback_data, \"failed to allocate initial context\", JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:     result->n_segments_max = 16;",
          "139:     result->segments = jbig2_new(result, Jbig2Segment *, result->n_segments_max);",
          "140:     if (result->segments == NULL) {",
          "142:         jbig2_free(allocator, result);",
          "143:         return NULL;",
          "144:     }",
          "",
          "[Removed Lines]",
          "141:         error_callback(error_callback_data, \"failed to allocate initial segments\", JBIG2_SEVERITY_FATAL, -1);",
          "",
          "[Added Lines]",
          "141:         error_callback(error_callback_data, \"failed to allocate initial segments\", JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "148:     result->max_page_index = 4;",
          "149:     result->pages = jbig2_new(result, Jbig2Page, result->max_page_index);",
          "150:     if (result->pages == NULL) {",
          "152:         jbig2_free(allocator, result->segments);",
          "153:         jbig2_free(allocator, result);",
          "154:         return NULL;",
          "",
          "[Removed Lines]",
          "151:         error_callback(error_callback_data, \"failed to allocated initial pages\", JBIG2_SEVERITY_FATAL, -1);",
          "",
          "[Added Lines]",
          "151:         error_callback(error_callback_data, \"failed to allocated initial pages\", JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "236:         while (buf_size < size);",
          "237:         ctx->buf = jbig2_new(ctx, byte, buf_size);",
          "238:         if (ctx->buf == NULL) {",
          "240:         }",
          "241:         ctx->buf_size = buf_size;",
          "242:         ctx->buf_rd_ix = 0;",
          "",
          "[Removed Lines]",
          "239:             return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate buffer when reading data\");",
          "",
          "[Added Lines]",
          "239:             return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate buffer when reading data\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "253:             while (buf_size < ctx->buf_wr_ix - ctx->buf_rd_ix + size);",
          "254:             buf = jbig2_new(ctx, byte, buf_size);",
          "255:             if (buf == NULL) {",
          "257:             }",
          "258:             memcpy(buf, ctx->buf + ctx->buf_rd_ix, ctx->buf_wr_ix - ctx->buf_rd_ix);",
          "259:             jbig2_free(ctx->allocator, ctx->buf);",
          "",
          "[Removed Lines]",
          "256:                 return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate bigger buffer when reading data\");",
          "",
          "[Added Lines]",
          "256:                 return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate bigger buffer when reading data\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "280:             if (ctx->buf_wr_ix - ctx->buf_rd_ix < 9)",
          "281:                 return 0;",
          "282:             if (memcmp(ctx->buf + ctx->buf_rd_ix, jbig2_id_string, 8))",
          "285:             ctx->file_header_flags = ctx->buf[ctx->buf_rd_ix + 8];",
          "287:             if (ctx->file_header_flags & 0x04)",
          "290:             if (ctx->file_header_flags & 0x08)",
          "292:             if (ctx->file_header_flags & 0xFC) {",
          "294:             }",
          "",
          "[Removed Lines]",
          "283:                 return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"not a JBIG2 file header\");",
          "288:                 return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"file header indicates use of 12 adaptive template pixels (NYI)\");",
          "291:                 return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"file header indicates use of colored region segments (NYI)\");",
          "293:                 jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"reserved bits (2-7) of file header flags are not zero (0x%02x)\", ctx->file_header_flags);",
          "",
          "[Added Lines]",
          "283:                 return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"not a JBIG2 file header\");",
          "288:                 return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"file header indicates use of 12 adaptive template pixels (NYI)\");",
          "291:                 return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"file header indicates use of colored region segments (NYI)\");",
          "293:                 jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"reserved bits (2-7) of file header flags are not zero (0x%02x)\", ctx->file_header_flags);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "299:                 ctx->n_pages = jbig2_get_uint32(ctx->buf + ctx->buf_rd_ix + 9);",
          "300:                 ctx->buf_rd_ix += 13;",
          "301:                 if (ctx->n_pages == 1)",
          "303:                 else",
          "306:                 ctx->n_pages = 0;",
          "307:                 ctx->buf_rd_ix += 9;",
          "",
          "[Removed Lines]",
          "302:                     jbig2_error(ctx, JBIG2_SEVERITY_INFO, -1, \"file header indicates a single page document\");",
          "304:                     jbig2_error(ctx, JBIG2_SEVERITY_INFO, -1, \"file header indicates a %d page document\", ctx->n_pages);",
          "",
          "[Added Lines]",
          "302:                     jbig2_error(ctx, JBIG2_SEVERITY_INFO, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"file header indicates a single page document\");",
          "304:                     jbig2_error(ctx, JBIG2_SEVERITY_INFO, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"file header indicates a %d page document\", ctx->n_pages);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "310:             if (ctx->file_header_flags & 1) {",
          "311:                 ctx->state = JBIG2_FILE_SEQUENTIAL_HEADER;",
          "313:             } else {",
          "314:                 ctx->state = JBIG2_FILE_RANDOM_HEADERS;",
          "316:             }",
          "317:             break;",
          "318:         case JBIG2_FILE_SEQUENTIAL_HEADER:",
          "",
          "[Removed Lines]",
          "312:                 jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"file header indicates sequential organization\");",
          "315:                 jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"file header indicates random-access organization\");",
          "",
          "[Added Lines]",
          "312:                 jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"file header indicates sequential organization\");",
          "315:                 jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"file header indicates random-access organization\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "403:         case JBIG2_FILE_EOF:",
          "404:             if (ctx->buf_rd_ix == ctx->buf_wr_ix)",
          "405:                 return 0;",
          "407:         }",
          "408:     }",
          "409: }",
          "",
          "[Removed Lines]",
          "406:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"garbage beyond end of file\");",
          "",
          "[Added Lines]",
          "406:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"garbage beyond end of file\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "468:     int ret = 0;",
          "470:     if (self == NULL || word == NULL) {",
          "472:     }",
          "473:     if (offset >= z->size) {",
          "",
          "[Removed Lines]",
          "471:         return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to read next word of stream because stream or output missing\");",
          "",
          "[Added Lines]",
          "471:         return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to read next word of stream because stream or output missing\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "501:     Jbig2WordStreamBuf *result = jbig2_new(ctx, Jbig2WordStreamBuf, 1);",
          "503:     if (result == NULL) {",
          "505:         return NULL;",
          "506:     }",
          "",
          "[Removed Lines]",
          "504:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate word stream\");",
          "",
          "[Added Lines]",
          "504:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate word stream\");",
          "",
          "---------------"
        ],
        "jbig2.h||jbig2.h": [
          "File: jbig2.h -> jbig2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:    clients can better control memory usage. If a NULL is passed for",
          "",
          "[Removed Lines]",
          "68: typedef void (*Jbig2ErrorCallback)(void *data, const char *msg, Jbig2Severity severity, int32_t seg_idx);",
          "",
          "[Added Lines]",
          "68: #define JBIG2_UNKNOWN_SEGMENT_NUMBER ~0U",
          "69: typedef void (*Jbig2ErrorCallback)(void *data, const char *msg, Jbig2Severity severity, uint32_t seg_idx);",
          "",
          "---------------"
        ],
        "jbig2_arith.c||jbig2_arith.c": [
          "File: jbig2_arith.c -> jbig2_arith.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     if (as->next_word_bytes < 0) {",
          "64:         return -1;",
          "65:     }",
          "66:     if (as->next_word_bytes == 0) {",
          "68:         return -1;",
          "69:     }",
          "",
          "[Removed Lines]",
          "63:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to read from underlying stream during arithmetic decoding\");",
          "67:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to read beyond end of underlying stream during arithmetic decoding\");",
          "",
          "[Added Lines]",
          "63:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to read from underlying stream during arithmetic decoding\");",
          "67:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to read beyond end of underlying stream during arithmetic decoding\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:         if (as->next_word_bytes <= 1) {",
          "97:             as->next_word_bytes = as->ws->get_next_word(ctx, as->ws, as->offset, &as->next_word);",
          "98:             if (as->next_word_bytes < 0) {",
          "100:             }",
          "101:             if (as->next_word_bytes == 0) {",
          "103:                 as->next_word = 0xFF900000;",
          "104:                 as->next_word_bytes = 2;",
          "105:                 as->C += 0xFF00;",
          "",
          "[Removed Lines]",
          "99:                 return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to check for marker code due to failure in underlying stream during arithmetic decoding\");",
          "102:                 jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to read end of possible terminating marker code, assuming terminating marker code\");",
          "",
          "[Added Lines]",
          "99:                 return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to check for marker code due to failure in underlying stream during arithmetic decoding\");",
          "102:                 jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to read end of possible terminating marker code, assuming terminating marker code\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "153:         if (as->next_word_bytes == 0) {",
          "154:             as->next_word_bytes = as->ws->get_next_word(ctx, as->ws, as->offset, &as->next_word);",
          "155:             if (as->next_word_bytes < 0) {",
          "157:             }",
          "158:             if (as->next_word_bytes == 0) {",
          "160:                 as->next_word = 0xFF900000;",
          "161:                 as->next_word_bytes = 2;",
          "162:                 as->C += 0xFF00;",
          "",
          "[Removed Lines]",
          "156:                 return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to read from underlying stream during arithmetic decoding\");",
          "159:                 jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to find terminating marker code before end of underlying stream, assuming terminating marker code\");",
          "",
          "[Added Lines]",
          "156:                 return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to read from underlying stream during arithmetic decoding\");",
          "159:                 jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to find terminating marker code before end of underlying stream, assuming terminating marker code\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:     result = jbig2_new(ctx, Jbig2ArithState, 1);",
          "188:     if (result == NULL) {",
          "190:         return NULL;",
          "191:     }",
          "",
          "[Removed Lines]",
          "189:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate arithmetic coding state\");",
          "",
          "[Added Lines]",
          "189:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate arithmetic coding state\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "196:     result->next_word_bytes = result->ws->get_next_word(ctx, result->ws, result->offset, &result->next_word);",
          "197:     if (result->next_word_bytes < 0) {",
          "198:         jbig2_free(ctx->allocator, result);",
          "200:         return NULL;",
          "201:     }",
          "202:     if (result->next_word_bytes == 0) {",
          "203:         jbig2_free(ctx->allocator, result);",
          "205:         return NULL;",
          "206:     }",
          "207:     result->offset += result->next_word_bytes;",
          "",
          "[Removed Lines]",
          "199:         jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to initialize underlying stream of arithmetic decoder\");",
          "204:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to read first byte from underlying stream when initializing arithmetic decoder\");",
          "",
          "[Added Lines]",
          "199:         jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to initialize underlying stream of arithmetic decoder\");",
          "204:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to read first byte from underlying stream when initializing arithmetic decoder\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "213:     if (jbig2_arith_bytein(ctx, result) < 0) {",
          "214:         jbig2_free(ctx->allocator, result);",
          "216:         return NULL;",
          "217:     }",
          "",
          "[Removed Lines]",
          "215:         jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to read second byte from underlying stream when initializing arithmetic decoder\");",
          "",
          "[Added Lines]",
          "215:         jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to read second byte from underlying stream when initializing arithmetic decoder\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "290:     do {",
          "291:         if (as->CT == 0 && jbig2_arith_bytein(ctx, as) < 0) {",
          "293:         }",
          "294:         as->A <<= 1;",
          "295:         as->C <<= 1;",
          "",
          "[Removed Lines]",
          "292:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to read byte from compressed data stream\");",
          "",
          "[Added Lines]",
          "292:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to read byte from compressed data stream\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "308:     bool D;",
          "310:     if (index >= MAX_QE_ARRAY_SIZE) {",
          "312:     }",
          "314:     pqe = &jbig2_arith_Qe[index];",
          "",
          "[Removed Lines]",
          "311:         return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to determine probability estimate because index out of range\");",
          "",
          "[Added Lines]",
          "311:         return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to determine probability estimate because index out of range\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "327:             }",
          "328:             if (jbig2_arith_renormd(ctx, as) < 0) {",
          "330:             }",
          "332:             return D;",
          "",
          "[Removed Lines]",
          "329:                 return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to renormalize decoder\");",
          "",
          "[Added Lines]",
          "329:                 return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to renormalize decoder\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "347:         }",
          "348:         if (jbig2_arith_renormd(ctx, as) < 0) {",
          "350:         }",
          "352:         return D;",
          "",
          "[Removed Lines]",
          "349:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to renormalize decoder\");",
          "",
          "[Added Lines]",
          "349:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to renormalize decoder\");",
          "",
          "---------------"
        ],
        "jbig2_arith_iaid.c||jbig2_arith_iaid.c": [
          "File: jbig2_arith_iaid.c -> jbig2_arith_iaid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     if (sizeof(ctx_size) * 8 <= SBSYMCODELEN)",
          "51:     {",
          "53:         return NULL;",
          "54:     }",
          "",
          "[Removed Lines]",
          "52:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"requested IAID arithmetic coding state size too large\");",
          "",
          "[Added Lines]",
          "52:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"requested IAID arithmetic coding state size too large\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     result = jbig2_new(ctx, Jbig2ArithIaidCtx, 1);",
          "59:     if (result == NULL) {",
          "61:         return NULL;",
          "62:     }",
          "",
          "[Removed Lines]",
          "60:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate IAID arithmetic coding state\");",
          "",
          "[Added Lines]",
          "60:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate IAID arithmetic coding state\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:     if (result->IAIDx == NULL)",
          "67:     {",
          "68:         jbig2_free(ctx->allocator, result);",
          "70:         return NULL;",
          "71:     }",
          "",
          "[Removed Lines]",
          "69:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate symbol ID in IAID arithmetic coding state\");",
          "",
          "[Added Lines]",
          "69:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate symbol ID in IAID arithmetic coding state\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:     for (i = 0; i < SBSYMCODELEN; i++) {",
          "91:         D = jbig2_arith_decode(ctx, as, &IAIDx[PREV]);",
          "92:         if (D < 0)",
          "94: #ifdef VERBOSE",
          "95:         fprintf(stderr, \"IAID%x: D = %d\\n\", PREV, D);",
          "96: #endif",
          "",
          "[Removed Lines]",
          "93:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode IAIDx code\");",
          "",
          "[Added Lines]",
          "93:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode IAIDx code\");",
          "",
          "---------------"
        ],
        "jbig2_arith_int.c||jbig2_arith_int.c": [
          "File: jbig2_arith_int.c -> jbig2_arith_int.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     Jbig2ArithIntCtx *result = jbig2_new(ctx, Jbig2ArithIntCtx, 1);",
          "44:     if (result == NULL) {",
          "46:         return NULL;",
          "47:     } else {",
          "48:         memset(result->IAx, 0, sizeof(result->IAx));",
          "",
          "[Removed Lines]",
          "45:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate arithmetic integer coding state\");",
          "",
          "[Added Lines]",
          "45:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate arithmetic integer coding state\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     S = jbig2_arith_decode(ctx, as, &IAx[PREV]);",
          "68:     if (S < 0)",
          "70:     PREV = (PREV << 1) | S;",
          "72:     bit = jbig2_arith_decode(ctx, as, &IAx[PREV]);",
          "73:     if (bit < 0)",
          "75:     PREV = (PREV << 1) | bit;",
          "76:     if (bit) {",
          "77:         bit = jbig2_arith_decode(ctx, as, &IAx[PREV]);",
          "78:         if (bit < 0)",
          "80:         PREV = (PREV << 1) | bit;",
          "82:         if (bit) {",
          "83:             bit = jbig2_arith_decode(ctx, as, &IAx[PREV]);",
          "84:             if (bit < 0)",
          "86:             PREV = (PREV << 1) | bit;",
          "88:             if (bit) {",
          "89:                 bit = jbig2_arith_decode(ctx, as, &IAx[PREV]);",
          "90:                 if (bit < 0)",
          "92:                 PREV = (PREV << 1) | bit;",
          "94:                 if (bit) {",
          "95:                     bit = jbig2_arith_decode(ctx, as, &IAx[PREV]);",
          "96:                     if (bit < 0)",
          "98:                     PREV = (PREV << 1) | bit;",
          "100:                     if (bit) {",
          "",
          "[Removed Lines]",
          "69:         return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode IAx S\");",
          "74:         return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode IAx decision bit 0\");",
          "79:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode IAx decision bit 1\");",
          "85:                 return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode IAx decision bit 2\");",
          "91:                     return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode IAx decision bit 3\");",
          "97:                         return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode IAx decision bit 4\");",
          "",
          "[Added Lines]",
          "69:         return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode IAx S\");",
          "74:         return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode IAx decision bit 0\");",
          "79:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode IAx decision bit 1\");",
          "85:                 return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode IAx decision bit 2\");",
          "91:                     return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode IAx decision bit 3\");",
          "97:                         return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode IAx decision bit 4\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:     for (i = 0; i < n_tail; i++) {",
          "126:         bit = jbig2_arith_decode(ctx, as, &IAx[PREV]);",
          "127:         if (bit < 0)",
          "129:         PREV = ((PREV << 1) & 511) | (PREV & 256) | bit;",
          "130:         V = (V << 1) | bit;",
          "131:     }",
          "",
          "[Removed Lines]",
          "128:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode IAx V bit %d\", i);",
          "",
          "[Added Lines]",
          "128:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode IAx V bit %d\", i);",
          "",
          "---------------"
        ],
        "jbig2_halftone.c||jbig2_halftone.c": [
          "File: jbig2_halftone.c -> jbig2_halftone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     if (N == 0) {",
          "55:         return NULL;",
          "56:     }",
          "",
          "[Removed Lines]",
          "54:         jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"params->GRAYMAX out of range\");",
          "",
          "[Added Lines]",
          "54:         jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"params->GRAYMAX out of range\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     if (new != NULL) {",
          "61:         new->patterns = jbig2_new(ctx, Jbig2Image *, N);",
          "62:         if (new->patterns == NULL) {",
          "64:             jbig2_free(ctx->allocator, new);",
          "65:             return NULL;",
          "66:         }",
          "",
          "[Removed Lines]",
          "63:             jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate pattern in collective bitmap dictionary\");",
          "",
          "[Added Lines]",
          "63:             jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate pattern in collective bitmap dictionary\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:         for (i = 0; i < N; i++) {",
          "73:             new->patterns[i] = jbig2_image_new(ctx, HPW, HPH);",
          "74:             if (new->patterns[i] == NULL) {",
          "76:                 for (j = 0; j < i; j++)",
          "77:                     jbig2_free(ctx->allocator, new->patterns[j]);",
          "78:                 jbig2_free(ctx->allocator, new);",
          "",
          "[Removed Lines]",
          "75:                 jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to allocate pattern element image\");",
          "",
          "[Added Lines]",
          "75:                 jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate pattern element image\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84:             code = jbig2_image_compose(ctx, new->patterns[i], image, -i * (int32_t) HPW, 0, JBIG2_COMPOSE_REPLACE);",
          "85:             if (code < 0) {",
          "87:                 for (j = 0; j < i; j++)",
          "88:                     jbig2_free(ctx->allocator, new->patterns[j]);",
          "89:                 jbig2_free(ctx->allocator, new);",
          "",
          "[Removed Lines]",
          "86:                 jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to compose image into collective bitmap dictionary\");",
          "",
          "[Added Lines]",
          "86:                 jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to compose image into collective bitmap dictionary\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "91:             }",
          "92:         }",
          "93:     } else {",
          "95:     }",
          "97:     return new;",
          "",
          "[Removed Lines]",
          "94:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate collective bitmap dictionary\");",
          "",
          "[Added Lines]",
          "94:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate collective bitmap dictionary\");",
          "",
          "---------------"
        ],
        "jbig2_huffman.c||jbig2_huffman.c": [
          "File: jbig2_huffman.c -> jbig2_huffman.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         result->ctx = ctx;",
          "81:         code = huff_get_next_word(result, 0, &result->this_word);",
          "82:         if (code < 0) {",
          "84:             jbig2_huffman_free(ctx, result);",
          "85:             return NULL;",
          "86:         }",
          "87:         code = huff_get_next_word(result, 4, &result->next_word);",
          "88:         if (code < 0) {",
          "90:             jbig2_huffman_free(ctx, result);",
          "91:             return NULL;",
          "92:         }",
          "93:     } else {",
          "95:         return NULL;",
          "96:     }",
          "",
          "[Removed Lines]",
          "83:             jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to read first huffman word\");",
          "89:             jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to read second huffman word\");",
          "94:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate new huffman coding state\");",
          "",
          "[Added Lines]",
          "83:             jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to read first huffman word\");",
          "89:             jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to read second huffman word\");",
          "94:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate new huffman coding state\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:         hs->offset += 4;",
          "193:         code = huff_get_next_word(hs, hs->offset + 4, &hs->next_word);",
          "194:         if (code < 0) {",
          "196:         }",
          "197:         hs->offset_bits -= 32;",
          "198:         if (hs->offset_bits) {",
          "",
          "[Removed Lines]",
          "195:             return jbig2_error(hs->ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to read next huffman word when skipping\");",
          "",
          "[Added Lines]",
          "195:             return jbig2_error(hs->ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to read next huffman word when skipping\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "216:     }",
          "217:     code = huff_get_next_word(hs, hs->offset, &hs->this_word);",
          "218:     if (code < 0) {",
          "220:     }",
          "221:     code = huff_get_next_word(hs, hs->offset + 4, &hs->next_word);",
          "222:     if (code < 0) {",
          "224:     }",
          "225:     if (hs->offset_bits > 0)",
          "226:         hs->this_word = (hs->this_word << hs->offset_bits) | (hs->next_word >> (32 - hs->offset_bits));",
          "",
          "[Removed Lines]",
          "219:         return jbig2_error(hs->ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to get first huffman word after advancing\");",
          "223:         return jbig2_error(hs->ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to get second huffman word after advancing\");",
          "",
          "[Added Lines]",
          "219:         return jbig2_error(hs->ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to get first huffman word after advancing\");",
          "223:         return jbig2_error(hs->ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to get second huffman word after advancing\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "249:     if (hs->offset_limit && hs->offset >= hs->offset_limit) {",
          "252:     }",
          "254:     result = this_word >> (32 - bits);",
          "",
          "[Removed Lines]",
          "251:         return jbig2_error(hs->ctx, JBIG2_SEVERITY_FATAL, -1, \"end of jbig2 buffer reached at offset %d\", hs->offset);",
          "",
          "[Added Lines]",
          "251:         return jbig2_error(hs->ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"end of jbig2 buffer reached at offset %d\", hs->offset);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "259:         hs->this_word = hs->next_word;",
          "260:         code = huff_get_next_word(hs, hs->offset + 4, &hs->next_word);",
          "261:         if (code < 0) {",
          "263:         }",
          "264:         if (hs->offset_bits) {",
          "265:             hs->this_word = (hs->this_word << hs->offset_bits) | (hs->next_word >> (32 - hs->offset_bits));",
          "",
          "[Removed Lines]",
          "262:             return jbig2_error(hs->ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to get next huffman word\");",
          "",
          "[Added Lines]",
          "262:             return jbig2_error(hs->ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to get next huffman word\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "287:     if (hs->offset_limit && hs->offset >= hs->offset_limit) {",
          "288:         if (oob)",
          "291:     }",
          "293:     for (;;) {",
          "",
          "[Removed Lines]",
          "290:         return jbig2_error(hs->ctx, JBIG2_SEVERITY_FATAL, -1, \"end of Jbig2WordStream reached at offset %d\", hs->offset);",
          "",
          "[Added Lines]",
          "290:         return jbig2_error(hs->ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"end of Jbig2WordStream reached at offset %d\", hs->offset);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "302:         if (flags == (byte) -1 || PREFLEN == (byte) -1) {",
          "303:             if (oob)",
          "306:         }",
          "308:         next_word = hs->next_word;",
          "",
          "[Removed Lines]",
          "305:             return jbig2_error(hs->ctx, JBIG2_SEVERITY_FATAL, -1, \"encountered unpopulated huffman table entry\");",
          "",
          "[Added Lines]",
          "305:             return jbig2_error(hs->ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"encountered unpopulated huffman table entry\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "312:             hs->offset += 4;",
          "313:             code = huff_get_next_word(hs, hs->offset + 4, &next_word);",
          "314:             if (code < 0) {",
          "316:             }",
          "317:             offset_bits -= 32;",
          "318:             hs->next_word = next_word;",
          "",
          "[Removed Lines]",
          "315:                 return jbig2_error(hs->ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to get next huffman word\");",
          "",
          "[Added Lines]",
          "315:                 return jbig2_error(hs->ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to get next huffman word\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "343:             hs->offset += 4;",
          "344:             code = huff_get_next_word(hs, hs->offset + 4, &next_word);",
          "345:             if (code < 0) {",
          "347:             }",
          "348:             offset_bits -= 32;",
          "349:             hs->next_word = next_word;",
          "",
          "[Removed Lines]",
          "346:                 return jbig2_error(hs->ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to get next huffman word\");",
          "",
          "[Added Lines]",
          "346:                 return jbig2_error(hs->ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to get next huffman word\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "391:     LENCOUNT = jbig2_new(ctx, int, lencountcount);",
          "393:     if (LENCOUNT == NULL) {",
          "395:         return NULL;",
          "396:     }",
          "397:     memset(LENCOUNT, 0, sizeof(int) * lencountcount);",
          "",
          "[Removed Lines]",
          "394:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate huffman histogram\");",
          "",
          "[Added Lines]",
          "394:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate huffman histogram\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "414:         if (lts <= LOG_TABLE_SIZE_MAX && log_table_size < lts)",
          "415:             log_table_size = lts;",
          "416:     }",
          "418:     max_j = 1 << log_table_size;",
          "420:     result = jbig2_new(ctx, Jbig2HuffmanTable, 1);",
          "421:     if (result == NULL) {",
          "423:         jbig2_free(ctx->allocator, LENCOUNT);",
          "424:         return NULL;",
          "425:     }",
          "426:     result->log_table_size = log_table_size;",
          "427:     entries = jbig2_new(ctx, Jbig2HuffmanEntry, max_j);",
          "428:     if (entries == NULL) {",
          "430:         jbig2_free(ctx->allocator, result);",
          "431:         jbig2_free(ctx->allocator, LENCOUNT);",
          "432:         return NULL;",
          "",
          "[Removed Lines]",
          "417:     jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"constructing huffman table log size %d\", log_table_size);",
          "422:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate result\");",
          "429:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate result entries\");",
          "",
          "[Added Lines]",
          "417:     jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"constructing huffman table log size %d\", log_table_size);",
          "422:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate result\");",
          "429:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate result entries\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "455:                 byte eflags = 0;",
          "457:                 if (end_j > max_j) {",
          "459:                     jbig2_free(ctx->allocator, result->entries);",
          "460:                     jbig2_free(ctx->allocator, result);",
          "461:                     jbig2_free(ctx->allocator, LENCOUNT);",
          "",
          "[Removed Lines]",
          "458:                     jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"ran off the end of the entries table! (%d >= %d)\", end_j, max_j);",
          "",
          "[Added Lines]",
          "458:                     jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"ran off the end of the entries table! (%d >= %d)\", end_j, max_j);",
          "",
          "---------------"
        ],
        "jbig2_image.c||jbig2_image.c": [
          "File: jbig2_image.c -> jbig2_image.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     uint32_t stride;",
          "40:     if (width == 0 || height == 0) {",
          "42:         return NULL;",
          "43:     }",
          "45:     image = jbig2_new(ctx, Jbig2Image, 1);",
          "46:     if (image == NULL) {",
          "48:         return NULL;",
          "49:     }",
          "",
          "[Removed Lines]",
          "41:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to create zero sized image\");",
          "47:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate image\");",
          "",
          "[Added Lines]",
          "41:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to create zero sized image\");",
          "47:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate image\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:     if (height > (INT32_MAX / stride)) {",
          "56:         jbig2_free(ctx->allocator, image);",
          "57:         return NULL;",
          "58:     }",
          "59:     image->data = jbig2_new(ctx, uint8_t, (size_t) height * stride);",
          "60:     if (image->data == NULL) {",
          "62:         jbig2_free(ctx->allocator, image);",
          "63:         return NULL;",
          "64:     }",
          "",
          "[Removed Lines]",
          "55:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"integer multiplication overflow (stride=%u, height=%u)\", stride, height);",
          "61:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate image data buffer (stride=%u, height=%u)\", stride, height);",
          "",
          "[Added Lines]",
          "55:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"integer multiplication overflow (stride=%u, height=%u)\", stride, height);",
          "61:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate image data buffer (stride=%u, height=%u)\", stride, height);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:         if (image->height > (INT32_MAX / image->stride)) {",
          "114:             return NULL;",
          "115:         }",
          "117:         data = jbig2_renew(ctx, image->data, uint8_t, (size_t) height * image->stride);",
          "118:         if (data == NULL) {",
          "120:             return NULL;",
          "121:         }",
          "122:         image->data = data;",
          "",
          "[Removed Lines]",
          "113:             jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"integer multiplication overflow during resize (stride=%u, height=%u)\", image->stride, height);",
          "119:             jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to reallocate image\");",
          "",
          "[Added Lines]",
          "113:             jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"integer multiplication overflow during resize (stride=%u, height=%u)\", image->stride, height);",
          "119:             jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to reallocate image\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:         newimage = jbig2_image_new(ctx, width, height);",
          "136:         if (newimage == NULL) {",
          "138:             return NULL;",
          "139:         }",
          "140:         jbig2_image_clear(ctx, newimage, value);",
          "142:         code = jbig2_image_compose(ctx, newimage, image, 0, 0, JBIG2_COMPOSE_REPLACE);",
          "143:         if (code < 0) {",
          "145:             jbig2_image_release(ctx, newimage);",
          "146:             return NULL;",
          "147:         }",
          "",
          "[Removed Lines]",
          "137:             jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to allocate resized image\");",
          "144:             jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to compose image buffers when resizing\");",
          "",
          "[Added Lines]",
          "137:             jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate resized image\");",
          "144:             jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to compose image buffers when resizing\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "351:         (UINT32_MAX - src->height < (y > 0 ? y : -y)))",
          "352:     {",
          "353: #ifdef JBIG2_DEBUG",
          "355: #endif",
          "356:         return 0;",
          "357:     }",
          "",
          "[Removed Lines]",
          "354:         jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"overflow in compose_image\");",
          "",
          "[Added Lines]",
          "354:         jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"overflow in compose_image\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "411:             h = dst->height - y;",
          "412:     }",
          "413: #ifdef JBIG2_DEBUG",
          "415: #endif",
          "418:     if ((w <= 0) || (h <= 0)) {",
          "419: #ifdef JBIG2_DEBUG",
          "421: #endif",
          "422:         return 0;",
          "423:     }",
          "",
          "[Removed Lines]",
          "414:     jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"compositing %dx%d at (%d, %d) after clipping\", w, h, x, y);",
          "420:         jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"zero clipping region\");",
          "",
          "[Added Lines]",
          "414:     jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"compositing %dx%d at (%d, %d) after clipping\", w, h, x, y);",
          "420:         jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"zero clipping region\");",
          "",
          "---------------"
        ],
        "jbig2_mmr.c||jbig2_mmr.c": [
          "File: jbig2_mmr.c -> jbig2_mmr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "951:     do {",
          "952:         val = jbig2_decode_get_code(mmr, table, initial_bits);",
          "953:         if (val == ERROR)",
          "955:         else if (val == UNCOMPRESSED)",
          "957:         else if (val == ZEROES)",
          "959:         result += val;",
          "960:     } while (val >= 64);",
          "",
          "[Removed Lines]",
          "954:             return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"invalid code detected in MMR-coded data\");",
          "956:             return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"uncompressed code in MMR-coded data\");",
          "958:             return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"zeroes code in MMR-coded data\");",
          "",
          "[Added Lines]",
          "954:             return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"invalid code detected in MMR-coded data\");",
          "956:             return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"uncompressed code in MMR-coded data\");",
          "958:             return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"zeroes code in MMR-coded data\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "988:             if (c == 0) {",
          "989:                 white_run = jbig2_decode_get_run(ctx, mmr, jbig2_mmr_white_decode, 8);",
          "990:                 if (white_run < 0)",
          "992:                 black_run = jbig2_decode_get_run(ctx, mmr, jbig2_mmr_black_decode, 7);",
          "993:                 if (black_run < 0)",
          "996:                 a1 = a0 + white_run;",
          "997:                 a2 = a1 + black_run;",
          "",
          "[Removed Lines]",
          "991:                     return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode white H run\");",
          "994:                     return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode black H run\");",
          "",
          "[Added Lines]",
          "991:                     return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode white H run\");",
          "994:                     return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode black H run\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1000:                 if (a2 > mmr->width)",
          "1001:                     a2 = mmr->width;",
          "1002:                 if (a2 < a1) {",
          "1004:                     a2 = a1;",
          "1005:                 }",
          "1006:                 if (a1 < mmr->width)",
          "",
          "[Removed Lines]",
          "1003:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"ignoring negative black H run\");",
          "",
          "[Added Lines]",
          "1003:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"ignoring negative black H run\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1009:             } else {",
          "1010:                 black_run = jbig2_decode_get_run(ctx, mmr, jbig2_mmr_black_decode, 7);",
          "1011:                 if (black_run < 0)",
          "1013:                 white_run = jbig2_decode_get_run(ctx, mmr, jbig2_mmr_white_decode, 8);",
          "1014:                 if (white_run < 0)",
          "1017:                 a1 = a0 + black_run;",
          "1018:                 a2 = a1 + white_run;",
          "",
          "[Removed Lines]",
          "1012:                     return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode black H run\");",
          "1015:                     return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode white H run\");",
          "",
          "[Added Lines]",
          "1012:                     return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode black H run\");",
          "1015:                     return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode white H run\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1021:                 if (a2 > mmr->width)",
          "1022:                     a2 = mmr->width;",
          "1023:                 if (a1 < a0) {",
          "1025:                     a1 = a0;",
          "1026:                 }",
          "1027:                 if (a0 < mmr->width)",
          "",
          "[Removed Lines]",
          "1024:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"ignoring negative white H run\");",
          "",
          "[Added Lines]",
          "1024:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"ignoring negative white H run\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1037:             b2 = jbig2_find_changing_element(ref, b1, mmr->width);",
          "1038:             if (c) {",
          "1039:                 if (b2 < a0) {",
          "1041:                     b2 = a0;",
          "1042:                 }",
          "1043:                 if (a0 < mmr->width)",
          "",
          "[Removed Lines]",
          "1040:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"ignoring negative P run\");",
          "",
          "[Added Lines]",
          "1040:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"ignoring negative P run\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1052:             b1 = jbig2_find_changing_element_of_color(ref, a0, mmr->width, !c);",
          "1053:             if (c) {",
          "1054:                 if (b1 < a0) {",
          "1056:                     b1 = a0;",
          "1057:                 }",
          "1058:                 if (a0 < mmr->width)",
          "",
          "[Removed Lines]",
          "1055:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"ignoring negative V(0) run\");",
          "",
          "[Added Lines]",
          "1055:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"ignoring negative V(0) run\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1070:                 b1 += 1;",
          "1071:             if (c) {",
          "1072:                 if (b1 < a0) {",
          "1074:                     b1 = a0;",
          "1075:                 }",
          "1076:                 if (a0 < mmr->width)",
          "",
          "[Removed Lines]",
          "1073:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"ignoring negative VR(1) run\");",
          "",
          "[Added Lines]",
          "1073:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"ignoring negative VR(1) run\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1088:                 b1 += 2;",
          "1089:             if (c) {",
          "1090:                 if (b1 < a0) {",
          "1092:                     b1 = a0;",
          "1093:                 }",
          "1094:                 if (a0 < mmr->width)",
          "",
          "[Removed Lines]",
          "1091:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"ignoring negative VR(2) run\");",
          "",
          "[Added Lines]",
          "1091:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"ignoring negative VR(2) run\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1106:                 b1 += 3;",
          "1107:             if (c) {",
          "1108:                 if (b1 < a0) {",
          "1110:                     b1 = a0;",
          "1111:                 }",
          "1112:                 if (a0 < mmr->width)",
          "",
          "[Removed Lines]",
          "1109:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"ignoring negative VR(3) run\");",
          "",
          "[Added Lines]",
          "1109:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"ignoring negative VR(3) run\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1124:                 b1 -= 1;",
          "1125:             if (c) {",
          "1126:                 if (b1 < a0) {",
          "1128:                     b1 = a0;",
          "1129:                 }",
          "1130:                 if (a0 < mmr->width)",
          "",
          "[Removed Lines]",
          "1127:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"ignoring negative VL(1) run\");",
          "",
          "[Added Lines]",
          "1127:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"ignoring negative VL(1) run\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1142:                 b1 -= 2;",
          "1143:             if (c) {",
          "1144:                 if (b1 < a0) {",
          "1146:                     b1 = a0;",
          "1147:                 }",
          "1148:                 if (a0 < mmr->width)",
          "",
          "[Removed Lines]",
          "1145:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"ignoring negative VL(2) run\");",
          "",
          "[Added Lines]",
          "1145:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"ignoring negative VL(2) run\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1160:                 b1 -= 3;",
          "1161:             if (c) {",
          "1162:                 if (b1 < a0) {",
          "1164:                     b1 = a0;",
          "1165:                 }",
          "1166:                 if (a0 < mmr->width)",
          "",
          "[Removed Lines]",
          "1163:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"ignoring negative VL(3) run\");",
          "",
          "[Added Lines]",
          "1163:                     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"ignoring negative VL(3) run\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1245:         memset(dst, 0, rowstride);",
          "1246:         code = jbig2_decode_mmr_line(ctx, &mmr, ref, dst, &eofb);",
          "1247:         if (code < 0)",
          "1249:         ref = dst;",
          "1250:         dst += rowstride;",
          "1251:     }",
          "",
          "[Removed Lines]",
          "1248:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode halftone mmr line\");",
          "",
          "[Added Lines]",
          "1248:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode halftone mmr line\");",
          "",
          "---------------"
        ],
        "jbig2_page.c||jbig2_page.c": [
          "File: jbig2_page.c -> jbig2_page.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:     if (ctx->pages[ctx->current_page].image == NULL) {",
          "219:     }",
          "221:     ctx->pages[ctx->current_page].state = JBIG2_PAGE_COMPLETE;",
          "",
          "[Removed Lines]",
          "218:         return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"page has no image, cannot be completed\");",
          "",
          "[Added Lines]",
          "218:         return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"page has no image, cannot be completed\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:     int code;",
          "265:     if (x > INT32_MAX || y > INT32_MAX)",
          "269:     if (page->image == NULL)",
          "273:     if (page->striped && page->height == 0xFFFFFFFF) {",
          "274:         uint32_t new_height;",
          "276:         if (y > UINT32_MAX - image->height)",
          "278:         new_height = y + image->height;",
          "280:         if (page->image->height < new_height) {",
          "281:             Jbig2Image *resized_image = NULL;",
          "284:             resized_image = jbig2_image_resize(ctx, page->image, page->image->width, new_height, page->flags & 4);",
          "285:             if (resized_image == NULL) {",
          "287:             }",
          "288:             page->image = resized_image;",
          "289:         }",
          "",
          "[Removed Lines]",
          "266:         return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"unsupported image coordinates\");",
          "270:         return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"page info possibly missing, no image defined\");",
          "277:                 return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"adding image at coordinate would grow page out of bounds\");",
          "283:             jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"growing page buffer to %u rows to accommodate new stripe\", new_height);",
          "286:                 return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"unable to resize image to accommodate new stripe\");",
          "",
          "[Added Lines]",
          "266:         return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"unsupported image coordinates\");",
          "270:         return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"page info possibly missing, no image defined\");",
          "277:                 return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"adding image at coordinate would grow page out of bounds\");",
          "283:             jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"growing page buffer to %u rows to accommodate new stripe\", new_height);",
          "286:                 return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"unable to resize image to accommodate new stripe\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "292:     code = jbig2_image_compose(ctx, page->image, image, x, y, op);",
          "293:     if (code < 0)",
          "296:     return 0;",
          "297: }",
          "",
          "[Removed Lines]",
          "294:         return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to compose image with page\");",
          "",
          "[Added Lines]",
          "294:         return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to compose image with page\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "320:             uint32_t page_number = ctx->pages[index].number;",
          "322:             if (img == NULL) {",
          "324:                 continue;",
          "325:             }",
          "327:             ctx->pages[index].state = JBIG2_PAGE_RETURNED;",
          "329:             return jbig2_image_reference(ctx, img);",
          "330:         }",
          "331:     }",
          "",
          "[Removed Lines]",
          "323:                 jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"page %d returned with no associated image\", page_number);",
          "328:             jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"page %d returned to the client\", page_number);",
          "",
          "[Added Lines]",
          "323:                 jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"page %d returned with no associated image\", page_number);",
          "328:             jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"page %d returned to the client\", page_number);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "350:         if (ctx->pages[index].image == image) {",
          "351:             jbig2_image_release(ctx, image);",
          "352:             ctx->pages[index].state = JBIG2_PAGE_RELEASED;",
          "354:             return;",
          "355:         }",
          "356:     }",
          "360: }",
          "",
          "[Removed Lines]",
          "353:             jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"page %d released by the client\", ctx->pages[index].number);",
          "359:     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to release unknown page\");",
          "",
          "[Added Lines]",
          "353:             jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"page %d released by the client\", ctx->pages[index].number);",
          "359:     jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to release unknown page\");",
          "",
          "---------------"
        ],
        "jbig2_priv.h||jbig2_priv.h": [
          "File: jbig2_priv.h -> jbig2_priv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: #define jbig2_renew(ctx, p, t, size) ((t *)jbig2_realloc(ctx->allocator, (p), size, sizeof(t)))",
          "129: #ifdef __GNUC__",
          "130:     __attribute__ ((format (__printf__, 4, 5)))",
          "131: #endif",
          "",
          "[Removed Lines]",
          "128: int jbig2_error(Jbig2Ctx *ctx, Jbig2Severity severity, int32_t seg_idx, const char *fmt, ...)",
          "",
          "[Added Lines]",
          "128: int jbig2_error(Jbig2Ctx *ctx, Jbig2Severity severity, uint32_t seg_idx, const char *fmt, ...)",
          "",
          "---------------"
        ],
        "jbig2_refinement.c||jbig2_refinement.c": [
          "File: jbig2_refinement.c -> jbig2_refinement.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:     if (params->GRTEMPLATE == 0 &&",
          "313:         (pixel_outside_field(params->grat[0], params->grat[1]) ||",
          "314:         refpixel_outside_field(params->grat[2], params->grat[3])))",
          "316:                            \"adaptive template pixel is out of field\");",
          "318:     for (y = 0; y < GRH; y++) {",
          "319:         int bit = jbig2_arith_decode(ctx, as, &GR_stats[start_context]);",
          "320:         if (bit < 0)",
          "322:         LTP ^= bit;",
          "323:         if (!LTP) {",
          "324:             for (x = 0; x < GRW; x++) {",
          "325:                 bit = jbig2_arith_decode(ctx, as, &GR_stats[mkctx(params, image, x, y)]);",
          "326:                 if (bit < 0)",
          "328:                 jbig2_image_set_pixel(image, x, y, bit);",
          "329:             }",
          "330:         } else {",
          "",
          "[Removed Lines]",
          "315:         return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1,",
          "321:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode arithmetic code when handling refinement TPGRON1\");",
          "327:                     return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode arithmetic code when handling refinement TPGRON1\");",
          "",
          "[Added Lines]",
          "315:         return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER,",
          "321:             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode arithmetic code when handling refinement TPGRON1\");",
          "327:                     return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode arithmetic code when handling refinement TPGRON1\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333:                 if (iv < 0) {",
          "334:                     int bit = jbig2_arith_decode(ctx, as, &GR_stats[mkctx(params, image, x, y)]);",
          "335:                     if (bit < 0)",
          "337:                     jbig2_image_set_pixel(image, x, y, bit);",
          "338:                 } else",
          "339:                     jbig2_image_set_pixel(image, x, y, iv);",
          "",
          "[Removed Lines]",
          "336:                         return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to decode arithmetic code when handling refinement TPGRON1\");",
          "",
          "[Added Lines]",
          "336:                         return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to decode arithmetic code when handling refinement TPGRON1\");",
          "",
          "---------------"
        ],
        "jbig2_segment.c||jbig2_segment.c": [
          "File: jbig2_segment.c -> jbig2_segment.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     result = jbig2_new(ctx, Jbig2Segment, 1);",
          "59:     if (result == NULL) {",
          "61:         return NULL;",
          "62:     }",
          "65:     result->number = jbig2_get_uint32(buf);",
          "68:     result->flags = buf[4];",
          "",
          "[Removed Lines]",
          "60:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate segment\");",
          "",
          "[Added Lines]",
          "60:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate segment\");",
          "66:     if (result->number == JBIG2_UNKNOWN_SEGMENT_NUMBER) {",
          "67:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"segment number too large\");",
          "68:         jbig2_free(ctx->allocator, result);",
          "69:         return NULL;",
          "70:     }",
          "",
          "---------------"
        ],
        "jbig2_symbol_dict.c||jbig2_symbol_dict.c": [
          "File: jbig2_symbol_dict.c -> jbig2_symbol_dict.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:         new_dict->glyphs = jbig2_new(ctx, Jbig2Image *, n_symbols);",
          "103:         new_dict->n_symbols = n_symbols;",
          "104:     } else {",
          "106:         return NULL;",
          "107:     }",
          "109:     if (new_dict->glyphs != NULL) {",
          "110:         memset(new_dict->glyphs, 0, n_symbols * sizeof(Jbig2Image *));",
          "111:     } else if (new_dict->n_symbols > 0) {",
          "113:         jbig2_free(ctx->allocator, new_dict);",
          "114:         return NULL;",
          "115:     }",
          "",
          "[Removed Lines]",
          "105:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate new empty symbol dictionary\");",
          "112:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate glyphs for new empty symbol dictionary\");",
          "",
          "[Added Lines]",
          "105:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate new empty symbol dictionary\");",
          "112:         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate glyphs for new empty symbol dictionary\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:             for (j = 0; j < dicts[i]->n_symbols; j++)",
          "216:                 new_dict->glyphs[k++] = jbig2_image_reference(ctx, dicts[i]->glyphs[j]);",
          "217:     } else {",
          "219:     }",
          "221:     return new_dict;",
          "",
          "[Removed Lines]",
          "218:         jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to allocate new symbol dictionary\");",
          "",
          "[Added Lines]",
          "218:         jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"failed to allocate new symbol dictionary\");",
          "",
          "---------------"
        ],
        "jbig2dec.c||jbig2dec.c": [
          "File: jbig2dec.c -> jbig2dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:         if (allocator->ctx) {",
          "114:             size_t limit_mb = allocator->memory_limit / MBYTE;",
          "115:             size_t peak_mb = allocator->memory_peak / MBYTE;",
          "117:         }",
          "118:     }",
          "",
          "[Removed Lines]",
          "116:             jbig2_error(allocator->ctx, JBIG2_SEVERITY_DEBUG, -1, \"memory: limit: %lu Mbyte peak usage: %lu Mbyte\", limit_mb, peak_mb);",
          "",
          "[Added Lines]",
          "116:             jbig2_error(allocator->ctx, JBIG2_SEVERITY_DEBUG, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"memory: limit: %lu Mbyte peak usage: %lu Mbyte\", limit_mb, peak_mb);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:         if (allocator->ctx) {",
          "182:             size_t limit_mb = allocator->memory_limit / MBYTE;",
          "183:             size_t peak_mb = allocator->memory_peak / MBYTE;",
          "185:         }",
          "186:     }",
          "",
          "[Removed Lines]",
          "184:             jbig2_error(allocator->ctx, JBIG2_SEVERITY_DEBUG, -1, \"memory: limit: %lu Mbyte peak usage: %lu Mbyte\", limit_mb, peak_mb);",
          "",
          "[Added Lines]",
          "184:             jbig2_error(allocator->ctx, JBIG2_SEVERITY_DEBUG, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"memory: limit: %lu Mbyte peak usage: %lu Mbyte\", limit_mb, peak_mb);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "372: }",
          "374: static void",
          "376: {",
          "377:     jbig2dec_error_callback_state_t *state = (jbig2dec_error_callback_state_t *) error_callback_data;",
          "378:     char *type;",
          "",
          "[Removed Lines]",
          "375: error_callback(void *error_callback_data, const char *buf, Jbig2Severity severity, int32_t seg_idx)",
          "",
          "[Added Lines]",
          "375: error_callback(void *error_callback_data, const char *buf, Jbig2Severity severity, uint32_t seg_idx)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "407:     strlen(\"jbig2dec \") +",
          "408:     strlen(type) + strlen(\" \") +",
          "409:     strlen(buf) + strlen(\" \") +",
          "412:     len = 45;",
          "413:     len += strlen(type);",
          "",
          "[Removed Lines]",
          "410:     strlen(\"(segment 0x\") + strlen(\"2147483648\") + strlen(\")\") +",
          "",
          "[Added Lines]",
          "410:     strlen(\"(segment 0x\") + strlen(\"4294967296\") + strlen(\")\") +",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "417:     if (message == NULL) {",
          "418:         return;",
          "419:     }",
          "421:         snprintf(message, len + 1, \"jbig2dec %s %s\", type, buf);",
          "422:     else",
          "423:         snprintf(message, len + 1, \"jbig2dec %s %s (segment 0x%02x)\", type, buf, seg_idx);",
          "",
          "[Removed Lines]",
          "420:     if (seg_idx == -1)",
          "",
          "[Added Lines]",
          "420:     if (seg_idx == JBIG2_UNKNOWN_SEGMENT_NUMBER)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "684:             code = jbig2_complete_page(ctx);",
          "685:             if (code < 0) {",
          "687:                 goto cleanup;",
          "688:             }",
          "",
          "[Removed Lines]",
          "686:                 jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"unable to complete page\");",
          "",
          "[Added Lines]",
          "686:                 jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"unable to complete page\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "739:     if (allocator != NULL && allocator->ctx != NULL) {",
          "740:         size_t limit_mb = allocator->memory_limit / MBYTE;",
          "741:         size_t peak_mb = allocator->memory_peak / MBYTE;",
          "743:     }",
          "",
          "[Removed Lines]",
          "742:         jbig2_error(allocator->ctx, JBIG2_SEVERITY_DEBUG, -1, \"memory: limit: %lu Mbyte peak usage: %lu Mbyte\", limit_mb, peak_mb);",
          "",
          "[Added Lines]",
          "742:         jbig2_error(allocator->ctx, JBIG2_SEVERITY_DEBUG, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"memory: limit: %lu Mbyte peak usage: %lu Mbyte\", limit_mb, peak_mb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8294b25104e9033408c18b68567281ae8e9d5e0",
      "candidate_info": {
        "commit_hash": "d8294b25104e9033408c18b68567281ae8e9d5e0",
        "repo": "ArtifexSoftware/jbig2dec",
        "commit_url": "https://github.com/ArtifexSoftware/jbig2dec/commit/d8294b25104e9033408c18b68567281ae8e9d5e0",
        "files": [
          "jbig2_image.c"
        ],
        "message": "jbig2dec: Add casts to silence a compiler warning.",
        "before_after_code_files": [
          "jbig2_image.c||jbig2_image.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "jbig2_image.c||jbig2_image.c"
          ],
          "candidate": [
            "jbig2_image.c||jbig2_image.c"
          ]
        }
      },
      "candidate_diff": {
        "jbig2_image.c||jbig2_image.c": [
          "File: jbig2_image.c -> jbig2_image.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:     if (src == NULL)",
          "348:         return 0;",
          "352:     {",
          "353: #ifdef JBIG2_DEBUG",
          "354:         jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, JBIG2_UNKNOWN_SEGMENT_NUMBER, \"overflow in compose_image\");",
          "",
          "[Removed Lines]",
          "350:     if ((UINT32_MAX - src->width  < (x > 0 ? x : -x)) ||",
          "351:         (UINT32_MAX - src->height < (y > 0 ? y : -y)))",
          "",
          "[Added Lines]",
          "350:     if ((UINT32_MAX - src->width  < (uint32_t) (x > 0 ? x : -x)) ||",
          "351:         (UINT32_MAX - src->height < (uint32_t) (y > 0 ? y : -y)))",
          "",
          "---------------"
        ]
      }
    }
  ]
}