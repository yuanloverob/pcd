{
  "cve_id": "CVE-2021-41214",
  "cve_desc": "TensorFlow is an open source platform for machine learning. In affected versions the shape inference code for `tf.ragged.cross` has an undefined behavior due to binding a reference to `nullptr`. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8",
  "patch_info": {
    "commit_hash": "fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8",
    "files": [
      "tensorflow/core/ops/ragged_array_ops.cc",
      "tensorflow/python/ops/ragged/ragged_cross_op_test.py"
    ],
    "message": "Fix null pointer exception in shape inference function when tf.ragged.cross() is called with invalid inputs.\n\nPiperOrigin-RevId: 400045848\nChange-Id: Ia65501583b85cf1ec14a252d83fbdd716817a516",
    "before_after_code_files": [
      "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc",
      "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc": [
      "File: tensorflow/core/ops/ragged_array_ops.cc -> tensorflow/core/ops/ragged_array_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "99:       int dense_start = num_ragged * 2 + num_sparse * 3;",
      "100:       for (int i = 0; i < dense_types.size(); ++i) {",
      "101:         ShapeHandle dense_input = c->input(i + dense_start);",
      "102:         int64_t batch_size = c->Value(c->Dim(dense_input, 0));",
      "103:         if (batch_size != InferenceContext::kUnknownDim) {",
      "104:           ShapeHandle row_splits = c->Vector(batch_size + 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "102:         int32 rank = c->Rank(dense_input);",
      "103:         if (rank == InferenceContext::kUnknownRank) {",
      "104:           continue;",
      "105:         } else if (rank != 2) {",
      "106:           return errors::InvalidArgument(",
      "107:               \"tf.ragged.cross only supports inputs with rank=2\");",
      "108:         }",
      "",
      "---------------"
    ],
    "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py": [
      "File: tensorflow/python/ops/ragged/ragged_cross_op_test.py -> tensorflow/python/ops/ragged/ragged_cross_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import numpy as np",
      "21: from tensorflow.python.framework import dtypes",
      "22: from tensorflow.python.framework import errors",
      "23: from tensorflow.python.framework import ops",
      "24: from tensorflow.python.framework import sparse_tensor",
      "25: from tensorflow.python.framework import test_util",
      "26: from tensorflow.python.ops import sparse_ops",
      "27: from tensorflow.python.ops.ragged import ragged_array_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: from tensorflow.python.eager import def_function",
      "26: from tensorflow.python.framework import tensor_spec",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "358:                   dense_const([[2], [3]])],",
      "359:           exception=(ValueError, errors.InvalidArgumentError),",
      "360:           message='inputs must all have the same batch dimension size'),",
      "361:   ])",
      "362:   def testStaticError(self, inputs, exception=ValueError, message=None):",
      "363:     with self.assertRaisesRegex(exception, message):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "363:       dict(",
      "364:           testcase_name='3DDenseTensor',",
      "365:           inputs=[dense_const([[[1]]])],",
      "366:           exception=(ValueError, errors.InvalidArgumentError),",
      "367:           message='tf.ragged.cross only supports inputs with rank=2'),",
      "368:       dict(",
      "369:           testcase_name='0DDenseTensor',",
      "370:           inputs=[dense_const(1)],",
      "371:           exception=(ValueError, errors.InvalidArgumentError),",
      "372:           message='tf.ragged.cross only supports inputs with rank=2'),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "368:           testcase_name='3DRaggedTensor',",
      "369:           inputs=[ragged_const([[[1]]], ragged_rank=1)],",
      "370:           message='tf.ragged.cross only supports inputs with rank=2'),",
      "371:       dict(",
      "372:           testcase_name='3DDenseTensor',",
      "373:           inputs=[dense_const([[[1]]])],",
      "374:           message='tf.ragged.cross only supports inputs with rank=2'),",
      "375:   ])",
      "376:   def testRuntimeError(self,",
      "377:                        inputs,",
      "378:                        exception=errors.InvalidArgumentError,",
      "380:     with self.assertRaisesRegex(exception, message):",
      "383:   def _ragged_to_sparse(self, t):",
      "384:     if ragged_tensor.is_ragged(t):",
      "",
      "[Removed Lines]",
      "379:                        message=None):",
      "381:       self.evaluate(ragged_array_ops.cross(inputs))",
      "",
      "[Added Lines]",
      "383:       dict(",
      "384:           testcase_name='0DDenseTensor',",
      "385:           inputs=[dense_const(1)],",
      "386:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
      "387:           exception=(ValueError, errors.InvalidArgumentError),",
      "388:           message='tf.ragged.cross only supports inputs with rank=2'),",
      "389:       dict(",
      "390:           testcase_name='1DDenseTensor',",
      "391:           inputs=[dense_const([1])],",
      "392:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
      "393:           exception=(ValueError, errors.InvalidArgumentError),",
      "394:           message='tf.ragged.cross only supports inputs with rank=2'),",
      "398:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
      "399:           exception=(ValueError, errors.InvalidArgumentError),",
      "405:                        message=None,",
      "406:                        signature=None):",
      "407:     @def_function.function(input_signature=signature)",
      "408:     def fn(x):",
      "409:       return ragged_array_ops.cross(x)",
      "412:       self.evaluate(fn(inputs))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "442962d4c4093afa09317252303ba81ada69e43f",
      "candidate_info": {
        "commit_hash": "442962d4c4093afa09317252303ba81ada69e43f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/442962d4c4093afa09317252303ba81ada69e43f",
        "files": [
          "tensorflow/core/ops/ragged_array_ops.cc",
          "tensorflow/python/ops/ragged/ragged_cross_op_test.py"
        ],
        "message": "Fix null pointer exception in shape inference function when tf.ragged.cross() is called with invalid inputs.\n\nPiperOrigin-RevId: 400045848\nChange-Id: Ia65501583b85cf1ec14a252d83fbdd716817a516",
        "before_after_code_files": [
          "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc",
          "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc",
            "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc",
            "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc": [
          "File: tensorflow/core/ops/ragged_array_ops.cc -> tensorflow/core/ops/ragged_array_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:       int dense_start = num_ragged * 2 + num_sparse * 3;",
          "100:       for (int i = 0; i < dense_types.size(); ++i) {",
          "101:         ShapeHandle dense_input = c->input(i + dense_start);",
          "103:         if (batch_size != InferenceContext::kUnknownDim) {",
          "104:           ShapeHandle row_splits = c->Vector(batch_size + 1);",
          "105:           if (!c->Merge(out_splits, row_splits, &out_splits).ok()) {",
          "",
          "[Removed Lines]",
          "102:         int64 batch_size = c->Value(c->Dim(dense_input, 0));",
          "",
          "[Added Lines]",
          "102:         int32 rank = c->Rank(dense_input);",
          "103:         if (rank == InferenceContext::kUnknownRank) {",
          "104:           continue;",
          "105:         } else if (rank != 2) {",
          "106:           return errors::InvalidArgument(",
          "107:               \"tf.ragged.cross only supports inputs with rank=2\");",
          "108:         }",
          "109:         int64_t batch_size = c->Value(c->Dim(dense_input, 0));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_cross_op_test.py -> tensorflow/python/ops/ragged/ragged_cross_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import numpy as np",
          "25: from tensorflow.python.framework import dtypes",
          "26: from tensorflow.python.framework import errors",
          "27: from tensorflow.python.framework import ops",
          "28: from tensorflow.python.framework import sparse_tensor",
          "29: from tensorflow.python.framework import test_util",
          "30: from tensorflow.python.ops import sparse_ops",
          "31: from tensorflow.python.ops.ragged import ragged_array_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: from tensorflow.python.eager import def_function",
          "30: from tensorflow.python.framework import tensor_spec",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:                   dense_const([[2], [3]])],",
          "363:           exception=(ValueError, errors.InvalidArgumentError),",
          "364:           message='inputs must all have the same batch dimension size'),",
          "365:   ])",
          "366:   def testStaticError(self, inputs, exception=ValueError, message=None):",
          "367:     with self.assertRaisesRegex(exception, message):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:       dict(",
          "368:           testcase_name='3DDenseTensor',",
          "369:           inputs=[dense_const([[[1]]])],",
          "370:           exception=(ValueError, errors.InvalidArgumentError),",
          "371:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "372:       dict(",
          "373:           testcase_name='0DDenseTensor',",
          "374:           inputs=[dense_const(1)],",
          "375:           exception=(ValueError, errors.InvalidArgumentError),",
          "376:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "372:           testcase_name='3DRaggedTensor',",
          "373:           inputs=[ragged_const([[[1]]], ragged_rank=1)],",
          "374:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "375:       dict(",
          "376:           testcase_name='3DDenseTensor',",
          "377:           inputs=[dense_const([[[1]]])],",
          "378:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "379:   ])",
          "380:   def testRuntimeError(self,",
          "381:                        inputs,",
          "382:                        exception=errors.InvalidArgumentError,",
          "384:     with self.assertRaisesRegex(exception, message):",
          "387:   def _ragged_to_sparse(self, t):",
          "388:     if ragged_tensor.is_ragged(t):",
          "",
          "[Removed Lines]",
          "383:                        message=None):",
          "385:       self.evaluate(ragged_array_ops.cross(inputs))",
          "",
          "[Added Lines]",
          "387:       dict(",
          "388:           testcase_name='0DDenseTensor',",
          "389:           inputs=[dense_const(1)],",
          "390:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
          "391:           exception=(ValueError, errors.InvalidArgumentError),",
          "392:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "393:       dict(",
          "394:           testcase_name='1DDenseTensor',",
          "395:           inputs=[dense_const([1])],",
          "396:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
          "397:           exception=(ValueError, errors.InvalidArgumentError),",
          "398:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "402:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
          "403:           exception=(ValueError, errors.InvalidArgumentError),",
          "409:                        message=None,",
          "410:                        signature=None):",
          "411:     @def_function.function(input_signature=signature)",
          "412:     def fn(x):",
          "413:       return ragged_array_ops.cross(x)",
          "416:       self.evaluate(fn(inputs))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "96de0a692c60afb8eb8f13ded0def88fbd945d0b",
      "candidate_info": {
        "commit_hash": "96de0a692c60afb8eb8f13ded0def88fbd945d0b",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/96de0a692c60afb8eb8f13ded0def88fbd945d0b",
        "files": [
          "tensorflow/core/ops/ragged_array_ops.cc",
          "tensorflow/python/ops/ragged/ragged_cross_op_test.py"
        ],
        "message": "Fix null pointer exception in shape inference function when tf.ragged.cross() is called with invalid inputs.\n\nPiperOrigin-RevId: 400045848\nChange-Id: Ia65501583b85cf1ec14a252d83fbdd716817a516",
        "before_after_code_files": [
          "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc",
          "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc",
            "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc",
            "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc": [
          "File: tensorflow/core/ops/ragged_array_ops.cc -> tensorflow/core/ops/ragged_array_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:       int dense_start = num_ragged * 2 + num_sparse * 3;",
          "100:       for (int i = 0; i < dense_types.size(); ++i) {",
          "101:         ShapeHandle dense_input = c->input(i + dense_start);",
          "103:         if (batch_size != InferenceContext::kUnknownDim) {",
          "104:           ShapeHandle row_splits = c->Vector(batch_size + 1);",
          "105:           if (!c->Merge(out_splits, row_splits, &out_splits).ok()) {",
          "",
          "[Removed Lines]",
          "102:         int64 batch_size = c->Value(c->Dim(dense_input, 0));",
          "",
          "[Added Lines]",
          "102:         int32 rank = c->Rank(dense_input);",
          "103:         if (rank == InferenceContext::kUnknownRank) {",
          "104:           continue;",
          "105:         } else if (rank != 2) {",
          "106:           return errors::InvalidArgument(",
          "107:               \"tf.ragged.cross only supports inputs with rank=2\");",
          "108:         }",
          "109:         int64_t batch_size = c->Value(c->Dim(dense_input, 0));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_cross_op_test.py -> tensorflow/python/ops/ragged/ragged_cross_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import numpy as np",
          "25: from tensorflow.python.framework import dtypes",
          "26: from tensorflow.python.framework import errors",
          "27: from tensorflow.python.framework import ops",
          "28: from tensorflow.python.framework import sparse_tensor",
          "29: from tensorflow.python.framework import test_util",
          "30: from tensorflow.python.ops import sparse_ops",
          "31: from tensorflow.python.ops.ragged import ragged_array_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: from tensorflow.python.eager import def_function",
          "30: from tensorflow.python.framework import tensor_spec",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:                   dense_const([[2], [3]])],",
          "363:           exception=(ValueError, errors.InvalidArgumentError),",
          "364:           message='inputs must all have the same batch dimension size'),",
          "365:   ])",
          "366:   def testStaticError(self, inputs, exception=ValueError, message=None):",
          "367:     with self.assertRaisesRegex(exception, message):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:       dict(",
          "368:           testcase_name='3DDenseTensor',",
          "369:           inputs=[dense_const([[[1]]])],",
          "370:           exception=(ValueError, errors.InvalidArgumentError),",
          "371:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "372:       dict(",
          "373:           testcase_name='0DDenseTensor',",
          "374:           inputs=[dense_const(1)],",
          "375:           exception=(ValueError, errors.InvalidArgumentError),",
          "376:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "372:           testcase_name='3DRaggedTensor',",
          "373:           inputs=[ragged_const([[[1]]], ragged_rank=1)],",
          "374:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "375:       dict(",
          "376:           testcase_name='3DDenseTensor',",
          "377:           inputs=[dense_const([[[1]]])],",
          "378:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "379:   ])",
          "380:   def testRuntimeError(self,",
          "381:                        inputs,",
          "382:                        exception=errors.InvalidArgumentError,",
          "384:     with self.assertRaisesRegex(exception, message):",
          "387:   def _ragged_to_sparse(self, t):",
          "388:     if ragged_tensor.is_ragged(t):",
          "",
          "[Removed Lines]",
          "383:                        message=None):",
          "385:       self.evaluate(ragged_array_ops.cross(inputs))",
          "",
          "[Added Lines]",
          "387:       dict(",
          "388:           testcase_name='0DDenseTensor',",
          "389:           inputs=[dense_const(1)],",
          "390:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
          "391:           exception=(ValueError, errors.InvalidArgumentError),",
          "392:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "393:       dict(",
          "394:           testcase_name='1DDenseTensor',",
          "395:           inputs=[dense_const([1])],",
          "396:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
          "397:           exception=(ValueError, errors.InvalidArgumentError),",
          "398:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "402:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
          "403:           exception=(ValueError, errors.InvalidArgumentError),",
          "409:                        message=None,",
          "410:                        signature=None):",
          "411:     @def_function.function(input_signature=signature)",
          "412:     def fn(x):",
          "413:       return ragged_array_ops.cross(x)",
          "416:       self.evaluate(fn(inputs))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd855489617272bba0586b326b25d77a21c8a1d2",
      "candidate_info": {
        "commit_hash": "cd855489617272bba0586b326b25d77a21c8a1d2",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/cd855489617272bba0586b326b25d77a21c8a1d2",
        "files": [
          "tensorflow/core/ops/ragged_array_ops.cc",
          "tensorflow/python/ops/ragged/ragged_cross_op_test.py"
        ],
        "message": "Fix null pointer exception in shape inference function when tf.ragged.cross() is called with invalid inputs.\n\nPiperOrigin-RevId: 400045848\nChange-Id: Ia65501583b85cf1ec14a252d83fbdd716817a516",
        "before_after_code_files": [
          "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc",
          "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc",
            "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc",
            "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc": [
          "File: tensorflow/core/ops/ragged_array_ops.cc -> tensorflow/core/ops/ragged_array_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:       int dense_start = num_ragged * 2 + num_sparse * 3;",
          "100:       for (int i = 0; i < dense_types.size(); ++i) {",
          "101:         ShapeHandle dense_input = c->input(i + dense_start);",
          "103:         if (batch_size != InferenceContext::kUnknownDim) {",
          "104:           ShapeHandle row_splits = c->Vector(batch_size + 1);",
          "105:           if (!c->Merge(out_splits, row_splits, &out_splits).ok()) {",
          "",
          "[Removed Lines]",
          "102:         int64 batch_size = c->Value(c->Dim(dense_input, 0));",
          "",
          "[Added Lines]",
          "102:         int32 rank = c->Rank(dense_input);",
          "103:         if (rank == InferenceContext::kUnknownRank) {",
          "104:           continue;",
          "105:         } else if (rank != 2) {",
          "106:           return errors::InvalidArgument(",
          "107:               \"tf.ragged.cross only supports inputs with rank=2\");",
          "108:         }",
          "109:         int64_t batch_size = c->Value(c->Dim(dense_input, 0));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_cross_op_test.py -> tensorflow/python/ops/ragged/ragged_cross_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import numpy as np",
          "25: from tensorflow.python.framework import dtypes",
          "26: from tensorflow.python.framework import errors",
          "27: from tensorflow.python.framework import ops",
          "28: from tensorflow.python.framework import sparse_tensor",
          "29: from tensorflow.python.framework import test_util",
          "30: from tensorflow.python.ops import sparse_ops",
          "31: from tensorflow.python.ops.ragged import ragged_array_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: from tensorflow.python.eager import def_function",
          "30: from tensorflow.python.framework import tensor_spec",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:                   dense_const([[2], [3]])],",
          "363:           exception=(ValueError, errors.InvalidArgumentError),",
          "364:           message='inputs must all have the same batch dimension size'),",
          "365:   ])",
          "366:   def testStaticError(self, inputs, exception=ValueError, message=None):",
          "367:     with self.assertRaisesRegex(exception, message):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:       dict(",
          "368:           testcase_name='3DDenseTensor',",
          "369:           inputs=[dense_const([[[1]]])],",
          "370:           exception=(ValueError, errors.InvalidArgumentError),",
          "371:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "372:       dict(",
          "373:           testcase_name='0DDenseTensor',",
          "374:           inputs=[dense_const(1)],",
          "375:           exception=(ValueError, errors.InvalidArgumentError),",
          "376:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "372:           testcase_name='3DRaggedTensor',",
          "373:           inputs=[ragged_const([[[1]]], ragged_rank=1)],",
          "374:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "375:       dict(",
          "376:           testcase_name='3DDenseTensor',",
          "377:           inputs=[dense_const([[[1]]])],",
          "378:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "379:   ])",
          "380:   def testRuntimeError(self,",
          "381:                        inputs,",
          "382:                        exception=errors.InvalidArgumentError,",
          "384:     with self.assertRaisesRegex(exception, message):",
          "387:   def _ragged_to_sparse(self, t):",
          "388:     if ragged_tensor.is_ragged(t):",
          "",
          "[Removed Lines]",
          "383:                        message=None):",
          "385:       self.evaluate(ragged_array_ops.cross(inputs))",
          "",
          "[Added Lines]",
          "387:       dict(",
          "388:           testcase_name='0DDenseTensor',",
          "389:           inputs=[dense_const(1)],",
          "390:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
          "391:           exception=(ValueError, errors.InvalidArgumentError),",
          "392:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "393:       dict(",
          "394:           testcase_name='1DDenseTensor',",
          "395:           inputs=[dense_const([1])],",
          "396:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
          "397:           exception=(ValueError, errors.InvalidArgumentError),",
          "398:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "402:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
          "403:           exception=(ValueError, errors.InvalidArgumentError),",
          "409:                        message=None,",
          "410:                        signature=None):",
          "411:     @def_function.function(input_signature=signature)",
          "412:     def fn(x):",
          "413:       return ragged_array_ops.cross(x)",
          "416:       self.evaluate(fn(inputs))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d87913393cd91d67e9406e5fa7c23ed4d63f841",
      "candidate_info": {
        "commit_hash": "2d87913393cd91d67e9406e5fa7c23ed4d63f841",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/2d87913393cd91d67e9406e5fa7c23ed4d63f841",
        "files": [
          "tensorflow/core/ops/ragged_array_ops.cc",
          "tensorflow/python/ops/ragged/ragged_cross_op_test.py"
        ],
        "message": "Fix null pointer exception in shape inference function when tf.ragged.cross() is called with invalid inputs.\n\nPiperOrigin-RevId: 400045848\nChange-Id: Ia65501583b85cf1ec14a252d83fbdd716817a516",
        "before_after_code_files": [
          "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc",
          "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc",
            "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc",
            "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/ragged_array_ops.cc||tensorflow/core/ops/ragged_array_ops.cc": [
          "File: tensorflow/core/ops/ragged_array_ops.cc -> tensorflow/core/ops/ragged_array_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:       int dense_start = num_ragged * 2 + num_sparse * 3;",
          "100:       for (int i = 0; i < dense_types.size(); ++i) {",
          "101:         ShapeHandle dense_input = c->input(i + dense_start);",
          "102:         int64_t batch_size = c->Value(c->Dim(dense_input, 0));",
          "103:         if (batch_size != InferenceContext::kUnknownDim) {",
          "104:           ShapeHandle row_splits = c->Vector(batch_size + 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:         int32 rank = c->Rank(dense_input);",
          "103:         if (rank == InferenceContext::kUnknownRank) {",
          "104:           continue;",
          "105:         } else if (rank != 2) {",
          "106:           return errors::InvalidArgument(",
          "107:               \"tf.ragged.cross only supports inputs with rank=2\");",
          "108:         }",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_cross_op_test.py||tensorflow/python/ops/ragged/ragged_cross_op_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_cross_op_test.py -> tensorflow/python/ops/ragged/ragged_cross_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import numpy as np",
          "25: from tensorflow.python.framework import dtypes",
          "26: from tensorflow.python.framework import errors",
          "27: from tensorflow.python.framework import ops",
          "28: from tensorflow.python.framework import sparse_tensor",
          "29: from tensorflow.python.framework import test_util",
          "30: from tensorflow.python.ops import sparse_ops",
          "31: from tensorflow.python.ops.ragged import ragged_array_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: from tensorflow.python.eager import def_function",
          "30: from tensorflow.python.framework import tensor_spec",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:                   dense_const([[2], [3]])],",
          "363:           exception=(ValueError, errors.InvalidArgumentError),",
          "364:           message='inputs must all have the same batch dimension size'),",
          "365:   ])",
          "366:   def testStaticError(self, inputs, exception=ValueError, message=None):",
          "367:     with self.assertRaisesRegex(exception, message):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:       dict(",
          "368:           testcase_name='3DDenseTensor',",
          "369:           inputs=[dense_const([[[1]]])],",
          "370:           exception=(ValueError, errors.InvalidArgumentError),",
          "371:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "372:       dict(",
          "373:           testcase_name='0DDenseTensor',",
          "374:           inputs=[dense_const(1)],",
          "375:           exception=(ValueError, errors.InvalidArgumentError),",
          "376:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "372:           testcase_name='3DRaggedTensor',",
          "373:           inputs=[ragged_const([[[1]]], ragged_rank=1)],",
          "374:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "375:       dict(",
          "376:           testcase_name='3DDenseTensor',",
          "377:           inputs=[dense_const([[[1]]])],",
          "378:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "379:   ])",
          "380:   def testRuntimeError(self,",
          "381:                        inputs,",
          "382:                        exception=errors.InvalidArgumentError,",
          "384:     with self.assertRaisesRegex(exception, message):",
          "387:   def _ragged_to_sparse(self, t):",
          "388:     if ragged_tensor.is_ragged(t):",
          "",
          "[Removed Lines]",
          "383:                        message=None):",
          "385:       self.evaluate(ragged_array_ops.cross(inputs))",
          "",
          "[Added Lines]",
          "387:       dict(",
          "388:           testcase_name='0DDenseTensor',",
          "389:           inputs=[dense_const(1)],",
          "390:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
          "391:           exception=(ValueError, errors.InvalidArgumentError),",
          "392:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "393:       dict(",
          "394:           testcase_name='1DDenseTensor',",
          "395:           inputs=[dense_const([1])],",
          "396:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
          "397:           exception=(ValueError, errors.InvalidArgumentError),",
          "398:           message='tf.ragged.cross only supports inputs with rank=2'),",
          "402:           signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],",
          "403:           exception=(ValueError, errors.InvalidArgumentError),",
          "409:                        message=None,",
          "410:                        signature=None):",
          "411:     @def_function.function(input_signature=signature)",
          "412:     def fn(x):",
          "413:       return ragged_array_ops.cross(x)",
          "416:       self.evaluate(fn(inputs))",
          "",
          "---------------"
        ]
      }
    }
  ]
}