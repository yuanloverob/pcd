{
  "cve_id": "CVE-2021-3903",
  "cve_desc": "vim is vulnerable to Heap-based Buffer Overflow",
  "repo": "vim/vim",
  "patch_hash": "777e7c21b7627be80961848ac560cb0a9978ff43",
  "patch_info": {
    "commit_hash": "777e7c21b7627be80961848ac560cb0a9978ff43",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/777e7c21b7627be80961848ac560cb0a9978ff43",
    "files": [
      "src/move.c",
      "src/testdir/test_normal.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.3564: invalid memory access when scrolling without valid screen\n\nProblem:    Invalid memory access when scrolling without a valid screen.\nSolution:   Do not set VALID_BOTLINE in w_valid.",
    "before_after_code_files": [
      "src/move.c||src/move.c",
      "src/testdir/test_normal.vim||src/testdir/test_normal.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/move.c||src/move.c": [
      "File: src/move.c -> src/move.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "199:  check_cursor_lnum();",
      "200:  curwin->w_topline = curwin->w_cursor.lnum;",
      "201:  curwin->w_botline = curwin->w_topline;",
      "203:  curwin->w_scbind_pos = 1;",
      "204:  return;",
      "205:     }",
      "",
      "[Removed Lines]",
      "202:  curwin->w_valid |= VALID_BOTLINE|VALID_BOTLINE_AP;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/testdir/test_normal.vim||src/testdir/test_normal.vim": [
      "File: src/testdir/test_normal.vim -> src/testdir/test_normal.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:   else",
      "35:     silent exe \"normal! `[v`]y\"",
      "36:   endif",
      "38:   let &selection = sel_save",
      "39:   let @@ = reg_save",
      "40: endfunc",
      "42: func OpfuncDummy(type, ...)",
      "43:   \" for testing operatorfunc",
      "46:   if a:0  \" Invoked from Visual mode, use gv command.",
      "47:     silent exe \"normal! gvy\"",
      "",
      "[Removed Lines]",
      "37:   let g:a=strlen(substitute(@@, '[^ ]', '', 'g'))",
      "44:   let g:opt=&linebreak",
      "",
      "[Added Lines]",
      "37:   let g:a = strlen(substitute(@@, '[^ ]', '', 'g'))",
      "44:   let g:opt = &linebreak",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52:   endif",
      "53:   \" Create a new dummy window",
      "54:   new",
      "56: endfunc",
      "58: func Test_normal00_optrans()",
      "",
      "[Removed Lines]",
      "55:   let g:bufnr=bufnr('%')",
      "",
      "[Added Lines]",
      "55:   let g:bufnr = bufnr('%')",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "987:   close!",
      "988: endfunc",
      "990: \" Test for the 'sidescroll' option",
      "991: func Test_sidescroll_opt()",
      "992:   new",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "990: func Test_scroll_in_ex_mode()",
      "991:   \" This was using invalid memory because w_botline was invalid.",
      "992:   let lines =<< trim END",
      "993:       diffsplit",
      "994:       norm os0\u00030(\u0004",
      "995:       call writefile(['done'], 'Xdone')",
      "996:       qa!",
      "997:   END",
      "998:   call writefile(lines, 'Xscript')",
      "999:   call assert_equal(1, RunVim([], [], '--clean -X -Z -e -s -S Xscript'))",
      "1000:   call assert_equal(['done'], readfile('Xdone'))",
      "1002:   call delete('Xscript')",
      "1003:   call delete('Xdone')",
      "1004: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "758: static int included_patches[] =",
      "761:     3563,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "761:     3564,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b152b6a40f729ed81a25d2fa541a4e73e201bec4",
      "candidate_info": {
        "commit_hash": "b152b6a40f729ed81a25d2fa541a4e73e201bec4",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/b152b6a40f729ed81a25d2fa541a4e73e201bec4",
        "files": [
          "src/testdir/test_mapping.vim",
          "src/testdir/test_match.vim",
          "src/testdir/test_matchadd_conceal.vim",
          "src/testdir/test_memory_usage.vim",
          "src/testdir/test_messages.vim",
          "src/testdir/test_mksession.vim",
          "src/testdir/test_modeline.vim",
          "src/testdir/test_netbeans.vim",
          "src/testdir/test_normal.vim",
          "src/testdir/test_number.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0626: too many delete() calls in tests\n\nProblem:    Too many delete() calls in tests.\nSolution:   Use deferred delete where possible.",
        "before_after_code_files": [
          "src/testdir/test_mapping.vim||src/testdir/test_mapping.vim",
          "src/testdir/test_match.vim||src/testdir/test_match.vim",
          "src/testdir/test_matchadd_conceal.vim||src/testdir/test_matchadd_conceal.vim",
          "src/testdir/test_memory_usage.vim||src/testdir/test_memory_usage.vim",
          "src/testdir/test_messages.vim||src/testdir/test_messages.vim",
          "src/testdir/test_mksession.vim||src/testdir/test_mksession.vim",
          "src/testdir/test_modeline.vim||src/testdir/test_modeline.vim",
          "src/testdir/test_netbeans.vim||src/testdir/test_netbeans.vim",
          "src/testdir/test_normal.vim||src/testdir/test_normal.vim",
          "src/testdir/test_number.vim||src/testdir/test_number.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_normal.vim||src/testdir/test_normal.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_normal.vim||src/testdir/test_normal.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_mapping.vim||src/testdir/test_mapping.vim": [
          "File: src/testdir/test_mapping.vim -> src/testdir/test_mapping.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:   nmap <expr> ! Func()",
          "421:   set updatetime=50",
          "422:   [CODE]",
          "425:   let buf = term_start(GetVimCommandCleanTerm() .. ' -S Xtest.vim', {'term_rows': 8})",
          "426:   let job = term_getjob(buf)",
          "",
          "[Removed Lines]",
          "423:   call writefile(lines, 'Xtest.vim')",
          "",
          "[Added Lines]",
          "423:   call writefile(lines, 'Xtest.vim', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439:     call assert_equal('', job_info(job).termsig)",
          "440:   endif",
          "443:   exe buf .. 'bwipe!'",
          "444: endfunc",
          "",
          "[Removed Lines]",
          "442:   call delete('Xtest.vim')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "565:       endfunc",
          "566:       set stl=%{Status()}",
          "567:   END",
          "569:   let buf = RunVimInTerminal('-S XtestExprMap', #{rows: 10})",
          "570:   call term_sendkeys(buf, \"\\<C-B>\")",
          "571:   call VerifyScreenDump(buf, 'Test_map_expr_1', {})",
          "573:   \" clean up",
          "574:   call StopVimInTerminal(buf)",
          "576: endfunc",
          "578: func Test_map_listing()",
          "",
          "[Removed Lines]",
          "568:   call writefile(lines, 'XtestExprMap')",
          "575:   call delete('XtestExprMap')",
          "",
          "[Added Lines]",
          "567:   call writefile(lines, 'XtestExprMap', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "581:   let lines =<< trim END",
          "582:       nmap a b",
          "583:   END",
          "585:   let buf = RunVimInTerminal('-S XtestMapList', #{rows: 6})",
          "586:   call term_sendkeys(buf, \":                      nmap a\\<CR>\")",
          "587:   call VerifyScreenDump(buf, 'Test_map_list_1', {})",
          "589:   \" clean up",
          "590:   call StopVimInTerminal(buf)",
          "592: endfunc",
          "594: func Test_expr_map_error()",
          "",
          "[Removed Lines]",
          "584:   call writefile(lines, 'XtestMapList')",
          "591:   call delete('XtestMapList')",
          "",
          "[Added Lines]",
          "582:   call writefile(lines, 'XtestMapList', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "606:       call test_override('ui_delay', 10)",
          "607:   END",
          "609:   let buf = RunVimInTerminal('-S XtestExprMap', #{rows: 10})",
          "610:   call term_sendkeys(buf, \"\\<F2>\")",
          "611:   call TermWait(buf)",
          "",
          "[Removed Lines]",
          "608:   call writefile(lines, 'XtestExprMap')",
          "",
          "[Added Lines]",
          "605:   call writefile(lines, 'XtestExprMap', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "620:   \" clean up",
          "621:   call StopVimInTerminal(buf)",
          "623: endfunc",
          "625: \" Test for mapping errors",
          "",
          "[Removed Lines]",
          "622:   call delete('XtestExprMap')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1081:       let g:x = 32",
          "1082:     endfunc",
          "1083:   END",
          "1085:   source Xscript",
          "1086:   call feedkeys(\"\\<F2>\", 'xt')",
          "1087:   call assert_equal(32, g:x)",
          "1090:   unmap <F3>",
          "1091:   unmap! <F3>",
          "",
          "[Removed Lines]",
          "1084:   call writefile(lines, 'Xscript')",
          "1088:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "1080:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1530: endfunc",
          "1532: func Test_map_script_cmd_redo()",
          "1534:   let lines =<< trim END",
          "1535:       vim9script",
          "1536:       import autoload './script.vim'",
          "",
          "[Removed Lines]",
          "1533:   call mkdir('Xmapcmd')",
          "",
          "[Added Lines]",
          "1528:   call mkdir('Xmapcmd', 'R')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1555:   ounmap <F3>",
          "1556:   nunmap j",
          "1558:   bwipe!",
          "1559: endfunc",
          "",
          "[Removed Lines]",
          "1557:   call delete('Xmapcmd', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1724:     inoremap ab TEST",
          "1725:     inoremap a <Nop>",
          "1726:   END",
          "1728:   let buf = RunVimInTerminal('-S Xtest_map_after_timed_out_nop', #{rows: 6})",
          "1730:   \" Enter Insert mode",
          "",
          "[Removed Lines]",
          "1727:   call writefile(lines, 'Xtest_map_after_timed_out_nop')",
          "",
          "[Added Lines]",
          "1721:   call writefile(lines, 'Xtest_map_after_timed_out_nop', 'D')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1742:   \" clean up",
          "1743:   call StopVimInTerminal(buf)",
          "1745: endfunc",
          "1747: func Test_using_past_typeahead()",
          "",
          "[Removed Lines]",
          "1744:   call delete('Xtest_map_after_timed_out_nop')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_match.vim||src/testdir/test_match.vim": [
          "File: src/testdir/test_match.vim -> src/testdir/test_match.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "372:     call printf('%s]%s', repeat('x', 50), repeat('x', 70))->setline(1)",
          "373:     call matchaddpos('ErrorMsg', [[1, 51]])",
          "374:   END",
          "376:   let buf = RunVimInTerminal('-S XscriptMatchLinebreak', #{rows: 10})",
          "377:   call VerifyScreenDump(buf, 'Test_match_linebreak', {})",
          "379:   call StopVimInTerminal(buf)",
          "381: endfunc",
          "383: func Test_match_with_incsearch()",
          "",
          "[Removed Lines]",
          "375:   call writefile(lines, 'XscriptMatchLinebreak')",
          "380:   call delete('XscriptMatchLinebreak')",
          "",
          "[Added Lines]",
          "375:   call writefile(lines, 'XscriptMatchLinebreak', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388:     call setline(1, range(20))",
          "389:     call matchaddpos('ErrorMsg', [3])",
          "390:   END",
          "392:   let buf = RunVimInTerminal('-S XmatchWithIncsearch', #{rows: 6})",
          "393:   call VerifyScreenDump(buf, 'Test_match_with_incsearch_1', {})",
          "",
          "[Removed Lines]",
          "391:   call writefile(lines, 'XmatchWithIncsearch')",
          "",
          "[Added Lines]",
          "390:   call writefile(lines, 'XmatchWithIncsearch', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "398:   call term_sendkeys(buf, \"\\<CR>\")",
          "399:   call StopVimInTerminal(buf)",
          "401: endfunc",
          "403: \" Test for deleting matches outside of the screen redraw top/bottom lines",
          "",
          "[Removed Lines]",
          "400:   call delete('XmatchWithIncsearch')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "428:     call setline(1, \"\\tix\")",
          "429:     call matchadd('ErrorMsg', '\\t')",
          "430:   END",
          "432:   let buf = RunVimInTerminal('-S XscriptMatchTabLinebreak', #{rows: 10})",
          "433:   call VerifyScreenDump(buf, 'Test_match_tab_linebreak', {})",
          "435:   call StopVimInTerminal(buf)",
          "437: endfunc",
          "",
          "[Removed Lines]",
          "431:   call writefile(lines, 'XscriptMatchTabLinebreak')",
          "436:   call delete('XscriptMatchTabLinebreak')",
          "",
          "[Added Lines]",
          "429:   call writefile(lines, 'XscriptMatchTabLinebreak', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_matchadd_conceal.vim||src/testdir/test_matchadd_conceal.vim": [
          "File: src/testdir/test_matchadd_conceal.vim -> src/testdir/test_matchadd_conceal.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "374:     normal gg",
          "375:     \"==expr==",
          "376:   END",
          "378:   let buf = RunVimInTerminal('Xcolesearch', {})",
          "379:   call TermWait(buf, 50)",
          "",
          "[Removed Lines]",
          "377:   call writefile(lines, 'Xcolesearch')",
          "",
          "[Added Lines]",
          "377:   call writefile(lines, 'Xcolesearch', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:   call assert_equal(2, term_getcursor(buf)[1])",
          "396:   call StopVimInTerminal(buf)",
          "398: endfunc",
          "400: func Test_cursor_column_in_concealed_line_after_leftcol_change()",
          "",
          "[Removed Lines]",
          "397:   call delete('Xcolesearch')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "406:     call matchadd('Conceal', '-')",
          "407:     set nowrap ss=0 cole=3 cocu=n",
          "408:   END",
          "410:   let buf = RunVimInTerminal('-S Xcurs-columns', {})",
          "412:   \" Go to the end of the line (3 columns beyond the end of the screen).",
          "",
          "[Removed Lines]",
          "409:   call writefile(lines, 'Xcurs-columns')",
          "",
          "[Added Lines]",
          "408:   call writefile(lines, 'Xcurs-columns', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "422:   call assert_equal(1, term_getcursor(buf)[1])",
          "424:   call StopVimInTerminal(buf)",
          "426: endfunc",
          "428: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "425:   call delete('Xcurs-columns')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_memory_usage.vim||src/testdir/test_memory_usage.vim": [
          "File: src/testdir/test_memory_usage.vim -> src/testdir/test_memory_usage.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:           call s:f(0)",
          "93:         endfor",
          "94:   END",
          "97:   let vim = s:vim_new()",
          "98:   call vim.start('--clean', '-c', 'set noswapfile', testfile)",
          "",
          "[Removed Lines]",
          "95:   call writefile(lines, testfile)",
          "",
          "[Added Lines]",
          "95:   call writefile(lines, testfile, 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:   call assert_inrange(lower, upper, after.max)",
          "116:   call vim.stop()",
          "118: endfunc",
          "120: func Test_memory_func_capture_lvars()",
          "",
          "[Removed Lines]",
          "117:   call delete(testfile)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:           call s:f()",
          "131:         endfor",
          "132:   END",
          "135:   let vim = s:vim_new()",
          "136:   call vim.start('--clean', '-c', 'set noswapfile', testfile)",
          "",
          "[Removed Lines]",
          "133:   call writefile(lines, testfile)",
          "",
          "[Added Lines]",
          "132:   call writefile(lines, testfile, 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "161:   call assert_inrange(lower, upper, last)",
          "163:   call vim.stop()",
          "165: endfunc",
          "167: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "164:   call delete(testfile)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_messages.vim||src/testdir/test_messages.vim": [
          "File: src/testdir/test_messages.vim -> src/testdir/test_messages.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:         set statusline=%!StatusLine()",
          "104:         set laststatus=2",
          "105:   END",
          "108:   let rows = 10",
          "109:   let buf = term_start([GetVimProg(), '--clean', '-S', testfile], {'term_rows': rows})",
          "",
          "[Removed Lines]",
          "106:   call writefile(lines, testfile)",
          "",
          "[Added Lines]",
          "106:   call writefile(lines, testfile, 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:   call term_sendkeys(buf, \":qall!\\<CR>\")",
          "119:   call WaitForAssert({-> assert_equal('dead', job_status(term_getjob(buf)))})",
          "120:   exe buf . 'bwipe!'",
          "122: endfunc",
          "124: func Test_mode_message_at_leaving_insert_with_esc_mapped()",
          "",
          "[Removed Lines]",
          "121:   call delete(testfile)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:         set laststatus=2",
          "132:         inoremap <Esc> <Esc>00",
          "133:   END",
          "136:   let rows = 10",
          "137:   let buf = term_start([GetVimProg(), '--clean', '-S', testfile], {'term_rows': rows})",
          "",
          "[Removed Lines]",
          "134:   call writefile(lines, testfile)",
          "",
          "[Added Lines]",
          "134:   call writefile(lines, testfile, 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:   call term_sendkeys(buf, \":qall!\\<CR>\")",
          "147:   call WaitForAssert({-> assert_equal('dead', job_status(term_getjob(buf)))})",
          "148:   exe buf . 'bwipe!'",
          "150: endfunc",
          "152: func Test_echospace()",
          "",
          "[Removed Lines]",
          "149:   call delete(testfile)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "462:     autocmd CursorHold * buf b.txt | w | echo \"'b' written\"",
          "463:   END",
          "466:   let buf = RunVimInTerminal('-S Xtest_fileinfo_after_echo', #{rows: 6})",
          "467:   call term_sendkeys(buf, \":set updatetime=50\\<CR>\")",
          "468:   call term_sendkeys(buf, \"0$\")",
          "",
          "[Removed Lines]",
          "465:   call writefile(content, 'Xtest_fileinfo_after_echo')",
          "",
          "[Added Lines]",
          "465:   call writefile(content, 'Xtest_fileinfo_after_echo', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "473:   \" clean up",
          "474:   call StopVimInTerminal(buf)",
          "476:   call delete('b.txt')",
          "477: endfunc",
          "",
          "[Removed Lines]",
          "475:   call delete('Xtest_fileinfo_after_echo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "513:         echo 'three'",
          "514:       enddef",
          "515:   END",
          "517:   let buf = RunVimInTerminal('-S XtestEchowindow', #{rows: 8})",
          "518:   call VerifyScreenDump(buf, 'Test_echowindow_1', {})",
          "",
          "[Removed Lines]",
          "516:   call writefile(lines, 'XtestEchowindow')",
          "",
          "[Added Lines]",
          "515:   call writefile(lines, 'XtestEchowindow', 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "543:   \" clean up",
          "544:   call StopVimInTerminal(buf)",
          "546: endfunc",
          "548: \" messages window should not be used while evaluating the :echowin argument",
          "",
          "[Removed Lines]",
          "545:   call delete('XtestEchowindow')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "556:       endfunc",
          "557:       echowindow ShowMessage()",
          "558:   END",
          "560:   let buf = RunVimInTerminal('-S XtestEchowindow', #{rows: 8})",
          "561:   call VerifyScreenDump(buf, 'Test_echowin_eval', {})",
          "563:   \" clean up",
          "564:   call StopVimInTerminal(buf)",
          "566: endfunc",
          "568: \" messages window should not be used for showing the mode",
          "",
          "[Removed Lines]",
          "559:   call writefile(lines, 'XtestEchowindow')",
          "565:   call delete('XtestEchowindow')",
          "",
          "[Added Lines]",
          "557:   call writefile(lines, 'XtestEchowindow', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_mksession.vim||src/testdir/test_mksession.vim": [
          "File: src/testdir/test_mksession.vim -> src/testdir/test_mksession.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1098:   bwipe!",
          "1100:   \" Recreate the swap file to pretend the file is being edited",
          "1102:   set shortmess+=A",
          "1103:   source Xtestsession",
          "1105:   set shortmess&",
          "1106:   set sessionoptions&",
          "1107:   call delete('Xtestsession')",
          "1109: endfunc",
          "1111: \" Test for mksession with 'compatible' option",
          "",
          "[Removed Lines]",
          "1101:   call writefile(cont, fname)",
          "1108:   call delete(fname)",
          "",
          "[Added Lines]",
          "1101:   call writefile(cont, fname, 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1236: \" Test for creating views with manual folds",
          "1237: func Test_mkview_manual_fold()",
          "1239:   new Xmkvfile",
          "1240:   \" create recursive folds",
          "1241:   5,6fold",
          "",
          "[Removed Lines]",
          "1238:   call writefile(range(1,10), 'Xmkvfile')",
          "",
          "[Added Lines]",
          "1237:   call writefile(range(1,10), 'Xmkvfile', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1259:   source Xview",
          "1260:   call assert_equal([-1, -1, -1, -1, -1, -1], [foldclosed(3), foldclosed(4),",
          "1261:         \\ foldclosed(5), foldclosed(6), foldclosed(7), foldclosed(8)])",
          "1263:   call delete('Xview')",
          "1264:   bw!",
          "1265: endfunc",
          "",
          "[Removed Lines]",
          "1262:   call delete('Xmkvfile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_modeline.vim||src/testdir/test_modeline.vim": [
          "File: src/testdir/test_modeline.vim -> src/testdir/test_modeline.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: func Test_modeline_invalid()",
          "6:   \" This was reading allocated memory in the past.",
          "8:   let modeline = &modeline",
          "9:   set modeline",
          "10:   call assert_fails('split Xmodeline', 'E518:')",
          "",
          "[Removed Lines]",
          "7:   call writefile(['vi:0', 'nothing'], 'Xmodeline')",
          "",
          "[Added Lines]",
          "7:   call writefile(['vi:0', 'nothing'], 'Xmodeline', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   let &modeline = modeline",
          "31:   bwipe!",
          "33: endfunc",
          "35: func Test_modeline_filetype()",
          "37:   let modeline = &modeline",
          "38:   set modeline",
          "39:   filetype plugin on",
          "",
          "[Removed Lines]",
          "32:   call delete('Xmodeline')",
          "36:   call writefile(['vim: set ft=c :', 'nothing'], 'Xmodeline_filetype')",
          "",
          "[Added Lines]",
          "35:   call writefile(['vim: set ft=c :', 'nothing'], 'Xmodeline_filetype', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:   call assert_equal(\"ccomplete#Complete\", &ofu)",
          "45:   bwipe!",
          "47:   let &modeline = modeline",
          "48:   filetype plugin off",
          "49: endfunc",
          "51: func Test_modeline_syntax()",
          "53:   let modeline = &modeline",
          "54:   set modeline",
          "55:   syntax enable",
          "",
          "[Removed Lines]",
          "46:   call delete('Xmodeline_filetype')",
          "52:   call writefile(['vim: set syn=c :', 'nothing'], 'Xmodeline_syntax')",
          "",
          "[Added Lines]",
          "50:   call writefile(['vim: set syn=c :', 'nothing'], 'Xmodeline_syntax', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "58:   call assert_equal(\"c\", b:current_syntax)",
          "60:   bwipe!",
          "62:   let &modeline = modeline",
          "63:   syntax off",
          "64: endfunc",
          "66: func Test_modeline_keymap()",
          "67:   CheckFeature keymap",
          "69:   let modeline = &modeline",
          "70:   set modeline",
          "71:   split Xmodeline_keymap",
          "",
          "[Removed Lines]",
          "61:   call delete('Xmodeline_syntax')",
          "68:   call writefile(['vim: set keymap=greek :', 'nothing'], 'Xmodeline_keymap')",
          "",
          "[Added Lines]",
          "65:   call writefile(['vim: set keymap=greek :', 'nothing'], 'Xmodeline_keymap', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "73:   call assert_match('greek\\|grk', b:keymap_name)",
          "75:   bwipe!",
          "77:   let &modeline = modeline",
          "78:   set keymap= iminsert=0 imsearch=-1",
          "79: endfunc",
          "",
          "[Removed Lines]",
          "76:   call delete('Xmodeline_keymap')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "83:   set modeline",
          "85:   \" Test with vim:{vers}: (version {vers} or later).",
          "87:   edit Xmodeline_version",
          "88:   call assert_equal(2, &ts)",
          "89:   bwipe!",
          "",
          "[Removed Lines]",
          "86:   call writefile(['// vim' .. v:version .. ': ts=2:'], 'Xmodeline_version')",
          "",
          "[Added Lines]",
          "82:   call writefile(['// vim' .. v:version .. ': ts=2:'], 'Xmodeline_version', 'D')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "147:   bwipe!",
          "149:   let &modeline = modeline",
          "151: endfunc",
          "153: func Test_modeline_colon()",
          "154:   let modeline = &modeline",
          "155:   set modeline",
          "158:   edit Xmodeline_colon",
          "160:   \" backlash colon should become colon.",
          "",
          "[Removed Lines]",
          "150:   call delete('Xmodeline_version')",
          "157:   call writefile(['// vim: set showbreak=\\: ts=2: sw=2'], 'Xmodeline_colon')",
          "",
          "[Added Lines]",
          "152:   call writefile(['// vim: set showbreak=\\: ts=2: sw=2'], 'Xmodeline_colon', 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "166:   call assert_equal(8, &sw)",
          "168:   let &modeline = modeline",
          "170: endfunc",
          "172: func s:modeline_fails(what, text, error)",
          "173:   call CheckOption(a:what)",
          "174:   let fname = \"Xmodeline_fails_\" . a:what",
          "176:   let modeline = &modeline",
          "177:   set modeline",
          "178:   filetype plugin on",
          "",
          "[Removed Lines]",
          "169:   call delete('Xmodeline_colon')",
          "175:   call writefile(['vim: set ' . a:text . ' :', 'nothing'], fname)",
          "",
          "[Added Lines]",
          "169:   call writefile(['vim: set ' . a:text . ' :', 'nothing'], fname, 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "182:   call assert_equal(\"\", &syntax)",
          "184:   bwipe!",
          "186:   let &modeline = modeline",
          "187:   filetype plugin off",
          "188:   syntax off",
          "",
          "[Removed Lines]",
          "185:   call delete(fname)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "292:   7 seven",
          "293:   8 eight",
          "294:   END",
          "296:   edit Xmodeline",
          "297:   let info = split(execute('verbose set tabstop?'), \"\\n\")",
          "298:   call assert_match('^\\s*Last set from modeline line 1$', info[-1])",
          "",
          "[Removed Lines]",
          "295:   call writefile(lines, 'Xmodeline')",
          "",
          "[Added Lines]",
          "288:   call writefile(lines, 'Xmodeline', 'D')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "331:   bwipe!",
          "333:   let &modeline = modeline",
          "335: endfunc",
          "337: \" Test for the 'modeline' default value in compatible and non-compatible modes",
          "",
          "[Removed Lines]",
          "334:   call delete('Xmodeline')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "351: \" Some options cannot be set from the modeline when 'diff' option is set",
          "352: func Test_modeline_diff_buffer()",
          "354:   set foldmethod& nowrap",
          "355:   new Xmdifile",
          "356:   call assert_equal('manual', &foldmethod)",
          "357:   call assert_false(&wrap)",
          "358:   set wrap&",
          "360:   bw",
          "361: endfunc",
          "363: func Test_modeline_disable()",
          "364:   set modeline",
          "366:   edit Xmodeline_disable",
          "367:   call assert_equal(2, &sw)",
          "369: endfunc",
          "371: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "353:   call writefile(['vim: diff foldmethod=marker wrap'], 'Xmdifile')",
          "359:   call delete('Xmdifile')",
          "365:   call writefile(['vim: sw=2', 'vim: nomodeline', 'vim: sw=3'], 'Xmodeline_disable')",
          "368:   call delete('Xmodeline_disable')",
          "",
          "[Added Lines]",
          "345:   call writefile(['vim: diff foldmethod=marker wrap'], 'Xmdifile', 'D')",
          "356:   call writefile(['vim: sw=2', 'vim: nomodeline', 'vim: sw=3'], 'Xmodeline_disable', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_netbeans.vim||src/testdir/test_netbeans.vim": [
          "File: src/testdir/test_netbeans.vim -> src/testdir/test_netbeans.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: endfunc",
          "43: func Nb_basic(port)",
          "47:   \" Last line number in the Xnetbeans file. Used to verify the result of the",
          "48:   \" communication with the netbeans server",
          "",
          "[Removed Lines]",
          "44:   call delete(\"Xnetbeans\")",
          "45:   call writefile([], \"Xnetbeans\")",
          "",
          "[Added Lines]",
          "44:   call writefile([], \"Xnetbeans\", 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   sleep 1m",
          "81:   \" getCursor test",
          "83:   split Xfile1",
          "84:   call cursor(3, 4)",
          "85:   sleep 10m",
          "",
          "[Removed Lines]",
          "82:   call writefile(['foo bar', 'foo bar', 'foo bar'], 'Xfile1')",
          "",
          "[Added Lines]",
          "81:   call writefile(['foo bar', 'foo bar', 'foo bar'], 'Xfile1', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:   let g:last += 4",
          "274:   \" editFile test",
          "276:   call appendbufline(cmdbufnr, '$', 'editFile_Test')",
          "277:   call WaitFor('len(ReadXnetbeans()) >= (g:last + 4)')",
          "278:   let l = ReadXnetbeans()",
          "",
          "[Removed Lines]",
          "275:   call writefile(['foo bar1', 'foo bar2', 'foo bar3'], 'Xfile3')",
          "",
          "[Added Lines]",
          "274:   call writefile(['foo bar1', 'foo bar2', 'foo bar3'], 'Xfile3', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "838:   call sign_unplace('*')",
          "839:   call sign_undefine()",
          "844:   call delete('Xfile4')",
          "845: endfunc",
          "",
          "[Removed Lines]",
          "841:   call delete(\"Xnetbeans\")",
          "842:   call delete('Xfile1')",
          "843:   call delete('Xfile3')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "852: func Nb_file_auth(port)",
          "853:   call delete(\"Xnetbeans\")",
          "856:   call assert_fails('nbstart =notexist', 'E660:')",
          "858:   if has('unix')",
          "859:     call setfperm('Xnbauth', \"rw-r--r--\")",
          "860:     call assert_fails('nbstart =Xnbauth', 'E668:')",
          "",
          "[Removed Lines]",
          "854:   call writefile([], \"Xnetbeans\")",
          "857:   call writefile(['host=localhost', 'port=' . a:port, 'auth=bunny'], 'Xnbauth')",
          "",
          "[Added Lines]",
          "850:   call writefile([], \"Xnetbeans\", 'D')",
          "853:   call writefile(['host=localhost', 'port=' . a:port, 'auth=bunny'], 'Xnbauth', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "871:   call assert_equal('0:startupDone=0', lines[2])",
          "873:   call delete(\"Xnbauth\")",
          "875: endfunc",
          "877: func Test_nb_file_auth()",
          "",
          "[Removed Lines]",
          "874:   call delete(\"Xnetbeans\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "882: \" Test for quitting Vim with an open netbeans connection",
          "883: func Nb_quit_with_conn(port)",
          "884:   call delete(\"Xnetbeans\")",
          "886:   let after =<< trim END",
          "887:     source shared.vim",
          "888:     set cpo&vim",
          "",
          "[Removed Lines]",
          "885:   call writefile([], \"Xnetbeans\")",
          "",
          "[Added Lines]",
          "880:   call writefile([], \"Xnetbeans\", 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "922:     call assert_equal('1:killed=16', l[-2])",
          "923:     call assert_equal('0:disconnect=16', l[-1])",
          "924:   endif",
          "926: endfunc",
          "928: func Test_nb_quit_with_conn()",
          "",
          "[Removed Lines]",
          "925:   call delete('Xnetbeans')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_normal.vim||src/testdir/test_normal.vim": [
          "File: src/testdir/test_normal.vim -> src/testdir/test_normal.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:   CheckNotMSWindows",
          "301:   \" uses sed to number non-empty lines",
          "303:   call system('chmod +x ./Xsed_format.sh')",
          "304:   let text = ['a', '', 'c', '', ' ', 'd', 'e']",
          "305:   let expected = ['1    a', '', '3    c', '', '5     ', '6    d', '7    e']",
          "",
          "[Removed Lines]",
          "302:   call writefile(['#!/bin/sh', 'sed ''/./=''|sed ''/./{', 'N', 's/\\n/    /', '}'''], 'Xsed_format.sh')",
          "",
          "[Added Lines]",
          "302:   call writefile(['#!/bin/sh', 'sed ''/./=''|sed ''/./{', 'N', 's/\\n/    /', '}'''], 'Xsed_format.sh', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330:   \" clean up",
          "331:   set formatprg=",
          "332:   setlocal formatprg=",
          "334: endfunc",
          "336: func Test_normal07_internalfmt()",
          "",
          "[Removed Lines]",
          "333:   call delete('Xsed_format.sh')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "702:     call writefile([execute('messages')], 'Xtest.out')",
          "703:     qall",
          "704:   END",
          "706:   call RunVim([], [], \"-c \\\"set opfunc=s:abc\\\" -S Xverify.vim\")",
          "707:   call assert_match('E81: Using <SID> not in a', readfile('Xtest.out')[0])",
          "708:   call delete('Xtest.out')",
          "711:   \" cleanup",
          "712:   set opfunc&",
          "",
          "[Removed Lines]",
          "705:   call writefile(cleanup, 'Xverify.vim')",
          "709:   call delete('Xverify.vim')",
          "",
          "[Added Lines]",
          "704:   call writefile(cleanup, 'Xverify.vim', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1292:       call writefile(['done'], 'Xdone')",
          "1293:       qa!",
          "1294:   END",
          "1296:   call assert_equal(1, RunVim([], [], '--clean -X -Z -e -s -S Xscript'))",
          "1297:   call assert_equal(['done'], readfile('Xdone'))",
          "1300:   call delete('Xdone')",
          "1301: endfunc",
          "",
          "[Removed Lines]",
          "1295:   call writefile(lines, 'Xscript')",
          "1299:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "1293:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1709: func Test_normal20_exmode()",
          "1710:   \" Reading from redirected file doesn't work on MS-Windows",
          "1711:   CheckNotMSWindows",
          "1714:   call system(GetVimCommand() .. ' -e -s < Xn20script Xn20file')",
          "1716:   call assert_equal(['1', 'foo', 'bar', '2'], a)",
          "1718:   \" clean up",
          "1722:   bw!",
          "1723: endfunc",
          "",
          "[Removed Lines]",
          "1712:   call writefile(['1a', 'foo', 'bar', '.', 'w! Xn20file2', 'q!'], 'Xn20script')",
          "1713:   call writefile(['1', '2'], 'Xn20file')",
          "1715:   let a=readfile('Xn20file2')",
          "1719:   for file in ['Xn20file', 'Xn20file2', 'Xn20script']",
          "1720:     call delete(file)",
          "1721:   endfor",
          "",
          "[Added Lines]",
          "1709:   call writefile(['1a', 'foo', 'bar', '.', 'w! Xn20file2', 'q!'], 'Xn20script', 'D')",
          "1710:   call writefile(['1', '2'], 'Xn20file', 'D')",
          "1712:   let a = readfile('Xn20file2')",
          "1716:   call delete('Xn20file2')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1758:   \" Test for ZZ",
          "1759:   \" let shell = &shell",
          "1760:   \" let &shell = 'sh'",
          "1762:   let args = ' -N -i NONE --noplugins -X --not-a-term'",
          "1763:   call system(GetVimCommand() .. args .. ' -c \"%d\" -c \":norm! ZZ\" Xn22file')",
          "1764:   let a = readfile('Xn22file')",
          "",
          "[Removed Lines]",
          "1761:   call writefile(['1', '2'], 'Xn22file')",
          "",
          "[Added Lines]",
          "1756:   call writefile(['1', '2'], 'Xn22file', 'D')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1773:   call assert_beeps('normal! ZW')",
          "1775:   \" clean up",
          "1779:   \" let &shell = shell",
          "1780: endfunc",
          "",
          "[Removed Lines]",
          "1776:   for file in ['Xn22file']",
          "1777:     call delete(file)",
          "1778:   endfor",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3141:   CheckFeature autocmd",
          "3142:   \" Don't sleep after the warning message.",
          "3143:   call test_settime(1)",
          "3145:   new Xreadonly.log",
          "3146:   setl ro",
          "3147:   au FileChangedRO <buffer> :call feedkeys(\"\\<c-^>\", 'tix')",
          "",
          "[Removed Lines]",
          "3144:   call writefile(['foo'], 'Xreadonly.log')",
          "",
          "[Added Lines]",
          "3136:   call writefile(['foo'], 'Xreadonly.log', 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3152:   \" cleanup",
          "3153:   call test_settime(0)",
          "3154:   bw!",
          "3156: endfunc",
          "3158: func Test_normal52_rl()",
          "",
          "[Removed Lines]",
          "3155:   call delete(\"Xreadonly.log\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_number.vim||src/testdir/test_number.vim": [
          "File: src/testdir/test_number.vim -> src/testdir/test_number.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:     set number relativenumber",
          "277:     hi LineNr ctermfg=red",
          "278:   [CODE]",
          "281:   \" Check that the balloon shows up after a mouse move",
          "282:   let buf = RunVimInTerminal('-S XTest_relnr', {'rows': 10, 'cols': 50})",
          "",
          "[Removed Lines]",
          "279:   call writefile(lines, 'XTest_relnr')",
          "",
          "[Added Lines]",
          "279:   call writefile(lines, 'XTest_relnr', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:   \" clean up",
          "297:   call StopVimInTerminal(buf)",
          "299: endfunc",
          "301: func Test_relativenumber_callback()",
          "",
          "[Removed Lines]",
          "298:   call delete('XTest_relnr')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "314:       call timer_start(300, 'Func')",
          "315:   END",
          "318:   let buf = RunVimInTerminal('-S Xrnu_timer', #{rows: 8})",
          "319:   call TermWait(buf, 310)",
          "320:   call VerifyScreenDump(buf, 'Test_relativenumber_callback_1', {})",
          "322:   call StopVimInTerminal(buf)",
          "324: endfunc",
          "326: \" Test for displaying line numbers with 'rightleft'",
          "",
          "[Removed Lines]",
          "316:   call writefile(lines, 'Xrnu_timer')",
          "323:   call delete('Xrnu_timer')",
          "",
          "[Added Lines]",
          "315:   call writefile(lines, 'Xrnu_timer', 'D')",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     625,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     626,",
          "",
          "---------------"
        ]
      }
    }
  ]
}