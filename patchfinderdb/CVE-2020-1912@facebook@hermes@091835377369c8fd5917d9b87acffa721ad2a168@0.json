{
  "cve_id": "CVE-2020-1912",
  "cve_desc": "An out-of-bounds read/write vulnerability when executing lazily compiled inner generator functions in Facebook Hermes prior to commit 091835377369c8fd5917d9b87acffa721ad2a168 allows attackers to potentially execute arbitrary code via crafted JavaScript. Note that this is only exploitable if the application using Hermes permits evaluation of untrusted JavaScript. Hence, most React Native applications are not affected.",
  "repo": "facebook/hermes",
  "patch_hash": "091835377369c8fd5917d9b87acffa721ad2a168",
  "patch_info": {
    "commit_hash": "091835377369c8fd5917d9b87acffa721ad2a168",
    "repo": "facebook/hermes",
    "commit_url": "https://github.com/facebook/hermes/commit/091835377369c8fd5917d9b87acffa721ad2a168",
    "files": [
      "include/hermes/IR/IR.h",
      "include/hermes/IRGen/IRGen.h",
      "lib/BCGen/HBC/BytecodeGenerator.cpp",
      "lib/IRGen/ESTreeIRGen-func.cpp",
      "lib/IRGen/ESTreeIRGen.cpp",
      "test/BCGen/HBC/es6/generator.js",
      "test/IRGen/es6/generator.js",
      "test/IRGen/lazy-function-in-generator.js"
    ],
    "message": "Correctly restore whether or not a function is an inner generator\n\nSummary:\nIf a generator was large enough to be lazily compiled, we would lose\nthat information when reconstituting the function's context. This meant\nthe function was generated as a regular function instead of a generator.\n\n#utd-hermes-ignore-android\n\nReviewed By: tmikov\n\nDifferential Revision: D23580247\n\nfbshipit-source-id: af5628bf322cbdc7c7cdfbb5f8d0756328518ea1",
    "before_after_code_files": [
      "include/hermes/IR/IR.h||include/hermes/IR/IR.h",
      "include/hermes/IRGen/IRGen.h||include/hermes/IRGen/IRGen.h",
      "lib/BCGen/HBC/BytecodeGenerator.cpp||lib/BCGen/HBC/BytecodeGenerator.cpp",
      "lib/IRGen/ESTreeIRGen-func.cpp||lib/IRGen/ESTreeIRGen-func.cpp",
      "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp",
      "test/BCGen/HBC/es6/generator.js||test/BCGen/HBC/es6/generator.js",
      "test/IRGen/es6/generator.js||test/IRGen/es6/generator.js",
      "test/IRGen/lazy-function-in-generator.js||test/IRGen/lazy-function-in-generator.js"
    ]
  },
  "patch_diff": {
    "include/hermes/IR/IR.h||include/hermes/IR/IR.h": [
      "File: include/hermes/IR/IR.h -> include/hermes/IR/IR.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "336: #ifndef HERMESVM_LEAN",
      "338: struct LazySource {",
      "340:   ESTree::NodeKind nodeKind{ESTree::NodeKind::Empty};",
      "342:   uint32_t bufferId{0};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "342:   bool isGeneratorInnerFunction;",
      "",
      "---------------"
    ],
    "include/hermes/IRGen/IRGen.h||include/hermes/IRGen/IRGen.h": [
      "File: include/hermes/IRGen/IRGen.h -> include/hermes/IRGen/IRGen.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "43:   ESTree::NodeKind nodeKind;",
      "46:   bool strictMode;",
      "47: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:   bool isGeneratorInnerFunction;",
      "",
      "---------------"
    ],
    "lib/BCGen/HBC/BytecodeGenerator.cpp||lib/BCGen/HBC/BytecodeGenerator.cpp": [
      "File: lib/BCGen/HBC/BytecodeGenerator.cpp -> lib/BCGen/HBC/BytecodeGenerator.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "278:       auto lazyData = llvh::make_unique<LazyCompilationData>();",
      "279:       lazyData->parentScope = F->getLazyScope();",
      "280:       lazyData->nodeKind = F->getLazySource().nodeKind;",
      "281:       lazyData->bufferId = F->getLazySource().bufferId;",
      "282:       lazyData->originalName = F->getOriginalOrInferredName();",
      "283:       lazyData->closureAlias = F->getLazyClosureAlias()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "281:       lazyData->isGeneratorInnerFunction =",
      "282:           F->getLazySource().isGeneratorInnerFunction;",
      "",
      "---------------"
    ],
    "lib/IRGen/ESTreeIRGen-func.cpp||lib/IRGen/ESTreeIRGen-func.cpp": [
      "File: lib/IRGen/ESTreeIRGen-func.cpp -> lib/IRGen/ESTreeIRGen-func.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "215:       auto &lazySource = newFunction->getLazySource();",
      "216:       lazySource.bufferId = bodyBlock->bufferId;",
      "217:       lazySource.nodeKind = getLazyFunctionKind(functionNode);",
      "218:       lazySource.functionRange = functionNode->getSourceRange();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "218:       lazySource.isGeneratorInnerFunction = isGeneratorInnerFunction;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "302:       ESTree::isStrict(functionNode->strictness),",
      "311:   {",
      "312:     FunctionContext outerFnContext{this, outerFn, functionNode->getSemInfo()};",
      "313:     emitFunctionPrologue(",
      "314:         functionNode,",
      "315:         Builder.createBasicBlock(outerFn),",
      "",
      "[Removed Lines]",
      "305:   auto *innerFn = genES5Function(",
      "306:       genAnonymousLabelName(originalName.isValid() ? originalName.str() : \"\"),",
      "307:       lazyClosureAlias,",
      "308:       functionNode,",
      "309:       true);",
      "",
      "[Added Lines]",
      "311:     auto *innerFn = genES5Function(",
      "312:         genAnonymousLabelName(originalName.isValid() ? originalName.str() : \"\"),",
      "313:         lazyClosureAlias,",
      "314:         functionNode,",
      "315:         true);",
      "",
      "---------------"
    ],
    "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp": [
      "File: lib/IRGen/ESTreeIRGen.cpp -> lib/IRGen/ESTreeIRGen.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "349:       !llvh::isa<ESTree::ArrowFunctionExpressionNode>(node) &&",
      "350:       \"lazy compilation not supported for arrow functions\");",
      "353:   addLexicalDebugInfo(func, topLevel, lexicalScopeChain);",
      "354:   return {func, topLevel};",
      "355: }",
      "",
      "[Removed Lines]",
      "352:   auto *func = genES5Function(lazyData->originalName, parentVar, node);",
      "",
      "[Added Lines]",
      "352:   auto *func = genES5Function(",
      "353:       lazyData->originalName,",
      "354:       parentVar,",
      "355:       node,",
      "356:       lazyData->isGeneratorInnerFunction);",
      "",
      "---------------"
    ],
    "test/BCGen/HBC/es6/generator.js||test/BCGen/HBC/es6/generator.js": [
      "File: test/BCGen/HBC/es6/generator.js -> test/BCGen/HBC/es6/generator.js"
    ],
    "test/IRGen/es6/generator.js||test/IRGen/es6/generator.js": [
      "File: test/IRGen/es6/generator.js -> test/IRGen/es6/generator.js"
    ],
    "test/IRGen/lazy-function-in-generator.js||test/IRGen/lazy-function-in-generator.js": [
      "File: test/IRGen/lazy-function-in-generator.js -> test/IRGen/lazy-function-in-generator.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: function f() {",
      "13:   var f_var = 10;",
      "14:   function* g() {",
      "15:     var g_var = 32;",
      "16:     function h() {",
      "21:       return f_var + g_var;",
      "22:     }",
      "23:     yield h();",
      "24:   }",
      "25:   return g().next().value;",
      "26: }",
      "28: print(f());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2134e38699da13e36b6be8adc570b7f48d1124d6",
      "candidate_info": {
        "commit_hash": "2134e38699da13e36b6be8adc570b7f48d1124d6",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/2134e38699da13e36b6be8adc570b7f48d1124d6",
        "files": [
          "include/hermes/IR/IR.h",
          "include/hermes/IR/IRBuilder.h",
          "include/hermes/IRGen/IRGen.h",
          "lib/BCGen/HBC/BytecodeGenerator.cpp",
          "lib/IR/IRBuilder.cpp",
          "lib/IRGen/ESTreeIRGen-func.cpp",
          "lib/IRGen/ESTreeIRGen.cpp",
          "lib/IRGen/ESTreeIRGen.h",
          "test/hermes/es6/generator.js"
        ],
        "message": "Generate lazy data for generator functions.\n\nSummary:\nGenerator functions need to be aware of laziness in the same way\nother functions do. If they are not, then the inner function fails\nto resolve the closure name when materializing the scope chain,\nbecause it was never in the name table (the outer function has no\nsource).\n\nModify the laziness structure to emit data at the `genGeneratorFunction`\nlevel instead of the inner function level,\nbecause this prevents a situation in which the outer function is eager\n(and never lazy) but contains a lexical child function which is lazy.\n\nThis requires changing the lazy data to store `isGenerator` instead\nof `isGeneratorInnerFunction` and branching earlier in that pipeline.\n\nReviewed By: willholen\n\nDifferential Revision: D24514819\n\nfbshipit-source-id: f8a0c52d9a42b8e4f67ef22d9694e935d01aa6e8",
        "before_after_code_files": [
          "include/hermes/IR/IR.h||include/hermes/IR/IR.h",
          "include/hermes/IR/IRBuilder.h||include/hermes/IR/IRBuilder.h",
          "include/hermes/IRGen/IRGen.h||include/hermes/IRGen/IRGen.h",
          "lib/BCGen/HBC/BytecodeGenerator.cpp||lib/BCGen/HBC/BytecodeGenerator.cpp",
          "lib/IR/IRBuilder.cpp||lib/IR/IRBuilder.cpp",
          "lib/IRGen/ESTreeIRGen-func.cpp||lib/IRGen/ESTreeIRGen-func.cpp",
          "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp",
          "lib/IRGen/ESTreeIRGen.h||lib/IRGen/ESTreeIRGen.h",
          "test/hermes/es6/generator.js||test/hermes/es6/generator.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/hermes/IR/IR.h||include/hermes/IR/IR.h",
            "include/hermes/IRGen/IRGen.h||include/hermes/IRGen/IRGen.h",
            "lib/BCGen/HBC/BytecodeGenerator.cpp||lib/BCGen/HBC/BytecodeGenerator.cpp",
            "lib/IRGen/ESTreeIRGen-func.cpp||lib/IRGen/ESTreeIRGen-func.cpp",
            "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp"
          ],
          "candidate": [
            "include/hermes/IR/IR.h||include/hermes/IR/IR.h",
            "include/hermes/IRGen/IRGen.h||include/hermes/IRGen/IRGen.h",
            "lib/BCGen/HBC/BytecodeGenerator.cpp||lib/BCGen/HBC/BytecodeGenerator.cpp",
            "lib/IRGen/ESTreeIRGen-func.cpp||lib/IRGen/ESTreeIRGen-func.cpp",
            "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/hermes/IR/IR.h||include/hermes/IR/IR.h": [
          "File: include/hermes/IR/IR.h -> include/hermes/IR/IR.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:   ESTree::NodeKind nodeKind{ESTree::NodeKind::Empty};",
          "344:   uint32_t bufferId{0};",
          "",
          "[Removed Lines]",
          "342:   bool isGeneratorInnerFunction;",
          "",
          "[Added Lines]",
          "342:   bool isGenerator;",
          "",
          "---------------"
        ],
        "include/hermes/IR/IRBuilder.h||include/hermes/IR/IRBuilder.h": [
          "File: include/hermes/IR/IRBuilder.h -> include/hermes/IR/IRBuilder.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:       Identifier OriginalName,",
          "86:       Function::DefinitionKind definitionKind,",
          "87:       bool strictMode,",
          "88:       Function *insertBefore = nullptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:       SMRange sourceRange = SMRange{},",
          "",
          "---------------"
        ],
        "include/hermes/IRGen/IRGen.h||include/hermes/IRGen/IRGen.h": [
          "File: include/hermes/IRGen/IRGen.h -> include/hermes/IRGen/IRGen.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   ESTree::NodeKind nodeKind;",
          "49:   bool strictMode;",
          "",
          "[Removed Lines]",
          "46:   bool isGeneratorInnerFunction;",
          "",
          "[Added Lines]",
          "46:   bool isGenerator;",
          "",
          "---------------"
        ],
        "lib/BCGen/HBC/BytecodeGenerator.cpp||lib/BCGen/HBC/BytecodeGenerator.cpp": [
          "File: lib/BCGen/HBC/BytecodeGenerator.cpp -> lib/BCGen/HBC/BytecodeGenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:       auto lazyData = llvh::make_unique<LazyCompilationData>();",
          "311:       lazyData->parentScope = F->getLazyScope();",
          "312:       lazyData->nodeKind = F->getLazySource().nodeKind;",
          "315:       lazyData->bufferId = F->getLazySource().bufferId;",
          "316:       lazyData->originalName = F->getOriginalOrInferredName();",
          "317:       lazyData->closureAlias = F->getLazyClosureAlias()",
          "",
          "[Removed Lines]",
          "313:       lazyData->isGeneratorInnerFunction =",
          "314:           F->getLazySource().isGeneratorInnerFunction;",
          "",
          "[Added Lines]",
          "313:       lazyData->isGenerator = F->getLazySource().isGenerator;",
          "",
          "---------------"
        ],
        "lib/IR/IRBuilder.cpp||lib/IR/IRBuilder.cpp": [
          "File: lib/IR/IRBuilder.cpp -> lib/IR/IRBuilder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     Identifier OriginalName,",
          "53:     Function::DefinitionKind definitionKind,",
          "54:     bool strictMode,",
          "55:     Function *insertBefore) {",
          "56:   if (!OriginalName.isValid()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     SMRange sourceRange,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:       definitionKind,",
          "65:       strictMode,",
          "68:       insertBefore);",
          "69: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:       sourceRange,",
          "",
          "---------------"
        ],
        "lib/IRGen/ESTreeIRGen-func.cpp||lib/IRGen/ESTreeIRGen-func.cpp": [
          "File: lib/IRGen/ESTreeIRGen-func.cpp -> lib/IRGen/ESTreeIRGen-func.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   if (auto *bodyBlock = llvh::dyn_cast<ESTree::BlockStatementNode>(body)) {",
          "212:     if (bodyBlock->isLazyFunctionBody) {",
          "224:       return newFunction;",
          "225:     }",
          "226:   }",
          "",
          "[Removed Lines]",
          "214:       newFunction->setLazyScope(saveCurrentScope());",
          "215:       auto &lazySource = newFunction->getLazySource();",
          "216:       lazySource.bufferId = bodyBlock->bufferId;",
          "217:       lazySource.nodeKind = getLazyFunctionKind(functionNode);",
          "218:       lazySource.isGeneratorInnerFunction = isGeneratorInnerFunction;",
          "219:       lazySource.functionRange = functionNode->getSourceRange();",
          "222:       newFunction->setExpectedParamCountIncludingThis(",
          "223:           countExpectedArgumentsIncludingThis(functionNode));",
          "",
          "[Added Lines]",
          "213:       assert(",
          "214:           !isGeneratorInnerFunction &&",
          "215:           \"generator inner function should be included with outer function\");",
          "216:       setupLazyScope(functionNode, newFunction, body, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:       originalName,",
          "307:       Function::DefinitionKind::ES5Function,",
          "308:       ESTree::isStrict(functionNode->strictness),",
          "311:   {",
          "312:     FunctionContext outerFnContext{this, outerFn, functionNode->getSemInfo()};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:       functionNode->getSourceRange(),",
          "304:   outerFn->setLazyClosureAlias(lazyClosureAlias);",
          "306:   auto *body = ESTree::getBlockStatement(functionNode);",
          "307:   if (auto *bodyBlock = llvh::dyn_cast<ESTree::BlockStatementNode>(body)) {",
          "308:     if (bodyBlock->isLazyFunctionBody) {",
          "309:       setupLazyScope(functionNode, outerFn, body, true);",
          "310:       return outerFn;",
          "311:     }",
          "312:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "316:     auto *innerFn = genES5Function(",
          "317:         genAnonymousLabelName(originalName.isValid() ? originalName.str() : \"\"),",
          "319:         functionNode,",
          "320:         true);",
          "",
          "[Removed Lines]",
          "318:         lazyClosureAlias,",
          "",
          "[Added Lines]",
          "321:         nullptr,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:   return outerFn;",
          "342: }",
          "344: void ESTreeIRGen::initCaptureStateInES5FunctionHelper() {",
          "346:   if (!curFunction()->getSemInfo()->containsArrowFunctions)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347: void ESTreeIRGen::setupLazyScope(",
          "348:     ESTree::FunctionLikeNode *functionNode,",
          "349:     Function *function,",
          "350:     ESTree::BlockStatementNode *bodyBlock,",
          "351:     bool isGenerator) {",
          "352:   assert(",
          "353:       bodyBlock->isLazyFunctionBody &&",
          "354:       \"setupLazyScope can only be used with lazy function bodies\");",
          "356:   function->setLazyScope(saveCurrentScope());",
          "357:   auto &lazySource = function->getLazySource();",
          "358:   lazySource.bufferId = bodyBlock->bufferId;",
          "359:   lazySource.nodeKind = getLazyFunctionKind(functionNode);",
          "360:   lazySource.isGenerator = isGenerator;",
          "361:   lazySource.functionRange = functionNode->getSourceRange();",
          "364:   function->setExpectedParamCountIncludingThis(",
          "365:       countExpectedArgumentsIncludingThis(functionNode));",
          "366: }",
          "",
          "---------------"
        ],
        "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp": [
          "File: lib/IRGen/ESTreeIRGen.cpp -> lib/IRGen/ESTreeIRGen.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:       !llvh::isa<ESTree::ArrowFunctionExpressionNode>(node) &&",
          "350:       \"lazy compilation not supported for arrow functions\");",
          "357:   addLexicalDebugInfo(func, topLevel, lexicalScopeChain);",
          "358:   return {func, topLevel};",
          "359: }",
          "",
          "[Removed Lines]",
          "352:   auto *func = genES5Function(",
          "353:       lazyData->originalName,",
          "354:       parentVar,",
          "355:       node,",
          "356:       lazyData->isGeneratorInnerFunction);",
          "",
          "[Added Lines]",
          "352:   Function *func = lazyData->isGenerator",
          "353:       ? genGeneratorFunction(lazyData->originalName, parentVar, node)",
          "354:       : genES5Function(",
          "355:             lazyData->originalName, parentVar, node, lazyData->isGenerator);",
          "",
          "---------------"
        ],
        "lib/IRGen/ESTreeIRGen.h||lib/IRGen/ESTreeIRGen.h": [
          "File: lib/IRGen/ESTreeIRGen.h -> lib/IRGen/ESTreeIRGen.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "716:       Variable *lazyClosureAlias,",
          "717:       ESTree::FunctionLikeNode *functionNode);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723:   void setupLazyScope(",
          "724:       ESTree::FunctionLikeNode *functionNode,",
          "725:       Function *function,",
          "726:       ESTree::BlockStatementNode *bodyBlock,",
          "727:       bool isGenerator);",
          "",
          "---------------"
        ],
        "test/hermes/es6/generator.js||test/hermes/es6/generator.js": [
          "File: test/hermes/es6/generator.js -> test/hermes/es6/generator.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "360: function* saveGeneratorLong() {",
          "361:     yield* [1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "359: var gen = function* genAlias() { yield 1 };",
          "360: show(gen().next())",
          "363: var gen = function* genAlias() {",
          "364:   print(genAlias() !== undefined)",
          "365: };",
          "366: show(gen().next())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6cfb7d177ff16e4ab4d7b03c6f8fe285d590b2f3",
      "candidate_info": {
        "commit_hash": "6cfb7d177ff16e4ab4d7b03c6f8fe285d590b2f3",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/6cfb7d177ff16e4ab4d7b03c6f8fe285d590b2f3",
        "files": [
          "include/hermes/AST/ESTree.h",
          "include/hermes/IR/IR.h",
          "include/hermes/IRGen/IRGen.h",
          "lib/AST/ESTree.cpp",
          "lib/BCGen/HBC/BytecodeGenerator.cpp",
          "lib/IRGen/ESTreeIRGen-func.cpp",
          "lib/IRGen/ESTreeIRGen.cpp",
          "lib/IRGen/ESTreeIRGen.h"
        ],
        "message": "Simplify generator detection in lazy IRGen.\n\nSummary:\nWe know after reparsing a lazy function whether it's a generator.\nUse that information when performing IRGen, and avoid sending\nthe `isGenerator` flag at all.\n\nThis cleans up generator handling in lazy mode and provides an example\nof how to do specialized function IRGen in the future in lazy mode,\ne.g. for async functions.\n\nReviewed By: Huxpro\n\nDifferential Revision: D25685446\n\nfbshipit-source-id: ded7dbe59a90fb3b6e7016adc534d4b24d688a2e",
        "before_after_code_files": [
          "include/hermes/AST/ESTree.h||include/hermes/AST/ESTree.h",
          "include/hermes/IR/IR.h||include/hermes/IR/IR.h",
          "include/hermes/IRGen/IRGen.h||include/hermes/IRGen/IRGen.h",
          "lib/AST/ESTree.cpp||lib/AST/ESTree.cpp",
          "lib/BCGen/HBC/BytecodeGenerator.cpp||lib/BCGen/HBC/BytecodeGenerator.cpp",
          "lib/IRGen/ESTreeIRGen-func.cpp||lib/IRGen/ESTreeIRGen-func.cpp",
          "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp",
          "lib/IRGen/ESTreeIRGen.h||lib/IRGen/ESTreeIRGen.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/hermes/IR/IR.h||include/hermes/IR/IR.h",
            "include/hermes/IRGen/IRGen.h||include/hermes/IRGen/IRGen.h",
            "lib/BCGen/HBC/BytecodeGenerator.cpp||lib/BCGen/HBC/BytecodeGenerator.cpp",
            "lib/IRGen/ESTreeIRGen-func.cpp||lib/IRGen/ESTreeIRGen-func.cpp",
            "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp"
          ],
          "candidate": [
            "include/hermes/IR/IR.h||include/hermes/IR/IR.h",
            "include/hermes/IRGen/IRGen.h||include/hermes/IRGen/IRGen.h",
            "lib/BCGen/HBC/BytecodeGenerator.cpp||lib/BCGen/HBC/BytecodeGenerator.cpp",
            "lib/IRGen/ESTreeIRGen-func.cpp||lib/IRGen/ESTreeIRGen-func.cpp",
            "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/hermes/AST/ESTree.h||include/hermes/AST/ESTree.h": [
          "File: include/hermes/AST/ESTree.h -> include/hermes/AST/ESTree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "903: bool hasSimpleParams(FunctionLikeNode *node);",
          "906: struct NodeKindInfo : llvh::DenseMapInfo<NodeKind> {",
          "907:   static inline NodeKind getEmptyKey() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "906: bool isGenerator(FunctionLikeNode *node);",
          "",
          "---------------"
        ],
        "include/hermes/IR/IR.h||include/hermes/IR/IR.h": [
          "File: include/hermes/IR/IR.h -> include/hermes/IR/IR.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:   SMRange functionRange;",
          "349:   bool paramYield{false};",
          "",
          "[Removed Lines]",
          "347:   bool isGenerator;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/hermes/IRGen/IRGen.h||include/hermes/IRGen/IRGen.h": [
          "File: include/hermes/IRGen/IRGen.h -> include/hermes/IRGen/IRGen.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   ESTree::NodeKind nodeKind;",
          "49:   bool strictMode;",
          "",
          "[Removed Lines]",
          "46:   bool isGenerator;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/AST/ESTree.cpp||lib/AST/ESTree.cpp": [
          "File: lib/AST/ESTree.cpp -> lib/AST/ESTree.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   return true;",
          "118: }",
          "120: } // namespace ESTree",
          "121: } // namespace hermes",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: bool isGenerator(FunctionLikeNode *node) {",
          "121:   switch (node->getKind()) {",
          "122:     default:",
          "123:       assert(",
          "124:           node->getKind() == NodeKind::Program && \"invalid FunctionLikeNode\");",
          "125:       return false;",
          "126:     case NodeKind::FunctionExpression:",
          "127:       return cast<FunctionExpressionNode>(node)->_generator;",
          "128:     case NodeKind::ArrowFunctionExpression:",
          "129:       return false;",
          "130:     case NodeKind::FunctionDeclaration:",
          "131:       return cast<FunctionDeclarationNode>(node)->_generator;",
          "132:   }",
          "133: }",
          "",
          "---------------"
        ],
        "lib/BCGen/HBC/BytecodeGenerator.cpp||lib/BCGen/HBC/BytecodeGenerator.cpp": [
          "File: lib/BCGen/HBC/BytecodeGenerator.cpp -> lib/BCGen/HBC/BytecodeGenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:       auto lazyData = llvh::make_unique<LazyCompilationData>();",
          "311:       lazyData->parentScope = F->getLazyScope();",
          "312:       lazyData->nodeKind = F->getLazySource().nodeKind;",
          "314:       lazyData->paramYield = F->getLazySource().paramYield;",
          "315:       lazyData->paramAwait = F->getLazySource().paramAwait;",
          "316:       lazyData->bufferId = F->getLazySource().bufferId;",
          "",
          "[Removed Lines]",
          "313:       lazyData->isGenerator = F->getLazySource().isGenerator;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/IRGen/ESTreeIRGen-func.cpp||lib/IRGen/ESTreeIRGen-func.cpp": [
          "File: lib/IRGen/ESTreeIRGen-func.cpp -> lib/IRGen/ESTreeIRGen-func.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:       assert(",
          "214:           !isGeneratorInnerFunction &&",
          "215:           \"generator inner function should be included with outer function\");",
          "217:       return newFunction;",
          "218:     }",
          "219:   }",
          "",
          "[Removed Lines]",
          "216:       setupLazyScope(functionNode, newFunction, body, false);",
          "",
          "[Added Lines]",
          "216:       setupLazyScope(functionNode, newFunction, body);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:   auto *body = ESTree::getBlockStatement(functionNode);",
          "307:   if (auto *bodyBlock = llvh::dyn_cast<ESTree::BlockStatementNode>(body)) {",
          "308:     if (bodyBlock->isLazyFunctionBody) {",
          "310:       return outerFn;",
          "311:     }",
          "312:   }",
          "",
          "[Removed Lines]",
          "309:       setupLazyScope(functionNode, outerFn, body, true);",
          "",
          "[Added Lines]",
          "309:       setupLazyScope(functionNode, outerFn, body);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "347: void ESTreeIRGen::setupLazyScope(",
          "348:     ESTree::FunctionLikeNode *functionNode,",
          "349:     Function *function,",
          "352:   assert(",
          "353:       bodyBlock->isLazyFunctionBody &&",
          "354:       \"setupLazyScope can only be used with lazy function bodies\");",
          "",
          "[Removed Lines]",
          "350:     ESTree::BlockStatementNode *bodyBlock,",
          "351:     bool isGenerator) {",
          "",
          "[Added Lines]",
          "350:     ESTree::BlockStatementNode *bodyBlock) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "357:   auto &lazySource = function->getLazySource();",
          "358:   lazySource.bufferId = bodyBlock->bufferId;",
          "359:   lazySource.nodeKind = getLazyFunctionKind(functionNode);",
          "361:   lazySource.functionRange = functionNode->getSourceRange();",
          "362:   lazySource.paramYield = bodyBlock->paramYield;",
          "363:   lazySource.paramAwait = bodyBlock->paramAwait;",
          "",
          "[Removed Lines]",
          "360:   lazySource.isGenerator = isGenerator;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp": [
          "File: lib/IRGen/ESTreeIRGen.cpp -> lib/IRGen/ESTreeIRGen.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:       !llvh::isa<ESTree::ArrowFunctionExpressionNode>(node) &&",
          "351:       \"lazy compilation not supported for arrow functions\");",
          "354:       ? genGeneratorFunction(lazyData->originalName, parentVar, node)",
          "357:   addLexicalDebugInfo(func, topLevel, lexicalScopeChain);",
          "358:   return {func, topLevel};",
          "359: }",
          "",
          "[Removed Lines]",
          "353:   Function *func = lazyData->isGenerator",
          "355:       : genES5Function(",
          "356:             lazyData->originalName, parentVar, node, lazyData->isGenerator);",
          "",
          "[Added Lines]",
          "356:   Function *func = ESTree::isGenerator(node)",
          "358:       : genES5Function(lazyData->originalName, parentVar, node, false);",
          "",
          "---------------"
        ],
        "lib/IRGen/ESTreeIRGen.h||lib/IRGen/ESTreeIRGen.h": [
          "File: lib/IRGen/ESTreeIRGen.h -> lib/IRGen/ESTreeIRGen.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "724:   void setupLazyScope(",
          "725:       ESTree::FunctionLikeNode *functionNode,",
          "726:       Function *function,",
          "",
          "[Removed Lines]",
          "727:       ESTree::BlockStatementNode *bodyBlock,",
          "728:       bool isGenerator);",
          "",
          "[Added Lines]",
          "727:       ESTree::BlockStatementNode *bodyBlock);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef513ad2ceb39d2286c9e7347709dc59399a2f52",
      "candidate_info": {
        "commit_hash": "ef513ad2ceb39d2286c9e7347709dc59399a2f52",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/ef513ad2ceb39d2286c9e7347709dc59399a2f52",
        "files": [
          "include/hermes/BCGen/HBC/HBC.h",
          "include/hermes/IR/IR.h",
          "include/hermes/IRGen/IRGen.h",
          "lib/BCGen/HBC/HBC.cpp",
          "lib/BCGen/HBC/Passes.cpp",
          "lib/IR/IR.cpp",
          "lib/IR/IRBuilder.cpp",
          "lib/IRGen/ESTreeIRGen.cpp",
          "lib/IRGen/ESTreeIRGen.h",
          "lib/IRGen/IRGen.cpp",
          "lib/VM/CodeBlock.cpp",
          "test/debugger/lazy-lexical-scope.js",
          "test/debugger/lazy-lexical-scope.js.debug"
        ],
        "message": "Generate dummy functions for debug info during lazy compilation\n\nSummary:\nWe currently have incomplete lexical scoping during lazy compilation because it's stored per-function in its BytecodeModule, and lazy compilation puts each function in its own module. This means that the debugger doesn't know which variables are available from which parent scopes.\n\nTo avoid having to assemble data across modules, this diff simply adds one dummy function per parent scope to the current module.\n\nReviewed By: tmikov\n\nDifferential Revision: D18692550\n\nfbshipit-source-id: 4ad5d6b1a84ea1fc7c894f529b1a94b98d353861",
        "before_after_code_files": [
          "include/hermes/BCGen/HBC/HBC.h||include/hermes/BCGen/HBC/HBC.h",
          "include/hermes/IR/IR.h||include/hermes/IR/IR.h",
          "include/hermes/IRGen/IRGen.h||include/hermes/IRGen/IRGen.h",
          "lib/BCGen/HBC/HBC.cpp||lib/BCGen/HBC/HBC.cpp",
          "lib/BCGen/HBC/Passes.cpp||lib/BCGen/HBC/Passes.cpp",
          "lib/IR/IR.cpp||lib/IR/IR.cpp",
          "lib/IR/IRBuilder.cpp||lib/IR/IRBuilder.cpp",
          "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp",
          "lib/IRGen/ESTreeIRGen.h||lib/IRGen/ESTreeIRGen.h",
          "lib/IRGen/IRGen.cpp||lib/IRGen/IRGen.cpp",
          "lib/VM/CodeBlock.cpp||lib/VM/CodeBlock.cpp",
          "test/debugger/lazy-lexical-scope.js||test/debugger/lazy-lexical-scope.js",
          "test/debugger/lazy-lexical-scope.js.debug||test/debugger/lazy-lexical-scope.js.debug"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/hermes/IR/IR.h||include/hermes/IR/IR.h",
            "include/hermes/IRGen/IRGen.h||include/hermes/IRGen/IRGen.h",
            "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp"
          ],
          "candidate": [
            "include/hermes/IR/IR.h||include/hermes/IR/IR.h",
            "include/hermes/IRGen/IRGen.h||include/hermes/IRGen/IRGen.h",
            "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/hermes/BCGen/HBC/HBC.h||include/hermes/BCGen/HBC/HBC.h": [
          "File: include/hermes/BCGen/HBC/HBC.h -> include/hermes/BCGen/HBC/HBC.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     SourceMapGenerator *sourceMap = nullptr,",
          "43:     std::unique_ptr<BCProviderBase> baseBCProvider = nullptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     SourceMapGenerator *sourceMap = nullptr,",
          "43:     std::unique_ptr<BCProviderBase> baseBCProvider = nullptr);",
          "45: std::unique_ptr<BytecodeModule> generateBytecodeModule(",
          "46:     Module *M,",
          "47:     Function *lexicalTopLevel,",
          "48:     Function *entryPoint,",
          "",
          "---------------"
        ],
        "include/hermes/IR/IR.h||include/hermes/IR/IR.h": [
          "File: include/hermes/IR/IR.h -> include/hermes/IR/IR.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1251: class ExternalScope : public VariableScope {",
          "1253:   const int32_t depth_ = 0;",
          "1255:  public:",
          "1256:   ExternalScope(Function *function, int32_t depth);",
          "1259:   int32_t getDepth() const {",
          "1261:     return depth_;",
          "1262:   }",
          "",
          "[Removed Lines]",
          "1260:     assert(depth_ < 0 && \"Invalid scope depth\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/hermes/IRGen/IRGen.h||include/hermes/IRGen/IRGen.h": [
          "File: include/hermes/IRGen/IRGen.h -> include/hermes/IRGen/IRGen.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: } // namespace hermes",
          "",
          "[Removed Lines]",
          "83: Function *generateLazyFunctionIR(hbc::LazyCompilationData *lazyData, Module *M);",
          "",
          "[Added Lines]",
          "83: std::pair<Function *, Function *> generateLazyFunctionIR(",
          "84:     hbc::LazyCompilationData *lazyData,",
          "85:     Module *M);",
          "",
          "---------------"
        ],
        "lib/BCGen/HBC/HBC.cpp||lib/BCGen/HBC/HBC.cpp": [
          "File: lib/BCGen/HBC/HBC.cpp -> lib/BCGen/HBC/HBC.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     OptValue<Context::SegmentRange> range,",
          "145:     SourceMapGenerator *sourceMapGen,",
          "146:     std::unique_ptr<BCProviderBase> baseBCProvider) {",
          "147:   PerfSection perf(\"Bytecode Generation\");",
          "148:   lowerIR(M, options);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:   return generateBytecodeModule(",
          "148:       M,",
          "149:       entryPoint,",
          "150:       entryPoint,",
          "151:       options,",
          "152:       range,",
          "153:       sourceMapGen,",
          "154:       std::move(baseBCProvider));",
          "155: }",
          "157: std::unique_ptr<BytecodeModule> hbc::generateBytecodeModule(",
          "158:     Module *M,",
          "159:     Function *lexicalTopLevel,",
          "160:     Function *entryPoint,",
          "161:     const BytecodeGenerationOptions &options,",
          "162:     OptValue<Context::SegmentRange> range,",
          "163:     SourceMapGenerator *sourceMapGen,",
          "164:     std::unique_ptr<BCProviderBase> baseBCProvider) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225:   assert(BMGen.getEntryPointIndex() != -1 && \"Entry point not added\");",
          "230:   for (auto &F : *M) {",
          "231:     if (!shouldGenerate(&F)) {",
          "",
          "[Removed Lines]",
          "228:   FunctionScopeAnalysis scopeAnalysis{entryPoint};",
          "",
          "[Added Lines]",
          "246:   FunctionScopeAnalysis scopeAnalysis{lexicalTopLevel};",
          "",
          "---------------"
        ],
        "lib/BCGen/HBC/Passes.cpp||lib/BCGen/HBC/Passes.cpp": [
          "File: lib/BCGen/HBC/Passes.cpp -> lib/BCGen/HBC/Passes.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:   auto *thisParam = F->getThisParameter();",
          "265:     Value *getThisInst = F->isStrictMode()",
          "",
          "[Removed Lines]",
          "262:   if (thisParam->hasUsers()) {",
          "",
          "[Added Lines]",
          "262:   if (thisParam && thisParam->hasUsers()) {",
          "",
          "---------------"
        ],
        "lib/IR/IR.cpp||lib/IR/IR.cpp": [
          "File: lib/IR/IR.cpp -> lib/IR/IR.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: ExternalScope::ExternalScope(Function *function, int32_t depth)",
          "156:     : VariableScope(ValueKind::ExternalScopeKind, function), depth_(depth) {",
          "158:   function->addExternalScope(this);",
          "159: }",
          "",
          "[Removed Lines]",
          "157:   assert(depth < 0 && \"Invalid external scope depth\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/IR/IRBuilder.cpp||lib/IR/IRBuilder.cpp": [
          "File: lib/IR/IRBuilder.cpp -> lib/IR/IRBuilder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: ExternalScope *IRBuilder::createExternalScope(",
          "92:     Function *function,",
          "93:     int32_t depth) {",
          "95:   return new ExternalScope(function, depth);",
          "96: }",
          "",
          "[Removed Lines]",
          "94:   assert(depth < 0 && \"Invalid external scope depth\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp": [
          "File: lib/IRGen/ESTreeIRGen.cpp -> lib/IRGen/ESTreeIRGen.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #include \"ESTreeIRGen.h\"",
          "10: #include \"llvm/Support/SaveAndRestore.h\"",
          "12: namespace hermes {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"llvm/Support/Debug.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:     genDummyFunction(wrapperFunction);",
          "207:     topLevelFunction = Builder.createFunction(",
          "",
          "[Removed Lines]",
          "204:     materializeScopesInChain(wrapperFunction, lexicalScopeChain, 1);",
          "",
          "[Added Lines]",
          "205:     materializeScopesInChain(wrapperFunction, lexicalScopeChain, -1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "287:       id, Builder.createIdentifier(filename), newFunc);",
          "288: }",
          "293:   Function *topLevel = Builder.createTopLevelFunction(lazyData->strictMode, {});",
          "296:   FunctionContext topLevelFunctionContext{this, topLevel, nullptr};",
          "",
          "[Removed Lines]",
          "290: Function *ESTreeIRGen::doLazyFunction(hbc::LazyCompilationData *lazyData) {",
          "294:   genDummyFunction(topLevel);",
          "",
          "[Added Lines]",
          "291: static int getDepth(const std::shared_ptr<SerializedScope> chain) {",
          "292:   int depth = 0;",
          "293:   const SerializedScope *current = chain.get();",
          "294:   while (current) {",
          "295:     depth += 1;",
          "296:     current = current->parentScope.get();",
          "297:   }",
          "298:   return depth;",
          "299: }",
          "301: std::pair<Function *, Function *> ESTreeIRGen::doLazyFunction(",
          "302:     hbc::LazyCompilationData *lazyData) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "303:   auto *node = cast<ESTree::FunctionLikeNode>(Root);",
          "306:   lexicalScopeChain = lazyData->parentScope;",
          "",
          "[Removed Lines]",
          "307:   materializeScopesInChain(topLevel, lexicalScopeChain, 1);",
          "",
          "[Added Lines]",
          "325:   materializeScopesInChain(",
          "326:       topLevel, lexicalScopeChain, getDepth(lexicalScopeChain) - 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "327:       !isa<ESTree::ArrowFunctionExpressionNode>(node) &&",
          "328:       \"lazy compilation not supported for arrow functions\");",
          "331: }",
          "333: std::pair<Value *, bool> ESTreeIRGen::declareVariableOrGlobalProperty(",
          "",
          "[Removed Lines]",
          "330:   return genES5Function(lazyData->originalName, parentVar, node);",
          "",
          "[Added Lines]",
          "349:   auto *func = genES5Function(lazyData->originalName, parentVar, node);",
          "350:   addLexicalDebugInfo(func, topLevel, lexicalScopeChain);",
          "351:   return {func, topLevel};",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1159:   assert(depth < 1000 && \"Excessive scope depth\");",
          "",
          "[Removed Lines]",
          "1162:   materializeScopesInChain(wrapperFunction, scope->parentScope, depth + 1);",
          "",
          "[Added Lines]",
          "1183:   materializeScopesInChain(wrapperFunction, scope->parentScope, depth - 1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1182:   }",
          "1186:   for (auto variableId : scope->variables) {",
          "1187:     auto *variable =",
          "1188:         Builder.createVariable(ES, Variable::DeclKind::Var, variableId);",
          "",
          "[Removed Lines]",
          "1185:   ExternalScope *ES = Builder.createExternalScope(wrapperFunction, -depth);",
          "",
          "[Added Lines]",
          "1206:   ExternalScope *ES = Builder.createExternalScope(wrapperFunction, depth);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1190:   }",
          "1191: }",
          "1193: #ifndef HERMESVM_LEAN",
          "1194: std::shared_ptr<SerializedScope> ESTreeIRGen::saveCurrentScope() {",
          "1195:   auto *func = curFunction()->function;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1214: namespace {",
          "1215: void buildDummyLexicalParent(",
          "1216:     IRBuilder &builder,",
          "1217:     Function *parent,",
          "1218:     Function *child) {",
          "1221:   auto *block = builder.createBasicBlock(parent);",
          "1222:   builder.setInsertionBlock(block);",
          "1223:   builder.createUnreachableInst();",
          "1224:   auto *inst = builder.createCreateFunctionInst(child);",
          "1225:   builder.createReturnInst(inst);",
          "1226: }",
          "1227: } // namespace",
          "1233: void ESTreeIRGen::addLexicalDebugInfo(",
          "1234:     Function *child,",
          "1235:     Function *global,",
          "1236:     const std::shared_ptr<const SerializedScope> &scope) {",
          "1237:   if (!scope || !scope->parentScope) {",
          "1238:     buildDummyLexicalParent(Builder, global, child);",
          "1239:     return;",
          "1240:   }",
          "1242:   auto *current = Builder.createFunction(",
          "1243:       scope->originalName,",
          "1244:       Function::DefinitionKind::ES5Function,",
          "1245:       false,",
          "1246:       {},",
          "1247:       false);",
          "1249:   for (auto &var : scope->variables) {",
          "1250:     Builder.createVariable(",
          "1251:         current->getFunctionScope(), Variable::DeclKind::Var, var);",
          "1252:   }",
          "1254:   buildDummyLexicalParent(Builder, current, child);",
          "1255:   addLexicalDebugInfo(current, global, scope->parentScope);",
          "1256: }",
          "",
          "---------------"
        ],
        "lib/IRGen/ESTreeIRGen.h||lib/IRGen/ESTreeIRGen.h": [
          "File: lib/IRGen/ESTreeIRGen.h -> lib/IRGen/ESTreeIRGen.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:       llvm::StringRef filename);",
          "",
          "[Removed Lines]",
          "398:   Function *doLazyFunction(hbc::LazyCompilationData *lazyData);",
          "",
          "[Added Lines]",
          "398:   std::pair<Function *, Function *> doLazyFunction(",
          "399:       hbc::LazyCompilationData *lazyData);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "888:       const std::shared_ptr<const SerializedScope> &scope,",
          "889:       int depth);",
          "892:   std::shared_ptr<SerializedScope> saveCurrentScope();",
          "893: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893:   void addLexicalDebugInfo(",
          "894:       Function *child,",
          "895:       Function *global,",
          "896:       const std::shared_ptr<const SerializedScope> &scope);",
          "",
          "---------------"
        ],
        "lib/IRGen/IRGen.cpp||lib/IRGen/IRGen.cpp": [
          "File: lib/IRGen/IRGen.cpp -> lib/IRGen/IRGen.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:       topLevelFunction, node->getSemInfo(), id, filename);",
          "44: }",
          "47:     hbc::LazyCompilationData *lazyData,",
          "48:     Module *M) {",
          "49:   auto &context = M->getContext();",
          "",
          "[Removed Lines]",
          "46: Function *generateLazyFunctionIR(",
          "",
          "[Added Lines]",
          "46: std::pair<Function *, Function *> generateLazyFunctionIR(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:   auto parsed = parser.parseLazyFunction(",
          "63:       (ESTree::NodeKind)lazyData->nodeKind, lazyData->span.Start);",
          "66:   if (!parsed ||",
          "67:       !sem::validateFunctionAST(",
          "68:           context, semCtx, *parsed, lazyData->strictMode)) {",
          "69:     LLVM_DEBUG(",
          "70:         llvm::dbgs() << \"Lazy AST parsing/validation failed with error: \"",
          "71:                      << diagHandler.getErrorString());",
          "73:         M,",
          "74:         lazyData->originalName,",
          "75:         lazyData->span,",
          "76:         diagHandler.getErrorString());",
          "77:   }",
          "79:   ESTreeIRGen generator{parsed.getValue(), {}, M, {}};",
          "",
          "[Removed Lines]",
          "72:     return ESTreeIRGen::genSyntaxErrorFunction(",
          "",
          "[Added Lines]",
          "73:     auto *error = ESTreeIRGen::genSyntaxErrorFunction(",
          "79:     return {error, error};",
          "",
          "---------------"
        ],
        "lib/VM/CodeBlock.cpp||lib/VM/CodeBlock.cpp": [
          "File: lib/VM/CodeBlock.cpp -> lib/VM/CodeBlock.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:                    << \"\\n\");",
          "263:   Module M{lazyData->context};",
          "266:   auto bytecodeModule = hbc::generateBytecodeModule(",
          "269:   return bytecodeModule;",
          "270: }",
          "",
          "[Removed Lines]",
          "264:   Function *entryPoint = hermes::generateLazyFunctionIR(lazyData, &M);",
          "267:       &M, entryPoint, BytecodeGenerationOptions::defaults());",
          "",
          "[Added Lines]",
          "264:   auto pair = hermes::generateLazyFunctionIR(lazyData, &M);",
          "265:   Function *entryPoint = pair.first;",
          "266:   Function *lexicalRoot = pair.second;",
          "269:       &M, lexicalRoot, entryPoint, BytecodeGenerationOptions::defaults());",
          "",
          "---------------"
        ],
        "test/debugger/lazy-lexical-scope.js||test/debugger/lazy-lexical-scope.js": [
          "File: test/debugger/lazy-lexical-scope.js -> test/debugger/lazy-lexical-scope.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: function foo() {",
          "14:   var x = \"a string\";",
          "15:   function bar() {",
          "18:     var y = 42;",
          "19:     print(\"start\");",
          "20:     print(x);",
          "21:     debugger;",
          "22:   }",
          "23:   bar();",
          "24: }",
          "25: function baz() {",
          "28:   var z;",
          "29:   foo();",
          "30: }",
          "31: baz()",
          "",
          "---------------"
        ],
        "test/debugger/lazy-lexical-scope.js.debug||test/debugger/lazy-lexical-scope.js.debug": [
          "File: test/debugger/lazy-lexical-scope.js.debug -> test/debugger/lazy-lexical-scope.js.debug",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: info variables",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48c76e3f083808f0cf1603932a2254494ca12fab",
      "candidate_info": {
        "commit_hash": "48c76e3f083808f0cf1603932a2254494ca12fab",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/48c76e3f083808f0cf1603932a2254494ca12fab",
        "files": [
          "include/hermes/AST/ESTree.h",
          "lib/AST/ESTree.cpp",
          "lib/IRGen/ESTreeIRGen-func.cpp",
          "lib/IRGen/ESTreeIRGen.cpp",
          "test/hermes/async-function-expr.js",
          "test/hermes/async-function.js"
        ],
        "message": "Implement Lazy Async Function\n\nSummary:\nThis diff implemented lazy compilation for\nasync function. N.B. lazy async arrow is not\nsupported as other arrow function.\n\nReviewed By: avp\n\nDifferential Revision: D25812074\n\nfbshipit-source-id: 8e9654e6200f0a4e271134d1e9c528435479baf1",
        "before_after_code_files": [
          "include/hermes/AST/ESTree.h||include/hermes/AST/ESTree.h",
          "lib/AST/ESTree.cpp||lib/AST/ESTree.cpp",
          "lib/IRGen/ESTreeIRGen-func.cpp||lib/IRGen/ESTreeIRGen-func.cpp",
          "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp",
          "test/hermes/async-function-expr.js||test/hermes/async-function-expr.js",
          "test/hermes/async-function.js||test/hermes/async-function.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/IRGen/ESTreeIRGen-func.cpp||lib/IRGen/ESTreeIRGen-func.cpp",
            "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp"
          ],
          "candidate": [
            "lib/IRGen/ESTreeIRGen-func.cpp||lib/IRGen/ESTreeIRGen-func.cpp",
            "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/hermes/AST/ESTree.h||include/hermes/AST/ESTree.h": [
          "File: include/hermes/AST/ESTree.h -> include/hermes/AST/ESTree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "906: bool isGenerator(FunctionLikeNode *node);",
          "909: struct NodeKindInfo : llvh::DenseMapInfo<NodeKind> {",
          "910:   static inline NodeKind getEmptyKey() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "909: bool isAsync(FunctionLikeNode *node);",
          "",
          "---------------"
        ],
        "lib/AST/ESTree.cpp||lib/AST/ESTree.cpp": [
          "File: lib/AST/ESTree.cpp -> lib/AST/ESTree.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   }",
          "133: }",
          "135: } // namespace ESTree",
          "136: } // namespace hermes",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135: bool isAsync(FunctionLikeNode *node) {",
          "136:   switch (node->getKind()) {",
          "137:     default:",
          "138:       assert(",
          "139:           node->getKind() == NodeKind::Program && \"invalid FunctionLikeNode\");",
          "140:       return false;",
          "141:     case NodeKind::FunctionExpression:",
          "142:       return cast<FunctionExpressionNode>(node)->_async;",
          "143:     case NodeKind::ArrowFunctionExpression:",
          "144:       return cast<ArrowFunctionExpressionNode>(node)->_async;",
          "145:     case NodeKind::FunctionDeclaration:",
          "146:       return cast<FunctionDeclarationNode>(node)->_async;",
          "147:   }",
          "148: }",
          "",
          "---------------"
        ],
        "lib/IRGen/ESTreeIRGen-func.cpp||lib/IRGen/ESTreeIRGen-func.cpp": [
          "File: lib/IRGen/ESTreeIRGen-func.cpp -> lib/IRGen/ESTreeIRGen-func.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "386:       ESTree::isStrict(functionNode->strictness),",
          "387:       functionNode->getSourceRange(),",
          "391:   {",
          "392:     FunctionContext asyncFnContext{this, asyncFn, functionNode->getSemInfo()};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:   asyncFn->setLazyClosureAlias(lazyClosureAlias);",
          "393:   auto *body = ESTree::getBlockStatement(functionNode);",
          "394:   if (auto *bodyBlock = llvh::dyn_cast<ESTree::BlockStatementNode>(body)) {",
          "395:     if (bodyBlock->isLazyFunctionBody) {",
          "396:       setupLazyScope(functionNode, asyncFn, body);",
          "397:       return asyncFn;",
          "398:     }",
          "399:   }",
          "",
          "---------------"
        ],
        "lib/IRGen/ESTreeIRGen.cpp||lib/IRGen/ESTreeIRGen.cpp": [
          "File: lib/IRGen/ESTreeIRGen.cpp -> lib/IRGen/ESTreeIRGen.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:       ? genGeneratorFunction(lazyData->originalName, parentVar, node)",
          "347:       : genES5Function(lazyData->originalName, parentVar, node, false);",
          "348:   addLexicalDebugInfo(func, topLevel, lexicalScopeChain);",
          "",
          "[Removed Lines]",
          "345:   Function *func = ESTree::isGenerator(node)",
          "",
          "[Added Lines]",
          "345:   Function *func = ESTree::isAsync(node)",
          "346:       ? genAsyncFunction(lazyData->originalName, parentVar, node)",
          "347:       : ESTree::isGenerator(node)",
          "",
          "---------------"
        ],
        "test/hermes/async-function-expr.js||test/hermes/async-function-expr.js": [
          "File: test/hermes/async-function-expr.js -> test/hermes/async-function-expr.js"
        ],
        "test/hermes/async-function.js||test/hermes/async-function.js": [
          "File: test/hermes/async-function.js -> test/hermes/async-function.js"
        ]
      }
    }
  ]
}