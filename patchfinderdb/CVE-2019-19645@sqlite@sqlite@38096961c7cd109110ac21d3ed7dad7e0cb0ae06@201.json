{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3e08ba4521c29df5c8b64692548ecdbe33ebf888",
      "candidate_info": {
        "commit_hash": "3e08ba4521c29df5c8b64692548ecdbe33ebf888",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3e08ba4521c29df5c8b64692548ecdbe33ebf888",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/dbstat.c"
        ],
        "message": "Small simplification to the dbstat virtual table.\n\nFossilOrigin-Name: 9d4c156fa26f80bb8f88b6ad8f24520a15af296de9c110604f6bd42c257455a0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/dbstat.c||src/dbstat.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f09aa3248e2b4a32ff5b5d37084cb2a27445322cb06a3354cef723f4f0b2cd34",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "602:   StatTable *pTab = (StatTable*)(pCursor->pVtab);",
          "603:   char *zSql;",
          "604:   int rc = SQLITE_OK;",
          "607:   if( idxNum==1 ){",
          "608:     const char *zDbase = (const char*)sqlite3_value_text(argv[0]);",
          "",
          "[Removed Lines]",
          "605:   char *zMaster;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "618:   statResetCsr(pCsr);",
          "619:   sqlite3_finalize(pCsr->pStmt);",
          "620:   pCsr->pStmt = 0;",
          "622:   zSql = sqlite3_mprintf(",
          "623:       \"SELECT 'sqlite_master' AS name, 1 AS rootpage, 'table' AS type\"",
          "624:       \"  UNION ALL  \"",
          "625:       \"SELECT name, rootpage, type\"",
          "628:   if( zSql==0 ){",
          "629:     return SQLITE_NOMEM_BKPT;",
          "630:   }else{",
          "",
          "[Removed Lines]",
          "621:   zMaster = pCsr->iDb==1 ? \"sqlite_temp_master\" : \"sqlite_master\";",
          "626:       \"  FROM \\\"%w\\\".%s WHERE rootpage!=0\"",
          "627:       \"  ORDER BY name\", pTab->db->aDb[pCsr->iDb].zDbSName, zMaster);",
          "",
          "[Added Lines]",
          "624:       \"  FROM \\\"%w\\\".sqlite_master WHERE rootpage!=0\"",
          "625:       \"  ORDER BY name\", pTab->db->aDb[pCsr->iDb].zDbSName);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a231b49738d82582d9f4c31da18da90928d6f10",
      "candidate_info": {
        "commit_hash": "7a231b49738d82582d9f4c31da18da90928d6f10",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7a231b49738d82582d9f4c31da18da90928d6f10",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test"
        ],
        "message": "The expression \"(X IS FALSE) BETWEEN FALSE AND TRUE\" does not implie that X is not NULL.  Ticket [fba33c8b1df6a915]\n\nFossilOrigin-Name: 057fb8b1809b8b9c8fff0fd0804153b9644f0545c23c6ddc4758bda3381094b9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45ff2b1f2693bb0231a864a511bb82cf2a5945ab3d806a5bbaf1517ecb287883",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4999:       assert( pList!=0 );",
          "5000:       assert( pList->nExpr==2 );",
          "5001:       if( seenNot ) return 0;",
          "5004:       ){",
          "5005:         return 1;",
          "5006:       }",
          "5008:     }",
          "5009:     case TK_EQ:",
          "5010:     case TK_NE:",
          "",
          "[Removed Lines]",
          "5002:       if( exprImpliesNotNull(pParse, pList->a[0].pExpr, pNN, iTab, seenNot)",
          "5003:        || exprImpliesNotNull(pParse, pList->a[1].pExpr, pNN, iTab, seenNot)",
          "5007:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "",
          "[Added Lines]",
          "5005:       if( exprImpliesNotNull(pParse, pList->a[0].pExpr, pNN, iTab, 1)",
          "5006:        || exprImpliesNotNull(pParse, pList->a[1].pExpr, pNN, iTab, 1)",
          "5010:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, 1);",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "440: # 2019-08-30",
          "441: # Ticket https://www.sqlite.org/src/info/a6408d42b9f44462",
          "442: #",
          "443: do_execsql_test index6-15.1 {",
          "444:   DROP TABLE t0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442: # Ticket https://www.sqlite.org/src/info/fba33c8b1df6a915",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:   CREATE INDEX i0 ON t0(1) WHERE c0 NOT NULL;",
          "448:   SELECT 1 FROM t0 WHERE (t0.c0 IS FALSE) IS FALSE;",
          "449: } {1}",
          "451: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451: do_execsql_test index6-15.2 {",
          "452:   SELECT 1 FROM t0 WHERE (t0.c0 IS FALSE) BETWEEN FALSE AND TRUE;",
          "453: } {1}",
          "454: do_execsql_test index6-15.3 {",
          "455:   SELECT 1 FROM t0 WHERE TRUE BETWEEN (t0.c0 IS FALSE) AND TRUE;",
          "456: } {1}",
          "457: do_execsql_test index6-15.4 {",
          "458:   SELECT 1 FROM t0 WHERE FALSE BETWEEN FALSE AND (t0.c0 IS FALSE);",
          "459: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e9a67adb059733e05e0791f2ec519985eaa333c",
      "candidate_info": {
        "commit_hash": "9e9a67adb059733e05e0791f2ec519985eaa333c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9e9a67adb059733e05e0791f2ec519985eaa333c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join.test"
        ],
        "message": "Ensure the functions that appear to be constant are not factored out of expression that originate on the right-hand side of a LEFT JOIN. Ticket [6710d2f7a13a2997]\n\nFossilOrigin-Name: 500c9152daaf11cf69d778aa8592175f6088337c6667c59af6df3a24cd81eb0e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9c4bca64fb5f635296a8d7d7c1bf2808e02ca734a9983e5cee9132f5352a9a6d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3994:       break;",
          "3995:     }",
          "3997:     case TK_IF_NULL_ROW: {",
          "3998:       int addrINR;",
          "3999:       addrINR = sqlite3VdbeAddOp1(v, OP_IfNullRow, pExpr->iTable);",
          "4000:       inReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft, target);",
          "4001:       sqlite3VdbeJumpHere(v, addrINR);",
          "4002:       sqlite3VdbeChangeP3(v, addrINR, inReg);",
          "4003:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4005:       u8 okConstFactor = pParse->okConstFactor;",
          "4011:       pParse->okConstFactor = 0;",
          "4013:       pParse->okConstFactor = okConstFactor;",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "864:    WHERE (b IS NOT NULL)=0;",
          "865: } {1 {}}",
          "867: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867: # 2019-08-17 ticket https://sqlite.org/src/tktview/6710d2f7a13a299728ab",
          "868: # Ensure that constants that derive from the right-hand table of a LEFT JOIN",
          "869: # are never factored out, since they are not really constant.",
          "870: #",
          "871: do_execsql_test join-17.100 {",
          "872:   DROP TABLE IF EXISTS t1;",
          "873:   CREATE TABLE t1(x);",
          "874:   INSERT INTO t1(x) VALUES(0),(1);",
          "875:   SELECT * FROM t1 LEFT JOIN (SELECT abs(1) AS y FROM t1) ON x WHERE NOT(y='a');",
          "876: } {1 1 1 1}",
          "877: do_execsql_test join-17.110 {",
          "878:   SELECT * FROM t1 LEFT JOIN (SELECT abs(1)+2 AS y FROM t1) ON x",
          "879:    WHERE NOT(y='a');",
          "880: } {1 3 1 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e46201e264082d02490e20f778b3f0fc00ba136f",
      "candidate_info": {
        "commit_hash": "e46201e264082d02490e20f778b3f0fc00ba136f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e46201e264082d02490e20f778b3f0fc00ba136f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/fkey.c",
          "test/fkey8.test"
        ],
        "message": "Fix a bug in the code that detects self-referencing rows as part of foreign key processing. Fix for [50d2a6c2].\n\nFossilOrigin-Name: 16fff05347f42fe9fa0f3150290b98b59a9bb921e49dc07ca397aa1de7a7e17d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/fkey.c||src/fkey.c",
          "test/fkey8.test||test/fkey8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ddf06db702761d663119d508afe21d7dfebe963d576bb42fc2f2024205ab86f8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "615:       pNe = sqlite3PExpr(pParse, TK_NE, pLeft, pRight);",
          "616:     }else{",
          "617:       Expr *pEq, *pAll = 0;",
          "619:       assert( pIdx!=0 );",
          "621:         i16 iCol = pIdx->aiColumn[i];",
          "622:         assert( iCol>=0 );",
          "623:         pLeft = exprTableRegister(pParse, pTab, regData, iCol);",
          "626:         pAll = sqlite3ExprAnd(db, pAll, pEq);",
          "627:       }",
          "628:       pNe = sqlite3PExpr(pParse, TK_NOT, pAll, 0);",
          "",
          "[Removed Lines]",
          "618:       Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "620:       for(i=0; i<pPk->nKeyCol; i++){",
          "624:         pRight = exprTableColumn(db, pTab, pSrc->a[0].iCursor, iCol);",
          "625:         pEq = sqlite3PExpr(pParse, TK_EQ, pLeft, pRight);",
          "",
          "[Added Lines]",
          "622:       for(i=0; i<pIdx->nKeyCol; i++){",
          "626:         pRight = sqlite3Expr(db, TK_ID, pTab->aCol[iCol].zName);",
          "627:         pEq = sqlite3PExpr(pParse, TK_IS, pLeft, pRight);",
          "",
          "---------------"
        ],
        "test/fkey8.test||test/fkey8.test": [
          "File: test/fkey8.test -> test/fkey8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   DELETE FROM p3 WHERE a=1",
          "165: } {1 {FOREIGN KEY constraint failed}}",
          "167: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168: do_execsql_test 3.0 {",
          "169:   PRAGMA foreign_keys=ON;",
          "170:   CREATE TABLE t2(",
          "171:     a PRIMARY KEY, b, c, d, e,",
          "172:       FOREIGN KEY(b, c) REFERENCES t2(d, e)",
          "173:   ) WITHOUT ROWID;",
          "174:   CREATE UNIQUE INDEX idx ON t2(d, e);",
          "176:   INSERT INTO t2 VALUES(1, 'one', 'one', 'one', 'one'); -- row is parent of self",
          "177:   INSERT INTO t2 VALUES(2, 'one', 'one', 'one', NULL);  -- parent is row 1",
          "178: }",
          "180: do_catchsql_test 3.1 {",
          "181:   DELETE FROM t2 WHERE a=1;",
          "182: } {1 {FOREIGN KEY constraint failed}}",
          "184: do_execsql_test 4.0 {",
          "185:   CREATE TABLE t1 (",
          "186:       c1 PRIMARY KEY,",
          "187:       c2 NUMERIC,",
          "188:       FOREIGN KEY(c1) REFERENCES t1(c2)",
          "189:       ) WITHOUT ROWID ;",
          "190:   CREATE INDEX t1c1 ON t1(c1);",
          "191:   CREATE UNIQUE INDEX t1c1unique ON t1(c2);",
          "192: }",
          "193: do_catchsql_test 4.1 {",
          "194:   INSERT OR REPLACE INTO t1 VALUES(10000, 20000);",
          "195: } {1 {FOREIGN KEY constraint failed}}",
          "196: do_execsql_test 4.2 {",
          "197:   INSERT OR REPLACE INTO t1 VALUES(20000, 20000);",
          "198: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a31dc201e905816f97fd20001cb5f154276f91d",
      "candidate_info": {
        "commit_hash": "0a31dc201e905816f97fd20001cb5f154276f91d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a31dc201e905816f97fd20001cb5f154276f91d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "If the initial byte of a record is a large value, then always used the generalized record comparison routine sqlite3VdbeRecordCompare() rather than one of the specialized versions that are optimized for shorter records.\n\nFossilOrigin-Name: c1ac00706bae45fe9735061ada025880606cdfb8ecfdaa36b4e2d04275820861",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 906d1fd8650874236e0bf5734d5347dcc45ec036164a56570fec37da4ffeaf8f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5552:             sqlite3_free(pCellKey);",
          "5553:             goto moveto_finish;",
          "5554:           }",
          "5556:           sqlite3_free(pCellKey);",
          "5557:         }",
          "5558:         assert(",
          "",
          "[Removed Lines]",
          "5555:           c = xRecordCompare(nCell, pCellKey, pIdxKey);",
          "",
          "[Added Lines]",
          "5555:           c = sqlite3VdbeRecordCompare(nCell, pCellKey, pIdxKey);",
          "",
          "---------------"
        ]
      }
    }
  ]
}