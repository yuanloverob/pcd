{
  "cve_id": "CVE-2015-0216",
  "cve_desc": "access.php in the Lesson module in Moodle 2.8.x before 2.8.2 does not set the RISK_XSS bit for graders, which allows remote authenticated users to conduct cross-site scripting (XSS) attacks via crafted essay feedback.",
  "repo": "moodle/moodle",
  "patch_hash": "b9c86823c70a1cba20bca1c4b5b032ee1559e22d",
  "patch_info": {
    "commit_hash": "b9c86823c70a1cba20bca1c4b5b032ee1559e22d",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/b9c86823c70a1cba20bca1c4b5b032ee1559e22d",
    "files": [
      "mod/lesson/db/access.php",
      "mod/lesson/version.php"
    ],
    "message": "MDL-48034 mod_lesson: grade capability missing RISK_XSS",
    "before_after_code_files": [
      "mod/lesson/db/access.php||mod/lesson/db/access.php",
      "mod/lesson/version.php||mod/lesson/version.php"
    ]
  },
  "patch_diff": {
    "mod/lesson/db/access.php||mod/lesson/db/access.php": [
      "File: mod/lesson/db/access.php -> mod/lesson/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "56:     'mod/lesson:grade' => array(",
      "58:         'captype' => 'write',",
      "59:         'contextlevel' => CONTEXT_MODULE,",
      "60:         'archetypes' => array(",
      "",
      "[Removed Lines]",
      "57:         'riskbitmask' => RISK_SPAM,",
      "",
      "[Added Lines]",
      "57:         'riskbitmask' => RISK_SPAM | RISK_XSS,",
      "",
      "---------------"
    ],
    "mod/lesson/version.php||mod/lesson/version.php": [
      "File: mod/lesson/version.php -> mod/lesson/version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: defined('MOODLE_INTERNAL') || die();",
      "28: $plugin->requires  = 2014110400;    // Requires this Moodle version",
      "29: $plugin->component = 'mod_lesson'; // Full name of the plugin (used for diagnostics)",
      "30: $plugin->cron      = 0;",
      "",
      "[Removed Lines]",
      "27: $plugin->version   = 2014122900;       // The current module version (Date: YYYYMMDDXX)",
      "",
      "[Added Lines]",
      "27: $plugin->version   = 2015010600;       // The current module version (Date: YYYYMMDDXX)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a1300e98bbd81e54f23c5376dac76252dee58f1d",
      "candidate_info": {
        "commit_hash": "a1300e98bbd81e54f23c5376dac76252dee58f1d",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/a1300e98bbd81e54f23c5376dac76252dee58f1d",
        "files": [
          "mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "mod/lesson/db/upgrade.php",
          "mod/lesson/editpage.php",
          "mod/lesson/locallib.php",
          "mod/lesson/version.php"
        ],
        "message": "MDL-48984 mod_lesson: some lesson_answers answers should be plain text\n\nBranch tables jump descriptions, short answer question answers\nand numerical question answers should be plain text, and no editor\nshould be available here.",
        "before_after_code_files": [
          "mod/lesson/backup/moodle2/restore_lesson_stepslib.php||mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php",
          "mod/lesson/editpage.php||mod/lesson/editpage.php",
          "mod/lesson/locallib.php||mod/lesson/locallib.php",
          "mod/lesson/version.php||mod/lesson/version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ],
          "candidate": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/lesson/backup/moodle2/restore_lesson_stepslib.php||mod/lesson/backup/moodle2/restore_lesson_stepslib.php": [
          "File: mod/lesson/backup/moodle2/restore_lesson_stepslib.php -> mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:         }",
          "234:         $rs->close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:         $sql = 'SELECT a.*",
          "241:                   FROM {lesson_answers} a",
          "242:                   JOIN {lesson_pages} p ON p.id = a.pageid",
          "243:                  WHERE a.answerformat <> :format",
          "244:                    AND a.lessonid = :lessonid",
          "245:                    AND p.qtype IN (1, 8, 20)';",
          "246:         $badanswers = $DB->get_recordset_sql($sql, array('lessonid' => $this->task->get_activityid(), 'format' => FORMAT_MOODLE));",
          "248:         foreach ($badanswers as $badanswer) {",
          "250:             $badanswer->answer = strip_tags($badanswer->answer);",
          "251:             $badanswer->answerformat = FORMAT_MOODLE;",
          "252:             $DB->update_record('lesson_answers', $badanswer);",
          "253:         }",
          "",
          "---------------"
        ],
        "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php": [
          "File: mod/lesson/db/upgrade.php -> mod/lesson/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:         upgrade_mod_savepoint(true, 2014122900, 'lesson');",
          "139:     }",
          "140:     return true;",
          "141: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     if ($oldversion < 2015022700) {",
          "147:         $sql = 'SELECT a.*",
          "148:                   FROM {lesson_answers} a",
          "149:                   JOIN {lesson_pages} p ON p.id = a.pageid",
          "150:                  WHERE a.answerformat <> :format",
          "151:                    AND p.qtype IN (1, 8, 20)';",
          "152:         $badanswers = $DB->get_recordset_sql($sql, array('format' => FORMAT_MOODLE));",
          "154:         foreach ($badanswers as $badanswer) {",
          "156:             $badanswer->answer = strip_tags($badanswer->answer);",
          "157:             $badanswer->answerformat = FORMAT_MOODLE;",
          "158:             $DB->update_record('lesson_answers', $badanswer);",
          "159:         }",
          "162:         upgrade_mod_savepoint(true, 2015022700, 'lesson');",
          "163:     }",
          "",
          "---------------"
        ],
        "mod/lesson/editpage.php||mod/lesson/editpage.php": [
          "File: mod/lesson/editpage.php -> mod/lesson/editpage.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:         $answereditor = 'answer_editor['.$answerscount.']';",
          "94:         if (is_array($data->$answereditor)) {",
          "95:             $answerdata = $data->$answereditor;",
          "100:         }",
          "102:         $responseeditor = 'response_editor['.$answerscount.']';",
          "103:         if (is_array($data->$responseeditor)) {",
          "104:             $responsedata = $data->$responseeditor;",
          "110:         }",
          "111:         $answerscount++;",
          "112:     }",
          "",
          "[Removed Lines]",
          "96:             $answerdraftid = file_get_submitted_draft_itemid($answereditor);",
          "97:             $answertext = file_prepare_draft_area($answerdraftid, $PAGE->cm->context->id,",
          "98:                     'mod_lesson', 'page_answers', $answer->id, $editoroptions, $answerdata['text']);",
          "99:             $data->$answereditor = array('text' => $answertext, 'format' => $answerdata['format'], 'itemid' => $answerdraftid);",
          "105:             $responsedraftid = file_get_submitted_draft_itemid($responseeditor);",
          "106:             $responsetext = file_prepare_draft_area($responsedraftid, $PAGE->cm->context->id,",
          "107:                     'mod_lesson', 'page_responses', $answer->id, $editoroptions, $responsedata['text']);",
          "108:             $data->$responseeditor = array('text' => $responsetext, 'format' => $responsedata['format'],",
          "109:                     'itemid' => $responsedraftid);",
          "",
          "[Added Lines]",
          "96:             if ($answerdata['format'] != FORMAT_MOODLE) {",
          "97:                 $answerdata = $data->$answereditor;",
          "98:                 $answerdraftid = file_get_submitted_draft_itemid($answereditor);",
          "99:                 $answertext = file_prepare_draft_area($answerdraftid, $PAGE->cm->context->id,",
          "100:                         'mod_lesson', 'page_answers', $answer->id, $editoroptions, $answerdata['text']);",
          "101:                 $data->$answereditor = array('text' => $answertext, 'format' => $answerdata['format'], 'itemid' => $answerdraftid);",
          "102:             } else {",
          "103:                 $data->$answereditor = $answerdata['text'];",
          "104:             }",
          "110:             if ($responsedata['format'] != FORMAT_MOODLE) {",
          "111:                 $responsedraftid = file_get_submitted_draft_itemid($responseeditor);",
          "112:                 $responsetext = file_prepare_draft_area($responsedraftid, $PAGE->cm->context->id,",
          "113:                         'mod_lesson', 'page_responses', $answer->id, $editoroptions, $responsedata['text']);",
          "114:                 $data->$responseeditor = array('text' => $responsetext, 'format' => $responsedata['format'],",
          "115:                         'itemid' => $responsedraftid);",
          "116:             } else {",
          "117:                 $data->$responseeditor = $responsedata['text'];",
          "118:             }",
          "",
          "---------------"
        ],
        "mod/lesson/locallib.php||mod/lesson/locallib.php": [
          "File: mod/lesson/locallib.php -> mod/lesson/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "802:             $this->_form->setType('answer_editor['.$count.']', PARAM_RAW);",
          "803:             $this->_form->setDefault('answer_editor['.$count.']', array('text' => '', 'format' => FORMAT_HTML));",
          "804:         } else {",
          "808:         }",
          "810:         if ($required) {",
          "",
          "[Removed Lines]",
          "805:             $this->_form->addElement('editor', 'answer_editor['.$count.']', $label,",
          "806:                     array('rows' => '4', 'columns' => '80'), array('noclean' => true));",
          "807:             $this->_form->setDefault('answer_editor['.$count.']', array('text' => '', 'format' => FORMAT_MOODLE));",
          "",
          "[Added Lines]",
          "805:             $this->_form->addElement('text', 'answer_editor['.$count.']', $label,",
          "806:                     array('size' => '50', 'maxlength' => '200'));",
          "807:             $this->_form->setType('answer_editor['.$count.']', PARAM_TEXT);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2363:                     $this->answers[$i]->timecreated = $this->timecreated;",
          "2364:                 }",
          "2369:                 }",
          "2370:                 if (!empty($properties->response_editor[$i]) && is_array($properties->response_editor[$i])) {",
          "2371:                     $this->answers[$i]->response = $properties->response_editor[$i]['text'];",
          "2372:                     $this->answers[$i]->responseformat = $properties->response_editor[$i]['format'];",
          "",
          "[Removed Lines]",
          "2366:                 if (!empty($properties->answer_editor[$i]) && is_array($properties->answer_editor[$i])) {",
          "2367:                     $this->answers[$i]->answer = $properties->answer_editor[$i]['text'];",
          "2368:                     $this->answers[$i]->answerformat = $properties->answer_editor[$i]['format'];",
          "",
          "[Added Lines]",
          "2367:                 if (!empty($properties->answer_editor[$i])) {",
          "2368:                     if (is_array($properties->answer_editor[$i])) {",
          "2370:                         $this->answers[$i]->answer = $properties->answer_editor[$i]['text'];",
          "2371:                         $this->answers[$i]->answerformat = $properties->answer_editor[$i]['format'];",
          "2372:                     } else {",
          "2374:                         $this->answers[$i]->answer = $properties->answer_editor[$i];",
          "2375:                         $this->answers[$i]->answerformat = FORMAT_MOODLE;",
          "2376:                     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2469:         for ($i = 0; $i < $this->lesson->maxanswers; $i++) {",
          "2470:             $answer = clone($newanswer);",
          "2475:             }",
          "2476:             if (!empty($properties->response_editor[$i]) && is_array($properties->response_editor[$i])) {",
          "2477:                 $answer->response = $properties->response_editor[$i]['text'];",
          "",
          "[Removed Lines]",
          "2472:             if (!empty($properties->answer_editor[$i]) && is_array($properties->answer_editor[$i])) {",
          "2473:                 $answer->answer = $properties->answer_editor[$i]['text'];",
          "2474:                 $answer->answerformat = $properties->answer_editor[$i]['format'];",
          "",
          "[Added Lines]",
          "2481:             if (!empty($properties->answer_editor[$i])) {",
          "2482:                 if (is_array($properties->answer_editor[$i])) {",
          "2484:                     $answer->answer = $properties->answer_editor[$i]['text'];",
          "2485:                     $answer->answerformat = $properties->answer_editor[$i]['format'];",
          "2486:                 } else {",
          "2488:                     $answer->answer = $properties->answer_editor[$i];",
          "2489:                     $answer->answerformat = FORMAT_MOODLE;",
          "2490:                 }",
          "",
          "---------------"
        ],
        "mod/lesson/version.php||mod/lesson/version.php": [
          "File: mod/lesson/version.php -> mod/lesson/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $plugin->requires  = 2014110400;    // Requires this Moodle version",
          "29: $plugin->component = 'mod_lesson'; // Full name of the plugin (used for diagnostics)",
          "30: $plugin->cron      = 0;",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2015021900;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2015022700;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6695d5947f3c85180620bf965c7f431faba5b53d",
      "candidate_info": {
        "commit_hash": "6695d5947f3c85180620bf965c7f431faba5b53d",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6695d5947f3c85180620bf965c7f431faba5b53d",
        "files": [
          "mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "mod/lesson/db/install.xml",
          "mod/lesson/db/upgrade.php",
          "mod/lesson/pagetypes/branchtable.php",
          "mod/lesson/version.php",
          "mod/lesson/view.php"
        ],
        "message": "MDL-34006 Lesson: Resume lesson loads wrong page.",
        "before_after_code_files": [
          "mod/lesson/backup/moodle2/backup_lesson_stepslib.php||mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "mod/lesson/backup/moodle2/restore_lesson_stepslib.php||mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php",
          "mod/lesson/pagetypes/branchtable.php||mod/lesson/pagetypes/branchtable.php",
          "mod/lesson/version.php||mod/lesson/version.php",
          "mod/lesson/view.php||mod/lesson/view.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ],
          "candidate": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/lesson/backup/moodle2/backup_lesson_stepslib.php||mod/lesson/backup/moodle2/backup_lesson_stepslib.php": [
          "File: mod/lesson/backup/moodle2/backup_lesson_stepslib.php -> mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:         $branches = new backup_nested_element('branches');",
          "121:         $branch = new backup_nested_element('branch', array('id'), array(",
          "123:         ));",
          "",
          "[Removed Lines]",
          "122:             'userid','retry','flag','timeseen'",
          "",
          "[Added Lines]",
          "122:              'userid', 'retry', 'flag', 'timeseen', 'nextpageid'",
          "",
          "---------------"
        ],
        "mod/lesson/backup/moodle2/restore_lesson_stepslib.php||mod/lesson/backup/moodle2/restore_lesson_stepslib.php": [
          "File: mod/lesson/backup/moodle2/restore_lesson_stepslib.php -> mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:         }",
          "234:         $rs->close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:         $rs = $DB->get_recordset('lesson_branch', array('lessonid' => $this->task->get_activityid()),",
          "238:                                  '', 'id, nextpageid');",
          "239:         foreach ($rs as $answer) {",
          "240:             if ($answer->nextpageid > 0) {",
          "241:                 $answer->nextpageid = $this->get_mappingid('lesson_page', $answer->nextpageid);",
          "242:                 $DB->update_record('lesson_branch', $answer);",
          "243:             }",
          "244:         }",
          "245:         $rs->close();",
          "",
          "---------------"
        ],
        "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php": [
          "File: mod/lesson/db/upgrade.php -> mod/lesson/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:         upgrade_mod_savepoint(true, 2014122900, 'lesson');",
          "139:     }",
          "140:     return true;",
          "141: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     if ($oldversion < 2015022500) {",
          "144:         $table = new xmldb_table('lesson_branch');",
          "145:         $field = new xmldb_field('nextpageid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0', 'timeseen');",
          "148:         if (!$dbman->field_exists($table, $field)) {",
          "149:             $dbman->add_field($table, $field);",
          "150:         }",
          "153:         upgrade_mod_savepoint(true, 2015022500, 'lesson');",
          "154:     }",
          "",
          "---------------"
        ],
        "mod/lesson/pagetypes/branchtable.php||mod/lesson/pagetypes/branchtable.php": [
          "File: mod/lesson/pagetypes/branchtable.php -> mod/lesson/pagetypes/branchtable.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:         } else {",
          "174:             $retries = 0;",
          "175:         }",
          "187:         $context = context_module::instance($PAGE->cm->id);",
          "",
          "[Removed Lines]",
          "176:         $branch = new stdClass;",
          "177:         $branch->lessonid = $this->lesson->id;",
          "178:         $branch->userid = $USER->id;",
          "179:         $branch->pageid = $this->properties->id;",
          "180:         $branch->retry = $retries;",
          "181:         $branch->flag = $branchflag;",
          "182:         $branch->timeseen = time();",
          "184:         $DB->insert_record(\"lesson_branch\", $branch);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:         } elseif ($newpageid == LESSON_RANDOMBRANCH) {",
          "208:             $newpageid = lesson_unseen_branch_jump($this->lesson, $USER->id);",
          "209:         }",
          "212:     }",
          "214:     public function display_answers(html_table $table) {",
          "",
          "[Removed Lines]",
          "211:         redirect(new moodle_url('/mod/lesson/view.php', array('id'=>$PAGE->cm->id,'pageid'=>$newpageid)));",
          "",
          "[Added Lines]",
          "203:         $branch = new stdClass;",
          "204:         $branch->lessonid = $this->lesson->id;",
          "205:         $branch->userid = $USER->id;",
          "206:         $branch->pageid = $this->properties->id;",
          "207:         $branch->retry = $retries;",
          "208:         $branch->flag = $branchflag;",
          "209:         $branch->timeseen = time();",
          "210:         $branch->nextpageid = $newpageid;",
          "211:         $DB->insert_record(\"lesson_branch\", $branch);",
          "213:         redirect(new moodle_url('/mod/lesson/view.php', array('id' => $PAGE->cm->id, 'pageid' => $newpageid)));",
          "",
          "---------------"
        ],
        "mod/lesson/version.php||mod/lesson/version.php": [
          "File: mod/lesson/version.php -> mod/lesson/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $plugin->requires  = 2014110400;    // Requires this Moodle version",
          "29: $plugin->component = 'mod_lesson'; // Full name of the plugin (used for diagnostics)",
          "30: $plugin->cron      = 0;",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2015021800;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2015022500;    // The current module version (Date: YYYYMMDDXX)",
          "",
          "---------------"
        ],
        "mod/lesson/view.php||mod/lesson/view.php": [
          "File: mod/lesson/view.php -> mod/lesson/view.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:         $lastbranchtable = current($branchtables);",
          "217:         if (count($allattempts) > 0) {",
          "221:                     $lastpageseen = $lastbranchtable->pageid;",
          "222:                 }",
          "224:             }",
          "225:         } else {",
          "228:         }",
          "229:     }",
          "236:             } else {",
          "239:             }",
          "242:         }",
          "245:     }",
          "247:     if ($attemptflag) {",
          "",
          "[Removed Lines]",
          "218:             foreach($allattempts as $attempt) {",
          "219:                 if ($lastbranchtable->timeseen > $attempt->timeseen) {",
          "223:                 break;",
          "227:             $lastpageseen = $lastbranchtable->pageid;",
          "230:     if (isset($lastpageseen) && $DB->count_records('lesson_attempts', array('lessonid'=>$lesson->id, 'userid'=>$USER->id, 'retry'=>$retries)) > 0) {",
          "231:         echo $lessonoutput->header($lesson, $cm, '', false, null, get_string('leftduringtimedsession', 'lesson'));",
          "232:         if ($lesson->timed) {",
          "233:             if ($lesson->retake) {",
          "234:                 $continuelink = new single_button(new moodle_url('/mod/lesson/view.php', array('id'=>$cm->id, 'pageid'=>$lesson->firstpageid, 'startlastseen'=>'no')), get_string('continue', 'lesson'), 'get');",
          "235:                 echo '<div class=\"center leftduring\">'.$lessonoutput->message(get_string('leftduringtimed', 'lesson'), $continuelink).'</div>';",
          "237:                 $courselink = new single_button(new moodle_url('/course/view.php', array('id'=>$PAGE->course->id)), get_string('returntocourse', 'lesson'), 'get');",
          "238:                 echo '<div class=\"center leftduring\">'.$lessonoutput->message(get_string('leftduringtimednoretake', 'lesson'), $courselink).'</div>';",
          "240:         } else {",
          "241:             echo $lessonoutput->continue_links($lesson, $lastpageseen);",
          "243:         echo $lessonoutput->footer();",
          "244:         exit();",
          "",
          "[Added Lines]",
          "218:             if ($lastbranchtable->timeseen > $attempt->timeseen) {",
          "220:                 if (!empty($lastbranchtable->nextpageid)) {",
          "221:                     $lastpageseen = $lastbranchtable->nextpageid;",
          "222:                 } else {",
          "229:             if (!empty($lastbranchtable->nextpageid)) {",
          "230:                 $lastpageseen = $lastbranchtable->nextpageid;",
          "231:             } else {",
          "233:                 $lastpageseen = $lastbranchtable->pageid;",
          "234:             }",
          "238:     if ((isset($lastpageseen) && ($lastpageseen != LESSON_EOL))) {",
          "239:         if (($DB->count_records('lesson_attempts', array('lessonid' => $lesson->id, 'userid' => $USER->id, 'retry' => $retries)) > 0)",
          "240:                 || $DB->count_records('lesson_branch', array(\"lessonid\" => $lesson->id, \"userid\" => $USER->id, \"retry\" => $retries)) > 0) {",
          "242:             echo $lessonoutput->header($lesson, $cm, '', false, null, get_string('leftduringtimedsession', 'lesson'));",
          "243:             if ($lesson->timed) {",
          "244:                 if ($lesson->retake) {",
          "245:                     $continuelink = new single_button(new moodle_url('/mod/lesson/view.php',",
          "246:                             array('id' => $cm->id, 'pageid' => $lesson->firstpageid, 'startlastseen' => 'no')),",
          "247:                             get_string('continue', 'lesson'), 'get');",
          "249:                     echo html_writer::div($lessonoutput->message(get_string('leftduringtimed', 'lesson'), $continuelink),",
          "250:                             'center leftduring');",
          "252:                 } else {",
          "253:                     $courselink = new single_button(new moodle_url('/course/view.php',",
          "254:                             array('id' => $PAGE->course->id)), get_string('returntocourse', 'lesson'), 'get');",
          "256:                     echo html_writer::div($lessonoutput->message(get_string('leftduringtimednoretake', 'lesson'), $courselink),",
          "257:                             'center leftduring');",
          "258:                 }",
          "260:                 echo $lessonoutput->continue_links($lesson, $lastpageseen);",
          "262:             echo $lessonoutput->footer();",
          "263:             exit();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e0551fc4515211577a0a4fee2e647ae2d176ea5",
      "candidate_info": {
        "commit_hash": "7e0551fc4515211577a0a4fee2e647ae2d176ea5",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/7e0551fc4515211577a0a4fee2e647ae2d176ea5",
        "files": [
          "mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "mod/lesson/db/upgrade.php",
          "mod/lesson/locallib.php",
          "mod/lesson/version.php"
        ],
        "message": "MDL-48880 mod_lesson: clean lesson_branch when a page is deleted",
        "before_after_code_files": [
          "mod/lesson/backup/moodle2/restore_lesson_stepslib.php||mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php",
          "mod/lesson/locallib.php||mod/lesson/locallib.php",
          "mod/lesson/version.php||mod/lesson/version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ],
          "candidate": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/lesson/backup/moodle2/restore_lesson_stepslib.php||mod/lesson/backup/moodle2/restore_lesson_stepslib.php": [
          "File: mod/lesson/backup/moodle2/restore_lesson_stepslib.php -> mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:         }",
          "276:         $badanswers->close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:         if ($DB->get_dbfamily() === 'mysql') {",
          "281:             $sql = \"DELETE {lesson_branch}",
          "282:                       FROM {lesson_branch}",
          "283:                  LEFT JOIN {lesson_pages}",
          "284:                         ON {lesson_branch}.pageid = {lesson_pages}.id",
          "285:                      WHERE {lesson_pages}.id IS NULL\";",
          "286:         } else {",
          "287:             $sql = \"DELETE FROM {lesson_branch}",
          "288:                WHERE NOT EXISTS (",
          "289:                          SELECT 'x' FROM {lesson_pages}",
          "290:                           WHERE {lesson_branch}.pageid = {lesson_pages}.id)\";",
          "291:         }",
          "293:         $DB->execute($sql);",
          "",
          "---------------"
        ],
        "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php": [
          "File: mod/lesson/db/upgrade.php -> mod/lesson/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:         upgrade_mod_savepoint(true, 2015031500, 'lesson');",
          "233:     }",
          "235:     return true;",
          "236: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:     if ($oldversion < 2015032700) {",
          "237:         if ($DB->get_dbfamily() === 'mysql') {",
          "238:             $sql = \"DELETE {lesson_branch}",
          "239:                       FROM {lesson_branch}",
          "240:                  LEFT JOIN {lesson_pages}",
          "241:                         ON {lesson_branch}.pageid = {lesson_pages}.id",
          "242:                      WHERE {lesson_pages}.id IS NULL\";",
          "243:         } else {",
          "244:             $sql = \"DELETE FROM {lesson_branch}",
          "245:                WHERE NOT EXISTS (",
          "246:                          SELECT 'x' FROM {lesson_pages}",
          "247:                           WHERE {lesson_branch}.pageid = {lesson_pages}.id)\";",
          "248:         }",
          "250:         $DB->execute($sql);",
          "253:         upgrade_mod_savepoint(true, 2015032700, 'lesson');",
          "254:     }",
          "",
          "---------------"
        ],
        "mod/lesson/locallib.php||mod/lesson/locallib.php": [
          "File: mod/lesson/locallib.php -> mod/lesson/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2035:         $DB->delete_records(\"lesson_attempts\", array(\"pageid\" => $this->properties->id));",
          "2037:         $DB->delete_records(\"lesson_answers\", array(\"pageid\" => $this->properties->id));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2037:         $DB->delete_records(\"lesson_branch\", array(\"pageid\" => $this->properties->id));",
          "",
          "---------------"
        ],
        "mod/lesson/version.php||mod/lesson/version.php": [
          "File: mod/lesson/version.php -> mod/lesson/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $plugin->requires  = 2014110400;    // Requires this Moodle version",
          "29: $plugin->component = 'mod_lesson'; // Full name of the plugin (used for diagnostics)",
          "30: $plugin->cron      = 0;",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2015032401;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2015032700;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7d1a37bdbf5857f7fe27b019b1c20c265158fba",
      "candidate_info": {
        "commit_hash": "c7d1a37bdbf5857f7fe27b019b1c20c265158fba",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/c7d1a37bdbf5857f7fe27b019b1c20c265158fba",
        "files": [
          "mod/lesson/db/upgrade.php",
          "mod/lesson/lib.php",
          "mod/lesson/version.php",
          "mod/lesson/view.php"
        ],
        "message": "MDL-18966 mod_lesson: Save attempts of practice lessons",
        "before_after_code_files": [
          "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php",
          "mod/lesson/lib.php||mod/lesson/lib.php",
          "mod/lesson/version.php||mod/lesson/version.php",
          "mod/lesson/view.php||mod/lesson/view.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ],
          "candidate": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php": [
          "File: mod/lesson/db/upgrade.php -> mod/lesson/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:         upgrade_mod_savepoint(true, 2015031500, 'lesson');",
          "233:     }",
          "235:     return true;",
          "236: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:     if ($oldversion < 2015032600) {",
          "239:         $DB->set_field('lesson', 'retake', 1, array('practice' => 1));",
          "242:         upgrade_mod_savepoint(true, 2015032600, 'lesson');",
          "243:     }",
          "",
          "---------------"
        ],
        "mod/lesson/lib.php||mod/lesson/lib.php": [
          "File: mod/lesson/lib.php -> mod/lesson/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "389:     global $CFG, $DB;",
          "390:     require_once($CFG->libdir.'/gradelib.php');",
          "393:         lesson_grade_item_update($lesson);",
          "395:     } else if ($grades = lesson_get_user_grades($lesson, $userid)) {",
          "",
          "[Removed Lines]",
          "392:     if ($lesson->grade == 0) {",
          "",
          "[Added Lines]",
          "392:     if ($lesson->grade == 0 || $lesson->practice) {",
          "",
          "---------------"
        ],
        "mod/lesson/version.php||mod/lesson/version.php": [
          "File: mod/lesson/version.php -> mod/lesson/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $plugin->requires  = 2014110400;    // Requires this Moodle version",
          "29: $plugin->component = 'mod_lesson'; // Full name of the plugin (used for diagnostics)",
          "30: $plugin->cron      = 0;",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2015032401;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2015032600;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "---------------"
        ],
        "mod/lesson/view.php||mod/lesson/view.php": [
          "File: mod/lesson/view.php -> mod/lesson/view.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "516:             $grade->userid = $USER->id;",
          "517:             $grade->grade = $gradeinfo->grade;",
          "518:             $grade->completed = time();",
          "529:                 }",
          "530:             } else {",
          "532:             }",
          "533:         } else {",
          "534:             if ($lesson->timelimit) {",
          "",
          "[Removed Lines]",
          "519:             if (!$lesson->practice) {",
          "520:                 if (isset($USER->modattempts[$lesson->id])) { // if reviewing, make sure update old grade record",
          "521:                     if (!$grades = $DB->get_records(\"lesson_grades\", array(\"lessonid\" => $lesson->id, \"userid\" => $USER->id), \"completed DESC\", '*', 0, 1)) {",
          "522:                         print_error('cannotfindgrade', 'lesson');",
          "523:                     }",
          "524:                     $oldgrade = array_shift($grades);",
          "525:                     $grade->id = $oldgrade->id;",
          "526:                     $DB->update_record(\"lesson_grades\", $grade);",
          "527:                 } else {",
          "528:                     $newgradeid = $DB->insert_record(\"lesson_grades\", $grade);",
          "531:                 $DB->delete_records(\"lesson_attempts\", array(\"lessonid\" => $lesson->id, \"userid\" => $USER->id, \"retry\" => $ntries));",
          "",
          "[Added Lines]",
          "519:             if (isset($USER->modattempts[$lesson->id])) { // If reviewing, make sure update old grade record.",
          "520:                 if (!$grades = $DB->get_records(\"lesson_grades\",",
          "521:                         array(\"lessonid\" => $lesson->id, \"userid\" => $USER->id), \"completed DESC\", '*', 0, 1)) {",
          "522:                     print_error('cannotfindgrade', 'lesson');",
          "524:                 $oldgrade = array_shift($grades);",
          "525:                 $grade->id = $oldgrade->id;",
          "526:                 $DB->update_record(\"lesson_grades\", $grade);",
          "528:                 $newgradeid = $DB->insert_record(\"lesson_grades\", $grade);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "538:                     $grade->userid = $USER->id;",
          "539:                     $grade->grade = 0;",
          "540:                     $grade->completed = time();",
          "544:                     $lessoncontent .= $lessonoutput->paragraph(get_string(\"eolstudentoutoftimenoanswers\", \"lesson\"));",
          "545:                 }",
          "546:             } else {",
          "",
          "[Removed Lines]",
          "541:                     if (!$lesson->practice) {",
          "542:                         $newgradeid = $DB->insert_record(\"lesson_grades\", $grade);",
          "543:                     }",
          "",
          "[Added Lines]",
          "538:                     $newgradeid = $DB->insert_record(\"lesson_grades\", $grade);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0967a20d02f4582b3eec4efcabaca92cc8c78702",
      "candidate_info": {
        "commit_hash": "0967a20d02f4582b3eec4efcabaca92cc8c78702",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/0967a20d02f4582b3eec4efcabaca92cc8c78702",
        "files": [
          "mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "mod/lesson/continue.php",
          "mod/lesson/db/install.xml",
          "mod/lesson/db/upgrade.php",
          "mod/lesson/lang/en/lesson.php",
          "mod/lesson/lib.php",
          "mod/lesson/locallib.php",
          "mod/lesson/mod_form.php",
          "mod/lesson/tests/behat/time_limit.feature",
          "mod/lesson/timer.js",
          "mod/lesson/version.php",
          "mod/lesson/view.php"
        ],
        "message": "Merge branch 'MDL-48962' of git://github.com/jmvedrine/moodle",
        "before_after_code_files": [
          "mod/lesson/backup/moodle2/backup_lesson_stepslib.php||mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "mod/lesson/backup/moodle2/restore_lesson_stepslib.php||mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "mod/lesson/continue.php||mod/lesson/continue.php",
          "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php",
          "mod/lesson/lang/en/lesson.php||mod/lesson/lang/en/lesson.php",
          "mod/lesson/lib.php||mod/lesson/lib.php",
          "mod/lesson/locallib.php||mod/lesson/locallib.php",
          "mod/lesson/mod_form.php||mod/lesson/mod_form.php",
          "mod/lesson/tests/behat/time_limit.feature||mod/lesson/tests/behat/time_limit.feature",
          "mod/lesson/timer.js||mod/lesson/timer.js",
          "mod/lesson/version.php||mod/lesson/version.php",
          "mod/lesson/view.php||mod/lesson/view.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ],
          "candidate": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/lesson/backup/moodle2/backup_lesson_stepslib.php||mod/lesson/backup/moodle2/backup_lesson_stepslib.php": [
          "File: mod/lesson/backup/moodle2/backup_lesson_stepslib.php -> mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:             'course', 'name', 'practice', 'modattempts', 'usepassword', 'password',",
          "73:             'dependency', 'conditions', 'grade', 'custom', 'ongoing', 'usemaxgrade',",
          "74:             'maxanswers', 'maxattempts', 'review', 'nextpagedefault', 'feedback',",
          "76:             'mediafile', 'mediaheight', 'mediawidth', 'mediaclose', 'slideshow',",
          "77:             'width', 'height', 'bgcolor', 'displayleft', 'displayleftif', 'progressbar',",
          "78:             'showhighscores', 'maxhighscores', 'available', 'deadline', 'timemodified',",
          "",
          "[Removed Lines]",
          "75:             'minquestions', 'maxpages', 'timed', 'maxtime', 'retake', 'activitylink',",
          "",
          "[Added Lines]",
          "75:             'minquestions', 'maxpages', 'timelimit', 'retake', 'activitylink',",
          "",
          "---------------"
        ],
        "mod/lesson/backup/moodle2/restore_lesson_stepslib.php||mod/lesson/backup/moodle2/restore_lesson_stepslib.php": [
          "File: mod/lesson/backup/moodle2/restore_lesson_stepslib.php -> mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:             $data->completionendreached = 0;",
          "78:         }",
          "81:         $newitemid = $DB->insert_record('lesson', $data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:         if (!isset($data->timelimit)) {",
          "82:             if (isset($data->timed) && isset($data->maxtime) && $data->timed) {",
          "83:                 $data->timelimit = 60 * $data->maxtime;",
          "84:             } else {",
          "85:                 $data->timelimit = 0;",
          "86:             }",
          "87:         }",
          "",
          "---------------"
        ],
        "mod/lesson/continue.php||mod/lesson/continue.php": [
          "File: mod/lesson/continue.php -> mod/lesson/continue.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: if (!$canmanage) {",
          "51:     $lesson->displayleft = lesson_displayleftif($lesson);",
          "52:     $timer = $lesson->update_timer();",
          "55:         if ($timeleft <= 0) {",
          "57:             $lesson->add_message(get_string('eolstudentoutoftime', 'lesson'));",
          "",
          "[Removed Lines]",
          "53:     if ($lesson->timed) {",
          "54:         $timeleft = ($timer->starttime + $lesson->maxtime * 60) - time();",
          "",
          "[Added Lines]",
          "53:     if ($lesson->timelimit) {",
          "54:         $timeleft = ($timer->starttime + $lesson->timelimit) - time();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:         $lesson->add_message(get_string(\"teacherjumpwarning\", \"lesson\", $warningvars));",
          "158:     }",
          "161:         $lesson->add_message(get_string(\"teachertimerwarning\", \"lesson\"));",
          "162:     }",
          "163: }",
          "",
          "[Removed Lines]",
          "160:     if ($lesson->timed) {",
          "",
          "[Added Lines]",
          "160:     if ($lesson->timelimit) {",
          "",
          "---------------"
        ],
        "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php": [
          "File: mod/lesson/db/upgrade.php -> mod/lesson/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:         upgrade_mod_savepoint(true, 2015030301, 'lesson');",
          "179:     }",
          "181:     return true;",
          "182: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:     if ($oldversion < 2015030400) {",
          "184:         $table = new xmldb_table('lesson');",
          "185:         $field = new xmldb_field('timelimit', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0', 'maxpages');",
          "188:         if (!$dbman->field_exists($table, $field)) {",
          "189:             $dbman->add_field($table, $field);",
          "190:         }",
          "193:         upgrade_mod_savepoint(true, 2015030400, 'lesson');",
          "194:     }",
          "196:     if ($oldversion < 2015030401) {",
          "199:         $table = new xmldb_table('lesson');",
          "200:         $oldfield = new xmldb_field('maxtime');",
          "201:         $newfield = new xmldb_field('timelimit');",
          "202:         if ($dbman->field_exists($table, $oldfield) && $dbman->field_exists($table, $newfield)) {",
          "203:             $sql = 'UPDATE {lesson} SET timelimit = 60 * maxtime';",
          "204:             $DB->execute($sql);",
          "206:             $dbman->drop_field($table, $oldfield);",
          "207:         }",
          "209:         $oldfield = new xmldb_field('timed');",
          "210:         if ($dbman->field_exists($table, $oldfield) && $dbman->field_exists($table, $newfield)) {",
          "212:             $DB->set_field_select('lesson', 'timelimit', 0, 'timed = 0');",
          "214:             $dbman->drop_field($table, $oldfield);",
          "215:         }",
          "217:         upgrade_mod_savepoint(true, 2015030401, 'lesson');",
          "218:     }",
          "",
          "---------------"
        ],
        "mod/lesson/lang/en/lesson.php||mod/lesson/lang/en/lesson.php": [
          "File: mod/lesson/lang/en/lesson.php -> mod/lesson/lang/en/lesson.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "261: $string['maximumnumberofattempts'] = 'Maximum number of attempts';",
          "262: $string['maximumnumberofattempts_help'] = 'This setting specifies the maximum number of attempts allowed for each question. If answered incorrectly repeatedly, when the maximum is reached, the next page of the lesson is displayed.';",
          "263: $string['maximumnumberofattemptsreached'] = 'Maximum number of attempts reached - Moving to next page';",
          "266: $string['mediaclose'] = 'Show close button:';",
          "267: $string['mediafile'] = 'File pop-up';",
          "268: $string['mediafile_help'] = 'To include a pop-up window at the beginning of a lesson, choose the appropriate file to display. Every lesson page will include a link to re-open the pop-up if necessary.';",
          "",
          "[Removed Lines]",
          "264: $string['maxtime'] = 'Time limit (minutes)';",
          "265: $string['maxtimewarning'] = 'You have {$a} minute(s) to finish the lesson.';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435: $string['thefollowingpagesjumptothispage'] = 'The following pages jump to this page';",
          "436: $string['thispage'] = 'This page';",
          "437: $string['timeisup'] = 'Time is up';",
          "438: $string['timeremaining'] = 'Time remaining';",
          "439: $string['timespenterror'] = 'Spend at least {$a} minutes in the lesson';",
          "440: $string['timespentminutes'] = 'Time spent (minutes)';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436: $string['timelimit'] = 'Time limit';",
          "437: $string['timelimit_help'] = 'If enabled, a warning about the time limit is displayed at the beginning of the lesson and a countdown timer is displayed. Answer given after time is elapsed aren\\'t graded';",
          "438: $string['timelimitwarning'] = 'You have {$a} to finish the lesson.';",
          "",
          "---------------"
        ],
        "mod/lesson/lib.php||mod/lesson/lib.php": [
          "File: mod/lesson/lib.php -> mod/lesson/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:     $lesson->timemodified = time();",
          "528:     }",
          "529:     if (empty($lesson->timespent) or !is_numeric($lesson->timespent) or $lesson->timespent < 0) {",
          "530:         $lesson->timespent = 0;",
          "",
          "[Removed Lines]",
          "526:     if (empty($lesson->timed)) {",
          "527:         $lesson->timed = 0;",
          "",
          "[Added Lines]",
          "526:     if (empty($lesson->timelimit)) {",
          "527:         $lesson->timelimit = 0;",
          "",
          "---------------"
        ],
        "mod/lesson/locallib.php||mod/lesson/locallib.php": [
          "File: mod/lesson/locallib.php -> mod/lesson/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "486: function lesson_clock_block_contents($cmid, $lesson, $timer, $page) {",
          "488:     $context = context_module::instance($cmid);",
          "490:         return null;",
          "491:     }",
          "",
          "[Removed Lines]",
          "489:     if(!$lesson->timed || has_capability('mod/lesson:manage', $context)) {",
          "",
          "[Added Lines]",
          "489:     if ($lesson->timelimit == 0 || has_capability('mod/lesson:manage', $context)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "494:     $content .=  $lesson->time_remaining($timer->starttime);",
          "495:     $content .= '</div>';",
          "498:     $page->requires->data_for_js('clocksettings', $clocksettings, true);",
          "499:     $page->requires->strings_for_js(array('timeisup'), 'lesson');",
          "500:     $page->requires->js('/mod/lesson/timer.js');",
          "",
          "[Removed Lines]",
          "497:     $clocksettings = array('starttime'=>$timer->starttime, 'servertime'=>time(),'testlength'=>($lesson->maxtime * 60));",
          "",
          "[Added Lines]",
          "497:     $clocksettings = array('starttime' => $timer->starttime, 'servertime' => time(), 'testlength' => $lesson->timelimit);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1241:         $startlesson->starttime = time();",
          "1242:         $startlesson->lessontime = time();",
          "1243:         $DB->insert_record('lesson_timer', $startlesson);",
          "1246:         }",
          "1247:         return true;",
          "1248:     }",
          "",
          "[Removed Lines]",
          "1244:         if ($this->properties->timed) {",
          "1245:             $this->add_message(get_string('maxtimewarning', 'lesson', $this->properties->maxtime), 'center');",
          "",
          "[Added Lines]",
          "1244:         if ($this->properties->timelimit) {",
          "1245:             $this->add_message(get_string('timelimitwarning', 'lesson', format_time($this->properties->timelimit)), 'center');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1414:     public function time_remaining($starttime) {",
          "1416:         $hours = floor($timeleft/3600);",
          "1417:         $timeleft = $timeleft - ($hours * 3600);",
          "1418:         $minutes = floor($timeleft/60);",
          "",
          "[Removed Lines]",
          "1415:         $timeleft = $starttime + $this->maxtime * 60 - time();",
          "",
          "[Added Lines]",
          "1415:         $timeleft = $starttime + $this->timelimit - time();",
          "",
          "---------------"
        ],
        "mod/lesson/mod_form.php||mod/lesson/mod_form.php": [
          "File: mod/lesson/mod_form.php -> mod/lesson/mod_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:         $mform->addElement('date_time_selector', 'deadline', get_string('deadline', 'lesson'), array('optional'=>true));",
          "172:         $mform->setDefault('deadline', 0);",
          "191:         $mform->addElement('selectyesno', 'usepassword', get_string('usepassword', 'lesson'));",
          "192:         $mform->addHelpButton('usepassword', 'usepassword', 'lesson');",
          "",
          "[Removed Lines]",
          "175:         $timedgrp = array();",
          "176:         $timedgrp[] = &$mform->createElement('text', 'maxtime');",
          "177:         $timedgrp[] = &$mform->createElement('checkbox', 'timed', '', get_string('enable'));",
          "178:         $mform->addGroup($timedgrp, 'timedgrp', get_string('maxtime', 'lesson'), array(' '), false);",
          "179:         $mform->disabledIf('timedgrp', 'timed');",
          "182:         $timedgrprules = array();",
          "183:         $timedgrprules['maxtime'][] = array(null, 'numeric', null, 'client');",
          "184:         $mform->addGroupRule('timedgrp', $timedgrprules);",
          "187:         $mform->setDefault('timed', 0);",
          "188:         $mform->setDefault('maxtime', 20);",
          "189:         $mform->setType('maxtime', PARAM_INT);",
          "",
          "[Added Lines]",
          "175:         $mform->addElement('duration', 'timelimit', get_string('timelimit', 'lesson'),",
          "176:                 array('optional' => true));",
          "177:         $mform->addHelpButton('timelimit', 'timelimit', 'lesson');",
          "178:         $mform->setDefault('timelimit', 1200);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:     function validation($data, $files) {",
          "335:         $errors = parent::validation($data, $files);",
          "340:         if (!empty($data['usepassword']) && empty($data['password'])) {",
          "341:             $errors['password'] = get_string('emptypassword', 'lesson');",
          "342:         }",
          "",
          "[Removed Lines]",
          "337:         if (empty($data['maxtime']) and !empty($data['timed'])) {",
          "338:             $errors['timedgrp'] = get_string('err_numeric', 'form');",
          "339:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/tests/behat/time_limit.feature||mod/lesson/tests/behat/time_limit.feature": [
          "File: mod/lesson/tests/behat/time_limit.feature -> mod/lesson/tests/behat/time_limit.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     And I add a \"Lesson\" to section \"1\" and I fill the form with:",
          "24:       | Name | Test lesson |",
          "25:       | Description | Test lesson description |",
          "28:     And I follow \"Test lesson\"",
          "29:     And I follow \"Add a content page\"",
          "30:     And I set the following fields to these values:",
          "",
          "[Removed Lines]",
          "26:       | timed | 1 |",
          "27:       | maxtime | 1 |",
          "",
          "[Added Lines]",
          "26:       | timelimit | 60 |",
          "",
          "---------------"
        ],
        "mod/lesson/timer.js||mod/lesson/timer.js": [
          "File: mod/lesson/timer.js -> mod/lesson/timer.js"
        ],
        "mod/lesson/version.php||mod/lesson/version.php": [
          "File: mod/lesson/version.php -> mod/lesson/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $plugin->requires  = 2014110400;    // Requires this Moodle version",
          "29: $plugin->component = 'mod_lesson'; // Full name of the plugin (used for diagnostics)",
          "30: $plugin->cron      = 0;",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2015030301;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2015030401;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "---------------"
        ],
        "mod/lesson/view.php||mod/lesson/view.php": [
          "File: mod/lesson/view.php -> mod/lesson/view.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:                 || $DB->count_records('lesson_branch', array(\"lessonid\" => $lesson->id, \"userid\" => $USER->id, \"retry\" => $retries)) > 0) {",
          "242:             echo $lessonoutput->header($lesson, $cm, '', false, null, get_string('leftduringtimedsession', 'lesson'));",
          "244:                 if ($lesson->retake) {",
          "245:                     $continuelink = new single_button(new moodle_url('/mod/lesson/view.php',",
          "246:                             array('id' => $cm->id, 'pageid' => $lesson->firstpageid, 'startlastseen' => 'no')),",
          "",
          "[Removed Lines]",
          "243:             if ($lesson->timed) {",
          "",
          "[Added Lines]",
          "243:             if ($lesson->timelimit) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:         $restart  = ($continue && $startlastseen == 'yes');",
          "326:         $timer = $lesson->update_timer($continue, $restart);",
          "330:             if ($timeleft <= 0) {",
          "332:                 $lesson->add_message(get_string('eolstudentoutoftime', 'lesson'));",
          "",
          "[Removed Lines]",
          "328:         if ($lesson->timed) {",
          "329:             $timeleft = ($timer->starttime + $lesson->maxtime * 60) - time();",
          "",
          "[Added Lines]",
          "328:         if ($lesson->timelimit) {",
          "329:             $timeleft = $timer->starttime + $lesson->timelimit - time();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "363:         }",
          "364:     } else {",
          "365:         $timer = null;",
          "367:             $lesson->add_message(get_string('teachertimerwarning', 'lesson'));",
          "368:         }",
          "369:         if (lesson_display_teacher_warning($lesson)) {",
          "",
          "[Removed Lines]",
          "366:         if ($lesson->timed) {",
          "",
          "[Added Lines]",
          "366:         if ($lesson->timelimit) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "510:                 $DB->delete_records(\"lesson_attempts\", array(\"lessonid\" => $lesson->id, \"userid\" => $USER->id, \"retry\" => $ntries));",
          "511:             }",
          "512:         } else {",
          "514:                 if ($outoftime == 'normal') {",
          "515:                     $grade = new stdClass();",
          "516:                     $grade->lessonid = $lesson->id;",
          "",
          "[Removed Lines]",
          "513:             if ($lesson->timed) {",
          "",
          "[Added Lines]",
          "513:             if ($lesson->timelimit) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}