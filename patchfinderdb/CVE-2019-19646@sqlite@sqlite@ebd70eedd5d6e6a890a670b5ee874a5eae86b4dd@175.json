{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "be812624006aa7ca3acef17161ed6ea8de24d004",
      "candidate_info": {
        "commit_hash": "be812624006aa7ca3acef17161ed6ea8de24d004",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/be812624006aa7ca3acef17161ed6ea8de24d004",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/intreal.test"
        ],
        "message": "Always store a REAL value in a column with REAL affinity if the integer equivalent would require 8 bytes of storage. Fix for [3c27b97e3].\n\nFossilOrigin-Name: 14c00b1016ba53ab2dc177c59a27b6b9209202973685f0f274112d296ba7dfcb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/intreal.test||test/intreal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1eb2a628e4bfae51fea43e8f40fedfe23f2118024d9cce35828c3cbe92a9b392",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2884:     pRec = pData0;",
          "2885:     do{",
          "2886:       applyAffinity(pRec, zAffinity[0], encoding);",
          "2887:       REGISTER_TRACE((int)(pRec-aMem), pRec);",
          "2888:       zAffinity++;",
          "2889:       pRec++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2887:       if( zAffinity[0]==SQLITE_AFF_REAL && (pRec->flags & MEM_Int) ){",
          "2888:         pRec->flags |= MEM_IntReal;",
          "2889:         pRec->flags &= ~(MEM_Int);",
          "2890:       }",
          "",
          "---------------"
        ],
        "test/intreal.test||test/intreal.test": [
          "File: test/intreal.test -> test/intreal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:          max(1,intreal(5),intreal(3),4);",
          "47: } {5.0 5.0}",
          "52: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #-------------------------------------------------------------------------",
          "50: do_execsql_test 2.1 {",
          "51:   CREATE TABLE t2(a REAL);",
          "52:   INSERT INTO t2 VALUES( 836627109860825358 );",
          "53:   SELECT substr(a,1,4) FROM t2 WHERE a = CAST(836627109860825358 AS REAL);",
          "54: } {8.36}",
          "56: do_execsql_test 2.2 {",
          "57:   CREATE INDEX i2 ON t2(a);",
          "58:   SELECT substr(a,1,4) FROM t2 WHERE a = CAST(836627109860825358 AS REAL);",
          "59: } {8.36}",
          "61: do_execsql_test 2.3 {",
          "62:   CREATE TABLE t0 (c0);",
          "63:   CREATE TABLE t1 (c1 REAL);",
          "64:   INSERT INTO t1(c1) VALUES (8366271098608253588);",
          "65:   INSERT INTO t0(c0) VALUES ('a');",
          "66: }",
          "67: set D [db one {SELECT c1 FROM t1}]",
          "69: do_execsql_test 2.4 {",
          "70:   SELECT * FROM t1 WHERE (t1.c1 = CAST(8366271098608253588 AS REAL));",
          "71: } $D",
          "73: do_execsql_test 2.5 {",
          "74:   SELECT * FROM t0, t1 WHERE (t1.c1 = CAST(8366271098608253588 AS REAL));",
          "75: } [list a $D]",
          "77: do_execsql_test 2.6 {",
          "78:   SELECT * FROM t0, t1",
          "79:   WHERE (",
          "80:         t1.c1 >= CAST(8366271098608253588 AS REAL)",
          "81:     AND t1.c1 <= CAST(8366271098608253588 AS REAL)",
          "82:   );",
          "83: } [list a $D]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39e04f83b95f9ab6b2f579c1da716ab051c5b054",
      "candidate_info": {
        "commit_hash": "39e04f83b95f9ab6b2f579c1da716ab051c5b054",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39e04f83b95f9ab6b2f579c1da716ab051c5b054",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a problem in the \".recover\" command allowing a circular loop of b-tree pages in a database file to cause an infinite loop.\n\nFossilOrigin-Name: 8d2a062eb8a3e6fdc6a61b571c8da0070382bf208c53e797151eac8679c975a1",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:   return (a[0]<<8)|a[1];",
          "302: }",
          "303: static unsigned int get_uint32(unsigned char *a){",
          "305: }",
          "",
          "[Removed Lines]",
          "304:   return (a[0]<<24)|(a[1]<<16)|(a[2]<<8)|a[3];",
          "",
          "[Added Lines]",
          "304:   return ((unsigned int)a[0]<<24)",
          "305:        | ((unsigned int)a[1]<<16)",
          "306:        | ((unsigned int)a[2]<<8)",
          "307:        | ((unsigned int)a[3]);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f22c7e229ea4626c5268d61de3964521cf6a2735290cbd1518d68731ba6cca90",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6633:     \"  SELECT i, maxlen, NULL, (\"",
          "6634:     \"    WITH p(orig, pgno, parent) AS (\"",
          "6635:     \"      SELECT 0, i, (SELECT pgno FROM recovery.dbptr WHERE child=i)\"",
          "6637:     \"      SELECT i, p.parent, \"",
          "6638:     \"        (SELECT pgno FROM recovery.dbptr WHERE child=p.parent) FROM p\"",
          "6639:     \"    )\"",
          "",
          "[Removed Lines]",
          "6636:     \"        UNION ALL\"",
          "",
          "[Added Lines]",
          "6636:     \"        UNION \"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3756d59bc3bc788b5c5c5c1ca5463b883a5150d6",
      "candidate_info": {
        "commit_hash": "3756d59bc3bc788b5c5c5c1ca5463b883a5150d6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3756d59bc3bc788b5c5c5c1ca5463b883a5150d6",
        "files": [
          "README.md",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update the README.md file at the top level to talk about how to deal with version names and how to verify the code in Git mirrors.\n\nFossilOrigin-Name: e8c87a0ac1bf434c12a8ab602e7913a89a51898e818f30fa541a9b5708864212",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1d801a3b2c48dc8a918d6da047bc877acf033d5f5c4e1d4b412ba7678ed6f8b3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "666a42ffb3ad492e049ad3e1020299218f66a53b",
      "candidate_info": {
        "commit_hash": "666a42ffb3ad492e049ad3e1020299218f66a53b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/666a42ffb3ad492e049ad3e1020299218f66a53b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Minor performance improvement for balance_nonroot().\n\nFossilOrigin-Name: d7434cae3edc321e2f1f8d340a0e656b1613b736f8400fb271a0e80f59401b9e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 156d612800a7282fe0ebb20feb31d3fd577f4ab60fab8c00940c87143997aefb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6992:   while( 1 /*Exit by break*/ ){",
          "6993:     int sz, rc;",
          "6994:     u8 *pSlot;",
          "6996:     if( (aData[1]==0 && aData[2]==0) || (pSlot = pageFindSlot(pPg,sz,&rc))==0 ){",
          "6997:       if( (pData - pBegin)<sz ) return 1;",
          "6998:       pData -= sz;",
          "",
          "[Removed Lines]",
          "6995:     sz = cachedCellSize(pCArray, i);",
          "",
          "[Added Lines]",
          "6995:     assert( pCArray->szCell[i]!=0 );",
          "6996:     sz = pCArray->szCell[i];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7153:         memmove(&pCellptr[2], pCellptr, (nCell - iCell) * 2);",
          "7154:       }",
          "7155:       nCell++;",
          "7156:       if( pageInsertArray(",
          "7157:             pPg, pBegin, &pData, pCellptr,",
          "7158:             iCell+iNew, 1, pCArray",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7157:       cachedCellSize(pCArray, iCell+iNew);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d4e720579192f378a3e407e390010de38bfcdcd",
      "candidate_info": {
        "commit_hash": "2d4e720579192f378a3e407e390010de38bfcdcd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2d4e720579192f378a3e407e390010de38bfcdcd",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5update.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Have fts5 reject attempts to insert a non-integer, non-null value into a rowid column with SQLITE_MISMATCH.\n\nFossilOrigin-Name: 4a9483f81e9ca1aa41d6ca33cb3171370418ccc71fdee9741bbf6f694bf4fbaa",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5update.test||ext/fts5/test/fts5update.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1498:   assert( pVtab->zErrMsg==0 );",
          "1499:   assert( nArg==1 || nArg==(2+pConfig->nCol+2) );",
          "1503:   );",
          "1504:   assert( pTab->pConfig->pzErrmsg==0 );",
          "1505:   pTab->pConfig->pzErrmsg = &pTab->base.zErrMsg;",
          "",
          "[Removed Lines]",
          "1500:   assert( nArg==1",
          "1501:       || sqlite3_value_type(apVal[1])==SQLITE_INTEGER",
          "1502:       || sqlite3_value_type(apVal[1])==SQLITE_NULL",
          "",
          "[Added Lines]",
          "1500:   assert( sqlite3_value_type(apVal[0])==SQLITE_INTEGER",
          "1501:        || sqlite3_value_type(apVal[0])==SQLITE_NULL",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1556:       rc = sqlite3Fts5StorageDelete(pTab->pStorage, iDel, 0);",
          "1557:     }",
          "1567:       }",
          "1585:             rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1586:           }",
          "1590:         }",
          "1594:       }",
          "1595:     }",
          "1596:   }",
          "",
          "[Removed Lines]",
          "1560:     else if( eType0!=SQLITE_INTEGER ){",
          "1562:       if( eConflict==SQLITE_REPLACE",
          "1563:        && sqlite3_value_type(apVal[1])==SQLITE_INTEGER",
          "1564:       ){",
          "1566:         rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1568:       fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1569:     }",
          "1572:     else{",
          "1575:       if( iOld!=iNew ){",
          "1576:         if( eConflict==SQLITE_REPLACE ){",
          "1577:           rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1578:           if( rc==SQLITE_OK ){",
          "1579:             rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1580:           }",
          "1581:           fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1582:         }else{",
          "1583:           rc = sqlite3Fts5StorageContentInsert(pTab->pStorage, apVal, pRowid);",
          "1584:           if( rc==SQLITE_OK ){",
          "1587:           if( rc==SQLITE_OK ){",
          "1588:             rc = sqlite3Fts5StorageIndexInsert(pTab->pStorage, apVal, *pRowid);",
          "1589:           }",
          "1591:       }else{",
          "1592:         rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1593:         fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "",
          "[Added Lines]",
          "1559:     else{",
          "1560:       int eType1 = sqlite3_value_numeric_type(apVal[1]);",
          "1562:       if( eType1!=SQLITE_INTEGER && eType1!=SQLITE_NULL ){",
          "1563:         rc = SQLITE_MISMATCH;",
          "1566:       else if( eType0!=SQLITE_INTEGER ){",
          "1568:         if( eConflict==SQLITE_REPLACE && eType1==SQLITE_INTEGER ){",
          "1570:           rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1571:         }",
          "1572:         fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1573:       }",
          "1576:       else{",
          "1579:         if( eType1==SQLITE_INTEGER && iOld!=iNew ){",
          "1580:           if( eConflict==SQLITE_REPLACE ){",
          "1582:             if( rc==SQLITE_OK ){",
          "1583:               rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1584:             }",
          "1585:             fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1586:           }else{",
          "1587:             rc = sqlite3Fts5StorageContentInsert(pTab->pStorage, apVal, pRowid);",
          "1588:             if( rc==SQLITE_OK ){",
          "1589:               rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1590:             }",
          "1591:             if( rc==SQLITE_OK ){",
          "1592:               rc = sqlite3Fts5StorageIndexInsert(pTab->pStorage, apVal,*pRowid);",
          "1593:             }",
          "1595:         }else{",
          "1596:           rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1597:           fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5update.test||ext/fts5/test/fts5update.test": [
          "File: ext/fts5/test/fts5update.test -> ext/fts5/test/fts5update.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   }",
          "135: } {}",
          "138: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: do_execsql_test 4.0 {",
          "138:   CREATE VIRTUAL TABLE x4 USING fts5(a, detail=%DETAIL%);",
          "139:   INSERT INTO x4 VALUES('one two three');",
          "140:   INSERT INTO x4(rowid, a) VALUES('2', 'one two three');",
          "141:   INSERT INTO x4(rowid, a) VALUES('3.0', 'one two three');",
          "142: }",
          "143: do_catchsql_test 4.1 {",
          "144:   INSERT INTO x4(rowid, a) VALUES('four', 'one two three');",
          "145: } {1 {datatype mismatch}}",
          "147: do_catchsql_test 4.2 {",
          "148:   UPDATE x4 SET rowid = 'four' WHERE rowid=1;",
          "149: } {1 {datatype mismatch}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1caff0fb0b2051e205e7a8cfd5dadf92680c52a88a441ded95b1ea6542db5f83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}