{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8eaf565febd3c1cce858b723859bf2aaff950643",
      "candidate_info": {
        "commit_hash": "8eaf565febd3c1cce858b723859bf2aaff950643",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8eaf565febd3c1cce858b723859bf2aaff950643",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/dbstat.c"
        ],
        "message": "Improved database corruption detection in the dbstat virtual table.\n\nFossilOrigin-Name: fc5ecc88f8a0855ba90039177ee284721b2035e4de56a1024e323216f011f0af",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/dbstat.c||src/dbstat.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9d4c156fa26f80bb8f88b6ad8f24520a15af296de9c110604f6bd42c257455a0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:     }",
          "533:     pCsr->iPage++;",
          "534:     assert( p==&pCsr->aPage[pCsr->iPage-1] );",
          "536:     if( p->iCell==p->nCell ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534:     if( pCsr->iPage>=ArraySize(pCsr->aPage) ){",
          "535:       statResetCsr(pCsr);",
          "536:       return SQLITE_CORRUPT_BKPT;",
          "537:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19d4175d6570133bbde56d12ea51e121a0ec2af6",
      "candidate_info": {
        "commit_hash": "19d4175d6570133bbde56d12ea51e121a0ec2af6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/19d4175d6570133bbde56d12ea51e121a0ec2af6",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "manifest",
          "manifest.uuid",
          "test/fts4aa.test"
        ],
        "message": "Improved detection of corruption in the %_stat table of FTS4. Chromium ticket 1025467.\n\nFossilOrigin-Name: 10f8a3b718e0f47be528fba086c318e1dfe18ead383d01cfa24dedabad41e0a2",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "manifest.uuid||manifest.uuid",
          "test/fts4aa.test||test/fts4aa.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1065:   }",
          "1066:   pEnd = a + n;",
          "1067:   a += sqlite3Fts3GetVarintBounded(a, pEnd, &nDoc);",
          "1069:     return FTS_CORRUPT_VTAB;",
          "1070:   }",
          "1073:   if( paLen ) *paLen = a;",
          "1074:   if( ppEnd ) *ppEnd = pEnd;",
          "",
          "[Removed Lines]",
          "1068:   if( nDoc==0 || a>pEnd ){",
          "",
          "[Added Lines]",
          "1068:   if( nDoc<=0 || a>pEnd ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ed57c48e4bb337810521bda2da79614313e4835a317ca4eadb52bd67e4eadf98",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4aa.test||test/fts4aa.test": [
          "File: test/fts4aa.test -> test/fts4aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:   SELECT quote(matchinfo(t1,'a')) FROM t1 WHERE t1 MATCH 'one two';",
          "227: } {1 {database disk image is malformed}}",
          "232: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: # 2019-11-18 https://bugs.chromium.org/p/chromium/issues/detail?id=1025467",
          "230: db close",
          "231: sqlite3 db :memory:",
          "232: do_execsql_test fts4aa-6.10 {",
          "233:   CREATE VIRTUAL TABLE f USING fts4();",
          "234:   INSERT INTO f_segdir VALUES (77,91,0,0,'255 77',x'0001308000004d5c4ddddddd4d4d7b4d4d4d614d8019ff4d05000001204d4d2e4d6e4d4d4d4b4d6c4d004d4d4d4d4d4d3d000000004d5d4d4d645d4d004d4d4d4d4d4d4d4d4d454d6910004d05ffff054d646c4d004d5d4d4d4d4d3d000000004d4d4d4d4d4d4d4d4d4d4d69624d4d4d04004d4d4d4d4d604d4ce1404d554d45');",
          "235:   INSERT INTO f_segdir VALUES (77,108,0,0,'255 77',x'0001310000fa64004d4d4d3c5d4d654d4d4d614d8000ff4d05000001204d4d2e4d6e4d4d4dff4d4d4d4d4d4d00104d4d4d4d000000004d4d4d0400311d4d4d4d4d4d4d4d4d4d684d6910004d05ffff054d4d6c4d004d4d4d4d4d4d3d000000004d4d4d4d644d4d4d4d4d4d69624d4d4d03ed4d4d4d4d4d604d4ce1404d550080');",
          "236:   INSERT INTO f_stat VALUES (0,x'80808080100000000064004d4d4d3c4d4d654d4d4d614d8000ff4df6ff1a00204d4d2e4d6e4d4d4d104d4d4d4d4d4d00104d4d4d4d4d4d69574d4d4d000031044d4d4d3e4d4d4c4d05004d6910');",
          "237:   SELECT quote(matchinfo(f,'pnax')) from f where f match '0 1';",
          "238: } {X'0200000000000000000000000E0000000E00000001000000010000000100000001000000'}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a79a0e733faf76a1dd47f094665b2a1960858e4a",
      "candidate_info": {
        "commit_hash": "a79a0e733faf76a1dd47f094665b2a1960858e4a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a79a0e733faf76a1dd47f094665b2a1960858e4a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "test/distinct2.test"
        ],
        "message": "When using an index for both DISTINCT and ORDER BY, do not confuse the number of columns required for distinctness with the number required to get the correct sort order. Fix for [6749cb3c].\n\nFossilOrigin-Name: b47169319ad88e8ffdbe8fbb91f4cced81ebd5c0ee1b018be2d0256c9a1c5159",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "test/distinct2.test||test/distinct2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6bfa44da226fd758a2ee924d1e8e3a742b0635b6d3f922a4a7919cb14b2418e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3695:     if( pLoop->wsFlags & WHERE_VIRTUALTABLE ){",
          "3696:       if( pLoop->u.vtab.isOrdered ) obSat = obDone;",
          "3697:       break;",
          "3700:     }",
          "3701:     iCur = pWInfo->pTabList->a[pLoop->iTab].iCursor;",
          "",
          "[Removed Lines]",
          "3698:     }else{",
          "3699:       pLoop->u.btree.nIdxCol = 0;",
          "",
          "[Added Lines]",
          "3698:     }else if( wctrlFlags & WHERE_DISTINCTBY ){",
          "3699:       pLoop->u.btree.nDistinctCol = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3838:             pColl = sqlite3ExprNNCollSeq(pWInfo->pParse, pOrderBy->a[i].pExpr);",
          "3839:             if( sqlite3StrICmp(pColl->zName, pIndex->azColl[j])!=0 ) continue;",
          "3840:           }",
          "3842:           isMatch = 1;",
          "3843:           break;",
          "3844:         }",
          "",
          "[Removed Lines]",
          "3841:           pLoop->u.btree.nIdxCol = j+1;",
          "",
          "[Added Lines]",
          "3841:           if( wctrlFlags & WHERE_DISTINCTBY ){",
          "3842:             pLoop->u.btree.nDistinctCol = j+1;",
          "3843:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5160:        && (pLoop->wsFlags & WHERE_INDEXED)!=0",
          "5161:        && (pIdx = pLoop->u.btree.pIndex)->hasStat1",
          "5163:        && pIdx->aiRowLogEst[n]>=36",
          "5164:       ){",
          "5165:         int r1 = pParse->nMem+1;",
          "",
          "[Removed Lines]",
          "5162:        && (n = pLoop->u.btree.nIdxCol)>0",
          "",
          "[Added Lines]",
          "5164:        && (n = pLoop->u.btree.nDistinctCol)>0",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "test/distinct2.test||test/distinct2.test": [
          "File: test/distinct2.test -> test/distinct2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:   SELECT DISTINCT a FROM t1, t2 WHERE x=b;",
          "230: } {1 1}",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232: #-------------------------------------------------------------------------",
          "233: reset_db",
          "235: do_execsql_test 2000 {",
          "236:   CREATE TABLE t0 (c0, c1, c2, PRIMARY KEY (c0, c1));",
          "237:   CREATE TABLE t1 (c2);",
          "238:   INSERT INTO t0(c2) VALUES (0),(1),(3),(4),(5),(6),(7),(8),(9),(10),(11);",
          "239:   INSERT INTO t0(c1) VALUES ('a');",
          "240:   INSERT INTO t1(c2) VALUES (0);",
          "241: }",
          "242: do_execsql_test 2010 {",
          "243:   SELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ORDER BY t0.c0;",
          "244: } {{} 1 {} {} 1 a}",
          "245: do_execsql_test 1.2 {",
          "246:   ANALYZE;",
          "247: }",
          "248: do_execsql_test 2020 {",
          "249:   SELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ORDER BY t0.c0;",
          "250: } {{} 1 {} {} 1 a}",
          "253: do_execsql_test 2030 {",
          "254:   CREATE TABLE t2(a, b, c);",
          "255:   CREATE INDEX t2ab ON t2(a, b);",
          "257:   WITH c(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM c WHERE i<64)",
          "258:     INSERT INTO t2 SELECT 'one', i%2, 'one' FROM c;",
          "260:   WITH c(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM c WHERE i<64)",
          "261:     INSERT INTO t2 SELECT 'two', i%2, 'two' FROM c;",
          "263:   CREATE TABLE t3(x INTEGER PRIMARY KEY);",
          "264:   INSERT INTO t3 VALUES(1);",
          "266:   ANALYZE;",
          "267: }",
          "268: do_execsql_test 2040 {",
          "269:   SELECT DISTINCT a, b, x FROM t3 CROSS JOIN t2 ORDER BY a;",
          "270: } {",
          "271:   one 0 1",
          "272:   one 1 1",
          "273:   two 0 1",
          "274:   two 1 1",
          "275: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05d7bfd0bbc884da273bc6cf9862236b80390974",
      "candidate_info": {
        "commit_hash": "05d7bfd0bbc884da273bc6cf9862236b80390974",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/05d7bfd0bbc884da273bc6cf9862236b80390974",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "test/func.test"
        ],
        "message": "Fix the round() SQL function so that it handles infinities correctly.\n\nFossilOrigin-Name: db9acef14d49212108c8082cc15a9b9b4a56b8afe4fe1104ddf62783739c1fbe",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "test/func.test||test/func.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1dfc95b8673b0e8c9ef5040c2fa0fbe9846e430d104e9b83f3f1f3ad63446380",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"sqliteInt.h\"",
          "17: #include <stdlib.h>",
          "18: #include <assert.h>",
          "19: #include \"vdbeInt.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <math.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "396:       sqlite3_result_error_nomem(context);",
          "397:       return;",
          "398:     }",
          "400:     sqlite3_free(zBuf);",
          "401:   }",
          "402:   sqlite3_result_double(context, r);",
          "",
          "[Removed Lines]",
          "399:     sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8);",
          "",
          "[Added Lines]",
          "400:     if( !sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8) ){",
          "401:       assert( sqlite3_strglob(\"*Inf\", zBuf)==0 );",
          "402:       r = zBuf[0]=='-' ? -HUGE_VAL : +HUGE_VAL;",
          "403:     }",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:   do_test func-4.38 {",
          "316:     execsql {SELECT round(9999999999999.556,2);}",
          "317:   } {9999999999999.56}",
          "318: }",
          "320: # Test the upper() and lower() functions",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:   do_execsql_test func-4.39 {",
          "319:     SELECT round(1e500), round(-1e500);",
          "320:   } {Inf -Inf}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5860a61d59e78da7d3bb24346c4791343568a5c6",
      "candidate_info": {
        "commit_hash": "5860a61d59e78da7d3bb24346c4791343568a5c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5860a61d59e78da7d3bb24346c4791343568a5c6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Further performance improvements to btreeInitPage().\n\nFossilOrigin-Name: 93ae382e97c23c90312739481e47ef7f9bc475a8382c063a2de2986c950c0aec",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6eb38c59a81d27b7c1f3edad84b27a1114df6f1607282b2be1b5de9c7decc512",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1929:   return SQLITE_OK;",
          "1930: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1936: static SQLITE_NOINLINE int btreeCellSizeCheck(MemPage *pPage){",
          "1946:   iCellFirst = pPage->cellOffset + 2*pPage->nCell;",
          "1947:   usableSize = pPage->pBt->usableSize;",
          "1948:   iCellLast = usableSize - 4;",
          "1949:   data = pPage->aData;",
          "1950:   cellOffset = pPage->cellOffset;",
          "1951:   if( !pPage->leaf ) iCellLast--;",
          "1952:   for(i=0; i<pPage->nCell; i++){",
          "1953:     pc = get2byteAligned(&data[cellOffset+i*2]);",
          "1954:     testcase( pc==iCellFirst );",
          "1955:     testcase( pc==iCellLast );",
          "1956:     if( pc<iCellFirst || pc>iCellLast ){",
          "1957:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1958:     }",
          "1959:     sz = pPage->xCellSize(pPage, &data[pc]);",
          "1960:     testcase( pc+sz==usableSize );",
          "1961:     if( pc+sz>usableSize ){",
          "1962:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1963:     }",
          "1964:   }",
          "1965:   return SQLITE_OK;",
          "1966: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1957:   assert( pPage->isInit==0 );",
          "1959:   pBt = pPage->pBt;",
          "1965:     return SQLITE_CORRUPT_PAGE(pPage);",
          "1966:   }",
          "1967:   assert( pBt->pageSize>=512 && pBt->pageSize<=65536 );",
          "1968:   pPage->maskPage = (u16)(pBt->pageSize - 1);",
          "1969:   pPage->nOverflow = 0;",
          "1978:   if( pPage->nCell>MX_CELL(pBt) ){",
          "1980:     return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Removed Lines]",
          "1960:   hdr = pPage->hdrOffset;",
          "1961:   data = pPage->aData;",
          "1964:   if( decodeFlags(pPage, data[hdr]) ){",
          "1970:   usableSize = pBt->usableSize;",
          "1971:   pPage->cellOffset = cellOffset = hdr + 8 + pPage->childPtrSize;",
          "1972:   pPage->aDataEnd = &data[usableSize];",
          "1973:   pPage->aCellIdx = &data[cellOffset];",
          "1974:   pPage->aDataOfst = &data[pPage->childPtrSize];",
          "1977:   pPage->nCell = get2byte(&data[hdr+3]);",
          "",
          "[Added Lines]",
          "1990:   data = pPage->aData + pPage->hdrOffset;",
          "1993:   if( decodeFlags(pPage, data[0]) ){",
          "1999:   pPage->cellOffset = pPage->hdrOffset + 8 + pPage->childPtrSize;",
          "2000:   pPage->aCellIdx = data + pPage->childPtrSize + 8;",
          "2001:   pPage->aDataEnd = pPage->aData + pBt->usableSize;",
          "2002:   pPage->aDataOfst = pPage->aData + pPage->childPtrSize;",
          "2005:   pPage->nCell = get2byte(&data[3]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1987:   assert( pPage->nCell>0",
          "1989:        || CORRUPT_DB );",
          "2021:   pPage->isInit = 1;",
          "2022:   return SQLITE_OK;",
          "2023: }",
          "",
          "[Removed Lines]",
          "1988:        || get2byteNotZero(&data[hdr+5])==usableSize",
          "1998:   iCellFirst = cellOffset + 2*pPage->nCell;",
          "1999:   iCellLast = usableSize - 4;",
          "2000:   if( pBt->db->flags & SQLITE_CellSizeCk ){",
          "2004:     if( !pPage->leaf ) iCellLast--;",
          "2005:     for(i=0; i<pPage->nCell; i++){",
          "2006:       pc = get2byteAligned(&data[cellOffset+i*2]);",
          "2007:       testcase( pc==iCellFirst );",
          "2008:       testcase( pc==iCellLast );",
          "2009:       if( pc<iCellFirst || pc>iCellLast ){",
          "2010:         return SQLITE_CORRUPT_PAGE(pPage);",
          "2011:       }",
          "2012:       sz = pPage->xCellSize(pPage, &data[pc]);",
          "2013:       testcase( pc+sz==usableSize );",
          "2014:       if( pc+sz>usableSize ){",
          "2015:         return SQLITE_CORRUPT_PAGE(pPage);",
          "2016:       }",
          "2017:     }",
          "2018:     if( !pPage->leaf ) iCellLast++;",
          "2019:   }",
          "",
          "[Added Lines]",
          "2016:        || get2byteNotZero(&data[5])==pBt->usableSize",
          "2020:   if( pBt->db->flags & SQLITE_CellSizeCk ){",
          "2021:     return btreeCellSizeCheck(pPage);",
          "2022:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}