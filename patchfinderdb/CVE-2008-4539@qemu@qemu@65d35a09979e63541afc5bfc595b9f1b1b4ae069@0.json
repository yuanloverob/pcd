{
  "cve_id": "CVE-2008-4539",
  "cve_desc": "Heap-based buffer overflow in the Cirrus VGA implementation in (1) KVM before kvm-82 and (2) QEMU on Debian GNU/Linux and Ubuntu might allow local users to gain privileges by using the VNC console for a connection, aka the LGD-54XX \"bitblt\" heap overflow.  NOTE: this issue exists because of an incorrect fix for CVE-2007-1320.",
  "repo": "qemu/qemu",
  "patch_hash": "65d35a09979e63541afc5bfc595b9f1b1b4ae069",
  "patch_info": {
    "commit_hash": "65d35a09979e63541afc5bfc595b9f1b1b4ae069",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/65d35a09979e63541afc5bfc595b9f1b1b4ae069",
    "files": [
      "hw/cirrus_vga.c"
    ],
    "message": "CVE-2008-4539: fix a heap overflow in Cirrus emulation\n\nThe code in hw/cirrus_vga.c has changed a lot between CVE-2007-1320 has\nbeen announced and the patch has been applied. As a consequence it has\nwrongly applied and QEMU is still vulnerable to this bug if using VNC.\n\n(noticed by Jan Niehusmann)\n\nSigned-off-by: Aurelien Jarno <aurelien@aurel32.net>\n\ngit-svn-id: svn://svn.savannah.nongnu.org/qemu/trunk@5587 c046a42c-6fe2-441c-8c8c-71466251a162",
    "before_after_code_files": [
      "hw/cirrus_vga.c||hw/cirrus_vga.c"
    ]
  },
  "patch_diff": {
    "hw/cirrus_vga.c||hw/cirrus_vga.c": [
      "File: hw/cirrus_vga.c -> hw/cirrus_vga.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "786: static int cirrus_bitblt_videotovideo_copy(CirrusVGAState * s)",
      "787: {",
      "788:     if (s->ds->dpy_copy) {",
      "789:  cirrus_do_copy(s, s->cirrus_blt_dstaddr - s->start_addr,",
      "790:          s->cirrus_blt_srcaddr - s->start_addr,",
      "791:          s->cirrus_blt_width, s->cirrus_blt_height);",
      "792:     } else {",
      "797:  (*s->cirrus_rop) (s, s->vram_ptr +",
      "798:                 (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),",
      "799:      s->vram_ptr +",
      "",
      "[Removed Lines]",
      "794:     if (BLTUNSAFE(s))",
      "795:         return 0;",
      "",
      "[Added Lines]",
      "788:     if (BLTUNSAFE(s))",
      "789:         return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4e12cd946f9e7a6e3d35bcce0bc7bfe38cec4eb7",
      "candidate_info": {
        "commit_hash": "4e12cd946f9e7a6e3d35bcce0bc7bfe38cec4eb7",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/4e12cd946f9e7a6e3d35bcce0bc7bfe38cec4eb7",
        "files": [
          "hw/cirrus_vga.c",
          "hw/cirrus_vga_rop.h",
          "hw/cirrus_vga_rop2.h",
          "hw/vga_int.h",
          "hw/vmware_vga.c"
        ],
        "message": "vga: Replace VGA_COMMON with a structure\n\nAll VGA devices share a common field subset; currently they do so by\na macro which defines the common fields inline their state structures,\nrelying on the the common state being placed at offset 0 in the structure.\nThis makes refactoring the code difficult and requires a lot of error prone\ncasts.\n\nReplace the macro by a new VGACommonState structure, and the casts by\nregular field access and container_of() for upcasts.\n\nSigned-off-by: Avi Kivity <avi@redhat.com>\nSigned-off-by: Anthony Liguori <aliguori@us.ibm.com>",
        "before_after_code_files": [
          "hw/cirrus_vga.c||hw/cirrus_vga.c",
          "hw/cirrus_vga_rop.h||hw/cirrus_vga_rop.h",
          "hw/cirrus_vga_rop2.h||hw/cirrus_vga_rop2.h",
          "hw/vga_int.h||hw/vga_int.h",
          "hw/vmware_vga.c||hw/vmware_vga.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/cirrus_vga.c||hw/cirrus_vga.c"
          ],
          "candidate": [
            "hw/cirrus_vga.c||hw/cirrus_vga.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/cirrus_vga.c||hw/cirrus_vga.c": [
          "File: hw/cirrus_vga.c -> hw/cirrus_vga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:         ( /* check dst is within bounds */ \\",
          "221:             (s)->cirrus_blt_height * ABS((s)->cirrus_blt_dstpitch) \\",
          "222:                 + ((s)->cirrus_blt_dstaddr & (s)->cirrus_addr_mask) > \\",
          "224:         ) || \\",
          "225:         ( /* check src is within bounds */ \\",
          "226:             (s)->cirrus_blt_height * ABS((s)->cirrus_blt_srcpitch) \\",
          "227:                 + ((s)->cirrus_blt_srcaddr & (s)->cirrus_addr_mask) > \\",
          "229:         ) \\",
          "230:     )",
          "",
          "[Removed Lines]",
          "223:                     (s)->vram_size \\",
          "228:                     (s)->vram_size \\",
          "",
          "[Added Lines]",
          "223:                     (s)->vga.vram_size \\",
          "228:                     (s)->vga.vram_size \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:                               uint8_t *dst, int dst_pitch, int width, int height);",
          "240: typedef struct CirrusVGAState {",
          "243:     int cirrus_linear_io_addr;",
          "244:     int cirrus_linear_bitblt_io_addr;",
          "",
          "[Removed Lines]",
          "241:     VGA_STATE_COMMON",
          "",
          "[Added Lines]",
          "241:     VGACommonState vga;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "599:         s->cirrus_blt_fgcol = s->cirrus_shadow_gr1;",
          "600:         break;",
          "601:     case 2:",
          "603:         s->cirrus_blt_fgcol = le16_to_cpu(color);",
          "604:         break;",
          "605:     case 3:",
          "606:         s->cirrus_blt_fgcol = s->cirrus_shadow_gr1 |",
          "608:         break;",
          "609:     default:",
          "610:     case 4:",
          "613:         s->cirrus_blt_fgcol = le32_to_cpu(color);",
          "614:         break;",
          "615:     }",
          "",
          "[Removed Lines]",
          "602:         color = s->cirrus_shadow_gr1 | (s->gr[0x11] << 8);",
          "607:             (s->gr[0x11] << 8) | (s->gr[0x13] << 16);",
          "611:         color = s->cirrus_shadow_gr1 | (s->gr[0x11] << 8) |",
          "612:             (s->gr[0x13] << 16) | (s->gr[0x15] << 24);",
          "",
          "[Added Lines]",
          "602:         color = s->cirrus_shadow_gr1 | (s->vga.gr[0x11] << 8);",
          "607:             (s->vga.gr[0x11] << 8) | (s->vga.gr[0x13] << 16);",
          "611:         color = s->cirrus_shadow_gr1 | (s->vga.gr[0x11] << 8) |",
          "612:             (s->vga.gr[0x13] << 16) | (s->vga.gr[0x15] << 24);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "623:         s->cirrus_blt_bgcol = s->cirrus_shadow_gr0;",
          "624:         break;",
          "625:     case 2:",
          "627:         s->cirrus_blt_bgcol = le16_to_cpu(color);",
          "628:         break;",
          "629:     case 3:",
          "630:         s->cirrus_blt_bgcol = s->cirrus_shadow_gr0 |",
          "632:         break;",
          "633:     default:",
          "634:     case 4:",
          "637:         s->cirrus_blt_bgcol = le32_to_cpu(color);",
          "638:         break;",
          "639:     }",
          "",
          "[Removed Lines]",
          "626:         color = s->cirrus_shadow_gr0 | (s->gr[0x10] << 8);",
          "631:             (s->gr[0x10] << 8) | (s->gr[0x12] << 16);",
          "635:         color = s->cirrus_shadow_gr0 | (s->gr[0x10] << 8) |",
          "636:             (s->gr[0x12] << 16) | (s->gr[0x14] << 24);",
          "",
          "[Added Lines]",
          "626:         color = s->cirrus_shadow_gr0 | (s->vga.gr[0x10] << 8);",
          "631:             (s->vga.gr[0x10] << 8) | (s->vga.gr[0x12] << 16);",
          "635:         color = s->cirrus_shadow_gr0 | (s->vga.gr[0x10] << 8) |",
          "636:             (s->vga.gr[0x12] << 16) | (s->vga.gr[0x14] << 24);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "652:  off_cur_end = (off_cur + bytesperline) & s->cirrus_addr_mask;",
          "653:  off_cur &= TARGET_PAGE_MASK;",
          "654:  while (off_cur < off_cur_end) {",
          "656:      off_cur += TARGET_PAGE_SIZE;",
          "657:  }",
          "658:  off_begin += off_pitch;",
          "",
          "[Removed Lines]",
          "655:      cpu_physical_memory_set_dirty(s->vram_offset + off_cur);",
          "",
          "[Added Lines]",
          "655:      cpu_physical_memory_set_dirty(s->vga.vram_offset + off_cur);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "664: {",
          "665:     uint8_t *dst;",
          "669:     if (BLTUNSAFE(s))",
          "670:         return 0;",
          "",
          "[Removed Lines]",
          "667:     dst = s->vram_ptr + (s->cirrus_blt_dstaddr & s->cirrus_addr_mask);",
          "",
          "[Added Lines]",
          "667:     dst = s->vga.vram_ptr + (s->cirrus_blt_dstaddr & s->cirrus_addr_mask);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "687:     if (BLTUNSAFE(s))",
          "688:         return 0;",
          "689:     rop_func = cirrus_fill[rop_to_index[blt_rop]][s->cirrus_blt_pixelwidth - 1];",
          "691:              s->cirrus_blt_dstpitch,",
          "692:              s->cirrus_blt_width, s->cirrus_blt_height);",
          "693:     cirrus_invalidate_region(s, s->cirrus_blt_dstaddr,",
          "",
          "[Removed Lines]",
          "690:     rop_func(s, s->vram_ptr + (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),",
          "",
          "[Added Lines]",
          "690:     rop_func(s, s->vga.vram_ptr + (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "706: static int cirrus_bitblt_videotovideo_patterncopy(CirrusVGAState * s)",
          "707: {",
          "708:     return cirrus_bitblt_common_patterncopy(s,",
          "710:                                             s->cirrus_addr_mask));",
          "711: }",
          "",
          "[Removed Lines]",
          "709:          s->vram_ptr + ((s->cirrus_blt_srcaddr & ~7) &",
          "",
          "[Added Lines]",
          "709:          s->vga.vram_ptr + ((s->cirrus_blt_srcaddr & ~7) &",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "718:     int depth;",
          "719:     int notify = 0;",
          "725:     sx = (src % ABS(s->cirrus_blt_srcpitch)) / depth;",
          "",
          "[Removed Lines]",
          "721:     depth = s->get_bpp((VGAState *)s) / 8;",
          "722:     s->get_resolution((VGAState *)s, &width, &height);",
          "",
          "[Added Lines]",
          "721:     depth = s->vga.get_bpp(&s->vga) / 8;",
          "722:     s->vga.get_resolution(&s->vga, &width, &height);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "757:     if (notify)",
          "758:  vga_hw_update();",
          "761:         (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),",
          "763:         (s->cirrus_blt_srcaddr & s->cirrus_addr_mask),",
          "764:         s->cirrus_blt_dstpitch, s->cirrus_blt_srcpitch,",
          "765:         s->cirrus_blt_width, s->cirrus_blt_height);",
          "767:     if (notify)",
          "769:      sx, sy, dx, dy,",
          "770:      s->cirrus_blt_width / depth,",
          "771:      s->cirrus_blt_height);",
          "",
          "[Removed Lines]",
          "760:     (*s->cirrus_rop) (s, s->vram_ptr +",
          "762:         s->vram_ptr +",
          "768:  qemu_console_copy(s->ds,",
          "",
          "[Added Lines]",
          "760:     (*s->cirrus_rop) (s, s->vga.vram_ptr +",
          "762:         s->vga.vram_ptr +",
          "768:  qemu_console_copy(s->vga.ds,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "783:     if (BLTUNSAFE(s))",
          "784:         return 0;",
          "788:             s->cirrus_blt_width, s->cirrus_blt_height);",
          "790:     return 1;",
          "",
          "[Removed Lines]",
          "786:     cirrus_do_copy(s, s->cirrus_blt_dstaddr - s->start_addr,",
          "787:             s->cirrus_blt_srcaddr - s->start_addr,",
          "",
          "[Added Lines]",
          "786:     cirrus_do_copy(s, s->cirrus_blt_dstaddr - s->vga.start_addr,",
          "787:             s->cirrus_blt_srcaddr - s->vga.start_addr,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "810:         } else {",
          "812:             do {",
          "814:                                  (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),",
          "815:                                   s->cirrus_bltbuf, 0, 0, s->cirrus_blt_width, 1);",
          "816:                 cirrus_invalidate_region(s, s->cirrus_blt_dstaddr, 0,",
          "",
          "[Removed Lines]",
          "813:                 (*s->cirrus_rop)(s, s->vram_ptr +",
          "",
          "[Added Lines]",
          "813:                 (*s->cirrus_rop)(s, s->vga.vram_ptr +",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "842: {",
          "843:     int need_update;",
          "846:  ~(CIRRUS_BLT_START | CIRRUS_BLT_BUSY | CIRRUS_BLT_FIFOUSED);",
          "847:     need_update = s->cirrus_srcptr != &s->cirrus_bltbuf[0]",
          "848:         || s->cirrus_srcptr_end != &s->cirrus_bltbuf[0];",
          "",
          "[Removed Lines]",
          "845:     s->gr[0x31] &=",
          "",
          "[Added Lines]",
          "845:     s->vga.gr[0x31] &=",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "916: {",
          "917:     uint8_t blt_rop;",
          "925:     s->cirrus_blt_dstaddr =",
          "927:     s->cirrus_blt_srcaddr =",
          "933: #ifdef DEBUG_BITBLT",
          "934:     printf(\"rop=0x%02x mode=0x%02x modeext=0x%02x w=%d h=%d dpitch=%d spitch=%d daddr=0x%08x saddr=0x%08x writemask=0x%02x\\n\",",
          "",
          "[Removed Lines]",
          "919:     s->gr[0x31] |= CIRRUS_BLT_BUSY;",
          "921:     s->cirrus_blt_width = (s->gr[0x20] | (s->gr[0x21] << 8)) + 1;",
          "922:     s->cirrus_blt_height = (s->gr[0x22] | (s->gr[0x23] << 8)) + 1;",
          "923:     s->cirrus_blt_dstpitch = (s->gr[0x24] | (s->gr[0x25] << 8));",
          "924:     s->cirrus_blt_srcpitch = (s->gr[0x26] | (s->gr[0x27] << 8));",
          "926:  (s->gr[0x28] | (s->gr[0x29] << 8) | (s->gr[0x2a] << 16));",
          "928:  (s->gr[0x2c] | (s->gr[0x2d] << 8) | (s->gr[0x2e] << 16));",
          "929:     s->cirrus_blt_mode = s->gr[0x30];",
          "930:     s->cirrus_blt_modeext = s->gr[0x33];",
          "931:     blt_rop = s->gr[0x32];",
          "",
          "[Added Lines]",
          "919:     s->vga.gr[0x31] |= CIRRUS_BLT_BUSY;",
          "921:     s->cirrus_blt_width = (s->vga.gr[0x20] | (s->vga.gr[0x21] << 8)) + 1;",
          "922:     s->cirrus_blt_height = (s->vga.gr[0x22] | (s->vga.gr[0x23] << 8)) + 1;",
          "923:     s->cirrus_blt_dstpitch = (s->vga.gr[0x24] | (s->vga.gr[0x25] << 8));",
          "924:     s->cirrus_blt_srcpitch = (s->vga.gr[0x26] | (s->vga.gr[0x27] << 8));",
          "926:  (s->vga.gr[0x28] | (s->vga.gr[0x29] << 8) | (s->vga.gr[0x2a] << 16));",
          "928:  (s->vga.gr[0x2c] | (s->vga.gr[0x2d] << 8) | (s->vga.gr[0x2e] << 16));",
          "929:     s->cirrus_blt_mode = s->vga.gr[0x30];",
          "930:     s->cirrus_blt_modeext = s->vga.gr[0x33];",
          "931:     blt_rop = s->vga.gr[0x32];",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "941:            s->cirrus_blt_srcpitch,",
          "942:            s->cirrus_blt_dstaddr,",
          "943:            s->cirrus_blt_srcaddr,",
          "945: #endif",
          "947:     switch (s->cirrus_blt_mode & CIRRUS_BLTMODE_PIXELWIDTHMASK) {",
          "",
          "[Removed Lines]",
          "944:            s->gr[0x2f]);",
          "",
          "[Added Lines]",
          "944:            s->vga.gr[0x2f]);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1059: {",
          "1060:     unsigned old_value;",
          "1065:     if (((old_value & CIRRUS_BLT_RESET) != 0) &&",
          "1066:  ((reg_value & CIRRUS_BLT_RESET) == 0)) {",
          "",
          "[Removed Lines]",
          "1062:     old_value = s->gr[0x31];",
          "1063:     s->gr[0x31] = reg_value;",
          "",
          "[Added Lines]",
          "1062:     old_value = s->vga.gr[0x31];",
          "1063:     s->vga.gr[0x31] = reg_value;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1083:                                uint32_t *pstart_addr,",
          "1084:                                uint32_t *pline_compare)",
          "1085: {",
          "1087:     uint32_t start_addr, line_offset, line_compare;",
          "1091:     line_offset <<= 3;",
          "1105: }",
          "",
          "[Removed Lines]",
          "1086:     CirrusVGAState * s = (CirrusVGAState *)s1;",
          "1089:     line_offset = s->cr[0x13]",
          "1090:  | ((s->cr[0x1b] & 0x10) << 4);",
          "1094:     start_addr = (s->cr[0x0c] << 8)",
          "1095:  | s->cr[0x0d]",
          "1096:  | ((s->cr[0x1b] & 0x01) << 16)",
          "1097:  | ((s->cr[0x1b] & 0x0c) << 15)",
          "1098:  | ((s->cr[0x1d] & 0x80) << 12);",
          "1101:     line_compare = s->cr[0x18] |",
          "1102:         ((s->cr[0x07] & 0x10) << 4) |",
          "1103:         ((s->cr[0x09] & 0x40) << 3);",
          "",
          "[Added Lines]",
          "1086:     CirrusVGAState * s = container_of(s1, CirrusVGAState, vga);",
          "1089:     line_offset = s->vga.cr[0x13]",
          "1090:  | ((s->vga.cr[0x1b] & 0x10) << 4);",
          "1094:     start_addr = (s->vga.cr[0x0c] << 8)",
          "1095:  | s->vga.cr[0x0d]",
          "1096:  | ((s->vga.cr[0x1b] & 0x01) << 16)",
          "1097:  | ((s->vga.cr[0x1b] & 0x0c) << 15)",
          "1098:  | ((s->vga.cr[0x1d] & 0x80) << 12);",
          "1101:     line_compare = s->vga.cr[0x18] |",
          "1102:         ((s->vga.cr[0x07] & 0x10) << 4) |",
          "1103:         ((s->vga.cr[0x09] & 0x40) << 3);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1129: static int cirrus_get_bpp(VGAState *s1)",
          "1130: {",
          "1132:     uint32_t ret = 8;",
          "1137:  case CIRRUS_SR7_BPP_8:",
          "1138:      ret = 8;",
          "1139:      break;",
          "",
          "[Removed Lines]",
          "1131:     CirrusVGAState * s = (CirrusVGAState *)s1;",
          "1134:     if ((s->sr[0x07] & 0x01) != 0) {",
          "1136:  switch (s->sr[0x07] & CIRRUS_SR7_BPP_MASK) {",
          "",
          "[Added Lines]",
          "1131:     CirrusVGAState * s = container_of(s1, CirrusVGAState, vga);",
          "1134:     if ((s->vga.sr[0x07] & 0x01) != 0) {",
          "1136:  switch (s->vga.sr[0x07] & CIRRUS_SR7_BPP_MASK) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1151:      break;",
          "1152:  default:",
          "1153: #ifdef DEBUG_CIRRUS",
          "1155: #endif",
          "1156:      ret = 8;",
          "1157:      break;",
          "",
          "[Removed Lines]",
          "1154:      printf(\"cirrus: unknown bpp - sr7=%x\\n\", s->sr[0x7]);",
          "",
          "[Added Lines]",
          "1154:      printf(\"cirrus: unknown bpp - sr7=%x\\n\", s->vga.sr[0x7]);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1191:     unsigned offset;",
          "1192:     unsigned limit;",
          "1200:  offset <<= 14;",
          "1201:     else",
          "1202:  offset <<= 12;",
          "",
          "[Removed Lines]",
          "1195:  offset = s->gr[0x09 + bank_index];",
          "1197:  offset = s->gr[0x09];",
          "1199:     if ((s->gr[0x0b] & 0x20) != 0)",
          "",
          "[Added Lines]",
          "1195:  offset = s->vga.gr[0x09 + bank_index];",
          "1197:  offset = s->vga.gr[0x09];",
          "1199:     if ((s->vga.gr[0x0b] & 0x20) != 0)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1206:     else",
          "1207:  limit = s->real_vram_size - offset;",
          "1210:  if (limit > 0x8000) {",
          "1211:      offset += 0x8000;",
          "1212:      limit -= 0x8000;",
          "",
          "[Removed Lines]",
          "1209:     if (((s->gr[0x0b] & 0x01) == 0) && (bank_index != 0)) {",
          "",
          "[Added Lines]",
          "1209:     if (((s->vga.gr[0x0b] & 0x01) == 0) && (bank_index != 0)) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1218:     if (limit > 0) {",
          "1222:             target_phys_addr_t base_addr = isa_mem_base + 0xa0000 + bank_index * 0x8000;",
          "1223:             cpu_physical_sync_dirty_bitmap(base_addr, base_addr + 0x8000);",
          "1224:         }",
          "",
          "[Removed Lines]",
          "1221:         if (s->lfb_vram_mapped) {",
          "",
          "[Added Lines]",
          "1221:         if (s->vga.lfb_vram_mapped) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1322:     case 0x06:   // Unlock Cirrus extensions",
          "1323:  reg_value &= 0x17;",
          "1324:  if (reg_value == 0x12) {",
          "1326:  } else {",
          "1328:  }",
          "1329:  break;",
          "1330:     case 0x10:",
          "",
          "[Removed Lines]",
          "1325:      s->sr[reg_index] = 0x12;",
          "1327:      s->sr[reg_index] = 0x0f;",
          "",
          "[Added Lines]",
          "1325:      s->vga.sr[reg_index] = 0x12;",
          "1327:      s->vga.sr[reg_index] = 0x0f;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1335:     case 0xb0:",
          "1336:     case 0xd0:",
          "1337:     case 0xf0:   // Graphics Cursor X",
          "1339:  s->hw_cursor_x = (reg_value << 3) | (reg_index >> 5);",
          "1340:  break;",
          "1341:     case 0x11:",
          "",
          "[Removed Lines]",
          "1338:  s->sr[0x10] = reg_value;",
          "",
          "[Added Lines]",
          "1338:  s->vga.sr[0x10] = reg_value;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1346:     case 0xb1:",
          "1347:     case 0xd1:",
          "1348:     case 0xf1:   // Graphics Cursor Y",
          "1350:  s->hw_cursor_y = (reg_value << 3) | (reg_index >> 5);",
          "1351:  break;",
          "1352:     case 0x07:   // Extended Sequencer Mode",
          "",
          "[Removed Lines]",
          "1349:  s->sr[0x11] = reg_value;",
          "",
          "[Added Lines]",
          "1349:  s->vga.sr[0x11] = reg_value;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1372:     case 0x1d:   // VCLK 2 Denominator & Post",
          "1373:     case 0x1e:   // VCLK 3 Denominator & Post",
          "1374:     case 0x1f:   // BIOS Write Enable and MCLK select",
          "1376: #ifdef DEBUG_CIRRUS",
          "1377:  printf(\"cirrus: handled outport sr_index %02x, sr_value %02x\\n\",",
          "1378:         reg_index, reg_value);",
          "1379: #endif",
          "1380:  break;",
          "1381:     case 0x17:   // Configuration Readback and Extended Control",
          "1383:         cirrus_update_memory_access(s);",
          "1384:         break;",
          "1385:     default:",
          "",
          "[Removed Lines]",
          "1375:  s->sr[reg_index] = reg_value;",
          "1382:  s->sr[reg_index] = (s->sr[reg_index] & 0x38) | (reg_value & 0xc7);",
          "",
          "[Added Lines]",
          "1375:  s->vga.sr[reg_index] = reg_value;",
          "1382:  s->vga.sr[reg_index] = (s->vga.sr[reg_index] & 0x38) | (reg_value & 0xc7);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1428: static int cirrus_hook_read_palette(CirrusVGAState * s, int *reg_value)",
          "1429: {",
          "1431:  return CIRRUS_HOOK_NOT_HANDLED;",
          "1438:     }",
          "1439:     return CIRRUS_HOOK_HANDLED;",
          "1440: }",
          "1442: static int cirrus_hook_write_palette(CirrusVGAState * s, int reg_value)",
          "1443: {",
          "1445:  return CIRRUS_HOOK_NOT_HANDLED;",
          "1453:     }",
          "1454:     return CIRRUS_HOOK_HANDLED;",
          "1455: }",
          "",
          "[Removed Lines]",
          "1430:     if (!(s->sr[0x12] & CIRRUS_CURSOR_HIDDENPEL))",
          "1433:         s->cirrus_hidden_palette[(s->dac_read_index & 0x0f) * 3 +",
          "1434:                                  s->dac_sub_index];",
          "1435:     if (++s->dac_sub_index == 3) {",
          "1436:  s->dac_sub_index = 0;",
          "1437:  s->dac_read_index++;",
          "1444:     if (!(s->sr[0x12] & CIRRUS_CURSOR_HIDDENPEL))",
          "1446:     s->dac_cache[s->dac_sub_index] = reg_value;",
          "1447:     if (++s->dac_sub_index == 3) {",
          "1448:         memcpy(&s->cirrus_hidden_palette[(s->dac_write_index & 0x0f) * 3],",
          "1449:                s->dac_cache, 3);",
          "1451:  s->dac_sub_index = 0;",
          "1452:  s->dac_write_index++;",
          "",
          "[Added Lines]",
          "1430:     if (!(s->vga.sr[0x12] & CIRRUS_CURSOR_HIDDENPEL))",
          "1433:         s->cirrus_hidden_palette[(s->vga.dac_read_index & 0x0f) * 3 +",
          "1434:                                  s->vga.dac_sub_index];",
          "1435:     if (++s->vga.dac_sub_index == 3) {",
          "1436:  s->vga.dac_sub_index = 0;",
          "1437:  s->vga.dac_read_index++;",
          "1444:     if (!(s->vga.sr[0x12] & CIRRUS_CURSOR_HIDDENPEL))",
          "1446:     s->vga.dac_cache[s->vga.dac_sub_index] = reg_value;",
          "1447:     if (++s->vga.dac_sub_index == 3) {",
          "1448:         memcpy(&s->cirrus_hidden_palette[(s->vga.dac_write_index & 0x0f) * 3],",
          "1449:                s->vga.dac_cache, 3);",
          "1451:  s->vga.dac_sub_index = 0;",
          "1452:  s->vga.dac_write_index++;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1515:     case 0x08:   // Standard VGA",
          "1516:  return CIRRUS_HOOK_NOT_HANDLED;",
          "1517:     case 0x05:   // Standard VGA, Cirrus extended mode",
          "1519:         cirrus_update_memory_access(s);",
          "1520:  break;",
          "1521:     case 0x09:   // bank offset #0",
          "1522:     case 0x0A:   // bank offset #1",
          "1524:  cirrus_update_bank_ptr(s, 0);",
          "1525:  cirrus_update_bank_ptr(s, 1);",
          "1526:         cirrus_update_memory_access(s);",
          "1527:         break;",
          "1528:     case 0x0B:",
          "1530:  cirrus_update_bank_ptr(s, 0);",
          "1531:  cirrus_update_bank_ptr(s, 1);",
          "1532:         cirrus_update_memory_access(s);",
          "",
          "[Removed Lines]",
          "1518:  s->gr[reg_index] = reg_value & 0x7f;",
          "1523:  s->gr[reg_index] = reg_value;",
          "1529:  s->gr[reg_index] = reg_value;",
          "",
          "[Added Lines]",
          "1518:  s->vga.gr[reg_index] = reg_value & 0x7f;",
          "1523:  s->vga.gr[reg_index] = reg_value;",
          "1529:  s->vga.gr[reg_index] = reg_value;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1553:     case 0x35:   // BLT TRANSPARENT COLOR 0xff00",
          "1554:     case 0x38:   // BLT TRANSPARENT COLOR MASK 0x00ff",
          "1555:     case 0x39:   // BLT TRANSPARENT COLOR MASK 0xff00",
          "1557:  break;",
          "1558:     case 0x21:   // BLT WIDTH 0x001f00",
          "1559:     case 0x23:   // BLT HEIGHT 0x001f00",
          "1560:     case 0x25:   // BLT DEST PITCH 0x001f00",
          "1561:     case 0x27:   // BLT SRC PITCH 0x001f00",
          "1563:  break;",
          "1564:     case 0x2a:   // BLT DEST ADDR 0x3f0000",
          "1568:             cirrus_bitblt_start(s);",
          "1569:         }",
          "1570:  break;",
          "1571:     case 0x2e:   // BLT SRC ADDR 0x3f0000",
          "1573:  break;",
          "1574:     case 0x31:   // BLT STATUS/START",
          "1575:  cirrus_write_bitblt(s, reg_value);",
          "",
          "[Removed Lines]",
          "1556:  s->gr[reg_index] = reg_value;",
          "1562:  s->gr[reg_index] = reg_value & 0x1f;",
          "1565:  s->gr[reg_index] = reg_value & 0x3f;",
          "1567:         if (s->gr[0x31] & CIRRUS_BLT_AUTOSTART) {",
          "1572:  s->gr[reg_index] = reg_value & 0x3f;",
          "",
          "[Added Lines]",
          "1556:  s->vga.gr[reg_index] = reg_value;",
          "1562:  s->vga.gr[reg_index] = reg_value & 0x1f;",
          "1565:  s->vga.gr[reg_index] = reg_value & 0x3f;",
          "1567:         if (s->vga.gr[0x31] & CIRRUS_BLT_AUTOSTART) {",
          "1572:  s->vga.gr[reg_index] = reg_value & 0x3f;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1683:     case 0x1b:   // Extended Display Control",
          "1684:     case 0x1c:   // Sync Adjust and Genlock",
          "1685:     case 0x1d:   // Overlay Extended Control",
          "1687: #ifdef DEBUG_CIRRUS",
          "1688:  printf(\"cirrus: handled outport cr_index %02x, cr_value %02x\\n\",",
          "1689:         reg_index, reg_value);",
          "",
          "[Removed Lines]",
          "1686:  s->cr[reg_index] = reg_value;",
          "",
          "[Added Lines]",
          "1686:  s->vga.cr[reg_index] = reg_value;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1946:     unsigned val = mem_value;",
          "1947:     uint8_t *dst;",
          "1950:     for (x = 0; x < 8; x++) {",
          "1951:  if (val & 0x80) {",
          "",
          "[Removed Lines]",
          "1949:     dst = s->vram_ptr + (offset &= s->cirrus_addr_mask);",
          "",
          "[Added Lines]",
          "1949:     dst = s->vga.vram_ptr + (offset &= s->cirrus_addr_mask);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1956:  val <<= 1;",
          "1957:  dst++;",
          "1958:     }",
          "1961: }",
          "1963: static void cirrus_mem_writeb_mode4and5_16bpp(CirrusVGAState * s,",
          "",
          "[Removed Lines]",
          "1959:     cpu_physical_memory_set_dirty(s->vram_offset + offset);",
          "1960:     cpu_physical_memory_set_dirty(s->vram_offset + offset + 7);",
          "",
          "[Added Lines]",
          "1959:     cpu_physical_memory_set_dirty(s->vga.vram_offset + offset);",
          "1960:     cpu_physical_memory_set_dirty(s->vga.vram_offset + offset + 7);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1969:     unsigned val = mem_value;",
          "1970:     uint8_t *dst;",
          "1973:     for (x = 0; x < 8; x++) {",
          "1974:  if (val & 0x80) {",
          "1977:  } else if (mode == 5) {",
          "1980:  }",
          "1981:  val <<= 1;",
          "1982:  dst += 2;",
          "1983:     }",
          "1986: }",
          "",
          "[Removed Lines]",
          "1972:     dst = s->vram_ptr + (offset &= s->cirrus_addr_mask);",
          "1984:     cpu_physical_memory_set_dirty(s->vram_offset + offset);",
          "1985:     cpu_physical_memory_set_dirty(s->vram_offset + offset + 15);",
          "",
          "[Added Lines]",
          "1972:     dst = s->vga.vram_ptr + (offset &= s->cirrus_addr_mask);",
          "1984:     cpu_physical_memory_set_dirty(s->vga.vram_offset + offset);",
          "1985:     cpu_physical_memory_set_dirty(s->vga.vram_offset + offset + 15);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1998:     unsigned bank_offset;",
          "1999:     uint32_t val;",
          "2002:  return vga_mem_readb(s, addr);",
          "2003:     }",
          "",
          "[Removed Lines]",
          "2001:     if ((s->sr[0x07] & 0x01) == 0) {",
          "",
          "[Added Lines]",
          "2001:     if ((s->vga.sr[0x07] & 0x01) == 0) {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2011:  bank_offset = addr & 0x7fff;",
          "2012:  if (bank_offset < s->cirrus_bank_limit[bank_index]) {",
          "2013:      bank_offset += s->cirrus_bank_base[bank_index];",
          "2015:   bank_offset <<= 4;",
          "2017:   bank_offset <<= 3;",
          "2018:      }",
          "2019:      bank_offset &= s->cirrus_addr_mask;",
          "2021:  } else",
          "2022:      val = 0xff;",
          "2023:     } else if (addr >= 0x18000 && addr < 0x18100) {",
          "2025:  val = 0xff;",
          "2027:      val = cirrus_mmio_blt_read(s, addr & 0xff);",
          "2028:  }",
          "2029:     } else {",
          "",
          "[Removed Lines]",
          "2014:      if ((s->gr[0x0B] & 0x14) == 0x14) {",
          "2016:      } else if (s->gr[0x0B] & 0x02) {",
          "2020:      val = *(s->vram_ptr + bank_offset);",
          "2026:  if ((s->sr[0x17] & 0x44) == 0x04) {",
          "",
          "[Added Lines]",
          "2014:      if ((s->vga.gr[0x0B] & 0x14) == 0x14) {",
          "2016:      } else if (s->vga.gr[0x0B] & 0x02) {",
          "2020:      val = *(s->vga.vram_ptr + bank_offset);",
          "2026:  if ((s->vga.sr[0x17] & 0x44) == 0x04) {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2073:     unsigned bank_offset;",
          "2074:     unsigned mode;",
          "2077:  vga_mem_writeb(s, addr, mem_value);",
          "2078:         return;",
          "2079:     }",
          "",
          "[Removed Lines]",
          "2076:     if ((s->sr[0x07] & 0x01) == 0) {",
          "",
          "[Added Lines]",
          "2076:     if ((s->vga.sr[0x07] & 0x01) == 0) {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2093:      bank_offset = addr & 0x7fff;",
          "2094:      if (bank_offset < s->cirrus_bank_limit[bank_index]) {",
          "2095:   bank_offset += s->cirrus_bank_base[bank_index];",
          "2097:       bank_offset <<= 4;",
          "2099:       bank_offset <<= 3;",
          "2100:   }",
          "2101:   bank_offset &= s->cirrus_addr_mask;",
          "2106:         bank_offset);",
          "2107:   } else {",
          "2109:    cirrus_mem_writeb_mode4and5_8bpp(s, mode,",
          "2110:         bank_offset,",
          "2111:         mem_value);",
          "",
          "[Removed Lines]",
          "2096:   if ((s->gr[0x0B] & 0x14) == 0x14) {",
          "2098:   } else if (s->gr[0x0B] & 0x02) {",
          "2102:   mode = s->gr[0x05] & 0x7;",
          "2103:   if (mode < 4 || mode > 5 || ((s->gr[0x0B] & 0x4) == 0)) {",
          "2105:       cpu_physical_memory_set_dirty(s->vram_offset +",
          "2108:       if ((s->gr[0x0B] & 0x14) != 0x14) {",
          "",
          "[Added Lines]",
          "2096:   if ((s->vga.gr[0x0B] & 0x14) == 0x14) {",
          "2098:   } else if (s->vga.gr[0x0B] & 0x02) {",
          "2102:   mode = s->vga.gr[0x05] & 0x7;",
          "2103:   if (mode < 4 || mode > 5 || ((s->vga.gr[0x0B] & 0x4) == 0)) {",
          "2105:       cpu_physical_memory_set_dirty(s->vga.vram_offset +",
          "2108:       if ((s->vga.gr[0x0B] & 0x14) != 0x14) {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2119:  }",
          "2120:     } else if (addr >= 0x18000 && addr < 0x18100) {",
          "2123:      cirrus_mmio_blt_write(s, addr & 0xff, mem_value);",
          "2124:  }",
          "2125:     } else {",
          "",
          "[Removed Lines]",
          "2122:  if ((s->sr[0x17] & 0x44) == 0x04) {",
          "",
          "[Added Lines]",
          "2122:  if ((s->vga.sr[0x17] & 0x44) == 0x04) {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2176: static inline void invalidate_cursor1(CirrusVGAState *s)",
          "2177: {",
          "2178:     if (s->last_hw_cursor_size) {",
          "2180:                                  s->last_hw_cursor_y + s->last_hw_cursor_y_start,",
          "2181:                                  s->last_hw_cursor_y + s->last_hw_cursor_y_end);",
          "2182:     }",
          "",
          "[Removed Lines]",
          "2179:         vga_invalidate_scanlines((VGAState *)s,",
          "",
          "[Added Lines]",
          "2179:         vga_invalidate_scanlines(&s->vga,",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2188:     uint32_t content;",
          "2189:     int y, y_min, y_max;",
          "2194:         y_min = 64;",
          "2195:         y_max = -1;",
          "2196:         for(y = 0; y < 64; y++) {",
          "",
          "[Removed Lines]",
          "2191:     src = s->vram_ptr + s->real_vram_size - 16 * 1024;",
          "2192:     if (s->sr[0x12] & CIRRUS_CURSOR_LARGE) {",
          "2193:         src += (s->sr[0x13] & 0x3c) * 256;",
          "",
          "[Added Lines]",
          "2191:     src = s->vga.vram_ptr + s->real_vram_size - 16 * 1024;",
          "2192:     if (s->vga.sr[0x12] & CIRRUS_CURSOR_LARGE) {",
          "2193:         src += (s->vga.sr[0x13] & 0x3c) * 256;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2207:             src += 16;",
          "2208:         }",
          "2209:     } else {",
          "2211:         y_min = 32;",
          "2212:         y_max = -1;",
          "2213:         for(y = 0; y < 32; y++) {",
          "",
          "[Removed Lines]",
          "2210:         src += (s->sr[0x13] & 0x3f) * 256;",
          "",
          "[Added Lines]",
          "2210:         src += (s->vga.sr[0x13] & 0x3f) * 256;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2236: static void cirrus_cursor_invalidate(VGAState *s1)",
          "2237: {",
          "2239:     int size;",
          "2242:         size = 0;",
          "2243:     } else {",
          "2245:             size = 64;",
          "2246:         else",
          "2247:             size = 32;",
          "",
          "[Removed Lines]",
          "2238:     CirrusVGAState *s = (CirrusVGAState *)s1;",
          "2241:     if (!(s->sr[0x12] & CIRRUS_CURSOR_SHOW)) {",
          "2244:         if (s->sr[0x12] & CIRRUS_CURSOR_LARGE)",
          "",
          "[Added Lines]",
          "2238:     CirrusVGAState *s = container_of(s1, CirrusVGAState, vga);",
          "2241:     if (!(s->vga.sr[0x12] & CIRRUS_CURSOR_SHOW)) {",
          "2244:         if (s->vga.sr[0x12] & CIRRUS_CURSOR_LARGE)",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2265: static void cirrus_cursor_draw_line(VGAState *s1, uint8_t *d1, int scr_y)",
          "2266: {",
          "2268:     int w, h, bpp, x1, x2, poffset;",
          "2269:     unsigned int color0, color1;",
          "2270:     const uint8_t *palette, *src;",
          "2271:     uint32_t content;",
          "2274:         return;",
          "2277:         h = 64;",
          "2278:     } else {",
          "2279:         h = 32;",
          "",
          "[Removed Lines]",
          "2267:     CirrusVGAState *s = (CirrusVGAState *)s1;",
          "2273:     if (!(s->sr[0x12] & CIRRUS_CURSOR_SHOW))",
          "2276:     if (s->sr[0x12] & CIRRUS_CURSOR_LARGE) {",
          "",
          "[Added Lines]",
          "2267:     CirrusVGAState *s = container_of(s1, CirrusVGAState, vga);",
          "2273:     if (!(s->vga.sr[0x12] & CIRRUS_CURSOR_SHOW))",
          "2276:     if (s->vga.sr[0x12] & CIRRUS_CURSOR_LARGE) {",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2282:         scr_y >= (s->hw_cursor_y + h))",
          "2283:         return;",
          "2288:         src += (scr_y - s->hw_cursor_y) * 16;",
          "2289:         poffset = 8;",
          "2290:         content = ((uint32_t *)src)[0] |",
          "",
          "[Removed Lines]",
          "2285:     src = s->vram_ptr + s->real_vram_size - 16 * 1024;",
          "2286:     if (s->sr[0x12] & CIRRUS_CURSOR_LARGE) {",
          "2287:         src += (s->sr[0x13] & 0x3c) * 256;",
          "",
          "[Added Lines]",
          "2285:     src = s->vga.vram_ptr + s->real_vram_size - 16 * 1024;",
          "2286:     if (s->vga.sr[0x12] & CIRRUS_CURSOR_LARGE) {",
          "2287:         src += (s->vga.sr[0x13] & 0x3c) * 256;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2292:             ((uint32_t *)src)[2] |",
          "2293:             ((uint32_t *)src)[3];",
          "2294:     } else {",
          "2296:         src += (scr_y - s->hw_cursor_y) * 4;",
          "2297:         poffset = 128;",
          "2298:         content = ((uint32_t *)src)[0] |",
          "",
          "[Removed Lines]",
          "2295:         src += (s->sr[0x13] & 0x3f) * 256;",
          "",
          "[Added Lines]",
          "2295:         src += (s->vga.sr[0x13] & 0x3f) * 256;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2304:     w = h;",
          "2306:     x1 = s->hw_cursor_x;",
          "2308:         return;",
          "2309:     x2 = s->hw_cursor_x + w;",
          "2312:     w = x2 - x1;",
          "2313:     palette = s->cirrus_hidden_palette;",
          "2321:     d1 += x1 * bpp;",
          "2323:     default:",
          "2324:         break;",
          "2325:     case 8:",
          "",
          "[Removed Lines]",
          "2307:     if (x1 >= s->last_scr_width)",
          "2310:     if (x2 > s->last_scr_width)",
          "2311:         x2 = s->last_scr_width;",
          "2314:     color0 = s->rgb_to_pixel(c6_to_8(palette[0x0 * 3]),",
          "2315:                              c6_to_8(palette[0x0 * 3 + 1]),",
          "2316:                              c6_to_8(palette[0x0 * 3 + 2]));",
          "2317:     color1 = s->rgb_to_pixel(c6_to_8(palette[0xf * 3]),",
          "2318:                              c6_to_8(palette[0xf * 3 + 1]),",
          "2319:                              c6_to_8(palette[0xf * 3 + 2]));",
          "2320:     bpp = ((ds_get_bits_per_pixel(s->ds) + 7) >> 3);",
          "2322:     switch(ds_get_bits_per_pixel(s->ds)) {",
          "",
          "[Added Lines]",
          "2307:     if (x1 >= s->vga.last_scr_width)",
          "2310:     if (x2 > s->vga.last_scr_width)",
          "2311:         x2 = s->vga.last_scr_width;",
          "2314:     color0 = s->vga.rgb_to_pixel(c6_to_8(palette[0x0 * 3]),",
          "2315:                                  c6_to_8(palette[0x0 * 3 + 1]),",
          "2316:                                  c6_to_8(palette[0x0 * 3 + 2]));",
          "2317:     color1 = s->vga.rgb_to_pixel(c6_to_8(palette[0xf * 3]),",
          "2318:                                  c6_to_8(palette[0xf * 3 + 1]),",
          "2319:                                  c6_to_8(palette[0xf * 3 + 2]));",
          "2320:     bpp = ((ds_get_bits_per_pixel(s->vga.ds) + 7) >> 3);",
          "2322:     switch(ds_get_bits_per_pixel(s->vga.ds)) {",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2351:     addr &= s->cirrus_addr_mask;",
          "2354:         ((addr & s->linear_mmio_mask) == s->linear_mmio_mask)) {",
          "2356:  ret = cirrus_mmio_blt_read(s, addr & 0xff);",
          "",
          "[Removed Lines]",
          "2353:     if (((s->sr[0x17] & 0x44) == 0x44) &&",
          "",
          "[Added Lines]",
          "2353:     if (((s->vga.sr[0x17] & 0x44) == 0x44) &&",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2359:  ret = 0xff;",
          "2360:     } else {",
          "2363:      addr <<= 4;",
          "2365:      addr <<= 3;",
          "2366:  }",
          "2367:  addr &= s->cirrus_addr_mask;",
          "2369:     }",
          "2371:     return ret;",
          "",
          "[Removed Lines]",
          "2362:  if ((s->gr[0x0B] & 0x14) == 0x14) {",
          "2364:  } else if (s->gr[0x0B] & 0x02) {",
          "2368:  ret = *(s->vram_ptr + addr);",
          "",
          "[Added Lines]",
          "2362:  if ((s->vga.gr[0x0B] & 0x14) == 0x14) {",
          "2364:  } else if (s->vga.gr[0x0B] & 0x02) {",
          "2368:  ret = *(s->vga.vram_ptr + addr);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2410:     addr &= s->cirrus_addr_mask;",
          "2413:         ((addr & s->linear_mmio_mask) ==  s->linear_mmio_mask)) {",
          "2415:  cirrus_mmio_blt_write(s, addr & 0xff, val);",
          "",
          "[Removed Lines]",
          "2412:     if (((s->sr[0x17] & 0x44) == 0x44) &&",
          "",
          "[Added Lines]",
          "2412:     if (((s->vga.sr[0x17] & 0x44) == 0x44) &&",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2421:  }",
          "2422:     } else {",
          "2425:      addr <<= 4;",
          "2427:      addr <<= 3;",
          "2428:  }",
          "2429:  addr &= s->cirrus_addr_mask;",
          "2435:  } else {",
          "2437:   cirrus_mem_writeb_mode4and5_8bpp(s, mode, addr, val);",
          "2438:      } else {",
          "2439:   cirrus_mem_writeb_mode4and5_16bpp(s, mode, addr, val);",
          "",
          "[Removed Lines]",
          "2424:  if ((s->gr[0x0B] & 0x14) == 0x14) {",
          "2426:  } else if (s->gr[0x0B] & 0x02) {",
          "2431:  mode = s->gr[0x05] & 0x7;",
          "2432:  if (mode < 4 || mode > 5 || ((s->gr[0x0B] & 0x4) == 0)) {",
          "2434:      cpu_physical_memory_set_dirty(s->vram_offset + addr);",
          "2436:      if ((s->gr[0x0B] & 0x14) != 0x14) {",
          "",
          "[Added Lines]",
          "2424:  if ((s->vga.gr[0x0B] & 0x14) == 0x14) {",
          "2426:  } else if (s->vga.gr[0x0B] & 0x02) {",
          "2431:  mode = s->vga.gr[0x05] & 0x7;",
          "2432:  if (mode < 4 || mode > 5 || ((s->vga.gr[0x0B] & 0x4) == 0)) {",
          "2434:      cpu_physical_memory_set_dirty(s->vga.vram_offset + addr);",
          "2436:      if ((s->vga.gr[0x0B] & 0x14) != 0x14) {",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2587: static void map_linear_vram(CirrusVGAState *s)",
          "2588: {",
          "2593:     }",
          "2596:         return;",
          "2600:     if (!(s->cirrus_srcptr != s->cirrus_srcptr_end)",
          "2605:         cpu_register_physical_memory(isa_mem_base + 0xa0000, 0x8000,",
          "2607:         cpu_register_physical_memory(isa_mem_base + 0xa8000, 0x8000,",
          "2611:     }",
          "2612:     else {",
          "2613:         cpu_register_physical_memory(isa_mem_base + 0xa0000, 0x20000,",
          "2615:     }",
          "2618: }",
          "2620: static void unmap_linear_vram(CirrusVGAState *s)",
          "2621: {",
          "2625:     cpu_register_physical_memory(isa_mem_base + 0xa0000, 0x20000,",
          "2627: }",
          "",
          "[Removed Lines]",
          "2589:     if (!s->map_addr && s->lfb_addr && s->lfb_end) {",
          "2590:         s->map_addr = s->lfb_addr;",
          "2591:         s->map_end = s->lfb_end;",
          "2592:         cpu_register_physical_memory(s->map_addr, s->map_end - s->map_addr, s->vram_offset);",
          "2595:     if (!s->map_addr)",
          "2598:     s->lfb_vram_mapped = 0;",
          "2601:         && !((s->sr[0x07] & 0x01) == 0)",
          "2602:         && !((s->gr[0x0B] & 0x14) == 0x14)",
          "2603:         && !(s->gr[0x0B] & 0x02)) {",
          "2606:                                     (s->vram_offset + s->cirrus_bank_base[0]) | IO_MEM_RAM);",
          "2608:                                     (s->vram_offset + s->cirrus_bank_base[1]) | IO_MEM_RAM);",
          "2610:         s->lfb_vram_mapped = 1;",
          "2614:                                      s->vga_io_memory);",
          "2617:     vga_dirty_log_start((VGAState *)s);",
          "2622:     if (s->map_addr && s->lfb_addr && s->lfb_end)",
          "2623:         s->map_addr = s->map_end = 0;",
          "2626:                                  s->vga_io_memory);",
          "",
          "[Added Lines]",
          "2589:     if (!s->vga.map_addr && s->vga.lfb_addr && s->vga.lfb_end) {",
          "2590:         s->vga.map_addr = s->vga.lfb_addr;",
          "2591:         s->vga.map_end = s->vga.lfb_end;",
          "2592:         cpu_register_physical_memory(s->vga.map_addr, s->vga.map_end - s->vga.map_addr, s->vga.vram_offset);",
          "2595:     if (!s->vga.map_addr)",
          "2598:     s->vga.lfb_vram_mapped = 0;",
          "2601:         && !((s->vga.sr[0x07] & 0x01) == 0)",
          "2602:         && !((s->vga.gr[0x0B] & 0x14) == 0x14)",
          "2603:         && !(s->vga.gr[0x0B] & 0x02)) {",
          "2606:                                     (s->vga.vram_offset + s->cirrus_bank_base[0]) | IO_MEM_RAM);",
          "2608:                                     (s->vga.vram_offset + s->cirrus_bank_base[1]) | IO_MEM_RAM);",
          "2610:         s->vga.lfb_vram_mapped = 1;",
          "2614:                                      s->vga.vga_io_memory);",
          "2617:     vga_dirty_log_start(&s->vga);",
          "2622:     if (s->vga.map_addr && s->vga.lfb_addr && s->vga.lfb_end)",
          "2623:         s->vga.map_addr = s->vga.map_end = 0;",
          "2626:                                  s->vga.vga_io_memory);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2631: {",
          "2632:     unsigned mode;",
          "2635:         goto generic_io;",
          "2636:     } else if (s->cirrus_srcptr != s->cirrus_srcptr_end) {",
          "2637:         goto generic_io;",
          "2638:     } else {",
          "2640:             goto generic_io;",
          "2642:             goto generic_io;",
          "2643:         }",
          "2647:             map_linear_vram(s);",
          "2648:         } else {",
          "2649:         generic_io:",
          "",
          "[Removed Lines]",
          "2634:     if ((s->sr[0x17] & 0x44) == 0x44) {",
          "2639:  if ((s->gr[0x0B] & 0x14) == 0x14) {",
          "2641:  } else if (s->gr[0x0B] & 0x02) {",
          "2645:  mode = s->gr[0x05] & 0x7;",
          "2646:  if (mode < 4 || mode > 5 || ((s->gr[0x0B] & 0x4) == 0)) {",
          "",
          "[Added Lines]",
          "2634:     if ((s->vga.sr[0x17] & 0x44) == 0x44) {",
          "2639:  if ((s->vga.gr[0x0B] & 0x14) == 0x14) {",
          "2641:  } else if (s->vga.gr[0x0B] & 0x02) {",
          "2645:  mode = s->vga.gr[0x05] & 0x7;",
          "2646:  if (mode < 4 || mode > 5 || ((s->vga.gr[0x0B] & 0x4) == 0)) {",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2661:     int val, index;",
          "2665:  || (addr >= 0x3d0 && addr <= 0x3df",
          "2667:  val = 0xff;",
          "2668:     } else {",
          "2669:  switch (addr) {",
          "2670:  case 0x3c0:",
          "2673:      } else {",
          "2674:   val = 0;",
          "2675:      }",
          "2676:      break;",
          "2677:  case 0x3c1:",
          "2679:      if (index < 21)",
          "2681:      else",
          "2682:   val = 0;",
          "2683:      break;",
          "2684:  case 0x3c2:",
          "2686:      break;",
          "2687:  case 0x3c4:",
          "2689:      break;",
          "2690:  case 0x3c5:",
          "2692:   break;",
          "2694: #ifdef DEBUG_VGA_REG",
          "2696: #endif",
          "2697:      break;",
          "2698:  case 0x3c6:",
          "2699:      cirrus_read_hidden_dac(s, &val);",
          "2700:      break;",
          "2701:  case 0x3c7:",
          "2703:      break;",
          "2704:  case 0x3c8:",
          "2706:      s->cirrus_hidden_dac_lockindex = 0;",
          "2707:      break;",
          "2708:         case 0x3c9:",
          "2709:      if (cirrus_hook_read_palette(s, &val))",
          "2710:   break;",
          "2715:      }",
          "2716:      break;",
          "2717:  case 0x3ca:",
          "2719:      break;",
          "2720:  case 0x3cc:",
          "2722:      break;",
          "2723:  case 0x3ce:",
          "2725:      break;",
          "2726:  case 0x3cf:",
          "2728:   break;",
          "2730: #ifdef DEBUG_VGA_REG",
          "2732: #endif",
          "2733:      break;",
          "2734:  case 0x3b4:",
          "2735:  case 0x3d4:",
          "2737:      break;",
          "2738:  case 0x3b5:",
          "2739:  case 0x3d5:",
          "2741:   break;",
          "2743: #ifdef DEBUG_VGA_REG",
          "2745: #endif",
          "2746:      break;",
          "2747:  case 0x3ba:",
          "2748:  case 0x3da:",
          "2752:      break;",
          "2753:  default:",
          "2754:      val = 0x00;",
          "",
          "[Removed Lines]",
          "2664:     if ((addr >= 0x3b0 && addr <= 0x3bf && (s->msr & MSR_COLOR_EMULATION))",
          "2666:      && !(s->msr & MSR_COLOR_EMULATION))) {",
          "2671:      if (s->ar_flip_flop == 0) {",
          "2672:   val = s->ar_index;",
          "2678:      index = s->ar_index & 0x1f;",
          "2680:   val = s->ar[index];",
          "2685:      val = s->st00;",
          "2688:      val = s->sr_index;",
          "2691:      if (cirrus_hook_read_sr(s, s->sr_index, &val))",
          "2693:      val = s->sr[s->sr_index];",
          "2695:      printf(\"vga: read SR%x = 0x%02x\\n\", s->sr_index, val);",
          "2702:      val = s->dac_state;",
          "2705:      val = s->dac_write_index;",
          "2711:      val = s->palette[s->dac_read_index * 3 + s->dac_sub_index];",
          "2712:      if (++s->dac_sub_index == 3) {",
          "2713:   s->dac_sub_index = 0;",
          "2714:   s->dac_read_index++;",
          "2718:      val = s->fcr;",
          "2721:      val = s->msr;",
          "2724:      val = s->gr_index;",
          "2727:      if (cirrus_hook_read_gr(s, s->gr_index, &val))",
          "2729:      val = s->gr[s->gr_index];",
          "2731:      printf(\"vga: read GR%x = 0x%02x\\n\", s->gr_index, val);",
          "2736:      val = s->cr_index;",
          "2740:      if (cirrus_hook_read_cr(s, s->cr_index, &val))",
          "2742:      val = s->cr[s->cr_index];",
          "2744:      printf(\"vga: read CR%x = 0x%02x\\n\", s->cr_index, val);",
          "2750:      val = s->st01 = s->retrace((VGAState *) s);",
          "2751:      s->ar_flip_flop = 0;",
          "",
          "[Added Lines]",
          "2664:     if ((addr >= 0x3b0 && addr <= 0x3bf && (s->vga.msr & MSR_COLOR_EMULATION))",
          "2666:      && !(s->vga.msr & MSR_COLOR_EMULATION))) {",
          "2671:      if (s->vga.ar_flip_flop == 0) {",
          "2672:   val = s->vga.ar_index;",
          "2678:      index = s->vga.ar_index & 0x1f;",
          "2680:   val = s->vga.ar[index];",
          "2685:      val = s->vga.st00;",
          "2688:      val = s->vga.sr_index;",
          "2691:      if (cirrus_hook_read_sr(s, s->vga.sr_index, &val))",
          "2693:      val = s->vga.sr[s->vga.sr_index];",
          "2695:      printf(\"vga: read SR%x = 0x%02x\\n\", s->vga.sr_index, val);",
          "2702:      val = s->vga.dac_state;",
          "2705:      val = s->vga.dac_write_index;",
          "2711:      val = s->vga.palette[s->vga.dac_read_index * 3 + s->vga.dac_sub_index];",
          "2712:      if (++s->vga.dac_sub_index == 3) {",
          "2713:   s->vga.dac_sub_index = 0;",
          "2714:   s->vga.dac_read_index++;",
          "2718:      val = s->vga.fcr;",
          "2721:      val = s->vga.msr;",
          "2724:      val = s->vga.gr_index;",
          "2727:      if (cirrus_hook_read_gr(s, s->vga.gr_index, &val))",
          "2729:      val = s->vga.gr[s->vga.gr_index];",
          "2731:      printf(\"vga: read GR%x = 0x%02x\\n\", s->vga.gr_index, val);",
          "2736:      val = s->vga.cr_index;",
          "2740:      if (cirrus_hook_read_cr(s, s->vga.cr_index, &val))",
          "2742:      val = s->vga.cr[s->vga.cr_index];",
          "2744:      printf(\"vga: read CR%x = 0x%02x\\n\", s->vga.cr_index, val);",
          "2750:      val = s->vga.st01 = s->vga.retrace(&s->vga);",
          "2751:      s->vga.ar_flip_flop = 0;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2767:     int index;",
          "2771:  || (addr >= 0x3d0 && addr <= 0x3df",
          "2773:  return;",
          "2775: #ifdef DEBUG_VGA",
          "",
          "[Removed Lines]",
          "2770:     if ((addr >= 0x3b0 && addr <= 0x3bf && (s->msr & MSR_COLOR_EMULATION))",
          "2772:      && !(s->msr & MSR_COLOR_EMULATION)))",
          "",
          "[Added Lines]",
          "2770:     if ((addr >= 0x3b0 && addr <= 0x3bf && (s->vga.msr & MSR_COLOR_EMULATION))",
          "2772:      && !(s->vga.msr & MSR_COLOR_EMULATION)))",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2779:     switch (addr) {",
          "2780:     case 0x3c0:",
          "2782:      val &= 0x3f;",
          "2784:  } else {",
          "2786:      switch (index) {",
          "2787:      case 0x00 ... 0x0f:",
          "2789:   break;",
          "2790:      case 0x10:",
          "2792:   break;",
          "2793:      case 0x11:",
          "2795:   break;",
          "2796:      case 0x12:",
          "2798:   break;",
          "2799:      case 0x13:",
          "2801:   break;",
          "2802:      case 0x14:",
          "2804:   break;",
          "2805:      default:",
          "2806:   break;",
          "2807:      }",
          "2808:  }",
          "2810:  break;",
          "2811:     case 0x3c2:",
          "2814:  break;",
          "2815:     case 0x3c4:",
          "2817:  break;",
          "2818:     case 0x3c5:",
          "2820:      break;",
          "2821: #ifdef DEBUG_VGA_REG",
          "2823: #endif",
          "2826:  break;",
          "2827:     case 0x3c6:",
          "2828:  cirrus_write_hidden_dac(s, val);",
          "2829:  break;",
          "2830:     case 0x3c7:",
          "2834:  break;",
          "2835:     case 0x3c8:",
          "2839:  break;",
          "2840:     case 0x3c9:",
          "2841:  if (cirrus_hook_write_palette(s, val))",
          "2842:      break;",
          "2848:  }",
          "2849:  break;",
          "2850:     case 0x3ce:",
          "2852:  break;",
          "2853:     case 0x3cf:",
          "2855:      break;",
          "2856: #ifdef DEBUG_VGA_REG",
          "2858: #endif",
          "2860:  break;",
          "2861:     case 0x3b4:",
          "2862:     case 0x3d4:",
          "2864:  break;",
          "2865:     case 0x3b5:",
          "2866:     case 0x3d5:",
          "2868:      break;",
          "2869: #ifdef DEBUG_VGA_REG",
          "2871: #endif",
          "2877:      return;",
          "2878:  }",
          "2881:  case 0x07:",
          "2882:  case 0x09:",
          "2883:  case 0x0c:",
          "2884:  case 0x0d:",
          "2887:      break;",
          "2889:  default:",
          "2891:      break;",
          "2892:  }",
          "2895:  case 0x00:",
          "2896:  case 0x04:",
          "2897:  case 0x05:",
          "",
          "[Removed Lines]",
          "2781:  if (s->ar_flip_flop == 0) {",
          "2783:      s->ar_index = val;",
          "2785:      index = s->ar_index & 0x1f;",
          "2788:   s->ar[index] = val & 0x3f;",
          "2791:   s->ar[index] = val & ~0x10;",
          "2794:   s->ar[index] = val;",
          "2797:   s->ar[index] = val & ~0xc0;",
          "2800:   s->ar[index] = val & ~0xf0;",
          "2803:   s->ar[index] = val & ~0xf0;",
          "2809:  s->ar_flip_flop ^= 1;",
          "2812:  s->msr = val & ~0x10;",
          "2813:  s->update_retrace_info((VGAState *) s);",
          "2816:  s->sr_index = val;",
          "2819:  if (cirrus_hook_write_sr(s, s->sr_index, val))",
          "2822:  printf(\"vga: write SR%x = 0x%02x\\n\", s->sr_index, val);",
          "2824:  s->sr[s->sr_index] = val & sr_mask[s->sr_index];",
          "2825:  if (s->sr_index == 1) s->update_retrace_info((VGAState *) s);",
          "2831:  s->dac_read_index = val;",
          "2832:  s->dac_sub_index = 0;",
          "2833:  s->dac_state = 3;",
          "2836:  s->dac_write_index = val;",
          "2837:  s->dac_sub_index = 0;",
          "2838:  s->dac_state = 0;",
          "2843:  s->dac_cache[s->dac_sub_index] = val;",
          "2844:  if (++s->dac_sub_index == 3) {",
          "2845:      memcpy(&s->palette[s->dac_write_index * 3], s->dac_cache, 3);",
          "2846:      s->dac_sub_index = 0;",
          "2847:      s->dac_write_index++;",
          "2851:  s->gr_index = val;",
          "2854:  if (cirrus_hook_write_gr(s, s->gr_index, val))",
          "2857:  printf(\"vga: write GR%x = 0x%02x\\n\", s->gr_index, val);",
          "2859:  s->gr[s->gr_index] = val & gr_mask[s->gr_index];",
          "2863:  s->cr_index = val;",
          "2867:  if (cirrus_hook_write_cr(s, s->cr_index, val))",
          "2870:  printf(\"vga: write CR%x = 0x%02x\\n\", s->cr_index, val);",
          "2873:  if ((s->cr[0x11] & 0x80) && s->cr_index <= 7) {",
          "2875:      if (s->cr_index == 7)",
          "2876:   s->cr[7] = (s->cr[7] & ~0x10) | (val & 0x10);",
          "2879:  switch (s->cr_index) {",
          "2886:      s->cr[s->cr_index] = val;",
          "2890:      s->cr[s->cr_index] = val;",
          "2894:  switch(s->cr_index) {",
          "",
          "[Added Lines]",
          "2781:  if (s->vga.ar_flip_flop == 0) {",
          "2783:      s->vga.ar_index = val;",
          "2785:      index = s->vga.ar_index & 0x1f;",
          "2788:   s->vga.ar[index] = val & 0x3f;",
          "2791:   s->vga.ar[index] = val & ~0x10;",
          "2794:   s->vga.ar[index] = val;",
          "2797:   s->vga.ar[index] = val & ~0xc0;",
          "2800:   s->vga.ar[index] = val & ~0xf0;",
          "2803:   s->vga.ar[index] = val & ~0xf0;",
          "2809:  s->vga.ar_flip_flop ^= 1;",
          "2812:  s->vga.msr = val & ~0x10;",
          "2813:  s->vga.update_retrace_info(&s->vga);",
          "2816:  s->vga.sr_index = val;",
          "2819:  if (cirrus_hook_write_sr(s, s->vga.sr_index, val))",
          "2822:  printf(\"vga: write SR%x = 0x%02x\\n\", s->vga.sr_index, val);",
          "2824:  s->vga.sr[s->vga.sr_index] = val & sr_mask[s->vga.sr_index];",
          "2825:  if (s->vga.sr_index == 1) s->vga.update_retrace_info(&s->vga);",
          "2831:  s->vga.dac_read_index = val;",
          "2832:  s->vga.dac_sub_index = 0;",
          "2833:  s->vga.dac_state = 3;",
          "2836:  s->vga.dac_write_index = val;",
          "2837:  s->vga.dac_sub_index = 0;",
          "2838:  s->vga.dac_state = 0;",
          "2843:  s->vga.dac_cache[s->vga.dac_sub_index] = val;",
          "2844:  if (++s->vga.dac_sub_index == 3) {",
          "2845:      memcpy(&s->vga.palette[s->vga.dac_write_index * 3], s->vga.dac_cache, 3);",
          "2846:      s->vga.dac_sub_index = 0;",
          "2847:      s->vga.dac_write_index++;",
          "2851:  s->vga.gr_index = val;",
          "2854:  if (cirrus_hook_write_gr(s, s->vga.gr_index, val))",
          "2857:  printf(\"vga: write GR%x = 0x%02x\\n\", s->vga.gr_index, val);",
          "2859:  s->vga.gr[s->vga.gr_index] = val & gr_mask[s->vga.gr_index];",
          "2863:  s->vga.cr_index = val;",
          "2867:  if (cirrus_hook_write_cr(s, s->vga.cr_index, val))",
          "2870:  printf(\"vga: write CR%x = 0x%02x\\n\", s->vga.cr_index, val);",
          "2873:  if ((s->vga.cr[0x11] & 0x80) && s->vga.cr_index <= 7) {",
          "2875:      if (s->vga.cr_index == 7)",
          "2876:   s->vga.cr[7] = (s->vga.cr[7] & ~0x10) | (val & 0x10);",
          "2879:  switch (s->vga.cr_index) {",
          "2886:      s->vga.cr[s->vga.cr_index] = val;",
          "2890:      s->vga.cr[s->vga.cr_index] = val;",
          "2894:  switch(s->vga.cr_index) {",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2899:  case 0x07:",
          "2900:  case 0x11:",
          "2901:  case 0x17:",
          "2903:      break;",
          "2904:  }",
          "2905:  break;",
          "2906:     case 0x3ba:",
          "2907:     case 0x3da:",
          "2909:  break;",
          "2910:     }",
          "2911: }",
          "",
          "[Removed Lines]",
          "2902:      s->update_retrace_info((VGAState *) s);",
          "2908:  s->fcr = val & 0x10;",
          "",
          "[Added Lines]",
          "2902:      s->vga.update_retrace_info(&s->vga);",
          "2908:  s->vga.fcr = val & 0x10;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3020: {",
          "3021:     CirrusVGAState *s = opaque;",
          "3030:     qemu_put_8s(f, &s->cirrus_shadow_gr0);",
          "3031:     qemu_put_8s(f, &s->cirrus_shadow_gr1);",
          "3052:     qemu_put_8s(f, &s->cirrus_hidden_dac_lockindex);",
          "3053:     qemu_put_8s(f, &s->cirrus_hidden_dac_data);",
          "",
          "[Removed Lines]",
          "3023:     if (s->pci_dev)",
          "3024:         pci_device_save(s->pci_dev, f);",
          "3026:     qemu_put_be32s(f, &s->latch);",
          "3027:     qemu_put_8s(f, &s->sr_index);",
          "3028:     qemu_put_buffer(f, s->sr, 256);",
          "3029:     qemu_put_8s(f, &s->gr_index);",
          "3032:     qemu_put_buffer(f, s->gr + 2, 254);",
          "3033:     qemu_put_8s(f, &s->ar_index);",
          "3034:     qemu_put_buffer(f, s->ar, 21);",
          "3035:     qemu_put_be32(f, s->ar_flip_flop);",
          "3036:     qemu_put_8s(f, &s->cr_index);",
          "3037:     qemu_put_buffer(f, s->cr, 256);",
          "3038:     qemu_put_8s(f, &s->msr);",
          "3039:     qemu_put_8s(f, &s->fcr);",
          "3040:     qemu_put_8s(f, &s->st00);",
          "3041:     qemu_put_8s(f, &s->st01);",
          "3043:     qemu_put_8s(f, &s->dac_state);",
          "3044:     qemu_put_8s(f, &s->dac_sub_index);",
          "3045:     qemu_put_8s(f, &s->dac_read_index);",
          "3046:     qemu_put_8s(f, &s->dac_write_index);",
          "3047:     qemu_put_buffer(f, s->dac_cache, 3);",
          "3048:     qemu_put_buffer(f, s->palette, 768);",
          "3050:     qemu_put_be32(f, s->bank_offset);",
          "",
          "[Added Lines]",
          "3023:     if (s->vga.pci_dev)",
          "3024:         pci_device_save(s->vga.pci_dev, f);",
          "3026:     qemu_put_be32s(f, &s->vga.latch);",
          "3027:     qemu_put_8s(f, &s->vga.sr_index);",
          "3028:     qemu_put_buffer(f, s->vga.sr, 256);",
          "3029:     qemu_put_8s(f, &s->vga.gr_index);",
          "3032:     qemu_put_buffer(f, s->vga.gr + 2, 254);",
          "3033:     qemu_put_8s(f, &s->vga.ar_index);",
          "3034:     qemu_put_buffer(f, s->vga.ar, 21);",
          "3035:     qemu_put_be32(f, s->vga.ar_flip_flop);",
          "3036:     qemu_put_8s(f, &s->vga.cr_index);",
          "3037:     qemu_put_buffer(f, s->vga.cr, 256);",
          "3038:     qemu_put_8s(f, &s->vga.msr);",
          "3039:     qemu_put_8s(f, &s->vga.fcr);",
          "3040:     qemu_put_8s(f, &s->vga.st00);",
          "3041:     qemu_put_8s(f, &s->vga.st01);",
          "3043:     qemu_put_8s(f, &s->vga.dac_state);",
          "3044:     qemu_put_8s(f, &s->vga.dac_sub_index);",
          "3045:     qemu_put_8s(f, &s->vga.dac_read_index);",
          "3046:     qemu_put_8s(f, &s->vga.dac_write_index);",
          "3047:     qemu_put_buffer(f, s->vga.dac_cache, 3);",
          "3048:     qemu_put_buffer(f, s->vga.palette, 768);",
          "3050:     qemu_put_be32(f, s->vga.bank_offset);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3066:     if (version_id > 2)",
          "3067:         return -EINVAL;",
          "3071:         if (ret < 0)",
          "3072:             return ret;",
          "3073:     }",
          "3079:     qemu_get_8s(f, &s->cirrus_shadow_gr0);",
          "3080:     qemu_get_8s(f, &s->cirrus_shadow_gr1);",
          "3103:     qemu_get_8s(f, &s->cirrus_hidden_dac_lockindex);",
          "3104:     qemu_get_8s(f, &s->cirrus_hidden_dac_data);",
          "",
          "[Removed Lines]",
          "3069:     if (s->pci_dev && version_id >= 2) {",
          "3070:         ret = pci_device_load(s->pci_dev, f);",
          "3075:     qemu_get_be32s(f, &s->latch);",
          "3076:     qemu_get_8s(f, &s->sr_index);",
          "3077:     qemu_get_buffer(f, s->sr, 256);",
          "3078:     qemu_get_8s(f, &s->gr_index);",
          "3081:     s->gr[0x00] = s->cirrus_shadow_gr0 & 0x0f;",
          "3082:     s->gr[0x01] = s->cirrus_shadow_gr1 & 0x0f;",
          "3083:     qemu_get_buffer(f, s->gr + 2, 254);",
          "3084:     qemu_get_8s(f, &s->ar_index);",
          "3085:     qemu_get_buffer(f, s->ar, 21);",
          "3086:     s->ar_flip_flop=qemu_get_be32(f);",
          "3087:     qemu_get_8s(f, &s->cr_index);",
          "3088:     qemu_get_buffer(f, s->cr, 256);",
          "3089:     qemu_get_8s(f, &s->msr);",
          "3090:     qemu_get_8s(f, &s->fcr);",
          "3091:     qemu_get_8s(f, &s->st00);",
          "3092:     qemu_get_8s(f, &s->st01);",
          "3094:     qemu_get_8s(f, &s->dac_state);",
          "3095:     qemu_get_8s(f, &s->dac_sub_index);",
          "3096:     qemu_get_8s(f, &s->dac_read_index);",
          "3097:     qemu_get_8s(f, &s->dac_write_index);",
          "3098:     qemu_get_buffer(f, s->dac_cache, 3);",
          "3099:     qemu_get_buffer(f, s->palette, 768);",
          "3101:     s->bank_offset=qemu_get_be32(f);",
          "",
          "[Added Lines]",
          "3069:     if (s->vga.pci_dev && version_id >= 2) {",
          "3070:         ret = pci_device_load(s->vga.pci_dev, f);",
          "3075:     qemu_get_be32s(f, &s->vga.latch);",
          "3076:     qemu_get_8s(f, &s->vga.sr_index);",
          "3077:     qemu_get_buffer(f, s->vga.sr, 256);",
          "3078:     qemu_get_8s(f, &s->vga.gr_index);",
          "3081:     s->vga.gr[0x00] = s->cirrus_shadow_gr0 & 0x0f;",
          "3082:     s->vga.gr[0x01] = s->cirrus_shadow_gr1 & 0x0f;",
          "3083:     qemu_get_buffer(f, s->vga.gr + 2, 254);",
          "3084:     qemu_get_8s(f, &s->vga.ar_index);",
          "3085:     qemu_get_buffer(f, s->vga.ar, 21);",
          "3086:     s->vga.ar_flip_flop=qemu_get_be32(f);",
          "3087:     qemu_get_8s(f, &s->vga.cr_index);",
          "3088:     qemu_get_buffer(f, s->vga.cr, 256);",
          "3089:     qemu_get_8s(f, &s->vga.msr);",
          "3090:     qemu_get_8s(f, &s->vga.fcr);",
          "3091:     qemu_get_8s(f, &s->vga.st00);",
          "3092:     qemu_get_8s(f, &s->vga.st01);",
          "3094:     qemu_get_8s(f, &s->vga.dac_state);",
          "3095:     qemu_get_8s(f, &s->vga.dac_sub_index);",
          "3096:     qemu_get_8s(f, &s->vga.dac_read_index);",
          "3097:     qemu_get_8s(f, &s->vga.dac_write_index);",
          "3098:     qemu_get_buffer(f, s->vga.dac_cache, 3);",
          "3099:     qemu_get_buffer(f, s->vga.palette, 768);",
          "3101:     s->vga.bank_offset = qemu_get_be32(f);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3109:     cirrus_update_memory_access(s);",
          "3112:     cirrus_update_bank_ptr(s, 0);",
          "3113:     cirrus_update_bank_ptr(s, 1);",
          "3114:     return 0;",
          "",
          "[Removed Lines]",
          "3111:     s->graphic_mode = -1;",
          "",
          "[Added Lines]",
          "3111:     s->vga.graphic_mode = -1;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3127:     vga_reset(s);",
          "3128:     unmap_linear_vram(s);",
          "3130:     if (s->device_id == CIRRUS_ID_CLGD5446) {",
          "3137:     } else {",
          "3142:     }",
          "3149:     s->cirrus_hidden_dac_lockindex = 5;",
          "3150:     s->cirrus_hidden_dac_data = 0;",
          "",
          "[Removed Lines]",
          "3129:     s->sr[0x06] = 0x0f;",
          "3132:         s->sr[0x1F] = 0x2d;  // MemClock",
          "3133:         s->gr[0x18] = 0x0f;             // fastest memory configuration",
          "3134:         s->sr[0x0f] = 0x98;",
          "3135:         s->sr[0x17] = 0x20;",
          "3138:         s->sr[0x1F] = 0x22;  // MemClock",
          "3139:         s->sr[0x0F] = CIRRUS_MEMSIZE_2M;",
          "3140:         s->sr[0x17] = s->bustype;",
          "3143:     s->cr[0x27] = s->device_id;",
          "3147:     memset(s->vram_ptr, 0xff, s->real_vram_size);",
          "",
          "[Added Lines]",
          "3129:     s->vga.sr[0x06] = 0x0f;",
          "3132:         s->vga.sr[0x1F] = 0x2d;  // MemClock",
          "3133:         s->vga.gr[0x18] = 0x0f;             // fastest memory configuration",
          "3134:         s->vga.sr[0x0f] = 0x98;",
          "3135:         s->vga.sr[0x17] = 0x20;",
          "3138:         s->vga.sr[0x1F] = 0x22;  // MemClock",
          "3139:         s->vga.sr[0x0F] = CIRRUS_MEMSIZE_2M;",
          "3140:         s->vga.sr[0x17] = s->bustype;",
          "3143:     s->vga.cr[0x27] = s->device_id;",
          "3147:     memset(s->vga.vram_ptr, 0xff, s->real_vram_size);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3196:     register_ioport_read(0x3ba, 1, 1, vga_ioport_read, s);",
          "3197:     register_ioport_read(0x3da, 1, 1, vga_ioport_read, s);",
          "3201:     cpu_register_physical_memory(isa_mem_base + 0x000a0000, 0x20000,",
          "3203:     qemu_register_coalesced_mmio(isa_mem_base + 0x000a0000, 0x20000);",
          "",
          "[Removed Lines]",
          "3199:     s->vga_io_memory = cpu_register_io_memory(0, cirrus_vga_mem_read,",
          "3200:                                            cirrus_vga_mem_write, s);",
          "3202:                                  s->vga_io_memory);",
          "",
          "[Added Lines]",
          "3199:     s->vga.vga_io_memory = cpu_register_io_memory(0, cirrus_vga_mem_read,",
          "3200:                                                   cirrus_vga_mem_write, s);",
          "3202:                                  s->vga.vga_io_memory);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3218:     s->real_vram_size =",
          "3219:         (s->device_id == CIRRUS_ID_CLGD5446) ? 4096 * 1024 : 2048 * 1024;",
          "3222:     s->cirrus_addr_mask = s->real_vram_size - 1;",
          "3223:     s->linear_mmio_mask = s->real_vram_size - 256;",
          "3231:     qemu_register_reset(cirrus_reset, s);",
          "3232:     cirrus_reset(s);",
          "",
          "[Removed Lines]",
          "3225:     s->get_bpp = cirrus_get_bpp;",
          "3226:     s->get_offsets = cirrus_get_offsets;",
          "3227:     s->get_resolution = cirrus_get_resolution;",
          "3228:     s->cursor_invalidate = cirrus_cursor_invalidate;",
          "3229:     s->cursor_draw_line = cirrus_cursor_draw_line;",
          "",
          "[Added Lines]",
          "3225:     s->vga.get_bpp = cirrus_get_bpp;",
          "3226:     s->vga.get_offsets = cirrus_get_offsets;",
          "3227:     s->vga.get_resolution = cirrus_get_resolution;",
          "3228:     s->vga.cursor_invalidate = cirrus_cursor_invalidate;",
          "3229:     s->vga.cursor_draw_line = cirrus_cursor_draw_line;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3246:     s = qemu_mallocz(sizeof(CirrusVGAState));",
          "3249:     cirrus_init_common(s, CIRRUS_ID_CLGD5430, 0);",
          "3253: }",
          "",
          "[Removed Lines]",
          "3248:     vga_common_init((VGAState *)s, vga_ram_size);",
          "3250:     s->ds = graphic_console_init(s->update, s->invalidate,",
          "3251:                                  s->screen_dump, s->text_update, s);",
          "",
          "[Added Lines]",
          "3248:     vga_common_init(&s->vga, vga_ram_size);",
          "3250:     s->vga.ds = graphic_console_init(s->vga.update, s->vga.invalidate,",
          "3251:                                      s->vga.screen_dump, s->vga.text_update,",
          "3252:                                      &s->vga);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3264:     CirrusVGAState *s = &((PCICirrusVGAState *)d)->cirrus_vga;",
          "3268:      s->cirrus_linear_io_addr);",
          "3269:     cpu_register_physical_memory(addr + 0x1000000, 0x400000,",
          "3270:      s->cirrus_linear_bitblt_io_addr);",
          "3280: }",
          "3282: static void cirrus_pci_mmio_map(PCIDevice *d, int region_num,",
          "",
          "[Removed Lines]",
          "3267:     cpu_register_physical_memory(addr, s->vram_size,",
          "3272:     s->map_addr = s->map_end = 0;",
          "3273:     s->lfb_addr = addr & TARGET_PAGE_MASK;",
          "3274:     s->lfb_end = ((addr + VGA_RAM_SIZE) + TARGET_PAGE_SIZE - 1) & TARGET_PAGE_MASK;",
          "3276:     if (s->lfb_end < addr + VGA_RAM_SIZE)",
          "3277:         s->lfb_end = addr + VGA_RAM_SIZE;",
          "3279:     vga_dirty_log_start((VGAState *)s);",
          "",
          "[Added Lines]",
          "3268:     cpu_register_physical_memory(addr, s->vga.vram_size,",
          "3273:     s->vga.map_addr = s->vga.map_end = 0;",
          "3274:     s->vga.lfb_addr = addr & TARGET_PAGE_MASK;",
          "3275:     s->vga.lfb_end = ((addr + VGA_RAM_SIZE) + TARGET_PAGE_SIZE - 1) & TARGET_PAGE_MASK;",
          "3277:     if (s->vga.lfb_end < addr + VGA_RAM_SIZE)",
          "3278:         s->vga.lfb_end = addr + VGA_RAM_SIZE;",
          "3280:     vga_dirty_log_start(&s->vga);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3295:     CirrusVGAState *s = &pvs->cirrus_vga;",
          "3297:     pci_default_write_config(d, address, val, len);",
          "3300:     cirrus_update_memory_access(s);",
          "3301: }",
          "",
          "[Removed Lines]",
          "3298:     if (s->map_addr && pvs->dev.io_regions[0].addr == -1)",
          "3299:         s->map_addr = 0;",
          "",
          "[Added Lines]",
          "3299:     if (s->vga.map_addr && pvs->dev.io_regions[0].addr == -1)",
          "3300:         s->vga.map_addr = 0;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3324:     s = &d->cirrus_vga;",
          "3326:     cirrus_init_common(s, device_id, 1);",
          "3337:     pci_register_io_region((PCIDevice *)d, 0, 0x2000000,",
          "3338:       PCI_ADDRESS_SPACE_MEM_PREFETCH, cirrus_pci_lfb_map);",
          "3339:     if (device_id == CIRRUS_ID_CLGD5446) {",
          "",
          "[Removed Lines]",
          "3325:     vga_common_init((VGAState *)s, vga_ram_size);",
          "3328:     s->ds = graphic_console_init(s->update, s->invalidate,",
          "3329:                                  s->screen_dump, s->text_update, s);",
          "3331:     s->pci_dev = (PCIDevice *)d;",
          "",
          "[Added Lines]",
          "3326:     vga_common_init(&s->vga, vga_ram_size);",
          "3329:     s->vga.ds = graphic_console_init(s->vga.update, s->vga.invalidate,",
          "3330:                                      s->vga.screen_dump, s->vga.text_update,",
          "3331:                                      &s->vga);",
          "3333:     s->vga.pci_dev = (PCIDevice *)d;",
          "",
          "---------------"
        ],
        "hw/cirrus_vga_rop.h||hw/cirrus_vga_rop.h": [
          "File: hw/cirrus_vga_rop.h -> hw/cirrus_vga_rop.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:         for (x = 0; x < bltwidth; x++) {",
          "83:      p = *dst;",
          "84:             ROP_OP(p, *src);",
          "86:             dst++;",
          "87:             src++;",
          "88:         }",
          "",
          "[Removed Lines]",
          "85:      if (p != s->gr[0x34]) *dst = p;",
          "",
          "[Added Lines]",
          "85:      if (p != s->vga.gr[0x34]) *dst = p;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:         for (x = 0; x < bltwidth; x++) {",
          "106:      p = *dst;",
          "107:             ROP_OP(p, *src);",
          "109:             dst--;",
          "110:             src--;",
          "111:         }",
          "",
          "[Removed Lines]",
          "108:      if (p != s->gr[0x34]) *dst = p;",
          "",
          "[Added Lines]",
          "108:      if (p != s->vga.gr[0x34]) *dst = p;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:      p2 = *(dst+1);",
          "131:             ROP_OP(p1, *src);",
          "132:             ROP_OP(p2, *(src+1));",
          "136:      }",
          "",
          "[Removed Lines]",
          "133:      if ((p1 != s->gr[0x34]) || (p2 != s->gr[0x35])) {",
          "",
          "[Added Lines]",
          "133:      if ((p1 != s->vga.gr[0x34]) || (p2 != s->vga.gr[0x35])) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:      p2 = *dst;",
          "159:             ROP_OP(p1, *(src-1));",
          "160:             ROP_OP(p2, *src);",
          "164:      }",
          "",
          "[Removed Lines]",
          "161:      if ((p1 != s->gr[0x34]) || (p2 != s->gr[0x35])) {",
          "",
          "[Added Lines]",
          "161:      if ((p1 != s->vga.gr[0x34]) || (p2 != s->vga.gr[0x35])) {",
          "",
          "---------------"
        ],
        "hw/cirrus_vga_rop2.h||hw/cirrus_vga_rop2.h": [
          "File: hw/cirrus_vga_rop2.h -> hw/cirrus_vga_rop2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     unsigned int col;",
          "49:     const uint8_t *src1;",
          "50: #if DEPTH == 24",
          "52: #else",
          "54: #endif",
          "56: #if DEPTH == 8",
          "",
          "[Removed Lines]",
          "51:     int skipleft = s->gr[0x2f] & 0x1f;",
          "53:     int skipleft = (s->gr[0x2f] & 0x07) * (DEPTH / 8);",
          "",
          "[Added Lines]",
          "51:     int skipleft = s->vga.gr[0x2f] & 0x1f;",
          "53:     int skipleft = (s->vga.gr[0x2f] & 0x07) * (DEPTH / 8);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     unsigned bitmask;",
          "106:     unsigned index;",
          "107: #if DEPTH == 24",
          "109:     int srcskipleft = dstskipleft / 3;",
          "110: #else",
          "112:     int dstskipleft = srcskipleft * (DEPTH / 8);",
          "113: #endif",
          "",
          "[Removed Lines]",
          "108:     int dstskipleft = s->gr[0x2f] & 0x1f;",
          "111:     int srcskipleft = s->gr[0x2f] & 0x07;",
          "",
          "[Added Lines]",
          "108:     int dstskipleft = s->vga.gr[0x2f] & 0x1f;",
          "111:     int srcskipleft = s->vga.gr[0x2f] & 0x07;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "153:     unsigned bits;",
          "154:     unsigned int col;",
          "155:     unsigned bitmask;",
          "157:     int dstskipleft = srcskipleft * (DEPTH / 8);",
          "159:     colors[0] = s->cirrus_blt_bgcol;",
          "",
          "[Removed Lines]",
          "156:     int srcskipleft = s->gr[0x2f] & 0x07;",
          "",
          "[Added Lines]",
          "156:     int srcskipleft = s->vga.gr[0x2f] & 0x07;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "188:     unsigned int bits, bits_xor;",
          "189:     unsigned int col;",
          "190: #if DEPTH == 24",
          "192:     int srcskipleft = dstskipleft / 3;",
          "193: #else",
          "195:     int dstskipleft = srcskipleft * (DEPTH / 8);",
          "196: #endif",
          "",
          "[Removed Lines]",
          "191:     int dstskipleft = s->gr[0x2f] & 0x1f;",
          "194:     int srcskipleft = s->gr[0x2f] & 0x07;",
          "",
          "[Added Lines]",
          "191:     int dstskipleft = s->vga.gr[0x2f] & 0x1f;",
          "194:     int srcskipleft = s->vga.gr[0x2f] & 0x07;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "232:     int x, y, bitpos, pattern_y;",
          "233:     unsigned int bits;",
          "234:     unsigned int col;",
          "236:     int dstskipleft = srcskipleft * (DEPTH / 8);",
          "238:     colors[0] = s->cirrus_blt_bgcol;",
          "",
          "[Removed Lines]",
          "235:     int srcskipleft = s->gr[0x2f] & 0x07;",
          "",
          "[Added Lines]",
          "235:     int srcskipleft = s->vga.gr[0x2f] & 0x07;",
          "",
          "---------------"
        ],
        "hw/vga_int.h||hw/vga_int.h": [
          "File: hw/vga_int.h -> hw/vga_int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     struct vga_precise_retrace precise;",
          "95: };",
          "179:     union vga_retrace retrace_info;",
          "186: static inline int c6_to_8(int v)",
          "187: {",
          "",
          "[Removed Lines]",
          "97: struct VGAState;",
          "98: typedef uint8_t (* vga_retrace_fn)(struct VGAState *s);",
          "99: typedef void (* vga_update_retrace_info_fn)(struct VGAState *s);",
          "101: #define VGA_STATE_COMMON                                                \\",
          "102:     uint8_t *vram_ptr;                                                  \\",
          "103:     ram_addr_t vram_offset;                                             \\",
          "104:     unsigned int vram_size;                                             \\",
          "105:     uint32_t lfb_addr;                                                  \\",
          "106:     uint32_t lfb_end;                                                   \\",
          "107:     uint32_t map_addr;                                                  \\",
          "108:     uint32_t map_end;                                                   \\",
          "109:     uint32_t lfb_vram_mapped; /* whether 0xa0000 is mapped as ram */    \\",
          "110:     unsigned long bios_offset;                                          \\",
          "111:     unsigned int bios_size;                                             \\",
          "112:     int it_shift;                                                       \\",
          "113:     PCIDevice *pci_dev;                                                 \\",
          "114:     uint32_t latch;                                                     \\",
          "115:     uint8_t sr_index;                                                   \\",
          "116:     uint8_t sr[256];                                                    \\",
          "117:     uint8_t gr_index;                                                   \\",
          "118:     uint8_t gr[256];                                                    \\",
          "119:     uint8_t ar_index;                                                   \\",
          "120:     uint8_t ar[21];                                                     \\",
          "121:     int ar_flip_flop;                                                   \\",
          "122:     uint8_t cr_index;                                                   \\",
          "123:     uint8_t cr[256]; /* CRT registers */                                \\",
          "124:     uint8_t msr; /* Misc Output Register */                             \\",
          "125:     uint8_t fcr; /* Feature Control Register */                         \\",
          "126:     uint8_t st00; /* status 0 */                                        \\",
          "127:     uint8_t st01; /* status 1 */                                        \\",
          "128:     uint8_t dac_state;                                                  \\",
          "129:     uint8_t dac_sub_index;                                              \\",
          "130:     uint8_t dac_read_index;                                             \\",
          "131:     uint8_t dac_write_index;                                            \\",
          "132:     uint8_t dac_cache[3]; /* used when writing */                       \\",
          "133:     int dac_8bit;                                                       \\",
          "134:     uint8_t palette[768];                                               \\",
          "135:     int32_t bank_offset;                                                \\",
          "136:     int vga_io_memory;                                             \\",
          "137:     int (*get_bpp)(struct VGAState *s);                                 \\",
          "138:     void (*get_offsets)(struct VGAState *s,                             \\",
          "139:                         uint32_t *pline_offset,                         \\",
          "140:                         uint32_t *pstart_addr,                          \\",
          "141:                         uint32_t *pline_compare);                       \\",
          "142:     void (*get_resolution)(struct VGAState *s,                          \\",
          "143:                         int *pwidth,                                    \\",
          "144:                         int *pheight);                                  \\",
          "145:     VGA_STATE_COMMON_BOCHS_VBE                                          \\",
          "147:     DisplayState *ds;                                                   \\",
          "148:     uint32_t font_offsets[2];                                           \\",
          "149:     int graphic_mode;                                                   \\",
          "150:     uint8_t shift_control;                                              \\",
          "151:     uint8_t double_scan;                                                \\",
          "152:     uint32_t line_offset;                                               \\",
          "153:     uint32_t line_compare;                                              \\",
          "154:     uint32_t start_addr;                                                \\",
          "155:     uint32_t plane_updated;                                             \\",
          "156:     uint32_t last_line_offset;                                          \\",
          "157:     uint8_t last_cw, last_ch;                                           \\",
          "158:     uint32_t last_width, last_height; /* in chars or pixels */          \\",
          "159:     uint32_t last_scr_width, last_scr_height; /* in pixels */           \\",
          "160:     uint32_t last_depth; /* in bits */                                  \\",
          "161:     uint8_t cursor_start, cursor_end;                                   \\",
          "162:     uint32_t cursor_offset;                                             \\",
          "163:     unsigned int (*rgb_to_pixel)(unsigned int r,                        \\",
          "164:                                  unsigned int g, unsigned b);           \\",
          "165:     vga_hw_update_ptr update;                                           \\",
          "166:     vga_hw_invalidate_ptr invalidate;                                   \\",
          "167:     vga_hw_screen_dump_ptr screen_dump;                                 \\",
          "168:     vga_hw_text_update_ptr text_update;                                 \\",
          "170:     uint32_t invalidated_y_table[VGA_MAX_HEIGHT / 32];                  \\",
          "171:     void (*cursor_invalidate)(struct VGAState *s);                      \\",
          "172:     void (*cursor_draw_line)(struct VGAState *s, uint8_t *d, int y);    \\",
          "174:     uint32_t last_palette[256];                                         \\",
          "175:     uint32_t last_ch_attr[CH_ATTR_SIZE]; /* XXX: make it dynamic */     \\",
          "177:     vga_retrace_fn retrace;                                             \\",
          "178:     vga_update_retrace_info_fn update_retrace_info;                     \\",
          "182: typedef struct VGAState {",
          "183:     VGA_STATE_COMMON",
          "184: } VGAState;",
          "",
          "[Added Lines]",
          "97: struct VGACommonState;",
          "98: typedef uint8_t (* vga_retrace_fn)(struct VGACommonState *s);",
          "99: typedef void (* vga_update_retrace_info_fn)(struct VGACommonState *s);",
          "101: typedef struct VGACommonState {",
          "102:     uint8_t *vram_ptr;",
          "103:     ram_addr_t vram_offset;",
          "104:     unsigned int vram_size;",
          "105:     uint32_t lfb_addr;",
          "106:     uint32_t lfb_end;",
          "107:     uint32_t map_addr;",
          "108:     uint32_t map_end;",
          "110:     unsigned long bios_offset;",
          "111:     unsigned int bios_size;",
          "112:     int it_shift;",
          "113:     PCIDevice *pci_dev;",
          "114:     uint32_t latch;",
          "115:     uint8_t sr_index;",
          "116:     uint8_t sr[256];",
          "117:     uint8_t gr_index;",
          "118:     uint8_t gr[256];",
          "119:     uint8_t ar_index;",
          "120:     uint8_t ar[21];",
          "121:     int ar_flip_flop;",
          "122:     uint8_t cr_index;",
          "128:     uint8_t dac_state;",
          "129:     uint8_t dac_sub_index;",
          "130:     uint8_t dac_read_index;",
          "131:     uint8_t dac_write_index;",
          "133:     int dac_8bit;",
          "134:     uint8_t palette[768];",
          "135:     int32_t bank_offset;",
          "136:     int vga_io_memory;",
          "137:     int (*get_bpp)(struct VGACommonState *s);",
          "138:     void (*get_offsets)(struct VGACommonState *s,",
          "139:                         uint32_t *pline_offset,",
          "140:                         uint32_t *pstart_addr,",
          "141:                         uint32_t *pline_compare);",
          "142:     void (*get_resolution)(struct VGACommonState *s,",
          "143:                         int *pwidth,",
          "144:                         int *pheight);",
          "145:     VGA_STATE_COMMON_BOCHS_VBE",
          "147:     DisplayState *ds;",
          "148:     uint32_t font_offsets[2];",
          "149:     int graphic_mode;",
          "150:     uint8_t shift_control;",
          "151:     uint8_t double_scan;",
          "152:     uint32_t line_offset;",
          "153:     uint32_t line_compare;",
          "154:     uint32_t start_addr;",
          "155:     uint32_t plane_updated;",
          "156:     uint32_t last_line_offset;",
          "157:     uint8_t last_cw, last_ch;",
          "161:     uint8_t cursor_start, cursor_end;",
          "162:     uint32_t cursor_offset;",
          "163:     unsigned int (*rgb_to_pixel)(unsigned int r,",
          "164:                                  unsigned int g, unsigned b);",
          "165:     vga_hw_update_ptr update;",
          "166:     vga_hw_invalidate_ptr invalidate;",
          "167:     vga_hw_screen_dump_ptr screen_dump;",
          "168:     vga_hw_text_update_ptr text_update;",
          "170:     uint32_t invalidated_y_table[VGA_MAX_HEIGHT / 32];",
          "171:     void (*cursor_invalidate)(struct VGACommonState *s);",
          "172:     void (*cursor_draw_line)(struct VGACommonState *s, uint8_t *d, int y);",
          "174:     uint32_t last_palette[256];",
          "177:     vga_retrace_fn retrace;",
          "178:     vga_update_retrace_info_fn update_retrace_info;",
          "180: } VGACommonState;",
          "182: typedef VGACommonState VGAState;",
          "",
          "---------------"
        ],
        "hw/vmware_vga.c||hw/vmware_vga.c": [
          "File: hw/vmware_vga.c -> hw/vmware_vga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: struct vmsvga_state_s {",
          "40: #ifdef EMBED_STDVGA",
          "42: #endif",
          "44:     int width;",
          "",
          "[Removed Lines]",
          "41:     VGA_STATE_COMMON",
          "",
          "[Added Lines]",
          "41:     VGACommonState vga;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:     bypl = s->bypp * s->width;",
          "327:     width = s->bypp * w;",
          "328:     start = s->bypp * x + bypl * y;",
          "332:     for (; line > 0; line --, src += bypl, dst += bypl)",
          "333:         memcpy(dst, src, width);",
          "334: #endif",
          "337: }",
          "339: static inline void vmsvga_update_screen(struct vmsvga_state_s *s)",
          "340: {",
          "341: #ifndef DIRECT_VRAM",
          "343: #endif",
          "346: }",
          "348: #ifdef DIRECT_VRAM",
          "",
          "[Removed Lines]",
          "329:     src = s->vram_ptr + start;",
          "330:     dst = ds_get_data(s->ds) + start;",
          "336:     dpy_update(s->ds, x, y, w, h);",
          "342:     memcpy(ds_get_data(s->ds), s->vram_ptr, s->bypp * s->width * s->height);",
          "345:     dpy_update(s->ds, 0, 0, s->width, s->height);",
          "",
          "[Added Lines]",
          "329:     src = s->vga.vram_ptr + start;",
          "330:     dst = ds_get_data(s->vga.ds) + start;",
          "336:     dpy_update(s->vga.ds, x, y, w, h);",
          "342:     memcpy(ds_get_data(s->vga.ds), s->vga.vram_ptr, s->bypp * s->width * s->height);",
          "345:     dpy_update(s->vga.ds, 0, 0, s->width, s->height);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "383: # ifdef DIRECT_VRAM",
          "384:     uint8_t *vram = ds_get_data(s->ds);",
          "385: # else",
          "387: # endif",
          "388:     int bypl = s->bypp * s->width;",
          "389:     int width = s->bypp * w;",
          "",
          "[Removed Lines]",
          "386:     uint8_t *vram = s->vram_ptr;",
          "",
          "[Added Lines]",
          "386:     uint8_t *vram = s->vga.vram_ptr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "420: # ifdef DIRECT_VRAM",
          "421:     uint8_t *vram = ds_get_data(s->ds);",
          "422: # else",
          "424: # endif",
          "425:     int bypp = s->bypp;",
          "426:     int bypl = bypp * s->width;",
          "",
          "[Removed Lines]",
          "423:     uint8_t *vram = s->vram_ptr;",
          "",
          "[Added Lines]",
          "423:     uint8_t *vram = s->vga.vram_ptr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "485:     for (i = SVGA_BITMAP_SIZE(c->width, c->height) - 1; i >= 0; i --)",
          "486:         c->mask[i] = ~c->mask[i];",
          "490:                         (uint8_t *) c->image, (uint8_t *) c->mask);",
          "491: }",
          "492: #endif",
          "",
          "[Removed Lines]",
          "488:     if (s->ds->cursor_define)",
          "489:         s->ds->cursor_define(c->width, c->height, c->bpp, c->hot_x, c->hot_y,",
          "",
          "[Added Lines]",
          "488:     if (s->vga.ds->cursor_define)",
          "489:         s->vga.ds->cursor_define(c->width, c->height, c->bpp, c->hot_x, c->hot_y,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "689:         return 0x0;",
          "691:     case SVGA_REG_VRAM_SIZE:",
          "694:     case SVGA_REG_FB_SIZE:",
          "695:         return s->fb_size;",
          "",
          "[Removed Lines]",
          "692:         return s->vram_size - SVGA_FIFO_SIZE;",
          "",
          "[Added Lines]",
          "692:         return s->vga.vram_size - SVGA_FIFO_SIZE;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "703:         caps |= SVGA_CAP_RECT_FILL;",
          "704: #endif",
          "705: #ifdef HW_MOUSE_ACCEL",
          "707:             caps |= SVGA_CAP_CURSOR | SVGA_CAP_CURSOR_BYPASS_2 |",
          "708:                     SVGA_CAP_CURSOR_BYPASS;",
          "709: #endif",
          "710:         return caps;",
          "712:     case SVGA_REG_MEM_START:",
          "715:     case SVGA_REG_MEM_SIZE:",
          "716:         return SVGA_FIFO_SIZE;",
          "",
          "[Removed Lines]",
          "706:         if (s->ds->mouse_set)",
          "713:         return s->vram_base + s->vram_size - SVGA_FIFO_SIZE;",
          "",
          "[Added Lines]",
          "706:         if (s->vga.ds->mouse_set)",
          "713:         return s->vram_base + s->vga.vram_size - SVGA_FIFO_SIZE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "775:         s->height = -1;",
          "776:         s->invalidated = 1;",
          "777: #ifdef EMBED_STDVGA",
          "779: #endif",
          "780:         if (s->enable)",
          "781:             s->fb_size = ((s->depth + 7) >> 3) * s->new_width * s->new_height;",
          "",
          "[Removed Lines]",
          "778:         s->invalidate(opaque);",
          "",
          "[Added Lines]",
          "778:         s->vga.invalidate(&s->vga);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "802:     case SVGA_REG_CONFIG_DONE:",
          "803:         if (value) {",
          "806:             if ((CMD(min) | CMD(max) |",
          "807:                         CMD(next_cmd) | CMD(stop)) & 3)",
          "",
          "[Removed Lines]",
          "804:             s->fifo = (uint32_t *) &s->vram_ptr[s->vram_size - SVGA_FIFO_SIZE];",
          "",
          "[Added Lines]",
          "804:             s->fifo = (uint32_t *) &s->vga.vram_ptr[s->vga.vram_size - SVGA_FIFO_SIZE];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "847:         s->cursor.on |= (value == SVGA_CURSOR_ON_SHOW);",
          "848:         s->cursor.on &= (value != SVGA_CURSOR_ON_HIDE);",
          "849: #ifdef HW_MOUSE_ACCEL",
          "852: #endif",
          "853:         break;",
          "",
          "[Removed Lines]",
          "850:         if (s->ds->mouse_set && value <= SVGA_CURSOR_ON_SHOW)",
          "851:             s->ds->mouse_set(s->cursor.x, s->cursor.y, s->cursor.on);",
          "",
          "[Added Lines]",
          "850:         if (s->vga.ds->mouse_set && value <= SVGA_CURSOR_ON_SHOW)",
          "851:             s->vga.ds->mouse_set(s->cursor.x, s->cursor.y, s->cursor.on);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "885:     if (s->new_width != s->width || s->new_height != s->height) {",
          "886:         s->width = s->new_width;",
          "887:         s->height = s->new_height;",
          "889:         s->invalidated = 1;",
          "890:     }",
          "891: }",
          "",
          "[Removed Lines]",
          "888:         qemu_console_resize(s->ds, s->width, s->height);",
          "",
          "[Added Lines]",
          "888:         qemu_console_resize(s->vga.ds, s->width, s->height);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "895:     struct vmsvga_state_s *s = (struct vmsvga_state_s *) opaque;",
          "896:     if (!s->enable) {",
          "897: #ifdef EMBED_STDVGA",
          "899: #endif",
          "900:         return;",
          "901:     }",
          "",
          "[Removed Lines]",
          "898:         s->update(opaque);",
          "",
          "[Added Lines]",
          "898:         s->vga.update(&s->vga);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "963:     struct vmsvga_state_s *s = (struct vmsvga_state_s *) opaque;",
          "964:     if (!s->enable) {",
          "965: #ifdef EMBED_STDVGA",
          "967: #endif",
          "968:         return;",
          "969:     }",
          "",
          "[Removed Lines]",
          "966:         s->invalidate(opaque);",
          "",
          "[Added Lines]",
          "966:         s->vga.invalidate(&s->vga);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "978:     struct vmsvga_state_s *s = (struct vmsvga_state_s *) opaque;",
          "979:     if (!s->enable) {",
          "980: #ifdef EMBED_STDVGA",
          "982: #endif",
          "983:         return;",
          "984:     }",
          "986:     if (s->depth == 32) {",
          "987:         DisplaySurface *ds = qemu_create_displaysurface_from(s->width,",
          "989:         ppm_save(filename, ds);",
          "990:         qemu_free(ds);",
          "991:     }",
          "",
          "[Removed Lines]",
          "981:         s->screen_dump(opaque, filename);",
          "988:                 s->height, 32, ds_get_linesize(s->ds), s->vram_ptr);",
          "",
          "[Added Lines]",
          "981:         s->vga.screen_dump(&s->vga, filename);",
          "988:                 s->height, 32, ds_get_linesize(s->vga.ds), s->vga.vram_ptr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "995: {",
          "996:     struct vmsvga_state_s *s = (struct vmsvga_state_s *) opaque;",
          "1000: }",
          "1002: #ifdef DIRECT_VRAM",
          "",
          "[Removed Lines]",
          "998:     if (s->text_update)",
          "999:         s->text_update(opaque, chardata);",
          "",
          "[Added Lines]",
          "998:     if (s->vga.text_update)",
          "999:         s->vga.text_update(&s->vga, chardata);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1117:     s->invalidated = 1;",
          "1118:     if (s->config)",
          "1121:     return 0;",
          "1122: }",
          "",
          "[Removed Lines]",
          "1119:         s->fifo = (uint32_t *) &s->vram_ptr[s->vram_size - SVGA_FIFO_SIZE];",
          "",
          "[Added Lines]",
          "1119:         s->fifo = (uint32_t *) &s->vga.vram_ptr[s->vga.vram_size - SVGA_FIFO_SIZE];",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1137:     s->vram_ptr = qemu_get_ram_ptr(s->vram_offset);",
          "1138: #endif",
          "1145: #ifdef CONFIG_BOCHS_VBE",
          "1147:     cpu_register_physical_memory(VBE_DISPI_LFB_PHYSICAL_ADDRESS,",
          "1149: #endif",
          "1150: }",
          "",
          "[Removed Lines]",
          "1140:     s->ds = graphic_console_init(vmsvga_update_display,",
          "1141:                                  vmsvga_invalidate_display,",
          "1142:                                  vmsvga_screen_dump,",
          "1143:                                  vmsvga_text_update, s);",
          "1148:                                  vga_ram_size, s->vram_offset);",
          "",
          "[Added Lines]",
          "1140:     s->vga.ds = graphic_console_init(vmsvga_update_display,",
          "1141:                                      vmsvga_invalidate_display,",
          "1142:                                      vmsvga_screen_dump,",
          "1143:                                      vmsvga_text_update, &s->vga);",
          "1148:                                  vga_ram_size, s->vga.vram_offset);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1204:     iomemtype = cpu_register_io_memory(0, vmsvga_vram_read,",
          "1205:                     vmsvga_vram_write, s);",
          "1206: #else",
          "1208: #endif",
          "1210:                     iomemtype);",
          "1211: }",
          "",
          "[Removed Lines]",
          "1207:     iomemtype = s->vram_offset | IO_MEM_RAM;",
          "1209:     cpu_register_physical_memory(s->vram_base, s->vram_size,",
          "",
          "[Added Lines]",
          "1207:     iomemtype = s->vga.vram_offset | IO_MEM_RAM;",
          "1209:     cpu_register_physical_memory(s->vram_base, s->vga.vram_size,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2eb849d4b1fdb6f35d5c46958c7f703cf64cfef",
      "candidate_info": {
        "commit_hash": "b2eb849d4b1fdb6f35d5c46958c7f703cf64cfef",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/b2eb849d4b1fdb6f35d5c46958c7f703cf64cfef",
        "files": [
          "hw/cirrus_vga.c",
          "hw/cirrus_vga_rop.h"
        ],
        "message": "CVE-2007-1320 - Cirrus LGD-54XX \"bitblt\" heap overflow\n\nI have just noticed that patch for CVE-2007-1320 has never been applied\nto the QEMU CVS. Please find it below.\n\n| Multiple heap-based buffer overflows in the cirrus_invalidate_region\n| function in the Cirrus VGA extension in QEMU 0.8.2, as used in Xen and\n| possibly other products, might allow local users to execute arbitrary\n| code via unspecified vectors related to \"attempting to mark\n| non-existent regions as dirty,\" aka the \"bitblt\" heap overflow.\n\n\ngit-svn-id: svn://svn.savannah.nongnu.org/qemu/trunk@4340 c046a42c-6fe2-441c-8c8c-71466251a162",
        "before_after_code_files": [
          "hw/cirrus_vga.c||hw/cirrus_vga.c",
          "hw/cirrus_vga_rop.h||hw/cirrus_vga_rop.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/cirrus_vga.c||hw/cirrus_vga.c"
          ],
          "candidate": [
            "hw/cirrus_vga.c||hw/cirrus_vga.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/cirrus_vga.c||hw/cirrus_vga.c": [
          "File: hw/cirrus_vga.c -> hw/cirrus_vga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "220: #define CIRRUS_HOOK_NOT_HANDLED 0",
          "221: #define CIRRUS_HOOK_HANDLED 1",
          "223: struct CirrusVGAState;",
          "224: typedef void (*cirrus_bitblt_rop_t) (struct CirrusVGAState *s,",
          "225:                                      uint8_t * dst, const uint8_t * src,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223: #define BLTUNSAFE(s) \\",
          "224:     ( \\",
          "225:         ( /* check dst is within bounds */ \\",
          "226:             (s)->cirrus_blt_height * (s)->cirrus_blt_dstpitch \\",
          "227:                 + ((s)->cirrus_blt_dstaddr & (s)->cirrus_addr_mask) > \\",
          "228:                     (s)->vram_size \\",
          "229:         ) || \\",
          "230:         ( /* check src is within bounds */ \\",
          "231:             (s)->cirrus_blt_height * (s)->cirrus_blt_srcpitch \\",
          "232:                 + ((s)->cirrus_blt_srcaddr & (s)->cirrus_addr_mask) > \\",
          "233:                     (s)->vram_size \\",
          "234:         ) \\",
          "235:     )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "640:     for (y = 0; y < lines; y++) {",
          "641:  off_cur = off_begin;",
          "643:  off_cur &= TARGET_PAGE_MASK;",
          "644:  while (off_cur < off_cur_end) {",
          "645:      cpu_physical_memory_set_dirty(s->vram_offset + off_cur);",
          "",
          "[Removed Lines]",
          "642:  off_cur_end = off_cur + bytesperline;",
          "",
          "[Added Lines]",
          "656:  off_cur_end = (off_cur + bytesperline) & s->cirrus_addr_mask;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "654: {",
          "655:     uint8_t *dst;",
          "658:     (*s->cirrus_rop) (s, dst, src,",
          "659:                       s->cirrus_blt_dstpitch, 0,",
          "660:                       s->cirrus_blt_width, s->cirrus_blt_height);",
          "",
          "[Removed Lines]",
          "657:     dst = s->vram_ptr + s->cirrus_blt_dstaddr;",
          "",
          "[Added Lines]",
          "671:     dst = s->vram_ptr + (s->cirrus_blt_dstaddr & s->cirrus_addr_mask);",
          "673:     if (BLTUNSAFE(s))",
          "674:         return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "670: {",
          "671:     cirrus_fill_t rop_func;",
          "673:     rop_func = cirrus_fill[rop_to_index[blt_rop]][s->cirrus_blt_pixelwidth - 1];",
          "675:              s->cirrus_blt_dstpitch,",
          "676:              s->cirrus_blt_width, s->cirrus_blt_height);",
          "677:     cirrus_invalidate_region(s, s->cirrus_blt_dstaddr,",
          "",
          "[Removed Lines]",
          "674:     rop_func(s, s->vram_ptr + s->cirrus_blt_dstaddr,",
          "",
          "[Added Lines]",
          "691:     if (BLTUNSAFE(s))",
          "692:         return 0;",
          "694:     rop_func(s, s->vram_ptr + (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "690: static int cirrus_bitblt_videotovideo_patterncopy(CirrusVGAState * s)",
          "691: {",
          "692:     return cirrus_bitblt_common_patterncopy(s,",
          "695: }",
          "697: static void cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)",
          "",
          "[Removed Lines]",
          "693:          s->vram_ptr +",
          "694:                                             (s->cirrus_blt_srcaddr & ~7));",
          "",
          "[Added Lines]",
          "713:          s->vram_ptr + ((s->cirrus_blt_srcaddr & ~7) &",
          "714:                                             s->cirrus_addr_mask));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "741:     if (notify)",
          "742:  vga_hw_update();",
          "746:         s->cirrus_blt_dstpitch, s->cirrus_blt_srcpitch,",
          "747:         s->cirrus_blt_width, s->cirrus_blt_height);",
          "",
          "[Removed Lines]",
          "744:     (*s->cirrus_rop) (s, s->vram_ptr + s->cirrus_blt_dstaddr,",
          "745:         s->vram_ptr + s->cirrus_blt_srcaddr,",
          "",
          "[Added Lines]",
          "764:     (*s->cirrus_rop) (s, s->vram_ptr +",
          "765:         (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),",
          "766:         s->vram_ptr +",
          "767:         (s->cirrus_blt_srcaddr & s->cirrus_addr_mask),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "768:          s->cirrus_blt_srcaddr - s->start_addr,",
          "769:          s->cirrus_blt_width, s->cirrus_blt_height);",
          "770:     } else {",
          "773:      s->cirrus_blt_dstpitch, s->cirrus_blt_srcpitch,",
          "774:      s->cirrus_blt_width, s->cirrus_blt_height);",
          "",
          "[Removed Lines]",
          "771:  (*s->cirrus_rop) (s, s->vram_ptr + s->cirrus_blt_dstaddr,",
          "772:      s->vram_ptr + s->cirrus_blt_srcaddr,",
          "",
          "[Added Lines]",
          "794:     if (BLTUNSAFE(s))",
          "795:         return 0;",
          "797:  (*s->cirrus_rop) (s, s->vram_ptr +",
          "798:                 (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),",
          "799:      s->vram_ptr +",
          "800:                 (s->cirrus_blt_srcaddr & s->cirrus_addr_mask),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "801:         } else {",
          "803:             do {",
          "806:                 cirrus_invalidate_region(s, s->cirrus_blt_dstaddr, 0,",
          "807:                                          s->cirrus_blt_width, 1);",
          "808:                 s->cirrus_blt_dstaddr += s->cirrus_blt_dstpitch;",
          "",
          "[Removed Lines]",
          "804:                 (*s->cirrus_rop)(s, s->vram_ptr + s->cirrus_blt_dstaddr,",
          "805:                                  s->cirrus_bltbuf, 0, 0, s->cirrus_blt_width, 1);",
          "",
          "[Added Lines]",
          "832:                 (*s->cirrus_rop)(s, s->vram_ptr +",
          "833:                                  (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),",
          "834:                                   s->cirrus_bltbuf, 0, 0, s->cirrus_blt_width, 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1920:     unsigned val = mem_value;",
          "1921:     uint8_t *dst;",
          "1924:     for (x = 0; x < 8; x++) {",
          "1925:  if (val & 0x80) {",
          "",
          "[Removed Lines]",
          "1923:     dst = s->vram_ptr + offset;",
          "",
          "[Added Lines]",
          "1952:     dst = s->vram_ptr + (offset &= s->cirrus_addr_mask);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1943:     unsigned val = mem_value;",
          "1944:     uint8_t *dst;",
          "1947:     for (x = 0; x < 8; x++) {",
          "1948:  if (val & 0x80) {",
          "",
          "[Removed Lines]",
          "1946:     dst = s->vram_ptr + offset;",
          "",
          "[Added Lines]",
          "1975:     dst = s->vram_ptr + (offset &= s->cirrus_addr_mask);",
          "",
          "---------------"
        ],
        "hw/cirrus_vga_rop.h||hw/cirrus_vga_rop.h": [
          "File: hw/cirrus_vga_rop.h -> hw/cirrus_vga_rop.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     int x,y;",
          "32:     dstpitch -= bltwidth;",
          "33:     srcpitch -= bltwidth;",
          "34:     for (y = 0; y < bltheight; y++) {",
          "35:         for (x = 0; x < bltwidth; x++) {",
          "36:             ROP_OP(*dst, *src);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     if (dstpitch < 0 || srcpitch < 0) {",
          "37:         return;",
          "38:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d957bd8cbcbf56f7916d375e65042d767f544b5",
      "candidate_info": {
        "commit_hash": "7d957bd8cbcbf56f7916d375e65042d767f544b5",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/7d957bd8cbcbf56f7916d375e65042d767f544b5",
        "files": [
          "console.c",
          "console.h",
          "curses.c",
          "hw/cirrus_vga.c",
          "hw/nseries.c",
          "hw/palm.c",
          "hw/vga.c",
          "hw/vga_int.h",
          "qemu-common.h",
          "sdl.c",
          "vl.c",
          "vnc.c"
        ],
        "message": "DisplayState interface change (Stefano Stabellini)\n\nThis patch changes the DisplayState interface adding support for\nmultiple frontends at the same time (sdl and vnc) and implements most\nof the benefit of the shared_buf patch without the added complexity.\n\nCurrently DisplayState is managed by sdl (or vnc) and sdl (or vnc) is\nalso responsible for allocating the data and setting the depth.\nVga.c (or another backend) will do any necessary conversion.\n\nThe idea is to change it so that is vga.c (or another backend) together\nwith console.c that fully manage the DisplayState interface allocating\ndata and setting the depth (either 16 or 32 bit, if the guest uses a\ndifferent resolution or is in text mode, vga.c (or another backend) is\nin charge of doing the conversion seamlessly).\n\nThe other idea is that DisplayState supports *multiple* frontends\nlike sdl and vnc; each of them can register some callbacks to be called\nwhen a display event occurs.\n\nThe interesting changes are:\n\n- the new structures and related functions in console.h and console.c\n\nin particular the following functions are very helpful to manage a\nDisplaySurface:\n\nqemu_create_displaysurface\nqemu_resize_displaysurface\nqemu_create_displaysurface_from\nqemu_free_displaysurface\n\n- console_select and qemu_console_resize in console.c\nthis two functions manage multiple consoles on a single host display\n\n- moving code around in hw/vga.c\nas for the shared_buf patch this is necessary to be able to handle a dynamic\nDisplaySurface bpp\n\n- changes to vga_draw_graphic in hw/vga.c\nthis is the place where the DisplaySurface buffer is shared with the\nvideoram, when possible;\n\n\nCompared to the last version the only changes are:\n\n- do not remove support to dpy_copy in cirrus_vga\n- change the name of the displaysurface handling functions\n\nSigned-off-by: Stefano Stabellini <stefano.stabellini@eu.citrix.com>\nSigned-off-by: Anthony Liguori <aliguori@us.ibm.com>\n\n\n\ngit-svn-id: svn://svn.savannah.nongnu.org/qemu/trunk@6336 c046a42c-6fe2-441c-8c8c-71466251a162",
        "before_after_code_files": [
          "console.c||console.c",
          "console.h||console.h",
          "curses.c||curses.c",
          "hw/cirrus_vga.c||hw/cirrus_vga.c",
          "hw/nseries.c||hw/nseries.c",
          "hw/palm.c||hw/palm.c",
          "hw/vga.c||hw/vga.c",
          "hw/vga_int.h||hw/vga_int.h",
          "qemu-common.h||qemu-common.h",
          "sdl.c||sdl.c",
          "vl.c||vl.c",
          "vnc.c||vnc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/cirrus_vga.c||hw/cirrus_vga.c"
          ],
          "candidate": [
            "hw/cirrus_vga.c||hw/cirrus_vga.c"
          ]
        }
      },
      "candidate_diff": {
        "console.c||console.c": [
          "File: console.c -> console.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1045:     if (index >= MAX_CONSOLES)",
          "1046:         return;",
          "1047:     s = consoles[index];",
          "1048:     if (s) {",
          "1049:         active_console = s;",
          "1053:         vga_hw_invalidate();",
          "1054:     }",
          "1055: }",
          "",
          "[Removed Lines]",
          "1050:         if (s->console_type != TEXT_CONSOLE && s->g_width && s->g_height",
          "1051:             && (s->g_width != ds_get_width(s->ds) || s->g_height != ds_get_height(s->ds)))",
          "1052:             dpy_resize(s->ds, s->g_width, s->g_height);",
          "",
          "[Added Lines]",
          "1047:     active_console->g_width = ds_get_width(active_console->ds);",
          "1048:     active_console->g_height = ds_get_height(active_console->ds);",
          "1051:         DisplayState *ds = s->ds;",
          "1053:         ds->surface = qemu_resize_displaysurface(ds->surface, s->g_width,",
          "1054:                                                 s->g_height, 32, 4 * s->g_width);",
          "1055:         dpy_resize(s->ds);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1157: static void text_console_invalidate(void *opaque)",
          "1158: {",
          "1159:     TextConsole *s = (TextConsole *) opaque;",
          "1170:     console_refresh(s);",
          "1171: }",
          "",
          "[Removed Lines]",
          "1161:     if (s->g_width != ds_get_width(s->ds) || s->g_height != ds_get_height(s->ds)) {",
          "1162:         if (s->console_type == TEXT_CONSOLE_FIXED_SIZE)",
          "1163:             dpy_resize(s->ds, s->g_width, s->g_height);",
          "1164:         else {",
          "1165:             s->g_width = ds_get_width(s->ds);",
          "1166:             s->g_height = ds_get_height(s->ds);",
          "1167:             text_console_resize(s);",
          "1168:         }",
          "1169:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1347: void qemu_console_resize(QEMUConsole *console, int width, int height)",
          "1348: {",
          "1356:     }",
          "1357: }",
          "",
          "[Removed Lines]",
          "1349:     if (console->g_width != width || console->g_height != height",
          "1350:         || !ds_get_data(console->ds)) {",
          "1351:         console->g_width = width;",
          "1352:         console->g_height = height;",
          "1353:         if (active_console == console) {",
          "1354:             dpy_resize(console->ds, width, height);",
          "1355:         }",
          "",
          "[Added Lines]",
          "1342:     console->g_width = width;",
          "1343:     console->g_height = height;",
          "1344:     if (active_console == console) {",
          "1345:         DisplayState *ds = console->ds;",
          "1346:         ds->surface = qemu_resize_displaysurface(ds->surface, width, height, 32, 4 * width);",
          "1347:         dpy_resize(console->ds);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1360:                 int dst_x, int dst_y, int w, int h)",
          "1361: {",
          "1362:     if (active_console == console) {",
          "1370:     }",
          "1371: }",
          "",
          "[Removed Lines]",
          "1363:         if (console->ds->dpy_copy)",
          "1364:             console->ds->dpy_copy(console->ds,",
          "1365:                             src_x, src_y, dst_x, dst_y, w, h);",
          "1366:         else {",
          "1368:             console->ds->dpy_update(console->ds, dst_x, dst_y, w, h);",
          "1369:         }",
          "",
          "[Added Lines]",
          "1355:             dpy_copy(console->ds, src_x, src_y, dst_x, dst_y, w, h);",
          "1359: static PixelFormat qemu_default_pixelformat(int bpp)",
          "1360: {",
          "1361:     PixelFormat pf;",
          "1363:     memset(&pf, 0x00, sizeof(PixelFormat));",
          "1365:     pf.bits_per_pixel = bpp;",
          "1366:     pf.bytes_per_pixel = bpp / 8;",
          "1367:     pf.depth = bpp == 32 ? 24 : bpp;",
          "1369:     switch (bpp) {",
          "1370:         case 8:",
          "1371:             pf.rmask = 0x000000E0;",
          "1372:             pf.gmask = 0x0000001C;",
          "1373:             pf.bmask = 0x00000003;",
          "1374:             pf.rmax = 7;",
          "1375:             pf.gmax = 7;",
          "1376:             pf.bmax = 3;",
          "1377:             pf.rshift = 5;",
          "1378:             pf.gshift = 2;",
          "1379:             pf.bshift = 0;",
          "1380:             break;",
          "1381:         case 16:",
          "1382:             pf.rmask = 0x0000F800;",
          "1383:             pf.gmask = 0x000007E0;",
          "1384:             pf.bmask = 0x0000001F;",
          "1385:             pf.rmax = 31;",
          "1386:             pf.gmax = 63;",
          "1387:             pf.bmax = 31;",
          "1388:             pf.rshift = 11;",
          "1389:             pf.gshift = 5;",
          "1390:             pf.bshift = 0;",
          "1391:             break;",
          "1392:         case 24:",
          "1393:         case 32:",
          "1394:             pf.rmask = 0x00FF0000;",
          "1395:             pf.gmask = 0x0000FF00;",
          "1396:             pf.bmask = 0x000000FF;",
          "1397:             pf.rmax = 255;",
          "1398:             pf.gmax = 255;",
          "1399:             pf.bmax = 255;",
          "1400:             pf.rshift = 16;",
          "1401:             pf.gshift = 8;",
          "1402:             pf.bshift = 0;",
          "1403:             break;",
          "1404:         default:",
          "1405:             break;",
          "1406:     }",
          "1407:     return pf;",
          "1408: }",
          "1410: DisplaySurface* qemu_create_displaysurface(int width, int height, int bpp, int linesize)",
          "1411: {",
          "1412:     DisplaySurface *surface = (DisplaySurface*) qemu_mallocz(sizeof(DisplaySurface));",
          "1413:     if (surface == NULL) {",
          "1414:         fprintf(stderr, \"qemu_create_displaysurface: malloc failed\\n\");",
          "1415:         exit(1);",
          "1416:     }",
          "1418:     surface->width = width;",
          "1419:     surface->height = height;",
          "1420:     surface->linesize = linesize;",
          "1421:     surface->pf = qemu_default_pixelformat(bpp);",
          "1422: #ifdef WORDS_BIGENDIAN",
          "1423:     surface->flags = QEMU_ALLOCATED_FLAG | QEMU_BIG_ENDIAN_FLAG;",
          "1424: #else",
          "1425:     surface->flags = QEMU_ALLOCATED_FLAG;",
          "1426: #endif",
          "1427:     surface->data = (uint8_t*) qemu_mallocz(surface->linesize * surface->height);",
          "1428:     if (surface->data == NULL) {",
          "1429:         fprintf(stderr, \"qemu_create_displaysurface: malloc failed\\n\");",
          "1430:         exit(1);",
          "1431:     }",
          "1433:     return surface;",
          "1434: }",
          "1436: DisplaySurface* qemu_resize_displaysurface(DisplaySurface *surface,",
          "1437:                                           int width, int height, int bpp, int linesize)",
          "1438: {",
          "1439:     surface->width = width;",
          "1440:     surface->height = height;",
          "1441:     surface->linesize = linesize;",
          "1442:     surface->pf = qemu_default_pixelformat(bpp);",
          "1443:     if (surface->flags & QEMU_ALLOCATED_FLAG)",
          "1444:         surface->data = (uint8_t*) qemu_realloc(surface->data, surface->linesize * surface->height);",
          "1445:     else",
          "1446:         surface->data = (uint8_t*) qemu_malloc(surface->linesize * surface->height);",
          "1447:     if (surface->data == NULL) {",
          "1448:         fprintf(stderr, \"qemu_resize_displaysurface: malloc failed\\n\");",
          "1449:         exit(1);",
          "1450:     }",
          "1451: #ifdef WORDS_BIGENDIAN",
          "1452:     surface->flags = QEMU_ALLOCATED_FLAG | QEMU_BIG_ENDIAN_FLAG;",
          "1453: #else",
          "1454:     surface->flags = QEMU_ALLOCATED_FLAG;",
          "1455: #endif",
          "1457:     return surface;",
          "1458: }",
          "1460: DisplaySurface* qemu_create_displaysurface_from(int width, int height, int bpp,",
          "1461:                                               int linesize, uint8_t *data)",
          "1462: {",
          "1463:     DisplaySurface *surface = (DisplaySurface*) qemu_mallocz(sizeof(DisplaySurface));",
          "1464:     if (surface == NULL) {",
          "1465:         fprintf(stderr, \"qemu_create_displaysurface_from: malloc failed\\n\");",
          "1466:         exit(1);",
          "1467:     }",
          "1469:     surface->width = width;",
          "1470:     surface->height = height;",
          "1471:     surface->linesize = linesize;",
          "1472:     surface->pf = qemu_default_pixelformat(bpp);",
          "1473: #ifdef WORDS_BIGENDIAN",
          "1474:     surface->flags = QEMU_BIG_ENDIAN_FLAG;",
          "1475: #endif",
          "1476:     surface->data = data;",
          "1478:     return surface;",
          "1479: }",
          "1481: void qemu_free_displaysurface(DisplaySurface *surface)",
          "1482: {",
          "1483:     if (surface == NULL)",
          "1484:         return;",
          "1485:     if (surface->flags & QEMU_ALLOCATED_FLAG)",
          "1486:         qemu_free(surface->data);",
          "1487:     qemu_free(surface);",
          "1488: }",
          "",
          "---------------"
        ],
        "console.h||console.h": [
          "File: console.h -> console.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     int width;",
          "82:     int height;",
          "85:     uint64_t gui_timer_interval;",
          "88:     void (*dpy_update)(struct DisplayState *s, int x, int y, int w, int h);",
          "90:     void (*dpy_refresh)(struct DisplayState *s);",
          "91:     void (*dpy_copy)(struct DisplayState *s, int src_x, int src_y,",
          "92:                      int dst_x, int dst_y, int w, int h);",
          "93:     void (*dpy_fill)(struct DisplayState *s, int x, int y,",
          "94:                      int w, int h, uint32_t c);",
          "95:     void (*dpy_text_cursor)(struct DisplayState *s, int x, int y);",
          "96:     void (*mouse_set)(int x, int y, int on);",
          "97:     void (*cursor_define)(int width, int height, int bpp, int hot_x, int hot_y,",
          "98:                           uint8_t *image, uint8_t *mask);",
          "99: };",
          "101: static inline void dpy_update(DisplayState *s, int x, int y, int w, int h)",
          "102: {",
          "104: }",
          "107: {",
          "109: }",
          "112: {",
          "115: }",
          "117: static inline int ds_get_linesize(DisplayState *ds)",
          "118: {",
          "120: }",
          "122: static inline uint8_t* ds_get_data(DisplayState *ds)",
          "123: {",
          "125: }",
          "127: static inline int ds_get_width(DisplayState *ds)",
          "128: {",
          "130: }",
          "132: static inline int ds_get_height(DisplayState *ds)",
          "133: {",
          "135: }",
          "137: static inline int ds_get_bits_per_pixel(DisplayState *ds)",
          "138: {",
          "140: }",
          "142: static inline int ds_get_bytes_per_pixel(DisplayState *ds)",
          "143: {",
          "145: }",
          "147: typedef unsigned long console_ch_t;",
          "",
          "[Removed Lines]",
          "76: struct DisplayState {",
          "77:     uint8_t *data;",
          "78:     int linesize;",
          "79:     int depth;",
          "83:     void *opaque;",
          "84:     struct QEMUTimer *gui_timer;",
          "89:     void (*dpy_resize)(struct DisplayState *s, int w, int h);",
          "103:     s->dpy_update(s, x, y, w, h);",
          "106: static inline void dpy_resize(DisplayState *s, int w, int h)",
          "108:     s->dpy_resize(s, w, h);",
          "111: static inline void dpy_cursor(DisplayState *s, int x, int y)",
          "113:     if (s->dpy_text_cursor)",
          "114:         s->dpy_text_cursor(s, x, y);",
          "119:     return ds->linesize;",
          "124:     return ds->data;",
          "129:     return ds->width;",
          "134:     return ds->height;",
          "139:     return ds->depth;",
          "144:     return (ds->depth / 8);",
          "",
          "[Added Lines]",
          "76: #define QEMU_BIG_ENDIAN_FLAG    0x01",
          "77: #define QEMU_ALLOCATED_FLAG     0x02",
          "79: struct PixelFormat {",
          "80:     uint8_t bits_per_pixel;",
          "81:     uint8_t bytes_per_pixel;",
          "83:     uint32_t rmask, gmask, bmask, amask;",
          "84:     uint8_t rshift, gshift, bshift, ashift;",
          "85:     uint8_t rmax, gmax, bmax, amax;",
          "86: };",
          "88: struct DisplaySurface {",
          "89:     uint8_t flags;",
          "93:     uint8_t *data;",
          "95:     struct PixelFormat pf;",
          "96: };",
          "98: struct DisplayChangeListener {",
          "99:     int idle;",
          "103:     void (*dpy_resize)(struct DisplayState *s);",
          "104:     void (*dpy_setdata)(struct DisplayState *s);",
          "112:     struct DisplayChangeListener *next;",
          "113: };",
          "115: struct DisplayState {",
          "116:     struct DisplaySurface *surface;",
          "117:     void *opaque;",
          "118:     struct QEMUTimer *gui_timer;",
          "120:     struct DisplayChangeListener* listeners;",
          "127: DisplaySurface* qemu_create_displaysurface(int width, int height, int bpp, int linesize);",
          "128: DisplaySurface* qemu_resize_displaysurface(DisplaySurface *surface,",
          "129:                                            int width, int height, int bpp, int linesize);",
          "130: DisplaySurface* qemu_create_displaysurface_from(int width, int height, int bpp,",
          "131:                                                 int linesize, uint8_t *data);",
          "132: void qemu_free_displaysurface(DisplaySurface *surface);",
          "134: static inline int is_buffer_shared(DisplaySurface *surface)",
          "135: {",
          "136:     return (!(surface->flags & QEMU_ALLOCATED_FLAG));",
          "137: }",
          "139: static inline void register_displaychangelistener(DisplayState *ds, DisplayChangeListener *dcl)",
          "140: {",
          "141:     dcl->next = ds->listeners;",
          "142:     ds->listeners = dcl;",
          "143: }",
          "147:     struct DisplayChangeListener *dcl = s->listeners;",
          "148:     while (dcl != NULL) {",
          "149:         dcl->dpy_update(s, x, y, w, h);",
          "150:         dcl = dcl->next;",
          "151:     }",
          "154: static inline void dpy_resize(DisplayState *s)",
          "156:     struct DisplayChangeListener *dcl = s->listeners;",
          "157:     while (dcl != NULL) {",
          "158:         dcl->dpy_resize(s);",
          "159:         dcl = dcl->next;",
          "160:     }",
          "163: static inline void dpy_setdata(DisplayState *s)",
          "165:     struct DisplayChangeListener *dcl = s->listeners;",
          "166:     while (dcl != NULL) {",
          "167:         if (dcl->dpy_setdata) dcl->dpy_setdata(s);",
          "168:         dcl = dcl->next;",
          "169:     }",
          "170: }",
          "172: static inline void dpy_refresh(DisplayState *s)",
          "173: {",
          "174:     struct DisplayChangeListener *dcl = s->listeners;",
          "175:     while (dcl != NULL) {",
          "176:         if (dcl->dpy_refresh) dcl->dpy_refresh(s);",
          "177:         dcl = dcl->next;",
          "178:     }",
          "179: }",
          "181: static inline void dpy_copy(struct DisplayState *s, int src_x, int src_y,",
          "182:                              int dst_x, int dst_y, int w, int h) {",
          "183:     struct DisplayChangeListener *dcl = s->listeners;",
          "184:     while (dcl != NULL) {",
          "185:         if (dcl->dpy_copy)",
          "186:             dcl->dpy_copy(s, src_x, src_y, dst_x, dst_y, w, h);",
          "188:             dcl->dpy_update(s, dst_x, dst_y, w, h);",
          "189:         dcl = dcl->next;",
          "190:     }",
          "191: }",
          "193: static inline void dpy_fill(struct DisplayState *s, int x, int y,",
          "194:                              int w, int h, uint32_t c) {",
          "195:     struct DisplayChangeListener *dcl = s->listeners;",
          "196:     while (dcl != NULL) {",
          "197:         if (dcl->dpy_fill) dcl->dpy_fill(s, x, y, w, h, c);",
          "198:         dcl = dcl->next;",
          "199:     }",
          "200: }",
          "202: static inline void dpy_cursor(struct DisplayState *s, int x, int y) {",
          "203:     struct DisplayChangeListener *dcl = s->listeners;",
          "204:     while (dcl != NULL) {",
          "205:         if (dcl->dpy_text_cursor) dcl->dpy_text_cursor(s, x, y);",
          "206:         dcl = dcl->next;",
          "207:     }",
          "212:     return ds->surface->linesize;",
          "217:     return ds->surface->data;",
          "222:     return ds->surface->width;",
          "227:     return ds->surface->height;",
          "232:     return ds->surface->pf.bits_per_pixel;",
          "237:     return ds->surface->pf.bytes_per_pixel;",
          "",
          "---------------"
        ],
        "curses.c||curses.c": [
          "File: curses.c -> curses.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     }",
          "98: }",
          "101: {",
          "103:         return;",
          "108:     curses_calc_pad();",
          "109: }",
          "",
          "[Removed Lines]",
          "100: static void curses_resize(DisplayState *ds, int w, int h)",
          "102:     if (w == gwidth && h == gheight)",
          "105:     gwidth = w;",
          "106:     gheight = h;",
          "",
          "[Added Lines]",
          "100: static void curses_resize(DisplayState *ds)",
          "102:     if (ds_get_width(ds) == gwidth && ds_get_height(ds) == gheight)",
          "105:     gwidth = ds_get_width(ds);",
          "106:     gheight = ds_get_height(ds);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:         clear();",
          "170:         refresh();",
          "171:         curses_calc_pad();",
          "174:         vga_hw_invalidate();",
          "175:         invalidate = 0;",
          "176:     }",
          "",
          "[Removed Lines]",
          "172:         ds->width = FONT_WIDTH * width;",
          "173:         ds->height = FONT_HEIGHT * height;",
          "",
          "[Added Lines]",
          "172:         ds->surface->width = FONT_WIDTH * width;",
          "173:         ds->surface->height = FONT_HEIGHT * height;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:             refresh();",
          "198:             curses_calc_pad();",
          "199:             curses_update(ds, 0, 0, width, height);",
          "202:             continue;",
          "203:         }",
          "204: #endif",
          "",
          "[Removed Lines]",
          "200:             ds->width = FONT_WIDTH * width;",
          "201:             ds->height = FONT_HEIGHT * height;",
          "",
          "[Added Lines]",
          "200:             ds->surface->width = FONT_WIDTH * width;",
          "201:             ds->surface->height = FONT_HEIGHT * height;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "339: void curses_display_init(DisplayState *ds, int full_screen)",
          "340: {",
          "341: #ifndef _WIN32",
          "342:     if (!isatty(1)) {",
          "343:         fprintf(stderr, \"We need a terminal output\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:     DisplayChangeListener *dcl;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "357: #endif",
          "358: #endif",
          "370:     invalidate = 1;",
          "374: }",
          "",
          "[Removed Lines]",
          "360:     ds->data = (void *) screen;",
          "361:     ds->linesize = 0;",
          "362:     ds->depth = 0;",
          "363:     ds->width = 640;",
          "364:     ds->height = 400;",
          "365:     ds->dpy_update = curses_update;",
          "366:     ds->dpy_resize = curses_resize;",
          "367:     ds->dpy_refresh = curses_refresh;",
          "368:     ds->dpy_text_cursor = curses_cursor_position;",
          "373:     curses_resize(ds, 80, 25);",
          "",
          "[Added Lines]",
          "361:     dcl = (DisplayChangeListener *) qemu_mallocz(sizeof(DisplayChangeListener));",
          "362:     if (!dcl)",
          "363:         exit(1);",
          "364:     dcl->dpy_update = curses_update;",
          "365:     dcl->dpy_resize = curses_resize;",
          "366:     dcl->dpy_refresh = curses_refresh;",
          "367:     dcl->dpy_text_cursor = curses_cursor_position;",
          "368:     register_displaychangelistener(ds, dcl);",
          "369:     qemu_free_displaysurface(ds->surface);",
          "370:     ds->surface = qemu_create_displaysurface_from(80, 25, 0, 0, (uint8_t*) screen);",
          "375:     curses_resize(ds);",
          "",
          "---------------"
        ],
        "hw/cirrus_vga.c||hw/cirrus_vga.c": [
          "File: hw/cirrus_vga.c -> hw/cirrus_vga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "793:     if (BLTUNSAFE(s))",
          "794:         return 0;",
          "813:     return 1;",
          "814: }",
          "",
          "[Removed Lines]",
          "796:     if (s->ds->dpy_copy) {",
          "797:  cirrus_do_copy(s, s->cirrus_blt_dstaddr - s->start_addr,",
          "798:          s->cirrus_blt_srcaddr - s->start_addr,",
          "799:          s->cirrus_blt_width, s->cirrus_blt_height);",
          "800:     } else {",
          "801:  (*s->cirrus_rop) (s, s->vram_ptr +",
          "802:                 (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),",
          "803:      s->vram_ptr +",
          "804:                 (s->cirrus_blt_srcaddr & s->cirrus_addr_mask),",
          "805:      s->cirrus_blt_dstpitch, s->cirrus_blt_srcpitch,",
          "806:      s->cirrus_blt_width, s->cirrus_blt_height);",
          "808:  cirrus_invalidate_region(s, s->cirrus_blt_dstaddr,",
          "809:      s->cirrus_blt_dstpitch, s->cirrus_blt_width,",
          "810:      s->cirrus_blt_height);",
          "811:     }",
          "",
          "[Added Lines]",
          "796:     cirrus_do_copy(s, s->cirrus_blt_dstaddr - s->start_addr,",
          "797:             s->cirrus_blt_srcaddr - s->start_addr,",
          "798:             s->cirrus_blt_width, s->cirrus_blt_height);",
          "",
          "---------------"
        ],
        "hw/nseries.c||hw/nseries.c": [
          "File: hw/nseries.c -> hw/nseries.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1361:        will set the size once configured, so this just sets an initial",
          "1364: }",
          "1366: static struct arm_boot_info n800_binfo = {",
          "",
          "[Removed Lines]",
          "1363:     dpy_resize(ds, 800, 480);",
          "",
          "[Added Lines]",
          "1363:     ds->surface = qemu_resize_displaysurface(ds->surface, 800, 480, 32, 4 * 800);",
          "1364:     dpy_resize(ds);",
          "",
          "---------------"
        ],
        "hw/palm.c||hw/palm.c": [
          "File: hw/palm.c -> hw/palm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:        will set the size once configured, so this just sets an initial",
          "281: }",
          "283: QEMUMachine palmte_machine = {",
          "",
          "[Removed Lines]",
          "280:     dpy_resize(ds, 320, 320);",
          "",
          "[Added Lines]",
          "280:     ds->surface = qemu_resize_displaysurface(ds->surface, 320, 320, 32, 4 * 320);",
          "281:     dpy_resize(ds);",
          "",
          "---------------"
        ],
        "hw/vga.c||hw/vga.c": [
          "File: hw/vga.c -> hw/vga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1244: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1246: typedef unsigned int rgb_to_pixel_dup_func(unsigned int r, unsigned int g, unsigned b);",
          "1248: static rgb_to_pixel_dup_func *rgb_to_pixel_dup_table[NB_DEPTHS];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1267:     vga_dirty_log_stop(s);",
          "1273:     v = s->sr[3];",
          "1274:     offset = (((v >> 4) & 1) | ((v << 1) & 6)) * 8192 * 4 + 2;",
          "",
          "[Removed Lines]",
          "1269:     full_update |= update_palette16(s);",
          "1270:     palette = s->last_palette;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1303:     }",
          "1305:     if (width != s->last_width || height != s->last_height ||",
          "1307:         s->last_scr_width = width * cw;",
          "1308:         s->last_scr_height = height * cheight;",
          "1309:         qemu_console_resize(s->console, s->last_scr_width, s->last_scr_height);",
          "1310:         s->last_width = width;",
          "1311:         s->last_height = height;",
          "1312:         s->last_ch = cheight;",
          "1313:         s->last_cw = cw;",
          "1314:         full_update = 1;",
          "1315:     }",
          "1316:     cursor_offset = ((s->cr[0x0e] << 8) | s->cr[0x0f]) - s->start_addr;",
          "1317:     if (cursor_offset != s->cursor_offset ||",
          "1318:         s->cr[0xa] != s->cursor_start ||",
          "",
          "[Removed Lines]",
          "1306:         cw != s->last_cw || cheight != s->last_ch) {",
          "",
          "[Added Lines]",
          "1307:         cw != s->last_cw || cheight != s->last_ch || s->last_depth) {",
          "1311:         s->last_depth = 0;",
          "1318:     s->rgb_to_pixel =",
          "1319:         rgb_to_pixel_dup_table[get_depth_index(s->ds)];",
          "1320:     full_update |= update_palette16(s);",
          "1321:     palette = s->last_palette;",
          "1322:     x_incr = cw * ((ds_get_bits_per_pixel(s->ds) + 7) >> 3);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1504:     vga_draw_line32_16bgr,",
          "1505: };",
          "1509: static rgb_to_pixel_dup_func *rgb_to_pixel_dup_table[NB_DEPTHS] = {",
          "1510:     rgb_to_pixel8_dup,",
          "1511:     rgb_to_pixel15_dup,",
          "",
          "[Removed Lines]",
          "1507: typedef unsigned int rgb_to_pixel_dup_func(unsigned int r, unsigned int g, unsigned b);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1581: static void vga_draw_graphic(VGAState *s, int full_update)",
          "1582: {",
          "1584:     int width, height, shift_control, line_offset, page0, page1, bwidth, bits;",
          "1585:     int disp_width, multi_scan, multi_run;",
          "1586:     uint8_t *d;",
          "",
          "[Removed Lines]",
          "1583:     int y1, y, update, page_min, page_max, linesize, y_start, double_scan, mask;",
          "",
          "[Added Lines]",
          "1589:     int y1, y, update, page_min, page_max, linesize, y_start, double_scan, mask, depth;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1663:     }",
          "1664:     vga_draw_line = vga_draw_line_table[v * NB_DEPTHS + get_depth_index(s->ds)];",
          "1669:         s->last_scr_width = disp_width;",
          "1670:         s->last_scr_height = height;",
          "1671:         s->last_width = disp_width;",
          "1672:         s->last_height = height;",
          "1673:         full_update = 1;",
          "1674:     }",
          "1676:         s->cursor_invalidate(s);",
          "1678:     line_offset = s->line_offset;",
          "",
          "[Removed Lines]",
          "1666:     if (disp_width != s->last_width ||",
          "1667:         height != s->last_height) {",
          "1668:         qemu_console_resize(s->console, disp_width, height);",
          "1675:     if (s->cursor_invalidate)",
          "",
          "[Added Lines]",
          "1672:     depth = s->get_bpp(s);",
          "1673:     if (s->line_offset != s->last_line_offset ||",
          "1674:         disp_width != s->last_width ||",
          "1675:         height != s->last_height ||",
          "1676:         s->last_depth != depth) {",
          "1677:         if (depth == 16 || depth == 32) {",
          "1678:             if (is_graphic_console()) {",
          "1679:                 qemu_free_displaysurface(s->ds->surface);",
          "1680:                 s->ds->surface = qemu_create_displaysurface_from(disp_width, height, depth,",
          "1681:                                                                s->line_offset,",
          "1682:                                                                s->vram_ptr + (s->start_addr * 4));",
          "1683:                 dpy_resize(s->ds);",
          "1684:             } else {",
          "1685:                 qemu_console_resize(s->console, disp_width, height);",
          "1686:             }",
          "1687:         } else {",
          "1688:             qemu_console_resize(s->console, disp_width, height);",
          "1689:         }",
          "1694:         s->last_line_offset = s->line_offset;",
          "1695:         s->last_depth = depth;",
          "1697:     } else if (is_graphic_console() && is_buffer_shared(s->ds->surface) &&",
          "1698:                (full_update || s->ds->surface->data != s->vram_ptr + (s->start_addr * 4))) {",
          "1699:         s->ds->surface->data = s->vram_ptr + (s->start_addr * 4);",
          "1700:         dpy_setdata(s->ds);",
          "1703:     s->rgb_to_pixel =",
          "1704:         rgb_to_pixel_dup_table[get_depth_index(s->ds)];",
          "1706:     if (!is_buffer_shared(s->ds->surface) && s->cursor_invalidate)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1718:                 page_min = page0;",
          "1719:             if (page1 > page_max)",
          "1720:                 page_max = page1;",
          "1724:         } else {",
          "1725:             if (y_start >= 0) {",
          "",
          "[Removed Lines]",
          "1721:             vga_draw_line(s, d, s->vram_ptr + addr, width);",
          "1722:             if (s->cursor_draw_line)",
          "1723:                 s->cursor_draw_line(s, d, y);",
          "",
          "[Added Lines]",
          "1752:             if (!(is_buffer_shared(s->ds->surface))) {",
          "1753:                 vga_draw_line(s, d, s->vram_ptr + addr, width);",
          "1754:                 if (s->cursor_draw_line)",
          "1755:                     s->cursor_draw_line(s, d, y);",
          "1756:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1767:         return;",
          "1768:     vga_dirty_log_stop(s);",
          "1770:     if (ds_get_bits_per_pixel(s->ds) == 8)",
          "1771:         val = s->rgb_to_pixel(0, 0, 0);",
          "1772:     else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1803:     s->rgb_to_pixel =",
          "1804:         rgb_to_pixel_dup_table[get_depth_index(s->ds)];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1793:     if (ds_get_bits_per_pixel(s->ds) == 0) {",
          "1795:     } else {",
          "1799:         full_update = 0;",
          "1800:         if (!(s->ar_index & 0x20)) {",
          "1801:             graphic_mode = GMODE_BLANK;",
          "",
          "[Removed Lines]",
          "1796:         s->rgb_to_pixel =",
          "1797:             rgb_to_pixel_dup_table[get_depth_index(s->ds)];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1966:             cw != s->last_cw || cheight != s->last_ch) {",
          "1967:             s->last_scr_width = width * cw;",
          "1968:             s->last_scr_height = height * cheight;",
          "1970:             s->last_width = width;",
          "1971:             s->last_height = height;",
          "1972:             s->last_ch = cheight;",
          "",
          "[Removed Lines]",
          "1969:             qemu_console_resize(s->console, width, height);",
          "",
          "[Added Lines]",
          "2001:             s->ds->surface->width = width;",
          "2002:             s->ds->surface->height = height;",
          "2003:             dpy_resize(s->ds);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2047:     s->last_width = 60;",
          "2048:     s->last_height = height = 3;",
          "2049:     dpy_cursor(s->ds, -1, -1);",
          "2052:     for (dst = chardata, i = 0; i < s->last_width * height; i ++)",
          "2053:         console_write_ch(dst ++, ' ');",
          "",
          "[Removed Lines]",
          "2050:     qemu_console_resize(s->console, s->last_width, height);",
          "",
          "[Added Lines]",
          "2084:     s->ds->surface->width = s->last_width;",
          "2085:     s->ds->surface->height = height;",
          "2086:     dpy_resize(s->ds);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2505: {",
          "2506: }",
          "2509: {",
          "2514: }",
          "2516: static void vga_save_dpy_refresh(DisplayState *s)",
          "",
          "[Removed Lines]",
          "2508: static void vga_save_dpy_resize(DisplayState *s, int w, int h)",
          "2510:     s->linesize = w * 4;",
          "2511:     s->data = qemu_mallocz(h * s->linesize);",
          "2512:     vga_save_w = w;",
          "2513:     vga_save_h = h;",
          "",
          "[Added Lines]",
          "2544: static void vga_save_dpy_resize(DisplayState *s)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2570:                                    int w, int h)",
          "2571: {",
          "2572:     DisplayState *saved_ds, ds1, *ds = &ds1;",
          "2575:     vga_invalidate_display(s);",
          "2576:     saved_ds = s->ds;",
          "2578:     memset(ds, 0, sizeof(DisplayState));",
          "2586:     s->ds = ds;",
          "2587:     s->graphic_mode = -1;",
          "2588:     vga_update_display(s);",
          "2591:     s->ds = saved_ds;",
          "2592: }",
          "",
          "[Removed Lines]",
          "2579:     ds->dpy_update = vga_save_dpy_update;",
          "2580:     ds->dpy_resize = vga_save_dpy_resize;",
          "2581:     ds->dpy_refresh = vga_save_dpy_refresh;",
          "2582:     ds->depth = 32;",
          "2584:     ds->linesize = w * sizeof(uint32_t);",
          "2585:     ds->data = qemu_mallocz(h * ds->linesize);",
          "2589:     ppm_save(filename, ds->data, w, h, ds->linesize);",
          "2590:     qemu_free(ds->data);",
          "",
          "[Added Lines]",
          "2605:     DisplayChangeListener dcl;",
          "2612:     memset(&dcl, 0, sizeof(DisplayChangeListener));",
          "2613:     dcl.dpy_update = vga_save_dpy_update;",
          "2614:     dcl.dpy_resize = vga_save_dpy_resize;",
          "2615:     dcl.dpy_refresh = vga_save_dpy_refresh;",
          "2616:     register_displaychangelistener(ds, &dcl);",
          "2617:     ds->surface = qemu_create_displaysurface(ds_get_width(saved_ds),",
          "2618:             ds_get_height(saved_ds), 32, 4 * ds_get_width(saved_ds));",
          "2624:     ppm_save(filename, ds_get_data(ds), vga_save_w, vga_save_h,",
          "2625:             ds_get_linesize(ds));",
          "2627:     qemu_free_displaysurface(ds->surface);",
          "",
          "---------------"
        ],
        "hw/vga_int.h||hw/vga_int.h": [
          "File: hw/vga_int.h -> hw/vga_int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:     uint32_t line_compare;                                              \\",
          "155:     uint32_t start_addr;                                                \\",
          "156:     uint32_t plane_updated;                                             \\",
          "157:     uint8_t last_cw, last_ch;                                           \\",
          "158:     uint32_t last_width, last_height; /* in chars or pixels */          \\",
          "159:     uint32_t last_scr_width, last_scr_height; /* in pixels */           \\",
          "160:     uint8_t cursor_start, cursor_end;                                   \\",
          "161:     uint32_t cursor_offset;                                             \\",
          "162:     unsigned int (*rgb_to_pixel)(unsigned int r,                        \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:     uint32_t last_line_offset;                                          \\",
          "161:     uint32_t last_depth; /* in bits */                                  \\",
          "",
          "---------------"
        ],
        "qemu-common.h||qemu-common.h": [
          "File: qemu-common.h -> qemu-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: typedef struct AudioState AudioState;",
          "167: typedef struct BlockDriverState BlockDriverState;",
          "168: typedef struct DisplayState DisplayState;",
          "169: typedef struct TextConsole TextConsole;",
          "170: typedef TextConsole QEMUConsole;",
          "171: typedef struct CharDriverState CharDriverState;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: typedef struct DisplayChangeListener DisplayChangeListener;",
          "170: typedef struct DisplaySurface DisplaySurface;",
          "171: typedef struct PixelFormat PixelFormat;",
          "",
          "---------------"
        ],
        "sdl.c||sdl.c": [
          "File: sdl.c -> sdl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <signal.h>",
          "32: #endif",
          "36: static int last_vm_running;",
          "37: static int gui_saved_grab;",
          "",
          "[Removed Lines]",
          "34: static SDL_Surface *screen;",
          "",
          "[Added Lines]",
          "34: static DisplayChangeListener *dcl;",
          "35: static SDL_Surface *real_screen;",
          "36: static SDL_Surface *guest_screen = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: static void sdl_update(DisplayState *ds, int x, int y, int w, int h)",
          "54: {",
          "57: }",
          "60: {",
          "61:     int flags;",
          "",
          "[Removed Lines]",
          "56:     SDL_UpdateRect(screen, x, y, w, h);",
          "59: static void sdl_resize(DisplayState *ds, int w, int h)",
          "",
          "[Added Lines]",
          "57:     SDL_Rect rec;",
          "58:     rec.x = x;",
          "59:     rec.y = y;",
          "60:     rec.w = w;",
          "61:     rec.h = h;",
          "64:     SDL_BlitSurface(guest_screen, &rec, real_screen, &rec);",
          "65:     SDL_Flip(real_screen);",
          "66: }",
          "68: static void sdl_setdata(DisplayState *ds)",
          "69: {",
          "70:     SDL_Rect rec;",
          "71:     rec.x = 0;",
          "72:     rec.y = 0;",
          "73:     rec.w = real_screen->w;",
          "74:     rec.h = real_screen->h;",
          "76:     if (guest_screen != NULL) SDL_FreeSurface(guest_screen);",
          "78:     guest_screen = SDL_CreateRGBSurfaceFrom(ds_get_data(ds), ds_get_width(ds), ds_get_height(ds),",
          "79:                                             ds_get_bits_per_pixel(ds), ds_get_linesize(ds),",
          "80:                                             ds->surface->pf.rmask, ds->surface->pf.gmask,",
          "81:                                             ds->surface->pf.bmask, ds->surface->pf.amask);",
          "84: static void sdl_resize(DisplayState *ds)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:     if (gui_noframe)",
          "69:         flags |= SDL_NOFRAME;",
          "74:  again:",
          "77:         fprintf(stderr, \"Could not open SDL display\\n\");",
          "78:         exit(1);",
          "79:     }",
          "81:         flags &= ~SDL_HWSURFACE;",
          "82:         goto again;",
          "83:     }",
          "86:         fprintf(stderr, \"Could not open SDL display\\n\");",
          "87:         exit(1);",
          "88:     }",
          "105: }",
          "",
          "[Removed Lines]",
          "71:     width = w;",
          "72:     height = h;",
          "75:     screen = SDL_SetVideoMode(w, h, 0, flags);",
          "76:     if (!screen) {",
          "80:     if (!screen->pixels && (flags & SDL_HWSURFACE) && (flags & SDL_FULLSCREEN)) {",
          "85:     if (!screen->pixels) {",
          "89:     ds->data = screen->pixels;",
          "90:     ds->linesize = screen->pitch;",
          "91:     ds->depth = screen->format->BitsPerPixel;",
          "94:     if (ds->depth == 16) {",
          "95:         uint32_t mask;",
          "97:         mask = screen->format->Rmask;",
          "98:         mask |= screen->format->Gmask;",
          "99:         mask |= screen->format->Bmask;",
          "100:         if ((mask & 0x8000) == 0)",
          "101:             ds->depth = 15;",
          "102:     }",
          "103:     ds->width = w;",
          "104:     ds->height = h;",
          "",
          "[Added Lines]",
          "97:     real_screen = SDL_SetVideoMode(ds_get_width(ds), ds_get_height(ds), 0, flags);",
          "98:     if (!real_screen) {",
          "102:     if (!real_screen->pixels && (flags & SDL_HWSURFACE) && (flags & SDL_FULLSCREEN)) {",
          "107:     if (!real_screen->pixels) {",
          "112:     sdl_setdata(ds);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "337: static void toggle_full_screen(DisplayState *ds)",
          "338: {",
          "339:     gui_fullscreen = !gui_fullscreen;",
          "341:     if (gui_fullscreen) {",
          "342:         gui_saved_grab = gui_grab;",
          "343:         sdl_grab_start();",
          "",
          "[Removed Lines]",
          "340:     sdl_resize(ds, screen->w, screen->h);",
          "",
          "[Added Lines]",
          "348:     sdl_resize(ds);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "366:     while (SDL_PollEvent(ev)) {",
          "367:         switch (ev->type) {",
          "368:         case SDL_VIDEOEXPOSE:",
          "370:             break;",
          "371:         case SDL_KEYDOWN:",
          "372:         case SDL_KEYUP:",
          "",
          "[Removed Lines]",
          "369:             sdl_update(ds, 0, 0, screen->w, screen->h);",
          "",
          "[Added Lines]",
          "377:             sdl_update(ds, 0, 0, real_screen->w, real_screen->h);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "521:             if (ev->active.state & SDL_APPACTIVE) {",
          "522:                 if (ev->active.gain) {",
          "526:                 } else {",
          "530:                 }",
          "531:             }",
          "532:             break;",
          "",
          "[Removed Lines]",
          "524:                     ds->gui_timer_interval = 0;",
          "525:                     ds->idle = 0;",
          "528:                     ds->gui_timer_interval = 500;",
          "529:                     ds->idle = 1;",
          "",
          "[Added Lines]",
          "532:                     dcl->gui_timer_interval = 0;",
          "533:                     dcl->idle = 0;",
          "536:                     dcl->gui_timer_interval = 500;",
          "537:                     dcl->idle = 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "539: static void sdl_fill(DisplayState *ds, int x, int y, int w, int h, uint32_t c)",
          "540: {",
          "541:     SDL_Rect dst = { x, y, w, h };",
          "543: }",
          "545: static void sdl_mouse_warp(int x, int y, int on)",
          "",
          "[Removed Lines]",
          "542:     SDL_FillRect(screen, &dst, c);",
          "",
          "[Added Lines]",
          "550:     SDL_FillRect(real_screen, &dst, c);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "635:         exit(1);",
          "636:     }",
          "642:     ds->mouse_set = sdl_mouse_warp;",
          "643:     ds->cursor_define = sdl_mouse_define;",
          "646:     sdl_update_caption();",
          "647:     SDL_EnableKeyRepeat(250, 50);",
          "648:     gui_grab = 0;",
          "",
          "[Removed Lines]",
          "638:     ds->dpy_update = sdl_update;",
          "639:     ds->dpy_resize = sdl_resize;",
          "640:     ds->dpy_refresh = sdl_refresh;",
          "641:     ds->dpy_fill = sdl_fill;",
          "645:     sdl_resize(ds, 640, 400);",
          "",
          "[Added Lines]",
          "646:     dcl = qemu_mallocz(sizeof(DisplayChangeListener));",
          "647:     if (!dcl)",
          "648:         exit(1);",
          "649:     dcl->dpy_update = sdl_update;",
          "650:     dcl->dpy_resize = sdl_resize;",
          "651:     dcl->dpy_refresh = sdl_refresh;",
          "652:     dcl->dpy_setdata = sdl_setdata;",
          "653:     dcl->dpy_fill = sdl_fill;",
          "656:     register_displaychangelistener(ds, dcl);",
          "",
          "---------------"
        ],
        "vl.c||vl.c": [
          "File: vl.c -> vl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "193: DisplayState display_state;",
          "194: int nographic;",
          "195: static int curses;",
          "196: const char* keyboard_layout = NULL;",
          "197: int64_t ticks_per_sec;",
          "198: ram_addr_t ram_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: static int sdl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2764: {",
          "2765: }",
          "2768: {",
          "2769: }",
          "2771: static void dumb_display_init(DisplayState *ds)",
          "2772: {",
          "2781: }",
          "",
          "[Removed Lines]",
          "2767: static void dumb_resize(DisplayState *ds, int w, int h)",
          "2773:     ds->data = NULL;",
          "2774:     ds->linesize = 0;",
          "2775:     ds->depth = 0;",
          "2776:     ds->dpy_update = dumb_update;",
          "2777:     ds->dpy_resize = dumb_resize;",
          "2778:     ds->dpy_refresh = NULL;",
          "2779:     ds->gui_timer_interval = 0;",
          "2780:     ds->idle = 1;",
          "",
          "[Added Lines]",
          "2768: static void dumb_resize(DisplayState *ds)",
          "2774:     DisplayChangeListener *dcl = qemu_mallocz(sizeof(DisplayChangeListener));",
          "2775:     if (!dcl)",
          "2776:         exit(1);",
          "2777:     dcl->dpy_update = dumb_update;",
          "2778:     dcl->dpy_resize = dumb_resize;",
          "2779:     dcl->dpy_refresh = NULL;",
          "2780:     dcl->idle = 1;",
          "2781:     dcl->gui_timer_interval = 500;",
          "2782:     register_displaychangelistener(ds, dcl);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3361: static void gui_update(void *opaque)",
          "3362: {",
          "3363:     DisplayState *ds = opaque;",
          "3370: }",
          "3372: struct vm_change_state_entry {",
          "",
          "[Removed Lines]",
          "3364:     ds->dpy_refresh(ds);",
          "3365:     qemu_mod_timer(ds->gui_timer,",
          "3366:         (ds->gui_timer_interval ?",
          "3367:      ds->gui_timer_interval :",
          "3368:      GUI_REFRESH_INTERVAL)",
          "3369:  + qemu_get_clock(rt_clock));",
          "",
          "[Added Lines]",
          "3365:     uint64_t interval = GUI_REFRESH_INTERVAL;",
          "3367:     DisplayChangeListener *dcl = ds->listeners;",
          "3369:     dpy_refresh(ds);",
          "3371:     while (dcl != NULL) {",
          "3372:         if (dcl->gui_timer_interval &&",
          "3373:             dcl->gui_timer_interval < interval)",
          "3374:             interval = dcl->gui_timer_interval;",
          "3375:         dcl = dcl->next;",
          "3376:     }",
          "3377:     qemu_mod_timer(ds->gui_timer, interval + qemu_get_clock(rt_clock));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3848:            \"-no-frame       open SDL window without a frame and window decorations\\n\"",
          "3849:            \"-alt-grab       use Ctrl-Alt-Shift to grab mouse (instead of Ctrl-Alt)\\n\"",
          "3850:            \"-no-quit        disable SDL window close capability\\n\"",
          "3851: #endif",
          "3852: #ifdef TARGET_I386",
          "3853:            \"-no-fd-bootchk  disable boot signature checking for floppy disks\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3859:            \"-sdl            enable SDL\\n\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4064:     QEMU_OPTION_no_frame,",
          "4065:     QEMU_OPTION_alt_grab,",
          "4066:     QEMU_OPTION_no_quit,",
          "4067:     QEMU_OPTION_pidfile,",
          "4068:     QEMU_OPTION_no_kqemu,",
          "4069:     QEMU_OPTION_kernel_kqemu,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4076:     QEMU_OPTION_sdl,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4176:     { \"no-frame\", 0, QEMU_OPTION_no_frame },",
          "4177:     { \"alt-grab\", 0, QEMU_OPTION_alt_grab },",
          "4178:     { \"no-quit\", 0, QEMU_OPTION_no_quit },",
          "4179: #endif",
          "4180:     { \"pidfile\", HAS_ARG, QEMU_OPTION_pidfile },",
          "4181:     { \"win2k-hack\", 0, QEMU_OPTION_win2k_hack },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4189:     { \"sdl\", 0, QEMU_OPTION_sdl },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4495:     const char *kernel_filename, *kernel_cmdline;",
          "4496:     const char *boot_devices = \"\";",
          "4497:     DisplayState *ds = &display_state;",
          "4498:     int cyls, heads, secs, translation;",
          "4499:     const char *net_clients[MAX_NET_CLIENTS];",
          "4500:     int nb_net_clients;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4509:     DisplayChangeListener *dcl;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5007:             case QEMU_OPTION_no_quit:",
          "5008:                 no_quit = 1;",
          "5009:                 break;",
          "5010: #endif",
          "5011:             case QEMU_OPTION_pidfile:",
          "5012:                 pid_file = optarg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5022:             case QEMU_OPTION_sdl:",
          "5023:                 sdl = 1;",
          "5024:                 break;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5406:     memset(&display_state, 0, sizeof(display_state));",
          "5407:     if (nographic) {",
          "5408:         if (curses) {",
          "5409:             fprintf(stderr, \"fatal: -nographic can't be used with -curses\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5422:     ds->surface = qemu_create_displaysurface(640, 480, 32, 640 * 4);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5411:         }",
          "5413:         dumb_display_init(ds);",
          "5419: #if defined(CONFIG_CURSES)",
          "5423: #endif",
          "5425: #if defined(CONFIG_SDL)",
          "5427: #elif defined(CONFIG_COCOA)",
          "5429: #else",
          "5431: #endif",
          "5432:     }",
          "5434: #ifndef _WIN32",
          "5436:     termsig_setup();",
          "",
          "[Removed Lines]",
          "5414:     } else if (vnc_display != NULL) {",
          "5415:         vnc_display_init(ds);",
          "5416:         if (vnc_display_open(ds, vnc_display) < 0)",
          "5417:             exit(1);",
          "5418:     } else",
          "5420:     if (curses) {",
          "5421:         curses_display_init(ds, full_screen);",
          "5422:     } else",
          "5424:     {",
          "5426:         sdl_display_init(ds, full_screen, no_frame);",
          "5428:         cocoa_display_init(ds, full_screen);",
          "5430:         dumb_display_init(ds);",
          "",
          "[Added Lines]",
          "5430:     } else {",
          "5432:             if (curses) {",
          "5434:                 curses_display_init(ds, full_screen);",
          "5435:             } else",
          "5437:             {",
          "5438:                 if (vnc_display != NULL) {",
          "5439:                     vnc_display_init(ds);",
          "5440:                     if (vnc_display_open(ds, vnc_display) < 0)",
          "5441:                         exit(1);",
          "5442:                 }",
          "5443:                 if (sdl || !vnc_display)",
          "5445:                     sdl_display_init(ds, full_screen, no_frame);",
          "5447:                     cocoa_display_init(ds, full_screen);",
          "5449:                     dumb_display_init(ds);",
          "5451:             }",
          "5453:     dpy_resize(ds);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5541:         }",
          "5542:     }",
          "5547:     }",
          "5549: #ifdef CONFIG_GDBSTUB",
          "5550:     if (use_gdbstub) {",
          "",
          "[Removed Lines]",
          "5544:     if (display_state.dpy_refresh) {",
          "5545:         display_state.gui_timer = qemu_new_timer(rt_clock, gui_update, &display_state);",
          "5546:         qemu_mod_timer(display_state.gui_timer, qemu_get_clock(rt_clock));",
          "",
          "[Added Lines]",
          "5564:     dcl = ds->listeners;",
          "5565:     while (dcl != NULL) {",
          "5566:         if (dcl->dpy_refresh != NULL) {",
          "5567:             display_state.gui_timer = qemu_new_timer(rt_clock, gui_update, &display_state);",
          "5568:             qemu_mod_timer(display_state.gui_timer, qemu_get_clock(rt_clock));",
          "5569:         }",
          "5570:         dcl = dcl->next;",
          "",
          "---------------"
        ],
        "vnc.c||vnc.c": [
          "File: vnc.c -> vnc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "180: };",
          "184: void do_info_vnc(void)",
          "185: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183: static DisplayChangeListener *dcl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213: static void vnc_update_client(void *opaque);",
          "214: static void vnc_client_read(void *opaque);",
          "218: static inline void vnc_set_bit(uint32_t *d, int k)",
          "219: {",
          "",
          "[Removed Lines]",
          "216: static void vnc_colordepth(DisplayState *ds, int depth);",
          "",
          "[Added Lines]",
          "217: static void vnc_colordepth(DisplayState *ds);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "291:     vnc_write_s32(vs, encoding);",
          "292: }",
          "295: {",
          "296:     int size_changed;",
          "297:     VncState *vs = ds->opaque;",
          "303:  fprintf(stderr, \"vnc: memory allocation failed\\n\");",
          "304:  exit(1);",
          "305:     }",
          "309:         console_color_init(ds);",
          "315:     if (size_changed) {",
          "318:         if (vs->csock != -1 && vs->has_resize) {",
          "320:             vnc_write_u8(vs, 0);",
          "323:             vnc_flush(vs);",
          "324:         }",
          "325:     }",
          "",
          "[Removed Lines]",
          "294: static void vnc_dpy_resize(DisplayState *ds, int w, int h)",
          "299:     ds->data = qemu_realloc(ds->data, w * h * vs->depth);",
          "300:     vs->old_data = qemu_realloc(vs->old_data, w * h * vs->depth);",
          "302:     if (ds->data == NULL || vs->old_data == NULL) {",
          "307:     if (ds->depth != vs->depth * 8) {",
          "308:         ds->depth = vs->depth * 8;",
          "310:     }",
          "311:     size_changed = ds->width != w || ds->height != h;",
          "312:     ds->width = w;",
          "313:     ds->height = h;",
          "314:     ds->linesize = w * vs->depth;",
          "316:         vs->width = ds->width;",
          "317:         vs->height = ds->height;",
          "322:             vnc_framebuffer_update(vs, 0, 0, ds->width, ds->height, -223);",
          "",
          "[Added Lines]",
          "295: static void vnc_dpy_resize(DisplayState *ds)",
          "300:     vs->old_data = qemu_realloc(vs->old_data, ds_get_linesize(ds) * ds_get_height(ds));",
          "302:     if (vs->old_data == NULL) {",
          "307:     if (ds_get_bytes_per_pixel(ds) != vs->depth)",
          "309:     vnc_colordepth(ds);",
          "310:     size_changed = ds_get_width(ds) != vs->width || ds_get_height(ds) != vs->height;",
          "312:         vs->width = ds_get_width(ds);",
          "313:         vs->height = ds_get_height(ds);",
          "318:             vnc_framebuffer_update(vs, 0, 0, ds_get_width(ds), ds_get_height(ds), -223);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "495: static void vnc_copy(DisplayState *ds, int src_x, int src_y, int dst_x, int dst_y, int w, int h)",
          "496: {",
          "503:     VncState *vs = ds->opaque;",
          "505:     vnc_update_client(vs);",
          "528:     vnc_write_u8(vs, 0);",
          "",
          "[Removed Lines]",
          "497:     int src, dst;",
          "498:     uint8_t *src_row;",
          "499:     uint8_t *dst_row;",
          "500:     char *old_row;",
          "501:     int y = 0;",
          "502:     int pitch = ds_get_linesize(ds);",
          "507:     if (dst_y > src_y) {",
          "508:  y = h - 1;",
          "509:  pitch = -pitch;",
          "510:     }",
          "512:     src = (ds_get_linesize(ds) * (src_y + y) + vs->depth * src_x);",
          "513:     dst = (ds_get_linesize(ds) * (dst_y + y) + vs->depth * dst_x);",
          "515:     src_row = ds_get_data(ds) + src;",
          "516:     dst_row = ds_get_data(ds) + dst;",
          "517:     old_row = vs->old_data + dst;",
          "519:     for (y = 0; y < h; y++) {",
          "520:  memmove(old_row, src_row, w * vs->depth);",
          "521:  memmove(dst_row, src_row, w * vs->depth);",
          "522:  src_row += pitch;",
          "523:  dst_row += pitch;",
          "524:  old_row += pitch;",
          "525:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "770:  qemu_set_fd_handler2(vs->csock, NULL, NULL, NULL, NULL);",
          "771:  closesocket(vs->csock);",
          "772:  vs->csock = -1;",
          "774:  buffer_reset(&vs->input);",
          "775:  buffer_reset(&vs->output);",
          "776:  vs->need_update = 0;",
          "",
          "[Removed Lines]",
          "773:  vs->ds->idle = 1;",
          "",
          "[Added Lines]",
          "743:  dcl->idle = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1226:     vs->has_pointer_type_change = 0;",
          "1227:     vs->has_WMVi = 0;",
          "1228:     vs->absolute = -1;",
          "1231:     for (i = n_encodings - 1; i >= 0; i--) {",
          "1232:  switch (encodings[i]) {",
          "",
          "[Removed Lines]",
          "1229:     vs->ds->dpy_copy = NULL;",
          "",
          "[Added Lines]",
          "1199:     dcl->dpy_copy = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1234:      vs->has_hextile = 0;",
          "1235:      break;",
          "1238:      break;",
          "1240:      vs->has_hextile = 1;",
          "",
          "[Removed Lines]",
          "1237:      vs->ds->dpy_copy = vnc_copy;",
          "",
          "[Added Lines]",
          "1207:      dcl->dpy_copy = vnc_copy;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1388: }",
          "1391: {",
          "1392:     int host_big_endian_flag;",
          "1393:     struct VncState *vs = ds->opaque;",
          "1408: #ifdef WORDS_BIGENDIAN",
          "1409:     host_big_endian_flag = 1;",
          "1410: #else",
          "1411:     host_big_endian_flag = 0;",
          "1412: #endif",
          "1415:         case 8:",
          "1417:             vs->server_red_max = 7;",
          "1418:             vs->server_green_max = 7;",
          "1419:             vs->server_blue_max = 3;",
          "",
          "[Removed Lines]",
          "1390: static void vnc_colordepth(DisplayState *ds, int depth)",
          "1395:     switch (depth) {",
          "1396:         case 24:",
          "1397:             if (ds->depth == 32) return;",
          "1398:             depth = 32;",
          "1399:             break;",
          "1400:         case 15:",
          "1401:         case 8:",
          "1402:         case 0:",
          "1403:             return;",
          "1404:         default:",
          "1405:             break;",
          "1406:     }",
          "1414:     switch (depth) {",
          "1416:             vs->depth = depth / 8;",
          "",
          "[Added Lines]",
          "1360: static void vnc_dpy_setdata(DisplayState *ds)",
          "1361: {",
          "1363: }",
          "1365: static void vnc_colordepth(DisplayState *ds)",
          "1376:     switch (ds_get_bits_per_pixel(ds)) {",
          "1378:             vs->depth = 1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1422:             vs->server_blue_shift = 0;",
          "1423:             break;",
          "1424:         case 16:",
          "1426:             vs->server_red_max = 31;",
          "1427:             vs->server_green_max = 63;",
          "1428:             vs->server_blue_max = 31;",
          "",
          "[Removed Lines]",
          "1425:             vs->depth = depth / 8;",
          "",
          "[Added Lines]",
          "1387:             vs->depth = 2;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1449:         vnc_write_u8(vs, 0);",
          "1452:         pixel_format_message(vs);",
          "1453:         vnc_flush(vs);",
          "1454:     } else {",
          "",
          "[Removed Lines]",
          "1451:         vnc_framebuffer_update(vs, 0, 0, ds->width, ds->height, 0x574D5669);",
          "",
          "[Added Lines]",
          "1413:         vnc_framebuffer_update(vs, 0, 0, ds_get_width(ds), ds_get_height(ds), 0x574D5669);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2237: static void vnc_connect(VncState *vs)",
          "2238: {",
          "2239:     VNC_DEBUG(\"New client on socket %d\\n\", vs->csock);",
          "2241:     socket_set_nonblock(vs->csock);",
          "2242:     qemu_set_fd_handler2(vs->csock, NULL, vnc_client_read, NULL, vs);",
          "2243:     vnc_write(vs, \"RFB 003.008\\n\", 12);",
          "",
          "[Removed Lines]",
          "2240:     vs->ds->idle = 0;",
          "",
          "[Added Lines]",
          "2202:     dcl->idle = 0;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2247:     memset(vs->dirty_row, 0xFF, sizeof(vs->dirty_row));",
          "2248:     vs->has_resize = 0;",
          "2249:     vs->has_hextile = 0;",
          "2251:     vnc_update_client(vs);",
          "2252:     reset_keys(vs);",
          "2253: }",
          "",
          "[Removed Lines]",
          "2250:     vs->ds->dpy_copy = NULL;",
          "",
          "[Added Lines]",
          "2212:     dcl->dpy_copy = NULL;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2272:     VncState *vs;",
          "2274:     vs = qemu_mallocz(sizeof(VncState));",
          "2276:  exit(1);",
          "2278:     ds->opaque = vs;",
          "2280:     vnc_state = vs;",
          "2281:     vs->display = NULL;",
          "2282:     vs->password = NULL;",
          "",
          "[Removed Lines]",
          "2275:     if (!vs)",
          "2279:     ds->idle = 1;",
          "",
          "[Added Lines]",
          "2237:     dcl = qemu_mallocz(sizeof(DisplayChangeListener));",
          "2238:     if (!vs || !dcl)",
          "2242:     dcl->idle = 1;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2299:     vs->timer = qemu_new_timer(rt_clock, vnc_update_client, vs);",
          "2309:     vs->as.freq = 44100;",
          "2310:     vs->as.nchannels = 2;",
          "",
          "[Removed Lines]",
          "2301:     vs->ds->data = NULL;",
          "2302:     vs->ds->dpy_update = vnc_dpy_update;",
          "2303:     vs->ds->dpy_resize = vnc_dpy_resize;",
          "2304:     vs->ds->dpy_refresh = NULL;",
          "2306:     vnc_colordepth(vs->ds, 32);",
          "2307:     vnc_dpy_resize(vs->ds, 640, 400);",
          "",
          "[Added Lines]",
          "2264:     dcl->dpy_update = vnc_dpy_update;",
          "2265:     dcl->dpy_resize = vnc_dpy_resize;",
          "2266:     dcl->dpy_setdata = vnc_dpy_setdata;",
          "2267:     dcl->dpy_refresh = NULL;",
          "2268:     register_displaychangelistener(ds, dcl);",
          "",
          "---------------"
        ]
      }
    }
  ]
}