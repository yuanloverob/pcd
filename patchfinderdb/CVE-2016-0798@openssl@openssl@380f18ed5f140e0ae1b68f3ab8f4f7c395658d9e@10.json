{
  "cve_id": "CVE-2016-0798",
  "cve_desc": "Memory leak in the SRP_VBASE_get_by_user implementation in OpenSSL 1.0.1 before 1.0.1s and 1.0.2 before 1.0.2g allows remote attackers to cause a denial of service (memory consumption) by providing an invalid username in a connection attempt, related to apps/s_server.c and crypto/srp/srp_vfy.c.",
  "repo": "openssl/openssl",
  "patch_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
  "patch_info": {
    "commit_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "files": [
      "CHANGES",
      "apps/s_server.c",
      "crypto/srp/srp_vfy.c",
      "include/openssl/srp.h",
      "util/libeay.num"
    ],
    "message": "CVE-2016-0798: avoid memory leak in SRP\n\nThe SRP user database lookup method SRP_VBASE_get_by_user had confusing\nmemory management semantics; the returned pointer was sometimes newly\nallocated, and sometimes owned by the callee. The calling code has no\nway of distinguishing these two cases.\n\nSpecifically, SRP servers that configure a secret seed to hide valid\nlogin information are vulnerable to a memory leak: an attacker\nconnecting with an invalid username can cause a memory leak of around\n300 bytes per connection.\n\nServers that do not configure SRP, or configure SRP but do not configure\na seed are not vulnerable.\n\nIn Apache, the seed directive is known as SSLSRPUnknownUserSeed.\n\nTo mitigate the memory leak, the seed handling in SRP_VBASE_get_by_user\nis now disabled even if the user has configured a seed.\n\nApplications are advised to migrate to SRP_VBASE_get1_by_user. However,\nnote that OpenSSL makes no strong guarantees about the\nindistinguishability of valid and invalid logins. In particular,\ncomputations are currently not carried out in constant time.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "apps/s_server.c||apps/s_server.c",
      "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
      "include/openssl/srp.h||include/openssl/srp.h",
      "util/libeay.num||util/libeay.num"
    ]
  },
  "patch_diff": {
    "apps/s_server.c||apps/s_server.c": [
      "File: apps/s_server.c -> apps/s_server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352: static int ssl_srp_server_param_cb(SSL *s, int *ad, void *arg)",
      "353: {",
      "354:     srpsrvparm *p = (srpsrvparm *) arg;",
      "355:     if (p->login == NULL && p->user == NULL) {",
      "356:         p->login = SSL_get_srp_username(s);",
      "357:         BIO_printf(bio_err, \"SRP username = \\\"%s\\\"\\n\", p->login);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355:     int ret = SSL3_AL_FATAL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "361:     if (p->user == NULL) {",
      "362:         BIO_printf(bio_err, \"User %s doesn't exist\\n\", p->login);",
      "364:     }",
      "365:     if (SSL_set_srp_server_param",
      "366:         (s, p->user->N, p->user->g, p->user->s, p->user->v,",
      "367:          p->user->info) < 0) {",
      "370:     }",
      "371:     BIO_printf(bio_err,",
      "372:                \"SRP parameters set: username = \\\"%s\\\" info=\\\"%s\\\" \\n\",",
      "373:                p->login, p->user->info);",
      "375:     p->user = NULL;",
      "376:     p->login = NULL;",
      "378: }",
      "380: #endif",
      "",
      "[Removed Lines]",
      "363:         return SSL3_AL_FATAL;",
      "369:         return SSL3_AL_FATAL;",
      "377:     return SSL_ERROR_NONE;",
      "",
      "[Added Lines]",
      "365:         goto err;",
      "372:         goto err;",
      "377:     ret = SSL_ERROR_NONE;",
      "379: err:",
      "380:     SRP_user_pwd_free(p->user);",
      "383:     return ret;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2325: #ifndef OPENSSL_NO_SRP",
      "2326:                 while (SSL_get_error(con, k) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2327:                     BIO_printf(bio_s_out, \"LOOKUP renego during write\\n\");",
      "2328:                     srp_callback_parm.user =",
      "2331:                     if (srp_callback_parm.user)",
      "2332:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2333:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2329:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2330:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2334:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2336:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2337:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2393: #ifndef OPENSSL_NO_SRP",
      "2394:                 while (SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2395:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2396:                     srp_callback_parm.user =",
      "2399:                     if (srp_callback_parm.user)",
      "2400:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2401:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2397:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2398:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2403:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2405:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2406:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2520:         while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2521:             BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
      "2522:                        srp_callback_parm.login);",
      "2523:             srp_callback_parm.user =",
      "2526:             if (srp_callback_parm.user)",
      "2527:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2528:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2524:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2525:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2531:             SRP_user_pwd_free(srp_callback_parm.user);",
      "2533:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2534:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2732:                 if (BIO_should_io_special(io)",
      "2733:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "2734:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2735:                     srp_callback_parm.user =",
      "2738:                     if (srp_callback_parm.user)",
      "2739:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2740:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2736:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2737:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2744:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2746:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2747:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3093:         if (BIO_should_io_special(io)",
      "3094:             && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3095:             BIO_printf(bio_s_out, \"LOOKUP renego during accept\\n\");",
      "3096:             srp_callback_parm.user =",
      "3099:             if (srp_callback_parm.user)",
      "3100:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3101:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3097:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3098:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3106:             SRP_user_pwd_free(srp_callback_parm.user);",
      "3108:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3109:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3121:                 if (BIO_should_io_special(io)",
      "3122:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3123:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "3124:                     srp_callback_parm.user =",
      "3127:                     if (srp_callback_parm.user)",
      "3128:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3129:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3125:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3126:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3135:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "3137:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3138:                                                srp_callback_parm.login);",
      "",
      "---------------"
    ],
    "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
      "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "184:     return olddst;",
      "185: }",
      "188: {",
      "189:     if (user_pwd == NULL)",
      "190:         return;",
      "",
      "[Removed Lines]",
      "187: static void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "[Added Lines]",
      "187: void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "246:     return (vinfo->s != NULL && vinfo->v != NULL);",
      "247: }",
      "249: SRP_VBASE *SRP_VBASE_new(char *seed_key)",
      "250: {",
      "251:     SRP_VBASE *vb = OPENSSL_malloc(sizeof(*vb));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "249: static SRP_user_pwd *srp_user_pwd_dup(SRP_user_pwd *src)",
      "250: {",
      "251:     SRP_user_pwd *ret;",
      "253:     if (src == NULL)",
      "254:         return NULL;",
      "255:     if ((ret = SRP_user_pwd_new()) == NULL)",
      "256:         return NULL;",
      "258:     SRP_user_pwd_set_gN(ret, src->g, src->N);",
      "259:     if (!SRP_user_pwd_set_ids(ret, src->id, src->info)",
      "260:         || !SRP_user_pwd_set_sv_BN(ret, BN_dup(src->s), BN_dup(src->v))) {",
      "261:             SRP_user_pwd_free(ret);",
      "262:             return NULL;",
      "263:     }",
      "264:     return ret;",
      "265: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "468: }",
      "471: {",
      "472:     int i;",
      "473:     SRP_user_pwd *user;",
      "478:     if (vb == NULL)",
      "479:         return NULL;",
      "480:     for (i = 0; i < sk_SRP_user_pwd_num(vb->users_pwd); i++) {",
      "481:         user = sk_SRP_user_pwd_value(vb->users_pwd, i);",
      "482:         if (strcmp(user->id, username) == 0)",
      "483:             return user;",
      "484:     }",
      "485:     if ((vb->seed_key == NULL) ||",
      "486:         (vb->default_g == NULL) || (vb->default_N == NULL))",
      "487:         return NULL;",
      "",
      "[Removed Lines]",
      "470: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "474:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "475:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "476:     EVP_MD_CTX *ctxt = NULL;",
      "",
      "[Added Lines]",
      "488: static SRP_user_pwd *find_user(SRP_VBASE *vb, char *username)",
      "502:     return NULL;",
      "503: }",
      "511: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "512: {",
      "513:     return find_user(vb, username);",
      "514: }",
      "520: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)",
      "521: {",
      "522:     SRP_user_pwd *user;",
      "523:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "524:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "525:     EVP_MD_CTX *ctxt = NULL;",
      "527:     if (vb == NULL)",
      "528:         return NULL;",
      "530:     if ((user = find_user(vb, username)) != NULL)",
      "531:         return srp_user_pwd_dup(user);",
      "",
      "---------------"
    ],
    "include/openssl/srp.h||include/openssl/srp.h": [
      "File: include/openssl/srp.h -> include/openssl/srp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: DEFINE_STACK_OF(SRP_gN_cache)",
      "87: typedef struct SRP_user_pwd_st {",
      "88:     char *id;",
      "89:     BIGNUM *s;",
      "90:     BIGNUM *v;",
      "91:     const BIGNUM *g;",
      "92:     const BIGNUM *N;",
      "93:     char *info;",
      "94: } SRP_user_pwd;",
      "96: DEFINE_STACK_OF(SRP_user_pwd)",
      "98: typedef struct SRP_VBASE_st {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99: void SRP_user_pwd_free(SRP_user_pwd *user_pwd);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118: SRP_VBASE *SRP_VBASE_new(char *seed_key);",
      "119: void SRP_VBASE_free(SRP_VBASE *vb);",
      "120: int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file);",
      "122: char *SRP_create_verifier(const char *user, const char *pass, char **salt,",
      "123:                           char **verifier, const char *N, const char *g);",
      "124: int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,",
      "",
      "[Removed Lines]",
      "121: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username);",
      "",
      "[Added Lines]",
      "128: DEPRECATEDIN_1_1_0(SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username))",
      "130: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username);",
      "",
      "---------------"
    ],
    "util/libeay.num||util/libeay.num": [
      "File: util/libeay.num -> util/libeay.num",
      "--- Hunk 1 ---",
      "[Context before]",
      "4073: OPENSSL_strncasecmp                     4566 1_1_0 EXIST::FUNCTION:",
      "4074: OPENSSL_gmtime                          4567 1_1_0 EXIST::FUNCTION:",
      "4075: OPENSSL_gmtime_adj                      4568 1_1_0 EXIST::FUNCTION:",
      "4077: SRP_Calc_server_key                     4570 1_1_0 EXIST::FUNCTION:SRP",
      "4078: SRP_create_verifier                     4571 1_1_0 EXIST::FUNCTION:SRP",
      "4079: SRP_create_verifier_BN                  4572 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Removed Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Added Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:DEPRECATEDIN_1_1_0,SRP",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4711: OPENSSL_INIT_new                        5215 1_1_0 EXIST::FUNCTION:",
      "4712: OPENSSL_INIT_free                       5216 1_1_0 EXIST::FUNCTION:",
      "4713: OPENSSL_INIT_set_config_filename        5217 1_1_0 EXIST::FUNCTION:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4714: SRP_user_pwd_free                       5218 1_1_0 EXIST::FUNCTION:SRP",
      "4715: SRP_VBASE_get1_by_user                  5219 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ba67253db19d0319f672d47aa359032e5e66d1b8",
      "candidate_info": {
        "commit_hash": "ba67253db19d0319f672d47aa359032e5e66d1b8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ba67253db19d0319f672d47aa359032e5e66d1b8",
        "files": [
          "crypto/objects/obj_dat.h",
          "crypto/objects/obj_mac.num",
          "crypto/objects/objects.txt",
          "crypto/x509v3/Makefile",
          "crypto/x509v3/ext_dat.h",
          "crypto/x509v3/v3_lib.c",
          "crypto/x509v3/v3_tlsf.c",
          "crypto/x509v3/v3err.c",
          "doc/apps/x509v3_config.pod",
          "doc/crypto/X509V3_get_d2i.pod",
          "include/openssl/obj_mac.h",
          "include/openssl/x509v3.h",
          "util/libeay.num"
        ],
        "message": "Support the TLS Feature (aka Must Staple) X.509v3 extension (RFC7633).\n\nSigned-off-by: Kurt Roeckx <kurt@roeckx.be>\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Dr. Stephen Henson <steve@openssl.org>\n\nGH: #495, MR: #1435",
        "before_after_code_files": [
          "crypto/objects/obj_dat.h||crypto/objects/obj_dat.h",
          "crypto/objects/obj_mac.num||crypto/objects/obj_mac.num",
          "crypto/x509v3/ext_dat.h||crypto/x509v3/ext_dat.h",
          "crypto/x509v3/v3_lib.c||crypto/x509v3/v3_lib.c",
          "crypto/x509v3/v3_tlsf.c||crypto/x509v3/v3_tlsf.c",
          "crypto/x509v3/v3err.c||crypto/x509v3/v3err.c",
          "include/openssl/obj_mac.h||include/openssl/obj_mac.h",
          "include/openssl/x509v3.h||include/openssl/x509v3.h",
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "crypto/objects/obj_dat.h||crypto/objects/obj_dat.h": [
          "File: crypto/objects/obj_dat.h -> crypto/objects/obj_dat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "65: #define NUM_NID 1020",
          "66: #define NUM_SN 1013",
          "67: #define NUM_LN 1013",
          "68: #define NUM_OBJ 936",
          "70: static const unsigned char lvalues[6604]={",
          "",
          "[Added Lines]",
          "65: #define NUM_NID 1021",
          "66: #define NUM_SN 1014",
          "67: #define NUM_LN 1014",
          "68: #define NUM_OBJ 937",
          "70: static const unsigned char lvalues[6612]={",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2669: {\"grasshopper-mac\",\"grasshopper-mac\",NID_grasshopper_mac,0,NULL,0},",
          "2670: {\"ChaCha20-Poly1305\",\"chacha20-poly1305\",NID_chacha20_poly1305,0,NULL,0},",
          "2671: {\"ChaCha20\",\"chacha20\",NID_chacha20,0,NULL,0},",
          "2672: };",
          "2674: static const unsigned int sn_objs[NUM_SN]={",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2673: {\"tlsfeature\",\"TLS Feature\",NID_tlsfeature,8,&(lvalues[6603]),0},",
          "",
          "---------------"
        ],
        "crypto/objects/obj_mac.num||crypto/objects/obj_mac.num": [
          "File: crypto/objects/obj_mac.num -> crypto/objects/obj_mac.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "1017: grasshopper_mac  1017",
          "1018: chacha20_poly1305  1018",
          "1019: chacha20  1019",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1020: tlsfeature  1020",
          "",
          "---------------"
        ],
        "crypto/x509v3/ext_dat.h||crypto/x509v3/ext_dat.h": [
          "File: crypto/x509v3/ext_dat.h -> crypto/x509v3/ext_dat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: extern const X509V3_EXT_METHOD v3_name_constraints, v3_inhibit_anyp, v3_idp;",
          "71: extern const X509V3_EXT_METHOD v3_addr, v3_asid;",
          "72: extern const X509V3_EXT_METHOD v3_ct_scts[];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: extern const X509V3_EXT_METHOD v3_tls_feature;",
          "",
          "---------------"
        ],
        "crypto/x509v3/v3_lib.c||crypto/x509v3/v3_lib.c": [
          "File: crypto/x509v3/v3_lib.c -> crypto/x509v3/v3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:     &v3_ct_scts[0],",
          "157:     &v3_ct_scts[1],",
          "158: #endif",
          "159: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:     &v3_tls_feature,",
          "",
          "---------------"
        ],
        "crypto/x509v3/v3_tlsf.c||crypto/x509v3/v3_tlsf.c": [
          "File: crypto/x509v3/v3_tlsf.c -> crypto/x509v3/v3_tlsf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: #include <stdio.h>",
          "60: #include \"internal/cryptlib.h\"",
          "61: #include \"internal/o_str.h\"",
          "62: #include <openssl/asn1t.h>",
          "63: #include <openssl/conf.h>",
          "64: #include <openssl/x509v3.h>",
          "65: #include \"ext_dat.h\"",
          "67: static STACK_OF(CONF_VALUE) *i2v_TLS_FEATURE(const X509V3_EXT_METHOD *method,",
          "68:                                              TLS_FEATURE *tls_feature,",
          "69:                                              STACK_OF(CONF_VALUE) *ext_list);",
          "70: static TLS_FEATURE *v2i_TLS_FEATURE(const X509V3_EXT_METHOD *method,",
          "71:                                     X509V3_CTX *ctx,",
          "72:                                     STACK_OF(CONF_VALUE) *nval);",
          "74: ASN1_ITEM_TEMPLATE(TLS_FEATURE) =",
          "75:         ASN1_EX_TEMPLATE_TYPE(ASN1_TFLG_SEQUENCE_OF, 0, TLS_FEATURE, ASN1_INTEGER)",
          "76: static_ASN1_ITEM_TEMPLATE_END(TLS_FEATURE)",
          "78: IMPLEMENT_ASN1_ALLOC_FUNCTIONS(TLS_FEATURE)",
          "80: const X509V3_EXT_METHOD v3_tls_feature = {",
          "81:     NID_tlsfeature, 0,",
          "82:     ASN1_ITEM_ref(TLS_FEATURE),",
          "83:     0, 0, 0, 0,",
          "84:     0, 0,",
          "85:     (X509V3_EXT_I2V)i2v_TLS_FEATURE,",
          "86:     (X509V3_EXT_V2I)v2i_TLS_FEATURE,",
          "87:     0, 0,",
          "88:     NULL",
          "89: };",
          "92: typedef struct {",
          "93:     long num;",
          "94:     const char *name;",
          "95: } TLS_FEATURE_NAME;",
          "97: static TLS_FEATURE_NAME tls_feature_tbl[] = {",
          "98:     { 5, \"status_request\" },",
          "99:     { 17, \"status_request_v2\" }",
          "100: };",
          "108: static STACK_OF(CONF_VALUE) *i2v_TLS_FEATURE(const X509V3_EXT_METHOD *method,",
          "109:                                              TLS_FEATURE *tls_feature,",
          "110:                                              STACK_OF(CONF_VALUE) *ext_list)",
          "111: {",
          "112:     int i;",
          "113:     size_t j;",
          "114:     ASN1_INTEGER *ai;",
          "115:     long tlsextid;",
          "116:     for (i = 0; i < sk_ASN1_INTEGER_num(tls_feature); i++) {",
          "117:         ai = sk_ASN1_INTEGER_value(tls_feature, i);",
          "118:         tlsextid = ASN1_INTEGER_get(ai);",
          "119:         for (j = 0; j < OSSL_NELEM(tls_feature_tbl); j++)",
          "120:             if (tlsextid == tls_feature_tbl[j].num)",
          "121:                 break;",
          "122:         if (j < OSSL_NELEM(tls_feature_tbl))",
          "123:             X509V3_add_value(NULL, tls_feature_tbl[j].name, &ext_list);",
          "124:         else",
          "125:             X509V3_add_value_int(NULL, ai, &ext_list);",
          "126:     }",
          "127:     return ext_list;",
          "128: }",
          "135: static TLS_FEATURE *v2i_TLS_FEATURE(const X509V3_EXT_METHOD *method,",
          "136:                                     X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval)",
          "137: {",
          "138:     TLS_FEATURE *tlsf;",
          "139:     char *extval, *endptr;",
          "140:     ASN1_INTEGER *ai;",
          "141:     CONF_VALUE *val;",
          "142:     int i;",
          "143:     size_t j;",
          "144:     long tlsextid;",
          "146:     if ((tlsf = sk_ASN1_INTEGER_new_null()) == NULL) {",
          "147:         X509V3err(X509V3_F_V2I_TLS_FEATURE, ERR_R_MALLOC_FAILURE);",
          "148:         return NULL;",
          "149:     }",
          "151:     for (i = 0; i < sk_CONF_VALUE_num(nval); i++) {",
          "152:         val = sk_CONF_VALUE_value(nval, i);",
          "153:         if (val->value)",
          "154:             extval = val->value;",
          "155:         else",
          "156:             extval = val->name;",
          "158:         for (j = 0; j < OSSL_NELEM(tls_feature_tbl); j++)",
          "159:             if (OPENSSL_strcasecmp(extval, tls_feature_tbl[j].name) == 0)",
          "160:                 break;",
          "161:         if (j < OSSL_NELEM(tls_feature_tbl))",
          "162:             tlsextid = tls_feature_tbl[j].num;",
          "163:         else {",
          "164:             tlsextid = strtol(extval, &endptr, 10);",
          "165:             if (((*endptr) != '\\0') || (extval == endptr) || (tlsextid < 0) ||",
          "166:                 (tlsextid > 65535)) {",
          "167:                 X509V3err(X509V3_F_V2I_TLS_FEATURE, X509V3_R_INVALID_SYNTAX);",
          "168:                 X509V3_conf_err(val);",
          "169:                 goto err;",
          "170:             }",
          "171:         }",
          "173:         ai = ASN1_INTEGER_new();",
          "174:         if (ai == NULL) {",
          "175:             X509V3err(X509V3_F_V2I_TLS_FEATURE, ERR_R_MALLOC_FAILURE);",
          "176:             goto err;",
          "177:         }",
          "178:         ASN1_INTEGER_set(ai, tlsextid);",
          "179:         sk_ASN1_INTEGER_push(tlsf, ai);",
          "180:     }",
          "181:     return tlsf;",
          "183:  err:",
          "184:     sk_ASN1_INTEGER_pop_free(tlsf, ASN1_INTEGER_free);",
          "185:     return NULL;",
          "186: }",
          "",
          "---------------"
        ],
        "crypto/x509v3/v3err.c||crypto/x509v3/v3err.c": [
          "File: crypto/x509v3/v3err.c -> crypto/x509v3/v3err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     {ERR_FUNC(X509V3_F_V2I_POLICY_CONSTRAINTS), \"v2i_POLICY_CONSTRAINTS\"},",
          "125:     {ERR_FUNC(X509V3_F_V2I_POLICY_MAPPINGS), \"v2i_POLICY_MAPPINGS\"},",
          "126:     {ERR_FUNC(X509V3_F_V2I_SUBJECT_ALT), \"v2i_subject_alt\"},",
          "127:     {ERR_FUNC(X509V3_F_V3_ADDR_VALIDATE_PATH_INTERNAL),",
          "128:      \"v3_addr_validate_path_internal\"},",
          "129:     {ERR_FUNC(X509V3_F_V3_GENERIC_EXTENSION), \"v3_generic_extension\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:     {ERR_FUNC(X509V3_F_V2I_TLS_FEATURE), \"v2i_TLS_FEATURE\"},",
          "",
          "---------------"
        ],
        "include/openssl/obj_mac.h||include/openssl/obj_mac.h": [
          "File: include/openssl/obj_mac.h -> include/openssl/obj_mac.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1490: #define NID_proxyCertInfo               663",
          "1491: #define OBJ_proxyCertInfo               OBJ_id_pe,14L",
          "1493: #define SN_id_qt_cps            \"id-qt-cps\"",
          "1494: #define LN_id_qt_cps            \"Policy Qualifier CPS\"",
          "1495: #define NID_id_qt_cps           164",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1493: #define SN_tlsfeature           \"tlsfeature\"",
          "1494: #define LN_tlsfeature           \"TLS Feature\"",
          "1495: #define NID_tlsfeature          1020",
          "1496: #define OBJ_tlsfeature          OBJ_id_pe,24L",
          "",
          "---------------"
        ],
        "include/openssl/x509v3.h||include/openssl/x509v3.h": [
          "File: include/openssl/x509v3.h -> include/openssl/x509v3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "218: typedef STACK_OF(ASN1_OBJECT) EXTENDED_KEY_USAGE;",
          "220: DECLARE_STACK_OF(GENERAL_NAME)",
          "222: DECLARE_STACK_OF(ACCESS_DESCRIPTION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: typedef STACK_OF(ASN1_INTEGER) TLS_FEATURE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "561: DECLARE_ASN1_FUNCTIONS(EXTENDED_KEY_USAGE)",
          "562: int i2a_ACCESS_DESCRIPTION(BIO *bp, ACCESS_DESCRIPTION *a);",
          "564: DECLARE_ASN1_FUNCTIONS(CERTIFICATEPOLICIES)",
          "565: DECLARE_ASN1_FUNCTIONS(POLICYINFO)",
          "566: DECLARE_ASN1_FUNCTIONS(POLICYQUALINFO)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566: DECLARE_ASN1_ALLOC_FUNCTIONS(TLS_FEATURE)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "962: # define X509V3_F_V2I_POLICY_CONSTRAINTS                  146",
          "963: # define X509V3_F_V2I_POLICY_MAPPINGS                     145",
          "964: # define X509V3_F_V2I_SUBJECT_ALT                         154",
          "965: # define X509V3_F_V3_ADDR_VALIDATE_PATH_INTERNAL          160",
          "966: # define X509V3_F_V3_GENERIC_EXTENSION                    116",
          "967: # define X509V3_F_X509V3_ADD1_I2D                         140",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "969: # define X509V3_F_V2I_TLS_FEATURE                         165",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4727: Poly1305_Final                          5087 EXIST::FUNCTION:POLY1305",
          "4728: EVP_chacha20_poly1305                   5088 EXIST::FUNCTION:CHACHA,POLY1305",
          "4729: EVP_chacha20                            5089 EXIST::FUNCTION:CHACHA",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4730: TLS_FEATURE_free                        5093 EXIST::FUNCTION:",
          "4731: TLS_FEATURE_new                         5094 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd35486db671dca36caffecc7ee1f5f6483b3a4b",
      "candidate_info": {
        "commit_hash": "dd35486db671dca36caffecc7ee1f5f6483b3a4b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/dd35486db671dca36caffecc7ee1f5f6483b3a4b",
        "files": [
          "util/libeay.num"
        ],
        "message": "Fix libeay.num\n\nRemoved duplicated ordinals from libeay.num\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4629: EVP_PKEY_meth_get_derive                4989 EXIST::FUNCTION:",
          "4630: EVP_PKEY_meth_get_decrypt               4990 EXIST::FUNCTION:",
          "4631: EVP_PKEY_meth_get_copy                  4991 EXIST::FUNCTION:",
          "4641: X509_CRL_get_signature_nid              5000 EXIST::FUNCTION:",
          "4642: i2d_re_X509_REQ_tbs                     5001 EXIST::FUNCTION:",
          "4643: X509_REVOKED_get0_extensions            5002 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "4632: X509_get0_subject_key_id                4991 EXIST::FUNCTION:",
          "4633: declare_dh_bn                           4992 EXIST::FUNCTION:DH",
          "4634: i2d_re_X509_CRL_tbs                     4992 EXIST::FUNCTION:",
          "4635: X509_REQ_get_X509_PUBKEY                4993 EXIST::FUNCTION:",
          "4636: X509_REQ_get0_signature                 4994 EXIST::FUNCTION:",
          "4637: X509_REVOKED_get0_revocationDate        4995 EXIST::FUNCTION:",
          "4638: X509_REVOKED_get0_serialNumber          4996 EXIST::FUNCTION:",
          "4639: X509_CRL_get0_extensions                4997 EXIST::FUNCTION:",
          "4640: X509_REQ_get_signature_nid              4998 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "4632: X509_get0_subject_key_id                4992 EXIST::FUNCTION:",
          "4633: i2d_re_X509_CRL_tbs                     4993 EXIST::FUNCTION:",
          "4634: X509_REQ_get_X509_PUBKEY                4994 EXIST::FUNCTION:",
          "4635: X509_REQ_get0_signature                 4995 EXIST::FUNCTION:",
          "4636: X509_REVOKED_get0_revocationDate        4996 EXIST::FUNCTION:",
          "4637: X509_REVOKED_get0_serialNumber          4997 EXIST::FUNCTION:",
          "4638: X509_CRL_get0_extensions                4998 EXIST::FUNCTION:",
          "4639: X509_REQ_get_signature_nid              4999 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7b5b9f4b1ec24743da20926f50418ba9fa92e87",
      "candidate_info": {
        "commit_hash": "c7b5b9f4b1ec24743da20926f50418ba9fa92e87",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c7b5b9f4b1ec24743da20926f50418ba9fa92e87",
        "files": [
          "util/libeay.num"
        ],
        "message": "make update.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4720: ENGINE_unregister_EC                    5080 EXIST::FUNCTION:ENGINE",
          "4721: EC_KEY_METHOD_get_sign                  5081 EXIST::FUNCTION:EC",
          "4722: EC_KEY_METHOD_get_compute_key           5082 EXIST::FUNCTION:EC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4723: Poly1305_Init                           5083 EXIST::FUNCTION:POLY1305",
          "4724: ChaCha20_ctr32                          5084 EXIST::FUNCTION:CHACHA",
          "4725: Poly1305_ctx_size                       5085 EXIST::FUNCTION:POLY1305",
          "4726: Poly1305_Update                         5086 EXIST::FUNCTION:POLY1305",
          "4727: Poly1305_Final                          5087 EXIST::FUNCTION:POLY1305",
          "4728: EVP_chacha20_poly1305                   5088 EXIST::FUNCTION:CHACHA,POLY1305",
          "4729: EVP_chacha20                            5089 EXIST::FUNCTION:CHACHA",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8dfb5bf8e525c9799820d01b2df5fde098a9c4c",
      "candidate_info": {
        "commit_hash": "e8dfb5bf8e525c9799820d01b2df5fde098a9c4c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e8dfb5bf8e525c9799820d01b2df5fde098a9c4c",
        "files": [
          "crypto/async/async.c",
          "crypto/async/async_locl.h",
          "doc/crypto/ASYNC_start_job.pod",
          "include/openssl/async.h",
          "test/asynctest.c",
          "util/libeay.num"
        ],
        "message": "Add ASYNC_block_pause and ASYNC_unblock_pause\n\nThere are potential deadlock situations that can occur if code executing\nwithin the context of a job aquires a lock, and then pauses the job. This\nadds an ability to temporarily block pauses from occuring whilst performing\nwork and holding a lock.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/async/async.c||crypto/async/async.c",
          "crypto/async/async_locl.h||crypto/async/async_locl.h",
          "include/openssl/async.h||include/openssl/async.h",
          "test/asynctest.c||test/asynctest.c",
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "crypto/async/async.c||crypto/async/async.c": [
          "File: crypto/async/async.c -> crypto/async/async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     async_fibre_init_dispatcher(&nctx->dispatcher);",
          "82:     nctx->currjob = NULL;",
          "83:     if(!async_set_ctx(nctx))",
          "84:         goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:     nctx->blocked = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286: {",
          "287:     ASYNC_JOB *job;",
          "",
          "[Removed Lines]",
          "289:     if(!async_get_ctx() || !async_get_ctx()->currjob) {",
          "",
          "[Added Lines]",
          "290:     if (async_get_ctx() == NULL",
          "291:             || async_get_ctx()->currjob == NULL",
          "292:             || async_get_ctx()->blocked) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297:     job = async_get_ctx()->currjob;",
          "298:     job->status = ASYNC_JOB_PAUSING;",
          "302:         ASYNCerr(ASYNC_F_ASYNC_PAUSE_JOB, ASYNC_R_FAILED_TO_SWAP_CONTEXT);",
          "303:         return 0;",
          "304:     }",
          "",
          "[Removed Lines]",
          "300:     if(!async_fibre_swapcontext(&job->fibrectx,",
          "301:                                &async_get_ctx()->dispatcher, 1)) {",
          "",
          "[Added Lines]",
          "303:     if (!async_fibre_swapcontext(&job->fibrectx,",
          "304:                                  &async_get_ctx()->dispatcher, 1)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "405:     async_read1(job->wait_fd, &dummy);",
          "406:     job->wake_set = 0;",
          "407: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412: void ASYNC_block_pause(void)",
          "413: {",
          "414:     if (async_get_ctx() == NULL",
          "415:             || async_get_ctx()->currjob == NULL) {",
          "419:         return;",
          "420:     }",
          "421:     async_get_ctx()->blocked++;",
          "422: }",
          "424: void ASYNC_unblock_pause(void)",
          "425: {",
          "426:     if (async_get_ctx() == NULL",
          "427:             || async_get_ctx()->currjob == NULL) {",
          "431:         return;",
          "432:     }",
          "433:     if(async_get_ctx()->blocked > 0)",
          "434:         async_get_ctx()->blocked--;",
          "435: }",
          "",
          "---------------"
        ],
        "crypto/async/async_locl.h||crypto/async/async_locl.h": [
          "File: crypto/async/async_locl.h -> crypto/async/async_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: struct async_ctx_st {",
          "64:     async_fibre dispatcher;",
          "65:     ASYNC_JOB *currjob;",
          "66: };",
          "68: struct async_job_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     unsigned int blocked;",
          "",
          "---------------"
        ],
        "include/openssl/async.h||include/openssl/async.h": [
          "File: include/openssl/async.h -> include/openssl/async.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: ASYNC_JOB *ASYNC_get_current_job(void);",
          "79: void ASYNC_wake(ASYNC_JOB *job);",
          "80: void ASYNC_clear_wake(ASYNC_JOB *job);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: void ASYNC_block_pause(void);",
          "82: void ASYNC_unblock_pause(void);",
          "",
          "---------------"
        ],
        "test/asynctest.c||test/asynctest.c": [
          "File: test/asynctest.c -> test/asynctest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:     return 1;",
          "115: }",
          "117: static int test_ASYNC_init_pool()",
          "118: {",
          "119:     ASYNC_JOB *job1 = NULL, *job2 = NULL, *job3 = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117: static int blockpause(void *args)",
          "118: {",
          "119:     ASYNC_block_pause();",
          "120:     ASYNC_pause_job();",
          "121:     ASYNC_unblock_pause();",
          "122:     ASYNC_pause_job();",
          "124:     return 1;",
          "125: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:     ASYNC_JOB *job = NULL;",
          "211:     int funcret, fd;",
          "215:     if (       !ASYNC_init_pool(1, 0)",
          "216:             || ASYNC_start_job(&job, &funcret, wake, NULL, 0)",
          "217:                 != ASYNC_PAUSE",
          "",
          "[Removed Lines]",
          "213:     currjob = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:     ASYNC_free_pool();",
          "236:     return 1;",
          "237: }",
          "238: #endif",
          "240: int main(int argc, char **argv)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247: static int test_ASYNC_block_pause()",
          "248: {",
          "249:     ASYNC_JOB *job = NULL;",
          "250:     int funcret;",
          "252:     if (       !ASYNC_init_pool(1, 0)",
          "253:             || ASYNC_start_job(&job, &funcret, blockpause, NULL, 0)",
          "254:                 != ASYNC_PAUSE",
          "255:             || ASYNC_start_job(&job, &funcret, blockpause, NULL, 0)",
          "256:                 != ASYNC_FINISH",
          "257:             || funcret != 1) {",
          "258:         fprintf(stderr, \"test_ASYNC_block_pause() failed\\n\");",
          "259:         ASYNC_free_pool();",
          "260:         return 0;",
          "261:     }",
          "263:     ASYNC_free_pool();",
          "264:     return 1;",
          "265: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "250:     if (       !test_ASYNC_init_pool()",
          "251:             || !test_ASYNC_start_job()",
          "252:             || !test_ASYNC_get_current_job()",
          "254:         return 1;",
          "255:     }",
          "256: #endif",
          "",
          "[Removed Lines]",
          "253:             || !test_ASYNC_get_wait_fd()) {",
          "",
          "[Added Lines]",
          "282:             || !test_ASYNC_get_wait_fd()",
          "283:             || !test_ASYNC_block_pause()) {",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4659: ASYNC_get_current_job                   5019 EXIST::FUNCTION:",
          "4660: ASYNC_get_wait_fd                       5020 EXIST::FUNCTION:",
          "4661: ERR_load_ASYNC_strings                  5021 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4662: ASYNC_unblock_pause                     5022 EXIST::FUNCTION:",
          "4663: ASYNC_block_pause                       5023 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1786086b05714c284b337d5211b299e09b9cfad9",
      "candidate_info": {
        "commit_hash": "1786086b05714c284b337d5211b299e09b9cfad9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1786086b05714c284b337d5211b299e09b9cfad9",
        "files": [
          "util/libeay.num"
        ],
        "message": "make update\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4647: X509_get0_trust_objects                 5007 EXIST::FUNCTION:",
          "4648: X509_get0_uids                          5008 EXIST::FUNCTION:",
          "4649: X509_aux_print                          5009 EXIST::FUNCTION:STDIO",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4650: TS_RESP_CTX_set_signer_digest           5010 EXIST::FUNCTION:",
          "4651: TS_CONF_set_signer_digest               5011 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    }
  ]
}