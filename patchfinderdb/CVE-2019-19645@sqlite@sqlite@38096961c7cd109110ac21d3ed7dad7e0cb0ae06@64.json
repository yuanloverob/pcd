{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "92a2824cc61df5683337d61b5a9d190935039326",
      "candidate_info": {
        "commit_hash": "92a2824cc61df5683337d61b5a9d190935039326",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/92a2824cc61df5683337d61b5a9d190935039326",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/expr.c",
          "test/collate1.test"
        ],
        "message": "An improved fix for the dbsqlfuzz-discovered ALWAYS() failure following OOM in sqlite3ExprCollSeq().  This time with a test case (engineered by Dan).\n\nFossilOrigin-Name: 907f7965b335d8d5441f2e386bb190d1f93ffcd45ca98d2d1c621dede491fc5e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "test/collate1.test||test/collate1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/alter.c||src/alter.c",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/alter.c||src/alter.c",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75775c5ab44e497cb19be10397229637f1374f05c3244e8f92d6c54fcea94f5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1416:   int i;",
          "1417:   RenameCtx *p = pWalker->u.pRename;",
          "1418:   SrcList *pSrc = pSelect->pSrc;",
          "1420:     return WRC_Abort;",
          "1421:   }",
          "1422:   for(i=0; i<pSrc->nSrc; i++){",
          "",
          "[Removed Lines]",
          "1419:   if( NEVER(pSrc==0) ){",
          "",
          "[Added Lines]",
          "1419:   if( pSrc==0 ){",
          "1420:     assert( pWalker->pParse->db->mallocFailed );",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4143: void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){",
          "4144:   int i;",
          "4145:   struct SrcList_item *pItem;",
          "4147:     for(i=0, pItem=pList->a; i<pList->nSrc; i++, pItem++){",
          "4148:       if( pItem->iCursor>=0 ) break;",
          "4149:       pItem->iCursor = pParse->nTab++;",
          "",
          "[Removed Lines]",
          "4146:   if( ALWAYS(pList) ){",
          "",
          "[Added Lines]",
          "4146:   assert(pList || pParse->db->mallocFailed );",
          "4147:   if( pList ){",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:           int i;",
          "191:           for(i=0; ALWAYS(i<p->x.pList->nExpr); i++){",
          "192:             if( ExprHasProperty(p->x.pList->a[i].pExpr, EP_Collate) ){",
          "",
          "[Removed Lines]",
          "189:         if( p->x.pList!=0 && ALWAYS(!ExprHasProperty(p, EP_xIsSelect)) ){",
          "",
          "[Added Lines]",
          "189:         if( p->x.pList!=0",
          "190:          && !db->mallocFailed",
          "191:          && ALWAYS(!ExprHasProperty(p, EP_xIsSelect))",
          "192:         ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1530:     pNext = pNew;",
          "1531:   }",
          "1537:   return pRet;",
          "1538: }",
          "1539: #else",
          "",
          "[Removed Lines]",
          "1533:   if( db->mallocFailed ){",
          "1534:     sqlite3SelectDelete(db, pRet);",
          "1535:     pRet = 0;",
          "1536:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/collate1.test||test/collate1.test": [
          "File: test/collate1.test -> test/collate1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:   SELECT * FROM t0 WHERE c1 = 1;",
          "418: } {{ } 1}",
          "420: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "420: # 2019-10-09",
          "421: # ALWAYS() macro fails following OOM",
          "422: # Problem detected by dbsqlfuzz.",
          "423: #",
          "424: do_execsql_test 9.0 {",
          "425:   CREATE TABLE t1(a, b);",
          "426:   CREATE TABLE t2(c, d);",
          "427: }",
          "429: do_faultsim_test 9.1 -faults oom* -body {",
          "430:   execsql {",
          "431:     SELECT * FROM (",
          "432:         SELECT b COLLATE nocase IN (SELECT c FROM t2) FROM t1",
          "433:     );",
          "434:   }",
          "435: } -test {",
          "436:   faultsim_test_result {0 {}}",
          "437: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b555b0806e5ded813f9a78c3f287fde1d12f5068",
      "candidate_info": {
        "commit_hash": "b555b0806e5ded813f9a78c3f287fde1d12f5068",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b555b0806e5ded813f9a78c3f287fde1d12f5068",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Fix a new problem in the BETWEEN operator when applied to a window function. The problem was introduced yesterday by check-in [7ef7b23cbb1b9ace].\n\nFossilOrigin-Name: 47e23064ba0205148f89e12803a62d5a4d6d2054f593f60c031e815112170b9b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c0d932449db3deed42a99bd948aab61e56b2d8441d7de5243688695ff04e8177",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2022:       pNew->eEnd = p->eEnd;",
          "2023:       pNew->eStart = p->eStart;",
          "2024:       pNew->eExclude = p->eExclude;",
          "2025:       pNew->pStart = sqlite3ExprDup(db, p->pStart, 0);",
          "2026:       pNew->pEnd = sqlite3ExprDup(db, p->pEnd, 0);",
          "2027:       pNew->pOwner = pOwner;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2025:       pNew->regResult = p->regResult;",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1170:   11 K cc 'xyz' K |",
          "1171: }",
          "",
          "[Removed Lines]",
          "1173: finish_test",
          "",
          "[Added Lines]",
          "1173: # 2019-07-18",
          "1174: # Check-in [7ef7b23cbb1b9ace] (which was itself a fix for ticket",
          "1175: # https://www.sqlite.org/src/info/1be72aab9) introduced a new problem",
          "1176: # if the LHS of a BETWEEN operator is a WINDOW function.  The problem",
          "1177: # was found by (the recently enhanced) dbsqlfuzz.",
          "1178: #",
          "1179: do_execsql_test 30.0 {",
          "1180:   DROP TABLE IF EXISTS t1;",
          "1181:   CREATE TABLE t1(a, b, c);",
          "1182:   INSERT INTO t1 VALUES('BB','aa',399);",
          "1183:   SELECT",
          "1184:     count () OVER win1 NOT BETWEEN 'a' AND 'mmm',",
          "1185:     count () OVER win3",
          "1186:   FROM t1",
          "1187:   WINDOW win1 AS (ORDER BY a GROUPS BETWEEN 4 PRECEDING AND 1 FOLLOWING",
          "1188:                   EXCLUDE CURRENT ROW),",
          "1189:          win2 AS (PARTITION BY b ORDER BY a),",
          "1190:          win3 AS (win2 RANGE BETWEEN 5.2 PRECEDING AND true PRECEDING );",
          "1191: } {1 1}",
          "1193: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
      "candidate_info": {
        "commit_hash": "5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
        "files": [
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "test/fts3atoken.test"
        ],
        "message": "The two-argument version of fts3_tokenizer() works regardless of the value of SQLITE_DBCONFIG_ENABLE_FT3_TOKENIZER as long as the second argument is a bind parameter.\n\nFossilOrigin-Name: ab76e3a90e56bd36a17ded9c7a77e88632ca12d3bd73f197df747a634c81e0cf",
        "before_after_code_files": [
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3atoken.test||test/fts3atoken.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   nName = sqlite3_value_bytes(argv[0])+1;",
          "81:   if( argc==2 ){",
          "83:       void *pOld;",
          "84:       int n = sqlite3_value_bytes(argv[1]);",
          "85:       if( zName==0 || n!=sizeof(pPtr) ){",
          "",
          "[Removed Lines]",
          "82:     if( fts3TokenizerEnabled(context) ){",
          "",
          "[Added Lines]",
          "82:     if( fts3TokenizerEnabled(context) || sqlite3_value_frombind(argv[1]) ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98da62dfdacc6b3c490c387d1f8a74cc5daa978776967e264ad4800c380b0ddf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   }",
          "87: } {{There was movement at the station}}",
          "89: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 0",
          "90: do_catchsql_test 1.6 {",
          "91:   SELECT fts3_tokenizer('blah', fts3_tokenizer('simple')) IS NULL;",
          "92: } {1 {fts3tokenize disabled}}",
          "95: #--------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: unset -nocomplain simple",
          "90: set simple [db one {SELECT fts3_tokenizer('simple')}]",
          "95: do_test fts3atoken-1.7 {",
          "96:   execsql {",
          "97:     SELECT fts3_tokenizer('blah2', $simple) IS NULL;",
          "98:   }",
          "99: } {1}",
          "100: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "101: do_test fts3atoken-1.8 {",
          "102:   execsql {",
          "103:     SELECT fts3_tokenizer('blah2') == fts3_tokenizer('simple');",
          "104:   }",
          "105: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bbcaee8335624a2b8537014fb3f9af82d331256",
      "candidate_info": {
        "commit_hash": "2bbcaee8335624a2b8537014fb3f9af82d331256",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2bbcaee8335624a2b8537014fb3f9af82d331256",
        "files": [
          "ext/fts5/fts5.h",
          "ext/session/sqlite3session.h",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Fix various documentation typos suggested by Mark Benningfield. No changes to code.\n\nFossilOrigin-Name: 08f09dc4f986a27f4e4e69f8226dbfaf0cfe1269cefc2830bf0fbef7b9bbda48",
        "before_after_code_files": [
          "ext/fts5/fts5.h||ext/fts5/fts5.h",
          "ext/session/sqlite3session.h||ext/session/sqlite3session.h",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5.h||ext/fts5/fts5.h": [
          "File: ext/fts5/fts5.h -> ext/fts5/fts5.h"
        ],
        "ext/session/sqlite3session.h||ext/session/sqlite3session.h": [
          "File: ext/session/sqlite3session.h -> ext/session/sqlite3session.h"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fefe2d046725254367f9f82a8c8cb137e8b75dbbf4bc48debf0649479ff2f0c2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "ed9d12dbc216d6eac10e186b756582bf1c3ff18d",
      "candidate_info": {
        "commit_hash": "ed9d12dbc216d6eac10e186b756582bf1c3ff18d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed9d12dbc216d6eac10e186b756582bf1c3ff18d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "test/distinct2.test"
        ],
        "message": "When using an index for both DISTINCT and ORDER BY, do not confuse the number of columns required for distinctness with the number required to get the correct sort order. Fix for [6749cb3c].\n\nFossilOrigin-Name: 6ac0f822450b26c7d67c33cdb2a90189cd3cf65a052af8497b795c3f71a23813",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "test/distinct2.test||test/distinct2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b221bb15fd2b9f6a426e5eb439f7dbabbe3c4cab010c49b87dae3bb1f16c081",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3695:     if( pLoop->wsFlags & WHERE_VIRTUALTABLE ){",
          "3696:       if( pLoop->u.vtab.isOrdered ) obSat = obDone;",
          "3697:       break;",
          "3700:     }",
          "3701:     iCur = pWInfo->pTabList->a[pLoop->iTab].iCursor;",
          "",
          "[Removed Lines]",
          "3698:     }else{",
          "3699:       pLoop->u.btree.nIdxCol = 0;",
          "",
          "[Added Lines]",
          "3698:     }else if( wctrlFlags & WHERE_DISTINCTBY ){",
          "3699:       pLoop->u.btree.nDistinctCol = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3838:             pColl = sqlite3ExprNNCollSeq(pWInfo->pParse, pOrderBy->a[i].pExpr);",
          "3839:             if( sqlite3StrICmp(pColl->zName, pIndex->azColl[j])!=0 ) continue;",
          "3840:           }",
          "3842:           isMatch = 1;",
          "3843:           break;",
          "3844:         }",
          "",
          "[Removed Lines]",
          "3841:           pLoop->u.btree.nIdxCol = j+1;",
          "",
          "[Added Lines]",
          "3841:           if( wctrlFlags & WHERE_DISTINCTBY ){",
          "3842:             pLoop->u.btree.nDistinctCol = j+1;",
          "3843:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5160:        && (pLoop->wsFlags & WHERE_INDEXED)!=0",
          "5161:        && (pIdx = pLoop->u.btree.pIndex)->hasStat1",
          "5163:        && pIdx->aiRowLogEst[n]>=36",
          "5164:       ){",
          "5165:         int r1 = pParse->nMem+1;",
          "",
          "[Removed Lines]",
          "5162:        && (n = pLoop->u.btree.nIdxCol)>0",
          "",
          "[Added Lines]",
          "5164:        && (n = pLoop->u.btree.nDistinctCol)>0",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "test/distinct2.test||test/distinct2.test": [
          "File: test/distinct2.test -> test/distinct2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:   SELECT DISTINCT a FROM t1, t2 WHERE x=b;",
          "230: } {1 1}",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232: #-------------------------------------------------------------------------",
          "233: reset_db",
          "235: do_execsql_test 2000 {",
          "236:   CREATE TABLE t0 (c0, c1, c2, PRIMARY KEY (c0, c1));",
          "237:   CREATE TABLE t1 (c2);",
          "238:   INSERT INTO t0(c2) VALUES (0),(1),(3),(4),(5),(6),(7),(8),(9),(10),(11);",
          "239:   INSERT INTO t0(c1) VALUES ('a');",
          "240:   INSERT INTO t1(c2) VALUES (0);",
          "241: }",
          "242: do_execsql_test 2010 {",
          "243:   SELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ORDER BY t0.c0;",
          "244: } {{} 1 {} {} 1 a}",
          "245: do_execsql_test 1.2 {",
          "246:   ANALYZE;",
          "247: }",
          "248: do_execsql_test 2020 {",
          "249:   SELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ORDER BY t0.c0;",
          "250: } {{} 1 {} {} 1 a}",
          "253: do_execsql_test 2030 {",
          "254:   CREATE TABLE t2(a, b, c);",
          "255:   CREATE INDEX t2ab ON t2(a, b);",
          "257:   WITH c(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM c WHERE i<64)",
          "258:     INSERT INTO t2 SELECT 'one', i%2, 'one' FROM c;",
          "260:   WITH c(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM c WHERE i<64)",
          "261:     INSERT INTO t2 SELECT 'two', i%2, 'two' FROM c;",
          "263:   CREATE TABLE t3(x INTEGER PRIMARY KEY);",
          "264:   INSERT INTO t3 VALUES(1);",
          "266:   ANALYZE;",
          "267: }",
          "268: do_execsql_test 2040 {",
          "269:   SELECT DISTINCT a, b, x FROM t3 CROSS JOIN t2 ORDER BY a;",
          "270: } {",
          "271:   one 0 1",
          "272:   one 1 1",
          "273:   two 0 1",
          "274:   two 1 1",
          "275: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}