{
  "cve_id": "CVE-2012-6618",
  "cve_desc": "The av_probe_input_buffer function in libavformat/utils.c in FFmpeg before 1.0.2, when running with certain -probesize values, allows remote attackers to cause a denial of service (crash) via a crafted MP3 file, possibly related to frame size or lack of sufficient \"frames to estimate rate.\"",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "03847eb8259291b4ff1bd840bd779d0699d71f96",
  "patch_info": {
    "commit_hash": "03847eb8259291b4ff1bd840bd779d0699d71f96",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/03847eb8259291b4ff1bd840bd779d0699d71f96",
    "files": [
      "libavformat/utils.c"
    ],
    "message": "lavf: compute probe buffer size more reliably.\n\nThe previous code computes the offset by reversing the growth\nof the allocated buffer size: it is complex and did lead to\ninconsistencies when the size limit is reached.\n\nFix trac ticket #1991.",
    "before_after_code_files": [
      "libavformat/utils.c||libavformat/utils.c"
    ]
  },
  "patch_diff": {
    "libavformat/utils.c||libavformat/utils.c": [
      "File: libavformat/utils.c -> libavformat/utils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "413: {",
      "414:     AVProbeData pd = { filename ? filename : \"\", NULL, -offset };",
      "415:     unsigned char *buf = NULL;",
      "418:     if (!max_probe_size) {",
      "419:         max_probe_size = PROBE_BUF_MAX;",
      "",
      "[Removed Lines]",
      "416:     int ret = 0, probe_size;",
      "",
      "[Added Lines]",
      "416:     int ret = 0, probe_size, buf_offset = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "430:     for(probe_size= PROBE_BUF_MIN; probe_size<=max_probe_size && !*fmt;",
      "431:         probe_size = FFMIN(probe_size<<1, FFMAX(max_probe_size, probe_size+1))) {",
      "432:         int score = probe_size < max_probe_size ? AVPROBE_SCORE_RETRY : 0;",
      "434:         void *buftmp;",
      "436:         if (probe_size < offset) {",
      "",
      "[Removed Lines]",
      "433:         int buf_offset = (probe_size == PROBE_BUF_MIN) ? 0 : probe_size>>1;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "453:             score = 0;",
      "455:         }",
      "457:         pd.buf = &buf[offset];",
      "459:         memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);",
      "",
      "[Removed Lines]",
      "456:         pd.buf_size += ret;",
      "",
      "[Added Lines]",
      "455:         pd.buf_size = buf_offset += ret;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e74cd2f4706f71da5e9205003c1d8263b54ed3fb",
      "candidate_info": {
        "commit_hash": "e74cd2f4706f71da5e9205003c1d8263b54ed3fb",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/e74cd2f4706f71da5e9205003c1d8263b54ed3fb",
        "files": [
          "libavformat/utils.c"
        ],
        "message": "lavf: compute probe buffer size more reliably.\n\nThe previous code computes the offset by reversing the growth\nof the allocated buffer size: it is complex and did lead to\ninconsistencies when the size limit is reached.\n\nFix trac ticket #1991.\n(cherry picked from commit 03847eb8259291b4ff1bd840bd779d0699d71f96)\n\nConflicts:\n\tlibavformat/utils.c",
        "before_after_code_files": [
          "libavformat/utils.c||libavformat/utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/utils.c||libavformat/utils.c"
          ],
          "candidate": [
            "libavformat/utils.c||libavformat/utils.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/utils.c||libavformat/utils.c": [
          "File: libavformat/utils.c -> libavformat/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "459: {",
          "460:     AVProbeData pd = { filename ? filename : \"\", NULL, -offset };",
          "461:     unsigned char *buf = NULL;",
          "464:     if (!max_probe_size) {",
          "465:         max_probe_size = PROBE_BUF_MAX;",
          "",
          "[Removed Lines]",
          "462:     int ret = 0, probe_size;",
          "",
          "[Added Lines]",
          "462:     int ret = 0, probe_size, buf_offset = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "499:             score = 0;",
          "501:         }",
          "503:         pd.buf = &buf[offset];",
          "505:         memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);",
          "",
          "[Removed Lines]",
          "502:         pd.buf_size += ret;",
          "",
          "[Added Lines]",
          "502:         pd.buf_size = buf_offset += ret;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3835cb87714bece30e6ce748c9f11ca640859da",
      "candidate_info": {
        "commit_hash": "d3835cb87714bece30e6ce748c9f11ca640859da",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/d3835cb87714bece30e6ce748c9f11ca640859da",
        "files": [
          "libavformat/utils.c"
        ],
        "message": "lavf: compute probe buffer size more reliably.\n\nThe previous code computes the offset by reversing the growth\nof the allocated buffer size: it is complex and did lead to\ninconsistencies when the size limit is reached.\n\nFix trac ticket #1991.\n(cherry picked from commit 03847eb8259291b4ff1bd840bd779d0699d71f96)\n\nConflicts:\n\tlibavformat/utils.c\n(cherry picked from commit e74cd2f4706f71da5e9205003c1d8263b54ed3fb)",
        "before_after_code_files": [
          "libavformat/utils.c||libavformat/utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/utils.c||libavformat/utils.c"
          ],
          "candidate": [
            "libavformat/utils.c||libavformat/utils.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/utils.c||libavformat/utils.c": [
          "File: libavformat/utils.c -> libavformat/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "460: {",
          "461:     AVProbeData pd = { filename ? filename : \"\", NULL, -offset };",
          "462:     unsigned char *buf = NULL;",
          "465:     if (!max_probe_size) {",
          "466:         max_probe_size = PROBE_BUF_MAX;",
          "",
          "[Removed Lines]",
          "463:     int ret = 0, probe_size;",
          "",
          "[Added Lines]",
          "463:     int ret = 0, probe_size, buf_offset = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "500:             score = 0;",
          "502:         }",
          "504:         pd.buf = &buf[offset];",
          "506:         memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);",
          "",
          "[Removed Lines]",
          "503:         pd.buf_size += ret;",
          "",
          "[Added Lines]",
          "503:         pd.buf_size = buf_offset += ret;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "941bb552c6e08b40eb7d7842df19285cd650edd0",
      "candidate_info": {
        "commit_hash": "941bb552c6e08b40eb7d7842df19285cd650edd0",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/941bb552c6e08b40eb7d7842df19285cd650edd0",
        "files": [
          "libavformat/utils.c"
        ],
        "message": "Fix memory corruption in case of memory allocation failure in av_probe_input_buffer()\n\nReported-by: Tanami Ohad\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavformat/utils.c||libavformat/utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/utils.c||libavformat/utils.c"
          ],
          "candidate": [
            "libavformat/utils.c||libavformat/utils.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/utils.c||libavformat/utils.c": [
          "File: libavformat/utils.c -> libavformat/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "527:         probe_size = FFMIN(probe_size<<1, FFMAX(max_probe_size, probe_size+1))) {",
          "528:         int score = probe_size < max_probe_size ? AVPROBE_SCORE_MAX/4 : 0;",
          "529:         int buf_offset = (probe_size == PROBE_BUF_MIN) ? 0 : probe_size>>1;",
          "531:         if (probe_size < offset) {",
          "532:             continue;",
          "533:         }",
          "537:         if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0) {",
          "539:             if (ret != AVERROR_EOF) {",
          "",
          "[Removed Lines]",
          "536:         buf = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);",
          "",
          "[Added Lines]",
          "530:         void *buftmp;",
          "537:         buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);",
          "538:         if(!buftmp){",
          "539:             av_free(buf);",
          "540:             return AVERROR(ENOMEM);",
          "541:         }",
          "542:         buf=buftmp;",
          "",
          "---------------"
        ]
      }
    }
  ]
}