{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a75752bb81eb45b905c4d344b5d059a0c7bc1154",
      "candidate_info": {
        "commit_hash": "a75752bb81eb45b905c4d344b5d059a0c7bc1154",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/a75752bb81eb45b905c4d344b5d059a0c7bc1154",
        "files": [
          "bindings/Makefile",
          "bindings/const_generator.py",
          "bindings/powershell/Capstone/Capstone.psd1",
          "bindings/powershell/Capstone/Capstone.psm1",
          "bindings/powershell/Capstone/Const/capstone_h.cs",
          "bindings/powershell/Capstone/Lib/Capstone/.gitignore",
          "bindings/powershell/Invoke-Capstone.ps1",
          "bindings/powershell/README",
          "bindings/powershell/README.md"
        ],
        "message": "+Get-CapstoneDisassembly\n\nReworked according to the module in Keystone",
        "before_after_code_files": [
          "bindings/const_generator.py||bindings/const_generator.py",
          "bindings/powershell/Capstone/Capstone.psd1||bindings/powershell/Capstone/Capstone.psd1",
          "bindings/powershell/Invoke-Capstone.ps1||bindings/powershell/Capstone/Capstone.psm1",
          "bindings/powershell/Capstone/Const/capstone_h.cs||bindings/powershell/Capstone/Const/capstone_h.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/const_generator.py||bindings/const_generator.py": [
          "File: bindings/const_generator.py -> bindings/const_generator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: include = [ 'arm.h', 'arm64.h', 'mips.h', 'x86.h', 'ppc.h', 'sparc.h', 'systemz.h', 'xcore.h' ]",
          "10: template = {",
          "11:     'java': {",
          "12:             'header': \"// For Capstone Engine. AUTO-GENERATED FILE, DO NOT EDIT\\npackage capstone;\\n\\npublic class %s_const {\\n\",",
          "13:             'footer': \"}\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:     'powershell': {",
          "12:             'header': \"# For Capstone Engine. AUTO-GENERATED FILE, DO NOT EDIT [%s_h.cs]\\n\",",
          "13:             'footer': \"\",",
          "14:             'line_format': '%s = %s\\n',",
          "15:             'out_file': './powershell/Capstone/Const/%s_h.cs',",
          "16:             # only capstone.h required, but it is not included above on line 8?",
          "17:             'capstone.h': 'capstone',",
          "18:             'comment_open': '///',",
          "19:             'comment_close': '',",
          "20:         },",
          "",
          "---------------"
        ],
        "bindings/powershell/Capstone/Capstone.psd1||bindings/powershell/Capstone/Capstone.psd1": [
          "File: bindings/powershell/Capstone/Capstone.psd1 -> bindings/powershell/Capstone/Capstone.psd1",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: @{",
          "2: # Script module or binary module file associated with this manifest.",
          "3: ModuleToProcess = 'Capstone.psm1'",
          "5: # Version number of this module.",
          "6: ModuleVersion = '0.0.0.1'",
          "8: # ID used to uniquely identify this module",
          "9: GUID = 'd34db33f-9958-436d-a2d8-a77844a2bda5'",
          "11: # Author of this module",
          "12: Author = 'Ruben Boonen'",
          "14: # Copyright statement for this module",
          "15: Copyright = 'BSD 3-Clause'",
          "17: # Description of the functionality provided by this module",
          "18: Description = 'Capstone Engine Binding Module'",
          "20: # Minimum version of the Windows PowerShell engine required by this module",
          "21: PowerShellVersion = '2.0'",
          "23: # Functions to export from this module",
          "24: FunctionsToExport = '*'",
          "25: }",
          "",
          "---------------"
        ],
        "bindings/powershell/Invoke-Capstone.ps1||bindings/powershell/Capstone/Capstone.psm1": [
          "File: bindings/powershell/Invoke-Capstone.ps1 -> bindings/powershell/Capstone/Capstone.psm1",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <#",
          "3: .SYNOPSIS",
          "10: .DESCRIPTION",
          "11:  Author: Ruben Boonen (@FuzzySec)",
          "",
          "[Removed Lines]",
          "1: function Invoke-Capstone {",
          "4:  Powershell wrapper for Capstone v3 (using inline C#). The only Capstone feature",
          "5:  which has not been implemented is the extended architecture-dependent information.",
          "7:  In effect the function directly parses the Capstone dll so it can support any",
          "8:  features implemented by Capstone so long as function calls are prototyped in C#.",
          "",
          "[Added Lines]",
          "1: function Get-CapstoneDisassembly {",
          "4:  Powershell wrapper for Capstone (using inline C#).",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:  Required Dependencies: None",
          "14:  Optional Dependencies: None",
          "25: .EXAMPLE",
          "28:  C:\\PS> $Bytes = [Byte[]] @( 0x10, 0xf1, 0x10, 0xe7, 0x11, 0xf2, 0x31, 0xe7, 0xdc, 0xa1, 0x2e, 0xf3, 0xe8, 0x4e, 0x62, 0xf3 )",
          "31:  sdiv r0, r0, r1",
          "32:  udiv r1, r1, r2",
          "",
          "[Removed Lines]",
          "16: .EXAMPLE",
          "18:  # x86 Assembly",
          "19:  C:\\PS> $Bytes = [Byte[]] @(0x90,0x90)",
          "20:  C:\\PS> Invoke-Capstone -Architecture X86 -Mode 32 -Bytes $Bytes",
          "22:  nop",
          "23:  nop",
          "27:  # ARM Assembly",
          "29:  C:\\PS> Invoke-Capstone -Architecture ARM -Mode ARM -Bytes $Bytes",
          "",
          "[Added Lines]",
          "12: .PARAMETER Architecture",
          "13:  Architecture type.",
          "15: .PARAMETER Mode",
          "16:  Mode type.",
          "18: .PARAMETER Bytes",
          "19:  Byte array to be disassembled.",
          "21: .PARAMETER Syntax",
          "22:  Syntax for output assembly.",
          "24: .PARAMETER Address",
          "25:  Assign address for the first instruction to be disassembled.",
          "27: .PARAMETER Detailed",
          "28:  Return detailed output.",
          "30: .PARAMETER Version",
          "31:  Print ASCII version banner.",
          "36:  C:\\PS> Get-CapstoneDisassembly -Architecture CS_ARCH_ARM -Mode CS_MODE_ARM -Bytes $Bytes",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:  # Detailed mode & ATT syntax",
          "39:  C:\\PS> $Bytes = [Byte[]] @( 0xB8, 0x0A, 0x00, 0x00, 0x00, 0xF7, 0xF3 )",
          "42:  Size     : 5",
          "43:  Address  : 0x100000",
          "",
          "[Removed Lines]",
          "40:  C:\\PS> Invoke-Capstone -Architecture X86 -Mode 32 -Bytes $Bytes -Syntax ATT -Detailed",
          "",
          "[Added Lines]",
          "47:  C:\\PS> Get-CapstoneDisassembly -Architecture CS_ARCH_X86 -Mode CS_MODE_32 -Bytes $Bytes -Syntax ATT -Detailed",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "58: .EXAMPLE",
          "61:  C:\\PS> $Bytes = [Byte[]] @( 0xB8, 0x0A, 0x00, 0x00, 0x00, 0xF7, 0xF3 )",
          "63:  C:\\PS> $Object |Select-Object Size,Mnemonic,Operands",
          "65:  Size Mnemonic Operands",
          "",
          "[Removed Lines]",
          "60:  # Invoke-Capstone emits objects",
          "62:  C:\\PS> $Object = Invoke-Capstone -Architecture X86 -Mode 32 -Bytes $Bytes -Detailed",
          "",
          "[Added Lines]",
          "67:  # Get-CapstoneDisassembly emits objects",
          "69:  C:\\PS> $Object = Get-CapstoneDisassembly -Architecture CS_ARCH_X86 -Mode CS_MODE_32 -Bytes $Bytes -Detailed",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "70: #>",
          "72:  param(",
          "85:   ]",
          "106:   ]",
          "110:   [ValidateNotNullOrEmpty()]",
          "111:   [Byte[]]$Bytes,",
          "114:   [String]$Syntax = \"Intel\",",
          "117:   [Int]$Address = 0x100000,",
          "121:     )",
          "123:  Add-Type -TypeDefinition @\"",
          "124:  using System;",
          "125:  using System.Diagnostics;",
          "",
          "[Removed Lines]",
          "73:         [Parameter(Mandatory = $True)]",
          "74:         [ValidateSet(",
          "75:    'ARM',",
          "76:    'ARM64',",
          "77:    'MIPS',",
          "78:    'X86',",
          "79:    'PPC',",
          "80:    'SPARC',",
          "81:    'SYSZ',",
          "82:    'XCORE',",
          "83:    'MAX',",
          "84:    'ALL')",
          "86:         [String]$Architecture,",
          "88:         [Parameter(Mandatory = $True)]",
          "89:         [ValidateSet(",
          "90:    'Little_Endian',",
          "91:    'ARM',",
          "92:    '16',",
          "93:    '32',",
          "94:    '64',",
          "95:    'THUMB',",
          "96:    'MCLASS',",
          "97:    'V8',",
          "98:    'MICRO',",
          "99:    'MIPS3',",
          "100:    'MIPS32R6',",
          "101:    'MIPSGP64',",
          "102:    'V9',",
          "103:    'Big_Endian',",
          "104:    'MIPS32',",
          "105:    'MIPS64')",
          "107:         [String]$Mode,",
          "109:   [Parameter(Mandatory = $True)]",
          "113:   [Parameter(Mandatory = $False)]",
          "116:   [Parameter(Mandatory = $False)]",
          "119:   [Parameter(Mandatory = $False)]",
          "120:   [switch]$Detailed = $null",
          "",
          "[Added Lines]",
          "80:   [Parameter(ParameterSetName='Capstone', Mandatory = $True)]",
          "81:   [ValidateSet(",
          "82:    'CS_ARCH_ARM',",
          "83:    'CS_ARCH_ARM64',",
          "84:    'CS_ARCH_MIPS',",
          "85:    'CS_ARCH_X86',",
          "86:    'CS_ARCH_PPC',",
          "87:    'CS_ARCH_SPARC',",
          "88:    'CS_ARCH_SYSZ',",
          "89:    'CS_ARCH_XCORE',",
          "90:    'CS_ARCH_MAX',",
          "91:    'CS_ARCH_ALL')",
          "93:   [String]$Architecture,",
          "95:   [Parameter(ParameterSetName='Capstone', Mandatory = $True)]",
          "96:   [ValidateSet(",
          "97:    'CS_MODE_LITTLE_ENDIAN',",
          "98:    'CS_MODE_ARM',",
          "99:    'CS_MODE_16',",
          "100:    'CS_MODE_32',",
          "101:    'CS_MODE_64',",
          "102:    'CS_MODE_THUMB',",
          "103:    'CS_MODE_MCLASS',",
          "104:    'CS_MODE_V8',",
          "105:    'CS_MODE_MICRO',",
          "106:    'CS_MODE_MIPS3',",
          "107:    'CS_MODE_MIPS32R6',",
          "108:    'CS_MODE_MIPSGP64',",
          "109:    'CS_MODE_V9',",
          "110:    'CS_MODE_BIG_ENDIAN',",
          "111:    'CS_MODE_MIPS32',",
          "112:    'CS_MODE_MIPS64')",
          "114:   [String]$Mode,",
          "116:   [Parameter(ParameterSetName='Capstone', Mandatory = $True)]",
          "120:   [Parameter(ParameterSetName='Capstone', Mandatory = $False)]",
          "121:   [ValidateSet(",
          "122:    'Intel',",
          "123:    'ATT')",
          "124:   ]",
          "127:   [Parameter(ParameterSetName='Capstone', Mandatory = $False)]",
          "130:   [Parameter(ParameterSetName='Capstone', Mandatory = $False)]",
          "131:   [switch]$Detailed = $null,",
          "133:   [Parameter(ParameterSetName='Version', Mandatory = $False)]",
          "134:   [switch]$Version = $null",
          "137:  # Compatibility for PS v2 / PS v3+",
          "138:  if(!$PSScriptRoot) {",
          "139:   $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent",
          "140:  }",
          "142:  # Set the capstone DLL path",
          "143:  $DllPath = $($PSScriptRoot + '\\Lib\\Capstone\\capstone.dll').Replace('\\','\\\\')",
          "145:  # Make sure the user didn't forget the DLL",
          "146:  if (![IO.File]::Exists($DllPath)) {",
          "147:   echo \"`n[!] Missing Capstone DLL\"",
          "148:   echo \"[>] Quitting!`n\"",
          "149:   Return",
          "150:  }",
          "152:  # Load C# constants",
          "153:  $cs_err = Select-String \"CS_ERR_\" $($PSScriptRoot + '\\Const\\capstone_h.cs') |select -exp line",
          "154:  $cs_arch = Select-String \"CS_ARCH_\" $($PSScriptRoot + '\\Const\\capstone_h.cs') |select -exp line",
          "155:  $cs_mode = Select-String \"CS_MODE_\" $($PSScriptRoot + '\\Const\\capstone_h.cs') |select -exp line",
          "157:  # Inline C# to parse the unmanaged capstone DLL",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "156:   public byte groups_count;",
          "157:  }",
          "160:  public enum cs_err : int",
          "161:  {",
          "176:  }",
          "178:  public static class Capstone",
          "179:  {",
          "181:   public static extern cs_err cs_open(",
          "184:    ref IntPtr handle);",
          "187:   public static extern UInt32 cs_disasm(",
          "188:    IntPtr handle,",
          "189:    byte[] code,",
          "",
          "[Removed Lines]",
          "159:  [Flags]",
          "162:   CS_ERR_OK = 0,    /// No error: everything was fine",
          "163:   CS_ERR_MEM,       /// Out-Of-Memory error: cs_open(), cs_disasm(), cs_disasm_iter()",
          "164:   CS_ERR_ARCH,      /// Unsupported architecture: cs_open()",
          "165:   CS_ERR_HANDLE,    /// Invalid handle: cs_op_count(), cs_op_index()",
          "166:   CS_ERR_CSH,       /// Invalid csh argument: cs_close(), cs_errno(), cs_option()",
          "167:   CS_ERR_MODE,      /// Invalid/unsupported mode: cs_open()",
          "168:   CS_ERR_OPTION,    /// Invalid/unsupported option: cs_option()",
          "169:   CS_ERR_DETAIL,    /// Information is unavailable because detail option is OFF",
          "170:   CS_ERR_MEMSETUP,  /// Dynamic memory management uninitialized (see CS_OPT_MEM)",
          "171:   CS_ERR_VERSION,   /// Unsupported version (bindings)",
          "172:   CS_ERR_DIET,      /// Access irrelevant data in \"diet\" engine",
          "173:   CS_ERR_SKIPDATA,  /// Access irrelevant data for \"data\" instruction in SKIPDATA mode",
          "174:   CS_ERR_X86_ATT,   /// X86 AT&T syntax is unsupported (opt-out at compile time)",
          "175:   CS_ERR_X86_INTEL, /// X86 Intel syntax is unsupported (opt-out at compile time)",
          "180:   [DllImport(\"capstone.dll\")]",
          "182:    int arch,",
          "183:    int mode,",
          "186:   [DllImport(\"capstone.dll\")]",
          "",
          "[Added Lines]",
          "196:   $cs_err",
          "197:  }",
          "199:  public enum cs_arch : int",
          "200:  {",
          "201:   $cs_arch",
          "202:  }",
          "204:  public enum cs_mode : int",
          "205:  {",
          "206:   $cs_mode",
          "211:   [DllImport(\"$DllPath\")]",
          "213:    cs_arch arch,",
          "214:    cs_mode mode,",
          "217:   [DllImport(\"$DllPath\")]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "192:    int count,",
          "193:    ref IntPtr insn);",
          "196:   public static extern bool cs_free(",
          "197:    IntPtr insn,",
          "198:    int count);",
          "201:   public static extern cs_err cs_close(",
          "202:    IntPtr handle);",
          "205:   public static extern cs_err cs_option(",
          "206:    IntPtr handle,",
          "207:    int type,",
          "208:    int value);",
          "211:   public static extern IntPtr cs_reg_name(",
          "212:    IntPtr handle,",
          "213:    uint reg_id);",
          "214:  }",
          "215: \"@",
          "249:  }",
          "251:  # Disasm Handle",
          "252:  $DisAsmHandle = [IntPtr]::Zero",
          "254:  # Initialize Capstone with cs_open()",
          "266:  if ($CallResult -ne \"CS_ERR_OK\") {",
          "267:   if ($CallResult -eq \"CS_ERR_MODE\"){",
          "268:    echo \"`n[!] Invalid Architecture/Mode combination\"",
          "",
          "[Removed Lines]",
          "195:   [DllImport(\"capstone.dll\")]",
          "200:   [DllImport(\"capstone.dll\")]",
          "204:   [DllImport(\"capstone.dll\")]",
          "210:   [DllImport(\"capstone.dll\", CallingConvention = CallingConvention.Cdecl)]",
          "217:  # Architecture -> int",
          "218:  New-Variable -Option Constant -Name cs_arch -Value @{",
          "219:   \"ARM\"   = 0",
          "220:   \"ARM64\" = 1",
          "221:   \"MIPS\"  = 2",
          "222:   \"X86\"   = 3",
          "223:   \"PPC\"   = 4",
          "224:   \"SPARC\" = 5",
          "225:   \"SYSZ\"  = 6",
          "226:   \"XCORE\" = 7",
          "227:   \"MAX\"   = 8",
          "228:   \"ALL\"   = 0xFFFF",
          "229:  }",
          "231:  # Mode -> int",
          "232:  New-Variable -Option Constant -Name cs_mode -Value @{",
          "233:   \"Little_Endian\" = 0",
          "234:   \"ARM\"           = 0",
          "235:   \"16\"            = 2",
          "236:   \"32\"            = 4",
          "237:   \"64\"            = 8",
          "238:   \"THUMB\"         = 16",
          "239:   \"MCLASS\"        = 32",
          "240:   \"V8\"            = 64",
          "241:   \"MICRO\"         = 16",
          "242:   \"MIPS3\"         = 32",
          "243:   \"MIPS32R6\"      = 64",
          "244:   \"MIPSGP64\"      = 128",
          "245:   \"V9\"            = 16",
          "246:   \"Big_Endian\"    = -2147483648",
          "247:   \"MIPS32\"        = 4",
          "248:   \"MIPS64\"        = 8",
          "255:  try {",
          "256:   $CallResult = [Capstone]::cs_open($cs_arch[$Architecture],$cs_mode[$Mode],[ref]$DisAsmHandle)",
          "257:  } catch {",
          "258:   if ($Error[0].FullyQualifiedErrorId -eq \"DllNotFoundException\") {",
          "259:    echo \"`n[!] Missing Capstone DLL\"",
          "260:   } else {",
          "261:    echo \"`n[!] Exception: $($Error[0].FullyQualifiedErrorId)\"",
          "262:   }",
          "263:   echo \"[>] Quitting..`n\"",
          "264:   Return",
          "265:  }",
          "",
          "[Added Lines]",
          "226:   [DllImport(\"$DllPath\")]",
          "231:   [DllImport(\"$DllPath\")]",
          "235:   [DllImport(\"$DllPath\")]",
          "241:   [DllImport(\"$DllPath\", CallingConvention = CallingConvention.Cdecl)]",
          "246:   [DllImport(\"$DllPath\")]",
          "247:   public static extern int cs_version(",
          "248:    uint major,",
          "249:    uint minor);",
          "253:  if ($Version){",
          "254:   $VerCount = [System.BitConverter]::GetBytes($([Capstone]::cs_version($null,$null)))",
          "255:   $Banner = @\"",
          "257:                  (((;",
          "258:               (; \"((((\\",
          "259:            ;((((((; \"((((;",
          "260:           ((((\"\"\\(((( \"((((",
          "261:         ((((\" ((\\ \"(((( \"(((\\",
          "262:       ;(((/ ((((((( \"(((( \\(((",
          "263:      ((((\" (((* \"(((( \\(((;\"(((\\",
          "264:     ((((\";(((\"/(( \\(((;\"(((\\\"(((\\",
          "265:    (((( (((( ((((\" \"(((\\ ((() (((\\",
          "266:   ;(((\"(((( (((*     **\"\" ((()\"(((;",
          "267:   (((\" ((( (((( ((((((((((((((:*(((",
          "268:  (((( (((*)((( ********\"\"\"\" ;;(((((;",
          "269:  (((* ((( (((((((((((((((((((((*\"\" (",
          "270:  (((\"(((( \"\"\"***********\"\"\"\" ;;(((((",
          "271:   \"\" (((((((((((((((((((((((((((*\"\"",
          "272:          \"\"\"****(((((****\"\"\"",
          "274:      -=[Capstone Engine v$($VerCount[1]).$($VerCount[0])]=-",
          "276: \"@",
          "277:   # Mmm ASCII version banner!",
          "278:   $Banner",
          "279:   Return",
          "286:  $CallResult = [Capstone]::cs_open($Architecture,$Mode,[ref]$DisAsmHandle)",
          "",
          "---------------"
        ],
        "bindings/powershell/Capstone/Const/capstone_h.cs||bindings/powershell/Capstone/Const/capstone_h.cs": [
          "File: bindings/powershell/Capstone/Const/capstone_h.cs -> bindings/powershell/Capstone/Const/capstone_h.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: CS_ERR_OK = 0,",
          "2: CS_ERR_MEM,",
          "3: CS_ERR_ARCH,",
          "4: CS_ERR_HANDLE,",
          "5: CS_ERR_CSH,",
          "6: CS_ERR_MODE,",
          "7: CS_ERR_OPTION,",
          "8: CS_ERR_DETAIL,",
          "9: CS_ERR_MEMSETUP,",
          "10: CS_ERR_VERSION,",
          "11: CS_ERR_DIET,",
          "12: CS_ERR_SKIPDATA,",
          "13: CS_ERR_X86_ATT,",
          "14: CS_ERR_X86_INTEL,",
          "15: CS_ARCH_ARM = 0,",
          "16: CS_ARCH_ARM64,",
          "17: CS_ARCH_MIPS,",
          "18: CS_ARCH_X86,",
          "19: CS_ARCH_PPC,",
          "20: CS_ARCH_SPARC,",
          "21: CS_ARCH_SYSZ,",
          "22: CS_ARCH_XCORE,",
          "23: CS_ARCH_MAX,",
          "24: CS_ARCH_ALL = 0xFFFF,",
          "25: CS_MODE_LITTLE_ENDIAN = 0,",
          "26: CS_MODE_ARM = 0,",
          "27: CS_MODE_16 = 1 << 1,",
          "28: CS_MODE_32 = 1 << 2,",
          "29: CS_MODE_64 = 1 << 3,",
          "30: CS_MODE_THUMB = 1 << 4,",
          "31: CS_MODE_MCLASS = 1 << 5,",
          "32: CS_MODE_V8 = 1 << 6,",
          "33: CS_MODE_MICRO = 1 << 4,",
          "34: CS_MODE_MIPS3 = 1 << 5,",
          "35: CS_MODE_MIPS32R6 = 1 << 6,",
          "36: CS_MODE_MIPSGP64 = 1 << 7,",
          "37: CS_MODE_V9 = 1 << 4,",
          "38: CS_MODE_BIG_ENDIAN = 1 << 31,",
          "39: CS_MODE_MIPS32 = CS_MODE_32,",
          "40: CS_MODE_MIPS64 = CS_MODE_64,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85f4b8f7d9314bb73c06367ff83c3b46c3ea9433",
      "candidate_info": {
        "commit_hash": "85f4b8f7d9314bb73c06367ff83c3b46c3ea9433",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/85f4b8f7d9314bb73c06367ff83c3b46c3ea9433",
        "files": [
          "contrib/windows_kernel/libc.cpp"
        ],
        "message": "Fix an integer overflow issue (#871)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.\n\n* provide a validity check in malloc() function to prevent against integer overflow conditions\n\n* missing Ntintsafe.h\n\n* use tabs for indentation",
        "before_after_code_files": [
          "contrib/windows_kernel/libc.cpp||contriwindows_kernel/libc.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/windows_kernel/libc.cpp||contriwindows_kernel/libc.cpp": [
          "File: contrib/windows_kernel/libc.cpp -> contriwindows_kernel/libc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include \"libc.h\"",
          "7: #include <memory>",
          "9: #pragma warning(push)",
          "10: #pragma warning (disable : 4565)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:  __in size_t size",
          "34:  )",
          "35: {",
          "36:  MEMBLOCK *pBlock = static_cast<MEMBLOCK*>(",
          "37:   ExAllocatePoolWithTag(",
          "38:    NonPagedPoolNxCacheAligned,",
          "40:    _LIBC_POOL_TAG));",
          "42:  if (nullptr == pBlock)",
          "",
          "[Removed Lines]",
          "39:    size + sizeof(MEMBLOCK),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f670a23753a9a839219d7b6a79a483556939bd2b",
      "candidate_info": {
        "commit_hash": "f670a23753a9a839219d7b6a79a483556939bd2b",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f670a23753a9a839219d7b6a79a483556939bd2b",
        "files": [
          "bindings/java/capstone/M68k_const.java",
          "bindings/ocaml/m68k_const.ml",
          "bindings/python/capstone/m68k_const.py"
        ],
        "message": "update generated bindings",
        "before_after_code_files": [
          "bindings/javcapstone/M68k_const.java||bindings/java/capstone/M68k_const.java",
          "bindings/ocaml/m68k_const.ml||bindings/ocaml/m68k_const.ml",
          "bindings/python/capstone/m68k_const.py||bindings/python/capstone/m68k_const.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/javcapstone/M68k_const.java||bindings/java/capstone/M68k_const.java": [
          "File: bindings/javcapstone/M68k_const.java -> bindings/java/capstone/M68k_const.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "484:  public static final int M68K_GRP_INVALID = 0;",
          "485:  public static final int M68K_GRP_JUMP = 1;",
          "486:  public static final int M68K_GRP_RET = 3;",
          "487:  public static final int M68K_GRP_IRET = 5;",
          "488:  public static final int M68K_GRP_ENDING = 6;",
          "",
          "---------------"
        ],
        "bindings/ocaml/m68k_const.ml||bindings/ocaml/m68k_const.ml": [
          "File: bindings/ocaml/m68k_const.ml -> bindings/ocaml/m68k_const.ml",
          "--- Hunk 1 ---",
          "[Context before]",
          "475: let _M68K_INS_TST = 372;;",
          "476: let _M68K_INS_UNLK = 373;;",
          "477: let _M68K_INS_UNPK = 374;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479: (* Group of M68K instructions *)",
          "481: let _M68K_GRP_INVALID = 0;;",
          "482: let _M68K_GRP_JUMP = 1;;",
          "483: let _M68K_GRP_RET = 3;;",
          "484: let _M68K_GRP_IRET = 5;;",
          "485: let _M68K_GRP_ENDING = 6;;",
          "",
          "---------------"
        ],
        "bindings/python/capstone/m68k_const.py||bindings/python/capstone/m68k_const.py": [
          "File: bindings/python/capstone/m68k_const.py -> bindings/python/capstone/m68k_const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "475: M68K_INS_TST = 372",
          "476: M68K_INS_UNLK = 373",
          "477: M68K_INS_UNPK = 374",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479: # Group of M68K instructions",
          "481: M68K_GRP_INVALID = 0",
          "482: M68K_GRP_JUMP = 1",
          "483: M68K_GRP_RET = 3",
          "484: M68K_GRP_IRET = 5",
          "485: M68K_GRP_ENDING = 6",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3388167dbe8679c2b7e4f82d3c6cb0f091386e05",
      "candidate_info": {
        "commit_hash": "3388167dbe8679c2b7e4f82d3c6cb0f091386e05",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/3388167dbe8679c2b7e4f82d3c6cb0f091386e05",
        "files": [
          "arch/X86/X86Disassembler.c"
        ],
        "message": "fix:prefix 0x67 missed.",
        "before_after_code_files": [
          "arch/X86/X86Disassembler.c||arch/X86/X86Disassembler.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86Disassembler.c||arch/X86/X86Disassembler.c": [
          "File: arch/X86/X86Disassembler.c -> arch/X86/X86Disassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "799:  insn.prefixPresent[0x64] = 0;",
          "800:  insn.prefixPresent[0x65] = 0;",
          "801:  insn.prefixPresent[0x66] = 0;",
          "802:  insn.prefixPresent[0xf0] = 0;",
          "803:  insn.prefixPresent[0xf2] = 0;",
          "804:  insn.prefixPresent[0xf3] = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802:  insn.prefixPresent[0x67] = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "914d0a7e27cfd56edfec1a8b66a839f7db6c80d9",
      "candidate_info": {
        "commit_hash": "914d0a7e27cfd56edfec1a8b66a839f7db6c80d9",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/914d0a7e27cfd56edfec1a8b66a839f7db6c80d9",
        "files": [
          "arch/M68K/M68KDisassembler.c"
        ],
        "message": "Added enum tag setting to FPU handling code for m68k",
        "before_after_code_files": [
          "arch/M68K/M68KDisassembler.c||arch/M68K/M68KDisassembler.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/M68K/M68KDisassembler.c||arch/M68K/M68KDisassembler.c": [
          "File: arch/M68K/M68KDisassembler.c -> arch/M68K/M68KDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2079:     ext->op_size.type = M68K_SIZE_TYPE_FPU;",
          "2080:     ext->op_size.fpu_size = M68K_FPU_SIZE_SINGLE;",
          "2081:     get_ea_mode_op(info, op0, info->ir, 4);",
          "2082:     break;",
          "2084:    case 0x05:",
          "2085:     ext->op_size.type = M68K_SIZE_TYPE_FPU;",
          "2086:     ext->op_size.fpu_size = M68K_FPU_SIZE_DOUBLE;",
          "2087:     get_ea_mode_op(info, op0, info->ir, 8);",
          "2088:     break;",
          "2090:    default :",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2082:     op0->type = M68K_OP_FP_SINGLE;",
          "2089:     op0->type = M68K_OP_FP_DOUBLE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}