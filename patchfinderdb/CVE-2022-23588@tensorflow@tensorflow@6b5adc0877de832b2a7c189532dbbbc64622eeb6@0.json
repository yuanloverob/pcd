{
  "cve_id": "CVE-2022-23588",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that Grappler optimizer would attempt to build a tensor using a reference `dtype`. This would result in a crash due to a `CHECK`-fail in the `Tensor` constructor as reference types are not allowed. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "6b5adc0877de832b2a7c189532dbbbc64622eeb6",
  "patch_info": {
    "commit_hash": "6b5adc0877de832b2a7c189532dbbbc64622eeb6",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/6b5adc0877de832b2a7c189532dbbbc64622eeb6",
    "files": [
      "tensorflow/core/grappler/optimizers/constant_folding.cc"
    ],
    "message": "Prevent `CHECK`-fail when building reference tensor.\n\nThe tensor constructor does not allow reference dtypes, as these should not show up explicitly. However, when passed these invalid types instead of building an invalid object the constructor crashes via a `CHECK`-fail. We have a static builder that properly handles this case but is not applicable given current usage.\n\nInstead, before calling the constructor, we can check that the dtype is not a reference type and return an error otherwise, given that the dtype is user controlled so malicious users can trigger denial of service.\n\nPiperOrigin-RevId: 409662503\nChange-Id: I5892f831fde7f276cd7ab34519cf6b8061c71a59",
    "before_after_code_files": [
      "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc": [
      "File: tensorflow/core/grappler/optimizers/constant_folding.cc -> tensorflow/core/grappler/optimizers/constant_folding.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1363:                           input_tensor.ToString(),",
      "1364:                           \" has a dtype of DT_INVALID.\"));",
      "1365:     }",
      "1366:     Tensor* value = new Tensor(raw_val.dtype(), raw_val.tensor_shape());",
      "1367:     if (!value->FromProto(raw_val)) {",
      "1368:       delete (value);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1366:     if (IsRefType(raw_val.dtype())) {",
      "1367:       return errors::InvalidArgument(",
      "1368:           \"Not allowed to construct a tensor with reference dtype, got \",",
      "1369:           DataTypeString(raw_val.dtype()));",
      "1370:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "444c9f6d919210395bc95f10901125e95f3a701d",
      "candidate_info": {
        "commit_hash": "444c9f6d919210395bc95f10901125e95f3a701d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/444c9f6d919210395bc95f10901125e95f3a701d",
        "files": [
          "tensorflow/core/grappler/optimizers/constant_folding.cc"
        ],
        "message": "Prevent `CHECK`-fail when building reference tensor.\n\nThe tensor constructor does not allow reference dtypes, as these should not show up explicitly. However, when passed these invalid types instead of building an invalid object the constructor crashes via a `CHECK`-fail. We have a static builder that properly handles this case but is not applicable given current usage.\n\nInstead, before calling the constructor, we can check that the dtype is not a reference type and return an error otherwise, given that the dtype is user controlled so malicious users can trigger denial of service.\n\nPiperOrigin-RevId: 409662503\nChange-Id: I5892f831fde7f276cd7ab34519cf6b8061c71a59",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc": [
          "File: tensorflow/core/grappler/optimizers/constant_folding.cc -> tensorflow/core/grappler/optimizers/constant_folding.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1355:     }",
          "1356:     TF_RETURN_IF_ERROR(CheckAttrExists(*input_node, \"value\"));",
          "1357:     const TensorProto& raw_val = input_node->attr().at(\"value\").tensor();",
          "1358:     Tensor* value = new Tensor(raw_val.dtype(), raw_val.tensor_shape());",
          "1359:     CHECK(value->FromProto(raw_val))",
          "1360:         << \"Unable to make Tensor from proto for \" << node.name()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1358:     if (IsRefType(raw_val.dtype())) {",
          "1359:       return errors::InvalidArgument(",
          "1360:           \"Not allowed to construct a tensor with reference dtype, got \",",
          "1361:           DataTypeString(raw_val.dtype()));",
          "1362:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b629c85e5166b68d427f5f649163793020de6952",
      "candidate_info": {
        "commit_hash": "b629c85e5166b68d427f5f649163793020de6952",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b629c85e5166b68d427f5f649163793020de6952",
        "files": [
          "tensorflow/core/grappler/optimizers/constant_folding.cc"
        ],
        "message": "Prevent `CHECK`-fail when building reference tensor.\n\nThe tensor constructor does not allow reference dtypes, as these should not show up explicitly. However, when passed these invalid types instead of building an invalid object the constructor crashes via a `CHECK`-fail. We have a static builder that properly handles this case but is not applicable given current usage.\n\nInstead, before calling the constructor, we can check that the dtype is not a reference type and return an error otherwise, given that the dtype is user controlled so malicious users can trigger denial of service.\n\nPiperOrigin-RevId: 409662503\nChange-Id: I5892f831fde7f276cd7ab34519cf6b8061c71a59",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc": [
          "File: tensorflow/core/grappler/optimizers/constant_folding.cc -> tensorflow/core/grappler/optimizers/constant_folding.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1363:                           input_tensor.ToString(),",
          "1364:                           \" has a dtype of DT_INVALID.\"));",
          "1365:     }",
          "1366:     Tensor* value = new Tensor(raw_val.dtype(), raw_val.tensor_shape());",
          "1367:     if (!value->FromProto(raw_val)) {",
          "1368:       delete (value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1366:     if (IsRefType(raw_val.dtype())) {",
          "1367:       return errors::InvalidArgument(",
          "1368:           \"Not allowed to construct a tensor with reference dtype, got \",",
          "1369:           DataTypeString(raw_val.dtype()));",
          "1370:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc22b88f1cab28d5b498c3e80da7f8799df4245f",
      "candidate_info": {
        "commit_hash": "bc22b88f1cab28d5b498c3e80da7f8799df4245f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/bc22b88f1cab28d5b498c3e80da7f8799df4245f",
        "files": [
          "tensorflow/core/grappler/optimizers/constant_folding.cc"
        ],
        "message": "Prevent `CHECK`-fail when building reference tensor.\n\nThe tensor constructor does not allow reference dtypes, as these should not show up explicitly. However, when passed these invalid types instead of building an invalid object the constructor crashes via a `CHECK`-fail. We have a static builder that properly handles this case but is not applicable given current usage.\n\nInstead, before calling the constructor, we can check that the dtype is not a reference type and return an error otherwise, given that the dtype is user controlled so malicious users can trigger denial of service.\n\nPiperOrigin-RevId: 409662503\nChange-Id: I5892f831fde7f276cd7ab34519cf6b8061c71a59",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc": [
          "File: tensorflow/core/grappler/optimizers/constant_folding.cc -> tensorflow/core/grappler/optimizers/constant_folding.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1363:                           input_tensor.ToString(),",
          "1364:                           \" has a dtype of DT_INVALID.\"));",
          "1365:     }",
          "1366:     Tensor* value = new Tensor(raw_val.dtype(), raw_val.tensor_shape());",
          "1367:     if (!value->FromProto(raw_val)) {",
          "1368:       delete (value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1366:     if (IsRefType(raw_val.dtype())) {",
          "1367:       return errors::InvalidArgument(",
          "1368:           \"Not allowed to construct a tensor with reference dtype, got \",",
          "1369:           DataTypeString(raw_val.dtype()));",
          "1370:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}