{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "406dfcb843794c26a1eb84045030be4fd46767ef",
      "candidate_info": {
        "commit_hash": "406dfcb843794c26a1eb84045030be4fd46767ef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/406dfcb843794c26a1eb84045030be4fd46767ef",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix a performance regression caused by the previous check-in.\n\nFossilOrigin-Name: d7d98d3dff2f0e0cfa5bb8be8e5fd2af5ab470be399eafe3d77b23ee1262f70d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 03c1d75ddc063469fc856114595bd12d21759fe0979ce1ba1cf52e48e6b0d4a1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2139: static Pgno btreePagecount(BtShared *pBt){",
          "2140:   assert( (pBt->nPage & 0x80000000)==0 || CORRUPT_DB );",
          "2142: }",
          "2143: u32 sqlite3BtreeLastPage(Btree *p){",
          "2144:   assert( sqlite3BtreeHoldsMutex(p) );",
          "2146: }",
          "",
          "[Removed Lines]",
          "2141:   return pBt->nPage & 0x7fffffff;",
          "2145:   return btreePagecount(p->pBt);",
          "",
          "[Added Lines]",
          "2141:   return pBt->nPage;",
          "2145:   return btreePagecount(p->pBt) & 0x7fffffff;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbf1c4ba8ab563a3e54db8fc5e21058c1f427b89",
      "candidate_info": {
        "commit_hash": "dbf1c4ba8ab563a3e54db8fc5e21058c1f427b89",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dbf1c4ba8ab563a3e54db8fc5e21058c1f427b89",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "Fix the sqlite3TreeView() output to consistently use a colon and not a comma after the table number in the AST dumps.\n\nFossilOrigin-Name: fa2416f623d83fe93253137302a74fcd6cdd041da337a0756df344d7d09a19f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f84a15394c369cbdb6fba87c603a609722cf1f499626c7f20699060273ab5081",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:     StrAccum x;",
          "132:     char zLine[100];",
          "133:     sqlite3StrAccumInit(&x, 0, zLine, sizeof(zLine), 0);",
          "135:     if( pItem->zDatabase ){",
          "136:       sqlite3_str_appendf(&x, \" %s.%s\", pItem->zDatabase, pItem->zName);",
          "137:     }else if( pItem->zName ){",
          "",
          "[Removed Lines]",
          "134:     sqlite3_str_appendf(&x, \"{%d,*}\", pItem->iCursor);",
          "",
          "[Added Lines]",
          "134:     sqlite3_str_appendf(&x, \"{%d:*}\", pItem->iCursor);",
          "",
          "---------------"
        ]
      }
    }
  ]
}