{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d7382d001a626dec8b6b53da997f88a63a355f9e",
      "candidate_info": {
        "commit_hash": "d7382d001a626dec8b6b53da997f88a63a355f9e",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/d7382d001a626dec8b6b53da997f88a63a355f9e",
        "files": [
          "History.txt",
          "main/RFXNames.cpp"
        ],
        "message": "Fixed: Light Log Set 'Level' for RGB switches",
        "before_after_code_files": [
          "main/RFXNames.cpp||main/RFXNames.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/RFXNames.cpp||main/RFXNames.cpp": [
          "File: main/RFXNames.cpp -> main/RFXNames.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1638:    lstatus = \"On\";",
          "1639:    break;",
          "1640:   case Color_SetBrightnessLevel:",
          "1642:    break;",
          "1643:   case Color_SetColorToWhite:",
          "1644:    lstatus = \"Set to White\";",
          "",
          "[Removed Lines]",
          "1641:    lstatus = \"Set Level\";",
          "",
          "[Added Lines]",
          "1641:    sprintf(szTmp, \"Set Level: %d %%\", llevel);",
          "1642:    if (sValue != \"0\")",
          "1643:     lstatus = szTmp;",
          "1644:    else",
          "1645:     lstatus = \"Off\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89676963da43a53c3589edb57e6a8928d145960b",
      "candidate_info": {
        "commit_hash": "89676963da43a53c3589edb57e6a8928d145960b",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/89676963da43a53c3589edb57e6a8928d145960b",
        "files": [
          "hardware/plugins/Plugins.cpp"
        ],
        "message": "Improvement: Add StartupFolder to Parameters handed to plugins",
        "before_after_code_files": [
          "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp": [
          "File: hardware/plugins/Plugins.cpp -> hardware/plugins/Plugins.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define GETSTATE(m) ((struct module_state*)PyModule_GetState(m))",
          "34: extern std::string szWWWFolder;",
          "35: extern std::string szAppVersion;",
          "36: extern std::string szAppHash;",
          "37: extern std::string szAppDate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: extern std::string szStartupFolder;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1128:      std::vector<std::string> sd = *itt;",
          "1129:      const char* pChar = sd[0].c_str();",
          "1130:      ADD_STRING_TO_DICT(pParamsDict, \"HomeFolder\", m_HomeFolder);",
          "1131:      ADD_STRING_TO_DICT(pParamsDict, \"Version\", m_Version);",
          "1132:      ADD_STRING_TO_DICT(pParamsDict, \"Author\", m_Author);",
          "1133:      ADD_STRING_TO_DICT(pParamsDict, \"Name\", sd[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1132:      ADD_STRING_TO_DICT(pParamsDict, \"StartupFolder\", szStartupFolder);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "927e3c43ec2d4d7f1910c9c169b9e4ca512fc61b",
      "candidate_info": {
        "commit_hash": "927e3c43ec2d4d7f1910c9c169b9e4ca512fc61b",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/927e3c43ec2d4d7f1910c9c169b9e4ca512fc61b",
        "files": [
          "push/InfluxPush.cpp"
        ],
        "message": "Influxdb pusher, add timestamp again",
        "before_after_code_files": [
          "push/InfluxPush.cpp||push/InfluxPush.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "push/InfluxPush.cpp||push/InfluxPush.cpp": [
          "File: push/InfluxPush.cpp -> push/InfluxPush.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  sURL << m_InfluxIP << \":\" << m_InfluxPort << \"/write?\";",
          "69:  if ((!m_InfluxUsername.empty()) && (!m_InfluxPassword.empty()))",
          "70:   sURL << \"u=\" << m_InfluxUsername << \"&p=\" << base64_decode(m_InfluxPassword) << \"&\";",
          "72:  m_szURL = sURL.str();",
          "73: }",
          "",
          "[Removed Lines]",
          "71:  sURL << \"db=\" << m_InfluxDatabase;",
          "",
          "[Added Lines]",
          "71:  sURL << \"db=\" << m_InfluxDatabase << \"&precision=s\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:   std::vector<_tPushItem>::iterator itt = _items2do.begin();",
          "196:   while (itt != _items2do.end())",
          "197:   {",
          "198:    std::stringstream sziData;",
          "199:    sziData << itt->skey << \" value=\" << itt->svalue;",
          "200:    if (m_bInfluxDebugActive) {",
          "201:     _log.Log(LOG_NORM, \"InfluxLink: value %s\", sziData.str().c_str());",
          "202:    }",
          "206:    sSendData += sziData.str();",
          "207:    ++itt;",
          "208:   }",
          "",
          "[Removed Lines]",
          "204:    if (!sSendData.empty())",
          "205:     sSendData += \"\\n\";",
          "",
          "[Added Lines]",
          "198:    if (!sSendData.empty())",
          "199:     sSendData += \"\\n\";",
          "206:    sziData << \" \" << itt->stimestamp;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210:   std::string sResult;",
          "211:   if (!HTTPClient::POST(m_szURL, sSendData, ExtraHeaders, sResult, true, true))",
          "212:   {",
          "214:   }",
          "215:  }",
          "216: }",
          "",
          "[Removed Lines]",
          "213:    _log.Log(LOG_ERROR, \"InfluxLink: Error sending data to InfluxDB server! (check address/port/database)\");",
          "",
          "[Added Lines]",
          "214:    _log.Log(LOG_ERROR, \"InfluxLink: Error sending data to InfluxDB server! (check address/port/database/username/password)\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9a6c38c391d1747b091f286a54d1ff5953d9cb2",
      "candidate_info": {
        "commit_hash": "e9a6c38c391d1747b091f286a54d1ff5953d9cb2",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/e9a6c38c391d1747b091f286a54d1ff5953d9cb2",
        "files": [
          "main/mainworker.cpp"
        ],
        "message": "Removed debug line",
        "before_after_code_files": [
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "906:   pHardware = new I2C(ID, I2C::I2CTYPE_BME280, Address, SerialPort, Mode1);",
          "907:   break;",
          "908:  case HTYPE_RaspberryMCP23017:",
          "910:   pHardware = new I2C(ID, I2C::I2CTYPE_MCP23017, Address, SerialPort, Mode1);",
          "911:   break;",
          "912:  case HTYPE_Wunderground:",
          "",
          "[Removed Lines]",
          "909:   _log.Log(LOG_NORM, \"MainWorker::AddHardwareFromParams HTYPE_RaspberryMCP23017\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c9319ace1f0a76b12bf349d62f455a506d286df",
      "candidate_info": {
        "commit_hash": "9c9319ace1f0a76b12bf349d62f455a506d286df",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/9c9319ace1f0a76b12bf349d62f455a506d286df",
        "files": [
          "main/mainworker.cpp"
        ],
        "message": "Correct casting of WEATHER union",
        "before_after_code_files": [
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10863: void MainWorker::decode_Weather(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "10864: {",
          "10866:  char szTmp[100];",
          "10867:  sprintf(szTmp, \"%d\", windID);",
          "10868:  std::string ID = szTmp;",
          "",
          "[Removed Lines]",
          "10865:  unsigned short windID = (pResponse->WIND.id1 * 256) + pResponse->WIND.id2;",
          "",
          "[Added Lines]",
          "10865:  unsigned short windID = (pResponse->WEATHER.id1 * 256) + pResponse->WEATHER.id2;",
          "",
          "---------------"
        ]
      }
    }
  ]
}