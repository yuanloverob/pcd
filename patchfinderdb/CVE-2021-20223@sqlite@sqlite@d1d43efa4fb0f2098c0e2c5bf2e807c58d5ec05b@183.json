{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3b8eb08b17cbf37c1d6da01bd7eaabc243158396",
      "candidate_info": {
        "commit_hash": "3b8eb08b17cbf37c1d6da01bd7eaabc243158396",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3b8eb08b17cbf37c1d6da01bd7eaabc243158396",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Better than removing the incorrect assert() is to change it into a testcase() together with a comment indicating where an appropriate test case can be found, and the ticket that provoked the change. Ticket [614b25314c766238]\n\nFossilOrigin-Name: 3e3c60d8124672ff72a57dfa2e51276316bcac8c8ae8a5739da358f26924b0fb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0e468aa6decc73be307596782a778a739ff1b5dc0eb10fc4bd6776e460f99f8b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2153:         if( pAndExpr ){",
          "2154:           pAndExpr->pLeft = pOrExpr;",
          "2155:           pOrExpr = pAndExpr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2153:         testcase( (pTabItem[0].fg.jointype & JT_LEFT)!=0",
          "2154:                && !ExprHasProperty(pOrExpr, EP_FromJoin)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f603fcefdaa30dd4cd4ce5b9dd83a8abb865acd",
      "candidate_info": {
        "commit_hash": "9f603fcefdaa30dd4cd4ce5b9dd83a8abb865acd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9f603fcefdaa30dd4cd4ce5b9dd83a8abb865acd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/malloc.c"
        ],
        "message": "Use an AtomicLoad() macro in sqlite3HeapNearlyFull().\n\nFossilOrigin-Name: 7556bc632e271d8a1e4fd836ce91e28213768ac09c90857b91171e9cd1009884",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/malloc.c||src/malloc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b73d9a7d6f7fec0ffc9640902a849289c305f8651e891388c01255c4da7a6c4b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181: int sqlite3HeapNearlyFull(void){",
          "183: }",
          "",
          "[Removed Lines]",
          "182:   return mem0.nearlyFull;",
          "",
          "[Added Lines]",
          "182:   return AtomicLoad(&mem0.nearlyFull);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2c6fe225ae5467478658a5dc32fe50b063f7419",
      "candidate_info": {
        "commit_hash": "b2c6fe225ae5467478658a5dc32fe50b063f7419",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b2c6fe225ae5467478658a5dc32fe50b063f7419",
        "files": [
          "ext/expert/sqlite3expert.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update code in sqlite3expert.c to account for the fact that \"-- TRIGGER xyz\" VM comments are now omitted for some builds.\n\nFossilOrigin-Name: 7cf93dc55c48c68731a1fe3ae3517fcfeb5c252bfa87e715a333c6194bcc0ace",
        "before_after_code_files": [
          "ext/expert/sqlite3expert.c||ext/expert/sqlite3expert.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/expert/sqlite3expert.c||ext/expert/sqlite3expert.c": [
          "File: ext/expert/sqlite3expert.c -> ext/expert/sqlite3expert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1130:       const char *zDetail = (const char*)sqlite3_column_text(pExplain, 3);",
          "1132:       int i;",
          "1134:       for(i=0; i<nDetail; i++){",
          "1135:         const char *zIdx = 0;",
          "1136:         if( memcmp(&zDetail[i], \" USING INDEX \", 13)==0 ){",
          "",
          "[Removed Lines]",
          "1131:       int nDetail = STRLEN(zDetail);",
          "",
          "[Added Lines]",
          "1131:       int nDetail;",
          "1134:       if( !zDetail ) continue;",
          "1135:       nDetail = STRLEN(zDetail);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5e1eb0fa3afd74251bc8f484e3edfa81b15610479431af205bd952c91eecd21f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c161e07afd4805202319f02de3ab903f4413c65",
      "candidate_info": {
        "commit_hash": "3c161e07afd4805202319f02de3ab903f4413c65",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3c161e07afd4805202319f02de3ab903f4413c65",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/os_win.c",
          "test/symlink2.test"
        ],
        "message": "Add support for the SQLITE_ACCESS_SYMLINK flag in the Win32 VFS.\n\nFossilOrigin-Name: 175c15008e9f19b8f6762c2fe4a545735128765081980eed01d5e46ca4acb500",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/os_win.c||src/os_win.c",
          "test/symlink2.test||test/symlink2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 251230cf43c591cf49cf9d2f392581c57d334b791bc3407814d216b5999c32f4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1390:       case SQLITE_CANTOPEN_ISDIR:     zName = \"SQLITE_CANTOPEN_ISDIR\";    break;",
          "1391:       case SQLITE_CANTOPEN_FULLPATH:  zName = \"SQLITE_CANTOPEN_FULLPATH\"; break;",
          "1392:       case SQLITE_CANTOPEN_CONVPATH:  zName = \"SQLITE_CANTOPEN_CONVPATH\"; break;",
          "1393:       case SQLITE_PROTOCOL:           zName = \"SQLITE_PROTOCOL\";          break;",
          "1394:       case SQLITE_EMPTY:              zName = \"SQLITE_EMPTY\";             break;",
          "1395:       case SQLITE_SCHEMA:             zName = \"SQLITE_SCHEMA\";            break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1393:       case SQLITE_CANTOPEN_SYMLINK:   zName = \"SQLITE_CANTOPEN_SYMLINK\";  break;",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: #  define NTDDI_WINTHRESHOLD                0x06040000",
          "81: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: #ifndef FILE_ATTRIBUTE_REPARSE_POINT",
          "88: #  define FILE_ATTRIBUTE_REPARSE_POINT      0x00000400",
          "89: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5473:              (attr & FILE_ATTRIBUTE_READONLY)==0;",
          "5474:       break;",
          "5475:     case SQLITE_ACCESS_SYMLINK:",
          "5477:       break;",
          "5478:     default:",
          "5479:       assert(!\"Invalid flags argument\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5484:       rc = attr!=INVALID_FILE_ATTRIBUTES &&",
          "5485:              (attr & FILE_ATTRIBUTE_REPARSE_POINT)!=0;",
          "",
          "---------------"
        ],
        "test/symlink2.test||test/symlink2.test": [
          "File: test/symlink2.test -> test/symlink2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 November 18",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing that SQLite can follow symbolic links.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix symlink2",
          "19: # This only runs on Windows.",
          "20: if {$::tcl_platform(platform)!=\"windows\"} {",
          "21:   finish_test",
          "22:   return",
          "23: }",
          "25: proc createWin32Symlink { link target } {",
          "26:   exec -- $::env(ComSpec) /c mklink \\",
          "27:       [file nativename $link] [file nativename $target]",
          "28:   return \"\"",
          "29: }",
          "31: proc deleteWin32Symlink { link } {",
          "32:   exec -- $::env(ComSpec) /c del [file nativename $link]",
          "33:   return \"\"",
          "34: }",
          "36: proc canCreateWin32Symlink {} {",
          "37:   set link [file join $::testdir lnk[pid].sym]",
          "38:   if {[file exists $link]} { return 0 }",
          "39:   set target [info nameofexecutable]",
          "40:   if {[catch {createWin32Symlink $link $target}] == 0} {",
          "41:     deleteWin32Symlink $link",
          "42:     return 1",
          "43:   }",
          "44:   return 0",
          "45: }",
          "47: # Creating symlinks may require administrator privileges on Windows.",
          "48: if {![canCreateWin32Symlink]} {",
          "49:   finish_test",
          "50:   return",
          "51: }",
          "53: # Ensure that test.db has been created.",
          "54: #",
          "55: do_execsql_test 1.0 {",
          "56:   CREATE TABLE t1(x, y);",
          "57:   INSERT INTO t1 VALUES(1,9999);",
          "58: }",
          "60: do_test 2.0 {",
          "61:   createWin32Symlink link.db test.db",
          "62: } {}",
          "64: do_test 2.1 {",
          "65:   file exists test.db",
          "66: } {1}",
          "68: do_test 2.2 {",
          "69:   file exists link.db",
          "70: } {1}",
          "72: do_test 3.1 {",
          "73:   execsql { SELECT x, y FROM t1; } db",
          "74: } {1 9999}",
          "76: do_test 3.2 {",
          "77:   sqlite3 db2 link.db",
          "78:   execsql { SELECT x, y FROM t1; } db2",
          "79: } {1 9999}",
          "81: do_test 3.3 {",
          "82:   sqlite3 db3 test.db -nofollow true",
          "83:   execsql { SELECT x, y FROM t1; } db3",
          "84: } {1 9999}",
          "86: do_test 3.4 {",
          "87:   db3 close",
          "88: } {}",
          "90: do_test 3.5 {",
          "91:   list [catch {",
          "92:     sqlite3 db4 link.db -nofollow true",
          "93:     execsql { SELECT x, y FROM t1; } db4",
          "94:   } res] $res",
          "95: } {1 {unable to open database file}}",
          "97: catch {db4 close}",
          "99: do_test 4.0 {",
          "100:   db2 close",
          "101:   deleteWin32Symlink link.db",
          "102: } {}",
          "104: do_test 4.1 {",
          "105:   file exists test.db",
          "106: } {1}",
          "108: do_test 4.2 {",
          "109:   file exists link.db",
          "110: } {0}",
          "112: do_test 5.1 {",
          "113:   execsql { SELECT x, y FROM t1; } db",
          "114: } {1 9999}",
          "116: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7b10d74e1d69cefc81d251a76c0d30d2cf889e2",
      "candidate_info": {
        "commit_hash": "d7b10d74e1d69cefc81d251a76c0d30d2cf889e2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d7b10d74e1d69cefc81d251a76c0d30d2cf889e2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeaux.c"
        ],
        "message": "Fix the comment display for the OP_Function opcode.  And at the same time, improve the comment generating logic to make use of the newer sqlite3_str_appendf() interface.\n\nFossilOrigin-Name: 4248980a356f659b10b12c778592996d53c91fae4ea50c8566678da176bdd152",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a812f533693a3605f297199ae0320d663e872208675e86860c5c1803943943aa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1445:   const char *zOpName;",
          "1446:   const char *zSynopsis;",
          "1447:   int nOpName;",
          "1449:   char zAlt[50];",
          "1450:   zOpName = sqlite3OpcodeName(pOp->opcode);",
          "1451:   nOpName = sqlite3Strlen30(zOpName);",
          "1452:   if( zOpName[nOpName+1] ){",
          "",
          "[Removed Lines]",
          "1448:   int ii, jj;",
          "",
          "[Added Lines]",
          "1448:   int ii;",
          "1450:   StrAccum x;",
          "1451:   sqlite3StrAccumInit(&x, 0, zTemp, nTemp, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1461:       }",
          "1462:       zSynopsis = zAlt;",
          "1463:     }",
          "1465:       if( c=='P' ){",
          "1466:         c = zSynopsis[++ii];",
          "1467:         if( c=='4' ){",
          "1469:         }else if( c=='X' ){",
          "1471:           seenCom = 1;",
          "1472:         }else{",
          "1473:           int v1 = translateP(c, pOp);",
          "1474:           int v2;",
          "1476:           if( strncmp(zSynopsis+ii+1, \"@P\", 2)==0 ){",
          "1477:             ii += 3;",
          "1479:             v2 = translateP(zSynopsis[ii], pOp);",
          "1480:             if( strncmp(zSynopsis+ii+1,\"+1\",2)==0 ){",
          "1481:               ii += 2;",
          "1482:               v2++;",
          "1483:             }",
          "1486:             }",
          "1489:           }",
          "1490:         }",
          "1492:       }else{",
          "1494:       }",
          "1495:     }",
          "1499:     }",
          "1501:   }else if( pOp->zComment ){",
          "1507:   }",
          "1509: }",
          "",
          "[Removed Lines]",
          "1464:     for(ii=jj=0; jj<nTemp-1 && (c = zSynopsis[ii])!=0; ii++){",
          "1468:           sqlite3_snprintf(nTemp-jj, zTemp+jj, \"%s\", zP4);",
          "1470:           sqlite3_snprintf(nTemp-jj, zTemp+jj, \"%s\", pOp->zComment);",
          "1475:           sqlite3_snprintf(nTemp-jj, zTemp+jj, \"%d\", v1);",
          "1478:             jj += sqlite3Strlen30(zTemp+jj);",
          "1484:             if( v2>1 ){",
          "1485:               sqlite3_snprintf(nTemp-jj, zTemp+jj, \"..%d\", v1+v2-1);",
          "1487:           }else if( strncmp(zSynopsis+ii+1, \"..P3\", 4)==0 && pOp->p3==0 ){",
          "1488:             ii += 4;",
          "1491:         jj += sqlite3Strlen30(zTemp+jj);",
          "1493:         zTemp[jj++] = c;",
          "1496:     if( !seenCom && jj<nTemp-5 && pOp->zComment ){",
          "1497:       sqlite3_snprintf(nTemp-jj, zTemp+jj, \"; %s\", pOp->zComment);",
          "1498:       jj += sqlite3Strlen30(zTemp+jj);",
          "1500:     if( jj<nTemp ) zTemp[jj] = 0;",
          "1502:     sqlite3_snprintf(nTemp, zTemp, \"%s\", pOp->zComment);",
          "1503:     jj = sqlite3Strlen30(zTemp);",
          "1504:   }else{",
          "1505:     zTemp[0] = 0;",
          "1506:     jj = 0;",
          "1508:   return jj;",
          "",
          "[Added Lines]",
          "1467:     for(ii=0; (c = zSynopsis[ii])!=0; ii++){",
          "1471:           sqlite3_str_appendall(&x, zP4);",
          "1473:           sqlite3_str_appendall(&x, pOp->zComment);",
          "1485:             if( v2<2 ){",
          "1486:               sqlite3_str_appendf(&x, \"%d\", v1);",
          "1487:             }else{",
          "1488:               sqlite3_str_appendf(&x, \"%d..%d\", v1, v1+v2-1);",
          "1489:             }",
          "1490:           }else if( strncmp(zSynopsis+ii+1, \"@NP\", 3)==0 ){",
          "1491:             sqlite3_context *pCtx = pOp->p4.pCtx;",
          "1492:             assert( pOp->p4type==P4_FUNCCTX );",
          "1493:             if( pCtx->argc==1 ){",
          "1494:               sqlite3_str_appendf(&x, \"%d\", v1);",
          "1495:             }else if( pCtx->argc>1 ){",
          "1496:               sqlite3_str_appendf(&x, \"%d..%d\", v1, v1+pCtx->argc-1);",
          "1497:             }else{",
          "1498:               assert( x.nChar>2 );",
          "1499:               x.nChar -= 2;",
          "1500:               ii++;",
          "1501:             }",
          "1502:             ii += 3;",
          "1503:           }else{",
          "1504:             sqlite3_str_appendf(&x, \"%d\", v1);",
          "1505:             if( strncmp(zSynopsis+ii+1, \"..P3\", 4)==0 && pOp->p3==0 ){",
          "1506:               ii += 4;",
          "1511:         sqlite3_str_appendchar(&x, 1, c);",
          "1514:     if( !seenCom && pOp->zComment ){",
          "1515:       sqlite3_str_appendf(&x, \"; %s\", pOp->zComment);",
          "1518:     sqlite3_str_appendall(&x, pOp->zComment);",
          "1520:   sqlite3StrAccumFinish(&x);",
          "1521:   return x.nChar;",
          "",
          "---------------"
        ]
      }
    }
  ]
}