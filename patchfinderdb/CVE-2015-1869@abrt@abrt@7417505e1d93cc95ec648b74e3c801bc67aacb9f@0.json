{
  "cve_id": "CVE-2015-1869",
  "cve_desc": "The default event handling scripts in Automatic Bug Reporting Tool (ABRT) allow local users to gain privileges as demonstrated by a symlink attack on a var_log_messages file.",
  "repo": "abrt/abrt",
  "patch_hash": "7417505e1d93cc95ec648b74e3c801bc67aacb9f",
  "patch_info": {
    "commit_hash": "7417505e1d93cc95ec648b74e3c801bc67aacb9f",
    "repo": "abrt/abrt",
    "commit_url": "https://github.com/abrt/abrt/commit/7417505e1d93cc95ec648b74e3c801bc67aacb9f",
    "files": [
      "src/daemon/abrt-server.c",
      "src/dbus/abrt-dbus.c",
      "src/include/libabrt.h",
      "src/lib/hooklib.c"
    ],
    "message": "daemon, dbus: allow only root to create CCpp, Koops, vmcore and xorg\n\nFlorian Weimer <fweimer@redhat.com>:\n    This prevents users from feeding things that are not actually\n    coredumps and excerpts from /proc to these analyzers.\n\n    For example, it should not be possible to trigger a rule with\n    \u201cEVENT=post-create analyzer=CCpp\u201d using NewProblem\n\nRelated: #1212861\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
    "before_after_code_files": [
      "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
      "src/dbus/abrt-dbus.c||src/dbus/abrt-dbus.c",
      "src/include/libabrt.h||src/include/libabrt.h",
      "src/lib/hooklib.c||src/lib/hooklib.c"
    ]
  },
  "patch_diff": {
    "src/daemon/abrt-server.c||src/daemon/abrt-server.c": [
      "File: src/daemon/abrt-server.c -> src/daemon/abrt-server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:         }",
      "488:     }",
      "491: }",
      "",
      "[Removed Lines]",
      "490:     return TRUE;",
      "",
      "[Added Lines]",
      "490:     return allowed_new_user_problem_entry(client_uid, key, value);",
      "",
      "---------------"
    ],
    "src/dbus/abrt-dbus.c||src/dbus/abrt-dbus.c": [
      "File: src/dbus/abrt-dbus.c -> src/dbus/abrt-dbus.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "169: static char *handle_new_problem(GVariant *problem_info, uid_t caller_uid, char **error)",
      "170: {",
      "171:     problem_data_t *pd = problem_data_new();",
      "173:     GVariantIter *iter;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "171:     char *problem_id = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "175:     gchar *key, *value;",
      "176:     while (g_variant_iter_loop(iter, \"{ss}\", &key, &value))",
      "177:     {",
      "178:         problem_data_add_text_editable(pd, key, value);",
      "179:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "179:         if (allowed_new_user_problem_entry(caller_uid, key, value) == false)",
      "180:         {",
      "182:             goto finito;",
      "183:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "190:     problem_data_add_basics(pd);",
      "193:     if (problem_id)",
      "194:         notify_new_path(problem_id);",
      "195:     else if (error)",
      "198:     problem_data_free(pd);",
      "199:     return problem_id;",
      "200: }",
      "",
      "[Removed Lines]",
      "192:     char *problem_id = problem_data_save(pd);",
      "",
      "[Added Lines]",
      "199:     problem_id = problem_data_save(pd);",
      "205: finito:",
      "",
      "---------------"
    ],
    "src/include/libabrt.h||src/include/libabrt.h": [
      "File: src/include/libabrt.h -> src/include/libabrt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "51: bool dir_is_in_dump_location(const char *dir_name);",
      "52: #define dir_has_correct_permissions abrt_dir_has_correct_permissions",
      "53: bool dir_has_correct_permissions(const char *dir_name);",
      "55: #define g_settings_nMaxCrashReportsSize abrt_g_settings_nMaxCrashReportsSize",
      "56: extern unsigned int  g_settings_nMaxCrashReportsSize;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54: #define allowed_new_user_problem_entry abrt_allowed_new_user_problem_entry",
      "55: bool allowed_new_user_problem_entry(uid_t uid, const char *name, const char *value);",
      "",
      "---------------"
    ],
    "src/lib/hooklib.c||src/lib/hooklib.c": [
      "File: src/lib/hooklib.c -> src/lib/hooklib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "483:     }",
      "484:     return true;",
      "485: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "487: bool allowed_new_user_problem_entry(uid_t uid, const char *name, const char *value)",
      "488: {",
      "490:     if (uid == 0)",
      "491:         return true;",
      "494:     if (strcmp(name, FILENAME_ANALYZER) != 0",
      "495:      && strcmp(name, FILENAME_TYPE) != 0",
      "497:      && strcmp(name, \"basename\") != 0)",
      "498:         return true;",
      "501:      if (strcmp(value, \"CCpp\") != 0",
      "502:       && strcmp(value, \"Kerneloops\") != 0",
      "503:       && strcmp(value, \"vmcore\") != 0",
      "504:       && strcmp(value, \"xorg\") != 0)",
      "505:         return true;",
      "507:     error_msg(\"Only root is permitted to create element '%s' containing '%s'\", name, value);",
      "508:     return false;",
      "509: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3287aa12eb205cff95cdd00d6d6c5c9a4f8f0eca",
      "candidate_info": {
        "commit_hash": "3287aa12eb205cff95cdd00d6d6c5c9a4f8f0eca",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/3287aa12eb205cff95cdd00d6d6c5c9a4f8f0eca",
        "files": [
          "src/daemon/abrt-server.c"
        ],
        "message": "daemon: allow only root user to trigger the post-create\n\nThere is no reason to allow non-root users to trigger this\nfunctionality. Regular users can create abrt problems only through\nabrtd or abrt-dbus and both triggers the post-create.\n\nOther hooks run under root user (CCpp, Koops, VMCore, Xorg).\n\nRelated: #1212861\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/daemon/abrt-server.c||src/daemon/abrt-server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/964"
        ],
        "olp_code_files": {
          "patch": [
            "src/daemon/abrt-server.c||src/daemon/abrt-server.c"
          ],
          "candidate": [
            "src/daemon/abrt-server.c||src/daemon/abrt-server.c"
          ]
        }
      },
      "candidate_diff": {
        "src/daemon/abrt-server.c||src/daemon/abrt-server.c": [
          "File: src/daemon/abrt-server.c -> src/daemon/abrt-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:             return 403;",
          "179:         }",
          "180:     }",
          "192:     int child_stdout_fd;",
          "193:     int child_pid = spawn_event_handler_child(dirname, \"post-create\", &child_stdout_fd);",
          "",
          "[Removed Lines]",
          "181:     else if (!dump_dir_accessible_by_uid(dirname, client_uid))",
          "182:     {",
          "183:         if (errno == ENOTDIR)",
          "184:         {",
          "185:             error_msg(\"Path '%s' isn't problem directory\", dirname);",
          "187:         }",
          "188:         error_msg(\"Problem directory '%s' can't be accessed by user with uid %ld\", dirname, (long)client_uid);",
          "190:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "742:     alarm(0);",
          "744:     if (url_type == CREATION_NOTIFICATION)",
          "745:     {",
          "746:         messagebuf_data[messagebuf_len] = '\\0';",
          "747:         return run_post_create(messagebuf_data);",
          "748:     }",
          "752:     unsigned pid = convert_pid(problem_info);",
          "753:     die_if_data_is_missing(problem_info);",
          "",
          "[Removed Lines]",
          "751:     int ret = 0;",
          "",
          "[Added Lines]",
          "734:     int ret = 0;",
          "737:         if (client_uid != 0)",
          "738:         {",
          "739:             error_msg(\"UID=%ld is not authorized to trigger post-create processing\", (long)client_uid);",
          "741:             goto out;",
          "742:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10bea037a2ad82616b3698d07d07d287481e1bed",
      "candidate_info": {
        "commit_hash": "10bea037a2ad82616b3698d07d07d287481e1bed",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/10bea037a2ad82616b3698d07d07d287481e1bed",
        "files": [
          "src/daemon/abrt-server.c"
        ],
        "message": "daemon: harden against race conditions in DELETE\n\nThere is a race between checking dump dir accessibility and deleting it\nin abrt-server.\n\nRelated: #1214457.\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/daemon/abrt-server.c||src/daemon/abrt-server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/964"
        ],
        "olp_code_files": {
          "patch": [
            "src/daemon/abrt-server.c||src/daemon/abrt-server.c"
          ],
          "candidate": [
            "src/daemon/abrt-server.c||src/daemon/abrt-server.c"
          ]
        }
      },
      "candidate_diff": {
        "src/daemon/abrt-server.c||src/daemon/abrt-server.c": [
          "File: src/daemon/abrt-server.c -> src/daemon/abrt-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:         error_msg(\"Problem directory '%s' isn't owned by root:abrt or others are not restricted from access\", dump_dir_name);",
          "93:     }",
          "95:     {",
          "96:         if (errno == ENOTDIR)",
          "97:         {",
          "98:             error_msg(\"Path '%s' isn't problem directory\", dump_dir_name);",
          "",
          "[Removed Lines]",
          "94:     if (!dump_dir_accessible_by_uid(dump_dir_name, client_uid))",
          "",
          "[Added Lines]",
          "95:     int dir_fd = dd_openfd(dump_dir_name);",
          "96:     if (dir_fd < 0)",
          "97:     {",
          "98:         perror_msg(\"Can't open problem directory '%s'\", dump_dir_name);",
          "99:         return 400;",
          "100:     }",
          "101:     if (!fdump_dir_accessible_by_uid(dir_fd, client_uid))",
          "103:         close(dir_fd);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     }",
          "108: }",
          "",
          "[Removed Lines]",
          "105:     delete_dump_dir(dump_dir_name);",
          "",
          "[Added Lines]",
          "113:     struct dump_dir *dd = dd_fdopendir(dir_fd, dump_dir_name, /*flags:*/ 0);",
          "114:     if (dd)",
          "115:     {",
          "116:         if (dd_delete(dd) != 0)",
          "117:         {",
          "118:             error_msg(\"Failed to delete problem directory '%s'\", dump_dir_name);",
          "119:             dd_close(dd);",
          "120:             return 400;",
          "121:         }",
          "122:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c42bfa1156e00e887de99458f436aaae449ff9a4",
      "candidate_info": {
        "commit_hash": "c42bfa1156e00e887de99458f436aaae449ff9a4",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/c42bfa1156e00e887de99458f436aaae449ff9a4",
        "files": [
          "src/daemon/abrt-server.c",
          "src/include/libabrt.h",
          "src/lib/hooklib.c"
        ],
        "message": "daemon, dbus: allow only root to create CCpp, Koops, vmcore and xorg\n\nFlorian Weimer <fweimer@redhat.com>:\n    This prevents users from feeding things that are not actually\n    coredumps and excerpts from /proc to these analyzers.\n\n    For example, it should not be possible to trigger a rule with\n    \u201cEVENT=post-create analyzer=CCpp\u201d using NewProblem\n\nRelated: #1212861\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
          "src/include/libabrt.h||src/include/libabrt.h",
          "src/lib/hooklib.c||src/lib/hooklib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
            "src/include/libabrt.h||src/include/libabrt.h",
            "src/lib/hooklib.c||src/lib/hooklib.c"
          ],
          "candidate": [
            "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
            "src/include/libabrt.h||src/include/libabrt.h",
            "src/lib/hooklib.c||src/lib/hooklib.c"
          ]
        }
      },
      "candidate_diff": {
        "src/daemon/abrt-server.c||src/daemon/abrt-server.c": [
          "File: src/daemon/abrt-server.c -> src/daemon/abrt-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "449:     return create_debug_dump();",
          "450: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "449:     if (allowed_new_user_problem_entry(client_uid, FILENAME_ANALYZER, analyzer) == false)",
          "",
          "---------------"
        ],
        "src/include/libabrt.h||src/include/libabrt.h": [
          "File: src/include/libabrt.h -> src/include/libabrt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: bool dir_is_in_dump_location(const char *dir_name);",
          "51: #define dir_has_correct_permissions abrt_dir_has_correct_permissions",
          "52: bool dir_has_correct_permissions(const char *dir_name);",
          "54: #define g_settings_nMaxCrashReportsSize abrt_g_settings_nMaxCrashReportsSize",
          "55: extern unsigned int  g_settings_nMaxCrashReportsSize;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: #define allowed_new_user_problem_entry abrt_allowed_new_user_problem_entry",
          "54: bool allowed_new_user_problem_entry(uid_t uid, const char *name, const char *value);",
          "",
          "---------------"
        ],
        "src/lib/hooklib.c||src/lib/hooklib.c": [
          "File: src/lib/hooklib.c -> src/lib/hooklib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:     }",
          "424:     return true;",
          "425: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427: bool allowed_new_user_problem_entry(uid_t uid, const char *name, const char *value)",
          "428: {",
          "430:     if (uid == 0)",
          "431:         return true;",
          "434:     if (strcmp(name, FILENAME_ANALYZER) != 0",
          "435:      && strcmp(name, FILENAME_TYPE) != 0",
          "437:      && strcmp(name, \"basename\") != 0)",
          "438:         return true;",
          "441:      if (strcmp(value, \"CCpp\") != 0",
          "442:       && strcmp(value, \"Kerneloops\") != 0",
          "443:       && strcmp(value, \"vmcore\") != 0",
          "444:       && strcmp(value, \"xorg\") != 0)",
          "445:         return true;",
          "447:     error_msg(\"Only root is permitted to create element '%s' containing '%s'\", name, value);",
          "448:     return false;",
          "449: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04bb89fe665d8e7b41111c8cf937ae97b79df1df",
      "candidate_info": {
        "commit_hash": "04bb89fe665d8e7b41111c8cf937ae97b79df1df",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/04bb89fe665d8e7b41111c8cf937ae97b79df1df",
        "files": [
          "src/daemon/abrt-server.c",
          "src/dbus/abrt-dbus.c",
          "src/include/libabrt.h",
          "src/lib/hooklib.c"
        ],
        "message": "daemon, dbus: allow only root to create CCpp, Koops, vmcore and xorg\n\nFlorian Weimer <fweimer@redhat.com>:\n    This prevents users from feeding things that are not actually\n    coredumps and excerpts from /proc to these analyzers.\n\n    For example, it should not be possible to trigger a rule with\n    \u201cEVENT=post-create analyzer=CCpp\u201d using NewProblem\n\nRelated: #1212861\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
          "src/dbus/abrt-dbus.c||src/dbus/abrt-dbus.c",
          "src/include/libabrt.h||src/include/libabrt.h",
          "src/lib/hooklib.c||src/lib/hooklib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
            "src/dbus/abrt-dbus.c||src/dbus/abrt-dbus.c",
            "src/include/libabrt.h||src/include/libabrt.h",
            "src/lib/hooklib.c||src/lib/hooklib.c"
          ],
          "candidate": [
            "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
            "src/dbus/abrt-dbus.c||src/dbus/abrt-dbus.c",
            "src/include/libabrt.h||src/include/libabrt.h",
            "src/lib/hooklib.c||src/lib/hooklib.c"
          ]
        }
      },
      "candidate_diff": {
        "src/daemon/abrt-server.c||src/daemon/abrt-server.c": [
          "File: src/daemon/abrt-server.c -> src/daemon/abrt-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:         }",
          "487:     }",
          "490: }",
          "",
          "[Removed Lines]",
          "489:     return TRUE;",
          "",
          "[Added Lines]",
          "489:     return allowed_new_user_problem_entry(client_uid, key, value);",
          "",
          "---------------"
        ],
        "src/dbus/abrt-dbus.c||src/dbus/abrt-dbus.c": [
          "File: src/dbus/abrt-dbus.c -> src/dbus/abrt-dbus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176: static char *handle_new_problem(GVariant *problem_info, uid_t caller_uid, char **error)",
          "177: {",
          "178:     problem_data_t *pd = problem_data_new();",
          "180:     GVariantIter *iter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:     char *problem_id = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:     gchar *key, *value;",
          "183:     while (g_variant_iter_loop(iter, \"{ss}\", &key, &value))",
          "184:     {",
          "185:         problem_data_add_text_editable(pd, key, value);",
          "186:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:         if (allowed_new_user_problem_entry(caller_uid, key, value) == false)",
          "187:         {",
          "189:             goto finito;",
          "190:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:     problem_data_add_basics(pd);",
          "200:     if (problem_id)",
          "201:         notify_new_path(problem_id);",
          "202:     else if (error)",
          "205:     problem_data_free(pd);",
          "206:     return problem_id;",
          "207: }",
          "",
          "[Removed Lines]",
          "199:     char *problem_id = problem_data_save(pd);",
          "",
          "[Added Lines]",
          "206:     problem_id = problem_data_save(pd);",
          "212: finito:",
          "",
          "---------------"
        ],
        "src/include/libabrt.h||src/include/libabrt.h": [
          "File: src/include/libabrt.h -> src/include/libabrt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: };",
          "59: #define dir_has_correct_permissions abrt_dir_has_correct_permissions",
          "60: bool dir_has_correct_permissions(const char *dir_name, int flags);",
          "62: #define g_settings_nMaxCrashReportsSize abrt_g_settings_nMaxCrashReportsSize",
          "63: extern unsigned int  g_settings_nMaxCrashReportsSize;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #define allowed_new_user_problem_entry abrt_allowed_new_user_problem_entry",
          "62: bool allowed_new_user_problem_entry(uid_t uid, const char *name, const char *value);",
          "",
          "---------------"
        ],
        "src/lib/hooklib.c||src/lib/hooklib.c": [
          "File: src/lib/hooklib.c -> src/lib/hooklib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "572:     return correct_group;",
          "573: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "575: bool allowed_new_user_problem_entry(uid_t uid, const char *name, const char *value)",
          "576: {",
          "578:     if (uid == 0)",
          "579:         return true;",
          "582:     if (strcmp(name, FILENAME_ANALYZER) != 0",
          "583:      && strcmp(name, FILENAME_TYPE) != 0",
          "585:      && strcmp(name, \"basename\") != 0)",
          "586:         return true;",
          "589:      if (strcmp(value, \"CCpp\") != 0",
          "590:       && strcmp(value, \"Kerneloops\") != 0",
          "591:       && strcmp(value, \"vmcore\") != 0",
          "592:       && strcmp(value, \"xorg\") != 0)",
          "593:         return true;",
          "595:     error_msg(\"Only root is permitted to create element '%s' containing '%s'\", name, value);",
          "596:     return false;",
          "597: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}