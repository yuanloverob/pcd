{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1baae57a729dee59b541f34ae48f3f48fb1958b9",
      "candidate_info": {
        "commit_hash": "1baae57a729dee59b541f34ae48f3f48fb1958b9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1baae57a729dee59b541f34ae48f3f48fb1958b9",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/csv01.test"
        ],
        "message": "Fix the csv01.test module so that it works on systems with \\r\\n line endings.\n\nFossilOrigin-Name: 36eaf5a5e51b20699328aae67c2bfd325f81bea342e2b167fddd859a50a26e28",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/csv01.test||test/csv01.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: df939c89fa90b7f9ccf961027ca4eca4f987c49eabf530b5719a83e5ab0d346d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/csv01.test||test/csv01.test": [
          "File: test/csv01.test -> test/csv01.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "218: # Bug report on the mailing list",
          "219: #",
          "220: forcedelete csv01.csv",
          "222: puts $fd \"a,b,c,d\\r\\n1,2,3,4\\r\\none,two,three,four\\r\\n5,6,7,8\"",
          "223: close $fd",
          "224: do_execsql_test 5.1 {",
          "",
          "[Removed Lines]",
          "221: set fd [open csv01.csv w]",
          "",
          "[Added Lines]",
          "221: set fd [open csv01.csv wb]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d57936721b6598d62baaa359c8d179b74ab3bfcb",
      "candidate_info": {
        "commit_hash": "d57936721b6598d62baaa359c8d179b74ab3bfcb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d57936721b6598d62baaa359c8d179b74ab3bfcb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join.test"
        ],
        "message": "The IS NOT NULL operator does not imply that the operand is never NULL. Fix for ticket [5948e09b8c415bc45da5cf]\n\nFossilOrigin-Name: d840e9bb023a1e84a7739d764a0f6cf608fc3183ff8c366fcdb486ebd932f0c1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/join.test||test/join.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/join.test||test/join.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 93386a7c97f27df69f79052ef4d80143bb6832a806885249c315d226b2a256b2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4986:     case TK_ISNOT:",
          "4987:     case TK_NOT:",
          "4988:     case TK_ISNULL:",
          "4989:     case TK_IS:",
          "4990:     case TK_OR:",
          "4991:     case TK_CASE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4989:     case TK_NOTNULL:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4994:       testcase( pExpr->op==TK_ISNOT );",
          "4995:       testcase( pExpr->op==TK_NOT );",
          "4996:       testcase( pExpr->op==TK_ISNULL );",
          "4997:       testcase( pExpr->op==TK_IS );",
          "4998:       testcase( pExpr->op==TK_OR );",
          "4999:       testcase( pExpr->op==TK_CASE );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4998:       testcase( pExpr->op==TK_NOTNULL );",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "850:    ORDER BY a1, a2, a3, a4, a5;",
          "851: } {1 {} {} {} {} 1 11 {} {} {} 1 12 {} {} {} 1 12 121 {} {} 1 13 {} {} {}}",
          "853: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853: # 2019-02-05 Ticket https://www.sqlite.org/src/tktview/5948e09b8c415bc45da5c",
          "854: # Error in join due to the LEFT JOIN strength reduction optimization.",
          "855: #",
          "856: do_execsql_test join-16.100 {",
          "857:   DROP TABLE IF EXISTS t1;",
          "858:   DROP TABLE IF EXISTS t2;",
          "859:   CREATE TABLE t1(a INT);",
          "860:   INSERT INTO t1(a) VALUES(1);",
          "861:   CREATE TABLE t2(b INT);",
          "862:   SELECT a, b",
          "863:     FROM t1 LEFT JOIN t2 ON 0",
          "864:    WHERE (b IS NOT NULL)=0;",
          "865: } {1 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b747068bad531f0300891e6f569f67d55abb93b",
      "candidate_info": {
        "commit_hash": "9b747068bad531f0300891e6f569f67d55abb93b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9b747068bad531f0300891e6f569f67d55abb93b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "src/pragma.h",
          "src/sqliteInt.h",
          "src/tokenize.c",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Improvements to \"PRAGMA parser_trace=ON\": Make it a flag pragma, and then use the flag to show the complete SQL text at the beginning of the parse.\n\nFossilOrigin-Name: 507c43537f00d089efb3c3020fb6e826e8f89f3efa2caaa12c5309d35dd0c22e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tokenize.c||src/tokenize.c",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 916c52dad414b224695d455a42af36f85dff216504c2aa67d1d2c5818cdca8d6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1424: #ifndef NDEBUG",
          "1425:   case PragTyp_PARSER_TRACE: {",
          "1426:     if( zRight ){",
          "1427:       if( sqlite3GetBoolean(zRight, 0) ){",
          "1428:         sqlite3ParserTrace(stdout, \"parser: \");",
          "1429:       }else{",
          "1430:         sqlite3ParserTrace(0, 0);",
          "1431:       }",
          "1432:     }",
          "1433:   }",
          "1434:   break;",
          "1435: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #define PragTyp_HEXKEY                        41",
          "50: #define PragTyp_KEY                           42",
          "51: #define PragTyp_LOCK_STATUS                   43",
          "",
          "[Removed Lines]",
          "52: #define PragTyp_PARSER_TRACE                  44",
          "53: #define PragTyp_STATS                         45",
          "",
          "[Added Lines]",
          "52: #define PragTyp_STATS                         44",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "475: #endif",
          "477:  {/* zName:     */ \"parser_trace\",",
          "482: #endif",
          "483: #if defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "484:  {/* zName:     */ \"pragma_list\",",
          "",
          "[Removed Lines]",
          "476: #if defined(SQLITE_DEBUG) && !defined(SQLITE_OMIT_PARSER_TRACE)",
          "",
          "[Added Lines]",
          "475: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "476: #if defined(SQLITE_DEBUG)",
          "482: #endif",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "572:   pParse->rc = SQLITE_OK;",
          "573:   pParse->zTail = zSql;",
          "574:   assert( pzErrMsg!=0 );",
          "576: #ifdef sqlite3Parser_ENGINEALWAYSONSTACK",
          "577:   pEngine = &sEngine;",
          "578:   sqlite3ParserInit(pEngine, pParse);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "575: #ifdef SQLITE_DEBUG",
          "576:   if( db->flags & SQLITE_ParserTrace ){",
          "577:     printf(\"parser: [[[%s]]]\\n\", zSql);",
          "578:     sqlite3ParserTrace(stdout, \"parser: \");",
          "579:   }else{",
          "580:     sqlite3ParserTrace(0, 0);",
          "581:   }",
          "582: #endif",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:   IF:   !defined(SQLITE_OMIT_FOREIGN_KEY) && !defined(SQLITE_OMIT_TRIGGER)",
          "304:   NAME: parser_trace",
          "307:   NAME: case_sensitive_like",
          "308:   FLAG: NoColumns",
          "",
          "[Removed Lines]",
          "305:   IF:   defined(SQLITE_DEBUG) && !defined(SQLITE_OMIT_PARSER_TRACE)",
          "",
          "[Added Lines]",
          "305:   TYPE: FLAG",
          "306:   ARG:  SQLITE_ParserTrace",
          "307:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "308:   IF:   defined(SQLITE_DEBUG)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fab5b07395796f7761dbf3ba8604325889af9522",
      "candidate_info": {
        "commit_hash": "fab5b07395796f7761dbf3ba8604325889af9522",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fab5b07395796f7761dbf3ba8604325889af9522",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/windowB.test"
        ],
        "message": "Fix the windows inverse function on the JSON aggregates.\n\nFossilOrigin-Name: f464d847af490dd3ec45565dcc4c2e6ff4ed1ebb65036f30ca0b3ce2e73080e6",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1820:     if( pStr->zBuf==0 ){",
          "1821:       jsonInit(pStr, ctx);",
          "1822:       jsonAppendChar(pStr, '[');",
          "1824:       jsonAppendChar(pStr, ',');",
          "1825:       pStr->pCtx = ctx;",
          "1826:     }",
          "",
          "[Removed Lines]",
          "1823:     }else{",
          "",
          "[Added Lines]",
          "1823:     }else if( pStr->nUsed>1 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1870: ){",
          "1871:   int i;",
          "1872:   int inStr = 0;",
          "1873:   char *z;",
          "1874:   JsonString *pStr;",
          "1875:   UNUSED_PARAM(argc);",
          "1876:   UNUSED_PARAM(argv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1873:   int nNest = 0;",
          "1875:   char c;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1881:   if( NEVER(!pStr) ) return;",
          "1882: #endif",
          "1883:   z = pStr->zBuf;",
          "1887:       inStr = !inStr;",
          "1889:       i++;",
          "1890:     }",
          "1891:   }",
          "1892:   pStr->nUsed -= i;",
          "",
          "[Removed Lines]",
          "1884:   for(i=1; z[i]!=',' || inStr; i++){",
          "1885:     assert( i<pStr->nUsed );",
          "1886:     if( z[i]=='\"' ){",
          "1888:     }else if( z[i]=='\\\\' ){",
          "",
          "[Added Lines]",
          "1886:   for(i=1; (c = z[i])!=',' || inStr || nNest; i++){",
          "1887:     if( i>=pStr->nUsed ){",
          "1888:       pStr->nUsed = 1;",
          "1889:       return;",
          "1890:     }",
          "1891:     if( c=='\"' ){",
          "1893:     }else if( c=='\\\\' ){",
          "1895:     }else if( !inStr ){",
          "1896:       if( c=='{' || c=='[' ) nNest++;",
          "1897:       if( c=='}' || c==']' ) nNest--;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1916:     if( pStr->zBuf==0 ){",
          "1917:       jsonInit(pStr, ctx);",
          "1918:       jsonAppendChar(pStr, '{');",
          "1920:       jsonAppendChar(pStr, ',');",
          "1921:       pStr->pCtx = ctx;",
          "1922:     }",
          "",
          "[Removed Lines]",
          "1919:     }else{",
          "",
          "[Added Lines]",
          "1927:     }else if( pStr->nUsed>1 ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a1978814da41608a16f6953bd575c97d587a34bd80b7ac0e619d62bfdc903d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: ifcapable json1 {",
          "84:   reset_db",
          "85:   do_execsql_test 3.0 {",
          "91:   }",
          "93:   do_execsql_test 3.1 {",
          "",
          "[Removed Lines]",
          "86:     CREATE TABLE testjson(id INTEGER PRIMARY KEY, j TEXT);",
          "87:     INSERT INTO testjson VALUES(1, '{\"a\":1}');",
          "88:     INSERT INTO testjson VALUES(2, '{\"b\":2}');",
          "89:     INSERT INTO testjson VALUES(3, '{\"c\":3}');",
          "90:     INSERT INTO testjson VALUES(4, '{\"d\":4}');",
          "",
          "[Added Lines]",
          "86:     CREATE TABLE testjson(id INTEGER PRIMARY KEY, j TEXT, x TEXT);",
          "87:     INSERT INTO testjson VALUES(1, '{\"a\":1}', 'a');",
          "88:     INSERT INTO testjson VALUES(2, '{\"b\":2}', 'b');",
          "89:     INSERT INTO testjson VALUES(3, '{\"c\":3}', 'c');",
          "90:     INSERT INTO testjson VALUES(4, '{\"d\":4}', 'd');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:   do_execsql_test 3.3 {",
          "109:     SELECT json_group_array(json(j)) OVER (",
          "111:     ) FROM testjson;",
          "112:   } {",
          "113:     {[{\"a\":1}]}",
          "",
          "[Removed Lines]",
          "110:       ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE TIES",
          "",
          "[Added Lines]",
          "110:       ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW",
          "111:       EXCLUDE TIES",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:     {[{\"b\":2},{\"c\":3}]}",
          "139:   }",
          "144:     SELECT json_group_array(json(j)) OVER (",
          "145:       ORDER BY id ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING",
          "146:     ) FROM testjson;",
          "147:   } {",
          "148:     {[]}",
          "152:   }",
          "156:       ORDER BY id ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING",
          "157:     ) FROM testjson;",
          "161:     SELECT json_group_array(json(j)) FILTER (WHERE id!=2) OVER (",
          "162:       ORDER BY id ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING",
          "164:   } {",
          "165:     {[]}",
          "169:   }",
          "171:   }",
          "172: }",
          "",
          "[Removed Lines]",
          "141:   if 0 {",
          "143:   do_execsql_test 3.5 {",
          "149:     {[{\"a\":1}]}",
          "150:     {[{\"a\":1},{\"b\":2}]}",
          "151:     {[{\"b\":2},{\"c\":3}]}",
          "154:   explain_i {",
          "155:     SELECT json_group_array(json(j)) FILTER (WHERE id!=2) OVER (",
          "158:   }",
          "159:   do_execsql_test 3.7 {",
          "160:   PRAGMA vdbe_trace = 1;",
          "163:     ) FROM testjson;",
          "166:     {[{\"a\":1}]}",
          "167:     {[{\"a\":1}]}",
          "168:     {[{\"c\":3}]}",
          "",
          "[Added Lines]",
          "142:   do_execsql_test 3.5a {",
          "143:     UPDATE testjson SET j = replace(j,char(125),',\"e\":9'||char(125));",
          "144:     SELECT j FROM testjson;",
          "145:   } {",
          "146:     {{\"a\":1,\"e\":9}}",
          "147:     {{\"b\":2,\"e\":9}}",
          "148:     {{\"c\":3,\"e\":9}}",
          "149:     {{\"d\":4,\"e\":9}}",
          "150:   }",
          "151:   do_execsql_test 3.5b {",
          "152:     SELECT group_concat(x,'') OVER (",
          "153:       ORDER BY id ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING",
          "154:     ) FROM testjson ORDER BY id;",
          "155:   } {bc cd d {}}",
          "156:   do_execsql_test 3.5c {",
          "161:     {[{\"b\":2,\"e\":9},{\"c\":3,\"e\":9}]}",
          "162:     {[{\"c\":3,\"e\":9},{\"d\":4,\"e\":9}]}",
          "163:     {[{\"d\":4,\"e\":9}]}",
          "165:   }",
          "166:   do_execsql_test 3.5d {",
          "167:     SELECT json_group_object(x,json(j)) OVER (",
          "168:       ORDER BY id ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING",
          "169:     ) FROM testjson;",
          "170:   } {",
          "171:     {{\"b\":{\"b\":2,\"e\":9},\"c\":{\"c\":3,\"e\":9}}}",
          "172:     {{\"c\":{\"c\":3,\"e\":9},\"d\":{\"d\":4,\"e\":9}}}",
          "173:     {{\"d\":{\"d\":4,\"e\":9}}}",
          "174:     {{}}",
          "177:   do_execsql_test 3.7b {",
          "178:     SELECT group_concat(x,'') FILTER (WHERE id!=2) OVER (",
          "181:   } {{} a a c}",
          "183:   do_execsql_test 3.7c {",
          "186:     ) FROM testjson",
          "189:     {[{\"a\":1,\"e\":9}]}",
          "190:     {[{\"a\":1,\"e\":9}]}",
          "191:     {[{\"c\":3,\"e\":9}]}",
          "193:   do_execsql_test 3.7d {",
          "194:     SELECT json_group_object(x,json(j)) FILTER (WHERE id!=2) OVER (",
          "195:       ORDER BY id ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING",
          "196:     ) FROM testjson",
          "197:   } {",
          "198:     {{}}",
          "199:     {{\"a\":{\"a\":1,\"e\":9}}}",
          "200:     {{\"a\":{\"a\":1,\"e\":9}}}",
          "201:     {{\"c\":{\"c\":3,\"e\":9}}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ad7aa818283c82c550cdf18c7f897341b66f39f",
      "candidate_info": {
        "commit_hash": "0ad7aa818283c82c550cdf18c7f897341b66f39f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0ad7aa818283c82c550cdf18c7f897341b66f39f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/join.test",
          "test/with1.test"
        ],
        "message": "Limit the size of SrcList objects to 200 entries (compile-time configurable using -DSQLITE_MAX_SRCLIST=n).  The maximum number of tables in a join has always been 64, so this is not a real constraint on capability.  Limiting the size of a SrcList prevents DOS attacks (discovered by OSSFuzz) using crazy nexted CTE joins.\n\nFossilOrigin-Name: 7cac614d5df55eb092b863163483b6782b942b21bd15fd787576fef5619fa849",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/join.test||test/join.test",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/join.test||test/join.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/join.test||test/join.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9a425051e7ba59e797636f5cf32b5f6efafdb21c8d5300e099b8008b829c1439",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3823:   return -1;",
          "3824: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3834: #ifndef SQLITE_MAX_SRCLIST",
          "3835: # define SQLITE_MAX_SRCLIST 200",
          "3836: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3861:     SrcList *pNew;",
          "3862:     int nAlloc = pSrc->nSrc*2+nExtra;",
          "3863:     int nGot;",
          "3864:     pNew = sqlite3DbRealloc(db, pSrc,",
          "3865:                sizeof(*pSrc) + (nAlloc-1)*sizeof(pSrc->a[0]) );",
          "3866:     if( pNew==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3877:     if( pSrc->nSrc+nExtra>=SQLITE_MAX_SRCLIST ){",
          "3883:       sqlite3OomFault(db);",
          "3884:       return pSrc;",
          "3885:     }",
          "3886:     if( nAlloc>SQLITE_MAX_SRCLIST ) nAlloc = SQLITE_MAX_SRCLIST;",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "671: jointest join-12.6 66 {1 {at most 64 tables in a join}}",
          "672: jointest join-12.7 127 {1 {at most 64 tables in a join}}",
          "673: jointest join-12.8 128 {1 {at most 64 tables in a join}}",
          "690: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "674: jointest join-12.9 1000 {1 {at most 64 tables in a join}}",
          "676: # If SQLite is built with SQLITE_MEMDEBUG, then the huge number of realloc()",
          "677: # calls made by the following test cases are too time consuming to run.",
          "678: # Without SQLITE_MEMDEBUG, realloc() is fast enough that these are not",
          "679: # a problem.",
          "680: ifcapable pragma&&compileoption_diags {",
          "681:   if {[lsearch [db eval {PRAGMA compile_options}] MEMDEBUG]<0} {",
          "682:     jointest join-12.10 65534 {1 {at most 64 tables in a join}}",
          "683:     jointest join-12.11 65535 {1 {too many references to \"t14\": max 65535}}",
          "684:     jointest join-12.12 65536 {1 {too many references to \"t14\": max 65535}}",
          "685:     jointest join-12.13 65537 {1 {too many references to \"t14\": max 65535}}",
          "686:   }",
          "687: }",
          "",
          "[Added Lines]",
          "675: # As of 2019-01-17, the number of elements in a SrcList is limited",
          "676: # to 200.  The following tests still run, but the answer is now",
          "677: # an SQLITE_NOMEM error.",
          "678: #",
          "679: # jointest join-12.9 1000 {1 {at most 64 tables in a join}}",
          "680: #",
          "681: #  If SQLite is built with SQLITE_MEMDEBUG, then the huge number of realloc()",
          "682: #  calls made by the following test cases are too time consuming to run.",
          "683: #  Without SQLITE_MEMDEBUG, realloc() is fast enough that these are not",
          "684: #  a problem.",
          "685: #",
          "686: # ifcapable pragma&&compileoption_diags {",
          "687: #    if {[lsearch [db eval {PRAGMA compile_options}] MEMDEBUG]<0} {",
          "688: #     jointest join-12.10 65534 {1 {at most 64 tables in a join}}",
          "689: #     jointest join-12.11 65535 {1 {too many references to \"t14\": max 65535}}",
          "690: #     jointest join-12.12 65536 {1 {too many references to \"t14\": max 65535}}",
          "691: #     jointest join-12.13 65537 {1 {too many references to \"t14\": max 65535}}",
          "692: #   }",
          "693: # }",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071:              SELECT * FROM Table0  NATURAL JOIN  Table0));",
          "1072: } {{}}",
          "1074: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1074: # 2019-01-17",
          "1075: # Make sure crazy nexted CTE joins terminate with an error quickly.",
          "1076: #",
          "1077: do_catchsql_test 22.1 {",
          "1078:   WITH RECURSIVE c AS (",
          "1079:      WITH RECURSIVE c AS (",
          "1080:         WITH RECURSIVE c AS (",
          "1081:            WITH RECURSIVE c AS (",
          "1082:                WITH  c AS (VALUES(0))",
          "1083:                SELECT 1 FROM c LEFT JOIN c ON ltrim(1)",
          "1084:            )",
          "1085:            SELECT 1 FROM c,c,c,c,c,c,c,c,c",
          "1086:         )",
          "1087:         SELECT  2 FROM c,c,c,c,c,c,c,c,c",
          "1088:      )",
          "1089:      SELECT 3 FROM c,c,c,c,c,c,c,c,c",
          "1090:   )",
          "1091:   SELECT 4 FROM c,c,c,c,c,c,c,c,c;",
          "1092: } {1 {out of memory}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}