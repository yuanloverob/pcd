{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a556145a2c973303fd70315d9b77f126f43638f0",
      "candidate_info": {
        "commit_hash": "a556145a2c973303fd70315d9b77f126f43638f0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a556145a2c973303fd70315d9b77f126f43638f0",
        "files": [
          "ssl/ssl_sess.c"
        ],
        "message": "prevent undefined behavior when src and dst are equal\n\nCLA: trivial\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2750)\n\n(cherry picked from commit 6aad9393680ccde591905c8d71da92a241756394)",
        "before_after_code_files": [
          "ssl/ssl_sess.c||ssl/ssl_sess.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/ssl_sess.c||ssl/ssl_sess.c": [
          "File: ssl/ssl_sess.c -> ssl/ssl_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "814:       return 0;",
          "815:     }",
          "816:     s->session_id_length = sid_len;",
          "818:     return 1;",
          "819: }",
          "",
          "[Removed Lines]",
          "817:     memcpy(s->session_id, sid, sid_len);",
          "",
          "[Added Lines]",
          "817:     if (sid != s->session_id)",
          "818:         memcpy(s->session_id, sid, sid_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "895:         return 0;",
          "896:     }",
          "897:     s->sid_ctx_length = sid_ctx_len;",
          "900:     return 1;",
          "901: }",
          "",
          "[Removed Lines]",
          "898:     memcpy(s->sid_ctx, sid_ctx, sid_ctx_len);",
          "",
          "[Added Lines]",
          "899:     if (sid_ctx != s->sid_ctx)",
          "900:         memcpy(s->sid_ctx, sid_ctx, sid_ctx_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
      "candidate_info": {
        "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
        "files": [
          "ssl/statem/statem_clnt.c"
        ],
        "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2258:         return 0;",
          "2259:     }",
          "2260:     ckey = ssl_generate_pkey(skey);",
          "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
          "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2261:     if (ckey == NULL) {",
          "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
          "2263:         return 0;",
          "2264:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2296:     }",
          "2298:     ckey = ssl_generate_pkey(skey);",
          "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
          "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2304:     if (ckey == NULL) {",
          "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
          "2306:         goto err;",
          "2307:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c0ead5c68f2707f7158a251520dcd63d768a7f4",
      "candidate_info": {
        "commit_hash": "0c0ead5c68f2707f7158a251520dcd63d768a7f4",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0c0ead5c68f2707f7158a251520dcd63d768a7f4",
        "files": [
          "test/evp_test.c"
        ],
        "message": "Remove BIO_seek/BIO_tell from evp_test.c\n\nBIO_seek and BIO_tell can cause problems with evp_test.c on some platforms.\nAvoid them by using a temporary memory BIO to store key PEM data.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2183)\n(cherry picked from commit 71f60ef3376144885384f2b1b3f00c3d54806f38)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: struct evp_test {",
          "199:     BIO *in;",
          "201:     struct key_list *private;",
          "202:     struct key_list *public;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:     BIO *key;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459:     return 0;",
          "460: }",
          "462: static int process_test(struct evp_test *t, char *buf, int verbose)",
          "463: {",
          "464:     char *keyword = NULL, *value = NULL;",
          "465:     int rv = 0, add_key = 0;",
          "467:     struct key_list **lst = NULL, *key = NULL;",
          "468:     EVP_PKEY *pk = NULL;",
          "469:     const struct evp_test_method *tmeth = NULL;",
          "",
          "[Removed Lines]",
          "466:     long save_pos = 0;",
          "",
          "[Added Lines]",
          "465: static int read_key(struct evp_test *t)",
          "466: {",
          "467:     char tmpbuf[80];",
          "468:     if (t->key == NULL)",
          "469:         t->key = BIO_new(BIO_s_mem());",
          "470:     else if (BIO_reset(t->key) <= 0)",
          "471:         return 0;",
          "472:     if (t->key == NULL) {",
          "473:         fprintf(stderr, \"Error allocating key memory BIO\\n\");",
          "474:         return 0;",
          "475:     }",
          "477:     while (BIO_gets(t->in, tmpbuf, sizeof(tmpbuf))) {",
          "478:         t->line++;",
          "479:         if (BIO_puts(t->key, tmpbuf) <= 0) {",
          "480:             fprintf(stderr, \"Error writing to key memory BIO\\n\");",
          "481:             return 0;",
          "482:         }",
          "483:         if (strncmp(tmpbuf, \"-----END\", 8) == 0)",
          "484:             return 1;",
          "485:     }",
          "486:     fprintf(stderr, \"Can't find key end\\n\");",
          "487:     return 0;",
          "488: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "472:     if (!parse_line(&keyword, &value, buf))",
          "473:         return 1;",
          "474:     if (strcmp(keyword, \"PrivateKey\") == 0) {",
          "477:         if (pk == NULL && !check_unsupported()) {",
          "478:             fprintf(stderr, \"Error reading private key %s\\n\", value);",
          "479:             ERR_print_errors_fp(stderr);",
          "",
          "[Removed Lines]",
          "475:         save_pos = BIO_tell(t->in);",
          "476:         pk = PEM_read_bio_PrivateKey(t->in, NULL, 0, NULL);",
          "",
          "[Added Lines]",
          "502:         if (!read_key(t))",
          "503:             return 0;",
          "504:         pk = PEM_read_bio_PrivateKey(t->key, NULL, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "483:         add_key = 1;",
          "484:     }",
          "485:     if (strcmp(keyword, \"PublicKey\") == 0) {",
          "488:         if (pk == NULL && !check_unsupported()) {",
          "489:             fprintf(stderr, \"Error reading public key %s\\n\", value);",
          "490:             ERR_print_errors_fp(stderr);",
          "",
          "[Removed Lines]",
          "486:         save_pos = BIO_tell(t->in);",
          "487:         pk = PEM_read_bio_PUBKEY(t->in, NULL, 0, NULL);",
          "",
          "[Added Lines]",
          "514:         if (!read_key(t))",
          "515:             return 0;",
          "516:         pk = PEM_read_bio_PUBKEY(t->key, NULL, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "495:     }",
          "497:     if (add_key) {",
          "499:         if (find_key(NULL, value, *lst)) {",
          "500:             fprintf(stderr, \"Duplicate key %s\\n\", value);",
          "501:             return 0;",
          "",
          "[Removed Lines]",
          "498:         char tmpbuf[80];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "507:         key->key = pk;",
          "508:         key->next = *lst;",
          "519:     }",
          "",
          "[Removed Lines]",
          "511:         (void)BIO_seek(t->in, save_pos);",
          "512:         while (BIO_gets(t->in,tmpbuf, sizeof(tmpbuf))) {",
          "513:             t->line++;",
          "514:             if (strncmp(tmpbuf, \"-----END\", 8) == 0)",
          "515:                 return 1;",
          "516:         }",
          "517:         fprintf(stderr, \"Can't find key end\\n\");",
          "518:         return 0;",
          "",
          "[Added Lines]",
          "538:         return 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "639:             t.ntests, t.errors, t.nskip);",
          "640:     free_key_list(t.public);",
          "641:     free_key_list(t.private);",
          "642:     BIO_free(in);",
          "644: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:     BIO_free(t.key);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d8cae7d3028de123a081196897b0ccedf921c6f",
      "candidate_info": {
        "commit_hash": "8d8cae7d3028de123a081196897b0ccedf921c6f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8d8cae7d3028de123a081196897b0ccedf921c6f",
        "files": [
          "crypto/rand/rand_lib.c"
        ],
        "message": "Fix rand_lib.c for no-engine configuration\n\nWhen configured no-engine, we still refered to rand_engine_lock.\nRework the lock init code to avoid that.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3145)\n(cherry picked from commit 2f881d2d9065342454fe352eac9e835cefa0ba90)",
        "before_after_code_files": [
          "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c": [
          "File: crypto/rand/rand_lib.c -> crypto/rand/rand_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: DEFINE_RUN_ONCE_STATIC(do_rand_lock_init)",
          "33: {",
          "34: #ifndef OPENSSL_NO_ENGINE",
          "35:     rand_engine_lock = CRYPTO_THREAD_lock_new();",
          "36: #endif",
          "37:     rand_meth_lock = CRYPTO_THREAD_lock_new();",
          "39: }",
          "41: int RAND_set_rand_method(const RAND_METHOD *meth)",
          "",
          "[Removed Lines]",
          "38:     return rand_engine_lock != NULL && rand_meth_lock != NULL;",
          "",
          "[Added Lines]",
          "34:     int ret = 1;",
          "37:     ret &= rand_engine_lock != NULL;",
          "40:     ret &= rand_meth_lock != NULL;",
          "41:     return ret;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69bb97c6d65250324a65fbb6fcac3fefb59d242a",
      "candidate_info": {
        "commit_hash": "69bb97c6d65250324a65fbb6fcac3fefb59d242a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/69bb97c6d65250324a65fbb6fcac3fefb59d242a",
        "files": [
          "crypto/o_dir.c"
        ],
        "message": "Fix typo, missing ||\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2707)\n(cherry picked from commit 6eb837583758506607f538fe2a3dd87925e4e69d)",
        "before_after_code_files": [
          "crypto/o_dir.c||crypto/o_dir.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/o_dir.c||crypto/o_dir.c": [
          "File: crypto/o_dir.c -> crypto/o_dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define LPDIR_H",
          "26: #if defined OPENSSL_SYS_UNIX || defined DJGPP \\",
          "28: # include \"LPdir_unix.c\"",
          "29: #elif defined OPENSSL_SYS_VMS",
          "30: # include \"LPdir_vms.c\"",
          "",
          "[Removed Lines]",
          "27:     (defined __VMS_VER && __VMS_VER >= 70000000)",
          "",
          "[Added Lines]",
          "27:     || (defined __VMS_VER && __VMS_VER >= 70000000)",
          "",
          "---------------"
        ]
      }
    }
  ]
}