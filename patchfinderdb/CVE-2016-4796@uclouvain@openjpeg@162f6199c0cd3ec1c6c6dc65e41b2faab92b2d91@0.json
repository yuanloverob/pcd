{
  "cve_id": "CVE-2016-4796",
  "cve_desc": "Heap-based buffer overflow in the color_cmyk_to_rgb in common/color.c in OpenJPEG before 2.1.1 allows remote attackers to cause a denial of service (crash) via a crafted .j2k file.",
  "repo": "uclouvain/openjpeg",
  "patch_hash": "162f6199c0cd3ec1c6c6dc65e41b2faab92b2d91",
  "patch_info": {
    "commit_hash": "162f6199c0cd3ec1c6c6dc65e41b2faab92b2d91",
    "repo": "uclouvain/openjpeg",
    "commit_url": "https://github.com/uclouvain/openjpeg/commit/162f6199c0cd3ec1c6c6dc65e41b2faab92b2d91",
    "files": [
      "src/bin/common/color.c",
      "tests/nonregression/test_suite.ctest.in"
    ],
    "message": "Fix Heap Buffer Overflow in function color_cmyk_to_rgb\n\nFix uclouvain/openjpeg#774",
    "before_after_code_files": [
      "src/bin/common/color.c||src/bin/common/color.c",
      "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in"
    ]
  },
  "patch_diff": {
    "src/bin/common/color.c||src/bin/common/color.c": [
      "File: src/bin/common/color.c -> src/bin/common/color.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "855:  w = image->comps[0].w;",
      "856:  h = image->comps[0].h;",
      "860:  max = w * h;",
      "",
      "[Removed Lines]",
      "858:  if(image->numcomps < 4) return;",
      "",
      "[Added Lines]",
      "858:  if (",
      "859:    (image->numcomps < 4)",
      "860:    || (image->comps[0].dx != image->comps[1].dx) || (image->comps[0].dx != image->comps[2].dx) || (image->comps[0].dx != image->comps[3].dx)",
      "861:    || (image->comps[0].dy != image->comps[1].dy) || (image->comps[0].dy != image->comps[2].dy) || (image->comps[0].dy != image->comps[3].dy)",
      "862:    ) {",
      "863:   fprintf(stderr,\"%s:%d:color_cmyk_to_rgb\\n\\tCAN NOT CONVERT\\n\", __FILE__,__LINE__);",
      "864:   return;",
      "865:  }",
      "",
      "---------------"
    ],
    "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in": [
      "File: tests/nonregression/test_suite.ctest.in -> tests/nonregression/test_suite.ctest.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "559: opj_decompress -i @INPUT_NR_PATH@/issue726.j2k -o @TEMP_PATH@/issue726.png",
      "560: # issue 733",
      "561: !opj_decompress -i @INPUT_NR_PATH@/issue733.jp2 -o @TEMP_PATH@/issue733.png",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "562: # issue 774",
      "563: !opj_decompress -i @INPUT_NR_PATH@/issue774.jp2 -o @TEMP_PATH@/issue774.png",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "238f4419abb035200ce1cf56f9da677f5eca8afb",
      "candidate_info": {
        "commit_hash": "238f4419abb035200ce1cf56f9da677f5eca8afb",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/238f4419abb035200ce1cf56f9da677f5eca8afb",
        "files": [
          "src/bin/common/color.c",
          "src/bin/common/color.h",
          "src/bin/jp2/opj_decompress.c",
          "src/lib/openjp2/jp2.c"
        ],
        "message": "Defines three new functions Declares three new functions Calls the three new functions Collects data for CIELab, sets the color_space for EYCC and CMYK",
        "before_after_code_files": [
          "src/bin/common/color.c||src/bin/common/color.c",
          "src/bin/common/color.h||src/bin/common/color.h",
          "src/bin/jp2/opj_decompress.c||src/bin/jp2/opj_decompress.c",
          "src/lib/openjp2/jp2.c||src/lib/openjp2/jp2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/bin/common/color.c||src/bin/common/color.c"
          ],
          "candidate": [
            "src/bin/common/color.c||src/bin/common/color.c"
          ]
        }
      },
      "candidate_diff": {
        "src/bin/common/color.c||src/bin/common/color.c": [
          "File: src/bin/common/color.c -> src/bin/common/color.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:    {",
          "359:  in_type = TYPE_RGB_8;",
          "360:  out_type = TYPE_RGB_8;",
          "364:  in_type = TYPE_RGB_16;",
          "365:  out_type = TYPE_RGB_16;",
          "367:  out_prof = cmsCreate_sRGBProfile();",
          "368:  image->color_space = OPJ_CLRSPC_SRGB;",
          "369:    }",
          "",
          "[Removed Lines]",
          "357:   if( prec <= 8 )",
          "358: {",
          "361: }",
          "362: else",
          "363: {",
          "366: }",
          "",
          "[Added Lines]",
          "358:  if( prec <= 8 )",
          "359:   {",
          "362:   }",
          "363:  else",
          "364:   {",
          "367:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "389: fprintf(stderr,\"%s:%d: color_apply_icc_profile\\n\\tICC Profile has unknown \"",
          "390: \"output colorspace(%#x)(%c%c%c%c)\\n\\tICC Profile ignored.\\n\",",
          "391: __FILE__,__LINE__,out_space,",
          "394: #endif",
          "395:  return;",
          "396:    }",
          "",
          "[Removed Lines]",
          "392: (out_space>>24) & 0xff,(out_space>>16) & 0xff,",
          "393: (out_space>>8) & 0xff, out_space & 0xff);",
          "",
          "[Added Lines]",
          "393:  (out_space>>24) & 0xff,(out_space>>16) & 0xff,",
          "394:  (out_space>>8) & 0xff, out_space & 0xff);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "398: #ifdef DEBUG_PROFILE",
          "399: fprintf(stderr,\"%s:%d:color_apply_icc_profile\\n\\tchannels(%d) prec(%d) w(%d) h(%d)\"",
          "400: \"\\n\\tprofile: in(%p) out(%p)\\n\",__FILE__,__LINE__,image->numcomps,prec,",
          "403: fprintf(stderr,\"\\trender_intent (%u)\\n\\t\"",
          "404: \"color_space: in(%#x)(%c%c%c%c)   out:(%#x)(%c%c%c%c)\\n\\t\"",
          "405: \"       type: in(%u)              out:(%u)\\n\",",
          "416:  );",
          "417: #else",
          "418:   (void)prec;",
          "",
          "[Removed Lines]",
          "401: max_w,max_h, (void*)in_prof,(void*)out_prof);",
          "406: intent,",
          "407: in_space,",
          "408: (in_space>>24) & 0xff,(in_space>>16) & 0xff,",
          "409: (in_space>>8) & 0xff, in_space & 0xff,",
          "411: out_space,",
          "412: (out_space>>24) & 0xff,(out_space>>16) & 0xff,",
          "413: (out_space>>8) & 0xff, out_space & 0xff,",
          "415: in_type,out_type",
          "",
          "[Added Lines]",
          "402:  max_w,max_h, (void*)in_prof,(void*)out_prof);",
          "407:  intent,",
          "408:  in_space,",
          "409:  (in_space>>24) & 0xff,(in_space>>16) & 0xff,",
          "410:  (in_space>>8) & 0xff, in_space & 0xff,",
          "412:  out_space,",
          "413:  (out_space>>24) & 0xff,(out_space>>16) & 0xff,",
          "414:  (out_space>>8) & 0xff, out_space & 0xff,",
          "416:  in_type,out_type",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "446:    {",
          "449:  unsigned char *inbuf, *outbuf, *in, *out;",
          "450:  max = max_w * max_h;",
          "452:  in = inbuf = (unsigned char*)malloc(nr_samples);",
          "453:  out = outbuf = (unsigned char*)malloc(nr_samples);",
          "",
          "[Removed Lines]",
          "447:   if( prec <= 8 )",
          "448: {",
          "451:   nr_samples = (cmsUInt32Number)max * 3 * (cmsUInt32Number)sizeof(unsigned char);",
          "",
          "[Added Lines]",
          "448:  if( prec <= 8 )",
          "449:   {",
          "452:  nr_samples = (cmsUInt32Number)max * 3 * (cmsUInt32Number)sizeof(unsigned char);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "457:  b = image->comps[2].data;",
          "459:  for(i = 0; i < max; ++i)",
          "466:  cmsDoTransform(transform, inbuf, outbuf, (cmsUInt32Number)max);",
          "",
          "[Removed Lines]",
          "460:   {",
          "464:   }",
          "",
          "[Added Lines]",
          "461:  {",
          "465:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "470:  b = image->comps[2].data;",
          "472:  for(i = 0; i < max; ++i)",
          "478:  free(inbuf); free(outbuf);",
          "482:  unsigned short *inbuf, *outbuf, *in, *out;",
          "483:  max = max_w * max_h;",
          "485:  in = inbuf = (unsigned short*)malloc(nr_samples);",
          "486:  out = outbuf = (unsigned short*)malloc(nr_samples);",
          "",
          "[Removed Lines]",
          "473:   {",
          "477:   }",
          "479: }",
          "480: else",
          "481: {",
          "484:   nr_samples = (cmsUInt32Number)max * 3 * (cmsUInt32Number)sizeof(unsigned short);",
          "",
          "[Added Lines]",
          "474:  {",
          "478:  }",
          "480:   }",
          "481:  else",
          "482:   {",
          "485:  nr_samples = (cmsUInt32Number)max * 3 * (cmsUInt32Number)sizeof(unsigned short);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "490:  b = image->comps[2].data;",
          "492:  for(i = 0; i < max; ++i)",
          "499:  cmsDoTransform(transform, inbuf, outbuf, (cmsUInt32Number)max);",
          "",
          "[Removed Lines]",
          "493:   {",
          "497:   }",
          "",
          "[Added Lines]",
          "494:  {",
          "498:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "503:  b = image->comps[2].data;",
          "505:  for(i = 0; i < max; ++i)",
          "511:  free(inbuf); free(outbuf);",
          "513:    }",
          "515:    {",
          "516:  unsigned char *in, *inbuf, *out, *outbuf;",
          "519:  in = inbuf = (unsigned char*)malloc(nr_samples);",
          "520:  out = outbuf = (unsigned char*)malloc(nr_samples);",
          "",
          "[Removed Lines]",
          "506:   {",
          "510:   }",
          "512: }",
          "517:   max = max_w * max_h;",
          "518:   nr_samples = (cmsUInt32Number)max * 3 * sizeof(unsigned char);",
          "",
          "[Added Lines]",
          "507:  {",
          "511:  }",
          "513:   }",
          "518:  max = max_w * max_h;",
          "519:  nr_samples = (cmsUInt32Number)max * 3 * sizeof(unsigned char);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "561: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "565: void color_apply_conversion(opj_image_t *image)",
          "566: {",
          "567:  int *row;",
          "568:  int enumcs, numcomps;",
          "570:  image->color_space = OPJ_CLRSPC_SRGB;",
          "572:  numcomps = image->numcomps;",
          "574:  if(numcomps != 3)",
          "575:    {",
          "576:  fprintf(stderr,\"%s:%d:\\n\\tnumcomps %d not handled. Quitting.\\n\",",
          "577:   __FILE__,__LINE__,numcomps);",
          "578:  return;",
          "579:    }",
          "581:  row = (int*)image->icc_profile_buf;",
          "582:  enumcs = row[0];",
          "584:  if(enumcs == 14)// CIELab",
          "585:    {",
          "586:  int *L, *a, *b, *red, *green, *blue;",
          "587:  int *src0, *src1, *src2, *dst0, *dst1, *dst2;",
          "588:  double rl, ol, ra, oa, rb, ob, prec0, prec1, prec2;",
          "589:  double minL, maxL, mina, maxa, minb, maxb;",
          "590:  unsigned int default_type;",
          "591:  unsigned int i, max;",
          "592:  cmsHPROFILE in, out;",
          "593:  cmsHTRANSFORM transform;",
          "594:  cmsUInt16Number RGB[3];",
          "595:  cmsCIELab Lab;",
          "597:  in = cmsCreateLab4Profile(NULL);",
          "598:  out = cmsCreate_sRGBProfile();",
          "600:  transform =",
          "601:   cmsCreateTransform(in, TYPE_Lab_DBL, out, TYPE_RGB_16,",
          "602:    INTENT_PERCEPTUAL, 0);",
          "604: #ifdef HAVE_LIBLCMS2",
          "605:  cmsCloseProfile(in);",
          "606:  cmsCloseProfile(out);",
          "607: #endif",
          "608:  if(transform == NULL)",
          "609:   {",
          "610: #ifdef HAVE_LIBLCMS1",
          "611:  cmsCloseProfile(in);",
          "612:  cmsCloseProfile(out);",
          "613: #endif",
          "614:  return;",
          "615:   }",
          "616:  prec0 = (double)image->comps[0].prec;",
          "617:  prec1 = (double)image->comps[1].prec;",
          "618:  prec2 = (double)image->comps[2].prec;",
          "620:  default_type = row[1];",
          "622:  if(default_type == 0x44454600)// DEF : default",
          "623:   {",
          "624:  rl = 100; ra = 170; rb = 200;",
          "625:  ol = 0;",
          "626:  oa = pow(2, prec1 - 1);",
          "627:  ob = pow(2, prec2 - 2) +  pow(2, prec2 - 3);",
          "628:   }",
          "629:  else",
          "630:   {",
          "631:  rl = row[2]; ra = row[4]; rb = row[6];",
          "632:  ol = row[3]; oa = row[5]; ob = row[7];",
          "633:   }",
          "634:  L = src0 = image->comps[0].data;",
          "635:  a = src1 = image->comps[1].data;",
          "636:  b = src2 = image->comps[2].data;",
          "638:  max = image->comps[0].w * image->comps[0].h;",
          "640:  red = dst0 = (int*)malloc(max * sizeof(int));",
          "641:  green = dst1 = (int*)malloc(max * sizeof(int));",
          "642:  blue = dst2 = (int*)malloc(max * sizeof(int));",
          "644:  minL = -(rl * ol)/(pow(2, prec0)-1);",
          "645:  maxL = minL + rl;",
          "647:  mina = -(ra * oa)/(pow(2, prec1)-1);",
          "648:  maxa = mina + ra;",
          "650:  minb = -(rb * ob)/(pow(2, prec2)-1);",
          "651:  maxb = minb + rb;",
          "653:  for(i = 0; i < max; ++i)",
          "654:   {",
          "655:  Lab.L = minL + (double)(*L) * (maxL - minL)/(pow(2, prec0)-1); ++L;",
          "656:  Lab.a = mina + (double)(*a) * (maxa - mina)/(pow(2, prec1)-1); ++a;",
          "657:  Lab.b = minb + (double)(*b) * (maxb - minb)/(pow(2, prec2)-1); ++b;",
          "659:  cmsDoTransform(transform, &Lab, RGB, 1);",
          "664:   }",
          "665:  cmsDeleteTransform(transform);",
          "666: #ifdef HAVE_LIBLCMS1",
          "667:  cmsCloseProfile(in);",
          "668:  cmsCloseProfile(out);",
          "669: #endif",
          "670:  free(src0); image->comps[0].data = dst0;",
          "671:  free(src1); image->comps[1].data = dst1;",
          "672:  free(src2); image->comps[2].data = dst2;",
          "674:  image->color_space = OPJ_CLRSPC_SRGB;",
          "675:  image->comps[0].prec = 16;",
          "676:  image->comps[1].prec = 16;",
          "677:  image->comps[2].prec = 16;",
          "679:  return;",
          "680:    }",
          "682:  fprintf(stderr,\"%s:%d:\\n\\tenumCS %d not handled. Ignoring.\\n\",",
          "683:   __FILE__,__LINE__, enumcs);",
          "685: }// color_apply_conversion()",
          "687: #endif // HAVE_LIBLCMS2 || HAVE_LIBLCMS1",
          "689: void color_cmyk_to_rgb(opj_image_t *image)",
          "690: {",
          "691:  int *R, *G, *B, *dst0, *dst1, *dst2;",
          "692:  int *sc, *sm, *sy, *sk, *src0, *src1, *src2, *src3;",
          "693:  float C, M, Y, K;",
          "694:  unsigned int w, h, max, prec, len, i;",
          "696:  w = image->comps[0].w;",
          "697:  h = image->comps[0].h;",
          "698:  prec = image->comps[0].prec;",
          "700:  if(prec != 8) return;",
          "701:  if(image->numcomps != 4) return;",
          "703:  max = w * h;",
          "704:  len = max * sizeof(int);",
          "706:  R = dst0 = (int*)malloc(len);",
          "707:  G = dst1 = (int*)malloc(len);",
          "708:  B = dst2 = (int*)malloc(len);",
          "710:  sc = src0 = image->comps[0].data;",
          "711:  sm = src1 = image->comps[1].data;",
          "712:  sy = src2 = image->comps[2].data;",
          "713:  sk = src3 = image->comps[3].data;",
          "715:  for(i = 0; i < max; ++i)",
          "716:    {",
          "719:  C = (float)(*sc++)/(float)255.;",
          "720:  M = (float)(*sm++)/(float)255;",
          "721:  Y = (float)(*sy++)/(float)255;",
          "722:  K = (float)(*sk++)/(float)255;",
          "726:  C = ( C * ( (float)1. - K ) + K );",
          "727:  M = ( M * ( (float)1. - K ) + K );",
          "728:  Y = ( Y * ( (float)1. - K ) + K );",
          "735:    }",
          "737:  free(src0); image->comps[0].data = dst0;",
          "738:  free(src1); image->comps[1].data = dst1;",
          "739:  free(src2); image->comps[2].data = dst2;",
          "740:  free(src3); image->comps[3].data = NULL;",
          "742:  image->numcomps = 3;",
          "743:  image->color_space = OPJ_CLRSPC_SRGB;",
          "745: }// color_cmyk_to_rgb()",
          "750: void color_esycc_to_rgb(opj_image_t *image)",
          "751: {",
          "752:     int *s0, *s1, *s2, *src0, *src1, *src2;",
          "753:     int *r, *g, *b, *dst0, *dst1, *dst2;",
          "754:     int y, cb, cr, sign1, sign2, val;",
          "755:     unsigned int w, h, max, i;",
          "756:     int flip_value = (1 << (image->comps[0].prec-1));",
          "757:  int max_value = (~(-1 << image->comps[0].prec));",
          "759:     if(image->numcomps != 3) return;",
          "761:     w = image->comps[0].w;",
          "762:     h = image->comps[0].h;",
          "764:     s0 = src0 = image->comps[0].data;",
          "765:     s1 = src1 = image->comps[1].data;",
          "766:     s2 = src2 = image->comps[2].data;",
          "768:     sign1 = image->comps[1].sgnd;",
          "769:     sign2 = image->comps[2].sgnd;",
          "771:     max = w * h;",
          "773:  r = dst0 = (int*)malloc(max * sizeof(int));",
          "774:     g = dst1 = (int*)malloc(max * sizeof(int));",
          "775:     b = dst2 = (int*)malloc(max * sizeof(int));",
          "777:     for(i = 0; i < max; ++i)",
          "778:    {",
          "780:     y = *s0++; cb = *s1++; cr = *s2++;",
          "782:     if( !sign1) cb -= flip_value;",
          "783:     if( !sign2) cr -= flip_value;",
          "785:     val = (int)",
          "786:  ((float)y - (float)0.0000368 * (float)cb",
          "787:   + (float)1.40199 * (float)cr + (float)0.5);",
          "789:  if(val > max_value) val = max_value; else if(val < 0) val = 0;",
          "792:     val = (int)",
          "793:  ((float)1.0003 * (float)y - (float)0.344125 * (float)cb",
          "794:   - (float)0.7141128 * (float)cr + (float)0.5);",
          "796:  if(val > max_value) val = max_value; else if(val < 0) val = 0;",
          "799:     val = (int)",
          "800:  ((float)0.999823 * (float)y + (float)1.77204 * (float)cb",
          "801:   - (float)0.000008 *(float)cr + (float)0.5);",
          "803:  if(val > max_value) val = max_value; else if(val < 0) val = 0;",
          "805:    }",
          "807:  free(src0); image->comps[0].data = dst0;",
          "808:  free(src1); image->comps[1].data = dst1;",
          "809:  free(src2); image->comps[2].data = dst2;",
          "811:  image->numcomps = 3;",
          "812:  image->color_space = OPJ_CLRSPC_SRGB;",
          "814: }// color_esycc_to_rgb()",
          "",
          "---------------"
        ],
        "src/bin/common/color.h||src/bin/common/color.h": [
          "File: src/bin/common/color.h -> src/bin/common/color.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: extern void color_sycc_to_rgb(opj_image_t *img);",
          "42: extern void color_apply_icc_profile(opj_image_t *image);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: extern void color_apply_conversion(opj_image_t *image);",
          "45: extern void color_cmyk_to_rgb(opj_image_t *image);",
          "46: extern void color_esycc_to_rgb(opj_image_t *image);",
          "",
          "---------------"
        ],
        "src/bin/jp2/opj_decompress.c||src/bin/jp2/opj_decompress.c": [
          "File: src/bin/jp2/opj_decompress.c -> src/bin/jp2/opj_decompress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1350:   opj_stream_destroy(l_stream);",
          "1356:   if( image->color_space != OPJ_CLRSPC_SYCC",
          "1357:    && image->numcomps == 3 && image->comps[0].dx == image->comps[0].dy",
          "1358:    && image->comps[1].dx != 1 )",
          "",
          "[Removed Lines]",
          "1352:   if(image->color_space == OPJ_CLRSPC_SYCC){",
          "1354:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1360:   else if (image->numcomps <= 2)",
          "1361:    image->color_space = OPJ_CLRSPC_GRAY;",
          "1363:   if(image->icc_profile_buf) {",
          "1364: #if defined(OPJ_HAVE_LIBLCMS1) || defined(OPJ_HAVE_LIBLCMS2)",
          "1366: #endif",
          "1367:    free(image->icc_profile_buf);",
          "1368:    image->icc_profile_buf = NULL; image->icc_profile_len = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1359:   if(image->color_space == OPJ_CLRSPC_SYCC){",
          "1360:    color_sycc_to_rgb(image);",
          "1361:   }",
          "1362:   else",
          "1363:   if(image->color_space == OPJ_CLRSPC_CMYK){",
          "1364:    color_cmyk_to_rgb(image);",
          "1365:   }",
          "1366:   else",
          "1367:   if(image->color_space == OPJ_CLRSPC_EYCC){",
          "1368:    color_esycc_to_rgb(image);",
          "1369:   }",
          "1373:    if(image->icc_profile_len)",
          "1374:     color_apply_icc_profile(image);",
          "1375:    else",
          "1376:     color_apply_conversion(image);",
          "",
          "---------------"
        ],
        "src/lib/openjp2/jp2.c||src/lib/openjp2/jp2.c": [
          "File: src/lib/openjp2/jp2.c -> src/lib/openjp2/jp2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "849:     opj_event_msg(p_manager, EVT_ERROR, \"Invalid component index %d (>= %d).\\n\", info[i].cn, nr_channels);",
          "850:     return OPJ_FALSE;",
          "851:    }",
          "852:    if (info[i].asoc > 0 && (OPJ_UINT32)(info[i].asoc - 1) >= nr_channels) {",
          "853:     opj_event_msg(p_manager, EVT_ERROR, \"Invalid component index %d (>= %d).\\n\", info[i].asoc - 1, nr_channels);",
          "854:     return OPJ_FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "852:    if (info[i].asoc > 65534) continue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "967:  old_comps = image->comps;",
          "968:  new_comps = (opj_image_comp_t*)",
          "970:  if (!new_comps) {",
          "",
          "[Removed Lines]",
          "969:    opj_malloc(nr_channels * sizeof(opj_image_comp_t));",
          "",
          "[Added Lines]",
          "971:    opj_calloc(nr_channels, sizeof(opj_image_comp_t));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1312:   return OPJ_FALSE;",
          "1313:  }",
          "1316:     if (!cdef_info)",
          "1317:         return OPJ_FALSE;",
          "1320:     if(!jp2->color.jp2_cdef)",
          "1321:     {",
          "1322:         opj_free(cdef_info);",
          "",
          "[Removed Lines]",
          "1315:  cdef_info = (opj_jp2_cdef_info_t*) opj_malloc(l_value * sizeof(opj_jp2_cdef_info_t));",
          "1319:  jp2->color.jp2_cdef = (opj_jp2_cdef_t*)opj_malloc(sizeof(opj_jp2_cdef_t));",
          "",
          "[Added Lines]",
          "1317:  cdef_info = (opj_jp2_cdef_info_t*) opj_calloc(1, l_value * sizeof(opj_jp2_cdef_info_t));",
          "1321:  jp2->color.jp2_cdef = (opj_jp2_cdef_t*)opj_calloc(1, sizeof(opj_jp2_cdef_t));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1389:   }",
          "1393:         jp2->color.jp2_has_colr = 1;",
          "1394:  }",
          "1395:  else if (jp2->meth == 2) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1395:         p_colr_header_data += 4;",
          "1398:        {",
          "1399:         OPJ_UINT32 *cielab;",
          "1400:         OPJ_UINT32 rl, ol, ra, oa, rb, ob, il;",
          "1402:         cielab = (OPJ_UINT32*)opj_malloc(9 * sizeof(OPJ_UINT32));",
          "1406:      {",
          "1407:         rl = ra = rb = ol = oa = ob = 0;",
          "1410:      }",
          "1411:         else",
          "1412:        if(p_colr_header_size == 35)",
          "1413:      {",
          "1414:         opj_read_bytes(p_colr_header_data, &rl, 4);",
          "1415:        p_colr_header_data += 4;",
          "1416:         opj_read_bytes(p_colr_header_data, &ol, 4);",
          "1417:        p_colr_header_data += 4;",
          "1418:         opj_read_bytes(p_colr_header_data, &ra, 4);",
          "1419:        p_colr_header_data += 4;",
          "1420:         opj_read_bytes(p_colr_header_data, &oa, 4);",
          "1421:        p_colr_header_data += 4;",
          "1422:         opj_read_bytes(p_colr_header_data, &rb, 4);",
          "1423:        p_colr_header_data += 4;",
          "1424:         opj_read_bytes(p_colr_header_data, &ob, 4);",
          "1425:        p_colr_header_data += 4;",
          "1426:        opj_read_bytes(p_colr_header_data, &il, 4);",
          "1427:        p_colr_header_data += 4;",
          "1429:         cielab[1] = 0;",
          "1430:      }",
          "1431:         cielab[2] = rl; cielab[4] = ra; cielab[6] = rb;",
          "1432:         cielab[3] = ol; cielab[5] = oa; cielab[7] = ob;",
          "1433:         cielab[8] = il;",
          "1435:         jp2->color.icc_profile_buf = (unsigned char*)cielab;",
          "1436:         jp2->color.icc_profile_len = 0;",
          "1437:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1452:       p_image->color_space = OPJ_CLRSPC_SYCC;",
          "1453:             else if (jp2->enumcs == 24)",
          "1454:                     p_image->color_space = OPJ_CLRSPC_EYCC;",
          "1455:      else",
          "1456:       p_image->color_space = OPJ_CLRSPC_UNKNOWN;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1501:   else",
          "1502:   if (jp2->enumcs == 12)",
          "1503:    p_image->color_space = OPJ_CLRSPC_CMYK;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1840:   opj_event_msg(p_manager, EVT_WARNING, \"Multiple alpha channels specified. No cdef box will be created.\\n\");",
          "1841:  }",
          "1844:   if(!jp2->color.jp2_cdef) {",
          "1845:    opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory to setup the JP2 encoder\\n\");",
          "1846:    return OPJ_FALSE;",
          "1847:   }",
          "1851:   if (!jp2->color.jp2_cdef->info) {",
          "1853:    opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory to setup the JP2 encoder\\n\");",
          "",
          "[Removed Lines]",
          "1843:   jp2->color.jp2_cdef = (opj_jp2_cdef_t*)opj_malloc(sizeof(opj_jp2_cdef_t));",
          "1850:   jp2->color.jp2_cdef->info = (opj_jp2_cdef_info_t*) opj_malloc(image->numcomps * sizeof(opj_jp2_cdef_info_t));",
          "",
          "[Added Lines]",
          "1892:   jp2->color.jp2_cdef = (opj_jp2_cdef_t*)opj_calloc(1, sizeof(opj_jp2_cdef_t));",
          "1899:   jp2->color.jp2_cdef->info = (opj_jp2_cdef_info_t*) opj_calloc(1, image->numcomps * sizeof(opj_jp2_cdef_info_t));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2767:   p_image->color_space = OPJ_CLRSPC_GRAY;",
          "2768:  else if (p_jp2->enumcs == 18)",
          "2769:   p_image->color_space = OPJ_CLRSPC_SYCC;",
          "2770:  else",
          "2771:   p_image->color_space = OPJ_CLRSPC_UNKNOWN;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2820:  if (p_jp2->enumcs == 24)",
          "2821:   p_image->color_space = OPJ_CLRSPC_EYCC;",
          "2822:  else",
          "2823:  if (p_jp2->enumcs == 12)",
          "2824:   p_image->color_space = OPJ_CLRSPC_CMYK;",
          "2825:  else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4ac2f613ddc7b28f60df16aa5072647408891ce",
      "candidate_info": {
        "commit_hash": "d4ac2f613ddc7b28f60df16aa5072647408891ce",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/d4ac2f613ddc7b28f60df16aa5072647408891ce",
        "files": [
          "src/bin/common/color.c"
        ],
        "message": "Fix formatting",
        "before_after_code_files": [
          "src/bin/common/color.c||src/bin/common/color.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/bin/common/color.c||src/bin/common/color.c"
          ],
          "candidate": [
            "src/bin/common/color.c||src/bin/common/color.c"
          ]
        }
      },
      "candidate_diff": {
        "src/bin/common/color.c||src/bin/common/color.c": [
          "File: src/bin/common/color.c -> src/bin/common/color.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566: {",
          "567:  int *row;",
          "568:  int enumcs, numcomps;",
          "570:  image->color_space = OPJ_CLRSPC_SRGB;",
          "572:  numcomps = image->numcomps;",
          "574:  if(numcomps != 3)",
          "581:  row = (int*)image->icc_profile_buf;",
          "582:  enumcs = row[0];",
          "584:  if(enumcs == 14)// CIELab",
          "604: #ifdef HAVE_LIBLCMS2",
          "607: #endif",
          "610: #ifdef HAVE_LIBLCMS1",
          "613: #endif",
          "666: #ifdef HAVE_LIBLCMS1",
          "669: #endif",
          "685: }// color_apply_conversion()",
          "687: #endif // HAVE_LIBLCMS2 || HAVE_LIBLCMS1",
          "689: void color_cmyk_to_rgb(opj_image_t *image)",
          "690: {",
          "693:  float C, M, Y, K;",
          "696:  w = image->comps[0].w;",
          "697:  h = image->comps[0].h;",
          "703:  max = w * h;",
          "715:  for(i = 0; i < max; ++i)",
          "743:  image->color_space = OPJ_CLRSPC_SRGB;",
          "745: }// color_cmyk_to_rgb()",
          "",
          "[Removed Lines]",
          "575:    {",
          "576:  fprintf(stderr,\"%s:%d:\\n\\tnumcomps %d not handled. Quitting.\\n\",",
          "577:   __FILE__,__LINE__,numcomps);",
          "578:  return;",
          "579:    }",
          "585:    {",
          "586:  int *L, *a, *b, *red, *green, *blue;",
          "587:  int *src0, *src1, *src2, *dst0, *dst1, *dst2;",
          "588:  double rl, ol, ra, oa, rb, ob, prec0, prec1, prec2;",
          "589:  double minL, maxL, mina, maxa, minb, maxb;",
          "590:  unsigned int default_type;",
          "591:  unsigned int i, max;",
          "592:  cmsHPROFILE in, out;",
          "593:  cmsHTRANSFORM transform;",
          "594:  cmsUInt16Number RGB[3];",
          "595:  cmsCIELab Lab;",
          "597:  in = cmsCreateLab4Profile(NULL);",
          "598:  out = cmsCreate_sRGBProfile();",
          "600:  transform =",
          "601:   cmsCreateTransform(in, TYPE_Lab_DBL, out, TYPE_RGB_16,",
          "602:    INTENT_PERCEPTUAL, 0);",
          "605:  cmsCloseProfile(in);",
          "606:  cmsCloseProfile(out);",
          "608:  if(transform == NULL)",
          "609:   {",
          "611:  cmsCloseProfile(in);",
          "612:  cmsCloseProfile(out);",
          "614:  return;",
          "615:   }",
          "616:  prec0 = (double)image->comps[0].prec;",
          "617:  prec1 = (double)image->comps[1].prec;",
          "618:  prec2 = (double)image->comps[2].prec;",
          "620:  default_type = row[1];",
          "622:  if(default_type == 0x44454600)// DEF : default",
          "623:   {",
          "624:  rl = 100; ra = 170; rb = 200;",
          "625:  ol = 0;",
          "626:  oa = pow(2, prec1 - 1);",
          "627:  ob = pow(2, prec2 - 2) +  pow(2, prec2 - 3);",
          "628:   }",
          "629:  else",
          "630:   {",
          "631:  rl = row[2]; ra = row[4]; rb = row[6];",
          "632:  ol = row[3]; oa = row[5]; ob = row[7];",
          "633:   }",
          "634:  L = src0 = image->comps[0].data;",
          "635:  a = src1 = image->comps[1].data;",
          "636:  b = src2 = image->comps[2].data;",
          "638:  max = image->comps[0].w * image->comps[0].h;",
          "640:  red = dst0 = (int*)malloc(max * sizeof(int));",
          "641:  green = dst1 = (int*)malloc(max * sizeof(int));",
          "642:  blue = dst2 = (int*)malloc(max * sizeof(int));",
          "644:  minL = -(rl * ol)/(pow(2, prec0)-1);",
          "645:  maxL = minL + rl;",
          "647:  mina = -(ra * oa)/(pow(2, prec1)-1);",
          "648:  maxa = mina + ra;",
          "650:  minb = -(rb * ob)/(pow(2, prec2)-1);",
          "651:  maxb = minb + rb;",
          "653:  for(i = 0; i < max; ++i)",
          "654:   {",
          "655:  Lab.L = minL + (double)(*L) * (maxL - minL)/(pow(2, prec0)-1); ++L;",
          "656:  Lab.a = mina + (double)(*a) * (maxa - mina)/(pow(2, prec1)-1); ++a;",
          "657:  Lab.b = minb + (double)(*b) * (maxb - minb)/(pow(2, prec2)-1); ++b;",
          "659:  cmsDoTransform(transform, &Lab, RGB, 1);",
          "664:   }",
          "665:  cmsDeleteTransform(transform);",
          "667:  cmsCloseProfile(in);",
          "668:  cmsCloseProfile(out);",
          "670:  free(src0); image->comps[0].data = dst0;",
          "671:  free(src1); image->comps[1].data = dst1;",
          "672:  free(src2); image->comps[2].data = dst2;",
          "674:  image->color_space = OPJ_CLRSPC_SRGB;",
          "675:  image->comps[0].prec = 16;",
          "676:  image->comps[1].prec = 16;",
          "677:  image->comps[2].prec = 16;",
          "679:  return;",
          "680:    }",
          "682:  fprintf(stderr,\"%s:%d:\\n\\tenumCS %d not handled. Ignoring.\\n\",",
          "683:   __FILE__,__LINE__, enumcs);",
          "691:  int *R, *G, *B, *dst0, *dst1, *dst2;",
          "692:  int *sc, *sm, *sy, *sk, *src0, *src1, *src2, *src3;",
          "694:  unsigned int w, h, max, prec, len, i;",
          "698:  prec = image->comps[0].prec;",
          "700:  if(prec != 8) return;",
          "701:  if(image->numcomps != 4) return;",
          "704:  len = max * sizeof(int);",
          "706:  R = dst0 = (int*)malloc(len);",
          "707:  G = dst1 = (int*)malloc(len);",
          "708:  B = dst2 = (int*)malloc(len);",
          "710:  sc = src0 = image->comps[0].data;",
          "711:  sm = src1 = image->comps[1].data;",
          "712:  sy = src2 = image->comps[2].data;",
          "713:  sk = src3 = image->comps[3].data;",
          "716:    {",
          "719:  C = (float)(*sc++)/(float)255.;",
          "720:  M = (float)(*sm++)/(float)255;",
          "721:  Y = (float)(*sy++)/(float)255;",
          "722:  K = (float)(*sk++)/(float)255;",
          "726:  C = ( C * ( (float)1. - K ) + K );",
          "727:  M = ( M * ( (float)1. - K ) + K );",
          "728:  Y = ( Y * ( (float)1. - K ) + K );",
          "735:    }",
          "737:  free(src0); image->comps[0].data = dst0;",
          "738:  free(src1); image->comps[1].data = dst1;",
          "739:  free(src2); image->comps[2].data = dst2;",
          "740:  free(src3); image->comps[3].data = NULL;",
          "742:  image->numcomps = 3;",
          "",
          "[Added Lines]",
          "575:  {",
          "576:   fprintf(stderr,\"%s:%d:\\n\\tnumcomps %d not handled. Quitting.\\n\",",
          "577:       __FILE__,__LINE__,numcomps);",
          "578:   return;",
          "579:  }",
          "585:  {",
          "586:   int *L, *a, *b, *red, *green, *blue;",
          "587:   int *src0, *src1, *src2, *dst0, *dst1, *dst2;",
          "588:   double rl, ol, ra, oa, rb, ob, prec0, prec1, prec2;",
          "589:   double minL, maxL, mina, maxa, minb, maxb;",
          "590:   unsigned int default_type;",
          "591:   unsigned int i, max;",
          "592:   cmsHPROFILE in, out;",
          "593:   cmsHTRANSFORM transform;",
          "594:   cmsUInt16Number RGB[3];",
          "595:   cmsCIELab Lab;",
          "597:   in = cmsCreateLab4Profile(NULL);",
          "598:   out = cmsCreate_sRGBProfile();",
          "600:   transform = cmsCreateTransform(in, TYPE_Lab_DBL, out, TYPE_RGB_16, INTENT_PERCEPTUAL, 0);",
          "603:   cmsCloseProfile(in);",
          "604:   cmsCloseProfile(out);",
          "606:   if(transform == NULL)",
          "607:   {",
          "609:    cmsCloseProfile(in);",
          "610:    cmsCloseProfile(out);",
          "612:    return;",
          "613:   }",
          "614:   prec0 = (double)image->comps[0].prec;",
          "615:   prec1 = (double)image->comps[1].prec;",
          "616:   prec2 = (double)image->comps[2].prec;",
          "618:   default_type = row[1];",
          "620:   if(default_type == 0x44454600)// DEF : default",
          "621:   {",
          "622:    rl = 100; ra = 170; rb = 200;",
          "623:    ol = 0;",
          "624:    oa = pow(2, prec1 - 1);",
          "625:    ob = pow(2, prec2 - 2) +  pow(2, prec2 - 3);",
          "626:   }",
          "627:   else",
          "628:   {",
          "629:    rl = row[2]; ra = row[4]; rb = row[6];",
          "630:    ol = row[3]; oa = row[5]; ob = row[7];",
          "631:   }",
          "633:   L = src0 = image->comps[0].data;",
          "634:   a = src1 = image->comps[1].data;",
          "635:   b = src2 = image->comps[2].data;",
          "637:   max = image->comps[0].w * image->comps[0].h;",
          "639:   red = dst0 = (int*)malloc(max * sizeof(int));",
          "640:   green = dst1 = (int*)malloc(max * sizeof(int));",
          "641:   blue = dst2 = (int*)malloc(max * sizeof(int));",
          "643:   minL = -(rl * ol)/(pow(2, prec0)-1);",
          "644:   maxL = minL + rl;",
          "646:   mina = -(ra * oa)/(pow(2, prec1)-1);",
          "647:   maxa = mina + ra;",
          "649:   minb = -(rb * ob)/(pow(2, prec2)-1);",
          "650:   maxb = minb + rb;",
          "652:   for(i = 0; i < max; ++i)",
          "653:   {",
          "654:    Lab.L = minL + (double)(*L) * (maxL - minL)/(pow(2, prec0)-1); ++L;",
          "655:    Lab.a = mina + (double)(*a) * (maxa - mina)/(pow(2, prec1)-1); ++a;",
          "656:    Lab.b = minb + (double)(*b) * (maxb - minb)/(pow(2, prec2)-1); ++b;",
          "658:    cmsDoTransform(transform, &Lab, RGB, 1);",
          "663:   }",
          "664:   cmsDeleteTransform(transform);",
          "666:   cmsCloseProfile(in);",
          "667:   cmsCloseProfile(out);",
          "669:   free(src0); image->comps[0].data = dst0;",
          "670:   free(src1); image->comps[1].data = dst1;",
          "671:   free(src2); image->comps[2].data = dst2;",
          "673:   image->color_space = OPJ_CLRSPC_SRGB;",
          "674:   image->comps[0].prec = 16;",
          "675:   image->comps[1].prec = 16;",
          "676:   image->comps[2].prec = 16;",
          "678:   return;",
          "679:  }",
          "681:  fprintf(stderr,\"%s:%d:\\n\\tenumCS %d not handled. Ignoring.\\n\", __FILE__,__LINE__, enumcs);",
          "689:  float sC, sM, sY, sK;",
          "690:  unsigned int w, h, max, i;",
          "695:  if(image->numcomps < 4) return;",
          "699:  sC = 1.0F / (float)((1 << image->comps[0].prec) - 1);",
          "700:  sM = 1.0F / (float)((1 << image->comps[1].prec) - 1);",
          "701:  sY = 1.0F / (float)((1 << image->comps[2].prec) - 1);",
          "702:  sK = 1.0F / (float)((1 << image->comps[3].prec) - 1);",
          "705:  {",
          "707:   C = (float)(image->comps[0].data[i]) * sC;",
          "708:   M = (float)(image->comps[1].data[i]) * sM;",
          "709:   Y = (float)(image->comps[2].data[i]) * sY;",
          "710:   K = (float)(image->comps[3].data[i]) * sK;",
          "713:   C = 1.0F - C;",
          "714:   M = 1.0F - M;",
          "715:   Y = 1.0F - Y;",
          "716:   K = 1.0F - K;",
          "722:  }",
          "724:  free(image->comps[3].data); image->comps[3].data = NULL;",
          "725:  image->comps[0].prec = 8;",
          "726:  image->comps[1].prec = 8;",
          "727:  image->comps[2].prec = 8;",
          "728:  image->numcomps -= 1;",
          "731:  for (i = 3; i < image->numcomps; ++i) {",
          "732:   memcpy(&(image->comps[i]), &(image->comps[i+1]), sizeof(image->comps[i]));",
          "733:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "750: void color_esycc_to_rgb(opj_image_t *image)",
          "751: {",
          "757:  int max_value = (~(-1 << image->comps[0].prec));",
          "812:  image->color_space = OPJ_CLRSPC_SRGB;",
          "814: }// color_esycc_to_rgb()",
          "",
          "[Removed Lines]",
          "752:     int *s0, *s1, *s2, *src0, *src1, *src2;",
          "753:     int *r, *g, *b, *dst0, *dst1, *dst2;",
          "754:     int y, cb, cr, sign1, sign2, val;",
          "755:     unsigned int w, h, max, i;",
          "756:     int flip_value = (1 << (image->comps[0].prec-1));",
          "759:     if(image->numcomps != 3) return;",
          "761:     w = image->comps[0].w;",
          "762:     h = image->comps[0].h;",
          "764:     s0 = src0 = image->comps[0].data;",
          "765:     s1 = src1 = image->comps[1].data;",
          "766:     s2 = src2 = image->comps[2].data;",
          "768:     sign1 = image->comps[1].sgnd;",
          "769:     sign2 = image->comps[2].sgnd;",
          "771:     max = w * h;",
          "773:  r = dst0 = (int*)malloc(max * sizeof(int));",
          "774:     g = dst1 = (int*)malloc(max * sizeof(int));",
          "775:     b = dst2 = (int*)malloc(max * sizeof(int));",
          "777:     for(i = 0; i < max; ++i)",
          "778:    {",
          "780:     y = *s0++; cb = *s1++; cr = *s2++;",
          "782:     if( !sign1) cb -= flip_value;",
          "783:     if( !sign2) cr -= flip_value;",
          "785:     val = (int)",
          "786:  ((float)y - (float)0.0000368 * (float)cb",
          "787:   + (float)1.40199 * (float)cr + (float)0.5);",
          "789:  if(val > max_value) val = max_value; else if(val < 0) val = 0;",
          "792:     val = (int)",
          "793:  ((float)1.0003 * (float)y - (float)0.344125 * (float)cb",
          "794:   - (float)0.7141128 * (float)cr + (float)0.5);",
          "796:  if(val > max_value) val = max_value; else if(val < 0) val = 0;",
          "799:     val = (int)",
          "800:  ((float)0.999823 * (float)y + (float)1.77204 * (float)cb",
          "801:   - (float)0.000008 *(float)cr + (float)0.5);",
          "803:  if(val > max_value) val = max_value; else if(val < 0) val = 0;",
          "805:    }",
          "807:  free(src0); image->comps[0].data = dst0;",
          "808:  free(src1); image->comps[1].data = dst1;",
          "809:  free(src2); image->comps[2].data = dst2;",
          "811:  image->numcomps = 3;",
          "",
          "[Added Lines]",
          "742:  int y, cb, cr, sign1, sign2, val;",
          "743:  unsigned int w, h, max, i;",
          "744:  int flip_value = (1 << (image->comps[0].prec-1));",
          "747:  if(image->numcomps < 3) return;",
          "749:  w = image->comps[0].w;",
          "750:  h = image->comps[0].h;",
          "752:  sign1 = image->comps[1].sgnd;",
          "753:  sign2 = image->comps[2].sgnd;",
          "755:  max = w * h;",
          "757:  for(i = 0; i < max; ++i)",
          "758:  {",
          "760:   y = image->comps[0].data[i]; cb = image->comps[1].data[i]; cr = image->comps[2].data[i];",
          "762:   if( !sign1) cb -= flip_value;",
          "763:   if( !sign2) cr -= flip_value;",
          "765:   val = (int)",
          "766:   ((float)y - (float)0.0000368 * (float)cb",
          "767:    + (float)1.40199 * (float)cr + (float)0.5);",
          "769:   if(val > max_value) val = max_value; else if(val < 0) val = 0;",
          "770:   image->comps[0].data[i] = val;",
          "772:   val = (int)",
          "773:   ((float)1.0003 * (float)y - (float)0.344125 * (float)cb",
          "774:    - (float)0.7141128 * (float)cr + (float)0.5);",
          "776:   if(val > max_value) val = max_value; else if(val < 0) val = 0;",
          "777:   image->comps[1].data[i] = val;",
          "779:   val = (int)",
          "780:   ((float)0.999823 * (float)y + (float)1.77204 * (float)cb",
          "781:    - (float)0.000008 *(float)cr + (float)0.5);",
          "783:   if(val > max_value) val = max_value; else if(val < 0) val = 0;",
          "784:   image->comps[2].data[i] = val;",
          "785:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}