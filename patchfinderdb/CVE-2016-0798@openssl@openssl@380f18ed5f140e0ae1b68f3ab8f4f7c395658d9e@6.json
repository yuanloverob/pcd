{
  "cve_id": "CVE-2016-0798",
  "cve_desc": "Memory leak in the SRP_VBASE_get_by_user implementation in OpenSSL 1.0.1 before 1.0.1s and 1.0.2 before 1.0.2g allows remote attackers to cause a denial of service (memory consumption) by providing an invalid username in a connection attempt, related to apps/s_server.c and crypto/srp/srp_vfy.c.",
  "repo": "openssl/openssl",
  "patch_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
  "patch_info": {
    "commit_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "files": [
      "CHANGES",
      "apps/s_server.c",
      "crypto/srp/srp_vfy.c",
      "include/openssl/srp.h",
      "util/libeay.num"
    ],
    "message": "CVE-2016-0798: avoid memory leak in SRP\n\nThe SRP user database lookup method SRP_VBASE_get_by_user had confusing\nmemory management semantics; the returned pointer was sometimes newly\nallocated, and sometimes owned by the callee. The calling code has no\nway of distinguishing these two cases.\n\nSpecifically, SRP servers that configure a secret seed to hide valid\nlogin information are vulnerable to a memory leak: an attacker\nconnecting with an invalid username can cause a memory leak of around\n300 bytes per connection.\n\nServers that do not configure SRP, or configure SRP but do not configure\na seed are not vulnerable.\n\nIn Apache, the seed directive is known as SSLSRPUnknownUserSeed.\n\nTo mitigate the memory leak, the seed handling in SRP_VBASE_get_by_user\nis now disabled even if the user has configured a seed.\n\nApplications are advised to migrate to SRP_VBASE_get1_by_user. However,\nnote that OpenSSL makes no strong guarantees about the\nindistinguishability of valid and invalid logins. In particular,\ncomputations are currently not carried out in constant time.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "apps/s_server.c||apps/s_server.c",
      "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
      "include/openssl/srp.h||include/openssl/srp.h",
      "util/libeay.num||util/libeay.num"
    ]
  },
  "patch_diff": {
    "apps/s_server.c||apps/s_server.c": [
      "File: apps/s_server.c -> apps/s_server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352: static int ssl_srp_server_param_cb(SSL *s, int *ad, void *arg)",
      "353: {",
      "354:     srpsrvparm *p = (srpsrvparm *) arg;",
      "355:     if (p->login == NULL && p->user == NULL) {",
      "356:         p->login = SSL_get_srp_username(s);",
      "357:         BIO_printf(bio_err, \"SRP username = \\\"%s\\\"\\n\", p->login);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355:     int ret = SSL3_AL_FATAL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "361:     if (p->user == NULL) {",
      "362:         BIO_printf(bio_err, \"User %s doesn't exist\\n\", p->login);",
      "364:     }",
      "365:     if (SSL_set_srp_server_param",
      "366:         (s, p->user->N, p->user->g, p->user->s, p->user->v,",
      "367:          p->user->info) < 0) {",
      "370:     }",
      "371:     BIO_printf(bio_err,",
      "372:                \"SRP parameters set: username = \\\"%s\\\" info=\\\"%s\\\" \\n\",",
      "373:                p->login, p->user->info);",
      "375:     p->user = NULL;",
      "376:     p->login = NULL;",
      "378: }",
      "380: #endif",
      "",
      "[Removed Lines]",
      "363:         return SSL3_AL_FATAL;",
      "369:         return SSL3_AL_FATAL;",
      "377:     return SSL_ERROR_NONE;",
      "",
      "[Added Lines]",
      "365:         goto err;",
      "372:         goto err;",
      "377:     ret = SSL_ERROR_NONE;",
      "379: err:",
      "380:     SRP_user_pwd_free(p->user);",
      "383:     return ret;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2325: #ifndef OPENSSL_NO_SRP",
      "2326:                 while (SSL_get_error(con, k) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2327:                     BIO_printf(bio_s_out, \"LOOKUP renego during write\\n\");",
      "2328:                     srp_callback_parm.user =",
      "2331:                     if (srp_callback_parm.user)",
      "2332:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2333:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2329:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2330:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2334:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2336:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2337:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2393: #ifndef OPENSSL_NO_SRP",
      "2394:                 while (SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2395:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2396:                     srp_callback_parm.user =",
      "2399:                     if (srp_callback_parm.user)",
      "2400:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2401:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2397:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2398:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2403:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2405:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2406:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2520:         while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2521:             BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
      "2522:                        srp_callback_parm.login);",
      "2523:             srp_callback_parm.user =",
      "2526:             if (srp_callback_parm.user)",
      "2527:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2528:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2524:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2525:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2531:             SRP_user_pwd_free(srp_callback_parm.user);",
      "2533:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2534:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2732:                 if (BIO_should_io_special(io)",
      "2733:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "2734:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2735:                     srp_callback_parm.user =",
      "2738:                     if (srp_callback_parm.user)",
      "2739:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2740:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2736:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2737:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2744:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2746:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2747:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3093:         if (BIO_should_io_special(io)",
      "3094:             && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3095:             BIO_printf(bio_s_out, \"LOOKUP renego during accept\\n\");",
      "3096:             srp_callback_parm.user =",
      "3099:             if (srp_callback_parm.user)",
      "3100:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3101:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3097:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3098:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3106:             SRP_user_pwd_free(srp_callback_parm.user);",
      "3108:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3109:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3121:                 if (BIO_should_io_special(io)",
      "3122:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3123:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "3124:                     srp_callback_parm.user =",
      "3127:                     if (srp_callback_parm.user)",
      "3128:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3129:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3125:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3126:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3135:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "3137:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3138:                                                srp_callback_parm.login);",
      "",
      "---------------"
    ],
    "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
      "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "184:     return olddst;",
      "185: }",
      "188: {",
      "189:     if (user_pwd == NULL)",
      "190:         return;",
      "",
      "[Removed Lines]",
      "187: static void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "[Added Lines]",
      "187: void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "246:     return (vinfo->s != NULL && vinfo->v != NULL);",
      "247: }",
      "249: SRP_VBASE *SRP_VBASE_new(char *seed_key)",
      "250: {",
      "251:     SRP_VBASE *vb = OPENSSL_malloc(sizeof(*vb));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "249: static SRP_user_pwd *srp_user_pwd_dup(SRP_user_pwd *src)",
      "250: {",
      "251:     SRP_user_pwd *ret;",
      "253:     if (src == NULL)",
      "254:         return NULL;",
      "255:     if ((ret = SRP_user_pwd_new()) == NULL)",
      "256:         return NULL;",
      "258:     SRP_user_pwd_set_gN(ret, src->g, src->N);",
      "259:     if (!SRP_user_pwd_set_ids(ret, src->id, src->info)",
      "260:         || !SRP_user_pwd_set_sv_BN(ret, BN_dup(src->s), BN_dup(src->v))) {",
      "261:             SRP_user_pwd_free(ret);",
      "262:             return NULL;",
      "263:     }",
      "264:     return ret;",
      "265: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "468: }",
      "471: {",
      "472:     int i;",
      "473:     SRP_user_pwd *user;",
      "478:     if (vb == NULL)",
      "479:         return NULL;",
      "480:     for (i = 0; i < sk_SRP_user_pwd_num(vb->users_pwd); i++) {",
      "481:         user = sk_SRP_user_pwd_value(vb->users_pwd, i);",
      "482:         if (strcmp(user->id, username) == 0)",
      "483:             return user;",
      "484:     }",
      "485:     if ((vb->seed_key == NULL) ||",
      "486:         (vb->default_g == NULL) || (vb->default_N == NULL))",
      "487:         return NULL;",
      "",
      "[Removed Lines]",
      "470: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "474:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "475:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "476:     EVP_MD_CTX *ctxt = NULL;",
      "",
      "[Added Lines]",
      "488: static SRP_user_pwd *find_user(SRP_VBASE *vb, char *username)",
      "502:     return NULL;",
      "503: }",
      "511: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "512: {",
      "513:     return find_user(vb, username);",
      "514: }",
      "520: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)",
      "521: {",
      "522:     SRP_user_pwd *user;",
      "523:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "524:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "525:     EVP_MD_CTX *ctxt = NULL;",
      "527:     if (vb == NULL)",
      "528:         return NULL;",
      "530:     if ((user = find_user(vb, username)) != NULL)",
      "531:         return srp_user_pwd_dup(user);",
      "",
      "---------------"
    ],
    "include/openssl/srp.h||include/openssl/srp.h": [
      "File: include/openssl/srp.h -> include/openssl/srp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: DEFINE_STACK_OF(SRP_gN_cache)",
      "87: typedef struct SRP_user_pwd_st {",
      "88:     char *id;",
      "89:     BIGNUM *s;",
      "90:     BIGNUM *v;",
      "91:     const BIGNUM *g;",
      "92:     const BIGNUM *N;",
      "93:     char *info;",
      "94: } SRP_user_pwd;",
      "96: DEFINE_STACK_OF(SRP_user_pwd)",
      "98: typedef struct SRP_VBASE_st {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99: void SRP_user_pwd_free(SRP_user_pwd *user_pwd);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118: SRP_VBASE *SRP_VBASE_new(char *seed_key);",
      "119: void SRP_VBASE_free(SRP_VBASE *vb);",
      "120: int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file);",
      "122: char *SRP_create_verifier(const char *user, const char *pass, char **salt,",
      "123:                           char **verifier, const char *N, const char *g);",
      "124: int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,",
      "",
      "[Removed Lines]",
      "121: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username);",
      "",
      "[Added Lines]",
      "128: DEPRECATEDIN_1_1_0(SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username))",
      "130: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username);",
      "",
      "---------------"
    ],
    "util/libeay.num||util/libeay.num": [
      "File: util/libeay.num -> util/libeay.num",
      "--- Hunk 1 ---",
      "[Context before]",
      "4073: OPENSSL_strncasecmp                     4566 1_1_0 EXIST::FUNCTION:",
      "4074: OPENSSL_gmtime                          4567 1_1_0 EXIST::FUNCTION:",
      "4075: OPENSSL_gmtime_adj                      4568 1_1_0 EXIST::FUNCTION:",
      "4077: SRP_Calc_server_key                     4570 1_1_0 EXIST::FUNCTION:SRP",
      "4078: SRP_create_verifier                     4571 1_1_0 EXIST::FUNCTION:SRP",
      "4079: SRP_create_verifier_BN                  4572 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Removed Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Added Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:DEPRECATEDIN_1_1_0,SRP",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4711: OPENSSL_INIT_new                        5215 1_1_0 EXIST::FUNCTION:",
      "4712: OPENSSL_INIT_free                       5216 1_1_0 EXIST::FUNCTION:",
      "4713: OPENSSL_INIT_set_config_filename        5217 1_1_0 EXIST::FUNCTION:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4714: SRP_user_pwd_free                       5218 1_1_0 EXIST::FUNCTION:SRP",
      "4715: SRP_VBASE_get1_by_user                  5219 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2ab9687479c10c4c4ebfdfcf6d068fe581bd44e4",
      "candidate_info": {
        "commit_hash": "2ab9687479c10c4c4ebfdfcf6d068fe581bd44e4",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2ab9687479c10c4c4ebfdfcf6d068fe581bd44e4",
        "files": [
          "CHANGES",
          "Configure",
          "crypto/engine/eng_all.c",
          "engines/Makefile",
          "engines/e_gmp.c",
          "engines/e_gmp.ec",
          "engines/e_gmp_err.c",
          "engines/e_gmp_err.h",
          "include/openssl/engine.h",
          "util/libeay.num",
          "util/mkdef.pl"
        ],
        "message": "Remove GMP engine.\n\nReviewed-by: Ben Laurie <ben@openssl.org>",
        "before_after_code_files": [
          "crypto/engine/eng_all.c||crypto/engine/eng_all.c",
          "engines/e_gmp.c||engines/e_gmp.c",
          "engines/e_gmp.ec||engines/e_gmp.ec",
          "engines/e_gmp_err.c||engines/e_gmp_err.c",
          "engines/e_gmp_err.h||engines/e_gmp_err.h",
          "include/openssl/engine.h||include/openssl/engine.h",
          "util/libeay.num||util/libeay.num",
          "util/mkdef.pl||util/mkdef.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "crypto/engine/eng_all.c||crypto/engine/eng_all.c": [
          "File: crypto/engine/eng_all.c -> crypto/engine/eng_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: # ifndef OPENSSL_NO_GOST",
          "90:     ENGINE_load_gost();",
          "91: # endif",
          "95: # if defined(OPENSSL_SYS_WIN32) && !defined(OPENSSL_NO_CAPIENG)",
          "96:     ENGINE_load_capi();",
          "97: # endif",
          "",
          "[Removed Lines]",
          "92: # ifndef OPENSSL_NO_GMP",
          "93:     ENGINE_load_gmp();",
          "94: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/e_gmp.c||engines/e_gmp.c": [
          "File: engines/e_gmp.c -> engines/e_gmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/e_gmp.ec||engines/e_gmp.ec": [
          "File: engines/e_gmp.ec -> engines/e_gmp.ec",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/e_gmp_err.c||engines/e_gmp_err.c": [
          "File: engines/e_gmp_err.c -> engines/e_gmp_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/e_gmp_err.h||engines/e_gmp_err.h": [
          "File: engines/e_gmp_err.h -> engines/e_gmp_err.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/openssl/engine.h||include/openssl/engine.h": [
          "File: include/openssl/engine.h -> include/openssl/engine.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "401: void ENGINE_load_ubsec(void);",
          "402: void ENGINE_load_padlock(void);",
          "403: void ENGINE_load_capi(void);",
          "407: #  ifndef OPENSSL_NO_GOST",
          "408: void ENGINE_load_gost(void);",
          "409: #  endif",
          "",
          "[Removed Lines]",
          "404: #  ifndef OPENSSL_NO_GMP",
          "405: void ENGINE_load_gmp(void);",
          "406: #  endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "2928: BN_GF2m_mod_exp_arr                     3361 EXIST::FUNCTION:EC2M",
          "2929: STORE_ATTR_INFO_modify_number           3362 NOEXIST::FUNCTION:",
          "2930: X509_keyid_get0                         3363 EXIST::FUNCTION:",
          "2932: pitem_new                               3365 EXIST::FUNCTION:",
          "2933: BN_GF2m_mod_mul_arr                     3366 EXIST::FUNCTION:EC2M",
          "2934: STORE_list_public_key_endp              3367 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "2931: ENGINE_load_gmp                         3364 EXIST::FUNCTION:ENGINE,GMP,STATIC_ENGINE",
          "",
          "[Added Lines]",
          "2931: ENGINE_load_gmp                         3364 NOEXIST::FUNCTION:",
          "",
          "---------------"
        ],
        "util/mkdef.pl||util/mkdef.pl": [
          "File: util/mkdef.pl -> util/mkdef.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "129: my $no_rsa; my $no_dsa; my $no_dh; my $no_aes; my $no_scrypt;",
          "130: my $no_ec; my $no_engine; my $no_hw;",
          "131: my $no_chacha; my $no_poly1305;",
          "133: my $no_sct; my $no_rfc3779; my $no_psk; my $no_cms; my $no_capieng;",
          "134: my $no_jpake; my $no_srp; my $no_ec2m; my $no_nistp_gcc;",
          "135: my $no_nextprotoneg; my $no_sctp; my $no_srtp; my $no_ssl_trace;",
          "",
          "[Removed Lines]",
          "132: my $no_fp_api; my $no_static_engine=1; my $no_gmp; my $no_deprecated;",
          "",
          "[Added Lines]",
          "132: my $no_fp_api; my $no_static_engine=1; my $no_deprecated;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:  elsif (/^no-dso$/) { $no_dso=1; }",
          "220:  elsif (/^no-engine$/) { $no_engine=1; }",
          "221:  elsif (/^no-hw$/) { $no_hw=1; }",
          "223:  elsif (/^no-sct$/) { $no_sct=1; }",
          "224:  elsif (/^no-rfc3779$/) { $no_rfc3779=1; }",
          "225:  elsif (/^no-cms$/) { $no_cms=1; }",
          "",
          "[Removed Lines]",
          "222:  elsif (/^no-gmp$/) { $no_gmp=1; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1207:    if ($keyword eq \"HW\" && $no_hw) { return 0; }",
          "1208:    if ($keyword eq \"FP_API\" && $no_fp_api) { return 0; }",
          "1209:    if ($keyword eq \"STATIC_ENGINE\" && $no_static_engine) { return 0; }",
          "1211:    if ($keyword eq \"SCT\" && $no_sct) { return 0; }",
          "1212:    if ($keyword eq \"RFC3779\" && $no_rfc3779) { return 0; }",
          "1213:    if ($keyword eq \"PSK\" && $no_psk) { return 0; }",
          "",
          "[Removed Lines]",
          "1210:    if ($keyword eq \"GMP\" && $no_gmp) { return 0; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c4e064e784fc96e937d99dba58df2e761d5ba7c",
      "candidate_info": {
        "commit_hash": "3c4e064e784fc96e937d99dba58df2e761d5ba7c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3c4e064e784fc96e937d99dba58df2e761d5ba7c",
        "files": [
          "apps/Makefile",
          "crypto/asn1/Makefile",
          "crypto/cmac/Makefile",
          "crypto/cms/Makefile",
          "crypto/conf/Makefile",
          "crypto/ct/Makefile",
          "crypto/dh/Makefile",
          "crypto/dsa/Makefile",
          "crypto/ec/Makefile",
          "crypto/engine/Makefile",
          "crypto/err/Makefile",
          "crypto/evp/Makefile",
          "crypto/hmac/Makefile",
          "crypto/ocsp/Makefile",
          "crypto/pem/Makefile",
          "crypto/pkcs12/Makefile",
          "crypto/pkcs7/Makefile",
          "crypto/rand/Makefile",
          "crypto/rsa/Makefile",
          "crypto/ts/Makefile",
          "crypto/x509/Makefile",
          "crypto/x509v3/Makefile",
          "engines/Makefile",
          "engines/ccgost/Makefile",
          "ssl/Makefile",
          "test/Makefile",
          "util/libeay.num"
        ],
        "message": "make update\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "2894: ERR_set_mark                            3332 EXIST::FUNCTION:",
          "2895: X509_STORE_CTX_set0_crls                3333 EXIST::FUNCTION:",
          "2896: ENGINE_set_STORE                        3334 EXIST::FUNCTION:ENGINE",
          "2898: STORE_meth_set_list_start_fn            3336 NOEXIST::FUNCTION:",
          "2899: STORE_method_set_list_start_function    3336 NOEXIST::FUNCTION:",
          "2900: BN_BLINDING_invert_ex                   3337 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "2897: ENGINE_register_ECDSA                   3335 EXIST::FUNCTION:ENGINE",
          "",
          "[Added Lines]",
          "2897: ENGINE_register_ECDSA                   3335 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2913: GENERAL_SUBTREE_free                    3349 EXIST::FUNCTION:",
          "2914: NAME_CONSTRAINTS_it                     3350 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "2915: NAME_CONSTRAINTS_it                     3350 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "2917: PKCS12_add_safe                         3352 EXIST::FUNCTION:",
          "2918: EC_KEY_new_by_curve_name                3353 EXIST::FUNCTION:EC",
          "2919: STORE_meth_get_update_store_fn          3354 NOEXIST::FUNCTION:",
          "2920: STORE_method_get_update_store_function  3354 NOEXIST::FUNCTION:",
          "2922: SHA512_Update                           3356 EXIST:!VMSVAX:FUNCTION:",
          "2923: i2d_ECPrivateKey                        3357 EXIST::FUNCTION:EC",
          "2924: BN_get0_nist_prime_192                  3358 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "2916: ECDH_get_default_method                 3351 EXIST::FUNCTION:EC",
          "2921: ENGINE_register_ECDH                    3355 EXIST::FUNCTION:ENGINE",
          "",
          "[Added Lines]",
          "2916: ECDH_get_default_method                 3351 NOEXIST::FUNCTION:",
          "2921: ENGINE_register_ECDH                    3355 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2952: ENGINE_unregister_STORE                 3384 EXIST::FUNCTION:ENGINE",
          "2953: EVP_PKEY_get1_EC_KEY                    3385 EXIST::FUNCTION:EC",
          "2954: STORE_ATTR_INFO_get0_number             3386 NOEXIST::FUNCTION:",
          "2956: EC_KEY_get_conv_form                    3388 EXIST::FUNCTION:EC",
          "2957: ASN1_OCTET_STRING_NDEF_it               3389 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "2958: ASN1_OCTET_STRING_NDEF_it               3389 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "",
          "[Removed Lines]",
          "2955: ENGINE_get_default_ECDH                 3387 EXIST::FUNCTION:ENGINE",
          "",
          "[Added Lines]",
          "2955: ENGINE_get_default_ECDH                 3387 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3008: STORE_new_engine                        3435 NOEXIST::FUNCTION:",
          "3009: STORE_list_public_key_start             3436 NOEXIST::FUNCTION:",
          "3010: X509_VERIFY_PARAM_new                   3437 EXIST::FUNCTION:",
          "3012: EVP_PKEY_get_attr                       3439 EXIST::FUNCTION:",
          "3013: ECDSA_do_sign                           3440 EXIST::FUNCTION:EC",
          "3016: EC_KEY_set_conv_form                    3443 EXIST::FUNCTION:EC",
          "3017: EC_POINT_dup                            3444 EXIST::FUNCTION:EC",
          "3018: GENERAL_SUBTREE_new                     3445 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3011: ECDH_get_ex_data                        3438 EXIST::FUNCTION:EC",
          "3014: ENGINE_unregister_ECDH                  3441 EXIST::FUNCTION:ENGINE",
          "3015: ECDH_OpenSSL                            3442 EXIST::FUNCTION:EC",
          "",
          "[Added Lines]",
          "3011: ECDH_get_ex_data                        3438 NOEXIST::FUNCTION:",
          "3014: ENGINE_unregister_ECDH                  3441 NOEXIST::FUNCTION:",
          "3015: ECDH_OpenSSL                            3442 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3049: d2i_ECPKParameters                      3475 EXIST::FUNCTION:EC",
          "3050: STORE_meth_set_generate_fn              3476 NOEXIST::FUNCTION:",
          "3051: STORE_method_set_generate_function      3476 NOEXIST::FUNCTION:",
          "3053: NAME_CONSTRAINTS_new                    3478 EXIST::FUNCTION:",
          "3054: SHA256_Init                             3479 EXIST::FUNCTION:",
          "3055: EC_KEY_get0_public_key                  3480 EXIST::FUNCTION:EC",
          "",
          "[Removed Lines]",
          "3052: ENGINE_set_ECDH                         3477 EXIST::FUNCTION:ENGINE",
          "",
          "[Added Lines]",
          "3052: ENGINE_set_ECDH                         3477 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3084: STORE_delete_arbitrary                  3506 NOEXIST::FUNCTION:",
          "3085: PEM_read_X509_CERT_PAIR                 3507 NOEXIST::FUNCTION:",
          "3086: X509_STORE_set_depth                    3508 EXIST::FUNCTION:",
          "3088: SHA224                                  3510 EXIST::FUNCTION:",
          "3089: BIO_dump_indent_fp                      3511 EXIST::FUNCTION:STDIO",
          "3090: EC_KEY_set_group                        3512 EXIST::FUNCTION:EC",
          "",
          "[Removed Lines]",
          "3087: ECDSA_get_ex_data                       3509 EXIST::FUNCTION:EC",
          "",
          "[Added Lines]",
          "3087: ECDSA_get_ex_data                       3509 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3097: PEM_read_bio_EC_PUBKEY                  3519 EXIST::FUNCTION:EC",
          "3098: STORE_list_private_key_end              3520 NOEXIST::FUNCTION:",
          "3099: i2d_EC_PUBKEY                           3521 EXIST::FUNCTION:EC",
          "3101: ASN1_put_eoc                            3523 EXIST::FUNCTION:",
          "3102: X509_STORE_CTX_get_explicit_policy      3524 EXIST:!VMS:FUNCTION:",
          "3103: X509_STORE_CTX_get_expl_policy          3524 EXIST:VMS:FUNCTION:",
          "",
          "[Removed Lines]",
          "3100: ECDSA_get_default_method                3522 EXIST::FUNCTION:EC",
          "",
          "[Added Lines]",
          "3100: ECDSA_get_default_method                3522 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3125: STORE_Memory                            3543 NOEXIST::FUNCTION:",
          "3126: sk_find_ex                              3544 EXIST::FUNCTION:",
          "3127: EC_GROUP_set_curve_GF2m                 3545 EXIST::FUNCTION:EC,EC2M",
          "3129: POLICY_CONSTRAINTS_new                  3547 EXIST::FUNCTION:",
          "3130: BN_GF2m_mod_sqrt                        3548 EXIST::FUNCTION:EC2M",
          "3132: EC_KEY_generate_key                     3550 EXIST::FUNCTION:EC",
          "3133: SHA384_Update                           3551 EXIST:!VMSVAX:FUNCTION:",
          "3134: BN_GF2m_arr2poly                        3552 EXIST::FUNCTION:EC2M",
          "",
          "[Removed Lines]",
          "3128: ENGINE_set_default_ECDSA                3546 EXIST::FUNCTION:ENGINE",
          "3131: ECDH_set_default_method                 3549 EXIST::FUNCTION:EC",
          "",
          "[Added Lines]",
          "3128: ENGINE_set_default_ECDSA                3546 NOEXIST::FUNCTION:",
          "3131: ECDH_set_default_method                 3549 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3191: STORE_meth_set_unlock_store_fn          3603 NOEXIST::FUNCTION:",
          "3192: STORE_method_set_unlock_store_function  3603 NOEXIST::FUNCTION:",
          "3193: BN_GF2m_mod_div_arr                     3604 EXIST::FUNCTION:EC2M",
          "3195: STORE_create_method                     3606 NOEXIST::FUNCTION:",
          "3196: ECPKParameters_print                    3607 EXIST::FUNCTION:EC",
          "3197: EC_KEY_get0_private_key                 3608 EXIST::FUNCTION:EC",
          "3198: PEM_write_EC_PUBKEY                     3609 EXIST::FUNCTION:EC",
          "3199: X509_VERIFY_PARAM_set1                  3610 EXIST::FUNCTION:",
          "3201: v2i_GENERAL_NAME_ex                     3612 EXIST::FUNCTION:",
          "3203: STORE_generate_key                      3614 NOEXIST::FUNCTION:",
          "3204: BN_nist_mod_521                         3615 EXIST::FUNCTION:",
          "3205: X509_policy_tree_get0_level             3616 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3194: ENGINE_set_ECDSA                        3605 EXIST::FUNCTION:ENGINE",
          "3200: ECDH_set_method                         3611 EXIST::FUNCTION:EC",
          "3202: ECDH_set_ex_data                        3613 EXIST::FUNCTION:EC",
          "",
          "[Added Lines]",
          "3194: ENGINE_set_ECDSA                        3605 NOEXIST::FUNCTION:",
          "3200: ECDH_set_method                         3611 NOEXIST::FUNCTION:",
          "3202: ECDH_set_ex_data                        3613 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3207: EC_GROUP_set_point_conv_form            3617 EXIST:VMS:FUNCTION:EC",
          "3208: PEM_read_EC_PUBKEY                      3618 EXIST::FUNCTION:EC",
          "3209: i2d_ECDSA_SIG                           3619 EXIST::FUNCTION:EC",
          "3211: STORE_delete_crl                        3621 NOEXIST::FUNCTION:",
          "3212: EC_KEY_get_enc_flags                    3622 EXIST::FUNCTION:EC",
          "3213: ASN1_const_check_infinite_end           3623 EXIST::FUNCTION:",
          "3214: EVP_PKEY_delete_attr                    3624 EXIST::FUNCTION:",
          "3216: EC_POINT_set_compressed_coordinates_GF2m 3626 EXIST:!VMS:FUNCTION:EC,EC2M",
          "3217: EC_POINT_set_compr_coords_GF2m          3626 EXIST:VMS:FUNCTION:EC,EC2M",
          "3218: EC_GROUP_cmp                            3627 EXIST::FUNCTION:EC",
          "",
          "[Removed Lines]",
          "3210: ECDSA_OpenSSL                           3620 EXIST::FUNCTION:EC",
          "3215: ECDSA_set_default_method                3625 EXIST::FUNCTION:EC",
          "",
          "[Added Lines]",
          "3210: ECDSA_OpenSSL                           3620 NOEXIST::FUNCTION:",
          "3215: ECDSA_set_default_method                3625 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3225: SHA512_Init                             3633 EXIST:!VMSVAX:FUNCTION:",
          "3226: STORE_parse_attrs_endp                  3634 NOEXIST::FUNCTION:",
          "3227: BN_set_negative                         3635 EXIST::FUNCTION:",
          "3229: EC_GROUP_get_basis_type                 3637 EXIST::FUNCTION:EC",
          "3230: STORE_list_public_key_next              3638 NOEXIST::FUNCTION:",
          "3231: i2v_ASN1_BIT_STRING                     3639 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3228: ERR_load_ECDSA_strings                  3636 EXIST::FUNCTION:EC",
          "",
          "[Added Lines]",
          "3228: ERR_load_ECDSA_strings                  3636 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3235: PEM_write_ECPKParameters                3643 EXIST::FUNCTION:EC",
          "3236: ECDH_compute_key                        3644 EXIST::FUNCTION:EC",
          "3237: STORE_ATTR_INFO_get0_sha1str            3645 NOEXIST::FUNCTION:",
          "3239: pqueue_pop                              3647 EXIST::FUNCTION:",
          "3240: STORE_ATTR_INFO_get0_cstr               3648 NOEXIST::FUNCTION:",
          "3241: POLICY_CONSTRAINTS_it                   3649 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "",
          "[Removed Lines]",
          "3238: ENGINE_register_all_ECDH                3646 EXIST::FUNCTION:ENGINE",
          "",
          "[Added Lines]",
          "3238: ENGINE_register_all_ECDH                3646 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3249: X509_policy_tree_get0_user_policies     3656 EXIST:!VMS:FUNCTION:",
          "3250: X509_pcy_tree_get0_usr_policies         3656 EXIST:VMS:FUNCTION:",
          "3251: OPENSSL_DIR_read                        3657 EXIST::FUNCTION:",
          "3253: X509_VERIFY_PARAM_lookup                3659 EXIST::FUNCTION:",
          "3254: EC_POINT_get_affine_coordinates_GF2m    3660 EXIST:!VMS:FUNCTION:EC,EC2M",
          "3255: EC_POINT_get_affine_coords_GF2m         3660 EXIST:VMS:FUNCTION:EC,EC2M",
          "3256: EC_GROUP_dup                            3661 EXIST::FUNCTION:EC",
          "3258: EC_KEY_new                              3663 EXIST::FUNCTION:EC",
          "3259: SHA256_Transform                        3664 EXIST::FUNCTION:",
          "3260: EC_KEY_set_enc_flags                    3665 EXIST::FUNCTION:EC",
          "",
          "[Removed Lines]",
          "3252: ENGINE_register_all_ECDSA               3658 EXIST::FUNCTION:ENGINE",
          "3257: ENGINE_get_default_ECDSA                3662 EXIST::FUNCTION:ENGINE",
          "",
          "[Added Lines]",
          "3252: ENGINE_register_all_ECDSA               3658 NOEXIST::FUNCTION:",
          "3257: ENGINE_get_default_ECDSA                3662 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3312: PEM_read_bio_ECPrivateKey               3714 EXIST::FUNCTION:EC",
          "3313: STORE_meth_get_cleanup_fn               3715 NOEXIST::FUNCTION:",
          "3314: STORE_method_get_cleanup_function       3715 NOEXIST::FUNCTION:",
          "3316: d2i_ECDSA_SIG                           3717 EXIST::FUNCTION:EC",
          "3317: BN_is_prime_fasttest_ex                 3718 EXIST::FUNCTION:",
          "3318: ECDSA_sign                              3719 EXIST::FUNCTION:EC",
          "3319: X509_policy_check                       3720 EXIST::FUNCTION:",
          "3320: EVP_PKEY_get_attr_by_NID                3721 EXIST::FUNCTION:",
          "3321: STORE_set_ex_data                       3722 NOEXIST::FUNCTION:",
          "3323: EVP_ecdsa                               3724 NOEXIST::FUNCTION:",
          "3324: BN_BLINDING_get_flags                   3725 EXIST::FUNCTION:",
          "3325: PKCS12_add_cert                         3726 EXIST::FUNCTION:",
          "3326: STORE_OBJECT_new                        3727 NOEXIST::FUNCTION:",
          "3328: EC_KEY_dup                              3729 EXIST::FUNCTION:EC",
          "3329: EVP_CIPHER_CTX_rand_key                 3730 EXIST::FUNCTION:",
          "3331: a2i_IPADDRESS_NC                        3732 EXIST::FUNCTION:",
          "3332: d2i_ECParameters                        3733 EXIST::FUNCTION:EC",
          "3333: STORE_list_certificate_end              3734 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3315: ENGINE_get_ECDH                         3716 EXIST::FUNCTION:ENGINE",
          "3322: ENGINE_get_ECDSA                        3723 EXIST::FUNCTION:ENGINE",
          "3327: ERR_load_ECDH_strings                   3728 EXIST::FUNCTION:EC",
          "3330: ECDSA_set_method                        3731 EXIST::FUNCTION:EC",
          "",
          "[Added Lines]",
          "3315: ENGINE_get_ECDH                         3716 NOEXIST::FUNCTION:",
          "3322: ENGINE_get_ECDSA                        3723 NOEXIST::FUNCTION:",
          "3327: ERR_load_ECDH_strings                   3728 NOEXIST::FUNCTION:",
          "3330: ECDSA_set_method                        3731 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3335: X509_POLICY_NODE_print                  3736 EXIST::FUNCTION:",
          "3336: SHA384_Init                             3737 EXIST:!VMSVAX:FUNCTION:",
          "3337: EC_GF2m_simple_method                   3738 EXIST::FUNCTION:EC,EC2M",
          "3339: SHA384_Final                            3740 EXIST:!VMSVAX:FUNCTION:",
          "3340: PKCS7_set_digest                        3741 EXIST::FUNCTION:",
          "3341: EC_KEY_print                            3742 EXIST::FUNCTION:EC",
          "",
          "[Removed Lines]",
          "3338: ECDSA_set_ex_data                       3739 EXIST::FUNCTION:EC",
          "",
          "[Added Lines]",
          "3338: ECDSA_set_ex_data                       3739 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3357: EVP_PKEY_add1_attr_by_OBJ               3756 EXIST::FUNCTION:",
          "3358: X509_VERIFY_PARAM_set_time              3757 EXIST::FUNCTION:",
          "3359: pqueue_new                              3758 EXIST::FUNCTION:",
          "3361: STORE_new_method                        3760 NOEXIST::FUNCTION:",
          "3362: PKCS12_add_key                          3761 EXIST::FUNCTION:",
          "3363: DSO_merge                               3762 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3360: ENGINE_set_default_ECDH                 3759 EXIST::FUNCTION:ENGINE",
          "",
          "[Added Lines]",
          "3360: ENGINE_set_default_ECDH                 3759 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3367: pqueue_insert                           3766 EXIST::FUNCTION:",
          "3368: pitem_free                              3767 EXIST::FUNCTION:",
          "3369: BN_GF2m_mod_inv_arr                     3768 EXIST::FUNCTION:EC2M",
          "3371: BN_BLINDING_set_thread_id               3770 EXIST::FUNCTION:DEPRECATED",
          "3372: get_rfc3526_prime_8192                  3771 EXIST::FUNCTION:",
          "3373: X509_VERIFY_PARAM_clear_flags           3772 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3370: ENGINE_unregister_ECDSA                 3769 EXIST::FUNCTION:ENGINE",
          "",
          "[Added Lines]",
          "3370: ENGINE_unregister_ECDSA                 3769 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4354: CRYPTO_128_wrap                         4720 EXIST::FUNCTION:",
          "4355: RSA_OAEP_PARAMS_new                     4721 EXIST::FUNCTION:RSA",
          "4356: CRYPTO_128_unwrap                       4722 EXIST::FUNCTION:",
          "4358: CMS_RecipientInfo_kari_decrypt          4724 EXIST::FUNCTION:CMS",
          "4359: CMS_SignerInfo_get0_pkey_ctx            4725 EXIST::FUNCTION:CMS",
          "4362: CMS_RecipientInfo_kari_orig_id_cmp      4728 EXIST:!VMS:FUNCTION:CMS",
          "4363: CMS_RecipInfo_kari_orig_id_cmp          4728 EXIST:VMS:FUNCTION:CMS",
          "4364: CMS_RecipientInfo_kari_get0_alg         4729 EXIST::FUNCTION:CMS",
          "4365: EVP_aes_192_wrap                        4730 EXIST::FUNCTION:AES",
          "4366: EVP_aes_128_cbc_hmac_sha256             4731 EXIST::FUNCTION:AES",
          "4367: DH_compute_key_padded                   4732 EXIST::FUNCTION:DH",
          "4369: CMS_RecipientEncryptedKey_cert_cmp      4734 EXIST:!VMS:FUNCTION:CMS",
          "4370: CMS_RecipEncryptedKey_cert_cmp          4734 EXIST:VMS:FUNCTION:CMS",
          "4371: DH_KDF_X9_42                            4735 EXIST::FUNCTION:CMS,DH",
          "",
          "[Removed Lines]",
          "4357: ECDSA_METHOD_set_name                   4723 EXIST::FUNCTION:EC",
          "4360: ECDSA_METHOD_set_flags                  4726 EXIST::FUNCTION:EC",
          "4361: ECDSA_METHOD_set_sign_setup             4727 EXIST::FUNCTION:EC",
          "4368: ECDSA_METHOD_set_sign                   4733 EXIST::FUNCTION:EC",
          "",
          "[Added Lines]",
          "4357: ECDSA_METHOD_set_name                   4723 NOEXIST::FUNCTION:",
          "4360: ECDSA_METHOD_set_flags                  4726 NOEXIST::FUNCTION:",
          "4361: ECDSA_METHOD_set_sign_setup             4727 NOEXIST::FUNCTION:",
          "4368: ECDSA_METHOD_set_sign                   4733 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4387: d2i_RSA_OAEP_PARAMS                     4748 EXIST::FUNCTION:RSA",
          "4388: ECDH_KDF_X9_62                          4749 EXIST::FUNCTION:EC",
          "4389: CMS_RecipientInfo_kari_get0_ctx         4750 EXIST::FUNCTION:CMS",
          "4391: CMS_RecipientInfo_get0_pkey_ctx         4752 EXIST::FUNCTION:CMS",
          "4392: CMS_RecipientEncryptedKey_get0_id       4753 EXIST:!VMS:FUNCTION:CMS",
          "4393: CMS_RecipEncryptedKey_get0_id           4753 EXIST:VMS:FUNCTION:CMS",
          "4394: RSA_pad_check_PKCS1_OAEP_mgf1           4754 NOEXIST::FUNCTION:",
          "4395: RSA_padding_check_PKCS1_OAEP_mgf1       4754 EXIST:!VMS:FUNCTION:RSA",
          "4396: RSA_padding_chk_PKCS1_OAEP_mgf1         4754 EXIST:VMS:FUNCTION:RSA",
          "4398: CMS_SharedInfo_encode                   4756 EXIST::FUNCTION:CMS",
          "4399: RSA_padding_add_PKCS1_OAEP_mgf1         4757 EXIST::FUNCTION:RSA",
          "4400: CMS_RecipientInfo_kari_get0_orig_id     4758 EXIST:!VMS:FUNCTION:CMS",
          "4401: CMS_RecipInfo_kari_get0_orig_id         4758 EXIST:VMS:FUNCTION:CMS",
          "4403: X509_VERIFY_PARAM_get_count             4760 EXIST::FUNCTION:",
          "4404: X509_VERIFY_PARAM_get0_name             4761 EXIST::FUNCTION:",
          "4405: X509_VERIFY_PARAM_get0                  4762 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "4390: ECDSA_METHOD_new                        4751 EXIST::FUNCTION:EC",
          "4397: ECDSA_METHOD_set_verify                 4755 EXIST::FUNCTION:EC",
          "4402: ECDSA_METHOD_free                       4759 EXIST::FUNCTION:EC",
          "",
          "[Added Lines]",
          "4390: ECDSA_METHOD_new                        4751 NOEXIST::FUNCTION:",
          "4397: ECDSA_METHOD_set_verify                 4755 NOEXIST::FUNCTION:",
          "4402: ECDSA_METHOD_free                       4759 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4408: X509_VERIFY_PARAM_set_hostflags         4765 EXIST::FUNCTION:",
          "4409: BUF_strnlen                             4766 EXIST::FUNCTION:",
          "4410: X509_VERIFY_PARAM_get0_peername         4767 EXIST::FUNCTION:",
          "4412: sk_deep_copy                            4769 EXIST::FUNCTION:",
          "4414: X509_VERIFY_PARAM_add1_host             4771 EXIST::FUNCTION:",
          "4415: EC_GROUP_get_mont_data                  4772 EXIST::FUNCTION:EC",
          "4416: i2d_re_X509_tbs                         4773 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "4411: ECDSA_METHOD_set_app_data               4768 EXIST::FUNCTION:EC",
          "4413: ECDSA_METHOD_get_app_data               4770 EXIST::FUNCTION:EC",
          "",
          "[Added Lines]",
          "4411: ECDSA_METHOD_set_app_data               4768 NOEXIST::FUNCTION:",
          "4413: ECDSA_METHOD_get_app_data               4770 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4696: HMAC_size                               5056 EXIST::FUNCTION:",
          "4697: HMAC_CTX_new                            5057 EXIST::FUNCTION:",
          "4698: HMAC_CTX_free                           5058 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4699: EC_KEY_OpenSSL                          5059 EXIST::FUNCTION:EC",
          "4700: EC_KEY_METHOD_set_compute_key           5060 EXIST::FUNCTION:EC",
          "4701: ENGINE_register_EC                      5061 EXIST::FUNCTION:ENGINE",
          "4702: EC_KEY_set_default_method               5062 EXIST::FUNCTION:EC",
          "4703: ENGINE_set_default_EC                   5063 EXIST::FUNCTION:ENGINE",
          "4704: EC_KEY_METHOD_set_verify                5064 EXIST::FUNCTION:EC",
          "4705: EC_KEY_METHOD_set_init                  5065 EXIST::FUNCTION:EC",
          "4706: ENGINE_get_default_EC                   5066 EXIST::FUNCTION:ENGINE",
          "4707: ENGINE_set_EC                           5067 EXIST::FUNCTION:ENGINE",
          "4708: EC_KEY_new_method                       5068 EXIST::FUNCTION:EC",
          "4709: ENGINE_register_all_EC                  5069 EXIST::FUNCTION:ENGINE",
          "4710: ENGINE_get_EC                           5070 EXIST::FUNCTION:ENGINE",
          "4711: EC_KEY_METHOD_get_init                  5071 EXIST::FUNCTION:EC",
          "4712: EC_KEY_METHOD_get_keygen                5072 EXIST::FUNCTION:EC",
          "4713: EC_KEY_METHOD_free                      5073 EXIST::FUNCTION:EC",
          "4714: EC_KEY_METHOD_new                       5074 EXIST::FUNCTION:EC",
          "4715: ECDSA_SIG_get0                          5075 EXIST::FUNCTION:EC",
          "4716: EC_KEY_METHOD_set_sign                  5076 EXIST::FUNCTION:EC",
          "4717: EC_KEY_get_default_method               5077 EXIST::FUNCTION:EC",
          "4718: EC_KEY_METHOD_set_keygen                5078 EXIST::FUNCTION:EC",
          "4719: EC_KEY_METHOD_get_verify                5079 EXIST::FUNCTION:EC",
          "4720: ENGINE_unregister_EC                    5080 EXIST::FUNCTION:ENGINE",
          "4721: EC_KEY_METHOD_get_sign                  5081 EXIST::FUNCTION:EC",
          "4722: EC_KEY_METHOD_get_compute_key           5082 EXIST::FUNCTION:EC",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8af6082e16a02b4bad63de99fd3e6bc3501ee2b8",
      "candidate_info": {
        "commit_hash": "8af6082e16a02b4bad63de99fd3e6bc3501ee2b8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8af6082e16a02b4bad63de99fd3e6bc3501ee2b8",
        "files": [
          "util/libeay.num"
        ],
        "message": "Fixup merge conflicts in util/libeay.num\n\nReviewed-by: Stephen Henson <steve@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4587: BIO_s_secmem                            4946 EXIST::FUNCTION:",
          "4588: CRYPTO_get_secure_mem_ex_functions      4947 EXIST::FUNCTION:",
          "4589: CRYPTO_set_secure_mem_functions         4948 EXIST::FUNCTION:",
          "4591: X509_STORE_CTX_get_num_untrusted        4949 EXIST::FUNCTION:",
          "4593: X509_up_ref                             4950 EXIST::FUNCTION:",
          "4595: X509_REQ_get_version                    4951 EXIST::FUNCTION:",
          "4597: X509_REQ_get_subject_name               4952 EXIST::FUNCTION:",
          "4599: X509_CRL_up_ref                         4953 EXIST::FUNCTION:",
          "4600: CRYPTO_zalloc                           4954 EXIST::FUNCTION:",
          "4612: EVP_PBE_get                             4964 EXIST::FUNCTION:",
          "4613: X509_get_version                        4965 EXIST::FUNCTION:",
          "4614: X509_get_X509_PUBKEY                    4966 EXIST::FUNCTION:",
          "4615: X509_get_notBefore                      4967 EXIST::FUNCTION:",
          "4616: X509_get_notAfter                       4968 EXIST::FUNCTION:",
          "4617: X509_get_signature_type                 4969 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "4590: TS_VERIFY_CTX_set_flags                 4949 EXIST::FUNCTION:",
          "4592: TS_STATUS_INFO_set_status               4950 EXIST::FUNCTION:",
          "4594: TS_VERIFY_CTX_set_imprint               4951 EXIST::FUNCTION:",
          "4596: TS_VERIFY_CTS_set_certs                 4952 EXIST::FUNCTION:",
          "4598: TS_VERIFY_CTX_set_data                  4953 EXIST::FUNCTION:",
          "4601: TS_VERIFY_CTX_set_store                 4954 EXIST::FUNCTION:",
          "4602: X509_get_extension_flags                4954 EXIST::FUNCTION:",
          "4603: TS_VERIFY_CTX_add_flags                 4955 EXIST::FUNCTION:",
          "4604: X509_get_extended_key_usage             4955 EXIST::FUNCTION:",
          "4605: X509_get_key_usage                      4956 EXIST::FUNCTION:",
          "4606: X509_CRL_get_issuer                     4957 EXIST::FUNCTION:",
          "4607: X509_CRL_get_nextUpdate                 4958 EXIST::FUNCTION:",
          "4608: X509_CRL_get0_signature                 4959 EXIST::FUNCTION:",
          "4609: X509_CRL_get_REVOKED                    4960 EXIST::FUNCTION:",
          "4610: X509_CRL_get_version                    4961 EXIST::FUNCTION:",
          "4611: X509_CRL_get_lastUpdate                 4962 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "4596: X509_get_extension_flags                4955 EXIST::FUNCTION:",
          "4597: X509_get_extended_key_usage             4956 EXIST::FUNCTION:",
          "4598: X509_get_key_usage                      4957 EXIST::FUNCTION:",
          "4599: X509_CRL_get_issuer                     4958 EXIST::FUNCTION:",
          "4600: X509_CRL_get_nextUpdate                 4959 EXIST::FUNCTION:",
          "4601: X509_CRL_get0_signature                 4960 EXIST::FUNCTION:",
          "4602: X509_CRL_get_REVOKED                    4961 EXIST::FUNCTION:",
          "4603: X509_CRL_get_version                    4962 EXIST::FUNCTION:",
          "4604: X509_CRL_get_lastUpdate                 4963 EXIST::FUNCTION:",
          "4611: TS_VERIFY_CTX_set_data                  4970 EXIST::FUNCTION:",
          "4612: TS_VERIFY_CTX_set_imprint               4971 EXIST::FUNCTION:",
          "4613: TS_VERIFY_CTX_set_flags                 4972 EXIST::FUNCTION:",
          "4614: TS_VERIFY_CTS_set_certs                 4973 EXIST::FUNCTION:",
          "4615: TS_VERIFY_CTX_add_flags                 4974 EXIST::FUNCTION:",
          "4616: TS_STATUS_INFO_set_status               4975 EXIST::FUNCTION:",
          "4617: TS_VERIFY_CTX_set_store                 4976 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "252d6d3aa62dccf0dc826644b7da0b6bafa3831b",
      "candidate_info": {
        "commit_hash": "252d6d3aa62dccf0dc826644b7da0b6bafa3831b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/252d6d3aa62dccf0dc826644b7da0b6bafa3831b",
        "files": [
          "apps/Makefile",
          "apps/s_server.c",
          "crypto/async/async.c",
          "include/openssl/async.h",
          "include/openssl/safestack.h",
          "util/libeay.num"
        ],
        "message": "Add ASYNC_JOB pools\n\nIt is expensive to create the ASYNC_JOB objects due to the \"makecontext\"\ncall. This change adds support for pools of ASYNC_JOB objects so that we\ndon't have to create a new ASYNC_JOB every time we want to use one.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "apps/s_server.c||apps/s_server.c",
          "crypto/async/async.c||crypto/async/async.c",
          "include/openssl/async.h||include/openssl/async.h",
          "include/openssl/safestack.h||include/openssl/safestack.h",
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "apps/s_server.c||apps/s_server.c",
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "apps/s_server.c||apps/s_server.c",
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143: #include <stdio.h>",
          "144: #include <stdlib.h>",
          "145: #include <string.h>",
          "147: #include <openssl/e_os2.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146: #include <openssl/async.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1657:     else",
          "1658:         SSL_CTX_sess_set_cache_size(ctx, 128);",
          "1661:         SSL_CTX_set_mode(ctx, SSL_MODE_ASYNC);",
          "1663: #ifndef OPENSSL_NO_SRTP",
          "1664:     if (srtp_profiles != NULL) {",
          "",
          "[Removed Lines]",
          "1660:     if (async)",
          "",
          "[Added Lines]",
          "1661:     if (async) {",
          "1663:         ASYNC_init_pool(0, 0, 0);",
          "1664:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1970:     bio_s_out = NULL;",
          "1971:     BIO_free(bio_s_msg);",
          "1972:     bio_s_msg = NULL;",
          "1973:     return (ret);",
          "1974: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1976:     if (async) {",
          "1977:         ASYNC_free_pool();",
          "1978:     }",
          "",
          "---------------"
        ],
        "crypto/async/async.c||crypto/async/async.c": [
          "File: crypto/async/async.c -> crypto/async/async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: #define ASYNC_JOB_PAUSED    2",
          "62: #define ASYNC_JOB_STOPPING  3",
          "65: static ASYNC_CTX *ASYNC_CTX_new(void)",
          "66: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: static size_t pool_max_size = 0;",
          "65: static size_t curr_size = 0;",
          "67: DECLARE_STACK_OF(ASYNC_JOB)",
          "68: static STACK_OF(ASYNC_JOB) *pool = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:     }",
          "122: }",
          "126:     ASYNC_JOB *job;",
          "140:     }",
          "141: }",
          "",
          "[Removed Lines]",
          "124: void ASYNC_start_func(void)",
          "125: {",
          "129:     job = ASYNC_get_ctx()->currjob;",
          "130:     job->ret = job->func(job->funcargs);",
          "133:     job->status = ASYNC_JOB_STOPPING;",
          "134:     if(!ASYNC_FIBRE_swapcontext(&job->fibrectx,",
          "135:                                 &ASYNC_get_ctx()->dispatcher, 0)) {",
          "",
          "[Added Lines]",
          "130: static ASYNC_JOB *async_get_pool_job(void) {",
          "133:     if (pool == NULL) {",
          "138:         if (ASYNC_init_pool(0, 0, 0) == 0)",
          "139:             return NULL;",
          "140:     }",
          "142:     job = sk_ASYNC_JOB_pop(pool);",
          "143:     if (job == NULL) {",
          "145:         if (pool_max_size && curr_size >= pool_max_size) {",
          "147:             return NULL;",
          "148:         }",
          "149:         job = ASYNC_JOB_new();",
          "150:         if (job) {",
          "151:             ASYNC_FIBRE_makecontext(&job->fibrectx);",
          "152:             curr_size++;",
          "153:         }",
          "154:     }",
          "155:     return job;",
          "156: }",
          "158: static void async_release_job(ASYNC_JOB *job) {",
          "159:     if(job->funcargs)",
          "160:         OPENSSL_free(job->funcargs);",
          "161:     job->funcargs = NULL;",
          "163:     sk_ASYNC_JOB_push(pool, job);",
          "164: }",
          "166: void ASYNC_start_func(void)",
          "167: {",
          "168:     ASYNC_JOB *job;",
          "170:     while (1) {",
          "172:         job = ASYNC_get_ctx()->currjob;",
          "173:         job->ret = job->func(job->funcargs);",
          "176:         job->status = ASYNC_JOB_STOPPING;",
          "177:         if(!ASYNC_FIBRE_swapcontext(&job->fibrectx,",
          "178:                                     &ASYNC_get_ctx()->dispatcher, 1)) {",
          "183:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:         if(ASYNC_get_ctx()->currjob) {",
          "156:             if(ASYNC_get_ctx()->currjob->status == ASYNC_JOB_STOPPING) {",
          "159:                 ASYNC_get_ctx()->currjob = NULL;",
          "161:                 ASYNC_CTX_free();",
          "",
          "[Removed Lines]",
          "158:                 ASYNC_JOB_free(ASYNC_get_ctx()->currjob);",
          "",
          "[Added Lines]",
          "202:                 async_release_job(ASYNC_get_ctx()->currjob);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:             }",
          "183:             ASYNC_get_ctx()->currjob = NULL;",
          "185:             ASYNC_CTX_free();",
          "",
          "[Removed Lines]",
          "182:             ASYNC_JOB_free(ASYNC_get_ctx()->currjob);",
          "",
          "[Added Lines]",
          "226:             async_release_job(ASYNC_get_ctx()->currjob);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "187:         }",
          "191:             ASYNC_CTX_free();",
          "193:         }",
          "195:         if(args != NULL) {",
          "196:             ASYNC_get_ctx()->currjob->funcargs = OPENSSL_malloc(size);",
          "197:             if(!ASYNC_get_ctx()->currjob->funcargs) {",
          "199:                 ASYNC_get_ctx()->currjob = NULL;",
          "200:                 ASYNC_CTX_free();",
          "201:                 return ASYNC_ERR;",
          "",
          "[Removed Lines]",
          "190:         if(!(ASYNC_get_ctx()->currjob = ASYNC_JOB_new())) {",
          "192:             return ASYNC_ERR;",
          "198:                 ASYNC_JOB_free(ASYNC_get_ctx()->currjob);",
          "",
          "[Added Lines]",
          "234:         if(!(ASYNC_get_ctx()->currjob = async_get_pool_job())) {",
          "236:             return ASYNC_NO_JOBS;",
          "242:                 async_release_job(ASYNC_get_ctx()->currjob);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "206:         }",
          "208:         ASYNC_get_ctx()->currjob->func = func;",
          "210:         if(!ASYNC_FIBRE_swapcontext(&ASYNC_get_ctx()->dispatcher,",
          "211:             &ASYNC_get_ctx()->currjob->fibrectx, 1))",
          "212:             goto err;",
          "213:     }",
          "215: err:",
          "217:     ASYNC_get_ctx()->currjob = NULL;",
          "219:     ASYNC_CTX_free();",
          "",
          "[Removed Lines]",
          "209:         ASYNC_FIBRE_makecontext(&ASYNC_get_ctx()->currjob->fibrectx);",
          "216:     ASYNC_JOB_free(ASYNC_get_ctx()->currjob);",
          "",
          "[Added Lines]",
          "259:     async_release_job(ASYNC_get_ctx()->currjob);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "248:     return 0;",
          "249: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294: int ASYNC_init_pool(unsigned int local, size_t max_size, size_t init_size)",
          "295: {",
          "296:     if (local != 0) {",
          "298:         return 0;",
          "299:     }",
          "301:     pool_max_size = max_size;",
          "302:     pool = sk_ASYNC_JOB_new_null();",
          "303:     if (pool == NULL) {",
          "304:         return 0;",
          "305:     }",
          "307:     while (init_size) {",
          "308:         ASYNC_JOB *job;",
          "309:         job = ASYNC_JOB_new();",
          "310:         if (job) {",
          "311:             ASYNC_FIBRE_makecontext(&job->fibrectx);",
          "312:             job->funcargs = NULL;",
          "313:             sk_ASYNC_JOB_push(pool, job);",
          "314:             curr_size++;",
          "315:             init_size--;",
          "316:         } else {",
          "321:             init_size = 0;",
          "322:         }",
          "323:     }",
          "325:     return 1;",
          "326: }",
          "328: void ASYNC_free_pool(void)",
          "329: {",
          "330:     ASYNC_JOB *job;",
          "332:     do {",
          "333:         job = sk_ASYNC_JOB_pop(pool);",
          "334:         ASYNC_JOB_free(job);",
          "335:     } while (job);",
          "336:     sk_ASYNC_JOB_free(pool);",
          "337: }",
          "",
          "---------------"
        ],
        "include/openssl/async.h||include/openssl/async.h": [
          "File: include/openssl/async.h -> include/openssl/async.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: typedef struct async_job_st ASYNC_JOB;",
          "65: #define ASYNC_ERR      0",
          "69: int ASYNC_start_job(ASYNC_JOB **job, int *ret, int (*func)(void *),",
          "70:                          void *args, size_t size);",
          "",
          "[Removed Lines]",
          "66: #define ASYNC_PAUSE    1",
          "67: #define ASYNC_FINISH   2",
          "",
          "[Added Lines]",
          "66: #define ASYNC_NO_JOBS  1",
          "67: #define ASYNC_PAUSE    2",
          "68: #define ASYNC_FINISH   3",
          "70: int ASYNC_init_pool(unsigned int local, size_t max_size, size_t init_size);",
          "71: void ASYNC_free_pool(void);",
          "",
          "---------------"
        ],
        "include/openssl/safestack.h||include/openssl/safestack.h": [
          "File: include/openssl/safestack.h -> include/openssl/safestack.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "412: # define sk_ASN1_VALUE_sort(st) SKM_sk_sort(ASN1_VALUE, (st))",
          "413: # define sk_ASN1_VALUE_is_sorted(st) SKM_sk_is_sorted(ASN1_VALUE, (st))",
          "415: # define sk_BIO_new(cmp) SKM_sk_new(BIO, (cmp))",
          "416: # define sk_BIO_new_null() SKM_sk_new_null(BIO)",
          "417: # define sk_BIO_free(st) SKM_sk_free(BIO, (st))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "415: # define sk_ASYNC_JOB_new(cmp) SKM_sk_new(ASYNC_JOB, (cmp))",
          "416: # define sk_ASYNC_JOB_new_null() SKM_sk_new_null(ASYNC_JOB)",
          "417: # define sk_ASYNC_JOB_free(st) SKM_sk_free(ASYNC_JOB, (st))",
          "418: # define sk_ASYNC_JOB_num(st) SKM_sk_num(ASYNC_JOB, (st))",
          "419: # define sk_ASYNC_JOB_value(st, i) SKM_sk_value(ASYNC_JOB, (st), (i))",
          "420: # define sk_ASYNC_JOB_set(st, i, val) SKM_sk_set(ASYNC_JOB, (st), (i), (val))",
          "421: # define sk_ASYNC_JOB_zero(st) SKM_sk_zero(ASYNC_JOB, (st))",
          "422: # define sk_ASYNC_JOB_push(st, val) SKM_sk_push(ASYNC_JOB, (st), (val))",
          "423: # define sk_ASYNC_JOB_unshift(st, val) SKM_sk_unshift(ASYNC_JOB, (st), (val))",
          "424: # define sk_ASYNC_JOB_find(st, val) SKM_sk_find(ASYNC_JOB, (st), (val))",
          "425: # define sk_ASYNC_JOB_find_ex(st, val) SKM_sk_find_ex(ASYNC_JOB, (st), (val))",
          "426: # define sk_ASYNC_JOB_delete(st, i) SKM_sk_delete(ASYNC_JOB, (st), (i))",
          "427: # define sk_ASYNC_JOB_delete_ptr(st, ptr) SKM_sk_delete_ptr(ASYNC_JOB, (st), (ptr))",
          "428: # define sk_ASYNC_JOB_insert(st, val, i) SKM_sk_insert(ASYNC_JOB, (st), (val), (i))",
          "429: # define sk_ASYNC_JOB_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(ASYNC_JOB, (st), (cmp))",
          "430: # define sk_ASYNC_JOB_dup(st) SKM_sk_dup(ASYNC_JOB, st)",
          "431: # define sk_ASYNC_JOB_pop_free(st, free_func) SKM_sk_pop_free(ASYNC_JOB, (st), (free_func))",
          "432: # define sk_ASYNC_JOB_deep_copy(st, copy_func, free_func) SKM_sk_deep_copy(ASYNC_JOB, (st), (copy_func), (free_func))",
          "433: # define sk_ASYNC_JOB_shift(st) SKM_sk_shift(ASYNC_JOB, (st))",
          "434: # define sk_ASYNC_JOB_pop(st) SKM_sk_pop(ASYNC_JOB, (st))",
          "435: # define sk_ASYNC_JOB_sort(st) SKM_sk_sort(ASYNC_JOB, (st))",
          "436: # define sk_ASYNC_JOB_is_sorted(st) SKM_sk_is_sorted(ASYNC_JOB, (st))",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4654: ASYNC_job_is_waiting                    5014 NOEXIST::FUNCTION:",
          "4655: ASYNC_in_job                            5015 EXIST::FUNCTION:",
          "4656: ASYNC_start_job                         5016 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4657: ASYNC_init_pool                         5017 EXIST::FUNCTION:",
          "4658: ASYNC_free_pool                         5018 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28dc5d1963c96db99e3fd48418552a5a0399480d",
      "candidate_info": {
        "commit_hash": "28dc5d1963c96db99e3fd48418552a5a0399480d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/28dc5d1963c96db99e3fd48418552a5a0399480d",
        "files": [
          "include/openssl/ripemd.h",
          "util/libeay.num"
        ],
        "message": "Fix no-ripemd on Windows\n\nmkdef.pl was getting confused by:\n\n # ifdef OPENSSL_NO_RMD160\n #  error RIPEMD is disabled.\n # endif\n\nChanging RIPEMD to RMD160 solves it. Fix suggested by Steve Henson.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ripemd.h||include/openssl/ripemd.h",
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ripemd.h||include/openssl/ripemd.h": [
          "File: include/openssl/ripemd.h -> include/openssl/ripemd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #endif",
          "69: # ifdef OPENSSL_NO_RMD160",
          "71: # endif",
          "73: # define RIPEMD160_LONG unsigned int",
          "",
          "[Removed Lines]",
          "70: #  error RIPEMD is disabled.",
          "",
          "[Added Lines]",
          "70: #  error RMD160 is disabled.",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "1016: bn_add_words                            1039 NOEXIST::FUNCTION:",
          "1017: d2i_Netscape_RSA_2                      1040 NOEXIST::FUNCTION:",
          "1018: CRYPTO_get_ex_new_index                 1041 EXIST::FUNCTION:",
          "1024: RC5_32_set_key                          1047 EXIST::FUNCTION:RC5",
          "1025: RC5_32_ecb_encrypt                      1048 EXIST::FUNCTION:RC5",
          "1026: RC5_32_encrypt                          1049 EXIST::FUNCTION:RC5",
          "",
          "[Removed Lines]",
          "1019: RIPEMD160_Init                          1042 EXIST::FUNCTION:",
          "1020: RIPEMD160_Update                        1043 EXIST::FUNCTION:",
          "1021: RIPEMD160_Final                         1044 EXIST::FUNCTION:",
          "1022: RIPEMD160                               1045 EXIST::FUNCTION:",
          "1023: RIPEMD160_Transform                     1046 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "1019: RIPEMD160_Init                          1042 EXIST::FUNCTION:RMD160",
          "1020: RIPEMD160_Update                        1043 EXIST::FUNCTION:RMD160",
          "1021: RIPEMD160_Final                         1044 EXIST::FUNCTION:RMD160",
          "1022: RIPEMD160                               1045 EXIST::FUNCTION:RMD160",
          "1023: RIPEMD160_Transform                     1046 EXIST::FUNCTION:RMD160",
          "",
          "---------------"
        ]
      }
    }
  ]
}