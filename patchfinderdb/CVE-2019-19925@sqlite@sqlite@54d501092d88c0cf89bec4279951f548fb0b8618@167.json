{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "51d35b0fa9f636e4df2cb8751912dd01c310acd7",
      "candidate_info": {
        "commit_hash": "51d35b0fa9f636e4df2cb8751912dd01c310acd7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/51d35b0fa9f636e4df2cb8751912dd01c310acd7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/sqliteInt.h",
          "src/util.c"
        ],
        "message": "The keywords TRUE and FALSE should only act as boolean literal values if unquoted.\n\nFossilOrigin-Name: 5547f39de993c708f72301ef25df190a2f007e0c4253799bdd9e86bb1ae41777",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ea119641a7edcd0e1ec14371d93e35f860971888bd98cb0019253358a2ef123b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "780:         if( pToken->n ) memcpy(pNew->u.zToken, pToken->z, pToken->n);",
          "781:         pNew->u.zToken[pToken->n] = 0;",
          "782:         if( dequote && sqlite3Isquote(pNew->u.zToken[0]) ){",
          "785:         }",
          "786:       }",
          "787:     }",
          "",
          "[Removed Lines]",
          "783:           if( pNew->u.zToken[0]=='\"' ) pNew->flags |= EP_DblQuoted;",
          "784:           sqlite3Dequote(pNew->u.zToken);",
          "",
          "[Added Lines]",
          "783:           sqlite3DequoteExpr(pNew);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1813: int sqlite3ExprIdToTrueFalse(Expr *pExpr){",
          "1814:   assert( pExpr->op==TK_ID || pExpr->op==TK_STRING );",
          "1817:   ){",
          "1818:     pExpr->op = TK_TRUEFALSE;",
          "1819:     return 1;",
          "",
          "[Removed Lines]",
          "1815:   if( sqlite3StrICmp(pExpr->u.zToken, \"true\")==0",
          "1816:    || sqlite3StrICmp(pExpr->u.zToken, \"false\")==0",
          "",
          "[Added Lines]",
          "1814:   if( !ExprHasProperty(pExpr, EP_Quoted)",
          "1815:    && (sqlite3StrICmp(pExpr->u.zToken, \"true\")==0",
          "1816:        || sqlite3StrICmp(pExpr->u.zToken, \"false\")==0)",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "955:       memcpy(p->u.zToken, t.z, t.n);",
          "956:       p->u.zToken[t.n] = 0;",
          "957:       if( sqlite3Isquote(p->u.zToken[0]) ){",
          "960:       }",
          "961: #if SQLITE_MAX_EXPR_DEPTH>0",
          "962:       p->nHeight = 1;",
          "",
          "[Removed Lines]",
          "958:         if( p->u.zToken[0]=='\"' ) p->flags |= EP_DblQuoted;",
          "959:         sqlite3Dequote(p->u.zToken);",
          "",
          "[Added Lines]",
          "958:         sqlite3DequoteExpr(p);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3814: void sqlite3SetString(char **, sqlite3*, const char*);",
          "3815: void sqlite3ErrorMsg(Parse*, const char*, ...);",
          "3816: void sqlite3Dequote(char*);",
          "3817: void sqlite3TokenInit(Token*,char*);",
          "3818: int sqlite3KeywordCode(const unsigned char*, int);",
          "3819: int sqlite3RunParser(Parse*, const char*, char **);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3818: void sqlite3DequoteExpr(Expr*);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:   }",
          "265:   z[j] = 0;",
          "266: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267: void sqlite3DequoteExpr(Expr *p){",
          "268:   assert( sqlite3Isquote(p->u.zToken[0]) );",
          "269:   p->flags |= p->u.zToken[0]=='\"' ? EP_Quoted|EP_DblQuoted : EP_Quoted;",
          "270:   sqlite3Dequote(p->u.zToken);",
          "271: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f135cb7d7f123a42940ddbb4dadc91e86f84cb35",
      "candidate_info": {
        "commit_hash": "f135cb7d7f123a42940ddbb4dadc91e86f84cb35",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f135cb7d7f123a42940ddbb4dadc91e86f84cb35",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix an error message in the Lemon parser generator.\n\nFossilOrigin-Name: b6d7d42b7426622a26b67809cd1f21285fea120aa1897377b9946840463b41f1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f97626f921dafe596b615a168ef31987f4a1c0b52956443e1a5c1148b49cab74",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3848:           ErrorMsg(lemp->filename,rp->ruleline,",
          "3849:             \"%s(%s) has the same label as the LHS but is not the left-most \"",
          "3850:             \"symbol on the RHS.\",",
          "3852:           lemp->errorcnt++;",
          "3853:         }",
          "3854:         for(j=0; j<i; j++){",
          "",
          "[Removed Lines]",
          "3851:             rp->rhs[i]->name, rp->rhsalias);",
          "",
          "[Added Lines]",
          "3851:             rp->rhs[i]->name, rp->rhsalias[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7eb2c9176a96af35be69436fa4aef436c06284fc",
      "candidate_info": {
        "commit_hash": "7eb2c9176a96af35be69436fa4aef436c06284fc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7eb2c9176a96af35be69436fa4aef436c06284fc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "In the treeview debugging output, provide additional details for the Table object associated with each FROM clause term.\n\nFossilOrigin-Name: 11d4682d2eec133ccca99ca9cf2620cd249b4afe55918f3ebf93b454431f9c55",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6821c61f1d71be2be7f867e59fd94582a1eaf45a4d1fb88be995807a77cc22ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:       sqlite3_str_appendf(&x, \" %s\", pItem->zName);",
          "139:     }",
          "140:     if( pItem->pTab ){",
          "142:     }",
          "143:     if( pItem->zAlias ){",
          "144:       sqlite3_str_appendf(&x, \" (AS %s)\", pItem->zAlias);",
          "",
          "[Removed Lines]",
          "141:       sqlite3_str_appendf(&x, \" tabname=%Q\", pItem->pTab->zName);",
          "",
          "[Added Lines]",
          "141:       sqlite3_str_appendf(&x, \" tab=%Q nCol=%d ptr=%p\",",
          "142:            pItem->pTab->zName, pItem->pTab->nCol, pItem->pTab);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "255a81f10a5885a17d99ea20e13e1641029e6e3b",
      "candidate_info": {
        "commit_hash": "255a81f10a5885a17d99ea20e13e1641029e6e3b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/255a81f10a5885a17d99ea20e13e1641029e6e3b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c",
          "test/printf.test"
        ],
        "message": "Modify sqlite3_str_finish() and sqlite3VMPrintf() so that they always return NULL on any OOM or SQLITE_LIMIT_LENGTH error.\n\nFossilOrigin-Name: e7144ffd21294d7aebbfa6aa5a262797a6d16de11193f1bf6b75f5f27b04c940",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c",
          "test/printf.test||test/printf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c13d563925db12bc2c91ff9432050261e5bd39d960e2739777a66bf804df2e31",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: static void setStrAccumError(StrAccum *p, u8 eError){",
          "137:   assert( eError==SQLITE_NOMEM || eError==SQLITE_TOOBIG );",
          "138:   p->accError = eError;",
          "140: }",
          "",
          "[Removed Lines]",
          "139:   p->nAlloc = 0;",
          "",
          "[Added Lines]",
          "139:   if( p->mxAlloc ) sqlite3_str_reset(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167: static char *printfTempBuf(sqlite3_str *pAccum, sqlite3_int64 n){",
          "168:   char *z;",
          "169:   if( n>pAccum->nAlloc && n>pAccum->mxAlloc ){",
          "170:     setStrAccumError(pAccum, SQLITE_TOOBIG);",
          "171:     return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:   if( pAccum->accError ) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "885:     return 0;",
          "886:   }",
          "887:   if( p->mxAlloc==0 ){",
          "889:     setStrAccumError(p, SQLITE_TOOBIG);",
          "891:   }else{",
          "892:     char *zOld = isMalloced(p) ? p->zText : 0;",
          "893:     i64 szNew = p->nChar;",
          "",
          "[Removed Lines]",
          "888:     N = p->nAlloc - p->nChar - 1;",
          "890:     return N;",
          "",
          "[Added Lines]",
          "890:     return p->nAlloc - p->nChar - 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "959:   assert( z!=0 || N==0 );",
          "960:   assert( p->zText!=0 || p->nChar==0 || p->accError );",
          "961:   assert( N>=0 );",
          "963:   if( p->nChar+N >= p->nAlloc ){",
          "964:     enlargeAndAppend(p,z,N);",
          "965:   }else if( N ){",
          "",
          "[Removed Lines]",
          "962:   assert( p->accError==0 || p->nAlloc==0 );",
          "",
          "[Added Lines]",
          "962:   assert( p->accError==0 || p->nAlloc==0 || p->mxAlloc==0 );",
          "",
          "---------------"
        ],
        "test/printf.test||test/printf.test": [
          "File: test/printf.test -> test/printf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "540: } {abc: 1 1 (1e-20) :xyz}",
          "541: do_test printf-2.1.2.10 {",
          "542:   sqlite3_mprintf_double {abc: %*.*f}  2000000000 1000000000 1.0e-20",
          "544: do_test printf-2.1.3.1 {",
          "545:   sqlite3_mprintf_double {abc: (%*.*f) :xyz} 1 1 1.0",
          "546: } {abc: (1.0) :xyz}",
          "",
          "[Removed Lines]",
          "543: } {abc: }",
          "",
          "[Added Lines]",
          "543: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a9698456dfb800878cb4414238927fc86907f93",
      "candidate_info": {
        "commit_hash": "7a9698456dfb800878cb4414238927fc86907f93",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7a9698456dfb800878cb4414238927fc86907f93",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/update.test"
        ],
        "message": "Fix a gramfuzz find.  If a partial index that does not reference any column of its table is used by an UPDATE statement in one-pass mode, then avoid the use of OP_DeferredSeek since the seek might not be resolved prior to the OP_Delete and OP_Insert that implement the UPDATE.\n\nFossilOrigin-Name: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/update.test||test/update.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1854:     if( omitTable ){",
          "1856:     }else if( HasRowid(pIdx->pTable) ){",
          "1861:         iRowidReg = ++pParse->nMem;",
          "1862:         sqlite3VdbeAddOp2(v, OP_IdxRowid, iIdxCur, iRowidReg);",
          "1863:         sqlite3VdbeAddOp3(v, OP_NotExists, iCur, 0, iRowidReg);",
          "",
          "[Removed Lines]",
          "1857:       if( (pWInfo->wctrlFlags & WHERE_SEEK_TABLE) || (",
          "1858:           (pWInfo->wctrlFlags & WHERE_SEEK_UNIQ_TABLE)",
          "1859:        && (pWInfo->eOnePass==ONEPASS_SINGLE)",
          "1860:       )){",
          "",
          "[Added Lines]",
          "1857:       if( (pWInfo->wctrlFlags & WHERE_SEEK_TABLE)",
          "1858:        || ( (pWInfo->wctrlFlags & WHERE_SEEK_UNIQ_TABLE)!=0",
          "1859:            && (pWInfo->eOnePass==ONEPASS_SINGLE || pLoop->nLTerm==0) )",
          "1860:       ){",
          "",
          "---------------"
        ],
        "test/update.test||test/update.test": [
          "File: test/update.test -> test/update.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "641:   SELECT * FROM t16 ORDER BY +a;",
          "642: } {1 2 3 4 5 6}",
          "644: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "644: # 2019-12-09 gramfuzz find",
          "645: # If a partial index that does not reference any column of its table (which is you",
          "646: # must admit is a very strange index, but one that is allowed) is used by an UPDATE",
          "647: # statement, void the use of OP_DeferredSeek on the main loop, as the seek will not",
          "648: # be resolved prior to the OP_Delete.",
          "649: #",
          "650: do_execsql_test update-17.10 {",
          "651:   DROP TABLE IF EXISTS t1;",
          "652:   CREATE TABLE t1(x,y);",
          "653:   INSERT INTO t1(x) VALUES(1);",
          "654:   CREATE INDEX t1x1 ON t1(1) WHERE 3;",
          "655:   UPDATE t1 SET x=2, y=3 WHERE 3;",
          "656:   SELECT * FROM t1;",
          "657: } {2 3}",
          "",
          "---------------"
        ]
      }
    }
  ]
}