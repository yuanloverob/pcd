{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c97001fd55d61b5214fe91b764795d8f04360dae",
      "candidate_info": {
        "commit_hash": "c97001fd55d61b5214fe91b764795d8f04360dae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c97001fd55d61b5214fe91b764795d8f04360dae",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Update wapptest.tcl so that it deletes extra files if the \"Keep files:\" checkbox is clear. Set it by default.\n\nFossilOrigin-Name: 09623cc4cc82e3c123d1fd5d88b2f4b50ec5f2cc7e579a7203258bf0c246a74f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 56604bb60a8ebac8d2854628d1b052d594d7effe14be8333977995dc07b65114",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #",
          "21: set G(platform) $::tcl_platform(os)-$::tcl_platform(machine)",
          "22: set G(test)     Normal",
          "25: set G(tcl)      [::tcl::pkgconfig get libdir,install]",
          "26: set G(jobs)     3",
          "27: set G(debug)    0",
          "",
          "[Removed Lines]",
          "23: set G(keep)     0",
          "24: set G(msvc)     0",
          "",
          "[Added Lines]",
          "23: set G(keep)     1",
          "24: set G(msvc)     [expr {$::tcl_platform(platform)==\"windows\"}]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:   }",
          "198: }",
          "200: proc slave_test_done {name rc} {",
          "201:   global G",
          "202:   set G(test.$name.done) [clock seconds]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: # This command is invoked once a slave process has finished running its",
          "201: # tests, successfully or otherwise. Parameter $name is the name of the",
          "202: # test, $rc the exit code returned by the slave process.",
          "203: #",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "209:   if {[file exists $G(test.$name.log)]} {",
          "210:     count_tests_and_errors $name $G(test.$name.log)",
          "211:   }",
          "212: }",
          "214: proc slave_fileevent {name} {",
          "215:   global G",
          "216:   set fd $G(test.$name.channel)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   # If the \"keep files\" checkbox is clear, delete all files except for",
          "218:   # the executables and test logs. And any core file that is present.",
          "219:   if {$G(keep)==0} {",
          "220:     set keeplist {",
          "221:       testfixture testfixture.exe",
          "222:       sqlite3 sqlite3.exe",
          "223:       test.log test-out.txt",
          "224:       core",
          "225:     }",
          "226:     foreach f [glob -nocomplain [file join $G(test.$name.dir) *]] {",
          "227:       set t [file tail $f]",
          "228:       if {[lsearch $keeplist $t]<0} {",
          "229:         catch { file delete -force $f }",
          "230:       }",
          "231:     }",
          "232:   }",
          "235: # This is a fileevent callback invoked each time a file-descriptor that",
          "236: # connects this process to a slave process is readable.",
          "237: #",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "228:   do_some_stuff",
          "229: }",
          "231: proc wapptest_slave_script {} {",
          "232:   global G",
          "233:   set res {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255: # Return the contents of the \"slave script\" - the script run by slave",
          "256: # processes to actually perform the test. It does two things:",
          "257: #",
          "258: #   1. Reads and [exec]s the contents of file wapptest_configure.sh.",
          "259: #   2. Reads and [exec]s the contents of file wapptest_make.sh.",
          "260: #",
          "261: # Step 1 is omitted if the test uses MSVC (which does not use configure).",
          "262: #",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "270:   foreach f [glob -nocomplain [file join $dir *]] {",
          "271:     catch { file delete -force $f }",
          "272:   }",
          "274:   # Write the configure command to wapptest_configure.sh. This file",
          "275:   # is empty if using MSVC - MSVC does not use configure.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305:   set G(test.$name.dir) $dir",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6a9efb976daf2814b6abfd8e54692ffa9aa78ff",
      "candidate_info": {
        "commit_hash": "e6a9efb976daf2814b6abfd8e54692ffa9aa78ff",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6a9efb976daf2814b6abfd8e54692ffa9aa78ff",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Ensure that the btree cursor is correctly set up prior to backing it up as part of a delete operation on a divider cell in an index.\n\nFossilOrigin-Name: a3ea1a822d3a110f4f186f2fc8550f435c8c98635d058096b7be9d4df7066b8b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d59567dda231e7ffec437d5e055676cf42d791196406cdc696cafa2583eb483b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8772:   if( !pPage->leaf ){",
          "8773:     rc = sqlite3BtreePrevious(pCur, 0);",
          "8774:     assert( rc!=SQLITE_DONE );",
          "8775:     if( rc ) return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8773:     pCur->skipNext = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b163b57212b8c2c68dbbef8e3de7f095b544e302",
      "candidate_info": {
        "commit_hash": "b163b57212b8c2c68dbbef8e3de7f095b544e302",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b163b57212b8c2c68dbbef8e3de7f095b544e302",
        "files": [
          "ext/fts3/fts3_unicode2.c",
          "ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_test_tok.c",
          "ext/fts5/fts5_tokenize.c",
          "ext/fts5/fts5_unicode2.c",
          "ext/fts5/test/fts5unicode3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix problems in fts5 found by ASAN.\n\nFossilOrigin-Name: c564bf870106faef297594a51995619c80311d06bd5f8a0c7644f666f22ba576",
        "before_after_code_files": [
          "ext/fts3/fts3_unicode2.c||ext/fts3/fts3_unicode2.c",
          "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_test_tok.c||ext/fts5/fts5_test_tok.c",
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
          "ext/fts5/test/fts5unicode3.test||ext/fts5/test/fts5unicode3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_unicode2.c||ext/fts3/fts3_unicode2.c": [
          "File: ext/fts3/fts3_unicode2.c -> ext/fts3/fts3_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:     'w',       'x',       'y',       'z',       'h',       't',",
          "201:     'w',       'y',       'a',       'a'|HIBIT, 'a'|HIBIT, 'a'|HIBIT,",
          "202:     'e',       'e'|HIBIT, 'e'|HIBIT, 'i',       'o',       'o'|HIBIT,",
          "204:   };",
          "206:   unsigned int key = (((unsigned int)c)<<3) | 0x00000007;",
          "",
          "[Removed Lines]",
          "203:     'o'|HIBIT, 'o'|HIBIT, 'u',       'u'|HIBIT, 'u'|HIBIT, 'y',",
          "",
          "[Added Lines]",
          "203:     'o'|HIBIT, 'o'|HIBIT, 'u',       'u'|HIBIT, 'u'|HIBIT, 'y',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:   unsigned int mask1 = 0x000361F8;",
          "232:   if( c<768 || c>817 ) return 0;",
          "233:   return (c < 768+32) ?",
          "236: }",
          "",
          "[Removed Lines]",
          "234:       (mask0 & (1 << (c-768))) :",
          "235:       (mask1 & (1 << (c-768-32)));",
          "",
          "[Added Lines]",
          "234:       (mask0 & ((unsigned int)1 << (c-768))) :",
          "235:       (mask1 & ((unsigned int)1 << (c-768-32)));",
          "",
          "---------------"
        ],
        "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl": [
          "File: ext/fts3/unicode/mkunicode.tcl -> ext/fts3/unicode/mkunicode.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   }",
          "64:   puts \"\"",
          "65:   puts \"  \\};\"",
          "66:   puts \"  char aChar\\[\\] = \\{\"",
          "67:   puts -nonewline \"    '\\\\0',      \"",
          "68:   set i 1",
          "69:   foreach c $aChar f $aFlag {",
          "70:     if { $f } {",
          "72:     } else {",
          "74:     }",
          "75:     if {$c == \"\"} { set str \"'\\\\0',      \" }",
          "",
          "[Removed Lines]",
          "71:       set str \"'$c'|0x80,  \"",
          "73:       set str \"'$c'|0x00,  \"",
          "",
          "[Added Lines]",
          "66:   puts \"#define HIBIT ((char)0x80)\"",
          "72:       set str \"'$c'|HIBIT, \"",
          "74:       set str \"'$c',       \"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:   puts \"  if( c<$iFirst || c>$iLast ) return 0;\"",
          "136:   puts \"  return (c < $iFirst+32) ?\"",
          "139:   puts \"\\}\"",
          "140: }",
          "",
          "[Removed Lines]",
          "137:   puts \"      (mask0 & (1 << (c-$iFirst))) :\"",
          "138:   puts \"      (mask1 & (1 << (c-$iFirst-32)));\"",
          "",
          "[Added Lines]",
          "138:   puts \"      (mask0 & ((unsigned int)1 << (c-$iFirst))) :\"",
          "139:   puts \"      (mask1 & ((unsigned int)1 << (c-$iFirst-32)));\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "699:     static u16 aFts5UnicodeMap[] = {$aMapArray};",
          "700:     static u16 aFts5UnicodeData[] = {$aDataArray};",
          "703:       int iRes = -1;",
          "704:       int iHi;",
          "705:       int iLo;",
          "",
          "[Removed Lines]",
          "702:     int sqlite3Fts5UnicodeCategory(int iCode) {",
          "",
          "[Added Lines]",
          "703:     int sqlite3Fts5UnicodeCategory(u32 iCode) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "782:           aArray[0] = 1;",
          "783:         }",
          "786:         if( aArray[c]==0 ){",
          "788:           return 1;",
          "",
          "[Removed Lines]",
          "785:         c = sqlite3Fts5UnicodeCategory(i);",
          "",
          "[Added Lines]",
          "786:         c = sqlite3Fts5UnicodeCategory((u32)i);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "788: int sqlite3Fts5UnicodeFold(int c, int bRemoveDiacritic);",
          "790: int sqlite3Fts5UnicodeCatParse(const char*, u8*);",
          "792: void sqlite3Fts5UnicodeAscii(u8*, u8*);",
          "",
          "[Removed Lines]",
          "791: int sqlite3Fts5UnicodeCategory(int iCode);",
          "",
          "[Added Lines]",
          "791: int sqlite3Fts5UnicodeCategory(u32 iCode);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2553:   sqlite3Fts5UnicodeCatParse(\"N*\", aArr);",
          "2554:   sqlite3Fts5UnicodeCatParse(\"Co\", aArr);",
          "2555:   iCode = sqlite3_value_int(apVal[0]);",
          "2557: }",
          "2559: static void fts5ExprFold(",
          "",
          "[Removed Lines]",
          "2556:   sqlite3_result_int(pCtx, aArr[sqlite3Fts5UnicodeCategory(iCode)]);",
          "",
          "[Added Lines]",
          "2556:   sqlite3_result_int(pCtx, aArr[sqlite3Fts5UnicodeCategory((u32)iCode)]);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3577:         for(iSeg=0; iSeg<pStruct->aLevel[iLvl].nSeg; iSeg++){",
          "3578:           int iId = pStruct->aLevel[iLvl].aSeg[iSeg].iSegid;",
          "3579:           if( iId<=FTS5_MAX_SEGMENT ){",
          "3581:           }",
          "3582:         }",
          "3583:       }",
          "3585:       for(i=0; aUsed[i]==0xFFFFFFFF; i++);",
          "3586:       mask = aUsed[i];",
          "3588:       iSegid += 1 + i*32;",
          "3590: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "3580:             aUsed[(iId-1) / 32] |= 1 << ((iId-1) % 32);",
          "3587:       for(iSegid=0; mask & (1 << iSegid); iSegid++);",
          "",
          "[Added Lines]",
          "3580:             aUsed[(iId-1) / 32] |= (u32)1 << ((iId-1) % 32);",
          "3587:       for(iSegid=0; mask & ((u32)1 << iSegid); iSegid++);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6282:   nSpace = n + FTS5_DATA_ZERO_PADDING;",
          "6283:   a = (u8*)sqlite3Fts5MallocZero(&rc, nSpace);",
          "6284:   if( a==0 ) goto decode_out;",
          "6288:   fts5DecodeRowid(iRowid, &iSegid, &bDlidx, &iHeight, &iPgno);",
          "",
          "[Removed Lines]",
          "6285:   memcpy(a, aBlob, n);",
          "",
          "[Added Lines]",
          "6285:   if( n>0 ) memcpy(a, aBlob, n);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_test_tok.c||ext/fts5/fts5_test_tok.c": [
          "File: ext/fts5/fts5_test_tok.c -> ext/fts5/fts5_test_tok.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:     if( pCsr->zInput==0 ){",
          "379:       rc = SQLITE_NOMEM;",
          "380:     }else{",
          "382:       pCsr->zInput[nByte] = 0;",
          "383:       rc = pTab->tok.xTokenize(",
          "384:           pTab->pTok, (void*)pCsr, 0, zByte, nByte, fts5tokCb",
          "",
          "[Removed Lines]",
          "381:       memcpy(pCsr->zInput, zByte, nByte);",
          "",
          "[Added Lines]",
          "381:       if( nByte>0 ) memcpy(pCsr->zInput, zByte, nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:         if( iCode<128 ){",
          "269:           p->aTokenChar[iCode] = (unsigned char)bTokenChars;",
          "270:         }else{",
          "272:           assert( (bToken==0 || bToken==1) );",
          "273:           assert( (bTokenChars==0 || bTokenChars==1) );",
          "274:           if( bToken!=bTokenChars && sqlite3Fts5UnicodeIsdiacritic(iCode)==0 ){",
          "",
          "[Removed Lines]",
          "271:           bToken = p->aCategory[sqlite3Fts5UnicodeCategory(iCode)];",
          "",
          "[Added Lines]",
          "271:           bToken = p->aCategory[sqlite3Fts5UnicodeCategory((u32)iCode)];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430: static int fts5UnicodeIsAlnum(Unicode61Tokenizer *p, int iCode){",
          "431:   return (",
          "433:     ^ fts5UnicodeIsException(p, iCode)",
          "434:   );",
          "435: }",
          "",
          "[Removed Lines]",
          "432:     p->aCategory[sqlite3Fts5UnicodeCategory(iCode)]",
          "",
          "[Added Lines]",
          "432:     p->aCategory[sqlite3Fts5UnicodeCategory((u32)iCode)]",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
          "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     'w',       'x',       'y',       'z',       'h',       't',",
          "70:     'w',       'y',       'a',       'a'|HIBIT, 'a'|HIBIT, 'a'|HIBIT,",
          "71:     'e',       'e'|HIBIT, 'e'|HIBIT, 'i',       'o',       'o'|HIBIT,",
          "73:   };",
          "75:   unsigned int key = (((unsigned int)c)<<3) | 0x00000007;",
          "",
          "[Removed Lines]",
          "72:     'o'|HIBIT, 'o'|HIBIT, 'u',       'u'|HIBIT, 'u'|HIBIT, 'y',",
          "",
          "[Added Lines]",
          "72:     'o'|HIBIT, 'o'|HIBIT, 'u',       'u'|HIBIT, 'u'|HIBIT, 'y',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:   unsigned int mask1 = 0x000361F8;",
          "101:   if( c<768 || c>817 ) return 0;",
          "102:   return (c < 768+32) ?",
          "105: }",
          "",
          "[Removed Lines]",
          "103:       (mask0 & (1 << (c-768))) :",
          "104:       (mask1 & (1 << (c-768-32)));",
          "",
          "[Added Lines]",
          "103:       (mask0 & ((unsigned int)1 << (c-768))) :",
          "104:       (mask1 & ((unsigned int)1 << (c-768-32)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "730:     34,    3074,  7692,  63,    63,",
          "731:   };",
          "734:   int iRes = -1;",
          "735:   int iHi;",
          "736:   int iLo;",
          "",
          "[Removed Lines]",
          "733: int sqlite3Fts5UnicodeCategory(int iCode) {",
          "",
          "[Added Lines]",
          "734: int sqlite3Fts5UnicodeCategory(u32 iCode) {",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5unicode3.test||ext/fts5/test/fts5unicode3.test": [
          "File: ext/fts5/test/fts5unicode3.test -> ext/fts5/test/fts5unicode3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: }",
          "23: proc fts3_unicode_path {file} {",
          "25: }",
          "27: source [fts3_unicode_path parseunicode.tcl]",
          "",
          "[Removed Lines]",
          "24:   file join [file dirname [info script]] .. .. fts3 unicode $file",
          "",
          "[Added Lines]",
          "24:   file join .. [file dirname [info script]] .. .. fts3 unicode $file",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb0d7fba07865ff557bfcdacfda7b625d099ac8b4dcbe0c08cd2d4b84a068bb9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1429eca9d44404ef4c051f4a47edbe0d1ef255a6",
      "candidate_info": {
        "commit_hash": "1429eca9d44404ef4c051f4a47edbe0d1ef255a6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1429eca9d44404ef4c051f4a47edbe0d1ef255a6",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtree6.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the RTree extension so that it correctly ignores constraints that it does not understand, even if they are against a dimension column.\n\nFossilOrigin-Name: ed8531e57596f0d5911a05a26d5ae61e1eccfaadee49219d7f6e212cac288238",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtree6.test||ext/rtree/rtree6.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1915:     ){",
          "1916:       u8 op;",
          "1917:       switch( p->op ){",
          "1927:       }",
          "1932:     }",
          "1933:   }",
          "",
          "[Removed Lines]",
          "1918:         case SQLITE_INDEX_CONSTRAINT_EQ: op = RTREE_EQ; break;",
          "1919:         case SQLITE_INDEX_CONSTRAINT_GT: op = RTREE_GT; break;",
          "1920:         case SQLITE_INDEX_CONSTRAINT_LE: op = RTREE_LE; break;",
          "1921:         case SQLITE_INDEX_CONSTRAINT_LT: op = RTREE_LT; break;",
          "1922:         case SQLITE_INDEX_CONSTRAINT_GE: op = RTREE_GE; break;",
          "1923:         default:",
          "1924:           assert( p->op==SQLITE_INDEX_CONSTRAINT_MATCH );",
          "1925:           op = RTREE_MATCH;",
          "1926:           break;",
          "1928:       zIdxStr[iIdx++] = op;",
          "1929:       zIdxStr[iIdx++] = (char)(p->iColumn - 1 + '0');",
          "1930:       pIdxInfo->aConstraintUsage[ii].argvIndex = (iIdx/2);",
          "1931:       pIdxInfo->aConstraintUsage[ii].omit = 1;",
          "",
          "[Added Lines]",
          "1918:         case SQLITE_INDEX_CONSTRAINT_EQ:    op = RTREE_EQ;    break;",
          "1919:         case SQLITE_INDEX_CONSTRAINT_GT:    op = RTREE_GT;    break;",
          "1920:         case SQLITE_INDEX_CONSTRAINT_LE:    op = RTREE_LE;    break;",
          "1921:         case SQLITE_INDEX_CONSTRAINT_LT:    op = RTREE_LT;    break;",
          "1922:         case SQLITE_INDEX_CONSTRAINT_GE:    op = RTREE_GE;    break;",
          "1923:         case SQLITE_INDEX_CONSTRAINT_MATCH: op = RTREE_MATCH; break;",
          "1924:         default:                            op = 0;           break;",
          "1925:       }",
          "1926:       if( op ){",
          "1927:         zIdxStr[iIdx++] = op;",
          "1928:         zIdxStr[iIdx++] = (char)(p->iColumn - 1 + '0');",
          "1929:         pIdxInfo->aConstraintUsage[ii].argvIndex = (iIdx/2);",
          "1930:         pIdxInfo->aConstraintUsage[ii].omit = 1;",
          "",
          "---------------"
        ],
        "ext/rtree/rtree6.test||ext/rtree/rtree6.test": [
          "File: ext/rtree/rtree6.test -> ext/rtree/rtree6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: do_test rtree6-1.2 {",
          "59:   rtree_strategy {SELECT * FROM t1 WHERE x1>10}",
          "60: } {E0}",
          "62: do_test rtree6-1.3 {",
          "63:   rtree_strategy {SELECT * FROM t1 WHERE x1<10}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: do_test rtree6-1.2.1 {",
          "62:   rtree_strategy {SELECT * FROM t1 WHERE x1>10 AND x2 LIKE '%x%'}",
          "63: } {E0}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 99bce4358beb5dbaba47048ee2eec5c376dcd86e5b1462238a37ea4c5f3d77db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7464f578eda14dbf56d4e37d72aae2af03a5930c",
      "candidate_info": {
        "commit_hash": "7464f578eda14dbf56d4e37d72aae2af03a5930c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7464f578eda14dbf56d4e37d72aae2af03a5930c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vacuum.c",
          "test/vacuum-into.test"
        ],
        "message": "Do not allow VACUUM INTO into a file that already exists.\n\nFossilOrigin-Name: 92f70e0fa3c9de7fde046f11cc0a7c2800511bb5ace8e68c845133931607616e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vacuum.c||src/vacuum.c",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 93d92a0a5d21a1856316c0205ecaa253691b6e5349b552d43027005676d14820",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:   pDb = &db->aDb[nDb];",
          "201:   assert( strcmp(pDb->zDbSName,\"vacuum_db\")==0 );",
          "202:   pTemp = pDb->pBt;",
          "203:   nRes = sqlite3BtreeGetOptimalReserve(pMain);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:   if( zOut!=0 ){",
          "204:     sqlite3_file *id = sqlite3PagerFile(sqlite3BtreePager(pTemp));",
          "205:     i64 sz = 0;",
          "206:     if( id->pMethods!=0 && (sqlite3OsFileSize(id, &sz)!=SQLITE_OK || sz>0) ){",
          "207:       rc = SQLITE_ERROR;",
          "208:       sqlite3SetString(pzErrMsg, db, \"output file already exists\");",
          "209:       goto end_of_vacuum;",
          "210:     }",
          "211:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "374:     pDb->pSchema = 0;",
          "375:   }",
          "383:   return rc;",
          "384: }",
          "",
          "[Removed Lines]",
          "377:   if( zOut==0 ){",
          "380:     sqlite3ResetAllSchemasOfConnection(db);",
          "381:   }",
          "",
          "[Added Lines]",
          "388:   sqlite3ResetAllSchemasOfConnection(db);",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018-12-07",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the VACUUM INTO statement.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "18: # If the VACUUM statement is disabled in the current build, skip all",
          "19: # the tests in this file.",
          "20: #",
          "21: ifcapable {!vacuum} {",
          "22:   omit_test vacuum.test {Compiled with SQLITE_OMIT_VACUUM}",
          "23:   finish_test",
          "24:   return",
          "25: }",
          "27: forcedelete out.db",
          "28: do_execsql_test vacuum-into-100 {",
          "29:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "30:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<100)",
          "31:   INSERT INTO t1(a,b) SELECT x, randomblob(600) FROM c;",
          "32:   CREATE INDEX t1b ON t1(b);",
          "33:   DELETE FROM t1 WHERE a%2;",
          "34:   SELECT count(*), sum(a), sum(length(b)) FROM t1;",
          "35: } {50 2550 30000}",
          "36: do_execsql_test vacuum-into-110 {",
          "37:   VACUUM main INTO 'out.db';",
          "38: } {}",
          "39: sqlite3 db2 out.db",
          "40: do_test vacuum-into-120 {",
          "41:   db2 eval {SELECT count(*), sum(a), sum(length(b)) FROM t1}",
          "42: } {50 2550 30000}",
          "43: do_catchsql_test vacuum-into-130 {",
          "44:   VACUUM INTO 'out.db';",
          "45: } {1 {output file already exists}}",
          "46: forcedelete out2.db",
          "47: do_catchsql_test vacuum-into-140 {",
          "48:   VACUUM INTO 'out2.db';",
          "49: } {0 {}}",
          "50: do_catchsql_test vacuum-into-150 {",
          "51:   VACUUM INTO 'out2.db';",
          "52: } {1 {output file already exists}}",
          "54: do_catchsql_test vacuum-into-200 {",
          "55:   VACUUM main INTO ':memory:';",
          "56: } {0 {}}",
          "58: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}