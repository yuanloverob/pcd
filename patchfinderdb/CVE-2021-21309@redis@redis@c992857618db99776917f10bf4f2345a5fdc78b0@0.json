{
  "cve_id": "CVE-2021-21309",
  "cve_desc": "Redis is an open-source, in-memory database that persists on disk. In affected versions of Redis an integer overflow bug in 32-bit Redis version 4.0 or newer could be exploited to corrupt the heap and potentially result with remote code execution. Redis 4.0 or newer uses a configurable limit for the maximum supported bulk input size. By default, it is 512MB which is a safe value for all platforms. If the limit is significantly increased, receiving a large request from a client may trigger several integer overflow scenarios, which would result with buffer overflow and heap corruption. We believe this could in certain conditions be exploited for remote code execution. By default, authenticated Redis users have access to all configuration parameters and can therefore use the \u201cCONFIG SET proto-max-bulk-len\u201d to change the safe default, making the system vulnerable. **This problem only affects 32-bit Redis (on a 32-bit system, or as a 32-bit executable running on a 64-bit system).** The problem is fixed in version 6.2, and the fix is back ported to 6.0.11 and 5.0.11. Make sure you use one of these versions if you are running 32-bit Redis. An additional workaround to mitigate the problem without patching the redis-server executable is to prevent clients from directly executing `CONFIG SET`: Using Redis 6.0 or newer, ACL configuration can be used to block the command. Using older versions, the `rename-command` configuration directive can be used to rename the command to a random string unknown to users, rendering it inaccessible. Please note that this workaround may have an additional impact on users or operational systems that expect `CONFIG SET` to behave in certain ways.",
  "repo": "redis/redis",
  "patch_hash": "c992857618db99776917f10bf4f2345a5fdc78b0",
  "patch_info": {
    "commit_hash": "c992857618db99776917f10bf4f2345a5fdc78b0",
    "repo": "redis/redis",
    "commit_url": "https://github.com/redis/redis/commit/c992857618db99776917f10bf4f2345a5fdc78b0",
    "files": [
      "src/config.c",
      "src/sds.c",
      "src/zmalloc.c"
    ],
    "message": "Fix integer overflow (CVE-2021-21309). (#8522)\n\nOn 32-bit systems, setting the proto-max-bulk-len config parameter to a high value may result with integer overflow and a subsequent heap overflow when parsing an input bulk (CVE-2021-21309).\n\nThis fix has two parts:\n\nSet a reasonable limit to the config parameter.\nAdd additional checks to prevent the problem in other potential but unknown code paths.\n\n(cherry picked from commit d32f2e9999ce003bad0bd2c3bca29f64dcce4433)",
    "before_after_code_files": [
      "src/config.c||src/config.c",
      "src/sds.c||src/sds.c",
      "src/zmalloc.c||src/zmalloc.c"
    ]
  },
  "patch_diff": {
    "src/config.c||src/config.c": [
      "File: src/config.c -> src/config.c"
    ],
    "src/sds.c||src/sds.c": [
      "File: src/sds.c -> src/sds.c"
    ],
    "src/zmalloc.c||src/zmalloc.c": [
      "File: src/zmalloc.c -> src/zmalloc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "56: #endif",
      "57: #endif",
      "60: #if defined(USE_TCMALLOC)",
      "61: #define malloc(size) tc_malloc(size)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59: #if PREFIX_SIZE > 0",
      "60: #define ASSERT_NO_SIZE_OVERFLOW(sz) assert((sz) + PREFIX_SIZE > (sz))",
      "61: #else",
      "62: #define ASSERT_NO_SIZE_OVERFLOW(sz)",
      "63: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "96: static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;",
      "98: void *zmalloc(size_t size) {",
      "99:     void *ptr = malloc(size+PREFIX_SIZE);",
      "101:     if (!ptr) zmalloc_oom_handler(size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     ASSERT_NO_SIZE_OVERFLOW(size);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "115: #ifdef HAVE_DEFRAG",
      "116: void *zmalloc_no_tcache(size_t size) {",
      "117:     void *ptr = mallocx(size+PREFIX_SIZE, MALLOCX_TCACHE_NONE);",
      "118:     if (!ptr) zmalloc_oom_handler(size);",
      "119:     update_zmalloc_stat_alloc(zmalloc_size(ptr));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "124:     ASSERT_NO_SIZE_OVERFLOW(size);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "128: #endif",
      "130: void *zcalloc(size_t size) {",
      "131:     void *ptr = calloc(1, size+PREFIX_SIZE);",
      "133:     if (!ptr) zmalloc_oom_handler(size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "139:     ASSERT_NO_SIZE_OVERFLOW(size);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "142: }",
      "144: void *zrealloc(void *ptr, size_t size) {",
      "145: #ifndef HAVE_MALLOC_SIZE",
      "146:     void *realptr;",
      "147: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "154:     ASSERT_NO_SIZE_OVERFLOW(size);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d32f2e9999ce003bad0bd2c3bca29f64dcce4433",
      "candidate_info": {
        "commit_hash": "d32f2e9999ce003bad0bd2c3bca29f64dcce4433",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/d32f2e9999ce003bad0bd2c3bca29f64dcce4433",
        "files": [
          "src/config.c",
          "src/sds.c",
          "src/zmalloc.c"
        ],
        "message": "Fix integer overflow (CVE-2021-21309). (#8522)\n\nOn 32-bit systems, setting the proto-max-bulk-len config parameter to a high value may result with integer overflow and a subsequent heap overflow when parsing an input bulk (CVE-2021-21309).\n\nThis fix has two parts:\n\nSet a reasonable limit to the config parameter.\nAdd additional checks to prevent the problem in other potential but unknown code paths.",
        "before_after_code_files": [
          "src/config.c||src/config.c",
          "src/sds.c||src/sds.c",
          "src/zmalloc.c||src/zmalloc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/config.c||src/config.c",
            "src/sds.c||src/sds.c",
            "src/zmalloc.c||src/zmalloc.c"
          ],
          "candidate": [
            "src/config.c||src/config.c",
            "src/sds.c||src/sds.c",
            "src/zmalloc.c||src/zmalloc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c"
        ],
        "src/sds.c||src/sds.c": [
          "File: src/sds.c -> src/sds.c"
        ],
        "src/zmalloc.c||src/zmalloc.c": [
          "File: src/zmalloc.c -> src/zmalloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: #endif",
          "58: #endif",
          "61: #if defined(USE_TCMALLOC)",
          "62: #define malloc(size) tc_malloc(size)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: #if PREFIX_SIZE > 0",
          "61: #define ASSERT_NO_SIZE_OVERFLOW(sz) assert((sz) + PREFIX_SIZE > (sz))",
          "62: #else",
          "63: #define ASSERT_NO_SIZE_OVERFLOW(sz)",
          "64: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: void *ztrymalloc_usable(size_t size, size_t *usable) {",
          "92:     void *ptr = malloc(size+PREFIX_SIZE);",
          "94:     if (!ptr) return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:     ASSERT_NO_SIZE_OVERFLOW(size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132: #ifdef HAVE_DEFRAG",
          "133: void *zmalloc_no_tcache(size_t size) {",
          "134:     void *ptr = mallocx(size+PREFIX_SIZE, MALLOCX_TCACHE_NONE);",
          "135:     if (!ptr) zmalloc_oom_handler(size);",
          "136:     update_zmalloc_stat_alloc(zmalloc_size(ptr));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     ASSERT_NO_SIZE_OVERFLOW(size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149: void *ztrycalloc_usable(size_t size, size_t *usable) {",
          "150:     void *ptr = calloc(1, size+PREFIX_SIZE);",
          "151:     if (ptr == NULL) return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:     ASSERT_NO_SIZE_OVERFLOW(size);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "189: void *ztryrealloc_usable(void *ptr, size_t size, size_t *usable) {",
          "190: #ifndef HAVE_MALLOC_SIZE",
          "191:     void *realptr;",
          "192: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:     ASSERT_NO_SIZE_OVERFLOW(size);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48f04a82a0ac542341fb644a4cfbebadd5c59a33",
      "candidate_info": {
        "commit_hash": "48f04a82a0ac542341fb644a4cfbebadd5c59a33",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/48f04a82a0ac542341fb644a4cfbebadd5c59a33",
        "files": [
          "src/config.c",
          "src/sds.c",
          "src/zmalloc.c"
        ],
        "message": "Fix integer overflow (CVE-2021-21309). (#8522)\n\nOn 32-bit systems, setting the proto-max-bulk-len config parameter to a high value may result with integer overflow and a subsequent heap overflow when parsing an input bulk (CVE-2021-21309).\n\nThis fix has two parts:\n\nSet a reasonable limit to the config parameter.\nAdd additional checks to prevent the problem in other potential but unknown code paths.\n\n(cherry picked from commit d32f2e9999ce003bad0bd2c3bca29f64dcce4433)\n\nFix MSVR reported issue.",
        "before_after_code_files": [
          "src/config.c||src/config.c",
          "src/sds.c||src/sds.c",
          "src/zmalloc.c||src/zmalloc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/config.c||src/config.c",
            "src/sds.c||src/sds.c",
            "src/zmalloc.c||src/zmalloc.c"
          ],
          "candidate": [
            "src/config.c||src/config.c",
            "src/sds.c||src/sds.c",
            "src/zmalloc.c||src/zmalloc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "881:         if (max != LLONG_MAX && ll > max) goto badfmt; \\",
          "882:         _var = ll;",
          "885:     } else if (!strcasecmp(c->argv[2]->ptr,_name)) { \\",
          "886:         ll = memtoll(o->ptr,&err); \\",
          "888:         _var = ll;",
          "890: #define config_set_enum_field(_name,_var,_enumvar) \\",
          "",
          "[Removed Lines]",
          "884: #define config_set_memory_field(_name,_var) \\",
          "887:         if (err || ll < 0) goto badfmt; \\",
          "",
          "[Added Lines]",
          "884: #define config_set_memory_field(_name,_var,min,max) \\",
          "887:         if (err || ll < (long long) (min) || ll > (long long) (max)) goto badfmt; \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1150:     } config_set_numerical_field(",
          "1151:       \"active-defrag-threshold-upper\",server.active_defrag_threshold_upper,0,1000) {",
          "1152:     } config_set_memory_field(",
          "1154:     } config_set_numerical_field(",
          "1155:       \"active-defrag-cycle-min\",server.active_defrag_cycle_min,1,99) {",
          "1156:     } config_set_numerical_field(",
          "",
          "[Removed Lines]",
          "1153:       \"active-defrag-ignore-bytes\",server.active_defrag_ignore_bytes) {",
          "",
          "[Added Lines]",
          "1153:       \"active-defrag-ignore-bytes\",server.active_defrag_ignore_bytes,0,LONG_MAX) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1250:         if (server.maxmemory) {",
          "1251:             if (server.maxmemory < zmalloc_used_memory()) {",
          "1252:                 serverLog(LL_WARNING,\"WARNING: the new maxmemory value set via CONFIG SET is smaller than the current memory usage. This will result in key eviction and/or the inability to accept new write commands depending on the maxmemory-policy.\");",
          "",
          "[Removed Lines]",
          "1249:     } config_set_memory_field(\"maxmemory\",server.maxmemory) {",
          "",
          "[Added Lines]",
          "1249:     } config_set_memory_field(\"maxmemory\",server.maxmemory,0,LONG_MAX) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1254:             freeMemoryIfNeededAndSafe();",
          "1255:         }",
          "1256:     } config_set_memory_field(",
          "1258:     } config_set_memory_field(",
          "1261:         resizeReplicationBacklog(ll);",
          "1263:         server.aof_rewrite_min_size = ll;",
          "",
          "[Removed Lines]",
          "1257:       \"proto-max-bulk-len\",server.proto_max_bulk_len) {",
          "1259:       \"client-query-buffer-limit\",server.client_max_querybuf_len) {",
          "1260:     } config_set_memory_field(\"repl-backlog-size\",ll) {",
          "1262:     } config_set_memory_field(\"auto-aof-rewrite-min-size\",ll) {",
          "",
          "[Added Lines]",
          "1257:       \"proto-max-bulk-len\",server.proto_max_bulk_len,1024*1024,LONG_MAX/2) {",
          "1259:       \"client-query-buffer-limit\",server.client_max_querybuf_len,0,LONG_MAX) {",
          "1260:     } config_set_memory_field(\"repl-backlog-size\",ll,0,LONG_MAX) {",
          "1262:     } config_set_memory_field(\"auto-aof-rewrite-min-size\",ll,0,LONG_MAX) {",
          "",
          "---------------"
        ],
        "src/sds.c||src/sds.c": [
          "File: src/sds.c -> src/sds.c"
        ],
        "src/zmalloc.c||src/zmalloc.c": [
          "File: src/zmalloc.c -> src/zmalloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #endif",
          "57: #endif",
          "60: #if defined(USE_TCMALLOC)",
          "61: #define malloc(size) tc_malloc(size)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: #if PREFIX_SIZE > 0",
          "60: #define ASSERT_NO_SIZE_OVERFLOW(sz) assert((sz) + PREFIX_SIZE > (sz))",
          "61: #else",
          "62: #define ASSERT_NO_SIZE_OVERFLOW(sz)",
          "63: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;",
          "98: void *zmalloc(size_t size) {",
          "99:     void *ptr = malloc(size+PREFIX_SIZE);",
          "101:     if (!ptr) zmalloc_oom_handler(size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     ASSERT_NO_SIZE_OVERFLOW(size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115: #ifdef HAVE_DEFRAG",
          "116: void *zmalloc_no_tcache(size_t size) {",
          "117:     void *ptr = mallocx(size+PREFIX_SIZE, MALLOCX_TCACHE_NONE);",
          "118:     if (!ptr) zmalloc_oom_handler(size);",
          "119:     update_zmalloc_stat_alloc(zmalloc_size(ptr));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     ASSERT_NO_SIZE_OVERFLOW(size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128: #endif",
          "130: void *zcalloc(size_t size) {",
          "131:     void *ptr = calloc(1, size+PREFIX_SIZE);",
          "133:     if (!ptr) zmalloc_oom_handler(size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:     ASSERT_NO_SIZE_OVERFLOW(size);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "142: }",
          "144: void *zrealloc(void *ptr, size_t size) {",
          "145: #ifndef HAVE_MALLOC_SIZE",
          "146:     void *realptr;",
          "147: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:     ASSERT_NO_SIZE_OVERFLOW(size);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dcf409f8e72dcd6bbf2f31d2ecc8f6f797c303c2",
      "candidate_info": {
        "commit_hash": "dcf409f8e72dcd6bbf2f31d2ecc8f6f797c303c2",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/dcf409f8e72dcd6bbf2f31d2ecc8f6f797c303c2",
        "files": [
          "src/server.c"
        ],
        "message": "Avoid assertions when testing arm64 cow bug. (#8405)\n\nAt least in one case the arm64 cow kernel bug test triggers an assert, which is a problem because it cannot be ignored like cases where the bug is found.\n\nOn older systems (Linux <4.5) madvise fails because MADV_FREE is not supported. We treat these failures as an indication the system is not affected.\n\nFixes #8351, #8406\n\n(cherry picked from commit 3a5049042ac06b6ed5e526f331d5378bf7c7b7ed)",
        "before_after_code_files": [
          "src/server.c||src/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/redis/redis/pull/8527"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/server.c||src/server.c": [
          "File: src/server.c -> src/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4809:     FILE *f;",
          "4811:     f = fopen(\"/proc/self/smaps\", \"r\");",
          "4814:     while (1) {",
          "4815:         if (!fgets(buf, sizeof(buf), f))",
          "",
          "[Removed Lines]",
          "4812:     serverAssert(f);",
          "",
          "[Added Lines]",
          "4812:     if (!f) return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4820:             in_mapping = from <= addr && addr < to;",
          "4822:         if (in_mapping && !memcmp(buf, \"Shared_Dirty:\", 13)) {",
          "4825:             break;",
          "4826:         }",
          "4827:     }",
          "",
          "[Removed Lines]",
          "4823:             ret = sscanf(buf, \"%*s %d\", &val);",
          "4824:             serverAssert(ret == 1);",
          "",
          "[Added Lines]",
          "4823:             sscanf(buf, \"%*s %d\", &val);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4839: int linuxMadvFreeForkBugCheck(void) {",
          "4841:     pid_t pid;",
          "4846:     p = mmap(NULL, map_size, PROT_READ, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);",
          "",
          "[Removed Lines]",
          "4840:     int ret, pipefd[2];",
          "4842:     char *p, *q, bug_found = 0;",
          "4843:     const long map_size = 3 * 4096;",
          "4847:     serverAssert(p != MAP_FAILED);",
          "4849:     q = p + 4096;",
          "4853:     ret = mprotect(q, 4096, PROT_READ | PROT_WRITE);",
          "4854:     serverAssert(!ret);",
          "",
          "[Added Lines]",
          "4841:     int ret, pipefd[2] = { -1, -1 };",
          "4843:     char *p = NULL, *q;",
          "4844:     int bug_found = 0;",
          "4845:     long page_size = sysconf(_SC_PAGESIZE);",
          "4846:     long map_size = 3 * page_size;",
          "4850:     if (p == MAP_FAILED) {",
          "4851:         serverLog(LL_WARNING, \"Failed to mmap(): %s\", strerror(errno));",
          "4852:         return -1;",
          "4853:     }",
          "4855:     q = p + page_size;",
          "4859:     ret = mprotect(q, page_size, PROT_READ | PROT_WRITE);",
          "4860:     if (ret < 0) {",
          "4861:         serverLog(LL_WARNING, \"Failed to mprotect(): %s\", strerror(errno));",
          "4862:         bug_found = -1;",
          "4863:         goto exit;",
          "4864:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4860: #ifndef MADV_FREE",
          "4861: #define MADV_FREE 8",
          "4862: #endif",
          "",
          "[Removed Lines]",
          "4863:     ret = madvise(q, 4096, MADV_FREE);",
          "4864:     serverAssert(!ret);",
          "",
          "[Added Lines]",
          "4873:     ret = madvise(q, page_size, MADV_FREE);",
          "4874:     if (ret < 0) {",
          "4877:         if (errno == EINVAL) goto exit;",
          "4879:         serverLog(LL_WARNING, \"Failed to madvise(): %s\", strerror(errno));",
          "4880:         bug_found = -1;",
          "4881:         goto exit;",
          "4882:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4871:     ret = pipe(pipefd);",
          "4875:     pid = fork();",
          "4881:             bug_found = 1;",
          "4886:         exit(0);",
          "4887:     } else {",
          "4894:     }",
          "4904:     return bug_found;",
          "4905: }",
          "",
          "[Removed Lines]",
          "4872:     serverAssert(!ret);",
          "4876:     serverAssert(pid >= 0);",
          "4877:     if (!pid) {",
          "4880:         if (!smapsGetSharedDirty((unsigned long)q))",
          "4883:         ret = write(pipefd[1], &bug_found, 1);",
          "4884:         serverAssert(ret == 1);",
          "4889:         ret = read(pipefd[0], &bug_found, 1);",
          "4890:         serverAssert(ret == 1);",
          "4893:         serverAssert(waitpid(pid, NULL, 0) == pid);",
          "4897:     ret = close(pipefd[0]);",
          "4898:     serverAssert(!ret);",
          "4899:     ret = close(pipefd[1]);",
          "4900:     serverAssert(!ret);",
          "4901:     ret = munmap(p, map_size);",
          "4902:     serverAssert(!ret);",
          "",
          "[Added Lines]",
          "4890:     if (ret < 0) {",
          "4891:         serverLog(LL_WARNING, \"Failed to create pipe: %s\", strerror(errno));",
          "4892:         bug_found = -1;",
          "4893:         goto exit;",
          "4894:     }",
          "4898:     if (pid < 0) {",
          "4899:         serverLog(LL_WARNING, \"Failed to fork: %s\", strerror(errno));",
          "4900:         bug_found = -1;",
          "4901:         goto exit;",
          "4902:     } else if (!pid) {",
          "4905:         ret = smapsGetSharedDirty((unsigned long) q);",
          "4906:         if (!ret)",
          "4909:             bug_found = -1;",
          "4911:         if (write(pipefd[1], &bug_found, sizeof(bug_found)) < 0)",
          "4912:             serverLog(LL_WARNING, \"Failed to write to parent: %s\", strerror(errno));",
          "4916:         ret = read(pipefd[0], &bug_found, sizeof(bug_found));",
          "4917:         if (ret < 0) {",
          "4918:             serverLog(LL_WARNING, \"Failed to read from child: %s\", strerror(errno));",
          "4919:             bug_found = -1;",
          "4920:         }",
          "4923:         waitpid(pid, NULL, 0);",
          "4926: exit:",
          "4928:     if (pipefd[0] != -1) close(pipefd[0]);",
          "4929:     if (pipefd[1] != -1) close(pipefd[1]);",
          "4930:     if (p != NULL) munmap(p, map_size);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5451:     #ifdef __linux__",
          "5452:         linuxMemoryWarnings();",
          "5453:     #if defined (__arm64__)",
          "5456:             if (!checkIgnoreWarning(\"ARM64-COW-BUG\")) {",
          "5458:                 exit(1);",
          "5459:             }",
          "5460:         }",
          "",
          "[Removed Lines]",
          "5454:         if (linuxMadvFreeForkBugCheck()) {",
          "5455:             serverLog(LL_WARNING,\"WARNING Your kernel has a bug that could lead to data corruption during background save. Please upgrade to the latest stable kernel.\");",
          "5457:                 serverLog(LL_WARNING,\"Redis will now exit to prevent data corruption. Note that it is possible to suppress this warning by setting the following config: ignore-warnings ARM64-COW-BUG\");",
          "",
          "[Added Lines]",
          "5482:         int ret;",
          "5483:         if ((ret = linuxMadvFreeForkBugCheck())) {",
          "5484:             if (ret == 1)",
          "5485:                 serverLog(LL_WARNING,\"WARNING Your kernel has a bug that could lead to data corruption during background save. \"",
          "5486:                                      \"Please upgrade to the latest stable kernel.\");",
          "5487:             else",
          "5488:                 serverLog(LL_WARNING, \"Failed to test the kernel for a bug that could lead to data corruption during background save. \"",
          "5489:                                       \"Your system could be affected, please report this error.\");",
          "5491:                 serverLog(LL_WARNING,\"Redis will now exit to prevent data corruption. \"",
          "5492:                                      \"Note that it is possible to suppress this warning by setting the following config: ignore-warnings ARM64-COW-BUG\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1237cce65daa290d31846c6952c1c1b376e79fbd",
      "candidate_info": {
        "commit_hash": "1237cce65daa290d31846c6952c1c1b376e79fbd",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/1237cce65daa290d31846c6952c1c1b376e79fbd",
        "files": [
          "src/config.c",
          "src/server.c",
          "src/server.h"
        ],
        "message": "CONFIG REWRITE should honor umask settings. (#8371)\n\nFixes a regression introduced due to a new (safer) way of rewriting configuration files. In the past the file was simply overwritten (same inode), but now Redis creates a new temporary file and later renames it over the old one.\n\nThe temp file typically gets created with 0600 permissions so we later fchmod it to fix that. Unlike open with O_CREAT, fchmod doesn't consider umask so we have to do that explicitly.\n\nFixes #8369\n\n(cherry picked from commit b548ffabbecca073e241882c22192f682a086242)",
        "before_after_code_files": [
          "src/config.c||src/config.c",
          "src/server.c||src/server.c",
          "src/server.h||src/server.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/redis/redis/pull/8527"
        ],
        "olp_code_files": {
          "patch": [
            "src/config.c||src/config.c"
          ],
          "candidate": [
            "src/config.c||src/config.c"
          ]
        }
      },
      "candidate_diff": {
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1626:     if (fsync(fd))",
          "1627:         serverLog(LL_WARNING, \"Could not sync tmp config file to disk (%s)\", strerror(errno));",
          "1629:         serverLog(LL_WARNING, \"Could not chmod config file (%s)\", strerror(errno));",
          "1630:     else if (rename(tmp_conffile, configfile) == -1)",
          "1631:         serverLog(LL_WARNING, \"Could not rename tmp config file (%s)\", strerror(errno));",
          "",
          "[Removed Lines]",
          "1628:     else if (fchmod(fd, 0644) == -1)",
          "",
          "[Added Lines]",
          "1628:     else if (fchmod(fd, 0644 & ~server.umask) == -1)",
          "",
          "---------------"
        ],
        "src/server.c||src/server.c": [
          "File: src/server.c -> src/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5314:     gettimeofday(&tv,NULL);",
          "5315:     crc64_init();",
          "5317:     uint8_t hashseed[16];",
          "5318:     getRandomBytes(hashseed,sizeof(hashseed));",
          "5319:     dictSetHashFunctionSeed(hashseed);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5321:     umask(server.umask = umask(0777));",
          "",
          "---------------"
        ],
        "src/server.h||src/server.h": [
          "File: src/server.h -> src/server.h"
        ]
      }
    },
    {
      "candidate_hash": "840b393c067e5dc0d015f36619236fb945a46c39",
      "candidate_info": {
        "commit_hash": "840b393c067e5dc0d015f36619236fb945a46c39",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/840b393c067e5dc0d015f36619236fb945a46c39",
        "files": [
          "src/redis-benchmark.c"
        ],
        "message": "redis-benchmark: Fix broken protocol when used with -a or --dbnum (#8486)\n\nFix the pointers to the slot hash tags in the case of prefixed commands usage\ni.e. AUTH / SELECT\n\nIt adjusts the pointers to the slot hash tags in the case of prefixed commands\nusage as soon as we get the 1st reply (same like we already did for the random\nstrings within the command )\n\n(cherry picked from commit efccd6353bacec9addc7278292fd8c3108d116e4)",
        "before_after_code_files": [
          "src/redis-benchmark.c||src/redis-benchmark.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/redis/redis/pull/8527"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/redis-benchmark.c||src/redis-benchmark.c": [
          "File: src/redis-benchmark.c -> src/redis-benchmark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "528:                         for (j = 0; j < c->randlen; j++)",
          "529:                             c->randptr[j] -= c->prefixlen;",
          "530:                         c->prefixlen = 0;",
          "531:                     }",
          "532:                     continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531:                         for (j = 0; j < c->staglen; j++)",
          "532:                             c->stagptr[j] -= c->prefixlen;",
          "",
          "---------------"
        ]
      }
    }
  ]
}