{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1e9e40d8b027faca62fe51954f022efdd9bfe62a",
      "candidate_info": {
        "commit_hash": "1e9e40d8b027faca62fe51954f022efdd9bfe62a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1e9e40d8b027faca62fe51954f022efdd9bfe62a",
        "files": [
          "crypto/evp/evp_lib.c"
        ],
        "message": "Fix EVP_MD_meth_get_flags\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2134)\n(cherry picked from commit 8bfa99f04f9763a6a8d72a6d5c1f0a962f8a084b)",
        "before_after_code_files": [
          "crypto/evp/evp_lib.c||crypto/evp/evp_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/evp_lib.c||crypto/evp/evp_lib.c": [
          "File: crypto/evp/evp_lib.c -> crypto/evp/evp_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "404: }",
          "405: unsigned long EVP_MD_meth_get_flags(const EVP_MD *md)",
          "406: {",
          "408: }",
          "409: int (*EVP_MD_meth_get_init(const EVP_MD *md))(EVP_MD_CTX *ctx)",
          "410: {",
          "",
          "[Removed Lines]",
          "407:     return md->block_size;",
          "",
          "[Added Lines]",
          "407:     return md->flags;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9fa506681c842bf9b27ddf4ea8579c4695be3bfa",
      "candidate_info": {
        "commit_hash": "9fa506681c842bf9b27ddf4ea8579c4695be3bfa",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9fa506681c842bf9b27ddf4ea8579c4695be3bfa",
        "files": [
          "ssl/d1_lib.c"
        ],
        "message": "Ensure we are in accept state in DTLSv1_listen\n\nCalling SSL_set_accept_state() after DTLSv1_listen() clears the state, so\nSSL_accept() no longer works. In 1.0.2 calling DTLSv1_listen() would set\nthe accept state automatically. We should still do that.\n\nFixes #1989\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(cherry picked from commit 5bdcd362d24cbbcf18c5eb9df655fe9f7bcf5850)",
        "before_after_code_files": [
          "ssl/d1_lib.c||ssl/d1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/d1_lib.c||ssl/d1_lib.c": [
          "File: ssl/d1_lib.c -> ssl/d1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "441:     BIO_ADDR *tmpclient = NULL;",
          "442:     PACKET pkt, msgpkt, msgpayload, session, cookiepkt;",
          "445:     if (!SSL_clear(s))",
          "446:         return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444:     if (s->handshake_func == NULL) {",
          "446:         SSL_set_accept_state(s);",
          "447:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0feb2207e7ff4ecbf9edea1521e44e0b809ad69d",
      "candidate_info": {
        "commit_hash": "0feb2207e7ff4ecbf9edea1521e44e0b809ad69d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0feb2207e7ff4ecbf9edea1521e44e0b809ad69d",
        "files": [
          "crypto/bn/bn_lcl.h"
        ],
        "message": "bn: catch negative zero as an error\n\nChange-Id: I5ab72ad0aae9069b47d5b7b7b9e25bd1b7afa251\nSigned-off-by: Geoff Thorpe <geoff@openssl.org>\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1672)\n(cherry picked from commit 2fc9b36a96ccd77cbd9ecfb3a3cdaa7ad2ca305e)",
        "before_after_code_files": [
          "crypto/bn/bn_lcl.h||crypto/bn/bn_lcl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_lcl.h||crypto/bn/bn_lcl.h": [
          "File: crypto/bn/bn_lcl.h -> crypto/bn/bn_lcl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:         do { \\",
          "178:                 const BIGNUM *_bnum2 = (a); \\",
          "179:                 if (_bnum2 != NULL) { \\",
          "182:                         bn_pollute(_bnum2); \\",
          "183:                 } \\",
          "184:         } while(0)",
          "",
          "[Removed Lines]",
          "180:                         OPENSSL_assert((_bnum2->top == 0) || \\",
          "181:                                 (_bnum2->d[_bnum2->top - 1] != 0)); \\",
          "",
          "[Added Lines]",
          "180:                         OPENSSL_assert(((_bnum2->top == 0) && !_bnum2->neg) || \\",
          "181:                                 (_bnum2->top && (_bnum2->d[_bnum2->top - 1] != 0))); \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0d0e783dffcd7b659b0962bf68cde24bfa733bc",
      "candidate_info": {
        "commit_hash": "f0d0e783dffcd7b659b0962bf68cde24bfa733bc",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f0d0e783dffcd7b659b0962bf68cde24bfa733bc",
        "files": [
          "crypto/include/internal/cryptlib.h"
        ],
        "message": "Remove an useless definition.\n\nAPP_INFO is currently a field of MEM struct.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1583)\n(cherry picked from commit 76dc356384b3d8f93f04be05f320a878e4bced52)",
        "before_after_code_files": [
          "crypto/include/internal/cryptlib.h||crypto/include/internal/cryptlib.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/include/internal/cryptlib.h||crypto/include/internal/cryptlib.h": [
          "File: crypto/include/internal/cryptlib.h -> crypto/include/internal/cryptlib.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: DEFINE_STACK_OF(EX_CALLBACK)",
          "37: typedef struct app_mem_info_st APP_INFO;",
          "39: typedef struct mem_st MEM;",
          "40: DEFINE_LHASH_OF(MEM);",
          "",
          "[Removed Lines]",
          "38: DEFINE_LHASH_OF(APP_INFO);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f39423aac144bf10f04f8d7b069e72bac9fff98",
      "candidate_info": {
        "commit_hash": "3f39423aac144bf10f04f8d7b069e72bac9fff98",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3f39423aac144bf10f04f8d7b069e72bac9fff98",
        "files": [
          "crypto/srp/srp_lib.c"
        ],
        "message": "SRP code tidy.\n\nTidy up srp_Calc_k and SRP_Calc_u by making them a special case of\nsrp_Calc_xy which performs SHA1(PAD(x) | PAD(y)).\n\nThis addresses an OCAP Audit issue.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit 8f332ac962b377a52016927e6db7a15367cb839c)",
        "before_after_code_files": [
          "crypto/srp/srp_lib.c||crypto/srp/srp_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/srp/srp_lib.c||crypto/srp/srp_lib.c": [
          "File: crypto/srp/srp_lib.c -> crypto/srp/srp_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: # include <openssl/evp.h>",
          "15: # include \"internal/bn_srp.h\"",
          "21:     unsigned char digest[SHA_DIGEST_LENGTH];",
          "22:     unsigned char *tmp = NULL;",
          "26:     BIGNUM *res = NULL;",
          "29:         return NULL;",
          "33:         return NULL;",
          "47:         goto err;",
          "50:         goto err;",
          "51:     res = BN_bin2bn(digest, sizeof(digest), NULL);",
          "52:  err:",
          "53:     OPENSSL_free(tmp);",
          "55:     return res;",
          "56: }",
          "58: BIGNUM *SRP_Calc_u(const BIGNUM *A, const BIGNUM *B, const BIGNUM *N)",
          "59: {",
          "103: }",
          "105: BIGNUM *SRP_Calc_server_key(const BIGNUM *A, const BIGNUM *v, const BIGNUM *u,",
          "",
          "[Removed Lines]",
          "17: static BIGNUM *srp_Calc_k(const BIGNUM *N, const BIGNUM *g)",
          "18: {",
          "23:     EVP_MD_CTX *ctxt = NULL;",
          "24:     int longg;",
          "25:     int longN = BN_num_bytes(N);",
          "28:     if (BN_ucmp(g, N) >= 0)",
          "31:     ctxt = EVP_MD_CTX_new();",
          "32:     if (ctxt == NULL)",
          "34:     if ((tmp = OPENSSL_malloc(longN)) == NULL)",
          "35:         goto err;",
          "36:     BN_bn2bin(N, tmp);",
          "38:     if (!EVP_DigestInit_ex(ctxt, EVP_sha1(), NULL)",
          "39:         || !EVP_DigestUpdate(ctxt, tmp, longN))",
          "40:         goto err;",
          "42:     memset(tmp, 0, longN);",
          "43:     longg = BN_bn2bin(g, tmp);",
          "45:     if (!EVP_DigestUpdate(ctxt, tmp + longg, longN - longg)",
          "46:         || !EVP_DigestUpdate(ctxt, tmp, longg))",
          "49:     if (!EVP_DigestFinal_ex(ctxt, digest, NULL))",
          "54:     EVP_MD_CTX_free(ctxt);",
          "62:     BIGNUM *u = NULL;",
          "63:     unsigned char cu[SHA_DIGEST_LENGTH];",
          "64:     unsigned char *cAB = NULL;",
          "65:     EVP_MD_CTX *ctxt = NULL;",
          "66:     int longN;",
          "67:     if ((A == NULL) || (B == NULL) || (N == NULL))",
          "68:         return NULL;",
          "70:     if (BN_ucmp(A, N) >= 0 || BN_ucmp(B, N) >= 0)",
          "71:         return NULL;",
          "73:     longN = BN_num_bytes(N);",
          "75:     ctxt = EVP_MD_CTX_new();",
          "76:     if (ctxt == NULL)",
          "77:         return NULL;",
          "78:     if ((cAB = OPENSSL_malloc(2 * longN)) == NULL)",
          "79:         goto err;",
          "81:     memset(cAB, 0, longN);",
          "83:     if (!EVP_DigestInit_ex(ctxt, EVP_sha1(), NULL)",
          "84:         || !EVP_DigestUpdate(ctxt, cAB + BN_bn2bin(A, cAB + longN), longN)",
          "85:         || !EVP_DigestUpdate(ctxt, cAB + BN_bn2bin(B, cAB + longN), longN))",
          "86:         goto err;",
          "88:     if (!EVP_DigestFinal_ex(ctxt, cu, NULL))",
          "89:         goto err;",
          "91:     if ((u = BN_bin2bn(cu, sizeof(cu), NULL)) == NULL)",
          "92:         goto err;",
          "93:     if (BN_is_zero(u)) {",
          "94:         BN_free(u);",
          "95:         u = NULL;",
          "96:     }",
          "98:  err:",
          "99:     OPENSSL_free(cAB);",
          "100:     EVP_MD_CTX_free(ctxt);",
          "102:     return u;",
          "",
          "[Added Lines]",
          "19: static BIGNUM *srp_Calc_xy(const BIGNUM *x, const BIGNUM *y, const BIGNUM *N)",
          "20: {",
          "23:     int numN = BN_num_bytes(N);",
          "25:     if (x != N && BN_ucmp(x, N) >= 0)",
          "27:     if (y != N && BN_ucmp(y, N) >= 0)",
          "29:     if ((tmp = OPENSSL_malloc(numN * 2)) == NULL)",
          "31:     if (BN_bn2binpad(x, tmp, numN) < 0",
          "32:         || BN_bn2binpad(y, tmp + numN, numN) < 0",
          "33:         || !EVP_Digest(tmp, numN * 2, digest, NULL, EVP_sha1(), NULL))",
          "41: static BIGNUM *srp_Calc_k(const BIGNUM *N, const BIGNUM *g)",
          "42: {",
          "44:     return srp_Calc_xy(N, g, N);",
          "45: }",
          "50:     return srp_Calc_xy(A, B, N);",
          "",
          "---------------"
        ]
      }
    }
  ]
}