{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "db561bcedaa38da1c4ac5097d6cab9e9567b1f1d",
      "candidate_info": {
        "commit_hash": "db561bcedaa38da1c4ac5097d6cab9e9567b1f1d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db561bcedaa38da1c4ac5097d6cab9e9567b1f1d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Performance optimization in sqlite3BtreeCursor().\n\nFossilOrigin-Name: ea068b099c96b8b9526114732d2a6be186cf381b7329d102778ad25b95510c9e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8d964e1c21d4cea699023e02b0616a75c5859dd083c9365cdcbc0676ebbdaae4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4379:     allocateTempSpace(pBt);",
          "4380:     if( pBt->pTmpSpace==0 ) return SQLITE_NOMEM_BKPT;",
          "4381:   }",
          "4385:   }",
          "",
          "[Removed Lines]",
          "4382:   if( iTable==1 && btreePagecount(pBt)==0 ){",
          "4383:     assert( wrFlag==0 );",
          "4384:     iTable = 0;",
          "",
          "[Added Lines]",
          "4382:   if( iTable<=1 ){",
          "4383:     if( iTable<1 ){",
          "4384:       return SQLITE_CORRUPT_BKPT;",
          "4385:     }else if( btreePagecount(pBt)==0 ){",
          "4386:       assert( wrFlag==0 );",
          "4387:       iTable = 0;",
          "4388:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4406:   pCur->eState = CURSOR_INVALID;",
          "4407:   return SQLITE_OK;",
          "4408: }",
          "4409: int sqlite3BtreeCursor(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4413: static int btreeCursorWithLock(",
          "4419: ){",
          "4420:   int rc;",
          "4421:   sqlite3BtreeEnter(p);",
          "4422:   rc = btreeCursor(p, iTable, wrFlag, pKeyInfo, pCur);",
          "4423:   sqlite3BtreeLeave(p);",
          "4424:   return rc;",
          "4425: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4415: ){",
          "4419:   }else{",
          "4423:   }",
          "4425: }",
          "",
          "[Removed Lines]",
          "4416:   int rc;",
          "4417:   if( iTable<1 ){",
          "4418:     rc = SQLITE_CORRUPT_BKPT;",
          "4420:     sqlite3BtreeEnter(p);",
          "4421:     rc = btreeCursor(p, iTable, wrFlag, pKeyInfo, pCur);",
          "4422:     sqlite3BtreeLeave(p);",
          "4424:   return rc;",
          "",
          "[Added Lines]",
          "4433:   if( p->sharable ){",
          "4434:     return btreeCursorWithLock(p, iTable, wrFlag, pKeyInfo, pCur);",
          "4436:     return btreeCursor(p, iTable, wrFlag, pKeyInfo, pCur);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83acc14ad4d03c8956a3d46f1ad555a30d092fed",
      "candidate_info": {
        "commit_hash": "83acc14ad4d03c8956a3d46f1ad555a30d092fed",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/83acc14ad4d03c8956a3d46f1ad555a30d092fed",
        "files": [
          "VERSION",
          "configure",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Increase the version number to 3.28.0 for the next release cycle.\n\nFossilOrigin-Name: 6eb38c59a81d27b7c1f3edad84b27a1114df6f1607282b2be1b5de9c7decc512",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9bd92afd0cb0a958441e861c7006b77027125b1ceea0868958ec948b6b3c7bc9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1e28ec35c773c5b342d8231ec393e6c243d492a",
      "candidate_info": {
        "commit_hash": "e1e28ec35c773c5b342d8231ec393e6c243d492a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e1e28ec35c773c5b342d8231ec393e6c243d492a",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Remove an assert() that could fail on a corrupt db from fts3_write.c.\n\nFossilOrigin-Name: 4cdcda408a4edcd2845584ddef64f0efdd2b4cc030afbc05fc2b8b555c69d3f6",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1612:   if( iStartLeaf==0 ){",
          "1613:     nExtra = nRoot + FTS3_NODE_PADDING;",
          "1614:   }",
          "",
          "[Removed Lines]",
          "1611:   assert( iStartLeaf<=iEndLeaf );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98f343077887c4d3fc2ca3bbc7f20c80ec37b0e521d70af9c986ab80bb2c7903",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   SELECT * FROM ft WHERE ft MATCH 'abc20'",
          "146: } {1 {database disk image is malformed}}",
          "148: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: #-------------------------------------------------------------------------",
          "149: reset_db",
          "150: do_execsql_test 4.0 {",
          "151:   CREATE VIRTUAL TABLE t1 USING fts3();",
          "152:   INSERT INTO t1 VALUES('one two three');",
          "153:   UPDATE t1_segdir SET start_block = 1;",
          "154: }",
          "156: do_catchsql_test 4.1 {",
          "157:   SELECT * FROM t1 WHERE t1 MATCH 'one';",
          "158: } {1 {database disk image is malformed}}",
          "159: do_catchsql_test 4.2 {",
          "160:   SELECT * FROM t1 WHERE t1 MATCH 'two';",
          "161: } {1 {database disk image is malformed}}",
          "162: do_catchsql_test 4.3 {",
          "163:   SELECT * FROM t1 WHERE t1 MATCH 'three';",
          "164: } {1 {database disk image is malformed}}",
          "165: do_execsql_test 4.4 {",
          "166:   INSERT INTO t1(t1) VALUES('optimize');",
          "167: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4d9c9822df99cbf29b49a3af6f183aa4992fb36",
      "candidate_info": {
        "commit_hash": "f4d9c9822df99cbf29b49a3af6f183aa4992fb36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f4d9c9822df99cbf29b49a3af6f183aa4992fb36",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Remove a faulty testcase() macro.\n\nFossilOrigin-Name: 80124ae55246b79023d23d3f55487ac3c0b40e8ff301c5daf4dd0631de8ddb29",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e8e9f77d52974f6ba0a536d05837b280a996745deb3a2169bb29379f10e49df4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5112:     case TK_IN:",
          "5113:     case TK_FUNCTION:",
          "5114:       testcase( pExpr->op==TK_ISNOT );",
          "5116:       testcase( pExpr->op==TK_ISNULL );",
          "5117:       testcase( pExpr->op==TK_NOTNULL );",
          "5118:       testcase( pExpr->op==TK_IS );",
          "",
          "[Removed Lines]",
          "5115:       testcase( pExpr->op==TK_NOT );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82642f815bc9f31af3403fbbdf94d6f8d9ab3615",
      "candidate_info": {
        "commit_hash": "82642f815bc9f31af3403fbbdf94d6f8d9ab3615",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/82642f815bc9f31af3403fbbdf94d6f8d9ab3615",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Ensure that the nProgressLimit variable is always initialized in sqlite3VdbeExec(), even if the routine jumps to its exit processing early.\n\nFossilOrigin-Name: 167b91df77fff1a84791f6ab5f72239b90475475be690a838248119b6dd312f0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 68cce272e7f7cbc0c319ee8b7ff674d652cb1e95e903d99d848c41dff2b5d304",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:   sqlite3VdbeEnter(p);",
          "625:   if( p->rc==SQLITE_NOMEM ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "625: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "626:   if( db->xProgress ){",
          "627:     u32 iPrior = p->aCounter[SQLITE_STMTSTATUS_VM_STEP];",
          "628:     assert( 0 < db->nProgressOps );",
          "629:     nProgressLimit = db->nProgressOps - (iPrior % db->nProgressOps);",
          "630:   }else{",
          "631:     nProgressLimit = 0xffffffff;",
          "632:   }",
          "633: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "635:   db->busyHandler.nBusy = 0;",
          "636:   if( db->u1.isInterrupted ) goto abort_due_to_interrupt;",
          "637:   sqlite3VdbeIOTraceSql(p);",
          "647: #ifdef SQLITE_DEBUG",
          "648:   sqlite3BeginBenignMalloc();",
          "649:   if( p->pc==0",
          "",
          "[Removed Lines]",
          "638: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "639:   if( db->xProgress ){",
          "640:     u32 iPrior = p->aCounter[SQLITE_STMTSTATUS_VM_STEP];",
          "641:     assert( 0 < db->nProgressOps );",
          "642:     nProgressLimit = db->nProgressOps - (iPrior % db->nProgressOps);",
          "643:   }else{",
          "644:     nProgressLimit = 0xffffffff;",
          "645:   }",
          "646: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}