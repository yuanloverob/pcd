{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "130dbc3d96d2f673c75864b032fa7e24a08cb3a4",
      "candidate_info": {
        "commit_hash": "130dbc3d96d2f673c75864b032fa7e24a08cb3a4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/130dbc3d96d2f673c75864b032fa7e24a08cb3a4",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Add recent interesting cases from dbsqlfuzz.\n\nFossilOrigin-Name: f06ef3d75d85545dd58c6dda10f7ad04fafbb7ae8706b3821be21f86a94795f1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5beb6dc9bc2d3d0003e33488df9c01aaf28c41c30fd9ca35543cbe3ec5a8d9ce",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6117a17323148469048563ff740c8ee4eb9ffaa3",
      "candidate_info": {
        "commit_hash": "6117a17323148469048563ff740c8ee4eb9ffaa3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6117a17323148469048563ff740c8ee4eb9ffaa3",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/affinity2.test"
        ],
        "message": "Avoid running a couple of tests in affinity2.test as part of the valgrind permutations, as the way floating point computations are simulated by valgrind causes them to fail.\n\nFossilOrigin-Name: 7f9a4b6015ac332a04d3e394a6b3210fc95253d8786a261178a5639cb8d9d987",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/affinity2.test||test/affinity2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a561a656ff50efc0103da3988626cea3ef05757403b83960f2aa6c0a48c2765e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "119: # 2019-08-30 ticket https://www.sqlite.org/src/info/40812aea1fde9594",
          "120: #",
          "131: finish_test",
          "",
          "[Removed Lines]",
          "121: do_execsql_test 600 {",
          "122:   DROP TABLE IF EXISTS t0;",
          "123:   CREATE TABLE t0(c0 REAL UNIQUE);",
          "124:   INSERT INTO t0(c0) VALUES (3175546974276630385);",
          "125:   SELECT 3175546974276630385 < c0 FROM t0;",
          "126: } {1}",
          "127: do_execsql_test 601 {",
          "128:   SELECT 1 FROM t0 WHERE 3175546974276630385 < c0;",
          "129: } {1}",
          "",
          "[Added Lines]",
          "121: # Due to some differences in floating point computations, these tests do not",
          "122: # work under valgrind.",
          "123: #",
          "124: if {![info exists ::G(valgrind)]} {",
          "125:   do_execsql_test 600 {",
          "126:     DROP TABLE IF EXISTS t0;",
          "127:     CREATE TABLE t0(c0 REAL UNIQUE);",
          "128:     INSERT INTO t0(c0) VALUES (3175546974276630385);",
          "129:     SELECT 3175546974276630385 < c0 FROM t0;",
          "130:   } {1}",
          "131:   do_execsql_test 601 {",
          "132:     SELECT 1 FROM t0 WHERE 3175546974276630385 < c0;",
          "133:   } {1}",
          "134: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d29448114c5d99e1e187bf3adcdce7d6479d6f8",
      "candidate_info": {
        "commit_hash": "4d29448114c5d99e1e187bf3adcdce7d6479d6f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4d29448114c5d99e1e187bf3adcdce7d6479d6f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Reorder two comparisons for a small performance gain in OP_Transaction.\n\nFossilOrigin-Name: d7667f6560318272c8b35b478e29b0ed134105dfd119a2fd53ef0490442c60cc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 17ce1c49cb0ed6fdd8c7c33431bc2afa217f1092c99b8dd608890a8e7aec7fb1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3456:       goto abort_due_to_error;",
          "3457:     }",
          "3460:      && (db->autoCommit==0 || db->nVdbeRead>1)",
          "3461:     ){",
          "3462:       assert( sqlite3BtreeIsInTrans(pBt) );",
          "",
          "[Removed Lines]",
          "3459:     if( pOp->p2 && p->usesStmtJournal",
          "",
          "[Added Lines]",
          "3459:     if( p->usesStmtJournal",
          "3460:      && pOp->p2",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b86e51eea956e5b3532f4042d8a314556746bef",
      "candidate_info": {
        "commit_hash": "6b86e51eea956e5b3532f4042d8a314556746bef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6b86e51eea956e5b3532f4042d8a314556746bef",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "src/sqliteInt.h",
          "src/vdbe.c"
        ],
        "message": "If the OP_ParseSchema opcode with a non-NULL P4 operand does not parse any rows out of the sqlite_master table, that indicates that the sqlite_master table is corrupt, so raise an SQLITE_CORRUPT error.\n\nFossilOrigin-Name: 598d7358e7329f0de6e3defc217665909e46874258ac29592ee2fd53e6411cda",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 444c7c99beb9f8b82963e9784aa2be54124c7011f4771122b4f608c02aa26408",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   UNUSED_PARAMETER2(NotUsed, argc);",
          "66:   assert( sqlite3_mutex_held(db->mutex) );",
          "67:   DbClearProperty(db, iDb, DB_Empty);",
          "68:   if( db->mallocFailed ){",
          "69:     corruptSchema(pData, argv[0], 0);",
          "70:     return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:   pData->nInitRow++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:   initData.rc = SQLITE_OK;",
          "177:   initData.pzErrMsg = pzErrMsg;",
          "178:   initData.mInitFlags = mFlags;",
          "179:   sqlite3InitCallback(&initData, 3, (char **)azArg, 0);",
          "180:   if( initData.rc ){",
          "181:     rc = initData.rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:   initData.nInitRow = 0;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5799:       assert( db->init.busy==0 );",
          "5800:       db->init.busy = 1;",
          "5801:       initData.rc = SQLITE_OK;",
          "5802:       assert( !db->mallocFailed );",
          "5803:       rc = sqlite3_exec(db, zSql, sqlite3InitCallback, &initData, 0);",
          "5804:       if( rc==SQLITE_OK ) rc = initData.rc;",
          "5805:       sqlite3DbFreeNN(db, zSql);",
          "5806:       db->init.busy = 0;",
          "5807:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5802:       initData.nInitRow = 0;",
          "5806:       if( rc==SQLITE_OK && initData.nInitRow==0 ){",
          "5810:         rc = SQLITE_CORRUPT_BKPT;",
          "5811:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf9ff256fe17526a995ac3e470aa120c3c173414",
      "candidate_info": {
        "commit_hash": "bf9ff256fe17526a995ac3e470aa120c3c173414",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bf9ff256fe17526a995ac3e470aa120c3c173414",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/sqliteInt.h",
          "test/without_rowid1.test"
        ],
        "message": "Disable index seek optimizations on REINDEX when the order of primary keys in the index differs from the main table. Fix for ticket [bba7b69f9849b5bf11b4].\n\nFossilOrigin-Name: f7aadfab3bb8eb8eb2cd62dc8a6823538387b3329f1efc23ef75482488109478",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f158c048be1dc7c80d38787a20495caa55b86416967efd57f4888548d42b4819",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1928:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "1929:         pIdx->aiColumn[j] = pPk->aiColumn[i];",
          "1930:         pIdx->azColl[j] = pPk->azColl[i];",
          "1931:         j++;",
          "1932:       }",
          "1933:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1931:         if( pPk->aSortOrder[i] ){",
          "1933:           pIdx->bAscKeyBug = 1;",
          "1934:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3049:     addr2 = sqlite3VdbeCurrentAddr(v);",
          "3050:   }",
          "3051:   sqlite3VdbeAddOp3(v, OP_SorterData, iSorter, regRecord, iIdx);",
          "3053:   sqlite3VdbeAddOp2(v, OP_IdxInsert, iIdx, regRecord);",
          "3054:   sqlite3VdbeChangeP5(v, OPFLAG_USESEEKRESULT);",
          "3055:   sqlite3ReleaseTempReg(pParse, regRecord);",
          "",
          "[Removed Lines]",
          "3052:   sqlite3VdbeAddOp1(v, OP_SeekEnd, iIdx);",
          "",
          "[Added Lines]",
          "3056:   if( !pIndex->bAscKeyBug ){",
          "3064:     sqlite3VdbeAddOp1(v, OP_SeekEnd, iIdx);",
          "3065:   }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "399:   PRAGMA integrity_check;",
          "400:   SELECT a FROM t11 ORDER BY a COLLATE binary;",
          "401: } {ok A a}",
          "403: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403: # 2019-05-13 ticket https://www.sqlite.org/src/info/bba7b69f9849b5b",
          "404: do_execsql_test 12.1 {",
          "405:   DROP TABLE IF EXISTS t0;",
          "406:   CREATE TABLE t0 (c0 INTEGER PRIMARY KEY DESC, c1 UNIQUE DEFAULT NULL) WITHOUT ROWID;",
          "407:   INSERT INTO t0(c0) VALUES (1), (2), (3), (4), (5);",
          "408:   REINDEX;",
          "409:   PRAGMA integrity_check;",
          "410: } {ok}",
          "",
          "---------------"
        ]
      }
    }
  ]
}