{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1cf197583de15d352dc169437f619d2e4631cf4b",
      "candidate_info": {
        "commit_hash": "1cf197583de15d352dc169437f619d2e4631cf4b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1cf197583de15d352dc169437f619d2e4631cf4b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/malloc.c",
          "src/sqliteInt.h",
          "src/tokenize.c"
        ],
        "message": "Give the sqlite3 object a pointer to the current Parse so that if an OOM occurs, it can automatically set the Parse.rc value to SQLITE_NOMEM.  This avoids a frequent extra test of db.mallocFailed in the innermost parser loop.\n\nFossilOrigin-Name: 5c6638040b3017c6be016441422d965a3ca00dd6ae1f78cadc0b54562978f64e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/malloc.c||src/malloc.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tokenize.c||src/tokenize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 440a7cda000164d3b46109caf2e1dde80681ba9b0d94ba9be6847d2b917445cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:       db->u1.isInterrupted = 1;",
          "662:     }",
          "663:     db->lookaside.bDisable++;",
          "664:   }",
          "665: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "664:     if( db->pParse ){",
          "665:       db->pParse->rc = SQLITE_NOMEM_BKPT;",
          "666:     }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "563: #ifdef sqlite3Parser_ENGINEALWAYSONSTACK",
          "565: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:   VVA_ONLY( u8 startedWithOom = db->mallocFailed );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "594:   assert( pParse->pNewTrigger==0 );",
          "595:   assert( pParse->nVar==0 );",
          "596:   assert( pParse->pVList==0 );",
          "597:   while( 1 ){",
          "598:     n = sqlite3GetToken((u8*)zSql, &tokenType);",
          "599:     mxSqlLen -= n;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598:   pParse->pParentParse = db->pParse;",
          "599:   db->pParse = pParse;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "650:     sqlite3Parser(pEngine, tokenType, pParse->sLastToken);",
          "651:     lastTokenParsed = tokenType;",
          "652:     zSql += n;",
          "654:   }",
          "655:   assert( nErr==0 );",
          "656: #ifdef YYTRACKMAXSTACKDEPTH",
          "",
          "[Removed Lines]",
          "653:     if( pParse->rc!=SQLITE_OK || db->mallocFailed ) break;",
          "",
          "[Added Lines]",
          "656:     assert( db->mallocFailed==0 || pParse->rc!=SQLITE_OK || startedWithOom );",
          "657:     if( pParse->rc!=SQLITE_OK ) break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "718:     pParse->pZombieTab = p->pNextZombie;",
          "719:     sqlite3DeleteTable(db, p);",
          "720:   }",
          "721:   assert( nErr==0 || pParse->rc!=SQLITE_OK );",
          "722:   return nErr;",
          "723: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725:   db->pParse = pParse->pParentParse;",
          "726:   pParse->pParentParse = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58b42ad1314348a2be094abda4239d2c0a6be926",
      "candidate_info": {
        "commit_hash": "58b42ad1314348a2be094abda4239d2c0a6be926",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/58b42ad1314348a2be094abda4239d2c0a6be926",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Earlier detection of corruption while added to the freelist.\n\nFossilOrigin-Name: 8c80b004cae71aaf820a31dba80c100ed162ef5bae845fb4535ff4d3be407500",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bcbe7d96df3c9515f679ccf671ca9ba89d081b53501495d4218eb5126196838b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6193:   assert( CORRUPT_DB || iPage>1 );",
          "6194:   assert( !pMemPage || pMemPage->pgno==iPage );",
          "6197:   if( pMemPage ){",
          "6198:     pPage = pMemPage;",
          "6199:     sqlite3PagerRef(pPage->pDbPage);",
          "",
          "[Removed Lines]",
          "6196:   if( iPage<2 ) return SQLITE_CORRUPT_BKPT;",
          "",
          "[Added Lines]",
          "6196:   if( iPage<2 || iPage>pBt->nPage ){",
          "6197:     return SQLITE_CORRUPT_BKPT;",
          "6198:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c269a9ff844bb85943d59eb8cf6c6b10e51e305",
      "candidate_info": {
        "commit_hash": "1c269a9ff844bb85943d59eb8cf6c6b10e51e305",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1c269a9ff844bb85943d59eb8cf6c6b10e51e305",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Remove a NEVER() that is reachable from a corrupt database.\n\nFossilOrigin-Name: 30e6ee27a9fb78291c324ac9b80db4579280140430804ecd4692e312f9938525",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7f2246a17be9915b3492624a3d8deff56694bdc372f7627e3f16c1869415b1a3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6900:   assert( i<iEnd );",
          "6901:   j = get2byte(&aData[hdr+5]);",
          "6903:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6905:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "6902:   if( NEVER(j>(u32)usableSize) ){ j = 0; }",
          "",
          "[Added Lines]",
          "6902:   if( j>(u32)usableSize ){ j = 0; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c204d81a6c043305cfae10e7e9c9338d3702d1a6",
      "candidate_info": {
        "commit_hash": "c204d81a6c043305cfae10e7e9c9338d3702d1a6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c204d81a6c043305cfae10e7e9c9338d3702d1a6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "Enhance treeview to show SOFT-COLLATE for TK_COLLATE operators that omit the EP_Collate flag.\n\nFossilOrigin-Name: a97804620a27acc30bebd2aaa04e38f2f36de48b0931038ca8bdc9cb0c36b8f4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36997c4ade2ef3a274cd1ac52b44118fb3a05325adb650b7b338ecb43d060575",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:     }",
          "538:     case TK_COLLATE: {",
          "540:       sqlite3TreeViewExpr(pView, pExpr->pLeft, 0);",
          "541:       break;",
          "542:     }",
          "",
          "[Removed Lines]",
          "539:       sqlite3TreeViewLine(pView, \"COLLATE %Q\", pExpr->u.zToken);",
          "",
          "[Added Lines]",
          "543:       sqlite3TreeViewLine(pView, \"%sCOLLATE %Q%s\",",
          "544:         !ExprHasProperty(pExpr, EP_Collate) ? \"SOFT-\" : \"\",",
          "545:         pExpr->u.zToken, zFlgs);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c2f2206b63f7cfabb9e0211e8887d6cd915e983",
      "candidate_info": {
        "commit_hash": "5c2f2206b63f7cfabb9e0211e8887d6cd915e983",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5c2f2206b63f7cfabb9e0211e8887d6cd915e983",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Initialize the 18-byte overrun area on the buffer used to reconstruct overflow btree cells during a btree search, to avoid a harmless jump-depends-on-uninit-values warning.\n\nFossilOrigin-Name: 4b05caeb1b9767ba58cb4261ecc22cdd495216b3258d45f2165cdbd3ea079495",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 915388ab39ba3ca8681cd2613b91314aa965967f23a5bface90f54a3d6423300",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5534:             rc = SQLITE_CORRUPT_PAGE(pPage);",
          "5535:             goto moveto_finish;",
          "5536:           }",
          "5538:           if( pCellKey==0 ){",
          "5539:             rc = SQLITE_NOMEM_BKPT;",
          "5540:             goto moveto_finish;",
          "5541:           }",
          "5542:           pCur->ix = (u16)idx;",
          "5543:           rc = accessPayload(pCur, 0, nCell, (unsigned char*)pCellKey, 0);",
          "5544:           pCur->curFlags &= ~BTCF_ValidOvfl;",
          "5545:           if( rc ){",
          "5546:             sqlite3_free(pCellKey);",
          "",
          "[Removed Lines]",
          "5537:           pCellKey = sqlite3Malloc( nCell+18 );",
          "",
          "[Added Lines]",
          "5538:           pCellKey = sqlite3Malloc( nCell+nOverrun );",
          "",
          "---------------"
        ]
      }
    }
  ]
}