{
  "cve_id": "CVE-2021-40576",
  "cve_desc": "The binary MP4Box in Gpac 1.0.1 has a null pointer dereference vulnerability in the gf_isom_get_payt_count function in hint_track.c, which allows attackers to cause a denial of service.",
  "repo": "gpac/gpac",
  "patch_hash": "ad18ece95fa064efc0995c4ab2c985f77fb166ec",
  "patch_info": {
    "commit_hash": "ad18ece95fa064efc0995c4ab2c985f77fb166ec",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/ad18ece95fa064efc0995c4ab2c985f77fb166ec",
    "files": [
      "src/isomedia/hint_track.c"
    ],
    "message": "fixed #1904",
    "before_after_code_files": [
      "src/isomedia/hint_track.c||src/isomedia/hint_track.c"
    ]
  },
  "patch_diff": {
    "src/isomedia/hint_track.c||src/isomedia/hint_track.c": [
      "File: src/isomedia/hint_track.c -> src/isomedia/hint_track.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: u32 GetHintFormat(GF_TrackBox *trak)",
      "44: {",
      "45:  GF_HintMediaHeaderBox *hmhd = (GF_HintMediaHeaderBox *)trak->Media->information->InfoHeader;",
      "47:   return 0;",
      "49:  if (!hmhd || !hmhd->subType) {",
      "",
      "[Removed Lines]",
      "46:  if (hmhd->type != GF_ISOM_BOX_TYPE_HMHD)",
      "",
      "[Added Lines]",
      "46:  if (!hmhd || (hmhd->type != GF_ISOM_BOX_TYPE_HMHD))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "86c1566f040b2b84c72afcb6cbd444c5aff56cfe",
      "candidate_info": {
        "commit_hash": "86c1566f040b2b84c72afcb6cbd444c5aff56cfe",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/86c1566f040b2b84c72afcb6cbd444c5aff56cfe",
        "files": [
          "src/isomedia/hint_track.c"
        ],
        "message": "fixed #1894",
        "before_after_code_files": [
          "src/isomedia/hint_track.c||src/isomedia/hint_track.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/hint_track.c||src/isomedia/hint_track.c"
          ],
          "candidate": [
            "src/isomedia/hint_track.c||src/isomedia/hint_track.c"
          ]
        }
      },
      "candidate_diff": {
        "src/isomedia/hint_track.c||src/isomedia/hint_track.c": [
          "File: src/isomedia/hint_track.c -> src/isomedia/hint_track.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: u32 GetHintFormat(GF_TrackBox *trak)",
          "44: {",
          "45:  GF_HintMediaHeaderBox *hmhd = (GF_HintMediaHeaderBox *)trak->Media->information->InfoHeader;",
          "46:  if (!hmhd || !hmhd->subType) {",
          "47:   GF_Box *a = (GF_Box *)gf_list_get(trak->Media->information->sampleTable->SampleDescription->child_boxes, 0);",
          "48:   if (!hmhd) return a ? a->type : 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:  if (hmhd->type != GF_ISOM_BOX_TYPE_HMHD)",
          "47:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1721964633091e838bee8fae7a91c3973c0b9ae7",
      "candidate_info": {
        "commit_hash": "1721964633091e838bee8fae7a91c3973c0b9ae7",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/1721964633091e838bee8fae7a91c3973c0b9ae7",
        "files": [
          "applications/mp4box/fileimport.c",
          "applications/mp4box/main.c",
          "src/compositor/audio_mixer.c",
          "src/compositor/media_object.c",
          "src/compositor/svg_grouping.c",
          "src/filter_core/filter_pck.c",
          "src/filter_core/filter_session.c",
          "src/filters/compose.c",
          "src/filters/dasher.c",
          "src/filters/dec_mad.c",
          "src/filters/dec_openhevc.c",
          "src/filters/filelist.c",
          "src/filters/in_rtp_sdp.c",
          "src/filters/inspect.c",
          "src/filters/jsfilter.c",
          "src/filters/mux_isom.c",
          "src/filters/reframe_av1.c",
          "src/filters/reframer.c",
          "src/filters/write_generic.c",
          "src/isomedia/box_dump.c",
          "src/isomedia/hint_track.c",
          "src/isomedia/iff.c",
          "src/isomedia/isom_store.c",
          "src/isomedia/meta.c",
          "src/jsmods/evg.c",
          "src/media_tools/av_parsers.c",
          "src/scenegraph/base_scenegraph.c",
          "src/scenegraph/svg_js.c",
          "src/utils/os_config_init.c",
          "testsuite"
        ],
        "message": "cppcheck cleanup",
        "before_after_code_files": [
          "applications/mp4box/fileimport.c||applications/mp4box/fileimport.c",
          "applications/mp4box/main.c||applications/mp4box/main.c",
          "src/compositor/audio_mixer.c||src/compositor/audio_mixer.c",
          "src/compositor/media_object.c||src/compositor/media_object.c",
          "src/compositor/svg_grouping.c||src/compositor/svg_grouping.c",
          "src/filter_core/filter_pck.c||src/filter_core/filter_pck.c",
          "src/filter_core/filter_session.c||src/filter_core/filter_session.c",
          "src/filters/compose.c||src/filters/compose.c",
          "src/filters/dasher.c||src/filters/dasher.c",
          "src/filters/dec_mad.c||src/filters/dec_mad.c",
          "src/filters/dec_openhevc.c||src/filters/dec_openhevc.c",
          "src/filters/filelist.c||src/filters/filelist.c",
          "src/filters/in_rtp_sdp.c||src/filters/in_rtp_sdp.c",
          "src/filters/inspect.c||src/filters/inspect.c",
          "src/filters/jsfilter.c||src/filters/jsfilter.c",
          "src/filters/mux_isom.c||src/filters/mux_isom.c",
          "src/filters/reframe_av1.c||src/filters/reframe_av1.c",
          "src/filters/reframer.c||src/filters/reframer.c",
          "src/filters/write_generic.c||src/filters/write_generic.c",
          "src/isomedia/box_dump.c||src/isomedia/box_dump.c",
          "src/isomedia/hint_track.c||src/isomedia/hint_track.c",
          "src/isomedia/iff.c||src/isomedia/iff.c",
          "src/isomedia/isom_store.c||src/isomedia/isom_store.c",
          "src/isomedia/meta.c||src/isomedia/meta.c",
          "src/jsmods/evg.c||src/jsmods/evg.c",
          "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c",
          "src/scenegraph/base_scenegraph.c||src/scenegraph/base_scenegraph.c",
          "src/scenegraph/svg_js.c||src/scenegraph/svg_js.c",
          "src/utils/os_config_init.c||src/utils/os_config_init.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/hint_track.c||src/isomedia/hint_track.c"
          ],
          "candidate": [
            "src/isomedia/hint_track.c||src/isomedia/hint_track.c"
          ]
        }
      },
      "candidate_diff": {
        "applications/mp4box/fileimport.c||applications/mp4box/fileimport.c": [
          "File: applications/mp4box/fileimport.c -> applications/mp4box/fileimport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "348: GF_Err apply_edits(GF_ISOFile *dest, u32 track, char *edits)",
          "349: {",
          "351:  u32 movie_ts = gf_isom_get_timescale(dest);",
          "352:  u32 media_ts = gf_isom_get_media_timescale(dest, track);",
          "353:  u64 media_dur = gf_isom_get_media_duration(dest, track);",
          "355:  while (edits) {",
          "356:   char c=0;",
          "357:   char *sep = strchr(edits+1, 'r');",
          "358:   if (!sep) sep = strchr(edits+1, 'e');",
          "",
          "[Removed Lines]",
          "350:  GF_Err e = GF_OK;",
          "",
          "[Added Lines]",
          "355:   GF_Err e;",
          "",
          "---------------"
        ],
        "applications/mp4box/main.c||applications/mp4box/main.c": [
          "File: applications/mp4box/main.c -> applications/mp4box/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1798:    u32 comma_count = 0;",
          "1799:    u32 offset_index = 0;",
          "1800:    char *prev = szSlot+position;",
          "1803:     comma_count++;",
          "1806:    }",
          "1807:    meta->image_props->overlay_count = comma_count/2+1;",
          "1808:    meta->image_props->overlay_offsets = (GF_ImageItemOverlayOffset *)gf_malloc(meta->image_props->overlay_count*sizeof(GF_ImageItemOverlayOffset));",
          "1809:    if (!meta->image_props->overlay_offsets) {",
          "1810:     return 0;",
          "1811:    }",
          "1815:     meta->image_props->overlay_offsets[offset_index].horizontal = atoi(prev);",
          "1822:      meta->image_props->overlay_offsets[offset_index].vertical = atoi(prev);",
          "1828:      }",
          "1829:     } else {",
          "1830:      meta->image_props->overlay_offsets[offset_index].vertical = 0;",
          "",
          "[Removed Lines]",
          "1801:    char *next = strchr(szSlot+position, ',');",
          "1802:    while (next != NULL) {",
          "1804:     next++;",
          "1805:     next = strchr(next, ',');",
          "1812:    next = strchr(szSlot+position, ',');",
          "1813:    while (next != NULL) {",
          "1817:     next++;",
          "1818:     prev = next;",
          "1819:     if (next) {",
          "1820:      next = strchr(next, ',');",
          "1821:      if (next) *next = 0;",
          "1823:      if (next) {",
          "1825:       next++;",
          "1826:       prev = next;",
          "1827:       next = strchr(next, ',');",
          "",
          "[Added Lines]",
          "1801:    char *sub_next = strchr(szSlot+position, ',');",
          "1802:    while (sub_next != NULL) {",
          "1804:     sub_next++;",
          "1805:     sub_next = strchr(sub_next, ',');",
          "1812:    sub_next = strchr(szSlot+position, ',');",
          "1813:    while (sub_next != NULL) {",
          "1817:     sub_next++;",
          "1818:     prev = sub_next;",
          "1819:     if (sub_next) {",
          "1820:      sub_next = strchr(sub_next, ',');",
          "1821:      if (sub_next) *sub_next = 0;",
          "1823:      if (sub_next) {",
          "1825:       sub_next++;",
          "1826:       prev = sub_next;",
          "1827:       sub_next = strchr(sub_next, ',');",
          "",
          "---------------"
        ],
        "src/compositor/audio_mixer.c||src/compositor/audio_mixer.c": [
          "File: src/compositor/audio_mixer.c -> src/compositor/audio_mixer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "812:   in->in_bytes_used = (prev+1) * in->bytes_p_samp;",
          "813:   in->has_prev = GF_TRUE;",
          "816:    in->in_bytes_used = src_size;",
          "817:    for (j=0; j<in_ch; j++) in->last_channels[j] = inChanNext[j];",
          "818:   } else {",
          "",
          "[Removed Lines]",
          "815:   if (!src_samp || (in->in_bytes_used >= src_size)) {",
          "",
          "[Added Lines]",
          "815:   if (in->in_bytes_used >= src_size) {",
          "",
          "---------------"
        ],
        "src/compositor/media_object.c||src/compositor/media_object.c": [
          "File: src/compositor/media_object.c -> src/compositor/media_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "473:    u32 len = (u32) strlen(data);",
          "474:    memset(&temi_l, 0, sizeof(GF_AssociatedContentLocation));",
          "475:    temi_l.timeline_id = atoi(pname+7);",
          "479:    if (temi_l.is_announce) {",
          "480:     temi_l.activation_countdown.den = GF_4CC(data[len+2], data[len+3], data[len+4], data[len+5]);",
          "481:     temi_l.activation_countdown.num = GF_4CC(data[len+6], data[len+7], data[len+8], data[len+9]);",
          "",
          "[Removed Lines]",
          "476:    temi_l.is_announce = data[len+1] & 0x80 ? GF_TRUE : GF_FALSE;",
          "477:    temi_l.is_splicing = data[len+1] & 0x40 ? GF_TRUE : GF_FALSE;",
          "478:    temi_l.reload_external = data[len+1] & 0x20 ? GF_TRUE : GF_FALSE;",
          "",
          "[Added Lines]",
          "476:    temi_l.is_announce = (data[len+1] & 0x80) ? GF_TRUE : GF_FALSE;",
          "477:    temi_l.is_splicing = (data[len+1] & 0x40) ? GF_TRUE : GF_FALSE;",
          "478:    temi_l.reload_external = (data[len+1] & 0x20) ? GF_TRUE : GF_FALSE;",
          "",
          "---------------"
        ],
        "src/compositor/svg_grouping.c||src/compositor/svg_grouping.c": [
          "File: src/compositor/svg_grouping.c -> src/compositor/svg_grouping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "691:    if (cp && (tr_state->traversing_mode==TRAVERSE_SORT)) {",
          "693:     DrawableContext *ctx;",
          "694:     gf_path_reset(group->clip_drawable->path);",
          "695:     gf_path_add_rect(group->clip_drawable->path,",
          "",
          "[Removed Lines]",
          "692:     SVGgStack *group = gf_node_get_private(node);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/filter_core/filter_pck.c||src/filter_core/filter_pck.c": [
          "File: src/filter_core/filter_pck.c -> src/filter_core/filter_pck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:  if (dangling_packet) {",
          "353:   if (cached_pck && cached_pck->reference) {",
          "354:    gf_filter_pck_discard(cached_pck);",
          "356:   }",
          "357:   GF_SAFEALLOC(dst, GF_FilterPacket);",
          "358:   if (!dst) {",
          "",
          "[Removed Lines]",
          "355:    cached_pck = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/filter_core/filter_session.c||src/filter_core/filter_session.c": [
          "File: src/filter_core/filter_session.c -> src/filter_core/filter_session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1219:     const char *src_url = strstr(name, \"src\");",
          "1220:     if (src_url && (src_url[3]==fsess->sep_name)) {",
          "1224:      i=0;",
          "1227:        gf_filter_post_process_task(filter);",
          "1228:        break;",
          "1229:       }",
          "",
          "[Removed Lines]",
          "1221:      const GF_FilterArgs *args = filter->instance_args ? filter->instance_args : f_reg->args;",
          "1225:      while (args && args[i].arg_name) {",
          "1226:       if (!strcmp(args[i].arg_name, \"src\")) {",
          "",
          "[Added Lines]",
          "1221:      const GF_FilterArgs *f_args = filter->instance_args ? filter->instance_args : f_reg->args;",
          "1225:      while (f_args && f_args[i].arg_name) {",
          "1226:       if (!strcmp(f_args[i].arg_name, \"src\")) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2308:    } else {",
          "2309:     for (j=i; j<f->num_output_pids; j++) {",
          "2310:      GF_FilterPid *apid = gf_list_get(f->output_pids, j);",
          "2312:      if (p &&",
          "2313:       ((p->value.uint==GF_CODECID_HEVC_TILES) || (p->value.uint==GF_CODECID_VVC_SUBPIC))",
          "2314:      ) {",
          "",
          "[Removed Lines]",
          "2311:      const GF_PropertyValue *p = gf_filter_pid_get_property(apid, GF_PROP_PID_CODECID);",
          "",
          "[Added Lines]",
          "2311:      p = gf_filter_pid_get_property(apid, GF_PROP_PID_CODECID);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2749:      if (filter) {",
          "2752:        if (gf_list_find(filter->destination_links, dst_filter)<0)",
          "2753:         gf_list_add(filter->destination_links, dst_filter);",
          "",
          "[Removed Lines]",
          "2751:       if (dst_filter && for_source) {",
          "",
          "[Added Lines]",
          "2751:       if (dst_filter) {",
          "",
          "---------------"
        ],
        "src/filters/compose.c||src/filters/compose.c": [
          "File: src/filters/compose.c -> src/filters/compose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:   merge_properties(ctx, pid, mtype, odm->parentscene);",
          "280:   if (notify_quality) {",
          "286:   }",
          "288:   return GF_OK;",
          "",
          "[Removed Lines]",
          "281:    GF_Event evt;",
          "282:    memset(&evt, 0, sizeof(GF_Event));",
          "283:    evt.type = GF_EVENT_QUALITY_SWITCHED;",
          "285:    gf_filter_forward_gf_event(filter, &evt, GF_FALSE, GF_FALSE);",
          "",
          "[Added Lines]",
          "281:    GF_Event gevt;",
          "282:    memset(&gevt, 0, sizeof(GF_Event));",
          "283:    gevt.type = GF_EVENT_QUALITY_SWITCHED;",
          "284:    gf_filter_forward_gf_event(filter, &gevt, GF_FALSE, GF_FALSE);",
          "",
          "---------------"
        ],
        "src/filters/dasher.c||src/filters/dasher.c": [
          "File: src/filters/dasher.c -> src/filters/dasher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5934:   if (ctx->mha_compat && ((ds->codec_id==GF_CODECID_MHAS) || (ds->codec_id==GF_CODECID_MPHA))) {",
          "5936:    if (prop) {",
          "5937:     ds->set->nb_alt_mha_profiles = prop->value.uint_list.nb_items;",
          "5938:     ds->set->alt_mha_profiles = prop->value.uint_list.vals;",
          "",
          "[Removed Lines]",
          "5935:    const GF_PropertyValue *prop = gf_filter_pid_get_property(ds->ipid, GF_PROP_PID_MHA_COMPATIBLE_PROFILES);",
          "",
          "[Added Lines]",
          "5935:    prop = gf_filter_pid_get_property(ds->ipid, GF_PROP_PID_MHA_COMPATIBLE_PROFILES);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8233:    if (ds->dyn_bitrate) {",
          "8234:     u32 dsize;",
          "8236:     gf_filter_pck_get_data(pck, &dsize);",
          "8237:     if (!ds->rate_first_dts_plus_one)",
          "8240:     ds->rate_media_size += dsize;",
          "8241:    }",
          "",
          "[Removed Lines]",
          "8235:     u64 dts = gf_filter_pck_get_dts(pck);",
          "8238:      ds->rate_first_dts_plus_one = 1 + dts;",
          "8239:     ds->rate_last_dts = dts;",
          "",
          "[Added Lines]",
          "8235:     u64 rdts = gf_filter_pck_get_dts(pck);",
          "8238:      ds->rate_first_dts_plus_one = 1 + rdts;",
          "8239:     ds->rate_last_dts = rdts;",
          "",
          "---------------"
        ],
        "src/filters/dec_mad.c||src/filters/dec_mad.c": [
          "File: src/filters/dec_mad.c -> src/filters/dec_mad.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:   if (!pck) return GF_OK;",
          "228:   if (ctx->stream.error==MAD_ERROR_BUFLEN) {",
          "234:    return GF_OK;",
          "235:   }",
          "236:   GF_LOG(GF_LOG_ERROR, GF_LOG_CODEC, (\"[MAD] Decoding failed error %s (%d)\\n\", mad_stream_errorstr(&ctx->stream), ctx->stream.error ) );",
          "",
          "[Removed Lines]",
          "229:    if (pck) {",
          "230:     ctx->last_cts = gf_filter_pck_get_cts(pck);",
          "231:     ctx->timescale = gf_filter_pck_get_timescale(pck);",
          "232:     gf_filter_pid_drop_packet(ctx->ipid);",
          "233:    }",
          "",
          "[Added Lines]",
          "229:    ctx->last_cts = gf_filter_pck_get_cts(pck);",
          "230:    ctx->timescale = gf_filter_pck_get_timescale(pck);",
          "231:    gf_filter_pid_drop_packet(ctx->ipid);",
          "",
          "---------------"
        ],
        "src/filters/dec_openhevc.c||src/filters/dec_openhevc.c": [
          "File: src/filters/dec_openhevc.c -> src/filters/dec_openhevc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "928:   }",
          "930:   if (oh_output_update(ctx->codec, 1, &openHFrame)) {",
          "933:    s_stride = openHFrame.frame_par.linesize_y;",
          "934:    qs_stride = s_stride / 4;",
          "",
          "[Removed Lines]",
          "931:    u32 i, s_stride, hs_stride, qs_stride, d_stride, dd_stride, hd_stride;",
          "",
          "[Added Lines]",
          "931:    u32 s_stride, hs_stride, qs_stride, d_stride, dd_stride, hd_stride;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1123:  if (ctx->check_hybrid_clock) {",
          "1124:   GF_FilterPacket *pck = gf_filter_pid_get_packet(ctx->streams[0].ipid);",
          "1126:   while (pck) {",
          "1127:    GF_BitStream *bs;",
          "1128:    u32 p4cc;",
          "",
          "[Removed Lines]",
          "1125:   u32 idx=0;",
          "",
          "[Added Lines]",
          "1125:   idx=0;",
          "",
          "---------------"
        ],
        "src/filters/filelist.c||src/filters/filelist.c": [
          "File: src/filters/filelist.c -> src/filters/filelist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1105:    ctx->dts_sub_plus_one.num = 1;",
          "1106:    ctx->dts_sub_plus_one.den = 1;",
          "1107:    for (i=0; i<count; i++) {",
          "1109:     iopid->splice_ready = GF_TRUE;",
          "1110:    }",
          "1111:    return GF_OK;",
          "",
          "[Removed Lines]",
          "1108:     FileListPid *iopid = gf_list_get(ctx->io_pids, i);",
          "",
          "[Added Lines]",
          "1108:     iopid = gf_list_get(ctx->io_pids, i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1629:     break;",
          "1631:    if (ctx->keep_splice) {",
          "1634:    }",
          "1635:    gf_filter_pid_drop_packet(iopid->splice_ipid);",
          "1636:   }",
          "",
          "[Removed Lines]",
          "1632:     GF_FilterPacket *pck = gf_filter_pid_get_packet(iopid->splice_ipid);",
          "1633:     filelist_forward_splice_pck(iopid, pck);",
          "",
          "[Added Lines]",
          "1632:     GF_FilterPacket *splice_pck = gf_filter_pid_get_packet(iopid->splice_ipid);",
          "1633:     filelist_forward_splice_pck(iopid, splice_pck);",
          "",
          "---------------"
        ],
        "src/filters/in_rtp_sdp.c||src/filters/in_rtp_sdp.c": [
          "File: src/filters/in_rtp_sdp.c -> src/filters/in_rtp_sdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:  u32 i;",
          "314:  GF_SDPInfo *sdp;",
          "315:  Bool is_isma_1;",
          "317:  GF_X_Attribute *att;",
          "318:  Bool force_in_iod = GF_FALSE;",
          "320:  is_isma_1 = GF_FALSE;",
          "322:  sdp = gf_sdp_info_new();",
          "323:  e = gf_sdp_info_parse(sdp, sdp_text, sdp_len);",
          "",
          "[Removed Lines]",
          "316:  char *iod_str;",
          "321:  iod_str = NULL;",
          "",
          "[Added Lines]",
          "316: #if 0",
          "317:  char *iod_str = NULL;",
          "318: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:   i=0;",
          "343:   while ((att = (GF_X_Attribute*)gf_list_enum(sdp->Attributes, &i))) {",
          "344:    if (!iod_str && !strcmp(att->Name, \"mpeg4-iod\") ) iod_str = att->Value;",
          "345:    if (!is_isma_1 && !strcmp(att->Name, \"isma-compliance\") ) {",
          "346:     if (!stricmp(att->Value, \"1,1.0,1\")) is_isma_1 = GF_TRUE;",
          "347:    }",
          "348:   }",
          "355:    GF_RTPInStream *a_stream;",
          "356:    i=0;",
          "357:    while (!force_in_iod && (a_stream = (GF_RTPInStream *)gf_list_enum(rtp->streams, &i))) {",
          "",
          "[Removed Lines]",
          "352:   iod_str = NULL; //we always force scene reconstruction",
          "354:   if (!iod_str) {",
          "",
          "[Added Lines]",
          "345: #if 0",
          "347: #endif",
          "353: #if 0",
          "355:   if (is_isma_1) iod_str = NULL;",
          "357:   if (iod_str) {",
          "358:    e = rtpin_sdp_load_iod(rtp, iod_str);",
          "359:   } else",
          "360: #endif",
          "361:   {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:    }",
          "369:   }",
          "375:   if (e) gf_filter_setup_failure(rtp->filter, e);",
          "376:   else rtpin_declare_media(rtp, force_in_iod);",
          "",
          "[Removed Lines]",
          "371: #if 0",
          "372:   if (iod_str) e = rtpin_sdp_load_iod(rtp, iod_str);",
          "373: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/filters/inspect.c||src/filters/inspect.c": [
          "File: src/filters/inspect.c -> src/filters/inspect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2755:  if (pctx->hevc_state || pctx->avc_state || pctx->vvc_state) {",
          "2756:   idx=1;",
          "2759:    u8 encrypted_au = data[0];",
          "2760:    if (encrypted_au) {",
          "2761:     gf_fprintf(dump, \"   <!-- Packet is an Adobe's protected frame and can not be dumped -->\\n\");",
          "",
          "[Removed Lines]",
          "2758:   if (pctx->is_adobe_protected && size) {",
          "",
          "[Added Lines]",
          "2758:   if (pctx->is_adobe_protected) {",
          "",
          "---------------"
        ],
        "src/filters/jsfilter.c||src/filters/jsfilter.c": [
          "File: src/filters/jsfilter.c -> src/filters/jsfilter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044:   return JS_NULL;",
          "1045:  case JSF_FILTER_PATH:",
          "1046:  {",
          "1048:   char c=0;",
          "1049:   char *path = (char *) jsf_get_script_filename(ctx);",
          "1050:   if (!path) return JS_NULL;",
          "",
          "[Removed Lines]",
          "1047:   JSValue res;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/filters/mux_isom.c||src/filters/mux_isom.c": [
          "File: src/filters/mux_isom.c -> src/filters/mux_isom.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5670:      gf_filter_pid_drop_packet(tkw->ipid);",
          "5671:      goto retry_pck;",
          "5672:     } else {",
          "5676:      if (!ctx->wait_dts_plus_one) {",
          "5677:       ctx->wait_dts_plus_one = 1 + gf_filter_pck_get_dts(pck);",
          "",
          "[Removed Lines]",
          "5673:      if (sap)",
          "5674:       tkw->wait_sap = GF_FALSE;",
          "",
          "[Added Lines]",
          "5673:      tkw->wait_sap = GF_FALSE;",
          "",
          "---------------"
        ],
        "src/filters/reframe_av1.c||src/filters/reframe_av1.c": [
          "File: src/filters/reframe_av1.c -> src/filters/reframe_av1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1132:        nb_units++;",
          "1133:      } else {",
          "1136:        res = GF_TRUE;",
          "1138:       }",
          "",
          "[Removed Lines]",
          "1135:       if (nb_units && has_seq_header) {",
          "",
          "[Added Lines]",
          "1135:       if (has_seq_header) {",
          "",
          "---------------"
        ],
        "src/filters/reframer.c||src/filters/reframer.c": [
          "File: src/filters/reframer.c -> src/filters/reframer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "919:     gf_filter_pck_set_seek_flag(new_pck, GF_TRUE);",
          "920:     gf_filter_pck_set_property(new_pck, GF_PROP_PCK_SKIP_BEGIN, NULL);",
          "921:     if (st->stream_type!=GF_STREAM_VISUAL) {",
          "924:       u32 ts_diff = (u32) ( gf_timestamp_rescale(ctx->cur_start.num, ctx->cur_start.den, st->timescale) - (ts + ts_adj - st->ts_sub));",
          "925:       gf_filter_pck_set_property(new_pck, GF_PROP_PCK_SKIP_BEGIN, &PROP_UINT(ts_diff));",
          "926:       gf_filter_pck_set_seek_flag(new_pck, GF_FALSE);",
          "",
          "[Removed Lines]",
          "922:      u32 dur = gf_filter_pck_get_duration(new_pck);",
          "923:      if (gf_timestamp_greater(ts + ts_adj + dur - st->ts_sub, st->timescale, ctx->cur_start.num, ctx->cur_start.den)) {",
          "",
          "[Added Lines]",
          "922:      u32 pck_dur = gf_filter_pck_get_duration(new_pck);",
          "923:      if (gf_timestamp_greater(ts + ts_adj + pck_dur - st->ts_sub, st->timescale, ctx->cur_start.num, ctx->cur_start.den)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "958:   if (st->split_start) {",
          "959:    if (!dur) {",
          "965:    }",
          "966:    st->ts_at_range_start_plus_one += st->split_start;",
          "967:    st->split_start = 0;",
          "",
          "[Removed Lines]",
          "960:     u32 dur = gf_filter_pck_get_duration(pck);",
          "962:     if (dur > st->split_start)",
          "963:      dur -= st->split_start;",
          "964:     gf_filter_pck_set_duration(new_pck, dur);",
          "",
          "[Added Lines]",
          "960:     u32 pck_dur = gf_filter_pck_get_duration(pck);",
          "962:     if (pck_dur > st->split_start)",
          "963:      pck_dur -= st->split_start;",
          "964:     gf_filter_pck_set_duration(new_pck, pck_dur);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "977:   }",
          "979:   if (!st->can_split && !is_split && st->reinsert_single_pck) {",
          "982:    if (st->range_end_reached_ts) {",
          "983:     u64 ndur = st->range_end_reached_ts;",
          "",
          "[Removed Lines]",
          "980:    u32 dur = gf_filter_pck_get_duration(pck);",
          "",
          "[Added Lines]",
          "980:    dur = gf_filter_pck_get_duration(pck);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1402:     ctx->in_range = GF_TRUE;",
          "1403:     return;",
          "1405:     ctx->in_range = GF_TRUE;",
          "1406:     return;",
          "1407:    }",
          "",
          "[Removed Lines]",
          "1404:    } else if (nb_eos && (ctx->min_ts_computed == ctx->prev_min_ts_computed)) {",
          "",
          "[Added Lines]",
          "1404:    } else if (ctx->min_ts_computed == ctx->prev_min_ts_computed) {",
          "",
          "---------------"
        ],
        "src/filters/write_generic.c||src/filters/write_generic.c": [
          "File: src/filters/write_generic.c -> src/filters/write_generic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "993:  ctx->sample_num++;",
          "995:  if (ctx->dash_mode && ctx->ttml_agg && gf_filter_pck_get_property(pck, GF_PROP_PCK_FILENUM)) {",
          "999:   if (ctx->ttml_dash_pck) {",
          "1000:    gf_filter_pck_unref(ctx->ttml_dash_pck);",
          "1001:    ctx->ttml_dash_pck = NULL;",
          "1002:   }",
          "",
          "[Removed Lines]",
          "996:   if (ctx->ttml_dash_pck)",
          "997:    writegen_flush_ttml(ctx);",
          "",
          "[Added Lines]",
          "997:    writegen_flush_ttml(ctx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1107:    gf_dynstrcat(&y4m_hdr, \"FRAME\\n\", NULL);",
          "1108:   }",
          "1109:   u8 * output;",
          "1111:   dst_pck = gf_filter_pck_new_alloc(ctx->opid, pck_size + len, &output);",
          "1112:   if (!dst_pck) return GF_OUT_OF_MEM;",
          "1114:   memcpy(output+len, data, pck_size);",
          "1115:   if (ctx->split)",
          "1116:    ctx->is_y4m=1;",
          "",
          "[Removed Lines]",
          "1110:   u32 len = (u32) strlen(y4m_hdr);",
          "1113:   memcpy(output, y4m_hdr, len);",
          "",
          "[Added Lines]",
          "1108:   u32 len = y4m_hdr ? (u32) strlen(y4m_hdr) : 0;",
          "1111:   if (y4m_hdr) memcpy(output, y4m_hdr, len);",
          "",
          "---------------"
        ],
        "src/isomedia/box_dump.c||src/isomedia/box_dump.c": [
          "File: src/isomedia/box_dump.c -> src/isomedia/box_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4874:   case GF_ISOM_SAMPLE_GROUP_SPOR:",
          "4875:   {",
          "4876:    GF_SubpictureOrderEntry *spor = (GF_SubpictureOrderEntry *) entry;",
          "4878:    gf_fprintf(trace, \"<SubPictureOrderEntry subpic_id_info_flag=\\\"%d\\\" refs=\\\"\", spor->subpic_id_info_flag);",
          "4879:    for (i=0; i<spor->num_subpic_ref_idx; i++) {",
          "4880:     if (i) gf_fprintf(trace, \" \");",
          "",
          "[Removed Lines]",
          "4877:    u32 i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4891:   case GF_ISOM_SAMPLE_GROUP_SULM:",
          "4892:   {",
          "4893:    GF_SubpictureLayoutMapEntry *sulm = (GF_SubpictureLayoutMapEntry *) entry;",
          "4895:    gf_fprintf(trace, \"<SubPictureLayoutMapEntry groupID_info_4cc=\\\"%s\\\" groupIDs=\\\"\", gf_4cc_to_str(sulm->groupID_info_4cc) );",
          "4896:    for (i=0; i<sulm->nb_entries; i++) {",
          "4897:     if (i) gf_fprintf(trace, \" \");",
          "",
          "[Removed Lines]",
          "4894:    u32 i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/isomedia/hint_track.c||src/isomedia/hint_track.c": [
          "File: src/isomedia/hint_track.c -> src/isomedia/hint_track.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: u32 GetHintFormat(GF_TrackBox *trak)",
          "44: {",
          "45:  GF_HintMediaHeaderBox *hmhd = (GF_HintMediaHeaderBox *)trak->Media->information->InfoHeader;",
          "47:   return 0;",
          "49:  if (!hmhd || !hmhd->subType) {",
          "",
          "[Removed Lines]",
          "46:  if (!hmhd || (hmhd->type != GF_ISOM_BOX_TYPE_HMHD))",
          "",
          "[Added Lines]",
          "46:  if (hmhd && (hmhd->type != GF_ISOM_BOX_TYPE_HMHD))",
          "",
          "---------------"
        ],
        "src/isomedia/iff.c||src/isomedia/iff.c": [
          "File: src/isomedia/iff.c -> src/isomedia/iff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1743:  grid_bs = gf_bs_new(NULL, 0, GF_BITSTREAM_WRITE);",
          "1744:  if (!grid_bs) return GF_OUT_OF_MEM;",
          "1745:  gf_bs_write_u8(grid_bs, 0); //version",
          "1747:  gf_bs_write_u8(grid_bs, image_props->num_grid_rows-1);",
          "1748:  gf_bs_write_u8(grid_bs, image_props->num_grid_columns-1);",
          "1749:  gf_bs_write_u16(grid_bs, image_props->width);",
          "",
          "[Removed Lines]",
          "1746:  gf_bs_write_u8(grid_bs, (image_props->width > 1<<16 || image_props->width > 1<<16) ? 1 : 0); // flags",
          "",
          "[Added Lines]",
          "1746:  gf_bs_write_u8(grid_bs, (image_props->width > 1<<16 || image_props->height > 1<<16) ? 1 : 0); // flags",
          "",
          "---------------"
        ],
        "src/isomedia/isom_store.c||src/isomedia/isom_store.c": [
          "File: src/isomedia/isom_store.c -> src/isomedia/isom_store.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "776:    }",
          "777:   }",
          "780:    continue;",
          "781:   }",
          "",
          "[Removed Lines]",
          "779:   if (iinf->ref_it_id) {",
          "",
          "[Added Lines]",
          "779:   if (!iinf || iinf->ref_it_id) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "788:    }",
          "792:     FILE *src=NULL;",
          "794:     if (!iinf->data_len && iinf->full_path) {",
          "",
          "[Removed Lines]",
          "791:    if (iinf && (iinf->full_path || (iinf->tk_id && iinf->sample_num))) {",
          "",
          "[Added Lines]",
          "791:    if (iinf->full_path || (iinf->tk_id && iinf->sample_num)) {",
          "",
          "---------------"
        ],
        "src/isomedia/meta.c||src/isomedia/meta.c": [
          "File: src/isomedia/meta.c -> src/isomedia/meta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:   }",
          "342:   nb_assoc = gf_list_count(meta->item_props->property_association->entries);",
          "343:   for (i=0; i<nb_assoc; i++) {",
          "348:     if (! idx) continue;",
          "349:     hvcc = gf_list_get(meta->item_props->property_container->child_boxes, idx - 1);",
          "350:     if (!hvcc) {",
          "",
          "[Removed Lines]",
          "344:    GF_ItemPropertyAssociationEntry *e = gf_list_get(meta->item_props->property_association->entries, i);",
          "345:    if (e->item_id!=item_id) continue;",
          "346:    for (j=0; j<e->nb_associations; j++) {",
          "347:     u32 idx = e->associations[j].index;",
          "",
          "[Added Lines]",
          "344:    GF_ItemPropertyAssociationEntry *ent = gf_list_get(meta->item_props->property_association->entries, i);",
          "345:    if (ent->item_id!=item_id) continue;",
          "346:    for (j=0; j<ent->nb_associations; j++) {",
          "347:     u32 idx = ent->associations[j].index;",
          "",
          "---------------"
        ],
        "src/jsmods/evg.c||src/jsmods/evg.c": [
          "File: src/jsmods/evg.c -> src/jsmods/evg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7096:  if (!mx)",
          "7097:   return GF_JS_EXCEPTION(ctx);",
          "7098:  if (argc) {",
          "7100:   if (!mx2)",
          "7101:    return GF_JS_EXCEPTION(ctx);",
          "7102:   gf_mx_copy(*mx, *mx2);",
          "",
          "[Removed Lines]",
          "7099:   GF_Matrix *mx2 = JS_GetOpaque(argv[0], matrix_class_id);",
          "",
          "[Added Lines]",
          "7099:   mx2 = JS_GetOpaque(argv[0], matrix_class_id);",
          "",
          "---------------"
        ],
        "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c": [
          "File: src/media_tools/av_parsers.c -> src/media_tools/av_parsers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9709:   gf_bs_read_int_log(bs, 1, \"general_same_pic_timing_in_all_ols_flag\");",
          "9711:   if (*general_du_hrd_params_present_flag)",
          "",
          "[Removed Lines]",
          "9708:  if (general_nal_hrd_params_present_flag || general_vcl_hrd_params_present_flag) {",
          "",
          "[Added Lines]",
          "9708:  if (*general_nal_hrd_params_present_flag || *general_vcl_hrd_params_present_flag) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11173:  }",
          "11175:  si->poc = si->poc_msb + si->poc_lsb;",
          "11178: }",
          "",
          "[Removed Lines]",
          "11176:  if (si->poc<0)",
          "11177:   si->poc = si->poc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/scenegraph/base_scenegraph.c||src/scenegraph/base_scenegraph.c": [
          "File: src/scenegraph/base_scenegraph.c -> src/scenegraph/base_scenegraph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "725:  assert(pNode->sgprivate->parents==NULL);",
          "727:  if (pSG) {",
          "730:   if (pNode->sgprivate->flags & GF_NODE_IS_DEF) {",
          "731:    remove_node_id(pSG, pNode);",
          "",
          "[Removed Lines]",
          "728:   GF_Route *r;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "734: #ifndef GPAC_DISABLE_VRML",
          "736:   j=0;",
          "737:   while ((r = (GF_Route *)gf_list_enum(pSG->Routes, &j))) {",
          "738:    if ( (r->ToNode == pNode) || (r->FromNode == pNode)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "735:   GF_Route *r;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1870:   gf_node_free(node);",
          "1871:  }",
          "1872:  else if (node->sgprivate->tag==TAG_DOMUpdates) {",
          "1874:   GF_DOMUpdates *up = (GF_DOMUpdates *)node;",
          "1875:   if (up->data) gf_free(up->data);",
          "1877: #ifndef GPAC_DISABLE_VRML",
          "1878:   for (i=0; i<count; i++) {",
          "1879:    GF_Command *com = gf_list_get(up->updates, i);",
          "1880:    gf_sg_command_del(com);",
          "",
          "[Removed Lines]",
          "1873:   u32 i, count;",
          "1876:   count = gf_list_count(up->updates);",
          "",
          "[Added Lines]",
          "1876:   u32 i, count = gf_list_count(up->updates);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2367: GF_Err gf_node_replace_child(GF_Node *node, GF_ChildNodeItem **container, s32 pos, GF_Node *newNode)",
          "2368: {",
          "2369:  GF_ChildNodeItem *child, *prev;",
          "2370:  u32 tag;",
          "2371:  u32 cur_pos = 0;",
          "2373:  child = *container;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2369: #ifndef GPAC_DISABLE_VRML",
          "2371: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2381:   }",
          "2382:   break;",
          "2383:  }",
          "2384:  tag = child->node->sgprivate->tag;",
          "2385:  gf_node_unregister(child->node, node);",
          "2386:  if (newNode) {",
          "2387:   child->node = newNode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2385: #ifndef GPAC_DISABLE_VRML",
          "2387: #endif",
          "",
          "---------------"
        ],
        "src/scenegraph/svg_js.c||src/scenegraph/svg_js.c": [
          "File: src/scenegraph/svg_js.c -> src/scenegraph/svg_js.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2760:  GF_DOMHandler *hdl = (GF_DOMHandler *)node;",
          "2761:  JSContext *ctx;",
          "2764:   return;",
          "2765:  }",
          "2766:  ctx = hdl->js_data->ctx;",
          "",
          "[Removed Lines]",
          "2763:  if (!hdl->js_data || !hdl->js_data->ctx || (JS_IsUndefined(hdl->js_data->fun_val) && JS_IsUndefined(hdl->js_data->evt_listen_obj))) {",
          "",
          "[Added Lines]",
          "2763:  if (!hdl || !hdl->js_data || !hdl->js_data->ctx",
          "2764:   || (JS_IsUndefined(hdl->js_data->fun_val) && JS_IsUndefined(hdl->js_data->evt_listen_obj))",
          "2765:  ) {",
          "",
          "---------------"
        ],
        "src/utils/os_config_init.c||src/utils/os_config_init.c": [
          "File: src/utils/os_config_init.c -> src/utils/os_config_init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1898:    else if (gen_doc==2) {",
          "1899:     line+=3;",
          "1900:     header_string = \".SS \";",
          "1902:    }",
          "1904:    console_code = GF_CONSOLE_MAGENTA;",
          "",
          "[Removed Lines]",
          "1901:     header_string = \".P\\n.B\\n\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}