{
  "cve_id": "CVE-2018-11363",
  "cve_desc": "jpeg_size in pdfgen.c in PDFGen before 2018-04-09 has a heap-based buffer over-read.",
  "repo": "AndreRenaud/PDFGen",
  "patch_hash": "ee58aff6918b8bbc3be29b9e3089485ea46ff956",
  "patch_info": {
    "commit_hash": "ee58aff6918b8bbc3be29b9e3089485ea46ff956",
    "repo": "AndreRenaud/PDFGen",
    "commit_url": "https://github.com/AndreRenaud/PDFGen/commit/ee58aff6918b8bbc3be29b9e3089485ea46ff956",
    "files": [
      "pdfgen.c"
    ],
    "message": "jpeg: Fix another possible buffer overrun\n\nFound via the clang libfuzzer",
    "before_after_code_files": [
      "pdfgen.c||pdfgen.c"
    ]
  },
  "patch_diff": {
    "pdfgen.c||pdfgen.c": [
      "File: pdfgen.c -> pdfgen.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2036:                     return 0;",
      "2037:                 }",
      "2038:                 i+=2;",
      "2040:             }",
      "2041:         }",
      "2042:     }",
      "",
      "[Removed Lines]",
      "2039:                 block_length = data[i] * 256 + data[i+1];",
      "",
      "[Added Lines]",
      "2039:                 if (i + 1 < data_size)",
      "2040:                     block_length = data[i] * 256 + data[i+1];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8f9b3202f67feb386c9974520d9bcc4531350fff",
      "candidate_info": {
        "commit_hash": "8f9b3202f67feb386c9974520d9bcc4531350fff",
        "repo": "AndreRenaud/PDFGen",
        "commit_url": "https://github.com/AndreRenaud/PDFGen/commit/8f9b3202f67feb386c9974520d9bcc4531350fff",
        "files": [
          "pdfgen.c"
        ],
        "message": "jpeg: Fix another buffer overflow",
        "before_after_code_files": [
          "pdfgen.c||pdfgen.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pdfgen.c||pdfgen.c"
          ],
          "candidate": [
            "pdfgen.c||pdfgen.c"
          ]
        }
      },
      "candidate_diff": {
        "pdfgen.c||pdfgen.c": [
          "File: pdfgen.c -> pdfgen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2026:             unsigned short block_length = data[i] * 256 + data[i+1];",
          "2027:             while(i<data_size) {",
          "2028:                 i+=block_length;",
          "2030:                     return -1;",
          "2031:                 if(data[i] != 0xFF)",
          "2032:                     return -1;",
          "",
          "[Removed Lines]",
          "2029:                 if((i + 1) >= data_size)",
          "",
          "[Added Lines]",
          "2029:                 if((i + 8) >= data_size)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2036:                     return 0;",
          "2037:                 }",
          "2038:                 i+=2;",
          "2041:             }",
          "2042:         }",
          "2043:     }",
          "",
          "[Removed Lines]",
          "2039:                 if (i + 1 < data_size)",
          "2040:                     block_length = data[i] * 256 + data[i+1];",
          "",
          "[Added Lines]",
          "2039:                 block_length = data[i] * 256 + data[i+1];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3729d221a92df33adc592fbc5f0fbd3bccd3d39",
      "candidate_info": {
        "commit_hash": "c3729d221a92df33adc592fbc5f0fbd3bccd3d39",
        "repo": "AndreRenaud/PDFGen",
        "commit_url": "https://github.com/AndreRenaud/PDFGen/commit/c3729d221a92df33adc592fbc5f0fbd3bccd3d39",
        "files": [
          ".circleci/config.yml",
          "Dockerfile",
          "Makefile",
          "main.c",
          "pdfgen.c",
          "pdfgen.h"
        ],
        "message": "Moved over from astyle to clang-format\n\nThis does a better job of formatting. Unfortunately this will result in\na big whitespace reshuffle in this commit.",
        "before_after_code_files": [
          "main.c||main.c",
          "pdfgen.c||pdfgen.c",
          "pdfgen.h||pdfgen.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pdfgen.c||pdfgen.c"
          ],
          "candidate": [
            "pdfgen.c||pdfgen.c"
          ]
        }
      },
      "candidate_diff": {
        "main.c||main.c": [
          "File: main.c -> main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: int main(int argc, char *argv[])",
          "7: {",
          "16:     struct pdf_doc *pdf = pdf_create(PDF_A4_WIDTH, PDF_A4_HEIGHT, &info);",
          "17:     int i;",
          "18:     int height;",
          "",
          "[Removed Lines]",
          "8:     struct pdf_info info = {",
          "9:         .creator = \"My software\",",
          "10:         .producer = \"My software\",",
          "11:         .title = \"My document\",",
          "12:         .author = \"My name\",",
          "13:         .subject = \"My subject\",",
          "14:         .date = \"Today\"",
          "15:     };",
          "",
          "[Added Lines]",
          "8:     struct pdf_info info = {.creator = \"My software\",",
          "9:                             .producer = \"My software\",",
          "10:                             .title = \"My document\",",
          "11:                             .author = \"My name\",",
          "12:                             .subject = \"My subject\",",
          "13:                             .date = \"Today\"};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:     (void)argc;",
          "24:     (void)argv;",
          "29:         return -1;",
          "30:     }",
          "",
          "[Removed Lines]",
          "26:     if (pdf_width(pdf) != PDF_A4_WIDTH ||",
          "27:             pdf_height(pdf) != PDF_A4_HEIGHT) {",
          "28:         fprintf(stderr, \"PDF Size mismatch: %dx%d\\n\", pdf_width(pdf), pdf_height(pdf));",
          "",
          "[Added Lines]",
          "24:     if (pdf_width(pdf) != PDF_A4_WIDTH || pdf_height(pdf) != PDF_A4_HEIGHT) {",
          "25:         fprintf(stderr, \"PDF Size mismatch: %dx%d\\n\", pdf_width(pdf),",
          "26:                 pdf_height(pdf));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:     if (pdf_add_jpeg(pdf, NULL, 100, 500, 50, 150, \"penguin.jpg\") >= 0)",
          "43:         return -1;",
          "46:         return -1;",
          "48:     if (pdf_add_bookmark(pdf, NULL, -1, \"Another Page\") >= 0)",
          "",
          "[Removed Lines]",
          "45:     if (pdf_add_text(pdf, NULL, \"Page One\", 10, 20, 30, PDF_RGB(0xff, 0, 0)) >= 0)",
          "",
          "[Added Lines]",
          "43:     if (pdf_add_text(pdf, NULL, \"Page One\", 10, 20, 30,",
          "44:                      PDF_RGB(0xff, 0, 0)) >= 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "57:     pdf_set_font(pdf, \"Times-BoldItalic\");",
          "58:     pdf_append_page(pdf);",
          "68:     pdf_add_ppm(pdf, NULL, 10, 10, 20, 30, \"teapot.ppm\");",
          "70:     pdf_add_jpeg(pdf, NULL, 100, 500, 50, 150, \"penguin.jpg\");",
          "75:     pdf_add_text(pdf, NULL, \"Page One\", 10, 20, 30, PDF_RGB(0xff, 0, 0));",
          "76:     pdf_add_text(pdf, NULL, \"PjGQji\", 18, 20, 130, PDF_RGB(0, 0xff, 0xff));",
          "77:     pdf_add_line(pdf, NULL, 10, 24, 100, 24, 4, PDF_RGB(0xff, 0, 0));",
          "80:     pdf_add_rectangle(pdf, NULL, 150, 150, 100, 100, 4, PDF_RGB(0, 0, 0xff));",
          "82:     pdf_add_text(pdf, NULL, \"\", 20, 20, 30, PDF_RGB(0, 0, 0));",
          "85:     pdf_add_bookmark(pdf, NULL, -1, \"First page\");",
          "87:     pdf_append_page(pdf);",
          "88:     pdf_add_text(pdf, NULL, \"Page Two\", 10, 20, 30, PDF_RGB(0, 0, 0));",
          "94:     pdf_set_font(pdf, \"Helvetica-Bold\");",
          "96:     pdf_set_font(pdf, \"ZapfDingbats\");",
          "99:     pdf_set_font(pdf, \"Courier-Bold\");",
          "101:     pdf_add_text(pdf, NULL, \"\", 8, 437, 546, PDF_RGB(0, 0, 0));",
          "102:     pdf_add_text(pdf, NULL, \"Pass\", 8, 567, 556, PDF_RGB(0, 0, 0));",
          "105:     bm = pdf_add_bookmark(pdf, NULL, -1, \"Another Page\");",
          "106:     bm = pdf_add_bookmark(pdf, NULL, bm, \"Another Page again\");",
          "",
          "[Removed Lines]",
          "60:     height = pdf_add_text_wrap(pdf, NULL,",
          "61:                                \"This is a great big long string that I hope will wrap properly \"",
          "62:                                \"around several lines.\\nI've put some embedded line breaks in to \"",
          "63:                                \"see how it copes with them. Hopefully it all works properly.\\n\\n\\n\"",
          "64:                                \"We even include multiple breaks\\n\"",
          "65:                                \"thisisanenourmouswordthatwillneverfitandwillhavetobecut\",",
          "66:                                16, 60, 600, PDF_RGB(0, 0, 0), 300, PDF_ALIGN_CENTER);",
          "67:     pdf_add_rectangle(pdf, NULL, 58, 600 + 16, 304, -height, 2, PDF_RGB(0, 0, 0));",
          "72:     pdf_add_barcode(pdf, NULL, PDF_BARCODE_128A, 50, 300, 200, 50, \"Code128\", PDF_RGB(0, 0, 0));",
          "73:     pdf_add_barcode(pdf, NULL, PDF_BARCODE_39, 50, 400, 400, 50, \"CODE39\", PDF_RGB(0, 0, 0));",
          "78:     pdf_add_circle(pdf, NULL, 100, 240, 50, 5, PDF_RGB(0xff, 0, 0), PDF_TRANSPARENT);",
          "79:     pdf_add_ellipse(pdf, NULL, 100, 240, 40, 30, 2, PDF_RGB(0xff, 0xff, 0), PDF_RGB(0, 0, 0));",
          "81:     pdf_add_filled_rectangle(pdf, NULL, 150, 450, 100, 100, 4, PDF_RGB(0, 0xff, 0));",
          "83:     pdf_add_text(pdf, NULL, \"Date (YYYY-MM-DD):\", 20, 220, 30, PDF_RGB(0, 0, 0));",
          "89:     pdf_add_text(pdf, NULL, \"This is some weird text () \\\\ # : - Wi-Fi\", 10, 50, 60, PDF_RGB(0, 0, 0));",
          "90:     pdf_add_text(pdf, NULL, \"Control characters ( ) < > [ ] { } / % \\n \\r \\t \\b \\f ending\", 10, 50, 45, PDF_RGB(0, 0, 0));",
          "91:     pdf_add_text(pdf, NULL, \"Special characters: \u20ac\u00dc\u017d\u017e\u0160\u0161\u00c1\u00e1\u00fc\u00f6\u00e4\u00c4\u00dc\u00d6\u00df\", 10, 50, 15, PDF_RGB(0, 0, 0));",
          "92:     pdf_add_text(pdf, NULL, \"This one has a new line in it\\nThere it was\", 10, 50, 80, PDF_RGB(0, 0, 0));",
          "93:     pdf_add_text(pdf, NULL, \"This is a really long line that will go off the edge of the screen, because it is so long. I like long text. The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the lazy dog\", 10, 100, 100, PDF_RGB(0, 0, 0));",
          "95:     pdf_add_text(pdf, NULL, \"This is a really long line that will go off the edge of the screen, because it is so long. I like long text. The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the lazy dog\", 10, 100, 130, PDF_RGB(0, 0, 0));",
          "97:     pdf_add_text(pdf, NULL, \"This is a really long line that will go off the edge of the screen, because it is so long. I like long text. The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the lazy dog\", 10, 100, 150, PDF_RGB(0, 0, 0));",
          "100:     pdf_add_text(pdf, NULL, \"(5.6.5) RS232 shutdown\", 8, 317, 546, PDF_RGB(0, 0, 0));",
          "103:     pdf_add_text(pdf, NULL, \"(5.6.3) RS485 pins\", 8, 317, 556, PDF_RGB(0, 0, 0));",
          "",
          "[Added Lines]",
          "59:     height = pdf_add_text_wrap(",
          "60:         pdf, NULL,",
          "61:         \"This is a great big long string that I hope will wrap properly \"",
          "62:         \"around several lines.\\nI've put some embedded line breaks in to \"",
          "63:         \"see how it copes with them. Hopefully it all works properly.\\n\\n\\n\"",
          "64:         \"We even include multiple breaks\\n\"",
          "65:         \"thisisanenourmouswordthatwillneverfitandwillhavetobecut\",",
          "66:         16, 60, 600, PDF_RGB(0, 0, 0), 300, PDF_ALIGN_CENTER);",
          "67:     pdf_add_rectangle(pdf, NULL, 58, 600 + 16, 304, -height, 2,",
          "68:                       PDF_RGB(0, 0, 0));",
          "73:     pdf_add_barcode(pdf, NULL, PDF_BARCODE_128A, 50, 300, 200, 50, \"Code128\",",
          "74:                     PDF_RGB(0, 0, 0));",
          "75:     pdf_add_barcode(pdf, NULL, PDF_BARCODE_39, 50, 400, 400, 50, \"CODE39\",",
          "76:                     PDF_RGB(0, 0, 0));",
          "81:     pdf_add_circle(pdf, NULL, 100, 240, 50, 5, PDF_RGB(0xff, 0, 0),",
          "82:                    PDF_TRANSPARENT);",
          "83:     pdf_add_ellipse(pdf, NULL, 100, 240, 40, 30, 2, PDF_RGB(0xff, 0xff, 0),",
          "84:                     PDF_RGB(0, 0, 0));",
          "86:     pdf_add_filled_rectangle(pdf, NULL, 150, 450, 100, 100, 4,",
          "87:                              PDF_RGB(0, 0xff, 0));",
          "89:     pdf_add_text(pdf, NULL, \"Date (YYYY-MM-DD):\", 20, 220, 30,",
          "90:                  PDF_RGB(0, 0, 0));",
          "96:     pdf_add_text(pdf, NULL, \"This is some weird text () \\\\ # : - Wi-Fi\", 10,",
          "97:                  50, 60, PDF_RGB(0, 0, 0));",
          "98:     pdf_add_text(",
          "99:         pdf, NULL,",
          "100:         \"Control characters ( ) < > [ ] { } / % \\n \\r \\t \\b \\f ending\", 10,",
          "101:         50, 45, PDF_RGB(0, 0, 0));",
          "102:     pdf_add_text(pdf, NULL, \"Special characters: \u20ac\u00dc\u017d\u017e\u0160\u0161\u00c1\u00e1\u00fc\u00f6\u00e4\u00c4\u00dc\u00d6\u00df\", 10, 50, 15,",
          "103:                  PDF_RGB(0, 0, 0));",
          "104:     pdf_add_text(pdf, NULL, \"This one has a new line in it\\nThere it was\", 10,",
          "105:                  50, 80, PDF_RGB(0, 0, 0));",
          "106:     pdf_add_text(",
          "107:         pdf, NULL,",
          "108:         \"This is a really long line that will go off the edge of the screen, \"",
          "109:         \"because it is so long. I like long text. The quick brown fox jumped \"",
          "110:         \"over the lazy dog. The quick brown fox jumped over the lazy dog\",",
          "111:         10, 100, 100, PDF_RGB(0, 0, 0));",
          "113:     pdf_add_text(",
          "114:         pdf, NULL,",
          "115:         \"This is a really long line that will go off the edge of the screen, \"",
          "116:         \"because it is so long. I like long text. The quick brown fox jumped \"",
          "117:         \"over the lazy dog. The quick brown fox jumped over the lazy dog\",",
          "118:         10, 100, 130, PDF_RGB(0, 0, 0));",
          "120:     pdf_add_text(",
          "121:         pdf, NULL,",
          "122:         \"This is a really long line that will go off the edge of the screen, \"",
          "123:         \"because it is so long. I like long text. The quick brown fox jumped \"",
          "124:         \"over the lazy dog. The quick brown fox jumped over the lazy dog\",",
          "125:         10, 100, 150, PDF_RGB(0, 0, 0));",
          "128:     pdf_add_text(pdf, NULL, \"(5.6.5) RS232 shutdown\", 8, 317, 546,",
          "129:                  PDF_RGB(0, 0, 0));",
          "132:     pdf_add_text(pdf, NULL, \"(5.6.3) RS485 pins\", 8, 317, 556,",
          "133:                  PDF_RGB(0, 0, 0));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "112:     for (i = 0; i < 3000; i++) {",
          "113:         int xpos = (i / 100) * 40;",
          "114:         int ypos = (i % 100) * 10;",
          "116:     }",
          "119:     pdf_append_page(pdf);",
          "120:     pdf_page_set_size(pdf, NULL, PDF_A3_HEIGHT, PDF_A3_WIDTH);",
          "123:     pdf_save(pdf, \"output.pdf\");",
          "",
          "[Removed Lines]",
          "115:         pdf_add_text(pdf, NULL, \"Text blob\", 8, xpos, ypos, PDF_RGB(i, (i * 4) & 0xff, (i * 8) & 0xff));",
          "117:     pdf_add_text(pdf, NULL, \"\", 10, (i / 100) * 100, (i % 100) * 12, PDF_RGB(0xff, 0, 0));",
          "121:     pdf_add_text(pdf, NULL, \"This is an A3 landscape page\", 10, 20, 30, PDF_RGB(0xff, 0, 0));",
          "",
          "[Added Lines]",
          "145:         pdf_add_text(pdf, NULL, \"Text blob\", 8, xpos, ypos,",
          "146:                      PDF_RGB(i, (i * 4) & 0xff, (i * 8) & 0xff));",
          "148:     pdf_add_text(pdf, NULL, \"\", 10, (i / 100) * 100, (i % 100) * 12,",
          "149:                  PDF_RGB(0xff, 0, 0));",
          "153:     pdf_add_text(pdf, NULL, \"This is an A3 landscape page\", 10, 20, 30,",
          "154:                  PDF_RGB(0xff, 0, 0));",
          "",
          "---------------"
        ],
        "pdfgen.c||pdfgen.c": [
          "File: pdfgen.c -> pdfgen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: #include <ctype.h>",
          "97: #include <errno.h>",
          "98: #include <limits.h>",
          "99: #include <math.h>",
          "",
          "[Removed Lines]",
          "94: #include <sys/types.h>",
          "96: #include <sys/stat.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101: #include <stdio.h>",
          "102: #include <stdlib.h>",
          "103: #include <string.h>",
          "104: #include <time.h>",
          "105: #include <unistd.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: #include <sys/stat.h>",
          "103: #include <sys/types.h>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109: #define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))",
          "111: #define PDF_RGB_R(c) ((((c) >> 16) & 0xff) / 255.0)",
          "114: #define PDF_IS_TRANSPARENT(c) (((c) >> 24) == 0xff)",
          "116: #if defined(_MSC_VER)",
          "",
          "[Removed Lines]",
          "112: #define PDF_RGB_G(c) ((((c) >>  8) & 0xff) / 255.0)",
          "113: #define PDF_RGB_B(c) ((((c) >>  0) & 0xff) / 255.0)",
          "",
          "[Added Lines]",
          "112: #define PDF_RGB_G(c) ((((c) >> 8) & 0xff) / 255.0)",
          "113: #define PDF_RGB_B(c) ((((c) >> 0) & 0xff) / 255.0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:     return next - bin_offset[bin];",
          "245: }",
          "248: {",
          "249:     (void)flex;",
          "250:     return index - bin_offset[bin];",
          "",
          "[Removed Lines]",
          "247: static inline int flexarray_get_bin_offset(struct flexarray *flex, int bin, int index)",
          "",
          "[Added Lines]",
          "248: static inline int flexarray_get_bin_offset(struct flexarray *flex, int bin,",
          "249:                                            int index)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "271:     if (bin < 0)",
          "272:         return -EINVAL;",
          "273:     if (bin >= flex->bin_count) {",
          "276:         if (!bins)",
          "277:             return -ENOMEM;",
          "278:         flex->bin_count++;",
          "",
          "[Removed Lines]",
          "274:         void *bins = realloc(flex->bins, (flex->bin_count + 1) *",
          "275:                              sizeof(flex->bins));",
          "",
          "[Added Lines]",
          "276:         void *bins =",
          "277:             realloc(flex->bins, (flex->bin_count + 1) * sizeof(flex->bins));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "319: {",
          "320:     va_list ap;",
          "321:     int len;",
          "",
          "[Removed Lines]",
          "314: static int pdf_set_err(struct pdf_doc *doc, int errval,",
          "315:                        const char *buffer, ...)",
          "316: __attribute__ ((format(printf, 3, 4)));",
          "317: static int pdf_set_err(struct pdf_doc *doc, int errval,",
          "318:                        const char *buffer, ...)",
          "",
          "[Added Lines]",
          "316: static int pdf_set_err(struct pdf_doc *doc, int errval, const char *buffer,",
          "317:                        ...) __attribute__((format(printf, 3, 4)));",
          "318: static int pdf_set_err(struct pdf_doc *doc, int errval, const char *buffer,",
          "319:                        ...)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "339:         return NULL;",
          "340:     if (pdf->errstr[0] == '\\0')",
          "341:         return NULL;",
          "343:     return pdf->errstr;",
          "344: }",
          "",
          "[Removed Lines]",
          "342:     if (errval) *errval = pdf->errval;",
          "",
          "[Added Lines]",
          "343:     if (errval)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "431: #else",
          "432:         localtime_r(&now, &tm);",
          "433: #endif",
          "436:     }",
          "437:     if (!obj->info.creator[0])",
          "438:         strcpy(obj->info.creator, \"pdfgen\");",
          "",
          "[Removed Lines]",
          "434:         strftime(obj->info.date, sizeof(obj->info.date),",
          "435:                  \"%Y%m%d%H%M%SZ\", &tm);",
          "",
          "[Added Lines]",
          "436:         strftime(obj->info.date, sizeof(obj->info.date), \"%Y%m%d%H%M%SZ\",",
          "437:                  &tm);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "491:     }",
          "492: }",
          "496: {",
          "497:     return pdf->first_objects[type];",
          "498: }",
          "502: {",
          "503:     return pdf->last_objects[type];",
          "504: }",
          "",
          "[Removed Lines]",
          "494: static struct pdf_object *pdf_find_first_object(struct pdf_doc *pdf,",
          "495:         int type)",
          "500: static struct pdf_object *pdf_find_last_object(struct pdf_doc *pdf,",
          "501:         int type)",
          "",
          "[Added Lines]",
          "496: static struct pdf_object *pdf_find_first_object(struct pdf_doc *pdf, int type)",
          "501: static struct pdf_object *pdf_find_last_object(struct pdf_doc *pdf, int type)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "545:     return page;",
          "546: }",
          "549: {",
          "550:     if (!page)",
          "551:         page = pdf_find_last_object(pdf, OBJ_page);",
          "",
          "[Removed Lines]",
          "548: int pdf_page_set_size(struct pdf_doc *pdf, struct pdf_object *page, int width, int height)",
          "",
          "[Added Lines]",
          "548: int pdf_page_set_size(struct pdf_doc *pdf, struct pdf_object *page, int width,",
          "549:                       int height)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "571:     switch (object->type) {",
          "572:     case OBJ_stream:",
          "573:     case OBJ_image: {",
          "576:         fwrite(object->stream.text, len, 1, fp);",
          "577:         break;",
          "578:     }",
          "579:     case OBJ_info: {",
          "580:         struct pdf_info *info = &object->info;",
          "583:                 \"  /Creator (%s)\\r\\n\"",
          "584:                 \"  /Producer (%s)\\r\\n\"",
          "585:                 \"  /Title (%s)\\r\\n\"",
          "",
          "[Removed Lines]",
          "574:         int len = object->stream.len ? object->stream.len :",
          "575:                   strlen(object->stream.text);",
          "582:         fprintf(fp, \"<<\\r\\n\"",
          "",
          "[Added Lines]",
          "575:         int len = object->stream.len ? object->stream.len",
          "576:                                      : strlen(object->stream.text);",
          "583:         fprintf(fp,",
          "584:                 \"<<\\r\\n\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "587:                 \"  /Subject (%s)\\r\\n\"",
          "588:                 \"  /CreationDate (D:%s)\\r\\n\"",
          "589:                 \">>\\r\\n\",",
          "592:         break;",
          "593:     }",
          "",
          "[Removed Lines]",
          "590:                 info->creator, info->producer, info->title,",
          "591:                 info->author, info->subject, info->date);",
          "",
          "[Added Lines]",
          "592:                 info->creator, info->producer, info->title, info->author,",
          "593:                 info->subject, info->date);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "598:         struct pdf_object *pages = pdf_find_first_object(pdf, OBJ_pages);",
          "599:         struct pdf_object *image = pdf_find_first_object(pdf, OBJ_image);",
          "602:                 \"/Type /Page\\r\\n\"",
          "606:         fprintf(fp, \"/Resources <<\\r\\n\");",
          "607:         fprintf(fp, \"  /Font <<\\r\\n\");",
          "611:         fprintf(fp, \"  >>\\r\\n\");",
          "613:         if (image) {",
          "",
          "[Removed Lines]",
          "601:         fprintf(fp, \"<<\\r\\n\"",
          "603:                 \"/Parent %d 0 R\\r\\n\", pages->index);",
          "604:         fprintf(fp, \"/MediaBox [0 0 %d %d]\\r\\n\",",
          "605:                 object->page.width, object->page.height);",
          "608:         for (font = pdf_find_first_object(pdf, OBJ_font); font; font = font->next)",
          "609:             fprintf(fp, \"    /F%d %d 0 R\\r\\n\",",
          "610:                     font->font.index, font->index);",
          "",
          "[Added Lines]",
          "603:         fprintf(fp,",
          "604:                 \"<<\\r\\n\"",
          "606:                 \"/Parent %d 0 R\\r\\n\",",
          "607:                 pages->index);",
          "608:         fprintf(fp, \"/MediaBox [0 0 %d %d]\\r\\n\", object->page.width,",
          "609:                 object->page.height);",
          "612:         for (font = pdf_find_first_object(pdf, OBJ_font); font;",
          "613:              font = font->next)",
          "614:             fprintf(fp, \"    /F%d %d 0 R\\r\\n\", font->font.index, font->index);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "620:         fprintf(fp, \">>\\r\\n\");",
          "621:         fprintf(fp, \"/Contents [\\r\\n\");",
          "622:         for (i = 0; i < flexarray_size(&object->page.children); i++) {",
          "624:             fprintf(fp, \"%d 0 R\\r\\n\", child->index);",
          "625:         }",
          "626:         fprintf(fp, \"]\\r\\n\");",
          "",
          "[Removed Lines]",
          "623:             struct pdf_object *child = flexarray_get(&object->page.children, i);",
          "",
          "[Added Lines]",
          "627:             struct pdf_object *child =",
          "628:                 flexarray_get(&object->page.children, i);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "636:             parent = pdf_find_first_object(pdf, OBJ_outline);",
          "637:         if (!object->bookmark.page)",
          "638:             break;",
          "640:                 \"/A << /Type /Action\\r\\n\"",
          "641:                 \"      /S /GoTo\\r\\n\"",
          "642:                 \"      /D [%d 0 R /XYZ 0 %d null]\\r\\n\"",
          "643:                 \"   >>\\r\\n\"",
          "644:                 \"/Parent %d 0 R\\r\\n\"",
          "645:                 \"/Title (%s)\\r\\n\",",
          "649:                 object->bookmark.name);",
          "650:         int nchildren = flexarray_size(&object->bookmark.children);",
          "651:         if (nchildren > 0) {",
          "",
          "[Removed Lines]",
          "639:         fprintf(fp, \"<<\\r\\n\"",
          "646:                 object->bookmark.page->index,",
          "647:                 pdf->height,",
          "648:                 parent->index,",
          "",
          "[Added Lines]",
          "644:         fprintf(fp,",
          "645:                 \"<<\\r\\n\"",
          "652:                 object->bookmark.page->index, pdf->height, parent->index,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "657:         }",
          "659:         for (other = object->prev;",
          "662:             ;",
          "663:         if (other)",
          "664:             fprintf(fp, \"/Prev %d 0 R\\r\\n\", other->index);",
          "666:         for (other = object->next;",
          "669:             ;",
          "670:         if (other)",
          "671:             fprintf(fp, \"/Next %d 0 R\\r\\n\", other->index);",
          "",
          "[Removed Lines]",
          "660:                 other && other->bookmark.parent != object->bookmark.parent;",
          "661:                 other = other->prev)",
          "667:                 other && other->bookmark.parent != object->bookmark.parent;",
          "668:                 other = other->next)",
          "",
          "[Added Lines]",
          "664:              other && other->bookmark.parent != object->bookmark.parent;",
          "665:              other = other->prev)",
          "671:              other && other->bookmark.parent != object->bookmark.parent;",
          "672:              other = other->next)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "688:             }",
          "692:                     \"/Count %d\\r\\n\"",
          "693:                     \"/Type /Outlines\\r\\n\"",
          "694:                     \"/First %d 0 R\\r\\n\"",
          "",
          "[Removed Lines]",
          "691:             fprintf(fp, \"<<\\r\\n\"",
          "",
          "[Added Lines]",
          "695:             fprintf(fp,",
          "696:                     \"<<\\r\\n\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "700:     }",
          "702:     case OBJ_font:",
          "704:                 \"  /Type /Font\\r\\n\"",
          "705:                 \"  /Subtype /Type1\\r\\n\"",
          "706:                 \"  /BaseFont /%s\\r\\n\"",
          "707:                 \"  /Encoding /WinAnsiEncoding\\r\\n\"",
          "709:         break;",
          "711:     case OBJ_pages: {",
          "",
          "[Removed Lines]",
          "703:         fprintf(fp, \"<<\\r\\n\"",
          "708:                 \">>\\r\\n\", object->font.name);",
          "",
          "[Added Lines]",
          "708:         fprintf(fp,",
          "709:                 \"<<\\r\\n\"",
          "714:                 \">>\\r\\n\",",
          "715:                 object->font.name);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "713:         int npages = 0;",
          "715:         fprintf(fp, \"<<\\r\\n\"",
          "721:             npages++;",
          "722:             fprintf(fp, \"%d 0 R \", page->index);",
          "723:         }",
          "",
          "[Removed Lines]",
          "716:                 \"/Type /Pages\\r\\n\"",
          "717:                 \"/Kids [ \");",
          "718:         for (page = pdf_find_first_object(pdf, OBJ_page);",
          "719:                 page;",
          "720:                 page = page->next) {",
          "",
          "[Added Lines]",
          "723:                     \"/Type /Pages\\r\\n\"",
          "724:                     \"/Kids [ \");",
          "725:         for (page = pdf_find_first_object(pdf, OBJ_page); page;",
          "726:              page = page->next) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "732:         struct pdf_object *pages = pdf_find_first_object(pdf, OBJ_pages);",
          "734:         fprintf(fp, \"<<\\r\\n\"",
          "736:         if (outline)",
          "737:             fprintf(fp,",
          "738:                     \"/Outlines %d 0 R\\r\\n\"",
          "741:                 \">>\\r\\n\",",
          "742:                 pages->index);",
          "743:         break;",
          "",
          "[Removed Lines]",
          "735:                 \"/Type /Catalog\\r\\n\");",
          "739:                     \"/PageMode /UseOutlines\\r\\n\", outline->index);",
          "740:         fprintf(fp, \"/Pages %d 0 R\\r\\n\"",
          "",
          "[Added Lines]",
          "741:                     \"/Type /Catalog\\r\\n\");",
          "745:                     \"/PageMode /UseOutlines\\r\\n\",",
          "746:                     outline->index);",
          "747:         fprintf(fp,",
          "748:                 \"/Pages %d 0 R\\r\\n\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "764:     if (filename == NULL)",
          "765:         fp = stdout;",
          "766:     else if ((fp = fopen(filename, \"wb\")) == NULL)",
          "770:     fprintf(fp, \"%%PDF-1.2\\r\\n\");",
          "",
          "[Removed Lines]",
          "767:         return pdf_set_err(pdf, -errno, \"Unable to open '%s': %s\",",
          "768:                            filename, strerror(errno));",
          "",
          "[Added Lines]",
          "775:         return pdf_set_err(pdf, -errno, \"Unable to open '%s': %s\", filename,",
          "776:                            strerror(errno));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "784:     for (i = 0; i < flexarray_size(&pdf->objects); i++) {",
          "785:         obj = pdf_get_object(pdf, i);",
          "786:         if (obj->type != OBJ_none)",
          "789:     }",
          "792:             \"<<\\r\\n\"",
          "794:     obj = pdf_find_first_object(pdf, OBJ_catalog);",
          "795:     fprintf(fp, \"/Root %d 0 R\\r\\n\", obj->index);",
          "796:     obj = pdf_find_first_object(pdf, OBJ_info);",
          "",
          "[Removed Lines]",
          "787:             fprintf(fp, \"%10.10d 00000 n\\r\\n\",",
          "788:                     obj->offset);",
          "791:     fprintf(fp, \"trailer\\r\\n\"",
          "793:             \"/Size %d\\r\\n\", xref_count + 1);",
          "",
          "[Added Lines]",
          "795:             fprintf(fp, \"%10.10d 00000 n\\r\\n\", obj->offset);",
          "798:     fprintf(fp,",
          "799:             \"trailer\\r\\n\"",
          "801:             \"/Size %d\\r\\n\",",
          "802:             xref_count + 1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "799:     fprintf(fp, \"/ID [<%16.16x> <%16.16x>]\\r\\n\", 0x123, 0x123);",
          "800:     fprintf(fp, \">>\\r\\n\"",
          "802:     fprintf(fp, \"%d\\r\\n\", xref_offset);",
          "803:     fprintf(fp, \"%%%%EOF\\r\\n\");",
          "804:     fclose(fp);",
          "",
          "[Removed Lines]",
          "801:             \"startxref\\r\\n\");",
          "",
          "[Added Lines]",
          "810:                 \"startxref\\r\\n\");",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "823:     len = strlen(buffer);",
          "827:         buffer[len - 1] = '\\0';",
          "828:         len--;",
          "829:     }",
          "",
          "[Removed Lines]",
          "825:     while (len >= 1 && (buffer[len - 1] == '\\r' ||",
          "826:                         buffer[len - 1] == '\\n')) {",
          "",
          "[Added Lines]",
          "834:     while (len >= 1 && (buffer[len - 1] == '\\r' || buffer[len - 1] == '\\n')) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "838:     obj->stream.text = malloc(len + 1);",
          "839:     if (!obj->stream.text) {",
          "840:         obj->type = OBJ_none;",
          "843:     }",
          "844:     obj->stream.text[0] = '\\0';",
          "845:     strcat(obj->stream.text, prefix);",
          "",
          "[Removed Lines]",
          "841:         return pdf_set_err(pdf, -ENOMEM, \"Insufficient memory for text (%d bytes)\",",
          "842:                            len + 1);",
          "",
          "[Added Lines]",
          "849:         return pdf_set_err(",
          "850:             pdf, -ENOMEM, \"Insufficient memory for text (%d bytes)\", len + 1);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "850:     return flexarray_append(&page->page.children, obj);",
          "851: }",
          "855: {",
          "856:     struct pdf_object *obj;",
          "",
          "[Removed Lines]",
          "853: int pdf_add_bookmark(struct pdf_doc *pdf, struct pdf_object *page,",
          "854:                      int parent, const char *name)",
          "",
          "[Added Lines]",
          "861: int pdf_add_bookmark(struct pdf_doc *pdf, struct pdf_object *page, int parent,",
          "862:                      const char *name)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "876:     if (parent >= 0) {",
          "877:         struct pdf_object *parent_obj = pdf_get_object(pdf, parent);",
          "878:         if (!parent_obj)",
          "881:         obj->bookmark.parent = parent_obj;",
          "882:         flexarray_append(&parent_obj->bookmark.children, obj);",
          "883:     }",
          "",
          "[Removed Lines]",
          "879:             return pdf_set_err(pdf, -EINVAL,",
          "880:                                \"Invalid parent ID %d supplied\", parent);",
          "",
          "[Added Lines]",
          "887:             return pdf_set_err(pdf, -EINVAL, \"Invalid parent ID %d supplied\",",
          "888:                                parent);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "905: }",
          "907: static int dstr_printf(struct dstr *str, const char *fmt, ...)",
          "909: static int dstr_printf(struct dstr *str, const char *fmt, ...)",
          "910: {",
          "911:     va_list ap, aq;",
          "",
          "[Removed Lines]",
          "908: __attribute__((format(printf,2,3)));",
          "",
          "[Added Lines]",
          "916:     __attribute__((format(printf, 2, 3)));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "992:     dstr_append(&str, \"BT \");",
          "993:     dstr_printf(&str, \"%d %d TD \", xoff, yoff);",
          "998:     dstr_append(&str, \"(\");",
          "1002:         uint32_t code;",
          "1003:         int code_len;",
          "1004:         code_len = utf8_to_utf32(&text[i], len - i, &code);",
          "",
          "[Removed Lines]",
          "994:     dstr_printf(&str, \"/F%d %d Tf \",",
          "995:                 pdf->current_font->font.index, size);",
          "996:     dstr_printf(&str, \"%f %f %f rg \",",
          "997:                 PDF_RGB_R(colour), PDF_RGB_G(colour), PDF_RGB_B(colour));",
          "1001:     for (i = 0; i < len; ) {",
          "",
          "[Added Lines]",
          "1002:     dstr_printf(&str, \"/F%d %d Tf \", pdf->current_font->font.index, size);",
          "1003:     dstr_printf(&str, \"%f %f %f rg \", PDF_RGB_R(colour), PDF_RGB_G(colour),",
          "1004:                 PDF_RGB_B(colour));",
          "1008:     for (i = 0; i < len;) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1028:                 break;",
          "1029:             default:",
          "1030:                 dstr_free(&str);",
          "1032:             }",
          "1033:             dstr_append(&str, buf);",
          "1034:         } else if (strchr(\"()\\\\\", code)) {",
          "",
          "[Removed Lines]",
          "1031:                 return pdf_set_err(pdf, -EINVAL, \"Unsupported UTF-8 character: 0x%x 0o%o\", code, code);",
          "",
          "[Added Lines]",
          "1038:                 return pdf_set_err(pdf, -EINVAL,",
          "1039:                                    \"Unsupported UTF-8 character: 0x%x 0o%o\",",
          "1040:                                    code, code);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1062: static const uint16_t helvetica_widths[256] = {",
          "1097: static const uint16_t helvetica_bold_widths[256] = {",
          "1132: static uint16_t helvetica_bold_oblique_widths[256] = {",
          "1167: static uint16_t helvetica_oblique_widths[256] = {",
          "1202: static uint16_t symbol_widths[256] = {",
          "1237: static uint16_t times_widths[256] = {",
          "1272: static uint16_t times_bold_widths[256] = {",
          "1307: static uint16_t times_bold_italic_widths[256] = {",
          "1342: static uint16_t times_italic_widths[256] = {",
          "1377: static uint16_t zapfdingbats_widths[256] = {",
          "1412: static uint16_t courier_widths[256] = {",
          "1445: };",
          "1447: static int pdf_text_pixel_width(const char *text, int text_len, int size,",
          "",
          "[Removed Lines]",
          "1063:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1064:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1065:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1066:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1067:     278, 278, 355, 556, 556, 889, 667, 191,",
          "1068:     333, 333, 389, 584, 278, 333, 278, 278,",
          "1069:     556, 556, 556, 556, 556, 556, 556, 556,",
          "1070:     556, 556, 278, 278, 584, 584, 584, 556,",
          "1071:     1015, 667, 667, 722, 722, 667, 611, 778,",
          "1072:     722, 278, 500, 667, 556, 833, 722, 778,",
          "1073:     667, 778, 722, 667, 611, 722, 667, 944,",
          "1074:     667, 667, 611, 278, 278, 278, 469, 556,",
          "1075:     333, 556, 556, 500, 556, 556, 278, 556,",
          "1076:     556, 222, 222, 500, 222, 833, 556, 556,",
          "1077:     556, 556, 333, 500, 278, 556, 500, 722,",
          "1078:     500, 500, 500, 334, 260, 334, 584, 350,",
          "1079:     556, 350, 222, 556, 333, 1000, 556, 556,",
          "1080:     333, 1000, 667, 333, 1000, 350, 611, 350,",
          "1081:     350, 222, 222, 333, 333, 350, 556, 1000,",
          "1082:     333, 1000, 500, 333, 944, 350, 500, 667,",
          "1083:     278, 333, 556, 556, 556, 556, 260, 556,",
          "1084:     333, 737, 370, 556, 584, 333, 737, 333,",
          "1085:     400, 584, 333, 333, 333, 556, 537, 278,",
          "1086:     333, 333, 365, 556, 834, 834, 834, 611,",
          "1087:     667, 667, 667, 667, 667, 667, 1000, 722,",
          "1088:     667, 667, 667, 667, 278, 278, 278, 278,",
          "1089:     722, 722, 778, 778, 778, 778, 778, 584,",
          "1090:     778, 722, 722, 722, 722, 667, 667, 611,",
          "1091:     556, 556, 556, 556, 556, 556, 889, 500,",
          "1092:     556, 556, 556, 556, 278, 278, 278, 278,",
          "1093:     556, 556, 556, 556, 556, 556, 556, 584,",
          "1094:     611, 556, 556, 556, 556, 500, 556, 500",
          "1095: };",
          "1098:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1099:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1100:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1101:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1102:     278, 333, 474, 556, 556, 889, 722, 238,",
          "1103:     333, 333, 389, 584, 278, 333, 278, 278,",
          "1104:     556, 556, 556, 556, 556, 556, 556, 556,",
          "1105:     556, 556, 333, 333, 584, 584, 584, 611,",
          "1106:     975, 722, 722, 722, 722, 667, 611, 778,",
          "1107:     722, 278, 556, 722, 611, 833, 722, 778,",
          "1108:     667, 778, 722, 667, 611, 722, 667, 944,",
          "1109:     667, 667, 611, 333, 278, 333, 584, 556,",
          "1110:     333, 556, 611, 556, 611, 556, 333, 611,",
          "1111:     611, 278, 278, 556, 278, 889, 611, 611,",
          "1112:     611, 611, 389, 556, 333, 611, 556, 778,",
          "1113:     556, 556, 500, 389, 280, 389, 584, 350,",
          "1114:     556, 350, 278, 556, 500, 1000, 556, 556,",
          "1115:     333, 1000, 667, 333, 1000, 350, 611, 350,",
          "1116:     350, 278, 278, 500, 500, 350, 556, 1000,",
          "1117:     333, 1000, 556, 333, 944, 350, 500, 667,",
          "1118:     278, 333, 556, 556, 556, 556, 280, 556,",
          "1119:     333, 737, 370, 556, 584, 333, 737, 333,",
          "1120:     400, 584, 333, 333, 333, 611, 556, 278,",
          "1121:     333, 333, 365, 556, 834, 834, 834, 611,",
          "1122:     722, 722, 722, 722, 722, 722, 1000, 722,",
          "1123:     667, 667, 667, 667, 278, 278, 278, 278,",
          "1124:     722, 722, 778, 778, 778, 778, 778, 584,",
          "1125:     778, 722, 722, 722, 722, 667, 667, 611,",
          "1126:     556, 556, 556, 556, 556, 556, 889, 556,",
          "1127:     556, 556, 556, 556, 278, 278, 278, 278,",
          "1128:     611, 611, 611, 611, 611, 611, 611, 584,",
          "1129:     611, 611, 611, 611, 611, 556, 611, 556",
          "1130: };",
          "1133:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1134:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1135:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1136:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1137:     278, 333, 474, 556, 556, 889, 722, 238,",
          "1138:     333, 333, 389, 584, 278, 333, 278, 278,",
          "1139:     556, 556, 556, 556, 556, 556, 556, 556,",
          "1140:     556, 556, 333, 333, 584, 584, 584, 611,",
          "1141:     975, 722, 722, 722, 722, 667, 611, 778,",
          "1142:     722, 278, 556, 722, 611, 833, 722, 778,",
          "1143:     667, 778, 722, 667, 611, 722, 667, 944,",
          "1144:     667, 667, 611, 333, 278, 333, 584, 556,",
          "1145:     333, 556, 611, 556, 611, 556, 333, 611,",
          "1146:     611, 278, 278, 556, 278, 889, 611, 611,",
          "1147:     611, 611, 389, 556, 333, 611, 556, 778,",
          "1148:     556, 556, 500, 389, 280, 389, 584, 350,",
          "1149:     556, 350, 278, 556, 500, 1000, 556, 556,",
          "1150:     333, 1000, 667, 333, 1000, 350, 611, 350,",
          "1151:     350, 278, 278, 500, 500, 350, 556, 1000,",
          "1152:     333, 1000, 556, 333, 944, 350, 500, 667,",
          "1153:     278, 333, 556, 556, 556, 556, 280, 556,",
          "1154:     333, 737, 370, 556, 584, 333, 737, 333,",
          "1155:     400, 584, 333, 333, 333, 611, 556, 278,",
          "1156:     333, 333, 365, 556, 834, 834, 834, 611,",
          "1157:     722, 722, 722, 722, 722, 722, 1000, 722,",
          "1158:     667, 667, 667, 667, 278, 278, 278, 278,",
          "1159:     722, 722, 778, 778, 778, 778, 778, 584,",
          "1160:     778, 722, 722, 722, 722, 667, 667, 611,",
          "1161:     556, 556, 556, 556, 556, 556, 889, 556,",
          "1162:     556, 556, 556, 556, 278, 278, 278, 278,",
          "1163:     611, 611, 611, 611, 611, 611, 611, 584,",
          "1164:     611, 611, 611, 611, 611, 556, 611, 556",
          "1165: };",
          "1168:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1169:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1170:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1171:     278, 278, 278, 278, 278, 278, 278, 278,",
          "1172:     278, 278, 355, 556, 556, 889, 667, 191,",
          "1173:     333, 333, 389, 584, 278, 333, 278, 278,",
          "1174:     556, 556, 556, 556, 556, 556, 556, 556,",
          "1175:     556, 556, 278, 278, 584, 584, 584, 556,",
          "1176:     1015, 667, 667, 722, 722, 667, 611, 778,",
          "1177:     722, 278, 500, 667, 556, 833, 722, 778,",
          "1178:     667, 778, 722, 667, 611, 722, 667, 944,",
          "1179:     667, 667, 611, 278, 278, 278, 469, 556,",
          "1180:     333, 556, 556, 500, 556, 556, 278, 556,",
          "1181:     556, 222, 222, 500, 222, 833, 556, 556,",
          "1182:     556, 556, 333, 500, 278, 556, 500, 722,",
          "1183:     500, 500, 500, 334, 260, 334, 584, 350,",
          "1184:     556, 350, 222, 556, 333, 1000, 556, 556,",
          "1185:     333, 1000, 667, 333, 1000, 350, 611, 350,",
          "1186:     350, 222, 222, 333, 333, 350, 556, 1000,",
          "1187:     333, 1000, 500, 333, 944, 350, 500, 667,",
          "1188:     278, 333, 556, 556, 556, 556, 260, 556,",
          "1189:     333, 737, 370, 556, 584, 333, 737, 333,",
          "1190:     400, 584, 333, 333, 333, 556, 537, 278,",
          "1191:     333, 333, 365, 556, 834, 834, 834, 611,",
          "1192:     667, 667, 667, 667, 667, 667, 1000, 722,",
          "1193:     667, 667, 667, 667, 278, 278, 278, 278,",
          "1194:     722, 722, 778, 778, 778, 778, 778, 584,",
          "1195:     778, 722, 722, 722, 722, 667, 667, 611,",
          "1196:     556, 556, 556, 556, 556, 556, 889, 500,",
          "1197:     556, 556, 556, 556, 278, 278, 278, 278,",
          "1198:     556, 556, 556, 556, 556, 556, 556, 584,",
          "1199:     611, 556, 556, 556, 556, 500, 556, 500",
          "1200: };",
          "1203:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1204:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1205:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1206:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1207:     250, 333, 713, 500, 549, 833, 778, 439,",
          "1208:     333, 333, 500, 549, 250, 549, 250, 278,",
          "1209:     500, 500, 500, 500, 500, 500, 500, 500,",
          "1210:     500, 500, 278, 278, 549, 549, 549, 444,",
          "1211:     549, 722, 667, 722, 612, 611, 763, 603,",
          "1212:     722, 333, 631, 722, 686, 889, 722, 722,",
          "1213:     768, 741, 556, 592, 611, 690, 439, 768,",
          "1214:     645, 795, 611, 333, 863, 333, 658, 500,",
          "1215:     500, 631, 549, 549, 494, 439, 521, 411,",
          "1216:     603, 329, 603, 549, 549, 576, 521, 549,",
          "1217:     549, 521, 549, 603, 439, 576, 713, 686,",
          "1218:     493, 686, 494, 480, 200, 480, 549, 0,",
          "1219:     0, 0, 0, 0, 0, 0, 0, 0,",
          "1220:     0, 0, 0, 0, 0, 0, 0, 0,",
          "1221:     0, 0, 0, 0, 0, 0, 0, 0,",
          "1222:     0, 0, 0, 0, 0, 0, 0, 0,",
          "1223:     750, 620, 247, 549, 167, 713, 500, 753,",
          "1224:     753, 753, 753, 1042, 987, 603, 987, 603,",
          "1225:     400, 549, 411, 549, 549, 713, 494, 460,",
          "1226:     549, 549, 549, 549, 1000, 603, 1000, 658,",
          "1227:     823, 686, 795, 987, 768, 768, 823, 768,",
          "1228:     768, 713, 713, 713, 713, 713, 713, 713,",
          "1229:     768, 713, 790, 790, 890, 823, 549, 250,",
          "1230:     713, 603, 603, 1042, 987, 603, 987, 603,",
          "1231:     494, 329, 790, 790, 786, 713, 384, 384,",
          "1232:     384, 384, 384, 384, 494, 494, 494, 494,",
          "1233:     0, 329, 274, 686, 686, 686, 384, 384,",
          "1234:     384, 384, 384, 384, 494, 494, 494, 0",
          "1235: };",
          "1238:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1239:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1240:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1241:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1242:     250, 333, 408, 500, 500, 833, 778, 180,",
          "1243:     333, 333, 500, 564, 250, 333, 250, 278,",
          "1244:     500, 500, 500, 500, 500, 500, 500, 500,",
          "1245:     500, 500, 278, 278, 564, 564, 564, 444,",
          "1246:     921, 722, 667, 667, 722, 611, 556, 722,",
          "1247:     722, 333, 389, 722, 611, 889, 722, 722,",
          "1248:     556, 722, 667, 556, 611, 722, 722, 944,",
          "1249:     722, 722, 611, 333, 278, 333, 469, 500,",
          "1250:     333, 444, 500, 444, 500, 444, 333, 500,",
          "1251:     500, 278, 278, 500, 278, 778, 500, 500,",
          "1252:     500, 500, 333, 389, 278, 500, 500, 722,",
          "1253:     500, 500, 444, 480, 200, 480, 541, 350,",
          "1254:     500, 350, 333, 500, 444, 1000, 500, 500,",
          "1255:     333, 1000, 556, 333, 889, 350, 611, 350,",
          "1256:     350, 333, 333, 444, 444, 350, 500, 1000,",
          "1257:     333, 980, 389, 333, 722, 350, 444, 722,",
          "1258:     250, 333, 500, 500, 500, 500, 200, 500,",
          "1259:     333, 760, 276, 500, 564, 333, 760, 333,",
          "1260:     400, 564, 300, 300, 333, 500, 453, 250,",
          "1261:     333, 300, 310, 500, 750, 750, 750, 444,",
          "1262:     722, 722, 722, 722, 722, 722, 889, 667,",
          "1263:     611, 611, 611, 611, 333, 333, 333, 333,",
          "1264:     722, 722, 722, 722, 722, 722, 722, 564,",
          "1265:     722, 722, 722, 722, 722, 722, 556, 500,",
          "1266:     444, 444, 444, 444, 444, 444, 667, 444,",
          "1267:     444, 444, 444, 444, 278, 278, 278, 278,",
          "1268:     500, 500, 500, 500, 500, 500, 500, 564,",
          "1269:     500, 500, 500, 500, 500, 500, 500, 500",
          "1270: };",
          "1273:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1274:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1275:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1276:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1277:     250, 333, 555, 500, 500, 1000, 833, 278,",
          "1278:     333, 333, 500, 570, 250, 333, 250, 278,",
          "1279:     500, 500, 500, 500, 500, 500, 500, 500,",
          "1280:     500, 500, 333, 333, 570, 570, 570, 500,",
          "1281:     930, 722, 667, 722, 722, 667, 611, 778,",
          "1282:     778, 389, 500, 778, 667, 944, 722, 778,",
          "1283:     611, 778, 722, 556, 667, 722, 722, 1000,",
          "1284:     722, 722, 667, 333, 278, 333, 581, 500,",
          "1285:     333, 500, 556, 444, 556, 444, 333, 500,",
          "1286:     556, 278, 333, 556, 278, 833, 556, 500,",
          "1287:     556, 556, 444, 389, 333, 556, 500, 722,",
          "1288:     500, 500, 444, 394, 220, 394, 520, 350,",
          "1289:     500, 350, 333, 500, 500, 1000, 500, 500,",
          "1290:     333, 1000, 556, 333, 1000, 350, 667, 350,",
          "1291:     350, 333, 333, 500, 500, 350, 500, 1000,",
          "1292:     333, 1000, 389, 333, 722, 350, 444, 722,",
          "1293:     250, 333, 500, 500, 500, 500, 220, 500,",
          "1294:     333, 747, 300, 500, 570, 333, 747, 333,",
          "1295:     400, 570, 300, 300, 333, 556, 540, 250,",
          "1296:     333, 300, 330, 500, 750, 750, 750, 500,",
          "1297:     722, 722, 722, 722, 722, 722, 1000, 722,",
          "1298:     667, 667, 667, 667, 389, 389, 389, 389,",
          "1299:     722, 722, 778, 778, 778, 778, 778, 570,",
          "1300:     778, 722, 722, 722, 722, 722, 611, 556,",
          "1301:     500, 500, 500, 500, 500, 500, 722, 444,",
          "1302:     444, 444, 444, 444, 278, 278, 278, 278,",
          "1303:     500, 556, 500, 500, 500, 500, 500, 570,",
          "1304:     500, 556, 556, 556, 556, 500, 556, 500",
          "1305: } ;",
          "1308:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1309:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1310:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1311:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1312:     250, 389, 555, 500, 500, 833, 778, 278,",
          "1313:     333, 333, 500, 570, 250, 333, 250, 278,",
          "1314:     500, 500, 500, 500, 500, 500, 500, 500,",
          "1315:     500, 500, 333, 333, 570, 570, 570, 500,",
          "1316:     832, 667, 667, 667, 722, 667, 667, 722,",
          "1317:     778, 389, 500, 667, 611, 889, 722, 722,",
          "1318:     611, 722, 667, 556, 611, 722, 667, 889,",
          "1319:     667, 611, 611, 333, 278, 333, 570, 500,",
          "1320:     333, 500, 500, 444, 500, 444, 333, 500,",
          "1321:     556, 278, 278, 500, 278, 778, 556, 500,",
          "1322:     500, 500, 389, 389, 278, 556, 444, 667,",
          "1323:     500, 444, 389, 348, 220, 348, 570, 350,",
          "1324:     500, 350, 333, 500, 500, 1000, 500, 500,",
          "1325:     333, 1000, 556, 333, 944, 350, 611, 350,",
          "1326:     350, 333, 333, 500, 500, 350, 500, 1000,",
          "1327:     333, 1000, 389, 333, 722, 350, 389, 611,",
          "1328:     250, 389, 500, 500, 500, 500, 220, 500,",
          "1329:     333, 747, 266, 500, 606, 333, 747, 333,",
          "1330:     400, 570, 300, 300, 333, 576, 500, 250,",
          "1331:     333, 300, 300, 500, 750, 750, 750, 500,",
          "1332:     667, 667, 667, 667, 667, 667, 944, 667,",
          "1333:     667, 667, 667, 667, 389, 389, 389, 389,",
          "1334:     722, 722, 722, 722, 722, 722, 722, 570,",
          "1335:     722, 722, 722, 722, 722, 611, 611, 500,",
          "1336:     500, 500, 500, 500, 500, 500, 722, 444,",
          "1337:     444, 444, 444, 444, 278, 278, 278, 278,",
          "1338:     500, 556, 500, 500, 500, 500, 500, 570,",
          "1339:     500, 556, 556, 556, 556, 444, 500, 444",
          "1340: };",
          "1343:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1344:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1345:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1346:     250, 250, 250, 250, 250, 250, 250, 250,",
          "1347:     250, 333, 420, 500, 500, 833, 778, 214,",
          "1348:     333, 333, 500, 675, 250, 333, 250, 278,",
          "1349:     500, 500, 500, 500, 500, 500, 500, 500,",
          "1350:     500, 500, 333, 333, 675, 675, 675, 500,",
          "1351:     920, 611, 611, 667, 722, 611, 611, 722,",
          "1352:     722, 333, 444, 667, 556, 833, 667, 722,",
          "1353:     611, 722, 611, 500, 556, 722, 611, 833,",
          "1354:     611, 556, 556, 389, 278, 389, 422, 500,",
          "1355:     333, 500, 500, 444, 500, 444, 278, 500,",
          "1356:     500, 278, 278, 444, 278, 722, 500, 500,",
          "1357:     500, 500, 389, 389, 278, 500, 444, 667,",
          "1358:     444, 444, 389, 400, 275, 400, 541, 350,",
          "1359:     500, 350, 333, 500, 556, 889, 500, 500,",
          "1360:     333, 1000, 500, 333, 944, 350, 556, 350,",
          "1361:     350, 333, 333, 556, 556, 350, 500, 889,",
          "1362:     333, 980, 389, 333, 667, 350, 389, 556,",
          "1363:     250, 389, 500, 500, 500, 500, 275, 500,",
          "1364:     333, 760, 276, 500, 675, 333, 760, 333,",
          "1365:     400, 675, 300, 300, 333, 500, 523, 250,",
          "1366:     333, 300, 310, 500, 750, 750, 750, 500,",
          "1367:     611, 611, 611, 611, 611, 611, 889, 667,",
          "1368:     611, 611, 611, 611, 333, 333, 333, 333,",
          "1369:     722, 667, 722, 722, 722, 722, 722, 675,",
          "1370:     722, 722, 722, 722, 722, 556, 611, 500,",
          "1371:     500, 500, 500, 500, 500, 500, 667, 444,",
          "1372:     444, 444, 444, 444, 278, 278, 278, 278,",
          "1373:     500, 500, 500, 500, 500, 500, 500, 675,",
          "1374:     500, 500, 500, 500, 500, 444, 500, 444",
          "1375: };",
          "1378:     0, 0, 0, 0, 0, 0, 0, 0,",
          "1379:     0, 0, 0, 0, 0, 0, 0, 0,",
          "1380:     0, 0, 0, 0, 0, 0, 0, 0,",
          "1381:     0, 0, 0, 0, 0, 0, 0, 0,",
          "1382:     278, 974, 961, 974, 980, 719, 789, 790,",
          "1383:     791, 690, 960, 939, 549, 855, 911, 933,",
          "1384:     911, 945, 974, 755, 846, 762, 761, 571,",
          "1385:     677, 763, 760, 759, 754, 494, 552, 537,",
          "1386:     577, 692, 786, 788, 788, 790, 793, 794,",
          "1387:     816, 823, 789, 841, 823, 833, 816, 831,",
          "1388:     923, 744, 723, 749, 790, 792, 695, 776,",
          "1389:     768, 792, 759, 707, 708, 682, 701, 826,",
          "1390:     815, 789, 789, 707, 687, 696, 689, 786,",
          "1391:     787, 713, 791, 785, 791, 873, 761, 762,",
          "1392:     762, 759, 759, 892, 892, 788, 784, 438,",
          "1393:     138, 277, 415, 392, 392, 668, 668, 0,",
          "1394:     390, 390, 317, 317, 276, 276, 509, 509,",
          "1395:     410, 410, 234, 234, 334, 334, 0, 0,",
          "1396:     0, 0, 0, 0, 0, 0, 0, 0,",
          "1397:     0, 0, 0, 0, 0, 0, 0, 0,",
          "1398:     0, 732, 544, 544, 910, 667, 760, 760,",
          "1399:     776, 595, 694, 626, 788, 788, 788, 788,",
          "1400:     788, 788, 788, 788, 788, 788, 788, 788,",
          "1401:     788, 788, 788, 788, 788, 788, 788, 788,",
          "1402:     788, 788, 788, 788, 788, 788, 788, 788,",
          "1403:     788, 788, 788, 788, 788, 788, 788, 788,",
          "1404:     788, 788, 788, 788, 894, 838, 1016, 458,",
          "1405:     748, 924, 748, 918, 927, 928, 928, 834,",
          "1406:     873, 828, 924, 924, 917, 930, 931, 463,",
          "1407:     883, 836, 836, 867, 867, 696, 696, 874,",
          "1408:     0, 874, 760, 946, 771, 865, 771, 888,",
          "1409:     967, 888, 831, 873, 927, 970, 918, 0",
          "1410: };",
          "1413:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1414:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1415:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1416:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1417:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1418:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1419:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1420:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1421:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1422:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1423:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1424:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1425:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1426:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1427:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1428:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1429:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1430:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1431:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1432:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1433:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1434:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1435:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1436:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1437:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1438:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1439:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1440:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1441:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1442:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1443:     600, 600, 600, 600, 600, 600, 600, 600,",
          "1444:     600, 600, 600, 600, 600, 600, 600, 600,",
          "",
          "[Added Lines]",
          "1072:     278, 278, 278, 278,  278, 278, 278, 278,  278,  278, 278,  278, 278,",
          "1073:     278, 278, 278, 278,  278, 278, 278, 278,  278,  278, 278,  278, 278,",
          "1074:     278, 278, 278, 278,  278, 278, 278, 278,  355,  556, 556,  889, 667,",
          "1075:     191, 333, 333, 389,  584, 278, 333, 278,  278,  556, 556,  556, 556,",
          "1076:     556, 556, 556, 556,  556, 556, 278, 278,  584,  584, 584,  556, 1015,",
          "1077:     667, 667, 722, 722,  667, 611, 778, 722,  278,  500, 667,  556, 833,",
          "1078:     722, 778, 667, 778,  722, 667, 611, 722,  667,  944, 667,  667, 611,",
          "1079:     278, 278, 278, 469,  556, 333, 556, 556,  500,  556, 556,  278, 556,",
          "1080:     556, 222, 222, 500,  222, 833, 556, 556,  556,  556, 333,  500, 278,",
          "1081:     556, 500, 722, 500,  500, 500, 334, 260,  334,  584, 350,  556, 350,",
          "1082:     222, 556, 333, 1000, 556, 556, 333, 1000, 667,  333, 1000, 350, 611,",
          "1083:     350, 350, 222, 222,  333, 333, 350, 556,  1000, 333, 1000, 500, 333,",
          "1084:     944, 350, 500, 667,  278, 333, 556, 556,  556,  556, 260,  556, 333,",
          "1085:     737, 370, 556, 584,  333, 737, 333, 400,  584,  333, 333,  333, 556,",
          "1086:     537, 278, 333, 333,  365, 556, 834, 834,  834,  611, 667,  667, 667,",
          "1087:     667, 667, 667, 1000, 722, 667, 667, 667,  667,  278, 278,  278, 278,",
          "1088:     722, 722, 778, 778,  778, 778, 778, 584,  778,  722, 722,  722, 722,",
          "1089:     667, 667, 611, 556,  556, 556, 556, 556,  556,  889, 500,  556, 556,",
          "1090:     556, 556, 278, 278,  278, 278, 556, 556,  556,  556, 556,  556, 556,",
          "1091:     584, 611, 556, 556,  556, 556, 500, 556,  500};",
          "1094:     278,  278, 278,  278, 278, 278, 278, 278,  278, 278, 278, 278,  278, 278,",
          "1095:     278,  278, 278,  278, 278, 278, 278, 278,  278, 278, 278, 278,  278, 278,",
          "1096:     278,  278, 278,  278, 278, 333, 474, 556,  556, 889, 722, 238,  333, 333,",
          "1097:     389,  584, 278,  333, 278, 278, 556, 556,  556, 556, 556, 556,  556, 556,",
          "1098:     556,  556, 333,  333, 584, 584, 584, 611,  975, 722, 722, 722,  722, 667,",
          "1099:     611,  778, 722,  278, 556, 722, 611, 833,  722, 778, 667, 778,  722, 667,",
          "1100:     611,  722, 667,  944, 667, 667, 611, 333,  278, 333, 584, 556,  333, 556,",
          "1101:     611,  556, 611,  556, 333, 611, 611, 278,  278, 556, 278, 889,  611, 611,",
          "1102:     611,  611, 389,  556, 333, 611, 556, 778,  556, 556, 500, 389,  280, 389,",
          "1103:     584,  350, 556,  350, 278, 556, 500, 1000, 556, 556, 333, 1000, 667, 333,",
          "1104:     1000, 350, 611,  350, 350, 278, 278, 500,  500, 350, 556, 1000, 333, 1000,",
          "1105:     556,  333, 944,  350, 500, 667, 278, 333,  556, 556, 556, 556,  280, 556,",
          "1106:     333,  737, 370,  556, 584, 333, 737, 333,  400, 584, 333, 333,  333, 611,",
          "1107:     556,  278, 333,  333, 365, 556, 834, 834,  834, 611, 722, 722,  722, 722,",
          "1108:     722,  722, 1000, 722, 667, 667, 667, 667,  278, 278, 278, 278,  722, 722,",
          "1109:     778,  778, 778,  778, 778, 584, 778, 722,  722, 722, 722, 667,  667, 611,",
          "1110:     556,  556, 556,  556, 556, 556, 889, 556,  556, 556, 556, 556,  278, 278,",
          "1111:     278,  278, 611,  611, 611, 611, 611, 611,  611, 584, 611, 611,  611, 611,",
          "1112:     611,  556, 611,  556};",
          "1115:     278,  278, 278,  278, 278, 278, 278, 278,  278, 278, 278, 278,  278, 278,",
          "1116:     278,  278, 278,  278, 278, 278, 278, 278,  278, 278, 278, 278,  278, 278,",
          "1117:     278,  278, 278,  278, 278, 333, 474, 556,  556, 889, 722, 238,  333, 333,",
          "1118:     389,  584, 278,  333, 278, 278, 556, 556,  556, 556, 556, 556,  556, 556,",
          "1119:     556,  556, 333,  333, 584, 584, 584, 611,  975, 722, 722, 722,  722, 667,",
          "1120:     611,  778, 722,  278, 556, 722, 611, 833,  722, 778, 667, 778,  722, 667,",
          "1121:     611,  722, 667,  944, 667, 667, 611, 333,  278, 333, 584, 556,  333, 556,",
          "1122:     611,  556, 611,  556, 333, 611, 611, 278,  278, 556, 278, 889,  611, 611,",
          "1123:     611,  611, 389,  556, 333, 611, 556, 778,  556, 556, 500, 389,  280, 389,",
          "1124:     584,  350, 556,  350, 278, 556, 500, 1000, 556, 556, 333, 1000, 667, 333,",
          "1125:     1000, 350, 611,  350, 350, 278, 278, 500,  500, 350, 556, 1000, 333, 1000,",
          "1126:     556,  333, 944,  350, 500, 667, 278, 333,  556, 556, 556, 556,  280, 556,",
          "1127:     333,  737, 370,  556, 584, 333, 737, 333,  400, 584, 333, 333,  333, 611,",
          "1128:     556,  278, 333,  333, 365, 556, 834, 834,  834, 611, 722, 722,  722, 722,",
          "1129:     722,  722, 1000, 722, 667, 667, 667, 667,  278, 278, 278, 278,  722, 722,",
          "1130:     778,  778, 778,  778, 778, 584, 778, 722,  722, 722, 722, 667,  667, 611,",
          "1131:     556,  556, 556,  556, 556, 556, 889, 556,  556, 556, 556, 556,  278, 278,",
          "1132:     278,  278, 611,  611, 611, 611, 611, 611,  611, 584, 611, 611,  611, 611,",
          "1133:     611,  556, 611,  556};",
          "1136:     278, 278, 278, 278,  278, 278, 278, 278,  278,  278, 278,  278, 278,",
          "1137:     278, 278, 278, 278,  278, 278, 278, 278,  278,  278, 278,  278, 278,",
          "1138:     278, 278, 278, 278,  278, 278, 278, 278,  355,  556, 556,  889, 667,",
          "1139:     191, 333, 333, 389,  584, 278, 333, 278,  278,  556, 556,  556, 556,",
          "1140:     556, 556, 556, 556,  556, 556, 278, 278,  584,  584, 584,  556, 1015,",
          "1141:     667, 667, 722, 722,  667, 611, 778, 722,  278,  500, 667,  556, 833,",
          "1142:     722, 778, 667, 778,  722, 667, 611, 722,  667,  944, 667,  667, 611,",
          "1143:     278, 278, 278, 469,  556, 333, 556, 556,  500,  556, 556,  278, 556,",
          "1144:     556, 222, 222, 500,  222, 833, 556, 556,  556,  556, 333,  500, 278,",
          "1145:     556, 500, 722, 500,  500, 500, 334, 260,  334,  584, 350,  556, 350,",
          "1146:     222, 556, 333, 1000, 556, 556, 333, 1000, 667,  333, 1000, 350, 611,",
          "1147:     350, 350, 222, 222,  333, 333, 350, 556,  1000, 333, 1000, 500, 333,",
          "1148:     944, 350, 500, 667,  278, 333, 556, 556,  556,  556, 260,  556, 333,",
          "1149:     737, 370, 556, 584,  333, 737, 333, 400,  584,  333, 333,  333, 556,",
          "1150:     537, 278, 333, 333,  365, 556, 834, 834,  834,  611, 667,  667, 667,",
          "1151:     667, 667, 667, 1000, 722, 667, 667, 667,  667,  278, 278,  278, 278,",
          "1152:     722, 722, 778, 778,  778, 778, 778, 584,  778,  722, 722,  722, 722,",
          "1153:     667, 667, 611, 556,  556, 556, 556, 556,  556,  889, 500,  556, 556,",
          "1154:     556, 556, 278, 278,  278, 278, 556, 556,  556,  556, 556,  556, 556,",
          "1155:     584, 611, 556, 556,  556, 556, 500, 556,  500};",
          "1158:     250, 250, 250, 250,  250, 250, 250,  250, 250,  250,  250, 250, 250, 250,",
          "1159:     250, 250, 250, 250,  250, 250, 250,  250, 250,  250,  250, 250, 250, 250,",
          "1160:     250, 250, 250, 250,  250, 333, 713,  500, 549,  833,  778, 439, 333, 333,",
          "1161:     500, 549, 250, 549,  250, 278, 500,  500, 500,  500,  500, 500, 500, 500,",
          "1162:     500, 500, 278, 278,  549, 549, 549,  444, 549,  722,  667, 722, 612, 611,",
          "1163:     763, 603, 722, 333,  631, 722, 686,  889, 722,  722,  768, 741, 556, 592,",
          "1164:     611, 690, 439, 768,  645, 795, 611,  333, 863,  333,  658, 500, 500, 631,",
          "1165:     549, 549, 494, 439,  521, 411, 603,  329, 603,  549,  549, 576, 521, 549,",
          "1166:     549, 521, 549, 603,  439, 576, 713,  686, 493,  686,  494, 480, 200, 480,",
          "1167:     549, 0,   0,   0,    0,   0,   0,    0,   0,    0,    0,   0,   0,   0,",
          "1168:     0,   0,   0,   0,    0,   0,   0,    0,   0,    0,    0,   0,   0,   0,",
          "1169:     0,   0,   0,   0,    0,   0,   750,  620, 247,  549,  167, 713, 500, 753,",
          "1170:     753, 753, 753, 1042, 987, 603, 987,  603, 400,  549,  411, 549, 549, 713,",
          "1171:     494, 460, 549, 549,  549, 549, 1000, 603, 1000, 658,  823, 686, 795, 987,",
          "1172:     768, 768, 823, 768,  768, 713, 713,  713, 713,  713,  713, 713, 768, 713,",
          "1173:     790, 790, 890, 823,  549, 250, 713,  603, 603,  1042, 987, 603, 987, 603,",
          "1174:     494, 329, 790, 790,  786, 713, 384,  384, 384,  384,  384, 384, 494, 494,",
          "1175:     494, 494, 0,   329,  274, 686, 686,  686, 384,  384,  384, 384, 384, 384,",
          "1176:     494, 494, 494, 0};",
          "1179:     250, 250, 250, 250, 250, 250, 250, 250,  250, 250, 250, 250,  250, 250,",
          "1180:     250, 250, 250, 250, 250, 250, 250, 250,  250, 250, 250, 250,  250, 250,",
          "1181:     250, 250, 250, 250, 250, 333, 408, 500,  500, 833, 778, 180,  333, 333,",
          "1182:     500, 564, 250, 333, 250, 278, 500, 500,  500, 500, 500, 500,  500, 500,",
          "1183:     500, 500, 278, 278, 564, 564, 564, 444,  921, 722, 667, 667,  722, 611,",
          "1184:     556, 722, 722, 333, 389, 722, 611, 889,  722, 722, 556, 722,  667, 556,",
          "1185:     611, 722, 722, 944, 722, 722, 611, 333,  278, 333, 469, 500,  333, 444,",
          "1186:     500, 444, 500, 444, 333, 500, 500, 278,  278, 500, 278, 778,  500, 500,",
          "1187:     500, 500, 333, 389, 278, 500, 500, 722,  500, 500, 444, 480,  200, 480,",
          "1188:     541, 350, 500, 350, 333, 500, 444, 1000, 500, 500, 333, 1000, 556, 333,",
          "1189:     889, 350, 611, 350, 350, 333, 333, 444,  444, 350, 500, 1000, 333, 980,",
          "1190:     389, 333, 722, 350, 444, 722, 250, 333,  500, 500, 500, 500,  200, 500,",
          "1191:     333, 760, 276, 500, 564, 333, 760, 333,  400, 564, 300, 300,  333, 500,",
          "1192:     453, 250, 333, 300, 310, 500, 750, 750,  750, 444, 722, 722,  722, 722,",
          "1193:     722, 722, 889, 667, 611, 611, 611, 611,  333, 333, 333, 333,  722, 722,",
          "1194:     722, 722, 722, 722, 722, 564, 722, 722,  722, 722, 722, 722,  556, 500,",
          "1195:     444, 444, 444, 444, 444, 444, 667, 444,  444, 444, 444, 444,  278, 278,",
          "1196:     278, 278, 500, 500, 500, 500, 500, 500,  500, 564, 500, 500,  500, 500,",
          "1197:     500, 500, 500, 500};",
          "1200:     250, 250, 250, 250,  250, 250, 250, 250,  250,  250,  250,  250,  250,",
          "1201:     250, 250, 250, 250,  250, 250, 250, 250,  250,  250,  250,  250,  250,",
          "1202:     250, 250, 250, 250,  250, 250, 250, 333,  555,  500,  500,  1000, 833,",
          "1203:     278, 333, 333, 500,  570, 250, 333, 250,  278,  500,  500,  500,  500,",
          "1204:     500, 500, 500, 500,  500, 500, 333, 333,  570,  570,  570,  500,  930,",
          "1205:     722, 667, 722, 722,  667, 611, 778, 778,  389,  500,  778,  667,  944,",
          "1206:     722, 778, 611, 778,  722, 556, 667, 722,  722,  1000, 722,  722,  667,",
          "1207:     333, 278, 333, 581,  500, 333, 500, 556,  444,  556,  444,  333,  500,",
          "1208:     556, 278, 333, 556,  278, 833, 556, 500,  556,  556,  444,  389,  333,",
          "1209:     556, 500, 722, 500,  500, 444, 394, 220,  394,  520,  350,  500,  350,",
          "1210:     333, 500, 500, 1000, 500, 500, 333, 1000, 556,  333,  1000, 350,  667,",
          "1211:     350, 350, 333, 333,  500, 500, 350, 500,  1000, 333,  1000, 389,  333,",
          "1212:     722, 350, 444, 722,  250, 333, 500, 500,  500,  500,  220,  500,  333,",
          "1213:     747, 300, 500, 570,  333, 747, 333, 400,  570,  300,  300,  333,  556,",
          "1214:     540, 250, 333, 300,  330, 500, 750, 750,  750,  500,  722,  722,  722,",
          "1215:     722, 722, 722, 1000, 722, 667, 667, 667,  667,  389,  389,  389,  389,",
          "1216:     722, 722, 778, 778,  778, 778, 778, 570,  778,  722,  722,  722,  722,",
          "1217:     722, 611, 556, 500,  500, 500, 500, 500,  500,  722,  444,  444,  444,",
          "1218:     444, 444, 278, 278,  278, 278, 500, 556,  500,  500,  500,  500,  500,",
          "1219:     570, 500, 556, 556,  556, 556, 500, 556,  500};",
          "1222:     250, 250, 250, 250, 250, 250, 250, 250,  250, 250, 250, 250,  250, 250,",
          "1223:     250, 250, 250, 250, 250, 250, 250, 250,  250, 250, 250, 250,  250, 250,",
          "1224:     250, 250, 250, 250, 250, 389, 555, 500,  500, 833, 778, 278,  333, 333,",
          "1225:     500, 570, 250, 333, 250, 278, 500, 500,  500, 500, 500, 500,  500, 500,",
          "1226:     500, 500, 333, 333, 570, 570, 570, 500,  832, 667, 667, 667,  722, 667,",
          "1227:     667, 722, 778, 389, 500, 667, 611, 889,  722, 722, 611, 722,  667, 556,",
          "1228:     611, 722, 667, 889, 667, 611, 611, 333,  278, 333, 570, 500,  333, 500,",
          "1229:     500, 444, 500, 444, 333, 500, 556, 278,  278, 500, 278, 778,  556, 500,",
          "1230:     500, 500, 389, 389, 278, 556, 444, 667,  500, 444, 389, 348,  220, 348,",
          "1231:     570, 350, 500, 350, 333, 500, 500, 1000, 500, 500, 333, 1000, 556, 333,",
          "1232:     944, 350, 611, 350, 350, 333, 333, 500,  500, 350, 500, 1000, 333, 1000,",
          "1233:     389, 333, 722, 350, 389, 611, 250, 389,  500, 500, 500, 500,  220, 500,",
          "1234:     333, 747, 266, 500, 606, 333, 747, 333,  400, 570, 300, 300,  333, 576,",
          "1235:     500, 250, 333, 300, 300, 500, 750, 750,  750, 500, 667, 667,  667, 667,",
          "1236:     667, 667, 944, 667, 667, 667, 667, 667,  389, 389, 389, 389,  722, 722,",
          "1237:     722, 722, 722, 722, 722, 570, 722, 722,  722, 722, 722, 611,  611, 500,",
          "1238:     500, 500, 500, 500, 500, 500, 722, 444,  444, 444, 444, 444,  278, 278,",
          "1239:     278, 278, 500, 556, 500, 500, 500, 500,  500, 570, 500, 556,  556, 556,",
          "1240:     556, 444, 500, 444};",
          "1243:     250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250,  250, 250,",
          "1244:     250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250,  250, 250,",
          "1245:     250, 250, 250, 250, 250, 333, 420, 500, 500, 833, 778, 214,  333, 333,",
          "1246:     500, 675, 250, 333, 250, 278, 500, 500, 500, 500, 500, 500,  500, 500,",
          "1247:     500, 500, 333, 333, 675, 675, 675, 500, 920, 611, 611, 667,  722, 611,",
          "1248:     611, 722, 722, 333, 444, 667, 556, 833, 667, 722, 611, 722,  611, 500,",
          "1249:     556, 722, 611, 833, 611, 556, 556, 389, 278, 389, 422, 500,  333, 500,",
          "1250:     500, 444, 500, 444, 278, 500, 500, 278, 278, 444, 278, 722,  500, 500,",
          "1251:     500, 500, 389, 389, 278, 500, 444, 667, 444, 444, 389, 400,  275, 400,",
          "1252:     541, 350, 500, 350, 333, 500, 556, 889, 500, 500, 333, 1000, 500, 333,",
          "1253:     944, 350, 556, 350, 350, 333, 333, 556, 556, 350, 500, 889,  333, 980,",
          "1254:     389, 333, 667, 350, 389, 556, 250, 389, 500, 500, 500, 500,  275, 500,",
          "1255:     333, 760, 276, 500, 675, 333, 760, 333, 400, 675, 300, 300,  333, 500,",
          "1256:     523, 250, 333, 300, 310, 500, 750, 750, 750, 500, 611, 611,  611, 611,",
          "1257:     611, 611, 889, 667, 611, 611, 611, 611, 333, 333, 333, 333,  722, 667,",
          "1258:     722, 722, 722, 722, 722, 675, 722, 722, 722, 722, 722, 556,  611, 500,",
          "1259:     500, 500, 500, 500, 500, 500, 667, 444, 444, 444, 444, 444,  278, 278,",
          "1260:     278, 278, 500, 500, 500, 500, 500, 500, 500, 675, 500, 500,  500, 500,",
          "1261:     500, 444, 500, 444};",
          "1264:     0,   0,   0,   0,   0,    0,   0,   0,   0,   0,   0,   0,   0,   0,",
          "1265:     0,   0,   0,   0,   0,    0,   0,   0,   0,   0,   0,   0,   0,   0,",
          "1266:     0,   0,   0,   0,   278,  974, 961, 974, 980, 719, 789, 790, 791, 690,",
          "1267:     960, 939, 549, 855, 911,  933, 911, 945, 974, 755, 846, 762, 761, 571,",
          "1268:     677, 763, 760, 759, 754,  494, 552, 537, 577, 692, 786, 788, 788, 790,",
          "1269:     793, 794, 816, 823, 789,  841, 823, 833, 816, 831, 923, 744, 723, 749,",
          "1270:     790, 792, 695, 776, 768,  792, 759, 707, 708, 682, 701, 826, 815, 789,",
          "1271:     789, 707, 687, 696, 689,  786, 787, 713, 791, 785, 791, 873, 761, 762,",
          "1272:     762, 759, 759, 892, 892,  788, 784, 438, 138, 277, 415, 392, 392, 668,",
          "1273:     668, 0,   390, 390, 317,  317, 276, 276, 509, 509, 410, 410, 234, 234,",
          "1274:     334, 334, 0,   0,   0,    0,   0,   0,   0,   0,   0,   0,   0,   0,",
          "1275:     0,   0,   0,   0,   0,    0,   0,   732, 544, 544, 910, 667, 760, 760,",
          "1276:     776, 595, 694, 626, 788,  788, 788, 788, 788, 788, 788, 788, 788, 788,",
          "1277:     788, 788, 788, 788, 788,  788, 788, 788, 788, 788, 788, 788, 788, 788,",
          "1278:     788, 788, 788, 788, 788,  788, 788, 788, 788, 788, 788, 788, 788, 788,",
          "1279:     788, 788, 894, 838, 1016, 458, 748, 924, 748, 918, 927, 928, 928, 834,",
          "1280:     873, 828, 924, 924, 917,  930, 931, 463, 883, 836, 836, 867, 867, 696,",
          "1281:     696, 874, 0,   874, 760,  946, 771, 865, 771, 888, 967, 888, 831, 873,",
          "1282:     927, 970, 918, 0};",
          "1285:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1286:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1287:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1288:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1289:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1290:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1291:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1292:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1293:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1294:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1295:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1296:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1297:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1298:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1299:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1300:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1301:     600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,",
          "1302:     600,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1470:     if (strcmp(font_name, \"Helvetica-Oblique\") == 0)",
          "1471:         return helvetica_oblique_widths;",
          "1472:     if (strcmp(font_name, \"Courier\") == 0 ||",
          "1476:         return courier_widths;",
          "1477:     if (strcmp(font_name, \"Times-Roman\") == 0)",
          "1478:         return times_widths;",
          "",
          "[Removed Lines]",
          "1473:             strcmp(font_name, \"Courier-Bold\") == 0 ||",
          "1474:             strcmp(font_name, \"Courier-BoldOblique\") == 0 ||",
          "1475:             strcmp(font_name, \"Courier-Oblique\") == 0)",
          "",
          "[Added Lines]",
          "1331:         strcmp(font_name, \"Courier-Bold\") == 0 ||",
          "1332:         strcmp(font_name, \"Courier-BoldOblique\") == 0 ||",
          "1333:         strcmp(font_name, \"Courier-Oblique\") == 0)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1496:     const uint16_t *widths = find_font_widths(font_name);",
          "1498:     if (!widths)",
          "1500:                            pdf->current_font->font.name);",
          "1501:     return pdf_text_pixel_width(text, -1, size, widths);",
          "1502: }",
          "",
          "[Removed Lines]",
          "1499:         return pdf_set_err(pdf, -EINVAL, \"Unable to determine width for font '%s'\",",
          "",
          "[Added Lines]",
          "1357:         return pdf_set_err(pdf, -EINVAL,",
          "1358:                            \"Unable to determine width for font '%s'\",",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1527:     widths = find_font_widths(pdf->current_font->font.name);",
          "1528:     if (!widths)",
          "1530:                            pdf->current_font->font.name);",
          "1532:     while (start && *start) {",
          "",
          "[Removed Lines]",
          "1529:         return pdf_set_err(pdf, -EINVAL, \"Unable to determine width for font '%s'\",",
          "",
          "[Added Lines]",
          "1388:         return pdf_set_err(pdf, -EINVAL,",
          "1389:                            \"Unable to determine width for font '%s'\",",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1545:                 int i;",
          "1547:                 for (i = end - start - 1; i > 0; i--)",
          "1549:                         break;",
          "1551:                 end = start + i;",
          "",
          "[Removed Lines]",
          "1548:                     if (pdf_text_pixel_width(start, i, size, widths) < wrap_width)",
          "",
          "[Added Lines]",
          "1408:                     if (pdf_text_pixel_width(start, i, size, widths) <",
          "1409:                         wrap_width)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1564:             strncpy(line, start, len);",
          "1565:             line[len] = '\\0';",
          "1570:             case PDF_ALIGN_RIGHT:",
          "1571:                 xoff_align += wrap_width - line_width;",
          "1572:                 break;",
          "1573:             case PDF_ALIGN_CENTER:",
          "1574:                 xoff_align += (wrap_width - line_width) / 2;",
          "1575:                 break;",
          "1577:             }",
          "1579:             pdf_add_text(pdf, page, line, size, xoff_align, yoff, colour);",
          "1582:             if (*end == ' ')",
          "1583:                 end++;",
          "",
          "[Removed Lines]",
          "1567:             line_width=pdf_text_pixel_width(start, len, size, widths);",
          "1569:             switch(align) {",
          "",
          "[Added Lines]",
          "1428:             line_width = pdf_text_pixel_width(start, len, size, widths);",
          "1430:             switch (align) {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1591:     return orig_yoff - yoff;",
          "1592: }",
          "1597: {",
          "1598:     int ret;",
          "1599:     struct dstr str = {0, 0, 0};",
          "",
          "[Removed Lines]",
          "1595: int pdf_add_line(struct pdf_doc *pdf, struct pdf_object *page,",
          "1596:                  int x1, int y1, int x2, int y2, int width, uint32_t colour)",
          "",
          "[Added Lines]",
          "1453: int pdf_add_line(struct pdf_doc *pdf, struct pdf_object *page, int x1, int y1,",
          "1454:                  int x2, int y2, int width, uint32_t colour)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1602:     dstr_printf(&str, \"%d w\\r\\n\", width);",
          "1603:     dstr_printf(&str, \"%d %d m\\r\\n\", x1, y1);",
          "1604:     dstr_printf(&str, \"/DeviceRGB CS\\r\\n\");",
          "1607:     dstr_printf(&str, \"%d %d l S\\r\\n\", x2, y2);",
          "1608:     dstr_append(&str, \"ET\");",
          "",
          "[Removed Lines]",
          "1605:     dstr_printf(&str, \"%f %f %f RG\\r\\n\",",
          "1606:                 PDF_RGB_R(colour), PDF_RGB_G(colour), PDF_RGB_B(colour));",
          "",
          "[Added Lines]",
          "1463:     dstr_printf(&str, \"%f %f %f RG\\r\\n\", PDF_RGB_R(colour), PDF_RGB_G(colour),",
          "1464:                 PDF_RGB_B(colour));",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1613:     return ret;",
          "1614: }",
          "1619: {",
          "1620:     int ret;",
          "1621:     struct dstr str = {0, 0, 0};",
          "1625:     float lx, ly;",
          "1632:     if (!PDF_IS_TRANSPARENT(fill_colour)) {",
          "1633:         dstr_append(&str, \"BT \");",
          "",
          "[Removed Lines]",
          "1616: int pdf_add_ellipse(struct pdf_doc *pdf, struct pdf_object *page,",
          "1617:                     int xr, int yr, int xradius, int yradius,",
          "1618:                     int width, uint32_t colour, uint32_t fill_colour)",
          "1623:     float rx = xradius*1.0f;",
          "1624:     float ry = yradius*1.0f;",
          "1626:     float x = xr*1.0f;",
          "1627:     float y = yr*1.0f;",
          "1629:     lx=(4.0f/3.0f)*(M_SQRT2-1)*rx;",
          "1630:     ly=(4.0f/3.0f)*(M_SQRT2-1)*ry;",
          "",
          "[Added Lines]",
          "1474: int pdf_add_ellipse(struct pdf_doc *pdf, struct pdf_object *page, int xr,",
          "1475:                     int yr, int xradius, int yradius, int width,",
          "1476:                     uint32_t colour, uint32_t fill_colour)",
          "1481:     float rx = xradius * 1.0f;",
          "1482:     float ry = yradius * 1.0f;",
          "1484:     float x = xr * 1.0f;",
          "1485:     float y = yr * 1.0f;",
          "1487:     lx = (4.0f / 3.0f) * (M_SQRT2 - 1) * rx;",
          "1488:     ly = (4.0f / 3.0f) * (M_SQRT2 - 1) * ry;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1643:     dstr_printf(&str, \"/DeviceRGB CS\\r\\n\");",
          "1646:     dstr_printf(&str, \"%d w \", width);",
          "1670:     if (PDF_IS_TRANSPARENT(fill_colour))",
          "1672:     else",
          "1675:     dstr_append(&str, \"ET\");",
          "",
          "[Removed Lines]",
          "1644:     dstr_printf(&str, \"%f %f %f RG\\r\\n\", PDF_RGB_R(colour), PDF_RGB_G(colour), PDF_RGB_B(colour));",
          "1648:     dstr_printf(&str, \"%.2f %.2f m \", (x+rx),(y) );",
          "1650:     dstr_printf(&str, \"%.2f %.2f %.2f %.2f %.2f %.2f c \",",
          "1651:                 (x+rx),(y-ly),",
          "1652:                 (x+lx),(y-ry),",
          "1653:                 x,(y-ry) );",
          "1655:     dstr_printf(&str,\"%.2f %.2f %.2f %.2f %.2f %.2f c \",",
          "1656:                 (x-lx),(y-ry),",
          "1657:                 (x-rx),(y-ly),",
          "1658:                 (x-rx),y);",
          "1660:     dstr_printf(&str,\"%.2f %.2f %.2f %.2f %.2f %.2f c \",",
          "1661:                 (x-rx),(y+ly),",
          "1662:                 (x-lx),(y+ry),",
          "1663:                 x,(y+ry) );",
          "1665:     dstr_printf(&str,\"%.2f %.2f %.2f %.2f %.2f %.2f c \",",
          "1666:                 (x+lx),(y+ry),",
          "1667:                 (x+rx),(y+ly),",
          "1668:                 (x+rx),y);",
          "1671:         dstr_printf(&str,\"%s\",\"S \");",
          "1673:         dstr_printf(&str,\"%s\",\"B \");",
          "",
          "[Added Lines]",
          "1502:     dstr_printf(&str, \"%f %f %f RG\\r\\n\", PDF_RGB_R(colour), PDF_RGB_G(colour),",
          "1503:                 PDF_RGB_B(colour));",
          "1507:     dstr_printf(&str, \"%.2f %.2f m \", (x + rx), (y));",
          "1509:     dstr_printf(&str, \"%.2f %.2f %.2f %.2f %.2f %.2f c \", (x + rx), (y - ly),",
          "1510:                 (x + lx), (y - ry), x, (y - ry));",
          "1512:     dstr_printf(&str, \"%.2f %.2f %.2f %.2f %.2f %.2f c \", (x - lx), (y - ry),",
          "1513:                 (x - rx), (y - ly), (x - rx), y);",
          "1515:     dstr_printf(&str, \"%.2f %.2f %.2f %.2f %.2f %.2f c \", (x - rx), (y + ly),",
          "1516:                 (x - lx), (y + ry), x, (y + ry));",
          "1518:     dstr_printf(&str, \"%.2f %.2f %.2f %.2f %.2f %.2f c \", (x + lx), (y + ry),",
          "1519:                 (x + rx), (y + ly), (x + rx), y);",
          "1522:         dstr_printf(&str, \"%s\", \"S \");",
          "1524:         dstr_printf(&str, \"%s\", \"B \");",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1680:     return ret;",
          "1681: }",
          "1686: {",
          "1688: }",
          "1692:                       uint32_t colour)",
          "1693: {",
          "1694:     int ret;",
          "1695:     struct dstr str = {0, 0, 0};",
          "1697:     dstr_append(&str, \"BT \");",
          "1700:     dstr_printf(&str, \"%d w \", border_width);",
          "1701:     dstr_printf(&str, \"%d %d %d %d re S \", x, y, width, height);",
          "1702:     dstr_append(&str, \"ET\");",
          "",
          "[Removed Lines]",
          "1683: int pdf_add_circle(struct pdf_doc *pdf, struct pdf_object *page,",
          "1684:                    int xr, int yr, int radius,",
          "1685:                    int width, uint32_t colour, uint32_t fill_colour)",
          "1687:     return pdf_add_ellipse(pdf, page, xr, yr, radius, radius, width, colour, fill_colour);",
          "1690: int pdf_add_rectangle(struct pdf_doc *pdf, struct pdf_object *page,",
          "1691:                       int x, int y, int width, int height, int border_width,",
          "1698:     dstr_printf(&str, \"%f %f %f RG \",",
          "1699:                 PDF_RGB_R(colour), PDF_RGB_G(colour), PDF_RGB_B(colour));",
          "",
          "[Added Lines]",
          "1534: int pdf_add_circle(struct pdf_doc *pdf, struct pdf_object *page, int xr,",
          "1535:                    int yr, int radius, int width, uint32_t colour,",
          "1536:                    uint32_t fill_colour)",
          "1538:     return pdf_add_ellipse(pdf, page, xr, yr, radius, radius, width, colour,",
          "1539:                            fill_colour);",
          "1542: int pdf_add_rectangle(struct pdf_doc *pdf, struct pdf_object *page, int x,",
          "1543:                       int y, int width, int height, int border_width,",
          "1550:     dstr_printf(&str, \"%f %f %f RG \", PDF_RGB_R(colour), PDF_RGB_G(colour),",
          "1551:                 PDF_RGB_B(colour));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1715:     struct dstr str = {0, 0, 0};",
          "1717:     dstr_append(&str, \"BT \");",
          "1720:     dstr_printf(&str, \"%d w \", border_width);",
          "1721:     dstr_printf(&str, \"%d %d %d %d re f \", x, y, width, height);",
          "1722:     dstr_append(&str, \"ET\");",
          "",
          "[Removed Lines]",
          "1718:     dstr_printf(&str, \"%f %f %f rg \",",
          "1719:                 PDF_RGB_R(colour), PDF_RGB_G(colour), PDF_RGB_B(colour));",
          "",
          "[Added Lines]",
          "1570:     dstr_printf(&str, \"%f %f %f rg \", PDF_RGB_R(colour), PDF_RGB_G(colour),",
          "1571:                 PDF_RGB_B(colour));",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1731:     uint32_t code;",
          "1732:     char ch;",
          "1733: } code_128a_encoding[] = {",
          "1841: };",
          "1843: static int find_128_encoding(char ch)",
          "",
          "[Removed Lines]",
          "1734:     {0x212222, ' '},",
          "1735:     {0x222122, '!'},",
          "1736:     {0x222221, '\"'},",
          "1737:     {0x121223, '#'},",
          "1738:     {0x121322, '$'},",
          "1739:     {0x131222, '%'},",
          "1740:     {0x122213, '&'},",
          "1741:     {0x122312, '\\''},",
          "1742:     {0x132212, '('},",
          "1743:     {0x221213, ')'},",
          "1744:     {0x221312, '*'},",
          "1745:     {0x231212, '+'},",
          "1746:     {0x112232, ','},",
          "1747:     {0x122132, '-'},",
          "1748:     {0x122231, '.'},",
          "1749:     {0x113222, '/'},",
          "1750:     {0x123122, '0'},",
          "1751:     {0x123221, '1'},",
          "1752:     {0x223211, '2'},",
          "1753:     {0x221132, '3'},",
          "1754:     {0x221231, '4'},",
          "1755:     {0x213212, '5'},",
          "1756:     {0x223112, '6'},",
          "1757:     {0x312131, '7'},",
          "1758:     {0x311222, '8'},",
          "1759:     {0x321122, '9'},",
          "1760:     {0x321221, ':'},",
          "1761:     {0x312212, ';'},",
          "1762:     {0x322112, '<'},",
          "1763:     {0x322211, '='},",
          "1764:     {0x212123, '>'},",
          "1765:     {0x212321, '?'},",
          "1766:     {0x232121, '@'},",
          "1767:     {0x111323, 'A'},",
          "1768:     {0x131123, 'B'},",
          "1769:     {0x131321, 'C'},",
          "1770:     {0x112313, 'D'},",
          "1771:     {0x132113, 'E'},",
          "1772:     {0x132311, 'F'},",
          "1773:     {0x211313, 'G'},",
          "1774:     {0x231113, 'H'},",
          "1775:     {0x231311, 'I'},",
          "1776:     {0x112133, 'J'},",
          "1777:     {0x112331, 'K'},",
          "1778:     {0x132131, 'L'},",
          "1779:     {0x113123, 'M'},",
          "1780:     {0x113321, 'N'},",
          "1781:     {0x133121, 'O'},",
          "1782:     {0x313121, 'P'},",
          "1783:     {0x211331, 'Q'},",
          "1784:     {0x231131, 'R'},",
          "1785:     {0x213113, 'S'},",
          "1786:     {0x213311, 'T'},",
          "1787:     {0x213131, 'U'},",
          "1788:     {0x311123, 'V'},",
          "1789:     {0x311321, 'W'},",
          "1790:     {0x331121, 'X'},",
          "1791:     {0x312113, 'Y'},",
          "1792:     {0x312311, 'Z'},",
          "1793:     {0x332111, '['},",
          "1794:     {0x314111, '\\\\'},",
          "1795:     {0x221411, ']'},",
          "1796:     {0x431111, '^'},",
          "1797:     {0x111224, '_'},",
          "1798:     {0x111422, '`'},",
          "1799:     {0x121124, 'a'},",
          "1800:     {0x121421, 'b'},",
          "1801:     {0x141122, 'c'},",
          "1802:     {0x141221, 'd'},",
          "1803:     {0x112214, 'e'},",
          "1804:     {0x112412, 'f'},",
          "1805:     {0x122114, 'g'},",
          "1806:     {0x122411, 'h'},",
          "1807:     {0x142112, 'i'},",
          "1808:     {0x142211, 'j'},",
          "1809:     {0x241211, 'k'},",
          "1810:     {0x221114, 'l'},",
          "1811:     {0x413111, 'm'},",
          "1812:     {0x241112, 'n'},",
          "1813:     {0x134111, 'o'},",
          "1814:     {0x111242, 'p'},",
          "1815:     {0x121142, 'q'},",
          "1816:     {0x121241, 'r'},",
          "1817:     {0x114212, 's'},",
          "1818:     {0x124112, 't'},",
          "1819:     {0x124211, 'u'},",
          "1820:     {0x411212, 'v'},",
          "1821:     {0x421112, 'w'},",
          "1822:     {0x421211, 'x'},",
          "1823:     {0x212141, 'y'},",
          "1824:     {0x214121, 'z'},",
          "1825:     {0x412121, '{'},",
          "1826:     {0x111143, '|'},",
          "1827:     {0x111341, '}'},",
          "1828:     {0x131141, '~'},",
          "1829:     {0x114113, '\\0'},",
          "1830:     {0x114311, '\\0'},",
          "1831:     {0x411113, '\\0'},",
          "1832:     {0x411311, '\\0'},",
          "1833:     {0x113141, '\\0'},",
          "1834:     {0x114131, '\\0'},",
          "1835:     {0x311141, '\\0'},",
          "1836:     {0x411131, '\\0'},",
          "1837:     {0x211412, '\\0'},",
          "1838:     {0x211214, '\\0'},",
          "1839:     {0x211232, '\\0'},",
          "1840:     {0x2331112, '\\0'},",
          "",
          "[Added Lines]",
          "1586:     {0x212222, ' '},  {0x222122, '!'},  {0x222221, '\"'},   {0x121223, '#'},",
          "1587:     {0x121322, '$'},  {0x131222, '%'},  {0x122213, '&'},   {0x122312, '\\''},",
          "1588:     {0x132212, '('},  {0x221213, ')'},  {0x221312, '*'},   {0x231212, '+'},",
          "1589:     {0x112232, ','},  {0x122132, '-'},  {0x122231, '.'},   {0x113222, '/'},",
          "1590:     {0x123122, '0'},  {0x123221, '1'},  {0x223211, '2'},   {0x221132, '3'},",
          "1591:     {0x221231, '4'},  {0x213212, '5'},  {0x223112, '6'},   {0x312131, '7'},",
          "1592:     {0x311222, '8'},  {0x321122, '9'},  {0x321221, ':'},   {0x312212, ';'},",
          "1593:     {0x322112, '<'},  {0x322211, '='},  {0x212123, '>'},   {0x212321, '?'},",
          "1594:     {0x232121, '@'},  {0x111323, 'A'},  {0x131123, 'B'},   {0x131321, 'C'},",
          "1595:     {0x112313, 'D'},  {0x132113, 'E'},  {0x132311, 'F'},   {0x211313, 'G'},",
          "1596:     {0x231113, 'H'},  {0x231311, 'I'},  {0x112133, 'J'},   {0x112331, 'K'},",
          "1597:     {0x132131, 'L'},  {0x113123, 'M'},  {0x113321, 'N'},   {0x133121, 'O'},",
          "1598:     {0x313121, 'P'},  {0x211331, 'Q'},  {0x231131, 'R'},   {0x213113, 'S'},",
          "1599:     {0x213311, 'T'},  {0x213131, 'U'},  {0x311123, 'V'},   {0x311321, 'W'},",
          "1600:     {0x331121, 'X'},  {0x312113, 'Y'},  {0x312311, 'Z'},   {0x332111, '['},",
          "1601:     {0x314111, '\\\\'}, {0x221411, ']'},  {0x431111, '^'},   {0x111224, '_'},",
          "1602:     {0x111422, '`'},  {0x121124, 'a'},  {0x121421, 'b'},   {0x141122, 'c'},",
          "1603:     {0x141221, 'd'},  {0x112214, 'e'},  {0x112412, 'f'},   {0x122114, 'g'},",
          "1604:     {0x122411, 'h'},  {0x142112, 'i'},  {0x142211, 'j'},   {0x241211, 'k'},",
          "1605:     {0x221114, 'l'},  {0x413111, 'm'},  {0x241112, 'n'},   {0x134111, 'o'},",
          "1606:     {0x111242, 'p'},  {0x121142, 'q'},  {0x121241, 'r'},   {0x114212, 's'},",
          "1607:     {0x124112, 't'},  {0x124211, 'u'},  {0x411212, 'v'},   {0x421112, 'w'},",
          "1608:     {0x421211, 'x'},  {0x212141, 'y'},  {0x214121, 'z'},   {0x412121, '{'},",
          "1609:     {0x111143, '|'},  {0x111341, '}'},  {0x131141, '~'},   {0x114113, '\\0'},",
          "1610:     {0x114311, '\\0'}, {0x411113, '\\0'}, {0x411311, '\\0'},  {0x113141, '\\0'},",
          "1611:     {0x114131, '\\0'}, {0x311141, '\\0'}, {0x411131, '\\0'},  {0x211412, '\\0'},",
          "1612:     {0x211214, '\\0'}, {0x211232, '\\0'}, {0x2331112, '\\0'},",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1863:         uint8_t mask = (code >> shift) & 0xf;",
          "1865:         if (!(i % 2))",
          "1867:         x += line_width * mask;",
          "1868:     }",
          "1869:     return x;",
          "",
          "[Removed Lines]",
          "1866:             pdf_add_filled_rectangle(pdf, page, x, y, line_width * mask, height, 0, colour);",
          "",
          "[Added Lines]",
          "1638:             pdf_add_filled_rectangle(pdf, page, x, y, line_width * mask,",
          "1639:                                      height, 0, colour);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1879:     int checksum, i;",
          "1881:     if (char_width / 11 <= 0)",
          "1884:     for (s = string; *s; s++)",
          "1885:         if (find_128_encoding(*s) < 0)",
          "1888:     x = pdf_barcode_128a_ch(pdf, page, x, y, char_width, height, colour, 104,",
          "1889:                             6);",
          "",
          "[Removed Lines]",
          "1882:         return pdf_set_err(pdf, -EINVAL, \"Insufficient width to draw barcode\");",
          "1886:             return pdf_set_err(pdf, -EINVAL, \"Invalid barcode character 0x%x\", *s);",
          "",
          "[Added Lines]",
          "1655:         return pdf_set_err(pdf, -EINVAL,",
          "1656:                            \"Insufficient width to draw barcode\");",
          "1660:             return pdf_set_err(pdf, -EINVAL, \"Invalid barcode character 0x%x\",",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1892:     for (i = 1, s = string; *s; s++, i++) {",
          "1893:         int index = find_128_encoding(*s);",
          "1896:         checksum += index * i;",
          "1897:     }",
          "1898:     x = pdf_barcode_128a_ch(pdf, page, x, y, char_width, height, colour,",
          "1899:                             checksum % 103, 6);",
          "1902:     return 0;",
          "1903: }",
          "",
          "[Removed Lines]",
          "1894:         x = pdf_barcode_128a_ch(pdf, page, x, y, char_width, height, colour, index,",
          "1895:                                 6);",
          "1900:     pdf_barcode_128a_ch(pdf, page, x, y, char_width, height, colour, 106,",
          "1901:                         7);",
          "",
          "[Added Lines]",
          "1669:         x = pdf_barcode_128a_ch(pdf, page, x, y, char_width, height, colour,",
          "1670:                                 index, 6);",
          "1675:     pdf_barcode_128a_ch(pdf, page, x, y, char_width, height, colour, 106, 7);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1911:     uint32_t code;",
          "1912:     char ch;",
          "1913: } code_39_encoding[] = {",
          "1953:     {0x121001, '*'}, // 'stop' character",
          "1954: };",
          "1958: {",
          "1959:     int nw = char_width / 12;",
          "1960:     int ww = char_width / 4;",
          "",
          "[Removed Lines]",
          "1914:     {0x012110, '1'},",
          "1915:     {0x102110, '2'},",
          "1916:     {0x002111, '3'},",
          "1917:     {0x112010, '4'},",
          "1918:     {0x012011, '5'},",
          "1919:     {0x102011, '6'},",
          "1920:     {0x112100, '7'},",
          "1921:     {0x012101, '8'},",
          "1922:     {0x102101, '9'},",
          "1923:     {0x112001, '0'},",
          "1924:     {0x011210, 'A'},",
          "1925:     {0x101210, 'B'},",
          "1926:     {0x001211, 'C'},",
          "1927:     {0x110210, 'D'},",
          "1928:     {0x010211, 'E'},",
          "1929:     {0x100211, 'F'},",
          "1930:     {0x111200, 'G'},",
          "1931:     {0x011201, 'H'},",
          "1932:     {0x101201, 'I'},",
          "1933:     {0x110201, 'J'},",
          "1934:     {0x011120, 'K'},",
          "1935:     {0x101120, 'L'},",
          "1936:     {0x001121, 'M'},",
          "1937:     {0x110120, 'N'},",
          "1938:     {0x010121, 'O'},",
          "1939:     {0x100121, 'P'},",
          "1940:     {0x111020, 'Q'},",
          "1941:     {0x011021, 'R'},",
          "1942:     {0x101021, 'S'},",
          "1943:     {0x110021, 'T'},",
          "1944:     {0x021110, 'U'},",
          "1945:     {0x120110, 'V'},",
          "1946:     {0x020111, 'W'},",
          "1947:     {0x121010, 'X'},",
          "1948:     {0x021011, 'Y'},",
          "1949:     {0x120011, 'Z'},",
          "1950:     {0x121100, '-'},",
          "1951:     {0x021101, '.'},",
          "1952:     {0x120101, ' '},",
          "1957: static int pdf_barcode_39_ch(struct pdf_doc *pdf, struct pdf_object *page, int x, int y, int char_width, int height, uint32_t colour, char ch)",
          "",
          "[Added Lines]",
          "1688:     {0x012110, '1'}, {0x102110, '2'}, {0x002111, '3'},",
          "1689:     {0x112010, '4'}, {0x012011, '5'}, {0x102011, '6'},",
          "1690:     {0x112100, '7'}, {0x012101, '8'}, {0x102101, '9'},",
          "1691:     {0x112001, '0'}, {0x011210, 'A'}, {0x101210, 'B'},",
          "1692:     {0x001211, 'C'}, {0x110210, 'D'}, {0x010211, 'E'},",
          "1693:     {0x100211, 'F'}, {0x111200, 'G'}, {0x011201, 'H'},",
          "1694:     {0x101201, 'I'}, {0x110201, 'J'}, {0x011120, 'K'},",
          "1695:     {0x101120, 'L'}, {0x001121, 'M'}, {0x110120, 'N'},",
          "1696:     {0x010121, 'O'}, {0x100121, 'P'}, {0x111020, 'Q'},",
          "1697:     {0x011021, 'R'}, {0x101021, 'S'}, {0x110021, 'T'},",
          "1698:     {0x021110, 'U'}, {0x120110, 'V'}, {0x020111, 'W'},",
          "1699:     {0x121010, 'X'}, {0x021011, 'Y'}, {0x120011, 'Z'},",
          "1700:     {0x121100, '-'}, {0x021101, '.'}, {0x120101, ' '},",
          "1704: static int pdf_barcode_39_ch(struct pdf_doc *pdf, struct pdf_object *page,",
          "1705:                              int x, int y, int char_width, int height,",
          "1706:                              uint32_t colour, char ch)",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1962:     uint32_t code;",
          "1964:     if (nw <= 1 || ww <= 1)",
          "1967:     for (i = 0; i < ARRAY_SIZE(code_39_encoding); i++) {",
          "1968:         if (code_39_encoding[i].ch == ch) {",
          "",
          "[Removed Lines]",
          "1965:         return pdf_set_err(pdf, -EINVAL, \"Insufficient width for each character\");",
          "",
          "[Added Lines]",
          "1714:         return pdf_set_err(pdf, -EINVAL,",
          "1715:                            \"Insufficient width for each character\");",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1971:         }",
          "1972:     }",
          "1973:     if (i == ARRAY_SIZE(code_39_encoding))",
          "1977:     for (i = 5; i >= 0; i--) {",
          "1978:         int pattern = (code >> i * 4) & 0xf;",
          "1979:         if (pattern == 0) { // wide",
          "1981:                 return pdf->errval;",
          "1982:             x += ww;",
          "1983:         }",
          "1984:         if (pattern == 1) { // narrow",
          "1986:                 return pdf->errval;",
          "1987:             x += nw;",
          "1988:         }",
          "",
          "[Removed Lines]",
          "1974:         return pdf_set_err(pdf, -EINVAL, \"Invalid Code 39 character %c 0x%x\", ch, ch);",
          "1980:             if (pdf_add_filled_rectangle(pdf, page, x, y, ww - 1, height, 0, colour) < 0)",
          "1985:             if (pdf_add_filled_rectangle(pdf, page, x, y, nw - 1, height, 0, colour) < 0)",
          "",
          "[Added Lines]",
          "1724:         return pdf_set_err(pdf, -EINVAL, \"Invalid Code 39 character %c 0x%x\",",
          "1725:                            ch, ch);",
          "1730:             if (pdf_add_filled_rectangle(pdf, page, x, y, ww - 1, height, 0,",
          "1731:                                          colour) < 0)",
          "1736:             if (pdf_add_filled_rectangle(pdf, page, x, y, nw - 1, height, 0,",
          "1737:                                          colour) < 0)",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2005:         return x;",
          "2007:     while (string && *string) {",
          "2009:         if (x < 0)",
          "2010:             return x;",
          "2011:         string++;",
          "",
          "[Removed Lines]",
          "2008:         x = pdf_barcode_39_ch(pdf, page, x, y, char_width, height, colour, *string);",
          "",
          "[Added Lines]",
          "1760:         x = pdf_barcode_39_ch(pdf, page, x, y, char_width, height, colour,",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2018:     return 0;",
          "2019: }",
          "2024: {",
          "2025:     if (!string || !*string)",
          "2026:         return 0;",
          "2027:     switch (code) {",
          "2028:     case PDF_BARCODE_128A:",
          "2031:     case PDF_BARCODE_39:",
          "2033:     default:",
          "2034:         return pdf_set_err(pdf, -EINVAL, \"Invalid barcode code %d\", code);",
          "2035:     }",
          "2036: }",
          "2040: {",
          "2041:     struct pdf_object *obj;",
          "2042:     char line[1024];",
          "",
          "[Removed Lines]",
          "2021: int pdf_add_barcode(struct pdf_doc *pdf, struct pdf_object *page,",
          "2022:                     int code, int x, int y, int width, int height,",
          "2023:                     const char *string, uint32_t colour)",
          "2029:         return pdf_add_barcode_128a(pdf, page, x, y,",
          "2030:                                     width, height, string, colour);",
          "2032:         return pdf_add_barcode_39(pdf, page, x, y, width, height, string, colour);",
          "2038: static pdf_object *pdf_add_raw_rgb24(struct pdf_doc *pdf,",
          "2039:                                      uint8_t *data, int width, int height)",
          "",
          "[Added Lines]",
          "1774: int pdf_add_barcode(struct pdf_doc *pdf, struct pdf_object *page, int code,",
          "1775:                     int x, int y, int width, int height, const char *string,",
          "1776:                     uint32_t colour)",
          "1782:         return pdf_add_barcode_128a(pdf, page, x, y, width, height, string,",
          "1783:                                     colour);",
          "1785:         return pdf_add_barcode_39(pdf, page, x, y, width, height, string,",
          "1786:                                   colour);",
          "1792: static pdf_object *pdf_add_raw_rgb24(struct pdf_doc *pdf, uint8_t *data,",
          "1793:                                      int width, int height)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2050:             \"/ColorSpace /DeviceRGB\\r\\n/Height %d\\r\\n/Width %d\\r\\n\"",
          "2051:             \"/BitsPerComponent 8\\r\\n/Filter /ASCIIHexDecode\\r\\n\"",
          "2052:             \"/Length %d\\r\\n>>stream\\r\\n\",",
          "2055:     len = strlen(line) + width * height * 3 * 2 + strlen(endstream) + 1;",
          "2056:     final_data = malloc(len);",
          "2057:     if (!final_data) {",
          "2060:         return NULL;",
          "2061:     }",
          "2062:     strcpy((char *)final_data, line);",
          "",
          "[Removed Lines]",
          "2053:             flexarray_size(&pdf->objects), height, width, width * height * 3 * 2 + 1);",
          "2058:         pdf_set_err(pdf, -ENOMEM, \"Unable to allocate %d bytes memory for image\",",
          "2059:                     len);",
          "",
          "[Added Lines]",
          "1807:             flexarray_size(&pdf->objects), height, width,",
          "1808:             width * height * 3 * 2 + 1);",
          "1813:         pdf_set_err(pdf, -ENOMEM,",
          "1814:                     \"Unable to allocate %d bytes memory for image\", len);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2080: }",
          "2085: {",
          "2086:     int i = 0;",
          "2089:         i += 4;",
          "2097:                     return -1;",
          "2099:                     return -1;",
          "2103:                     return 0;",
          "2104:                 }",
          "2107:             }",
          "2108:         }",
          "2109:     }",
          "",
          "[Removed Lines]",
          "2083: static int jpeg_size(unsigned char* data, unsigned int data_size,",
          "2084:                      int *width, int *height)",
          "2087:     if (i + 3 < data_size && data[i] == 0xFF && data[i+1] == 0xD8 &&",
          "2088:             data[i+2] == 0xFF && data[i+3] == 0xE0) {",
          "2090:         if(i + 6 < data_size &&",
          "2091:                 data[i+2] == 'J' && data[i+3] == 'F' && data[i+4] == 'I' &&",
          "2092:                 data[i+5] == 'F' && data[i+6] == 0x00) {",
          "2093:             unsigned short block_length = data[i] * 256 + data[i+1];",
          "2094:             while(i<data_size) {",
          "2095:                 i+=block_length;",
          "2096:                 if((i + 8) >= data_size)",
          "2098:                 if(data[i] != 0xFF)",
          "2100:                 if(data[i+1] == 0xC0) {",
          "2105:                 i+=2;",
          "2106:                 block_length = data[i] * 256 + data[i+1];",
          "",
          "[Added Lines]",
          "1838: static int jpeg_size(unsigned char *data, unsigned int data_size, int *width,",
          "1839:                      int *height)",
          "1842:     if (i + 3 < data_size && data[i] == 0xFF && data[i + 1] == 0xD8 &&",
          "1843:         data[i + 2] == 0xFF && data[i + 3] == 0xE0) {",
          "1845:         if (i + 6 < data_size && data[i + 2] == 'J' && data[i + 3] == 'F' &&",
          "1846:             data[i + 4] == 'I' && data[i + 5] == 'F' && data[i + 6] == 0x00) {",
          "1847:             unsigned short block_length = data[i] * 256 + data[i + 1];",
          "1848:             while (i < data_size) {",
          "1849:                 i += block_length;",
          "1850:                 if ((i + 8) >= data_size)",
          "1852:                 if (data[i] != 0xFF)",
          "1854:                 if (data[i + 1] == 0xC0) {",
          "1859:                 i += 2;",
          "1860:                 block_length = data[i] * 256 + data[i + 1];",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2155:     if (jpeg_size(jpeg_data, len, &width, &height) < 0) {",
          "2156:         free(jpeg_data);",
          "2158:                     jpeg_file);",
          "2159:         return NULL;",
          "2160:     }",
          "2162:     final_data = malloc(len + 1024);",
          "2163:     if (!final_data) {",
          "2165:         free(jpeg_data);",
          "2166:         return NULL;",
          "2167:     }",
          "",
          "[Removed Lines]",
          "2157:         pdf_set_err(pdf, -EINVAL, \"Unable to determine jpeg width/height from %s\",",
          "2164:         pdf_set_err(pdf, -errno, \"Unable to allocate jpeg data %zd\", len + 1024);",
          "",
          "[Added Lines]",
          "1911:         pdf_set_err(pdf, -EINVAL,",
          "1912:                     \"Unable to determine jpeg width/height from %s\",",
          "1919:         pdf_set_err(pdf, -errno, \"Unable to allocate jpeg data %zd\",",
          "1920:                     len + 1024);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2207:     return ret;",
          "2208: }",
          "2213: {",
          "2214:     struct pdf_object *obj;",
          "2215:     uint8_t *data;",
          "",
          "[Removed Lines]",
          "2210: int pdf_add_ppm(struct pdf_doc *pdf, struct pdf_object *page,",
          "2211:                 int x, int y, int display_width, int display_height,",
          "2212:                 const char *ppm_file)",
          "",
          "[Added Lines]",
          "1966: int pdf_add_ppm(struct pdf_doc *pdf, struct pdf_object *page, int x, int y,",
          "1967:                 int display_width, int display_height, const char *ppm_file)",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2257:     if (width > 2 << 14 || height > 2 << 14) {",
          "2258:         fclose(fp);",
          "2260:     }",
          "2262:     size = width * height * 3;",
          "2263:     data = malloc(size);",
          "2264:     if (!data) {",
          "2265:         fclose(fp);",
          "2267:     }",
          "2268:     if (fread(data, 1, size, fp) != size) {",
          "2269:         free(data);",
          "2270:         fclose(fp);",
          "2271:         return pdf_set_err(pdf, -EINVAL, \"Insufficient RGB data available\");",
          "2273:     }",
          "2274:     fclose(fp);",
          "2275:     obj = pdf_add_raw_rgb24(pdf, data, width, height);",
          "",
          "[Removed Lines]",
          "2259:         return pdf_set_err(pdf, -EINVAL, \"Invalid width/height in PPM file: %ux%u\", width, height);",
          "2266:         return pdf_set_err(pdf, -ENOMEM, \"Unable to allocate memory for RGB data\");",
          "",
          "[Added Lines]",
          "2014:         return pdf_set_err(pdf, -EINVAL,",
          "2015:                            \"Invalid width/height in PPM file: %ux%u\", width,",
          "2016:                            height);",
          "2023:         return pdf_set_err(pdf, -ENOMEM,",
          "2024:                            \"Unable to allocate memory for RGB data\");",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2280:     return pdf_add_image(pdf, page, obj, x, y, display_width, display_height);",
          "2281: }",
          "2286: {",
          "2287:     struct pdf_object *obj;",
          "",
          "[Removed Lines]",
          "2283: int pdf_add_jpeg(struct pdf_doc *pdf, struct pdf_object *page,",
          "2284:                  int x, int y, int display_width, int display_height,",
          "2285:                  const char *jpeg_file)",
          "",
          "[Added Lines]",
          "2040: int pdf_add_jpeg(struct pdf_doc *pdf, struct pdf_object *page, int x, int y,",
          "2041:                  int display_width, int display_height, const char *jpeg_file)",
          "",
          "---------------"
        ],
        "pdfgen.h||pdfgen.h": [
          "File: pdfgen.h -> pdfgen.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #ifndef PDFGEN_H",
          "9: #define PDFGEN_H",
          "12: #include <stdbool.h>",
          "",
          "[Removed Lines]",
          "11: #include <stdint.h>",
          "",
          "[Added Lines]",
          "12: #include <stdint.h>",
          "18: advanced",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: #include \"pdfgen.h\"",
          "30:  ...",
          "31: struct pdf_info info = {",
          "39: struct pdf_doc *pdf = pdf_create(PDF_A4_WIDTH, PDF_A4_HEIGHT, &info);",
          "40: pdf_set_font(pdf, \"Times-Roman\");",
          "41: pdf_append_page(pdf);",
          "",
          "[Removed Lines]",
          "32:   .creator = \"My software\",",
          "33:   .producer = \"My software\",",
          "34:   .title = \"My document\",",
          "35:   .author = \"My name\",",
          "36:   .subject = \"My subject\",",
          "37:   .date = \"Today\"",
          "38:   };",
          "",
          "[Added Lines]",
          "33:          .creator = \"My software\",",
          "34:          .producer = \"My software\",",
          "35:          .title = \"My document\",",
          "36:          .author = \"My name\",",
          "37:          .subject = \"My subject\",",
          "38:          .date = \"Today\"",
          "39:          };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "65: #define PDF_INCH_TO_POINT(inch) ((int)((inch) * 72 + 0.5))",
          "71: #define PDF_MM_TO_POINT(mm) ((int)((mm) * 72 / 25.4 + 0.5))",
          "",
          "[Added Lines]",
          "66: #define PDF_INCH_TO_POINT(inch) ((int)((inch)*72 + 0.5))",
          "72: #define PDF_MM_TO_POINT(mm) ((int)((mm)*72 / 25.4 + 0.5))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "108: #define PDF_RGB(r,g,b) ((((r) & 0xff) << 16) | (((g) & 0xff) << 8) | (((b) & 0xff)))",
          "",
          "[Added Lines]",
          "109: #define PDF_RGB(r, g, b)                                                     \\",
          "110:     ((((r)&0xff) << 16) | (((g)&0xff) << 8) | (((b)&0xff)))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "221: int pdf_page_set_size(struct pdf_doc *pdf, struct pdf_object *page, int width, int height);",
          "",
          "[Added Lines]",
          "223: int pdf_page_set_size(struct pdf_doc *pdf, struct pdf_object *page, int width,",
          "224:                       int height);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "241: int pdf_add_text(struct pdf_doc *pdf, struct pdf_object *page,",
          "",
          "[Removed Lines]",
          "242:                  const char *text, int size, int xoff, int yoff, uint32_t colour);",
          "",
          "[Added Lines]",
          "244:                  const char *text, int size, int xoff, int yoff,",
          "245:                  uint32_t colour);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "274: int pdf_add_line(struct pdf_doc *pdf, struct pdf_object *page,",
          "275:                  int x1, int y1, int x2, int y2, int width, uint32_t colour);",
          "",
          "[Added Lines]",
          "277: int pdf_add_line(struct pdf_doc *pdf, struct pdf_object *page, int x1, int y1,",
          "278:                  int x2, int y2, int width, uint32_t colour);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "290: int pdf_add_ellipse(struct pdf_doc *pdf, struct pdf_object *page,",
          "291:                     int x, int y, int xradius, int yradius,",
          "292:                     int width, uint32_t colour, uint32_t fill_colour);",
          "",
          "[Added Lines]",
          "293: int pdf_add_ellipse(struct pdf_doc *pdf, struct pdf_object *page, int x,",
          "294:                     int y, int xradius, int yradius, int width,",
          "295:                     uint32_t colour, uint32_t fill_colour);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "306: int pdf_add_circle(struct pdf_doc *pdf, struct pdf_object *page,",
          "307:                    int x, int y, int radius, int width, uint32_t colour, uint32_t fill_colour);",
          "",
          "[Added Lines]",
          "309: int pdf_add_circle(struct pdf_doc *pdf, struct pdf_object *page, int x, int y,",
          "310:                    int radius, int width, uint32_t colour,",
          "311:                    uint32_t fill_colour);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "321: int pdf_add_rectangle(struct pdf_doc *pdf, struct pdf_object *page,",
          "322:                       int x, int y, int width, int height, int border_width, uint32_t colour);",
          "",
          "[Added Lines]",
          "325: int pdf_add_rectangle(struct pdf_doc *pdf, struct pdf_object *page, int x,",
          "326:                       int y, int width, int height, int border_width,",
          "327:                       uint32_t colour);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "336: int pdf_add_filled_rectangle(struct pdf_doc *pdf, struct pdf_object *page,",
          "",
          "[Removed Lines]",
          "337:                              int x, int y, int width, int height, int border_width,",
          "338:                              uint32_t colour);",
          "",
          "[Added Lines]",
          "342:                              int x, int y, int width, int height,",
          "343:                              int border_width, uint32_t colour);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "351: int pdf_add_bookmark(struct pdf_doc *pdf, struct pdf_object *page,",
          "352:                      int parent, const char *name);",
          "",
          "[Added Lines]",
          "356: int pdf_add_bookmark(struct pdf_doc *pdf, struct pdf_object *page, int parent,",
          "357:                      const char *name);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "376:                     uint32_t colour);",
          "",
          "[Removed Lines]",
          "374: int pdf_add_barcode(struct pdf_doc *pdf, struct pdf_object *page,",
          "375:                     int code, int x, int y, int width, int height, const char *string,",
          "",
          "[Added Lines]",
          "379: int pdf_add_barcode(struct pdf_doc *pdf, struct pdf_object *page, int code,",
          "380:                     int x, int y, int width, int height, const char *string,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "388: int pdf_add_ppm(struct pdf_doc *pdf, struct pdf_object *page,",
          "389:                 int x, int y, int display_width, int display_height,",
          "390:                 const char *ppm_file);",
          "",
          "[Added Lines]",
          "393: int pdf_add_ppm(struct pdf_doc *pdf, struct pdf_object *page, int x, int y,",
          "394:                 int display_width, int display_height, const char *ppm_file);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "404:                  const char *jpeg_file);",
          "406: #endif // PDFGEN_H",
          "",
          "[Removed Lines]",
          "402: int pdf_add_jpeg(struct pdf_doc *pdf, struct pdf_object *page,",
          "403:                  int x, int y, int display_width, int display_height,",
          "",
          "[Added Lines]",
          "406: int pdf_add_jpeg(struct pdf_doc *pdf, struct pdf_object *page, int x, int y,",
          "407:                  int display_width, int display_height,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f88384be23e6f40bcd905b24d3af3e192395ae26",
      "candidate_info": {
        "commit_hash": "f88384be23e6f40bcd905b24d3af3e192395ae26",
        "repo": "AndreRenaud/PDFGen",
        "commit_url": "https://github.com/AndreRenaud/PDFGen/commit/f88384be23e6f40bcd905b24d3af3e192395ae26",
        "files": [
          "pdfgen.c"
        ],
        "message": "pdfgen: Fix up some clang-tidy warnings",
        "before_after_code_files": [
          "pdfgen.c||pdfgen.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pdfgen.c||pdfgen.c"
          ],
          "candidate": [
            "pdfgen.c||pdfgen.c"
          ]
        }
      },
      "candidate_diff": {
        "pdfgen.c||pdfgen.c": [
          "File: pdfgen.c -> pdfgen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: static inline int flexarray_get_bin(struct flexarray *flex, int index)",
          "217: {",
          "218:     int i;",
          "219:     for (i = 0; i < ARRAY_SIZE(bin_offset); i++)",
          "220:         if (index < bin_offset[i])",
          "221:             return i - 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:     (void)flex;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225: static inline int flexarray_get_bin_size(struct flexarray *flex, int bin)",
          "226: {",
          "227:     if (bin >= ARRAY_SIZE(bin_offset))",
          "228:         return -1;",
          "229:     int next = bin_offset[bin + 1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:     (void)flex;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "233: static inline int flexarray_get_bin_offset(struct flexarray *flex, int bin, int index)",
          "234: {",
          "235:     return index - bin_offset[bin];",
          "236: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:     (void)flex;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1342: {",
          "1343:     if (strcmp(font_name, \"Helvetica\") == 0)",
          "1344:         return helvetica_widths;",
          "1346:         return helvetica_bold_widths;",
          "1348:         return helvetica_bold_oblique_widths;",
          "1350:         return helvetica_oblique_widths;",
          "1355:         return courier_widths;",
          "1357:         return times_widths;",
          "1359:         return times_bold_widths;",
          "1361:         return times_italic_widths;",
          "1363:         return times_bold_italic_widths;",
          "1365:         return symbol_widths;",
          "1367:         return zapfdingbats_widths;",
          "1370: }",
          "1372: int pdf_get_font_text_width(struct pdf_doc *pdf, const char *font_name,",
          "1373:                             const char *text, int size)",
          "1374: {",
          "1377:     if (!widths)",
          "1378:         return pdf_set_err(pdf, -EINVAL, \"Unable to determine width for font '%s'\",",
          "",
          "[Removed Lines]",
          "1345:     else if (strcmp(font_name, \"Helvetica-Bold\") == 0)",
          "1347:     else if (strcmp(font_name, \"Helvetica-BoldOblique\") == 0)",
          "1349:     else if (strcmp(font_name, \"Helvetica-Oblique\") == 0)",
          "1351:     else if (strcmp(font_name, \"Courier\") == 0 ||",
          "1352:              strcmp(font_name, \"Courier-Bold\") == 0 ||",
          "1353:              strcmp(font_name, \"Courier-BoldOblique\") == 0 ||",
          "1354:              strcmp(font_name, \"Courier-Oblique\") == 0)",
          "1356:     else if (strcmp(font_name, \"Times-Roman\") == 0)",
          "1358:     else if (strcmp(font_name, \"Times-Bold\") == 0)",
          "1360:     else if (strcmp(font_name, \"Times-Italic\") == 0)",
          "1362:     else if (strcmp(font_name, \"Times-BoldItalic\") == 0)",
          "1364:     else if (strcmp(font_name, \"Symbol\") == 0)",
          "1366:     else if (strcmp(font_name, \"ZapfDingbats\") == 0)",
          "1368:     else",
          "1369:         return NULL;",
          "1375:     const uint16_t *widths = find_font_widths(pdf->current_font->font.name);",
          "",
          "[Added Lines]",
          "1348:     if (strcmp(font_name, \"Helvetica-Bold\") == 0)",
          "1350:     if (strcmp(font_name, \"Helvetica-BoldOblique\") == 0)",
          "1352:     if (strcmp(font_name, \"Helvetica-Oblique\") == 0)",
          "1354:     if (strcmp(font_name, \"Courier\") == 0 ||",
          "1355:             strcmp(font_name, \"Courier-Bold\") == 0 ||",
          "1356:             strcmp(font_name, \"Courier-BoldOblique\") == 0 ||",
          "1357:             strcmp(font_name, \"Courier-Oblique\") == 0)",
          "1359:     if (strcmp(font_name, \"Times-Roman\") == 0)",
          "1361:     if (strcmp(font_name, \"Times-Bold\") == 0)",
          "1363:     if (strcmp(font_name, \"Times-Italic\") == 0)",
          "1365:     if (strcmp(font_name, \"Times-BoldItalic\") == 0)",
          "1367:     if (strcmp(font_name, \"Symbol\") == 0)",
          "1369:     if (strcmp(font_name, \"ZapfDingbats\") == 0)",
          "1372:     return NULL;",
          "1378:     const uint16_t *widths = find_font_widths(font_name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1776:                     return 0;",
          "1780:                 }",
          "1781:             }",
          "1782:         }",
          "1783:     }",
          "",
          "[Removed Lines]",
          "1777:                 } else {",
          "1778:                     i+=2;",
          "1779:                     block_length = data[i] * 256 + data[i+1];",
          "",
          "[Added Lines]",
          "1781:                 i+=2;",
          "1782:                 block_length = data[i] * 256 + data[i+1];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1858:         free(final_data);",
          "1859:         return NULL;",
          "1860:     }",
          "1862:     obj->stream.len = written;",
          "1864:     return obj;",
          "",
          "[Removed Lines]",
          "1861:     obj->stream.text = (char *)final_data;",
          "",
          "[Added Lines]",
          "1863:     obj->stream.text = final_data;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1901:     fp = fopen(ppm_file, \"rb\");",
          "1902:     if (!fgets(line, sizeof(line) - 1, fp)) {",
          "1903:         fclose(fp);",
          "1904:         return pdf_set_err(pdf, -EINVAL, \"Invalid PPM file\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1904:     if (!fp)",
          "1905:         return pdf_set_err(pdf, -errno, \"Unable to open '%s'\", ppm_file);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1922:         if (sscanf(line, \"%d %d\\n\", &width, &height) != 2) {",
          "1923:             fclose(fp);",
          "1924:             return pdf_set_err(pdf, -EINVAL, \"Unable to find PPM size\");",
          "1927:     } while (1);",
          "",
          "[Removed Lines]",
          "1925:         } else",
          "1926:             break;",
          "",
          "[Added Lines]",
          "1929:         }",
          "1931:         break;",
          "",
          "---------------"
        ]
      }
    }
  ]
}