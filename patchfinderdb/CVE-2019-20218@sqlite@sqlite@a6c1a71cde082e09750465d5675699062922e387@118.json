{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3cbd2b7245ad0b262d5e0810ac3200e9797db1eb",
      "candidate_info": {
        "commit_hash": "3cbd2b7245ad0b262d5e0810ac3200e9797db1eb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3cbd2b7245ad0b262d5e0810ac3200e9797db1eb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "New assert() to verify the TF_HasprimaryKey flag.\n\nFossilOrigin-Name: 0abace8a7aecca01c8677d07f3ec1bafb289ceffe5bcd60284701a7bf813f415",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 55d43adc894a6b1e0f77bf481dad6dd604a0dc0022e72bbf2e3037f97351971e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1991:     if( p->tnum==1 ) p->tabFlags |= TF_Readonly;",
          "1992:   }",
          "1995:   if( tabOpts & TF_WithoutRowid ){",
          "1996:     if( (p->tabFlags & TF_Autoincrement) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1994:   assert( (p->tabFlags & TF_HasPrimaryKey)==0",
          "1995:        || p->iPKey>=0 || sqlite3PrimaryKeyIndex(p)!=0 );",
          "1996:   assert( (p->tabFlags & TF_HasPrimaryKey)!=0",
          "1997:        || (p->iPKey<0 && sqlite3PrimaryKeyIndex(p)==0) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "676fa25a0f7737d7e233a840a5c2d7dffdccb75a",
      "candidate_info": {
        "commit_hash": "676fa25a0f7737d7e233a840a5c2d7dffdccb75a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/676fa25a0f7737d7e233a840a5c2d7dffdccb75a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/pragma.c"
        ],
        "message": "Bug fixes so that \"make test\" once against runs with no errors.\n\nFossilOrigin-Name: 7bfe0f679d8951b3e925bdf549efa0f8d6b514eddeaca69cbfddbd9476cfff5f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/pragma.c||src/pragma.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 069351b85f9a706f60d3e98fbc8aaf40c374356b967c0464aede30ead3d9d18b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1009:     iRegStore = regRowid+1;",
          "1010:     for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "1011:       int k;",
          "1012:       assert( i>=nHidden );",
          "1013:       assert( iRegStore==sqlite3ColumnOfTable(pTab,i)+regRowid+1 );",
          "1014:       if( i==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1012:       u32 colFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1020:         sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "1021:         continue;",
          "1022:       }",
          "1024:         nHidden++;",
          "1027:           iRegStore--;",
          "1030:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1031:         }",
          "1033:       }",
          "1034:       if( pColumn ){",
          "1035:         for(j=0; j<pColumn->nId && pColumn->a[j].idx!=i; j++){}",
          "",
          "[Removed Lines]",
          "1023:       if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ){",
          "1025:         if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1028:         }else{",
          "1032:         continue;",
          "",
          "[Added Lines]",
          "1024:       if( ((colFlags = pTab->aCol[i].colFlags) & COLFLAG_NOINSERT)!=0 ){",
          "1026:         if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "1029:           continue;",
          "1030:         }else if( (colFlags & COLFLAG_STORED)!=0 || pColumn==0 ){",
          "1034:           continue;",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1102:       for(i=0, pCol=pTab->aCol; i<pTab->nCol; i++, pCol++){",
          "1103:         int isHidden = 0;",
          "1104:         if( pCol->colFlags & COLFLAG_NOINSERT ){",
          "1107:           if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "1109:           }else if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "",
          "[Removed Lines]",
          "1105:           nHidden++;",
          "1106:           if( pPragma->iArg==0 ) continue;",
          "",
          "[Added Lines]",
          "1105:           if( pPragma->iArg==0 ){",
          "1106:             nHidden++;",
          "1107:             continue;",
          "1108:           }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86223e8d65a6dc10ad19b5c8aa535baba86a7e5c",
      "candidate_info": {
        "commit_hash": "86223e8d65a6dc10ad19b5c8aa535baba86a7e5c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/86223e8d65a6dc10ad19b5c8aa535baba86a7e5c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "In the xfer-optimization, do early detection of when the source and destination index share the same btree, to avoid a long delay prior to reporting the database corruption.\n\nFossilOrigin-Name: af1e5873d44d31466023ae145bdfc6b4191eb48b62e5752c6e683bcf571980e7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 51a95e52fc58d8be2c9c51576dff7258c705735b66d203948f80db017b4c10d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2275:     if( pSrcIdx==0 ){",
          "2277:     }",
          "2278:   }",
          "2279: #ifndef SQLITE_OMIT_CHECK",
          "2280:   if( pDest->pCheck && sqlite3ExprListCompare(pSrc->pCheck,pDest->pCheck,-1) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2278:     if( pSrcIdx->tnum==pDestIdx->tnum && pSrc->pSchema==pDest->pSchema ){",
          "2280:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "431704375e0c1bf93902e6ef417c02abe4a35148",
      "candidate_info": {
        "commit_hash": "431704375e0c1bf93902e6ef417c02abe4a35148",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/431704375e0c1bf93902e6ef417c02abe4a35148",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Fix a problem with window functions in aggregate queries that do not have GROUP BY clauses.\n\nFossilOrigin-Name: 99609786f485653464d1caef1d207ae299d28c925bff3e8e94891759b4765dcc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45c64d39d5afed7fdc6b1de19408559740d1fba1f5e0269ab68b132366a289e4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "799:       }",
          "800:       if( iCol<0 ){",
          "801:         Expr *pDup = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "802:         p->pSub = sqlite3ExprListAppend(pParse, p->pSub, pDup);",
          "803:       }",
          "804:       if( p->pSub ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802:         if( pDup && pDup->op==TK_AGG_FUNCTION ) pDup->op = TK_FUNCTION;",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1364: # 2019-12-25 ticket d87336c81c7d0873",
          "1365: #",
          "1373: #-------------------------------------------------------------------------",
          "1374: reset_db",
          "",
          "[Removed Lines]",
          "1366: #reset_db",
          "1367: #do_catchsql_test 40.1 {",
          "1368: #  CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
          "1369: #  SELECT * FROM t0",
          "1370: #   WHERE ((0,0) IN (SELECT COUNT(*),LAG(5)OVER(PARTITION BY 0) FROM t0),0)<=(c1,0);",
          "1371: #} {1 {1st ORDER BY term out of range - should be between 1 and 3}}",
          "",
          "[Added Lines]",
          "1366: reset_db",
          "1367: do_catchsql_test 40.1 {",
          "1368:   CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
          "1369:   SELECT * FROM t0",
          "1370:    WHERE ((0,0) IN (SELECT COUNT(*),LAG(5)OVER(PARTITION BY 0) FROM t0),0)<=(c1,0);",
          "1371: } {0 {}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1402:   );",
          "1403: } {0 0  0 0  0 0  0 0}",
          "1405: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1405: #-------------------------------------------------------------------------",
          "1406: reset_db",
          "1407: do_execsql_test 42.1 {",
          "1408:   CREATE TABLE t1(a, b, c);",
          "1409:   INSERT INTO t1 VALUES(1, 1, 1);",
          "1410:   INSERT INTO t1 VALUES(2, 2, 2);",
          "1411: }",
          "1412: do_execsql_test 42.2 {",
          "1413:   SELECT * FROM t1 WHERE (0, 0) IN ( SELECT count(*), 0 FROM t1 )",
          "1414: } {}",
          "1415: do_execsql_test 42.3 {",
          "1416:   SELECT * FROM t1 WHERE (2, 0) IN ( SELECT count(*), 0 FROM t1 )",
          "1417: } {1 1 1 2 2 2}",
          "1419: do_execsql_test 42.3 {",
          "1420:   SELECT count(*), max(a) OVER () FROM t1 GROUP BY c;",
          "1421: } {1 2 1 2}",
          "1423: do_execsql_test 42.4 {",
          "1424:   SELECT sum(a), max(b) OVER () FROM t1;",
          "1425: } {3 1}",
          "1427: do_execsql_test 42.5 {",
          "1428:   CREATE TABLE t2(a, b);",
          "1429:   INSERT INTO t2 VALUES('a', 1);",
          "1430:   INSERT INTO t2 VALUES('a', 2);",
          "1431:   INSERT INTO t2 VALUES('a', 3);",
          "1432:   INSERT INTO t2 VALUES('b', 4);",
          "1433:   INSERT INTO t2 VALUES('b', 5);",
          "1434:   INSERT INTO t2 VALUES('b', 6);",
          "1435: }",
          "1437: do_execsql_test 42.6 {",
          "1438:   SELECT a, sum(b), sum( sum(b) ) OVER (ORDER BY a) FROM t2 GROUP BY a;",
          "1439: } {a 6 6   b 15 21}",
          "1441: do_execsql_test 42.7 {",
          "1442:   SELECT sum(b), sum( sum(b) ) OVER (ORDER BY a) FROM t2;",
          "1443: } {21 21}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e2c8819f1a9008348b9d04b58ecbe5ebf1ead52",
      "candidate_info": {
        "commit_hash": "2e2c8819f1a9008348b9d04b58ecbe5ebf1ead52",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2e2c8819f1a9008348b9d04b58ecbe5ebf1ead52",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Ensure that there is a containing SELECT statement when processing a normal aggregate function as if it were a window function.\n\nFossilOrigin-Name: c1014e80b26131200a115beb86929a8f0ded2dd65b075e47373346c0f170576a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e5dc2939d3e8694d648fc9b73b1174da5b1349e20fbb9cf1c91268939f308f89",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "967:           Select *pSel = pNC->pWinSelect;",
          "968:           assert( pWin==pExpr->y.pWin );",
          "969:           if( IN_RENAME_OBJECT==0 ){",
          "971:           }",
          "972:           sqlite3WalkExprList(pWalker, pWin->pPartition);",
          "973:           sqlite3WalkExprList(pWalker, pWin->pOrderBy);",
          "",
          "[Removed Lines]",
          "970:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "",
          "[Added Lines]",
          "970:             sqlite3WindowUpdate(pParse, pSel ? pSel->pWinDefn : 0, pWin, pDef);",
          "",
          "---------------"
        ]
      }
    }
  ]
}