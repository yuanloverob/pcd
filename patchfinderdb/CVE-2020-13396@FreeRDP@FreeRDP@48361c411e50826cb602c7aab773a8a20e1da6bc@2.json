{
  "cve_id": "CVE-2020-13396",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in ntlm_read_ChallengeMessage in winpr/libwinpr/sspi/NTLM/ntlm_message.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
  "patch_info": {
    "commit_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/48361c411e50826cb602c7aab773a8a20e1da6bc",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed GHSL-2020-100: oob read in ntlm_read_ChallengeMessage\n\n* Added length checks for data read from stream\n* Unified function resource cleanup\n\n(cherry picked from commit 8357dedbbf7213b7d0d18f1026145b9a5b92235a)",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368: SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "369: {",
      "370:  wStream* s;",
      "374:  NTLM_AV_PAIR* AvTimestamp;",
      "375:  NTLM_CHALLENGE_MESSAGE* message;",
      "376:  ntlm_generate_client_challenge(context);",
      "377:  message = &context->CHALLENGE_MESSAGE;",
      "378:  ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));",
      "",
      "[Removed Lines]",
      "371:  int length;",
      "372:  PBYTE StartOffset;",
      "373:  PBYTE PayloadOffset;",
      "",
      "[Added Lines]",
      "370:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "372:  size_t length;",
      "373:  size_t StartOffset;",
      "374:  size_t PayloadOffset;",
      "377:  if (!context || !buffer)",
      "378:   return SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "381:  if (!s)",
      "382:   return SEC_E_INTERNAL_ERROR;",
      "386:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "392:  if (message->MessageType != MESSAGE_TYPE_CHALLENGE)",
      "404:  if (Stream_GetRemainingLength(s) < 4)",
      "411:  context->NegotiateFlags = message->NegotiateFlags;",
      "413:  if (Stream_GetRemainingLength(s) < 8)",
      "420:  CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);",
      "422:  if (Stream_GetRemainingLength(s) < 8)",
      "436:  if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "437:  {",
      "443:  }",
      "448:  if (message->TargetName.Len > 0)",
      "449:  {",
      "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)",
      "455:  }",
      "457:  if (message->TargetInfo.Len > 0)",
      "",
      "[Removed Lines]",
      "384:  StartOffset = Stream_Pointer(s);",
      "387:  {",
      "388:   Stream_Free(s, FALSE);",
      "389:   return SEC_E_INVALID_TOKEN;",
      "390:  }",
      "393:  {",
      "394:   Stream_Free(s, FALSE);",
      "395:   return SEC_E_INVALID_TOKEN;",
      "396:  }",
      "399:  {",
      "400:   Stream_Free(s, FALSE);",
      "401:   return SEC_E_INVALID_TOKEN;",
      "402:  }",
      "405:  {",
      "406:   Stream_Free(s, FALSE);",
      "407:   return SEC_E_INVALID_TOKEN;",
      "408:  }",
      "414:  {",
      "415:   Stream_Free(s, FALSE);",
      "416:   return SEC_E_INVALID_TOKEN;",
      "417:  }",
      "423:  {",
      "424:   Stream_Free(s, FALSE);",
      "425:   return SEC_E_INVALID_TOKEN;",
      "426:  }",
      "431:  {",
      "432:   Stream_Free(s, FALSE);",
      "433:   return SEC_E_INVALID_TOKEN;",
      "434:  }",
      "439:   {",
      "440:    Stream_Free(s, FALSE);",
      "441:    return SEC_E_INVALID_TOKEN;",
      "442:   }",
      "446:  PayloadOffset = Stream_Pointer(s);",
      "451:   {",
      "452:    Stream_Free(s, FALSE);",
      "453:    return SEC_E_INTERNAL_ERROR;",
      "454:   }",
      "",
      "[Added Lines]",
      "388:  StartOffset = Stream_GetPosition(s);",
      "391:   goto fail;",
      "394:   goto fail;",
      "397:   goto fail;",
      "400:   goto fail;",
      "406:   goto fail;",
      "412:   goto fail;",
      "417:   goto fail;",
      "422:    goto fail;",
      "426:  PayloadOffset = Stream_GetPosition(s);",
      "428:  status = SEC_E_INTERNAL_ERROR;",
      "432:    goto fail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:   size_t cbAvTimestamp;",
      "461:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
      "467:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
      "468:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
      "",
      "[Removed Lines]",
      "462:   {",
      "463:    Stream_Free(s, FALSE);",
      "464:    return SEC_E_INTERNAL_ERROR;",
      "465:   }",
      "",
      "[Added Lines]",
      "440:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "474:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);",
      "476:    if (!ptr)",
      "479:    if (context->NTLMv2)",
      "480:     context->UseMIC = TRUE;",
      "",
      "[Removed Lines]",
      "477:     return SEC_E_INTERNAL_ERROR;",
      "",
      "[Added Lines]",
      "452:     goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "484:  }",
      "486:  length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",
      "488:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
      "495: #ifdef WITH_DEBUG_NTLM",
      "496:  WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);",
      "497:  winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,",
      "",
      "[Removed Lines]",
      "489:  {",
      "490:   Stream_Free(s, FALSE);",
      "491:   return SEC_E_INTERNAL_ERROR;",
      "492:  }",
      "494:  CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);",
      "",
      "[Added Lines]",
      "462:  if (length > buffer->cbBuffer)",
      "463:   goto fail;",
      "466:   goto fail;",
      "468:  if (context->ChallengeMessage.pvBuffer)",
      "469:   CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "517:  if (context->NTLMv2)",
      "518:  {",
      "519:   if (ntlm_construct_authenticate_target_info(context) < 0)",
      "525:   sspi_SecBufferFree(&context->ChallengeTargetInfo);",
      "526:   context->ChallengeTargetInfo.pvBuffer = context->AuthenticateTargetInfo.pvBuffer;",
      "",
      "[Removed Lines]",
      "520:   {",
      "521:    Stream_Free(s, FALSE);",
      "522:    return SEC_E_INTERNAL_ERROR;",
      "523:   }",
      "",
      "[Added Lines]",
      "495:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "533:  {",
      "534:   Stream_Free(s, FALSE);",
      "535:   return SEC_E_INTERNAL_ERROR;",
      "536:  }",
      "539:  {",
      "540:   Stream_Free(s, FALSE);",
      "541:   return SEC_E_INTERNAL_ERROR;",
      "542:  }",
      "",
      "[Added Lines]",
      "505:   goto fail;",
      "508:   goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "579: #endif",
      "580:  context->state = NTLM_STATE_AUTHENTICATE;",
      "581:  ntlm_free_message_fields_buffer(&(message->TargetName));",
      "582:  Stream_Free(s, FALSE);",
      "584: }",
      "586: SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "",
      "[Removed Lines]",
      "583:  return SEC_I_CONTINUE_NEEDED;",
      "",
      "[Added Lines]",
      "548:  status = SEC_I_CONTINUE_NEEDED;",
      "549: fail:",
      "551:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "472eece629a0e35a3f61379a458a3bdb18ac639d",
      "candidate_info": {
        "commit_hash": "472eece629a0e35a3f61379a458a3bdb18ac639d",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/472eece629a0e35a3f61379a458a3bdb18ac639d",
        "files": [
          "client/Sample/tf_freerdp.c"
        ],
        "message": "Fixed sample client resource cleanup\n\n(cherry picked from commit e716f823115463fc66d94dd6c044ba7c47c43fe1)",
        "before_after_code_files": [
          "client/Sample/tf_freerdp.c||client/Sample/tf_freerdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Sample/tf_freerdp.c||client/Sample/tf_freerdp.c": [
          "File: client/Sample/tf_freerdp.c -> client/Sample/tf_freerdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:      freerdp_client_settings_command_line_status_print(context->settings, status, argc, argv);",
          "344:  if (status)",
          "347:  if (freerdp_client_start(context) != 0)",
          "348:   goto fail;",
          "",
          "[Removed Lines]",
          "345:   return 0;",
          "",
          "[Added Lines]",
          "345:  {",
          "346:   rc = 0;",
          "347:   goto fail;",
          "348:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df63cfb55f4ee96a69199ef285dc37ef8ea0b12c",
      "candidate_info": {
        "commit_hash": "df63cfb55f4ee96a69199ef285dc37ef8ea0b12c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/df63cfb55f4ee96a69199ef285dc37ef8ea0b12c",
        "files": [
          "libfreerdp/core/info.c"
        ],
        "message": "Reformatted to satisfy clang-format\n\n(cherry picked from commit a4e95f8e65dfbfd2625034ad6740645366a6c0c0)",
        "before_after_code_files": [
          "libfreerdp/core/info.c||libfreerdp/core/info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/info.c||libfreerdp/core/info.c": [
          "File: libfreerdp/core/info.c -> libfreerdp/core/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "466: static BOOL rdp_read_info_string(UINT32 flags, wStream* s, size_t cbLenNonNull, CHAR** dst,",
          "467:                                  size_t max)",
          "468: {",
          "471:   char c;",
          "472:   WCHAR w;",
          "473:   BYTE b[2];",
          "",
          "[Removed Lines]",
          "469:  union",
          "470:  {",
          "",
          "[Added Lines]",
          "469:  union {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f975fe27469ca9bf06e4f752b39da6cbc32f3bc9",
      "candidate_info": {
        "commit_hash": "f975fe27469ca9bf06e4f752b39da6cbc32f3bc9",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f975fe27469ca9bf06e4f752b39da6cbc32f3bc9",
        "files": [
          "libfreerdp/crypto/crypto.c"
        ],
        "message": "Abort on first possible certificate validation error\n\nOnly retry certificate validation if the purpose was wrong.\n\n(cherry picked from commit de619e9964684eced5fb3108de81440b979aace0)",
        "before_after_code_files": [
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "857:  for (i = 0; i < ARRAYSIZE(purposes); i++)",
          "858:  {",
          "860:   int purpose = purposes[i];",
          "861:   csc = X509_STORE_CTX_new();",
          "",
          "[Removed Lines]",
          "859:   int rc = -1;",
          "",
          "[Added Lines]",
          "859:   int err = -1, rc = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "869:   X509_STORE_CTX_set_verify_cb(csc, verify_cb);",
          "871:   rc = X509_verify_cert(csc);",
          "872:  skip:",
          "873:   X509_STORE_CTX_free(csc);",
          "874:   if (rc == 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "872:   err = X509_STORE_CTX_get_error(csc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "876:    status = TRUE;",
          "877:    break;",
          "878:   }",
          "879:  }",
          "881:  X509_STORE_free(cert_ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "880:   else if (err != X509_V_ERR_INVALID_PURPOSE)",
          "881:    break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd156de828049b7673fdeb9c261f915cc5bb563c",
      "candidate_info": {
        "commit_hash": "dd156de828049b7673fdeb9c261f915cc5bb563c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/dd156de828049b7673fdeb9c261f915cc5bb563c",
        "files": [
          "client/X11/xf_client.c",
          "client/X11/xfreerdp.h"
        ],
        "message": "Fixed NULL access of context struct on screen draw\n\nAdded a log message to fix occurances later on.\n\n(cherry picked from commit cfea3fc6ed01aa33c1a935da42572577ba832feb)",
        "before_after_code_files": [
          "client/X11/xf_client.c||client/X11/xf_client.c",
          "client/X11/xfreerdp.h||client/X11/xfreerdp.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/X11/xf_client.c||client/X11/xf_client.c": [
          "File: client/X11/xf_client.c -> client/X11/xf_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223: }",
          "227: {",
          "228:  if (w == 0 || h == 0)",
          "229:  {",
          "230:   WLog_WARN(TAG, \"invalid width and/or height specified: w=%d h=%d\", w, h);",
          "",
          "[Removed Lines]",
          "226: void xf_draw_screen(xfContext* xfc, int x, int y, int w, int h)",
          "",
          "[Added Lines]",
          "226: void xf_draw_screen_(xfContext* xfc, int x, int y, int w, int h, const char* fkt, const char* file,",
          "227:                      int line)",
          "229:  if (!xfc)",
          "230:  {",
          "231:   WLog_DBG(TAG, \"[%s] called from [%s] xfc=%p\", __FUNCTION__, fkt, xfc);",
          "232:   return;",
          "233:  }",
          "",
          "---------------"
        ],
        "client/X11/xfreerdp.h||client/X11/xfreerdp.h": [
          "File: client/X11/xfreerdp.h -> client/X11/xfreerdp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "307: void xf_unlock_x11_(xfContext* xfc, const char* fkt);",
          "309: BOOL xf_picture_transform_required(xfContext* xfc);",
          "312: FREERDP_API DWORD xf_exit_code_from_disconnect_reason(DWORD reason);",
          "",
          "[Removed Lines]",
          "310: void xf_draw_screen(xfContext* xfc, int x, int y, int w, int h);",
          "",
          "[Added Lines]",
          "311: #define xf_draw_screen(_xfc, _x, _y, _w, _h) \\",
          "312:  xf_draw_screen_((_xfc), (_x), (_y), (_w), (_h), __FUNCTION__, __FILE__, __LINE__)",
          "313: void xf_draw_screen_(xfContext* xfc, int x, int y, int w, int h, const char* fkt, const char* file,",
          "314:                      int line);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "442ac71ec73380af452f51d498aa7a4dfb624008",
      "candidate_info": {
        "commit_hash": "442ac71ec73380af452f51d498aa7a4dfb624008",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/442ac71ec73380af452f51d498aa7a4dfb624008",
        "files": [
          "libfreerdp/core/info.c"
        ],
        "message": "Renamed variable to avoid MSVC define collission\n\n(cherry picked from commit f9e1f21b0ce47d8eeea40314ce6b8b666964dc7d)",
        "before_after_code_files": [
          "libfreerdp/core/info.c||libfreerdp/core/info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/info.c||libfreerdp/core/info.c": [
          "File: libfreerdp/core/info.c -> libfreerdp/core/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "536: static BOOL rdp_read_info_packet(rdpRdp* rdp, wStream* s, UINT16 tpktlength)",
          "537: {",
          "539:  UINT32 flags;",
          "540:  UINT16 cbDomain;",
          "541:  UINT16 cbUserName;",
          "",
          "[Removed Lines]",
          "538:  BOOL small = FALSE;",
          "",
          "[Added Lines]",
          "538:  BOOL smallsize = FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "573:  if (settings->RdpVersion < RDP_VERSION_5_PLUS)",
          "",
          "[Removed Lines]",
          "574:   small = TRUE;",
          "",
          "[Added Lines]",
          "574:   smallsize = TRUE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "583:   return FALSE;",
          "586:   return FALSE;",
          "589:   return FALSE;",
          "591:  if (!rdp_read_info_string(flags, s, cbAlternateShell, &settings->AlternateShell, 512))",
          "",
          "[Removed Lines]",
          "582:  if (!rdp_read_info_string(flags, s, cbDomain, &settings->Domain, small ? 52 : 512))",
          "585:  if (!rdp_read_info_string(flags, s, cbUserName, &settings->Username, small ? 44 : 512))",
          "588:  if (!rdp_read_info_string(flags, s, cbPassword, &settings->Password, small ? 32 : 512))",
          "",
          "[Added Lines]",
          "582:  if (!rdp_read_info_string(flags, s, cbDomain, &settings->Domain, smallsize ? 52 : 512))",
          "585:  if (!rdp_read_info_string(flags, s, cbUserName, &settings->Username, smallsize ? 44 : 512))",
          "588:  if (!rdp_read_info_string(flags, s, cbPassword, &settings->Password, smallsize ? 32 : 512))",
          "",
          "---------------"
        ]
      }
    }
  ]
}