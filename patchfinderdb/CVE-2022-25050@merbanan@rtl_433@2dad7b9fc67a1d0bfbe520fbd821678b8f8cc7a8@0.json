{
  "cve_id": "CVE-2022-25050",
  "cve_desc": "rtl_433 21.12 was discovered to contain a stack overflow in the function somfy_iohc_decode(). This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted file.",
  "repo": "merbanan/rtl_433",
  "patch_hash": "2dad7b9fc67a1d0bfbe520fbd821678b8f8cc7a8",
  "patch_info": {
    "commit_hash": "2dad7b9fc67a1d0bfbe520fbd821678b8f8cc7a8",
    "repo": "merbanan/rtl_433",
    "commit_url": "https://github.com/merbanan/rtl_433/commit/2dad7b9fc67a1d0bfbe520fbd821678b8f8cc7a8",
    "files": [
      "src/devices/cmr113.c",
      "src/devices/somfy_iohc.c"
    ],
    "message": "minor: Fix overflow in Clipsal-CMR113 and Somfy-IOHC reported by aug5t7",
    "before_after_code_files": [
      "src/devices/cmr113.c||src/devices/cmr113.c",
      "src/devices/somfy_iohc.c||src/devices/somfy_iohc.c"
    ]
  },
  "patch_diff": {
    "src/devices/cmr113.c||src/devices/cmr113.c": [
      "File: src/devices/cmr113.c -> src/devices/cmr113.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "48: static int cmr113_decode(r_device *decoder, bitbuffer_t *bitbuffer)",
      "49: {",
      "",
      "[Removed Lines]",
      "45: #define COMPARE_BITS 83",
      "46: #define COMPARE_BYTES (COMPARE_BITS/8)",
      "",
      "[Added Lines]",
      "45: #define COMPARE_BITS  83",
      "46: #define COMPARE_BYTES ((COMPARE_BITS + 7) / 8)",
      "",
      "---------------"
    ],
    "src/devices/somfy_iohc.c||src/devices/somfy_iohc.c": [
      "File: src/devices/somfy_iohc.c -> src/devices/somfy_iohc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "100:     if (bitbuffer->num_rows != 1)",
      "101:         return DECODE_ABORT_EARLY;",
      "105:         return DECODE_ABORT_EARLY;",
      "109:     int len = extract_bytes_uart(bitbuffer->bb[0], offset, num_bits, b);",
      "110:     if (len < 19)",
      "",
      "[Removed Lines]",
      "103:     int offset = bitbuffer_search(bitbuffer, 0, 0, preamble_pattern, 24) + 24;",
      "104:     if (offset >= bitbuffer->bits_per_row[0] - 19 * 10)",
      "107:     int num_bits = bitbuffer->bits_per_row[0] - offset;",
      "",
      "[Added Lines]",
      "103:     unsigned offset = bitbuffer_search(bitbuffer, 0, 0, preamble_pattern, 24) + 24;",
      "104:     if (offset + 19 * 10 >= bitbuffer->bits_per_row[0])",
      "107:     unsigned num_bits = bitbuffer->bits_per_row[0] - offset;",
      "108:     num_bits = MIN(num_bits, sizeof (b) * 8);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "121:     if (crc16lsb(b, len, 0x8408, 0x0000) != 0) // unreflected poly 0x1021",
      "122:         return DECODE_FAIL_MIC;",
      "125:     int msg_type = (b[0]);",
      "126:     int dst_id   = ((unsigned)b[4] << 24) | (b[3] << 16) | (b[2] << 8) | (b[1]); // assume Little-Endian",
      "",
      "[Removed Lines]",
      "123:     bitrow_printf(b, len * 8, \"%s: offset %d, num_bits %d, len %d, msg_len %d\\n\", __func__, offset, num_bits, len, msg_len);",
      "",
      "[Added Lines]",
      "124:     bitrow_printf(b, len * 8, \"%s: offset %u, num_bits %u, len %d, msg_len %d\\n\", __func__, offset, num_bits, len, msg_len);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e5fed08c3fa0549bffb48346f4a9977ad8cde5e8",
      "candidate_info": {
        "commit_hash": "e5fed08c3fa0549bffb48346f4a9977ad8cde5e8",
        "repo": "merbanan/rtl_433",
        "commit_url": "https://github.com/merbanan/rtl_433/commit/e5fed08c3fa0549bffb48346f4a9977ad8cde5e8",
        "files": [
          "README.md",
          "conf/rtl_433.example.conf",
          "include/rtl_433_devices.h",
          "src/CMakeLists.txt",
          "src/devices/cmr113.c",
          "vs15/rtl_433.vcxproj",
          "vs15/rtl_433.vcxproj.filters"
        ],
        "message": "Add support for Clipsal CMR112 cent-a-meter power meter (#1814)",
        "before_after_code_files": [
          "conf/rtl_433.example.conf||conf/rtl_433.example.conf",
          "include/rtl_433_devices.h||include/rtl_433_devices.h",
          "src/devices/cmr113.c||src/devices/cmr113.c",
          "vs15/rtl_433.vcxproj||vs15/rtl_433.vcxproj",
          "vs15/rtl_433.vcxproj.filters||vs15/rtl_433.vcxproj.filters"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/devices/cmr113.c||src/devices/cmr113.c"
          ],
          "candidate": [
            "src/devices/cmr113.c||src/devices/cmr113.c"
          ]
        }
      },
      "candidate_diff": {
        "conf/rtl_433.example.conf||conf/rtl_433.example.conf": [
          "File: conf/rtl_433.example.conf -> conf/rtl_433.example.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "413:   protocol 190 # Ambient Weather (Fine Offset) WH31L Lightning-Strike sensor",
          "414:   protocol 191 # Markisol, E-Motion, BOFU, Rollerhouse, BF-30x, BF-415 curtain remote",
          "415:   protocol 192 # Govee Water Leak Dectector H5054, Door Contact Sensor B5023",
          "417: ## Flex devices (command line option \"-X\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "416:   protocol 193 # Clipsal CMR113 Cent-a-meter power meter",
          "",
          "---------------"
        ],
        "include/rtl_433_devices.h||include/rtl_433_devices.h": [
          "File: include/rtl_433_devices.h -> include/rtl_433_devices.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:     DECL(fineoffset_wh31l) \\",
          "201:     DECL(markisol) \\",
          "202:     DECL(govee) \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:     DECL(cmr113) \\",
          "",
          "---------------"
        ],
        "src/devices/cmr113.c||src/devices/cmr113.c": [
          "File: src/devices/cmr113.c -> src/devices/cmr113.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:     Clipsal CMR113 cent-a-meter power meter",
          "4:     Copyright (C) 2021 Michael Neuling <mikey@neuling.org>",
          "6:     This program is free software; you can redistribute it and/or modify",
          "7:     it under the terms of the GNU General Public License as published by",
          "8:     the Free Software Foundation; either version 2 of the License, or",
          "9:     (at your option) any later version.",
          "12:     The demodulation comes in a few stages:",
          "14:      A) Firstly we look at the pulse lengths both high and low. These",
          "15:         are demodulated using OOK_PULSE_PIWM_DC before we hit this",
          "16:         driver. Any short pulse (high or low) is assigned a 1 and a",
          "17:         long pulse (high or low) is assigned a 0. ie every pulse is a",
          "18:         bit.",
          "20:      B) We then look for two patterns in this new bitstream:",
          "21:          - 0b00 (ie long long from stream A)",
          "22:          - 0b011 (ie long short short from stream A)",
          "24:      C) We start off with an output bit of '0'.  When we see a 0b00",
          "25:         (from B), the next output bit is the same as the last",
          "26:         bit. When we see a 0b011 (from B), the next output is",
          "27:         toggled. If we don't see ether of these patterns, we fail.",
          "29:      D) The output from C represents the final bitstream. This is 83",
          "30:         bits repeated twice. There are some timestamps, transmitter",
          "31:         IDs and CRC but all we decode below are the 3 current values",
          "32:         which are 10 bits each representing AMPS/10. We do check the",
          "33:         two 83 bit are identical and fail if not.",
          "35:      Kudos to Jon Oxer for decoding this stream and putting it here:",
          "36:           https://github.com/jonoxer/CentAReceiver",
          "40: #include \"decoder.h\"",
          "42: #define COMPARE_BITS 83",
          "43: #define COMPARE_BYTES (COMPARE_BITS/8)",
          "45: static int cmr113_decoder(r_device *decoder, bitbuffer_t *bitbuffer)",
          "46: {",
          "47:     int start, bit;",
          "48:     uint8_t buf[4];",
          "49:     uint8_t b1[COMPARE_BYTES], b2[COMPARE_BYTES];",
          "50:     bitbuffer_t b = {0};",
          "51:     double current[3];",
          "52:     data_t *data;",
          "54:     if ((bitbuffer->bits_per_row[0] < 350) || (bitbuffer->bits_per_row[0] > 450))",
          "55:         return DECODE_ABORT_LENGTH;",
          "57:     bitbuffer_extract_bytes(bitbuffer, 0, 0, buf, 32);",
          "58:     if ((buf[0] != 0xb0) || (buf[1] != 0x00) || (buf[2] != 0x00))",
          "59:         return DECODE_ABORT_EARLY;",
          "61:     start = 0;",
          "62:     bit = 0;",
          "63:     bitbuffer_clear(&b);",
          "64:     while ((start + 3) < bitbuffer->bits_per_row[0]) {",
          "65:         bitbuffer_extract_bytes(bitbuffer, 0, start, buf, 3);",
          "66:         if ((buf[0] >> 6) == 0x00) { // top two bits are 0b00 = no toggle",
          "67:             start += 2;",
          "68:             bitbuffer_add_bit(&b, bit);",
          "69:         } else if ((buf[0] >> 5) == 0x03) { // top two bits are 0b011 = toggle",
          "70:             start += 3;",
          "71:             bit = 1 - bit; // toggle",
          "72:             bitbuffer_add_bit(&b, bit);",
          "73:         } else if (start == 0)",
          "75:         else",
          "77:             return DECODE_ABORT_LENGTH;",
          "78:     }",
          "79:     if (b.bits_per_row[0] < 2*COMPARE_BITS + 2)",
          "80:         return DECODE_ABORT_LENGTH;",
          "82:     bitbuffer_extract_bytes(&b, 0, 0, b1, COMPARE_BITS);",
          "83:     bitbuffer_extract_bytes(&b, 0, COMPARE_BITS+2, b2, COMPARE_BITS);",
          "84:     if (memcmp(b1, b2, COMPARE_BYTES) != 0)",
          "85:         return DECODE_FAIL_MIC;",
          "88:     for (int i = 0; i < 3 ; i++) {",
          "89:         bitbuffer_extract_bytes(&b, 0, 36 + i*10, buf, 10);",
          "90:         reflect_bytes(buf, 2);",
          "91:         current[i] = ((float)buf[0] + ((buf[1] & 0x3) << 8))/10.0;",
          "92:     }",
          "94:     data = data_make(",
          "95:             \"model\", \"\", DATA_STRING, \"Clipsal-CMR113\",",
          "96:             \"current_1_A\", \"Current\", DATA_FORMAT, \"%.1f A\", DATA_DOUBLE, current[0],",
          "97:             \"current_2_A\", \"Current\", DATA_FORMAT, \"%.1f A\", DATA_DOUBLE, current[1],",
          "98:             \"current_3_A\", \"Current\", DATA_FORMAT, \"%.1f A\", DATA_DOUBLE, current[2],",
          "99:             NULL);",
          "100:     decoder_output_data(decoder, data);",
          "102:     return 1;",
          "103: }",
          "105: static char *output_fields[] = {",
          "106:         \"model\",",
          "107:         \"current_1_A\",",
          "108:         \"current_2_A\",",
          "109:         \"current_3_A\",",
          "110:         NULL,",
          "111: };",
          "116: r_device cmr113 = {",
          "117:         .name        = \"Clipsal CMR113 Cent-a-meter power meter\",",
          "118:         .modulation  = OOK_PULSE_PIWM_DC,",
          "119:         .short_width = 480,",
          "120:         .long_width  = 976,",
          "121:         .sync_width  = 2028,",
          "122:         .reset_limit = 2069,",
          "123:         .tolerance   = 200,",
          "124:         .decode_fn   = &cmr113_decoder,",
          "125:         .disabled    = 0,",
          "126:         .fields      = output_fields,",
          "127: };",
          "",
          "---------------"
        ],
        "vs15/rtl_433.vcxproj||vs15/rtl_433.vcxproj": [
          "File: vs15/rtl_433.vcxproj -> vs15/rtl_433.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:     <ClCompile Include=\"..\\src\\devices\\cardin.c\" />",
          "191:     <ClCompile Include=\"..\\src\\devices\\cavius.c\" />",
          "192:     <ClCompile Include=\"..\\src\\devices\\chuango.c\" />",
          "193:     <ClCompile Include=\"..\\src\\devices\\companion_wtr001.c\" />",
          "194:     <ClCompile Include=\"..\\src\\devices\\cotech_36_7959.c\" />",
          "195:     <ClCompile Include=\"..\\src\\devices\\current_cost.c\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:     <ClCompile Include=\"..\\src\\devices\\cmr113.c\" />",
          "",
          "---------------"
        ],
        "vs15/rtl_433.vcxproj.filters||vs15/rtl_433.vcxproj.filters": [
          "File: vs15/rtl_433.vcxproj.filters -> vs15/rtl_433.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:     <ClCompile Include=\"..\\src\\devices\\chuango.c\">",
          "308:       <Filter>Source Files\\devices</Filter>",
          "309:     </ClCompile>",
          "310:     <ClCompile Include=\"..\\src\\devices\\companion_wtr001.c\">",
          "311:       <Filter>Source Files\\devices</Filter>",
          "312:     </ClCompile>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310:     <ClCompile Include=\"..\\src\\devices\\cmr113.c\">",
          "311:       <Filter>Source Files\\devices</Filter>",
          "312:     </ClCompile>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a2e4c934d334cd73b6da43a19e6a60623ed9c94",
      "candidate_info": {
        "commit_hash": "3a2e4c934d334cd73b6da43a19e6a60623ed9c94",
        "repo": "merbanan/rtl_433",
        "commit_url": "https://github.com/merbanan/rtl_433/commit/3a2e4c934d334cd73b6da43a19e6a60623ed9c94",
        "files": [
          "README.md",
          "conf/rtl_433.example.conf",
          "include/rtl_433_devices.h",
          "src/CMakeLists.txt",
          "src/devices/digitech_xc0324.c",
          "src/devices/somfy.c",
          "src/devices/somfy_iohc.c",
          "src/devices/somfy_rts.c",
          "vs15/rtl_433.vcxproj",
          "vs15/rtl_433.vcxproj.filters"
        ],
        "message": "Add support for Somfy io-homecontrol devices (#1376)",
        "before_after_code_files": [
          "conf/rtl_433.example.conf||conf/rtl_433.example.conf",
          "include/rtl_433_devices.h||include/rtl_433_devices.h",
          "src/devices/digitech_xc0324.c||src/devices/digitech_xc0324.c",
          "src/devices/somfy_iohc.c||src/devices/somfy_iohc.c",
          "vs15/rtl_433.vcxproj||vs15/rtl_433.vcxproj",
          "vs15/rtl_433.vcxproj.filters||vs15/rtl_433.vcxproj.filters"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/devices/somfy_iohc.c||src/devices/somfy_iohc.c"
          ],
          "candidate": [
            "src/devices/somfy_iohc.c||src/devices/somfy_iohc.c"
          ]
        }
      },
      "candidate_diff": {
        "conf/rtl_433.example.conf||conf/rtl_433.example.conf": [
          "File: conf/rtl_433.example.conf -> conf/rtl_433.example.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:   protocol 186 # Hyundai TPMS (VDO)",
          "370:   protocol 187 # RojaFlex shutter and remote devices",
          "371:   protocol 188 # Marlec Solar iBoost+ sensors",
          "373: ## Flex devices (command line option \"-X\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:   protocol 189 # Somfy io-homecontrol",
          "",
          "---------------"
        ],
        "include/rtl_433_devices.h||include/rtl_433_devices.h": [
          "File: include/rtl_433_devices.h -> include/rtl_433_devices.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:     DECL(tpms_hyundai_vdo) \\",
          "197:     DECL(rojaflex) \\",
          "198:     DECL(marlec_solar) \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:     DECL(somfy_iohc) \\",
          "",
          "---------------"
        ],
        "src/devices/digitech_xc0324.c||src/devices/digitech_xc0324.c": [
          "File: src/devices/digitech_xc0324.c -> src/devices/digitech_xc0324.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: #define XC0324_MESSAGE_BITLEN     48",
          "69: #define XC0324_MESSAGE_BYTELEN    (XC0324_MESSAGE_BITLEN + 7)/ 8",
          "75: static int decode_xc0324_message(r_device *decoder, bitbuffer_t *bitbuffer,",
          "76:         unsigned row, uint16_t bitpos, const int latest_event, data_t **data)",
          "77: {",
          "",
          "[Removed Lines]",
          "70: #define XC0324_DEVICE_STARTBYTE   0x5F",
          "73: static const uint8_t preamble_pattern[1] = {XC0324_DEVICE_STARTBYTE};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160: static int xc0324_callback(r_device *decoder, bitbuffer_t *bitbuffer)",
          "161: {",
          "162:     int r; // a row index",
          "163:     uint16_t bitpos;",
          "164:     int ret      = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:     uint8_t const preamble_pattern[] = {0x5F};",
          "",
          "---------------"
        ],
        "src/devices/somfy_iohc.c||src/devices/somfy_iohc.c": [
          "File: src/devices/somfy_iohc.c -> src/devices/somfy_iohc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:     Somfy io-homecontrol.",
          "4:     Copyright (C) 2021 Christian W. Zuckschwerdt <zany@triq.net>",
          "6:     This program is free software; you can redistribute it and/or modify",
          "7:     it under the terms of the GNU General Public License as published by",
          "8:     the Free Software Foundation; either version 2 of the License, or",
          "9:     (at your option) any later version.",
          "13: Somfy io-homecontrol devices.",
          "15: E.g. Velux remote controller KI 313.",
          "17:     rtl_433 -c 0 -R 0 -g 40 -X \"n=uart,m=FSK_PCM,s=26,l=26,r=300,preamble={24}0x5555ff,decode_uart\" -f 868.89M",
          "19: Protocol description:",
          "21: - Preamble is 55..55.",
          "22: - The message, including the sync word is UART encoded, 8 data bits equal 10 packet bits.",
          "23: - 16 bit sync word of ff33, UART encoded: 0 ff 1 0 cc 1 = 7fd99.",
          "24: - 4+4 bit message type/length indicator byte.",
          "25: - 32 bit destination address (little endian presumably).",
          "26: - 32 bit source address (little endian presumably).",
          "27: - n bytes variable length message payload bytes",
          "28: - 16 bit MAC counter value",
          "29: - 48 bit MAC value",
          "30: - 16 bit CRC-16, poly 0x1021, init 0x0000, reflected.",
          "32: Example packets:",
          "34:     ff33 f6 2000003f dacdea00 016100000000     0bdd fd8ef56f15ad aa1e",
          "35:     ff33 f6 0000003f dacdea00 016100000000     0bdd fd8ef56f15ad 4f9c",
          "36:     ff33 f6 2000003f dacdea00 0161c8000000     0bbd 8aa3a9732e10 26d2",
          "37:     ff33 f6 0000003f dacdea00 0161c8000000     0bbd 8aa3a9732e10 c350",
          "38:     ff33 f6 2000003f dacdea00 0161d2000000     0b99 15decacf7e0e 8069",
          "39:     ff33 f6 0000003f dacdea00 0161d2000000     0b99 15decacf7e0e 65eb",
          "40:     ff33 f6 0000003f dacdea00 0161d2000000     0ba1 05175a82dfae 8bbf",
          "42:     ff33 f8 0000007f e1f57300 0161d40080c80000 0d6c 2c3a3123e6ab 7f1e [UP RIGHT]",
          "43:     ff33 f8 0000007f e1f57300 0161d40080c80000 0d6e e448de7d4e03 62d1 [UP RIGHT]",
          "44:     ff33 f8 0000007f c5896700 0161d40080c80000 0c63 04e867ed64ad f055 [UP LEFT]",
          "45:     ff33 f8 0000007f c5896700 0161d40080c80000 0c65 8414991e8b06 b82b [UP LEFT]",
          "46:     ff33 f8 0000007f 70875800 0161d40080c80000 3bd5 05526875499c 7e72 [UP PSA]",
          "47:     ff33 f6 0000003f e1f57300 0161d2000000     0d6f 708d89781e43 bc24 [STOP RIGHT]",
          "48:     ff33 f6 0000003f e1f57300 0161d2000000     0d71 d1b10f26e1c1 8a9d [STOP RIGHT]",
          "49:     ff33 f6 0000003f c5896700 0161d2000000     0c66 4fcf56fb1c72 d31e [STOP LEFT]",
          "50:     ff33 f6 0000003f c5896700 0161d2000000     0c68 2025e049f331 b64a [STOP LEFT]",
          "51:     ff33 f6 0000003f 70875800 0161d2000000     3bd2 e6b62cef54c8 a937 [STOP PSA]",
          "52:     ff33 f6 0000003f 70875800 0161d2000000     3bd6 630743f0530d dc24 [STOP PSA]",
          "53:     ff33 f8 0000007f e1f57300 0161d40080c80000 0d74 9fb9a0665ff4 77a6 [DOWN RIGHT]",
          "54:     ff33 f8 0000007f e1f57300 0161d40080c80000 0d76 71b81065a2e2 0616 [DOWN RIGHT]",
          "55:     ff33 f8 0000007f c5896700 0161d40080c80000 0c6b 56fcf691e6a9 2c74 [DOWN LEFT]",
          "56:     ff33 f8 0000007f c5896700 0161d40080c80000 0c6d daf020864668 8fad [DOWN LEFT]",
          "57:     ff33 f8 0000007f 70875800 0161d40080c80000 3bdf 1ee7a0e30448 7a6b [DOWN PSA]",
          "59:     ff33 f6 0000003f 17f52300 0147c8000000     18c4 38789cb680cc bc74",
          "60:     ff33 f8 0000003f 17f52320 02ff0143010e0000 18c5 045ee107363d 59b4",
          "61:     ff33 f8 0000003f 17f52320 02ff01430105ff00 18c6 a34715cbe012 4f7f",
          "62:     ^    ^  ^        ^        ^                ^    ^            ^CRC",
          "63:     ^    ^  ^        ^        ^                ^    ^MAC",
          "64:     ^    ^  ^        ^        ^                ^counter",
          "65:     ^    ^  ^        ^        ^payload",
          "66:     ^    ^  ^        ^source",
          "67:     ^    ^  ^destination",
          "68:     ^    ^length of payload",
          "69:     ^sync, not included in CRC",
          "73: #include \"decoder.h\"",
          "75: static int somfy_iohc_decode(r_device *decoder, bitbuffer_t *bitbuffer)",
          "76: {",
          "77:     uint8_t const preamble_pattern[] = {0x57, 0xfd, 0x99};",
          "79:     uint8_t b[19 + 15]; // 19 byte + up 15 byte payload",
          "81:     if (bitbuffer->num_rows != 1)",
          "82:         return DECODE_ABORT_EARLY;",
          "84:     int offset = bitbuffer_search(bitbuffer, 0, 0, preamble_pattern, 24) + 24;",
          "85:     if (offset >= bitbuffer->bits_per_row[0] - 19 * 10)",
          "86:         return DECODE_ABORT_EARLY;",
          "88:     int num_bits = bitbuffer->bits_per_row[0] - offset;",
          "90:     int len = extract_bytes_uart(bitbuffer->bb[0], offset, num_bits, b);",
          "91:     if (len < 19)",
          "92:         return DECODE_ABORT_LENGTH;",
          "94:     if ((b[0] & 0xf0) != 0xf0)",
          "95:         return DECODE_ABORT_EARLY;",
          "97:     int msg_len = b[0] & 0xf; // should be 6 or 8",
          "98:     if (len < 19 + msg_len)",
          "99:         return DECODE_ABORT_LENGTH;",
          "102:     if (crc16lsb(b, len, 0x8408, 0x0000) != 0) // unreflected poly 0x1021",
          "103:         return DECODE_FAIL_MIC;",
          "104:     bitrow_printf(b, len * 8, \"%s: offset %d, num_bits %d, len %d, msg_len %d\\n\", __func__, offset, num_bits, len, msg_len);",
          "106:     int msg_type = (b[0]);",
          "107:     int dst_id   = ((unsigned)b[4] << 24) | (b[3] << 16) | (b[2] << 8) | (b[1]); // assume Little-Endian",
          "108:     int src_id   = ((unsigned)b[8] << 24) | (b[7] << 16) | (b[6] << 8) | (b[5]); // assume Little-Endian",
          "109:     int counter  = (b[len - 10] << 8) | (b[len - 9]);",
          "110:     char msg_str[15 * 2 + 1];",
          "111:     bitrow_snprint(&b[9], msg_len * 8, msg_str, 15 * 2 + 1);",
          "112:     char mac_str[13];",
          "113:     bitrow_snprint(&b[len - 8], 6 * 8, mac_str, 13);",
          "116:     data_t *data = data_make(",
          "117:             \"model\",            \"\",                 DATA_STRING, \"Somfy-IOHC\",",
          "118:             \"id\",               \"\",                 DATA_FORMAT, \"%08x\", DATA_INT, src_id,",
          "119:             \"dst_id\",           \"Dest ID\",          DATA_FORMAT, \"%08x\", DATA_INT, dst_id,",
          "120:             \"msg_type\",         \"Msg type\",         DATA_FORMAT, \"%02x\", DATA_INT, msg_type,",
          "121:             \"msg\",              \"Message\",          DATA_STRING, msg_str,",
          "122:             \"counter\",          \"Counter\",          DATA_INT,    counter,",
          "123:             \"mac\",              \"MAC\",              DATA_STRING, mac_str,",
          "124:             \"mic\",              \"Integrity\",        DATA_STRING, \"CRC\",",
          "125:             NULL);",
          "128:     decoder_output_data(decoder, data);",
          "129:     return 1;",
          "130: }",
          "132: static char *output_fields[] = {",
          "133:         \"model\",",
          "134:         \"id\",",
          "135:         \"dst_id\",",
          "136:         \"msg_type\",",
          "137:         \"msg\",",
          "138:         \"counter\",",
          "139:         \"mac\",",
          "140:         \"mic\",",
          "141:         NULL,",
          "142: };",
          "145: r_device somfy_iohc = {",
          "146:         .name        = \"Somfy io-homecontrol\",",
          "147:         .modulation  = FSK_PULSE_PCM,",
          "148:         .short_width = 26,",
          "149:         .long_width  = 26,",
          "150:         .reset_limit = 300, // UART encoding has at most 9 0's, nominal 234 us.",
          "151:         .decode_fn   = &somfy_iohc_decode,",
          "152:         .fields      = output_fields,",
          "153: };",
          "",
          "---------------"
        ],
        "vs15/rtl_433.vcxproj||vs15/rtl_433.vcxproj": [
          "File: vs15/rtl_433.vcxproj -> vs15/rtl_433.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:     <ClCompile Include=\"..\\src\\devices\\simplisafe.c\" />",
          "293:     <ClCompile Include=\"..\\src\\devices\\smoke_gs558.c\" />",
          "294:     <ClCompile Include=\"..\\src\\devices\\solight_te44.c\" />",
          "296:     <ClCompile Include=\"..\\src\\devices\\springfield.c\" />",
          "297:     <ClCompile Include=\"..\\src\\devices\\steelmate.c\" />",
          "298:     <ClCompile Include=\"..\\src\\devices\\tfa_30_3196.c\" />",
          "",
          "[Removed Lines]",
          "295:     <ClCompile Include=\"..\\src\\devices\\somfy.c\" />",
          "",
          "[Added Lines]",
          "295:     <ClCompile Include=\"..\\src\\devices\\somfy_iohc.c\" />",
          "296:     <ClCompile Include=\"..\\src\\devices\\somfy_rts.c\" />",
          "",
          "---------------"
        ],
        "vs15/rtl_433.vcxproj.filters||vs15/rtl_433.vcxproj.filters": [
          "File: vs15/rtl_433.vcxproj.filters -> vs15/rtl_433.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:     <ClCompile Include=\"..\\src\\devices\\solight_te44.c\">",
          "614:       <Filter>Source Files\\devices</Filter>",
          "615:     </ClCompile>",
          "617:       <Filter>Source Files\\devices</Filter>",
          "618:     </ClCompile>",
          "619:     <ClCompile Include=\"..\\src\\devices\\springfield.c\">",
          "",
          "[Removed Lines]",
          "616:     <ClCompile Include=\"..\\src\\devices\\somfy.c\">",
          "",
          "[Added Lines]",
          "616:     <ClCompile Include=\"..\\src\\devices\\somfy_iohc.c\">",
          "617:       <Filter>Source Files\\devices</Filter>",
          "618:     </ClCompile>",
          "619:     <ClCompile Include=\"..\\src\\devices\\somfy_rts.c\">",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b00641ca61081da87905692fce385690b9cfedd5",
      "candidate_info": {
        "commit_hash": "b00641ca61081da87905692fce385690b9cfedd5",
        "repo": "merbanan/rtl_433",
        "commit_url": "https://github.com/merbanan/rtl_433/commit/b00641ca61081da87905692fce385690b9cfedd5",
        "files": [
          "src/devices/somfy_iohc.c"
        ],
        "message": "Change Somfy-IOHC to recognize more messages (#2258)\n\n- Messages can be as short as 11 bytes.\n- Message length has 5 bits instead of 4.\n- Flags were assumed to be constant, causing two-way remotes not to get recognized.\n- The message type (command id) is not indicated by the 1st but the 9th byte.\n- Trailing bytes were not removed, leading to invalid length and failing CRC.\n- Sequence numbers and MAC are limited to authenticated one-way frames.\n\nThis was briefly tested using both one- and two-way remotes.",
        "before_after_code_files": [
          "src/devices/somfy_iohc.c||src/devices/somfy_iohc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/devices/somfy_iohc.c||src/devices/somfy_iohc.c"
          ],
          "candidate": [
            "src/devices/somfy_iohc.c||src/devices/somfy_iohc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/devices/somfy_iohc.c||src/devices/somfy_iohc.c": [
          "File: src/devices/somfy_iohc.c -> src/devices/somfy_iohc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: #include \"decoder.h\"",
          "94: static int somfy_iohc_decode(r_device *decoder, bitbuffer_t *bitbuffer)",
          "95: {",
          "96:     uint8_t const preamble_pattern[] = {0x57, 0xfd, 0x99};",
          "100:     if (bitbuffer->num_rows != 1)",
          "101:         return DECODE_ABORT_EARLY;",
          "105:         return DECODE_ABORT_EARLY;",
          "110:     int len = extract_bytes_uart(bitbuffer->bb[0], offset, num_bits, b);",
          "112:         return DECODE_ABORT_LENGTH;",
          "119:         return DECODE_ABORT_LENGTH;",
          "122:     if (crc16lsb(b, len, 0x8408, 0x0000) != 0) // unreflected poly 0x1021",
          "123:         return DECODE_FAIL_MIC;",
          "136:     data_t *data = data_make(",
          "137:             \"model\",            \"\",                 DATA_STRING, \"Somfy-IOHC\",",
          "144:             \"mic\",              \"Integrity\",        DATA_STRING, \"CRC\",",
          "145:             NULL);",
          "148:     decoder_output_data(decoder, data);",
          "149:     return 1;",
          "150: }",
          "",
          "[Removed Lines]",
          "98:     uint8_t b[19 + 15]; // 19 byte + up 15 byte payload",
          "103:     unsigned offset = bitbuffer_search(bitbuffer, 0, 0, preamble_pattern, 24) + 24;",
          "104:     if (offset + 19 * 10 >= bitbuffer->bits_per_row[0])",
          "107:     unsigned num_bits = bitbuffer->bits_per_row[0] - offset;",
          "108:     num_bits = MIN(num_bits, sizeof (b) * 8);",
          "111:     if (len < 19)",
          "114:     if ((b[0] & 0xf0) != 0xf0)",
          "115:         return DECODE_ABORT_EARLY;",
          "117:     int msg_len = b[0] & 0xf; // should be 6 or 8",
          "118:     if (len < 19 + msg_len)",
          "124:     decoder_logf_bitrow(decoder, 2, __func__, b, len * 8, \"offset %u, num_bits %u, len %d, msg_len %d\", offset, num_bits, len, msg_len);",
          "126:     int msg_type = (b[0]);",
          "127:     int dst_id   = ((unsigned)b[4] << 24) | (b[3] << 16) | (b[2] << 8) | (b[1]); // assume Little-Endian",
          "128:     int src_id   = ((unsigned)b[8] << 24) | (b[7] << 16) | (b[6] << 8) | (b[5]); // assume Little-Endian",
          "129:     int counter  = (b[len - 10] << 8) | (b[len - 9]);",
          "130:     char msg_str[15 * 2 + 1];",
          "131:     bitrow_snprint(&b[9], msg_len * 8, msg_str, 15 * 2 + 1);",
          "132:     char mac_str[13];",
          "133:     bitrow_snprint(&b[len - 8], 6 * 8, mac_str, 13);",
          "138:             \"id\",               \"\",                 DATA_FORMAT, \"%08x\", DATA_INT, src_id,",
          "139:             \"dst_id\",           \"Dest ID\",          DATA_FORMAT, \"%08x\", DATA_INT, dst_id,",
          "140:             \"msg_type\",         \"Msg type\",         DATA_FORMAT, \"%02x\", DATA_INT, msg_type,",
          "141:             \"msg\",              \"Message\",          DATA_STRING, msg_str,",
          "142:             \"counter\",          \"Counter\",          DATA_INT,    counter,",
          "143:             \"mac\",              \"MAC\",              DATA_STRING, mac_str,",
          "",
          "[Added Lines]",
          "94: struct iohc_msg {",
          "97:     unsigned end_flag : 1;",
          "98:     unsigned start_flag : 1;",
          "99:     unsigned protocol_mode : 1;",
          "100:     unsigned frame_length : 5;",
          "102:     unsigned use_beacon : 1;",
          "103:     unsigned is_routed : 1;",
          "104:     unsigned low_power_mode : 1;",
          "105:     unsigned protocol_version : 3;",
          "107:     unsigned dst_addr : 24;",
          "108:     unsigned src_addr : 24;",
          "110:     unsigned cmd_id : 8;",
          "112:     unsigned crc : 16;",
          "115:     int seq_nr;",
          "116:     char mac[13];",
          "117: };",
          "122:     struct iohc_msg msg = {0};",
          "124:     uint8_t b[1 + 31 + 2]; // Length, payload, CRC",
          "129:     unsigned offset = bitbuffer_search(bitbuffer, 0, 0, preamble_pattern, 24);",
          "130:     if (offset == bitbuffer->bits_per_row[0])",
          "131:         return DECODE_ABORT_EARLY;",
          "133:     offset += 24;",
          "135:     int num_bits = bitbuffer->bits_per_row[0] - offset;",
          "136:     if (num_bits <= 0)",
          "139:     num_bits = MIN((size_t)num_bits, sizeof (b) * 8);",
          "142:     if (len < 11)",
          "145:     msg.frame_length = b[0] & 0x1f;",
          "146:     if (len < msg.frame_length + 3)",
          "148:     len = msg.frame_length + 3;",
          "150:     msg.end_flag = (b[0] & 0x80) >> 7;",
          "151:     msg.start_flag = (b[0] & 0x40) >> 6;",
          "152:     msg.protocol_mode = (b[0] & 0x20) >> 5;",
          "153:     msg.use_beacon = (b[1] & 0x80) >> 7;",
          "154:     msg.is_routed = (b[1] & 0x40) >> 6;",
          "155:     msg.low_power_mode = (b[1] & 0x20) >> 5;",
          "156:     msg.protocol_version = b[1] & 0x03;",
          "157:     msg.dst_addr = (b[2] << 16) | (b[3] << 8) | b[4];",
          "158:     msg.src_addr = (b[5] << 16) | (b[6] << 8) | b[7];",
          "159:     msg.cmd_id = b[8];",
          "161:     unsigned int data_length = msg.frame_length - 8;",
          "162:     if (msg.protocol_mode == 0 || data_length < 8) {",
          "163:         bitrow_snprint(&b[9], data_length * 8, msg.data, sizeof msg.data);",
          "164:     } else {",
          "165:         data_length -= 8;",
          "166:         bitrow_snprint(&b[9], data_length * 8, msg.data, sizeof msg.data);",
          "167:         msg.seq_nr = (b[9 + data_length] << 8) | b[9 + data_length + 1];",
          "168:         bitrow_snprint(&b[9 + data_length + 2], 6 * 8, msg.mac, sizeof msg.mac);",
          "169:     }",
          "171:     msg.crc = (b[len - 2] << 8) | b[len - 1];",
          "177:     decoder_logf_bitrow(decoder, 2, __func__, b, len * 8, \"offset %u, num_bits %u, len %d, msg_len %d\", offset, num_bits, len, msg.frame_length);",
          "182:             \"id\",               \"Source\",           DATA_FORMAT, \"%06x\", DATA_INT, msg.src_addr,",
          "183:             \"dst_id\",           \"Target\",           DATA_FORMAT, \"%06x\", DATA_INT, msg.dst_addr,",
          "184:             \"msg_type\",         \"Command\",          DATA_FORMAT, \"%02x\", DATA_INT, msg.cmd_id,",
          "185:             \"msg\",              \"Message\",          DATA_STRING, msg.data,",
          "187:             \"mode\",             \"Mode\",             DATA_STRING, msg.protocol_mode ? \"One-way\" : \"Two-way\",",
          "188:             \"version\",          \"Version\",          DATA_INT, msg.protocol_version,",
          "189:             NULL);",
          "191:     if (msg.protocol_mode == 1)",
          "192:         data = data_append(data,",
          "193:             \"counter\",          \"Counter\",          DATA_INT,    msg.seq_nr,",
          "194:             \"mac\",              \"MAC\",              DATA_STRING, msg.mac,",
          "198:     if (decoder->verbose) {",
          "199:         data_t *flags = data_make(",
          "200:             \"end\", \"End\", DATA_INT, msg.end_flag,",
          "201:             \"start\", \"Start\", DATA_INT, msg.start_flag,",
          "202:             \"mode\", \"Mode\", DATA_INT, msg.protocol_mode,",
          "203:             \"beacon\", \"Beacon\", DATA_INT, msg.use_beacon,",
          "204:             \"routed\", \"Routed\", DATA_INT, msg.is_routed,",
          "205:             \"lpm\", \"LPM\", DATA_INT, msg.low_power_mode,",
          "206:             NULL);",
          "207:         data = data_append(data, \"flags\", \"Flags\", DATA_DATA, flags, NULL);",
          "208:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:         \"counter\",",
          "159:         \"mac\",",
          "160:         \"mic\",",
          "161:         NULL,",
          "162: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:         \"mode\",",
          "224:         \"version\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a8f192fa66a229d53f5e07ede46ffa5781ebe5f",
      "candidate_info": {
        "commit_hash": "8a8f192fa66a229d53f5e07ede46ffa5781ebe5f",
        "repo": "merbanan/rtl_433",
        "commit_url": "https://github.com/merbanan/rtl_433/commit/8a8f192fa66a229d53f5e07ede46ffa5781ebe5f",
        "files": [
          "src/devices/somfy_iohc.c"
        ],
        "message": "minor: Clean up Somfy-IOHC",
        "before_after_code_files": [
          "src/devices/somfy_iohc.c||src/devices/somfy_iohc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/devices/somfy_iohc.c||src/devices/somfy_iohc.c"
          ],
          "candidate": [
            "src/devices/somfy_iohc.c||src/devices/somfy_iohc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/devices/somfy_iohc.c||src/devices/somfy_iohc.c": [
          "File: src/devices/somfy_iohc.c -> src/devices/somfy_iohc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:     Copyright (C) 2021 Christian W. Zuckschwerdt <zany@triq.net>",
          "",
          "[Removed Lines]",
          "2:     Somfy io-homecontrol.",
          "",
          "[Added Lines]",
          "2:     Somfy io-homecontrol devices.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9:     (at your option) any later version.",
          "13: Somfy io-homecontrol devices.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #include \"decoder.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119: static int somfy_iohc_decode(r_device *decoder, bitbuffer_t *bitbuffer)",
          "120: {",
          "121:     uint8_t const preamble_pattern[] = {0x57, 0xfd, 0x99};",
          "124:     uint8_t b[1 + 31 + 2]; // Length, payload, CRC",
          "126:     if (bitbuffer->num_rows != 1)",
          "127:         return DECODE_ABORT_EARLY;",
          "131:         return DECODE_ABORT_EARLY;",
          "135:     int num_bits = bitbuffer->bits_per_row[0] - offset;",
          "139:     num_bits = MIN((size_t)num_bits, sizeof (b) * 8);",
          "",
          "[Removed Lines]",
          "92: #include \"decoder.h\"",
          "94: struct iohc_msg {",
          "97:     unsigned end_flag : 1;",
          "98:     unsigned start_flag : 1;",
          "99:     unsigned protocol_mode : 1;",
          "100:     unsigned frame_length : 5;",
          "102:     unsigned use_beacon : 1;",
          "103:     unsigned is_routed : 1;",
          "104:     unsigned low_power_mode : 1;",
          "105:     unsigned protocol_version : 3;",
          "107:     unsigned dst_addr : 24;",
          "108:     unsigned src_addr : 24;",
          "110:     unsigned cmd_id : 8;",
          "112:     unsigned crc : 16;",
          "115:     int seq_nr;",
          "116:     char mac[13];",
          "117: };",
          "122:     struct iohc_msg msg = {0};",
          "129:     unsigned offset = bitbuffer_search(bitbuffer, 0, 0, preamble_pattern, 24);",
          "130:     if (offset == bitbuffer->bits_per_row[0])",
          "133:     offset += 24;",
          "136:     if (num_bits <= 0)",
          "137:         return DECODE_ABORT_EARLY;",
          "",
          "[Added Lines]",
          "103:     unsigned offset = bitbuffer_search(bitbuffer, 0, 0, preamble_pattern, 24) + 24;",
          "104:     if (offset >= bitbuffer->bits_per_row[0])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:     if (len < 11)",
          "143:         return DECODE_ABORT_LENGTH;",
          "147:         return DECODE_ABORT_LENGTH;",
          "164:     } else {",
          "165:         data_length -= 8;",
          "169:     }",
          "174:     if (crc16lsb(b, len, 0x8408, 0x0000) != 0) // unreflected poly 0x1021",
          "175:         return DECODE_FAIL_MIC;",
          "180:     data_t *data = data_make(",
          "181:             \"model\",            \"\",                 DATA_STRING, \"Somfy-IOHC\",",
          "186:             \"mic\",              \"Integrity\",        DATA_STRING, \"CRC\",",
          "195:             NULL);",
          "210:     decoder_output_data(decoder, data);",
          "211:     return 1;",
          "212: }",
          "",
          "[Removed Lines]",
          "145:     msg.frame_length = b[0] & 0x1f;",
          "146:     if (len < msg.frame_length + 3)",
          "148:     len = msg.frame_length + 3;",
          "150:     msg.end_flag = (b[0] & 0x80) >> 7;",
          "151:     msg.start_flag = (b[0] & 0x40) >> 6;",
          "152:     msg.protocol_mode = (b[0] & 0x20) >> 5;",
          "153:     msg.use_beacon = (b[1] & 0x80) >> 7;",
          "154:     msg.is_routed = (b[1] & 0x40) >> 6;",
          "155:     msg.low_power_mode = (b[1] & 0x20) >> 5;",
          "156:     msg.protocol_version = b[1] & 0x03;",
          "157:     msg.dst_addr = (b[2] << 16) | (b[3] << 8) | b[4];",
          "158:     msg.src_addr = (b[5] << 16) | (b[6] << 8) | b[7];",
          "159:     msg.cmd_id = b[8];",
          "161:     unsigned int data_length = msg.frame_length - 8;",
          "162:     if (msg.protocol_mode == 0 || data_length < 8) {",
          "163:         bitrow_snprint(&b[9], data_length * 8, msg.data, sizeof msg.data);",
          "166:         bitrow_snprint(&b[9], data_length * 8, msg.data, sizeof msg.data);",
          "167:         msg.seq_nr = (b[9 + data_length] << 8) | b[9 + data_length + 1];",
          "168:         bitrow_snprint(&b[9 + data_length + 2], 6 * 8, msg.mac, sizeof msg.mac);",
          "171:     msg.crc = (b[len - 2] << 8) | b[len - 1];",
          "177:     decoder_logf_bitrow(decoder, 2, __func__, b, len * 8, \"offset %u, num_bits %u, len %d, msg_len %d\", offset, num_bits, len, msg.frame_length);",
          "182:             \"id\",               \"Source\",           DATA_FORMAT, \"%06x\", DATA_INT, msg.src_addr,",
          "183:             \"dst_id\",           \"Target\",           DATA_FORMAT, \"%06x\", DATA_INT, msg.dst_addr,",
          "184:             \"msg_type\",         \"Command\",          DATA_FORMAT, \"%02x\", DATA_INT, msg.cmd_id,",
          "185:             \"msg\",              \"Message\",          DATA_STRING, msg.data,",
          "187:             \"mode\",             \"Mode\",             DATA_STRING, msg.protocol_mode ? \"One-way\" : \"Two-way\",",
          "188:             \"version\",          \"Version\",          DATA_INT, msg.protocol_version,",
          "189:             NULL);",
          "191:     if (msg.protocol_mode == 1)",
          "192:         data = data_append(data,",
          "193:             \"counter\",          \"Counter\",          DATA_INT,    msg.seq_nr,",
          "194:             \"mac\",              \"MAC\",              DATA_STRING, msg.mac,",
          "198:     if (decoder->verbose) {",
          "199:         data_t *flags = data_make(",
          "200:             \"end\", \"End\", DATA_INT, msg.end_flag,",
          "201:             \"start\", \"Start\", DATA_INT, msg.start_flag,",
          "202:             \"mode\", \"Mode\", DATA_INT, msg.protocol_mode,",
          "203:             \"beacon\", \"Beacon\", DATA_INT, msg.use_beacon,",
          "204:             \"routed\", \"Routed\", DATA_INT, msg.is_routed,",
          "205:             \"lpm\", \"LPM\", DATA_INT, msg.low_power_mode,",
          "206:             NULL);",
          "207:         data = data_append(data, \"flags\", \"Flags\", DATA_DATA, flags, NULL);",
          "208:     }",
          "",
          "[Added Lines]",
          "120:     int msg_len = b[0] & 0x1f;",
          "121:     if (len < msg_len + 3)",
          "123:     len = msg_len + 3;",
          "125:     int msg_end_flag      = (b[0] & 0x80) >> 7;",
          "126:     int msg_start_flag    = (b[0] & 0x40) >> 6;",
          "127:     int msg_protocol_mode = (b[0] & 0x20) >> 5;",
          "134:     int msg_use_beacon       = (b[1] & 0x80) >> 7;",
          "135:     int msg_is_routed        = (b[1] & 0x40) >> 6;",
          "136:     int msg_low_power_mode   = (b[1] & 0x20) >> 5;",
          "137:     int msg_protocol_version = b[1] & 0x03;",
          "142:     int msg_dst_addr = (b[2] << 16) | (b[3] << 8) | b[4];",
          "143:     int msg_src_addr = (b[5] << 16) | (b[6] << 8) | b[7];",
          "147:     int msg_cmd_id = b[8];",
          "150:     int msg_seq_nr = 0;",
          "151:     char msg_mac[13] = {0};",
          "153:     char msg_data[31 * 2 + 1]; // variable length, converted to hex string",
          "154:     unsigned int data_length = msg_len - 8;",
          "155:     if (msg_protocol_mode == 0 || data_length < 8) {",
          "156:         bitrow_snprint(&b[9], data_length * 8, msg_data, sizeof (msg_data));",
          "159:         bitrow_snprint(&b[9], data_length * 8, msg_data, sizeof (msg_data));",
          "160:         msg_seq_nr = (b[9 + data_length] << 8) | b[9 + data_length + 1];",
          "161:         bitrow_snprint(&b[9 + data_length + 2], 6 * 8, msg_mac, sizeof msg_mac);",
          "171:     decoder_logf_bitrow(decoder, 2, __func__, b, len * 8, \"offset %u, num_bits %u, len %d, msg_len %d\", offset, num_bits, len, msg_len);",
          "176:             \"id\",               \"Source\",           DATA_FORMAT, \"%06x\", DATA_INT, msg_src_addr,",
          "177:             \"dst_id\",           \"Target\",           DATA_FORMAT, \"%06x\", DATA_INT, msg_dst_addr,",
          "178:             \"msg_type\",         \"Command\",          DATA_FORMAT, \"%02x\", DATA_INT, msg_cmd_id,",
          "179:             \"msg\",              \"Message\",          DATA_STRING, msg_data,",
          "180:             \"mode\",             \"Mode\",             DATA_STRING, msg_protocol_mode ? \"One-way\" : \"Two-way\",",
          "181:             \"version\",          \"Version\",          DATA_INT,    msg_protocol_version,",
          "182:             \"counter\",          \"Counter\",          DATA_COND, msg_protocol_mode == 1, DATA_INT,    msg_seq_nr,",
          "183:             \"mac\",              \"MAC\",              DATA_COND, msg_protocol_mode == 1, DATA_STRING, msg_mac,",
          "184:             \"flag_end\",         \"End flag\",         DATA_INT,    msg_end_flag,",
          "185:             \"flag_start\",       \"Start flag\",       DATA_INT,    msg_start_flag,",
          "186:             \"flag_mode\",        \"Mode flag\",        DATA_INT,    msg_protocol_mode,",
          "187:             \"flag_beacon\",      \"Beacon flag\",      DATA_INT,    msg_use_beacon,",
          "188:             \"flag_routed\",      \"Routed flag\",      DATA_INT,    msg_is_routed,",
          "189:             \"flag_lpm\",         \"LPM flag\",         DATA_INT,    msg_low_power_mode,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "217:         \"dst_id\",",
          "218:         \"msg_type\",",
          "219:         \"msg\",",
          "220:         \"counter\",",
          "221:         \"mac\",",
          "222:         \"mic\",",
          "225:         NULL,",
          "226: };",
          "",
          "[Removed Lines]",
          "223:         \"mode\",",
          "224:         \"version\",",
          "",
          "[Added Lines]",
          "204:         \"mode\",",
          "205:         \"version\",",
          "208:         \"flag_end\",",
          "209:         \"flag_start\",",
          "210:         \"flag_mode\",",
          "211:         \"flag_beacon\",",
          "212:         \"flag_routed\",",
          "213:         \"flag_lpm\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}