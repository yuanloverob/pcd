{
  "cve_id": "CVE-2016-4078",
  "cve_desc": "The IEEE 802.11 dissector in Wireshark 1.12.x before 1.12.11 and 2.0.x before 2.0.3 does not properly restrict element lists, which allows remote attackers to cause a denial of service (deep recursion and application crash) via a crafted packet, related to epan/dissectors/packet-capwap.c and epan/dissectors/packet-ieee80211.c.",
  "repo": "wireshark/wireshark",
  "patch_hash": "e2745d741ec11f395d41c0aafa24df9dec136399",
  "patch_info": {
    "commit_hash": "e2745d741ec11f395d41c0aafa24df9dec136399",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/e2745d741ec11f395d41c0aafa24df9dec136399",
    "files": [
      "epan/dissectors/packet-capwap.c",
      "epan/dissectors/packet-ieee80211.c",
      "epan/dissectors/packet-ieee80211.h"
    ],
    "message": "ieee80211: fix deep recursion\n\nRestrict the list of possible (sub)elements to avoid deep recursion.\n\nBug: 11824\nBug: 12187\nChange-Id: I12deb9956c6ba9b6113cf45da4ee919e33ff8567\nReviewed-on: https://code.wireshark.org/review/14114\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-capwap.c||epan/dissectors/packet-capwap.c",
      "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c",
      "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-capwap.c||epan/dissectors/packet-capwap.c": [
      "File: epan/dissectors/packet-capwap.c -> epan/dissectors/packet-capwap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2722:         offset += 1;",
      "2724:         while (offset < offset_end) {",
      "2726:         }",
      "2728:         break;",
      "",
      "[Removed Lines]",
      "2725:             offset += add_tagged_field(pinfo, sub_msg_element_type_tree, tvb, offset, 0);",
      "",
      "[Added Lines]",
      "2725:             offset += add_tagged_field(pinfo, sub_msg_element_type_tree, tvb, offset, 0, NULL, 0);",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c": [
      "File: epan/dissectors/packet-ieee80211.c -> epan/dissectors/packet-ieee80211.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "11585:   guint8       desc_cnt = 0;",
      "11586:   guint32      next_ie;",
      "11587:   int          offset_r = 0;",
      "11589:   if (tag_len !=  4)  {",
      "11590:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11588:   const guint8 ids[] = { TAG_RIC_DESCRIPTOR };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "11621:     next_ie = tvb_get_guint8(tvb,offset);",
      "11622:     proto_item_append_text(ti, \" :(%d:%s)\", desc_cnt,val_to_str_ext(next_ie, &tag_num_vals_ext, \"Reserved (%d)\"));",
      "11626:       break;",
      "",
      "[Removed Lines]",
      "11624:     offset_r = add_tagged_field(pinfo, sub_tree, tvb, offset, ftype);",
      "",
      "[Added Lines]",
      "11625:     offset_r = add_tagged_field(pinfo, sub_tree, tvb, offset, ftype, ids, G_N_ELEMENTS(ids));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "11745:                          guint32 tag_len)",
      "11746: {",
      "11747:   int tmp_sublen;",
      "11750:   Decode three subelement in IE-196(Channel Switch Wrapper element):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11749:   const guint8 ids[] = { TAG_COUNTRY_INFO, TAG_WIDE_BW_CHANNEL_SWITCH,",
      "11750:     TAG_VHT_TX_PWR_ENVELOPE };",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "11753:         (3) New VHT Transmit Power Envelope subelement",
      "11755:   while (tag_len > 0){",
      "11762:   }",
      "11763:   return offset;",
      "11764: }",
      "",
      "[Removed Lines]",
      "11756:         tmp_sublen = tvb_get_guint8(tvb, offset + 1);",
      "11757:         if(add_tagged_field(pinfo, tree, tvb, offset, 0) == 0){",
      "11758:           break;",
      "11759:         }",
      "11760:         tag_len -= (tmp_sublen + 2);",
      "11761:         offset += (tmp_sublen + 2);",
      "",
      "[Added Lines]",
      "11759:     tmp_sublen = tvb_get_guint8(tvb, offset + 1);",
      "11760:     if(add_tagged_field(pinfo, tree, tvb, offset, 0, ids, G_N_ELEMENTS(ids)) == 0){",
      "11761:       break;",
      "11762:     }",
      "11763:     tag_len -= (tmp_sublen + 2);",
      "11764:     offset += (tmp_sublen + 2);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "12139:                                int ftype)",
      "12140: {",
      "12141:   int end = offset + tag_len;",
      "12143:   proto_tree_add_item(tree, hf_ieee80211_tag_tfs_request_id,",
      "12144:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12145:   const guint8 ids[] = {",
      "12147:     TAG_VENDOR_SPECIFIC_IE",
      "12148:   };",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "12176:       s_offset = offset;",
      "12177:       s_end = offset + len;",
      "12178:       while (s_offset < s_end) {",
      "12180:         if (tlen==0)",
      "12181:           break;",
      "12182:         s_offset += tlen;",
      "",
      "[Removed Lines]",
      "12179:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype);",
      "",
      "[Added Lines]",
      "12187:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype, ids, G_N_ELEMENTS(ids));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "12216:                                 int ftype)",
      "12217: {",
      "12218:   int end = offset + tag_len;",
      "12220:   while (offset + 3 <= end) {",
      "12221:     guint8 id, len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12227:   const guint8 ids[] = {",
      "12230:     TAG_VENDOR_SPECIFIC_IE",
      "12231:   };",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "12245:       s_offset = offset;",
      "12246:       s_end = offset + len;",
      "12247:       while (s_offset < s_end) {",
      "12249:         if (tlen==0)",
      "12250:           break;",
      "12251:         s_offset += tlen;",
      "",
      "[Removed Lines]",
      "12248:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype);",
      "",
      "[Added Lines]",
      "12262:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype, ids, G_N_ELEMENTS(ids));",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "13929: }",
      "13931: int",
      "13933: {",
      "13934:   guint32       oui;",
      "13935:   tvbuff_t     *tag_tvb;",
      "",
      "[Removed Lines]",
      "13932: add_tagged_field(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset, int ftype)",
      "",
      "[Added Lines]",
      "13946: add_tagged_field(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset, int ftype,",
      "13947:                  const guint8 *valid_element_ids, guint valid_element_ids_count)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "13965:                            \"Tag Length is longer than remaining payload\");",
      "13966:   }",
      "13968:   switch (tag_no) {",
      "13969:   case TAG_SSID:",
      "13970:     offset += ieee80211_tag_ssid(pinfo, tree, ti, ti_len, tag_len, tvb,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13986:   if (valid_element_ids_count) {",
      "13987:     gboolean valid_tag_no;",
      "13988:     guint i;",
      "13990:     for (i = 0; i < valid_element_ids_count; i++) {",
      "13991:       valid_tag_no = valid_element_ids[i] == tag_no;",
      "13992:       if (valid_tag_no)",
      "13993:         break;",
      "13994:     }",
      "13995:     if (!valid_tag_no) {",
      "13996:       expert_add_info_format(pinfo, ti_tag, &ei_ieee80211_tag_number,",
      "13997:           \"Unexpected Element ID %d\", tag_no);",
      "13998:       goto end_of_tag;",
      "13999:     }",
      "14000:   }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "16247:   }",
      "16248:   return tag_len + 1 + 1;",
      "16249: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16282: end_of_tag:",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "16255:   int next_len;",
      "16257:   while (tagged_parameters_len > 0) {",
      "16259:       break;",
      "16260:     if (next_len > tagged_parameters_len) {",
      "",
      "[Removed Lines]",
      "16258:     if ((next_len=add_tagged_field (pinfo, tree, tvb, offset, ftype)) == 0)",
      "",
      "[Added Lines]",
      "16294:     if ((next_len=add_tagged_field (pinfo, tree, tvb, offset, ftype, NULL, 0)) == 0)",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "27165:     { &ei_ieee80211_inv_val,",
      "27166:       { \"ieee80211.invalid_value\", PI_MALFORMED, PI_WARN,",
      "27167:         \"Invalid value\", EXPFILL }},",
      "27169:     { &ei_ieee80211_tag_length, { \"wlan_mgt.tag.length.bad\", PI_MALFORMED, PI_ERROR, \"Bad tag length\", EXPFILL }},",
      "27170:     { &ei_ieee80211_extra_data, { \"ieee80211.extra_data\", PI_MALFORMED, PI_WARN, \"Unexpected extra data in the end\", EXPFILL }},",
      "27171:     { &ei_ieee80211_ff_anqp_capability, { \"wlan_mgt.fixed.anqp.capability.invalid\", PI_MALFORMED, PI_ERROR, \"Invalid vendor-specific ANQP capability\", EXPFILL }},",
      "",
      "[Removed Lines]",
      "27168:     { &ei_ieee80211_tag_number, { \"wlan_mgt.tag.number.unexpected_ie\", PI_MALFORMED, PI_ERROR, \"Unexpected IE (expected Advertisement Protocol)\", EXPFILL }},",
      "",
      "[Added Lines]",
      "27204:     { &ei_ieee80211_tag_number, { \"wlan_mgt.tag.number.unexpected_ie\", PI_MALFORMED, PI_ERROR, \"Unexpected Information Element ID\", EXPFILL }},",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h": [
      "File: epan/dissectors/packet-ieee80211.h -> epan/dissectors/packet-ieee80211.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:                              tvbuff_t *tvb, int offset, gint size);",
      "52: int add_tagged_field(packet_info *pinfo, proto_tree *tree,",
      "55: #define MAX_SSID_LEN    32",
      "56: #define MAX_PROTECT_LEN 10",
      "",
      "[Removed Lines]",
      "53:                             tvbuff_t *tvb, int offset, int ftype);",
      "",
      "[Added Lines]",
      "53:                             tvbuff_t *tvb, int offset, int ftype,",
      "54:                             const guint8 *valid_element_ids,",
      "55:                             guint valid_element_ids_count);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c9fc36488ac568d24779fe3854eff2516d761ac",
      "candidate_info": {
        "commit_hash": "6c9fc36488ac568d24779fe3854eff2516d761ac",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6c9fc36488ac568d24779fe3854eff2516d761ac",
        "files": [
          "epan/dissectors/packet-capwap.c",
          "epan/dissectors/packet-ieee80211.c",
          "epan/dissectors/packet-ieee80211.h"
        ],
        "message": "ieee80211: fix deep recursion\n\nRestrict the list of possible (sub)elements to avoid deep recursion.\n\nBug: 11824\nBug: 12187\nChange-Id: I12deb9956c6ba9b6113cf45da4ee919e33ff8567\nReviewed-on: https://code.wireshark.org/review/14114\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit e2745d741ec11f395d41c0aafa24df9dec136399)\nReviewed-on: https://code.wireshark.org/review/14741\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-capwap.c||epan/dissectors/packet-capwap.c",
          "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c",
          "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-capwap.c||epan/dissectors/packet-capwap.c",
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c",
            "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h"
          ],
          "candidate": [
            "epan/dissectors/packet-capwap.c||epan/dissectors/packet-capwap.c",
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c",
            "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-capwap.c||epan/dissectors/packet-capwap.c": [
          "File: epan/dissectors/packet-capwap.c -> epan/dissectors/packet-capwap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2725:         offset += 1;",
          "2727:         while (offset < offset_end) {",
          "2729:         }",
          "2731:         break;",
          "",
          "[Removed Lines]",
          "2728:             offset += add_tagged_field(pinfo, sub_msg_element_type_tree, tvb, offset, 0);",
          "",
          "[Added Lines]",
          "2728:             offset += add_tagged_field(pinfo, sub_msg_element_type_tree, tvb, offset, 0, NULL, 0);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c": [
          "File: epan/dissectors/packet-ieee80211.c -> epan/dissectors/packet-ieee80211.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11515:   guint8       desc_cnt = 0;",
          "11516:   guint32      next_ie;",
          "11517:   int          offset_r = 0;",
          "11519:   if (tag_len !=  4)  {",
          "11520:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11518:   const guint8 ids[] = { TAG_RIC_DESCRIPTOR };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11551:     next_ie = tvb_get_guint8(tvb,offset);",
          "11552:     proto_item_append_text(ti, \" :(%d:%s)\", desc_cnt,val_to_str_ext(next_ie, &tag_num_vals_ext, \"Reserved (%d)\"));",
          "11556:       break;",
          "",
          "[Removed Lines]",
          "11554:     offset_r = add_tagged_field(pinfo, sub_tree, tvb, offset, ftype);",
          "",
          "[Added Lines]",
          "11555:     offset_r = add_tagged_field(pinfo, sub_tree, tvb, offset, ftype, ids, G_N_ELEMENTS(ids));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "11639:                          guint32 tag_len)",
          "11640: {",
          "11641:   int tmp_sublen;",
          "11644:   Decode three subelement in IE-196(Channel Switch Wrapper element):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11643:   const guint8 ids[] = { TAG_COUNTRY_INFO, TAG_WIDE_BW_CHANNEL_SWITCH,",
          "11644:     TAG_VHT_TX_PWR_ENVELOPE };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "11647:         (3) New VHT Transmit Power Envelope subelement",
          "11649:   while (tag_len > 0){",
          "11656:   }",
          "11657:   return offset;",
          "11658: }",
          "",
          "[Removed Lines]",
          "11650:         tmp_sublen = tvb_get_guint8(tvb, offset + 1);",
          "11651:         if(add_tagged_field(pinfo, tree, tvb, offset, 0) == 0){",
          "11652:           break;",
          "11653:         }",
          "11654:         tag_len -= (tmp_sublen + 2);",
          "11655:         offset += (tmp_sublen + 2);",
          "",
          "[Added Lines]",
          "11653:     tmp_sublen = tvb_get_guint8(tvb, offset + 1);",
          "11654:     if(add_tagged_field(pinfo, tree, tvb, offset, 0, ids, G_N_ELEMENTS(ids)) == 0){",
          "11655:       break;",
          "11656:     }",
          "11657:     tag_len -= (tmp_sublen + 2);",
          "11658:     offset += (tmp_sublen + 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "12033:                                int ftype)",
          "12034: {",
          "12035:   int end = offset + tag_len;",
          "12037:   proto_tree_add_item(tree, hf_ieee80211_tag_tfs_request_id,",
          "12038:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12039:   const guint8 ids[] = {",
          "12041:     TAG_VENDOR_SPECIFIC_IE",
          "12042:   };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "12070:       s_offset = offset;",
          "12071:       s_end = offset + len;",
          "12072:       while (s_offset < s_end) {",
          "12074:         if (tlen==0)",
          "12075:           break;",
          "12076:         s_offset += tlen;",
          "",
          "[Removed Lines]",
          "12073:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype);",
          "",
          "[Added Lines]",
          "12081:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype, ids, G_N_ELEMENTS(ids));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "12110:                                 int ftype)",
          "12111: {",
          "12112:   int end = offset + tag_len;",
          "12114:   while (offset + 3 <= end) {",
          "12115:     guint8 id, len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12121:   const guint8 ids[] = {",
          "12124:     TAG_VENDOR_SPECIFIC_IE",
          "12125:   };",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "12139:       s_offset = offset;",
          "12140:       s_end = offset + len;",
          "12141:       while (s_offset < s_end) {",
          "12143:         if (tlen==0)",
          "12144:           break;",
          "12145:         s_offset += tlen;",
          "",
          "[Removed Lines]",
          "12142:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype);",
          "",
          "[Added Lines]",
          "12156:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype, ids, G_N_ELEMENTS(ids));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "13823: }",
          "13825: int",
          "13827: {",
          "13828:   guint32       oui;",
          "13829:   tvbuff_t     *tag_tvb;",
          "",
          "[Removed Lines]",
          "13826: add_tagged_field(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset, int ftype)",
          "",
          "[Added Lines]",
          "13840: add_tagged_field(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset, int ftype,",
          "13841:                  const guint8 *valid_element_ids, guint valid_element_ids_count)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "13859:                            \"Tag Length is longer than remaining payload\");",
          "13860:   }",
          "13862:   switch (tag_no) {",
          "13863:   case TAG_SSID:",
          "13864:     offset += ieee80211_tag_ssid(pinfo, tree, ti, ti_len, tag_len, tvb,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13880:   if (valid_element_ids_count) {",
          "13881:     gboolean valid_tag_no;",
          "13882:     guint i;",
          "13884:     for (i = 0; i < valid_element_ids_count; i++) {",
          "13885:       valid_tag_no = valid_element_ids[i] == tag_no;",
          "13886:       if (valid_tag_no)",
          "13887:         break;",
          "13888:     }",
          "13889:     if (!valid_tag_no) {",
          "13890:       expert_add_info_format(pinfo, ti_tag, &ei_ieee80211_tag_number,",
          "13891:           \"Unexpected Element ID %d\", tag_no);",
          "13892:       goto end_of_tag;",
          "13893:     }",
          "13894:   }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "16137:   }",
          "16138:   return tag_len + 1 + 1;",
          "16139: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16172: end_of_tag:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "16145:   int next_len;",
          "16147:   while (tagged_parameters_len > 0) {",
          "16149:       break;",
          "16150:     if (next_len > tagged_parameters_len) {",
          "",
          "[Removed Lines]",
          "16148:     if ((next_len=add_tagged_field (pinfo, tree, tvb, offset, ftype)) == 0)",
          "",
          "[Added Lines]",
          "16184:     if ((next_len=add_tagged_field (pinfo, tree, tvb, offset, ftype, NULL, 0)) == 0)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "26997:     { &ei_ieee80211_inv_val,",
          "26998:       { \"ieee80211.invalid_value\", PI_MALFORMED, PI_WARN,",
          "26999:         \"Invalid value\", EXPFILL }},",
          "27001:     { &ei_ieee80211_tag_length, { \"wlan_mgt.tag.length.bad\", PI_MALFORMED, PI_ERROR, \"Bad tag length\", EXPFILL }},",
          "27002:     { &ei_ieee80211_extra_data, { \"ieee80211.extra_data\", PI_MALFORMED, PI_WARN, \"Unexpected extra data in the end\", EXPFILL }},",
          "27003:     { &ei_ieee80211_ff_anqp_capability, { \"wlan_mgt.fixed.anqp.capability.invalid\", PI_MALFORMED, PI_ERROR, \"Invalid vendor-specific ANQP capability\", EXPFILL }},",
          "",
          "[Removed Lines]",
          "27000:     { &ei_ieee80211_tag_number, { \"wlan_mgt.tag.number.unexpected_ie\", PI_MALFORMED, PI_ERROR, \"Unexpected IE (expected Advertisement Protocol)\", EXPFILL }},",
          "",
          "[Added Lines]",
          "27036:     { &ei_ieee80211_tag_number, { \"wlan_mgt.tag.number.unexpected_ie\", PI_MALFORMED, PI_ERROR, \"Unexpected Information Element ID\", EXPFILL }},",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h": [
          "File: epan/dissectors/packet-ieee80211.h -> epan/dissectors/packet-ieee80211.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:                              tvbuff_t *tvb, int offset, gint size);",
          "54: int add_tagged_field(packet_info *pinfo, proto_tree *tree,",
          "57: #define MAX_SSID_LEN    32",
          "58: #define MAX_PROTECT_LEN 10",
          "",
          "[Removed Lines]",
          "55:                             tvbuff_t *tvb, int offset, int ftype);",
          "",
          "[Added Lines]",
          "55:                             tvbuff_t *tvb, int offset, int ftype,",
          "56:                             const guint8 *valid_element_ids,",
          "57:                             guint valid_element_ids_count);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d2516715aff9e3851182c35839f01118ec65f06",
      "candidate_info": {
        "commit_hash": "3d2516715aff9e3851182c35839f01118ec65f06",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/3d2516715aff9e3851182c35839f01118ec65f06",
        "files": [
          "epan/dissectors/packet-ieee80211.c"
        ],
        "message": "802.11 fix unchecked return value (CID 1293628)\n\nfollowing ge243b0041 check the last add_tagged_field for avoid a Coverity warning\n(Yes the code is already safe..)\n\nPing-Bug: 11110\nChange-Id: Iaceb8cf9c91de426bc5e5408b4271091cab57862\nReviewed-on: https://code.wireshark.org/review/8084\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c": [
          "File: epan/dissectors/packet-ieee80211.c -> epan/dissectors/packet-ieee80211.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11870:   while (tag_len > 0){",
          "11871:         tmp_sublen = tvb_get_guint8(tvb, offset + 1);",
          "11873:         tag_len -= (tmp_sublen + 2);",
          "11874:         offset += (tmp_sublen + 2);",
          "11875:   }",
          "",
          "[Removed Lines]",
          "11872:         add_tagged_field(pinfo, tree, tvb, offset, 0);",
          "",
          "[Added Lines]",
          "11872:         if(add_tagged_field(pinfo, tree, tvb, offset, 0) == 0){",
          "11873:           break;",
          "11874:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "50515b9ebf8db7e97369e0cdbc748db9d0fd818b",
      "candidate_info": {
        "commit_hash": "50515b9ebf8db7e97369e0cdbc748db9d0fd818b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/50515b9ebf8db7e97369e0cdbc748db9d0fd818b",
        "files": [
          "epan/dissectors/packet-capwap.c",
          "epan/dissectors/packet-ieee80211.c",
          "epan/dissectors/packet-ieee80211.h"
        ],
        "message": "ieee80211: warn about FT AKM suite mismatches\n\nBug: 13149\nChange-Id: I8bceeeadf30c9594aa4be8cc195e694594de1d97\nReviewed-on: https://code.wireshark.org/review/18862\nPetri-Dish: Guy Harris <guy@alum.mit.edu>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-capwap.c||epan/dissectors/packet-capwap.c",
          "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c",
          "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-capwap.c||epan/dissectors/packet-capwap.c",
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c",
            "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h"
          ],
          "candidate": [
            "epan/dissectors/packet-capwap.c||epan/dissectors/packet-capwap.c",
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c",
            "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-capwap.c||epan/dissectors/packet-capwap.c": [
          "File: epan/dissectors/packet-capwap.c -> epan/dissectors/packet-capwap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2722:         offset += 1;",
          "2724:         while (offset < offset_end) {",
          "2726:         }",
          "2728:         break;",
          "",
          "[Removed Lines]",
          "2725:             offset += add_tagged_field(pinfo, sub_msg_element_type_tree, tvb, offset, 0, NULL, 0);",
          "",
          "[Added Lines]",
          "2725:             offset += add_tagged_field(pinfo, sub_msg_element_type_tree, tvb, offset, 0, NULL, 0, NULL);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c": [
          "File: epan/dissectors/packet-ieee80211.c -> epan/dissectors/packet-ieee80211.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223: static void",
          "224: ieee_80211_add_tagged_parameters(tvbuff_t *tvb, int offset, packet_info *pinfo,",
          "227: static tvbuff_t *try_decrypt(tvbuff_t *tvb, packet_info *pinfo, guint32 offset, guint32 len, guint8 *algorithm, guint32 *sec_header, guint32 *sec_trailer, PAIRPDCAP_KEY_ITEM used_key);",
          "",
          "[Removed Lines]",
          "225:                                   proto_tree *tree, int tagged_parameters_len, int ftype);",
          "",
          "[Added Lines]",
          "225:                                   proto_tree *tree, int tagged_parameters_len, int ftype,",
          "226:                                   association_sanity_check_t *association_sanity_check);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4992: static expert_field ei_ieee80211_vht_action = EI_INIT;",
          "4993: static expert_field ei_ieee80211_mesh_peering_unexpected = EI_INIT;",
          "4994: static expert_field ei_ieee80211_fcs = EI_INIT;",
          "4997: static gint ett_dynamic_alloc_tree = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4996: static expert_field ei_ieee80211_mismatched_akm_suite = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8837:       if (tagged_parameter_tree_len) {",
          "8838:         tagged_tree = get_tagged_parameter_tree(ext_tree, tvb, offset, tagged_parameter_tree_len);",
          "8840:       }",
          "8841:       break;",
          "8842:     }",
          "",
          "[Removed Lines]",
          "8839:         ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree, tagged_parameter_tree_len, EXTENSION_DMG_BEACON);",
          "",
          "[Added Lines]",
          "8841:         ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree, tagged_parameter_tree_len, EXTENSION_DMG_BEACON, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10527: static int",
          "10528: dissect_rsn_ie(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb,",
          "10530: {",
          "10531:   proto_item *rsn_gcs_item, *rsn_pcs_item, *rsn_akms_item, *rsn_cap_item, *rsn_pmkid_item, *rsn_gmcs_item;",
          "10532:   proto_item *rsn_sub_pcs_item, *rsn_sub_akms_item;",
          "",
          "[Removed Lines]",
          "10529:                int offset, guint32 tag_len)",
          "",
          "[Added Lines]",
          "10531:                int offset, guint32 tag_len, association_sanity_check_t *association_sanity_check)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "10615:     {",
          "10616:       proto_tree_add_item(rsn_sub_akms_tree, hf_ieee80211_rsn_akms_80211_type, tvb, offset+3, 1, ENC_LITTLE_ENDIAN);",
          "10617:       proto_item_append_text(rsn_akms_item, \" %s\", rsn_akms_return(tvb_get_ntohl(tvb, offset)));",
          "10619:       proto_tree_add_item(rsn_sub_akms_tree, hf_ieee80211_rsn_akms_type, tvb, offset+3, 1, ENC_LITTLE_ENDIAN);",
          "10620:     }",
          "10621:     offset += 4;",
          "",
          "[Removed Lines]",
          "10618:     } else {",
          "",
          "[Added Lines]",
          "10621:       if (association_sanity_check) {",
          "10622:         guint32 akm_suite = tvb_get_ntohl(tvb, offset);",
          "10623:         if (akm_suite == 0x000FAC03 || akm_suite == 0x000FAC04 || akm_suite == 0x000FAC09) {",
          "10625:           if (association_sanity_check->rsn_first_ft_akm_suite == NULL) {",
          "10626:             association_sanity_check->rsn_first_ft_akm_suite = rsn_sub_akms_tree->last_child;",
          "10627:           }",
          "10628:         } else {",
          "10630:           if (association_sanity_check->rsn_first_non_ft_akm_suite == NULL) {",
          "10631:             association_sanity_check->rsn_first_non_ft_akm_suite = rsn_sub_akms_tree->last_child;",
          "10632:           }",
          "10633:         }",
          "10634:       }",
          "10635: } else {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "11063: static void",
          "11064: dissect_mobility_domain(proto_tree *tree, tvbuff_t *tvb, int offset,",
          "11066: {",
          "11067:   if (tag_len < 3) {",
          "11068:     proto_tree_add_string(tree, hf_ieee80211_tag_interpretation, tvb, offset, tag_len,",
          "11069:                           \"MDIE content length must be at least 3 bytes\");",
          "",
          "[Removed Lines]",
          "11065:                         guint32 tag_len)",
          "",
          "[Added Lines]",
          "11082:                         guint32 tag_len, association_sanity_check_t *association_sanity_check)",
          "11084:   if (association_sanity_check != NULL) {",
          "11085:     association_sanity_check->association_has_mobility_domain_element = 1;",
          "11086:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "11405:     next_ie = tvb_get_guint8(tvb, offset);",
          "11406:     proto_item_append_text(ti, \" :(%d:%s)\", desc_cnt, val_to_str_ext(next_ie, &tag_num_vals_ext, \"Reserved (%d)\"));",
          "11410:       break;",
          "",
          "[Removed Lines]",
          "11408:     offset_r = add_tagged_field(pinfo, sub_tree, tvb, offset, ftype, ids, G_N_ELEMENTS(ids));",
          "",
          "[Added Lines]",
          "11429:     offset_r = add_tagged_field(pinfo, sub_tree, tvb, offset, ftype, ids, G_N_ELEMENTS(ids), NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "11541:   while (tag_len > 0){",
          "11542:     tmp_sublen = tvb_get_guint8(tvb, offset + 1);",
          "11544:       break;",
          "11545:     }",
          "11546:     tag_len -= (tmp_sublen + 2);",
          "",
          "[Removed Lines]",
          "11543:     if(add_tagged_field(pinfo, tree, tvb, offset, 0, ids, G_N_ELEMENTS(ids)) == 0){",
          "",
          "[Added Lines]",
          "11564:     if(add_tagged_field(pinfo, tree, tvb, offset, 0, ids, G_N_ELEMENTS(ids), NULL) == 0){",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "11967:       s_end = offset + len;",
          "11968:       while (s_offset < s_end) {",
          "11971:         if (tlen==0)",
          "11972:           break;",
          "11973:         s_offset += tlen;",
          "",
          "[Removed Lines]",
          "11970:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype, ids, G_N_ELEMENTS(ids));",
          "",
          "[Added Lines]",
          "11991:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype, ids, G_N_ELEMENTS(ids), NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "12042:       s_end = offset + len;",
          "12043:       while (s_offset < s_end) {",
          "12046:         if (tlen==0)",
          "12047:           break;",
          "12048:         s_offset += tlen;",
          "",
          "[Removed Lines]",
          "12045:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype, ids, G_N_ELEMENTS(ids));",
          "",
          "[Added Lines]",
          "12066:         int tlen = add_tagged_field(pinfo, tree, tvb, s_offset, ftype, ids, G_N_ELEMENTS(ids), NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "13747: int",
          "13748: add_tagged_field(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset, int ftype,",
          "13750: {",
          "13751:   guint32       oui;",
          "13752:   tvbuff_t     *tag_tvb;",
          "",
          "[Removed Lines]",
          "13749:                  const guint8 *valid_element_ids, guint valid_element_ids_count)",
          "",
          "[Added Lines]",
          "13770:                  const guint8 *valid_element_ids, guint valid_element_ids_count,",
          "13771:                  association_sanity_check_t *association_sanity_check)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "14753:                     add_ff_cap_info(rep_tree, tvb, pinfo, 10);",
          "14754:                     offset += 12;",
          "14757:                     offset += (sub_length - 12);",
          "14758:                   }",
          "14759:                   break;",
          "",
          "[Removed Lines]",
          "14756:                     ieee_80211_add_tagged_parameters(tvb, offset, pinfo, rep_tree, sub_length - 12, MGT_PROBE_RESP);",
          "",
          "[Added Lines]",
          "14778:                     ieee_80211_add_tagged_parameters(tvb, offset, pinfo, rep_tree, sub_length - 12, MGT_PROBE_RESP, NULL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "14932:       }",
          "14933:       offset += 2;",
          "14936:       break;",
          "",
          "[Removed Lines]",
          "14935:       offset = dissect_rsn_ie(pinfo, tree, tvb, offset, tag_len);",
          "",
          "[Added Lines]",
          "14957:       offset = dissect_rsn_ie(pinfo, tree, tvb, offset, tag_len, association_sanity_check);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "15082:       break;",
          "15084:     case TAG_MOBILITY_DOMAIN:",
          "15086:       break;",
          "15088:     case TAG_FAST_BSS_TRANSITION:",
          "",
          "[Removed Lines]",
          "15085:       dissect_mobility_domain(tree, tvb, offset + 2, tag_len);",
          "",
          "[Added Lines]",
          "15107:       dissect_mobility_domain(tree, tvb, offset + 2, tag_len, association_sanity_check);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "16092: static void",
          "16093: ieee_80211_add_tagged_parameters(tvbuff_t *tvb, int offset, packet_info *pinfo,",
          "16095: {",
          "16096:   int next_len;",
          "16098:   while (tagged_parameters_len > 0) {",
          "16101:       break;",
          "16102:     if (next_len > tagged_parameters_len) {",
          "",
          "[Removed Lines]",
          "16094:                                   proto_tree *tree, int tagged_parameters_len, int ftype)",
          "16100:     if ((next_len=add_tagged_field (pinfo, tree, tvb, offset, ftype, NULL, 0)) == 0)",
          "",
          "[Added Lines]",
          "16116:                                   proto_tree *tree, int tagged_parameters_len, int ftype,",
          "16117:                                   association_sanity_check_t *association_sanity_check)",
          "16123:     if ((next_len=add_tagged_field (pinfo, tree, tvb, offset, ftype, NULL, 0, association_sanity_check)) == 0)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "16108:   }",
          "16109: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16134: static void",
          "16135: ieee_80211_do_association_sanity_check(packet_info *pinfo, association_sanity_check_t *sanity_check)",
          "16136: {",
          "16140:   if (sanity_check->association_has_mobility_domain_element) {",
          "16142:     if (sanity_check->rsn_first_non_ft_akm_suite != NULL) {",
          "16143:       expert_add_info_format(pinfo, sanity_check->rsn_first_non_ft_akm_suite, &ei_ieee80211_mismatched_akm_suite,",
          "16144:                              \"Non-FT AKM suite is prohibited for FT association request\");",
          "16145:     }",
          "16146:   } else {",
          "16148:     if (sanity_check->rsn_first_ft_akm_suite != NULL) {",
          "16149:       expert_add_info_format(pinfo, sanity_check->rsn_first_ft_akm_suite, &ei_ieee80211_mismatched_akm_suite,",
          "16150:                              \"FT AKM suite is prohibited for non-FT association request\");",
          "16151:     }",
          "16152:   }",
          "16153: }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "16121:   int         offset = 0;",
          "16122:   int         tagged_parameter_tree_len;",
          "16124:   ieee80211_tvb_invalid = FALSE;",
          "16126:   ti = proto_tree_add_item(tree, proto_wlan, tvb, 0, -1, ENC_NA);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16168:   association_sanity_check_t association_sanity_check;",
          "16169:   memset(&association_sanity_check, 0, sizeof(association_sanity_check));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "16140:       tagged_tree = get_tagged_parameter_tree(mgt_tree, tvb, offset,",
          "16141:                  tagged_parameter_tree_len);",
          "16142:       ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree,",
          "16144:       break;",
          "",
          "[Removed Lines]",
          "16143:           tagged_parameter_tree_len, MGT_ASSOC_REQ);",
          "",
          "[Added Lines]",
          "16190:           tagged_parameter_tree_len, MGT_ASSOC_REQ, &association_sanity_check);",
          "16191:       ieee_80211_do_association_sanity_check(pinfo, &association_sanity_check);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "16156:       tagged_tree = get_tagged_parameter_tree(mgt_tree, tvb, offset,",
          "16157:                  tagged_parameter_tree_len);",
          "16158:       ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree,",
          "16160:       break;",
          "",
          "[Removed Lines]",
          "16159:           tagged_parameter_tree_len, MGT_ASSOC_RESP);",
          "",
          "[Added Lines]",
          "16207:           tagged_parameter_tree_len, MGT_ASSOC_RESP, NULL);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "16172:       tagged_tree = get_tagged_parameter_tree(mgt_tree, tvb, offset,",
          "16173:                  tagged_parameter_tree_len);",
          "16174:       ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree,",
          "16176:       break;",
          "16178:     case MGT_REASSOC_RESP:",
          "",
          "[Removed Lines]",
          "16175:           tagged_parameter_tree_len, MGT_REASSOC_REQ);",
          "",
          "[Added Lines]",
          "16223:           tagged_parameter_tree_len, MGT_REASSOC_REQ, &association_sanity_check);",
          "16224:       ieee_80211_do_association_sanity_check(pinfo, &association_sanity_check);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "16187:       tagged_tree = get_tagged_parameter_tree(mgt_tree, tvb, offset,",
          "16188:                  tagged_parameter_tree_len);",
          "16189:       ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree,",
          "16191:       break;",
          "",
          "[Removed Lines]",
          "16190:           tagged_parameter_tree_len, MGT_REASSOC_RESP);",
          "",
          "[Added Lines]",
          "16239:           tagged_parameter_tree_len, MGT_REASSOC_RESP, NULL);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "16198:       tagged_tree = get_tagged_parameter_tree(mgt_tree, tvb, offset,",
          "16199:                  tagged_parameter_tree_len);",
          "16200:       ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree,",
          "16202:       break;",
          "16204:     case MGT_PROBE_RESP:",
          "",
          "[Removed Lines]",
          "16201:           tagged_parameter_tree_len, MGT_PROBE_REQ);",
          "",
          "[Added Lines]",
          "16250:           tagged_parameter_tree_len, MGT_PROBE_REQ, NULL);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "16212:       tagged_parameter_tree_len = tvb_reported_length_remaining(tvb, offset);",
          "16213:       tagged_tree = get_tagged_parameter_tree(mgt_tree, tvb, offset, tagged_parameter_tree_len);",
          "16215:       break;",
          "16216:     }",
          "16217:     case MGT_MEASUREMENT_PILOT:",
          "",
          "[Removed Lines]",
          "16214:       ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree, tagged_parameter_tree_len, MGT_PROBE_RESP);",
          "",
          "[Added Lines]",
          "16263:       ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree, tagged_parameter_tree_len, MGT_PROBE_RESP, NULL);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "16231:       tagged_parameter_tree_len = tvb_reported_length_remaining(tvb, offset);",
          "16232:       tagged_tree = get_tagged_parameter_tree(mgt_tree, tvb, offset, tagged_parameter_tree_len);",
          "16234:       break;",
          "16235:     }",
          "",
          "[Removed Lines]",
          "16233:       ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree, tagged_parameter_tree_len, MGT_MEASUREMENT_PILOT);",
          "",
          "[Added Lines]",
          "16282:       ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree, tagged_parameter_tree_len, MGT_MEASUREMENT_PILOT, NULL);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "16245:       tagged_tree = get_tagged_parameter_tree(mgt_tree, tvb, offset,",
          "16246:       tagged_parameter_tree_len);",
          "16247:       ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree,",
          "16249:       break;",
          "16251:     case MGT_ATIM:",
          "",
          "[Removed Lines]",
          "16248:       tagged_parameter_tree_len, MGT_BEACON);",
          "",
          "[Added Lines]",
          "16297:       tagged_parameter_tree_len, MGT_BEACON, NULL);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "16260:         tagged_tree = get_tagged_parameter_tree(mgt_tree, tvb, offset,",
          "16261:                                                 tagged_parameter_tree_len);",
          "16262:         ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree,",
          "16264:       }",
          "16265:       break;",
          "",
          "[Removed Lines]",
          "16263:                                          tagged_parameter_tree_len, MGT_DISASS);",
          "",
          "[Added Lines]",
          "16312:                                          tagged_parameter_tree_len, MGT_DISASS, NULL);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "16280:             offset,",
          "16281:             tagged_parameter_tree_len);",
          "16282:         ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree,",
          "16284:       }",
          "16285:       break;",
          "",
          "[Removed Lines]",
          "16283:         tagged_parameter_tree_len, MGT_AUTHENTICATION);",
          "",
          "[Added Lines]",
          "16332:         tagged_parameter_tree_len, MGT_AUTHENTICATION, NULL);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "16293:         tagged_tree = get_tagged_parameter_tree(mgt_tree, tvb, offset,",
          "16294:                                                 tagged_parameter_tree_len);",
          "16295:         ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree,",
          "16297:       }",
          "16298:       break;",
          "",
          "[Removed Lines]",
          "16296:                                          tagged_parameter_tree_len, MGT_DEAUTHENTICATION);",
          "",
          "[Added Lines]",
          "16345:                                          tagged_parameter_tree_len, MGT_DEAUTHENTICATION, NULL);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "16313:         tagged_tree = get_tagged_parameter_tree(mgt_tree, tvb, offset,",
          "16314:           tagged_parameter_tree_len);",
          "16315:         ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree,",
          "16317:       }",
          "16318:       break;",
          "16319:     }",
          "",
          "[Removed Lines]",
          "16316:           tagged_parameter_tree_len, MGT_ACTION);",
          "",
          "[Added Lines]",
          "16365:           tagged_parameter_tree_len, MGT_ACTION, NULL);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "16334:         tagged_tree = get_tagged_parameter_tree(mgt_tree, tvb, offset,",
          "16335:           tagged_parameter_tree_len);",
          "16336:         ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree,",
          "16338:       }",
          "16339:       break;",
          "16340:     }",
          "",
          "[Removed Lines]",
          "16337:           tagged_parameter_tree_len, MGT_ACTION_NO_ACK);",
          "",
          "[Added Lines]",
          "16386:           tagged_parameter_tree_len, MGT_ACTION_NO_ACK, NULL);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "18614:       keydes_tree = proto_item_add_subtree(ti, ett_wlan_rsna_eapol_keydes_data);",
          "18615:       ieee_80211_add_tagged_parameters(tvb, offset, pinfo, keydes_tree,",
          "18616:                                        tvb_reported_length_remaining(tvb, offset),",
          "18618:     }",
          "18619:   }",
          "18620:   return tvb_captured_length(tvb);",
          "",
          "[Removed Lines]",
          "18617:                                        -1);",
          "",
          "[Added Lines]",
          "18666:                                        -1, NULL);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "18852:       tagged_tree = get_tagged_parameter_tree(tree, tvb, offset,",
          "18853:                                               tagged_parameter_tree_len);",
          "18854:       ieee_80211_add_tagged_parameters(tvb, offset, pinfo, tagged_tree,",
          "18856:     }",
          "18857:     break;",
          "18858:   }",
          "",
          "[Removed Lines]",
          "18855:                                        tagged_parameter_tree_len, -1);",
          "",
          "[Added Lines]",
          "18904:                                        tagged_parameter_tree_len, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "27125:     { &ei_ieee80211_fcs,",
          "27126:       { \"wlan.fcs.bad_checksum\", PI_MALFORMED, PI_ERROR,",
          "27127:         NULL, EXPFILL }},",
          "27128:   };",
          "27130:   expert_module_t *expert_ieee80211;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27178:     { &ei_ieee80211_mismatched_akm_suite,",
          "27179:       { \"wlan.rsn.akms.mismatched\", PI_PROTOCOL, PI_ERROR,",
          "27180:         NULL, EXPFILL }},",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ieee80211.h||epan/dissectors/packet-ieee80211.h": [
          "File: epan/dissectors/packet-ieee80211.h -> epan/dissectors/packet-ieee80211.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: extern \"C\" {",
          "34: void dissect_wifi_p2p_ie(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb,",
          "35:                          int offset, gint size);",
          "36: int dissect_wifi_p2p_public_action(packet_info *pinfo, proto_tree *tree,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: typedef struct {",
          "35:   int association_has_mobility_domain_element;",
          "36:   proto_node *rsn_first_ft_akm_suite;",
          "37:   proto_node *rsn_first_non_ft_akm_suite;",
          "38: } association_sanity_check_t;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: int add_tagged_field(packet_info *pinfo, proto_tree *tree,",
          "46:                             tvbuff_t *tvb, int offset, int ftype,",
          "47:                             const guint8 *valid_element_ids,",
          "50: #define MAX_SSID_LEN    32",
          "51: #define MAX_PROTECT_LEN 10",
          "",
          "[Removed Lines]",
          "48:                             guint valid_element_ids_count);",
          "",
          "[Added Lines]",
          "54:                             guint valid_element_ids_count,",
          "55:                             association_sanity_check_t *association_sanity_check);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c427376579a426cdb8ef3212f7ddfd7ab5a80b3",
      "candidate_info": {
        "commit_hash": "3c427376579a426cdb8ef3212f7ddfd7ab5a80b3",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/3c427376579a426cdb8ef3212f7ddfd7ab5a80b3",
        "files": [
          "epan/dissectors/packet-ieee80211.c"
        ],
        "message": "802.11: Use proto_tree_add_bitmask\n\nChange-Id: If46ccea1c58448d2dacad07fb3171e423babe59f\nReviewed-on: https://code.wireshark.org/review/19562\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c": [
          "File: epan/dissectors/packet-ieee80211.c -> epan/dissectors/packet-ieee80211.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4183: static int hf_ieee80211_hta_cc = -1;",
          "4185: static int hf_ieee80211_hta_ext_chan_offset = -1;",
          "4186: static int hf_ieee80211_hta_rec_tx_width = -1;",
          "4187: static int hf_ieee80211_hta_rifs_mode = -1;",
          "",
          "[Removed Lines]",
          "4184: static int hf_ieee80211_hta_cap = -1;",
          "",
          "[Added Lines]",
          "4184: static int hf_ieee80211_hta_cap1 = -1;",
          "4185: static int hf_ieee80211_hta_cap2 = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4612: static int hf_ieee80211_ff_bic_nabft = -1;",
          "4613: static int hf_ieee80211_ff_bic_pcp = -1;",
          "4614: static int hf_ieee80211_ff_bic_reserved = -1;",
          "4615: static int hf_ieee80211_ff_dmg_params = -1;",
          "4616: static int hf_ieee80211_ff_dmg_params_bss = -1;",
          "4617: static int hf_ieee80211_ff_dmg_params_cbap_only = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4616: static const int *ieee80211_ff_bic_fields[] = {",
          "4617:   &hf_ieee80211_ff_bic_cc_present,",
          "4618:   &hf_ieee80211_ff_bic_discovery_mode,",
          "4619:   &hf_ieee80211_ff_bic_next_beacon,",
          "4620:   &hf_ieee80211_ff_bic_ati_present,",
          "4621:   &hf_ieee80211_ff_bic_abft_len,",
          "4622:   &hf_ieee80211_ff_bic_fss,",
          "4623:   &hf_ieee80211_ff_bic_is_resp,",
          "4624:   &hf_ieee80211_ff_bic_next_abft,",
          "4625:   &hf_ieee80211_ff_bic_frag_txss,",
          "4626:   &hf_ieee80211_ff_bic_txss_span,",
          "4627:   &hf_ieee80211_ff_bic_NBI_abft,",
          "4628:   &hf_ieee80211_ff_bic_abft_count,",
          "4629:   &hf_ieee80211_ff_bic_nabft,",
          "4630:   &hf_ieee80211_ff_bic_pcp,",
          "4631:   &hf_ieee80211_ff_bic_reserved,",
          "4632:   NULL",
          "4633: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4677: static int hf_ieee80211_tag_rxss_length = -1;",
          "4678: static int hf_ieee80211_tag_reciprocity = -1;",
          "4679: static int hf_ieee80211_tag_max_ampdu_exp = -1;",
          "4681: static int hf_ieee80211_tag_ba_flow_control = -1;",
          "4682: static int hf_ieee80211_tag_max_sc_rx_mcs = -1;",
          "4683: static int hf_ieee80211_tag_max_ofdm_rx_mcs = -1;",
          "",
          "[Removed Lines]",
          "4680: static int hf_ieee80211_tag_min_mpdu_sapcing = -1;",
          "",
          "[Added Lines]",
          "4699: static int hf_ieee80211_tag_min_mpdu_spacing = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6867: static guint",
          "6868: add_ff_cap_info(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_, int offset)",
          "6869: {",
          "6881:   if ((tvb_get_letohs(tvb, offset) & 0x0001) != 0) {",
          "6885:   } else {",
          "6889:   }",
          "6913:   return 2;",
          "6914: }",
          "",
          "[Removed Lines]",
          "6870:   proto_item *cap_item;",
          "6871:   proto_tree *cap_tree;",
          "6873:   cap_item = proto_tree_add_item(tree, hf_ieee80211_ff_capture, tvb, offset, 2,",
          "6874:                                  ENC_LITTLE_ENDIAN);",
          "6875:   cap_tree = proto_item_add_subtree(cap_item, ett_cap_tree);",
          "6877:   proto_tree_add_item(cap_tree, hf_ieee80211_ff_cf_ess, tvb, offset, 2,",
          "6878:                       ENC_LITTLE_ENDIAN);",
          "6879:   proto_tree_add_item(cap_tree, hf_ieee80211_ff_cf_ibss, tvb, offset, 2,",
          "6880:                       ENC_LITTLE_ENDIAN);",
          "6883:     proto_tree_add_item(cap_tree, hf_ieee80211_ff_cf_ap_poll, tvb, offset, 2,",
          "6884:                         ENC_LITTLE_ENDIAN);",
          "6887:     proto_tree_add_item(cap_tree, hf_ieee80211_ff_cf_sta_poll, tvb, offset, 2,",
          "6888:                         ENC_LITTLE_ENDIAN);",
          "6891:   proto_tree_add_item(cap_tree, hf_ieee80211_ff_cf_privacy, tvb, offset, 2,",
          "6892:                       ENC_LITTLE_ENDIAN);",
          "6893:   proto_tree_add_item(cap_tree, hf_ieee80211_ff_cf_preamble, tvb, offset, 2,",
          "6894:                       ENC_LITTLE_ENDIAN);",
          "6895:   proto_tree_add_item(cap_tree, hf_ieee80211_ff_cf_pbcc, tvb, offset, 2,",
          "6896:                       ENC_LITTLE_ENDIAN);",
          "6897:   proto_tree_add_item(cap_tree, hf_ieee80211_ff_cf_agility, tvb, offset, 2,",
          "6898:                       ENC_LITTLE_ENDIAN);",
          "6899:   proto_tree_add_item(cap_tree, hf_ieee80211_ff_cf_spec_man, tvb, offset, 2,",
          "6900:                       ENC_LITTLE_ENDIAN);",
          "6901:   proto_tree_add_item(cap_tree, hf_ieee80211_ff_short_slot_time, tvb, offset,",
          "6902:                       2, ENC_LITTLE_ENDIAN);",
          "6903:   proto_tree_add_item(cap_tree, hf_ieee80211_ff_cf_apsd, tvb, offset, 2,",
          "6904:                       ENC_LITTLE_ENDIAN);",
          "6905:   proto_tree_add_item(cap_tree, hf_ieee80211_ff_radio_measurement, tvb, offset, 2,",
          "6906:                       ENC_LITTLE_ENDIAN);",
          "6907:   proto_tree_add_item(cap_tree, hf_ieee80211_ff_dsss_ofdm, tvb, offset, 2,",
          "6908:                       ENC_LITTLE_ENDIAN);",
          "6909:   proto_tree_add_item(cap_tree, hf_ieee80211_ff_cf_del_blk_ack, tvb, offset, 2,",
          "6910:                       ENC_LITTLE_ENDIAN);",
          "6911:   proto_tree_add_item(cap_tree, hf_ieee80211_ff_cf_imm_blk_ack, tvb, offset, 2,",
          "6912:                       ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "6889:   static const int *ieee80211_ap_fields[] = {",
          "6890:     &hf_ieee80211_ff_cf_ess,",
          "6891:     &hf_ieee80211_ff_cf_ibss,",
          "6892:     &hf_ieee80211_ff_cf_ap_poll,",
          "6893:     &hf_ieee80211_ff_cf_privacy,",
          "6894:     &hf_ieee80211_ff_cf_preamble,",
          "6895:     &hf_ieee80211_ff_cf_pbcc,",
          "6896:     &hf_ieee80211_ff_cf_agility,",
          "6897:     &hf_ieee80211_ff_cf_spec_man,",
          "6898:     &hf_ieee80211_ff_short_slot_time,",
          "6899:     &hf_ieee80211_ff_cf_apsd,",
          "6900:     &hf_ieee80211_ff_radio_measurement,",
          "6901:     &hf_ieee80211_ff_dsss_ofdm,",
          "6902:     &hf_ieee80211_ff_cf_del_blk_ack,",
          "6903:     &hf_ieee80211_ff_cf_imm_blk_ack,",
          "6904:     NULL",
          "6905:   };",
          "6907:   static const int *ieee80211_sta_fields[] = {",
          "6908:     &hf_ieee80211_ff_cf_ess,",
          "6909:     &hf_ieee80211_ff_cf_ibss,",
          "6910:     &hf_ieee80211_ff_cf_sta_poll,",
          "6911:     &hf_ieee80211_ff_cf_privacy,",
          "6912:     &hf_ieee80211_ff_cf_preamble,",
          "6913:     &hf_ieee80211_ff_cf_pbcc,",
          "6914:     &hf_ieee80211_ff_cf_agility,",
          "6915:     &hf_ieee80211_ff_cf_spec_man,",
          "6916:     &hf_ieee80211_ff_short_slot_time,",
          "6917:     &hf_ieee80211_ff_cf_apsd,",
          "6918:     &hf_ieee80211_ff_radio_measurement,",
          "6919:     &hf_ieee80211_ff_dsss_ofdm,",
          "6920:     &hf_ieee80211_ff_cf_del_blk_ack,",
          "6921:     &hf_ieee80211_ff_cf_imm_blk_ack,",
          "6922:     NULL",
          "6923:   };",
          "6927:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_capture,",
          "6928:                                     ett_cap_tree, ieee80211_ap_fields,",
          "6929:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "6932:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_capture,",
          "6933:                                     ett_cap_tree, ieee80211_sta_fields,",
          "6934:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7343: {",
          "7344:   proto_item *mimo_item;",
          "7345:   proto_tree *mimo_tree;",
          "7347:   mimo_item = proto_tree_add_item(tree, hf_ieee80211_ff_mimo_cntrl, tvb,",
          "7348:                                   offset, 6, ENC_NA);",
          "7349:   mimo_tree = proto_item_add_subtree(mimo_item, ett_ff_mimo_cntrl);",
          "7369:   offset += 2;",
          "7370:   proto_tree_add_item(mimo_tree, hf_ieee80211_ff_mimo_cntrl_sounding_timestamp,",
          "7371:                       tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "7351:   proto_tree_add_item(mimo_tree, hf_ieee80211_ff_mimo_cntrl_nc_index, tvb,",
          "7352:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "7353:   proto_tree_add_item(mimo_tree, hf_ieee80211_ff_mimo_cntrl_nr_index, tvb,",
          "7354:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "7355:   proto_tree_add_item(mimo_tree, hf_ieee80211_ff_mimo_cntrl_channel_width, tvb,",
          "7356:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "7357:   proto_tree_add_item(mimo_tree, hf_ieee80211_ff_mimo_cntrl_grouping, tvb,",
          "7358:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "7359:   proto_tree_add_item(mimo_tree, hf_ieee80211_ff_mimo_cntrl_coefficient_size,",
          "7360:                       tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "7361:   proto_tree_add_item(mimo_tree, hf_ieee80211_ff_mimo_cntrl_codebook_info, tvb,",
          "7362:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "7363:   proto_tree_add_item(mimo_tree,",
          "7364:                       hf_ieee80211_ff_mimo_cntrl_remaining_matrix_segment, tvb,",
          "7365:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "7366:   proto_tree_add_item(mimo_tree, hf_ieee80211_ff_mimo_cntrl_reserved, tvb,",
          "7367:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "7370:   static const int *ieee80211_mimo_fields[] = {",
          "7371:     &hf_ieee80211_ff_mimo_cntrl_nc_index,",
          "7372:     &hf_ieee80211_ff_mimo_cntrl_nr_index,",
          "7373:     &hf_ieee80211_ff_mimo_cntrl_channel_width,",
          "7374:     &hf_ieee80211_ff_mimo_cntrl_grouping,",
          "7375:     &hf_ieee80211_ff_mimo_cntrl_coefficient_size,",
          "7376:     &hf_ieee80211_ff_mimo_cntrl_codebook_info,",
          "7377:     &hf_ieee80211_ff_mimo_cntrl_remaining_matrix_segment,",
          "7378:     &hf_ieee80211_ff_mimo_cntrl_reserved,",
          "7379:     NULL",
          "7380:   };",
          "7386:   proto_tree_add_bitmask_list(mimo_tree, tvb, offset, 2, ieee80211_mimo_fields, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7495: static guint",
          "7496: add_ff_schedule_info(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_, int offset)",
          "7497: {",
          "7507:   if (tvb_get_letohs(tvb, offset) & 0x0001) {",
          "7512:   }",
          "7514:   return 2;",
          "",
          "[Removed Lines]",
          "7498:   proto_item *sched_item;",
          "7499:   proto_tree *sched_tree;",
          "7501:   sched_item = proto_tree_add_item(tree, hf_ieee80211_sched_info, tvb, offset,",
          "7502:                                    2, ENC_LITTLE_ENDIAN);",
          "7503:   sched_tree = proto_item_add_subtree(sched_item, ett_sched_tree);",
          "7505:   proto_tree_add_item(sched_tree, hf_ieee80211_sched_info_agg, tvb, offset, 2,",
          "7506:                       ENC_LITTLE_ENDIAN);",
          "7508:     proto_tree_add_item(sched_tree, hf_ieee80211_sched_info_tsid, tvb, offset,",
          "7509:                         2, ENC_LITTLE_ENDIAN);",
          "7510:     proto_tree_add_item(sched_tree, hf_ieee80211_sched_info_dir, tvb, offset,",
          "7511:                         2, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "7516:   static const int *ieee80211_schedule_info_fields1[] = {",
          "7517:     &hf_ieee80211_sched_info_agg,",
          "7518:     NULL",
          "7519:   };",
          "7520:   static const int *ieee80211_schedule_info_fields2[] = {",
          "7521:     &hf_ieee80211_sched_info_agg,",
          "7522:     &hf_ieee80211_sched_info_tsid,",
          "7523:     &hf_ieee80211_sched_info_dir,",
          "7524:     NULL",
          "7525:   };",
          "7528:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_sched_info,",
          "7529:                                     ett_sched_tree, ieee80211_schedule_info_fields2,",
          "7530:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "7531:   } else {",
          "7532:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_sched_info,",
          "7533:                                     ett_sched_tree, ieee80211_schedule_info_fields1,",
          "7534:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8178:   guint8 mode;",
          "8179:   gint   left;",
          "8181:   offset += add_ff_dialog_token(tree, tvb, pinfo, offset);",
          "8183:   mode = tvb_get_guint8(tvb, offset);",
          "8194:   offset += 1;",
          "8196:   proto_tree_add_item(tree, hf_ieee80211_ff_disassoc_timer, tvb, offset, 2,",
          "",
          "[Removed Lines]",
          "8184:   proto_tree_add_item(tree, hf_ieee80211_ff_request_mode_pref_cand,",
          "8185:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "8186:   proto_tree_add_item(tree, hf_ieee80211_ff_request_mode_abridged,",
          "8187:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "8188:   proto_tree_add_item(tree, hf_ieee80211_ff_request_mode_disassoc_imminent,",
          "8189:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "8190:   proto_tree_add_item(tree, hf_ieee80211_ff_request_mode_bss_term_included,",
          "8191:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "8192:   proto_tree_add_item(tree, hf_ieee80211_ff_request_mode_ess_disassoc_imminent,",
          "8193:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "8204:   static const int *ieee80211_ff_request_flags[] = {",
          "8205:     &hf_ieee80211_ff_request_mode_pref_cand,",
          "8206:     &hf_ieee80211_ff_request_mode_abridged,",
          "8207:     &hf_ieee80211_ff_request_mode_disassoc_imminent,",
          "8208:     &hf_ieee80211_ff_request_mode_bss_term_included,",
          "8209:     &hf_ieee80211_ff_request_mode_ess_disassoc_imminent,",
          "8210:     NULL",
          "8211:   };",
          "8216:   proto_tree_add_bitmask_list(tree, tvb, offset, 1, ieee80211_ff_request_flags, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8545: static guint",
          "8546: add_ff_beacon_interval_ctrl(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_, int offset)",
          "8547: {",
          "8566:   return 6;",
          "8567: }",
          "8569: static guint",
          "8570: add_ff_beamforming_ctrl(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_, int offset, gboolean isGrant)",
          "8571: {",
          "8574:   guint16 bf_field = tvb_get_letohs(tvb, offset);",
          "8575:   gboolean isInit = (bf_field & 0x2) >> 1;",
          "8576:   gboolean isResp = (bf_field & 0x4) >> 2;",
          "8580:   if((isInit==TRUE) && (isResp==TRUE) && isGrant) {",
          "8584:   } else {",
          "8588:   }",
          "8589:   return 2;",
          "8590: }",
          "",
          "[Removed Lines]",
          "8548:   proto_item *bic_item = proto_tree_add_item(tree, hf_ieee80211_ff_bic, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8549:   proto_tree *bic_tree = proto_item_add_subtree(bic_item, ett_bic_tree);",
          "8551:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_cc_present, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8552:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_discovery_mode, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8553:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_next_beacon, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8554:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_ati_present, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8555:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_abft_len, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8556:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_fss, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8557:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_is_resp, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8558:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_next_abft, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8559:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_frag_txss, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8560:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_txss_span, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8561:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_NBI_abft, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8562:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_abft_count, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8563:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_nabft, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8564:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_pcp, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8565:   proto_tree_add_item(bic_tree, hf_ieee80211_ff_bic_reserved, tvb, offset, 6, ENC_LITTLE_ENDIAN);",
          "8572:   proto_item *bf_item = proto_tree_add_item(tree, hf_ieee80211_ff_bf, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "8573:   proto_tree *bf_tree = proto_item_add_subtree(bf_item, ett_bf_tree);",
          "8577:   proto_tree_add_item(bf_tree, hf_ieee80211_ff_bf_train, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "8578:   proto_tree_add_item(bf_tree, hf_ieee80211_ff_bf_is_init, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "8579:   proto_tree_add_item(bf_tree, hf_ieee80211_ff_bf_is_resp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "8581:     proto_tree_add_item(bf_tree, hf_ieee80211_ff_bf_num_sectors, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "8582:     proto_tree_add_item(bf_tree, hf_ieee80211_ff_bf_num_rx_dmg_ants, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "8583:     proto_tree_add_item(bf_tree, hf_ieee80211_ff_bf_b12b15, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "8585:     proto_tree_add_item(bf_tree, hf_ieee80211_ff_bf_rxss_len, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "8586:     proto_tree_add_item(bf_tree, hf_ieee80211_ff_bf_rxss_rate, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "8587:     proto_tree_add_item(bf_tree, hf_ieee80211_ff_bf_b10b15, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "8571:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_bic,",
          "8572:                                     ett_bic_tree, ieee80211_ff_bic_fields,",
          "8573:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "8584:   static const int *ieee80211_ff_beamforming_ctrl[] = {",
          "8585:     &hf_ieee80211_ff_bf_train,",
          "8586:     &hf_ieee80211_ff_bf_is_init,",
          "8587:     &hf_ieee80211_ff_bf_is_resp,",
          "8588:     &hf_ieee80211_ff_bf_rxss_len,",
          "8589:     &hf_ieee80211_ff_bf_rxss_rate,",
          "8590:     &hf_ieee80211_ff_bf_b10b15,",
          "8591:     NULL",
          "8592:   };",
          "8594:   static const int *ieee80211_ff_beamforming_ctrl_grant[] = {",
          "8595:     &hf_ieee80211_ff_bf_train,",
          "8596:     &hf_ieee80211_ff_bf_is_init,",
          "8597:     &hf_ieee80211_ff_bf_is_resp,",
          "8598:     &hf_ieee80211_ff_bf_num_sectors,",
          "8599:     &hf_ieee80211_ff_bf_num_rx_dmg_ants,",
          "8600:     &hf_ieee80211_ff_bf_b12b15,",
          "8601:     NULL",
          "8602:   };",
          "8605:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_bf,",
          "8606:                                     ett_bf_tree, ieee80211_ff_beamforming_ctrl_grant,",
          "8607:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "8609:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_bf,",
          "8610:                                     ett_bf_tree, ieee80211_ff_beamforming_ctrl,",
          "8611:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "8592: static guint",
          "8593: add_ff_dynamic_allocation(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_, int offset)",
          "8594: {",
          "8603:   return 5;",
          "8604: }",
          "8606: static guint",
          "8607: add_ff_beamformed_link(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_, int offset)",
          "8608: {",
          "8614:   return 1;",
          "8615: }",
          "8617: static guint",
          "8618: add_ff_BRP_request(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_, int offset)",
          "8619: {",
          "8634:   return 4;",
          "8635: }",
          "8637: static guint",
          "8638: add_ff_sector_sweep_feedback_from_iss(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_, int offset)",
          "8639: {",
          "8649:   return 3;",
          "8650: }",
          "8652: static guint",
          "8653: add_ff_sector_sweep_feedback_to_iss(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_, int offset)",
          "8654: {",
          "8663:   return 3;",
          "8664: }",
          "8666: static guint",
          "8667: add_ff_sector_sweep(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_, int offset)",
          "8668: {",
          "8677:   return 3;",
          "8678: }",
          "8680: static guint",
          "8681: add_ff_dmg_params(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_, int offset)",
          "8682: {",
          "8691:   return 1;",
          "8692: }",
          "",
          "[Removed Lines]",
          "8595:   proto_item *dynamic_alloc_item = proto_tree_add_item(tree, hf_ieee80211_ff_dynamic_allocation, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "8596:   proto_tree *dynamic_alloc_tree = proto_item_add_subtree(dynamic_alloc_item, ett_dynamic_alloc_tree);",
          "8597:   proto_tree_add_item(dynamic_alloc_tree, hf_ieee80211_ff_TID, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "8598:   proto_tree_add_item(dynamic_alloc_tree, hf_ieee80211_ff_alloc_type, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "8599:   proto_tree_add_item(dynamic_alloc_tree, hf_ieee80211_ff_src_aid, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "8600:   proto_tree_add_item(dynamic_alloc_tree, hf_ieee80211_ff_dest_aid, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "8601:   proto_tree_add_item(dynamic_alloc_tree, hf_ieee80211_ff_alloc_duration, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "8602:   proto_tree_add_item(dynamic_alloc_tree, hf_ieee80211_ff_b39, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "8609:   proto_item *blm_item = proto_tree_add_item(tree, hf_ieee80211_ff_blm, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "8610:   proto_tree *blm_tree = proto_item_add_subtree(blm_item, ett_blm_tree);",
          "8611:   proto_tree_add_item(blm_tree, hf_ieee80211_ff_blm_unit_index, tvb, offset, 1, ENC_NA);",
          "8612:   proto_tree_add_item(blm_tree, hf_ieee80211_ff_blm_maint_value, tvb, offset, 1, ENC_NA);",
          "8613:   proto_tree_add_item(blm_tree, hf_ieee80211_ff_blm_is_master, tvb, offset, 1, ENC_NA);",
          "8620:   proto_item *brp_req_item = proto_tree_add_item(tree, hf_ieee80211_ff_brp, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "8621:   proto_tree *brp_req_tree = proto_item_add_subtree(brp_req_item, ett_brp_tree);",
          "8623:   proto_tree_add_item(brp_req_tree, hf_ieee80211_ff_brp_L_RX, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "8624:   proto_tree_add_item(brp_req_tree, hf_ieee80211_ff_brp_TX_TRN_REQ, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "8625:   proto_tree_add_item(brp_req_tree, hf_ieee80211_ff_brp_MID_REQ, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "8626:   proto_tree_add_item(brp_req_tree, hf_ieee80211_ff_brp_BC_REQ, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "8627:   proto_tree_add_item(brp_req_tree, hf_ieee80211_ff_brp_MID_GRANT, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "8628:   proto_tree_add_item(brp_req_tree, hf_ieee80211_ff_brp_BC_GRANT, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "8629:   proto_tree_add_item(brp_req_tree, hf_ieee80211_ff_brp_chan_FBCK_CAP, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "8630:   proto_tree_add_item(brp_req_tree, hf_ieee80211_ff_brp_tx_sector, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "8631:   proto_tree_add_item(brp_req_tree, hf_ieee80211_ff_brp_other_aid, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "8632:   proto_tree_add_item(brp_req_tree, hf_ieee80211_ff_brp_tx_antenna, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "8633:   proto_tree_add_item(brp_req_tree, hf_ieee80211_ff_brp_reserved, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "8640:   proto_item *sswf_item = proto_tree_add_item(tree, hf_ieee80211_ff_sswf, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8641:   proto_tree *sswf_tree = proto_item_add_subtree(sswf_item, ett_sswf_tree);",
          "8643:   proto_tree_add_item(sswf_tree, hf_ieee80211_ff_sswf_total_sectors, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8644:   proto_tree_add_item(sswf_tree, hf_ieee80211_ff_sswf_num_rx_dmg_ants, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8645:   proto_tree_add_item(sswf_tree, hf_ieee80211_ff_sswf_reserved1, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8646:   proto_tree_add_item(sswf_tree, hf_ieee80211_ff_sswf_poll_required, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8647:   proto_tree_add_item(sswf_tree, hf_ieee80211_ff_sswf_reserved2, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8655:   proto_item *sswf_item = proto_tree_add_item(tree, hf_ieee80211_ff_sswf, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8656:   proto_tree *sswf_tree = proto_item_add_subtree(sswf_item, ett_sswf_tree);",
          "8658:   proto_tree_add_item(sswf_tree, hf_ieee80211_ff_sswf_sector_select, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8659:   proto_tree_add_item(sswf_tree, hf_ieee80211_ff_sswf_dmg_antenna_select, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8660:   proto_tree_add_item(sswf_tree, hf_ieee80211_ff_sswf_snr_report, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8661:   proto_tree_add_item(sswf_tree, hf_ieee80211_ff_sswf_poll_required, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8662:   proto_tree_add_item(sswf_tree, hf_ieee80211_ff_sswf_reserved2, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8669:   proto_item *ssw_item = proto_tree_add_item(tree, hf_ieee80211_ff_ssw, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8670:   proto_tree *ssw_tree = proto_item_add_subtree(ssw_item, ett_ssw_tree);",
          "8672:   proto_tree_add_item(ssw_tree, hf_ieee80211_ff_ssw_direction, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8673:   proto_tree_add_item(ssw_tree, hf_ieee80211_ff_ssw_cdown, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8674:   proto_tree_add_item(ssw_tree, hf_ieee80211_ff_ssw_sector_id, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8675:   proto_tree_add_item(ssw_tree, hf_ieee80211_ff_ssw_dmg_ant_id, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8676:   proto_tree_add_item(ssw_tree, hf_ieee80211_ff_ssw_rxss_len, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "8683:   proto_item *dmg_params_item = proto_tree_add_item(tree, hf_ieee80211_ff_dmg_params, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "8684:   proto_tree *dmg_params_tree = proto_item_add_subtree(dmg_params_item, ett_dmg_params_tree);",
          "8686:   proto_tree_add_item(dmg_params_tree, hf_ieee80211_ff_dmg_params_bss, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "8687:   proto_tree_add_item(dmg_params_tree, hf_ieee80211_ff_dmg_params_cbap_only, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "8688:   proto_tree_add_item(dmg_params_tree, hf_ieee80211_ff_dmg_params_cbap_src, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "8689:   proto_tree_add_item(dmg_params_tree, hf_ieee80211_ff_dmg_params_privacy, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "8690:   proto_tree_add_item(dmg_params_tree, hf_ieee80211_ff_dmg_params_policy, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "8619:   static const int *ieee80211_ff_dynamic_allocation[] = {",
          "8620:     &hf_ieee80211_ff_TID,",
          "8621:     &hf_ieee80211_ff_alloc_type,",
          "8622:     &hf_ieee80211_ff_src_aid,",
          "8623:     &hf_ieee80211_ff_dest_aid,",
          "8624:     &hf_ieee80211_ff_alloc_duration,",
          "8625:     &hf_ieee80211_ff_b39,",
          "8626:     NULL",
          "8627:   };",
          "8629:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_dynamic_allocation,",
          "8630:                                     ett_dynamic_alloc_tree, ieee80211_ff_dynamic_allocation,",
          "8631:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "8639:   static const int *ieee80211_ff_beamformed_link[] = {",
          "8640:     &hf_ieee80211_ff_blm_unit_index,",
          "8641:     &hf_ieee80211_ff_blm_maint_value,",
          "8642:     &hf_ieee80211_ff_blm_is_master,",
          "8643:     NULL",
          "8644:   };",
          "8646:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_blm,",
          "8647:                                     ett_blm_tree, ieee80211_ff_beamformed_link,",
          "8648:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "8655:   static const int *ieee80211_ff_BRP_request[] = {",
          "8656:     &hf_ieee80211_ff_brp_L_RX,",
          "8657:     &hf_ieee80211_ff_brp_TX_TRN_REQ,",
          "8658:     &hf_ieee80211_ff_brp_MID_REQ,",
          "8659:     &hf_ieee80211_ff_brp_BC_REQ,",
          "8660:     &hf_ieee80211_ff_brp_MID_GRANT,",
          "8661:     &hf_ieee80211_ff_brp_BC_GRANT,",
          "8662:     &hf_ieee80211_ff_brp_chan_FBCK_CAP,",
          "8663:     &hf_ieee80211_ff_brp_tx_sector,",
          "8664:     &hf_ieee80211_ff_brp_other_aid,",
          "8665:     &hf_ieee80211_ff_brp_tx_antenna,",
          "8666:     &hf_ieee80211_ff_brp_reserved,",
          "8667:     NULL",
          "8668:   };",
          "8670:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_brp,",
          "8671:                                     ett_brp_tree, ieee80211_ff_BRP_request,",
          "8672:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "8679:   static const int *ieee80211_ff_sector_sweep_feedback_from_iss[] = {",
          "8680:     &hf_ieee80211_ff_sswf_total_sectors,",
          "8681:     &hf_ieee80211_ff_sswf_num_rx_dmg_ants,",
          "8682:     &hf_ieee80211_ff_sswf_reserved1,",
          "8683:     &hf_ieee80211_ff_sswf_poll_required,",
          "8684:     &hf_ieee80211_ff_sswf_reserved2,",
          "8685:     NULL",
          "8686:   };",
          "8688:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_sswf,",
          "8689:                                     ett_sswf_tree, ieee80211_ff_sector_sweep_feedback_from_iss,",
          "8690:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "8697:   static const int *ieee80211_ff_sector_sweep_feedback_to_iss[] = {",
          "8698:     &hf_ieee80211_ff_sswf_sector_select,",
          "8699:     &hf_ieee80211_ff_sswf_dmg_antenna_select,",
          "8700:     &hf_ieee80211_ff_sswf_snr_report,",
          "8701:     &hf_ieee80211_ff_sswf_poll_required,",
          "8702:     &hf_ieee80211_ff_sswf_reserved2,",
          "8703:     NULL",
          "8704:   };",
          "8706:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_sswf,",
          "8707:                                     ett_sswf_tree, ieee80211_ff_sector_sweep_feedback_to_iss,",
          "8708:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "8715:   static const int *ieee80211_ff_sector_sweep[] = {",
          "8716:     &hf_ieee80211_ff_ssw_direction,",
          "8717:     &hf_ieee80211_ff_ssw_cdown,",
          "8718:     &hf_ieee80211_ff_ssw_sector_id,",
          "8719:     &hf_ieee80211_ff_ssw_dmg_ant_id,",
          "8720:     &hf_ieee80211_ff_ssw_rxss_len,",
          "8721:     NULL",
          "8722:   };",
          "8724:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_ssw,",
          "8725:                                     ett_ssw_tree, ieee80211_ff_sector_sweep,",
          "8726:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "8733:   static const int *ieee80211_ff_dmg_params[] = {",
          "8734:     &hf_ieee80211_ff_dmg_params_bss,",
          "8735:     &hf_ieee80211_ff_dmg_params_cbap_only,",
          "8736:     &hf_ieee80211_ff_dmg_params_cbap_src,",
          "8737:     &hf_ieee80211_ff_dmg_params_privacy,",
          "8738:     &hf_ieee80211_ff_dmg_params_policy,",
          "8739:     NULL",
          "8740:   };",
          "8742:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_dmg_params,",
          "8743:                                     ett_dmg_params_tree, ieee80211_ff_dmg_params,",
          "8744:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "8843:   int tag_len = tvb_reported_length(tvb);",
          "8844:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "8845:   int offset = 0;",
          "8847:   if (tag_len < 2) {",
          "8848:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag length must be 2\");",
          "8849:     return 1;",
          "8850:   }",
          "8859:   return tvb_captured_length(tvb);",
          "8860: }",
          "",
          "[Removed Lines]",
          "8852:   proto_tree_add_item(tree, hf_ieee80211_tag_relay_support, tvb, offset, 1, ENC_NA);",
          "8853:   proto_tree_add_item(tree, hf_ieee80211_tag_relay_use, tvb, offset, 1, ENC_NA);",
          "8854:   proto_tree_add_item(tree, hf_ieee80211_tag_relay_permission, tvb, offset, 1, ENC_NA);",
          "8855:   proto_tree_add_item(tree, hf_ieee80211_tag_AC_power, tvb, offset, 1, ENC_NA);",
          "8856:   proto_tree_add_item(tree, hf_ieee80211_tag_relay_prefer, tvb, offset, 1, ENC_NA);",
          "8857:   proto_tree_add_item(tree, hf_ieee80211_tag_duplex, tvb, offset, 1, ENC_NA);",
          "8858:   proto_tree_add_item(tree, hf_ieee80211_tag_cooperation, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "8900:   static const int *ieee80211_tag_relay_capabilities[] = {",
          "8901:     &hf_ieee80211_tag_relay_support,",
          "8902:     &hf_ieee80211_tag_relay_use,",
          "8903:     &hf_ieee80211_tag_relay_permission,",
          "8904:     &hf_ieee80211_tag_AC_power,",
          "8905:     &hf_ieee80211_tag_relay_prefer,",
          "8906:     &hf_ieee80211_tag_duplex,",
          "8907:     &hf_ieee80211_tag_cooperation,",
          "8908:     NULL",
          "8909:   };",
          "8916:   proto_tree_add_bitmask_list(tree, tvb, offset, 1, ieee80211_tag_relay_capabilities, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "9982: static int",
          "9983: dissect_wme_qos_info(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, int offset, int ftype)",
          "9984: {",
          "9986:   proto_item *wme_qos_info_item;",
          "9991:   switch (ftype) {",
          "9992:     case MGT_ASSOC_REQ:",
          "",
          "[Removed Lines]",
          "9985:   proto_tree *wme_qos_info_tree;",
          "9988:   wme_qos_info_item = proto_tree_add_item(tree, hf_ieee80211_wfa_ie_wme_qos_info, tvb, offset, 1, ENC_NA);",
          "9989:   wme_qos_info_tree = proto_item_add_subtree(wme_qos_info_item, ett_wme_qos_info);",
          "",
          "[Added Lines]",
          "10045:   static const int *ieee80211_mgt_req[] = {",
          "10046:     &hf_ieee80211_wfa_ie_wme_qos_info_sta_max_sp_length,",
          "10047:     &hf_ieee80211_wfa_ie_wme_qos_info_sta_ac_be,",
          "10048:     &hf_ieee80211_wfa_ie_wme_qos_info_sta_ac_bk,",
          "10049:     &hf_ieee80211_wfa_ie_wme_qos_info_sta_ac_vi,",
          "10050:     &hf_ieee80211_wfa_ie_wme_qos_info_sta_ac_vo,",
          "10051:     &hf_ieee80211_wfa_ie_wme_qos_info_sta_reserved,",
          "10052:     NULL",
          "10053:   };",
          "10055:   static const int *ieee80211_mgt_resp[] = {",
          "10056:     &hf_ieee80211_wfa_ie_wme_qos_info_ap_u_apsd,",
          "10057:     &hf_ieee80211_wfa_ie_wme_qos_info_ap_parameter_set_count,",
          "10058:     &hf_ieee80211_wfa_ie_wme_qos_info_ap_reserved,",
          "10059:     NULL",
          "10060:   };",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "9994:     case MGT_REASSOC_REQ:",
          "9995:     {",
          "10003:       break;",
          "10004:     }",
          "10005:     case MGT_BEACON:",
          "",
          "[Removed Lines]",
          "9997:       proto_tree_add_item(wme_qos_info_tree, hf_ieee80211_wfa_ie_wme_qos_info_sta_max_sp_length, tvb, offset, 1, ENC_NA);",
          "9998:       proto_tree_add_item(wme_qos_info_tree, hf_ieee80211_wfa_ie_wme_qos_info_sta_ac_be, tvb, offset, 1, ENC_NA);",
          "9999:       proto_tree_add_item(wme_qos_info_tree, hf_ieee80211_wfa_ie_wme_qos_info_sta_ac_bk, tvb, offset, 1, ENC_NA);",
          "10000:       proto_tree_add_item(wme_qos_info_tree, hf_ieee80211_wfa_ie_wme_qos_info_sta_ac_vi, tvb, offset, 1, ENC_NA);",
          "10001:       proto_tree_add_item(wme_qos_info_tree, hf_ieee80211_wfa_ie_wme_qos_info_sta_ac_vo, tvb, offset, 1, ENC_NA);",
          "10002:       proto_tree_add_item(wme_qos_info_tree, hf_ieee80211_wfa_ie_wme_qos_info_sta_reserved, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "10068:       proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_wfa_ie_wme_qos_info,",
          "10069:                                     ett_wme_qos_info, ieee80211_mgt_req,",
          "10070:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "10008:     case MGT_REASSOC_RESP:",
          "10009:     {",
          "10014:       break;",
          "10015:     }",
          "10016:     default:",
          "10017:         expert_add_info_format(pinfo, wme_qos_info_item, &ei_ieee80211_wfa_ie_wme_qos_info_bad_ftype, \"Could not deduce direction to decode correctly, ftype %u\", ftype);",
          "10018:       break;",
          "10019:     }",
          "",
          "[Removed Lines]",
          "10011:       proto_tree_add_item(wme_qos_info_tree, hf_ieee80211_wfa_ie_wme_qos_info_ap_u_apsd, tvb, offset, 1, ENC_NA);",
          "10012:       proto_tree_add_item(wme_qos_info_tree, hf_ieee80211_wfa_ie_wme_qos_info_ap_parameter_set_count, tvb, offset, 1, ENC_NA);",
          "10013:       proto_tree_add_item(wme_qos_info_tree, hf_ieee80211_wfa_ie_wme_qos_info_ap_reserved, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "10079:       proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_wfa_ie_wme_qos_info,",
          "10080:                                     ett_wme_qos_info, ieee80211_mgt_resp,",
          "10081:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "10085:         wme_qos_info_item = proto_tree_add_item(tree, hf_ieee80211_wfa_ie_wme_qos_info, tvb, offset, 1, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "10034:   for (i = 0; i < 4; i++)",
          "10035:   {",
          "10036:     proto_item *ac_item, *aci_aifsn_item, *ecw_item;",
          "10038:     guint8 aci_aifsn, ecw, ecwmin, ecwmax;",
          "10039:     guint16 cwmin, cwmax;",
          "10041:     ac_item = proto_tree_add_item(tree, hf_ieee80211_wfa_ie_wme_ac_parameters, tvb, offset, 4, ENC_NA);",
          "10042:     ac_tree = proto_item_add_subtree(ac_item, ett_wme_ac);",
          "10051:     aci_aifsn = tvb_get_guint8(tvb, offset);",
          "10053:     if (aci_aifsn < 2) {",
          "10055:          \"The minimum value for the AIFSN subfield is 2 (found %u).\", aci_aifsn);",
          "10056:     }",
          "10057:     proto_item_append_text(ac_item, \" ACI %u (%s), ACM %s, AIFSN %u\",",
          "",
          "[Removed Lines]",
          "10037:     proto_tree *ac_tree, *aci_aifsn_tree, *ecw_tree;",
          "10045:     aci_aifsn_item = proto_tree_add_item(ac_tree, hf_ieee80211_wfa_ie_wme_acp_aci_aifsn, tvb, offset, 1, ENC_NA);",
          "10046:     aci_aifsn_tree = proto_item_add_subtree(aci_aifsn_item, ett_wme_aci_aifsn);",
          "10047:     proto_tree_add_item(aci_aifsn_tree, hf_ieee80211_wfa_ie_wme_acp_aci, tvb, offset, 1, ENC_NA);",
          "10048:     proto_tree_add_item(aci_aifsn_tree, hf_ieee80211_wfa_ie_wme_acp_acm, tvb, offset, 1, ENC_NA);",
          "10049:     proto_tree_add_item(aci_aifsn_tree, hf_ieee80211_wfa_ie_wme_acp_aifsn, tvb, offset, 1, ENC_NA);",
          "10050:     proto_tree_add_item(aci_aifsn_tree, hf_ieee80211_wfa_ie_wme_acp_reserved, tvb, offset, 1, ENC_NA);",
          "10054:        expert_add_info_format(pinfo, aci_aifsn_tree, &ei_ieee80211_qos_bad_aifsn,",
          "",
          "[Added Lines]",
          "10106:     proto_tree *ac_tree, *ecw_tree;",
          "10109:     static const int *ieee80211_wfa_ie_wme[] = {",
          "10110:         &hf_ieee80211_wfa_ie_wme_acp_aci,",
          "10111:         &hf_ieee80211_wfa_ie_wme_acp_acm,",
          "10112:         &hf_ieee80211_wfa_ie_wme_acp_aifsn,",
          "10113:         &hf_ieee80211_wfa_ie_wme_acp_reserved,",
          "10114:         NULL",
          "10115:     };",
          "10121:     aci_aifsn_item = proto_tree_add_bitmask_with_flags(ac_tree, tvb, offset, hf_ieee80211_wfa_ie_wme_acp_aci_aifsn,",
          "10122:                             ett_wme_aci_aifsn, ieee80211_wfa_ie_wme,",
          "10123:                             ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "10127:        expert_add_info_format(pinfo, aci_aifsn_item, &ei_ieee80211_qos_bad_aifsn,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "10193:         }",
          "10195:         {",
          "10208:             offset += 3;",
          "10210:             proto_tree_add_item(tree, hf_ieee80211_wfa_ie_wme_tspec_nor_msdu, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "10197:             proto_item *tsinfo_item;",
          "10198:             proto_tree *tsinfo_tree;",
          "10200:             tsinfo_item = proto_tree_add_item(tree, hf_ieee80211_wfa_ie_wme_tspec_tsinfo, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "10201:             tsinfo_tree = proto_item_add_subtree(tsinfo_item, ett_tsinfo_tree);",
          "10203:             proto_tree_add_item(tsinfo_tree, hf_ieee80211_wfa_ie_wme_tspec_tsinfo_tid, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "10204:             proto_tree_add_item(tsinfo_tree, hf_ieee80211_wfa_ie_wme_tspec_tsinfo_direction, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "10205:             proto_tree_add_item(tsinfo_tree, hf_ieee80211_wfa_ie_wme_tspec_tsinfo_psb, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "10206:             proto_tree_add_item(tsinfo_tree, hf_ieee80211_wfa_ie_wme_tspec_tsinfo_up, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "10207:             proto_tree_add_item(tsinfo_tree, hf_ieee80211_wfa_ie_wme_tspec_tsinfo_reserved, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "10269:             static const int *ieee80211_wfa_ie_wme_tspec_tsinfo[] = {",
          "10270:               &hf_ieee80211_wfa_ie_wme_tspec_tsinfo_tid,",
          "10271:               &hf_ieee80211_wfa_ie_wme_tspec_tsinfo_direction,",
          "10272:               &hf_ieee80211_wfa_ie_wme_tspec_tsinfo_psb,",
          "10273:               &hf_ieee80211_wfa_ie_wme_tspec_tsinfo_up,",
          "10274:               &hf_ieee80211_wfa_ie_wme_tspec_tsinfo_reserved,",
          "10275:               NULL",
          "10276:             };",
          "10278:             proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_wfa_ie_wme_tspec_tsinfo,",
          "10279:                                     ett_tsinfo_tree, ieee80211_wfa_ie_wme_tspec_tsinfo,",
          "10280:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "10282: static void",
          "10283: dissect_hs20_indication(proto_tree *tree, tvbuff_t *tvb, int offset)",
          "10284: {",
          "10293: }",
          "10295: static void",
          "",
          "[Removed Lines]",
          "10285:   proto_tree_add_item(tree, hf_hs20_indication_dgaf_disabled, tvb, offset, 1,",
          "10286:                       ENC_LITTLE_ENDIAN);",
          "10287:   proto_tree_add_item(tree, hf_hs20_indication_pps_mo_id_present, tvb, offset, 1,",
          "10288:                       ENC_LITTLE_ENDIAN);",
          "10289:   proto_tree_add_item(tree, hf_hs20_indication_anqp_domain_id_present, tvb, offset, 1,",
          "10290:                       ENC_LITTLE_ENDIAN);",
          "10291:   proto_tree_add_item(tree, hf_hs20_indication_release_number, tvb, offset, 1,",
          "10292:                       ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "10358:   static const int *ieee80211_hs20_indication[] = {",
          "10359:     &hf_hs20_indication_dgaf_disabled,",
          "10360:     &hf_hs20_indication_pps_mo_id_present,",
          "10361:     &hf_hs20_indication_anqp_domain_id_present,",
          "10362:     &hf_hs20_indication_release_number,",
          "10363:     NULL",
          "10364:   };",
          "10366:   proto_tree_add_bitmask_list(tree, tvb, offset, 1, ieee80211_hs20_indication, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "10403:   { 0,                 NULL }",
          "10404: };",
          "10424: static void",
          "10425: dissect_vendor_ie_atheros(proto_item *item _U_, proto_tree *ietree,",
          "",
          "[Removed Lines]",
          "10406: static void",
          "10407: dissect_vendor_ie_atheros_cap(proto_item *item _U_, tvbuff_t *tvb, int offset)",
          "10408: {",
          "10409:   proto_tree *cap_tree;",
          "10411:   cap_tree = proto_item_add_subtree(item, ett_ath_cap_tree);",
          "10413:   proto_tree_add_item(cap_tree, hf_ieee80211_atheros_ie_cap_f_turbop, tvb, offset, 1, ENC_NA);",
          "10414:   proto_tree_add_item(cap_tree, hf_ieee80211_atheros_ie_cap_f_comp,   tvb, offset, 1, ENC_NA);",
          "10415:   proto_tree_add_item(cap_tree, hf_ieee80211_atheros_ie_cap_f_ff,     tvb, offset, 1, ENC_NA);",
          "10416:   proto_tree_add_item(cap_tree, hf_ieee80211_atheros_ie_cap_f_xr,     tvb, offset, 1, ENC_NA);",
          "10417:   proto_tree_add_item(cap_tree, hf_ieee80211_atheros_ie_cap_f_ar,     tvb, offset, 1, ENC_NA);",
          "10418:   proto_tree_add_item(cap_tree, hf_ieee80211_atheros_ie_cap_f_burst,  tvb, offset, 1, ENC_NA);",
          "10419:   proto_tree_add_item(cap_tree, hf_ieee80211_atheros_ie_cap_f_wme,    tvb, offset, 1, ENC_NA);",
          "10420:   proto_tree_add_item(cap_tree, hf_ieee80211_atheros_ie_cap_f_boost,  tvb, offset, 1, ENC_NA);",
          "10422: }",
          "",
          "[Added Lines]",
          "10480: static const int *ieee80211_atheros_ie_cap[] = {",
          "10481:   &hf_ieee80211_atheros_ie_cap_f_turbop,",
          "10482:   &hf_ieee80211_atheros_ie_cap_f_comp,",
          "10483:   &hf_ieee80211_atheros_ie_cap_f_ff,",
          "10484:   &hf_ieee80211_atheros_ie_cap_f_xr,",
          "10485:   &hf_ieee80211_atheros_ie_cap_f_ar,",
          "10486:   &hf_ieee80211_atheros_ie_cap_f_burst,",
          "10487:   &hf_ieee80211_atheros_ie_cap_f_wme,",
          "10488:   &hf_ieee80211_atheros_ie_cap_f_boost,",
          "10489:   NULL",
          "10490: };",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "10429:   guint8      type;",
          "10430:   guint8      subtype;",
          "10431:   guint8      version;",
          "10434:   if (tag_len <= 3) {",
          "",
          "[Removed Lines]",
          "10432:   proto_item *cap_item;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "10459:         switch (subtype) {",
          "10460:           case ATHEROS_IE_ADVCAP_S:",
          "10461:           {",
          "10464:             offset   += 1;",
          "10465:             tag_len  -= 1;",
          "",
          "[Removed Lines]",
          "10462:             cap_item  = proto_tree_add_item(ietree, hf_ieee80211_atheros_ie_advcap_cap, tvb, offset, 1, ENC_NA);",
          "10463:             dissect_vendor_ie_atheros_cap(cap_item, tvb, offset);",
          "",
          "[Added Lines]",
          "10529:             proto_tree_add_bitmask_with_flags(ietree, tvb, offset, hf_ieee80211_atheros_ie_advcap_cap,",
          "10530:                                     ett_ath_cap_tree, ieee80211_atheros_ie_cap,",
          "10531:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "10496:             offset  += 2;",
          "10497:             tag_len -= 2;",
          "10501:             offset   += 1;",
          "10502:             tag_len  -= 1;",
          "10506:             offset   += 1;",
          "10507:             tag_len  -= 1;",
          "10508:             break;",
          "",
          "[Removed Lines]",
          "10499:             cap_item  = proto_tree_add_item(ietree, hf_ieee80211_atheros_ie_xr_base_cap, tvb, offset, 1, ENC_NA);",
          "10500:             dissect_vendor_ie_atheros_cap(cap_item, tvb, offset);",
          "10504:             cap_item  = proto_tree_add_item(ietree, hf_ieee80211_atheros_ie_xr_xr_cap, tvb, offset, 1, ENC_NA);",
          "10505:             dissect_vendor_ie_atheros_cap(cap_item, tvb, offset);",
          "",
          "[Added Lines]",
          "10567:             proto_tree_add_bitmask_with_flags(ietree, tvb, offset, hf_ieee80211_atheros_ie_xr_base_cap,",
          "10568:                                     ett_ath_cap_tree, ieee80211_atheros_ie_cap,",
          "10569:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "10573:             proto_tree_add_bitmask_with_flags(ietree, tvb, offset, hf_ieee80211_atheros_ie_xr_xr_cap,",
          "10574:                                     ett_ath_cap_tree, ieee80211_atheros_ie_cap,",
          "10575:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "10905: dissect_rsn_ie(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb,",
          "10906:                int offset, guint32 tag_len, association_sanity_check_t *association_sanity_check)",
          "10907: {",
          "10909:   proto_item *rsn_sub_pcs_item, *rsn_sub_akms_item;",
          "10910:   proto_item *rsn_pcs_count, *rsn_akms_count, *rsn_pmkid_count;",
          "10912:   proto_tree *rsn_sub_pcs_tree, *rsn_sub_akms_tree;",
          "10913:   guint16     pcs_count, akms_count, pmkid_count;",
          "10914:   guint       ii;",
          "10915:   int         tag_end = offset + tag_len;",
          "10917:   proto_tree_add_item(tree, hf_ieee80211_rsn_version, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "10918:   offset += 2;",
          "",
          "[Removed Lines]",
          "10908:   proto_item *rsn_gcs_item, *rsn_pcs_item, *rsn_akms_item, *rsn_cap_item, *rsn_pmkid_item, *rsn_gmcs_item;",
          "10911:   proto_tree *rsn_gcs_tree, *rsn_pcs_tree, *rsn_akms_tree, *rsn_cap_tree, *rsn_pmkid_tree, *rsn_gmcs_tree;",
          "",
          "[Added Lines]",
          "10978:   proto_item *rsn_gcs_item, *rsn_pcs_item, *rsn_akms_item, *rsn_pmkid_item, *rsn_gmcs_item;",
          "10981:   proto_tree *rsn_gcs_tree, *rsn_pcs_tree, *rsn_akms_tree, *rsn_pmkid_tree, *rsn_gmcs_tree;",
          "10986:   static const int *ieee80211_rsn_cap[] = {",
          "10987:     &hf_ieee80211_rsn_cap_preauth,",
          "10988:     &hf_ieee80211_rsn_cap_no_pairwise,",
          "10989:     &hf_ieee80211_rsn_cap_ptksa_replay_counter,",
          "10990:     &hf_ieee80211_rsn_cap_gtksa_replay_counter,",
          "10991:     &hf_ieee80211_rsn_cap_mfpr,",
          "10992:     &hf_ieee80211_rsn_cap_mfpc,",
          "10993:     &hf_ieee80211_rsn_cap_jmr,",
          "10994:     &hf_ieee80211_rsn_cap_peerkey,",
          "10995:     NULL",
          "10996:   };",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "11016:   }",
          "11030:   offset += 2;",
          "11031:   if (offset >= tag_end)",
          "11032:   {",
          "",
          "[Removed Lines]",
          "11019:   rsn_cap_item = proto_tree_add_item(tree, hf_ieee80211_rsn_cap, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11020:   rsn_cap_tree = proto_item_add_subtree(rsn_cap_item, ett_rsn_cap_tree);",
          "11022:   proto_tree_add_item(rsn_cap_tree, hf_ieee80211_rsn_cap_preauth, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11023:   proto_tree_add_item(rsn_cap_tree, hf_ieee80211_rsn_cap_no_pairwise, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11024:   proto_tree_add_item(rsn_cap_tree, hf_ieee80211_rsn_cap_ptksa_replay_counter, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11025:   proto_tree_add_item(rsn_cap_tree, hf_ieee80211_rsn_cap_gtksa_replay_counter, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11026:   proto_tree_add_item(rsn_cap_tree, hf_ieee80211_rsn_cap_mfpr, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11027:   proto_tree_add_item(rsn_cap_tree, hf_ieee80211_rsn_cap_mfpc, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11028:   proto_tree_add_item(rsn_cap_tree, hf_ieee80211_rsn_cap_jmr, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11029:   proto_tree_add_item(rsn_cap_tree, hf_ieee80211_rsn_cap_peerkey, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "11100:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_rsn_cap,",
          "11101:                                     ett_rsn_cap_tree, ieee80211_rsn_cap,",
          "11102:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "11081:   int offset = 0;",
          "11082:   proto_item *ti_ex_cap;",
          "11083:   proto_tree *ex_cap_tree;",
          "11085:   if (tag_len < 1)",
          "11086:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11157:   static const int *ieee80211_tag_extended_capabilities_byte1[] = {",
          "11158:     &hf_ieee80211_tag_extended_capabilities_b0,",
          "11159:     &hf_ieee80211_tag_extended_capabilities_b1,",
          "11160:     &hf_ieee80211_tag_extended_capabilities_b2,",
          "11161:     &hf_ieee80211_tag_extended_capabilities_b3,",
          "11162:     &hf_ieee80211_tag_extended_capabilities_b4,",
          "11163:     &hf_ieee80211_tag_extended_capabilities_b5,",
          "11164:     &hf_ieee80211_tag_extended_capabilities_b6,",
          "11165:     &hf_ieee80211_tag_extended_capabilities_b7,",
          "11166:     NULL",
          "11167:   };",
          "11168:   static const int *ieee80211_tag_extended_capabilities_byte2[] = {",
          "11169:     &hf_ieee80211_tag_extended_capabilities_b8,",
          "11170:     &hf_ieee80211_tag_extended_capabilities_b9,",
          "11171:     &hf_ieee80211_tag_extended_capabilities_b10,",
          "11172:     &hf_ieee80211_tag_extended_capabilities_b11,",
          "11173:     &hf_ieee80211_tag_extended_capabilities_b12,",
          "11174:     &hf_ieee80211_tag_extended_capabilities_b13,",
          "11175:     &hf_ieee80211_tag_extended_capabilities_b14,",
          "11176:     &hf_ieee80211_tag_extended_capabilities_b15,",
          "11177:     NULL",
          "11178:   };",
          "11179:   static const int *ieee80211_tag_extended_capabilities_byte3[] = {",
          "11180:     &hf_ieee80211_tag_extended_capabilities_b16,",
          "11181:     &hf_ieee80211_tag_extended_capabilities_b17,",
          "11182:     &hf_ieee80211_tag_extended_capabilities_b18,",
          "11183:     &hf_ieee80211_tag_extended_capabilities_b19,",
          "11184:     &hf_ieee80211_tag_extended_capabilities_b20,",
          "11185:     &hf_ieee80211_tag_extended_capabilities_b21,",
          "11186:     &hf_ieee80211_tag_extended_capabilities_b22,",
          "11187:     &hf_ieee80211_tag_extended_capabilities_b23,",
          "11188:     NULL",
          "11189:   };",
          "11190:   static const int *ieee80211_tag_extended_capabilities_byte4[] = {",
          "11191:     &hf_ieee80211_tag_extended_capabilities_b24,",
          "11192:     &hf_ieee80211_tag_extended_capabilities_b25,",
          "11193:     &hf_ieee80211_tag_extended_capabilities_b26,",
          "11194:     &hf_ieee80211_tag_extended_capabilities_b27,",
          "11195:     &hf_ieee80211_tag_extended_capabilities_b28,",
          "11196:     &hf_ieee80211_tag_extended_capabilities_b29,",
          "11197:     &hf_ieee80211_tag_extended_capabilities_b30,",
          "11198:     &hf_ieee80211_tag_extended_capabilities_b31,",
          "11199:     NULL",
          "11200:   };",
          "11201:   static const int *ieee80211_tag_extended_capabilities_byte5[] = {",
          "11202:     &hf_ieee80211_tag_extended_capabilities_b32,",
          "11203:     &hf_ieee80211_tag_extended_capabilities_b33,",
          "11204:     &hf_ieee80211_tag_extended_capabilities_b34,",
          "11205:     &hf_ieee80211_tag_extended_capabilities_b35,",
          "11206:     &hf_ieee80211_tag_extended_capabilities_b36,",
          "11207:     &hf_ieee80211_tag_extended_capabilities_b37,",
          "11208:     &hf_ieee80211_tag_extended_capabilities_b38,",
          "11209:     &hf_ieee80211_tag_extended_capabilities_b39,",
          "11210:     NULL",
          "11211:   };",
          "11212:   static const int *ieee80211_tag_extended_capabilities_byte6[] = {",
          "11213:     &hf_ieee80211_tag_extended_capabilities_b40,",
          "11214:     &hf_ieee80211_tag_extended_capabilities_serv_int_granularity,",
          "11215:     &hf_ieee80211_tag_extended_capabilities_b44,",
          "11216:     &hf_ieee80211_tag_extended_capabilities_b45,",
          "11217:     &hf_ieee80211_tag_extended_capabilities_b46,",
          "11218:     &hf_ieee80211_tag_extended_capabilities_b47,",
          "11219:     NULL",
          "11220:   };",
          "11221:   static const int *ieee80211_tag_extended_capabilities_byte7[] = {",
          "11222:     &hf_ieee80211_tag_extended_capabilities_b48,",
          "11223:     &hf_ieee80211_tag_extended_capabilities_o7,",
          "11224:     NULL",
          "11225:   };",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "11090:   proto_item_append_text(field_data->item_tag, \" (%u octet%s)\", tag_len, plurality(tag_len, \"\", \"s\"));",
          "11094:   proto_item_append_text(ti_ex_cap, \" (octet 1)\");",
          "11104:   offset += 1;",
          "11107:   if (offset >= tag_len) {",
          "11108:     return offset;",
          "11109:   }",
          "11111:   proto_item_append_text(ti_ex_cap, \" (octet 2)\");",
          "11121:   offset += 1;",
          "11124:   if (offset >= tag_len) {",
          "11125:     return offset;",
          "11126:   }",
          "11128:   proto_item_append_text(ti_ex_cap, \" (octet 3)\");",
          "11138:   offset += 1;",
          "11141:   if (offset >= tag_len) {",
          "11142:     return offset;",
          "11143:   }",
          "11145:   proto_item_append_text(ti_ex_cap, \" (octet 4)\");",
          "11155:   offset += 1;",
          "11158:   if (offset >= tag_len) {",
          "11159:     return offset;",
          "11160:   }",
          "11162:   proto_item_append_text(ti_ex_cap, \" (octet 5)\");",
          "11172:   offset += 1;",
          "11175:   if (offset >= tag_len) {",
          "11176:     return offset;",
          "11177:   }",
          "11179:   proto_item_append_text(ti_ex_cap, \" (octet 6)\");",
          "11187:   offset += 1;",
          "",
          "[Removed Lines]",
          "11093:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "11095:   ex_cap_tree = proto_item_add_subtree(ti_ex_cap, ett_tag_ex_cap1);",
          "11096:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b0, tvb, offset, 1, ENC_NA);",
          "11097:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b1, tvb, offset, 1, ENC_NA);",
          "11098:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b2, tvb, offset, 1, ENC_NA);",
          "11099:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b3, tvb, offset, 1, ENC_NA);",
          "11100:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b4, tvb, offset, 1, ENC_NA);",
          "11101:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b5, tvb, offset, 1, ENC_NA);",
          "11102:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b6, tvb, offset, 1, ENC_NA);",
          "11103:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b7, tvb, offset, 1, ENC_NA);",
          "11110:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "11112:   ex_cap_tree = proto_item_add_subtree(ti_ex_cap, ett_tag_ex_cap2);",
          "11113:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b8, tvb, offset, 1, ENC_NA);",
          "11114:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b9, tvb, offset, 1, ENC_NA);",
          "11115:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b10, tvb, offset, 1, ENC_NA);",
          "11116:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b11, tvb, offset, 1, ENC_NA);",
          "11117:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b12, tvb, offset, 1, ENC_NA);",
          "11118:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b13, tvb, offset, 1, ENC_NA);",
          "11119:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b14, tvb, offset, 1, ENC_NA);",
          "11120:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b15, tvb, offset, 1, ENC_NA);",
          "11127:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "11129:   ex_cap_tree = proto_item_add_subtree(ti_ex_cap, ett_tag_ex_cap3);",
          "11130:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b16, tvb, offset, 1, ENC_NA);",
          "11131:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b17, tvb, offset, 1, ENC_NA);",
          "11132:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b18, tvb, offset, 1, ENC_NA);",
          "11133:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b19, tvb, offset, 1, ENC_NA);",
          "11134:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b20, tvb, offset, 1, ENC_NA);",
          "11135:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b21, tvb, offset, 1, ENC_NA);",
          "11136:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b22, tvb, offset, 1, ENC_NA);",
          "11137:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b23, tvb, offset, 1, ENC_NA);",
          "11144:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "11146:   ex_cap_tree = proto_item_add_subtree(ti_ex_cap, ett_tag_ex_cap4);",
          "11147:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b24, tvb, offset, 1, ENC_NA);",
          "11148:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b25, tvb, offset, 1, ENC_NA);",
          "11149:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b26, tvb, offset, 1, ENC_NA);",
          "11150:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b27, tvb, offset, 1, ENC_NA);",
          "11151:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b28, tvb, offset, 1, ENC_NA);",
          "11152:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b29, tvb, offset, 1, ENC_NA);",
          "11153:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b30, tvb, offset, 1, ENC_NA);",
          "11154:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b31, tvb, offset, 1, ENC_NA);",
          "11161:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "11163:   ex_cap_tree = proto_item_add_subtree(ti_ex_cap, ett_tag_ex_cap5);",
          "11164:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b32, tvb, offset, 1, ENC_NA);",
          "11165:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b33, tvb, offset, 1, ENC_NA);",
          "11166:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b34, tvb, offset, 1, ENC_NA);",
          "11167:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b35, tvb, offset, 1, ENC_NA);",
          "11168:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b36, tvb, offset, 1, ENC_NA);",
          "11169:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b37, tvb, offset, 1, ENC_NA);",
          "11170:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b38, tvb, offset, 1, ENC_NA);",
          "11171:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b39, tvb, offset, 1, ENC_NA);",
          "11178:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "11180:   ex_cap_tree = proto_item_add_subtree(ti_ex_cap, ett_tag_ex_cap6);",
          "11181:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b40, tvb, offset, 1, ENC_NA);",
          "11182:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_serv_int_granularity, tvb, offset, 1, ENC_NA);",
          "11183:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b44, tvb, offset, 1, ENC_NA);",
          "11184:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b45, tvb, offset, 1, ENC_NA);",
          "11185:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b46, tvb, offset, 1, ENC_NA);",
          "11186:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b47, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "11236:   ti_ex_cap = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_extended_capabilities,",
          "11237:                                     ett_tag_ex_cap1, ieee80211_tag_extended_capabilities_byte1,",
          "11238:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "11246:   ti_ex_cap = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_extended_capabilities,",
          "11247:                                     ett_tag_ex_cap2, ieee80211_tag_extended_capabilities_byte2,",
          "11248:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "11256:   ti_ex_cap = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_extended_capabilities,",
          "11257:                                     ett_tag_ex_cap3, ieee80211_tag_extended_capabilities_byte3,",
          "11258:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "11266:   ti_ex_cap = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_extended_capabilities,",
          "11267:                                     ett_tag_ex_cap4, ieee80211_tag_extended_capabilities_byte4,",
          "11268:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "11276:   ti_ex_cap = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_extended_capabilities,",
          "11277:                                     ett_tag_ex_cap5, ieee80211_tag_extended_capabilities_byte5,",
          "11278:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "11287:   ti_ex_cap = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_extended_capabilities,",
          "11288:                                     ett_tag_ex_cap6, ieee80211_tag_extended_capabilities_byte6,",
          "11289:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "11191:   if (offset >= tag_len) {",
          "11192:     return offset;",
          "11193:   }",
          "11195:   proto_item_append_text(ti_ex_cap, \" (octet 7)\");",
          "11199:   offset += 1;",
          "",
          "[Removed Lines]",
          "11194:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_extended_capabilities, tvb, offset, 1, ENC_NA);",
          "11196:   ex_cap_tree = proto_item_add_subtree(ti_ex_cap, ett_tag_ex_cap7);",
          "11197:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_b48, tvb, offset, 1, ENC_NA);",
          "11198:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_extended_capabilities_o7, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "11298:   ti_ex_cap = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_extended_capabilities,",
          "11299:                                     ett_tag_ex_cap7, ieee80211_tag_extended_capabilities_byte7,",
          "11300:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "11238: dissect_vht_mcs_set(proto_tree *tree, tvbuff_t *tvb, int offset)",
          "11239: {",
          "11240:   proto_item *ti;",
          "11244:   ti = proto_tree_add_item(tree, hf_ieee80211_vht_mcsset, tvb, offset, 8, ENC_NA);",
          "11246:   mcs_tree = proto_item_add_subtree(ti, ett_vht_mcsset_tree);",
          "11261:   offset += 2;",
          "11263:   proto_tree_add_item(mcs_tree, hf_ieee80211_vht_mcsset_rx_highest_long_gi, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11267:   offset += 2;",
          "11281:   offset += 2;",
          "11283:   proto_tree_add_item(mcs_tree, hf_ieee80211_vht_mcsset_tx_highest_long_gi, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "11241:   proto_tree *mcs_tree, *rx_mcs_tree, *tx_mcs_tree;",
          "11248:   ti = proto_tree_add_item(mcs_tree, hf_ieee80211_vht_mcsset_rx_mcs_map, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11249:   rx_mcs_tree = proto_item_add_subtree(ti, ett_vht_rx_mcsbit_tree);",
          "11252:   proto_tree_add_item(rx_mcs_tree, hf_ieee80211_vht_mcsset_rx_max_mcs_for_1_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11253:   proto_tree_add_item(rx_mcs_tree, hf_ieee80211_vht_mcsset_rx_max_mcs_for_2_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11254:   proto_tree_add_item(rx_mcs_tree, hf_ieee80211_vht_mcsset_rx_max_mcs_for_3_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11255:   proto_tree_add_item(rx_mcs_tree, hf_ieee80211_vht_mcsset_rx_max_mcs_for_4_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11256:   proto_tree_add_item(rx_mcs_tree, hf_ieee80211_vht_mcsset_rx_max_mcs_for_5_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11257:   proto_tree_add_item(rx_mcs_tree, hf_ieee80211_vht_mcsset_rx_max_mcs_for_6_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11258:   proto_tree_add_item(rx_mcs_tree, hf_ieee80211_vht_mcsset_rx_max_mcs_for_7_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11259:   proto_tree_add_item(rx_mcs_tree, hf_ieee80211_vht_mcsset_rx_max_mcs_for_8_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11270:   ti = proto_tree_add_item(mcs_tree, hf_ieee80211_vht_mcsset_tx_mcs_map, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11271:   tx_mcs_tree = proto_item_add_subtree(ti, ett_vht_tx_mcsbit_tree);",
          "11272:   proto_tree_add_item(tx_mcs_tree, hf_ieee80211_vht_mcsset_tx_max_mcs_for_1_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11273:   proto_tree_add_item(tx_mcs_tree, hf_ieee80211_vht_mcsset_tx_max_mcs_for_2_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11274:   proto_tree_add_item(tx_mcs_tree, hf_ieee80211_vht_mcsset_tx_max_mcs_for_3_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11275:   proto_tree_add_item(tx_mcs_tree, hf_ieee80211_vht_mcsset_tx_max_mcs_for_4_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11276:   proto_tree_add_item(tx_mcs_tree, hf_ieee80211_vht_mcsset_tx_max_mcs_for_5_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11277:   proto_tree_add_item(tx_mcs_tree, hf_ieee80211_vht_mcsset_tx_max_mcs_for_6_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11278:   proto_tree_add_item(tx_mcs_tree, hf_ieee80211_vht_mcsset_tx_max_mcs_for_7_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11279:   proto_tree_add_item(tx_mcs_tree, hf_ieee80211_vht_mcsset_tx_max_mcs_for_8_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "11344:   proto_tree *mcs_tree;",
          "11345:   static const int *ieee80211_vht_mcsset_rx_max_mcs[] = {",
          "11346:     &hf_ieee80211_vht_mcsset_rx_max_mcs_for_1_ss,",
          "11347:     &hf_ieee80211_vht_mcsset_rx_max_mcs_for_2_ss,",
          "11348:     &hf_ieee80211_vht_mcsset_rx_max_mcs_for_3_ss,",
          "11349:     &hf_ieee80211_vht_mcsset_rx_max_mcs_for_4_ss,",
          "11350:     &hf_ieee80211_vht_mcsset_rx_max_mcs_for_5_ss,",
          "11351:     &hf_ieee80211_vht_mcsset_rx_max_mcs_for_6_ss,",
          "11352:     &hf_ieee80211_vht_mcsset_rx_max_mcs_for_7_ss,",
          "11353:     &hf_ieee80211_vht_mcsset_rx_max_mcs_for_8_ss,",
          "11354:     NULL",
          "11355:   };",
          "11356:   static const int *ieee80211_vht_mcsset_tx_max_mcs[] = {",
          "11357:     &hf_ieee80211_vht_mcsset_tx_max_mcs_for_1_ss,",
          "11358:     &hf_ieee80211_vht_mcsset_tx_max_mcs_for_2_ss,",
          "11359:     &hf_ieee80211_vht_mcsset_tx_max_mcs_for_3_ss,",
          "11360:     &hf_ieee80211_vht_mcsset_tx_max_mcs_for_4_ss,",
          "11361:     &hf_ieee80211_vht_mcsset_tx_max_mcs_for_5_ss,",
          "11362:     &hf_ieee80211_vht_mcsset_tx_max_mcs_for_6_ss,",
          "11363:     &hf_ieee80211_vht_mcsset_tx_max_mcs_for_7_ss,",
          "11364:     &hf_ieee80211_vht_mcsset_tx_max_mcs_for_8_ss,",
          "11365:     NULL",
          "11366:   };",
          "11374:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_vht_mcsset_rx_mcs_map,",
          "11375:                                     ett_vht_rx_mcsbit_tree, ieee80211_vht_mcsset_rx_max_mcs,",
          "11376:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "11387:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_vht_mcsset_tx_mcs_map,",
          "11388:                                     ett_vht_tx_mcsbit_tree, ieee80211_vht_mcsset_tx_max_mcs,",
          "11389:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "11293:   int tag_len = tvb_reported_length(tvb);",
          "11294:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11295:   int offset = 0;",
          "11299:   if (tag_len != 12) {",
          "11300:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "",
          "[Removed Lines]",
          "11296:   proto_item *cap_item;",
          "11297:   proto_tree *cap_tree;",
          "",
          "[Added Lines]",
          "11405:   static const int *ieee80211_vht_caps[] = {",
          "11406:     &hf_ieee80211_vht_max_mpdu_length,",
          "11407:     &hf_ieee80211_vht_supported_chan_width_set,",
          "11408:     &hf_ieee80211_vht_rx_ldpc,",
          "11409:     &hf_ieee80211_vht_short_gi_for_80,",
          "11410:     &hf_ieee80211_vht_short_gi_for_160,",
          "11411:     &hf_ieee80211_vht_tx_stbc,",
          "11413:     &hf_ieee80211_vht_rx_stbc,",
          "11414:     &hf_ieee80211_vht_su_beamformer_cap,",
          "11415:     &hf_ieee80211_vht_su_beamformee_cap,",
          "11416:     &hf_ieee80211_vht_beamformer_antennas,",
          "11418:     &hf_ieee80211_vht_sounding_dimensions,",
          "11419:     &hf_ieee80211_vht_mu_beamformer_cap,",
          "11420:     &hf_ieee80211_vht_mu_beamformee_cap,",
          "11421:     &hf_ieee80211_vht_txop_ps,",
          "11422:     &hf_ieee80211_vht_var_htc_field,",
          "11423:     &hf_ieee80211_vht_max_ampdu,",
          "11424:     &hf_ieee80211_vht_link_adaptation_cap,",
          "11425:     &hf_ieee80211_vht_rx_pattern,",
          "11426:     &hf_ieee80211_vht_tx_pattern,",
          "11427:     &hf_ieee80211_vht_reserv,",
          "11428:     NULL",
          "11429:   };",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "11303:   }",
          "11358:   offset += 4;",
          "",
          "[Removed Lines]",
          "11306:   cap_item = proto_tree_add_item(tree, hf_ieee80211_vht_cap, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11308:   cap_tree = proto_item_add_subtree(cap_item, ett_vht_cap_tree);",
          "11311:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_max_mpdu_length, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11313:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_supported_chan_width_set, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11316:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_rx_ldpc, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11317:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_short_gi_for_80, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11318:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_short_gi_for_160, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11319:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_tx_stbc, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11324:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_rx_stbc, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11327:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_su_beamformer_cap, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11328:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_su_beamformee_cap, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11331:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_beamformer_antennas, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11336:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_sounding_dimensions, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11338:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_mu_beamformer_cap, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11341:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_mu_beamformee_cap, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11342:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_txop_ps, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11343:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_var_htc_field, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11346:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_max_ampdu, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11349:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_link_adaptation_cap, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11352:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_rx_pattern, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11353:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_tx_pattern, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "11356:   proto_tree_add_item(cap_tree, hf_ieee80211_vht_reserv, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "11438:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_vht_cap,",
          "11439:                                     ett_vht_cap_tree, ieee80211_vht_caps,",
          "11440:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "11369:   int tag_len = tvb_reported_length(tvb);",
          "11370:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11371:   int offset = 0;",
          "11375:   if (tag_len != 5) {",
          "11376:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "",
          "[Removed Lines]",
          "11372:   proto_item *op_item, *ti;",
          "11373:   proto_tree *op_tree, *basic_mcs_tree;",
          "",
          "[Added Lines]",
          "11455:   proto_item *op_item;",
          "11456:   proto_tree *op_tree;",
          "11457:   static const int *ieee80211_vht_op_max_basic_mcs[] = {",
          "11458:     &hf_ieee80211_vht_op_max_basic_mcs_for_1_ss,",
          "11459:     &hf_ieee80211_vht_op_max_basic_mcs_for_2_ss,",
          "11460:     &hf_ieee80211_vht_op_max_basic_mcs_for_3_ss,",
          "11461:     &hf_ieee80211_vht_op_max_basic_mcs_for_4_ss,",
          "11462:     &hf_ieee80211_vht_op_max_basic_mcs_for_5_ss,",
          "11463:     &hf_ieee80211_vht_op_max_basic_mcs_for_6_ss,",
          "11464:     &hf_ieee80211_vht_op_max_basic_mcs_for_7_ss,",
          "11465:     &hf_ieee80211_vht_op_max_basic_mcs_for_8_ss,",
          "11466:     NULL",
          "11467:   };",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "11388:   offset += 3;",
          "11401:   offset += 2;",
          "11403:   return offset;",
          "",
          "[Removed Lines]",
          "11390:   ti = proto_tree_add_item(tree, hf_ieee80211_vht_op_basic_mcs_map, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11391:   basic_mcs_tree = proto_item_add_subtree(ti, ett_vht_basic_mcsbit_tree);",
          "11392:   proto_tree_add_item(basic_mcs_tree, hf_ieee80211_vht_op_max_basic_mcs_for_1_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11393:   proto_tree_add_item(basic_mcs_tree, hf_ieee80211_vht_op_max_basic_mcs_for_2_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11394:   proto_tree_add_item(basic_mcs_tree, hf_ieee80211_vht_op_max_basic_mcs_for_3_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11395:   proto_tree_add_item(basic_mcs_tree, hf_ieee80211_vht_op_max_basic_mcs_for_4_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11396:   proto_tree_add_item(basic_mcs_tree, hf_ieee80211_vht_op_max_basic_mcs_for_5_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11397:   proto_tree_add_item(basic_mcs_tree, hf_ieee80211_vht_op_max_basic_mcs_for_6_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11398:   proto_tree_add_item(basic_mcs_tree, hf_ieee80211_vht_op_max_basic_mcs_for_7_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "11399:   proto_tree_add_item(basic_mcs_tree, hf_ieee80211_vht_op_max_basic_mcs_for_8_ss, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "11484:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_vht_op_basic_mcs_map,",
          "11485:                                     ett_vht_basic_mcsbit_tree, ieee80211_vht_op_max_basic_mcs,",
          "11486:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "11760:   int tag_len = tvb_reported_length(tvb);",
          "11761:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "11762:   int offset = 0;",
          "11764:   if (tag_len < 1) {",
          "11765:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"PU Buffer Status content length must be at least 1 byte\");",
          "11766:     return tvb_captured_length(tvb);",
          "11767:   }",
          "11777:   return tvb_captured_length(tvb);",
          "11778: }",
          "",
          "[Removed Lines]",
          "11769:   proto_tree_add_item(tree, hf_ieee80211_tag_pu_buffer_status_ac_bk, tvb,",
          "11770:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "11771:   proto_tree_add_item(tree, hf_ieee80211_tag_pu_buffer_status_ac_be, tvb,",
          "11772:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "11773:   proto_tree_add_item(tree, hf_ieee80211_tag_pu_buffer_status_ac_vi, tvb,",
          "11774:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "11775:   proto_tree_add_item(tree, hf_ieee80211_tag_pu_buffer_status_ac_vo, tvb,",
          "11776:                       offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "11849:   static const int *ieee80211_pu_buffer_status[] = {",
          "11850:     &hf_ieee80211_tag_pu_buffer_status_ac_bk,",
          "11851:     &hf_ieee80211_tag_pu_buffer_status_ac_be,",
          "11852:     &hf_ieee80211_tag_pu_buffer_status_ac_vi,",
          "11853:     &hf_ieee80211_tag_pu_buffer_status_ac_vo,",
          "11854:     NULL",
          "11855:   };",
          "11862:   proto_tree_add_bitmask_list(tree, tvb, offset, 1, ieee80211_pu_buffer_status, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "12001: dissect_operating_mode_notification(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "12002: {",
          "12003:   int offset = 0;",
          "12015:   offset += 1;",
          "12016:   return offset;",
          "12017: }",
          "",
          "[Removed Lines]",
          "12004:   proto_item *ti;",
          "12005:   proto_tree *bit_tree;",
          "12008:   ti = proto_tree_add_item(tree, hf_ieee80211_operat_notification_mode, tvb, offset, 1, ENC_NA);",
          "12009:   bit_tree = proto_item_add_subtree(ti, ett_mcsbit_tree);",
          "12010:   proto_tree_add_item(bit_tree, hf_ieee80211_operat_mode_field_channel_width, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "12011:   proto_tree_add_item(bit_tree, hf_ieee80211_operat_mode_field_reserved, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "12012:   proto_tree_add_item(bit_tree, hf_ieee80211_operat_mode_field_rxnss, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "12013:   proto_tree_add_item(bit_tree, hf_ieee80211_operat_mode_field_rxnsstype, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "12090:   static const int *ieee80211_operat_mode_field[] = {",
          "12091:     &hf_ieee80211_operat_mode_field_channel_width,",
          "12092:     &hf_ieee80211_operat_mode_field_reserved,",
          "12093:     &hf_ieee80211_operat_mode_field_rxnss,",
          "12094:     &hf_ieee80211_operat_mode_field_rxnsstype,",
          "12095:     NULL",
          "12096:   };",
          "12099:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_operat_notification_mode,",
          "12100:                                     ett_mcsbit_tree, ieee80211_operat_mode_field,",
          "12101:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "12169:   int tag_len = tvb_reported_length(tvb);",
          "12170:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "12171:   int offset = 0;",
          "12175:   if (tag_len < 22) {",
          "12176:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "",
          "[Removed Lines]",
          "12172:   proto_item *cap_item;",
          "12173:   proto_tree *cap_tree = tree;",
          "",
          "[Added Lines]",
          "12259:   static const int *ieee80211_ht_info1_field[] = {",
          "12260:     &hf_ieee80211_ht_info_secondary_channel_offset,",
          "12261:     &hf_ieee80211_ht_info_channel_width,",
          "12262:     &hf_ieee80211_ht_info_rifs_mode,",
          "12263:     &hf_ieee80211_ht_info_psmp_stas_only,",
          "12264:     &hf_ieee80211_ht_info_service_interval_granularity,",
          "12265:     NULL",
          "12266:   };",
          "12268:   static const int *ieee80211_ht_info2_field[] = {",
          "12269:     &hf_ieee80211_ht_info_operating_mode,",
          "12270:     &hf_ieee80211_ht_info_non_greenfield_sta_present,",
          "12271:     &hf_ieee80211_ht_info_transmit_burst_limit,",
          "12272:     &hf_ieee80211_ht_info_obss_non_ht_stas_present,",
          "12273:     &hf_ieee80211_ht_info_reserved_1,",
          "12274:     NULL",
          "12275:   };",
          "12277:   static const int *ieee80211_ht_info3_field[] = {",
          "12278:     &hf_ieee80211_ht_info_reserved_2,",
          "12279:     &hf_ieee80211_ht_info_dual_beacon,",
          "12280:     &hf_ieee80211_ht_info_dual_cts_protection,",
          "12281:     &hf_ieee80211_ht_info_secondary_beacon,",
          "12282:     &hf_ieee80211_ht_info_lsig_txop_protection_full_support,",
          "12283:     &hf_ieee80211_ht_info_pco_active,",
          "12284:     &hf_ieee80211_ht_info_pco_phase,",
          "12285:     &hf_ieee80211_ht_info_reserved_3,",
          "12286:     NULL",
          "12287:   };",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "12178:     return 1;",
          "12179:   }",
          "12182:   offset += 1;",
          "12197:   offset += 1;",
          "12212:   offset += 2;",
          "12236:   offset = dissect_mcs_set(tree, tvb, offset, TRUE, FALSE);",
          "",
          "[Removed Lines]",
          "12181:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_primary_channel, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "12184:   cap_item = proto_tree_add_item(tree, hf_ieee80211_ht_info_delimiter1, tvb,",
          "12185:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12186:   cap_tree = proto_item_add_subtree(cap_item, ett_ht_info_delimiter1_tree);",
          "12187:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_secondary_channel_offset, tvb,",
          "12188:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12189:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_channel_width, tvb,",
          "12190:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12191:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_rifs_mode, tvb,",
          "12192:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12193:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_psmp_stas_only, tvb,",
          "12194:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12195:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_service_interval_granularity, tvb,",
          "12196:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12199:   cap_item = proto_tree_add_item(tree, hf_ieee80211_ht_info_delimiter2, tvb,",
          "12200:                     offset, 2, ENC_LITTLE_ENDIAN);",
          "12201:   cap_tree = proto_item_add_subtree(cap_item, ett_ht_info_delimiter2_tree);",
          "12202:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_operating_mode, tvb,",
          "12203:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12204:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_non_greenfield_sta_present, tvb,",
          "12205:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12206:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_transmit_burst_limit, tvb,",
          "12207:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12208:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_obss_non_ht_stas_present, tvb,",
          "12209:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12210:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_reserved_1, tvb,",
          "12211:                     offset, 2, ENC_LITTLE_ENDIAN);",
          "12214:   cap_item = proto_tree_add_item(tree, hf_ieee80211_ht_info_delimiter3, tvb,",
          "12215:                     offset, 2, ENC_LITTLE_ENDIAN);",
          "12216:   cap_tree = proto_item_add_subtree(cap_item, ett_ht_info_delimiter3_tree);",
          "12217:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_reserved_2, tvb,",
          "12218:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12219:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_dual_beacon, tvb,",
          "12220:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12221:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_dual_cts_protection, tvb,",
          "12222:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12223:   offset += 1;",
          "12224:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_secondary_beacon, tvb,",
          "12225:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12226:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_lsig_txop_protection_full_support, tvb,",
          "12227:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12228:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_pco_active, tvb,",
          "12229:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12230:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_pco_phase, tvb,",
          "12231:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12232:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_info_reserved_3, tvb,",
          "12233:                     offset, 1, ENC_LITTLE_ENDIAN);",
          "12234:   offset += 1;",
          "",
          "[Added Lines]",
          "12295:   proto_tree_add_item(tree, hf_ieee80211_ht_info_primary_channel, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "12298:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ht_info_delimiter1,",
          "12299:                                     ett_ht_info_delimiter1_tree, ieee80211_ht_info1_field,",
          "12300:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "12304:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ht_info_delimiter2,",
          "12305:                                     ett_ht_info_delimiter2_tree, ieee80211_ht_info2_field,",
          "12306:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "12309:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ht_info_delimiter3,",
          "12310:                                     ett_ht_info_delimiter3_tree, ieee80211_ht_info3_field,",
          "12311:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "12312:   offset += 2;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "12249:   proto_tree *subtree;",
          "12250:   guint16 loop_cnt, version, akm_cnt  = 1, ucast_cnt = 1, bkid_cnt = 1;",
          "12251:   guint8  akm_suite_type = 0, ucast_cipher_type = 0, mcast_cipher_type = 0;",
          "12253:   version = tvb_get_letohs(tvb, offset);",
          "12254:   proto_tree_add_item(tree, hf_ieee80211_tag_wapi_param_set_version, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12330:   static const int *ieee80211_tag_wapi_param_set[] = {",
          "12331:     &hf_ieee80211_tag_wapi_param_set_capab_preauth,",
          "12332:     &hf_ieee80211_tag_wapi_param_set_capab_rsvd,",
          "12333:     NULL",
          "12334:   };",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "12320:   offset += 1;",
          "12321:   proto_item_append_text(ti, \" Multicast Cipher: %s\", val_to_str(mcast_cipher_type, ieee80211_wapi_cipher_type, \"Reserved: %d\"));",
          "12329:   offset += 2;",
          "",
          "[Removed Lines]",
          "12324:   item = proto_tree_add_item(tree, hf_ieee80211_tag_wapi_param_set_capab, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12325:   subtree = proto_item_add_subtree(item, ett_tag_wapi_param_set_preauth_tree);",
          "12326:   proto_tree_add_item(subtree, hf_ieee80211_tag_wapi_param_set_capab_preauth, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12327:   proto_tree_add_item(subtree, hf_ieee80211_tag_wapi_param_set_capab_rsvd, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "12407:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_wapi_param_set_capab,",
          "12408:                                     ett_tag_wapi_param_set_preauth_tree, ieee80211_tag_wapi_param_set,",
          "12409:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "12762:   int tag_len = tvb_reported_length(tvb);",
          "12763:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "12764:   int offset = 0;",
          "12767:   guint16 bitmask;",
          "12768:   if (tag_len < 2) {",
          "12769:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length,",
          "12770:                            \"BSS Available Admission Capacity length %u wrong, must > = 2\", tag_len);",
          "12771:     return offset;",
          "12772:   }",
          "12790:   bitmask = tvb_get_letohs(tvb, offset);",
          "12791:   offset += 2;",
          "",
          "[Removed Lines]",
          "12765:   proto_item *ti;",
          "12766:   proto_tree *btree;",
          "12774:   ti = proto_tree_add_item(tree, hf_ieee80211_tag_bss_avb_adm_cap_bitmask, tvb,",
          "12775:                       offset, 2, ENC_LITTLE_ENDIAN);",
          "12776:   btree = proto_item_add_subtree(ti, ett_tag_bss_bitmask_tree);",
          "12777:   proto_tree_add_item(btree, hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up0, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12778:   proto_tree_add_item(btree, hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up1, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12779:   proto_tree_add_item(btree, hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up2, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12780:   proto_tree_add_item(btree, hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up3, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12781:   proto_tree_add_item(btree, hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up4, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12782:   proto_tree_add_item(btree, hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up5, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12783:   proto_tree_add_item(btree, hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up6, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12784:   proto_tree_add_item(btree, hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up7, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12785:   proto_tree_add_item(btree, hf_ieee80211_tag_bss_avb_adm_cap_bitmask_ac0, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12786:   proto_tree_add_item(btree, hf_ieee80211_tag_bss_avb_adm_cap_bitmask_ac1, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12787:   proto_tree_add_item(btree, hf_ieee80211_tag_bss_avb_adm_cap_bitmask_ac2, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12788:   proto_tree_add_item(btree, hf_ieee80211_tag_bss_avb_adm_cap_bitmask_ac3, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "12789:   proto_tree_add_item(btree, hf_ieee80211_tag_bss_avb_adm_cap_bitmask_rsv, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "12848:   static const int *ieee80211_tag_bss_avb_adm_cap_bitmask[] = {",
          "12849:     &hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up0,",
          "12850:     &hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up1,",
          "12851:     &hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up2,",
          "12852:     &hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up3,",
          "12853:     &hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up4,",
          "12854:     &hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up5,",
          "12855:     &hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up6,",
          "12856:     &hf_ieee80211_tag_bss_avb_adm_cap_bitmask_up7,",
          "12857:     &hf_ieee80211_tag_bss_avb_adm_cap_bitmask_ac0,",
          "12858:     &hf_ieee80211_tag_bss_avb_adm_cap_bitmask_ac1,",
          "12859:     &hf_ieee80211_tag_bss_avb_adm_cap_bitmask_ac2,",
          "12860:     &hf_ieee80211_tag_bss_avb_adm_cap_bitmask_ac3,",
          "12861:     &hf_ieee80211_tag_bss_avb_adm_cap_bitmask_rsv,",
          "12862:     NULL",
          "12863:   };",
          "12871:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_bss_avb_adm_cap_bitmask,",
          "12872:                                     ett_tag_bss_bitmask_tree, ieee80211_tag_bss_avb_adm_cap_bitmask,",
          "12873:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "12888:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "12889:   int offset = 0;",
          "12890:   proto_item *ti_ex_cap;",
          "12893:   if (tag_len != 5)",
          "12894:   {",
          "",
          "[Removed Lines]",
          "12891:   proto_tree *ex_cap_tree;",
          "",
          "[Added Lines]",
          "12975:   static const int *ieee80211_tag_rm_enabled_capabilities_octet1[] = {",
          "12976:     &hf_ieee80211_tag_rm_enabled_capabilities_b0,",
          "12977:     &hf_ieee80211_tag_rm_enabled_capabilities_b1,",
          "12978:     &hf_ieee80211_tag_rm_enabled_capabilities_b2,",
          "12979:     &hf_ieee80211_tag_rm_enabled_capabilities_b3,",
          "12980:     &hf_ieee80211_tag_rm_enabled_capabilities_b4,",
          "12981:     &hf_ieee80211_tag_rm_enabled_capabilities_b5,",
          "12982:     &hf_ieee80211_tag_rm_enabled_capabilities_b6,",
          "12983:     &hf_ieee80211_tag_rm_enabled_capabilities_b7,",
          "12984:     NULL",
          "12985:   };",
          "12987:   static const int *ieee80211_tag_rm_enabled_capabilities_octet2[] = {",
          "12988:     &hf_ieee80211_tag_rm_enabled_capabilities_b8,",
          "12989:     &hf_ieee80211_tag_rm_enabled_capabilities_b9,",
          "12990:     &hf_ieee80211_tag_rm_enabled_capabilities_b10,",
          "12991:     &hf_ieee80211_tag_rm_enabled_capabilities_b11,",
          "12992:     &hf_ieee80211_tag_rm_enabled_capabilities_b12,",
          "12993:     &hf_ieee80211_tag_rm_enabled_capabilities_b13,",
          "12994:     &hf_ieee80211_tag_rm_enabled_capabilities_b14,",
          "12995:     &hf_ieee80211_tag_rm_enabled_capabilities_b15,",
          "12996:     NULL",
          "12997:   };",
          "12999:   static const int *ieee80211_tag_rm_enabled_capabilities_octet3[] = {",
          "13000:     &hf_ieee80211_tag_rm_enabled_capabilities_b16,",
          "13001:     &hf_ieee80211_tag_rm_enabled_capabilities_b17,",
          "13002:     &hf_ieee80211_tag_rm_enabled_capabilities_b18to20,",
          "13003:     &hf_ieee80211_tag_rm_enabled_capabilities_b21to23,",
          "13004:     NULL",
          "13005:   };",
          "13007:   static const int *ieee80211_tag_rm_enabled_capabilities_octet4[] = {",
          "13008:     &hf_ieee80211_tag_rm_enabled_capabilities_b24to26,",
          "13009:     &hf_ieee80211_tag_rm_enabled_capabilities_b27,",
          "13010:     &hf_ieee80211_tag_rm_enabled_capabilities_b28,",
          "13011:     &hf_ieee80211_tag_rm_enabled_capabilities_b29,",
          "13012:     &hf_ieee80211_tag_rm_enabled_capabilities_b30,",
          "13013:     &hf_ieee80211_tag_rm_enabled_capabilities_b31,",
          "13014:     NULL",
          "13015:   };",
          "13017:   static const int *ieee80211_tag_rm_enabled_capabilities_octet5[] = {",
          "13018:     &hf_ieee80211_tag_rm_enabled_capabilities_b32,",
          "13019:     &hf_ieee80211_tag_rm_enabled_capabilities_b33,",
          "13020:     &hf_ieee80211_tag_rm_enabled_capabilities_o5,",
          "13021:     NULL",
          "13022:   };",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "12898:   proto_item_append_text(field_data->item_tag, \" (%d octets)\", tag_len);",
          "12902:   proto_item_append_text(ti_ex_cap, \" (octet 1)\");",
          "12912:   offset += 1;",
          "12916:   proto_item_append_text(ti_ex_cap, \" (octet 2)\");",
          "12926:   offset += 1;",
          "12930:   proto_item_append_text(ti_ex_cap, \" (octet 3)\");",
          "12936:   offset += 1;",
          "12940:   proto_item_append_text(ti_ex_cap, \" (octet 4)\");",
          "12948:   offset += 1;",
          "12952:   proto_item_append_text(ti_ex_cap, \" (octet 5)\");",
          "12957:   offset += 1;",
          "12959:   return offset;",
          "",
          "[Removed Lines]",
          "12901:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_rm_enabled_capabilities, tvb, offset, 1, ENC_NA);",
          "12903:   ex_cap_tree = proto_item_add_subtree(ti_ex_cap, ett_tag_rm_cap1);",
          "12904:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b0, tvb, offset, 1, ENC_NA);",
          "12905:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b1, tvb, offset, 1, ENC_NA);",
          "12906:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b2, tvb, offset, 1, ENC_NA);",
          "12907:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b3, tvb, offset, 1, ENC_NA);",
          "12908:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b4, tvb, offset, 1, ENC_NA);",
          "12909:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b5, tvb, offset, 1, ENC_NA);",
          "12910:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b6, tvb, offset, 1, ENC_NA);",
          "12911:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b7, tvb, offset, 1, ENC_NA);",
          "12915:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_rm_enabled_capabilities, tvb, offset, 1, ENC_NA);",
          "12917:   ex_cap_tree = proto_item_add_subtree(ti_ex_cap, ett_tag_rm_cap2);",
          "12918:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b8, tvb, offset, 1, ENC_NA);",
          "12919:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b9, tvb, offset, 1, ENC_NA);",
          "12920:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b10, tvb, offset, 1, ENC_NA);",
          "12921:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b11, tvb, offset, 1, ENC_NA);",
          "12922:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b12, tvb, offset, 1, ENC_NA);",
          "12923:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b13, tvb, offset, 1, ENC_NA);",
          "12924:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b14, tvb, offset, 1, ENC_NA);",
          "12925:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b15, tvb, offset, 1, ENC_NA);",
          "12929:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_rm_enabled_capabilities, tvb, offset, 1, ENC_NA);",
          "12931:   ex_cap_tree = proto_item_add_subtree(ti_ex_cap, ett_tag_rm_cap3);",
          "12932:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b16, tvb, offset, 1, ENC_NA);",
          "12933:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b17, tvb, offset, 1, ENC_NA);",
          "12934:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b18to20, tvb, offset, 1, ENC_NA);",
          "12935:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b21to23, tvb, offset, 1, ENC_NA);",
          "12939:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_rm_enabled_capabilities, tvb, offset, 1, ENC_NA);",
          "12941:   ex_cap_tree = proto_item_add_subtree(ti_ex_cap, ett_tag_rm_cap4);",
          "12942:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b24to26, tvb, offset, 1, ENC_NA);",
          "12943:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b27, tvb, offset, 1, ENC_NA);",
          "12944:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b28, tvb, offset, 1, ENC_NA);",
          "12945:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b29, tvb, offset, 1, ENC_NA);",
          "12946:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b30, tvb, offset, 1, ENC_NA);",
          "12947:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b31, tvb, offset, 1, ENC_NA);",
          "12951:   ti_ex_cap = proto_tree_add_item(tree, hf_ieee80211_tag_rm_enabled_capabilities, tvb, offset, 1, ENC_NA);",
          "12953:   ex_cap_tree = proto_item_add_subtree(ti_ex_cap, ett_tag_rm_cap5);",
          "12954:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b32, tvb, offset, 1, ENC_NA);",
          "12955:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_b33, tvb, offset, 1, ENC_NA);",
          "12956:   proto_tree_add_item(ex_cap_tree, hf_ieee80211_tag_rm_enabled_capabilities_o5, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "13032:   ti_ex_cap = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_rm_enabled_capabilities,",
          "13033:                                     ett_tag_rm_cap1, ieee80211_tag_rm_enabled_capabilities_octet1,",
          "13034:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "13039:   ti_ex_cap = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_rm_enabled_capabilities,",
          "13040:                                     ett_tag_rm_cap2, ieee80211_tag_rm_enabled_capabilities_octet2,",
          "13041:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "13046:   ti_ex_cap = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_rm_enabled_capabilities,",
          "13047:                                     ett_tag_rm_cap3, ieee80211_tag_rm_enabled_capabilities_octet3,",
          "13048:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "13053:   ti_ex_cap = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_rm_enabled_capabilities,",
          "13054:                                     ett_tag_rm_cap4, ieee80211_tag_rm_enabled_capabilities_octet4,",
          "13055:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "13060:   ti_ex_cap = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_rm_enabled_capabilities,",
          "13061:                                     ett_tag_rm_cap5, ieee80211_tag_rm_enabled_capabilities_octet5,",
          "13062:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "12997: {",
          "12998:   proto_item *cap_item, *ti;",
          "12999:   proto_tree *cap_tree;",
          "13001:   if (tag_len != 26) {",
          "13002:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13107:   static const int *ieee80211_ht[] = {",
          "13108:     &hf_ieee80211_ht_ldpc_coding,",
          "13109:     &hf_ieee80211_ht_chan_width,",
          "13110:     &hf_ieee80211_ht_sm_pwsave,",
          "13111:     &hf_ieee80211_ht_green,",
          "13112:     &hf_ieee80211_ht_short20,",
          "13113:     &hf_ieee80211_ht_short40,",
          "13114:     &hf_ieee80211_ht_tx_stbc,",
          "13115:     &hf_ieee80211_ht_rx_stbc,",
          "13116:     &hf_ieee80211_ht_delayed_block_ack,",
          "13117:     &hf_ieee80211_ht_max_amsdu,",
          "13118:     &hf_ieee80211_ht_dss_cck_40,",
          "13119:     &hf_ieee80211_ht_psmp,",
          "13120:     &hf_ieee80211_ht_40_mhz_intolerant,",
          "13121:     &hf_ieee80211_ht_l_sig,",
          "13122:     NULL",
          "13123:   };",
          "13125:   static const int *ieee80211_htex[] = {",
          "13126:     &hf_ieee80211_htex_pco,",
          "13127:     &hf_ieee80211_htex_transtime,",
          "13128:     &hf_ieee80211_htex_mcs,",
          "13129:     &hf_ieee80211_htex_htc_support,",
          "13130:     &hf_ieee80211_htex_rd_responder,",
          "13131:     NULL",
          "13132:   };",
          "13134:   static const int *ieee80211_txbf[] = {",
          "13135:     &hf_ieee80211_txbf_cap,",
          "13136:     &hf_ieee80211_txbf_rcv_ssc,",
          "13137:     &hf_ieee80211_txbf_tx_ssc,",
          "13138:     &hf_ieee80211_txbf_rcv_ndp,",
          "13139:     &hf_ieee80211_txbf_tx_ndp,",
          "13140:     &hf_ieee80211_txbf_impl_txbf,",
          "13141:     &hf_ieee80211_txbf_calib,",
          "13142:     &hf_ieee80211_txbf_expl_csi,",
          "13143:     &hf_ieee80211_txbf_expl_uncomp_fm,",
          "13144:     &hf_ieee80211_txbf_expl_comp_fm,",
          "13145:     &hf_ieee80211_txbf_expl_bf_csi,",
          "13146:     &hf_ieee80211_txbf_expl_uncomp_fm_feed,",
          "13147:     &hf_ieee80211_txbf_expl_comp_fm_feed,",
          "13148:     &hf_ieee80211_txbf_min_group,",
          "13149:     &hf_ieee80211_txbf_csi_num_bf_ant,",
          "13150:     &hf_ieee80211_txbf_uncomp_sm_bf_ant,",
          "13151:     &hf_ieee80211_txbf_comp_sm_bf_ant,",
          "13152:     &hf_ieee80211_txbf_csi_max_rows_bf,",
          "13153:     &hf_ieee80211_txbf_chan_est,",
          "13154:     &hf_ieee80211_txbf_resrv,",
          "13155:     NULL",
          "13156:   };",
          "13158:   static const int *ieee80211_antsel[] = {",
          "13159:     &hf_ieee80211_antsel_b0,",
          "13160:     &hf_ieee80211_antsel_b1,",
          "13161:     &hf_ieee80211_antsel_b2,",
          "13162:     &hf_ieee80211_antsel_b3,",
          "13163:     &hf_ieee80211_antsel_b4,",
          "13164:     &hf_ieee80211_antsel_b5,",
          "13165:     &hf_ieee80211_antsel_b6,",
          "13166:     &hf_ieee80211_antsel_b7,",
          "13167:     NULL",
          "13168:   };",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "13011:   if (vendorspecific)",
          "13012:   {",
          "13014:   }",
          "13015:   else",
          "13016:   {",
          "13035:   offset += 2;",
          "",
          "[Removed Lines]",
          "13013:     cap_item = proto_tree_add_item(tree, hf_ieee80211_ht_vs_cap, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13017:     cap_item = proto_tree_add_item(tree, hf_ieee80211_ht_cap, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13018:   }",
          "13019:   cap_tree = proto_item_add_subtree(cap_item, ett_ht_cap_tree);",
          "13020:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_ldpc_coding, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13021:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_chan_width, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13022:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_sm_pwsave, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13023:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_green, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13024:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_short20, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13025:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_short40, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13026:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_tx_stbc, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13028:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_rx_stbc, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13029:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_delayed_block_ack, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13030:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_max_amsdu, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13031:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_dss_cck_40, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13032:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_psmp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13033:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_40_mhz_intolerant, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13034:   proto_tree_add_item(cap_tree, hf_ieee80211_ht_l_sig, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "13182:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ht_vs_cap,",
          "13183:                                     ett_ht_cap_tree, ieee80211_ht,",
          "13184:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "13188:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ht_cap,",
          "13189:                                     ett_ht_cap_tree, ieee80211_ht,",
          "13190:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "13191:   }",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "13057:   if (vendorspecific)",
          "13058:   {",
          "13060:   } else {",
          "13062:   }",
          "13070:   offset += 2;",
          "13074:   if (vendorspecific)",
          "13075:   {",
          "13077:   } else {",
          "13104:   offset += 4;",
          "13107:   if (vendorspecific)",
          "13108:   {",
          "13110:   }",
          "13111:   else",
          "13112:   {",
          "13125:   offset += 1;",
          "13127:   return offset;",
          "",
          "[Removed Lines]",
          "13059:     cap_item = proto_tree_add_item(tree, hf_ieee80211_htex_vs_cap, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13061:     cap_item = proto_tree_add_item(tree, hf_ieee80211_htex_cap, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13063:   cap_tree = proto_item_add_subtree(cap_item, ett_htex_cap_tree);",
          "13064:   proto_tree_add_item(cap_tree, hf_ieee80211_htex_pco, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13065:   proto_tree_add_item(cap_tree, hf_ieee80211_htex_transtime, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13067:   proto_tree_add_item(cap_tree, hf_ieee80211_htex_mcs, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13068:   proto_tree_add_item(cap_tree, hf_ieee80211_htex_htc_support, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13069:   proto_tree_add_item(cap_tree, hf_ieee80211_htex_rd_responder, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13076:     cap_item = proto_tree_add_item(tree, hf_ieee80211_txbf_vs, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13078:     cap_item = proto_tree_add_item(tree, hf_ieee80211_txbf, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13079:   }",
          "13080:   cap_tree = proto_item_add_subtree(cap_item, ett_txbf_tree);",
          "13081:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_cap, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13082:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_rcv_ssc, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13083:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_tx_ssc, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13084:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_rcv_ndp, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13085:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_tx_ndp, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13086:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_impl_txbf, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13087:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_calib, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13089:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_expl_csi, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13090:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_expl_uncomp_fm, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13091:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_expl_comp_fm, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13092:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_expl_bf_csi, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13093:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_expl_uncomp_fm_feed, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13094:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_expl_comp_fm_feed, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13096:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_min_group, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13097:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_csi_num_bf_ant, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13098:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_uncomp_sm_bf_ant, tvb, offset, 4,  ENC_LITTLE_ENDIAN);",
          "13099:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_comp_sm_bf_ant, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13101:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_csi_max_rows_bf, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13102:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_chan_est, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13103:   proto_tree_add_item(cap_tree, hf_ieee80211_txbf_resrv, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "13109:     cap_item = proto_tree_add_item(tree, hf_ieee80211_antsel_vs, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13113:     cap_item = proto_tree_add_item(tree, hf_ieee80211_antsel, tvb,  offset, 1, ENC_LITTLE_ENDIAN);",
          "13114:   }",
          "13115:   cap_tree = proto_item_add_subtree(cap_item, ett_antsel_tree);",
          "13116:   proto_tree_add_item(cap_tree, hf_ieee80211_antsel_b0, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13117:   proto_tree_add_item(cap_tree, hf_ieee80211_antsel_b1, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13118:   proto_tree_add_item(cap_tree, hf_ieee80211_antsel_b2, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13119:   proto_tree_add_item(cap_tree, hf_ieee80211_antsel_b3, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13120:   proto_tree_add_item(cap_tree, hf_ieee80211_antsel_b4, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13121:   proto_tree_add_item(cap_tree, hf_ieee80211_antsel_b5, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13122:   proto_tree_add_item(cap_tree, hf_ieee80211_antsel_b6, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13123:   proto_tree_add_item(cap_tree, hf_ieee80211_antsel_b7, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "13216:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_htex_vs_cap,",
          "13217:                                     ett_htex_cap_tree, ieee80211_htex,",
          "13218:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "13220:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_htex_cap,",
          "13221:                                     ett_htex_cap_tree, ieee80211_htex,",
          "13222:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "13230:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_txbf_vs,",
          "13231:                                     ett_txbf_tree, ieee80211_txbf,",
          "13232:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "13234:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_txbf,",
          "13235:                                     ett_txbf_tree, ieee80211_txbf,",
          "13236:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "13237:   }",
          "13243:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_antsel_vs,",
          "13244:                                     ett_antsel_tree, ieee80211_antsel,",
          "13245:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "13249:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_antsel,",
          "13250:                                     ett_antsel_tree, ieee80211_antsel,",
          "13251:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "13252:   }",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "13140: dissect_ht_info_ie_1_0(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "13141:                        guint32 tag_len, proto_item *ti_len)",
          "13142: {",
          "13146:   if (tag_len != 22) {",
          "13147:     expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,",
          "",
          "[Removed Lines]",
          "13143:   proto_item *cap_item;",
          "13144:   proto_tree *cap_tree;",
          "",
          "[Added Lines]",
          "13271:   static const int *ieee80211_hta1[] = {",
          "13272:     &hf_ieee80211_hta_ext_chan_offset,",
          "13273:     &hf_ieee80211_hta_rec_tx_width,",
          "13274:     &hf_ieee80211_hta_rifs_mode,",
          "13275:     &hf_ieee80211_hta_controlled_access,",
          "13276:     &hf_ieee80211_hta_service_interval,",
          "13277:     NULL",
          "13278:   };",
          "13280:   static const int *ieee80211_hta2[] = {",
          "13281:     &hf_ieee80211_hta_operating_mode,",
          "13282:     &hf_ieee80211_hta_non_gf_devices,",
          "13283:     NULL",
          "13284:   };",
          "13286:   static const int *ieee80211_hta3[] = {",
          "13287:     &hf_ieee80211_hta_basic_stbc_mcs,",
          "13288:     &hf_ieee80211_hta_dual_stbc_protection,",
          "13289:     &hf_ieee80211_hta_secondary_beacon,",
          "13290:     &hf_ieee80211_hta_lsig_txop_protection,",
          "13291:     &hf_ieee80211_hta_pco_active,",
          "13292:     &hf_ieee80211_hta_pco_phase,",
          "13293:     NULL",
          "13294:   };",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "13157:   offset += 1;",
          "13174:   offset += 1;",
          "13186:   offset += 2;",
          "13205:   offset += 2;",
          "",
          "[Removed Lines]",
          "13160:   cap_item = proto_tree_add_item(tree, hf_ieee80211_hta_cap, tvb, offset, 1,",
          "13161:              ENC_LITTLE_ENDIAN);",
          "13162:   cap_tree = proto_item_add_subtree(cap_item, ett_hta_cap_tree);",
          "13164:   proto_tree_add_item(cap_tree, hf_ieee80211_hta_ext_chan_offset, tvb, offset, 1,",
          "13165:              ENC_LITTLE_ENDIAN);",
          "13166:   proto_tree_add_item(cap_tree, hf_ieee80211_hta_rec_tx_width, tvb, offset, 1,",
          "13167:              ENC_LITTLE_ENDIAN);",
          "13168:   proto_tree_add_item(cap_tree, hf_ieee80211_hta_rifs_mode, tvb, offset, 1,",
          "13169:              ENC_LITTLE_ENDIAN);",
          "13170:   proto_tree_add_item(cap_tree, hf_ieee80211_hta_controlled_access, tvb, offset, 1,",
          "13171:              ENC_LITTLE_ENDIAN);",
          "13172:   proto_tree_add_item(cap_tree, hf_ieee80211_hta_service_interval, tvb, offset, 1,",
          "13173:              ENC_LITTLE_ENDIAN);",
          "13177:   cap_item = proto_tree_add_item(tree, hf_ieee80211_hta_cap, tvb, offset, 2,",
          "13178:              ENC_LITTLE_ENDIAN);",
          "13179:   cap_tree = proto_item_add_subtree(cap_item, ett_hta_cap1_tree);",
          "13181:   proto_tree_add_item(cap_tree, hf_ieee80211_hta_operating_mode, tvb, offset, 2,",
          "13182:              ENC_LITTLE_ENDIAN);",
          "13183:   proto_tree_add_item(cap_tree, hf_ieee80211_hta_non_gf_devices, tvb, offset, 2,",
          "13184:              ENC_LITTLE_ENDIAN);",
          "13189:   cap_item = proto_tree_add_item(tree, hf_ieee80211_hta_cap, tvb, offset, 2,",
          "13190:              ENC_LITTLE_ENDIAN);",
          "13191:   cap_tree = proto_item_add_subtree(cap_item, ett_hta_cap2_tree);",
          "13193:   proto_tree_add_item(cap_tree, hf_ieee80211_hta_basic_stbc_mcs, tvb, offset, 2,",
          "13194:              ENC_LITTLE_ENDIAN);",
          "13195:   proto_tree_add_item(cap_tree, hf_ieee80211_hta_dual_stbc_protection, tvb, offset, 2,",
          "13196:              ENC_LITTLE_ENDIAN);",
          "13197:   proto_tree_add_item(cap_tree, hf_ieee80211_hta_secondary_beacon, tvb, offset, 2,",
          "13198:              ENC_LITTLE_ENDIAN);",
          "13199:   proto_tree_add_item(cap_tree, hf_ieee80211_hta_lsig_txop_protection, tvb, offset, 2,",
          "13200:              ENC_LITTLE_ENDIAN);",
          "13201:   proto_tree_add_item(cap_tree, hf_ieee80211_hta_pco_active, tvb, offset, 2,",
          "13202:              ENC_LITTLE_ENDIAN);",
          "13203:   proto_tree_add_item(cap_tree, hf_ieee80211_hta_pco_phase, tvb, offset, 2,",
          "13204:              ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "13310:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_hta_cap1,",
          "13311:                                     ett_hta_cap_tree, ieee80211_hta1,",
          "13312:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "13316:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_hta_cap2,",
          "13317:                                     ett_hta_cap1_tree, ieee80211_hta2,",
          "13318:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "13322:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_hta_cap2,",
          "13323:                                     ett_hta_cap2_tree, ieee80211_hta3,",
          "13324:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "13467:   int tag_len = tvb_reported_length(tvb);",
          "13468:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13469:   int offset = 0;",
          "13481:   offset += 1;",
          "13483:   if ((tag_len == (1 + 2)) || (tag_len == (1 + 2 + 6))) {",
          "",
          "[Removed Lines]",
          "13471:   proto_tree_add_item(tree, hf_ieee80211_tag_interworking_access_network_type,",
          "13472:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13473:   proto_tree_add_item(tree, hf_ieee80211_tag_interworking_internet,",
          "13474:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13475:   proto_tree_add_item(tree, hf_ieee80211_tag_interworking_asra,",
          "13476:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13477:   proto_tree_add_item(tree, hf_ieee80211_tag_interworking_esr,",
          "13478:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13479:   proto_tree_add_item(tree, hf_ieee80211_tag_interworking_uesa,",
          "13480:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "13590:   static const int *ieee80211_tag_interworking[] = {",
          "13591:     &hf_ieee80211_tag_interworking_access_network_type,",
          "13592:     &hf_ieee80211_tag_interworking_internet,",
          "13593:     &hf_ieee80211_tag_interworking_asra,",
          "13594:     &hf_ieee80211_tag_interworking_esr,",
          "13595:     &hf_ieee80211_tag_interworking_uesa,",
          "13596:     NULL",
          "13597:   };",
          "13599:   proto_tree_add_bitmask_list(tree, tvb, offset, 1, ieee80211_tag_interworking, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "13973:   int tag_len = tvb_reported_length(tvb);",
          "13974:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "13975:   int offset = 0;",
          "13978:   guint aid, pvb_len, n1, i, j, byte;",
          "13981:   if (tag_len < 4) {",
          "",
          "[Removed Lines]",
          "13976:   proto_tree *bmapctl_tree;",
          "13977:   proto_item *bmapctl_item;",
          "",
          "[Added Lines]",
          "14096:   static const int *ieee80211_tim_bmapctl[] = {",
          "14097:     &hf_ieee80211_tim_bmapctl_mcast,",
          "14098:     &hf_ieee80211_tim_bmapctl_offset,",
          "14099:     NULL",
          "14100:   };",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "13994:   proto_item_append_text(field_data->item_tag, \" %u bitmap\", tvb_get_guint8(tvb, offset + 1));",
          "13995:   offset += 1;",
          "14004:   pvb_len = tag_len - 3;",
          "14005:   n1 = tvb_get_guint8(tvb, offset) & 0xFE;",
          "14006:   offset += 1;",
          "",
          "[Removed Lines]",
          "13997:   bmapctl_item = proto_tree_add_item(tree, hf_ieee80211_tim_bmapctl,",
          "13998:                                      tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "13999:   bmapctl_tree = proto_item_add_subtree(bmapctl_item, ett_tag_bmapctl_tree);",
          "14000:   proto_tree_add_item(bmapctl_tree, hf_ieee80211_tim_bmapctl_mcast,",
          "14001:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14002:   proto_tree_add_item(bmapctl_tree, hf_ieee80211_tim_bmapctl_offset,",
          "14003:                       tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "14119:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tim_bmapctl,",
          "14120:                                     ett_tag_bmapctl_tree, ieee80211_tim_bmapctl,",
          "14121:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "14439:   int offset = 0;",
          "14440:   guint8 type;",
          "14441:   guint8 version;",
          "14444:   if (tag_len < 5)",
          "14445:   {",
          "14446:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag length %u too short, must be >= 5\", tag_len);",
          "",
          "[Removed Lines]",
          "14442:   proto_item *class_mask;",
          "14443:   proto_tree *mask_tree;",
          "",
          "[Added Lines]",
          "14560:   static const int *ieee80211_tclas_class_mask0[] = {",
          "14561:     &hf_ieee80211_tclas_class_mask0_src_addr,",
          "14562:     &hf_ieee80211_tclas_class_mask0_dst_addr,",
          "14563:     &hf_ieee80211_tclas_class_mask0_type,",
          "14564:     NULL",
          "14565:   };",
          "14567:   static const int *ieee80211_tclas_class_mask1[] = {",
          "14568:     &hf_ieee80211_tclas_class_mask1_ver,",
          "14569:     &hf_ieee80211_tclas_class_mask1_src_ip,",
          "14570:     &hf_ieee80211_tclas_class_mask1_dst_ip,",
          "14571:     &hf_ieee80211_tclas_class_mask1_src_port,",
          "14572:     &hf_ieee80211_tclas_class_mask1_dst_port,",
          "14573:     &hf_ieee80211_tclas_class_mask1_ipv6_flow,",
          "14574:     NULL",
          "14575:   };",
          "14577:   static const int *ieee80211_tclas_class_mask1_4[] = {",
          "14578:     &hf_ieee80211_tclas_class_mask1_ver,",
          "14579:     &hf_ieee80211_tclas_class_mask1_src_ip,",
          "14580:     &hf_ieee80211_tclas_class_mask1_dst_ip,",
          "14581:     &hf_ieee80211_tclas_class_mask1_src_port,",
          "14582:     &hf_ieee80211_tclas_class_mask1_dst_port,",
          "14583:     &hf_ieee80211_tclas_class_mask1_ipv4_dscp,",
          "14584:     &hf_ieee80211_tclas_class_mask1_ipv4_proto,",
          "14585:     NULL",
          "14586:   };",
          "14588:   static const int *ieee80211_tclas_class_mask2[] = {",
          "14589:     &hf_ieee80211_tclas_class_mask2_tci,",
          "14590:     NULL",
          "14591:   };",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "14454:   proto_tree_add_item(tree, hf_ieee80211_tclas_class_type, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14455:   offset += 1;",
          "14461:   switch (type)",
          "14462:   {",
          "14463:   case 0:",
          "14472:     offset++;",
          "14474:     proto_tree_add_item(tree, hf_ieee80211_tclas_src_mac_addr, tvb, offset, 6, ENC_NA);",
          "",
          "[Removed Lines]",
          "14457:   class_mask = proto_tree_add_item(tree, hf_ieee80211_tclas_class_mask,",
          "14458:                                        tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14459:   offset += 1;",
          "14464:     offset--;",
          "14465:     mask_tree = proto_item_add_subtree(class_mask, ett_tag_tclas_mask_tree);",
          "14466:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask0_src_addr,",
          "14467:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14468:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask0_dst_addr,",
          "14469:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14470:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask0_type,",
          "14471:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "14609:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tclas_class_mask,",
          "14610:                                     ett_tag_tclas_mask_tree, ieee80211_tclas_class_mask0,",
          "14611:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "14482:     break;",
          "14484:   case 1:",
          "14499:     if (version == 4) {",
          "14504:     } else {",
          "14507:     }",
          "14508:     offset += 1;",
          "",
          "[Removed Lines]",
          "14485:     version = tvb_get_guint8(tvb, offset);",
          "14486:     offset--;",
          "14488:     mask_tree = proto_item_add_subtree(class_mask, ett_tag_tclas_mask_tree);",
          "14489:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_ver,",
          "14490:                             tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14491:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_src_ip,",
          "14492:                             tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14493:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_dst_ip,",
          "14494:                             tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14495:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_src_port,",
          "14496:                             tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14497:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_dst_port,",
          "14498:                             tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14500:       proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_ipv4_dscp,",
          "14501:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14502:       proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_ipv4_proto,",
          "14503:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "14505:       proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask1_ipv6_flow,",
          "14506:                                 tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "14625:     version = tvb_get_guint8(tvb, offset+1);",
          "14627:       proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tclas_class_mask,",
          "14628:                                     ett_tag_tclas_mask_tree, ieee80211_tclas_class_mask1_4,",
          "14629:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "14631:       proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tclas_class_mask,",
          "14632:                                     ett_tag_tclas_mask_tree, ieee80211_tclas_class_mask1,",
          "14633:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "14540:     break;",
          "14542:   case 2:",
          "14547:     offset++;",
          "14549:     proto_tree_add_item(tree, hf_ieee80211_tclas_tag_type, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "14543:     offset--;",
          "14544:     mask_tree = proto_item_add_subtree(class_mask, ett_tag_tclas_mask_tree);",
          "14545:     proto_tree_add_item(mask_tree, hf_ieee80211_tclas_class_mask2_tci,",
          "14546:                             tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "14670:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tclas_class_mask,",
          "14671:                                     ett_tag_tclas_mask_tree, ieee80211_tclas_class_mask2,",
          "14672:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "14746:   guint8 request_type;",
          "14747:   proto_item *parent_item;",
          "14748:   proto_tree *sub_tree;",
          "14749:   if (tag_len < 3)",
          "14750:   {",
          "14751:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag length %u too short, must be >= 3\", tag_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14875:   static const int *ieee80211_tag_measure_request_mode[] = {",
          "14876:     &hf_ieee80211_tag_measure_request_mode_parallel,",
          "14877:     &hf_ieee80211_tag_measure_request_mode_enable,",
          "14878:     &hf_ieee80211_tag_measure_request_mode_request,",
          "14879:     &hf_ieee80211_tag_measure_request_mode_report,",
          "14880:     &hf_ieee80211_tag_measure_request_mode_duration_mandatory,",
          "14881:     &hf_ieee80211_tag_measure_request_mode_reserved,",
          "14882:     NULL",
          "14883:   };",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "14754:   proto_tree_add_item(tree, hf_ieee80211_tag_measure_request_token, tvb, offset, 1, ENC_NA);",
          "14755:   offset += 1;",
          "14765:   offset += 1;",
          "14768:   parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_request_type, tvb, offset, 1, ENC_NA);",
          "14769:   sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_request_type_tree);",
          "14770:   request_type = tvb_get_guint8(tvb, offset);",
          "",
          "[Removed Lines]",
          "14757:   parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_request_mode, tvb, offset, 1, ENC_NA);",
          "14758:   sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_request_mode_tree);",
          "14759:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_parallel, tvb, offset, 1, ENC_NA);",
          "14760:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_enable, tvb, offset, 1, ENC_NA);",
          "14761:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_request, tvb, offset, 1, ENC_NA);",
          "14762:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_report, tvb, offset, 1, ENC_NA);",
          "14763:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_duration_mandatory, tvb, offset, 1, ENC_NA);",
          "14764:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_reserved, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "14893:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_measure_request_mode,",
          "14894:                                     ett_tag_measure_request_mode_tree, ieee80211_tag_measure_request_mode,",
          "14895:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "15011:   proto_item *parent_item;",
          "15012:   proto_tree *sub_tree;",
          "15013:   guint8 report_type;",
          "15014:   if (tag_len < 3)",
          "15015:   {",
          "15016:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag length %u too short, must be >= 3\", tag_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15144:   static const int *ieee80211_tag_measure_report_mode[] = {",
          "15145:     &hf_ieee80211_tag_measure_report_mode_late,",
          "15146:     &hf_ieee80211_tag_measure_report_mode_incapable,",
          "15147:     &hf_ieee80211_tag_measure_report_mode_refused,",
          "15148:     &hf_ieee80211_tag_measure_report_mode_reserved,",
          "15149:     NULL",
          "15150:   };",
          "15151:   static const int *ieee80211_tag_measure_map_field[] = {",
          "15152:     &hf_ieee80211_tag_measure_map_field_bss,",
          "15153:     &hf_ieee80211_tag_measure_map_field_odfm,",
          "15154:     &hf_ieee80211_tag_measure_map_field_unident_signal,",
          "15155:     &hf_ieee80211_tag_measure_map_field_radar,",
          "15156:     &hf_ieee80211_tag_measure_map_field_unmeasured,",
          "15157:     &hf_ieee80211_tag_measure_map_field_reserved,",
          "15158:     NULL",
          "15159:   };",
          "15160:   static const int *ieee80211_tag_measure_report_frame_info[] = {",
          "15161:     &hf_ieee80211_tag_measure_report_frame_info_phy_type,",
          "15162:     &hf_ieee80211_tag_measure_report_frame_info_frame_type,",
          "15163:     NULL",
          "15164:   };",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "15019:   proto_tree_add_item(tree, hf_ieee80211_tag_measure_report_measurement_token, tvb, offset, 1, ENC_NA);",
          "15020:   offset += 1;",
          "15028:   offset += 1;",
          "15030:   report_type = tvb_get_guint8(tvb, offset);",
          "",
          "[Removed Lines]",
          "15022:   parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_report_mode, tvb, offset, 1, ENC_NA);",
          "15023:   sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_report_mode_tree);",
          "15024:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_late, tvb, offset, 1, ENC_NA);",
          "15025:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_incapable, tvb, offset, 1, ENC_NA);",
          "15026:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_refused, tvb, offset, 1, ENC_NA);",
          "15027:   proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_reserved, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "15174:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_measure_report_mode,",
          "15175:                                     ett_tag_measure_report_mode_tree, ieee80211_tag_measure_report_mode,",
          "15176:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "15038:   switch (report_type) {",
          "15040:   {",
          "15043:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);",
          "15044:     offset += 1;",
          "",
          "[Removed Lines]",
          "15041:     proto_tree *sub_tree_map_field;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "15049:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15050:     offset += 2;",
          "15060:     break;",
          "15061:   }",
          "",
          "[Removed Lines]",
          "15052:     parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_basic_map_field, tvb, offset, 1, ENC_NA);",
          "15053:     sub_tree_map_field = proto_item_add_subtree(parent_item, ett_tag_measure_report_basic_map_tree);",
          "15054:     proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_bss, tvb, offset, 1, ENC_NA);",
          "15055:     proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_odfm, tvb, offset, 1, ENC_NA);",
          "15056:     proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_unident_signal, tvb, offset, 1, ENC_NA);",
          "15057:     proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_radar, tvb, offset, 1, ENC_NA);",
          "15058:     proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_unmeasured, tvb, offset, 1, ENC_NA);",
          "15059:     proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_reserved, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "15199:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_measure_basic_map_field,",
          "15200:                                     ett_tag_measure_report_basic_map_tree, ieee80211_tag_measure_map_field,",
          "15201:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "15185:     break;",
          "15187:   {",
          "15190:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_operating_class, tvb, offset, 1, ENC_NA);",
          "15191:     offset += 1;",
          "",
          "[Removed Lines]",
          "15188:     proto_tree *sub_tree_frame_info;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "15199:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15200:     offset += 2;",
          "15206:     offset += 1;",
          "15208:     proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_rcpi, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "15202:     parent_item = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_frame_info, tvb, offset, 1, ENC_NA);",
          "15203:     sub_tree_frame_info = proto_item_add_subtree(parent_item, ett_tag_measure_report_frame_tree);",
          "15204:     proto_tree_add_item(sub_tree_frame_info, hf_ieee80211_tag_measure_report_frame_info_phy_type, tvb, offset, 1, ENC_NA);",
          "15205:     proto_tree_add_item(sub_tree_frame_info, hf_ieee80211_tag_measure_report_frame_info_frame_type, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "15342:     proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_measure_report_frame_info,",
          "15343:                                     ett_tag_measure_report_frame_tree, ieee80211_tag_measure_report_frame_info,",
          "15344:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "15370:   int tag_len = tvb_reported_length(tvb);",
          "15371:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15372:   int offset = 0;",
          "15375:   if (tag_len != 1)",
          "15376:   {",
          "15377:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 1\", tag_len);",
          "15378:     return tvb_captured_length(tvb);",
          "15379:   }",
          "15388:   return tvb_captured_length(tvb);",
          "15389: }",
          "",
          "[Removed Lines]",
          "15373:   proto_item *ti_erp;",
          "15374:   proto_tree *erp_tree;",
          "15381:   ti_erp = proto_tree_add_item(tree, hf_ieee80211_tag_erp_info, tvb, offset, 1, ENC_NA);",
          "15382:   erp_tree = proto_item_add_subtree(ti_erp, ett_tag_erp_info_tree);",
          "15383:   proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_erp_present, tvb, offset, 1, ENC_NA);",
          "15384:   proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_use_protection, tvb, offset, 1, ENC_NA);",
          "15385:   proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_barker_preamble_mode, tvb, offset, 1, ENC_NA);",
          "15386:   proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_reserved, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "15512:   static const int *ieee80211_tag_erp_info[] = {",
          "15513:     &hf_ieee80211_tag_erp_info_erp_present,",
          "15514:     &hf_ieee80211_tag_erp_info_use_protection,",
          "15515:     &hf_ieee80211_tag_erp_info_barker_preamble_mode,",
          "15516:     &hf_ieee80211_tag_erp_info_reserved,",
          "15517:     NULL",
          "15518:   };",
          "15526:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_erp_info,",
          "15527:                                     ett_tag_erp_info_tree, ieee80211_tag_erp_info,",
          "15528:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "15649:   int offset = 0;",
          "15650:   proto_item *item;",
          "15651:   proto_tree *subtree;",
          "15652:   proto_tree_add_item(tree, hf_ieee80211_mesh_config_path_sel_protocol, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15653:   proto_tree_add_item(tree, hf_ieee80211_mesh_config_path_sel_metric, tvb, offset + 1, 1, ENC_LITTLE_ENDIAN);",
          "15654:   proto_tree_add_item(tree, hf_ieee80211_mesh_config_congestion_control, tvb, offset + 2, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15794:   static const int *ieee80211_mesh_config_cap[] = {",
          "15795:     &hf_ieee80211_mesh_config_cap_accepting,",
          "15796:     &hf_ieee80211_mesh_config_cap_mcca_support,",
          "15797:     &hf_ieee80211_mesh_config_cap_mcca_enabled,",
          "15798:     &hf_ieee80211_mesh_config_cap_forwarding,",
          "15799:     &hf_ieee80211_mesh_config_cap_mbca_enabled,",
          "15800:     &hf_ieee80211_mesh_config_cap_tbtt_adjusting,",
          "15801:     &hf_ieee80211_mesh_config_cap_power_save_level,",
          "15802:     NULL",
          "15803:   };",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "15657:   item = proto_tree_add_item(tree, hf_ieee80211_mesh_config_formation_info, tvb, offset + 5, 1, ENC_LITTLE_ENDIAN);",
          "15658:   subtree = proto_item_add_subtree(item, ett_mesh_formation_info_tree);",
          "15659:   proto_tree_add_item(subtree, hf_ieee80211_mesh_form_info_num_of_peerings, tvb, offset + 5, 1, ENC_LITTLE_ENDIAN);",
          "15669:   return tvb_captured_length(tvb);",
          "15670: }",
          "",
          "[Removed Lines]",
          "15660:   item = proto_tree_add_item(tree, hf_ieee80211_mesh_config_capability, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15661:   subtree = proto_item_add_subtree(item, ett_mesh_config_cap_tree);",
          "15662:   proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_accepting, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15663:   proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_mcca_support, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15664:   proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_mcca_enabled, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15665:   proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_forwarding, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15666:   proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_mbca_enabled, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15667:   proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_tbtt_adjusting, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "15668:   proto_tree_add_item(subtree, hf_ieee80211_mesh_config_cap_power_save_level, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "15814:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_mesh_config_capability,",
          "15815:                                     ett_mesh_config_cap_tree, ieee80211_mesh_config_cap,",
          "15816:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "15825:   int tag_len = tvb_reported_length(tvb);",
          "15826:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15827:   int offset = 0;",
          "15830:   if (tag_len != 6)",
          "15831:   {",
          "15832:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 6\", tag_len);",
          "",
          "[Removed Lines]",
          "15828:   proto_item *item;",
          "15829:   proto_tree *subtree;",
          "",
          "[Added Lines]",
          "15976:   static const int * ieee80211_mesh_chswitch_flag[] = {",
          "15977:     &hf_ieee80211_mesh_chswitch_flag_initiator,",
          "15978:     &hf_ieee80211_mesh_chswitch_flag_txrestrict,",
          "15979:     NULL",
          "15980:   };",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "15837:   proto_item_append_text(field_data->item_tag, \" TTL: %d\", tvb_get_guint8(tvb, offset));",
          "15838:   offset += 1;",
          "15844:   offset += 1;",
          "15846:   proto_tree_add_item(tree, hf_ieee80211_mesh_channel_switch_reason_code, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "15840:   item = proto_tree_add_item(tree, hf_ieee80211_mesh_channel_switch_flag, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15841:   subtree = proto_item_add_subtree(item, ett_mesh_chswitch_flag_tree);",
          "15842:   proto_tree_add_item(subtree, hf_ieee80211_mesh_chswitch_flag_initiator, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "15843:   proto_tree_add_item(subtree, hf_ieee80211_mesh_chswitch_flag_txrestrict, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "15992:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_mesh_channel_switch_flag,",
          "15993:                                    ett_mesh_chswitch_flag_tree, ieee80211_mesh_chswitch_flag, ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "15949:   int tag_len = tvb_reported_length(tvb);",
          "15950:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15951:   int offset = 0;",
          "15952:   if (tag_len != 17)",
          "15953:   {",
          "15954:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 17\", tag_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16102:   static const int * ieee80211_tag_dmg_cap1[] = {",
          "16103:     &hf_ieee80211_tag_reverse_direction,",
          "16104:     &hf_ieee80211_tag_hlts,",
          "16105:     &hf_ieee80211_tag_tpc,",
          "16106:     &hf_ieee80211_tag_spsh,",
          "16107:     &hf_ieee80211_tag_rx_antenna,",
          "16108:     &hf_ieee80211_tag_fast_link,",
          "16109:     &hf_ieee80211_tag_num_sectors,",
          "16110:     &hf_ieee80211_tag_rxss_length,",
          "16111:     &hf_ieee80211_tag_reciprocity,",
          "16112:     &hf_ieee80211_tag_max_ampdu_exp,",
          "16113:     NULL",
          "16114:   };",
          "16116:   static const int * ieee80211_tag_dmg_cap2[] = {",
          "16117:     &hf_ieee80211_tag_min_mpdu_spacing,",
          "16118:     &hf_ieee80211_tag_ba_flow_control,",
          "16119:     &hf_ieee80211_tag_max_sc_rx_mcs,",
          "16120:     &hf_ieee80211_tag_max_ofdm_rx_mcs,",
          "16121:     &hf_ieee80211_tag_max_sc_tx_mcs,",
          "16122:     &hf_ieee80211_tag_max_ofdm_tx_mcs,",
          "16123:     NULL",
          "16124:   };",
          "16126:   static const int * ieee80211_tag_dmg_cap3[] = {",
          "16127:     &hf_ieee80211_tag_low_power_supported,",
          "16128:     &hf_ieee80211_tag_code_rate,",
          "16129:     &hf_ieee80211_tag_dtp,",
          "16130:     &hf_ieee80211_tag_appdu_supp,",
          "16131:     &hf_ieee80211_tag_heartbeat,",
          "16132:     &hf_ieee80211_tag_other_aid,",
          "16133:     &hf_ieee80211_tag_pattern_recip,",
          "16134:     &hf_ieee80211_tag_heartbeat_elapsed,",
          "16135:     &hf_ieee80211_tag_grant_ack_supp,",
          "16136:     &hf_ieee80211_tag_RXSSTxRate_supp,",
          "16137:     NULL",
          "16138:   };",
          "16140:   static const int * ieee80211_tag_dmg_cap4[] = {",
          "16141:     &hf_ieee80211_tag_pcp_tddti,",
          "16142:     &hf_ieee80211_tag_pcp_PSA,",
          "16143:     &hf_ieee80211_tag_pcp_handover,",
          "16144:     &hf_ieee80211_tag_pcp_max_assoc,",
          "16145:     &hf_ieee80211_tag_pcp_power_src,",
          "16146:     &hf_ieee80211_tag_pcp_decenter,",
          "16147:     &hf_ieee80211_tag_pcp_forwarding,",
          "16148:     &hf_ieee80211_tag_pcp_center,",
          "16149:     NULL",
          "16150:   };",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "15958:   offset += 6;",
          "15959:   proto_tree_add_item(tree, hf_ieee80211_tag_dmg_capa_aid, tvb, offset, 1, ENC_NA);",
          "15960:   offset += 1;",
          "15971:   offset += 3;",
          "15978:   offset += 3;",
          "15989:   offset += 2;",
          "15998:   return tvb_captured_length(tvb);",
          "15999: }",
          "",
          "[Removed Lines]",
          "15961:   proto_tree_add_item(tree, hf_ieee80211_tag_reverse_direction, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15962:   proto_tree_add_item(tree, hf_ieee80211_tag_hlts, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15963:   proto_tree_add_item(tree, hf_ieee80211_tag_tpc, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15964:   proto_tree_add_item(tree, hf_ieee80211_tag_spsh, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15965:   proto_tree_add_item(tree, hf_ieee80211_tag_rx_antenna, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15966:   proto_tree_add_item(tree, hf_ieee80211_tag_fast_link, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15967:   proto_tree_add_item(tree, hf_ieee80211_tag_num_sectors, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15968:   proto_tree_add_item(tree, hf_ieee80211_tag_rxss_length, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15969:   proto_tree_add_item(tree, hf_ieee80211_tag_reciprocity, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15970:   proto_tree_add_item(tree, hf_ieee80211_tag_max_ampdu_exp, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15972:   proto_tree_add_item(tree, hf_ieee80211_tag_min_mpdu_sapcing, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15973:   proto_tree_add_item(tree, hf_ieee80211_tag_ba_flow_control, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15974:   proto_tree_add_item(tree, hf_ieee80211_tag_max_sc_rx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15975:   proto_tree_add_item(tree, hf_ieee80211_tag_max_ofdm_rx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15976:   proto_tree_add_item(tree, hf_ieee80211_tag_max_sc_tx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15977:   proto_tree_add_item(tree, hf_ieee80211_tag_max_ofdm_tx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "15979:   proto_tree_add_item(tree, hf_ieee80211_tag_low_power_supported, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15980:   proto_tree_add_item(tree, hf_ieee80211_tag_code_rate, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15981:   proto_tree_add_item(tree, hf_ieee80211_tag_dtp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15982:   proto_tree_add_item(tree, hf_ieee80211_tag_appdu_supp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15983:   proto_tree_add_item(tree, hf_ieee80211_tag_heartbeat, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15984:   proto_tree_add_item(tree, hf_ieee80211_tag_other_aid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15985:   proto_tree_add_item(tree, hf_ieee80211_tag_pattern_recip, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15986:   proto_tree_add_item(tree, hf_ieee80211_tag_heartbeat_elapsed, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15987:   proto_tree_add_item(tree, hf_ieee80211_tag_grant_ack_supp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15988:   proto_tree_add_item(tree, hf_ieee80211_tag_RXSSTxRate_supp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15990:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_tddti, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15991:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_PSA, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15992:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_handover, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15993:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_max_assoc, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15994:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_power_src, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15995:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_decenter, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15996:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_forwarding, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "15997:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_center, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "16161:   proto_tree_add_bitmask_list(tree, tvb, offset, 3, ieee80211_tag_dmg_cap1, ENC_LITTLE_ENDIAN);",
          "16163:   proto_tree_add_bitmask_list(tree, tvb, offset, 3, ieee80211_tag_dmg_cap2, ENC_LITTLE_ENDIAN);",
          "16165:   proto_tree_add_bitmask_list(tree, tvb, offset, 2, ieee80211_tag_dmg_cap3, ENC_LITTLE_ENDIAN);",
          "16167:   proto_tree_add_bitmask_list(tree, tvb, offset, 2, ieee80211_tag_dmg_cap4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "16004:   int tag_len = tvb_reported_length(tvb);",
          "16005:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16006:   int offset = 0;",
          "16007:   if (tag_len != 10)",
          "16008:   {",
          "16009:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 10\", tag_len);",
          "16010:     return tvb_captured_length(tvb);",
          "16011:   }",
          "16015:   offset += 2;",
          "16016:   proto_tree_add_item(tree, hf_ieee80211_tag_PSRSI, tvb, offset, 1, ENC_NA);",
          "16017:   offset += 1;",
          "",
          "[Removed Lines]",
          "16012:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_tddti, tvb, offset, 1, ENC_NA);",
          "16013:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_PSA, tvb, offset, 1, ENC_NA);",
          "16014:   proto_tree_add_item(tree, hf_ieee80211_tag_pcp_handover, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "16177:   static const int * ieee80211_tag_dmg_operation[] = {",
          "16178:     &hf_ieee80211_tag_pcp_tddti,",
          "16179:     &hf_ieee80211_tag_pcp_PSA,",
          "16180:     &hf_ieee80211_tag_pcp_handover,",
          "16181:     NULL",
          "16182:   };",
          "16189:   proto_tree_add_bitmask_list(tree, tvb, offset, 1, ieee80211_tag_dmg_operation, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "16035:   int tag_len = tvb_reported_length(tvb);",
          "16036:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16037:   int offset = 0;",
          "16038:   if (tag_len != 4)",
          "16039:   {",
          "16040:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 4\", tag_len);",
          "16041:     return tvb_captured_length(tvb);",
          "16042:   }",
          "16048:   return tvb_captured_length(tvb);",
          "16049: }",
          "",
          "[Removed Lines]",
          "16043:   proto_tree_add_item(tree, hf_ieee80211_tag_type, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "16044:   proto_tree_add_item(tree, hf_ieee80211_tag_tap1, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "16045:   proto_tree_add_item(tree, hf_ieee80211_tag_state1, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "16046:   proto_tree_add_item(tree, hf_ieee80211_tag_tap2, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "16047:   proto_tree_add_item(tree, hf_ieee80211_tag_state2, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "16213:   static const int * ieee80211_tag_antenna[] = {",
          "16214:     &hf_ieee80211_tag_type,",
          "16215:     &hf_ieee80211_tag_tap1,",
          "16216:     &hf_ieee80211_tag_state1,",
          "16217:     &hf_ieee80211_tag_tap2,",
          "16218:     &hf_ieee80211_tag_state2,",
          "16219:     NULL",
          "16220:   };",
          "16227:   proto_tree_add_bitmask_list(tree, tvb, offset, 4, ieee80211_tag_antenna, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "16232:   int tag_len = tvb_reported_length(tvb);",
          "16233:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16234:   int offset = 0;",
          "16236:   if (tag_len != 5)",
          "16237:   {",
          "16238:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be 5\", tag_len);",
          "16239:     return tvb_captured_length(tvb);",
          "16240:   }",
          "16262:   return tvb_captured_length(tvb);",
          "16263: }",
          "",
          "[Removed Lines]",
          "16241:   proto_tree_add_item(tree, hf_ieee80211_tag_initiator, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16242:   proto_tree_add_item(tree, hf_ieee80211_tag_tx_train_res, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16243:   proto_tree_add_item(tree, hf_ieee80211_tag_rx_train_res, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16244:   proto_tree_add_item(tree, hf_ieee80211_tag_tx_trn_ok, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16245:   proto_tree_add_item(tree, hf_ieee80211_tag_txss_fbck_req, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16246:   proto_tree_add_item(tree, hf_ieee80211_tag_bs_fbck, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16247:   proto_tree_add_item(tree, hf_ieee80211_tag_bs_fbck_antenna_id, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16248:   proto_tree_add_item(tree, hf_ieee80211_tag_snr_requested, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16249:   proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_requested, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16250:   proto_tree_add_item(tree, hf_ieee80211_tag_number_of_taps_requested, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16251:   proto_tree_add_item(tree, hf_ieee80211_tag_sector_id_order_req, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16252:   proto_tree_add_item(tree, hf_ieee80211_tag_snr_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16253:   proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16254:   proto_tree_add_item(tree, hf_ieee80211_tag_tap_delay_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16255:   proto_tree_add_item(tree, hf_ieee80211_tag_number_of_taps_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16256:   proto_tree_add_item(tree, hf_ieee80211_tag_number_of_measurement, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16257:   proto_tree_add_item(tree, hf_ieee80211_tag_sector_id_order_present, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16258:   proto_tree_add_item(tree, hf_ieee80211_tag_number_of_beams, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16259:   proto_tree_add_item(tree, hf_ieee80211_tag_mid_extension, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16260:   proto_tree_add_item(tree, hf_ieee80211_tag_capability_request, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "16261:   proto_tree_add_item(tree, hf_ieee80211_tag_beam_refine_reserved, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "16415:   static const int * ieee80211_dmg_beam_refinement_fields[] = {",
          "16416:     &hf_ieee80211_tag_initiator,",
          "16417:     &hf_ieee80211_tag_tx_train_res,",
          "16418:     &hf_ieee80211_tag_rx_train_res,",
          "16419:     &hf_ieee80211_tag_tx_trn_ok,",
          "16420:     &hf_ieee80211_tag_txss_fbck_req,",
          "16421:     &hf_ieee80211_tag_bs_fbck,",
          "16422:     &hf_ieee80211_tag_bs_fbck_antenna_id,",
          "16423:     &hf_ieee80211_tag_snr_requested,",
          "16424:     &hf_ieee80211_tag_channel_measurement_requested,",
          "16425:     &hf_ieee80211_tag_number_of_taps_requested,",
          "16426:     &hf_ieee80211_tag_sector_id_order_req,",
          "16427:     &hf_ieee80211_tag_snr_present,",
          "16428:     &hf_ieee80211_tag_channel_measurement_present,",
          "16429:     &hf_ieee80211_tag_tap_delay_present,",
          "16430:     &hf_ieee80211_tag_number_of_taps_present,",
          "16431:     &hf_ieee80211_tag_number_of_measurement,",
          "16432:     &hf_ieee80211_tag_sector_id_order_present,",
          "16433:     &hf_ieee80211_tag_number_of_beams,",
          "16434:     &hf_ieee80211_tag_mid_extension,",
          "16435:     &hf_ieee80211_tag_capability_request,",
          "16436:     &hf_ieee80211_tag_beam_refine_reserved,",
          "16437:     NULL",
          "16438:   };",
          "16446:   proto_tree_add_bitmask_list(tree, tvb, offset, 5, ieee80211_dmg_beam_refinement_fields, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "16296:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be at least 14\", tag_len);",
          "16297:     return tvb_captured_length(tvb);",
          "16298:   }",
          "16308:   offset += 3;",
          "16309:   isGrant = ((field_data->ftype==CTRL_GRANT)||(field_data->ftype==CTRL_GRANT_ACK));",
          "16310:   offset += add_ff_beamforming_ctrl(tree, tvb, pinfo, 2, isGrant);",
          "",
          "[Removed Lines]",
          "16299:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_id, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16300:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_type, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16301:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_format, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16302:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_pseudo_static, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16303:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_truncatable, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16304:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_extendable, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16305:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_lp_sc_used, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16306:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_up, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "16307:   proto_tree_add_item(tree, hf_ieee80211_tag_tspec_dest_aid, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "16484:   static const int * ieee80211_tag_tspec[] = {",
          "16485:     &hf_ieee80211_tag_tspec_allocation_id,",
          "16486:     &hf_ieee80211_tag_tspec_allocation_type,",
          "16487:     &hf_ieee80211_tag_tspec_allocation_format,",
          "16488:     &hf_ieee80211_tag_tspec_pseudo_static,",
          "16489:     &hf_ieee80211_tag_tspec_truncatable,",
          "16490:     &hf_ieee80211_tag_tspec_extendable,",
          "16491:     &hf_ieee80211_tag_tspec_lp_sc_used,",
          "16492:     &hf_ieee80211_tag_tspec_up,",
          "16493:     &hf_ieee80211_tag_tap2,",
          "16494:     &hf_ieee80211_tag_tspec_dest_aid,",
          "16495:     NULL",
          "16496:   };",
          "16498:   proto_tree_add_bitmask_list(tree, tvb, offset, 3, ieee80211_tag_tspec, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "16406:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16407:   int offset = 0;",
          "16408:   gboolean chiper_present, addr_present;",
          "16410:   if (tag_len < 22)",
          "16411:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16600:   static const int * ieee80211_tag_multi_band_ctrl[] = {",
          "16601:     &hf_ieee80211_tag_multi_band_ctrl_sta_role,",
          "16602:     &hf_ieee80211_tag_multi_band_ctrl_addr_present,",
          "16603:     &hf_ieee80211_tag_multi_band_ctrl_cipher_present,",
          "16604:     NULL",
          "16605:   };",
          "16606:   static const int * ieee80211_tag_multi_band_conn[] = {",
          "16607:     &hf_ieee80211_tag_multi_band_conn_ap,",
          "16608:     &hf_ieee80211_tag_multi_band_conn_pcp,",
          "16609:     &hf_ieee80211_tag_multi_band_conn_dls,",
          "16610:     &hf_ieee80211_tag_multi_band_conn_tdls,",
          "16611:     &hf_ieee80211_tag_multi_band_conn_ibss,",
          "16612:     NULL",
          "16613:   };",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "16414:   }",
          "16415:   chiper_present = (tvb_get_letohs(tvb, offset) & 0x08) >> 3;",
          "16416:   addr_present = (tvb_get_letohs(tvb, offset) & 0x10) >> 4;",
          "16420:   offset += 1;",
          "16421:   offset += add_ff_band_id(tree, tvb, pinfo, 1);",
          "16422:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_oper_class, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "16417:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_ctrl_sta_role, tvb, offset, 1, ENC_NA);",
          "16418:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_ctrl_addr_present, tvb, offset, 1, ENC_NA);",
          "16419:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_ctrl_cipher_present, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "16622:   proto_tree_add_bitmask_list(tree, tvb, offset, 1, ieee80211_tag_multi_band_ctrl, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "16428:   offset += add_ff_beacon_interval(tree, tvb, pinfo, 2);",
          "16429:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_tsf_offset, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "16430:   offset += 8;",
          "16436:   offset += 1;",
          "16437:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_fst_timeout, tvb, offset, 1, ENC_NA);",
          "16438:   offset += 1;",
          "",
          "[Removed Lines]",
          "16431:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_ap, tvb, offset, 1, ENC_NA);",
          "16432:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_pcp, tvb, offset, 1, ENC_NA);",
          "16433:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_dls, tvb, offset, 1, ENC_NA);",
          "16434:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_tdls, tvb, offset, 1, ENC_NA);",
          "16435:   proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_ibss, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "16635:   proto_tree_add_bitmask_list(tree, tvb, offset, 1, ieee80211_tag_multi_band_conn, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "16530:   int tag_len = tvb_reported_length(tvb);",
          "16531:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16532:   int offset = 0;",
          "16534:   int param_num;",
          "16535:   if (tag_len < 4)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16733:   static const int * ieee80211_tag_switching_stream[] = {",
          "16734:     &hf_ieee80211_tag_switching_stream_old_tid,",
          "16735:     &hf_ieee80211_tag_switching_stream_old_direction,",
          "16736:     &hf_ieee80211_tag_switching_stream_new_tid,",
          "16737:     &hf_ieee80211_tag_switching_stream_new_direction,",
          "16738:     &hf_ieee80211_tag_switching_stream_new_valid_id,",
          "16739:     &hf_ieee80211_tag_switching_stream_llt_type,",
          "16740:     NULL",
          "16741:   };",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "16546:   offset += 1;",
          "16547:   while(param_num > 0)",
          "16548:   {",
          "16555:     param_num--;",
          "16556:     offset += 2;",
          "16557:   }",
          "",
          "[Removed Lines]",
          "16549:     proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_old_tid, tvb, offset, 1, ENC_NA);",
          "16550:     proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_old_direction, tvb, offset, 1, ENC_NA);",
          "16551:     proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_new_tid, tvb, offset, 1, ENC_NA);",
          "16552:     proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_new_direction, tvb, offset, 1, ENC_NA);",
          "16553:     proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_new_valid_id, tvb, offset, 1, ENC_NA);",
          "16554:     proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_llt_type, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "16758:     proto_tree_add_bitmask_list(tree, tvb, offset, 1, ieee80211_tag_switching_stream, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "19006:   int         offset = 0;",
          "19007:   guint16     keyinfo;",
          "19008:   guint16     eapol_data_len;",
          "19011:   proto_tree *keydes_tree;",
          "19012:   proto_tree *ti = NULL;",
          "",
          "[Removed Lines]",
          "19009:   proto_tree *keyinfo_item = NULL;",
          "19010:   proto_tree *keyinfo_tree = NULL;",
          "",
          "[Added Lines]",
          "19215:   static const int * wlan_rsna_eapol_wpa_keydes_keyinfo[] = {",
          "19216:     &hf_wlan_rsna_eapol_wpa_keydes_keyinfo_keydes_version,",
          "19217:     &hf_wlan_rsna_eapol_wpa_keydes_keyinfo_key_type,",
          "19218:     &hf_wlan_rsna_eapol_wpa_keydes_keyinfo_key_index,",
          "19219:     &hf_wlan_rsna_eapol_wpa_keydes_keyinfo_install,",
          "19220:     &hf_wlan_rsna_eapol_wpa_keydes_keyinfo_key_ack,",
          "19221:     &hf_wlan_rsna_eapol_wpa_keydes_keyinfo_key_mic,",
          "19222:     &hf_wlan_rsna_eapol_wpa_keydes_keyinfo_secure,",
          "19223:     &hf_wlan_rsna_eapol_wpa_keydes_keyinfo_error,",
          "19224:     &hf_wlan_rsna_eapol_wpa_keydes_keyinfo_request,",
          "19225:     &hf_wlan_rsna_eapol_wpa_keydes_keyinfo_encrypted_key_data,",
          "19226:     &hf_wlan_rsna_eapol_wpa_keydes_keyinfo_smk_message,",
          "19227:     NULL",
          "19228:   };",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "19054:     else",
          "19055:       col_set_str(pinfo->cinfo, COL_INFO, \"Key (Group Message 2 of 2)\");",
          "19056:   }",
          "19073:   offset += 2;",
          "19075:   proto_tree_add_item(tree, hf_wlan_rsna_eapol_keydes_key_len, tvb, offset,",
          "",
          "[Removed Lines]",
          "19057:   keyinfo_item =",
          "19058:     proto_tree_add_item(tree, hf_wlan_rsna_eapol_wpa_keydes_keyinfo, tvb,",
          "19059:                         offset, 2, ENC_BIG_ENDIAN);",
          "19061:   keyinfo_tree = proto_item_add_subtree(keyinfo_item, ett_keyinfo);",
          "19062:   proto_tree_add_item(keyinfo_tree, hf_wlan_rsna_eapol_wpa_keydes_keyinfo_keydes_version, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "19063:   proto_tree_add_item(keyinfo_tree, hf_wlan_rsna_eapol_wpa_keydes_keyinfo_key_type, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "19064:   proto_tree_add_item(keyinfo_tree, hf_wlan_rsna_eapol_wpa_keydes_keyinfo_key_index, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "19065:   proto_tree_add_item(keyinfo_tree, hf_wlan_rsna_eapol_wpa_keydes_keyinfo_install, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "19066:   proto_tree_add_item(keyinfo_tree, hf_wlan_rsna_eapol_wpa_keydes_keyinfo_key_ack, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "19067:   proto_tree_add_item(keyinfo_tree, hf_wlan_rsna_eapol_wpa_keydes_keyinfo_key_mic, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "19068:   proto_tree_add_item(keyinfo_tree, hf_wlan_rsna_eapol_wpa_keydes_keyinfo_secure, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "19069:   proto_tree_add_item(keyinfo_tree, hf_wlan_rsna_eapol_wpa_keydes_keyinfo_error, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "19070:   proto_tree_add_item(keyinfo_tree, hf_wlan_rsna_eapol_wpa_keydes_keyinfo_request, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "19071:   proto_tree_add_item(keyinfo_tree, hf_wlan_rsna_eapol_wpa_keydes_keyinfo_encrypted_key_data, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "19072:   proto_tree_add_item(keyinfo_tree, hf_wlan_rsna_eapol_wpa_keydes_keyinfo_smk_message, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "19274:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_wlan_rsna_eapol_wpa_keydes_keyinfo,",
          "19275:                                     ett_keyinfo, wlan_rsna_eapol_wpa_keydes_keyinfo,",
          "19276:                                     ENC_BIG_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "24199:       FT_UINT8, BASE_DEC, NULL, 0,",
          "24200:       NULL, HFILL }},",
          "24203:      {\"HT Additional Capabilities\", \"wlan.hta.capabilities\",",
          "24204:       FT_UINT16, BASE_HEX, NULL, 0,",
          "24205:       \"HT Additional Capability information\", HFILL }},",
          "",
          "[Removed Lines]",
          "24202:     {&hf_ieee80211_hta_cap,",
          "",
          "[Added Lines]",
          "24406:     {&hf_ieee80211_hta_cap1,",
          "24407:      {\"HT Additional Capabilities\", \"wlan.hta.capabilities\",",
          "24408:       FT_UINT8, BASE_HEX, NULL, 0,",
          "24409:       \"HT Additional Capability information\", HFILL }},",
          "24411:     {&hf_ieee80211_hta_cap2,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c80bfec083aee9cd14345f821a6a17cf2e0f3797",
      "candidate_info": {
        "commit_hash": "c80bfec083aee9cd14345f821a6a17cf2e0f3797",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/c80bfec083aee9cd14345f821a6a17cf2e0f3797",
        "files": [
          "epan/dissectors/packet-ieee80211.c"
        ],
        "message": "ieee80211: fix declaration of 'ieee80211_tag_...' shadows a global declaration\n\nMake OSX buildbot happy\n\nChange-Id: I1a376fba3d7f4b24741839697ed0f6c55c9ac77d\nReviewed-on: https://code.wireshark.org/review/20503\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c": [
          "File: epan/dissectors/packet-ieee80211.c -> epan/dissectors/packet-ieee80211.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15509:   int tag_len = tvb_reported_length(tvb);",
          "15510:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "15511:   int offset = 0;",
          "15513:     &hf_ieee80211_tag_erp_info_erp_present,",
          "15514:     &hf_ieee80211_tag_erp_info_use_protection,",
          "15515:     &hf_ieee80211_tag_erp_info_barker_preamble_mode,",
          "",
          "[Removed Lines]",
          "15512:   static const int *ieee80211_tag_erp_info[] = {",
          "",
          "[Added Lines]",
          "15512:   static const int *ieee80211_tag_erp_info_flags[] = {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15524:   }",
          "15526:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_tag_erp_info,",
          "15528:                                     ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "15530:   return tvb_captured_length(tvb);",
          "",
          "[Removed Lines]",
          "15527:                                     ett_tag_erp_info_tree, ieee80211_tag_erp_info,",
          "",
          "[Added Lines]",
          "15527:                                     ett_tag_erp_info_tree, ieee80211_tag_erp_info_flags,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "16174:   int tag_len = tvb_reported_length(tvb);",
          "16175:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16176:   int offset = 0;",
          "16178:     &hf_ieee80211_tag_pcp_tddti,",
          "16179:     &hf_ieee80211_tag_pcp_PSA,",
          "16180:     &hf_ieee80211_tag_pcp_handover,",
          "",
          "[Removed Lines]",
          "16177:   static const int * ieee80211_tag_dmg_operation[] = {",
          "",
          "[Added Lines]",
          "16177:   static const int * ieee80211_tag_dmg_operation_flags[] = {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "16186:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be = 10\", tag_len);",
          "16187:     return tvb_captured_length(tvb);",
          "16188:   }",
          "16190:   offset += 2;",
          "16191:   proto_tree_add_item(tree, hf_ieee80211_tag_PSRSI, tvb, offset, 1, ENC_NA);",
          "16192:   offset += 1;",
          "",
          "[Removed Lines]",
          "16189:   proto_tree_add_bitmask_list(tree, tvb, offset, 1, ieee80211_tag_dmg_operation, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "16189:   proto_tree_add_bitmask_list(tree, tvb, offset, 1, ieee80211_tag_dmg_operation_flags, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "16481:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be at least 14\", tag_len);",
          "16482:     return tvb_captured_length(tvb);",
          "16483:   }",
          "16485:     &hf_ieee80211_tag_tspec_allocation_id,",
          "16486:     &hf_ieee80211_tag_tspec_allocation_type,",
          "16487:     &hf_ieee80211_tag_tspec_allocation_format,",
          "",
          "[Removed Lines]",
          "16484:   static const int * ieee80211_tag_tspec[] = {",
          "",
          "[Added Lines]",
          "16484:   static const int * ieee80211_tag_tspec_flags[] = {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "16495:     NULL",
          "16496:   };",
          "16499:   offset += 3;",
          "16500:   isGrant = ((field_data->ftype==CTRL_GRANT)||(field_data->ftype==CTRL_GRANT_ACK));",
          "16501:   offset += add_ff_beamforming_ctrl(tree, tvb, pinfo, 2, isGrant);",
          "",
          "[Removed Lines]",
          "16498:   proto_tree_add_bitmask_list(tree, tvb, offset, 3, ieee80211_tag_tspec, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "16498:   proto_tree_add_bitmask_list(tree, tvb, offset, 3, ieee80211_tag_tspec_flags, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "16730:   int tag_len = tvb_reported_length(tvb);",
          "16731:   ieee80211_tagged_field_data_t* field_data = (ieee80211_tagged_field_data_t*)data;",
          "16732:   int offset = 0;",
          "16734:     &hf_ieee80211_tag_switching_stream_old_tid,",
          "16735:     &hf_ieee80211_tag_switching_stream_old_direction,",
          "16736:     &hf_ieee80211_tag_switching_stream_new_tid,",
          "",
          "[Removed Lines]",
          "16733:   static const int * ieee80211_tag_switching_stream[] = {",
          "",
          "[Added Lines]",
          "16733:   static const int * ieee80211_tag_switching_stream_flags[] = {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "16755:   offset += 1;",
          "16756:   while(param_num > 0)",
          "16757:   {",
          "16759:     param_num--;",
          "16760:     offset += 2;",
          "16761:   }",
          "",
          "[Removed Lines]",
          "16758:     proto_tree_add_bitmask_list(tree, tvb, offset, 1, ieee80211_tag_switching_stream, ENC_NA);",
          "",
          "[Added Lines]",
          "16758:     proto_tree_add_bitmask_list(tree, tvb, offset, 1, ieee80211_tag_switching_stream_flags, ENC_NA);",
          "",
          "---------------"
        ]
      }
    }
  ]
}