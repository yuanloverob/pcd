{
  "cve_id": "CVE-2016-7116",
  "cve_desc": "Directory traversal vulnerability in hw/9pfs/9p.c in QEMU (aka Quick Emulator) allows local guest OS administrators to access host files outside the export path via a .. (dot dot) in an unspecified string.",
  "repo": "qemu/qemu",
  "patch_hash": "56f101ecce0eafd09e2daf1c4eeb1377d6959261",
  "patch_info": {
    "commit_hash": "56f101ecce0eafd09e2daf1c4eeb1377d6959261",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/56f101ecce0eafd09e2daf1c4eeb1377d6959261",
    "files": [
      "hw/9pfs/9p.c",
      "hw/9pfs/9p.h"
    ],
    "message": "9pfs: handle walk of \"..\" in the root directory\n\nThe 9P spec at http://man.cat-v.org/plan_9/5/intro says:\n\nAll directories must support walks to the directory .. (dot-dot) meaning\nparent directory, although by convention directories contain no explicit\nentry for .. or . (dot).  The parent of the root directory of a server's\ntree is itself.\n\nThis means that a client cannot walk further than the root directory\nexported by the server. In other words, if the client wants to walk\n\"/..\" or \"/foo/../..\", the server should answer like the request was\nto walk \"/\".\n\nThis patch just does that:\n- we cache the QID of the root directory at attach time\n- during the walk we compare the QID of each path component with the root\n  QID to detect if we're in a \"/..\" situation\n- if so, we skip the current component and go to the next one\n\nSigned-off-by: Greg Kurz <groug@kaod.org>\nReviewed-by: Eric Blake <eblake@redhat.com>\nSigned-off-by: Peter Maydell <peter.maydell@linaro.org>",
    "before_after_code_files": [
      "hw/9pfs/9p.c||hw/9pfs/9p.c",
      "hw/9pfs/9p.h||hw/9pfs/9p.h"
    ]
  },
  "patch_diff": {
    "hw/9pfs/9p.c||hw/9pfs/9p.c": [
      "File: hw/9pfs/9p.c -> hw/9pfs/9p.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1010:         goto out;",
      "1011:     }",
      "1012:     err += offset;",
      "1013:     trace_v9fs_attach_return(pdu->tag, pdu->id,",
      "1014:                              qid.type, qid.version, qid.path);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1013:     memcpy(&s->root_qid, &qid, sizeof(qid));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1261:     return !*name || strchr(name, '/') != NULL;",
      "1262: }",
      "1264: static void v9fs_walk(void *opaque)",
      "1265: {",
      "1266:     int name_idx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1265: static bool not_same_qid(const V9fsQID *qid1, const V9fsQID *qid2)",
      "1266: {",
      "1267:     return",
      "1268:         qid1->type != qid2->type ||",
      "1269:         qid1->version != qid2->version ||",
      "1270:         qid1->path != qid2->path;",
      "1271: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1276:     V9fsFidState *newfidp = NULL;",
      "1277:     V9fsPDU *pdu = opaque;",
      "1278:     V9fsState *s = pdu->s;",
      "1280:     err = pdu_unmarshal(pdu, offset, \"ddw\", &fid, &newfid, &nwnames);",
      "1281:     if (err < 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1288:     V9fsQID qid;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1309:         err = -ENOENT;",
      "1310:         goto out_nofid;",
      "1311:     }",
      "1312:     v9fs_path_init(&dpath);",
      "1313:     v9fs_path_init(&path);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1323:     err = fid_to_qid(pdu, fidp, &qid);",
      "1324:     if (err < 0) {",
      "1325:         goto out;",
      "1326:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1318:     v9fs_path_copy(&dpath, &fidp->path);",
      "1319:     v9fs_path_copy(&path, &fidp->path);",
      "1320:     for (name_idx = 0; name_idx < nwnames; name_idx++) {",
      "1328:         }",
      "1331:     }",
      "1332:     if (fid == newfid) {",
      "1333:         BUG_ON(fidp->fid_type != P9_FID_NONE);",
      "",
      "[Removed Lines]",
      "1321:         err = v9fs_co_name_to_path(pdu, &dpath, wnames[name_idx].data, &path);",
      "1322:         if (err < 0) {",
      "1323:             goto out;",
      "1324:         }",
      "1325:         err = v9fs_co_lstat(pdu, &path, &stbuf);",
      "1326:         if (err < 0) {",
      "1327:             goto out;",
      "1329:         stat_to_qid(&stbuf, &qids[name_idx]);",
      "1330:         v9fs_path_copy(&dpath, &path);",
      "",
      "[Added Lines]",
      "1337:         if (not_same_qid(&pdu->s->root_qid, &qid) ||",
      "1338:             strcmp(\"..\", wnames[name_idx].data)) {",
      "1339:             err = v9fs_co_name_to_path(pdu, &dpath, wnames[name_idx].data,",
      "1340:                                        &path);",
      "1341:             if (err < 0) {",
      "1342:                 goto out;",
      "1343:             }",
      "1345:             err = v9fs_co_lstat(pdu, &path, &stbuf);",
      "1346:             if (err < 0) {",
      "1347:                 goto out;",
      "1348:             }",
      "1349:             stat_to_qid(&stbuf, &qid);",
      "1350:             v9fs_path_copy(&dpath, &path);",
      "1352:         memcpy(&qids[name_idx], &qid, sizeof(qid));",
      "",
      "---------------"
    ],
    "hw/9pfs/9p.h||hw/9pfs/9p.h": [
      "File: hw/9pfs/9p.h -> hw/9pfs/9p.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "236:     int32_t root_fid;",
      "237:     Error *migration_blocker;",
      "238:     V9fsConf fsconf;",
      "239: } V9fsState;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "239:     V9fsQID root_qid;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "85d0a53c583656e5e37a8317f9119933c796847f",
      "candidate_info": {
        "commit_hash": "85d0a53c583656e5e37a8317f9119933c796847f",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/85d0a53c583656e5e37a8317f9119933c796847f",
        "files": [
          "hw/9pfs/9p.c",
          "hw/9pfs/9p.h"
        ],
        "message": "9pfs: handle walk of \"..\" in the root directory\n\nThe 9P spec at http://man.cat-v.org/plan_9/5/intro says:\n\nAll directories must support walks to the directory .. (dot-dot) meaning\nparent directory, although by convention directories contain no explicit\nentry for .. or . (dot).  The parent of the root directory of a server's\ntree is itself.\n\nThis means that a client cannot walk further than the root directory\nexported by the server. In other words, if the client wants to walk\n\"/..\" or \"/foo/../..\", the server should answer like the request was\nto walk \"/\".\n\nThis patch just does that:\n- we cache the QID of the root directory at attach time\n- during the walk we compare the QID of each path component with the root\n  QID to detect if we're in a \"/..\" situation\n- if so, we skip the current component and go to the next one\n\nSigned-off-by: Greg Kurz <groug@kaod.org>\nReviewed-by: Eric Blake <eblake@redhat.com>\nSigned-off-by: Peter Maydell <peter.maydell@linaro.org>\n(cherry picked from commit 56f101ecce0eafd09e2daf1c4eeb1377d6959261)\nSigned-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>",
        "before_after_code_files": [
          "hw/9pfs/9p.c||hw/9pfs/9p.c",
          "hw/9pfs/9p.h||hw/9pfs/9p.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hw/9pfs/9p.c||hw/9pfs/9p.c",
            "hw/9pfs/9p.h||hw/9pfs/9p.h"
          ],
          "candidate": [
            "hw/9pfs/9p.c||hw/9pfs/9p.c",
            "hw/9pfs/9p.h||hw/9pfs/9p.h"
          ]
        }
      },
      "candidate_diff": {
        "hw/9pfs/9p.c||hw/9pfs/9p.c": [
          "File: hw/9pfs/9p.c -> hw/9pfs/9p.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1008:         goto out;",
          "1009:     }",
          "1010:     err += offset;",
          "1011:     trace_v9fs_attach_return(pdu->tag, pdu->id,",
          "1012:                              qid.type, qid.version, qid.path);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:     memcpy(&s->root_qid, &qid, sizeof(qid));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1259:     return !*name || strchr(name, '/') != NULL;",
          "1260: }",
          "1262: static void v9fs_walk(void *opaque)",
          "1263: {",
          "1264:     int name_idx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1263: static bool not_same_qid(const V9fsQID *qid1, const V9fsQID *qid2)",
          "1264: {",
          "1265:     return",
          "1266:         qid1->type != qid2->type ||",
          "1267:         qid1->version != qid2->version ||",
          "1268:         qid1->path != qid2->path;",
          "1269: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1274:     V9fsFidState *newfidp = NULL;",
          "1275:     V9fsPDU *pdu = opaque;",
          "1276:     V9fsState *s = pdu->s;",
          "1278:     err = pdu_unmarshal(pdu, offset, \"ddw\", &fid, &newfid, &nwnames);",
          "1279:     if (err < 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1286:     V9fsQID qid;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1307:         err = -ENOENT;",
          "1308:         goto out_nofid;",
          "1309:     }",
          "1310:     v9fs_path_init(&dpath);",
          "1311:     v9fs_path_init(&path);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1321:     err = fid_to_qid(pdu, fidp, &qid);",
          "1322:     if (err < 0) {",
          "1323:         goto out;",
          "1324:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1316:     v9fs_path_copy(&dpath, &fidp->path);",
          "1317:     v9fs_path_copy(&path, &fidp->path);",
          "1318:     for (name_idx = 0; name_idx < nwnames; name_idx++) {",
          "1326:         }",
          "1329:     }",
          "1330:     if (fid == newfid) {",
          "1331:         BUG_ON(fidp->fid_type != P9_FID_NONE);",
          "",
          "[Removed Lines]",
          "1319:         err = v9fs_co_name_to_path(pdu, &dpath, wnames[name_idx].data, &path);",
          "1320:         if (err < 0) {",
          "1321:             goto out;",
          "1322:         }",
          "1323:         err = v9fs_co_lstat(pdu, &path, &stbuf);",
          "1324:         if (err < 0) {",
          "1325:             goto out;",
          "1327:         stat_to_qid(&stbuf, &qids[name_idx]);",
          "1328:         v9fs_path_copy(&dpath, &path);",
          "",
          "[Added Lines]",
          "1335:         if (not_same_qid(&pdu->s->root_qid, &qid) ||",
          "1336:             strcmp(\"..\", wnames[name_idx].data)) {",
          "1337:             err = v9fs_co_name_to_path(pdu, &dpath, wnames[name_idx].data,",
          "1338:                                        &path);",
          "1339:             if (err < 0) {",
          "1340:                 goto out;",
          "1341:             }",
          "1343:             err = v9fs_co_lstat(pdu, &path, &stbuf);",
          "1344:             if (err < 0) {",
          "1345:                 goto out;",
          "1346:             }",
          "1347:             stat_to_qid(&stbuf, &qid);",
          "1348:             v9fs_path_copy(&dpath, &path);",
          "1350:         memcpy(&qids[name_idx], &qid, sizeof(qid));",
          "",
          "---------------"
        ],
        "hw/9pfs/9p.h||hw/9pfs/9p.h": [
          "File: hw/9pfs/9p.h -> hw/9pfs/9p.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:     int32_t root_fid;",
          "220:     Error *migration_blocker;",
          "221:     V9fsConf fsconf;",
          "222: } V9fsState;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:     V9fsQID root_qid;",
          "",
          "---------------"
        ]
      }
    }
  ]
}