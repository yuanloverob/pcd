{
  "cve_id": "CVE-2016-9299",
  "cve_desc": "The remoting module in Jenkins before 2.32 and LTS before 2.19.3 allows remote attackers to execute arbitrary code via a crafted serialized Java object, which triggers an LDAP query to a third-party server.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "fde9c42fe05ac925a904b6c09a81d497d0e6ccea",
  "patch_info": {
    "commit_hash": "fde9c42fe05ac925a904b6c09a81d497d0e6ccea",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/fde9c42fe05ac925a904b6c09a81d497d0e6ccea",
    "files": [
      "core/src/main/java/hudson/cli/CLIAction.java",
      "core/src/main/java/hudson/cli/CliProtocol.java",
      "core/src/main/java/hudson/cli/CliProtocol2.java",
      "core/src/main/java/jenkins/CLI.java",
      "test/src/test/java/jenkins/CLITest.java"
    ],
    "message": "[SECURITY-360] introduce a system switch to kill CLI\n\nThis basically is a convenient version of\nhttps://github.com/jenkinsci-cert/SECURITY-218.\n\nDuring the course of discussing how to fix SECURITY-360, it was agreed\nby the CERT team that we provide this switch.",
    "before_after_code_files": [
      "core/src/main/java/hudson/cli/CLIAction.java||core/src/main/java/hudson/cli/CLIAction.java",
      "core/src/main/java/hudson/cli/CliProtocol.java||core/src/main/java/hudson/cli/CliProtocol.java",
      "core/src/main/java/hudson/cli/CliProtocol2.java||core/src/main/java/hudson/cli/CliProtocol2.java",
      "core/src/main/java/jenkins/CLI.java||core/src/main/java/jenkins/CLI.java",
      "test/src/test/java/jenkins/CLITest.java||test/src/test/java/jenkins/CLITest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/cli/CLIAction.java||core/src/main/java/hudson/cli/CLIAction.java": [
      "File: core/src/main/java/hudson/cli/CLIAction.java -> core/src/main/java/hudson/cli/CLIAction.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:     }",
      "64:     public String getDisplayName() {",
      "66:         return \"Jenkins CLI\";",
      "67:     }",
      "69:     public String getUrlName() {",
      "71:     }",
      "73:     public void doCommand(StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {",
      "",
      "[Removed Lines]",
      "70:         return \"cli\";",
      "",
      "[Added Lines]",
      "69:         return jenkins.CLI.DISABLED ? null : \"cli\";",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/cli/CliProtocol.java||core/src/main/java/hudson/cli/CliProtocol.java": [
      "File: core/src/main/java/hudson/cli/CliProtocol.java -> core/src/main/java/hudson/cli/CliProtocol.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:     @Override",
      "34:     public String getName() {",
      "36:     }",
      "38:     @Override",
      "",
      "[Removed Lines]",
      "35:         return \"CLI-connect\";",
      "",
      "[Added Lines]",
      "35:         return jenkins.CLI.DISABLED ? null : \"CLI-connect\";",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/cli/CliProtocol2.java||core/src/main/java/hudson/cli/CliProtocol2.java": [
      "File: core/src/main/java/hudson/cli/CliProtocol2.java -> core/src/main/java/hudson/cli/CliProtocol2.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: public class CliProtocol2 extends CliProtocol {",
      "25:     @Override",
      "26:     public String getName() {",
      "28:     }",
      "30:     @Override",
      "",
      "[Removed Lines]",
      "27:         return \"CLI2-connect\";",
      "",
      "[Added Lines]",
      "27:         return jenkins.CLI.DISABLED ? null : \"CLI2-connect\";",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/CLI.java||core/src/main/java/jenkins/CLI.java": [
      "File: core/src/main/java/jenkins/CLI.java -> core/src/main/java/jenkins/CLI.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins;",
      "3: import org.kohsuke.accmod.Restricted;",
      "4: import org.kohsuke.accmod.restrictions.NoExternalUse;",
      "13: @Restricted(NoExternalUse.class)",
      "14: public class CLI {",
      "16:     public static boolean DISABLED = Boolean.getBoolean(CLI.class.getName()+\".disabled\");",
      "17: }",
      "",
      "---------------"
    ],
    "test/src/test/java/jenkins/CLITest.java||test/src/test/java/jenkins/CLITest.java": [
      "File: test/src/test/java/jenkins/CLITest.java -> test/src/test/java/jenkins/CLITest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins;",
      "3: import hudson.cli.FullDuplexHttpStream;",
      "4: import hudson.model.Computer;",
      "5: import hudson.model.Failure;",
      "6: import hudson.remoting.Channel;",
      "7: import org.junit.Rule;",
      "8: import org.junit.Test;",
      "9: import org.jvnet.hudson.test.JenkinsRule;",
      "11: import java.io.FileNotFoundException;",
      "12: import java.net.URL;",
      "14: import static org.junit.Assert.*;",
      "19: public class CLITest {",
      "20:     @Rule",
      "21:     public JenkinsRule j = new JenkinsRule();",
      "26:     @Test",
      "27:     public void killSwitch() throws Exception {",
      "29:         makeHttpCall();",
      "30:         makeJnlpCall();",
      "32:         CLI.DISABLED = true;",
      "33:         try {",
      "34:             try {",
      "35:                 makeHttpCall();",
      "36:                 fail(\"Should have been rejected\");",
      "37:             } catch (FileNotFoundException e) {",
      "39:             }",
      "40:             try {",
      "41:                 makeJnlpCall();",
      "42:                 fail(\"Should have been rejected\");",
      "43:             } catch (Exception e) {",
      "45:                 e.printStackTrace();",
      "48:             }",
      "49:         } finally {",
      "50:             CLI.DISABLED = false;",
      "51:         }",
      "52:     }",
      "54:     private void makeHttpCall() throws Exception {",
      "55:         FullDuplexHttpStream con = new FullDuplexHttpStream(new URL(j.getURL(), \"cli\"));",
      "56:         Channel ch = new Channel(\"test connection\", Computer.threadPoolForRemoting, con.getInputStream(), con.getOutputStream());",
      "57:         ch.close();",
      "58:     }",
      "60:     private void makeJnlpCall() throws Exception {",
      "61:         int r = hudson.cli.CLI._main(new String[]{\"-s\",j.getURL().toString(), \"version\"});",
      "62:         if (r!=0)",
      "63:             throw new Failure(\"CLI failed\");",
      "64:     }",
      "65: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9434d0ea9d5bce1f904e256afe347abf84bb6763",
      "candidate_info": {
        "commit_hash": "9434d0ea9d5bce1f904e256afe347abf84bb6763",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/9434d0ea9d5bce1f904e256afe347abf84bb6763",
        "files": [
          "core/src/main/java/hudson/cli/CLIAction.java",
          "core/src/main/java/hudson/cli/CliProtocol.java",
          "core/src/main/java/hudson/cli/CliProtocol2.java",
          "core/src/main/java/jenkins/CLI.java",
          "core/src/main/java/jenkins/install/SetupWizard.java",
          "core/src/main/resources/jenkins/CLI/WarnWhenEnabled/message.jelly",
          "core/src/main/resources/jenkins/CLI/WarnWhenEnabled/message.properties",
          "core/src/main/resources/jenkins/CLI/config.jelly",
          "core/src/main/resources/jenkins/CLI/help-enabled.html",
          "test/src/test/java/jenkins/CLITest.java"
        ],
        "message": "UI to enable or disable CLI over Remoting.",
        "before_after_code_files": [
          "core/src/main/java/hudson/cli/CLIAction.java||core/src/main/java/hudson/cli/CLIAction.java",
          "core/src/main/java/hudson/cli/CliProtocol.java||core/src/main/java/hudson/cli/CliProtocol.java",
          "core/src/main/java/hudson/cli/CliProtocol2.java||core/src/main/java/hudson/cli/CliProtocol2.java",
          "core/src/main/java/jenkins/CLI.java||core/src/main/java/jenkins/CLI.java",
          "core/src/main/java/jenkins/install/SetupWizard.java||core/src/main/java/jenkins/install/SetupWizard.java",
          "core/src/main/resources/jenkins/CLI/WarnWhenEnabled/message.jelly||core/src/main/resources/jenkins/CLI/WarnWhenEnabled/message.jelly",
          "core/src/main/resources/jenkins/CLI/WarnWhenEnabled/message.properties||core/src/main/resources/jenkins/CLI/WarnWhenEnabled/message.properties",
          "core/src/main/resources/jenkins/CLI/config.jelly||core/src/main/resources/jenkins/CLI/config.jelly",
          "core/src/main/resources/jenkins/CLI/help-enabled.html||core/src/main/resources/jenkins/CLI/help-enabled.html",
          "test/src/test/java/jenkins/CLITest.java||test/src/test/java/jenkins/CLITest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/cli/CLIAction.java||core/src/main/java/hudson/cli/CLIAction.java",
            "core/src/main/java/hudson/cli/CliProtocol.java||core/src/main/java/hudson/cli/CliProtocol.java",
            "core/src/main/java/hudson/cli/CliProtocol2.java||core/src/main/java/hudson/cli/CliProtocol2.java",
            "core/src/main/java/jenkins/CLI.java||core/src/main/java/jenkins/CLI.java",
            "test/src/test/java/jenkins/CLITest.java||test/src/test/java/jenkins/CLITest.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/cli/CLIAction.java||core/src/main/java/hudson/cli/CLIAction.java",
            "core/src/main/java/hudson/cli/CliProtocol.java||core/src/main/java/hudson/cli/CliProtocol.java",
            "core/src/main/java/hudson/cli/CliProtocol2.java||core/src/main/java/hudson/cli/CliProtocol2.java",
            "core/src/main/java/jenkins/CLI.java||core/src/main/java/jenkins/CLI.java",
            "test/src/test/java/jenkins/CLITest.java||test/src/test/java/jenkins/CLITest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/cli/CLIAction.java||core/src/main/java/hudson/cli/CLIAction.java": [
          "File: core/src/main/java/hudson/cli/CLIAction.java -> core/src/main/java/hudson/cli/CLIAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: import java.util.logging.Level;",
          "59: import java.util.logging.Logger;",
          "60: import jenkins.util.FullDuplexHttpService;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: import org.kohsuke.stapler.HttpResponses;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     }",
          "83:     public String getUrlName() {",
          "85:     }",
          "87:     public void doCommand(StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {",
          "",
          "[Removed Lines]",
          "84:         return jenkins.CLI.DISABLED ? null : \"cli\";",
          "",
          "[Added Lines]",
          "85:         return \"cli\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:         StaplerRequest req = Stapler.getCurrentRequest();",
          "106:         if (req.getRestOfPath().length()==0 && \"POST\".equals(req.getMethod())) {",
          "109:         } else {",
          "110:             return this;",
          "111:         }",
          "112:     }",
          "120:             super(duplexServices);",
          "121:         }",
          "123:         @Override",
          "124:         protected FullDuplexHttpService createService(StaplerRequest req, UUID uuid) throws IOException {",
          "169:                             }",
          "170:                         }",
          "175:                         }",
          "184:                         }",
          "194:                         }",
          "195:                     }",
          "205:                     }",
          "208:         }",
          "209:     }",
          "210: }",
          "",
          "[Removed Lines]",
          "108:             throw new CliEndpointResponse();",
          "117:     private class CliEndpointResponse extends FullDuplexHttpService.Response {",
          "119:         CliEndpointResponse() {",
          "128:             if (\"false\".equals(req.getParameter(\"remoting\"))) {",
          "129:                 return new FullDuplexHttpService(uuid) {",
          "130:                     @Override",
          "131:                     protected void run(InputStream upload, OutputStream download) throws IOException, InterruptedException {",
          "132:                         class ServerSideImpl extends PlainCLIProtocol.ServerSide {",
          "133:                             List<String> args = new ArrayList<>();",
          "134:                             Locale locale = Locale.getDefault();",
          "135:                             Charset encoding = Charset.defaultCharset();",
          "136:                             final PipedInputStream stdin = new PipedInputStream();",
          "137:                             final PipedOutputStream stdinMatch = new PipedOutputStream();",
          "138:                             ServerSideImpl(InputStream is, OutputStream os) throws IOException {",
          "139:                                 super(is, os);",
          "140:                                 stdinMatch.connect(stdin);",
          "141:                             }",
          "142:                             @Override",
          "143:                             protected void onArg(String text) {",
          "144:                                 args.add(text);",
          "145:                             }",
          "146:                             @Override",
          "147:                             protected void onLocale(String text) {",
          "149:                             }",
          "150:                             @Override",
          "151:                             protected void onEncoding(String text) {",
          "152:                                 try {",
          "153:                                     encoding = Charset.forName(text);",
          "154:                                 } catch (UnsupportedCharsetException x) {",
          "155:                                     LOGGER.log(Level.WARNING, \"unknown client charset {0}\", text);",
          "156:                                 }",
          "157:                             }",
          "158:                             @Override",
          "159:                             protected synchronized void onStart() {",
          "160:                                 notifyAll();",
          "161:                             }",
          "162:                             @Override",
          "163:                             protected void onStdin(byte[] chunk) throws IOException {",
          "164:                                 stdinMatch.write(chunk);",
          "165:                             }",
          "166:                             @Override",
          "167:                             protected void onEndStdin() throws IOException {",
          "168:                                 stdinMatch.close();",
          "171:                         ServerSideImpl connection = new ServerSideImpl(upload, download);",
          "172:                         connection.begin();",
          "173:                         synchronized (connection) {",
          "174:                             connection.wait(); // TODO this can wait indefinitely even when the connection is broken",
          "176:                         PrintStream stdout = new PrintStream(connection.streamStdout(), false, connection.encoding.name());",
          "177:                         PrintStream stderr = new PrintStream(connection.streamStderr(), true, connection.encoding.name());",
          "178:                         String commandName = connection.args.get(0);",
          "179:                         CLICommand command = CLICommand.clone(commandName);",
          "180:                         if (command == null) {",
          "181:                             stderr.println(\"No such command \" + commandName);",
          "182:                             connection.sendExit(2);",
          "183:                             return;",
          "185:                         command.setTransportAuth(Jenkins.getAuthentication());",
          "186:                         command.setClientCharset(connection.encoding);",
          "187:                         CLICommand orig = CLICommand.setCurrent(command);",
          "188:                         try {",
          "189:                             int exit = command.main(connection.args.subList(1, connection.args.size()), connection.locale, connection.stdin, stdout, stderr);",
          "190:                             stdout.flush();",
          "191:                             connection.sendExit(exit);",
          "192:                         } finally {",
          "193:                             CLICommand.setCurrent(orig);",
          "196:                 };",
          "197:             } else {",
          "198:                 return new FullDuplexHttpChannel(uuid, !Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER)) {",
          "199:                     @SuppressWarnings(\"deprecation\")",
          "200:                     @Override",
          "201:                     protected void main(Channel channel) throws IOException, InterruptedException {",
          "203:                         channel.setProperty(CLICommand.TRANSPORT_AUTHENTICATION, Jenkins.getAuthentication());",
          "204:                         channel.setProperty(CliEntryPoint.class.getName(), new CliManagerImpl(channel));",
          "206:                 };",
          "207:             }",
          "",
          "[Added Lines]",
          "109:             if (\"false\".equals(req.getParameter(\"remoting\"))) {",
          "110:                 throw new PlainCliEndpointResponse();",
          "111:             } else if (jenkins.CLI.get().isEnabled()) {",
          "112:                 throw new RemotingCliEndpointResponse();",
          "113:             } else {",
          "114:                 throw HttpResponses.forbidden();",
          "115:             }",
          "124:     private class PlainCliEndpointResponse extends FullDuplexHttpService.Response {",
          "126:         PlainCliEndpointResponse() {",
          "132:             return new FullDuplexHttpService(uuid) {",
          "133:                 @Override",
          "134:                 protected void run(InputStream upload, OutputStream download) throws IOException, InterruptedException {",
          "135:                     class ServerSideImpl extends PlainCLIProtocol.ServerSide {",
          "136:                         List<String> args = new ArrayList<>();",
          "137:                         Locale locale = Locale.getDefault();",
          "138:                         Charset encoding = Charset.defaultCharset();",
          "139:                         final PipedInputStream stdin = new PipedInputStream();",
          "140:                         final PipedOutputStream stdinMatch = new PipedOutputStream();",
          "141:                         ServerSideImpl(InputStream is, OutputStream os) throws IOException {",
          "142:                             super(is, os);",
          "143:                             stdinMatch.connect(stdin);",
          "144:                         }",
          "145:                         @Override",
          "146:                         protected void onArg(String text) {",
          "147:                             args.add(text);",
          "148:                         }",
          "149:                         @Override",
          "150:                         protected void onLocale(String text) {",
          "152:                         }",
          "153:                         @Override",
          "154:                         protected void onEncoding(String text) {",
          "155:                             try {",
          "156:                                 encoding = Charset.forName(text);",
          "157:                             } catch (UnsupportedCharsetException x) {",
          "158:                                 LOGGER.log(Level.WARNING, \"unknown client charset {0}\", text);",
          "161:                         @Override",
          "162:                         protected synchronized void onStart() {",
          "163:                             notifyAll();",
          "165:                         @Override",
          "166:                         protected void onStdin(byte[] chunk) throws IOException {",
          "167:                             stdinMatch.write(chunk);",
          "169:                         @Override",
          "170:                         protected void onEndStdin() throws IOException {",
          "171:                             stdinMatch.close();",
          "174:                     ServerSideImpl connection = new ServerSideImpl(upload, download);",
          "175:                     connection.begin();",
          "176:                     synchronized (connection) {",
          "177:                         connection.wait(); // TODO this can wait indefinitely even when the connection is broken",
          "179:                     PrintStream stdout = new PrintStream(connection.streamStdout(), false, connection.encoding.name());",
          "180:                     PrintStream stderr = new PrintStream(connection.streamStderr(), true, connection.encoding.name());",
          "181:                     String commandName = connection.args.get(0);",
          "182:                     CLICommand command = CLICommand.clone(commandName);",
          "183:                     if (command == null) {",
          "184:                         stderr.println(\"No such command \" + commandName);",
          "185:                         connection.sendExit(2);",
          "186:                         return;",
          "187:                     }",
          "188:                     command.setTransportAuth(Jenkins.getAuthentication());",
          "189:                     command.setClientCharset(connection.encoding);",
          "190:                     CLICommand orig = CLICommand.setCurrent(command);",
          "191:                     try {",
          "192:                         int exit = command.main(connection.args.subList(1, connection.args.size()), connection.locale, connection.stdin, stdout, stderr);",
          "193:                         stdout.flush();",
          "194:                         connection.sendExit(exit);",
          "195:                     } finally {",
          "196:                         CLICommand.setCurrent(orig);",
          "197:                     }",
          "198:                 }",
          "199:             };",
          "206:     private class RemotingCliEndpointResponse extends FullDuplexHttpService.Response {",
          "208:         RemotingCliEndpointResponse() {",
          "209:             super(duplexServices);",
          "210:         }",
          "212:         @Override",
          "213:         protected FullDuplexHttpService createService(StaplerRequest req, UUID uuid) throws IOException {",
          "217:             return new FullDuplexHttpChannel(uuid, !Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER)) {",
          "218:                 @SuppressWarnings(\"deprecation\")",
          "219:                 @Override",
          "220:                 protected void main(Channel channel) throws IOException, InterruptedException {",
          "222:                     channel.setProperty(CLICommand.TRANSPORT_AUTHENTICATION, Jenkins.getAuthentication());",
          "223:                     channel.setProperty(CliEntryPoint.class.getName(), new CliManagerImpl(channel));",
          "224:                 }",
          "225:             };",
          "226:         }",
          "227:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/cli/CliProtocol.java||core/src/main/java/hudson/cli/CliProtocol.java": [
          "File: core/src/main/java/hudson/cli/CliProtocol.java -> core/src/main/java/hudson/cli/CliProtocol.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     @Override",
          "46:     public String getName() {",
          "48:     }",
          "",
          "[Removed Lines]",
          "47:         return jenkins.CLI.DISABLED ? null : \"CLI-connect\";",
          "",
          "[Added Lines]",
          "47:         return jenkins.CLI.get().isEnabled() ? \"CLI-connect\" : null;",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/cli/CliProtocol2.java||core/src/main/java/hudson/cli/CliProtocol2.java": [
          "File: core/src/main/java/hudson/cli/CliProtocol2.java -> core/src/main/java/hudson/cli/CliProtocol2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: public class CliProtocol2 extends CliProtocol {",
          "28:     @Override",
          "29:     public String getName() {",
          "31:     }",
          "",
          "[Removed Lines]",
          "30:         return jenkins.CLI.DISABLED ? null : \"CLI2-connect\";",
          "",
          "[Added Lines]",
          "30:         return jenkins.CLI.get().isEnabled() ? \"CLI2-connect\" : null;",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/CLI.java||core/src/main/java/jenkins/CLI.java": [
          "File: core/src/main/java/jenkins/CLI.java -> core/src/main/java/jenkins/CLI.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package jenkins;",
          "3: import org.kohsuke.accmod.Restricted;",
          "4: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "13: @Restricted(NoExternalUse.class)",
          "16:     public static boolean DISABLED = Boolean.getBoolean(CLI.class.getName()+\".disabled\");",
          "17: }",
          "",
          "[Removed Lines]",
          "14: public class CLI {",
          "",
          "[Added Lines]",
          "3: import hudson.Extension;",
          "4: import hudson.model.AdministrativeMonitor;",
          "5: import java.io.IOException;",
          "6: import javax.annotation.Nonnull;",
          "7: import jenkins.model.GlobalConfiguration;",
          "8: import jenkins.model.GlobalConfigurationCategory;",
          "9: import org.jenkinsci.Symbol;",
          "12: import org.kohsuke.stapler.HttpResponse;",
          "13: import org.kohsuke.stapler.HttpResponses;",
          "14: import org.kohsuke.stapler.QueryParameter;",
          "15: import org.kohsuke.stapler.interceptor.RequirePOST;",
          "25: @Extension @Symbol(\"remotingCLI\")",
          "26: public class CLI extends GlobalConfiguration {",
          "32:     @Deprecated",
          "35:     @Nonnull",
          "36:     public static CLI get() {",
          "37:         CLI instance = GlobalConfiguration.all().get(CLI.class);",
          "38:         if (instance == null) {",
          "40:             return new CLI();",
          "41:         }",
          "42:         return instance;",
          "43:     }",
          "45:     private boolean enabled = true; // historical default, but overridden in SetupWizard",
          "47:     public CLI() {",
          "48:         load();",
          "49:     }",
          "51:     @Override",
          "52:     public GlobalConfigurationCategory getCategory() {",
          "53:         return GlobalConfigurationCategory.get(GlobalConfigurationCategory.Security.class);",
          "54:     }",
          "56:     public boolean isEnabled() {",
          "57:         return enabled && !DISABLED;",
          "58:     }",
          "60:     public void setEnabled(boolean enabled) {",
          "61:         this.enabled = enabled;",
          "62:         save();",
          "63:     }",
          "65:     @Extension @Symbol(\"remotingCLI\")",
          "66:     public static class WarnWhenEnabled extends AdministrativeMonitor {",
          "68:         public WarnWhenEnabled() {",
          "69:             super(CLI.class.getName());",
          "70:         }",
          "72:         @Override",
          "73:         public String getDisplayName() {",
          "74:             return \"Remoting over CLI\";",
          "75:         }",
          "77:         @Override",
          "78:         public boolean isActivated() {",
          "79:             return CLI.get().isEnabled();",
          "80:         }",
          "82:         @RequirePOST",
          "83:         public HttpResponse doAct(@QueryParameter String no) throws IOException {",
          "84:             if (no == null) {",
          "85:                 CLI.get().setEnabled(false);",
          "86:             } else {",
          "87:                 disable(true);",
          "88:             }",
          "89:             return HttpResponses.redirectViaContextPath(\"manage\");",
          "90:         }",
          "92:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/install/SetupWizard.java||core/src/main/java/jenkins/install/SetupWizard.java": [
          "File: core/src/main/java/jenkins/install/SetupWizard.java -> core/src/main/java/jenkins/install/SetupWizard.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: import java.net.URLConnection;",
          "54: import java.util.Iterator;",
          "55: import java.util.List;",
          "57: import jenkins.model.Jenkins;",
          "58: import jenkins.security.s2m.AdminWhitelistRule;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: import jenkins.CLI;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:                     jenkins.setSlaveAgentPort(SystemProperties.getInteger(Jenkins.class.getName()+\".slaveAgentPort\",-1));",
          "125:                     jenkins.setCrumbIssuer(new DefaultCrumbIssuer(false));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:                     CLI.get().setEnabled(false);",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/CLI/WarnWhenEnabled/message.jelly||core/src/main/resources/jenkins/CLI/WarnWhenEnabled/message.jelly": [
          "File: core/src/main/resources/jenkins/CLI/WarnWhenEnabled/message.jelly -> core/src/main/resources/jenkins/CLI/WarnWhenEnabled/message.jelly",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "2: <!--",
          "3: The MIT License",
          "5: Copyright 2017 CloudBees, Inc.",
          "7: Permission is hereby granted, free of charge, to any person obtaining a copy",
          "8: of this software and associated documentation files (the \"Software\"), to deal",
          "9: in the Software without restriction, including without limitation the rights",
          "10: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
          "11: copies of the Software, and to permit persons to whom the Software is",
          "12: furnished to do so, subject to the following conditions:",
          "14: The above copyright notice and this permission notice shall be included in",
          "15: all copies or substantial portions of the Software.",
          "17: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
          "18: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
          "19: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
          "20: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
          "21: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
          "22: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
          "23: THE SOFTWARE.",
          "24: -->",
          "26: <?jelly escape-by-default='true'?>",
          "27: <j:jelly xmlns:j=\"jelly:core\" xmlns:f=\"/lib/form\">",
          "28:     <div class=\"warning\">",
          "29:         <form method=\"post\" action=\"${rootURL}/${it.url}/act\" name=\"${it.id}\">",
          "30:             <div style=\"float:right\">",
          "31:                 <f:submit name=\"yes\" value=\"${%Disable CLI over Remoting}\"/>",
          "32:                 <f:submit name=\"no\" value=\"${%Dismiss}\"/>",
          "33:             </div>",
          "34:             ${%blurb}",
          "35:         </form>",
          "36:     </div>",
          "37: </j:jelly>",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/CLI/WarnWhenEnabled/message.properties||core/src/main/resources/jenkins/CLI/WarnWhenEnabled/message.properties": [
          "File: core/src/main/resources/jenkins/CLI/WarnWhenEnabled/message.properties -> core/src/main/resources/jenkins/CLI/WarnWhenEnabled/message.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # The MIT License",
          "2: #",
          "3: # Copyright 2017 CloudBees, Inc.",
          "4: #",
          "5: # Permission is hereby granted, free of charge, to any person obtaining a copy",
          "6: # of this software and associated documentation files (the \"Software\"), to deal",
          "7: # in the Software without restriction, including without limitation the rights",
          "8: # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
          "9: # copies of the Software, and to permit persons to whom the Software is",
          "10: # furnished to do so, subject to the following conditions:",
          "11: #",
          "12: # The above copyright notice and this permission notice shall be included in",
          "13: # all copies or substantial portions of the Software.",
          "14: #",
          "15: # THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
          "16: # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
          "17: # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
          "18: # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
          "19: # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
          "20: # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
          "21: # THE SOFTWARE.",
          "23: blurb=\\",
          "24:     Allowing Jenkins CLI to work in <code>-remoting</code> mode is considered dangerous and usually unnecessary. \\",
          "25:     You are advised to disable this mode.",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/CLI/config.jelly||core/src/main/resources/jenkins/CLI/config.jelly": [
          "File: core/src/main/resources/jenkins/CLI/config.jelly -> core/src/main/resources/jenkins/CLI/config.jelly",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "2: <!--",
          "3: The MIT License",
          "5: Copyright 2017 CloudBees, Inc.",
          "7: Permission is hereby granted, free of charge, to any person obtaining a copy",
          "8: of this software and associated documentation files (the \"Software\"), to deal",
          "9: in the Software without restriction, including without limitation the rights",
          "10: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
          "11: copies of the Software, and to permit persons to whom the Software is",
          "12: furnished to do so, subject to the following conditions:",
          "14: The above copyright notice and this permission notice shall be included in",
          "15: all copies or substantial portions of the Software.",
          "17: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
          "18: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
          "19: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
          "20: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
          "21: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
          "22: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
          "23: THE SOFTWARE.",
          "24: -->",
          "26: <?jelly escape-by-default='true'?>",
          "27: <j:jelly xmlns:j=\"jelly:core\" xmlns:f=\"/lib/form\">",
          "28:     <f:section title=\"${%CLI}\">",
          "29:         <f:entry field=\"enabled\">",
          "30:             <f:checkbox title=\"${%Enable CLI over Remoting}\"/>",
          "31:         </f:entry>",
          "32:     </f:section>",
          "33: </j:jelly>",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/CLI/help-enabled.html||core/src/main/resources/jenkins/CLI/help-enabled.html": [
          "File: core/src/main/resources/jenkins/CLI/help-enabled.html -> core/src/main/resources/jenkins/CLI/help-enabled.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <div>",
          "2:     Whether to enable the historical Jenkins CLI mode over remoting",
          "3:     (<code>-remoting</code> option in the client).",
          "4:     While this may be necessary to support certain commands or command options,",
          "5:     it is considered intrinsically insecure.",
          "6:     (<code>-http</code> mode is always available,",
          "7:     and <code>-ssh</code> mode is available whenever the SSH service is enabled.)",
          "8: </div>",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/CLITest.java||test/src/test/java/jenkins/CLITest.java": [
          "File: test/src/test/java/jenkins/CLITest.java -> test/src/test/java/jenkins/CLITest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package jenkins;",
          "5: import hudson.model.Failure;",
          "7: import org.junit.Rule;",
          "8: import org.junit.Test;",
          "9: import org.jvnet.hudson.test.JenkinsRule;",
          "19: public class CLITest {",
          "20:     @Rule",
          "21:     public JenkinsRule j = new JenkinsRule();",
          "",
          "[Removed Lines]",
          "3: import hudson.cli.FullDuplexHttpStream;",
          "4: import hudson.model.Computer;",
          "6: import hudson.remoting.Channel;",
          "11: import java.io.FileNotFoundException;",
          "12: import java.net.URL;",
          "14: import static org.junit.Assert.*;",
          "",
          "[Added Lines]",
          "4: import static org.junit.Assert.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     @Test",
          "27:     public void killSwitch() throws Exception {",
          "33:         try {",
          "51:         }",
          "52:     }",
          "62:         if (r!=0)",
          "63:             throw new Failure(\"CLI failed\");",
          "64:     }",
          "",
          "[Removed Lines]",
          "29:         makeHttpCall();",
          "30:         makeJnlpCall();",
          "32:         CLI.DISABLED = true;",
          "34:             try {",
          "35:                 makeHttpCall();",
          "36:                 fail(\"Should have been rejected\");",
          "37:             } catch (FileNotFoundException e) {",
          "39:             }",
          "40:             try {",
          "41:                 makeJnlpCall();",
          "42:                 fail(\"Should have been rejected\");",
          "43:             } catch (Exception e) {",
          "45:                 e.printStackTrace();",
          "48:             }",
          "49:         } finally {",
          "50:             CLI.DISABLED = false;",
          "54:     private void makeHttpCall() throws Exception {",
          "55:         FullDuplexHttpStream con = new FullDuplexHttpStream(new URL(j.getURL(), \"cli\"));",
          "56:         Channel ch = new Channel(\"test connection\", Computer.threadPoolForRemoting, con.getInputStream(), con.getOutputStream());",
          "57:         ch.close();",
          "58:     }",
          "60:     private void makeJnlpCall() throws Exception {",
          "61:         int r = hudson.cli.CLI._main(new String[]{\"-s\",j.getURL().toString(), \"version\"});",
          "",
          "[Added Lines]",
          "19:         j.jenkins.setSlaveAgentPort(-1); // force HTTP connection",
          "20:         makeCall();",
          "21:         j.jenkins.setSlaveAgentPort(0); // allow TCP connection",
          "22:         makeCall();",
          "24:         CLI.get().setEnabled(false);",
          "26:             j.jenkins.setSlaveAgentPort(-1);",
          "27:             makeCall();",
          "28:             fail(\"Should have been rejected\");",
          "29:         } catch (Exception e) {",
          "31:             e.printStackTrace();",
          "33:         }",
          "34:         try {",
          "35:             j.jenkins.setSlaveAgentPort(0);",
          "36:             makeCall();",
          "37:             fail(\"Should have been rejected\");",
          "38:         } catch (Exception e) {",
          "40:             e.printStackTrace();",
          "46:     private void makeCall() throws Exception {",
          "47:         int r = hudson.cli.CLI._main(new String[] {\"-s\", j.getURL().toString(), \"-remoting\", \"-noKeyAuth\", \"version\"});",
          "",
          "---------------"
        ]
      }
    }
  ]
}