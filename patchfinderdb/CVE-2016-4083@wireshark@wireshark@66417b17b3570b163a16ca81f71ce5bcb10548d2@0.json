{
  "cve_id": "CVE-2016-4083",
  "cve_desc": "epan/dissectors/packet-mswsp.c in the MS-WSP dissector in Wireshark 2.0.x before 2.0.3 does not ensure that data is available before array allocation, which allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "66417b17b3570b163a16ca81f71ce5bcb10548d2",
  "patch_info": {
    "commit_hash": "66417b17b3570b163a16ca81f71ce5bcb10548d2",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/66417b17b3570b163a16ca81f71ce5bcb10548d2",
    "files": [
      "epan/dissectors/packet-mswsp.c"
    ],
    "message": "Check first, then allocate.\n\nWhile we're at it, the MS-WSP spec says that the array size is unsigned,\nand sizeof is always unsigned, so do unsigned arithmetic when doing the\nmultiplication, so we don't have to worry about overflowing the maximum\nint size.\n\nBug: 12341\nChange-Id: Ic68d35bc75330571ef1daa244e8c94cb955955ca\nReviewed-on: https://code.wireshark.org/review/14935\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "epan/dissectors/packet-mswsp.c||epan/dissectors/packet-mswsp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-mswsp.c||epan/dissectors/packet-mswsp.c": [
      "File: epan/dissectors/packet-mswsp.c -> epan/dissectors/packet-mswsp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include <epan/packet.h>",
      "28: #include <epan/expert.h>",
      "29: #include <epan/proto_data.h>",
      "31: #include \"packet-smb.h\"",
      "32: #include \"packet-smb2.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: #include <epan/exceptions.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3982:  return 4 + vvalue_tvb_lpwstr_len(tvb, offset + 4, 0, val);",
      "3983: }",
      "3986: {",
      "3987:  const int offset_in = offset;",
      "3988:  const gboolean varsize = (type->size == -1);",
      "3993:  val->len = num;",
      "3994:  val->u.vt_ui1 = data;",
      "",
      "[Removed Lines]",
      "3985: static int vvalue_tvb_vector_internal(tvbuff_t *tvb, int offset, struct vt_vector *val, struct vtype_data *type, int num)",
      "3989:  const int elsize = varsize ? (int)sizeof(struct data_blob) : type->size;",
      "3990:  guint8 *data = (guint8*)wmem_alloc(wmem_packet_scope(), elsize * num);",
      "3991:  int len, i;",
      "",
      "[Added Lines]",
      "3986: static int vvalue_tvb_vector_internal(tvbuff_t *tvb, int offset, struct vt_vector *val, struct vtype_data *type, guint num)",
      "3990:  const guint elsize = varsize ? (guint)sizeof(struct data_blob) : (guint)type->size;",
      "3991:  guint8 *data;",
      "3992:  int len;",
      "3993:  guint i;",
      "4002:  if ((guint64)elsize * (guint64)num > G_MAXUINT) {",
      "4007:   THROW(ReportedBoundsError);",
      "4008:  }",
      "4013:  tvb_ensure_bytes_exist(tvb, offset, elsize * num);",
      "4018:  data = (guint8*)wmem_alloc(wmem_packet_scope(), elsize * num);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4011: static int vvalue_tvb_vector(tvbuff_t *tvb, int offset, struct vt_vector *val, struct vtype_data *type)",
      "4012: {",
      "4014:  return 4 + vvalue_tvb_vector_internal(tvb, offset+4, val, type, num);",
      "4015: }",
      "",
      "[Removed Lines]",
      "4013:  const int num = tvb_get_letohl(tvb, offset);",
      "",
      "[Added Lines]",
      "4040:  const guint num = tvb_get_letohl(tvb, offset);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c425334394ea22b55a48b282a77553584ede4efc",
      "candidate_info": {
        "commit_hash": "c425334394ea22b55a48b282a77553584ede4efc",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/c425334394ea22b55a48b282a77553584ede4efc",
        "files": [
          "docbook/release-notes.asciidoc",
          "epan/CMakeLists.txt",
          "epan/dissectors/Makefile.common",
          "epan/dissectors/packet-mswsp.c",
          "epan/dissectors/packet-smb-pipe.c",
          "epan/dissectors/packet-smb-pipe.h",
          "epan/dissectors/packet-smb.c",
          "epan/dissectors/packet-smb2.c",
          "epan/dissectors/packet-smb2.h"
        ],
        "message": "MSWSP: Initial implementation of MS-WSP (windows search protocol) dissector\n\nThis changeset is a forward port of Gregors ms-wsp branch from his\nrepo http://repo.or.cz/w/wireshark-wip.git. Most of the messages of\nthe MS-WSP protocol are implemented here and as such consists of the\nmajority of the changes for the dissector.\n\nIn addition to the forward porting Gregors work I added some extra bits\n1) cater for SMB2 Read Response and Write Request msgs that can also\n   contain MSWSP messages\n2) update property specifications with info extracted from MS-WSP protocol\n   doc\n3) store some basic data about previously seen messages that are needed\n   for dissecting CPMGetRows request\n4) expand/update dissect_CPMSetBindings & parse_CTableColumn routines\n5) parse and store CTableColumn & CPMSetBindingsIn structures in conversation\n   related data for use later.\n6) fully dissect/parse SeekDesciption of CPMGetRowsOut\n7) dissect CPMGetRows out message specifically the Rows & Columns\n8) flesh out the boolean properties of uBooleanOptions field\n9) flesh out various other dissectors:\n\tCPMRatioFinished\n\tCPMRestartPosition\n\tCPMCompareBmkIn/CPMCompareBmkOut\n\tCPMGetApproximatePosition\n\tCPMGetSendNotifyOut\n\tFindIndicesIn/Out\n\tFetchValue\n\nBug: 11321\nChange-Id: I68b5c2f3e63874c1dbb271feab89b2b8aa65ac39\nSigned-off-by: Noel Power <noel.power@suse.com>\nReviewed-on: https://code.wireshark.org/review/9440\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc",
          "epan/dissectors/Makefile.common||epan/dissectors/Makefile.common",
          "epan/dissectors/packet-mswsp.c||epan/dissectors/packet-mswsp.c",
          "epan/dissectors/packet-smb-pipe.c||epan/dissectors/packet-smb-pipe.c",
          "epan/dissectors/packet-smb-pipe.h||epan/dissectors/packet-smb-pipe.h",
          "epan/dissectors/packet-smb.c||epan/dissectors/packet-smb.c",
          "epan/dissectors/packet-smb2.c||epan/dissectors/packet-smb2.c",
          "epan/dissectors/packet-smb2.h||epan/dissectors/packet-smb2.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mswsp.c||epan/dissectors/packet-mswsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mswsp.c||epan/dissectors/packet-mswsp.c"
          ]
        }
      },
      "candidate_diff": {
        "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc": [
          "File: docbook/release-notes.asciidoc -> docbook/release-notes.asciidoc",
          "--- Hunk 1 ---",
          "[Context before]",
          "215: Aeron",
          "216: Network File System over Remote Direct Memory Access (NFSoRDMA)",
          "217: eXpressive Internet Protocol (XIP)",
          "218: --sort-and-group--",
          "220: === Updated Protocol Support",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218: Windows Search Protocol (MS-WSP)",
          "",
          "---------------"
        ],
        "epan/dissectors/Makefile.common||epan/dissectors/Makefile.common": [
          "File: epan/dissectors/Makefile.common -> epan/dissectors/Makefile.common",
          "--- Hunk 1 ---",
          "[Context before]",
          "940:  packet-msproxy.c \\",
          "941:  packet-msrp.c  \\",
          "942:  packet-mstp.c  \\",
          "943:  packet-mtp2.c  \\",
          "944:  packet-mtp3.c  \\",
          "945:  packet-mtp3mg.c  \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "943:  packet-mswsp.c \\",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-mswsp.c||epan/dissectors/packet-mswsp.c": [
          "File: epan/dissectors/packet-mswsp.c -> epan/dissectors/packet-mswsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: # include \"config.h\"",
          "28: #include <stdlib.h>",
          "29: #include <string.h>",
          "30: #include <stdbool.h>",
          "32: #include <epan/packet.h>",
          "33: #include <epan/prefs.h>",
          "35: #include \"packet-smb.h\"",
          "36: #include \"packet-smb2.h\"",
          "38: #include \"to_str.h\"",
          "39: #include \"packet-dcerpc-nt.h\"",
          "41: void proto_register_mswsp(void);",
          "43: #define ZERO_STRUCT(x) memset((char *)&(x), 0, sizeof(x))",
          "45: enum vType {",
          "46:  VT_EMPTY       = 0x00,",
          "47:  VT_NULL        = 0x01,",
          "48:  VT_I2          = 0x02,",
          "49:  VT_I4          = 0x03,",
          "50:  VT_R4          = 0x04,",
          "51:  VT_R8          = 0x05,",
          "52:  VT_CY          = 0x06,",
          "53:  VT_DATE        = 0x07,",
          "54:  VT_BSTR        = 0x08,",
          "55:  VT_ERROR       = 0x0a,",
          "56:  VT_BOOL        = 0x0b,",
          "57:  VT_VARIANT     = 0x0c,",
          "58:  VT_DECIMAL     = 0x0e,",
          "59:  VT_I1          = 0x10,",
          "60:  VT_UI1         = 0x11,",
          "61:  VT_UI2         = 0x12,",
          "62:  VT_UI4         = 0x13,",
          "63:  VT_I8          = 0x14,",
          "64:  VT_UI8         = 0x15,",
          "65:  VT_INT         = 0x16,",
          "66:  VT_UINT        = 0x17,",
          "67:  VT_LPSTR       = 0x1e,",
          "68:  VT_LPWSTR      = 0x1f,",
          "69:  VT_COMPRESSED_LPWSTR = 0x23,",
          "70:  VT_FILETIME    = 0x40,",
          "71:  VT_BLOB        = 0x41,",
          "72:  VT_BLOB_OBJECT = 0x46,",
          "73:  VT_CLSID       = 0x48,",
          "74:  VT_VECTOR      = 0x1000,",
          "75:  VT_ARRAY       = 0x2000",
          "76: };",
          "78: struct data_blob {",
          "79:  guint8 *data;",
          "80:  guint32 size;",
          "81: };",
          "83: struct data_str {",
          "84:  const char *str;",
          "85:  guint32 len;",
          "86: };",
          "88: struct vt_decimal {",
          "89:  guint32 hi, lo, mid;",
          "90: };",
          "93: struct vt_vector {",
          "94:  guint32 len;",
          "95:  union  {",
          "96:   gint8 *vt_i1;",
          "97:   guint8 *vt_ui1;",
          "98:   gint16 *vt_i2;",
          "99:   guint16 *vt_ui2, *vt_bool;",
          "100:   gint32 *vt_i4;",
          "101:   guint32 *vt_ui4, *vt_error;",
          "102:   gint64 *vt_i8, *vt_cy, *vt_filetime;",
          "103:   guint64 *vt_ui8;",
          "104:   float *vt_r4;",
          "105:   double *vt_r8, *vt_date;",
          "106:   e_guid_t *vt_clsid;",
          "107:   struct data_blob *vt_blob, *vt_blob_object;",
          "108:   struct data_str *vt_lpstr, *vt_lpwstr, *vt_compressed_lpwstr, *vt_bstr;",
          "109:  } u;",
          "110: };",
          "112: struct SAFEARRAYBOUNDS {",
          "113:  guint32 cElements, lLbound;",
          "114: };",
          "116: struct vt_array {",
          "117:  struct vt_vector vData;",
          "118:  guint16 cDims, fFeature;",
          "119:  guint32 cbElements;",
          "121:  struct SAFEARRAYBOUNDS *Rgsabound;",
          "122: };",
          "124: union vt_single",
          "125: {",
          "126:  gint8 vt_i1;",
          "127:  guint8 vt_ui1;",
          "128:  gint16 vt_i2;",
          "129:  guint16 vt_ui2, vt_bool;",
          "130:  gint32 vt_i4, vt_int;",
          "131:  guint32 vt_ui4, vt_uint, vt_error;",
          "132:  gint64 vt_i8, vt_cy, vt_filetime;",
          "133:  guint64 vt_ui8;",
          "134:  double vt_r8, vt_date;",
          "135:  e_guid_t vt_clsid;",
          "136:  float vt_r4;",
          "137:  struct vt_decimal vt_decimal;",
          "138:  struct data_blob vt_blob, vt_blob_object;",
          "139:  struct data_str vt_lpstr, vt_lpwstr, vt_compressed_lpwstr, vt_bstr;",
          "140: };",
          "142: union vValue {",
          "143:  union vt_single vt_single;",
          "144:  struct vt_vector vt_vector;",
          "145:  struct vt_array vt_array;",
          "146: };",
          "148: struct vtype_data {",
          "154:  void (*strbuf_append)(wmem_strbuf_t*, void*);",
          "155: };",
          "158: struct CBaseStorageVariant {",
          "160:  guint16 vData1;",
          "161:  guint16 vData2;",
          "162:  union vValue vValue;",
          "164:  struct vtype_data *type;",
          "165: };",
          "170: enum rType {",
          "171:  RTNone = 0,",
          "172:  RTAnd,",
          "173:  RTOr,",
          "174:  RTNot,",
          "175:  RTContent,",
          "176:  RTProperty,",
          "177:  RTProximity,",
          "178:  RTVector,",
          "179:  RTNatLanguage,",
          "180:  RTScope,",
          "181:  RTCoerce_Add,",
          "182:  RTCoerce_Multiply,",
          "183:  RTCoerce_Absolute,",
          "184:  RTProb,",
          "185:  RTFeedback,",
          "186:  RTReldoc,",
          "187:  RTReuseWhere = 0x11,",
          "188:  RTInternalProp = 0x00fffffa,",
          "189:  RTPhrase = 0x00fffffd",
          "190: };",
          "193: struct CRestriction;",
          "195: enum relop {",
          "196:  PRLT = 0,",
          "197:  PRLE,",
          "198:  PRGT,",
          "199:  PRGE,",
          "200:  PREQ,",
          "201:  PRNE,",
          "202:  PRRE,",
          "203:  PRAllBits,",
          "204:  PRSomeBits,",
          "205:  PRAll = 0x100,",
          "206:  PRAny = 0x200",
          "207: };",
          "209: enum PRSPEC_Kind {",
          "210:  PRSPEC_LPWSTR = 0,",
          "211:  PRSPEC_PROPID",
          "212: };",
          "215: struct CFullPropSpec {",
          "216:  e_guid_t guid;",
          "217:  enum PRSPEC_Kind kind;",
          "218:  union {",
          "219:   guint32 propid;",
          "220:   char *name;",
          "221:  } u;",
          "222: };",
          "225: struct CPropertyRestriction {",
          "227:  struct CFullPropSpec property;",
          "228:  struct CBaseStorageVariant prval;",
          "229:  guint32 lcid;",
          "230: };",
          "233: struct CNodeRestriction {",
          "234:  guint32 cNode;",
          "235:  struct CRestriction *paNode;",
          "236: };",
          "239: struct CRestriction {",
          "240:  enum rType ulType;",
          "241:  guint32 Weight;",
          "242:  union {",
          "243:   struct CNodeRestriction *RTAnd, *RTOr, *RTProximity, *RTPhrase;",
          "244:   struct CRestriction *RTNot;",
          "245:   struct CContentRestriction *RTContent;",
          "246:   struct CPropertyRestriction *RTProperty;",
          "247:   struct CVectorRestriction *RTVector;",
          "248:   struct CNatLanguageRestriction *RTNatLanguage;",
          "249:   struct CScopeRestriction *RTScope;",
          "250:   struct CReuseWhere *RTReuseWhere;",
          "251:   struct CInternalPropertyRestriction *RTInternalProp;",
          "252:   struct CCoercionRestriction *RTCoerce_Add, *RTCoerce_Multiply, *RTCoerce_Absolute;",
          "253:  } u;",
          "254: };",
          "258: struct CCoercionRestriction {",
          "259:  float value;",
          "260:  struct CRestriction child;",
          "261: };",
          "264: struct CContentRestriction {",
          "265:  struct CFullPropSpec property;",
          "266:  const char *phrase;",
          "267:  guint32 lcid;",
          "268:  guint32 method;",
          "269: };",
          "272: struct CReuseWhere /*Restriction*/ {",
          "273:  guint32 whereId;",
          "274: };",
          "277: struct CNatLanguageRestriction {",
          "278:  struct CFullPropSpec property;",
          "279:  const char *phrase;",
          "280:  guint32 lcid;",
          "281: };",
          "283: #define PROP_LENGTH 255",
          "286: struct CTableColumn {",
          "288:  guint32 vtype;",
          "289:  guint8  aggregateused;",
          "290:  guint8  aggregatetype;",
          "291:  guint8  valueused;",
          "292:  guint16 valueoffset;",
          "293:  guint16 valuesize;",
          "294:  guint8  statusused;",
          "295:  guint16 statusoffset;",
          "296:  guint8  lengthused;",
          "297:  guint16 lengthoffset;",
          "298:  char name[PROP_LENGTH];",
          "299: };",
          "303: struct CPMSetBindingsIn {",
          "304:  guint32 hcursor;",
          "305:  guint32 brow;",
          "306:  guint32 bbindingdesc;",
          "307:  guint32 dummy;",
          "308:  guint32 ccolumns;",
          "309:  struct CTableColumn *acolumns;",
          "310: };",
          "312: struct vector_or_array_64 {",
          "313:  guint64 count;",
          "314:  guint64 array_address;",
          "315: };",
          "317: struct vector_or_array_32 {",
          "318:  guint32 count;",
          "319:  guint32 array_address;",
          "320: };",
          "323: struct CRowVariant {",
          "324:  guint16 vtype;",
          "325:  guint16 reserved1;",
          "326:  guint32 reserved2;",
          "327:  union {",
          "328:   guint8  byte;",
          "329:   guint16 shortw;",
          "330:   guint32 longw;",
          "331:   guint64 hyperw;",
          "332:   union {",
          "333:       struct vector_or_array_64 i64;",
          "334:       struct vector_or_array_32 i32;",
          "335:   } array_vector;",
          "336:  } content;",
          "337: };",
          "339: static int SMB1 = 1;",
          "340: static int SMB2 = 2;",
          "344: void proto_reg_handoff_mswsp(void);",
          "347: static int proto_mswsp = -1;",
          "348: static int hf_mswsp_msg = -1;",
          "349: static int hf_mswsp_hdr = -1;",
          "350: static int hf_mswsp_hdr_msg = -1;",
          "351: static int hf_mswsp_hdr_status = -1;",
          "352: static int hf_mswsp_hdr_checksum = -1;",
          "353: static int hf_mswsp_hdr_reserved = -1;",
          "354: static int hf_mswsp_msg_Connect_Version = -1;",
          "355: static int hf_mswsp_msg_ConnectIn_ClientIsRemote = -1;",
          "356: static int hf_mswsp_msg_ConnectIn_Blob1 = -1;",
          "357: static int hf_mswsp_msg_ConnectIn_MachineName = -1;",
          "358: static int hf_mswsp_msg_ConnectIn_UserName = -1;",
          "359: static int hf_mswsp_msg_ConnectIn_PropSets_num = -1;",
          "360: static int hf_mswsp_bool_options = -1;",
          "361: static int hf_mswsp_bool_options_cursor = -1;",
          "362: static int hf_mswsp_bool_options_async = -1;",
          "363: static int hf_mswsp_bool_options_firstrows = -1;",
          "364: static int hf_mswsp_bool_options_holdrows = -1;",
          "365: static int hf_mswsp_bool_options_chaptered = -1;",
          "366: static int hf_mswsp_bool_options_useci = -1;",
          "367: static int hf_mswsp_bool_options_defertrim = -1;",
          "368: static int hf_mswsp_bool_options_rowsetevents = -1;",
          "369: static int hf_mswsp_bool_options_dontcomputeexpensive = -1;",
          "370: static int hf_mswsp_guid_time_low = -1;",
          "371: static int hf_mswsp_guid_time_mid = -1;",
          "372: static int hf_mswsp_guid_time_high = -1;",
          "373: static int hf_mswsp_guid_time_clock_hi = -1;",
          "374: static int hf_mswsp_guid_time_clock_low = -1;",
          "375: static int hf_mswsp_guid_node = -1;",
          "376: static int hf_mswsp_lcid = -1;",
          "377: static int hf_mswsp_lcid_sortid = -1;",
          "378: static int hf_mswsp_lcid_langid = -1;",
          "379: static int hf_mswsp_cscort_column = -1;",
          "380: static int hf_mswsp_cscort_order = -1;",
          "381: static int hf_mswsp_cscort_individual = -1;",
          "382: static int hf_mswsp_cscortset_count = -1;",
          "383: static int hf_mswsp_ctablecolumn_vtype = -1;",
          "384: static int hf_mswsp_ctablecolumn_aggused = -1;",
          "385: static int hf_mswsp_ctablecolumn_aggtype = -1;",
          "386: static int hf_mswsp_ctablecolumn_valused = -1;",
          "387: static int hf_mswsp_ctablecolumn_valoffset = -1;",
          "388: static int hf_mswsp_ctablecolumn_valsize = -1;",
          "389: static int hf_mswsp_ctablecolumn_statused = -1;",
          "390: static int hf_mswsp_ctablecolumn_statoffset = -1;",
          "391: static int hf_mswsp_ctablecolumn_lenused = -1;",
          "392: static int hf_mswsp_ctablecolumn_lenoffset = -1;",
          "393: static int hf_mswsp_cfullpropspec_kind = -1;",
          "394: static int hf_mswsp_cfullpropspec_propid = -1;",
          "395: static int hf_mswsp_cfullpropspec_propname = -1;",
          "396: static int hf_mswsp_cproprestrict_relop = -1;",
          "397: static int hf_mswsp_ccoercerestrict_value = -1;",
          "398: static int hf_mswsp_ccontentrestrict_cc = -1;",
          "399: static int hf_mswsp_ccontentrestrict_phrase = -1;",
          "400: static int hf_mswsp_ccontentrestrict_method = -1;",
          "401: static int hf_mswsp_natlangrestrict_cc = -1;",
          "402: static int hf_mswsp_natlangrestrict_phrase = -1;",
          "403: static int hf_mswsp_crestrict_ultype = -1;",
          "404: static int hf_mswsp_crestrict_weight = -1;",
          "405: static int hf_mswsp_crestrictarray_count = -1;",
          "406: static int hf_mswsp_crestrictarray_present = -1;",
          "407: static int hf_mswsp_cnoderestrict_cnode = -1;",
          "408: static int hf_mswsp_cbasestorvariant_vtype = -1;",
          "409: static int hf_mswsp_cbasestorvariant_vvalue = -1;",
          "410: static int hf_mswsp_cbasestorvariant_vdata1 = -1;",
          "411: static int hf_mswsp_cbasestorvariant_vdata2 = -1;",
          "412: static int hf_mswsp_cbasestorvariant_num = -1;",
          "413: static int hf_mswsp_cbasestorvariant_cdims = -1;",
          "414: static int hf_mswsp_cbasestorvariant_ffeatures = -1;",
          "415: static int hf_mswsp_cbasestorvariant_cbelements = -1;",
          "416: static int hf_mswsp_cbasestorvariant_rgsabound = -1;",
          "417: static int hf_mswsp_cdbcolid_ekind = -1;",
          "418: static int hf_mswsp_cdbcolid_ulid = -1;",
          "419: static int hf_mswsp_cdbcolid_vstring = -1;",
          "420: static int hf_mswsp_cdbprop_id = -1;",
          "421: static int hf_mswsp_cdbprop_options = -1;",
          "422: static int hf_mswsp_cdbprop_status = -1;",
          "423: static int hf_mswsp_cdbpropset_cprops = -1;",
          "424: static int hf_mswsp_rangeboundry_ultype = -1;",
          "425: static int hf_mswsp_rangeboundry_labelpresent = -1;",
          "426: static int hf_mswsp_rangeboundry_cclabel = -1;",
          "427: static int hf_mswsp_rangeboundry_label = -1;",
          "428: static int hf_mswsp_crangecategspec_crange = -1;",
          "429: static int hf_mswsp_ccategspec_type = -1;",
          "430: static int hf_mswsp_caggregspec_type = -1;",
          "431: static int hf_mswsp_caggregspec_ccalias = -1;",
          "432: static int hf_mswsp_caggregspec_alias = -1;",
          "433: static int hf_mswsp_caggregspec_idcolumn = -1;",
          "434: static int hf_mswsp_caggregset_count = -1;",
          "435: static int hf_mswsp_caggregsortkey_order = -1;",
          "436: static int hf_mswsp_csortaggregset_count = -1;",
          "437: static int hf_mswsp_cingroupsortaggregset_type = -1;",
          "438: static int hf_mswsp_cingroupsortaggregsets_count = -1;",
          "439: static int hf_mswsp_categorizationspec_cmaxres= -1;",
          "440: static int hf_mswsp_crowsetprops_ulmaxopenrows = -1;",
          "441: static int hf_mswsp_crowsetprops_ulmemusage = -1;",
          "442: static int hf_mswsp_crowsetprops_cmaxresults = -1;",
          "443: static int hf_mswsp_crowsetprops_ccmdtimeout = -1;",
          "444: static int hf_mswsp_cpidmapper_count = -1;",
          "445: static int hf_mswsp_ccolumngroup_count = -1;",
          "446: static int hf_mswsp_ccolumngroup_grouppid = -1;",
          "447: static int hf_mswsp_ccolumngroup_pid = -1;",
          "448: static int hf_mswsp_ccolumngrouparray_count = -1;",
          "449: static int hf_mswsp_int32array_value = -1;",
          "450: static int hf_mswsp_crowseeknext_cskip = -1;",
          "451: static int hf_mswsp_crowseekat_bmkoffset = -1;",
          "452: static int hf_mswsp_crowseekat_skip = -1;",
          "453: static int hf_mswsp_crowseekat_hregion = -1;",
          "454: static int hf_mswsp_crowseekatratio_ulnumerator = -1;",
          "455: static int hf_mswsp_crowseekatratio_uldenominator = -1;",
          "456: static int hf_mswsp_crowseekatratio_hregion = -1;",
          "457: static int hf_mswsp_crowseekbybookmark_cbookmarks = -1;",
          "458: static int hf_mswsp_crowseekbybookmark_maxret = -1;",
          "459: static int hf_mswsp_crowvariantinfo_count64 = -1;",
          "460: static int hf_mswsp_arrayvector_address64 = -1;",
          "461: static int hf_mswsp_crowvariantinfo_count32 = -1;",
          "462: static int hf_mswsp_arrayvector_address32 = -1;",
          "463: static int hf_mswsp_rowvariant_item_address64 = -1;",
          "464: static int hf_mswsp_rowvariant_item_address32 = -1;",
          "465: static int hf_mswsp_rowvariant_item_value = -1;",
          "466: static int hf_mswsp_rowvariant_vtype = -1;",
          "467: static int hf_mswsp_rowvariant_reserved1 = -1;",
          "468: static int hf_mswsp_rowvariant_reserved2 = -1;",
          "469: static int hf_mswsp_ctablecolumn_status = -1;",
          "470: static int hf_mswsp_ctablecolumn_length = -1;",
          "471: static int hf_mswsp_msg_cpmcreatequery_size = -1;",
          "472: static int hf_mswsp_msg_cpmcreatequery_ccolumnsetpresent = -1;",
          "473: static int hf_mswsp_msg_cpmcreatequery_crestrictionpresent = -1;",
          "474: static int hf_mswsp_msg_cpmcreatequery_csortpresent = -1;",
          "475: static int hf_mswsp_msg_cpmcreatequery_csortset_xxx = -1;",
          "476: static int hf_mswsp_msg_cpmcreatequery_ccategpresent = -1;",
          "477: static int hf_mswsp_msg_cpmcreatequery_ccateg_count = -1;",
          "478: static int hf_mswsp_msg_cpmcreatequery_trueseq = -1;",
          "479: static int hf_mswsp_msg_cpmcreatequery_workid = -1;",
          "480: static int hf_mswsp_msg_cpmcreatequery_cursors = -1;",
          "481: static int hf_mswsp_msg_cpmgetrows_hcursor = -1;",
          "482: static int hf_mswsp_msg_cpmgetrows_rowstotransfer = -1;",
          "483: static int hf_mswsp_msg_cpmgetrows_rowwidth = -1;",
          "484: static int hf_mswsp_msg_cpmgetrows_cbseek = -1;",
          "485: static int hf_mswsp_msg_cpmgetrows_cbreserved = -1;",
          "486: static int hf_mswsp_msg_cpmgetrows_cbreadbuffer = -1;",
          "487: static int hf_mswsp_msg_cpmgetrows_ulclientbase = -1;",
          "488: static int hf_mswsp_msg_cpmgetrows_fbwdfetch = -1;",
          "489: static int hf_mswsp_msg_cpmgetrows_etype = -1;",
          "490: static int hf_mswsp_msg_cpmgetrows_chapt = -1;",
          "491: static int hf_mswsp_msg_cpmgetrows_crowsreturned = -1;",
          "492: static int hf_mswsp_msg_cpmratiofinished_hcursor = -1;",
          "493: static int hf_mswsp_msg_cpmratiofinished_fquick = -1;",
          "494: static int hf_mswsp_msg_cpmratiofinished_ulnumerator = -1;",
          "495: static int hf_mswsp_msg_cpmratiofinished_uldenominator = -1;",
          "496: static int hf_mswsp_msg_cpmratiofinished_crows = -1;",
          "497: static int hf_mswsp_msg_cpmratiofinished_fnewrows = -1;",
          "498: static int hf_mswsp_msg_cpmcomparebmk_hcursor = -1;",
          "499: static int hf_mswsp_msg_cpmcomparebmk_chapt = -1;",
          "500: static int hf_mswsp_msg_cpmcomparebmk_bmkfirst = -1;",
          "501: static int hf_mswsp_msg_cpmcomparebmk_bmksecond = -1;",
          "502: static int hf_mswsp_msg_cpmcomparebmk_dwcomparison = -1;",
          "503: static int hf_mswsp_msg_cpmgetapproxpos_hcursor = -1;",
          "504: static int hf_mswsp_msg_cpmgetapproxpos_chapt = -1;",
          "505: static int hf_mswsp_msg_cpmgetapproxpos_bmk = -1;",
          "506: static int hf_mswsp_msg_cpmgetapproxpos_numerator = -1;",
          "507: static int hf_mswsp_msg_cpmgetapproxpos_denominator = -1;",
          "508: static int hf_mswsp_msg_cpmsetbinding_hcursor = -1;",
          "509: static int hf_mswsp_msg_cpmsetbinding_cbrow = -1;",
          "510: static int hf_mswsp_msg_cpmsetbinding_desc = -1;",
          "511: static int hf_mswsp_msg_cpmsetbinding_dummy = -1;",
          "512: static int hf_mswsp_msg_cpmsetbinding_ccolumns = -1;",
          "513: static int hf_mswsp_msg_cpmsetbinding_acolumns = -1;",
          "514: static int hf_mswsp_msg_cpmsendnotify_watchnotify = -1;",
          "515: static int hf_mswsp_msg_cpmgetquerystatus_hcursor = -1;",
          "516: static int hf_mswsp_msg_cpmgetquerystatus_qstatus = -1;",
          "517: static int hf_mswsp_msg_cpmcistate_cbstruct = -1;",
          "518: static int hf_mswsp_msg_cpmcistate_cwordlist = -1;",
          "519: static int hf_mswsp_msg_cpmcistate_cpersistindex = -1;",
          "520: static int hf_mswsp_msg_cpmcistate_cqueries = -1;",
          "521: static int hf_mswsp_msg_cpmcistate_cfreshtest = -1;",
          "522: static int hf_mswsp_msg_cpmcistate_dwmergeprogress = -1;",
          "523: static int hf_mswsp_msg_cpmcistate_estate = -1;",
          "524: static int hf_mswsp_msg_cpmcistate_cfiltereddocs = -1;",
          "525: static int hf_mswsp_msg_cpmcistate_ctotaldocs = -1;",
          "526: static int hf_mswsp_msg_cpmcistate_cpendingscans = -1;",
          "527: static int hf_mswsp_msg_cpmcistate_dwindexsize = -1;",
          "528: static int hf_mswsp_msg_cpmcistate_cuniquekeys = -1;",
          "529: static int hf_mswsp_msg_cpmcistate_csecqdocuments = -1;",
          "530: static int hf_mswsp_msg_cpmcistate_dwpropcachesize = -1;",
          "531: static int hf_mswsp_msg_cpmfetchvalue_wid = -1;",
          "532: static int hf_mswsp_msg_cpmfetchvalue_cbsofar = -1;",
          "533: static int hf_mswsp_msg_cpmfetchvalue_cbpropspec = -1;",
          "534: static int hf_mswsp_msg_cpmfetchvalue_cbchunk = -1;",
          "535: static int hf_mswsp_msg_cpmfetchvalue_cbvalue = -1;",
          "536: static int hf_mswsp_msg_cpmfetchvalue_fmoreexists = -1;",
          "537: static int hf_mswsp_msg_cpmfetchvalue_fvalueexists = -1;",
          "538: static int hf_mswsp_msg_cpmfetchvalue_vvalue = -1;",
          "539: static int hf_mswsp_msg_cpmquerystatusex_hcursor = -1;",
          "540: static int hf_mswsp_msg_cpmquerystatusex_bmk = -1;",
          "541: static int hf_mswsp_msg_cpmquerystatusex_qstatus = -1;",
          "542: static int hf_mswsp_msg_cpmquerystatusex_cfiltereddocs = -1;",
          "543: static int hf_mswsp_msg_cpmquerystatusex_cdocstofilter = -1;",
          "544: static int hf_mswsp_msg_cpmquerystatusex_dwratiodenom = -1;",
          "545: static int hf_mswsp_msg_cpmquerystatusex_dwrationumer = -1;",
          "546: static int hf_mswsp_msg_cpmquerystatusex_irowbmk = -1;",
          "547: static int hf_mswsp_msg_cpmquerystatusex_crowstotal = -1;",
          "548: static int hf_mswsp_msg_cpmquerystatusex_maxrank = -1;",
          "549: static int hf_mswsp_msg_cpmquerystatusex_cresultsfound = -1;",
          "550: static int hf_mswsp_msg_cpmquerystatusex_whereid = -1;",
          "551: static int hf_mswsp_msg_cpmrestartposition_hcursor = -1;",
          "552: static int hf_mswsp_msg_cpmrestartposition_chapt = -1;",
          "553: static int hf_mswsp_msg_cpmgetrowsetnotify_wid = -1;",
          "554: static int hf_mswsp_msg_cpmgetrowsetnotify_moreevents = -1;",
          "555: static int hf_mswsp_msg_cpmgetrowsetnotify_eventtype = -1;",
          "556: static int hf_mswsp_msg_cpmgetrowsetnotify_rowsetitemstate = -1;",
          "557: static int hf_mswsp_msg_cpmgetrowsetnotify_changeditemstate = -1;",
          "558: static int hf_mswsp_msg_cpmgetrowsetnotify_rowsetevent = -1;",
          "559: static int hf_mswsp_msg_cpmgetrowsetnotify_rowseteventdata1 = -1;",
          "560: static int hf_mswsp_msg_cpmgetrowsetnotify_rowseteventdata2 = -1;",
          "561: static int hf_mswsp_msg_cpmfindindices_cwids = -1;",
          "562: static int hf_mswsp_msg_cpmfindindices_cdepthprev = -1;",
          "563: static int hf_mswsp_msg_cpmfindindices_cdepthnext = -1;",
          "564: static int hf_mswsp_msg_cpmsetscopeprioritization_priority = -1;",
          "565: static int hf_mswsp_msg_cpmsetscopeprioritization_eventfreq = -1;",
          "566: static int hf_mswsp_msg_cpmsetscopestatisics_dwindexitems = -1;",
          "567: static int hf_mswsp_msg_cpmsetscopestatisics_dwoutstandingadds = -1;",
          "568: static int hf_mswsp_msg_cpmsetscopestatisics_dwoutstandingmodifies = -1;",
          "570: static gboolean gPREF_HEX = FALSE;",
          "572: static guint gPORT_PREF = 1234;",
          "575: static gint ett_mswsp = -1;",
          "576: static gint ett_mswsp_hdr = -1;",
          "577: static gint ett_mswsp_msg = -1;",
          "578: static gint ett_mswsp_pad = -1;",
          "580: static gint ett_mswsp_property_restriction = -1;",
          "581: static gint ett_CRestrictionArray = -1;",
          "582: static gint ett_CBaseStorageVariant = -1;",
          "583: static gint ett_CBaseStorageVariant_Vector = -1;",
          "584: static gint ett_CBaseStorageVariant_Array = -1;",
          "585: static gint ett_CDbColId = -1;",
          "586: static gint ett_GUID = -1;",
          "587: static gint ett_CDbProp = -1;",
          "588: static gint ett_CDbPropSet = -1;",
          "589: static gint ett_CDbPropSet_Array = -1;",
          "590: static gint ett_CRestriction = -1;",
          "591: static gint ett_CNodeRestriction = -1;",
          "592: static gint ett_CPropertyRestriction = -1;",
          "593: static gint ett_CCoercionRestriction = -1;",
          "594: static gint ett_CContentRestriction = -1;",
          "595: static gint ett_RANGEBOUNDARY = -1;",
          "596: static gint ett_CRangeCategSpec = -1;",
          "597: static gint ett_CCategSpec = -1;",
          "598: static gint ett_CAggregSpec = -1;",
          "599: static gint ett_CAggregSet = -1;",
          "600: static gint ett_CCategorizationSpec = -1;",
          "601: static gint ett_CAggregSortKey = -1;",
          "602: static gint ett_CSortAggregSet = -1;",
          "603: static gint ett_CInGroupSortAggregSet = -1;",
          "604: static gint ett_CInGroupSortAggregSets = -1;",
          "605: static gint ett_CRowsetProperties = -1;",
          "606: static gint ett_CFullPropSpec = -1;",
          "607: static gint ett_CPidMapper = -1;",
          "608: static gint ett_CSort = -1;",
          "609: static gint ett_CSortSet = -1;",
          "610: static gint ett_CNatLanguageRestriction = -1;",
          "611: static gint ett_CColumnGroup = -1;",
          "612: static gint ett_CColumnGroupArray = -1;",
          "613: static gint ett_LCID = -1;",
          "614: static gint ett_CTableColumn = -1;",
          "615: static gint ett_Array = -1;",
          "616: static gint ett_SeekDescription = -1;",
          "617: static gint ett_CRowsSeekNext = -1;",
          "618: static gint ett_CRowsSeekAt = -1;",
          "619: static gint ett_CRowsSeekAtRatio = -1;",
          "620: static gint ett_CRowsSeekByBookmark = -1;",
          "621: static gint ett_GetRowsRow = -1;",
          "622: static gint ett_GetRowsColumn = -1;",
          "623: static gint ett_CRowVariant = -1;",
          "624: static gint ett_CRowVariant_Vector = -1;",
          "625: static gint ett_mswsp_bool_options = -1;",
          "626: static gint ett_mswsp_uin32_array = -1;",
          "627: static gint ett_mswsp_msg_padding = -1;",
          "628: static gint ett_mswsp_msg_creusewhere = -1;",
          "630: static struct vtype_data *vType_get_type(guint16 t);",
          "633: struct rows_data {",
          "634:  guint32 ulclientbase;",
          "635:  guint32 cbreserved;",
          "636: };",
          "639: struct message_data {",
          "640:  guint32 fid;",
          "641:  guint frame;",
          "642:  guint16 msg_id;",
          "643:  gboolean is_request;",
          "644:  int smb_level;",
          "645:  union {",
          "649:  } content;",
          "650: };",
          "652: struct mswsp_ct {",
          "653:  GSList *GSL_message_data;",
          "654: };",
          "656: static gint msg_data_find(struct message_data *a, struct message_data *b)",
          "657: {",
          "658:  if (a->fid == b->fid",
          "659:   && a->frame == b->frame",
          "660:   && a->msg_id == b->msg_id",
          "661:   && a->smb_level == b->smb_level",
          "662:   && a->is_request == b->is_request) {",
          "663:   return 0;",
          "664:  }",
          "665:  return 1;",
          "666: }",
          "667: static  smb_fid_info_t *find_fid_info(smb_info_t *si)",
          "668: {",
          "669:  smb_fid_info_t *fid_info = NULL;",
          "670:  smb_transact_info_t *tri = (smb_transact_info_t *)((si->sip->extra_info_type == SMB_EI_TRI) ? si->sip->extra_info : NULL);",
          "671:  GSList *iter;",
          "672:  guint32 fid = 0;",
          "674:  if (tri == NULL) {",
          "676:   if (si->sip && (si->sip->extra_info_type == SMB_EI_RWINFO)) {",
          "677:    fid = si->sip->fid;",
          "678:   }",
          "679:  } else {",
          "680:   fid = tri->fid;",
          "681:  }",
          "684:  if (!fid) {",
          "685:   return NULL;",
          "686:  }",
          "687:  for (iter = si->ct->GSL_fid_info; iter; iter = g_slist_next(iter)) {",
          "688:   smb_fid_info_t *info = (smb_fid_info_t *)iter->data;",
          "689:   if ((info->tid == si->tid) && (info->fid == fid)) {",
          "690:    fid_info = info;",
          "691:    break;",
          "692:   }",
          "693:  }",
          "694:  return fid_info;",
          "695: }",
          "697: static bool get_fid_and_frame(packet_info *pinfo, guint32 *fid, guint *frame,",
          "698:          void *data)",
          "699: {",
          "700:  bool result = true;",
          "701:  int *p_smb_level = (int*)p_get_proto_data(wmem_file_scope(), pinfo, proto_mswsp, 0);",
          "702:  if (!p_smb_level) {",
          "703:   return false;",
          "704:  }",
          "706:  if (*p_smb_level == SMB1) {",
          "707:   smb_info_t *si = (smb_info_t*)data;",
          "708:   smb_fid_info_t *info;",
          "709:   info = find_fid_info(si);",
          "710:   if (!info) {",
          "711:    return false;",
          "712:   }",
          "714:  } else {",
          "715:   smb2_info_t *si2 = (smb2_info_t*)data;",
          "716:   guint32     open_frame = 0, close_frame = 0;",
          "717:   char       *fid_name = NULL;",
          "718:   if (si2->saved) {",
          "719:    dcerpc_fetch_polhnd_data(&si2->saved->policy_hnd, &fid_name, NULL, &open_frame, &close_frame, pinfo->fd->num);",
          "721:   } else {",
          "722:    result = false;",
          "723:   }",
          "724:  }",
          "725:  return result;",
          "726: }",
          "728: static GSList *conv_tables = NULL;",
          "730: static void",
          "731: mswsp_init_protocol(void)",
          "732: {",
          "733:  GSList *table_iter;",
          "734:  if (conv_tables) {",
          "735:   for(table_iter = conv_tables; table_iter;",
          "736:    table_iter = g_slist_next(table_iter)) {",
          "737:    struct mswsp_ct  *ct = (struct mswsp_ct *)table_iter->data;",
          "739:    g_slist_free(ct->GSL_message_data);",
          "740:    g_free(ct);",
          "741:   }",
          "742:   g_slist_free(conv_tables);",
          "743:   conv_tables = NULL;",
          "744:  }",
          "745: }",
          "747: static struct message_data *find_or_create_message_data(struct mswsp_ct *conv_data, packet_info *pinfo, guint16 msg_id, gboolean is_request, void *data)",
          "748: {",
          "749:  struct message_data to_find;",
          "750:  GSList *result = NULL;",
          "751:  int *p_smb_level = (int*)p_get_proto_data(wmem_file_scope(), pinfo, proto_mswsp, 0);",
          "752:  to_find.is_request = is_request;",
          "753:  to_find.msg_id = msg_id;",
          "754:  to_find.smb_level = *p_smb_level;",
          "755:  if (!get_fid_and_frame(pinfo, &to_find.fid, &to_find.frame, data)) {",
          "756:   return NULL;",
          "757:  }",
          "758:  result = g_slist_find_custom(conv_data->GSL_message_data,",
          "759:          &to_find, (GCompareFunc)msg_data_find);",
          "760:  if (!result) {",
          "761:   struct message_data *pdata = (struct message_data *)wmem_alloc(wmem_file_scope(), sizeof(struct message_data));",
          "763:   conv_data->GSL_message_data = g_slist_prepend(conv_data->GSL_message_data, pdata);",
          "764:   return pdata;",
          "765:  }",
          "766:  return (struct message_data*)result->data;",
          "767: }",
          "769: static struct mswsp_ct *get_create_converstation_data(packet_info *pinfo)",
          "770: {",
          "771:  struct mswsp_ct *ct = NULL;",
          "772:  conversation_t *conversation;",
          "775:  conversation = find_or_create_conversation(pinfo);",
          "776:  if (!conversation) {",
          "777:   goto out;",
          "778:  }",
          "779:  ct = (struct mswsp_ct*)conversation_get_proto_data(conversation, proto_mswsp);",
          "780:  if (!ct) {",
          "781:   ct = (struct mswsp_ct *)g_malloc(sizeof(struct mswsp_ct));",
          "782:   ct->GSL_message_data = NULL;",
          "784:   conv_tables = g_slist_prepend(conv_tables, ct);",
          "785:   conversation_add_proto_data(conversation, proto_mswsp, ct);",
          "786:  }",
          "787: out:",
          "788:  return ct;",
          "789: }",
          "791: static struct message_data *",
          "792: find_matching_request_by_fid(struct mswsp_ct *ct, packet_info *pinfo, guint32 msg, gboolean in, void *private_data)",
          "793: {",
          "794:  guint32 fid;",
          "795:  guint frame;",
          "796:  GSList *iter;",
          "797:  int *p_smb_level = (int*)p_get_proto_data(wmem_file_scope(), pinfo, proto_mswsp, 0);",
          "799:  struct message_data *result = NULL;",
          "800:  get_fid_and_frame(pinfo, &fid, &frame, private_data);",
          "801:  for (iter = ct->GSL_message_data; iter; iter = g_slist_next(iter)) {",
          "802:   struct message_data* data = (struct message_data*)iter->data;",
          "803:   if (data->frame < frame && data->fid == fid && data->is_request == in",
          "804:    && data->msg_id == msg && data->smb_level == *p_smb_level) {",
          "805:    result = data;",
          "806:    break;",
          "807:   }",
          "808:  }",
          "809:  return result;",
          "810: }",
          "812: static struct CPMSetBindingsIn *",
          "813: find_binding_msg_data(struct mswsp_ct *ct, packet_info *pinfo, void *private_data)",
          "814: {",
          "815:  struct CPMSetBindingsIn *result = NULL;",
          "816:  struct message_data *data = find_matching_request_by_fid(ct, pinfo, 0xD0, true, private_data);",
          "817:  if (data) {",
          "818:   result = &data->content.bindingsin;",
          "819:  }",
          "820:  return result;",
          "821: }",
          "823: static struct rows_data *",
          "824: find_rowsin_msg_data(struct mswsp_ct *ct, packet_info *pinfo, void *private_data)",
          "825: {",
          "826:  struct rows_data *result = NULL;",
          "827:  struct message_data *data = find_matching_request_by_fid(ct, pinfo, 0xCC, true, private_data);",
          "828:  if (data) {",
          "829:   result = &data->content.rowsin;",
          "830:  }",
          "831:  return result;",
          "832: }",
          "834: static gboolean is_64bit_mode(struct mswsp_ct *ct, packet_info *pinfo, void *private_data)",
          "835: {",
          "837:  guint32 client_ver = 0;",
          "838:  guint32 server_ver = 0;",
          "839:  struct message_data *data = find_matching_request_by_fid(ct, pinfo, 0xC8,",
          "840:         true, private_data);",
          "841:  if (data) {",
          "842:   client_ver = data->content.version;",
          "843:   data = find_matching_request_by_fid(ct, pinfo, 0xC8, false, private_data);",
          "844:   if (data) {",
          "845:    server_ver = data->content.version;",
          "846:    result = (server_ver & 0xffff0000) && (client_ver & 0xffff0000);",
          "847:   }",
          "848:  }",
          "849:  return result;",
          "850: }",
          "852: #define eSequential   0x00000001",
          "853: #define eLocateable   0x00000003",
          "854: #define eScrollable   0x00000007",
          "855: #define eAsynchronous   0x00000008",
          "856: #define eFirstRows   0x00000080",
          "857: #define eHoldRows   0x00000200",
          "858: #define eChaptered   0x00000800",
          "859: #define eUseCI    0x00001000",
          "860: #define eDeferTrimming   0x00002000",
          "861: #define eEnableRowsetEvents  0x00800000",
          "862: #define eDoNotComputeExpensiveProps 0x00400000",
          "864: static const value_string cursor_vals[] = {",
          "865:  { eSequential, \"eSequential\" },",
          "866:  { eLocateable, \"eLocateable\" },",
          "867:  { eScrollable, \"eScrollable\" },",
          "868:  { 0, NULL }",
          "869: };",
          "874: struct GuidPropertySet {",
          "875:  e_guid_t guid;",
          "876:  const char *def;",
          "877:  const char *desc;",
          "878:  const value_string *id_map;",
          "879: };",
          "882: static const value_string DBPROPSET_FSCIFRMWRK_EXT_IDS[] = {",
          "883:  {0x02, \"DBPROP_CI_CATALOG_NAME\"},",
          "884:  {0x03, \"DBPROP_CI_INCLUDE_SCOPES\"},",
          "885:  {0x04, \"DBPROP_CI_SCOPE_FLAGS\"},",
          "886:  {0x07, \"DBPROP_CI_QUERY_TYPE\"},",
          "887:  {0, NULL}",
          "888: };",
          "890: static const value_string DBPROPSET_QUERYEXT_IDS[] = {",
          "891:  {0x02, \"DBPROP_USECONTENTINDEX\"},",
          "892:  {0x03, \"DBPROP_DEFERNONINDEXEDTRIMMING\"},",
          "893:  {0x04, \"DBPROP_USEEXTENDEDDBTYPES\"},",
          "894:  {0x05, \"DBPROP_IGNORENOISEONLYCLAUSES\"},",
          "895:  {0x06, \"DBPROP_GENERICOPTIONS_STRING\"},",
          "896:  {0x07, \"DBPROP_FIRSTROWS\"},",
          "897:  {0x08, \"DBPROP_DEFERCATALOGVERIFICATION\"},",
          "898:  {0x0a, \"DBPROP_GENERATEPARSETREE\"},",
          "899:  {0x0c, \"DBPROP_FREETEXTANYTERM\"},",
          "900:  {0x0d, \"DBPROP_FREETEXTUSESTEMMING\"},",
          "901:  {0x0e, \"DBPROP_IGNORESBRI\"},",
          "902:  {0x10, \"DBPROP_ENABLEROWSETEVENTS\"},",
          "903:  {0, NULL}",
          "904: };",
          "906: static const value_string DBPROPSET_CIFRMWRKCORE_EXT_IDS[] = {",
          "907:  {0x02, \"DBPROP_MACHINE\"},",
          "908:  {0x03, \"DBPROP_CLIENT_CLSID\"},",
          "909:  {0, NULL}",
          "910: };",
          "912: static const value_string DBPROPSET_MSIDXS_ROWSETEXT_IDS[] = {",
          "913:  {0x02, \"MSIDXSPROP_ROWSETQUERYSTATUS\"},",
          "914:  {0x03, \"MSIDXSPROP_COMMAND_LOCALE_STRING\"},",
          "915:  {0x04, \"MSIDXSPROP_QUERY_RESTRICTION\"},",
          "916:  {0x05, \"MSIDXSPROP_PARSE_TREE\"},",
          "917:  {0x06, \"MSIDXSPROP_MAX_RANK\"},",
          "918:  {0x07, \"MSIDXSPROP_RESULTS_FOUND\"},",
          "919:  {0, NULL}",
          "920: };",
          "923: static const value_string QueryGuid_IDS[] = {",
          "924:  {0x02, \"RankVector\"},",
          "925:  {0x03, \"System.Search.Rank\"},",
          "926:  {0x04, \"System.Search.HitCount\"},",
          "927:  {0x05, \"System.Search.EntryID\"},",
          "928:  {0x06, \"All\"},",
          "929:  {0x8, \"System.Search.ReverseFileName\"},",
          "930:  {0x09, \"System.ItemURL\"},",
          "931:  {0xa, \"System.ContentUrl\"},",
          "932:  {0, NULL}",
          "933: };",
          "936: static const value_string StorageGuid_IDS[] = {",
          "937:  {0x02, \"System.ItemFolderNameDisplay\"},",
          "938:  {0x03, \"ClassId\"},",
          "939:  {0x04, \"System.ItemTypeText\"},",
          "940:  {0x08, \"FileIndex\"},",
          "941:  {0x09, \"USN\"},",
          "942:  {0x0a, \"System.ItemNameDisplay\"},",
          "943:  {0x0b, \"Path\"},",
          "944:  {0x0c, \"System.Size\"},",
          "945:  {0x0d, \"System.FileAttributes\"},",
          "946:  {0x0e, \"System.DateModified\"},",
          "947:  {0x0f, \"System.DateCreated\"},",
          "948:  {0x10, \"System.DateAccessed\"},",
          "949:  {0x12, \"AllocSize\"},",
          "950:  {0x13, \"System.Search.Contents\"},",
          "951:  {0x14, \"ShortFilename\"},",
          "952:  {0x15, \"System.FileFRN\"},",
          "953:  {0x16, \"Scope\"},",
          "954:  {0, NULL}",
          "955: };",
          "957: static const value_string DocPropSetGuid_IDS[] = {",
          "958:  {0x02, \"System.Title\"},",
          "959:  {0x03, \"System.Subject\"},",
          "960:  {0x04, \"System.Author\"},",
          "961:  {0x05, \"System.Keywords\"},",
          "962:  {0x06, \"System.Comment\"},",
          "963:  {0x07, \"DocTemplate\"},",
          "964:  {0x08, \"System.Document.LastAuthor\"},",
          "965:  {0x09, \"System.Document.RevisionNumber\"},",
          "966:  {0x0a, \"System.Document.TotalEditTime\"},",
          "967:  {0x0b, \"System.Document.DatePrinted\"},",
          "968:  {0x0c, \"System.Document.DateCreated\"},",
          "969:  {0x0d, \"System.Document.DateSaved\"},",
          "970:  {0x0e, \"System.Document.PageCount\"},",
          "971:  {0x0f, \"System.Document.WordCount\"},",
          "972:  {0x10, \"System.Document.CharacterCount\"},",
          "973:  {0x11, \"DocThumbnail\"},",
          "974:  {0x12, \"System.ApplicationName\"},",
          "975:  {0, NULL}",
          "976: };",
          "978: static const value_string ShellDetails_IDS[] = {",
          "979:  { 5, \"System.ComputerName\"},",
          "980:  { 8, \"System.ItemPathDisplayNarrow\"},",
          "981:  { 9, \"PercivedType\"},",
          "982:  {11, \"System.ItemType\"},",
          "983:  {12, \"FileCount\"},",
          "984:  {14, \"TotalFileSize\"},",
          "985:  {24, \"System.ParsingName\"},",
          "986:  {25, \"System.SFGAOFlags\"},",
          "987:  {0, NULL}",
          "988: };",
          "990: static const value_string PropSet1_IDS[] = {",
          "991:  {100, \"System.ThumbnailCacheId\"},",
          "992:  {0, NULL}",
          "993: };",
          "995: static const value_string PropSet2_IDS[] = {",
          "996:  {3, \"System.Kind\"},",
          "997:  {0, NULL}",
          "998: };",
          "1000: static const value_string MusicGuid_IDS[] = {",
          "1001:  {0x2, \"System.Music.Artist\"},",
          "1002:  {0x4, \"System.Music.AlbumTitle\"},",
          "1003:  {0x5, \"System.Media.Year\"},",
          "1004:  {0x7, \"System.Music.TrackNumber\"},",
          "1005:  {0xb, \"System.Music.Genre\"},",
          "1006:  {0xc, \"System.Music.Lyrics\"},",
          "1007:  {0xd, \"System.Music.AlbumArtist\"},",
          "1008:  {0x21, \"System.Music.ContentGroupDescription\"},",
          "1009:  {0x22, \"System.Music.InitialKey\"},",
          "1010:  {0x23, \"System.Music.BeatsPerMinute\"},",
          "1011:  {0x24, \"System.Music.Conductor\"},",
          "1012:  {0x25, \"System.Music.PartOfSet\"},",
          "1013:  {0x26, \"System.Media.SubTitle\"},",
          "1014:  {0x27, \"System.Music.Mood\"},",
          "1015:  {0x64, \"System.Music.AlbumID\"},",
          "1016:  {0, NULL}",
          "1017: };",
          "1019: static const value_string PropSet3_IDS[] = {",
          "1020:  { 2, \"System.Message.BccAddress\"},",
          "1021:  { 3, \"System.Message.BccName\"},",
          "1022:  { 4, \"System.Message.CcAddress\"},",
          "1023:  { 5, \"System.Message.CcName\"},",
          "1024:  { 6, \"System.ItemFolderPathDisplay\"},",
          "1025:  { 7, \"System.ItemPathDisplay\"},",
          "1026:  { 9, \"System.Communication.AccountName\"},",
          "1027:  {10, \"System.IsRead\"},",
          "1028:  {11, \"System.Importance\"},",
          "1029:  {12, \"System.FlagStatus\"},",
          "1030:  {13, \"System.Message.FromAddress\"},",
          "1031:  {14, \"System.Message.FromName\"},",
          "1032:  {15, \"System.Message.Store\"},",
          "1033:  {16, \"System.Message.ToAddress\"},",
          "1034:  {17, \"System.Message.ToName\"},",
          "1035:  {18, \"System.Contact.WebPage\"},",
          "1036:  {19, \"System.Message.DateSent\"},",
          "1037:  {20, \"System.Message.DateReceived\"},",
          "1038:  {21, \"System.Message.AttachmentNames\"},",
          "1039:  {0, NULL}",
          "1040: };",
          "1042: static const value_string PropSet4_IDS[] = {",
          "1043:  {100, \"System.ItemFolderPathDisplayNarrow\"},",
          "1044:  {0, NULL}",
          "1045: };",
          "1047: static const value_string PropSet5_IDS[] = {",
          "1048:  {100, \"System.Contact.FullName\"},",
          "1049:  {0, NULL}",
          "1050: };",
          "1052: static const value_string PropSet6_IDS[] = {",
          "1053:  {100, \"System.ItemAuthors\"},",
          "1054:  {0, NULL}",
          "1055: };",
          "1057: static const value_string PropSet7_IDS[] = {",
          "1058:  {2, \"System.Shell.OmitFromView\"},",
          "1059:  {0, NULL}",
          "1060: };",
          "1062: static const value_string PropSet8_IDS[] = {",
          "1063:  {2, \"System.Shell.SFGAOFlagsStrings\"},",
          "1064:  {3, \"System.Link.TargetSFGAOFlagsStrings\"},",
          "1065:  {0, NULL}",
          "1066: };",
          "1068: static const value_string PropSet9_IDS[] = {",
          "1069:  {100, \"System.ItemDate\"},",
          "1070:  {0, NULL}",
          "1071: };",
          "1073: static const value_string PropSet10_IDS[] = {",
          "1074:  { 5, \"System.MIMEType\"},",
          "1075:  { 8, \"System.Search.GatherTime\"},",
          "1076:  { 9, \"System.Search.AccessCount\"},",
          "1077:  {11, \"System.Search.LastIndexedTotalTime\"},",
          "1078:  {0, NULL}",
          "1079: };",
          "1081: static const value_string PropSet11_IDS[] = {",
          "1082:  {5, \"System.Priority\"},",
          "1083:  {8, \"System.Message.HasAttachments\"},",
          "1084:  {0, NULL}",
          "1085: };",
          "1087: static const value_string DocCharacter_IDS[] = {",
          "1088:  {2, \"System.Search.Autosummary\"},",
          "1089:  {0, NULL}",
          "1090: };",
          "1092: static const value_string PropSet12_IDS[] = {",
          "1093:  {100, \"System.IsDeleted\"},",
          "1094:  {0, NULL}",
          "1095: };",
          "1097: static const value_string PropSet13_IDS[] = {",
          "1098:  {100, \"System.IsAttachment\"},",
          "1099:  {0, NULL}",
          "1100: };",
          "1102: static const value_string PropSet14_IDS[] = {",
          "1103:  {100, \"System.Message.ConversationID\"},",
          "1104:  {101, \"System.Message.ConversationIndex\"},",
          "1105:  {0, NULL}",
          "1106: };",
          "1108: static const value_string DocPropSetGuid2_IDS[] = {",
          "1109:  {0x02, \"System.Category\"},",
          "1110:  {0x03, \"System.Document.PresentationFormat\"},",
          "1111:  {0x04, \"System.Document.ByteCount\"},",
          "1112:  {0x05, \"System.Document.LineCount\"},",
          "1113:  {0x06, \"System.Document.ParagraphCount\"},",
          "1114:  {0x07, \"System.Document.SlideCount\"},",
          "1115:  {0x08, \"DocNoteCount\"},",
          "1116:  {0x09, \"System.Document.HiddenSlideCount\"},",
          "1117:  {0x0D, \"DocPartTitles\"},",
          "1118:  {0x0E, \"System.Document.Manager\"},",
          "1119:  {0x0F, \"System.Company\"},",
          "1120:  {0x1A, \"System.ContentType\"},",
          "1121:  {0x1B, \"System.ContentStatus\"},",
          "1122:  {0x1C, \"System.Language\"},",
          "1123:  {0x1D, \"System.Document.Version\"},",
          "1124:  {0, NULL}",
          "1125: };",
          "1127: static const value_string SystemContact_IDS[] = {",
          "1128:  { 6, \"System.Contact.JobTitle\"},",
          "1129:  { 7, \"System.Contact.OfficeLocation\"},",
          "1130:  {20, \"System.Contact.HomeTelephone\"},",
          "1131:  {25, \"System.Contact.PrimaryTelephone\"},",
          "1132:  {35, \"System.Contact.MobileTelephone\"},",
          "1133:  {47, \"System.Contact.Birthday\"},",
          "1134:  {48, \"System.Contact.PrimaryEmailAddress\"},",
          "1135:  {65, \"System.Contact.HomeAddressCity\"},",
          "1136:  {69, \"System.Contact.PersonalTitle\"},",
          "1137:  {71, \"System.Contact.MiddleName\"},",
          "1138:  {73, \"System.Contact.Suffix\"},",
          "1139:  {74, \"System.Contact.NickName\"},",
          "1140:  {0, NULL}",
          "1141: };",
          "1143: static const value_string PropSet15_IDS[] = {",
          "1144:  {0x64, \"System.Calendar.IsOnline\"},",
          "1145:  {0,NULL}",
          "1146: };",
          "1148: static const value_string PropSet16_IDS[] = {",
          "1149:  {0x64, \"System.Contact.OtherAddressStreet\"},",
          "1150:  {0,NULL}",
          "1151: };",
          "1153: static const value_string PropSet17_IDS[] = {",
          "1154:  {0x2, \"System.DRM.IsProtected\"},",
          "1155:  {0,NULL}",
          "1156: };",
          "1158: static const value_string PropSet18_IDS[] = {",
          "1159:  {0x64, \"System.Calendar.OptionalAttendeeNames\"},",
          "1160:  {0,NULL}",
          "1161: };",
          "1163: static const value_string PropSet19_IDS[] = {",
          "1164:  {0x64, \"System.Calendar.ShowTimeAs\"},",
          "1165:  {0,NULL}",
          "1166: };",
          "1168: static const value_string PropSet20_IDS[] = {",
          "1169:  {0x64, \"System.ParentalRatingReason\"},",
          "1170:  {0,NULL}",
          "1171: };",
          "1173: static const value_string PropSet21_IDS[] = {",
          "1174:  {0x64, \"System.Project\"},",
          "1175:  {0,NULL}",
          "1176: };",
          "1178: static const value_string PropSet22_IDS[] = {",
          "1179:  {0x64, \"System.Contact.OtherAddressCountry\"},",
          "1180:  {0,NULL}",
          "1181: };",
          "1183: static const value_string PropSet23_IDS[] = {",
          "1184:  {0x9, \"System.Status\"},",
          "1185:  {0,NULL}",
          "1186: };",
          "1188: static const value_string PropSet24_IDS[] = {",
          "1189:  {0x64, \"System.DateArchived\"},",
          "1190:  {0,NULL}",
          "1191: };",
          "1193: static const value_string PropSet25_IDS[] = {",
          "1194:  {0x64, \"System.Contact.CarTelephone\"},",
          "1195:  {0,NULL}",
          "1196: };",
          "1198: static const value_string PropSet26_IDS[] = {",
          "1199:  {0x64, \"System.Calendar.ResponseStatus\"},",
          "1200:  {0,NULL}",
          "1201: };",
          "1203: static const value_string PropSet27_IDS[] = {",
          "1204:  {0x64, \"System.Task.BillingInformation\"},",
          "1205:  {0,NULL}",
          "1206: };",
          "1208: static const value_string PropSet28_IDS[] = {",
          "1209:  {0x64, \"System.Media.AverageLevel\"},",
          "1210:  {0,NULL}",
          "1211: };",
          "1213: static const value_string PropSet29_IDS[] = {",
          "1214:  {0x64, \"System.Contact.SpouseName\"},",
          "1215:  {0,NULL}",
          "1216: };",
          "1218: static const value_string PropSet30_IDS[] = {",
          "1219:  {0x64, \"System.Document.DocumentID\"},",
          "1220:  {0,NULL}",
          "1221: };",
          "1223: static const value_string PropSet31_IDS[] = {",
          "1224:  {0x64, \"System.RecordedTV.NetworkAffiliation\"},",
          "1225:  {0,NULL}",
          "1226: };",
          "1228: static const value_string PropSet32_IDS[] = {",
          "1229:  {0x64, \"System.PriorityText\"},",
          "1230:  {0,NULL}",
          "1231: };",
          "1233: static const value_string PropSet33_IDS[] = {",
          "1234:  {0x64, \"System.Contact.Children\"},",
          "1235:  {0,NULL}",
          "1236: };",
          "1238: static const value_string PropSet34_IDS[] = {",
          "1239:  {0x64, \"System.RecordedTV.RecordingTime\"},",
          "1240:  {0,NULL}",
          "1241: };",
          "1243: static const value_string PropSet35_IDS[] = {",
          "1244:  {0x64, \"System.FlagColorText\"},",
          "1245:  {0,NULL}",
          "1246: };",
          "1248: static const value_string PropSet36_IDS[] = {",
          "1249:  {0x64, \"System.Contact.OtherAddressPostalCode\"},",
          "1250:  {0,NULL}",
          "1251: };",
          "1253: static const value_string PropSet37_IDS[] = {",
          "1254:  {0x64, \"System.Photo.SharpnessText\"},",
          "1255:  {0,NULL}",
          "1256: };",
          "1258: static const value_string PropSet38_IDS[] = {",
          "1259:  {0x64, \"System.Contact.OtherAddress\"},",
          "1260:  {0,NULL}",
          "1261: };",
          "1263: static const value_string PropSet40_IDS[] = {",
          "1264:  {0x64, \"System.Contact.BusinessAddress\"},",
          "1265:  {0,NULL}",
          "1266: };",
          "1268: static const value_string PropSet41_IDS[] = {",
          "1269:  {0x64, \"System.IsIncomplete\"},",
          "1270:  {0,NULL}",
          "1271: };",
          "1273: static const value_string PropSet42_IDS[] = {",
          "1274:  {0x64, \"System.Contact.EmailAddress2\"},",
          "1275:  {0,NULL}",
          "1276: };",
          "1278: static const value_string PropSet43_IDS[] = {",
          "1279:  {0x64, \"System.Contact.BusinessTelephone\"},",
          "1280:  {0,NULL}",
          "1281: };",
          "1283: static const value_string PropSet45_IDS[] = {",
          "1284:  {0x64, \"System.Image.CompressionText\"},",
          "1285:  {0,NULL}",
          "1286: };",
          "1288: static const value_string PropSet46_IDS[] = {",
          "1289:  {0x64, \"System.Contact.HomeAddressState\"},",
          "1290:  {0,NULL}",
          "1291: };",
          "1293: static const value_string PropSet47_IDS[] = {",
          "1294:  {0x64, \"System.Contact.EmailAddress3\"},",
          "1295:  {0,NULL}",
          "1296: };",
          "1298: static const value_string PropSet48_IDS[] = {",
          "1299:  {0x64, \"System.Communication.FollowupIconIndex\"},",
          "1300:  {0,NULL}",
          "1301: };",
          "1303: static const value_string PropSet49_IDS[] = {",
          "1304:  {0x64, \"System.Photo.TagViewAggregate\"},",
          "1305:  {0,NULL}",
          "1306: };",
          "1308: static const value_string PropSet50_IDS[] = {",
          "1309:  {0x64, \"System.Search.Store\"},",
          "1310:  {0,NULL}",
          "1311: };",
          "1313: static const value_string PropSet51_IDS[] = {",
          "1314:  {0x64, \"System.FileName\"},",
          "1315:  {0,NULL}",
          "1316: };",
          "1318: static const value_string PropSet52_IDS[] = {",
          "1319:  {0x64, \"System.Contact.HomeAddressStreet\"},",
          "1320:  {0,NULL}",
          "1321: };",
          "1323: static const value_string PropSet53_IDS[] = {",
          "1324:  {0x64, \"System.Contact.HomeAddressPostalCode\"},",
          "1325:  {0,NULL}",
          "1326: };",
          "1328: static const value_string PropSet54_IDS[] = {",
          "1329:  {0x64, \"System.Contact.BusinessHomePage\"},",
          "1330:  {0,NULL}",
          "1331: };",
          "1333: static const value_string PropSet55_IDS[] = {",
          "1334:  {0x64, \"System.Calendar.RequiredAttendeeNames\"},",
          "1335:  {0,NULL}",
          "1336: };",
          "1338: static const value_string PropSet56_IDS[] = {",
          "1339:  {0x64, \"System.FlagColor\"},",
          "1340:  {0,NULL}",
          "1341: };",
          "1343: static const value_string PropSet57_IDS[] = {",
          "1344:  {0x64, \"System.Message.ProofInProgress\"},",
          "1345:  {0,NULL}",
          "1346: };",
          "1348: static const value_string PropSet58_IDS[] = {",
          "1349:  {0x64, \"System.Contact.PrimaryAddressPostOfficeBox\"},",
          "1350:  {0,NULL}",
          "1351: };",
          "1353: static const value_string PropSet59_IDS[] = {",
          "1354:  {0x64, \"System.Calendar.IsRecurring\"},",
          "1355:  {0,NULL}",
          "1356: };",
          "1358: static const value_string PropSet60_IDS[] = {",
          "1359:  {0x64, \"System.Contact.HomeAddress\"},",
          "1360:  {0,NULL}",
          "1361: };",
          "1363: static const value_string PropSet61_IDS[] = {",
          "1364:  {0x64, \"System.Photo.MaxAperture\"},",
          "1365:  {0,NULL}",
          "1366: };",
          "1368: static const value_string PropSet62_IDS[] = {",
          "1369:  {0x64, \"System.ItemParticipants\"},",
          "1370:  {0,NULL}",
          "1371: };",
          "1373: static const value_string PropSet63_IDS[] = {",
          "1374:  {0x64, \"System.Media.DateReleased\"},",
          "1375:  {0,NULL}",
          "1376: };",
          "1378: static const value_string PropSet64_IDS[] = {",
          "1379:  {0x64, \"System.Journal.Contacts\"},",
          "1380:  {0,NULL}",
          "1381: };",
          "1383: static const value_string PropSet65_IDS[] = {",
          "1384:  {0x64, \"System.Calendar.Resources\"},",
          "1385:  {0,NULL}",
          "1386: };",
          "1388: static const value_string PropSet66_IDS[] = {",
          "1389:  {0x67, \"System.Message.MessageClass\"},",
          "1390:  {0,NULL}",
          "1391: };",
          "1393: static const value_string PropSet67_IDS[] = {",
          "1394:  {0x9, \"System.Rating\"},",
          "1395:  {0xb, \"System.Copyright\"},",
          "1396:  {0xd, \"System.Media.ClassPrimaryID\"},",
          "1397:  {0xe, \"System.Media.ClassSecondaryID\"},",
          "1398:  {0xf, \"System.Media.DVDID\"},",
          "1399:  {0x10, \"System.Media.MCDI\"},",
          "1400:  {0x11, \"System.Media.MetadataContentProvider\"},",
          "1401:  {0x12, \"System.Media.ContentDistributor\"},",
          "1402:  {0x13, \"System.Music.Composer\"},",
          "1403:  {0x14, \"System.Video.Director\"},",
          "1404:  {0x15, \"System.ParentalRating\"},",
          "1405:  {0x16, \"System.Media.Producer\"},",
          "1406:  {0x17, \"System.Media.Writer\"},",
          "1407:  {0x18, \"System.Media.CollectionGroupID\"},",
          "1408:  {0x19, \"System.Media.CollectionID\"},",
          "1409:  {0x1a, \"System.Media.ContentID\"},",
          "1410:  {0x1b, \"System.Media.CreatorApplication\"},",
          "1411:  {0x1c, \"System.Media.CreatorApplicationVersion\"},",
          "1412:  {0x1e, \"System.Media.Publisher\"},",
          "1413:  {0x1f, \"System.Music.Period\"},",
          "1414:  {0x22, \"System.Media.UserWebUrl\"},",
          "1415:  {0x23, \"System.Media.UniqueFileIdentifier\"},",
          "1416:  {0x24, \"System.Media.EncodedBy\"},",
          "1417:  {0x26, \"System.Media.ProtectionType\"},",
          "1418:  {0x27, \"System.Media.ProviderRating\"},",
          "1419:  {0x28, \"System.Media.ProviderStyle\"},",
          "1420:  {0x29, \"System.Media.UserNoAutoInfo\"},",
          "1421:  {0,NULL}",
          "1422: };",
          "1424: static const value_string PropSet68_IDS[] = {",
          "1425:  {0x64, \"System.Calendar.OrganizerName\"},",
          "1426:  {0,NULL}",
          "1427: };",
          "1429: static const value_string PropSet69_IDS[] = {",
          "1430:  {0x64, \"System.Photo.PeopleNames\"},",
          "1431:  {0,NULL}",
          "1432: };",
          "1434: static const value_string PropSet70_IDS[] = {",
          "1435:  {0x3, \"System.Media.Duration\"},",
          "1436:  {0x4, \"System.Audio.EncodingBitrate\"},",
          "1437:  {0x5, \"System.Audio.SampleRate\"},",
          "1438:  {0x6, \"System.Audio.SampleSize\"},",
          "1439:  {0x7, \"System.Audio.ChannelCount\"},",
          "1440:  {0,NULL}",
          "1441: };",
          "1443: static const value_string PropSet71_IDS[] = {",
          "1444:  {0x64, \"System.FileExtension\"},",
          "1445:  {0,NULL}",
          "1446: };",
          "1448: static const value_string PropSet72_IDS[] = {",
          "1449:  {0x103, \"System.Image.Compression\"},",
          "1450:  {0x10f, \"System.Photo.CameraManufacturer\"},",
          "1451:  {0x110, \"System.Photo.CameraModel\"},",
          "1452:  {0x112, \"System.Photo.Orientation\"},",
          "1453:  {0x131, \"System.SoftwareUsed\"},",
          "1454:  {0x4748, \"System.Photo.Event\"},",
          "1455:  {0x4752, \"System.DateImported\"},",
          "1456:  {0x829a, \"System.Photo.ExposureTime\"},",
          "1457:  {0x829d, \"System.Photo.FNumber\"},",
          "1458:  {0x8822, \"System.Photo.ExposureProgram\"},",
          "1459:  {0x8827, \"System.Photo.ISOSpeed\"},",
          "1460:  {0x9003, \"System.Photo.DateTaken\"},",
          "1461:  {0x9201, \"System.Photo.ShutterSpeed\"},",
          "1462:  {0x9202, \"System.Photo.Aperture\"},",
          "1463:  {0x9204, \"System.Photo.ExposureBias\"},",
          "1464:  {0x9206, \"System.Photo.SubjectDistance\"},",
          "1465:  {0x9207, \"System.Photo.MeteringMode\"},",
          "1466:  {0x9208, \"System.Photo.LightSource\"},",
          "1467:  {0x9209, \"System.Photo.Flash\"},",
          "1468:  {0x920a, \"System.Photo.FocalLength\"},",
          "1469:  {0,NULL}",
          "1470: };",
          "1472: static const value_string PropSet73_IDS[] = {",
          "1473:  {0x64, \"System.Contact.TTYTDDTelephone\"},",
          "1474:  {0,NULL}",
          "1475: };",
          "1477: static const value_string PropSet74_IDS[] = {",
          "1478:  {0x64, \"System.Photo.PhotometricInterpretationText\"},",
          "1479:  {0,NULL}",
          "1480: };",
          "1482: static const value_string PropSet75_IDS[] = {",
          "1483:  {0x64, \"System.Calendar.OptionalAttendeeAddresses\"},",
          "1484:  {0,NULL}",
          "1485: };",
          "1487: static const value_string PropSet76_IDS[] = {",
          "1488:  {0x64, \"System.Calendar.ReminderTime\"},",
          "1489:  {0,NULL}",
          "1490: };",
          "1492: static const value_string PropSet77_IDS[] = {",
          "1493:  {0x64, \"System.Calendar.RequiredAttendeeAddresses\"},",
          "1494:  {0,NULL}",
          "1495: };",
          "1497: static const value_string PropSet78_IDS[] = {",
          "1498:  {0x64, \"System.Calendar.OrganizerAddress\"},",
          "1499:  {0,NULL}",
          "1500: };",
          "1502: static const value_string PropSet79_IDS[] = {",
          "1503:  {0x2, \"System.Link.TargetParsingPath\"},",
          "1504:  {0x8, \"System.Link.TargetSFGAOFlags\"},",
          "1505:  {0,NULL}",
          "1506: };",
          "1508: static const value_string PropSet80_IDS[] = {",
          "1509:  {0x64, \"System.Contact.Hobbies\"},",
          "1510:  {0,NULL}",
          "1511: };",
          "1513: static const value_string PropSet81_IDS[] = {",
          "1514:  {0x64, \"System.Contact.HomeAddressPostOfficeBox\"},",
          "1515:  {0,NULL}",
          "1516: };",
          "1518: static const value_string PropSet82_IDS[] = {",
          "1519:  {0x64, \"System.Contact.CompanyMainTelephone\"},",
          "1520:  {0,NULL}",
          "1521: };",
          "1523: static const value_string PropSet83_IDS[] = {",
          "1524:  {0x64, \"System.IsFlagged\"},",
          "1525:  {0,NULL}",
          "1526: };",
          "1528: static const value_string PropSet84_IDS[] = {",
          "1529:  {0x64, \"System.Contact.FirstName\"},",
          "1530:  {0,NULL}",
          "1531: };",
          "1533: static const value_string PropSet85_IDS[] = {",
          "1534:  {0xa, \"System.IsEncrypted\"},",
          "1535:  {0,NULL}",
          "1536: };",
          "1538: static const value_string PropSet86_IDS[] = {",
          "1539:  {0x64, \"System.Calendar.Duration\"},",
          "1540:  {0,NULL}",
          "1541: };",
          "1543: static const value_string PropSet87_IDS[] = {",
          "1544:  {0x64, \"System.Contact.PrimaryAddressCity\"},",
          "1545:  {0,NULL}",
          "1546: };",
          "1548: static const value_string PropSet88_IDS[] = {",
          "1549:  {0x64, \"System.Contact.OtherAddressPostOfficeBox\"},",
          "1550:  {0,NULL}",
          "1551: };",
          "1553: static const value_string PropSet89_IDS[] = {",
          "1554:  {0x64, \"System.ProviderItemID\"},",
          "1555:  {0,NULL}",
          "1556: };",
          "1558: static const value_string PropSet90_IDS[] = {",
          "1559:  {0x64, \"System.Contact.BusinessAddressCountry\"},",
          "1560:  {0,NULL}",
          "1561: };",
          "1563: static const value_string PropSet91_IDS[] = {",
          "1564:  {0x64, \"System.Contact.EmailName\"},",
          "1565:  {0,NULL}",
          "1566: };",
          "1568: static const value_string PropSet92_IDS[] = {",
          "1569:  {0x64, \"System.Photo.FocalLengthInFilm\"},",
          "1570:  {0,NULL}",
          "1571: };",
          "1573: static const value_string PropSet93_IDS[] = {",
          "1574:  {0x64, \"System.Contact.IMAddress\"},",
          "1575:  {0,NULL}",
          "1576: };",
          "1578: static const value_string PropSet94_IDS[] = {",
          "1579:  {0x64, \"System.DateAcquired\"},",
          "1580:  {0,NULL}",
          "1581: };",
          "1583: static const value_string PropSet95_IDS[] = {",
          "1584:  {0x64, \"System.DateCompleted\"},",
          "1585:  {0,NULL}",
          "1586: };",
          "1588: static const value_string PropSet96_IDS[] = {",
          "1589:  {0x64, \"System.ItemName\"},",
          "1590:  {0,NULL}",
          "1591: };",
          "1593: static const value_string PropSet97_IDS[] = {",
          "1594:  {0x64, \"System.Contact.PrimaryAddressPostalCode\"},",
          "1595:  {0,NULL}",
          "1596: };",
          "1598: static const value_string PropSet99_IDS[] = {",
          "1599:  {0x64, \"System.Document.ClientID\"},",
          "1600:  {0,NULL}",
          "1601: };",
          "1603: static const value_string PropSet100_IDS[] = {",
          "1604:  {0x64, \"System.Photo.ExposureProgramText\"},",
          "1605:  {0,NULL}",
          "1606: };",
          "1608: static const value_string PropSet101_IDS[] = {",
          "1609:  {0x64, \"System.Note.ColorText\"},",
          "1610:  {0,NULL}",
          "1611: };",
          "1613: static const value_string PropSet102_IDS[] = {",
          "1614:  {0x64, \"System.Photo.MeteringModeText\"},",
          "1615:  {0,NULL}",
          "1616: };",
          "1618: static const value_string PropSet103_IDS[] = {",
          "1619:  {0x2, \"System.Link.TargetExtension\"},",
          "1620:  {0,NULL}",
          "1621: };",
          "1623: static const value_string PropSet104_IDS[] = {",
          "1624:  {0x64, \"System.Contact.BusinessAddressState\"},",
          "1625:  {0,NULL}",
          "1626: };",
          "1628: static const value_string PropSet105_IDS[] = {",
          "1629:  {0x64, \"System.Photo.OrientationText\"},",
          "1630:  {0,NULL}",
          "1631: };",
          "1633: static const value_string PropSet106_IDS[] = {",
          "1634:  {0x64, \"System.Contact.Label\"},",
          "1635:  {0,NULL}",
          "1636: };",
          "1638: static const value_string PropSet107_IDS[] = {",
          "1639:  {0x64, \"System.Calendar.Location\"},",
          "1640:  {0,NULL}",
          "1641: };",
          "1643: static const value_string PropSet108_IDS[] = {",
          "1644:  {0x64, \"System.Photo.SaturationText\"},",
          "1645:  {0,NULL}",
          "1646: };",
          "1648: static const value_string PropSet109_IDS[] = {",
          "1649:  {0x64, \"System.Message.ToDoTitle\"},",
          "1650:  {0,NULL}",
          "1651: };",
          "1653: static const value_string PropSet110_IDS[] = {",
          "1654:  {0x64, \"System.Contact.Anniversary\"},",
          "1655:  {0,NULL}",
          "1656: };",
          "1658: static const value_string PropSet111_IDS[] = {",
          "1659:  {0x64, \"System.Contact.FileAsName\"},",
          "1660:  {0,NULL}",
          "1661: };",
          "1663: static const value_string PropSet112_IDS[] = {",
          "1664:  {0x64, \"System.GPS.Date\"},",
          "1665:  {0,NULL}",
          "1666: };",
          "1668: static const value_string PropSet113_IDS[] = {",
          "1669:  {0x64, \"System.IsFlaggedComplete\"},",
          "1670:  {0,NULL}",
          "1671: };",
          "1673: static const value_string PropSet114_IDS[] = {",
          "1674:  {0x2, \"System.Contact.JA.CompanyNamePhonetic\"},",
          "1675:  {0x3, \"System.Contact.JA.FirstNamePhonetic\"},",
          "1676:  {0x4, \"System.Contact.JA.LastNamePhonetic\"},",
          "1677:  {0,NULL}",
          "1678: };",
          "1680: static const value_string PropSet115_IDS[] = {",
          "1681:  {0x64, \"System.Communication.SecurityFlags\"},",
          "1682:  {0,NULL}",
          "1683: };",
          "1685: static const value_string PropSet116_IDS[] = {",
          "1686:  {0x64, \"System.Identity\"},",
          "1687:  {0,NULL}",
          "1688: };",
          "1690: static const value_string PropSet117_IDS[] = {",
          "1691:  {0x64, \"System.Contact.BusinessAddressPostOfficeBox\"},",
          "1692:  {0,NULL}",
          "1693: };",
          "1695: static const value_string PropSet118_IDS[] = {",
          "1696:  {0x64, \"System.AcquisitionID\"},",
          "1697:  {0,NULL}",
          "1698: };",
          "1700: static const value_string PropSet119_IDS[] = {",
          "1701:  {0x64, \"System.Contact.EmailAddresses\"},",
          "1702:  {0,NULL}",
          "1703: };",
          "1705: static const value_string PropSet120_IDS[] = {",
          "1706:  {0x64, \"System.Communication.TaskStatus\"},",
          "1707:  {0,NULL}",
          "1708: };",
          "1710: static const value_string PropSet121_IDS[] = {",
          "1711:  {0x64, \"System.Contact.LastName\"},",
          "1712:  {0,NULL}",
          "1713: };",
          "1715: static const value_string PropSet122_IDS[] = {",
          "1716:  {0x64, \"System.Communication.DateItemExpires\"},",
          "1717:  {0,NULL}",
          "1718: };",
          "1720: static const value_string PropSet123_IDS[] = {",
          "1721:  {0x64, \"System.ImportanceText\"},",
          "1722:  {0,NULL}",
          "1723: };",
          "1725: static const value_string PropSet124_IDS[] = {",
          "1726:  {0x64, \"System.Search.ContainerHash\"},",
          "1727:  {0,NULL}",
          "1728: };",
          "1730: static const value_string PropSet125_IDS[] = {",
          "1731:  {0x64, \"System.Contact.BusinessFaxNumber\"},",
          "1732:  {0,NULL}",
          "1733: };",
          "1735: static const value_string PropSet126_IDS[] = {",
          "1736:  {0x2, \"System.Link.TargetUrl\"},",
          "1737:  {0x1a, \"System.IconIndex\"},",
          "1738:  {0,NULL}",
          "1739: };",
          "1741: static const value_string PropSet127_IDS[] = {",
          "1742:  {0x64, \"System.RecordedTV.StationName\"},",
          "1743:  {0,NULL}",
          "1744: };",
          "1746: static const value_string PropSet128_IDS[] = {",
          "1747:  {0x64, \"System.Task.Owner\"},",
          "1748:  {0,NULL}",
          "1749: };",
          "1751: static const value_string PropSet129_IDS[] = {",
          "1752:  {0x64, \"System.Photo.ProgramModeText\"},",
          "1753:  {0,NULL}",
          "1754: };",
          "1756: static const value_string PropSet130_IDS[] = {",
          "1757:  {0x64, \"System.Contact.PrimaryAddressCountry\"},",
          "1758:  {0,NULL}",
          "1759: };",
          "1761: static const value_string PropSet131_IDS[] = {",
          "1762:  {0x64, \"System.Note.Color\"},",
          "1763:  {0,NULL}",
          "1764: };",
          "1766: static const value_string PropSet132_IDS[] = {",
          "1767:  {0x64, \"System.Contact.OtherAddressState\"},",
          "1768:  {0,NULL}",
          "1769: };",
          "1771: static const value_string PropSet133_IDS[] = {",
          "1772:  {0x64, \"System.Message.AttachmentContents\"},",
          "1773:  {0,NULL}",
          "1774: };",
          "1776: static const value_string PropSet134_IDS[] = {",
          "1777:  {0x64, \"System.Communication.TaskStatusText\"},",
          "1778:  {0,NULL}",
          "1779: };",
          "1781: static const value_string PropSet135_IDS[] = {",
          "1782:  {0x64, \"System.Communication.HeaderItem\"},",
          "1783:  {0,NULL}",
          "1784: };",
          "1786: static const value_string PropSet136_IDS[] = {",
          "1787:  {0x64, \"System.Contact.EmailAddress\"},",
          "1788:  {0,NULL}",
          "1789: };",
          "1791: static const value_string PropSet137_IDS[] = {",
          "1792:  {0x64, \"System.Contact.Profession\"},",
          "1793:  {0,NULL}",
          "1794: };",
          "1796: static const value_string PropSet138_IDS[] = {",
          "1797:  {0x64, \"System.Contact.BusinessAddressPostalCode\"},",
          "1798:  {0,NULL}",
          "1799: };",
          "1801: static const value_string PropSet139_IDS[] = {",
          "1802:  {0x64, \"System.ItemNamePrefix\"},",
          "1803:  {0,NULL}",
          "1804: };",
          "1806: static const value_string PropSet140_IDS[] = {",
          "1807:  {0x64, \"System.Photo.DigitalZoom\"},",
          "1808:  {0,NULL}",
          "1809: };",
          "1811: static const value_string PropSet141_IDS[] = {",
          "1812:  {0x64, \"System.SourceItem\"},",
          "1813:  {0,NULL}",
          "1814: };",
          "1816: static const value_string PropSet142_IDS[] = {",
          "1817:  {0x64, \"System.Photo.WhiteBalance\"},",
          "1818:  {0,NULL}",
          "1819: };",
          "1821: static const value_string PropSet143_IDS[] = {",
          "1822:  {0x64, \"System.SensitivityText\"},",
          "1823:  {0,NULL}",
          "1824: };",
          "1826: static const value_string PropSet144_IDS[] = {",
          "1827:  {0x64, \"System.Contact.Gender\"},",
          "1828:  {0x65, \"System.Contact.GenderValue\"},",
          "1829:  {0,NULL}",
          "1830: };",
          "1832: static const value_string PropSet145_IDS[] = {",
          "1833:  {0x64, \"System.Contact.OtherAddressCity\"},",
          "1834:  {0,NULL}",
          "1835: };",
          "1837: static const value_string PropSet146_IDS[] = {",
          "1838:  {0x64, \"System.Music.DisplayArtist\"},",
          "1839:  {0,NULL}",
          "1840: };",
          "1842: static const value_string PropSet147_IDS[] = {",
          "1843:  {0x64, \"System.Message.SenderAddress\"},",
          "1844:  {0,NULL}",
          "1845: };",
          "1847: static const value_string PropSet148_IDS[] = {",
          "1848:  {0x64, \"System.Contact.PrimaryAddressState\"},",
          "1849:  {0,NULL}",
          "1850: };",
          "1852: static const value_string PropSet149_IDS[] = {",
          "1853:  {0x64, \"System.Journal.EntryType\"},",
          "1854:  {0,NULL}",
          "1855: };",
          "1857: static const value_string PropSet150_IDS[] = {",
          "1858:  {0x64, \"System.Contact.BusinessAddressStreet\"},",
          "1859:  {0,NULL}",
          "1860: };",
          "1862: static const value_string PropSet151_IDS[] = {",
          "1863:  {0x4, \"System.FileOwner\"},",
          "1864:  {0,NULL}",
          "1865: };",
          "1867: static const value_string PropSet152_IDS[] = {",
          "1868:  {0x64, \"System.Contact.HomeAddressCountry\"},",
          "1869:  {0,NULL}",
          "1870: };",
          "1872: static const value_string PropSet153_IDS[] = {",
          "1873:  {0x64, \"System.Task.CompletionStatus\"},",
          "1874:  {0,NULL}",
          "1875: };",
          "1877: static const value_string PropSet154_IDS[] = {",
          "1878:  {0x10, \"System.Software.DateLastUsed\"},",
          "1879:  {0,NULL}",
          "1880: };",
          "1882: static const value_string PropSet155_IDS[] = {",
          "1883:  {0x64, \"System.Contact.Department\"},",
          "1884:  {0,NULL}",
          "1885: };",
          "1887: static const value_string PropSet156_IDS[] = {",
          "1888:  {0x64, \"System.Calendar.ShowTimeAsText\"},",
          "1889:  {0,NULL}",
          "1890: };",
          "1892: static const value_string PropSet157_IDS[] = {",
          "1893:  {0x64, \"System.Sensitivity\"},",
          "1894:  {0,NULL}",
          "1895: };",
          "1897: static const value_string PropSet158_IDS[] = {",
          "1898:  {0x64, \"System.RecordedTV.OriginalBroadcastDate\"},",
          "1899:  {0,NULL}",
          "1900: };",
          "1902: static const value_string PropSet159_IDS[] = {",
          "1903:  {0x64, \"System.Music.IsCompilation\"},",
          "1904:  {0,NULL}",
          "1905: };",
          "1907: static const value_string PropSet160_IDS[] = {",
          "1908:  {0x64, \"System.DueDate\"},",
          "1909:  {0,NULL}",
          "1910: };",
          "1912: static const value_string PropSet161_IDS[] = {",
          "1913:  {0x3, \"System.FileDescription\"},",
          "1914:  {0x6, \"System.OriginalFileName\"},",
          "1915:  {0x7, \"System.Software.ProductName\"},",
          "1916:  {0x8, \"System.Software.ProductVersion\"},",
          "1917:  {0,NULL}",
          "1918: };",
          "1920: static const value_string PropSet162_IDS[] = {",
          "1921:  {0x64, \"System.MileageInformation\"},",
          "1922:  {0,NULL}",
          "1923: };",
          "1925: static const value_string PropSet163_IDS[] = {",
          "1926:  {0x2, \"System.RecordedTV.EpisodeName\"},",
          "1927:  {0x3, \"System.RecordedTV.ProgramDescription\"},",
          "1928:  {0x5, \"System.RecordedTV.StationCallSign\"},",
          "1929:  {0x7, \"System.RecordedTV.ChannelNumber\"},",
          "1930:  {0xc, \"System.RecordedTV.IsClosedCaptioningAvailable\"},",
          "1931:  {0xd, \"System.RecordedTV.IsRepeatBroadcast\"},",
          "1932:  {0xe, \"System.RecordedTV.IsSAP\"},",
          "1933:  {0xf, \"System.RecordedTV.DateContentExpires\"},",
          "1934:  {0x10, \"System.RecordedTV.IsATSCContent\"},",
          "1935:  {0x11, \"System.RecordedTV.IsDTVContent\"},",
          "1936:  {0x12, \"System.RecordedTV.IsHDContent\"},",
          "1937:  {0,NULL}",
          "1938: };",
          "1940: static const value_string PropSet164_IDS[] = {",
          "1941:  {0x64, \"System.Audio.PeakValue\"},",
          "1942:  {0,NULL}",
          "1943: };",
          "1945: static const value_string PropSet165_IDS[] = {",
          "1946:  {0x64, \"System.Contact.TelexNumber\"},",
          "1947:  {0,NULL}",
          "1948: };",
          "1950: static const value_string PropSet166_IDS[] = {",
          "1951:  {0x64, \"System.Message.SenderName\"},",
          "1952:  {0,NULL}",
          "1953: };",
          "1955: static const value_string PropSet167_IDS[] = {",
          "1956:  {0x64, \"System.Message.Flags\"},",
          "1957:  {0,NULL}",
          "1958: };",
          "1960: static const value_string PropSet168_IDS[] = {",
          "1961:  {0x64, \"System.IsFolder\"},",
          "1962:  {0,NULL}",
          "1963: };",
          "1965: static const value_string PropSet169_IDS[] = {",
          "1966:  {0x64, \"System.Contact.AssistantTelephone\"},",
          "1967:  {0,NULL}",
          "1968: };",
          "1970: static const value_string PropSet170_IDS[] = {",
          "1971:  {0x64, \"System.KindText\"},",
          "1972:  {0,NULL}",
          "1973: };",
          "1975: static const value_string PropSet171_IDS[] = {",
          "1976:  {0x64, \"System.Photo.ContrastText\"},",
          "1977:  {0,NULL}",
          "1978: };",
          "1980: static const value_string PropSet172_IDS[] = {",
          "1981:  {0x3, \"System.Image.HorizontalSize\"},",
          "1982:  {0x4, \"System.Image.VerticalSize\"},",
          "1983:  {0x5, \"System.Image.HorizontalResolution\"},",
          "1984:  {0x6, \"System.Image.VerticalResolution\"},",
          "1985:  {0x7, \"System.Image.BitDepth\"},",
          "1986:  {0xc, \"System.Media.FrameCount\"},",
          "1987:  {0xd, \"System.Image.Dimensions\"},",
          "1988:  {0,NULL}",
          "1989: };",
          "1991: static const value_string PropSet173_IDS[] = {",
          "1992:  {0x64, \"System.Message.IsFwdOrReply\"},",
          "1993:  {0,NULL}",
          "1994: };",
          "1996: static const value_string PropSet174_IDS[] = {",
          "1997:  {0x64, \"System.Photo.WhiteBalanceText\"},",
          "1998:  {0,NULL}",
          "1999: };",
          "2001: static const value_string PropSet175_IDS[] = {",
          "2002:  {0x64, \"System.Photo.GainControlText\"},",
          "2003:  {0,NULL}",
          "2004: };",
          "2006: static const value_string PropSet176_IDS[] = {",
          "2007:  {0x64, \"System.Communication.PolicyTag\"},",
          "2008:  {0,NULL}",
          "2009: };",
          "2011: static const value_string PropSet177_IDS[] = {",
          "2012:  {0x64, \"System.Contact.HomeFaxNumber\"},",
          "2013:  {0,NULL}",
          "2014: };",
          "2016: static const value_string PropSet178_IDS[] = {",
          "2017:  {0x64, \"System.FlagStatusText\"},",
          "2018:  {0,NULL}",
          "2019: };",
          "2021: static const value_string PropSet179_IDS[] = {",
          "2022:  {0x64, \"System.Contact.AssistantName\"},",
          "2023:  {0,NULL}",
          "2024: };",
          "2026: static const value_string PropSet180_IDS[] = {",
          "2027:  {0x64, \"System.Message.ToDoFlags\"},",
          "2028:  {0,NULL}",
          "2029: };",
          "2031: static const value_string PropSet181_IDS[] = {",
          "2032:  {0x64, \"System.RatingText\"},",
          "2033:  {0,NULL}",
          "2034: };",
          "2036: static const value_string PropSet182_IDS[] = {",
          "2037:  {0x64, \"System.Document.Contributor\"},",
          "2038:  {0,NULL}",
          "2039: };",
          "2041: static const value_string PropSet183_IDS[] = {",
          "2042:  {0x64, \"System.Contact.CallbackTelephone\"},",
          "2043:  {0,NULL}",
          "2044: };",
          "2046: static const value_string PropSet184_IDS[] = {",
          "2047:  {0x64, \"System.EndDate\"},",
          "2048:  {0,NULL}",
          "2049: };",
          "2051: static const value_string PropSet185_IDS[] = {",
          "2052:  {0x64, \"System.Media.DateEncoded\"},",
          "2053:  {0,NULL}",
          "2054: };",
          "2056: static const value_string PropSet186_IDS[] = {",
          "2057:  {0x64, \"System.Photo.FlashText\"},",
          "2058:  {0,NULL}",
          "2059: };",
          "2061: static const value_string PropSet187_IDS[] = {",
          "2062:  {0x64, \"System.Photo.FlashFired\"},",
          "2063:  {0,NULL}",
          "2064: };",
          "2066: static const value_string PropSet188_IDS[] = {",
          "2067:  {0x64, \"System.Document.Division\"},",
          "2068:  {0,NULL}",
          "2069: };",
          "2071: static const value_string PropSet189_IDS[] = {",
          "2072:  {0x64, \"System.Contact.PagerTelephone\"},",
          "2073:  {0,NULL}",
          "2074: };",
          "2076: static const value_string PropSet190_IDS[] = {",
          "2077:  {0x64, \"System.Contact.BusinessAddressCity\"},",
          "2078:  {0,NULL}",
          "2079: };",
          "2081: static const value_string PropSet191_IDS[] = {",
          "2082:  {0x64, \"System.Media.SubscriptionContentId\"},",
          "2083:  {0,NULL}",
          "2084: };",
          "2086: static const value_string PropSet192_IDS[] = {",
          "2087:  {0x64, \"System.Contact.PrimaryAddressStreet\"},",
          "2088:  {0,NULL}",
          "2089: };",
          "2091: static const value_string PropSet193_IDS[] = {",
          "2092:  {0x64, \"System.StartDate\"},",
          "2093:  {0,NULL}",
          "2094: };",
          "2096: static const value_string PropSet194_IDS[] = {",
          "2097:  {0x2, \"System.Video.StreamName\"},",
          "2098:  {0x3, \"System.Video.FrameWidth\"},",
          "2099:  {0x4, \"System.Video.FrameHeight\"},",
          "2100:  {0x6, \"System.Video.FrameRate\"},",
          "2101:  {0x8, \"System.Video.EncodingBitrate\"},",
          "2102:  {0x9, \"System.Video.SampleSize\"},",
          "2103:  {0xa, \"System.Video.Compression\"},",
          "2104:  {0x2a, \"System.Video.HorizontalAspectRatio\"},",
          "2105:  {0x2b, \"System.Video.TotalBitrate\"},",
          "2106:  {0x2c, \"System.Video.FourCC\"},",
          "2107:  {0x2d, \"System.Video.VerticalAspectRatio\"},",
          "2108:  {0,NULL}",
          "2109: };",
          "2111: static const value_string PropSet195_IDS[] = {",
          "2112:  {0x64, \"System.Contact.MailingAddress\"},",
          "2113:  {0,NULL}",
          "2114: };",
          "2116: static struct GuidPropertySet GuidPropertySet[] = {",
          "2117:  { {0xa9bd1526, 0x6a80, 0x11d0, {0x8c, 0x9d, 0x00, 0x20, 0xaf, 0x1d, 0x74, 0x0e}},",
          "2118:   \"DBPROPSET_FSCIFRMWRK_EXT\", \"File system content index framework\",",
          "2119:   DBPROPSET_FSCIFRMWRK_EXT_IDS",
          "2120:  },",
          "2121:  { {0xa7ac77ed, 0xf8d7, 0x11ce, {0xa7, 0x98, 0x00, 0x20, 0xf8, 0x00, 0x80, 0x25}},",
          "2122:   \"DBPROPSET_QUERYEXT\", \"Query extension\",",
          "2123:   DBPROPSET_QUERYEXT_IDS",
          "2124:  },",
          "2125:  { {0xafafaca5, 0xb5d1, 0x11d0, {0x8c, 0x62, 0x00, 0xc0, 0x4f, 0xc2, 0xdb, 0x8d}},",
          "2126:   \"DBPROPSET_CIFRMWRKCORE_EXT\", \"Content index framework core\",",
          "2127:   DBPROPSET_CIFRMWRKCORE_EXT_IDS",
          "2128:  },",
          "2129:  { {0xAA6EE6B0, 0xE828, 0x11D0, {0xB2, 0x3E, 0x00, 0xAA, 0x00, 0x47, 0xFC, 0x01}},",
          "2130:   \"DBPROPSET_MSIDXS_ROWSETEXT\", \"???\",",
          "2131:   DBPROPSET_MSIDXS_ROWSETEXT_IDS",
          "2132:  },",
          "2133:  { {0xB725F130, 0x47ef, 0x101a, {0xA5, 0xF1, 0x02, 0x60, 0x8C, 0x9E, 0xEB, 0xAC}},",
          "2134:   \"Storage\", \"Storage Property Set\",",
          "2135:   StorageGuid_IDS",
          "2136:  },",
          "2137:  { {0xF29F85E0, 0x4FF9, 0x1068, {0xAB, 0x91, 0x08, 0x00, 0x2B, 0x27, 0xB3, 0xD9}},",
          "2138:   \"Document\", \"Document Property Set\",",
          "2139:   DocPropSetGuid_IDS",
          "2140:  },",
          "2141:  { {0x49691C90, 0x7E17, 0x101A, {0xA9, 0x1C, 0x08, 0x00, 0x2B, 0x2E, 0xCD, 0xA9}},",
          "2142:   \"Query\", \"Query Property Set\",",
          "2143:   QueryGuid_IDS",
          "2144:  },",
          "2145:  { {0x28636AA6, 0x953D, 0x11D2, {0xB5, 0xD6, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0xD0}},",
          "2146:   \"ShellDetails\", \"Shell Details Property Set\",",
          "2147:   ShellDetails_IDS",
          "2148:  },",
          "2149:  { {0x446D16B1, 0x8DAD, 0x4870, {0xA7, 0x48, 0x40, 0x2E, 0xA4, 0x3D, 0x78, 0x8C}},",
          "2150:   \"???\", \"Unspecified Property Set\",",
          "2151:   PropSet1_IDS",
          "2152:  },",
          "2153:  { {0x1E3EE840, 0xBC2B, 0x476C, {0x82, 0x37, 0x2A, 0xCD, 0x1A, 0x83, 0x9B, 0x22}},",
          "2154:   \"???\", \"Unspecified Property Set\",",
          "2155:   PropSet2_IDS",
          "2156:  },",
          "2157:  { {0x56A3372E, 0xCE9C, 0x11d2, {0x9F, 0x0E, 0x00, 0x60, 0x97, 0xC6, 0x86, 0xF6}},",
          "2158:   \"Music\", \"Music Property Set\",",
          "2159:   MusicGuid_IDS",
          "2160:  },",
          "2161:  { {0xE3E0584C, 0xB788, 0x4A5A, {0xBB, 0x20, 0x7F, 0x5A, 0x44, 0xC9, 0xAC, 0xDD}},",
          "2162:   \"???\", \"Unspecified Property Set\",",
          "2163:   PropSet3_IDS",
          "2164:  },",
          "2165:  { {0xDABD30ED, 0x0043, 0x4789, {0xA7, 0xF8, 0xD0, 0x13, 0xA4, 0x73, 0x66, 0x22}},",
          "2166:   \"???\", \"Unspecified Property Set\",",
          "2167:   PropSet4_IDS",
          "2168:  },",
          "2169:  { {0x635E9051, 0x50A5, 0x4BA2, {0xB9, 0xDB, 0x4E, 0xD0, 0x56, 0xC7, 0x72, 0x96}},",
          "2170:   \"???\", \"Unspecified Property Set\",",
          "2171:   PropSet5_IDS",
          "2172:  },",
          "2173:  { {0xD0A04F0A, 0x462A, 0x48A4, {0xBB, 0x2F, 0x37, 0x06, 0xE8, 0x8D, 0xBD, 0x7D}},",
          "2174:   \"???\", \"Unspecified Property Set\",",
          "2175:   PropSet6_IDS",
          "2176:  },",
          "2177:  { {0xDE35258C, 0xC695, 0x4CBC, {0xB9, 0x82, 0x38, 0xB0, 0xAD, 0x24, 0xCE, 0xD0}},",
          "2178:   \"???\", \"Unspecified Property Set\",",
          "2179:   PropSet7_IDS",
          "2180:  },",
          "2181:  { {0xD6942081, 0xD53B, 0x443D, {0xAD, 0x47, 0x5E, 0x05, 0x9D, 0x9C, 0xD2, 0x7A}},",
          "2182:   \"???\", \"Unspecified Property Set\",",
          "2183:   PropSet8_IDS",
          "2184:  },",
          "2185:  { {0xF7DB74B4, 0x4287, 0x4103, {0xAF, 0xBA, 0xF1, 0xB1, 0x3D, 0xCD, 0x75, 0xCF}},",
          "2186:   \"???\", \"Unspecified Property Set\",",
          "2187:   PropSet9_IDS",
          "2188:  },",
          "2189:  { {0x0B63E350, 0x9CCC, 0x11d0, {0xBC, 0xDB, 0x00, 0x80, 0x5F, 0xCC, 0xCE, 0x04}},",
          "2190:   \"???\", \"Unspecified Property Set\",",
          "2191:   PropSet10_IDS",
          "2192:  },",
          "2193:  { {0x9C1FCF74, 0x2D97, 0x41BA, {0xB4, 0xAE, 0xCB, 0x2E, 0x36, 0x61, 0xA6, 0xE4}},",
          "2194:   \"???\", \"Unspecified Property Set\",",
          "2195:   PropSet11_IDS",
          "2196:  },",
          "2197:  { {0x560C36C0, 0x503A, 0x11CF, {0xBA, 0xA1, 0x00, 0x00, 0x4C, 0x75, 0x2A, 0x9A}},",
          "2198:   \"DocCharacter\", \"Document characterization Property Set\",",
          "2199:   DocCharacter_IDS",
          "2200:  },",
          "2201:  { {0x5CDA5FC8, 0x33EE, 0x4FF3, {0x90, 0x94, 0xAE, 0x7B, 0xD8, 0x86, 0x8C, 0x4D}},",
          "2202:   \"???\", \"Unspecified Property Set\",",
          "2203:   PropSet12_IDS",
          "2204:  },",
          "2205:  { {0xF23F425C, 0x71A1, 0x4FA8, {0x92, 0x2F, 0x67, 0x8E, 0xA4, 0xA6, 0x04, 0x08}},",
          "2206:   \"???\", \"Unspecified Property Set\",",
          "2207:   PropSet13_IDS",
          "2208:  },",
          "2209:  { {0xDC8F80BD, 0xAF1E, 0x4289, {0x85, 0xB6, 0x3D, 0xFC, 0x1B, 0x49, 0x39, 0x92}},",
          "2210:   \"???\", \"Unspecified Property Set\",",
          "2211:   PropSet14_IDS",
          "2212:  },",
          "2213:  { {0xD5CDD502, 0x2E9C, 0x101B, {0x93, 0x97, 0x08, 0x00, 0x2B, 0x2C, 0xF9, 0xAE}},",
          "2214:   \"DocPropSet2\", \"Document Property Set 2\",",
          "2215:   DocPropSetGuid2_IDS",
          "2216:  },",
          "2217:  { {0x176DC63C, 0x2688, 0x4E89, {0x81, 0x43, 0xA3, 0x47, 0x80, 0x0F, 0x25, 0xE9}},",
          "2218:   \"System.Contact\", \"System Contact Property Set\",",
          "2219:   SystemContact_IDS",
          "2220:  },",
          "2221:  { {0xBFEE9149, 0xE3E2, 0x49A7, {0xA8, 0x62, 0xC0, 0x59, 0x88, 0x14, 0x5C, 0xEC}},",
          "2222:   \"???\",\"Unspecified Property Set\",",
          "2223:   PropSet15_IDS",
          "2224:  },",
          "2225:  { {0xFF962609, 0xB7D6, 0x4999, {0x86, 0x2D, 0x95, 0x18, 0x0D, 0x52, 0x9A, 0xEA}},",
          "2226:   \"???\",\"Unspecified Property Set\",",
          "2227:   PropSet16_IDS",
          "2228:  },",
          "2229:  { {0xAEAC19E4, 0x89AE, 0x4508, {0xB9, 0xB7, 0xBB, 0x86, 0x7A, 0xBE, 0xE2, 0xED}},",
          "2230:   \"???\",\"Unspecified Property Set\",",
          "2231:   PropSet17_IDS",
          "2232:  },",
          "2233:  { {0x09429607, 0x582D, 0x437F, {0x84, 0xC3, 0xDE, 0x93, 0xA2, 0xB2, 0x4C, 0x3C}},",
          "2234:   \"???\",\"Unspecified Property Set\",",
          "2235:   PropSet18_IDS",
          "2236:  },",
          "2237:  { {0x5BF396D4, 0x5EB2, 0x466F, {0xBD, 0xE9, 0x2F, 0xB3, 0xF2, 0x36, 0x1D, 0x6E}},",
          "2238:   \"???\",\"Unspecified Property Set\",",
          "2239:   PropSet19_IDS",
          "2240:  },",
          "2241:  { {0x10984E0A, 0xF9F2, 0x4321, {0xB7, 0xEF, 0xBA, 0xF1, 0x95, 0xAF, 0x43, 0x19}},",
          "2242:   \"???\",\"Unspecified Property Set\",",
          "2243:   PropSet20_IDS",
          "2244:  },",
          "2245:  { {0x39A7F922, 0x477C, 0x48DE, {0x8B, 0xC8, 0xB2, 0x84, 0x41, 0xE3, 0x42, 0xE3}},",
          "2246:   \"???\",\"Unspecified Property Set\",",
          "2247:   PropSet21_IDS",
          "2248:  },",
          "2249:  { {0x8F167568, 0x0AAE, 0x4322, {0x8E, 0xD9, 0x60, 0x55, 0xB7, 0xB0, 0xE3, 0x98}},",
          "2250:   \"???\",\"Unspecified Property Set\",",
          "2251:   PropSet22_IDS",
          "2252:  },",
          "2253:  { {0x000214A1, 0x0000, 0x0000, {0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46}},",
          "2254:   \"???\",\"Unspecified Property Set\",",
          "2255:   PropSet23_IDS",
          "2256:  },",
          "2257:  { {0x43F8D7B7, 0xA444, 0x4F87, {0x93, 0x83, 0x52, 0x27, 0x1C, 0x9B, 0x91, 0x5C}},",
          "2258:   \"???\",\"Unspecified Property Set\",",
          "2259:   PropSet24_IDS",
          "2260:  },",
          "2261:  { {0x8FDC6DEA, 0xB929, 0x412B, {0xBA, 0x90, 0x39, 0x7A, 0x25, 0x74, 0x65, 0xFE}},",
          "2262:   \"???\",\"Unspecified Property Set\",",
          "2263:   PropSet25_IDS",
          "2264:  },",
          "2265:  { {0x188C1F91, 0x3C40, 0x4132, {0x9E, 0xC5, 0xD8, 0xB0, 0x3B, 0x72, 0xA8, 0xA2}},",
          "2266:   \"???\",\"Unspecified Property Set\",",
          "2267:   PropSet26_IDS",
          "2268:  },",
          "2269:  { {0xD37D52C6, 0x261C, 0x4303, {0x82, 0xB3, 0x08, 0xB9, 0x26, 0xAC, 0x6F, 0x12}},",
          "2270:   \"???\",\"Unspecified Property Set\",",
          "2271:   PropSet27_IDS",
          "2272:  },",
          "2273:  { {0x09EDD5B6, 0xB301, 0x43C5, {0x99, 0x90, 0xD0, 0x03, 0x02, 0xEF, 0xFD, 0x46}},",
          "2274:   \"???\",\"Unspecified Property Set\",",
          "2275:   PropSet28_IDS",
          "2276:  },",
          "2277:  { {0x9D2408B6, 0x3167, 0x422B, {0x82, 0xB0, 0xF5, 0x83, 0xB7, 0xA7, 0xCF, 0xE3}},",
          "2278:   \"???\",\"Unspecified Property Set\",",
          "2279:   PropSet29_IDS",
          "2280:  },",
          "2281:  { {0xE08805C8, 0xE395, 0x40DF, {0x80, 0xD2, 0x54, 0xF0, 0xD6, 0xC4, 0x31, 0x54}},",
          "2282:   \"???\",\"Unspecified Property Set\",",
          "2283:   PropSet30_IDS",
          "2284:  },",
          "2285:  { {0x2C53C813, 0xFB63, 0x4E22, {0xA1, 0xAB, 0x0B, 0x33, 0x1C, 0xA1, 0xE2, 0x73}},",
          "2286:   \"???\",\"Unspecified Property Set\",",
          "2287:   PropSet31_IDS",
          "2288:  },",
          "2289:  { {0xD98BE98B, 0xB86B, 0x4095, {0xBF, 0x52, 0x9D, 0x23, 0xB2, 0xE0, 0xA7, 0x52}},",
          "2290:   \"???\",\"Unspecified Property Set\",",
          "2291:   PropSet32_IDS",
          "2292:  },",
          "2293:  { {0xD4729704, 0x8EF1, 0x43EF, {0x90, 0x24, 0x2B, 0xD3, 0x81, 0x18, 0x7F, 0xD5}},",
          "2294:   \"???\",\"Unspecified Property Set\",",
          "2295:   PropSet33_IDS",
          "2296:  },",
          "2297:  { {0xA5477F61, 0x7A82, 0x4ECA, {0x9D, 0xDE, 0x98, 0xB6, 0x9B, 0x24, 0x79, 0xB3}},",
          "2298:   \"???\",\"Unspecified Property Set\",",
          "2299:   PropSet34_IDS",
          "2300:  },",
          "2301:  { {0x45EAE747, 0x8E2A, 0x40AE, {0x8C, 0xBF, 0xCA, 0x52, 0xAB, 0xA6, 0x15, 0x2A}},",
          "2302:   \"???\",\"Unspecified Property Set\",",
          "2303:   PropSet35_IDS",
          "2304:  },",
          "2305:  { {0x95C656C1, 0x2ABF, 0x4148, {0x9E, 0xD3, 0x9E, 0xC6, 0x02, 0xE3, 0xB7, 0xCD}},",
          "2306:   \"???\",\"Unspecified Property Set\",",
          "2307:   PropSet36_IDS",
          "2308:  },",
          "2309:  { {0x51EC3F47, 0xDD50, 0x421D, {0x87, 0x69, 0x33, 0x4F, 0x50, 0x42, 0x4B, 0x1E}},",
          "2310:   \"???\",\"Unspecified Property Set\",",
          "2311:   PropSet37_IDS",
          "2312:  },",
          "2313:  { {0x508161FA, 0x313B, 0x43D5, {0x83, 0xA1, 0xC1, 0xAC, 0xCF, 0x68, 0x62, 0x2C}},",
          "2314:   \"???\",\"Unspecified Property Set\",",
          "2315:   PropSet38_IDS",
          "2316:  },",
          "2317:  { {0x730FB6DD, 0xCF7C, 0x426B, {0xA0, 0x3F, 0xBD, 0x16, 0x6C, 0xC9, 0xEE, 0x24}},",
          "2318:   \"???\",\"Unspecified Property Set\",",
          "2319:   PropSet40_IDS",
          "2320:  },",
          "2321:  { {0x346C8BD1, 0x2E6A, 0x4C45, {0x89, 0xA4, 0x61, 0xB7, 0x8E, 0x8E, 0x70, 0x0F}},",
          "2322:   \"???\",\"Unspecified Property Set\",",
          "2323:   PropSet41_IDS",
          "2324:  },",
          "2325:  { {0x38965063, 0xEDC8, 0x4268, {0x84, 0x91, 0xB7, 0x72, 0x31, 0x72, 0xCF, 0x29}},",
          "2326:   \"???\",\"Unspecified Property Set\",",
          "2327:   PropSet42_IDS",
          "2328:  },",
          "2329:  { {0x6A15E5A0, 0x0A1E, 0x4CD7, {0xBB, 0x8C, 0xD2, 0xF1, 0xB0, 0xC9, 0x29, 0xBC}},",
          "2330:   \"???\",\"Unspecified Property Set\",",
          "2331:   PropSet43_IDS",
          "2332:  },",
          "2333:  { {0x3F08E66F, 0x2F44, 0x4BB9, {0xA6, 0x82, 0xAC, 0x35, 0xD2, 0x56, 0x23, 0x22}},",
          "2334:   \"???\",\"Unspecified Property Set\",",
          "2335:   PropSet45_IDS",
          "2336:  },",
          "2337:  { {0xC89A23D0, 0x7D6D, 0x4EB8, {0x87, 0xD4, 0x77, 0x6A, 0x82, 0xD4, 0x93, 0xE5}},",
          "2338:   \"???\",\"Unspecified Property Set\",",
          "2339:   PropSet46_IDS",
          "2340:  },",
          "2341:  { {0x644D37B4, 0xE1B3, 0x4BAD, {0xB0, 0x99, 0x7E, 0x7C, 0x04, 0x96, 0x6A, 0xCA}},",
          "2342:   \"???\",\"Unspecified Property Set\",",
          "2343:   PropSet47_IDS",
          "2344:  },",
          "2345:  { {0x83A6347E, 0x6FE4, 0x4F40, {0xBA, 0x9C, 0xC4, 0x86, 0x52, 0x40, 0xD1, 0xF4}},",
          "2346:   \"???\",\"Unspecified Property Set\",",
          "2347:   PropSet48_IDS",
          "2348:  },",
          "2349:  { {0xB812F15D, 0xC2D8, 0x4BBF, {0xBA, 0xCD, 0x79, 0x74, 0x43, 0x46, 0x11, 0x3F}},",
          "2350:   \"???\",\"Unspecified Property Set\",",
          "2351:   PropSet49_IDS",
          "2352:  },",
          "2353:  { {0xA06992B3, 0x8CAF, 0x4ED7, {0xA5, 0x47, 0xB2, 0x59, 0xE3, 0x2A, 0xC9, 0xFC}},",
          "2354:   \"???\",\"Unspecified Property Set\",",
          "2355:   PropSet50_IDS",
          "2356:  },",
          "2357:  { {0x41CF5AE0, 0xF75A, 0x4806, {0xBD, 0x87, 0x59, 0xC7, 0xD9, 0x24, 0x8E, 0xB9}},",
          "2358:   \"???\",\"Unspecified Property Set\",",
          "2359:   PropSet51_IDS",
          "2360:  },",
          "2361:  { {0x0ADEF160, 0xDB3F, 0x4308, {0x9A, 0x21, 0x06, 0x23, 0x7B, 0x16, 0xFA, 0x2A}},",
          "2362:   \"???\",\"Unspecified Property Set\",",
          "2363:   PropSet52_IDS",
          "2364:  },",
          "2365:  { {0x8AFCC170, 0x8A46, 0x4B53, {0x9E, 0xEE, 0x90, 0xBA, 0xE7, 0x15, 0x1E, 0x62}},",
          "2366:   \"???\",\"Unspecified Property Set\",",
          "2367:   PropSet53_IDS",
          "2368:  },",
          "2369:  { {0x56310920, 0x2491, 0x4919, {0x99, 0xCE, 0xEA, 0xDB, 0x06, 0xFA, 0xFD, 0xB2}},",
          "2370:   \"???\",\"Unspecified Property Set\",",
          "2371:   PropSet54_IDS",
          "2372:  },",
          "2373:  { {0xB33AF30B, 0xF552, 0x4584, {0x93, 0x6C, 0xCB, 0x93, 0xE5, 0xCD, 0xA2, 0x9F}},",
          "2374:   \"???\",\"Unspecified Property Set\",",
          "2375:   PropSet55_IDS",
          "2376:  },",
          "2377:  { {0x67DF94DE, 0x0CA7, 0x4D6F, {0xB7, 0x92, 0x05, 0x3A, 0x3E, 0x4F, 0x03, 0xCF}},",
          "2378:   \"???\",\"Unspecified Property Set\",",
          "2379:   PropSet56_IDS",
          "2380:  },",
          "2381:  { {0x9098F33C, 0x9A7D, 0x48A8, {0x8D, 0xE5, 0x2E, 0x12, 0x27, 0xA6, 0x4E, 0x91}},",
          "2382:   \"???\",\"Unspecified Property Set\",",
          "2383:   PropSet57_IDS",
          "2384:  },",
          "2385:  { {0xDE5EF3C7, 0x46E1, 0x484E, {0x99, 0x99, 0x62, 0xC5, 0x30, 0x83, 0x94, 0xC1}},",
          "2386:   \"???\",\"Unspecified Property Set\",",
          "2387:   PropSet58_IDS",
          "2388:  },",
          "2389:  { {0x315B9C8D, 0x80A9, 0x4EF9, {0xAE, 0x16, 0x8E, 0x74, 0x6D, 0xA5, 0x1D, 0x70}},",
          "2390:   \"???\",\"Unspecified Property Set\",",
          "2391:   PropSet59_IDS",
          "2392:  },",
          "2393:  { {0x98F98354, 0x617A, 0x46B8, {0x85, 0x60, 0x5B, 0x1B, 0x64, 0xBF, 0x1F, 0x89}},",
          "2394:   \"???\",\"Unspecified Property Set\",",
          "2395:   PropSet60_IDS",
          "2396:  },",
          "2397:  { {0x08F6D7C2, 0xE3F2, 0x44FC, {0xAF, 0x1E, 0x5A, 0xA5, 0xC8, 0x1A, 0x2D, 0x3E}},",
          "2398:   \"???\",\"Unspecified Property Set\",",
          "2399:   PropSet61_IDS",
          "2400:  },",
          "2401:  { {0xD4D0AA16, 0x9948, 0x41A4, {0xAA, 0x85, 0xD9, 0x7F, 0xF9, 0x64, 0x69, 0x93}},",
          "2402:   \"???\",\"Unspecified Property Set\",",
          "2403:   PropSet62_IDS",
          "2404:  },",
          "2405:  { {0xDE41CC29, 0x6971, 0x4290, {0xB4, 0x72, 0xF5, 0x9F, 0x2E, 0x2F, 0x31, 0xE2}},",
          "2406:   \"???\",\"Unspecified Property Set\",",
          "2407:   PropSet63_IDS",
          "2408:  },",
          "2409:  { {0xDEA7C82C, 0x1D89, 0x4A66, {0x94, 0x27, 0xA4, 0xE3, 0xDE, 0xBA, 0xBC, 0xB1}},",
          "2410:   \"???\",\"Unspecified Property Set\",",
          "2411:   PropSet64_IDS",
          "2412:  },",
          "2413:  { {0x00F58A38, 0xC54B, 0x4C40, {0x86, 0x96, 0x97, 0x23, 0x59, 0x80, 0xEA, 0xE1}},",
          "2414:   \"???\",\"Unspecified Property Set\",",
          "2415:   PropSet65_IDS",
          "2416:  },",
          "2417:  { {0xCD9ED458, 0x08CE, 0x418F, {0xA7, 0x0E, 0xF9, 0x12, 0xC7, 0xBB, 0x9C, 0x5C}},",
          "2418:   \"???\",\"Unspecified Property Set\",",
          "2419:   PropSet66_IDS",
          "2420:  },",
          "2421:  { {0x64440492, 0x4C8B, 0x11D1, {0x8B, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03}},",
          "2422:   \"???\",\"Unspecified Property Set\",",
          "2423:   PropSet67_IDS",
          "2424:  },",
          "2425:  { {0xAAA660F9, 0x9865, 0x458E, {0xB4, 0x84, 0x01, 0xBC, 0x7F, 0xE3, 0x97, 0x3E}},",
          "2426:   \"???\",\"Unspecified Property Set\",",
          "2427:   PropSet68_IDS",
          "2428:  },",
          "2429:  { {0xE8309B6E, 0x084C, 0x49B4, {0xB1, 0xFC, 0x90, 0xA8, 0x03, 0x31, 0xB6, 0x38}},",
          "2430:   \"???\",\"Unspecified Property Set\",",
          "2431:   PropSet69_IDS",
          "2432:  },",
          "2433:  { {0x64440490, 0x4C8B, 0x11D1, {0x8B, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03}},",
          "2434:   \"???\",\"Unspecified Property Set\",",
          "2435:   PropSet70_IDS",
          "2436:  },",
          "2437:  { {0xE4F10A3C, 0x49E6, 0x405D, {0x82, 0x88, 0xA2, 0x3B, 0xD4, 0xEE, 0xAA, 0x6C}},",
          "2438:   \"???\",\"Unspecified Property Set\",",
          "2439:   PropSet71_IDS",
          "2440:  },",
          "2441:  { {0x14B81DA1, 0x0135, 0x4D31, {0x96, 0xD9, 0x6C, 0xBF, 0xC9, 0x67, 0x1A, 0x99}},",
          "2442:   \"???\",\"Unspecified Property Set\",",
          "2443:   PropSet72_IDS",
          "2444:  },",
          "2445:  { {0xAAF16BAC, 0x2B55, 0x45E6, {0x9F, 0x6D, 0x41, 0x5E, 0xB9, 0x49, 0x10, 0xDF}},",
          "2446:   \"???\",\"Unspecified Property Set\",",
          "2447:   PropSet73_IDS",
          "2448:  },",
          "2449:  { {0x821437D6, 0x9EAB, 0x4765, {0xA5, 0x89, 0x3B, 0x1C, 0xBB, 0xD2, 0x2A, 0x61}},",
          "2450:   \"???\",\"Unspecified Property Set\",",
          "2451:   PropSet74_IDS",
          "2452:  },",
          "2453:  { {0xD55BAE5A, 0x3892, 0x417A, {0xA6, 0x49, 0xC6, 0xAC, 0x5A, 0xAA, 0xEA, 0xB3}},",
          "2454:   \"???\",\"Unspecified Property Set\",",
          "2455:   PropSet75_IDS",
          "2456:  },",
          "2457:  { {0x72FC5BA4, 0x24F9, 0x4011, {0x9F, 0x3F, 0xAD, 0xD2, 0x7A, 0xFA, 0xD8, 0x18}},",
          "2458:   \"???\",\"Unspecified Property Set\",",
          "2459:   PropSet76_IDS",
          "2460:  },",
          "2461:  { {0x0BA7D6C3, 0x568D, 0x4159, {0xAB, 0x91, 0x78, 0x1A, 0x91, 0xFB, 0x71, 0xE5}},",
          "2462:   \"???\",\"Unspecified Property Set\",",
          "2463:   PropSet77_IDS",
          "2464:  },",
          "2465:  { {0x744C8242, 0x4DF5, 0x456C, {0xAB, 0x9E, 0x01, 0x4E, 0xFB, 0x90, 0x21, 0xE3}},",
          "2466:   \"???\",\"Unspecified Property Set\",",
          "2467:   PropSet78_IDS",
          "2468:  },",
          "2469:  { {0xB9B4B3FC, 0x2B51, 0x4A42, {0xB5, 0xD8, 0x32, 0x41, 0x46, 0xAF, 0xCF, 0x25}},",
          "2470:   \"???\",\"Unspecified Property Set\",",
          "2471:   PropSet79_IDS",
          "2472:  },",
          "2473:  { {0x5DC2253F, 0x5E11, 0x4ADF, {0x9C, 0xFE, 0x91, 0x0D, 0xD0, 0x1E, 0x3E, 0x70}},",
          "2474:   \"???\",\"Unspecified Property Set\",",
          "2475:   PropSet80_IDS",
          "2476:  },",
          "2477:  { {0x7B9F6399, 0x0A3F, 0x4B12, {0x89, 0xBD, 0x4A, 0xDC, 0x51, 0xC9, 0x18, 0xAF}},",
          "2478:   \"???\",\"Unspecified Property Set\",",
          "2479:   PropSet81_IDS",
          "2480:  },",
          "2481:  { {0x8589E481, 0x6040, 0x473D, {0xB1, 0x71, 0x7F, 0xA8, 0x9C, 0x27, 0x08, 0xED}},",
          "2482:   \"???\",\"Unspecified Property Set\",",
          "2483:   PropSet82_IDS",
          "2484:  },",
          "2485:  { {0x5DA84765, 0xE3FF, 0x4278, {0x86, 0xB0, 0xA2, 0x79, 0x67, 0xFB, 0xDD, 0x03}},",
          "2486:   \"???\",\"Unspecified Property Set\",",
          "2487:   PropSet83_IDS",
          "2488:  },",
          "2489:  { {0x14977844, 0x6B49, 0x4AAD, {0xA7, 0x14, 0xA4, 0x51, 0x3B, 0xF6, 0x04, 0x60}},",
          "2490:   \"???\",\"Unspecified Property Set\",",
          "2491:   PropSet84_IDS",
          "2492:  },",
          "2493:  { {0x90E5E14E, 0x648B, 0x4826, {0xB2, 0xAA, 0xAC, 0xAF, 0x79, 0x0E, 0x35, 0x13}},",
          "2494:   \"???\",\"Unspecified Property Set\",",
          "2495:   PropSet85_IDS",
          "2496:  },",
          "2497:  { {0x293CA35A, 0x09AA, 0x4DD2, {0xB1, 0x80, 0x1F, 0xE2, 0x45, 0x72, 0x8A, 0x52}},",
          "2498:   \"???\",\"Unspecified Property Set\",",
          "2499:   PropSet86_IDS",
          "2500:  },",
          "2501:  { {0xC8EA94F0, 0xA9E3, 0x4969, {0xA9, 0x4B, 0x9C, 0x62, 0xA9, 0x53, 0x24, 0xE0}},",
          "2502:   \"???\",\"Unspecified Property Set\",",
          "2503:   PropSet87_IDS",
          "2504:  },",
          "2505:  { {0x8B26EA41, 0x058F, 0x43F6, {0xAE, 0xCC, 0x40, 0x35, 0x68, 0x1C, 0xE9, 0x77}},",
          "2506:   \"???\",\"Unspecified Property Set\",",
          "2507:   PropSet88_IDS",
          "2508:  },",
          "2509:  { {0xF21D9941, 0x81F0, 0x471A, {0xAD, 0xEE, 0x4E, 0x74, 0xB4, 0x92, 0x17, 0xED}},",
          "2510:   \"???\",\"Unspecified Property Set\",",
          "2511:   PropSet89_IDS",
          "2512:  },",
          "2513:  { {0xB0B87314, 0xFCF6, 0x4FEB, {0x8D, 0xFF, 0xA5, 0x0D, 0xA6, 0xAF, 0x56, 0x1C}},",
          "2514:   \"???\",\"Unspecified Property Set\",",
          "2515:   PropSet90_IDS",
          "2516:  },",
          "2517:  { {0xCC6F4F24, 0x6083, 0x4BD4, {0x87, 0x54, 0x67, 0x4D, 0x0D, 0xE8, 0x7A, 0xB8}},",
          "2518:   \"???\",\"Unspecified Property Set\",",
          "2519:   PropSet91_IDS",
          "2520:  },",
          "2521:  { {0xA0E74609, 0xB84D, 0x4F49, {0xB8, 0x60, 0x46, 0x2B, 0xD9, 0x97, 0x1F, 0x98}},",
          "2522:   \"???\",\"Unspecified Property Set\",",
          "2523:   PropSet92_IDS",
          "2524:  },",
          "2525:  { {0xD68DBD8A, 0x3374, 0x4B81, {0x99, 0x72, 0x3E, 0xC3, 0x06, 0x82, 0xDB, 0x3D}},",
          "2526:   \"???\",\"Unspecified Property Set\",",
          "2527:   PropSet93_IDS",
          "2528:  },",
          "2529:  { {0x2CBAA8F5, 0xD81F, 0x47CA, {0xB1, 0x7A, 0xF8, 0xD8, 0x22, 0x30, 0x01, 0x31}},",
          "2530:   \"???\",\"Unspecified Property Set\",",
          "2531:   PropSet94_IDS",
          "2532:  },",
          "2533:  { {0x72FAB781, 0xACDA, 0x43E5, {0xB1, 0x55, 0xB2, 0x43, 0x4F, 0x85, 0xE6, 0x78}},",
          "2534:   \"???\",\"Unspecified Property Set\",",
          "2535:   PropSet95_IDS",
          "2536:  },",
          "2537:  { {0x6B8DA074, 0x3B5C, 0x43BC, {0x88, 0x6F, 0x0A, 0x2C, 0xDC, 0xE0, 0x0B, 0x6F}},",
          "2538:   \"???\",\"Unspecified Property Set\",",
          "2539:   PropSet96_IDS",
          "2540:  },",
          "2541:  { {0x18BBD425, 0xECFD, 0x46EF, {0xB6, 0x12, 0x7B, 0x4A, 0x60, 0x34, 0xED, 0xA0}},",
          "2542:   \"???\",\"Unspecified Property Set\",",
          "2543:   PropSet97_IDS",
          "2544:  },",
          "2545:  { {0x276D7BB0, 0x5B34, 0x4FB0, {0xAA, 0x4B, 0x15, 0x8E, 0xD1, 0x2A, 0x18, 0x09}},",
          "2546:   \"???\",\"Unspecified Property Set\",",
          "2547:   PropSet99_IDS",
          "2548:  },",
          "2549:  { {0xFEC690B7, 0x5F30, 0x4646, {0xAE, 0x47, 0x4C, 0xAA, 0xFB, 0xA8, 0x84, 0xA3}},",
          "2550:   \"???\",\"Unspecified Property Set\",",
          "2551:   PropSet100_IDS",
          "2552:  },",
          "2553:  { {0x46B4E8DE, 0xCDB2, 0x440D, {0x88, 0x5C, 0x16, 0x58, 0xEB, 0x65, 0xB9, 0x14}},",
          "2554:   \"???\",\"Unspecified Property Set\",",
          "2555:   PropSet101_IDS",
          "2556:  },",
          "2557:  { {0xF628FD8C, 0x7BA8, 0x465A, {0xA6, 0x5B, 0xC5, 0xAA, 0x79, 0x26, 0x3A, 0x9E}},",
          "2558:   \"???\",\"Unspecified Property Set\",",
          "2559:   PropSet102_IDS",
          "2560:  },",
          "2561:  { {0x7A7D76F4, 0xB630, 0x4BD7, {0x95, 0xFF, 0x37, 0xCC, 0x51, 0xA9, 0x75, 0xC9}},",
          "2562:   \"???\",\"Unspecified Property Set\",",
          "2563:   PropSet103_IDS",
          "2564:  },",
          "2565:  { {0x446F787F, 0x10C4, 0x41CB, {0xA6, 0xC4, 0x4D, 0x03, 0x43, 0x55, 0x15, 0x97}},",
          "2566:   \"???\",\"Unspecified Property Set\",",
          "2567:   PropSet104_IDS",
          "2568:  },",
          "2569:  { {0xA9EA193C, 0xC511, 0x498A, {0xA0, 0x6B, 0x58, 0xE2, 0x77, 0x6D, 0xCC, 0x28}},",
          "2570:   \"???\",\"Unspecified Property Set\",",
          "2571:   PropSet105_IDS",
          "2572:  },",
          "2573:  { {0x97B0AD89, 0xDF49, 0x49CC, {0x83, 0x4E, 0x66, 0x09, 0x74, 0xFD, 0x75, 0x5B}},",
          "2574:   \"???\",\"Unspecified Property Set\",",
          "2575:   PropSet106_IDS",
          "2576:  },",
          "2577:  { {0xF6272D18, 0xCECC, 0x40B1, {0xB2, 0x6A, 0x39, 0x11, 0x71, 0x7A, 0xA7, 0xBD}},",
          "2578:   \"???\",\"Unspecified Property Set\",",
          "2579:   PropSet107_IDS",
          "2580:  },",
          "2581:  { {0x61478C08, 0xB600, 0x4A84, {0xBB, 0xE4, 0xE9, 0x9C, 0x45, 0xF0, 0xA0, 0x72}},",
          "2582:   \"???\",\"Unspecified Property Set\",",
          "2583:   PropSet108_IDS",
          "2584:  },",
          "2585:  { {0xBCCC8A3C, 0x8CEF, 0x42E5, {0x9B, 0x1C, 0xC6, 0x90, 0x79, 0x39, 0x8B, 0xC7}},",
          "2586:   \"???\",\"Unspecified Property Set\",",
          "2587:   PropSet109_IDS",
          "2588:  },",
          "2589:  { {0x9AD5BADB, 0xCEA7, 0x4470, {0xA0, 0x3D, 0xB8, 0x4E, 0x51, 0xB9, 0x94, 0x9E}},",
          "2590:   \"???\",\"Unspecified Property Set\",",
          "2591:   PropSet110_IDS",
          "2592:  },",
          "2593:  { {0xF1A24AA7, 0x9CA7, 0x40F6, {0x89, 0xEC, 0x97, 0xDE, 0xF9, 0xFF, 0xE8, 0xDB}},",
          "2594:   \"???\",\"Unspecified Property Set\",",
          "2595:   PropSet111_IDS",
          "2596:  },",
          "2597:  { {0x3602C812, 0x0F3B, 0x45F0, {0x85, 0xAD, 0x60, 0x34, 0x68, 0xD6, 0x94, 0x23}},",
          "2598:   \"???\",\"Unspecified Property Set\",",
          "2599:   PropSet112_IDS",
          "2600:  },",
          "2601:  { {0xA6F360D2, 0x55F9, 0x48DE, {0xB9, 0x09, 0x62, 0x0E, 0x09, 0x0A, 0x64, 0x7C}},",
          "2602:   \"???\",\"Unspecified Property Set\",",
          "2603:   PropSet113_IDS",
          "2604:  },",
          "2605:  { {0x897B3694, 0xFE9E, 0x43E6, {0x80, 0x66, 0x26, 0x0F, 0x59, 0x0C, 0x01, 0x00}},",
          "2606:   \"???\",\"Unspecified Property Set\",",
          "2607:   PropSet114_IDS",
          "2608:  },",
          "2609:  { {0x8619A4B6, 0x9F4D, 0x4429, {0x8C, 0x0F, 0xB9, 0x96, 0xCA, 0x59, 0xE3, 0x35}},",
          "2610:   \"???\",\"Unspecified Property Set\",",
          "2611:   PropSet115_IDS",
          "2612:  },",
          "2613:  { {0xA26F4AFC, 0x7346, 0x4299, {0xBE, 0x47, 0xEB, 0x1A, 0xE6, 0x13, 0x13, 0x9F}},",
          "2614:   \"???\",\"Unspecified Property Set\",",
          "2615:   PropSet116_IDS",
          "2616:  },",
          "2617:  { {0xBC4E71CE, 0x17F9, 0x48D5, {0xBE, 0xE9, 0x02, 0x1D, 0xF0, 0xEA, 0x54, 0x09}},",
          "2618:   \"???\",\"Unspecified Property Set\",",
          "2619:   PropSet117_IDS",
          "2620:  },",
          "2621:  { {0x65A98875, 0x3C80, 0x40AB, {0xAB, 0xBC, 0xEF, 0xDA, 0xF7, 0x7D, 0xBE, 0xE2}},",
          "2622:   \"???\",\"Unspecified Property Set\",",
          "2623:   PropSet118_IDS",
          "2624:  },",
          "2625:  { {0x84D8F337, 0x981D, 0x44B3, {0x96, 0x15, 0xC7, 0x59, 0x6D, 0xBA, 0x17, 0xE3}},",
          "2626:   \"???\",\"Unspecified Property Set\",",
          "2627:   PropSet119_IDS",
          "2628:  },",
          "2629:  { {0xBE1A72C6, 0x9A1D, 0x46B7, {0xAF, 0xE7, 0xAF, 0xAF, 0x8C, 0xEF, 0x49, 0x99}},",
          "2630:   \"???\",\"Unspecified Property Set\",",
          "2631:   PropSet120_IDS",
          "2632:  },",
          "2633:  { {0x8F367200, 0xC270, 0x457C, {0xB1, 0xD4, 0xE0, 0x7C, 0x5B, 0xCD, 0x90, 0xC7}},",
          "2634:   \"???\",\"Unspecified Property Set\",",
          "2635:   PropSet121_IDS",
          "2636:  },",
          "2637:  { {0x428040AC, 0xA177, 0x4C8A, {0x97, 0x60, 0xF6, 0xF7, 0x61, 0x22, 0x7F, 0x9A}},",
          "2638:   \"???\",\"Unspecified Property Set\",",
          "2639:   PropSet122_IDS",
          "2640:  },",
          "2641:  { {0xA3B29791, 0x7713, 0x4E1D, {0xBB, 0x40, 0x17, 0xDB, 0x85, 0xF0, 0x18, 0x31}},",
          "2642:   \"???\",\"Unspecified Property Set\",",
          "2643:   PropSet123_IDS",
          "2644:  },",
          "2645:  { {0xBCEEE283, 0x35DF, 0x4D53, {0x82, 0x6A, 0xF3, 0x6A, 0x3E, 0xEF, 0xC6, 0xBE}},",
          "2646:   \"???\",\"Unspecified Property Set\",",
          "2647:   PropSet124_IDS",
          "2648:  },",
          "2649:  { {0x91EFF6F3, 0x2E27, 0x42CA, {0x93, 0x3E, 0x7C, 0x99, 0x9F, 0xBE, 0x31, 0x0B}},",
          "2650:   \"???\",\"Unspecified Property Set\",",
          "2651:   PropSet125_IDS",
          "2652:  },",
          "2653:  { {0x5CBF2787, 0x48CF, 0x4208, {0xB9, 0x0E, 0xEE, 0x5E, 0x5D, 0x42, 0x02, 0x94}},",
          "2654:   \"???\",\"Unspecified Property Set\",",
          "2655:   PropSet126_IDS",
          "2656:  },",
          "2657:  { {0x1B5439E7, 0xEBA1, 0x4AF8, {0xBD, 0xD7, 0x7A, 0xF1, 0xD4, 0x54, 0x94, 0x93}},",
          "2658:   \"???\",\"Unspecified Property Set\",",
          "2659:   PropSet127_IDS",
          "2660:  },",
          "2661:  { {0x08C7CC5F, 0x60F2, 0x4494, {0xAD, 0x75, 0x55, 0xE3, 0xE0, 0xB5, 0xAD, 0xD0}},",
          "2662:   \"???\",\"Unspecified Property Set\",",
          "2663:   PropSet128_IDS",
          "2664:  },",
          "2665:  { {0x7FE3AA27, 0x2648, 0x42F3, {0x89, 0xB0, 0x45, 0x4E, 0x5C, 0xB1, 0x50, 0xC3}},",
          "2666:   \"???\",\"Unspecified Property Set\",",
          "2667:   PropSet129_IDS",
          "2668:  },",
          "2669:  { {0xE53D799D, 0x0F3F, 0x466E, {0xB2, 0xFF, 0x74, 0x63, 0x4A, 0x3C, 0xB7, 0xA4}},",
          "2670:   \"???\",\"Unspecified Property Set\",",
          "2671:   PropSet130_IDS",
          "2672:  },",
          "2673:  { {0x4776CAFA, 0xBCE4, 0x4CB1, {0xA2, 0x3E, 0x26, 0x5E, 0x76, 0xD8, 0xEB, 0x11}},",
          "2674:   \"???\",\"Unspecified Property Set\",",
          "2675:   PropSet131_IDS",
          "2676:  },",
          "2677:  { {0x71B377D6, 0xE570, 0x425F, {0xA1, 0x70, 0x80, 0x9F, 0xAE, 0x73, 0xE5, 0x4E}},",
          "2678:   \"???\",\"Unspecified Property Set\",",
          "2679:   PropSet132_IDS",
          "2680:  },",
          "2681:  { {0x3143BF7C, 0x80A8, 0x4854, {0x88, 0x80, 0xE2, 0xE4, 0x01, 0x89, 0xBD, 0xD0}},",
          "2682:   \"???\",\"Unspecified Property Set\",",
          "2683:   PropSet133_IDS",
          "2684:  },",
          "2685:  { {0xA6744477, 0xC237, 0x475B, {0xA0, 0x75, 0x54, 0xF3, 0x44, 0x98, 0x29, 0x2A}},",
          "2686:   \"???\",\"Unspecified Property Set\",",
          "2687:   PropSet134_IDS",
          "2688:  },",
          "2689:  { {0xC9C34F84, 0x2241, 0x4401, {0xB6, 0x07, 0xBD, 0x20, 0xED, 0x75, 0xAE, 0x7F}},",
          "2690:   \"???\",\"Unspecified Property Set\",",
          "2691:   PropSet135_IDS",
          "2692:  },",
          "2693:  { {0xF8FA7FA3, 0xD12B, 0x4785, {0x8A, 0x4E, 0x69, 0x1A, 0x94, 0xF7, 0xA3, 0xE7}},",
          "2694:   \"???\",\"Unspecified Property Set\",",
          "2695:   PropSet136_IDS",
          "2696:  },",
          "2697:  { {0x7268AF55, 0x1CE4, 0x4F6E, {0xA4, 0x1F, 0xB6, 0xE4, 0xEF, 0x10, 0xE4, 0xA9}},",
          "2698:   \"???\",\"Unspecified Property Set\",",
          "2699:   PropSet137_IDS",
          "2700:  },",
          "2701:  { {0xE1D4A09E, 0xD758, 0x4CD1, {0xB6, 0xEC, 0x34, 0xA8, 0xB5, 0xA7, 0x3F, 0x80}},",
          "2702:   \"???\",\"Unspecified Property Set\",",
          "2703:   PropSet138_IDS",
          "2704:  },",
          "2705:  { {0xD7313FF1, 0xA77A, 0x401C, {0x8C, 0x99, 0x3D, 0xBD, 0xD6, 0x8A, 0xDD, 0x36}},",
          "2706:   \"???\",\"Unspecified Property Set\",",
          "2707:   PropSet139_IDS",
          "2708:  },",
          "2709:  { {0xF85BF840, 0xA925, 0x4BC2, {0xB0, 0xC4, 0x8E, 0x36, 0xB5, 0x98, 0x67, 0x9E}},",
          "2710:   \"???\",\"Unspecified Property Set\",",
          "2711:   PropSet140_IDS",
          "2712:  },",
          "2713:  { {0x668CDFA5, 0x7A1B, 0x4323, {0xAE, 0x4B, 0xE5, 0x27, 0x39, 0x3A, 0x1D, 0x81}},",
          "2714:   \"???\",\"Unspecified Property Set\",",
          "2715:   PropSet141_IDS",
          "2716:  },",
          "2717:  { {0xEE3D3D8A, 0x5381, 0x4CFA, {0xB1, 0x3B, 0xAA, 0xF6, 0x6B, 0x5F, 0x4E, 0xC9}},",
          "2718:   \"???\",\"Unspecified Property Set\",",
          "2719:   PropSet142_IDS",
          "2720:  },",
          "2721:  { {0xD0C7F054, 0x3F72, 0x4725, {0x85, 0x27, 0x12, 0x9A, 0x57, 0x7C, 0xB2, 0x69}},",
          "2722:   \"???\",\"Unspecified Property Set\",",
          "2723:   PropSet143_IDS",
          "2724:  },",
          "2725:  { {0x3C8CEE58, 0xD4F0, 0x4CF9, {0xB7, 0x56, 0x4E, 0x5D, 0x24, 0x44, 0x7B, 0xCD}},",
          "2726:   \"???\",\"Unspecified Property Set\",",
          "2727:   PropSet144_IDS",
          "2728:  },",
          "2729:  { {0x6E682923, 0x7F7B, 0x4F0C, {0xA3, 0x37, 0xCF, 0xCA, 0x29, 0x66, 0x87, 0xBF}},",
          "2730:   \"???\",\"Unspecified Property Set\",",
          "2731:   PropSet145_IDS",
          "2732:  },",
          "2733:  { {0xFD122953, 0xFA93, 0x4EF7, {0x92, 0xC3, 0x04, 0xC9, 0x46, 0xB2, 0xF7, 0xC8}},",
          "2734:   \"???\",\"Unspecified Property Set\",",
          "2735:   PropSet146_IDS",
          "2736:  },",
          "2737:  { {0x0BE1C8E7, 0x1981, 0x4676, {0xAE, 0x14, 0xFD, 0xD7, 0x8F, 0x05, 0xA6, 0xE7}},",
          "2738:   \"???\",\"Unspecified Property Set\",",
          "2739:   PropSet147_IDS",
          "2740:  },",
          "2741:  { {0xF1176DFE, 0x7138, 0x4640, {0x8B, 0x4C, 0xAE, 0x37, 0x5D, 0xC7, 0x0A, 0x6D}},",
          "2742:   \"???\",\"Unspecified Property Set\",",
          "2743:   PropSet148_IDS",
          "2744:  },",
          "2745:  { {0x95BEB1FC, 0x326D, 0x4644, {0xB3, 0x96, 0xCD, 0x3E, 0xD9, 0x0E, 0x6D, 0xDF}},",
          "2746:   \"???\",\"Unspecified Property Set\",",
          "2747:   PropSet149_IDS",
          "2748:  },",
          "2749:  { {0xDDD1460F, 0xC0BF, 0x4553, {0x8C, 0xE4, 0x10, 0x43, 0x3C, 0x90, 0x8F, 0xB0}},",
          "2750:   \"???\",\"Unspecified Property Set\",",
          "2751:   PropSet150_IDS",
          "2752:  },",
          "2753:  { {0x9B174B34, 0x40FF, 0x11D2, {0xA2, 0x7E, 0x00, 0xC0, 0x4F, 0xC3, 0x08, 0x71}},",
          "2754:   \"???\",\"Unspecified Property Set\",",
          "2755:   PropSet151_IDS",
          "2756:  },",
          "2757:  { {0x08A65AA1, 0xF4C9, 0x43DD, {0x9D, 0xDF, 0xA3, 0x3D, 0x8E, 0x7E, 0xAD, 0x85}},",
          "2758:   \"???\",\"Unspecified Property Set\",",
          "2759:   PropSet152_IDS",
          "2760:  },",
          "2761:  { {0x084D8A0A, 0xE6D5, 0x40DE, {0xBF, 0x1F, 0xC8, 0x82, 0x0E, 0x7C, 0x87, 0x7C}},",
          "2762:   \"???\",\"Unspecified Property Set\",",
          "2763:   PropSet153_IDS",
          "2764:  },",
          "2765:  { {0x841E4F90, 0xFF59, 0x4D16, {0x89, 0x47, 0xE8, 0x1B, 0xBF, 0xFA, 0xB3, 0x6D}},",
          "2766:   \"???\",\"Unspecified Property Set\",",
          "2767:   PropSet154_IDS",
          "2768:  },",
          "2769:  { {0xFC9F7306, 0xFF8F, 0x4D49, {0x9F, 0xB6, 0x3F, 0xFE, 0x5C, 0x09, 0x51, 0xEC}},",
          "2770:   \"???\",\"Unspecified Property Set\",",
          "2771:   PropSet155_IDS",
          "2772:  },",
          "2773:  { {0x53DA57CF, 0x62C0, 0x45C4, {0x81, 0xDE, 0x76, 0x10, 0xBC, 0xEF, 0xD7, 0xF5}},",
          "2774:   \"???\",\"Unspecified Property Set\",",
          "2775:   PropSet156_IDS",
          "2776:  },",
          "2777:  { {0xF8D3F6AC, 0x4874, 0x42CB, {0xBE, 0x59, 0xAB, 0x45, 0x4B, 0x30, 0x71, 0x6A}},",
          "2778:   \"???\",\"Unspecified Property Set\",",
          "2779:   PropSet157_IDS",
          "2780:  },",
          "2781:  { {0x4684FE97, 0x8765, 0x4842, {0x9C, 0x13, 0xF0, 0x06, 0x44, 0x7B, 0x17, 0x8C}},",
          "2782:   \"???\",\"Unspecified Property Set\",",
          "2783:   PropSet158_IDS",
          "2784:  },",
          "2785:  { {0xC449D5CB, 0x9EA4, 0x4809, {0x82, 0xE8, 0xAF, 0x9D, 0x59, 0xDE, 0xD6, 0xD1}},",
          "2786:   \"???\",\"Unspecified Property Set\",",
          "2787:   PropSet159_IDS",
          "2788:  },",
          "2789:  { {0x3F8472B5, 0xE0AF, 0x4DB2, {0x80, 0x71, 0xC5, 0x3F, 0xE7, 0x6A, 0xE7, 0xCE}},",
          "2790:   \"???\",\"Unspecified Property Set\",",
          "2791:   PropSet160_IDS",
          "2792:  },",
          "2793:  { {0x0CEF7D53, 0xFA64, 0x11D1, {0xA2, 0x03, 0x00, 0x00, 0xF8, 0x1F, 0xED, 0xEE}},",
          "2794:   \"???\",\"Unspecified Property Set\",",
          "2795:   PropSet161_IDS",
          "2796:  },",
          "2797:  { {0xFDF84370, 0x031A, 0x4ADD, {0x9E, 0x91, 0x0D, 0x77, 0x5F, 0x1C, 0x66, 0x05}},",
          "2798:   \"???\",\"Unspecified Property Set\",",
          "2799:   PropSet162_IDS",
          "2800:  },",
          "2801:  { {0x6D748DE2, 0x8D38, 0x4CC3, {0xAC, 0x60, 0xF0, 0x09, 0xB0, 0x57, 0xC5, 0x57}},",
          "2802:   \"???\",\"Unspecified Property Set\",",
          "2803:   PropSet163_IDS",
          "2804:  },",
          "2805:  { {0x2579E5D0, 0x1116, 0x4084, {0xBD, 0x9A, 0x9B, 0x4F, 0x7C, 0xB4, 0xDF, 0x5E}},",
          "2806:   \"???\",\"Unspecified Property Set\",",
          "2807:   PropSet164_IDS",
          "2808:  },",
          "2809:  { {0xC554493C, 0xC1F7, 0x40C1, {0xA7, 0x6C, 0xEF, 0x8C, 0x06, 0x14, 0x00, 0x3E}},",
          "2810:   \"???\",\"Unspecified Property Set\",",
          "2811:   PropSet165_IDS",
          "2812:  },",
          "2813:  { {0x0DA41CFA, 0xD224, 0x4A18, {0xAE, 0x2F, 0x59, 0x61, 0x58, 0xDB, 0x4B, 0x3A}},",
          "2814:   \"???\",\"Unspecified Property Set\",",
          "2815:   PropSet166_IDS",
          "2816:  },",
          "2817:  { {0xA82D9EE7, 0xCA67, 0x4312, {0x96, 0x5E, 0x22, 0x6B, 0xCE, 0xA8, 0x50, 0x23}},",
          "2818:   \"???\",\"Unspecified Property Set\",",
          "2819:   PropSet167_IDS",
          "2820:  },",
          "2821:  { {0x09329B74, 0x40A3, 0x4C68, {0xBF, 0x07, 0xAF, 0x9A, 0x57, 0x2F, 0x60, 0x7C}},",
          "2822:   \"???\",\"Unspecified Property Set\",",
          "2823:   PropSet168_IDS",
          "2824:  },",
          "2825:  { {0x9A93244D, 0xA7AD, 0x4FF8, {0x9B, 0x99, 0x45, 0xEE, 0x4C, 0xC0, 0x9A, 0xF6}},",
          "2826:   \"???\",\"Unspecified Property Set\",",
          "2827:   PropSet169_IDS",
          "2828:  },",
          "2829:  { {0xF04BEF95, 0xC585, 0x4197, {0xA2, 0xB7, 0xDF, 0x46, 0xFD, 0xC9, 0xEE, 0x6D}},",
          "2830:   \"???\",\"Unspecified Property Set\",",
          "2831:   PropSet170_IDS",
          "2832:  },",
          "2833:  { {0x59DDE9F2, 0x5253, 0x40EA, {0x9A, 0x8B, 0x47, 0x9E, 0x96, 0xC6, 0x24, 0x9A}},",
          "2834:   \"???\",\"Unspecified Property Set\",",
          "2835:   PropSet171_IDS",
          "2836:  },",
          "2837:  { {0x6444048F, 0x4C8B, 0x11D1, {0x8B, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03}},",
          "2838:   \"???\",\"Unspecified Property Set\",",
          "2839:   PropSet172_IDS",
          "2840:  },",
          "2841:  { {0x9A9BC088, 0x4F6D, 0x469E, {0x99, 0x19, 0xE7, 0x05, 0x41, 0x20, 0x40, 0xF9}},",
          "2842:   \"???\",\"Unspecified Property Set\",",
          "2843:   PropSet173_IDS",
          "2844:  },",
          "2845:  { {0x6336B95E, 0xC7A7, 0x426D, {0x86, 0xFD, 0x7A, 0xE3, 0xD3, 0x9C, 0x84, 0xB4}},",
          "2846:   \"???\",\"Unspecified Property Set\",",
          "2847:   PropSet174_IDS",
          "2848:  },",
          "2849:  { {0xC06238B2, 0x0BF9, 0x4279, {0xA7, 0x23, 0x25, 0x85, 0x67, 0x15, 0xCB, 0x9D}},",
          "2850:   \"???\",\"Unspecified Property Set\",",
          "2851:   PropSet175_IDS",
          "2852:  },",
          "2853:  { {0xEC0B4191, 0xAB0B, 0x4C66, {0x90, 0xB6, 0xC6, 0x63, 0x7C, 0xDE, 0xBB, 0xAB}},",
          "2854:   \"???\",\"Unspecified Property Set\",",
          "2855:   PropSet176_IDS",
          "2856:  },",
          "2857:  { {0x660E04D6, 0x81AB, 0x4977, {0xA0, 0x9F, 0x82, 0x31, 0x31, 0x13, 0xAB, 0x26}},",
          "2858:   \"???\",\"Unspecified Property Set\",",
          "2859:   PropSet177_IDS",
          "2860:  },",
          "2861:  { {0xDC54FD2E, 0x189D, 0x4871, {0xAA, 0x01, 0x08, 0xC2, 0xF5, 0x7A, 0x4A, 0xBC}},",
          "2862:   \"???\",\"Unspecified Property Set\",",
          "2863:   PropSet178_IDS",
          "2864:  },",
          "2865:  { {0xCD102C9C, 0x5540, 0x4A88, {0xA6, 0xF6, 0x64, 0xE4, 0x98, 0x1C, 0x8C, 0xD1}},",
          "2866:   \"???\",\"Unspecified Property Set\",",
          "2867:   PropSet179_IDS",
          "2868:  },",
          "2869:  { {0x1F856A9F, 0x6900, 0x4ABA, {0x95, 0x05, 0x2D, 0x5F, 0x1B, 0x4D, 0x66, 0xCB}},",
          "2870:   \"???\",\"Unspecified Property Set\",",
          "2871:   PropSet180_IDS",
          "2872:  },",
          "2873:  { {0x90197CA7, 0xFD8F, 0x4E8C, {0x9D, 0xA3, 0xB5, 0x7E, 0x1E, 0x60, 0x92, 0x95}},",
          "2874:   \"???\",\"Unspecified Property Set\",",
          "2875:   PropSet181_IDS",
          "2876:  },",
          "2877:  { {0xF334115E, 0xDA1B, 0x4509, {0x9B, 0x3D, 0x11, 0x95, 0x04, 0xDC, 0x7A, 0xBB}},",
          "2878:   \"???\",\"Unspecified Property Set\",",
          "2879:   PropSet182_IDS",
          "2880:  },",
          "2881:  { {0xBF53D1C3, 0x49E0, 0x4F7F, {0x85, 0x67, 0x5A, 0x82, 0x1D, 0x8A, 0xC5, 0x42}},",
          "2882:   \"???\",\"Unspecified Property Set\",",
          "2883:   PropSet183_IDS",
          "2884:  },",
          "2885:  { {0xC75FAA05, 0x96FD, 0x49E7, {0x9C, 0xB4, 0x9F, 0x60, 0x10, 0x82, 0xD5, 0x53}},",
          "2886:   \"???\",\"Unspecified Property Set\",",
          "2887:   PropSet184_IDS",
          "2888:  },",
          "2889:  { {0x2E4B640D, 0x5019, 0x46D8, {0x88, 0x81, 0x55, 0x41, 0x4C, 0xC5, 0xCA, 0xA0}},",
          "2890:   \"???\",\"Unspecified Property Set\",",
          "2891:   PropSet185_IDS",
          "2892:  },",
          "2893:  { {0x6B8B68F6, 0x200B, 0x47EA, {0x8D, 0x25, 0xD8, 0x05, 0x0F, 0x57, 0x33, 0x9F}},",
          "2894:   \"???\",\"Unspecified Property Set\",",
          "2895:   PropSet186_IDS",
          "2896:  },",
          "2897:  { {0x2D152B40, 0xCA39, 0x40DB, {0xB2, 0xCC, 0x57, 0x37, 0x25, 0xB2, 0xFE, 0xC5}},",
          "2898:   \"???\",\"Unspecified Property Set\",",
          "2899:   PropSet187_IDS",
          "2900:  },",
          "2901:  { {0x1E005EE6, 0xBF27, 0x428B, {0xB0, 0x1C, 0x79, 0x67, 0x6A, 0xCD, 0x28, 0x70}},",
          "2902:   \"???\",\"Unspecified Property Set\",",
          "2903:   PropSet188_IDS",
          "2904:  },",
          "2905:  { {0xD6304E01, 0xF8F5, 0x4F45, {0x8B, 0x15, 0xD0, 0x24, 0xA6, 0x29, 0x67, 0x89}},",
          "2906:   \"???\",\"Unspecified Property Set\",",
          "2907:   PropSet189_IDS",
          "2908:  },",
          "2909:  { {0x402B5934, 0xEC5A, 0x48C3, {0x93, 0xE6, 0x85, 0xE8, 0x6A, 0x2D, 0x93, 0x4E}},",
          "2910:   \"???\",\"Unspecified Property Set\",",
          "2911:   PropSet190_IDS",
          "2912:  },",
          "2913:  { {0x9AEBAE7A, 0x9644, 0x487D, {0xA9, 0x2C, 0x65, 0x75, 0x85, 0xED, 0x75, 0x1A}},",
          "2914:   \"???\",\"Unspecified Property Set\",",
          "2915:   PropSet191_IDS",
          "2916:  },",
          "2917:  { {0x63C25B20, 0x96BE, 0x488F, {0x87, 0x88, 0xC0, 0x9C, 0x40, 0x7A, 0xD8, 0x12}},",
          "2918:   \"???\",\"Unspecified Property Set\",",
          "2919:   PropSet192_IDS",
          "2920:  },",
          "2921:  { {0x48FD6EC8, 0x8A12, 0x4CDF, {0xA0, 0x3E, 0x4E, 0xC5, 0xA5, 0x11, 0xED, 0xDE}},",
          "2922:   \"???\",\"Unspecified Property Set\",",
          "2923:   PropSet193_IDS",
          "2924:  },",
          "2925:  { {0x64440491, 0x4C8B, 0x11D1, {0x8B, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03}},",
          "2926:   \"???\",\"Unspecified Property Set\",",
          "2927:   PropSet194_IDS",
          "2928:  },",
          "2929:  { {0xC0AC206A, 0x827E, 0x4650, {0x95, 0xAE, 0x77, 0xE2, 0xBB, 0x74, 0xFC, 0xC9}},",
          "2930:   \"???\",\"Unspecified Property Set\",",
          "2931:   PropSet195_IDS",
          "2932:  }",
          "2933: };",
          "2935: static struct GuidPropertySet *GuidPropertySet_find_guid(const e_guid_t *guid)",
          "2936: {",
          "2937:  unsigned i;",
          "2938:  for (i=0; i<array_length(GuidPropertySet); i++) {",
          "2939:   if (guid_cmp(&GuidPropertySet[i].guid, guid) == 0) {",
          "2940:    return &GuidPropertySet[i];",
          "2941:   }",
          "2942:  }",
          "2943:  return NULL;",
          "2944: }",
          "2946: static void get_name_from_fullpropspec(struct CFullPropSpec *v, char *out, int bufsize)",
          "2947: {",
          "2948:  struct GuidPropertySet *pset = GuidPropertySet_find_guid(&v->guid);",
          "2949:  const char *id_str, *guid_str;",
          "2950:  char *dest = out;",
          "2951:  id_str = pset ? try_val_to_str(v->u.propid, pset->id_map) : NULL;",
          "2953:  if (id_str) {",
          "2954:   g_snprintf(dest, bufsize, \"%s\", id_str);",
          "2955:  } else {",
          "2956:   guid_str = guids_get_guid_name(&v->guid);",
          "2957:   if (guid_str) {",
          "2958:    g_snprintf(dest, bufsize, \"\\\"%s\\\"\", guid_str);",
          "2959:   } else {",
          "2960:    guid_str = guid_to_str(wmem_packet_scope(), &v->guid);",
          "2961:    g_snprintf(dest, bufsize, \"{%s}\", guid_str);",
          "2962:   }",
          "2963:   if (v->kind == PRSPEC_LPWSTR) {",
          "2964:    g_snprintf(dest, bufsize, \"%s \\\"%s\\\"\", guid_str, v->u.name);",
          "2965:   } else if (v->kind == PRSPEC_PROPID) {",
          "2966:    g_snprintf(dest, bufsize, \"%s 0x%08x\", guid_str, v->u.propid);",
          "2967:   } else {",
          "2968:    g_snprintf(dest, bufsize, \"%s <INVALID>\", dest);",
          "2969:   }",
          "2970:  }",
          "2971: }",
          "2974: static int parse_uin32_array(tvbuff_t *tvb, int offset, proto_tree *tree, guint32 count, const char *fmt, ...)",
          "2975: {",
          "2976:  guint32 v, i;",
          "2977:  proto_item *item;",
          "2978:  const char *txt;",
          "2979:  va_list ap;",
          "2981:  va_start(ap, fmt);",
          "2982:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "2983:  va_end(ap);",
          "2984:  proto_tree_add_subtree(tree, tvb, offset, count * 4, ett_mswsp_uin32_array, &item, txt);",
          "2985:  proto_item_append_text(item, \" count %u [\", count);",
          "2986:  for (i=0; i<count; i++) {",
          "2987:   v = tvb_get_letohl(tvb, offset);",
          "2988:   offset += 4;",
          "2989:   if (i>0) {",
          "2990:    proto_item_append_text(item, \",%u\", v);",
          "2991:   } else {",
          "2992:    proto_item_append_text(item, \"%u\", v);",
          "2993:   }",
          "2994:  }",
          "2995:  proto_item_append_text(item, \"]\");",
          "2996:  return offset;",
          "2997: }",
          "2999: static int parse_padding(tvbuff_t *tvb, int offset, int alignment, proto_tree *pad_tree, const char *fmt, ...)",
          "3000: {",
          "3001:  if (offset % alignment) {",
          "3002:   const int padding = alignment - (offset % alignment);",
          "3003:   const char *txt;",
          "3004:   va_list ap;",
          "3005:   proto_item *ti;",
          "3006:   va_start(ap, fmt);",
          "3007:   txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "3008:   proto_tree_add_subtree(pad_tree, tvb, offset, padding, ett_mswsp_msg_padding, &ti, txt);",
          "3009:   va_end(ap);",
          "3011:   proto_item_append_text(ti, \" (%d)\", padding);",
          "3012:   offset += padding;",
          "3013:  }",
          "3014:  DISSECTOR_ASSERT((offset % alignment) == 0);",
          "3015:  return offset;",
          "3016: }",
          "3018: static int parse_guid(tvbuff_t *tvb, int offset, proto_tree *tree, e_guid_t *guid, const char *text)",
          "3019: {",
          "3020:  const char *guid_str, *name, *bytes;",
          "3021:  proto_tree *tr;",
          "3023:  tvb_get_letohguid(tvb, offset, guid);",
          "3024:  guid_str =  guid_to_str(wmem_packet_scope(), guid);",
          "3025:  name = guids_get_guid_name(guid);",
          "3027:  tr = proto_tree_add_subtree_format(tree, tvb, offset, 16, ett_GUID, NULL, \"%s: %s {%s}\", text, name ? name : \"\", guid_str);",
          "3030:  proto_tree_add_item(tr, hf_mswsp_guid_time_low, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "3031:  offset += 4;",
          "3032:  proto_tree_add_item(tr, hf_mswsp_guid_time_mid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3033:  offset += 2;",
          "3034:  proto_tree_add_item(tr, hf_mswsp_guid_time_high, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3035:  offset += 2;",
          "3036:  proto_tree_add_item(tr, hf_mswsp_guid_time_clock_hi, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "3037:  offset += 1;",
          "3038:  proto_tree_add_item(tr, hf_mswsp_guid_time_clock_low, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "3039:  offset += 1;",
          "3040:  bytes = bytestring_to_str(wmem_packet_scope(), &guid->data4[2], 6, ':');",
          "3041:  proto_tree_add_string(tr, hf_mswsp_guid_node, tvb, offset, 6, bytes);",
          "3043:  offset += 6;",
          "3045:  return offset;",
          "3046: }",
          "3049: static int parse_lcid(tvbuff_t *tvb, int offset, proto_tree *parent_tree, const char *text)",
          "3050: {",
          "3051:  proto_item *item;",
          "3052:  proto_tree *tree;",
          "3053:  guint32 lcid;",
          "3055:  lcid = tvb_get_letohl(tvb, offset);",
          "3056:  item = proto_tree_add_uint_format(parent_tree, hf_mswsp_lcid, tvb, offset, 4, lcid, \"%s: 0x%x\", text, lcid);",
          "3057:  tree = proto_item_add_subtree(item, ett_LCID);",
          "3059:  proto_tree_add_uint(tree, hf_mswsp_lcid_langid, tvb, offset + 2, 2, lcid);",
          "3060:  proto_tree_add_uint(tree, hf_mswsp_lcid_sortid, tvb, offset + 1, 1, (lcid >> 16) & 0xF);",
          "3061:  offset += 4;",
          "3062:  return offset;",
          "3063: }",
          "3067: static int parse_CBaseStorageVariant(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CBaseStorageVariant *value, const char *text);",
          "3070: static int parse_CFullPropSpec(tvbuff_t *tvb, int offset, proto_tree *tree, proto_tree *pad_tree, struct CFullPropSpec *v, const char *fmt, ...);",
          "3073: static int parse_CContentRestriction(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CContentRestriction *v, const char *fmt, ...);",
          "3076: static int parse_CNatLanguageRestriction(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CNatLanguageRestriction *v, const char *fmt, ...);",
          "3079: static int parse_CNodeRestriction(tvbuff_t *tvb, int offset, proto_tree *tree, proto_tree *pad_tree, struct CNodeRestriction *v, const char* fmt, ...);",
          "3082: static int parse_CPropertyRestriction(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CPropertyRestriction *v, const char *fmt, ...);",
          "3085: static int parse_CReuseWhere(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree _U_, struct CReuseWhere *v, const char *fmt, ...);",
          "3088: static int parse_CSort(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree _U_, const char *fmt, ...);",
          "3091: static int parse_CCoercionRestriction(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CCoercionRestriction *v, const char *fmt, ...);",
          "3093: static int parse_CRestrictionArray(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3096: static int parse_CRestriction(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CRestriction *v, const char *fmt, ...);",
          "3099: static int parse_CColumnSet(tvbuff_t *tvb, int offset, proto_tree *tree, const char *fmt, ...);",
          "3102: static int parse_CCategorizationSpec(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3105: static int parse_CCategSpec(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3108: static int parse_CRangeCategSpec(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3111: static int parse_RANGEBOUNDARY(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3114: static int parse_CAggregSet(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3117: static int parse_CAggregSpec(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3120: static int parse_CSortAggregSet(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3123: static int parse_CAggregSortKey(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3126: static int parse_CInGroupSortAggregSets(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3129: static int parse_CInGroupSortAggregSet(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3132: static int parse_CDbColId(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *text);",
          "3135: static int parse_CDbProp(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct GuidPropertySet *propset, const char *fmt, ...);",
          "3138: static int parse_CDbPropSet(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3141: static int parse_CPidMapper(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3144: static int parse_CColumnGroupArray(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3147: static int parse_CColumnGroup(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3150: static int parse_CRowsetProperties(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3153: static int parse_CSortSet(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...);",
          "3156: static int parse_CTableColumn(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CTableColumn *col, const char *fmt, ...);",
          "3160: 2.2.1.4 CInternalPropertyRestriction",
          "3161: 2.2.1.9 CScopeRestriction",
          "3162: 2.2.1.11 CVectorRestriction",
          "3163: 2.2.1.13 CRelDocRestriction",
          "3164: 2.2.1.14 CProbRestriction",
          "3165: 2.2.1.15 CFeedbackRestriction",
          "3166: 2.2.1.19 CCategorizationSet",
          "3167: 2.2.1.45 SERIALIZEDPROPERTYVALUE",
          "3168: 2.2.1.46 CCompletionCategSp",
          "3171: static int parse_CSort(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree _U_, const char *fmt, ...)",
          "3172: {",
          "3173:  guint32 col, ord, ind;",
          "3175:  proto_item *item;",
          "3176:  proto_tree *tree;",
          "3177:  const char *txt;",
          "3178:  va_list ap;",
          "3180:  va_start(ap, fmt);",
          "3181:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "3182:  va_end(ap);",
          "3183:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CSort, &item, txt);",
          "3185:  col = tvb_get_letohl(tvb, offset);",
          "3186:  proto_tree_add_uint(tree, hf_mswsp_cscort_column, tvb, offset, 4, col);",
          "3187:  offset += 4;",
          "3189:  ord = tvb_get_letohl(tvb, offset);",
          "3190:  proto_tree_add_uint(tree, hf_mswsp_cscort_order, tvb, offset, 4, ord);",
          "3191:  offset += 4;",
          "3193:  ind = tvb_get_letohl(tvb, offset);",
          "3194:  proto_tree_add_uint(tree, hf_mswsp_cscort_individual, tvb, offset, 4, ind);",
          "3195:  offset += 4;",
          "3197:  offset = parse_lcid(tvb, offset, tree, \"lcid\");",
          "3199:  proto_item_set_end(item, tvb, offset);",
          "3200:  return offset;",
          "3201: }",
          "3203: static int parse_CSortSet(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "3204: {",
          "3205:  guint32 count, i;",
          "3207:  proto_item *item;",
          "3208:  proto_tree *tree;",
          "3209:  const char *txt;",
          "3210:  va_list ap;",
          "3212:  va_start(ap, fmt);",
          "3213:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "3214:  va_end(ap);",
          "3215:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CSortSet, &item, txt);",
          "3217:  count = tvb_get_letohl(tvb, offset);",
          "3218:  proto_tree_add_uint(tree, hf_mswsp_cscortset_count, tvb, offset, 4, count);",
          "3219:  offset += 4;",
          "3221:  for (i=0; i<count; i++) {",
          "3222:   offset = parse_padding(tvb, offset, 4, tree, \"padding_sortArray[%u]\", i);",
          "3223:   offset = parse_CSort(tvb, offset, tree, pad_tree, \"sortArray[%u]\", i);",
          "3224:  }",
          "3226:  proto_item_set_end(item, tvb, offset);",
          "3227:  return offset;",
          "3228: }",
          "3230: static int parse_CTableColumn(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CTableColumn *col, const char *fmt, ...)",
          "3231: {",
          "3232:  static const value_string DBAGGTTYPE[] = {",
          "3233:   {0x0, \"DBAGGTTYPE_BYNONE\"},",
          "3234:   {0x1, \"DBAGGTTYPE_SUM\"},",
          "3235:   {0x2, \"DBAGGTTYPE_MAX\"},",
          "3236:   {0x3, \"DBAGGTTYPE_MIN\"},",
          "3237:   {0x4, \"DBAGGTTYPE_AVG\"},",
          "3238:   {0x5, \"DBAGGTTYPE_COUNT\"},",
          "3239:   {0x6, \"DBAGGTTYPE_CHILDCOUNT\"},",
          "3240:   {0x7, \"DBAGGTTYPE_BYFREQ\"},",
          "3241:   {0x8, \"DBAGGTTYPE_FIRST\"},",
          "3242:   {0x9, \"DBAGGTTYPE_DATERANGE\"},",
          "3243:   {0xA, \"DBAGGTTYPE_REPRESENTATIVEOF\"},",
          "3244:   {0xB, \"DBAGGTTYPE_EDITDISTANCE\"},",
          "3245:   {0, NULL}",
          "3246:  };",
          "3248:  proto_item *item;",
          "3249:  proto_tree *tree;",
          "3250:  va_list ap;",
          "3251:  struct vtype_data *type;",
          "3252:  enum vType vtype_val = VT_EMPTY;",
          "3253:  enum vType vtype_valhi = VT_EMPTY;",
          "3254:  struct CFullPropSpec v;",
          "3255:  const char *txt;",
          "3256:  guint8 used;",
          "3258:  const char *modifier = \"\";",
          "3259:  va_start(ap, fmt);",
          "3260:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "3261:  va_end(ap);",
          "3262:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CTableColumn, &item, txt);",
          "3264:  offset = parse_CFullPropSpec(tvb, offset, tree, pad_tree, &v, \"PropSpec\");",
          "3265:  get_name_from_fullpropspec(&v, col->name, PROP_LENGTH);",
          "3266:  col->vtype = tvb_get_letohl(tvb, offset);",
          "3267:  vtype_val = (enum vType)col->vtype;",
          "3268:  vtype_valhi = (enum vType)(col->vtype & 0xFF00);",
          "3269:  if (vtype_valhi) {",
          "3270:   if (vtype_valhi == VT_VECTOR) {",
          "3271:    modifier = \"|VT_VECTOR\";",
          "3272:   } else if (vtype_valhi == VT_ARRAY) {",
          "3273:    modifier = \"|VT_ARRAY\";",
          "3274:   } else {",
          "3275:    modifier = \"|(Unknown, possibly error)\";",
          "3276:   }",
          "3277:  }",
          "3278:  type = vType_get_type(vtype_val);",
          "3279:  DISSECTOR_ASSERT(type != NULL);",
          "3280:  proto_tree_add_string_format_value(tree, hf_mswsp_ctablecolumn_vtype, tvb, offset, 4, type->str, \"%s%s\", type->str, modifier);",
          "3281:  offset += 4;",
          "3283:  used = tvb_get_guint8(tvb, offset);",
          "3284:  col->aggregateused = used;",
          "3285:  proto_tree_add_uint(tree, hf_mswsp_ctablecolumn_aggused, tvb, offset, 1, used);",
          "3286:  offset += 1;",
          "3288:  if (used) {",
          "3289:   col->aggregatetype = tvb_get_guint8(tvb, offset);",
          "3290:   proto_tree_add_string(tree, hf_mswsp_ctablecolumn_aggtype, tvb, offset, 1, val_to_str(col->aggregatetype, DBAGGTTYPE, \"(Unknown: 0x%x)\"));",
          "3291:   offset += 1;",
          "3292:  }",
          "3293:  col->valueused = tvb_get_guint8(tvb, offset);",
          "3294:  used = col->valueused;",
          "3295:  proto_tree_add_uint(tree, hf_mswsp_ctablecolumn_valused, tvb, offset, 1, used);",
          "3296:  offset += 1;",
          "3298:  if (used) {",
          "3299:   offset = parse_padding(tvb, offset, 2, pad_tree, \"padding_Value\");",
          "3301:   col->valueoffset = tvb_get_letohs(tvb, offset);",
          "3302:   proto_tree_add_uint(tree, hf_mswsp_ctablecolumn_valoffset, tvb, offset, 2,  col->valueoffset);",
          "3303:   offset += 2;",
          "3305:   col->valuesize = tvb_get_letohs(tvb, offset);",
          "3306:   proto_tree_add_uint(tree, hf_mswsp_ctablecolumn_valsize, tvb, offset, 2, col->valuesize);",
          "3307:   offset += 2;",
          "3308:  }",
          "3310:  used = tvb_get_guint8(tvb, offset);",
          "3311:  col->statusused = used;",
          "3312:  proto_tree_add_uint(tree, hf_mswsp_ctablecolumn_statused, tvb, offset, 2, used);",
          "3313:  offset += 1;",
          "3315:  if (used) {",
          "3316:   offset = parse_padding(tvb, offset, 2, pad_tree, \"padding_Status\");",
          "3318:   col->statusoffset = tvb_get_letohs(tvb, offset);",
          "3319:   proto_tree_add_uint(tree, hf_mswsp_ctablecolumn_statoffset, tvb, offset, 2, col->statusoffset);",
          "3320:   offset += 2;",
          "3321:  }",
          "3323:  used = tvb_get_guint8(tvb, offset);",
          "3324:  proto_tree_add_uint(tree, hf_mswsp_ctablecolumn_lenused, tvb, offset, 2, used);",
          "3325:  col->lengthused = used;",
          "3326:  offset += 1;",
          "3328:  if (used) {",
          "3329:   offset = parse_padding(tvb, offset, 2, pad_tree, \"padding_Lenght\");",
          "3331:   col->lengthoffset = tvb_get_letohs(tvb, offset);",
          "3332:   proto_tree_add_uint(tree, hf_mswsp_ctablecolumn_lenoffset, tvb, offset, 2, col->lengthoffset);",
          "3333:   offset += 2;",
          "3334:  }",
          "3336:  proto_item_set_end(item, tvb, offset);",
          "3337:  return offset;",
          "3338: }",
          "3340: static int parse_PRSPEC_Kind(tvbuff_t *tvb, int offset, proto_tree *tree, enum PRSPEC_Kind *prspec)",
          "3341: {",
          "3342:  static const value_string KIND[] = {",
          "3343:   {0, \"PRSPEC_LPWSTR\"},",
          "3344:   {1, \"PRSPEC_PROPID\"},",
          "3345:   {0, NULL}",
          "3346:  };",
          "3348:  gint32 kind = tvb_get_letohl(tvb, offset);",
          "3349:  DISSECTOR_ASSERT(kind < (PRSPEC_PROPID + 1));",
          "3350:  if (kind) {",
          "3352:  } else {",
          "3354:  }",
          "3355:  proto_tree_add_string(tree, hf_mswsp_cfullpropspec_kind, tvb, offset, 4, val_to_str(*prspec, KIND, \"(Unknown: 0x%x)\"));",
          "3356:  offset += 4;",
          "3357:  return offset;",
          "3358: }",
          "3360: static int parse_CFullPropSpec(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CFullPropSpec *v, const char *fmt, ...)",
          "3361: {",
          "3362:  struct GuidPropertySet *pset;",
          "3363:  const char *id_str, *guid_str, *txt;",
          "3365:  proto_item *item;",
          "3366:  proto_tree *tree;",
          "3367:  va_list ap;",
          "3369:  va_start(ap, fmt);",
          "3370:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "3371:  va_end(ap);",
          "3372:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CFullPropSpec, &item, txt);",
          "3374:  offset = parse_padding(tvb, offset, 8, pad_tree, \"paddingPropSet\");",
          "3376:  offset = parse_guid(tvb, offset, tree, &v->guid, \"GUID\");",
          "3377:  pset = GuidPropertySet_find_guid(&v->guid);",
          "3379:  offset = parse_PRSPEC_Kind(tvb, offset, tree, &v->kind);",
          "3381:  v->u.propid = tvb_get_letohl(tvb, offset);",
          "3382:  proto_tree_add_uint(tree, hf_mswsp_cfullpropspec_propid, tvb, offset, 4, v->u.propid);",
          "3383:  offset += 4;",
          "3385:  if (v->kind == PRSPEC_LPWSTR) {",
          "3386:   int len = 2*v->u.propid;",
          "3387:   v->u.name = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len, ENC_LITTLE_ENDIAN | ENC_UCS_2);",
          "3388:   proto_tree_add_string(tree, hf_mswsp_cfullpropspec_propname, tvb, offset, len, v->u.name);",
          "3389:   offset += len;",
          "3390:  }",
          "3392:  id_str = pset ? try_val_to_str(v->u.propid, pset->id_map) : NULL;",
          "3394:  if (id_str) {",
          "3395:   proto_item_append_text(item, \": %s\", id_str);",
          "3396:  } else {",
          "3397:   guid_str = guids_get_guid_name(&v->guid);",
          "3398:   if (guid_str) {",
          "3399:    proto_item_append_text(item, \": \\\"%s\\\"\", guid_str);",
          "3400:   } else {",
          "3401:    guid_str = guid_to_str(wmem_packet_scope(), &v->guid);",
          "3402:    proto_item_append_text(item, \": {%s}\", guid_str);",
          "3403:   }",
          "3405:   if (v->kind == PRSPEC_LPWSTR) {",
          "3406:    proto_item_append_text(item, \" \\\"%s\\\"\", v->u.name);",
          "3407:   } else if (v->kind == PRSPEC_PROPID) {",
          "3408:    proto_item_append_text(item, \" 0x%08x\", v->u.propid);",
          "3409:   } else {",
          "3410:    proto_item_append_text(item, \" <INVALID>\");",
          "3411:   }",
          "3412:  }",
          "3414:  proto_item_set_end(item, tvb, offset);",
          "3415:  return offset;",
          "3416: }",
          "3420: static const value_string PR_VALS[] = {",
          "3421:  {PRLT, \"PRLT\"},",
          "3422:  {PRLE, \"PRLE\"},",
          "3423:  {PRGT, \"PRGT\"},",
          "3424:  {PRGE, \"PRGE\"},",
          "3425:  {PREQ, \"PREQ\"},",
          "3426:  {PRNE, \"PRNE\"},",
          "3427:  {PRRE, \"PRRE\"},",
          "3428:  {PRAllBits, \"PRAllBits\"},",
          "3429:  {PRSomeBits, \"PRSomeBits\"},",
          "3430:  {PRAll, \"PRAll\"},",
          "3431:  {PRAny, \"PRAny\"},",
          "3432:  {0, NULL}",
          "3433: };",
          "3435: static int parse_relop(tvbuff_t *tvb, int offset,  proto_tree *tree, guint32 *relop, const char **str)",
          "3436: {",
          "3437:  const char *str1 = NULL, *str2 = NULL;",
          "3438:  guint32 tmp = tvb_get_letohl(tvb, offset);",
          "3439:  guint32 modifier = (tmp & 0xF00);",
          "3440:  DISSECTOR_ASSERT((tmp & 0xf) < PRSomeBits +1);",
          "3442:  switch(tmp & 0xf) {",
          "3443:   case PRLT:",
          "3445:    break;",
          "3446:   case PRLE:",
          "3448:    break;",
          "3449:   case PRGT:",
          "3451:    break;",
          "3452:   case PRGE:",
          "3454:    break;",
          "3455:   case PREQ:",
          "3457:    break;",
          "3458:   case PRNE:",
          "3460:    break;",
          "3461:   case PRRE:",
          "3463:    break;",
          "3464:   case PRAllBits:",
          "3466:    break;",
          "3467:   case PRSomeBits:",
          "3469:    break;",
          "3470:   default:",
          "3471:    break;",
          "3472:  }",
          "3474:  str2 = val_to_str(*relop, PR_VALS, \"0x%04x\");",
          "3476:  if (modifier) {",
          "3477:   switch (modifier) {",
          "3478:    case PRAll:",
          "3480:     break;",
          "3481:    case PRAny:",
          "3483:     break;",
          "3484:    default:",
          "3485:     DISSECTOR_ASSERT(false);",
          "3486:     break;",
          "3487:   }",
          "3488:   str1 = try_val_to_str((modifier), PR_VALS);",
          "3489:   if (str1) {",
          "3490:    str1 = wmem_strdup_printf(wmem_packet_scope(), \"%s | \", str1);",
          "3491:    str2 = wmem_strdup_printf(wmem_packet_scope(), \"%s%s\", str1, str2);",
          "3492:   }",
          "3493:  }",
          "3494:  proto_tree_add_string_format_value(tree, hf_mswsp_cproprestrict_relop, tvb, offset, 4, str2, \"%s (0x%04x)\", str2[0]=='\\0' ? \"\" : str2, *relop);",
          "3496:  if (str) {",
          "3498:  }",
          "3499:  return offset + 4;",
          "3500: }",
          "3501: static int parse_CPropertyRestriction(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CPropertyRestriction *v, const char *fmt, ...)",
          "3502: {",
          "3503:  proto_tree *tree;",
          "3504:  proto_item *item;",
          "3505:  const char *txt, *str = NULL;",
          "3506:  va_list ap;",
          "3508:  va_start(ap, fmt);",
          "3509:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "3510:  va_end(ap);",
          "3512:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CPropertyRestriction, &item, txt);",
          "3514:  offset = parse_relop(tvb, offset, tree, &v->relop, &str);",
          "3515:  proto_item_append_text(item, \" Op: %s\", str);",
          "3517:  offset = parse_CFullPropSpec(tvb, offset, tree, pad_tree, &v->property, \"Property\");",
          "3519:  offset = parse_CBaseStorageVariant(tvb, offset, tree, pad_tree, &v->prval, \"prval\");",
          "3521:  offset = parse_padding(tvb, offset, 4, pad_tree, \"padding_lcid\");",
          "3523:  v->lcid = tvb_get_letohl(tvb, offset);",
          "3524:  offset = parse_lcid(tvb, offset, tree, \"lcid\");",
          "3526:  proto_item_set_end(item, tvb, offset);",
          "3528:  return offset;",
          "3529: }",
          "3531: static int parse_CCoercionRestriction(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CCoercionRestriction *v, const char *fmt, ...)",
          "3532: {",
          "3533:  proto_tree *tree;",
          "3534:  proto_item *item;",
          "3535:  const char *txt;",
          "3536:  va_list ap;",
          "3538:  va_start(ap, fmt);",
          "3539:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "3540:  va_end(ap);",
          "3542:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CCoercionRestriction, &item, txt);",
          "3544:  v->value = tvb_get_letohieee_float(tvb, offset);",
          "3545:  proto_tree_add_float(tree, hf_mswsp_ccoercerestrict_value, tvb, offset, 4, v->value);",
          "3547:  offset += 4;",
          "3549:  offset = parse_CRestriction(tvb, offset, tree, pad_tree, &v->child, \"child\");",
          "3551:  proto_item_set_end(item, tvb, offset);",
          "3552:  return offset;",
          "3553: }",
          "3555: static int parse_CContentRestriction(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CContentRestriction *v, const char *fmt, ...)",
          "3556: {",
          "3557:  proto_tree *tree;",
          "3558:  proto_item *item;",
          "3559:  va_list ap;",
          "3560:  guint32 cc;",
          "3561:  const char *str, *txt;",
          "3564:  va_start(ap, fmt);",
          "3565:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "3566:  va_end(ap);",
          "3568:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CContentRestriction, &item, txt);",
          "3570:  offset = parse_CFullPropSpec(tvb, offset, tree, pad_tree, &v->property, \"Property\");",
          "3572:  offset = parse_padding(tvb, offset, 4, pad_tree, \"Padding1\");",
          "3574:  cc = tvb_get_letohl(tvb, offset);",
          "3575:  proto_tree_add_uint(tree, hf_mswsp_ccontentrestrict_cc, tvb, offset, 4, cc);",
          "3576:  offset += 4;",
          "3578:  str = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, 2*cc, ENC_LITTLE_ENDIAN | ENC_UCS_2);",
          "3579:  v->phrase = str;",
          "3580:  proto_tree_add_string(tree, hf_mswsp_ccontentrestrict_phrase, tvb, offset, 2*cc, str);",
          "3581:  offset += 2*cc;",
          "3583:  offset = parse_padding(tvb, offset, 4, pad_tree, \"Padding2\");",
          "3585:  v->lcid = tvb_get_letohl(tvb, offset);",
          "3586:  offset = parse_lcid(tvb, offset, tree, \"lcid\");",
          "3588:  v->method = tvb_get_letohl(tvb, offset);",
          "3589:  proto_tree_add_uint(tree, hf_mswsp_ccontentrestrict_method, tvb, offset, 4, v->method);",
          "3590:  offset += 4;",
          "3592:  proto_item_set_end(item, tvb, offset);",
          "3593:  return offset;",
          "3594: }",
          "3596: int parse_CNatLanguageRestriction(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CNatLanguageRestriction *v, const char *fmt, ...)",
          "3597: {",
          "3598:  proto_tree *tree;",
          "3599:  proto_item *item;",
          "3600:  va_list ap;",
          "3601:  guint32 cc;",
          "3602:  const char *str, *txt;",
          "3605:  va_start(ap, fmt);",
          "3606:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "3607:  va_end(ap);",
          "3609:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CNatLanguageRestriction, &item, txt);",
          "3611:  offset = parse_CFullPropSpec(tvb, offset, tree, pad_tree, &v->property, \"Property\");",
          "3613:  offset = parse_padding(tvb, offset, 4, pad_tree, \"padding_cc\");",
          "3615:  cc = tvb_get_letohl(tvb, offset);",
          "3616:  proto_tree_add_uint(tree, hf_mswsp_natlangrestrict_cc, tvb, offset, 4, cc);",
          "3617:  offset += 4;",
          "3619:  str = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, 2*cc, ENC_LITTLE_ENDIAN | ENC_UCS_2);",
          "3620:  v->phrase = str;",
          "3621:  proto_tree_add_string(tree, hf_mswsp_natlangrestrict_phrase, tvb, offset, 2*cc, str);",
          "3622:  offset += 2*cc;",
          "3624:  offset = parse_padding(tvb, offset, 4, pad_tree, \"padding_lcid\");",
          "3626:  v->lcid = tvb_get_letohl(tvb, offset);",
          "3627:  offset = parse_lcid(tvb, offset, tree, \"lcid\");",
          "3629:  proto_item_set_end(item, tvb, offset);",
          "3630:  return offset;",
          "3631: }",
          "3634: static int parse_CReuseWhere(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree _U_, struct CReuseWhere *v, const char *fmt, ...)",
          "3635: {",
          "3636:  proto_item *item;",
          "3637:  va_list ap;",
          "3638:  const char *txt;",
          "3640:  va_start(ap, fmt);",
          "3641:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "3642:  va_end(ap);",
          "3644:  proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_mswsp_msg_creusewhere, &item, txt);",
          "3645:  v->whereId = tvb_get_letohl(tvb, offset);",
          "3646:  offset += 4;",
          "3648:  proto_item_append_text(item, \" Id: %u\", v->whereId);",
          "3650:  proto_item_set_end(item, tvb, offset);",
          "3651:  return offset;",
          "3652: }",
          "3654: static const value_string RT_VALS[] =  {",
          "3655:  {RTNone, \"RTNone\"},",
          "3656:  {RTAnd, \"RTAnd\"},",
          "3657:  {RTOr, \"RTOr\"},",
          "3658:  {RTNot, \"RTNot\"},",
          "3659:  {RTContent, \"RTContent\"},",
          "3660:  {RTProperty, \"RTProperty\"},",
          "3661:  {RTProximity, \"RTProximity\"},",
          "3662:  {RTVector, \"\"},",
          "3663:  {RTNatLanguage, \"RTNatLanguage\"},",
          "3664:  {RTScope, \"RTScope\"},",
          "3665:  {RTCoerce_Add, \"RTCoerce_Add\"},",
          "3666:  {RTCoerce_Multiply, \"RTCoerce_Multiply\"},",
          "3667:  {RTCoerce_Absolute, \"RTCoerce_Absolute\"},",
          "3668:  {RTProb, \"RTProb\"},",
          "3669:  {RTFeedback, \"RTFeedback\"},",
          "3670:  {RTReldoc, \"RTReldoc\"},",
          "3671:  {RTReuseWhere, \"RTReuseWhere\"},",
          "3672:  {RTInternalProp, \"RTInternalProp\"},",
          "3673:  {RTPhrase, \"RTInternalProp\"},",
          "3674:  {0, NULL}",
          "3675: };",
          "3677: #define EP_ALLOC(T) (T*)wmem_alloc(wmem_packet_scope(), sizeof(T))",
          "3679: static int parse_rType(tvbuff_t *tvb, int offset, proto_tree *tree, enum rType *rtype, const char **str)",
          "3680: {",
          "3681:  const char *txt = NULL;",
          "3682:  guint32 type = tvb_get_letohl(tvb, offset);",
          "3683:  switch(type) {",
          "3684:   case RTNone:",
          "3686:    break;",
          "3687:   case RTAnd:",
          "3689:    break;",
          "3690:   case RTOr:",
          "3692:    break;",
          "3693:   case RTNot:",
          "3695:    break;",
          "3696:   case RTContent:",
          "3698:    break;",
          "3699:   case RTProperty:",
          "3701:    break;",
          "3702:   case RTProximity:",
          "3704:    break;",
          "3705:   case RTVector:",
          "3707:    break;",
          "3708:   case RTNatLanguage:",
          "3710:    break;",
          "3711:   case RTScope:",
          "3713:    break;",
          "3714:   case RTCoerce_Add:",
          "3716:    break;",
          "3717:   case RTCoerce_Multiply:",
          "3719:    break;",
          "3720:   case RTCoerce_Absolute:",
          "3722:    break;",
          "3723:   case RTProb:",
          "3725:    break;",
          "3726:   case RTFeedback:",
          "3728:    break;",
          "3729:   case RTReldoc:",
          "3731:    break;",
          "3732:   case RTReuseWhere:",
          "3734:    break;",
          "3735:   case RTInternalProp:",
          "3737:    break;",
          "3738:   default:",
          "3739:    DISSECTOR_ASSERT(false);",
          "3740:    break;",
          "3741:  }",
          "3742:  txt = val_to_str(*rtype, RT_VALS, \"0x%.8x\");",
          "3743:  proto_tree_add_string_format_value(tree, hf_mswsp_crestrict_ultype, tvb, offset, 4, txt, \"%s (0x%.8x)\",  txt[0] == '0' ? \"\" : txt, *rtype);",
          "3744:  if (str) {",
          "3746:  }",
          "3747:  return offset + 4;",
          "3748: }",
          "3750: static int parse_CRestriction(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CRestriction *v, const char *fmt, ...)",
          "3751: {",
          "3752:  proto_tree *tree;",
          "3753:  proto_item *item;",
          "3754:  const char *str, *txt;",
          "3755:  va_list ap;",
          "3757:  va_start(ap, fmt);",
          "3758:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "3759:  va_end(ap);",
          "3761:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CRestriction, &item, txt);",
          "3764:  offset = parse_rType(tvb, offset, tree, &v->ulType, &str);",
          "3765:  proto_item_append_text(item, \" Type: %s\", str);",
          "3767:  v->Weight = tvb_get_letohl(tvb, offset);",
          "3768:  proto_tree_add_uint(tree, hf_mswsp_crestrict_weight, tvb, offset, 4, v->Weight);",
          "3769:  offset += 4;",
          "3771:  switch(v->ulType) {",
          "3772:  case RTNone:",
          "3773:   break;",
          "3774:  case RTAnd:",
          "3775:  case RTOr:",
          "3776:  case RTProximity:",
          "3777:  case RTPhrase: {",
          "3778:   v->u.RTAnd = EP_ALLOC(struct CNodeRestriction);",
          "3779:   offset = parse_CNodeRestriction(tvb, offset, tree, pad_tree, v->u.RTAnd, \"CNodeRestriction\");",
          "3780:   break;",
          "3781:  }",
          "3782:  case RTNot: {",
          "3783:   v->u.RTNot = EP_ALLOC(struct CRestriction);",
          "3784:   offset = parse_CRestriction(tvb, offset, tree, pad_tree,",
          "3785:          v->u.RTNot, \"CRestriction\");",
          "3786:   break;",
          "3787:  }",
          "3788:  case RTProperty: {",
          "3789:   v->u.RTProperty = EP_ALLOC(struct CPropertyRestriction);",
          "3790:   offset = parse_CPropertyRestriction(tvb, offset, tree, pad_tree,",
          "3791:            v->u.RTProperty, \"CPropertyRestriction\");",
          "3792:   break;",
          "3793:  }",
          "3794:  case RTCoerce_Add:",
          "3795:  case RTCoerce_Multiply:",
          "3796:  case RTCoerce_Absolute: {",
          "3797:   v->u.RTCoerce_Add = EP_ALLOC(struct CCoercionRestriction);",
          "3798:   offset = parse_CCoercionRestriction(tvb, offset, tree, pad_tree,",
          "3799:            v->u.RTCoerce_Add, \"CCoercionRestriction\");",
          "3800:   break;",
          "3801:  }",
          "3802:  case RTContent: {",
          "3803:   v->u.RTContent = EP_ALLOC(struct CContentRestriction);",
          "3804:   offset = parse_CContentRestriction(tvb, offset, tree, pad_tree,",
          "3805:              v->u.RTContent, \"CContentRestriction\");",
          "3806:   break;",
          "3807:  }",
          "3808:  case RTReuseWhere: {",
          "3809:   v->u.RTReuseWhere = EP_ALLOC(struct CReuseWhere);",
          "3810:   offset = parse_CReuseWhere(tvb, offset, tree, pad_tree,",
          "3811:            v->u.RTReuseWhere, \"CReuseWhere\");",
          "3812:   break;",
          "3813:  }",
          "3814:  case RTNatLanguage: {",
          "3815:   v->u.RTNatLanguage = EP_ALLOC(struct CNatLanguageRestriction);",
          "3816:   offset = parse_CNatLanguageRestriction(tvb, offset, tree, pad_tree,",
          "3817:               v->u.RTNatLanguage, \"CNatLanguageRestriction\");",
          "3818:   break;",
          "3819:  }",
          "3820:  default:",
          "3821:   proto_item_append_text(item, \" Not supported!\");",
          "3822:  }",
          "3824:  proto_item_set_end(item, tvb, offset);",
          "3825:  return offset;",
          "3826: }",
          "3828: static int parse_CRestrictionArray(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "3829: {",
          "3830:  guint8 present, count;",
          "3832:  proto_tree *tree;",
          "3833:  proto_item *item;",
          "3834:  const char *txt;",
          "3835:  va_list ap;",
          "3837:  va_start(ap, fmt);",
          "3838:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "3839:  va_end(ap);",
          "3840:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CRestrictionArray, &item, txt);",
          "3842:  pad_tree = tree;",
          "3844:  count = tvb_get_guint8(tvb, offset);",
          "3845:  proto_tree_add_uint(tree, hf_mswsp_crestrictarray_count, tvb, offset, 1, count);",
          "3846:  offset += 1;",
          "3848:  present = tvb_get_guint8(tvb, offset);",
          "3849:  proto_tree_add_uint(tree, hf_mswsp_crestrictarray_present, tvb, offset, 1, present);",
          "3850:  offset += 1;",
          "3852:  if (present) {",
          "3853:   unsigned i;",
          "3854:   offset = parse_padding(tvb, offset, 4, pad_tree, \"paddingCRestrictionPresent\");",
          "3856:   for (i=0; i<count; i++) {",
          "3857:    struct CRestriction r;",
          "3858:    offset = parse_CRestriction(tvb, offset, tree, pad_tree, &r, \"Restriction[%d]\", i);",
          "3859:   }",
          "3860:  }",
          "3861:  proto_item_set_end(item, tvb, offset);",
          "3862:  return offset;",
          "3863: }",
          "3865: static int parse_CNodeRestriction(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct CNodeRestriction *v, const char *fmt, ...)",
          "3866: {",
          "3867:  proto_tree *tree;",
          "3868:  proto_item *item;",
          "3869:  unsigned i;",
          "3870:  const char *txt;",
          "3871:  va_list ap;",
          "3873:  va_start(ap, fmt);",
          "3874:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "3875:  va_end(ap);",
          "3876:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CNodeRestriction, &item, txt);",
          "3878:  v->cNode = tvb_get_letohl(tvb, offset);",
          "3879:  proto_tree_add_uint(tree, hf_mswsp_cnoderestrict_cnode, tvb, offset, 4, v->cNode);",
          "3880:  offset += 4;",
          "3882:  for (i=0; i<v->cNode; i++) {",
          "3883:   struct CRestriction r;",
          "3884:   ZERO_STRUCT(r);",
          "3885:   offset = parse_CRestriction(tvb, offset, tree, pad_tree, &r, \"paNode[%u]\", i);",
          "3888:  }",
          "3890:  proto_item_set_end(item, tvb, offset);",
          "3891:  return offset;",
          "3892: }",
          "3897: static int vvalue_tvb_get0(tvbuff_t *tvb _U_, int offset _U_, void *val _U_)",
          "3898: {",
          "3899:  return 0;",
          "3900: }",
          "3902: static int vvalue_tvb_get1(tvbuff_t *tvb, int offset, void *val)",
          "3903: {",
          "3904:  guint8 *ui1 = (guint8*)val;",
          "3906:  return 1;",
          "3907: }",
          "3909: static int vvalue_tvb_get2(tvbuff_t *tvb , int offset, void *val)",
          "3910: {",
          "3911:  guint16 *ui2 = (guint16*)val;",
          "3913:  return 2;",
          "3914: }",
          "3916: static int vvalue_tvb_get4(tvbuff_t *tvb , int offset, void *val)",
          "3917: {",
          "3918:  guint32 *ui4 = (guint32*)val;",
          "3920:  return 4;",
          "3921: }",
          "3923: static int vvalue_tvb_get8(tvbuff_t *tvb , int offset, void *val)",
          "3924: {",
          "3925:  guint64 *ui8 = (guint64*)val;",
          "3927:  return 8;",
          "3928: }",
          "3930: static int vvalue_tvb_blob(tvbuff_t *tvb , int offset, void *val)",
          "3931: {",
          "3932:  struct data_blob *blob = (struct data_blob*)val;",
          "3933:  guint32 len = tvb_get_letohl(tvb, offset);",
          "3934:  const guint8 *data = tvb_get_ptr(tvb, offset + 4, len);",
          "3936:  blob->size = len;",
          "3937:  blob->data = (guint8*)wmem_memdup(wmem_packet_scope(), data, len);",
          "3939:  return 4 + len;",
          "3940: }",
          "3942: static int vvalue_tvb_lpstr(tvbuff_t *tvb , int offset, void *val)",
          "3943: {",
          "3944:  struct data_str *str = (struct data_str*)val;",
          "3945:  gint len;",
          "3947:  str->len = tvb_get_letohl(tvb, offset);",
          "3948:  str->str = tvb_get_stringz_enc(wmem_packet_scope(), tvb, offset + 4, &len,",
          "3949:            ENC_ASCII|ENC_LITTLE_ENDIAN);",
          "3951:  return 4 + len;",
          "3952: }",
          "3954: static int vvalue_tvb_lpwstr_len(tvbuff_t *tvb , int offset, int length, void *val)",
          "3955: {",
          "3956:  struct data_str *str = (struct data_str*)val;",
          "3957:  const gchar *ptr;",
          "3958:  int len;",
          "3960:  if (length == 0) {",
          "3962:   ptr = tvb_get_stringz_enc(wmem_packet_scope(), tvb, offset, &len,",
          "3963:           ENC_UTF_16|ENC_LITTLE_ENDIAN);",
          "3964:  } else {",
          "3965:   ptr =  tvb_get_string_enc(wmem_packet_scope(), tvb, offset, length,",
          "3966:           ENC_UTF_16|ENC_LITTLE_ENDIAN);",
          "3967:   len = length;",
          "3968:  }",
          "3969:  str->str = ptr;",
          "3970:  return len;",
          "3971: }",
          "3973: static int vvalue_tvb_lpwstr(tvbuff_t *tvb , int offset, void *val)",
          "3974: {",
          "3975:  struct data_str *str = (struct data_str*)val;",
          "3977:  str->len = tvb_get_letohl(tvb, offset);",
          "3979:  return 4 + vvalue_tvb_lpwstr_len(tvb, offset + 4, 0, val);",
          "3980: }",
          "3982: static int vvalue_tvb_vector_internal(tvbuff_t *tvb , int offset, struct vt_vector *val, struct vtype_data *type, int num)",
          "3983: {",
          "3984:  const int offset_in = offset;",
          "3985:  const gboolean varsize = (type->size == -1);",
          "3986:  const int elsize = varsize ? (int)sizeof(struct data_blob) : type->size;",
          "3987:  guint8 *data = (guint8*)wmem_alloc(wmem_packet_scope(), elsize * num);",
          "3988:  int len, i;",
          "3990:  val->len = num;",
          "3991:  val->u.vt_ui1 = data;",
          "3992:  DISSECTOR_ASSERT((void*)&val->u == ((void*)&val->u.vt_ui1));",
          "3994:  for (i=0; i<num; i++) {",
          "3995:   DISSECTOR_ASSERT_HINT(type->tvb_get != 0,",
          "3996:           \"type that we don't know yet how to handle, please submit a bug with trace\");",
          "3997:   len = type->tvb_get(tvb, offset, data);",
          "3998:   data += elsize;",
          "3999:   offset += len;",
          "4001:    int padding = 4 - (offset % 4);",
          "4002:    offset += padding;",
          "4003:   }",
          "4004:  }",
          "4005:  return offset - offset_in;",
          "4006: }",
          "4008: static int vvalue_tvb_vector(tvbuff_t *tvb , int offset, struct vt_vector *val, struct vtype_data *type)",
          "4009: {",
          "4010:  const int num = tvb_get_letohl(tvb, offset);",
          "4011:  return 4 + vvalue_tvb_vector_internal(tvb , offset+4, val, type, num);",
          "4012: }",
          "4014: static void vvalue_strbuf_append_null(wmem_strbuf_t *strbuf _U_, void *ptr _U_)",
          "4015: {}",
          "4017: static void vvalue_strbuf_append_i1(wmem_strbuf_t *strbuf, void *ptr)",
          "4018: {",
          "4019:  gint8 i1 = *(gint8*)ptr;",
          "4020:  wmem_strbuf_append_printf(strbuf, \"%d\", (int)i1);",
          "4021: }",
          "4023: static void vvalue_strbuf_append_i2(wmem_strbuf_t *strbuf, void *ptr)",
          "4024: {",
          "4025:  gint16 i2 = *(gint16*)ptr;",
          "4026:  wmem_strbuf_append_printf(strbuf, \"%d\", (int)i2);",
          "4027: }",
          "4029: static void vvalue_strbuf_append_i4(wmem_strbuf_t *strbuf, void *ptr)",
          "4030: {",
          "4031:  gint32 i4 = *(gint32*)ptr;",
          "4032:  wmem_strbuf_append_printf(strbuf, \"%d\", i4);",
          "4033: }",
          "4035: static void vvalue_strbuf_append_i8(wmem_strbuf_t *strbuf, void *ptr)",
          "4036: {",
          "4037:  gint64 i8 = *(gint64*)ptr;",
          "4038:  wmem_strbuf_append_printf(strbuf, \"%ld\", i8);",
          "4039: }",
          "4041: static void vvalue_strbuf_append_ui1(wmem_strbuf_t *strbuf, void *ptr)",
          "4042: {",
          "4043:  guint8 ui1 = *(guint8*)ptr;",
          "4044:  wmem_strbuf_append_printf(strbuf, \"%u\", (unsigned)ui1);",
          "4045: }",
          "4047: static void vvalue_strbuf_append_ui2(wmem_strbuf_t *strbuf, void *ptr)",
          "4048: {",
          "4049:  guint16 ui2 = *(guint16*)ptr;",
          "4050:  wmem_strbuf_append_printf(strbuf, \"%u\", (unsigned)ui2);",
          "4051: }",
          "4053: static void vvalue_strbuf_append_ui4(wmem_strbuf_t *strbuf, void *ptr)",
          "4054: {",
          "4055:  guint32 ui4 = *(guint32*)ptr;",
          "4056:  wmem_strbuf_append_printf(strbuf, \"%d\", ui4);",
          "4057: }",
          "4059: static void vvalue_strbuf_append_ui8(wmem_strbuf_t *strbuf, void *ptr)",
          "4060: {",
          "4061:  guint64 ui8 = *(guint64*)ptr;",
          "4062:  wmem_strbuf_append_printf(strbuf, \"%lu\", ui8);",
          "4063: }",
          "4065: static void vvalue_strbuf_append_r4(wmem_strbuf_t *strbuf, void *ptr)",
          "4066: {",
          "4067:  float r4 = *(float*)ptr;",
          "4068:  wmem_strbuf_append_printf(strbuf, \"%g\", (double)r4);",
          "4069: }",
          "4071: static void vvalue_strbuf_append_r8(wmem_strbuf_t *strbuf, void *ptr)",
          "4072: {",
          "4073:  double r8 = *(double*)ptr;",
          "4074:  wmem_strbuf_append_printf(strbuf, \"%g\", r8);",
          "4075: }",
          "4077: static void vvalue_strbuf_append_str(wmem_strbuf_t *strbuf, void *ptr)",
          "4078: {",
          "4079:  struct data_str *str = (struct data_str*)ptr;",
          "4080:  wmem_strbuf_append_printf(strbuf, \"\\\"%s\\\"\", str->str);",
          "4081: }",
          "4083: static void vvalue_strbuf_append_blob(wmem_strbuf_t *strbuf, void *ptr)",
          "4084: {",
          "4085:  struct data_blob *blob = (struct data_blob*)ptr;",
          "4086:  wmem_strbuf_append_printf(strbuf, \"size: %d\", (int)blob->size);",
          "4087: }",
          "4089: static void vvalue_strbuf_append_bool(wmem_strbuf_t *strbuf, void *ptr)",
          "4090: {",
          "4091:  guint16 val = *(guint*)ptr;",
          "4092:  switch (val) {",
          "4093:  case 0:",
          "4094:   wmem_strbuf_append(strbuf, \"False\");",
          "4095:   break;",
          "4096:  case 0xffff:",
          "4097:   wmem_strbuf_append(strbuf, \"True\");",
          "4098:   break;",
          "4099:  default:",
          "4100:   wmem_strbuf_append_printf(strbuf, \"Invalid (0x%4x)\", val);",
          "4101:  }",
          "4102: }",
          "4104: static void vvalue_strbuf_append_vector(wmem_strbuf_t *strbuf, struct vt_vector val, struct vtype_data *type)",
          "4105: {",
          "4106:  const int elsize = (type->size == -1) ? (int)sizeof(struct data_blob) : type->size;",
          "4107:  unsigned i;",
          "4108:  guint8 *data = val.u.vt_ui1;",
          "4109:  wmem_strbuf_append_c(strbuf, '[');",
          "4110:  for (i=0; i<val.len; i++) {",
          "4111:   if (i>0) {",
          "4112:    wmem_strbuf_append_c(strbuf, ',');",
          "4113:   }",
          "4114:   type->strbuf_append(strbuf, data);",
          "4115:   data += elsize;",
          "4116:  }",
          "4117:  wmem_strbuf_append_c(strbuf, ']');",
          "4118: }",
          "4120: static struct vtype_data VT_TYPE[] = {",
          "4121:  {VT_EMPTY,             \"VT_EMPTY\",              0, vvalue_tvb_get0, NULL, vvalue_strbuf_append_null},",
          "4122:  {VT_NULL,              \"VT_NULL\",               0, vvalue_tvb_get0, NULL, vvalue_strbuf_append_null},",
          "4123:  {VT_I2,                \"VT_I2\",                 2, vvalue_tvb_get2, NULL, vvalue_strbuf_append_i2},",
          "4124:  {VT_I4,                \"VT_I4\",                 4, vvalue_tvb_get4, NULL, vvalue_strbuf_append_i4},",
          "4125:  {VT_R4,                \"VT_R4\",                 4, vvalue_tvb_get4, NULL, vvalue_strbuf_append_r4},",
          "4126:  {VT_R8,                \"VT_R8\",                 8, vvalue_tvb_get8, NULL, vvalue_strbuf_append_r8},",
          "4127:  {VT_CY,                \"VT_CY\",                 8, vvalue_tvb_get8, NULL, vvalue_strbuf_append_i8},",
          "4128:  {VT_DATE,              \"VT_DATE\",               8, vvalue_tvb_get8, NULL, vvalue_strbuf_append_r8},",
          "4129:  {VT_BSTR,              \"VT_BSTR\",              -1, vvalue_tvb_lpwstr, vvalue_tvb_lpwstr_len, vvalue_strbuf_append_str},",
          "4130:  {VT_ERROR,             \"VT_ERROR\",              4, vvalue_tvb_get4, NULL, vvalue_strbuf_append_ui4},",
          "4131:  {VT_BOOL,              \"VT_BOOL\",               2, vvalue_tvb_get2, NULL, vvalue_strbuf_append_bool},",
          "4132:  {VT_VARIANT,           \"VT_VARIANT\",           -1, NULL, NULL, NULL},",
          "4133:  {VT_DECIMAL,           \"VT_DECIMAL\",           16, NULL, NULL, NULL},",
          "4134:  {VT_I1,                \"VT_I1\",                 1, vvalue_tvb_get1, NULL, vvalue_strbuf_append_i1},",
          "4135:  {VT_UI1,               \"VT_UI1\",                1, vvalue_tvb_get1, NULL, vvalue_strbuf_append_ui1},",
          "4136:  {VT_UI2,               \"VT_UI2\",                2, vvalue_tvb_get2, NULL, vvalue_strbuf_append_ui2},",
          "4137:  {VT_UI4,               \"VT_UI4\",                4, vvalue_tvb_get4, NULL, vvalue_strbuf_append_ui4},",
          "4138:  {VT_I8,                \"VT_I8\",                 8, vvalue_tvb_get8, NULL, vvalue_strbuf_append_i8},",
          "4139:  {VT_UI8,               \"VT_UI8\",                8, vvalue_tvb_get8, NULL, vvalue_strbuf_append_ui8},",
          "4140:  {VT_INT,               \"VT_INT\",                4, vvalue_tvb_get4, NULL, vvalue_strbuf_append_i4},",
          "4141:  {VT_UINT,              \"VT_UINT\",               4, vvalue_tvb_get4, NULL, vvalue_strbuf_append_ui4},",
          "4142:  {VT_LPSTR,             \"VT_LPSTR\",             -1, vvalue_tvb_lpstr, NULL, vvalue_strbuf_append_str},",
          "4143:  {VT_LPWSTR,            \"VT_LPWSTR\",            -1, vvalue_tvb_lpwstr, vvalue_tvb_lpwstr_len, vvalue_strbuf_append_str},",
          "4144:  {VT_COMPRESSED_LPWSTR, \"VT_COMPRESSED_LPWSTR\", -1, NULL, NULL, vvalue_strbuf_append_str},",
          "4145:  {VT_FILETIME,          \"VT_FILETIME\",           8, vvalue_tvb_get8, NULL, vvalue_strbuf_append_i8},",
          "4146:  {VT_BLOB,              \"VT_BLOB\",              -1, vvalue_tvb_blob, NULL, vvalue_strbuf_append_blob},",
          "4147:  {VT_BLOB_OBJECT,       \"VT_BLOB_OBJECT\",       -1, vvalue_tvb_blob, NULL, vvalue_strbuf_append_blob},",
          "4148:  {VT_CLSID,             \"VT_CLSID\",             16, NULL, NULL, NULL}",
          "4149: };",
          "4151: static struct vtype_data *vType_get_type(guint16 t)",
          "4152: {",
          "4153:  unsigned i;",
          "4154:  t = (t & 0xFF);",
          "4155:  for (i=0; i<array_length(VT_TYPE); i++) {",
          "4156:   if (t == VT_TYPE[i].tag) {",
          "4157:    return &VT_TYPE[i];",
          "4158:   }",
          "4159:  }",
          "4160:  return NULL;",
          "4161: }",
          "4163: static const char *str_CBaseStorageVariant(struct CBaseStorageVariant *value, gboolean print_type)",
          "4164: {",
          "4166:  wmem_strbuf_t *strbuf = wmem_strbuf_new(wmem_packet_scope(), \"\");",
          "4167:  if (value == NULL) {",
          "4168:   return \"<NULL>\";",
          "4169:  }",
          "4171:  if (value->type == NULL) {",
          "4172:   return \"<??\"\"?>\";",
          "4173:  }",
          "4175:  if (print_type) {",
          "4176:   wmem_strbuf_append(strbuf, value->type->str);",
          "4178:   if (value->vType & 0xFF00) {",
          "4179:    wmem_strbuf_append_printf(strbuf, \"[%d]\", value->vValue.vt_vector.len);",
          "4180:   }",
          "4181:   wmem_strbuf_append(strbuf, \": \");",
          "4182:  }",
          "4184:  switch (value->vType & 0xFF00) {",
          "4185:  case 0:",
          "4186:   value->type->strbuf_append(strbuf, &value->vValue);",
          "4187:   break;",
          "4188:  case VT_ARRAY:",
          "4189:   vvalue_strbuf_append_vector(strbuf, value->vValue.vt_array.vData, value->type);",
          "4190:   break;",
          "4191:  case VT_VECTOR:",
          "4192:   vvalue_strbuf_append_vector(strbuf, value->vValue.vt_vector, value->type);",
          "4193:   break;",
          "4194:  default:",
          "4195:   wmem_strbuf_append(strbuf, \"Invalid\");",
          "4196:  }",
          "4198:  return wmem_strbuf_get_str(strbuf);",
          "4199: }",
          "4201: static int parse_vType(tvbuff_t *tvb, int offset, guint16 *vtype)",
          "4202: {",
          "4203:  guint16 tmp_vtype = tvb_get_letohs(tvb, offset);",
          "4204:  guint16 modifier =  tmp_vtype & 0xFF00;",
          "4206:  switch (tmp_vtype & 0xFF) {",
          "4207:   case VT_EMPTY:",
          "4209:    break;",
          "4210:   case VT_NULL:",
          "4212:    break;",
          "4213:   case VT_I2:",
          "4215:    break;",
          "4216:   case VT_I4:",
          "4218:    break;",
          "4219:   case VT_R4:",
          "4221:    break;",
          "4222:   case VT_R8:",
          "4224:    break;",
          "4225:   case VT_CY:",
          "4227:    break;",
          "4228:   case VT_DATE:",
          "4230:    break;",
          "4231:   case VT_BSTR:",
          "4233:    break;",
          "4234:   case VT_ERROR:",
          "4236:    break;",
          "4237:   case VT_BOOL:",
          "4239:    break;",
          "4240:   case VT_VARIANT:",
          "4242:    break;",
          "4243:   case VT_DECIMAL:",
          "4245:    break;",
          "4246:   case VT_I1:",
          "4248:    break;",
          "4249:   case VT_UI1:",
          "4251:    break;",
          "4252:   case VT_UI2:",
          "4254:    break;",
          "4255:   case VT_UI4:",
          "4257:    break;",
          "4258:   case VT_I8:",
          "4260:    break;",
          "4261:   case VT_UI8:",
          "4263:    break;",
          "4264:   case VT_INT:",
          "4266:    break;",
          "4267:   case VT_UINT:",
          "4269:    break;",
          "4270:   case VT_LPSTR:",
          "4272:    break;",
          "4273:   case VT_LPWSTR:",
          "4275:    break;",
          "4276:   case VT_COMPRESSED_LPWSTR:",
          "4278:    break;",
          "4279:   case VT_FILETIME:",
          "4281:    break;",
          "4282:   case VT_BLOB:",
          "4284:    break;",
          "4285:   case VT_BLOB_OBJECT:",
          "4287:    break;",
          "4288:   case VT_CLSID:",
          "4290:    break;",
          "4291:   default:",
          "4292:    DISSECTOR_ASSERT(false);",
          "4293:    break;",
          "4294:  }",
          "4295:  if (modifier) {",
          "4296:   switch (modifier) {",
          "4297:    case VT_VECTOR:",
          "4299:     break;",
          "4300:    case VT_ARRAY:",
          "4302:     break;",
          "4303:    default:",
          "4304:     DISSECTOR_ASSERT(false);",
          "4305:     break;",
          "4306:   }",
          "4307:  }",
          "4308:  return offset + 2;",
          "4309: }",
          "4311: static int parse_CBaseStorageVariant(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree _U_, struct CBaseStorageVariant *value, const char *text)",
          "4312: {",
          "4313:  int i, len;",
          "4314:  proto_item *ti, *ti_type, *ti_val;",
          "4315:  proto_tree *tree, *tr;",
          "4316:  enum vType highType;",
          "4318:  ZERO_STRUCT(*value);",
          "4320:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CBaseStorageVariant, &ti, text);",
          "4322:  parse_vType(tvb, offset, &value->vType);",
          "4323:  value->type = vType_get_type(value->vType);",
          "4325:  DISSECTOR_ASSERT(value->type != NULL);",
          "4326:  ti_type = proto_tree_add_string(tree, hf_mswsp_cbasestorvariant_vtype, tvb, offset, 2, value->type->str);",
          "4327:  offset += 2;",
          "4329:  value->vData1 = tvb_get_guint8(tvb, offset);",
          "4330:  proto_tree_add_uint(tree, hf_mswsp_cbasestorvariant_vdata1, tvb, offset, 1, value->vData1);",
          "4331:  offset += 1;",
          "4333:  value->vData2 = tvb_get_guint8(tvb, offset);",
          "4334:  proto_tree_add_uint(tree, hf_mswsp_cbasestorvariant_vdata2, tvb, offset, 1, value->vData2);",
          "4335:  offset += 1;",
          "4337:  highType = (enum vType)(value->vType & 0xFF00);",
          "4339:  if (value->type == NULL) {",
          "4340:   goto not_supported;",
          "4341:  }",
          "4343:  ti_val = proto_tree_add_string(tree, hf_mswsp_cbasestorvariant_vvalue, tvb, offset, 0, \"\");",
          "4345:  switch (highType) {",
          "4346:  case VT_EMPTY:",
          "4347:   DISSECTOR_ASSERT_HINT(value->type->tvb_get != 0,",
          "4348:           \"type that we don't know yet how to handle, please submit a bug with trace\");",
          "4349:   len = value->type->tvb_get(tvb, offset, &value->vValue.vt_single);",
          "4350:   offset += len;",
          "4351:   break;",
          "4352:  case VT_VECTOR:",
          "4353:   proto_item_append_text(ti_type, \"|VT_VECTOR\");",
          "4354:   tr = proto_item_add_subtree(ti_val, ett_CBaseStorageVariant_Vector);",
          "4356:   len = vvalue_tvb_vector(tvb, offset, &value->vValue.vt_vector, value->type);",
          "4357:   proto_tree_add_uint(tr, hf_mswsp_cbasestorvariant_num, tvb, offset, 4, value->vValue.vt_vector.len);",
          "4358:   offset += len;",
          "4359:   break;",
          "4360:  case VT_ARRAY: {",
          "4361:   guint16 cDims, fFeatures;",
          "4362:   guint32 cbElements, cElements, lLbound;",
          "4363:   int num = 1;",
          "4365:   proto_item_append_text(ti_type, \"|VT_ARRAY\");",
          "4366:   tr = proto_item_add_subtree(ti_val, ett_CBaseStorageVariant_Array);",
          "4368:   cDims = tvb_get_letohs(tvb, offset);",
          "4369:   proto_tree_add_uint(tr, hf_mswsp_cbasestorvariant_cdims, tvb, offset, 2, cDims);",
          "4370:   offset += 2;",
          "4372:   fFeatures = tvb_get_letohs(tvb, offset);",
          "4373:   proto_tree_add_uint(tr, hf_mswsp_cbasestorvariant_ffeatures, tvb, offset, 2, fFeatures);",
          "4374:   offset += 2;",
          "4376:   cbElements = tvb_get_letohl(tvb, offset);",
          "4377:   proto_tree_add_uint(tr, hf_mswsp_cbasestorvariant_cbelements, tvb, offset, 4, cbElements);",
          "4378:   offset += 4;",
          "4379:   for (i=0; i<cDims; i++) {",
          "4380:    cElements = tvb_get_letohl(tvb, offset);",
          "4381:    lLbound =  tvb_get_letohl(tvb, offset + 4);",
          "4382:    proto_tree_add_string_format(tr, hf_mswsp_cbasestorvariant_rgsabound, tvb, offset, 8, \"\", \"Rgsabound[%d]: (%d:%d)\", i, cElements, lLbound);",
          "4383:    offset += 8;",
          "4384:    num *= cElements;",
          "4385:   }",
          "4387:   len = vvalue_tvb_vector_internal(tvb , offset, &value->vValue.vt_array.vData, value->type, num);",
          "4388:   offset += len;",
          "4389:   break;",
          "4390:  }",
          "4391:  default:",
          "4392:   proto_item_append_text(ti_type, \"|0x%x\", highType);",
          "4393:  }",
          "4394:  proto_item_set_end(ti, tvb, offset);",
          "4395:  proto_item_set_end(ti_val, tvb, offset);",
          "4397:  proto_item_append_text(ti_val, \" %s\", str_CBaseStorageVariant(value, false));",
          "4398:  proto_item_append_text(ti, \" %s\", str_CBaseStorageVariant(value, true));",
          "4400:  goto done;",
          "4402: not_supported:",
          "4403:  proto_item_append_text(ti, \": sorry, vType %02x not handled yet!\", (unsigned)value->vType);",
          "4404: done:",
          "4405:  return offset;",
          "4406: }",
          "4408: enum {",
          "4409:  DBKIND_GUID_NAME = 0,",
          "4410:  DBKIND_GUID_PROPID = 1",
          "4411: };",
          "4413: static int parse_CDbColId(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *text)",
          "4414: {",
          "4415:  guint32 eKind, ulId;",
          "4416:  e_guid_t guid;",
          "4417:  const char *str;",
          "4418:  static const char *KIND[] = {\"DBKIND_GUID_NAME\", \"DBKIND_GUID_PROPID\"};",
          "4420:  proto_item *tree_item;",
          "4421:  proto_tree *tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CDbColId, &tree_item, text);",
          "4423:  eKind = tvb_get_letohl(tvb, offset);",
          "4424:  str = (eKind < 2 ? KIND[eKind] : \"???\");",
          "4425:  proto_tree_add_string_format_value(tree, hf_mswsp_cdbcolid_ekind, tvb, offset, 4,  str, \"%s (%u)\", str, eKind);",
          "4426:  offset += 4;",
          "4428:  offset = parse_padding(tvb, offset, 8, pad_tree, \"paddingGuidAlign\");",
          "4430:  offset = parse_guid(tvb, offset, tree, &guid, \"GUID\");",
          "4432:  ulId = tvb_get_letohl(tvb, offset);",
          "4433:  proto_tree_add_uint(tree, hf_mswsp_cdbcolid_ulid, tvb, offset, 4, ulId);",
          "4434:  offset += 4;",
          "4436:  if (eKind == DBKIND_GUID_NAME) {",
          "4437:   char *name;",
          "4438:   int len = ulId;",
          "4439:   name = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len, ENC_LITTLE_ENDIAN | ENC_UCS_2);",
          "4440:   proto_item_append_text(tree_item, \" \\\"%s\\\"\", name);",
          "4441:   proto_tree_add_string_format_value(tree, hf_mswsp_cdbcolid_vstring, tvb, offset, len, name,  \"\\\"%s\\\"\", name);",
          "4442:   offset += len;",
          "4443:  } else if (eKind == DBKIND_GUID_PROPID) {",
          "4444:   proto_item_append_text(tree_item, \" %08x\", ulId);",
          "4445:  } else {",
          "4446:   proto_item_append_text(tree_item, \"<INVALID>\");",
          "4447:  }",
          "4449:  proto_item_set_end(tree_item, tvb, offset);",
          "4451:  return offset;",
          "4452: }",
          "4454: static int parse_CDbProp(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, struct GuidPropertySet *propset, const char *fmt, ...)",
          "4455: {",
          "4456:  static const value_string EMPTY_VS[] = {{0, NULL}};",
          "4457:  const value_string *vs = (propset && propset->id_map) ? propset->id_map : EMPTY_VS;",
          "4458:  guint32 id, opt, status;",
          "4459:  struct CBaseStorageVariant value;",
          "4460:  proto_item *item;",
          "4461:  proto_tree *tree;",
          "4462:  const char *str, *txt;",
          "4463:  va_list ap;",
          "4465:  va_start(ap, fmt);",
          "4466:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4467:  va_end(ap);",
          "4469:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CDbProp, &item, txt);",
          "4471:  id = tvb_get_letohl(tvb, offset);",
          "4472:  str = val_to_str(id, vs, \"0x%08x\");",
          "4473:  proto_tree_add_string_format_value(tree, hf_mswsp_cdbprop_id, tvb, offset, 4, str, \"%s (0x%08x)\", (str[0] == '0' ? \"\" : str), id);",
          "4474:  offset += 4;",
          "4475:  proto_item_append_text(item, \" Id: %s\", str);",
          "4477:  opt = tvb_get_letohl(tvb, offset);",
          "4478:  proto_tree_add_uint(tree, hf_mswsp_cdbprop_options, tvb, offset, 4, opt);",
          "4479:  offset += 4;",
          "4481:  status = tvb_get_letohl(tvb, offset);",
          "4482:  proto_tree_add_uint(tree, hf_mswsp_cdbprop_status, tvb, offset, 4, status);",
          "4483:  offset += 4;",
          "4485:  offset = parse_CDbColId(tvb, offset, tree, pad_tree, \"colid\");",
          "4487:  offset = parse_CBaseStorageVariant(tvb, offset, tree, pad_tree, &value, \"vValue\");",
          "4489:  str = str_CBaseStorageVariant(&value, true);",
          "4490:  proto_item_append_text(item, \" %s\", str);",
          "4491:  proto_item_set_end(item, tvb, offset);",
          "4493:  return offset;",
          "4494: }",
          "4496: static int parse_CDbPropSet(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "4497: {",
          "4498:  int i, num;",
          "4499:  e_guid_t guid;",
          "4500:  struct GuidPropertySet *pset;",
          "4501:  proto_item *item;",
          "4502:  proto_tree *tree;",
          "4503:  const char *txt;",
          "4504:  va_list ap;",
          "4506:  va_start(ap, fmt);",
          "4507:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4508:  va_end(ap);",
          "4510:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CDbPropSet, &item, txt);",
          "4512:  offset = parse_guid(tvb, offset, tree, &guid, \"guidPropertySet\");",
          "4514:  pset = GuidPropertySet_find_guid(&guid);",
          "4516:  if (pset) {",
          "4517:   proto_item_append_text(item, \" \\\"%s\\\" (%s)\", pset->desc, pset->def);",
          "4518:  } else {",
          "4519:   const char *guid_str = guid_to_str(wmem_packet_scope(), &guid);",
          "4520:   proto_item_append_text(item, \" {%s}\", guid_str);",
          "4521:  }",
          "4523:  offset = parse_padding(tvb, offset, 4, pad_tree, \"guidPropertySet\");",
          "4525:  num = tvb_get_letohl(tvb, offset);",
          "4526:  proto_tree_add_uint(tree, hf_mswsp_cdbpropset_cprops, tvb, offset, 4,  num);",
          "4527:  offset += 4;",
          "4528:  proto_item_append_text(item, \" Num: %d\", num);",
          "4530:  for (i = 0; i<num; i++) {",
          "4531:   offset = parse_padding(tvb, offset, 4, pad_tree, \"aProp[%d]\", i);",
          "4532:   offset = parse_CDbProp(tvb, offset, tree, pad_tree, pset, \"aProp[%d]\", i);",
          "4533:  }",
          "4535:  proto_item_set_end(item, tvb, offset);",
          "4536:  return offset;",
          "4537: }",
          "4539: static int parse_PropertySetArray(tvbuff_t *tvb, int offset, int size_offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "4540: {",
          "4541:  const int offset_in = offset;",
          "4542:  guint32 size, num;",
          "4543:  int i;",
          "4544:  proto_tree *tree;",
          "4545:  proto_item *item;",
          "4546:  const char *txt;",
          "4547:  va_list ap;",
          "4549:  va_start(ap, fmt);",
          "4550:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4551:  va_end(ap);",
          "4553:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CDbPropSet_Array, &item, txt);",
          "4555:  size = tvb_get_letohl(tvb, size_offset);",
          "4556:  proto_tree_add_item(tree, hf_mswsp_msg_ConnectIn_Blob1, tvb,",
          "4557:       size_offset, 4, ENC_LITTLE_ENDIAN);",
          "4559:  num = tvb_get_letohl(tvb, offset);",
          "4560:  proto_tree_add_item(tree, hf_mswsp_msg_ConnectIn_PropSets_num, tvb,",
          "4561:       offset, 4, ENC_LITTLE_ENDIAN);",
          "4562:  offset += 4;",
          "4564:  for (i = 0; i < (int)num; i++) {",
          "4565:   offset = parse_CDbPropSet(tvb, offset, tree, pad_tree, \"PropertySet[%d]\", i);",
          "4566:  }",
          "4568:  proto_item_set_end(item, tvb, offset);",
          "4569:  DISSECTOR_ASSERT(offset - offset_in == (int)size);",
          "4570:  return offset;",
          "4571: }",
          "4573: int parse_CColumnSet(tvbuff_t *tvb, int offset, proto_tree *tree, const char *fmt, ...)",
          "4574: {",
          "4575:  guint32 count, v, i;",
          "4576:  proto_item *item;",
          "4577:  const char *txt;",
          "4578:  va_list ap;",
          "4580:  va_start(ap, fmt);",
          "4581:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4582:  va_end(ap);",
          "4584:  count = tvb_get_letohl(tvb, offset);",
          "4585:  offset += 4;",
          "4586:  proto_tree_add_subtree(tree, tvb, offset, count * 4, ett_mswsp_uin32_array, &item, txt);",
          "4587:  proto_item_append_text(item, \" Count %u [\", count);",
          "4589:  for (i=0; i<count; i++) {",
          "4590:   v = tvb_get_letohl(tvb, offset);",
          "4591:   offset += 4;",
          "4592:   if (i>0) {",
          "4593:    proto_item_append_text(item, \",%u\", v);",
          "4594:   } else {",
          "4595:    proto_item_append_text(item, \"%u\", v);",
          "4596:   }",
          "4597:  }",
          "4598:  proto_item_append_text(item, \"]\");",
          "4599:  return offset;",
          "4600: }",
          "4603: int parse_RANGEBOUNDARY(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "4604: {",
          "4605:  guint32 ulType;",
          "4606:  guint8 labelPresent;",
          "4607:  proto_item *item;",
          "4608:  proto_tree *tree;",
          "4609:  const char *txt;",
          "4610:  struct CBaseStorageVariant prval;",
          "4611:  va_list ap;",
          "4613:  va_start(ap, fmt);",
          "4614:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4615:  va_end(ap);",
          "4616:  tree =proto_tree_add_subtree (parent_tree, tvb, offset, 0, ett_RANGEBOUNDARY, &item, txt);",
          "4618:  ulType = tvb_get_letohl(tvb, offset);",
          "4619:  proto_tree_add_uint(tree, hf_mswsp_rangeboundry_ultype, tvb, offset, 4, ulType);",
          "4620:  proto_item_append_text(item, \": Type 0x%08x\", ulType);",
          "4621:  offset += 4;",
          "4623:  ZERO_STRUCT(prval);",
          "4624:  offset = parse_CBaseStorageVariant(tvb, offset, tree, pad_tree, &prval, \"prVal\");",
          "4626:  labelPresent = tvb_get_guint8(tvb, offset);",
          "4627:  proto_tree_add_string_format_value(tree, hf_mswsp_rangeboundry_labelpresent, tvb, offset, 1, \"\",  \"%s\", labelPresent ? \"True\" : \"False\");",
          "4628:  offset += 1;",
          "4630:  if (labelPresent) {",
          "4631:   guint32 ccLabel;",
          "4632:   const char *label;",
          "4633:   offset = parse_padding(tvb, offset, 4, pad_tree, \"paddingLabelPresent\");",
          "4635:   ccLabel = tvb_get_letohl(tvb, offset);",
          "4636:   proto_tree_add_uint(tree, hf_mswsp_rangeboundry_cclabel, tvb, offset, 4, ccLabel);",
          "4637:   offset += 4;",
          "4639:   label = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, 2*ccLabel, ENC_LITTLE_ENDIAN | ENC_UCS_2);",
          "4640:   proto_tree_add_string(tree, hf_mswsp_rangeboundry_label, tvb, offset, 2*ccLabel, label);",
          "4641:   proto_item_append_text(item, \" Label: \\\"%s\\\"\", label);",
          "4642:   offset += 2*ccLabel;",
          "4643:  }",
          "4645:  proto_item_append_text(item, \" Val: %s\", str_CBaseStorageVariant(&prval, true));",
          "4647:  proto_item_set_end(item, tvb, offset);",
          "4648:  return offset;",
          "4649: }",
          "4653: int parse_CRangeCategSpec(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "4654: {",
          "4655:  proto_item *item;",
          "4656:  proto_tree *tree;",
          "4657:  va_list ap;",
          "4658:  unsigned i;",
          "4659:  const char *txt;",
          "4660:  guint32 cRange;",
          "4662:  va_start(ap, fmt);",
          "4663:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4664:  va_end(ap);",
          "4665:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CRangeCategSpec, &item, txt);",
          "4667:  offset = parse_lcid(tvb, offset, tree, \"lcid\");",
          "4669:  cRange = tvb_get_letohl(tvb, offset);",
          "4670:  proto_tree_add_uint(tree, hf_mswsp_crangecategspec_crange, tvb, offset, 4, cRange);",
          "4671:  offset += 4;",
          "4673:  for (i=0; i<cRange; i++) {",
          "4674:   offset = parse_RANGEBOUNDARY(tvb, offset, tree, pad_tree, \"aRangeBegin[%u]\", i);",
          "4676:  }",
          "4678:  proto_item_set_end(item, tvb, offset);",
          "4679:  return offset;",
          "4680: }",
          "4683: int parse_CCategSpec(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "4684: {",
          "4685:  proto_item *item;",
          "4686:  proto_tree *tree;",
          "4688:  va_list ap;",
          "4689:  guint32 type;",
          "4690:  const char *txt;",
          "4691:  va_start(ap, fmt);",
          "4692:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4693:  va_end(ap);",
          "4694:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CCategSpec, &item, txt);",
          "4696:  type = tvb_get_letohl(tvb, offset);",
          "4697:  proto_tree_add_uint(tree, hf_mswsp_ccategspec_type, tvb, offset, 4, type);",
          "4698:  proto_item_append_text(item, \" Type %u\", type);",
          "4699:  offset += 4;",
          "4701:  offset = parse_CSort(tvb, offset, tree, pad_tree, \"CSort\");",
          "4703:  offset = parse_CRangeCategSpec(tvb, offset, tree, pad_tree, \"CRangeCategSpec\");",
          "4705:  proto_item_set_end(item, tvb, offset);",
          "4706:  return offset;",
          "4707: }",
          "4710: static int parse_CAggregSpec(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "4711: {",
          "4712:  proto_item *item;",
          "4713:  proto_tree *tree;",
          "4714:  va_list ap;",
          "4715:  guint8 type;",
          "4716:  guint32 ccAlias, idColumn;",
          "4717:  const char *alias, *txt;",
          "4719:  va_start(ap, fmt);",
          "4720:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4721:  va_end(ap);",
          "4722:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CAggregSpec, &item, txt);",
          "4724:  type = tvb_get_guint8(tvb, offset);",
          "4725:  proto_tree_add_uint(tree, hf_mswsp_caggregspec_type, tvb, offset, 1, type);",
          "4726:  proto_item_append_text(item, \"type: %u\", type);",
          "4727:  offset += 1;",
          "4729:  offset = parse_padding(tvb, offset, 4, pad_tree, \"padding\");",
          "4731:  ccAlias = tvb_get_letohl(tvb, offset);",
          "4732:  proto_tree_add_uint(tree, hf_mswsp_caggregspec_ccalias, tvb, offset, 1, ccAlias);",
          "4733:  offset += 4;",
          "4735:  alias = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, 2*ccAlias, ENC_LITTLE_ENDIAN | ENC_UCS_2);",
          "4736:  proto_tree_add_string(tree, hf_mswsp_caggregspec_alias, tvb, offset, 2*ccAlias, alias);",
          "4737:  offset += 2*ccAlias;",
          "4739:  idColumn = tvb_get_letohl(tvb, offset);",
          "4740:  proto_tree_add_uint(tree, hf_mswsp_caggregspec_idcolumn, tvb, offset, 1, idColumn);",
          "4741:  offset += 4;",
          "4743:     ulMaxNumToReturn, idRepresentative;",
          "4746:  proto_item_set_end(item, tvb, offset);",
          "4747:  return offset;",
          "4748: }",
          "4751: static int parse_CAggregSet(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "4752: {",
          "4753:  guint32 cCount, i;",
          "4754:  proto_item *item;",
          "4755:  proto_tree *tree;",
          "4756:  const char *txt;",
          "4758:  va_list ap;",
          "4760:  va_start(ap, fmt);",
          "4761:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4762:  va_end(ap);",
          "4763:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CAggregSet, &item, txt);",
          "4765:  cCount = tvb_get_letohl(tvb, offset);",
          "4766:  proto_tree_add_uint(tree, hf_mswsp_caggregset_count, tvb, offset, 4, cCount);",
          "4767:  offset += 4;",
          "4769:  for (i=0; i<cCount; i++) {",
          "4771:   offset = parse_CAggregSpec(tvb, offset, tree, pad_tree, \"AggregSpecs[%u]\", i);",
          "4772:  }",
          "4774:  proto_item_set_end(item, tvb, offset);",
          "4775:  return offset;",
          "4776: }",
          "4779: static int parse_CAggregSortKey(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "4780: {",
          "4781:  guint32 order;",
          "4782:  proto_item *item;",
          "4783:  proto_tree *tree;",
          "4784:  const char *txt;",
          "4786:  va_list ap;",
          "4788:  va_start(ap, fmt);",
          "4789:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4790:  va_end(ap);",
          "4791:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CAggregSortKey, &item, txt);",
          "4793:  order = tvb_get_letohl(tvb, offset);",
          "4794:  proto_tree_add_uint(tree, hf_mswsp_caggregsortkey_order, tvb, offset, 4, order);",
          "4795:  offset += 4;",
          "4797:  offset = parse_CAggregSpec(tvb, offset, tree, pad_tree, \"ColumnSpec\");",
          "4799:  proto_item_set_end(item, tvb, offset);",
          "4800:  return offset;",
          "4801: }",
          "4805: static int parse_CSortAggregSet(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "4806: {",
          "4807:  guint32 cCount, i;",
          "4808:  proto_item *item;",
          "4809:  proto_tree *tree;",
          "4810:  const char *txt;",
          "4811:  va_list ap;",
          "4813:  va_start(ap, fmt);",
          "4814:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4815:  va_end(ap);",
          "4816:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CSortAggregSet, &item, txt);",
          "4818:  cCount = tvb_get_letohl(tvb, offset);",
          "4819:  proto_tree_add_uint(tree, hf_mswsp_csortaggregset_count, tvb, offset, 4, cCount);",
          "4820:  offset += 4;",
          "4822:  for (i=0; i<cCount; i++) {",
          "4824:   offset = parse_CAggregSortKey(tvb, offset, tree, pad_tree, \"SortKeys[%u]\", i);",
          "4825:  }",
          "4827:  proto_item_set_end(item, tvb, offset);",
          "4828:  return offset;",
          "4829: }",
          "4831: enum CInGroupSortAggregSet_type {",
          "4835:  GroupIdValue = 0x03",
          "4836: };",
          "4838: static int parse_CInGroupSortAggregSet_type(tvbuff_t *tvb, int offset, proto_tree *tree, enum CInGroupSortAggregSet_type *type)",
          "4839: {",
          "4840:  guint8 tmp = tvb_get_guint8(tvb, offset);",
          "4841:  switch(tmp) {",
          "4842:   case GroupIdDefault:",
          "4844:    break;",
          "4845:   case GroupIdMinValue:",
          "4847:    break;",
          "4848:   case GroupIdNull:",
          "4850:    break;",
          "4851:   case GroupIdValue:",
          "4853:    break;",
          "4854:   default:",
          "4855:    DISSECTOR_ASSERT(false);",
          "4856:    break;",
          "4857:  }",
          "4858:  proto_tree_add_uint(tree, hf_mswsp_cingroupsortaggregset_type, tvb, offset, 1, *type);",
          "4859:  return offset + 1;",
          "4860: }",
          "4863: static int parse_CInGroupSortAggregSet(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "4864: {",
          "4865:  proto_item *item;",
          "4866:  proto_tree *tree;",
          "4867:  va_list ap;",
          "4868:  enum CInGroupSortAggregSet_type type;",
          "4869:  const char *txt;",
          "4871:  va_start(ap, fmt);",
          "4872:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4873:  va_end(ap);",
          "4874:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CInGroupSortAggregSet, &item, txt);",
          "4876:  offset = parse_CInGroupSortAggregSet_type(tvb, offset, tree, &type);",
          "4877:  offset = parse_padding(tvb, offset, 4, pad_tree, \"CInGroupSortAggregSet\");",
          "4879:  if (type == GroupIdValue) {",
          "4880:   struct CBaseStorageVariant id;",
          "4881:   offset = parse_CBaseStorageVariant(tvb, offset, tree, pad_tree, &id, \"inGroupId\");",
          "4882:  }",
          "4884:  offset = parse_CSortAggregSet(tvb, offset, tree, pad_tree, \"SortAggregSet\");",
          "4886:  proto_item_set_end(item, tvb, offset);",
          "4887:  return offset;",
          "4888: }",
          "4892: static int parse_CInGroupSortAggregSets(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "4893: {",
          "4894:  guint32 cCount, i;",
          "4895:  proto_item *item;",
          "4896:  proto_tree *tree;",
          "4897:  const char *txt;",
          "4898:  va_list ap;",
          "4900:  va_start(ap, fmt);",
          "4901:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4902:  va_end(ap);",
          "4904:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CInGroupSortAggregSets, &item, txt);",
          "4906:  cCount = tvb_get_letohl(tvb, offset);",
          "4907:  proto_tree_add_uint(tree, hf_mswsp_cingroupsortaggregsets_count, tvb, offset, 4, cCount);",
          "4908:  offset += 4;",
          "4910:  for (i=0; i<cCount; i++) {",
          "4912:   offset = parse_CInGroupSortAggregSet(tvb, offset, tree, pad_tree, \"SortSets[%u]\", i);",
          "4913:  }",
          "4915:  proto_item_set_end(item, tvb, offset);",
          "4916:  return offset;",
          "4917: }",
          "4920: int parse_CCategorizationSpec(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "4921: {",
          "4922:  guint32 cMaxResults;",
          "4923:  proto_item *item;",
          "4924:  proto_tree *tree;",
          "4925:  const char *txt;",
          "4927:  va_list ap;",
          "4929:  va_start(ap, fmt);",
          "4930:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4931:  va_end(ap);",
          "4932:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CCategorizationSpec, &item, txt);",
          "4935:  offset = parse_CColumnSet(tvb, offset, tree, \"csColumns\");",
          "4938:  offset = parse_CCategSpec(tvb, offset, tree, pad_tree, \"Spec\");",
          "4941:  offset = parse_CAggregSet(tvb, offset, tree, pad_tree, \"AggregSet\");",
          "4944:  offset = parse_CSortAggregSet(tvb, offset, tree, pad_tree, \"SortAggregSet\");",
          "4947:  offset = parse_CInGroupSortAggregSets(tvb, offset, tree, pad_tree, \"InGroupSortAggregSets\");",
          "4949:  cMaxResults = tvb_get_letohl(tvb, offset);",
          "4950:  proto_tree_add_int(tree, hf_mswsp_categorizationspec_cmaxres, tvb, offset, 4, cMaxResults);",
          "4951:  offset += 4;",
          "4953:  proto_item_set_end(item, tvb, offset);",
          "4954:  return offset;",
          "4955: }",
          "4957: static int parse_BooleanOptions(tvbuff_t *tvb, int offset, proto_tree *parent_tree)",
          "4958: {",
          "4959:  proto_item *item;",
          "4960:  proto_tree *tree;",
          "4961:  guint32 opt = tvb_get_letohl(tvb, offset);",
          "4962:  item = proto_tree_add_uint_format(parent_tree, hf_mswsp_bool_options,  tvb, offset, 4, opt,",
          "4963:            \"uBooleanOptions: 0x%08x\", opt);",
          "4964:  tree = proto_item_add_subtree(item, ett_mswsp_bool_options);",
          "4965:  proto_tree_add_uint(tree, hf_mswsp_bool_options_cursor, tvb, offset, 1, opt & 0x7);",
          "4966:  proto_tree_add_boolean(tree, hf_mswsp_bool_options_async, tvb, offset,",
          "4967:          4, opt);",
          "4968:  proto_tree_add_boolean(tree, hf_mswsp_bool_options_firstrows, tvb, offset,",
          "4969:          4, opt);",
          "4970:  proto_tree_add_boolean(tree, hf_mswsp_bool_options_holdrows, tvb, offset,",
          "4971:          4, opt);",
          "4972:  proto_tree_add_boolean(tree, hf_mswsp_bool_options_chaptered, tvb, offset,",
          "4973:          4, opt);",
          "4974:  proto_tree_add_boolean(tree, hf_mswsp_bool_options_useci, tvb, offset,",
          "4975:          4, opt);",
          "4976:  proto_tree_add_boolean(tree, hf_mswsp_bool_options_defertrim, tvb, offset,",
          "4977:          4, opt);",
          "4978:  proto_tree_add_boolean(tree, hf_mswsp_bool_options_rowsetevents, tvb, offset,",
          "4979:          4, opt);",
          "4980:  proto_tree_add_boolean(tree, hf_mswsp_bool_options_dontcomputeexpensive, tvb, offset,",
          "4981:          4, opt);",
          "4982:  offset += 4;",
          "4984:  return offset;",
          "4985: }",
          "4986: int parse_CRowsetProperties(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree _U_, const char *fmt, ...)",
          "4987: {",
          "4988:  guint32 maxres, timeout;",
          "4989:  proto_item *item;",
          "4990:  proto_tree *tree;",
          "4991:  const char *txt;",
          "4993:  va_list ap;",
          "4995:  va_start(ap, fmt);",
          "4996:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "4998:  va_end(ap);",
          "4999:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CRowsetProperties, &item, txt);",
          "5001:  offset = parse_BooleanOptions(tvb, offset, tree);",
          "5003:  proto_tree_add_item(tree, hf_mswsp_crowsetprops_ulmaxopenrows, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5004:  offset += 4;",
          "5006:  proto_tree_add_item(tree, hf_mswsp_crowsetprops_ulmemusage, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5007:  offset += 4;",
          "5009:  maxres = tvb_get_letohl(tvb, offset);",
          "5010:  proto_tree_add_uint(tree, hf_mswsp_crowsetprops_cmaxresults, tvb, offset, 4, maxres);",
          "5011:  offset += 4;",
          "5013:  timeout = tvb_get_letohl(tvb, offset);",
          "5014:  proto_tree_add_uint(tree, hf_mswsp_crowsetprops_ccmdtimeout, tvb, offset, 4, timeout);",
          "5015:  offset += 4;",
          "5017:  proto_item_set_end(item, tvb, offset);",
          "5018:  return offset;",
          "5019: }",
          "5021: int parse_CPidMapper(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "5022: {",
          "5023:  proto_item *item;",
          "5024:  proto_tree *tree;",
          "5025:  va_list ap;",
          "5026:  guint32 count, i;",
          "5027:  const char *txt;",
          "5029:  va_start(ap, fmt);",
          "5030:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "5031:  va_end(ap);",
          "5033:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CPidMapper, &item, txt);",
          "5035:  count = tvb_get_letohl(tvb, offset);",
          "5036:  proto_tree_add_uint(tree, hf_mswsp_cpidmapper_count, tvb, offset, 4, count);",
          "5037:  offset += 4;",
          "5039:  offset = parse_padding(tvb, offset, 8, pad_tree, \"CPidMapper_PropSpec\");",
          "5041:  for (i=0; i<count; i++) {",
          "5042:   struct CFullPropSpec v;",
          "5043:   ZERO_STRUCT(v);",
          "5045:   offset = parse_padding(tvb, offset, 4, pad_tree,",
          "5046:           \"CPidMapper_PropSpec[%u]\", i);",
          "5047:   offset = parse_CFullPropSpec(tvb, offset, tree, pad_tree, &v, \"PropSpec[%u]\", i);",
          "5048:  }",
          "5050:  proto_item_set_end(item, tvb, offset);",
          "5051:  return offset;",
          "5052: }",
          "5055: int parse_CColumnGroup(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree _U_, const char *fmt, ...)",
          "5056: {",
          "5057:  proto_tree *tree;",
          "5058:  proto_item *item, *ti;",
          "5059:  va_list ap;",
          "5060:  const char *txt;",
          "5061:  guint32 count, groupPid, i;",
          "5063:  va_start(ap, fmt);",
          "5064:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "5065:  va_end(ap);",
          "5067:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CColumnGroup, &item, txt);",
          "5069:  count = tvb_get_letohl(tvb, offset);",
          "5070:  proto_tree_add_uint(tree, hf_mswsp_ccolumngroup_count, tvb, offset, 4, count);",
          "5071:  offset += 4;",
          "5073:  groupPid = tvb_get_letohl(tvb, offset);",
          "5074:  ti = proto_tree_add_uint(tree, hf_mswsp_ccolumngroup_grouppid, tvb, offset, 4, groupPid);",
          "5075:  if ((0xFFFF0000 & groupPid) == 0x7FFF0000) {",
          "5076:   proto_item_append_text(ti, \" Idx: %u\", groupPid & 0xFFFF);",
          "5077:  } else {",
          "5078:   proto_item_append_text(ti, \"<Invalid>\");",
          "5079:  }",
          "5080:  offset += 4;",
          "5082:  for (i=0; i<count; i++) {",
          "5084:   guint32 pid, weight;",
          "5085:   pid = tvb_get_letohl(tvb, offset);",
          "5086:   weight = tvb_get_letohl(tvb, offset + 4);",
          "5087:   proto_tree_add_uint_format(tree, hf_mswsp_ccolumngroup_pid, tvb, offset, 8, pid, \"Props[%u]: pid: %u weight: %u\", i, pid, weight);",
          "5088:   offset += 8;",
          "5089:  }",
          "5091:  proto_item_set_end(item, tvb, offset);",
          "5092:  return offset;",
          "5093: }",
          "5096: int parse_CColumnGroupArray(tvbuff_t *tvb, int offset, proto_tree *parent_tree, proto_tree *pad_tree, const char *fmt, ...)",
          "5097: {",
          "5098:  proto_tree *tree;",
          "5099:  proto_item *item;",
          "5100:  va_list ap;",
          "5101:  const char *txt;",
          "5103:  guint32 count, i;",
          "5105:  va_start(ap, fmt);",
          "5106:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "5107:  va_end(ap);",
          "5108:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CColumnGroupArray, &item, txt);",
          "5110:  count = tvb_get_letohl(tvb, offset);",
          "5111:  proto_tree_add_uint(tree, hf_mswsp_ccolumngrouparray_count, tvb, offset, 4, count);",
          "5112:  offset += 4;",
          "5114:  for (i=0; i<count; i++) {",
          "5115:   offset = parse_padding(tvb, offset, 4, pad_tree, \"aGroupArray[%u]\", i);",
          "5116:   offset = parse_CColumnGroup(tvb, offset, tree, pad_tree, \"aGroupArray[%u]\", i);",
          "5117:  }",
          "5119:  proto_item_set_end(item, tvb, offset);",
          "5120:  return offset;",
          "5121: }",
          "5123: static int parse_UInt32Array(tvbuff_t *tvb, int offset, proto_tree *parent_tree, guint32 count, const char *item_name, const char *fmt, ...)",
          "5124: {",
          "5125:  guint32 v, i;",
          "5126:  proto_tree *tree;",
          "5127:  proto_item *item;",
          "5128:  const char *txt;",
          "5130:  va_list ap;",
          "5132:  va_start(ap, fmt);",
          "5133:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "5134:  va_end(ap);",
          "5136:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_Array, &item, txt);",
          "5138:  for (i=0; i<count; i++) {",
          "5139:   v = tvb_get_letohl(tvb, offset);",
          "5140:   proto_tree_add_uint_format(tree, hf_mswsp_int32array_value, tvb, offset, 4, v, \"%s[%u] = %u\", item_name,i, v);",
          "5141:   offset += 4;",
          "5142:  }",
          "5143:  proto_item_set_end(item, tvb, offset);",
          "5144:  return offset;",
          "5145: }",
          "5148: static int parse_CRowSeekNext(tvbuff_t *tvb, int offset, proto_tree *parent_tree, const char *fmt, ...)",
          "5149: {",
          "5150:  proto_tree *tree;",
          "5151:  proto_item *item;",
          "5152:  const char *txt;",
          "5153:  va_list ap;",
          "5155:  va_start(ap, fmt);",
          "5156:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "5157:  va_end(ap);",
          "5159:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CRowsSeekNext, &item, txt);",
          "5161:  proto_tree_add_item(tree, hf_mswsp_crowseeknext_cskip, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5162:  offset += 4;",
          "5163:  proto_item_set_end(item, tvb, offset);",
          "5164:  return offset;",
          "5165: }",
          "5169: static int parse_CRowSeekAt(tvbuff_t *tvb, int offset, proto_tree *parent_tree, const char *fmt, ...)",
          "5170: {",
          "5171:  proto_tree *tree;",
          "5172:  proto_item *item;",
          "5173:  va_list ap;",
          "5174:  const char *txt;",
          "5176:  va_start(ap, fmt);",
          "5177:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "5178:  va_end(ap);",
          "5180:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CRowsSeekAt, &item, txt);",
          "5182:  proto_tree_add_item(tree, hf_mswsp_crowseekat_bmkoffset, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5183:  offset += 4;",
          "5186:  proto_tree_add_item(tree, hf_mswsp_crowseekat_skip, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5187:  offset += 4;",
          "5189:  proto_tree_add_item(tree, hf_mswsp_crowseekat_hregion, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5190:  offset += 4;",
          "5192:  proto_item_set_end(item, tvb, offset);",
          "5193:  return offset;",
          "5194: }",
          "5197: static int parse_CRowSeekAtRatio(tvbuff_t *tvb, int offset, proto_tree *parent_tree, const char *fmt, ...)",
          "5198: {",
          "5199:  proto_tree *tree;",
          "5200:  proto_item *item;",
          "5201:  va_list ap;",
          "5202:  const char *txt;",
          "5204:  va_start(ap, fmt);",
          "5205:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "5206:  va_end(ap);",
          "5208:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CRowsSeekAtRatio, &item, txt);",
          "5210:  proto_tree_add_item(tree, hf_mswsp_crowseekatratio_ulnumerator, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5211:  offset += 4;",
          "5214:  proto_tree_add_item(tree, hf_mswsp_crowseekatratio_uldenominator, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5215:  offset += 4;",
          "5217:  proto_tree_add_item(tree, hf_mswsp_crowseekatratio_hregion, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5218:  offset += 4;",
          "5220:  proto_item_set_end(item, tvb, offset);",
          "5221:  return offset;",
          "5222: }",
          "5225: static int parse_CRowSeekByBookmark(tvbuff_t *tvb, int offset, proto_tree *parent_tree, const char *fmt, ...)",
          "5226: {",
          "5227:  proto_tree *tree;",
          "5228:  proto_item *item;",
          "5229:  guint32 num;",
          "5230:  const char *txt;",
          "5231:  va_list ap;",
          "5233:  va_start(ap, fmt);",
          "5234:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "5235:  va_end(ap);",
          "5237:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CRowsSeekByBookmark, &item, txt);",
          "5239:  num =  tvb_get_letohl(tvb,offset);",
          "5240:  proto_tree_add_item(tree, hf_mswsp_crowseekbybookmark_cbookmarks, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5241:  offset += 4;",
          "5243:  offset = parse_UInt32Array(tvb, offset, tree, num, \"abookmark\", \"abookmarks\");",
          "5245:  num =  tvb_get_letohl(tvb,offset);",
          "5246:  proto_tree_add_item(tree, hf_mswsp_crowseekbybookmark_maxret, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5247:  offset += 4;",
          "5249:  offset = parse_UInt32Array(tvb, offset, tree, num, \"ascret\", \"ascret\");",
          "5251:  proto_item_set_end(item, tvb, offset);",
          "5252:  return offset;",
          "5253: }",
          "5255: static int get_fixed_vtype_dataize(enum vType vtype)",
          "5256: {",
          "5257:  struct vtype_data *vt_type = vType_get_type(vtype);",
          "5258:  if (vt_type) {",
          "5259:   return vt_type->size;",
          "5260:  }",
          "5261:  return -1;",
          "5262: }",
          "5264: static int parse_CRowVariantArrayInfo(tvbuff_t *tvb, int offset, proto_tree *tree, gboolean is_64bit, struct CRowVariant *variant)",
          "5265: {",
          "5266:  if (is_64bit) {",
          "5267:   variant->content.array_vector.i64.count =",
          "5268:      tvb_get_letoh64(tvb, offset);",
          "5269:   proto_tree_add_uint64(tree, hf_mswsp_crowvariantinfo_count64, tvb, offset, 8, variant->content.array_vector.i64.count);",
          "5270:   offset += 8;",
          "5271:   variant->content.array_vector.i64.array_address = tvb_get_letoh64(tvb, offset);",
          "5272:   proto_tree_add_uint64(tree, hf_mswsp_arrayvector_address64, tvb, offset, 8, variant->content.array_vector.i64.array_address);",
          "5273:   offset += 8;",
          "5275:  } else {",
          "5276:   variant->content.array_vector.i32.count =",
          "5277:      tvb_get_letohl(tvb, offset);",
          "5278:   proto_tree_add_uint(tree, hf_mswsp_crowvariantinfo_count32, tvb, offset, 4, variant->content.array_vector.i32.count );",
          "5279:   offset += 4;",
          "5280:   variant->content.array_vector.i32.array_address = tvb_get_letohl(tvb, offset);",
          "5281:   proto_tree_add_uint(tree, hf_mswsp_arrayvector_address32, tvb, offset, 4, variant->content.array_vector.i32.array_address);",
          "5282:   offset += 4;",
          "5283:  }",
          "5284:  return offset;",
          "5285: }",
          "5287: static int parse_VariantColVector(tvbuff_t *tvb, int offset, proto_tree *tree, guint64 base_address, gboolean is_64bit, struct CRowVariant *variant)",
          "5288: {",
          "5289:  guint32 i = 0;",
          "5290:  guint64 count = 0;",
          "5291:  int buf_offset = 0;",
          "5292:  proto_tree *sub_tree;",
          "5293:  struct vtype_data *vt_list_type =",
          "5294:   vType_get_type((enum vType)(variant->vtype & 0x00FF));",
          "5295:  wmem_strbuf_t *strbuf;",
          "5297:  DISSECTOR_ASSERT(vt_list_type != NULL);",
          "5298:  offset = parse_CRowVariantArrayInfo(tvb, offset, tree, is_64bit, variant);",
          "5299:  if (is_64bit) {",
          "5300:   buf_offset =",
          "5301:    (int)(variant->content.array_vector.i64.array_address - base_address);",
          "5302:   count = variant->content.array_vector.i64.count;",
          "5303:  } else {",
          "5304:   buf_offset =",
          "5305:    (int)(variant->content.array_vector.i32.array_address - base_address);",
          "5306:   count = variant->content.array_vector.i32.count;",
          "5307:  }",
          "5308:  sub_tree = proto_tree_add_subtree(tree, tvb, buf_offset, 0, ett_CRowVariant_Vector, NULL, \"values\");",
          "5309:  for (i = 0; i < count; i++) {",
          "5310:   guint64 item_address = 0;",
          "5311:   int size;",
          "5312:   union vt_single value;",
          "5313:   int len;",
          "5314:   if (is_64bit) {",
          "5315:    size = 8;",
          "5316:    item_address = tvb_get_letoh64(tvb, buf_offset + (i * size));",
          "5317:    proto_tree_add_uint64_format(sub_tree, hf_mswsp_rowvariant_item_address64, tvb, buf_offset, size, item_address, \"address[%d] 0x%lx\", i, item_address);",
          "5318:   } else {",
          "5319:    size = 4;",
          "5320:    item_address = tvb_get_letohl(tvb, buf_offset + (i * size));",
          "5321:    proto_tree_add_uint_format(sub_tree, hf_mswsp_rowvariant_item_address32, tvb, buf_offset, size, (guint32)item_address, \"address[%d] 0x%x\", i, (guint32)item_address);",
          "5322:   }",
          "5323:   strbuf = wmem_strbuf_new(wmem_packet_scope(), \"\");",
          "5324:   if (vt_list_type->size == -1) {",
          "5326:    DISSECTOR_ASSERT_HINT(vt_list_type->tvb_get_value_only != 0,",
          "5327:           \"appears this is a vector of dynamic types that we don't know yet how to handle, please submit a bug with trace\");",
          "5328:    len = vt_list_type->tvb_get_value_only(tvb, (int)(item_address - base_address), 0, &value);",
          "5329:    vt_list_type->strbuf_append(strbuf, &value);",
          "5330:   } else {",
          "5335:    len = vt_list_type->size;",
          "5336:    DISSECTOR_ASSERT_HINT(vt_list_type->tvb_get != 0,",
          "5337:            \"appears this is a vector of fixed types that we don't know yet how to handle, please submit a bug with trace\");",
          "5339:    vt_list_type->tvb_get(tvb, (int)(item_address - base_address), &value);",
          "5340:    vt_list_type->strbuf_append(strbuf, &value);",
          "5341:   }",
          "5342:   proto_tree_add_string(sub_tree, hf_mswsp_rowvariant_item_value, tvb, (gint)(item_address - base_address), len, wmem_strbuf_get_str(strbuf));",
          "5343:  }",
          "5344:  return offset;",
          "5345: }",
          "5347: static int parse_VariantCol(tvbuff_t *tvb, int offset, proto_tree *parent_tree, guint64 base_address, guint32 length _U_, gboolean is_64bit, struct CRowVariant *variant, const char *fmt, ...)",
          "5348: {",
          "5349:  proto_tree *tree;",
          "5350:  proto_item *item;",
          "5352:  va_list ap;",
          "5353:  struct vtype_data *vt_type;",
          "5354:  const char *modifier = \"\", *txt;",
          "5355:  int size;",
          "5356:  guint16 vtype_high;",
          "5358:  va_start(ap, fmt);",
          "5359:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "5360:  va_end(ap);",
          "5362:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_CRowVariant, &item, txt);",
          "5364:  variant->vtype = tvb_get_letohs(tvb, offset);",
          "5365:  vt_type = vType_get_type((enum vType)variant->vtype);",
          "5366:  DISSECTOR_ASSERT(vt_type != NULL);",
          "5368:  vtype_high = (variant->vtype & 0xFF00);",
          "5369:  if (vtype_high) {",
          "5370:   if (vtype_high == VT_VECTOR) {",
          "5371:    modifier = \"|VT_VECTOR\";",
          "5372:   } else if (vtype_high == VT_ARRAY) {",
          "5373:    modifier = \"|VT_ARRAY\";",
          "5374:   } else {",
          "5375:    modifier = \"|Unknown, possibly error\";",
          "5376:   }",
          "5377:  }",
          "5379:  proto_tree_add_string_format_value(tree, hf_mswsp_rowvariant_vtype, tvb, offset, 2, vt_type->str, \"%s%s\", vt_type->str, modifier);",
          "5380:  offset += 2;",
          "5382:  proto_tree_add_item(tree, hf_mswsp_rowvariant_reserved1, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5383:  variant->reserved1 = tvb_get_letohs(tvb, offset);",
          "5385:  offset += 2;",
          "5386:  proto_tree_add_item(tree, hf_mswsp_rowvariant_reserved2, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5387:  variant->reserved2 = tvb_get_letohl(tvb, offset);",
          "5388:  offset += 4;",
          "5390:  size = get_fixed_vtype_dataize((enum vType)(variant->vtype & 0x00FF));",
          "5392:  if (vtype_high == VT_VECTOR || vtype_high == VT_ARRAY) {",
          "5393:   offset = parse_VariantColVector(tvb, offset, tree, base_address,",
          "5394:           is_64bit, variant);",
          "5395:  } else {",
          "5396:   wmem_strbuf_t *strbuf = wmem_strbuf_new(wmem_packet_scope(), \"\");",
          "5397:   if (size != -1) {",
          "5399:    const char* desc = vt_type->str;",
          "5401:    DISSECTOR_ASSERT_HINT(vt_type->tvb_get != 0,",
          "5402:            \"appears fixed type that we don't know yet how to handle, please submit a bug with trace\");",
          "5403:    vt_type->tvb_get(tvb, offset, &variant->content);",
          "5404:    vt_type->strbuf_append(strbuf, &variant->content);",
          "5405:    proto_tree_add_string_format_value(tree, hf_mswsp_rowvariant_item_value, tvb, offset, size, desc, \"%s: %s\", desc, wmem_strbuf_get_str(strbuf));",
          "5406:   } else {",
          "5407:    gint64 value_address;",
          "5408:    int buf_offset = offset;",
          "5409:    int len;",
          "5410:    union vt_single non_fixed_size_val;",
          "5411:    DISSECTOR_ASSERT_HINT(vt_type->tvb_get_value_only != 0, \"appears this is a dynamic type that we don't know yet how to handle, please submit a bug with network trace\");",
          "5412:    if (is_64bit) {",
          "5413:     variant->content.hyperw = tvb_get_letoh64(tvb, offset);",
          "5414:     offset += 8;",
          "5415:     value_address = variant->content.hyperw;",
          "5416:     proto_tree_add_uint64(tree, hf_mswsp_rowvariant_item_address64, tvb, buf_offset, 8, value_address);",
          "5417:    } else {",
          "5418:     variant->content.longw = tvb_get_letohl(tvb, offset);",
          "5419:     offset += 4;",
          "5420:     value_address = variant->content.longw;",
          "5421:     proto_tree_add_uint(tree, hf_mswsp_rowvariant_item_address32, tvb, buf_offset, 4, (guint32)value_address);",
          "5422:    }",
          "5424:    len = vt_type->tvb_get_value_only(tvb, (int)(value_address - base_address), 0, &non_fixed_size_val);",
          "5425:    vt_type->strbuf_append(strbuf, &non_fixed_size_val);",
          "5426:    proto_tree_add_string(tree, hf_mswsp_rowvariant_item_value, tvb, (gint)(value_address - base_address), len, wmem_strbuf_get_str(strbuf));",
          "5427:   }",
          "5428:  }",
          "5430:  return offset;",
          "5431: }",
          "5433: static int parse_RowsBufferCol(tvbuff_t *tvb, int offset, guint32 row, guint32 col, struct CPMSetBindingsIn *bindingsin, struct rows_data *rowsin, gboolean b_is_64bit, proto_tree *parent_tree, const char *fmt, ...)",
          "5434: {",
          "5435:  proto_tree *tree;",
          "5436:  proto_item *item;",
          "5437:  guint32 buf_start = offset;",
          "5438:  guint32 buf_offset = buf_start + (row * bindingsin->brow);",
          "5439:  struct CTableColumn *pcol = &bindingsin->acolumns[col];",
          "5441:  static const value_string STATUS[] = {",
          "5442:   {0, \"StoreStatusOk\"},",
          "5443:   {1, \"StoreStatusDeferred\"},",
          "5444:   {2, \"StoreStatusNull\"},",
          "5445:   {0, NULL}",
          "5446:  };",
          "5448:  const char *txt;",
          "5449:  va_list ap;",
          "5451:  va_start(ap, fmt);",
          "5452:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "5453:  va_end(ap);",
          "5454:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_GetRowsColumn, &item, txt);",
          "5455:     proto_item_append_text(item, \" (%s)\", pcol->name);",
          "5456:  if (pcol->statusused) {",
          "5457:   int tmp_offset = buf_offset + pcol->statusoffset;",
          "5458:   proto_tree_add_string(tree, hf_mswsp_ctablecolumn_status, tvb, tmp_offset, 1, val_to_str(tvb_get_guint8(tvb, tmp_offset), STATUS, \"(Invalid: 0x%x)\"));",
          "5459:  }",
          "5460:  if (pcol->lengthused) {",
          "5461:   int tmp_offset = buf_offset + pcol->lengthoffset;",
          "5462:   proto_tree_add_item(tree, hf_mswsp_ctablecolumn_length, tvb, tmp_offset, 1, ENC_LITTLE_ENDIAN);",
          "5463:  }",
          "5464:  if (pcol->valueused) {",
          "5465:   int tmp_offset = buf_offset + pcol->valueoffset;",
          "5466:   struct CRowVariant variant;",
          "5467:   guint32 len = pcol->valuesize;",
          "5469:   ZERO_STRUCT(variant);",
          "5471:   if (pcol->lengthused) {",
          "5472:    len = tvb_get_letohs(tvb, buf_offset + pcol->lengthoffset) - pcol->valuesize;",
          "5473:   }",
          "5474:   if (pcol->vtype == VT_VARIANT) {",
          "5475:    parse_VariantCol(tvb, tmp_offset, tree, base_address, len, b_is_64bit, &variant, \"CRowVariant\");",
          "5476:   }",
          "5477:  }",
          "5478:  return offset;",
          "5479: }",
          "5481: static int parse_RowsBuffer(tvbuff_t *tvb, int offset, guint32 num_rows, struct CPMSetBindingsIn *bindingsin, struct rows_data *rowsin, gboolean is64bit, proto_tree *parent_tree, const char *fmt, ...)",
          "5482: {",
          "5483:  proto_tree *tree;",
          "5484:  proto_item *item;",
          "5485:  guint32 num;",
          "5486:  const char *txt;",
          "5487:  va_list ap;",
          "5489:  va_start(ap, fmt);",
          "5490:  txt = wmem_strdup_vprintf(wmem_packet_scope(), fmt, ap);",
          "5491:  va_end(ap);",
          "5493:  tree = proto_tree_add_subtree(parent_tree, tvb, offset, 0, ett_GetRowsRow, &item, txt);",
          "5495:  for (num = 0; num < num_rows; ++num) {",
          "5496:   guint32 col;",
          "5497:   proto_tree *row_tree;",
          "5498:   row_tree = proto_tree_add_subtree_format(tree, tvb, offset, 0, ett_GetRowsRow, NULL, \"Row[%d]\", num);",
          "5499:   for (col = 0; col < bindingsin->ccolumns; col++) {",
          "5500:    parse_RowsBufferCol(tvb, offset, num, col, bindingsin, rowsin, is64bit, row_tree, \"Col[%d]\", col);",
          "5501:   }",
          "5502:  }",
          "5503:  return offset;",
          "5504: }",
          "5507: static int dissect_CPMConnect(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *private_data)",
          "5508: {",
          "5509:  proto_item *ti;",
          "5510:  proto_tree *tree;",
          "5511:  gint offset = 16;",
          "5512:  guint len;",
          "5513:  guint32 version;",
          "5514:  struct message_data *data = NULL;",
          "5515:  struct mswsp_ct *ct = NULL;",
          "5517:  ti = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, -1, ENC_NA);",
          "5518:  tree = proto_item_add_subtree(ti, ett_mswsp_msg);",
          "5519:  proto_item_set_text(ti, \"CPMConnect%s\", in ? \"In\" : \"Out\");",
          "5520:  col_append_str(pinfo->cinfo, COL_INFO, \"Connect\");",
          "5522:  version = tvb_get_letohl(tvb, offset);",
          "5523:  ti = proto_tree_add_item(tree, hf_mswsp_msg_Connect_Version, tvb,",
          "5524:         offset, 4, ENC_LITTLE_ENDIAN);",
          "5525:  if (version & 0xffff0000) {",
          "5526:   proto_item_append_text(ti, \" 64 bit\");",
          "5527:  }",
          "5529:  ct = get_create_converstation_data(pinfo);",
          "5531:  if (ct) {",
          "5532:   data = find_or_create_message_data(ct, pinfo, 0xC8, in, private_data);",
          "5533:   if (data) {",
          "5534:    data->content.version = version;",
          "5535:   }",
          "5536:  }",
          "5537:  switch (version & 0xffff) {",
          "5538:  case 0x102:",
          "5539:   proto_item_append_text(ti, \" w2k8 or vista\");",
          "5540:   break;",
          "5541:  case 0x109:",
          "5542:   proto_item_append_text(ti, \" XP or w2k3, with Windows Search 4.0\");",
          "5543:   break;",
          "5544:  case 0x700:",
          "5545:   proto_item_append_text(ti, \" win7 or w2k8r2\");",
          "5546:   break;",
          "5547:  }",
          "5548:  offset += 4;",
          "5550:  if (in) {",
          "5551:   guint32 blob_size1_off, blob_size2_off;",
          "5552:   proto_tree *pad_tree;",
          "5554:   pad_tree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_mswsp_pad, &ti, \"Padding\");",
          "5556:   proto_tree_add_item(tree, hf_mswsp_msg_ConnectIn_ClientIsRemote, tvb,",
          "5557:        offset, 4, ENC_LITTLE_ENDIAN);",
          "5558:   offset += 4;",
          "5561:   blob_size1_off = offset;",
          "5562:   offset += 4;",
          "5564:   offset = parse_padding(tvb, offset, 8, pad_tree, \"_paddingcbBlob2\");",
          "5567:   blob_size2_off = offset;",
          "5568:   offset += 4;",
          "5570:   offset = parse_padding(tvb, offset, 16, pad_tree, \"_padding\");",
          "5572:   len = tvb_unicode_strsize(tvb, offset);",
          "5573:   ti = proto_tree_add_item(tree, hf_mswsp_msg_ConnectIn_MachineName, tvb,",
          "5574:          offset, len, ENC_UTF_16);",
          "5576:   proto_item_set_text(ti, \"Remote machine: %s\", tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len, ENC_LITTLE_ENDIAN | ENC_UCS_2));",
          "5577:   offset += len;",
          "5579:   len = tvb_unicode_strsize(tvb, offset);",
          "5580:   ti = proto_tree_add_item(tree, hf_mswsp_msg_ConnectIn_UserName, tvb,",
          "5581:          offset, len, ENC_UTF_16);",
          "5582:   proto_item_set_text(ti, \"User: %s\", tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len, ENC_LITTLE_ENDIAN | ENC_UCS_2));",
          "5583:   offset += len;",
          "5585:   offset = parse_padding(tvb, offset, 8, pad_tree, \"_paddingcPropSets\");",
          "5587:   offset = parse_PropertySetArray(tvb, offset, blob_size1_off, tree, pad_tree, \"PropSets\");",
          "5589:   offset = parse_padding(tvb, offset, 8, pad_tree, \"paddingExtPropset\");",
          "5591:   offset = parse_PropertySetArray(tvb, offset, blob_size2_off, tree, pad_tree, \"ExtPropset\");",
          "5593:   offset = parse_padding(tvb, offset, 8, pad_tree, \"???\");",
          "5595:   DISSECTOR_ASSERT(offset == (int)tvb_reported_length(tvb));",
          "5598:   proto_tree_move_item(tree, ti, proto_tree_get_parent(pad_tree));",
          "5599:  } else {",
          "5601:  }",
          "5602:  return tvb_reported_length(tvb);",
          "5603: }",
          "5605: static int dissect_CPMDisconnect(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree _U_, gboolean in _U_, void *data _U_)",
          "5606: {",
          "5607:  col_append_str(pinfo->cinfo, COL_INFO, \"Disconnect\");",
          "5608:  return tvb_reported_length(tvb);",
          "5609: }",
          "5611: static int dissect_CPMCreateQuery(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *data _U_)",
          "5612: {",
          "5613:  gint offset = 16;",
          "5614:  proto_item *item;",
          "5615:  proto_tree *tree;",
          "5617:  item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, -1, ENC_NA);",
          "5618:  tree = proto_item_add_subtree(item, ett_mswsp_msg);",
          "5620:  proto_item_set_text(item, \"CPMCreateQuery%s\", in ? \"In\" : \"Out\");",
          "5621:  col_append_str(pinfo->cinfo, COL_INFO, \"CreateQuery\");",
          "5623:  if (in) {",
          "5624:   proto_item *ti;",
          "5625:   proto_tree *pad_tree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_mswsp_pad, &ti, \"Padding\");",
          "5626:   guint8 CColumnSetPresent, CRestrictionPresent, CSortSetPresent, CCategorizationSetPresent;",
          "5627:   guint32 size = tvb_get_letohl(tvb, offset);",
          "5628:   proto_tree_add_uint(tree, hf_mswsp_msg_cpmcreatequery_size, tvb, offset, 4, size);",
          "5629:   offset += 4;",
          "5631:   CColumnSetPresent = tvb_get_guint8(tvb, offset);",
          "5632:   proto_tree_add_uint_format_value(tree, hf_mswsp_msg_cpmcreatequery_ccolumnsetpresent, tvb, offset, 1, CColumnSetPresent, \"%s\", CColumnSetPresent ? \"True\" : \"False\");",
          "5633:   offset += 1;",
          "5635:   if (CColumnSetPresent) {",
          "5636:    offset = parse_padding(tvb, offset, 4, pad_tree, \"paddingCColumnSetPresent\");",
          "5637:    offset = parse_padding(tvb, offset, 4, pad_tree, \"paddingCColumnSetPresent\");",
          "5638:    offset = parse_CColumnSet(tvb, offset, tree, \"CColumnSet\");",
          "5639:   }",
          "5641:   CRestrictionPresent = tvb_get_guint8(tvb, offset);",
          "5642:   proto_tree_add_uint_format_value(tree, hf_mswsp_msg_cpmcreatequery_crestrictionpresent, tvb, offset, 1, CColumnSetPresent,\"%s\", CColumnSetPresent ? \"True\" : \"False\");",
          "5643:   offset += 1;",
          "5644:   if (CRestrictionPresent) {",
          "5645:    offset = parse_CRestrictionArray(tvb, offset, tree, pad_tree, \"RestrictionArray\");",
          "5646:   }",
          "5648:   CSortSetPresent = tvb_get_guint8(tvb, offset);",
          "5649:   proto_tree_add_uint_format_value(tree, hf_mswsp_msg_cpmcreatequery_csortpresent, tvb, offset, 1, CSortSetPresent, \"%s\", CSortSetPresent ? \"True\" : \"False\");",
          "5650:   offset += 1;",
          "5651:   if (CSortSetPresent) {",
          "5652:    offset = parse_padding(tvb, offset, 4, tree, \"paddingCSortSetPresent\");",
          "5654:    proto_tree_add_item(tree, hf_mswsp_msg_cpmcreatequery_csortset_xxx, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "5655:    offset += 8;",
          "5657:    offset = parse_CSortSet(tvb, offset, tree, pad_tree, \"SortSet\");",
          "5658:   }",
          "5660:   CCategorizationSetPresent = tvb_get_guint8(tvb, offset);",
          "5661:   proto_tree_add_uint_format_value(tree, hf_mswsp_msg_cpmcreatequery_ccategpresent, tvb, offset, 1, CCategorizationSetPresent, \"%s\", CCategorizationSetPresent ? \"True\" : \"False\");",
          "5662:   offset += 1;",
          "5664:   if (CCategorizationSetPresent) {",
          "5665:    guint32 count, i;",
          "5666:    offset = parse_padding(tvb, offset, 4, pad_tree, \"paddingCCategorizationSetPresent\");",
          "5668:    count = tvb_get_letohl(tvb, offset);",
          "5669:    proto_tree_add_uint(tree, hf_mswsp_msg_cpmcreatequery_ccateg_count, tvb, offset, 4, count);",
          "5670:    offset += 4;",
          "5671:    for (i=0; i<count; i++) {",
          "5672:     offset = parse_CCategorizationSpec(tvb, offset, tree, pad_tree, \"categories[%u]\", i);",
          "5673:    }",
          "5674:   }",
          "5676:   offset = parse_padding(tvb, offset, 4, tree, \"XXXX\");",
          "5678:   offset = parse_CRowsetProperties(tvb, offset, tree, pad_tree, \"RowSetProperties\");",
          "5680:   offset = parse_CPidMapper(tvb, offset, tree, pad_tree, \"PidMapper\");",
          "5682:   parse_CColumnGroupArray(tvb, offset, tree, pad_tree, \"GroupArray\");",
          "5684:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcreatequery_trueseq, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5685:   offset += 4;",
          "5686:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcreatequery_workid, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5687:   offset += 4;",
          "5693:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcreatequery_cursors, tvb, offset, -1, ENC_NA);",
          "5694:  }",
          "5696:  return tvb_reported_length(tvb);",
          "5697: }",
          "5699: static int dissect_CPMFreeCursor(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree _U_, gboolean in _U_, void *data _U_)",
          "5700: {",
          "5701:  col_append_str(pinfo->cinfo, COL_INFO, \"FreeCursor\");",
          "5702:  return tvb_reported_length(tvb);",
          "5703: }",
          "5705: static int dissect_CPMGetRows(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *private_data)",
          "5706: {",
          "5707:  struct mswsp_ct *ct = NULL;",
          "5708:  gint offset = 16;",
          "5709:  proto_item *item;",
          "5710:  proto_tree *tree;",
          "5711:  proto_tree *seek_tree;",
          "5712:  guint32 eType = 0;",
          "5714:  item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, in ? 0 : -1, ENC_NA);",
          "5715:  tree = proto_item_add_subtree(item, ett_mswsp_msg);",
          "5717:  proto_item_set_text(item, \"GetRows%s\", in ? \"In\" : \"Out\");",
          "5718:  col_append_str(pinfo->cinfo, COL_INFO, \"GetRows\");",
          "5720:  ct = get_create_converstation_data(pinfo);",
          "5721:  if (in) {",
          "5723:   struct message_data *data = find_or_create_message_data(ct, pinfo,0xCC,in, private_data);",
          "5725:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrows_hcursor, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5726:   offset += 4;",
          "5728:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrows_rowstotransfer, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5729:   offset += 4;",
          "5731:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrows_rowwidth, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5732:   offset += 4;",
          "5734:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrows_cbseek, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5735:   offset += 4;",
          "5737:   data->content.rowsin.cbreserved = tvb_get_letohl(tvb, offset);",
          "5738:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrows_cbreserved, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5739:   offset += 4;",
          "5741:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrows_cbreadbuffer, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5742:   offset += 4;",
          "5744:   data->content.rowsin.ulclientbase = tvb_get_letohl(tvb, offset);",
          "5745:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrows_ulclientbase, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5746:   offset += 4;",
          "5748:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrows_fbwdfetch, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5749:   offset += 4;",
          "5751:   eType = tvb_get_letohl(tvb, offset);",
          "5752:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrows_etype, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5753:   offset += 4;",
          "5755:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrows_chapt, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5756:   offset += 4;",
          "5758:   seek_tree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_SeekDescription, NULL, \"SeekDescription\");",
          "5759:   switch (eType) {",
          "5761:    break;",
          "5763:    parse_CRowSeekNext(tvb, offset, seek_tree, \"CRowSeekNext\");",
          "5764:    break;",
          "5766:    parse_CRowSeekAt(tvb, offset, seek_tree, \"CRowSeekAt\");",
          "5768:    break;",
          "5770:    parse_CRowSeekAtRatio(tvb, offset, seek_tree,  \"CRowSeekAtRatio\");",
          "5771:    break;",
          "5773:    parse_CRowSeekByBookmark(tvb, offset, seek_tree, \"CRowSeekByRatio\");",
          "5774:    break;",
          "5776:    break;",
          "5777:    DISSECTOR_ASSERT(eType <=4);",
          "5778:   }",
          "5779:  } else {",
          "5786:   guint32 num_rows = 0;",
          "5787:   proto_item *ti;",
          "5788:   proto_tree *pad_tree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_mswsp_pad, &ti, \"Padding\");",
          "5789:   struct CPMSetBindingsIn *bindingsin = find_binding_msg_data(ct, pinfo,",
          "5790:              private_data);",
          "5791:   struct rows_data *rowsin = find_rowsin_msg_data(ct, pinfo, private_data);",
          "5792:   bool b_64bit_mode = false;",
          "5793:   if (bindingsin && rowsin) {",
          "5794:    b_64bit_mode = is_64bit_mode(ct, pinfo, private_data);",
          "5795:   }",
          "5796:   num_rows = tvb_get_letohl(tvb, offset);",
          "5797:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrows_crowsreturned, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5798:   offset += 4;",
          "5800:   eType = tvb_get_letohl(tvb, offset);",
          "5801:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrows_etype, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5802:   offset += 4;",
          "5804:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrows_chapt, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5805:   offset += 4;",
          "5807:   seek_tree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_SeekDescription, NULL, \"SeekDescription\");",
          "5808:   switch (eType) {",
          "5810:    break;",
          "5812:    parse_CRowSeekNext(tvb, offset, seek_tree, \"CRowSeekNext\");",
          "5813:    break;",
          "5815:    parse_CRowSeekAt(tvb, offset, seek_tree, \"CRowSeekAt\");",
          "5817:    break;",
          "5819:    parse_CRowSeekAtRatio(tvb, offset, seek_tree,  \"CRowSeekAtRatio\");",
          "5820:    break;",
          "5822:    parse_CRowSeekByBookmark(tvb, offset, seek_tree, \"CRowSeekByRatio\");",
          "5823:    break;",
          "5825:    break;",
          "5826:   }",
          "5827:   DISSECTOR_ASSERT(eType <=4);",
          "5829:   if (bindingsin && rowsin) {",
          "5830:    offset = parse_padding(tvb, offset, rowsin->cbreserved, pad_tree,",
          "5831:            \"paddingRows\");",
          "5832:    parse_RowsBuffer(tvb, offset, num_rows, bindingsin, rowsin, b_64bit_mode, tree, \"Rows\");",
          "5833:   }",
          "5834:  }",
          "5836:  return tvb_reported_length(tvb);",
          "5838: }",
          "5840: static int dissect_CPMRatioFinished(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *data _U_)",
          "5841: {",
          "5842:  gint offset = 16;",
          "5843:  proto_item *item;",
          "5844:  proto_tree *tree;",
          "5845:  col_append_str(pinfo->cinfo, COL_INFO, \"RatioFinished\");",
          "5846:  item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, -1, ENC_NA);",
          "5847:  tree = proto_item_add_subtree(item, ett_mswsp_msg);",
          "5848:  proto_item_set_text(item, \"RationFinised%s\", in ? \"In\" : \"Out\");",
          "5849:  if (in) {",
          "5850:   proto_tree_add_item(tree, hf_mswsp_msg_cpmratiofinished_hcursor, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5851:   offset += 4;",
          "5852:   proto_tree_add_item(tree, hf_mswsp_msg_cpmratiofinished_fquick, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5853:  } else {",
          "5854:   proto_tree_add_item(tree, hf_mswsp_msg_cpmratiofinished_ulnumerator, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5855:   offset += 4;",
          "5856:   proto_tree_add_item(tree, hf_mswsp_msg_cpmratiofinished_uldenominator, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5857:   offset += 4;",
          "5858:   proto_tree_add_item(tree, hf_mswsp_msg_cpmratiofinished_crows, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5859:   offset += 4;",
          "5860:   proto_tree_add_item(tree, hf_mswsp_msg_cpmratiofinished_fnewrows, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5861:  }",
          "5863:  return tvb_reported_length(tvb);",
          "5864: }",
          "5866: static int dissect_CPMCompareBmk(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *data _U_)",
          "5867: {",
          "5868:  gint offset = 16;",
          "5869:  proto_item *item;",
          "5870:  proto_tree *tree;",
          "5872:  item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, in ? 0 : -1, ENC_NA);",
          "5873:  tree = proto_item_add_subtree(item, ett_mswsp_msg);",
          "5875:  proto_item_set_text(item, \"CompareBmk%s\", in ? \"In\" : \"Out\");",
          "5876:  col_append_str(pinfo->cinfo, COL_INFO, \"CompareBmk\");",
          "5877:  if (in) {",
          "5878:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcomparebmk_hcursor, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5879:   offset += 4;",
          "5880:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcomparebmk_chapt, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5881:   offset += 4;",
          "5882:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcomparebmk_bmkfirst, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5883:   offset += 4;",
          "5884:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcomparebmk_bmksecond, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5885:  } else {",
          "5886:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcomparebmk_dwcomparison, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5887:  }",
          "5888:  return tvb_reported_length(tvb);",
          "5889: }",
          "5891: static int dissect_CPMGetApproximatePosition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *data _U_)",
          "5892: {",
          "5893:  gint offset = 16;",
          "5894:  proto_item *item;",
          "5895:  proto_tree *tree;",
          "5897:  item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, in ? 0 : -1, ENC_NA);",
          "5898:  tree = proto_item_add_subtree(item, ett_mswsp_msg);",
          "5900:  proto_item_set_text(item, \"GetApproximatePosition%s\", in ? \"In\" : \"Out\");",
          "5901:  col_append_str(pinfo->cinfo, COL_INFO, \"GetApproximatePosition\");",
          "5902:  if (in) {",
          "5903:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetapproxpos_hcursor, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5904:   offset += 4;",
          "5905:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetapproxpos_chapt, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5906:   offset += 4;",
          "5907:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetapproxpos_bmk, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5908:  } else {",
          "5909:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetapproxpos_numerator, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5910:   offset += 4;",
          "5911:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetapproxpos_denominator, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5912:  }",
          "5913:  return tvb_reported_length(tvb);",
          "5914: }",
          "5917: static int dissect_CPMSetBindings(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *private_data)",
          "5918: {",
          "5919:  gint offset = 16;",
          "5920:  struct CPMSetBindingsIn request;",
          "5922:  col_append_str(pinfo->cinfo, COL_INFO, \"SetBindings\");",
          "5923:  if (in) {",
          "5925:   struct mswsp_ct *ct = NULL;",
          "5926:   struct message_data *data = NULL;",
          "5927:   proto_item *ti;",
          "5928:   proto_tree *tree, *pad_tree;",
          "5929:   guint32 size, num, n;",
          "5931:   ti = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, -1, ENC_NA);",
          "5932:   tree = proto_item_add_subtree(ti, ett_mswsp_msg);",
          "5934:   proto_item_set_text(ti, \"SetBindingsIn\");",
          "5936:   pad_tree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_mswsp_pad, &ti, \"Padding\");",
          "5938:   proto_tree_add_item(tree, hf_mswsp_msg_cpmsetbinding_hcursor, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5939:   request.hcursor = tvb_get_letohl(tvb, offset);",
          "5940:   offset += 4;",
          "5941:   request.brow = tvb_get_letohl(tvb, offset);",
          "5942:   proto_tree_add_item(tree, hf_mswsp_msg_cpmsetbinding_cbrow, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5943:   offset += 4;",
          "5945:   size = tvb_get_letohl(tvb, offset);",
          "5946:   request.bbindingdesc = size;",
          "5947:   proto_tree_add_item(tree, hf_mswsp_msg_cpmsetbinding_desc, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5948:   offset += 4;",
          "5950:   request.dummy = tvb_get_letohl(tvb, offset);",
          "5951:   proto_tree_add_item(tree, hf_mswsp_msg_cpmsetbinding_dummy, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5952:   offset += 4;",
          "5954:   num = tvb_get_letohl(tvb, offset);",
          "5955:   request.ccolumns = num;",
          "5956:   proto_tree_add_item(tree, hf_mswsp_msg_cpmsetbinding_ccolumns, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5957:   offset += 4;",
          "5959:   proto_tree_add_item(tree, hf_mswsp_msg_cpmsetbinding_acolumns, tvb, offset, size-4, ENC_NA);",
          "5960:   ct = get_create_converstation_data(pinfo);",
          "5961:   data = find_or_create_message_data(ct, pinfo,0xD0,in, private_data);",
          "5963:   request.acolumns = (struct CTableColumn*)wmem_alloc(wmem_file_scope(),",
          "5964:          sizeof(struct CTableColumn) * num);",
          "5965:   for (n=0; n<num; n++) {",
          "5966:    offset = parse_padding(tvb, offset, 4, pad_tree, \"padding_aColumns[%u]\", n);",
          "5967:    offset = parse_CTableColumn(tvb, offset, tree, pad_tree, &request.acolumns[n],\"aColumns[%u]\", n);",
          "5968:   }",
          "5969:   data->content.bindingsin = request;",
          "5972:  }",
          "5974:  return tvb_reported_length(tvb);",
          "5975: }",
          "5977: static int dissect_CPMGetNotify(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree _U_, gboolean in _U_, void *data _U_)",
          "5978: {",
          "5979:  col_append_str(pinfo->cinfo, COL_INFO, \"GetNotify\");",
          "5980:  return tvb_reported_length(tvb);",
          "5981: }",
          "5983: static int dissect_CPMSendNotifyOut(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in _U_, void *data _U_)",
          "5984: {",
          "5985:  gint offset = 16;",
          "5986:  proto_item *item;",
          "5987:  proto_tree *tree;",
          "5989:  col_append_str(pinfo->cinfo, COL_INFO, \"SendNotify\");",
          "5990:  item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, -1, ENC_NA);",
          "5991:  tree = proto_item_add_subtree(item, ett_mswsp_msg);",
          "5992:  proto_item_set_text(item, \"GetSendNotifyOut\");",
          "5993:  proto_tree_add_item(tree, hf_mswsp_msg_cpmsendnotify_watchnotify, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5994:  return tvb_reported_length(tvb);",
          "5995: }",
          "5997: static int dissect_CPMGetQueryStatus(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *data _U_)",
          "5998: {",
          "5999:  gint offset = 16;",
          "6000:  proto_item *item;",
          "6001:  proto_tree *tree;",
          "6003:  item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, -1, ENC_NA);",
          "6004:  tree = proto_item_add_subtree(item, ett_mswsp_msg);",
          "6006:  proto_item_set_text(item, \"GetQueryStatus%s\", in ? \"In\" : \"Out\");",
          "6007:  col_append_str(pinfo->cinfo, COL_INFO, \"GetQueryStatus\");",
          "6009:  if (in) {",
          "6011:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetquerystatus_hcursor, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6012:  } else {",
          "6014:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetquerystatus_qstatus, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6015:  }",
          "6017:  return tvb_reported_length(tvb);",
          "6018: }",
          "6020: static int dissect_CPMCiState(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *data _U_)",
          "6021: {",
          "6022:  gint offset = 16;",
          "6023:  proto_item *item;",
          "6024:  proto_tree *tree;",
          "6026:  col_append_str(pinfo->cinfo, COL_INFO, \"CiState\");",
          "6028:  if (!in) {",
          "6029:   item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, -1, ENC_NA);",
          "6030:   tree = proto_item_add_subtree(item, ett_mswsp_msg);",
          "6031:   proto_item_set_text(item, \"CiStateOut\");",
          "6032:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_cbstruct, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6033:   offset += 4;",
          "6034:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_cwordlist, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6035:   offset += 4;",
          "6036:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_cpersistindex, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6037:   offset += 4;",
          "6038:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_cqueries, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6039:   offset += 4;",
          "6040:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_cfreshtest, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6041:   offset += 4;",
          "6042:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_cfreshtest, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6043:   offset += 4;",
          "6044:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_dwmergeprogress, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6045:   offset += 4;",
          "6046:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_estate, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6047:   offset += 4;",
          "6048:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_cfiltereddocs, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6049:   offset += 4;",
          "6050:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_ctotaldocs, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6051:   offset += 4;",
          "6052:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_cpendingscans, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6053:   offset += 4;",
          "6054:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_dwindexsize, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6055:   offset += 4;",
          "6056:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_cuniquekeys, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6057:   offset += 4;",
          "6058:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_csecqdocuments, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6059:   offset += 4;",
          "6060:   proto_tree_add_item(tree, hf_mswsp_msg_cpmcistate_dwpropcachesize, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6061:  }",
          "6062:  return tvb_reported_length(tvb);",
          "6063: }",
          "6065: static int dissect_CPMFetchValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *data _U_)",
          "6066: {",
          "6067:  gint offset = 16;",
          "6068:  proto_item *item;",
          "6069:  proto_tree *tree, *pad_tree;",
          "6070:  col_append_str(pinfo->cinfo, COL_INFO, \"FetchValue\");",
          "6072:  item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, -1, ENC_NA);",
          "6073:  tree = proto_tree_add_subtree_format(parent_tree, tvb, offset, 0, ett_mswsp_msg, &item, \"FetchValue%s\", in ? \"In\" : \"Out\");",
          "6074:  pad_tree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_mswsp_pad, NULL, \"Padding\");",
          "6075:  if (in) {",
          "6076:   struct CFullPropSpec prop;",
          "6077:   proto_tree_add_item(tree, hf_mswsp_msg_cpmfetchvalue_wid, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6078:   offset += 4;",
          "6079:   proto_tree_add_item(tree, hf_mswsp_msg_cpmfetchvalue_cbsofar, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6080:   offset += 4;",
          "6081:   proto_tree_add_item(tree, hf_mswsp_msg_cpmfetchvalue_cbpropspec, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6082:   offset += 4;",
          "6083:   proto_tree_add_item(tree, hf_mswsp_msg_cpmfetchvalue_cbchunk, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6084:   offset += 4;",
          "6085:   offset = parse_CFullPropSpec(tvb, offset, tree, pad_tree, &prop,",
          "6086:           \"PropSpec\");",
          "6087:   parse_padding(tvb, offset, 4, pad_tree,\"_padding\");",
          "6088:  } else {",
          "6089:   guint32 cbValue = tvb_get_letohl(tvb, offset);",
          "6090:   proto_tree_add_item(tree, hf_mswsp_msg_cpmfetchvalue_cbvalue, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6091:   offset += 4;",
          "6092:   proto_tree_add_item(tree, hf_mswsp_msg_cpmfetchvalue_fmoreexists, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6093:   offset += 4;",
          "6094:   proto_tree_add_item(tree, hf_mswsp_msg_cpmfetchvalue_fvalueexists, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6095:   offset += 4;",
          "6096:   proto_tree_add_item(tree, hf_mswsp_msg_cpmfetchvalue_vvalue, tvb, offset, cbValue, ENC_NA);",
          "6097:  }",
          "6098:  return tvb_reported_length(tvb);",
          "6099: }",
          "6101: static int dissect_CPMGetQueryStatusEx(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *data _U_)",
          "6102: {",
          "6103:  gint offset = 16;",
          "6104:  proto_item *item;",
          "6105:  proto_tree *tree;",
          "6107:  item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, -1, ENC_NA);",
          "6108:  tree = proto_item_add_subtree(item, ett_mswsp_msg);",
          "6110:  proto_item_set_text(item, \"GetQueryStatusEx%s\", in ? \"In\" : \"Out\");",
          "6111:  col_append_str(pinfo->cinfo, COL_INFO, \"GetQueryStatusEx\");",
          "6113:  if (in) {",
          "6115:   proto_tree_add_item(tree, hf_mswsp_msg_cpmquerystatusex_hcursor, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6116:   offset += 4;",
          "6117:   proto_tree_add_item(tree, hf_mswsp_msg_cpmquerystatusex_bmk, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6118:  } else {",
          "6120:   proto_tree_add_item(tree, hf_mswsp_msg_cpmquerystatusex_qstatus, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6121:   offset += 4;",
          "6122:   proto_tree_add_item(tree, hf_mswsp_msg_cpmquerystatusex_cfiltereddocs, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6123:   offset += 4;",
          "6124:   proto_tree_add_item(tree, hf_mswsp_msg_cpmquerystatusex_cdocstofilter, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6125:   offset += 4;",
          "6126:   proto_tree_add_item(tree, hf_mswsp_msg_cpmquerystatusex_dwratiodenom, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6127:   offset += 4;",
          "6128:   proto_tree_add_item(tree, hf_mswsp_msg_cpmquerystatusex_dwrationumer, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6129:   offset += 4;",
          "6130:   proto_tree_add_item(tree, hf_mswsp_msg_cpmquerystatusex_irowbmk, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6131:   offset += 4;",
          "6132:   proto_tree_add_item(tree, hf_mswsp_msg_cpmquerystatusex_crowstotal, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6133:   offset += 4;",
          "6134:   proto_tree_add_item(tree, hf_mswsp_msg_cpmquerystatusex_maxrank, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6135:   offset += 4;",
          "6136:   proto_tree_add_item(tree, hf_mswsp_msg_cpmquerystatusex_cresultsfound, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6137:   offset += 4;",
          "6138:   proto_tree_add_item(tree, hf_mswsp_msg_cpmquerystatusex_whereid, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6139:  }",
          "6140:  return tvb_reported_length(tvb);",
          "6141: }",
          "6143: static int dissect_CPMRestartPosition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *data _U_)",
          "6144: {",
          "6145:  gint offset = 16;",
          "6146:  proto_item *item;",
          "6147:  proto_tree *tree;",
          "6149:  col_append_str(pinfo->cinfo, COL_INFO, \"CPMRestartPosition\");",
          "6151:  if (in) {",
          "6152:   item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, -1, ENC_NA);",
          "6153:   tree = proto_item_add_subtree(item, ett_mswsp_msg);",
          "6154:   proto_item_set_text(item, \"CPMRestartPosition\");",
          "6155:   proto_tree_add_item(tree, hf_mswsp_msg_cpmrestartposition_hcursor, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6156:   offset += 4;",
          "6157:   proto_tree_add_item(tree, hf_mswsp_msg_cpmrestartposition_chapt, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6158:  }",
          "6160:  col_append_str(pinfo->cinfo, COL_INFO, \"RestartPosition\");",
          "6161:  return tvb_reported_length(tvb);",
          "6162: }",
          "6164: static int dissect_CPMSetCatState(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree _U_, gboolean in _U_, void *data _U_)",
          "6165: {",
          "6166:  col_append_str(pinfo->cinfo, COL_INFO, \"SetCatState\");",
          "6167:  return tvb_reported_length(tvb);",
          "6168: }",
          "6170: static int dissect_CPMGetRowsetNotify(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *data _U_)",
          "6171: {",
          "6172:  gint offset = 16;",
          "6173:  proto_item *item;",
          "6174:  proto_tree *tree;",
          "6175:  col_append_str(pinfo->cinfo, COL_INFO, \"GetRowsetNotify\");",
          "6176:  if (!in) {",
          "6177:   guint32 word;",
          "6178:   guint8  byte;",
          "6179:   item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, -1, ENC_NA);",
          "6180:   tree = proto_item_add_subtree(item, ett_mswsp_msg);",
          "6181:   proto_item_set_text(item, \"GetRowsetNotifyOut\");",
          "6182:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrowsetnotify_wid, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6183:   offset += 4;",
          "6184:   word = tvb_get_letohl(tvb, offset);",
          "6186:   byte = word & 0x00000001;",
          "6187:   proto_tree_add_uint_format_value(tree, hf_mswsp_msg_cpmgetrowsetnotify_moreevents, tvb, offset, 1, byte, \"%s\", byte ? \"True\" : \"False\");",
          "6189:   word = word >> 1;",
          "6190:   byte = word & 0x0000007F;",
          "6191:   proto_tree_add_uint(tree, hf_mswsp_msg_cpmgetrowsetnotify_eventtype, tvb, offset, 1, byte );",
          "6194:   word = word >> 7;",
          "6195:   byte = word & 0x000000FF;",
          "6196:   proto_tree_add_uint(tree, hf_mswsp_msg_cpmgetrowsetnotify_rowsetitemstate, tvb, offset + 1, 1, byte );",
          "6199:   word = word >> 8;",
          "6200:   byte = word & 0x000000FF;",
          "6201:   proto_tree_add_uint(tree, hf_mswsp_msg_cpmgetrowsetnotify_changeditemstate, tvb, offset + 2, 1, byte );",
          "6204:   word = word >> 8;",
          "6205:   byte = word & 0x000000FF;",
          "6206:   proto_tree_add_uint(tree, hf_mswsp_msg_cpmgetrowsetnotify_rowsetevent, tvb, offset + 3, 1, byte );",
          "6207:   offset += 4;",
          "6210:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrowsetnotify_rowseteventdata1, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "6211:   offset += 8;",
          "6212:   proto_tree_add_item(tree, hf_mswsp_msg_cpmgetrowsetnotify_rowseteventdata2, tvb, offset, 8, ENC_LITTLE_ENDIAN);",
          "6214:  }",
          "6215:  return tvb_reported_length(tvb);",
          "6216: }",
          "6218: static int dissect_CPMFindIndices(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *data _U_)",
          "6219: {",
          "6220:  gint offset = 16;",
          "6221:  proto_item *item;",
          "6222:  proto_tree *tree;",
          "6223:  col_append_str(pinfo->cinfo, COL_INFO, \"FindIndices\");",
          "6224:  item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, -1, ENC_NA);",
          "6225:  tree = proto_item_add_subtree(item, ett_mswsp_msg);",
          "6226:  proto_item_set_text(item, \"FindIndices%s\", in ? \"In\" : \"Out\");",
          "6228:  if (in) {",
          "6229:   guint32 cWids;",
          "6230:   guint32 cDepthPrev;",
          "6231:   cWids = tvb_get_letohl(tvb, offset);",
          "6232:   proto_tree_add_uint(tree, hf_mswsp_msg_cpmfindindices_cwids, tvb, offset, 4, cWids);",
          "6233:   offset += 4;",
          "6234:   cDepthPrev = tvb_get_letohl(tvb, offset);",
          "6235:   proto_tree_add_uint(tree, hf_mswsp_msg_cpmfindindices_cdepthprev, tvb, offset, 4, cDepthPrev);",
          "6236:   offset += 4;",
          "6237:   offset = parse_uin32_array(tvb, offset, tree, cWids, \"pwids\");",
          "6238:   parse_uin32_array(tvb, offset, tree, cDepthPrev, \"prgiRowPrev\");",
          "6239:  } else {",
          "6240:   guint32 cDepthNext;",
          "6241:   cDepthNext = tvb_get_letohl(tvb, offset);",
          "6242:   proto_tree_add_uint(tree, hf_mswsp_msg_cpmfindindices_cdepthnext, tvb, offset, 4, cDepthNext);",
          "6243:   offset += 4;",
          "6244:   parse_uin32_array(tvb, offset, tree, cDepthNext, \"prgiRowNext\");",
          "6245:  }",
          "6246:  return tvb_reported_length(tvb);",
          "6247: }",
          "6249: static int dissect_CPMSetScopePrioritization(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *data _U_)",
          "6250: {",
          "6251:  gint offset = 16;",
          "6252:  proto_item *item;",
          "6253:  proto_tree *tree;",
          "6255:  col_append_str(pinfo->cinfo, COL_INFO, \"SetScopePrioritization\");",
          "6257:  if (in) {",
          "6258:   item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, -1, ENC_NA);",
          "6259:   tree = proto_item_add_subtree(item, ett_mswsp_msg);",
          "6260:   proto_item_set_text(item, \"SetScopePrioritizationIn\");",
          "6261:   proto_tree_add_item(tree, hf_mswsp_msg_cpmsetscopeprioritization_priority, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6262:   offset += 4;",
          "6263:   proto_tree_add_item(tree, hf_mswsp_msg_cpmsetscopeprioritization_eventfreq, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6264:  }",
          "6265:  return tvb_reported_length(tvb);",
          "6266: }",
          "6268: static int dissect_CPMGetScopeStatistics(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gboolean in, void *data _U_)",
          "6269: {",
          "6271:  gint offset = 16;",
          "6272:  proto_item *item;",
          "6273:  proto_tree *tree;",
          "6275:  item = proto_tree_add_item(parent_tree, hf_mswsp_msg, tvb, offset, in ? 0 : -1, ENC_NA);",
          "6276:  tree = proto_item_add_subtree(item, ett_mswsp_msg);",
          "6278:  proto_item_set_text(item, \"GetScopeStatistics%s\", in ? \"In\" : \"Out\");",
          "6279:  col_append_str(pinfo->cinfo, COL_INFO, \"GetScopeStatistics\");",
          "6281:  if (in) {",
          "6283:  } else {",
          "6285:   proto_tree_add_item(tree, hf_mswsp_msg_cpmsetscopestatisics_dwindexitems, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6286:   offset += 4;",
          "6287:   proto_tree_add_item(tree, hf_mswsp_msg_cpmsetscopestatisics_dwoutstandingadds, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6288:   offset += 4;",
          "6289:   proto_tree_add_item(tree, hf_mswsp_msg_cpmsetscopestatisics_dwoutstandingmodifies, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6290:  }",
          "6292:  return tvb_reported_length(tvb);",
          "6293: }",
          "6296: static const value_string msg_ids[] = {",
          "6298:  {0x000000C9, \"CPMDisconnect\"},",
          "6305:  {0x000000D0, \"CPMSetBindingsIn\"},",
          "6306:  {0x000000D1, \"CPMGetNotify\"},",
          "6307:  {0x000000D2, \"CPMSendNotifyOut\"},",
          "6309:  {0x000000D9, \"CPMCiStateInOut\"},",
          "6312:  {0x000000E8, \"CPMRestartPositionIn\"},",
          "6318:  {0, NULL}",
          "6319: };",
          "6322: static int",
          "6323: dissect_mswsp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, gboolean in, void *data)",
          "6324: {",
          "6325:  proto_tree *mswsp_tree = NULL;",
          "6326:  struct {",
          "6327:   guint32 msg;",
          "6328:   guint32 status;",
          "6329:   guint32 checksum;",
          "6330:   guint32 reserved;",
          "6331:  } hdr;",
          "6332:  int (*fn)(tvbuff_t*, packet_info*, proto_tree*, gboolean, void *data);",
          "6334:  if (tvb_reported_length(tvb) < 16) {",
          "6335:   return 0;",
          "6336:  }",
          "6338:  hdr.msg = tvb_get_letohl(tvb, 0);",
          "6340:  switch(hdr.msg) {",
          "6341:  case 0xC8:",
          "6342:   fn = dissect_CPMConnect;",
          "6343:   break;",
          "6344:  case 0xC9:",
          "6345:   fn = dissect_CPMDisconnect;",
          "6346:   break;",
          "6347:  case 0xCA:",
          "6348:   fn = dissect_CPMCreateQuery;",
          "6349:   break;",
          "6350:  case 0xCB:",
          "6351:   fn = dissect_CPMFreeCursor;",
          "6352:   break;",
          "6353:  case 0xCC:",
          "6354:   fn = dissect_CPMGetRows;",
          "6355:   break;",
          "6356:  case 0xCD:",
          "6357:   fn = dissect_CPMRatioFinished;",
          "6358:   break;",
          "6359:  case 0xCE:",
          "6360:   fn = dissect_CPMCompareBmk;",
          "6361:   break;",
          "6362:  case 0xCF:",
          "6363:   fn = dissect_CPMGetApproximatePosition;",
          "6364:   break;",
          "6365:  case 0xD0:",
          "6366:   fn = dissect_CPMSetBindings;",
          "6367:   break;",
          "6368:  case 0xD1:",
          "6369:   fn = dissect_CPMGetNotify;",
          "6370:   break;",
          "6371:  case 0xD2:",
          "6372:   fn = dissect_CPMSendNotifyOut;",
          "6373:   break;",
          "6374:  case  0xD7:",
          "6375:   fn = dissect_CPMGetQueryStatus;",
          "6376:   break;",
          "6377:  case  0xD9:",
          "6378:   fn = dissect_CPMCiState;",
          "6379:   break;",
          "6380:  case  0xE4:",
          "6381:   fn = dissect_CPMFetchValue;",
          "6382:   break;",
          "6383:  case  0xE7:",
          "6384:   fn = dissect_CPMGetQueryStatusEx;",
          "6385:   break;",
          "6386:  case  0xE8:",
          "6387:   fn = dissect_CPMRestartPosition;",
          "6388:   break;",
          "6389:  case  0xEC:",
          "6390:   fn = dissect_CPMSetCatState;",
          "6391:   break;",
          "6392:  case  0xF1:",
          "6393:   fn = dissect_CPMGetRowsetNotify;",
          "6394:   break;",
          "6395:  case  0xF2:",
          "6396:   fn = dissect_CPMFindIndices;",
          "6397:   break;",
          "6398:  case  0xF3:",
          "6399:   fn = dissect_CPMSetScopePrioritization;",
          "6400:   break;",
          "6401:  case  0xF4:",
          "6402:   fn = dissect_CPMGetScopeStatistics;",
          "6403:   break;",
          "6404:  default:",
          "6405:   return 0;",
          "6406:  }",
          "6408:  hdr.status = tvb_get_letohl(tvb, 4);",
          "6409:  hdr.checksum = tvb_get_letohl(tvb, 8);",
          "6412:  col_append_str(pinfo->cinfo, COL_PROTOCOL, \" WSP\");",
          "6415:  col_set_str(pinfo->cinfo, COL_INFO, \"WSP \");",
          "6416:  col_append_str(pinfo->cinfo, COL_INFO, in ? \"Request: \" : \"Response: \");",
          "6418:  if (tree) {",
          "6419:   proto_tree *hdr_tree;",
          "6420:   proto_item *ti, *hti;",
          "6422:   ti = proto_tree_add_item(tree, proto_mswsp, tvb, 0, -1, ENC_NA);",
          "6423:   mswsp_tree = proto_item_add_subtree(ti, ett_mswsp);",
          "6425:   hti = proto_tree_add_item(mswsp_tree, hf_mswsp_hdr, tvb, 0, 16, ENC_NA);",
          "6426:   hdr_tree = proto_item_add_subtree(hti, ett_mswsp_hdr);",
          "6428:   proto_tree_add_item(hdr_tree, hf_mswsp_hdr_msg, tvb,",
          "6429:        0, 4, ENC_LITTLE_ENDIAN);",
          "6430:   proto_item_append_text(hti, \" %s\", val_to_str(hdr.msg, VALS(msg_ids),",
          "6431:           \"(Unknown: 0x%x)\"));",
          "6433:   proto_tree_add_item(hdr_tree, hf_mswsp_hdr_status, tvb,",
          "6434:        4, 4, ENC_LITTLE_ENDIAN);",
          "6435:   if (!in || hdr.status != 0) {",
          "6436:    proto_item_append_text(hti, \" %s\",",
          "6437:            val_to_str(hdr.status, VALS(dcom_hresult_vals),",
          "6438:              \"(Unknown: 0x%x)\"));",
          "6439:   }",
          "6441:   proto_tree_add_item(hdr_tree, hf_mswsp_hdr_checksum, tvb,",
          "6442:        8, 4, ENC_LITTLE_ENDIAN);",
          "6445:   proto_tree_add_item(hdr_tree, hf_mswsp_hdr_reserved, tvb,",
          "6446:        12, 4, ENC_LITTLE_ENDIAN);",
          "6447:  }",
          "6449:  fn(tvb, pinfo, mswsp_tree, in, data);",
          "6452:  return tvb_reported_length(tvb);",
          "6453: }",
          "6459:    that calls all the protocol registration.",
          "6462: void",
          "6463: proto_register_mswsp(void)",
          "6464: {",
          "6465:  module_t *mswsp_module;",
          "6468:  static hf_register_info hf[] = {",
          "6469:   {",
          "6470:    &hf_mswsp_hdr,",
          "6471:    {",
          "6472:     \"Header\",           \"mswsp.hdr\",",
          "6473:     FT_NONE, BASE_NONE , NULL, 0,",
          "6474:     \"Message header\", HFILL",
          "6475:    }",
          "6476:   },",
          "6477:   {",
          "6478:    &hf_mswsp_hdr_msg,",
          "6479:    {",
          "6480:     \"Msg id\", \"mswsp.hdr.id\",",
          "6481:     FT_UINT32, BASE_HEX , VALS(msg_ids), 0,",
          "6482:     \"Message id\", HFILL",
          "6483:    }",
          "6484:   },",
          "6485:   {",
          "6486:    &hf_mswsp_hdr_status,",
          "6487:    {",
          "6488:     \"Status\", \"mswsp.hdr.status\",",
          "6489:     FT_UINT32, BASE_HEX , VALS(dcom_hresult_vals), 0,",
          "6490:     \"Message Status\", HFILL",
          "6491:    }",
          "6492:   },",
          "6493:   {",
          "6494:    &hf_mswsp_hdr_checksum,",
          "6495:    {",
          "6496:     \"checksum\", \"mswsp.hdr.checksum\",",
          "6497:     FT_UINT32, BASE_HEX , NULL, 0,",
          "6498:     \"Message Checksum\", HFILL",
          "6499:    }",
          "6500:   },",
          "6501:   {",
          "6502:    &hf_mswsp_hdr_reserved,",
          "6503:    {",
          "6504:     \"Reserved\", \"mswsp.hdr.reserved\",",
          "6505:     FT_UINT32, BASE_HEX , NULL, 0,",
          "6506:     \"Reserved bytes\", HFILL",
          "6507:    }",
          "6508:   },",
          "6509:   {",
          "6510:    &hf_mswsp_msg,",
          "6511:    {",
          "6512:     \"msg\", \"mswsp.msg\",",
          "6513:     FT_NONE, BASE_NONE , NULL, 0,",
          "6514:     \"Message\", HFILL",
          "6515:    }",
          "6516:   },",
          "6517:   {",
          "6518:    &hf_mswsp_msg_Connect_Version,",
          "6519:    {",
          "6520:     \"Version\", \"mswsp.Connect.version\",",
          "6521:     FT_UINT32, BASE_HEX , NULL, 0,",
          "6522:     \"OS Version\",HFILL",
          "6523:    }",
          "6524:   },",
          "6525:   {",
          "6526:    &hf_mswsp_msg_ConnectIn_ClientIsRemote,",
          "6527:    {",
          "6528:     \"Remote\", \"mswsp.ConnectIn.isRemote\",",
          "6529:     FT_BOOLEAN, BASE_HEX , NULL, 0,",
          "6530:     \"Client is remote\",HFILL",
          "6531:    }",
          "6532:   },",
          "6533:   {",
          "6534:    &hf_mswsp_msg_ConnectIn_Blob1,",
          "6535:    {",
          "6536:     \"Size\", \"mswsp.ConnectIn.propset.size\",",
          "6537:     FT_UINT32, BASE_DEC , NULL, 0,",
          "6538:     \"Size of PropSet fields\",HFILL",
          "6539:    }",
          "6540:   },",
          "6541:   {",
          "6542:    &hf_mswsp_msg_ConnectIn_MachineName,",
          "6543:    {",
          "6544:     \"Remote machine\", \"mswsp.ConnectIn.machine\",",
          "6545:     FT_STRINGZ, BASE_NONE , NULL, 0,",
          "6546:     \"Name of remote machine\",HFILL",
          "6547:    }",
          "6548:   },",
          "6549:   {",
          "6550:    &hf_mswsp_msg_ConnectIn_UserName,",
          "6551:    {",
          "6552:     \"User\", \"mswsp.ConnectIn.user\",",
          "6553:     FT_STRINGZ, BASE_NONE , NULL, 0,",
          "6554:     \"Name of remote user\",HFILL",
          "6555:    }",
          "6556:   },",
          "6557:   {",
          "6558:    &hf_mswsp_msg_ConnectIn_PropSets_num,",
          "6559:    {",
          "6560:     \"Num\", \"mswsp.ConnectIn.propset.num\",",
          "6561:     FT_UINT32, BASE_DEC , NULL, 0,",
          "6562:     \"Number of Property Sets\", HFILL",
          "6563:    }",
          "6564:   },",
          "6565:   {",
          "6566:    &hf_mswsp_bool_options,",
          "6567:    {",
          "6568:     \"uBooleanOptions\", \"mswsp.CPMCreateQuery.RowSetProperties.uBooleanOptions\",",
          "6569:     FT_UINT32, BASE_HEX, NULL, 0, \"Boolean options\", HFILL",
          "6570:    }",
          "6571:   },",
          "6572:   {",
          "6573:    &hf_mswsp_bool_options_cursor,",
          "6574:    {",
          "6575:     \"Cursor\", \"mswsp.CPMCreateQuery.RowSetProperties.uBooleanOptions\", FT_UINT8,",
          "6576:     BASE_HEX, VALS(cursor_vals), 0, \"Cursor Type\", HFILL",
          "6577:    }",
          "6578:   },",
          "6579:   {",
          "6580:    &hf_mswsp_bool_options_async,",
          "6581:    {",
          "6582:     \"eAsynchronous\", \"mswsp.CPMCreateQuery.RowSetProperties.uBooleanOptions.eAsyncronous\",",
          "6583:     FT_BOOLEAN, 32, NULL, eAsynchronous, \"The client will not wait for execution completion\", HFILL",
          "6584:    }",
          "6585:   },",
          "6586:   {",
          "6587:    &hf_mswsp_bool_options_firstrows,",
          "6588:    {",
          "6589:     \"eFirstRows\", \"mswsp.CPMCreateQuery.RowSetProperties.uBooleanOptions.eFirstRows\",",
          "6590:     FT_BOOLEAN, 32, NULL, eFirstRows, \"Return the first rows encountered, not the best matches.\", HFILL",
          "6591:    }",
          "6592:   },",
          "6593:   {",
          "6594:    &hf_mswsp_bool_options_holdrows,",
          "6595:    {",
          "6596:     \"eHoldRows\", \"mswsp.CPMCreateQuery.RowSetProperties.uBooleanOptions.eHoldRows\",",
          "6597:     FT_BOOLEAN, 32, NULL, eHoldRows, \"The server MUST NOT discard rows until the client is done with a query.\", HFILL",
          "6598:    }",
          "6599:   },",
          "6600:   {",
          "6601:    &hf_mswsp_bool_options_chaptered,",
          "6602:    {",
          "6603:     \"eChaptered\", \"mswsp.CPMCreateQuery.RowSetProperties.uBooleanOptions.eChaptered\",",
          "6604:     FT_BOOLEAN, 32, NULL, eChaptered, \"The rowset supports chapters.\", HFILL",
          "6605:    }",
          "6606:   },",
          "6607:   {",
          "6608:    &hf_mswsp_bool_options_useci,",
          "6609:    {",
          "6610:     \"eUseCI\", \"mswsp.CPMCreateQuery.RowSetProperties.uBooleanOptions.eUseCI\",",
          "6611:     FT_BOOLEAN, 32, NULL, eUseCI, \"Use the inverted index to evaluate content restrictions even if it is out of date.\", HFILL",
          "6612:    }",
          "6613:   },",
          "6614:   {",
          "6615:    &hf_mswsp_bool_options_defertrim,",
          "6616:    {",
          "6617:     \"eDeferTrimming\", \"mswsp.CPMCreateQuery.RowSetProperties.uBooleanOptions.eDeferTrimming\",",
          "6618:     FT_BOOLEAN, 32, NULL, eDeferTrimming, \"Defer Non-indexed trimming operations like scoping or security checking which can be expensive.\", HFILL",
          "6619:    }",
          "6620:   },",
          "6621:   {",
          "6622:    &hf_mswsp_bool_options_rowsetevents,",
          "6623:    {",
          "6624:     \"eEnableRowsetEvents\", \"mswsp.RowSetProperties.CPMCreateQuery.uBooleanOptions.eEnableRowsetEvents\",",
          "6625:     FT_BOOLEAN, 32, NULL, eEnableRowsetEvents, \"Enables storage of rowset events on the server side.\", HFILL",
          "6626:    }",
          "6627:   },",
          "6628:   {",
          "6629:    &hf_mswsp_bool_options_dontcomputeexpensive,",
          "6630:    {",
          "6631:     \"eDoNotComputeExpensiveProps\", \"mswsp.CPMCreateQuery.RowSetProperties.uBooleanOptions.eDoNotComputeExpensiveProps\",",
          "6632:     FT_BOOLEAN, 32, NULL, eDoNotComputeExpensiveProps, \"Prevents computation of expensive properties.\", HFILL",
          "6633:    }",
          "6634:   },",
          "6635:   {",
          "6636:    &hf_mswsp_guid_time_low,",
          "6637:    {",
          "6638:     \"time-low\", \"mswsp.guid.time_low\",",
          "6639:     FT_UINT32, BASE_HEX, NULL, 0, \"time low value\", HFILL",
          "6640:    }",
          "6641:   },",
          "6642:   {",
          "6643:    &hf_mswsp_guid_time_mid,",
          "6644:    {",
          "6645:     \"time-mid\", \"mswsp.guid.time_mid\",",
          "6646:     FT_UINT16, BASE_HEX, NULL, 0, \"time mid value\", HFILL",
          "6647:    }",
          "6648:   },",
          "6649:   {",
          "6650:    &hf_mswsp_guid_time_high,",
          "6651:    {",
          "6652:     \"time-high\", \"mswsp.guid.time_high\",",
          "6653:     FT_UINT16, BASE_HEX, NULL, 0, \"time high value\", HFILL",
          "6654:    }",
          "6655:   },",
          "6656:   {",
          "6657:    &hf_mswsp_guid_time_clock_hi,",
          "6658:    {",
          "6659:     \"clock_seq_hi_and_reserved\", \"mswsp.guid.time_clock_high\",",
          "6660:     FT_UINT8, BASE_HEX, NULL, 0, \"time clock high value\", HFILL",
          "6661:    }",
          "6662:   },",
          "6663:   {",
          "6664:    &hf_mswsp_guid_time_clock_low,",
          "6665:    {",
          "6666:     \"clock_seq_low\", \"mswsp.guid.time_clock_low\",",
          "6667:     FT_UINT8, BASE_HEX, NULL, 0, \"time clock high low\", HFILL",
          "6668:    }",
          "6669:   },",
          "6670:   {",
          "6671:    &hf_mswsp_guid_node,",
          "6672:    {",
          "6673:     \"node\", \"mswsp.guid.node\",",
          "6674:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6675:    }",
          "6676:   },",
          "6677:   {",
          "6678:    &hf_mswsp_lcid,",
          "6679:    {",
          "6680:     \"lcid\", \"mswsp.lcid\",",
          "6681:     FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL",
          "6682:    }",
          "6683:   },",
          "6684:   {",
          "6685:    &hf_mswsp_lcid_sortid,",
          "6686:    {",
          "6687:     \"Sort ID\", \"mswsp.lcid.sortid\",",
          "6688:     FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL",
          "6689:    }",
          "6690:   },",
          "6691:   {",
          "6692:    &hf_mswsp_lcid_langid,",
          "6693:    {",
          "6694:     \"Language ID\", \"mswsp.lcid.langid\",",
          "6695:     FT_UINT16, BASE_HEX, NULL, 0, NULL, HFILL",
          "6696:    }",
          "6697:   },",
          "6698:   {",
          "6699:    &hf_mswsp_cscort_column,",
          "6700:    {",
          "6701:     \"column\", \"mswsp.csort.column\",",
          "6702:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "6703:    }",
          "6704:   },",
          "6705:   {",
          "6706:    &hf_mswsp_cscort_order,",
          "6707:    {",
          "6708:     \"order\", \"mswsp.csort.order\",",
          "6709:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "6710:    }",
          "6711:   },",
          "6712:   {",
          "6713:    &hf_mswsp_cscort_individual,",
          "6714:    {",
          "6715:     \"inidvidual\", \"mswsp.csort.individual\",",
          "6716:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "6717:    }",
          "6718:   },",
          "6719:   {",
          "6720:    &hf_mswsp_cscortset_count,",
          "6721:    {",
          "6722:     \"count\", \"mswsp.csortset.count\",",
          "6723:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "6724:    }",
          "6725:   },",
          "6726:   {",
          "6727:    &hf_mswsp_ctablecolumn_vtype,",
          "6728:    {",
          "6729:     \"vType\", \"mswsp.ctablecolumn.vtype\",",
          "6730:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6731:    }",
          "6732:   },",
          "6733:   {",
          "6734:    &hf_mswsp_ctablecolumn_aggused,",
          "6735:    {",
          "6736:     \"AggreagateUsed\", \"mswsp.ctablecolumn.aggused\",",
          "6737:     FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL",
          "6738:    }",
          "6739:   },",
          "6740:   {",
          "6741:    &hf_mswsp_ctablecolumn_aggtype,",
          "6742:    {",
          "6743:     \"AggreagateType\", \"mswsp.ctablecolumn.aggtype\",",
          "6744:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6745:    }",
          "6746:   },",
          "6747:   {",
          "6748:    &hf_mswsp_ctablecolumn_valused,",
          "6749:    {",
          "6750:     \"ValueUsed\", \"mswsp.ctablecolumn.valused\",",
          "6751:     FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL",
          "6752:    }",
          "6753:   },",
          "6754:   {",
          "6755:    &hf_mswsp_ctablecolumn_valoffset,",
          "6756:    {",
          "6757:     \"ValueOffset\", \"mswsp.ctablecolumn.valused\",",
          "6758:     FT_UINT16, BASE_HEX, NULL, 0, NULL, HFILL",
          "6759:    }",
          "6760:   },",
          "6761:   {",
          "6762:    &hf_mswsp_ctablecolumn_valsize,",
          "6763:    {",
          "6764:     \"ValueSize\", \"mswsp.ctablecolumn.valsize\",",
          "6765:     FT_UINT16, BASE_HEX, NULL, 0, NULL, HFILL",
          "6766:    }",
          "6767:   },",
          "6768:   {",
          "6769:    &hf_mswsp_ctablecolumn_statused,",
          "6770:    {",
          "6771:     \"StatusUsed\", \"mswsp.ctablecolumn.statused\",",
          "6772:     FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL",
          "6773:    }",
          "6774:   },",
          "6775:   {",
          "6776:    &hf_mswsp_ctablecolumn_statoffset,",
          "6777:    {",
          "6778:     \"StatusOffset\", \"mswsp.ctablecolumn.statoffset\",",
          "6779:     FT_UINT16, BASE_HEX, NULL, 0, NULL, HFILL",
          "6780:    }",
          "6781:   },",
          "6782:   {",
          "6783:    &hf_mswsp_ctablecolumn_lenused,",
          "6784:    {",
          "6785:     \"LengthUsed\", \"mswsp.ctablecolumn.lenused\",",
          "6786:     FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL",
          "6787:    }",
          "6788:   },",
          "6789:   {",
          "6790:    &hf_mswsp_ctablecolumn_lenoffset,",
          "6791:    {",
          "6792:     \"LengthOffset\", \"mswsp.ctablecolumn.lenoffset\",",
          "6793:     FT_UINT16, BASE_HEX, NULL, 0, NULL, HFILL",
          "6794:    }",
          "6795:   },",
          "6796:   {",
          "6797:    &hf_mswsp_cfullpropspec_kind,",
          "6798:    {",
          "6799:     \"ulKind\", \"mswsp.cfullpropspec.kind\",",
          "6800:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6801:    }",
          "6802:   },",
          "6803:   {",
          "6804:    &hf_mswsp_cfullpropspec_propid,",
          "6805:    {",
          "6806:     \"propid\", \"mswsp.cfullpropspec.propid\",",
          "6807:     FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL",
          "6808:    }",
          "6809:   },",
          "6810:   {",
          "6811:    &hf_mswsp_cfullpropspec_propname,",
          "6812:    {",
          "6813:     \"propname\", \"mswsp.cfullpropspec.propname\",",
          "6814:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6815:    }",
          "6816:   },",
          "6817:   {",
          "6818:    &hf_mswsp_cproprestrict_relop,",
          "6819:    {",
          "6820:     \"relop\", \"mswsp.cproprestrict.relop\",",
          "6821:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6822:    }",
          "6823:   },",
          "6824:   {",
          "6825:    &hf_mswsp_ccoercerestrict_value,",
          "6826:    {",
          "6827:     \"value\", \"mswsp.ccoercerestrict.value\",",
          "6828:     FT_FLOAT, BASE_NONE, NULL, 0, NULL, HFILL",
          "6829:    }",
          "6830:   },",
          "6831:   {",
          "6832:    &hf_mswsp_ccontentrestrict_cc,",
          "6833:    {",
          "6834:     \"cc\", \"mswsp.ccontentrestrict.cc\",",
          "6835:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "6836:    }",
          "6837:   },",
          "6838:   {",
          "6839:    &hf_mswsp_ccontentrestrict_phrase,",
          "6840:    {",
          "6841:     \"phrase\", \"mswsp.ccontentrestrict.phrase\",",
          "6842:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6843:    }",
          "6844:   },",
          "6845:   {",
          "6846:    &hf_mswsp_ccontentrestrict_method,",
          "6847:    {",
          "6848:     \"method\", \"mswsp.ccontentrestrict.method\",",
          "6849:     FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL",
          "6850:    }",
          "6851:   },",
          "6852:   {",
          "6853:    &hf_mswsp_natlangrestrict_cc,",
          "6854:    {",
          "6855:     \"cc\", \"mswsp.ccontentrestrict.cc\",",
          "6856:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "6857:    }",
          "6858:   },",
          "6859:   {",
          "6860:    &hf_mswsp_natlangrestrict_phrase,",
          "6861:    {",
          "6862:     \"phrase\", \"mswsp.ccontentrestrict.phrase\",",
          "6863:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6864:    }",
          "6865:   },",
          "6866:   {",
          "6867:    &hf_mswsp_crestrict_ultype,",
          "6868:    {",
          "6869:     \"ulType\", \"mswsp.crestrict.ultype\",",
          "6870:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6871:    }",
          "6872:   },",
          "6873:   {",
          "6874:    &hf_mswsp_crestrict_weight,",
          "6875:    {",
          "6876:     \"Weight\", \"mswsp.crestrict.weight\",",
          "6877:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "6878:    }",
          "6879:   },",
          "6880:   {",
          "6881:    &hf_mswsp_crestrictarray_count,",
          "6882:    {",
          "6883:     \"count\", \"mswsp.crestrictarray.count\",",
          "6884:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "6885:    }",
          "6886:   },",
          "6887:   {",
          "6888:    &hf_mswsp_crestrictarray_present,",
          "6889:    {",
          "6890:     \"present\", \"mswsp.crestrictarray.present\",",
          "6891:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "6892:    }",
          "6893:   },",
          "6894:   {",
          "6895:    &hf_mswsp_cnoderestrict_cnode,",
          "6896:    {",
          "6897:     \"Weight\", \"mswsp.cnoderestrict.cnode\",",
          "6898:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "6899:    }",
          "6900:   },",
          "6901:   {",
          "6902:    &hf_mswsp_cbasestorvariant_vtype,",
          "6903:    {",
          "6904:     \"vType\", \"mswsp.cbasestorvariant.vtype\",",
          "6905:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6906:    }",
          "6907:   },",
          "6908:   {",
          "6909:    &hf_mswsp_cbasestorvariant_vvalue,",
          "6910:    {",
          "6911:     \"vValue\", \"mswsp.cbasestorvariant.vvalue\",",
          "6912:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6913:    }",
          "6914:   },",
          "6915:   {",
          "6916:    &hf_mswsp_cbasestorvariant_vdata1,",
          "6917:    {",
          "6918:     \"vData1\", \"mswsp.cbasestorvariant.vdata1\",",
          "6919:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "6920:    }",
          "6921:   },",
          "6922:   {",
          "6923:    &hf_mswsp_cbasestorvariant_vdata2,",
          "6924:    {",
          "6925:     \"vData2\", \"mswsp.cbasestorvariant.vdata2\",",
          "6926:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "6927:    }",
          "6928:   },",
          "6929:   {",
          "6930:    &hf_mswsp_cbasestorvariant_num,",
          "6931:    {",
          "6932:     \"num\", \"mswsp.cbasestorvariant.num\",",
          "6933:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "6934:    }",
          "6935:   },",
          "6936:   {",
          "6937:    &hf_mswsp_cbasestorvariant_cdims,",
          "6938:    {",
          "6939:     \"cDims\", \"mswsp.cbasestorvariant.cdims\",",
          "6940:     FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL",
          "6941:    }",
          "6942:   },",
          "6943:   {",
          "6944:    &hf_mswsp_cbasestorvariant_ffeatures,",
          "6945:    {",
          "6946:     \"fFeatures\", \"mswsp.cbasestorvariant.ffeatures\",",
          "6947:     FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL",
          "6948:    }",
          "6949:   },",
          "6950:   {",
          "6951:    &hf_mswsp_cbasestorvariant_cbelements,",
          "6952:    {",
          "6953:     \"cbElements\", \"mswsp.cbasestorvariant.cbelements\",",
          "6954:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "6955:    }",
          "6956:   },",
          "6957:   {",
          "6958:    &hf_mswsp_cbasestorvariant_rgsabound,",
          "6959:    {",
          "6960:     \"Rgsabound\", \"mswsp.cbasestorvariant.rgsabound\",",
          "6961:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6962:    }",
          "6963:   },",
          "6964:   {",
          "6965:    &hf_mswsp_cdbcolid_ekind,",
          "6966:    {",
          "6967:     \"eKind\", \"mswsp.cdbcolid.ekind\",",
          "6968:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6969:    }",
          "6970:   },",
          "6971:   {",
          "6972:    &hf_mswsp_cdbcolid_ulid,",
          "6973:    {",
          "6974:     \"ulId\", \"mswsp.cdbcolid.ulid\",",
          "6975:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "6976:    }",
          "6977:   },",
          "6978:   {",
          "6979:    &hf_mswsp_cdbcolid_vstring,",
          "6980:    {",
          "6981:     \"vString\", \"mswsp.cdbcolid.vstring\",",
          "6982:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6983:    }",
          "6984:   },",
          "6985:   {",
          "6986:    &hf_mswsp_cdbprop_id,",
          "6987:    {",
          "6988:     \"Id\", \"mswsp.cdbprop.id\",",
          "6989:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "6990:    }",
          "6991:   },",
          "6992:   {",
          "6993:    &hf_mswsp_cdbprop_options,",
          "6994:    {",
          "6995:     \"Options\", \"mswsp.cdbprop.options\",",
          "6996:     FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL",
          "6997:    }",
          "6998:   },",
          "6999:   {",
          "7000:    &hf_mswsp_cdbprop_status,",
          "7001:    {",
          "7002:     \"Status\", \"mswsp.cdbprop.status\",",
          "7003:     FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL",
          "7004:    }",
          "7005:   },",
          "7006:   {",
          "7007:    &hf_mswsp_cdbpropset_cprops,",
          "7008:    {",
          "7009:     \"cProperties\", \"mswsp.cdbpropset.cprops\",",
          "7010:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7011:    }",
          "7012:   },",
          "7013:   {",
          "7014:    &hf_mswsp_rangeboundry_ultype,",
          "7015:    {",
          "7016:     \"ulType\", \"mswsp.rangeboundry.ultype\",",
          "7017:     FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL",
          "7018:    }",
          "7019:   },",
          "7020:   {",
          "7021:    &hf_mswsp_rangeboundry_labelpresent,",
          "7022:    {",
          "7023:     \"labelPresent\", \"mswsp.rangeboundry.labelpresent\",",
          "7024:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "7025:    }",
          "7026:   },",
          "7027:   {",
          "7028:    &hf_mswsp_rangeboundry_cclabel,",
          "7029:    {",
          "7030:     \"ccLabel\", \"mswsp.rangeboundry.ultype\",",
          "7031:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7032:    }",
          "7033:   },",
          "7034:   {",
          "7035:    &hf_mswsp_rangeboundry_label,",
          "7036:    {",
          "7037:     \"Label\", \"mswsp.rangeboundry.ultype\",",
          "7038:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "7039:    }",
          "7040:   },",
          "7041:   {",
          "7042:    &hf_mswsp_crangecategspec_crange,",
          "7043:    {",
          "7044:     \"cRange\", \"mswsp.crangecategspec.crange\",",
          "7045:     FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL",
          "7046:    }",
          "7047:   },",
          "7048:   {",
          "7049:    &hf_mswsp_ccategspec_type,",
          "7050:    {",
          "7051:     \"type\", \"mswsp.ccategspec.type\",",
          "7052:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "7053:    }",
          "7054:   },",
          "7055:   {",
          "7056:    &hf_mswsp_caggregspec_type,",
          "7057:    {",
          "7058:     \"type\", \"mswsp.caggregspec.type\",",
          "7059:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "7060:    }",
          "7061:   },",
          "7062:   {",
          "7063:    &hf_mswsp_caggregspec_ccalias,",
          "7064:    {",
          "7065:     \"ccAlias\", \"mswsp.caggregspec.ccalias\",",
          "7066:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "7067:    }",
          "7068:   },",
          "7069:   {",
          "7070:    &hf_mswsp_caggregspec_alias,",
          "7071:    {",
          "7072:     \"Alias\", \"mswsp.caggregspec.alias\",",
          "7073:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "7074:    }",
          "7075:   },",
          "7076:   {",
          "7077:    &hf_mswsp_caggregspec_idcolumn,",
          "7078:    {",
          "7079:     \"idColumn\", \"mswsp.caggregspec.idcolumn\",",
          "7080:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "7081:    }",
          "7082:   },",
          "7083:   {",
          "7084:    &hf_mswsp_caggregset_count,",
          "7085:    {",
          "7086:     \"count\", \"mswsp.caggregset.count\",",
          "7087:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7088:    }",
          "7089:   },",
          "7090:   {",
          "7091:    &hf_mswsp_caggregsortkey_order,",
          "7092:    {",
          "7093:     \"order\", \"mswsp.caggregsortkey.order\",",
          "7094:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7095:    }",
          "7096:   },",
          "7097:   {",
          "7098:    &hf_mswsp_csortaggregset_count,",
          "7099:    {",
          "7100:     \"count\", \"mswsp.csortaggregset.count\",",
          "7101:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7102:    }",
          "7103:   },",
          "7104:   {",
          "7105:    &hf_mswsp_cingroupsortaggregset_type,",
          "7106:    {",
          "7107:     \"Type\", \"mswsp.cingroupsortaggregset.type\",",
          "7108:     FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL",
          "7109:    }",
          "7110:   },",
          "7111:   {",
          "7112:    &hf_mswsp_cingroupsortaggregsets_count,",
          "7113:    {",
          "7114:     \"count\", \"mswsp.cingroupsortaggregsets.count\",",
          "7115:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7116:    }",
          "7117:   },",
          "7118:   {",
          "7119:    &hf_mswsp_categorizationspec_cmaxres,",
          "7120:    {",
          "7121:     \"cMaxResults\", \"mswsp.categorizationspec.cmaxres\",",
          "7122:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7123:    }",
          "7124:   },",
          "7125:   {",
          "7126:    &hf_mswsp_crowsetprops_ulmaxopenrows,",
          "7127:    {",
          "7128:     \"ulMaxOpenRows (ignored)\", \"mswsp.crowsetprops.ulmaxopenrows\",",
          "7129:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7130:    }",
          "7131:   },",
          "7132:   {",
          "7133:    &hf_mswsp_crowsetprops_ulmemusage,",
          "7134:    {",
          "7135:     \"ulMemUsage (ignored)\", \"mswsp.crowsetprops.ulmemusage\",",
          "7136:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7137:    }",
          "7138:   },",
          "7139:   {",
          "7140:    &hf_mswsp_crowsetprops_cmaxresults,",
          "7141:    {",
          "7142:     \"cMaxResults\", \"mswsp.crowsetprops.cmaxresults\",",
          "7143:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7144:    }",
          "7145:   },",
          "7146:   {",
          "7147:    &hf_mswsp_crowsetprops_ccmdtimeout,",
          "7148:    {",
          "7149:     \"cCmdTimeout\", \"mswsp.crowsetprops.ccmdtimeout\",",
          "7150:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7151:    }",
          "7152:   },",
          "7153:   {",
          "7154:    &hf_mswsp_cpidmapper_count,",
          "7155:    {",
          "7156:     \"count\", \"mswsp.cpidmapper.count\",",
          "7157:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7158:    }",
          "7159:   },",
          "7160:   {",
          "7161:    &hf_mswsp_ccolumngroup_count,",
          "7162:    {",
          "7163:     \"count\", \"mswsp.ccolumngroup.count\",",
          "7164:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7165:    }",
          "7166:   },",
          "7167:   {",
          "7168:    &hf_mswsp_ccolumngroup_grouppid,",
          "7169:    {",
          "7170:     \"groupPid\", \"mswsp.ccolumngroup.grouppid\",",
          "7171:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7172:    }",
          "7173:   },",
          "7174:   {",
          "7175:    &hf_mswsp_ccolumngroup_pid,",
          "7176:    {",
          "7177:     \"pid\", \"mswsp.ccolumngroup.pid\",",
          "7178:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7179:    }",
          "7180:   },",
          "7181:   {",
          "7182:    &hf_mswsp_ccolumngrouparray_count,",
          "7183:    {",
          "7184:     \"count\", \"mswsp.ccolumngrouparray.count\",",
          "7185:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7186:    }",
          "7187:   },",
          "7188:   {",
          "7189:    &hf_mswsp_int32array_value,",
          "7190:    {",
          "7191:     \"value\", \"mswsp.int32array.value\",",
          "7192:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7193:    }",
          "7194:   },",
          "7195:   {",
          "7196:    &hf_mswsp_crowseeknext_cskip,",
          "7197:    {",
          "7198:     \"cskip\", \"mswsp.crowseeknext.cskip\",",
          "7199:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7200:    }",
          "7201:   },",
          "7202:   {",
          "7203:    &hf_mswsp_crowseekat_bmkoffset,",
          "7204:    {",
          "7205:     \"bmkoffset\", \"mswsp.crowseekat.bmkoffset\",",
          "7206:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7207:    }",
          "7208:   },",
          "7209:   {",
          "7210:    &hf_mswsp_crowseekat_skip,",
          "7211:    {",
          "7212:     \"skip\", \"mswsp.crowseekat.skip\",",
          "7213:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7214:    }",
          "7215:   },",
          "7216:   {",
          "7217:    &hf_mswsp_crowseekat_hregion,",
          "7218:    {",
          "7219:     \"hregion\", \"mswsp.crowseekat.hregion\",",
          "7220:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7221:    }",
          "7222:   },",
          "7223:   {",
          "7224:    &hf_mswsp_crowseekatratio_ulnumerator,",
          "7225:    {",
          "7226:     \"ulnumerator\", \"mswsp.crowseekatratio.ulnumerator\",",
          "7227:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7228:    }",
          "7229:   },",
          "7230:   {",
          "7231:    &hf_mswsp_crowseekatratio_uldenominator,",
          "7232:    {",
          "7233:     \"uldenominator\", \"mswsp.crowseekatratio.uldenominator\",",
          "7234:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7235:    }",
          "7236:   },",
          "7237:   {",
          "7238:    &hf_mswsp_crowseekatratio_hregion,",
          "7239:    {",
          "7240:     \"hregion\", \"mswsp.crowseekatratio.hregion\",",
          "7241:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7242:    }",
          "7243:   },",
          "7244:   {",
          "7245:    &hf_mswsp_crowseekbybookmark_cbookmarks,",
          "7246:    {",
          "7247:     \"cbookmarks\", \"mswsp.crowseekbybookmark.cbookmarks\",",
          "7248:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7249:    }",
          "7250:   },",
          "7251:   {",
          "7252:    &hf_mswsp_crowseekbybookmark_maxret,",
          "7253:    {",
          "7254:     \"maxret\", \"mswsp.crowseekbybookmark.maxret\",",
          "7255:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7256:    }",
          "7257:   },",
          "7258:   {",
          "7259:    &hf_mswsp_crowvariantinfo_count64,",
          "7260:    {",
          "7261:     \"count\", \"mswsp.crowvariantinfo.count64\",",
          "7262:     FT_UINT64, BASE_DEC, NULL, 0, NULL, HFILL",
          "7263:    }",
          "7264:   },",
          "7265:   {",
          "7266:    &hf_mswsp_arrayvector_address64,",
          "7267:    {",
          "7268:     \"address of array\", \"mswsp.arrayvector.address64\",",
          "7269:     FT_UINT64, BASE_HEX, NULL, 0, NULL, HFILL",
          "7270:    }",
          "7271:   },",
          "7272:   {",
          "7273:    &hf_mswsp_crowvariantinfo_count32,",
          "7274:    {",
          "7275:     \"count\", \"mswsp.crowvariantinfo.count32\",",
          "7276:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7277:    }",
          "7278:   },",
          "7279:   {",
          "7280:    &hf_mswsp_arrayvector_address32,",
          "7281:    {",
          "7282:     \"address of array\", \"mswsp.arrayvector.address64\",",
          "7283:     FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL",
          "7284:    }",
          "7285:   },",
          "7286:   {",
          "7287:    &hf_mswsp_rowvariant_item_address64,",
          "7288:    {",
          "7289:     \"address\", \"mswsp.rowvariant.item.address64\",",
          "7290:     FT_UINT64, BASE_HEX, NULL, 0, NULL, HFILL",
          "7291:    }",
          "7292:   },",
          "7293:   {",
          "7294:    &hf_mswsp_rowvariant_item_address32,",
          "7295:    {",
          "7296:     \"address\", \"mswsp.rowvariant.item.address32\",",
          "7297:     FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL",
          "7298:    }",
          "7299:   },",
          "7300:   {",
          "7301:    &hf_mswsp_rowvariant_item_value,",
          "7302:    {",
          "7303:     \"value\", \"mswsp.rowvariant.item.value\",",
          "7304:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "7305:    }",
          "7306:   },",
          "7307:   {",
          "7308:    &hf_mswsp_rowvariant_vtype,",
          "7309:    {",
          "7310:     \"vtype\", \"mswsp.rowvariant.vtype\",",
          "7311:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "7312:    }",
          "7313:   },",
          "7314:   {",
          "7315:    &hf_mswsp_rowvariant_reserved1,",
          "7316:    {",
          "7317:     \"reserved1\", \"mswsp.rowvariant.reserved1\",",
          "7318:     FT_UINT16, BASE_HEX, NULL, 0, NULL, HFILL",
          "7319:    }",
          "7320:   },",
          "7321:   {",
          "7322:    &hf_mswsp_rowvariant_reserved2,",
          "7323:    {",
          "7324:     \"reserved2\", \"mswsp.rowvariant.reserved2\",",
          "7325:     FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL",
          "7326:    }",
          "7327:   },",
          "7328:   {",
          "7329:    &hf_mswsp_ctablecolumn_status,",
          "7330:    {",
          "7331:     \"status\", \"mswsp.ctablecolumn.name\",",
          "7332:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL",
          "7333:    }",
          "7334:   },",
          "7335:   {",
          "7336:    &hf_mswsp_ctablecolumn_length,",
          "7337:    {",
          "7338:     \"length\", \"mswsp.ctablecolumn.length\",",
          "7339:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "7340:    }",
          "7341:   },",
          "7342:   {",
          "7343:    &hf_mswsp_msg_cpmcreatequery_size,",
          "7344:    {",
          "7345:     \"size\", \"mswsp.cpmcreatequery.size\",",
          "7346:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7347:    }",
          "7348:   },",
          "7349:   {",
          "7350:    &hf_mswsp_msg_cpmcreatequery_ccolumnsetpresent ,",
          "7351:    {",
          "7352:     \"CColumnSetPresent\", \"mswsp.cpmcreatequery.ccolumnsetpresent\",",
          "7353:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "7354:    }",
          "7355:   },",
          "7356:   {",
          "7357:    &hf_mswsp_msg_cpmcreatequery_crestrictionpresent ,",
          "7358:    {",
          "7359:     \"CRestrictionPresent\", \"mswsp.cpmcreatequery.crestrictionpresent\",",
          "7360:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "7361:    }",
          "7362:   },",
          "7363:   {",
          "7364:    &hf_mswsp_msg_cpmcreatequery_csortpresent ,",
          "7365:    {",
          "7366:     \"CSortPresent\", \"mswsp.cpmcreatequery.csortpresent\",",
          "7367:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "7368:    }",
          "7369:   },",
          "7370:   {",
          "7371:    &hf_mswsp_msg_cpmcreatequery_csortset_xxx ,",
          "7372:    {",
          "7373:     \"XXX - (undocumented bytes)\", \"mswsp.cpmcreatequery.csortset.xxx\",",
          "7374:     FT_UINT64, BASE_HEX, NULL, 0, NULL, HFILL",
          "7375:    }",
          "7376:   },",
          "7377:   {",
          "7378:    &hf_mswsp_msg_cpmcreatequery_ccategpresent ,",
          "7379:    {",
          "7380:     \"CCategorizationSetPresent\", \"mswsp.cpmcreatequery.ccategpresent\",",
          "7381:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "7382:    }",
          "7383:   },",
          "7384:   {",
          "7385:    &hf_mswsp_msg_cpmcreatequery_ccateg_count,",
          "7386:    {",
          "7387:     \"count\", \"mswsp.cpmcreatequery.ccateg.count\",",
          "7388:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7389:    }",
          "7390:   },",
          "7391:   {",
          "7392:    &hf_mswsp_msg_cpmcreatequery_trueseq,",
          "7393:    {",
          "7394:     \"TrueSequential\", \"mswsp.cpmcreatequery.trueseq\",",
          "7395:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7396:    }",
          "7397:   },",
          "7398:   {",
          "7399:    &hf_mswsp_msg_cpmcreatequery_workid,",
          "7400:    {",
          "7401:     \"WorkId\", \"mswsp.cpmcreatequery.trueseq\",",
          "7402:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7403:    }",
          "7404:   },",
          "7405:   {",
          "7406:    &hf_mswsp_msg_cpmcreatequery_cursors,",
          "7407:    {",
          "7408:     \"Cursors\", \"mswsp.cpmcreatequery.cursors\",",
          "7409:     FT_BYTES, SEP_SPACE, NULL, 0, NULL, HFILL",
          "7410:    }",
          "7411:   },",
          "7412:   {",
          "7413:    &hf_mswsp_msg_cpmgetrows_hcursor,",
          "7414:    {",
          "7415:     \"hCursor\", \"mswsp.msg.cpmgetrows.hcursor\",",
          "7416:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7417:    }",
          "7418:   },",
          "7419:   {",
          "7420:    &hf_mswsp_msg_cpmgetrows_rowstotransfer,",
          "7421:    {",
          "7422:     \"cRowsToTransfer\", \"mswsp.msg.cpmgetrows.rowstotransfer\",",
          "7423:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7424:    }",
          "7425:   },",
          "7426:   {",
          "7427:    &hf_mswsp_msg_cpmgetrows_rowwidth,",
          "7428:    {",
          "7429:     \"cbRowWidth\", \"mswsp.msg.cpmgetrows.rowswidth\",",
          "7430:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7431:    }",
          "7432:   },",
          "7433:   {",
          "7434:    &hf_mswsp_msg_cpmgetrows_cbseek,",
          "7435:    {",
          "7436:     \"cbSeek\", \"mswsp.msg.cpmgetrows.cbseek\",",
          "7437:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7438:    }",
          "7439:   },",
          "7440:   {",
          "7441:    &hf_mswsp_msg_cpmgetrows_cbreserved,",
          "7442:    {",
          "7443:     \"cbReserved\", \"mswsp.msg.cpmgetrows.cbreserved\",",
          "7444:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7445:    }",
          "7446:   },",
          "7447:   {",
          "7448:    &hf_mswsp_msg_cpmgetrows_cbreadbuffer,",
          "7449:    {",
          "7450:     \"cbReadBuffer\", \"mswsp.msg.cpmgetrows.cbreadbuffer\",",
          "7451:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7452:    }",
          "7453:   },",
          "7454:   {",
          "7455:    &hf_mswsp_msg_cpmgetrows_ulclientbase,",
          "7456:    {",
          "7457:     \"ulClientBase\", \"mswsp.msg.cpmgetrows.ulclientbase\",",
          "7458:     FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL",
          "7459:    }",
          "7460:   },",
          "7461:   {",
          "7462:    &hf_mswsp_msg_cpmgetrows_fbwdfetch,",
          "7463:    {",
          "7464:     \"fBwdFetch\", \"mswsp.msg.cpmgetrows.fbwdfetch\",",
          "7465:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7466:    }",
          "7467:   },",
          "7468:   {",
          "7469:    &hf_mswsp_msg_cpmgetrows_etype,",
          "7470:    {",
          "7471:     \"eType\", \"mswsp.msg.cpmgetrows.etype\",",
          "7472:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7473:    }",
          "7474:   },",
          "7475:   {",
          "7476:    &hf_mswsp_msg_cpmgetrows_chapt,",
          "7477:    {",
          "7478:     \"chapt\", \"mswsp.msg.cpmgetrows.chapt\",",
          "7479:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7480:    }",
          "7481:   },",
          "7482:   {",
          "7483:    &hf_mswsp_msg_cpmgetrows_crowsreturned,",
          "7484:    {",
          "7485:     \"cRowsReturned\", \"mswsp.msg.cpmgetrows.crowsreturned\",",
          "7486:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7487:    }",
          "7488:   },",
          "7489:   {",
          "7490:    &hf_mswsp_msg_cpmratiofinished_hcursor,",
          "7491:    {",
          "7492:     \"hCursor\", \"mswsp.msg.cpmratiofinished_hcursor\",",
          "7493:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7494:    }",
          "7495:   },",
          "7496:   {",
          "7497:    &hf_mswsp_msg_cpmratiofinished_fquick,",
          "7498:    {",
          "7499:     \"fQuick\", \"mswsp.msg.cpmratiofinished_fquick\",",
          "7500:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7501:    }",
          "7502:   },",
          "7503:   {",
          "7504:    &hf_mswsp_msg_cpmratiofinished_ulnumerator,",
          "7505:    {",
          "7506:     \"ulNumerator\", \"mswsp.msg.cpmratiofinished_ulnumerator\",",
          "7507:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7508:    }",
          "7509:   },",
          "7510:   {",
          "7511:    &hf_mswsp_msg_cpmratiofinished_uldenominator,",
          "7512:    {",
          "7513:     \"ulDenominator\", \"mswsp.msg.cpmratiofinished_uldenominator\",",
          "7514:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7515:    }",
          "7516:   },",
          "7517:   {",
          "7518:    &hf_mswsp_msg_cpmratiofinished_crows,",
          "7519:    {",
          "7520:     \"cRows\", \"mswsp.msg.cpmratiofinished_crows\",",
          "7521:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7522:    }",
          "7523:   },",
          "7524:   {",
          "7525:    &hf_mswsp_msg_cpmratiofinished_fnewrows,",
          "7526:    {",
          "7527:     \"fNewRows\", \"mswsp.msg.cpmratiofinished_fnewrows\",",
          "7528:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7529:    }",
          "7530:   },",
          "7531:   {",
          "7532:    &hf_mswsp_msg_cpmcomparebmk_hcursor,",
          "7533:    {",
          "7534:     \"hCursor\", \"mswsp.msg.cpmcomparebmk.hcursor\",",
          "7535:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7536:    }",
          "7537:   },",
          "7538:   {",
          "7539:    &hf_mswsp_msg_cpmcomparebmk_chapt,",
          "7540:    {",
          "7541:     \"chapt\", \"mswsp.msg.cpmcomparebmk.chapt\",",
          "7542:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7543:    }",
          "7544:   },",
          "7545:   {",
          "7546:    &hf_mswsp_msg_cpmcomparebmk_bmkfirst,",
          "7547:    {",
          "7548:     \"bmkFirst\", \"mswsp.msg.cpmcomparebmk.bmkfirst\",",
          "7549:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7550:    }",
          "7551:   },",
          "7552:   {",
          "7553:    &hf_mswsp_msg_cpmcomparebmk_bmksecond,",
          "7554:    {",
          "7555:     \"bmkSecond\", \"mswsp.msg.cpmcomparebmk.bmksecond\",",
          "7556:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7557:    }",
          "7558:   },",
          "7559:   {",
          "7560:    &hf_mswsp_msg_cpmcomparebmk_dwcomparison,",
          "7561:    {",
          "7562:     \"dwComparison\", \"mswsp.msg.cpmcomparebmk.dwcomparison\",",
          "7563:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7564:    }",
          "7565:   },",
          "7566:   {",
          "7567:    &hf_mswsp_msg_cpmgetapproxpos_hcursor,",
          "7568:    {",
          "7569:     \"hCursor\", \"mswsp.msg.cpmgetapproxpos.hcursor\",",
          "7570:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7571:    }",
          "7572:   },",
          "7573:   {",
          "7574:    &hf_mswsp_msg_cpmgetapproxpos_chapt,",
          "7575:    {",
          "7576:     \"chapt\", \"mswsp.msg.cpmgetapproxpos.chapt\",",
          "7577:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7578:    }",
          "7579:   },",
          "7580:   {",
          "7581:    &hf_mswsp_msg_cpmgetapproxpos_bmk,",
          "7582:    {",
          "7583:     \"bmk\", \"mswsp.msg.cpmgetapproxpos.bmk\",",
          "7584:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7585:    }",
          "7586:   },",
          "7587:   {",
          "7588:    &hf_mswsp_msg_cpmgetapproxpos_numerator,",
          "7589:    {",
          "7590:     \"numerator\", \"mswsp.msg.cpmgetapproxpos.numerator\",",
          "7591:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7592:    }",
          "7593:   },",
          "7594:   {",
          "7595:    &hf_mswsp_msg_cpmgetapproxpos_denominator,",
          "7596:    {",
          "7597:     \"denominator\", \"mswsp.msg.cpmgetapproxpos.denominator\",",
          "7598:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7599:    }",
          "7600:   },",
          "7601:   {",
          "7602:    &hf_mswsp_msg_cpmsetbinding_hcursor,",
          "7603:    {",
          "7604:     \"hCursor\", \"mswsp.msg.cpmsetbinding.hcursor\",",
          "7605:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7606:    }",
          "7607:   },",
          "7608:   {",
          "7609:    &hf_mswsp_msg_cpmsetbinding_cbrow,",
          "7610:    {",
          "7611:     \"cBrow\", \"mswsp.msg.cpmsetbinding.cbrow\",",
          "7612:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7613:    }",
          "7614:   },",
          "7615:   {",
          "7616:    &hf_mswsp_msg_cpmsetbinding_desc,",
          "7617:    {",
          "7618:     \"cbBindingDesc\", \"mswsp.msg.cpmsetbinding.desc\",",
          "7619:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7620:    }",
          "7621:   },",
          "7622:   {",
          "7623:    &hf_mswsp_msg_cpmsetbinding_dummy,",
          "7624:    {",
          "7625:     \"dummy\", \"mswsp.msg.cpmsetbinding.dummy\",",
          "7626:     FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL",
          "7627:    }",
          "7628:   },",
          "7629:   {",
          "7630:    &hf_mswsp_msg_cpmsetbinding_ccolumns,",
          "7631:    {",
          "7632:     \"cColumns\", \"mswsp.msg.cpmsetbinding.ccolumns\",",
          "7633:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7634:    }",
          "7635:   },",
          "7636:   {",
          "7637:    &hf_mswsp_msg_cpmsetbinding_acolumns,",
          "7638:    {",
          "7639:     \"aColumns\", \"mswsp.msg.cpmsetbinding.acolumns\",",
          "7640:     FT_BYTES, SEP_DOT, NULL, 0, NULL, HFILL",
          "7641:    }",
          "7642:   },",
          "7643:   {",
          "7644:    &hf_mswsp_msg_cpmsendnotify_watchnotify,",
          "7645:    {",
          "7646:     \"watchNotify\", \"mswsp.msg.cpmsendnotify.watchnotify\",",
          "7647:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7648:    }",
          "7649:   },",
          "7650:   {",
          "7651:    &hf_mswsp_msg_cpmgetquerystatus_hcursor,",
          "7652:    {",
          "7653:     \"hCursor\", \"mswsp.msg.cpmquerystatus.hcursor\",",
          "7654:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7655:    }",
          "7656:   },",
          "7657:   {",
          "7658:    &hf_mswsp_msg_cpmgetquerystatus_qstatus,",
          "7659:    {",
          "7660:     \"QStatus\", \"mswsp.msg.cpmquerystatus.qstatus\",",
          "7661:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7662:    }",
          "7663:   },",
          "7664:   {",
          "7665:    &hf_mswsp_msg_cpmcistate_cbstruct,",
          "7666:    {",
          "7667:     \"cbStruct\", \"mswsp.msg.cpmcistate.cbstruct\",",
          "7668:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7669:    }",
          "7670:   },",
          "7671:   {",
          "7672:    &hf_mswsp_msg_cpmcistate_cwordlist,",
          "7673:    {",
          "7674:     \"cbWordList\", \"mswsp.msg.cpmcistate.cbwordlist\",",
          "7675:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7676:    }",
          "7677:   },",
          "7678:   {",
          "7679:    &hf_mswsp_msg_cpmcistate_cpersistindex,",
          "7680:    {",
          "7681:     \"cbPersistentIndex\", \"mswsp.msg.cpmcistate.cbpersistindex\",",
          "7682:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7683:    }",
          "7684:   },",
          "7685:   {",
          "7686:    &hf_mswsp_msg_cpmcistate_cqueries,",
          "7687:    {",
          "7688:     \"cQueries\", \"mswsp.msg.cpmcistate.cqueries\",",
          "7689:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7690:    }",
          "7691:   },",
          "7692:   {",
          "7693:    &hf_mswsp_msg_cpmcistate_cfreshtest,",
          "7694:    {",
          "7695:     \"cFreshTest\", \"mswsp.msg.cpmcistate.cfreshtest\",",
          "7696:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7697:    }",
          "7698:   },",
          "7699:   {",
          "7700:    &hf_mswsp_msg_cpmcistate_dwmergeprogress,",
          "7701:    {",
          "7702:     \"dwMergeProgress\", \"mswsp.msg.cpmcistate.dwmergeprogress\",",
          "7703:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7704:    }",
          "7705:   },",
          "7706:   {",
          "7707:    &hf_mswsp_msg_cpmcistate_estate,",
          "7708:    {",
          "7709:     \"eState\", \"mswsp.msg.cpmcistate.estate\",",
          "7710:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7711:    }",
          "7712:   },",
          "7713:   {",
          "7714:    &hf_mswsp_msg_cpmcistate_cfiltereddocs,",
          "7715:    {",
          "7716:     \"cFilteredDocuments\", \"mswsp.msg.cpmcistate.cfiltereddocs\",",
          "7717:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7718:    }",
          "7719:   },",
          "7720:   {",
          "7721:    &hf_mswsp_msg_cpmcistate_ctotaldocs,",
          "7722:    {",
          "7723:     \"cTotalDocuments\", \"mswsp.msg.cpmcistate.ctotaldocs\",",
          "7724:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7725:    }",
          "7726:   },",
          "7727:   {",
          "7728:    &hf_mswsp_msg_cpmcistate_cpendingscans,",
          "7729:    {",
          "7730:     \"cPendingScans\", \"mswsp.msg.cpmcistate.cpendingscans\",",
          "7731:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7732:    }",
          "7733:   },",
          "7734:   {",
          "7735:    &hf_mswsp_msg_cpmcistate_dwindexsize,",
          "7736:    {",
          "7737:     \"dwIndexSize\", \"mswsp.msg.cpmcistate.dwindexsize\",",
          "7738:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7739:    }",
          "7740:   },",
          "7741:   {",
          "7742:    &hf_mswsp_msg_cpmcistate_cuniquekeys,",
          "7743:    {",
          "7744:     \"cUniqueKeys\", \"mswsp.msg.cpmcistate.cuniquekeys\",",
          "7745:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7746:    }",
          "7747:   },",
          "7748:   {",
          "7749:    &hf_mswsp_msg_cpmcistate_csecqdocuments,",
          "7750:    {",
          "7751:     \"cSecQDocuments\", \"mswsp.msg.cpmcistate.csecqdocuments\",",
          "7752:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7753:    }",
          "7754:   },",
          "7755:   {",
          "7756:    &hf_mswsp_msg_cpmcistate_dwpropcachesize,",
          "7757:    {",
          "7758:     \"dwPropCacheSize\", \"mswsp.msg.cpmcistate.dwpropcachesize\",",
          "7759:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7760:    }",
          "7761:   },",
          "7762:   {",
          "7763:    &hf_mswsp_msg_cpmfetchvalue_wid,",
          "7764:    {",
          "7765:     \"wid\", \"mswsp.msg.cpmfetchvalue.wid\",",
          "7766:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7767:    }",
          "7768:   },",
          "7769:   {",
          "7770:    &hf_mswsp_msg_cpmfetchvalue_cbsofar,",
          "7771:    {",
          "7772:     \"cbSoFar\", \"mswsp.msg.cpmfetchvalue.cbsofar\",",
          "7773:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7774:    }",
          "7775:   },",
          "7776:   {",
          "7777:    &hf_mswsp_msg_cpmfetchvalue_cbpropspec,",
          "7778:    {",
          "7779:     \"cbPropSpec\", \"mswsp.msg.cpmfetchvalue.cbpropspec\",",
          "7780:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7781:    }",
          "7782:   },",
          "7783:   {",
          "7784:    &hf_mswsp_msg_cpmfetchvalue_cbchunk,",
          "7785:    {",
          "7786:     \"cbChunk\", \"mswsp.msg.cpmfetchvalue.chunk\",",
          "7787:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7788:    }",
          "7789:   },",
          "7790:   {",
          "7791:    &hf_mswsp_msg_cpmfetchvalue_cbvalue,",
          "7792:    {",
          "7793:     \"cbValue\", \"mswsp.msg.cpmfetchvalue.cbvalue\",",
          "7794:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7795:    }",
          "7796:   },",
          "7797:   {",
          "7798:    &hf_mswsp_msg_cpmfetchvalue_fmoreexists,",
          "7799:    {",
          "7800:     \"fMoreExists\", \"mswsp.msg.cpmfetchvalue.fmoreexists\",",
          "7801:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7802:    }",
          "7803:   },",
          "7804:   {",
          "7805:    &hf_mswsp_msg_cpmfetchvalue_fvalueexists,",
          "7806:    {",
          "7807:     \"fValueExists\", \"mswsp.msg.cpmfetchvalue.fvalueexists\",",
          "7808:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7809:    }",
          "7810:   },",
          "7811:   {",
          "7812:    &hf_mswsp_msg_cpmfetchvalue_vvalue,",
          "7813:    {",
          "7814:     \"vvalue\", \"mswsp.msg.cpmfetchvalue.vvalue\",",
          "7815:     FT_BYTES, SEP_SPACE, NULL, 0, NULL, HFILL",
          "7816:    }",
          "7817:   },",
          "7818:   {",
          "7819:    &hf_mswsp_msg_cpmquerystatusex_qstatus,",
          "7820:    {",
          "7821:     \"qStatus\", \"mswsp.msg.cpmquerystatusex.qstatus\",",
          "7822:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7823:    }",
          "7824:   },",
          "7825:   {",
          "7826:    &hf_mswsp_msg_cpmquerystatusex_hcursor,",
          "7827:    {",
          "7828:     \"hCursor\", \"mswsp.msg.cpmquerystatusex.hcursor\",",
          "7829:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7830:    }",
          "7831:   },",
          "7832:   {",
          "7833:    &hf_mswsp_msg_cpmquerystatusex_bmk,",
          "7834:    {",
          "7835:     \"bmk\", \"mswsp.msg.cpmquerystatusex.bmk\",",
          "7836:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7837:    }",
          "7838:   },",
          "7839:   {",
          "7840:    &hf_mswsp_msg_cpmquerystatusex_cfiltereddocs,",
          "7841:    {",
          "7842:     \"cFilteredDocuments\", \"mswsp.msg.cpmquerystatusex.cfiltereddocs\",",
          "7843:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7844:    }",
          "7845:   },",
          "7846:   {",
          "7847:    &hf_mswsp_msg_cpmquerystatusex_cdocstofilter,",
          "7848:    {",
          "7849:     \"cDocumentsToFilter\", \"mswsp.msg.cpmquerystatusex.cdocstofilter\",",
          "7850:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7851:    }",
          "7852:   },",
          "7853:   {",
          "7854:    &hf_mswsp_msg_cpmquerystatusex_dwratiodenom,",
          "7855:    {",
          "7856:     \"dwRatioFinishedDenomenator\", \"mswsp.msg.cpmquerystatusex.dwratiodenom\",",
          "7857:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7858:    }",
          "7859:   },",
          "7860:   {",
          "7861:    &hf_mswsp_msg_cpmquerystatusex_dwrationumer,",
          "7862:    {",
          "7863:     \"dwRatioFinishedNumerator\", \"mswsp.msg.cpmquerystatusex.dwrationumer\",",
          "7864:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7865:    }",
          "7866:   },",
          "7867:   {",
          "7868:    &hf_mswsp_msg_cpmquerystatusex_irowbmk,",
          "7869:    {",
          "7870:     \"iRowBmk\", \"mswsp.msg.cpmquerystatusex.irowbmk\",",
          "7871:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7872:    }",
          "7873:   },",
          "7874:   {",
          "7875:    &hf_mswsp_msg_cpmquerystatusex_crowstotal,",
          "7876:    {",
          "7877:     \"cRowsTotal\", \"mswsp.msg.cpmquerystatusex.crowstotal\",",
          "7878:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7879:    }",
          "7880:   },",
          "7881:   {",
          "7882:    &hf_mswsp_msg_cpmquerystatusex_maxrank,",
          "7883:    {",
          "7884:     \"maxRank\", \"mswsp.msg.cpmquerystatusex.maxrank\",",
          "7885:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7886:    }",
          "7887:   },",
          "7888:   {",
          "7889:    &hf_mswsp_msg_cpmquerystatusex_cresultsfound,",
          "7890:    {",
          "7891:     \"cResultsFound\", \"mswsp.msg.cpmquerystatusex.cresultsfound\",",
          "7892:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7893:    }",
          "7894:   },",
          "7895:   {",
          "7896:    &hf_mswsp_msg_cpmquerystatusex_whereid,",
          "7897:    {",
          "7898:     \"whereId\", \"mswsp.msg.cpmquerystatusex.whereid\",",
          "7899:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7900:    }",
          "7901:   },",
          "7902:   {",
          "7903:    &hf_mswsp_msg_cpmrestartposition_hcursor,",
          "7904:    {",
          "7905:     \"hCursor\", \"mswsp.msg.cpmrestartposition.hcursor\",",
          "7906:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7907:    }",
          "7908:   },",
          "7909:   {",
          "7910:    &hf_mswsp_msg_cpmrestartposition_chapt,",
          "7911:    {",
          "7912:     \"chapt\", \"mswsp.msg.cpmrestartposition.chapt\",",
          "7913:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7914:    }",
          "7915:   },",
          "7916:   {",
          "7917:    &hf_mswsp_msg_cpmgetrowsetnotify_wid,",
          "7918:    {",
          "7919:     \"wid\", \"mswsp.msg.cpmgetrowsetnotify.wid\",",
          "7920:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7921:    }",
          "7922:   },",
          "7923:   {",
          "7924:    &hf_mswsp_msg_cpmgetrowsetnotify_moreevents,",
          "7925:    {",
          "7926:     \"moreEvents\", \"mswsp.msg.cpmgetrowsetnotify.moreevents\",",
          "7927:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "7928:    }",
          "7929:   },",
          "7930:   {",
          "7931:    &hf_mswsp_msg_cpmgetrowsetnotify_eventtype,",
          "7932:    {",
          "7933:     \"eventType\", \"mswsp.msg.cpmgetrowsetnotify.eventType\",",
          "7934:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "7935:    }",
          "7936:   },",
          "7937:   {",
          "7938:    &hf_mswsp_msg_cpmgetrowsetnotify_rowsetitemstate,",
          "7939:    {",
          "7940:     \"rowSetItemState\", \"mswsp.msg.cpmgetrowsetnotify.rowsetitemstate\",",
          "7941:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "7942:    }",
          "7943:   },",
          "7944:   {",
          "7945:    &hf_mswsp_msg_cpmgetrowsetnotify_changeditemstate,",
          "7946:    {",
          "7947:     \"changedItemState\", \"mswsp.msg.cpmgetrowsetnotify.changeditemState\",",
          "7948:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "7949:    }",
          "7950:   },",
          "7951:   {",
          "7952:    &hf_mswsp_msg_cpmgetrowsetnotify_rowsetevent,",
          "7953:    {",
          "7954:     \"rowSetEvent\", \"mswsp.msg.cpmgetrowsetnotify.rowsetevent\",",
          "7955:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL",
          "7956:    }",
          "7957:   },",
          "7958:   {",
          "7959:    &hf_mswsp_msg_cpmgetrowsetnotify_rowseteventdata1,",
          "7960:    {",
          "7961:     \"rowSetEventdata1\", \"mswsp.msg.cpmgetrowsetnotify.rowseteventdata1\",",
          "7962:     FT_UINT64, BASE_HEX, NULL, 0, NULL, HFILL",
          "7963:    }",
          "7964:   },",
          "7965:   {",
          "7966:    &hf_mswsp_msg_cpmgetrowsetnotify_rowseteventdata2,",
          "7967:    {",
          "7968:     \"rowSetEventdata2\", \"mswsp.msg.cpmgetrowsetnotify.rowseteventdata2\",",
          "7969:     FT_UINT64, BASE_HEX, NULL, 0, NULL, HFILL",
          "7970:    }",
          "7971:   },",
          "7972:   {",
          "7973:    &hf_mswsp_msg_cpmfindindices_cwids,",
          "7974:    {",
          "7975:     \"cWids\", \"mswsp.msg.cpmfindindices.cwids\",",
          "7976:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7977:    }",
          "7978:   },",
          "7979:   {",
          "7980:    &hf_mswsp_msg_cpmfindindices_cdepthprev,",
          "7981:    {",
          "7982:     \"cDepthPrev\", \"mswsp.msg.cpmfindindices.cdepthprev\",",
          "7983:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7984:    }",
          "7985:   },",
          "7986:   {",
          "7987:    &hf_mswsp_msg_cpmfindindices_cdepthnext,",
          "7988:    {",
          "7989:     \"cDepthNext\", \"mswsp.msg.cpmfindindices.cdepthnext\",",
          "7990:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7991:    }",
          "7992:   },",
          "7993:   {",
          "7994:    &hf_mswsp_msg_cpmsetscopeprioritization_priority,",
          "7995:    {",
          "7996:     \"priority\", \"mswsp.msg.cpmsetscopeprioritization.priority\",",
          "7997:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "7998:    }",
          "7999:   },",
          "8000:   {",
          "8001:    &hf_mswsp_msg_cpmsetscopeprioritization_eventfreq,",
          "8002:    {",
          "8003:     \"eventFrequency\", \"mswsp.msg.cpmsetscopeprioritization.eventfreq\",",
          "8004:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "8005:    }",
          "8006:   },",
          "8007:   {",
          "8008:    &hf_mswsp_msg_cpmsetscopestatisics_dwindexitems,",
          "8009:    {",
          "8010:     \"dwIndexedItems\", \"mswsp.msg.cpmsetscopestatistics.dwindexitems\",",
          "8011:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "8012:    }",
          "8013:   },",
          "8014:   {",
          "8015:    &hf_mswsp_msg_cpmsetscopestatisics_dwoutstandingadds,",
          "8016:    {",
          "8017:     \"dwOutstandingAdds\", \"mswsp.msg.cpmsetscopestatistics.dwoutstandingadds\",",
          "8018:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "8019:    }",
          "8020:   },",
          "8021:   {",
          "8022:    &hf_mswsp_msg_cpmsetscopestatisics_dwoutstandingmodifies,",
          "8023:    {",
          "8024:     \"dwOutstandingModifies\", \"mswsp.msg.cpmsetscopestatistics.dwoutstandingmodifies\",",
          "8025:     FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL",
          "8026:    }",
          "8027:   }",
          "8028:  };",
          "8031:  static gint *ett[] = {",
          "8032:   &ett_mswsp,",
          "8033:   &ett_mswsp_hdr,",
          "8034:   &ett_mswsp_msg,",
          "8035:   &ett_mswsp_pad,",
          "8036:   &ett_mswsp_property_restriction,",
          "8037:   &ett_CRestrictionArray,",
          "8038:   &ett_CBaseStorageVariant,",
          "8039:   &ett_CBaseStorageVariant_Vector,",
          "8040:   &ett_CBaseStorageVariant_Array,",
          "8041:   &ett_CDbColId,",
          "8042:   &ett_GUID,",
          "8043:   &ett_CDbProp,",
          "8044:   &ett_CDbPropSet,",
          "8045:   &ett_CDbPropSet_Array,",
          "8046:   &ett_CRestriction,",
          "8047:   &ett_CNodeRestriction,",
          "8048:   &ett_CPropertyRestriction,",
          "8049:   &ett_CCoercionRestriction,",
          "8050:   &ett_CContentRestriction,",
          "8051:   &ett_RANGEBOUNDARY,",
          "8052:   &ett_CRangeCategSpec,",
          "8053:   &ett_CCategSpec,",
          "8054:   &ett_CAggregSpec,",
          "8055:   &ett_CAggregSet,",
          "8056:   &ett_CCategorizationSpec,",
          "8057:   &ett_CAggregSortKey,",
          "8058:   &ett_CSortAggregSet,",
          "8059:   &ett_CInGroupSortAggregSet,",
          "8060:   &ett_CInGroupSortAggregSets,",
          "8061:   &ett_CRowsetProperties,",
          "8062:   &ett_CFullPropSpec,",
          "8063:   &ett_CPidMapper,",
          "8064:   &ett_CSort,",
          "8065:   &ett_CSortSet,",
          "8066:   &ett_CNatLanguageRestriction,",
          "8067:   &ett_CColumnGroup,",
          "8068:   &ett_CColumnGroupArray,",
          "8069:   &ett_LCID,",
          "8070:   &ett_CTableColumn,",
          "8071:   &ett_Array,",
          "8072:   &ett_SeekDescription,",
          "8073:   &ett_CRowsSeekNext,",
          "8074:   &ett_CRowsSeekAt,",
          "8075:   &ett_CRowsSeekAtRatio,",
          "8076:   &ett_CRowsSeekByBookmark,",
          "8077:   &ett_GetRowsRow,",
          "8078:   &ett_GetRowsColumn,",
          "8079:   &ett_CRowVariant,",
          "8080:   &ett_CRowVariant_Vector,",
          "8081:   &ett_mswsp_bool_options,",
          "8082:   &ett_mswsp_uin32_array,",
          "8083:   &ett_mswsp_msg_padding,",
          "8084:   &ett_mswsp_msg_creusewhere",
          "8085:  };",
          "8087:  int i;",
          "8090:  proto_mswsp = proto_register_protocol(\"Windows Search Protocol\",",
          "8091:             \"MS-WSP\", \"mswsp\");",
          "8094:  proto_register_field_array(proto_mswsp, hf, array_length(hf));",
          "8095:  proto_register_subtree_array(ett, array_length(ett));",
          "8097:  for (i=0; i<(int)array_length(GuidPropertySet); i++) {",
          "8098:   guids_add_guid(&GuidPropertySet[i].guid, GuidPropertySet[i].def);",
          "8099:  }",
          "8108:  mswsp_module = prefs_register_protocol(proto_mswsp,",
          "8109:              proto_reg_handoff_mswsp);",
          "8111:  register_init_routine(&mswsp_init_protocol);",
          "8113:     Use this function instead of prefs_register_protocol if you want to group",
          "8114:     preferences of several protocols under one preferences subtree.",
          "8115:     Argument subtree identifies grouping tree node name, several subnodes can be",
          "8116:     specified using slash '/' (e.g. \"OSI/X.500\" - protocol preferences will be",
          "8117:     accessible under Protocols->OSI->X.500-><PROTOSHORTNAME> preferences node.",
          "8123:  prefs_register_bool_preference(mswsp_module, \"show_hex\",",
          "8124:            \"Display numbers in Hex\",",
          "8125:            \"Enable to display numerical values in hexadecimal.\",",
          "8126:            &gPREF_HEX);",
          "8129:  prefs_register_uint_preference(mswsp_module, \"tcp.port\", \"mswsp TCP Port\",",
          "8130:            \" mswsp TCP port if other than the default\",",
          "8131:            10, &gPORT_PREF);",
          "8132: }",
          "8134: static int dissect_mswsp_smb(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "8135: {",
          "8136:  smb_info_t *si = (smb_info_t*)data;",
          "8137:  gboolean in = si->request;",
          "8139:  smb_fid_info_t *fid_info = NULL;",
          "8140:  fid_info = find_fid_info(si);",
          "8142:  if (!fid_info || !fid_info->fsi || !fid_info->fsi->filename) {",
          "8143:   return 0;",
          "8144:  }",
          "8147:  if (g_ascii_strcasecmp(fid_info->fsi->filename, \"\\\\MsFteWds\") != 0) {",
          "8148:   return 0;",
          "8149:  }",
          "8150:  p_add_proto_data(wmem_file_scope(), pinfo, proto_mswsp, 0, (void*)&SMB1);",
          "8151:  return dissect_mswsp(tvb, pinfo, tree, in, data);",
          "8152: }",
          "8155: static int dissect_mswsp_smb2(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "8156: {",
          "8157:  smb2_info_t *si = (smb2_info_t*)data;",
          "8158:  gboolean in = !(si->flags & SMB2_FLAGS_RESPONSE);",
          "8159:  char* fid_name = NULL;",
          "8160:  guint32     open_frame = 0, close_frame = 0;",
          "8162:  if (!si) {",
          "8163:   return 0;",
          "8164:  }",
          "8166:  if (si->saved) {",
          "8167:   dcerpc_fetch_polhnd_data(&si->saved->policy_hnd, &fid_name, NULL, &open_frame, &close_frame, pinfo->fd->num);",
          "8168:  }",
          "8170:  if (!fid_name || strcmp(fid_name, \"File: MsFteWds\") != 0) {",
          "8171:   return 0;",
          "8172:  }",
          "8174:  p_add_proto_data(wmem_file_scope(), pinfo, proto_mswsp, 0, (void*)&SMB2);",
          "8175:  return dissect_mswsp(tvb, pinfo, tree, in, data);",
          "8176: }",
          "8181:    This exact format is required because a script is used to find these",
          "8182:    routines and create the code that calls these routines.",
          "8184:    If this function is registered as a prefs callback (see prefs_register_protocol",
          "8185:    above) this function is also called by preferences whenever \"Apply\" is pressed;",
          "8186:    In that case, it should accommodate being called more than once.",
          "8188:    Simple form of proto_reg_handoff_mswsp which can be used if there are",
          "8189:    no prefs-dependent registration function calls.",
          "8192: void",
          "8193: proto_reg_handoff_mswsp(void)",
          "8194: {",
          "8195:  heur_dissector_add(\"smb_transact\", dissect_mswsp_smb, \"WSP over SMB1\", \"smb1_wsp\", proto_mswsp, HEURISTIC_ENABLE);",
          "8196:  heur_dissector_add(\"smb2_heur_subdissectors\", dissect_mswsp_smb2, \"WSP over SMB2\", \"smb2_wsp\", proto_mswsp, HEURISTIC_ENABLE);",
          "8197: }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-smb-pipe.c||epan/dissectors/packet-smb-pipe.c": [
          "File: epan/dissectors/packet-smb-pipe.c -> epan/dissectors/packet-smb-pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3261: gboolean",
          "3262: dissect_pipe_dcerpc(tvbuff_t *d_tvb, packet_info *pinfo, proto_tree *parent_tree,",
          "3264: {",
          "3265:  gboolean result=0;",
          "3266:  gboolean save_fragmented;",
          "",
          "[Removed Lines]",
          "3263:     proto_tree *tree, guint32 fid)",
          "",
          "[Added Lines]",
          "3263:     proto_tree *tree, guint32 fid, void *data)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3293:     and bail out",
          "3295:  if(!pinfo->can_desegment){",
          "3297:   goto clean_up_and_exit;",
          "3298:  }",
          "",
          "[Removed Lines]",
          "3296:   result = dissector_try_heuristic(smb_transact_heur_subdissector_list, d_tvb, pinfo, parent_tree, &hdtbl_entry, NULL);",
          "",
          "[Added Lines]",
          "3296:   result = dissector_try_heuristic(smb_transact_heur_subdissector_list, d_tvb, pinfo, parent_tree, &hdtbl_entry, data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3330:    if(!result){",
          "",
          "[Removed Lines]",
          "3327:    result = dissector_try_heuristic(smb_transact_heur_subdissector_list, d_tvb, pinfo, parent_tree, &hdtbl_entry, NULL);",
          "",
          "[Added Lines]",
          "3327:    result = dissector_try_heuristic(smb_transact_heur_subdissector_list, d_tvb, pinfo, parent_tree, &hdtbl_entry, data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3375:        tree, pinfo, d_tvb, &frag_tree_item);",
          "3379:   }",
          "3380:   goto clean_up_and_exit;",
          "3381:  }",
          "",
          "[Removed Lines]",
          "3378:    result = dissector_try_heuristic(smb_transact_heur_subdissector_list, d_tvb, pinfo, parent_tree, &hdtbl_entry, NULL);",
          "",
          "[Added Lines]",
          "3378:    result = dissector_try_heuristic(smb_transact_heur_subdissector_list, d_tvb, pinfo, parent_tree, &hdtbl_entry, data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3396:      and bail out",
          "3399:   goto clean_up_and_exit;",
          "3400:  }",
          "3401:  if(!(fd_head->flags&FD_DEFRAGMENTED)){",
          "3404:   goto clean_up_and_exit;",
          "3405:  }",
          "",
          "[Removed Lines]",
          "3398:   result = dissector_try_heuristic(smb_transact_heur_subdissector_list, d_tvb, pinfo, parent_tree, &hdtbl_entry, NULL);",
          "3403:   result = dissector_try_heuristic(smb_transact_heur_subdissector_list, d_tvb, pinfo, parent_tree, &hdtbl_entry, NULL);",
          "",
          "[Added Lines]",
          "3398:   result = dissector_try_heuristic(smb_transact_heur_subdissector_list, d_tvb, pinfo, parent_tree, &hdtbl_entry, data);",
          "3403:   result = dissector_try_heuristic(smb_transact_heur_subdissector_list, d_tvb, pinfo, parent_tree, &hdtbl_entry, data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3424:       tree, pinfo, d_tvb, &frag_tree_item);",
          "",
          "[Removed Lines]",
          "3427:  result = dissector_try_heuristic(smb_transact_heur_subdissector_list, d_tvb, pinfo, parent_tree, &hdtbl_entry, NULL);",
          "",
          "[Added Lines]",
          "3427:  result = dissector_try_heuristic(smb_transact_heur_subdissector_list, d_tvb, pinfo, parent_tree, &hdtbl_entry, data);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3667:    if (fid != -1) {",
          "3668:     if (d_tvb == NULL)",
          "3669:      return FALSE;",
          "3671:    }",
          "3672:    break;",
          "3673:   }",
          "",
          "[Removed Lines]",
          "3670:     return dissect_pipe_dcerpc(d_tvb, pinfo, tree, pipe_tree, fid);",
          "",
          "[Added Lines]",
          "3670:     return dissect_pipe_dcerpc(d_tvb, pinfo, tree, pipe_tree, fid, smb_info);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-smb-pipe.h||epan/dissectors/packet-smb-pipe.h": [
          "File: epan/dissectors/packet-smb-pipe.h -> epan/dissectors/packet-smb-pipe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:    packet_info *pinfo, proto_tree *tree, smb_info_t *smb_info);",
          "31: gboolean",
          "32: dissect_pipe_dcerpc(tvbuff_t *d_tvb, packet_info *pinfo, proto_tree *parent_tree,",
          "35: #endif",
          "",
          "[Removed Lines]",
          "33:   proto_tree *tree, guint32 fid);",
          "",
          "[Added Lines]",
          "33:   proto_tree *tree, guint32 fid, void *data);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-smb.c||epan/dissectors/packet-smb.c": [
          "File: epan/dissectors/packet-smb.c -> epan/dissectors/packet-smb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4208: static int",
          "4209: dissect_file_data_dcerpc(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "4211: {",
          "4212:  int       tvblen;",
          "4213:  tvbuff_t *dcerpc_tvb;",
          "",
          "[Removed Lines]",
          "4210:     proto_tree *top_tree, int offset, guint16 bc, guint16 datalen, guint16 fid)",
          "",
          "[Added Lines]",
          "4210:     proto_tree *top_tree, int offset, guint16 bc, guint16 datalen, guint16 fid,",
          "4211:     void *data)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4222:  }",
          "4223:  tvblen = tvb_reported_length_remaining(tvb, offset);",
          "4224:  dcerpc_tvb = tvb_new_subset(tvb, offset, tvblen, bc);",
          "4226:  if (bc > tvblen)",
          "4227:   offset += tvblen;",
          "4228:  else",
          "",
          "[Removed Lines]",
          "4225:  dissect_pipe_dcerpc(dcerpc_tvb, pinfo, top_tree, tree, fid);",
          "",
          "[Added Lines]",
          "4226:  dissect_pipe_dcerpc(dcerpc_tvb, pinfo, top_tree, tree, fid, data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4248:  if ( (si->sip && (si->sip->flags & SMB_SIF_TID_IS_IPC)) && (ofs == 0) ) {",
          "4250:   return dissect_file_data_dcerpc(tvb, pinfo, tree,",
          "4252:  } else {",
          "4254:   return dissect_file_data(tvb, tree, offset, bc, datalen);",
          "",
          "[Removed Lines]",
          "4251:       top_tree, offset, bc, datalen, fid);",
          "",
          "[Added Lines]",
          "4252:       top_tree, offset, bc, datalen, fid, si);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8330:   ioctl_tvb = tvb_new_subset(tvb, offset, MIN((int)bc, tvb_reported_length_remaining(tvb, offset)), bc);",
          "8331:   if (nti) {",
          "8333:   }",
          "8335:   offset += bc;",
          "",
          "[Removed Lines]",
          "8332:    dissect_smb2_ioctl_data(ioctl_tvb, pinfo, tree, top_tree_global, nti->ioctl_function, TRUE);",
          "",
          "[Added Lines]",
          "8333:    dissect_smb2_ioctl_data(ioctl_tvb, pinfo, tree, top_tree_global, nti->ioctl_function, TRUE, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8910:  case NT_TRANS_IOCTL:",
          "8912:   ioctl_tvb = tvb_new_subset(tvb, offset, MIN((int)len, tvb_reported_length_remaining(tvb, offset)), len);",
          "8915:   offset += len;",
          "",
          "[Removed Lines]",
          "8913:   dissect_smb2_ioctl_data(ioctl_tvb, pinfo, tree, top_tree_global, nti->ioctl_function, FALSE);",
          "",
          "[Added Lines]",
          "8914:   dissect_smb2_ioctl_data(ioctl_tvb, pinfo, tree, top_tree_global, nti->ioctl_function, FALSE, NULL);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-smb2.c||epan/dissectors/packet-smb2.c": [
          "File: epan/dissectors/packet-smb2.c -> epan/dissectors/packet-smb2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1583:  di.conformant_run = 0;",
          "1585:  di.call_data = &call_data;",
          "1588:  switch (mode) {",
          "1589:  case FID_MODE_OPEN:",
          "",
          "[Removed Lines]",
          "1586:  di.dcerpc_procedure_name = \"\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4421: }",
          "4423: static int",
          "4425: {",
          "4426:  tvbuff_t *dcerpc_tvb;",
          "4427:  heur_dtbl_entry_t *hdtbl_entry;",
          "",
          "[Removed Lines]",
          "4424: dissect_file_data_dcerpc(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree _U_, int offset, guint32 datalen, proto_tree *top_tree)",
          "",
          "[Added Lines]",
          "4423: dissect_file_data_dcerpc(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree _U_, int offset, guint32 datalen, proto_tree *top_tree, void *data)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4429:  dcerpc_tvb = tvb_new_subset(tvb, offset, MIN((int)datalen, tvb_captured_length_remaining(tvb, offset)), datalen);",
          "4437:  return offset;",
          "4438: }",
          "",
          "[Removed Lines]",
          "4432:  dissector_try_heuristic(smb2_heur_subdissector_list, dcerpc_tvb, pinfo, top_tree, &hdtbl_entry, NULL);",
          "4435:  offset += datalen;",
          "",
          "[Added Lines]",
          "4431:  if (dissector_try_heuristic(smb2_heur_subdissector_list, dcerpc_tvb, pinfo, top_tree, &hdtbl_entry, data)) {",
          "4434:   offset += datalen;",
          "4435:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4552:  }",
          "4556:   smb2_set_dcerpc_file_id(pinfo, si);",
          "4559:  }",
          "",
          "[Removed Lines]",
          "4555:  if (length && si->tree && si->tree->share_type == SMB2_SHARE_TYPE_PIPE) {",
          "4557:   offset = dissect_file_data_dcerpc(tvb, pinfo, tree, offset, length, si->top_tree);",
          "4558:   return offset;",
          "",
          "[Added Lines]",
          "4554:  if (length) {",
          "4555:   int oldoffset = offset;",
          "4557:   offset = dissect_file_data_dcerpc(tvb, pinfo, tree, offset, length, si->top_tree, si);",
          "4558:   if (offset != oldoffset) {",
          "4560:    return offset;",
          "4561:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4612: }",
          "4614: static void",
          "4616: {",
          "4618: }",
          "4620: static void",
          "",
          "[Removed Lines]",
          "4615: dissect_smb2_FSCTL_PIPE_TRANSCEIVE(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset, proto_tree *top_tree, gboolean data_in _U_)",
          "4617:  dissect_file_data_dcerpc(tvb, pinfo, tree, offset, tvb_captured_length_remaining(tvb, offset), top_tree);",
          "",
          "[Added Lines]",
          "4618: dissect_smb2_FSCTL_PIPE_TRANSCEIVE(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset, proto_tree *top_tree, gboolean data_in _U_, void *data)",
          "4620:  dissect_file_data_dcerpc(tvb, pinfo, tree, offset, tvb_captured_length_remaining(tvb, offset), top_tree, data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5138: }",
          "5140: void",
          "5142: {",
          "5143:  guint16 dc;",
          "",
          "[Removed Lines]",
          "5141: dissect_smb2_ioctl_data(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, proto_tree *top_tree, guint32 ioctl_function, gboolean data_in)",
          "",
          "[Added Lines]",
          "5145: dissect_smb2_ioctl_data(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, proto_tree *top_tree, guint32 ioctl_function, gboolean data_in, void *private_data _U_)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5153:   }",
          "5154:   break;",
          "5157:   break;",
          "5159:   dissect_smb2_FSCTL_PIPE_WAIT(tvb, pinfo, tree, 0, top_tree, data_in);",
          "",
          "[Removed Lines]",
          "5156:   dissect_smb2_FSCTL_PIPE_TRANSCEIVE(tvb, pinfo, tree, 0, top_tree, data_in);",
          "",
          "[Added Lines]",
          "5160:   dissect_smb2_FSCTL_PIPE_TRANSCEIVE(tvb, pinfo, tree, 0, top_tree, data_in, private_data);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5208: dissect_smb2_ioctl_data_in(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, smb2_info_t *si)",
          "5209: {",
          "5210:  smb2_set_dcerpc_file_id(pinfo, si);",
          "5212: }",
          "5214: static void",
          "5215: dissect_smb2_ioctl_data_out(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, smb2_info_t *si)",
          "5216: {",
          "5217:  smb2_set_dcerpc_file_id(pinfo, si);",
          "5219: }",
          "5221: static int",
          "",
          "[Removed Lines]",
          "5211:  dissect_smb2_ioctl_data(tvb, pinfo, tree, si->top_tree, si->ioctl_function, TRUE);",
          "5218:  dissect_smb2_ioctl_data(tvb, pinfo, tree, si->top_tree, si->ioctl_function, FALSE);",
          "",
          "[Added Lines]",
          "5215:  dissect_smb2_ioctl_data(tvb, pinfo, tree, si->top_tree, si->ioctl_function, TRUE, si);",
          "5222:  dissect_smb2_ioctl_data(tvb, pinfo, tree, si->top_tree, si->ioctl_function, FALSE, si);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5445:  offset += 4;",
          "5452:   smb2_set_dcerpc_file_id(pinfo, si);",
          "5455:  }",
          "",
          "[Removed Lines]",
          "5451:  if (length && ( (si->tree && si->tree->share_type == SMB2_SHARE_TYPE_PIPE)||(si->flags & SMB2_FLAGS_ASYNC_CMD))) {",
          "5453:   offset = dissect_file_data_dcerpc(tvb, pinfo, tree, offset, length, si->top_tree);",
          "5454:   return offset;",
          "",
          "[Added Lines]",
          "5452:  if (length) {",
          "5453:   int oldoffset = offset;",
          "5455:   offset = dissect_file_data_dcerpc(tvb, pinfo, tree, offset, length, si->top_tree, si);",
          "5456:   if (offset != oldoffset) {",
          "5458:    return offset;",
          "5459:   }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-smb2.h||epan/dissectors/packet-smb2.h": [
          "File: epan/dissectors/packet-smb2.h -> epan/dissectors/packet-smb2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "188: int dissect_smb2_FILE_OBJECTID_BUFFER(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset);",
          "189: int dissect_smb2_ioctl_function(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, int offset, guint32 *ioctl_function);",
          "192: #endif",
          "",
          "[Removed Lines]",
          "190: void dissect_smb2_ioctl_data(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, proto_tree *top_tree, guint32 ioctl_function, gboolean data_in);",
          "",
          "[Added Lines]",
          "190: void dissect_smb2_ioctl_data(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, proto_tree *top_tree, guint32 ioctl_function, gboolean data_in, void *private_data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15d6b59e8d6bc2647ed49a33f6b931161ba34027",
      "candidate_info": {
        "commit_hash": "15d6b59e8d6bc2647ed49a33f6b931161ba34027",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/15d6b59e8d6bc2647ed49a33f6b931161ba34027",
        "files": [
          "epan/dissectors/packet-mswsp.c"
        ],
        "message": "Check first, then allocate.\n\nWhile we're at it, the MS-WSP spec says that the array size is unsigned,\nand sizeof is always unsigned, so do unsigned arithmetic when doing the\nmultiplication, so we don't have to worry about overflowing the maximum\nint size.\n\nBug: 12341\nChange-Id: Ibe8d6cea2628ab9c50a2de55f8533ec07cc4e576\nReviewed-on: https://code.wireshark.org/review/14936\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-mswsp.c||epan/dissectors/packet-mswsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mswsp.c||epan/dissectors/packet-mswsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mswsp.c||epan/dissectors/packet-mswsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-mswsp.c||epan/dissectors/packet-mswsp.c": [
          "File: epan/dissectors/packet-mswsp.c -> epan/dissectors/packet-mswsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <epan/packet.h>",
          "28: #include <epan/expert.h>",
          "30: #include \"packet-smb.h\"",
          "31: #include \"packet-smb2.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <epan/exceptions.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3981:  return 4 + vvalue_tvb_lpwstr_len(tvb, offset + 4, 0, val);",
          "3982: }",
          "3985: {",
          "3986:  const int offset_in = offset;",
          "3987:  const gboolean varsize = (type->size == -1);",
          "3992:  val->len = num;",
          "3993:  val->u.vt_ui1 = data;",
          "",
          "[Removed Lines]",
          "3984: static int vvalue_tvb_vector_internal(tvbuff_t *tvb, int offset, struct vt_vector *val, struct vtype_data *type, int num)",
          "3988:  const int elsize = varsize ? (int)sizeof(struct data_blob) : type->size;",
          "3989:  guint8 *data = (guint8*)wmem_alloc(wmem_packet_scope(), elsize * num);",
          "3990:  int len, i;",
          "",
          "[Added Lines]",
          "3985: static int vvalue_tvb_vector_internal(tvbuff_t *tvb, int offset, struct vt_vector *val, struct vtype_data *type, guint num)",
          "3989:  const guint elsize = varsize ? (guint)sizeof(struct data_blob) : (guint)type->size;",
          "3990:  guint8 *data;",
          "3991:  int len;",
          "3992:  guint i;",
          "4001:  if ((guint64)elsize * (guint64)num > G_MAXUINT) {",
          "4006:   THROW(ReportedBoundsError);",
          "4007:  }",
          "4012:  tvb_ensure_bytes_exist(tvb, offset, elsize * num);",
          "4017:  data = (guint8*)wmem_alloc(wmem_packet_scope(), elsize * num);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4010: static int vvalue_tvb_vector(tvbuff_t *tvb, int offset, struct vt_vector *val, struct vtype_data *type)",
          "4011: {",
          "4013:  return 4 + vvalue_tvb_vector_internal(tvb, offset+4, val, type, num);",
          "4014: }",
          "",
          "[Removed Lines]",
          "4012:  const int num = tvb_get_letohl(tvb, offset);",
          "",
          "[Added Lines]",
          "4039:  const guint num = tvb_get_letohl(tvb, offset);",
          "",
          "---------------"
        ]
      }
    }
  ]
}