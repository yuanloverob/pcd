{
  "cve_id": "CVE-2010-1155",
  "cve_desc": "Irssi before 0.8.15, when SSL is used, does not verify that the server hostname matches a domain name in the subject's Common Name (CN) field or a Subject Alternative Name field of the X.509 certificate, which allows man-in-the-middle attackers to spoof IRC servers via an arbitrary certificate.",
  "repo": "ensc/irssi-proxy",
  "patch_hash": "85bbc05b21678e80423815d2ef1dfe26208491ab",
  "patch_info": {
    "commit_hash": "85bbc05b21678e80423815d2ef1dfe26208491ab",
    "repo": "ensc/irssi-proxy",
    "commit_url": "https://github.com/ensc/irssi-proxy/commit/85bbc05b21678e80423815d2ef1dfe26208491ab",
    "files": [
      "src/core/network-openssl.c",
      "src/core/network.h",
      "src/core/servers.c"
    ],
    "message": "Check if an SSL certificate matches the hostname of the server we are connecting to\n\ngit-svn-id: http://svn.irssi.org/repos/irssi/trunk@5104 dbcabf3a-b0e7-0310-adc4-f8d773084564",
    "before_after_code_files": [
      "src/core/network-openssl.c||src/core/network-openssl.c",
      "src/core/network.h||src/core/network.h",
      "src/core/servers.c||src/core/servers.c"
    ]
  },
  "patch_diff": {
    "src/core/network-openssl.c||src/core/network-openssl.c": [
      "File: src/core/network-openssl.c -> src/core/network-openssl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include <openssl/crypto.h>",
      "28: #include <openssl/x509.h>",
      "29: #include <openssl/pem.h>",
      "30: #include <openssl/ssl.h>",
      "31: #include <openssl/err.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: #include <openssl/x509v3.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39:  SSL *ssl;",
      "40:  SSL_CTX *ctx;",
      "41:  unsigned int verify:1;",
      "42: } GIOSSLChannel;",
      "44: static SSL_CTX *ssl_ctx = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43:  const char *hostname;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53:  g_free(chan);",
      "54: }",
      "57: {",
      "58:  if (SSL_get_verify_result(ssl) != X509_V_OK) {",
      "59:   unsigned char md[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "56: static gboolean irssi_ssl_verify(SSL *ssl, SSL_CTX *ctx, X509 *cert)",
      "",
      "[Added Lines]",
      "59: static gboolean has_internal_nul(const char* str, int len) {",
      "61:  while (len > 0 && str[len-1] == 0)",
      "62:   len--;",
      "63:  return strlen(str) != len;",
      "64: }",
      "67: static const char *tls_dns_name(const GENERAL_NAME * gn)",
      "68: {",
      "69:  const char *dnsname;",
      "73:  if (ASN1_STRING_type(gn->d.ia5) != V_ASN1_IA5STRING) {",
      "74:   g_warning(\"Invalid ASN1 value type in subjectAltName\");",
      "75:   return NULL;",
      "76:  }",
      "79:  dnsname = (char *) ASN1_STRING_data(gn->d.ia5);",
      "81:  if (has_internal_nul(dnsname, ASN1_STRING_length(gn->d.ia5))) {",
      "82:   g_warning(\"Internal NUL in subjectAltName\");",
      "83:   return NULL;",
      "84:  }",
      "86:  return dnsname;",
      "87: }",
      "90: static char *tls_text_name(X509_NAME *name, int nid)",
      "91: {",
      "92:  int     pos;",
      "93:  X509_NAME_ENTRY *entry;",
      "94:  ASN1_STRING *entry_str;",
      "95:  int     utf8_length;",
      "96:  unsigned char *utf8_value;",
      "97:  char *result;",
      "99:  if (name == 0 || (pos = X509_NAME_get_index_by_NID(name, nid, -1)) < 0) {",
      "100:   return NULL;",
      "101:     }",
      "103:     entry = X509_NAME_get_entry(name, pos);",
      "104:     g_return_val_if_fail(entry != NULL, NULL);",
      "105:     entry_str = X509_NAME_ENTRY_get_data(entry);",
      "106:     g_return_val_if_fail(entry_str != NULL, NULL);",
      "109:     reasonable when converting ASCII formats that contain non-ASCII",
      "111:     if ((utf8_length = ASN1_STRING_to_UTF8(&utf8_value, entry_str)) < 0) {",
      "112:      g_warning(\"Error decoding ASN.1 type=%d\", ASN1_STRING_type(entry_str));",
      "113:      return NULL;",
      "114:     }",
      "116:     if (has_internal_nul((char *)utf8_value, utf8_length)) {",
      "117:      g_warning(\"NUL character in hostname in certificate\");",
      "118:      OPENSSL_free(utf8_value);",
      "119:      return NULL;",
      "120:     }",
      "122:     result = g_strdup((char *) utf8_value);",
      "123:  OPENSSL_free(utf8_value);",
      "124:  return result;",
      "125: }",
      "129: static gboolean match_hostname(const char *cert_hostname, const char *hostname)",
      "130: {",
      "131:  const char *hostname_left;",
      "134:   return TRUE;",
      "137:   hostname_left = strchr(hostname, '.');",
      "138:   if (hostname_left != NULL && ! strcasecmp(hostname_left + 1, cert_hostname + 2)) {",
      "139:    return TRUE;",
      "140:   }",
      "141:  }",
      "142:  return FALSE;",
      "143: }",
      "146: static gboolean irssi_ssl_verify_hostname(X509 *cert, const char *hostname)",
      "147: {",
      "148:  int gen_index, gen_count;",
      "149:  gboolean matched = FALSE, has_dns_name = FALSE;",
      "150:  const char *cert_dns_name;",
      "151:  char *cert_subject_cn;",
      "152:  const GENERAL_NAME *gn;",
      "153:  STACK_OF(GENERAL_NAME) * gens;",
      "156:  gens = X509_get_ext_d2i(cert, NID_subject_alt_name, 0, 0);",
      "157:  if (gens) {",
      "158:   gen_count = sk_GENERAL_NAME_num(gens);",
      "159:   for (gen_index = 0; gen_index < gen_count && !matched; ++gen_index) {",
      "160:    gn = sk_GENERAL_NAME_value(gens, gen_index);",
      "161:    if (gn->type != GEN_DNS)",
      "162:     continue;",
      "165:       ignore the CommonName, because subjectAltName:DNS is",
      "167:    has_dns_name = TRUE;",
      "168:    cert_dns_name = tls_dns_name(gn);",
      "169:    if (cert_dns_name && *cert_dns_name) {",
      "170:     matched = match_hostname(cert_dns_name, hostname);",
      "171:    }",
      "172:      }",
      "175:      sk_GENERAL_NAME_pop_free(gens, GENERAL_NAME_free);",
      "176:  }",
      "178:  if (has_dns_name) {",
      "179:   if (! matched) {",
      "181:    g_warning(\"None of the Subject Alt Names in the certificate match hostname '%s'\", hostname);",
      "182:   }",
      "183:   return matched;",
      "185:   cert_subject_cn = tls_text_name(X509_get_subject_name(cert), NID_commonName);",
      "186:      if (cert_subject_cn && *cert_subject_cn) {",
      "187:       matched = match_hostname(cert_subject_cn, hostname);",
      "188:       if (! matched) {",
      "189:     g_warning(\"SSL certificate common name '%s' doesn't match host name '%s'\", cert_subject_cn, hostname);",
      "190:       }",
      "191:      } else {",
      "192:       g_warning(\"No subjectAltNames and no valid common name in certificate\");",
      "193:      }",
      "194:      free(cert_subject_cn);",
      "195:  }",
      "197:  return matched;",
      "198: }",
      "200: static gboolean irssi_ssl_verify(SSL *ssl, SSL_CTX *ctx, const char* hostname, X509 *cert)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "89:    }",
      "90:   }",
      "91:   return FALSE;",
      "92:  }",
      "93:  return TRUE;",
      "94: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "236:  } else if (! irssi_ssl_verify_hostname(cert, hostname)){",
      "237:   return FALSE;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "242: }",
      "245: {",
      "246:  GIOSSLChannel *chan;",
      "247:  GIOChannel *gchan;",
      "",
      "[Removed Lines]",
      "244: static GIOChannel *irssi_ssl_get_iochannel(GIOChannel *handle, const char *mycert, const char *mypkey, const char *cafile, const char *capath, gboolean verify)",
      "",
      "[Added Lines]",
      "390: static GIOChannel *irssi_ssl_get_iochannel(GIOChannel *handle, const char *hostname, const char *mycert, const char *mypkey, const char *cafile, const char *capath, gboolean verify)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "326:  chan->ssl = ssl;",
      "327:  chan->ctx = ctx;",
      "328:  chan->verify = verify;",
      "330:  gchan = (GIOChannel *)chan;",
      "331:  gchan->funcs = &irssi_ssl_channel_funcs;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "475:  chan->hostname = hostname;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "336:  return gchan;",
      "337: }",
      "340: {",
      "341:  GIOChannel *handle, *ssl_handle;",
      "343:  handle = net_connect_ip(ip, port, my_ip);",
      "344:  if (handle == NULL)",
      "345:   return NULL;",
      "347:  if (ssl_handle == NULL)",
      "348:   g_io_channel_unref(handle);",
      "349:  return ssl_handle;",
      "",
      "[Removed Lines]",
      "339: GIOChannel *net_connect_ip_ssl(IPADDR *ip, int port, IPADDR *my_ip, const char *cert, const char *pkey, const char *cafile, const char *capath, gboolean verify)",
      "346:  ssl_handle  = irssi_ssl_get_iochannel(handle, cert, pkey, cafile, capath, verify);",
      "",
      "[Added Lines]",
      "486: GIOChannel *net_connect_ip_ssl(IPADDR *ip, int port, const char* hostname, IPADDR *my_ip, const char *cert, const char *pkey, const char *cafile, const char *capath, gboolean verify)",
      "493:  ssl_handle  = irssi_ssl_get_iochannel(handle, hostname, cert, pkey, cafile, capath, verify);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "385:   g_warning(\"SSL server supplied no certificate\");",
      "386:   return -1;",
      "387:  }",
      "389:  X509_free(cert);",
      "390:  return ret ? 0 : -1;",
      "391: }",
      "",
      "[Removed Lines]",
      "388:  ret = !chan->verify || irssi_ssl_verify(chan->ssl, chan->ctx, cert);",
      "",
      "[Added Lines]",
      "535:  ret = !chan->verify || irssi_ssl_verify(chan->ssl, chan->ctx, chan->hostname, cert);",
      "",
      "---------------"
    ],
    "src/core/network.h||src/core/network.h": [
      "File: src/core/network.h -> src/core/network.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "48: GIOChannel *net_connect(const char *addr, int port, IPADDR *my_ip);",
      "51: int irssi_ssl_handshake(GIOChannel *handle);",
      "53: GIOChannel *net_connect_ip(IPADDR *ip, int port, IPADDR *my_ip);",
      "",
      "[Removed Lines]",
      "50: GIOChannel *net_connect_ip_ssl(IPADDR *ip, int port, IPADDR *my_ip, const char *cert, const char *pkey, const char *cafile, const char *capath, gboolean verify);",
      "",
      "[Added Lines]",
      "50: GIOChannel *net_connect_ip_ssl(IPADDR *ip, int port, const char* hostname, IPADDR *my_ip, const char *cert, const char *pkey, const char *cafile, const char *capath, gboolean verify);",
      "",
      "---------------"
    ],
    "src/core/servers.c||src/core/servers.c": [
      "File: src/core/servers.c -> src/core/servers.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "224:   port = server->connrec->proxy != NULL ?",
      "225:    server->connrec->proxy_port : server->connrec->port;",
      "226:   handle = server->connrec->use_ssl ?",
      "228: server->connrec->ssl_cafile, server->connrec->ssl_capath, server->connrec->ssl_verify) :",
      "229:    net_connect_ip(ip, port, own_ip);",
      "230:  } else {",
      "",
      "[Removed Lines]",
      "227:    net_connect_ip_ssl(ip, port, own_ip, server->connrec->ssl_cert, server->connrec->ssl_pkey,",
      "",
      "[Added Lines]",
      "227:    net_connect_ip_ssl(ip, port, server->connrec->address, own_ip, server->connrec->ssl_cert, server->connrec->ssl_pkey,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c15b5891470a0e9e77b6e5624f7ae6a07aa59628",
      "candidate_info": {
        "commit_hash": "c15b5891470a0e9e77b6e5624f7ae6a07aa59628",
        "repo": "ensc/irssi-proxy",
        "commit_url": "https://github.com/ensc/irssi-proxy/commit/c15b5891470a0e9e77b6e5624f7ae6a07aa59628",
        "files": [
          "src/core/Makefile.am",
          "src/core/network-openssl.c",
          "src/core/network-proxy-priv.h",
          "src/core/network-proxy.c",
          "src/core/network-proxy.h",
          "src/core/network.c",
          "src/core/network.h",
          "src/core/server-connect-rec.h",
          "src/core/servers-reconnect.c",
          "src/core/servers-setup.c",
          "src/core/servers.c",
          "src/irc/core/irc-servers.c"
        ],
        "message": "PROXY: implemented native proxy support\n\nThis patch creates a hook into the net_connect*() methods which call a\nmethod to connect to a proxy.\n\nPrevious solution to send certain strings in the normal IRC dialog was\nsome kind of hack as most proxies require some kind of negotation.\n\nE.g. HTTP proxies send a 'HTTP/1.0 200 Connection established' HTTP header\nand clients have to wait for it.  Else, sent bytes of the following IRC\nlogin will be dropped silently.\n\nWith old method, it is also impossible to tunnel SSL IRC connections\nthrough the proxy as proxy speaks plain text or a special protocol while\ne.g. 'CONNECT ... HTTP/1.0' will be encrypted with key of IRC server.\n\nThere are further enhancements possible: the whole net_connect stuff\nshould be made asynchronously. Currently, only the hostname is resolved\nin the background (which makes little sense of local proxies usually).",
        "before_after_code_files": [
          "src/core/Makefile.am||src/core/Makefile.am",
          "src/core/network-openssl.c||src/core/network-openssl.c",
          "src/core/network-proxy-priv.h||src/core/network-proxy-priv.h",
          "src/core/network-proxy.c||src/core/network-proxy.c",
          "src/core/network-proxy.h||src/core/network-proxy.h",
          "src/core/network.c||src/core/network.c",
          "src/core/network.h||src/core/network.h",
          "src/core/server-connect-rec.h||src/core/server-connect-rec.h",
          "src/core/servers-reconnect.c||src/core/servers-reconnect.c",
          "src/core/servers-setup.c||src/core/servers-setup.c",
          "src/core/servers.c||src/core/servers.c",
          "src/irc/core/irc-servers.c||src/irc/core/irc-servers.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/network-openssl.c||src/core/network-openssl.c",
            "src/core/network.h||src/core/network.h",
            "src/core/servers.c||src/core/servers.c"
          ],
          "candidate": [
            "src/core/network-openssl.c||src/core/network-openssl.c",
            "src/core/network.h||src/core/network.h",
            "src/core/servers.c||src/core/servers.c"
          ]
        }
      },
      "candidate_diff": {
        "src/core/Makefile.am||src/core/Makefile.am": [
          "File: src/core/Makefile.am -> src/core/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  net-sendbuffer.c \\",
          "32:  network.c \\",
          "33:  network-openssl.c \\",
          "34:  nicklist.c \\",
          "35:  nickmatch-cache.c \\",
          "36:  pidwait.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:  network-proxy.c \\",
          "35:  network-proxy.h \\",
          "36:  network-proxy-priv.h \\",
          "",
          "---------------"
        ],
        "src/core/network-openssl.c||src/core/network-openssl.c": [
          "File: src/core/network-openssl.c -> src/core/network-openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "479:  return gchan;",
          "480: }",
          "483: {",
          "484:  GIOChannel *handle, *ssl_handle;",
          "487:  if (handle == NULL)",
          "488:   return NULL;",
          "489:  ssl_handle  = irssi_ssl_get_iochannel(handle, hostname, cert, pkey, cafile, capath, verify);",
          "",
          "[Removed Lines]",
          "482: GIOChannel *net_connect_ip_ssl(IPADDR *ip, int port, const char* hostname, IPADDR *my_ip, const char *cert, const char *pkey, const char *cafile, const char *capath, gboolean verify)",
          "486:  handle = net_connect_ip(ip, port, my_ip);",
          "",
          "[Added Lines]",
          "482: GIOChannel *net_connect_proxy_ssl(struct network_proxy const *proxy, const char* hostname, int port, IPADDR *ip, IPADDR *my_ip, const char *cert, const char *pkey, const char *cafile, const char *capath, gboolean verify)",
          "486:  handle = net_connect_proxy(proxy, hostname, port, ip, my_ip);",
          "",
          "---------------"
        ],
        "src/core/network-proxy-priv.h||src/core/network-proxy-priv.h": [
          "File: src/core/network-proxy-priv.h -> src/core/network-proxy-priv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #ifndef H_IRSSI_SRC_CORE_PROXY_PRIV_H",
          "18: #define H_IRSSI_SRC_CORE_PROXY_PRIV_H",
          "20: #include \"settings.h\"",
          "21: #include <stdbool.h>",
          "24: #define container_of(ptr, type, member)  __extension__ ({     \\",
          "25:  const __typeof__( ((type *)0)->member ) *__mptr = (ptr);    \\",
          "26:  (type *)( (char *)__mptr - offsetof(type,member) );})",
          "29: inline static void",
          "30: _network_proxy_create(struct network_proxy *dst)",
          "31: {",
          "32:  dst->port  = settings_get_int(\"proxy_port\");",
          "33:  dst->host  = g_strdup(settings_get_str(\"proxy_address\"));",
          "34: }",
          "36: inline static void",
          "37: _network_proxy_clone(struct network_proxy *dst, struct network_proxy const *src)",
          "38: {",
          "39:  dst->host  = g_strdup(src->host);",
          "40:  dst->port  = src->port;",
          "42:  dst->destroy = src->destroy;",
          "43:  dst->connect = src->connect;",
          "44:  dst->clone   = src->clone;",
          "45: }",
          "47: inline static void",
          "48: _network_proxy_destroy(struct network_proxy *proxy)",
          "49: {",
          "50:  g_free((void *)proxy->host);",
          "51: }",
          "55: inline static bool",
          "56: _network_proxy_send_all(GIOChannel *ch, void const *buf, ssize_t len)",
          "57: {",
          "58:  GError    *err = NULL;",
          "59:  gsize    written;",
          "60:  GIOStatus   status;",
          "62:  while ((status=g_io_channel_write_chars(ch, buf, len, &written,",
          "63:       &err))==G_IO_STATUS_AGAIN)",
          "64:   continue;",
          "66:  if (status==G_IO_STATUS_NORMAL)",
          "67:   return true;",
          "69:  if (err) {",
          "70:   g_warning(\"failed to send proxy request: %s\", err->message);",
          "71:   g_error_free(err);",
          "72:  }",
          "74:  return false;",
          "75: }",
          "77: inline static bool",
          "78: _network_proxy_recv_all(GIOChannel *ch, void *buf_v, size_t len)",
          "79: {",
          "80:  GError    *err = NULL;",
          "81:  gchar    *buf = buf_v;",
          "83:  while (len>0) {",
          "84:   GIOStatus  status;",
          "85:   gsize   l;",
          "87:   status = g_io_channel_read_chars(ch, buf, len, &l, &err);",
          "88:   if (status==G_IO_STATUS_AGAIN)",
          "89:    continue;",
          "90:   if (status!=G_IO_STATUS_NORMAL)",
          "91:    break;",
          "93:   buf += l;",
          "94:   len -= l;",
          "95:  }",
          "97:  if (len==0)",
          "98:   return true;",
          "100:  if (err) {",
          "101:   g_warning(\"failed to send proxy request: %s\", err->message);",
          "102:   g_error_free(err);",
          "103:  }",
          "105:  return false;",
          "106: }",
          "108: inline static bool",
          "109: _network_proxy_flush(GIOChannel *ch)",
          "110: {",
          "111:  GError   *err = NULL;",
          "112:  GIOStatus  status;",
          "114:  while ((status=g_io_channel_flush(ch, &err))==G_IO_STATUS_AGAIN)",
          "115:   continue;",
          "117:  if (status==G_IO_STATUS_NORMAL)",
          "118:   return true;",
          "120:  if (err) {",
          "121:   g_warning(\"failed to flush proxy channel: %s\", err->message);",
          "122:   g_error_free(err);",
          "123:  }",
          "125:  return false;",
          "126: }",
          "",
          "---------------"
        ],
        "src/core/network-proxy.c||src/core/network-proxy.c": [
          "File: src/core/network-proxy.c -> src/core/network-proxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include \"module.h\"",
          "19: #include \"network-proxy.h\"",
          "20: #include <string.h>",
          "22: struct network_proxy *",
          "23: network_proxy_create(char const *type)",
          "24: {",
          "25:  if (type==NULL)",
          "26:   return NULL;",
          "28:  g_error(\"unsupported proxy type '%s'\", type);",
          "29:  return NULL;",
          "30: }",
          "",
          "---------------"
        ],
        "src/core/network-proxy.h||src/core/network-proxy.h": [
          "File: src/core/network-proxy.h -> src/core/network-proxy.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #ifndef H_IRSSI_SRC_CORE_PROXY_H",
          "18: #define H_IRSSI_SRC_CORE_PROXY_H",
          "20: #include <glib.h>",
          "21: #include <stdint.h>",
          "25: struct network_proxy_send_string_info",
          "26: {",
          "31:  void   (*func)(void *obj, char const *);",
          "34:  void   *obj;",
          "35: };",
          "37: struct network_proxy {",
          "40:  void   (*destroy)(struct network_proxy *);",
          "49:  GIOChannel *  (*connect)(struct network_proxy const *, IPADDR const *hint_ip,",
          "50:         char const *address, int port);",
          "54:  struct network_proxy * (*clone)(struct network_proxy const *);",
          "60:  void   (*send_string)(struct network_proxy const *,",
          "61:             struct network_proxy_send_string_info const *);",
          "66:  void   (*send_string_after)(struct network_proxy const *,",
          "67:            struct network_proxy_send_string_info const *);",
          "71:  char const  *host;",
          "74:  int   port;",
          "75: };",
          "78: struct network_proxy *  network_proxy_create(char const *type);",
          "",
          "---------------"
        ],
        "src/core/network.c||src/core/network.c": [
          "File: src/core/network.c -> src/core/network.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"module.h\"",
          "22: #include \"network.h\"",
          "24: #include <sys/un.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"network-proxy.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158: }",
          "162: {",
          "163:  union sockaddr_union so;",
          "164:  int handle, ret, opt = 1;",
          "",
          "[Removed Lines]",
          "161: GIOChannel *net_connect_ip(IPADDR *ip, int port, IPADDR *my_ip)",
          "",
          "[Added Lines]",
          "162: GIOChannel *net_connect_ip(IPADDR const *ip, int port, IPADDR *my_ip)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:  return g_io_channel_new(handle);",
          "216: }",
          "219: GIOChannel *net_connect_unix(const char *path)",
          "220: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: GIOChannel *net_connect_proxy(struct network_proxy const *proxy,",
          "221:          char const *host, int port, IPADDR *ip, IPADDR *my_ip)",
          "222: {",
          "224:  if (proxy)",
          "225:   return proxy->connect(proxy, ip, host, port);",
          "226:  else",
          "227:   return net_connect_ip(ip, port, my_ip);",
          "228: }",
          "",
          "---------------"
        ],
        "src/core/network.h||src/core/network.h": [
          "File: src/core/network.h -> src/core/network.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #define IPADDR_IS_V6(ip) ((ip)->family != AF_INET)",
          "42: extern IPADDR ip4_any;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: struct network_proxy;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: GIOChannel *net_connect(const char *addr, int port, IPADDR *my_ip);",
          "51: int irssi_ssl_handshake(GIOChannel *handle);",
          "55: GIOChannel *net_connect_unix(const char *path);",
          "",
          "[Removed Lines]",
          "50: GIOChannel *net_connect_ip_ssl(IPADDR *ip, int port, const char* hostname, IPADDR *my_ip, const char *cert, const char *pkey, const char *cafile, const char *capath, gboolean verify);",
          "53: GIOChannel *net_connect_ip(IPADDR *ip, int port, IPADDR *my_ip);",
          "",
          "[Added Lines]",
          "51: GIOChannel *net_connect_ip(IPADDR const *ip, int port, IPADDR *my_ip);",
          "52: GIOChannel *net_connect_proxy_ssl(struct network_proxy const *proxy, const char* hostname, int port, IPADDR *ip, IPADDR *my_ip, const char *cert, const char *pkey, const char *cafile, const char *capath, gboolean verify);",
          "55: GIOChannel *net_connect_proxy(struct network_proxy const *proxy, char const *host, int port, IPADDR *ip, IPADDR *my_ip);",
          "",
          "---------------"
        ],
        "src/core/server-connect-rec.h||src/core/server-connect-rec.h": [
          "File: src/core/server-connect-rec.h -> src/core/server-connect-rec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: int refcount;",
          "",
          "[Removed Lines]",
          "9: char *proxy;",
          "10: int proxy_port;",
          "11: char *proxy_string, *proxy_string_after, *proxy_password;",
          "",
          "[Added Lines]",
          "8: struct network_proxy *proxy;",
          "",
          "---------------"
        ],
        "src/core/servers-reconnect.c||src/core/servers-reconnect.c": [
          "File: src/core/servers-reconnect.c -> src/core/servers-reconnect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"servers-reconnect.h\"",
          "31: #include \"settings.h\"",
          "33: GSList *reconnects;",
          "34: static int last_reconnect_tag;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"network-proxy.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:         server_connect_ref(dest);",
          "158:  dest->type = module_get_uniq_id(\"SERVER CONNECT\", 0);",
          "159:  dest->reconnection = src->reconnection;",
          "166:  dest->tag = g_strdup(src->tag);",
          "",
          "[Removed Lines]",
          "160:  dest->proxy = g_strdup(src->proxy);",
          "161:         dest->proxy_port = src->proxy_port;",
          "162:  dest->proxy_string = g_strdup(src->proxy_string);",
          "163:  dest->proxy_string_after = g_strdup(src->proxy_string_after);",
          "164:  dest->proxy_password = g_strdup(src->proxy_password);",
          "",
          "[Added Lines]",
          "161:  dest->proxy = src->proxy ? src->proxy->clone(src->proxy) : NULL;",
          "",
          "---------------"
        ],
        "src/core/servers-setup.c||src/core/servers-setup.c": [
          "File: src/core/servers-setup.c -> src/core/servers-setup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include \"chatnets.h\"",
          "29: #include \"servers.h\"",
          "30: #include \"servers-setup.h\"",
          "32: GSList *setupservers;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include \"network-proxy.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:  conn->username = g_strdup(settings_get_str(\"user_name\"));",
          "127:  conn->realname = g_strdup(settings_get_str(\"real_name\"));",
          "139:  if (source_host_ip4 != NULL) {",
          "140:   conn->own_ip4 = g_new(IPADDR, 1);",
          "",
          "[Removed Lines]",
          "130:  if (settings_get_bool(\"use_proxy\")) {",
          "131:   conn->proxy = g_strdup(settings_get_str(\"proxy_address\"));",
          "132:   conn->proxy_port = settings_get_int(\"proxy_port\");",
          "133:   conn->proxy_string = g_strdup(settings_get_str(\"proxy_string\"));",
          "134:   conn->proxy_string_after = g_strdup(settings_get_str(\"proxy_string_after\"));",
          "135:   conn->proxy_password = g_strdup(settings_get_str(\"proxy_password\"));",
          "136:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:   memcpy(conn->own_ip6, source_host_ip6, sizeof(IPADDR));",
          "146:  }",
          "148:  signal_emit(\"server setup fill connect\", 1, conn);",
          "149: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:  if (settings_get_bool(\"use_proxy\"))",
          "142:   conn->proxy = network_proxy_create(settings_get_str(\"proxy_type\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "541:  settings_add_str(\"proxy\", \"proxy_string\", \"CONNECT %s %d\");",
          "542:  settings_add_str(\"proxy\", \"proxy_string_after\", \"\");",
          "543:  settings_add_str(\"proxy\", \"proxy_password\", \"\");",
          "545:         setupservers = NULL;",
          "546:  source_host_ip4 = source_host_ip6 = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "540:  settings_add_str(\"proxy\", \"proxy_type\", \"simple\");",
          "",
          "---------------"
        ],
        "src/core/servers.c||src/core/servers.c": [
          "File: src/core/servers.c -> src/core/servers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include \"servers-setup.h\"",
          "35: #include \"channels.h\"",
          "36: #include \"queries.h\"",
          "38: GSList *servers, *lookup_servers;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #include \"network-proxy.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:   own_ip = ip == NULL ? NULL :",
          "222:    (IPADDR_IS_V6(ip) ? server->connrec->own_ip6 :",
          "223:     server->connrec->own_ip4);",
          "226:   handle = server->connrec->use_ssl ?",
          "230:  } else {",
          "231:   handle = net_connect_unix(unix_socket);",
          "232:  }",
          "",
          "[Removed Lines]",
          "224:   port = server->connrec->proxy != NULL ?",
          "225:    server->connrec->proxy_port : server->connrec->port;",
          "227:    net_connect_ip_ssl(ip, port, server->connrec->address, own_ip, server->connrec->ssl_cert, server->connrec->ssl_pkey,",
          "228: server->connrec->ssl_cafile, server->connrec->ssl_capath, server->connrec->ssl_verify) :",
          "229:    net_connect_ip(ip, port, own_ip);",
          "",
          "[Added Lines]",
          "225:   port = server->connrec->port;",
          "227:    net_connect_proxy_ssl(server->connrec->proxy,",
          "228:            server->connrec->address, port,",
          "229:            ip, own_ip,",
          "230:            server->connrec->ssl_cert,",
          "231:            server->connrec->ssl_pkey,",
          "232:            server->connrec->ssl_cafile,",
          "233:            server->connrec->ssl_capath, server->connrec->ssl_verify) :",
          "234:    net_connect_proxy(server->connrec->proxy,",
          "235:        server->connrec->address, port,",
          "236:        ip, own_ip);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "423:   server->connect_pipe[1] = g_io_channel_unix_new(fd[1]);",
          "425:   connect_address = server->connrec->proxy != NULL ?",
          "427:   server->connect_pid =",
          "428:    net_gethostbyname_nonblock(connect_address,",
          "429:          server->connect_pipe[1],",
          "",
          "[Removed Lines]",
          "426:    server->connrec->proxy : server->connrec->address;",
          "",
          "[Added Lines]",
          "433:    server->connrec->proxy->host : server->connrec->address;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "618:  if (conn->connect_handle != NULL)",
          "619:   net_disconnect(conn->connect_handle);",
          "626:  g_free_not_null(conn->tag);",
          "627:  g_free_not_null(conn->address);",
          "",
          "[Removed Lines]",
          "621:  g_free_not_null(conn->proxy);",
          "622:  g_free_not_null(conn->proxy_string);",
          "623:  g_free_not_null(conn->proxy_string_after);",
          "624:  g_free_not_null(conn->proxy_password);",
          "",
          "[Added Lines]",
          "628:  if (conn->proxy)",
          "629:   conn->proxy->destroy(conn->proxy);",
          "",
          "---------------"
        ],
        "src/irc/core/irc-servers.c||src/irc/core/irc-servers.c": [
          "File: src/irc/core/irc-servers.c -> src/irc/core/irc-servers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include \"servers-reconnect.h\"",
          "38: #include \"servers-redirect.h\"",
          "39: #include \"modes.h\"",
          "41: #include \"settings.h\"",
          "42: #include \"recode.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #include \"network-proxy.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:  g_free(recoded);",
          "102: }",
          "104: static void server_init(IRC_SERVER_REC *server)",
          "105: {",
          "106:  IRC_SERVER_CONNECT_REC *conn;",
          "107:  char *address, *ptr, *username, *cmd;",
          "108:  GTimeVal now;",
          "110:  g_return_if_fail(server != NULL);",
          "112:  conn = server->connrec;",
          "127:  if (conn->password != NULL && *conn->password != '\\0') {",
          "",
          "[Removed Lines]",
          "114:  if (conn->proxy != NULL && conn->proxy_password != NULL &&",
          "116:   cmd = g_strdup_printf(\"PASS %s\", conn->proxy_password);",
          "117:   irc_send_cmd_now(server, cmd);",
          "118:   g_free(cmd);",
          "119:  }",
          "121:  if (conn->proxy != NULL && conn->proxy_string != NULL) {",
          "122:   cmd = g_strdup_printf(conn->proxy_string, conn->address, conn->port);",
          "123:   irc_send_cmd_now(server, cmd);",
          "124:   g_free(cmd);",
          "125:  }",
          "",
          "[Added Lines]",
          "105: static void",
          "106: irc_send_cmd_now_wrapper(void *srv, char const *cmd)",
          "107: {",
          "108:  irc_send_cmd_now(srv, cmd);",
          "109: }",
          "116:  struct network_proxy_send_string_info const send_info = {",
          "117:   .host =  server->connrec->address,",
          "118:   .port =  server->connrec->port,",
          "119:   .func =  irc_send_cmd_now_wrapper,",
          "120:   .obj    =  server",
          "121:  };",
          "127:  if (conn->proxy && conn->proxy->send_string)",
          "128:   conn->proxy->send_string(conn->proxy, &send_info);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156:  g_free(cmd);",
          "157:  g_free(username);",
          "165:  server->isupport = g_hash_table_new((GHashFunc) g_istr_hash,",
          "166:          (GCompareFunc) g_istr_equal);",
          "",
          "[Removed Lines]",
          "159:  if (conn->proxy != NULL && conn->proxy_string_after != NULL) {",
          "160:   cmd = g_strdup_printf(conn->proxy_string_after, conn->address, conn->port);",
          "161:   irc_send_cmd_now(server, cmd);",
          "162:   g_free(cmd);",
          "163:  }",
          "",
          "[Added Lines]",
          "162:  if (conn->proxy && conn->proxy->send_string_after)",
          "163:   conn->proxy->send_string_after(conn->proxy, &send_info);",
          "",
          "---------------"
        ]
      }
    }
  ]
}