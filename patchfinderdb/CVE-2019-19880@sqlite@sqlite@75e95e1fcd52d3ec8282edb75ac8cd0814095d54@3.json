{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "38a28a7434d75c27cdeabf9d30fd66eaed3d5625",
      "candidate_info": {
        "commit_hash": "38a28a7434d75c27cdeabf9d30fd66eaed3d5625",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38a28a7434d75c27cdeabf9d30fd66eaed3d5625",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to test/fuzzdata8.db.\n\nFossilOrigin-Name: e5924939c9c8f39367900360fa294cdb1220e9f68d183e32882e0926f775869d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ef27e7a08728aa7447ae19812803ac5c4a9d80c97541014bd292485792005a3e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "126537e1dccc5f9006679ebcde202de36a8df636",
      "candidate_info": {
        "commit_hash": "126537e1dccc5f9006679ebcde202de36a8df636",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/126537e1dccc5f9006679ebcde202de36a8df636",
        "files": [
          "ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove some redundant code from sqlite3rbu.c. Add test cases for RBU vacuum.\n\nFossilOrigin-Name: 7b051698d8a763d9db190fd662931266d24a4982f34f100a28641934c222e37b",
        "before_after_code_files": [
          "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test": [
          "File: ext/rbu/rbuvacuum4.test -> ext/rbu/rbuvacuum4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   INSERT INTO x1 VALUES(NULL, 2, 5, NULL);",
          "73:   CREATE INDEX x1ad ON x1(d, a);",
          "74: }",
          "76: do_rbu_vacuum_test 4.1.1 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:   CREATE INDEX x1null ON x1(d, a) WHERE d>15;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: do_rbu_vacuum_test 4.1.2 0",
          "",
          "[Removed Lines]",
          "84: finish_test",
          "",
          "[Added Lines]",
          "85: #-------------------------------------------------------------------------",
          "86: reset_db",
          "87: do_execsql_test 5.0 {",
          "88:   CREATE TABLE \"a b c\"(a, \"b b\" PRIMARY KEY, \"c c\");",
          "89:   CREATE INDEX abc1 ON \"a b c\"(a, \"c c\");",
          "91:   INSERT INTO \"a b c\" VALUES(NULL, 'a', NULL);",
          "92:   INSERT INTO \"a b c\" VALUES(NULL, 'b', NULL);",
          "93:   INSERT INTO \"a b c\" VALUES(NULL, 'c', NULL);",
          "95:   INSERT INTO \"a b c\" VALUES(1, 2, 3);",
          "96:   INSERT INTO \"a b c\" VALUES(3, 9, 1);",
          "97:   INSERT INTO \"a b c\" VALUES('aaa', 'bbb', 'ccc');",
          "99:   CREATE TABLE x(a);",
          "100:   INSERT INTO x VALUES('a'), ('b'), ('d');",
          "101:   CREATE UNIQUE INDEX y ON x(a);",
          "102: }",
          "104: do_rbu_vacuum_test 5.1 1",
          "106: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "930:   zIn = (const char*)sqlite3_value_text(argv[0]);",
          "931:   if( zIn ){",
          "932:     if( rbuIsVacuum(p) ){",
          "934:         sqlite3_result_text(pCtx, zIn, -1, SQLITE_STATIC);",
          "935:       }",
          "936:     }else{",
          "",
          "[Removed Lines]",
          "933:       if( argc==1 || 0==sqlite3_value_int(argv[1]) ){",
          "",
          "[Added Lines]",
          "933:       assert( argc==2 );",
          "934:       if( 0==sqlite3_value_int(argv[1]) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1417:   return zList;",
          "1418: }",
          "1420: static char *rbuObjIterGetPkList(",
          "1424: ){",
          "1425:   int iPk = 1;",
          "1426:   char *zRet = 0;",
          "",
          "[Removed Lines]",
          "1423:   const char *zExtra",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1430:     for(i=0; i<pIter->nTblCol; i++){",
          "1431:       if( (int)pIter->abTblPk[i]==iPk ){",
          "1432:         const char *zCol = pIter->azTblCol[i];",
          "1435:       }",
          "1436:     }",
          "1437:     if( i==pIter->nTblCol ) break;",
          "",
          "[Removed Lines]",
          "1433:         zRet = rbuMPrintf(p, \"%z%s\\\"%w\\\"%s\", zRet, zSep, zCol, zExtra);",
          "1434:         zSep = \", \";",
          "",
          "[Added Lines]",
          "1442:         zRet = rbuMPrintf(p, \"%z%s%s\\\"%w\\\"%s\", zRet, zSep, zPre, zCol, zPost);",
          "1443:         zSep = zSeparator;",
          "1444:         break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1440:   return zRet;",
          "1441: }",
          "1443: static char *rbuVacuumTableStart(",
          "1448: ){",
          "1449:   sqlite3_stmt *pMax = 0;",
          "1450:   char *zRet = 0;",
          "",
          "[Removed Lines]",
          "1444:   sqlite3rbu *p,",
          "1445:   RbuObjIter *pIter,",
          "1446:   int bRowid,",
          "1447:   const char *zWrite",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1460:     }",
          "1461:     rbuFinalize(p, pMax);",
          "1462:   }else{",
          "1486:     if( p->rc==SQLITE_OK ){",
          "1487:       p->rc = prepareFreeAndCollectError(p->dbMain, &pMax, &p->zErrmsg,",
          "",
          "[Removed Lines]",
          "1463:     char *zOrder = 0;",
          "1464:     char *zSelect = 0;",
          "1465:     char *zList = 0;",
          "1466:     int iPk = 1;",
          "1467:     const char *zSep = \"\";",
          "1468:     const char *zSep2 = \"\";",
          "1469:     while( 1 ){",
          "1470:       int i;",
          "1471:       for(i=0; i<pIter->nTblCol; i++){",
          "1472:         if( (int)pIter->abTblPk[i]==iPk ){",
          "1473:           const char *zCol = pIter->azTblCol[i];",
          "1474:           zOrder = rbuMPrintf(p, \"%z%s\\\"%w\\\" DESC\", zOrder, zSep, zCol);",
          "1475:           zList = rbuMPrintf(p, \"%z%s\\\"%w\\\"\", zList, zSep, zCol);",
          "1476:           zSelect = rbuMPrintf(p, \"%z%squote(\\\"%w\\\")\", zSelect, zSep2, zCol);",
          "1477:           zSep = \", \";",
          "1478:           zSep2 = \"||','||\";",
          "1479:           break;",
          "1480:         }",
          "1481:       }",
          "1482:       if( i==pIter->nTblCol ) break;",
          "1483:       iPk++;",
          "1484:     }",
          "",
          "[Added Lines]",
          "1492:     char *zOrder = rbuObjIterGetPkList(p, pIter, \"\", \", \", \" DESC\");",
          "1493:     char *zSelect = rbuObjIterGetPkList(p, pIter, \"quote(\", \"||','||\", \")\");",
          "1494:     char *zList = rbuObjIterGetPkList(p, pIter, \"\", \", \", \"\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1504:   return zRet;",
          "1505: }",
          "1507: char *rbuVacuumIndexStart(",
          "1510: ){",
          "1511:   char *zOrder = 0;",
          "1512:   char *zLhs = 0;",
          "",
          "[Removed Lines]",
          "1508:   sqlite3rbu *p,",
          "1509:   RbuObjIter *pIter",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2274:       if( p->rc==SQLITE_OK ){",
          "2275:         char *zSql;",
          "2276:         if( rbuIsVacuum(p) ){",
          "2278:           if( nOffset ){",
          "2279:             zStart = rbuVacuumIndexStart(p, pIter);",
          "2280:             if( zStart ){",
          "",
          "[Removed Lines]",
          "2277:           const char *zStart = 0;",
          "",
          "[Added Lines]",
          "2309:           char *zStart = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2435:           if( bRbuRowid ){",
          "2436:             zOrder = rbuMPrintf(p, \"_rowid_\");",
          "2437:           }else{",
          "2439:           }",
          "2440:         }",
          "",
          "[Removed Lines]",
          "2438:             zOrder = rbuObjIterGetPkList(p, pIter, \"\");",
          "",
          "[Added Lines]",
          "2470:             zOrder = rbuObjIterGetPkList(p, pIter, \"\", \", \", \"\");",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b3261bfa1d762aa29a57244a30cf5e35655f1fe9c30ee682c186dec29d7a2c2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "038ebf68756afa451d1b0f90d7cb89186be9edae",
      "candidate_info": {
        "commit_hash": "038ebf68756afa451d1b0f90d7cb89186be9edae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/038ebf68756afa451d1b0f90d7cb89186be9edae",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btree.h",
          "src/vdbe.c"
        ],
        "message": "Remove the unused P5 flag from the OP_Rewind opcode.\n\nFossilOrigin-Name: c2edbf3b8c643edcd5823eb907fd7531cf5be8a8b6a014fa1b123eb0ea3231cf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f5752517f590b37bfc0267650f5800320e22a8ecaba34aa6893281ce8d268026",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5273:   return rc;",
          "5274: }",
          "",
          "[Removed Lines]",
          "5281: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "5282: void sqlite3BtreeSkipNext(BtCursor *pCur){",
          "5286:   if( ALWAYS(pCur->eState==CURSOR_VALID) ){",
          "5287:     pCur->eState = CURSOR_SKIPNEXT;",
          "5288:     pCur->skipNext = 1;",
          "5289:   }",
          "5290: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "301: int sqlite3BtreeInsert(BtCursor*, const BtreePayload *pPayload,",
          "302:                        int flags, int seekResult);",
          "303: int sqlite3BtreeFirst(BtCursor*, int *pRes);",
          "307: int sqlite3BtreeLast(BtCursor*, int *pRes);",
          "308: int sqlite3BtreeNext(BtCursor*, int flags);",
          "309: int sqlite3BtreeEof(BtCursor*);",
          "",
          "[Removed Lines]",
          "304: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "305: void sqlite3BtreeSkipNext(BtCursor*);",
          "306: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5136:   int res;",
          "5138:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "5139:   pC = p->apCsr[pOp->p1];",
          "5140:   assert( pC!=0 );",
          "5141:   assert( isSorter(pC)==(pOp->opcode==OP_SorterSort) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5135:   assert( pOp->p5==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5150:     pCrsr = pC->uc.pCursor;",
          "5151:     assert( pCrsr );",
          "5152:     rc = sqlite3BtreeFirst(pCrsr, &res);",
          "5156:     pC->deferredMoveto = 0;",
          "5157:     pC->cacheStatus = CACHE_STALE;",
          "5158:   }",
          "",
          "[Removed Lines]",
          "5153: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "5154:     if( pOp->p5 ) sqlite3BtreeSkipNext(pCrsr);",
          "5155: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c07eee7a50a18bd6030a96703e192799593ab09d",
      "candidate_info": {
        "commit_hash": "c07eee7a50a18bd6030a96703e192799593ab09d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c07eee7a50a18bd6030a96703e192799593ab09d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improvements to the \".eqp trace\" command in the CLI so that it ensures that the schema has been read prior to activing the tracing feature, to avoid cluttering the output with a trace of the schema parse.\n\nFossilOrigin-Name: 42687d45aa1a2b2a32ddfc5711b4ae9cf76b8cfbeb20b57d6705ecaf5824fcb6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9cf8ebd141aa2eb661d457624c76433bd9e4abfdef04aa52e28bc169172c2c8f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6287:         p->autoEQP = AUTOEQP_full;",
          "6288:         p->autoEQPtrace = 1;",
          "6289:         open_db(p, 0);",
          "6291:         sqlite3_exec(p->db, \"PRAGMA vdbe_trace=ON;\", 0, 0, 0);",
          "6292: #endif",
          "6293:       }else{",
          "",
          "[Removed Lines]",
          "6290:         (void)sqlite3_table_column_metadata(p->db, \"x\",\"x\",0,0,0,0,0,0);",
          "",
          "[Added Lines]",
          "6290:         sqlite3_exec(p->db, \"SELECT name FROM sqlite_master LIMIT 1\", 0, 0, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cb79202f8c55d2dd7f7f635244d7c841ab70ad4",
      "candidate_info": {
        "commit_hash": "3cb79202f8c55d2dd7f7f635244d7c841ab70ad4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3cb79202f8c55d2dd7f7f635244d7c841ab70ad4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c"
        ],
        "message": "Use the full 64-bit integer value in the argument to randomblob().\n\nFossilOrigin-Name: 05df5f7aeaf2132810452e8871132d1e66650a841991cb2a9ce32f2d03e20bf4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f31b3bd2a6a8aa35a6454f37f3a4b4595e2ad74256cd180439019ab4c6c2059e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:   int argc,",
          "515:   sqlite3_value **argv",
          "516: ){",
          "518:   unsigned char *p;",
          "519:   assert( argc==1 );",
          "520:   UNUSED_PARAMETER(argc);",
          "522:   if( n<1 ){",
          "523:     n = 1;",
          "524:   }",
          "",
          "[Removed Lines]",
          "517:   int n;",
          "521:   n = sqlite3_value_int(argv[0]);",
          "",
          "[Added Lines]",
          "517:   sqlite3_int64 n;",
          "521:   n = sqlite3_value_int64(argv[0]);",
          "",
          "---------------"
        ]
      }
    }
  ]
}