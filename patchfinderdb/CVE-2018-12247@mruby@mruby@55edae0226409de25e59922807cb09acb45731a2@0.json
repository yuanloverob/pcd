{
  "cve_id": "CVE-2018-12247",
  "cve_desc": "An issue was discovered in mruby 1.4.1. There is a NULL pointer dereference in mrb_class, related to certain .clone usage, because mrb_obj_clone in kernel.c copies flags other than the MRB_FLAG_IS_FROZEN flag (e.g., the embedded flag).",
  "repo": "mruby/mruby",
  "patch_hash": "55edae0226409de25e59922807cb09acb45731a2",
  "patch_info": {
    "commit_hash": "55edae0226409de25e59922807cb09acb45731a2",
    "repo": "mruby/mruby",
    "commit_url": "https://github.com/mruby/mruby/commit/55edae0226409de25e59922807cb09acb45731a2",
    "files": [
      "src/kernel.c"
    ],
    "message": "Allow `Object#clone` to copy frozen status only; fix #4036\n\nCopying all flags from the original object may overwrite the clone's\nflags e.g. the embedded flag.",
    "before_after_code_files": [
      "src/kernel.c||src/kernel.c"
    ]
  },
  "patch_diff": {
    "src/kernel.c||src/kernel.c": [
      "File: src/kernel.c -> src/kernel.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "348:   mrb_field_write_barrier(mrb, (struct RBasic*)p, (struct RBasic*)p->c);",
      "349:   clone = mrb_obj_value(p);",
      "350:   init_copy(mrb, clone, self);",
      "353:   return clone;",
      "354: }",
      "",
      "[Removed Lines]",
      "351:   p->flags = mrb_obj_ptr(self)->flags;",
      "",
      "[Added Lines]",
      "351:   p->flags |= mrb_obj_ptr(self)->flags & MRB_FLAG_IS_FROZEN;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f408143c289b8017883294f13d36d43b50c8bc5d",
      "candidate_info": {
        "commit_hash": "f408143c289b8017883294f13d36d43b50c8bc5d",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/f408143c289b8017883294f13d36d43b50c8bc5d",
        "files": [
          "src/kernel.c",
          "test/t/kernel.rb"
        ],
        "message": "The `clone` method should copy object status (e.g. frozen) too; #4030",
        "before_after_code_files": [
          "src/kernel.c||src/kernel.c",
          "test/t/kernel.rb||test/t/kernel.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/kernel.c||src/kernel.c"
          ],
          "candidate": [
            "src/kernel.c||src/kernel.c"
          ]
        }
      },
      "candidate_diff": {
        "src/kernel.c||src/kernel.c": [
          "File: src/kernel.c -> src/kernel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:   mrb_field_write_barrier(mrb, (struct RBasic*)p, (struct RBasic*)p->c);",
          "349:   clone = mrb_obj_value(p);",
          "350:   init_copy(mrb, clone, self);",
          "352:   return clone;",
          "353: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:   p->flags = mrb_obj_ptr(self)->flags;",
          "",
          "---------------"
        ],
        "test/t/kernel.rb||test/t/kernel.rb": [
          "File: test/t/kernel.rb -> test/t/kernel.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:   assert_true a.respond_to?(:test)",
          "172:   assert_false b.respond_to?(:test)",
          "173:   assert_true c.respond_to?(:test)",
          "174: end",
          "176: assert('Kernel#dup', '15.3.1.3.9') do",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:   a.freeze",
          "176:   d = a.clone",
          "177:   assert_true d.frozen?",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8558627b9bb99635ebaaaa06bdbbebda4d4aef39",
      "candidate_info": {
        "commit_hash": "8558627b9bb99635ebaaaa06bdbbebda4d4aef39",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/8558627b9bb99635ebaaaa06bdbbebda4d4aef39",
        "files": [
          "include/mruby/class.h",
          "include/mruby/object.h",
          "src/class.c",
          "src/gc.c",
          "src/kernel.c"
        ],
        "message": "Reorganize flags values for classes; fix #3975\n\nRenamed flag macro names as well:\n`MRB_FLAG_IS_FROZEN` -> `MRB_FL_OBJ_FROZEN`\n`MRB_FLAG_IS_PREPENDED` -> `MRB_FL_CLASS_IS_PREPENDED`\n`MRB_FLAG_IS_ORIGIN` -> `MRB_FL_CLASS_IS_ORIGIN`\n`MRB_FLAG_IS_INHERITED` -> `MRB_FL_CLASS_IS_INHERITED`",
        "before_after_code_files": [
          "include/mruby/class.h||include/mruby/class.h",
          "include/mruby/object.h||include/mruby/object.h",
          "src/class.c||src/class.c",
          "src/gc.c||src/gc.c",
          "src/kernel.c||src/kernel.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/kernel.c||src/kernel.c"
          ],
          "candidate": [
            "src/kernel.c||src/kernel.c"
          ]
        }
      },
      "candidate_diff": {
        "include/mruby/class.h||include/mruby/class.h": [
          "File: include/mruby/class.h -> include/mruby/class.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   }",
          "54: }",
          "60: #define MRB_CLASS_ORIGIN(c) do {\\",
          "62:     c = c->super;\\",
          "64:       c = c->super;\\",
          "65:     }\\",
          "66:   }\\",
          "67: } while (0)",
          "69: #define MRB_INSTANCE_TT_MASK (0xFF)",
          "70: #define MRB_SET_INSTANCE_TT(c, tt) c->flags = ((c->flags & ~MRB_INSTANCE_TT_MASK) | (char)tt)",
          "71: #define MRB_INSTANCE_TT(c) (enum mrb_vtype)(c->flags & MRB_INSTANCE_TT_MASK)",
          "",
          "[Removed Lines]",
          "58: #define MRB_FLAG_IS_PREPENDED (1 << 19)",
          "59: #define MRB_FLAG_IS_ORIGIN (1 << 20)",
          "61:   if (c->flags & MRB_FLAG_IS_PREPENDED) {\\",
          "63:     while (!(c->flags & MRB_FLAG_IS_ORIGIN)) {\\",
          "68: #define MRB_FLAG_IS_INHERITED (1 << 21)",
          "",
          "[Added Lines]",
          "57:    20: frozen",
          "58:    19: is_prepended",
          "59:    18: is_origin",
          "60:    17: is_inherited (used by method cache)",
          "61:    16: unused",
          "62:    0-15: instance type",
          "64: #define MRB_FL_CLASS_IS_PREPENDED (1 << 19)",
          "65: #define MRB_FL_CLASS_IS_ORIGIN (1 << 18)",
          "67:   if (c->flags & MRB_FL_CLASS_IS_PREPENDED) {\\",
          "69:     while (!(c->flags & MRB_FL_CLASS_IS_ORIGIN)) {\\",
          "74: #define MRB_FL_CLASS_IS_INHERITED (1 << 17)",
          "",
          "---------------"
        ],
        "include/mruby/object.h||include/mruby/object.h": [
          "File: include/mruby/object.h -> include/mruby/object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: };",
          "23: #define mrb_basic_ptr(v) ((struct RBasic*)(mrb_ptr(v)))",
          "31: struct RObject {",
          "32:   MRB_OBJECT_HEADER;",
          "",
          "[Removed Lines]",
          "26: #define MRB_FLAG_IS_FROZEN (1 << 18)",
          "27: #define MRB_FROZEN_P(o) ((o)->flags & MRB_FLAG_IS_FROZEN)",
          "28: #define MRB_SET_FROZEN_FLAG(o) ((o)->flags |= MRB_FLAG_IS_FROZEN)",
          "29: #define MRB_UNSET_FROZEN_FLAG(o) ((o)->flags &= ~MRB_FLAG_IS_FROZEN)",
          "",
          "[Added Lines]",
          "25: #define MRB_FL_OBJ_IS_FROZEN (1 << 20)",
          "26: #define MRB_FROZEN_P(o) ((o)->flags & MRB_FL_OBJ_IS_FROZEN)",
          "27: #define MRB_SET_FROZEN_FLAG(o) ((o)->flags |= MRB_FL_OBJ_IS_FROZEN)",
          "28: #define MRB_UNSET_FROZEN_FLAG(o) ((o)->flags &= ~MRB_FL_OBJ_IS_FROZEN)",
          "",
          "---------------"
        ],
        "src/class.c||src/class.c": [
          "File: src/class.c -> src/class.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:   if (o->c->tt == MRB_TT_SCLASS) return;",
          "95:   sc = (struct RClass*)mrb_obj_alloc(mrb, MRB_TT_SCLASS, mrb->class_class);",
          "97:   sc->mt = kh_init(mt, mrb);",
          "98:   sc->iv = 0;",
          "99:   if (o->tt == MRB_TT_CLASS) {",
          "",
          "[Removed Lines]",
          "96:   sc->flags |= MRB_FLAG_IS_INHERITED;",
          "",
          "[Added Lines]",
          "96:   sc->flags |= MRB_FL_CLASS_IS_INHERITED;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:   if (!super)",
          "277:     super = mrb->object_class;",
          "279:   s = mrb_obj_value(super);",
          "280:   mc_clear_by_class(mrb, klass);",
          "281:   mid = mrb_intern_lit(mrb, \"inherited\");",
          "",
          "[Removed Lines]",
          "278:   super->flags |= MRB_FLAG_IS_INHERITED;",
          "",
          "[Added Lines]",
          "278:   super->flags |= MRB_FL_CLASS_IS_INHERITED;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1061:   while (m) {",
          "1062:     int superclass_seen = 0;",
          "1065:       goto skip;",
          "1067:     if (klass_mt && klass_mt == m->mt)",
          "",
          "[Removed Lines]",
          "1064:     if (m->flags & MRB_FLAG_IS_PREPENDED)",
          "",
          "[Added Lines]",
          "1064:     if (m->flags & MRB_FL_CLASS_IS_PREPENDED)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1084:     }",
          "1086:     ic = include_class_new(mrb, m, ins_pos->super);",
          "1088:     ins_pos->super = ic;",
          "1089:     mrb_field_write_barrier(mrb, (struct RBasic*)ins_pos, (struct RBasic*)ic);",
          "1090:     mc_clear_by_class(mrb, ins_pos);",
          "",
          "[Removed Lines]",
          "1087:     m->flags |= MRB_FLAG_IS_INHERITED;",
          "",
          "[Added Lines]",
          "1087:     m->flags |= MRB_FL_CLASS_IS_INHERITED;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1111:   struct RClass *origin;",
          "1112:   int changed = 0;",
          "1115:     origin = (struct RClass*)mrb_obj_alloc(mrb, MRB_TT_ICLASS, c);",
          "1117:     origin->super = c->super;",
          "1118:     c->super = origin;",
          "1119:     origin->mt = c->mt;",
          "1120:     c->mt = kh_init(mt, mrb);",
          "1121:     mrb_field_write_barrier(mrb, (struct RBasic*)c, (struct RBasic*)origin);",
          "1123:   }",
          "1124:   changed = include_module_at(mrb, c, c, m, 0);",
          "1125:   if (changed < 0) {",
          "",
          "[Removed Lines]",
          "1114:   if (!(c->flags & MRB_FLAG_IS_PREPENDED)) {",
          "1116:     origin->flags |= MRB_FLAG_IS_ORIGIN | MRB_FLAG_IS_INHERITED;",
          "1122:     c->flags |= MRB_FLAG_IS_PREPENDED;",
          "",
          "[Added Lines]",
          "1114:   if (!(c->flags & MRB_FL_CLASS_IS_PREPENDED)) {",
          "1116:     origin->flags |= MRB_FL_CLASS_IS_ORIGIN | MRB_FL_CLASS_IS_INHERITED;",
          "1122:     c->flags |= MRB_FL_CLASS_IS_PREPENDED;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1196:     if (c->tt == MRB_TT_ICLASS) {",
          "1197:       mrb_ary_push(mrb, result, mrb_obj_value(c->c));",
          "1198:     }",
          "1200:       mrb_ary_push(mrb, result, mrb_obj_value(c));",
          "1201:     }",
          "1202:     c = c->super;",
          "",
          "[Removed Lines]",
          "1199:     else if (!(c->flags & MRB_FLAG_IS_PREPENDED)) {",
          "",
          "[Added Lines]",
          "1199:     else if (!(c->flags & MRB_FL_CLASS_IS_PREPENDED)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1365:   struct mrb_cache_entry *mc = mrb->cache;",
          "1366:   int i;",
          "1369:     mc_clear_all(mrb);",
          "1371:     return;",
          "1372:   }",
          "1373:   for (i=0; i<MRB_METHOD_CACHE_SIZE; i++) {",
          "",
          "[Removed Lines]",
          "1368:   if (c->flags & MRB_FLAG_IS_INHERITED) {",
          "1370:     c->flags &= ~MRB_FLAG_IS_INHERITED;",
          "",
          "[Added Lines]",
          "1368:   if (c->flags & MRB_FL_CLASS_IS_INHERITED) {",
          "1370:     c->flags &= ~MRB_FL_CLASS_IS_INHERITED;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1381:   struct mrb_cache_entry *mc = mrb->cache;",
          "1382:   int i;",
          "1385:     mc_clear_all(mrb);",
          "1387:     return;",
          "1388:   }",
          "1389:   for (i=0; i<MRB_METHOD_CACHE_SIZE; i++) {",
          "",
          "[Removed Lines]",
          "1384:   if (c->flags & MRB_FLAG_IS_INHERITED) {",
          "1386:     c->flags &= ~MRB_FLAG_IS_INHERITED;",
          "",
          "[Added Lines]",
          "1384:   if (c->flags & MRB_FL_CLASS_IS_INHERITED) {",
          "1386:     c->flags &= ~MRB_FL_CLASS_IS_INHERITED;",
          "",
          "---------------"
        ],
        "src/gc.c||src/gc.c": [
          "File: src/gc.c -> src/gc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "622:   case MRB_TT_ICLASS:",
          "623:     {",
          "624:       struct RClass *c = (struct RClass*)obj;",
          "626:         mrb_gc_mark_mt(mrb, c);",
          "627:       mrb_gc_mark(mrb, (struct RBasic*)((struct RClass*)obj)->super);",
          "628:     }",
          "",
          "[Removed Lines]",
          "625:       if (MRB_FLAG_TEST(c, MRB_FLAG_IS_ORIGIN))",
          "",
          "[Added Lines]",
          "625:       if (MRB_FLAG_TEST(c, MRB_FL_CLASS_IS_ORIGIN))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "761:     mrb_gc_free_iv(mrb, (struct RObject*)obj);",
          "762:     break;",
          "763:   case MRB_TT_ICLASS:",
          "765:       mrb_gc_free_mt(mrb, (struct RClass*)obj);",
          "766:     break;",
          "767:   case MRB_TT_ENV:",
          "",
          "[Removed Lines]",
          "764:     if (MRB_FLAG_TEST(obj, MRB_FLAG_IS_ORIGIN))",
          "",
          "[Added Lines]",
          "764:     if (MRB_FLAG_TEST(obj, MRB_FL_CLASS_IS_ORIGIN))",
          "",
          "---------------"
        ],
        "src/kernel.c||src/kernel.c": [
          "File: src/kernel.c -> src/kernel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:   struct RClass *sc = mrb_class_ptr(src);",
          "256:     struct RClass *c0 = sc->super;",
          "257:     struct RClass *c1 = dc;",
          "261:       c1->super = mrb_class_ptr(mrb_obj_dup(mrb, mrb_obj_value(c0)));",
          "262:       c1 = c1->super;",
          "263:       c0 = c0->super;",
          "264:     }",
          "265:     c1->super = mrb_class_ptr(mrb_obj_dup(mrb, mrb_obj_value(c0)));",
          "267:   }",
          "268:   if (sc->mt) {",
          "269:     dc->mt = kh_copy(mt, mrb, sc->mt);",
          "",
          "[Removed Lines]",
          "255:   if (sc->flags & MRB_FLAG_IS_PREPENDED) {",
          "260:     while (!(c0->flags & MRB_FLAG_IS_ORIGIN)) {",
          "266:     c1->super->flags |= MRB_FLAG_IS_ORIGIN;",
          "",
          "[Added Lines]",
          "255:   if (sc->flags & MRB_FL_CLASS_IS_PREPENDED) {",
          "260:     while (!(c0->flags & MRB_FL_CLASS_IS_ORIGIN)) {",
          "266:     c1->super->flags |= MRB_FL_CLASS_IS_ORIGIN;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:   mrb_field_write_barrier(mrb, (struct RBasic*)p, (struct RBasic*)p->c);",
          "349:   clone = mrb_obj_value(p);",
          "350:   init_copy(mrb, clone, self);",
          "353:   return clone;",
          "354: }",
          "",
          "[Removed Lines]",
          "351:   p->flags |= mrb_obj_ptr(self)->flags & MRB_FLAG_IS_FROZEN;",
          "",
          "[Added Lines]",
          "351:   p->flags |= mrb_obj_ptr(self)->flags & MRB_FL_OBJ_IS_FROZEN;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "706:   struct RClass* oldklass;",
          "707:   khash_t(st)* set = kh_init(st, mrb);",
          "710:     MRB_CLASS_ORIGIN(klass);",
          "711:     prepended = TRUE;",
          "712:   }",
          "",
          "[Removed Lines]",
          "709:   if (!recur && (klass->flags & MRB_FLAG_IS_PREPENDED)) {",
          "",
          "[Added Lines]",
          "709:   if (!recur && (klass->flags & MRB_FL_CLASS_IS_PREPENDED)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd086833ff6673ab11e6ecea573851593263ae6a",
      "candidate_info": {
        "commit_hash": "fd086833ff6673ab11e6ecea573851593263ae6a",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/fd086833ff6673ab11e6ecea573851593263ae6a",
        "files": [
          "include/mruby/class.h",
          "include/mruby/object.h",
          "src/class.c",
          "src/gc.c",
          "src/kernel.c"
        ],
        "message": "Reorganize flags values for classes; fix #3975\n\nRenamed flag macro names as well:\n`MRB_FLAG_IS_FROZEN` -> `MRB_FL_OBJ_FROZEN`\n`MRB_FLAG_IS_PREPENDED` -> `MRB_FL_CLASS_IS_PREPENDED`\n`MRB_FLAG_IS_ORIGIN` -> `MRB_FL_CLASS_IS_ORIGIN`\n`MRB_FLAG_IS_INHERITED` -> `MRB_FL_CLASS_IS_INHERITED`",
        "before_after_code_files": [
          "include/mruby/class.h||include/mruby/class.h",
          "include/mruby/object.h||include/mruby/object.h",
          "src/class.c||src/class.c",
          "src/gc.c||src/gc.c",
          "src/kernel.c||src/kernel.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/kernel.c||src/kernel.c"
          ],
          "candidate": [
            "src/kernel.c||src/kernel.c"
          ]
        }
      },
      "candidate_diff": {
        "include/mruby/class.h||include/mruby/class.h": [
          "File: include/mruby/class.h -> include/mruby/class.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   }",
          "54: }",
          "60: #define MRB_CLASS_ORIGIN(c) do {\\",
          "62:     c = c->super;\\",
          "64:       c = c->super;\\",
          "65:     }\\",
          "66:   }\\",
          "67: } while (0)",
          "69: #define MRB_INSTANCE_TT_MASK (0xFF)",
          "70: #define MRB_SET_INSTANCE_TT(c, tt) c->flags = ((c->flags & ~MRB_INSTANCE_TT_MASK) | (char)tt)",
          "71: #define MRB_INSTANCE_TT(c) (enum mrb_vtype)(c->flags & MRB_INSTANCE_TT_MASK)",
          "",
          "[Removed Lines]",
          "58: #define MRB_FLAG_IS_PREPENDED (1 << 19)",
          "59: #define MRB_FLAG_IS_ORIGIN (1 << 20)",
          "61:   if (c->flags & MRB_FLAG_IS_PREPENDED) {\\",
          "63:     while (!(c->flags & MRB_FLAG_IS_ORIGIN)) {\\",
          "68: #define MRB_FLAG_IS_INHERITED (1 << 21)",
          "",
          "[Added Lines]",
          "57:    20: frozen",
          "58:    19: is_prepended",
          "59:    18: is_origin",
          "60:    17: is_inherited (used by method cache)",
          "61:    16: unused",
          "62:    0-15: instance type",
          "64: #define MRB_FL_CLASS_IS_PREPENDED (1 << 19)",
          "65: #define MRB_FL_CLASS_IS_ORIGIN (1 << 18)",
          "67:   if (c->flags & MRB_FL_CLASS_IS_PREPENDED) {\\",
          "69:     while (!(c->flags & MRB_FL_CLASS_IS_ORIGIN)) {\\",
          "74: #define MRB_FL_CLASS_IS_INHERITED (1 << 17)",
          "",
          "---------------"
        ],
        "include/mruby/object.h||include/mruby/object.h": [
          "File: include/mruby/object.h -> include/mruby/object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: };",
          "23: #define mrb_basic_ptr(v) ((struct RBasic*)(mrb_ptr(v)))",
          "31: struct RObject {",
          "32:   MRB_OBJECT_HEADER;",
          "",
          "[Removed Lines]",
          "26: #define MRB_FLAG_IS_FROZEN (1 << 18)",
          "27: #define MRB_FROZEN_P(o) ((o)->flags & MRB_FLAG_IS_FROZEN)",
          "28: #define MRB_SET_FROZEN_FLAG(o) ((o)->flags |= MRB_FLAG_IS_FROZEN)",
          "29: #define MRB_UNSET_FROZEN_FLAG(o) ((o)->flags &= ~MRB_FLAG_IS_FROZEN)",
          "",
          "[Added Lines]",
          "25: #define MRB_FL_OBJ_IS_FROZEN (1 << 20)",
          "26: #define MRB_FROZEN_P(o) ((o)->flags & MRB_FL_OBJ_IS_FROZEN)",
          "27: #define MRB_SET_FROZEN_FLAG(o) ((o)->flags |= MRB_FL_OBJ_IS_FROZEN)",
          "28: #define MRB_UNSET_FROZEN_FLAG(o) ((o)->flags &= ~MRB_FL_OBJ_IS_FROZEN)",
          "",
          "---------------"
        ],
        "src/class.c||src/class.c": [
          "File: src/class.c -> src/class.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:   if (o->c->tt == MRB_TT_SCLASS) return;",
          "95:   sc = (struct RClass*)mrb_obj_alloc(mrb, MRB_TT_SCLASS, mrb->class_class);",
          "97:   sc->mt = kh_init(mt, mrb);",
          "98:   sc->iv = 0;",
          "99:   if (o->tt == MRB_TT_CLASS) {",
          "",
          "[Removed Lines]",
          "96:   sc->flags |= MRB_FLAG_IS_INHERITED;",
          "",
          "[Added Lines]",
          "96:   sc->flags |= MRB_FL_CLASS_IS_INHERITED;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:   if (!super)",
          "277:     super = mrb->object_class;",
          "279:   s = mrb_obj_value(super);",
          "280:   mc_clear_by_class(mrb, klass);",
          "281:   mid = mrb_intern_lit(mrb, \"inherited\");",
          "",
          "[Removed Lines]",
          "278:   super->flags |= MRB_FLAG_IS_INHERITED;",
          "",
          "[Added Lines]",
          "278:   super->flags |= MRB_FL_CLASS_IS_INHERITED;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1061:   while (m) {",
          "1062:     int superclass_seen = 0;",
          "1065:       goto skip;",
          "1067:     if (klass_mt && klass_mt == m->mt)",
          "",
          "[Removed Lines]",
          "1064:     if (m->flags & MRB_FLAG_IS_PREPENDED)",
          "",
          "[Added Lines]",
          "1064:     if (m->flags & MRB_FL_CLASS_IS_PREPENDED)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1084:     }",
          "1086:     ic = include_class_new(mrb, m, ins_pos->super);",
          "1088:     ins_pos->super = ic;",
          "1089:     mrb_field_write_barrier(mrb, (struct RBasic*)ins_pos, (struct RBasic*)ic);",
          "1090:     mc_clear_by_class(mrb, ins_pos);",
          "",
          "[Removed Lines]",
          "1087:     m->flags |= MRB_FLAG_IS_INHERITED;",
          "",
          "[Added Lines]",
          "1087:     m->flags |= MRB_FL_CLASS_IS_INHERITED;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1111:   struct RClass *origin;",
          "1112:   int changed = 0;",
          "1115:     origin = (struct RClass*)mrb_obj_alloc(mrb, MRB_TT_ICLASS, c);",
          "1117:     origin->super = c->super;",
          "1118:     c->super = origin;",
          "1119:     origin->mt = c->mt;",
          "1120:     c->mt = kh_init(mt, mrb);",
          "1121:     mrb_field_write_barrier(mrb, (struct RBasic*)c, (struct RBasic*)origin);",
          "1123:   }",
          "1124:   changed = include_module_at(mrb, c, c, m, 0);",
          "1125:   if (changed < 0) {",
          "",
          "[Removed Lines]",
          "1114:   if (!(c->flags & MRB_FLAG_IS_PREPENDED)) {",
          "1116:     origin->flags |= MRB_FLAG_IS_ORIGIN | MRB_FLAG_IS_INHERITED;",
          "1122:     c->flags |= MRB_FLAG_IS_PREPENDED;",
          "",
          "[Added Lines]",
          "1114:   if (!(c->flags & MRB_FL_CLASS_IS_PREPENDED)) {",
          "1116:     origin->flags |= MRB_FL_CLASS_IS_ORIGIN | MRB_FL_CLASS_IS_INHERITED;",
          "1122:     c->flags |= MRB_FL_CLASS_IS_PREPENDED;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1196:     if (c->tt == MRB_TT_ICLASS) {",
          "1197:       mrb_ary_push(mrb, result, mrb_obj_value(c->c));",
          "1198:     }",
          "1200:       mrb_ary_push(mrb, result, mrb_obj_value(c));",
          "1201:     }",
          "1202:     c = c->super;",
          "",
          "[Removed Lines]",
          "1199:     else if (!(c->flags & MRB_FLAG_IS_PREPENDED)) {",
          "",
          "[Added Lines]",
          "1199:     else if (!(c->flags & MRB_FL_CLASS_IS_PREPENDED)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1365:   struct mrb_cache_entry *mc = mrb->cache;",
          "1366:   int i;",
          "1369:     mc_clear_all(mrb);",
          "1371:     return;",
          "1372:   }",
          "1373:   for (i=0; i<MRB_METHOD_CACHE_SIZE; i++) {",
          "",
          "[Removed Lines]",
          "1368:   if (c->flags & MRB_FLAG_IS_INHERITED) {",
          "1370:     c->flags &= ~MRB_FLAG_IS_INHERITED;",
          "",
          "[Added Lines]",
          "1368:   if (c->flags & MRB_FL_CLASS_IS_INHERITED) {",
          "1370:     c->flags &= ~MRB_FL_CLASS_IS_INHERITED;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1381:   struct mrb_cache_entry *mc = mrb->cache;",
          "1382:   int i;",
          "1385:     mc_clear_all(mrb);",
          "1387:     return;",
          "1388:   }",
          "1389:   for (i=0; i<MRB_METHOD_CACHE_SIZE; i++) {",
          "",
          "[Removed Lines]",
          "1384:   if (c->flags & MRB_FLAG_IS_INHERITED) {",
          "1386:     c->flags &= ~MRB_FLAG_IS_INHERITED;",
          "",
          "[Added Lines]",
          "1384:   if (c->flags & MRB_FL_CLASS_IS_INHERITED) {",
          "1386:     c->flags &= ~MRB_FL_CLASS_IS_INHERITED;",
          "",
          "---------------"
        ],
        "src/gc.c||src/gc.c": [
          "File: src/gc.c -> src/gc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "622:   case MRB_TT_ICLASS:",
          "623:     {",
          "624:       struct RClass *c = (struct RClass*)obj;",
          "626:         mrb_gc_mark_mt(mrb, c);",
          "627:       mrb_gc_mark(mrb, (struct RBasic*)((struct RClass*)obj)->super);",
          "628:     }",
          "",
          "[Removed Lines]",
          "625:       if (MRB_FLAG_TEST(c, MRB_FLAG_IS_ORIGIN))",
          "",
          "[Added Lines]",
          "625:       if (MRB_FLAG_TEST(c, MRB_FL_CLASS_IS_ORIGIN))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "761:     mrb_gc_free_iv(mrb, (struct RObject*)obj);",
          "762:     break;",
          "763:   case MRB_TT_ICLASS:",
          "765:       mrb_gc_free_mt(mrb, (struct RClass*)obj);",
          "766:     break;",
          "767:   case MRB_TT_ENV:",
          "",
          "[Removed Lines]",
          "764:     if (MRB_FLAG_TEST(obj, MRB_FLAG_IS_ORIGIN))",
          "",
          "[Added Lines]",
          "764:     if (MRB_FLAG_TEST(obj, MRB_FL_CLASS_IS_ORIGIN))",
          "",
          "---------------"
        ],
        "src/kernel.c||src/kernel.c": [
          "File: src/kernel.c -> src/kernel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:   struct RClass *sc = mrb_class_ptr(src);",
          "256:     struct RClass *c0 = sc->super;",
          "257:     struct RClass *c1 = dc;",
          "261:       c1->super = mrb_class_ptr(mrb_obj_dup(mrb, mrb_obj_value(c0)));",
          "262:       c1 = c1->super;",
          "263:       c0 = c0->super;",
          "264:     }",
          "265:     c1->super = mrb_class_ptr(mrb_obj_dup(mrb, mrb_obj_value(c0)));",
          "267:   }",
          "268:   if (sc->mt) {",
          "269:     dc->mt = kh_copy(mt, mrb, sc->mt);",
          "",
          "[Removed Lines]",
          "255:   if (sc->flags & MRB_FLAG_IS_PREPENDED) {",
          "260:     while (!(c0->flags & MRB_FLAG_IS_ORIGIN)) {",
          "266:     c1->super->flags |= MRB_FLAG_IS_ORIGIN;",
          "",
          "[Added Lines]",
          "255:   if (sc->flags & MRB_FL_CLASS_IS_PREPENDED) {",
          "260:     while (!(c0->flags & MRB_FL_CLASS_IS_ORIGIN)) {",
          "266:     c1->super->flags |= MRB_FL_CLASS_IS_ORIGIN;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:   mrb_field_write_barrier(mrb, (struct RBasic*)p, (struct RBasic*)p->c);",
          "349:   clone = mrb_obj_value(p);",
          "350:   init_copy(mrb, clone, self);",
          "353:   return clone;",
          "354: }",
          "",
          "[Removed Lines]",
          "351:   p->flags |= mrb_obj_ptr(self)->flags & MRB_FLAG_IS_FROZEN;",
          "",
          "[Added Lines]",
          "351:   p->flags |= mrb_obj_ptr(self)->flags & MRB_FL_OBJ_IS_FROZEN;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "706:   struct RClass* oldklass;",
          "707:   khash_t(st)* set = kh_init(st, mrb);",
          "710:     MRB_CLASS_ORIGIN(klass);",
          "711:     prepended = TRUE;",
          "712:   }",
          "",
          "[Removed Lines]",
          "709:   if (!recur && (klass->flags & MRB_FLAG_IS_PREPENDED)) {",
          "",
          "[Added Lines]",
          "709:   if (!recur && (klass->flags & MRB_FL_CLASS_IS_PREPENDED)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}