{
  "cve_id": "CVE-2011-1023",
  "cve_desc": "The Reliable Datagram Sockets (RDS) subsystem in the Linux kernel before 2.6.38 does not properly handle congestion map updates, which allows local users to cause a denial of service (BUG_ON and system crash) via vectors involving (1) a loopback (aka loop) transmit operation or (2) an InfiniBand (aka ib) transmit operation.",
  "repo": "torvalds/linux",
  "patch_hash": "6094628bfd94323fc1cea05ec2c6affd98c18f7f",
  "patch_info": {
    "commit_hash": "6094628bfd94323fc1cea05ec2c6affd98c18f7f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/6094628bfd94323fc1cea05ec2c6affd98c18f7f",
    "files": [
      "net/rds/ib_send.c",
      "net/rds/loop.c"
    ],
    "message": "rds: prevent BUG_ON triggering on congestion map updates\n\nRecently had this bug halt reported to me:\n\nkernel BUG at net/rds/send.c:329!\nOops: Exception in kernel mode, sig: 5 [#1]\nSMP NR_CPUS=1024 NUMA pSeries\nModules linked in: rds sunrpc ipv6 dm_mirror dm_region_hash dm_log ibmveth sg\next4 jbd2 mbcache sd_mod crc_t10dif ibmvscsic scsi_transport_srp scsi_tgt\ndm_mod [last unloaded: scsi_wait_scan]\nNIP: d000000003ca68f4 LR: d000000003ca67fc CTR: d000000003ca8770\nREGS: c000000175cab980 TRAP: 0700   Not tainted  (2.6.32-118.el6.ppc64)\nMSR: 8000000000029032 <EE,ME,CE,IR,DR>  CR: 44000022  XER: 00000000\nTASK = c00000017586ec90[1896] 'krdsd' THREAD: c000000175ca8000 CPU: 0\nGPR00: 0000000000000150 c000000175cabc00 d000000003cb7340 0000000000002030\nGPR04: ffffffffffffffff 0000000000000030 0000000000000000 0000000000000030\nGPR08: 0000000000000001 0000000000000001 c0000001756b1e30 0000000000010000\nGPR12: d000000003caac90 c000000000fa2500 c0000001742b2858 c0000001742b2a00\nGPR16: c0000001742b2a08 c0000001742b2820 0000000000000001 0000000000000001\nGPR20: 0000000000000040 c0000001742b2814 c000000175cabc70 0800000000000000\nGPR24: 0000000000000004 0200000000000000 0000000000000000 c0000001742b2860\nGPR28: 0000000000000000 c0000001756b1c80 d000000003cb68e8 c0000001742b27b8\nNIP [d000000003ca68f4] .rds_send_xmit+0x4c4/0x8a0 [rds]\nLR [d000000003ca67fc] .rds_send_xmit+0x3cc/0x8a0 [rds]\nCall Trace:\n[c000000175cabc00] [d000000003ca67fc] .rds_send_xmit+0x3cc/0x8a0 [rds]\n(unreliable)\n[c000000175cabd30] [d000000003ca7e64] .rds_send_worker+0x54/0x100 [rds]\n[c000000175cabdb0] [c0000000000b475c] .worker_thread+0x1dc/0x3c0\n[c000000175cabed0] [c0000000000baa9c] .kthread+0xbc/0xd0\n[c000000175cabf90] [c000000000032114] .kernel_thread+0x54/0x70\nInstruction dump:\n4bfffd50 60000000 60000000 39080001 935f004c f91f0040 41820024 813d017c\n7d094a78 7d290074 7929d182 394a0020 <0b090000> 40e2ff68 4bffffa4 39200000\nKernel panic - not syncing: Fatal exception\nCall Trace:\n[c000000175cab560] [c000000000012e04] .show_stack+0x74/0x1c0 (unreliable)\n[c000000175cab610] [c0000000005a365c] .panic+0x80/0x1b4\n[c000000175cab6a0] [c00000000002fbcc] .die+0x21c/0x2a0\n[c000000175cab750] [c000000000030000] ._exception+0x110/0x220\n[c000000175cab910] [c000000000004b9c] program_check_common+0x11c/0x180\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/rds/ib_send.c||net/rds/ib_send.c",
      "net/rds/loop.c||net/rds/loop.c"
    ]
  },
  "patch_diff": {
    "net/rds/ib_send.c||net/rds/ib_send.c": [
      "File: net/rds/ib_send.c -> net/rds/ib_send.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "551:  if (conn->c_loopback",
      "552:      && rm->m_inc.i_hdr.h_flags & RDS_FLAG_CONG_BITMAP) {",
      "553:   rds_cong_map_updated(conn->c_fcong, ~(u64) 0);",
      "555:  }",
      "",
      "[Removed Lines]",
      "554:   return sizeof(struct rds_header) + RDS_CONG_MAP_BYTES;",
      "",
      "[Added Lines]",
      "554:   scat = &rm->data.op_sg[sg];",
      "555:   ret = sizeof(struct rds_header) + RDS_CONG_MAP_BYTES;",
      "556:   ret = min_t(int, ret, scat->length - conn->c_xmit_data_off);",
      "557:   return ret;",
      "",
      "---------------"
    ],
    "net/rds/loop.c||net/rds/loop.c": [
      "File: net/rds/loop.c -> net/rds/loop.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:     unsigned int hdr_off, unsigned int sg,",
      "62:     unsigned int off)",
      "63: {",
      "65:  if (rm->m_inc.i_hdr.h_flags & RDS_FLAG_CONG_BITMAP) {",
      "66:   rds_cong_map_updated(conn->c_fcong, ~(u64) 0);",
      "68:  }",
      "70:  BUG_ON(hdr_off || sg || off);",
      "",
      "[Removed Lines]",
      "67:   return sizeof(struct rds_header) + RDS_CONG_MAP_BYTES;",
      "",
      "[Added Lines]",
      "64:  struct scatterlist *sgp = &rm->data.op_sg[sg];",
      "65:  int ret = sizeof(struct rds_header) +",
      "66:    be32_to_cpu(rm->m_inc.i_hdr.h_len);",
      "71:   ret = min_t(int, ret, sgp->length - conn->c_xmit_data_off);",
      "72:   goto out;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:        NULL);",
      "82:  rds_inc_put(&rm->m_inc);",
      "85: }",
      "",
      "[Removed Lines]",
      "84:  return sizeof(struct rds_header) + be32_to_cpu(rm->m_inc.i_hdr.h_len);",
      "",
      "[Added Lines]",
      "88: out:",
      "89:  return ret;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2e7b3b994529d4760231a45a6b88950187bda877",
      "candidate_info": {
        "commit_hash": "2e7b3b994529d4760231a45a6b88950187bda877",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2e7b3b994529d4760231a45a6b88950187bda877",
        "files": [
          "net/rds/cong.c",
          "net/rds/ib_send.c",
          "net/rds/loop.c"
        ],
        "message": "RDS: Fix congestion issues for loopback\n\nWe have two kinds of loopback: software (via loop transport)\nand hardware (via IB). sw is used for 127.0.0.1, and doesn't\nsupport rdma ops. hw is used for sends to local device IPs,\nand supports rdma. Both are used in different cases.\n\nFor both of these, when there is a congestion map update, we\nwant to call rds_cong_map_updated() but not actually send\nanything -- since loopback local and foreign congestion maps\npoint to the same spot, they're already in sync.\n\nThe old code never called sw loop's xmit_cong_map(),so\nrds_cong_map_updated() wasn't being called for it. sw loop\nports would not work right with the congestion monitor.\n\nFixing that meant that hw loopback now would send congestion maps\nto itself. This is also undesirable (racy), so we check for this\ncase in the ib-specific xmit code.\n\nSigned-off-by: Andy Grover <andy.grover@oracle.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/rds/cong.c||net/rds/cong.c",
          "net/rds/ib_send.c||net/rds/ib_send.c",
          "net/rds/loop.c||net/rds/loop.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/rds/ib_send.c||net/rds/ib_send.c",
            "net/rds/loop.c||net/rds/loop.c"
          ],
          "candidate": [
            "net/rds/ib_send.c||net/rds/ib_send.c",
            "net/rds/loop.c||net/rds/loop.c"
          ]
        }
      },
      "candidate_diff": {
        "net/rds/cong.c||net/rds/cong.c": [
          "File: net/rds/cong.c -> net/rds/cong.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:  spin_lock_irqsave(&rds_cong_lock, flags);",
          "220:  list_for_each_entry(conn, &map->m_conn_list, c_map_item) {",
          "223:   if (!test_and_set_bit(0, &conn->c_map_queued)) {",
          "224:    rds_stats_inc(s_cong_update_queued);",
          "225:    queue_delayed_work(rds_wq, &conn->c_send_w, 0);",
          "",
          "[Removed Lines]",
          "221:   if (conn->c_loopback)",
          "222:    continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/rds/ib_send.c||net/rds/ib_send.c": [
          "File: net/rds/ib_send.c -> net/rds/ib_send.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "482:  BUG_ON(off % RDS_FRAG_SIZE);",
          "483:  BUG_ON(hdr_off != 0 && hdr_off != sizeof(struct rds_header));",
          "486:  if (be32_to_cpu(rm->m_inc.i_hdr.h_len) == 0)",
          "487:   i = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "486:  if (conn->c_loopback",
          "487:      && rm->m_inc.i_hdr.h_flags & RDS_FLAG_CONG_BITMAP) {",
          "488:   rds_cong_map_updated(conn->c_fcong, ~(u64) 0);",
          "489:   return sizeof(struct rds_header) + RDS_CONG_MAP_BYTES;",
          "490:  }",
          "",
          "---------------"
        ],
        "net/rds/loop.c||net/rds/loop.c": [
          "File: net/rds/loop.c -> net/rds/loop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:       struct rds_cong_map *map,",
          "81:       unsigned long offset)",
          "82: {",
          "85:  BUG_ON(offset);",
          "86:  BUG_ON(map != conn->c_lcong);",
          "93:  rds_cong_map_updated(conn->c_fcong, ~(u64) 0);",
          "95:  return sizeof(struct rds_header) + RDS_CONG_MAP_BYTES;",
          "",
          "[Removed Lines]",
          "83:  unsigned long i;",
          "88:  for (i = 0; i < RDS_CONG_MAP_PAGES; i++) {",
          "89:   memcpy((void *)conn->c_fcong->m_page_addrs[i],",
          "90:          (void *)map->m_page_addrs[i], PAGE_SIZE);",
          "91:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}