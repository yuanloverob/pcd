{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "67682dfd06d0cda5776f180bc1e0faa6a60926de",
      "candidate_info": {
        "commit_hash": "67682dfd06d0cda5776f180bc1e0faa6a60926de",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/67682dfd06d0cda5776f180bc1e0faa6a60926de",
        "files": [
          "main/EventSystem.cpp",
          "main/EventSystem.h",
          "main/SQLHelper.cpp"
        ],
        "message": "Removed UserVariable type change in EventSystem",
        "before_after_code_files": [
          "main/EventSystem.cpp||main/EventSystem.cpp",
          "main/EventSystem.h||main/EventSystem.h",
          "main/SQLHelper.cpp||main/SQLHelper.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/EventSystem.cpp||main/EventSystem.cpp": [
          "File: main/EventSystem.cpp -> main/EventSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1334: }",
          "1338: {",
          "1339:  if (!m_bEnabled)",
          "1340:   return;",
          "",
          "[Removed Lines]",
          "1337: void CEventSystem::UpdateUserVariable(const uint64_t ulDevID, const std::string &varName, const std::string &varValue, const int varType, const std::string &lastUpdate)",
          "",
          "[Added Lines]",
          "1337: void CEventSystem::UpdateUserVariable(const uint64_t ulDevID, const std::string &varValue, const std::string &lastUpdate)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1348:  _tUserVariable replaceitem = itt->second;",
          "1357:  if (GetEventTrigger(ulDevID, REASON_USERVARIABLE, false))",
          "1358:  {",
          "",
          "[Removed Lines]",
          "1350:  if (!varName.empty())",
          "1351:   replaceitem.variableName = varName;",
          "1352:  if (!varValue.empty())",
          "1353:   replaceitem.variableValue = varValue;",
          "1354:  if (varType != -1)",
          "1355:   replaceitem.variableType = varType;",
          "",
          "[Added Lines]",
          "1350:  replaceitem.variableValue = varValue;",
          "",
          "---------------"
        ],
        "main/EventSystem.h||main/EventSystem.h": [
          "File: main/EventSystem.h -> main/EventSystem.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:  void GetCurrentScenesGroups();",
          "128:  void GetCurrentUserVariables();",
          "129:  bool UpdateSceneGroup(const uint64_t ulDevID, const int nValue, const std::string &lastUpdate);",
          "131:  bool PythonScheduleEvent(std::string ID, const std::string &Action, const std::string &eventName);",
          "132:  bool GetEventTrigger(const uint64_t ulDevID, const _eReason reason, const bool bEventTrigger);",
          "133:  void SetEventTrigger(const uint64_t ulDevID, const _eReason reason, const float fDelayTime);",
          "",
          "[Removed Lines]",
          "130:  void UpdateUserVariable(const uint64_t ulDevID, const std::string &varName, const std::string &varValue, const int varType, const std::string &lastUpdate);",
          "",
          "[Added Lines]",
          "130:  void UpdateUserVariable(const uint64_t ulDevID, const std::string &varValue, const std::string &lastUpdate);",
          "",
          "---------------"
        ],
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7955:   uint64_t vId = std::strtoull(idx.c_str(), nullptr, 10);",
          "7956:   if (eventtrigger)",
          "7957:    m_mainworker.m_eventsystem.SetEventTrigger(vId, m_mainworker.m_eventsystem.REASON_USERVARIABLE, 0);",
          "7959:  }",
          "7960:  return \"OK\";",
          "7961: }",
          "",
          "[Removed Lines]",
          "7958:   m_mainworker.m_eventsystem.UpdateUserVariable(vId, varname, szVarValue, typei, szLastUpdate);",
          "",
          "[Added Lines]",
          "7958:   m_mainworker.m_eventsystem.UpdateUserVariable(vId, szVarValue, szLastUpdate);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "782c471f1c75d3a8334e595bb0408033dec58b98",
      "candidate_info": {
        "commit_hash": "782c471f1c75d3a8334e595bb0408033dec58b98",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/782c471f1c75d3a8334e595bb0408033dec58b98",
        "files": [
          "main/SQLHelper.cpp"
        ],
        "message": "Fixed: Allow empty response for HTTP POST calls in Schedule items",
        "before_after_code_files": [
          "main/SQLHelper.cpp||main/SQLHelper.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3267:     }",
          "3268:     else if (method == HTTPClient::HTTP_METHOD_POST)",
          "3269:     {",
          "3271:     }",
          "3273:     if (m_bEnableEventSystem && !callback.empty())",
          "",
          "[Removed Lines]",
          "3270:      ret = HTTPClient::POST(itt->_sValue, postData, extraHeaders, response, headerData);",
          "",
          "[Added Lines]",
          "3270:      ret = HTTPClient::POST(itt->_sValue, postData, extraHeaders, response, headerData, true, true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0d75e6e2d60610c8907e40483f19b12e897b718",
      "candidate_info": {
        "commit_hash": "f0d75e6e2d60610c8907e40483f19b12e897b718",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/f0d75e6e2d60610c8907e40483f19b12e897b718",
        "files": [
          "main/mainworker.cpp"
        ],
        "message": "json udevice call now using 2 decimals for temperature (again)",
        "before_after_code_files": [
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13189:    {",
          "13190:     float temp = static_cast<float>(atof(sValue.c_str()));",
          "13191:     temp += AddjValue;",
          "13193:     sValue = szTmp;",
          "13194:    }",
          "13195:    else if (devType == pTypeTEMP_HUM)",
          "",
          "[Removed Lines]",
          "13192:     sprintf(szTmp, \"%.1f\", temp);",
          "",
          "[Added Lines]",
          "13192:     sprintf(szTmp, \"%.2f\", temp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13199:     {",
          "13200:      float temp = static_cast<float>(atof(strarray[0].c_str()));",
          "13201:      temp += AddjValue;",
          "13203:      sValue = szTmp;",
          "13204:     }",
          "13205:    }",
          "",
          "[Removed Lines]",
          "13202:      sprintf(szTmp, \"%.1f;%s;%s\", temp, strarray[1].c_str(), strarray[2].c_str());",
          "",
          "[Added Lines]",
          "13202:      sprintf(szTmp, \"%.2f;%s;%s\", temp, strarray[1].c_str(), strarray[2].c_str());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "13220:      if (subType == sTypeTHBFloat)",
          "13221:      {",
          "13223:      }",
          "13224:      else",
          "13225:      {",
          "13227:      }",
          "13228:      sValue = szTmp;",
          "13229:     }",
          "",
          "[Removed Lines]",
          "13222:       sprintf(szTmp, \"%.1f;%s;%s;%.1f;%s\", temp, strarray[1].c_str(), strarray[2].c_str(), fbarometer, strarray[4].c_str());",
          "13226:       sprintf(szTmp, \"%.1f;%s;%s;%d;%s\", temp, strarray[1].c_str(), strarray[2].c_str(), (int)rint(fbarometer), strarray[4].c_str());",
          "",
          "[Added Lines]",
          "13222:       sprintf(szTmp, \"%.2f;%s;%s;%.1f;%s\", temp, strarray[1].c_str(), strarray[2].c_str(), fbarometer, strarray[4].c_str());",
          "13226:       sprintf(szTmp, \"%.2f;%s;%s;%d;%s\", temp, strarray[1].c_str(), strarray[2].c_str(), (int)rint(fbarometer), strarray[4].c_str());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "530cd7c85ec0aad8eea6070384404b1ca1ef7279",
      "candidate_info": {
        "commit_hash": "530cd7c85ec0aad8eea6070384404b1ca1ef7279",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/530cd7c85ec0aad8eea6070384404b1ca1ef7279",
        "files": [
          "hardware/MQTT.cpp",
          "hardware/XiaomiGateway.cpp",
          "main/EventSystem.cpp",
          "main/SQLHelper.cpp",
          "main/SQLHelper.h",
          "main/WebServer.cpp"
        ],
        "message": "Clarified Uservariable types",
        "before_after_code_files": [
          "hardware/MQTT.cpp||hardware/MQTT.cpp",
          "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp",
          "main/EventSystem.cpp||main/EventSystem.cpp",
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/SQLHelper.h||main/SQLHelper.h",
          "main/WebServer.cpp||main/WebServer.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/MQTT.cpp||hardware/MQTT.cpp": [
          "File: hardware/MQTT.cpp -> hardware/MQTT.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:  std::vector<std::vector<std::string> > result;",
          "131:  uint64_t idx = 0;",
          "134:  bool ret = jReader.parse(qMessage, root);",
          "135:  if ((!ret) || (!root.isObject()))",
          "",
          "[Removed Lines]",
          "132:  std::string Var1,Var2;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:     _log.Log(LOG_ERROR, \"MQTT: unknown idx received! (idx %\" PRIu64 \")\", idx);",
          "173:     return;",
          "174:    }",
          "177:   }",
          "",
          "[Removed Lines]",
          "175:    Var1 = result[0][0];",
          "176:    Var2 = result[0][1];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391:   else if (szCommand == \"setuservariable\")",
          "392:   {",
          "393:    std::string varvalue = root[\"value\"].asString();",
          "395:   }",
          "396:   else if (szCommand == \"addlogmessage\")",
          "397:   {",
          "",
          "[Removed Lines]",
          "394:    m_sql.UpdateUserVariable(root[\"idx\"].asString(), Var1, Var2, varvalue, true);",
          "",
          "[Added Lines]",
          "392:    idx = (uint64_t)root[\"idx\"].asInt64();",
          "393:    result = m_sql.safe_query(\"SELECT Name, ValueType FROM UserVariables WHERE (ID==%\" PRIu64 \")\", idx);",
          "394:    std::string sVarName = result[0][0];",
          "395:    _eUsrVariableType varType = (_eUsrVariableType)atoi(result[0][1].c_str());",
          "397:    m_sql.UpdateUserVariable(root[\"idx\"].asString(), sVarName, varType, varvalue, true);",
          "",
          "---------------"
        ],
        "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp": [
          "File: hardware/XiaomiGateway.cpp -> hardware/XiaomiGateway.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "677:    }",
          "678:   }",
          "679:   else if (switchtype == STYPE_OnOff && Name == \"Xiaomi Gateway MP3\") {",
          "681:   }",
          "682:  }",
          "683:  else {",
          "",
          "[Removed Lines]",
          "680:    m_sql.AddUserVariable(\"XiaomiMP3\", \"0\", \"10001\");",
          "",
          "[Added Lines]",
          "680:    m_sql.AddUserVariable(\"XiaomiMP3\", USERVARTYPE_INTEGER, \"10001\");",
          "",
          "---------------"
        ],
        "main/EventSystem.cpp||main/EventSystem.cpp": [
          "File: main/EventSystem.cpp -> main/EventSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2308:     if (!result.empty())",
          "2309:     {",
          "2310:      std::vector<std::string> sd = result[0];",
          "2312:      if (updateResult != \"OK\") {",
          "2313:       _log.Log(LOG_ERROR, \"EventSystem: Error updating variable %s: %s\", sd[0].c_str(), updateResult.c_str());",
          "2314:      }",
          "",
          "[Removed Lines]",
          "2311:      std::string updateResult = m_sql.UpdateUserVariable(variableNo, sd[0], sd[1], doWhat, false);",
          "",
          "[Added Lines]",
          "2311:      std::string updateResult = m_sql.UpdateUserVariable(variableNo, sd[0], (const _eUsrVariableType)atoi(sd[1].c_str()), doWhat, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3560:    if (parseResult.fAfterSec < (1. / timer_resolution_hz / 2))",
          "3561:    {",
          "3563:     if (updateResult != \"OK\") {",
          "3564:      _log.Log(LOG_ERROR, \"EventSystem: Error updating variable %s: %s\", variableName.c_str(), updateResult.c_str());",
          "3565:     }",
          "",
          "[Removed Lines]",
          "3562:     std::string updateResult = m_sql.UpdateUserVariable(sd[0], variableName, sd[1], variableValue, false);",
          "",
          "[Added Lines]",
          "3562:     std::string updateResult = m_sql.UpdateUserVariable(sd[0], variableName, (const _eUsrVariableType)atoi(sd[1].c_str()), variableValue, false);",
          "",
          "---------------"
        ],
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3356:      s_str.clear();",
          "3357:      s_str.str(\"\");",
          "3358:      s_str << itt->_idx;",
          "3360:      if (updateResult != \"OK\") {",
          "3361:       _log.Log(LOG_ERROR, \"Error updating variable %s: %s\", sd[0].c_str(), updateResult.c_str());",
          "3362:      }",
          "",
          "[Removed Lines]",
          "3359:      std::string updateResult = UpdateUserVariable(s_str.str(), sd[0], sd[1], itt->_sValue, (itt->_nValue == 0) ? false : true);",
          "",
          "[Added Lines]",
          "3359:      std::string updateResult = UpdateUserVariable(s_str.str(), sd[0], (const _eUsrVariableType)atoi(sd[1].c_str()), itt->_sValue, (itt->_nValue == 0) ? false : true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7902:  return \"OK\";",
          "7903: }",
          "7906: {",
          "7908:  std::string dupeName = CheckUserVariableName(varname);",
          "7909:  if (dupeName != \"OK\")",
          "7910:   return dupeName;",
          "7913:  if (formatError != \"OK\")",
          "7914:   return formatError;",
          "7916:  std::string szVarValue = CURLEncode::URLDecode(varvalue.c_str());",
          "7917:  std::vector<std::vector<std::string> > result;",
          "7920:  if (m_bEnableEventSystem)",
          "7921:   m_mainworker.m_eventsystem.GetCurrentUserVariables();",
          "7922:  return \"OK\";",
          "7923: }",
          "7926: {",
          "7929:  if (formatError != \"OK\")",
          "7930:   return formatError;",
          "",
          "[Removed Lines]",
          "7905: std::string CSQLHelper::AddUserVariable(const std::string &varname, const std::string &vartype, const std::string &varvalue)",
          "7907:  int typei = atoi(vartype.c_str());",
          "7912:  std::string formatError = CheckUserVariable(typei, varvalue);",
          "7918:  safe_query(\"INSERT INTO UserVariables (Name,ValueType,Value) VALUES ('%q','%d','%q')\", varname.c_str(), typei, szVarValue.c_str());",
          "7925: std::string CSQLHelper::UpdateUserVariable(const std::string &idx, const std::string &varname, const std::string &vartype, const std::string &varvalue, const bool eventtrigger)",
          "7927:  int typei = atoi(vartype.c_str());",
          "7928:  std::string formatError = CheckUserVariable(typei, varvalue);",
          "",
          "[Added Lines]",
          "7905: std::string CSQLHelper::AddUserVariable(const std::string &varname, const _eUsrVariableType eVartype, const std::string &varvalue)",
          "7911:  std::string formatError = CheckUserVariable(eVartype, varvalue);",
          "7917:  safe_query(\"INSERT INTO UserVariables (Name, ValueType, Value) VALUES ('%q','%d','%q')\", varname.c_str(), eVartype, szVarValue.c_str());",
          "7924: std::string CSQLHelper::UpdateUserVariable(const std::string &idx, const std::string &varname, const _eUsrVariableType eVartype, const std::string &varvalue, const bool eventtrigger)",
          "7926:  std::string formatError = CheckUserVariable(eVartype, varvalue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7947:  safe_query(",
          "7948:   \"UPDATE UserVariables SET Name='%q', ValueType='%d', Value='%q', LastUpdate='%q' WHERE (ID == '%q')\",",
          "7949:   varname.c_str(),",
          "7951:   szVarValue.c_str(),",
          "7952:   szLastUpdate.c_str(),",
          "7953:   idx.c_str()",
          "",
          "[Removed Lines]",
          "7950:   typei,",
          "",
          "[Added Lines]",
          "7948:   eVartype,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7975: }",
          "7979: {",
          "7981:  if (varvalue.size() > 200) {",
          "7982:   return \"String exceeds maximum size\";",
          "7983:  }",
          "7986:   std::istringstream iss(varvalue);",
          "7987:   int i;",
          "",
          "[Removed Lines]",
          "7978: std::string CSQLHelper::CheckUserVariable(const int vartype, const std::string &varvalue)",
          "7984:  if (vartype == 0) {",
          "",
          "[Added Lines]",
          "7976: std::string CSQLHelper::CheckUserVariable(const _eUsrVariableType eVartype, const std::string &varvalue)",
          "7982:  if (eVartype == USERVARTYPE_INTEGER) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7991:    return \"Not a valid integer\";",
          "7992:   }",
          "7993:  }",
          "7996:   std::istringstream iss(varvalue);",
          "7997:   float f;",
          "",
          "[Removed Lines]",
          "7994:  else if (vartype == 1) {",
          "",
          "[Added Lines]",
          "7992:  else if (eVartype == USERVARTYPE_FLOAT) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8001:    return \"Not a valid float\";",
          "8002:   }",
          "8003:  }",
          "8006:   int d, m, y;",
          "8007:   if (!CheckDate(varvalue, d, m, y))",
          "",
          "[Removed Lines]",
          "8004:  else if (vartype == 3) {",
          "",
          "[Added Lines]",
          "8002:  else if (eVartype == USERVARTYPE_DATE) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8009:    return \"Not a valid date notation (DD/MM/YYYY)\";",
          "8010:   }",
          "8011:  }",
          "8014:   if (!CheckTime(varvalue))",
          "8015:    return \"Not a valid time notation (HH:MM)\";",
          "8016:  }",
          "8018:   return \"OK\";",
          "8019:  }",
          "8020:  return \"OK\";",
          "8021: }",
          "8029: bool CSQLHelper::CheckDate(const std::string &sDate, int& d, int& m, int& y)",
          "8030: {",
          "8031:  std::istringstream is(sDate);",
          "",
          "[Removed Lines]",
          "8012:  else if (vartype == 4) {",
          "8017:  else if (vartype == 5) {",
          "8024: std::vector<std::vector<std::string> > CSQLHelper::GetUserVariables()",
          "8025: {",
          "8026:  return safe_query(\"SELECT ID,Name,ValueType,Value,LastUpdate FROM UserVariables\");",
          "8027: }",
          "",
          "[Added Lines]",
          "8010:  else if (eVartype == USERVARTYPE_TIME) {",
          "8015:  else if (eVartype == USERVARTYPE_STRING) {",
          "",
          "---------------"
        ],
        "main/SQLHelper.h||main/SQLHelper.h": [
          "File: main/SQLHelper.h -> main/SQLHelper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     WEIGHTUNIT_LB,",
          "34: };",
          "36: enum _eTaskItemType",
          "37: {",
          "38:  TITEM_SWITCHCMD=0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: enum _eUsrVariableType",
          "37: {",
          "38:  USERVARTYPE_INTEGER = 0,",
          "39:  USERVARTYPE_FLOAT,",
          "40:  USERVARTYPE_DATE,",
          "41:  USERVARTYPE_TIME,",
          "42:  USERVARTYPE_STRING",
          "43: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "377:  void safe_exec_no_return(const char *fmt, ...);",
          "378:  bool safe_UpdateBlobInTableWithID(const std::string &Table, const std::string &Column, const std::string &sID, const std::string &BlobData);",
          "379:  bool DoesColumnExistsInTable(const std::string &columnname, const std::string &tablename);",
          "382:  std::string DeleteUserVariable(const std::string &idx);",
          "384:  std::string CheckUserVariableName(const std::string &varname);",
          "387:  uint64_t CreateDevice(const int HardwareID, const int SensorType, const int SensorSubType, std::string &devname, const unsigned long nid, const std::string &soptions);",
          "",
          "[Removed Lines]",
          "380:  std::string AddUserVariable(const std::string &varname, const std::string &vartype, const std::string &varvalue);",
          "381:  std::string UpdateUserVariable(const std::string &idx, const std::string &varname, const std::string &vartype, const std::string &varvalue, const bool eventtrigger);",
          "383:  std::string CheckUserVariable(const int vartype, const std::string &varvalue);",
          "385:  std::vector<std::vector<std::string> > GetUserVariables();",
          "",
          "[Added Lines]",
          "390:  std::string AddUserVariable(const std::string &varname, const _eUsrVariableType eVartype, const std::string &varvalue);",
          "391:  std::string UpdateUserVariable(const std::string &idx, const std::string &varname, const _eUsrVariableType eVartype, const std::string &varvalue, const bool eventtrigger);",
          "393:  std::string CheckUserVariable(const _eUsrVariableType eVartype, const std::string &varvalue);",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1905:     )",
          "1906:     return;",
          "1909:    root[\"title\"] = \"AddUserVariable\";",
          "1910:   }",
          "",
          "[Removed Lines]",
          "1908:    root[\"status\"] = m_sql.AddUserVariable(variablename, variabletype, variablevalue);",
          "",
          "[Added Lines]",
          "1908:    root[\"status\"] = m_sql.AddUserVariable(variablename, (const _eUsrVariableType)atoi(variabletype.c_str()), variablevalue);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1948:    else if (variabletype != result[0][1])",
          "1949:     bTypeNameChanged = true; //new type",
          "1952:    root[\"title\"] = \"UpdateUserVariable\";",
          "1954:    if (bTypeNameChanged)",
          "",
          "[Removed Lines]",
          "1951:    root[\"status\"] = m_sql.UpdateUserVariable(idx, variablename, variabletype, variablevalue, !bTypeNameChanged);",
          "",
          "[Added Lines]",
          "1951:    root[\"status\"] = m_sql.UpdateUserVariable(idx, variablename, (const _eUsrVariableType)atoi(variabletype.c_str()), variablevalue, !bTypeNameChanged);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1962:   void CWebServer::Cmd_GetUserVariables(WebEmSession & session, const request& req, Json::Value &root)",
          "1963:   {",
          "1965:    std::vector<std::vector<std::string> > result;",
          "1969:    {",
          "1981:    }",
          "1982:    root[\"status\"] = \"OK\";",
          "1983:    root[\"title\"] = \"GetUserVariables\";",
          "",
          "[Removed Lines]",
          "1964:    std::stringstream szQuery;",
          "1966:    szQuery << \"SELECT ID,Name,ValueType,Value,LastUpdate FROM UserVariables\";",
          "1967:    result = m_sql.GetUserVariables();",
          "1968:    if (!result.empty())",
          "1970:     int ii = 0;",
          "1971:     for (const auto & itt : result)",
          "1972:     {",
          "1973:      std::vector<std::string> sd = itt;",
          "1974:      root[\"result\"][ii][\"idx\"] = sd[0];",
          "1975:      root[\"result\"][ii][\"Name\"] = sd[1];",
          "1976:      root[\"result\"][ii][\"Type\"] = sd[2];",
          "1977:      root[\"result\"][ii][\"Value\"] = sd[3];",
          "1978:      root[\"result\"][ii][\"LastUpdate\"] = sd[4];",
          "1979:      ii++;",
          "1980:     }",
          "",
          "[Added Lines]",
          "1965:    result = m_sql.safe_query(\"SELECT ID, Name, ValueType, Value, LastUpdate FROM UserVariables\");",
          "1966:    int ii = 0;",
          "1967:    for (const auto & itt : result)",
          "1969:     std::vector<std::string> sd = itt;",
          "1970:     root[\"result\"][ii][\"idx\"] = sd[0];",
          "1971:     root[\"result\"][ii][\"Name\"] = sd[1];",
          "1972:     root[\"result\"][ii][\"Type\"] = sd[2];",
          "1973:     root[\"result\"][ii][\"Value\"] = sd[3];",
          "1974:     root[\"result\"][ii][\"LastUpdate\"] = sd[4];",
          "1975:     ii++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1992:    int iVarID = atoi(idx.c_str());",
          "1994:    std::vector<std::vector<std::string> > result;",
          "1998:    {",
          "2010:    }",
          "2011:    root[\"status\"] = \"OK\";",
          "2012:    root[\"title\"] = \"GetUserVariable\";",
          "",
          "[Removed Lines]",
          "1995:    result = m_sql.safe_query(\"SELECT ID,Name,ValueType,Value,LastUpdate FROM UserVariables WHERE (ID==%d)\",",
          "1996:     iVarID);",
          "1997:    if (!result.empty())",
          "1999:     int ii = 0;",
          "2000:     for (const auto & itt : result)",
          "2001:     {",
          "2002:      std::vector<std::string> sd = itt;",
          "2003:      root[\"result\"][ii][\"idx\"] = sd[0];",
          "2004:      root[\"result\"][ii][\"Name\"] = sd[1];",
          "2005:      root[\"result\"][ii][\"Type\"] = sd[2];",
          "2006:      root[\"result\"][ii][\"Value\"] = sd[3];",
          "2007:      root[\"result\"][ii][\"LastUpdate\"] = sd[4];",
          "2008:      ii++;",
          "2009:     }",
          "",
          "[Added Lines]",
          "1990:    result = m_sql.safe_query(\"SELECT ID, Name, ValueType, Value, LastUpdate FROM UserVariables WHERE (ID==%d)\", iVarID);",
          "1991:    int ii = 0;",
          "1992:    for (const auto & itt : result)",
          "1994:     std::vector<std::string> sd = itt;",
          "1995:     root[\"result\"][ii][\"idx\"] = sd[0];",
          "1996:     root[\"result\"][ii][\"Name\"] = sd[1];",
          "1997:     root[\"result\"][ii][\"Type\"] = sd[2];",
          "1998:     root[\"result\"][ii][\"Value\"] = sd[3];",
          "1999:     root[\"result\"][ii][\"LastUpdate\"] = sd[4];",
          "2000:     ii++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7b71f1fbdd631fe0a9c9e54f8e0eb59e4c03523",
      "candidate_info": {
        "commit_hash": "b7b71f1fbdd631fe0a9c9e54f8e0eb59e4c03523",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/b7b71f1fbdd631fe0a9c9e54f8e0eb59e4c03523",
        "files": [
          "hardware/plugins/Plugins.cpp"
        ],
        "message": "Import and enable \"faulthandler\" module to give Python stack dump for all threads in a plugin if it crashes",
        "before_after_code_files": [
          "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp": [
          "File: hardware/plugins/Plugins.cpp -> hardware/plugins/Plugins.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1058:    PySys_SetPath((wchar_t*)sPath.c_str());",
          "1060:    try",
          "1061:    {",
          "1062:     m_PyModule = PyImport_ImportModule(\"plugin\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1060:    try",
          "1061:    {",
          "1065:     void* pFaultModule = PyImport_ImportModule(\"faulthandler\");",
          "1066:     if (!pFaultModule)",
          "1067:     {",
          "1068:      _log.Log(LOG_ERROR, \"(%s) failed to load 'faulthandler' module, continuing.\", m_PluginKey.c_str());",
          "1069:     }",
          "1070:     else",
          "1071:     {",
          "1072:      PyObject* pFunc = PyObject_GetAttrString((PyObject*)pFaultModule, \"enable\");",
          "1073:      if (pFunc && PyCallable_Check(pFunc))",
          "1074:      {",
          "1075:       PyObject_CallObject(pFunc, NULL);",
          "1076:      }",
          "1077:     }",
          "1078:    }",
          "1079:    catch (...)",
          "1080:    {",
          "1081:     _log.Log(LOG_ERROR, \"(%s) exception loading 'faulthandler' module, continuing.\", m_PluginKey.c_str());",
          "1082:     PyErr_Clear();",
          "1083:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}