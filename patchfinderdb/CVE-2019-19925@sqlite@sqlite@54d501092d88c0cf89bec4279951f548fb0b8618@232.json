{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "61cb4ed7f10f9363572a73c1d087bdb10410835b",
      "candidate_info": {
        "commit_hash": "61cb4ed7f10f9363572a73c1d087bdb10410835b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/61cb4ed7f10f9363572a73c1d087bdb10410835b",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Add comments in the parse.sql file to help demonstrate how rules are encoded.\n\nFossilOrigin-Name: 2c4f714892327a1a9a303267b1f9685e310cca5dcea9c61287d95e26291b0506",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3a82c554c3bde4640df6865686f8f70e2c1e07c581fed4772b6b0a8ec1b10bb6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4224:     );",
          "4225:     for(i=0, rp=lemp->rule; rp; rp=rp->next, i++){",
          "4226:       assert( i==rp->iRule );",
          "4227:       fprintf(sql,",
          "4228:         \"INSERT INTO rule(ruleid,lhs)VALUES(%d,%d);\\n\",",
          "4229:         rp->iRule, rp->lhs->index",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4227:       fprintf(sql, \"-- \");",
          "4228:       writeRuleText(sql, rp);",
          "4229:       fprintf(sql, \"\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "337cc3992a688d2e44b4a6e09c1fad088dec423d",
      "candidate_info": {
        "commit_hash": "337cc3992a688d2e44b4a6e09c1fad088dec423d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/337cc3992a688d2e44b4a6e09c1fad088dec423d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/intreal.test"
        ],
        "message": "Fix the OP_Affinity operator so that when applying REAL affinity, it only sets MEM_IntReal if the integer value will fit in 6 bytes or less. Fix for ticket [ba2f4585cf495231]\n\nFossilOrigin-Name: 2b221bb15fd2b9f6a426e5eb439f7dbabbe3c4cab010c49b87dae3bb1f16c081",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/intreal.test||test/intreal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cea8a892f76bddc63b921ffc11ea8dce8f8cf649a2c77aa908c7c5c91eed7f4c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2817:     assert( memIsValid(pIn1) );",
          "2818:     applyAffinity(pIn1, zAffinity[0], encoding);",
          "2819:     if( zAffinity[0]==SQLITE_AFF_REAL && (pIn1->flags & MEM_Int)!=0 ){",
          "2824:     }",
          "2825:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "2826:     zAffinity++;",
          "",
          "[Removed Lines]",
          "2822:       pIn1->flags |= MEM_IntReal;",
          "2823:       pIn1->flags &= ~MEM_Int;",
          "",
          "[Added Lines]",
          "2824:       testcase( pIn1->u.i==140737488355328LL );",
          "2825:       testcase( pIn1->u.i==140737488355327LL );",
          "2826:       testcase( pIn1->u.i==-140737488355328LL );",
          "2827:       testcase( pIn1->u.i==-140737488355329LL );",
          "2828:       if( pIn1->u.i<=140737488355327LL && pIn1->u.i>=-140737488355328LL ){",
          "2829:         pIn1->flags |= MEM_IntReal;",
          "2830:         pIn1->flags &= ~MEM_Int;",
          "2831:       }else{",
          "2832:         pIn1->u.r = (double)pIn1->u.i;",
          "2833:         pIn1->flags |= MEM_Real;",
          "2834:         pIn1->flags &= ~MEM_Int;",
          "2835:       }",
          "",
          "---------------"
        ],
        "test/intreal.test||test/intreal.test": [
          "File: test/intreal.test -> test/intreal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   );",
          "83: } [list a $D]",
          "86: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: # 2019-07-29 ticket ba2f4585cf495231",
          "86: #",
          "87: db close",
          "88: sqlite3 db :memory:",
          "89: do_execsql_test 3.0 {",
          "90:   CREATE TABLE t0 (c0 REAL, c1);",
          "91:   CREATE UNIQUE INDEX i0 ON t0(c1, 0 | c0);",
          "92:   INSERT INTO t0(c0) VALUES (4750228396194493326), (0);",
          "93:   UPDATE OR REPLACE t0 SET c0 = 'a', c1 = '';",
          "94:   SELECT * FROM t0 ORDER BY t0.c1;",
          "95:   PRAGMA integrity_check;",
          "96: } {a {} ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7c92e82d27b88b1fa56ff72796ed42e89f614c9",
      "candidate_info": {
        "commit_hash": "f7c92e82d27b88b1fa56ff72796ed42e89f614c9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f7c92e82d27b88b1fa56ff72796ed42e89f614c9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/distinct2.test"
        ],
        "message": "Avoid assuming that \"column IS ?\", where column is declared UNIQUE, matches only a single row (as \"?\" might be NULL). Fix for [b8689402].\n\nFossilOrigin-Name: d02490a2f0cae047087130b4ad8f55f265845c2ffb3bde3b7d507edb54acea6d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/distinct2.test||test/distinct2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c01e0170e113ad052b6c3980beb4be9f1dc03fb3cf34132b90e8b82b23f654e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3765:           u16 eOp = pLoop->aLTerm[j]->eOperator;",
          "3775:           if( (eOp & eqOpMask)!=0 ){",
          "3777:               testcase( isOrderDistinct );",
          "3778:               isOrderDistinct = 0;",
          "3779:             }",
          "",
          "[Removed Lines]",
          "3776:             if( eOp & WO_ISNULL ){",
          "",
          "[Added Lines]",
          "3780:             if( eOp & (WO_ISNULL|WO_IS) ){",
          "3781:               testcase( eOp & WO_ISNULL );",
          "3782:               testcase( eOp & WO_IS );",
          "",
          "---------------"
        ],
        "test/distinct2.test||test/distinct2.test": [
          "File: test/distinct2.test -> test/distinct2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:   two 1 1",
          "275: }",
          "279: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: #-------------------------------------------------------------------------",
          "278: #",
          "279: reset_db",
          "280: do_execsql_test 3000 {",
          "281:   CREATE TABLE t0 (c0, c1 NOT NULL DEFAULT 1, c2, PRIMARY KEY (c0, c1));",
          "282:   INSERT INTO t0(c2) VALUES (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL);",
          "283:   INSERT INTO t0(c2) VALUES('a');",
          "284: }",
          "286: do_execsql_test 3010 {",
          "287:   SELECT DISTINCT * FROM t0 WHERE NULL IS t0.c0;",
          "288: } {",
          "289:   {} 1 {}",
          "290:   {} 1 a",
          "291: }",
          "293: do_execsql_test 3020 {",
          "294:   ANALYZE;",
          "295: }",
          "297: do_execsql_test 3030 {",
          "298:   SELECT DISTINCT * FROM t0 WHERE NULL IS c0;",
          "299: } {",
          "300:   {} 1 {}",
          "301:   {} 1 a",
          "302: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d471bcb3964e8ee417dfb45acee824dd77238acc",
      "candidate_info": {
        "commit_hash": "d471bcb3964e8ee417dfb45acee824dd77238acc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d471bcb3964e8ee417dfb45acee824dd77238acc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Remove an optimization that can no longer occur, being superceded by the subquery-reuse optimization.  Put an assert in place of the optimization to detect if the need for this optimization ever returns.\n\nFossilOrigin-Name: 4fcdc7a2939457e51aab37cab168677cd7f464a9a0aff4f8981e864a30828b3b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9fb646f29c05bca5f677a2c7c4f45c36bfe0a0c6a88cb7968b4a0459bdd63bb2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5835:     pSub = pItem->pSelect;",
          "5836:     if( pSub==0 ) continue;",
          "",
          "[Removed Lines]",
          "5844:     if( pItem->addrFillSub ){",
          "5845:       if( pItem->fg.viaCoroutine==0 ){",
          "5849:         testcase( sqlite3VdbeGetOp(v, pItem->addrFillSub)->opcode==OP_Once );",
          "5850:         sqlite3VdbeAddOp2(v, OP_Gosub, pItem->regReturn, pItem->addrFillSub);",
          "5851:       }",
          "5852:       continue;",
          "5853:     }",
          "",
          "[Added Lines]",
          "5843:     assert( pItem->addrFillSub==0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d985f7260b2f7b8a4977f1af330f49c110aa3f43",
      "candidate_info": {
        "commit_hash": "d985f7260b2f7b8a4977f1af330f49c110aa3f43",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d985f7260b2f7b8a4977f1af330f49c110aa3f43",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "CLI enhancements:  Add the \".filectrl\" command.  Make the \".testctrl\" command visible to \".help\".\n\nFossilOrigin-Name: 7b3a99fce8b4a757f2b2ef2f0b02d68566f2528d9ae1e30628522717f872466c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3a477fd0c944440be03d23c667053b346c769c6a4f6ba1ef094b7581a08d7bd4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3513:   \".fullschema ?--indent?   Show schema and the content of sqlite_stat tables\",",
          "3514:   \".headers on|off          Turn display of headers on or off\",",
          "3515:   \".help ?-all? ?PATTERN?   Show help text for PATTERN\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3513:   \".filectrl CMD ...        Run various sqlite3_file_control() operations\",",
          "3514:   \"                           Run \\\".filectrl\\\" with no arguments for details\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3627: #endif",
          "3628:   \".tables ?TABLE?          List names of tables matching LIKE pattern TABLE\",",
          "3629:   \".testcase NAME           Begin redirecting output to 'testcase-out.txt'\",",
          "3630:   \".timeout MS              Try opening locked tables for MS milliseconds\",",
          "3631:   \".timer on|off            Turn SQL timer on or off\",",
          "3632: #ifndef SQLITE_OMIT_TRACE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3632:   \".testctrl CMD ...        Run various sqlite3_test_control() operations\",",
          "3633:   \"                           Run \\\".testctrl\\\" with no arguments for details\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7277:   }else",
          "7278: #endif",
          "7280:   if( c=='f' && strncmp(azArg[0], \"fullschema\", n)==0 ){",
          "7281:     ShellState data;",
          "7282:     char *zErrMsg = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7284:   if( c=='f' && strncmp(azArg[0], \"filectrl\", n)==0 ){",
          "7285:     static const struct {",
          "7289:     } aCtrl[] = {",
          "7290:       { \"size_limit\",     SQLITE_FCNTL_SIZE_LIMIT,      \"[LIMIT]\"        },",
          "7291:       { \"chunk_size\",     SQLITE_FCNTL_CHUNK_SIZE,      \"SIZE\"           },",
          "7293:       { \"persist_wal\",    SQLITE_FCNTL_PERSIST_WAL,     \"[BOOLEAN]\"      },",
          "7294:       { \"psow\",       SQLITE_FCNTL_POWERSAFE_OVERWRITE, \"[BOOLEAN]\"      },",
          "7296:       { \"tempfilename\",   SQLITE_FCNTL_TEMPFILENAME,    \"\"               },",
          "7297:       { \"has_moved\",      SQLITE_FCNTL_HAS_MOVED,       \"\"               },",
          "7298:       { \"lock_timeout\",   SQLITE_FCNTL_LOCK_TIMEOUT,    \"MILLISEC\"       },",
          "7299:     };",
          "7300:     int filectrl = -1;",
          "7301:     int iCtrl = -1;",
          "7304:     int n2, i;",
          "7305:     const char *zCmd = 0;",
          "7307:     open_db(p, 0);",
          "7308:     zCmd = nArg>=2 ? azArg[1] : \"help\";",
          "7311:     if( zCmd[0]=='-' && zCmd[1] ){",
          "7312:       zCmd++;",
          "7313:       if( zCmd[0]=='-' && zCmd[1] ) zCmd++;",
          "7314:     }",
          "7317:     if( strcmp(zCmd,\"help\")==0 ){",
          "7318:       utf8_printf(p->out, \"Available file-controls:\\n\");",
          "7319:       for(i=0; i<ArraySize(aCtrl); i++){",
          "7320:         utf8_printf(p->out, \"  .filectrl %s %s\\n\",",
          "7321:                     aCtrl[i].zCtrlName, aCtrl[i].zUsage);",
          "7322:       }",
          "7323:       rc = 1;",
          "7324:       goto meta_command_exit;",
          "7325:     }",
          "7329:     n2 = strlen30(zCmd);",
          "7330:     for(i=0; i<ArraySize(aCtrl); i++){",
          "7331:       if( strncmp(zCmd, aCtrl[i].zCtrlName, n2)==0 ){",
          "7332:         if( filectrl<0 ){",
          "7333:           filectrl = aCtrl[i].ctrlCode;",
          "7334:           iCtrl = i;",
          "7335:         }else{",
          "7336:           utf8_printf(stderr, \"Error: ambiguous file-control: \\\"%s\\\"\\n\"",
          "7337:                               \"Use \\\".filectrl --help\\\" for help\\n\", zCmd);",
          "7338:           rc = 1;",
          "7339:           goto meta_command_exit;",
          "7340:         }",
          "7341:       }",
          "7342:     }",
          "7343:     if( filectrl<0 ){",
          "7344:       utf8_printf(stderr,\"Error: unknown file-control: %s\\n\"",
          "7345:                          \"Use \\\".filectrl --help\\\" for help\\n\", zCmd);",
          "7346:     }else{",
          "7347:       switch(filectrl){",
          "7348:         case SQLITE_FCNTL_SIZE_LIMIT: {",
          "7349:           if( nArg!=2 && nArg!=3 ) break;",
          "7350:           iRes = nArg==3 ? integerValue(azArg[2]) : -1;",
          "7351:           sqlite3_file_control(p->db, 0, SQLITE_FCNTL_SIZE_LIMIT, &iRes);",
          "7352:           isOk = 1;",
          "7353:           break;",
          "7354:         }",
          "7355:         case SQLITE_FCNTL_LOCK_TIMEOUT:",
          "7356:         case SQLITE_FCNTL_CHUNK_SIZE: {",
          "7357:           int x;",
          "7358:           if( nArg!=3 ) break;",
          "7359:           x = (int)integerValue(azArg[2]);",
          "7360:           sqlite3_file_control(p->db, 0, filectrl, &x);",
          "7361:           isOk = 2;",
          "7362:           break;",
          "7363:         }",
          "7364:         case SQLITE_FCNTL_PERSIST_WAL:",
          "7365:         case SQLITE_FCNTL_POWERSAFE_OVERWRITE: {",
          "7366:           int x;",
          "7367:           if( nArg!=2 && nArg!=3 ) break;",
          "7368:           x = nArg==3 ? booleanValue(azArg[2]) : -1;",
          "7369:           sqlite3_file_control(p->db, 0, filectrl, &x);",
          "7370:           iRes = x;",
          "7371:           isOk = 1;",
          "7372:           break;",
          "7373:         }",
          "7374:         case SQLITE_FCNTL_HAS_MOVED: {",
          "7375:           int x;",
          "7376:           if( nArg!=2 ) break;",
          "7377:           sqlite3_file_control(p->db, 0, filectrl, &x);",
          "7378:           iRes = x;",
          "7379:           isOk = 1;",
          "7380:           break;",
          "7381:         }",
          "7382:         case SQLITE_FCNTL_TEMPFILENAME: {",
          "7383:           char *z = 0;",
          "7384:           if( nArg!=2 ) break;",
          "7385:           sqlite3_file_control(p->db, 0, filectrl, &z);",
          "7386:           if( z ){",
          "7387:             utf8_printf(p->out, \"%s\\n\", z);",
          "7388:             sqlite3_free(z);",
          "7389:           }",
          "7390:           isOk = 2;",
          "7391:           break;",
          "7392:         }",
          "7393:       }",
          "7394:     }",
          "7395:     if( isOk==0 && iCtrl>=0 ){",
          "7396:       utf8_printf(p->out, \"Usage: .filectrl %s %s\\n\", zCmd,aCtrl[iCtrl].zUsage);",
          "7397:       rc = 1;",
          "7398:     }else if( isOk==1 ){",
          "7399:       raw_printf(p->out, \"%lld\\n\", iRes);",
          "7400:     }",
          "7401:   }else",
          "",
          "---------------"
        ]
      }
    }
  ]
}