{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e03b42d1bb41f4e897a4f025f89db70582964814",
      "candidate_info": {
        "commit_hash": "e03b42d1bb41f4e897a4f025f89db70582964814",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e03b42d1bb41f4e897a4f025f89db70582964814",
        "files": [
          "test/simple/test-eio-limit.js"
        ],
        "message": "Add failing test-eio-limit.js",
        "before_after_code_files": [
          "test/simple/test-eio-limit.js||test/simple/test-eio-limit.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-eio-limit.js||test/simple/test-eio-limit.js": [
          "File: test/simple/test-eio-limit.js -> test/simple/test-eio-limit.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var assert = require('assert'),",
          "2:     zlib = require('zlib'),",
          "3:     started = 0,",
          "4:     done = 0;",
          "6: function repeat(fn) {",
          "7:   if (started != 0) {",
          "8:     assert.ok(started - done < 100)",
          "9:   }",
          "11:   process.nextTick(function() {",
          "12:     fn();",
          "13:     repeat(fn);",
          "14:   });",
          "15: }",
          "17: repeat(function() {",
          "18:   if (started > 1000) return process.exit(0);",
          "20:   for (var i = 0; i < 30; i++) {",
          "21:     started++;",
          "22:     var deflate = zlib.createDeflate();",
          "23:     deflate.write('123');",
          "24:     deflate.flush(function() {",
          "25:       done++;",
          "26:     });",
          "27:   }",
          "28: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffcdcc7ff067935642f37984dc8974aed9b4811f",
      "candidate_info": {
        "commit_hash": "ffcdcc7ff067935642f37984dc8974aed9b4811f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ffcdcc7ff067935642f37984dc8974aed9b4811f",
        "files": [
          "Makefile",
          "tools/doctool/doctool.js",
          "tools/doctool/markdown.js"
        ],
        "message": "Use new doc generation tool\n\nConflicts:\n\n\tMakefile",
        "before_after_code_files": [
          "tools/doctool/doctool.js||tools/doctool/doctool.js",
          "tools/doctool/markdown.js||tools/doctool/markdown.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/doctool/doctool.js||tools/doctool/doctool.js": [
          "File: tools/doctool/doctool.js -> tools/doctool/doctool.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/doctool/markdown.js||tools/doctool/markdown.js": [
          "File: tools/doctool/markdown.js -> tools/doctool/markdown.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d91bc7cb0977b058750183199906590d95003fc0",
      "candidate_info": {
        "commit_hash": "d91bc7cb0977b058750183199906590d95003fc0",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d91bc7cb0977b058750183199906590d95003fc0",
        "files": [
          "lib/path.js",
          "src/node.cc"
        ],
        "message": "Windows: get rid of process._cwdForDrive()",
        "before_after_code_files": [
          "lib/path.js||lipath.js",
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/path.js||lipath.js": [
          "File: lib/path.js -> lipath.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:       }",
          "",
          "[Removed Lines]",
          "99:         path = process._cwdForDrive(resolvedDevice[0]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1262: }",
          "1336: static Handle<Value> Umask(const Arguments& args) {",
          "1337:   HandleScope scope;",
          "1338:   unsigned int old;",
          "",
          "[Removed Lines]",
          "1265: #ifdef _WIN32",
          "1266: static Handle<Value> CwdForDrive(const Arguments& args) {",
          "1267:   HandleScope scope;",
          "1269:   if (args.Length() < 1) {",
          "1270:     Local<Value> exception = Exception::Error(",
          "1271:         String::New(\"process._cwdForDrive takes exactly 1 argument.\"));",
          "1272:     return ThrowException(exception);",
          "1273:   }",
          "1275:   Local<String> driveLetter = args[0]->ToString();",
          "1276:   if (driveLetter->Length() != 1) {",
          "1277:     Local<Value> exception = Exception::Error(",
          "1278:         String::New(\"Drive name should be 1 character.\"));",
          "1279:     return ThrowException(exception);",
          "1280:   }",
          "1282:   char drive;",
          "1284:   driveLetter->WriteAscii(&drive, 0, 1, 0);",
          "1285:   if (drive >= 'a' && drive <= 'z') {",
          "1287:     drive += 'A' - 'a';",
          "1288:   } else if (drive < 'A' || drive > 'Z') {",
          "1290:     Local<Value> exception = Exception::Error(",
          "1291:         String::New(\"Drive name should be a letter.\"));",
          "1292:     return ThrowException(exception);",
          "1293:   }",
          "1295:   WCHAR env_key[] = L\"=X:\";",
          "1296:   env_key[1] = (WCHAR) drive;",
          "1298:   DWORD len = GetEnvironmentVariableW(env_key, NULL, 0);",
          "1299:   if (len == 0 && (GetLastError() == ERROR_ENVVAR_NOT_FOUND ||",
          "1300:       GetLastError() == ERROR_SUCCESS)) {",
          "1302:     Local<String> cwd = String::Concat(String::New(&drive, 1),",
          "1303:                                        String::New(\":\\\\\"));",
          "1304:     return scope.Close(cwd);",
          "1306:   } else if (len == 0) {",
          "1308:     Local<Value> exception = Exception::Error(",
          "1309:       String::New(winapi_strerror(GetLastError())));",
          "1310:     return ThrowException(exception);",
          "1311:   }",
          "1313:   WCHAR* buffer = new WCHAR[len];",
          "1314:   if (buffer == NULL) {",
          "1315:     Local<Value> exception = Exception::Error(",
          "1316:         String::New(\"Out of memory.\"));",
          "1317:     return ThrowException(exception);",
          "1318:   }",
          "1320:   DWORD len2 = GetEnvironmentVariableW(env_key, buffer, len);",
          "1321:   if ((len2 == 0 && GetLastError() != ERROR_SUCCESS) || len2 >= len) {",
          "1323:     delete[] buffer;",
          "1324:     Local<Value> exception = Exception::Error(",
          "1325:       String::New(winapi_strerror(GetLastError())));",
          "1326:     return ThrowException(exception);",
          "1327:   }",
          "1329:   Local<String> cwd = String::New(reinterpret_cast<uint16_t*>(buffer), len2);",
          "1330:   delete[] buffer;",
          "1331:   return scope.Close(cwd);",
          "1332: }",
          "1333: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2177:   NODE_SET_METHOD(process, \"chdir\", Chdir);",
          "2178:   NODE_SET_METHOD(process, \"cwd\", Cwd);",
          "2184:   NODE_SET_METHOD(process, \"umask\", Umask);",
          "2186: #ifdef __POSIX__",
          "",
          "[Removed Lines]",
          "2180: #ifdef _WIN32",
          "2181:   NODE_SET_METHOD(process, \"_cwdForDrive\", CwdForDrive);",
          "2182: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec79acb3a6166e30f0bf271fbbfda1fb575b3321",
      "candidate_info": {
        "commit_hash": "ec79acb3a6166e30f0bf271fbbfda1fb575b3321",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ec79acb3a6166e30f0bf271fbbfda1fb575b3321",
        "files": [
          "src/node_version.h"
        ],
        "message": "working on 0.7.3 now",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 7",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "31: #define NODE_PATCH_VERSION 2",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "31: #define NODE_PATCH_VERSION 3",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f210530f46e8ddbd9e7cc0d0c37778888c27f526",
      "candidate_info": {
        "commit_hash": "f210530f46e8ddbd9e7cc0d0c37778888c27f526",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f210530f46e8ddbd9e7cc0d0c37778888c27f526",
        "files": [
          "lib/tls.js"
        ],
        "message": "tls: use slab allocator",
        "before_after_code_files": [
          "lib/tls.js||litls.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:   }",
          "78: }",
          "81: function CryptoStream(pair) {",
          "82:   Stream.call(this);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   this._pending = [];",
          "91:   this._pendingCallbacks = [];",
          "92:   this._pendingBytes = 0;",
          "93: }",
          "94: util.inherits(CryptoStream, Stream);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "339:   }",
          "341:   while (!this._paused) {",
          "350:     do {",
          "355:       if (this.pair.ssl && this.pair.ssl.error) {",
          "356:         this.pair.error();",
          "",
          "[Removed Lines]",
          "342:     var chunkBytes = 0;",
          "343:     if (!this._pool || (this._poolStart >= this._poolEnd)) {",
          "344:       this._pool = new Buffer(16 * 4096);",
          "345:       this._poolStart = 0;",
          "346:       this._poolEnd = this._pool.length;",
          "347:     }",
          "348:     var start = this._poolStart;",
          "351:       chunkBytes = this._pusher(this._pool,",
          "352:                                 this._poolStart,",
          "353:                                 this._poolEnd - this._poolStart);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "360:       this.pair.maybeInitFinished();",
          "370:     assert(bytesRead >= 0);",
          "",
          "[Removed Lines]",
          "362:       if (chunkBytes >= 0) {",
          "363:         this._poolStart += chunkBytes;",
          "364:       }",
          "366:     } while (chunkBytes > 0 && this._poolStart < this._poolEnd);",
          "368:     var bytesRead = this._poolStart - start;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "377:       return;",
          "378:     }",
          "382:     if (this === this.pair.cleartext) {",
          "383:       debug('cleartext emit \"data\" with ' + bytesRead + ' bytes');",
          "",
          "[Removed Lines]",
          "380:     var chunk = this._pool.slice(start, this._poolStart);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "393:     }",
          "397:   }",
          "398: };",
          "",
          "[Removed Lines]",
          "396:     if (this.ondata) this.ondata(this._pool, start, this._poolStart);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}