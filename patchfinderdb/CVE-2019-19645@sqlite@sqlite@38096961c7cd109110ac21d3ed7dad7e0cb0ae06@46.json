{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f8a488bb6b89b1657badfff3e77add3be8fc9333",
      "candidate_info": {
        "commit_hash": "f8a488bb6b89b1657badfff3e77add3be8fc9333",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f8a488bb6b89b1657badfff3e77add3be8fc9333",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5vocab2.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem causing a crash if an fts5vocab table was created to query an fts3/4 FTS index.\n\nFossilOrigin-Name: 9cd64ce453e4435d80117b8610c22a0a4b53cd6e84b39815e70e684f6b0295c8",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5vocab2.test||ext/fts5/test/fts5vocab2.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2245: ){",
          "2246:   Fts5Cursor *pCsr;",
          "2249:   pCsr = fts5CursorFromCsrid(pGlobal, iCsrId);",
          "2254: }",
          "",
          "[Removed Lines]",
          "2247:   Fts5Table *pTab;",
          "2250:   pTab = (Fts5Table*)pCsr->base.pVtab;",
          "2253:   return pTab->pIndex;",
          "",
          "[Added Lines]",
          "2248:   if( pCsr ){",
          "2249:     Fts5Table *pTab = (Fts5Table*)pCsr->base.pVtab;",
          "2251:     return pTab->pIndex;",
          "2252:   }",
          "2253:   return 0;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5vocab2.test||ext/fts5/test/fts5vocab2.test": [
          "File: ext/fts5/test/fts5vocab2.test -> ext/fts5/test/fts5vocab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:   SELECT * FROM v1;",
          "203: } {}",
          "205: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: #-------------------------------------------------------------------------",
          "206: #",
          "207: reset_db",
          "208: do_execsql_test 4.0 {",
          "209:   CREATE VIRTUAL TABLE v1 USING fts5vocab(nosuchtable, col);",
          "210: }",
          "212: do_catchsql_test 4.1 {",
          "213:   SELECT * FROM v1 WHERE term=='nosuchterm';",
          "214: } {1 {no such fts5 table: main.nosuchtable}}",
          "216: do_execsql_test 4.2.1 {",
          "217:   CREATE TABLE nosuchtable(nosuchtable, y, z);",
          "218: }",
          "219: do_catchsql_test 4.2.2 {",
          "220:   SELECT * FROM v1 WHERE term=='nosuchterm';",
          "221: } {1 {no such fts5 table: main.nosuchtable}}",
          "223: ifcapable fts3 {",
          "224:   do_execsql_test 4.3.1 {",
          "225:     DROP TABLE nosuchtable;",
          "226:     CREATE VIRTUAL TABLE nosuchtable USING fts3(a, b);",
          "227:   } {}",
          "228:   do_catchsql_test 4.3.2 {",
          "229:     SELECT * FROM v1 WHERE term=='nosuchterm';",
          "230:   } {1 {no such fts5 table: main.nosuchtable}}",
          "231:   do_catchsql_test 4.3.3 {",
          "232:     INSERT INTO nosuchtable VALUES('id', '*id');",
          "233:     SELECT * FROM v1 WHERE term=='nosuchterm';",
          "234:   } {1 {no such fts5 table: main.nosuchtable}}",
          "235: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 65e50706a017751d72d0f9c7f575955194977decd0acf13aaca90c3cb925f20e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ea00d744e75af04c9368bb9128b58ba21825e17",
      "candidate_info": {
        "commit_hash": "8ea00d744e75af04c9368bb9128b58ba21825e17",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8ea00d744e75af04c9368bb9128b58ba21825e17",
        "files": [
          "ext/rbu/rbupartial.test",
          "ext/rbu/sqlite3rbu.c",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/build.c",
          "src/printf.c",
          "src/sqliteInt.h",
          "src/test4.c",
          "src/util.c",
          "src/vdbemem.c",
          "test/sqllimits1.test",
          "tool/omittest.tcl"
        ],
        "message": "Merge trunk changes into this branch.\n\nFossilOrigin-Name: d805fc0cf1c4ef07a7bc947f75828931e3788d0e64730caab3b42ae58009a194",
        "before_after_code_files": [
          "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/build.c||src/build.c",
          "src/printf.c||src/printf.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test4.c||src/test4.c",
          "src/util.c||src/util.c",
          "src/vdbemem.c||src/vdbemem.c",
          "test/sqllimits1.test||test/sqllimits1.test",
          "tool/omittest.tcl||tool/omittest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test": [
          "File: ext/rbu/rbupartial.test -> ext/rbu/rbupartial.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 April 11",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname [info script]] rbu_common.tcl]",
          "14: set ::testprefix rbupartial",
          "16: db close",
          "17: sqlite3_shutdown",
          "18: sqlite3_config_uri 1",
          "20: foreach {tn without_rowid a b c d} {",
          "21:   1 \"\"              a b c d",
          "22:   2 \"WITHOUT ROWID\" aaa bbb ccc ddd",
          "23:   3 \"WITHOUT ROWID\" \"\\\"hello\\\"\" {\"one'two\"}  {[c]} ddd",
          "24:   4 \"WITHOUT ROWID\" {`a b`} {\"one'two\"}  {[c c c]} ddd",
          "25:   5 \"\" a b c {\"d\"\"d\"}",
          "26:   6 \"\" {'one''two'} b {\"c\"\"c\"} {\"d\"\"d\"}",
          "27: } {",
          "28:   eval [string map [list \\",
          "29:     %WITHOUT_ROWID% $without_rowid %A% $a %B% $b %C% $c %D% $d",
          "30:   ] {",
          "31:   reset_db",
          "32:   do_execsql_test $tn.1.0 {",
          "33:     CREATE TABLE t1(%A% PRIMARY KEY, %B%, %C%, %D%) %WITHOUT_ROWID% ;",
          "34:     CREATE INDEX i1b  ON t1(%B%);",
          "35:     CREATE INDEX i1b2 ON t1(%B%) WHERE %C%<5;",
          "36:     CREATE INDEX i1b3 ON t1(%B%) WHERE %C%>=5;",
          "38:     CREATE INDEX i1c  ON t1(%C%);",
          "39:     CREATE INDEX i1c2 ON t1(%C%) WHERE %C% IS NULL;",
          "40:     CREATE INDEX i1c3 ON t1(%C%) WHERE %C% IS NOT NULL;",
          "42:     CREATE INDEX i1c4 ON t1(%C%) WHERE %D% < 'd';",
          "43:   }",
          "45:   do_execsql_test $tn.1.1 {",
          "46:     INSERT INTO t1 VALUES(0, NULL, NULL, 'a');",
          "47:     INSERT INTO t1 VALUES(1, 2, 3, 'b');",
          "48:     INSERT INTO t1 VALUES(4, 5, 6, 'c');",
          "49:     INSERT INTO t1 VALUES(7, 8, 9, 'd');",
          "50:   }",
          "52:   forcedelete rbu.db",
          "53:   do_test $tn.1.2 {",
          "54:     sqlite3 rbu rbu.db",
          "55:     rbu eval {",
          "56:       CREATE TABLE data_t1(%A%, %B%, %C%, %D%, rbu_control);",
          "58:       INSERT INTO data_t1 VALUES(10, 11, 12, 'e', 0);",
          "59:       INSERT INTO data_t1 VALUES(13, 14, NULL, 'f', 0);",
          "61:       INSERT INTO data_t1 VALUES(0, NULL, NULL, NULL, 1);",
          "62:       INSERT INTO data_t1 VALUES(4, NULL, NULL, NULL, 1);",
          "64:       INSERT INTO data_t1 VALUES(7, NULL, 4, NULL, '..x.');",
          "65:       INSERT INTO data_t1 VALUES(1, 10, NULL, NULL, '.xx.');",
          "66:     }",
          "67:     rbu close",
          "68:   } {}",
          "70:   do_test $tn.1.3 {",
          "71:     run_rbu test.db rbu.db",
          "72:     execsql { PRAGMA integrity_check }",
          "73:   } {ok}",
          "75:   do_execsql_test $tn.1.4 {",
          "76:     SELECT * FROM t1 ORDER BY %A%;",
          "77:   } {",
          "78:     1 10 {} b   7 8 4 d   10 11 12 e   13 14 {} f",
          "79:   }",
          "81:   set step 0",
          "82:   do_rbu_vacuum_test $tn.1.5 0",
          "83:   }]",
          "84: }",
          "86: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1250:   pIter->nIndex = 0;",
          "1251:   while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pList) ){",
          "1252:     const char *zIdx = (const char*)sqlite3_column_text(pList, 1);",
          "1253:     sqlite3_stmt *pXInfo = 0;",
          "1254:     if( zIdx==0 ) break;",
          "1255:     p->rc = prepareFreeAndCollectError(p->dbMain, &pXInfo, &p->zErrmsg,",
          "1256:         sqlite3_mprintf(\"PRAGMA main.index_xinfo = %Q\", zIdx)",
          "1257:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1258:     int bPartial = sqlite3_column_int(pList, 4);",
          "1261:     if( bPartial ){",
          "1262:       memset(pIter->abIndexed, 0x01, sizeof(u8)*pIter->nTblCol);",
          "1263:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1958:   }",
          "1959: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1970: static char *rbuObjIterGetIndexWhere(sqlite3rbu *p, RbuObjIter *pIter){",
          "1971:   sqlite3_stmt *pStmt = 0;",
          "1972:   int rc = p->rc;",
          "1973:   char *zRet = 0;",
          "1975:   if( rc==SQLITE_OK ){",
          "1976:     rc = prepareAndCollectError(p->dbMain, &pStmt, &p->zErrmsg,",
          "1977:         \"SELECT trim(sql) FROM sqlite_master WHERE type='index' AND name=?\"",
          "1978:     );",
          "1979:   }",
          "1980:   if( rc==SQLITE_OK ){",
          "1981:     int rc2;",
          "1982:     rc = sqlite3_bind_text(pStmt, 1, pIter->zIdx, -1, SQLITE_STATIC);",
          "1983:     if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "1984:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "1985:       if( zSql ){",
          "1987:         int i;",
          "1988:         for(i=0; zSql[i]; i++){",
          "1989:           char c = zSql[i];",
          "1990:           if( c=='(' ){",
          "1991:             nParen++;",
          "1992:           }",
          "1993:           else if( c==')' ){",
          "1994:             nParen--;",
          "1995:             if( nParen==0 ){",
          "1996:               i++;",
          "1997:               break;",
          "1998:             }",
          "1999:           }else if( c=='\"' || c=='\\'' || c=='`' ){",
          "2000:             for(i++; 1; i++){",
          "2001:               if( zSql[i]==c ){",
          "2002:                 if( zSql[i+1]!=c ) break;",
          "2003:                 i++;",
          "2004:               }",
          "2005:             }",
          "2006:           }else if( c=='[' ){",
          "2007:             for(i++; 1; i++){",
          "2008:               if( zSql[i]==']' ) break;",
          "2009:             }",
          "2010:           }",
          "2011:         }",
          "2012:         if( zSql[i] ){",
          "2013:           zRet = rbuStrndup(&zSql[i], &rc);",
          "2014:         }",
          "2015:       }",
          "2016:     }",
          "2018:     rc2 = sqlite3_finalize(pStmt);",
          "2019:     if( rc==SQLITE_OK ) rc = rc2;",
          "2020:   }",
          "2022:   p->rc = rc;",
          "2023:   return zRet;",
          "2024: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1989:       char *zBind = 0;",
          "1990:       int nBind = 0;",
          "1992:       assert( pIter->eType!=RBU_PK_VTAB );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2055:       char *zPart = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1994:           p, pIter, &zImposterCols, &zImposterPK, &zWhere, &nBind",
          "1995:       );",
          "1996:       zBind = rbuObjIterGetBindlist(p, nBind);",
          "1999:       sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->dbMain, \"main\", 0, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2063:       zPart = rbuObjIterGetIndexWhere(p, pIter);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2026:         char *zSql;",
          "2027:         if( rbuIsVacuum(p) ){",
          "2028:           zSql = sqlite3_mprintf(",
          "2030:               zCollist,",
          "2031:               pIter->zDataTbl,",
          "2033:           );",
          "2034:         }else",
          "2036:         if( pIter->eType==RBU_PK_EXTERNAL || pIter->eType==RBU_PK_NONE ){",
          "2037:           zSql = sqlite3_mprintf(",
          "2039:               zCollist, p->zStateDb, pIter->zDataTbl,",
          "2041:           );",
          "2042:         }else{",
          "2043:           zSql = sqlite3_mprintf(",
          "2045:               \"UNION ALL \"",
          "2046:               \"SELECT %s, rbu_control FROM '%q' \"",
          "2048:               \"ORDER BY %s%s\",",
          "2050:               zCollist, pIter->zDataTbl,",
          "2051:               zCollist, zLimit",
          "2052:           );",
          "2053:         }",
          "",
          "[Removed Lines]",
          "2029:               \"SELECT %s, 0 AS rbu_control FROM '%q' ORDER BY %s%s\",",
          "2032:               zCollist, zLimit",
          "2038:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' ORDER BY %s%s\",",
          "2040:               zCollist, zLimit",
          "2044:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' \"",
          "2047:               \"WHERE typeof(rbu_control)='integer' AND rbu_control!=1 \"",
          "2049:               zCollist, p->zStateDb, pIter->zDataTbl,",
          "",
          "[Added Lines]",
          "2096:               \"SELECT %s, 0 AS rbu_control FROM '%q' %s ORDER BY %s%s\",",
          "2099:               zPart, zCollist, zLimit",
          "2105:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' %s ORDER BY %s%s\",",
          "2107:               zPart, zCollist, zLimit",
          "2111:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' %s \"",
          "2114:               \"%s %s typeof(rbu_control)='integer' AND rbu_control!=1 \"",
          "2116:               zCollist, p->zStateDb, pIter->zDataTbl, zPart,",
          "2118:               zPart,",
          "2119:               (zPart ? \"AND\" : \"WHERE\"),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2058:       sqlite3_free(zImposterPK);",
          "2059:       sqlite3_free(zWhere);",
          "2060:       sqlite3_free(zBind);",
          "2061:     }else{",
          "2062:       int bRbuRowid = (pIter->eType==RBU_PK_VTAB)",
          "2063:                     ||(pIter->eType==RBU_PK_NONE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2130:       sqlite3_free(zPart);",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:   $(TOP)/ext/misc/totype.c \\",
          "379:   $(TOP)/ext/misc/unionvtab.c \\",
          "380:   $(TOP)/ext/misc/wholenumber.c \\",
          "382:   $(TOP)/ext/misc/zipfile.c \\",
          "383:   $(TOP)/ext/fts5/fts5_tcl.c \\",
          "384:   $(TOP)/ext/fts5/fts5_test_mi.c \\",
          "",
          "[Removed Lines]",
          "381:   $(TOP)/ext/misc/vfslog.c \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ec9c4f6d8da25dcc834812c2bb24bda1017833b1c572bdbbf87f0191e1310706",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4398:   StrAccum errMsg;",
          "4399:   Table *pTab = pIdx->pTable;",
          "4402:   if( pIdx->aColExpr ){",
          "4403:     sqlite3_str_appendf(&errMsg, \"index '%q'\", pIdx->zName);",
          "4404:   }else{",
          "",
          "[Removed Lines]",
          "4401:   sqlite3StrAccumInit(&errMsg, pParse->db, 0, 0, 200);",
          "",
          "[Added Lines]",
          "4401:   sqlite3StrAccumInit(&errMsg, pParse->db, 0, 0,",
          "4402:                       pParse->db->aLimit[SQLITE_LIMIT_LENGTH]);",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:   assert( eError==SQLITE_NOMEM || eError==SQLITE_TOOBIG );",
          "138:   p->accError = eError;",
          "139:   if( p->mxAlloc ) sqlite3_str_reset(p);",
          "140: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:   if( eError==SQLITE_TOOBIG ) sqlite3ErrorToParser(p->db, eError);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3835: void sqlite3SetString(char **, sqlite3*, const char*);",
          "3836: void sqlite3ErrorMsg(Parse*, const char*, ...);",
          "3837: void sqlite3Dequote(char*);",
          "3838: void sqlite3DequoteExpr(Expr*);",
          "3839: void sqlite3TokenInit(Token*,char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3837: int sqlite3ErrorToParser(sqlite3*,int);",
          "",
          "---------------"
        ],
        "src/test4.c||src/test4.c": [
          "File: src/test4.c -> src/test4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   Thread *p = (Thread*)pArg;",
          "69:   if( p->db ){",
          "70:     sqlite3_close(p->db);",
          "",
          "[Removed Lines]",
          "67: static void *thread_main(void *pArg){",
          "",
          "[Added Lines]",
          "67: static void *test_thread_main(void *pArg){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:   threadset[i].zFilename = sqlite3_mprintf(\"%s\", argv[2]);",
          "152:   threadset[i].opnum = 1;",
          "153:   threadset[i].completed = 0;",
          "155:   if( rc ){",
          "156:     Tcl_AppendResult(interp, \"failed to create the thread\", 0);",
          "157:     sqlite3_free(threadset[i].zFilename);",
          "",
          "[Removed Lines]",
          "154:   rc = pthread_create(&x, 0, thread_main, &threadset[i]);",
          "",
          "[Added Lines]",
          "154:   rc = pthread_create(&x, 0, test_thread_main, &threadset[i]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:   while( p->opnum>p->completed ) sched_yield();",
          "170: }",
          "",
          "[Removed Lines]",
          "168: static void thread_wait(Thread *p){",
          "",
          "[Added Lines]",
          "168: static void test_thread_wait(Thread *p){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "194:     return TCL_ERROR;",
          "195:   }",
          "197:   return TCL_OK;",
          "198: }",
          "205:   p->xOp = 0;",
          "206:   p->opnum++;",
          "208:   sqlite3_free(p->zArg);",
          "209:   p->zArg = 0;",
          "210:   sqlite3_free(p->zFilename);",
          "",
          "[Removed Lines]",
          "196:   thread_wait(&threadset[i]);",
          "203: static void stop_thread(Thread *p){",
          "204:   thread_wait(p);",
          "207:   thread_wait(p);",
          "",
          "[Added Lines]",
          "196:   test_thread_wait(&threadset[i]);",
          "203: static void test_stop_thread(Thread *p){",
          "204:   test_thread_wait(p);",
          "207:   test_thread_wait(p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "233:   }",
          "234:   if( argv[1][0]=='*' && argv[1][1]==0 ){",
          "235:     for(i=0; i<N_THREAD; i++){",
          "237:     }",
          "238:   }else{",
          "239:     i = parse_thread_id(interp, argv[1]);",
          "",
          "[Removed Lines]",
          "236:       if( threadset[i].busy ) stop_thread(&threadset[i]);",
          "",
          "[Added Lines]",
          "236:       if( threadset[i].busy ) test_stop_thread(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242:       Tcl_AppendResult(interp, \"no such thread\", 0);",
          "243:       return TCL_ERROR;",
          "244:     }",
          "246:   }",
          "247:   return TCL_OK;",
          "248: }",
          "",
          "[Removed Lines]",
          "245:     stop_thread(&threadset[i]);",
          "",
          "[Added Lines]",
          "245:     test_stop_thread(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "273:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "274:     return TCL_ERROR;",
          "275:   }",
          "277:   sqlite3_snprintf(sizeof(zBuf), zBuf, \"%d\", threadset[i].argc);",
          "278:   Tcl_AppendResult(interp, zBuf, 0);",
          "279:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "276:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "276:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "306:     return TCL_ERROR;",
          "307:   }",
          "308:   if( Tcl_GetInt(interp, argv[2], &n) ) return TCL_ERROR;",
          "310:   if( n<0 || n>=threadset[i].argc ){",
          "311:     Tcl_AppendResult(interp, \"column number out of range\", 0);",
          "312:     return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "309:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "309:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "342:     return TCL_ERROR;",
          "343:   }",
          "344:   if( Tcl_GetInt(interp, argv[2], &n) ) return TCL_ERROR;",
          "346:   if( n<0 || n>=threadset[i].argc ){",
          "347:     Tcl_AppendResult(interp, \"column number out of range\", 0);",
          "348:     return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "345:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "345:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "377:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "378:     return TCL_ERROR;",
          "379:   }",
          "381:   zName = sqlite3ErrName(threadset[i].rc);",
          "382:   Tcl_AppendResult(interp, zName, 0);",
          "383:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "380:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "380:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "408:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "409:     return TCL_ERROR;",
          "410:   }",
          "412:   Tcl_AppendResult(interp, threadset[i].zErr, 0);",
          "413:   return TCL_OK;",
          "414: }",
          "",
          "[Removed Lines]",
          "411:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "411:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "452:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "453:     return TCL_ERROR;",
          "454:   }",
          "456:   threadset[i].xOp = do_compile;",
          "457:   sqlite3_free(threadset[i].zArg);",
          "458:   threadset[i].zArg = sqlite3_mprintf(\"%s\", argv[2]);",
          "",
          "[Removed Lines]",
          "455:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "455:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "505:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "506:     return TCL_ERROR;",
          "507:   }",
          "509:   threadset[i].xOp = do_step;",
          "510:   threadset[i].opnum++;",
          "511:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "508:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "508:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "547:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "548:     return TCL_ERROR;",
          "549:   }",
          "551:   threadset[i].xOp = do_finalize;",
          "552:   sqlite3_free(threadset[i].zArg);",
          "553:   threadset[i].zArg = 0;",
          "",
          "[Removed Lines]",
          "550:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "550:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "579:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "580:     return TCL_ERROR;",
          "581:   }",
          "583:   j = parse_thread_id(interp, argv[2]);",
          "584:   if( j<0 ) return TCL_ERROR;",
          "585:   if( !threadset[j].busy ){",
          "586:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "587:     return TCL_ERROR;",
          "588:   }",
          "590:   temp = threadset[i].db;",
          "591:   threadset[i].db = threadset[j].db;",
          "592:   threadset[j].db = temp;",
          "",
          "[Removed Lines]",
          "582:   thread_wait(&threadset[i]);",
          "589:   thread_wait(&threadset[j]);",
          "",
          "[Added Lines]",
          "582:   test_thread_wait(&threadset[i]);",
          "589:   test_thread_wait(&threadset[j]);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "620:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "621:     return TCL_ERROR;",
          "622:   }",
          "624:   sqlite3TestMakePointerStr(interp, zBuf, threadset[i].db);",
          "625:   threadset[i].db = 0;",
          "626:   Tcl_AppendResult(interp, zBuf, (char*)0);",
          "",
          "[Removed Lines]",
          "623:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "623:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "651:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "652:     return TCL_ERROR;",
          "653:   }",
          "655:   assert( !threadset[i].db );",
          "656:   threadset[i].db = (sqlite3*)sqlite3TestTextToPtr(argv[2]);",
          "657:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "654:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "654:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "683:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "684:     return TCL_ERROR;",
          "685:   }",
          "687:   sqlite3TestMakePointerStr(interp, zBuf, threadset[i].pStmt);",
          "688:   threadset[i].pStmt = 0;",
          "689:   Tcl_AppendResult(interp, zBuf, (char*)0);",
          "",
          "[Removed Lines]",
          "686:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "686:   test_thread_wait(&threadset[i]);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:   }",
          "234: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: int sqlite3ErrorToParser(sqlite3 *db, int errCode){",
          "242:   Parse *pParse;",
          "243:   if( db==0 || (pParse = db->pParse)==0 ) return errCode;",
          "244:   pParse->rc = errCode;",
          "245:   pParse->nErr++;",
          "246:   return errCode;",
          "247: }",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:   testcase( bPreserve && pMem->z==0 );",
          "201:   assert( pMem->szMalloc==0",
          "",
          "[Removed Lines]",
          "195:   assert( bPreserve==0",
          "196:        || pMem->flags&(MEM_Blob|MEM_Str)",
          "197:        || MemNullNochng(pMem)",
          "198:   );",
          "",
          "[Added Lines]",
          "195:   assert( bPreserve==0 || pMem->flags&(MEM_Blob|MEM_Str) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:   nByte = pMem->n + pMem->u.nZero;",
          "311:   if( nByte<=0 ){",
          "312:     nByte = 1;",
          "313:   }",
          "314:   if( sqlite3VdbeMemGrow(pMem, nByte, 1) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:     if( (pMem->flags & MEM_Blob)==0 ) return SQLITE_OK;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1065:       nAlloc += (enc==SQLITE_UTF8?1:2);",
          "1066:     }",
          "1067:     if( nByte>iLimit ){",
          "1069:     }",
          "1070:     testcase( nAlloc==0 );",
          "1071:     testcase( nAlloc==31 );",
          "",
          "[Removed Lines]",
          "1068:       return SQLITE_TOOBIG;",
          "",
          "[Added Lines]",
          "1066:       return sqlite3ErrorToParser(pMem->db, SQLITE_TOOBIG);",
          "",
          "---------------"
        ],
        "test/sqllimits1.test||test/sqllimits1.test": [
          "File: test/sqllimits1.test -> test/sqllimits1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "889: foreach {key value} [array get saved] {",
          "890:   catch {set $key $value}",
          "891: }",
          "892: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893: #-------------------------------------------------------------------------",
          "894: # At one point the following caused an assert() to fail.",
          "895: #",
          "896: sqlite3_limit db SQLITE_LIMIT_LENGTH 10000",
          "897: set nm [string repeat x 10000]",
          "898: do_catchsql_test sqllimits1-17.1 \"",
          "899:   CREATE TABLE $nm (x PRIMARY KEY)",
          "900: \" {1 {string or blob too big}}",
          "",
          "---------------"
        ],
        "tool/omittest.tcl||tool/omittest.tcl": [
          "File: tool/omittest.tcl -> tool/omittest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:     SQLITE_OMIT_BETWEEN_OPTIMIZATION \\",
          "193:     SQLITE_OMIT_BLOB_LITERAL \\",
          "194:     SQLITE_OMIT_BTREECOUNT \\",
          "196:     SQLITE_OMIT_CAST \\",
          "197:     SQLITE_OMIT_CHECK \\",
          "198:     SQLITE_OMIT_COMPILEOPTION_DIAGS \\",
          "199:     SQLITE_OMIT_COMPLETE \\",
          "200:     SQLITE_OMIT_COMPOUND_SELECT \\",
          "201:     SQLITE_OMIT_CTE \\",
          "202:     SQLITE_OMIT_DATETIME_FUNCS \\",
          "203:     SQLITE_OMIT_DECLTYPE \\",
          "204:     SQLITE_OMIT_DEPRECATED \\",
          "205:     SQLITE_OMIT_EXPLAIN \\",
          "206:     SQLITE_OMIT_FLAG_PRAGMAS \\",
          "207:     SQLITE_OMIT_FLOATING_POINT \\",
          "208:     SQLITE_OMIT_FOREIGN_KEY \\",
          "209:     SQLITE_OMIT_GET_TABLE \\",
          "210:     SQLITE_OMIT_INCRBLOB \\",
          "211:     SQLITE_OMIT_INTEGRITY_CHECK \\",
          "212:     SQLITE_OMIT_LIKE_OPTIMIZATION \\",
          "",
          "[Removed Lines]",
          "195:     SQLITE_OMIT_BUILTIN_TEST \\",
          "",
          "[Added Lines]",
          "200:     SQLITE_OMIT_CONFLICT_CLAUSE \\",
          "205:     SQLITE_OMIT_DISKIO \\",
          "211:     SQLITE_OMIT_HEX_INTEGER \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:     SQLITE_OMIT_LOCALTIME \\",
          "215:     SQLITE_OMIT_LOOKASIDE \\",
          "216:     SQLITE_OMIT_MEMORYDB \\",
          "217:     SQLITE_OMIT_OR_OPTIMIZATION \\",
          "218:     SQLITE_OMIT_PAGER_PRAGMAS \\",
          "219:     SQLITE_OMIT_PRAGMA \\",
          "220:     SQLITE_OMIT_PROGRESS_CALLBACK \\",
          "221:     SQLITE_OMIT_QUICKBALANCE \\",
          "222:     SQLITE_OMIT_REINDEX \\",
          "223:     SQLITE_OMIT_SCHEMA_PRAGMAS \\",
          "224:     SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS \\",
          "225:     SQLITE_OMIT_SHARED_CACHE \\",
          "226:     SQLITE_OMIT_SUBQUERY \\",
          "227:     SQLITE_OMIT_TCL_VARIABLE \\",
          "228:     SQLITE_OMIT_TEMPDB \\",
          "229:     SQLITE_OMIT_TRACE \\",
          "230:     SQLITE_OMIT_TRIGGER \\",
          "231:     SQLITE_OMIT_TRUNCATE_OPTIMIZATION \\",
          "233:     SQLITE_OMIT_UTF16 \\",
          "234:     SQLITE_OMIT_VACUUM \\",
          "235:     SQLITE_OMIT_VIEW \\",
          "236:     SQLITE_OMIT_VIRTUALTABLE \\",
          "237:     SQLITE_OMIT_WAL \\",
          "238:     SQLITE_OMIT_WSD \\",
          "239:     SQLITE_OMIT_XFER_OPT \\",
          "240:   ]",
          "",
          "[Removed Lines]",
          "232:     SQLITE_OMIT_UNIQUE_ENFORCEMENT \\",
          "",
          "[Added Lines]",
          "219:     SQLITE_OMIT_MEMORY_ALLOCATION \\",
          "222:     SQLITE_OMIT_PARSER_TRACE \\",
          "223:     SQLITE_OMIT_POPEN \\",
          "227:     SQLITE_OMIT_RANDOMNESS \\",
          "232:     SQLITE_OMIT_SHUTDOWN_DIRECTORIES \\",
          "236:     SQLITE_OMIT_TEST_CONTROL \\",
          "240:     SQLITE_OMIT_UPSERT \\",
          "246:     SQLITE_OMIT_WINDOWFUNC \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df82afc04efbf269f3d4663cec04147421310f56",
      "candidate_info": {
        "commit_hash": "df82afc04efbf269f3d4663cec04147421310f56",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/df82afc04efbf269f3d4663cec04147421310f56",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbemem.c"
        ],
        "message": "Make sure the OP_Concat opcode always correctly zero-terminates a UTF16 string, even if the input strings are ill-formed.  This is a followup to check-in [3a16ddf91f0c9c516a7] that fixes a case the previous check-in missed. Also add assert()s to prove correct zero termination.\n\nFossilOrigin-Name: d612fb7873cf59dfda18cabe45f674c37aa78a4587de3378b1840c99465a0269",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 05897ca48a40c6771ff83ba8ecc3a5c60dafddf58651c222dd8cf89b9fc7b077",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1501:   if( nByte>db->aLimit[SQLITE_LIMIT_LENGTH] ){",
          "1502:     goto too_big;",
          "1503:   }",
          "1505:     goto no_mem;",
          "1506:   }",
          "1507:   MemSetTypeFlag(pOut, MEM_Str);",
          "",
          "[Removed Lines]",
          "1504:   if( sqlite3VdbeMemGrow(pOut, (int)nByte+2, pOut==pIn2) ){",
          "",
          "[Added Lines]",
          "1504:   if( sqlite3VdbeMemGrow(pOut, (int)nByte+3, pOut==pIn2) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1515:   pIn1->flags = flags1;",
          "1516:   pOut->z[nByte]=0;",
          "1517:   pOut->z[nByte+1] = 0;",
          "1518:   pOut->flags |= MEM_Term;",
          "1519:   pOut->n = (int)nByte;",
          "1520:   pOut->enc = encoding;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1518:   pOut->z[nByte+2] = 0;",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:   char zBuf[100];",
          "141:   char *z;",
          "142:   int i, j, incr;",
          "143:   if( (p->flags & MEM_Str)==0 ) return 1;",
          "144:   if( (p->flags & (MEM_Int|MEM_Real|MEM_IntReal))==0 ) return 1;",
          "145:   vdbeMemRenderNum(sizeof(zBuf), zBuf, p);",
          "146:   z = p->z;",
          "",
          "[Removed Lines]",
          "139: int sqlite3VdbeMemConsistentDualRep(Mem *p){",
          "",
          "[Added Lines]",
          "142: int sqlite3VdbeMemValidStrRep(Mem *p){",
          "147:   if( p->flags & MEM_Term ){",
          "150:     if( p->z==p->zMalloc && p->szMalloc>0 ){",
          "151:       assert( p->enc==SQLITE_UTF8 || p->szMalloc >= ((p->n+1)&~1)+2 );",
          "152:       assert( p->enc!=SQLITE_UTF8 || p->szMalloc >= p->n+1 );",
          "153:     }",
          "154:     assert( p->z[p->n]==0 );",
          "155:     assert( p->enc==SQLITE_UTF8 || p->z[(p->n+1)&~1]==0 );",
          "156:     assert( p->enc==SQLITE_UTF8 || p->z[((p->n+1)&~1)+1]==0 );",
          "157:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1221:   assert(pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) || pVal->db==0",
          "1222:               || pVal->db->mallocFailed );",
          "1223:   if( pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) ){",
          "1225:     return pVal->z;",
          "1226:   }else{",
          "1227:     return 0;",
          "",
          "[Removed Lines]",
          "1224:     assert( sqlite3VdbeMemConsistentDualRep(pVal) );",
          "",
          "[Added Lines]",
          "1238:     assert( sqlite3VdbeMemValidStrRep(pVal) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1244:   assert( (enc&3)==(enc&~SQLITE_UTF16_ALIGNED) );",
          "1245:   assert( !sqlite3VdbeMemIsRowSet(pVal) );",
          "1246:   if( (pVal->flags&(MEM_Str|MEM_Term))==(MEM_Str|MEM_Term) && pVal->enc==enc ){",
          "1248:     return pVal->z;",
          "1249:   }",
          "1250:   if( pVal->flags&MEM_Null ){",
          "",
          "[Removed Lines]",
          "1247:     assert( sqlite3VdbeMemConsistentDualRep(pVal) );",
          "",
          "[Added Lines]",
          "1261:     assert( sqlite3VdbeMemValidStrRep(pVal) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5da9356e0295c97a86dc986131de475a0fd35cb",
      "candidate_info": {
        "commit_hash": "e5da9356e0295c97a86dc986131de475a0fd35cb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e5da9356e0295c97a86dc986131de475a0fd35cb",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c",
          "test/fuzzdata8.db"
        ],
        "message": "Update fuzzcheck so that with the --load-dbsql options it screens its inputs to ensure that they are valid dbsqlfuzz cases.  Add new dbsqlfuzz finds to the test/fuzzdata8.db database.\n\nFossilOrigin-Name: 004f7d9bbeee049c22a7e1c82c6cc0ea79a237967de3ff57686acea3060d5f45",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a3ea1a822d3a110f4f186f2fc8550f435c8c98635d058096b7be9d4df7066b8b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "870:   return 0;",
          "871: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "875: static void isDbSqlFunc(",
          "876:   sqlite3_context *context,",
          "877:   int argc,",
          "878:   sqlite3_value **argv",
          "879: ){",
          "880:   int n = sqlite3_value_bytes(argv[0]);",
          "881:   unsigned char *a = (unsigned char*)sqlite3_value_blob(argv[0]);",
          "882:   sqlite3_result_int(context, a!=0 && n>0 && isDbSql(a,n));",
          "883: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1173:   int rc;",
          "1175:      \"BEGIN;\\n\"",
          "1176:      \"CREATE TEMP TABLE dbx AS SELECT DISTINCT dbcontent FROM db;\\n\"",
          "1177:      \"DELETE FROM db;\\n\"",
          "1178:      \"INSERT INTO db(dbid, dbcontent) \"",
          "1179:         \" SELECT NULL, dbcontent FROM dbx ORDER BY 2;\\n\"",
          "1180:      \"DROP TABLE dbx;\\n\"",
          "1182:      \"DELETE FROM xsql;\\n\"",
          "1183:      \"INSERT INTO xsql(sqlid,sqltext) \"",
          "1184:         \" SELECT NULL, sqltext FROM sx ORDER BY 2;\\n\"",
          "1185:      \"DROP TABLE sx;\\n\"",
          "1186:      \"COMMIT;\\n\"",
          "1187:      \"PRAGMA page_size=1024;\\n\"",
          "1189:   if( rc ) fatalError(\"cannot rebuild: %s\", sqlite3_errmsg(db));",
          "1190: }",
          "",
          "[Removed Lines]",
          "1172: static void rebuild_database(sqlite3 *db){",
          "1174:   rc = sqlite3_exec(db,",
          "1181:      \"CREATE TEMP TABLE sx AS SELECT DISTINCT sqltext FROM xsql;\\n\"",
          "1188:      \"VACUUM;\\n\", 0, 0, 0);",
          "",
          "[Added Lines]",
          "1183: static void rebuild_database(sqlite3 *db, int dbSqlOnly){",
          "1185:   char *zSql;",
          "1186:   zSql = sqlite3_mprintf(",
          "1193:      \"CREATE TEMP TABLE sx AS SELECT DISTINCT sqltext FROM xsql %s;\\n\"",
          "1200:      \"VACUUM;\\n\",",
          "1201:      dbSqlOnly ? \" WHERE isdbsql(sqltext)\" : \"\"",
          "1202:   );",
          "1203:   rc = sqlite3_exec(db, zSql, 0, 0, 0);",
          "1204:   sqlite3_free(zSql);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1279: \"  --limit-vdbe         Panic if any test runs for more than 100,000 cycles\\n\"",
          "1280: \"  --load-sql ARGS...   Load SQL scripts fron files into SOURCE-DB\\n\"",
          "1281: \"  --load-db ARGS...    Load template databases from files into SOURCE_DB\\n\"",
          "1282: \"  -m TEXT              Add a description to the database\\n\"",
          "1283: \"  --native-vfs         Use the native VFS for initially empty database files\\n\"",
          "1284: \"  --native-malloc      Turn off MEMSYS3/5 and Lookaside\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1298: \"  --load-dbsql ARGS..  Load dbsqlfuzz outputs into the xsql table\\n\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1361:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1362:         zExpDb = argv[++i];",
          "1363:       }else",
          "1365:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1366:         zExpSql = argv[++i];",
          "1367:       }else",
          "",
          "[Removed Lines]",
          "1364:       if( strcmp(z,\"export-sql\")==0 ){",
          "",
          "[Added Lines]",
          "1382:       if( strcmp(z,\"export-sql\")==0 || strcmp(z,\"export-dbsql\")==0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1396:         openFlags4Data = SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE;",
          "1397:         break;",
          "1398:       }else",
          "1399:       if( strcmp(z,\"m\")==0 ){",
          "1400:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1401:         zMsg = argv[++i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1417:       if( strcmp(z,\"load-dbsql\")==0 ){",
          "1418:         zInsSql = \"INSERT INTO xsql(sqltext)VALUES(CAST(readfile(?1) AS text))\";",
          "1419:         iFirstInsArg = i+1;",
          "1420:         openFlags4Data = SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE;",
          "1421:         dbSqlOnly = 1;",
          "1422:         break;",
          "1423:       }else",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1577:     if( zInsSql ){",
          "1578:       sqlite3_create_function(db, \"readfile\", 1, SQLITE_UTF8, 0,",
          "1579:                               readfileFunc, 0, 0);",
          "1580:       rc = sqlite3_prepare_v2(db, zInsSql, -1, &pStmt, 0);",
          "1581:       if( rc ) fatalError(\"cannot prepare statement [%s]: %s\",",
          "1582:                           zInsSql, sqlite3_errmsg(db));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1605:       sqlite3_create_function(db, \"isdbsql\", 1, SQLITE_UTF8, 0,",
          "1606:                               isDbSqlFunc, 0, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1592:       rc = sqlite3_exec(db, \"COMMIT\", 0, 0, 0);",
          "1593:       if( rc ) fatalError(\"cannot commit the transaction: %s\",",
          "1594:                           sqlite3_errmsg(db));",
          "1596:       sqlite3_close(db);",
          "1597:       return 0;",
          "1598:     }",
          "",
          "[Removed Lines]",
          "1595:       rebuild_database(db);",
          "",
          "[Added Lines]",
          "1622:       rebuild_database(db, dbSqlOnly);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1679:         printf(\"%s: rebuilding... \", zDbName);",
          "1680:         fflush(stdout);",
          "1681:       }",
          "1683:       if( !quietFlag ) printf(\"done\\n\");",
          "1684:     }",
          "",
          "[Removed Lines]",
          "1682:       rebuild_database(db);",
          "",
          "[Added Lines]",
          "1709:       rebuild_database(db, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c9bcb2328b6c2fdd41520911bf67e0cb199f995",
      "candidate_info": {
        "commit_hash": "8c9bcb2328b6c2fdd41520911bf67e0cb199f995",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8c9bcb2328b6c2fdd41520911bf67e0cb199f995",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/orderbyA.test",
          "test/tkt-b75a9ca6b0.test"
        ],
        "message": "Allow SQLite to omit redundant ORDER BY sorts in the case where a SELECT statement has GROUP BY and ORDER BY clauses that use the same expressions, even when the ORDER BY expressions are marked \"DESC\".\n\nFossilOrigin-Name: 20f7951bb238ddc0b8932a55145df426b6fdf7b8631e069345902c853c90f191",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/orderbyA.test||test/orderbyA.test",
          "test/tkt-b75a9ca6b0.test||test/tkt-b75a9ca6b0.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c17078af6046ba3cb0d7819c915a800c851d7368e13d149140db2a124df32bab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6223:       }",
          "6224:       assert( 66==sqlite3LogEst(100) );",
          "6225:       if( p->nSelectRow>66 ) p->nSelectRow = 66;",
          "6226:     }else{",
          "6227:       assert( 0==sqlite3LogEst(1) );",
          "6228:       p->nSelectRow = 0;",
          "6229:     }",
          "6244:     addrEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "6239:     if( sqlite3ExprListCompare(pGroupBy, sSort.pOrderBy, -1)==0 ){",
          "6240:       orderByGrp = 1;",
          "6241:     }",
          "",
          "[Added Lines]",
          "6235:       if( sSort.pOrderBy && pGroupBy->nExpr==sSort.pOrderBy->nExpr ){",
          "6236:         int i;",
          "6242:         for(i=0; i<pGroupBy->nExpr; i++){",
          "6243:           u8 sortFlags = sSort.pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC;",
          "6244:           pGroupBy->a[i].sortFlags = sortFlags;",
          "6245:         }",
          "6246:         if( sqlite3ExprListCompare(pGroupBy, sSort.pOrderBy, -1)==0 ){",
          "6247:           orderByGrp = 1;",
          "6248:         }",
          "6249:       }",
          "",
          "---------------"
        ],
        "test/orderbyA.test||test/orderbyA.test": [
          "File: test/orderbyA.test -> test/orderbyA.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-09-21",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "13: # Specifically, it tests cases where the expressions in a GROUP BY",
          "14: # clause are the same as those in the ORDER BY clause.",
          "15: #",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "19: set ::testprefix orderbyA",
          "21: proc do_sortcount_test {tn sql cnt res} {",
          "22:   set eqp [execsql \"EXPLAIN QUERY PLAN $sql\"]",
          "23:   set rcnt [regexp -all {USE TEMP} $eqp]",
          "24:   uplevel [list do_test         $tn.1 [list set {} $rcnt] $cnt]",
          "25:   uplevel [list do_execsql_test $tn.2 $sql $res]",
          "26: }",
          "28: do_execsql_test 1.0 {",
          "29:   CREATE TABLE t1(a, b, c);",
          "30:   INSERT INTO t1 VALUES('one',   1, 11);",
          "31:   INSERT INTO t1 VALUES('three', 7, 11);",
          "32:   INSERT INTO t1 VALUES('one',   2, 11);",
          "33:   INSERT INTO t1 VALUES('one',   3, 11);",
          "34:   INSERT INTO t1 VALUES('two',   4, 11);",
          "35:   INSERT INTO t1 VALUES('two',   6, 11);",
          "36:   INSERT INTO t1 VALUES('three', 8, 11);",
          "37:   INSERT INTO t1 VALUES('two',   5, 11);",
          "38:   INSERT INTO t1 VALUES('three', 9, 11);",
          "39: }",
          "41: foreach {tn idx} {",
          "42:   1 {}",
          "43:   2 {CREATE INDEX i1 ON t1(a)}",
          "44:   3 {CREATE INDEX i1 ON t1(a DESC)}",
          "45: } {",
          "46:   execsql { DROP INDEX IF EXISTS i1 }",
          "47:   execsql $idx",
          "49:   # $match is the number of temp-table sorts we expect if the GROUP BY",
          "50:   # can use the same sort order as the ORDER BY. $nomatch is the number",
          "51:   # of expected sorts if the GROUP BY and ORDER BY are not compatible.",
          "52:   set match   1",
          "53:   set nomatch 2",
          "54:   if {$tn>=2} {",
          "55:     set match   0",
          "56:     set nomatch 1",
          "57:   }",
          "59:   do_sortcount_test 1.$tn.1.1 {",
          "60:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a",
          "61:   } $match {one 6 three 24 two 15}",
          "62:   do_sortcount_test 1.$tn.1.2 {",
          "63:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a DESC",
          "64:   } $match {two 15 three 24 one 6}",
          "66:   do_sortcount_test 1.$tn.2.1 {",
          "67:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a||''",
          "68:   } $nomatch {one 6 three 24 two 15}",
          "69:   do_sortcount_test 1.$tn.2.2 {",
          "70:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a||'' DESC",
          "71:   } $nomatch {two 15 three 24 one 6}",
          "73:   do_sortcount_test 1.$tn.3.1 {",
          "74:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a NULLS LAST",
          "75:   } $nomatch {one 6 three 24 two 15}",
          "76:   do_sortcount_test 1.$tn.3.2 {",
          "77:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a DESC NULLS FIRST",
          "78:   } $nomatch {two 15 three 24 one 6}",
          "79: }",
          "81: #-------------------------------------------------------------------------",
          "82: do_execsql_test 2.0 {",
          "83:   CREATE TABLE t2(a, b, c);",
          "84:   INSERT INTO t2 VALUES(1, 'one', 1);",
          "85:   INSERT INTO t2 VALUES(1, 'two', 2);",
          "86:   INSERT INTO t2 VALUES(1, 'one', 3);",
          "87:   INSERT INTO t2 VALUES(1, 'two', 4);",
          "88:   INSERT INTO t2 VALUES(1, 'one', 5);",
          "89:   INSERT INTO t2 VALUES(1, 'two', 6);",
          "91:   INSERT INTO t2 VALUES(2, 'one', 7);",
          "92:   INSERT INTO t2 VALUES(2, 'two', 8);",
          "93:   INSERT INTO t2 VALUES(2, 'one', 9);",
          "94:   INSERT INTO t2 VALUES(2, 'two', 10);",
          "95:   INSERT INTO t2 VALUES(2, 'one', 11);",
          "96:   INSERT INTO t2 VALUES(2, 'two', 12);",
          "98:   INSERT INTO t2 VALUES(NULL, 'one', 13);",
          "99:   INSERT INTO t2 VALUES(NULL, 'two', 14);",
          "100:   INSERT INTO t2 VALUES(NULL, 'one', 15);",
          "101:   INSERT INTO t2 VALUES(NULL, 'two', 16);",
          "102:   INSERT INTO t2 VALUES(NULL, 'one', 17);",
          "103:   INSERT INTO t2 VALUES(NULL, 'two', 18);",
          "104: }",
          "106: foreach {tn idx} {",
          "107:   1 {}",
          "109:   2 { CREATE INDEX i2 ON t2(a, b)           }",
          "110:   3 { CREATE INDEX i2 ON t2(a DESC, b DESC) }",
          "112:   4 { CREATE INDEX i2 ON t2(a, b DESC)      }",
          "113:   5 { CREATE INDEX i2 ON t2(a DESC, b)      }",
          "114: } {",
          "115:   execsql { DROP INDEX IF EXISTS i2 }",
          "116:   execsql $idx",
          "119:   set nSort [expr ($tn==2 || $tn==3) ? 0 : 1]",
          "120:   do_sortcount_test 2.$tn.1.1 {",
          "121:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a, b;",
          "122:   } $nSort {{} one 45  {} two 48  1 one 9  1 two 12  2 one 27  2 two 30}",
          "123:   do_sortcount_test 2.$tn.1.2 {",
          "124:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a DESC, b DESC;",
          "125:   } $nSort {2 two 30  2 one 27  1 two 12  1 one 9  {} two 48  {} one 45}",
          "127:   set nSort [expr ($tn==4 || $tn==5) ? 0 : 1]",
          "128:   do_sortcount_test 2.$tn.2.1 {",
          "129:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a, b DESC;",
          "130:   } $nSort { {} two 48  {} one 45  1 two 12  1 one 9  2 two 30 2 one 27 }",
          "131:   do_sortcount_test 2.$tn.2.2 {",
          "132:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a DESC, b;",
          "133:   } $nSort { 2 one 27  2 two 30  1 one 9  1 two 12  {} one 45 {} two 48 }",
          "135:   # ORDER BY can never piggyback on the GROUP BY sort if it uses",
          "136:   # non-standard NULLS behaviour.",
          "137:   set nSort [expr $tn==1 ? 2 : 1]",
          "138:   do_sortcount_test 2.$tn.3.1 {",
          "139:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a, b DESC NULLS FIRST;",
          "140:   } $nSort { {} two 48  {} one 45  1 two 12  1 one 9  2 two 30 2 one 27 }",
          "141:   do_sortcount_test 2.$tn.3.2 {",
          "142:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a DESC, b NULLS LAST;",
          "143:   } $nSort { 2 one 27  2 two 30  1 one 9  1 two 12  {} one 45 {} two 48 }",
          "144: }",
          "147: finish_test",
          "",
          "---------------"
        ],
        "test/tkt-b75a9ca6b0.test||test/tkt-b75a9ca6b0.test": [
          "File: test/tkt-b75a9ca6b0.test -> test/tkt-b75a9ca6b0.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:   {1 3  2 2  3 1} {$idxscan*$sort}",
          "62:   8 \"SELECT * FROM t1 GROUP BY x, y ORDER BY x DESC, y DESC\"",
          "65:   9 \"SELECT * FROM t1 GROUP BY x, y ORDER BY x ASC, y ASC\"",
          "66:   {1 3  2 2  3 1} {$idxscan}",
          "",
          "[Removed Lines]",
          "63:   {3 1  2 2  1 3} {$idxscan*$sort}",
          "",
          "[Added Lines]",
          "63:   {3 1  2 2  1 3} {$idxscan}",
          "",
          "---------------"
        ]
      }
    }
  ]
}