{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f0a2172d1d2004ac1ac358c63cf4b464fea10bf6",
      "candidate_info": {
        "commit_hash": "f0a2172d1d2004ac1ac358c63cf4b464fea10bf6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f0a2172d1d2004ac1ac358c63cf4b464fea10bf6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/dbstat.c",
          "test/fuzzcheck.c"
        ],
        "message": "Fix an integer overflow problem with the dbstat virtual table that comes up when trying to analyze a corrupt database.\n\nFossilOrigin-Name: 1d64f4a8af81fe1235fffa54884d8f842a48ff6a33d6172f0cd65bf42fe8b2a1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/dbstat.c||src/dbstat.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3a51919ac23ae7312d78905334dc97742b517a7476052a85aa07945d9c77697b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "452:         if( nPayload>(u32)nLocal ){",
          "453:           int j;",
          "454:           int nOvfl = ((nPayload - nLocal) + nUsable-4 - 1) / (nUsable - 4);",
          "456:           pCell->nLastOvfl = (nPayload-nLocal) - (nOvfl-1) * (nUsable-4);",
          "457:           pCell->nOvfl = nOvfl;",
          "458:           pCell->aOvfl = sqlite3_malloc64(sizeof(u32)*nOvfl);",
          "",
          "[Removed Lines]",
          "455:           if( iOff+nLocal>nUsable ) goto statPageIsCorrupt;",
          "",
          "[Added Lines]",
          "455:           if( iOff+nLocal>nUsable || nPayload>0x7fffffff ){",
          "456:             goto statPageIsCorrupt;",
          "457:           }",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: # include <unistd.h>",
          "95: #endif",
          "102: #endif",
          "104: #if defined(_MSC_VER)",
          "",
          "[Removed Lines]",
          "97: #ifdef SQLITE_OSS_FUZZ",
          "98: # include <stddef.h>",
          "99: # if !defined(_MSC_VER)",
          "100: #  include <stdint.h>",
          "101: # endif",
          "",
          "[Added Lines]",
          "97: #include <stddef.h>",
          "98: #if !defined(_MSC_VER)",
          "99: # include <stdint.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f1d0f56e48ec66404777eaef93e48a235fae350",
      "candidate_info": {
        "commit_hash": "3f1d0f56e48ec66404777eaef93e48a235fae350",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3f1d0f56e48ec66404777eaef93e48a235fae350",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/busy2.test"
        ],
        "message": "Add a test to ensure that \"PRAGMA wal_checkpoint = FULL\" invokes the busy-handler to wait on read-locks.\n\nFossilOrigin-Name: f068fb116286b1dbdee9c168900348cfcab84e6d8413f3456e4e492f650d11b0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/busy2.test||test/busy2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4d0cfb1236884349168f8e2ec5e18c0232965148af78615e0d5c9b0e13a35422",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/busy2.test||test/busy2.test": [
          "File: test/busy2.test -> test/busy2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   } {}",
          "51: }",
          "53: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: #-------------------------------------------------------------------------",
          "55: do_multiclient_test tn {",
          "56:   # Make the db a WAL mode db. And add a table and a row to it. Then open",
          "57:   # a second connection within process 1. Process 1 now has connections",
          "58:   # [db] and [db1.2], process 2 has connection [db2] only.",
          "59:   #",
          "60:   # Configure all connections to use a 1000 ms timeout.",
          "61:   #",
          "62:   do_test 2.$tn.0 {",
          "63:     sql1 {",
          "64:       PRAGMA journal_mode = wal;",
          "65:       CREATE TABLE t1(a, b);",
          "66:       INSERT INTO t1 VALUES(1, 2);",
          "67:     }",
          "68:     code2 {",
          "69:       db2 timeout 1000",
          "70:     }",
          "71:     code1 {",
          "72:       sqlite3 db1.2 test.db",
          "73:       db1.2 timeout 1000",
          "74:       db    timeout 1000",
          "75:       db1.2 eval {SELECT * FROM t1}",
          "76:     }",
          "77:   } {1 2}",
          "79:   # Take a read lock with [db] in process 1.",
          "80:   #",
          "81:   do_test 2.$tn.1 {",
          "82:     sql1 {",
          "83:       BEGIN;",
          "84:         SELECT * FROM t1;",
          "85:     }",
          "86:   } {1 2}",
          "88:   # Insert a row using [db2] in process 2. Then try a passive checkpoint.",
          "89:   # It fails to checkpoint the final frame (due to the readlock taken by",
          "90:   # [db]), and returns in less than 250ms.",
          "91:   do_test 2.$tn.2 {",
          "92:     sql2 { INSERT INTO t1 VALUES(3, 4) }",
          "93:     set us [lindex [time {",
          "94:       set res [code2 { db2 eval { PRAGMA wal_checkpoint } }]",
          "95:     }] 0]",
          "96:     list [expr $us < 250000] $res",
          "97:   } {1 {0 4 3}}",
          "99:   # Now try a FULL checkpoint with [db2]. It returns SQLITE_BUSY. And takes",
          "100:   # over 950ms to do so.",
          "101:   do_test 2.$tn.3 {",
          "102:     set us [lindex [time {",
          "103:       set res [code2 { db2 eval { PRAGMA wal_checkpoint = FULL } }]",
          "104:     }] 0]",
          "105:     list [expr $us > 950000] $res",
          "106:   } {1 {1 4 3}}",
          "108:   # Passive checkpoint with [db1.2] (process 1). No SQLITE_BUSY, returns",
          "109:   # in under 250ms.",
          "110:   do_test 2.$tn.4 {",
          "111:     set us [lindex [time {",
          "112:       set res [code1 { db1.2 eval { PRAGMA wal_checkpoint } }]",
          "113:     }] 0]",
          "114:     list [expr $us < 250000] $res",
          "115:   } {1 {0 4 3}}",
          "117:   # Full checkpoint with [db1.2] (process 1). SQLITE_BUSY returned in",
          "118:   # a bit over 950ms.",
          "119:   do_test 2.$tn.5 {",
          "120:     set us [lindex [time {",
          "121:       set res [code1 { db1.2 eval { PRAGMA wal_checkpoint = FULL } }]",
          "122:     }] 0]",
          "123:     list [expr $us > 950000] $res",
          "124:   } {1 {1 4 3}}",
          "126:   code1 {",
          "127:     db1.2 close",
          "128:   }",
          "129: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "171c50ec381c5fb4ff1e8b258a49fbf810917011",
      "candidate_info": {
        "commit_hash": "171c50ec381c5fb4ff1e8b258a49fbf810917011",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/171c50ec381c5fb4ff1e8b258a49fbf810917011",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/func.c",
          "src/global.c",
          "src/main.c",
          "src/resolve.c",
          "src/shell.c.in",
          "src/sqliteInt.h",
          "src/test1.c",
          "test/alter.test",
          "test/altercol.test",
          "test/altertab.test",
          "test/fkey2.test",
          "test/without_rowid3.test"
        ],
        "message": "New test-only SQL functions: implies_nonnull_row(), expr_compare(), and expr_implies_expr().  The SQLITE_TESTCTRL_INTERNAL_FUNCTIONS test-control is modified to toggle internal function access on and off for a single database connection.\n\nFossilOrigin-Name: 473892a8eceacf24d57fd0c72ff2a0b8be4e0d75e0af7a30bdb24fbc3b453601",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/func.c||src/func.c",
          "src/global.c||src/global.c",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c",
          "test/alter.test||test/alter.test",
          "test/altercol.test||test/altercol.test",
          "test/altertab.test||test/altertab.test",
          "test/fkey2.test||test/fkey2.test",
          "test/without_rowid3.test||test/without_rowid3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 586a65a28fc6cac77309612abc32a2e1017c65e0387f9f438f5d8ac8406da8eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3608:       break;",
          "3609:     }",
          "3616:       target = sqlite3ExprCodeTarget(pParse, pFarg->a[0].pExpr, target);",
          "3617:       break;",
          "3618:     }",
          "3620: #ifdef SQLITE_DEBUG",
          "3621:     case INLINEFUNC_affinity: {",
          "",
          "[Removed Lines]",
          "3611:     case INLINEFUNC_unlikely: {",
          "3615:       assert( nFarg>=1 );",
          "",
          "[Added Lines]",
          "3611:     default: {",
          "3615:       assert( nFarg==1 || nFarg==2 );",
          "3624:     case INLINEFUNC_expr_compare: {",
          "3626:       assert( nFarg==2 );",
          "3627:       sqlite3VdbeAddOp2(v, OP_Integer,",
          "3628:          sqlite3ExprCompare(0,pFarg->a[0].pExpr, pFarg->a[1].pExpr,-1),",
          "3629:          target);",
          "3630:       break;",
          "3631:     }",
          "3633:     case INLINEFUNC_expr_implies_expr: {",
          "3635:       assert( nFarg==2 );",
          "3636:       sqlite3VdbeAddOp2(v, OP_Integer,",
          "3637:          sqlite3ExprImpliesExpr(pParse,pFarg->a[0].pExpr, pFarg->a[1].pExpr,-1),",
          "3638:          target);",
          "3639:       break;",
          "3640:     }",
          "3642:     case INLINEFUNC_implies_nonnull_row: {",
          "3644:       Expr *pA1;",
          "3645:       assert( nFarg==2 );",
          "3646:       pA1 = pFarg->a[1].pExpr;",
          "3647:       if( pA1->op==TK_COLUMN ){",
          "3648:         sqlite3VdbeAddOp2(v, OP_Integer,",
          "3649:            sqlite3ExprImpliesNonNullRow(pFarg->a[0].pExpr,pA1->iTable),",
          "3650:            target);",
          "3651:       }else{",
          "3652:         sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "3653:       }",
          "3654:       break;",
          "3655:     }",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1909:   static FuncDef aBuiltinFunc[] = {",
          "1910: #ifdef SQLITE_SOUNDEX",
          "1911:     FUNCTION(soundex,            1, 0, 0, soundexFunc      ),",
          "1912: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1911:     TEST_FUNC(implies_nonnull_row, 2, INLINEFUNC_implies_nonnull_row, 0),",
          "1912:     TEST_FUNC(expr_compare,        2, INLINEFUNC_expr_compare,        0),",
          "1913:     TEST_FUNC(expr_implies_expr,   2, INLINEFUNC_expr_implies_expr,   0),",
          "1914: #ifdef SQLITE_DEBUG",
          "1915:     TEST_FUNC(affinity,          1, INLINEFUNC_affinity, 0),",
          "1916: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1924:     INLINE_FUNC(unlikely,        1, INLINEFUNC_unlikely, SQLITE_FUNC_UNLIKELY),",
          "1925:     INLINE_FUNC(likelihood,      2, INLINEFUNC_unlikely, SQLITE_FUNC_UNLIKELY),",
          "1926:     INLINE_FUNC(likely,          1, INLINEFUNC_unlikely, SQLITE_FUNC_UNLIKELY),",
          "1930: #ifdef SQLITE_ENABLE_OFFSET_SQL_FUNC",
          "1931:     FUNCTION2(sqlite_offset,     1, 0, 0, noopFunc,  SQLITE_FUNC_OFFSET|",
          "1932:                                                      SQLITE_FUNC_TYPEOF),",
          "",
          "[Removed Lines]",
          "1927: #ifdef SQLITE_DEBUG",
          "1928:     TEST_FUNC(affinity,          1, INLINEFUNC_affinity, 0),",
          "1929: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4044:       break;",
          "4045:     }",
          "4054:     case SQLITE_TESTCTRL_INTERNAL_FUNCTIONS: {",
          "4056:       break;",
          "4057:     }",
          "",
          "[Removed Lines]",
          "4055:       sqlite3GlobalConfig.bInternalFunctions = va_arg(ap, int);",
          "",
          "[Added Lines]",
          "4053:       sqlite3 *db = va_arg(ap, sqlite3*);",
          "4054:       db->mDbFlags ^= DBFLAG_InternalFunc;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "874:         }",
          "875:         if( (pDef->funcFlags & SQLITE_FUNC_INTERNAL)!=0",
          "876:          && pParse->nested==0",
          "878:         ){",
          "",
          "[Removed Lines]",
          "877:          && sqlite3Config.bInternalFunctions==0",
          "",
          "[Added Lines]",
          "877:          && (pParse->db->mDbFlags & DBFLAG_InternalFunc)==0",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9219:       { \"extra_schema_checks\",SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS,\"BOOLEAN\"   },",
          "9221:       { \"imposter\",         SQLITE_TESTCTRL_IMPOSTER, \"SCHEMA ON/OFF ROOTPAGE\"},",
          "9223:       { \"localtime_fault\",    SQLITE_TESTCTRL_LOCALTIME_FAULT,\"BOOLEAN\"       },",
          "9224:       { \"never_corrupt\",      SQLITE_TESTCTRL_NEVER_CORRUPT, \"BOOLEAN\"        },",
          "9225:       { \"optimizations\",      SQLITE_TESTCTRL_OPTIMIZATIONS, \"DISABLE-MASK\"   },",
          "",
          "[Removed Lines]",
          "9222:       { \"internal_functions\", SQLITE_TESTCTRL_INTERNAL_FUNCTIONS, \"BOOLEAN\"   },",
          "",
          "[Added Lines]",
          "9222:       { \"internal_functions\", SQLITE_TESTCTRL_INTERNAL_FUNCTIONS, \"\" },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9336:         case SQLITE_TESTCTRL_ASSERT:",
          "9337:         case SQLITE_TESTCTRL_ALWAYS:",
          "9339:           if( nArg==3 ){",
          "9340:             int opt = booleanValue(azArg[2]);",
          "9341:             rc2 = sqlite3_test_control(testctrl, opt);",
          "",
          "[Removed Lines]",
          "9338:         case SQLITE_TESTCTRL_INTERNAL_FUNCTIONS:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9353:           }",
          "9354:           break;",
          "9356:         case SQLITE_TESTCTRL_IMPOSTER:",
          "9357:           if( nArg==5 ){",
          "9358:             rc2 = sqlite3_test_control(testctrl, p->db,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9356:         case SQLITE_TESTCTRL_INTERNAL_FUNCTIONS:",
          "9357:           rc2 = sqlite3_test_control(testctrl, p->db);",
          "9358:           break;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1725: #define INLINEFUNC_coalesce             0",
          "1726: #define INLINEFUNC_implies_nonnull_row  1",
          "1727: #define INLINEFUNC_expr_implies_expr    2",
          "1728: #define INLINEFUNC_expr_compare         3",
          "1729: #define INLINEFUNC_affinity             4",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6873:   iFlag = aVerb[iVerb].i;",
          "6874:   switch( iFlag ){",
          "6876:     case SQLITE_TESTCTRL_LOCALTIME_FAULT: {",
          "6877:       int val;",
          "6878:       if( objc!=3 ){",
          "",
          "[Removed Lines]",
          "6875:     case SQLITE_TESTCTRL_INTERNAL_FUNCTIONS:",
          "",
          "[Added Lines]",
          "6875:     case SQLITE_TESTCTRL_INTERNAL_FUNCTIONS: {",
          "6876:       sqlite3 *db = 0;",
          "6877:       if( objc!=3 ){",
          "6878:         Tcl_WrongNumArgs(interp, 2, objv, \"DB\");",
          "6879:         return TCL_ERROR;",
          "6880:       }",
          "6881:       if( getDbPointer(interp, Tcl_GetString(objv[2]), &db) ) return TCL_ERROR;",
          "6882:       sqlite3_test_control(SQLITE_TESTCTRL_INTERNAL_FUNCTIONS, db);",
          "6883:       break;",
          "6884:     }",
          "",
          "---------------"
        ],
        "test/alter.test||test/alter.test": [
          "File: test/alter.test -> test/alter.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "684: # alter-9.X - Special test: Make sure the sqlite_rename_column() and",
          "685: # rename_table() functions do not crash when handed bad input.",
          "686: #",
          "688: do_test alter-9.1 {",
          "689:   execsql {SELECT SQLITE_RENAME_COLUMN(0,0,0,0,0,0,0,0,0)}",
          "690: } {{}}",
          "",
          "[Removed Lines]",
          "687: sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "[Added Lines]",
          "687: sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "697:     catch { execsql $sql }",
          "698:   } 1",
          "699: }",
          "702: # If the INTERNAL_FUNCTIONS test-control is disabled (which is the default),",
          "703: # then the sqlite_rename_table() SQL function is not accessible to ordinary SQL.",
          "",
          "[Removed Lines]",
          "700: sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "[Added Lines]",
          "700: sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------"
        ],
        "test/altercol.test||test/altercol.test": [
          "File: test/altercol.test -> test/altercol.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "618: #-------------------------------------------------------------------------",
          "619: # Passing invalid parameters directly to sqlite_rename_column().",
          "620: #",
          "622: do_execsql_test 14.1 {",
          "623:   CREATE TABLE ddd(sql, type, object, db, tbl, icol, znew, bquote);",
          "624:   INSERT INTO ddd VALUES(",
          "",
          "[Removed Lines]",
          "621: sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "[Added Lines]",
          "621: sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "641:   sqlite_rename_column(sql, type, object, db, tbl, icol, znew, bquote, 0)",
          "642:   FROM ddd;",
          "643: } {{} {} {} {}}",
          "646: # If the INTERNAL_FUNCTIONS test-control is disabled (which is the default)",
          "647: # then the sqlite_rename_table() SQL function is not accessible to",
          "",
          "[Removed Lines]",
          "644: sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "[Added Lines]",
          "644: sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:     );",
          "241:   } {}",
          "244:   do_execsql_test 7.2 {",
          "245:     SELECT",
          "246:     sqlite_rename_table(db, 0, 0, sql, zOld, zNew, bTemp)",
          "247:     FROM ddd;",
          "248:   } {{} {} {}}",
          "250: }",
          "252: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "243:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "249:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "[Added Lines]",
          "243:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "249:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------"
        ],
        "test/fkey2.test||test/fkey2.test": [
          "File: test/fkey2.test -> test/fkey2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "987:         'main', 'table', 't1', $zCreate, $zOld, $zNew, 0",
          "988:     )}",
          "989:   }",
          "991:   do_test fkey2-14.2.1.1 {",
          "992:     test_rename_parent {CREATE TABLE t1(a REFERENCES t2)} t2 t3",
          "993:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "",
          "[Removed Lines]",
          "990:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "[Added Lines]",
          "990:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "997:   do_test fkey2-14.2.1.3 {",
          "998:     test_rename_parent {CREATE TABLE t1(a REFERENCES \"t2\")} t2 t3",
          "999:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "1002:   # Test ALTER TABLE RENAME TABLE a bit.",
          "1003:   #",
          "",
          "[Removed Lines]",
          "1000:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "[Added Lines]",
          "1000:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1070:     }",
          "1071:   } {{CREATE TABLE t2(a, b, c REFERENCES t1, d DEFAULT NULL REFERENCES t1, e REFERENCES t1 DEFAULT NULL, h DEFAULT 'text' REFERENCES t1)}}",
          "1074:   do_test fkey2-14.2tmp.1.1 {",
          "1075:     test_rename_parent {CREATE TABLE t1(a REFERENCES t2)} t2 t3",
          "1076:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "",
          "[Removed Lines]",
          "1073:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "[Added Lines]",
          "1073:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1080:   do_test fkey2-14.2tmp.1.3 {",
          "1081:     test_rename_parent {CREATE TABLE t1(a REFERENCES \"t2\")} t2 t3",
          "1082:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "1085:   # Test ALTER TABLE RENAME TABLE a bit.",
          "1086:   #",
          "",
          "[Removed Lines]",
          "1083:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "[Added Lines]",
          "1083:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1154:     }",
          "1155:   } {{CREATE TABLE t2(a, b, c REFERENCES t1, d DEFAULT NULL REFERENCES t1, e REFERENCES t1 DEFAULT NULL, h DEFAULT 'text' REFERENCES t1)}}",
          "1158:   do_test fkey2-14.2aux.1.1 {",
          "1159:     test_rename_parent {CREATE TABLE t1(a REFERENCES t2)} t2 t3",
          "1160:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "",
          "[Removed Lines]",
          "1157:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "[Added Lines]",
          "1157:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1164:   do_test fkey2-14.2aux.1.3 {",
          "1165:     test_rename_parent {CREATE TABLE t1(a REFERENCES \"t2\")} t2 t3",
          "1166:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "1169:   # Test ALTER TABLE RENAME TABLE a bit.",
          "1170:   #",
          "",
          "[Removed Lines]",
          "1167:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "[Added Lines]",
          "1167:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------"
        ],
        "test/without_rowid3.test||test/without_rowid3.test": [
          "File: test/without_rowid3.test -> test/without_rowid3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "953:         'main', 'table', 't1', $zCreate, $zOld, $zNew, 0",
          "954:     )}",
          "955:   }",
          "957:   do_test without_rowid3-14.2.1.1 {",
          "958:     test_rename_parent {CREATE TABLE t1(a REFERENCES t2)} t2 t3",
          "959:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "",
          "[Removed Lines]",
          "956:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "[Added Lines]",
          "956:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "963:   do_test without_rowid3-14.2.1.3 {",
          "964:     test_rename_parent {CREATE TABLE t1(a REFERENCES \"t2\")} t2 t3",
          "965:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "968:   # Test ALTER TABLE RENAME TABLE a bit.",
          "969:   #",
          "",
          "[Removed Lines]",
          "966:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "[Added Lines]",
          "966:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1039:     }",
          "1040:   } {{CREATE TABLE t2(a, b, c REFERENCES t1, d DEFAULT NULL REFERENCES t1, e REFERENCES t1 DEFAULT NULL, h DEFAULT 'text' REFERENCES t1)}}",
          "1043:   do_test without_rowid3-14.2tmp.1.1 {",
          "1044:     test_rename_parent {CREATE TABLE t1(a REFERENCES t2)} t2 t3",
          "1045:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "",
          "[Removed Lines]",
          "1042:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "[Added Lines]",
          "1042:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1049:   do_test without_rowid3-14.2tmp.1.3 {",
          "1050:     test_rename_parent {CREATE TABLE t1(a REFERENCES \"t2\")} t2 t3",
          "1051:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "1054:   # Test ALTER TABLE RENAME TABLE a bit.",
          "1055:   #",
          "",
          "[Removed Lines]",
          "1052:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "[Added Lines]",
          "1052:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1126:     }",
          "1127:   } {{CREATE TABLE t2(a, b, c REFERENCES t1, d DEFAULT NULL REFERENCES t1, e REFERENCES t1 DEFAULT NULL, h DEFAULT 'text' REFERENCES t1)}}",
          "1130:   do_test without_rowid3-14.2aux.1.1 {",
          "1131:     test_rename_parent {CREATE TABLE t1(a REFERENCES t2)} t2 t3",
          "1132:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "",
          "[Removed Lines]",
          "1129:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 1",
          "",
          "[Added Lines]",
          "1129:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1136:   do_test without_rowid3-14.2aux.1.3 {",
          "1137:     test_rename_parent {CREATE TABLE t1(a REFERENCES \"t2\")} t2 t3",
          "1138:   } {{CREATE TABLE t1(a REFERENCES \"t3\")}}",
          "1141:   # Test ALTER TABLE RENAME TABLE a bit.",
          "1142:   #",
          "",
          "[Removed Lines]",
          "1139:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 0",
          "",
          "[Added Lines]",
          "1139:   sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9044361a9a59ff73b3b938e34f2707917f18df4a",
      "candidate_info": {
        "commit_hash": "9044361a9a59ff73b3b938e34f2707917f18df4a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9044361a9a59ff73b3b938e34f2707917f18df4a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c",
          "test/wal2.test",
          "test/walprotocol.test"
        ],
        "message": "If a writer crashes in WAL mode and leave the SHM file in an inconsistent state, subsequent transactions are now able to recover the SHM file even if there are active read transactions.\n\nFossilOrigin-Name: ee8a108058c304f9b6b02f84f1da01a0b7a3a21992627bcc1f97d42e8d23da69",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c",
          "test/wal2.test||test/wal2.test",
          "test/walprotocol.test||test/walprotocol.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 73fecc688ab5c459245c9bb89432139a083ef378404b4dae3397a7f4e253f72a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:     );",
          "591:     assert( pWal->apWiData[iPage]!=0 || rc!=SQLITE_OK || pWal->writeLock==0 );",
          "592:     testcase( pWal->apWiData[iPage]==0 && rc==SQLITE_OK );",
          "594:       pWal->readOnly |= WAL_SHM_RDONLY;",
          "595:       if( rc==SQLITE_READONLY ){",
          "596:         rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "593:     if( (rc&0xff)==SQLITE_READONLY ){",
          "",
          "[Added Lines]",
          "593:     if( rc==SQLITE_OK ){",
          "594:       if( iPage>0 && sqlite3FaultSim(600) ) rc = SQLITE_NOMEM;",
          "595:     }else if( (rc&0xff)==SQLITE_READONLY ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1161:   assert( pWal->writeLock );",
          "1162:   iLock = WAL_ALL_BUT_WRITE + pWal->ckptLock;",
          "1163:   rc = walLockExclusive(pWal, iLock, WAL_READ_LOCK(0)-iLock);",
          "1170:   if( rc ){",
          "1171:     return rc;",
          "1172:   }",
          "",
          "[Removed Lines]",
          "1164:   if( rc==SQLITE_OK ){",
          "1165:     rc = walLockExclusive(pWal, WAL_READ_LOCK(1), WAL_NREADER-1);",
          "1166:     if( rc!=SQLITE_OK ){",
          "1167:       walUnlockExclusive(pWal, iLock, WAL_READ_LOCK(0)-iLock);",
          "1168:     }",
          "1169:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1239:     szFrame = szPage + WAL_FRAME_HDRSIZE;",
          "1241:     if( !aFrame ){",
          "1242:       rc = SQLITE_NOMEM_BKPT;",
          "1243:       goto recovery_error;",
          "1244:     }",
          "1245:     aData = &aFrame[WAL_FRAME_HDRSIZE];",
          "1271:       }",
          "1272:     }",
          "1274:     sqlite3_free(aFrame);",
          "",
          "[Removed Lines]",
          "1240:     aFrame = (u8 *)sqlite3_malloc64(szFrame);",
          "1248:     iFrame = 0;",
          "1249:     for(iOffset=WAL_HDRSIZE; (iOffset+szFrame)<=nSize; iOffset+=szFrame){",
          "1254:       iFrame++;",
          "1255:       rc = sqlite3OsRead(pWal->pWalFd, aFrame, szFrame, iOffset);",
          "1256:       if( rc!=SQLITE_OK ) break;",
          "1257:       isValid = walDecodeFrame(pWal, &pgno, &nTruncate, aData, aFrame);",
          "1258:       if( !isValid ) break;",
          "1259:       rc = walIndexAppend(pWal, iFrame, pgno);",
          "1260:       if( rc!=SQLITE_OK ) break;",
          "1263:       if( nTruncate ){",
          "1264:         pWal->hdr.mxFrame = iFrame;",
          "1265:         pWal->hdr.nPage = nTruncate;",
          "1266:         pWal->hdr.szPage = (u16)((szPage&0xff00) | (szPage>>16));",
          "1267:         testcase( szPage<=32768 );",
          "1268:         testcase( szPage>=65536 );",
          "1269:         aFrameCksum[0] = pWal->hdr.aFrameCksum[0];",
          "1270:         aFrameCksum[1] = pWal->hdr.aFrameCksum[1];",
          "",
          "[Added Lines]",
          "1237:     aFrame = (u8 *)sqlite3_malloc64(szFrame + WALINDEX_PGSZ);",
          "1243:     aPrivate = (u32*)&aData[szPage];",
          "1246:     iLastFrame = (nSize - WAL_HDRSIZE) / szFrame;",
          "1247:     for(iPg=0; iPg<=walFramePage(iLastFrame); iPg++){",
          "1248:       u32 *aShare;",
          "1250:       int iLast = MIN(iLastFrame, HASHTABLE_NPAGE_ONE+iPg*HASHTABLE_NPAGE);",
          "1251:       int iFirst = 1 + (iPg==0?0:HASHTABLE_NPAGE_ONE+(iPg-1)*HASHTABLE_NPAGE);",
          "1252:       int nHdr, nHdr32;",
          "1253:       rc = walIndexPage(pWal, iPg, (volatile u32**)&aShare);",
          "1254:       if( rc ) break;",
          "1255:       pWal->apWiData[iPg] = aPrivate;",
          "1257:       for(iFrame=iFirst; iFrame<=iLast; iFrame++){",
          "1258:         i64 iOffset = walFrameOffset(iFrame, szPage);",
          "1263:         rc = sqlite3OsRead(pWal->pWalFd, aFrame, szFrame, iOffset);",
          "1264:         if( rc!=SQLITE_OK ) break;",
          "1265:         isValid = walDecodeFrame(pWal, &pgno, &nTruncate, aData, aFrame);",
          "1266:         if( !isValid ) break;",
          "1267:         rc = walIndexAppend(pWal, iFrame, pgno);",
          "1268:         if( NEVER(rc!=SQLITE_OK) ) break;",
          "1271:         if( nTruncate ){",
          "1272:           pWal->hdr.mxFrame = iFrame;",
          "1273:           pWal->hdr.nPage = nTruncate;",
          "1274:           pWal->hdr.szPage = (u16)((szPage&0xff00) | (szPage>>16));",
          "1275:           testcase( szPage<=32768 );",
          "1276:           testcase( szPage>=65536 );",
          "1277:           aFrameCksum[0] = pWal->hdr.aFrameCksum[0];",
          "1278:           aFrameCksum[1] = pWal->hdr.aFrameCksum[1];",
          "1279:         }",
          "1281:       pWal->apWiData[iPg] = aShare;",
          "1282:       nHdr = (iPg==0 ? WALINDEX_HDR_SIZE : 0);",
          "1283:       nHdr32 = nHdr / sizeof(u32);",
          "1284:       memcpy(&aShare[nHdr32], &aPrivate[nHdr32], WALINDEX_PGSZ-nHdr);",
          "1285:       if( iFrame<=iLast ) break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1283:     walIndexWriteHdr(pWal);",
          "1289:     pInfo = walCkptInfo(pWal);",
          "1290:     pInfo->nBackfill = 0;",
          "1291:     pInfo->nBackfillAttempted = pWal->hdr.mxFrame;",
          "1292:     pInfo->aReadMark[0] = 0;",
          "",
          "[Removed Lines]",
          "1293:     for(i=1; i<WAL_NREADER; i++) pInfo->aReadMark[i] = READMARK_NOT_USED;",
          "1294:     if( pWal->hdr.mxFrame ) pInfo->aReadMark[1] = pWal->hdr.mxFrame;",
          "",
          "[Added Lines]",
          "1307:     for(i=1; i<WAL_NREADER; i++){",
          "1308:       rc = walLockExclusive(pWal, WAL_READ_LOCK(i), 1);",
          "1309:       if( rc==SQLITE_OK ){",
          "1310:         if( i==1 && pWal->hdr.mxFrame ){",
          "1311:           pInfo->aReadMark[i] = pWal->hdr.mxFrame;",
          "1312:         }else{",
          "1313:           pInfo->aReadMark[i] = READMARK_NOT_USED;",
          "1314:         }",
          "1315:         walUnlockExclusive(pWal, WAL_READ_LOCK(i), 1);",
          "1316:       }else if( rc!=SQLITE_BUSY ){",
          "1317:         goto recovery_error;",
          "1318:       }",
          "1319:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1309: recovery_error:",
          "1310:   WALTRACE((\"WAL%p: recovery %s\\n\", pWal, rc ? \"failed\" : \"ok\"));",
          "1311:   walUnlockExclusive(pWal, iLock, WAL_READ_LOCK(0)-iLock);",
          "1313:   return rc;",
          "1314: }",
          "",
          "[Removed Lines]",
          "1312:   walUnlockExclusive(pWal, WAL_READ_LOCK(1), WAL_NREADER-1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wal2.test||test/wal2.test": [
          "File: test/wal2.test -> test/wal2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "122: } {4 10}",
          "124: set RECOVER [list                                      \\",
          "127: ]",
          "128: set READ [list                                         \\",
          "129:   {4 1 lock shared}    {4 1 unlock shared}             \\",
          "",
          "[Removed Lines]",
          "125:   {0 1 lock exclusive}   {1 2 lock exclusive} {4 4 lock exclusive} \\",
          "126:   {1 2 unlock exclusive} {4 4 unlock exclusive} {0 1 unlock exclusive}  \\",
          "",
          "[Added Lines]",
          "125:   {0 1 lock exclusive}   {1 2 lock exclusive}          \\",
          "126:   {4 1 lock exclusive}   {4 1 unlock exclusive}        \\",
          "127:   {5 1 lock exclusive}   {5 1 unlock exclusive}        \\",
          "128:   {6 1 lock exclusive}   {6 1 unlock exclusive}        \\",
          "129:   {7 1 lock exclusive}   {7 1 unlock exclusive}        \\",
          "130:   {1 2 unlock exclusive} {0 1 unlock exclusive}        \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394: lappend expected_locks {1 1 lock exclusive}   ;# Lock checkpoint",
          "395: lappend expected_locks {0 1 lock exclusive}   ;# Lock writer",
          "396: lappend expected_locks {2 1 lock exclusive}   ;# Lock recovery",
          "398: lappend expected_locks {2 1 unlock exclusive} ;# Unlock recovery",
          "400: lappend expected_locks {0 1 unlock exclusive} ;# Unlock writer",
          "401: lappend expected_locks {3 1 lock exclusive}   ;# Lock aReadMark[0]",
          "402: lappend expected_locks {3 1 unlock exclusive} ;# Unlock aReadMark[0]",
          "",
          "[Removed Lines]",
          "397: lappend expected_locks {4 4 lock exclusive}   ;# Lock all aReadMark[]",
          "399: lappend expected_locks {4 4 unlock exclusive} ;# Unlock all aReadMark[]",
          "",
          "[Added Lines]",
          "401: # lappend expected_locks {4 4 lock exclusive}   ;# Lock all aReadMark[]",
          "402: lappend expected_locks {4 1 lock exclusive}   ;# Lock aReadMark[1]",
          "403: lappend expected_locks {4 1 unlock exclusive} ;# Unlock aReadMark[1]",
          "404: lappend expected_locks {5 1 lock exclusive}",
          "405: lappend expected_locks {5 1 unlock exclusive}",
          "406: lappend expected_locks {6 1 lock exclusive}",
          "407: lappend expected_locks {6 1 unlock exclusive}",
          "408: lappend expected_locks {7 1 lock exclusive}",
          "409: lappend expected_locks {7 1 unlock exclusive}",
          "411: # lappend expected_locks {4 4 unlock exclusive} ;# Unlock all aReadMark[]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "625: } {}",
          "627: set RECOVERY {",
          "630: }",
          "631: set READMARK0_READ {",
          "632:   {3 1 lock shared} {3 1 unlock shared}",
          "",
          "[Removed Lines]",
          "628:   {0 1 lock exclusive} {1 2 lock exclusive} {4 4 lock exclusive}",
          "629:   {1 2 unlock exclusive} {4 4 unlock exclusive} {0 1 unlock exclusive}",
          "",
          "[Added Lines]",
          "640:   {0 1 lock exclusive}   {1 2 lock exclusive}",
          "641:   {4 1 lock exclusive}   {4 1 unlock exclusive}",
          "642:   {5 1 lock exclusive}   {5 1 unlock exclusive}",
          "643:   {6 1 lock exclusive}   {6 1 unlock exclusive}",
          "644:   {7 1 lock exclusive}   {7 1 unlock exclusive}",
          "645:   {1 2 unlock exclusive} {0 1 unlock exclusive}",
          "",
          "---------------"
        ],
        "test/walprotocol.test||test/walprotocol.test": [
          "File: test/walprotocol.test -> test/walprotocol.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   set ::locks [list]",
          "53:   sqlite3 db test.db -vfs T",
          "54:   execsql { SELECT * FROM x }",
          "58: ]",
          "59: do_test 1.2 {",
          "60:   db close",
          "61:   set ::locks [list]",
          "62:   sqlite3 db test.db -vfs T",
          "63:   execsql { SELECT * FROM x }",
          "67: ]",
          "68: proc lock_callback {method filename handle lock} {",
          "69:   if {$lock == \"1 2 lock exclusive\"} { return SQLITE_BUSY }",
          "",
          "[Removed Lines]",
          "55:   lrange $::locks 0 5",
          "56: } [list {0 1 lock exclusive} {1 2 lock exclusive} {4 4 lock exclusive} \\",
          "57:         {1 2 unlock exclusive} {4 4 unlock exclusive} {0 1 unlock exclusive}  \\",
          "64:   lrange $::locks 0 5",
          "65: } [list {0 1 lock exclusive} {1 2 lock exclusive} {4 4 lock exclusive} \\",
          "66:         {1 2 unlock exclusive} {4 4 unlock exclusive} {0 1 unlock exclusive}  \\",
          "",
          "[Added Lines]",
          "55:   lrange $::locks 0 11",
          "56: } [list {0 1 lock exclusive} {1 2 lock exclusive}     \\",
          "57:         {4 1 lock exclusive} {4 1 unlock exclusive}   \\",
          "58:         {5 1 lock exclusive} {5 1 unlock exclusive}   \\",
          "59:         {6 1 lock exclusive} {6 1 unlock exclusive}   \\",
          "60:         {7 1 lock exclusive} {7 1 unlock exclusive}   \\",
          "61:         {1 2 unlock exclusive}   \\",
          "62:         {0 1 unlock exclusive}  \\",
          "69:   lrange $::locks 0 11",
          "70: } [list {0 1 lock exclusive} {1 2 lock exclusive}     \\",
          "71:         {4 1 lock exclusive} {4 1 unlock exclusive}   \\",
          "72:         {5 1 lock exclusive} {5 1 unlock exclusive}   \\",
          "73:         {6 1 lock exclusive} {6 1 unlock exclusive}   \\",
          "74:         {7 1 lock exclusive} {7 1 unlock exclusive}   \\",
          "75:         {1 2 unlock exclusive}   \\",
          "76:         {0 1 unlock exclusive}  \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:   set ::locks [list]",
          "102:   sqlite3 db test.db -vfs T",
          "103:   catchsql { SELECT * FROM x }",
          "105: db close",
          "106: T delete",
          "",
          "[Removed Lines]",
          "104: } {1 {locking protocol}}",
          "",
          "[Added Lines]",
          "114: } {0 z}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160: } {Tehran Qom Markazi Qazvin Gilan Ardabil}",
          "161: do_test 2.6 {",
          "162:   set ::r",
          "165: db close",
          "166: db2 close",
          "",
          "[Removed Lines]",
          "163: } {1 {locking protocol}}",
          "",
          "[Added Lines]",
          "173: } {0 {Tehran Qom Markazi Qazvin Gilan Ardabil}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "182: } {Tehran Qom Markazi Qazvin Gilan Ardabil}",
          "183: do_test 2.8 {",
          "184:   set ::r",
          "187: db close",
          "188: db2 close",
          "",
          "[Removed Lines]",
          "185: } {1 {locking protocol}}",
          "",
          "[Added Lines]",
          "195: } {0 {Tehran Qom Markazi Qazvin Gilan Ardabil}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "014fff20adb15674b91be74895fc8e3164a92434",
      "candidate_info": {
        "commit_hash": "014fff20adb15674b91be74895fc8e3164a92434",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/014fff20adb15674b91be74895fc8e3164a92434",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/treeview.c"
        ],
        "message": "Block edgy functions used in DEFAULT constraints.\n\nFossilOrigin-Name: da434dc149786e4b1cd80b3b2b25f8b614d0dec62d5439f839a66b536999e398",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 30882ca80f6c51f6bb7b2692c1ac3f19a7c61a23aa8730be79aec0ae3ef08d54",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1404:   sqlite3 *db = pParse->db;",
          "1405:   p = pParse->pNewTable;",
          "1406:   if( p!=0 ){",
          "1407:     pCol = &(p->aCol[p->nCol-1]);",
          "1409:       sqlite3ErrorMsg(pParse, \"default value of column [%s] is not constant\",",
          "1410:           pCol->zName);",
          "1411: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "",
          "[Removed Lines]",
          "1408:     if( !sqlite3ExprIsConstantOrFunction(pExpr, db->init.busy) ){",
          "",
          "[Added Lines]",
          "1407:     int isInit = db->init.busy && db->init.iDb!=1;",
          "1409:     if( !sqlite3ExprIsConstantOrFunction(pExpr, isInit) ){",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1998:       if( (pWalker->eCode>=4 || ExprHasProperty(pExpr,EP_ConstFunc))",
          "1999:        && !ExprHasProperty(pExpr, EP_WinFunc)",
          "2000:       ){",
          "2001:         return WRC_Continue;",
          "2002:       }else{",
          "2003:         pWalker->eCode = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2002:         if( pWalker->eCode==5 ) ExprSetProperty(pExpr, EP_FromDDL);",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "572:       }else{",
          "573:         pFarg = pExpr->x.pList;",
          "574: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "576: #else",
          "577:         pWin = 0;",
          "578: #endif",
          "",
          "[Removed Lines]",
          "575:         pWin = pExpr->y.pWin;",
          "",
          "[Added Lines]",
          "575:         pWin = ExprHasProperty(pExpr, EP_WinFunc) ? pExpr->y.pWin : 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}