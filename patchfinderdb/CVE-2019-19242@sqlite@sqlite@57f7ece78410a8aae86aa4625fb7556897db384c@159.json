{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "89b6de0357a499209c13cf66a3cc406f26f67e6f",
      "candidate_info": {
        "commit_hash": "89b6de0357a499209c13cf66a3cc406f26f67e6f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/89b6de0357a499209c13cf66a3cc406f26f67e6f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Remove an ALWAYS() from a branch that is not always taken.  The test case found by OSSFuzz has been added to TH3.\n\nFossilOrigin-Name: 5c7dab85535ac42c021977dbd4a39cef5a72e3d9dccff1c5ca5570a1780516cd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 23b62fb160d86dc9d9073bcc714601f5b7695f96abd893eafecf4b2e565b87f2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4778:     }",
          "4779:   }",
          "4780:   if( (pA->flags & EP_Distinct)!=(pB->flags & EP_Distinct) ) return 2;",
          "4782:     if( combinedFlags & EP_xIsSelect ) return 2;",
          "4783:     if( (combinedFlags & EP_FixedCol)==0",
          "4784:      && sqlite3ExprCompare(pParse, pA->pLeft, pB->pLeft, iTab) ) return 2;",
          "",
          "[Removed Lines]",
          "4781:   if( ALWAYS((combinedFlags & EP_TokenOnly)==0) ){",
          "",
          "[Added Lines]",
          "4781:   if( (combinedFlags & EP_TokenOnly)==0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "490e6f2506a1ebd37c2acdddcd2484d7b59d8071",
      "candidate_info": {
        "commit_hash": "490e6f2506a1ebd37c2acdddcd2484d7b59d8071",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/490e6f2506a1ebd37c2acdddcd2484d7b59d8071",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab3.test"
        ],
        "message": "Fix a stack overflow that could occur when renaming a table that has a trigger containing a window function invocation that itself contains a specific syntax error.\n\nFossilOrigin-Name: c621fc668c6538f9f5bdac204f012c64998679a61aa8e224d212503820224c09",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 50fe48458942fa7a6bcc76316c6321f95b23dc34f2f8e0a483826483b2fb16f6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "866: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "867:         if( pExpr->y.pWin ){",
          "868:           Select *pSel = pNC->pWinSelect;",
          "870:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pPartition);",
          "871:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pOrderBy);",
          "872:           sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "",
          "[Removed Lines]",
          "869:           sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "",
          "[Added Lines]",
          "869:           if( IN_RENAME_OBJECT==0 ){",
          "870:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "871:           }",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:   ALTER TABLE Table0 RENAME Col0 TO Col0;",
          "143: }",
          "145: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145: #-------------------------------------------------------------------------",
          "146: reset_db",
          "147: do_execsql_test 7.1.0 {",
          "148:   CREATE TABLE t1(a,b,c);",
          "149:   CREATE TRIGGER AFTER INSERT ON t1 BEGIN",
          "150:     SELECT a, rank() OVER w1 FROM t1",
          "151:     WINDOW w1 AS (PARTITION BY b, percent_rank() OVER w1);",
          "152:   END;",
          "153: }",
          "155: do_execsql_test 7.1.2 {",
          "156:   ALTER TABLE t1 RENAME TO t1x;",
          "157:   SELECT sql FROM sqlite_master;",
          "158: } {",
          "159:   {CREATE TABLE \"t1x\"(a,b,c)}",
          "160:   {CREATE TRIGGER AFTER INSERT ON \"t1x\" BEGIN",
          "161:     SELECT a, rank() OVER w1 FROM \"t1x\"",
          "162:     WINDOW w1 AS (PARTITION BY b, percent_rank() OVER w1);",
          "163:   END}",
          "164: }",
          "166: do_execsql_test 7.2.1 {",
          "167:   DROP TRIGGER after;",
          "168:   CREATE TRIGGER AFTER INSERT ON t1x BEGIN",
          "169:     SELECT a, rank() OVER w1 FROM t1x",
          "170:     WINDOW w1 AS (PARTITION BY b, percent_rank() OVER w1 ORDER BY d);",
          "171:   END;",
          "172: }",
          "174: do_catchsql_test 7.2.2 {",
          "175:   ALTER TABLE t1x RENAME TO t1;",
          "176: } {1 {error in trigger AFTER: no such column: d}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b042d921280d839ca891cd15ff0d880379c19aaa",
      "candidate_info": {
        "commit_hash": "b042d921280d839ca891cd15ff0d880379c19aaa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b042d921280d839ca891cd15ff0d880379c19aaa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/misc7.test"
        ],
        "message": "Give a meaningful error on an attempt to use UPSERT on a virtual table, rather than simply not working.\n\nFossilOrigin-Name: fa98748f956cff95fcfda3a513cea4df27aa573ae795a6855c40bfeca661d0b2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/misc7.test||test/misc7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d7f55c62c3fa053b9b930a044b60076a8278cbf679d8e5116b95f2ff19247f6b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "826:   }",
          "827: #ifndef SQLITE_OMIT_UPSERT",
          "828:   if( pUpsert ){",
          "829:     pTabList->a[0].iCursor = iDataCur;",
          "830:     pUpsert->pUpsertSrc = pTabList;",
          "831:     pUpsert->regData = regData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "829:     if( IsVirtual(pTab) ){",
          "830:       sqlite3ErrorMsg(pParse, \"UPSERT not implemented for virtual table \\\"%s\\\"\",",
          "831:               pTab->zName);",
          "832:       goto insert_cleanup;",
          "833:     }",
          "",
          "---------------"
        ],
        "test/misc7.test||test/misc7.test": [
          "File: test/misc7.test -> test/misc7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:     }",
          "228:   } {1}",
          "229:   set sqlite_where_trace 0",
          "231:   # Specify an ORDER BY clause that cannot be indexed.",
          "232:   do_test misc7-11 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:   do_catchsql_test misc7-10.1 {",
          "231:     INSERT INTO t1(a,b,c) VALUES(12345,2,3) ON CONFLICT(a) DO NOTHING;",
          "232:   } {1 {UPSERT not implemented for virtual table \"t1\"}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e35e81dcbf150df7e3c26d59c1c2dddf0f147ab",
      "candidate_info": {
        "commit_hash": "7e35e81dcbf150df7e3c26d59c1c2dddf0f147ab",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e35e81dcbf150df7e3c26d59c1c2dddf0f147ab",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Do not allow the json_set() function to overwrite the same element more than once.\n\nFossilOrigin-Name: f237f60e4fa9171dfe9a77c8637595c2701e971034d41bd6018944e8b2b27a6f",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1083:   const char *zKey;",
          "1084:   JsonNode *pRoot = &pParse->aNode[iRoot];",
          "1085:   if( zPath[0]==0 ) return pRoot;",
          "1086:   if( zPath[0]=='.' ){",
          "1087:     if( pRoot->eType!=JSON_OBJECT ) return 0;",
          "1088:     zPath++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1086:   if( pRoot->jnFlags & JNODE_REPLACE ) return 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b9eda2249ab5cf523093e4849c317d9a4b1743f7e15d96bdd6bb6cc423302914",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27a037354c9bc67a65f84e45584dc67c24c15f58",
      "candidate_info": {
        "commit_hash": "27a037354c9bc67a65f84e45584dc67c24c15f58",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/27a037354c9bc67a65f84e45584dc67c24c15f58",
        "files": [
          "ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid a division-by-zero error in fts5 caused by a corrupt database.\n\nFossilOrigin-Name: 928e622178bd004be52b2271ac554176aebe9d6e115ecac4e7072eccbb4262b5",
        "before_after_code_files": [
          "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c": [
          "File: ext/fts5/fts5_aux.c -> ext/fts5/fts5_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "588:     if( rc==SQLITE_OK ) rc = pApi->xRowCount(pFts, &nRow);",
          "589:     if( rc==SQLITE_OK ) rc = pApi->xColumnTotalSize(pFts, -1, &nToken);",
          "590:     if( rc==SQLITE_OK ) p->avgdl = (double)nToken  / (double)nRow;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589:     assert( rc!=SQLITE_OK || nRow>0 );",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1078: int sqlite3Fts5StorageRowCount(Fts5Storage *p, i64 *pnRow){",
          "1079:   int rc = fts5StorageLoadTotals(p, 0);",
          "1080:   if( rc==SQLITE_OK ){",
          "1082:   }",
          "1083:   return rc;",
          "1084: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1087:     if( p->nTotalRow<=0 ) rc = FTS5_CORRUPT;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "4652:   SELECT rowid FROM t1('a');",
          "4653: } {1}",
          "4657: sqlite3_fts5_may_be_corrupt 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4655: #-------------------------------------------------------------------------",
          "4656: reset_db",
          "4657: do_execsql_test 38.0 {",
          "4658:   CREATE VIRTUAL TABLE t1 USING fts5(b, c);",
          "4659:   INSERT INTO t1 VALUES('a', 'b');",
          "4660:   INSERT INTO t1 VALUES('a', 'b');",
          "4661:   SELECT quote(block) FROM t1_data WHERE rowid=1;",
          "4662: } {X'020202'}",
          "4664: do_execsql_test 38.1 {",
          "4665:   SELECT * FROM t1('a b') ORDER BY rank;",
          "4666: } {a b a b}",
          "4668: do_execsql_test 38.2 {",
          "4669:   UPDATE t1_data SET block = X'000202' WHERE rowid=1;",
          "4670: }",
          "4671: breakpoint",
          "4672: do_catchsql_test 38.3 {",
          "4673:   SELECT * FROM t1('a b') ORDER BY rank;",
          "4674: } {1 {database disk image is malformed}}",
          "4676: db close",
          "4677: sqlite3 db test.db",
          "4678: do_catchsql_test 38.4 {",
          "4679:   SELECT * FROM t1('a b') ORDER BY rank;",
          "4680: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7cd56cad5efead5097e9918c87313bb46e583fe62bae0df1be60e10117e2c3cb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}