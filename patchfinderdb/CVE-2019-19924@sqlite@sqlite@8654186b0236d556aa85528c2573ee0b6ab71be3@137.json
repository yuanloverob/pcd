{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a599e150caa88cfc9a7c27cf7bd79fe93b8ea7d8",
      "candidate_info": {
        "commit_hash": "a599e150caa88cfc9a7c27cf7bd79fe93b8ea7d8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a599e150caa88cfc9a7c27cf7bd79fe93b8ea7d8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Restore a line of code that was previously commented out for debugging.\n\nFossilOrigin-Name: e53781f5bdf5c7b7d91ffe76565ea2fe5d1b3a9b162b3a88a7017bbe785d4c72",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 06de44ec9e173992ca9afb89dd2b4e40d2a7e35512c7959603cdceb606f5dfbd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2197:     if( pAlt->wtFlags & (TERM_CODED) ) continue;",
          "2198:     if( (pAlt->eOperator & WO_IN)",
          "2199:      && (pAlt->pExpr->flags & EP_xIsSelect)",
          "2201:     ){",
          "2202:       continue;",
          "2203:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2200:      && (pAlt->pExpr->x.pSelect->pEList->nExpr>1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9c7c4b1f25fa5692d2a5154ed3f148021189c1f",
      "candidate_info": {
        "commit_hash": "f9c7c4b1f25fa5692d2a5154ed3f148021189c1f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f9c7c4b1f25fa5692d2a5154ed3f148021189c1f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "In the CLI, add a small delay (0.1 seconds) after launching the output command for \".once\" before deleting the temporary file.\n\nFossilOrigin-Name: 4979f138e8c8bef7dd6b5921fb9ca9fea86bbf7ec1419934bb2d1a0d74e77183",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 873aa46da3d0f97784cad94828fc367bb2ceb13d5ece2e105320f404b3971c85",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "4849:       sqlite3_free(zCmd);",
          "4850:       outputModePop(p);",
          "4851:       p->doXdgOpen = 0;",
          "4852:     }",
          "4854:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4852:       sqlite3_sleep(100);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39b30a7d6bfcf46cd24688006b1106c6ea313da2",
      "candidate_info": {
        "commit_hash": "39b30a7d6bfcf46cd24688006b1106c6ea313da2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39b30a7d6bfcf46cd24688006b1106c6ea313da2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/delete.c",
          "test/index6.test"
        ],
        "message": "In sqlite3GenerateIndexKey(), do not attempt to reuse column values from the previous index if the current index is a partial index as the partial index test may have corrupted those values.  Ticket [a9efb42811fa41ee]\n\nFossilOrigin-Name: 17e9f65814264de9c35bc5ba94e0a66fbbf1200c00d33ab9a19a0b6f92bc685a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/delete.c||src/delete.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 28b8f1036d569bccce56b4e7042348024b5dd1ffa04850cbeddab1e35c49e5b7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "918:       sqlite3ExprIfFalseDup(pParse, pIdx->pPartIdxWhere, *piPartIdxLabel,",
          "919:                             SQLITE_JUMPIFNULL);",
          "920:       pParse->iSelfTab = 0;",
          "921:     }else{",
          "923:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "921:       pPrior = 0; /* Ticket a9efb42811fa41ee 2019-11-02;",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:   SELECT 3 FROM t0 WHERE c1 <= c0;",
          "479: } {3}",
          "484: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481: # 2019-11-02",
          "482: # Ticket https://sqlite.org/src/tktview/a9efb42811fa41ee286e8",
          "483: db close",
          "484: sqlite3 db :memory:",
          "485: do_execsql_test index6-17.1 {",
          "486:   CREATE TABLE t0(c0);",
          "487:   CREATE INDEX i0 ON t0(0) WHERE c0 GLOB c0;",
          "488:   INSERT INTO t0 VALUES (0);",
          "489:   CREATE UNIQUE INDEX i1 ON t0(0);",
          "490:   PRAGMA integrity_check;",
          "491: } {ok}",
          "492: do_execsql_test index6-17.2 {",
          "493:   CREATE UNIQUE INDEX i2 ON t0(0);",
          "494:   REPLACE INTO t0 VALUES(0);",
          "495:   PRAGMA integrity_check;",
          "496: } {ok}",
          "497: do_execsql_test index6-17.3 {",
          "498:   SELECT COUNT(*) FROM t0 WHERE t0.c0 GLOB t0.c0;",
          "499: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fda0aaf00198e05cfbccc6cb8b9fd1827b5343e",
      "candidate_info": {
        "commit_hash": "3fda0aaf00198e05cfbccc6cb8b9fd1827b5343e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3fda0aaf00198e05cfbccc6cb8b9fd1827b5343e",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/mkkeywordhash.c"
        ],
        "message": "Put the list of keywords in mkkeywordhash.c into alphabetical order.\n\nFossilOrigin-Name: ac98b23b34632fbc654a34a8b3d842ce65603e4c04d89c589b46f4d48a61152d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f7ba2daf91c96ba16958188d6084a0ff129310d348932de493d326f1d24679cd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:   { \"VALUES\",           \"TK_VALUES\",       ALWAYS                 },",
          "294:   { \"VIEW\",             \"TK_VIEW\",         VIEW                   },",
          "295:   { \"VIRTUAL\",          \"TK_VIRTUAL\",      VTAB                   },",
          "296:   { \"WINDOW\",           \"TK_WINDOW\",       WINDOWFUNC             },",
          "297:   { \"WITH\",             \"TK_WITH\",         CTE                    },",
          "298:   { \"WITHOUT\",          \"TK_WITHOUT\",      ALWAYS                 },",
          "301: };",
          "",
          "[Removed Lines]",
          "299:   { \"WHEN\",             \"TK_WHEN\",         ALWAYS                 },",
          "300:   { \"WHERE\",            \"TK_WHERE\",        ALWAYS                 },",
          "",
          "[Added Lines]",
          "296:   { \"WHEN\",             \"TK_WHEN\",         ALWAYS                 },",
          "297:   { \"WHERE\",            \"TK_WHERE\",        ALWAYS                 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e3c50c5dc156fd5f05d7284510c5905494f04db",
      "candidate_info": {
        "commit_hash": "0e3c50c5dc156fd5f05d7284510c5905494f04db",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0e3c50c5dc156fd5f05d7284510c5905494f04db",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window9.test"
        ],
        "message": "Eliminate some more cases of redundant sorting in window-function queries.\n\nFossilOrigin-Name: 8158d2aca68c5a253054376fdf1b8eaab2db874f4b93524742be7340e9c50dd5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 193c87fc96f964984a144c1a4506ef9db033ab2b80e64dd4d09d820fef466407",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "935:     pSort = sqlite3ExprListDup(db, pMWin->pPartition, 0);",
          "936:     pSort = exprListAppendList(pParse, pSort, pMWin->pOrderBy, 1);",
          "938:       if( sqlite3ExprListCompare(pSort, p->pOrderBy, -1)==0 ){",
          "939:         sqlite3ExprListDelete(db, p->pOrderBy);",
          "940:         p->pOrderBy = 0;",
          "941:       }",
          "942:     }",
          "",
          "[Removed Lines]",
          "937:     if( pSort && p->pOrderBy ){",
          "",
          "[Added Lines]",
          "937:     if( pSort && p->pOrderBy && p->pOrderBy->nExpr<=pSort->nExpr ){",
          "938:       int nSave = pSort->nExpr;",
          "939:       pSort->nExpr = p->pOrderBy->nExpr;",
          "944:       pSort->nExpr = nSave;",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   SELECT b, b=count(*), group_concat(b) OVER () FROM t1 GROUP BY b;",
          "146: } {1 0 1,2 2 1 1,2}",
          "150: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: #--------------------------------------------------------------------------",
          "149: reset_db",
          "150: do_execsql_test 5.0 {",
          "151:   CREATE TABLE t1(a, b, c, d, e);",
          "152:   CREATE INDEX i1 ON t1(a, b, c, d, e);",
          "153: }",
          "155: foreach {tn sql} {",
          "156:   1 {",
          "157:     SELECT",
          "158:       sum(e) OVER (),",
          "159:       sum(e) OVER (ORDER BY a),",
          "160:       sum(e) OVER (PARTITION BY a ORDER BY b),",
          "161:       sum(e) OVER (PARTITION BY a, b ORDER BY c),",
          "162:       sum(e) OVER (PARTITION BY a, b, c ORDER BY d)",
          "163:     FROM t1;",
          "164:   }",
          "165:   2 {",
          "166:     SELECT sum(e) OVER (PARTITION BY a ORDER BY b) FROM t1 ORDER BY a;",
          "167:   }",
          "168: } {",
          "169:   do_test 5.1.$tn {",
          "170:     execsql \"EXPLAIN QUERY PLAN $sql\"",
          "171:   } {~/ORDER/}",
          "172: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}